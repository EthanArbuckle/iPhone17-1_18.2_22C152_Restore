BOOL sub_1A66D6388(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;

  v3 = a2;
  v8 = objc_msgSend_voiceId(v3, v4, v5, v6, v7);
  if (objc_msgSend_hasPrefix_(v8, v9, @"com.apple.maui.voice", v10, v11))
  {
    v12 = TTSIsInternalBuild();

    if (v12) {
      goto LABEL_10;
    }
  }
  else
  {
  }
  if ((objc_msgSend_memoryPeakExceedsActiveJetsamLimit(v3, v13, v14, v15, v16) & 1) == 0)
  {
    if (objc_msgSend_type(v3, v17, v18, v19, v20) == 4 && objc_msgSend_footprint(v3, v21, v22, v23, v24) == 2)
    {
      v25 = *(void **)(a1 + 32);
      v26 = objc_msgSend_speechVoice(v3, v21, v22, v23, v24);
      v31 = objc_msgSend_copy(v26, v27, v28, v29, v30);
      objc_msgSend_addObject_(v25, v32, (uint64_t)v31, v33, v34);
    }
    else if (objc_msgSend_type(v3, v21, v22, v23, v24) != 7)
    {
      v39 = objc_msgSend_type(v3, v35, v36, v37, v38) != 6;
      goto LABEL_11;
    }
  }
LABEL_10:
  v39 = 0;
LABEL_11:

  return v39;
}

void sub_1A66D647C(uint64_t a1)
{
  v2 = (void *)qword_1EB67AB80;
  if (!qword_1EB67AB80)
  {
    v3 = objc_alloc_init(TTSSynthesisProviderVoiceManager);
    v4 = (void *)qword_1EB67AB80;
    qword_1EB67AB80 = (uint64_t)v3;

    v2 = (void *)qword_1EB67AB80;
  }
  v5 = (id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);

  objc_storeStrong(v5, v2);
}

void sub_1A66D66F8(uint64_t a1)
{
  v2 = (void *)qword_1EB67AB88;
  if (!qword_1EB67AB88)
  {
    v3 = objc_alloc_init(TTSAXResourceManager);
    v4 = (void *)qword_1EB67AB88;
    qword_1EB67AB88 = (uint64_t)v3;

    v2 = (void *)qword_1EB67AB88;
  }
  v5 = (id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);

  objc_storeStrong(v5, v2);
}

void sub_1A66D675C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((byte_1EB67AAB0 & 1) == 0)
  {
    objc_msgSend_array(MEMORY[0x1E4F1CA48], a2, a3, a4, a5);
    id v11 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v9 = objc_msgSend_copy(v11, v5, v6, v7, v8);
    v10 = (void *)qword_1EB67AAA8;
    qword_1EB67AAA8 = v9;

    byte_1EB67AAB0 = 1;
  }
}

uint64_t sub_1A66D68D8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = objc_msgSend_stringByAppendingFormat_(@"com.apple.ttsbundle.siri", a2, @"_male", a4, a5);
  uint64_t v6 = (void *)qword_1EB67AA88;
  qword_1EB67AA88 = v5;

  uint64_t v10 = objc_msgSend_stringByAppendingFormat_(@"com.apple.ttsbundle.siri", v7, @"_female", v8, v9);
  id v11 = (void *)qword_1EB67AA80;
  qword_1EB67AA80 = v10;

  uint64_t v15 = objc_msgSend_stringByAppendingFormat_(@"com.apple.ttsbundle.gryphon", v12, @"_male", v13, v14);
  v16 = (void *)qword_1EB67AA98;
  qword_1EB67AA98 = v15;

  qword_1EB67AA90 = objc_msgSend_stringByAppendingFormat_(@"com.apple.ttsbundle.gryphon", v17, @"_female", v18, v19);

  return MEMORY[0x1F41817F8]();
}

void sub_1A66D6AD4()
{
  id v0 = objc_alloc(MEMORY[0x1E4F28E10]);
  uint64_t v2 = objc_msgSend_initWithKeyOptions_valueOptions_capacity_(v0, v1, 0, 5, 1);
  v3 = (void *)qword_1EB67AAB8;
  qword_1EB67AAB8 = v2;

  uint64_t v4 = objc_opt_new();
  uint64_t v5 = (void *)qword_1EB67AAC0;
  qword_1EB67AAC0 = v4;

  uint64_t v8 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v6 = dispatch_queue_create("language-creation", v8);
  uint64_t v7 = (void *)qword_1EB67AAC8;
  qword_1EB67AAC8 = (uint64_t)v6;
}

void sub_1A66D70EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

id TTSPreferencesCopyDefaultOutputLanguageIdentifierForUserPreferences()
{
  uint64_t v15 = 0;
  v16 = &v15;
  uint64_t v17 = 0x3032000000;
  uint64_t v18 = sub_1A66FC400;
  uint64_t v19 = sub_1A66FC410;
  id v20 = 0;
  dispatch_semaphore_t v0 = dispatch_semaphore_create(0);
  uint64_t v5 = objc_msgSend_shared(_TtC12TextToSpeech13VoiceResolver, v1, v2, v3, v4);
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = sub_1A66FC418;
  v12[3] = &unk_1E5C69998;
  uint64_t v14 = &v15;
  dispatch_queue_t v6 = v0;
  uint64_t v13 = v6;
  objc_msgSend_currentSystemLocaleIdentifierWithCompletionHandler_(v5, v7, (uint64_t)v12, v8, v9);

  dispatch_semaphore_wait(v6, 0xFFFFFFFFFFFFFFFFLL);
  id v10 = (id)v16[5];

  _Block_object_dispose(&v15, 8);
  return v10;
}

void sub_1A66D74F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A66D83DC(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    id v2 = objc_begin_catch(exception_object);
    uint64_t v3 = AXTTSLogResourceManager();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_1A688EDF0();
    }

    objc_end_catch();
    JUMPOUT(0x1A66D8388);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A66D8AA8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1A66D8C20(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = NSNumber;
  id v6 = a2;
  uint64_t v11 = objc_msgSend_count(a3, v7, v8, v9, v10);
  objc_msgSend_numberWithUnsignedInteger_(v5, v12, v11, v13, v14);
  id v18 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_appendFormat_(v4, v15, @"%@=%@ ", v16, v17, v6, v18);
}

void sub_1A66D9280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A66D9458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A66D98CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1A66D98E4(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v6 = NSString;
  uint64_t v7 = objc_msgSend_synthesizerBundleIdentifier(a1, a2, a3, a4, a5);
  v12 = objc_msgSend_identifier(a1, v8, v9, v10, v11);
  uint64_t v16 = objc_msgSend_stringWithFormat_(v6, v13, @"%@.%@", v14, v15, v7, v12);

  return v16;
}

uint64_t AXAVVoiceQualityFromTTSSpeechVoice(void *a1)
{
  id v1 = a1;
  uint64_t v6 = objc_msgSend_synthesisProviderVoice(v1, v2, v3, v4, v5);
  if (!v6) {
    goto LABEL_5;
  }
  uint64_t v11 = (void *)v6;
  uint64_t v12 = objc_msgSend_synthesisProviderVoice(v1, v7, v8, v9, v10);
  if (!v12)
  {
LABEL_8:

    goto LABEL_9;
  }
  uint64_t v17 = (void *)v12;
  id v18 = objc_msgSend_synthesisProviderVoice(v1, v13, v14, v15, v16);
  if ((objc_msgSend_isFirstParty(v18, v19, v20, v21, v22) & 1) == 0)
  {

    goto LABEL_8;
  }
  int canBeDownloaded = objc_msgSend_canBeDownloaded(v1, v23, v24, v25, v26);

  if (!canBeDownloaded)
  {
LABEL_9:
    uint64_t v29 = 1;
    goto LABEL_10;
  }
LABEL_5:
  uint64_t v28 = objc_msgSend_footprint(v1, v7, v8, v9, v10);
  if ((unint64_t)(v28 - 1) > 4) {
    goto LABEL_9;
  }
  uint64_t v29 = qword_1A689D870[v28 - 1];
LABEL_10:

  return v29;
}

uint64_t TTSUseMauiSSE()
{
  return MEMORY[0x1F4106248]();
}

__CFString *TTSStringForSpeechGender(unint64_t a1)
{
  if (a1 > 2) {
    return 0;
  }
  else {
    return off_1E5C6ABC8[a1];
  }
}

id sub_1A66D9B14(void *a1, uint64_t a2, void *a3)
{
  v204[1] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  v202.receiver = a1;
  v202.super_class = (Class)&off_1EFBA6FC8;
  id v5 = objc_msgSendSuper2(&v202, sel_init);
  if (v5)
  {
    uint64_t v6 = objc_opt_class();
    uint64_t v9 = objc_msgSend_decodeObjectOfClass_forKey_(v4, v7, v6, @"name", v8);
    objc_msgSend_setName_(v5, v10, (uint64_t)v9, v11, v12);

    uint64_t v13 = objc_opt_class();
    uint64_t v16 = objc_msgSend_decodeObjectOfClass_forKey_(v4, v14, v13, @"identifier", v15);
    objc_msgSend_setIdentifier_(v5, v17, (uint64_t)v16, v18, v19);

    uint64_t v20 = (void *)MEMORY[0x1E4F1CAD0];
    uint64_t v21 = objc_opt_class();
    uint64_t v22 = objc_opt_class();
    v200 = objc_msgSend_setWithObjects_(v20, v23, v21, v24, v25, v22, 0);
    uint64_t v28 = objc_msgSend_decodeObjectOfClasses_forKey_(v4, v26, (uint64_t)v200, @"supportedLanguages", v27);
    objc_msgSend_setSupportedLanguages_(v5, v29, (uint64_t)v28, v30, v31);

    v34 = objc_msgSend_decodeObjectOfClasses_forKey_(v4, v32, (uint64_t)v200, @"primaryLanguages", v33);
    objc_msgSend_setPrimaryLanguages_(v5, v35, (uint64_t)v34, v36, v37);

    uint64_t v38 = objc_opt_class();
    v41 = objc_msgSend_decodeObjectOfClass_forKey_(v4, v39, v38, @"voiceSize", v40);
    uint64_t v46 = objc_msgSend_longLongValue(v41, v42, v43, v44, v45);
    objc_msgSend_setVoiceSize_(v5, v47, v46, v48, v49);

    uint64_t v50 = objc_opt_class();
    v53 = objc_msgSend_decodeObjectOfClass_forKey_(v4, v51, v50, @"version", v52);
    objc_msgSend_setVersion_(v5, v54, (uint64_t)v53, v55, v56);

    uint64_t v57 = objc_opt_class();
    v60 = objc_msgSend_decodeObjectOfClass_forKey_(v4, v58, v57, @"gender", v59);
    uint64_t v65 = objc_msgSend_integerValue(v60, v61, v62, v63, v64);
    objc_msgSend_setGender_(v5, v66, v65, v67, v68);

    uint64_t v69 = objc_opt_class();
    v72 = objc_msgSend_decodeObjectOfClass_forKey_(v4, v70, v69, @"age", v71);
    uint64_t v77 = objc_msgSend_integerValue(v72, v73, v74, v75, v76);
    objc_msgSend_setAge_(v5, v78, v77, v79, v80);

    uint64_t v81 = objc_opt_class();
    v84 = objc_msgSend_decodeObjectOfClass_forKey_(v4, v82, v81, @"auDescType", v83);
    LODWORD(v72) = objc_msgSend_intValue(v84, v85, v86, v87, v88);

    uint64_t v89 = objc_opt_class();
    v92 = objc_msgSend_decodeObjectOfClass_forKey_(v4, v90, v89, @"auDescSubType", v91);
    LODWORD(v84) = objc_msgSend_intValue(v92, v93, v94, v95, v96);

    uint64_t v97 = objc_opt_class();
    v100 = objc_msgSend_decodeObjectOfClass_forKey_(v4, v98, v97, @"auDescManufacturer", v99);
    int v105 = objc_msgSend_intValue(v100, v101, v102, v103, v104);

    uint64_t v106 = objc_opt_class();
    v109 = objc_msgSend_decodeObjectOfClass_forKey_(v4, v107, v106, @"auDescFlags", v108);
    int v114 = objc_msgSend_unsignedIntValue(v109, v110, v111, v112, v113);

    uint64_t v115 = objc_opt_class();
    v118 = objc_msgSend_decodeObjectOfClass_forKey_(v4, v116, v115, @"auDescFlagsMask", v117);
    int v123 = objc_msgSend_unsignedIntValue(v118, v119, v120, v121, v122);

    v201[0] = v72;
    v201[1] = v84;
    v201[2] = v105;
    v201[3] = v114;
    v201[4] = v123;
    objc_msgSend_setAuComponentDesc_(v5, v124, (uint64_t)v201, v125, v126);
    uint64_t v127 = objc_opt_class();
    v130 = objc_msgSend_decodeObjectOfClass_forKey_(v4, v128, v127, @"manufacturerName", v129);
    objc_msgSend_setManufacturerName_(v5, v131, (uint64_t)v130, v132, v133);

    uint64_t v134 = objc_opt_class();
    v137 = objc_msgSend_decodeObjectOfClass_forKey_(v4, v135, v134, @"synthesizerBundleIdentifier", v136);
    objc_msgSend_setSynthesizerBundleIdentifier_(v5, v138, (uint64_t)v137, v139, v140);

    uint64_t v141 = objc_opt_class();
    v144 = objc_msgSend_decodeObjectOfClass_forKey_(v4, v142, v141, @"isFirstParty", v143);
    uint64_t v149 = objc_msgSend_BOOLValue(v144, v145, v146, v147, v148);
    objc_msgSend_setIsFirstParty_(v5, v150, v149, v151, v152);

    uint64_t v153 = objc_opt_class();
    v156 = objc_msgSend_decodeObjectOfClass_forKey_(v4, v154, v153, @"isPersonalVoice", v155);
    uint64_t v161 = objc_msgSend_BOOLValue(v156, v157, v158, v159, v160);
    objc_msgSend_setIsPersonalVoice_(v5, v162, v161, v163, v164);

    uint64_t v165 = objc_opt_class();
    v168 = objc_msgSend_decodeObjectOfClass_forKey_(v4, v166, v165, @"hasPerVoiceSettings", v167);
    uint64_t v173 = objc_msgSend_BOOLValue(v168, v169, v170, v171, v172);
    objc_msgSend_setHasPerVoiceSettings_(v5, v174, v173, v175, v176);

    v177 = (void *)MEMORY[0x1E4F1CAD0];
    v204[0] = objc_opt_class();
    v180 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v178, (uint64_t)v204, 1, v179);
    v184 = objc_msgSend_setWithArray_(v177, v181, (uint64_t)v180, v182, v183);
    v185 = (void *)MEMORY[0x1E4F1CAD0];
    v203[0] = objc_opt_class();
    v203[1] = objc_opt_class();
    v188 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v186, (uint64_t)v203, 2, v187);
    v192 = objc_msgSend_setWithArray_(v185, v189, (uint64_t)v188, v190, v191);
    v194 = objc_msgSend_decodeDictionaryWithKeysOfClasses_objectsOfClasses_forKey_(v4, v193, (uint64_t)v184, (uint64_t)v192, @"extraAttributes");
    objc_msgSend_setExtraAttributes_(v5, v195, (uint64_t)v194, v196, v197);

    id v198 = v5;
  }

  return v5;
}

void *sub_1A66DA89C(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = objc_opt_class();
  uint64_t v9 = objc_msgSend_allocWithZone_(v5, v6, a3, v7, v8);
  uint64_t v14 = objc_msgSend_init(v9, v10, v11, v12, v13);
  uint64_t v19 = objc_msgSend_name(a1, v15, v16, v17, v18);
  uint64_t v24 = objc_msgSend_copy(v19, v20, v21, v22, v23);
  objc_msgSend_setName_(v14, v25, (uint64_t)v24, v26, v27);

  v32 = objc_msgSend_identifier(a1, v28, v29, v30, v31);
  uint64_t v37 = objc_msgSend_copy(v32, v33, v34, v35, v36);
  objc_msgSend_setIdentifier_(v14, v38, (uint64_t)v37, v39, v40);

  uint64_t v45 = objc_msgSend_supportedLanguages(a1, v41, v42, v43, v44);

  if (v45)
  {
    id v50 = objc_alloc(MEMORY[0x1E4F1C978]);
    uint64_t v55 = objc_msgSend_supportedLanguages(a1, v51, v52, v53, v54);
    v58 = objc_msgSend_initWithArray_copyItems_(v50, v56, (uint64_t)v55, 1, v57);
    objc_msgSend_setSupportedLanguages_(v14, v59, (uint64_t)v58, v60, v61);
  }
  uint64_t v62 = objc_msgSend_primaryLanguages(a1, v46, v47, v48, v49);
  uint64_t v67 = objc_msgSend_copy(v62, v63, v64, v65, v66);
  objc_msgSend_setPrimaryLanguages_(v14, v68, (uint64_t)v67, v69, v70);

  uint64_t v75 = objc_msgSend_primaryLanguages(a1, v71, v72, v73, v74);

  if (v75)
  {
    id v80 = objc_alloc(MEMORY[0x1E4F1C978]);
    v85 = objc_msgSend_primaryLanguages(a1, v81, v82, v83, v84);
    uint64_t v88 = objc_msgSend_initWithArray_copyItems_(v80, v86, (uint64_t)v85, 1, v87);
    objc_msgSend_setPrimaryLanguages_(v14, v89, (uint64_t)v88, v90, v91);
  }
  uint64_t v92 = objc_msgSend_voiceSize(a1, v76, v77, v78, v79);
  objc_msgSend_setVoiceSize_(v14, v93, v92, v94, v95);
  v100 = objc_msgSend_version(a1, v96, v97, v98, v99);
  int v105 = objc_msgSend_copy(v100, v101, v102, v103, v104);
  objc_msgSend_setVersion_(v14, v106, (uint64_t)v105, v107, v108);

  uint64_t v113 = objc_msgSend_gender(a1, v109, v110, v111, v112);
  objc_msgSend_setGender_(v14, v114, v113, v115, v116);
  uint64_t v121 = objc_msgSend_age(a1, v117, v118, v119, v120);
  objc_msgSend_setAge_(v14, v122, v121, v123, v124);
  objc_msgSend_auComponentDesc(a1, v125, v126, v127, v128);
  long long v200 = v202;
  int v201 = v203;
  objc_msgSend_setAuComponentDesc_(v14, v129, (uint64_t)&v200, v130, v131);
  uint64_t v136 = objc_msgSend_manufacturerName(a1, v132, v133, v134, v135);
  uint64_t v141 = objc_msgSend_copy(v136, v137, v138, v139, v140);
  objc_msgSend_setManufacturerName_(v14, v142, (uint64_t)v141, v143, v144);

  uint64_t v149 = objc_msgSend_synthesizerBundleIdentifier(a1, v145, v146, v147, v148);
  v154 = objc_msgSend_copy(v149, v150, v151, v152, v153);
  objc_msgSend_setSynthesizerBundleIdentifier_(v14, v155, (uint64_t)v154, v156, v157);

  uint64_t isFirstParty = objc_msgSend_isFirstParty(a1, v158, v159, v160, v161);
  objc_msgSend_setIsFirstParty_(v14, v163, isFirstParty, v164, v165);
  uint64_t isPersonalVoice = objc_msgSend_isPersonalVoice(a1, v166, v167, v168, v169);
  objc_msgSend_setIsPersonalVoice_(v14, v171, isPersonalVoice, v172, v173);
  uint64_t hasPerVoiceSettings = objc_msgSend_hasPerVoiceSettings(a1, v174, v175, v176, v177);
  objc_msgSend_setHasPerVoiceSettings_(v14, v179, hasPerVoiceSettings, v180, v181);
  v186 = objc_msgSend_extraAttributes(a1, v182, v183, v184, v185);

  if (v186)
  {
    id v187 = objc_alloc(MEMORY[0x1E4F1C9E8]);
    v192 = objc_msgSend_extraAttributes(a1, v188, v189, v190, v191);
    v195 = objc_msgSend_initWithDictionary_copyItems_(v187, v193, (uint64_t)v192, 1, v194);
    objc_msgSend_setExtraAttributes_(v14, v196, (uint64_t)v195, v197, v198);
  }
  return v14;
}

void sub_1A66DABB4(void *a1, uint64_t a2, void *a3)
{
}

void sub_1A66DABC4(void *a1, uint64_t a2, void *a3)
{
}

void sub_1A66DABD4(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_msgSend_numberWithBool_(NSNumber, a2, a3, a4, a5);
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_setAssociatedObject(a1, &unk_1E96C47FF, v6, (void *)1);
}

void sub_1A66DAC3C(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_msgSend_numberWithBool_(NSNumber, a2, a3, a4, a5);
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_setAssociatedObject(a1, &unk_1E96C4801, v6, (void *)1);
}

void sub_1A66DACA4(void *a1, const char *a2, unsigned int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = objc_msgSend_numberWithUnsignedInt_(NSNumber, a2, *a3, a4, a5);
  objc_setAssociatedObject(a1, &unk_1E96C47F8, v7, (void *)1);

  uint64_t v11 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v8, a3[1], v9, v10);
  objc_setAssociatedObject(a1, &unk_1E96C47F9, v11, (void *)1);

  uint64_t v15 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v12, a3[2], v13, v14);
  objc_setAssociatedObject(a1, &unk_1E96C47FA, v15, (void *)1);

  uint64_t v19 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v16, a3[3], v17, v18);
  objc_setAssociatedObject(a1, &unk_1E96C47FB, v19, (void *)1);

  objc_msgSend_numberWithUnsignedInt_(NSNumber, v20, a3[4], v21, v22);
  id v23 = (id)objc_claimAutoreleasedReturnValue();
  objc_setAssociatedObject(a1, &unk_1E96C47FC, v23, (void *)1);
}

void sub_1A66DADDC(void *a1, uint64_t a2, void *a3)
{
}

void sub_1A66DADEC(void *a1, uint64_t a2, void *a3)
{
}

id sub_1A66DADFC(void *a1)
{
  return objc_getAssociatedObject(a1, &unk_1E96C47FE);
}

id sub_1A66DAE08(void *a1)
{
  return objc_getAssociatedObject(a1, &unk_1E96C4802);
}

id sub_1A66DAE14(void *a1)
{
  return objc_getAssociatedObject(a1, &unk_1E96C4803);
}

void sub_1A66DAE20(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_msgSend_numberWithBool_(NSNumber, a2, a3, a4, a5);
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_setAssociatedObject(a1, &unk_1E96C4800, v6, (void *)1);
}

void sub_1A66DAE88(void *a1, uint64_t a2, void *a3)
{
}

uint64_t sub_1A66DAE98(void *a1)
{
  id v1 = objc_getAssociatedObject(a1, &unk_1E96C4800);
  uint64_t v6 = objc_msgSend_BOOLValue(v1, v2, v3, v4, v5);

  return v6;
}

uint64_t sub_1A66DAED8(void *a1)
{
  id v1 = objc_getAssociatedObject(a1, &unk_1E96C47FF);
  uint64_t v6 = objc_msgSend_BOOLValue(v1, v2, v3, v4, v5);

  return v6;
}

id sub_1A66DAF18(void *a1)
{
  return objc_getAssociatedObject(a1, &unk_1E96C47FD);
}

uint64_t sub_1A66DAF24(void *a1)
{
  id v1 = objc_getAssociatedObject(a1, &unk_1E96C4801);
  uint64_t v6 = objc_msgSend_BOOLValue(v1, v2, v3, v4, v5);

  return v6;
}

id sub_1A66DAF64(void *a1)
{
  return objc_getAssociatedObject(a1, &unk_1E96C4804);
}

void sub_1A66DAF70(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  uint64_t v4 = objc_getAssociatedObject(a1, &unk_1E96C47F8);
  *(_DWORD *)a2 = objc_msgSend_intValue(v4, v5, v6, v7, v8);

  uint64_t v9 = objc_getAssociatedObject(a1, &unk_1E96C47F9);
  *(_DWORD *)(a2 + 4) = objc_msgSend_intValue(v9, v10, v11, v12, v13);

  uint64_t v14 = objc_getAssociatedObject(a1, &unk_1E96C47FA);
  *(_DWORD *)(a2 + 8) = objc_msgSend_intValue(v14, v15, v16, v17, v18);

  uint64_t v19 = objc_getAssociatedObject(a1, &unk_1E96C47FB);
  *(_DWORD *)(a2 + 12) = objc_msgSend_unsignedIntValue(v19, v20, v21, v22, v23);

  objc_getAssociatedObject(a1, &unk_1E96C47FC);
  id v28 = (id)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)(a2 + 16) = objc_msgSend_unsignedIntValue(v28, v24, v25, v26, v27);
}

uint64_t TTSIsBaseSystem()
{
  return 0;
}

uint64_t TTSVoiceTypeForResourceType(uint64_t a1, uint64_t a2)
{
  uint64_t result = 6;
  switch(a1)
  {
    case 0:
    case 1:
    case 2:
    case 5:
    case 7:
    case 8:
    case 9:
      uint64_t result = 1;
      break;
    case 3:
      uint64_t v4 = 5;
      if (a2 == 7) {
        uint64_t v4 = 7;
      }
      if (a2 == 4) {
        uint64_t result = 4;
      }
      else {
        uint64_t result = v4;
      }
      break;
    case 6:
      uint64_t result = 3;
      break;
    case 10:
      uint64_t result = 2;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t _BuiltInVoiceNameForLanguage(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend_objectForKey_(&unk_1EFB957F8, a2, a1, a4, a5);
}

void *sub_1A66DB490(void *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6)
{
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id v13 = a6;
  v38.receiver = a1;
  v38.super_class = (Class)&off_1EFBA6FC8;
  id v14 = objc_msgSendSuper2(&v38, sel_init);
  uint64_t v18 = v14;
  if (v14)
  {
    objc_msgSend_setName_(v14, v15, (uint64_t)v10, v16, v17);
    objc_msgSend_setIdentifier_(v18, v19, (uint64_t)v11, v20, v21);
    objc_msgSend_setSupportedLanguages_(v18, v22, (uint64_t)v13, v23, v24);
    objc_msgSend_setPrimaryLanguages_(v18, v25, (uint64_t)v12, v26, v27);
    objc_msgSend_setAge_(v18, v28, 0, v29, v30);
    objc_msgSend_setGender_(v18, v31, 0, v32, v33);
    objc_msgSend_setVoiceSize_(v18, v34, 0, v35, v36);
  }

  return v18;
}

void sub_1A66DB670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A66DB8CC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v98 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = objc_msgSend__resources(*(void **)(a1 + 32), a2, a3, a4, a5);
  id v11 = objc_msgSend_allValues(v6, v7, v8, v9, v10);
  uint64_t v15 = objc_msgSend_valueForKeyPath_(v11, v12, @"@unionOfArrays.self", v13, v14);

  uint64_t v20 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v16, v17, v18, v19);
  v94[0] = MEMORY[0x1E4F143A8];
  v94[1] = 3221225472;
  v94[2] = sub_1A66D6388;
  v94[3] = &unk_1E5C6A278;
  id v21 = v20;
  id v95 = v21;
  uint64_t v25 = objc_msgSend_ax_filteredArrayUsingBlock_(v15, v22, (uint64_t)v94, v23, v24);

  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v30 = objc_msgSend_ax_filteredArrayUsingBlock_(v25, v26, (uint64_t)&unk_1EFB76D00, v28, v29);

    uint64_t v25 = (void *)v30;
  }
  uint64_t v31 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v26, v27, v28, v29);
  long long v90 = 0u;
  long long v91 = 0u;
  long long v92 = 0u;
  long long v93 = 0u;
  id v32 = v25;
  uint64_t v34 = objc_msgSend_countByEnumeratingWithState_objects_count_(v32, v33, (uint64_t)&v90, (uint64_t)v97, 16);
  if (v34)
  {
    uint64_t v39 = v34;
    uint64_t v40 = *(void *)v91;
    do
    {
      for (uint64_t i = 0; i != v39; ++i)
      {
        if (*(void *)v91 != v40) {
          objc_enumerationMutation(v32);
        }
        uint64_t v42 = *(void **)(*((void *)&v90 + 1) + 8 * i);
        uint64_t v43 = objc_msgSend_speechVoice(v42, v35, v36, v37, v38);
        uint64_t v48 = objc_msgSend_copy(v43, v44, v45, v46, v47);
        uint64_t v53 = objc_msgSend_voiceId(v42, v49, v50, v51, v52);
        objc_msgSend_setObject_forKey_(v31, v54, (uint64_t)v48, (uint64_t)v53, v55);
      }
      uint64_t v39 = objc_msgSend_countByEnumeratingWithState_objects_count_(v32, v35, (uint64_t)&v90, (uint64_t)v97, 16);
    }
    while (v39);
  }

  long long v88 = 0u;
  long long v89 = 0u;
  long long v86 = 0u;
  long long v87 = 0u;
  id v56 = v21;
  uint64_t v58 = objc_msgSend_countByEnumeratingWithState_objects_count_(v56, v57, (uint64_t)&v86, (uint64_t)v96, 16);
  if (v58)
  {
    uint64_t v63 = v58;
    uint64_t v64 = *(void *)v87;
    do
    {
      for (uint64_t j = 0; j != v63; ++j)
      {
        if (*(void *)v87 != v64) {
          objc_enumerationMutation(v56);
        }
        uint64_t v66 = *(void **)(*((void *)&v86 + 1) + 8 * j);
        uint64_t v67 = objc_msgSend_identifier(v66, v59, v60, v61, v62, (void)v86);
        uint64_t v71 = objc_msgSend_objectForKey_(v31, v68, (uint64_t)v67, v69, v70);

        if (!v71)
        {
          uint64_t v72 = objc_msgSend_identifier(v66, v59, v60, v61, v62);
          objc_msgSend_setObject_forKey_(v31, v73, (uint64_t)v66, (uint64_t)v72, v74);
        }
      }
      uint64_t v63 = objc_msgSend_countByEnumeratingWithState_objects_count_(v56, v59, (uint64_t)&v86, (uint64_t)v96, 16);
    }
    while (v63);
  }

  id v75 = objc_alloc(MEMORY[0x1E4F1C978]);
  id v80 = objc_msgSend_allValues(v31, v76, v77, v78, v79);
  uint64_t v83 = objc_msgSend_initWithArray_copyItems_(v75, v81, (uint64_t)v80, 1, v82);
  uint64_t v84 = *(void *)(*(void *)(a1 + 40) + 8);
  v85 = *(void **)(v84 + 40);
  *(void *)(v84 + 40) = v83;
}

CFPropertyListRef TTSPreferencesCopyValueForKey(const __CFString *a1)
{
  return CFPreferencesCopyAppValue(a1, @"com.apple.SpeakSelection");
}

uint64_t sub_1A66DC3E0()
{
  uint64_t result = MGGetBoolAnswer();
  byte_1EB67AB78 = result;
  return result;
}

uint64_t sub_1A66DC408()
{
  qword_1EB67AB90 = objc_alloc_init(TTSAXResourceMigrationUtilities);

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1A66DC444()
{
  qword_1EB67AB98 = objc_alloc_init(TTSLocaleUtilities);

  return MEMORY[0x1F41817F8]();
}

uint64_t TTSIsInternalBuild()
{
  if (qword_1EB67AB68 != -1) {
    dispatch_once(&qword_1EB67AB68, &unk_1EFB80F08);
  }
  return byte_1EB67AB78;
}

uint64_t sub_1A66DC6EC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend_currentLanguageCode(TTSSpeechManager, a2, a3, a4, a5);
}

void sub_1A66DC890(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A66DCBB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  _Block_object_dispose((const void *)(v22 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1A66DCC04()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  id v1 = (void *)qword_1E96C46D0;
  qword_1E96C46D0 = (uint64_t)v0;

  dword_1E96C46E0 = 0;
}

uint64_t sub_1A66DCC3C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1A66DCC4C(uint64_t a1)
{
}

uint64_t sub_1A66DCC54(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = objc_msgSend_objectForKey_((void *)qword_1E96C46D0, a2, *(void *)(a1 + 32), a4, a5);

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1A66DCCA8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend_setObject_forKey_((void *)qword_1E96C46D0, a2, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), *(void *)(a1 + 32), a5);
}

void sub_1A66DCF0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1A66DD210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1A66DD340(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  qword_1E96C46E8 = objc_msgSend__initializeRules(*(void **)(a1 + 32), a2, a3, a4, a5);

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1A66DD388()
{
  return 1;
}

void sub_1A66DD488(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1A66DD498(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  uint64_t v6 = *(void **)(a1 + 32);
  uint64_t v10 = objc_msgSend_objectAtIndexedSubscript_(v5, v7, 0, v8, v9);
  uint64_t v14 = objc_msgSend_objectAtIndexedSubscript_(v5, v11, 0, v12, v13);
  uint64_t v19 = objc_msgSend_length(v14, v15, v16, v17, v18);
  id v21 = objc_msgSend_firstMatchInString_options_range_(v6, v20, (uint64_t)v10, 0, 0, v19);

  if (v21) {
    BOOL v26 = objc_msgSend_range(v21, v22, v23, v24, v25) != 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    BOOL v26 = 0;
  }

  return v26;
}

void sub_1A66DD550(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A66DD6A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1A66DD6C0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  uint64_t v6 = *(void **)(a1 + 32);
  uint64_t v10 = objc_msgSend_objectAtIndexedSubscript_(v5, v7, 0, v8, v9);
  uint64_t v14 = objc_msgSend_objectAtIndexedSubscript_(v5, v11, 0, v12, v13);
  uint64_t v19 = objc_msgSend_length(v14, v15, v16, v17, v18);
  id v21 = objc_msgSend_firstMatchInString_options_range_(v6, v20, (uint64_t)v10, 0, 0, v19);

  uint64_t v22 = *(void **)(a1 + 40);
  BOOL v26 = objc_msgSend_objectAtIndexedSubscript_(v5, v23, 1, v24, v25);
  uint64_t v30 = objc_msgSend_objectAtIndexedSubscript_(v5, v27, 1, v28, v29);
  uint64_t v35 = objc_msgSend_length(v30, v31, v32, v33, v34);
  uint64_t v37 = objc_msgSend_firstMatchInString_options_range_(v22, v36, (uint64_t)v26, 0, 0, v35);

  if (v21)
  {
    BOOL v46 = 0;
    if (objc_msgSend_range(v21, v38, v39, v40, v41) != 0x7FFFFFFFFFFFFFFFLL && v37) {
      BOOL v46 = objc_msgSend_range(v37, v42, v43, v44, v45) != 0x7FFFFFFFFFFFFFFFLL;
    }
  }
  else
  {
    BOOL v46 = 0;
  }

  return v46;
}

void sub_1A66DD7F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A66DD970(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1A66DD98C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  uint64_t v6 = *(void **)(a1 + 32);
  uint64_t v10 = objc_msgSend_objectAtIndexedSubscript_(v5, v7, 1, v8, v9);
  uint64_t v14 = objc_msgSend_objectAtIndexedSubscript_(v5, v11, 1, v12, v13);
  uint64_t v19 = objc_msgSend_length(v14, v15, v16, v17, v18);
  id v21 = objc_msgSend_firstMatchInString_options_range_(v6, v20, (uint64_t)v10, 0, 0, v19);

  uint64_t v22 = *(void **)(a1 + 40);
  BOOL v26 = objc_msgSend_objectAtIndexedSubscript_(v5, v23, 2, v24, v25);
  uint64_t v30 = objc_msgSend_objectAtIndexedSubscript_(v5, v27, 2, v28, v29);
  uint64_t v35 = objc_msgSend_length(v30, v31, v32, v33, v34);
  uint64_t v37 = objc_msgSend_firstMatchInString_options_range_(v22, v36, (uint64_t)v26, 0, 0, v35);

  if (v21)
  {
    BOOL v46 = 0;
    if (objc_msgSend_range(v21, v38, v39, v40, v41) != 0x7FFFFFFFFFFFFFFFLL && v37) {
      BOOL v46 = objc_msgSend_range(v37, v42, v43, v44, v45) != 0x7FFFFFFFFFFFFFFFLL;
    }
  }
  else
  {
    BOOL v46 = 0;
  }

  return v46;
}

void sub_1A66DDABC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A66DDC14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1A66DDC24(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  uint64_t v6 = *(void **)(a1 + 32);
  uint64_t v10 = objc_msgSend_objectAtIndexedSubscript_(v5, v7, 3, v8, v9);
  uint64_t v14 = objc_msgSend_objectAtIndexedSubscript_(v5, v11, 3, v12, v13);
  uint64_t v19 = objc_msgSend_length(v14, v15, v16, v17, v18);
  id v21 = objc_msgSend_firstMatchInString_options_range_(v6, v20, (uint64_t)v10, 0, 0, v19);

  if (v21) {
    BOOL v26 = objc_msgSend_range(v21, v22, v23, v24, v25) != 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    BOOL v26 = 0;
  }

  return v26;
}

void sub_1A66DDCDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A66DDE08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1A66DDE18(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v8 = objc_msgSend_objectAtIndexedSubscript_(v3, v5, 0, v6, v7);
  uint64_t v12 = objc_msgSend_objectAtIndexedSubscript_(v3, v9, 0, v10, v11);
  uint64_t v17 = objc_msgSend_length(v12, v13, v14, v15, v16);
  uint64_t v19 = objc_msgSend_firstMatchInString_options_range_(v4, v18, (uint64_t)v8, 0, 0, v17);

  if (v19) {
    BOOL v24 = objc_msgSend_range(v19, v20, v21, v22, v23) != 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    BOOL v24 = 0;
  }

  return v24;
}

void sub_1A66DDED0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A66DE024(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1A66DE040(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v8 = objc_msgSend_objectAtIndexedSubscript_(v3, v5, 0, v6, v7);
  uint64_t v12 = objc_msgSend_objectAtIndexedSubscript_(v3, v9, 0, v10, v11);
  uint64_t v17 = objc_msgSend_length(v12, v13, v14, v15, v16);
  uint64_t v19 = objc_msgSend_firstMatchInString_options_range_(v4, v18, (uint64_t)v8, 0, 0, v17);

  uint64_t v20 = *(void **)(a1 + 40);
  BOOL v24 = objc_msgSend_objectAtIndexedSubscript_(v3, v21, 1, v22, v23);
  uint64_t v28 = objc_msgSend_objectAtIndexedSubscript_(v3, v25, 1, v26, v27);
  uint64_t v33 = objc_msgSend_length(v28, v29, v30, v31, v32);
  uint64_t v35 = objc_msgSend_firstMatchInString_options_range_(v20, v34, (uint64_t)v24, 0, 0, v33);

  if (v19)
  {
    BOOL v44 = 0;
    if (objc_msgSend_range(v19, v36, v37, v38, v39) != 0x7FFFFFFFFFFFFFFFLL && v35) {
      BOOL v44 = objc_msgSend_range(v35, v40, v41, v42, v43) != 0x7FFFFFFFFFFFFFFFLL;
    }
  }
  else
  {
    BOOL v44 = 0;
  }

  return v44;
}

void sub_1A66DE170(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A66DFD94(_Unwind_Exception *a1)
{
  STACK[0x438] = v1;

  _Unwind_Resume(a1);
}

id sub_1A66E0688(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v5 = objc_msgSend_ruleWithHeterogeniousArray_(TTSApplebetMapperRule, a2, (uint64_t)a2, a4, a5);

  return v5;
}

void sub_1A66E0C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1A66E1218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void *ausdk::ComponentBase::InitializationMutex(ausdk::ComponentBase *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E96C4738, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E96C4738))
  {
    MEMORY[0x1AD0C0BE0](&unk_1E96C46F8);
    __cxa_guard_release(&qword_1E96C4738);
  }
  return &unk_1E96C46F8;
}

void sub_1A66E1388(_Unwind_Exception *a1)
{
}

ausdk::ComponentBase *ausdk::ComponentBase::ComponentBase(ausdk::ComponentBase *this, OpaqueAudioComponentInstance *a2)
{
  *(void *)this = &unk_1EFB7D7C8;
  *((void *)this + 1) = a2;
  ausdk::ComponentBase::GetComponentDescription((AudioComponentInstance *)this, (uint64_t)v4);
  return this;
}

{
  unsigned char v4[20];

  *(void *)this = &unk_1EFB7D7C8;
  *((void *)this + 1) = a2;
  ausdk::ComponentBase::GetComponentDescription((AudioComponentInstance *)this, (uint64_t)v4);
  return this;
}

double ausdk::ComponentBase::GetComponentDescription@<D0>(AudioComponentInstance *this@<X0>, uint64_t a2@<X8>)
{
  memset(&outDesc, 0, sizeof(outDesc));
  Component = AudioComponentInstanceGetComponent(this[1]);
  if (Component && !AudioComponentGetDescription(Component, &outDesc))
  {
    double result = *(double *)&outDesc.componentType;
    *(AudioComponentDescription *)a2 = outDesc;
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 0;
  }
  return result;
}

uint64_t ausdk::ComponentBase::DoPostConstructor(ausdk::ComponentBase *this)
{
  (*(void (**)(ausdk::ComponentBase *))(*(void *)this + 32))(this);
  id v2 = *(uint64_t (**)(ausdk::ComponentBase *))(*(void *)this + 16);

  return v2(this);
}

uint64_t ausdk::ComponentBase::DoPreDestructor(ausdk::ComponentBase *this)
{
  (*(void (**)(ausdk::ComponentBase *))(*(void *)this + 24))(this);
  id v2 = *(uint64_t (**)(ausdk::ComponentBase *))(*(void *)this + 40);

  return v2(this);
}

uint64_t ausdk::ComponentBase::AP_Open(ausdk::ComponentBase *this, void *a2, OpaqueAudioComponentInstance *a3)
{
  ausdk::ComponentBase::InitializationMutex(this);
  std::recursive_mutex::lock(&stru_1E96C46F8);
  uint64_t v5 = (*((uint64_t (**)(char *, void *))this + 4))((char *)this + 64, a2);
  (*(void (**)(uint64_t))(*(void *)v5 + 32))(v5);
  (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
  std::recursive_mutex::unlock(&stru_1E96C46F8);
  return 0;
}

void sub_1A66E1640(void *a1, int a2)
{
  switch(a2)
  {
    case 5:
      uint64_t v4 = __cxa_begin_catch(a1);
      goto LABEL_3;
    case 4:
      __cxa_begin_catch(a1);
      __cxa_end_catch();
      int v5 = -108;
      break;
    case 3:
      int v5 = *(_DWORD *)__cxa_begin_catch(a1);
      goto LABEL_4;
    default:
      uint64_t v4 = __cxa_begin_catch(a1);
      if (a2 == 2)
      {
LABEL_3:
        int v5 = v4[4];
LABEL_4:
        __cxa_end_catch();
        break;
      }
      __cxa_end_catch();
      int v5 = -1;
      break;
  }
  if (v2)
  {
    if (v5) {
      MEMORY[0x1AD0C0C70](v2, 0x1080C4018D86D6ALL);
    }
  }
  JUMPOUT(0x1A66E1630);
}

uint64_t ausdk::ComponentBase::AP_Close(ausdk::ComponentBase *this, void *a2)
{
  id v3 = (char *)this + 64;
  (*(void (**)(char *, void *))(*((void *)this + 8) + 24))((char *)this + 64, a2);
  (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  (*((void (**)(char *))this + 5))(v3);
  free(this);
  return 0;
}

void sub_1A66E17D8()
{
}

void *sub_1A66E17FC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v22.receiver = a1;
  v22.super_class = (Class)&off_1EFBA58E0;
  id v10 = objc_msgSendSuper2(&v22, sel_init);
  uint64_t v14 = v10;
  if (v10)
  {
    objc_msgSend_setMark_(v10, v11, a3, v12, v13);
    objc_msgSend_setTextRange_(v14, v15, a4, a5, v16);
    objc_msgSend_setByteSampleOffset_(v14, v17, a6, v18, v19);
    id v20 = v14;
  }

  return v14;
}

void *sub_1A66E1898(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v20.receiver = a1;
  v20.super_class = (Class)&off_1EFBA58E0;
  id v8 = objc_msgSendSuper2(&v20, sel_init);
  uint64_t v11 = v8;
  if (v8)
  {
    objc_msgSend_setTextRange_(v8, v9, a3, a4, v10);
    objc_msgSend_setMark_(v11, v12, 1, v13, v14);
    objc_msgSend_setByteSampleOffset_(v11, v15, a5, v16, v17);
    id v18 = v11;
  }

  return v11;
}

void *sub_1A66E1928(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v20.receiver = a1;
  v20.super_class = (Class)&off_1EFBA58E0;
  id v8 = objc_msgSendSuper2(&v20, sel_init);
  uint64_t v11 = v8;
  if (v8)
  {
    objc_msgSend_setTextRange_(v8, v9, a3, a4, v10);
    objc_msgSend_setMark_(v11, v12, 2, v13, v14);
    objc_msgSend_setByteSampleOffset_(v11, v15, a5, v16, v17);
    id v18 = v11;
  }

  return v11;
}

void *sub_1A66E19B8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v20.receiver = a1;
  v20.super_class = (Class)&off_1EFBA58E0;
  id v8 = objc_msgSendSuper2(&v20, sel_init);
  uint64_t v11 = v8;
  if (v8)
  {
    objc_msgSend_setTextRange_(v8, v9, a3, a4, v10);
    objc_msgSend_setMark_(v11, v12, 3, v13, v14);
    objc_msgSend_setByteSampleOffset_(v11, v15, a5, v16, v17);
    id v18 = v11;
  }

  return v11;
}

void *sub_1A66E1A48(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  v20.receiver = a1;
  v20.super_class = (Class)&off_1EFBA58E0;
  id v7 = objc_msgSendSuper2(&v20, sel_init);
  uint64_t v11 = v7;
  if (v7)
  {
    objc_msgSend_setMark_(v7, v8, 0, v9, v10);
    objc_msgSend_setPhoneme_(v11, v12, (uint64_t)v6, v13, v14);
    objc_msgSend_setByteSampleOffset_(v11, v15, a4, v16, v17);
    id v18 = v11;
  }

  return v11;
}

void *sub_1A66E1ADC(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  v20.receiver = a1;
  v20.super_class = (Class)&off_1EFBA58E0;
  id v7 = objc_msgSendSuper2(&v20, sel_init);
  uint64_t v11 = v7;
  if (v7)
  {
    objc_msgSend_setMark_(v7, v8, 4, v9, v10);
    objc_msgSend_setBookmarkName_(v11, v12, (uint64_t)v6, v13, v14);
    objc_msgSend_setByteSampleOffset_(v11, v15, a4, v16, v17);
    id v18 = v11;
  }

  return v11;
}

void sub_1A66E1B70(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v9 = objc_msgSend_bookmarkName(a1, v5, v6, v7, v8);
  objc_msgSend_encodeObject_forKey_(v4, v10, (uint64_t)v9, @"bookmarkName", v11);

  uint64_t v16 = objc_msgSend_phoneme(a1, v12, v13, v14, v15);
  objc_msgSend_encodeObject_forKey_(v4, v17, (uint64_t)v16, @"phoneme", v18);

  uint64_t v19 = NSNumber;
  uint64_t v24 = objc_msgSend_mark(a1, v20, v21, v22, v23);
  uint64_t v28 = objc_msgSend_numberWithInteger_(v19, v25, v24, v26, v27);
  objc_msgSend_encodeObject_forKey_(v4, v29, (uint64_t)v28, @"mark", v30);

  uint64_t v31 = NSNumber;
  uint64_t v36 = objc_msgSend_byteSampleOffset(a1, v32, v33, v34, v35);
  uint64_t v40 = objc_msgSend_numberWithUnsignedInteger_(v31, v37, v36, v38, v39);
  objc_msgSend_encodeObject_forKey_(v4, v41, (uint64_t)v40, @"byteSampleOffset", v42);

  uint64_t v43 = NSNumber;
  uint64_t v48 = objc_msgSend_textRange(a1, v44, v45, v46, v47);
  uint64_t v52 = objc_msgSend_numberWithUnsignedInteger_(v43, v49, v48, v50, v51);
  objc_msgSend_encodeObject_forKey_(v4, v53, (uint64_t)v52, @"textRange_location", v54);

  uint64_t v55 = NSNumber;
  objc_msgSend_textRange(a1, v56, v57, v58, v59);
  objc_msgSend_numberWithUnsignedInteger_(v55, v60, (uint64_t)v60, v61, v62);
  id v65 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_encodeObject_forKey_(v4, v63, (uint64_t)v65, @"textRange_length", v64);
}

id sub_1A66E1CF0(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  v66.receiver = a1;
  v66.super_class = (Class)&off_1EFBA58E0;
  id v5 = objc_msgSendSuper2(&v66, sel_init);
  if (v5)
  {
    uint64_t v6 = objc_opt_class();
    uint64_t v9 = objc_msgSend_decodeObjectOfClass_forKey_(v4, v7, v6, @"bookmarkName", v8);
    objc_msgSend_setBookmarkName_(v5, v10, (uint64_t)v9, v11, v12);

    uint64_t v13 = objc_opt_class();
    uint64_t v16 = objc_msgSend_decodeObjectOfClass_forKey_(v4, v14, v13, @"phoneme", v15);
    objc_msgSend_setPhoneme_(v5, v17, (uint64_t)v16, v18, v19);

    uint64_t v20 = objc_opt_class();
    uint64_t v23 = objc_msgSend_decodeObjectOfClass_forKey_(v4, v21, v20, @"mark", v22);
    uint64_t v28 = objc_msgSend_longValue(v23, v24, v25, v26, v27);
    objc_msgSend_setMark_(v5, v29, v28, v30, v31);

    uint64_t v32 = objc_opt_class();
    uint64_t v35 = objc_msgSend_decodeObjectOfClass_forKey_(v4, v33, v32, @"byteSampleOffset", v34);
    unsigned int v40 = objc_msgSend_unsignedIntValue(v35, v36, v37, v38, v39);
    objc_msgSend_setByteSampleOffset_(v5, v41, v40, v42, v43);

    uint64_t v44 = objc_opt_class();
    uint64_t v47 = objc_msgSend_decodeObjectOfClass_forKey_(v4, v45, v44, @"textRange_location", v46);
    uint64_t v52 = objc_msgSend_unsignedIntValue(v47, v48, v49, v50, v51);

    uint64_t v53 = objc_opt_class();
    id v56 = objc_msgSend_decodeObjectOfClass_forKey_(v4, v54, v53, @"textRange_length", v55);
    uint64_t v61 = objc_msgSend_unsignedIntValue(v56, v57, v58, v59, v60);

    objc_msgSend_setTextRange_(v5, v62, v52, v61, v63);
    id v64 = v5;
  }

  return v5;
}

CFErrorRef TTSErrorCreate(const __CFAllocator *a1, const __CFString *a2, CFIndex a3, void *a4)
{
  userInfoKeys[1] = *(void **)MEMORY[0x1E4F143B8];
  id v4 = (void *)*MEMORY[0x1E4F1D140];
  userInfoValues = a4;
  userInfoKeys[0] = v4;
  return CFErrorCreateWithUserInfoKeysAndValues(a1, a2, a3, (const void *const *)userInfoKeys, (const void *const *)&userInfoValues, a4 != 0);
}

void sub_1A66E29A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
}

float DFT_split_180_execute(vDSP_DFT_SetupStruct *__Setup, float32x2_t *a2, float32x2_t *a3, float *a4, float *a5, vDSP_DFT_Direction a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,int a44,uint64_t a45,uint64_t a46)
{
  unint64_t v47 = 0;
  if (a6 == vDSP_DFT_INVERSE) {
    uint64_t v48 = a4;
  }
  else {
    uint64_t v48 = a5;
  }
  if (a6 == vDSP_DFT_INVERSE) {
    uint64_t v49 = a5;
  }
  else {
    uint64_t v49 = a4;
  }
  if (a6 == vDSP_DFT_INVERSE) {
    uint64_t v50 = a2;
  }
  else {
    uint64_t v50 = a3;
  }
  if (a6 == vDSP_DFT_INVERSE) {
    uint64_t v51 = (const float *)a3;
  }
  else {
    uint64_t v51 = (const float *)a2;
  }
  unint64_t v52 = -8;
  do
  {
    float32x4_t v54 = *(float32x4_t *)&v51[v47 / 4];
    float32x4_t v53 = *(float32x4_t *)&v51[v47 / 4 + 4];
    float32x4_t v56 = *(float32x4_t *)v50[v47 / 8].f32;
    float32x4_t v55 = *(float32x4_t *)v50[v47 / 8 + 2].f32;
    float32x4_t v58 = *(float32x4_t *)&v51[v47 / 4 + 90];
    float32x4_t v57 = *(float32x4_t *)&v51[v47 / 4 + 94];
    float32x4_t v60 = *(float32x4_t *)v50[v47 / 8 + 45].f32;
    float32x4_t v59 = *(float32x4_t *)v50[v47 / 8 + 47].f32;
    float32x4_t v62 = *(float32x4_t *)((char *)&unk_1A689CCE0 + v47);
    float32x4_t v61 = *(float32x4_t *)((char *)&unk_1A689CCE0 + v47 + 16);
    float32x4_t v63 = *(float32x4_t *)((char *)&unk_1A689CE60 + v47);
    float32x4_t v64 = *(float32x4_t *)((char *)&unk_1A689CE60 + v47 + 16);
    id v65 = (float32x4_t *)((char *)&STACK[0x890] + v47);
    *id v65 = vaddq_f32(v54, v58);
    v65[1] = vaddq_f32(v53, v57);
    objc_super v66 = (float32x4_t *)((char *)&v98 + v47);
    float32x4_t *v66 = vaddq_f32(v56, v60);
    v66[1] = vaddq_f32(v55, v59);
    float32x4_t v67 = vsubq_f32(v53, v57);
    float32x4_t v68 = vsubq_f32(v54, v58);
    float32x4_t v69 = vsubq_f32(v56, v60);
    float32x4_t v70 = vsubq_f32(v55, v59);
    uint64_t v71 = (float32x4_t *)((char *)&STACK[0x890] + v47 + 360);
    *uint64_t v71 = vmlaq_f32(vmulq_f32(v69, v63), v62, v68);
    v71[1] = vmlaq_f32(vmulq_f32(v70, v64), v61, v67);
    uint64_t v72 = (float32x4_t *)((char *)&a44 + v47);
    float32x4_t *v72 = vmlaq_f32(vmulq_f32(v63, vnegq_f32(v68)), v62, v69);
    v72[1] = vmlaq_f32(vmulq_f32(v64, vnegq_f32(v67)), v61, v70);
    v52 += 8;
    v47 += 32;
  }
  while (v52 < 0x4B);
  float32x2_t v73 = *(float32x2_t *)(v51 + 88);
  float32x2_t v74 = *(float32x2_t *)(v51 + 178);
  float32x2_t v75 = vsub_f32(v73, v74);
  float32x2_t v76 = vsub_f32(v50[44], v50[89]);
  STACK[0x9F0] = (unint64_t)vadd_f32(v73, v74);
  STACK[0xB58] = (unint64_t)vmla_f32(vmul_f32(v76, (float32x2_t)0x3D0EF2AD3D8EDC7BLL), (float32x2_t)0xBF7FD814BF7F605CLL, v75);
  STACK[0x878] = (unint64_t)vmla_f32(vmul_f32(v75, (float32x2_t)0xBD0EF2ADBD8EDC7BLL), (float32x2_t)0xBF7FD814BF7F605CLL, v76);
  vDSP_DFT_Execute(__Setup, (const float *)&STACK[0x890], (const float *)&v98, (float *)&STACK[0x890], (float *)&v98);
  vDSP_DFT_Execute(__Setup, (const float *)&STACK[0x9F8], (const float *)&a44, (float *)&STACK[0x9F8], (float *)&a44);
  uint64_t v77 = 0;
  unint64_t v78 = -8;
  uint64_t v79 = (int32x4_t *)v48;
  id v80 = v49;
  do
  {
    int32x4_t v82 = *(int32x4_t *)((char *)&STACK[0x890] + v77);
    int32x4_t v81 = *(int32x4_t *)((char *)&STACK[0x890] + v77 + 16);
    int32x4_t v84 = *(int32x4_t *)((char *)&v98 + v77);
    int32x4_t v83 = *(int32x4_t *)((char *)&v98 + v77 + 16);
    v85 = (int32x4_t *)((char *)&STACK[0x890] + v77 + 360);
    int32x4_t v86 = *(int32x4_t *)((char *)&STACK[0x890] + v77 + 376);
    int32x4_t v87 = vzip1q_s32(v82, *v85);
    int32x4_t v88 = vzip2q_s32(v82, *v85);
    int32x4_t v89 = vzip1q_s32(v81, v86);
    int32x4_t v90 = vzip2q_s32(v81, v86);
    int32x4_t v91 = *(int32x4_t *)((char *)&a46 + v77);
    int32x4_t v92 = vzip2q_s32(v84, *(int32x4_t *)((char *)&a44 + v77));
    int32x4_t v93 = vzip1q_s32(v84, *(int32x4_t *)((char *)&a44 + v77));
    v80[2] = v89;
    v80[3] = v90;
    *id v80 = v87;
    v80[1] = v88;
    v80 += 4;
    v79[2] = vzip1q_s32(v83, v91);
    v79[3] = vzip2q_s32(v83, v91);
    v78 += 8;
    *uint64_t v79 = v93;
    v79[1] = v92;
    v79 += 4;
    v77 += 32;
  }
  while (v78 < 0x4B);
  uint64_t v94 = 0;
  id v95 = v49 + 177;
  uint64_t v96 = v48 + 177;
  do
  {
    *(v95 - 1) = *(_DWORD *)((char *)&STACK[0x890] + v94 + 352);
    *(v96 - 1) = *(float *)((char *)&v98 + v94 + 352);
    *id v95 = *(_DWORD *)((char *)&STACK[0x890] + v94 + 712);
    v95 += 2;
    float result = *(float *)((char *)&STACK[0x878] + v94);
    *uint64_t v96 = result;
    v96 += 2;
    v94 += 4;
  }
  while (v94 != 8);
  return result;
}

void ResamplerInitLocker::ResamplerInitLocker(ResamplerInitLocker *this)
{
}

{
  pthread_mutex_lock(&stru_1E96C1748);
}

void ResamplerInitLocker::~ResamplerInitLocker(ResamplerInitLocker *this)
{
}

{
  pthread_mutex_unlock(&stru_1E96C1748);
}

void sub_1A66E2F18(void *a1)
{
}

ausdk::AUBase *ausdk::MusicDeviceBase::MusicDeviceBase(ausdk::MusicDeviceBase *this, OpaqueAudioComponentInstance *a2, int a3, int a4, int a5)
{
  float result = ausdk::AUBase::AUBase(this, a2, a3, a4, a5);
  *((void *)result + 67) = result;
  *(void *)float result = &unk_1EFB7D938;
  *((void *)result + 66) = &unk_1EFB7DBA0;
  return result;
}

uint64_t ausdk::MusicDeviceBase::GetPropertyInfo(ausdk::MusicDeviceBase *this, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a2 == 1000)
  {
    if (a3)
    {
      return 4294956430;
    }
    else
    {
      uint64_t result = 0;
      *a5 = 4;
      *a6 = 0;
    }
  }
  else
  {
    uint64_t result = ausdk::AUBase::GetPropertyInfo(this, a2, a3, a4, a5, a6);
    if (result == -10879)
    {
      return ausdk::AUMIDIBase::DelegateGetPropertyInfo((ausdk::MusicDeviceBase *)((char *)this + 528), a2, a3, a4, a5, a6);
    }
  }
  return result;
}

uint64_t ausdk::MusicDeviceBase::GetProperty(ausdk::MusicDeviceBase *this, unsigned int a2, unsigned int a3, unsigned int a4, _DWORD *a5)
{
  if (a2 == 1000)
  {
    if (a3)
    {
      return 4294956430;
    }
    else
    {
      int v11 = 0;
      uint64_t result = (*(uint64_t (**)(ausdk::MusicDeviceBase *, int *))(*(void *)this + 592))(this, &v11);
      *a5 = v11;
    }
  }
  else
  {
    uint64_t result = ausdk::AUBase::GetProperty(this, a2, a3, a4, a5);
    if (result == -10879)
    {
      return ausdk::AUMIDIBase::DelegateGetProperty((ausdk::MusicDeviceBase *)((char *)this + 528), a2, a3, a4, a5);
    }
  }
  return result;
}

uint64_t ausdk::MusicDeviceBase::SetProperty(ausdk::MusicDeviceBase *this, unsigned int a2, unsigned int a3, unsigned int a4, const void *a5)
{
  uint64_t result = ausdk::AUBase::SetProperty(this, a2, a3, a4, a5);
  if (result == -10879)
  {
    return ausdk::AUMIDIBase::DelegateSetProperty((ausdk::MusicDeviceBase *)((char *)this + 528), a2, a3, a4, a5);
  }
  return result;
}

uint64_t ausdk::MusicDeviceBase::GetInstrumentCount(ausdk::MusicDeviceBase *this, unsigned int *a2)
{
  *a2 = 0;
  return 0;
}

uint64_t ausdk::MusicDeviceBase::HandleNoteOn(ausdk::MusicDeviceBase *this, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5)
{
  v6[0] = 2;
  *(float *)&v6[1] = (float)a3;
  *(float *)&v6[2] = (float)a4;
  uint64_t v7 = 0;
  return (*(uint64_t (**)(ausdk::MusicDeviceBase *, uint64_t, uint64_t, void, uint64_t, _DWORD *))(*(void *)this + 480))(this, 0xFFFFFFFFLL, a2, 0, a5, v6);
}

uint64_t non-virtual thunk to'ausdk::MusicDeviceBase::HandleNoteOn(ausdk::MusicDeviceBase *this, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5)
{
  v6[0] = 2;
  *(float *)&v6[1] = (float)a3;
  *(float *)&v6[2] = (float)a4;
  uint64_t v7 = 0;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, void, uint64_t, _DWORD *))(*((void *)this - 66) + 480))((char *)this - 528, 0xFFFFFFFFLL, a2, 0, a5, v6);
}

uint64_t ausdk::MusicDeviceBase::HandleNoteOff(ausdk::MusicDeviceBase *this, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5)
{
  return (*(uint64_t (**)(ausdk::MusicDeviceBase *, uint64_t, uint64_t, uint64_t))(*(void *)this + 488))(this, a2, a3, a5);
}

uint64_t non-virtual thunk to'ausdk::MusicDeviceBase::HandleNoteOff(ausdk::MusicDeviceBase *this, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5)
{
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*((void *)this - 66) + 488))((char *)this - 528, a2, a3, a5);
}

uint64_t sub_1A66E3360()
{
  return 4294967292;
}

uint64_t sub_1A66E3368()
{
  return 4294967292;
}

uint64_t sub_1A66E3370()
{
  return 4294967292;
}

uint64_t sub_1A66E3378(uint64_t a1, uint64_t a2, double *a3)
{
  if (*a3 == *(double *)(a1 + 272)) {
    return 0;
  }
  long long v3 = *(_OWORD *)a3;
  long long v4 = *((_OWORD *)a3 + 1);
  long long v5 = *((_OWORD *)a3 + 3);
  *(_OWORD *)(a1 + 304) = *((_OWORD *)a3 + 2);
  *(_OWORD *)(a1 + 320) = v5;
  *(_OWORD *)(a1 + 272) = v3;
  *(_OWORD *)(a1 + 288) = v4;
  return (*(uint64_t (**)(void))(*(void *)a1 + 208))();
}

uint64_t sub_1A66E33CC()
{
  return 0;
}

uint64_t sub_1A66E33D4()
{
  return 0;
}

double sub_1A66E33E0()
{
  return 0.0;
}

double sub_1A66E33E8()
{
  return 0.0;
}

uint64_t sub_1A66E33F0()
{
  return 0;
}

uint64_t sub_1A66E33F8()
{
  return 0;
}

uint64_t sub_1A66E3400(uint64_t a1)
{
  pthread_t v2 = pthread_self();
  long long v3 = *(_opaque_pthread_t **)(a1 + 256);
  if (v3) {
    BOOL v4 = v2 == v3;
  }
  else {
    BOOL v4 = 0;
  }
  unsigned int v5 = v4;
  BOOL v6 = v3 == 0;
  if (v2) {
    return v5;
  }
  else {
    return v6;
  }
}

uint64_t sub_1A66E3448()
{
  return 4294967292;
}

uint64_t sub_1A66E3450()
{
  return 4294967292;
}

uint64_t sub_1A66E3458(uint64_t a1, unsigned __int8 a2, unsigned __int8 a3, unsigned __int8 a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, void, void, void, void, uint64_t))(*(void *)(a1 + 528) + 64))(a1 + 528, a2 & 0xF0, a2 & 0xF, a3, a4, a5);
}

uint64_t sub_1A66E34A4(uint64_t a1, const unsigned __int8 *a2)
{
  return ausdk::AUMIDIBase::SysEx((ausdk::AUMIDIBase *)(a1 + 528), a2);
}

uint64_t sub_1A66E34AC()
{
  return 4294967292;
}

uint64_t sub_1A66E34B4()
{
  return 4294967292;
}

uint64_t sub_1A66E34BC()
{
  return 4294967292;
}

uint64_t sub_1A66E34C4()
{
  return 0;
}

uint64_t sub_1A66E34CC(uint64_t a1, unsigned __int8 a2, unsigned __int8 a3, unsigned __int8 a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, void, void, void, void, uint64_t))(*(void *)a1 + 64))(a1, a2 & 0xF0, a2 & 0xF, a3, a4, a5);
}

uint64_t sub_1A66E3510()
{
  return 4294967292;
}

uint64_t sub_1A66E351C()
{
  return 0;
}

uint64_t sub_1A66E3524()
{
  return 0;
}

uint64_t sub_1A66E352C()
{
  return 0;
}

uint64_t sub_1A66E3534()
{
  return 0;
}

uint64_t sub_1A66E353C()
{
  return 0;
}

uint64_t sub_1A66E3544()
{
  return 0;
}

uint64_t sub_1A66E354C()
{
  return 0;
}

uint64_t sub_1A66E3554()
{
  return 0;
}

uint64_t sub_1A66E355C()
{
  return 0;
}

void sub_1A66E46D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_1A66E46F0()
{
  return &unk_1EFB95510;
}

id sub_1A66E46FC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  if (*(unsigned char *)(v3 + 24))
  {
    id v4 = 0;
    *a3 = 1;
  }
  else
  {
    *(unsigned char *)(v3 + 24) = 1;
    *a3 = 0;
    id v4 = *(id *)(a1 + 32);
  }

  return v4;
}

uint64_t sub_1A66E47DC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v5 = (OpaqueAudioQueue *)objc_msgSend_aqRef(*(void **)(a1 + 32), a2, a3, a4, a5);

  return AudioQueueFlush(v5);
}

uint64_t sub_1A66E48D4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1A66E4F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

uint64_t sub_1A66E4F94(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1A66E4FA8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_msgSend__tearDownAudioQueue(*(void **)(a1 + 32), a2, a3, a4, a5);
  uint64_t v9 = *(void *)(a1 + 32);

  return MEMORY[0x1F4181798](v9, sel__rebuildAudioQueue, v6, v7, v8);
}

uint64_t sub_1A66E4FE4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1A66E4FF8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_msgSend_inflightBuffers(*(void **)(a1 + 32), a2, a3, a4, a5);
  id v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v9, v6, *(void *)(a1 + 40), v7, v8);
}

uint64_t sub_1A66E504C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (objc_msgSend_state(*(void **)(a1 + 32), a2, a3, a4, a5))
  {
    memset(&v26, 0, sizeof(v26));
    uint64_t v10 = (OpaqueAudioQueue *)objc_msgSend_aqRef(*(void **)(a1 + 32), v6, v7, v8, v9);
    uint64_t v15 = (AudioQueueBuffer *)objc_msgSend_aqBuffer(*(void **)(a1 + 40), v11, v12, v13, v14);
    *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = AudioQueueEnqueueBufferWithParameters(v10, v15, 0, 0, 0, 0, 0, 0, 0, &v26);
    AudioTimeStamp v25 = v26;
    return objc_msgSend_setQueuedTimeStamp_(*(void **)(a1 + 40), v16, (uint64_t)&v25, v17, v18);
  }
  else
  {
    uint64_t v20 = *(void **)(a1 + 32);
    uint64_t v22 = objc_msgSend_aqBuffer(*(void **)(a1 + 40), v6, v7, v8, v9);
    return objc_msgSend_bufferCallback_(v20, v21, v22, v23, v24);
  }
}

void sub_1A66E5124(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_msgSend_inflightBuffers(*(void **)(a1 + 32), a2, a3, a4, a5);
  id v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeObject_(v9, v6, *(void *)(a1 + 40), v7, v8);
}

uint64_t sub_1A66E5178(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_msgSend__tearDownAudioQueue(*(void **)(a1 + 32), a2, a3, a4, a5);
  uint64_t v9 = *(void *)(a1 + 32);

  return MEMORY[0x1F4181798](v9, sel__rebuildAudioQueue, v6, v7, v8);
}

uint64_t sub_1A66E51B4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1A66E51C8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v5 = (OpaqueAudioQueue *)objc_msgSend_aqRef(*(void **)(a1 + 32), a2, a3, a4, a5);

  return AudioQueuePause(v5);
}

uint64_t sub_1A66E52E4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = (OpaqueAudioQueue *)objc_msgSend_aqRef(*(void **)(a1 + 32), a2, a3, a4, a5);
  AudioQueuePause(v6);
  uint64_t v10 = *(void **)(a1 + 32);

  return objc_msgSend_setState_(v10, v7, 2, v8, v9);
}

uint64_t sub_1A66E53FC(uint64_t a1)
{
  AXTTSLogCommon();
  pthread_t v2 = (char *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled((os_log_t)v2, OS_LOG_TYPE_DEBUG)) {
    sub_1A688C3E8(a1, v2, v3, v4, v5);
  }

  uint64_t v10 = (OpaqueAudioQueue *)objc_msgSend_aqRef(*(void **)(a1 + 32), v6, v7, v8, v9);
  return AudioQueueReset(v10);
}

uint64_t sub_1A66E5898()
{
  return AX_PERFORM_WITH_LOCK();
}

uint64_t sub_1A66E590C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_msgSend__tearDownAudioQueue(*(void **)(a1 + 32), a2, a3, a4, a5);
  uint64_t v9 = *(void *)(a1 + 32);

  return MEMORY[0x1F4181798](v9, sel__rebuildAudioQueue, v6, v7, v8);
}

void sub_1A66E5E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 160), 8);
  _Unwind_Resume(a1);
}

void *sub_1A66E5E70(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_1A66E5E9C(uint64_t a1)
{
}

uint64_t sub_1A66E5EA4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1A66E5EB4(uint64_t a1)
{
}

void sub_1A66E5EBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(void **)(a1 + 32);
  if (v6)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v6);
    int v11 = objc_msgSend_inflightBuffers(*(void **)(a1 + 40), v7, v8, v9, v10);
    objc_msgSend_removeObject_(v11, v12, *(void *)(a1 + 32), v13, v14);
  }
  objc_msgSend_inflightBuffers(*(void **)(a1 + 40), (const char *)v6, a3, a4, a5);
  id v19 = (id)objc_claimAutoreleasedReturnValue();
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = objc_msgSend_count(v19, v15, v16, v17, v18) == 0;
}

uint64_t sub_1A66E5F54(uint64_t a1)
{
  return (*(uint64_t (**)(void, BOOL))(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) + 16))(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), *(unsigned char *)(a1 + 40) == 0);
}

void sub_1A66E6138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1A66E6150(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_msgSend__syncGraphProperties(*(void **)(a1 + 32), a2, a3, a4, a5);
  uint64_t v10 = (OpaqueAudioQueue *)objc_msgSend_aqRef(*(void **)(a1 + 32), v6, v7, v8, v9);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = AudioQueueStart(v10, 0);
  uint64_t v14 = *(void *)(a1 + 32);

  return MEMORY[0x1F4181798](v14, sel__syncGraphParameters, v11, v12, v13);
}

uint64_t sub_1A66E621C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = objc_msgSend_aqRef(*(void **)(a1 + 32), a2, a3, a4, a5);
  if (!result)
  {
    uint64_t v10 = *(void *)(a1 + 32);
    return MEMORY[0x1F4181798](v10, sel__rebuildAudioQueue, v7, v8, v9);
  }
  return result;
}

void sub_1A66E64C0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1A66E64D8(int a1, AudioQueueRef inAQ)
{
  UInt32 ioDataSize = 4;
  int outData = 0;
  if (!AudioQueueGetProperty(inAQ, 0x6171726Eu, &outData, &ioDataSize))
  {
    int v3 = outData;
    uint64_t v4 = AXTTSLogCommon();
    BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG);
    if (v3)
    {
      if (v5) {
        sub_1A688C688((uint64_t)inAQ, (const char *)v4, v6, v7, v8);
      }
    }
    else if (v5)
    {
      sub_1A688C5F8((uint64_t)inAQ, (const char *)v4, v6, v7, v8);
    }
  }
}

void sub_1A66E6574(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  uint64_t v6 = objc_msgSend_inflightBuffers(*(void **)(a1 + 32), a2, a3, a4, a5, 0);
  uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v7, (uint64_t)&v33, (uint64_t)v37, 16);
  if (v8)
  {
    uint64_t v13 = v8;
    uint64_t v14 = *(void *)v34;
    do
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        if (*(void *)v34 != v14) {
          objc_enumerationMutation(v6);
        }
        uint64_t v16 = *(void **)(*((void *)&v33 + 1) + 8 * i);
        uint64_t v17 = objc_msgSend_completionHandler(v16, v9, v10, v11, v12);

        if (v17)
        {
          uint64_t v18 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
          id v19 = objc_msgSend_completionHandler(v16, v9, v10, v11, v12);
          uint64_t v20 = _Block_copy(v19);
          objc_msgSend_addObject_(v18, v21, (uint64_t)v20, v22, v23);
        }
      }
      uint64_t v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v9, (uint64_t)&v33, (uint64_t)v37, 16);
    }
    while (v13);
  }

  uint64_t v28 = objc_msgSend_inflightBuffers(*(void **)(a1 + 32), v24, v25, v26, v27);
  objc_msgSend_removeAllObjects(v28, v29, v30, v31, v32);
}

void sub_1A66E66DC(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v1 = *(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  uint64_t v3 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1, v2, (uint64_t)&v8, (uint64_t)v12, 16);
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v1);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v8 + 1) + 8 * v6) + 16))(*(void *)(*((void *)&v8 + 1) + 8 * v6));
        ++v6;
      }
      while (v4 != v6);
      uint64_t v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1, v7, (uint64_t)&v8, (uint64_t)v12, 16);
    }
    while (v4);
  }
}

uint64_t sub_1A66E6FAC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend_setShouldRebuildAudioQueue_(*(void **)(a1 + 32), a2, 1, a4, a5);
}

uint64_t sub_1A66E706C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_msgSend_setNeedsPropertySync_(*(void **)(a1 + 32), a2, 1, a4, a5);
  long long v10 = *(void **)(a1 + 32);

  return objc_msgSend__syncGraphProperties(v10, v6, v7, v8, v9);
}

uint64_t sub_1A66E7160(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_msgSend_setNeedsParameterSync_(*(void **)(a1 + 32), a2, 1, a4, a5);
  uint64_t v9 = *(void *)(a1 + 32);

  return MEMORY[0x1F4181798](v9, sel__syncGraphParameters, v6, v7, v8);
}

void sub_1A66E771C(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void sub_1A66E7748(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_1A66E7768(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

_DWORD *ausdk::BufferAllocator::Allocate(ausdk::BufferAllocator *this, unsigned int a2, int a3)
{
  if (a2 > 0x1000)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1A66E78E0(exception, "AudioBuffers::Allocate: Too many buffers");
    __cxa_throw(exception, (struct type_info *)off_1E5C69328, MEMORY[0x1E4FBA1D0]);
  }
  uint64_t v4 = 0;
  int v5 = 0;
  unsigned int v6 = (a3 + 15) & 0xFFFFFFF0;
  if (a2 && v6)
  {
    if (((v6 * (unint64_t)a2) & 0xFFFFFFFF00000000) != 0)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        sub_1A688CA58();
      }
      long long v11 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      uint64_t v12 = std::bad_alloc::bad_alloc(v11);
      __cxa_throw(v12, MEMORY[0x1E4FBA360], MEMORY[0x1E4FBA2C0]);
    }
    int v5 = v6 * a2;
    if (v6 * a2)
    {
      uint64_t v4 = malloc_type_malloc(v6 * a2, 0x9473491AuLL);
      bzero(v4, v6 * a2);
    }
    else
    {
      uint64_t v4 = 0;
    }
  }
  if (a2 <= 1) {
    int v7 = 1;
  }
  else {
    int v7 = a2;
  }
  unsigned int v8 = 16 * v7 + 56;
  uint64_t result = malloc_type_malloc(v8, 0xA1F80C9AuLL);
  *uint64_t result = a2;
  result[1] = v6;
  *((void *)result + 1) = 0;
  result[4] = v8;
  result[5] = v5;
  *((void *)result + 3) = 0;
  *((void *)result + 4) = v4;
  *((void *)result + 5) = 0;
  *((void *)result + 7) = 0;
  *((void *)result + 8) = 0;
  result[12] = a2;
  return result;
}

void sub_1A66E78CC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_1A66E78E0(std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
  return result;
}

void ausdk::BufferAllocator::Deallocate(int a1, void *a2)
{
  uint64_t v3 = (void *)a2[4];
  if (v3) {
    free(v3);
  }

  free(a2);
}

uint64_t ausdk::AllocatedBuffer::Prepare(ausdk::AllocatedBuffer *this, int a2, unsigned int a3)
{
  unsigned int v6 = *((_DWORD *)this + 12);
  uint64_t result = (uint64_t)this + 48;
  uint64_t v5 = v6;
  if (v6 > *(_DWORD *)this)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1A66E78E0(exception, "AllocatedBuffer::Prepare(): too many buffers");
    goto LABEL_10;
  }
  uint64_t v7 = *((unsigned int *)this + 1);
  if (v7 < a3) {
    goto LABEL_9;
  }
  unint64_t v8 = *((void *)this + 4);
  unint64_t v9 = v8 + *((unsigned int *)this + 5);
  if (v5)
  {
    uint64_t v10 = (unint64_t *)((char *)this + 64);
    do
    {
      unint64_t *v10 = v8;
      v8 += v7;
      *((_DWORD *)v10 - 2) = a2;
      *((_DWORD *)v10 - 1) = a3;
      v10 += 2;
      --v5;
    }
    while (v5);
  }
  if (v8 > v9)
  {
LABEL_9:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1A66E78E0(exception, "AllocatedBuffer::Prepare(): insufficient capacity");
LABEL_10:
    __cxa_throw(exception, (struct type_info *)off_1E5C69328, MEMORY[0x1E4FBA1D0]);
  }
  return result;
}

void sub_1A66E7A34(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ausdk::AllocatedBuffer::PrepareNull(ausdk::AllocatedBuffer *this, int a2, int a3)
{
  unsigned int v6 = *((_DWORD *)this + 12);
  uint64_t result = (uint64_t)this + 48;
  uint64_t v5 = v6;
  if (v6 > *(_DWORD *)this)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1A66E78E0(exception, "AllocatedBuffer::PrepareNull(): too many buffers");
    __cxa_throw(exception, (struct type_info *)off_1E5C69328, MEMORY[0x1E4FBA1D0]);
  }
  if (v5)
  {
    uint64_t v7 = (void *)((char *)this + 64);
    do
    {
      *((_DWORD *)v7 - 2) = a2;
      *((_DWORD *)v7 - 1) = a3;
      *uint64_t v7 = 0;
      v7 += 2;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_1A66E7AD0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ausdk::AUBufferList::PrepareBuffer(ausdk::AUBufferList *this, const AudioStreamBasicDescription *a2, unsigned int a3)
{
  if (*((_DWORD *)this + 5) < a3)
  {
    BOOL v8 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    if (v8) {
      sub_1A688CAA0(v8, v9, v10, v11, v12, v13, v14, v15);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    sub_1A66E7DE8((uint64_t)exception, -10874);
LABEL_16:
    __cxa_throw(exception, (struct type_info *)&unk_1EFB7D058, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  AudioFormatFlags mFormatFlags = a2->mFormatFlags;
  if ((mFormatFlags & 0x20) != 0) {
    UInt32 mChannelsPerFrame = a2->mChannelsPerFrame;
  }
  else {
    UInt32 mChannelsPerFrame = 1;
  }
  if (mChannelsPerFrame > *((_DWORD *)this + 4))
  {
    BOOL v17 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    if (v17) {
      sub_1A688CB18(v17, v18, v19, v20, v21, v22, v23, v24);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    sub_1A66E7DE8((uint64_t)exception, -10868);
    goto LABEL_16;
  }
  if ((mFormatFlags & 0x20) != 0) {
    UInt32 v6 = 1;
  }
  else {
    UInt32 v6 = a2->mChannelsPerFrame;
  }
  uint64_t result = ausdk::AllocatedBuffer::Prepare(*((ausdk::AllocatedBuffer **)this + 1), v6, a2->mBytesPerFrame * a3);
  *(_DWORD *)this = 1;
  return result;
}

void sub_1A66E7BCC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ausdk::AUBufferList::PrepareNullBuffer(ausdk::AUBufferList *this, const AudioStreamBasicDescription *a2, int a3)
{
  AudioFormatFlags mFormatFlags = a2->mFormatFlags;
  if ((mFormatFlags & 0x20) != 0) {
    UInt32 mChannelsPerFrame = a2->mChannelsPerFrame;
  }
  else {
    UInt32 mChannelsPerFrame = 1;
  }
  if (mChannelsPerFrame > *((_DWORD *)this + 4))
  {
    BOOL v8 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    if (v8) {
      sub_1A688CB18(v8, v9, v10, v11, v12, v13, v14, v15);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    sub_1A66E7DE8((uint64_t)exception, -10868);
    __cxa_throw(exception, (struct type_info *)&unk_1EFB7D058, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if ((mFormatFlags & 0x20) != 0) {
    UInt32 v6 = 1;
  }
  else {
    UInt32 v6 = a2->mChannelsPerFrame;
  }
  uint64_t result = ausdk::AllocatedBuffer::PrepareNull(*((ausdk::AllocatedBuffer **)this + 1), v6, a2->mBytesPerFrame * a3);
  *(_DWORD *)this = 2;
  return result;
}

void sub_1A66E7C90(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ausdk::AUBufferList::Allocate(ausdk::AUBufferList *this, const AudioStreamBasicDescription *a2, int a3)
{
  UInt32 v6 = ausdk::BufferAllocator::instance(this);
  uint64_t v7 = v6;
  if (*((void *)this + 1)) {
    ((void (*)(uint64_t (***)()))(*v6)[3])(v6);
  }
  UInt32 mBytesPerFrame = a2->mBytesPerFrame;
  if ((a2->mFormatFlags & 0x20) != 0) {
    uint64_t mChannelsPerFrame = a2->mChannelsPerFrame;
  }
  else {
    uint64_t mChannelsPerFrame = 1;
  }
  uint64_t result = ((uint64_t (*)(uint64_t (***)(), uint64_t, void, void))(*v7)[2])(v7, mChannelsPerFrame, mBytesPerFrame * a3, 0);
  *((void *)this + 1) = result;
  *((_DWORD *)this + 4) = mChannelsPerFrame;
  *((_DWORD *)this + 5) = a3;
  *(_DWORD *)this = 0;
  return result;
}

void *ausdk::AUBufferList::Deallocate(void *this)
{
  id v1 = this;
  if (this[1])
  {
    pthread_t v2 = ausdk::BufferAllocator::instance((ausdk::BufferAllocator *)this);
    this = (void *)((uint64_t (*)(uint64_t (***)(), void))(*v2)[3])(v2, v1[1]);
    v1[1] = 0;
  }
  v1[2] = 0;
  *(_DWORD *)id v1 = 0;
  return this;
}

void sub_1A66E7DD4()
{
}

uint64_t sub_1A66E7DF0(uint64_t a1, int a2)
{
  sub_1A66E8008(&v10, "OSStatus ");
  std::to_string(&__p, a2);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  UInt32 v6 = std::string::append(&v10, (const std::string::value_type *)p_p, size);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v11.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v11);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  *(void *)a1 = &unk_1EFB7D4B8;
  *(_DWORD *)(a1 + 16) = a2;
  return a1;
}

void sub_1A66E7EDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A66E7F28(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);

  JUMPOUT(0x1AD0C0C70);
}

void sub_1A66E7F60()
{
}

void sub_1A66E7F78(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_1A66E7FD4(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E5C69320, MEMORY[0x1E4FBA1C8]);
}

void sub_1A66E7FC0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_1A66E7FD4(std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D0] + 16);
  return result;
}

void *sub_1A66E8008(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1A66E7F60();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    UInt32 v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    UInt32 v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void sub_1A66E80BC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

void sub_1A66E80D8(void *a1, uint64_t a2, void *a3)
{
}

id sub_1A66E80E8(void *a1)
{
  return objc_getAssociatedObject(a1, &unk_1E96C4740);
}

id sub_1A66E80F4(void *a1)
{
  return objc_getAssociatedObject(a1, &unk_1E96C4741);
}

void sub_1A66E8100(void *a1, uint64_t a2, void *a3)
{
}

id sub_1A66E8110(void *a1)
{
  return objc_getAssociatedObject(a1, &unk_1E96C4742);
}

void sub_1A66E811C(void *a1, uint64_t a2, void *a3)
{
}

void sub_1A66E812C(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_msgSend_numberWithBool_(NSNumber, a2, a3, a4, a5);
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_setAssociatedObject(a1, &unk_1E96C4743, v6, (void *)1);
}

uint64_t sub_1A66E8194(void *a1)
{
  id v1 = objc_getAssociatedObject(a1, &unk_1E96C4743);
  uint64_t v6 = objc_msgSend_BOOLValue(v1, v2, v3, v4, v5);

  return v6;
}

void sub_1A66E81D4(void *a1, uint64_t a2, void *a3)
{
}

id sub_1A66E81E4(void *a1)
{
  return objc_getAssociatedObject(a1, &unk_1E96C4744);
}

void sub_1A66E81F0(uint64_t a1, uint64_t a2, void *a3)
{
  id v7 = a3;
  if (v7)
  {
    uint64_t v8 = objc_msgSend_shared(SSMLServices, v3, v4, v5, v6);
    uint64_t v13 = objc_msgSend_speechString(v7, v9, v10, v11, v12);
    BOOL v17 = objc_msgSend_parseSSMLToPlainText_(v8, v14, (uint64_t)v13, v15, v16);

    uint64_t v18 = AXLogSpeechSynthesis();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG)) {
      sub_1A688CC40((uint64_t)v17, v18);
    }

    uint64_t v23 = objc_msgSend_error(v17, v19, v20, v21, v22);
    if (v23)
    {
    }
    else
    {
      uint64_t v32 = objc_msgSend_plainTextResult(v17, v24, v25, v26, v27);
      uint64_t v37 = objc_msgSend_length(v32, v33, v34, v35, v36);

      if (v37)
      {
        uint64_t v42 = objc_msgSend_speechString(v7, v38, v39, v40, v41);
        objc_msgSend_setSsmlRepresentation_(v7, v43, (uint64_t)v42, v44, v45);

        uint64_t v28 = objc_msgSend_plainTextResult(v17, v46, v47, v48, v49);
        objc_msgSend_setSpeechString_(v7, v50, (uint64_t)v28, v51, v52);
LABEL_10:

        goto LABEL_11;
      }
    }
    uint64_t v28 = AXLogSpeechSynthesis();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
      sub_1A688CB90(v17, (char *)v28, v29, v30, v31);
    }
    goto LABEL_10;
  }
LABEL_11:
}

void sub_1A66E8330(void *a1, int a2, void *aBlock)
{
  id v4 = _Block_copy(aBlock);
  objc_setAssociatedObject(a1, &unk_1E96C4745, v4, (void *)3);
}

id sub_1A66E8390(void *a1)
{
  return objc_getAssociatedObject(a1, &unk_1E96C4745);
}

void sub_1A66E839C(void *a1, int a2, void *aBlock)
{
  id v4 = _Block_copy(aBlock);
  objc_setAssociatedObject(a1, &unk_1E96C4746, v4, (void *)3);
}

id sub_1A66E83FC(void *a1)
{
  return objc_getAssociatedObject(a1, &unk_1E96C4746);
}

id sub_1A66E8408(void *a1)
{
  return objc_getAssociatedObject(a1, &unk_1E96C4747);
}

void sub_1A66E8414(void *a1, uint64_t a2, void *a3)
{
}

id sub_1A66E8424(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = (objc_class *)MEMORY[0x1E4F15498];
  id v4 = a3;
  id v5 = [v3 alloc];
  uint64_t v9 = objc_msgSend_initWithString_(v5, v6, (uint64_t)v4, v7, v8);

  return v9;
}

id sub_1A66E847C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = (objc_class *)MEMORY[0x1E4F15498];
  id v4 = a3;
  id v5 = [v3 alloc];
  uint64_t v9 = objc_msgSend_initWithAttributedString_(v5, v6, (uint64_t)v4, v7, v8);

  return v9;
}

id sub_1A66E84D4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = (objc_class *)MEMORY[0x1E4F15498];
  id v4 = a3;
  id v5 = [v3 alloc];
  uint64_t v9 = objc_msgSend_initWithSSMLRepresentation_(v5, v6, (uint64_t)v4, v7, v8);

  return v9;
}

void *sub_1A66E852C(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  v27.receiver = a1;
  v27.super_class = (Class)&off_1EFBA5E78;
  id v5 = objc_msgSendSuper2(&v27, sel_init);
  uint64_t v6 = v5;
  if (v5)
  {
    id v7 = v5;
    LODWORD(v8) = 1.0;
    objc_msgSend_setVolume_(v7, v9, v10, v11, v12, v8);
    LODWORD(v13) = 1.0;
    objc_msgSend_setPitchMultiplier_(v7, v14, v15, v16, v17, v13);
    LODWORD(v18) = *MEMORY[0x1E4F15290];
    objc_msgSend_setRate_(v7, v19, v20, v21, v22, v18);
    objc_msgSend_setSpeechString_(v7, v23, (uint64_t)v4, v24, v25);
  }

  return v6;
}

void *sub_1A66E85D0(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v9 = objc_msgSend_string(v4, v5, v6, v7, v8);
  double v13 = objc_msgSend_initWithString_(a1, v10, (uint64_t)v9, v11, v12);

  if (v13) {
    objc_msgSend_setAttributedSpeechString_(v13, v14, (uint64_t)v4, v15, v16);
  }

  return v13;
}

id sub_1A66E8638(id a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (!objc_opt_class())
  {
    uint64_t v9 = AXLogSpeechSynthesis();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT)) {
      sub_1A688CD98(v9);
    }
  }
  uint64_t v10 = objc_msgSend_shared(SSMLServices, v5, v6, v7, v8);
  uint64_t v14 = objc_msgSend_parseSSMLToPlainText_(v10, v11, (uint64_t)v4, v12, v13);

  uint64_t v23 = objc_msgSend_error(v14, v15, v16, v17, v18);
  if (v23)
  {
    AXLogSpeechSynthesis();
    uint64_t v24 = (char *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled((os_log_t)v24, OS_LOG_TYPE_ERROR)) {
      sub_1A688CCB8(v23, v24, v25, v26, v27);
    }

    id v28 = 0;
  }
  else
  {
    uint64_t v29 = objc_msgSend_plainTextResult(v14, v19, v20, v21, v22);
    long long v33 = objc_msgSend_initWithString_(a1, v30, (uint64_t)v29, v31, v32);

    if (v33) {
      objc_msgSend_setSsmlRepresentation_(v33, v34, (uint64_t)v4, v35, v36);
    }
    a1 = v33;
    id v28 = a1;
  }

  return v28;
}

id sub_1A66E8768(void *a1)
{
  id v1 = NSString;
  id v2 = a1;
  uint64_t v3 = objc_opt_class();
  uint64_t v8 = objc_msgSend_speechString(v2, v4, v5, v6, v7);
  uint64_t v13 = objc_msgSend_voice(v2, v9, v10, v11, v12);
  objc_msgSend_rate(v2, v14, v15, v16, v17);
  double v19 = v18;
  objc_msgSend_volume(v2, v20, v21, v22, v23);
  double v25 = v24;
  objc_msgSend_pitchMultiplier(v2, v26, v27, v28, v29);
  double v31 = v30;
  objc_msgSend_preUtteranceDelay(v2, v32, v33, v34, v35);
  uint64_t v37 = v36;
  objc_msgSend_postUtteranceDelay(v2, v38, v39, v40, v41);
  uint64_t v46 = objc_msgSend_stringWithFormat_(v1, v42, @"[%@ %p] String: %@\nVoice: %@\nRate: %.2f\nVolume: %.2f\nPitch Multiplier: %.2f\nDelays: Pre: %.2f(s) Post: %.2f(s)", v43, v44, v3, v2, v8, v13, *(void *)&v19, *(void *)&v25, *(void *)&v31, v37, v45);

  return v46;
}

unint64_t MultiRadixFFT::NearestSupportedSizes(unint64_t this)
{
  if (this >= 0x11)
  {
    if (this >> 20)
    {
      unsigned int v1 = 0x100000;
      this = 0x100000;
    }
    else
    {
      unsigned int v1 = 1 << (__clz(this) ^ 0x1F);
      char v2 = __clz(this - 1);
      unsigned int v3 = 1 << -v2;
      if (v1 >= v3)
      {
        this = (1 << -v2);
      }
      else
      {
        char v4 = __clz(this / 0xF);
        unsigned int v5 = 15 << ~v4;
        char v6 = __clz(this / 5);
        unsigned int v7 = 5 << ~v6;
        char v8 = __clz(this / 3);
        if (v7 <= 3 << ~v8) {
          unsigned int v7 = 3 << ~v8;
        }
        if (v5 <= v7) {
          unsigned int v5 = v7;
        }
        if (v1 <= v5) {
          unsigned int v1 = v5;
        }
        if (v1 != this)
        {
          unsigned int v9 = 30 << (31 - v4);
          unsigned int v10 = 10 << (31 - v6);
          unsigned int v11 = 6 << (31 - v8);
          if (v11 < v10) {
            unsigned int v10 = v11;
          }
          if (v10 < v9) {
            unsigned int v9 = v10;
          }
          if (v9 >= v3) {
            this = v3;
          }
          else {
            this = v9;
          }
        }
      }
    }
  }
  else
  {
    unsigned int v1 = 16;
    this = 16;
  }
  return v1 | (this << 32);
}

uint64_t MultiRadixFFT::Initialize(MultiRadixFFT *this, unsigned int a2)
{
  char v4 = (os_unfair_lock_s *)sub_1A66E8A00();
  sub_1A66E8A94(v4, a2, (uint64_t)&v10);
  uint64_t v6 = v11;
  unsigned int v5 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v7 = (std::__shared_weak_count *)*((void *)this + 1);
  *(void *)this = v6;
  *((void *)this + 1) = v5;
  if (v7) {
    sub_1A66E9474(v7);
  }
  uint64_t v8 = v10;
  if (v12) {
    sub_1A66E9474(v12);
  }
  return v8;
}

uint64_t sub_1A66E8A00()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E96C18B0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E96C18B0))
  {
    operator new();
  }
  return qword_1E96C18A8;
}

void sub_1A66E8A7C(_Unwind_Exception *a1)
{
}

void sub_1A66E8A94(os_unfair_lock_s *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned int v8 = a2;
  sub_1A66E94E8(a1, &v8, &v8, &v6);
  uint64_t v4 = v6;
  if (*(void *)(v6 + 8) && *(void *)(v6 + 16))
  {
    *(_DWORD *)a3 = 0;
    unsigned int v5 = v7;
    *(void *)(a3 + 8) = v4;
    *(void *)(a3 + 16) = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *(_DWORD *)a3 = 1936292453;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  if (v7) {
    sub_1A66E9474(v7);
  }
}

uint64_t MultiRadixFFT::Size(MultiRadixFFT *this)
{
  if (*(void *)this) {
    return **(unsigned int **)this;
  }
  else {
    return 0;
  }
}

uint64_t MultiRadixRealFFT::Initialize(MultiRadixRealFFT *this, unsigned int a2)
{
  uint64_t v4 = (os_unfair_lock_s *)sub_1A66E8BAC();
  sub_1A66E8C40(v4, a2, (uint64_t)&v10);
  uint64_t v6 = v11;
  unsigned int v5 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v7 = (std::__shared_weak_count *)*((void *)this + 1);
  *(void *)this = v6;
  *((void *)this + 1) = v5;
  if (v7) {
    sub_1A66E9474(v7);
  }
  uint64_t v8 = v10;
  if (v12) {
    sub_1A66E9474(v12);
  }
  return v8;
}

uint64_t sub_1A66E8BAC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E96C18C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E96C18C0))
  {
    operator new();
  }
  return qword_1E96C18B8;
}

void sub_1A66E8C28(_Unwind_Exception *a1)
{
}

void sub_1A66E8C40(os_unfair_lock_s *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned int v8 = a2;
  sub_1A66E9F64(a1, &v8, &v8, &v6);
  uint64_t v4 = v6;
  if (*(void *)(v6 + 8) && *(void *)(v6 + 16))
  {
    *(_DWORD *)a3 = 0;
    unsigned int v5 = v7;
    *(void *)(a3 + 8) = v4;
    *(void *)(a3 + 16) = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *(_DWORD *)a3 = 1936292453;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  if (v7) {
    sub_1A66E9474(v7);
  }
}

uint64_t MultiRadixRealFFT::Size(MultiRadixRealFFT *this)
{
  if (*(void *)this) {
    return **(unsigned int **)this;
  }
  else {
    return 0;
  }
}

uint64_t MultiRadixFFT::CplxInPlaceTransform(MultiRadixFFT *this, DSPSplitComplex *a2, int a3)
{
  return 0;
}

uint64_t MultiRadixFFT::CplxOutOfPlaceTransform(MultiRadixFFT *this, const DSPSplitComplex *a2, DSPSplitComplex *a3, int a4)
{
  if (!*(void *)this) {
    abort();
  }
  uint64_t v4 = 16;
  if (a4 == 1) {
    uint64_t v4 = 8;
  }
  vDSP_DFT_Execute(*(const vDSP_DFT_SetupStruct **)(*(void *)this + v4), a2->realp, a2->imagp, a3->realp, a3->imagp);
  return 0;
}

uint64_t MultiRadixRealFFT::RealInPlaceTransform(MultiRadixRealFFT *this, DSPSplitComplex *a2, int a3, float a4)
{
  if (!*(void *)this) {
    abort();
  }
  uint64_t v8 = 16;
  if (a3 == 1) {
    uint64_t v8 = 8;
  }
  vDSP_DFT_Execute(*(const vDSP_DFT_SetupStruct **)(*(void *)this + v8), a2->realp, a2->imagp, a2->realp, a2->imagp);
  if (a3 == 1)
  {
    float __B = a4 * 0.5;
    vDSP_vsmul(a2->realp, 1, &__B, a2->realp, 1, (unint64_t)**(unsigned int **)this >> 1);
    vDSP_vsmul(a2->imagp, 1, &__B, a2->imagp, 1, (unint64_t)**(unsigned int **)this >> 1);
  }
  return 0;
}

uint64_t MultiRadixRealFFT::RealOutOfPlaceForwardTransform(MultiRadixRealFFT *this, DSPComplex *__C, DSPSplitComplex *a3, float a4)
{
  return 0;
}

uint64_t MultiRadixRealFFT::RealOutOfPlaceInverseTransform(MultiRadixRealFFT *this, const DSPSplitComplex *a2, DSPComplex *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (!*(void *)this) {
    abort();
  }
  if (!**(_DWORD **)this) {
    return 561214580;
  }
  unsigned int v5 = (const vDSP_DFT_SetupStruct ***)MEMORY[0x1F4188790](this);
  uint64_t v8 = (float *)((char *)&v13 - ((v7 + 15) & 0x7FFFFFFF0));
  __Z.realp = v8;
  unsigned int v9 = *v5;
  if (*v5) {
    unint64_t v10 = (unint64_t)*(unsigned int *)v9 >> 1;
  }
  else {
    unint64_t v10 = 0;
  }
  __Z.imagp = &v8[v10];
  vDSP_DFT_Execute(v9[2], *v6, v6[1], v8, __Z.imagp);
  if (*(void *)this) {
    vDSP_Length v12 = (unint64_t)**(unsigned int **)this >> 1;
  }
  else {
    vDSP_Length v12 = 0;
  }
  vDSP_ztoc(&__Z, 1, a3, 2, v12);
  return 0;
}

void MultiRadixFFT_Create()
{
}

uint64_t MultiRadixFFT_Dispose(uint64_t result)
{
  if (result)
  {
    unsigned int v1 = *(std::__shared_weak_count **)(result + 8);
    if (v1) {
      sub_1A66E9474(v1);
    }
    JUMPOUT(0x1AD0C0C70);
  }
  return result;
}

unsigned int **MultiRadixFFT_Size(unsigned int **result)
{
  if (result)
  {
    if (*result) {
      return (unsigned int **)**result;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t MultiRadixFFT_CplxInPlaceTransform(MultiRadixFFT *a1, DSPSplitComplex *a2, int a3)
{
  if (!a1) {
    return 561214580;
  }
  MultiRadixFFT::CplxOutOfPlaceTransform(a1, a2, a2, a3);
  return 0;
}

uint64_t MultiRadixFFT_CplxOutOfPlaceTransform(MultiRadixFFT *a1, const DSPSplitComplex *a2, DSPSplitComplex *a3, int a4)
{
  if (!a1) {
    return 561214580;
  }
  MultiRadixFFT::CplxOutOfPlaceTransform(a1, a2, a3, a4);
  return 0;
}

void MultiRadixRealFFT_Create()
{
}

uint64_t MultiRadixRealFFT_Dispose(uint64_t result)
{
  if (result)
  {
    unsigned int v1 = *(std::__shared_weak_count **)(result + 8);
    if (v1) {
      sub_1A66E9474(v1);
    }
    JUMPOUT(0x1AD0C0C70);
  }
  return result;
}

unsigned int **MultiRadixRealFFT_Size(unsigned int **result)
{
  if (result)
  {
    if (*result) {
      return (unsigned int **)**result;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t MultiRadixRealFFT_RealInPlaceTransform(MultiRadixRealFFT *a1, DSPSplitComplex *a2, int a3)
{
  if (!a1) {
    return 561214580;
  }
  MultiRadixRealFFT::RealInPlaceTransform(a1, a2, a3, 1.0);
  return 0;
}

uint64_t MultiRadixRealFFT_RealOutOfPlaceForwardTransform(MultiRadixRealFFT *a1, DSPComplex *__C, DSPSplitComplex *a3)
{
  if (!a1) {
    return 561214580;
  }
  vDSP_ctoz(__C, 2, a3, 1, (unint64_t)**(unsigned int **)a1 >> 1);
  MultiRadixRealFFT::RealInPlaceTransform(a1, a3, 1, 1.0);
  return 0;
}

uint64_t MultiRadixRealFFT_RealOutOfPlaceInverseTransform(MultiRadixRealFFT *a1, const DSPSplitComplex *a2, DSPComplex *a3)
{
  if (a1) {
    return MultiRadixRealFFT::RealOutOfPlaceInverseTransform(a1, a2, a3);
  }
  else {
    return 561214580;
  }
}

float realFFTMultiply(float *a1, float *a2, float *a3, float *a4, float *a5, float *a6, unsigned int a7)
{
  __A.realp = a1;
  __A.imagp = a2;
  __B.realp = a3;
  __B.imagp = a4;
  v13.realp = a5;
  v13.imagp = a6;
  float v7 = *a1;
  float v8 = *a2;
  float v9 = *a3;
  float v10 = *a4;
  vDSP_zvmul(&__A, 1, &__B, 1, &v13, 1, a7 >> 1, 1);
  imagp = v13.imagp;
  *v13.realp = v7 * v9;
  float result = v8 * v10;
  float *imagp = v8 * v10;
  return result;
}

void realFFTZeroPad(const DSPComplex *a1, float *a2, float *a3, unsigned int a4, int a5, MultiRadixRealFFT *a6)
{
  v11.realp = a2;
  v11.imagp = a3;
  vDSP_Length v9 = a4 >> 1;
  vDSP_ctoz(a1, 2, &v11, 1, v9);
  if (a5 - a4 >= 2)
  {
    size_t v10 = 16 * ((a5 - a4) >> 1);
    bzero(&v11.realp[v9], v10);
    bzero(&v11.imagp[v9], v10);
  }
  if (a6) {
    MultiRadixRealFFT::RealInPlaceTransform(a6, &v11, 1, 1.0);
  }
}

void realIFFTUnload(float *a1, float *a2, DSPComplex *__C, unsigned int a4, unsigned int a5, MultiRadixRealFFT *this, float a7)
{
  v11.realp = a1;
  v11.imagp = a2;
  float __B = a7;
  __Z.realp = &a1[a5 >> 1];
  __Z.imagp = &a2[a5 >> 1];
  if (this) {
    MultiRadixRealFFT::RealInPlaceTransform(this, &v11, -1, 1.0);
  }
  vDSP_ztoc(&__Z, 1, __C, 2, a4 >> 1);
  vDSP_vsmul((const float *)__C, 1, &__B, (float *)__C, 1, a4);
}

void sub_1A66E9474(std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void sub_1A66E94E8(os_unfair_lock_s *a1@<X0>, _DWORD *a2@<X1>, unsigned int *a3@<X2>, void *a4@<X8>)
{
  os_unfair_lock_lock(a1);
  sub_1A66E9668((uint64_t)a1, a2, a4);
  if (!*a4)
  {
    float v8 = (std::__shared_weak_count *)a4[1];
    if (v8) {
      sub_1A66E9474(v8);
    }
    Setup = vDSP_DFT_zop_CreateSetup(0, *a3, vDSP_DFT_FORWARD);
    if (Setup) {
      vDSP_DFT_zop_CreateSetup(Setup, *a3, vDSP_DFT_INVERSE);
    }
    operator new();
  }
  os_unfair_lock_unlock(a1);
}

void sub_1A66E9628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    sub_1A66E9474(a13);
  }
  os_unfair_lock_unlock(v13);
  _Unwind_Resume(a1);
}

void sub_1A66E9668(uint64_t a1@<X0>, _DWORD *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = sub_1A66E9848(*(uint64_t **)(a1 + 8), *(uint64_t **)(a1 + 16));
  sub_1A66E98F4(v5, (uint64_t)v6, *(long long **)(v5 + 8));
  float v8 = *(void **)v5;
  float v7 = *(void **)(v5 + 8);
  while (1)
  {
    if (v8 == v7)
    {
      *a3 = 0;
      a3[1] = 0;
      return;
    }
    vDSP_Length v9 = (std::__shared_weak_count *)v8[1];
    if (v9)
    {
      size_t v10 = std::__shared_weak_count::lock(v9);
      if (v10) {
        break;
      }
    }
LABEL_8:
    v8 += 2;
  }
  if (!*v8 || (DSPSplitComplex v11 = *(_DWORD **)(*v8 + 16), *v11 != *a2))
  {
    sub_1A66E9474(v10);
    goto LABEL_8;
  }
  *a3 = v11;
  a3[1] = v10;
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);

  sub_1A66E9474(v10);
}

void *sub_1A66E9728(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = a1 + 2;
  unint64_t v5 = v6;
  float v7 = (void *)*(v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_1A66E9D7C();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v19[4] = v4;
    uint64_t v14 = (char *)sub_1A66E9D94((uint64_t)v4, v13);
    uint64_t v15 = &v14[16 * v10];
    v19[0] = v14;
    v19[1] = v15;
    v19[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 16), 1uLL, memory_order_relaxed);
    }
    v19[2] = v15 + 16;
    sub_1A66E9D04(a1, v19);
    vDSP_Length v9 = (void *)a1[1];
    sub_1A66E9EDC(v19);
  }
  else
  {
    *float v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
    }
    vDSP_Length v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return v9 - 2;
}

void sub_1A66E9834(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1A66E9EDC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1A66E9848(uint64_t *a1, uint64_t *a2)
{
  if (a1 == a2) {
    return a2;
  }
  for (uint64_t i = a1 + 2; ; i += 2)
  {
    uint64_t v4 = *(i - 1);
    if (!v4 || *(void *)(v4 + 8) == -1) {
      break;
    }
    if (i == a2) {
      return a2;
    }
  }
  unint64_t v6 = i - 2;
  if (i - 2 != a2)
  {
    while (i != a2)
    {
      uint64_t v8 = i[1];
      if (v8 && *(void *)(v8 + 8) != -1)
      {
        uint64_t v9 = *i;
        *uint64_t i = 0;
        i[1] = 0;
        uint64_t v10 = (std::__shared_weak_count *)v6[1];
        *unint64_t v6 = v9;
        v6[1] = v8;
        if (v10) {
          std::__shared_weak_count::__release_weak(v10);
        }
        v6 += 2;
      }
      i += 2;
    }
  }
  return v6;
}

uint64_t sub_1A66E98F4(uint64_t a1, uint64_t a2, long long *a3)
{
  if ((long long *)a2 != a3)
  {
    sub_1A66E9978((uint64_t)&v10, a3, *(long long **)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        uint64_t v8 = *(std::__shared_weak_count **)(v7 - 8);
        if (v8) {
          std::__shared_weak_count::__release_weak(v8);
        }
        v7 -= 16;
      }
      while (v7 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

long long *sub_1A66E9978(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      long long v7 = *v5;
      *(void *)uint64_t v5 = 0;
      *((void *)v5 + 1) = 0;
      uint64_t v8 = *(std::__shared_weak_count **)(a4 + 8);
      *(_OWORD *)a4 = v7;
      if (v8) {
        std::__shared_weak_count::__release_weak(v8);
      }
      ++v5;
      a4 += 16;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void sub_1A66E99E4(uint64_t *a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x38uLL);
  v6[1] = 0;
  v6[2] = 0;
  *uint64_t v6 = &unk_1EFB7E210;
  uint64_t v7 = *a1;
  *a1 = 0;
  v6[4] = 0;
  v6[5] = v7;
  v6[6] = *a2;
  _DWORD v6[3] = 0;
  *a3 = v6 + 3;
  a3[1] = v6;

  sub_1A66E9BEC((uint64_t)a3, v6 + 3, (uint64_t)(v6 + 3));
}

void sub_1A66E9A74()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  unsigned int v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E4FBA350], MEMORY[0x1E4FBA1F8]);
}

void sub_1A66E9AA8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EFB7E210;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1A66E9AC8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EFB7E210;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1AD0C0C70);
}

void *sub_1A66E9B1C(uint64_t a1)
{
  return sub_1A66E9B28((void *)(a1 + 24));
}

void *sub_1A66E9B28(void *a1)
{
  sub_1A66E9B74(a1[3]);
  sub_1A66E9C74(a1 + 2, 0);
  char v2 = (std::__shared_weak_count *)a1[1];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_1A66E9B74(uint64_t a1)
{
  if (os_unfair_lock_trylock((os_unfair_lock_t)a1))
  {
    char v2 = sub_1A66E9848(*(uint64_t **)(a1 + 8), *(uint64_t **)(a1 + 16));
    sub_1A66E98F4(a1 + 8, (uint64_t)v2, *(long long **)(a1 + 16));
    os_unfair_lock_unlock((os_unfair_lock_t)a1);
  }
}

void sub_1A66E9BD8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1A66E9BEC(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      uint64_t v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v4 = (std::__shared_weak_count *)a2[1];
      }
      *a2 = a3;
      a2[1] = v5;
      if (v4) {
        std::__shared_weak_count::__release_weak(v4);
      }
      if (v5)
      {
        sub_1A66E9474(v5);
      }
    }
  }
}

uint64_t sub_1A66E9C74(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1A66E9CC4(result);
    JUMPOUT(0x1AD0C0C70);
  }
  return result;
}

uint64_t sub_1A66E9CC4(uint64_t a1)
{
  char v2 = *(vDSP_DFT_SetupStruct **)(a1 + 16);
  if (v2) {
    vDSP_DFT_DestroySetup(v2);
  }
  unsigned int v3 = *(vDSP_DFT_SetupStruct **)(a1 + 8);
  if (v3) {
    vDSP_DFT_DestroySetup(v3);
  }
  return a1;
}

uint64_t sub_1A66E9D04(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1A66E9DCC((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void sub_1A66E9D7C()
{
}

void *sub_1A66E9D94(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_1A66E9A74();
  }
  return operator new(16 * a2);
}

uint64_t sub_1A66E9DCC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_1A66E9E60((uint64_t)v12);
  return v10;
}

uint64_t sub_1A66E9E60(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1A66E9E98(a1);
  }
  return a1;
}

void sub_1A66E9E98(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    unsigned int v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    v1 += 16;
  }
}

void **sub_1A66E9EDC(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_1A66E9F10(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 16;
    uint64_t v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_weak(v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

void sub_1A66E9F64(os_unfair_lock_s *a1@<X0>, _DWORD *a2@<X1>, unsigned int *a3@<X2>, void *a4@<X8>)
{
  os_unfair_lock_lock(a1);
  sub_1A66E9668((uint64_t)a1, a2, a4);
  if (!*a4)
  {
    uint64_t v8 = (std::__shared_weak_count *)a4[1];
    if (v8) {
      sub_1A66E9474(v8);
    }
    Setup = vDSP_DFT_zrop_CreateSetup(0, *a3, vDSP_DFT_FORWARD);
    if (Setup) {
      vDSP_DFT_zrop_CreateSetup(Setup, *a3, vDSP_DFT_INVERSE);
    }
    operator new();
  }
  os_unfair_lock_unlock(a1);
}

void sub_1A66EA0A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    sub_1A66E9474(a13);
  }
  os_unfair_lock_unlock(v13);
  _Unwind_Resume(a1);
}

Class sub_1A66EB59C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  v11[0] = 0;
  if (!qword_1E96C4750)
  {
    v11[1] = (void *)MEMORY[0x1E4F143A8];
    v11[2] = (void *)3221225472;
    v11[3] = sub_1A66EB6C8;
    v11[4] = &unk_1E5C69480;
    v11[5] = v11;
    long long v12 = xmmword_1E5C69718;
    uint64_t v13 = 0;
    qword_1E96C4750 = _sl_dlopen();
  }
  if (!qword_1E96C4750) {
    sub_1A688D12C(v11, a2, a3, a4, a5);
  }
  if (v11[0]) {
    free(v11[0]);
  }
  Class result = objc_getClass("AFLocalization");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1A688D1AC((uint64_t)result, v7, v8, v9, v10);
  }
  qword_1E96C4748 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1A66EB6C8()
{
  uint64_t result = _sl_dlopen();
  qword_1E96C4750 = result;
  return result;
}

void sub_1A66EB73C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

uint64_t sub_1A66EBA0C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, 1);
  }
  return result;
}

void sub_1A66EC824()
{
  id v0 = AXTTSLogCommon();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl(&dword_1A66D3000, v0, OS_LOG_TYPE_DEFAULT, "Canceled asset download", v1, 2u);
  }
}

void sub_1A66EC8E0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_msgSend_assistantVoiceMaps(MEMORY[0x1E4FA4F78], a2, a3, a4, a5);
  id v11 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v9 = objc_msgSend_deprecatedVoicesMap(v11, v5, v6, v7, v8);
  uint64_t v10 = (void *)qword_1E96C46C0;
  qword_1E96C46C0 = v9;
}

uint64_t sub_1A66ECA5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(double))(*(void *)(a1 + 32) + 16))((double)a2 / (double)a3);
}

void sub_1A66ECA80(uint64_t a1, uint64_t a2, __n128 a3)
{
  v13[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 32);
  if (a2) {
    double v4 = 1.0;
  }
  else {
    double v4 = 0.0;
  }
  if (a2)
  {
    uint64_t v5 = *(void (**)(uint64_t, uint64_t, void, __n128))(v3 + 16);
    uint64_t v6 = *(void *)(a1 + 32);
    a3.n128_f64[0] = v4;
    v5(v6, 1, 0, a3);
  }
  else
  {
    uint64_t v7 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v8 = *MEMORY[0x1E4F281F8];
    uint64_t v12 = *MEMORY[0x1E4F28588];
    v13[0] = @"Download failed";
    uint64_t v9 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], 0, (uint64_t)v13, (uint64_t)&v12, 1);
    id v11 = objc_msgSend_errorWithDomain_code_userInfo_(v7, v10, v8, 0, (uint64_t)v9);
    (*(void (**)(uint64_t, uint64_t, void *, double))(v3 + 16))(v3, 1, v11, v4);
  }
}

_OWORD *VPTimeFreqConverter::VPTimeFreqConverter(_OWORD *a1, _DWORD *a2)
{
  *(_OWORD *)((char *)a1 + 169) = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[2] = 0u;
  VPTimeFreqConverter::Setup((uint64_t)a1, a2);
  return a1;
}

void sub_1A66ED1C0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = (void *)v1[20];
  if (v3)
  {
    v1[21] = v3;
    operator delete(v3);
  }
  double v4 = (void *)v1[17];
  if (v4)
  {
    v1[18] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)v1[14];
  if (v5)
  {
    v1[15] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)v1[11];
  if (v6)
  {
    v1[12] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)v1[8];
  if (v7)
  {
    v1[9] = v7;
    operator delete(v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)v1[5];
  if (v8) {
    sub_1A66E9474(v8);
  }
  _Unwind_Resume(exception_object);
}

uint64_t VPTimeFreqConverter::Setup(uint64_t a1, _DWORD *a2)
{
  *(unsigned char *)(a1 + 184) = 0;
  if (*a2) {
    return 4294967246;
  }
  int v2 = a2[3];
  if (v2 != a2[2]) {
    return 4294967246;
  }
  unint64_t v3 = a2[4];
  if (v3 != 2 * v2) {
    return 4294967246;
  }
  uint64_t result = 4294967246;
  if (v3)
  {
    int v6 = a2[5];
    if (v6)
    {
      if (v2)
      {
        if (v6 == v3)
        {
          int v7 = a2[1];
          *(_DWORD *)a1 = 0;
          *(_DWORD *)(a1 + 4) = v7;
          *(_DWORD *)(a1 + 8) = v2;
          *(_DWORD *)(a1 + 12) = v2;
          *(_DWORD *)(a1 + 16) = v3;
          *(_DWORD *)(a1 + 20) = v3;
          *(_DWORD *)(a1 + 24) = a2[6];
          *(_DWORD *)(a1 + 28) = v3 >> 1;
          operator new[]();
        }
      }
    }
  }
  return result;
}

void VPTimeFreqConverter::VPTimeFreqConverter(VPTimeFreqConverter *this, int a2, int a3)
{
  *(_OWORD *)((char *)this + 169) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 2) = 0u;
  v3[0] = 0;
  v3[1] = a2;
  v3[2] = a3;
  v3[3] = a3;
  v3[4] = 2 * a3;
  v3[5] = 2 * a3;
  *(float *)&v3[6] = 1.0 / (float)(2 * a3);
  VPTimeFreqConverter::Setup((uint64_t)this, v3);
}

void sub_1A66ED3F0(_Unwind_Exception *exception_object)
{
  unint64_t v3 = (void *)v1[20];
  if (v3)
  {
    v1[21] = v3;
    operator delete(v3);
  }
  double v4 = (void *)v1[17];
  if (v4)
  {
    v1[18] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)v1[14];
  if (v5)
  {
    v1[15] = v5;
    operator delete(v5);
  }
  int v6 = (void *)v1[11];
  if (v6)
  {
    v1[12] = v6;
    operator delete(v6);
  }
  int v7 = (void *)v1[8];
  if (v7)
  {
    v1[9] = v7;
    operator delete(v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)v1[5];
  if (v8) {
    sub_1A66E9474(v8);
  }
  _Unwind_Resume(exception_object);
}

void VPTimeFreqConverter::~VPTimeFreqConverter(VPTimeFreqConverter *this)
{
  uint64_t v2 = *((void *)this + 6);
  if (v2) {
    MEMORY[0x1AD0C0C50](v2, 0x1000C8052888210);
  }
  uint64_t v3 = *((void *)this + 7);
  if (v3) {
    MEMORY[0x1AD0C0C50](v3, 0x1000C8052888210);
  }
  double v4 = (void *)*((void *)this + 20);
  if (v4)
  {
    *((void *)this + 21) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 17);
  if (v5)
  {
    *((void *)this + 18) = v5;
    operator delete(v5);
  }
  int v6 = (void *)*((void *)this + 14);
  if (v6)
  {
    *((void *)this + 15) = v6;
    operator delete(v6);
  }
  int v7 = (void *)*((void *)this + 11);
  if (v7)
  {
    *((void *)this + 12) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 8);
  if (v8)
  {
    *((void *)this + 9) = v8;
    operator delete(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v9) {
    sub_1A66E9474(v9);
  }
}

uint64_t VPTimeFreqConverter::IsValid(VPTimeFreqConverter *this)
{
  if (*((unsigned char *)this + 184)) {
    return 0;
  }
  else {
    return 4294967246;
  }
}

uint64_t VPTimeFreqConverter::Analyze(VPTimeFreqConverter *this, const float *a2, DSPSplitComplex *a3)
{
  if (!*((unsigned char *)this + 184) || (*((_DWORD *)this + 1) | 2) != 2) {
    return 4294956433;
  }
  if (*(_DWORD *)this) {
    return 4294967292;
  }
  memcpy(*((void **)this + 8), (const void *)(*((void *)this + 8) + 4 * *((unsigned int *)this + 3)), 4 * (*((_DWORD *)this + 4) - *((_DWORD *)this + 3)));
  memcpy((void *)(*((void *)this + 8) + 4 * (*((_DWORD *)this + 4) - *((_DWORD *)this + 3))), a2, 4 * *((unsigned int *)this + 3));
  vDSP_vmul(*((const float **)this + 17), 1, *((const float **)this + 8), 1, *((float **)this + 11), 1, *((unsigned int *)this + 4));
  vDSP_vsmul(*((const float **)this + 11), 1, (const float *)this + 6, *((float **)this + 11), 1, *((unsigned int *)this + 4));
  int v7 = (DSPComplex *)*((void *)this + 11);

  return MultiRadixRealFFT::RealOutOfPlaceForwardTransform((VPTimeFreqConverter *)((char *)this + 32), v7, a3, 1.0);
}

uint64_t VPTimeFreqConverter::Synthesize(VPTimeFreqConverter *this, const DSPSplitComplex *a2, float *a3)
{
  if (!*((unsigned char *)this + 184) || (*((_DWORD *)this + 1) - 1) > 1) {
    return 4294956433;
  }
  if (*(_DWORD *)this) {
    return 4294967292;
  }
  uint64_t result = MultiRadixRealFFT::RealOutOfPlaceInverseTransform((VPTimeFreqConverter *)((char *)this + 32), a2, *((DSPComplex **)this + 11));
  if (!result)
  {
    vDSP_vmul(*((const float **)this + 11), 1, *((const float **)this + 20), 1, *((float **)this + 11), 1, *((unsigned int *)this + 4));
    vDSP_vadd(*((const float **)this + 11), 1, *((const float **)this + 14), 1, *((float **)this + 14), 1, *((unsigned int *)this + 4));
    memcpy(a3, *((const void **)this + 14), 4 * *((unsigned int *)this + 3));
    memmove(*((void **)this + 14), (const void *)(*((void *)this + 14) + 4 * *((unsigned int *)this + 3)), 4 * (*((_DWORD *)this + 4) - *((_DWORD *)this + 3)));
    bzero((void *)(*((void *)this + 14) + 4 * (*((_DWORD *)this + 4) - *((_DWORD *)this + 3))), 4 * *((unsigned int *)this + 3));
    return 0;
  }
  return result;
}

void sub_1A66ED714(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 4 * a2;
    }
  }
  else
  {
    sub_1A66ED8B8((char **)a1, a2 - v2);
  }
}

void VPTimeFreqConverter_Create()
{
}

void sub_1A66ED7A4(_Unwind_Exception *a1)
{
  MEMORY[0x1AD0C0C70](v1, 0x10A0C406C6E14A4);
  _Unwind_Resume(a1);
}

void VPTimeFreqConverter_CreateWithConfig()
{
}

void sub_1A66ED820(_Unwind_Exception *a1)
{
  MEMORY[0x1AD0C0C70](v1, 0x10A0C406C6E14A4);
  _Unwind_Resume(a1);
}

uint64_t VPTimeFreqConverter_Dispose(VPTimeFreqConverter *a1)
{
  if (a1)
  {
    VPTimeFreqConverter::~VPTimeFreqConverter(a1);
    MEMORY[0x1AD0C0C70]();
  }
  return 0;
}

uint64_t VPTimeFreqConverter_IsValid(uint64_t a1)
{
  uint64_t result = 4294967246;
  if (a1)
  {
    if (*(unsigned char *)(a1 + 184)) {
      return 0;
    }
    else {
      return 4294967246;
    }
  }
  return result;
}

uint64_t VPTimeFreqConverter_Analyze(VPTimeFreqConverter *a1, const float *a2, DSPSplitComplex *a3)
{
  if (a1) {
    return VPTimeFreqConverter::Analyze(a1, a2, a3);
  }
  else {
    return 4294967246;
  }
}

uint64_t VPTimeFreqConverter_Synthesize(VPTimeFreqConverter *a1, const DSPSplitComplex *a2, float *a3)
{
  if (a1) {
    return VPTimeFreqConverter::Synthesize(a1, a2, a3);
  }
  else {
    return 4294967246;
  }
}

void sub_1A66ED8B8(char **a1, unint64_t a2)
{
  int v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  int v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 2);
    if (v10 >> 62) {
      sub_1A66E9D7C();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = v5 - v8;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      uint64_t v14 = (char *)sub_1A66ED9D4(v4, v13);
      uint64_t v8 = *a1;
      int v7 = a1[1];
    }
    else
    {
      uint64_t v14 = 0;
    }
    long long v15 = &v14[4 * v11];
    uint64_t v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    long long v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      int v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void *sub_1A66ED9D4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    sub_1A66E9A74();
  }
  return operator new(4 * a2);
}

uint64_t TTSGetComponentsInOldSiriVoiceIdentifier(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  uint64_t v11 = objc_msgSend_componentsSeparatedByString_(v7, v8, @"_", v9, v10);
  if ((unint64_t)objc_msgSend_count(v11, v12, v13, v14, v15) >= 4
    && objc_msgSend_isOldSiriVoiceIdentifier_(TTSAlternativeVoices, v16, (uint64_t)v7, v17, v18))
  {
    if (a2)
    {
      objc_msgSend_objectAtIndexedSubscript_(v11, v19, 1, v20, v21);
      *a2 = (id)objc_claimAutoreleasedReturnValue();
    }
    if (a3)
    {
      objc_msgSend_objectAtIndexedSubscript_(v11, v19, 2, v20, v21);
      *a3 = (id)objc_claimAutoreleasedReturnValue();
    }
    if (a4)
    {
      objc_msgSend_objectAtIndexedSubscript_(v11, v19, 3, v20, v21);
      *a4 = (id)objc_claimAutoreleasedReturnValue();
    }
    uint64_t v22 = 1;
  }
  else
  {
    uint64_t v22 = 0;
  }

  return v22;
}

uint64_t TTSGetComponentsInNamedSiriVoiceIdentifier(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  uint64_t v11 = objc_msgSend_componentsSeparatedByString_(v7, v8, @"_", v9, v10);
  if ((unint64_t)objc_msgSend_count(v11, v12, v13, v14, v15) >= 4
    && objc_msgSend_isSiriVoiceIdentifier_(TTSAlternativeVoices, v16, (uint64_t)v7, v17, v18))
  {
    if (a2)
    {
      objc_msgSend_objectAtIndexedSubscript_(v11, v19, 1, v20, v21);
      *a2 = (id)objc_claimAutoreleasedReturnValue();
    }
    if (a3)
    {
      objc_msgSend_objectAtIndexedSubscript_(v11, v19, 2, v20, v21);
      *a3 = (id)objc_claimAutoreleasedReturnValue();
    }
    if (a4)
    {
      objc_msgSend_objectAtIndexedSubscript_(v11, v19, 3, v20, v21);
      *a4 = (id)objc_claimAutoreleasedReturnValue();
    }
    uint64_t v22 = 1;
  }
  else
  {
    uint64_t v22 = 0;
  }

  return v22;
}

BOOL TTSGetComponentsInNashvilleVoiceIdentifier(void *a1, char *a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v7 = objc_msgSend_componentsSeparatedByString_(a1, a2, @"-", a4, a5);
  if ((unint64_t)objc_msgSend_count(v7, v8, v9, v10, v11) >= 2)
  {
    objc_msgSend_lastObject(v7, v12, v13, v14, v15);
    *a3 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v21 = objc_msgSend_count(v7, v17, v18, v19, v20);
    float v24 = objc_msgSend_subarrayWithRange_(v7, v22, 0, v21 - 1, v23);
    uint64_t v28 = objc_msgSend_componentsJoinedByString_(v24, v25, @"-", v26, v27);

    uint64_t v32 = objc_msgSend_componentsSeparatedByString_(v28, v29, @".", v30, v31);
    unint64_t v37 = objc_msgSend_count(v32, v33, v34, v35, v36);
    BOOL v16 = v37 > 1;
    if (v37 >= 2)
    {
      objc_msgSend_lastObject(v32, v38, v39, v40, v41);
      *(void *)a2 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    BOOL v16 = 0;
  }

  return v16;
}

void AUSpeechEnhancerV2::AUSpeechEnhancerV2(AUSpeechEnhancerV2 *this, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase(this, a2, 1, 1, 0);
  *(void *)uint64_t v3 = &unk_1EFB7D1B0;
  *((void *)v3 + 69) = 0;
  *((_DWORD *)v3 + 140) = 0;
  *((_OWORD *)v3 + 33) = 0u;
  *((_WORD *)v3 + 272) = 0;
  *(_OWORD *)((char *)v3 + 568) = 0u;
  *(_OWORD *)((char *)v3 + 584) = 0u;
  *(_OWORD *)((char *)v3 + 600) = 0u;
  *(_OWORD *)((char *)v3 + 616) = 0u;
  *(_OWORD *)((char *)v3 + 632) = 0u;
  *((_DWORD *)v3 + 162) = 1;
  *(void *)((char *)v3 + 652) = 0;
  *(void *)((char *)v3 + 668) = 0;
  *(void *)((char *)v3 + 660) = 0;
  *((_DWORD *)v3 + 169) = 0;
  sub_1A66EE2BC((void **)v3 + 82);
  uint64_t v4 = sub_1A66F3F00((uint64_t)this + 32, 0);
  (*(void (**)(uint64_t, void))(*(void *)v4 + 40))(v4, (*((void *)this + 83) - *((void *)this + 82)) >> 5);
  ausdk::AUBase::CreateElements((uint64_t)this);
  uint64_t v5 = *((void *)this + 82);
  if (*((void *)this + 83) != v5)
  {
    unint64_t v6 = 0;
    uint64_t v7 = 24;
    do
    {
      ausdk::AUBase::SetParameter(this, v6++, 0, 0, *(float *)(v5 + v7));
      uint64_t v5 = *((void *)this + 82);
      v7 += 32;
    }
    while (v6 < (*((void *)this + 83) - v5) >> 5);
  }
}

void sub_1A66EE27C(_Unwind_Exception *a1)
{
  unint64_t v6 = *v3;
  if (*v3)
  {
    *((void *)v1 + 83) = v6;
    operator delete(v6);
  }
  sub_1A66F2050(v2);
  uint64_t v7 = *v4;
  if (*v4)
  {
    *((void *)v1 + 72) = v7;
    operator delete(v7);
  }
  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

void sub_1A66EE2BC(void **a1)
{
  uint64_t v3 = (uint64_t)(a1 + 2);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v4 = a1[1];
  if ((unint64_t)v4 >= v2)
  {
    uint64_t v6 = ((char *)v4 - (unsigned char *)*a1) >> 5;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v8 = v2 - (void)*a1;
    if (v8 >> 4 > v7) {
      unint64_t v7 = v8 >> 4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9) {
      uint64_t v10 = (char *)sub_1A66F3EC8((uint64_t)(a1 + 2), v9);
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = &v10[32 * v6];
    uint64_t v12 = &v10[32 * v9];
    *(void *)uint64_t v11 = @"Bypass Algorithm + Auto Volume";
    *((void *)v11 + 1) = 0x8000000000000002;
    *((void *)v11 + 2) = 0x3F80000000000000;
    *((void *)v11 + 3) = 0xFFFFFFFF00000000;
    uint64_t v5 = v11 + 32;
    uint64_t v14 = (char *)*a1;
    uint64_t v13 = (char *)a1[1];
    if (v13 != *a1)
    {
      do
      {
        long long v15 = *((_OWORD *)v13 - 1);
        *((_OWORD *)v11 - 2) = *((_OWORD *)v13 - 2);
        *((_OWORD *)v11 - 1) = v15;
        v11 -= 32;
        v13 -= 32;
      }
      while (v13 != v14);
      uint64_t v13 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = v5;
    a1[2] = v12;
    if (v13) {
      operator delete(v13);
    }
  }
  else
  {
    void *v4 = @"Bypass Algorithm + Auto Volume";
    v4[1] = 0x8000000000000002;
    v4[2] = 0x3F80000000000000;
    v4[3] = 0xFFFFFFFF00000000;
    uint64_t v5 = v4 + 4;
  }
  a1[1] = v5;
  unint64_t v16 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v16)
  {
    uint64_t v18 = ((char *)v5 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v18 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v19 = v16 - (void)*a1;
    uint64_t v20 = v19 >> 4;
    if (v19 >> 4 <= (unint64_t)(v18 + 1)) {
      uint64_t v20 = v18 + 1;
    }
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v21 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v21 = v20;
    }
    if (v21) {
      uint64_t v22 = (char *)sub_1A66F3EC8(v3, v21);
    }
    else {
      uint64_t v22 = 0;
    }
    uint64_t v23 = &v22[32 * v18];
    float v24 = &v22[32 * v21];
    *(void *)uint64_t v23 = @"Wind Flag";
    *((void *)v23 + 1) = 0x800000000000;
    *((void *)v23 + 2) = 0x3F80000000000000;
    *((void *)v23 + 3) = 0x200000000;
    uint64_t v17 = v23 + 32;
    uint64_t v26 = (char *)*a1;
    double v25 = (char *)a1[1];
    if (v25 != *a1)
    {
      do
      {
        long long v27 = *((_OWORD *)v25 - 1);
        *((_OWORD *)v23 - 2) = *((_OWORD *)v25 - 2);
        *((_OWORD *)v23 - 1) = v27;
        v23 -= 32;
        v25 -= 32;
      }
      while (v25 != v26);
      double v25 = (char *)*a1;
    }
    *a1 = v23;
    a1[1] = v17;
    a1[2] = v24;
    if (v25) {
      operator delete(v25);
    }
  }
  else
  {
    void *v5 = @"Wind Flag";
    v5[1] = 0x800000000000;
    v5[2] = 0x3F80000000000000;
    v5[3] = 0x200000000;
    uint64_t v17 = v5 + 4;
  }
  a1[1] = v17;
  unint64_t v28 = (unint64_t)a1[2];
  if ((unint64_t)v17 >= v28)
  {
    uint64_t v30 = ((char *)v17 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v30 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v31 = v28 - (void)*a1;
    uint64_t v32 = v31 >> 4;
    if (v31 >> 4 <= (unint64_t)(v30 + 1)) {
      uint64_t v32 = v30 + 1;
    }
    if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v33 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v33 = v32;
    }
    if (v33) {
      uint64_t v34 = (char *)sub_1A66F3EC8(v3, v33);
    }
    else {
      uint64_t v34 = 0;
    }
    uint64_t v35 = &v34[32 * v30];
    uint64_t v36 = &v34[32 * v33];
    *(void *)uint64_t v35 = @"Loudspeaker Calibration";
    *((void *)v35 + 1) = 0x800000000000000DLL;
    *((void *)v35 + 2) = 0x43160000C2480000;
    *((void *)v35 + 3) = 0x342B40000;
    uint64_t v29 = v35 + 32;
    uint64_t v38 = (char *)*a1;
    unint64_t v37 = (char *)a1[1];
    if (v37 != *a1)
    {
      do
      {
        long long v39 = *((_OWORD *)v37 - 1);
        *((_OWORD *)v35 - 2) = *((_OWORD *)v37 - 2);
        *((_OWORD *)v35 - 1) = v39;
        v35 -= 32;
        v37 -= 32;
      }
      while (v37 != v38);
      unint64_t v37 = (char *)*a1;
    }
    *a1 = v35;
    a1[1] = v29;
    a1[2] = v36;
    if (v37) {
      operator delete(v37);
    }
  }
  else
  {
    void *v17 = @"Loudspeaker Calibration";
    v17[1] = 0x800000000000000DLL;
    v17[2] = 0x43160000C2480000;
    v17[3] = 0x342B40000;
    uint64_t v29 = v17 + 4;
  }
  a1[1] = v29;
  unint64_t v40 = (unint64_t)a1[2];
  if ((unint64_t)v29 >= v40)
  {
    uint64_t v42 = ((char *)v29 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v42 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v43 = v40 - (void)*a1;
    uint64_t v44 = v43 >> 4;
    if (v43 >> 4 <= (unint64_t)(v42 + 1)) {
      uint64_t v44 = v42 + 1;
    }
    if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v45 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v45 = v44;
    }
    if (v45) {
      uint64_t v46 = (char *)sub_1A66F3EC8(v3, v45);
    }
    else {
      uint64_t v46 = 0;
    }
    uint64_t v47 = &v46[32 * v42];
    uint64_t v48 = &v46[32 * v45];
    *(void *)uint64_t v47 = @"Signal Spectrum Smoothing Time";
    *((void *)v47 + 1) = 0x8000000000000004;
    *((void *)v47 + 2) = 0x4120000000000000;
    *((void *)v47 + 3) = 0x340800000;
    uint64_t v41 = v47 + 32;
    uint64_t v50 = (char *)*a1;
    uint64_t v49 = (char *)a1[1];
    if (v49 != *a1)
    {
      do
      {
        long long v51 = *((_OWORD *)v49 - 1);
        *((_OWORD *)v47 - 2) = *((_OWORD *)v49 - 2);
        *((_OWORD *)v47 - 1) = v51;
        v47 -= 32;
        v49 -= 32;
      }
      while (v49 != v50);
      uint64_t v49 = (char *)*a1;
    }
    *a1 = v47;
    a1[1] = v41;
    a1[2] = v48;
    if (v49) {
      operator delete(v49);
    }
  }
  else
  {
    *uint64_t v29 = @"Signal Spectrum Smoothing Time";
    v29[1] = 0x8000000000000004;
    v29[2] = 0x4120000000000000;
    v29[3] = 0x340800000;
    uint64_t v41 = v29 + 4;
  }
  a1[1] = v41;
  unint64_t v52 = (unint64_t)a1[2];
  if ((unint64_t)v41 >= v52)
  {
    uint64_t v54 = ((char *)v41 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v54 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v55 = v52 - (void)*a1;
    uint64_t v56 = v55 >> 4;
    if (v55 >> 4 <= (unint64_t)(v54 + 1)) {
      uint64_t v56 = v54 + 1;
    }
    if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v57 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v57 = v56;
    }
    if (v57) {
      float32x4_t v58 = (char *)sub_1A66F3EC8(v3, v57);
    }
    else {
      float32x4_t v58 = 0;
    }
    float32x4_t v59 = &v58[32 * v54];
    float32x4_t v60 = &v58[32 * v57];
    *(void *)float32x4_t v59 = @"Noise Spectrum Attack Time";
    *((void *)v59 + 1) = 0x8000000000000004;
    *((void *)v59 + 2) = 0x4120000000000000;
    *((void *)v59 + 3) = 0x340000000;
    float32x4_t v53 = v59 + 32;
    float32x4_t v62 = (char *)*a1;
    float32x4_t v61 = (char *)a1[1];
    if (v61 != *a1)
    {
      do
      {
        long long v63 = *((_OWORD *)v61 - 1);
        *((_OWORD *)v59 - 2) = *((_OWORD *)v61 - 2);
        *((_OWORD *)v59 - 1) = v63;
        v59 -= 32;
        v61 -= 32;
      }
      while (v61 != v62);
      float32x4_t v61 = (char *)*a1;
    }
    *a1 = v59;
    a1[1] = v53;
    a1[2] = v60;
    if (v61) {
      operator delete(v61);
    }
  }
  else
  {
    void *v41 = @"Noise Spectrum Attack Time";
    v41[1] = 0x8000000000000004;
    v41[2] = 0x4120000000000000;
    v41[3] = 0x340000000;
    float32x4_t v53 = v41 + 4;
  }
  a1[1] = v53;
  unint64_t v64 = (unint64_t)a1[2];
  if ((unint64_t)v53 >= v64)
  {
    uint64_t v66 = ((char *)v53 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v66 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v67 = v64 - (void)*a1;
    uint64_t v68 = v67 >> 4;
    if (v67 >> 4 <= (unint64_t)(v66 + 1)) {
      uint64_t v68 = v66 + 1;
    }
    if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v69 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v69 = v68;
    }
    if (v69) {
      float32x4_t v70 = (char *)sub_1A66F3EC8(v3, v69);
    }
    else {
      float32x4_t v70 = 0;
    }
    uint64_t v71 = &v70[32 * v66];
    uint64_t v72 = &v70[32 * v69];
    *(void *)uint64_t v71 = @"Noise Spectrum Release Time";
    *((void *)v71 + 1) = 0x8000000000000004;
    *((void *)v71 + 2) = 0x4120000000000000;
    *((void *)v71 + 3) = 0x33F000000;
    id v65 = v71 + 32;
    float32x2_t v74 = (char *)*a1;
    float32x2_t v73 = (char *)a1[1];
    if (v73 != *a1)
    {
      do
      {
        long long v75 = *((_OWORD *)v73 - 1);
        *((_OWORD *)v71 - 2) = *((_OWORD *)v73 - 2);
        *((_OWORD *)v71 - 1) = v75;
        v71 -= 32;
        v73 -= 32;
      }
      while (v73 != v74);
      float32x2_t v73 = (char *)*a1;
    }
    *a1 = v71;
    a1[1] = v65;
    a1[2] = v72;
    if (v73) {
      operator delete(v73);
    }
  }
  else
  {
    void *v53 = @"Noise Spectrum Release Time";
    v53[1] = 0x8000000000000004;
    v53[2] = 0x4120000000000000;
    v53[3] = 0x33F000000;
    id v65 = v53 + 4;
  }
  a1[1] = v65;
  unint64_t v76 = (unint64_t)a1[2];
  if ((unint64_t)v65 >= v76)
  {
    uint64_t v78 = ((char *)v65 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v78 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v79 = v76 - (void)*a1;
    uint64_t v80 = v79 >> 4;
    if (v79 >> 4 <= (unint64_t)(v78 + 1)) {
      uint64_t v80 = v78 + 1;
    }
    if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v81 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v81 = v80;
    }
    if (v81) {
      int32x4_t v82 = (char *)sub_1A66F3EC8(v3, v81);
    }
    else {
      int32x4_t v82 = 0;
    }
    int32x4_t v83 = &v82[32 * v78];
    int32x4_t v84 = &v82[32 * v81];
    *(void *)int32x4_t v83 = @"Environmental Noise Power (dBA)";
    *((void *)v83 + 1) = 0x80000000000DLL;
    *((void *)v83 + 2) = 0x4302000000000000;
    *((void *)v83 + 3) = 0x241F00000;
    uint64_t v77 = v83 + 32;
    int32x4_t v86 = (char *)*a1;
    v85 = (char *)a1[1];
    if (v85 != *a1)
    {
      do
      {
        long long v87 = *((_OWORD *)v85 - 1);
        *((_OWORD *)v83 - 2) = *((_OWORD *)v85 - 2);
        *((_OWORD *)v83 - 1) = v87;
        v83 -= 32;
        v85 -= 32;
      }
      while (v85 != v86);
      v85 = (char *)*a1;
    }
    *a1 = v83;
    a1[1] = v77;
    a1[2] = v84;
    if (v85) {
      operator delete(v85);
    }
  }
  else
  {
    *id v65 = @"Environmental Noise Power (dBA)";
    v65[1] = 0x80000000000DLL;
    v65[2] = 0x4302000000000000;
    v65[3] = 0x241F00000;
    uint64_t v77 = v65 + 4;
  }
  a1[1] = v77;
  unint64_t v88 = (unint64_t)a1[2];
  if ((unint64_t)v77 >= v88)
  {
    uint64_t v90 = ((char *)v77 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v90 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v91 = v88 - (void)*a1;
    uint64_t v92 = v91 >> 4;
    if (v91 >> 4 <= (unint64_t)(v90 + 1)) {
      uint64_t v92 = v90 + 1;
    }
    if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v93 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v93 = v92;
    }
    if (v93) {
      uint64_t v94 = (char *)sub_1A66F3EC8(v3, v93);
    }
    else {
      uint64_t v94 = 0;
    }
    id v95 = &v94[32 * v90];
    uint64_t v96 = &v94[32 * v93];
    *(void *)id v95 = @"Auto Volume Low Noise";
    *((void *)v95 + 1) = 0x800000000000000DLL;
    *((void *)v95 + 2) = 0x42F0000000000000;
    *((void *)v95 + 3) = 0x442480000;
    int32x4_t v89 = v95 + 32;
    uint64_t v98 = (char *)*a1;
    uint64_t v97 = (char *)a1[1];
    if (v97 != *a1)
    {
      do
      {
        long long v99 = *((_OWORD *)v97 - 1);
        *((_OWORD *)v95 - 2) = *((_OWORD *)v97 - 2);
        *((_OWORD *)v95 - 1) = v99;
        v95 -= 32;
        v97 -= 32;
      }
      while (v97 != v98);
      uint64_t v97 = (char *)*a1;
    }
    *a1 = v95;
    a1[1] = v89;
    a1[2] = v96;
    if (v97) {
      operator delete(v97);
    }
  }
  else
  {
    *uint64_t v77 = @"Auto Volume Low Noise";
    v77[1] = 0x800000000000000DLL;
    v77[2] = 0x42F0000000000000;
    v77[3] = 0x442480000;
    int32x4_t v89 = v77 + 4;
  }
  a1[1] = v89;
  unint64_t v100 = (unint64_t)a1[2];
  if ((unint64_t)v89 >= v100)
  {
    uint64_t v102 = ((char *)v89 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v102 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v103 = v100 - (void)*a1;
    uint64_t v104 = v103 >> 4;
    if (v103 >> 4 <= (unint64_t)(v102 + 1)) {
      uint64_t v104 = v102 + 1;
    }
    if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v105 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v105 = v104;
    }
    if (v105) {
      uint64_t v106 = (char *)sub_1A66F3EC8(v3, v105);
    }
    else {
      uint64_t v106 = 0;
    }
    uint64_t v107 = &v106[32 * v102];
    uint64_t v108 = &v106[32 * v105];
    *(void *)uint64_t v107 = @"Auto Volume High Noise";
    *((void *)v107 + 1) = 0x800000000000000DLL;
    *((void *)v107 + 2) = 0x42F0000000000000;
    *((void *)v107 + 3) = 0x442C80000;
    v101 = v107 + 32;
    uint64_t v110 = (char *)*a1;
    v109 = (char *)a1[1];
    if (v109 != *a1)
    {
      do
      {
        long long v111 = *((_OWORD *)v109 - 1);
        *((_OWORD *)v107 - 2) = *((_OWORD *)v109 - 2);
        *((_OWORD *)v107 - 1) = v111;
        v107 -= 32;
        v109 -= 32;
      }
      while (v109 != v110);
      v109 = (char *)*a1;
    }
    *a1 = v107;
    a1[1] = v101;
    a1[2] = v108;
    if (v109) {
      operator delete(v109);
    }
  }
  else
  {
    *int32x4_t v89 = @"Auto Volume High Noise";
    v89[1] = 0x800000000000000DLL;
    v89[2] = 0x42F0000000000000;
    v89[3] = 0x442C80000;
    v101 = v89 + 4;
  }
  a1[1] = v101;
  unint64_t v112 = (unint64_t)a1[2];
  if ((unint64_t)v101 >= v112)
  {
    uint64_t v114 = ((char *)v101 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v114 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v115 = v112 - (void)*a1;
    uint64_t v116 = v115 >> 4;
    if (v115 >> 4 <= (unint64_t)(v114 + 1)) {
      uint64_t v116 = v114 + 1;
    }
    if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v117 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v117 = v116;
    }
    if (v117) {
      uint64_t v118 = (char *)sub_1A66F3EC8(v3, v117);
    }
    else {
      uint64_t v118 = 0;
    }
    uint64_t v119 = &v118[32 * v114];
    uint64_t v120 = &v118[32 * v117];
    *(void *)uint64_t v119 = @"Auto Volume Low Slope";
    *((void *)v119 + 1) = 0x8000000000000000;
    *((void *)v119 + 2) = 0x40A0000000000000;
    *((void *)v119 + 3) = 0x43ECCCCCDLL;
    uint64_t v113 = v119 + 32;
    uint64_t v122 = (char *)*a1;
    uint64_t v121 = (char *)a1[1];
    if (v121 != *a1)
    {
      do
      {
        long long v123 = *((_OWORD *)v121 - 1);
        *((_OWORD *)v119 - 2) = *((_OWORD *)v121 - 2);
        *((_OWORD *)v119 - 1) = v123;
        v119 -= 32;
        v121 -= 32;
      }
      while (v121 != v122);
      uint64_t v121 = (char *)*a1;
    }
    *a1 = v119;
    a1[1] = v113;
    a1[2] = v120;
    if (v121) {
      operator delete(v121);
    }
  }
  else
  {
    void *v101 = @"Auto Volume Low Slope";
    v101[1] = 0x8000000000000000;
    v101[2] = 0x40A0000000000000;
    v101[3] = 0x43ECCCCCDLL;
    uint64_t v113 = v101 + 4;
  }
  a1[1] = v113;
  unint64_t v124 = (unint64_t)a1[2];
  if ((unint64_t)v113 >= v124)
  {
    uint64_t v126 = ((char *)v113 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v126 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v127 = v124 - (void)*a1;
    uint64_t v128 = v127 >> 4;
    if (v127 >> 4 <= (unint64_t)(v126 + 1)) {
      uint64_t v128 = v126 + 1;
    }
    if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v129 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v129 = v128;
    }
    if (v129) {
      uint64_t v130 = (char *)sub_1A66F3EC8(v3, v129);
    }
    else {
      uint64_t v130 = 0;
    }
    uint64_t v131 = &v130[32 * v126];
    uint64_t v132 = &v130[32 * v129];
    *(void *)uint64_t v131 = @"Auto Volume High Slope";
    *((void *)v131 + 1) = 0x8000000000000000;
    *((void *)v131 + 2) = 0x40A0000000000000;
    *((void *)v131 + 3) = 0x43F4CCCCDLL;
    uint64_t v125 = v131 + 32;
    uint64_t v134 = (char *)*a1;
    uint64_t v133 = (char *)a1[1];
    if (v133 != *a1)
    {
      do
      {
        long long v135 = *((_OWORD *)v133 - 1);
        *((_OWORD *)v131 - 2) = *((_OWORD *)v133 - 2);
        *((_OWORD *)v131 - 1) = v135;
        v131 -= 32;
        v133 -= 32;
      }
      while (v133 != v134);
      uint64_t v133 = (char *)*a1;
    }
    *a1 = v131;
    a1[1] = v125;
    a1[2] = v132;
    if (v133) {
      operator delete(v133);
    }
  }
  else
  {
    *uint64_t v113 = @"Auto Volume High Slope";
    v113[1] = 0x8000000000000000;
    v113[2] = 0x40A0000000000000;
    v113[3] = 0x43F4CCCCDLL;
    uint64_t v125 = v113 + 4;
  }
  a1[1] = v125;
  unint64_t v136 = (unint64_t)a1[2];
  if ((unint64_t)v125 >= v136)
  {
    uint64_t v138 = ((char *)v125 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v138 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v139 = v136 - (void)*a1;
    uint64_t v140 = v139 >> 4;
    if (v139 >> 4 <= (unint64_t)(v138 + 1)) {
      uint64_t v140 = v138 + 1;
    }
    if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v141 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v141 = v140;
    }
    if (v141) {
      v142 = (char *)sub_1A66F3EC8(v3, v141);
    }
    else {
      v142 = 0;
    }
    uint64_t v143 = &v142[32 * v138];
    uint64_t v144 = &v142[32 * v141];
    *(void *)uint64_t v143 = @"Total Volume Max Gain";
    *((void *)v143 + 1) = 0x800000000000000DLL;
    *((void *)v143 + 2) = 0x41F00000C1200000;
    *((void *)v143 + 3) = 0x440A00000;
    v137 = v143 + 32;
    uint64_t v146 = (char *)*a1;
    v145 = (char *)a1[1];
    if (v145 != *a1)
    {
      do
      {
        long long v147 = *((_OWORD *)v145 - 1);
        *((_OWORD *)v143 - 2) = *((_OWORD *)v145 - 2);
        *((_OWORD *)v143 - 1) = v147;
        v143 -= 32;
        v145 -= 32;
      }
      while (v145 != v146);
      v145 = (char *)*a1;
    }
    *a1 = v143;
    a1[1] = v137;
    a1[2] = v144;
    if (v145) {
      operator delete(v145);
    }
  }
  else
  {
    *uint64_t v125 = @"Total Volume Max Gain";
    v125[1] = 0x800000000000000DLL;
    v125[2] = 0x41F00000C1200000;
    v125[3] = 0x440A00000;
    v137 = v125 + 4;
  }
  a1[1] = v137;
  unint64_t v148 = (unint64_t)a1[2];
  if ((unint64_t)v137 >= v148)
  {
    uint64_t v150 = ((char *)v137 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v150 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v151 = v148 - (void)*a1;
    uint64_t v152 = v151 >> 4;
    if (v151 >> 4 <= (unint64_t)(v150 + 1)) {
      uint64_t v152 = v150 + 1;
    }
    if ((unint64_t)v151 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v153 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v153 = v152;
    }
    if (v153) {
      v154 = (char *)sub_1A66F3EC8(v3, v153);
    }
    else {
      v154 = 0;
    }
    uint64_t v155 = &v154[32 * v150];
    uint64_t v156 = &v154[32 * v153];
    *(void *)uint64_t v155 = @"Auto Volume Gain";
    *((void *)v155 + 1) = 0x80000000000DLL;
    *((void *)v155 + 2) = 0x41F0000000000000;
    *((void *)v155 + 3) = 0x400000000;
    uint64_t v149 = v155 + 32;
    uint64_t v158 = (char *)*a1;
    uint64_t v157 = (char *)a1[1];
    if (v157 != *a1)
    {
      do
      {
        long long v159 = *((_OWORD *)v157 - 1);
        *((_OWORD *)v155 - 2) = *((_OWORD *)v157 - 2);
        *((_OWORD *)v155 - 1) = v159;
        v155 -= 32;
        v157 -= 32;
      }
      while (v157 != v158);
      uint64_t v157 = (char *)*a1;
    }
    *a1 = v155;
    a1[1] = v149;
    a1[2] = v156;
    if (v157) {
      operator delete(v157);
    }
  }
  else
  {
    void *v137 = @"Auto Volume Gain";
    v137[1] = 0x80000000000DLL;
    v137[2] = 0x41F0000000000000;
    v137[3] = 0x400000000;
    uint64_t v149 = v137 + 4;
  }
  a1[1] = v149;
  unint64_t v160 = (unint64_t)a1[2];
  if ((unint64_t)v149 >= v160)
  {
    uint64_t v162 = ((char *)v149 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v162 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v163 = v160 - (void)*a1;
    uint64_t v164 = v163 >> 4;
    if (v163 >> 4 <= (unint64_t)(v162 + 1)) {
      uint64_t v164 = v162 + 1;
    }
    if ((unint64_t)v163 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v165 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v165 = v164;
    }
    if (v165) {
      v166 = (char *)sub_1A66F3EC8(v3, v165);
    }
    else {
      v166 = 0;
    }
    uint64_t v167 = &v166[32 * v162];
    uint64_t v168 = &v166[32 * v165];
    *(void *)uint64_t v167 = @"Bandwidth";
    *((void *)v167 + 1) = 0x8000000000000008;
    *((void *)v167 + 2) = 0x469C400042C80000;
    *((void *)v167 + 3) = 0x3463B8000;
    uint64_t v161 = v167 + 32;
    uint64_t v170 = (char *)*a1;
    uint64_t v169 = (char *)a1[1];
    if (v169 != *a1)
    {
      do
      {
        long long v171 = *((_OWORD *)v169 - 1);
        *((_OWORD *)v167 - 2) = *((_OWORD *)v169 - 2);
        *((_OWORD *)v167 - 1) = v171;
        v167 -= 32;
        v169 -= 32;
      }
      while (v169 != v170);
      uint64_t v169 = (char *)*a1;
    }
    *a1 = v167;
    a1[1] = v161;
    a1[2] = v168;
    if (v169) {
      operator delete(v169);
    }
  }
  else
  {
    *uint64_t v149 = @"Bandwidth";
    v149[1] = 0x8000000000000008;
    v149[2] = 0x469C400042C80000;
    v149[3] = 0x3463B8000;
    uint64_t v161 = v149 + 4;
  }
  a1[1] = v161;
  unint64_t v172 = (unint64_t)a1[2];
  if ((unint64_t)v161 >= v172)
  {
    uint64_t v174 = ((char *)v161 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v174 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v175 = v172 - (void)*a1;
    uint64_t v176 = v175 >> 4;
    if (v175 >> 4 <= (unint64_t)(v174 + 1)) {
      uint64_t v176 = v174 + 1;
    }
    if ((unint64_t)v175 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v177 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v177 = v176;
    }
    if (v177) {
      v178 = (char *)sub_1A66F3EC8(v3, v177);
    }
    else {
      v178 = 0;
    }
    uint64_t v179 = &v178[32 * v174];
    uint64_t v180 = &v178[32 * v177];
    *(void *)uint64_t v179 = @"Regularization High SNR";
    *((void *)v179 + 1) = 0x840000000000000DLL;
    *((void *)v179 + 2) = 0x4248000040A00000;
    *((void *)v179 + 3) = 0x541700000;
    uint64_t v173 = v179 + 32;
    uint64_t v182 = (char *)*a1;
    uint64_t v181 = (char *)a1[1];
    if (v181 != *a1)
    {
      do
      {
        long long v183 = *((_OWORD *)v181 - 1);
        *((_OWORD *)v179 - 2) = *((_OWORD *)v181 - 2);
        *((_OWORD *)v179 - 1) = v183;
        v179 -= 32;
        v181 -= 32;
      }
      while (v181 != v182);
      uint64_t v181 = (char *)*a1;
    }
    *a1 = v179;
    a1[1] = v173;
    a1[2] = v180;
    if (v181) {
      operator delete(v181);
    }
  }
  else
  {
    *uint64_t v161 = @"Regularization High SNR";
    v161[1] = 0x840000000000000DLL;
    v161[2] = 0x4248000040A00000;
    v161[3] = 0x541700000;
    uint64_t v173 = v161 + 4;
  }
  a1[1] = v173;
  unint64_t v184 = (unint64_t)a1[2];
  if ((unint64_t)v173 >= v184)
  {
    uint64_t v186 = ((char *)v173 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v186 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v187 = v184 - (void)*a1;
    uint64_t v188 = v187 >> 4;
    if (v187 >> 4 <= (unint64_t)(v186 + 1)) {
      uint64_t v188 = v186 + 1;
    }
    if ((unint64_t)v187 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v189 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v189 = v188;
    }
    if (v189) {
      uint64_t v190 = (char *)sub_1A66F3EC8(v3, v189);
    }
    else {
      uint64_t v190 = 0;
    }
    uint64_t v191 = &v190[32 * v186];
    v192 = &v190[32 * v189];
    *(void *)uint64_t v191 = @"EQ Min Gain (low freq)";
    *((void *)v191 + 1) = 0x800000000000000DLL;
    *((void *)v191 + 2) = 3248488448;
    *((void *)v191 + 3) = 0x5C0A00000;
    uint64_t v185 = v191 + 32;
    uint64_t v194 = (char *)*a1;
    v193 = (char *)a1[1];
    if (v193 != *a1)
    {
      do
      {
        long long v195 = *((_OWORD *)v193 - 1);
        *((_OWORD *)v191 - 2) = *((_OWORD *)v193 - 2);
        *((_OWORD *)v191 - 1) = v195;
        v191 -= 32;
        v193 -= 32;
      }
      while (v193 != v194);
      v193 = (char *)*a1;
    }
    *a1 = v191;
    a1[1] = v185;
    a1[2] = v192;
    if (v193) {
      operator delete(v193);
    }
  }
  else
  {
    *uint64_t v173 = @"EQ Min Gain (low freq)";
    v173[1] = 0x800000000000000DLL;
    v173[2] = 3248488448;
    v173[3] = 0x5C0A00000;
    uint64_t v185 = v173 + 4;
  }
  a1[1] = v185;
  unint64_t v196 = (unint64_t)a1[2];
  if ((unint64_t)v185 >= v196)
  {
    uint64_t v198 = ((char *)v185 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v198 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v199 = v196 - (void)*a1;
    uint64_t v200 = v199 >> 4;
    if (v199 >> 4 <= (unint64_t)(v198 + 1)) {
      uint64_t v200 = v198 + 1;
    }
    if ((unint64_t)v199 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v201 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v201 = v200;
    }
    if (v201) {
      long long v202 = (char *)sub_1A66F3EC8(v3, v201);
    }
    else {
      long long v202 = 0;
    }
    int v203 = &v202[32 * v198];
    v204 = &v202[32 * v201];
    *(void *)int v203 = @"EQ Max Gain (low freq)";
    *((void *)v203 + 1) = 0x800000000000000DLL;
    *((void *)v203 + 2) = 0x41A0000000000000;
    *((void *)v203 + 3) = 0x541200000;
    uint64_t v197 = v203 + 32;
    v206 = (char *)*a1;
    v205 = (char *)a1[1];
    if (v205 != *a1)
    {
      do
      {
        long long v207 = *((_OWORD *)v205 - 1);
        *((_OWORD *)v203 - 2) = *((_OWORD *)v205 - 2);
        *((_OWORD *)v203 - 1) = v207;
        v203 -= 32;
        v205 -= 32;
      }
      while (v205 != v206);
      v205 = (char *)*a1;
    }
    *a1 = v203;
    a1[1] = v197;
    a1[2] = v204;
    if (v205) {
      operator delete(v205);
    }
  }
  else
  {
    void *v185 = @"EQ Max Gain (low freq)";
    v185[1] = 0x800000000000000DLL;
    v185[2] = 0x41A0000000000000;
    v185[3] = 0x541200000;
    uint64_t v197 = v185 + 4;
  }
  a1[1] = v197;
  unint64_t v208 = (unint64_t)a1[2];
  if ((unint64_t)v197 >= v208)
  {
    uint64_t v210 = ((char *)v197 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v210 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v211 = v208 - (void)*a1;
    uint64_t v212 = v211 >> 4;
    if (v211 >> 4 <= (unint64_t)(v210 + 1)) {
      uint64_t v212 = v210 + 1;
    }
    if ((unint64_t)v211 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v213 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v213 = v212;
    }
    if (v213) {
      v214 = (char *)sub_1A66F3EC8(v3, v213);
    }
    else {
      v214 = 0;
    }
    v215 = &v214[32 * v210];
    v216 = &v214[32 * v213];
    *(void *)v215 = @"Post Auto Volume Signal Power (dBA)";
    *((void *)v215 + 1) = 0x80000000000DLL;
    *((void *)v215 + 2) = 0x4302000000000000;
    *((void *)v215 + 3) = 0x241F00000;
    v209 = v215 + 32;
    v218 = (char *)*a1;
    v217 = (char *)a1[1];
    if (v217 != *a1)
    {
      do
      {
        long long v219 = *((_OWORD *)v217 - 1);
        *((_OWORD *)v215 - 2) = *((_OWORD *)v217 - 2);
        *((_OWORD *)v215 - 1) = v219;
        v215 -= 32;
        v217 -= 32;
      }
      while (v217 != v218);
      v217 = (char *)*a1;
    }
    *a1 = v215;
    a1[1] = v209;
    a1[2] = v216;
    if (v217) {
      operator delete(v217);
    }
  }
  else
  {
    *uint64_t v197 = @"Post Auto Volume Signal Power (dBA)";
    v197[1] = 0x80000000000DLL;
    v197[2] = 0x4302000000000000;
    v197[3] = 0x241F00000;
    v209 = v197 + 4;
  }
  a1[1] = v209;
  unint64_t v220 = (unint64_t)a1[2];
  if ((unint64_t)v209 >= v220)
  {
    uint64_t v222 = ((char *)v209 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v222 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v223 = v220 - (void)*a1;
    uint64_t v224 = v223 >> 4;
    if (v223 >> 4 <= (unint64_t)(v222 + 1)) {
      uint64_t v224 = v222 + 1;
    }
    if ((unint64_t)v223 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v225 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v225 = v224;
    }
    if (v225) {
      v226 = (char *)sub_1A66F3EC8(v3, v225);
    }
    else {
      v226 = 0;
    }
    v227 = &v226[32 * v222];
    v228 = &v226[32 * v225];
    *(void *)v227 = @"Num Iterations to Converge EQ";
    *((void *)v227 + 1) = 0x400800000000000;
    *((void *)v227 + 2) = 0x4348000000000000;
    *((void *)v227 + 3) = 0x500000000;
    v221 = v227 + 32;
    v230 = (char *)*a1;
    v229 = (char *)a1[1];
    if (v229 != *a1)
    {
      do
      {
        long long v231 = *((_OWORD *)v229 - 1);
        *((_OWORD *)v227 - 2) = *((_OWORD *)v229 - 2);
        *((_OWORD *)v227 - 1) = v231;
        v227 -= 32;
        v229 -= 32;
      }
      while (v229 != v230);
      v229 = (char *)*a1;
    }
    *a1 = v227;
    a1[1] = v221;
    a1[2] = v228;
    if (v229) {
      operator delete(v229);
    }
  }
  else
  {
    void *v209 = @"Num Iterations to Converge EQ";
    v209[1] = 0x400800000000000;
    v209[2] = 0x4348000000000000;
    v209[3] = 0x500000000;
    v221 = v209 + 4;
  }
  a1[1] = v221;
  unint64_t v232 = (unint64_t)a1[2];
  if ((unint64_t)v221 >= v232)
  {
    uint64_t v234 = ((char *)v221 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v234 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v235 = v232 - (void)*a1;
    uint64_t v236 = v235 >> 4;
    if (v235 >> 4 <= (unint64_t)(v234 + 1)) {
      uint64_t v236 = v234 + 1;
    }
    if ((unint64_t)v235 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v237 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v237 = v236;
    }
    if (v237) {
      v238 = (char *)sub_1A66F3EC8(v3, v237);
    }
    else {
      v238 = 0;
    }
    v239 = &v238[32 * v234];
    v240 = &v238[32 * v237];
    *(void *)v239 = @"Signal Spectrum";
    *((void *)v239 + 1) = 0x8000000000000001;
    *((void *)v239 + 2) = 0x3F80000000000000;
    *((void *)v239 + 3) = 0x13F800000;
    v233 = v239 + 32;
    v242 = (char *)*a1;
    v241 = (char *)a1[1];
    if (v241 != *a1)
    {
      do
      {
        long long v243 = *((_OWORD *)v241 - 1);
        *((_OWORD *)v239 - 2) = *((_OWORD *)v241 - 2);
        *((_OWORD *)v239 - 1) = v243;
        v239 -= 32;
        v241 -= 32;
      }
      while (v241 != v242);
      v241 = (char *)*a1;
    }
    *a1 = v239;
    a1[1] = v233;
    a1[2] = v240;
    if (v241) {
      operator delete(v241);
    }
  }
  else
  {
    void *v221 = @"Signal Spectrum";
    v221[1] = 0x8000000000000001;
    v221[2] = 0x3F80000000000000;
    v221[3] = 0x13F800000;
    v233 = v221 + 4;
  }
  a1[1] = v233;
  unint64_t v244 = (unint64_t)a1[2];
  if ((unint64_t)v233 >= v244)
  {
    uint64_t v246 = ((char *)v233 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v246 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v247 = v244 - (void)*a1;
    uint64_t v248 = v247 >> 4;
    if (v247 >> 4 <= (unint64_t)(v246 + 1)) {
      uint64_t v248 = v246 + 1;
    }
    if ((unint64_t)v247 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v249 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v249 = v248;
    }
    if (v249) {
      v250 = (char *)sub_1A66F3EC8(v3, v249);
    }
    else {
      v250 = 0;
    }
    v251 = &v250[32 * v246];
    v252 = &v250[32 * v249];
    *(void *)v251 = @"Enable EQ Display (expert mode)";
    *((void *)v251 + 1) = 0x8000000000000002;
    *((void *)v251 + 2) = 0x3F80000000000000;
    *((void *)v251 + 3) = 0x700000000;
    v245 = v251 + 32;
    v254 = (char *)*a1;
    v253 = (char *)a1[1];
    if (v253 != *a1)
    {
      do
      {
        long long v255 = *((_OWORD *)v253 - 1);
        *((_OWORD *)v251 - 2) = *((_OWORD *)v253 - 2);
        *((_OWORD *)v251 - 1) = v255;
        v251 -= 32;
        v253 -= 32;
      }
      while (v253 != v254);
      v253 = (char *)*a1;
    }
    *a1 = v251;
    a1[1] = v245;
    a1[2] = v252;
    if (v253) {
      operator delete(v253);
    }
  }
  else
  {
    void *v233 = @"Enable EQ Display (expert mode)";
    v233[1] = 0x8000000000000002;
    v233[2] = 0x3F80000000000000;
    v233[3] = 0x700000000;
    v245 = v233 + 4;
  }
  a1[1] = v245;
  unint64_t v256 = (unint64_t)a1[2];
  if ((unint64_t)v245 >= v256)
  {
    uint64_t v258 = ((char *)v245 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v258 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v259 = v256 - (void)*a1;
    uint64_t v260 = v259 >> 4;
    if (v259 >> 4 <= (unint64_t)(v258 + 1)) {
      uint64_t v260 = v258 + 1;
    }
    if ((unint64_t)v259 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v261 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v261 = v260;
    }
    if (v261) {
      v262 = (char *)sub_1A66F3EC8(v3, v261);
    }
    else {
      v262 = 0;
    }
    v263 = &v262[32 * v258];
    v264 = &v262[32 * v261];
    *(void *)v263 = @"User Volume Gain";
    *((void *)v263 + 1) = 0x40080000000000DLL;
    *((void *)v263 + 2) = 0x41700000C1F00000;
    *((void *)v263 + 3) = 0x400000000;
    v257 = v263 + 32;
    v266 = (char *)*a1;
    v265 = (char *)a1[1];
    if (v265 != *a1)
    {
      do
      {
        long long v267 = *((_OWORD *)v265 - 1);
        *((_OWORD *)v263 - 2) = *((_OWORD *)v265 - 2);
        *((_OWORD *)v263 - 1) = v267;
        v263 -= 32;
        v265 -= 32;
      }
      while (v265 != v266);
      v265 = (char *)*a1;
    }
    *a1 = v263;
    a1[1] = v257;
    a1[2] = v264;
    if (v265) {
      operator delete(v265);
    }
  }
  else
  {
    void *v245 = @"User Volume Gain";
    v245[1] = 0x40080000000000DLL;
    v245[2] = 0x41700000C1F00000;
    v245[3] = 0x400000000;
    v257 = v245 + 4;
  }
  a1[1] = v257;
  unint64_t v268 = (unint64_t)a1[2];
  if ((unint64_t)v257 >= v268)
  {
    uint64_t v270 = ((char *)v257 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v270 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v271 = v268 - (void)*a1;
    uint64_t v272 = v271 >> 4;
    if (v271 >> 4 <= (unint64_t)(v270 + 1)) {
      uint64_t v272 = v270 + 1;
    }
    if ((unint64_t)v271 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v273 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v273 = v272;
    }
    if (v273) {
      v274 = (char *)sub_1A66F3EC8(v3, v273);
    }
    else {
      v274 = 0;
    }
    v275 = &v274[32 * v270];
    v276 = &v274[32 * v273];
    *(void *)v275 = @"Total Volume Gain";
    *((void *)v275 + 1) = 0x80000000000DLL;
    *((void *)v275 + 2) = 0x41700000C1F00000;
    *((void *)v275 + 3) = 0x400000000;
    v269 = v275 + 32;
    v278 = (char *)*a1;
    v277 = (char *)a1[1];
    if (v277 != *a1)
    {
      do
      {
        long long v279 = *((_OWORD *)v277 - 1);
        *((_OWORD *)v275 - 2) = *((_OWORD *)v277 - 2);
        *((_OWORD *)v275 - 1) = v279;
        v275 -= 32;
        v277 -= 32;
      }
      while (v277 != v278);
      v277 = (char *)*a1;
    }
    *a1 = v275;
    a1[1] = v269;
    a1[2] = v276;
    if (v277) {
      operator delete(v277);
    }
  }
  else
  {
    void *v257 = @"Total Volume Gain";
    v257[1] = 0x80000000000DLL;
    v257[2] = 0x41700000C1F00000;
    v257[3] = 0x400000000;
    v269 = v257 + 4;
  }
  a1[1] = v269;
  unint64_t v280 = (unint64_t)a1[2];
  if ((unint64_t)v269 >= v280)
  {
    uint64_t v282 = ((char *)v269 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v282 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v283 = v280 - (void)*a1;
    uint64_t v284 = v283 >> 4;
    if (v283 >> 4 <= (unint64_t)(v282 + 1)) {
      uint64_t v284 = v282 + 1;
    }
    if ((unint64_t)v283 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v285 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v285 = v284;
    }
    if (v285) {
      v286 = (char *)sub_1A66F3EC8(v3, v285);
    }
    else {
      v286 = 0;
    }
    v287 = &v286[32 * v282];
    v288 = &v286[32 * v285];
    *(void *)v287 = @"EQ Min Gain (high freq)";
    *((void *)v287 + 1) = 0x800000000000000DLL;
    *((void *)v287 + 2) = 3248488448;
    *((void *)v287 + 3) = 0x5C0A00000;
    v281 = v287 + 32;
    v290 = (char *)*a1;
    v289 = (char *)a1[1];
    if (v289 != *a1)
    {
      do
      {
        long long v291 = *((_OWORD *)v289 - 1);
        *((_OWORD *)v287 - 2) = *((_OWORD *)v289 - 2);
        *((_OWORD *)v287 - 1) = v291;
        v287 -= 32;
        v289 -= 32;
      }
      while (v289 != v290);
      v289 = (char *)*a1;
    }
    *a1 = v287;
    a1[1] = v281;
    a1[2] = v288;
    if (v289) {
      operator delete(v289);
    }
  }
  else
  {
    void *v269 = @"EQ Min Gain (high freq)";
    v269[1] = 0x800000000000000DLL;
    v269[2] = 3248488448;
    v269[3] = 0x5C0A00000;
    v281 = v269 + 4;
  }
  a1[1] = v281;
  unint64_t v292 = (unint64_t)a1[2];
  if ((unint64_t)v281 >= v292)
  {
    uint64_t v294 = ((char *)v281 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v294 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v295 = v292 - (void)*a1;
    uint64_t v296 = v295 >> 4;
    if (v295 >> 4 <= (unint64_t)(v294 + 1)) {
      uint64_t v296 = v294 + 1;
    }
    if ((unint64_t)v295 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v297 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v297 = v296;
    }
    if (v297) {
      v298 = (char *)sub_1A66F3EC8(v3, v297);
    }
    else {
      v298 = 0;
    }
    v299 = &v298[32 * v294];
    v300 = &v298[32 * v297];
    *(void *)v299 = @"EQ Max Gain (high freq)";
    *((void *)v299 + 1) = 0x800000000000000DLL;
    *((void *)v299 + 2) = 0x41A0000000000000;
    *((void *)v299 + 3) = 0x541200000;
    v293 = v299 + 32;
    v302 = (char *)*a1;
    v301 = (char *)a1[1];
    if (v301 != *a1)
    {
      do
      {
        long long v303 = *((_OWORD *)v301 - 1);
        *((_OWORD *)v299 - 2) = *((_OWORD *)v301 - 2);
        *((_OWORD *)v299 - 1) = v303;
        v299 -= 32;
        v301 -= 32;
      }
      while (v301 != v302);
      v301 = (char *)*a1;
    }
    *a1 = v299;
    a1[1] = v293;
    a1[2] = v300;
    if (v301) {
      operator delete(v301);
    }
  }
  else
  {
    void *v281 = @"EQ Max Gain (high freq)";
    v281[1] = 0x800000000000000DLL;
    v281[2] = 0x41A0000000000000;
    v281[3] = 0x541200000;
    v293 = v281 + 4;
  }
  a1[1] = v293;
  unint64_t v304 = (unint64_t)a1[2];
  if ((unint64_t)v293 >= v304)
  {
    uint64_t v306 = ((char *)v293 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v306 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v307 = v304 - (void)*a1;
    uint64_t v308 = v307 >> 4;
    if (v307 >> 4 <= (unint64_t)(v306 + 1)) {
      uint64_t v308 = v306 + 1;
    }
    if ((unint64_t)v307 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v309 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v309 = v308;
    }
    if (v309) {
      v310 = (char *)sub_1A66F3EC8(v3, v309);
    }
    else {
      v310 = 0;
    }
    v311 = &v310[32 * v306];
    v312 = &v310[32 * v309];
    *(void *)v311 = @"EQ Frequency Boundary";
    *((void *)v311 + 1) = 0x8000000000000008;
    *((void *)v311 + 2) = 0x469C400042C80000;
    *((void *)v311 + 3) = 0x544480000;
    v305 = v311 + 32;
    v314 = (char *)*a1;
    v313 = (char *)a1[1];
    if (v313 != *a1)
    {
      do
      {
        long long v315 = *((_OWORD *)v313 - 1);
        *((_OWORD *)v311 - 2) = *((_OWORD *)v313 - 2);
        *((_OWORD *)v311 - 1) = v315;
        v311 -= 32;
        v313 -= 32;
      }
      while (v313 != v314);
      v313 = (char *)*a1;
    }
    *a1 = v311;
    a1[1] = v305;
    a1[2] = v312;
    if (v313) {
      operator delete(v313);
    }
  }
  else
  {
    void *v293 = @"EQ Frequency Boundary";
    v293[1] = 0x8000000000000008;
    v293[2] = 0x469C400042C80000;
    v293[3] = 0x544480000;
    v305 = v293 + 4;
  }
  a1[1] = v305;
  unint64_t v316 = (unint64_t)a1[2];
  if ((unint64_t)v305 >= v316)
  {
    uint64_t v318 = ((char *)v305 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v318 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v319 = v316 - (void)*a1;
    uint64_t v320 = v319 >> 4;
    if (v319 >> 4 <= (unint64_t)(v318 + 1)) {
      uint64_t v320 = v318 + 1;
    }
    if ((unint64_t)v319 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v321 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v321 = v320;
    }
    if (v321) {
      v322 = (char *)sub_1A66F3EC8(v3, v321);
    }
    else {
      v322 = 0;
    }
    v323 = &v322[32 * v318];
    v324 = &v322[32 * v321];
    *(void *)v323 = @"EQ Low Noise";
    *((void *)v323 + 1) = 0x800000000000000DLL;
    *((void *)v323 + 2) = 0x42F0000000000000;
    *((void *)v323 + 3) = 0x5425C0000;
    v317 = v323 + 32;
    v326 = (char *)*a1;
    v325 = (char *)a1[1];
    if (v325 != *a1)
    {
      do
      {
        long long v327 = *((_OWORD *)v325 - 1);
        *((_OWORD *)v323 - 2) = *((_OWORD *)v325 - 2);
        *((_OWORD *)v323 - 1) = v327;
        v323 -= 32;
        v325 -= 32;
      }
      while (v325 != v326);
      v325 = (char *)*a1;
    }
    *a1 = v323;
    a1[1] = v317;
    a1[2] = v324;
    if (v325) {
      operator delete(v325);
    }
  }
  else
  {
    void *v305 = @"EQ Low Noise";
    v305[1] = 0x800000000000000DLL;
    v305[2] = 0x42F0000000000000;
    v305[3] = 0x5425C0000;
    v317 = v305 + 4;
  }
  a1[1] = v317;
  unint64_t v328 = (unint64_t)a1[2];
  if ((unint64_t)v317 >= v328)
  {
    uint64_t v330 = ((char *)v317 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v330 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v331 = v328 - (void)*a1;
    uint64_t v332 = v331 >> 4;
    if (v331 >> 4 <= (unint64_t)(v330 + 1)) {
      uint64_t v332 = v330 + 1;
    }
    if ((unint64_t)v331 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v333 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v333 = v332;
    }
    if (v333) {
      v334 = (char *)sub_1A66F3EC8(v3, v333);
    }
    else {
      v334 = 0;
    }
    v335 = &v334[32 * v330];
    v336 = &v334[32 * v333];
    *(void *)v335 = @"Change in Environment";
    *((void *)v335 + 1) = 0x800000000000;
    *((void *)v335 + 2) = 0x3F80000000000000;
    *((void *)v335 + 3) = 0x200000000;
    v329 = v335 + 32;
    v338 = (char *)*a1;
    v337 = (char *)a1[1];
    if (v337 != *a1)
    {
      do
      {
        long long v339 = *((_OWORD *)v337 - 1);
        *((_OWORD *)v335 - 2) = *((_OWORD *)v337 - 2);
        *((_OWORD *)v335 - 1) = v339;
        v335 -= 32;
        v337 -= 32;
      }
      while (v337 != v338);
      v337 = (char *)*a1;
    }
    *a1 = v335;
    a1[1] = v329;
    a1[2] = v336;
    if (v337) {
      operator delete(v337);
    }
  }
  else
  {
    void *v317 = @"Change in Environment";
    v317[1] = 0x800000000000;
    v317[2] = 0x3F80000000000000;
    v317[3] = 0x200000000;
    v329 = v317 + 4;
  }
  a1[1] = v329;
  unint64_t v340 = (unint64_t)a1[2];
  if ((unint64_t)v329 >= v340)
  {
    uint64_t v342 = ((char *)v329 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v342 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v343 = v340 - (void)*a1;
    uint64_t v344 = v343 >> 4;
    if (v343 >> 4 <= (unint64_t)(v342 + 1)) {
      uint64_t v344 = v342 + 1;
    }
    if ((unint64_t)v343 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v345 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v345 = v344;
    }
    if (v345) {
      v346 = (char *)sub_1A66F3EC8(v3, v345);
    }
    else {
      v346 = 0;
    }
    v347 = &v346[32 * v342];
    v348 = &v346[32 * v345];
    *(void *)v347 = @"0.20 kHz";
    *((void *)v347 + 1) = 0x40080000000000DLL;
    *((void *)v347 + 2) = 0x41F00000C1A00000;
    *((void *)v347 + 3) = 0x700000000;
    v341 = v347 + 32;
    v350 = (char *)*a1;
    v349 = (char *)a1[1];
    if (v349 != *a1)
    {
      do
      {
        long long v351 = *((_OWORD *)v349 - 1);
        *((_OWORD *)v347 - 2) = *((_OWORD *)v349 - 2);
        *((_OWORD *)v347 - 1) = v351;
        v347 -= 32;
        v349 -= 32;
      }
      while (v349 != v350);
      v349 = (char *)*a1;
    }
    *a1 = v347;
    a1[1] = v341;
    a1[2] = v348;
    if (v349) {
      operator delete(v349);
    }
  }
  else
  {
    void *v329 = @"0.20 kHz";
    v329[1] = 0x40080000000000DLL;
    v329[2] = 0x41F00000C1A00000;
    v329[3] = 0x700000000;
    v341 = v329 + 4;
  }
  a1[1] = v341;
  unint64_t v352 = (unint64_t)a1[2];
  if ((unint64_t)v341 >= v352)
  {
    uint64_t v354 = ((char *)v341 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v354 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v355 = v352 - (void)*a1;
    uint64_t v356 = v355 >> 4;
    if (v355 >> 4 <= (unint64_t)(v354 + 1)) {
      uint64_t v356 = v354 + 1;
    }
    if ((unint64_t)v355 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v357 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v357 = v356;
    }
    if (v357) {
      v358 = (char *)sub_1A66F3EC8(v3, v357);
    }
    else {
      v358 = 0;
    }
    v359 = &v358[32 * v354];
    v360 = &v358[32 * v357];
    *(void *)v359 = @"0.40 kHz";
    *((void *)v359 + 1) = 0x40080000000000DLL;
    *((void *)v359 + 2) = 0x41F00000C1A00000;
    *((void *)v359 + 3) = 0x700000000;
    v353 = v359 + 32;
    v362 = (char *)*a1;
    v361 = (char *)a1[1];
    if (v361 != *a1)
    {
      do
      {
        long long v363 = *((_OWORD *)v361 - 1);
        *((_OWORD *)v359 - 2) = *((_OWORD *)v361 - 2);
        *((_OWORD *)v359 - 1) = v363;
        v359 -= 32;
        v361 -= 32;
      }
      while (v361 != v362);
      v361 = (char *)*a1;
    }
    *a1 = v359;
    a1[1] = v353;
    a1[2] = v360;
    if (v361) {
      operator delete(v361);
    }
  }
  else
  {
    void *v341 = @"0.40 kHz";
    v341[1] = 0x40080000000000DLL;
    v341[2] = 0x41F00000C1A00000;
    v341[3] = 0x700000000;
    v353 = v341 + 4;
  }
  a1[1] = v353;
  unint64_t v364 = (unint64_t)a1[2];
  if ((unint64_t)v353 >= v364)
  {
    uint64_t v366 = ((char *)v353 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v366 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v367 = v364 - (void)*a1;
    uint64_t v368 = v367 >> 4;
    if (v367 >> 4 <= (unint64_t)(v366 + 1)) {
      uint64_t v368 = v366 + 1;
    }
    if ((unint64_t)v367 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v369 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v369 = v368;
    }
    if (v369) {
      v370 = (char *)sub_1A66F3EC8(v3, v369);
    }
    else {
      v370 = 0;
    }
    v371 = &v370[32 * v366];
    v372 = &v370[32 * v369];
    *(void *)v371 = @"0.80 kHz";
    *((void *)v371 + 1) = 0x40080000000000DLL;
    *((void *)v371 + 2) = 0x41F00000C1A00000;
    *((void *)v371 + 3) = 0x700000000;
    v365 = v371 + 32;
    v374 = (char *)*a1;
    v373 = (char *)a1[1];
    if (v373 != *a1)
    {
      do
      {
        long long v375 = *((_OWORD *)v373 - 1);
        *((_OWORD *)v371 - 2) = *((_OWORD *)v373 - 2);
        *((_OWORD *)v371 - 1) = v375;
        v371 -= 32;
        v373 -= 32;
      }
      while (v373 != v374);
      v373 = (char *)*a1;
    }
    *a1 = v371;
    a1[1] = v365;
    a1[2] = v372;
    if (v373) {
      operator delete(v373);
    }
  }
  else
  {
    void *v353 = @"0.80 kHz";
    v353[1] = 0x40080000000000DLL;
    v353[2] = 0x41F00000C1A00000;
    v353[3] = 0x700000000;
    v365 = v353 + 4;
  }
  a1[1] = v365;
  unint64_t v376 = (unint64_t)a1[2];
  if ((unint64_t)v365 >= v376)
  {
    uint64_t v378 = ((char *)v365 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v378 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v379 = v376 - (void)*a1;
    uint64_t v380 = v379 >> 4;
    if (v379 >> 4 <= (unint64_t)(v378 + 1)) {
      uint64_t v380 = v378 + 1;
    }
    if ((unint64_t)v379 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v381 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v381 = v380;
    }
    if (v381) {
      v382 = (char *)sub_1A66F3EC8(v3, v381);
    }
    else {
      v382 = 0;
    }
    v383 = &v382[32 * v378];
    v384 = &v382[32 * v381];
    *(void *)v383 = @"1.25 kHz";
    *((void *)v383 + 1) = 0x40080000000000DLL;
    *((void *)v383 + 2) = 0x41F00000C1A00000;
    *((void *)v383 + 3) = 0x700000000;
    v377 = v383 + 32;
    v386 = (char *)*a1;
    v385 = (char *)a1[1];
    if (v385 != *a1)
    {
      do
      {
        long long v387 = *((_OWORD *)v385 - 1);
        *((_OWORD *)v383 - 2) = *((_OWORD *)v385 - 2);
        *((_OWORD *)v383 - 1) = v387;
        v383 -= 32;
        v385 -= 32;
      }
      while (v385 != v386);
      v385 = (char *)*a1;
    }
    *a1 = v383;
    a1[1] = v377;
    a1[2] = v384;
    if (v385) {
      operator delete(v385);
    }
  }
  else
  {
    void *v365 = @"1.25 kHz";
    v365[1] = 0x40080000000000DLL;
    v365[2] = 0x41F00000C1A00000;
    v365[3] = 0x700000000;
    v377 = v365 + 4;
  }
  a1[1] = v377;
  unint64_t v388 = (unint64_t)a1[2];
  if ((unint64_t)v377 >= v388)
  {
    uint64_t v390 = ((char *)v377 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v390 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v391 = v388 - (void)*a1;
    uint64_t v392 = v391 >> 4;
    if (v391 >> 4 <= (unint64_t)(v390 + 1)) {
      uint64_t v392 = v390 + 1;
    }
    if ((unint64_t)v391 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v393 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v393 = v392;
    }
    if (v393) {
      v394 = (char *)sub_1A66F3EC8(v3, v393);
    }
    else {
      v394 = 0;
    }
    v395 = &v394[32 * v390];
    v396 = &v394[32 * v393];
    *(void *)v395 = @"1.60 kHz";
    *((void *)v395 + 1) = 0x40080000000000DLL;
    *((void *)v395 + 2) = 0x41F00000C1A00000;
    *((void *)v395 + 3) = 0x700000000;
    v389 = v395 + 32;
    v398 = (char *)*a1;
    v397 = (char *)a1[1];
    if (v397 != *a1)
    {
      do
      {
        long long v399 = *((_OWORD *)v397 - 1);
        *((_OWORD *)v395 - 2) = *((_OWORD *)v397 - 2);
        *((_OWORD *)v395 - 1) = v399;
        v395 -= 32;
        v397 -= 32;
      }
      while (v397 != v398);
      v397 = (char *)*a1;
    }
    *a1 = v395;
    a1[1] = v389;
    a1[2] = v396;
    if (v397) {
      operator delete(v397);
    }
  }
  else
  {
    void *v377 = @"1.60 kHz";
    v377[1] = 0x40080000000000DLL;
    v377[2] = 0x41F00000C1A00000;
    v377[3] = 0x700000000;
    v389 = v377 + 4;
  }
  a1[1] = v389;
  unint64_t v400 = (unint64_t)a1[2];
  if ((unint64_t)v389 >= v400)
  {
    uint64_t v402 = ((char *)v389 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v402 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v403 = v400 - (void)*a1;
    uint64_t v404 = v403 >> 4;
    if (v403 >> 4 <= (unint64_t)(v402 + 1)) {
      uint64_t v404 = v402 + 1;
    }
    if ((unint64_t)v403 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v405 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v405 = v404;
    }
    if (v405) {
      v406 = (char *)sub_1A66F3EC8(v3, v405);
    }
    else {
      v406 = 0;
    }
    v407 = &v406[32 * v402];
    v408 = &v406[32 * v405];
    *(void *)v407 = @"2.00 kHz";
    *((void *)v407 + 1) = 0x40080000000000DLL;
    *((void *)v407 + 2) = 0x41F00000C1A00000;
    *((void *)v407 + 3) = 0x700000000;
    v401 = v407 + 32;
    v410 = (char *)*a1;
    v409 = (char *)a1[1];
    if (v409 != *a1)
    {
      do
      {
        long long v411 = *((_OWORD *)v409 - 1);
        *((_OWORD *)v407 - 2) = *((_OWORD *)v409 - 2);
        *((_OWORD *)v407 - 1) = v411;
        v407 -= 32;
        v409 -= 32;
      }
      while (v409 != v410);
      v409 = (char *)*a1;
    }
    *a1 = v407;
    a1[1] = v401;
    a1[2] = v408;
    if (v409) {
      operator delete(v409);
    }
  }
  else
  {
    void *v389 = @"2.00 kHz";
    v389[1] = 0x40080000000000DLL;
    v389[2] = 0x41F00000C1A00000;
    v389[3] = 0x700000000;
    v401 = v389 + 4;
  }
  a1[1] = v401;
  unint64_t v412 = (unint64_t)a1[2];
  if ((unint64_t)v401 >= v412)
  {
    uint64_t v414 = ((char *)v401 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v414 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v415 = v412 - (void)*a1;
    uint64_t v416 = v415 >> 4;
    if (v415 >> 4 <= (unint64_t)(v414 + 1)) {
      uint64_t v416 = v414 + 1;
    }
    if ((unint64_t)v415 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v417 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v417 = v416;
    }
    if (v417) {
      v418 = (char *)sub_1A66F3EC8(v3, v417);
    }
    else {
      v418 = 0;
    }
    v419 = &v418[32 * v414];
    v420 = &v418[32 * v417];
    *(void *)v419 = @"2.50 kHz";
    *((void *)v419 + 1) = 0x40080000000000DLL;
    *((void *)v419 + 2) = 0x41F00000C1A00000;
    *((void *)v419 + 3) = 0x700000000;
    v413 = v419 + 32;
    v422 = (char *)*a1;
    v421 = (char *)a1[1];
    if (v421 != *a1)
    {
      do
      {
        long long v423 = *((_OWORD *)v421 - 1);
        *((_OWORD *)v419 - 2) = *((_OWORD *)v421 - 2);
        *((_OWORD *)v419 - 1) = v423;
        v419 -= 32;
        v421 -= 32;
      }
      while (v421 != v422);
      v421 = (char *)*a1;
    }
    *a1 = v419;
    a1[1] = v413;
    a1[2] = v420;
    if (v421) {
      operator delete(v421);
    }
  }
  else
  {
    void *v401 = @"2.50 kHz";
    v401[1] = 0x40080000000000DLL;
    v401[2] = 0x41F00000C1A00000;
    v401[3] = 0x700000000;
    v413 = v401 + 4;
  }
  a1[1] = v413;
  unint64_t v424 = (unint64_t)a1[2];
  if ((unint64_t)v413 >= v424)
  {
    uint64_t v426 = ((char *)v413 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v426 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v427 = v424 - (void)*a1;
    uint64_t v428 = v427 >> 4;
    if (v427 >> 4 <= (unint64_t)(v426 + 1)) {
      uint64_t v428 = v426 + 1;
    }
    if ((unint64_t)v427 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v429 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v429 = v428;
    }
    if (v429) {
      v430 = (char *)sub_1A66F3EC8(v3, v429);
    }
    else {
      v430 = 0;
    }
    v431 = &v430[32 * v426];
    v432 = &v430[32 * v429];
    *(void *)v431 = @"3.15 kHz";
    *((void *)v431 + 1) = 0x40080000000000DLL;
    *((void *)v431 + 2) = 0x41F00000C1A00000;
    *((void *)v431 + 3) = 0x700000000;
    v425 = v431 + 32;
    v434 = (char *)*a1;
    v433 = (char *)a1[1];
    if (v433 != *a1)
    {
      do
      {
        long long v435 = *((_OWORD *)v433 - 1);
        *((_OWORD *)v431 - 2) = *((_OWORD *)v433 - 2);
        *((_OWORD *)v431 - 1) = v435;
        v431 -= 32;
        v433 -= 32;
      }
      while (v433 != v434);
      v433 = (char *)*a1;
    }
    *a1 = v431;
    a1[1] = v425;
    a1[2] = v432;
    if (v433) {
      operator delete(v433);
    }
  }
  else
  {
    void *v413 = @"3.15 kHz";
    v413[1] = 0x40080000000000DLL;
    v413[2] = 0x41F00000C1A00000;
    v413[3] = 0x700000000;
    v425 = v413 + 4;
  }
  a1[1] = v425;
  unint64_t v436 = (unint64_t)a1[2];
  if ((unint64_t)v425 >= v436)
  {
    uint64_t v438 = ((char *)v425 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v438 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v439 = v436 - (void)*a1;
    uint64_t v440 = v439 >> 4;
    if (v439 >> 4 <= (unint64_t)(v438 + 1)) {
      uint64_t v440 = v438 + 1;
    }
    if ((unint64_t)v439 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v441 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v441 = v440;
    }
    if (v441) {
      v442 = (char *)sub_1A66F3EC8(v3, v441);
    }
    else {
      v442 = 0;
    }
    v443 = &v442[32 * v438];
    v444 = &v442[32 * v441];
    *(void *)v443 = @"4.00 kHz";
    *((void *)v443 + 1) = 0x40080000000000DLL;
    *((void *)v443 + 2) = 0x41F00000C1A00000;
    *((void *)v443 + 3) = 0x700000000;
    v437 = v443 + 32;
    v446 = (char *)*a1;
    v445 = (char *)a1[1];
    if (v445 != *a1)
    {
      do
      {
        long long v447 = *((_OWORD *)v445 - 1);
        *((_OWORD *)v443 - 2) = *((_OWORD *)v445 - 2);
        *((_OWORD *)v443 - 1) = v447;
        v443 -= 32;
        v445 -= 32;
      }
      while (v445 != v446);
      v445 = (char *)*a1;
    }
    *a1 = v443;
    a1[1] = v437;
    a1[2] = v444;
    if (v445) {
      operator delete(v445);
    }
  }
  else
  {
    void *v425 = @"4.00 kHz";
    v425[1] = 0x40080000000000DLL;
    v425[2] = 0x41F00000C1A00000;
    v425[3] = 0x700000000;
    v437 = v425 + 4;
  }
  a1[1] = v437;
  unint64_t v448 = (unint64_t)a1[2];
  if ((unint64_t)v437 >= v448)
  {
    uint64_t v450 = ((char *)v437 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v450 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v451 = v448 - (void)*a1;
    uint64_t v452 = v451 >> 4;
    if (v451 >> 4 <= (unint64_t)(v450 + 1)) {
      uint64_t v452 = v450 + 1;
    }
    if ((unint64_t)v451 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v453 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v453 = v452;
    }
    if (v453) {
      v454 = (char *)sub_1A66F3EC8(v3, v453);
    }
    else {
      v454 = 0;
    }
    v455 = &v454[32 * v450];
    v456 = &v454[32 * v453];
    *(void *)v455 = @"5.00 kHz";
    *((void *)v455 + 1) = 0x40080000000000DLL;
    *((void *)v455 + 2) = 0x41F00000C1A00000;
    *((void *)v455 + 3) = 0x700000000;
    v449 = v455 + 32;
    v458 = (char *)*a1;
    v457 = (char *)a1[1];
    if (v457 != *a1)
    {
      do
      {
        long long v459 = *((_OWORD *)v457 - 1);
        *((_OWORD *)v455 - 2) = *((_OWORD *)v457 - 2);
        *((_OWORD *)v455 - 1) = v459;
        v455 -= 32;
        v457 -= 32;
      }
      while (v457 != v458);
      v457 = (char *)*a1;
    }
    *a1 = v455;
    a1[1] = v449;
    a1[2] = v456;
    if (v457) {
      operator delete(v457);
    }
  }
  else
  {
    void *v437 = @"5.00 kHz";
    v437[1] = 0x40080000000000DLL;
    v437[2] = 0x41F00000C1A00000;
    v437[3] = 0x700000000;
    v449 = v437 + 4;
  }
  a1[1] = v449;
  unint64_t v460 = (unint64_t)a1[2];
  if ((unint64_t)v449 >= v460)
  {
    uint64_t v462 = ((char *)v449 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v462 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v463 = v460 - (void)*a1;
    uint64_t v464 = v463 >> 4;
    if (v463 >> 4 <= (unint64_t)(v462 + 1)) {
      uint64_t v464 = v462 + 1;
    }
    if ((unint64_t)v463 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v465 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v465 = v464;
    }
    if (v465) {
      v466 = (char *)sub_1A66F3EC8(v3, v465);
    }
    else {
      v466 = 0;
    }
    v467 = &v466[32 * v462];
    v468 = &v466[32 * v465];
    *(void *)v467 = @"6.30 kHz";
    *((void *)v467 + 1) = 0x40080000000000DLL;
    *((void *)v467 + 2) = 0x41F00000C1A00000;
    *((void *)v467 + 3) = 0x700000000;
    v461 = v467 + 32;
    v470 = (char *)*a1;
    v469 = (char *)a1[1];
    if (v469 != *a1)
    {
      do
      {
        long long v471 = *((_OWORD *)v469 - 1);
        *((_OWORD *)v467 - 2) = *((_OWORD *)v469 - 2);
        *((_OWORD *)v467 - 1) = v471;
        v467 -= 32;
        v469 -= 32;
      }
      while (v469 != v470);
      v469 = (char *)*a1;
    }
    *a1 = v467;
    a1[1] = v461;
    a1[2] = v468;
    if (v469) {
      operator delete(v469);
    }
  }
  else
  {
    void *v449 = @"6.30 kHz";
    v449[1] = 0x40080000000000DLL;
    v449[2] = 0x41F00000C1A00000;
    v449[3] = 0x700000000;
    v461 = v449 + 4;
  }
  a1[1] = v461;
  unint64_t v472 = (unint64_t)a1[2];
  if ((unint64_t)v461 >= v472)
  {
    uint64_t v474 = ((char *)v461 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v474 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v475 = v472 - (void)*a1;
    uint64_t v476 = v475 >> 4;
    if (v475 >> 4 <= (unint64_t)(v474 + 1)) {
      uint64_t v476 = v474 + 1;
    }
    if ((unint64_t)v475 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v477 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v477 = v476;
    }
    if (v477) {
      v478 = (char *)sub_1A66F3EC8(v3, v477);
    }
    else {
      v478 = 0;
    }
    v479 = &v478[32 * v474];
    v480 = &v478[32 * v477];
    *(void *)v479 = @"8.00 kHz";
    *((void *)v479 + 1) = 0x40080000000000DLL;
    *((void *)v479 + 2) = 0x41F00000C1A00000;
    *((void *)v479 + 3) = 0x700000000;
    v473 = v479 + 32;
    v482 = (char *)*a1;
    v481 = (char *)a1[1];
    if (v481 != *a1)
    {
      do
      {
        long long v483 = *((_OWORD *)v481 - 1);
        *((_OWORD *)v479 - 2) = *((_OWORD *)v481 - 2);
        *((_OWORD *)v479 - 1) = v483;
        v479 -= 32;
        v481 -= 32;
      }
      while (v481 != v482);
      v481 = (char *)*a1;
    }
    *a1 = v479;
    a1[1] = v473;
    a1[2] = v480;
    if (v481) {
      operator delete(v481);
    }
  }
  else
  {
    void *v461 = @"8.00 kHz";
    v461[1] = 0x40080000000000DLL;
    v461[2] = 0x41F00000C1A00000;
    v461[3] = 0x700000000;
    v473 = v461 + 4;
  }
  a1[1] = v473;
  unint64_t v484 = (unint64_t)a1[2];
  if ((unint64_t)v473 >= v484)
  {
    uint64_t v486 = ((char *)v473 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v486 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v487 = v484 - (void)*a1;
    uint64_t v488 = v487 >> 4;
    if (v487 >> 4 <= (unint64_t)(v486 + 1)) {
      uint64_t v488 = v486 + 1;
    }
    if ((unint64_t)v487 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v489 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v489 = v488;
    }
    if (v489) {
      v490 = (char *)sub_1A66F3EC8(v3, v489);
    }
    else {
      v490 = 0;
    }
    v491 = &v490[32 * v486];
    v492 = &v490[32 * v489];
    *(void *)v491 = @"10.00 kHz";
    *((void *)v491 + 1) = 0x40080000000000DLL;
    *((void *)v491 + 2) = 0x41F00000C1A00000;
    *((void *)v491 + 3) = 0x700000000;
    v485 = v491 + 32;
    v494 = (char *)*a1;
    v493 = (char *)a1[1];
    if (v493 != *a1)
    {
      do
      {
        long long v495 = *((_OWORD *)v493 - 1);
        *((_OWORD *)v491 - 2) = *((_OWORD *)v493 - 2);
        *((_OWORD *)v491 - 1) = v495;
        v491 -= 32;
        v493 -= 32;
      }
      while (v493 != v494);
      v493 = (char *)*a1;
    }
    *a1 = v491;
    a1[1] = v485;
    a1[2] = v492;
    if (v493) {
      operator delete(v493);
    }
  }
  else
  {
    void *v473 = @"10.00 kHz";
    v473[1] = 0x40080000000000DLL;
    v473[2] = 0x41F00000C1A00000;
    v473[3] = 0x700000000;
    v485 = v473 + 4;
  }
  a1[1] = v485;
  unint64_t v496 = (unint64_t)a1[2];
  if ((unint64_t)v485 >= v496)
  {
    uint64_t v498 = ((char *)v485 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v498 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v499 = v496 - (void)*a1;
    uint64_t v500 = v499 >> 4;
    if (v499 >> 4 <= (unint64_t)(v498 + 1)) {
      uint64_t v500 = v498 + 1;
    }
    if ((unint64_t)v499 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v501 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v501 = v500;
    }
    if (v501) {
      v502 = (char *)sub_1A66F3EC8(v3, v501);
    }
    else {
      v502 = 0;
    }
    v503 = &v502[32 * v498];
    v504 = &v502[32 * v501];
    *(void *)v503 = @"12.50 kHz";
    *((void *)v503 + 1) = 0x40080000000000DLL;
    *((void *)v503 + 2) = 0x41F00000C1A00000;
    *((void *)v503 + 3) = 0x700000000;
    v497 = v503 + 32;
    v506 = (char *)*a1;
    v505 = (char *)a1[1];
    if (v505 != *a1)
    {
      do
      {
        long long v507 = *((_OWORD *)v505 - 1);
        *((_OWORD *)v503 - 2) = *((_OWORD *)v505 - 2);
        *((_OWORD *)v503 - 1) = v507;
        v503 -= 32;
        v505 -= 32;
      }
      while (v505 != v506);
      v505 = (char *)*a1;
    }
    *a1 = v503;
    a1[1] = v497;
    a1[2] = v504;
    if (v505) {
      operator delete(v505);
    }
  }
  else
  {
    void *v485 = @"12.50 kHz";
    v485[1] = 0x40080000000000DLL;
    v485[2] = 0x41F00000C1A00000;
    v485[3] = 0x700000000;
    v497 = v485 + 4;
  }
  a1[1] = v497;
  unint64_t v508 = (unint64_t)a1[2];
  if ((unint64_t)v497 >= v508)
  {
    uint64_t v510 = ((char *)v497 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v510 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v511 = v508 - (void)*a1;
    uint64_t v512 = v511 >> 4;
    if (v511 >> 4 <= (unint64_t)(v510 + 1)) {
      uint64_t v512 = v510 + 1;
    }
    if ((unint64_t)v511 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v513 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v513 = v512;
    }
    if (v513) {
      v514 = (char *)sub_1A66F3EC8(v3, v513);
    }
    else {
      v514 = 0;
    }
    v515 = &v514[32 * v510];
    v516 = &v514[32 * v513];
    *(void *)v515 = @"16.00 kHz";
    *((void *)v515 + 1) = 0x40080000000000DLL;
    *((void *)v515 + 2) = 0x41F00000C1A00000;
    *((void *)v515 + 3) = 0x700000000;
    v509 = v515 + 32;
    v518 = (char *)*a1;
    v517 = (char *)a1[1];
    if (v517 != *a1)
    {
      do
      {
        long long v519 = *((_OWORD *)v517 - 1);
        *((_OWORD *)v515 - 2) = *((_OWORD *)v517 - 2);
        *((_OWORD *)v515 - 1) = v519;
        v515 -= 32;
        v517 -= 32;
      }
      while (v517 != v518);
      v517 = (char *)*a1;
    }
    *a1 = v515;
    a1[1] = v509;
    a1[2] = v516;
    if (v517) {
      operator delete(v517);
    }
  }
  else
  {
    void *v497 = @"16.00 kHz";
    v497[1] = 0x40080000000000DLL;
    v497[2] = 0x41F00000C1A00000;
    v497[3] = 0x700000000;
    v509 = v497 + 4;
  }
  a1[1] = v509;
  unint64_t v520 = (unint64_t)a1[2];
  if ((unint64_t)v509 >= v520)
  {
    uint64_t v522 = ((char *)v509 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v522 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v523 = v520 - (void)*a1;
    uint64_t v524 = v523 >> 4;
    if (v523 >> 4 <= (unint64_t)(v522 + 1)) {
      uint64_t v524 = v522 + 1;
    }
    if ((unint64_t)v523 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v525 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v525 = v524;
    }
    if (v525) {
      v526 = (char *)sub_1A66F3EC8(v3, v525);
    }
    else {
      v526 = 0;
    }
    v527 = &v526[32 * v522];
    v528 = &v526[32 * v525];
    *(void *)v527 = @"20.00 kHz";
    *((void *)v527 + 1) = 0x40080000000000DLL;
    *((void *)v527 + 2) = 0x41F00000C1A00000;
    *((void *)v527 + 3) = 0x700000000;
    v521 = v527 + 32;
    v530 = (char *)*a1;
    v529 = (char *)a1[1];
    if (v529 != *a1)
    {
      do
      {
        long long v531 = *((_OWORD *)v529 - 1);
        *((_OWORD *)v527 - 2) = *((_OWORD *)v529 - 2);
        *((_OWORD *)v527 - 1) = v531;
        v527 -= 32;
        v529 -= 32;
      }
      while (v529 != v530);
      v529 = (char *)*a1;
    }
    *a1 = v527;
    a1[1] = v521;
    a1[2] = v528;
    if (v529) {
      operator delete(v529);
    }
  }
  else
  {
    void *v509 = @"20.00 kHz";
    v509[1] = 0x40080000000000DLL;
    v509[2] = 0x41F00000C1A00000;
    v509[3] = 0x700000000;
    v521 = v509 + 4;
  }
  a1[1] = v521;
  unint64_t v532 = (unint64_t)a1[2];
  if ((unint64_t)v521 >= v532)
  {
    uint64_t v534 = ((char *)v521 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v534 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v535 = v532 - (void)*a1;
    uint64_t v536 = v535 >> 4;
    if (v535 >> 4 <= (unint64_t)(v534 + 1)) {
      uint64_t v536 = v534 + 1;
    }
    if ((unint64_t)v535 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v537 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v537 = v536;
    }
    if (v537) {
      v538 = (char *)sub_1A66F3EC8(v3, v537);
    }
    else {
      v538 = 0;
    }
    v539 = &v538[32 * v534];
    v540 = &v538[32 * v537];
    *(void *)v539 = @"EQ Slew Rate (dB/s)";
    *((void *)v539 + 1) = 0x8400000000000000;
    *((void *)v539 + 2) = 0x4170000000000000;
    *((void *)v539 + 3) = 0x540400000;
    v533 = v539 + 32;
    v542 = (char *)*a1;
    v541 = (char *)a1[1];
    if (v541 != *a1)
    {
      do
      {
        long long v543 = *((_OWORD *)v541 - 1);
        *((_OWORD *)v539 - 2) = *((_OWORD *)v541 - 2);
        *((_OWORD *)v539 - 1) = v543;
        v539 -= 32;
        v541 -= 32;
      }
      while (v541 != v542);
      v541 = (char *)*a1;
    }
    *a1 = v539;
    a1[1] = v533;
    a1[2] = v540;
    if (v541) {
      operator delete(v541);
    }
  }
  else
  {
    void *v521 = @"EQ Slew Rate (dB/s)";
    v521[1] = 0x8400000000000000;
    v521[2] = 0x4170000000000000;
    v521[3] = 0x540400000;
    v533 = v521 + 4;
  }
  a1[1] = v533;
  unint64_t v544 = (unint64_t)a1[2];
  if ((unint64_t)v533 >= v544)
  {
    uint64_t v546 = ((char *)v533 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v546 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v547 = v544 - (void)*a1;
    uint64_t v548 = v547 >> 4;
    if (v547 >> 4 <= (unint64_t)(v546 + 1)) {
      uint64_t v548 = v546 + 1;
    }
    if ((unint64_t)v547 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v549 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v549 = v548;
    }
    if (v549) {
      v550 = (char *)sub_1A66F3EC8(v3, v549);
    }
    else {
      v550 = 0;
    }
    v551 = &v550[32 * v546];
    v552 = &v550[32 * v549];
    *(void *)v551 = @"Noise Slew Rate (dB/s)";
    *((void *)v551 + 1) = 0x8400000000000000;
    *((void *)v551 + 2) = 0x4170000000000000;
    *((void *)v551 + 3) = 0x340A00000;
    v545 = v551 + 32;
    v554 = (char *)*a1;
    v553 = (char *)a1[1];
    if (v553 != *a1)
    {
      do
      {
        long long v555 = *((_OWORD *)v553 - 1);
        *((_OWORD *)v551 - 2) = *((_OWORD *)v553 - 2);
        *((_OWORD *)v551 - 1) = v555;
        v551 -= 32;
        v553 -= 32;
      }
      while (v553 != v554);
      v553 = (char *)*a1;
    }
    *a1 = v551;
    a1[1] = v545;
    a1[2] = v552;
    if (v553) {
      operator delete(v553);
    }
  }
  else
  {
    void *v533 = @"Noise Slew Rate (dB/s)";
    v533[1] = 0x8400000000000000;
    v533[2] = 0x4170000000000000;
    v533[3] = 0x340A00000;
    v545 = v533 + 4;
  }
  a1[1] = v545;
  unint64_t v556 = (unint64_t)a1[2];
  if ((unint64_t)v545 >= v556)
  {
    uint64_t v558 = ((char *)v545 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v558 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v559 = v556 - (void)*a1;
    uint64_t v560 = v559 >> 4;
    if (v559 >> 4 <= (unint64_t)(v558 + 1)) {
      uint64_t v560 = v558 + 1;
    }
    if ((unint64_t)v559 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v561 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v561 = v560;
    }
    if (v561) {
      v562 = (char *)sub_1A66F3EC8(v3, v561);
    }
    else {
      v562 = 0;
    }
    v563 = &v562[32 * v558];
    v564 = &v562[32 * v561];
    *(void *)v563 = @"Auto Volume Slew Rate (dB/s)";
    *((void *)v563 + 1) = 0x8400000000000000;
    *((void *)v563 + 2) = 0x41F0000000000000;
    *((void *)v563 + 3) = 0x440A00000;
    v557 = v563 + 32;
    v566 = (char *)*a1;
    v565 = (char *)a1[1];
    if (v565 != *a1)
    {
      do
      {
        long long v567 = *((_OWORD *)v565 - 1);
        *((_OWORD *)v563 - 2) = *((_OWORD *)v565 - 2);
        *((_OWORD *)v563 - 1) = v567;
        v563 -= 32;
        v565 -= 32;
      }
      while (v565 != v566);
      v565 = (char *)*a1;
    }
    *a1 = v563;
    a1[1] = v557;
    a1[2] = v564;
    if (v565) {
      operator delete(v565);
    }
  }
  else
  {
    void *v545 = @"Auto Volume Slew Rate (dB/s)";
    v545[1] = 0x8400000000000000;
    v545[2] = 0x41F0000000000000;
    v545[3] = 0x440A00000;
    v557 = v545 + 4;
  }
  a1[1] = v557;
  unint64_t v568 = (unint64_t)a1[2];
  if ((unint64_t)v557 >= v568)
  {
    uint64_t v570 = ((char *)v557 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v570 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v571 = v568 - (void)*a1;
    uint64_t v572 = v571 >> 4;
    if (v571 >> 4 <= (unint64_t)(v570 + 1)) {
      uint64_t v572 = v570 + 1;
    }
    if ((unint64_t)v571 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v573 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v573 = v572;
    }
    if (v573) {
      v574 = (char *)sub_1A66F3EC8(v3, v573);
    }
    else {
      v574 = 0;
    }
    v575 = &v574[32 * v570];
    v576 = &v574[32 * v573];
    *(void *)v575 = @"Near-End Speech Presence";
    *((void *)v575 + 1) = 0x400800000000000;
    *((void *)v575 + 2) = 0x3F80000000000000;
    *((void *)v575 + 3) = 0x200000000;
    v569 = v575 + 32;
    v578 = (char *)*a1;
    v577 = (char *)a1[1];
    if (v577 != *a1)
    {
      do
      {
        long long v579 = *((_OWORD *)v577 - 1);
        *((_OWORD *)v575 - 2) = *((_OWORD *)v577 - 2);
        *((_OWORD *)v575 - 1) = v579;
        v575 -= 32;
        v577 -= 32;
      }
      while (v577 != v578);
      v577 = (char *)*a1;
    }
    *a1 = v575;
    a1[1] = v569;
    a1[2] = v576;
    if (v577) {
      operator delete(v577);
    }
  }
  else
  {
    void *v557 = @"Near-End Speech Presence";
    v557[1] = 0x400800000000000;
    v557[2] = 0x3F80000000000000;
    v557[3] = 0x200000000;
    v569 = v557 + 4;
  }
  a1[1] = v569;
  unint64_t v580 = (unint64_t)a1[2];
  if ((unint64_t)v569 >= v580)
  {
    uint64_t v582 = ((char *)v569 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v582 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v583 = v580 - (void)*a1;
    uint64_t v584 = v583 >> 4;
    if (v583 >> 4 <= (unint64_t)(v582 + 1)) {
      uint64_t v584 = v582 + 1;
    }
    if ((unint64_t)v583 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v585 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v585 = v584;
    }
    if (v585) {
      v586 = (char *)sub_1A66F3EC8(v3, v585);
    }
    else {
      v586 = 0;
    }
    v587 = &v586[32 * v582];
    v588 = &v586[32 * v585];
    *(void *)v587 = @"Near-End SPP Threshold";
    *((void *)v587 + 1) = 0x8400000000000000;
    *((void *)v587 + 2) = 0x3F80000000000000;
    *((void *)v587 + 3) = 0x23E800000;
    v581 = v587 + 32;
    v590 = (char *)*a1;
    v589 = (char *)a1[1];
    if (v589 != *a1)
    {
      do
      {
        long long v591 = *((_OWORD *)v589 - 1);
        *((_OWORD *)v587 - 2) = *((_OWORD *)v589 - 2);
        *((_OWORD *)v587 - 1) = v591;
        v587 -= 32;
        v589 -= 32;
      }
      while (v589 != v590);
      v589 = (char *)*a1;
    }
    *a1 = v587;
    a1[1] = v581;
    a1[2] = v588;
    if (v589) {
      operator delete(v589);
    }
  }
  else
  {
    void *v569 = @"Near-End SPP Threshold";
    v569[1] = 0x8400000000000000;
    v569[2] = 0x3F80000000000000;
    v569[3] = 0x23E800000;
    v581 = v569 + 4;
  }
  a1[1] = v581;
  unint64_t v592 = (unint64_t)a1[2];
  if ((unint64_t)v581 >= v592)
  {
    uint64_t v594 = ((char *)v581 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v594 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v595 = v592 - (void)*a1;
    uint64_t v596 = v595 >> 4;
    if (v595 >> 4 <= (unint64_t)(v594 + 1)) {
      uint64_t v596 = v594 + 1;
    }
    if ((unint64_t)v595 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v597 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v597 = v596;
    }
    if (v597) {
      v598 = (char *)sub_1A66F3EC8(v3, v597);
    }
    else {
      v598 = 0;
    }
    v599 = &v598[32 * v594];
    v600 = &v598[32 * v597];
    *(void *)v599 = @"Enhancement Algorithm";
    *((void *)v599 + 1) = 0x8000000000000001;
    *((void *)v599 + 2) = 0x4000000000000000;
    *((void *)v599 + 3) = 0x13F800000;
    v593 = v599 + 32;
    v602 = (char *)*a1;
    v601 = (char *)a1[1];
    if (v601 != *a1)
    {
      do
      {
        long long v603 = *((_OWORD *)v601 - 1);
        *((_OWORD *)v599 - 2) = *((_OWORD *)v601 - 2);
        *((_OWORD *)v599 - 1) = v603;
        v599 -= 32;
        v601 -= 32;
      }
      while (v601 != v602);
      v601 = (char *)*a1;
    }
    *a1 = v599;
    a1[1] = v593;
    a1[2] = v600;
    if (v601) {
      operator delete(v601);
    }
  }
  else
  {
    void *v581 = @"Enhancement Algorithm";
    v581[1] = 0x8000000000000001;
    v581[2] = 0x4000000000000000;
    v581[3] = 0x13F800000;
    v593 = v581 + 4;
  }
  a1[1] = v593;
  unint64_t v604 = (unint64_t)a1[2];
  if ((unint64_t)v593 >= v604)
  {
    uint64_t v606 = ((char *)v593 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v606 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v607 = v604 - (void)*a1;
    uint64_t v608 = v607 >> 4;
    if (v607 >> 4 <= (unint64_t)(v606 + 1)) {
      uint64_t v608 = v606 + 1;
    }
    if ((unint64_t)v607 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v609 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v609 = v608;
    }
    if (v609) {
      v610 = (char *)sub_1A66F3EC8(v3, v609);
    }
    else {
      v610 = 0;
    }
    v611 = &v610[32 * v606];
    v612 = &v610[32 * v609];
    *(void *)v611 = @"Auto Volume";
    *((void *)v611 + 1) = 0x8000000000000001;
    *((void *)v611 + 2) = 0x3F80000000000000;
    *((void *)v611 + 3) = 0x100000000;
    v605 = v611 + 32;
    v614 = (char *)*a1;
    v613 = (char *)a1[1];
    if (v613 != *a1)
    {
      do
      {
        long long v615 = *((_OWORD *)v613 - 1);
        *((_OWORD *)v611 - 2) = *((_OWORD *)v613 - 2);
        *((_OWORD *)v611 - 1) = v615;
        v611 -= 32;
        v613 -= 32;
      }
      while (v613 != v614);
      v613 = (char *)*a1;
    }
    *a1 = v611;
    a1[1] = v605;
    a1[2] = v612;
    if (v613) {
      operator delete(v613);
    }
  }
  else
  {
    void *v593 = @"Auto Volume";
    v593[1] = 0x8000000000000001;
    v593[2] = 0x3F80000000000000;
    v593[3] = 0x100000000;
    v605 = v593 + 4;
  }
  a1[1] = v605;
  unint64_t v616 = (unint64_t)a1[2];
  if ((unint64_t)v605 >= v616)
  {
    uint64_t v618 = ((char *)v605 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v618 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v619 = v616 - (void)*a1;
    uint64_t v620 = v619 >> 4;
    if (v619 >> 4 <= (unint64_t)(v618 + 1)) {
      uint64_t v620 = v618 + 1;
    }
    if ((unint64_t)v619 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v621 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v621 = v620;
    }
    if (v621) {
      v622 = (char *)sub_1A66F3EC8(v3, v621);
    }
    else {
      v622 = 0;
    }
    v623 = &v622[32 * v618];
    v624 = &v622[32 * v621];
    *(void *)v623 = @"DRC Naturalness";
    *((void *)v623 + 1) = 0x8000000000000000;
    *((void *)v623 + 2) = 0x3F8000003F000000;
    *((void *)v623 + 3) = 0x63F4CCCCDLL;
    v617 = v623 + 32;
    v626 = (char *)*a1;
    v625 = (char *)a1[1];
    if (v625 != *a1)
    {
      do
      {
        long long v627 = *((_OWORD *)v625 - 1);
        *((_OWORD *)v623 - 2) = *((_OWORD *)v625 - 2);
        *((_OWORD *)v623 - 1) = v627;
        v623 -= 32;
        v625 -= 32;
      }
      while (v625 != v626);
      v625 = (char *)*a1;
    }
    *a1 = v623;
    a1[1] = v617;
    a1[2] = v624;
    if (v625) {
      operator delete(v625);
    }
  }
  else
  {
    void *v605 = @"DRC Naturalness";
    v605[1] = 0x8000000000000000;
    v605[2] = 0x3F8000003F000000;
    v605[3] = 0x63F4CCCCDLL;
    v617 = v605 + 4;
  }
  a1[1] = v617;
  unint64_t v628 = (unint64_t)a1[2];
  if ((unint64_t)v617 >= v628)
  {
    uint64_t v630 = ((char *)v617 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v630 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v631 = v628 - (void)*a1;
    uint64_t v632 = v631 >> 4;
    if (v631 >> 4 <= (unint64_t)(v630 + 1)) {
      uint64_t v632 = v630 + 1;
    }
    if ((unint64_t)v631 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v633 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v633 = v632;
    }
    if (v633) {
      v634 = (char *)sub_1A66F3EC8(v3, v633);
    }
    else {
      v634 = 0;
    }
    v635 = &v634[32 * v630];
    v636 = &v634[32 * v633];
    *(void *)v635 = @"DRC Min Threshold Offset (dB)";
    *((void *)v635 + 1) = 0x800000000000000DLL;
    *((void *)v635 + 2) = 0x41F0000000000000;
    *((void *)v635 + 3) = 0x640400000;
    v629 = v635 + 32;
    v638 = (char *)*a1;
    v637 = (char *)a1[1];
    if (v637 != *a1)
    {
      do
      {
        long long v639 = *((_OWORD *)v637 - 1);
        *((_OWORD *)v635 - 2) = *((_OWORD *)v637 - 2);
        *((_OWORD *)v635 - 1) = v639;
        v635 -= 32;
        v637 -= 32;
      }
      while (v637 != v638);
      v637 = (char *)*a1;
    }
    *a1 = v635;
    a1[1] = v629;
    a1[2] = v636;
    if (v637) {
      operator delete(v637);
    }
  }
  else
  {
    void *v617 = @"DRC Min Threshold Offset (dB)";
    v617[1] = 0x800000000000000DLL;
    v617[2] = 0x41F0000000000000;
    v617[3] = 0x640400000;
    v629 = v617 + 4;
  }
  a1[1] = v629;
  unint64_t v640 = (unint64_t)a1[2];
  if ((unint64_t)v629 >= v640)
  {
    uint64_t v642 = ((char *)v629 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v642 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v643 = v640 - (void)*a1;
    uint64_t v644 = v643 >> 4;
    if (v643 >> 4 <= (unint64_t)(v642 + 1)) {
      uint64_t v644 = v642 + 1;
    }
    if ((unint64_t)v643 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v645 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v645 = v644;
    }
    if (v645) {
      v646 = (char *)sub_1A66F3EC8(v3, v645);
    }
    else {
      v646 = 0;
    }
    v647 = &v646[32 * v642];
    v648 = &v646[32 * v645];
    *(void *)v647 = @"DRC Band Importance Adjustment (L)";
    *((void *)v647 + 1) = 0x8000000000000000;
    *((void *)v647 + 2) = 0x3F8000003DCCCCCDLL;
    *((void *)v647 + 3) = 0x63F000000;
    v641 = v647 + 32;
    v650 = (char *)*a1;
    v649 = (char *)a1[1];
    if (v649 != *a1)
    {
      do
      {
        long long v651 = *((_OWORD *)v649 - 1);
        *((_OWORD *)v647 - 2) = *((_OWORD *)v649 - 2);
        *((_OWORD *)v647 - 1) = v651;
        v647 -= 32;
        v649 -= 32;
      }
      while (v649 != v650);
      v649 = (char *)*a1;
    }
    *a1 = v647;
    a1[1] = v641;
    a1[2] = v648;
    if (v649) {
      operator delete(v649);
    }
  }
  else
  {
    void *v629 = @"DRC Band Importance Adjustment (L)";
    v629[1] = 0x8000000000000000;
    v629[2] = 0x3F8000003DCCCCCDLL;
    v629[3] = 0x63F000000;
    v641 = v629 + 4;
  }
  a1[1] = v641;
  unint64_t v652 = (unint64_t)a1[2];
  if ((unint64_t)v641 >= v652)
  {
    uint64_t v654 = ((char *)v641 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v654 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v655 = v652 - (void)*a1;
    uint64_t v656 = v655 >> 4;
    if (v655 >> 4 <= (unint64_t)(v654 + 1)) {
      uint64_t v656 = v654 + 1;
    }
    if ((unint64_t)v655 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v657 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v657 = v656;
    }
    if (v657) {
      v658 = (char *)sub_1A66F3EC8(v3, v657);
    }
    else {
      v658 = 0;
    }
    v659 = &v658[32 * v654];
    v660 = &v658[32 * v657];
    *(void *)v659 = @"DRC Band Importance Adjustment (MH)";
    *((void *)v659 + 1) = 0x8000000000000000;
    *((void *)v659 + 2) = 0x3F8000003DCCCCCDLL;
    *((void *)v659 + 3) = 0x63F800000;
    v653 = v659 + 32;
    v662 = (char *)*a1;
    v661 = (char *)a1[1];
    if (v661 != *a1)
    {
      do
      {
        long long v663 = *((_OWORD *)v661 - 1);
        *((_OWORD *)v659 - 2) = *((_OWORD *)v661 - 2);
        *((_OWORD *)v659 - 1) = v663;
        v659 -= 32;
        v661 -= 32;
      }
      while (v661 != v662);
      v661 = (char *)*a1;
    }
    *a1 = v659;
    a1[1] = v653;
    a1[2] = v660;
    if (v661) {
      operator delete(v661);
    }
  }
  else
  {
    void *v641 = @"DRC Band Importance Adjustment (MH)";
    v641[1] = 0x8000000000000000;
    v641[2] = 0x3F8000003DCCCCCDLL;
    v641[3] = 0x63F800000;
    v653 = v641 + 4;
  }
  a1[1] = v653;
  unint64_t v664 = (unint64_t)a1[2];
  if ((unint64_t)v653 >= v664)
  {
    uint64_t v666 = ((char *)v653 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v666 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v667 = v664 - (void)*a1;
    uint64_t v668 = v667 >> 4;
    if (v667 >> 4 <= (unint64_t)(v666 + 1)) {
      uint64_t v668 = v666 + 1;
    }
    if ((unint64_t)v667 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v669 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v669 = v668;
    }
    if (v669) {
      v670 = (char *)sub_1A66F3EC8(v3, v669);
    }
    else {
      v670 = 0;
    }
    v671 = &v670[32 * v666];
    v672 = &v670[32 * v669];
    *(void *)v671 = @"DRC Slope Adjustment";
    *((void *)v671 + 1) = 0x8000000000000000;
    *((void *)v671 + 2) = 0x404000003F800000;
    *((void *)v671 + 3) = 0x640200000;
    v665 = v671 + 32;
    v674 = (char *)*a1;
    v673 = (char *)a1[1];
    if (v673 != *a1)
    {
      do
      {
        long long v675 = *((_OWORD *)v673 - 1);
        *((_OWORD *)v671 - 2) = *((_OWORD *)v673 - 2);
        *((_OWORD *)v671 - 1) = v675;
        v671 -= 32;
        v673 -= 32;
      }
      while (v673 != v674);
      v673 = (char *)*a1;
    }
    *a1 = v671;
    a1[1] = v665;
    a1[2] = v672;
    if (v673) {
      operator delete(v673);
    }
  }
  else
  {
    void *v653 = @"DRC Slope Adjustment";
    v653[1] = 0x8000000000000000;
    v653[2] = 0x404000003F800000;
    v653[3] = 0x640200000;
    v665 = v653 + 4;
  }
  a1[1] = v665;
  unint64_t v676 = (unint64_t)a1[2];
  if ((unint64_t)v665 >= v676)
  {
    uint64_t v678 = ((char *)v665 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v678 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v679 = v676 - (void)*a1;
    uint64_t v680 = v679 >> 4;
    if (v679 >> 4 <= (unint64_t)(v678 + 1)) {
      uint64_t v680 = v678 + 1;
    }
    if ((unint64_t)v679 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v681 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v681 = v680;
    }
    if (v681) {
      v682 = (char *)sub_1A66F3EC8(v3, v681);
    }
    else {
      v682 = 0;
    }
    v683 = &v682[32 * v678];
    v684 = &v682[32 * v681];
    *(void *)v683 = @"DRC Min Gain (low freq)";
    *((void *)v683 + 1) = 0x800000000000000DLL;
    *((void *)v683 + 2) = 3253731328;
    *((void *)v683 + 3) = 0x6C1A00000;
    v677 = v683 + 32;
    v686 = (char *)*a1;
    v685 = (char *)a1[1];
    if (v685 != *a1)
    {
      do
      {
        long long v687 = *((_OWORD *)v685 - 1);
        *((_OWORD *)v683 - 2) = *((_OWORD *)v685 - 2);
        *((_OWORD *)v683 - 1) = v687;
        v683 -= 32;
        v685 -= 32;
      }
      while (v685 != v686);
      v685 = (char *)*a1;
    }
    *a1 = v683;
    a1[1] = v677;
    a1[2] = v684;
    if (v685) {
      operator delete(v685);
    }
  }
  else
  {
    void *v665 = @"DRC Min Gain (low freq)";
    v665[1] = 0x800000000000000DLL;
    v665[2] = 3253731328;
    v665[3] = 0x6C1A00000;
    v677 = v665 + 4;
  }
  a1[1] = v677;
  unint64_t v688 = (unint64_t)a1[2];
  if ((unint64_t)v677 >= v688)
  {
    uint64_t v690 = ((char *)v677 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v690 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v691 = v688 - (void)*a1;
    uint64_t v692 = v691 >> 4;
    if (v691 >> 4 <= (unint64_t)(v690 + 1)) {
      uint64_t v692 = v690 + 1;
    }
    if ((unint64_t)v691 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v693 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v693 = v692;
    }
    if (v693) {
      v694 = (char *)sub_1A66F3EC8(v3, v693);
    }
    else {
      v694 = 0;
    }
    v695 = &v694[32 * v690];
    v696 = &v694[32 * v693];
    *(void *)v695 = @"DRC Max Gain (low freq)";
    *((void *)v695 + 1) = 0x800000000000000DLL;
    *((void *)v695 + 2) = 0x41F0000000000000;
    *((void *)v695 + 3) = 0x641700000;
    v689 = v695 + 32;
    v698 = (char *)*a1;
    v697 = (char *)a1[1];
    if (v697 != *a1)
    {
      do
      {
        long long v699 = *((_OWORD *)v697 - 1);
        *((_OWORD *)v695 - 2) = *((_OWORD *)v697 - 2);
        *((_OWORD *)v695 - 1) = v699;
        v695 -= 32;
        v697 -= 32;
      }
      while (v697 != v698);
      v697 = (char *)*a1;
    }
    *a1 = v695;
    a1[1] = v689;
    a1[2] = v696;
    if (v697) {
      operator delete(v697);
    }
  }
  else
  {
    void *v677 = @"DRC Max Gain (low freq)";
    v677[1] = 0x800000000000000DLL;
    v677[2] = 0x41F0000000000000;
    v677[3] = 0x641700000;
    v689 = v677 + 4;
  }
  a1[1] = v689;
  unint64_t v700 = (unint64_t)a1[2];
  if ((unint64_t)v689 >= v700)
  {
    uint64_t v702 = ((char *)v689 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v702 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v703 = v700 - (void)*a1;
    uint64_t v704 = v703 >> 4;
    if (v703 >> 4 <= (unint64_t)(v702 + 1)) {
      uint64_t v704 = v702 + 1;
    }
    if ((unint64_t)v703 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v705 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v705 = v704;
    }
    if (v705) {
      v706 = (char *)sub_1A66F3EC8(v3, v705);
    }
    else {
      v706 = 0;
    }
    v707 = &v706[32 * v702];
    v708 = &v706[32 * v705];
    *(void *)v707 = @"DRC Min Gain (high freq)";
    *((void *)v707 + 1) = 0x800000000000000DLL;
    *((void *)v707 + 2) = 3253731328;
    *((void *)v707 + 3) = 0x6C1700000;
    v701 = v707 + 32;
    v710 = (char *)*a1;
    v709 = (char *)a1[1];
    if (v709 != *a1)
    {
      do
      {
        long long v711 = *((_OWORD *)v709 - 1);
        *((_OWORD *)v707 - 2) = *((_OWORD *)v709 - 2);
        *((_OWORD *)v707 - 1) = v711;
        v707 -= 32;
        v709 -= 32;
      }
      while (v709 != v710);
      v709 = (char *)*a1;
    }
    *a1 = v707;
    a1[1] = v701;
    a1[2] = v708;
    if (v709) {
      operator delete(v709);
    }
  }
  else
  {
    void *v689 = @"DRC Min Gain (high freq)";
    v689[1] = 0x800000000000000DLL;
    v689[2] = 3253731328;
    v689[3] = 0x6C1700000;
    v701 = v689 + 4;
  }
  a1[1] = v701;
  unint64_t v712 = (unint64_t)a1[2];
  if ((unint64_t)v701 >= v712)
  {
    uint64_t v714 = ((char *)v701 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v714 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v715 = v712 - (void)*a1;
    uint64_t v716 = v715 >> 4;
    if (v715 >> 4 <= (unint64_t)(v714 + 1)) {
      uint64_t v716 = v714 + 1;
    }
    if ((unint64_t)v715 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v717 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v717 = v716;
    }
    if (v717) {
      v718 = (char *)sub_1A66F3EC8(v3, v717);
    }
    else {
      v718 = 0;
    }
    v719 = &v718[32 * v714];
    v720 = &v718[32 * v717];
    *(void *)v719 = @"DRC Max Gain (high freq)";
    *((void *)v719 + 1) = 0x800000000000000DLL;
    *((void *)v719 + 2) = 0x420C000000000000;
    *((void *)v719 + 3) = 0x641C80000;
    v713 = v719 + 32;
    v722 = (char *)*a1;
    v721 = (char *)a1[1];
    if (v721 != *a1)
    {
      do
      {
        long long v723 = *((_OWORD *)v721 - 1);
        *((_OWORD *)v719 - 2) = *((_OWORD *)v721 - 2);
        *((_OWORD *)v719 - 1) = v723;
        v719 -= 32;
        v721 -= 32;
      }
      while (v721 != v722);
      v721 = (char *)*a1;
    }
    *a1 = v719;
    a1[1] = v713;
    a1[2] = v720;
    if (v721) {
      operator delete(v721);
    }
  }
  else
  {
    void *v701 = @"DRC Max Gain (high freq)";
    v701[1] = 0x800000000000000DLL;
    v701[2] = 0x420C000000000000;
    v701[3] = 0x641C80000;
    v713 = v701 + 4;
  }
  a1[1] = v713;
  unint64_t v724 = (unint64_t)a1[2];
  if ((unint64_t)v713 >= v724)
  {
    uint64_t v726 = ((char *)v713 - (unsigned char *)*a1) >> 5;
    if ((unint64_t)(v726 + 1) >> 59) {
      goto LABEL_995;
    }
    uint64_t v727 = v724 - (void)*a1;
    uint64_t v728 = v727 >> 4;
    if (v727 >> 4 <= (unint64_t)(v726 + 1)) {
      uint64_t v728 = v726 + 1;
    }
    if ((unint64_t)v727 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v729 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v729 = v728;
    }
    if (v729) {
      v730 = (char *)sub_1A66F3EC8(v3, v729);
    }
    else {
      v730 = 0;
    }
    v731 = &v730[32 * v726];
    v732 = &v730[32 * v729];
    *(void *)v731 = @"Noise dBA SPL";
    *((void *)v731 + 1) = 0x40080000000000DLL;
    *((void *)v731 + 2) = 0x42C8000000000000;
    *((void *)v731 + 3) = 0x641F00000;
    v725 = v731 + 32;
    v734 = (char *)*a1;
    v733 = (char *)a1[1];
    if (v733 != *a1)
    {
      do
      {
        long long v735 = *((_OWORD *)v733 - 1);
        *((_OWORD *)v731 - 2) = *((_OWORD *)v733 - 2);
        *((_OWORD *)v731 - 1) = v735;
        v731 -= 32;
        v733 -= 32;
      }
      while (v733 != v734);
      v733 = (char *)*a1;
    }
    *a1 = v731;
    a1[1] = v725;
    a1[2] = v732;
    if (v733) {
      operator delete(v733);
    }
  }
  else
  {
    void *v713 = @"Noise dBA SPL";
    v713[1] = 0x40080000000000DLL;
    v713[2] = 0x42C8000000000000;
    v713[3] = 0x641F00000;
    v725 = v713 + 4;
  }
  a1[1] = v725;
  unint64_t v736 = (unint64_t)a1[2];
  if ((unint64_t)v725 < v736)
  {
    void *v725 = @"Current Linear Volume";
    v725[1] = 0x40080000000000DLL;
    v725[2] = 0x3F80000000000000;
    v725[3] = 0x63F000000;
    v737 = v725 + 4;
    goto LABEL_993;
  }
  uint64_t v738 = ((char *)v725 - (unsigned char *)*a1) >> 5;
  if ((unint64_t)(v738 + 1) >> 59) {
LABEL_995:
  }
    sub_1A66E9D7C();
  uint64_t v739 = v736 - (void)*a1;
  uint64_t v740 = v739 >> 4;
  if (v739 >> 4 <= (unint64_t)(v738 + 1)) {
    uint64_t v740 = v738 + 1;
  }
  if ((unint64_t)v739 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v741 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v741 = v740;
  }
  if (v741) {
    v742 = (char *)sub_1A66F3EC8(v3, v741);
  }
  else {
    v742 = 0;
  }
  v743 = &v742[32 * v738];
  v744 = &v742[32 * v741];
  *(void *)v743 = @"Current Linear Volume";
  *((void *)v743 + 1) = 0x40080000000000DLL;
  *((void *)v743 + 2) = 0x3F80000000000000;
  *((void *)v743 + 3) = 0x63F000000;
  v737 = v743 + 32;
  v746 = (char *)*a1;
  v745 = (char *)a1[1];
  if (v745 != *a1)
  {
    do
    {
      long long v747 = *((_OWORD *)v745 - 1);
      *((_OWORD *)v743 - 2) = *((_OWORD *)v745 - 2);
      *((_OWORD *)v743 - 1) = v747;
      v743 -= 32;
      v745 -= 32;
    }
    while (v745 != v746);
    v745 = (char *)*a1;
  }
  *a1 = v743;
  a1[1] = v737;
  a1[2] = v744;
  if (v745) {
    operator delete(v745);
  }
LABEL_993:
  a1[1] = v737;
  if ((char *)v737 - (unsigned char *)*a1 != 1984) {
    sub_1A688D3B0();
  }
}

uint64_t sub_1A66F2050(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 32);
  sub_1A66F3F54(&v3);
  uint64_t v3 = (void **)(a1 + 8);
  sub_1A66F3F54(&v3);
  sub_1A66F421C((uint64_t *)a1, 0);
  return a1;
}

void AUSpeechEnhancerV2::~AUSpeechEnhancerV2(AUSpeechEnhancerV2 *this)
{
  *(void *)this = &unk_1EFB7D1B0;
  unint64_t v2 = (void *)*((void *)this + 82);
  if (v2)
  {
    *((void *)this + 83) = v2;
    operator delete(v2);
  }
  uint64_t v4 = (void **)((char *)this + 624);
  sub_1A66F3F54(&v4);
  uint64_t v4 = (void **)((char *)this + 600);
  sub_1A66F3F54(&v4);
  sub_1A66F421C((uint64_t *)this + 74, 0);
  uint64_t v3 = (void *)*((void *)this + 71);
  if (v3)
  {
    *((void *)this + 72) = v3;
    operator delete(v3);
  }
  ausdk::AUBase::~AUBase(this);
}

{
  uint64_t vars8;

  AUSpeechEnhancerV2::~AUSpeechEnhancerV2(this);

  JUMPOUT(0x1AD0C0C70);
}

uint64_t AUSpeechEnhancerV2::Initialize(AUSpeechEnhancerV2 *this)
{
  uint64_t result = ausdk::AUBase::Initialize(this);
  if (!result)
  {
    uint64_t v3 = sub_1A66F4000((uint64_t)this + 80, 0);
    uint64_t v4 = sub_1A66F4000((uint64_t)this + 128, 0);
    int v5 = *(_DWORD *)(v3 + 88);
    *((unsigned char *)this + 545) = v5 == 1718773105;
    int v6 = *(_DWORD *)(v3 + 108);
    *((_DWORD *)this + 133) = v6;
    int v7 = *(_DWORD *)(v4 + 108);
    *((_DWORD *)this + 134) = v7;
    BOOL v8 = v5 == 1819304813 || v5 == 1718773105;
    if (v8 && v6 == v7 && *(double *)(v3 + 80) == *(double *)(v4 + 80))
    {
      *((_DWORD *)this + 132) = (unint64_t)(*(double *)(sub_1A66F4000((uint64_t)this + 128, 0) + 80) + 0.5);
      *((_DWORD *)this + 135) = *((_DWORD *)this + 84);
      double v9 = *((double *)this + 69);
      if (v9 > 0.0)
      {
        int v10 = *((_DWORD *)this + 140);
        if (v10)
        {
          float v11 = v9;
          sub_1A66F22E4((v10 + 1), (float **)&v13, 0.0, v11 * 0.5);
          uint64_t v12 = (void *)*((void *)this + 71);
          if (v12)
          {
            *((void *)this + 72) = v12;
            operator delete(v12);
          }
          *(_OWORD *)((char *)this + 568) = v13;
          *((void *)this + 73) = v14;
        }
      }
      AUSpeechEnhancerV2::setupCore(this);
    }
    return 4294956428;
  }
  return result;
}

double AUSpeechEnhancerV2::GetSampleRate(AUSpeechEnhancerV2 *this)
{
  return *(double *)(sub_1A66F4000((uint64_t)this + 128, 0) + 80);
}

void sub_1A66F22E4(unint64_t a1@<X0>, float **a2@<X8>, float a3@<S0>, float a4@<S1>)
{
  sub_1A66F4890(a2, a1);
  BOOL v8 = *a2;
  float __B = (float)(a4 - a3) / (float)(a1 - 1);
  float __A = a3;
  vDSP_vramp(&__A, &__B, v8, 1, a1);
}

void sub_1A66F2358(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void AUSpeechEnhancerV2::setupCore(AUSpeechEnhancerV2 *this)
{
}

void sub_1A66F24A4(_Unwind_Exception *a1)
{
  MEMORY[0x1AD0C0C70](v1, 0x10B0C402ABC78DALL);
  _Unwind_Resume(a1);
}

uint64_t AUSpeechEnhancerV2::Reset(AUSpeechEnhancerV2 *this)
{
  if (*((unsigned char *)this + 17))
  {
    uint64_t v2 = *((void *)this + 74);
    if (v2) {
      sub_1A66F494C(v2);
    }
  }

  return ausdk::AUBase::Reset(this);
}

uint64_t AUSpeechEnhancerV2::SupportedNumChannels(AUSpeechEnhancerV2 *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&unk_1A689D340;
  }
  return 1;
}

uint64_t AUSpeechEnhancerV2::ValidFormat(AUSpeechEnhancerV2 *this, unsigned int a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  uint64_t result = ausdk::AUBase::ValidFormat(this, a2, a3, a4);
  if ((result & 1) == 0 && a4->mFormatID == 1718773105)
  {
    long long v6 = *(_OWORD *)&a4->mBytesPerPacket;
    v7[0] = *(_OWORD *)&a4->mSampleRate;
    v7[1] = v6;
    uint64_t v8 = *(void *)&a4->mBitsPerChannel;
    DWORD2(v7[0]) = 1819304813;
    int v9 = 0;
    LODWORD(result) = sub_1A66F4084(v7, &v9, 0);
    if (v9 == 4) {
      return result;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t AUSpeechEnhancerV2::GetPropertyInfo(AUSpeechEnhancerV2 *this, signed int a2, unsigned int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3) {
    return ausdk::AUBase::GetPropertyInfo(this, a2, a3, a4, a5, a6);
  }
  if (a2 > 1002)
  {
    if (a2 == 1003)
    {
      *a6 = 1;
      int v7 = 8;
      goto LABEL_13;
    }
    if (a2 != 1004 && a2 != 3700) {
      return ausdk::AUBase::GetPropertyInfo(this, a2, a3, a4, a5, a6);
    }
    goto LABEL_11;
  }
  if (a2 == 21)
  {
LABEL_11:
    *a6 = 1;
    int v7 = 4;
    goto LABEL_13;
  }
  if (a2 != 1001) {
    return ausdk::AUBase::GetPropertyInfo(this, a2, a3, a4, a5, a6);
  }
  *a6 = 1;
  int v7 = 4 * *((_DWORD *)this + 84) + 4;
LABEL_13:
  *a5 = v7;
  return 0;
}

uint64_t AUSpeechEnhancerV2::GetProperty(AUSpeechEnhancerV2 *this, unsigned int a2, unsigned int a3, unsigned int a4, _DWORD *a5)
{
  if (a3) {
    return ausdk::AUBase::GetProperty(this, a2, a3, a4, a5);
  }
  if (a2 == 3700)
  {
    int v6 = *((unsigned __int8 *)this + 376);
  }
  else
  {
    if (a2 != 21) {
      return ausdk::AUBase::GetProperty(this, a2, a3, a4, a5);
    }
    int v6 = *((unsigned __int8 *)this + 544);
  }
  *a5 = v6;
  return 0;
}

uint64_t AUSpeechEnhancerV2::SetProperty(AUSpeechEnhancerV2 *this, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int *__src, unsigned int a6)
{
  if (a3)
  {
LABEL_2:
    return ausdk::AUBase::SetProperty(this, a2, a3, a4, __src);
  }
  else
  {
    switch(a2)
    {
      case 0x3E9u:
        if (!*((unsigned char *)this + 17)) {
          goto LABEL_30;
        }
        if (!__src) {
          goto LABEL_29;
        }
        uint64_t v8 = a6 >> 2;
        uint64_t v9 = *((unsigned int *)this + 140);
        if (v8 != v9 + 1) {
          goto LABEL_29;
        }
        uint64_t result = 4294956445;
        if (v9)
        {
          double v10 = *((double *)this + 69);
          if (v10 > 0.0)
          {
            float v11 = (float *)*((void *)this + 71);
            if (!v11) {
              goto LABEL_29;
            }
            int v12 = *((_DWORD *)this + 135);
            if (*((_DWORD *)this + 132) == v10 && v12 == v9)
            {
              uint64_t v14 = &__src[v9 + 1];
              if (v14 != __src) {
                memmove(*(void **)(*((void *)this + 74) + 1104), __src, (char *)v14 - (char *)__src);
              }
            }
            else
            {
              sub_1A66F2868(v11, v8, (float *)__src, *(float **)(*((void *)this + 74) + 1080), (v12 + 1), *(float **)(*((void *)this + 74) + 1104));
            }
            float __C = 0.0;
            vDSP_sve(*(const float **)(*((void *)this + 74) + 1104), 1, &__C, (*((_DWORD *)this + 135) + 1));
            vDSP_vsmul(*(const float **)(*((void *)this + 74) + 1392), 1, &__C, *(float **)(*((void *)this + 74) + 1104), 1, (*((_DWORD *)this + 135) + 1));
            goto LABEL_22;
          }
        }
        break;
      case 0x3EAu:
        if (*((unsigned char *)this + 17))
        {
          if (!__src) {
            goto LABEL_29;
          }
          sub_1A66F28E8(*((void **)this + 74), 1uLL, (float)*__src);
LABEL_22:
          uint64_t result = 0;
        }
        else
        {
LABEL_30:
          uint64_t result = 4294956429;
        }
        break;
      case 0x3EBu:
        if (!__src) {
          goto LABEL_29;
        }
        if (*((unsigned char *)this + 17)) {
          goto LABEL_28;
        }
        uint64_t result = 0;
        *((void *)this + 69) = *(void *)__src;
        break;
      case 0x3ECu:
        if (__src)
        {
          if (*((unsigned char *)this + 17))
          {
LABEL_28:
            uint64_t result = 4294956431;
          }
          else
          {
            uint64_t result = 0;
            *((_DWORD *)this + 140) = *__src;
          }
        }
        else
        {
LABEL_29:
          uint64_t result = 4294956445;
        }
        break;
      default:
        if (a2 != 21) {
          goto LABEL_2;
        }
        uint64_t result = 0;
        *((unsigned char *)this + 544) = *__src != 0;
        break;
    }
  }
  return result;
}

float sub_1A66F2868(float *a1, uint64_t a2, float *a3, float *a4, unint64_t a5, float *a6)
{
  sub_1A66F4B9C(a1, a2, a3, a4, a5, (uint64_t)a6, *a3, a3[a2 - 1]);
  float __B = (float)(a4[1] - *a4) / (float)(a1[1] - *a1);
  vDSP_vsmul(a6, 1, &__B, a6, 1, a5);
  return result;
}

void *sub_1A66F28E8(void *result, unint64_t a2, float a3)
{
  if (a2 >= (uint64_t)(result[1] - *result) >> 4) {
    sub_1A688D3DC();
  }
  uint64_t v3 = (float *)(*result + 16 * a2);
  if (v3[1] < a3) {
    a3 = v3[1];
  }
  if (a3 < *v3) {
    a3 = *v3;
  }
  v3[3] = a3;
  return result;
}

uint64_t AUSpeechEnhancerV2::GetParameterInfo(AUSpeechEnhancerV2 *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  if (a2) {
    return 4294956418;
  }
  uint64_t v5 = *((void *)this + 82);
  if (a3 >= (unint64_t)((*((void *)this + 83) - v5) >> 5)) {
    return 4294956418;
  }
  uint64_t v6 = v5 + 32 * a3;
  int v7 = *(_DWORD *)(v6 + 12);
  buffer->unit = *(_DWORD *)(v6 + 8);
  buffer->minValue = *(AudioUnitParameterValue *)(v6 + 16);
  buffer->maxValue = *(AudioUnitParameterValue *)(v6 + 20);
  buffer->defaultValue = *(AudioUnitParameterValue *)(v6 + 24);
  int v8 = v7 + 1098907648;
  buffer->flags = v7 + 1098907648;
  signed int v9 = *(_DWORD *)(v6 + 28);
  if (v9 >= 1)
  {
    buffer->clumpID = v9;
    v8 |= 0x100000u;
  }
  CFStringRef v10 = *(const __CFString **)v6;
  buffer->cfNameString = *(CFStringRef *)v6;
  buffer->flags = v8 | 0x8000000;
  CFStringGetCString(v10, buffer->name, 52, 0x8000100u);
  return 0;
}

uint64_t AUSpeechEnhancerV2::GetParameterList(AUSpeechEnhancerV2 *this, int a2, unsigned int *a3, unsigned int *a4)
{
  if (a2)
  {
    *a4 = 0;
    return 4294956430;
  }
  else
  {
    if (a3)
    {
      *((void *)a3 + 22) = 0x140000003DLL;
      *((_OWORD *)a3 + 8) = xmmword_1A689D3C4;
      *((_OWORD *)a3 + 9) = unk_1A689D3D4;
      *((_OWORD *)a3 + 10) = xmmword_1A689D3E4;
      *((_OWORD *)a3 + 4) = xmmword_1A689D384;
      *((_OWORD *)a3 + 5) = unk_1A689D394;
      *((_OWORD *)a3 + 6) = xmmword_1A689D3A4;
      *((_OWORD *)a3 + 7) = unk_1A689D3B4;
      *(_OWORD *)a3 = xmmword_1A689D344;
      *((_OWORD *)a3 + 1) = unk_1A689D354;
      *((_OWORD *)a3 + 2) = xmmword_1A689D364;
      *((_OWORD *)a3 + 3) = unk_1A689D374;
      *(_OWORD *)(a3 + 46) = xmmword_1A689D270;
      *(_OWORD *)(a3 + 50) = xmmword_1A689D280;
      *(_OWORD *)(a3 + 54) = xmmword_1A689D290;
      *(_OWORD *)(a3 + 58) = xmmword_1A689D2A0;
    }
    *a4 = 62;
    if (*((void *)this + 83) - *((void *)this + 82) != 1984) {
      sub_1A688D408();
    }
    return 0;
  }
}

uint64_t AUSpeechEnhancerV2::GetParameterValueStrings(AUSpeechEnhancerV2 *this, int a2, int a3, const __CFArray **a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a2) {
    return 4294956418;
  }
  if (!a4) {
    return 0;
  }
  switch(a3)
  {
    case 19:
      int v7 = &xmmword_1E5C697E8;
      break;
    case 50:
      int v7 = &xmmword_1E5C697F8;
      break;
    case 49:
      long long v9 = xmmword_1E5C697D0;
      CFStringRef v10 = @"None";
      CFIndex v6 = 3;
      goto LABEL_12;
    default:
      return 4294956418;
  }
  long long v9 = *v7;
  CFIndex v6 = 2;
LABEL_12:
  CFArrayRef v8 = CFArrayCreate(0, (const void **)&v9, v6, 0);
  uint64_t result = 0;
  *a4 = v8;
  return result;
}

uint64_t AUSpeechEnhancerV2::SetParameter(AUSpeechEnhancerV2 *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  uint64_t v5 = *((void *)this + 82);
  if (a2 > (unint64_t)((*((void *)this + 83) - v5) >> 5)) {
    return 4294956418;
  }
  if ((*(unsigned char *)(v5 + 32 * a2 + 13) & 0x80) != 0)
  {
    if ((int)a2 > 59)
    {
      if (a2 == 60)
      {
        long long v15 = (void *)*((void *)this + 74);
        if (v15)
        {
          sub_1A66F28E8(v15, 0x3CuLL, a5);
          sub_1A66F2D38(*((void *)this + 74));
        }
      }
      else if (a2 == 61)
      {
        long long v13 = (void *)*((void *)this + 74);
        if (v13)
        {
          sub_1A66F28E8(v13, 0x3DuLL, a5);
          sub_1A66F2DD4(*((float **)this + 74));
        }
      }
    }
    else if (a2 == 21)
    {
      uint64_t v14 = (void *)*((void *)this + 74);
      if (v14)
      {
        sub_1A66F28E8(v14, 0x15uLL, a5);
        sub_1A66F2CE4(*((void *)this + 74));
      }
    }
    else if (a2 == 47)
    {
      int v12 = (void *)*((void *)this + 74);
      if (v12) {
        sub_1A66F28E8(v12, 0x2FuLL, a5);
      }
    }
  }
  else
  {
    ++*((_DWORD *)this + 162);
  }

  return ausdk::AUBase::SetParameter(this, a2, a3, a4, a5);
}

float sub_1A66F2CE4(uint64_t a1)
{
  if (*(void *)(a1 + 8) - *(void *)a1 <= 0x150uLL) {
    sub_1A688D434();
  }
  float result = exp(*(float *)(*(void *)a1 + 348) * 0.230258509);
  *(float *)(a1 + 140) = result;
  return result;
}

float sub_1A66F2D38(uint64_t a1)
{
  if (*(void *)(a1 + 8) - *(void *)a1 <= 0x3C0uLL) {
    sub_1A688D434();
  }
  float v2 = exp(*(float *)(*(void *)a1 + 972) * 0.230258509);
  float v3 = v2 * 1.45;
  float __B = v3;
  vDSP_vsmul(*(const float **)(a1 + 1392), 1, &__B, *(float **)(a1 + 1104), 1, *(void *)(a1 + 776));
  return sub_1A66F4CBC(a1 + 1896, a1 + 1104);
}

float sub_1A66F2DD4(float *a1)
{
  if (*((void *)a1 + 1) - *(void *)a1 <= 0x3D0uLL) {
    sub_1A688D434();
  }
  float v2 = cbrtf(*(float *)(*(void *)a1 + 988));
  sub_1A66F28E8(a1, 0x15uLL, (float)(v2 * 58.0) + -58.0);
  if (*((void *)a1 + 1) - *(void *)a1 <= 0x150uLL) {
    sub_1A688D434();
  }
  float result = exp(*(float *)(*(void *)a1 + 348) * 0.230258509);
  a1[35] = result;
  return result;
}

uint64_t AUSpeechEnhancerV2::RestoreState(AudioComponentInstance *this, const void *a2)
{
  uint64_t result = ausdk::AUBase::RestoreState(this, a2);
  if (!result)
  {
    if (*((unsigned char *)this + 17)) {
      ++*((_DWORD *)this + 162);
    }
  }
  return result;
}

uint64_t AUSpeechEnhancerV2::Render(AUSpeechEnhancerV2 *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  v15[1] = *MEMORY[0x1E4F143B8];
  unsigned int v13 = 0;
  CFArrayRef v8 = (char *)this + 80;
  long long v9 = (ausdk::AUInputElement *)sub_1A66F4000((uint64_t)this + 80, 0);
  uint64_t result = ausdk::AUInputElement::PullInput(v9, &v13, a3, 0, a4);
  if (!result)
  {
    uint64_t v11 = sub_1A66F4000((uint64_t)v8, 0);
    v15[0] = sub_1A66F4190(v11 + 144);
    uint64_t v12 = sub_1A66F4000((uint64_t)this + 128, 0);
    uint64_t v14 = sub_1A66F4190(v12 + 144);
    return (*(uint64_t (**)(AUSpeechEnhancerV2 *, unsigned int *, uint64_t, uint64_t, void *, uint64_t, uint64_t *))(*(void *)this + 184))(this, a2, a4, 1, v15, 1, &v14);
  }
  return result;
}

uint64_t AUSpeechEnhancerV2::ProcessMultipleBufferLists(AUSpeechEnhancerV2 *this, unsigned int *a2, unsigned int a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  unsigned int v7 = *((_DWORD *)this + 135);
  if (v7 < a3) {
    return 4294956422;
  }
  uint64_t v12 = v7 << *((unsigned char *)this + 545);
  if (*((unsigned char *)this + 544))
  {
    unint64_t v13 = *((unsigned int *)this + 133);
    if (v13)
    {
      unint64_t v14 = 0;
      uint64_t v15 = 16;
      do
      {
        unint64_t v16 = *(const void **)((char *)&(*a5)->mNumberBuffers + v15);
        uint64_t v17 = *(void **)((char *)&(*a7)->mNumberBuffers + v15);
        if (v16 != v17 && v12 != 0)
        {
          memmove(v17, v16, 4 * v12);
          unint64_t v13 = *((unsigned int *)this + 133);
        }
        ++v14;
        v15 += 16;
      }
      while (v14 < v13);
    }
    return 0;
  }
  else
  {
    int v19 = *((_DWORD *)this + 162);
    if (v19 != *((_DWORD *)this + 163))
    {
      *((_DWORD *)this + 163) = v19;
      AUSpeechEnhancerV2::syncParametersWithCore(this);
    }
    unint64_t v20 = *((unsigned int *)this + 133);
    if (v20)
    {
      uint64_t v21 = 0;
      unint64_t v22 = 0;
      uint64_t v23 = 16;
      do
      {
        if (v12)
        {
          memmove(*(void **)(*((void *)this + 75) + v21), *(const void **)((char *)&(*a5)->mNumberBuffers + v23), 4 * v12);
          unint64_t v20 = *((unsigned int *)this + 133);
        }
        ++v22;
        v21 += 24;
        v23 += 16;
      }
      while (v22 < v20);
    }
    sub_1A66F31E8(*((void *)this + 74), (uint64_t *)this + 75, (void *)this + 78, *((unsigned int *)this + 135), *((unsigned __int8 *)this + 545));
    unint64_t v25 = *((unsigned int *)this + 133);
    if (v25)
    {
      uint64_t v26 = 0;
      unint64_t v27 = 0;
      uint64_t v28 = 16;
      do
      {
        if (v12)
        {
          memmove(*(void **)((char *)&(*a7)->mNumberBuffers + v28), *(const void **)(*((void *)this + 78) + v26), 4 * v12);
          unint64_t v25 = *((unsigned int *)this + 133);
        }
        ++v27;
        v28 += 16;
        v26 += 24;
      }
      while (v27 < v25);
    }
    return AUSpeechEnhancerV2::updateMeterDisplay(this, v24);
  }
}

float AUSpeechEnhancerV2::syncParametersWithCore(AUSpeechEnhancerV2 *this)
{
  if (*((void *)this + 83) != *((void *)this + 82))
  {
    unint64_t v2 = 0;
    do
    {
      float v3 = (void *)*((void *)this + 74);
      uint64_t v4 = (char **)sub_1A66F3F00((uint64_t)this + 32, 0);
      float Parameter = ausdk::AUElement::GetParameter(v4, v2);
      sub_1A66F28E8(v3, v2++, Parameter);
    }
    while (v2 < (uint64_t)(*((void *)this + 83) - *((void *)this + 82)) >> 5);
  }
  uint64_t v6 = *((void *)this + 74);

  return sub_1A66F37FC(v6);
}

void sub_1A66F31E8(uint64_t a1, uint64_t *a2, void *a3, unint64_t a4, int a5)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  if (v5 != *(void *)(a1 + 792)) {
    sub_1A688D510();
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3) != v5) {
    sub_1A688D4E4();
  }
  if (*(void *)(a1 + 760) != a4) {
    sub_1A688D4B8();
  }
  unint64_t v9 = (uint64_t)(*(void *)(*a2 + 8) - *(void *)*a2) >> 2;
  if (a5)
  {
    if (v9 >= 2 * a4) {
      goto LABEL_6;
    }
LABEL_29:
    sub_1A688D460();
  }
  if (v9 < a4) {
    goto LABEL_29;
  }
LABEL_6:
  if (!*(void *)(a1 + 32))
  {
    float v10 = *(float *)(a1 + 80);
    if (v10 <= 0.0) {
      sub_1A688D48C();
    }
    *(float *)(a1 + 136) = *(float *)(a1 + 576) / v10;
    sub_1A66F5184((void *)a1, *(float **)(a1 + 1080), *(void *)(a1 + 776), *(void *)(a1 + 1464));
    *(float *)&__B.realp = *(float *)(a1 + 136) / 10000000.0;
    vDSP_vsmul(*(const float **)(a1 + 1464), 1, (const float *)&__B, *(float **)(a1 + 1416), 1, *(void *)(a1 + 776));
    uint64_t v11 = operator new(0x3CuLL);
    *uint64_t v11 = xmmword_1A689D414;
    v11[1] = unk_1A689D424;
    v11[2] = xmmword_1A689D434;
    *(_OWORD *)((char *)v11 + 44) = *(long long *)((char *)&xmmword_1A689D434 + 12);
    uint64_t v12 = *(void **)(a1 + 544);
    unint64_t v13 = (uint64_t)(*(void *)(a1 + 552) - (void)v12) >> 2;
    if (v13 >= 0xF) {
      unint64_t v13 = 15;
    }
    if (v13) {
      memmove(v12, v11, 4 * v13);
    }
    operator delete(v11);
  }
  sub_1A66F4D3C((float *)a1, a2, a5);
  sub_1A66F4E40(a1, (const void ***)a2, a5);
  __B.realp = **(float ***)(a1 + 1536);
  __B.imagp = **(float ***)(a1 + 1560);
  uint64_t v14 = sub_1A66F4F5C(a1, &__B);
  if (*(void *)(a1 + 792))
  {
    uint64_t v15 = (const float **)v14;
    uint64_t v16 = 0;
    for (unint64_t i = 0; *(void *)(a1 + 792) > i; ++i)
    {
      if (*(void *)(a1 + 8) == *(void *)a1) {
        sub_1A688D434();
      }
      if (*(float *)(*(void *)a1 + 12) <= 0.5)
      {
        __src.realp = 0;
        __src.imagp = 0;
        __src.realp = *(float **)(*(void *)(a1 + 1536) + v16);
        __src.imagp = *(float **)(*(void *)(a1 + 1560) + v16);
        uint64_t v21 = *v15;
        float v22 = *__src.imagp;
        vDSP_Length v23 = *(void *)(a1 + 776) - 1;
        vDSP_vmul(__src.realp, 1, *v15, 1, __src.realp, 1, v23);
        vDSP_vmul(__src.imagp, 1, v21, 1, __src.imagp, 1, v23);
        *__src.imagp = v22 * v21[v23];
        if (a5)
        {
          if (a4)
          {
            memmove(*(void **)(*a3 + v16), __src.realp, 4 * a4);
            imagp = __src.imagp;
            unint64_t v20 = (void *)(*(void *)(*a3 + v16) + 4 * a4);
            goto LABEL_24;
          }
        }
        else
        {
          VPTimeFreqConverter::Synthesize(*(VPTimeFreqConverter **)(*(void *)(a1 + 2360) + 8 * i), &__src, *(float **)(a1 + 816));
          if (a4)
          {
            imagp = *(float **)(a1 + 816);
            unint64_t v20 = *(void **)(*a3 + v16);
LABEL_24:
            size_t v18 = 4 * a4;
LABEL_25:
            memmove(v20, imagp, v18);
          }
        }
      }
      else if (a4 << a5)
      {
        size_t v18 = 4 * (a4 << a5);
        imagp = *(float **)(*a2 + v16);
        unint64_t v20 = *(void **)(*a3 + v16);
        goto LABEL_25;
      }
      v16 += 24;
    }
  }
  ++*(void *)(a1 + 32);
}

uint64_t AUSpeechEnhancerV2::updateMeterDisplay(AUSpeechEnhancerV2 *this, __n128 a2)
{
  int updated = AUSpeechEnhancerV2::updateMeterDisplay(this, 1u, a2);
  int v5 = AUSpeechEnhancerV2::updateMeterDisplay(this, 0x1Bu, v4);
  int v7 = AUSpeechEnhancerV2::updateMeterDisplay(this, 0x11u, v6);
  int v9 = AUSpeechEnhancerV2::updateMeterDisplay(this, 6u, v8);
  int v11 = AUSpeechEnhancerV2::updateMeterDisplay(this, 0xCu, v10);
  int v13 = AUSpeechEnhancerV2::updateMeterDisplay(this, 0x15u, v12);
  int v15 = AUSpeechEnhancerV2::updateMeterDisplay(this, 0x16u, v14);
  unsigned int v17 = AUSpeechEnhancerV2::updateMeterDisplay(this, 0x12u, v16);
  uint64_t v19 = **((void **)this + 74);
  if ((unint64_t)(*(void *)(*((void *)this + 74) + 8) - v19) <= 0x140) {
    sub_1A688D53C();
  }
  uint64_t v20 = v5 | updated | v7 | v9 | v11 | v13 | v15 | v17;
  v18.n128_u32[0] = *(_DWORD *)(v19 + 332);
  if (v18.n128_f32[0] > 0.5)
  {
    for (unsigned int i = 28; i != 44; ++i)
      uint64_t v20 = AUSpeechEnhancerV2::updateMeterDisplay(this, i, v18) | v20;
  }
  return v20;
}

uint64_t AUSpeechEnhancerV2::updateMeterDisplay(AUSpeechEnhancerV2 *this, unsigned int a2, __n128 a3)
{
  uint64_t v3 = **((void **)this + 74);
  if (a2 >= (unint64_t)((*(void *)(*((void *)this + 74) + 8) - v3) >> 4)) {
    sub_1A688D53C();
  }
  a3.n128_u32[0] = *(_DWORD *)(v3 + 16 * a2 + 12);
  __n128 v4 = *(uint64_t (**)(__n128))(*(void *)this + 152);

  return v4(a3);
}

uint64_t AUSpeechEnhancerV2::GetLatency(uint64_t this)
{
  if (!*(unsigned char *)(this + 545)) {
    return sub_1A66F4000(this + 128, 0);
  }
  return this;
}

void sub_1A66F36FC(float **a1, float a2, float a3, float a4)
{
  unint64_t v10 = (unint64_t)a1[2];
  uint64_t v8 = (uint64_t)(a1 + 2);
  unint64_t v9 = v10;
  int v11 = *(float **)(v8 - 8);
  if ((unint64_t)v11 >= v10)
  {
    uint64_t v13 = ((char *)v11 - (char *)*a1) >> 4;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 60) {
      sub_1A66E9D7C();
    }
    uint64_t v15 = v9 - (void)*a1;
    if (v15 >> 3 > v14) {
      unint64_t v14 = v15 >> 3;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16) {
      unsigned int v17 = (char *)sub_1A66E9D94(v8, v16);
    }
    else {
      unsigned int v17 = 0;
    }
    __n128 v18 = (float *)&v17[16 * v13];
    uint64_t v19 = (float *)&v17[16 * v16];
    *__n128 v18 = a2;
    v18[1] = a3;
    v18[2] = a4;
    v18[3] = a4;
    __n128 v12 = v18 + 4;
    uint64_t v21 = *a1;
    uint64_t v20 = a1[1];
    if (v20 != *a1)
    {
      do
      {
        *((_OWORD *)v18 - 1) = *((_OWORD *)v20 - 1);
        v18 -= 4;
        v20 -= 4;
      }
      while (v20 != v21);
      uint64_t v20 = *a1;
    }
    *a1 = v18;
    a1[1] = v12;
    a1[2] = v19;
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    *int v11 = a2;
    v11[1] = a3;
    __n128 v12 = v11 + 4;
    v11[2] = a4;
    v11[3] = a4;
  }
  a1[1] = v12;
}

float sub_1A66F37FC(uint64_t a1)
{
  uint64_t v1 = *(float **)a1;
  if (*(void *)(a1 + 8) - *(void *)a1 <= 0x320uLL) {
    sub_1A688D434();
  }
  *(void *)(a1 + 64) = (unint64_t)(float)(v1[203] + 0.5);
  unint64_t v3 = (unint64_t)(float)(v1[199] + 0.5);
  *(void *)(a1 + 48) = v3;
  if (v3)
  {
    *(void *)(a1 + 784) = 0;
    float __A = 1.0;
    vDSP_vfill(&__A, *(float **)(a1 + 1032), 1, *(void *)(a1 + 776));
    vDSP_vfill(&__A, *(float **)(a1 + 1344), 1, *(void *)(a1 + 776));
    uint64_t v1 = *(float **)a1;
    if (*(void *)(a1 + 8) - *(void *)a1 <= 0x130uLL) {
      sub_1A688D434();
    }
  }
  *(void *)(a1 + 56) = (unint64_t)(float)(v1[79] + 0.5);
  float v4 = *(float *)(a1 + 116) / (float)*(unint64_t *)(a1 + 760);
  *(float *)(a1 + 84) = expf(-1.0 / (float)(v1[15] * v4));
  *(float *)(a1 + 72) = expf(-1.0 / (float)(v1[19] * v4));
  *(float *)(a1 + 76) = expf(-1.0 / (float)(v4 * v1[23]));
  float v5 = exp(v1[11] * 0.230258509);
  *(float *)(a1 + 80) = v5;
  sub_1A66F92B8(a1 + 1648);
  sub_1A66F7780((char *)(a1 + 1320), *(char **)(a1 + 1688), *(void *)(a1 + 1696), (uint64_t)(*(void *)(a1 + 1696) - *(void *)(a1 + 1688)) >> 2);
  if (*(void *)(a1 + 8) - *(void *)a1 <= 0xD0uLL) {
    sub_1A688D434();
  }
  sub_1A66FA2B4((void *)a1, (float *)(*(void *)a1 + 220));
  unint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 2216);
  if ((*(void *)(a1 + 2224) - v7) >> 2 < v6) {
    unint64_t v6 = (*(void *)(a1 + 2224) - v7) >> 2;
  }
  *(void *)(a1 + 1936) = v6;
  uint64_t v8 = *(float **)a1;
  if (*(void *)(a1 + 8) - *(void *)a1 <= 0x2E0uLL) {
    sub_1A688D434();
  }
  *(float *)(a1 + 172) = v8[187];
  *(float *)(a1 + 176) = v8[179];
  *(float *)(a1 + 180) = v8[183];
  sub_1A66FA330(a1);
  if (*(void *)(a1 + 8) - *(void *)a1 <= 0xE0uLL) {
    sub_1A688D434();
  }
  float v9 = exp(*(float *)(*(void *)a1 + 236) * 0.230258509);
  *(float *)(a1 + 88) = v9;
  *(float *)(a1 + 92) = 1.0 / v9;
  vDSP_vsmul(*(const float **)(a1 + 1200), 1, (const float *)(a1 + 88), *(float **)(a1 + 1248), 1, *(void *)(a1 + 24));
  float __A = 1.0;
  vDSP_svdiv(&__A, *(const float **)(a1 + 1248), 1, *(float **)(a1 + 1248), 1, *(void *)(a1 + 24));
  vDSP_vsmsa(*(const float **)(a1 + 1200), 1, (const float *)(a1 + 88), (const float *)(a1 + 92), *(float **)(a1 + 1272), 1, *(void *)(a1 + 24));
  vDSP_vadd(*(const float **)(a1 + 1176), 1, *(const float **)(a1 + 1272), 1, *(float **)(a1 + 1272), 1, *(void *)(a1 + 24));
  vDSP_vdiv(*(const float **)(a1 + 1272), 1, *(const float **)(a1 + 1224), 1, *(float **)(a1 + 1272), 1, *(void *)(a1 + 24));
  unint64_t v10 = *(float **)a1;
  unint64_t v11 = *(void *)(a1 + 8) - *(void *)a1;
  if (v11 <= 0x190) {
    sub_1A688D434();
  }
  unint64_t v12 = vcvtas_u32_f32(v10[103] / (float)(*(float *)(a1 + 116) / (float)*(unint64_t *)(a1 + 768)));
  if (*(void *)(a1 + 776) < v12) {
    unint64_t v12 = *(void *)(a1 + 776);
  }
  *(void *)(a1 + 40) = v12;
  float v13 = exp(v10[63] * 0.230258509);
  *(float *)(a1 + 100) = v13;
  float v14 = exp(v10[95] * 0.230258509);
  *(float *)(a1 + 104) = v14;
  float v15 = exp(v10[67] * 0.230258509);
  *(float *)(a1 + 108) = v15;
  float v16 = exp(v10[99] * 0.230258509);
  *(float *)(a1 + 112) = v16;
  if (v11 <= 0x380) {
    sub_1A688D434();
  }
  float v17 = exp(v10[227] * 0.230258509);
  *(float *)(a1 + 212) = v17;
  if (v11 <= 0x3A0) {
    sub_1A688D434();
  }
  float v18 = exp(v10[235] * 0.230258509);
  *(float *)(a1 + 216) = v18;
  float v19 = exp(v10[231] * 0.230258509);
  *(float *)(a1 + 220) = v19;
  if (v11 <= 0x3B0) {
    sub_1A688D434();
  }
  float v20 = exp(v10[239] * 0.230258509);
  *(float *)(a1 + 224) = v20;
  *(float *)(a1 + 196) = v10[207];
  float v21 = exp(v10[211] * 0.230258509);
  *(float *)(a1 + 200) = v21;
  *(float *)(a1 + 204) = v10[215];
  *(float *)(a1 + 208) = v10[219];
  *(float *)(a1 + 228) = v10[223];
  uint64_t v22 = *(void *)(a1 + 1664);
  uint64_t v23 = *(void *)(a1 + 1672) - v22;
  unint64_t v24 = v23 >> 2;
  if (v23)
  {
    unint64_t v25 = 0;
    if (v24 <= 1) {
      uint64_t v26 = 1;
    }
    else {
      uint64_t v26 = v24;
    }
    while (*(float *)(v22 + 4 * v25) <= v10[103])
    {
      if (v26 == ++v25) {
        goto LABEL_23;
      }
    }
    unint64_t v24 = v25;
  }
LABEL_23:
  vDSP_Length v27 = *(void *)(a1 + 24);
  if (v27)
  {
    unint64_t v28 = 0;
    uint64_t v29 = *(void *)(a1 + 1736);
    unint64_t v30 = (*(void *)(a1 + 1744) - v29) >> 2;
    while (1)
    {
      if (v24 >= v28)
      {
        if (v30 <= v28) {
LABEL_54:
        }
          sub_1A66F52C8();
        uint64_t v31 = *(const float **)(a1 + 448);
        uint64_t v32 = (float *)(a1 + 204);
        if (v28 >= (uint64_t)(*(void *)(a1 + 456) - (void)v31) >> 2) {
LABEL_55:
        }
          sub_1A66F52C8();
      }
      else
      {
        if (v30 <= v28) {
          goto LABEL_54;
        }
        uint64_t v31 = *(const float **)(a1 + 448);
        uint64_t v32 = (float *)(a1 + 208);
        if (v28 >= (uint64_t)(*(void *)(a1 + 456) - (void)v31) >> 2) {
          goto LABEL_55;
        }
      }
      v31[v28] = powf(*(float *)(v29 + 4 * v28), 1.0 / *v32);
      if (v27 == ++v28) {
        goto LABEL_34;
      }
    }
  }
  uint64_t v31 = *(const float **)(a1 + 448);
LABEL_34:
  float __B = 0.0000001;
  float __C = 0.0;
  float v40 = 1.0;
  vDSP_sve(v31, 1, &__C, v27);
  vDSP_vsdiv(*(const float **)(a1 + 448), 1, &__C, *(float **)(a1 + 448), 1, *(void *)(a1 + 24));
  vDSP_vclip(*(const float **)(a1 + 448), 1, &__B, &v40, *(float **)(a1 + 448), 1, *(void *)(a1 + 24));
  unint64_t v33 = *(float **)a1;
  unint64_t v34 = *(void *)(a1 + 8) - *(void *)a1;
  if (v34 <= 0x70) {
    sub_1A688D434();
  }
  if (v34 <= 0x80) {
    sub_1A688D434();
  }
  if (v34 <= 0x90) {
    sub_1A688D434();
  }
  if (v34 <= 0xA0) {
    sub_1A688D434();
  }
  if (v34 <= 0xB0) {
    sub_1A688D434();
  }
  float result = v33[31];
  int v36 = *((_DWORD *)v33 + 35);
  int v37 = *((_DWORD *)v33 + 39);
  int v38 = *((_DWORD *)v33 + 43);
  int v39 = *((_DWORD *)v33 + 47);
  *(float *)(a1 + 1844) = result;
  *(_DWORD *)(a1 + 1848) = v36;
  *(_DWORD *)(a1 + 1852) = v37;
  *(_DWORD *)(a1 + 1856) = v38;
  *(_DWORD *)(a1 + 1860) = v39;
  *(unsigned char *)(a1 + 811) = 1;
  *(_WORD *)(a1 + 809) = 257;
  *(void *)(a1 + 800) = *(void *)(a1 + 32);
  return result;
}

uint64_t sub_1A66F3E00()
{
  return 0;
}

uint64_t sub_1A66F3E08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v7[1] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a4;
  v7[0] = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void *, uint64_t, uint64_t *))(*(void *)a1 + 184))(a1, a2, a5, 1, v7, 1, &v6);
}

double sub_1A66F3E90()
{
  return 0.0;
}

uint64_t sub_1A66F3E98()
{
  return 1;
}

BOOL sub_1A66F3EA0(uint64_t a1)
{
  return *(unsigned char *)(a1 + 17) == 0;
}

uint64_t sub_1A66F3EB0()
{
  return 4294967292;
}

uint64_t sub_1A66F3EB8()
{
  return 4294967292;
}

uint64_t sub_1A66F3EC0()
{
  return 4294967292;
}

void *sub_1A66F3EC8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    sub_1A66E9A74();
  }
  return operator new(32 * a2);
}

uint64_t sub_1A66F3F00(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    return (*(uint64_t (**)(void))(*(void *)v3 + 32))();
  }
  uint64_t v6 = a1 + 16;
  uint64_t v5 = *(void *)(a1 + 16);
  if (a2 >= (unint64_t)((*(void *)(v6 + 8) - v5) >> 3)) {
    return 0;
  }
  else {
    return *(void *)(v5 + 8 * a2);
  }
}

void sub_1A66F3F54(void ***a1)
{
  unint64_t v2 = *a1;
  if (*v2)
  {
    sub_1A66F3FA8((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_1A66F3FA8(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 24);
      v4 -= 24;
      uint64_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

uint64_t sub_1A66F4000(uint64_t a1, unsigned int a2)
{
  uint64_t result = sub_1A66F3F00(a1, a2);
  if (!result)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      sub_1A688D568();
    }
    exception = __cxa_allocate_exception(0x18uLL);
    sub_1A66E7DE8((uint64_t)exception, -10877);
    __cxa_throw(exception, (struct type_info *)&unk_1EFB7D058, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  return result;
}

void sub_1A66F4070(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1A66F4084(_DWORD *a1, int *a2, BOOL *a3)
{
  if (a1[2] != 1819304813) {
    return 0;
  }
  if (a1[5] != 1) {
    return 0;
  }
  unsigned int v3 = a1[6];
  if (v3 != a1[4]) {
    return 0;
  }
  unsigned int v4 = a1[8];
  if (v3 < v4 >> 3) {
    return 0;
  }
  unsigned int v5 = a1[7];
  if (!v5) {
    return 0;
  }
  unsigned int v6 = a1[3];
  if ((v6 & 0x20) == 0)
  {
    if (v3 % v5) {
      return 0;
    }
    v3 /= v5;
  }
  int v7 = 0;
  if ((v6 & 2) == 0 && 8 * v3 == v4)
  {
    if ((v6 & 1) == 0)
    {
      if ((v6 & 4) != 0)
      {
        int v9 = (v6 >> 7) & 0x3F;
        if (v9 == 24 && v3 == 4)
        {
          int v7 = 3;
        }
        else if (v9 || v3 != 4)
        {
          if (v3 == 2 && v9 == 0) {
            int v7 = 2;
          }
          else {
            int v7 = 0;
          }
        }
        else
        {
          int v7 = 5;
        }
      }
      else
      {
        int v7 = 0;
      }
      goto LABEL_30;
    }
    if ((v6 & 0x1F84) == 0)
    {
      int v7 = 4 * (v3 == 8);
      if (v3 == 4) {
        int v7 = 1;
      }
      goto LABEL_30;
    }
    return 0;
  }
LABEL_30:
  if (a3) {
    *a3 = (a1[3] & 0x20) == 0;
  }
  *a2 = v7;
  return 1;
}

uint64_t sub_1A66F4190(uint64_t a1)
{
  if (!*(_DWORD *)a1)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      sub_1A688D5EC();
    }
    exception = __cxa_allocate_exception(0x18uLL);
    sub_1A66E7DE8((uint64_t)exception, -1);
    __cxa_throw(exception, (struct type_info *)&unk_1EFB7D058, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  return *(void *)(a1 + 8) + 48;
}

void sub_1A66F4208(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1A66F421C(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1A66F426C(result);
    JUMPOUT(0x1AD0C0C70);
  }
  return result;
}

uint64_t sub_1A66F426C(uint64_t a1)
{
  unint64_t v57 = (void **)(a1 + 2360);
  sub_1A66F46C4(&v57);
  unint64_t v57 = (void **)(a1 + 2336);
  sub_1A66F46C4(&v57);
  sub_1A66F479C((void *)(a1 + 1928));
  uint64_t v2 = *(void **)(a1 + 1904);
  if (v2)
  {
    *(void *)(a1 + 1912) = v2;
    operator delete(v2);
  }
  unsigned int v3 = *(void **)(a1 + 1784);
  if (v3)
  {
    *(void *)(a1 + 1792) = v3;
    operator delete(v3);
  }
  unsigned int v4 = *(void **)(a1 + 1760);
  if (v4)
  {
    *(void *)(a1 + 1768) = v4;
    operator delete(v4);
  }
  unsigned int v5 = *(void **)(a1 + 1736);
  if (v5)
  {
    *(void *)(a1 + 1744) = v5;
    operator delete(v5);
  }
  unsigned int v6 = *(void **)(a1 + 1712);
  if (v6)
  {
    *(void *)(a1 + 1720) = v6;
    operator delete(v6);
  }
  int v7 = *(void **)(a1 + 1688);
  if (v7)
  {
    *(void *)(a1 + 1696) = v7;
    operator delete(v7);
  }
  uint64_t v8 = *(void **)(a1 + 1664);
  if (v8)
  {
    *(void *)(a1 + 1672) = v8;
    operator delete(v8);
  }
  unint64_t v57 = (void **)(a1 + 1560);
  sub_1A66F3F54(&v57);
  unint64_t v57 = (void **)(a1 + 1536);
  sub_1A66F3F54(&v57);
  int v9 = *(void **)(a1 + 1512);
  if (v9)
  {
    *(void *)(a1 + 1520) = v9;
    operator delete(v9);
  }
  unint64_t v10 = *(void **)(a1 + 1488);
  if (v10)
  {
    *(void *)(a1 + 1496) = v10;
    operator delete(v10);
  }
  unint64_t v11 = *(void **)(a1 + 1464);
  if (v11)
  {
    *(void *)(a1 + 1472) = v11;
    operator delete(v11);
  }
  unint64_t v12 = *(void **)(a1 + 1440);
  if (v12)
  {
    *(void *)(a1 + 1448) = v12;
    operator delete(v12);
  }
  float v13 = *(void **)(a1 + 1416);
  if (v13)
  {
    *(void *)(a1 + 1424) = v13;
    operator delete(v13);
  }
  float v14 = *(void **)(a1 + 1392);
  if (v14)
  {
    *(void *)(a1 + 1400) = v14;
    operator delete(v14);
  }
  float v15 = *(void **)(a1 + 1368);
  if (v15)
  {
    *(void *)(a1 + 1376) = v15;
    operator delete(v15);
  }
  float v16 = *(void **)(a1 + 1344);
  if (v16)
  {
    *(void *)(a1 + 1352) = v16;
    operator delete(v16);
  }
  float v17 = *(void **)(a1 + 1320);
  if (v17)
  {
    *(void *)(a1 + 1328) = v17;
    operator delete(v17);
  }
  float v18 = *(void **)(a1 + 1296);
  if (v18)
  {
    *(void *)(a1 + 1304) = v18;
    operator delete(v18);
  }
  float v19 = *(void **)(a1 + 1272);
  if (v19)
  {
    *(void *)(a1 + 1280) = v19;
    operator delete(v19);
  }
  float v20 = *(void **)(a1 + 1248);
  if (v20)
  {
    *(void *)(a1 + 1256) = v20;
    operator delete(v20);
  }
  float v21 = *(void **)(a1 + 1224);
  if (v21)
  {
    *(void *)(a1 + 1232) = v21;
    operator delete(v21);
  }
  uint64_t v22 = *(void **)(a1 + 1200);
  if (v22)
  {
    *(void *)(a1 + 1208) = v22;
    operator delete(v22);
  }
  uint64_t v23 = *(void **)(a1 + 1176);
  if (v23)
  {
    *(void *)(a1 + 1184) = v23;
    operator delete(v23);
  }
  unint64_t v24 = *(void **)(a1 + 1152);
  if (v24)
  {
    *(void *)(a1 + 1160) = v24;
    operator delete(v24);
  }
  unint64_t v25 = *(void **)(a1 + 1128);
  if (v25)
  {
    *(void *)(a1 + 1136) = v25;
    operator delete(v25);
  }
  uint64_t v26 = *(void **)(a1 + 1104);
  if (v26)
  {
    *(void *)(a1 + 1112) = v26;
    operator delete(v26);
  }
  vDSP_Length v27 = *(void **)(a1 + 1080);
  if (v27)
  {
    *(void *)(a1 + 1088) = v27;
    operator delete(v27);
  }
  unint64_t v28 = *(void **)(a1 + 1056);
  if (v28)
  {
    *(void *)(a1 + 1064) = v28;
    operator delete(v28);
  }
  uint64_t v29 = *(void **)(a1 + 1032);
  if (v29)
  {
    *(void *)(a1 + 1040) = v29;
    operator delete(v29);
  }
  unint64_t v30 = *(void **)(a1 + 1008);
  if (v30)
  {
    *(void *)(a1 + 1016) = v30;
    operator delete(v30);
  }
  uint64_t v31 = *(void **)(a1 + 984);
  if (v31)
  {
    *(void *)(a1 + 992) = v31;
    operator delete(v31);
  }
  uint64_t v32 = *(void **)(a1 + 960);
  if (v32)
  {
    *(void *)(a1 + 968) = v32;
    operator delete(v32);
  }
  unint64_t v33 = *(void **)(a1 + 936);
  if (v33)
  {
    *(void *)(a1 + 944) = v33;
    operator delete(v33);
  }
  unint64_t v34 = *(void **)(a1 + 912);
  if (v34)
  {
    *(void *)(a1 + 920) = v34;
    operator delete(v34);
  }
  uint64_t v35 = *(void **)(a1 + 888);
  if (v35)
  {
    *(void *)(a1 + 896) = v35;
    operator delete(v35);
  }
  int v36 = *(void **)(a1 + 864);
  if (v36)
  {
    *(void *)(a1 + 872) = v36;
    operator delete(v36);
  }
  int v37 = *(void **)(a1 + 840);
  if (v37)
  {
    *(void *)(a1 + 848) = v37;
    operator delete(v37);
  }
  int v38 = *(void **)(a1 + 816);
  if (v38)
  {
    *(void *)(a1 + 824) = v38;
    operator delete(v38);
  }
  int v39 = *(void **)(a1 + 720);
  if (v39)
  {
    *(void *)(a1 + 728) = v39;
    operator delete(v39);
  }
  float v40 = *(void **)(a1 + 696);
  if (v40)
  {
    *(void *)(a1 + 704) = v40;
    operator delete(v40);
  }
  uint64_t v41 = *(void **)(a1 + 544);
  if (v41)
  {
    *(void *)(a1 + 552) = v41;
    operator delete(v41);
  }
  uint64_t v42 = *(void **)(a1 + 520);
  if (v42)
  {
    *(void *)(a1 + 528) = v42;
    operator delete(v42);
  }
  uint64_t v43 = *(void **)(a1 + 496);
  if (v43)
  {
    *(void *)(a1 + 504) = v43;
    operator delete(v43);
  }
  uint64_t v44 = *(void **)(a1 + 472);
  if (v44)
  {
    *(void *)(a1 + 480) = v44;
    operator delete(v44);
  }
  unint64_t v45 = *(void **)(a1 + 448);
  if (v45)
  {
    *(void *)(a1 + 456) = v45;
    operator delete(v45);
  }
  uint64_t v46 = *(void **)(a1 + 424);
  if (v46)
  {
    *(void *)(a1 + 432) = v46;
    operator delete(v46);
  }
  uint64_t v47 = *(void **)(a1 + 400);
  if (v47)
  {
    *(void *)(a1 + 408) = v47;
    operator delete(v47);
  }
  uint64_t v48 = *(void **)(a1 + 376);
  if (v48)
  {
    *(void *)(a1 + 384) = v48;
    operator delete(v48);
  }
  uint64_t v49 = *(void **)(a1 + 352);
  if (v49)
  {
    *(void *)(a1 + 360) = v49;
    operator delete(v49);
  }
  uint64_t v50 = *(void **)(a1 + 328);
  if (v50)
  {
    *(void *)(a1 + 336) = v50;
    operator delete(v50);
  }
  long long v51 = *(void **)(a1 + 304);
  if (v51)
  {
    *(void *)(a1 + 312) = v51;
    operator delete(v51);
  }
  unint64_t v52 = *(void **)(a1 + 280);
  if (v52)
  {
    *(void *)(a1 + 288) = v52;
    operator delete(v52);
  }
  float32x4_t v53 = *(void **)(a1 + 256);
  if (v53)
  {
    *(void *)(a1 + 264) = v53;
    operator delete(v53);
  }
  uint64_t v54 = *(void **)(a1 + 232);
  if (v54)
  {
    *(void *)(a1 + 240) = v54;
    operator delete(v54);
  }
  uint64_t v55 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v55;
    operator delete(v55);
  }
  return a1;
}

void *sub_1A66F4640(void *a1)
{
  uint64_t v2 = (void *)a1[17];
  if (v2)
  {
    a1[18] = v2;
    operator delete(v2);
  }
  unsigned int v3 = (void *)a1[14];
  if (v3)
  {
    a1[15] = v3;
    operator delete(v3);
  }
  unsigned int v4 = (void *)a1[11];
  if (v4)
  {
    a1[12] = v4;
    operator delete(v4);
  }
  unsigned int v5 = (void *)a1[8];
  if (v5)
  {
    a1[9] = v5;
    operator delete(v5);
  }
  unsigned int v6 = (void *)a1[5];
  if (v6)
  {
    a1[6] = v6;
    operator delete(v6);
  }
  int v7 = (void *)a1[2];
  if (v7)
  {
    a1[3] = v7;
    operator delete(v7);
  }
  return a1;
}

void sub_1A66F46C4(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (VPTimeFreqConverter **)**a1;
  if (v2)
  {
    unsigned int v4 = (VPTimeFreqConverter **)v1[1];
    unsigned int v5 = **a1;
    if (v4 != v2)
    {
      do
        sub_1A66F474C(--v4, 0);
      while (v4 != v2);
      unsigned int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

VPTimeFreqConverter *sub_1A66F474C(VPTimeFreqConverter **a1, VPTimeFreqConverter *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    VPTimeFreqConverter::~VPTimeFreqConverter(result);
    JUMPOUT(0x1AD0C0C70);
  }
  return result;
}

void *sub_1A66F479C(void *a1)
{
  uint64_t v2 = (void *)a1[42];
  if (v2)
  {
    a1[43] = v2;
    operator delete(v2);
  }
  unsigned int v3 = (void *)a1[39];
  if (v3)
  {
    a1[40] = v3;
    operator delete(v3);
  }
  unsigned int v4 = (void *)a1[36];
  if (v4)
  {
    a1[37] = v4;
    operator delete(v4);
  }
  unsigned int v5 = (void *)a1[33];
  if (v5)
  {
    a1[34] = v5;
    operator delete(v5);
  }
  unsigned int v6 = (void *)a1[30];
  if (v6)
  {
    a1[31] = v6;
    operator delete(v6);
  }
  int v7 = (void *)a1[27];
  if (v7)
  {
    a1[28] = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)a1[24];
  if (v8)
  {
    a1[25] = v8;
    operator delete(v8);
  }
  int v9 = (void *)a1[21];
  if (v9)
  {
    a1[22] = v9;
    operator delete(v9);
  }
  unint64_t v10 = (void *)a1[18];
  if (v10)
  {
    a1[19] = v10;
    operator delete(v10);
  }
  unint64_t v11 = (void *)a1[15];
  if (v11)
  {
    a1[16] = v11;
    operator delete(v11);
  }
  unint64_t v12 = (void *)a1[12];
  if (v12)
  {
    a1[13] = v12;
    operator delete(v12);
  }
  float v13 = (void *)a1[9];
  if (v13)
  {
    a1[10] = v13;
    operator delete(v13);
  }
  float v14 = (void *)a1[6];
  if (v14)
  {
    a1[7] = v14;
    operator delete(v14);
  }
  return a1;
}

void *sub_1A66F4890(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1A66F4908(a1, a2);
    unsigned int v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_1A66F48EC(_Unwind_Exception *exception_object)
{
  unsigned int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1A66F4908(void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    sub_1A66E9D7C();
  }
  uint64_t result = (char *)sub_1A66ED9D4((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void sub_1A66F494C(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 776);
  int v4 = 629145600;
  sub_1A66F4A88((char **)(a1 + 1440), v2, &v4);
  *(unsigned char *)(a1 + 1884) = 0;
  *(_DWORD *)(a1 + 1868) = 0;
  *(void *)(a1 + 800) = 0;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 124) = 0;
  *(_WORD *)(a1 + 810) = 257;
  float __A = 1.0;
  vDSP_vfill(&__A, *(float **)(a1 + 1344), 1, *(void *)(a1 + 776));
  if (*(void *)(a1 + 792)) {
    operator new();
  }
}

void sub_1A66F4A60(_Unwind_Exception *a1)
{
  MEMORY[0x1AD0C0C70](v1, 0x10A0C406C6E14A4);
  _Unwind_Resume(a1);
}

char *sub_1A66F4A88(char **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6 = (uint64_t)a1[2];
  uint64_t result = *a1;
  if (a2 <= (v6 - (uint64_t)result) >> 2)
  {
    float v13 = a1[1];
    unint64_t v14 = (v13 - result) >> 2;
    if (v14 >= a2) {
      uint64_t v15 = a2;
    }
    else {
      uint64_t v15 = (v13 - result) >> 2;
    }
    if (v15)
    {
      float v16 = result;
      do
      {
        *(_DWORD *)float v16 = *a3;
        v16 += 4;
        --v15;
      }
      while (v15);
    }
    if (a2 <= v14)
    {
      a1[1] = &result[4 * a2];
    }
    else
    {
      float v17 = &v13[4 * (a2 - v14)];
      uint64_t v18 = 4 * a2 - 4 * v14;
      do
      {
        *(_DWORD *)float v13 = *a3;
        v13 += 4;
        v18 -= 4;
      }
      while (v18);
      a1[1] = v17;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a2 >> 62) {
      sub_1A66E9D7C();
    }
    uint64_t v8 = v6 >> 1;
    if (v6 >> 1 <= a2) {
      uint64_t v8 = a2;
    }
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v9 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v8;
    }
    uint64_t result = sub_1A66F4908(a1, v9);
    unint64_t v10 = a1[1];
    unint64_t v11 = &v10[4 * a2];
    uint64_t v12 = 4 * a2;
    do
    {
      *(_DWORD *)unint64_t v10 = *a3;
      v10 += 4;
      v12 -= 4;
    }
    while (v12);
    a1[1] = v11;
  }
  return result;
}

float *sub_1A66F4B9C(float *result, uint64_t a2, float *a3, float *a4, unint64_t a5, uint64_t a6, float a7, float a8)
{
  float v9 = *a3;
  float v8 = a3[1];
  float v11 = *result;
  float v10 = result[1];
  if (*a4 >= *result)
  {
    unint64_t v13 = 0;
  }
  else
  {
    uint64_t v12 = 0;
    do
    {
      *(float *)(a6 + 4 * v12) = a7;
      unint64_t v13 = v12 + 1;
      float v14 = a4[++v12];
    }
    while (v14 < *result);
  }
  if (v13 >= a5)
  {
LABEL_20:
    unint64_t v25 = a5 - v13;
    if (a5 > v13)
    {
      uint64_t v26 = (float *)(a6 + 4 * v13);
      do
      {
        *v26++ = a8;
        --v25;
      }
      while (v25);
    }
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v16 = 1;
    float v17 = (float)(v8 - v9) / (float)(v10 - v11);
    do
    {
      float v18 = a4[v13];
      float v19 = result[v16];
      if (v18 >= v19)
      {
        if (v18 <= v19 || v18 >= result[a2 - 1])
        {
          if (v18 == result[v15])
          {
            float v20 = a3[v15];
          }
          else
          {
            if (v18 != v19) {
              goto LABEL_20;
            }
            float v20 = a3[v16];
          }
        }
        else
        {
          do
          {
            float v21 = &result[v16++];
            ++v15;
            float v22 = v21[1];
          }
          while (v18 > v22);
          float v23 = a3[v15];
          float v24 = result[v15];
          float v17 = (float)(a3[v16] - v23) / (float)(v22 - v24);
          float v20 = v23 + (float)(v17 * (float)(v18 - v24));
        }
      }
      else
      {
        float v20 = a3[v15] + (float)(v17 * (float)(v18 - result[v15]));
      }
      *(float *)(a6 + 4 * v13++) = v20;
    }
    while (v13 != a5);
  }
  return result;
}

float sub_1A66F4CBC(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(const float **)a2;
  vDSP_Length v4 = (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2;
  unsigned int v5 = *(const float **)(a1 + 8);
  if (v4 != (uint64_t)(*(void *)(a1 + 16) - (void)v5) >> 2) {
    sub_1A688D670();
  }
  float __C = 0.0;
  vDSP_dotpr(v3, 1, v5, 1, &__C, v4);
  return *(float *)a1 + (float)(log10f(fabsf(__C) + 0.00000011921) * 10.0);
}

float *sub_1A66F4D3C(float *result, uint64_t *a2, int a3)
{
  uint64_t v3 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v6 = result;
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      v11.realp = 0;
      v11.imagp = 0;
      uint64_t result = *(float **)(*((void *)v6 + 192) + v7);
      v11.realp = result;
      v11.imagp = *(float **)(*((void *)v6 + 195) + v7);
      uint64_t v9 = *((void *)v6 + 95);
      if (a3)
      {
        if (v9)
        {
          uint64_t result = (float *)memmove(result, *(const void **)(v3 + v7), 4 * v9);
          uint64_t v10 = *((void *)v6 + 95);
          if (v10) {
            uint64_t result = (float *)memmove(*(void **)(*((void *)v6 + 195) + v7), (const void *)(*(void *)(*a2 + v7) + 4 * v10), 4 * v10);
          }
        }
      }
      else
      {
        if (v9) {
          memmove(*((void **)v6 + 102), *(const void **)(v3 + v7), 4 * v9);
        }
        uint64_t result = (float *)VPTimeFreqConverter::Analyze(*(VPTimeFreqConverter **)(*((void *)v6 + 292) + 8 * v8), *((const float **)v6 + 102), &v11);
      }
      ++v8;
      uint64_t v3 = *a2;
      v7 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) > v8);
  }
  return result;
}

void sub_1A66F4E40(uint64_t a1, const void ***a2, int a3)
{
  vDSP_Length __D = 0;
  float v4 = *(float *)(a1 + 196);
  v12.realp = **(float ***)(a1 + 1536);
  v12.imagp = **(float ***)(a1 + 1560);
  if (a3)
  {
    VPTimeFreqConverter::Synthesize(**(VPTimeFreqConverter ***)(a1 + 2360), &v12, *(float **)(a1 + 816));
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 760);
    if (v5) {
      memmove(*(void **)(a1 + 816), **a2, 4 * v5);
    }
  }
  vDSP_Length v11 = 0;
  vDSP_nzcros(*(const float **)(a1 + 816), 1, *(void *)(a1 + 760), &v11, &__D, *(void *)(a1 + 760));
  float v6 = (float)((float)(v4 * 0.8) / 0.79)
     + (float)((float)((float)(0.0 - v4) / 0.79) * (float)((float)__D / (float)*(unint64_t *)(a1 + 760)));
  float v7 = *(float *)(a1 + 196);
  if (v6 >= v7) {
    float v6 = *(float *)(a1 + 196);
  }
  float v8 = fmaxf(v6, 0.0);
  double v9 = v7 * 0.5;
  float v10 = v7 - v8;
  if (v9 > v8) {
    float v8 = v10;
  }
  *(float *)(a1 + 184) = v8;
}

uint64_t sub_1A66F4F5C(uint64_t a1, DSPSplitComplex *a2)
{
  unint64_t v2 = *(float **)a1;
  unint64_t v3 = *(void *)(a1 + 8) - *(void *)a1;
  if (v3 <= 0x10) {
    sub_1A688D434();
  }
  if (v2[7] <= 0.5)
  {
    if (v3 <= 0x2F0) {
      sub_1A688D434();
    }
    if (v3 <= 0x300) {
      sub_1A688D434();
    }
    if (v2[191] < v2[195]) {
      sub_1A66F533C(a1);
    }
  }
  sub_1A66F53A8(a1, a2);
  *(float *)(a1 + 148) = sub_1A66F4CBC(a1 + 1896, a1 + 1128);
  *(float *)(a1 + 156) = sub_1A66F4CBC(a1 + 1896, a1 + 1440);
  sub_1A66F5578(a1);
  sub_1A66F560C(a1);
  vDSP_vsmul(*(const float **)(a1 + 1128), 1, (const float *)(a1 + 128), *(float **)(a1 + 1128), 1, *(void *)(a1 + 776));
  *(float *)(a1 + 148) = sub_1A66F4CBC(a1 + 1896, a1 + 1128);
  vDSP_vsmul(*(const float **)(a1 + 424), 1, (const float *)(a1 + 128), *(float **)(a1 + 424), 1, *(void *)(a1 + 776));
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6 == 1)
  {
    if (!(*(void *)(a1 + 32) % *(void *)(a1 + 624))) {
      sub_1A66F5E3C(a1);
    }
    sub_1A66F6018(a1);
    float v7 = *(const float **)(a1 + 1056);
    goto LABEL_15;
  }
  if (!v6)
  {
    if (!(*(void *)(a1 + 32) % *(void *)(a1 + 624))) {
      sub_1A66F56C4(a1);
    }
    float v7 = *(const float **)(a1 + 1032);
LABEL_15:
    vDSP_vsmul(v7, 1, (const float *)(a1 + 132), *(float **)(a1 + 816), 1, *(void *)(a1 + 776));
    goto LABEL_17;
  }
  vDSP_vfill((const float *)(a1 + 132), *(float **)(a1 + 816), 1, *(void *)(a1 + 776));
LABEL_17:
  float v8 = *(float **)a1;
  unint64_t v9 = *(void *)(a1 + 8) - *(void *)a1;
  if (v9 <= 0x110) {
    sub_1A688D434();
  }
  v8[71] = *(float *)(a1 + 148);
  v8[27] = *(float *)(a1 + 156);
  if (v9 <= 0x1B0) {
    sub_1A688D434();
  }
  float v10 = 0.0;
  if (*(unsigned char *)(a1 + 809)) {
    float v10 = 1.0;
  }
  v8[111] = v10;
  v8[51] = *(float *)(a1 + 120);
  v8[91] = *(float *)(a1 + 120) + v8[87];
  v8[75] = (float)*(unint64_t *)(a1 + 784);
  if (v8[83] > 0.5) {
    sub_1A66F62A4(a1);
  }
  return a1 + 816;
}

float *sub_1A66F5184(void *a1, float *a2, unint64_t a3, uint64_t a4)
{
  float v4 = (float *)a1[88];
  uint64_t v5 = (float *)a1[87];
  unint64_t v6 = v4 - v5;
  float v7 = (float *)a1[90];
  if (v6 != (uint64_t)(a1[91] - (void)v7) >> 2) {
    sub_1A688D6C8();
  }
  float v8 = (float *)a1[102];
  unint64_t v9 = (uint64_t)(a1[103] - (void)v8) >> 2;
  if (v9 < v6) {
    sub_1A688D69C();
  }
  if (v4 != v5)
  {
    if (v6 <= 1) {
      uint64_t v11 = 1;
    }
    else {
      uint64_t v11 = v4 - v5;
    }
    DSPSplitComplex v12 = (float *)a1[87];
    unint64_t v13 = (float *)a1[102];
    do
    {
      float v14 = *v12++;
      float v15 = (float)(a2[1] - *a2) / (float)(v14 * 0.23156);
      float v16 = *v7++;
      float v17 = exp(v16 * 0.230258509);
      *v13++ = v15 * v17;
      --v11;
    }
    while (v11);
  }
  if (v9 <= v6 - 1) {
    sub_1A66F52C8();
  }
  float v18 = *v8;
  float v19 = v8[v6 - 1];

  return sub_1A66F4B9C(v5, v6, v8, a2, a3, a4, v18, v19);
}

void sub_1A66F52C8()
{
}

void sub_1A66F52E0(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_1A66E78E0(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E5C69328, MEMORY[0x1E4FBA1D0]);
}

void sub_1A66F5328(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1A66F533C(uint64_t a1)
{
  float __B = 1.0;
  vDSP_vsmul(*(const float **)(a1 + 1104), 1, &__B, *(float **)(a1 + 1440), 1, *(void *)(a1 + 776));
  vDSP_vclip(*(const float **)(a1 + 1440), 1, (const float *)(a1 + 164), (const float *)(a1 + 168), *(float **)(a1 + 1440), 1, *(void *)(a1 + 776));
}

void sub_1A66F53A8(uint64_t a1, DSPSplitComplex *a2)
{
  float __C = 0.0;
  unint64_t v3 = *(float **)(a1 + 816);
  vDSP_Length v4 = *(void *)(a1 + 776);
  DSPSplitComplex __A = *a2;
  vDSP_zvmags(&__A, 1, v3, 1, v4);
  uint64_t v5 = *(const float **)(a1 + 816);
  const float *v5 = 0.0;
  vDSP_Length v6 = *(void *)(a1 + 776);
  v5[v6 - 1] = 0.0;
  vDSP_sve(v5, 1, &__C, v6);
  float v7 = __C;
  float v8 = (float)(__C * *(float *)(a1 + 140)) * *(float *)(a1 + 80);
  float v9 = exp(*(float *)(a1 + 580) * 0.230258509);
  if (v8 <= v9)
  {
    *(_WORD *)(a1 + 192) = 0;
    if (*(void *)(a1 + 56)) {
      goto LABEL_7;
    }
    float v12 = *(float *)(a1 + 136);
  }
  else
  {
    float v10 = *(float *)(a1 + 84);
    float v11 = 1.0 - v10;
    float v12 = (float)(v7 * (float)(1.0 - v10)) + (float)(v10 * *(float *)(a1 + 136));
    *(float *)(a1 + 136) = v12;
    *(_WORD *)(a1 + 192) = 1;
    if (*(void *)(a1 + 56))
    {
      *(float *)&__A.realp = v11;
      vDSP_vsmsma(*(const float **)(a1 + 1416), 1, (const float *)(a1 + 84), *(const float **)(a1 + 816), 1, (const float *)&__A, *(float **)(a1 + 1416), 1, *(void *)(a1 + 776));
      goto LABEL_7;
    }
  }
  *(float *)&__A.realp = v12 / 10000000.0;
  vDSP_vsmul(*(const float **)(a1 + 1464), 1, (const float *)&__A, *(float **)(a1 + 1416), 1, *(void *)(a1 + 776));
LABEL_7:
  vDSP_vsmul(*(const float **)(a1 + 1416), 1, (const float *)(a1 + 140), *(float **)(a1 + 1128), 1, *(void *)(a1 + 776));
  vDSP_vsmul(*(const float **)(a1 + 1128), 1, (const float *)(a1 + 80), *(float **)(a1 + 1128), 1, *(void *)(a1 + 776));
  if (*(_WORD *)(a1 + 192))
  {
    vDSP_vsmul(*(const float **)(a1 + 816), 1, (const float *)(a1 + 140), *(float **)(a1 + 424), 1, *(void *)(a1 + 776));
    vDSP_vsmul(*(const float **)(a1 + 424), 1, (const float *)(a1 + 80), *(float **)(a1 + 424), 1, *(void *)(a1 + 776));
  }
}

uint64_t sub_1A66F5578(uint64_t result)
{
  float v1 = *(float *)(result + 156);
  float v2 = *(float *)(result + 148);
  if (vabds_f32(v1, *(float *)(result + 160)) <= *(float *)(result + 592)
    && vabds_f32(v2, *(float *)(result + 152)) <= *(float *)(result + 588)
    && *(float *)(result + 140) == *(float *)(result + 144))
  {
    if ((float)((float)(unint64_t)(*(void *)(result + 32) - *(void *)(result + 800))
               / (float)(*(float *)(result + 116) / (float)*(unint64_t *)(result + 760))) > *(float *)(result + 596))
      *(unsigned char *)(result + 809) = 0;
  }
  else
  {
    *(unsigned char *)(result + 809) = 1;
    *(void *)(result + 800) = *(void *)(result + 32);
    *(float *)(result + 160) = v1;
    *(float *)(result + 152) = v2;
    *(_DWORD *)(result + 144) = *(_DWORD *)(result + 140);
  }
  return result;
}

float sub_1A66F560C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 809) || *(unsigned char *)(a1 + 810))
  {
    if (*(void *)(a1 + 8) - *(void *)a1 <= 0x150uLL) {
      sub_1A688D434();
    }
    double v2 = sub_1A66F63D0(a1 + 1840, *(float *)(a1 + 156), *(float *)(*(void *)a1 + 348));
    *(_DWORD *)(a1 + 120) = LODWORD(v2);
  }
  if (*(void *)(a1 + 64) == 1)
  {
    *(_DWORD *)(a1 + 120) = 0;
    float v3 = 0.0;
  }
  else
  {
    float v3 = *(float *)(a1 + 120);
  }
  *(unsigned char *)(a1 + 810) = 0;
  *(float *)(a1 + 124) = v3;
  double v4 = v3;
  float v5 = exp(v3 * 0.230258509);
  *(float *)(a1 + 128) = v5;
  float result = exp(v4 * 0.115129255);
  *(float *)(a1 + 132) = result;
  return result;
}

void sub_1A66F56C4(uint64_t a1)
{
  vDSP_mmul(*(const float **)(a1 + 1784), 1, *(const float **)(a1 + 1128), 1, *(float **)(a1 + 840), 1, *(void *)(a1 + 1648), 1uLL, *(void *)(a1 + 776));
  vDSP_mmul(*(const float **)(a1 + 1784), 1, *(const float **)(a1 + 1440), 1, *(float **)(a1 + 864), 1, *(void *)(a1 + 1648), 1uLL, *(void *)(a1 + 776));
  *(void *)(a1 + 784) = 0;
  if (*(void *)(a1 + 8) - *(void *)a1 <= 0x1A0uLL) {
    sub_1A688D434();
  }
  if (*(float *)(a1 + 156) >= *(float *)(*(void *)a1 + 428))
  {
    double v2 = (void *)(a1 + 776);
    if (*(unsigned char *)(a1 + 809) || *(unsigned char *)(a1 + 810) || *(unsigned char *)(a1 + 811))
    {
      float __A = 0.0;
      BOOL v3 = 1;
      vDSP_sve(*(const float **)(a1 + 1128), 1, &__A, *(void *)(a1 + 776));
      vDSP_vma(*(const float **)(a1 + 864), 1, *(const float **)(a1 + 1248), 1, *(const float **)(a1 + 840), 1, *(float **)(a1 + 888), 1, *(void *)(a1 + 24));
      vDSP_vsma(*(const float **)(a1 + 840), 1, (const float *)(a1 + 92), *(const float **)(a1 + 864), 1, *(float **)(a1 + 864), 1, *(void *)(a1 + 24));
      float __C = 0.0;
      vDSP_sve(*(const float **)(a1 + 888), 1, &__C, *(void *)(a1 + 24));
      float __B = 1.0 / (float)(__C + 2.2204e-16);
      vDSP_vsmul(*(const float **)(a1 + 888), 1, &__B, *(float **)(a1 + 888), 1, *(void *)(a1 + 24));
      vDSP_vsmul(*(const float **)(a1 + 864), 1, &__B, *(float **)(a1 + 864), 1, *(void *)(a1 + 24));
      vDSP_vmul(*(const float **)(a1 + 888), 1, *(const float **)(a1 + 864), 1, *(float **)(a1 + 840), 1, *(void *)(a1 + 24));
      vDSP_vsq(*(const float **)(a1 + 888), 1, *(float **)(a1 + 912), 1, *(void *)(a1 + 24));
      vDSP_vsq(*(const float **)(a1 + 864), 1, *(float **)(a1 + 864), 1, *(void *)(a1 + 24));
      float v4 = *(float *)(a1 + 148) - *(float *)(a1 + 156);
      float v5 = v4 * (float)(1.0 / (float)(log10f(*(float *)(a1 + 88) + 2.2204e-16) * 10.0));
      if (v5 < 0.0) {
        float v5 = 0.0;
      }
      if (v5 > 1.0) {
        float v5 = 1.0;
      }
      float v35 = v5;
      vDSP_vsmul(*(const float **)(a1 + 1272), 1, &v35, *(float **)(a1 + 1296), 1, *(void *)(a1 + 24));
      vDSP_vneg(*(const float **)(a1 + 1296), 1, *(float **)(a1 + 1296), 1, *(void *)(a1 + 24));
      uint64_t v34 = 0;
      unint64_t v6 = *(void *)(a1 + 24);
      unint64_t v33 = (int *)(a1 + 776);
      if (v6)
      {
        float v7 = *(float **)(a1 + 864);
        if (*v7 <= 2.2204e-16 || (float v8 = *(float **)(a1 + 888), *v8 <= 2.2204e-16))
        {
          BOOL v3 = 0;
        }
        else
        {
          uint64_t v9 = 1;
          do
          {
            unint64_t v10 = v9;
            if (v6 == v9) {
              break;
            }
            if (v7[v9] <= 2.2204e-16) {
              break;
            }
            float v11 = v8[v9++];
          }
          while (v11 > 2.2204e-16);
          BOOL v3 = v6 <= v10;
        }
      }
      *(unsigned char *)(a1 + 808) = v3;
      if ((float)(*(float *)(a1 + 572) * __A) < INFINITY)
      {
        float v12 = 0.0;
        float v13 = -1000000.0;
        do
        {
          unint64_t v14 = *(void *)(a1 + 784);
          if (v14 > *(void *)(a1 + 616)) {
            break;
          }
          *(void *)(a1 + 784) = v14 + 1;
          *((float *)&v34 + 1) = (float)(v12 + v13) * 0.5;
          vDSP_vsma(*(const float **)(a1 + 888), 1, (const float *)&v34 + 1, *(const float **)(a1 + 1296), 1, *(float **)(a1 + 936), 1, *(void *)(a1 + 24));
          vDSP_vmul(*(const float **)(a1 + 864), 1, *(const float **)(a1 + 936), 1, *(float **)(a1 + 960), 1, *(void *)(a1 + 24));
          vDSP_vma(*(const float **)(a1 + 840), 1, *(const float **)(a1 + 1224), 1, *(const float **)(a1 + 960), 1, *(float **)(a1 + 960), 1, *(void *)(a1 + 24));
          vDSP_vmul(*(const float **)(a1 + 936), 1, *(const float **)(a1 + 840), 1, *(float **)(a1 + 1008), 1, *(void *)(a1 + 24));
          vDSP_vmul(*(const float **)(a1 + 1008), 1, *(const float **)(a1 + 1176), 1, *(float **)(a1 + 1008), 1, *(void *)(a1 + 24));
          vDSP_vmul(*(const float **)(a1 + 936), 1, *(const float **)(a1 + 912), 1, *(float **)(a1 + 984), 1, *(void *)(a1 + 24));
          vDSP_vmul(*(const float **)(a1 + 984), 1, *(const float **)(a1 + 1200), 1, *(float **)(a1 + 984), 1, *(void *)(a1 + 24));
          if (*(unsigned char *)(a1 + 808))
          {
            sub_1A66F6508(a1, (const float **)(a1 + 984), (const float **)(a1 + 1008), (float **)(a1 + 984), (const float **)(a1 + 960), (float **)(a1 + 936));
            vDSP_Length v15 = *(void *)(a1 + 24);
          }
          else
          {
            vDSP_Length v15 = *(void *)(a1 + 24);
            if (v15)
            {
              uint64_t v16 = 0;
              uint64_t v17 = *(void *)(a1 + 864);
              do
              {
                if (*(float *)(v17 + 4 * v16) <= 2.2204e-16
                  || *(float *)(*(void *)(a1 + 888) + 4 * v16) <= 2.2204e-16)
                {
                  *(_DWORD *)(*(void *)(a1 + 936) + 4 * v16) = 1065353216;
                }
                ++v16;
              }
              while (v15 != v16);
            }
          }
          vDSP_vthr(*(const float **)(a1 + 936), 1, (const float *)(a1 + 748), *(float **)(a1 + 936), 1, v15);
          sub_1A66F4B9C(*(float **)(a1 + 1664), *(void *)(a1 + 1648), *(float **)(a1 + 936), *(float **)(a1 + 1712), (uint64_t)(*(void *)(a1 + 1720) - *(void *)(a1 + 1712)) >> 2, *(void *)(a1 + 1032), 0.0, 1.0);
          vDSP_vclip(*(const float **)(a1 + 1032), 1, (const float *)(a1 + 100), (const float *)(a1 + 108), *(float **)(a1 + 1032), 1, *(void *)(a1 + 40));
          vDSP_vclip((const float *)(*(void *)(a1 + 1032) + 4 * *(void *)(a1 + 40)), 1, (const float *)(a1 + 104), (const float *)(a1 + 112), (float *)(*(void *)(a1 + 1032) + 4 * *(void *)(a1 + 40)), 1, *(void *)(a1 + 776) - *(void *)(a1 + 40));
          vDSP_dotpr(*(const float **)(a1 + 1032), 1, *(const float **)(a1 + 1128), 1, (float *)&v34, *(void *)(a1 + 776));
          float v18 = vabds_f32(*(float *)&v34, __A);
          if (*(float *)&v34 <= __A) {
            float v13 = *((float *)&v34 + 1);
          }
          else {
            float v12 = *((float *)&v34 + 1);
          }
        }
        while (v18 > (float)(*(float *)(a1 + 572) * __A));
      }
      vvsqrtf(*(float **)(a1 + 1032), *(const float **)(a1 + 1032), v33);
      if (*(void *)(a1 + 8) - *(void *)a1 <= 0x1A0uLL) {
        sub_1A688D434();
      }
      float v19 = (float)(*(float *)(a1 + 156) - *(float *)(*(void *)a1 + 428)) * 0.25;
      if (v19 < 1.0)
      {
        uint64_t v20 = *(void *)v33;
        if (*(void *)v33)
        {
          float v21 = *(float **)(a1 + 1032);
          do
          {
            *float v21 = powf(*v21, v19);
            ++v21;
            --v20;
          }
          while (v20);
        }
      }
    }
    else if (*v2)
    {
      memmove(*(void **)(a1 + 1032), *(const void **)(a1 + 1344), 4 * *v2);
    }
  }
  else
  {
    float __A = 1.0;
    vDSP_vfill(&__A, *(float **)(a1 + 1032), 1, *(void *)(a1 + 776));
    vDSP_vfill(&__A, *(float **)(a1 + 1344), 1, *(void *)(a1 + 776));
  }
  float v22 = *(const float **)(a1 + 1032);
  vDSP_Length v23 = (uint64_t)(*(void *)(a1 + 1040) - (void)v22) >> 2;
  float __A = 0.0;
  vDSP_sve(v22, 1, &__A, v23);
  if ((LODWORD(__A) & 0x7FFFFFFFu) >= 0x7F800000)
  {
    float __A = 1.0;
    vDSP_vfill(&__A, *(float **)(a1 + 1032), 1, *(void *)(a1 + 776));
  }
  *(unsigned char *)(a1 + 811) = 0;
  uint64_t v24 = *(void *)(a1 + 776);
  if (v24)
  {
    unint64_t v25 = *(float **)(a1 + 1032);
    uint64_t v26 = *(float **)(a1 + 1344);
    float v27 = (float)*(unint64_t *)(a1 + 624);
    float v28 = (float)*(unint64_t *)(a1 + 760);
    uint64_t v29 = *(void *)(a1 + 776);
    do
    {
      float v30 = *v26;
      float v31 = *v25 / *v26;
      float v32 = exp((float)((float)(*(float *)(a1 + 176) * v27) / (float)(*(float *)(a1 + 116) / v28)) * 0.115129255);
      if (v31 > v32)
      {
        *unint64_t v25 = v30 * v32;
        *(unsigned char *)(a1 + 811) = 1;
      }
      ++v26;
      ++v25;
      --v29;
    }
    while (v29);
    memmove(*(void **)(a1 + 1344), *(const void **)(a1 + 1032), 4 * v24);
  }
}

void sub_1A66F5E3C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 809) || *(unsigned char *)(a1 + 810) || *(unsigned char *)(a1 + 811))
  {
    vDSP_mmul(*(const float **)(a1 + 1784), 1, *(const float **)(a1 + 1128), 1, *(float **)(a1 + 840), 1, *(void *)(a1 + 1648), 1uLL, *(void *)(a1 + 776));
    vDSP_mmul(*(const float **)(a1 + 1784), 1, *(const float **)(a1 + 1440), 1, *(float **)(a1 + 400), 1, *(void *)(a1 + 1648), 1uLL, *(void *)(a1 + 776));
    float __B = 0.000005;
    vDSP_vsmul(*(const float **)(a1 + 840), 1, &__B, *(float **)(a1 + 232), 1, *(void *)(a1 + 24));
    vvlogf(*(float **)(a1 + 864), *(const float **)(a1 + 232), (const int *)(a1 + 24));
    if (!*(void *)(a1 + 32))
    {
      float __A = 1.0;
      vDSP_svdiv(&__A, *(const float **)(a1 + 544), 1, *(float **)(a1 + 520), 1, *(void *)(a1 + 24));
      vDSP_vadd(*(const float **)(a1 + 520), 1, *(const float **)(a1 + 864), 1, *(float **)(a1 + 520), 1, *(void *)(a1 + 24));
      vDSP_vsmul(*(const float **)(a1 + 544), 1, (const float *)(a1 + 228), *(float **)(a1 + 544), 1, *(void *)(a1 + 24));
      vvpowf(*(float **)(a1 + 496), *(const float **)(a1 + 544), *(const float **)(a1 + 840), (const int *)(a1 + 24));
    }
    float v2 = 1.0;
    vDSP_vsub(*(const float **)(a1 + 864), 1, *(const float **)(a1 + 520), 1, *(float **)(a1 + 888), 1, *(void *)(a1 + 24));
    vDSP_svdiv(&v2, *(const float **)(a1 + 888), 1, *(float **)(a1 + 544), 1, *(void *)(a1 + 24));
    vDSP_vsmul(*(const float **)(a1 + 544), 1, (const float *)(a1 + 228), *(float **)(a1 + 544), 1, *(void *)(a1 + 24));
    sub_1A66F6650(a1, (const float **)(a1 + 400));
    sub_1A66F679C(a1, (const float **)(a1 + 840), (const float **)(a1 + 400));
  }
}

void sub_1A66F6018(uint64_t a1)
{
  float __A = 1.0;
  if (*(_WORD *)(a1 + 192))
  {
    vDSP_mmul(*(const float **)(a1 + 1784), 1, *(const float **)(a1 + 424), 1, *(float **)(a1 + 376), 1, *(void *)(a1 + 1648), 1uLL, *(void *)(a1 + 776));
    float __D = 1.0 - *(float *)(a1 + 84);
    vvlogf(*(float **)(a1 + 864), *(const float **)(a1 + 376), (const int *)(a1 + 24));
    vDSP_vsmsma(*(const float **)(a1 + 520), 1, (const float *)(a1 + 84), *(const float **)(a1 + 864), 1, &__D, *(float **)(a1 + 520), 1, *(void *)(a1 + 24));
    vvpowf(*(float **)(a1 + 472), *(const float **)(a1 + 544), *(const float **)(a1 + 376), (const int *)(a1 + 24));
    vDSP_vsmsma(*(const float **)(a1 + 496), 1, (const float *)(a1 + 84), *(const float **)(a1 + 472), 1, &__D, *(float **)(a1 + 496), 1, *(void *)(a1 + 24));
  }
  if (*(void *)(a1 + 8) - *(void *)a1 <= 0x1A0uLL) {
    sub_1A688D434();
  }
  if (*(float *)(a1 + 156) >= *(float *)(*(void *)a1 + 428) && *(_WORD *)(a1 + 192) && *(unsigned char *)(a1 + 1928))
  {
    sub_1A66F78F4(a1, a1 + 376, (const float **)(a1 + 400));
    sub_1A66F7C20(a1, (const float **)(a1 + 376));
    vDSP_vdiv(*(const float **)(a1 + 376), 1, *(const float **)(a1 + 352), 1, *(float **)(a1 + 840), 1, *(void *)(a1 + 24));
    sub_1A66F4B9C(*(float **)(a1 + 1664), *(void *)(a1 + 1648), *(float **)(a1 + 840), *(float **)(a1 + 1712), (uint64_t)(*(void *)(a1 + 1720) - *(void *)(a1 + 1712)) >> 2, *(void *)(a1 + 1056), 0.0, 1.0);
    vDSP_vclip(*(const float **)(a1 + 1056), 1, (const float *)(a1 + 212), (const float *)(a1 + 220), *(float **)(a1 + 1056), 1, *(void *)(a1 + 40));
    vDSP_vclip((const float *)(*(void *)(a1 + 1056) + 4 * *(void *)(a1 + 40)), 1, (const float *)(a1 + 216), (const float *)(a1 + 224), (float *)(*(void *)(a1 + 1056) + 4 * *(void *)(a1 + 40)), 1, *(void *)(a1 + 776) - *(void *)(a1 + 40));
    vvsqrtf(*(float **)(a1 + 1056), *(const float **)(a1 + 1056), (const int *)(a1 + 776));
  }
  else
  {
    vDSP_vfill(&__A, *(float **)(a1 + 1056), 1, *(void *)(a1 + 776));
    vDSP_vfill(&__A, *(float **)(a1 + 1368), 1, *(void *)(a1 + 776));
  }
  float v2 = *(const float **)(a1 + 1056);
  vDSP_Length v3 = (uint64_t)(*(void *)(a1 + 1064) - (void)v2) >> 2;
  float __C = 0.0;
  vDSP_sve(v2, 1, &__C, v3);
  if ((LODWORD(__C) & 0x7FFFFFFFu) >= 0x7F800000) {
    vDSP_vfill(&__A, *(float **)(a1 + 1056), 1, *(void *)(a1 + 776));
  }
  *(unsigned char *)(a1 + 811) = 0;
}

void sub_1A66F62A4(uint64_t a1)
{
  vDSP_vclr((float *)(a1 + 1584), 1, 0x10uLL);
  uint64_t v2 = *(void *)(a1 + 776);
  if (v2)
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)(a1 + 1080);
    while (1)
    {
      uint64_t v7 = a1 + 4 * v5;
      if (*(float *)(v6 + 4 * v3) >= *(float *)(v7 + 632))
      {
        float v8 = *(float *)(v7 + 1584) / fmaxf((float)v4, 1.0);
        *(float *)(v7 + 1584) = v8;
        if (v5 + 28 >= (unint64_t)((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4)) {
          sub_1A688D434();
        }
        *(float *)(*(void *)a1 + 16 * (v5 + 28) + 12) = v8;
        if (++v5 == 16) {
          return;
        }
        unint64_t v4 = 0;
      }
      uint64_t v9 = *(void *)(a1 + 48);
      unint64_t v10 = (void *)(a1 + 1032);
      if (!v9) {
        goto LABEL_10;
      }
      if (v9 == 1) {
        break;
      }
LABEL_11:
      ++v4;
      if (v2 == ++v3) {
        return;
      }
    }
    unint64_t v10 = (void *)(a1 + 1056);
LABEL_10:
    *(float *)(a1 + 4 * v5 + 1584) = *(float *)(a1 + 4 * v5 + 1584)
                                   + (float)(log10f(*(float *)(*v10 + 4 * v3) + 2.2204e-16) * 20.0);
    goto LABEL_11;
  }
}

double sub_1A66F63D0(uint64_t a1, float a2, float a3)
{
  float v3 = *(float *)(a1 + 4);
  if (!*(unsigned char *)(a1 + 44))
  {
    *(float *)(a1 + 32) = a3;
    *(float *)(a1 + 36) = v3;
    *(float *)(a1 + 40) = a3;
    *(_WORD *)(a1 + 44) = 1;
  }
  if (v3 > a2)
  {
    *(float *)(a1 + 40) = a3;
    *(unsigned char *)(a1 + 45) = 0;
LABEL_5:
    float v4 = a3;
    goto LABEL_20;
  }
  if (*(unsigned char *)(a1 + 45))
  {
    if (*(float *)(a1 + 48) <= a2)
    {
      float v6 = *(float *)(a1 + 32);
      if (v6 <= a3)
      {
        float v4 = *(float *)(a1 + 40);
      }
      else
      {
        float v4 = (float)(a3 - v6) + *(float *)(a1 + 40);
        *(float *)(a1 + 40) = v4;
        *(unsigned char *)(a1 + 45) = 0;
      }
      goto LABEL_16;
    }
    *(unsigned char *)(a1 + 45) = 0;
  }
  uint64_t v5 = 12;
  if (*(float *)(a1 + 8) < a2) {
    uint64_t v5 = 16;
  }
  float v4 = (float)(*(float *)(a1 + 40) + (float)(*(float *)(a1 + v5) * (float)(a2 - *(float *)(a1 + 36))))
     + (float)(a3 - *(float *)(a1 + 32));
  *(float *)(a1 + 40) = v4;
  if (v4 > *(float *)(a1 + 20))
  {
    *(unsigned char *)(a1 + 45) = 1;
    *(float *)(a1 + 48) = a2;
  }
LABEL_16:
  float v7 = *(float *)(a1 + 20);
  if (v4 <= v7)
  {
    if (v4 < a3)
    {
      *(float *)(a1 + 40) = a3;
      goto LABEL_5;
    }
  }
  else
  {
    *(float *)(a1 + 40) = v7;
    float v4 = v7;
  }
LABEL_20:
  *(float *)(a1 + 32) = a3;
  *(float *)(a1 + 36) = a2;
  *(float *)&double result = v4 - a3;
  *(float *)(a1 + 28) = v4 - a3;
  float v9 = *(float *)a1;
  if (*(float *)&result > *(float *)a1)
  {
    *(float *)(a1 + 28) = v9;
    *(float *)&double result = v9;
  }
  if (fabsf(*(float *)&result) == INFINITY)
  {
    *(_DWORD *)(a1 + 28) = 0;
    return 0.0;
  }
  return result;
}

void sub_1A66F6508(uint64_t a1, const float **a2, const float **a3, float **a4, const float **a5, float **a6)
{
  uint64_t v10 = a1 + 24;
  vDSP_vmul(*a2, 1, *a5, 1, *a6, 1, *(void *)(a1 + 24));
  vDSP_vsmul(*a6, 1, (const float *)(v10 + 720), *a6, 1, *(void *)v10);
  vDSP_vsq(*a3, 1, *a4, 1, *(void *)v10);
  vDSP_vsub(*a6, 1, *a4, 1, *a6, 1, *(void *)v10);
  vDSP_vthr(*a6, 1, (const float *)(v10 + 724), *a6, 1, *(void *)v10);
  vvsqrtf(*a6, *a6, (const int *)v10);
  vDSP_vsub(*a3, 1, *a6, 1, *a6, 1, *(void *)v10);
  vDSP_vdiv(*a6, 1, *a5, 1, *a6, 1, *(void *)v10);
  float v11 = *a6;
  vDSP_Length v12 = *(void *)v10;
  float v13 = *a6;

  vDSP_vsmul(v11, 1, (const float *)(v10 + 728), v13, 1, v12);
}

void sub_1A66F6650(uint64_t a1, const float **a2)
{
  uint64_t v3 = a1 + 24;
  vDSP_vfill((const float *)(a1 + 188), *(float **)(a1 + 912), 1, *(void *)(a1 + 24));
  vvpowf(*(float **)(v3 + 232), *a2, *(const float **)(v3 + 888), (const int *)v3);
  vvpowf(*(float **)(v3 + 912), *(const float **)(v3 + 520), *(const float **)(v3 + 208), (const int *)v3);
  vDSP_vmul(*(const float **)(v3 + 232), 1, *(const float **)(v3 + 208), 1, *(float **)(v3 + 888), 1, *(void *)v3);
  vDSP_vsub(*(const float **)(v3 + 888), 1, *(const float **)(v3 + 208), 1, *(float **)(v3 + 936), 1, *(void *)v3);
  vDSP_vadd(*a2, 1, *(const float **)(v3 + 936), 1, *(float **)(v3 + 936), 1, *(void *)v3);
  vDSP_vdiv(*(const float **)(v3 + 912), 1, *(const float **)(v3 + 936), 1, *(float **)(v3 + 280), 1, *(void *)v3);
  float __B = -2.0;
  vDSP_vmul(*(const float **)(v3 + 520), 1, *(const float **)(v3 + 912), 1, *(float **)(v3 + 936), 1, *(void *)v3);
  vDSP_vsmul(*(const float **)(v3 + 936), 1, &__B, *(float **)(v3 + 936), 1, *(void *)v3);
  vDSP_vdiv(*(const float **)(v3 + 936), 1, *a2, 1, *(float **)(v3 + 304), 1, *(void *)v3);
}

void sub_1A66F679C(uint64_t a1, const float **a2, const float **a3)
{
  uint64_t v6 = a1 + 888;
  uint64_t v7 = a1 + 912;
  uint64_t v8 = a1 + 936;
  uint64_t v9 = a1 + 960;
  float __C = 0.0;
  vDSP_sve(*a2, 1, &__C, *(void *)(a1 + 24));
  float v12 = 0.0;
  vDSP_sve(*(const float **)(a1 + 1128), 1, &v12, *(void *)(a1 + 776));
  float __C = (float)(__C + v12) * 0.5;
  vDSP_vmul(*(const float **)(a1 + 256), 1, *a2, 1, *(float **)(a1 + 888), 1, *(void *)(a1 + 24));
  vDSP_vma(*(const float **)(a1 + 304), 1, *(const float **)(a1 + 496), 1, *(const float **)(a1 + 888), 1, *(float **)(a1 + 888), 1, *(void *)(a1 + 24));
  vDSP_vsub(*a3, 1, *(const float **)(a1 + 888), 1, *(float **)(a1 + 888), 1, *(void *)(a1 + 24));
  vDSP_vdiv(*(const float **)(a1 + 544), 1, *a3, 1, *(float **)(a1 + 912), 1, *(void *)(a1 + 24));
  vDSP_vsmul(*(const float **)(a1 + 912), 1, (const float *)(a1 + 756), *(float **)(a1 + 912), 1, *(void *)(a1 + 24));
  vDSP_vma(*(const float **)(a1 + 328), 1, *(const float **)(a1 + 496), 1, *(const float **)(a1 + 912), 1, *(float **)(a1 + 912), 1, *(void *)(a1 + 24));
  float __B = 0.0;
  vDSP_sve(*(const float **)(a1 + 888), 1, &__B, *(void *)(a1 + 24));
  float __B = -(float)(__B - __C);
  vDSP_vsdiv(*(const float **)(a1 + 912), 1, &__B, *(float **)(a1 + 936), 1, *(void *)(a1 + 24));
  float v10 = 2.0;
  vDSP_vsmul(*(const float **)(a1 + 544), 1, &v10, *(float **)(a1 + 912), 1, *(void *)(a1 + 24));
  float v10 = 0.001;
  vDSP_vsmul(*(const float **)(a1 + 544), 1, &v10, *(float **)(a1 + 888), 1, *(void *)(a1 + 24));
  vDSP_vsq(*(const float **)(a1 + 912), 1, *(float **)(a1 + 960), 1, *(void *)(a1 + 24));
  vDSP_vdiv(*(const float **)(a1 + 960), 1, *(const float **)(a1 + 448), 1, *(float **)(a1 + 960), 1, *(void *)(a1 + 24));
  sub_1A66F69F4(a1 + 1928, v9, v6, v7, v8, 1.0);
}

void sub_1A66F69F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float a6)
{
  float v11 = (char *)(a1 + 48);
  if (v11 != (char *)a2) {
    sub_1A66F7780(v11, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  }
  if (a1 + 72 != a3) {
    sub_1A66F7780((char *)(a1 + 72), *(char **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  }
  if (a1 + 96 != a4) {
    sub_1A66F7780((char *)(a1 + 96), *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  }
  if (a1 + 120 != a5) {
    sub_1A66F7780((char *)(a1 + 120), *(char **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2);
  }
  *(float *)(a1 + 32) = a6;
  *(void *)(a1 + 376) = 0;
  if (*(void *)(a1 + 8))
  {
    unint64_t v12 = 0;
    vDSP_Length v13 = 0;
    uint64_t v14 = *(void *)(a1 + 192);
    unint64_t v15 = (*(void *)(a1 + 200) - v14) >> 3;
    do
    {
      if (v15 <= v12) {
        sub_1A66F52C8();
      }
      *(void *)(v14 + 8 * v12) = v13;
      unint64_t v12 = *(void *)(a1 + 376) + 1;
      *(void *)(a1 + 376) = v12;
      ++v13;
      vDSP_Length v16 = *(void *)(a1 + 8);
    }
    while (v16 > v13);
  }
  else
  {
    vDSP_Length v16 = 0;
  }
  *(float *)(a1 + 36) = a6;
  *(void *)(a1 + 16) = v16;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  float __A = 0.0;
  vDSP_vfill(&__A, *(float **)(a1 + 288), 1, v16);
  vDSP_vmul(*(const float **)(a1 + 48), 1, *(const float **)(a1 + 72), 1, *(float **)(a1 + 312), 1, *(void *)(a1 + 8));
  vDSP_vdiv(*(const float **)(a1 + 120), 1, *(const float **)(a1 + 312), 1, *(float **)(a1 + 312), 1, *(void *)(a1 + 8));
  float __B = -2.0;
  vDSP_vsmul(*(const float **)(a1 + 312), 1, &__B, *(float **)(a1 + 312), 1, *(void *)(a1 + 8));
  vDSP_vmul(*(const float **)(a1 + 48), 1, *(const float **)(a1 + 96), 1, *(float **)(a1 + 336), 1, *(void *)(a1 + 8));
  vDSP_vdiv(*(const float **)(a1 + 120), 1, *(const float **)(a1 + 336), 1, *(float **)(a1 + 336), 1, *(void *)(a1 + 8));
  vDSP_vsmul(*(const float **)(a1 + 336), 1, &__B, *(float **)(a1 + 336), 1, *(void *)(a1 + 8));
  float __C = 0.0;
  vDSP_dotpr(*(const float **)(a1 + 120), 1, *(const float **)(a1 + 96), 1, &__C, *(void *)(a1 + 8));
  if (__C >= *(float *)(a1 + 32))
  {
    while (*(void *)(a1 + 24) < *(void *)(a1 + 8))
    {
      sub_1A66F6CF4(a1);
      sub_1A66F6DC0(a1);
      sub_1A66F6F10(a1);
      float v22 = *(float *)(a1 + 44);
      if (v22 <= 0.0)
      {
        if (v22 >= 0.0)
        {
          if (v22 == 0.0 || !*(void *)(a1 + 384))
          {
            sub_1A66F7364((void *)a1);
            break;
          }
          *(unsigned char *)a1 = 0;
        }
        else
        {
          sub_1A66F7224((float *)a1);
        }
      }
      else
      {
        sub_1A66F70E4((float *)a1);
      }
    }
    sub_1A66F7450(a1);
    *(unsigned char *)a1 = 1;
  }
  else
  {
    uint64_t v17 = *(void *)(a1 + 8);
    if (v17)
    {
      unint64_t v18 = 0;
      float v19 = *(char **)a3;
      uint64_t v20 = (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2;
      do
      {
        if (v20 == v18 || (uint64_t v21 = *(void *)(a1 + 288), v18 >= (*(void *)(a1 + 296) - v21) >> 2)) {
          sub_1A66F52C8();
        }
        *(_DWORD *)(v21 + 4 * v18) = *(_DWORD *)&v19[4 * v18];
        *(unsigned char *)a1 = 0;
        ++v18;
      }
      while (v17 != v18);
    }
  }
}

uint64_t sub_1A66F6CF4(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 376);
  if (v1)
  {
    uint64_t v2 = *(unint64_t **)(result + 192);
    uint64_t v3 = (uint64_t)(*(void *)(result + 200) - (void)v2) >> 3;
    float v4 = 0.0;
    do
    {
      if (!v3) {
        sub_1A66F52C8();
      }
      unint64_t v5 = *v2;
      uint64_t v6 = *(void *)(result + 120);
      if (*v2 >= (*(void *)(result + 128) - v6) >> 2) {
        sub_1A66F52C8();
      }
      uint64_t v7 = *(void *)(result + 48);
      if (v5 >= (*(void *)(result + 56) - v7) >> 2) {
        sub_1A66F52C8();
      }
      float v4 = *(float *)(v6 + 4 * v5) * *(float *)(v6 + 4 * v5) / *(float *)(v7 + 4 * v5) + v4;
      --v3;
      ++v2;
      --v1;
    }
    while (v1);
    *(float *)(result + 40) = (float)(*(float *)(result + 36) * -2.0) / v4;
  }
  else
  {
    *(unsigned char *)double result = 0;
  }
  return result;
}

uint64_t sub_1A66F6DC0(uint64_t result)
{
  *(void *)(result + 384) = 0;
  *(void *)(result + 392) = 0;
  *(void *)(result + 400) = 0;
  if (*(void *)(result + 376))
  {
    unint64_t v1 = 0;
    uint64_t v2 = *(void *)(result + 192);
    float v3 = *(float *)(result + 40);
    uint64_t v4 = (*(void *)(result + 200) - v2) >> 3;
    do
    {
      if (v4 == v1) {
        sub_1A66F52C8();
      }
      unint64_t v5 = *(void *)(v2 + 8 * v1);
      uint64_t v6 = *(void *)(result + 312);
      if (v5 >= (*(void *)(result + 320) - v6) >> 2) {
        sub_1A66F52C8();
      }
      if (v3 >= *(float *)(v6 + 4 * v5))
      {
        unint64_t v12 = *(void *)(result + 392);
        uint64_t v13 = *(void *)(result + 240);
        if (v12 >= (*(void *)(result + 248) - v13) >> 3) {
          sub_1A66F52C8();
        }
        float v10 = (unint64_t *)(v13 + 8 * v12);
        float v11 = (void *)(result + 392);
      }
      else
      {
        uint64_t v7 = *(void *)(result + 336);
        if (v5 >= (*(void *)(result + 344) - v7) >> 2) {
          sub_1A66F52C8();
        }
        if (v3 <= *(float *)(v7 + 4 * v5))
        {
          unint64_t v14 = *(void *)(result + 400);
          uint64_t v15 = *(void *)(result + 264);
          if (v14 >= (*(void *)(result + 272) - v15) >> 3) {
            sub_1A66F52C8();
          }
          float v10 = (unint64_t *)(v15 + 8 * v14);
          float v11 = (void *)(result + 400);
        }
        else
        {
          unint64_t v8 = *(void *)(result + 384);
          uint64_t v9 = *(void *)(result + 216);
          if (v8 >= (*(void *)(result + 224) - v9) >> 3) {
            sub_1A66F52C8();
          }
          float v10 = (unint64_t *)(v9 + 8 * v8);
          float v11 = (void *)(result + 384);
        }
      }
      unint64_t *v10 = v5;
      ++*v11;
      ++v1;
    }
    while (*(void *)(result + 376) > v1);
  }
  return result;
}

uint64_t sub_1A66F6F10(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 384);
  float v2 = 0.0;
  float v3 = 0.0;
  if (v1)
  {
    uint64_t v4 = *(unint64_t **)(result + 216);
    uint64_t v5 = (uint64_t)(*(void *)(result + 224) - (void)v4) >> 3;
    do
    {
      if (!v5) {
        goto LABEL_25;
      }
      unint64_t v6 = *v4;
      uint64_t v7 = *(void *)(result + 120);
      if (*v4 >= (*(void *)(result + 128) - v7) >> 2) {
LABEL_26:
      }
        sub_1A66F52C8();
      uint64_t v8 = *(void *)(result + 48);
      if (v6 >= (*(void *)(result + 56) - v8) >> 2) {
        goto LABEL_24;
      }
      float v3 = *(float *)(v7 + 4 * v6) * *(float *)(v7 + 4 * v6) / *(float *)(v8 + 4 * v6) + v3;
      --v5;
      ++v4;
      --v1;
    }
    while (v1);
    float v3 = (float)(*(float *)(result + 40) * -0.5) * v3;
  }
  uint64_t v9 = *(void *)(result + 392);
  if (v9)
  {
    float v10 = *(unint64_t **)(result + 240);
    uint64_t v11 = (uint64_t)(*(void *)(result + 248) - (void)v10) >> 3;
    float v2 = 0.0;
    while (v11)
    {
      unint64_t v12 = *v10;
      uint64_t v13 = *(void *)(result + 120);
      if (*v10 >= (*(void *)(result + 128) - v13) >> 2) {
        goto LABEL_26;
      }
      uint64_t v14 = *(void *)(result + 72);
      if (v12 >= (*(void *)(result + 80) - v14) >> 2) {
        goto LABEL_24;
      }
      float v2 = v2 + (float)(*(float *)(v13 + 4 * v12) * *(float *)(v14 + 4 * v12));
      --v11;
      ++v10;
      if (!--v9) {
        goto LABEL_14;
      }
    }
LABEL_25:
    sub_1A66F52C8();
  }
LABEL_14:
  uint64_t v15 = *(void *)(result + 400);
  float v16 = 0.0;
  if (v15)
  {
    uint64_t v17 = *(unint64_t **)(result + 264);
    uint64_t v18 = (uint64_t)(*(void *)(result + 272) - (void)v17) >> 3;
    while (1)
    {
      if (!v18) {
        sub_1A66F52C8();
      }
      unint64_t v19 = *v17;
      uint64_t v20 = *(void *)(result + 120);
      if (*v17 >= (*(void *)(result + 128) - v20) >> 2) {
        sub_1A66F52C8();
      }
      uint64_t v21 = *(void *)(result + 96);
      if (v19 >= (*(void *)(result + 104) - v21) >> 2) {
        break;
      }
      float v16 = v16 + (float)(*(float *)(v20 + 4 * v19) * *(float *)(v21 + 4 * v19));
      --v18;
      ++v17;
      if (!--v15) {
        goto LABEL_20;
      }
    }
LABEL_24:
    sub_1A66F52C8();
  }
LABEL_20:
  float v22 = (float)(v3 + v2) + v16;
  float v23 = *(float *)(result + 36);
  if (vabds_f32(v22, v23) >= 0.0000001) {
    float v24 = v22 - v23;
  }
  else {
    float v24 = 0.0;
  }
  *(float *)(result + 44) = v24;
  return result;
}

float *sub_1A66F70E4(float *result)
{
  int v8 = 0;
  if (*((void *)result + 49))
  {
    uint64_t v1 = result;
    unint64_t v2 = 0;
    do
    {
      uint64_t v3 = *((void *)v1 + 30);
      if (v2 >= (*((void *)v1 + 31) - v3) >> 3) {
        sub_1A66F52C8();
      }
      int v8 = *(void *)(v3 + 8 * v2);
      uint64_t v4 = *((void *)v1 + 15);
      if (v8 >= (unint64_t)((*((void *)v1 + 16) - v4) >> 2)) {
        sub_1A66F52C8();
      }
      uint64_t v5 = *((void *)v1 + 9);
      if (v8 >= (unint64_t)((*((void *)v1 + 10) - v5) >> 2)) {
        sub_1A66F52C8();
      }
      v1[9] = v1[9] - (float)(*(float *)(v4 + 4 * v8) * *(float *)(v5 + 4 * v8));
      double result = (float *)sub_1A66F788C(*((void **)v1 + 24), (void *)(*((void *)v1 + 24) + 8 * *((void *)v1 + 47)), &v8);
      *((void *)v1 + 47) = ((uint64_t)result - *((void *)v1 + 24)) >> 3;
      *((int64x2_t *)v1 + 1) = vaddq_s64(*(int64x2_t *)(v1 + 4), (int64x2_t)xmmword_1A689D2B0);
      unint64_t v6 = *((void *)v1 + 45);
      uint64_t v7 = *((void *)v1 + 18);
      if (v6 >= (*((void *)v1 + 19) - v7) >> 3) {
        sub_1A66F52C8();
      }
      *(void *)(v7 + 8 * v6) = v8;
      ++*((void *)v1 + 45);
      ++v2;
    }
    while (*((void *)v1 + 49) > v2);
  }
  return result;
}

float *sub_1A66F7224(float *result)
{
  int v8 = 0;
  if (*((void *)result + 50))
  {
    uint64_t v1 = result;
    unint64_t v2 = 0;
    do
    {
      uint64_t v3 = *((void *)v1 + 33);
      if (v2 >= (*((void *)v1 + 34) - v3) >> 3) {
        sub_1A66F52C8();
      }
      int v8 = *(void *)(v3 + 8 * v2);
      uint64_t v4 = *((void *)v1 + 15);
      if (v8 >= (unint64_t)((*((void *)v1 + 16) - v4) >> 2)) {
        sub_1A66F52C8();
      }
      uint64_t v5 = *((void *)v1 + 12);
      if (v8 >= (unint64_t)((*((void *)v1 + 13) - v5) >> 2)) {
        sub_1A66F52C8();
      }
      v1[9] = v1[9] - (float)(*(float *)(v4 + 4 * v8) * *(float *)(v5 + 4 * v8));
      double result = (float *)sub_1A66F788C(*((void **)v1 + 24), (void *)(*((void *)v1 + 24) + 8 * *((void *)v1 + 47)), &v8);
      *((void *)v1 + 47) = ((uint64_t)result - *((void *)v1 + 24)) >> 3;
      *((int64x2_t *)v1 + 1) = vaddq_s64(*(int64x2_t *)(v1 + 4), (int64x2_t)xmmword_1A689D2B0);
      unint64_t v6 = *((void *)v1 + 46);
      uint64_t v7 = *((void *)v1 + 21);
      if (v6 >= (*((void *)v1 + 22) - v7) >> 3) {
        sub_1A66F52C8();
      }
      *(void *)(v7 + 8 * v6) = v8;
      ++*((void *)v1 + 46);
      ++v2;
    }
    while (*((void *)v1 + 50) > v2);
  }
  return result;
}

void *sub_1A66F7364(void *result)
{
  if (result[49])
  {
    uint64_t v1 = 0;
    uint64_t v2 = result[30];
    uint64_t v3 = (result[31] - v2) >> 3;
    while (v3 != v1)
    {
      unint64_t v4 = result[45];
      uint64_t v5 = result[18];
      if (v4 >= (result[19] - v5) >> 3) {
LABEL_13:
      }
        sub_1A66F52C8();
      *(void *)(v5 + 8 * v4) = *(int *)(v2 + 8 * v1);
      ++result[45];
      if (result[49] <= (unint64_t)++v1) {
        goto LABEL_6;
      }
    }
LABEL_12:
    sub_1A66F52C8();
  }
LABEL_6:
  if (result[50])
  {
    uint64_t v6 = 0;
    uint64_t v7 = result[33];
    uint64_t v8 = (result[34] - v7) >> 3;
    while (v8 != v6)
    {
      unint64_t v9 = result[46];
      uint64_t v10 = result[21];
      if (v9 >= (result[22] - v10) >> 3) {
        goto LABEL_13;
      }
      *(void *)(v10 + 8 * v9) = *(int *)(v7 + 8 * v6);
      ++result[46];
      if (result[50] <= (unint64_t)++v6) {
        return result;
      }
    }
    goto LABEL_12;
  }
  return result;
}

uint64_t sub_1A66F7450(uint64_t result)
{
  if (*(float *)(result + 40) <= 0.0)
  {
    uint64_t v24 = *(void *)(result + 360);
    if (v24)
    {
      unint64_t v25 = *(unint64_t **)(result + 144);
      uint64_t v26 = (uint64_t)(*(void *)(result + 152) - (void)v25) >> 3;
      while (v26)
      {
        unint64_t v27 = *v25;
        uint64_t v28 = *(void *)(result + 72);
        if (*v25 >= (*(void *)(result + 80) - v28) >> 2) {
LABEL_52:
        }
          sub_1A66F52C8();
        uint64_t v29 = *(void *)(result + 288);
        if (v27 >= (*(void *)(result + 296) - v29) >> 2) {
LABEL_53:
        }
          sub_1A66F52C8();
        *(_DWORD *)(v29 + 4 * v27) = *(_DWORD *)(v28 + 4 * v27);
        --v26;
        ++v25;
        if (!--v24) {
          goto LABEL_36;
        }
      }
    }
    else
    {
LABEL_36:
      uint64_t v30 = *(void *)(result + 368);
      if (v30)
      {
        float v31 = *(unint64_t **)(result + 168);
        uint64_t v32 = (uint64_t)(*(void *)(result + 176) - (void)v31) >> 3;
        while (v32)
        {
          unint64_t v33 = *v31;
          uint64_t v34 = *(void *)(result + 96);
          if (*v31 >= (*(void *)(result + 104) - v34) >> 2) {
            goto LABEL_52;
          }
          uint64_t v35 = *(void *)(result + 288);
          if (v33 >= (*(void *)(result + 296) - v35) >> 2) {
            goto LABEL_53;
          }
          *(_DWORD *)(v35 + 4 * v33) = *(_DWORD *)(v34 + 4 * v33);
          --v32;
          ++v31;
          if (!--v30) {
            goto LABEL_42;
          }
        }
      }
      else
      {
LABEL_42:
        uint64_t v36 = *(void *)(result + 384);
        if (!v36) {
          return result;
        }
        int v37 = *(unint64_t **)(result + 216);
        for (uint64_t i = (uint64_t)(*(void *)(result + 224) - (void)v37) >> 3; i; --i)
        {
          unint64_t v39 = *v37;
          uint64_t v40 = *(void *)(result + 120);
          if (*v37 >= (*(void *)(result + 128) - v40) >> 2) {
            goto LABEL_52;
          }
          uint64_t v41 = *(void *)(result + 48);
          if (v39 >= (*(void *)(result + 56) - v41) >> 2) {
            goto LABEL_53;
          }
          uint64_t v42 = *(void *)(result + 288);
          if (v39 >= (*(void *)(result + 296) - v42) >> 2) {
LABEL_54:
          }
            sub_1A66F52C8();
          *(float *)(v42 + 4 * v39) = (float)(*(float *)(v40 + 4 * v39) * (float)-*(float *)(result + 40))
                                    / (float)(*(float *)(v41 + 4 * v39) + *(float *)(v41 + 4 * v39));
          ++v37;
          if (!--v36) {
            return result;
          }
        }
      }
    }
LABEL_51:
    sub_1A66F52C8();
  }
  uint64_t v1 = *(void *)(result + 368);
  if (v1)
  {
    uint64_t v2 = *(unint64_t **)(result + 168);
    uint64_t v3 = (uint64_t)(*(void *)(result + 176) - (void)v2) >> 3;
    while (v3)
    {
      unint64_t v4 = *v2;
      uint64_t v5 = *(void *)(result + 96);
      if (*v2 >= (*(void *)(result + 104) - v5) >> 2) {
        goto LABEL_52;
      }
      uint64_t v6 = *(void *)(result + 288);
      if (v4 >= (*(void *)(result + 296) - v6) >> 2) {
        goto LABEL_53;
      }
      *(_DWORD *)(v6 + 4 * v4) = *(_DWORD *)(v5 + 4 * v4);
      --v3;
      ++v2;
      if (!--v1) {
        goto LABEL_8;
      }
    }
    goto LABEL_51;
  }
LABEL_8:
  uint64_t v7 = *(void *)(result + 384);
  if (v7)
  {
    uint64_t v8 = *(unint64_t **)(result + 216);
    uint64_t v9 = (uint64_t)(*(void *)(result + 224) - (void)v8) >> 3;
    while (v9)
    {
      unint64_t v10 = *v8;
      uint64_t v11 = *(void *)(result + 96);
      if (*v8 >= (*(void *)(result + 104) - v11) >> 2) {
        goto LABEL_52;
      }
      uint64_t v12 = *(void *)(result + 288);
      if (v10 >= (*(void *)(result + 296) - v12) >> 2) {
        goto LABEL_53;
      }
      float v13 = *(float *)(v11 + 4 * v10);
      if (v13 > 0.0) {
        float v13 = 0.0;
      }
      *(float *)(v12 + 4 * v10) = v13;
      --v9;
      ++v8;
      if (!--v7) {
        goto LABEL_16;
      }
    }
    goto LABEL_51;
  }
LABEL_16:
  uint64_t v14 = *(void *)(result + 360);
  if (v14)
  {
    uint64_t v15 = *(unint64_t **)(result + 144);
    for (uint64_t j = (uint64_t)(*(void *)(result + 152) - (void)v15) >> 3; j; --j)
    {
      unint64_t v17 = *v15;
      uint64_t v18 = *(void *)(result + 72);
      if (*v15 >= (*(void *)(result + 80) - v18) >> 2) {
        goto LABEL_52;
      }
      float v19 = *(float *)(v18 + 4 * v17);
      if (v19 >= 0.0)
      {
        uint64_t v23 = *(void *)(result + 288);
        if (v17 >= (*(void *)(result + 296) - v23) >> 2) {
          goto LABEL_53;
        }
        *(float *)(v23 + 4 * v17) = v19;
      }
      else
      {
        uint64_t v20 = *(void *)(result + 96);
        if (v17 >= (*(void *)(result + 104) - v20) >> 2) {
          goto LABEL_54;
        }
        uint64_t v21 = *(void *)(result + 288);
        if (v17 >= (*(void *)(result + 296) - v21) >> 2) {
          goto LABEL_53;
        }
        float v22 = *(float *)(v20 + 4 * v17);
        if (v22 > 0.0) {
          float v22 = 0.0;
        }
        *(float *)(v21 + 4 * v17) = v22;
      }
      ++v15;
      if (!--v14) {
        return result;
      }
    }
    goto LABEL_51;
  }
  return result;
}

char *sub_1A66F7780(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    if (a4 >> 62) {
      sub_1A66E9D7C();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    double result = sub_1A66F4908(v7, v11);
    float v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      float v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  float v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    double result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    float v19 = v16;
LABEL_18:
    double result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  float *v12 = &v9[v17];
  return result;
}

void *sub_1A66F788C(void *result, void *a2, int *a3)
{
  if (result == a2)
  {
LABEL_4:
    double result = a2;
  }
  else
  {
    while (*result != *a3)
    {
      if (++result == a2) {
        goto LABEL_4;
      }
    }
  }
  if (result == a2) {
    return a2;
  }
  uint64_t v3 = result + 1;
  if (result + 1 != a2)
  {
    uint64_t v4 = *a3;
    do
    {
      if (*v3 != v4) {
        *result++ = *v3;
      }
      ++v3;
    }
    while (v3 != a2);
  }
  return result;
}

void sub_1A66F78F4(uint64_t a1, uint64_t a2, const float **a3)
{
  float __B = -2.0;
  vvpowf(*(float **)(a1 + 936), *(const float **)(a1 + 544), *(const float **)(a1 + 232), (const int *)(a1 + 24));
  vvpowf(*(float **)(a1 + 960), *(const float **)(a1 + 544), *(const float **)a2, (const int *)(a1 + 24));
  vDSP_vsmul(*(const float **)(a1 + 544), 1, &__B, *(float **)(a1 + 352), 1, *(void *)(a1 + 24));
  vDSP_vadd(*(const float **)(a1 + 2216), 1, *(const float **)(a1 + 352), 1, *(float **)(a1 + 352), 1, *(void *)(a1 + 24));
  vDSP_vmul(*a3, 1, *(const float **)(a1 + 352), 1, *(float **)(a1 + 352), 1, *(void *)(a1 + 24));
  float __B = -2.0;
  vDSP_vsmul(*(const float **)(a1 + 256), 1, &__B, *(float **)(a1 + 888), 1, *(void *)(a1 + 24));
  float __B = 2.0;
  vDSP_vsadd(*(const float **)(a1 + 888), 1, &__B, *(float **)(a1 + 888), 1, *(void *)(a1 + 24));
  vDSP_vmul(*(const float **)(a1 + 232), 1, *(const float **)(a1 + 888), 1, *(float **)(a1 + 888), 1, *(void *)(a1 + 24));
  vDSP_vmul(*(const float **)(a1 + 544), 1, *(const float **)(a1 + 888), 1, *(float **)(a1 + 888), 1, *(void *)(a1 + 24));
  vDSP_vsub(*(const float **)(a1 + 352), 1, *(const float **)(a1 + 888), 1, *(float **)(a1 + 888), 1, *(void *)(a1 + 24));
  vDSP_vmul(*(const float **)(a1 + 544), 1, *(const float **)(a1 + 936), 1, *(float **)(a1 + 936), 1, *(void *)(a1 + 24));
  vDSP_vsmul(*(const float **)(a1 + 936), 1, &__B, *(float **)(a1 + 936), 1, *(void *)(a1 + 24));
  vDSP_vdiv(*(const float **)(a1 + 936), 1, *(const float **)(a1 + 888), 1, *(float **)(a1 + 888), 1, *(void *)(a1 + 24));
  vDSP_vdiv(*(const float **)(a1 + 544), 1, *(const float **)(a1 + 352), 1, *(float **)(a1 + 352), 1, *(void *)(a1 + 24));
  float __B = 0.5;
  vDSP_vsmul(*(const float **)(a1 + 352), 1, &__B, *(float **)(a1 + 352), 1, *(void *)(a1 + 24));
  vDSP_vmul(*(const float **)(a1 + 256), 1, *(const float **)a2, 1, *(float **)(a1 + 912), 1, *(void *)(a1 + 24));
  vDSP_vmul(*(const float **)(a1 + 888), 1, *(const float **)(a1 + 960), 1, *(float **)(a1 + 960), 1, *(void *)(a1 + 24));
  vDSP_vadd(*(const float **)(a1 + 912), 1, *(const float **)(a1 + 352), 1, *(float **)(a1 + 352), 1, *(void *)(a1 + 24));
  vDSP_vadd(*(const float **)(a1 + 960), 1, *(const float **)(a1 + 352), 1, *(float **)(a1 + 352), 1, *(void *)(a1 + 24));
  vDSP_vsmul(*(const float **)(a1 + 232), 1, (const float *)(a1 + 200), *(float **)(a1 + 912), 1, *(void *)(a1 + 24));
  uint64_t v6 = *(void *)(a1 + 24);
  if (v6)
  {
    unint64_t v7 = 0;
    uint64_t v8 = *(const float **)a2;
    uint64_t v9 = (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2;
    do
    {
      if (v9 == v7 || (uint64_t v10 = *(void *)(a1 + 912), v7 >= (*(void *)(a1 + 920) - v10) >> 2)) {
        sub_1A66F52C8();
      }
      float v11 = v8[v7];
      if (v11 < *(float *)(v10 + 4 * v7))
      {
        uint64_t v12 = *(void *)(a1 + 352);
        if (v7 >= (*(void *)(a1 + 360) - v12) >> 2) {
          sub_1A66F52C8();
        }
        *(float *)(v12 + 4 * v7) = v11;
      }
      ++v7;
    }
    while (v6 != v7);
  }
}

void sub_1A66F7C20(uint64_t a1, const float **a2)
{
  uint64_t __C = 0;
  uint64_t v4 = (vDSP_Length *)(a1 + 24);
  vDSP_sve(*a2, 1, (float *)&__C + 1, *(void *)(a1 + 24));
  *((float *)&__C + 1) = 1.0 / *((float *)&__C + 1);
  vDSP_vsmul(*a2, 1, (const float *)&__C + 1, *(float **)(a1 + 888), 1, *v4);
  vDSP_sve(*(const float **)(a1 + 352), 1, (float *)&__C, *v4);
  *((float *)&__C + 1) = 1.0 / *(float *)&__C;
  vDSP_vsmul(*(const float **)(a1 + 352), 1, (const float *)&__C + 1, *(float **)(a1 + 912), 1, *v4);
  if (*(void *)(a1 + 8) - *(void *)a1 <= 0x190uLL) {
    sub_1A688D434();
  }
  uint64_t v5 = *(void *)(a1 + 1664);
  unint64_t v6 = (*(void *)(a1 + 1672) - v5) >> 2;
  if (*(void *)(a1 + 1672) != v5)
  {
    unint64_t v7 = 0;
    if (v6 <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = (*(void *)(a1 + 1672) - v5) >> 2;
    }
    while (*(float *)(v5 + 4 * v7) <= *(float *)(*(void *)a1 + 412))
    {
      if (v8 == ++v7) {
        goto LABEL_10;
      }
    }
    unint64_t v6 = v7;
  }
LABEL_10:
  uint64_t v9 = *(void *)(a1 + 24);
  if (v9)
  {
    unint64_t v10 = 0;
    float v11 = (float)(*(float *)(a1 + 204) * (float)v6) * *(float *)(a1 + 208);
    uint64_t v12 = *(const float **)(a1 + 936);
    unint64_t v13 = (uint64_t)(*(void *)(a1 + 944) - (void)v12) >> 2;
    do
    {
      if (v6 >= v10)
      {
        if (v13 <= v10) {
LABEL_23:
        }
          sub_1A66F52C8();
        float v14 = *(float *)(a1 + 184);
        float v15 = v11
            / (float)((float)((float)v6 * *(float *)(a1 + 208))
                    - (float)((float)(*(float *)(a1 + 208) - *(float *)(a1 + 204)) * (float)(int)v10));
      }
      else
      {
        if (v13 <= v10) {
          goto LABEL_23;
        }
        float v14 = *(float *)(a1 + 184);
        float v15 = *(float *)(a1 + 208);
      }
      float v16 = v14 * v15;
      v12[v10] = v16;
      uint64_t v17 = *(void *)(a1 + 960);
      if (v10 >= (*(void *)(a1 + 968) - v17) >> 2) {
        sub_1A66F52C8();
      }
      *(float *)(v17 + 4 * v10++) = 1.0 - v16;
    }
    while (v9 != v10);
  }
  else
  {
    uint64_t v12 = *(const float **)(a1 + 936);
  }
  vvpowf(*(float **)(a1 + 888), v12, *(const float **)(a1 + 888), (const int *)(a1 + 24));
  vvpowf(*(float **)(a1 + 912), *(const float **)(a1 + 960), *(const float **)(a1 + 912), (const int *)(a1 + 24));
  vDSP_vmul(*(const float **)(a1 + 888), 1, *(const float **)(a1 + 912), 1, *(float **)(a1 + 912), 1, *(void *)(a1 + 24));
  vDSP_sve(*(const float **)(a1 + 912), 1, (float *)&__C + 1, *(void *)(a1 + 24));
  *((float *)&__C + 1) = 1.0 / *((float *)&__C + 1);
  vDSP_vsmul(*(const float **)(a1 + 912), 1, (const float *)&__C + 1, *(float **)(a1 + 912), 1, *(void *)(a1 + 24));
  vDSP_vsmul(*(const float **)(a1 + 912), 1, (const float *)&__C, *(float **)(a1 + 352), 1, *(void *)(a1 + 24));
}

uint64_t sub_1A66F7E94(uint64_t a1, uint64_t a2, unint64_t a3, float a4)
{
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  float v8 = a4 * 0.5;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(float *)(a1 + 96) = (float)(a4 * 0.5) + -200.0;
  *(void *)(a1 + 108) = 0;
  *(void *)(a1 + 100) = 0;
  *(float *)(a1 + 116) = a4;
  *(_OWORD *)(a1 + 120) = xmmword_1A689D2C0;
  *(void *)(a1 + 136) = 0x3F80000000000000;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 172) = 0u;
  *(_DWORD *)(a1 + 188) = 1065351538;
  *(_WORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 196) = xmmword_1A689D2C0;
  *(void *)(a1 + 220) = 0;
  *(void *)(a1 + 212) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  uint64_t v9 = a1 + 232;
  *(_DWORD *)(a1 + 228) = 0x40000000;
  unint64_t v52 = (char **)(a1 + 256);
  long long v51 = (char **)(a1 + 280);
  uint64_t v50 = (char **)(a1 + 304);
  uint64_t v49 = (char **)(a1 + 328);
  uint64_t v48 = (char **)(a1 + 352);
  uint64_t v47 = (char **)(a1 + 376);
  uint64_t v46 = (char **)(a1 + 400);
  uint64_t v44 = (char **)(a1 + 472);
  unint64_t v45 = (char **)(a1 + 448);
  uint64_t v42 = (char **)(a1 + 520);
  uint64_t v43 = (char **)(a1 + 496);
  uint64_t v40 = (char **)(a1 + 424);
  uint64_t v41 = (char **)(a1 + 544);
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = xmmword_1A689D2D0;
  *(_OWORD *)(a1 + 584) = xmmword_1A689D2E0;
  *(_DWORD *)(a1 + 608) = 1056964608;
  *(void *)(a1 + 616) = 150;
  *(void *)(a1 + 624) = 10;
  *(void *)(a1 + 600) = 0x430C000041F00000;
  *(_OWORD *)(a1 + 632) = xmmword_1A689D450;
  *(_OWORD *)(a1 + 648) = unk_1A689D460;
  *(_OWORD *)(a1 + 664) = xmmword_1A689D470;
  *(_OWORD *)(a1 + 680) = unk_1A689D480;
  *(void *)(a1 + 704) = 0;
  *(void *)(a1 + 712) = 0;
  *(void *)(a1 + 696) = 0;
  unint64_t v10 = operator new(0x64uLL);
  *(void *)(a1 + 696) = v10;
  *(void *)(a1 + 712) = v10 + 25;
  v10[24] = 1182400512;
  *((_OWORD *)v10 + 2) = xmmword_1A689D4B0;
  *((_OWORD *)v10 + 3) = unk_1A689D4C0;
  *((_OWORD *)v10 + 4) = xmmword_1A689D4D0;
  *((_OWORD *)v10 + 5) = unk_1A689D4E0;
  *(_OWORD *)unint64_t v10 = xmmword_1A689D490;
  *((_OWORD *)v10 + 1) = unk_1A689D4A0;
  *(void *)(a1 + 704) = v10 + 25;
  *(void *)(a1 + 736) = 0;
  *(_OWORD *)(a1 + 720) = 0u;
  float v11 = operator new(0x64uLL);
  *(void *)(a1 + 720) = v11;
  *(void *)(a1 + 736) = v11 + 25;
  v11[24] = 1109576909;
  *((_OWORD *)v11 + 2) = xmmword_1A689D514;
  *((_OWORD *)v11 + 3) = unk_1A689D524;
  *((_OWORD *)v11 + 4) = xmmword_1A689D534;
  *((_OWORD *)v11 + 5) = unk_1A689D544;
  *(_OWORD *)float v11 = xmmword_1A689D4F4;
  *((_OWORD *)v11 + 1) = unk_1A689D504;
  *(void *)(a1 + 728) = v11 + 25;
  *(_OWORD *)(v9 + 512) = xmmword_1A689D2F0;
  *(void *)(a1 + 760) = a3;
  *(void *)(a1 + 768) = 2 * a3;
  *(void *)(a1 + 776) = a3 + 1;
  *(void *)(a1 + 784) = 0;
  *(void *)(a1 + 792) = a2;
  *(void *)(a1 + 800) = 0;
  *(_DWORD *)(a1 + 808) = 16843009;
  *(void *)(a1 + 1072) = 0;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  sub_1A66F4890((void *)(a1 + 1080), a3 + 1);
  uint64_t v12 = *(float **)(a1 + 1080);
  __A[0] = 0.0;
  float __B = v8 / (float)a3;
  vDSP_vramp(__A, &__B, v12, 1, a3 + 1);
  bzero((void *)(a1 + 1104), 0x220uLL);
  sub_1A66F8CA8(a1 + 1648, a1 + 1080, *(float *)(a1 + 568), *(float *)(a1 + 96));
  *(_DWORD *)(a1 + 1840) = 1101004800;
  *(_DWORD *)(a1 + 1888) = 0;
  *(_OWORD *)(a1 + 1844) = 0u;
  *(_OWORD *)(a1 + 1860) = 0u;
  *(_OWORD *)(a1 + 1870) = 0u;
  unint64_t v13 = *(void *)(a1 + 776);
  *(_DWORD *)(a1 + 1896) = 0;
  sub_1A66F9674(v13, (void *)(a1 + 1904), a4);
  sub_1A66F9814(a1 + 1928, (float)*(unint64_t *)(a1 + 1648));
  *(_OWORD *)(a1 + 2368) = 0u;
  *(_OWORD *)(a1 + 2352) = 0u;
  *(_OWORD *)(a1 + 2336) = 0u;
  unint64_t v14 = *(void *)(a1 + 792);
  sub_1A66F9C20(a1 + 2336, v14);
  sub_1A66F9C20(a1 + 2360, v14);
  sub_1A66F9E2C((uint64_t *)(a1 + 1536), v14);
  sub_1A66F9E2C((uint64_t *)(a1 + 1560), v14);
  unint64_t v15 = *(void *)(a1 + 768);
  float __B = 0.0;
  sub_1A66F4A88((char **)(a1 + 816), v15, &__B);
  unint64_t v16 = *(void *)(a1 + 776);
  float __B = 2.2204e-16;
  sub_1A66F4A88((char **)(a1 + 1104), v16, &__B);
  float __B = 2.2204e-16;
  sub_1A66F4A88((char **)(a1 + 1440), v16, &__B);
  float __B = 2.2204e-16;
  sub_1A66F4A88((char **)(a1 + 1488), v16, &__B);
  float __B = 2.2204e-16;
  sub_1A66F4A88((char **)(a1 + 1512), v16, &__B);
  float __B = 2.2204e-16;
  sub_1A66F4A88((char **)(a1 + 1128), v16, &__B);
  float __B = 2.2204e-16;
  sub_1A66F4A88((char **)(a1 + 1416), v16, &__B);
  float __B = 2.2204e-16;
  sub_1A66F4A88((char **)(a1 + 1464), v16, &__B);
  unint64_t v17 = *(void *)(a1 + 776);
  float __B = 1.0;
  sub_1A66F4A88((char **)(a1 + 1344), v17, &__B);
  float __B = 1.0;
  sub_1A66F4A88((char **)(a1 + 1032), v17, &__B);
  float __B = 1.0;
  sub_1A66F4A88((char **)(a1 + 1056), v17, &__B);
  float __B = 1.0;
  sub_1A66F4A88((char **)(a1 + 1368), v17, &__B);
  unint64_t v18 = *(void *)(a1 + 776);
  float __B = 0.1;
  sub_1A66F4A88((char **)(a1 + 1392), v18, &__B);
  sub_1A66F8BCC(a1);
  if (*(void *)(a1 + 792)) {
    operator new();
  }
  unint64_t v19 = *(void *)(a1 + 1648);
  *(void *)(a1 + 24) = v19;
  unint64_t v20 = (uint64_t)(*(void *)(a1 + 2224) - *(void *)(a1 + 2216)) >> 2;
  if (v20 >= v19) {
    unint64_t v20 = v19;
  }
  *(void *)(a1 + 1936) = v20;
  sub_1A66ED714(a1 + 840, v19);
  sub_1A66ED714(a1 + 864, v19);
  sub_1A66ED714(a1 + 888, v19);
  sub_1A66ED714(a1 + 912, v19);
  sub_1A66ED714(a1 + 936, v19);
  sub_1A66ED714(a1 + 960, v19);
  sub_1A66ED714(a1 + 984, v19);
  sub_1A66ED714(a1 + 1008, v19);
  unint64_t v21 = *(void *)(a1 + 24);
  sub_1A66ED714(a1 + 1152, v21);
  sub_1A66ED714(a1 + 1176, v21);
  sub_1A66ED714(a1 + 1200, v21);
  sub_1A66ED714(a1 + 1224, v21);
  sub_1A66ED714(a1 + 1248, v21);
  sub_1A66ED714(a1 + 1272, v21);
  sub_1A66ED714(a1 + 1296, v21);
  sub_1A66ED714(a1 + 1320, v21);
  long double v22 = exp(*(float *)(a1 + 600) * 0.230258509);
  float v23 = (float)*(unint64_t *)(a1 + 776);
  *(float *)&long double v22 = v22;
  *(float *)(a1 + 164) = *(float *)&v22 / v23;
  float v24 = exp(*(float *)(a1 + 604) * 0.230258509);
  *(float *)(a1 + 168) = v24 / v23;
  unint64_t v25 = *(void *)(a1 + 24);
  float __B = 1.0;
  sub_1A66F4A88((char **)v9, v25, &__B);
  unint64_t v26 = *(void *)(a1 + 24);
  float __B = 0.0;
  sub_1A66F4A88(v52, v26, &__B);
  unint64_t v27 = *(void *)(a1 + 24);
  float __B = 0.0;
  sub_1A66F4A88(v51, v27, &__B);
  unint64_t v28 = *(void *)(a1 + 24);
  float __B = 0.0;
  sub_1A66F4A88(v50, v28, &__B);
  unint64_t v29 = *(void *)(a1 + 24);
  float __B = 0.0;
  sub_1A66F4A88(v49, v29, &__B);
  unint64_t v30 = *(void *)(a1 + 24);
  float __B = 0.0;
  sub_1A66F4A88(v48, v30, &__B);
  unint64_t v31 = *(void *)(a1 + 24);
  float __B = 0.0;
  sub_1A66F4A88(v47, v31, &__B);
  unint64_t v32 = *(void *)(a1 + 24);
  float __B = 0.0;
  sub_1A66F4A88(v46, v32, &__B);
  unint64_t v33 = *(void *)(a1 + 24);
  float __B = 0.0;
  sub_1A66F4A88(v45, v33, &__B);
  unint64_t v34 = *(void *)(a1 + 24);
  float __B = 0.0;
  sub_1A66F4A88(v44, v34, &__B);
  unint64_t v35 = *(void *)(a1 + 24);
  float __B = 0.0;
  sub_1A66F4A88(v43, v35, &__B);
  unint64_t v36 = *(void *)(a1 + 24);
  float __B = 0.0;
  sub_1A66F4A88(v42, v36, &__B);
  unint64_t v37 = *(void *)(a1 + 24);
  float __B = 0.1;
  sub_1A66F4A88(v41, v37, &__B);
  unint64_t v38 = *(void *)(a1 + 776);
  float __B = 0.0;
  sub_1A66F4A88(v40, v38, &__B);
  return a1;
}

void sub_1A66F875C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void *a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, void **a18, void **a19, void **a20,void **a21,void **a22,void **a23,void **a24,void **a25,void **a26,void **a27,void **a28,void **a29,void **a30,void **a31,void **a32,void **a33,void **a34,void **a35,void **a36,void **a37,void **a38,void **a39,void **a40)
{
  uint64_t v46 = *a10;
  if (*a10)
  {
    *(void *)(v40 + 1912) = v46;
    operator delete(v46);
  }
  sub_1A66F4640(a11);
  *(void *)(v44 - 112) = *(void *)(v44 - 144);
  sub_1A66F3F54((void ***)(v44 - 112));
  *(void *)(v44 - 112) = *(void *)(v44 - 136);
  sub_1A66F3F54((void ***)(v44 - 112));
  uint64_t v47 = **(void ***)(v44 - 176);
  if (v47)
  {
    *(void *)(v40 + 1520) = v47;
    operator delete(v47);
  }
  uint64_t v48 = **(void ***)(v44 - 160);
  if (v48)
  {
    *(void *)(v40 + 1496) = v48;
    operator delete(v48);
  }
  uint64_t v49 = **(void ***)(v44 - 216);
  if (v49)
  {
    *(void *)(v40 + 1472) = v49;
    operator delete(v49);
  }
  uint64_t v50 = **(void ***)(v44 - 152);
  if (v50)
  {
    *(void *)(v40 + 1448) = v50;
    operator delete(v50);
  }
  long long v51 = **(void ***)(v44 - 208);
  if (v51)
  {
    *(void *)(v40 + 1424) = v51;
    operator delete(v51);
  }
  unint64_t v52 = **(void ***)(v44 - 240);
  if (v52)
  {
    *(void *)(v40 + 1400) = v52;
    operator delete(v52);
  }
  float32x4_t v53 = **(void ***)(v44 - 232);
  if (v53)
  {
    *(void *)(v40 + 1376) = v53;
    operator delete(v53);
  }
  uint64_t v54 = **(void ***)(v44 - 224);
  if (v54)
  {
    *(void *)(v40 + 1352) = v54;
    operator delete(v54);
  }
  uint64_t v55 = *a18;
  if (*a18)
  {
    *(void *)(v40 + 1328) = v55;
    operator delete(v55);
  }
  uint64_t v56 = *a20;
  if (*a20)
  {
    *(void *)(v40 + 1304) = v56;
    operator delete(v56);
  }
  unint64_t v57 = *a22;
  if (*a22)
  {
    *(void *)(v40 + 1280) = v57;
    operator delete(v57);
  }
  float32x4_t v58 = *a24;
  if (*a24)
  {
    *(void *)(v40 + 1256) = v58;
    operator delete(v58);
  }
  float32x4_t v59 = *a26;
  if (*a26)
  {
    *(void *)(v40 + 1232) = v59;
    operator delete(v59);
  }
  float32x4_t v60 = *a28;
  if (*a28)
  {
    *(void *)(v40 + 1208) = v60;
    operator delete(v60);
  }
  float32x4_t v61 = *a30;
  if (*a30)
  {
    *(void *)(v40 + 1184) = v61;
    operator delete(v61);
  }
  float32x4_t v62 = *a32;
  if (*a32)
  {
    *(void *)(v40 + 1160) = v62;
    operator delete(v62);
  }
  long long v63 = **(void ***)(v44 - 192);
  if (v63)
  {
    *(void *)(v40 + 1136) = v63;
    operator delete(v63);
  }
  unint64_t v64 = *v43;
  if (*v43)
  {
    *(void *)(v40 + 1112) = v64;
    operator delete(v64);
  }
  id v65 = *v42;
  if (*v42)
  {
    *(void *)(v40 + 1088) = v65;
    operator delete(v65);
  }
  uint64_t v66 = **(void ***)(v44 - 200);
  if (v66)
  {
    *(void *)(v40 + 1064) = v66;
    operator delete(v66);
  }
  uint64_t v67 = **(void ***)(v44 - 184);
  if (v67)
  {
    *(void *)(v40 + 1040) = v67;
    operator delete(v67);
  }
  uint64_t v68 = *a33;
  if (*a33)
  {
    *(void *)(v40 + 1016) = v68;
    operator delete(v68);
  }
  unint64_t v69 = *a34;
  if (*a34)
  {
    *(void *)(v40 + 992) = v69;
    operator delete(v69);
  }
  float32x4_t v70 = *a35;
  if (*a35)
  {
    *(void *)(v40 + 968) = v70;
    operator delete(v70);
  }
  uint64_t v71 = *a36;
  if (*a36)
  {
    *(void *)(v40 + 944) = v71;
    operator delete(v71);
  }
  uint64_t v72 = *a37;
  if (*a37)
  {
    *(void *)(v40 + 920) = v72;
    operator delete(v72);
  }
  float32x2_t v73 = *a38;
  if (*a38)
  {
    *(void *)(v40 + 896) = v73;
    operator delete(v73);
  }
  float32x2_t v74 = *a39;
  if (*a39)
  {
    *(void *)(v40 + 872) = v74;
    operator delete(v74);
  }
  long long v75 = *a40;
  if (*a40)
  {
    *(void *)(v40 + 848) = v75;
    operator delete(v75);
  }
  unint64_t v76 = (void **)(v40 + 720);
  uint64_t v77 = **(void ***)(v44 - 128);
  if (v77)
  {
    *(void *)(v40 + 824) = v77;
    operator delete(v77);
  }
  uint64_t v78 = *v76;
  if (*v76)
  {
    *(void *)(v40 + 728) = v78;
    operator delete(v78);
  }
  uint64_t v79 = *(void **)(v41 + 464);
  if (v79)
  {
    *(void *)(v40 + 704) = v79;
    operator delete(v79);
  }
  uint64_t v80 = *a13;
  if (*a13)
  {
    *(void *)(v40 + 552) = v80;
    operator delete(v80);
  }
  unint64_t v81 = *a14;
  if (*a14)
  {
    *(void *)(v40 + 528) = v81;
    operator delete(v81);
  }
  int32x4_t v82 = *a15;
  if (*a15)
  {
    *(void *)(v40 + 504) = v82;
    operator delete(v82);
  }
  int32x4_t v83 = *a16;
  if (*a16)
  {
    *(void *)(v40 + 480) = v83;
    operator delete(v83);
  }
  int32x4_t v84 = *a17;
  if (*a17)
  {
    *(void *)(v40 + 456) = v84;
    operator delete(v84);
  }
  v85 = *a12;
  if (*a12)
  {
    *(void *)(v40 + 432) = v85;
    operator delete(v85);
  }
  int32x4_t v86 = *a19;
  if (*a19)
  {
    *(void *)(v40 + 408) = v86;
    operator delete(v86);
  }
  long long v87 = *a21;
  if (*a21)
  {
    *(void *)(v40 + 384) = v87;
    operator delete(v87);
  }
  unint64_t v88 = *a23;
  if (*a23)
  {
    *(void *)(v40 + 360) = v88;
    operator delete(v88);
  }
  int32x4_t v89 = *a25;
  if (*a25)
  {
    *(void *)(v40 + 336) = v89;
    operator delete(v89);
  }
  uint64_t v90 = *a27;
  if (*a27)
  {
    *(void *)(v40 + 312) = v90;
    operator delete(v90);
  }
  uint64_t v91 = *a29;
  if (*a29)
  {
    *(void *)(v40 + 288) = v91;
    operator delete(v91);
  }
  uint64_t v92 = *a31;
  if (*a31)
  {
    *(void *)(v40 + 264) = v92;
    operator delete(v92);
  }
  unint64_t v93 = *(void **)v41;
  if (*(void *)v41)
  {
    *(void *)(v40 + 240) = v93;
    operator delete(v93);
  }
  uint64_t v94 = *(void **)v40;
  if (*(void *)v40)
  {
    *(void *)(v40 + 8) = v94;
    operator delete(v94);
  }
  _Unwind_Resume(a1);
}

float sub_1A66F8BCC(uint64_t a1)
{
  uint64_t v2 = (const int *)(a1 + 776);
  vDSP_Length v3 = *(void *)(a1 + 776);
  uint64_t v4 = *(float **)(a1 + 816);
  if (v3)
  {
    for (uint64_t i = 0; i != v3; ++i)
      v4[i] = (float)(int)i;
  }
  float __B = 100.0 / (float)(10 * v3 - 10);
  vDSP_vsmul(v4, 1, &__B, v4, 1, v3);
  vvpowf(*(float **)(a1 + 1392), *(const float **)(a1 + 816), *(const float **)(a1 + 1392), v2);
  float __C = 0.0;
  vDSP_sve(*(const float **)(a1 + 1392), 1, &__C, *(void *)(a1 + 776));
  float __C = 1.0 / __C;
  vDSP_vsmul(*(const float **)(a1 + 1392), 1, &__C, *(float **)(a1 + 1392), 1, *(void *)(a1 + 776));
  return result;
}

uint64_t sub_1A66F8CA8(uint64_t a1, uint64_t a2, float a3, float a4)
{
  *(_OWORD *)(a1 + 16) = 0u;
  unint64_t v7 = (void **)(a1 + 16);
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  uint64_t v8 = a1 + 112;
  *(_DWORD *)(a1 + 160) = 0;
  uint64_t v38 = a1 + 88;
  uint64_t v39 = a1 + 40;
  uint64_t v40 = a1 + 136;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(void *)(a1 + 164) = 0x3DDD2F1B43020000;
  *(void *)(a1 + 180) = 0x3F0000003F826131;
  *(void *)(a1 + 172) = 0x43F800000;
  if (a1 + 64 == a2)
  {
    float v12 = 0.5;
    float v9 = 0.108;
    float v10 = 130.0;
    float v11 = 1.0;
  }
  else
  {
    sub_1A66F7780((char *)(a1 + 64), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
    float v10 = *(float *)(a1 + 164);
    float v9 = *(float *)(a1 + 168);
    float v11 = *(float *)(a1 + 172);
    float v12 = *(float *)(a1 + 184);
  }
  *(float *)(a1 + 8) = a3;
  *(float *)(a1 + 12) = a4;
  float v13 = 1.0 / (float)(v9 * 0.43429);
  float v14 = v9 / v10;
  float v15 = v13 * log10f((float)((float)(v9 / v10) * a3) + 1.0);
  float v16 = (float)(v13 * log10f((float)(v14 * a4) + 1.0)) - v15;
  unint64_t v17 = vcvtas_u32_f32(v12 * (float)(v11 * v16));
  *(void *)a1 = v17;
  sub_1A66F4890(&__C, v17);
  vDSP_Length v18 = *(void *)a1;
  float __B = v16 / (float)(unint64_t)(*(void *)a1 - 1);
  float __A = v15;
  vDSP_vramp(&__A, &__B, __C, 1, v18);
  sub_1A66F907C(v7, *(void *)a1);
  unint64_t v19 = __C;
  for (uint64_t i = v42; v19 != i; ++v19)
  {
    float v21 = (__exp10((float)(*v19 / v13)) + -1.0) / (float)(*(float *)(a1 + 168) / *(float *)(a1 + 164));
    float v23 = *(float **)(a1 + 24);
    unint64_t v22 = *(void *)(a1 + 32);
    if ((unint64_t)v23 >= v22)
    {
      unint64_t v25 = (float *)*v7;
      uint64_t v26 = ((char *)v23 - (unsigned char *)*v7) >> 2;
      unint64_t v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 62) {
        sub_1A66E9D7C();
      }
      uint64_t v28 = v22 - (void)v25;
      if (v28 >> 1 > v27) {
        unint64_t v27 = v28 >> 1;
      }
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v29 = v27;
      }
      if (v29)
      {
        unint64_t v30 = (char *)sub_1A66ED9D4(a1 + 32, v29);
        unint64_t v25 = *(float **)(a1 + 16);
        float v23 = *(float **)(a1 + 24);
      }
      else
      {
        unint64_t v30 = 0;
      }
      unint64_t v31 = (float *)&v30[4 * v26];
      *unint64_t v31 = v21;
      float v24 = v31 + 1;
      while (v23 != v25)
      {
        int v32 = *((_DWORD *)v23-- - 1);
        *((_DWORD *)v31-- - 1) = v32;
      }
      *(void *)(a1 + 16) = v31;
      *(void *)(a1 + 24) = v24;
      *(void *)(a1 + 32) = &v30[4 * v29];
      if (v25) {
        operator delete(v25);
      }
    }
    else
    {
      float *v23 = v21;
      float v24 = v23 + 1;
    }
    *(void *)(a1 + 24) = v24;
  }
  unint64_t v33 = ((uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 2) * *(void *)a1;
  float __A = 0.0;
  sub_1A66F9124(v40, v33, &__A);
  unint64_t v34 = *(void *)a1;
  float __A = 0.0;
  sub_1A66F9124(v39, v34, &__A);
  unint64_t v35 = *(void *)a1;
  float __A = 0.0;
  sub_1A66F9124(v38, v35, &__A);
  unint64_t v36 = (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 2;
  float __A = 0.0;
  sub_1A66F9124(v8, v36, &__A);
  sub_1A66F9154((void *)a1);
  sub_1A66F92B8(a1);
  if (__C)
  {
    uint64_t v42 = __C;
    operator delete(__C);
  }
  return a1;
}

void sub_1A66F8FD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, void *__p, uint64_t a14)
{
  unint64_t v19 = *a12;
  if (*a12)
  {
    v14[18] = v19;
    operator delete(v19);
  }
  unint64_t v20 = *v17;
  if (*v17)
  {
    v14[15] = v20;
    operator delete(v20);
  }
  float v21 = *a10;
  if (*a10)
  {
    v14[12] = v21;
    operator delete(v21);
  }
  unint64_t v22 = *v16;
  if (*v16)
  {
    v14[9] = v22;
    operator delete(v22);
  }
  float v23 = *a11;
  if (*a11)
  {
    v14[6] = v23;
    operator delete(v23);
  }
  float v24 = *v15;
  if (*v15)
  {
    v14[3] = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A66F907C(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 2)
  {
    if (a2 >> 62) {
      sub_1A66E9D7C();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unint64_t v6 = (char *)sub_1A66ED9D4(v3, a2);
    unint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    float v9 = &v6[4 * v8];
    float v10 = (char *)*a1;
    float v11 = (char *)a1[1];
    float v12 = v7;
    if (v11 != *a1)
    {
      float v12 = v7;
      do
      {
        int v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void sub_1A66F9124(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 4 * a2;
    }
  }
  else
  {
    sub_1A66F9334((void **)a1, a2 - v3, a3);
  }
}

void sub_1A66F9154(void *a1)
{
  uint64_t v2 = operator new(0x58uLL);
  v2[2] = xmmword_1A689D578;
  v2[3] = unk_1A689D588;
  v2[4] = xmmword_1A689D598;
  *((void *)v2 + 10) = 0x460660004604D000;
  _OWORD *v2 = xmmword_1A689D558;
  v2[1] = unk_1A689D568;
  unint64_t v3 = operator new(0x58uLL);
  v3[2] = xmmword_1A689D5D0;
  v3[3] = unk_1A689D5E0;
  v3[4] = xmmword_1A689D5F0;
  *((void *)v3 + 10) = 0x44E1000044E10000;
  _OWORD *v3 = xmmword_1A689D5B0;
  v3[1] = unk_1A689D5C0;
  uint64_t v4 = (float *)operator new(0x58uLL);
  int64_t v5 = v4;
  uint64_t v6 = 0;
  *((void *)v4 + 10) = 0x3BA3D70A3C343958;
  *(_OWORD *)uint64_t v4 = xmmword_1A689D608;
  *((_OWORD *)v4 + 1) = unk_1A689D618;
  *((_OWORD *)v4 + 3) = unk_1A689D638;
  *((_OWORD *)v4 + 4) = xmmword_1A689D648;
  *((_OWORD *)v4 + 2) = xmmword_1A689D628;
  unint64_t v7 = (float *)a1[8];
  float v8 = v7[1] - *v7;
  do
  {
    v4[v6] = (float)(v8 * v4[v6]) / *(float *)((char *)v3 + v6 * 4);
    ++v6;
  }
  while (v6 != 22);
  sub_1A66F4B9C((float *)v2, 22, v4, v7, (uint64_t)(a1[9] - (void)v7) >> 2, a1[14], *v4, v4[21]);
  operator delete(v5);
  operator delete(v3);

  operator delete(v2);
}

void sub_1A66F9294(_Unwind_Exception *a1)
{
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1A66F92B8(uint64_t a1)
{
  *(void *)a1 = (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 2;
  uint64_t v2 = *(void **)(a1 + 136);
  uint64_t v3 = *(void *)(a1 + 144) - (void)v2;
  if (v3 >= 1) {
    bzero(v2, 4 * (((unint64_t)v3 >> 2) - ((unint64_t)v3 > 3)) + 4);
  }
  sub_1A66F9458((float *)a1);

  sub_1A66F95E8(a1);
}

void sub_1A66F9334(void **a1, unint64_t a2, _DWORD *a3)
{
  float v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  unint64_t v7 = v8;
  float v9 = *(_DWORD **)(v6 - 8);
  if (a2 <= (v8 - (unsigned char *)v9) >> 2)
  {
    if (a2)
    {
      uint64_t v16 = 4 * a2;
      unint64_t v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 4;
      }
      while (v16);
      float v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (unsigned char *)*a1;
    unint64_t v11 = a2 + (v10 >> 2);
    if (v11 >> 62) {
      sub_1A66E9D7C();
    }
    uint64_t v12 = v10 >> 2;
    uint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 >> 1 > v11) {
      unint64_t v11 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      float v15 = (char *)sub_1A66ED9D4(v6, v14);
    }
    else {
      float v15 = 0;
    }
    vDSP_Length v18 = &v15[4 * v12];
    unint64_t v19 = &v18[4 * a2];
    uint64_t v20 = 4 * a2;
    float v21 = v18;
    do
    {
      *(_DWORD *)float v21 = *a3;
      v21 += 4;
      v20 -= 4;
    }
    while (v20);
    unint64_t v22 = &v15[4 * v14];
    float v23 = (char *)*a1;
    for (uint64_t i = (char *)a1[1]; i != v23; i -= 4)
    {
      int v25 = *((_DWORD *)i - 1);
      *((_DWORD *)v18 - 1) = v25;
      v18 -= 4;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

void sub_1A66F9458(float *a1)
{
  uint64_t v18 = *(void *)a1;
  if (*(void *)a1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    uint64_t v4 = *((void *)a1 + 2);
    uint64_t v5 = *((void *)a1 + 5);
    uint64_t v6 = (float *)*((void *)a1 + 8);
    unint64_t v17 = (float *)*((void *)a1 + 9);
    if ((unint64_t)(v17 - v6) <= 1) {
      uint64_t v7 = 1;
    }
    else {
      uint64_t v7 = v17 - v6;
    }
    do
    {
      double v8 = 1.0 / a1[46] * (float)(a1[45] * (float)(a1[41] + (float)(a1[42] * *(float *)(v4 + 4 * v3))));
      *(float *)&double v8 = v8;
      *(_DWORD *)(v5 + 4 * v3) = LODWORD(v8);
      a1[40] = 0.0;
      if (v17 != v6)
      {
        *(float *)&double v8 = a1[44];
        double v9 = (double)*(unint64_t *)&v8;
        uint64_t v10 = (float *)(*((void *)a1 + 17) + v2);
        uint64_t v11 = v7;
        uint64_t v12 = v6;
        do
        {
          double v13 = (float)(*v12 - *(float *)(v4 + 4 * v3));
          float v14 = 1.0 / pow(v13 * v13 / (*(float *)(v5 + 4 * v3) * *(float *)(v5 + 4 * v3)) + 1.0, v9);
          float *v10 = v14;
          if (a1[40] < v14) {
            a1[40] = v14;
          }
          ++v12;
          ++v10;
          --v11;
        }
        while (v11);
        uint64_t v15 = 0;
        do
        {
          float v16 = a1[40];
          if (v16 != 0.0) {
            *(float *)(*((void *)a1 + 17) + v2 + 4 * v15) = *(float *)(*((void *)a1 + 17) + v2 + 4 * v15)
          }
                                                            / (float)(v16 * a1[43]);
          ++v15;
        }
        while (v7 != v15);
      }
      ++v3;
      v2 += ((char *)v17 - (char *)v6) & 0xFFFFFFFFFFFFFFFCLL;
    }
    while (v3 != v18);
  }
}

void sub_1A66F95E8(uint64_t a1)
{
  vDSP_mmul(*(const float **)(a1 + 136), 1, *(const float **)(a1 + 112), 1, *(float **)(a1 + 88), 1, *(void *)a1, 1uLL, (uint64_t)(*(void *)(a1 + 120) - *(void *)(a1 + 112)) >> 2);
  float __C = 0.0;
  vDSP_sve(*(const float **)(a1 + 88), 1, &__C, *(void *)a1);
  vDSP_vsdiv(*(const float **)(a1 + 88), 1, &__C, *(float **)(a1 + 88), 1, *(void *)a1);
}

void *sub_1A66F9674@<X0>(unint64_t a1@<X0>, void *a2@<X8>, float a3@<S0>)
{
  float result = sub_1A66F4890(a2, a1);
  if (a1)
  {
    uint64x2_t v7 = (uint64x2_t)vdupq_n_s64(a1 - 1);
    unint64_t v8 = (a1 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    int64x2_t v9 = (int64x2_t)xmmword_1A689D300;
    int64x2_t v10 = (int64x2_t)xmmword_1A689D310;
    uint64_t v11 = (_DWORD *)(*result + 8);
    float32x4_t v12 = (float32x4_t)vdupq_n_s32(0x43D428CAu);
    float32x4_t v13 = (float32x4_t)vdupq_n_s32(0x4D0DCF73u);
    float32x4_t v14 = (float32x4_t)vdupq_n_s32(0x4D328586u);
    float32x4_t v15 = (float32x4_t)vdupq_n_s32(0x4635145Fu);
    float32x4_t v16 = (float32x4_t)vdupq_n_s32(0x4904EB8Bu);
    int64x2_t v17 = vdupq_n_s64(4uLL);
    do
    {
      v18.i64[0] = v9.i64[0] * v9.i64[0];
      v18.i64[1] = v9.i64[1] * v9.i64[1];
      *(int32x2_t *)v6.i8 = vmovn_s64((int64x2_t)vcgeq_u64(v7, (uint64x2_t)v10));
      v19.i64[0] = v10.i64[0] * v10.i64[0];
      v19.i64[1] = v10.i64[1] * v10.i64[1];
      float32x4_t v20 = vmulq_n_f32(vmulq_n_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64(v19)), vcvtq_f64_u64(v18)), a3 / (float)(2 * a1 - 2)), a3 / (float)(2 * a1 - 2));
      float32x4_t v21 = vmulq_f32(vdivq_f32(v20, vaddq_f32(v20, v12)), vdivq_f32(v14, vaddq_f32(v20, v13)));
      float32x4_t v22 = vmulq_f32(vdivq_f32(v20, vaddq_f32(v20, v15)), vmulq_f32(v21, v21));
      float32x4_t v23 = vmulq_f32(vdivq_f32(v20, vaddq_f32(v20, v16)), v22);
      if (vmovn_s32(v6).u8[0]) {
        *(v11 - 2) = v23.i32[0];
      }
      if (vmovn_s32(v6).i8[2]) {
        *(v11 - 1) = v23.i32[1];
      }
      int64x2_t v24 = (int64x2_t)vcgeq_u64(v7, (uint64x2_t)v9);
      if (vmovn_s32(vmovn_hight_s64(*(int32x2_t *)&v22, v24)).i32[1]) {
        *uint64_t v11 = v23.i32[2];
      }
      int32x4_t v6 = vmovn_hight_s64(*(int32x2_t *)v24.i8, v24);
      if (vmovn_s32(v6).i8[6]) {
        v11[1] = v23.i32[3];
      }
      int64x2_t v9 = vaddq_s64(v9, v17);
      int64x2_t v10 = vaddq_s64(v10, v17);
      v11 += 4;
      v8 -= 4;
    }
    while (v8);
  }
  return result;
}

uint64_t sub_1A66F9814(uint64_t a1, float a2)
{
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  uint64_t v3 = a1 + 192;
  *(unsigned char *)a1 = 1;
  *(_OWORD *)(a1 + 240) = 0u;
  uint64_t v4 = a1 + 240;
  unint64_t v5 = (unint64_t)a2;
  uint64_t v6 = a1 + 168;
  uint64_t v12 = a1 + 216;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v7 = a1 + 264;
  uint64_t v8 = a1 + 288;
  uint64_t v9 = a1 + 312;
  uint64_t v10 = a1 + 336;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 8) = (unint64_t)a2;
  uint64_t v13 = 0;
  sub_1A66F9A94(a1 + 144, (unint64_t)a2, &v13);
  uint64_t v13 = 0;
  sub_1A66F9A94(v6, v5, &v13);
  uint64_t v13 = 0;
  sub_1A66F9A94(v3, v5, &v13);
  uint64_t v13 = 0;
  sub_1A66F9A94(v12, v5, &v13);
  uint64_t v13 = 0;
  sub_1A66F9A94(v4, v5, &v13);
  uint64_t v13 = 0;
  sub_1A66F9A94(v7, v5, &v13);
  LODWORD(v13) = 0;
  sub_1A66F9124(v9, v5, &v13);
  LODWORD(v13) = 0;
  sub_1A66F9124(v10, v5, &v13);
  LODWORD(v13) = 0;
  sub_1A66F9124(v8, v5, &v13);
  return a1;
}

void sub_1A66F9990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11)
{
  float32x4_t v20 = *v18;
  if (*v18)
  {
    v11[43] = v20;
    operator delete(v20);
  }
  float32x4_t v21 = *v17;
  if (*v17)
  {
    v11[40] = v21;
    operator delete(v21);
  }
  float32x4_t v22 = *v16;
  if (*v16)
  {
    v11[37] = v22;
    operator delete(v22);
  }
  float32x4_t v23 = *v15;
  if (*v15)
  {
    v11[34] = v23;
    operator delete(v23);
  }
  int64x2_t v24 = *v14;
  if (*v14)
  {
    v11[31] = v24;
    operator delete(v24);
  }
  int v25 = *a11;
  if (*a11)
  {
    v11[28] = v25;
    operator delete(v25);
  }
  uint64_t v26 = *v13;
  if (*v13)
  {
    v11[25] = v26;
    operator delete(v26);
  }
  unint64_t v27 = *a10;
  if (*a10)
  {
    v11[22] = v27;
    operator delete(v27);
  }
  uint64_t v28 = *v12;
  if (*v12)
  {
    v11[19] = v28;
    operator delete(v28);
  }
  unint64_t v29 = (void *)v11[15];
  if (v29)
  {
    v11[16] = v29;
    operator delete(v29);
  }
  unint64_t v30 = (void *)v11[12];
  if (v30)
  {
    v11[13] = v30;
    operator delete(v30);
  }
  unint64_t v31 = (void *)v11[9];
  if (v31)
  {
    v11[10] = v31;
    operator delete(v31);
  }
  int v32 = (void *)v11[6];
  if (v32)
  {
    v11[7] = v32;
    operator delete(v32);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A66F9A94(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    sub_1A66F9AC4((void **)a1, a2 - v3, a3);
  }
}

void sub_1A66F9AC4(void **a1, unint64_t a2, void *a3)
{
  uint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  uint64_t v7 = v8;
  uint64_t v9 = *(void **)(v6 - 8);
  if (a2 <= (v8 - (unsigned char *)v9) >> 3)
  {
    if (a2)
    {
      uint64_t v16 = 8 * a2;
      int64x2_t v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 8;
      }
      while (v16);
      uint64_t v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (unsigned char *)*a1;
    unint64_t v11 = a2 + (v10 >> 3);
    if (v11 >> 61) {
      sub_1A66E9D7C();
    }
    uint64_t v12 = v10 >> 3;
    uint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 >> 2 > v11) {
      unint64_t v11 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      float32x4_t v15 = (char *)sub_1A66F9BE8(v6, v14);
    }
    else {
      float32x4_t v15 = 0;
    }
    uint64x2_t v18 = &v15[8 * v12];
    uint64x2_t v19 = &v18[8 * a2];
    uint64_t v20 = 8 * a2;
    float32x4_t v21 = v18;
    do
    {
      *(void *)float32x4_t v21 = *a3;
      v21 += 8;
      v20 -= 8;
    }
    while (v20);
    float32x4_t v22 = &v15[8 * v14];
    float32x4_t v23 = (char *)*a1;
    for (uint64_t i = (char *)a1[1]; i != v23; i -= 8)
    {
      uint64_t v25 = *((void *)i - 1);
      *((void *)v18 - 1) = v25;
      v18 -= 8;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

void *sub_1A66F9BE8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_1A66E9A74();
  }
  return operator new(8 * a2);
}

void sub_1A66F9C20(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = *(VPTimeFreqConverter ***)(a1 + 8);
  unint64_t v4 = ((uint64_t)v3 - *(void *)a1) >> 3;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *(void *)a1 + 8 * a2;
      while (v3 != (VPTimeFreqConverter **)v6)
        sub_1A66F474C(--v3, 0);
      *(void *)(a1 + 8) = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    sub_1A66F9CB0((char **)a1, v5);
  }
}

void sub_1A66F9CB0(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      sub_1A66E9D7C();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    uint64_t v24 = v4;
    if (v13)
    {
      unint64_t v14 = (char *)sub_1A66F9BE8(v4, v13);
      uint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      unint64_t v14 = 0;
    }
    float32x4_t v15 = &v14[8 * v11];
    uint64_t v16 = &v14[8 * v13];
    float32x4_t v23 = v16;
    bzero(v15, 8 * a2);
    int64x2_t v17 = &v15[8 * a2];
    *((void *)&v22 + 1) = v17;
    if (v7 != v8)
    {
      do
      {
        uint64_t v18 = *((void *)v7 - 1);
        v7 -= 8;
        *(void *)uint64_t v7 = 0;
        *((void *)v15 - 1) = v18;
        v15 -= 8;
      }
      while (v7 != v8);
      int64x2_t v17 = (char *)*((void *)&v22 + 1);
      uint64_t v16 = v23;
    }
    long long v19 = *(_OWORD *)a1;
    *a1 = v15;
    a1[1] = v17;
    long long v22 = v19;
    uint64_t v20 = a1[2];
    a1[2] = v16;
    float32x4_t v23 = v20;
    uint64_t v21 = v19;
    sub_1A66F9DD8((uint64_t)&v21);
  }
}

uint64_t sub_1A66F9DD8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    sub_1A66F474C((VPTimeFreqConverter **)(i - 8), 0);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1A66F9E2C(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_1A66F9ED4(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        unint64_t v10 = *(void **)(v8 - 24);
        v8 -= 24;
        uint64_t v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void sub_1A66F9ED4(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_1A66E9D7C();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      uint64_t v12 = (char *)sub_1A66FA0B4(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    float32x4_t v15 = v12;
    uint64_t v16 = &v12[24 * v8];
    uint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    int64x2_t v17 = &v16[v14];
    sub_1A66FA03C(a1, &v15);
    sub_1A66FA220((uint64_t)&v15);
  }
}

void sub_1A66FA028(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1A66FA220((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1A66FA03C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1A66FA0FC((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1A66FA0B4(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_1A66E9A74();
  }
  return operator new(24 * a2);
}

uint64_t sub_1A66FA0FC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_1A66FA1A0((uint64_t)v11);
  return v9;
}

uint64_t sub_1A66FA1A0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1A66FA1D8(a1);
  }
  return a1;
}

void sub_1A66FA1D8(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t sub_1A66FA220(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1A66FA258(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

void sub_1A66FA2B4(void *a1, float *a2)
{
  uint64_t v3 = a1[208];
  unint64_t v4 = (a1[209] - v3) >> 2;
  if (a1[209] == v3)
  {
LABEL_7:
    unint64_t v5 = (a1[209] - v3) >> 2;
  }
  else
  {
    unint64_t v5 = 0;
    if (v4 <= 1) {
      uint64_t v6 = 1;
    }
    else {
      uint64_t v6 = (a1[209] - v3) >> 2;
    }
    while (*(float *)(v3 + 4 * v5) <= *a2)
    {
      if (v6 == ++v5) {
        goto LABEL_7;
      }
    }
  }
  uint64_t v7 = (uint64_t)(a1 + 206);
  if (v4 >= v5) {
    unint64_t v4 = v5;
  }
  a1[206] = v4;
  sub_1A66F95E8(v7);
  a1[3] = a1[206];
}

void sub_1A66FA330(uint64_t a1)
{
  float __C = 0.0;
  vDSP_maxv(*(const float **)(a1 + 1736), 1, &__C, *(void *)(a1 + 24));
  float v2 = logf(1.0 - *(float *)(a1 + 584));
  vDSP_Length v3 = *(void *)(a1 + 24);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 1736);
    uint64_t v6 = *(const float **)(a1 + 1152);
    float v7 = v2 / __C;
    do
    {
      v6[v4] = 1.0 - expf(v7 * *(float *)(v5 + 4 * v4));
      ++v4;
    }
    while (v3 != v4);
  }
  else
  {
    uint64_t v6 = *(const float **)(a1 + 1152);
  }
  vDSP_vneg(v6, 1, *(float **)(a1 + 1176), 1, v3);
  float __B = 1.0;
  vDSP_vsadd(*(const float **)(a1 + 1176), 1, &__B, *(float **)(a1 + 1200), 1, *(void *)(a1 + 24));
  vDSP_vsadd(*(const float **)(a1 + 1176), 1, (const float *)(a1 + 752), *(float **)(a1 + 1176), 1, *(void *)(a1 + 24));
  vDSP_vsmul(*(const float **)(a1 + 1152), 1, (const float *)(a1 + 756), *(float **)(a1 + 1224), 1, *(void *)(a1 + 24));
  vDSP_vmul(*(const float **)(a1 + 1224), 1, *(const float **)(a1 + 1320), 1, *(float **)(a1 + 1224), 1, *(void *)(a1 + 24));
}

void sub_1A66FB240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_1A66FBEA0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  v8[0] = 0;
  if (!qword_1EB67A540)
  {
    v8[1] = (void *)MEMORY[0x1E4F143A8];
    v8[2] = (void *)3221225472;
    v8[3] = sub_1A66FBFC8;
    v8[4] = &unk_1E5C69480;
    v8[5] = v8;
    long long v9 = xmmword_1E5C69970;
    uint64_t v10 = 0;
    qword_1EB67A540 = _sl_dlopen();
  }
  uint64_t v6 = (void *)qword_1EB67A540;
  if (!qword_1EB67A540) {
    sub_1A688D8C4(v8, a2, a3, a4, a5);
  }
  if (v8[0]) {
    free(v8[0]);
  }
  uint64_t result = dlsym(v6, "AXLocalizedString");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_1E96C4758 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1A66FBFC8()
{
  uint64_t result = _sl_dlopen();
  qword_1EB67A540 = result;
  return result;
}

uint64_t ausdk::AUMIDIBase::DelegateGetPropertyInfo(ausdk::AUMIDIBase *this, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  return 4294956417;
}

uint64_t ausdk::AUMIDIBase::DelegateGetProperty(ausdk::AUMIDIBase *this, unsigned int a2, unsigned int a3, unsigned int a4, void *a5)
{
  return 4294956417;
}

uint64_t ausdk::AUMIDIBase::DelegateSetProperty(ausdk::AUMIDIBase *this, unsigned int a2, unsigned int a3, unsigned int a4, const void *a5)
{
  return 4294956417;
}

uint64_t ausdk::AUMIDIBase::HandleMIDIEvent(ausdk::AUMIDIBase *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!*(unsigned char *)(*((void *)this + 1) + 17)) {
    return 4294956429;
  }
  if (a2 >> 4 == 8) {
    return (*(uint64_t (**)(ausdk::AUMIDIBase *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)this + 88))(this, a3, a4, a5, a6);
  }
  if (a2 >> 4 != 9) {
    return (*(uint64_t (**)(void))(*(void *)this + 72))();
  }
  uint64_t v6 = *(void *)this;
  if (a5) {
    return (*(uint64_t (**)(void))(v6 + 80))();
  }
  else {
    return (*(uint64_t (**)(void))(v6 + 88))();
  }
}

uint64_t ausdk::AUMIDIBase::HandleNonNoteEvent(ausdk::AUMIDIBase *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  switch(a2 >> 4)
  {
    case 0xAu:
      uint64_t result = (*(uint64_t (**)(ausdk::AUMIDIBase *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)this
                                                                                                  + 128))(this, a3, a4, a5, a6);
      break;
    case 0xBu:
      switch(a4)
      {
        case 'x':
          uint64_t result = (*(uint64_t (**)(ausdk::AUMIDIBase *, uint64_t))(*(void *)this + 152))(this, a3);
          break;
        case 'y':
          uint64_t result = (*(uint64_t (**)(ausdk::AUMIDIBase *, uint64_t))(*(void *)this + 136))(this, a3);
          break;
        case '{':
          uint64_t result = (*(uint64_t (**)(ausdk::AUMIDIBase *, uint64_t))(*(void *)this + 144))(this, a3);
          break;
        default:
          uint64_t result = (*(uint64_t (**)(ausdk::AUMIDIBase *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)this + 96))(this, a3, a4, a5, a6);
          break;
      }
      break;
    case 0xCu:
      uint64_t result = (*(uint64_t (**)(ausdk::AUMIDIBase *, uint64_t, uint64_t))(*(void *)this + 120))(this, a3, a4);
      break;
    case 0xDu:
      uint64_t result = (*(uint64_t (**)(ausdk::AUMIDIBase *, uint64_t, uint64_t, uint64_t))(*(void *)this + 112))(this, a3, a4, a6);
      break;
    case 0xEu:
      uint64_t result = (*(uint64_t (**)(ausdk::AUMIDIBase *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)this
                                                                                                  + 104))(this, a3, a4, a5, a6);
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t ausdk::AUMIDIBase::SysEx(ausdk::AUMIDIBase *this, const unsigned __int8 *a2)
{
  if (*(unsigned char *)(*((void *)this + 1) + 17)) {
    return (*(uint64_t (**)(ausdk::AUMIDIBase *, const unsigned __int8 *))(*(void *)this + 160))(this, a2);
  }
  else {
    return 4294956429;
  }
}

void sub_1A66FC350()
{
}

uint64_t sub_1A66FC364(uint64_t a1, unsigned __int8 a2, unsigned __int8 a3, unsigned __int8 a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, void, void, void, void, uint64_t))(*(void *)a1 + 64))(a1, a2 & 0xF0, a2 & 0xF, a3, a4, a5);
}

uint64_t sub_1A66FC3A8()
{
  return 4294967292;
}

uint64_t sub_1A66FC3B0()
{
  return 0;
}

uint64_t sub_1A66FC3B8()
{
  return 0;
}

uint64_t TTSPreferencesSetValueForKey(const __CFString *a1, const void *a2)
{
  CFPreferencesSetAppValue(a1, a2, @"com.apple.SpeakSelection");

  return CFPreferencesAppSynchronize(@"com.apple.SpeakSelection");
}

uint64_t sub_1A66FC400(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1A66FC410(uint64_t a1)
{
}

void sub_1A66FC418(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

id TTSLanguageCanonicalFormToGeneralLanguage(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = objc_msgSend_lowercaseString(a1, a2, a3, a4, a5);
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(&unk_1EFB95468, v6, (uint64_t)&v22, (uint64_t)v26, 16);
  if (v7)
  {
    uint64_t v11 = v7;
    uint64_t v12 = *(void *)v23;
    while (2)
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (*(void *)v23 != v12) {
          objc_enumerationMutation(&unk_1EFB95468);
        }
        uint64_t v14 = *(void *)(*((void *)&v22 + 1) + 8 * i);
        if (objc_msgSend_rangeOfString_(v5, v8, v14, v9, v10) != 0x7FFFFFFFFFFFFFFFLL)
        {
          uint64_t v16 = objc_msgSend_rangeOfString_(v5, v8, v14, v9, v10);
          objc_msgSend_substringToIndex_(v5, v17, v16, v18, v19);
          id v15 = (id)objc_claimAutoreleasedReturnValue();
          goto LABEL_11;
        }
      }
      uint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(&unk_1EFB95468, v8, (uint64_t)&v22, (uint64_t)v26, 16);
      if (v11) {
        continue;
      }
      break;
    }
  }
  id v15 = v5;
LABEL_11:
  uint64_t v20 = v15;

  return v20;
}

id VOTBundle(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = (void *)qword_1EB67A530;
  if (!qword_1EB67A530)
  {
    uint64_t v6 = objc_msgSend_stringByAppendingString_(&stru_1EFB83720, a2, @"/System/Library/CoreServices/VoiceOverTouch.app", a4, a5);
    uint64_t v10 = objc_msgSend_bundleWithPath_(MEMORY[0x1E4F28B50], v7, (uint64_t)v6, v8, v9);
    uint64_t v11 = (void *)qword_1EB67A530;
    qword_1EB67A530 = v10;

    if (!qword_1EB67A530)
    {
      int64x2_t v17 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v12, v13, v14, v15);
      uint64_t v21 = objc_msgSend_stringWithUTF8String_(NSString, v18, (uint64_t)"NSBundle *VOTBundle(void)", v19, v20);
      objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v17, v22, (uint64_t)v21, @"TTSEmojiUtilities.m", 52, @"Unable to create VOT bundle from path: %@", v6);
    }
    uint64_t v5 = (void *)qword_1EB67A530;
  }

  return v5;
}

BOOL TTSisSpeakableEmojiString(void *a1)
{
  id v1 = a1;
  if (objc_msgSend_UTF8String(v1, v2, v3, v4, v5))
  {
    uint64_t v17 = 0;
    uint64_t v18 = &v17;
    uint64_t v19 = 0x3010000000;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v20 = &unk_1A68F25BB;
    objc_msgSend_length(v1, v6, v7, v8, v9);
    CEMEnumerateEmojiTokensInStringWithBlock();
    uint64_t v10 = v18[5];
    BOOL v15 = v10 == objc_msgSend_length(v1, v11, v12, v13, v14);
    _Block_object_dispose(&v17, 8);
  }
  else
  {
    BOOL v15 = 0;
  }

  return v15;
}

void sub_1A66FC7B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1A66FC7CC(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, unsigned char *a5)
{
  uint64_t v5 = *(void *)(*(void *)(result + 32) + 8);
  if (a3 <= *(void *)(v5 + 40) + *(void *)(v5 + 32)) {
    *(void *)(v5 + 40) = a3 + a4;
  }
  else {
    *a5 = 1;
  }
  return result;
}

void sub_1A66FC910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1A66FC928(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  uint64_t v5 = *(void *)(*(void *)(result + 32) + 8);
  *(void *)(v5 + 32) = a3;
  *(void *)(v5 + 40) = a4;
  *a5 = 1;
  return result;
}

uint64_t sub_1A66FCA30()
{
  qword_1EB67A518 = (uint64_t)dispatch_queue_create("internal-emoji-locale-cache", 0);

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1A66FCA70(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = objc_msgSend_isEqualToString_((void *)qword_1EB67A520, a2, *(void *)(a1 + 32), a4, a5);
  if ((result & 1) == 0)
  {
    uint64_t v11 = objc_msgSend_copy(*(void **)(a1 + 32), v7, v8, v9, v10);
    uint64_t v12 = (void *)qword_1EB67A520;
    qword_1EB67A520 = v11;

    if (qword_1EB67A528)
    {
      CFRelease((CFTypeRef)qword_1EB67A528);
      qword_1EB67A528 = 0;
    }
    uint64_t result = CEMCreateEmojiLocaleData();
    qword_1EB67A528 = result;
  }
  return result;
}

void sub_1A66FCC8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 96), 8);
  _Unwind_Resume(a1);
}

CFTypeRef sub_1A66FCCB0(uint64_t a1)
{
  CFTypeRef result = (CFTypeRef)qword_1EB67A528;
  if (qword_1EB67A528)
  {
    CFTypeRef result = CFRetain((CFTypeRef)qword_1EB67A528);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  }
  return result;
}

uint64_t sub_1A66FCCEC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = objc_msgSend_replaceCharactersInRange_withString_(*(void **)(a1 + 32), a2, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) + a3, a4, (uint64_t)&stru_1EFB83720);
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) -= a4;
  return result;
}

void sub_1A66FCECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

CFTypeRef sub_1A66FCEE4(uint64_t a1)
{
  CFTypeRef result = (CFTypeRef)qword_1EB67A528;
  if (qword_1EB67A528)
  {
    CFTypeRef result = CFRetain((CFTypeRef)qword_1EB67A528);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  }
  return result;
}

void sub_1A66FCF20(uint64_t a1)
{
  float v2 = (void *)MEMORY[0x1AD0C1200]();
  uint64_t v3 = (void *)CEMEmojiTokenCopyName();
  uint64_t v7 = objc_msgSend_stringWithFormat_(NSString, v4, @" %@ ", v5, v6, v3);

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1A66FD180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A66FD198(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  v47[2] = *MEMORY[0x1E4F143B8];
  id v7 = a4;
  uint64_t v12 = v7;
  if (*(unsigned char *)(a1 + 80))
  {
    uint64_t v13 = NSString;
    uint64_t v14 = VOTBundle((uint64_t)v7, v8, v9, v10, v11);
    BOOL v15 = AXNSLocalizedStringForLocale();
    uint64_t v19 = objc_msgSend_stringWithFormat_(v13, v16, (uint64_t)v15, v17, v18, v12);

    uint64_t v12 = (void *)v19;
  }
  if (*(void *)(a1 + 40) && a2 + a3 < (unint64_t)objc_msgSend_length(*(void **)(a1 + 48), v8, v9, v10, v11))
  {
    uint64_t v22 = objc_msgSend_stringByAppendingString_(v12, v8, *(void *)(a1 + 40), v20, v21);

    uint64_t v12 = (void *)v22;
  }
  objc_msgSend_replaceCharactersInRange_withString_(*(void **)(a1 + 56), v8, *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) + a2, a3, (uint64_t)v12);
  long long v23 = *(void **)(a1 + 64);
  v46[0] = @"originalRange";
  uint64_t v26 = objc_msgSend_valueWithRange_(MEMORY[0x1E4F29238], v24, a2, a3, v25);
  v46[1] = @"processedRange";
  v47[0] = v26;
  uint64_t v27 = (void *)MEMORY[0x1E4F29238];
  uint64_t v28 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) + a2;
  uint64_t v33 = objc_msgSend_length(v12, v29, v30, v31, v32);
  unint64_t v36 = objc_msgSend_valueWithRange_(v27, v34, v28, v33, v35);
  v47[1] = v36;
  uint64_t v38 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v37, (uint64_t)v47, (uint64_t)v46, 2);
  objc_msgSend_addObject_(v23, v39, (uint64_t)v38, v40, v41);

  *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) += objc_msgSend_length(v12, v42, v43, v44, v45) - a3;
}

char *CAStringForOSType(unsigned int a1, char *__dst, size_t a3, int16x8_t a4)
{
  a4.i32[0] = bswap32(a1);
  *(int8x8_t *)a4.i8 = vzip1_s8(*(int8x8_t *)a4.i8, *(int8x8_t *)a4.i8);
  v5.i64[0] = 0x1F0000001FLL;
  v5.i64[1] = 0x1F0000001FLL;
  v6.i64[0] = 0x5F0000005FLL;
  v6.i64[1] = 0x5F0000005FLL;
  *(int8x8_t *)a4.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v6, (uint32x4_t)vsraq_n_s32(v5, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)a4.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)a4.i8, (int8x8_t)0x2E002E002E002ELL);
  char v9 = 4;
  *(_DWORD *)__source = vmovn_s16(a4).u32[0];
  __source[4] = 0;
  strlcpy(__dst, __source, a3);
  if (v9 < 0) {
    operator delete(*(void **)__source);
  }
  return __dst;
}

void sub_1A66FD430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *CAStreamBasicDescription::VirtualizeLinearPCMFormat(_DWORD *this, AudioStreamBasicDescription *a2)
{
  if (this[2] == 1819304813 && (this[3] & 0x40) == 0)
  {
    int v2 = 4 * this[7];
    this[3] = 9;
    this[4] = v2;
    this[5] = 1;
    this[6] = v2;
    this[8] = 32;
  }
  return this;
}

uint64_t CAStreamBasicDescription::VirtualizeLinearPCMFormat(uint64_t this, _DWORD *a2, AudioStreamBasicDescription *a3)
{
  if (a2[2] == 1819304813 && (a2[3] & 0x40) == 0)
  {
    if (this) {
      int v3 = 9;
    }
    else {
      int v3 = 11;
    }
    int v4 = 4 * a2[7];
    a2[3] = v3;
    a2[4] = v4;
    a2[5] = 1;
    a2[6] = v4;
    a2[8] = 32;
  }
  return this;
}

double CAStreamBasicDescription::ResetFormat(CAStreamBasicDescription *this, AudioStreamBasicDescription *a2)
{
  *((_DWORD *)this + 8) = 0;
  double result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

uint64_t CAStreamBasicDescription::FillOutFormat(uint64_t this, AudioStreamBasicDescription *a2, const AudioStreamBasicDescription *a3)
{
  if (*(double *)this == 0.0) {
    *(Float64 *)this = a2->mSampleRate;
  }
  if (!*(_DWORD *)(this + 8)) {
    *(_DWORD *)(this + 8) = a2->mFormatID;
  }
  if (!*(_DWORD *)(this + 12)) {
    *(_DWORD *)(this + 12) = a2->mFormatFlags;
  }
  if (!*(_DWORD *)(this + 16)) {
    *(_DWORD *)(this + 16) = a2->mBytesPerPacket;
  }
  if (!*(_DWORD *)(this + 20)) {
    *(_DWORD *)(this + 20) = a2->mFramesPerPacket;
  }
  if (!*(_DWORD *)(this + 24)) {
    *(_DWORD *)(this + 24) = a2->mBytesPerFrame;
  }
  if (!*(_DWORD *)(this + 28)) {
    *(_DWORD *)(this + 28) = a2->mChannelsPerFrame;
  }
  if (!*(_DWORD *)(this + 32)) {
    *(_DWORD *)(this + 32) = a2->mBitsPerChannel;
  }
  return this;
}

uint64_t CAStreamBasicDescription::IsEqual(CAStreamBasicDescription *this, const AudioStreamBasicDescription *a2, int a3)
{
  if (!a3) {
    return sub_1A66FD63C((uint64_t)this, (uint64_t)a2);
  }
  if (*(double *)this != 0.0 && a2->mSampleRate != 0.0 && *(double *)this != a2->mSampleRate) {
    return 0;
  }
  int v4 = *((_DWORD *)this + 2);
  if (v4)
  {
    AudioFormatID mFormatID = a2->mFormatID;
    if (mFormatID)
    {
      if (v4 != mFormatID) {
        return 0;
      }
    }
  }
  int v6 = *((_DWORD *)this + 4);
  if (v6)
  {
    UInt32 mBytesPerPacket = a2->mBytesPerPacket;
    if (mBytesPerPacket)
    {
      if (v6 != mBytesPerPacket) {
        return 0;
      }
    }
  }
  int v8 = *((_DWORD *)this + 5);
  if (v8)
  {
    UInt32 mFramesPerPacket = a2->mFramesPerPacket;
    if (mFramesPerPacket)
    {
      if (v8 != mFramesPerPacket) {
        return 0;
      }
    }
  }
  int v10 = *((_DWORD *)this + 6);
  if (v10)
  {
    UInt32 mBytesPerFrame = a2->mBytesPerFrame;
    if (mBytesPerFrame)
    {
      if (v10 != mBytesPerFrame) {
        return 0;
      }
    }
  }
  int v12 = *((_DWORD *)this + 7);
  if (v12)
  {
    UInt32 mChannelsPerFrame = a2->mChannelsPerFrame;
    if (mChannelsPerFrame)
    {
      if (v12 != mChannelsPerFrame) {
        return 0;
      }
    }
  }
  int v14 = *((_DWORD *)this + 8);
  if (v14)
  {
    UInt32 mBitsPerChannel = a2->mBitsPerChannel;
    if (mBitsPerChannel)
    {
      if (v14 != mBitsPerChannel) {
        return 0;
      }
    }
  }
  return sub_1A66FDDA0((uint64_t)this, (uint64_t)a2, 1, 1);
}

BOOL sub_1A66FD63C(uint64_t a1, uint64_t a2)
{
  return *(double *)a1 == *(double *)a2
      && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
      && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
      && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)
      && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
      && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
      && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28)
      && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32);
}

uint64_t CAStreamBasicDescription::IsEqual(CAStreamBasicDescription *this, const AudioStreamBasicDescription *a2)
{
  if (*(double *)this != 0.0 && a2->mSampleRate != 0.0 && *(double *)this != a2->mSampleRate) {
    return 0;
  }
  int v3 = *((_DWORD *)this + 2);
  if (v3)
  {
    AudioFormatID mFormatID = a2->mFormatID;
    if (mFormatID && v3 != mFormatID) {
      return 0;
    }
  }
  int v6 = *((_DWORD *)this + 4);
  if (v6)
  {
    UInt32 mBytesPerPacket = a2->mBytesPerPacket;
    if (mBytesPerPacket)
    {
      if (v6 != mBytesPerPacket) {
        return 0;
      }
    }
  }
  int v8 = *((_DWORD *)this + 5);
  if (v8)
  {
    UInt32 mFramesPerPacket = a2->mFramesPerPacket;
    if (mFramesPerPacket)
    {
      if (v8 != mFramesPerPacket) {
        return 0;
      }
    }
  }
  int v10 = *((_DWORD *)this + 6);
  if (v10)
  {
    UInt32 mBytesPerFrame = a2->mBytesPerFrame;
    if (mBytesPerFrame)
    {
      if (v10 != mBytesPerFrame) {
        return 0;
      }
    }
  }
  int v12 = *((_DWORD *)this + 7);
  if (v12)
  {
    UInt32 mChannelsPerFrame = a2->mChannelsPerFrame;
    if (mChannelsPerFrame)
    {
      if (v12 != mChannelsPerFrame) {
        return 0;
      }
    }
  }
  int v14 = *((_DWORD *)this + 8);
  if (v14 && (UInt32 mBitsPerChannel = a2->mBitsPerChannel) != 0 && v14 != mBitsPerChannel) {
    return 0;
  }
  else {
    return sub_1A66FDDA0((uint64_t)this, (uint64_t)a2, 1, 1);
  }
}

BOOL MinimalSafetyCheck(const AudioStreamBasicDescription *a1)
{
  BOOL result = 0;
  if (a1->mSampleRate >= 0.0 && a1->mSampleRate < 3000000.0)
  {
    UInt32 mBytesPerPacket = a1->mBytesPerPacket;
    if (mBytesPerPacket >= 0xF4240) {
      return 0;
    }
    UInt32 mFramesPerPacket = a1->mFramesPerPacket;
    if (mFramesPerPacket >= 0xF4240) {
      return 0;
    }
    UInt32 mBytesPerFrame = a1->mBytesPerFrame;
    if (mBytesPerFrame >= 0xF4240) {
      return 0;
    }
    BOOL result = 0;
    if (a1->mChannelsPerFrame - 1 > 0x3FF || a1->mBitsPerChannel > 0x400) {
      return result;
    }
    AudioFormatID mFormatID = a1->mFormatID;
    if (!mFormatID) {
      return 0;
    }
    BOOL v8 = mFramesPerPacket == 1 && mBytesPerPacket == mBytesPerFrame;
    return mFormatID != 1819304813 || v8;
  }
  return result;
}

uint64_t CAStreamBasicDescription::FromText(CAStreamBasicDescription *this, char *a2, AudioStreamBasicDescription *a3)
{
  if (*(unsigned char *)this == 45) {
    int32x4_t v5 = (CAStreamBasicDescription *)((char *)this + 1);
  }
  else {
    int32x4_t v5 = this;
  }
  int v6 = *(unsigned __int8 *)v5;
  if (v6 == 76)
  {
    uint64_t v7 = 2 * (*((unsigned char *)v5 + 1) == 69);
    int i = 12;
  }
  else
  {
    if (v6 != 66)
    {
      int i = 12;
      goto LABEL_12;
    }
    uint64_t v7 = 2 * (*((unsigned char *)v5 + 1) == 69);
    if (*((unsigned char *)v5 + 1) == 69) {
      int i = 14;
    }
    else {
      int i = 12;
    }
  }
  int32x4_t v5 = (CAStreamBasicDescription *)((char *)v5 + v7);
  int v6 = *(unsigned __int8 *)v5;
LABEL_12:
  char v9 = (FILE **)MEMORY[0x1E4F143C8];
  switch(v6)
  {
    case 'U':
      i &= 0xAu;
      int v10 = *((unsigned __int8 *)v5 + 1);
      int32x4_t v5 = (CAStreamBasicDescription *)((char *)v5 + 1);
      int v6 = v10;
      break;
    case 'F':
      int i = i & 0xFFFFFFFA | 1;
      goto LABEL_17;
    case 'I':
LABEL_17:
      uint64_t v11 = (CAStreamBasicDescription *)((char *)v5 + 1);
      if (*((char *)v5 + 1) < 0)
      {
        int v13 = 0;
      }
      else
      {
        int v12 = *((unsigned __int8 *)v5 + 1);
        if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * *((unsigned __int8 *)v5 + 1) + 60) & 0x400) != 0)
        {
          int v13 = 0;
          uint64_t v11 = (CAStreamBasicDescription *)((char *)v5 + 2);
          while (1)
          {
            int v13 = v12 + 10 * v13 - 48;
            if (*(char *)v11 < 0) {
              break;
            }
            uint64_t v18 = *(unsigned __int8 *)v11;
            int v12 = *(unsigned __int8 *)v11;
            uint64_t v11 = (CAStreamBasicDescription *)((char *)v11 + 1);
            if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v18 + 60) & 0x400) == 0)
            {
              int32x4_t v5 = (CAStreamBasicDescription *)((char *)v11 - 2);
              uint64_t v11 = (CAStreamBasicDescription *)((char *)v11 - 1);
              goto LABEL_33;
            }
          }
        }
        else
        {
          int v13 = 0;
LABEL_33:
          if (v12 == 46)
          {
            int v21 = *((char *)v5 + 2);
            uint64_t v19 = (CAStreamBasicDescription *)((char *)v5 + 2);
            unsigned __int8 v20 = v21;
            if (v21 < 0 || (uint64_t v22 = v20, (*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v20 + 60) & 0x400) == 0))
            {
              long long v23 = (FILE *)*MEMORY[0x1E4F143C8];
              long long v24 = "Expected fractional bits following '.'\n";
              size_t v25 = 39;
LABEL_37:
              fwrite(v24, v25, 1uLL, v23);
              goto LABEL_101;
            }
            int v29 = 0;
            uint64_t v11 = v19;
            do
            {
              if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v22 + 60) & 0x400) == 0) {
                break;
              }
              int v30 = *((char *)v11 + 1);
              uint64_t v11 = (CAStreamBasicDescription *)((char *)v11 + 1);
              int v29 = 10 * v29 + v22 - 48;
              uint64_t v22 = v30;
            }
            while ((v30 & 0x80000000) == 0);
            v13 += v29;
            i |= v29 << 7;
          }
        }
      }
      unsigned int v28 = 1819304813;
      unsigned int v26 = (v13 + 7) >> 3;
      if ((v13 & 7) != 0) {
        int i = i & 0xFFFFFFE7 | 0x10;
      }
      int v27 = 1;
      goto LABEL_50;
  }
  uint64_t v14 = 0;
  int __c = 538976288;
  BOOL v15 = this;
  uint64_t v11 = this;
  while (1)
  {
    int v17 = *(unsigned __int8 *)v11;
    uint64_t v11 = (CAStreamBasicDescription *)((char *)v11 + 1);
    int v16 = v17;
    if (v17 == 92)
    {
      if (*(unsigned char *)v11 != 120) {
        return 0;
      }
      int v51 = 0;
      if (sscanf((const char *)v15 + 2, "%02X", &v51) != 1) {
        return 0;
      }
      *((unsigned char *)&__c + v14) = v51;
      uint64_t v11 = (CAStreamBasicDescription *)((char *)v15 + 4);
      goto LABEL_26;
    }
    *((unsigned char *)&__c + v14) = v16;
    if (!v16) {
      break;
    }
LABEL_26:
    ++v14;
    BOOL v15 = v11;
    if (v14 == 4) {
      goto LABEL_40;
    }
  }
  if (v14 != 3) {
    return 0;
  }
  HIBYTE(__c) = 32;
  uint64_t v11 = v15;
LABEL_40:
  if (memchr("-@/#", SHIBYTE(__c), 5uLL))
  {
    HIBYTE(__c) = 32;
    uint64_t v11 = (CAStreamBasicDescription *)((char *)v11 - 1);
  }
  int i = 0;
  unsigned int v26 = 0;
  int v27 = 0;
  int v13 = 0;
  unsigned int v28 = bswap32(__c);
LABEL_50:
  int v31 = *(unsigned __int8 *)v11;
  if (v31 != 64)
  {
    double v33 = 0.0;
    goto LABEL_57;
  }
  int v32 = *((char *)v11 + 1);
  uint64_t v11 = (CAStreamBasicDescription *)((char *)v11 + 1);
  LOBYTE(v31) = v32;
  if (v32 < 0) {
    goto LABEL_100;
  }
  double v33 = 0.0;
  while ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v31 + 60) & 0x400) != 0)
  {
    double v33 = (double)(v31 - 48) + v33 * 10.0;
    int v34 = *((char *)v11 + 1);
    uint64_t v11 = (CAStreamBasicDescription *)((char *)v11 + 1);
    LOBYTE(v31) = v34;
    if (v34 < 0) {
      goto LABEL_100;
    }
  }
LABEL_57:
  if (v31 == 47)
  {
    for (int i = 0; ; int i = (v36 + v35) | (16 * i))
    {
      uint64_t v11 = (CAStreamBasicDescription *)((char *)v11 + 1);
      int v35 = *(char *)v11;
      if ((v35 - 48) >= 0xA)
      {
        int v31 = *(unsigned __int8 *)v11;
        if ((v31 - 65) >= 6)
        {
          if ((v31 - 97) > 5) {
            break;
          }
          int v36 = -87;
        }
        else
        {
          int v36 = -55;
        }
      }
      else
      {
        int v36 = -48;
      }
    }
  }
  if (v31 != 35)
  {
    unsigned __int8 v37 = v31;
    int v39 = v27;
    goto LABEL_73;
  }
  int v38 = *((char *)v11 + 1);
  uint64_t v11 = (CAStreamBasicDescription *)((char *)v11 + 1);
  unsigned __int8 v37 = v38;
  if (v38 < 0) {
    goto LABEL_100;
  }
  int v39 = v27;
  while ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v37 + 60) & 0x400) != 0)
  {
    int v39 = 10 * v39 + v37 - 48;
    int v40 = *((char *)v11 + 1);
    uint64_t v11 = (CAStreamBasicDescription *)((char *)v11 + 1);
    unsigned __int8 v37 = v40;
    if (v40 < 0) {
      goto LABEL_100;
    }
  }
LABEL_73:
  if (v37 != 58)
  {
LABEL_82:
    if (v37 != 44) {
      goto LABEL_99;
    }
    uint64_t v44 = (char *)v11 + 1;
    int v45 = *((unsigned __int8 *)v11 + 1);
    if ((*((char *)v11 + 1) & 0x80000000) == 0
      && (*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * *((unsigned __int8 *)v11 + 1) + 60) & 0x400) != 0)
    {
      int v27 = 0;
      uint64_t v46 = (char *)v11 + 2;
      do
      {
        uint64_t v44 = v46;
        int v27 = v45 + 10 * v27 - 48;
        int v47 = *v46;
        int v45 = v47;
        if (v47 < 0) {
          break;
        }
        int v48 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v47 + 60);
        uint64_t v46 = v44 + 1;
      }
      while ((v48 & 0x400) != 0);
      uint64_t v11 = (CAStreamBasicDescription *)(v44 - 1);
    }
    else
    {
      int v27 = 0;
    }
    if (v45 == 73)
    {
      uint64_t v44 = (char *)v11 + 2;
    }
    else if (v45 == 68)
    {
      if (v28 != 1819304813)
      {
        long long v23 = *v9;
        long long v24 = "non-interleaved flag invalid for non-PCM formats\n";
        size_t v25 = 49;
        goto LABEL_37;
      }
      uint64_t v11 = (CAStreamBasicDescription *)((char *)v11 + 2);
      i |= 0x20u;
LABEL_99:
      if (*(unsigned char *)v11) {
        goto LABEL_100;
      }
      *(double *)a2 = v33;
      *((_DWORD *)a2 + 2) = v28;
      *((_DWORD *)a2 + 3) = i;
      *((_DWORD *)a2 + 4) = v26;
      *((_DWORD *)a2 + 5) = v39;
      *((_DWORD *)a2 + 6) = v26;
      *((_DWORD *)a2 + 7) = v27;
      uint64_t result = 1;
      *((_DWORD *)a2 + 8) = v13;
      *((_DWORD *)a2 + 9) = 0;
      return result;
    }
    if (v28 == 1819304813) {
      int v49 = v27;
    }
    else {
      int v49 = 1;
    }
    v26 *= v49;
    uint64_t v11 = (CAStreamBasicDescription *)v44;
    goto LABEL_99;
  }
  i &= 0xFFFFFFE7;
  int v41 = *((unsigned __int8 *)v11 + 1);
  if (v41 == 76) {
    goto LABEL_77;
  }
  if (v41 == 72)
  {
    i |= 0x10u;
LABEL_77:
    int v42 = *((char *)v11 + 2);
    uint64_t v11 = (CAStreamBasicDescription *)((char *)v11 + 2);
    unsigned __int8 v37 = v42;
    if ((v42 & 0x80000000) == 0)
    {
      unsigned int v26 = 0;
      while ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v37 + 60) & 0x400) != 0)
      {
        int v43 = *((char *)v11 + 1);
        uint64_t v11 = (CAStreamBasicDescription *)((char *)v11 + 1);
        unsigned int v26 = 10 * v26 + v37 - 48;
        unsigned __int8 v37 = v43;
        if (v43 < 0) {
          goto LABEL_100;
        }
      }
      goto LABEL_82;
    }
LABEL_100:
    fprintf(*v9, "extra characters at end of format string: %s\n", (const char *)v11);
  }
LABEL_101:
  fprintf(*v9, "Invalid format string: %s\n", (const char *)this);
  fwrite("Syntax of format strings is: \n", 0x1EuLL, 1uLL, *v9);
  return 0;
}

uint64_t sub_1A66FDDA0(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (a4)
  {
    int32x4_t v4 = *(int32x4_t *)(a2 + 8);
    v4.i64[1] = *(void *)(a1 + 8);
    if (vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v4)))) {
      return 1;
    }
  }
  int v6 = *(_DWORD *)(a1 + 12);
  if (*(_DWORD *)(a1 + 8) != 1819304813) {
    return v6 == *(_DWORD *)(a2 + 12);
  }
  int v7 = v6 & 0x7FFFFFFF;
  if ((v6 & 0x7FFFFFFF) == 0) {
    int v7 = *(_DWORD *)(a1 + 12);
  }
  if (a3) {
    unsigned int v8 = v7;
  }
  else {
    unsigned int v8 = v7 & 0xFFFFFFBF;
  }
  unsigned int v9 = *(_DWORD *)(a1 + 24);
  if (v9)
  {
    int v10 = *(_DWORD *)(a1 + 28);
    if ((v6 & 0x20) != 0) {
      unsigned int v11 = 1;
    }
    else {
      unsigned int v11 = *(_DWORD *)(a1 + 28);
    }
    if (v11)
    {
      unsigned int v9 = 8 * (v9 / v11);
      unsigned int v12 = *(_DWORD *)(a1 + 32);
      int v13 = v8 | 8;
      BOOL v14 = v9 == v12;
      goto LABEL_20;
    }
    unsigned int v9 = 0;
    unsigned int v12 = *(_DWORD *)(a1 + 32);
    int v13 = v8 | 8;
  }
  else
  {
    int v13 = v8 | 8;
    int v10 = *(_DWORD *)(a1 + 28);
    unsigned int v12 = *(_DWORD *)(a1 + 32);
  }
  BOOL v14 = v12 == 0;
LABEL_20:
  if (v14) {
    unsigned int v8 = v13;
  }
  BOOL v16 = (v12 & 7) == 0 && v9 == v12;
  unsigned int v17 = v8 & 0xFFFFFFEF;
  if (!v16) {
    unsigned int v17 = v8;
  }
  if (v17) {
    v17 &= ~4u;
  }
  BOOL v18 = (v17 & 8) == 0 || v12 > 8;
  int v19 = v17 & 2;
  if (v18) {
    int v19 = v17;
  }
  if (v10 == 1) {
    unsigned int v20 = v19 & 0xFFFFFFDF;
  }
  else {
    unsigned int v20 = v19;
  }
  if (!v20) {
    unsigned int v20 = 0x80000000;
  }
  unsigned int v21 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a2 + 8) != 1819304813) {
    return v20 == v21;
  }
  int v22 = v21 & 0x7FFFFFFF;
  if ((v21 & 0x7FFFFFFF) == 0) {
    int v22 = *(_DWORD *)(a2 + 12);
  }
  if (a3) {
    unsigned int v23 = v22;
  }
  else {
    unsigned int v23 = v22 & 0xFFFFFFBF;
  }
  unsigned int v24 = *(_DWORD *)(a2 + 24);
  if (!v24)
  {
    int v28 = v23 | 8;
    int v25 = *(_DWORD *)(a2 + 28);
    unsigned int v27 = *(_DWORD *)(a2 + 32);
LABEL_53:
    BOOL v29 = v27 == 0;
    goto LABEL_54;
  }
  int v25 = *(_DWORD *)(a2 + 28);
  if ((v21 & 0x20) != 0) {
    unsigned int v26 = 1;
  }
  else {
    unsigned int v26 = *(_DWORD *)(a2 + 28);
  }
  if (!v26)
  {
    unsigned int v24 = 0;
    unsigned int v27 = *(_DWORD *)(a2 + 32);
    int v28 = v23 | 8;
    goto LABEL_53;
  }
  unsigned int v24 = 8 * (v24 / v26);
  unsigned int v27 = *(_DWORD *)(a2 + 32);
  int v28 = v23 | 8;
  BOOL v29 = v24 == v27;
LABEL_54:
  if (v29) {
    unsigned int v23 = v28;
  }
  BOOL v30 = (v27 & 7) == 0 && v24 == v27;
  unsigned int v31 = v23 & 0xFFFFFFEF;
  if (!v30) {
    unsigned int v31 = v23;
  }
  if (v31) {
    v31 &= ~4u;
  }
  BOOL v32 = (v31 & 8) == 0 || v27 > 8;
  int v33 = v31 & 2;
  if (v32) {
    int v33 = v31;
  }
  if (v25 == 1) {
    unsigned int v34 = v33 & 0xFFFFFFDF;
  }
  else {
    unsigned int v34 = v33;
  }
  if (v34) {
    unsigned int v21 = v34;
  }
  else {
    unsigned int v21 = 0x80000000;
  }
  return v20 == v21;
}

id TTSPublicSpeechLanguageCanonicalFormToGeneralLanguage(void *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v2 = a1;
  if (v2)
  {
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    uint64_t v3 = objc_msgSend_countByEnumeratingWithState_objects_count_(&unk_1EFB95480, v1, (uint64_t)&v18, (uint64_t)v22, 16);
    if (v3)
    {
      uint64_t v7 = v3;
      uint64_t v8 = *(void *)v19;
      while (2)
      {
        for (uint64_t i = 0; i != v7; ++i)
        {
          if (*(void *)v19 != v8) {
            objc_enumerationMutation(&unk_1EFB95480);
          }
          uint64_t v10 = *(void *)(*((void *)&v18 + 1) + 8 * i);
          if (objc_msgSend_rangeOfString_(v2, v4, v10, v5, v6) != 0x7FFFFFFFFFFFFFFFLL)
          {
            uint64_t v12 = objc_msgSend_rangeOfString_(v2, v4, v10, v5, v6);
            objc_msgSend_substringToIndex_(v2, v13, v12, v14, v15);
            id v11 = (id)objc_claimAutoreleasedReturnValue();
            goto LABEL_12;
          }
        }
        uint64_t v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(&unk_1EFB95480, v4, (uint64_t)&v18, (uint64_t)v22, 16);
        if (v7) {
          continue;
        }
        break;
      }
    }
    id v11 = v2;
LABEL_12:
    BOOL v16 = v11;
  }
  else
  {
    BOOL v16 = 0;
  }

  return v16;
}

void _TTSSortAVSpeechSynthesisVoices(void *a1)
{
  void v15[2] = *MEMORY[0x1E4F143B8];
  id v1 = (void *)MEMORY[0x1E4F29008];
  id v2 = a1;
  uint64_t v5 = objc_msgSend_sortDescriptorWithKey_ascending_(v1, v3, @"language", 1, v4);
  uint64_t v8 = objc_msgSend_sortDescriptorWithKey_ascending_(MEMORY[0x1E4F29008], v6, @"quality", 0, v7);
  v15[0] = v5;
  v15[1] = v8;
  id v11 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v9, (uint64_t)v15, 2, v10);
  objc_msgSend_sortUsingDescriptors_(v2, v12, (uint64_t)v11, v13, v14);
}

uint64_t sub_1A66FE194(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t isNoveltyVoice = objc_msgSend_isNoveltyVoice(a1, a2, a3, a4, a5);
  id v11 = objc_msgSend_synthesisProviderVoice(a1, v7, v8, v9, v10);
  BOOL v16 = v11;
  if (v11 && objc_msgSend_isPersonalVoice(v11, v12, v13, v14, v15)) {
    isNoveltyVoice |= 2uLL;
  }

  return isNoveltyVoice;
}

id sub_1A66FE1EC(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = objc_msgSend_identifier(a1, a2, a3, a4, a5);
  uint64_t v9 = objc_msgSend_audioFileSettingsForVoice_(TTSSpeechManager, v6, (uint64_t)v5, v7, v8);

  return v9;
}

id sub_1A66FE248(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (TTSUseCoreSynthesizerForAV())
  {
    uint64_t v21 = 0;
    int v22 = &v21;
    uint64_t v23 = 0x3032000000;
    unsigned int v24 = sub_1A66FE3D4;
    int v25 = sub_1A66FE3E4;
    id v26 = 0;
    dispatch_semaphore_t v7 = dispatch_semaphore_create(0);
    uint64_t v12 = objc_msgSend_shared(_TtC12TextToSpeech22CoreSynthesisVoiceShim, v8, v9, v10, v11);
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    v18[2] = sub_1A66FE3EC;
    v18[3] = &unk_1E5C69A60;
    long long v20 = &v21;
    uint64_t v13 = v7;
    long long v19 = v13;
    objc_msgSend_internalVoiceWithIdentifier_completionHandler_(v12, v14, (uint64_t)v4, (uint64_t)v18, v15);

    dispatch_semaphore_wait(v13, 0xFFFFFFFFFFFFFFFFLL);
    id v16 = (id)v22[5];

    _Block_object_dispose(&v21, 8);
  }
  else
  {
    objc_msgSend__voiceWithIdentifier_includingSiri_(a1, v5, (uint64_t)v4, 1, v6);
    id v16 = (id)objc_claimAutoreleasedReturnValue();
  }

  return v16;
}

void sub_1A66FE3BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1A66FE3D4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1A66FE3E4(uint64_t a1)
{
}

void sub_1A66FE3EC(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t sub_1A66FE44C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F4181798](TTSSpeechSynthesizer, sel_remapVoiceIdentifier_, a3, a4, a5);
}

id sub_1A66FE458(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  sub_1A66FE5B0();
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x3032000000;
  uint64_t v15 = sub_1A66FE3D4;
  id v16 = sub_1A66FE3E4;
  id v17 = 0;
  uint64_t v8 = objc_msgSend__remapOldIdentifierIfNecessary_(a1, v5, (uint64_t)v4, v6, v7);

  id v11 = v8;
  AX_PERFORM_WITH_LOCK();
  id v9 = (id)v13[5];

  _Block_object_dispose(&v12, 8);

  return v9;
}

void sub_1A66FE598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A66FE5B0()
{
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2020000000;
  char v14 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2020000000;
  char v10 = 0;
  uint64_t v6 = MEMORY[0x1E4F143A8];
  AX_PERFORM_WITH_LOCK();
  if (*((unsigned char *)v12 + 24)) {
    id v4 = (id)objc_msgSend_speechVoices(MEMORY[0x1E4F15478], v0, v1, v2, v3, v6, 3221225472, sub_1A6701F2C, &unk_1E5C69B60, &v11, &v7);
  }
  if (*((unsigned char *)v8 + 24)) {
    id v5 = (id)objc_msgSend__speechVoicesIncludingSiri(MEMORY[0x1E4F15478], v0, v1, v2, v3);
  }
  _Block_object_dispose(&v7, 8);
  _Block_object_dispose(&v11, 8);
}

void sub_1A66FE6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1A66FE6CC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(unsigned char *)(a1 + 48)) {
    uint64_t v6 = &qword_1E96C4008;
  }
  else {
    uint64_t v6 = &qword_1EB67A5B8;
  }
  objc_msgSend_objectForKeyedSubscript_((void *)*v6, a2, *(void *)(a1 + 32), a4, a5);
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), v7);
}

void sub_1A66FE74C(void *a1, uint64_t a2, void *a3)
{
}

id sub_1A66FE75C(void *a1)
{
  return objc_getAssociatedObject(a1, &unk_1E96C4764);
}

id sub_1A66FE768(void *a1, uint64_t a2, void *a3)
{
  uint64_t v262 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  v252.receiver = a1;
  v252.super_class = (Class)&off_1EFBA6410;
  id v240 = objc_msgSendSuper2(&v252, sel_init);
  if (!v240)
  {
    id v17 = 0;
    goto LABEL_82;
  }
  if (TTSUseCoreSynthesizerForAV())
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    uint64_t v259 = sub_1A66FE3D4;
    uint64_t v260 = sub_1A66FE3E4;
    id v261 = 0;
    dispatch_semaphore_t v5 = dispatch_semaphore_create(0);
    char v10 = objc_msgSend_shared(_TtC12TextToSpeech22CoreSynthesisVoiceShim, v6, v7, v8, v9);
    v249[0] = MEMORY[0x1E4F143A8];
    v249[1] = 3221225472;
    v249[2] = sub_1A66FF198;
    v249[3] = &unk_1E5C69A60;
    v251 = buf;
    uint64_t v11 = v5;
    v250 = v11;
    objc_msgSend_voiceWithLanguageCode_completionHandler_(v10, v12, (uint64_t)v4, (uint64_t)v249, v13);

    dispatch_semaphore_wait(v11, 0xFFFFFFFFFFFFFFFFLL);
    id v14 = *(id *)(*(void *)&buf[8] + 40);

    uint64_t v15 = v250;
    id v16 = v14;

    _Block_object_dispose(buf, 8);
    id v17 = v16;
    goto LABEL_81;
  }
  if (byte_1E96C404D)
  {
    id v18 = objc_alloc_init(MEMORY[0x1E4F15478]);
    objc_msgSend_setLanguage_(v18, v19, (uint64_t)v4, v20, v21);
    int v22 = AXLogSpeechSynthesis();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138543362;
      *(void *)&buf[4] = v18;
      _os_log_impl(&dword_1A66D3000, v22, OS_LOG_TYPE_INFO, "Building voices right now, using placeholder: %{public}@", buf, 0xCu);
    }
    v239 = 0;
    uint64_t v23 = v4;
    goto LABEL_77;
  }
  sub_1A66FE5B0();
  if (v4)
  {
    v239 = 0;
  }
  else
  {
    objc_msgSend_currentLanguageCode(MEMORY[0x1E4F15478], v24, v25, v26, v27);
    id v4 = (id)objc_claimAutoreleasedReturnValue();
    v239 = v4;
  }
  char v248 = 0;
  int v28 = objc_msgSend_remapLanguageCode_(TTSSpeechManager, v24, (uint64_t)v4, v26, v27, v4);
  BOOL v29 = AXCLanguageConvertToCanonicalForm();

  BOOL v30 = TTSPublicSpeechLanguageCanonicalFormToGeneralLanguage(v29);
  long long v243 = objc_msgSend_lowercaseString(v30, v31, v32, v33, v34);

  uint64_t v253 = 0;
  v254 = &v253;
  uint64_t v255 = 0x2050000000;
  int v39 = (void *)qword_1EB67A580;
  uint64_t v256 = qword_1EB67A580;
  if (!qword_1EB67A580)
  {
    *(void *)buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = sub_1A6701F68;
    uint64_t v259 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E5C696C8;
    uint64_t v260 = (void (*)(uint64_t))&v253;
    sub_1A6701F68((uint64_t)buf, v35, v36, v37, v38);
    int v39 = (void *)v254[3];
  }
  id v40 = v39;
  _Block_object_dispose(&v253, 8);
  uint64_t v45 = objc_msgSend_sharedInstance(v40, v41, v42, v43, v44);
  unint64_t v237 = (void *)v45;
  uint64_t v253 = 0;
  v254 = &v253;
  uint64_t v255 = 0x2020000000;
  uint64_t v50 = (uint64_t *)qword_1E96C4798;
  uint64_t v256 = qword_1E96C4798;
  if (!qword_1E96C4798)
  {
    *(void *)buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = sub_1A670212C;
    uint64_t v259 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E5C696C8;
    uint64_t v260 = (void (*)(uint64_t))&v253;
    int v51 = (void *)sub_1A6701FC0(v45, v46, v47, v48, v49);
    unint64_t v52 = dlsym(v51, "AXSpeechSourceKeySpeechFeatures");
    *(void *)(*((void *)v260 + 1) + 24) = v52;
    qword_1E96C4798 = *(void *)(*((void *)v260 + 1) + 24);
    uint64_t v50 = (uint64_t *)v254[3];
  }
  _Block_object_dispose(&v253, 8);
  if (!v50) {
    sub_1A688D944(v53, v54, v55, v56, v57);
  }
  v238 = objc_msgSend_speechVoiceIdentifierForLanguage_sourceKey_exists_(v237, v54, (uint64_t)v243, *v50, (uint64_t)&v248);
  uint64_t v23 = objc_msgSend_lowercaseString(v29, v58, v59, v60, v61);

  uint64_t v66 = 0;
  if (v238 && v248)
  {
    uint64_t v71 = objc_msgSend_voiceWithIdentifier_(MEMORY[0x1E4F15478], v62, (uint64_t)v238, v64, v65);
    if (v71)
    {
LABEL_20:
      uint64_t v72 = objc_msgSend_language(v71, v67, v68, v69, v70);
      uint64_t v77 = objc_msgSend_lowercaseString(v72, v73, v74, v75, v76);
      int isEqualToString = objc_msgSend_isEqualToString_(v77, v78, (uint64_t)v23, v79, v80);

      if (isEqualToString) {
        uint64_t v66 = 0;
      }
      else {
        uint64_t v66 = v71;
      }
      if (isEqualToString) {
        id v18 = v71;
      }
      else {
        id v18 = 0;
      }
      goto LABEL_33;
    }
    int32x4_t v82 = objc_msgSend_lowercaseString(v23, v67, v68, v69, v70);
    if (objc_msgSend_isEqualToString_(v82, v83, (uint64_t)v243, v84, v85))
    {
    }
    else
    {
      uint64_t v90 = objc_msgSend_lowercaseString(v236, v86, v87, v88, v89);
      int v94 = objc_msgSend_isEqualToString_(v90, v91, (uint64_t)v243, v92, v93);

      if (!v94) {
        goto LABEL_20;
      }
    }
    id v95 = objc_msgSend__voiceFromInternalVoiceListWithIdentifier_(MEMORY[0x1E4F15478], v67, (uint64_t)v238, v69, v70);
    unint64_t v100 = objc_msgSend_language(v95, v96, v97, v98, v99);
    BOOL v101 = v100 == 0;

    if (!v101)
    {
      uint64_t v106 = objc_msgSend_language(v95, v102, v103, v104, v105);
      uint64_t v111 = objc_msgSend_lowercaseString(v106, v107, v108, v109, v110);

      uint64_t v23 = (void *)v111;
    }

    uint64_t v66 = 0;
    id v18 = 0;
    goto LABEL_33;
  }
  id v18 = 0;
LABEL_33:
  objc_msgSend_speechVoices(MEMORY[0x1E4F15478], v62, v63, v64, v65);
  obuint64_t j = (id)objc_claimAutoreleasedReturnValue();
  if (v18)
  {
    uint64_t v113 = 0;
    id v242 = 0;
    goto LABEL_74;
  }
  long long v246 = 0u;
  long long v247 = 0u;
  long long v244 = 0u;
  long long v245 = 0u;
  uint64_t v118 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v112, (uint64_t)&v244, (uint64_t)v257, 16);
  if (!v118)
  {
    id v242 = 0;
    goto LABEL_63;
  }
  id v242 = 0;
  id v119 = 0;
  uint64_t v120 = *(void *)v245;
  do
  {
    for (uint64_t i = 0; i != v118; ++i)
    {
      if (*(void *)v245 != v120) {
        objc_enumerationMutation(obj);
      }
      uint64_t v122 = *(void **)(*((void *)&v244 + 1) + 8 * i);
      if (!v23) {
        goto LABEL_53;
      }
      long long v123 = objc_msgSend_language(*(void **)(*((void *)&v244 + 1) + 8 * i), v114, v115, v116, v117);
      uint64_t v128 = objc_msgSend_lowercaseString(v123, v124, v125, v126, v127);
      int v132 = objc_msgSend_isEqualToString_(v128, v129, (uint64_t)v23, v130, v131);

      if (v119) {
        int v133 = 0;
      }
      else {
        int v133 = v132;
      }
      if (v133 != 1) {
        goto LABEL_47;
      }
      if (objc_msgSend_isDefault(v122, v114, v115, v116, v117))
      {
        id v119 = v122;
LABEL_47:
        if (v66) {
          goto LABEL_48;
        }
        goto LABEL_51;
      }
      id v119 = 0;
      if (v66)
      {
LABEL_48:
        uint64_t v134 = objc_msgSend_language(v66, v114, v115, v116, v117);
        uint64_t v139 = objc_msgSend_lowercaseString(v134, v135, v136, v137, v138);
        char hasPrefix = objc_msgSend_hasPrefix_(v139, v140, (uint64_t)v23, v141, v142);

        if (hasPrefix) {
          goto LABEL_53;
        }
      }
LABEL_51:
      uint64_t v144 = objc_msgSend_language(v122, v114, v115, v116, v117);
      uint64_t v149 = objc_msgSend_lowercaseString(v144, v145, v146, v147, v148);
      int v153 = objc_msgSend_hasPrefix_(v149, v150, (uint64_t)v23, v151, v152);

      if (v153)
      {
        id v154 = v122;

        uint64_t v66 = v154;
        continue;
      }
LABEL_53:
      if (v243 && !v242)
      {
        uint64_t v155 = objc_msgSend_language(v122, v114, v115, v116, v117);
        unint64_t v160 = objc_msgSend_lowercaseString(v155, v156, v157, v158, v159);
        int v164 = objc_msgSend_hasPrefix_(v160, v161, (uint64_t)v243, v162, v163);

        if (v164) {
          id v242 = v122;
        }
        else {
          id v242 = 0;
        }
      }
    }
    uint64_t v118 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v114, (uint64_t)&v244, (uint64_t)v257, 16);
  }
  while (v118);
  if (v119)
  {
    id v165 = v119;
    uint64_t v113 = v165;
    goto LABEL_65;
  }
LABEL_63:
  id v165 = v66;
  if (v165)
  {
    uint64_t v66 = v165;
    uint64_t v113 = 0;
LABEL_65:
    id v18 = v165;
  }
  else
  {
    v166 = AXLogSpeechSynthesis();
    if (os_log_type_enabled(v166, OS_LOG_TYPE_INFO))
    {
      long long v171 = objc_msgSend_identifier(v242, v167, v168, v169, v170);
      *(_DWORD *)buf = 138543362;
      *(void *)&buf[4] = v171;
      _os_log_impl(&dword_1A66D3000, v166, OS_LOG_TYPE_INFO, "Search for possible voices secondary backup: %{public}@", buf, 0xCu);
    }
    uint64_t v176 = objc_msgSend_language(v242, v172, v173, v174, v175);
    int v180 = objc_msgSend_hasPrefix_(v176, v177, @"en", v178, v179);

    if (!v180
      || (uint64_t v185 = objc_msgSend_indexOfObjectPassingTest_(obj, v181, (uint64_t)&unk_1EFB80320, v182, v183),
          v185 == 0x7FFFFFFFFFFFFFFFLL)
      && (uint64_t v185 = objc_msgSend_indexOfObjectPassingTest_(obj, v184, (uint64_t)&unk_1EFB7E2B8, v186, v187),
          v185 == 0x7FFFFFFFFFFFFFFFLL))
    {
      uint64_t v188 = v242;
    }
    else
    {
      uint64_t v188 = objc_msgSend_objectAtIndex_(obj, v184, v185, v186, v187);
    }
    id v18 = v188;
    uint64_t v66 = 0;
    uint64_t v113 = 0;
    id v242 = v18;
  }
LABEL_74:
  unint64_t v189 = AXLogSpeechSynthesis();
  if (os_log_type_enabled(v189, OS_LOG_TYPE_INFO))
  {
    uint64_t v194 = objc_msgSend_identifier(v113, v190, v191, v192, v193);
    *(_DWORD *)buf = 138543618;
    *(void *)&buf[4] = v23;
    *(_WORD *)&buf[12] = 2114;
    *(void *)&buf[14] = v194;
    _os_log_impl(&dword_1A66D3000, v189, OS_LOG_TYPE_INFO, "Using voice from language %{public}@ default: %{public}@", buf, 0x16u);
  }
  int v22 = v236;
LABEL_77:

  if (v18)
  {
    uint64_t v199 = objc_msgSend_quality(v18, v195, v196, v197, v198);
    objc_msgSend_setQuality_(v240, v200, v199, v201, v202);
    long long v207 = objc_msgSend_nonLocalizedNameWithoutQuality(v18, v203, v204, v205, v206);
    objc_msgSend_setNonLocalizedNameWithoutQuality_(v240, v208, (uint64_t)v207, v209, v210);

    v215 = objc_msgSend_identifier(v18, v211, v212, v213, v214);
    objc_msgSend_setIdentifier_(v240, v216, (uint64_t)v215, v217, v218);

    uint64_t v223 = objc_msgSend_language(v18, v219, v220, v221, v222);
    objc_msgSend_setLanguage_(v240, v224, (uint64_t)v223, v225, v226);

    long long v231 = objc_msgSend_synthesisProviderVoice(v18, v227, v228, v229, v230);
    objc_msgSend_setSynthesisProviderVoice_(v240, v232, (uint64_t)v231, v233, v234);

    id v17 = v240;
  }
  else
  {
    id v17 = 0;
  }

  id v4 = v23;
  id v16 = v240;
LABEL_81:

LABEL_82:
  return v17;
}

void sub_1A66FF168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

void sub_1A66FF198(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t sub_1A66FF1F8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  dispatch_semaphore_t v5 = objc_msgSend_language(a2, (const char *)a2, a3, a4, a5);
  uint64_t isEqualToString = objc_msgSend_isEqualToString_(v5, v6, @"en-US", v7, v8);

  return isEqualToString;
}

uint64_t sub_1A66FF23C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  dispatch_semaphore_t v5 = objc_msgSend_language(a2, (const char *)a2, a3, a4, a5);
  uint64_t hasPrefix = objc_msgSend_hasPrefix_(v5, v6, @"en", v7, v8);

  return hasPrefix;
}

__CFString *sub_1A66FF280()
{
  return &stru_1EFB83720;
}

id sub_1A66FF28C(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = objc_msgSend_nameWithoutQuality(a1, a2, a3, a4, a5);
  if (objc_msgSend_quality(a1, v7, v8, v9, v10) == 2)
  {
    uint64_t v15 = objc_msgSend_nonLocalizedNameWithoutQuality(a1, v11, v12, v13, v14);
    char v19 = objc_msgSend_containsString_(v15, v16, @"Enhanced", v17, v18);

    if (v19) {
      goto LABEL_8;
    }
    unsigned int v24 = NSString;
    uint64_t v25 = objc_msgSend__enhancedLocalizedNameFormat(a1, v20, v21, v22, v23);
    goto LABEL_7;
  }
  if (objc_msgSend_quality(a1, v11, v12, v13, v14) == 3)
  {
    uint64_t v33 = objc_msgSend_nonLocalizedNameWithoutQuality(a1, v29, v30, v31, v32);
    char v37 = objc_msgSend_containsString_(v33, v34, @"Premium", v35, v36);

    if ((v37 & 1) == 0)
    {
      unsigned int v24 = NSString;
      uint64_t v25 = objc_msgSend__premiumLocalizedNameFormat(a1, v38, v39, v40, v41);
LABEL_7:
      uint64_t v42 = (void *)v25;
      uint64_t v43 = objc_msgSend_stringWithFormat_(v24, v26, v25, v27, v28, v6);

      uint64_t v6 = (void *)v43;
    }
  }
LABEL_8:

  return v6;
}

id sub_1A66FF3A0()
{
  if (qword_1E96C4770 != -1) {
    dispatch_once(&qword_1E96C4770, &unk_1EFB809A8);
  }
  id v0 = (void *)qword_1E96C4768;

  return v0;
}

void sub_1A66FF3F4()
{
  id v0 = (void *)MEMORY[0x1E4F28B50];
  uint64_t v1 = AXSystemRootDirectory();
  dispatch_semaphore_t v5 = objc_msgSend_stringByAppendingPathComponent_(v1, v2, @"System/Library/PrivateFrameworks/AccessibilityUtilities.framework", v3, v4);
  objc_msgSend_bundleWithPath_(v0, v6, (uint64_t)v5, v7, v8);
  id v12 = (id)objc_claimAutoreleasedReturnValue();

  uint64_t v10 = objc_msgSend_localizedStringForKey_value_table_(v12, v9, @"ENHANCED_VOICE_NAME", @"%@ (Enhanced)", @"GeneralAccessibility");
  uint64_t v11 = (void *)qword_1E96C4768;
  qword_1E96C4768 = v10;
}

id sub_1A66FF4AC()
{
  if (qword_1E96C4780 != -1) {
    dispatch_once(&qword_1E96C4780, &unk_1EFB7E358);
  }
  id v0 = (void *)qword_1E96C4778;

  return v0;
}

void sub_1A66FF500()
{
  id v0 = (void *)MEMORY[0x1E4F28B50];
  uint64_t v1 = AXSystemRootDirectory();
  dispatch_semaphore_t v5 = objc_msgSend_stringByAppendingPathComponent_(v1, v2, @"System/Library/PrivateFrameworks/AccessibilityUtilities.framework", v3, v4);
  objc_msgSend_bundleWithPath_(v0, v6, (uint64_t)v5, v7, v8);
  id v12 = (id)objc_claimAutoreleasedReturnValue();

  uint64_t v10 = objc_msgSend_localizedStringForKey_value_table_(v12, v9, @"PREMIUM_VOICE_NAME", @"%@ (Premium)", @"GeneralAccessibility");
  uint64_t v11 = (void *)qword_1E96C4778;
  qword_1E96C4778 = v10;
}

id sub_1A66FF5B8(void *a1)
{
  if (TTSUseCoreSynthesizerForAV())
  {
    uint64_t v19 = 0;
    uint64_t v20 = &v19;
    uint64_t v21 = 0x3032000000;
    uint64_t v22 = sub_1A66FE3D4;
    uint64_t v23 = sub_1A66FE3E4;
    id v24 = 0;
    dispatch_semaphore_t v5 = dispatch_semaphore_create(0);
    uint64_t v10 = objc_msgSend_shared(_TtC12TextToSpeech22CoreSynthesisVoiceShim, v6, v7, v8, v9);
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    v16[2] = sub_1A66FF734;
    v16[3] = &unk_1E5C69AD0;
    uint64_t v18 = &v19;
    uint64_t v11 = v5;
    uint64_t v17 = v11;
    objc_msgSend_internalVoicesIncludingSiri_completionHandler_(v10, v12, 1, (uint64_t)v16, v13);

    dispatch_semaphore_wait(v11, 0xFFFFFFFFFFFFFFFFLL);
    id v14 = (id)v20[5];

    _Block_object_dispose(&v19, 8);
  }
  else
  {
    objc_msgSend__speechVoicesIncludingSiri_(a1, v2, 1, v3, v4);
    id v14 = (id)objc_claimAutoreleasedReturnValue();
  }

  return v14;
}

void sub_1A66FF71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A66FF734(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

id sub_1A66FF794(void *a1)
{
  if (TTSUseCoreSynthesizerForAV())
  {
    uint64_t v36 = 0;
    char v37 = &v36;
    uint64_t v38 = 0x3032000000;
    uint64_t v39 = sub_1A66FE3D4;
    uint64_t v40 = sub_1A66FE3E4;
    id v41 = 0;
    dispatch_semaphore_t v6 = dispatch_semaphore_create(0);
    uint64_t v11 = objc_msgSend_shared(_TtC12TextToSpeech22CoreSynthesisVoiceShim, v7, v8, v9, v10);
    v33[0] = MEMORY[0x1E4F143A8];
    v33[1] = 3221225472;
    v33[2] = sub_1A66FF954;
    v33[3] = &unk_1E5C69AD0;
    uint64_t v35 = &v36;
    id v12 = v6;
    uint64_t v34 = v12;
    objc_msgSend_internalVoicesIncludingSiri_completionHandler_(v11, v13, 1, (uint64_t)v33, v14);

    dispatch_semaphore_wait(v12, 0xFFFFFFFFFFFFFFFFLL);
    id v15 = (id)v37[5];

    _Block_object_dispose(&v36, 8);
  }
  else
  {
    objc_msgSend_array(MEMORY[0x1E4F1CA48], v2, v3, v4, v5);
    id v15 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v20 = objc_msgSend__speechVoicesIncludingSiri(a1, v16, v17, v18, v19);
    objc_msgSend_addObjectsFromArray_(v15, v21, (uint64_t)v20, v22, v23);

    uint64_t v28 = objc_msgSend_availableSuperCompactVoices(TTSSpeechManager, v24, v25, v26, v27);
    objc_msgSend_addObjectsFromArray_(v15, v29, (uint64_t)v28, v30, v31);
  }

  return v15;
}

void sub_1A66FF93C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A66FF954(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

id sub_1A66FF9B4(void *a1)
{
  if (TTSUseCoreSynthesizerForAV())
  {
    uint64_t v35 = 0;
    uint64_t v36 = &v35;
    uint64_t v37 = 0x3032000000;
    uint64_t v38 = sub_1A66FE3D4;
    uint64_t v39 = sub_1A66FE3E4;
    id v40 = 0;
    dispatch_semaphore_t v6 = dispatch_semaphore_create(0);
    uint64_t v11 = objc_msgSend_shared(_TtC12TextToSpeech22CoreSynthesisVoiceShim, v7, v8, v9, v10);
    v32[0] = MEMORY[0x1E4F143A8];
    v32[1] = 3221225472;
    v32[2] = sub_1A66FFB78;
    v32[3] = &unk_1E5C69AD0;
    uint64_t v34 = &v35;
    id v12 = v6;
    uint64_t v33 = v12;
    objc_msgSend_internalVoicesIncludingSiri_completionHandler_(v11, v13, 0, (uint64_t)v32, v14);

    dispatch_semaphore_wait(v12, 0xFFFFFFFFFFFFFFFFLL);
    id v15 = (id)v36[5];

    _Block_object_dispose(&v35, 8);
  }
  else
  {
    objc_msgSend_array(MEMORY[0x1E4F1CA48], v2, v3, v4, v5);
    id v15 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v19 = objc_msgSend__speechVoicesIncludingSiri_(a1, v16, 0, v17, v18);
    objc_msgSend_addObjectsFromArray_(v15, v20, (uint64_t)v19, v21, v22);

    uint64_t v27 = objc_msgSend_availableSuperCompactVoices(TTSSpeechManager, v23, v24, v25, v26);
    objc_msgSend_addObjectsFromArray_(v15, v28, (uint64_t)v27, v29, v30);
  }

  return v15;
}

void sub_1A66FFB60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A66FFB78(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

id sub_1A66FFBD8(uint64_t a1, uint64_t a2, int a3)
{
  if (TTSUseCoreSynthesizerForAV())
  {
    uint64_t v35 = 0;
    uint64_t v36 = &v35;
    uint64_t v37 = 0x3032000000;
    uint64_t v38 = sub_1A66FE3D4;
    uint64_t v39 = sub_1A66FE3E4;
    id v40 = 0;
    dispatch_semaphore_t v8 = dispatch_semaphore_create(0);
    uint64_t v13 = objc_msgSend_shared(_TtC12TextToSpeech22CoreSynthesisVoiceShim, v9, v10, v11, v12);
    v32[0] = MEMORY[0x1E4F143A8];
    v32[1] = 3221225472;
    v32[2] = sub_1A66FFECC;
    v32[3] = &unk_1E5C69AD0;
    uint64_t v34 = &v35;
    uint64_t v14 = v8;
    uint64_t v33 = v14;
    objc_msgSend_internalVoicesIncludingSiri_completionHandler_(v13, v15, 1, (uint64_t)v32, v16);

    dispatch_semaphore_wait(v14, 0xFFFFFFFFFFFFFFFFLL);
    id v17 = (id)v36[5];

    goto LABEL_12;
  }
  if (qword_1EB67A5A8 == -1)
  {
    if (a3)
    {
LABEL_5:
      uint64_t v18 = objc_msgSend_mainBundle(MEMORY[0x1E4F28B50], v4, v5, v6, v7);
      uint64_t v23 = objc_msgSend_bundleIdentifier(v18, v19, v20, v21, v22);
      if (objc_msgSend_isEqualToString_(v23, v24, @"com.apple.shortcuts", v25, v26)) {
        char v27 = TTSSupportsNeuralVoices();
      }
      else {
        char v27 = 0;
      }

      goto LABEL_11;
    }
  }
  else
  {
    dispatch_once(&qword_1EB67A5A8, &unk_1EFB809C8);
    if (a3) {
      goto LABEL_5;
    }
  }
  char v27 = 0;
LABEL_11:
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1A66FFF68;
  block[3] = &unk_1E5C69B38;
  char v30 = a3;
  char v31 = v27;
  dispatch_sync((dispatch_queue_t)qword_1EB67A5C8, block);
  uint64_t v35 = 0;
  uint64_t v36 = &v35;
  uint64_t v37 = 0x3032000000;
  uint64_t v38 = sub_1A66FE3D4;
  uint64_t v39 = sub_1A66FE3E4;
  id v40 = 0;
  AX_PERFORM_WITH_LOCK();
  id v17 = (id)v36[5];
LABEL_12:
  _Block_object_dispose(&v35, 8);

  return v17;
}

void sub_1A66FFEB0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1A66FFECC(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1A66FFF2C()
{
  dispatch_queue_t v0 = dispatch_queue_create("create-voices-avspeech", 0);
  uint64_t v1 = (void *)qword_1EB67A5C8;
  qword_1EB67A5C8 = (uint64_t)v0;

  dword_1E96C4010 = 0;
}

void sub_1A66FFF68(uint64_t a1)
{
  uint64_t v132 = *MEMORY[0x1E4F143B8];
  byte_1E96C404D = 1;
  uint64_t v125 = 0;
  uint64_t v126 = &v125;
  uint64_t v127 = 0x2020000000;
  char v128 = 0;
  uint64_t v119 = MEMORY[0x1E4F143A8];
  uint64_t v120 = 3221225472;
  uint64_t v121 = sub_1A6700524;
  uint64_t v122 = &unk_1E5C69678;
  char v124 = *(unsigned char *)(a1 + 32);
  long long v123 = &v125;
  AX_PERFORM_WITH_LOCK();
  if (*((unsigned char *)v126 + 24))
  {
    id v113 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    id v112 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    uint64_t v6 = objc_msgSend_availableVoices(TTSSpeechManager, v2, v3, v4, v5);
    uint64_t v11 = objc_msgSend_mutableCopy(v6, v7, v8, v9, v10);

    if (*(unsigned char *)(a1 + 32))
    {
      uint64_t v16 = objc_msgSend_sharedInstance(TTSAXResourceManager, v12, v13, v14, v15);
      uint64_t v19 = objc_msgSend_resourcesWithType_subType_(v16, v17, 3, 1, v18);
      uint64_t v23 = objc_msgSend_ax_flatMappedArrayUsingBlock_(v19, v20, (uint64_t)&unk_1EFB7EA48, v21, v22);

      char v27 = objc_msgSend_avSpeechVoicesForTTSAXResources_(TTSSpeechManager, v24, (uint64_t)v23, v25, v26);
      objc_msgSend_addObjectsFromArray_(v11, v28, (uint64_t)v27, v29, v30);
    }
    long long v117 = 0u;
    long long v118 = 0u;
    long long v115 = 0u;
    long long v116 = 0u;
    obuint64_t j = v11;
    uint64_t v36 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v31, (uint64_t)&v115, (uint64_t)v131, 16);
    if (v36)
    {
      uint64_t v38 = *(void *)v116;
      uint64_t v39 = *MEMORY[0x1E4F15288];
      *(void *)&long long v37 = 138412290;
      long long v111 = v37;
      do
      {
        for (uint64_t i = 0; i != v36; ++i)
        {
          if (*(void *)v116 != v38) {
            objc_enumerationMutation(obj);
          }
          id v41 = *(void **)(*((void *)&v115 + 1) + 8 * i);
          uint64_t v42 = objc_msgSend_identifier(v41, v32, v33, v34, v35, v111);
          int isNeuralSiriVoiceIdentifier = objc_msgSend_isNeuralSiriVoiceIdentifier_(TTSAlternativeVoices, v43, (uint64_t)v42, v44, v45);

          int v51 = objc_msgSend_identifier(v41, v47, v48, v49, v50);
          int isSiriVoiceIdentifier = objc_msgSend_isSiriVoiceIdentifier_(TTSAlternativeVoices, v52, (uint64_t)v51, v53, v54);

          if (*(unsigned char *)(a1 + 32)) {
            char v56 = 0;
          }
          else {
            char v56 = isSiriVoiceIdentifier;
          }
          if ((v56 & 1) == 0)
          {
            if (!isSiriVoiceIdentifier
              || (!*(unsigned char *)(a1 + 33) ? (int v57 = 1) : (int v57 = isNeuralSiriVoiceIdentifier), v57 == 1))
            {
              float32x4_t v58 = objc_msgSend_identifier(v41, v32, v33, v34, v35);
              char isEqualToString = objc_msgSend_isEqualToString_(v58, v59, v39, v60, v61);

              if ((isEqualToString & 1) == 0)
              {
                uint64_t v63 = objc_msgSend_identifier(v41, v32, v33, v34, v35);
                int isPersonalVoiceIdentifier = objc_msgSend_isPersonalVoiceIdentifier_(TTSAlternativeVoices, v64, (uint64_t)v63, v65, v66);

                if (!isPersonalVoiceIdentifier
                  || objc_msgSend__supportsSpeakingWithPersonalVoices(MEMORY[0x1E4F15488], v32, v33, v34, v35)&& (objc_msgSend_personalVoiceAuthorizationStatus(MEMORY[0x1E4F15488], v32, v33, v34, v35) == 3|| TTSIsPersonalVoicePrivilagedProcess()))
                {
                  uint64_t v68 = objc_msgSend_identifier(v41, v32, v33, v34, v35);
                  BOOL v69 = v68 == 0;

                  if (v69)
                  {
                    uint64_t v77 = AXLogSpeechSynthesis();
                    if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = v111;
                      uint64_t v130 = v41;
                      _os_log_error_impl(&dword_1A66D3000, v77, OS_LOG_TYPE_ERROR, "No identifier for voice, %@", buf, 0xCu);
                    }
                  }
                  else
                  {
                    objc_msgSend_addObject_(v113, v70, (uint64_t)v41, v71, v72);
                    uint64_t v77 = objc_msgSend_identifier(v41, v73, v74, v75, v76);
                    objc_msgSend_setObject_forKeyedSubscript_(v112, v78, (uint64_t)v41, (uint64_t)v77, v79);
                  }
                }
              }
            }
          }
        }
        uint64_t v36 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v32, (uint64_t)&v115, (uint64_t)v131, 16);
      }
      while (v36);
    }

    _TTSSortAVSpeechSynthesisVoices(v113);
    uint64_t v84 = objc_msgSend_sharedInstance(TTSAXResourceManager, v80, v81, v82, v83);
    uint64_t v88 = objc_msgSend_resourceWithVoiceId_(v84, v85, @"com.apple.speech.synthesis.voice.Alex", v86, v87);

    if (objc_msgSend_isInstalled(v88, v89, v90, v91, v92))
    {
      uint64_t v97 = objc_msgSend_speechVoice(v88, v93, v94, v95, v96);
      uint64_t v98 = AXAVSpeechSynthesisVoiceFromTTSAXResource(v97);

      if (v98)
      {
        objc_msgSend_addObject_(v113, v99, (uint64_t)v98, v100, v101);
        uint64_t v106 = objc_msgSend_identifier(v98, v102, v103, v104, v105);
        objc_msgSend_setObject_forKeyedSubscript_(v112, v107, (uint64_t)v98, (uint64_t)v106, v108);
      }
    }
    id v109 = v113;
    id v110 = v112;
    AX_PERFORM_WITH_LOCK();
    if (qword_1EB67A5B0 != -1) {
      dispatch_once(&qword_1EB67A5B0, &unk_1EFB809E8);
    }
  }
  byte_1E96C404D = 0;
  _Block_object_dispose(&v125, 8);
}

void sub_1A67004D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

uint64_t sub_1A6700524(uint64_t result)
{
  if (!qword_1EB67A5C0 && !*(unsigned char *)(result + 40)
    || !qword_1E96C3FF8 && *(unsigned char *)(result + 40)
    || (qword_1EB67A5B8 ? (BOOL v1 = qword_1E96C4008 == 0) : (BOOL v1 = 1), v1))
  {
    *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  }
  return result;
}

id sub_1A6700580(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (objc_msgSend_isInstalled(v2, v3, v4, v5, v6))
  {
    uint64_t v11 = objc_msgSend_speechVoice(v2, v7, v8, v9, v10);
  }
  else
  {
    uint64_t v11 = 0;
  }

  return v11;
}

uint64_t sub_1A67005DC(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 48);
  id v3 = *(id *)(a1 + 32);
  uint64_t v4 = &qword_1E96C3FF8;
  if (v2)
  {
    uint64_t v5 = &qword_1E96C4008;
  }
  else
  {
    uint64_t v4 = &qword_1EB67A5C0;
    uint64_t v5 = &qword_1EB67A5B8;
  }
  uint64_t v6 = (void *)*v4;
  uint64_t *v4 = (uint64_t)v3;

  uint64_t *v5 = (uint64_t)*(id *)(a1 + 40);

  return MEMORY[0x1F41817F8]();
}

void sub_1A6700660()
{
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFStringRef v1 = (const __CFString *)*MEMORY[0x1E4FB93D8];

  CFNotificationCenterAddObserver(DarwinNotifyCenter, 0, (CFNotificationCallback)sub_1A67006B0, v1, 0, CFNotificationSuspensionBehaviorDrop);
}

uint64_t sub_1A67006B0()
{
  return AX_PERFORM_WITH_LOCK();
}

uint64_t sub_1A67006C4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(unsigned char *)(a1 + 40)) {
    uint64_t v6 = objc_msgSend_copy((void *)qword_1E96C3FF8, a2, a3, a4, a5);
  }
  else {
    uint64_t v6 = objc_msgSend_copy((void *)qword_1EB67A5C0, a2, a3, a4, a5);
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = v6;

  return MEMORY[0x1F41817F8]();
}

id sub_1A6700724()
{
  return (id)qword_1EB67A5C0;
}

void sub_1A6700730(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  uint64_t v8 = objc_msgSend_mutableCopy(v3, v4, v5, v6, v7);
  _TTSSortAVSpeechSynthesisVoices(v8);
  uint64_t v31 = MEMORY[0x1E4F143A8];
  uint64_t v32 = 3221225472;
  uint64_t v33 = sub_1A670094C;
  uint64_t v34 = &unk_1E5C69588;
  id v9 = v8;
  id v35 = v9;
  AX_PERFORM_WITH_LOCK();
  if (v3) {
    id v10 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  else {
    id v10 = 0;
  }
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v11 = v3;
  uint64_t v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v12, (uint64_t)&v27, (uint64_t)v36, 16);
  if (v13)
  {
    uint64_t v18 = v13;
    uint64_t v19 = *(void *)v28;
    do
    {
      for (uint64_t i = 0; i != v18; ++i)
      {
        if (*(void *)v28 != v19) {
          objc_enumerationMutation(v11);
        }
        uint64_t v21 = *(void **)(*((void *)&v27 + 1) + 8 * i);
        uint64_t v22 = objc_msgSend_identifier(v21, v14, v15, v16, v17);
        objc_msgSend_setObject_forKeyedSubscript_(v10, v23, (uint64_t)v21, (uint64_t)v22, v24);
      }
      uint64_t v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v14, (uint64_t)&v27, (uint64_t)v36, 16);
    }
    while (v18);
  }

  uint64_t v26 = v10;
  id v25 = v10;
  AX_PERFORM_WITH_LOCK();
}

void sub_1A670094C(uint64_t a1)
{
}

void sub_1A670095C(uint64_t a1)
{
}

void sub_1A670096C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  uint64_t v8 = objc_msgSend_mutableCopy(v3, v4, v5, v6, v7);
  _TTSSortAVSpeechSynthesisVoices(v8);
  uint64_t v31 = MEMORY[0x1E4F143A8];
  uint64_t v32 = 3221225472;
  uint64_t v33 = sub_1A6700B88;
  uint64_t v34 = &unk_1E5C69588;
  id v9 = v8;
  id v35 = v9;
  AX_PERFORM_WITH_LOCK();
  if (v3) {
    id v10 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  else {
    id v10 = 0;
  }
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v11 = v3;
  uint64_t v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v12, (uint64_t)&v27, (uint64_t)v36, 16);
  if (v13)
  {
    uint64_t v18 = v13;
    uint64_t v19 = *(void *)v28;
    do
    {
      for (uint64_t i = 0; i != v18; ++i)
      {
        if (*(void *)v28 != v19) {
          objc_enumerationMutation(v11);
        }
        uint64_t v21 = *(void **)(*((void *)&v27 + 1) + 8 * i);
        uint64_t v22 = objc_msgSend_identifier(v21, v14, v15, v16, v17);
        objc_msgSend_setObject_forKeyedSubscript_(v10, v23, (uint64_t)v21, (uint64_t)v22, v24);
      }
      uint64_t v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v14, (uint64_t)&v27, (uint64_t)v36, 16);
    }
    while (v18);
  }

  uint64_t v26 = v10;
  id v25 = v10;
  AX_PERFORM_WITH_LOCK();
}

void sub_1A6700B88(uint64_t a1)
{
}

void sub_1A6700B98(uint64_t a1)
{
}

BOOL sub_1A6700BA8(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = objc_msgSend_synthesisProviderVoice(a1, a2, a3, a4, a5);
  BOOL v6 = v5 != 0;

  return v6;
}

id sub_1A6700BE0(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v60 = 0;
  uint64_t v61 = &v60;
  uint64_t v62 = 0x2020000000;
  BOOL v6 = (unsigned int (*)(void))off_1E96C47A0;
  uint64_t v63 = off_1E96C47A0;
  if (!off_1E96C47A0)
  {
    uint64_t v7 = (void *)sub_1A6701FC0((uint64_t)a1, a2, a3, a4, a5);
    v61[3] = (uint64_t)dlsym(v7, "AXIsInternalInstall");
    off_1E96C47A0 = (_UNKNOWN *)v61[3];
    BOOL v6 = (unsigned int (*)(void))v61[3];
  }
  _Block_object_dispose(&v60, 8);
  if (!v6) {
    sub_1A688D9BC(v8, v9, v10, v11, v12);
  }
  if (v6())
  {
    uint64_t v17 = NSString;
    unsigned int isInstalled = objc_msgSend_isInstalled(a1, v13, v14, v15, v16);
    uint64_t v23 = objc_msgSend_assetSize(a1, v19, v20, v21, v22);
    unsigned int canBeDownloaded = objc_msgSend_canBeDownloaded(a1, v24, v25, v26, v27);
    objc_msgSend_stringWithFormat_(v17, v29, @" (Installed: %d, Size: %d, Can be downloaded: %d)", v30, v31, isInstalled, v23, canBeDownloaded);
    uint64_t v32 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v32 = &stru_1EFB83720;
  }
  uint64_t v33 = NSString;
  uint64_t v34 = objc_opt_class();
  uint64_t v39 = objc_msgSend_language(a1, v35, v36, v37, v38);
  uint64_t v44 = objc_msgSend_name(a1, v40, v41, v42, v43);
  if (objc_msgSend_quality(a1, v45, v46, v47, v48) == 1)
  {
    uint64_t v53 = @"Default";
  }
  else if (objc_msgSend_quality(a1, v49, v50, v51, v52) == 2)
  {
    uint64_t v53 = @"Enhanced";
  }
  else
  {
    uint64_t v53 = @"Premium";
  }
  uint64_t v54 = objc_msgSend_identifier(a1, v49, v50, v51, v52);
  float32x4_t v58 = objc_msgSend_stringWithFormat_(v33, v55, @"[%@ %p] Language: %@, Name: %@, Quality: %@ [%@]%@", v56, v57, v34, a1, v39, v44, v53, v54, v32);

  return v58;
}

void sub_1A6700E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A6700E1C(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_msgSend_numberWithInteger_(NSNumber, a2, a3, a4, a5);
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_setAssociatedObject(a1, &unk_1E96C4788, v6, (void *)1);
}

uint64_t sub_1A6700E84(void *a1)
{
  CFStringRef v1 = objc_getAssociatedObject(a1, &unk_1E96C4788);
  uint64_t v6 = objc_msgSend_integerValue(v1, v2, v3, v4, v5);

  return v6;
}

void sub_1A6700EC4(void *a1, uint64_t a2, void *a3)
{
}

id sub_1A6700ED4(void *a1)
{
  return objc_getAssociatedObject(a1, &unk_1E96C4789);
}

uint64_t sub_1A6700EE0(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = objc_msgSend_identifier(a1, a2, a3, a4, a5);
  uint64_t isSystemVoice = objc_msgSend_isSystemVoice_(TTSSpeechSynthesizer, v6, (uint64_t)v5, v7, v8);

  return isSystemVoice;
}

void sub_1A6700F28(void *a1, uint64_t a2, void *a3)
{
}

id sub_1A6700F38(void *a1)
{
  return objc_getAssociatedObject(a1, &unk_1E96C478A);
}

id sub_1A6700F44(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = objc_msgSend_identifier(a1, a2, a3, a4, a5);
  int isSiriVoiceIdentifier = objc_msgSend_isSiriVoiceIdentifier_(TTSAlternativeVoices, v7, (uint64_t)v6, v8, v9);

  if (isSiriVoiceIdentifier)
  {
    uint64_t v15 = objc_msgSend_identifier(a1, v11, v12, v13, v14);
    uint64_t v19 = objc_msgSend_nameForVoiceIdentifier_(TTSAlternativeVoices, v16, (uint64_t)v15, v17, v18);
  }
  else
  {
    uint64_t v24 = objc_msgSend_nonLocalizedNameWithoutQuality(a1, v11, v12, v13, v14);
    if (!v24)
    {
      uint64_t v24 = objc_msgSend_backupName(a1, v20, v21, v22, v23);
      if (!v24)
      {
        AXLogSpeechAssetDownload();
        uint64_t v25 = (char *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled((os_log_t)v25, OS_LOG_TYPE_ERROR)) {
          sub_1A688DA34(a1, v25, v26, v27, v28);
        }

        uint64_t v24 = 0;
      }
    }
    uint64_t v19 = objc_msgSend_localizedName_forLanguage_(TTSSpeechVoice, v20, (uint64_t)v24, 0, v23);
    if (!v19)
    {
      uint64_t v33 = objc_msgSend_identifier(a1, v29, v30, v31, v32);
      uint64_t v37 = objc_msgSend_voiceForIdentifier_(TTSSpeechSynthesizer, v34, (uint64_t)v33, v35, v36);
      uint64_t v19 = objc_msgSend_name(v37, v38, v39, v40, v41);
    }
  }

  return v19;
}

void sub_1A6701098(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_msgSend_numberWithInteger_(NSNumber, a2, a3, a4, a5);
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_setAssociatedObject(a1, &unk_1E96C478B, v6, (void *)1);
}

uint64_t sub_1A6701100(void *a1)
{
  CFStringRef v1 = objc_getAssociatedObject(a1, &unk_1E96C478B);
  uint64_t v6 = objc_msgSend_unsignedIntegerValue(v1, v2, v3, v4, v5);

  return v6;
}

id sub_1A6701140(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = objc_msgSend_nonLocalizedNameWithoutQuality(a1, a2, a3, a4, a5);
  uint64_t v11 = objc_msgSend_identifier(a1, v7, v8, v9, v10);
  int isEqualToString = objc_msgSend_isEqualToString_(v11, v12, *MEMORY[0x1E4F15288], v13, v14);

  if (!isEqualToString)
  {
    uint64_t v20 = objc_msgSend_identifier(a1, v16, v17, v18, v19);
    int isSiriVoiceIdentifier = objc_msgSend_isSiriVoiceIdentifier_(TTSAlternativeVoices, v21, (uint64_t)v20, v22, v23);

    if (isSiriVoiceIdentifier)
    {
      long long v29 = objc_msgSend_identifier(a1, v25, v26, v27, v28);
      objc_msgSend_nameForVoiceIdentifier_(TTSAlternativeVoices, v30, (uint64_t)v29, v31, v32);
      id v33 = (id)objc_claimAutoreleasedReturnValue();

      goto LABEL_13;
    }
    if (!objc_msgSend_isSynthesisProviderVoice(a1, v25, v26, v27, v28))
    {
      if (objc_msgSend_quality(a1, v34, v35, v36, v37) != 2)
      {
        if (objc_msgSend_quality(a1, v38, v39, v40, v41) != 3
          || (objc_msgSend_containsString_(v6, v45, @"Premium", v46, v47) & 1) != 0)
        {
          goto LABEL_12;
        }
        objc_msgSend_stringWithFormat_(NSString, v48, @"%@ (Premium)", v49, v50, v6);
        goto LABEL_11;
      }
      if ((objc_msgSend_containsString_(v6, v38, @"Enhanced", v40, v41) & 1) == 0)
      {
        objc_msgSend_stringWithFormat_(NSString, v42, @"%@ (Enhanced)", v43, v44, v6);
        uint64_t v51 = LABEL_11:;

        uint64_t v6 = (void *)v51;
      }
    }
  }
LABEL_12:
  id v33 = v6;
  uint64_t v6 = v33;
LABEL_13:

  return v33;
}

void sub_1A67012BC(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_msgSend_numberWithLongLong_(NSNumber, a2, a3, a4, a5);
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_setAssociatedObject(a1, &unk_1E96C478C, v6, (void *)1);
}

uint64_t sub_1A6701324(void *a1)
{
  CFStringRef v1 = objc_getAssociatedObject(a1, &unk_1E96C478C);
  uint64_t v6 = objc_msgSend_unsignedIntegerValue(v1, v2, v3, v4, v5);

  return v6;
}

void sub_1A6701364(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_msgSend_numberWithBool_(NSNumber, a2, a3, a4, a5);
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_setAssociatedObject(a1, &unk_1E96C478D, v6, (void *)1);
}

uint64_t sub_1A67013CC(void *a1)
{
  CFStringRef v1 = objc_getAssociatedObject(a1, &unk_1E96C478D);
  uint64_t v6 = objc_msgSend_BOOLValue(v1, v2, v3, v4, v5);

  return v6;
}

void sub_1A670140C(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_msgSend_numberWithBool_(NSNumber, a2, a3, a4, a5);
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_setAssociatedObject(a1, &unk_1E96C478E, v6, (void *)1);
}

uint64_t sub_1A6701474(void *a1)
{
  CFStringRef v1 = objc_getAssociatedObject(a1, &unk_1E96C478E);
  uint64_t v6 = objc_msgSend_BOOLValue(v1, v2, v3, v4, v5);

  return v6;
}

void sub_1A67014B4(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_msgSend_numberWithBool_(NSNumber, a2, a3, a4, a5);
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_setAssociatedObject(a1, &unk_1E96C478F, v6, (void *)1);
}

uint64_t sub_1A670151C(void *a1)
{
  CFStringRef v1 = objc_getAssociatedObject(a1, &unk_1E96C478F);
  uint64_t v6 = objc_msgSend_BOOLValue(v1, v2, v3, v4, v5);

  return v6;
}

void sub_1A670155C(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_msgSend_numberWithBool_(NSNumber, a2, a3, a4, a5);
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_setAssociatedObject(a1, &unk_1E96C4790, v6, (void *)1);
}

uint64_t sub_1A67015C4(void *a1)
{
  CFStringRef v1 = objc_getAssociatedObject(a1, &unk_1E96C4790);
  uint64_t v6 = objc_msgSend_BOOLValue(v1, v2, v3, v4, v5);

  return v6;
}

void sub_1A6701604(void *a1, uint64_t a2, void *a3)
{
}

id sub_1A6701614(void *a1)
{
  return objc_getAssociatedObject(a1, &unk_1E96C4791);
}

BOOL sub_1A6701620(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v5 = v4;
    uint64_t v10 = objc_msgSend_identifier(a1, v6, v7, v8, v9);
    uint64_t v15 = objc_msgSend_identifier(v5, v11, v12, v13, v14);
    if (objc_msgSend_isEqualToString_(v10, v16, (uint64_t)v15, v17, v18))
    {
      uint64_t v23 = objc_msgSend_quality(a1, v19, v20, v21, v22);
      BOOL v28 = v23 == objc_msgSend_quality(v5, v24, v25, v26, v27);
    }
    else
    {
      BOOL v28 = 0;
    }
  }
  else
  {
    BOOL v28 = 0;
  }

  return v28;
}

void sub_1A67016EC(void *a1, uint64_t a2, void *a3)
{
}

id sub_1A67016FC(void *a1)
{
  return objc_getAssociatedObject(a1, &unk_1E96C4792);
}

id sub_1A6701708(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (TTSUseCoreSynthesizerForAV())
  {
    uint64_t v24 = 0;
    uint64_t v25 = &v24;
    uint64_t v26 = 0x3032000000;
    uint64_t v27 = sub_1A66FE3D4;
    BOOL v28 = sub_1A66FE3E4;
    id v29 = 0;
    dispatch_semaphore_t v8 = dispatch_semaphore_create(0);
    uint64_t v13 = objc_msgSend_shared(_TtC12TextToSpeech22CoreSynthesisVoiceShim, v9, v10, v11, v12);
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = sub_1A67018B0;
    v21[3] = &unk_1E5C69A60;
    uint64_t v23 = &v24;
    uint64_t v14 = v8;
    uint64_t v22 = v14;
    objc_msgSend_voiceWithIdentifier_completionHandler_(v13, v15, (uint64_t)v4, (uint64_t)v21, v16);

    dispatch_semaphore_wait(v14, 0xFFFFFFFFFFFFFFFFLL);
    id v17 = (id)v25[5];

    _Block_object_dispose(&v24, 8);
  }
  else if (objc_msgSend_isSiriVoiceIdentifier_(TTSAlternativeVoices, v5, (uint64_t)v4, v6, v7))
  {
    id v17 = 0;
  }
  else
  {
    objc_msgSend__voiceWithIdentifier_includingSiri_(a1, v18, (uint64_t)v4, 0, v19);
    id v17 = (id)objc_claimAutoreleasedReturnValue();
  }

  return v17;
}

void sub_1A6701898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A67018B0(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

id sub_1A6701910(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = (objc_class *)MEMORY[0x1E4F15478];
  id v4 = a3;
  id v5 = [v3 alloc];
  uint64_t v9 = objc_msgSend_initWithLanguage_(v5, v6, (uint64_t)v4, v7, v8);

  return v9;
}

id sub_1A6701968(void *a1)
{
  if (TTSUseCoreSynthesizerForAV())
  {
    uint64_t v20 = 0;
    uint64_t v21 = &v20;
    uint64_t v22 = 0x3032000000;
    uint64_t v23 = sub_1A66FE3D4;
    uint64_t v24 = sub_1A66FE3E4;
    id v25 = 0;
    dispatch_semaphore_t v5 = dispatch_semaphore_create(0);
    uint64_t v10 = objc_msgSend_shared(_TtC12TextToSpeech22CoreSynthesisVoiceShim, v6, v7, v8, v9);
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 3221225472;
    v17[2] = sub_1A6701AE0;
    v17[3] = &unk_1E5C69AD0;
    uint64_t v19 = &v20;
    uint64_t v11 = v5;
    uint64_t v18 = v11;
    objc_msgSend_publicVoicesWithCompletionHandler_(v10, v12, (uint64_t)v17, v13, v14);

    dispatch_semaphore_wait(v11, 0xFFFFFFFFFFFFFFFFLL);
    id v15 = (id)v21[5];

    _Block_object_dispose(&v20, 8);
  }
  else
  {
    objc_msgSend__speechVoicesIncludingSiri_(a1, v2, 0, v3, v4);
    id v15 = (id)objc_claimAutoreleasedReturnValue();
  }

  return v15;
}

void sub_1A6701AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A6701AE0(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

id sub_1A6701B40(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  v92.receiver = a1;
  v92.super_class = (Class)&off_1EFBA6410;
  id v5 = objc_msgSendSuper2(&v92, sel_init);
  if (v5)
  {
    uint64_t v6 = objc_opt_class();
    uint64_t v9 = objc_msgSend_decodeObjectOfClass_forKey_(v4, v7, v6, @"language", v8);
    objc_msgSend_setLanguage_(v5, v10, (uint64_t)v9, v11, v12);

    uint64_t v13 = objc_opt_class();
    uint64_t v16 = objc_msgSend_decodeObjectOfClass_forKey_(v4, v14, v13, @"identifier", v15);
    objc_msgSend_setIdentifier_(v5, v17, (uint64_t)v16, v18, v19);

    uint64_t v20 = objc_opt_class();
    uint64_t v23 = objc_msgSend_decodeObjectOfClass_forKey_(v4, v21, v20, @"nonLocalizedNameWithoutQuality", v22);
    objc_msgSend_setNonLocalizedNameWithoutQuality_(v5, v24, (uint64_t)v23, v25, v26);

    uint64_t v27 = objc_opt_class();
    uint64_t v30 = objc_msgSend_decodeObjectOfClass_forKey_(v4, v28, v27, @"nameWithoutQuality", v29);
    objc_msgSend_setBackupName_(v5, v31, (uint64_t)v30, v32, v33);

    uint64_t v37 = objc_msgSend_decodeIntegerForKey_(v4, v34, @"quality", v35, v36);
    objc_msgSend_setQuality_(v5, v38, v37, v39, v40);
    uint64_t v44 = objc_msgSend_decodeInt64ForKey_(v4, v41, @"assetSize", v42, v43);
    objc_msgSend_setAssetSize_(v5, v45, v44, v46, v47);
    uint64_t v51 = objc_msgSend_decodeBoolForKey_(v4, v48, @"default", v49, v50);
    objc_msgSend_setIsDefault_(v5, v52, v51, v53, v54);
    uint64_t v58 = objc_msgSend_decodeBoolForKey_(v4, v55, @"canBeDownloaded", v56, v57);
    objc_msgSend_setCanBeDownloaded_(v5, v59, v58, v60, v61);
    uint64_t v65 = objc_msgSend_decodeBoolForKey_(v4, v62, @"installed", v63, v64);
    objc_msgSend_setIsInstalled_(v5, v66, v65, v67, v68);
    uint64_t v72 = objc_msgSend_decodeIntegerForKey_(v4, v69, @"gender", v70, v71);
    objc_msgSend_setGender_(v5, v73, v72, v74, v75);
    uint64_t v76 = objc_opt_class();
    uint64_t v79 = objc_msgSend_decodeObjectOfClass_forKey_(v4, v77, v76, @"synthesisProviderVoice", v78);
    objc_msgSend_setSynthesisProviderVoice_(v5, v80, (uint64_t)v79, v81, v82);

    uint64_t v86 = objc_msgSend_decodeBoolForKey_(v4, v83, @"isNoveltyVoice", v84, v85);
    objc_msgSend_setIsNoveltyVoice_(v5, v87, v86, v88, v89);
    id v90 = v5;
  }

  return v5;
}

void sub_1A6701D7C(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v9 = objc_msgSend_language(a1, v5, v6, v7, v8);
  objc_msgSend_encodeObject_forKey_(v4, v10, (uint64_t)v9, @"language", v11);

  uint64_t v16 = objc_msgSend_identifier(a1, v12, v13, v14, v15);
  objc_msgSend_encodeObject_forKey_(v4, v17, (uint64_t)v16, @"identifier", v18);

  uint64_t v23 = objc_msgSend_nonLocalizedNameWithoutQuality(a1, v19, v20, v21, v22);
  objc_msgSend_encodeObject_forKey_(v4, v24, (uint64_t)v23, @"nonLocalizedNameWithoutQuality", v25);

  uint64_t v30 = objc_msgSend_quality(a1, v26, v27, v28, v29);
  objc_msgSend_encodeInteger_forKey_(v4, v31, v30, @"quality", v32);
  uint64_t isInstalled = objc_msgSend_isInstalled(a1, v33, v34, v35, v36);
  objc_msgSend_encodeBool_forKey_(v4, v38, isInstalled, @"installed", v39);
  uint64_t canBeDownloaded = objc_msgSend_canBeDownloaded(a1, v40, v41, v42, v43);
  objc_msgSend_encodeBool_forKey_(v4, v45, canBeDownloaded, @"canBeDownloaded", v46);
  uint64_t isDefault = objc_msgSend_isDefault(a1, v47, v48, v49, v50);
  objc_msgSend_encodeBool_forKey_(v4, v52, isDefault, @"default", v53);
  uint64_t isNoveltyVoice = objc_msgSend_isNoveltyVoice(a1, v54, v55, v56, v57);
  objc_msgSend_encodeBool_forKey_(v4, v59, isNoveltyVoice, @"isNoveltyVoice", v60);
  uint64_t v65 = objc_msgSend_assetSize(a1, v61, v62, v63, v64);
  objc_msgSend_encodeInt64_forKey_(v4, v66, v65, @"assetSize", v67);
  uint64_t v72 = objc_msgSend_gender(a1, v68, v69, v70, v71);
  objc_msgSend_encodeInteger_forKey_(v4, v73, v72, @"gender", v74);
  objc_msgSend_synthesisProviderVoice(a1, v75, v76, v77, v78);
  id v81 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_encodeObject_forKey_(v4, v79, (uint64_t)v81, @"synthesisProviderVoice", v80);
}

uint64_t sub_1A6701F2C(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = qword_1EB67A5B8 == 0;
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = qword_1E96C4008 == 0;
  return result;
}

Class sub_1A6701F68(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1A6701FC0(a1, a2, a3, a4, a5);
  Class result = objc_getClass("AXSettings");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1A688DACC((uint64_t)result, v7, v8, v9, v10);
  }
  qword_1EB67A580 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1A6701FC0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  v7[0] = 0;
  if (!qword_1EB67A548)
  {
    v7[1] = (void *)MEMORY[0x1E4F143A8];
    void v7[2] = (void *)3221225472;
    v7[3] = sub_1A67020B8;
    v7[4] = &unk_1E5C69480;
    v7[5] = v7;
    long long v8 = xmmword_1E5C69B80;
    uint64_t v9 = 0;
    qword_1EB67A548 = _sl_dlopen();
  }
  uint64_t v5 = qword_1EB67A548;
  if (!qword_1EB67A548) {
    sub_1A688DB48(v7, a2, a3, a4, a5);
  }
  if (v7[0]) {
    free(v7[0]);
  }
  return v5;
}

uint64_t sub_1A67020B8()
{
  uint64_t result = _sl_dlopen();
  qword_1EB67A548 = result;
  return result;
}

void *sub_1A670212C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = (void *)sub_1A6701FC0(a1, a2, a3, a4, a5);
  uint64_t result = dlsym(v6, "AXSpeechSourceKeySpeechFeatures");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1E96C4798 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1A670217C()
{
  dispatch_queue_t v0 = (void *)qword_1EB67A5B8;
  qword_1EB67A5B8 = 0;

  CFStringRef v1 = (void *)qword_1E96C4008;
  qword_1E96C4008 = 0;

  int v2 = (void *)qword_1EB67A5C0;
  qword_1EB67A5C0 = 0;

  uint64_t v3 = (void *)qword_1E96C3FF8;
  qword_1E96C3FF8 = 0;
}

void *sub_1A67021DC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = (void *)sub_1A6701FC0(a1, a2, a3, a4, a5);
  uint64_t result = dlsym(v6, "AXIsInternalInstall");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_1E96C47A0 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

ausdk::AUOutputElement *ausdk::AUOutputElement::AUOutputElement(ausdk::AUOutputElement *this, ausdk::AUBase *a2)
{
  uint64_t v3 = ausdk::AUIOElement::AUIOElement(this, a2);
  *(void *)uint64_t v3 = &unk_1EFB7D888;
  ausdk::AUIOElement::AllocateBuffer((uint64_t)v3, 0);
  return this;
}

void sub_1A6702278(_Unwind_Exception *a1)
{
  sub_1A670228C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1A670228C(void *a1)
{
  *a1 = &unk_1EFB7D4E0;
  ausdk::AUBufferList::Deallocate(a1 + 18);
  int v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }

  return sub_1A67024F8((uint64_t)a1);
}

ausdk::AUOutputElement *ausdk::AUOutputElement::AUOutputElement(ausdk::AUOutputElement *this, ausdk::AUBase *a2, const AudioStreamBasicDescription *a3)
{
  uint64_t v5 = ausdk::AUIOElement::AUIOElement(this, a2);
  long long v6 = *(_OWORD *)&a3->mSampleRate;
  long long v7 = *(_OWORD *)&a3->mBytesPerPacket;
  *((void *)v5 + 14) = *(void *)&a3->mBitsPerChannel;
  *((_OWORD *)v5 + 5) = v6;
  *((_OWORD *)v5 + 6) = v7;
  *(void *)uint64_t v5 = &unk_1EFB7D888;
  ausdk::AUIOElement::AllocateBuffer((uint64_t)v5, 0);
  return this;
}

void sub_1A6702358(_Unwind_Exception *a1)
{
  sub_1A670228C(v1);
  _Unwind_Resume(a1);
}

uint64_t ausdk::AUOutputElement::SetStreamFormat(ausdk::AUOutputElement *this, const AudioStreamBasicDescription *a2)
{
  uint64_t v3 = ausdk::AUIOElement::SetStreamFormat(this, a2);
  if (!v3) {
    (*(void (**)(ausdk::AUOutputElement *, void))(*(void *)this + 64))(this, 0);
  }
  return v3;
}

uint64_t sub_1A67023CC(void *a1)
{
  *a1 = &unk_1EFB7D4E0;
  ausdk::AUBufferList::Deallocate(a1 + 18);
  int v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }

  return sub_1A67024F8((uint64_t)a1);
}

void sub_1A6702434(void *a1)
{
  *a1 = &unk_1EFB7D4E0;
  ausdk::AUBufferList::Deallocate(a1 + 18);
  int v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  sub_1A67024F8((uint64_t)a1);

  JUMPOUT(0x1AD0C0C70);
}

uint64_t sub_1A67024B0(uint64_t a1)
{
  uint64_t v1 = 56;
  if (!*(unsigned char *)(a1 + 40)) {
    uint64_t v1 = 24;
  }
  uint64_t v2 = 48;
  if (!*(unsigned char *)(a1 + 40)) {
    uint64_t v2 = 16;
  }
  char v3 = 2;
  uint64_t v4 = *(void *)(a1 + v1);
  if (!*(unsigned char *)(a1 + 40)) {
    char v3 = 3;
  }
  return (v4 - *(void *)(a1 + v2)) >> v3;
}

uint64_t sub_1A67024F0()
{
  return 1;
}

uint64_t sub_1A67024F8(uint64_t a1)
{
  *(void *)a1 = &unk_1EFB7E1C8;
  sub_1A670255C((const void **)(a1 + 72));
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  char v3 = *(void **)(a1 + 16);
  if (v3)
  {
    *(void *)(a1 + 24) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_1A670255C(const void **a1)
{
  uint64_t v1 = *a1;
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t sub_1A6702D70(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5);
}

void LogError(const char *a1, ...)
{
  va_start(va, a1);
  vsyslog(3, a1, va);
}

void LogWarning(const char *a1, ...)
{
  va_start(va, a1);
  vsyslog(4, a1, va);
}

id sub_1A670321C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  for (uint64_t i = objc_msgSend_data(MEMORY[0x1E4F1CA58], a2, a3, a4, a5);
  {
    int data_block = archive_read_data_block();
    if (data_block) {
      break;
    }
  }
  if (data_block != 1)
  {
    uint64_t v9 = AXTTSLogCommon();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_1A688DF0C();
    }
  }

  return i;
}

uint64_t sub_1A670364C()
{
  qword_1E96C47B0 = objc_opt_new();

  return MEMORY[0x1F41817F8]();
}

void sub_1A6703A08(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1A6704288(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  qword_1E96C47B8 = objc_msgSend_setWithArray_(MEMORY[0x1E4F1CAD0], a2, (uint64_t)&unk_1EFB95498, a4, a5);

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1A6704620(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = NSNumber;
  long long v6 = *(void **)(a1 + 32);
  id v7 = a3;
  uint64_t v11 = objc_msgSend_indexOfObject_(v6, v8, a2, v9, v10);
  uint64_t v15 = objc_msgSend_numberWithUnsignedInteger_(v5, v12, v11, v13, v14);
  uint64_t v16 = NSNumber;
  uint64_t v20 = objc_msgSend_indexOfObject_(*(void **)(a1 + 32), v17, (uint64_t)v7, v18, v19);

  uint64_t v24 = objc_msgSend_numberWithUnsignedInteger_(v16, v21, v20, v22, v23);
  uint64_t v28 = objc_msgSend_compare_(v15, v25, (uint64_t)v24, v26, v27);

  return v28;
}

uint64_t sub_1A6704828()
{
  uint64_t result = MGGetBoolAnswer();
  byte_1E96C47C8 = result;
  return result;
}

void ausdk::AUMIDIEffectBase::AUMIDIEffectBase(ausdk::AUMIDIEffectBase *this, OpaqueAudioComponentInstance *a2, char a3)
{
  ausdk::AUEffectBase::AUEffectBase(this, a2, a3);
  v3[75] = v3;
  void *v3 = &unk_1EFB7DC58;
  v3[74] = &unk_1EFB7DEC0;
}

{
  void *v3;

  ausdk::AUEffectBase::AUEffectBase(this, a2, a3);
  v3[75] = v3;
  void *v3 = &unk_1EFB7DC58;
  v3[74] = &unk_1EFB7DEC0;
}

uint64_t ausdk::AUMIDIEffectBase::GetPropertyInfo(ausdk::AUMIDIEffectBase *this, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result = ausdk::AUEffectBase::GetPropertyInfo(this, a2, a3, a4, a5, a6);
  if (result == -10879)
  {
    return ausdk::AUMIDIBase::DelegateGetPropertyInfo((ausdk::AUMIDIEffectBase *)((char *)this + 592), a2, a3, a4, a5, a6);
  }
  return result;
}

uint64_t ausdk::AUMIDIEffectBase::GetProperty(ausdk::AUMIDIEffectBase *this, unsigned int a2, unsigned int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result = ausdk::AUEffectBase::GetProperty(this, a2, a3, a4, a5);
  if (result == -10879)
  {
    return ausdk::AUMIDIBase::DelegateGetProperty((ausdk::AUMIDIEffectBase *)((char *)this + 592), a2, a3, a4, a5);
  }
  return result;
}

uint64_t ausdk::AUMIDIEffectBase::SetProperty(ausdk::AUMIDIEffectBase *this, unsigned int a2, unsigned int a3, unsigned int a4, int *a5, unsigned int a6)
{
  uint64_t result = ausdk::AUEffectBase::SetProperty(this, a2, a3, a4, a5, a6);
  if (result == -10879)
  {
    return ausdk::AUMIDIBase::DelegateSetProperty((ausdk::AUMIDIEffectBase *)((char *)this + 592), a2, a3, a4, a5);
  }
  return result;
}

void sub_1A6704F54(void **a1)
{
  *a1 = &unk_1EFB7D560;
  uint64_t v2 = a1 + 66;
  sub_1A67051A8(&v2);
  ausdk::AUBase::~AUBase((ausdk::AUBase *)a1);
}

uint64_t sub_1A6704FB0(void **a1)
{
  *a1 = &unk_1EFB7D560;
  char v3 = a1 + 66;
  sub_1A67051A8(&v3);
  ausdk::AUBase::~AUBase((ausdk::AUBase *)a1);
  return MEMORY[0x1AD0C0C70]();
}

uint64_t sub_1A6705020()
{
  return 1;
}

uint64_t sub_1A6705028(uint64_t a1, unsigned __int8 a2, unsigned __int8 a3, unsigned __int8 a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, void, void, void, void, uint64_t))(*(void *)(a1 + 592) + 64))(a1 + 592, a2 & 0xF0, a2 & 0xF, a3, a4, a5);
}

uint64_t sub_1A6705074(uint64_t a1, const unsigned __int8 *a2)
{
  return ausdk::AUMIDIBase::SysEx((ausdk::AUMIDIBase *)(a1 + 592), a2);
}

void sub_1A670507C(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1A6705084(uint64_t result, char a2)
{
  *(unsigned char *)(result + 552) = a2;
  return result;
}

uint64_t sub_1A670508C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 552);
}

void sub_1A6705094(uint64_t a1)
{
  uint64_t v1 = (ausdk::AUBase *)(a1 - 592);
  *(void *)(a1 - 592) = &unk_1EFB7D560;
  uint64_t v2 = (void **)(a1 - 64);
  sub_1A67051A8(&v2);
  ausdk::AUBase::~AUBase(v1);
}

uint64_t sub_1A67050F0(uint64_t a1)
{
  uint64_t v1 = (ausdk::AUBase *)(a1 - 592);
  *(void *)(a1 - 592) = &unk_1EFB7D560;
  char v3 = (void **)(a1 - 64);
  sub_1A67051A8(&v3);
  ausdk::AUBase::~AUBase(v1);
  return MEMORY[0x1AD0C0C70]();
}

uint64_t sub_1A6705160(uint64_t a1, unsigned __int8 a2, unsigned __int8 a3, unsigned __int8 a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, void, void, void, void, uint64_t))(*(void *)a1 + 64))(a1, a2 & 0xF0, a2 & 0xF, a3, a4, a5);
}

void sub_1A67051A8(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_1A67051FC(v2);
    char v3 = **a1;
    operator delete(v3);
  }
}

void *sub_1A67051FC(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = (void *)*result;
  char v3 = (void *)result[1];
  while (v3 != v2)
  {
    uint64_t v4 = (void *)*--v3;
    uint64_t result = v4;
    void *v3 = 0;
    if (v4) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

CFDataRef TTSCreateDecryptedDataFromEncryptedData(const __CFData *result)
{
  if (result)
  {
    CFDataRef v1 = result;
    BytePtr = CFDataGetBytePtr(result);
    CFIndex Length = CFDataGetLength(v1);
    unsigned int v4 = *((unsigned __int16 *)BytePtr + 76);
    uint64_t v5 = Length - 154;
    uint64_t v13 = objc_msgSend_data(MEMORY[0x1E4F1CA58], v6, v7, v8, v9);
    if (v5 >= 1 && v4)
    {
      unsigned int v14 = 0;
      uint64_t v15 = (unsigned __int16 *)(BytePtr + 154);
      do
      {
        unsigned int v18 = *v15;
        uint64_t v16 = v15 + 1;
        uint64_t v17 = v18;
        uint64_t v19 = v18;
        uint64_t v20 = v16;
        if (v18)
        {
          do
          {
            char v21 = *(unsigned char *)v20;
            uint64_t v20 = (unsigned __int16 *)((char *)v20 + 1);
            char v31 = v21 ^ 0xA9;
            objc_msgSend_appendBytes_length_(v13, v10, (uint64_t)&v31, 1, v12);
            --v19;
          }
          while (v19);
        }
        uint64_t v15 = (unsigned __int16 *)((char *)v16 + v17);
        uint64_t v5 = v5 - 2 - v17;
        uint64_t v22 = objc_msgSend_dataUsingEncoding_(@"\n", v10, 4, v11, v12);
        objc_msgSend_appendData_(v13, v23, v22, v24, v25);
        ++v14;
      }
      while (v5 >= 1 && v14 < v4);
    }
    id v27 = objc_alloc(MEMORY[0x1E4F1C9B8]);
    return (const __CFData *)objc_msgSend_initWithData_(v27, v28, (uint64_t)v13, v29, v30);
  }
  return result;
}

id sub_1A670537C(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v17 = 0;
  uint64_t v6 = objc_msgSend_length(a1, a2, a3, a4, a5);
  objc_msgSend_getBytes_range_(a1, v7, (uint64_t)&v17, v6 - 1, 1);
  if (v17)
  {
    id v12 = (id)objc_msgSend_mutableCopy(a1, v8, v9, v10, v11);
    char v16 = 0;
    objc_msgSend_appendBytes_length_(v12, v13, (uint64_t)&v16, 1, v14);
  }
  else
  {
    id v12 = a1;
  }

  return v12;
}

id sub_1A670574C(uint64_t a1)
{
  id v2 = objc_alloc(MEMORY[0x1E4F1C9B8]);
  uint64_t v6 = objc_msgSend_initWithContentsOfURL_(v2, v3, *(void *)(a1 + 32), v4, v5);

  return v6;
}

BOOL sub_1A6705BE0(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  unint64_t v9 = objc_msgSend_priority(a2, v5, v6, v7, v8);
  unint64_t v14 = objc_msgSend_priority(v4, v10, v11, v12, v13);

  return v9 > v14;
}

void sub_1A6705EF0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1A6705F10(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void **)(a1 + 32);
  uint64_t v7 = objc_msgSend_range(a2, (const char *)a2, a3, a4, a5);

  return objc_msgSend_transformRange_to_(v5, v6, v7, (uint64_t)v6, (uint64_t)&stru_1EFB83720);
}

void sub_1A6705FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1A6706D08(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void **)(a1 + 32);
  uint64_t v6 = (void *)MEMORY[0x1E4F29238];
  uint64_t v7 = objc_msgSend_utf8Range(a2, (const char *)a2, a3, a4, a5);
  objc_msgSend_valueWithRange_(v6, v8, v7, (uint64_t)v8, v9);
  id v13 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v5, v10, (uint64_t)v13, v11, v12);
}

void sub_1A6706D78(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v50[1] = *MEMORY[0x1E4F143B8];
  if ((objc_msgSend_shouldAbort(*(void **)(a1 + 32), a2, a3, a4, a5) & 1) == 0)
  {
    uint64_t v11 = (uint64_t)&a2[*(void *)(a1 + 64)];
    uint64_t v12 = objc_msgSend_ruleReplacements(*(void **)(a1 + 32), v7, v8, v9, v10);
    char v16 = objc_msgSend_objectAtIndexedSubscript_(v12, v13, v11, v14, v15);

    char v17 = (void *)MEMORY[0x1E4F29238];
    uint64_t v22 = objc_msgSend_ruleset(v16, v18, v19, v20, v21);
    uint64_t v26 = objc_msgSend_valueWithPointer_(v17, v23, (uint64_t)v22, v24, v25);

    uint64_t v30 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 40), v27, (uint64_t)v26, v28, v29);
    uint64_t v33 = v30;
    if (v30)
    {
      id v34 = v30;
    }
    else
    {
      uint64_t v35 = objc_msgSend_valueWithRange_(MEMORY[0x1E4F29238], v31, 0, *(void *)(a1 + 72), v32);
      v50[0] = v35;
      objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v36, (uint64_t)v50, 1, v37);
      id v34 = (id)objc_claimAutoreleasedReturnValue();
    }
    uint64_t v42 = objc_msgSend_regex(v16, v38, v39, v40, v41);
    uint64_t v43 = *(void *)(a1 + 80);
    v46[0] = MEMORY[0x1E4F143A8];
    v46[1] = 3221225472;
    void v46[2] = sub_1A6706F64;
    v46[3] = &unk_1E5C69C98;
    id v47 = v16;
    id v48 = *(id *)(a1 + 48);
    id v49 = *(id *)(a1 + 56);
    id v44 = v16;
    objc_msgSend_enumerateMatchesInCString_ranges_usingBlock_(v42, v45, v43, (uint64_t)v34, (uint64_t)v46);
  }
}

void sub_1A6706F64(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v8 = objc_msgSend_postMatch(*(void **)(a1 + 32), v4, v5, v6, v7);

  if (!v8
    || (objc_msgSend_postMatch(*(void **)(a1 + 32), v9, v10, v11, v12),
        id v13 = (uint64_t (**)(void, void, void))objc_claimAutoreleasedReturnValue(),
        int v14 = ((uint64_t (**)(void, void, id))v13)[2](v13, *(void *)(a1 + 40), v3),
        v13,
        v14))
  {
    uint64_t v15 = [TTSMatchedRuleReplacement alloc];
    uint64_t v20 = objc_msgSend_init(v15, v16, v17, v18, v19);
    uint64_t v25 = objc_msgSend_replacement(*(void **)(a1 + 32), v21, v22, v23, v24);
    objc_msgSend_setReplacement_(v20, v26, (uint64_t)v25, v27, v28);

    objc_msgSend_setMatch_(v20, v29, (uint64_t)v3, v30, v31);
    objc_msgSend_setRuleReplacement_(v20, v32, *(void *)(a1 + 32), v33, v34);
    id v36 = *(id *)(a1 + 48);
    id v35 = v20;
    AX_PERFORM_WITH_LOCK();
  }
}

uint64_t sub_1A67070B0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), a4, a5);
}

uint64_t sub_1A67070BC(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  uint64_t v9 = objc_msgSend_ruleReplacement(a2, v5, v6, v7, v8);
  unint64_t v14 = objc_msgSend_effectiveIndex(v9, v10, v11, v12, v13);
  uint64_t v19 = objc_msgSend_ruleReplacement(v4, v15, v16, v17, v18);

  if (v14 < objc_msgSend_effectiveIndex(v19, v20, v21, v22, v23)) {
    uint64_t v24 = -1;
  }
  else {
    uint64_t v24 = 1;
  }

  return v24;
}

uint64_t sub_1A6707138(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = objc_msgSend_ruleReplacement(a2, (const char *)a2, a3, a4, a5);
  uint64_t v10 = objc_msgSend_isTerminalRule(v5, v6, v7, v8, v9) ^ 1;

  return v10;
}

BOOL sub_1A6707174(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = objc_msgSend_ruleReplacement(a2, (const char *)a2, a3, a4, a5);
  BOOL v11 = objc_msgSend_effectiveIndex(v6, v7, v8, v9, v10) == *(void *)(a1 + 32);

  return v11;
}

void sub_1A6707538(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v34 = v3;
    uint64_t v7 = objc_msgSend_rangeWithName_(v3, v4, @"num", v5, v6);
    if (v7 == 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v11 = objc_msgSend_rangeWithName_(v34, v8, @"numbrack", v9, v10);
      id v3 = v34;
      if (v11 == 0x7FFFFFFFFFFFFFFFLL) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v11 = v7;
    }
    uint64_t v12 = objc_msgSend_substringWithRange_(*(void **)(a1 + 32), v8, v11, (uint64_t)v8, v10);
    int v17 = objc_msgSend_intValue(v12, v13, v14, v15, v16);

    id v3 = v34;
    if (v17)
    {
      uint64_t v21 = objc_msgSend_numberWithInteger_(NSNumber, v18, v17, v19, v20);
      uint64_t v22 = *(void **)(a1 + 40);
      uint64_t v23 = (void *)MEMORY[0x1E4F29238];
      uint64_t v28 = objc_msgSend_range(v34, v24, v25, v26, v27);
      uint64_t v31 = objc_msgSend_valueWithRange_(v23, v29, v28, (uint64_t)v29, v30);
      objc_msgSend_setObject_forKeyedSubscript_(v22, v32, (uint64_t)v21, (uint64_t)v31, v33);

      id v3 = v34;
    }
  }
LABEL_8:
}

uint64_t sub_1A670764C(uint64_t a1, void *a2, void *a3)
{
  id v4 = NSNumber;
  id v5 = a2;
  uint64_t v10 = objc_msgSend_rangeValue(a3, v6, v7, v8, v9);
  uint64_t v14 = objc_msgSend_numberWithUnsignedInteger_(v4, v11, v10, v12, v13);
  uint64_t v15 = NSNumber;
  uint64_t v20 = objc_msgSend_rangeValue(v5, v16, v17, v18, v19);

  uint64_t v24 = objc_msgSend_numberWithUnsignedInteger_(v15, v21, v20, v22, v23);
  uint64_t v28 = objc_msgSend_compare_(v14, v25, (uint64_t)v24, v26, v27);

  return v28;
}

uint64_t sub_1A67079A0()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  CFDataRef v1 = (void *)qword_1E96C47E0;
  qword_1E96C47E0 = (uint64_t)v0;

  id v2 = objc_alloc(MEMORY[0x1E4F28E08]);
  qword_1E96C47E8 = objc_msgSend_init(v2, v3, v4, v5, v6);

  return MEMORY[0x1F41817F8]();
}

id _TTSLoadIPAToNativePhonemeMapForLanguage(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = objc_msgSend_stringWithFormat_(NSString, a2, @"%@-%@", a4, a5, a2, a1);
  uint64_t v6 = (void *)MEMORY[0x1E4F28B50];
  uint64_t v7 = objc_opt_class();
  uint64_t v11 = objc_msgSend_bundleForClass_(v6, v8, v7, v9, v10);
  uint64_t v13 = objc_msgSend_pathForResource_ofType_inDirectory_(v11, v12, (uint64_t)v5, @"json", @"PhonemeMaps");

  if (v13)
  {
    uint64_t v45 = v5;
    id v44 = objc_msgSend_dataWithContentsOfFile_(MEMORY[0x1E4F1C9B8], v14, (uint64_t)v13, v15, v16);
    uint64_t v18 = objc_msgSend_JSONObjectWithData_options_error_(MEMORY[0x1E4F28D90], v17, (uint64_t)v44, 0, 0);
    uint64_t v23 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v19, v20, v21, v22);
    long long v46 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    id v24 = v18;
    uint64_t v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(v24, v25, (uint64_t)&v46, (uint64_t)v50, 16);
    if (v26)
    {
      uint64_t v30 = v26;
      uint64_t v31 = *(void *)v47;
      do
      {
        for (uint64_t i = 0; i != v30; ++i)
        {
          if (*(void *)v47 != v31) {
            objc_enumerationMutation(v24);
          }
          uint64_t v33 = *(void **)(*((void *)&v46 + 1) + 8 * i);
          id v34 = objc_msgSend_objectForKeyedSubscript_(v33, v27, @"ipa", v28, v29);
          uint64_t v38 = objc_msgSend_objectForKeyedSubscript_(v33, v35, @"synthNative", v36, v37);
          uint64_t v41 = (void *)v38;
          if (v34) {
            BOOL v42 = v38 == 0;
          }
          else {
            BOOL v42 = 1;
          }
          if (!v42) {
            objc_msgSend_setObject_forKeyedSubscript_(v23, v39, v38, (uint64_t)v34, v40);
          }
        }
        uint64_t v30 = objc_msgSend_countByEnumeratingWithState_objects_count_(v24, v27, (uint64_t)&v46, (uint64_t)v50, 16);
      }
      while (v30);
    }

    uint64_t v5 = v45;
  }
  else
  {
    uint64_t v23 = 0;
  }

  return v23;
}

id sub_1A67081DC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v124 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = a3;
  uint64_t v122 = 0;
  long long v113 = 0u;
  long long v114 = 0u;
  long long v111 = 0u;
  long long v112 = 0u;
  long long v109 = 0u;
  long long v110 = 0u;
  *(_OWORD *)buffer = 0u;
  long long v108 = 0u;
  uint64_t v14 = objc_msgSend_length(v9, v10, v11, v12, v13);
  id v15 = objc_alloc_init(MEMORY[0x1E4F28E48]);
  CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, MEMORY[0x1E4F1D540]);
  id v17 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  uint64_t v122 = (id *)&a9;
  CFStringRef theString = v9;
  uint64_t v118 = 0;
  int64_t v119 = v14;
  CharactersPtr = CFStringGetCharactersPtr(v9);
  CStringPtr = 0;
  long long v116 = (UniChar *)CharactersPtr;
  if (!CharactersPtr) {
    CStringPtr = CFStringGetCStringPtr(v9, 0x600u);
  }
  int64_t v120 = 0;
  int64_t v121 = 0;
  long long v117 = CStringPtr;
  uint64_t v22 = v14 - 1;
  uint64_t v102 = v9;
  if (v14 < 1)
  {
    uint64_t v101 = 0;
    uint64_t v25 = 0;
    goto LABEL_66;
  }
  theDict = Mutable;
  uint64_t v100 = v17;
  int64_t v23 = 0;
  key = 0;
  uint64_t v24 = 0;
  uint64_t v101 = 0;
  uint64_t v25 = 0;
  do
  {
    int64_t v26 = v23 + 1;
    if (v23 < 0) {
      goto LABEL_56;
    }
    int64_t v27 = v119;
    if (v119 <= v23) {
      goto LABEL_56;
    }
    uint64_t v28 = v116;
    if (v116)
    {
      int64_t v29 = v118 + v23;
LABEL_9:
      UniChar v30 = v28[v29];
      goto LABEL_12;
    }
    if (!v117)
    {
      if (v121 <= v23 || (int64_t v53 = v120, v120 > v23))
      {
        int64_t v54 = v23 - 4;
        if ((unint64_t)v23 < 4) {
          int64_t v54 = 0;
        }
        if (v54 + 64 < v119) {
          int64_t v27 = v54 + 64;
        }
        int64_t v120 = v54;
        int64_t v121 = v27;
        v127.location = v118 + v54;
        uint64_t v55 = v24;
        v127.length = v27 - v54;
        CFStringGetCharacters(theString, v127, buffer);
        uint64_t v24 = v55;
        int64_t v53 = v120;
      }
      int64_t v29 = v23 - v53;
      uint64_t v28 = buffer;
      goto LABEL_9;
    }
    UniChar v30 = v117[v118 + v23];
LABEL_12:
    if (v30 != 37) {
      goto LABEL_56;
    }
    uint64_t v31 = v23 - v24;
    if (v23 > v24)
    {
      uint64_t v32 = v24;
      uint64_t v33 = objc_msgSend_substringWithRange_(v9, v18, v24, v31, v19);
      objc_msgSend_addObject_(v100, v34, (uint64_t)v33, v35, v36);

      uint64_t v24 = v32;
    }
    if (v26 >= v14) {
      goto LABEL_56;
    }
    int64_t v98 = v14;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    int64_t v39 = ~v23;
    int64_t v40 = v23 + 65;
    uint64_t v41 = v23 + 1;
    while (1)
    {
      int64_t v42 = v23 + 1;
      if ((unint64_t)v26 >= 4) {
        uint64_t v43 = 4;
      }
      else {
        uint64_t v43 = v26;
      }
      if (v42 < 0) {
        goto LABEL_44;
      }
      int64_t v44 = v119;
      if (v119 <= v42) {
        goto LABEL_44;
      }
      if (v116)
      {
        UniChar v45 = v116[v23 + 1 + v118];
      }
      else if (v117)
      {
        UniChar v45 = v117[v118 + 1 + v23];
      }
      else
      {
        if (v121 <= v42 || (int64_t v46 = v120, v120 > v42))
        {
          uint64_t v47 = -v43;
          uint64_t v48 = v43 + v39;
          int64_t v49 = v40 - v43;
          int64_t v50 = v23 + v47;
          uint64_t v94 = v41;
          uint64_t v95 = v24;
          int64_t v51 = v50 + 65;
          if (v50 + 65 >= v119) {
            int64_t v51 = v119;
          }
          int64_t v120 = v50 + 1;
          int64_t v121 = v51;
          if (v119 >= v49) {
            int64_t v44 = v49;
          }
          v126.length = v44 + v48;
          uint64_t v93 = v37;
          v126.location = v50 + v118 + 1;
          CFStringGetCharacters(theString, v126, buffer);
          uint64_t v37 = v93;
          uint64_t v41 = v94;
          uint64_t v24 = v95;
          int64_t v46 = v120;
        }
        UniChar v45 = buffer[v23 + 1 - v46];
      }
      if (v45 == 37 && v42 == v41)
      {
        objc_msgSend_addObject_(v100, v18, @"%", v31, v19);
        uint64_t v24 = v23 + 2;
        int64_t v26 = v23 + 2;
        uint64_t v9 = v102;
        goto LABEL_55;
      }
      if ((unsigned __int16)(v45 - 48) <= 9u)
      {
        uint64_t v38 = 10 * v38 + v45 - 48;
        goto LABEL_44;
      }
      if (v45 == 36)
      {
        uint64_t v41 = v23 + 2;
        uint64_t v37 = v38;
        goto LABEL_44;
      }
      if (v45 == 64) {
        break;
      }
LABEL_44:
      --v39;
      ++v40;
      ++v26;
      ++v23;
      if (v22 == v42)
      {
        int64_t v26 = v98;
        uint64_t v9 = v102;
        goto LABEL_62;
      }
    }
    uint64_t v56 = key + 1;
    if (v37) {
      uint64_t v57 = (char *)v37;
    }
    else {
      uint64_t v57 = key + 1;
    }
    keya = v57;
    uint64_t v58 = v41;
    uint64_t v59 = objc_alloc_init(TTSFormatArgument);

    uint64_t v60 = v23 + 2;
    uint64_t v9 = v102;
    uint64_t v63 = objc_msgSend_substringWithRange_(v102, v61, v58, v60 - v58, v62);

    objc_storeStrong((id *)&v59->formatSpecifier, v63);
    CFDictionarySetValue(theDict, keya, v59);
    objc_msgSend_addObject_(v100, v64, (uint64_t)v59, v65, v66);
    uint64_t v24 = v60;
    uint64_t v25 = v59;
    uint64_t v101 = v63;
    key = v56;
    int64_t v26 = v60;
LABEL_55:
    uint64_t v14 = v98;
LABEL_56:
    int64_t v23 = v26;
  }
  while (v26 < v14);
LABEL_62:
  if (v26 <= v24)
  {
    CFDictionaryRef Mutable = theDict;
    id v17 = v100;
  }
  else
  {
    uint64_t v67 = objc_msgSend_substringWithRange_(v9, v18, v24, v26 - v24, v19);
    id v17 = v100;
    objc_msgSend_addObject_(v100, v68, (uint64_t)v67, v69, v70);

    CFDictionaryRef Mutable = theDict;
  }
LABEL_66:
  CFIndex Count = CFDictionaryGetCount(Mutable);
  if (Count < 1)
  {
    p_isa = (id *)&v25->super.isa;
  }
  else
  {
    CFIndex v72 = Count;
    uint64_t v73 = 0;
    do
    {
      CFDictionaryGetValue(Mutable, (const void *)++v73);
      p_isa = (id *)objc_claimAutoreleasedReturnValue();

      if (p_isa)
      {
        uint64_t v75 = v122++;
        objc_storeStrong(p_isa + 3, *v75);
        uint64_t v76 = v122++;
        objc_storeStrong(p_isa + 2, *v76);
      }
      uint64_t v25 = (TTSFormatArgument *)p_isa;
    }
    while (v72 != v73);
  }
  CFDictionaryRef v77 = Mutable;
  long long v105 = 0u;
  long long v106 = 0u;
  long long v103 = 0u;
  long long v104 = 0u;
  id v78 = v17;
  uint64_t v80 = objc_msgSend_countByEnumeratingWithState_objects_count_(v78, v79, (uint64_t)&v103, (uint64_t)v123, 16);
  if (v80)
  {
    uint64_t v81 = v80;
    uint64_t v82 = *(void *)v104;
    do
    {
      for (uint64_t i = 0; i != v81; ++i)
      {
        if (*(void *)v104 != v82) {
          objc_enumerationMutation(v78);
        }
        uint64_t v84 = *(void **)(*((void *)&v103 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          objc_msgSend_appendString_withAttributes_(v15, v85, (uint64_t)v84, 0, v86);
        }
        else
        {
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            uint64_t v88 = v84;

            objc_msgSend_appendString_withAttributes_(v15, v89, v88[3], v88[2], v90);
            p_isa = (id *)v88;
          }
        }
      }
      uint64_t v81 = objc_msgSend_countByEnumeratingWithState_objects_count_(v78, v87, (uint64_t)&v103, (uint64_t)v123, 16);
    }
    while (v81);
  }

  CFRelease(v77);
  id v91 = v15;

  return v91;
}

void sub_1A6708898(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v19 = a4;
  id v6 = a3;
  uint64_t v11 = objc_msgSend_length(v6, v7, v8, v9, v10);
  uint64_t v16 = objc_msgSend_length(a1, v12, v13, v14, v15);
  objc_msgSend_replaceCharactersInRange_withString_(a1, v17, v16, 0, (uint64_t)v6);

  objc_msgSend_setAttributes_range_(a1, v18, (uint64_t)v19, v16, v11);
}

uint64_t sub_1A6708CA4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1A6708CB4(uint64_t a1)
{
}

void sub_1A6708CD0()
{
  id v0 = (void *)qword_1EB67AB80;
  qword_1EB67AB80 = 0;
}

void sub_1A6708D08()
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  unint64_t v0 = 0x1E4F28000uLL;
  CFDataRef v1 = (void *)MEMORY[0x1E4F28B50];
  uint64_t v2 = objc_opt_class();
  id v6 = objc_msgSend_bundleForClass_(v1, v3, v2, v4, v5);
  uint64_t v11 = objc_msgSend_bundlePath(v6, v7, v8, v9, v10);
  uint64_t v16 = objc_msgSend_stringByDeletingLastPathComponent(v11, v12, v13, v14, v15);

  long long v59 = 0u;
  long long v60 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  uint64_t v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(&unk_1EFB954B0, v17, (uint64_t)&v57, (uint64_t)v65, 16);
  if (v18)
  {
    uint64_t v23 = v18;
    uint64_t v24 = *(void *)v58;
    *(void *)&long long v22 = 138412546;
    long long v54 = v22;
    do
    {
      uint64_t v25 = 0;
      uint64_t v55 = v23;
      do
      {
        if (*(void *)v58 != v24) {
          objc_enumerationMutation(&unk_1EFB954B0);
        }
        uint64_t v26 = *(void *)(*((void *)&v57 + 1) + 8 * v25);
        int64_t v27 = objc_msgSend_stringByAppendingPathComponent_(v16, v19, v26, v20, v21, v54);
        uint64_t v31 = objc_msgSend_bundleWithPath_(*(void **)(v0 + 2896), v28, (uint64_t)v27, v29, v30);
        id v56 = 0;
        objc_msgSend_loadAndReturnError_(v31, v32, (uint64_t)&v56, v33, v34);
        id v39 = v56;
        if (v39)
        {
          int64_t v40 = AXTTSLogCommon();
          if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            uint64_t v62 = v26;
            _os_log_error_impl(&dword_1A66D3000, v40, OS_LOG_TYPE_ERROR, "Failed to load first party audio unit from %@", buf, 0xCu);
          }
        }
        else
        {
          uint64_t v41 = v24;
          int64_t v42 = v16;
          unint64_t v43 = v0;
          int64_t v44 = objc_msgSend_principalClass(v31, v35, v36, v37, v38);
          if (objc_msgSend_conformsToProtocol_(v44, v45, (uint64_t)&unk_1EFBAAC10, v46, v47))
          {
            objc_msgSend_registerAudioUnit(v44, v48, v49, v50, v51);
          }
          else
          {
            uint64_t v52 = AXTTSLogCommon();
            if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
            {
              int64_t v53 = NSStringFromClass((Class)v44);
              *(_DWORD *)buf = v54;
              uint64_t v62 = v26;
              __int16 v63 = 2112;
              uint64_t v64 = v53;
              _os_log_error_impl(&dword_1A66D3000, v52, OS_LOG_TYPE_ERROR, "Couldn't load audio unit for framework %@. Principle class '%@' does not conform to TTSFirstPartyAURegistrar. ", buf, 0x16u);
            }
          }
          unint64_t v0 = v43;
          uint64_t v16 = v42;
          uint64_t v24 = v41;
          uint64_t v23 = v55;
        }

        ++v25;
      }
      while (v23 != v25);
      uint64_t v23 = objc_msgSend_countByEnumeratingWithState_objects_count_(&unk_1EFB954B0, v19, (uint64_t)&v57, (uint64_t)v65, 16);
    }
    while (v23);
  }
}

void sub_1A670904C(uint64_t a1)
{
  CFDataRef v1 = *(void **)(a1 + 32);
  uint64_t v2 = objc_opt_class();
  objc_msgSend_componentCache(v2, v3, v4, v5, v6);
  id v10 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend__reconcileCachedComponents_(v1, v7, (uint64_t)v10, v8, v9);
}

uint64_t sub_1A670915C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__reloadVoiceForBundleIdentifierPrefix_, *(void *)(a1 + 40), a4, a5);
}

uint64_t sub_1A670921C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__reloadVoiceForBundleIdentifierHash_, *(void *)(a1 + 40), a4, a5);
}

uint64_t sub_1A67092F8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = objc_msgSend_bundleIdentifier(a2, (const char *)a2, a3, a4, a5);
  uint64_t v10 = objc_msgSend_hasPrefix_(v6, v7, *(void *)(a1 + 32), v8, v9) ^ 1;

  return v10;
}

BOOL sub_1A670944C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_msgSend_isFirstParty(v3, v4, v5, v6, v7))
  {
    uint64_t v12 = objc_msgSend_bundleIdentifier(v3, v8, v9, v10, v11);
  }
  else
  {
    id v17 = objc_msgSend_containerBundleIdentifier(v3, v8, v9, v10, v11);

    if (!v17)
    {
      BOOL v28 = 0;
      goto LABEL_7;
    }
    uint64_t v12 = objc_msgSend_containerBundleIdentifier(v3, v18, v19, v20, v21);
  }
  long long v22 = v12;
  uint64_t v23 = objc_msgSend_hash(v12, v13, v14, v15, v16);

  BOOL v28 = v23 != objc_msgSend_unsignedIntegerValue(*(void **)(a1 + 32), v24, v25, v26, v27);
LABEL_7:

  return v28;
}

uint64_t sub_1A6709570(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend__reconcileCachedComponents_(*(void **)(a1 + 32), a2, MEMORY[0x1E4F1CBF0], a4, a5);
}

void sub_1A6709CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a71, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1A6709D34(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v8 = v3;
  if (v3)
  {
    objc_msgSend_audioComponentDescription(v3, v4, v5, v6, v7);
  }
  else
  {
    v18[0] = 0;
    v18[1] = 0;
    int v19 = 0;
  }
  uint64_t v9 = AXNSStringFromAudioUnitComponentDescription((unsigned int *)v18, v4, v5, v6, v7);
  int v16 = objc_msgSend_containsObject_(*(void **)(a1 + 32), v10, (uint64_t)v9, v11, v12);
  if ((v16 & 1) == 0) {
    objc_msgSend_addObject_(*(void **)(a1 + 32), v13, (uint64_t)v9, v14, v15);
  }

  return v16 ^ 1u;
}

BOOL sub_1A6709DC8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  uint64_t v14 = MEMORY[0x1E4F143A8];
  uint64_t v15 = 3221225472;
  int v16 = sub_1A6709EBC;
  id v17 = &unk_1E5C69E08;
  uint64_t v18 = *(void *)(a1 + 32);
  id v5 = v3;
  id v19 = v5;
  uint64_t v12 = objc_msgSend_indexOfObjectPassingTest_(v4, v6, (uint64_t)&v14, v7, v8);
  if (v12 == 0x7FFFFFFFFFFFFFFFLL) {
    objc_msgSend_addObject_(*(void **)(a1 + 40), v9, (uint64_t)v5, v10, v11, v14, v15, v16, v17, v18);
  }
  else {
    objc_msgSend_removeObjectAtIndex_(*(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v9, v12, v10, v11, v14, v15, v16, v17, v18);
  }

  return v12 != 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t sub_1A6709EBC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v8 = objc_opt_class();
  if (v3)
  {
    objc_msgSend_audioComponentDescription(v3, v4, v5, v6, v7);
  }
  else
  {
    v27[0] = 0;
    v27[1] = 0;
    int v28 = 0;
  }
  uint64_t v9 = *(void **)(a1 + 40);
  if (v9)
  {
    objc_msgSend_componentDescription(v9, v4, v5, v6, v7);
  }
  else
  {
    v25[0] = 0;
    v25[1] = 0;
    int v26 = 0;
  }
  if (objc_msgSend__componentIsEqual_to_(v8, v4, (uint64_t)v27, (uint64_t)v25, v7))
  {
    uint64_t v14 = objc_msgSend_versionString(v3, v10, v11, v12, v13);
    id v19 = objc_msgSend_version(*(void **)(a1 + 40), v15, v16, v17, v18);
    uint64_t isEqualToString = objc_msgSend_isEqualToString_(v14, v20, (uint64_t)v19, v21, v22);
  }
  else
  {
    uint64_t isEqualToString = 0;
  }

  return isEqualToString;
}

TTSSynthesisProviderComponentRecord *sub_1A6709F94(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v7 = objc_alloc_init(TTSSynthesisProviderComponentRecord);
  if (v2)
  {
    objc_msgSend_audioComponentDescription(v2, v3, v4, v5, v6);
  }
  else
  {
    long long v19 = 0uLL;
    int v20 = 0;
  }
  long long v17 = v19;
  int v18 = v20;
  objc_msgSend_setComponentDescription_(v7, v3, (uint64_t)&v17, v5, v6);
  uint64_t v12 = objc_msgSend_versionString(v2, v8, v9, v10, v11);
  objc_msgSend_setVersion_(v7, v13, (uint64_t)v12, v14, v15);

  return v7;
}

BOOL sub_1A670A048(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v8 = objc_msgSend_bundleIdentifier(v3, v4, v5, v6, v7);

  if (!v8) {
    objc_msgSend_addObject_(*(void **)(a1 + 32), v9, (uint64_t)v3, v10, v11);
  }

  return v8 != 0;
}

void sub_1A670A2A4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v66 = 0;
  uint64_t v6 = (uint64_t *)(a1 + 40);
  uint64_t v7 = 1;
  uint64_t v8 = 5;
  do
  {
    if (objc_msgSend__loadVoicesForComponentWithTimeout_timeout_timedOut_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), (uint64_t)&v66, a5, (double)v7 * 15.0))
    {
      char v66 = 0;
      goto LABEL_17;
    }
    objc_msgSend_sleepForTimeInterval_(MEMORY[0x1E4F29060], v9, v10, v11, v12, (double)v8);
    ++v7;
    v8 += 5;
  }
  while (v7 != 4);
  AXTTSLogCommon();
  uint64_t v13 = (char *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled((os_log_t)v13, OS_LOG_TYPE_ERROR)) {
    sub_1A688E174(v6, v13, v14, v15, v16);
  }

  if (!*v6)
  {
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    int v65 = 0;
LABEL_11:
    if (!v66) {
      goto LABEL_17;
    }
    goto LABEL_12;
  }
  objc_msgSend_componentDescription((void *)*v6, v17, v18, v19, v20);
  if (v64 != 1634758764) {
    goto LABEL_11;
  }
LABEL_12:
  uint64_t v21 = objc_opt_class();
  int v26 = objc_msgSend_componentCache(v21, v22, v23, v24, v25);
  uint64_t v58 = MEMORY[0x1E4F143A8];
  uint64_t v59 = 3221225472;
  long long v60 = sub_1A670A4D4;
  uint64_t v61 = &unk_1E5C69DB8;
  id v62 = *(id *)(a1 + 40);
  uint64_t v30 = objc_msgSend_indexOfObjectPassingTest_(v26, v27, (uint64_t)&v58, v28, v29);

  if (v30 != 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v31 = objc_opt_class();
    uint64_t v36 = objc_msgSend_componentCache(v31, v32, v33, v34, v35, v58, v59, v60, v61);
    int64_t v40 = objc_msgSend_objectAtIndex_(v36, v37, v30, v38, v39);

    UniChar v45 = objc_msgSend_voices(v40, v41, v42, v43, v44);
    objc_msgSend_setVoices_(*(void **)(a1 + 40), v46, (uint64_t)v45, v47, v48);

    int64_t v53 = objc_msgSend_bundleIdentifier(v40, v49, v50, v51, v52);
    objc_msgSend_setBundleIdentifier_(*(void **)(a1 + 40), v54, (uint64_t)v53, v55, v56);

    long long v57 = AXTTSLogCommon();
    if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG)) {
      sub_1A688E0F8(v6, v57);
    }
  }
LABEL_17:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

BOOL sub_1A670A4D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v8 = v3;
  if (v3)
  {
    objc_msgSend_componentDescription(v3, v4, v5, v6, v7);
    int v9 = v20;
  }
  else
  {
    int v9 = 0;
  }
  uint64_t v10 = *(void **)(a1 + 32);
  if (v10)
  {
    objc_msgSend_componentDescription(v10, v4, v5, v6, v7);
    int v11 = v19;
  }
  else
  {
    int v11 = 0;
  }
  if (v9 == v11)
  {
    if (v8)
    {
      objc_msgSend_componentDescription(v8, v4, v5, v6, v7);
      int v12 = v18;
    }
    else
    {
      int v12 = 0;
    }
    uint64_t v14 = *(void **)(a1 + 32);
    if (v14)
    {
      objc_msgSend_componentDescription(v14, v4, v5, v6, v7);
      int v15 = v17;
    }
    else
    {
      int v15 = 0;
    }
    BOOL v13 = v12 == v15;
  }
  else
  {
    BOOL v13 = 0;
  }

  return v13;
}

void sub_1A670A7AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1A670A7D4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v163 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  int v11 = v6;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24)) {
    goto LABEL_32;
  }
  if (!v6)
  {
    uint64_t v13 = objc_msgSend_AUAudioUnit(v5, v7, v8, v9, v10);
    uint64_t v18 = objc_msgSend_remoteProcessIdentifier(v13, v14, v15, v16, v17);
    if (!v18)
    {
      uint64_t v81 = AXTTSLogCommon();
      if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
      {
        uint64_t v147 = *(void **)(a1 + 40);
        if (v147)
        {
          objc_msgSend_componentDescription(v147, v82, v83, v84, v85);
        }
        else
        {
          v157[0] = 0;
          v157[1] = 0;
          int v158 = 0;
        }
        uint64_t v148 = AXNSStringFromAudioUnitComponentDescription((unsigned int *)v157, v82, v83, v84, v85);
        *(_DWORD *)buf = 138412546;
        unint64_t v160 = v13;
        __int16 v161 = 2112;
        uint64_t v162 = v148;
        _os_log_error_impl(&dword_1A66D3000, v81, OS_LOG_TYPE_ERROR, "VoiceProvider could not retrieve remote pid %@, subtype: %@", buf, 0x16u);
      }
      *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 1;
      dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
      goto LABEL_31;
    }
    uint64_t v23 = v18;
    uint64_t v24 = objc_msgSend_defaultManager(MEMORY[0x1E4F91498], v19, v20, v21, v22);
    uint64_t v28 = objc_msgSend_informationForPlugInWithPid_(v24, v25, v23, v26, v27);

    uint64_t v32 = objc_msgSend_objectForKey_(v28, v29, *MEMORY[0x1E4F914C8], v30, v31);
    uint64_t v36 = objc_msgSend_objectForKey_(v28, v33, *MEMORY[0x1E4F914C0], v34, v35);
    uint64_t v37 = objc_opt_class();
    uint64_t HasEntitlement_entitlement = objc_msgSend_synthesizerHasEntitlement_entitlement_(v37, v38, (uint64_t)v13, kTTSFirstPartySynthEntitlement, v39);
    uint64_t v149 = v13;
    uint64_t v150 = v36;
    if (HasEntitlement_entitlement)
    {
      uint64_t v41 = [TTSAUMessagingHost alloc];
      uint64_t v46 = objc_msgSend_AUAudioUnit(v5, v42, v43, v44, v45);
      uint64_t v50 = objc_msgSend_messageChannelFor_(v46, v47, @"aapl", v48, v49);
      long long v54 = v28;
      uint64_t v55 = v32;
      uint64_t v56 = objc_msgSend_initWithMessageChannel_(v41, v51, (uint64_t)v50, v52, v53);

      uint64_t v61 = objc_msgSend_requireFirstUnlockForVoiceLoad(v56, v57, v58, v59, v60);
      char v66 = objc_msgSend_BOOLValue(v61, v62, v63, v64, v65);

      uint64_t v71 = objc_msgSend_voicesExternallyManaged(v56, v67, v68, v69, v70);
      int v76 = objc_msgSend_BOOLValue(v71, v72, v73, v74, v75);

      uint64_t v32 = v55;
      uint64_t v28 = v54;
      uint64_t v13 = v149;
      if (MKBDeviceUnlockedSinceBoot() || (v66 & 1) == 0)
      {
        if (v76)
        {
LABEL_22:
          uint64_t v102 = objc_msgSend_voices(*(void **)(a1 + 40), v77, v78, v79, v80);
          long long v103 = (void *)v102;
          long long v104 = (void *)MEMORY[0x1E4F1CBF0];
          if (v102) {
            long long v104 = (void *)v102;
          }
          id v90 = v104;

          goto LABEL_25;
        }
LABEL_15:
        objc_msgSend_speechVoices(v13, v77, v78, v79, v80);
        id v90 = (id)objc_claimAutoreleasedReturnValue();
        if (!v90)
        {
          id v91 = AXTTSLogCommon();
          if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR)) {
            sub_1A688E410(a1, v91, v92, v93, v94, v95, v96, v97);
          }

          *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 1;
          dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
          int64_t v98 = (void *)v150;
          goto LABEL_30;
        }
LABEL_25:
        if (HasEntitlement_entitlement)
        {
          long long v105 = NSNumber;
          objc_msgSend_parameterTree(v13, v86, v87, v88, v89);
          long long v106 = v28;
          long long v108 = v107 = v32;
          long long v113 = objc_msgSend_allParameters(v108, v109, v110, v111, v112);
          uint64_t v118 = objc_msgSend_count(v113, v114, v115, v116, v117);
          uint64_t v122 = objc_msgSend_numberWithUnsignedInteger_(v105, v119, v118, v120, v121);
          objc_msgSend_setParameterCount_(*(void **)(a1 + 40), v123, (uint64_t)v122, v124, v125);

          uint64_t v32 = v107;
          uint64_t v28 = v106;
          uint64_t v13 = v149;
        }
        CFRange v126 = objc_msgSend_ax_arrayByRemovingDuplicates(v90, v86, v87, v88, v89);

        v151[0] = MEMORY[0x1E4F143A8];
        v151[1] = 3221225472;
        v151[2] = sub_1A670AD18;
        v151[3] = &unk_1E5C69EA0;
        id v152 = v5;
        id v127 = v32;
        id v153 = v127;
        char v155 = HasEntitlement_entitlement;
        id v154 = *(id *)(a1 + 40);
        uint64_t v131 = objc_msgSend_ax_mappedArrayUsingBlock_(v126, v128, (uint64_t)v151, v129, v130);

        objc_msgSend_setIsFirstParty_(*(void **)(a1 + 40), v132, HasEntitlement_entitlement, v133, v134);
        objc_msgSend_setBundleIdentifier_(*(void **)(a1 + 40), v135, (uint64_t)v127, v136, v137);
        int64_t v98 = (void *)v150;
        objc_msgSend_setContainerBundleIdentifier_(*(void **)(a1 + 40), v138, v150, v139, v140);
        objc_msgSend_setVoices_(*(void **)(a1 + 40), v141, (uint64_t)v131, v142, v143);
        uint64_t v144 = AXTTSLogCommon();
        if (os_log_type_enabled(v144, OS_LOG_TYPE_DEBUG)) {
          sub_1A688E298(v131, (const char *)v127, v144, v145, v146);
        }

        dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
LABEL_30:

LABEL_31:
        goto LABEL_32;
      }
    }
    else if (MKBDeviceUnlockedSinceBoot())
    {
      goto LABEL_15;
    }
    uint64_t v99 = AXTTSLogCommon();
    if (os_log_type_enabled(v99, OS_LOG_TYPE_DEBUG)) {
      sub_1A688E358(a1, (uint64_t)v156, v99, v100, v101);
    }

    goto LABEL_22;
  }
  int v12 = AXTTSLogCommon();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
    sub_1A688E480();
  }

  *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 1;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
LABEL_32:
}

id sub_1A670AD18(uint64_t a1, void *a2)
{
  id v7 = a2;
  uint64_t v8 = *(void **)(a1 + 32);
  if (v8)
  {
    objc_msgSend_audioComponentDescription(v8, v3, v4, v5, v6);
  }
  else
  {
    long long v43 = 0uLL;
    int v44 = 0;
  }
  long long v41 = v43;
  int v42 = v44;
  objc_msgSend_setAuComponentDesc_(v7, v3, (uint64_t)&v41, v5, v6);
  uint64_t v13 = objc_msgSend_manufacturerName(*(void **)(a1 + 32), v9, v10, v11, v12);
  objc_msgSend_setManufacturerName_(v7, v14, (uint64_t)v13, v15, v16);

  objc_msgSend_setSynthesizerBundleIdentifier_(v7, v17, *(void *)(a1 + 40), v18, v19);
  objc_msgSend_setIsFirstParty_(v7, v20, *(unsigned __int8 *)(a1 + 56), v21, v22);
  if (objc_msgSend_isFirstParty(v7, v23, v24, v25, v26))
  {
    uint64_t v31 = objc_msgSend_parameterCount(*(void **)(a1 + 48), v27, v28, v29, v30);
    BOOL v36 = (int)objc_msgSend_intValue(v31, v32, v33, v34, v35) > 0;
    objc_msgSend_setHasPerVoiceSettings_(v7, v37, v36, v38, v39);
  }
  else
  {
    objc_msgSend_setHasPerVoiceSettings_(v7, v27, 0, v29, v30);
  }

  return v7;
}

void sub_1A670AEF0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_msgSend_registerFirstPartyInProcessAudioUnits(TTSSynthesisProviderVoiceManager, a2, a3, a4, a5);
  dispatch_semaphore_t v10 = dispatch_semaphore_create(0);
  uint64_t v29 = 0;
  uint64_t v30 = &v29;
  uint64_t v31 = 0x2020000000;
  char v32 = 0;
  uint64_t v11 = (void *)MEMORY[0x1E4F15408];
  uint64_t v12 = *(void **)(a1 + 32);
  if (v12)
  {
    objc_msgSend_auComponentDesc(v12, v6, v7, v8, v9);
  }
  else
  {
    v27[0] = 0;
    v27[1] = 0;
    int v28 = 0;
  }
  v23[0] = MEMORY[0x1E4F143A8];
  v23[1] = 3221225472;
  v23[2] = sub_1A670B0AC;
  v23[3] = &unk_1E5C69EF0;
  uint64_t v26 = &v29;
  id v13 = *(id *)(a1 + 48);
  uint64_t v14 = *(void *)(a1 + 40);
  id v25 = v13;
  v23[4] = v14;
  uint64_t v15 = v10;
  uint64_t v24 = v15;
  objc_msgSend_instantiateWithComponentDescription_options_completionHandler_(v11, v16, (uint64_t)v27, 1, (uint64_t)v23);
  dispatch_time_t v17 = dispatch_time(0, 10000000000);
  intptr_t v18 = dispatch_semaphore_wait(v15, v17);
  *((unsigned char *)v30 + 24) = v18 != 0;
  if (v18)
  {
    uint64_t v21 = *(void *)(a1 + 48);
    uint64_t v22 = objc_msgSend_ax_errorWithDomain_description_(MEMORY[0x1E4F28C58], v19, @"TTSErrorDomain", @"Timed out instantiating audio unit", v20);
    (*(void (**)(uint64_t, void, void, void *))(v21 + 16))(v21, 0, 0, v22);
  }
  _Block_object_dispose(&v29, 8);
}

void sub_1A670B094(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1A670B0AC(uint64_t a1, void *a2, void *a3)
{
  id v22 = a2;
  id v5 = a3;
  uint64_t v6 = v5;
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
  {
    if (v5)
    {
      (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    }
    else
    {
      uint64_t v7 = objc_opt_class();
      uint64_t v12 = objc_msgSend_AUAudioUnit(v22, v8, v9, v10, v11);
      uint64_t HasEntitlement_entitlement = objc_msgSend_synthesizerHasEntitlement_entitlement_(v7, v13, (uint64_t)v12, kTTSFirstPartySynthEntitlement, v14);

      uint64_t v16 = *(void *)(a1 + 48);
      uint64_t v21 = objc_msgSend_AUAudioUnit(v22, v17, v18, v19, v20);
      (*(void (**)(uint64_t, void *, uint64_t, void))(v16 + 16))(v16, v21, HasEntitlement_entitlement, 0);

      dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
    }
  }
}

void *sub_1A670B50C(void *a1, uint64_t a2, void *a3, size_t a4, uint64_t a5)
{
  size_t v14 = 0;
  id v8 = a1;
  uint64_t v11 = (const void *)objc_msgSend_decodeBytesForKey_returnedLength_(v8, v9, a5, (uint64_t)&v14, v10);
  if (v14 >= a4) {
    size_t v12 = a4;
  }
  else {
    size_t v12 = v14;
  }
  return memcpy(a3, v11, v12);
}

uint64_t sub_1A670B570(void *a1, const char *a2, uint64_t a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7)
{
  v8[0] = a4;
  v8[1] = a5;
  v8[2] = a6;
  v8[3] = a7;
  return objc_msgSend_tts_encodeBytes_size_forKey_(a1, a2, (uint64_t)v8, 64, a3);
}

double sub_1A670B5A4(void *a1, const char *a2, uint64_t a3)
{
  memset(v4, 0, sizeof(v4));
  objc_msgSend_tts_decodeBytesIntoObject_size_forKey_(a1, a2, (uint64_t)v4, 64, a3);
  return *(double *)v4;
}

uint64_t sub_1A670B5E4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1A670B5F4(uint64_t a1)
{
}

void sub_1A670B644(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = AXTTSLogResourceManager();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v15 = 138412290;
    uint64_t v16 = a3;
    _os_log_impl(&dword_1A66D3000, v4, OS_LOG_TYPE_INFO, "Received notification: %@. Will reset in-memory resources", (uint8_t *)&v15, 0xCu);
  }

  uint64_t v9 = objc_msgSend_sharedInstance(TTSAXResourceManager, v5, v6, v7, v8);
  size_t v14 = objc_msgSend_assetLoadingQueue(v9, v10, v11, v12, v13);
  dispatch_async(v14, &unk_1EFB7E418);
}

void sub_1A670B844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1A670B85C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = objc_msgSend__resources(*(void **)(a1 + 32), a2, a3, a4, a5);

  if (!v6)
  {
    uint64_t v11 = objc_msgSend__readResourcesFromPreferences(*(void **)(a1 + 32), v7, v8, v9, v10);
    uint64_t v12 = AXTTSLogResourceManager();
    BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_INFO);
    BOOL v14 = v13;
    if (v11)
    {

      if (v14)
      {
        int v15 = AXTTSLogResourceManager();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          uint64_t v19 = (void *)*(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
          uint64_t v20 = objc_msgSend__debugCountSummaryForResources_(*(void **)(a1 + 32), v16, (uint64_t)v11, v17, v18);
          int v60 = 134218242;
          uint64_t v61 = v19;
          __int16 v62 = 2112;
          uint64_t v63 = v20;
          _os_log_impl(&dword_1A66D3000, v15, OS_LOG_TYPE_INFO, "Requesting resources. waitForInstalledAssets=%ld. Found resources in cache: %@", (uint8_t *)&v60, 0x16u);
        }
      }
      id v21 = v11;
    }
    else
    {
      if (v13)
      {
        id v22 = (void *)*(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
        int v60 = 134217984;
        uint64_t v61 = v22;
        _os_log_impl(&dword_1A66D3000, v12, OS_LOG_TYPE_INFO, "Requesting resources. waitForInstalledAssets=%ld. No resources found in cache. Setting resources to on-disk resources for maui/macintalk/legacy", (uint8_t *)&v60, 0xCu);
      }

      objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v23, v24, v25, v26);
      id v21 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v30 = objc_msgSend_bundleWithPath_(MEMORY[0x1E4F28B50], v27, @"/System/Library/PrivateFrameworks/TextToSpeechMauiSupport.framework", v28, v29);
      uint64_t v33 = v30;
      if (v30)
      {
        uint64_t v34 = *(void **)(a1 + 32);
        uint64_t v35 = objc_msgSend_pathForResource_ofType_(v30, v31, @"TTSResources", 0, v32);
        uint64_t v39 = objc_msgSend__findLocalResourcesForPath_(v34, v36, (uint64_t)v35, v37, v38);
        objc_msgSend_addEntriesFromDictionary_(v21, v40, (uint64_t)v39, v41, v42);
      }
      long long v43 = AXTTSLogResourceManager();
      BOOL v44 = os_log_type_enabled(v43, OS_LOG_TYPE_INFO);

      if (v44)
      {
        uint64_t v45 = AXTTSLogResourceManager();
        if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
        {
          uint64_t v49 = objc_msgSend__debugCountSummaryForResources_(*(void **)(a1 + 32), v46, (uint64_t)v21, v47, v48);
          int v60 = 138412290;
          uint64_t v61 = v49;
          _os_log_impl(&dword_1A66D3000, v45, OS_LOG_TYPE_INFO, "Requesting resources. Found locally available resources: %@", (uint8_t *)&v60, 0xCu);
        }
      }
    }
    if ((TTSIsBaseSystem() & 1) == 0)
    {
      long long v54 = objc_msgSend__getSynthesisProviderResources(*(void **)(a1 + 32), v50, v51, v52, v53);
      objc_msgSend_setObject_forKey_(v21, v55, (uint64_t)v54, @"SynthesizerExtension", v56);
    }
    objc_msgSend__updateCachedResources_locked_(*(void **)(a1 + 32), v50, (uint64_t)v21, v52, v53);
    objc_msgSend__mergeInExpensiveInstalledAssets_locked_notifyObservers_(*(void **)(a1 + 32), v57, *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), v11 == 0, v58);
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1A670C3E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A670C40C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  BOOL v13 = objc_msgSend__resources(*(void **)(a1 + 32), v5, v6, v7, v8);
  if (v13)
  {
    BOOL v14 = objc_msgSend__resources(WeakRetained, v9, v10, v11, v12);
    objc_msgSend__mergeInResources_to_(WeakRetained, v15, (uint64_t)v3, (uint64_t)v14, v16);

    uint64_t v17 = AXTTSLogResourceManager();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl(&dword_1A66D3000, v17, OS_LOG_TYPE_INFO, "Updating cache after computing expensive resources", v29, 2u);
    }

    objc_msgSend__updateCachedResources_locked_(*(void **)(a1 + 32), v18, (uint64_t)v13, v19, v20);
    if (!*(unsigned char *)(a1 + 48) && *(unsigned char *)(a1 + 49))
    {
      objc_msgSend_setAllAvailableLanguages_(WeakRetained, v21, 0, v22, v23);
      objc_msgSend__notifyObserversOfCacheUpdate(WeakRetained, v24, v25, v26, v27);
    }
  }
  else
  {
    uint64_t v28 = AXTTSLogResourceManager();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
      sub_1A688E69C();
    }
  }
}

void sub_1A670C53C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = objc_msgSend__expensiveResources(*(void **)(a1 + 32), a2, a3, a4, a5);
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  void v13[2] = sub_1A670C5F4;
  v13[3] = &unk_1E5C6A008;
  uint64_t v7 = *(void **)(a1 + 32);
  id v8 = *(id *)(a1 + 40);
  id v14 = v6;
  id v15 = v8;
  id v9 = v6;
  objc_msgSend__accessResourceCache_(v7, v10, (uint64_t)v13, v11, v12);
}

uint64_t sub_1A670C5F4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1A670CF08(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = *(id *)(a1 + 32);
  id v4 = v3;
  AXPerformBlockAsynchronouslyOnMainThread();
}

uint64_t sub_1A670CFB0(uint64_t a1)
{
  uint64_t result = objc_opt_respondsToSelector();
  if (result)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    return MEMORY[0x1F4181798](v4, sel_finishedDownloadingResource_wasCancelled_, v5, 1, v3);
  }
  return result;
}

void sub_1A670D13C(uint64_t a1)
{
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = sub_1A670D1F4;
  _DWORD v6[3] = &unk_1E5C6A058;
  uint64_t v1 = *(void **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  objc_msgSend__performBlockOnObservers_(v1, v2, (uint64_t)v6, v3, v4);
  uint64_t v5 = AXTTSLogResourceManager();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
    sub_1A688E7E0();
  }
}

void sub_1A670D1F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = *(id *)(a1 + 32);
  id v4 = v3;
  AXPerformBlockAsynchronouslyOnMainThread();
}

uint64_t sub_1A670D29C(uint64_t a1)
{
  uint64_t result = objc_opt_respondsToSelector();
  if (result)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    return MEMORY[0x1F4181798](v4, sel_finishedDownloadingResource_wasCancelled_, v5, 1, v3);
  }
  return result;
}

void sub_1A670D4E4()
{
  unint64_t v0 = AXTTSLogResourceManager();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEBUG)) {
    sub_1A688E924();
  }
}

void sub_1A670D74C(uint64_t a1, int a2, void *a3, double a4)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  id v8 = AXTTSLogResourceManager();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v13 = objc_msgSend_voiceId(*(void **)(a1 + 32), v9, v10, v11, v12);
    *(_DWORD *)buf = 138543618;
    uint64_t v30 = v13;
    __int16 v31 = 2050;
    double v32 = a4;
    _os_log_impl(&dword_1A66D3000, v8, OS_LOG_TYPE_DEFAULT, "Siri asset download progress: %{public}@ %{public}f", buf, 0x16u);
  }
  v25[0] = MEMORY[0x1E4F143A8];
  v25[1] = 3221225472;
  void v25[2] = sub_1A670D928;
  v25[3] = &unk_1E5C6A0F8;
  id v14 = *(void **)(a1 + 40);
  id v26 = *(id *)(a1 + 32);
  double v28 = a4;
  id v27 = *(id *)(a1 + 48);
  objc_msgSend__performBlockOnObservers_(v14, v15, (uint64_t)v25, v16, v17);
  if (a2)
  {
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 3221225472;
    v22[2] = sub_1A670DA90;
    v22[3] = &unk_1E5C6A120;
    uint64_t v18 = *(void **)(a1 + 40);
    id v23 = *(id *)(a1 + 32);
    id v24 = v7;
    objc_msgSend__performBlockOnObservers_(v18, v19, (uint64_t)v22, v20, v21);
  }
}

void sub_1A670D928(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = *(id *)(a1 + 32);
  id v6 = *(id *)(a1 + 40);
  id v4 = v3;
  AXPerformBlockAsynchronouslyOnMainThread();
}

void sub_1A670D9EC(uint64_t a1)
{
  if (objc_opt_respondsToSelector())
  {
    id v6 = *(void **)(a1 + 32);
    objc_msgSend_voiceId(*(void **)(a1 + 40), v2, v3, v4, v5);
    id v15 = (id)objc_claimAutoreleasedReturnValue();
    float v7 = *(double *)(a1 + 56);
    uint64_t v12 = objc_msgSend_fileSize(*(void **)(a1 + 48), v8, v9, v10, v11);
    *(float *)&double v13 = v7;
    objc_msgSend_downloadProgressForVoiceId_progress_storageSize_requiredDiskSpace_(v6, v14, (uint64_t)v15, v12, 1, v13);
  }
}

void sub_1A670DA90(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = *(id *)(a1 + 32);
  id v6 = *(id *)(a1 + 40);
  id v4 = v3;
  AXPerformBlockAsynchronouslyOnMainThread();
}

uint64_t sub_1A670DB4C(void *a1)
{
  uint64_t result = objc_opt_respondsToSelector();
  if (result)
  {
    uint64_t v4 = a1[4];
    uint64_t v5 = a1[5];
    BOOL v6 = a1[6] != 0;
    return MEMORY[0x1F4181798](v4, sel_finishedDownloadingResource_wasCancelled_, v5, v6, v3);
  }
  return result;
}

void sub_1A670DE80()
{
  unint64_t v0 = AXTTSLogResourceManager();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl(&dword_1A66D3000, v0, OS_LOG_TYPE_INFO, "Speech sample DL: Samples started download.", v1, 2u);
  }
}

void sub_1A670E1E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = *(id *)(a1 + 32);
  id v4 = v3;
  AXPerformBlockAsynchronouslyOnMainThread();
}

uint64_t sub_1A670E28C(uint64_t a1)
{
  uint64_t result = objc_opt_respondsToSelector();
  if (result)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    return MEMORY[0x1F4181798](v5, sel_finishedDeletingResource_, v6, v3, v4);
  }
  return result;
}

void sub_1A670E434(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = *(id *)(a1 + 32);
  id v4 = v3;
  AXPerformBlockAsynchronouslyOnMainThread();
}

uint64_t sub_1A670E4DC(uint64_t a1)
{
  uint64_t result = objc_opt_respondsToSelector();
  if (result)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    return MEMORY[0x1F4181798](v5, sel_finishedDeletingResource_, v6, v3, v4);
  }
  return result;
}

void sub_1A670E6B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A670E6CC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(void *)(a1 + 56);
  float v7 = objc_msgSend__resources(*(void **)(a1 + 32), a2, a3, a4, a5);
  uint64_t v12 = v7;
  if (v6 == 1)
  {
    double v13 = objc_msgSend_allValues(v7, v8, v9, v10, v11);
    objc_msgSend_valueForKeyPath_(v13, v14, @"@unionOfArrays.self", v15, v16);
  }
  else
  {
    double v13 = TTSStringForResourceType(*(void *)(a1 + 56));
    objc_msgSend_objectForKey_(v12, v17, (uint64_t)v13, v18, v19);
  uint64_t v20 = };

  v31[0] = MEMORY[0x1E4F143A8];
  v31[1] = 3221225472;
  v31[2] = sub_1A670E810;
  v31[3] = &unk_1E5C6A190;
  long long v33 = *(_OWORD *)(a1 + 56);
  id v32 = *(id *)(a1 + 40);
  id v24 = objc_msgSend_ax_filteredArrayUsingBlock_(v20, v21, (uint64_t)v31, v22, v23);
  id v25 = objc_alloc(MEMORY[0x1E4F1C978]);
  uint64_t v28 = objc_msgSend_initWithArray_copyItems_(v25, v26, (uint64_t)v24, 1, v27);
  uint64_t v29 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v30 = *(void **)(v29 + 40);
  *(void *)(v29 + 40) = v28;
}

BOOL sub_1A670E810(uint64_t *a1, void *a2)
{
  id v3 = a2;
  if (objc_msgSend_type(v3, v4, v5, v6, v7) == 3)
  {
    uint64_t v12 = objc_msgSend_sharedInstance(TTSAXResourceMigrationUtilities, v8, v9, v10, v11);
    uint64_t v17 = objc_msgSend_obsoleteVoicesWithReplacements(v12, v13, v14, v15, v16);
    uint64_t v22 = objc_msgSend_voiceId(v3, v18, v19, v20, v21);
    uint64_t v27 = objc_msgSend_lowercaseString(v22, v23, v24, v25, v26);
    __int16 v31 = objc_msgSend_objectForKeyedSubscript_(v17, v28, (uint64_t)v27, v29, v30);

    if (v31) {
      goto LABEL_6;
    }
  }
  uint64_t v32 = a1[5];
  if (v32)
  {
    if (v32 == 1)
    {
      if (objc_msgSend_type(v3, v8, v9, v10, v11) == 6)
      {
LABEL_6:
        BOOL v37 = 0;
        goto LABEL_21;
      }
      BOOL v37 = objc_msgSend_type(v3, v33, v34, v35, v36) != 7;
    }
    else
    {
      BOOL v37 = objc_msgSend_type(v3, v8, v9, v10, v11) == a1[5];
    }
  }
  else
  {
    BOOL v37 = 1;
  }
  uint64_t v38 = a1[6];
  if (v38 && v37) {
    BOOL v37 = v38 == 1 || objc_msgSend_subtype(v3, v8, v9, v10, v11) == a1[6];
  }
  uint64_t v39 = (void *)a1[4];
  if (v39 && v37)
  {
    if ((unint64_t)objc_msgSend_length(v39, v8, v9, v10, v11) < 3)
    {
      BOOL v44 = objc_msgSend_primaryLanguage(v3, v40, v41, v42, v43);
      uint64_t v48 = objc_msgSend_containsString_(v44, v49, a1[4], v50, v51);
    }
    else
    {
      BOOL v44 = objc_msgSend_languages(v3, v40, v41, v42, v43);
      uint64_t v48 = objc_msgSend_containsObject_(v44, v45, a1[4], v46, v47);
    }
    BOOL v37 = v48;
  }
LABEL_21:

  return v37;
}

void sub_1A670E9F0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_msgSend__locked_ResourceWithVoiceId_assetId_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), *(void *)(a1 + 48), a5);
  id v13 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v10 = objc_msgSend_copy(v13, v6, v7, v8, v9);
  uint64_t v11 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v10;
}

uint64_t sub_1A670EBD4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = objc_msgSend_speechVoice(a2, (const char *)a2, a3, a4, a5);
  uint64_t isDefault = objc_msgSend_isDefault(v5, v6, v7, v8, v9);

  return isDefault;
}

BOOL sub_1A670ED30(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v8 = objc_msgSend_name(v3, v4, v5, v6, v7);
  id v13 = objc_msgSend_lowercaseString(v8, v9, v10, v11, v12);
  uint64_t v18 = objc_msgSend_lowercaseString(*(void **)(a1 + 32), v14, v15, v16, v17);
  if (objc_msgSend_containsString_(v13, v19, (uint64_t)v18, v20, v21)) {
    BOOL v26 = objc_msgSend_type(v3, v22, v23, v24, v25) == *(void *)(a1 + 40);
  }
  else {
    BOOL v26 = 0;
  }

  return v26;
}

uint64_t sub_1A670F61C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = objc_msgSend_identifier(a2, (const char *)a2, a3, a4, a5);
  uint64_t v11 = objc_msgSend_lowercaseString(v6, v7, v8, v9, v10);
  uint64_t v16 = objc_msgSend_lowercaseString(*(void **)(a1 + 32), v12, v13, v14, v15);
  uint64_t isEqualToString = objc_msgSend_isEqualToString_(v11, v17, (uint64_t)v16, v18, v19);

  return isEqualToString;
}

void sub_1A670FA24(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = objc_msgSend_primaryLanguage(*(void **)(a1 + 32), a2, a3, a4, a5);
  uint64_t v10 = objc_msgSend_convertTTSLanguageCodeToSiriLanguageCode_(TTSSiriAssetManager, v7, (uint64_t)v6, v8, v9);

  id v11 = objc_alloc(MEMORY[0x1E4FA4F68]);
  uint64_t v16 = objc_msgSend_name(*(void **)(a1 + 32), v12, v13, v14, v15);
  uint64_t v19 = objc_msgSend_initWithLanguage_name_(v11, v17, (uint64_t)v10, (uint64_t)v16, v18);

  id v20 = objc_alloc(MEMORY[0x1E4FA4F48]);
  uint64_t v23 = objc_msgSend_initWithVoice_previewType_(v20, v21, (uint64_t)v19, 2, v22);
  uint64_t v32 = objc_msgSend_previewAudioURL(v23, v24, v25, v26, v27);
  if (v32)
  {
    uint64_t v33 = *(void *)(a1 + 48);
    uint64_t v34 = objc_msgSend_previewAudioURL(v23, v28, v29, v30, v31);
    (*(void (**)(uint64_t, void *))(v33 + 16))(v33, v34);
  }
  else
  {
    uint64_t v35 = AXTTSLogResourceManager();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
      sub_1A688EBCC();
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

uint64_t sub_1A670FEF0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend_isInstalled(a2, (const char *)a2, a3, a4, a5);
}

uint64_t sub_1A670FF70(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend_language(a2, (const char *)a2, a3, a4, a5);
}

BOOL sub_1A6710084(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend_footprint(a2, (const char *)a2, a3, a4, a5) == 2;
}

uint64_t sub_1A67100A8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend_primaryLanguage(a2, (const char *)a2, a3, a4, a5);
}

uint64_t sub_1A6710530(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_msgSend_set_resources_(*(void **)(a1 + 32), a2, 0, a4, a5);
  objc_msgSend_set_resourcesById_(*(void **)(a1 + 32), v6, 0, v7, v8);
  uint64_t v12 = *(void **)(a1 + 32);

  return objc_msgSend_set_resourcesByAssetId_(v12, v9, 0, v10, v11);
}

void sub_1A6710634(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v2 = v3;
  AXPerformBlockAsynchronouslyOnMainThread();
}

uint64_t sub_1A67106C0(uint64_t a1)
{
  uint64_t result = objc_opt_respondsToSelector();
  if (result)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    return MEMORY[0x1F4181798](v6, sel_resourceCacheDidReceiveUpdate, v3, v4, v5);
  }
  return result;
}

void sub_1A6710714(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_msgSend_defaultCenter(MEMORY[0x1E4F28EB8], a2, a3, a4, a5);
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_postNotificationName_object_(v7, v5, *MEMORY[0x1E4F15278], 0, v6);
}

void sub_1A6710B5C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_msgSend__resourcesByAssetId(*(void **)(a1 + 32), a2, a3, a4, a5);
  id v14 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v11 = objc_msgSend_assetId(*(void **)(a1 + 48), v7, v8, v9, v10);
  objc_msgSend_setObject_forKey_(v14, v12, v6, (uint64_t)v11, v13);
}

void sub_1A6710D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A6710DA0(uint64_t a1)
{
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = sub_1A6710E40;
  v8[3] = &unk_1E5C6A308;
  id v2 = *(void **)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 32);
  id v9 = v3;
  uint64_t v10 = v4;
  uint64_t v11 = *(void *)(a1 + 48);
  char v12 = *(unsigned char *)(a1 + 56);
  objc_msgSend__accessResourceCache_(v2, v5, (uint64_t)v8, v6, v7);
}

void sub_1A6710E40(uint64_t a1)
{
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  long long v88 = 0u;
  long long v89 = 0u;
  long long v90 = 0u;
  long long v91 = 0u;
  obuint64_t j = *(id *)(a1 + 32);
  uint64_t v81 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v2, (uint64_t)&v88, (uint64_t)v93, 16);
  if (!v81) {
    goto LABEL_24;
  }
  uint64_t v80 = *(void *)v89;
  do
  {
    uint64_t v6 = 0;
    do
    {
      if (*(void *)v89 != v80) {
        objc_enumerationMutation(obj);
      }
      uint64_t v82 = v6;
      uint64_t v7 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 32), v3, *(void *)(*((void *)&v88 + 1) + 8 * v6), v4, v5);
      long long v84 = 0u;
      long long v85 = 0u;
      long long v86 = 0u;
      long long v87 = 0u;
      id v83 = v7;
      uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v8, (uint64_t)&v84, (uint64_t)v92, 16);
      if (v9)
      {
        uint64_t v14 = v9;
        uint64_t v15 = *(void *)v85;
        do
        {
          uint64_t v16 = 0;
          do
          {
            if (*(void *)v85 != v15) {
              objc_enumerationMutation(v83);
            }
            uint64_t v17 = *(void **)(*((void *)&v84 + 1) + 8 * v16);
            uint64_t v18 = *(void **)(a1 + 40);
            uint64_t v19 = objc_msgSend_voiceId(v17, v10, v11, v12, v13);
            uint64_t v22 = objc_msgSend__locked_ResourceWithVoiceId_assetId_(v18, v20, (uint64_t)v19, 0, v21);

            int isInstalled = objc_msgSend_isInstalled(v22, v23, v24, v25, v26);
            uint64_t v32 = objc_msgSend_assetId(v17, v28, v29, v30, v31);
            if (v32)
            {

LABEL_14:
              uint64_t v42 = objc_msgSend_assetId(v17, v37, v38, v39, v40);
              uint64_t v47 = objc_msgSend_assetId(v22, v43, v44, v45, v46);
              int v51 = objc_msgSend_isEqualToString_(v42, v48, (uint64_t)v47, v49, v50) ^ 1;

              if (v22) {
                goto LABEL_15;
              }
              goto LABEL_16;
            }
            uint64_t v41 = objc_msgSend_assetId(v22, v33, v34, v35, v36);

            if (v41) {
              goto LABEL_14;
            }
            int v51 = 0;
            if (v22)
            {
LABEL_15:
              if ((isInstalled ^ objc_msgSend_isInstalled(v17, v37, v38, v39, v40) | v51) != 1) {
                goto LABEL_17;
              }
            }
LABEL_16:
            objc_msgSend_addObject_(*(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v37, (uint64_t)v17, v39, v40);
LABEL_17:

            ++v16;
          }
          while (v14 != v16);
          uint64_t v52 = objc_msgSend_countByEnumeratingWithState_objects_count_(v83, v10, (uint64_t)&v84, (uint64_t)v92, 16);
          uint64_t v14 = v52;
        }
        while (v52);
      }

      uint64_t v6 = v82 + 1;
    }
    while (v82 + 1 != v81);
    uint64_t v81 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v3, (uint64_t)&v88, (uint64_t)v93, 16);
  }
  while (v81);
LABEL_24:

  long long v57 = *(void **)(a1 + 40);
  if (*(unsigned char *)(a1 + 56))
  {
    objc_msgSend__updateCachedResources_locked_(v57, v53, *(void *)(a1 + 32), v55, v56);
  }
  else
  {
    __int16 v62 = objc_msgSend__resources(v57, v53, v54, v55, v56);
    objc_msgSend_addEntriesFromDictionary_(v62, v63, *(void *)(a1 + 32), v64, v65);
  }
  objc_msgSend_purgeLegacyResourceCache(*(void **)(a1 + 40), v58, v59, v60, v61);
  objc_msgSend__writeResourceCacheVersionToPreferences(*(void **)(a1 + 40), v66, v67, v68, v69);
  uint64_t v70 = *(void **)(a1 + 40);
  uint64_t v75 = objc_msgSend__resources(v70, v71, v72, v73, v74);
  objc_msgSend__writeResourcesToPreferences_(v70, v76, (uint64_t)v75, v77, v78);
}

void sub_1A671178C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_msgSend__observers(*(void **)(a1 + 32), a2, a3, a4, a5);
  id v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v9, v6, *(void *)(a1 + 40), v7, v8);
}

void sub_1A6711878(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_msgSend__observers(*(void **)(a1 + 32), a2, a3, a4, a5);
  id v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeObject_(v9, v6, *(void *)(a1 + 40), v7, v8);
}

void sub_1A6711A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A6711AB4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_msgSend__observers(*(void **)(a1 + 32), a2, a3, a4, a5);
  id v13 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v10 = objc_msgSend_allObjects(v13, v6, v7, v8, v9);
  uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v10;
}

void sub_1A6711E24(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = *(id *)(a1 + 32);
  id v6 = *(id *)(a1 + 40);
  id v4 = v3;
  AXPerformBlockAsynchronouslyOnMainThread();
}

uint64_t sub_1A6711EE0(void *a1)
{
  uint64_t result = objc_opt_respondsToSelector();
  if (result)
  {
    uint64_t v4 = a1[4];
    uint64_t v5 = a1[5];
    BOOL v6 = a1[6] != 0;
    return MEMORY[0x1F4181798](v4, sel_finishedDownloadingResource_wasCancelled_, v5, v6, v3);
  }
  return result;
}

void sub_1A6712184(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = *(id *)(a1 + 32);
  id v6 = *(id *)(a1 + 40);
  id v4 = v3;
  AXPerformBlockAsynchronouslyOnMainThread();
}

void sub_1A6712248(uint64_t a1)
{
  if (objc_opt_respondsToSelector())
  {
    id v6 = *(void **)(a1 + 32);
    objc_msgSend_voiceId(*(void **)(a1 + 40), v2, v3, v4, v5);
    id v20 = (id)objc_claimAutoreleasedReturnValue();
    int v7 = *(_DWORD *)(a1 + 56);
    uint64_t v12 = objc_msgSend_unarchivedFileSize(*(void **)(a1 + 48), v8, v9, v10, v11);
    uint64_t v17 = objc_msgSend_unsignedIntegerValue(v12, v13, v14, v15, v16);
    LODWORD(v18) = v7;
    objc_msgSend_downloadProgressForVoiceId_progress_storageSize_requiredDiskSpace_(v6, v19, (uint64_t)v20, v17, 1, v18);
  }
}

uint64_t sub_1A6712C0C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend_identifier(a2, (const char *)a2, a3, a4, a5);
}

uint64_t sub_1A67130E8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v6 = objc_msgSend_voiceId(a2, (const char *)a2, a3, a4, a5);
  uint64_t isEqualToString = objc_msgSend_isEqualToString_(v6, v7, *(void *)(a1 + 32), v8, v9);

  return isEqualToString;
}

void sub_1A67133F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A6713414(uint64_t a1, void *a2)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  obuint64_t j = a2;
  uint64_t v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v3, (uint64_t)&v40, (uint64_t)v45, 16);
  if (v4)
  {
    uint64_t v9 = v4;
    uint64_t v10 = *(void *)v41;
LABEL_3:
    uint64_t v11 = 0;
    while (1)
    {
      if (*(void *)v41 != v10) {
        objc_enumerationMutation(obj);
      }
      uint64_t v12 = *(void **)(*((void *)&v40 + 1) + 8 * v11);
      id v13 = objc_msgSend_properties(v12, v5, v6, v7, v8);
      uint64_t v17 = objc_msgSend_objectForKeyedSubscript_(v13, v14, @"VoiceId", v15, v16);
      uint64_t v22 = objc_msgSend_voiceId(*(void **)(a1 + 32), v18, v19, v20, v21);
      char isEqualToString = objc_msgSend_isEqualToString_(v17, v23, (uint64_t)v22, v24, v25);

      if (isEqualToString) {
        break;
      }
      if (v9 == ++v11)
      {
        uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v5, (uint64_t)&v40, (uint64_t)v45, 16);
        if (v9) {
          goto LABEL_3;
        }
        goto LABEL_9;
      }
    }
    uint64_t v27 = v12;

    if (!v27) {
      goto LABEL_12;
    }
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    uint64_t v44 = v27;
    uint64_t v31 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v29, (uint64_t)&v44, 1, v30);
    v38[0] = MEMORY[0x1E4F143A8];
    v38[1] = 3221225472;
    v38[2] = sub_1A671365C;
    v38[3] = &unk_1E5C6A0A8;
    id v39 = *(id *)(a1 + 32);
    objc_msgSend_downloadAssets_successStartBlock_(WeakRetained, v32, (uint64_t)v31, (uint64_t)v38, v33);
  }
  else
  {
LABEL_9:

LABEL_12:
    AXTTSLogResourceManager();
    uint64_t v27 = (char *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled((os_log_t)v27, OS_LOG_TYPE_ERROR)) {
      sub_1A688F190(a1, v27, v34, v35, v36);
    }
  }
}

void sub_1A671365C(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v2 = AXTTSLogResourceManager();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = objc_msgSend_voiceId(*(void **)(a1 + 32), v3, v4, v5, v6);
    uint64_t v12 = objc_msgSend_primaryLanguage(*(void **)(a1 + 32), v8, v9, v10, v11);
    int v13 = 138412546;
    uint64_t v14 = v7;
    __int16 v15 = 2112;
    uint64_t v16 = v12;
    _os_log_impl(&dword_1A66D3000, v2, OS_LOG_TYPE_INFO, "Downloading legacy asset for testing: %@ %@", (uint8_t *)&v13, 0x16u);
  }
}

void sub_1A671373C(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    v10[2] = sub_1A67137F4;
    v10[3] = &unk_1E5C6A120;
    uint64_t v6 = *(void **)(a1 + 32);
    id v11 = *(id *)(a1 + 40);
    id v12 = v5;
    objc_msgSend__performBlockOnObservers_(v6, v7, (uint64_t)v10, v8, v9);
  }
}

void sub_1A67137F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = *(id *)(a1 + 32);
  id v6 = *(id *)(a1 + 40);
  id v4 = v3;
  AXPerformBlockAsynchronouslyOnMainThread();
}

uint64_t sub_1A67138B0(void *a1)
{
  uint64_t result = objc_opt_respondsToSelector();
  if (result)
  {
    uint64_t v4 = a1[4];
    uint64_t v5 = a1[5];
    BOOL v6 = a1[6] != 0;
    return MEMORY[0x1F4181798](v4, sel_finishedDownloadingResource_wasCancelled_, v5, v6, v3);
  }
  return result;
}

void sub_1A6713B24(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_msgSend_sharedInstance(TTSAXResourceManager, a2, a3, a4, a5);
  id v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_resetResourcesCache(v9, v5, v6, v7, v8);
}

void sub_1A6713B6C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_1A6713B88(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

uint64_t (*ausdk::AUBaseLookup::Lookup(ausdk::AUBaseLookup *this))()
{
  uint64_t v1 = (int)this - 1;
  if (v1 > 0x11) {
    return 0;
  }
  else {
    return off_1EFB80AE8[v1];
  }
}

uint64_t sub_1A6713BD8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 536);
  if (v2) {
    (*(void (**)(void))(*(void *)v2 + 16))(*(void *)(a1 + 536));
  }
  uint64_t v3 = ausdk::AUBase::DoInitialize((ausdk::AUBase *)(a1 + 64));
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  return v3;
}

void sub_1A6713C6C(void *a1)
{
}

uint64_t sub_1A6713CF0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 536);
  if (v2) {
    (*(void (**)(void))(*(void *)v2 + 16))(*(void *)(a1 + 536));
  }
  double v3 = ausdk::AUBase::DoCleanup((ausdk::AUBase *)(a1 + 64));
  if (v2)
  {
    (*(void (**)(uint64_t, double))(*(void *)v2 + 24))(v2, v3);
    return 0;
  }
  return v2;
}

void sub_1A6713D7C(void *a1)
{
}

uint64_t sub_1A6713E04(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int *a5, BOOL *a6)
{
  unsigned int v16 = 0;
  BOOL v15 = 0;
  uint64_t v12 = *(void *)(a1 + 536);
  if (v12) {
    (*(void (**)(void))(*(void *)v12 + 16))(*(void *)(a1 + 536));
  }
  uint64_t PropertyInfo = ausdk::AUBase::DispatchGetPropertyInfo((ausdk::AUBase *)(a1 + 64), a2, a3, a4, &v16, &v15);
  if (a5) {
    *a5 = v16;
  }
  if (a6) {
    *a6 = v15;
  }
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 24))(v12);
  }
  return PropertyInfo;
}

void sub_1A6713EF8(void *a1)
{
}

uint64_t sub_1A6713F7C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _OWORD *a5, _DWORD *a6)
{
  BOOL v40 = 0;
  uint64_t v12 = *(void *)(a1 + 536);
  if (v12) {
    (*(void (**)(void))(*(void *)v12 + 16))(*(void *)(a1 + 536));
  }
  if (!a6)
  {
    BOOL v17 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    if (v17) {
      sub_1A688F284(v17, v18, v19, v20, v21, v22, v23, v24);
    }
    goto LABEL_14;
  }
  if (!a5)
  {
    LODWORD(__p) = 0;
    uint64_t PropertyInfo = ausdk::AUBase::DispatchGetPropertyInfo((ausdk::AUBase *)(a1 + 64), a2, a3, a4, (unsigned int *)&__p, &v40);
    *a6 = __p;
    int v25 = 1;
    uint64_t v15 = PropertyInfo;
    if (!v12) {
      goto LABEL_17;
    }
LABEL_16:
    (*(void (**)(uint64_t))(*(void *)v12 + 24))(v12);
    goto LABEL_17;
  }
  size_t v13 = *a6;
  if (!v13)
  {
    BOOL v26 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    if (v26) {
      sub_1A688F2C0(v26, v27, v28, v29, v30, v31, v32, v33);
    }
LABEL_14:
    uint64_t PropertyInfo = 0;
    uint64_t v15 = 4294967246;
LABEL_15:
    int v25 = 1;
    if (!v12) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  unsigned int v39 = 0;
  uint64_t v14 = (ausdk::AUBase *)(a1 + 64);
  uint64_t v15 = ausdk::AUBase::DispatchGetPropertyInfo((ausdk::AUBase *)(a1 + 64), a2, a3, a4, &v39, &v40);
  if (v15)
  {
    uint64_t PropertyInfo = 0;
    goto LABEL_15;
  }
  std::string __p = 0;
  BOOL v37 = 0;
  uint64_t v38 = 0;
  uint64_t v35 = a5;
  if (v13 < v39)
  {
    sub_1A6715728((unint64_t *)&__p, v39);
    uint64_t v35 = __p;
  }
  uint64_t PropertyInfo = ausdk::AUBase::DispatchGetProperty(v14, a2, a3, a4, v35);
  if (PropertyInfo)
  {
    *a6 = 0;
  }
  else if (v13 >= v39 || __p == v37)
  {
    *a6 = v39;
  }
  else
  {
    memcpy(a5, __p, v13);
  }
  if (__p)
  {
    BOOL v37 = __p;
    operator delete(__p);
  }
  int v25 = 0;
  if (v12) {
    goto LABEL_16;
  }
LABEL_17:
  if (!v25) {
    return PropertyInfo;
  }
  return v15;
}

void sub_1A6714198(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1A67140D8);
}

uint64_t sub_1A6714258(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void **__s2, uint64_t a6)
{
  uint64_t v12 = *(void *)(a1 + 536);
  if (v12) {
    (*(void (**)(void))(*(void *)v12 + 16))(*(void *)(a1 + 536));
  }
  if (__s2 && a6)
  {
    uint64_t v13 = ausdk::AUBase::DispatchSetProperty((const void **)(a1 + 64), a2, a3, a4, __s2, a6);
LABEL_9:
    uint64_t v14 = v13;
    goto LABEL_10;
  }
  if (!__s2 && !a6)
  {
    uint64_t v13 = ausdk::AUBase::DispatchRemovePropertyValue((ausdk::AUBase *)(a1 + 64), a2, a3, a4);
    goto LABEL_9;
  }
  if (__s2)
  {
    if (a6)
    {
      uint64_t v14 = 0;
LABEL_10:
      char v15 = 1;
      if (!v12) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
    BOOL v25 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    if (v25) {
      sub_1A688F338(v25, v26, v27, v28, v29, v30, v31, v32);
    }
  }
  else
  {
    BOOL v17 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    if (v17) {
      sub_1A688F2FC(v17, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  char v15 = 0;
  uint64_t v14 = 0;
  if (v12) {
LABEL_11:
  }
    (*(void (**)(uint64_t))(*(void *)v12 + 24))(v12);
LABEL_12:
  if ((v15 & 1) == 0) {
    return 4294967246;
  }
  return v14;
}

void sub_1A67143B0(void *a1)
{
}

uint64_t sub_1A6714434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 536);
  if (v8) {
    (*(void (**)(void))(*(void *)v8 + 16))(*(void *)(a1 + 536));
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 64) + 112))(a1 + 64, a2, a3, a4);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 24))(v8);
  }
  return v9;
}

void sub_1A6714508(void *a1)
{
}

uint64_t sub_1A671458C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 536);
  if (v6) {
    (*(void (**)(void))(*(void *)v6 + 16))(*(void *)(a1 + 536));
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void))(*(void *)(a1 + 64) + 120))(a1 + 64, a2, a3, 0, 0);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
  }
  return v7;
}

void sub_1A6714658(void *a1)
{
}

uint64_t sub_1A67146DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 536);
  if (v8) {
    (*(void (**)(void))(*(void *)v8 + 16))(*(void *)(a1 + 536));
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 64) + 120))(a1 + 64, a2, a3, a4, 1);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 24))(v8);
  }
  return v9;
}

void sub_1A67147B4(void *a1)
{
}

uint64_t sub_1A6714838(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 536);
  if (v6) {
    (*(void (**)(void))(*(void *)v6 + 16))(*(void *)(a1 + 536));
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 64) + 128))(a1 + 64, a2, a3);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
  }
  return v7;
}

void sub_1A67148FC(void *a1)
{
}

uint64_t sub_1A6714980(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 536);
  if (v6) {
    (*(void (**)(void))(*(void *)v6 + 16))(*(void *)(a1 + 536));
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 64) + 136))(a1 + 64, a2, a3);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
  }
  return v7;
}

void sub_1A6714A44(void *a1)
{
}

uint64_t sub_1A6714AC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a1 + 536);
  if (v10) {
    (*(void (**)(void))(*(void *)v10 + 16))(*(void *)(a1 + 536));
  }
  if (a5)
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 64) + 144))(a1 + 64, a2, a3, a4, a5);
    if (!v10) {
      return v11;
    }
    goto LABEL_7;
  }
  uint64_t v11 = 4294967246;
  if (v10) {
LABEL_7:
  }
    (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  return v11;
}

void sub_1A6714BB4(void *a1)
{
  if (v1) {
    sub_1A688F228(v1);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1A6714B9CLL);
}

uint64_t sub_1A6714C34(uint64_t a1, float a2)
{
  if ((LODWORD(a2) & 0x7FFFFFFFu) > 0x7F7FFFFF) {
    return 4294900553;
  }
  else {
    return (*(uint64_t (**)(void))(*(void *)(a1 + 64) + 152))();
  }
}

uint64_t sub_1A6714CFC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (!a2 || !a3) {
    return (*(uint64_t (**)(void))(*(void *)(a1 + 64) + 168))();
  }
  uint64_t v3 = 0;
  BOOL v4 = 0;
  uint64_t v5 = (_DWORD *)(a2 + 28);
  while (1)
  {
    int v6 = *(v5 - 4);
    if (v6 == 2) {
      break;
    }
    if (v6 == 1 && (*(v5 - 2) & 0x7FFFFFFFu) >= 0x7F800000) {
      goto LABEL_11;
    }
LABEL_10:
    BOOL v4 = ++v3 >= (unint64_t)a3;
    v5 += 8;
    if (a3 == v3) {
      goto LABEL_11;
    }
  }
  if ((*(v5 - 1) & 0x7FFFFFFFu) <= 0x7F7FFFFF && (*v5 & 0x7FFFFFFFu) <= 0x7F7FFFFF) {
    goto LABEL_10;
  }
LABEL_11:
  if (v4) {
    return (*(uint64_t (**)(void))(*(void *)(a1 + 64) + 168))();
  }
  return 4294900553;
}

uint64_t sub_1A6714E30(uint64_t a1, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4, uint64_t a5, AudioBufferList *a6)
{
  int v8 = 0;
  uint64_t result = 4294967246;
  if (a3 && a6)
  {
    if (!a2) {
      a2 = (unsigned int *)&v8;
    }
    return ausdk::AUBase::DoRender((ausdk::AUBase *)(a1 + 64), a2, a3, a4, a5, a6);
  }
  return result;
}

uint64_t sub_1A6714E74(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 536);
  if (v2) {
    (*(void (**)(void))(*(void *)v2 + 16))(*(void *)(a1 + 536));
  }
  uint64_t v3 = ausdk::AUBase::DoReset((ausdk::AUBase *)(a1 + 64));
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  return v3;
}

void sub_1A6714F18(void *a1)
{
}

uint64_t (*ausdk::AUOutputLookup::Lookup(ausdk::AUOutputLookup *this))()
{
  int v1 = (int)this;
  uint64_t result = ausdk::AUBaseLookup::Lookup(this);
  if (v1 == 514) {
    uint64_t v3 = sub_1A6715130;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v1 == 513) {
    uint64_t v3 = sub_1A6714FF0;
  }
  if (!result) {
    return (uint64_t (*)())v3;
  }
  return result;
}

uint64_t sub_1A6714FF0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 536);
  if (v2) {
    (*(void (**)(void))(*(void *)v2 + 16))(*(void *)(a1 + 536));
  }
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 64) + 440))(a1 + 64);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  return v3;
}

void sub_1A67150AC(void *a1)
{
}

uint64_t sub_1A6715130(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 536);
  if (v2) {
    (*(void (**)(void))(*(void *)v2 + 16))(*(void *)(a1 + 536));
  }
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 64) + 448))(a1 + 64);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  return v3;
}

void sub_1A67151EC(void *a1)
{
}

uint64_t (*ausdk::AUComplexOutputLookup::Lookup(ausdk::AUComplexOutputLookup *this))(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v1 = (int)this;
  uint64_t result = (uint64_t (*)(uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))ausdk::AUBaseLookup::Lookup(this);
  if (!result)
  {
    if (v1 == 514) {
      uint64_t v3 = sub_1A6715130;
    }
    else {
      uint64_t v3 = 0;
    }
    if (v1 == 513) {
      uint64_t result = (uint64_t (*)(uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A6714FF0;
    }
    else {
      uint64_t result = (uint64_t (*)(uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v3;
    }
    if (!result)
    {
      if (v1 == 19) {
        return sub_1A67152D8;
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1A67152D8(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10 = 0;
  uint64_t v8 = 4294967246;
  if (a3 && a8)
  {
    if (!a2) {
      a2 = &v10;
    }
    return (*(uint64_t (**)(uint64_t, int *))(*(void *)(a1 + 64) + 192))(a1 + 64, a2);
  }
  return v8;
}

uint64_t (*ausdk::AUBaseProcessLookup::Lookup(ausdk::AUBaseProcessLookup *this))()
{
  int v1 = (int)this;
  uint64_t result = ausdk::AUBaseLookup::Lookup(this);
  if (v1 == 20) {
    uint64_t v3 = sub_1A6715384;
  }
  else {
    uint64_t v3 = 0;
  }
  if (!result) {
    return (uint64_t (*)())v3;
  }
  return result;
}

uint64_t sub_1A6715384(uint64_t a1, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4, AudioBufferList *a5)
{
  unsigned int v7 = 0;
  if (a2)
  {
    if ((*((unsigned char *)a2 + 1) & 2) != 0) {
      return ausdk::AUBase::DoProcess((ausdk::AUBase *)(a1 + 64), a2, a3, a4, a5);
    }
  }
  else
  {
    a2 = &v7;
  }
  uint64_t v5 = 4294967246;
  if (a3 && a5) {
    return ausdk::AUBase::DoProcess((ausdk::AUBase *)(a1 + 64), a2, a3, a4, a5);
  }
  return v5;
}

uint64_t (*ausdk::AUBaseProcessMultipleLookup::Lookup(ausdk::AUBaseProcessMultipleLookup *this))()
{
  int v1 = (int)this;
  uint64_t result = ausdk::AUBaseLookup::Lookup(this);
  if (v1 == 21) {
    uint64_t v3 = sub_1A6715414;
  }
  else {
    uint64_t v3 = 0;
  }
  if (!result) {
    return (uint64_t (*)())v3;
  }
  return result;
}

uint64_t sub_1A6715414(uint64_t a1, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4, uint64_t a5, const AudioBufferList **a6, uint64_t a7, AudioBufferList **a8)
{
  unsigned int v10 = 0;
  if (a2)
  {
    if ((*((unsigned char *)a2 + 1) & 2) != 0) {
      return ausdk::AUBase::DoProcessMultiple((ausdk::AUBase *)(a1 + 64), a2, a3, a4, a5, a6, a7, a8);
    }
  }
  else
  {
    a2 = &v10;
  }
  uint64_t v8 = 4294967246;
  if (a3 && a6 && a8) {
    return ausdk::AUBase::DoProcessMultiple((ausdk::AUBase *)(a1 + 64), a2, a3, a4, a5, a6, a7, a8);
  }
  return v8;
}

uint64_t (*ausdk::AUBaseProcessAndMultipleLookup::Lookup(ausdk::AUBaseProcessAndMultipleLookup *this))()
{
  int v1 = (int)this;
  uint64_t result = ausdk::AUBaseLookup::Lookup(this);
  if (!result)
  {
    if (v1 == 21)
    {
      return (uint64_t (*)())sub_1A6715414;
    }
    else if (v1 == 20)
    {
      return (uint64_t (*)())sub_1A6715384;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t (*ausdk::AUMIDILookup::Lookup(ausdk::AUMIDILookup *this))()
{
  int v1 = (int)this;
  uint64_t result = ausdk::AUBaseLookup::Lookup(this);
  if (!result)
  {
    uint64_t v3 = v1 - 257;
    if (v3 > 6) {
      return 0;
    }
    else {
      return off_1EFB80B78[v3];
    }
  }
  return result;
}

uint64_t (*ausdk::AUMIDIProcessLookup::Lookup(ausdk::AUMIDIProcessLookup *this))()
{
  int v1 = (int)this;
  uint64_t result = ausdk::AUBaseLookup::Lookup(this);
  if (v1 == 20) {
    uint64_t v3 = sub_1A6715384;
  }
  else {
    uint64_t v3 = 0;
  }
  if (!result) {
    uint64_t result = (uint64_t (*)())v3;
  }
  if (!result)
  {
    uint64_t v4 = v1 - 257;
    if (v4 > 6) {
      return 0;
    }
    else {
      return off_1EFB80B78[v4];
    }
  }
  return result;
}

uint64_t (*ausdk::AUMusicLookup::Lookup(ausdk::AUMusicLookup *this))()
{
  int v1 = (int)this;
  uint64_t result = ausdk::AUBaseLookup::Lookup(this);
  if (!result)
  {
    uint64_t v3 = v1 - 257;
    if (v3 > 6) {
      return 0;
    }
    else {
      return off_1EFB80BB0[v3];
    }
  }
  return result;
}

uint64_t sub_1A67155C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a6) {
    return (*(uint64_t (**)(void))(*(void *)(a1 + 64) + 480))();
  }
  else {
    return 4294967246;
  }
}

uint64_t sub_1A671567C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 64) + 488))();
}

void sub_1A6715728(unint64_t *a1, size_t a2)
{
  uint64_t v5 = (char *)a1[1];
  uint64_t v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    unint64_t v6 = *a1;
    unsigned int v7 = &v5[-*a1];
    unint64_t v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0) {
      sub_1A66E9D7C();
    }
    unint64_t v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      unint64_t v11 = (unint64_t)operator new(v10);
    }
    else {
      unint64_t v11 = 0;
    }
    uint64_t v12 = &v7[v11];
    uint64_t v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      unint64_t v11 = (unint64_t)v12;
    }
    else
    {
      uint64_t v14 = &v5[~v6];
      do
      {
        char v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      uint64_t v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

uint64_t sub_1A6715864(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 64) + 456))();
}

uint64_t sub_1A6715910(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 64) + 464))();
}

uint64_t sub_1A67159BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    return (*(uint64_t (**)(void))(*(void *)(a1 + 64) + 472))();
  }
  else {
    return 4294967246;
  }
}

uint64_t CAIsDebuggerAttached(void)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  *(void *)uint64_t v4 = 0xE00000001;
  int v5 = 1;
  pid_t v6 = getpid();
  size_t v1 = 648;
  unsigned int v3 = 0;
  sysctl(v4, 4u, v2, &v1, 0, 0);
  return (v3 >> 11) & 1;
}

void sub_1A6716AE4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id _AXNSStringFromOSType(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = 0;
  int v12 = a1;
  uint64_t v7 = BYTE3(a1);
  uint64_t v8 = MEMORY[0x1E4F14390];
  while (1)
  {
    uint64_t v9 = *((unsigned __int8 *)&v12 + v6);
    if (*((char *)&v12 + v6) < 0) {
      break;
    }
    if ((*(_DWORD *)(v8 + 4 * v9 + 60) & 0x40000) == 0) {
      goto LABEL_8;
    }
LABEL_6:
    if (++v6 == 4)
    {
      objc_msgSend_stringWithFormat_(NSString, a2, @"%c%c%c%c", a4, a5, v7, BYTE2(a1), BYTE1(a1), a1);
      goto LABEL_9;
    }
  }
  if (__maskrune(v9, 0x40000uLL)) {
    goto LABEL_6;
  }
LABEL_8:
  objc_msgSend_stringWithFormat_(NSString, a2, @"%u", a4, a5, a1);
  size_t v10 = LABEL_9:;

  return v10;
}

uint64_t AXNSStringFromAudioUnitComponentDescriptionRaw(unsigned int *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend_stringWithFormat_(NSString, a2, @"AU Desc: (Manufacturer: %u) (Type: %u) (SubType: %u) (Flags: %u) (Flag Mask: %u)", a4, a5, a1[2], *a1, a1[1], a1[3], a1[4]);
}

id AXAudioComponentDescUniqueTriple(unsigned int *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = NSString;
  uint64_t v7 = _AXNSStringFromOSType(*a1, a2, a3, a4, a5);
  int v12 = _AXNSStringFromOSType(a1[1], v8, v9, v10, v11);
  BOOL v17 = _AXNSStringFromOSType(a1[2], v13, v14, v15, v16);
  uint64_t v21 = objc_msgSend_stringWithFormat_(v6, v18, @"%@_%@_%@", v19, v20, v7, v12, v17);

  return v21;
}

id AXAudioComponentDescUniqueSpeechSynthTuple(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = NSString;
  uint64_t v7 = _AXNSStringFromOSType(*(unsigned int *)(a1 + 4), a2, a3, a4, a5);
  int v12 = _AXNSStringFromOSType(*(unsigned int *)(a1 + 8), v8, v9, v10, v11);
  uint64_t v16 = objc_msgSend_stringWithFormat_(v6, v13, @"%@_%@", v14, v15, v7, v12);

  return v16;
}

id AXNSStringFromAudioUnitComponentDescription(unsigned int *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = NSString;
  uint64_t v7 = _AXNSStringFromOSType(a1[2], a2, a3, a4, a5);
  int v12 = _AXNSStringFromOSType(*a1, v8, v9, v10, v11);
  BOOL v17 = _AXNSStringFromOSType(a1[1], v13, v14, v15, v16);
  uint64_t v21 = objc_msgSend_stringWithFormat_(v6, v18, @"AU Desc: (Manufacturer: %@) (Type: %@) (SubType: %@) (Flags: %u) (Flag Mask: %u)", v19, v20, v7, v12, v17, a1[3], a1[4]);

  return v21;
}

void sub_1A6717D34(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  uint64_t v4 = AXLogSpeechSynthesis();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int token = 138412290;
    id v12 = v3;
    _os_log_impl(&dword_1A66D3000, v4, OS_LOG_TYPE_INFO, "%@ requested speech voices be updated", (uint8_t *)&token, 0xCu);
  }

  int token = 0;
  notify_register_check((const char *)sseNotificationName, &token);
  int v5 = token;
  uint64_t v10 = objc_msgSend_hash(v3, v6, v7, v8, v9);
  notify_set_state(v5, v10);
  notify_post((const char *)sseNotificationName);
  notify_cancel(token);
}

void sub_1A6717E24(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = objc_msgSend_mainBundle(MEMORY[0x1E4F28B50], a2, a3, a4, a5);
  objc_msgSend_bundleIdentifier(v6, v7, v8, v9, v10);
  id v14 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend_updateSpeechVoicesForClient_(a1, v11, (uint64_t)v14, v12, v13);
}

id sub_1A6717E90(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (objc_msgSend_isFirstParty(a1, a2, a3, a4, a5))
  {
    uint64_t v10 = objc_msgSend_extraAttributes(a1, v6, v7, v8, v9);
    id v14 = objc_msgSend_objectForKeyedSubscript_(v10, v11, @"kTTSSynthesisProviderVoiceAttributeGroupName", v12, v13);

    if (v14)
    {
      id v19 = v14;
    }
    else
    {
      uint64_t v20 = objc_msgSend_name(a1, v15, v16, v17, v18);
      uint64_t v23 = objc_msgSend_localizedName_forLanguage_(TTSAXResource, v21, (uint64_t)v20, 0, v22);

      if (objc_msgSend_length(v23, v24, v25, v26, v27))
      {
        id v32 = v23;
      }
      else
      {
        objc_msgSend_name(a1, v28, v29, v30, v31);
        id v32 = (id)objc_claimAutoreleasedReturnValue();
      }
      id v19 = v32;
    }
  }
  else
  {
    objc_msgSend_manufacturerName(a1, v6, v7, v8, v9);
    id v19 = (id)objc_claimAutoreleasedReturnValue();
  }

  return v19;
}

id sub_1A6717F80(void *a1)
{
  uint64_t v2 = NSString;
  uint64_t v3 = objc_opt_class();
  uint64_t v8 = objc_msgSend_name(a1, v4, v5, v6, v7);
  uint64_t v13 = objc_msgSend_identifier(a1, v9, v10, v11, v12);
  uint64_t v18 = objc_msgSend_supportedLanguages(a1, v14, v15, v16, v17);
  uint64_t v23 = objc_msgSend_age(a1, v19, v20, v21, v22);
  uint64_t v28 = objc_msgSend_gender(a1, v24, v25, v26, v27);
  uint64_t v33 = objc_msgSend_voiceSize(a1, v29, v30, v31, v32);
  uint64_t v38 = objc_msgSend_version(a1, v34, v35, v36, v37);
  long long v42 = objc_msgSend_stringWithFormat_(v2, v39, @"[%@ %p] Name: %@, Identifier: %@, Supported Languages %@, Age: %li, Gender: %li, Size: %lli, Version: %@", v40, v41, v3, a1, v8, v13, v18, v23, v28, v33, v38);

  if (TTSIsInternalBuild())
  {
    uint64_t v47 = NSString;
    objc_msgSend_auComponentDesc(a1, v43, v44, v45, v46);
    uint64_t v52 = AXNSStringFromAudioUnitComponentDescription(v58, v48, v49, v50, v51);
    uint64_t v56 = objc_msgSend_stringWithFormat_(v47, v53, @"%@, AUComponent %@", v54, v55, v42, v52);

    long long v42 = (void *)v56;
  }

  return v42;
}

uint64_t sub_1A67180E0(id a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (v4 == a1)
  {
    uint64_t isEqual = 1;
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v5 = v4;
      uint64_t v10 = objc_msgSend_age(a1, v6, v7, v8, v9);
      if (v10 == objc_msgSend_age(v5, v11, v12, v13, v14)
        && (uint64_t v19 = objc_msgSend_gender(a1, v15, v16, v17, v18), v19 == objc_msgSend_gender(v5, v20, v21, v22, v23)))
      {
        uint64_t v28 = objc_msgSend_name(a1, v24, v25, v26, v27);
        uint64_t v33 = objc_msgSend_name(v5, v29, v30, v31, v32);
        if (objc_msgSend_isEqual_(v28, v34, (uint64_t)v33, v35, v36))
        {
          uint64_t v41 = objc_msgSend_primaryLanguages(a1, v37, v38, v39, v40);
          uint64_t v46 = objc_msgSend_primaryLanguages(v5, v42, v43, v44, v45);
          if (objc_msgSend_isEqual_(v41, v47, (uint64_t)v46, v48, v49))
          {
            uint64_t v54 = objc_msgSend_supportedLanguages(a1, v50, v51, v52, v53);
            uint64_t v59 = objc_msgSend_supportedLanguages(v5, v55, v56, v57, v58);
            uint64_t isEqual = objc_msgSend_isEqual_(v54, v60, (uint64_t)v59, v61, v62);
          }
          else
          {
            uint64_t isEqual = 0;
          }
        }
        else
        {
          uint64_t isEqual = 0;
        }
      }
      else
      {
        uint64_t isEqual = 0;
      }
    }
    else
    {
      uint64_t isEqual = 0;
    }
  }

  return isEqual;
}

uint64_t sub_1A6718264(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = objc_msgSend_name(a1, a2, a3, a4, a5);
  uint64_t v11 = objc_msgSend_hash(v6, v7, v8, v9, v10);
  uint64_t v16 = objc_msgSend_supportedLanguages(a1, v12, v13, v14, v15);
  uint64_t v21 = objc_msgSend_hash(v16, v17, v18, v19, v20) ^ v11;
  uint64_t v26 = objc_msgSend_primaryLanguages(a1, v22, v23, v24, v25);
  uint64_t v31 = objc_msgSend_hash(v26, v27, v28, v29, v30);
  uint64_t v36 = v21 ^ v31 ^ objc_msgSend_age(a1, v32, v33, v34, v35);
  uint64_t v41 = objc_msgSend_gender(a1, v37, v38, v39, v40);
  uint64_t v46 = objc_msgSend_identifier(a1, v42, v43, v44, v45);
  uint64_t v51 = v36 ^ v41 ^ objc_msgSend_hash(v46, v47, v48, v49, v50);

  return v51;
}

id sub_1A6718324(void *a1)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v2 = objc_alloc_init(MEMORY[0x1E4F28E58]);
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  uint64_t v7 = objc_msgSend_supportedLanguages(a1, v3, v4, v5, v6, 0);
  uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v8, (uint64_t)&v26, (uint64_t)v30, 16);
  if (v9)
  {
    uint64_t v13 = v9;
    uint64_t v14 = *(void *)v27;
    uint64_t v15 = *MEMORY[0x1E4F1C420];
    do
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        if (*(void *)v27 != v14) {
          objc_enumerationMutation(v7);
        }
        uint64_t v17 = objc_msgSend_localeWithLocaleIdentifier_(MEMORY[0x1E4F1CA20], v10, *(void *)(*((void *)&v26 + 1) + 8 * i), v11, v12);
        uint64_t v21 = objc_msgSend_objectForKey_(v17, v18, v15, v19, v20);
        objc_msgSend_formUnionWithCharacterSet_(v2, v22, (uint64_t)v21, v23, v24);
      }
      uint64_t v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v10, (uint64_t)&v26, (uint64_t)v30, 16);
    }
    while (v13);
  }

  return v2;
}

id sub_1A671848C(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_msgSend_auComponentDesc(a1, a2, a3, a4, a5);
  uint64_t v9 = AXAudioComponentDescUniqueTriple(v11, v5, v6, v7, v8);

  return v9;
}

id sub_1A67184CC(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_msgSend_auComponentDesc(a1, a2, a3, a4, a5);
  uint64_t v9 = AXAudioComponentDescUniqueSpeechSynthTuple((uint64_t)v11, v5, v6, v7, v8);

  return v9;
}

void sub_1A671850C(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v9 = objc_msgSend_name(a1, v5, v6, v7, v8);
  objc_msgSend_encodeObject_forKey_(v4, v10, (uint64_t)v9, @"name", v11);

  uint64_t v16 = objc_msgSend_identifier(a1, v12, v13, v14, v15);
  objc_msgSend_encodeObject_forKey_(v4, v17, (uint64_t)v16, @"identifier", v18);

  uint64_t v23 = objc_msgSend_supportedLanguages(a1, v19, v20, v21, v22);
  objc_msgSend_encodeObject_forKey_(v4, v24, (uint64_t)v23, @"supportedLanguages", v25);

  uint64_t v30 = objc_msgSend_primaryLanguages(a1, v26, v27, v28, v29);
  objc_msgSend_encodeObject_forKey_(v4, v31, (uint64_t)v30, @"primaryLanguages", v32);

  uint64_t v37 = objc_msgSend_version(a1, v33, v34, v35, v36);
  objc_msgSend_encodeObject_forKey_(v4, v38, (uint64_t)v37, @"version", v39);

  uint64_t v40 = NSNumber;
  uint64_t v45 = objc_msgSend_voiceSize(a1, v41, v42, v43, v44);
  uint64_t v49 = objc_msgSend_numberWithLongLong_(v40, v46, v45, v47, v48);
  objc_msgSend_encodeObject_forKey_(v4, v50, (uint64_t)v49, @"voiceSize", v51);

  uint64_t v52 = NSNumber;
  uint64_t v57 = objc_msgSend_gender(a1, v53, v54, v55, v56);
  uint64_t v61 = objc_msgSend_numberWithInteger_(v52, v58, v57, v59, v60);
  objc_msgSend_encodeObject_forKey_(v4, v62, (uint64_t)v61, @"gender", v63);

  uint64_t v64 = NSNumber;
  uint64_t v69 = objc_msgSend_age(a1, v65, v66, v67, v68);
  uint64_t v73 = objc_msgSend_numberWithInteger_(v64, v70, v69, v71, v72);
  objc_msgSend_encodeObject_forKey_(v4, v74, (uint64_t)v73, @"age", v75);

  uint64_t v167 = 0;
  uint64_t v168 = 0;
  unsigned int v169 = 0;
  objc_msgSend_auComponentDesc(a1, v76, v77, v78, v79);
  id v83 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v80, v167, v81, v82);
  objc_msgSend_encodeObject_forKey_(v4, v84, (uint64_t)v83, @"auDescType", v85);

  long long v89 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v86, HIDWORD(v167), v87, v88);
  objc_msgSend_encodeObject_forKey_(v4, v90, (uint64_t)v89, @"auDescSubType", v91);

  uint64_t v95 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v92, v168, v93, v94);
  objc_msgSend_encodeObject_forKey_(v4, v96, (uint64_t)v95, @"auDescManufacturer", v97);

  uint64_t v101 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v98, HIDWORD(v168), v99, v100);
  objc_msgSend_encodeObject_forKey_(v4, v102, (uint64_t)v101, @"auDescFlags", v103);

  uint64_t v107 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v104, v169, v105, v106);
  objc_msgSend_encodeObject_forKey_(v4, v108, (uint64_t)v107, @"auDescFlagsMask", v109);

  long long v114 = objc_msgSend_manufacturerName(a1, v110, v111, v112, v113);
  objc_msgSend_encodeObject_forKey_(v4, v115, (uint64_t)v114, @"manufacturerName", v116);

  uint64_t v121 = objc_msgSend_synthesizerBundleIdentifier(a1, v117, v118, v119, v120);
  objc_msgSend_encodeObject_forKey_(v4, v122, (uint64_t)v121, @"synthesizerBundleIdentifier", v123);

  uint64_t v124 = NSNumber;
  uint64_t isFirstParty = objc_msgSend_isFirstParty(a1, v125, v126, v127, v128);
  uint64_t v133 = objc_msgSend_numberWithBool_(v124, v130, isFirstParty, v131, v132);
  objc_msgSend_encodeObject_forKey_(v4, v134, (uint64_t)v133, @"isFirstParty", v135);

  uint64_t v136 = NSNumber;
  uint64_t isPersonalVoice = objc_msgSend_isPersonalVoice(a1, v137, v138, v139, v140);
  uint64_t v145 = objc_msgSend_numberWithBool_(v136, v142, isPersonalVoice, v143, v144);
  objc_msgSend_encodeObject_forKey_(v4, v146, (uint64_t)v145, @"isPersonalVoice", v147);

  uint64_t v148 = NSNumber;
  uint64_t hasPerVoiceSettings = objc_msgSend_hasPerVoiceSettings(a1, v149, v150, v151, v152);
  uint64_t v157 = objc_msgSend_numberWithBool_(v148, v154, hasPerVoiceSettings, v155, v156);
  objc_msgSend_encodeObject_forKey_(v4, v158, (uint64_t)v157, @"hasPerVoiceSettings", v159);

  int v164 = objc_msgSend_extraAttributes(a1, v160, v161, v162, v163);
  objc_msgSend_encodeObject_forKey_(v4, v165, (uint64_t)v164, @"extraAttributes", v166);
}

id sub_1A67188CC(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = objc_msgSend_identifier(a1, a2, a3, a4, a5);
  uint64_t v8 = objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v5, v6, @"super-compact", @"compact", v7);

  return v8;
}

uint64_t TTSSpeechSetUnitTestingMode(uint64_t result)
{
  byte_1E96C4808 = result;
  return result;
}

uint64_t TTSSpeechUnitTestingMode()
{
  return byte_1E96C4808;
}

uint64_t sub_1A67189E8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  qword_1E96C4810 = objc_msgSend_set(MEMORY[0x1E4F1CA80], a2, a3, a4, a5);

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1A6718A28(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1A6718A38(uint64_t a1)
{
}

void sub_1A6718A40(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1A6718FC8(uint64_t a1)
{
}

void sub_1A6719274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A671928C(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t sub_1A6719970(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F4181798](a2, sel_setIsUserSubstitution_, 1, a4, a5);
}

void sub_1A6719C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A6719C7C(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1A671AF2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A671AF4C(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1A671B328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A671B984(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 152));
  _Unwind_Resume(a1);
}

uint64_t sub_1A671B9AC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = objc_msgSend_count(*(void **)(*(void *)(a1 + 32) + 56), a2, a3, a4, a5);
  if (result)
  {
    uint64_t v8 = *(void **)(a1 + 32);
    return objc_msgSend__stopSpeakingRequest_atNextBoundary_synchronously_error_(v8, v7, 0, 0, 0, 0);
  }
  return result;
}

void sub_1A671BA0C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = objc_msgSend_date(MEMORY[0x1E4F1C9C8], a2, a3, a4, a5);
  objc_msgSend_timeIntervalSinceDate_(v6, v7, *(void *)(a1 + 32), v8, v9);

  uint64_t v10 = AXTTSLogCommon();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
    sub_1A688F558(v10, v11, v12, v13, v14);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_setLatencyCallback_(WeakRetained, v16, 0, v17, v18);
}

void sub_1A671BA9C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_msgSend_addObject_(*(void **)(*(void *)(a1 + 32) + 56), a2, *(void *)(a1 + 40), a4, a5);
  if (TTSUseCoreSynthesizerForTTS())
  {
    objc_msgSend_coreSynth(*(void **)(a1 + 32), v6, v7, v8, v9);
    id v14 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_speakWithRequest_synthesizer_completionHandler_(v14, v10, *(void *)(a1 + 40), *(void *)(a1 + 32), (uint64_t)&unk_1EFB80BE8);
  }
  else
  {
    objc_msgSend_service(*(void **)(a1 + 48), v6, v7, v8, v9);
    id v14 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_startSpeechRequest_(v14, v11, *(void *)(a1 + 40), v12, v13);
  }
}

void sub_1A671BCB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A671BCC8(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1A671C548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  _Block_object_dispose((const void *)(v34 - 224), 8);
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose(&a34, 8);
  _Block_object_dispose((const void *)(v34 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1A671C5B8(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

id sub_1A671C618(uint64_t *a1, void *a2)
{
  id v4 = a2;
  if (objc_msgSend_length((void *)a1[4], v5, v6, v7, v8))
  {
    uint64_t v13 = objc_msgSend_voiceId(v4, v9, v10, v11, v12);
    int isEqualToString = objc_msgSend_isEqualToString_(v13, v14, a1[4], v15, v16);

    if (isEqualToString) {
      objc_storeStrong((id *)(*(void *)(a1[5] + 8) + 40), a2);
    }
  }
  uint64_t v18 = (void *)a1[6];
  uint64_t v19 = objc_msgSend_voiceId(v4, v9, v10, v11, v12);
  uint64_t v23 = objc_msgSend_voiceForIdentifier_(v18, v20, (uint64_t)v19, v21, v22);

  return v23;
}

void sub_1A671C6DC(uint64_t a1)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  id v2 = *(id *)(a1 + 32);
  uint64_t v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v3, (uint64_t)&v34, (uint64_t)v38, 16);
  if (v4)
  {
    uint64_t v9 = v4;
    uint64_t v10 = *(void *)v35;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v35 != v10) {
          objc_enumerationMutation(v2);
        }
        uint64_t v12 = *(void **)(*((void *)&v34 + 1) + 8 * i);
        if (objc_msgSend_isDefault(v12, v5, v6, v7, v8, (void)v34)) {
          objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v12);
        }
        if (*(void *)(a1 + 40))
        {
          uint64_t v17 = objc_msgSend_identifier(v12, v13, v14, v15, v16);
          if (objc_msgSend_isEqualToString_(v17, v18, *(void *)(a1 + 40), v19, v20))
          {

LABEL_14:
            objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), v12);
            goto LABEL_15;
          }
          uint64_t v25 = objc_msgSend_footprint(v12, v21, v22, v23, v24);

          if (v25 == 4) {
            goto LABEL_14;
          }
        }
        if (*(unsigned char *)(a1 + 72))
        {
          uint64_t v26 = *(void *)(a1 + 64);
          if (v26 == objc_msgSend_footprint(v12, v13, v14, v15, v16)) {
            goto LABEL_14;
          }
        }
LABEL_15:
        uint64_t v27 = *(void *)(*(void *)(a1 + 56) + 8);
        uint64_t v28 = *(void **)(v27 + 40);
        if (v28)
        {
          uint64_t v29 = objc_msgSend_service(v12, v13, v14, v15, v16);
          char isVoiceValid = objc_msgSend_isVoiceValid_(v29, v30, *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), v31, v32);

          if (isVoiceValid) {
            goto LABEL_20;
          }
          uint64_t v27 = *(void *)(*(void *)(a1 + 56) + 8);
          uint64_t v28 = *(void **)(v27 + 40);
        }
        *(void *)(v27 + 40) = 0;
      }
      uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v5, (uint64_t)&v34, (uint64_t)v38, 16);
    }
    while (v9);
  }
LABEL_20:
}

void sub_1A671C8BC(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v2 = *(id *)(a1 + 32);
  uint64_t v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v3, (uint64_t)&v18, (uint64_t)v22, 16);
  if (v4)
  {
    uint64_t v9 = v4;
    uint64_t v10 = *(void *)v19;
    while (2)
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v19 != v10) {
          objc_enumerationMutation(v2);
        }
        uint64_t v12 = *(void **)(*((void *)&v18 + 1) + 8 * i);
        uint64_t v13 = objc_msgSend_service(v12, v5, v6, v7, v8, (void)v18);
        int isVoiceValid = objc_msgSend_isVoiceValid_(v13, v14, (uint64_t)v12, v15, v16);

        if (isVoiceValid)
        {
          objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), v12);
          goto LABEL_11;
        }
      }
      uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v5, (uint64_t)&v18, (uint64_t)v22, 16);
      if (v9) {
        continue;
      }
      break;
    }
  }
LABEL_11:
}

intptr_t sub_1A671CC50(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

intptr_t sub_1A671CEC4(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t sub_1A671D1E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__setDelegate_, *(void *)(a1 + 40), a4, a5);
}

uint64_t sub_1A671D2F0(uint64_t a1, const char *a2)
{
  uint64_t result = objc_msgSend__stopSpeakingRequest_atNextBoundary_synchronously_error_(*(void **)(a1 + 32), a2, 0, *(void *)(a1 + 48), *(unsigned __int8 *)(a1 + 64), *(void *)(a1 + 56));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_1A671D3F0(uint64_t a1, const char *a2)
{
  uint64_t result = objc_msgSend__pauseSpeakingRequest_atNextBoundary_synchronously_error_(*(void **)(a1 + 32), a2, 0, *(void *)(a1 + 48), *(unsigned __int8 *)(a1 + 64), *(void *)(a1 + 56));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_1A671D4E0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = objc_msgSend__continueSpeakingRequest_withError_(*(void **)(a1 + 32), a2, 0, *(void *)(a1 + 48), a5);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1A671D624(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = objc_msgSend_lastObject(*(void **)(*(void *)(a1 + 32) + 56), a2, a3, a4, a5);
  uint64_t v11 = objc_msgSend_voice(v6, v7, v8, v9, v10);
  uint64_t v16 = objc_msgSend_service(v11, v12, v13, v14, v15);
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  v19[2] = sub_1A671D6E4;
  v19[3] = &unk_1E5C6A6F8;
  v19[4] = *(void *)(a1 + 40);
  objc_msgSend_getSpeechIsActiveForRequest_reply_(v16, v17, (uint64_t)v6, (uint64_t)v19, v18);
}

uint64_t sub_1A671D6E4(uint64_t result, char a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
  return result;
}

void sub_1A671DA80(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16));
  objc_msgSend_speechSynthesizer_didStartSpeakingRequest_(WeakRetained, v2, *(void *)(a1 + 32), *(void *)(a1 + 40), v3);
}

void sub_1A671DB90(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16));
  objc_msgSend_speechSynthesizer_didPauseSpeakingRequest_(WeakRetained, v2, *(void *)(a1 + 32), *(void *)(a1 + 40), v3);
}

void sub_1A671DCA0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16));
  objc_msgSend_speechSynthesizer_didContinueSpeakingRequest_(WeakRetained, v2, *(void *)(a1 + 32), *(void *)(a1 + 40), v3);
}

void sub_1A671DDE8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if ((objc_msgSend_containsObject_(*(void **)(*(void *)(a1 + 32) + 56), a2, *(void *)(a1 + 40), a4, a5) & 1) == 0)
  {
    uint64_t v6 = AXTTSLogCommon();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 56);
      *(_DWORD *)buf = 138412546;
      uint64_t v39 = v7;
      __int16 v40 = 2112;
      uint64_t v41 = v8;
      _os_log_impl(&dword_1A66D3000, v6, OS_LOG_TYPE_DEFAULT, "We do not have a record of this request: %@ [%@]", buf, 0x16u);
    }
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1A671E09C;
  aBlock[3] = &unk_1E5C69600;
  id v9 = *(id *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 32);
  id v36 = v9;
  uint64_t v37 = v10;
  uint64_t v15 = _Block_copy(aBlock);
  uint64_t v16 = *(unsigned char **)(a1 + 32);
  if ((v16[64] & 4) != 0)
  {
    uint64_t v22 = objc_msgSend_delegateTargetQueue(v16, v11, v12, v13, v14);
    v29[0] = MEMORY[0x1E4F143A8];
    v29[1] = 3221225472;
    v29[2] = sub_1A671E0E0;
    v29[3] = &unk_1E5C6A720;
    uint64_t v23 = *(void **)(a1 + 40);
    v29[4] = *(void *)(a1 + 32);
    long long v19 = &v30;
    id v30 = v23;
    char v34 = *(unsigned char *)(a1 + 64);
    long long v20 = &v31;
    id v31 = *(id *)(a1 + 48);
    long long v21 = &v32;
    id v32 = *(id *)(a1 + 56);
    uint64_t v33 = v15;
    dispatch_async(v22, v29);

    uint64_t v17 = v33;
    goto LABEL_9;
  }
  if ((v16[64] & 2) != 0)
  {
    uint64_t v17 = objc_msgSend_delegateTargetQueue(v16, v11, v12, v13, v14);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1A671E140;
    block[3] = &unk_1E5C6A748;
    uint64_t v18 = *(void **)(a1 + 40);
    void block[4] = *(void *)(a1 + 32);
    long long v19 = &v25;
    id v25 = v18;
    char v28 = *(unsigned char *)(a1 + 64);
    long long v20 = &v26;
    id v26 = *(id *)(a1 + 56);
    long long v21 = &v27;
    id v27 = v15;
    dispatch_async(v17, block);
LABEL_9:
  }
}

uint64_t sub_1A671E09C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_msgSend_setDelegate_(*(void **)(a1 + 32), a2, 0, a4, a5);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void **)(*(void *)(a1 + 40) + 56);

  return objc_msgSend_removeObject_(v10, v6, v9, v7, v8);
}

void sub_1A671E0E0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16));
  objc_msgSend_speechSynthesizer_didFinishSpeakingRequest_successfully_phonemesSpoken_withError_(WeakRetained, v3, *(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 72), *(void *)(a1 + 48), *(void *)(a1 + 56));

  uint64_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 48);
  uint64_t v5 = *(void **)(a1 + 64);

  dispatch_async(v4, v5);
}

void sub_1A671E140(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16));
  objc_msgSend_speechSynthesizer_didFinishSpeakingRequest_successfully_withError_(WeakRetained, v3, *(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 64), *(void *)(a1 + 48));

  uint64_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 48);
  uint64_t v5 = *(void **)(a1 + 56);

  dispatch_async(v4, v5);
}

void sub_1A671E350(uint64_t *a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 16));
  objc_msgSend_speechSynthesizer_didEncounterMarker_forRequest_(WeakRetained, v2, a1[4], a1[5], a1[6]);
}

void sub_1A671E3A8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16));
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v7 = objc_msgSend_wordRange(*(void **)(a1 + 40), v3, v4, v5, v6);
  objc_msgSend_speechSynthesizer_willSpeakRangeOfSpeechString_forRequest_(WeakRetained, v8, v2, v7, (uint64_t)v8, *(void *)(a1 + 48));
}

void sub_1A671EE40(void *a1, uint64_t a2, void *a3)
{
}

id sub_1A671EE50(void *a1)
{
  return objc_getAssociatedObject(a1, &unk_1E96C4828);
}

uint64_t _TTSIdentifierForVoiceInformation(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend_voiceIdentifierForType_footprint_language_name_(TTSSiriAssetManager, a2, a3, (uint64_t)a2, a1, a5);
}

Class sub_1A671EE74(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  v11[0] = 0;
  if (!qword_1EB67A550)
  {
    v11[1] = (void *)MEMORY[0x1E4F143A8];
    v11[2] = (void *)3221225472;
    void v11[3] = sub_1A671EFA0;
    v11[4] = &unk_1E5C69480;
    unsigned int v11[5] = v11;
    long long v12 = xmmword_1E5C6A790;
    uint64_t v13 = 0;
    qword_1EB67A550 = _sl_dlopen();
  }
  if (!qword_1EB67A550) {
    sub_1A688F634(v11, a2, a3, a4, a5);
  }
  if (v11[0]) {
    free(v11[0]);
  }
  Class result = objc_getClass("AXSettings");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1A688F6B4((uint64_t)result, v7, v8, v9, v10);
  }
  qword_1EB67A588 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1A671EFA0()
{
  uint64_t result = _sl_dlopen();
  qword_1EB67A550 = result;
  return result;
}

void *sub_1A671F014(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  v17.receiver = a1;
  v17.super_class = (Class)&off_1EFBA76E0;
  id v8 = objc_msgSendSuper2(&v17, sel_init);
  long long v12 = v8;
  if (v8)
  {
    objc_msgSend_setSsmlRepresentation_(v8, v9, (uint64_t)v6, v10, v11);
    objc_msgSend_setVoice_(v12, v13, (uint64_t)v7, v14, v15);
  }

  return v12;
}

void sub_1A671F0A0(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v9 = objc_msgSend_ssmlRepresentation(a1, v5, v6, v7, v8);
  objc_msgSend_encodeObject_forKey_(v4, v10, (uint64_t)v9, @"ssmlRepresentation", v11);

  uint64_t v16 = objc_msgSend_voice(a1, v12, v13, v14, v15);
  objc_msgSend_encodeObject_forKey_(v4, v17, (uint64_t)v16, @"voice", v18);

  objc_msgSend_jobIdentifier(a1, v19, v20, v21, v22);
  id v25 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_encodeObject_forKey_(v4, v23, (uint64_t)v25, @"jobIdentifier", v24);
}

id sub_1A671F164(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  v29.receiver = a1;
  v29.super_class = (Class)&off_1EFBA76E0;
  id v5 = objc_msgSendSuper2(&v29, sel_init);
  if (v5)
  {
    uint64_t v6 = objc_opt_class();
    uint64_t v9 = objc_msgSend_decodeObjectOfClass_forKey_(v4, v7, v6, @"voice", v8);
    objc_msgSend_setVoice_(v5, v10, (uint64_t)v9, v11, v12);

    uint64_t v13 = objc_opt_class();
    uint64_t v16 = objc_msgSend_decodeObjectOfClass_forKey_(v4, v14, v13, @"ssmlRepresentation", v15);
    objc_msgSend_setSsmlRepresentation_(v5, v17, (uint64_t)v16, v18, v19);

    uint64_t v20 = objc_opt_class();
    uint64_t v23 = objc_msgSend_decodeObjectOfClass_forKey_(v4, v21, v20, @"jobIdentifier", v22);
    objc_msgSend_setJobIdentifier_(v5, v24, (uint64_t)v23, v25, v26);

    id v27 = v5;
  }

  return v5;
}

void sub_1A671F274(void *a1, uint64_t a2, void *a3)
{
}

id sub_1A671F284(void *a1)
{
  return objc_getAssociatedObject(a1, &unk_1E96C4830);
}

void sub_1A671F290(void *a1, uint64_t a2, void *a3)
{
}

id sub_1A671F2A0(void *a1)
{
  return objc_getAssociatedObject(a1, &unk_1E96C4831);
}

void sub_1A671F2AC(void *a1, uint64_t a2, void *a3)
{
}

id sub_1A671F2BC(void *a1)
{
  return objc_getAssociatedObject(a1, &unk_1E96C4832);
}

id sub_1A671F2C8(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = NSString;
  uint64_t v7 = NSNumber;
  uint64_t v8 = objc_msgSend_ssmlRepresentation(a1, a2, a3, a4, a5);
  uint64_t v13 = objc_msgSend_length(v8, v9, v10, v11, v12);
  objc_super v17 = objc_msgSend_numberWithUnsignedInteger_(v7, v14, v13, v15, v16);
  uint64_t v22 = objc_msgSend_voice(a1, v18, v19, v20, v21);
  uint64_t v26 = objc_msgSend_stringWithFormat_(v6, v23, @"SSML Length: %@, Voice: %@", v24, v25, v17, v22);

  return v26;
}

uint64_t sub_1A671F378(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = objc_msgSend_ssmlRepresentation(a1, a2, a3, a4, a5);
  uint64_t v11 = objc_msgSend_hash(v6, v7, v8, v9, v10);
  uint64_t v16 = objc_msgSend_voice(a1, v12, v13, v14, v15);
  uint64_t v21 = objc_msgSend_hash(v16, v17, v18, v19, v20) ^ v11;

  return v21;
}

uint64_t sub_1A671F3D8(id a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (v4 == a1)
  {
    uint64_t isEqual = 1;
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v5 = v4;
      uint64_t v10 = objc_msgSend_voice(a1, v6, v7, v8, v9);
      uint64_t v15 = objc_msgSend_voice(v5, v11, v12, v13, v14);
      if (objc_msgSend_isEqual_(v10, v16, (uint64_t)v15, v17, v18))
      {
        uint64_t v23 = objc_msgSend_ssmlRepresentation(a1, v19, v20, v21, v22);
        char v28 = objc_msgSend_ssmlRepresentation(v5, v24, v25, v26, v27);
        uint64_t isEqual = objc_msgSend_isEqual_(v23, v29, (uint64_t)v28, v30, v31);
      }
      else
      {
        uint64_t isEqual = 0;
      }
    }
    else
    {
      uint64_t isEqual = 0;
    }
  }

  return isEqual;
}

double ausdk::AUEffectBase::AUEffectBase(ausdk::AUEffectBase *this, OpaqueAudioComponentInstance *a2, char a3)
{
  id v4 = ausdk::AUBase::AUBase(this, a2, 1, 1, 0);
  *(void *)id v4 = &unk_1EFB7D560;
  *((void *)v4 + 66) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)v4 + 536) = 0u;
  *((_WORD *)v4 + 276) = 0;
  *((unsigned char *)v4 + 554) = a3;
  *((_DWORD *)v4 + 139) = 0;
  *((unsigned char *)v4 + 560) = 0;
  *((_DWORD *)v4 + 147) = 0;
  *(_OWORD *)((char *)v4 + 568) = 0u;
  *((unsigned char *)v4 + 584) = 0;
  return result;
}

{
  ausdk::AUBase *v4;
  double result;

  id v4 = ausdk::AUBase::AUBase(this, a2, 1, 1, 0);
  *(void *)id v4 = &unk_1EFB7D560;
  *((void *)v4 + 66) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)v4 + 536) = 0u;
  *((_WORD *)v4 + 276) = 0;
  *((unsigned char *)v4 + 554) = a3;
  *((_DWORD *)v4 + 139) = 0;
  *((unsigned char *)v4 + 560) = 0;
  *((_DWORD *)v4 + 147) = 0;
  *(_OWORD *)((char *)v4 + 568) = 0u;
  *((unsigned char *)v4 + 584) = 0;
  return result;
}

double ausdk::AUEffectBase::Cleanup(ausdk::AUEffectBase *this)
{
  sub_1A67051FC((void *)this + 66);
  double result = 0.0;
  *(_OWORD *)((char *)this + 568) = 0u;
  return result;
}

uint64_t ausdk::AUEffectBase::Initialize(ausdk::AUEffectBase *this)
{
  uint64_t v2 = (char *)this + 80;
  int v3 = *(_DWORD *)(sub_1A66F4000((uint64_t)this + 80, 0) + 108);
  int v4 = *(_DWORD *)(sub_1A66F4000((uint64_t)this + 128, 0) + 108);
  uint64_t v24 = 0;
  unsigned int v5 = (*(uint64_t (**)(ausdk::AUEffectBase *, uint64_t *))(*(void *)this + 376))(this, &v24);
  if (v5) {
    BOOL v6 = v24 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    if (v4 << 16 == v3 << 16 && v4 << 16 != 0)
    {
LABEL_46:
      ausdk::AUEffectBase::MaintainKernels((uint64_t)this);
      *((void *)this + 71) = sub_1A66F4000((uint64_t)this + 128, 0);
      *((void *)this + 72) = sub_1A66F4000((uint64_t)v2, 0);
      uint64_t v23 = 0;
      long long v21 = 0u;
      long long v22 = 0u;
      (*(void (**)(long long *__return_ptr, ausdk::AUEffectBase *, uint64_t, void))(*(void *)this + 392))(&v21, this, 2, 0);
      uint64_t result = 0;
      *((_DWORD *)this + 147) = DWORD2(v22);
      return result;
    }
  }
  else
  {
    unint64_t v8 = 0;
    do
    {
      while (1)
      {
        uint64_t v9 = (__int16 *)(v24 + 4 * v8);
        int v10 = *v9;
        int v11 = v9[1];
        if ((v10 & 0x80000000) == 0 || (v11 & 0x80000000) == 0) {
          break;
        }
        if (v10 == -1 && v11 == -2) {
          goto LABEL_46;
        }
        BOOL v13 = (v10 & v11) == 0xFFFFFFFF && (unsigned __int16)(v4 ^ v3) == 0;
        BOOL v14 = v13;
        BOOL v15 = v11 == -1 && v10 == -2;
        if (v15 || v14) {
          goto LABEL_46;
        }
        if (++v8 >= v5) {
          return 4294956428;
        }
      }
      BOOL v17 = v11 == -1 || (__int16)v4 == v11;
      BOOL v19 = (v10 == -1 || (__int16)v3 == v10) && v17;
      ++v8;
    }
    while (v8 < v5 && !v19);
    if (v19) {
      goto LABEL_46;
    }
  }
  return 4294956428;
}

uint64_t ausdk::AUEffectBase::MaintainKernels(uint64_t this)
{
  size_t v1 = (uint64_t *)this;
  if (*(unsigned char *)(this + 584))
  {
    unsigned int v2 = 1;
  }
  else
  {
    this = sub_1A66F4000(this + 128, 0);
    unsigned int v2 = *(_DWORD *)(this + 108);
  }
  uint64_t v3 = v1[67];
  unint64_t v4 = (v3 - v1[66]) >> 3;
  unsigned int v5 = v1 + 66;
  unint64_t v6 = v2;
  if (v4 >= v2)
  {
    if (v4 > v2)
    {
      uint64_t v20 = (uint64_t *)(v3 - 8);
      uint64_t v21 = v3 - 8;
      do
      {
        this = *v20;
        *uint64_t v20 = 0;
        if (this) {
          this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
        }
        v1[67] = (uint64_t)v20;
        uint64_t v22 = v21 - v1[66];
        v21 -= 8;
        --v20;
      }
      while (v6 < v22 >> 3);
    }
  }
  else
  {
    this = (uint64_t)sub_1A671FCC8(v1 + 66, v2);
    unint64_t v7 = (unint64_t)(v1[67] - v1[66]) >> 3;
    if (v6 > v7)
    {
      int v8 = v6 - v7;
      do
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t *))(*v1 + 576))(&v26, v1);
        uint64_t v9 = (uint64_t *)v1[67];
        unint64_t v10 = v1[68];
        if ((unint64_t)v9 >= v10)
        {
          uint64_t v13 = ((uint64_t)v9 - *v5) >> 3;
          if ((unint64_t)(v13 + 1) >> 61) {
            sub_1A66E9D7C();
          }
          uint64_t v14 = v10 - *v5;
          uint64_t v15 = v14 >> 2;
          if (v14 >> 2 <= (unint64_t)(v13 + 1)) {
            uint64_t v15 = v13 + 1;
          }
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v15;
          }
          v27[4] = v1 + 68;
          if (v16) {
            BOOL v17 = (char *)sub_1A66F9BE8((uint64_t)(v1 + 68), v16);
          }
          else {
            BOOL v17 = 0;
          }
          uint64_t v18 = (uint64_t *)&v17[8 * v13];
          v27[0] = v17;
          v27[1] = v18;
          v27[3] = &v17[8 * v16];
          uint64_t v19 = v26;
          uint64_t v26 = 0;
          *uint64_t v18 = v19;
          void v27[2] = v18 + 1;
          sub_1A67204B0(v1 + 66, v27);
          uint64_t v12 = (void *)v1[67];
          sub_1A6720660(v27);
        }
        else
        {
          uint64_t v11 = v26;
          uint64_t v26 = 0;
          *uint64_t v9 = v11;
          uint64_t v12 = v9 + 1;
          v1[67] = (uint64_t)v12;
        }
        v1[67] = (uint64_t)v12;
        this = v26;
        uint64_t v26 = 0;
        if (this) {
          this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
        }
        --v8;
      }
      while (v8);
    }
  }
  if (v6)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *v5;
    do
    {
      uint64_t v25 = *(void *)(v24 + 8 * v23);
      if (v25) {
        *(_DWORD *)(v25 + 16) = v23;
      }
      ++v23;
    }
    while (v6 != v23);
  }
  return this;
}

void sub_1A671FA48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ausdk::AUEffectBase::Reset(ausdk::AUEffectBase *this)
{
  unsigned int v2 = (void *)*((void *)this + 66);
  uint64_t v3 = (void *)*((void *)this + 67);
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 16))(*v2);
    }
    ++v2;
  }

  return ausdk::AUBase::Reset(this);
}

uint64_t ausdk::AUEffectBase::GetPropertyInfo(ausdk::AUEffectBase *this, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3 || (a2 | 8) != 0x1D) {
    return ausdk::AUBase::GetPropertyInfo(this, a2, a3, a4, a5, a6);
  }
  *a6 = 1;
  *a5 = 4;
  return 0;
}

uint64_t ausdk::AUEffectBase::GetProperty(ausdk::AUEffectBase *this, unsigned int a2, unsigned int a3, unsigned int a4, _DWORD *a5)
{
  if (a3) {
    return ausdk::AUBase::GetProperty(this, a2, a3, a4, a5);
  }
  if (a2 == 29)
  {
    int v6 = *((unsigned __int8 *)this + 554);
  }
  else
  {
    if (a2 != 21) {
      return ausdk::AUBase::GetProperty(this, a2, a3, a4, a5);
    }
    int v6 = *((unsigned __int8 *)this + 552);
  }
  *a5 = v6;
  return 0;
}

uint64_t ausdk::AUEffectBase::SetProperty(ausdk::AUEffectBase *this, unsigned int a2, unsigned int a3, unsigned int a4, int *a5, unsigned int a6)
{
  if (a3) {
    goto LABEL_2;
  }
  if (a2 == 29)
  {
    uint64_t result = 0;
    *((unsigned char *)this + 554) = *a5 != 0;
    return result;
  }
  if (a2 != 21)
  {
LABEL_2:
    return ausdk::AUBase::SetProperty(this, a2, a3, a4, a5);
  }
  else if (a6 < 4)
  {
    return 4294956445;
  }
  else
  {
    int v8 = *a5;
    if ((*a5 != 0) != (*((unsigned char *)this + 552) != 0))
    {
      if (!v8 && *((unsigned char *)this + 552) && *((unsigned char *)this + 17)) {
        (*(void (**)(ausdk::AUEffectBase *, void, void))(*(void *)this + 72))(this, 0, 0);
      }
      (*(void (**)(ausdk::AUEffectBase *, BOOL))(*(void *)this + 584))(this, v8 != 0);
    }
    return 0;
  }
}

uint64_t ausdk::AUEffectBase::GetNumberOfChannels(ausdk::AUEffectBase *this)
{
  return *(unsigned int *)(sub_1A66F4000((uint64_t)this + 128, 0) + 108);
}

void **sub_1A671FCC8(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 3)
  {
    if (a2 >> 61) {
      sub_1A66E9D7C();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_1A66F9BE8((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    void v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 8 * v6;
    sub_1A67204B0(a1, v7);
    return sub_1A6720660(v7);
  }
  return result;
}

void sub_1A671FD48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1A6720660((void **)va);
  _Unwind_Resume(a1);
}

BOOL ausdk::AUEffectBase::StreamFormatWritable(ausdk::AUEffectBase *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t ausdk::AUEffectBase::ChangeStreamFormat(ausdk::AUEffectBase *this, uint64_t a2, uint64_t a3, const AudioStreamBasicDescription *a4, const AudioStreamBasicDescription *a5)
{
  uint64_t v8 = ausdk::AUBase::ChangeStreamFormat(this, a2, a3, a4, a5);
  if (!v8 && *((unsigned char *)this + 553) && a4->mSampleRate != a5->mSampleRate) {
    (*(void (**)(ausdk::AUEffectBase *, uint64_t, void, void, Float64))(*(void *)this + 432))(this, 3, 0, 0, a4->mSampleRate);
  }
  return v8;
}

uint64_t ausdk::AUEffectBase::ProcessScheduledSlice(ausdk::AUEffectBase *this, uint64_t *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *a2;
  unint64_t v7 = (unsigned int *)a2[1];
  uint64_t v6 = (unsigned int *)a2[2];
  int v8 = *((_DWORD *)this + 147) * a4;
  uint64_t v9 = *v7;
  if (v9)
  {
    unint64_t v10 = v7 + 3;
    do
    {
      _DWORD *v10 = *(v10 - 1) * v8;
      v10 += 4;
      --v9;
    }
    while (v9);
  }
  uint64_t v11 = *v6;
  if (v11)
  {
    uint64_t v12 = v6 + 3;
    do
    {
      _DWORD *v12 = *(v12 - 1) * v8;
      v12 += 4;
      --v11;
    }
    while (v11);
  }
  uint64_t result = (*(uint64_t (**)(ausdk::AUEffectBase *, uint64_t, unsigned int *, unsigned int *, uint64_t))(*(void *)this + 176))(this, v5, v7, v6, a4);
  uint64_t v14 = *v7;
  if (v14)
  {
    uint64_t v15 = v7 + 4;
    do
    {
      *v15 += (*((_DWORD *)v15 - 2) * v8);
      v15 += 2;
      --v14;
    }
    while (v14);
  }
  uint64_t v16 = *v6;
  if (v16)
  {
    BOOL v17 = v6 + 4;
    do
    {
      *v17 += (*((_DWORD *)v17 - 2) * v8);
      v17 += 2;
      --v16;
    }
    while (v16);
  }
  return result;
}

uint64_t ausdk::AUEffectBase::Render(ausdk::AUInputElement **this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  uint64_t v8 = sub_1A66F3F00((uint64_t)(this + 10), 0);
  if (!v8 || !*(_DWORD *)(v8 + 172)) {
    return 4294956420;
  }
  uint64_t v9 = ausdk::AUInputElement::PullInput(this[72], a2, a3, 0, a4);
  if (!v9)
  {
    if (*((unsigned char *)this + 554))
    {
      unint64_t v10 = this[71];
      if (*((unsigned char *)v10 + 168))
      {
        uint64_t v11 = (unsigned int *)sub_1A66F4190((uint64_t)this[72] + 144);
        sub_1A672070C((uint64_t)v10 + 144, v11);
      }
    }
    if ((*((unsigned int (**)(ausdk::AUInputElement **))*this + 74))(this))
    {
      if (!*((unsigned char *)this + 554))
      {
        uint64_t v12 = this[72];
        uint64_t v13 = (_DWORD *)sub_1A66F4190((uint64_t)this[71] + 144);
        sub_1A67207C0((void *)v12 + 18, v13);
      }
      uint64_t v9 = 0;
    }
    else
    {
      uint64_t v15 = this[48];
      uint64_t v16 = this[49];
      BOOL v17 = (unsigned int *)sub_1A66F4190((uint64_t)this[72] + 144);
      uint64_t v18 = sub_1A66F4190((uint64_t)this[71] + 144);
      uint64_t v19 = (unsigned int *)v18;
      if (v15 == v16)
      {
        uint64_t v9 = (*((uint64_t (**)(ausdk::AUInputElement **, unsigned int *, unsigned int *, uint64_t, uint64_t))*this
              + 22))(this, a2, v17, v18, a4);
      }
      else
      {
        v31[0] = a2;
        v31[1] = v17;
        v31[2] = v18;
        uint64_t v9 = (*((uint64_t (**)(ausdk::AUInputElement **, char *, uint64_t, void *))*this + 70))(this, (char *)this + 384, a4, v31);
        int v20 = *((_DWORD *)this + 147) * a4;
        uint64_t v21 = *v17;
        if (v21)
        {
          uint64_t v22 = v17 + 4;
          do
          {
            uint64_t v23 = (*((_DWORD *)v22 - 2) * v20);
            *v22 -= v23;
            *((_DWORD *)v22 - 1) = v23;
            v22 += 2;
            --v21;
          }
          while (v21);
        }
        uint64_t v24 = *v19;
        if (v24)
        {
          uint64_t v25 = v19 + 4;
          do
          {
            uint64_t v26 = (*((_DWORD *)v25 - 2) * v20);
            *v25 -= v26;
            *((_DWORD *)v25 - 1) = v26;
            v25 += 2;
            --v24;
          }
          while (v24);
        }
      }
    }
    if ((*(unsigned char *)a2 & 0x10) != 0 && !*((unsigned char *)this + 554))
    {
      uint64_t v27 = (_DWORD *)sub_1A66F4190((uint64_t)this[71] + 144);
      if (*v27)
      {
        char v28 = v27;
        unsigned int v29 = 0;
        uint64_t v30 = (void **)(v27 + 4);
        do
        {
          bzero(*v30, *((unsigned int *)v30 - 1));
          ++v29;
          v30 += 2;
        }
        while (v29 < *v28);
      }
    }
  }
  return v9;
}

uint64_t ausdk::AUEffectBase::ProcessBufferLists(ausdk::AUEffectBase *this, unsigned int *a2, const AudioBufferList *a3, AudioBufferList *a4, uint64_t a5)
{
  if (((*(uint64_t (**)(ausdk::AUEffectBase *))(*(void *)this + 592))(this) & 1) == 0)
  {
    char v10 = sub_1A67202B4((uint64_t)this, *a2, a5);
    *a2 |= 0x10u;
    uint64_t v11 = *((void *)this + 67);
    uint64_t v12 = *((void *)this + 66);
    if (v11 != v12)
    {
      char v13 = v10;
      unint64_t v14 = 0;
      unsigned int v15 = 1;
      do
      {
        uint64_t v16 = *(void *)(v12 + 8 * v14);
        if (v16)
        {
          char v18 = v13;
          (*(void (**)(uint64_t, void *, void *, uint64_t, char *))(*(void *)v16 + 24))(v16, a3->mBuffers[v14].mData, a4->mBuffers[v14].mData, a5, &v18);
          if (!v18) {
            *a2 &= ~0x10u;
          }
          uint64_t v11 = *((void *)this + 67);
          uint64_t v12 = *((void *)this + 66);
        }
        unint64_t v14 = v15++;
      }
      while (v14 < (v11 - v12) >> 3);
    }
  }
  return 0;
}

uint64_t sub_1A67202B4(uint64_t a1, char a2, unsigned int a3)
{
  double v6 = *(double *)(sub_1A66F4000(a1 + 128, 0) + 80);
  double v7 = (*(double (**)(uint64_t))(*(void *)a1 + 344))(a1);
  (*(void (**)(uint64_t))(*(void *)a1 + 352))(a1);
  if ((a2 & 0x10) == 0)
  {
    uint64_t result = 0;
    *(unsigned char *)(a1 + 560) = 1;
    return result;
  }
  if (!*(unsigned char *)(a1 + 560))
  {
    unsigned int v10 = *(_DWORD *)(a1 + 556);
    if (v10) {
      goto LABEL_5;
    }
    return 1;
  }
  unsigned int v10 = (v6 * (v7 + v8));
  *(_DWORD *)(a1 + 556) = v10;
  *(unsigned char *)(a1 + 560) = 0;
  if (!v10) {
    return 1;
  }
LABEL_5:
  uint64_t result = 0;
  BOOL v11 = v10 >= a3;
  unsigned int v12 = v10 - a3;
  if (!v11) {
    unsigned int v12 = 0;
  }
  *(_DWORD *)(a1 + 556) = v12;
  return result;
}

double ausdk::AUEffectBase::GetSampleRate(ausdk::AUEffectBase *this)
{
  return *(double *)(sub_1A66F4000((uint64_t)this + 128, 0) + 80);
}

void sub_1A67203E4(void **a1)
{
  *a1 = &unk_1EFB7D560;
  unsigned int v2 = a1 + 66;
  sub_1A67051A8(&v2);
  ausdk::AUBase::~AUBase((ausdk::AUBase *)a1);
}

uint64_t sub_1A6720440(void **a1)
{
  *a1 = &unk_1EFB7D560;
  uint64_t v3 = a1 + 66;
  sub_1A67051A8(&v3);
  ausdk::AUBase::~AUBase((ausdk::AUBase *)a1);
  return MEMORY[0x1AD0C0C70]();
}

uint64_t sub_1A67204B0(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1A6720528((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1A6720528(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    uint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_1A67205C0((uint64_t)v13);
  return v11;
}

uint64_t sub_1A67205C0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1A67205F8((void *)a1);
  }
  return a1;
}

void *sub_1A67205F8(void *result)
{
  size_t v1 = *(void ***)(result[2] + 8);
  unsigned int v2 = *(void ***)(result[1] + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    uint64_t *v1 = 0;
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
    ++v1;
  }
  return result;
}

void **sub_1A6720660(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *sub_1A6720698(void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      int v4[2] = v2 - 8;
      uint64_t result = *(void **)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

void *sub_1A672070C(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *a2;
  if (*(_DWORD *)(a1 + 16) < v2)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      sub_1A688F730();
    }
    exception = __cxa_allocate_exception(0x18uLL);
    sub_1A66E7DE8((uint64_t)exception, -1);
    __cxa_throw(exception, (struct type_info *)&unk_1EFB7D058, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  *(_DWORD *)a1 = 2;
  uint64_t v3 = (void *)(*(void *)(a1 + 8) + 48);

  return memcpy(v3, a2, (16 * v2) | 8);
}

void sub_1A67207AC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_1A67207C0(void *result, _DWORD *a2)
{
  if (!*(_DWORD *)result)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      sub_1A688F730();
    }
    exception = __cxa_allocate_exception(0x18uLL);
    sub_1A66E7DE8((uint64_t)exception, -1);
    __cxa_throw(exception, (struct type_info *)&unk_1EFB7D058, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  unsigned int v3 = *a2;
  if (*a2)
  {
    unsigned int v4 = 0;
    uint64_t v5 = result[1];
    uint64_t v6 = v5 + 56;
    uint64_t v7 = (void **)(a2 + 4);
    do
    {
      if (v4 < *(_DWORD *)(v5 + 48)) {
        uint64_t v8 = 0;
      }
      else {
        uint64_t v8 = -1;
      }
      uint64_t v9 = v6 + 16 * v8;
      uint64_t result = *v7;
      uint64_t v10 = *(void **)(v9 + 8);
      if (*v7 != v10)
      {
        uint64_t result = memmove(result, v10, *(unsigned int *)(v9 + 4));
        unsigned int v3 = *a2;
      }
      *((_DWORD *)v7 - 1) = *(_DWORD *)(v9 + 4);
      ++v4;
      uint64_t v6 = v9 + 16;
      v7 += 2;
    }
    while (v4 < v3);
  }
  return result;
}

void sub_1A67208A4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_1A6720934()
{
  uint64_t result = malloc_type_malloc(0x2E8uLL, 0xB0CA1167uLL);
  *uint64_t result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = AUSpeechEnhancerV2::AUSpeechEnhancerV2;
  result[6] = 0;
  result[7] = 0;
  result[5] = sub_1A67209B0;
  return result;
}

uint64_t sub_1A67209B0(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t sub_1A6720C40(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v19 = 0;
  int v20 = &v19;
  uint64_t v21 = 0x2050000000;
  uint64_t v5 = (void *)qword_1E96C4848;
  uint64_t v22 = qword_1E96C4848;
  if (!qword_1E96C4848)
  {
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    void v18[2] = sub_1A6724B9C;
    v18[3] = &unk_1E5C696C8;
    void v18[4] = &v19;
    sub_1A6724B9C((uint64_t)v18, a2, a3, a4, a5);
    uint64_t v5 = (void *)v20[3];
  }
  id v6 = v5;
  _Block_object_dispose(&v19, 8);
  uint64_t v11 = objc_msgSend_sharedInstance(v6, v7, v8, v9, v10);
  uint64_t v16 = objc_msgSend_allowAppUsage(v11, v12, v13, v14, v15);

  return v16;
}

void sub_1A6720D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

_TtC12TextToSpeech15CoreSynthesizer *sub_1A6720D34(void *a1)
{
  if (TTSUseCoreSynthesizerForAV())
  {
    objc_getAssociatedObject(a1, &unk_1E96C4839);
    uint64_t v2 = (_TtC12TextToSpeech15CoreSynthesizer *)objc_claimAutoreleasedReturnValue();
    if (!v2)
    {
      uint64_t v2 = objc_alloc_init(_TtC12TextToSpeech15CoreSynthesizer);
      objc_setAssociatedObject(a1, &unk_1E96C4839, v2, (void *)1);
    }
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

void sub_1A6720DBC(void *a1, uint64_t a2, void *a3)
{
}

id sub_1A6720DCC(void *a1)
{
  return objc_getAssociatedObject(a1, &unk_1E96C483A);
}

id sub_1A6720DD8(void *a1)
{
  if (TTSUseCoreSynthesizerForAV())
  {
    id v2 = 0;
  }
  else
  {
    objc_getAssociatedObject(a1, &unk_1E96C483B);
    id v2 = (id)objc_claimAutoreleasedReturnValue();
    if (!v2)
    {
      id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      objc_setAssociatedObject(a1, &unk_1E96C483B, v2, (void *)1);
    }
  }

  return v2;
}

void sub_1A6720E60(void *a1, uint64_t a2, void *a3)
{
  id value = a3;
  if ((TTSUseCoreSynthesizerForAV() & 1) == 0) {
    objc_setAssociatedObject(a1, &unk_1E96C483C, value, (void *)1);
  }
}

id sub_1A6720EC4(void *a1)
{
  if (TTSUseCoreSynthesizerForAV())
  {
    id v2 = 0;
  }
  else
  {
    id v2 = objc_getAssociatedObject(a1, &unk_1E96C483C);
  }

  return v2;
}

uint64_t sub_1A6720F18(void *a1)
{
  size_t v1 = objc_getAssociatedObject(a1, &unk_1E96C483D);
  uint64_t v6 = objc_msgSend_BOOLValue(v1, v2, v3, v4, v5);

  return v6;
}

void sub_1A6720F58(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_msgSend_numberWithBool_(NSNumber, a2, a3, a4, a5);
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_setAssociatedObject(a1, &unk_1E96C483D, v6, (void *)1);
}

uint64_t sub_1A6720FC0(void *a1)
{
  size_t v1 = objc_getAssociatedObject(a1, &unk_1E96C483E);
  uint64_t v6 = objc_msgSend_BOOLValue(v1, v2, v3, v4, v5);

  return v6;
}

void sub_1A6721000(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_msgSend_numberWithBool_(NSNumber, a2, a3, a4, a5);
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_setAssociatedObject(a1, &unk_1E96C483E, v6, (void *)1);
}

TTSSpeechManager *sub_1A6721068(void *a1)
{
  if (TTSUseCoreSynthesizerForAV())
  {
    id v2 = 0;
  }
  else
  {
    objc_getAssociatedObject(a1, &unk_1E96C483F);
    id v2 = (TTSSpeechManager *)objc_claimAutoreleasedReturnValue();
    if (!v2)
    {
      id v2 = objc_alloc_init(TTSSpeechManager);
      uint64_t v7 = objc_msgSend_speechSource(a1, v3, v4, v5, v6);
      objc_msgSend_setSpeechSource_(v2, v8, (uint64_t)v7, v9, v10);

      objc_setAssociatedObject(a1, &unk_1E96C483F, v2, (void *)1);
    }
  }

  return v2;
}

void sub_1A6721118(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  objc_setAssociatedObject(a1, &unk_1E96C4840, v4, (void *)1);
  objc_msgSend_speechManager(a1, v5, v6, v7, v8);
  id v12 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setSpeechSource_(v12, v9, (uint64_t)v4, v10, v11);
}

id sub_1A6721190(void *a1)
{
  return objc_getAssociatedObject(a1, &unk_1E96C4840);
}

uint64_t sub_1A672119C()
{
  return MEMORY[0x1E4F1CC28];
}

uint64_t sub_1A67211AC()
{
  return MEMORY[0x1E4F1CC38];
}

uint64_t sub_1A67211BC(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = objc_msgSend_speechManager(a1, a2, a3, a4, a5);
  uint64_t active = objc_msgSend_setActiveOptions(v5, v6, v7, v8, v9);

  return active;
}

void sub_1A67211F4(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_msgSend_speechManager(a1, a2, a3, a4, a5);
  id v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setSetActiveOptions_(v9, v6, a3, v7, v8);
}

uint64_t sub_1A6721244(void *a1)
{
  size_t v1 = objc_getAssociatedObject(a1, &unk_1E96C4841);
  uint64_t v6 = objc_msgSend_BOOLValue(v1, v2, v3, v4, v5);

  return v6;
}

void sub_1A6721284(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_msgSend_numberWithBool_(NSNumber, a2, a3, a4, a5);
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_setAssociatedObject(a1, &unk_1E96C4841, v6, (void *)1);
}

void sub_1A67212EC(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (TTSUseCoreSynthesizerForAV())
  {
    objc_msgSend_coreSynth(a1, v5, v6, v7, v8);
    id v15 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setAuxSessionCategory_(v15, v9, (uint64_t)v4, v10, v11);
  }
  else
  {
    objc_msgSend_speechManager(a1, v5, v6, v7, v8);
    id v15 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setAudioSessionCategory_(v15, v12, (uint64_t)v4, v13, v14);
  }
}

id sub_1A6721370(void *a1)
{
  if (TTSUseCoreSynthesizerForAV())
  {
    uint64_t v6 = objc_msgSend_coreSynth(a1, v2, v3, v4, v5);
    objc_msgSend_auxSessionCategory(v6, v7, v8, v9, v10);
  }
  else
  {
    uint64_t v6 = objc_msgSend_speechManager(a1, v2, v3, v4, v5);
    objc_msgSend_audioSessionCategory(v6, v11, v12, v13, v14);
  id v15 = };

  return v15;
}

void sub_1A67213E8(void *a1, uint64_t a2, uint64_t a3)
{
  if (TTSUseCoreSynthesizerForAV())
  {
    objc_msgSend_coreSynth(a1, v5, v6, v7, v8);
    id v15 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setAuxSessionCategoryOptions_(v15, v9, a3, v10, v11);
  }
  else
  {
    objc_msgSend_speechManager(a1, v5, v6, v7, v8);
    id v15 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setAudioSessionCategoryOptions_(v15, v12, a3, v13, v14);
  }
}

uint64_t sub_1A6721464(void *a1)
{
  if (TTSUseCoreSynthesizerForAV())
  {
    uint64_t v6 = objc_msgSend_coreSynth(a1, v2, v3, v4, v5);
    uint64_t v11 = objc_msgSend_auxSessionCategoryOptions(v6, v7, v8, v9, v10);
  }
  else
  {
    uint64_t v6 = objc_msgSend_speechManager(a1, v2, v3, v4, v5);
    uint64_t v11 = objc_msgSend_audioSessionCategoryOptions(v6, v12, v13, v14, v15);
  }
  uint64_t v16 = v11;

  return v16;
}

uint64_t sub_1A67214C4(void *a1)
{
  if (TTSUseCoreSynthesizerForAV())
  {
    uint64_t v6 = objc_msgSend_coreSynth(a1, v2, v3, v4, v5);
    int v11 = objc_msgSend_useAuxiliarySession(v6, v7, v8, v9, v10);
  }
  else
  {
    uint64_t v6 = objc_msgSend_speechManager(a1, v2, v3, v4, v5);
    int v11 = objc_msgSend_usesAuxiliarySession(v6, v12, v13, v14, v15);
  }
  int v16 = v11;

  return v16 ^ 1u;
}

void sub_1A6721524(void *a1, uint64_t a2, int a3)
{
  uint64_t v8 = a3 ^ 1u;
  if (TTSUseCoreSynthesizerForAV())
  {
    objc_msgSend_coreSynth(a1, v4, v5, v6, v7);
    id v15 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setUseAuxiliarySession_(v15, v9, v8, v10, v11);
  }
  else
  {
    objc_msgSend_speechManager(a1, v4, v5, v6, v7);
    id v15 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setUsesAuxiliarySession_(v15, v12, v8, v13, v14);
  }
}

id sub_1A67215A4(void *a1)
{
  if (TTSUseCoreSynthesizerForAV()) {
    objc_msgSend_coreSynth(a1, v2, v3, v4, v5);
  }
  else {
  uint64_t v6 = objc_msgSend_speechManager(a1, v2, v3, v4, v5);
  }
  uint64_t v11 = objc_msgSend_audioSession(v6, v7, v8, v9, v10);

  return v11;
}

uint64_t sub_1A6721610(void *a1)
{
  if (TTSUseCoreSynthesizerForAV()) {
    objc_msgSend_coreSynth(a1, v2, v3, v4, v5);
  }
  else {
  uint64_t v6 = objc_msgSend_speechManager(a1, v2, v3, v4, v5);
  }
  uint64_t v11 = objc_msgSend_audioQueueFlags(v6, v7, v8, v9, v10);

  return v11;
}

void sub_1A6721668(void *a1, uint64_t a2, uint64_t a3)
{
  if (TTSUseCoreSynthesizerForAV()) {
    objc_msgSend_coreSynth(a1, v5, v6, v7, v8);
  }
  else {
    objc_msgSend_speechManager(a1, v5, v6, v7, v8);
  }
  id v12 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setAudioQueueFlags_(v12, v9, a3, v10, v11);
}

uint64_t sub_1A67216D8(void *a1)
{
  if (TTSUseCoreSynthesizerForAV())
  {
    uint64_t v6 = objc_msgSend_coreSynth(a1, v2, v3, v4, v5);
    uint64_t v11 = objc_msgSend_mixToTelephonyUplink(v6, v7, v8, v9, v10);
  }
  else
  {
    uint64_t v6 = objc_msgSend_speechManager(a1, v2, v3, v4, v5);
    uint64_t v11 = (objc_msgSend_audioQueueFlags(v6, v12, v13, v14, v15) >> 8) & 1;
  }

  return v11;
}

void sub_1A672173C(void *a1, uint64_t a2, uint64_t a3)
{
  if (TTSUseCoreSynthesizerForAV())
  {
    objc_msgSend_coreSynth(a1, v5, v6, v7, v8);
    id v27 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setMixToTelephonyUplink_(v27, v9, a3, v10, v11);
  }
  else
  {
    id v12 = objc_msgSend_speechManager(a1, v5, v6, v7, v8);
    int v17 = objc_msgSend_audioQueueFlags(v12, v13, v14, v15, v16);

    if (a3) {
      int v22 = 256;
    }
    else {
      int v22 = 0;
    }
    uint64_t v23 = v17 & 0xFFFFFEFF | v22;
    objc_msgSend_speechManager(a1, v18, v19, v20, v21);
    id v27 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setAudioQueueFlags_(v27, v24, v23, v25, v26);
  }
}

uint64_t sub_1A67217F0(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = objc_msgSend_speechManager(a1, a2, a3, a4, a5);
  uint64_t v10 = objc_msgSend_isInAudioInterruption(v5, v6, v7, v8, v9);

  return v10;
}

id sub_1A6721828(void *a1)
{
  if (TTSUseCoreSynthesizerForAV())
  {
    uint64_t v6 = objc_msgSend_coreSynth(a1, v2, v3, v4, v5);
    objc_msgSend_channels(v6, v7, v8, v9, v10);
  }
  else
  {
    uint64_t v6 = objc_msgSend_speechManager(a1, v2, v3, v4, v5);
    objc_msgSend_outputChannels(v6, v11, v12, v13, v14);
  uint64_t v15 = };

  return v15;
}

void sub_1A67218A0(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (TTSUseCoreSynthesizerForAV())
  {
    objc_msgSend_coreSynth(a1, v5, v6, v7, v8);
    id v15 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setChannels_(v15, v9, (uint64_t)v4, v10, v11);
  }
  else
  {
    objc_msgSend_speechManager(a1, v5, v6, v7, v8);
    id v15 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setOutputChannels_(v15, v12, (uint64_t)v4, v13, v14);
  }
}

id sub_1A6721924(void *a1)
{
  v8.receiver = a1;
  v8.super_class = (Class)&off_1EFBA7DC0;
  id v1 = objc_msgSendSuper2(&v8, sel_init);
  id v6 = v1;
  if (v1) {
    objc_msgSend_prepareSpeechManager(v1, v2, v3, v4, v5);
  }
  return v6;
}

id sub_1A6721978(void *a1)
{
  if (TTSUseCoreSynthesizerForAV())
  {
    id v6 = objc_msgSend_coreSynth(a1, v2, v3, v4, v5);
    objc_msgSend_stopSpeakingAt_completionHandler_(v6, v7, 0, (uint64_t)&unk_1EFB80440, v8);
  }
  else
  {
    id v6 = objc_msgSend_inflightUtterance(a1, v2, v3, v4, v5);
    uint64_t v13 = objc_msgSend_action(v6, v9, v10, v11, v12);
    objc_msgSend_setOnSpeechStartCallback_(v13, v14, 0, v15, v16);
    objc_msgSend_setOnPauseCallback_(v13, v17, 0, v18, v19);
    objc_msgSend_setOnResumeCallback_(v13, v20, 0, v21, v22);
    objc_msgSend_setOnWillSpeakRangeCallback_(v13, v23, 0, v24, v25);
    objc_msgSend_setCompletionCallback_(v13, v26, 0, v27, v28);
    objc_msgSend_setOnMarkerCallback_(v13, v29, 0, v30, v31);
    id v36 = objc_msgSend_defaultCenter(MEMORY[0x1E4F28EB8], v32, v33, v34, v35);
    objc_msgSend_removeObserver_(v36, v37, (uint64_t)a1, v38, v39);

    uint64_t v44 = objc_msgSend_speechManager(a1, v40, v41, v42, v43);
    objc_msgSend_tearDown(v44, v45, v46, v47, v48);

    objc_msgSend_tearDownWarmupManager(a1, v49, v50, v51, v52);
  }

  v54.receiver = a1;
  v54.super_class = (Class)&off_1EFBA7DC0;
  return objc_msgSendSuper2(&v54, sel_dealloc);
}

void sub_1A6721A9C(void *a1)
{
  if ((TTSUseCoreSynthesizerForAV() & 1) == 0)
  {
    uint64_t v8 = objc_alloc_init(TTSSpeechManager);
    objc_setAssociatedObject(a1, &unk_1E96C4842, v8, (void *)1);
    uint64_t v4 = objc_msgSend_actionWithString_shouldQueue_(TTSSpeechAction, v2, (uint64_t)&stru_1EFB83720, 0, v3);
    objc_msgSend_dispatchSpeechAction_(v8, v5, (uint64_t)v4, v6, v7);
  }
}

void sub_1A6721B48(void *a1)
{
  if ((TTSUseCoreSynthesizerForAV() & 1) == 0)
  {
    id v2 = objc_getAssociatedObject(a1, &unk_1E96C4842);
    if (v2)
    {
      id v11 = v2;
      if (objc_msgSend_isSpeaking(v2, v3, v4, v5, v6)) {
        objc_msgSend_stopSpeaking(v11, v7, v8, v9, v10);
      }
      objc_msgSend_tearDown(v11, v7, v8, v9, v10);
      objc_setAssociatedObject(a1, &unk_1E96C4842, 0, (void *)1);
      id v2 = v11;
    }
  }
}

void sub_1A6721BE8(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  objc_msgSend_speechManager(a1, a2, a3, a4, a5);
  id v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setAudioSessionInactiveTimeout_(v11, v7, v8, v9, v10, a6);
}

void sub_1A6721C38(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = objc_msgSend_speechQueue(a1, a2, a3, a4, a5);
  uint64_t v11 = objc_msgSend_count(v6, v7, v8, v9, v10);

  if (v11)
  {
    uint64_t v16 = objc_msgSend_speechQueue(a1, v12, v13, v14, v15);
    objc_msgSend_objectAtIndex_(v16, v17, 0, v18, v19);
    id v23 = (id)objc_claimAutoreleasedReturnValue();

    objc_msgSend__speakUtterance_(a1, v20, (uint64_t)v23, v21, v22);
  }
}

void sub_1A6721CDC(void *a1, uint64_t a2, void *a3, int a4)
{
  id v45 = a3;
  id v6 = a1;
  objc_sync_enter(v6);
  uint64_t v11 = objc_msgSend_speechQueue(v6, v7, v8, v9, v10);
  objc_msgSend_removeObjectIdenticalTo_(v11, v12, (uint64_t)v45, v13, v14);

  objc_msgSend_setInflightUtterance_(v6, v15, 0, v16, v17);
  uint64_t v22 = objc_msgSend_speechQueue(v6, v18, v19, v20, v21);
  uint64_t v27 = objc_msgSend_count(v22, v23, v24, v25, v26);

  CFRetain(v6);
  if (a4)
  {
    id v32 = objc_msgSend_delegate(v6, v28, v29, v30, v31);
    char v33 = objc_opt_respondsToSelector();

    if ((v33 & 1) == 0) {
      goto LABEL_7;
    }
    uint64_t v38 = objc_msgSend_delegate(v6, v34, v35, v36, v37);
    objc_msgSend_speechSynthesizer_didFinishSpeechUtterance_(v38, v39, (uint64_t)v6, (uint64_t)v45, v40);
  }
  else
  {
    uint64_t v41 = objc_msgSend_delegate(v6, v28, v29, v30, v31);
    char v42 = objc_opt_respondsToSelector();

    if ((v42 & 1) == 0) {
      goto LABEL_7;
    }
    uint64_t v38 = objc_msgSend_delegate(v6, v34, v35, v36, v37);
    objc_msgSend_speechSynthesizer_didCancelSpeechUtterance_(v38, v43, (uint64_t)v6, (uint64_t)v45, v44);
  }

LABEL_7:
  if (v27) {
    objc_msgSend__enqueueNextJob(v6, v34, v35, v36, v37);
  }
  CFRelease(v6);
  objc_sync_exit(v6);
}

void sub_1A6721E38(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1A6721E50(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = objc_msgSend_initializedWebKitUsage(a1, a2, a3, a4, a5);
  if ((result & 1) == 0)
  {
    uint64_t v11 = objc_msgSend_delegate(a1, v7, v8, v9, v10);
    NSClassFromString(&cfstr_Webspeechsynth.isa);
    char isKindOfClass = objc_opt_isKindOfClass();

    if (isKindOfClass)
    {
      uint64_t v16 = AXLogSpeechSynthesis();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)id v23 = 0;
        _os_log_impl(&dword_1A66D3000, v16, OS_LOG_TYPE_INFO, "Changing audio session and category options for WebKit usage", v23, 2u);
      }

      objc_msgSend_setUsesApplicationAudioSession_(a1, v17, 0, v18, v19);
      objc_msgSend_setDetectSSMLAndModifyUtterances_(a1, v20, 1, v21, v22);
    }
    return objc_msgSend_setInitializedWebKitUsage_(a1, v13, 1, v14, v15);
  }
  return result;
}

void sub_1A6721F24(void *a1, uint64_t a2, void *a3)
{
  uint64_t v775 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  objc_msgSend_tearDownWarmupManager(a1, v5, v6, v7, v8);
  uint64_t v13 = objc_msgSend_voiceSelection(v4, v9, v10, v11, v12);
  uint64_t v18 = objc_msgSend_voiceId(v13, v14, v15, v16, v17);
  id v23 = v18;
  if (v18)
  {
    id v24 = v18;
  }
  else
  {
    uint64_t v25 = objc_msgSend_voice(v4, v19, v20, v21, v22);
    objc_msgSend_identifier(v25, v26, v27, v28, v29);
    id v24 = (id)objc_claimAutoreleasedReturnValue();
  }
  uint64_t v34 = objc_msgSend_voiceSelection(v4, v30, v31, v32, v33);
  uint64_t v43 = objc_msgSend_rate(v34, v35, v36, v37, v38);
  if (v43)
  {
    uint64_t v44 = objc_msgSend_voiceSelection(v4, v39, v40, v41, v42);
    uint64_t v49 = objc_msgSend_rate(v44, v45, v46, v47, v48);
    objc_msgSend_floatValue(v49, v50, v51, v52, v53);
    float v55 = v54;
  }
  else
  {
    objc_msgSend_rate(v4, v39, v40, v41, v42);
    float v55 = v56;
  }

  objc_msgSend_pitchMultiplier(v4, v57, v58, v59, v60);
  float v62 = v61;
  uint64_t v67 = objc_msgSend_voiceSelection(v4, v63, v64, v65, v66);
  uint64_t v72 = objc_msgSend_pitch(v67, v68, v69, v70, v71);

  if (v72)
  {
    uint64_t v77 = objc_msgSend_voiceSelection(v4, v73, v74, v75, v76);
    uint64_t v82 = objc_msgSend_pitch(v77, v78, v79, v80, v81);
    objc_msgSend_floatValue(v82, v83, v84, v85, v86);
    float v88 = v87;
    double v89 = v87;

    if (v88 >= 0.5) {
      double v90 = (v89 + -0.5) * 2.0 + 1.0;
    }
    else {
      double v90 = v89 + 0.5;
    }
  }
  else
  {
    double v90 = v62;
  }
  uint64_t v91 = objc_msgSend_voiceSelection(v4, v73, v74, v75, v76);
  uint64_t v100 = objc_msgSend_volume(v91, v92, v93, v94, v95);
  if (v100)
  {
    uint64_t v101 = objc_msgSend_voiceSelection(v4, v96, v97, v98, v99);
    uint64_t v106 = objc_msgSend_volume(v101, v102, v103, v104, v105);
    objc_msgSend_floatValue(v106, v107, v108, v109, v110);
    float v112 = v111;
  }
  else
  {
    objc_msgSend_volume(v4, v96, v97, v98, v99);
    float v112 = v113;
  }
  double v114 = v55;
  double v115 = v112;

  if (!objc_msgSend_prefersAssistiveTechnologySettings(v4, v116, v117, v118, v119))
  {
    uint64_t v160 = (uint64_t)v24;
    if (v24) {
      goto LABEL_51;
    }
    goto LABEL_45;
  }
  uint64_t v124 = objc_msgSend_voice(v4, v120, v121, v122, v123);
  uint64_t v129 = objc_msgSend_language(v124, v125, v126, v127, v128);

  if (!v129)
  {
    uint64_t v129 = objc_msgSend_currentLanguageCode(MEMORY[0x1E4F15478], v130, v131, v132, v133);
  }
  uint64_t v134 = TTSLanguageCanonicalFormToGeneralLanguage(v129, v130, v131, v132, v133);
  uint64_t v135 = _AXSVoiceOverTouchEnabled();
  if (v135)
  {
    LOBYTE(buf) = 0;
    id v140 = sub_1A67233AC(v135, v136, v137, v138, v139);
    uint64_t v145 = objc_msgSend_sharedInstance(v140, v141, v142, v143, v144);
    uint64_t v150 = sub_1A6723490((uint64_t)v145, v146, v147, v148, v149);
    uint64_t v152 = objc_msgSend_speechVoiceIdentifierForLanguage_sourceKey_exists_(v145, v151, (uint64_t)v134, (uint64_t)v150, (uint64_t)&buf);

    int v158 = buf;
    if ((_BYTE)buf)
    {
      uint64_t v159 = (uint64_t)v152;
    }
    else
    {
      id v261 = sub_1A67233AC(v153, v154, v155, v156, v157);
      v266 = objc_msgSend_sharedInstance(v261, v262, v263, v264, v265);
      uint64_t v271 = sub_1A6723490((uint64_t)v266, v267, v268, v269, v270);
      uint64_t v273 = objc_msgSend_speechVoiceIdentifierForLanguage_sourceKey_exists_(v266, v272, (uint64_t)v129, (uint64_t)v271, (uint64_t)&buf);

      uint64_t v159 = v273;
    }
    unint64_t v189 = (void *)v159;
    v274 = objc_msgSend__voiceFromInternalVoiceListWithIdentifier_(MEMORY[0x1E4F15478], v154, v159, v156, v157);
    long long v279 = objc_msgSend_prefersAssistiveTechnologyExceptions(v4, v275, v276, v277, v278);
    char v283 = objc_msgSend_containsObject_(v279, v280, @"rate", v281, v282);

    if ((v283 & 1) == 0)
    {
      id v289 = sub_1A67233AC(v284, v285, v286, v287, v288);
      uint64_t v294 = objc_msgSend_sharedInstance(v289, v290, v291, v292, v293);
      v299 = v294;
      if (v158)
      {
        objc_msgSend_voiceOverSpeakingRateForLanguage_(v294, v295, (uint64_t)v134, v297, v298);
        float v301 = v300;
      }
      else
      {
        v302 = objc_msgSend_language(v274, v295, v296, v297, v298);
        objc_msgSend_voiceOverSpeakingRateForLanguage_(v299, v303, (uint64_t)v302, v304, v305);
        float v301 = v306;
      }
      double v114 = v301;
      if (fabs(v301 + -3.40282347e38) < 0.001)
      {
        uint64_t v284 = _AXSVoiceOverTouchSpeakingRate();
        double v114 = v307;
      }
    }
    id v308 = sub_1A67233AC(v284, v285, v286, v287, v288);
    v313 = objc_msgSend_sharedInstance(v308, v309, v310, v311, v312);
    objc_msgSend_voiceOverPitch(v313, v314, v315, v316, v317);
    double v319 = v318;

    if (v319 <= 0.5) {
      double v90 = v319 + 0.5;
    }
    else {
      double v90 = v319 + v319;
    }
    _AXSVoiceOverTouchVolume();
    float v321 = v320;

    double v115 = v321;
  }
  else
  {
    uint64_t v161 = _AXSAssistiveTouchScannerEnabled();
    if (v161
      && (id v166 = sub_1A67233AC(v161, v162, v163, v164, v165),
          objc_msgSend_sharedInstance(v166, v167, v168, v169, v170),
          long long v171 = objc_claimAutoreleasedReturnValue(),
          int v176 = objc_msgSend_assistiveTouchScannerSpeechEnabled(v171, v172, v173, v174, v175),
          v171,
          v176))
    {
      LOBYTE(buf) = 0;
      id v177 = sub_1A67233AC(v161, v162, v163, v164, v165);
      uint64_t v182 = objc_msgSend_sharedInstance(v177, v178, v179, v180, v181);
      uint64_t v187 = sub_1A6723598((uint64_t)v182, v183, v184, v185, v186);
      unint64_t v189 = objc_msgSend_speechVoiceIdentifierForLanguage_sourceKey_exists_(v182, v188, (uint64_t)v134, (uint64_t)v187, (uint64_t)&buf);

      if (!(_BYTE)buf)
      {
        id v195 = sub_1A67233AC(v190, v191, v192, v193, v194);
        uint64_t v200 = objc_msgSend_sharedInstance(v195, v196, v197, v198, v199);
        uint64_t v205 = sub_1A6723598((uint64_t)v200, v201, v202, v203, v204);
        uint64_t v207 = objc_msgSend_speechVoiceIdentifierForLanguage_sourceKey_exists_(v200, v206, (uint64_t)v129, (uint64_t)v205, (uint64_t)&buf);

        unint64_t v189 = (void *)v207;
      }
      id v208 = sub_1A67233AC(v190, v191, v192, v193, v194);
      uint64_t v213 = objc_msgSend_sharedInstance(v208, v209, v210, v211, v212);
      objc_msgSend_assistiveTouchScannerSpeechRate(v213, v214, v215, v216, v217);
      double v114 = v218;
    }
    else
    {
      LOBYTE(buf) = 0;
      id v219 = sub_1A67233AC(v161, v162, v163, v164, v165);
      uint64_t v224 = objc_msgSend_sharedInstance(v219, v220, v221, v222, v223);
      uint64_t v229 = sub_1A67236A0((uint64_t)v224, v225, v226, v227, v228);
      unint64_t v189 = objc_msgSend_speechVoiceIdentifierForLanguage_sourceKey_exists_(v224, v230, (uint64_t)v134, (uint64_t)v229, (uint64_t)&buf);

      if (!(_BYTE)buf)
      {
        id v236 = sub_1A67233AC(v231, v232, v233, v234, v235);
        v241 = objc_msgSend_sharedInstance(v236, v237, v238, v239, v240);
        long long v246 = sub_1A67236A0((uint64_t)v241, v242, v243, v244, v245);
        uint64_t v248 = objc_msgSend_speechVoiceIdentifierForLanguage_sourceKey_exists_(v241, v247, (uint64_t)v129, (uint64_t)v246, (uint64_t)&buf);

        unint64_t v189 = (void *)v248;
      }
      id v249 = sub_1A67233AC(v231, v232, v233, v234, v235);
      v254 = objc_msgSend_sharedInstance(v249, v250, v251, v252, v253);
      objc_msgSend_quickSpeakSpeakingRate(v254, v255, v256, v257, v258);
      float v260 = v259;

      double v114 = v260;
    }
  }
  v322 = AXLogSpeechSynthesis();
  if (os_log_type_enabled(v322, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = v4;
    _os_log_impl(&dword_1A66D3000, v322, OS_LOG_TYPE_INFO, "Using AT preferred settings for voice and rate for: %@", (uint8_t *)&buf, 0xCu);
  }

  uint64_t v160 = (uint64_t)v189;
  if (!v189)
  {
LABEL_45:
    v323 = (void *)MEMORY[0x1E4F15478];
    v324 = objc_msgSend_voice(v4, v120, v160, v122, v123);
    v329 = objc_msgSend_language(v324, v325, v326, v327, v328);
    unint64_t v333 = objc_msgSend_voiceWithLanguage_(v323, v330, (uint64_t)v329, v331, v332);

    v338 = objc_msgSend_identifier(v333, v334, v335, v336, v337);
    LODWORD(v324) = v338 == 0;

    if (v324)
    {
      v347 = objc_msgSend_speechManager(a1, v339, v340, v341, v342);
      unint64_t v352 = objc_msgSend_voice(v4, v348, v349, v350, v351);
      unint64_t v357 = objc_msgSend_language(v352, v353, v354, v355, v356);
      v361 = objc_msgSend_voiceIdentifierUsedForLanguage_(v347, v358, (uint64_t)v357, v359, v360);
      uint64_t v366 = objc_msgSend_voice(v4, v362, v363, v364, v365);
      objc_msgSend_setIdentifier_(v366, v367, (uint64_t)v361, v368, v369);
    }
    else
    {
      objc_msgSend_setVoice_(v4, v339, (uint64_t)v333, v341, v342);
    }
    v370 = objc_msgSend_voice(v4, v343, v344, v345, v346);
    uint64_t v375 = objc_msgSend_identifier(v370, v371, v372, v373, v374);

    unint64_t v376 = AXLogSpeechSynthesis();
    if (os_log_type_enabled(v376, OS_LOG_TYPE_INFO))
    {
      unint64_t v381 = objc_msgSend_voice(v4, v377, v378, v379, v380);
      v386 = objc_msgSend_identifier(v381, v382, v383, v384, v385);
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v386;
      _os_log_impl(&dword_1A66D3000, v376, OS_LOG_TYPE_INFO, "utterance had bad voice, remaking it %{public}@", (uint8_t *)&buf, 0xCu);
    }
    uint64_t v160 = v375;
  }
LABEL_51:
  v743 = (void *)v160;
  if (objc_msgSend_isSiriVoiceIdentifier_(TTSAlternativeVoices, v120, v160, v122, v123)
    && (objc_msgSend_isInternalSynth(a1, v387, v388, v389, v390) & 1) == 0)
  {
    uint64_t v391 = objc_msgSend_speechManager(a1, v387, v388, v389, v390);
    v396 = objc_msgSend_voice(v4, v392, v393, v394, v395);
    v401 = objc_msgSend_language(v396, v397, v398, v399, v400);
    unint64_t v405 = objc_msgSend_externalVoiceIdentifierUsedForLanguage_(v391, v402, (uint64_t)v401, v403, v404);
    v410 = objc_msgSend_voice(v4, v406, v407, v408, v409);
    objc_msgSend_setIdentifier_(v410, v411, (uint64_t)v405, v412, v413);

    v418 = objc_msgSend_voice(v4, v414, v415, v416, v417);
    uint64_t v423 = objc_msgSend_identifier(v418, v419, v420, v421, v422);

    v743 = (void *)v423;
  }
  unint64_t v424 = objc_msgSend_voice(v4, v387, v388, v389, v390);
  unint64_t v429 = objc_msgSend_identifier(v424, v425, v426, v427, v428);
  char isEqualToString = objc_msgSend_isEqualToString_(v743, v430, (uint64_t)v429, v431, v432);

  if ((isEqualToString & 1) == 0)
  {
    uint64_t v440 = objc_msgSend_voiceWithIdentifier_(MEMORY[0x1E4F15478], v434, (uint64_t)v743, v435, v436);
    if (v440)
    {
      objc_msgSend_setVoice_(v4, v437, (uint64_t)v440, v438, v439);
      unint64_t v441 = AXLogSpeechSynthesis();
      if (os_log_type_enabled(v441, OS_LOG_TYPE_INFO))
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1A66D3000, v441, OS_LOG_TYPE_INFO, "Updating voice on utterance to match preferred technology", (uint8_t *)&buf, 2u);
      }
    }
  }
  objc_msgSend_setInflightUtterance_(a1, v434, (uint64_t)v4, v435, v436);
  objc_msgSend_preUtteranceDelay(v4, v442, v443, v444, v445);
  if (v450 > 0.0)
  {
    uint64_t v451 = objc_msgSend_pauseMarkupString_(TTSSpeechManager, v446, (uint64_t)v743, v448, v449);
    uint64_t v452 = NSString;
    objc_msgSend_preUtteranceDelay(v4, v453, v454, v455, v456);
    v461 = objc_msgSend_stringWithFormat_(v452, v458, (uint64_t)v451, v459, v460, (int)(v457 * 1000.0));
    uint64_t v464 = objc_msgSend_actionWithString_shouldQueue_(TTSSpeechAction, v462, (uint64_t)v461, 1, v463);
    objc_msgSend_setVoiceIdentifier_(v464, v465, (uint64_t)v743, v466, v467);
    unint64_t v472 = objc_msgSend_speechManager(a1, v468, v469, v470, v471);
    objc_msgSend_dispatchSpeechAction_(v472, v473, (uint64_t)v464, v474, v475);
  }
  uint64_t v476 = objc_msgSend_ssmlRepresentation(v4, v446, v447, v448, v449);
  BOOL v477 = v476 == 0;

  if (v477)
  {
    uint64_t v486 = objc_msgSend_attributedSpeechString(v4, v478, v479, v480, v481);
    BOOL v487 = v486 == 0;

    if (v487)
    {
      v482 = objc_msgSend_speechString(v4, v488, v489, v490, v491);
      objc_msgSend_actionWithString_shouldQueue_(TTSSpeechAction, v494, (uint64_t)v482, 1, v495);
    }
    else
    {
      v482 = objc_msgSend_attributedSpeechString(v4, v488, v489, v490, v491);
      objc_msgSend_actionWithAttributedString_shouldQueue_(TTSSpeechAction, v492, (uint64_t)v482, 1, v493);
    uint64_t v485 = };
  }
  else
  {
    v482 = objc_msgSend_ssmlRepresentation(v4, v478, v479, v480, v481);
    uint64_t v485 = objc_msgSend_actionWithSSMLRepresentation_shouldQueue_(TTSSpeechAction, v483, (uint64_t)v482, 1, v484);
  }
  unint64_t v496 = (void *)v485;

  if (v743) {
    objc_msgSend_setVoiceIdentifier_(v496, v497, (uint64_t)v743, v499, v500);
  }
  unint64_t v501 = objc_msgSend_voice(v4, v497, v498, v499, v500);
  BOOL v502 = v501 == 0;

  if (!v502)
  {
    long long v507 = objc_msgSend_voice(v4, v503, v504, v505, v506);
    uint64_t v512 = objc_msgSend_language(v507, v508, v509, v510, v511);
    objc_msgSend_setLanguage_(v496, v513, (uint64_t)v512, v514, v515);
  }
  v516 = objc_msgSend_audioBufferCallback(v4, v503, v504, v505, v506);
  objc_msgSend_setAudioBufferCallback_(v496, v517, (uint64_t)v516, v518, v519);

  uint64_t v524 = objc_msgSend_markerCallback(v4, v520, v521, v522, v523);
  objc_msgSend_setMarkerCallback_(v496, v525, (uint64_t)v524, v526, v527);

  unint64_t v532 = objc_msgSend_audioBufferCallback(v4, v528, v529, v530, v531);
  objc_msgSend_setSynthesizeSilently_(v496, v533, v532 != 0, v534, v535);

  objc_msgSend_setSpeakingRate_(v496, v536, v537, v538, v539, v114);
  objc_msgSend_setPitch_(v496, v540, v541, v542, v543, v90);
  objc_msgSend_setVolume_(v496, v544, v545, v546, v547, v115);
  objc_msgSend_setShouldProcessEmoji_(v496, v548, 1, v549, v550);
  long long v555 = objc_msgSend_voiceSelection(v4, v551, v552, v553, v554);
  objc_msgSend_setVoiceSelection_(v496, v556, (uint64_t)v555, v557, v558);

  if (objc_opt_respondsToSelector())
  {
    uint64_t v563 = objc_msgSend_processEmoticons(v4, v559, v560, v561, v562);
    objc_msgSend_setShouldProcessEmoticons_(v496, v564, v563, v565, v566);
  }
  objc_msgSend_setUtterance_(v496, v559, (uint64_t)v4, v561, v562);
  objc_msgSend_setAction_(v4, v567, (uint64_t)v496, v568, v569);
  if (_AXSVoiceOverTouchEnabled())
  {
    v574 = objc_msgSend_string(v496, v570, v571, v572, v573);
    BOOL v575 = v574 == 0;

    if (v575)
    {
      uint64_t v596 = objc_msgSend_attributedString(v496, v576, v577, v578, v579);
      BOOL v597 = v596 == 0;

      if (v597) {
        goto LABEL_90;
      }
      id v598 = objc_alloc(MEMORY[0x1E4F28E48]);
      long long v603 = objc_msgSend_attributedString(v496, v599, v600, v601, v602);
      uint64_t v595 = objc_msgSend_initWithAttributedString_(v598, v604, (uint64_t)v603, v605, v606);

      unint64_t v585 = sub_1A67237A8(v607, v608, v609, v610, v611);
      v767 = v585;
      uint64_t v768 = MEMORY[0x1E4F1CC38];
      v590 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v612, (uint64_t)&v768, (uint64_t)&v767, 1);
      unint64_t v592 = objc_msgSend_attributedString(v496, v613, v614, v615, v616);
      uint64_t v621 = objc_msgSend_length(v592, v617, v618, v619, v620);
      objc_msgSend_setAttributes_range_(v595, v622, (uint64_t)v590, 0, v621);
    }
    else
    {
      id v580 = objc_alloc(MEMORY[0x1E4F28E48]);
      unint64_t v585 = objc_msgSend_string(v496, v581, v582, v583, v584);
      v590 = sub_1A67237A8((uint64_t)v585, v586, v587, v588, v589);
      v769 = v590;
      uint64_t v770 = MEMORY[0x1E4F1CC38];
      unint64_t v592 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v591, (uint64_t)&v770, (uint64_t)&v769, 1);
      uint64_t v595 = objc_msgSend_initWithString_attributes_(v580, v593, (uint64_t)v585, (uint64_t)v592, v594);
    }

    if (v595)
    {
      id location = 0;
      p_id location = &location;
      uint64_t v763 = 0x2020000000;
      unint64_t v628 = (void *)qword_1E96C4880;
      v764 = (void *)qword_1E96C4880;
      if (!qword_1E96C4880)
      {
        *(void *)&long long buf = MEMORY[0x1E4F143A8];
        *((void *)&buf + 1) = 3221225472;
        v772 = sub_1A67251AC;
        v773 = &unk_1E5C696C8;
        v774 = &location;
        v629 = (void *)sub_1A6725040(v623, v624, v625, v626, v627);
        uint64_t v630 = dlsym(v629, "kAXPidKey");
        *((void *)v774[1] + 3) = v630;
        qword_1E96C4880 = *((void *)v774[1] + 3);
        unint64_t v628 = p_location[3];
      }
      _Block_object_dispose(&location, 8);
      if (!v628) {
        sub_1A688F7A0(v631, v632, v633, v634, v635);
      }
      v765[0] = *v628;
      v636 = NSNumber;
      uint64_t v637 = getpid();
      uint64_t v641 = objc_msgSend_numberWithInt_(v636, v638, v637, v639, v640);
      v646 = (void *)v641;
      v766[0] = v641;
      id location = 0;
      p_id location = &location;
      uint64_t v763 = 0x2020000000;
      v647 = (void *)qword_1E96C4888;
      v764 = (void *)qword_1E96C4888;
      if (!qword_1E96C4888)
      {
        *(void *)&long long buf = MEMORY[0x1E4F143A8];
        *((void *)&buf + 1) = 3221225472;
        v772 = sub_1A67251FC;
        v773 = &unk_1E5C696C8;
        v774 = &location;
        v648 = (void *)sub_1A6725040(v641, v642, v643, v644, v645);
        v649 = dlsym(v648, "kAXNotificationDataKey");
        *((void *)v774[1] + 3) = v649;
        qword_1E96C4888 = *((void *)v774[1] + 3);
        v647 = p_location[3];
      }
      _Block_object_dispose(&location, 8);
      if (!v647) {
        sub_1A688F818(v650, v651, v652, v653, v654);
      }
      v765[1] = *v647;
      v766[1] = v595;
      uint64_t v655 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v651, (uint64_t)v766, (uint64_t)v765, 2);

      id v656 = v655;
      v661 = v656;
      id location = 0;
      p_id location = &location;
      uint64_t v763 = 0x2020000000;
      v662 = (void (*)(uint64_t, void, void *))off_1E96C4890;
      v764 = off_1E96C4890;
      if (!off_1E96C4890)
      {
        *(void *)&long long buf = MEMORY[0x1E4F143A8];
        *((void *)&buf + 1) = 3221225472;
        v772 = sub_1A672524C;
        v773 = &unk_1E5C696C8;
        v774 = &location;
        long long v663 = (void *)sub_1A6725040((uint64_t)v656, v657, v658, v659, v660);
        unint64_t v664 = dlsym(v663, "AXPushNotificationToSystemForBroadcast");
        *((void *)v774[1] + 3) = v664;
        off_1E96C4890 = (_UNKNOWN *)*((void *)v774[1] + 3);
        v662 = (void (*)(uint64_t, void, void *))p_location[3];
      }
      _Block_object_dispose(&location, 8);
      if (!v662) {
        sub_1A688F890(v665, v666, v667, v668, v669);
      }
      v662(1008, 0, v661);
    }
  }
LABEL_90:
  id v670 = objc_initWeak((id *)&buf, a1);
  long long v675 = objc_msgSend_delegate(a1, v671, v672, v673, v674);
  objc_initWeak(&location, v675);

  v758[0] = MEMORY[0x1E4F143A8];
  v758[1] = 3221225472;
  v758[2] = sub_1A67238B0;
  v758[3] = &unk_1E5C6A7B0;
  unint64_t v741 = &v759;
  objc_copyWeak(&v759, &location);
  v742 = &v760;
  objc_copyWeak(&v760, (id *)&buf);
  objc_msgSend_setOnSpeechStartCallback_(v496, v676, (uint64_t)v758, v677, v678);
  v755[0] = MEMORY[0x1E4F143A8];
  v755[1] = 3221225472;
  v755[2] = sub_1A6723968;
  v755[3] = &unk_1E5C6A7B0;
  uint64_t v739 = &v756;
  objc_copyWeak(&v756, &location);
  uint64_t v740 = &v757;
  objc_copyWeak(&v757, (id *)&buf);
  objc_msgSend_setOnPauseCallback_(v496, v679, (uint64_t)v755, v680, v681);
  v752[0] = MEMORY[0x1E4F143A8];
  v752[1] = 3221225472;
  v752[2] = sub_1A6723A20;
  v752[3] = &unk_1E5C6A7B0;
  v737 = &v753;
  objc_copyWeak(&v753, &location);
  uint64_t v738 = &v754;
  objc_copyWeak(&v754, (id *)&buf);
  objc_msgSend_setOnResumeCallback_(v496, v682, (uint64_t)v752, v683, v684);
  v749[0] = MEMORY[0x1E4F143A8];
  v749[1] = 3221225472;
  v749[2] = sub_1A6723AD8;
  v749[3] = &unk_1E5C6A7D8;
  unint64_t v736 = &v750;
  objc_copyWeak(&v750, &location);
  objc_copyWeak(&v751, (id *)&buf);
  objc_msgSend_setOnMarkerCallback_(v496, v685, (uint64_t)v749, v686, v687);
  v746[0] = MEMORY[0x1E4F143A8];
  v746[1] = 3221225472;
  v746[2] = sub_1A6723BC0;
  v746[3] = &unk_1E5C6A800;
  objc_copyWeak(&v747, &location);
  objc_copyWeak(&v748, (id *)&buf);
  objc_msgSend_setOnWillSpeakRangeCallback_(v496, v688, (uint64_t)v746, v689, v690);
  v744[0] = MEMORY[0x1E4F143A8];
  v744[1] = 3221225472;
  v744[2] = sub_1A6723CF0;
  v744[3] = &unk_1E5C6A828;
  objc_copyWeak(&v745, (id *)&buf);
  objc_msgSend_setCompletionCallback_(v496, v691, (uint64_t)v744, v692, v693);
  v698 = objc_msgSend_speechManager(a1, v694, v695, v696, v697);
  objc_msgSend_dispatchSpeechAction_(v698, v699, (uint64_t)v496, v700, v701);

  objc_msgSend_postUtteranceDelay(v4, v702, v703, v704, v705);
  if (v709 > 0.0)
  {
    v710 = a1;
    long long v711 = objc_msgSend_pauseMarkupString_(TTSSpeechManager, v706, (uint64_t)v743, v707, v708);
    unint64_t v712 = NSString;
    objc_msgSend_postUtteranceDelay(v4, v713, v714, v715, v716);
    v721 = objc_msgSend_stringWithFormat_(v712, v718, (uint64_t)v711, v719, v720, (int)(v717 * 1000.0), &v750, &v753, &v754, &v756, &v757, &v759, &v760);
    unint64_t v724 = objc_msgSend_actionWithString_shouldQueue_(TTSSpeechAction, v722, (uint64_t)v721, 1, v723);
    objc_msgSend_setVoiceIdentifier_(v724, v725, (uint64_t)v743, v726, v727);
    v732 = objc_msgSend_speechManager(v710, v728, v729, v730, v731);
    objc_msgSend_dispatchSpeechAction_(v732, v733, (uint64_t)v724, v734, v735);
  }
  objc_destroyWeak(&v745);
  objc_destroyWeak(&v748);
  objc_destroyWeak(&v747);
  objc_destroyWeak(&v751);
  objc_destroyWeak(v736);
  objc_destroyWeak(v738);
  objc_destroyWeak(v737);
  objc_destroyWeak(v740);
  objc_destroyWeak(v739);
  objc_destroyWeak(v742);
  objc_destroyWeak(v741);
  objc_destroyWeak(&location);
  objc_destroyWeak((id *)&buf);
}

void sub_1A67232D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, id *a11, id *a12, id *a13, id *a14, id *a15, id *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,id a53)
{
}

id sub_1A67233AC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = 0;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x2050000000;
  uint64_t v5 = (void *)qword_1EB67A590;
  uint64_t v12 = qword_1EB67A590;
  if (!qword_1EB67A590)
  {
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    v8[2] = sub_1A6724D3C;
    v8[3] = &unk_1E5C696C8;
    void v8[4] = &v9;
    sub_1A6724D3C((uint64_t)v8, a2, a3, a4, a5);
    uint64_t v5 = (void *)v10[3];
  }
  id v6 = v5;
  _Block_object_dispose(&v9, 8);

  return v6;
}

void sub_1A6723478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1A6723490(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = 0;
  uint64_t v15 = &v14;
  uint64_t v16 = 0x2020000000;
  uint64_t v5 = (void **)qword_1E96C4858;
  uint64_t v17 = qword_1E96C4858;
  if (!qword_1E96C4858)
  {
    id v6 = (void *)sub_1A6724D94(a1, a2, a3, a4, a5);
    void v15[3] = (uint64_t)dlsym(v6, "AXSpeechSourceKeyVoiceOver");
    qword_1E96C4858 = v15[3];
    uint64_t v5 = (void **)v15[3];
  }
  _Block_object_dispose(&v14, 8);
  if (!v5) {
    sub_1A688F908(v7, v8, v9, v10, v11);
  }
  uint64_t v12 = *v5;

  return v12;
}

void sub_1A6723580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1A6723598(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = 0;
  uint64_t v15 = &v14;
  uint64_t v16 = 0x2020000000;
  uint64_t v5 = (void **)qword_1E96C4860;
  uint64_t v17 = qword_1E96C4860;
  if (!qword_1E96C4860)
  {
    id v6 = (void *)sub_1A6724D94(a1, a2, a3, a4, a5);
    void v15[3] = (uint64_t)dlsym(v6, "AXSpeechSourceKeySwitchControl");
    qword_1E96C4860 = v15[3];
    uint64_t v5 = (void **)v15[3];
  }
  _Block_object_dispose(&v14, 8);
  if (!v5) {
    sub_1A688F980(v7, v8, v9, v10, v11);
  }
  uint64_t v12 = *v5;

  return v12;
}

void sub_1A6723688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1A67236A0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = 0;
  uint64_t v15 = &v14;
  uint64_t v16 = 0x2020000000;
  uint64_t v5 = (void **)qword_1E96C4868;
  uint64_t v17 = qword_1E96C4868;
  if (!qword_1E96C4868)
  {
    id v6 = (void *)sub_1A6724D94(a1, a2, a3, a4, a5);
    void v15[3] = (uint64_t)dlsym(v6, "AXSpeechSourceKeySpeechFeatures");
    qword_1E96C4868 = v15[3];
    uint64_t v5 = (void **)v15[3];
  }
  _Block_object_dispose(&v14, 8);
  if (!v5) {
    sub_1A688F9F8(v7, v8, v9, v10, v11);
  }
  uint64_t v12 = *v5;

  return v12;
}

void sub_1A6723790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1A67237A8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = 0;
  uint64_t v15 = &v14;
  uint64_t v16 = 0x2020000000;
  uint64_t v5 = (void **)qword_1E96C4870;
  uint64_t v17 = qword_1E96C4870;
  if (!qword_1E96C4870)
  {
    id v6 = (void *)sub_1A6725040(a1, a2, a3, a4, a5);
    void v15[3] = (uint64_t)dlsym(v6, "UIAccessibilityTokenBrailleDisplayOnly");
    qword_1E96C4870 = v15[3];
    uint64_t v5 = (void **)v15[3];
  }
  _Block_object_dispose(&v14, 8);
  if (!v5) {
    sub_1A688FA70(v7, v8, v9, v10, v11);
  }
  uint64_t v12 = *v5;

  return v12;
}

void sub_1A6723898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A67238B0(uint64_t a1, void *a2)
{
  id v14 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  char v4 = objc_opt_respondsToSelector();

  if (v4)
  {
    id v5 = objc_loadWeakRetained((id *)(a1 + 32));
    id v6 = objc_loadWeakRetained((id *)(a1 + 40));
    uint64_t v11 = objc_msgSend_utterance(v14, v7, v8, v9, v10);
    objc_msgSend_speechSynthesizer_didStartSpeechUtterance_(v5, v12, (uint64_t)v6, (uint64_t)v11, v13);
  }
}

void sub_1A6723968(uint64_t a1, void *a2)
{
  id v14 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  char v4 = objc_opt_respondsToSelector();

  if (v4)
  {
    id v5 = objc_loadWeakRetained((id *)(a1 + 32));
    id v6 = objc_loadWeakRetained((id *)(a1 + 40));
    uint64_t v11 = objc_msgSend_utterance(v14, v7, v8, v9, v10);
    objc_msgSend_speechSynthesizer_didPauseSpeechUtterance_(v5, v12, (uint64_t)v6, (uint64_t)v11, v13);
  }
}

void sub_1A6723A20(uint64_t a1, void *a2)
{
  id v14 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  char v4 = objc_opt_respondsToSelector();

  if (v4)
  {
    id v5 = objc_loadWeakRetained((id *)(a1 + 32));
    id v6 = objc_loadWeakRetained((id *)(a1 + 40));
    uint64_t v11 = objc_msgSend_utterance(v14, v7, v8, v9, v10);
    objc_msgSend_speechSynthesizer_didContinueSpeechUtterance_(v5, v12, (uint64_t)v6, (uint64_t)v11, v13);
  }
}

void sub_1A6723AD8(uint64_t a1, void *a2, void *a3)
{
  id v21 = a2;
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  char v7 = objc_opt_respondsToSelector();

  if (v7)
  {
    uint64_t v12 = objc_msgSend_utterance(v21, v8, v9, v10, v11);
    id v13 = objc_loadWeakRetained((id *)(a1 + 32));
    id v14 = objc_loadWeakRetained((id *)(a1 + 40));
    uint64_t v19 = objc_msgSend_avMark(v5, v15, v16, v17, v18);
    objc_msgSend_speechSynthesizer_willSpeakMarker_utterance_(v13, v20, (uint64_t)v14, (uint64_t)v19, (uint64_t)v12);
  }
}

void sub_1A6723BC0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v39 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  char v8 = objc_opt_respondsToSelector();

  id v13 = v39;
  if (v8)
  {
    id v14 = objc_msgSend_utterance(v39, v9, v10, v11, v12);
    uint64_t v19 = objc_msgSend_ssmlRepresentation(v14, v15, v16, v17, v18);
    id v24 = v19;
    if (v19)
    {
      id v25 = v19;
    }
    else
    {
      objc_msgSend_speechString(v14, v20, v21, v22, v23);
      id v25 = (id)objc_claimAutoreleasedReturnValue();
    }
    uint64_t v26 = v25;

    if (a3 + a4 <= (unint64_t)objc_msgSend_length(v26, v27, v28, v29, v30))
    {
      id v31 = objc_loadWeakRetained((id *)(a1 + 32));
      id v32 = objc_loadWeakRetained((id *)(a1 + 40));
      uint64_t v37 = objc_msgSend_utterance(v39, v33, v34, v35, v36);
      objc_msgSend_speechSynthesizer_willSpeakRangeOfSpeechString_utterance_(v31, v38, (uint64_t)v32, a3, a4, v37);
    }
    id v13 = v39;
  }
}

void sub_1A6723CF0(uint64_t a1, void *a2, uint64_t a3)
{
  char v4 = (id *)(a1 + 32);
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained(v4);
  objc_msgSend__handleSpeechDone_successful_(WeakRetained, v6, (uint64_t)v5, a3, v7);
}

void sub_1A6723D5C(void *a1, const char *a2, void *a3, uint64_t a4, uint64_t a5)
{
  objc_msgSend_utterance(a3, a2, (uint64_t)a3, a4, a5);
  id v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_processSpeechJobFinished_successful_(a1, v7, (uint64_t)v9, a4, v8);
}

BOOL sub_1A6723DBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3 == 1;
}

BOOL sub_1A6723DC8(void *a1, uint64_t a2, uint64_t a3)
{
  if (!TTSUseCoreSynthesizerForAV())
  {
    uint64_t v11 = a1;
    objc_sync_enter(v11);
    uint64_t v19 = objc_msgSend_inflightUtterance(v11, v15, v16, v17, v18);
    if (v19)
    {
    }
    else
    {
      uint64_t v28 = objc_msgSend_speechQueue(v11, v20, v21, v22, v23);
      uint64_t v33 = objc_msgSend_count(v28, v29, v30, v31, v32);

      if (!v33)
      {
        BOOL v14 = 0;
LABEL_9:
        objc_sync_exit(v11);
        goto LABEL_10;
      }
    }
    uint64_t v34 = objc_msgSend_speechManager(v11, v24, v25, v26, v27);
    uint64_t v38 = objc_msgSend__convertBoundary_(v11, v35, a3, v36, v37);
    objc_msgSend_stopSpeaking_(v34, v39, v38, v40, v41);

    uint64_t v46 = objc_msgSend_speechManager(v11, v42, v43, v44, v45);
    objc_msgSend_clearSpeechQueue(v46, v47, v48, v49, v50);

    float v55 = objc_msgSend_speechQueue(v11, v51, v52, v53, v54);
    unint64_t v60 = objc_msgSend_count(v55, v56, v57, v58, v59);

    if (v60 >= 2)
    {
      uint64_t v65 = objc_msgSend_speechQueue(v11, v61, v62, v63, v64);
      uint64_t v70 = objc_msgSend_speechQueue(v11, v66, v67, v68, v69);
      uint64_t v75 = objc_msgSend_count(v70, v71, v72, v73, v74);
      objc_msgSend_removeObjectsInRange_(v65, v76, 1, v75 - 1, v77);
    }
    BOOL v14 = 1;
    goto LABEL_9;
  }
  dispatch_semaphore_t v5 = dispatch_semaphore_create(0);
  uint64_t v82 = 0;
  id v83 = &v82;
  uint64_t v84 = 0x2020000000;
  char v85 = 0;
  uint64_t v10 = objc_msgSend_coreSynth(a1, v6, v7, v8, v9);
  v79[0] = MEMORY[0x1E4F143A8];
  v79[1] = 3221225472;
  v79[2] = sub_1A6724000;
  v79[3] = &unk_1E5C6A850;
  uint64_t v81 = &v82;
  uint64_t v11 = v5;
  uint64_t v80 = v11;
  objc_msgSend_stopSpeakingAt_completionHandler_(v10, v12, a3, (uint64_t)v79, v13);

  dispatch_semaphore_wait(v11, 0xFFFFFFFFFFFFFFFFLL);
  BOOL v14 = *((unsigned char *)v83 + 24) != 0;

  _Block_object_dispose(&v82, 8);
LABEL_10:

  return v14;
}

void sub_1A6723FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

intptr_t sub_1A6724000(uint64_t a1, char a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

BOOL sub_1A6724014(void *a1, uint64_t a2, uint64_t a3)
{
  if (!TTSUseCoreSynthesizerForAV())
  {
    id v14 = a1;
    objc_sync_enter(v14);
    uint64_t v19 = objc_msgSend_inflightUtterance(v14, v15, v16, v17, v18);
    if (v19)
    {
    }
    else
    {
      uint64_t v28 = objc_msgSend_speechQueue(v14, v20, v21, v22, v23);
      uint64_t v33 = objc_msgSend_count(v28, v29, v30, v31, v32);

      if (!v33)
      {
        BOOL v13 = 0;
        goto LABEL_7;
      }
    }
    uint64_t v34 = objc_msgSend_speechManager(v14, v24, v25, v26, v27);
    uint64_t v38 = objc_msgSend__convertBoundary_(v14, v35, a3, v36, v37);
    objc_msgSend_pauseSpeaking_(v34, v39, v38, v40, v41);

    BOOL v13 = 1;
LABEL_7:
    objc_sync_exit(v14);

    return v13;
  }
  uint64_t v44 = 0;
  uint64_t v45 = &v44;
  uint64_t v46 = 0x2020000000;
  char v47 = 0;
  dispatch_semaphore_t v5 = dispatch_semaphore_create(0);
  uint64_t v10 = objc_msgSend_coreSynth(a1, v6, v7, v8, v9);
  v43[0] = MEMORY[0x1E4F143A8];
  v43[1] = 3221225472;
  v43[2] = sub_1A67241C0;
  v43[3] = &unk_1E5C6A6F8;
  v43[4] = &v44;
  objc_msgSend_pauseSpeakingAt_completionHandler_(v10, v11, a3, (uint64_t)v43, v12);

  dispatch_semaphore_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
  BOOL v13 = *((unsigned char *)v45 + 24) != 0;

  _Block_object_dispose(&v44, 8);
  return v13;
}

void sub_1A6724198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1A67241C0(uint64_t result, char a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
  return result;
}

uint64_t sub_1A67241D0(void *a1)
{
  if (!TTSUseCoreSynthesizerForAV())
  {
    id v6 = a1;
    objc_sync_enter(v6);
    uint64_t v16 = objc_msgSend_inflightUtterance(v6, v12, v13, v14, v15);
    if (v16)
    {
    }
    else
    {
      uint64_t v25 = objc_msgSend_speechQueue(v6, v17, v18, v19, v20);
      uint64_t v30 = objc_msgSend_count(v25, v26, v27, v28, v29);

      if (!v30)
      {
        uint64_t v11 = 0;
        goto LABEL_7;
      }
    }
    uint64_t v31 = objc_msgSend_speechManager(v6, v21, v22, v23, v24);
    objc_msgSend_continueSpeaking(v31, v32, v33, v34, v35);

    uint64_t v11 = 1;
LABEL_7:
    objc_sync_exit(v6);
    goto LABEL_8;
  }
  objc_msgSend_coreSynth(a1, v2, v3, v4, v5);
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v11 = objc_msgSend_continueSpeaking(v6, v7, v8, v9, v10);
LABEL_8:

  return v11;
}

void sub_1A6724294(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1A67242A8(void *a1)
{
  if (TTSUseCoreSynthesizerForAV()) {
    objc_msgSend_coreSynth(a1, v2, v3, v4, v5);
  }
  else {
  id v6 = objc_msgSend_speechManager(a1, v2, v3, v4, v5);
  }
  uint64_t isSpeaking = objc_msgSend_isSpeaking(v6, v7, v8, v9, v10);

  return isSpeaking;
}

uint64_t sub_1A6724300(void *a1)
{
  if (TTSUseCoreSynthesizerForAV()) {
    objc_msgSend_coreSynth(a1, v2, v3, v4, v5);
  }
  else {
  id v6 = objc_msgSend_speechManager(a1, v2, v3, v4, v5);
  }
  uint64_t isPaused = objc_msgSend_isPaused(v6, v7, v8, v9, v10);

  return isPaused;
}

void sub_1A6724358(void *a1, uint64_t a2, void *a3)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  if (!MEMORY[0x1E4FA99C0])
  {
    BOOL v9 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    if (v9) {
      sub_1A688FAE8(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1A6724614;
    block[3] = &unk_1E5C695D8;
    id v54 = v8;
    dispatch_async(MEMORY[0x1E4F14428], block);
    uint64_t v17 = v54;
LABEL_13:

    goto LABEL_14;
  }
  if ((objc_msgSend__supportsSpeakingWithPersonalVoices(a1, v4, v5, v6, v7) & 1) == 0)
  {
    BOOL v33 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    if (v33) {
      sub_1A688FB60(v33, v34, v35, v36, v37, v38, v39, v40);
    }
    v51[0] = MEMORY[0x1E4F143A8];
    v51[1] = 3221225472;
    v51[2] = sub_1A6724628;
    v51[3] = &unk_1E5C695D8;
    id v52 = v8;
    dispatch_async(MEMORY[0x1E4F14428], v51);
    uint64_t v17 = v52;
    goto LABEL_13;
  }
  if (objc_msgSend_isSoftAppUsageProtectionDisabled(a1, v18, v19, v20, v21))
  {
    uint64_t v26 = objc_msgSend_mainBundle(MEMORY[0x1E4F28B50], v22, v23, v24, v25);
    uint64_t v31 = objc_msgSend_bundleIdentifier(v26, v27, v28, v29, v30);

    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      float v56 = v31;
      _os_log_impl(&dword_1A66D3000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Will request personal voice TCC: %@", buf, 0xCu);
    }
    uint64_t v49 = v31;
    id v50 = v8;
    id v32 = v31;
    TCCAccessRequest();
  }
  else
  {
    BOOL v41 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    if (v41) {
      sub_1A688FB24(v41, v42, v43, v44, v45, v46, v47, v48);
    }
    (*((void (**)(id, uint64_t))v8 + 2))(v8, 1);
  }
LABEL_14:
}

uint64_t sub_1A6724614(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1A6724628(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1A672463C(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    id v8 = objc_msgSend_numberWithUnsignedChar_(NSNumber, v4, a2, v5, v6);
    *(_DWORD *)long long buf = 138412546;
    uint64_t v13 = v7;
    __int16 v14 = 2112;
    uint64_t v15 = v8;
    _os_log_impl(&dword_1A66D3000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Did request personal voice TCC for %@. granted=%@", buf, 0x16u);
  }
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = sub_1A6724780;
  v9[3] = &unk_1E5C6A878;
  id v10 = *(id *)(a1 + 40);
  char v11 = a2;
  dispatch_async(MEMORY[0x1E4F14428], v9);
}

uint64_t sub_1A6724780(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40)) {
    uint64_t v1 = 3;
  }
  else {
    uint64_t v1 = 1;
  }
  return (*(uint64_t (**)(void, uint64_t))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), v1);
}

uint64_t sub_1A67247A4(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!MEMORY[0x1E4FA99C0])
  {
    BOOL v5 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    if (v5) {
      sub_1A688FAE8(v5, v6, v7, v8, v9, v10, v11, v12);
    }
    return 2;
  }
  if ((objc_msgSend__supportsSpeakingWithPersonalVoices(a1, a2, a3, a4, a5) & 1) == 0)
  {
    BOOL v19 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    if (v19) {
      sub_1A688FB60(v19, v20, v21, v22, v23, v24, v25, v26);
    }
    return 2;
  }
  if (TTSIsPersonalVoicePrivilagedProcess()) {
    return 3;
  }
  if (!objc_msgSend_isSoftAppUsageProtectionDisabled(a1, v14, v15, v16, v17)) {
    return 1;
  }
  int v27 = TCCAccessPreflight();
  if (v27 == 2) {
    return 0;
  }
  if (!v27) {
    return 3;
  }
  if (TCCAccessRestricted()) {
    return 2;
  }
  else {
    return 1;
  }
}

void sub_1A6724878(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v16 = a4;
  id v6 = a3;
  if (TTSUseCoreSynthesizerForAV())
  {
    uint64_t v11 = objc_msgSend_coreSynth(a1, v7, v8, v9, v10);
    objc_msgSend_write_toBufferCallback_synth_completionHandler_(v11, v12, (uint64_t)v6, (uint64_t)v16, (uint64_t)a1, &unk_1EFB80C08);

    id v6 = v11;
  }
  else
  {
    objc_msgSend_setAudioBufferCallback_(v6, v7, (uint64_t)v16, v9, v10);
    objc_msgSend_speakUtterance_(a1, v13, (uint64_t)v6, v14, v15);
  }
}

void sub_1A672492C(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v18 = a5;
  id v8 = a4;
  id v9 = a3;
  if (TTSUseCoreSynthesizerForAV())
  {
    uint64_t v14 = objc_msgSend_coreSynth(a1, v10, v11, v12, v13);
    objc_msgSend_write_toBufferCallback_toMarkerCallback_synth_completionHandler_(v14, v15, (uint64_t)v9, (uint64_t)v8, (uint64_t)v18, a1, &unk_1EFB80C28);

    id v8 = v9;
    id v9 = v14;
  }
  else
  {
    objc_msgSend_setMarkerCallback_(v9, v10, (uint64_t)v18, v12, v13);
    objc_msgSend_writeUtterance_toBufferCallback_(a1, v16, (uint64_t)v9, (uint64_t)v8, v17);
  }
}

void sub_1A67249FC(void *a1, uint64_t a2, void *a3)
{
  id v58 = a3;
  if (TTSUseCoreSynthesizerForAV())
  {
    objc_msgSend_coreSynth(a1, v4, v5, v6, v7);
    id v8 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_speak_synth_completionHandler_(v8, v9, (uint64_t)v58, (uint64_t)a1, (uint64_t)&unk_1EFB80C48);
    goto LABEL_13;
  }
  id v8 = a1;
  objc_sync_enter(v8);
  objc_msgSend__applyWebKitBehaviors(v8, v10, v11, v12, v13);
  if (v58)
  {
    if (objc_msgSend_detectSSMLAndModifyUtterances(v8, v14, v15, v16, v17)) {
      objc_msgSend_transformUtteranceBasedOnSSMLIfDetected_(MEMORY[0x1E4F15498], v18, (uint64_t)v58, v20, v21);
    }
    uint64_t v22 = objc_msgSend_speechQueue(v8, v18, v19, v20, v21);
    if (objc_msgSend_indexOfObjectIdenticalTo_(v22, v23, (uint64_t)v58, v24, v25) == 0x7FFFFFFFFFFFFFFFLL)
    {
      objc_msgSend_inflightUtterance(v8, v26, v27, v28, v29);
      id v30 = (id)objc_claimAutoreleasedReturnValue();

      if (v30 != v58)
      {
        uint64_t v35 = objc_msgSend_speechQueue(v8, v31, v32, v33, v34);
        objc_msgSend_addObject_(v35, v36, (uint64_t)v58, v37, v38);

        uint64_t v43 = objc_msgSend_inflightUtterance(v8, v39, v40, v41, v42);
        if (v43)
        {
        }
        else
        {
          uint64_t v48 = objc_msgSend_speechQueue(v8, v44, v45, v46, v47);
          uint64_t v53 = objc_msgSend_count(v48, v49, v50, v51, v52);

          if (v53) {
            objc_msgSend__enqueueNextJob(v8, v54, v55, v56, v57);
          }
        }
        goto LABEL_12;
      }
    }
    else
    {
    }
    objc_msgSend_raise_format_(MEMORY[0x1E4F1CA00], v31, @"AVSpeechSynthesizer", @"An AVSpeechUtterance shall not be enqueued twice", v34);
  }
LABEL_12:
  objc_sync_exit(v8);
LABEL_13:
}

void sub_1A6724B84(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

Class sub_1A6724B9C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  v11[0] = 0;
  if (!qword_1E96C4850)
  {
    v11[1] = (void *)MEMORY[0x1E4F143A8];
    v11[2] = (void *)3221225472;
    void v11[3] = sub_1A6724CC8;
    v11[4] = &unk_1E5C69480;
    unsigned int v11[5] = v11;
    long long v12 = xmmword_1E5C6A8C0;
    uint64_t v13 = 0;
    qword_1E96C4850 = _sl_dlopen();
  }
  if (!qword_1E96C4850) {
    sub_1A688FB9C(v11, a2, a3, a4, a5);
  }
  if (v11[0]) {
    free(v11[0]);
  }
  Class result = objc_getClass("TTSVBSettings");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1A688FC1C((uint64_t)result, v7, v8, v9, v10);
  }
  qword_1E96C4848 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1A6724CC8()
{
  uint64_t result = _sl_dlopen();
  qword_1E96C4850 = result;
  return result;
}

Class sub_1A6724D3C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1A6724D94(a1, a2, a3, a4, a5);
  Class result = objc_getClass("AXSettings");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1A688FC98((uint64_t)result, v7, v8, v9, v10);
  }
  qword_1EB67A590 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1A6724D94(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  v7[0] = 0;
  if (!qword_1EB67A558)
  {
    v7[1] = (void *)MEMORY[0x1E4F143A8];
    void v7[2] = (void *)3221225472;
    v7[3] = sub_1A6724E8C;
    v7[4] = &unk_1E5C69480;
    v7[5] = v7;
    long long v8 = xmmword_1E5C6A8D8;
    uint64_t v9 = 0;
    qword_1EB67A558 = _sl_dlopen();
  }
  uint64_t v5 = qword_1EB67A558;
  if (!qword_1EB67A558) {
    sub_1A688FD14(v7, a2, a3, a4, a5);
  }
  if (v7[0]) {
    free(v7[0]);
  }
  return v5;
}

uint64_t sub_1A6724E8C()
{
  uint64_t result = _sl_dlopen();
  qword_1EB67A558 = result;
  return result;
}

void *sub_1A6724F00(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = (void *)sub_1A6724D94(a1, a2, a3, a4, a5);
  uint64_t result = dlsym(v6, "AXSpeechSourceKeyVoiceOver");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1E96C4858 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1A6724F50(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = (void *)sub_1A6724D94(a1, a2, a3, a4, a5);
  uint64_t result = dlsym(v6, "AXSpeechSourceKeySwitchControl");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1E96C4860 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1A6724FA0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = (void *)sub_1A6724D94(a1, a2, a3, a4, a5);
  uint64_t result = dlsym(v6, "AXSpeechSourceKeySpeechFeatures");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1E96C4868 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1A6724FF0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = (void *)sub_1A6725040(a1, a2, a3, a4, a5);
  uint64_t result = dlsym(v6, "UIAccessibilityTokenBrailleDisplayOnly");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1E96C4870 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1A6725040(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  v7[0] = 0;
  if (!qword_1E96C4878)
  {
    v7[1] = (void *)MEMORY[0x1E4F143A8];
    void v7[2] = (void *)3221225472;
    v7[3] = sub_1A6725138;
    v7[4] = &unk_1E5C69480;
    v7[5] = v7;
    long long v8 = xmmword_1E5C6A8F0;
    uint64_t v9 = 0;
    qword_1E96C4878 = _sl_dlopen();
  }
  uint64_t v5 = qword_1E96C4878;
  if (!qword_1E96C4878) {
    sub_1A688FD94(v7, a2, a3, a4, a5);
  }
  if (v7[0]) {
    free(v7[0]);
  }
  return v5;
}

uint64_t sub_1A6725138()
{
  uint64_t result = _sl_dlopen();
  qword_1E96C4878 = result;
  return result;
}

void *sub_1A67251AC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = (void *)sub_1A6725040(a1, a2, a3, a4, a5);
  uint64_t result = dlsym(v6, "kAXPidKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1E96C4880 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1A67251FC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = (void *)sub_1A6725040(a1, a2, a3, a4, a5);
  uint64_t result = dlsym(v6, "kAXNotificationDataKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1E96C4888 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1A672524C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = (void *)sub_1A6725040(a1, a2, a3, a4, a5);
  uint64_t result = dlsym(v6, "AXPushNotificationToSystemForBroadcast");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_1E96C4890 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

id TTSSpeechTransformTextWithLanguageAndVoiceIdentifier(void *a1, char a2, void *a3, void *a4, void *a5)
{
  id v9 = a1;
  id v10 = a3;
  id v11 = a4;
  id v15 = a5;
  if (v11)
  {
    uint64_t v16 = objc_msgSend_pauseMarkupString_(TTSSpeechManager, v12, (uint64_t)v11, v13, v14);
    objc_msgSend_stringWithFormat_(NSString, v17, (uint64_t)v16, v18, v19, 350);
    uint64_t v20 = (__CFString *)objc_claimAutoreleasedReturnValue();

    if ((a2 & 1) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v21 = objc_msgSend_stringByReplacingEmojiCharactersWithEmojiDescriptions_stringForPauses_language_rangeReplacements_appendEmojiSuffix_(TTSEmojiUtilities, v12, (uint64_t)v9, (uint64_t)v20, (uint64_t)v10, v15, 0);

    id v9 = (id)v21;
    if ((a2 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v20 = @" \x1B\\pause=350\\ ";
  if (a2) {
    goto LABEL_6;
  }
LABEL_3:
  if ((a2 & 2) != 0)
  {
LABEL_7:
    uint64_t v22 = _TTSSpeechReplaceEmoticons(v9, v10, v15);

    id v9 = (id)v22;
  }
LABEL_8:

  return v9;
}

uint64_t sub_1A6725C5C()
{
  qword_1EB67A578 = (uint64_t)os_log_create("com.apple.Accessibility", "SpeechManager");

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1A6725CA0()
{
  qword_1EB67A578 = (uint64_t)os_log_create("com.apple.Accessibility", "SpeechManager");

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1A6725CE4()
{
  qword_1EB67A578 = (uint64_t)os_log_create("com.apple.Accessibility", "SpeechManager");

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1A6726D64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__handleMediaServicesWereLost_, *(void *)(a1 + 40), a4, a5);
}

uint64_t sub_1A6726E3C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend_setAudioSession_(*(void **)(a1 + 32), a2, 0, a4, a5);
}

uint64_t sub_1A6726EFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__handleMediaServicesWereReset_, *(void *)(a1 + 40), a4, a5);
}

uint64_t sub_1A67271F4()
{
  qword_1EB67A578 = (uint64_t)os_log_create("com.apple.Accessibility", "SpeechManager");

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1A67272EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__handleAudioInterruption_, *(void *)(a1 + 40), a4, a5);
}

uint64_t sub_1A67274CC()
{
  qword_1EB67A578 = (uint64_t)os_log_create("com.apple.Accessibility", "SpeechManager");

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1A67276E4()
{
  qword_1EB67A578 = (uint64_t)os_log_create("com.apple.Accessibility", "SpeechManager");

  return MEMORY[0x1F41817F8]();
}

void sub_1A6727A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_1A6727AC4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = 0;
  id v10 = &v9;
  uint64_t v11 = 0x2050000000;
  uint64_t v5 = (void *)qword_1EB67A598;
  uint64_t v12 = qword_1EB67A598;
  if (!qword_1EB67A598)
  {
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    v8[2] = sub_1A672E384;
    v8[3] = &unk_1E5C696C8;
    void v8[4] = &v9;
    sub_1A672E384((uint64_t)v8, a2, a3, a4, a5);
    uint64_t v5 = (void *)v10[3];
  }
  id v6 = v5;
  _Block_object_dispose(&v9, 8);

  return v6;
}

void sub_1A6727B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A6727BA8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend__updateUserSubstitutions(WeakRetained, v1, v2, v3, v4);
}

uint64_t sub_1A6727BE8()
{
  qword_1EB67A578 = (uint64_t)os_log_create("com.apple.Accessibility", "SpeechManager");

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1A6727CD8(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(void *)(*(void *)(result + 32) + 96);
  return result;
}

uint64_t sub_1A6727D60(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 96) = *(void *)(result + 40);
  return result;
}

void sub_1A6727E04(uint64_t a1)
{
}

uint64_t sub_1A6727F00(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1A6727F10(uint64_t a1)
{
}

void sub_1A6727F18(uint64_t a1)
{
}

uint64_t sub_1A6727FA0(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 80) = *(void *)(result + 40);
  return result;
}

uint64_t sub_1A6728058(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(void *)(*(void *)(result + 32) + 80);
  return result;
}

uint64_t sub_1A6728118(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 57);
  return result;
}

uint64_t sub_1A67281A4(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 57) = *(unsigned char *)(result + 40);
  return result;
}

void sub_1A67282A4(uint64_t a1)
{
}

void sub_1A6728350(uint64_t a1)
{
}

uint64_t sub_1A6728408(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 56);
  return result;
}

uint64_t sub_1A6728494(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 56) = *(unsigned char *)(result + 40);
  return result;
}

void sub_1A6728788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A6728B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_1A6728C94(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend_footprint(a2, (const char *)a2, a3, a4, a5) == 2;
}

id sub_1A6728CB8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = objc_msgSend_speechVoice(a2, (const char *)a2, a3, a4, a5);
  id v6 = AXAVSpeechSynthesisVoiceFromTTSAXResource(v5);

  return v6;
}

id AXAVSpeechSynthesisVoiceFromTTSAXResource(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = AXLogSpeechSynthesis();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
      sub_1A6890130();
    }

    id v3 = objc_alloc_init(MEMORY[0x1E4F15478]);
    long long v8 = objc_msgSend_language(v1, v4, v5, v6, v7);
    uint64_t v13 = objc_msgSend_copy(v8, v9, v10, v11, v12);
    objc_msgSend_setLanguage_(v3, v14, (uint64_t)v13, v15, v16);

    uint64_t v21 = objc_msgSend_identifier(v1, v17, v18, v19, v20);
    uint64_t v26 = objc_msgSend_copy(v21, v22, v23, v24, v25);
    objc_msgSend_setIdentifier_(v3, v27, (uint64_t)v26, v28, v29);

    uint64_t isNoveltyVoice = objc_msgSend_isNoveltyVoice(v1, v30, v31, v32, v33);
    objc_msgSend_setIsNoveltyVoice_(v3, v35, isNoveltyVoice, v36, v37);
    uint64_t v42 = objc_msgSend_name(v1, v38, v39, v40, v41);
    uint64_t v47 = objc_msgSend_copy(v42, v43, v44, v45, v46);
    objc_msgSend_setNonLocalizedNameWithoutQuality_(v3, v48, (uint64_t)v47, v49, v50);

    uint64_t v51 = AXAVVoiceQualityFromTTSSpeechVoice(v1);
    objc_msgSend_setQuality_(v3, v52, v51, v53, v54);
    objc_msgSend_setIsInstalled_(v3, v55, 1, v56, v57);
    uint64_t canBeDownloaded = objc_msgSend_canBeDownloaded(v1, v58, v59, v60, v61);
    objc_msgSend_setCanBeDownloaded_(v3, v63, canBeDownloaded, v64, v65);
    objc_msgSend_setAssetSize_(v3, v66, 0, v67, v68);
    uint64_t isDefault = objc_msgSend_isDefault(v1, v69, v70, v71, v72);
    objc_msgSend_setIsDefault_(v3, v74, isDefault, v75, v76);
    uint64_t v81 = objc_msgSend_synthesisProviderVoice(v1, v77, v78, v79, v80);
    objc_msgSend_setSynthesisProviderVoice_(v3, v82, (uint64_t)v81, v83, v84);

    if (objc_msgSend_gender(v1, v85, v86, v87, v88) == 1)
    {
      objc_msgSend_setGender_(v3, v89, 1, v91, v92);
    }
    else
    {
      uint64_t v93 = 2 * (objc_msgSend_gender(v1, v89, v90, v91, v92) == 2);
      objc_msgSend_setGender_(v3, v94, v93, v95, v96);
    }
  }
  else
  {
    id v3 = 0;
  }

  return v3;
}

void sub_1A6729018(_Unwind_Exception *a1)
{
}

void sub_1A67290FC()
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  unint64_t v0 = (void *)MEMORY[0x1E4F28B50];
  uint64_t v1 = AXSAccessibilityUtilitiesPath();
  uint64_t v5 = objc_msgSend_bundleWithPath_(v0, v2, v1, v3, v4);
  uint64_t v6 = (void *)qword_1EB67AA60;
  qword_1EB67AA60 = v5;

  uint64_t v11 = (void *)qword_1EB67AA60;
  if (!qword_1EB67AA60)
  {
    uint64_t v12 = objc_msgSend_stringWithFormat_(NSString, v7, @"**** AX Error: Could not load AccessibilityUtilities.framework bundle. bundleWithPath came back nil", v9, v10);
    uint64_t v16 = objc_msgSend_stringWithFormat_(NSString, v13, @"%s:%d %@", v14, v15, "+[TTSSpeechManager availableVoices:]_block_invoke", 993, v12);
    if (qword_1EB67A570 != -1) {
      dispatch_once(&qword_1EB67A570, &unk_1EFB80CA8);
    }
    uint64_t v17 = (void *)qword_1EB67A578;
    if (os_log_type_enabled((os_log_t)qword_1EB67A578, OS_LOG_TYPE_DEFAULT))
    {
      id v18 = v16;
      uint64_t v19 = v17;
      *(_DWORD *)long long buf = 136446210;
      uint64_t v47 = objc_msgSend_UTF8String(v18, v20, v21, v22, v23);
      _os_log_impl(&dword_1A66D3000, v19, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    }
    uint64_t v11 = (void *)qword_1EB67AA60;
  }
  if ((objc_msgSend_isLoaded(v11, v7, v8, v9, v10) & 1) == 0)
  {
    id v45 = 0;
    char v27 = objc_msgSend_loadAndReturnError_((void *)qword_1EB67AA60, v24, (uint64_t)&v45, v25, v26);
    id v31 = v45;
    if ((v27 & 1) == 0)
    {
      uint64_t v32 = objc_msgSend_stringWithFormat_(NSString, v28, @"Could not load bundle: %@", v29, v30, v31);
      uint64_t v36 = objc_msgSend_stringWithFormat_(NSString, v33, @"%s:%d %@", v34, v35, "+[TTSSpeechManager availableVoices:]_block_invoke", 1001, v32);
      if (qword_1EB67A570 != -1) {
        dispatch_once(&qword_1EB67A570, &unk_1EFB7E3B8);
      }
      uint64_t v37 = (void *)qword_1EB67A578;
      if (os_log_type_enabled((os_log_t)qword_1EB67A578, OS_LOG_TYPE_DEFAULT))
      {
        id v38 = v36;
        uint64_t v39 = v37;
        uint64_t v44 = objc_msgSend_UTF8String(v38, v40, v41, v42, v43);
        *(_DWORD *)long long buf = 136446210;
        uint64_t v47 = v44;
        _os_log_impl(&dword_1A66D3000, v39, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      }
    }
  }
}

uint64_t sub_1A6729390()
{
  qword_1EB67A578 = (uint64_t)os_log_create("com.apple.Accessibility", "SpeechManager");

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1A67293D4()
{
  qword_1EB67A578 = (uint64_t)os_log_create("com.apple.Accessibility", "SpeechManager");

  return MEMORY[0x1F41817F8]();
}

id sub_1A6729418(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (objc_msgSend_voiceType(v2, v3, v4, v5, v6) == 4
    || objc_msgSend_voiceType(v2, v7, v8, v9, v10) == 5
    || objc_msgSend_voiceType(v2, v11, v12, v13, v14) == 7)
  {
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = AXAVSpeechSynthesisVoiceFromTTSAXResource(v2);
  }

  return v15;
}

id sub_1A67294A8(uint64_t a1, void *a2)
{
  id v2 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v3 = AXAVSpeechSynthesisVoiceFromTTSAXResource(v2);
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void sub_1A6729E10(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = objc_msgSend_completionCallback(*(void **)(a1 + 32), a2, a3, a4, a5);

  if (v6)
  {
    objc_msgSend_completionCallback(*(void **)(a1 + 32), v7, v8, v9, v10);
    id v11 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void, void))v11 + 2))(v11, *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
  }
}

uint64_t sub_1A6729E98()
{
  qword_1EB67A578 = (uint64_t)os_log_create("com.apple.Accessibility", "SpeechManager");

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1A6729EDC()
{
  qword_1EB67A578 = (uint64_t)os_log_create("com.apple.Accessibility", "SpeechManager");

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1A6729F20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__resetInterruptionTracking, a3, a4, a5);
}

uint64_t sub_1A6729F28()
{
  qword_1EB67A578 = (uint64_t)os_log_create("com.apple.Accessibility", "SpeechManager");

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1A6729F6C()
{
  qword_1EB67A578 = (uint64_t)os_log_create("com.apple.Accessibility", "SpeechManager");

  return MEMORY[0x1F41817F8]();
}

void sub_1A6729FB0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = objc_msgSend_audioSession(*(void **)(a1 + 32), a2, a3, a4, a5);
  uint64_t active = objc_msgSend_setActiveOptions(*(void **)(a1 + 32), v7, v8, v9, v10);
  id v30 = 0;
  objc_msgSend_setActive_withOptions_error_(v6, v12, 0, active, (uint64_t)&v30);
  id v13 = v30;

  if (v13)
  {
    uint64_t v17 = objc_msgSend_stringWithFormat_(NSString, v14, @"Error setting audio session to inactive: %@", v15, v16, v13);
    uint64_t v21 = objc_msgSend_stringWithFormat_(NSString, v18, @"%s:%d %@", v19, v20, "-[TTSSpeechManager _speechJobFinished:action:]_block_invoke", 1148, v17);
    if (qword_1EB67A570 != -1) {
      dispatch_once(&qword_1EB67A570, &unk_1EFB80D88);
    }
    uint64_t v22 = (void *)qword_1EB67A578;
    if (os_log_type_enabled((os_log_t)qword_1EB67A578, OS_LOG_TYPE_DEFAULT))
    {
      id v23 = v21;
      uint64_t v24 = v22;
      uint64_t v29 = objc_msgSend_UTF8String(v23, v25, v26, v27, v28);
      *(_DWORD *)long long buf = 136446210;
      uint64_t v32 = v29;
      _os_log_impl(&dword_1A66D3000, v24, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    }
  }
}

uint64_t sub_1A672A144()
{
  qword_1EB67A578 = (uint64_t)os_log_create("com.apple.Accessibility", "SpeechManager");

  return MEMORY[0x1F41817F8]();
}

void sub_1A672A390(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v27 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v7 = objc_alloc_init(TTSSubstitution);
    uint64_t v12 = objc_msgSend_string(*(void **)(a1 + 32), v8, v9, v10, v11);
    uint64_t v15 = objc_msgSend_substringWithRange_(v12, v13, a3, a4, v14);
    objc_msgSend_setOriginalString_(v7, v16, (uint64_t)v15, v17, v18);

    objc_msgSend_setPhonemes_(v7, v19, (uint64_t)v27, v20, v21);
    objc_msgSend_setReplacementRange_(v7, v22, a3, a4, v23);
    objc_msgSend_addObject_(*(void **)(a1 + 40), v24, (uint64_t)v7, v25, v26);
  }
}

void sub_1A672B064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_1A672B088()
{
  qword_1EB67A578 = (uint64_t)os_log_create("com.apple.Accessibility", "SpeechManager");

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1A672B0CC()
{
  qword_1EB67A578 = (uint64_t)os_log_create("com.apple.Accessibility", "SpeechManager");

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1A672B110()
{
  qword_1EB67A578 = (uint64_t)os_log_create("com.apple.Accessibility", "SpeechManager");

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1A672B154()
{
  qword_1EB67A578 = (uint64_t)os_log_create("com.apple.Accessibility", "SpeechManager");

  return MEMORY[0x1F41817F8]();
}

void sub_1A672B198(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1A672B260;
  block[3] = &unk_1E5C69E78;
  void block[4] = WeakRetained;
  id v7 = v3;
  id v8 = *(id *)(a1 + 32);
  id v5 = v3;
  dispatch_async(MEMORY[0x1E4F14428], block);
}

void sub_1A672B260(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v9[2] = *MEMORY[0x1E4F143B8];
  id v5 = (void *)a1[4];
  uint64_t v6 = a1[6];
  v9[0] = a1[5];
  v9[1] = v6;
  id v7 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], a2, (uint64_t)v9, 2, a5);
  objc_msgSend__enqueueSelectorOnSpeechThread_object_waitUntilDone_(v5, v8, (uint64_t)sel__processAudioBufferCallback_, (uint64_t)v7, 1);
}

uint64_t sub_1A672B300()
{
  qword_1EB67A578 = (uint64_t)os_log_create("com.apple.Accessibility", "SpeechManager");

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1A672B344()
{
  qword_1EB67A578 = (uint64_t)os_log_create("com.apple.Accessibility", "SpeechManager");

  return MEMORY[0x1F41817F8]();
}

void sub_1A672B584(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), a2, 0, a4, a5);
  id v20 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v9 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v6, 1, v7, v8);
  uint64_t v14 = objc_msgSend_audioBufferCallback(v9, v10, v11, v12, v13);

  if (v14)
  {
    objc_msgSend_audioBufferCallback(v9, v15, v16, v17, v18);
    uint64_t v19 = (void (**)(void, void))objc_claimAutoreleasedReturnValue();
    ((void (**)(void, id))v19)[2](v19, v20);
  }
}

uint64_t sub_1A672BBE0()
{
  qword_1EB67A578 = (uint64_t)os_log_create("com.apple.Accessibility", "SpeechManager");

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1A672BC24()
{
  qword_1EB67A578 = (uint64_t)os_log_create("com.apple.Accessibility", "SpeechManager");

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1A672BC68()
{
  qword_1EB67A578 = (uint64_t)os_log_create("com.apple.Accessibility", "SpeechManager");

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1A672BCAC()
{
  qword_1EB67A578 = (uint64_t)os_log_create("com.apple.Accessibility", "SpeechManager");

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1A672BCF0()
{
  qword_1EB67A578 = (uint64_t)os_log_create("com.apple.Accessibility", "SpeechManager");

  return MEMORY[0x1F41817F8]();
}

void sub_1A672C2F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1A672C30C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = objc_msgSend_outputChannels(*(void **)(*(void *)(a1 + 32) + 16), a2, a3, a4, a5);

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1A672C568(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend_setOutputChannels_(*(void **)(*(void *)(a1 + 32) + 16), a2, 0, a4, a5);
}

uint64_t sub_1A672C578(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend_setOutputChannels_(*(void **)(*(void *)(a1 + 32) + 16), a2, *(void *)(a1 + 40), a4, a5);
}

uint64_t sub_1A672C630(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(_DWORD *)(*(void *)(result + 32) + 68);
  return result;
}

uint64_t sub_1A672C6BC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_DWORD *)(*(void *)(a1 + 32) + 68) = *(_DWORD *)(a1 + 40);
  return objc_msgSend_setAudioQueueFlags_(*(void **)(*(void *)(a1 + 32) + 16), a2, *(unsigned int *)(a1 + 40), a4, a5);
}

uint64_t sub_1A672C7F8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = objc_msgSend_onSpeechStartCallback(*(void **)(a1 + 32), a2, a3, a4, a5);

  if (v6)
  {
    objc_msgSend_onSpeechStartCallback(*(void **)(a1 + 32), v7, v8, v9, v10);
    uint64_t v11 = (void (**)(void, void))objc_claimAutoreleasedReturnValue();
    v11[2](v11, *(void *)(a1 + 32));
  }
  uint64_t result = qword_1E96C48B0;
  if (qword_1E96C48B0)
  {
    uint64_t v13 = *(uint64_t (**)(void))(qword_1E96C48B0 + 16);
    return v13();
  }
  return result;
}

uint64_t sub_1A672CFEC()
{
  qword_1EB67A578 = (uint64_t)os_log_create("com.apple.Accessibility", "SpeechManager");

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1A672D030()
{
  qword_1EB67A578 = (uint64_t)os_log_create("com.apple.Accessibility", "SpeechManager");

  return MEMORY[0x1F41817F8]();
}

void sub_1A672D1EC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = objc_msgSend_onPauseCallback(*(void **)(a1 + 32), a2, a3, a4, a5);

  if (v6)
  {
    objc_msgSend_onPauseCallback(*(void **)(a1 + 32), v7, v8, v9, v10);
    uint64_t v11 = (void (**)(id, void))objc_claimAutoreleasedReturnValue();
    v11[2](v11, *(void *)(a1 + 32));
  }
}

void sub_1A672D3E8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = objc_msgSend_onResumeCallback(*(void **)(a1 + 32), a2, a3, a4, a5);

  if (v6)
  {
    objc_msgSend_onResumeCallback(*(void **)(a1 + 32), v7, v8, v9, v10);
    uint64_t v11 = (void (**)(id, void))objc_claimAutoreleasedReturnValue();
    v11[2](v11, *(void *)(a1 + 32));
  }
}

void sub_1A672D740(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = objc_msgSend_onMarkerCallback(*(void **)(a1 + 32), a2, a3, a4, a5);

  if (v6)
  {
    objc_msgSend_onMarkerCallback(*(void **)(a1 + 32), v7, v8, v9, v10);
    id v11 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void, void))v11 + 2))(v11, *(void *)(a1 + 32), *(void *)(a1 + 40));
  }
}

void sub_1A672D8F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A672D90C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v91 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = objc_msgSend_processedString(*(void **)(a1 + 32), a2, a3, a4, a5);

  if (!v6) {
    goto LABEL_19;
  }
  objc_msgSend_emojiRangeReplacements(*(void **)(a1 + 32), v7, v8, v9, v10);
  long long v86 = 0u;
  long long v87 = 0u;
  long long v88 = 0u;
  long long v89 = 0u;
  id v11 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v12, (uint64_t)&v86, (uint64_t)v90, 16);
  if (v13)
  {
    uint64_t v17 = v13;
    uint64_t v18 = *(void *)v87;
LABEL_4:
    uint64_t v19 = 0;
    while (1)
    {
      if (*(void *)v87 != v18) {
        objc_enumerationMutation(v11);
      }
      id v20 = *(void **)(*((void *)&v86 + 1) + 8 * v19);
      uint64_t v21 = objc_msgSend_objectForKey_(v20, v14, @"processedRange", v15, v16, (void)v86);
      unint64_t v26 = objc_msgSend_rangeValue(v21, v22, v23, v24, v25);
      uint64_t v28 = v27;

      uint64_t v29 = *(void *)(*(void *)(a1 + 40) + 8);
      unint64_t v30 = *(void *)(v29 + 32);
      if (v30 >= v26 && *(void *)(v29 + 40) + v30 <= v26 + v28) {
        break;
      }
      if (v17 == ++v19)
      {
        uint64_t v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v14, (uint64_t)&v86, (uint64_t)v90, 16);
        if (v17) {
          goto LABEL_4;
        }
        goto LABEL_11;
      }
    }
    uint64_t v32 = objc_msgSend_objectForKey_(v20, v14, @"notified", v15, v16);
    char v37 = objc_msgSend_BOOLValue(v32, v33, v34, v35, v36);

    if (v37)
    {
      char v31 = 1;
      goto LABEL_14;
    }
    id v45 = objc_msgSend_objectForKey_(v20, v38, @"originalRange", v39, v40);
    uint64_t v50 = objc_msgSend_rangeValue(v45, v46, v47, v48, v49);
    uint64_t v52 = v51;

    uint64_t v56 = objc_msgSend_indexOfObject_(v11, v53, (uint64_t)v20, v54, v55);
    uint64_t v57 = *(void **)(a1 + 32);
    uint64_t v62 = objc_msgSend_wordCallbackPostProcessedOffset(v57, v58, v59, v60, v61);
    objc_msgSend_setWordCallbackPostProcessedOffset_(v57, v63, v28 - v52 + v62, v64, v65);
    uint64_t v66 = *(void *)(*(void *)(a1 + 40) + 8);
    *(void *)(v66 + 32) = v50;
    *(void *)(v66 + 40) = v52;

    if (v56 != 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v70 = objc_msgSend_objectAtIndex_(v11, v67, v56, v68, v69);
      uint64_t v75 = objc_msgSend_mutableCopy(v70, v71, v72, v73, v74);

      objc_msgSend_setObject_forKeyedSubscript_(v75, v76, MEMORY[0x1E4F1CC38], @"notified", v77);
      objc_msgSend_replaceObjectAtIndex_withObject_(v11, v78, v56, (uint64_t)v75, v79);
    }
    goto LABEL_19;
  }
LABEL_11:
  char v31 = 0;
LABEL_14:

  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 32) -= objc_msgSend_wordCallbackPostProcessedOffset(*(void **)(a1 + 32), v41, v42, v43, v44);
  if ((v31 & 1) == 0)
  {
LABEL_19:
    uint64_t v80 = objc_msgSend_onWillSpeakRangeCallback(*(void **)(a1 + 32), v7, v8, v9, v10, (void)v86);

    if (v80)
    {
      objc_msgSend_onWillSpeakRangeCallback(*(void **)(a1 + 32), v81, v82, v83, v84);
      char v85 = (void (**)(void, void, void, void))objc_claimAutoreleasedReturnValue();
      v85[2](v85, *(void *)(a1 + 32), *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 32), *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
    }
  }
}

id _TTSSpeechReplaceEmoticons(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  uint64_t v12 = v7;
  if (!qword_1EB67A538)
  {
    uint64_t v13 = VOTBundle((uint64_t)v7, v8, v9, v10, v11);
    uint64_t v16 = objc_msgSend_pathForResource_ofType_(v13, v14, @"VOTEmoticons", @"plist", v15);

    if (v16)
    {
      uint64_t v20 = objc_msgSend_dictionaryWithContentsOfFile_(MEMORY[0x1E4F1C9E8], v17, (uint64_t)v16, v18, v19);
      uint64_t v21 = (void *)qword_1EB67A538;
      qword_1EB67A538 = v20;
    }
  }
  v48[0] = 0;
  v48[1] = v48;
  v48[2] = 0x2020000000;
  v48[3] = 0;
  uint64_t v42 = 0;
  uint64_t v43 = &v42;
  uint64_t v44 = 0x3032000000;
  id v45 = sub_1A6727F00;
  uint64_t v46 = sub_1A6727F10;
  id v47 = (id)objc_msgSend_mutableCopy(v5, v8, v9, v10, v11);
  unint64_t v26 = objc_msgSend_whitespaceAndNewlineCharacterSet(MEMORY[0x1E4F28B88], v22, v23, v24, v25);
  uint64_t v27 = (void *)qword_1EB67A538;
  v36[0] = MEMORY[0x1E4F143A8];
  v36[1] = 3221225472;
  v36[2] = sub_1A672E034;
  v36[3] = &unk_1E5C6AA48;
  uint64_t v40 = &v42;
  id v28 = v26;
  id v37 = v28;
  id v29 = v6;
  id v38 = v29;
  uint64_t v41 = v48;
  id v30 = v12;
  id v39 = v30;
  objc_msgSend_enumerateKeysAndObjectsUsingBlock_(v27, v31, (uint64_t)v36, v32, v33);
  id v34 = (id)v43[5];

  _Block_object_dispose(&v42, 8);
  _Block_object_dispose(v48, 8);

  return v34;
}

void sub_1A672E008(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1A672E034(void *a1, void *a2, void *a3)
{
  v71[2] = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (objc_msgSend_length(*(void **)(*(void *)(a1[7] + 8) + 40), v7, v8, v9, v10))
  {
    unint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = @".";
    do
    {
      uint64_t v18 = *(void **)(*(void *)(a1[7] + 8) + 40);
      uint64_t v19 = objc_msgSend_length(v18, v11, v12, v13, v14);
      uint64_t v21 = objc_msgSend_rangeOfString_options_range_(v18, v20, (uint64_t)v6, 2, v15 + v16, v19 - (v15 + v16));
      unint64_t v15 = v21;
      uint64_t v16 = (uint64_t)v22;
      if (v21)
      {
        if (v21 == 0x7FFFFFFFFFFFFFFFLL) {
          continue;
        }
        unint64_t v26 = (void *)a1[4];
        uint64_t v27 = objc_msgSend_characterAtIndex_(*(void **)(*(void *)(a1[7] + 8) + 40), v22, v21 - 1, v24, v25);
        if (!objc_msgSend_characterIsMember_(v26, v28, v27, v29, v30)) {
          continue;
        }
      }
      if (v15 + v16 != objc_msgSend_length(*(void **)(*(void *)(a1[7] + 8) + 40), v22, v23, v24, v25))
      {
        char v31 = (void *)a1[4];
        uint64_t v32 = objc_msgSend_characterAtIndex_(*(void **)(*(void *)(a1[7] + 8) + 40), v22, v15 + v16, v24, v25);
        if (!objc_msgSend_characterIsMember_(v31, v33, v32, v34, v35)) {
          continue;
        }
      }
      uint64_t v36 = objc_msgSend_rangeOfString_(v5, v22, (uint64_t)v17, v24, v25);
      if (v36 != 0x7FFFFFFFFFFFFFFFLL)
      {
        uint64_t v69 = objc_msgSend_substringToIndex_(v5, v22, v36, v24, v25);
        uint64_t v41 = VOTBundle((uint64_t)v69, v37, v38, v39, v40);
        uint64_t v42 = AXNSLocalizedStringForLocale();

        objc_msgSend_replaceCharactersInRange_withString_(*(void **)(*(void *)(a1[7] + 8) + 40), v43, v15, v16, (uint64_t)v42);
        *(void *)(*(void *)(a1[8] + 8) + 24) += objc_msgSend_length(v42, v44, v45, v46, v47) - v16;
        uint64_t v68 = (void *)a1[6];
        v70[0] = @"originalRange";
        uint64_t v50 = objc_msgSend_valueWithRange_(MEMORY[0x1E4F29238], v48, v15 - *(void *)(*(void *)(a1[8] + 8) + 24), v16, v49);
        v70[1] = @"processedRange";
        v71[0] = v50;
        uint64_t v51 = v17;
        uint64_t v52 = (void *)MEMORY[0x1E4F29238];
        uint64_t v57 = objc_msgSend_length(v42, v53, v54, v55, v56);
        uint64_t v60 = objc_msgSend_valueWithRange_(v52, v58, v15, v57, v59);
        v71[1] = v60;
        objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v61, (uint64_t)v71, (uint64_t)v70, 2);
        id v62 = v6;
        v64 = id v63 = v5;
        objc_msgSend_addObject_(v68, v65, (uint64_t)v64, v66, v67);

        id v5 = v63;
        id v6 = v62;

        uint64_t v17 = v51;
      }
    }
    while (v15 < objc_msgSend_length(*(void **)(*(void *)(a1[7] + 8) + 40), v22, v23, v24, v25));
  }
}

id TTSSpeechTransformText(void *a1, char a2)
{
  return TTSSpeechTransformTextWithLanguageAndVoiceIdentifier(a1, a2, 0, 0, 0);
}

id TTSSpeechTransformTextWithLanguage(void *a1, char a2, void *a3, void *a4)
{
  return TTSSpeechTransformTextWithLanguageAndVoiceIdentifier(a1, a2, a3, 0, a4);
}

uint64_t sub_1A672E340()
{
  qword_1EB67A578 = (uint64_t)os_log_create("com.apple.Accessibility", "SpeechManager");

  return MEMORY[0x1F41817F8]();
}

Class sub_1A672E384(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1A672E3DC(a1, a2, a3, a4, a5);
  Class result = objc_getClass("AXSettings");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1A68903D4((uint64_t)result, v7, v8, v9, v10);
  }
  qword_1EB67A598 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1A672E3DC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  v7[0] = 0;
  if (!qword_1EB67A560)
  {
    v7[1] = (void *)MEMORY[0x1E4F143A8];
    void v7[2] = (void *)3221225472;
    v7[3] = sub_1A672E4D4;
    v7[4] = &unk_1E5C69480;
    v7[5] = v7;
    long long v8 = xmmword_1E5C6AA68;
    uint64_t v9 = 0;
    qword_1EB67A560 = _sl_dlopen();
  }
  uint64_t v5 = qword_1EB67A560;
  if (!qword_1EB67A560) {
    sub_1A6890450(v7, a2, a3, a4, a5);
  }
  if (v7[0]) {
    free(v7[0]);
  }
  return v5;
}

uint64_t sub_1A672E4D4()
{
  uint64_t result = _sl_dlopen();
  qword_1EB67A560 = result;
  return result;
}

Class sub_1A672E548(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1A672E3DC(a1, a2, a3, a4, a5);
  Class result = objc_getClass("AXLanguageManager");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1A68904D0((uint64_t)result, v7, v8, v9, v10);
  }
  qword_1E96C48B8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1A672E5A0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v6 = (void *)sub_1A672E3DC(a1, a2, a3, a4, a5);
  Class result = dlsym(v6, "AXVOLocalizedStringForCharacter");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_1E96C48C0 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1A672E9C8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v6 = *(void **)(a1 + 32);
  uint64_t v8 = objc_msgSend_range(a2, (const char *)a2, a3, a4, a5);
  uint64_t v9 = *(void *)(a1 + 40);

  return objc_msgSend_transformRange_to_(v6, v7, v8, (uint64_t)v7, v9);
}

BOOL sub_1A672F6FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v8 = objc_msgSend_range(v3, v4, v5, v6, v7);
  if (v8 == objc_msgSend_range(*(void **)(a1 + 32), v9, v10, v11, v12))
  {
    objc_msgSend_range(v3, v13, v14, v15, v16);
    BOOL v18 = v17 == 0;
  }
  else
  {
    BOOL v18 = 0;
  }

  return v18;
}

BOOL sub_1A672F764(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  unint64_t v9 = objc_msgSend_range(a2, v5, v6, v7, v8);
  unint64_t v14 = objc_msgSend_range(v4, v10, v11, v12, v13);

  return v9 < v14;
}

id sub_1A672F9DC(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_msgSend_stringByReplacingOccurrencesOfString_withString_(a1, a2, @"&", @"&amp;",
  uint64_t v5 = a5);
  uint64_t v8 = objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v5, v6, @">", @"&gt", v7);;
  objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v8, v9, @"\"", @"&quot;",
  uint64_t v11 = v10);
  objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v11, v12, @"'", @"&apos;",
  unint64_t v14 = v13);
  objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v14, v15, @"<", @"&lt;",
  uint64_t v17 = v16);

  return v17;
}

id sub_1A672FAB8(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = objc_msgSend_stringByReplacingOccurrencesOfString_withString_(a1, a2, @"&lt", @"<", a5);;
  uint64_t v8 = objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v5, v6, @"&gt", @">", v7);;
  objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v8, v9, @"&quot;",
    @"\"",
  uint64_t v11 = v10);
  objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v11, v12, @"&apos;",
    @"'",
  unint64_t v14 = v13);
  objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v14, v15, @"&amp;",
    @"&",
  uint64_t v17 = v16);

  return v17;
}

uint64x2_t CreateMagicalWindow(uint64_t a1, int a2, uint64x2_t result)
{
  if (a2 >= 1)
  {
    *(float *)result.i32 = (float)a2;
    float32x4_t v44 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)result.i8, 0);
    uint64x2_t v45 = (uint64x2_t)vdupq_n_s64((unint64_t)a2 - 1);
    uint64_t v3 = (a2 + 3) & 0x1FFFFFFFCLL;
    uint64x2_t v4 = (uint64x2_t)xmmword_1A689D300;
    Class result = (uint64x2_t)xmmword_1A689D310;
    int32x4_t v5 = (int32x4_t)xmmword_1A689D800;
    uint64_t v6 = (_DWORD *)(a1 + 8);
    __asm { FMOV            V1.4S, #4.0 }
    float32x4_t v43 = _Q1;
    __asm { FMOV            V1.4S, #1.0 }
    float32x4_t v54 = _Q1;
    __asm { FMOV            V4.4S, #3.0 }
    float64x2_t v41 = (float64x2_t)vdupq_n_s64(0x3FF459A5D6E6692DuLL);
    float32x4_t v42 = _Q4;
    int64x2_t v39 = vdupq_n_s64(4uLL);
    float32x4_t v40 = (float32x4_t)vdupq_n_s32(0x3FC90FDBu);
    do
    {
      int64x2_t v52 = (int64x2_t)result;
      int64x2_t v53 = (int64x2_t)v4;
      int8x16_t v14 = (int8x16_t)vuzp1q_s32((int32x4_t)vcgeq_u64(v45, result), (int32x4_t)vcgeq_u64(v45, v4));
      int32x4_t v51 = v5;
      float32x4_t v15 = vdivq_f32(vmulq_f32(vcvtq_f32_s32(v5), v43), v44);
      int8x16_t v16 = (int8x16_t)vcgtq_f32(v54, v15);
      v17.i64[0] = 0x4000000040000000;
      v17.i64[1] = 0x4000000040000000;
      int8x16_t v18 = (int8x16_t)vcgtq_f32(v17, v15);
      int8x16_t v19 = (int8x16_t)vcgtq_f32(v42, v15);
      float32x4_t v20 = vsubq_f32(v17, v15);
      v21.i64[0] = 0xC0000000C0000000;
      v21.i64[1] = 0xC0000000C0000000;
      int8x16_t v50 = vandq_s8(v14, v16);
      int8x16_t v22 = vbicq_s8(v14, v16);
      int32x4_t v23 = (int32x4_t)vandq_s8(v22, v18);
      int8x16_t v24 = vbicq_s8(v22, v18);
      int8x16_t v48 = (int8x16_t)v23;
      int32x4_t v49 = (int32x4_t)vandq_s8(v24, v19);
      int32x4_t v25 = (int32x4_t)vbicq_s8(v24, v19);
      float32x4_t v26 = (float32x4_t)vbslq_s8((int8x16_t)v25, (int8x16_t)vaddq_f32(v20, v17), vbslq_s8((int8x16_t)v49, (int8x16_t)vaddq_f32(v15, v21), vbslq_s8((int8x16_t)v23, (int8x16_t)v20, (int8x16_t)v15)));
      int8x16_t v46 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vorn_s8((int8x8_t)vmovn_s32(v25), vorr_s8((int8x8_t)vmovn_s32(v49), (int8x8_t)vmovn_s32(v23)))), 0x1FuLL));
      int8x16_t v47 = (int8x16_t)v25;
      float32x4_t v58 = vmulq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v26.f32), v41)), vmulq_f64(vcvt_hight_f64_f32(v26), v41)), v40);
      float v55 = cosf(v58.f32[1]);
      v27.f32[0] = cosf(v58.f32[0]);
      v27.f32[1] = v55;
      float32x4_t v56 = v27;
      float v28 = cosf(v58.f32[2]);
      float32x4_t v29 = v56;
      v29.f32[2] = v28;
      float32x4_t v57 = v29;
      float v30 = cosf(v58.f32[3]);
      float32x4_t v31 = v57;
      v31.f32[3] = v30;
      v32.i64[0] = 0x3F0000003F000000;
      v32.i64[1] = 0x3F0000003F000000;
      v33.i64[0] = 0xBF000000BF000000;
      v33.i64[1] = 0xBF000000BF000000;
      float32x4_t v34 = vmlaq_f32(v32, v33, v31);
      float32x4_t v35 = vmulq_f32(v34, v34);
      float32x4_t v36 = vsqrtq_f32((float32x4_t)vbslq_s8(v46, (int8x16_t)v35, (int8x16_t)vsubq_f32(v54, v35)));
      int16x4_t v37 = vmovn_s32((int32x4_t)vorrq_s8(vorrq_s8(v47, vorrq_s8(v50, v48)), (int8x16_t)v49));
      if (v37.i8[0]) {
        *(v6 - 2) = v36.i32[0];
      }
      if (v37.i8[2]) {
        *(v6 - 1) = v36.i32[1];
      }
      if (v37.i8[4]) {
        *uint64_t v6 = v36.i32[2];
      }
      if (v37.i8[6]) {
        v6[1] = v36.i32[3];
      }
      uint64x2_t v4 = (uint64x2_t)vaddq_s64(v53, v39);
      Class result = (uint64x2_t)vaddq_s64(v52, v39);
      v38.i64[0] = 0x400000004;
      v38.i64[1] = 0x400000004;
      int32x4_t v5 = vaddq_s32(v51, v38);
      v6 += 4;
      v3 -= 4;
    }
    while (v3);
  }
  return result;
}

float calc_alpha(unsigned int a1, float a2)
{
  if (a1) {
    return 1.0 - powf(1.0 - a2, 1.0 / (float)a1);
  }
  else {
    return 1.0;
  }
}

void calc_alpha_TE(float a1, float a2, float a3)
{
  double v3 = a1 / (a2 * 1000.0);
  float v4 = floor(v3);
  float v5 = ceil(v3);
  if (v4 == v5)
  {
    if (v4) {
      powf((float)(a3 / -100.0) + 1.0, 1.0 / (float)v4);
    }
  }
  else
  {
    float v6 = a3 / 100.0;
    if (v4) {
      powf(1.0 - v6, 1.0 / (float)v4);
    }
    if (v5) {
      powf(1.0 - v6, 1.0 / (float)v5);
    }
  }
}

void *ausdk::AUInputElement::SetConnection(ausdk::AUInputElement *this, const AudioUnitConnection *a2)
{
  if (a2->sourceAudioUnit)
  {
    *((_DWORD *)this + 43) = 1;
    *((AudioUnitConnection *)this + 12) = *a2;
    return (void *)(*(uint64_t (**)(ausdk::AUInputElement *, void))(*(void *)this + 64))(this, 0);
  }
  else
  {
    *((_DWORD *)this + 43) = 0;
    return ausdk::AUBufferList::Deallocate((void *)this + 18);
  }
}

void *ausdk::AUInputElement::Disconnect(ausdk::AUInputElement *this)
{
  *((_DWORD *)this + 43) = 0;
  return ausdk::AUBufferList::Deallocate((void *)this + 18);
}

void *ausdk::AUInputElement::SetInputCallback(ausdk::AUInputElement *this, int (*a2)(void *, unsigned int *, const AudioTimeStamp *, unsigned int, unsigned int, AudioBufferList *), void *a3)
{
  if (a2)
  {
    *((_DWORD *)this + 43) = 2;
    *((void *)this + 22) = a2;
    *((void *)this + 23) = a3;
    return (void *)(*(uint64_t (**)(ausdk::AUInputElement *, void))(*(void *)this + 64))(this, 0);
  }
  else
  {
    *((_DWORD *)this + 43) = 0;
    return ausdk::AUBufferList::Deallocate((void *)this + 18);
  }
}

uint64_t ausdk::AUInputElement::SetStreamFormat(ausdk::AUInputElement *this, const AudioStreamBasicDescription *a2)
{
  uint64_t v3 = ausdk::AUIOElement::SetStreamFormat(this, a2);
  if (!v3) {
    (*(void (**)(ausdk::AUInputElement *, void))(*(void *)this + 64))(this, 0);
  }
  return v3;
}

uint64_t ausdk::AUInputElement::PullInput(ausdk::AUInputElement *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4, uint64_t a5)
{
  int v5 = *((_DWORD *)this + 43);
  if (!v5) {
    return 4294956420;
  }
  uint64_t v11 = (ausdk::AUInputElement *)((char *)this + 144);
  if (v5 == 1 || !*((unsigned char *)this + 168)) {
    uint64_t v12 = (AudioBufferList *)ausdk::AUBufferList::PrepareNullBuffer(v11, (const AudioStreamBasicDescription *)this + 2, a5);
  }
  else {
    uint64_t v12 = (AudioBufferList *)ausdk::AUBufferList::PrepareBuffer(v11, (const AudioStreamBasicDescription *)this + 2, a5);
  }
  if (*((_DWORD *)this + 43) == 1) {
    LODWORD(result) = AudioUnitRender(*((AudioUnit *)this + 24), a2, a3, *((_DWORD *)this + 50), a5, v12);
  }
  else {
    LODWORD(result) = (*((uint64_t (**)(void, unsigned int *, const AudioTimeStamp *, uint64_t, uint64_t, AudioBufferList *))this
  }
                       + 22))(*((void *)this + 23), a2, a3, a4, a5, v12);
  if (*((_DWORD *)this + 43)) {
    return result;
  }
  else {
    return 4294956420;
  }
}

uint64_t sub_1A673010C(void *a1)
{
  *a1 = &unk_1EFB7D4E0;
  ausdk::AUBufferList::Deallocate(a1 + 18);
  id v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }

  return sub_1A67024F8((uint64_t)a1);
}

void sub_1A6730174(void *a1)
{
  *a1 = &unk_1EFB7D4E0;
  ausdk::AUBufferList::Deallocate(a1 + 18);
  id v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  sub_1A67024F8((uint64_t)a1);

  JUMPOUT(0x1AD0C0C70);
}

BOOL sub_1A67301F0(uint64_t a1)
{
  return *(_DWORD *)(a1 + 172) == 2;
}

uint64_t sub_1A6730254()
{
  qword_1EB67AA70 = objc_alloc_init(TTSRegexCache);

  return MEMORY[0x1F41817F8]();
}

void sub_1A6730560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1A673057C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1A673058C(uint64_t a1)
{
}

void sub_1A6730594(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_msgSend_cache(*(void **)(a1 + 32), a2, a3, a4, a5);
  id v12 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v9 = objc_msgSend_objectForKey_(v12, v6, *(void *)(a1 + 40), v7, v8);
  uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v9;
}

void sub_1A6730600(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_msgSend_cache(*(void **)(a1 + 32), a2, a3, a4, a5);
  id v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setValue_forKey_(v8, v6, *(void *)(a1 + 40), *(void *)(a1 + 48), v7);
}

ausdk::AUBase *ausdk::AUBase::AUBase(ausdk::AUBase *this, OpaqueAudioComponentInstance *a2, int a3, int a4, int a5)
{
  uint64_t v9 = ausdk::ComponentBase::ComponentBase(this, a2);
  uint64_t v10 = 0;
  *(void *)uint64_t v9 = &unk_1EFB7DF78;
  *((_WORD *)v9 + 8) = 0;
  *((unsigned char *)v9 + 18) = 0;
  *((_DWORD *)v9 + 5) = a3;
  *((_DWORD *)v9 + 6) = a4;
  *((_DWORD *)v9 + 7) = a5;
  uint64_t v11 = (ausdk::ComponentBase *)((char *)v9 + 32);
  do
  {
    id v12 = (char *)this + v10;
    *((void *)v12 + 4) = 0;
    *((_DWORD *)v12 + 10) = 0;
    *((_OWORD *)v12 + 3) = 0uLL;
    *((_OWORD *)v12 + 4) = 0uLL;
    v10 += 48;
  }
  while (v10 != 192);
  *((void *)this + 28) = 0;
  *((void *)this + 32) = 0;
  *((unsigned char *)this + 264) = 0;
  *((void *)this + 29) = 0;
  *((void *)this + 30) = 0;
  *((unsigned char *)this + 248) = 0;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((void *)this + 42) = 0;
  mach_timebase_info v16 = 0;
  mach_timebase_info(&v16);
  LODWORD(v13) = v16.denom;
  LODWORD(v14) = v16.numer;
  *((double *)this + 43) = (double)v13 / (double)v14 * 1000000000.0;
  *((void *)this + 44) = 0;
  *((_DWORD *)this + 90) = -1;
  *((void *)this + 46) = 0;
  *((unsigned char *)this + 376) = 0;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((unsigned char *)this + 432) = 0;
  ausdk::AUBase::CreateLoggingString((AudioComponentInstance *)this, (std::string *)((char *)this + 440));
  *((void *)this + 41) = 0;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((void *)this + 34) = 0xFFEFFFFFFFFFFFFFLL;
  sub_1A6731908(v11, (uint64_t)this, 0, 1);
  *((_DWORD *)this + 90) = -1;
  *((void *)this + 46) = @"Untitled";
  CFRetain(@"Untitled");
  return this;
}

void sub_1A6731528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  unint64_t v13 = (void **)(v10 + 48);
  unint64_t v14 = (void *)v10[51];
  if (v14)
  {
    v10[52] = v14;
    operator delete(v14);
  }
  float32x4_t v15 = *v13;
  if (*v13)
  {
    v10[49] = v15;
    operator delete(v15);
  }
  sub_1A673872C(v11);
  uint64_t v16 = 24;
  do
  {
    a10 = (void **)&v10[v16];
    sub_1A67372B4(&a10);
    v16 -= 6;
  }
  while (v16 * 8);
  _Unwind_Resume(a1);
}

void ausdk::AUBase::CreateLoggingString(AudioComponentInstance *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  int v26 = 0;
  ausdk::ComponentBase::GetComponentDescription(this, (uint64_t)&v24);
  memset(__str, 0, sizeof(__str));
  snprintf((char *)__str, 0x20uLL, "AU (%p): ", this[1]);
  v4.i32[0] = bswap32(v24);
  int16x4_t v5 = (int16x4_t)vzip1_s8(v4, v4);
  *(int8x8_t *)v6.i8 = vbsl_s8((int8x8_t)vcgt_u16((uint16x4_t)0x5F005F005F005FLL, (uint16x4_t)(*(void *)&vadd_s16(v5, (int16x4_t)0xE000E000E000E0) & 0xFF00FF00FF00FFLL)), (int8x8_t)v5, (int8x8_t)0x2E002E002E002ELL);
  *((unsigned char *)&v19.__r_.__value_.__s + 23) = 4;
  LODWORD(v19.__r_.__value_.__l.__data_) = vmovn_s16(v6).u32[0];
  v19.__r_.__value_.__s.__data_[4] = 0;
  size_t v7 = strlen((const char *)__str);
  id v8 = std::string::insert(&v19, 0, (const std::string::value_type *)__str, v7);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  std::string::push_back(&v20, 47);
  int16x8_t v10 = *(int16x8_t *)&v20.__r_.__value_.__l.__data_;
  std::string v21 = v20;
  memset(&v20, 0, sizeof(v20));
  v10.i32[0] = bswap32(HIDWORD(v24));
  *(int8x8_t *)v10.i8 = vzip1_s8(*(int8x8_t *)v10.i8, *(int8x8_t *)v10.i8);
  *(int8x8_t *)v10.i8 = vbsl_s8((int8x8_t)vcgt_u16((uint16x4_t)0x5F005F005F005FLL, (uint16x4_t)(*(void *)&vadd_s16(*(int16x4_t *)v10.i8, (int16x4_t)0xE000E000E000E0) & 0xFF00FF00FF00FFLL)), *(int8x8_t *)v10.i8, (int8x8_t)0x2E002E002E002ELL);
  char v18 = 4;
  *(_DWORD *)__s = vmovn_s16(v10).u32[0];
  __s[4] = 0;
  uint64_t v11 = std::string::append(&v21, __s, 4uLL);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  std::string::push_back(&v22, 47);
  int16x8_t v13 = *(int16x8_t *)&v22.__r_.__value_.__l.__data_;
  std::string v23 = v22;
  memset(&v22, 0, sizeof(v22));
  v13.i32[0] = bswap32(v25);
  *(int8x8_t *)v13.i8 = vzip1_s8(*(int8x8_t *)v13.i8, *(int8x8_t *)v13.i8);
  *(int8x8_t *)v13.i8 = vbsl_s8((int8x8_t)vcgt_u16((uint16x4_t)0x5F005F005F005FLL, (uint16x4_t)(*(void *)&vadd_s16(*(int16x4_t *)v13.i8, (int16x4_t)0xE000E000E000E0) & 0xFF00FF00FF00FFLL)), *(int8x8_t *)v13.i8, (int8x8_t)0x2E002E002E002ELL);
  char v16 = 4;
  *(_DWORD *)float32x4_t v15 = vmovn_s16(v13).u32[0];
  v15[4] = 0;
  unint64_t v14 = std::string::append(&v23, v15, 4uLL);
  *a2 = *v14;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (v16 < 0) {
    operator delete(*(void **)v15);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (v18 < 0) {
    operator delete(*(void **)__s);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
}

void sub_1A6731840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v47 - 105) < 0) {
    operator delete(*(void **)(v47 - 128));
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

double ausdk::AUBase::ResetRenderTime(ausdk::AUBase *this)
{
  *((void *)this + 41) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *((void *)this + 34) = 0xFFEFFFFFFFFFFFFFLL;
  return result;
}

void **sub_1A6731908(ausdk::AUScope *this, uint64_t a2, int a3, uint64_t a4)
{
  *(void *)this = a2;
  *((_DWORD *)this + 2) = a3;
  uint64_t v5 = *((void *)this + 5);
  if (!v5) {
    return ausdk::AUScope::SetNumberOfElements(this, a4);
  }
  *(void *)(v5 + 8) = a2;
  *(_DWORD *)(v5 + 16) = a3;
  return (void **)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, a4);
}

void ausdk::AUBase::~AUBase(ausdk::AUBase *this)
{
  *(void *)this = &unk_1EFB7DF78;
  id v2 = (const void *)*((void *)this + 46);
  if (v2) {
    CFRelease(v2);
  }
  sub_1A670255C((const void **)this + 65);
  sub_1A670255C((const void **)this + 58);
  if (*((char *)this + 463) < 0) {
    operator delete(*((void **)this + 55));
  }
  uint64_t v3 = (void *)*((void *)this + 51);
  if (v3)
  {
    *((void *)this + 52) = v3;
    operator delete(v3);
  }
  int8x8_t v4 = (void *)*((void *)this + 48);
  if (v4)
  {
    *((void *)this + 49) = v4;
    operator delete(v4);
  }
  sub_1A673872C((unint64_t *)this + 28);
  uint64_t v5 = 192;
  do
  {
    int16x8_t v6 = (void **)((char *)this + v5);
    sub_1A67372B4(&v6);
    v5 -= 48;
  }
  while (v5);
}

uint64_t ausdk::AUBase::PostConstructorInternal(ausdk::AUBase *this)
{
  if (!*((_DWORD *)this + 84)) {
    (*(void (**)(ausdk::AUBase *, uint64_t))(*(void *)this + 512))(this, 1156);
  }

  return ausdk::AUBase::CreateElements((uint64_t)this);
}

uint64_t ausdk::AUBase::CreateElements(uint64_t this)
{
  if (!*(unsigned char *)(this + 16))
  {
    uint64_t v1 = this;
    sub_1A6731908((ausdk::AUScope *)(this + 80), v1, 1, *(unsigned int *)(v1 + 20));
    sub_1A6731908((ausdk::AUScope *)(v1 + 128), v1, 2, *(unsigned int *)(v1 + 24));
    sub_1A6731908((ausdk::AUScope *)(v1 + 176), v1, 3, *(unsigned int *)(v1 + 28));
    this = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 48))(v1);
    *(unsigned char *)(v1 + 16) = 1;
  }
  return this;
}

void ausdk::AUBase::PreDestructorInternal(ausdk::AUBase *this)
{
  uint64_t v2 = *((void *)this + 59);
  if (v2) {
    (*(void (**)(void))(*(void *)v2 + 16))(*((void *)this + 59));
  }
  v3.n128_f64[0] = ausdk::AUBase::DoCleanup(this);
  if (v2)
  {
    int8x8_t v4 = *(void (**)(uint64_t, __n128))(*(void *)v2 + 24);
    v4(v2, v3);
  }
}

void sub_1A6731BBC(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1A688F228(v1);
  }
  _Unwind_Resume(exception_object);
}

double ausdk::AUBase::DoCleanup(ausdk::AUBase *this)
{
  if (*((unsigned char *)this + 17)) {
    (*(void (**)(ausdk::AUBase *))(*(void *)this + 64))(this);
  }
  (*(void (**)(ausdk::AUBase *))(*(void *)this + 504))(this);
  *((void *)this + 41) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *((void *)this + 34) = 0xFFEFFFFFFFFFFFFFLL;
  *(_WORD *)((char *)this + 17) = 0;
  return result;
}

uint64_t ausdk::AUBase::SetMaxFramesPerSlice(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 336) != a2)
  {
    uint64_t v2 = this;
    *(_DWORD *)(this + 336) = a2;
    if (*(unsigned char *)(this + 432)) {
      (*(void (**)(uint64_t))(*(void *)this + 496))(this);
    }
    __n128 v3 = *(uint64_t (**)(uint64_t, uint64_t, void, void))(*(void *)v2 + 432);
    return v3(v2, 14, 0, 0);
  }
  return this;
}

uint64_t ausdk::AUBase::CanSetMaxFrames(ausdk::AUBase *this)
{
  if (*((unsigned char *)this + 17)) {
    return 4294956447;
  }
  else {
    return 0;
  }
}

uint64_t ausdk::AUBase::ReallocateBuffers(ausdk::AUBase *this)
{
  ausdk::AUBase::CreateElements((uint64_t)this);
  uint64_t v2 = *((void *)this + 21);
  if (v2)
  {
    LODWORD(v3) = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (*((void *)this + 19) - *((void *)this + 18)) >> 3;
    if (!v3) {
      goto LABEL_7;
    }
  }
  unsigned int v4 = 0;
  do
  {
    uint64_t v5 = sub_1A66F4000((uint64_t)this + 128, v4);
    (*(void (**)(uint64_t, void))(*(void *)v5 + 64))(v5, 0);
    ++v4;
  }
  while (v3 != v4);
LABEL_7:
  uint64_t result = *((void *)this + 15);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
    LODWORD(v7) = result;
    if (!result) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v7 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
    if (!v7) {
      goto LABEL_13;
    }
  }
  unsigned int v8 = 0;
  do
  {
    uint64_t v9 = sub_1A66F4000((uint64_t)this + 80, v8);
    uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)v9 + 64))(v9, 0);
    ++v8;
  }
  while (v7 != v8);
LABEL_13:
  *((unsigned char *)this + 432) = 1;
  return result;
}

void *ausdk::AUBase::DeallocateIOBuffers(void *this)
{
  if (*((unsigned char *)this + 432))
  {
    uint64_t v1 = this;
    uint64_t v2 = this[21];
    if (v2)
    {
      LODWORD(v3) = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
      if (!v3) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v3 = (v1[19] - v1[18]) >> 3;
      if (!v3) {
        goto LABEL_8;
      }
    }
    unsigned int v4 = 0;
    do
    {
      uint64_t v5 = (ausdk::AUIOElement *)sub_1A66F4000((uint64_t)(v1 + 16), v4);
      ausdk::AUIOElement::DeallocateBuffer(v5);
      ++v4;
    }
    while (v3 != v4);
LABEL_8:
    this = (void *)v1[15];
    if (this)
    {
      this = (void *)(*(uint64_t (**)(void *))(*this + 24))(this);
      LODWORD(v6) = this;
      if (!this) {
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t v6 = (v1[13] - v1[12]) >> 3;
      if (!v6)
      {
LABEL_14:
        *((unsigned char *)v1 + 432) = 0;
        return this;
      }
    }
    unsigned int v7 = 0;
    do
    {
      unsigned int v8 = (ausdk::AUIOElement *)sub_1A66F4000((uint64_t)(v1 + 10), v7);
      this = ausdk::AUIOElement::DeallocateBuffer(v8);
      ++v7;
    }
    while (v6 != v7);
    goto LABEL_14;
  }
  return this;
}

uint64_t ausdk::AUBase::DoInitialize(ausdk::AUBase *this)
{
  if (*((unsigned char *)this + 17)) {
    return 0;
  }
  uint64_t result = (*(uint64_t (**)(ausdk::AUBase *))(*(void *)this + 56))(this);
  if (!result)
  {
    if ((*(unsigned int (**)(ausdk::AUBase *))(*(void *)this + 160))(this)) {
      sub_1A6732094((void **)this + 48, 0x18uLL);
    }
    *((unsigned char *)this + 18) = 1;
    (*(void (**)(ausdk::AUBase *))(*(void *)this + 496))(this);
    uint64_t result = 0;
    *((unsigned char *)this + 17) = 1;
    __dmb(0xBu);
  }
  return result;
}

void sub_1A6732094(void **a1, unint64_t a2)
{
  unsigned int v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 5)
  {
    if (a2 >> 59) {
      sub_1A66E9D7C();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)sub_1A66F3EC8(v3, a2);
    unsigned int v7 = &v6[v5 & 0xFFFFFFFFFFFFFFE0];
    uint64_t v9 = &v6[32 * v8];
    uint64_t v11 = (char *)*a1;
    int16x8_t v10 = (char *)a1[1];
    long long v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v13;
        v12 -= 32;
        v10 -= 32;
      }
      while (v10 != v11);
      int16x8_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t ausdk::AUBase::Initialize(ausdk::AUBase *this)
{
  return 0;
}

uint64_t ausdk::AUBase::DoReset(ausdk::AUBase *this)
{
  *((void *)this + 41) = 0;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *((void *)this + 34) = 0xFFEFFFFFFFFFFFFFLL;
  return (*(uint64_t (**)(void))(*(void *)this + 72))();
}

uint64_t ausdk::AUBase::Reset(ausdk::AUBase *this)
{
  return 0;
}

uint64_t ausdk::AUBase::DispatchGetPropertyInfo(ausdk::AUBase *this, int a2, uint64_t a3, uint64_t a4, unsigned int *a5, BOOL *a6)
{
  switch(a2)
  {
    case 0:
    case 25:
    case 54:
      if (a3) {
        goto LABEL_52;
      }
      goto LABEL_3;
    case 1:
    case 23:
      if (a3 > 1) {
        goto LABEL_52;
      }
      goto LABEL_45;
    case 2:
      unsigned int v13 = 8;
      goto LABEL_14;
    case 3:
      LODWORD(v21) = 0;
      uint64_t v14 = (*(uint64_t (**)(ausdk::AUBase *, uint64_t, void, void **))(*(void *)this + 248))(this, a3, 0, &v21);
      if (v14) {
        return v14;
      }
      int v15 = 4 * v21;
      goto LABEL_55;
    case 4:
      uint64_t v14 = 0;
      int v15 = 104;
      goto LABEL_55;
    case 8:
      unsigned int v13 = 40;
LABEL_14:
      *a5 = v13;
      *a6 = ausdk::AUBase::IsStreamFormatWritable(this, a3, a4);
      goto LABEL_47;
    case 11:
      *a5 = 4;
      uint64_t v14 = 0;
      *a6 = (*(uint64_t (**)(ausdk::AUBase *, uint64_t))(*(void *)this + 216))(this, a3);
      return v14;
    case 12:
    case 61:
      if (!a3) {
        goto LABEL_7;
      }
      goto LABEL_52;
    case 13:
      if (a3) {
        goto LABEL_52;
      }
      int v16 = (*(uint64_t (**)(ausdk::AUBase *, void))(*(void *)this + 376))(this, 0);
      if (!v16) {
        goto LABEL_58;
      }
      int v12 = 4 * v16;
      goto LABEL_43;
    case 14:
      if (a3) {
        goto LABEL_52;
      }
      unsigned int v11 = 4;
      goto LABEL_46;
    case 16:
      uint64_t v14 = (*(uint64_t (**)(ausdk::AUBase *, uint64_t, uint64_t, void))(*(void *)this + 296))(this, a3, a4, 0);
      if (!v14) {
        goto LABEL_54;
      }
      return v14;
    case 19:
      *a6 = 0;
      unsigned int v17 = (*(uint64_t (**)(ausdk::AUBase *, uint64_t, uint64_t, void, BOOL *))(*(void *)this + 528))(this, a3, a4, 0, a6);
      uint64_t v14 = 0;
      *a5 = v17;
      if (!v17)
      {
        (*(void (**)(void **__return_ptr, ausdk::AUBase *, uint64_t, uint64_t))(*(void *)this + 552))(&v21, this, a3, a4);
        if (v21 == v22) {
          uint64_t v14 = 4294956417;
        }
        else {
          uint64_t v14 = 4294956445;
        }
        if (v21)
        {
          std::string v22 = v21;
          operator delete(v21);
        }
      }
      return v14;
    case 20:
      if (a3) {
        goto LABEL_52;
      }
      if (!(*(unsigned int (**)(ausdk::AUBase *))(*(void *)this + 360))(this)) {
        goto LABEL_58;
      }
      goto LABEL_7;
    case 22:
      if (a3) {
        goto LABEL_52;
      }
      int v12 = 4;
      goto LABEL_43;
    case 24:
      if (a3) {
        goto LABEL_52;
      }
      uint64_t v14 = (*(uint64_t (**)(ausdk::AUBase *, void))(*(void *)this + 312))(this, 0);
      if (v14) {
        return v14;
      }
LABEL_7:
      int v12 = 8;
LABEL_43:
      *a5 = v12;
      *a6 = 0;
      goto LABEL_47;
    case 27:
      if (a3) {
        goto LABEL_52;
      }
      unsigned int v11 = 40;
      goto LABEL_46;
    case 30:
LABEL_3:
      unsigned int v11 = 8;
      goto LABEL_46;
    case 32:
      (*(void (**)(void **__return_ptr, ausdk::AUBase *, uint64_t, uint64_t))(*(void *)this + 552))(&v21, this, a3, a4);
      char v18 = v21;
      if (v21 != v22)
      {
        *a5 = v22 - v21;
        *a6 = 0;
        if (v18)
        {
          std::string v22 = v18;
          operator delete(v18);
        }
        goto LABEL_48;
      }
      if (v21)
      {
        std::string v22 = v21;
        operator delete(v21);
      }
LABEL_58:
      uint64_t v14 = 4294956417;
      break;
    case 35:
      int v12 = 16;
      goto LABEL_43;
    case 36:
      if (a3) {
        goto LABEL_52;
      }
LABEL_45:
      unsigned int v11 = 16;
LABEL_46:
      *a5 = v11;
      *a6 = 1;
      goto LABEL_47;
    case 51:
      if ((a3 - 1) > 1)
      {
LABEL_52:
        uint64_t v14 = 4294956430;
      }
      else
      {
        *a6 = 1;
        *a5 = 4;
LABEL_47:
        uint64_t v19 = sub_1A6733078((uint64_t)this, a3);
        if (sub_1A66F3F00(v19, a4)) {
LABEL_48:
        }
          uint64_t v14 = 0;
        else {
          uint64_t v14 = 4294956419;
        }
      }
      break;
    case 53:
      uint64_t v14 = 0;
LABEL_54:
      int v15 = 8;
LABEL_55:
      *a5 = v15;
      *a6 = 0;
      return v14;
    default:
      return (*(uint64_t (**)(ausdk::AUBase *))(*(void *)this + 80))(this);
  }
  return v14;
}

uint64_t ausdk::AUBase::IsStreamFormatWritable(ausdk::AUBase *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = this;
  if (a2)
  {
    if (a2 != 2 && (a2 != 1 || *(_DWORD *)(sub_1A66F4000((uint64_t)this + 80, a3) + 172) == 1)) {
      return 0;
    }
    unsigned int v7 = *(uint64_t (**)(ausdk::AUBase *, uint64_t, uint64_t))(*(void *)v3 + 368);
    this = v3;
    uint64_t v8 = a2;
    uint64_t v9 = a3;
  }
  else
  {
    unsigned int v7 = *(uint64_t (**)(ausdk::AUBase *, uint64_t, uint64_t))(*(void *)this + 368);
    uint64_t v8 = 2;
    uint64_t v9 = 0;
  }

  return v7(this, v8, v9);
}

uint64_t ausdk::AUBase::DispatchGetProperty(ausdk::AUBase *this, int a2, uint64_t a3, uint64_t a4, _OWORD *a5)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  switch(a2)
  {
    case 0:
      __src[0] = 0;
      uint64_t v9 = (*(uint64_t (**)(ausdk::AUBase *, void **))(*(void *)this + 272))(this, __src);
      goto LABEL_37;
    case 1:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 15:
    case 17:
    case 18:
    case 21:
    case 23:
    case 26:
    case 28:
    case 29:
    case 31:
    case 33:
    case 34:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 52:
      return (*(uint64_t (**)(ausdk::AUBase *))(*(void *)this + 88))(this);
    case 2:
      (*(void (**)(void **__return_ptr, ausdk::AUBase *, uint64_t, uint64_t))(*(void *)this + 392))(__src, this, a3, a4);
      uint64_t v10 = 0;
      goto LABEL_38;
    case 3:
      unsigned int v33 = 0;
      uint64_t v10 = (*(uint64_t (**)(ausdk::AUBase *, uint64_t, void, unsigned int *))(*(void *)this + 248))(this, a3, 0, &v33);
      if (!v10)
      {
        sub_1A6737374(__src, v33);
        uint64_t v10 = (*(uint64_t (**)(ausdk::AUBase *, uint64_t, void *, unsigned int *))(*(void *)this + 248))(this, a3, __src[0], &v33);
        unsigned int v13 = __src[0];
        if (!v10) {
          memcpy(a5, __src[0], (char *)__src[1] - (char *)__src[0]);
        }
        if (v13)
        {
          __src[1] = v13;
          operator delete(v13);
        }
      }
      return v10;
    case 4:
      uint64_t v40 = 0;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      *(_OWORD *)DSPSplitComplex __src = 0u;
      long long v35 = 0u;
      uint64_t v10 = (*(uint64_t (**)(ausdk::AUBase *, uint64_t, uint64_t, void **))(*(void *)this + 256))(this, a3, a4, __src);
      long long v14 = v39;
      a5[4] = v38;
      a5[5] = v14;
      *((void *)a5 + 12) = v40;
      long long v15 = v35;
      *a5 = *(_OWORD *)__src;
      a5[1] = v15;
      long long v16 = v37;
      a5[2] = v36;
      a5[3] = v16;
      return v10;
    case 8:
      (*(void (**)(void **__return_ptr, ausdk::AUBase *, uint64_t, uint64_t))(*(void *)this + 392))(__src, this, a3, a4);
      uint64_t v10 = 0;
      long long v17 = v35;
      *a5 = *(_OWORD *)__src;
      a5[1] = v17;
      *((void *)a5 + 4) = v36;
      return v10;
    case 11:
      char v18 = (void *)sub_1A6733078((uint64_t)this, a3);
      uint64_t v19 = v18[5];
      if (v19) {
        LODWORD(v20) = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 24))(v19);
      }
      else {
        uint64_t v20 = (v18[3] - v18[2]) >> 3;
      }
      uint64_t v10 = 0;
      *(_DWORD *)a5 = v20;
      return v10;
    case 12:
      (*(void (**)(ausdk::AUBase *))(*(void *)this + 344))(this);
      goto LABEL_48;
    case 13:
      __src[0] = 0;
      unsigned int v29 = (*(uint64_t (**)(ausdk::AUBase *, void **))(*(void *)this + 376))(this, __src);
      if (v29) {
        BOOL v30 = __src[0] == 0;
      }
      else {
        BOOL v30 = 1;
      }
      if (!v30) {
        memcpy(a5, __src[0], 4 * v29);
      }
      return 0;
    case 14:
      uint64_t v10 = 0;
      int v21 = *((_DWORD *)this + 84);
      goto LABEL_50;
    case 16:
      __src[0] = 0;
      uint64_t v9 = (*(uint64_t (**)(ausdk::AUBase *, uint64_t, uint64_t, void **))(*(void *)this + 296))(this, a3, a4, __src);
      goto LABEL_37;
    case 19:
      LOBYTE(__src[0]) = 0;
      if (!(*(unsigned int (**)(ausdk::AUBase *, uint64_t, uint64_t, _OWORD *, void **))(*(void *)this
                                                                                                 + 528))(this, a3, a4, a5, __src))return 4294956417;
      return 0;
    case 20:
      if (!(*(unsigned int (**)(ausdk::AUBase *))(*(void *)this + 360))(this)) {
        return 4294956417;
      }
      double v28 = (*(double (**)(ausdk::AUBase *))(*(void *)this + 352))(this);
LABEL_48:
      uint64_t v10 = 0;
      *(double *)a5 = v28;
      return v10;
    case 22:
      uint64_t v10 = 0;
      *(_DWORD *)a5 = *((_DWORD *)this + 85);
      *((_DWORD *)this + 85) = 0;
      return v10;
    case 24:
      __src[0] = 0;
      uint64_t v9 = (*(uint64_t (**)(ausdk::AUBase *, void **))(*(void *)this + 312))(this, __src);
      goto LABEL_37;
    case 25:
      std::string v22 = (const void *)*((void *)this + 65);
      *(void *)a5 = v22;
      if (!v22) {
        return 4294956446;
      }
      goto LABEL_52;
    case 27:
      uint64_t v10 = 0;
      long long v23 = *((_OWORD *)this + 30);
      long long v24 = *((_OWORD *)this + 31);
      *((void *)a5 + 4) = *((void *)this + 64);
      *a5 = v23;
      a5[1] = v24;
      return v10;
    case 30:
      uint64_t v25 = sub_1A6733078((uint64_t)this, a3);
      __src[0] = *(void **)(sub_1A66F3F00(v25, a4) + 72);
      sub_1A67373EC((CFTypeRef *)__src);
      int v26 = __src[0];
      sub_1A670255C((const void **)__src);
      if (!v26) {
        return 4294956446;
      }
      CFRetain(v26);
      uint64_t v10 = 0;
      *(void *)a5 = v26;
      return v10;
    case 32:
      (*(void (**)(void **__return_ptr, ausdk::AUBase *, uint64_t, uint64_t))(*(void *)this + 552))(__src, this, a3, a4);
      float32x4_t v27 = __src[0];
      if (__src[0] == __src[1])
      {
        if (__src[0])
        {
          __src[1] = __src[0];
          operator delete(__src[0]);
        }
        return 4294956417;
      }
      else
      {
        memcpy(a5, __src[0], (char *)__src[1] - (char *)__src[0]);
        if (v27)
        {
          __src[1] = v27;
          operator delete(v27);
        }
        return 0;
      }
    case 35:
      *(_OWORD *)DSPSplitComplex __src = *a5;
      if (!LODWORD(__src[0])) {
        return 4294956445;
      }
      uint64_t v10 = (*(uint64_t (**)(ausdk::AUBase *, uint64_t))(*(void *)this + 304))(this, a3);
      *a5 = *(_OWORD *)__src;
      if (v10 != -10879) {
        return v10;
      }
      return (*(uint64_t (**)(ausdk::AUBase *, uint64_t, uint64_t, uint64_t, _OWORD *))(*(void *)this + 88))(this, 35, a3, a4, a5);
    case 36:
      *a5 = *(_OWORD *)((char *)this + 360);
      std::string v22 = (const void *)*((void *)this + 46);
      if (!v22) {
        return 0;
      }
      goto LABEL_52;
    case 51:
      uint64_t v31 = sub_1A6733078((uint64_t)this, a3);
      uint64_t v10 = 0;
      int v21 = *(unsigned __int8 *)(sub_1A673614C(v31, a4) + 168);
LABEL_50:
      *(_DWORD *)a5 = v21;
      return v10;
    case 53:
      __src[0] = 0;
      uint64_t v9 = (*(uint64_t (**)(ausdk::AUBase *, uint64_t, uint64_t, void **, char *))(*(void *)this + 264))(this, a3, a4, __src, (char *)__src + 4);
LABEL_37:
      uint64_t v10 = v9;
LABEL_38:
      unsigned int v11 = __src[0];
      goto LABEL_39;
    case 54:
      std::string v22 = (const void *)*((void *)this + 58);
      *(void *)a5 = v22;
      if (v22) {
LABEL_52:
      }
        CFRetain(v22);
      return 0;
    default:
      if (a2 == 61)
      {
        uint64_t v10 = 0;
        unsigned int v11 = (void *)*((void *)this + 34);
LABEL_39:
        *(void *)a5 = v11;
      }
      else
      {
        return (*(uint64_t (**)(ausdk::AUBase *))(*(void *)this + 88))(this);
      }
      return v10;
  }
}

void sub_1A6732F78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1A6733078(uint64_t a1, unsigned int a2)
{
  if (a2 < 4) {
    return a1 + 48 * a2 + 32;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 408))(a1);
  if (!result)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    sub_1A66E7DE8((uint64_t)exception, -10866);
    __cxa_throw(exception, (struct type_info *)&unk_1EFB7D058, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  return result;
}

void sub_1A673310C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ausdk::AUBase::DispatchSetProperty(const void **this, uint64_t a2, uint64_t a3, uint64_t a4, const void **__s2, uint64_t a6)
{
  int v6 = a6;
  if ((int)a2 > 18)
  {
    if ((int)a2 <= 35)
    {
      switch((int)a2)
      {
        case 19:
          if (a6 < 0xC) {
            return 4294956445;
          }
          unsigned int v12 = a6;
          if (20 * (unint64_t)*((unsigned int *)__s2 + 2) + 12 > a6) {
            return 4294956445;
          }
          if ((a6 & 0x1F) != 0) {
            unint64_t v13 = ((unint64_t)a6 >> 5) + 1;
          }
          else {
            unint64_t v13 = (unint64_t)a6 >> 5;
          }
          sub_1A6737410(__dst, v13);
          memcpy(__dst[0], __s2, v12);
          uint64_t v14 = (*((uint64_t (**)(const void **, uint64_t, uint64_t, void *))*this + 67))(this, a3, a4, __dst[0]);
          if (!v14) {
            (*((void (**)(const void **, uint64_t, uint64_t, uint64_t))*this + 54))(this, 19, a3, a4);
          }
          if (__dst[0])
          {
            __dst[1] = __dst[0];
            operator delete(__dst[0]);
          }
          return v14;
        case 23:
          if (a6 < 0x10) {
            return 4294956445;
          }
          int v21 = (uint64_t (*)(void))*((void *)*this + 30);
          return v21();
        case 25:
          if (a6 != 8) {
            return 4294956445;
          }
          if (a3) {
            return 4294956430;
          }
          sub_1A6733BDC(this + 65, *__s2);
          (*((void (**)(const void **, uint64_t, void, uint64_t))*this + 54))(this, 25, 0, a4);
          break;
        case 27:
          if (a3) {
            return 4294956430;
          }
          if (a6 >= 0x28) {
            size_t v22 = 40;
          }
          else {
            size_t v22 = a6;
          }
          int v23 = memcmp(this + 60, __s2, v22);
          *((_OWORD *)this + 30) = 0u;
          *((_OWORD *)this + 31) = 0u;
          this[64] = 0;
          memcpy(this + 60, __s2, v22);
          if (v23) {
            (*((void (**)(const void **, uint64_t, void, uint64_t))*this + 54))(this, 27, 0, a4);
          }
          return 0;
        case 30:
          uint64_t v24 = sub_1A6733078((uint64_t)this, a3);
          if (!sub_1A66F3F00(v24, a4)) {
            return 4294956419;
          }
          if (v6 != 8) {
            return 4294956445;
          }
          uint64_t v25 = sub_1A6733078((uint64_t)this, a3);
          uint64_t v26 = sub_1A66F3F00(v25, a4);
          sub_1A6733BDC((const void **)(v26 + 72), *__s2);
          (*((void (**)(const void **, uint64_t, uint64_t, uint64_t))*this + 54))(this, 30, a3, a4);
          break;
        default:
          goto LABEL_78;
      }
      return 0;
    }
    switch(a2)
    {
      case '$':
        if (a6 != 16) {
          return 4294956445;
        }
        if (!a3)
        {
          float32x4_t v27 = (void *)__s2[1];
          __dst[0] = (void *)*__s2;
          __dst[1] = v27;
          if (((uint64_t)__dst[0] & 0x80000000) != 0)
          {
            if (!v27) {
              return 4294956445;
            }
            uint64_t v28 = (*((uint64_t (**)(const void **, void **))*this + 41))(this, __dst);
          }
          else
          {
            uint64_t v28 = (*((uint64_t (**)(const void **, void **))*this + 40))(this, __dst);
          }
          uint64_t v14 = v28;
          if (v28) {
            return v14;
          }
          (*((void (**)(const void **, uint64_t, void, uint64_t))*this + 54))(this, 36, 0, a4);
          return 0;
        }
        break;
      case '3':
        if ((a3 - 1) <= 1)
        {
          uint64_t v29 = sub_1A6733078((uint64_t)this, a3);
          if (!sub_1A66F3F00(v29, a4)) {
            return 4294956419;
          }
          if (v6 == 4)
          {
            if (*((unsigned char *)this + 17)) {
              return 4294956447;
            }
            uint64_t v30 = sub_1A6733078((uint64_t)this, a3);
            uint64_t v14 = 0;
            *(unsigned char *)(sub_1A673614C(v30, a4) + 168) = *(_DWORD *)__s2 != 0;
            return v14;
          }
          return 4294956445;
        }
        break;
      case '6':
        if (!a3)
        {
          if (a6 == 8)
          {
            sub_1A6733BDC(this + 58, *__s2);
            (*((void (**)(const void **, uint64_t, void, uint64_t))*this + 54))(this, 54, 0, a4);
            return 0;
          }
          return 4294956445;
        }
        break;
      default:
LABEL_78:
        uint64_t v14 = (*((uint64_t (**)(const void **, uint64_t, uint64_t, uint64_t, const void **, uint64_t))*this + 12))(this, a2, a3, a4, __s2, a6);
        if (!v14) {
          (*((void (**)(const void **, uint64_t, uint64_t, uint64_t))*this + 54))(this, a2, a3, a4);
        }
        return v14;
    }
    return 4294956430;
  }
  switch((int)a2)
  {
    case 0:
      if (a6 != 8) {
        return 4294956445;
      }
      if (a3) {
        return 4294956430;
      }
      long long v15 = (uint64_t (*)(void))*((void *)*this + 36);
      return v15();
    case 1:
      if (a6 < 0x10) {
        return 4294956445;
      }
      *(_OWORD *)__dst = *(_OWORD *)__s2;
      uint64_t v17 = (*((uint64_t (**)(const void **, void **))*this + 29))(this, __dst);
      goto LABEL_27;
    case 2:
      if (a6 != 8) {
        return 4294956445;
      }
      uint64_t v18 = sub_1A6733078((uint64_t)this, a3);
      if (!sub_1A66F3F00(v18, a4)) {
        return 4294956419;
      }
      uint64_t v36 = 0;
      *(_OWORD *)__dst = 0u;
      long long v35 = 0u;
      (*((void (**)(void **__return_ptr, const void **, uint64_t, uint64_t))*this + 49))(__dst, this, a3, a4);
      long long v31 = *(_OWORD *)__dst;
      long long v32 = v35;
      uint64_t v33 = v36;
      *(void *)&long long v31 = *__s2;
      if (!(*((unsigned int (**)(const void **, uint64_t, uint64_t, long long *))*this + 48))(this, a3, a4, &v31))goto LABEL_81; {
      if (!memcmp(__dst, &v31, 0x28uLL))
      }
        return 0;
      if (!ausdk::AUBase::IsStreamFormatWritable((ausdk::AUBase *)this, a3, a4)) {
        goto LABEL_82;
      }
      uint64_t v17 = (*((uint64_t (**)(const void **, uint64_t, uint64_t, void **, long long *))*this + 50))(this, a3, a4, __dst, &v31);
      goto LABEL_27;
    case 8:
      if (a6 < 0x24) {
        return 4294956445;
      }
      uint64_t v19 = sub_1A6733078((uint64_t)this, a3);
      if (!sub_1A66F3F00(v19, a4)) {
        return 4294956419;
      }
      long long v20 = *((_OWORD *)__s2 + 1);
      *(_OWORD *)__dst = *(_OWORD *)__s2;
      long long v35 = v20;
      uint64_t v36 = *((unsigned int *)__s2 + 8);
      if (sub_1A6733B38((uint64_t)__dst)
        && (*((unsigned int (**)(const void **, uint64_t, uint64_t, void **))*this + 48))(this, a3, a4, __dst))
      {
        uint64_t v33 = 0;
        long long v31 = 0u;
        long long v32 = 0u;
        (*((void (**)(long long *__return_ptr, const void **, uint64_t, uint64_t))*this + 49))(&v31, this, a3, a4);
        if (!memcmp(&v31, __dst, 0x28uLL)) {
          return 0;
        }
        if (ausdk::AUBase::IsStreamFormatWritable((ausdk::AUBase *)this, a3, a4))
        {
          uint64_t v17 = (*((uint64_t (**)(const void **, uint64_t, uint64_t, long long *, void **))*this + 50))(this, a3, a4, &v31, __dst);
LABEL_27:
          uint64_t v14 = v17;
        }
        else
        {
LABEL_82:
          uint64_t v14 = 4294956431;
        }
      }
      else
      {
LABEL_81:
        uint64_t v14 = 4294956428;
      }
      break;
    case 11:
      if (a6 != 4) {
        return 4294956445;
      }
      if (!(*((unsigned int (**)(const void **, uint64_t))*this + 27))(this, a3)) {
        goto LABEL_82;
      }
      uint64_t v14 = (*((uint64_t (**)(const void **, uint64_t, void))*this + 28))(this, a3, *(unsigned int *)__s2);
      if (!v14) {
        (*((void (**)(const void **, uint64_t, uint64_t, uint64_t))*this + 54))(this, 11, a3, a4);
      }
      return v14;
    case 14:
      if (a6 != 4) {
        return 4294956445;
      }
      uint64_t v14 = (*((uint64_t (**)(const void **))*this + 65))(this);
      if (!v14) {
        (*((void (**)(const void **, void))*this + 64))(this, *(unsigned int *)__s2);
      }
      return v14;
    default:
      goto LABEL_78;
  }
  return v14;
}

void sub_1A6733AB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1A6733B38(uint64_t a1)
{
  uint64_t result = 0;
  if (*(double *)a1 >= 0.0 && *(double *)a1 < 3000000.0)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 16);
    if (v3 >= 0xF4240) {
      return 0;
    }
    unsigned int v4 = *(_DWORD *)(a1 + 20);
    if (v4 >= 0xF4240) {
      return 0;
    }
    unsigned int v5 = *(_DWORD *)(a1 + 24);
    if (v5 >= 0xF4240) {
      return 0;
    }
    uint64_t result = 0;
    if ((*(_DWORD *)(a1 + 28) - 1) > 0x3FF || *(_DWORD *)(a1 + 32) > 0x400u) {
      return result;
    }
    int v6 = *(_DWORD *)(a1 + 8);
    if (!v6) {
      return 0;
    }
    BOOL v8 = v4 == 1 && v3 == v5;
    return v6 != 1819304813 || v8;
  }
  return result;
}

const void **sub_1A6733BDC(const void **a1, const void *a2)
{
  if (*a1 != a2)
  {
    sub_1A670255C(a1);
    *a1 = a2;
    sub_1A67373EC(a1);
  }
  return a1;
}

uint64_t ausdk::AUBase::DispatchRemovePropertyValue(ausdk::AUBase *this, int a2, uint64_t a3, uint64_t a4)
{
  if (a2 > 26)
  {
    if (a2 == 27)
    {
      if (!a3)
      {
        uint64_t v14 = 0;
        memset(v13, 0, sizeof(v13));
        unsigned int v12 = (_OWORD *)((char *)this + 480);
        if (!memcmp((char *)this + 480, v13, 0x28uLL)) {
          return 0;
        }
        *((void *)this + 64) = 0;
        _OWORD *v12 = 0u;
        *((_OWORD *)this + 31) = 0u;
        unsigned int v7 = *(void (**)(ausdk::AUBase *, uint64_t, void, uint64_t))(*(void *)this + 432);
        BOOL v8 = this;
        uint64_t v9 = 27;
LABEL_18:
        v7(v8, v9, 0, a4);
        return 0;
      }
    }
    else
    {
      if (a2 != 54) {
        goto LABEL_13;
      }
      if (!a3)
      {
        sub_1A6733BDC((const void **)this + 58, 0);
        unsigned int v7 = *(void (**)(ausdk::AUBase *, uint64_t, void, uint64_t))(*(void *)this + 432);
        BOOL v8 = this;
        uint64_t v9 = 54;
        goto LABEL_18;
      }
    }
    return 4294956430;
  }
  if (a2 == 19)
  {
    uint64_t result = (*(uint64_t (**)(ausdk::AUBase *, uint64_t, uint64_t))(*(void *)this + 544))(this, a3, a4);
    if (result) {
      return result;
    }
    (*(void (**)(ausdk::AUBase *, uint64_t, uint64_t, uint64_t))(*(void *)this + 432))(this, 19, a3, a4);
    return 0;
  }
  if (a2 == 25)
  {
    sub_1A6733BDC((const void **)this + 65, 0);
    return 0;
  }
LABEL_13:
  unsigned int v11 = *(uint64_t (**)(void))(*(void *)this + 104);

  return v11();
}

uint64_t ausdk::AUBase::GetPropertyInfo(ausdk::AUBase *this, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  return 4294956417;
}

uint64_t ausdk::AUBase::GetProperty(ausdk::AUBase *this, unsigned int a2, unsigned int a3, unsigned int a4, void *a5)
{
  return 4294956417;
}

uint64_t ausdk::AUBase::SetProperty(ausdk::AUBase *this, unsigned int a2, unsigned int a3, unsigned int a4, const void *a5)
{
  return 4294956417;
}

uint64_t ausdk::AUBase::RemovePropertyValue(ausdk::AUBase *this)
{
  return 4294956445;
}

uint64_t ausdk::AUBase::AddPropertyListener(ausdk::AUBase *this, int a2, void (*a3)(void *, OpaqueAudioComponentInstance *, unsigned int, unsigned int, unsigned int), void *a4)
{
  BOOL v8 = (char **)((char *)this + 408);
  unint64_t v9 = *((void *)this + 52);
  if (*((void *)this + 51) == v9)
  {
    sub_1A6733F74((void **)this + 51, 0x20uLL);
    unint64_t v9 = *((void *)this + 52);
  }
  unint64_t v10 = *((void *)this + 53);
  if (v9 >= v10)
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)*v8) >> 3);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_1A66E9D7C();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (void)*v8) >> 3);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x555555555555555) {
      unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15) {
      long long v16 = (char *)sub_1A66FA0B4((uint64_t)this + 424, v15);
    }
    else {
      long long v16 = 0;
    }
    uint64_t v17 = &v16[24 * v12];
    uint64_t v18 = &v16[24 * v15];
    *(_DWORD *)uint64_t v17 = a2;
    *((void *)v17 + 1) = a3;
    *((void *)v17 + 2) = a4;
    unsigned int v11 = v17 + 24;
    long long v20 = (char *)*((void *)this + 51);
    uint64_t v19 = (char *)*((void *)this + 52);
    if (v19 != v20)
    {
      do
      {
        long long v21 = *(_OWORD *)(v19 - 24);
        *((void *)v17 - 1) = *((void *)v19 - 1);
        *(_OWORD *)(v17 - 24) = v21;
        v17 -= 24;
        v19 -= 24;
      }
      while (v19 != v20);
      uint64_t v19 = *v8;
    }
    *((void *)this + 51) = v17;
    *((void *)this + 52) = v11;
    *((void *)this + 53) = v18;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    *(_DWORD *)unint64_t v9 = a2;
    unsigned int v11 = (char *)(v9 + 24);
    *(void *)(v9 + 8) = a3;
    *(void *)(v9 + 16) = a4;
  }
  *((void *)this + 52) = v11;
  return 0;
}

void sub_1A6733F74(void **a1, unint64_t a2)
{
  unsigned int v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)*a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_1A66E9D7C();
    }
    uint64_t v5 = ((unsigned char *)a1[1] - (unsigned char *)*a1) / 24;
    int v6 = (char *)sub_1A66FA0B4(v3, a2);
    unsigned int v7 = &v6[24 * v5];
    unint64_t v9 = &v6[24 * v8];
    unsigned int v11 = (char *)*a1;
    unint64_t v10 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *(_OWORD *)(v10 - 24);
        *((void *)v12 - 1) = *((void *)v10 - 1);
        *(_OWORD *)(v12 - 24) = v13;
        v12 -= 24;
        v10 -= 24;
      }
      while (v10 != v11);
      unint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t ausdk::AUBase::RemovePropertyListener(ausdk::AUBase *this, int a2, void (*a3)(void *, OpaqueAudioComponentInstance *, unsigned int, unsigned int, unsigned int), void *a4, int a5)
{
  uint64_t v6 = *((void *)this + 51);
  uint64_t v5 = (long long *)*((void *)this + 52);
  if ((long long *)v6 != v5)
  {
    while (*(_DWORD *)v6 != a2
         || *(void (**)(void *, OpaqueAudioComponentInstance *, unsigned int, unsigned int, unsigned int))(v6 + 8) != a3
         || a5 && *(void **)(v6 + 16) != a4)
    {
      v6 += 24;
      if ((long long *)v6 == v5) {
        return 0;
      }
    }
    if ((long long *)v6 != v5)
    {
      uint64_t v8 = (long long *)(v6 + 24);
      if ((long long *)(v6 + 24) != v5)
      {
        do
        {
          if (*(_DWORD *)v8 != a2
            || *((void (**)(void *, OpaqueAudioComponentInstance *, unsigned int, unsigned int, unsigned int))v8
               + 1) != a3
            || a5 && *((void **)v8 + 2) != a4)
          {
            long long v9 = *v8;
            *(void *)(v6 + 16) = *((void *)v8 + 2);
            *(_OWORD *)uint64_t v6 = v9;
            v6 += 24;
          }
          uint64_t v8 = (long long *)((char *)v8 + 24);
        }
        while (v8 != v5);
        uint64_t v5 = (long long *)*((void *)this + 52);
      }
      if ((long long *)v6 != v5) {
        *((void *)this + 52) = v6;
      }
    }
  }
  return 0;
}

uint64_t ausdk::AUBase::PropertyChanged(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(this + 408);
  uint64_t v5 = *(void *)(this + 416);
  if (v4 != v5)
  {
    uint64_t v9 = this;
    do
    {
      if (*(_DWORD *)v4 == a2) {
        this = (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t))(v4 + 8))(*(void *)(v4 + 16), *(void *)(v9 + 8), a2, a3, a4);
      }
      v4 += 24;
    }
    while (v4 != v5);
  }
  return this;
}

uint64_t ausdk::AUBase::SetRenderNotification(ausdk::AUBase *this, int (*a2)(void *, unsigned int *, const AudioTimeStamp *, unsigned int, unsigned int, AudioBufferList *), unint64_t a3)
{
  if (!a2) {
    return 4294967246;
  }
  *((unsigned char *)this + 248) = 1;
  uint64_t v6 = sub_1A67387E4((uint64_t)this + 224);
  *((_DWORD *)v6 + 2) = 1;
  v6[2] = (unint64_t)a2;
  _DWORD v6[3] = a3;
  do
  {
    unint64_t v7 = atomic_load((unint64_t *)this + 29);
    *uint64_t v6 = v7;
    unint64_t v8 = v7;
    atomic_compare_exchange_strong((atomic_ullong *volatile)this + 29, &v8, (unint64_t)v6);
  }
  while (v8 != v7);
  return 0;
}

uint64_t ausdk::AUBase::RemoveRenderNotification(ausdk::AUBase *this, int (*a2)(void *, unsigned int *, const AudioTimeStamp *, unsigned int, unsigned int, AudioBufferList *), unint64_t a3)
{
  uint64_t v6 = sub_1A67387E4((uint64_t)this + 224);
  *((_DWORD *)v6 + 2) = 2;
  v6[2] = (unint64_t)a2;
  _DWORD v6[3] = a3;
  do
  {
    unint64_t v7 = atomic_load((unint64_t *)this + 29);
    *uint64_t v6 = v7;
    unint64_t v8 = v7;
    atomic_compare_exchange_strong((atomic_ullong *volatile)this + 29, &v8, (unint64_t)v6);
  }
  while (v8 != v7);
  return 0;
}

uint64_t ausdk::AUBase::GetParameter(ausdk::AUBase *this, unsigned int a2, unsigned int a3, unsigned int a4, float *a5)
{
  uint64_t v8 = sub_1A6733078((uint64_t)this, a3);
  uint64_t v9 = (char **)sub_1A66F4000(v8, a4);
  *a5 = ausdk::AUElement::GetParameter(v9, a2);
  return 0;
}

uint64_t ausdk::AUBase::SetParameter(ausdk::AUBase *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  uint64_t v8 = sub_1A6733078((uint64_t)this, a3);
  uint64_t v9 = (ausdk::AUElement *)sub_1A66F4000(v8, a4);
  ausdk::AUElement::SetParameter(v9, a2, a5, 0);
  return 0;
}

uint64_t ausdk::AUBase::ScheduleParameter(ausdk::AUBase *this, const AudioUnitParameterEvent *a2, int a3)
{
  int v6 = (*(uint64_t (**)(ausdk::AUBase *))(*(void *)this + 160))(this);
  if (a3)
  {
    int v7 = v6;
    uint64_t v8 = 0;
    uint64_t v9 = (char **)((char *)this + 384);
    do
    {
      unint64_t v10 = &a2[v8];
      if (v10->eventType == kParameterEvent_Immediate) {
        (*(void (**)(ausdk::AUBase *, void, void, void, void, AudioUnitParameterValue))(*(void *)this + 152))(this, v10->parameter, v10->scope, v10->element, v10->eventValues.immediate.bufferOffset, v10->eventValues.immediate.value);
      }
      if (v7)
      {
        unsigned int v11 = (_OWORD *)*((void *)this + 49);
        unint64_t v12 = *((void *)this + 50);
        if ((unint64_t)v11 >= v12)
        {
          uint64_t v15 = ((char *)v11 - *v9) >> 5;
          unint64_t v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 59) {
            sub_1A66E9D7C();
          }
          uint64_t v17 = v12 - (void)*v9;
          if (v17 >> 4 > v16) {
            unint64_t v16 = v17 >> 4;
          }
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v18 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v18 = v16;
          }
          if (v18) {
            uint64_t v19 = (char *)sub_1A66F3EC8((uint64_t)this + 400, v18);
          }
          else {
            uint64_t v19 = 0;
          }
          long long v20 = &v19[32 * v15];
          AudioUnitParameterEvent::$30DB46DA13B14C3192C3DF0E34A08043 eventValues = v10->eventValues;
          *(_OWORD *)long long v20 = *(_OWORD *)&v10->scope;
          *((AudioUnitParameterEvent::$30DB46DA13B14C3192C3DF0E34A08043 *)v20 + 1) = eventValues;
          int v23 = (char *)*((void *)this + 48);
          size_t v22 = (char *)*((void *)this + 49);
          uint64_t v24 = v20;
          if (v22 != v23)
          {
            do
            {
              long long v25 = *((_OWORD *)v22 - 1);
              *((_OWORD *)v24 - 2) = *((_OWORD *)v22 - 2);
              *((_OWORD *)v24 - 1) = v25;
              v24 -= 32;
              v22 -= 32;
            }
            while (v22 != v23);
            size_t v22 = *v9;
          }
          unint64_t v14 = v20 + 32;
          *((void *)this + 48) = v24;
          *((void *)this + 49) = v20 + 32;
          *((void *)this + 50) = &v19[32 * v18];
          if (v22) {
            operator delete(v22);
          }
        }
        else
        {
          AudioUnitParameterEvent::$30DB46DA13B14C3192C3DF0E34A08043 v13 = v10->eventValues;
          *unsigned int v11 = *(_OWORD *)&v10->scope;
          v11[1] = v13;
          unint64_t v14 = v11 + 2;
        }
        *((void *)this + 49) = v14;
      }
      ++v8;
    }
    while (v8 != a3);
  }
  return 0;
}

uint64_t ausdk::AUBase::ProcessForScheduledParams(uint64_t a1, long long **a2, uint64_t a3, uint64_t a4, __n128 a5)
{
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  unint64_t v10 = 126 - 2 * __clz(((char *)v9 - (char *)v8) >> 5);
  long long v31 = sub_1A67346E8;
  if (v9 == v8) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = v10;
  }
  sub_1A67374CC(v8, v9, (uint64_t (**)(long long *, long long *))&v31, v11, 1, a5);
  if (a3)
  {
    uint64_t v12 = 0;
    unsigned int v13 = a3;
    while (1)
    {
      uint64_t v15 = (unsigned int *)*a2;
      unint64_t v14 = a2[1];
      uint64_t v16 = a3;
      uint64_t v17 = *a2;
      if (*a2 != v14) {
        break;
      }
      uint64_t v22 = (a3 - v12);
      uint64_t v16 = a3;
LABEL_21:
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 568))(a1, a4, v12, v22, a3);
      if (result) {
        return result;
      }
      uint64_t v12 = v16;
      BOOL v24 = v13 > v22;
      if (v13 >= v22) {
        v13 -= v22;
      }
      else {
        unsigned int v13 = 0;
      }
      if (!v24) {
        return 0;
      }
    }
    while (1)
    {
      int v18 = *((_DWORD *)v17 + 4);
      if (v18 > (int)v12 && v18 < (int)v16) {
        break;
      }
      if (*((_DWORD *)v17 + 3) == 2)
      {
        int v20 = *((_DWORD *)v17 + 5) + v18;
        if (v20 >= (int)v16 || v20 <= (int)v12) {
          uint64_t v16 = v16;
        }
        else {
          uint64_t v16 = v20;
        }
      }
      v17 += 2;
      if (v17 == v14) {
        goto LABEL_28;
      }
    }
    uint64_t v16 = *((unsigned int *)v17 + 4);
LABEL_28:
    uint64_t v22 = (v16 - v12);
    while (1)
    {
      if (v15 == (unsigned int *)v14) {
        goto LABEL_21;
      }
      int v25 = v15[4];
      if (v15[3] != 2) {
        break;
      }
      if (v25 < (int)v16 && (int)(v15[5] + v25) > (int)v12) {
        goto LABEL_38;
      }
LABEL_40:
      v15 += 8;
    }
    if (v25 > v12) {
      goto LABEL_40;
    }
LABEL_38:
    unsigned int v27 = v15[1];
    uint64_t v28 = sub_1A6733078(a1, *v15);
    uint64_t v29 = sub_1A66F3F00(v28, v27);
    if (v29) {
      (*(void (**)(uint64_t, void, unsigned int *, uint64_t, void, void))(*(void *)v29 + 32))(v29, v15[2], v15, v12, (v16 - v12), 0);
    }
    goto LABEL_40;
  }
  return 0;
}

BOOL sub_1A67346E8(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 16) < *(_DWORD *)(a2 + 16);
}

uint64_t ausdk::AUBase::SetWantsRenderThreadID(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 264) != a2)
  {
    *(unsigned char *)(this + 264) = a2;
    if ((a2 & 1) == 0) {
      *(void *)(this + 256) = 0;
    }
  }
  return this;
}

uint64_t ausdk::AUBase::DoRender(ausdk::AUBase *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4, uint64_t a5, AudioBufferList *a6)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 17))
  {
    unsigned int v8 = *((_DWORD *)this + 84);
    if (v8 < a5)
    {
      uint64_t v9 = mach_absolute_time();
      if (*((double *)this + 43) < (double)(v9 - *((void *)this + 44)))
      {
        *((void *)this + 44) = v9;
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          sub_1A68906FC((uint64_t)this + 336, a5, v10, v11, v12, v13, v14, v15);
        }
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        sub_1A6890684();
      }
      uint64_t v16 = 4294956422;
      if (!*((_DWORD *)this + 85))
      {
        *((_DWORD *)this + 85) = -10874;
        (*(void (**)(ausdk::AUBase *, uint64_t, void, void))(*(void *)this + 432))(this, 22, 0, 0);
      }
      return v16;
    }
    if (v8 != a5 && *((unsigned char *)this + 376) != 0)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        sub_1A6890780();
      }
      uint64_t v16 = 4294967246;
      if (*((_DWORD *)this + 85)) {
        return v16;
      }
      goto LABEL_48;
    }
    uint64_t v22 = sub_1A66F4000((uint64_t)this + 128, a4);
    if ((*(unsigned char *)(v22 + 92) & 0x20) != 0) {
      uint64_t v23 = *(unsigned int *)(v22 + 108);
    }
    else {
      uint64_t v23 = 1;
    }
    if (v23 == a6->mNumberBuffers)
    {
      if (!v23)
      {
LABEL_29:
        uint64_t v29 = v22;
        if (*((unsigned char *)this + 264)) {
          *((void *)this + 32) = pthread_self();
        }
        if (*((unsigned char *)this + 248))
        {
          sub_1A6734D98((unint64_t *)this + 28);
          *(_DWORD *)long long buf = *a2 | 4;
          for (unint64_t i = atomic_load((unint64_t *)this + 28); i; unint64_t i = *(void *)i)
            (*(void (**)(void, uint8_t *, const AudioTimeStamp *, uint64_t, uint64_t, AudioBufferList *))(i + 16))(*(void *)(i + 24), buf, a3, a4, a5, a6);
        }
        uint64_t v31 = sub_1A6734FAC(this, (uint64_t)a2, (uint64_t)a3, a4, v29, a5, (uint64_t)a6);
        uint64_t v16 = v31;
        if (v31 && !*((_DWORD *)this + 85))
        {
          *((_DWORD *)this + 85) = v31;
          (*(void (**)(ausdk::AUBase *, uint64_t, void, void))(*(void *)this + 432))(this, 22, 0, 0);
        }
        if (*((unsigned char *)this + 248))
        {
          int v32 = v16 ? 264 : 8;
          *(_DWORD *)long long buf = *a2 | v32;
          for (unint64_t j = atomic_load((unint64_t *)this + 28); j; unint64_t j = *(void *)j)
            (*(void (**)(void, uint8_t *, const AudioTimeStamp *, uint64_t, uint64_t, AudioBufferList *))(j + 16))(*(void *)(j + 24), buf, a3, a4, a5, a6);
        }
        uint64_t v34 = *((void *)this + 48);
        if (v34 != *((void *)this + 49)) {
          *((void *)this + 49) = v34;
        }
        return v16;
      }
      uint64_t v24 = 0;
      int v25 = *(_DWORD *)(v22 + 104);
      UInt32 v26 = v25 * a5;
      p_mDataByteSize = &a6->mBuffers[0].mDataByteSize;
      while (1)
      {
        if (*(void *)(p_mDataByteSize + 1))
        {
          UInt32 v28 = *p_mDataByteSize;
          if (*p_mDataByteSize < v26)
          {
            int v36 = v25;
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = 67110144;
              int v39 = a5;
              __int16 v40 = 1024;
              int v41 = v36;
              __int16 v42 = 1024;
              UInt32 v43 = v26;
              __int16 v44 = 1024;
              int v45 = v24;
              __int16 v46 = 1024;
              UInt32 v47 = v28;
              _os_log_error_impl(&dword_1A66D3000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%u frames, %u bytes/frame, expected %u-byte buffer; ioData.mBuffers[%u].mDataByteSize=%u; kAudio_ParamError",
                buf,
                0x20u);
            }
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
              sub_1A6890780();
            }
            uint64_t v16 = 4294967246;
            if (!*((_DWORD *)this + 85))
            {
              *((_DWORD *)this + 85) = -50;
              (*(void (**)(ausdk::AUBase *, uint64_t, void, void))(*(void *)this + 432))(this, 22, 0, 0);
            }
            return v16;
          }
          UInt32 *p_mDataByteSize = v26;
        }
        ++v24;
        p_mDataByteSize += 4;
        if (v23 == v24) {
          goto LABEL_29;
        }
      }
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      sub_1A68907F8();
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      sub_1A6890780();
    }
    uint64_t v16 = 4294967246;
    if (!*((_DWORD *)this + 85))
    {
LABEL_48:
      *((_DWORD *)this + 85) = -50;
      (*(void (**)(ausdk::AUBase *, uint64_t, void, void))(*(void *)this + 432))(this, 22, 0, 0);
    }
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      sub_1A689060C();
    }
    uint64_t v16 = 4294956429;
    if (!*((_DWORD *)this + 85))
    {
      *((_DWORD *)this + 85) = -10867;
      (*(void (**)(ausdk::AUBase *, uint64_t, void, void))(*(void *)this + 432))(this, 22, 0, 0);
    }
  }
  return v16;
}

void sub_1A6734C54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a2)
  {
    uint64_t v11 = (unsigned int *)__cxa_begin_catch(exception_object);
    if (a2 == 2) {
      sub_1A6734CFC(&a10, *v11);
    }
    else {
      sub_1A6734CFC(&a10, 0xFFFFFFFFLL);
    }
    __cxa_end_catch();
    JUMPOUT(0x1A6734BB4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1A6734CFC(_DWORD **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    sub_1A6890868();
    if (!a2) {
      return a2;
    }
  }
  else if (!a2)
  {
    return a2;
  }
  if (!v3[85])
  {
    v3[85] = a2;
    (*(void (**)(_DWORD *, uint64_t, void, void))(*(void *)v3 + 432))(v3, 22, 0, 0);
  }
  return a2;
}

void sub_1A6734D98(unint64_t *a1)
{
  while (1)
  {
    uint64_t v2 = (void *)atomic_load(a1 + 1);
    if (!v2) {
      break;
    }
    uint64_t v3 = v2;
    atomic_compare_exchange_strong((atomic_ullong *volatile)a1 + 1, (unint64_t *)&v3, 0);
    if (v3 == v2)
    {
      uint64_t v4 = 0;
      do
      {
        uint64_t v5 = v4;
        uint64_t v4 = v2;
        uint64_t v2 = (void *)*v2;
        void *v4 = v5;
      }
      while (v2);
      int v6 = MEMORY[0x1E4F14500];
      do
      {
        unint64_t v7 = (unint64_t)v4;
        uint64_t v4 = (void *)*v4;
        int v8 = *(_DWORD *)(v7 + 8);
        switch(v8)
        {
          case 3:
            uint64_t v13 = (unint64_t *)atomic_load(a1);
            if (v13)
            {
              do
              {
                uint64_t v14 = (unint64_t *)*v13;
                do
                {
                  unint64_t v15 = atomic_load(a1 + 2);
                  *uint64_t v13 = v15;
                  unint64_t v16 = v15;
                  atomic_compare_exchange_strong((atomic_ullong *volatile)a1 + 2, &v16, (unint64_t)v13);
                }
                while (v16 != v15);
                uint64_t v13 = v14;
              }
              while (v14);
            }
            do
            {
              unint64_t v17 = atomic_load(a1 + 2);
              *(void *)unint64_t v7 = v17;
              unint64_t v18 = v17;
              atomic_compare_exchange_strong((atomic_ullong *volatile)a1 + 2, &v18, v7);
            }
            while (v18 != v17);
            if (atomic_load(a1)) {
              atomic_store(0, a1);
            }
            break;
          case 2:
            int v20 = (unint64_t *)atomic_load(a1);
            if (v20)
            {
              long long v21 = 0;
              while (1)
              {
                uint64_t v22 = v20;
                if (v20[2] == *(void *)(v7 + 16) && v20[3] == *(void *)(v7 + 24)) {
                  break;
                }
                int v20 = (unint64_t *)*v20;
                long long v21 = v22;
                if (!*v22) {
                  goto LABEL_36;
                }
              }
              unint64_t v24 = *v20;
              if (v21) {
                *long long v21 = v24;
              }
              else {
                atomic_store(v24, a1);
              }
              do
              {
                unint64_t v25 = atomic_load(a1 + 2);
                *uint64_t v22 = v25;
                unint64_t v26 = v25;
                atomic_compare_exchange_strong((atomic_ullong *volatile)a1 + 2, &v26, (unint64_t)v22);
              }
              while (v26 != v25);
            }
            do
            {
LABEL_36:
              unint64_t v27 = atomic_load(a1 + 2);
              *(void *)unint64_t v7 = v27;
              unint64_t v28 = v27;
              atomic_compare_exchange_strong((atomic_ullong *volatile)a1 + 2, &v28, v7);
            }
            while (v28 != v27);
            break;
          case 1:
            uint64_t v9 = (unint64_t *)atomic_load(a1);
            if (v9)
            {
              while (1)
              {
                uint64_t v10 = v9;
                if (v9[2] == *(void *)(v7 + 16) && v9[3] == *(void *)(v7 + 24)) {
                  break;
                }
                uint64_t v9 = (unint64_t *)*v9;
                if (!*v10)
                {
                  unint64_t *v10 = v7;
                  *(void *)unint64_t v7 = 0;
                  goto LABEL_37;
                }
              }
              do
              {
                unint64_t v11 = atomic_load(a1 + 2);
                *(void *)unint64_t v7 = v11;
                unint64_t v12 = v11;
                atomic_compare_exchange_strong((atomic_ullong *volatile)a1 + 2, &v12, v7);
              }
              while (v12 != v11);
            }
            else
            {
              unint64_t v23 = atomic_load(a1);
              *(void *)unint64_t v7 = v23;
              atomic_store(v7, a1);
            }
            break;
          default:
            if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
              sub_1A68908E0(&v29, v30);
            }
            break;
        }
LABEL_37:
        ;
      }
      while (v4);
      return;
    }
  }
}

uint64_t sub_1A6734FAC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (*(void *)(a7 + 16)
    && (!*(unsigned char *)(a5 + 168)
     || ((uint64_t v14 = a1[21]) == 0
       ? (uint64_t v15 = (a1[19] - a1[18]) >> 3)
       : (LODWORD(v15) = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 24))(v14)),
         v15 < 2)))
  {
    sub_1A672070C(a5 + 144, (unsigned int *)a7);
  }
  else
  {
    sub_1A67384C8(a5, a6);
  }
  uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(*a1 + 200))(a1, a2, a3, a4, a6);
  if (!v16)
  {
    unint64_t v17 = (void *)(a5 + 144);
    if (*(void *)(a7 + 16))
    {
      sub_1A67207C0(v17, (_DWORD *)a7);
      *(_DWORD *)unint64_t v17 = 0;
    }
    else
    {
      sub_1A673850C((uint64_t)v17, (unsigned int *)a7);
    }
  }
  return v16;
}

uint64_t ausdk::AUBase::DoProcess(ausdk::AUBase *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4, AudioBufferList *a5)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if ((*((unsigned char *)a2 + 1) & 2) != 0) {
    goto LABEL_27;
  }
  if (*((unsigned char *)this + 17))
  {
    unsigned int v10 = *((_DWORD *)this + 84);
    if (v10 < a4)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        sub_1A689099C();
      }
      uint64_t v11 = 4294956422;
      if (!*((_DWORD *)this + 85))
      {
        *((_DWORD *)this + 85) = -10874;
        (*(void (**)(ausdk::AUBase *, uint64_t, void, void))(*(void *)this + 432))(this, 22, 0, 0);
      }
      return v11;
    }
    if (v10 != a4 && *((unsigned char *)this + 376) != 0)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        sub_1A6890A14();
      }
      uint64_t v11 = 4294967246;
      if (*((_DWORD *)this + 85)) {
        return v11;
      }
LABEL_36:
      *((_DWORD *)this + 85) = -50;
      (*(void (**)(ausdk::AUBase *, uint64_t, void, void))(*(void *)this + 432))(this, 22, 0, 0);
      return v11;
    }
    uint64_t v13 = sub_1A66F4000((uint64_t)this + 80, 0);
    if ((*(unsigned char *)(v13 + 92) & 0x20) != 0) {
      uint64_t v14 = *(unsigned int *)(v13 + 108);
    }
    else {
      uint64_t v14 = 1;
    }
    if (v14 == a5->mNumberBuffers)
    {
      if (v14)
      {
        uint64_t v15 = 0;
        int v16 = *(_DWORD *)(v13 + 104);
        UInt32 v17 = v16 * a4;
        p_mDataByteSize = &a5->mBuffers[0].mDataByteSize;
        do
        {
          if (*(void *)(p_mDataByteSize + 1))
          {
            UInt32 v19 = *p_mDataByteSize;
            if (*p_mDataByteSize < v17)
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)long long buf = 67110144;
                int v26 = a4;
                __int16 v27 = 1024;
                int v28 = v16;
                __int16 v29 = 1024;
                int v30 = v16 * a4;
                __int16 v31 = 1024;
                int v32 = v15;
                __int16 v33 = 1024;
                UInt32 v34 = v19;
                _os_log_error_impl(&dword_1A66D3000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%u frames, %u bytes/frame, expected %u-byte buffer; ioData.mBuffers[%u].mDataByteSize=%u; kAudio_ParamError",
                  buf,
                  0x20u);
              }
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                sub_1A6890A14();
              }
              uint64_t v11 = 4294967246;
              if (!*((_DWORD *)this + 85))
              {
                *((_DWORD *)this + 85) = -50;
                (*(void (**)(ausdk::AUBase *, uint64_t, void, void))(*(void *)this + 432))(this, 22, 0, 0);
              }
              return v11;
            }
            UInt32 *p_mDataByteSize = v17;
          }
          ++v15;
          p_mDataByteSize += 4;
        }
        while (v14 != v15);
      }
LABEL_27:
      if (*((unsigned char *)this + 264)) {
        *((void *)this + 32) = pthread_self();
      }
      if (a3->mSampleTime == *((double *)this + 34)) {
        return 0;
      }
      long long v20 = *(_OWORD *)&a3->mSampleTime;
      long long v21 = *(_OWORD *)&a3->mRateScalar;
      long long v22 = *(_OWORD *)&a3->mSMPTETime.mHours;
      *((_OWORD *)this + 19) = *(_OWORD *)&a3->mSMPTETime.mSubframes;
      *((_OWORD *)this + 20) = v22;
      *((_OWORD *)this + 17) = v20;
      *((_OWORD *)this + 18) = v21;
      return (*(uint64_t (**)(ausdk::AUBase *, unsigned int *, AudioBufferList *, AudioBufferList *, uint64_t))(*(void *)this + 176))(this, a2, a5, a5, a4);
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      sub_1A6890A8C();
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      sub_1A6890A14();
    }
    uint64_t v11 = 4294967246;
    if (!*((_DWORD *)this + 85)) {
      goto LABEL_36;
    }
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      sub_1A6890924();
    }
    uint64_t v11 = 4294956429;
    if (!*((_DWORD *)this + 85))
    {
      *((_DWORD *)this + 85) = -10867;
      (*(void (**)(ausdk::AUBase *, uint64_t, void, void))(*(void *)this + 432))(this, 22, 0, 0);
    }
  }
  return v11;
}

void sub_1A673551C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a2)
  {
    uint64_t v11 = (unsigned int *)__cxa_begin_catch(exception_object);
    if (a2 == 2) {
      sub_1A67355B4(&a10, *v11);
    }
    else {
      sub_1A67355B4(&a10, 0xFFFFFFFFLL);
    }
    __cxa_end_catch();
    JUMPOUT(0x1A6735304);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1A67355B4(_DWORD **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    sub_1A6890AFC();
    if (!a2) {
      return a2;
    }
  }
  else if (!a2)
  {
    return a2;
  }
  if (!v3[85])
  {
    v3[85] = a2;
    (*(void (**)(_DWORD *, uint64_t, void, void))(*(void *)v3 + 432))(v3, 22, 0, 0);
  }
  return a2;
}

uint64_t ausdk::AUBase::DoProcessMultiple(ausdk::AUBase *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4, uint64_t a5, const AudioBufferList **a6, uint64_t a7, AudioBufferList **a8)
{
  uint64_t v9 = a7;
  unsigned int v10 = a6;
  uint64_t v11 = a5;
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  if ((*((unsigned char *)a2 + 1) & 2) != 0) {
    goto LABEL_59;
  }
  if (!*((unsigned char *)this + 17))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      sub_1A6890B74();
    }
    uint64_t v17 = 4294956429;
    if (!*((_DWORD *)this + 85))
    {
      *((_DWORD *)this + 85) = -10867;
      (*(void (**)(ausdk::AUBase *, uint64_t, void, void))(*(void *)this + 432))(this, 22, 0, 0);
    }
    return v17;
  }
  unsigned int v16 = *((_DWORD *)this + 84);
  if (v16 < a4)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      sub_1A6890BEC();
    }
    uint64_t v17 = 4294956422;
    if (!*((_DWORD *)this + 85))
    {
      *((_DWORD *)this + 85) = -10874;
      (*(void (**)(ausdk::AUBase *, uint64_t, void, void))(*(void *)this + 432))(this, 22, 0, 0);
    }
    return v17;
  }
  if (v16 != a4 && *((unsigned char *)this + 376) != 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      sub_1A6890C64();
    }
    uint64_t v17 = 4294967246;
    if (*((_DWORD *)this + 85)) {
      return v17;
    }
    goto LABEL_34;
  }
  unsigned int v47 = a7;
  unsigned int v48 = a5;
  if (a5)
  {
    uint64_t v19 = 0;
    BOOL v20 = 1;
    int v45 = (char *)this + 80;
    while (1)
    {
      BOOL v46 = v20;
      if (v10[v19])
      {
        uint64_t v21 = sub_1A66F4000((uint64_t)v45, v19);
        if ((*(unsigned char *)(v21 + 92) & 0x20) != 0) {
          uint64_t v22 = *(unsigned int *)(v21 + 108);
        }
        else {
          uint64_t v22 = 1;
        }
        unint64_t v23 = a6[v19];
        if (v22 != v23->mNumberBuffers)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            sub_1A6890D58();
          }
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            sub_1A6890C64();
          }
          uint64_t v17 = 4294967246;
          if (*((_DWORD *)this + 85)) {
            return v17;
          }
LABEL_34:
          *((_DWORD *)this + 85) = -50;
          (*(void (**)(ausdk::AUBase *, uint64_t, void, void))(*(void *)this + 432))(this, 22, 0, 0);
          return v17;
        }
        if (v22) {
          break;
        }
      }
LABEL_29:
      BOOL v20 = ++v19 < (unint64_t)v48;
      unsigned int v10 = a6;
      if (v19 == v48) {
        goto LABEL_45;
      }
    }
    uint64_t v24 = 0;
    unsigned int v25 = *(_DWORD *)(v21 + 104) * a4;
    p_mData = &v23->mBuffers[0].mData;
    while (*p_mData)
    {
      unsigned int v27 = *((_DWORD *)p_mData - 1);
      if (v27 < v25)
      {
        int v30 = *(_DWORD *)(v21 + 104);
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 67110400;
          int v51 = a4;
          __int16 v52 = 1024;
          int v53 = v30;
          __int16 v54 = 1024;
          UInt32 v55 = v25;
          __int16 v56 = 1024;
          int v57 = v19;
          __int16 v58 = 1024;
          int v59 = v24;
          __int16 v60 = 1024;
          UInt32 v61 = v27;
          _os_log_error_impl(&dword_1A66D3000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%u frames, %u bytes/frame, expected %u-byte buffer; inInputBufferLists[%u].mBuffers[%u].mDataByteSize=%u; kAudio_ParamError",
            buf,
            0x26u);
        }
        unsigned int v10 = a6;
        BOOL v29 = v46;
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          sub_1A6890C64();
        }
        goto LABEL_41;
      }
      ++v24;
      p_mData += 2;
      if (v22 == v24) {
        goto LABEL_29;
      }
    }
    unsigned int v10 = a6;
    BOOL v29 = v46;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      sub_1A6890C64();
    }
LABEL_41:
    if (!*((_DWORD *)this + 85))
    {
      *((_DWORD *)this + 85) = -50;
      (*(void (**)(ausdk::AUBase *, uint64_t, void, void))(*(void *)this + 432))(this, 22, 0, 0);
    }
    if (v29) {
      return 4294967246;
    }
  }
LABEL_45:
  uint64_t v9 = v47;
  uint64_t v11 = v48;
  if (!v47)
  {
LABEL_59:
    if (*((unsigned char *)this + 264)) {
      *((void *)this + 32) = pthread_self();
    }
    if (a3->mSampleTime == *((double *)this + 34)) {
      return 0;
    }
    long long v40 = *(_OWORD *)&a3->mSampleTime;
    long long v41 = *(_OWORD *)&a3->mRateScalar;
    long long v42 = *(_OWORD *)&a3->mSMPTETime.mHours;
    *((_OWORD *)this + 19) = *(_OWORD *)&a3->mSMPTETime.mSubframes;
    *((_OWORD *)this + 20) = v42;
    *((_OWORD *)this + 17) = v40;
    *((_OWORD *)this + 18) = v41;
    return (*(uint64_t (**)(ausdk::AUBase *, unsigned int *, uint64_t, uint64_t, const AudioBufferList **, uint64_t, AudioBufferList **))(*(void *)this + 184))(this, a2, a4, v11, v10, v9, a8);
  }
  uint64_t v31 = 0;
  while (!a8[v31])
  {
LABEL_58:
    ++v31;
    uint64_t v9 = v47;
    uint64_t v11 = v48;
    unsigned int v10 = a6;
    if (v31 == v47) {
      goto LABEL_59;
    }
  }
  uint64_t v32 = sub_1A66F4000((uint64_t)this + 128, v31);
  if ((*(unsigned char *)(v32 + 92) & 0x20) != 0) {
    uint64_t v33 = *(unsigned int *)(v32 + 108);
  }
  else {
    uint64_t v33 = 1;
  }
  UInt32 v34 = a8[v31];
  if (v33 == v34->mNumberBuffers)
  {
    if (v33)
    {
      uint64_t v35 = 0;
      int v36 = *(_DWORD *)(v32 + 104);
      UInt32 v37 = v36 * a4;
      p_mDataByteSize = &v34->mBuffers[0].mDataByteSize;
      while (1)
      {
        if (*(void *)(p_mDataByteSize + 1))
        {
          UInt32 v39 = *p_mDataByteSize;
          if (*p_mDataByteSize < v37)
          {
            int v44 = v36;
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = 67110400;
              int v51 = a4;
              __int16 v52 = 1024;
              int v53 = v44;
              __int16 v54 = 1024;
              UInt32 v55 = v37;
              __int16 v56 = 1024;
              int v57 = v31;
              __int16 v58 = 1024;
              int v59 = v35;
              __int16 v60 = 1024;
              UInt32 v61 = v39;
              _os_log_error_impl(&dword_1A66D3000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%u frames, %u bytes/frame, expected %u-byte buffer; ioOutputBufferLists[%u]->mBuffers[%u].mDataByteSize="
                "%u; kAudio_ParamError",
                buf,
                0x26u);
            }
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
              sub_1A6890C64();
            }
            uint64_t v17 = 4294967246;
            if (!*((_DWORD *)this + 85)) {
              goto LABEL_70;
            }
            return v17;
          }
          UInt32 *p_mDataByteSize = v37;
        }
        ++v35;
        p_mDataByteSize += 4;
        if (v33 == v35) {
          goto LABEL_58;
        }
      }
    }
    goto LABEL_58;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
    sub_1A6890CDC();
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
    sub_1A6890C64();
  }
  uint64_t v17 = 4294967246;
  if (!*((_DWORD *)this + 85))
  {
LABEL_70:
    *((_DWORD *)this + 85) = -50;
    (*(void (**)(ausdk::AUBase *, uint64_t, void, void))(*(void *)this + 432))(this, 22, 0, 0);
  }
  return v17;
}

void sub_1A6735D58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _DWORD *a14)
{
  if (a2)
  {
    uint64_t v15 = (unsigned int *)__cxa_begin_catch(exception_object);
    if (a2 == 2) {
      sub_1A6735E00(&a14, *v15);
    }
    else {
      sub_1A6735E00(&a14, 0xFFFFFFFFLL);
    }
    __cxa_end_catch();
    JUMPOUT(0x1A6735AA4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1A6735E00(_DWORD **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    sub_1A6890DD4();
    if (!a2) {
      return a2;
    }
  }
  else if (!a2)
  {
    return a2;
  }
  if (!v3[85])
  {
    v3[85] = a2;
    (*(void (**)(_DWORD *, uint64_t, void, void))(*(void *)v3 + 432))(v3, 22, 0, 0);
  }
  return a2;
}

uint64_t ausdk::AUBase::SetInputCallback(ausdk::AUBase *this, uint64_t a2, uint64_t a3, int (*a4)(void *, unsigned int *, const AudioTimeStamp *, unsigned int, unsigned int, AudioBufferList *), void *a5)
{
  unsigned int v10 = (ausdk::AUInputElement *)sub_1A66F4000((uint64_t)this + 80, a3);
  ausdk::AUInputElement::SetInputCallback(v10, a4, a5);
  (*(void (**)(ausdk::AUBase *, uint64_t, uint64_t, uint64_t))(*(void *)this + 432))(this, a2, 1, a3);
  return 0;
}

uint64_t ausdk::AUBase::SetConnection(const void **this, const AudioUnitConnection *a2)
{
  uint64_t v4 = (ausdk::AUInputElement *)sub_1A66F4000((uint64_t)(this + 10), a2->destInputNumber);
  sourceAudioUnit = a2->sourceAudioUnit;
  if (!a2->sourceAudioUnit
    || (UInt32 ioDataSize = 40,
        uint64_t result = AudioUnitGetProperty(sourceAudioUnit, 8u, 2u, a2->sourceOutputNumber, outData, &ioDataSize),
        !result)
    && (uint64_t result = ausdk::AUBase::DispatchSetProperty(this, 8, 1, a2->destInputNumber, outData, 40), !result))
  {
    ausdk::AUInputElement::SetConnection(v4, a2);
    (*((void (**)(const void **, uint64_t, uint64_t, void))*this + 54))(this, 1, 1, a2->destInputNumber);
    return 0;
  }
  return result;
}

uint64_t ausdk::AUBase::SupportedNumChannels(ausdk::AUBase *this, const AUChannelInfo **a2)
{
  return 0;
}

BOOL ausdk::AUBase::ValidFormat(ausdk::AUBase *this, unsigned int a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  BOOL result = sub_1A673606C(a4);
  if (result) {
    return (a4->mFormatFlags & 0x20) != 0 || a4->mChannelsPerFrame == 1;
  }
  return result;
}

BOOL sub_1A673606C(_DWORD *a1)
{
  if (a1[2] != 1819304813 || a1[5] != 1) {
    return 0;
  }
  uint64_t v2 = a1[4];
  if (v2 != a1[6]) {
    return 0;
  }
  int v3 = a1[3];
  if ((v3 & 1) == 0 || (v3 & 0x20) == 0 && a1[7] != 1) {
    return 0;
  }
  uint64_t v4 = 0;
  if ((v3 & 2) == 0 && a1[8] == 32)
  {
    if ((v3 & 0x20) != 0) {
      unsigned int v6 = 1;
    }
    else {
      unsigned int v6 = a1[7];
    }
    return v2 == 4 * v6;
  }
  return v4;
}

__n128 ausdk::AUBase::GetStreamFormat@<Q0>(ausdk::AUBase *this@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  if (a2)
  {
    if (a2 == 2)
    {
      uint64_t v5 = (char *)this + 128;
    }
    else
    {
      if (a2 != 1) {
        sub_1A67361F8(-10866);
      }
      uint64_t v5 = (char *)this + 80;
    }
    a2 = a3;
  }
  else
  {
    uint64_t v5 = (char *)this + 128;
  }
  uint64_t v6 = sub_1A673614C((uint64_t)v5, a2);
  __n128 result = *(__n128 *)(v6 + 80);
  long long v8 = *(_OWORD *)(v6 + 96);
  *(__n128 *)a4 = result;
  *(_OWORD *)(a4 + 16) = v8;
  *(void *)(a4 + 32) = *(void *)(v6 + 112);
  return result;
}

uint64_t sub_1A673614C(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = sub_1A66F3F00(a1, a2);
  if (!v2 || (uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 48))(v2)) == 0)
  {
    BOOL v4 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    if (v4) {
      sub_1A6890E4C(v4, v5, v6, v7, v8, v9, v10, v11);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    sub_1A66E7DE8((uint64_t)exception, -10877);
    __cxa_throw(exception, (struct type_info *)&unk_1EFB7D058, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  return result;
}

void sub_1A67361E4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1A67361F8(int a1)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    v3[0] = 67109120;
    v3[1] = a1;
    _os_log_error_impl(&dword_1A66D3000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "throwing %d", (uint8_t *)v3, 8u);
  }
  exception = __cxa_allocate_exception(0x18uLL);
  sub_1A66E7DE8((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_1EFB7D058, (void (*)(void *))std::runtime_error::~runtime_error);
}

void sub_1A67362A4(_Unwind_Exception *exception_object)
{
}

uint64_t ausdk::AUBase::SetBusCount(ausdk::AUBase *this, unsigned int a2, unsigned int a3)
{
  if (*((unsigned char *)this + 17)) {
    return 4294956447;
  }
  uint64_t v5 = (ausdk::AUScope *)sub_1A6733078((uint64_t)this, a2);
  ausdk::AUScope::SetNumberOfElements(v5, a3);
  return 0;
}

uint64_t ausdk::AUBase::ChangeStreamFormat(ausdk::AUBase *this, uint64_t a2, uint64_t a3, const AudioStreamBasicDescription *__s2, const AudioStreamBasicDescription *__s1)
{
  if (memcmp(__s1, __s2, 0x28uLL))
  {
    if (a2)
    {
      if (a2 == 2)
      {
        uint64_t v9 = (char *)this + 128;
      }
      else
      {
        if (a2 != 1) {
          sub_1A67361F8(-10866);
        }
        uint64_t v9 = (char *)this + 80;
      }
      unsigned int v10 = a3;
    }
    else
    {
      uint64_t v9 = (char *)this + 128;
      unsigned int v10 = 0;
    }
    uint64_t v11 = sub_1A673614C((uint64_t)v9, v10);
    (*(void (**)(uint64_t, const AudioStreamBasicDescription *))(*(void *)v11 + 56))(v11, __s1);
    (*(void (**)(ausdk::AUBase *, uint64_t, uint64_t, uint64_t))(*(void *)this + 432))(this, 8, a2, a3);
  }
  return 0;
}

uint64_t ausdk::AUBase::GetChannelLayoutTags(ausdk::AUBase *this, unsigned int a2, unsigned int a3)
{
  uint64_t v4 = sub_1A6733078((uint64_t)this, a2);
  uint64_t v5 = *(uint64_t (**)(void))(*(void *)sub_1A673614C(v4, a3) + 80);

  return v5();
}

uint64_t ausdk::AUBase::GetAudioChannelLayout(ausdk::AUBase *this, unsigned int a2, unsigned int a3, AudioChannelLayout *a4, BOOL *a5)
{
  uint64_t v6 = sub_1A6733078((uint64_t)this, a2);
  uint64_t v7 = *(uint64_t (**)(void))(*(void *)sub_1A673614C(v6, a3) + 96);

  return v7();
}

uint64_t ausdk::AUBase::RemoveAudioChannelLayout(ausdk::AUBase *this, unsigned int a2, unsigned int a3)
{
  uint64_t v4 = sub_1A6733078((uint64_t)this, a2);
  uint64_t v5 = sub_1A673614C(v4, a3);
  char v7 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, void, char *))(*(void *)v5 + 96))(v5, 0, &v7);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 104))(v5);
  }
  return result;
}

uint64_t ausdk::AUBase::SetAudioChannelLayout(ausdk::AUBase *this, uint64_t a2, uint64_t a3, AudioChannelLayout *a4)
{
  uint64_t v8 = sub_1A6733078((uint64_t)this, a2);
  uint64_t v9 = (_DWORD *)sub_1A673614C(v8, a3);
  int v10 = v9[27];
  if (v10 != sub_1A67366C0(a4)) {
    return 4294956445;
  }
  (*(void (**)(_DWORD **__return_ptr, ausdk::AUBase *, uint64_t, uint64_t))(*(void *)this + 552))(&v16, this, a2, a3);
  uint64_t v11 = v16;
  if (v16 == v17)
  {
    uint64_t v14 = 4294956417;
  }
  else
  {
    unint64_t v12 = v16;
    while (*v12 && *v12 != a4->mChannelLayoutTag)
    {
      if (++v12 == v17) {
        goto LABEL_14;
      }
    }
    if (v12 != v17)
    {
      uint64_t v14 = (*(uint64_t (**)(_DWORD *, AudioChannelLayout *))(*(void *)v9 + 88))(v9, a4);
      uint64_t v11 = v16;
      goto LABEL_15;
    }
LABEL_14:
    uint64_t v14 = 4294956445;
  }
LABEL_15:
  if (v11)
  {
    uint64_t v17 = v11;
    operator delete(v11);
  }
  return v14;
}

void sub_1A67366A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1A67366C0(_DWORD *a1)
{
  if (*a1 == 0x10000)
  {
    int8x8_t v2 = (int8x8_t)a1[1];
    char v3 = 1;
    return sub_1A67385BC(&v2, 0, (uint64_t)&v2, 0x20u, &v3);
  }
  else if (*a1)
  {
    return (unsigned __int16)*a1;
  }
  else
  {
    return a1[2];
  }
}

uint64_t ausdk::AUBase::SaveState(ausdk::AUBase *this, CFMutableDictionaryRef *a2)
{
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  int v18 = 0;
  ausdk::ComponentBase::GetComponentDescription((AudioComponentInstance *)this, (uint64_t)&v16);
  CFMutableDictionaryRef theDict = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  sub_1A67369C0(theDict, @"version", 0);
  sub_1A67369C0(theDict, @"type", v16);
  sub_1A67369C0(theDict, @"subtype", SHIDWORD(v16));
  int v14 = v17;
  sub_1A67369C0(theDict, @"manufacturer", v17);
  unsigned int v4 = 0;
  id value = CFDataCreateMutable(0, 0);
  do
  {
    uint64_t v5 = (ausdk::AUScope *)sub_1A6733078((uint64_t)this, v4);
    ausdk::AUScope::SaveState(v5, (__CFData *)value);
    ++v4;
  }
  while (v4 != 3);
  (*(void (**)(ausdk::AUBase *, void *))(*(void *)this + 280))(this, value);
  CFDictionarySetValue(theDict, @"data", value);
  sub_1A6736A24((const void **)&value, 0);
  CFDictionarySetValue(theDict, @"name", *((const void **)this + 46));
  if (!(*(unsigned int (**)(ausdk::AUBase *, uint64_t, void, void, int *))(*(void *)this + 88))(this, 26, 0, 0, &v14))sub_1A67369C0(theDict, @"render-quality", v14); {
  unsigned int v6 = 0;
  }
  while (1)
  {
    char v7 = (ausdk::AUScope *)sub_1A6733078((uint64_t)this, v6);
    if (ausdk::AUScope::HasElementWithName(v7)) {
      break;
    }
    if (++v6 == 4) {
      goto LABEL_12;
    }
  }
  unsigned int v8 = 0;
  CFDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  do
  {
    uint64_t v9 = (ausdk::AUScope *)sub_1A6733078((uint64_t)this, v8);
    ausdk::AUScope::AddElementNamesToDict(v9, Mutable);
    ++v8;
  }
  while (v8 != 4);
  CFDictionarySetValue(theDict, @"element-name", Mutable);
  sub_1A6738870((const void **)&Mutable);
LABEL_12:
  CFMutableDictionaryRef v10 = theDict;
  CFMutableDictionaryRef theDict = 0;
  *a2 = v10;
  sub_1A67388B8((const void **)&value);
  sub_1A6738870((const void **)&theDict);
  return 0;
}

void sub_1A6736974(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  char v3 = va_arg(va1, const void *);
  va_copy(va2, va1);
  uint64_t v5 = va_arg(va2, const void *);
  uint64_t v7 = va_arg(va2, void);
  sub_1A6738870((const void **)va);
  sub_1A67388B8((const void **)va1);
  sub_1A6738870((const void **)va2);
  _Unwind_Resume(a1);
}

void sub_1A67369C0(__CFDictionary *a1, const void *a2, int a3)
{
  int valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFDictionarySetValue(a1, a2, v5);
  CFRelease(v5);
}

const void **sub_1A6736A24(const void **a1, const void *a2)
{
  if (*a1 != a2)
  {
    sub_1A67388B8(a1);
    *a1 = a2;
    sub_1A6738894(a1);
  }
  return a1;
}

uint64_t ausdk::AUBase::RestoreState(AudioComponentInstance *this, CFTypeRef cf)
{
  CFTypeID v4 = CFGetTypeID(cf);
  if (v4 != CFDictionaryGetTypeID()) {
    return 4294956445;
  }
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  int v43 = 0;
  ausdk::ComponentBase::GetComponentDescription(this, (uint64_t)&v41);
  if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"part")) {
    return 4294956445;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, @"version");
  if (!Value) {
    return 4294956445;
  }
  CFNumberRef v7 = Value;
  CFTypeID v8 = CFGetTypeID(Value);
  if (v8 != CFNumberGetTypeID()) {
    return 4294956445;
  }
  int valuePtr = 0;
  CFNumberGetValue(v7, kCFNumberSInt32Type, &valuePtr);
  if (valuePtr) {
    return 4294956445;
  }
  CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, @"subtype");
  if (!v9) {
    return 4294956445;
  }
  CFNumberRef v10 = v9;
  CFTypeID v11 = CFGetTypeID(v9);
  if (v11 != CFNumberGetTypeID()) {
    return 4294956445;
  }
  CFNumberGetValue(v10, kCFNumberSInt32Type, &valuePtr);
  if (valuePtr != HIDWORD(v41)) {
    return 4294956445;
  }
  CFNumberRef v12 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, @"manufacturer");
  if (!v12) {
    return 4294956445;
  }
  CFNumberRef v13 = v12;
  CFTypeID v14 = CFGetTypeID(v12);
  if (v14 != CFNumberGetTypeID()) {
    return 4294956445;
  }
  CFNumberGetValue(v13, kCFNumberSInt32Type, &valuePtr);
  if (valuePtr != v42) {
    return 4294956445;
  }
  CFDataRef v15 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)cf, @"data");
  if (v15)
  {
    CFDataRef v16 = v15;
    CFTypeID v17 = CFGetTypeID(v15);
    if (v17 == CFDataGetTypeID())
    {
      BytePtr = CFDataGetBytePtr(v16);
      CFIndex Length = CFDataGetLength(v16);
      if (Length >= 1)
      {
        BOOL v20 = (char *)&BytePtr[Length];
        do
        {
          uint64_t v21 = (ausdk::AUScope *)sub_1A6733078((uint64_t)this, bswap32(*(_DWORD *)BytePtr));
          BytePtr = (const unsigned __int8 *)ausdk::AUScope::RestoreState(v21, BytePtr + 4);
        }
        while (BytePtr < (const unsigned __int8 *)v20);
      }
    }
  }
  uint64_t v22 = (__CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, @"name");
  AudioComponentInstance v23 = this[46];
  if (v23) {
    CFRelease(v23);
  }
  if (!v22 || (CFTypeID v24 = CFGetTypeID(v22), v24 != CFStringGetTypeID())) {
    uint64_t v22 = @"Untitled";
  }
  this[46] = (AudioComponentInstance)v22;
  *((_DWORD *)this + 90) = -1;
  CFRetain(v22);
  (*((void (**)(AudioComponentInstance *, uint64_t, void, void))*this + 54))(this, 36, 0, 0);
  CFNumberRef v25 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, @"render-quality");
  if (v25)
  {
    CFNumberRef v26 = v25;
    CFTypeID v27 = CFGetTypeID(v25);
    if (v27 == CFNumberGetTypeID())
    {
      CFNumberGetValue(v26, kCFNumberSInt32Type, &valuePtr);
      ausdk::AUBase::DispatchSetProperty((const void **)this, 26, 0, 0, (const void **)&valuePtr, 4);
    }
  }
  uint64_t result = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)cf, @"element-name");
  if (result)
  {
    CFDictionaryRef v28 = (const __CFDictionary *)result;
    CFTypeID v29 = CFGetTypeID((CFTypeRef)result);
    if (v29 == CFDictionaryGetTypeID())
    {
      uint64_t v30 = 0;
      do
      {
        CFStringRef v31 = CFStringCreateWithFormat(0, 0, @"%u", v30);
        CFDictionaryRef v32 = (const __CFDictionary *)CFDictionaryGetValue(v28, v31);
        if (v32)
        {
          CFDictionaryRef v33 = v32;
          CFTypeID v34 = CFGetTypeID(v32);
          if (v34 == CFDictionaryGetTypeID())
          {
            uint64_t v35 = (ausdk::AUScope *)sub_1A6733078((uint64_t)this, v30);
            ausdk::AUScope::RestoreElementNames(v35, v33, &v38);
            int v36 = v38;
            UInt32 v37 = v39;
            if (v38 != v39)
            {
              do
              {
                (*((void (**)(AudioComponentInstance *, uint64_t, uint64_t, void))*this + 54))(this, 30, v30, *(unsigned int *)v36);
                v36 += 4;
              }
              while (v36 != v37);
              int v36 = v38;
            }
            if (v36)
            {
              UInt32 v39 = v36;
              operator delete(v36);
            }
          }
        }
        CFRelease(v31);
        uint64_t result = 0;
        uint64_t v30 = (v30 + 1);
      }
      while (v30 != 4);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_1A6736E4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ausdk::AUBase::GetPresets(ausdk::AUBase *this, const __CFArray **a2)
{
  return 4294956417;
}

uint64_t ausdk::AUBase::NewFactoryPresetSet(ausdk::AUBase *this, const AUPreset *a2)
{
  return 4294956417;
}

uint64_t ausdk::AUBase::NewCustomPresetSet(CFTypeRef *this, const AUPreset *a2)
{
  CFTypeID v4 = (AUPreset *)(this + 45);
  CFRelease(this[46]);
  AUPreset *v4 = *a2;
  CFRetain(this[46]);
  return 0;
}

uint64_t ausdk::AUBase::SetAFactoryPresetAsCurrent(CFTypeRef *this, const AUPreset *a2)
{
  BOOL v2 = a2->presetNumber < 0 || a2->presetName == 0;
  uint64_t v3 = !v2;
  if (!v2)
  {
    unsigned int v6 = (AUPreset *)(this + 45);
    CFRelease(this[46]);
    *unsigned int v6 = *a2;
    CFRetain(this[46]);
  }
  return v3;
}

BOOL ausdk::AUBase::HasIcon(ausdk::AUBase *this)
{
  uint64_t v1 = (const void *)(*(uint64_t (**)(ausdk::AUBase *))(*(void *)this + 336))(this);
  BOOL v2 = v1;
  if (v1) {
    CFRelease(v1);
  }
  return v2 != 0;
}

uint64_t ausdk::AUBase::CopyIconLocation(ausdk::AUBase *this)
{
  return 0;
}

uint64_t ausdk::AUBase::GetParameterList(ausdk::AUBase *this, unsigned int a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int v6 = (void *)sub_1A6733078((uint64_t)this, a2);
  uint64_t v7 = v6[5];
  if (v7)
  {
    LODWORD(v8) = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 24))(v7);
    if (v8) {
      goto LABEL_3;
    }
LABEL_11:
    unsigned int v10 = 0;
    goto LABEL_12;
  }
  uint64_t v8 = (v6[3] - v6[2]) >> 3;
  if (!v8) {
    goto LABEL_11;
  }
LABEL_3:
  unsigned int v9 = 0;
  unsigned int v10 = 0;
  uint64_t v11 = 0;
  do
  {
    uint64_t v12 = sub_1A66F3F00((uint64_t)v6, v9);
    unsigned int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    if (v13 > v10)
    {
      uint64_t v11 = v12;
      unsigned int v10 = v13;
    }
    ++v9;
  }
  while (v8 != v9);
  if (a3 && v11) {
    (*(void (**)(uint64_t, unsigned int *))(*(void *)v11 + 24))(v11, a3);
  }
LABEL_12:
  *a4 = v10;
  return 0;
}

uint64_t ausdk::AUBase::GetParameterInfo(ausdk::AUBase *this, unsigned int a2, unsigned int a3, AudioUnitParameterInfo *a4)
{
  return 4294956418;
}

uint64_t ausdk::AUBase::GetParameterValueStrings(ausdk::AUBase *this, unsigned int a2, unsigned int a3, const __CFArray **a4)
{
  return 4294956417;
}

uint64_t ausdk::AUBase::GetParameterHistoryInfo(ausdk::AUBase *this, unsigned int a2, unsigned int a3, float *a4, float *a5)
{
  return 4294956417;
}

uint64_t ausdk::AUBase::CopyClumpName(ausdk::AUBase *this, unsigned int a2, unsigned int a3, unsigned int a4, const __CFString **a5)
{
  return 4294956417;
}

void **ausdk::AUBase::SetNumberOfElements(ausdk::AUBase *this, unsigned int a2, unsigned int a3)
{
  if (!a2 && a3 != 1) {
    sub_1A67361F8(-10866);
  }
  CFTypeID v4 = (ausdk::AUScope *)sub_1A6733078((uint64_t)this, a2);

  return ausdk::AUScope::SetNumberOfElements(v4, a3);
}

void ausdk::AUBase::CreateElement(ausdk::AUBase *this, int a2)
{
  switch(a2)
  {
    case 0:
    case 3:
    case 4:
      operator new();
    case 1:
      operator new();
    case 2:
      operator new();
    default:
      sub_1A67361F8(-10866);
  }
}

void sub_1A673724C(_Unwind_Exception *a1)
{
  MEMORY[0x1AD0C0C70](v1, 0x10E1C409BA96DF7);
  _Unwind_Resume(a1);
}

uint64_t ausdk::AUBase::GetLoggingString(ausdk::AUBase *this)
{
  uint64_t result = (uint64_t)this + 440;
  if (*((char *)this + 463) < 0) {
    return *(void *)result;
  }
  return result;
}

void sub_1A67372B4(void ***a1)
{
  BOOL v2 = *a1;
  if (*v2)
  {
    sub_1A6737308(v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *sub_1A6737308(void *result)
{
  uint64_t v1 = result;
  BOOL v2 = (void *)*result;
  uint64_t v3 = (void *)result[1];
  while (v3 != v2)
  {
    CFTypeID v4 = (void *)*--v3;
    uint64_t result = v4;
    void *v3 = 0;
    if (v4) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

void *sub_1A6737374(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1A66F4908(a1, a2);
    CFTypeID v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_1A67373D0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef sub_1A67373EC(CFTypeRef *a1)
{
  CFTypeRef result = *a1;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void *sub_1A6737410(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1A6737488(a1, a2);
    CFTypeID v4 = (char *)a1[1];
    bzero(v4, 32 * a2);
    a1[1] = &v4[32 * a2];
  }
  return a1;
}

void sub_1A673746C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1A6737488(void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    sub_1A66E9D7C();
  }
  CFTypeRef result = (char *)sub_1A66F3EC8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void sub_1A67374CC(long long *a1, long long *a2, uint64_t (**a3)(long long *, long long *), uint64_t a4, char a5, __n128 a6)
{
LABEL_1:
  uint64_t v12 = a2 - 2;
  unsigned int v13 = a1;
LABEL_2:
  uint64_t v14 = 1 - a4;
  while (1)
  {
    a1 = v13;
    uint64_t v15 = v14;
    uint64_t v16 = (char *)a2 - (char *)v13;
    unint64_t v17 = ((char *)a2 - (char *)v13) >> 5;
    if (!(!v7 & v6))
    {
      switch(v17)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if ((*a3)(a2 - 2, v13))
          {
            long long v26 = *v13;
            long long v28 = v13[1];
            long long v24 = *(a2 - 1);
            *unsigned int v13 = *v12;
            v13[1] = v24;
            long long *v12 = v26;
            *(a2 - 1) = v28;
          }
          break;
        case 3uLL:
          sub_1A6737A30(v13, v13 + 2, a2 - 2, a3);
          break;
        case 4uLL:
          sub_1A6737F70((uint64_t)v13, v13 + 2, v13 + 4, a2 - 2, a3);
          break;
        case 5uLL:
          sub_1A673802C((uint64_t)v13, v13 + 2, v13 + 4, v13 + 6, a2 - 2, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v16 <= 767) {
      break;
    }
    if (v15 == 1)
    {
      if (v13 != a2)
      {
        sub_1A6738110(v13, a2, a2, (unsigned int (**)(long long *, long long *))a3, a6);
      }
      return;
    }
    unint64_t v18 = v17 >> 1;
    uint64_t v19 = &v13[2 * (v17 >> 1)];
    if ((unint64_t)v16 > 0x1000)
    {
      sub_1A6737A30(v13, &v13[2 * (v17 >> 1)], a2 - 2, a3);
      sub_1A6737A30(v13 + 2, v19 - 2, a2 - 4, a3);
      sub_1A6737A30(v13 + 4, &v13[2 * v18 + 2], a2 - 6, a3);
      sub_1A6737A30(v19 - 2, v19, &v13[2 * v18 + 2], a3);
      long long v25 = *v13;
      long long v27 = v13[1];
      long long v20 = v19[1];
      *unsigned int v13 = *v19;
      v13[1] = v20;
      *uint64_t v19 = v25;
      v19[1] = v27;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_1A6737A30(&v13[2 * (v17 >> 1)], v13, a2 - 2, a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (((*a3)(v13 - 2, v13) & 1) == 0)
    {
      unsigned int v13 = sub_1A6737B30(v13, a2, a3);
      goto LABEL_18;
    }
LABEL_13:
    uint64_t v21 = sub_1A6737C60(v13, a2, a3);
    if ((v22 & 1) == 0) {
      goto LABEL_16;
    }
    BOOL v23 = sub_1A6737D94(v13, v21, a3);
    unsigned int v13 = v21 + 2;
    if (sub_1A6737D94(v21 + 2, a2, a3))
    {
      a4 = -v15;
      a2 = v21;
      if (v23) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v14 = v15 + 1;
    if (!v23)
    {
LABEL_16:
      sub_1A67374CC(a1, v21, a3, -v15, a5 & 1);
      unsigned int v13 = v21 + 2;
LABEL_18:
      a5 = 0;
      a4 = -v15;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_1A67378A4((uint64_t)v13, a2, (uint64_t (**)(_OWORD *, void))a3);
  }
  else
  {
    sub_1A6737978((uint64_t)v13, a2, a3);
  }
}

uint64_t sub_1A67378A4(uint64_t result, _OWORD *a2, uint64_t (**a3)(_OWORD *, void))
{
  if ((_OWORD *)result != a2)
  {
    uint64_t v20 = v3;
    uint64_t v21 = v4;
    char v6 = (_OWORD *)result;
    char v7 = (_OWORD *)(result + 32);
    if ((_OWORD *)(result + 32) != a2)
    {
      uint64_t v9 = 0;
      unsigned int v10 = (_OWORD *)result;
      do
      {
        uint64_t v11 = v10;
        unsigned int v10 = v7;
        CFTypeRef result = (*a3)(v7, v11);
        if (result)
        {
          long long v12 = v10[1];
          long long v18 = *v10;
          long long v19 = v12;
          uint64_t v13 = v9;
          while (1)
          {
            uint64_t v14 = (char *)v6 + v13;
            long long v15 = *(_OWORD *)((char *)v6 + v13 + 16);
            *((_OWORD *)v14 + 2) = *(_OWORD *)((char *)v6 + v13);
            *((_OWORD *)v14 + 3) = v15;
            if (!v13) {
              break;
            }
            v13 -= 32;
            CFTypeRef result = (*a3)(&v18, (char *)v6 + v13);
            if ((result & 1) == 0)
            {
              uint64_t v16 = (_OWORD *)((char *)v6 + v13 + 32);
              goto LABEL_10;
            }
          }
          uint64_t v16 = v6;
LABEL_10:
          long long v17 = v19;
          _OWORD *v16 = v18;
          v16[1] = v17;
        }
        char v7 = v10 + 2;
        v9 += 32;
      }
      while (v10 + 2 != a2);
    }
  }
  return result;
}

uint64_t sub_1A6737978(uint64_t result, _OWORD *a2, uint64_t (**a3)(long long *, _OWORD *))
{
  if ((_OWORD *)result != a2)
  {
    uint64_t v17 = v3;
    uint64_t v18 = v4;
    char v6 = (_OWORD *)result;
    char v7 = (_OWORD *)(result + 32);
    if ((_OWORD *)(result + 32) != a2)
    {
      uint64_t v9 = (_OWORD *)(result - 32);
      do
      {
        unsigned int v10 = v6;
        char v6 = v7;
        CFTypeRef result = (*a3)(v7, v10);
        if (result)
        {
          long long v11 = v6[1];
          long long v15 = *v6;
          long long v16 = v11;
          long long v12 = v9;
          do
          {
            long long v13 = v12[3];
            void v12[4] = v12[2];
            v12[5] = v13;
            CFTypeRef result = (*a3)(&v15, v12);
            v12 -= 2;
          }
          while ((result & 1) != 0);
          long long v14 = v16;
          void v12[4] = v15;
          v12[5] = v14;
        }
        char v7 = v6 + 2;
        v9 += 2;
      }
      while (v6 + 2 != a2);
    }
  }
  return result;
}

uint64_t sub_1A6737A30(long long *a1, long long *a2, long long *a3, uint64_t (**a4)(long long *, long long *))
{
  char v8 = (*a4)(a2, a1);
  uint64_t result = (*a4)(a3, a2);
  if ((v8 & 1) == 0)
  {
    if (!result) {
      return result;
    }
    long long v14 = *a2;
    long long v13 = a2[1];
    long long v15 = a3[1];
    *a2 = *a3;
    a2[1] = v15;
    *a3 = v14;
    a3[1] = v13;
    if (!(*a4)(a2, a1)) {
      return 1;
    }
    long long v17 = *a1;
    long long v16 = a1[1];
    long long v18 = a2[1];
    *a1 = *a2;
    a1[1] = v18;
    *a2 = v17;
    a2[1] = v16;
    return 2;
  }
  if (!result)
  {
    long long v20 = *a1;
    long long v19 = a1[1];
    long long v21 = a2[1];
    *a1 = *a2;
    a1[1] = v21;
    *a2 = v20;
    a2[1] = v19;
    if (!(*a4)(a3, a2)) {
      return 1;
    }
    long long v23 = *a2;
    long long v22 = a2[1];
    long long v24 = a3[1];
    *a2 = *a3;
    a2[1] = v24;
    *a3 = v23;
    a3[1] = v22;
    return 2;
  }
  long long v11 = *a1;
  long long v10 = a1[1];
  long long v12 = a3[1];
  *a1 = *a3;
  a1[1] = v12;
  *a3 = v11;
  a3[1] = v10;
  return 1;
}

long long *sub_1A6737B30(long long *a1, long long *a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v4 = a2;
  long long v6 = a1[1];
  long long v17 = *a1;
  long long v18 = v6;
  if ((*a3)(&v17, a2 - 2))
  {
    char v7 = a1;
    do
      v7 += 2;
    while (((*a3)(&v17, v7) & 1) == 0);
  }
  else
  {
    char v8 = a1 + 2;
    do
    {
      char v7 = v8;
      if (v8 >= v4) {
        break;
      }
      int v9 = (*a3)(&v17, v8);
      char v8 = v7 + 2;
    }
    while (!v9);
  }
  if (v7 < v4)
  {
    do
      v4 -= 2;
    while (((*a3)(&v17, v4) & 1) != 0);
  }
  while (v7 < v4)
  {
    long long v10 = v7[1];
    long long v19 = *v7;
    long long v20 = v10;
    long long v11 = v4[1];
    *char v7 = *v4;
    v7[1] = v11;
    long long v12 = v20;
    long long *v4 = v19;
    v4[1] = v12;
    do
      v7 += 2;
    while (!(*a3)(&v17, v7));
    do
      v4 -= 2;
    while (((*a3)(&v17, v4) & 1) != 0);
  }
  long long v13 = v7 - 2;
  if (v7 - 2 != a1)
  {
    long long v14 = *(v7 - 1);
    *a1 = *v13;
    a1[1] = v14;
  }
  long long v15 = v18;
  *long long v13 = v17;
  *(v7 - 1) = v15;
  return v7;
}

long long *sub_1A6737C60(long long *a1, long long *a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v6 = 0;
  long long v7 = a1[1];
  long long v18 = *a1;
  long long v19 = v7;
  do
    v6 += 2;
  while (((*a3)(&a1[v6], &v18) & 1) != 0);
  char v8 = &a1[v6];
  int v9 = &a1[v6 - 2];
  if (v6 == 2)
  {
    do
    {
      if (v8 >= a2) {
        break;
      }
      a2 -= 2;
    }
    while (((*a3)(a2, &v18) & 1) == 0);
  }
  else
  {
    do
      a2 -= 2;
    while (!(*a3)(a2, &v18));
  }
  if (v8 < a2)
  {
    long long v10 = &a1[v6];
    long long v11 = a2;
    do
    {
      long long v13 = v10[1];
      long long v20 = *v10;
      long long v12 = v20;
      long long v21 = v13;
      long long v14 = v11[1];
      long long *v10 = *v11;
      v10[1] = v14;
      *long long v11 = v12;
      v11[1] = v13;
      do
        v10 += 2;
      while (((*a3)(v10, &v18) & 1) != 0);
      do
        v11 -= 2;
      while (!(*a3)(v11, &v18));
    }
    while (v10 < v11);
    int v9 = v10 - 2;
  }
  if (v9 != a1)
  {
    long long v15 = v9[1];
    *a1 = *v9;
    a1[1] = v15;
  }
  long long v16 = v19;
  *int v9 = v18;
  v9[1] = v16;
  return v9;
}

BOOL sub_1A6737D94(long long *a1, long long *a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v6 = ((char *)a2 - (char *)a1) >> 5;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      char v8 = a2 - 2;
      if ((*a3)(a2 - 2, a1))
      {
        long long v10 = *a1;
        long long v9 = a1[1];
        long long v11 = *(a2 - 1);
        *a1 = *v8;
        a1[1] = v11;
        *char v8 = v10;
        *(a2 - 1) = v9;
      }
      return 1;
    case 3:
      sub_1A6737A30(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      sub_1A6737F70((uint64_t)a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      sub_1A673802C((uint64_t)a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
      return 1;
    default:
      long long v12 = a1 + 4;
      sub_1A6737A30(a1, a1 + 2, a1 + 4, a3);
      long long v13 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v13, v12))
    {
      long long v16 = v13[1];
      long long v22 = *v13;
      long long v23 = v16;
      uint64_t v17 = v14;
      while (1)
      {
        long long v18 = (long long *)((char *)a1 + v17);
        long long v19 = *(long long *)((char *)a1 + v17 + 80);
        v18[6] = *(long long *)((char *)a1 + v17 + 64);
        v18[7] = v19;
        if (v17 == -64) {
          break;
        }
        v17 -= 32;
        if (((*a3)(&v22, v18 + 2) & 1) == 0)
        {
          long long v20 = (long long *)((char *)a1 + v17 + 96);
          goto LABEL_12;
        }
      }
      long long v20 = a1;
LABEL_12:
      long long v21 = v23;
      *long long v20 = v22;
      v20[1] = v21;
      if (++v15 == 8) {
        return v13 + 2 == a2;
      }
    }
    long long v12 = v13;
    v14 += 32;
    v13 += 2;
    if (v13 == a2) {
      return 1;
    }
  }
}

__n128 sub_1A6737F70(uint64_t a1, long long *a2, long long *a3, long long *a4, uint64_t (**a5)(long long *, long long *))
{
  sub_1A6737A30((long long *)a1, a2, a3, a5);
  if ((*a5)(a4, a3))
  {
    long long v12 = *a3;
    long long v11 = a3[1];
    long long v13 = a4[1];
    *a3 = *a4;
    a3[1] = v13;
    *a4 = v12;
    a4[1] = v11;
    if ((*a5)(a3, a2))
    {
      long long v15 = *a2;
      long long v14 = a2[1];
      long long v16 = a3[1];
      *a2 = *a3;
      a2[1] = v16;
      *a3 = v15;
      a3[1] = v14;
      if ((*a5)(a2, (long long *)a1))
      {
        long long v17 = *(_OWORD *)a1;
        __n128 result = *(__n128 *)(a1 + 16);
        long long v18 = a2[1];
        *(_OWORD *)a1 = *a2;
        *(_OWORD *)(a1 + 16) = v18;
        *a2 = v17;
        a2[1] = (__int128)result;
      }
    }
  }
  return result;
}

__n128 sub_1A673802C(uint64_t a1, long long *a2, long long *a3, long long *a4, long long *a5, uint64_t (**a6)(long long *, long long *))
{
  __n128 v12 = sub_1A6737F70(a1, a2, a3, a4, a6);
  if (((unsigned int (*)(long long *, long long *, __n128))*a6)(a5, a4, v12))
  {
    long long v15 = *a4;
    long long v14 = a4[1];
    long long v16 = a5[1];
    *a4 = *a5;
    a4[1] = v16;
    *a5 = v15;
    a5[1] = v14;
    if ((*a6)(a4, a3))
    {
      long long v18 = *a3;
      long long v17 = a3[1];
      long long v19 = a4[1];
      *a3 = *a4;
      a3[1] = v19;
      *a4 = v18;
      a4[1] = v17;
      if ((*a6)(a3, a2))
      {
        long long v21 = *a2;
        long long v20 = a2[1];
        long long v22 = a3[1];
        *a2 = *a3;
        a2[1] = v22;
        *a3 = v21;
        a3[1] = v20;
        if ((*a6)(a2, (long long *)a1))
        {
          long long v23 = *(_OWORD *)a1;
          __n128 result = *(__n128 *)(a1 + 16);
          long long v24 = a2[1];
          *(_OWORD *)a1 = *a2;
          *(_OWORD *)(a1 + 16) = v24;
          *a2 = v23;
          a2[1] = (__int128)result;
        }
      }
    }
  }
  return result;
}

long long *sub_1A6738110(long long *a1, long long *a2, long long *a3, unsigned int (**a4)(long long *, long long *), __n128 a5)
{
  if (a1 != a2)
  {
    long long v7 = a2;
    uint64_t v9 = (char *)a2 - (char *)a1;
    uint64_t v10 = ((char *)a2 - (char *)a1) >> 5;
    if ((char *)a2 - (char *)a1 >= 33)
    {
      unint64_t v11 = (unint64_t)(v10 - 2) >> 1;
      unint64_t v12 = v11 + 1;
      long long v13 = &a1[2 * v11];
      do
      {
        a5.n128_f64[0] = sub_1A67382E4((uint64_t)a1, a4, v10, v13);
        v13 -= 2;
        --v12;
      }
      while (v12);
    }
    long long v14 = v7;
    if (v7 != a3)
    {
      long long v15 = v7;
      do
      {
        if (((unsigned int (*)(long long *, long long *, __n128))*a4)(v15, a1, a5))
        {
          long long v17 = *v15;
          long long v16 = v15[1];
          long long v18 = a1[1];
          *long long v15 = *a1;
          v15[1] = v18;
          *a1 = v17;
          a1[1] = v16;
          a5.n128_f64[0] = sub_1A67382E4((uint64_t)a1, a4, v10, a1);
        }
        v15 += 2;
      }
      while (v15 != a3);
      long long v14 = a3;
    }
    if (v9 < 33)
    {
      return v14;
    }
    else
    {
      CFTypeID v29 = v14;
      uint64_t v19 = (unint64_t)v9 >> 5;
      do
      {
        uint64_t v20 = 0;
        long long v30 = *a1;
        long long v31 = a1[1];
        long long v21 = a1;
        do
        {
          long long v22 = &v21[2 * v20 + 2];
          uint64_t v23 = (2 * v20) | 1;
          uint64_t v24 = 2 * v20 + 2;
          if (v24 < v19 && (*a4)(&v21[2 * v20 + 2], &v21[2 * v20 + 4]))
          {
            v22 += 2;
            uint64_t v23 = v24;
          }
          long long v25 = v22[1];
          *long long v21 = *v22;
          v21[1] = v25;
          long long v21 = v22;
          uint64_t v20 = v23;
        }
        while (v23 <= (uint64_t)((unint64_t)(v19 - 2) >> 1));
        v7 -= 2;
        if (v22 == v7)
        {
          *long long v22 = v30;
          v22[1] = v31;
        }
        else
        {
          long long v26 = v7[1];
          *long long v22 = *v7;
          v22[1] = v26;
          *long long v7 = v30;
          v7[1] = v31;
          sub_1A673841C((uint64_t)a1, (uint64_t)(v22 + 2), (uint64_t (**)(long long *, long long *))a4, ((char *)(v22 + 2) - (char *)a1) >> 5);
        }
      }
      while (v19-- > 2);
      return v29;
    }
  }
  return a3;
}

double sub_1A67382E4(uint64_t a1, unsigned int (**a2)(long long *, long long *), uint64_t a3, long long *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v25 = v4;
    uint64_t v26 = v5;
    long long v7 = a4;
    int64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= ((uint64_t)a4 - a1) >> 5)
    {
      uint64_t v12 = ((uint64_t)a4 - a1) >> 4;
      uint64_t v13 = v12 + 1;
      long long v14 = (long long *)(a1 + 32 * (v12 + 1));
      uint64_t v15 = v12 + 2;
      if (v12 + 2 < a3 && (*a2)(v14, v14 + 2))
      {
        v14 += 2;
        uint64_t v13 = v15;
      }
      if ((((uint64_t (*)(long long *, long long *))*a2)(v14, v7) & 1) == 0)
      {
        long long v17 = v7[1];
        long long v23 = *v7;
        long long v24 = v17;
        do
        {
          long long v18 = v14;
          long long v19 = v14[1];
          *long long v7 = *v14;
          v7[1] = v19;
          if (v9 < v13) {
            break;
          }
          uint64_t v20 = (2 * v13) | 1;
          long long v14 = (long long *)(a1 + 32 * v20);
          uint64_t v21 = 2 * v13 + 2;
          if (v21 < a3)
          {
            if ((*a2)((long long *)(a1 + 32 * v20), v14 + 2))
            {
              v14 += 2;
              uint64_t v20 = v21;
            }
          }
          long long v7 = v18;
          uint64_t v13 = v20;
        }
        while (!(*a2)(v14, &v23));
        double result = *(double *)&v23;
        long long v22 = v24;
        *long long v18 = v23;
        v18[1] = v22;
      }
    }
  }
  return result;
}

double sub_1A673841C(uint64_t a1, uint64_t a2, uint64_t (**a3)(long long *, long long *), uint64_t a4)
{
  unint64_t v6 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v19 = v4;
    uint64_t v20 = v5;
    unint64_t v9 = v6 >> 1;
    uint64_t v10 = (long long *)(a1 + 32 * (v6 >> 1));
    unint64_t v11 = (long long *)(a2 - 32);
    if ((*a3)(v10, (long long *)(a2 - 32)))
    {
      long long v13 = v11[1];
      long long v17 = *v11;
      long long v18 = v13;
      do
      {
        long long v14 = v10;
        long long v15 = v10[1];
        *unint64_t v11 = *v10;
        v11[1] = v15;
        if (!v9) {
          break;
        }
        unint64_t v9 = (v9 - 1) >> 1;
        uint64_t v10 = (long long *)(a1 + 32 * v9);
        unint64_t v11 = v14;
      }
      while (((*a3)(v10, &v17) & 1) != 0);
      double result = *(double *)&v17;
      long long v16 = v18;
      *long long v14 = v17;
      v14[1] = v16;
    }
  }
  return result;
}

uint64_t sub_1A67384C8(uint64_t a1, unsigned int a2)
{
  if (!*(unsigned char *)(a1 + 168)) {
    sub_1A67361F8(-10851);
  }
  uint64_t v3 = (const AudioStreamBasicDescription *)(a1 + 80);
  uint64_t v4 = (ausdk::AUBufferList *)(a1 + 144);

  return ausdk::AUBufferList::PrepareBuffer(v4, v3, a2);
}

void *sub_1A673850C(uint64_t a1, unsigned int *__dst)
{
  if (!*(_DWORD *)a1)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      sub_1A688F730();
    }
    exception = __cxa_allocate_exception(0x18uLL);
    sub_1A66E7DE8((uint64_t)exception, -1);
    __cxa_throw(exception, (struct type_info *)&unk_1EFB7D058, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  BOOL v2 = (const void *)(*(void *)(a1 + 8) + 48);
  size_t v3 = (16 * *__dst) | 8;

  return memcpy(__dst, v2, v3);
}

void sub_1A67385A8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1A67385BC(int8x8_t *a1, unsigned int a2, uint64_t a3, unsigned int a4, unsigned char *a5)
{
  unint64_t v5 = a4 - (unint64_t)a2 + 8 * (a3 - (void)a1);
  if (*a5) {
    return sub_1A67385DC(a1, a2, v5);
  }
  else {
    return sub_1A6738680((uint64_t *)a1, a2, v5);
  }
}

uint64_t sub_1A67385DC(int8x8_t *a1, unsigned int a2, unint64_t a3)
{
  uint64_t v3 = a2;
  if (a2)
  {
    if (64 - a2 >= a3) {
      unint64_t v4 = a3;
    }
    else {
      unint64_t v4 = 64 - a2;
    }
    uint64_t v5 = (uint64_t)*a1++;
    uint8x8_t v6 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v4)) & (-1 << a2) & v5));
    v6.i16[0] = vaddlv_u8(v6);
    uint64_t v3 = v6.u32[0];
    a3 -= v4;
  }
  if (a3 >= 0x40)
  {
    do
    {
      int8x8_t v7 = *a1++;
      uint8x8_t v8 = (uint8x8_t)vcnt_s8(v7);
      v8.i16[0] = vaddlv_u8(v8);
      v3 += v8.u32[0];
      a3 -= 64;
    }
    while (a3 > 0x3F);
  }
  if (a3)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)(*(void *)a1 & (0xFFFFFFFFFFFFFFFFLL >> -(char)a3)));
    v9.i16[0] = vaddlv_u8(v9);
    v3 += v9.u32[0];
  }
  return v3;
}

uint64_t sub_1A6738680(uint64_t *a1, unsigned int a2, unint64_t a3)
{
  uint64_t v3 = a2;
  if (a2)
  {
    if (64 - a2 >= a3) {
      unint64_t v4 = a3;
    }
    else {
      unint64_t v4 = 64 - a2;
    }
    uint64_t v5 = *a1++;
    uint8x8_t v6 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v4)) & (-1 << a2) & ~v5));
    v6.i16[0] = vaddlv_u8(v6);
    uint64_t v3 = v6.u32[0];
    a3 -= v4;
  }
  if (a3 >= 0x40)
  {
    do
    {
      uint64_t v7 = *a1++;
      uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)~v7);
      v8.i16[0] = vaddlv_u8(v8);
      v3 += v8.u32[0];
      a3 -= 64;
    }
    while (a3 > 0x3F);
  }
  if (a3)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> -(char)a3) & ~*a1));
    v9.i16[0] = vaddlv_u8(v9);
    v3 += v9.u32[0];
  }
  return v3;
}

unint64_t *sub_1A673872C(unint64_t *a1)
{
  for (unint64_t i = (unint64_t *)atomic_load(a1); i; unint64_t i = (unint64_t *)atomic_load(a1))
  {
    atomic_store(*i, a1);
    MEMORY[0x1AD0C0C70]();
  }
  for (unint64_t j = (unint64_t *)atomic_load(a1 + 1); j; unint64_t j = (unint64_t *)atomic_load(a1 + 1))
  {
    atomic_store(*j, a1 + 1);
    MEMORY[0x1AD0C0C70]();
  }
  for (k = (unint64_t *)atomic_load(a1 + 2); k; k = (unint64_t *)atomic_load(a1 + 2))
  {
    atomic_store(*k, a1 + 2);
    MEMORY[0x1AD0C0C70]();
  }
  return a1;
}

unint64_t *sub_1A67387E4(uint64_t a1)
{
  do
  {
    double result = (unint64_t *)atomic_load((unint64_t *)(a1 + 16));
    if (!result) {
      operator new();
    }
    uint64_t v3 = result;
    atomic_compare_exchange_strong((atomic_ullong *volatile)(a1 + 16), (unint64_t *)&v3, 0);
  }
  while (v3 != result);
  unint64_t v4 = *result;
  if (*result)
  {
    uint64_t v5 = (unint64_t *)*result;
    do
    {
      uint8x8_t v6 = v5;
      uint64_t v5 = (unint64_t *)*v5;
    }
    while (v5);
    do
    {
      unint64_t v7 = atomic_load((unint64_t *)(a1 + 16));
      *uint8x8_t v6 = v7;
      unint64_t v8 = v7;
      atomic_compare_exchange_strong((atomic_ullong *volatile)(a1 + 16), &v8, v4);
    }
    while (v8 != v7);
  }
  return result;
}

void sub_1A6738870(const void **a1)
{
  uint64_t v1 = *a1;
  if (v1) {
    CFRelease(v1);
  }
}

CFTypeRef sub_1A6738894(CFTypeRef *a1)
{
  CFTypeRef result = *a1;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void sub_1A67388B8(const void **a1)
{
  uint64_t v1 = *a1;
  if (v1) {
    CFRelease(v1);
  }
}

void sub_1A67388F8(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void sub_1A6738908(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

void sub_1A67389AC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xEu);
}

id TTSCurrentSiriVoice(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v47[2] = *MEMORY[0x1E4F143B8];
  uint64_t v42 = 0;
  int v43 = &v42;
  uint64_t v44 = 0x2050000000;
  uint64_t v5 = (void *)qword_1E96C4928;
  uint64_t v45 = qword_1E96C4928;
  if (!qword_1E96C4928)
  {
    v41[0] = MEMORY[0x1E4F143A8];
    v41[1] = 3221225472;
    v41[2] = sub_1A67399AC;
    v41[3] = &unk_1E5C696C8;
    v41[4] = &v42;
    sub_1A67399AC((uint64_t)v41, a2, a3, a4, a5);
    uint64_t v5 = (void *)v43[3];
  }
  id v6 = v5;
  _Block_object_dispose(&v42, 8);
  unint64_t v11 = objc_msgSend_sharedPreferences(v6, v7, v8, v9, v10);
  long long v16 = objc_msgSend_outputVoice(v11, v12, v13, v14, v15);

  uint64_t v25 = objc_msgSend_name(v16, v17, v18, v19, v20);
  if (!v25
    || (objc_msgSend_languageCode(v16, v21, v22, v23, v24),
        uint64_t v26 = objc_claimAutoreleasedReturnValue(),
        BOOL v27 = v26 == 0,
        v26,
        v25,
        v27))
  {
    UInt32 v39 = 0;
  }
  else
  {
    v46[0] = @"name";
    CFDictionaryRef v32 = objc_msgSend_name(v16, v28, v29, v30, v31);
    v47[0] = v32;
    v46[1] = @"languageCode";
    UInt32 v37 = objc_msgSend_languageCode(v16, v33, v34, v35, v36);
    v47[1] = v37;
    UInt32 v39 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v38, (uint64_t)v47, (uint64_t)v46, 2);
  }

  return v39;
}

void sub_1A6738B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _TTSSelectedIdentifiersForSpeechSource(void *a1, int a2)
{
  id v7 = a1;
  uint64_t v49 = 0;
  int8x16_t v50 = &v49;
  uint64_t v51 = 0x2050000000;
  uint64_t v8 = (void *)qword_1EB67A5A0;
  uint64_t v52 = qword_1EB67A5A0;
  if (!qword_1EB67A5A0)
  {
    uint64_t v44 = MEMORY[0x1E4F143A8];
    uint64_t v45 = 3221225472;
    BOOL v46 = sub_1A6739B4C;
    unsigned int v47 = &unk_1E5C696C8;
    unsigned int v48 = &v49;
    sub_1A6739B4C((uint64_t)&v44, v3, v4, v5, v6);
    uint64_t v8 = (void *)v50[3];
  }
  id v9 = v8;
  _Block_object_dispose(&v49, 8);
  uint64_t v14 = objc_msgSend_sharedInstance(v9, v10, v11, v12, v13);
  uint64_t v19 = (void *)v14;
  if (!a2) {
    goto LABEL_14;
  }
  uint64_t v49 = 0;
  int8x16_t v50 = &v49;
  uint64_t v51 = 0x2020000000;
  uint64_t v20 = (uint64_t *)qword_1E96C4938;
  uint64_t v52 = qword_1E96C4938;
  if (!qword_1E96C4938)
  {
    uint64_t v44 = MEMORY[0x1E4F143A8];
    uint64_t v45 = 3221225472;
    BOOL v46 = sub_1A6739D10;
    unsigned int v47 = &unk_1E5C696C8;
    unsigned int v48 = &v49;
    uint64_t v21 = (void *)sub_1A6739BA4(v14, v15, v16, v17, v18);
    uint64_t v22 = dlsym(v21, "AXSpeechSourceKeyVoiceOver");
    *(void *)(v48[1] + 24) = v22;
    qword_1E96C4938 = *(void *)(v48[1] + 24);
    uint64_t v20 = (uint64_t *)v50[3];
  }
  _Block_object_dispose(&v49, 8);
  if (!v20) {
    sub_1A6890EC4(v23, v24, v25, v26, v27);
  }
  uint64_t isEqual = objc_msgSend_isEqual_(v7, v24, *v20, v26, v27);
  if (isEqual)
  {
    uint64_t isEqual = objc_msgSend_voiceOverEnabled(v19, v29, v30, v31, v32);
    if (!isEqual) {
      goto LABEL_15;
    }
  }
  uint64_t v49 = 0;
  int8x16_t v50 = &v49;
  uint64_t v51 = 0x2020000000;
  CFDictionaryRef v33 = (uint64_t *)qword_1E96C4940;
  uint64_t v52 = qword_1E96C4940;
  if (!qword_1E96C4940)
  {
    uint64_t v44 = MEMORY[0x1E4F143A8];
    uint64_t v45 = 3221225472;
    BOOL v46 = sub_1A6739D60;
    unsigned int v47 = &unk_1E5C696C8;
    unsigned int v48 = &v49;
    uint64_t v34 = (void *)sub_1A6739BA4(isEqual, v29, v30, v31, v32);
    uint64_t v35 = dlsym(v34, "AXSpeechSourceKeySwitchControl");
    *(void *)(v48[1] + 24) = v35;
    qword_1E96C4940 = *(void *)(v48[1] + 24);
    CFDictionaryRef v33 = (uint64_t *)v50[3];
  }
  _Block_object_dispose(&v49, 8);
  if (!v33) {
    sub_1A6890F3C(v36, v37, v38, v39, v40);
  }
  if (objc_msgSend_isEqual_(v7, v37, *v33, v39, v40)
    && !objc_msgSend_switchControlEnabled(v19, v15, v41, v17, v18))
  {
LABEL_15:
    uint64_t v42 = (void *)MEMORY[0x1E4F1CBF0];
  }
  else
  {
LABEL_14:
    uint64_t v42 = objc_msgSend_selectedSpeechVoiceIdentifiersForSourceKey_(v19, v15, (uint64_t)v7, v17, v18);
  }

  return v42;
}

void sub_1A6738E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id TTSSelectedActiveIdentifiersForSpeechSource(void *a1)
{
  return _TTSSelectedIdentifiersForSpeechSource(a1, 1);
}

id TTSSelectedIdentifiersForSpeechSource(void *a1)
{
  return _TTSSelectedIdentifiersForSpeechSource(a1, 0);
}

id TTSRosebudLogger()
{
  if (qword_1E96C48D8 != -1) {
    dispatch_once(&qword_1E96C48D8, &unk_1EFB804C0);
  }
  unint64_t v0 = (void *)qword_1E96C48D0;

  return v0;
}

uint64_t sub_1A6738F00()
{
  qword_1E96C48D0 = (uint64_t)os_log_create("com.apple.Accessibility", "TTSRosebud");

  return MEMORY[0x1F41817F8]();
}

__CFString *TTSStringForSpeechFootprint(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4) {
    return 0;
  }
  else {
    return off_1E5C6AB48[a1 - 1];
  }
}

__CFString *TTSStringForResourceType(unint64_t a1)
{
  if (a1 > 0xA)
  {
    BOOL v2 = 0;
  }
  else
  {
    BOOL v2 = *off_1E5C6AB70[a1];
  }
  return v2;
}

id TTSChoseong_JongseongToHangul(void *a1)
{
  uint64_t v1 = qword_1E96C48E8;
  id v5 = a1;
  if (v1 != -1) {
    dispatch_once(&qword_1E96C48E8, &unk_1EFB7E338);
  }
  uint64_t v6 = objc_msgSend_objectForKey_((void *)qword_1E96C48E0, v2, (uint64_t)v5, v3, v4);
  id v7 = v6;
  if (!v6) {
    uint64_t v6 = v5;
  }
  id v8 = v6;

  return v8;
}

void sub_1A6739044()
{
  unint64_t v0 = (void *)qword_1E96C48E0;
  qword_1E96C48E0 = (uint64_t)&unk_1EFB957A8;
}

id AXSpeechReplaceJapaneseElongationCharactersIfNeeded(void *a1)
{
  id v5 = a1;
  if (qword_1E96C48F8 != -1) {
    dispatch_once(&qword_1E96C48F8, &unk_1EFB80F28);
  }
  uint64_t v6 = (void *)MEMORY[0x1E4F28E78];
  uint64_t v7 = objc_msgSend_length(v5, v1, v2, v3, v4);
  uint64_t v11 = objc_msgSend_stringWithCapacity_(v6, v8, v7, v9, v10);
  v25[0] = 0;
  v25[1] = v25;
  void v25[2] = 0x3032000000;
  v25[3] = sub_1A6739200;
  void v25[4] = sub_1A6739210;
  id v26 = 0;
  uint64_t v16 = objc_msgSend_length(v5, v12, v13, v14, v15);
  v22[0] = MEMORY[0x1E4F143A8];
  v22[1] = 3221225472;
  v22[2] = sub_1A6739218;
  v22[3] = &unk_1E5C6AAF8;
  uint64_t v24 = v25;
  id v17 = v11;
  id v23 = v17;
  objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v5, v18, 0, v16, 2, v22);
  uint64_t v19 = v23;
  id v20 = v17;

  _Block_object_dispose(v25, 8);

  return v20;
}

void sub_1A67391D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A67391E8()
{
  unint64_t v0 = (void *)qword_1E96C48F0;
  qword_1E96C48F0 = (uint64_t)&unk_1EFB957D0;
}

uint64_t sub_1A6739200(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1A6739210(uint64_t a1)
{
}

void sub_1A6739218(uint64_t a1, void *a2)
{
  id v20 = a2;
  if (objc_msgSend_isEqualToString_(v20, v3, @"ー", v4, v5))
  {
    uint64_t v9 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    if (v9)
    {
      uint64_t v10 = objc_msgSend_objectForKey_((void *)qword_1E96C48F0, v6, v9, v7, v8);
      uint64_t v11 = v10;
      if (v10)
      {
        id v12 = v10;

        id v20 = v12;
      }
    }
  }
  objc_msgSend_appendString_(*(void **)(a1 + 32), v6, (uint64_t)v20, v7, v8);
  uint64_t v17 = objc_msgSend_copy(v20, v13, v14, v15, v16);
  uint64_t v18 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v19 = *(void **)(v18 + 40);
  *(void *)(v18 + 40) = v17;
}

uint64_t TTSSupportsNeuralVoices()
{
  if (qword_1EB67AB70 != -1) {
    dispatch_once(&qword_1EB67AB70, &unk_1EFB80F48);
  }
  return byte_1EB67AB60;
}

uint64_t sub_1A6739320()
{
  uint64_t result = MGGetBoolAnswer();
  byte_1EB67AB60 = result;
  return result;
}

uint64_t TTSSupportsNeuralAXVoices()
{
  if (qword_1EB67AB70 != -1) {
    dispatch_once(&qword_1EB67AB70, &unk_1EFB80F48);
  }
  if (!byte_1EB67AB60) {
    return 0;
  }

  return MEMORY[0x1F4106288]();
}

uint64_t TTSUseCoreSynthesizerForAV()
{
  return 0;
}

uint64_t TTSUseCoreSynthesizerForTTS()
{
  return 1;
}

uint64_t TTSUseSiriSSE()
{
  return MEMORY[0x1F4106260]();
}

uint64_t TTSIsRunningInLoginWindow()
{
  return 0;
}

uint64_t TTSIsPersonalVoicePrivilagedProcess()
{
  if ((AXProcessIsAxctl() & 1) != 0
    || (AXCUProcessIsAXUIServer() & 1) != 0
    || (AXProcessIsLiveSpeech() & 1) != 0
    || (AXProcessMacOSSettingsExtension() & 1) != 0
    || (AXCUProcessIsPreferences() & 1) != 0)
  {
    return 1;
  }

  return MEMORY[0x1F4106230]();
}

uint64_t TTSVoiceWithIdentifierIsAllowedToUseBufferCallbackAPIInCurrentProcess(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!objc_msgSend_isPersonalVoiceIdentifier_(TTSAlternativeVoices, a2, a1, a4, a5)
    || (TTSIsPersonalVoicePrivilagedProcess() & 1) != 0)
  {
    return 1;
  }
  uint64_t v6 = AXLogSpeechSynthesis();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
    sub_1A6890FB4(v6);
  }

  return 0;
}

uint64_t TTSHasRBSAssertionEntitlement()
{
  if (qword_1E96C4908 != -1) {
    dispatch_once(&qword_1E96C4908, &unk_1EFB80F68);
  }
  return byte_1E96C4900;
}

void sub_1A67394FC()
{
  unint64_t v0 = (void *)xpc_copy_entitlement_for_self();
  if (v0)
  {
    id v1 = v0;
    byte_1E96C4900 = xpc_BOOL_get_value(v0);
    unint64_t v0 = v1;
  }
}

uint64_t TTSMostPreferredLocaleOfLocales(uint64_t a1)
{
  return MEMORY[0x1F4181798](MEMORY[0x1E4F1CA20], sel_mostPreferredLanguageOf_forUsage_options_, a1, 8, 1);
}

void TTSKickAudioComponentRegistry()
{
  if (qword_1E96C4910 != -1) {
    dispatch_once(&qword_1E96C4910, &unk_1EFB80F88);
  }
}

id sub_1A673958C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (id)objc_msgSend_sharedAudioUnitComponentManager(MEMORY[0x1E4F15410], a2, a3, a4, a5);
}

double TTSSpeechRateToNashvilleRate(double a1)
{
  if (a1 >= 0.5) {
    return (a1 + -0.5 + a1 + -0.5) * 2.9 + 1.0;
  }
  else {
    return (1.0 - (0.5 - a1 + 0.5 - a1)) * 0.9 + 0.1;
  }
}

_opaque_pthread_t *_GetScheduledPriority(_opaque_pthread_t *result, int a2)
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v15 = 0;
    *(_OWORD *)thread_info_out = 0u;
    long long v14 = 0u;
    *(_OWORD *)uint64_t v9 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    uint64_t v12 = 0;
    mach_msg_type_number_t thread_info_outCnt = 10;
    thread_inspect_t v4 = pthread_mach_thread_np(result);
    thread_info(v4, 3u, thread_info_out, &thread_info_outCnt);
    switch(DWORD1(v14))
    {
      case 4:
        mach_msg_type_number_t thread_info_outCnt = 4;
        thread_inspect_t v6 = pthread_mach_thread_np(v3);
        thread_info(v6, 0xCu, (thread_info_t)&v11 + 2, &thread_info_outCnt);
        if (a2 || !v12) {
          return (_opaque_pthread_t *)HIDWORD(v11);
        }
        else {
          return (_opaque_pthread_t *)HIDWORD(v12);
        }
      case 2:
        mach_msg_type_number_t thread_info_outCnt = 5;
        thread_inspect_t v7 = pthread_mach_thread_np(v3);
        thread_info(v7, 0xBu, (thread_info_t)&v10 + 1, &thread_info_outCnt);
        if (a2 || !v11) {
          return (_opaque_pthread_t *)DWORD2(v10);
        }
        else {
          return (_opaque_pthread_t *)DWORD1(v11);
        }
      case 1:
        mach_msg_type_number_t thread_info_outCnt = 5;
        thread_inspect_t v5 = pthread_mach_thread_np(v3);
        thread_info(v5, 0xAu, v9, &thread_info_outCnt);
        if (a2) {
          return (_opaque_pthread_t *)v9[1];
        }
        else {
          return (_opaque_pthread_t *)v9[2];
        }
      default:
        return 0;
    }
  }
  return result;
}

BOOL TTSSetThreadPriorityHigh(int a1)
{
  kern_return_t v8;
  _opaque_pthread_t *v9;
  _opaque_pthread_t *v10;
  NSObject *v11;
  BOOL v12;
  sched_param v14;
  int v15;
  integer_t policy_info;

  pthread_once(&stru_1E96C1730, sub_1A673986C);
  uint64_t v2 = pthread_self();
  unsigned int ScheduledPriority = _GetScheduledPriority(v2, 0);
  if (a1) {
    int v4 = 97;
  }
  else {
    int v4 = dword_1E96C1740;
  }
  int v5 = v4 - ScheduledPriority;
  policy_info = v4 - ScheduledPriority;
  thread_inspect_t v6 = AXTTSLogCommon();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
    sub_1A6891080(v5, v6);
  }

  thread_act_t v7 = MEMORY[0x1AD0C10D0]();
  uint64_t v8 = thread_policy_set(v7, 3u, &policy_info, 1u);
  uint64_t v15 = 0;
  long long v14 = 0;
  uint64_t v9 = pthread_self();
  pthread_getschedparam(v9, &v15, &v14);
  v14.sched_priority = v4;
  long long v10 = pthread_self();
  pthread_setschedparam(v10, 4, &v14);
  long long v11 = AXTTSLogCommon();
  uint64_t v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG);
  if (v8)
  {
    if (v12) {
      sub_1A689103C(v11);
    }
  }
  else if (v12)
  {
    sub_1A6890FF8(v11);
  }

  return v8 == 0;
}

void sub_1A673986C()
{
  unint64_t v0 = pthread_self();
  dword_1E96C1740 = _GetScheduledPriority(v0, 0);
  id v1 = AXTTSLogCommon();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG)) {
    sub_1A68910F8(v1);
  }
}

id TTSLocString(void *a1)
{
  uint64_t v1 = qword_1E96C4920;
  id v3 = a1;
  if (v1 != -1) {
    dispatch_once(&qword_1E96C4920, &unk_1EFB80FA8);
  }
  int v4 = objc_msgSend_localizedStringForKey_value_table_((void *)qword_1E96C4918, v2, (uint64_t)v3, (uint64_t)&stru_1EFB83720, @"Localizable");

  return v4;
}

uint64_t sub_1A6739950()
{
  unint64_t v0 = (void *)MEMORY[0x1E4F28B50];
  uint64_t v1 = objc_opt_class();
  qword_1E96C4918 = objc_msgSend_bundleForClass_(v0, v2, v1, v3, v4);

  return MEMORY[0x1F41817F8]();
}

Class sub_1A67399AC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  v11[0] = 0;
  if (!qword_1E96C4930)
  {
    v11[1] = (void *)MEMORY[0x1E4F143A8];
    v11[2] = (void *)3221225472;
    void v11[3] = sub_1A6739AD8;
    v11[4] = &unk_1E5C69480;
    unsigned int v11[5] = v11;
    long long v12 = xmmword_1E5C6AB18;
    uint64_t v13 = 0;
    qword_1E96C4930 = _sl_dlopen();
  }
  if (!qword_1E96C4930) {
    sub_1A689117C(v11, a2, a3, a4, a5);
  }
  if (v11[0]) {
    free(v11[0]);
  }
  Class result = objc_getClass("AFPreferences");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1A68911FC((uint64_t)result, v7, v8, v9, v10);
  }
  qword_1E96C4928 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1A6739AD8()
{
  uint64_t result = _sl_dlopen();
  qword_1E96C4930 = result;
  return result;
}

Class sub_1A6739B4C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1A6739BA4(a1, a2, a3, a4, a5);
  Class result = objc_getClass("AXSettings");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1A6891278((uint64_t)result, v7, v8, v9, v10);
  }
  qword_1EB67A5A0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1A6739BA4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  v7[0] = 0;
  if (!qword_1EB67A568)
  {
    v7[1] = (void *)MEMORY[0x1E4F143A8];
    void v7[2] = (void *)3221225472;
    v7[3] = sub_1A6739C9C;
    v7[4] = &unk_1E5C69480;
    v7[5] = v7;
    long long v8 = xmmword_1E5C6AB30;
    uint64_t v9 = 0;
    qword_1EB67A568 = _sl_dlopen();
  }
  uint64_t v5 = qword_1EB67A568;
  if (!qword_1EB67A568) {
    sub_1A68912F4(v7, a2, a3, a4, a5);
  }
  if (v7[0]) {
    free(v7[0]);
  }
  return v5;
}

uint64_t sub_1A6739C9C()
{
  uint64_t result = _sl_dlopen();
  qword_1EB67A568 = result;
  return result;
}

void *sub_1A6739D10(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  thread_inspect_t v6 = (void *)sub_1A6739BA4(a1, a2, a3, a4, a5);
  uint64_t result = dlsym(v6, "AXSpeechSourceKeyVoiceOver");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1E96C4938 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1A6739D60(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  thread_inspect_t v6 = (void *)sub_1A6739BA4(a1, a2, a3, a4, a5);
  uint64_t result = dlsym(v6, "AXSpeechSourceKeySwitchControl");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1E96C4940 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void ausdk::AUElement::UseIndexedParameters(ausdk::AUElement *this, unsigned int a2)
{
  *((unsigned char *)this + 40) = 1;
}

void sub_1A6739DE4(void *a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(a1[1] - *a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      a1[1] = *a1 + 4 * a2;
    }
  }
  else
  {
    sub_1A673B2A4((uint64_t)a1, a2 - v2);
  }
}

BOOL ausdk::AUElement::HasParameterID(ausdk::AUElement *this, unsigned int a2)
{
  if (*((unsigned char *)this + 40)) {
    return a2 < (unint64_t)((uint64_t)(*((void *)this + 7) - *((void *)this + 6)) >> 2);
  }
  else {
    return *((void *)this + 3) != (void)sub_1A6739E68((char **)this + 2, a2);
  }
}

char *sub_1A6739E68(char **a1, unsigned int a2)
{
  uint64_t v3 = *a1;
  uint64_t result = a1[1];
  if (result != v3)
  {
    unint64_t v4 = (result - v3) >> 3;
    do
    {
      unint64_t v5 = v4 >> 1;
      thread_inspect_t v6 = &v3[8 * (v4 >> 1)];
      unsigned int v8 = *(_DWORD *)v6;
      thread_act_t v7 = v6 + 8;
      v4 += ~(v4 >> 1);
      if (v8 < a2) {
        uint64_t v3 = v7;
      }
      else {
        unint64_t v4 = v5;
      }
    }
    while (v4);
  }
  if (v3 != result && *(_DWORD *)v3 == a2) {
    return v3;
  }
  return result;
}

float ausdk::AUElement::GetParameter(char **this, unsigned int a2)
{
  if (!*((unsigned char *)this + 40))
  {
    unint64_t v5 = sub_1A6739E68(this + 2, a2);
    if (this[3] != v5)
    {
      unint64_t v4 = (atomic_uint *)(v5 + 4);
      return COERCE_FLOAT(atomic_load_explicit(v4, memory_order_acquire));
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      sub_1A689137C();
    }
LABEL_12:
    exception = __cxa_allocate_exception(0x18uLL);
    sub_1A66E7DE8((uint64_t)exception, -10878);
    __cxa_throw(exception, (struct type_info *)&unk_1EFB7D058, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  uint64_t v3 = this[6];
  if (a2 >= (unint64_t)((this[7] - v3) >> 2))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      sub_1A689137C();
    }
    goto LABEL_12;
  }
  unint64_t v4 = (atomic_uint *)&v3[4 * a2];
  return COERCE_FLOAT(atomic_load_explicit(v4, memory_order_acquire));
}

void sub_1A6739F98(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void ausdk::AUElement::SetParameter(ausdk::AUElement *this, unsigned int a2, float a3, char a4)
{
  if (*((unsigned char *)this + 40))
  {
    uint64_t v7 = *((void *)this + 6);
    if (a2 >= (unint64_t)((*((void *)this + 7) - v7) >> 2))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        sub_1A689137C();
      }
      exception = __cxa_allocate_exception(0x18uLL);
      sub_1A66E7DE8((uint64_t)exception, -10878);
      __cxa_throw(exception, (struct type_info *)&unk_1EFB7D058, (void (*)(void *))std::runtime_error::~runtime_error);
    }
    unsigned int v8 = (unsigned int *)(v7 + 4 * a2);
    goto LABEL_6;
  }
  uint64_t v10 = (char *)this + 16;
  long long v11 = sub_1A6739E68((char **)this + 2, a2);
  if (*((char **)this + 3) != v11)
  {
    unsigned int v8 = (unsigned int *)(v11 + 4);
LABEL_6:
    atomic_store(LODWORD(a3), v8);
    return;
  }
  long long v12 = (ausdk::AUBase *)*((void *)this + 1);
  if (!*((unsigned char *)v12 + 17) || (a4 & 1) != 0)
  {
    float v15 = a3;
    v14[0] = v10;
    v14[1] = a2;
    sub_1A673A0F0((uint64_t)v14, (unsigned int *)&v15);
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    sub_1A68913EC(v12, a2);
  }
}

void sub_1A673A0DC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1A673A0F0(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = *(uint64_t **)a1;
  unsigned int v4 = *(_DWORD *)(a1 + 8);
  unint64_t v5 = (_DWORD *)*v3;
  thread_inspect_t v6 = (_DWORD *)v3[1];
  if (v6 == (_DWORD *)*v3)
  {
    unint64_t v5 = (_DWORD *)v3[1];
  }
  else
  {
    unint64_t v7 = ((uint64_t)v6 - *v3) >> 3;
    do
    {
      unint64_t v8 = v7 >> 1;
      uint64_t v9 = &v5[2 * (v7 >> 1)];
      unsigned int v11 = *v9;
      uint64_t v10 = v9 + 2;
      v7 += ~(v7 >> 1);
      if (v11 < v4) {
        unint64_t v5 = v10;
      }
      else {
        unint64_t v7 = v8;
      }
    }
    while (v7);
  }
  if (v6 == v5 || *v5 != v4)
  {
    v16[0] = *(_DWORD *)(a1 + 8);
    unsigned int v14 = atomic_load(a2);
    v16[1] = v14;
    sub_1A673B6E4(v3, (uint64_t)v5, v16);
  }
  else
  {
    long long v12 = v5 + 1;
    if (v12 != a2)
    {
      unsigned int v13 = atomic_load(a2);
      atomic_store(v13, v12);
    }
  }
  return a1;
}

void ausdk::AUElement::SetScheduledEvent(ausdk::AUElement *this, unsigned int a2, const AudioUnitParameterEvent *a3, unsigned int a4, unsigned int a5, char a6)
{
  if (a3->eventType == kParameterEvent_Immediate)
  {
    float value = a3->eventValues.immediate.value;
    ausdk::AUElement::SetParameter(this, a2, value, a6);
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    sub_1A6891488((uint64_t)this);
  }
}

uint64_t ausdk::AUElement::GetParameterList(uint64_t this, unsigned int *a2)
{
  if (*(unsigned char *)(this + 40))
  {
    uint64_t v2 = *(void *)(this + 56) - *(void *)(this + 48);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 4 * (v2 >> 2);
      do
      {
        a2[v3] = v3;
        ++v3;
        v4 -= 4;
      }
      while (v4);
    }
  }
  else
  {
    unint64_t v5 = *(unsigned int **)(this + 16);
    thread_inspect_t v6 = *(unsigned int **)(this + 24);
    while (v5 != v6)
    {
      unsigned int v7 = *v5;
      v5 += 2;
      *a2++ = v7;
    }
  }
  return this;
}

UInt8 *ausdk::AUElement::SaveState(ausdk::AUElement *this, int a2, CFDataRef theData)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  int v20 = a2;
  CFMutableDataRef theDataa = theData;
  uint64_t v22 = 0;
  memset(v21, 0, sizeof(v21));
  CFIndex Length = CFDataGetLength(theData);
  unsigned int v18 = 0;
  v17[0] = this;
  v17[1] = &v20;
  v17[2] = v21;
  v17[3] = &theDataa;
  void v17[4] = &v18;
  *(_DWORD *)bytes = 0;
  CFDataAppendBytes(theData, bytes, 4);
  if (*((unsigned char *)this + 40))
  {
    unint64_t v6 = *((void *)this + 7) - *((void *)this + 6);
    if ((v6 & 0x3FFFFFFFCLL) != 0)
    {
      uint64_t v7 = 0;
      uint64_t v8 = (v6 >> 2);
      do
      {
        float v9 = COERCE_FLOAT(atomic_load((unsigned int *)(*((void *)this + 6) + 4 * v7)));
        sub_1A673A3A8((uint64_t)v17, v7++, v9);
      }
      while (v8 != v7);
    }
  }
  else
  {
    unsigned int v13 = (unsigned int *)*((void *)this + 2);
    long long v12 = (unsigned int *)*((void *)this + 3);
    while (v13 != v12)
    {
      unsigned int v14 = v13 + 1;
      unsigned int v15 = *v13;
      v13 += 2;
      LODWORD(v14) = atomic_load(v14);
      sub_1A673A3A8((uint64_t)v17, v15, *(float *)&v14);
    }
  }
  unsigned int v10 = bswap32(v18);
  uint64_t result = CFDataGetMutableBytePtr(theDataa);
  *(_DWORD *)&result[Length] = v10;
  return result;
}

void sub_1A673A3A8(uint64_t a1, uint64_t a2, float a3)
{
  unsigned int v4 = a2;
  if ((*(unsigned int (**)(void, void, uint64_t, void))(**(void **)(*(void *)a1 + 8) + 256))(*(void *)(*(void *)a1 + 8), **(unsigned int **)(a1 + 8), a2, *(void *)(a1 + 16)))
  {
    goto LABEL_2;
  }
  uint64_t v8 = *(void *)(a1 + 16);
  if ((*(unsigned char *)(v8 + 96) & 0x10) != 0)
  {
    float v9 = *(const void **)(v8 + 72);
    if (v9)
    {
      CFRelease(v9);
      uint64_t v8 = *(void *)(a1 + 16);
    }
    if (*(_DWORD *)(v8 + 80) == 26)
    {
      unsigned int v10 = *(const void **)(v8 + 56);
      if (v10)
      {
        CFRelease(v10);
        uint64_t v8 = *(void *)(a1 + 16);
      }
    }
  }
  if ((*(unsigned char *)(v8 + 97) & 0xA0) == 0)
  {
LABEL_2:
    unint64_t v6 = **(__CFData ***)(a1 + 24);
    *(_DWORD *)bytes = bswap32(v4);
    CFDataAppendBytes(v6, bytes, 4);
    uint64_t v7 = **(__CFData ***)(a1 + 24);
    *(_DWORD *)unsigned int v11 = bswap32(LODWORD(a3));
    CFDataAppendBytes(v7, v11, 4);
    ++**(_DWORD **)(a1 + 32);
  }
}

unsigned int *ausdk::AUElement::RestoreState(ausdk::AUElement *this, const unsigned __int8 *a2)
{
  uint64_t v2 = (unsigned int *)(a2 + 4);
  if (*(_DWORD *)a2)
  {
    unsigned int v4 = bswap32(*(_DWORD *)a2);
    if (v4 <= 1) {
      int v5 = 1;
    }
    else {
      int v5 = v4;
    }
    do
    {
      unsigned int v6 = *v2;
      unsigned int v7 = v2[1];
      v2 += 2;
      ausdk::AUElement::SetParameter(this, bswap32(v6), COERCE_FLOAT(bswap32(v7)), 0);
      --v5;
    }
    while (v5);
  }
  return v2;
}

ausdk::AUIOElement *ausdk::AUIOElement::AUIOElement(ausdk::AUIOElement *this, ausdk::AUBase *a2)
{
  *((void *)this + 1) = a2;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((unsigned char *)this + 40) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *(void *)this = &unk_1EFB7D4E0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((void *)this + 14) = 0;
  sub_1A6737410((void *)this + 15, 1uLL);
  uint64_t v3 = *((void *)this + 15);
  *(void *)uint64_t v3 = 0;
  *(_DWORD *)(v3 + 8) = 0;
  *((_DWORD *)this + 36) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  *((unsigned char *)this + 168) = 1;
  *((void *)this + 10) = 0x40E5888000000000;
  *(_OWORD *)((char *)this + 88) = xmmword_1A689D8A0;
  *(_OWORD *)((char *)this + 104) = xmmword_1A689D8B0;
  return this;
}

void sub_1A673A5C8(_Unwind_Exception *a1)
{
  sub_1A67024F8(v1);
  _Unwind_Resume(a1);
}

uint64_t ausdk::AUIOElement::SetStreamFormat(ausdk::AUIOElement *this, const AudioStreamBasicDescription *a2)
{
  long long v3 = *(_OWORD *)&a2->mSampleRate;
  long long v4 = *(_OWORD *)&a2->mBytesPerPacket;
  *((void *)this + 14) = *(void *)&a2->mBitsPerChannel;
  *((_OWORD *)this + 5) = v3;
  *((_OWORD *)this + 6) = v4;
  if (sub_1A67366C0(*((_DWORD **)this + 15)))
  {
    int v5 = *((_DWORD *)this + 27);
    if (v5 != sub_1A67366C0(*((_DWORD **)this + 15))) {
      (*(void (**)(ausdk::AUIOElement *))(*(void *)this + 104))(this);
    }
  }
  return 0;
}

uint64_t ausdk::AUIOElement::AllocateBuffer(uint64_t this, int a2)
{
  uint64_t v2 = *(void *)(this + 8);
  if (*(unsigned char *)(v2 + 18))
  {
    int v3 = a2;
    if (!a2) {
      int v3 = *(_DWORD *)(v2 + 336);
    }
    long long v4 = (ausdk::AUBufferList *)(this + 144);
    int v5 = (const AudioStreamBasicDescription *)(this + 80);
    if (*(unsigned char *)(this + 168))
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)this + 72))(this)) {
        int v6 = v3;
      }
      else {
        int v6 = 0;
      }
    }
    else
    {
      int v6 = 0;
    }
    return ausdk::AUBufferList::Allocate(v4, v5, v6);
  }
  return this;
}

void *ausdk::AUIOElement::DeallocateBuffer(ausdk::AUIOElement *this)
{
  return ausdk::AUBufferList::Deallocate((void *)this + 18);
}

void ausdk::AUIOElement::GetChannelLayoutTags(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t ausdk::AUIOElement::GetAudioChannelLayout(ausdk::AUIOElement *this, AudioChannelLayout *a2, BOOL *a3)
{
  *a3 = 1;
  if (!sub_1A67366C0(*((_DWORD **)this + 15))) {
    return 0;
  }
  int v5 = (_DWORD *)*((void *)this + 15);
  int v6 = v5[2];
  uint64_t v7 = (20 * v6 + 12);
  if (a2 && 20 * v6 != -12) {
    memcpy(a2, v5, (20 * v6 + 12));
  }
  return v7;
}

uint64_t ausdk::AUIOElement::SetAudioChannelLayout(ausdk::AUIOElement *this, AudioChannelLayout *a2)
{
  int v4 = *((_DWORD *)this + 27);
  if (v4 != sub_1A67366C0(a2)) {
    return 4294956445;
  }
  unint64_t v5 = 20 * a2->mNumberChannelDescriptions + 12;
  BOOL v6 = (v5 & 0x1C) == 0;
  unint64_t v7 = v5 >> 5;
  if (v6) {
    unint64_t v8 = v7;
  }
  else {
    unint64_t v8 = v7 + 1;
  }
  sub_1A6737410(__dst, v8);
  memcpy(__dst[0], a2, 20 * a2->mNumberChannelDescriptions + 12);
  float v9 = (void *)*((void *)this + 15);
  if (v9)
  {
    *((void *)this + 16) = v9;
    operator delete(v9);
  }
  uint64_t result = 0;
  *(_OWORD *)((char *)this + 120) = *(_OWORD *)__dst;
  *((void *)this + 17) = v12;
  return result;
}

uint64_t ausdk::AUIOElement::RemoveAudioChannelLayout(ausdk::AUIOElement *this)
{
  sub_1A6737410(&v5, 1uLL);
  uint64_t v2 = v5;
  void *v5 = 0;
  *((_DWORD *)v2 + 2) = 0;
  int v3 = (void *)*((void *)this + 15);
  if (v3)
  {
    *((void *)this + 16) = v3;
    operator delete(v3);
    uint64_t v2 = v5;
  }
  *((void *)this + 15) = v2;
  *((_OWORD *)this + 8) = v6;
  return 0;
}

void **ausdk::AUScope::SetNumberOfElements(ausdk::AUScope *this, unsigned int a2)
{
  uint64_t result = (void **)*((void *)this + 5);
  if (result)
  {
    int v4 = (uint64_t (*)(void))*((void *)*result + 2);
    return (void **)v4();
  }
  else
  {
    unint64_t v5 = a2;
    uint64_t v6 = *((void *)this + 3);
    unint64_t v7 = (void *)((char *)this + 16);
    unint64_t v8 = (v6 - *((void *)this + 2)) >> 3;
    if (v8 >= a2)
    {
      if (v8 > a2)
      {
        int v20 = (void ***)(v6 - 8);
        uint64_t v21 = v6 - 8;
        do
        {
          uint64_t result = *v20;
          *int v20 = 0;
          if (result) {
            uint64_t result = (void **)(*((uint64_t (**)(void **))*result + 1))(result);
          }
          *((void *)this + 3) = v20;
          uint64_t v22 = v21 - *((void *)this + 2);
          v21 -= 8;
          --v20;
        }
        while (v5 < v22 >> 3);
      }
    }
    else
    {
      uint64_t result = sub_1A673AB50((uint64_t *)this + 2, a2);
      if ((uint64_t)(*((void *)this + 3) - *((void *)this + 2)) >> 3 < v5)
      {
        do
        {
          (*(void (**)(void ***__return_ptr))(**(void **)this + 416))(&v23);
          unsigned int v10 = (void ***)*((void *)this + 3);
          unint64_t v9 = *((void *)this + 4);
          if ((unint64_t)v10 >= v9)
          {
            uint64_t v13 = ((uint64_t)v10 - *v7) >> 3;
            if ((unint64_t)(v13 + 1) >> 61) {
              sub_1A66E9D7C();
            }
            uint64_t v14 = v9 - *v7;
            uint64_t v15 = v14 >> 2;
            if (v14 >> 2 <= (unint64_t)(v13 + 1)) {
              uint64_t v15 = v13 + 1;
            }
            if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v16 = v15;
            }
            v24[4] = (char *)this + 32;
            if (v16) {
              uint64_t v17 = (char *)sub_1A66F9BE8((uint64_t)this + 32, v16);
            }
            else {
              uint64_t v17 = 0;
            }
            unsigned int v18 = (void ***)&v17[8 * v13];
            v24[0] = v17;
            v24[1] = v18;
            v24[3] = &v17[8 * v16];
            uint64_t v19 = v23;
            uint64_t v23 = 0;
            *unsigned int v18 = v19;
            v24[2] = v18 + 1;
            sub_1A673B3CC((uint64_t *)this + 2, v24);
            uint64_t v12 = (void *)*((void *)this + 3);
            sub_1A673B57C(v24);
          }
          else
          {
            unsigned int v11 = v23;
            uint64_t v23 = 0;
            const void *v10 = v11;
            uint64_t v12 = v10 + 1;
            *((void *)this + 3) = v12;
          }
          *((void *)this + 3) = v12;
          uint64_t result = v23;
          uint64_t v23 = 0;
          if (result)
          {
            uint64_t result = (void **)(*((uint64_t (**)(void **))*result + 1))(result);
            uint64_t v12 = (void *)*((void *)this + 3);
          }
        }
        while (((uint64_t)v12 - *v7) >> 3 < v5);
      }
    }
  }
  return result;
}

void sub_1A673AB00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  _Unwind_Resume(exception_object);
}

void **sub_1A673AB50(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 3)
  {
    if (a2 >> 61) {
      sub_1A66E9D7C();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_1A66F9BE8((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    void v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 8 * v6;
    sub_1A673B3CC(a1, v7);
    return sub_1A673B57C(v7);
  }
  return result;
}

void sub_1A673ABD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1A673B57C((void **)va);
  _Unwind_Resume(a1);
}

BOOL ausdk::AUScope::HasElementWithName(ausdk::AUScope *this)
{
  for (unsigned int i = 0; ; ++i)
  {
    uint64_t v3 = *((void *)this + 5);
    if (v3) {
      LODWORD(v4) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24))(v3);
    }
    else {
      uint64_t v4 = (*((void *)this + 3) - *((void *)this + 2)) >> 3;
    }
    if (i >= v4) {
      break;
    }
    uint64_t v5 = sub_1A66F3F00((uint64_t)this, i);
    if (v5)
    {
      if (*(void *)(v5 + 72)) {
        break;
      }
    }
  }
  return i < v4;
}

void ausdk::AUScope::AddElementNamesToDict(ausdk::AUScope *this, __CFDictionary *a2)
{
  if (ausdk::AUScope::HasElementWithName(this))
  {
    uint64_t v4 = 0;
    CFDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    while (1)
    {
      uint64_t v5 = *((void *)this + 5);
      if (v5) {
        LODWORD(v6) = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
      }
      else {
        uint64_t v6 = (*((void *)this + 3) - *((void *)this + 2)) >> 3;
      }
      if (v4 >= v6) {
        break;
      }
      uint64_t v7 = sub_1A66F3F00((uint64_t)this, v4);
      uint64_t v8 = v7;
      if (v7)
      {
        if (*(void *)(v7 + 72))
        {
          CFStringRef v9 = CFStringCreateWithFormat(0, 0, @"%u", v4);
          unsigned int v10 = (__CFDictionary *)Mutable;
          float value = *(void **)(v8 + 72);
          CFStringRef v12 = v9;
          sub_1A67373EC((CFTypeRef *)&value);
          CFDictionarySetValue(v10, v9, value);
          sub_1A670255C((const void **)&value);
          sub_1A670255C((const void **)&v12);
        }
      }
      uint64_t v4 = (v4 + 1);
    }
    CFStringRef v12 = CFStringCreateWithFormat(0, 0, @"%u", *((unsigned int *)this + 2));
    CFDictionarySetValue(a2, v12, Mutable);
    sub_1A670255C((const void **)&v12);
    sub_1A6738870((const void **)&Mutable);
  }
}

void sub_1A673ADEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, const void *);
  sub_1A670255C((const void **)va);
  sub_1A6738870((const void **)va1);
  _Unwind_Resume(a1);
}

void ausdk::AUScope::RestoreElementNames(ausdk::AUScope *this@<X0>, const __CFDictionary *a2@<X1>, char **a3@<X8>)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = *((void *)this + 5);
  if (v6) {
    LODWORD(v7) = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
  }
  else {
    uint64_t v7 = (*((void *)this + 3) - *((void *)this + 2)) >> 3;
  }
  CFIndex Count = CFDictionaryGetCount(a2);
  unint64_t v9 = Count & ~(Count >> 63);
  sub_1A673B628(keys, v9);
  CFDictionaryGetKeysAndValues(a2, (const void **)keys[0], 0);
  if (Count >= 1)
  {
    uint64_t v10 = 0;
    do
    {
      unsigned int v26 = 0;
      *(_OWORD *)buffer = 0u;
      long long v29 = 0u;
      CFStringGetCString((CFStringRef)keys[0][v10], buffer, 32, 0x600u);
      if (sscanf(buffer, "%u", &v26))
      {
        if (v26 < v7)
        {
          CFNumberRef Value = CFDictionaryGetValue(a2, keys[0][v10]);
          CFStringRef v12 = Value;
          if (Value)
          {
            CFTypeID v13 = CFGetTypeID(Value);
            if (v13 == CFStringGetTypeID())
            {
              uint64_t v14 = sub_1A66F3F00((uint64_t)this, v26);
              if (v14)
              {
                sub_1A6733BDC((const void **)(v14 + 72), v12);
                unint64_t v16 = a3[1];
                unint64_t v15 = (unint64_t)a3[2];
                if ((unint64_t)v16 >= v15)
                {
                  unsigned int v18 = *a3;
                  uint64_t v19 = (v16 - *a3) >> 2;
                  unint64_t v20 = v19 + 1;
                  if ((unint64_t)(v19 + 1) >> 62) {
                    sub_1A66E9D7C();
                  }
                  uint64_t v21 = v15 - (void)v18;
                  if (v21 >> 1 > v20) {
                    unint64_t v20 = v21 >> 1;
                  }
                  if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v22 = v20;
                  }
                  if (v22)
                  {
                    uint64_t v23 = (char *)sub_1A66ED9D4((uint64_t)(a3 + 2), v22);
                    unsigned int v18 = *a3;
                    unint64_t v16 = a3[1];
                  }
                  else
                  {
                    uint64_t v23 = 0;
                  }
                  uint64_t v24 = &v23[4 * v19];
                  *(_DWORD *)uint64_t v24 = v26;
                  uint64_t v17 = v24 + 4;
                  while (v16 != v18)
                  {
                    int v25 = *((_DWORD *)v16 - 1);
                    v16 -= 4;
                    *((_DWORD *)v24 - 1) = v25;
                    v24 -= 4;
                  }
                  *a3 = v24;
                  a3[1] = v17;
                  a3[2] = &v23[4 * v22];
                  if (v18) {
                    operator delete(v18);
                  }
                }
                else
                {
                  *(_DWORD *)unint64_t v16 = v26;
                  uint64_t v17 = v16 + 4;
                }
                a3[1] = v17;
              }
            }
          }
        }
      }
      ++v10;
    }
    while (v10 != v9);
  }
  if (keys[0])
  {
    keys[1] = keys[0];
    operator delete(keys[0]);
  }
}

void sub_1A673B0A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  unint64_t v15 = *(void **)v13;
  if (*(void *)v13)
  {
    *(void *)(v13 + 8) = v15;
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

UInt8 *ausdk::AUScope::SaveState(ausdk::AUScope *this, __CFData *a2)
{
  uint64_t result = (UInt8 *)*((void *)this + 5);
  if (result)
  {
    uint64_t result = (UInt8 *)(*(uint64_t (**)(UInt8 *))(*(void *)result + 24))(result);
    LODWORD(v5) = result;
    if (!result) {
      return result;
    }
  }
  else
  {
    uint64_t v5 = (*((void *)this + 3) - *((void *)this + 2)) >> 3;
    if (!v5) {
      return result;
    }
  }
  unsigned int v6 = 0;
  do
  {
    uint64_t v7 = (ausdk::AUElement *)sub_1A66F3F00((uint64_t)this, v6);
    uint64_t result = (UInt8 *)(*(uint64_t (**)(ausdk::AUElement *))(*(void *)v7 + 16))(v7);
    if (result)
    {
      *(_DWORD *)bytes = bswap32(*((_DWORD *)this + 2));
      CFDataAppendBytes(a2, bytes, 4);
      *(_DWORD *)uint64_t v8 = bswap32(v6);
      CFDataAppendBytes(a2, v8, 4);
      uint64_t result = ausdk::AUElement::SaveState(v7, *((_DWORD *)this + 2), a2);
    }
    ++v6;
  }
  while (v5 != v6);
  return result;
}

unsigned int *ausdk::AUScope::RestoreState(ausdk::AUScope *this, const unsigned __int8 *a2)
{
  uint64_t v3 = a2 + 4;
  uint64_t v4 = (ausdk::AUElement *)sub_1A66F3F00((uint64_t)this, bswap32(*(_DWORD *)a2));
  if (!v4) {
    return (unsigned int *)&a2[8 * bswap32(*((_DWORD *)a2 + 1)) + 8];
  }

  return ausdk::AUElement::RestoreState(v4, v3);
}

void sub_1A673B264(uint64_t a1)
{
  sub_1A67024F8(a1);

  JUMPOUT(0x1AD0C0C70);
}

uint64_t sub_1A673B29C()
{
  return 0;
}

void sub_1A673B2A4(uint64_t a1, unint64_t a2)
{
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v4 = a1 + 16;
  uint64_t v5 = v6;
  uint64_t v7 = *(unsigned int **)(v4 - 8);
  if (a2 <= (v6 - (uint64_t)v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += a2;
    }
    *(void *)(a1 + 8) = v7;
  }
  else
  {
    uint64_t v8 = *(unsigned int **)a1;
    uint64_t v9 = (uint64_t)v7 - *(void *)a1;
    unint64_t v10 = a2 + (v9 >> 2);
    if (v10 >> 62) {
      sub_1A66E9D7C();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = v5 - (void)v8;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      uint64_t v14 = (char *)sub_1A66ED9D4(v4, v13);
      uint64_t v8 = *(unsigned int **)a1;
      uint64_t v7 = *(unsigned int **)(a1 + 8);
    }
    else
    {
      uint64_t v14 = 0;
    }
    unint64_t v15 = &v14[4 * v11];
    unint64_t v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    uint64_t v17 = &v15[4 * a2];
    if (v7 != v8)
    {
      do
      {
        unsigned int v18 = atomic_load(--v7);
        *((_DWORD *)v15 - 1) = v18;
        v15 -= 4;
      }
      while (v7 != v8);
      uint64_t v8 = *(unsigned int **)a1;
    }
    *(void *)a1 = v15;
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

uint64_t sub_1A673B3CC(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1A673B444((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1A673B444(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  _OWORD v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    uint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_1A673B4DC((uint64_t)v13);
  return v11;
}

uint64_t sub_1A673B4DC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1A673B514((void *)a1);
  }
  return a1;
}

void *sub_1A673B514(void *result)
{
  uint64_t v1 = *(void ***)(result[2] + 8);
  uint64_t v2 = *(void ***)(result[1] + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    void *v1 = 0;
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
    ++v1;
  }
  return result;
}

void **sub_1A673B57C(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *sub_1A673B5B4(void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      int v4[2] = v2 - 8;
      uint64_t result = *(void **)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

void *sub_1A673B628(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1A673B6A0(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1A673B684(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1A673B6A0(void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_1A66E9D7C();
  }
  uint64_t result = (char *)sub_1A66F9BE8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

_DWORD *sub_1A673B6E4(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v4 = (_DWORD *)a2;
  uint64_t v7 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v8 = (a2 - *a1) >> 3;
  unint64_t v11 = a1[2];
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = v11;
  if (v6 >= v11)
  {
    unint64_t v13 = ((uint64_t)(v6 - v7) >> 3) + 1;
    if (v13 >> 61) {
      sub_1A66E9D7C();
    }
    uint64_t v14 = v10 - v7;
    if (v14 >> 2 > v13) {
      unint64_t v13 = v14 >> 2;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    uint64_t v23 = v9;
    if (v15) {
      long long v16 = (char *)sub_1A66F9BE8(v9, v15);
    }
    else {
      long long v16 = 0;
    }
    std::string __p = v16;
    unint64_t v20 = &v16[8 * v8];
    uint64_t v21 = v20;
    unint64_t v22 = &v16[8 * v15];
    sub_1A673B8EC(&__p, a3);
    uint64_t v4 = (_DWORD *)sub_1A673BA28(a1, &__p, v4);
    if (v21 != v20) {
      v21 += (v20 - v21 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (a2 == v6)
  {
    *(_DWORD *)a2 = *a3;
    unsigned int v17 = atomic_load(a3 + 1);
    *(_DWORD *)(v7 + 8 * v8 + 4) = v17;
    a1[1] = a2 + 8;
  }
  else
  {
    sub_1A673B878((uint64_t)a1, a2, v6, (char *)(a2 + 8));
    _DWORD *v4 = *a3;
    unsigned int v12 = atomic_load(a3 + 1);
    atomic_store(v12, (unsigned int *)(v7 + 8 * v8 + 4));
  }
  return v4;
}

void sub_1A673B840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1A673B878(uint64_t result, uint64_t a2, unint64_t a3, char *a4)
{
  uint64_t v4 = *(char **)(result + 8);
  uint64_t v5 = v4 - a4;
  unint64_t v6 = (_DWORD *)(a2 + v4 - a4);
  uint64_t v7 = v4;
  while ((unint64_t)v6 < a3)
  {
    uint64_t v8 = v6 + 1;
    int v9 = *v6;
    v6 += 2;
    *(_DWORD *)uint64_t v7 = v9;
    LODWORD(v8) = atomic_load(v8);
    *((_DWORD *)v7 + 1) = v8;
    v7 += 8;
  }
  *(void *)(result + 8) = v7;
  if (v4 != a4)
  {
    unint64_t v10 = (unsigned int *)(v4 - 4);
    uint64_t v11 = 8 * (v5 >> 3);
    do
    {
      *(v10 - 1) = *(_DWORD *)(a2 + v11 - 8);
      unsigned int v12 = atomic_load((unsigned int *)(a2 + v11 - 4));
      atomic_store(v12, v10);
      v10 -= 2;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

void sub_1A673B8EC(void *a1, _DWORD *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    unint64_t v6 = (char *)*a1;
    uint64_t v5 = (char *)a1[1];
    uint64_t v7 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == v6) {
        unint64_t v15 = 1;
      }
      else {
        unint64_t v15 = (v4 - v6) >> 2;
      }
      long long v16 = (char *)sub_1A66F9BE8(a1[4], v15);
      unsigned int v18 = &v16[8 * (v15 >> 2)];
      uint64_t v19 = (_DWORD *)a1[1];
      uint64_t v4 = v18;
      uint64_t v20 = a1[2] - (void)v19;
      if (v20)
      {
        uint64_t v4 = &v18[v20];
        uint64_t v21 = &v16[8 * (v15 >> 2)];
        do
        {
          unint64_t v22 = v19 + 1;
          int v23 = *v19;
          v19 += 2;
          *(_DWORD *)uint64_t v21 = v23;
          LODWORD(v22) = atomic_load(v22);
          *((_DWORD *)v21 + 1) = v22;
          v21 += 8;
        }
        while (v21 != v4);
      }
      uint64_t v24 = (char *)*a1;
      *a1 = v16;
      a1[1] = v18;
      a1[2] = v4;
      a1[3] = &v16[8 * v17];
      if (v24)
      {
        operator delete(v24);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v8 = v7 >> 3;
      BOOL v9 = v7 >> 3 < -1;
      uint64_t v10 = (v7 >> 3) + 2;
      if (!v9) {
        uint64_t v10 = v8 + 1;
      }
      if (v5 == v4)
      {
        uint64_t v14 = &v5[-8 * (v10 >> 1)];
      }
      else
      {
        do
        {
          uint64_t v11 = &v5[-8 * (v10 >> 1)];
          unsigned int v12 = (unsigned int *)(v5 + 4);
          int v13 = *(_DWORD *)v5;
          v5 += 8;
          *(_DWORD *)uint64_t v11 = v13;
          LODWORD(v12) = atomic_load(v12);
          atomic_store(v12, (unsigned int *)v11 + 1);
        }
        while (v5 != v4);
        uint64_t v4 = (char *)a1[1];
        uint64_t v14 = &v5[-8 * (v10 >> 1)];
      }
      a1[1] = &v4[-8 * (v10 >> 1)];
      a1[2] = v14;
      uint64_t v4 = v14;
    }
  }
  *(_DWORD *)uint64_t v4 = *a2;
  unsigned int v25 = atomic_load(a2 + 1);
  *((_DWORD *)v4 + 1) = v25;
  a1[2] += 8;
}

uint64_t sub_1A673BA28(void *a1, void *a2, _DWORD *a3)
{
  uint64_t result = a2[1];
  uint64_t v5 = (_DWORD *)*a1;
  uint64_t v6 = result;
  if ((_DWORD *)*a1 != a3)
  {
    uint64_t v7 = a3;
    uint64_t v6 = a2[1];
    do
    {
      int v8 = *(v7 - 2);
      v7 -= 2;
      *(_DWORD *)(v6 - 8) = v8;
      v6 -= 8;
      unsigned int v9 = atomic_load(v7 + 1);
      *(_DWORD *)(v6 + 4) = v9;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  uint64_t v10 = (_DWORD *)a1[1];
  uint64_t v11 = (_DWORD *)a2[2];
  if (v10 != a3)
  {
    do
    {
      unsigned int v12 = a3 + 1;
      int v13 = *a3;
      a3 += 2;
      *uint64_t v11 = v13;
      LODWORD(v12) = atomic_load(v12);
      v11[1] = v12;
      v11 += 2;
    }
    while (a3 != v10);
    uint64_t v6 = a2[1];
  }
  a2[2] = v11;
  uint64_t v14 = (_DWORD *)*a1;
  *a1 = v6;
  a2[1] = v14;
  uint64_t v15 = a1[1];
  a1[1] = a2[2];
  a2[2] = v15;
  uint64_t v16 = a1[2];
  a1[2] = a2[3];
  a2[3] = v16;
  *a2 = a2[1];
  return result;
}

uint64_t (***ausdk::BufferAllocator::instance(ausdk::BufferAllocator *this))()
{
  return &off_1EC39FF30;
}

void sub_1A673BB90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A673BF90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1A673C044(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = NSString;
  uint64_t v6 = objc_msgSend_escapedPatternForString_(MEMORY[0x1E4F28FD8], a2, @"[[SSMLESCAPED]]", a4, a5);
  uint64_t v10 = objc_msgSend_escapedPatternForString_(MEMORY[0x1E4F28FD8], v7, @"[[[SSMLESCAPED]]]", v8, v9);
  uint64_t v14 = objc_msgSend_stringWithFormat_(v5, v11, @"%@(?<enclosedssml>((.|\\n)*?))%@", v12, v13, v6, v10);

  id v39 = 0;
  uint64_t v16 = objc_msgSend_regularExpressionWithPattern_options_error_(MEMORY[0x1E4F28FD8], v15, (uint64_t)v14, 1, (uint64_t)&v39);
  id v17 = v39;
  unsigned int v18 = (void *)qword_1E96C4950;
  qword_1E96C4950 = v16;

  if (v17)
  {
    unint64_t v22 = AXTTSLogCommon();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
      sub_1A6891588((uint64_t)v17, v22);
    }
  }
  int v23 = NSString;
  uint64_t v24 = objc_msgSend_escapedPatternForString_(MEMORY[0x1E4F28FD8], v19, @"[[SSMLESCAPED]]", v20, v21);
  long long v28 = objc_msgSend_escapedPatternForString_(MEMORY[0x1E4F28FD8], v25, @"[[[SSMLESCAPED]]]", v26, v27);
  uint64_t v32 = objc_msgSend_stringWithFormat_(v23, v29, @"(?<delimiter>(%@|%@))", v30, v31, v24, v28);

  id v38 = v17;
  uint64_t v34 = objc_msgSend_regularExpressionWithPattern_options_error_(MEMORY[0x1E4F28FD8], v33, (uint64_t)v32, 1, (uint64_t)&v38);
  id v35 = v38;

  uint64_t v36 = (void *)qword_1E96C4958;
  qword_1E96C4958 = v34;

  if (v35)
  {
    UInt32 v37 = AXTTSLogCommon();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR)) {
      sub_1A6891510((uint64_t)v35, v37);
    }
  }
}

void sub_1A673C218(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A673C26C()
{
  JUMPOUT(0x1A673C260);
}

void sub_1A673C278()
{
}

void sub_1A673C464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  _Block_object_dispose(&a23, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1A673C498(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1A673C4A8(uint64_t a1)
{
}

void sub_1A673C4B0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (*(unsigned char *)(a1 + 40)) {
    uint64_t v8 = v5;
  }
  else {
    uint64_t v8 = v6;
  }
  id v9 = v8;
  uint64_t v52 = v5;
  if (*(unsigned char *)(a1 + 40)) {
    uint64_t v10 = v7;
  }
  else {
    uint64_t v10 = v5;
  }
  id v11 = v10;
  int v53 = v9;
  uint64_t v16 = objc_msgSend_sharedInstance(TTSRegexCache, v12, v13, v14, v15);
  uint64_t v20 = objc_msgSend_escapedPatternForString_(MEMORY[0x1E4F28FD8], v17, (uint64_t)v9, v18, v19);
  uint64_t v24 = objc_msgSend_regexForString_(v16, v21, (uint64_t)v20, v22, v23);

  unsigned int v25 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  uint64_t v30 = objc_msgSend_length(v25, v26, v27, v28, v29);
  uint64_t v32 = objc_msgSend_matchesInString_options_range_(v24, v31, (uint64_t)v25, 0, 0, v30);
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  UInt32 v37 = objc_msgSend_reverseObjectEnumerator(v32, v33, v34, v35, v36);
  uint64_t v43 = objc_msgSend_countByEnumeratingWithState_objects_count_(v37, v38, (uint64_t)&v54, (uint64_t)v58, 16);
  if (v43)
  {
    uint64_t v44 = *(void *)v55;
    do
    {
      for (uint64_t i = 0; i != v43; ++i)
      {
        if (*(void *)v55 != v44) {
          objc_enumerationMutation(v37);
        }
        BOOL v46 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
        uint64_t v47 = objc_msgSend_range(*(void **)(*((void *)&v54 + 1) + 8 * i), v39, v40, v41, v42, v52);
        uint64_t v49 = objc_msgSend_stringByReplacingCharactersInRange_withString_(v46, v48, v47, (uint64_t)v48, (uint64_t)v11);
        uint64_t v50 = *(void *)(*(void *)(a1 + 32) + 8);
        uint64_t v51 = *(void **)(v50 + 40);
        *(void *)(v50 + 40) = v49;
      }
      uint64_t v43 = objc_msgSend_countByEnumeratingWithState_objects_count_(v37, v39, (uint64_t)&v54, (uint64_t)v58, 16);
    }
    while (v43);
  }
}

void sub_1A673C6C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A673C80C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A673CA3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A673CB8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A673CC84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A673CDF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A673D00C(_Unwind_Exception *a1)
{
  id v9 = v7;

  _Unwind_Resume(a1);
}

uint64_t CoreSynthesizer.Utterance.id.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

void CoreSynthesizer.Utterance.behavior.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 16);
}

void CoreSynthesizer.Utterance.isoPrioritizedBehavior.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 17);
}

void CoreSynthesizer.Utterance.replacementOptions.getter(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 24);
}

void CoreSynthesizer.Utterance.voice.getter(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 32);
  uint64_t v3 = *(void *)(v1 + 40);
  uint64_t v4 = *(void *)(v1 + 48);
  uint64_t v5 = *(void *)(v1 + 56);
  uint64_t v6 = *(void *)(v1 + 64);
  uint64_t v7 = *(void *)(v1 + 72);
  uint64_t v8 = *(void *)(v1 + 80);
  uint64_t v9 = *(void *)(v1 + 88);
  uint64_t v10 = *(void *)(v1 + 96);
  uint64_t v11 = *(void *)(v1 + 104);
  uint64_t v12 = *(void **)(v1 + 112);
  uint64_t v13 = *(void *)(v1 + 120);
  char v14 = *(unsigned char *)(v1 + 132);
  int v15 = *(_DWORD *)(v1 + 128);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  *(void *)(a1 + 56) = v9;
  *(void *)(a1 + 64) = v10;
  *(void *)(a1 + 72) = v11;
  *(void *)(a1 + 80) = v12;
  *(void *)(a1 + 88) = v13;
  *(unsigned char *)(a1 + 100) = v14;
  *(_DWORD *)(a1 + 96) = v15;
  sub_1A673D140(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12);
}

void sub_1A673D140(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v11 = a11;
  }
}

uint64_t CoreSynthesizer.Utterance.voiceSettings.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CoreSynthesizer.Utterance.voiceSettings.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 136) = a1;
  return result;
}

uint64_t (*CoreSynthesizer.Utterance.voiceSettings.modify())()
{
  return nullsub_19;
}

uint64_t CoreSynthesizer.Utterance.speech.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1A673D228(v1 + 144, a1);
}

uint64_t sub_1A673D228(uint64_t a1, uint64_t a2)
{
  return _s9UtteranceV6SpeechOwcp(a2, a1);
}

uint64_t CoreSynthesizer.Utterance.priority.getter()
{
  return *(void *)(v0 + 192);
}

uint64_t CoreSynthesizer.Utterance.externalTracingId.getter()
{
  return *(unsigned __int8 *)(v0 + 200);
}

uint64_t sub_1A673D248()
{
  return 0;
}

void sub_1A673D250(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void sub_1A673D258(void *a1@<X8>)
{
  *a1 = 1;
}

void static CoreSynthesizer.Utterance.ReplacementOptions.emoji.getter(void *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1A673D270@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v7 = *v5++;
      uint64_t v6 = v7;
      if ((v7 & ~v4) == 0) {
        uint64_t v6 = 0;
      }
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

_OWORD *CoreSynthesizer.Utterance.init(id:speech:voice:priority:behavior:isoPrioritizedBehavior:replacementOptions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X5>, char *a7@<X6>, uint64_t *a8@<X7>, uint64_t a9@<X8>)
{
  int v11 = *(_DWORD *)(a4 + 96);
  char v12 = *(unsigned char *)(a4 + 100);
  char v13 = *a6;
  char v14 = *a7;
  uint64_t v15 = *a8;
  *(void *)(a9 + 136) = 0;
  *(unsigned char *)(a9 + 16) = v13;
  *(void *)(a9 + 192) = a5;
  *(unsigned char *)(a9 + 17) = v14;
  *(void *)(a9 + 24) = v15;
  long long v16 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)a4;
  *(_OWORD *)(a9 + 48) = v16;
  long long v17 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(a9 + 80) = v17;
  long long v18 = *(_OWORD *)(a4 + 80);
  *(_OWORD *)(a9 + 96) = *(_OWORD *)(a4 + 64);
  *(_OWORD *)(a9 + 112) = v18;
  *(unsigned char *)(a9 + 132) = v12;
  *(_DWORD *)(a9 + 128) = v11;
  if (a2)
  {
    *(unsigned char *)(a9 + 200) = 1;
  }
  else
  {
    *(unsigned char *)(a9 + 200) = 0;
    a1 = sub_1A67E69AC(6);
  }
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;

  return sub_1A673E624(a3, (_OWORD *)(a9 + 144));
}

_OWORD *CoreSynthesizer.Utterance.init(id:ssml:voice:priority:behavior:isoPrioritizedBehavior:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X6>, char *a8@<X7>, uint64_t a9@<X8>)
{
  int v10 = *(_DWORD *)(a5 + 96);
  char v11 = *(unsigned char *)(a5 + 100);
  char v12 = *a7;
  char v13 = *a8;
  *(void *)&long long v18 = a3;
  *((void *)&v18 + 1) = a4;
  char v19 = 0;
  *(void *)(a9 + 136) = 0;
  *(unsigned char *)(a9 + 16) = v12;
  *(void *)(a9 + 192) = a6;
  *(unsigned char *)(a9 + 17) = v13;
  *(void *)(a9 + 24) = 1;
  long long v14 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)a5;
  *(_OWORD *)(a9 + 48) = v14;
  long long v15 = *(_OWORD *)(a5 + 48);
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(a5 + 32);
  *(_OWORD *)(a9 + 80) = v15;
  long long v16 = *(_OWORD *)(a5 + 80);
  *(_OWORD *)(a9 + 96) = *(_OWORD *)(a5 + 64);
  *(_OWORD *)(a9 + 112) = v16;
  *(unsigned char *)(a9 + 132) = v11;
  *(_DWORD *)(a9 + 128) = v10;
  if (a2)
  {
    *(unsigned char *)(a9 + 200) = 1;
  }
  else
  {
    *(unsigned char *)(a9 + 200) = 0;
    a1 = sub_1A67E69AC(6);
  }
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  return sub_1A673E624(&v18, (_OWORD *)(a9 + 144));
}

uint64_t CoreSynthesizer.Utterance.init(id:voice:priority:behavior:isoPrioritizedBehavior:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, char *a6@<X5>, void (*a7)(void *__return_ptr)@<X6>, _OWORD *a8@<X8>)
{
  uint64_t v11 = a3[1];
  uint64_t v37 = a3[2];
  uint64_t v38 = *a3;
  uint64_t v35 = a3[4];
  uint64_t v36 = a3[3];
  uint64_t v33 = a3[6];
  uint64_t v34 = a3[5];
  uint64_t v31 = a3[8];
  uint64_t v32 = a3[7];
  uint64_t v29 = a3[10];
  uint64_t v30 = a3[9];
  uint64_t v28 = a3[11];
  unint64_t v12 = *((unsigned int *)a3 + 24) | ((unint64_t)*((unsigned __int8 *)a3 + 100) << 32);
  char v13 = *a5;
  char v14 = *a6;
  a7(v52);
  uint64_t v15 = v53;
  uint64_t v16 = v54;
  sub_1A673E63C(v52, v53);
  TTSMarkupSpeech.ssmlTag.getter(v15, v16);
  LOBYTE(v50[0]) = 0;
  sub_1A673E680();
  uint64_t v17 = sub_1A6891FC0();
  if ((v17 & 1) == 0)
  {
    MEMORY[0x1F4188790](v17);
    *((void *)&v40 + 1) = &type metadata for TTSMarkup.SpeechDocument;
    *(void *)&long long v41 = &protocol witness table for TTSMarkup.SpeechDocument;
    *(void *)&long long v39 = swift_allocObject();
    TTSMarkup.SpeechDocument.init(_:)((uint64_t (*)(void))sub_1A673E6D4, (void *)(v39 + 16));
    sub_1A6741A24((uint64_t)v52);
    sub_1A673E770(&v39, (uint64_t)v52);
  }
  sub_1A673E788((uint64_t)v52, (uint64_t)v50);
  char v51 = 2;
  LOBYTE(v40) = v13;
  *((void *)&v47 + 1) = 0;
  *(void *)&v49[1] = a4;
  BYTE1(v40) = v14;
  *((void *)&v40 + 1) = 1;
  *(void *)&long long v41 = v38;
  *((void *)&v41 + 1) = v11;
  *(void *)&long long v42 = v37;
  *((void *)&v42 + 1) = v36;
  *(void *)&long long v43 = v35;
  *((void *)&v43 + 1) = v34;
  *(void *)&long long v44 = v33;
  *((void *)&v44 + 1) = v32;
  *(void *)&long long v45 = v31;
  *((void *)&v45 + 1) = v30;
  *(void *)&long long v46 = v29;
  *((void *)&v46 + 1) = v28;
  BYTE4(v47) = BYTE4(v12);
  LODWORD(v47) = v12;
  if (a2)
  {
    BYTE8(v49[1]) = 1;
    uint64_t v18 = a1;
  }
  else
  {
    BYTE8(v49[1]) = 0;
    uint64_t v18 = sub_1A67E69AC(6);
    a2 = v19;
  }
  *(void *)&long long v39 = v18;
  *((void *)&v39 + 1) = a2;
  sub_1A673E624(v50, v48);
  long long v20 = v49[0];
  a8[10] = v48[1];
  a8[11] = v20;
  *(_OWORD *)((char *)a8 + 185) = *(_OWORD *)((char *)v49 + 9);
  long long v21 = v46;
  a8[6] = v45;
  a8[7] = v21;
  long long v22 = v48[0];
  a8[8] = v47;
  a8[9] = v22;
  long long v23 = v42;
  a8[2] = v41;
  a8[3] = v23;
  long long v24 = v44;
  a8[4] = v43;
  a8[5] = v24;
  long long v25 = v40;
  *a8 = v39;
  a8[1] = v25;
  return sub_1A6741A24((uint64_t)v52);
}

Swift::String __swiftcall CoreSynthesizer.Utterance.asPlainText()()
{
  sub_1A673D228(v0 + 144, (uint64_t)v9);
  if (v10)
  {
    if (v10 == 1)
    {
      object = (void *)*((void *)&v9[0] + 1);
      uint64_t countAndFlagsBits = *(void *)&v9[0];
    }
    else
    {
      sub_1A673E770(v9, (uint64_t)v8);
      sub_1A673E63C(v8, v8[3]);
      Swift::String v3 = TTSMarkupSpeech.asPlainText()();
      uint64_t countAndFlagsBits = v3._countAndFlagsBits;
      object = v3._object;
      sub_1A6741A24((uint64_t)v8);
    }
  }
  else
  {
    TTSMarkup.SpeechDocument.init(ssml:)((uint64_t)v8);
    Swift::String v4 = TTSMarkupSpeech.asPlainText()();
    uint64_t countAndFlagsBits = v4._countAndFlagsBits;
    object = v4._object;
    sub_1A673E7EC((uint64_t)v8);
  }
  uint64_t v5 = countAndFlagsBits;
  uint64_t v6 = object;
  result._object = v6;
  result._uint64_t countAndFlagsBits = v5;
  return result;
}

uint64_t sub_1A673D78C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[29] = a2;
  v3[30] = a3;
  v3[28] = a1;
  uint64_t v4 = sub_1A6891CE0();
  v3[31] = v4;
  v3[32] = *(void *)(v4 - 8);
  v3[33] = swift_task_alloc();
  v3[34] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_1A673D860, 0, 0);
}

uint64_t sub_1A673D860()
{
  id v1 = objc_msgSend(*(id *)(v0 + 232), sel_voice);
  *(void *)(v0 + 280) = v1;
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 240);
    id v3 = objc_msgSend(v1, sel_identifier);
    uint64_t v4 = sub_1A6892000();
    uint64_t v6 = v5;

    *(void *)(v0 + 288) = v6;
    long long v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v2 + 264)
                                                            + **(int **)(*(void *)v2 + 264));
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 296) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_1A673DB14;
    return v22(v0 + 16, v4, v6);
  }
  else
  {
    uint64_t v9 = *(void *)(v0 + 272);
    uint64_t v10 = *(void *)(v0 + 248);
    uint64_t v11 = *(void *)(v0 + 256);
    uint64_t v12 = sub_1A6748FEC();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v9, v12, v10);
    char v13 = sub_1A6891CC0();
    os_log_type_t v14 = sub_1A6892850();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl(&dword_1A66D3000, v13, v14, "Utterance had no voice!", v15, 2u);
      MEMORY[0x1AD0C1C50](v15, -1, -1);
    }
    uint64_t v16 = *(void *)(v0 + 272);
    uint64_t v17 = *(void *)(v0 + 248);
    uint64_t v18 = *(void *)(v0 + 256);
    uint64_t v19 = *(void **)(v0 + 232);

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
    long long v20 = *(_OWORD **)(v0 + 224);
    *(_OWORD *)((char *)v20 + 185) = 0u;
    v20[10] = 0u;
    v20[11] = 0u;
    v20[8] = 0u;
    v20[9] = 0u;
    v20[6] = 0u;
    v20[7] = 0u;
    v20[4] = 0u;
    v20[5] = 0u;
    v20[2] = 0u;
    v20[3] = 0u;
    *long long v20 = 0u;
    v20[1] = 0u;
    swift_task_dealloc();
    swift_task_dealloc();
    long long v21 = *(uint64_t (**)(void))(v0 + 8);
    return v21();
  }
}

uint64_t sub_1A673DB14()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4188298](sub_1A673DC2C, 0, 0);
}

uint64_t sub_1A673DC2C()
{
  uint64_t v64 = v0;
  uint64_t v1 = *(void *)(v0 + 24);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 16);
    uint64_t v4 = *(void *)(v0 + 32);
    uint64_t v3 = *(void *)(v0 + 40);
    uint64_t v6 = *(void *)(v0 + 48);
    uint64_t v5 = *(void *)(v0 + 56);
    log = (long long *)(v0 + 168);
    uint64_t v57 = *(void *)(v0 + 72);
    uint64_t v52 = *(void *)(v0 + 80);
    uint64_t v53 = *(void *)(v0 + 64);
    uint64_t v7 = *(void *)(v0 + 104);
    uint64_t v50 = *(void **)(v0 + 96);
    uint64_t v51 = *(void *)(v0 + 88);
    unint64_t v49 = *(unsigned int *)(v0 + 112) | ((unint64_t)*(unsigned __int8 *)(v0 + 116) << 32);
    id v8 = objc_msgSend(*(id *)(v0 + 232), sel_ssmlRepresentation);
    uint64_t v60 = v5;
    uint64_t v61 = v0 + 120;
    uint64_t v54 = v3;
    uint64_t v59 = v6;
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = sub_1A6892000();
      uint64_t v12 = v11;

      char v13 = 0;
    }
    else
    {
      uint64_t v34 = *(void **)(v0 + 232);
      id v35 = objc_msgSend(v34, sel_speechString);
      uint64_t v10 = sub_1A6892000();
      uint64_t v12 = v36;

      objc_msgSend(v34, sel_rate);
      int v38 = v37;
      objc_msgSend(v34, sel_pitchMultiplier);
      int v40 = v39;
      objc_msgSend(v34, sel_volume);
      *(_DWORD *)(v0 + 136) = v38;
      *(unsigned char *)(v0 + 140) = 0;
      *(_DWORD *)(v0 + 144) = v40;
      *(unsigned char *)(v0 + 148) = 0;
      *(_DWORD *)(v0 + 152) = v41;
      char v13 = 1;
      *(unsigned char *)(v0 + 156) = 0;
    }
    uint64_t v42 = *(void *)(v0 + 224);
    long long v47 = *(void **)(v0 + 232);
    unsigned int v48 = *(void **)(v0 + 280);
    *(void *)(v0 + 120) = v10;
    *(void *)(v0 + 128) = v12;
    *(unsigned char *)(v0 + 160) = v13;
    sub_1A673D228(v61, (uint64_t)log);
    *(void *)(v42 + 136) = 0;
    *(_WORD *)(v42 + 16) = 0;
    *(void *)(v42 + 192) = 10;
    *(void *)(v42 + 24) = 1;
    *(void *)(v42 + 32) = v2;
    *(void *)(v42 + 40) = v1;
    *(void *)(v42 + 48) = v4;
    *(void *)(v42 + 56) = v54;
    *(void *)(v42 + 64) = v59;
    *(void *)(v42 + 72) = (unsigned __int16)v60;
    *(void *)(v42 + 80) = v53;
    *(void *)(v42 + 88) = v57;
    *(void *)(v42 + 96) = v52;
    *(void *)(v42 + 104) = v51;
    *(void *)(v42 + 112) = v50;
    *(void *)(v42 + 120) = v7 & 0x1FFFFFFFFLL;
    *(unsigned char *)(v42 + 132) = BYTE4(v49) & 1;
    *(_DWORD *)(v42 + 128) = v49;
    *(unsigned char *)(v42 + 200) = 0;
    sub_1A673D140(v2, v1, v4, v54, v59, v60, v53, v57, v52, v51, v50);
    *(void *)uint64_t v42 = sub_1A67E69AC(6);
    *(void *)(v42 + 8) = v43;
    sub_1A673E624(log, (_OWORD *)(v42 + 144));
    swift_release();

    sub_1A673FF60(v2, v1, v4, v54, v59, v60, v53, v57, v52, v51, v50);
    sub_1A673FFE4(v61);
  }
  else
  {
    os_log_type_t v14 = *(void **)(v0 + 280);
    uint64_t v16 = *(void *)(v0 + 256);
    uint64_t v15 = *(void *)(v0 + 264);
    uint64_t v17 = *(void *)(v0 + 248);
    uint64_t v18 = sub_1A6748FEC();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v15, v18, v17);
    id v19 = v14;
    long long v20 = sub_1A6891CC0();
    os_log_type_t v21 = sub_1A6892850();
    BOOL v22 = os_log_type_enabled(v20, v21);
    uint64_t v23 = *(void **)(v0 + 280);
    uint64_t v24 = *(void *)(v0 + 256);
    uint64_t v25 = *(void *)(v0 + 264);
    uint64_t v26 = *(void *)(v0 + 248);
    uint64_t v27 = *(void **)(v0 + 232);
    if (v22)
    {
      uint64_t v62 = *(void *)(v0 + 264);
      loga = v20;
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      uint64_t v63 = v29;
      *(_DWORD *)uint64_t v28 = 136315138;
      id v30 = objc_msgSend(v23, sel_identifier);
      uint64_t v58 = v26;
      uint64_t v31 = sub_1A6892000();
      unint64_t v33 = v32;

      *(void *)(v0 + 216) = sub_1A673F908(v31, v33, &v63);
      sub_1A6892A50();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A66D3000, loga, v21, "Could not resolve %s", v28, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AD0C1C50](v29, -1, -1);
      MEMORY[0x1AD0C1C50](v28, -1, -1);
      swift_release();

      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v62, v58);
    }
    else
    {

      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v25, v26);
    }
    long long v44 = *(_OWORD **)(v0 + 224);
    *(_OWORD *)((char *)v44 + 185) = 0u;
    v44[10] = 0u;
    v44[11] = 0u;
    v44[8] = 0u;
    v44[9] = 0u;
    v44[6] = 0u;
    v44[7] = 0u;
    v44[4] = 0u;
    v44[5] = 0u;
    v44[2] = 0u;
    v44[3] = 0u;
    *long long v44 = 0u;
    v44[1] = 0u;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  long long v45 = *(uint64_t (**)(void))(v0 + 8);
  return v45();
}

uint64_t sub_1A673E104()
{
  sub_1A673D228(v0, (uint64_t)v8);
  if (!v9 || v9 == 1) {
    return *(void *)&v8[0];
  }
  sub_1A673E770(v8, (uint64_t)v5);
  uint64_t v2 = v6;
  uint64_t v3 = v7;
  sub_1A673E63C(v5, v6);
  uint64_t v1 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 48))(v2, v3);
  sub_1A6741A24((uint64_t)v5);
  return v1;
}

uint64_t CoreSynthesizer.Utterance.Speech.hash(into:)()
{
  sub_1A673D228(v0, (uint64_t)v7);
  if (v8 && v8 != 1)
  {
    sub_1A673E770(v7, (uint64_t)v4);
    uint64_t v1 = v5;
    uint64_t v2 = v6;
    sub_1A673E63C(v4, v5);
    (*(void (**)(uint64_t, uint64_t))(v2 + 48))(v1, v2);
    sub_1A6741A24((uint64_t)v4);
  }
  sub_1A68920F0();
  return swift_bridgeObjectRelease();
}

uint64_t CoreSynthesizer.Utterance.Speech.hashValue.getter()
{
  sub_1A6893200();
  sub_1A673D228(v0, (uint64_t)v7);
  if (v8 && v8 != 1)
  {
    sub_1A673E770(v7, (uint64_t)v4);
    uint64_t v1 = v5;
    uint64_t v2 = v6;
    sub_1A673E63C(v4, v5);
    (*(void (**)(uint64_t, uint64_t))(v2 + 48))(v1, v2);
    sub_1A6741A24((uint64_t)v4);
  }
  sub_1A68920F0();
  swift_bridgeObjectRelease();
  return sub_1A6893250();
}

uint64_t sub_1A673E32C()
{
  sub_1A673E104();
  sub_1A68920F0();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1A673E37C()
{
  sub_1A6893200();
  sub_1A673D228(v0, (uint64_t)v7);
  if (v8 && v8 != 1)
  {
    sub_1A673E770(v7, (uint64_t)v4);
    uint64_t v1 = v5;
    uint64_t v2 = v6;
    sub_1A673E63C(v4, v5);
    (*(void (**)(uint64_t, uint64_t))(v2 + 48))(v1, v2);
    sub_1A6741A24((uint64_t)v4);
  }
  sub_1A68920F0();
  swift_bridgeObjectRelease();
  return sub_1A6893250();
}

uint64_t CoreSynthesizer.Utterance.ReplacementOptions.rawValue.getter()
{
  return *(void *)v0;
}

uint64_t CoreSynthesizer.Utterance.ReplacementOptions.init(rawValue:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

void *sub_1A673E454()
{
  return &unk_1A689D8F0;
}

void *sub_1A673E460@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1A673E46C()
{
  return sub_1A6893250();
}

uint64_t sub_1A673E4B4()
{
  return sub_1A6893210();
}

uint64_t sub_1A673E4E0()
{
  return sub_1A6893250();
}

BOOL sub_1A673E524(void *a1, void *a2)
{
  return *a1 == *a2;
}

void sub_1A673E538(void *a1@<X8>)
{
  *a1 = 0;
}

void *sub_1A673E540@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *sub_1A673E554@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *sub_1A673E568@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_1A673E57C(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *sub_1A673E5AC@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_1A673E5D8@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *sub_1A673E5FC(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_1A673E610(void *result)
{
  *v1 &= *result;
  return result;
}

_OWORD *sub_1A673E624(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(_OWORD *)((char *)a2 + 25) = *(long long *)((char *)a1 + 25);
  *a2 = v2;
  a2[1] = v3;
  return a2;
}

void *sub_1A673E63C(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_1A673E680()
{
  unint64_t result = qword_1E96C1B80;
  if (!qword_1E96C1B80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E96C1B80);
  }
  return result;
}

uint64_t sub_1A673E6D4@<X0>(uint64_t a1@<X8>)
{
  sub_1A673E788(*(void *)(v1 + 16), (uint64_t)v4);
  static TTSMarkup.SpeechBuilder.buildExpression(_:)(v5, v4);
  sub_1A6741A24((uint64_t)v4);
  static TTSMarkup.SpeechBuilder.buildBlock(_:)((uint64_t)v5, a1);
  return sub_1A6741A24((uint64_t)v5);
}

uint64_t sub_1A673E730()
{
  swift_bridgeObjectRelease();
  sub_1A6741A24(v0 + 24);

  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t sub_1A673E770(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_1A673E788(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1A673E7EC(uint64_t a1)
{
  return a1;
}

void *sub_1A673E840(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_1A673E854@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1A673E868(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_1A673E87C(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_1A673E890(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_1A673E8A4()
{
  return *v0 == 0;
}

uint64_t sub_1A673E8B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F4184B08](a1, a4, a2, a5, a3);
}

void *sub_1A673E8CC(void *result)
{
  *v1 &= ~*result;
  return result;
}

void *sub_1A673E8E0@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void sub_1A673E8F0(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t CoreSynthesizer.Utterance.ssml.getter()
{
  sub_1A673D228(v0 + 144, (uint64_t)&v8);
  if (!v10) {
    return v8;
  }
  if (v10 == 1)
  {
    MEMORY[0x1F4188790](v9);
    TTSMarkup.SpeechDocument.init(_:)((uint64_t (*)(void))sub_1A674031C, v5);
    swift_bridgeObjectRelease();
    uint64_t v1 = TTSMarkupSpeech.ssml.getter((uint64_t)&type metadata for TTSMarkup.SpeechDocument, (uint64_t)&protocol witness table for TTSMarkup.SpeechDocument);
    sub_1A673E7EC((uint64_t)v5);
  }
  else
  {
    sub_1A673E770(&v8, (uint64_t)v5);
    uint64_t v2 = v6;
    uint64_t v3 = v7;
    sub_1A673E63C(v5, v6);
    uint64_t v1 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 48))(v2, v3);
    sub_1A6741A24((uint64_t)v5);
  }
  return v1;
}

uint64_t CoreSynthesizer.Utterance.hash(into:)(uint64_t a1)
{
  swift_bridgeObjectRetain();
  sub_1A68920F0();
  swift_bridgeObjectRelease();
  LOBYTE(v20[0]) = *(unsigned char *)(v1 + 16);
  sub_1A6740490();
  sub_1A6891F20();
  LOBYTE(v20[0]) = *(unsigned char *)(v1 + 17);
  sub_1A67404E4();
  sub_1A6891F20();
  sub_1A6893210();
  uint64_t v3 = *(void *)(v1 + 40);
  if (!v3)
  {
    sub_1A6893220();
    uint64_t v13 = *(void *)(v1 + 136);
    if (v13) {
      goto LABEL_3;
    }
LABEL_5:
    sub_1A6893220();
    goto LABEL_6;
  }
  char v4 = *(unsigned char *)(v1 + 132);
  int v5 = *(_DWORD *)(v1 + 128);
  uint64_t v7 = *(void *)(v1 + 112);
  uint64_t v6 = *(void *)(v1 + 120);
  uint64_t v9 = *(void *)(v1 + 80);
  uint64_t v8 = *(void *)(v1 + 88);
  uint64_t v11 = *(void *)(v1 + 64);
  uint64_t v10 = *(void *)(v1 + 72);
  long long v12 = *(_OWORD *)(v1 + 48);
  *(void *)&v20[0] = *(void *)(v1 + 32);
  *((void *)&v20[0] + 1) = v3;
  v20[1] = v12;
  uint64_t v21 = v11;
  __int16 v22 = v10;
  uint64_t v23 = v9;
  char v24 = v8;
  long long v25 = *(_OWORD *)(v1 + 96);
  uint64_t v26 = v7;
  int v27 = v6;
  char v28 = BYTE4(v6) & 1;
  int v29 = v5;
  char v30 = v4 & 1;
  sub_1A6893220();
  sub_1A6740538();
  sub_1A6891F20();
  uint64_t v13 = *(void *)(v1 + 136);
  if (!v13) {
    goto LABEL_5;
  }
LABEL_3:
  sub_1A6893220();
  swift_bridgeObjectRetain();
  sub_1A674000C(a1, v13);
  swift_bridgeObjectRelease();
LABEL_6:
  sub_1A673D228(v1 + 144, (uint64_t)v20);
  if ((_BYTE)v22 && v22 != 1)
  {
    sub_1A673E770(v20, (uint64_t)v17);
    uint64_t v14 = v18;
    uint64_t v15 = v19;
    sub_1A673E63C(v17, v18);
    (*(void (**)(uint64_t, uint64_t))(v15 + 48))(v14, v15);
    sub_1A6741A24((uint64_t)v17);
  }
  sub_1A68920F0();
  swift_bridgeObjectRelease();
  sub_1A6893210();
  return sub_1A6893220();
}

uint64_t CoreSynthesizer.Utterance.hashValue.getter()
{
  sub_1A6893200();
  CoreSynthesizer.Utterance.hash(into:)((uint64_t)v1);
  return sub_1A6893250();
}

uint64_t sub_1A673ECD0()
{
  sub_1A6893200();
  CoreSynthesizer.Utterance.hash(into:)((uint64_t)v1);
  return sub_1A6893250();
}

uint64_t sub_1A673ED14()
{
  sub_1A6893200();
  CoreSynthesizer.Utterance.hash(into:)((uint64_t)v1);
  return sub_1A6893250();
}

uint64_t sub_1A673ED50@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A673ED60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[7] = a5;
  v6[8] = v5;
  v6[5] = a3;
  v6[6] = a4;
  _DWORD v6[3] = a1;
  void v6[4] = a2;
  v6[9] = swift_task_alloc();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6[10] = AssociatedTypeWitness;
  v6[11] = *(void *)(AssociatedTypeWitness - 8);
  v6[12] = swift_task_alloc();
  sub_1A6892A00();
  v6[13] = swift_task_alloc();
  v6[14] = *(void *)(a3 - 8);
  v6[15] = swift_task_alloc();
  uint64_t v9 = swift_getAssociatedTypeWitness();
  v6[16] = v9;
  v6[17] = *(void *)(v9 - 8);
  v6[18] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_1A673EF74, 0, 0);
}

uint64_t sub_1A673EF74()
{
  uint64_t v2 = v0[14];
  uint64_t v1 = v0[15];
  uint64_t v3 = v0[8];
  uint64_t v4 = v0[5];
  v0[2] = sub_1A6891E70();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v3, v4);
  sub_1A6892250();
  uint64_t v5 = v0[13];
  uint64_t v6 = v0[10];
  uint64_t v7 = v0[11];
  swift_getAssociatedConformanceWitness();
  sub_1A6892A40();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    (*(void (**)(void, void))(v0[17] + 8))(v0[18], v0[16]);
    uint64_t v8 = v0[2];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(uint64_t))v0[1];
    return v9(v8);
  }
  else
  {
    uint64_t v11 = (int *)v0[3];
    (*(void (**)(void, void, void))(v0[11] + 32))(v0[12], v0[13], v0[10]);
    uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t))((char *)v11 + *v11);
    long long v12 = (void *)swift_task_alloc();
    v0[19] = v12;
    void *v12 = v0;
    v12[1] = sub_1A673F1C4;
    uint64_t v13 = v0[12];
    uint64_t v14 = v0[9];
    return v15(v14, v13);
  }
}

uint64_t sub_1A673F1C4()
{
  *(void *)(*(void *)v1 + 160) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_1A673F51C;
  }
  else
  {
    uint64_t v2 = sub_1A673F2E0;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

uint64_t sub_1A673F2E0()
{
  uint64_t v2 = v0[11];
  uint64_t v1 = v0[12];
  uint64_t v3 = v0[10];
  sub_1A68923C0();
  sub_1A6892380();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = v0[13];
  uint64_t v5 = v0[10];
  uint64_t v6 = v0[11];
  swift_getAssociatedConformanceWitness();
  sub_1A6892A40();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    (*(void (**)(void, void))(v0[17] + 8))(v0[18], v0[16]);
    uint64_t v7 = v0[2];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)(uint64_t))v0[1];
    return v8(v7);
  }
  else
  {
    uint64_t v10 = (int *)v0[3];
    (*(void (**)(void, void, void))(v0[11] + 32))(v0[12], v0[13], v0[10]);
    uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t))((char *)v10 + *v10);
    uint64_t v11 = (void *)swift_task_alloc();
    v0[19] = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_1A673F1C4;
    uint64_t v12 = v0[12];
    uint64_t v13 = v0[9];
    return v14(v13, v12);
  }
}

uint64_t sub_1A673F51C()
{
  uint64_t v2 = v0[17];
  uint64_t v1 = v0[18];
  uint64_t v3 = v0[16];
  (*(void (**)(void, void))(v0[11] + 8))(v0[12], v0[10]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1A673F5F8(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_24;
    }
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v12 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        return 1;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          return 1;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13)
        {
          int64_t v4 = v12 + 3;
          if (v12 + 3 >= v9) {
            return 1;
          }
          unint64_t v13 = *(void *)(v5 + 8 * v4);
          if (!v13) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_24:
    uint64_t v15 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v11);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    float v18 = *(float *)(*(void *)(v3 + 56) + 4 * v11);
    swift_bridgeObjectRetain();
    unint64_t v19 = sub_1A673F7AC(v16, v17);
    char v21 = v20;
    unint64_t result = swift_bridgeObjectRelease();
    if ((v21 & 1) == 0 || *(float *)(*(void *)(a2 + 56) + 4 * v19) != v18) {
      return 0;
    }
  }
  int64_t v14 = v12 + 4;
  if (v14 >= v9) {
    return 1;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    int64_t v4 = v14;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_23;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

unint64_t sub_1A673F7AC(uint64_t a1, uint64_t a2)
{
  sub_1A6893200();
  sub_1A68920F0();
  uint64_t v4 = sub_1A6893250();

  return sub_1A673F824(a1, a2, v4);
}

unint64_t sub_1A673F824(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    unint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_1A6893120() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        unint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_1A6893120() & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_1A673F908(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_1A673F9DC(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_1A6741A74((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x1E4FBB9B0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_1A6741A74((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_1A6741A24((uint64_t)v12);
  return v7;
}

uint64_t sub_1A673F9DC(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_1A6892A60();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_1A673FB98(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = sub_1A6892CD0();
  if (!v8)
  {
    sub_1A6892E50();
    __break(1u);
LABEL_17:
    uint64_t result = sub_1A6892F00();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_1A673FB98(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_1A673FC30(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1A673FE10(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_1A673FE10(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_1A673FC30(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_1A673FDA8(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = sub_1A6892C50();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      sub_1A6892E50();
      __break(1u);
LABEL_10:
      uint64_t v2 = sub_1A6892190();
      if (!v2) {
        return MEMORY[0x1E4FBC860];
      }
    }
    sub_1A6892F00();
    __break(1u);
LABEL_14:
    uint64_t result = sub_1A6892E50();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC860];
  }
  return result;
}

void *sub_1A673FDA8(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  sub_1A6741AD0(&qword_1E96C1BD8);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  int v4[2] = a1;
  void v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_1A673FE10(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_1A6741AD0(&qword_1E96C1BD8);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_1A6892F00();
  __break(1u);
  return result;
}

void sub_1A673FF60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1A673FFE4(uint64_t a1)
{
  return a1;
}

uint64_t sub_1A674000C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  uint64_t v5 = v4 & *(void *)(a2 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v8 = 0;
  int64_t v9 = 0;
  while (1)
  {
    if (v5)
    {
      v5 &= v5 - 1;
      goto LABEL_5;
    }
    int64_t v10 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_21;
    }
    if (v10 >= v6) {
      goto LABEL_19;
    }
    uint64_t v11 = *(void *)(v2 + 8 * v10);
    ++v9;
    if (!v11)
    {
      int64_t v9 = v10 + 1;
      if (v10 + 1 >= v6) {
        goto LABEL_19;
      }
      uint64_t v11 = *(void *)(v2 + 8 * v9);
      if (!v11) {
        break;
      }
    }
LABEL_18:
    uint64_t v5 = (v11 - 1) & v11;
LABEL_5:
    swift_bridgeObjectRetain();
    sub_1A68920F0();
    swift_bridgeObjectRelease();
    sub_1A6893230();
    uint64_t result = sub_1A6893250();
    v8 ^= result;
  }
  int64_t v12 = v10 + 2;
  if (v12 >= v6)
  {
LABEL_19:
    swift_release();
    return sub_1A6893210();
  }
  uint64_t v11 = *(void *)(v2 + 8 * v12);
  if (v11)
  {
    int64_t v9 = v12;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v9 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v9 >= v6) {
      goto LABEL_19;
    }
    uint64_t v11 = *(void *)(v2 + 8 * v9);
    ++v12;
    if (v11) {
      goto LABEL_18;
    }
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t _s12TextToSpeech15CoreSynthesizerC9UtteranceV0C0O2eeoiySbAG_AGtFZ_0(uint64_t a1, uint64_t a2)
{
  sub_1A673D228(a1, (uint64_t)v18);
  if (v19 && v19 != 1)
  {
    sub_1A673E770(v18, (uint64_t)v15);
    uint64_t v5 = v16;
    uint64_t v6 = v17;
    sub_1A673E63C(v15, v16);
    uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 48))(v5, v6);
    uint64_t v3 = v7;
    sub_1A6741A24((uint64_t)v15);
  }
  else
  {
    uint64_t v3 = *((void *)&v18[0] + 1);
    uint64_t v4 = *(void *)&v18[0];
  }
  sub_1A673D228(a2, (uint64_t)v18);
  if (v19 && v19 != 1)
  {
    sub_1A673E770(v18, (uint64_t)v15);
    uint64_t v9 = v16;
    uint64_t v10 = v17;
    sub_1A673E63C(v15, v16);
    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 48))(v9, v10);
    uint64_t v8 = v12;
    sub_1A6741A24((uint64_t)v15);
    if (v4 != v11)
    {
LABEL_12:
      char v13 = sub_1A6893120();
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v8 = *((void *)&v18[0] + 1);
    if (v4 != *(void *)&v18[0]) {
      goto LABEL_12;
    }
  }
  if (v3 != v8) {
    goto LABEL_12;
  }
  char v13 = 1;
LABEL_13:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v13 & 1;
}

uint64_t sub_1A674031C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(unsigned int *)(v1 + 32);
  unsigned __int8 v5 = *(unsigned char *)(v1 + 36);
  uint64_t v6 = *(unsigned int *)(v1 + 40);
  unsigned __int8 v7 = *(unsigned char *)(v1 + 44);
  uint64_t v15 = *(unsigned int *)(v1 + 48);
  unsigned __int8 v8 = *(unsigned char *)(v1 + 52);
  swift_bridgeObjectRetain();
  TTSMarkup.SpeechText.init(_:)(v2, v3, v24);
  uint64_t v9 = (void *)v24[0];
  v18[0] = v24[0];
  v18[1] = v24[1];
  long long v18[2] = v24[2];
  uint64_t v19 = v24[3];
  LOBYTE(v21[0]) = v5;
  TTSMarkupSpeech.rate(_:)(v4 | ((unint64_t)v5 << 32), (uint64_t)&type metadata for TTSMarkup.SpeechText, (uint64_t)&protocol witness table for TTSMarkup.SpeechText, v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v10 = v22;
  uint64_t v11 = v23;
  sub_1A673E63C(v21, v22);
  LOBYTE(v24[0]) = v7;
  TTSMarkupSpeech.pitch(_:)(v6 | ((unint64_t)v7 << 32), v10, v11, v18);
  uint64_t v12 = v19;
  uint64_t v13 = v20;
  sub_1A673E63C(v18, v19);
  LOBYTE(v24[0]) = v8;
  TTSMarkupSpeech.volume(_:)(v15 | ((unint64_t)v8 << 32), v12, v13, v17);
  static TTSMarkup.SpeechBuilder.buildExpression(_:)(v24, v17);
  sub_1A6741A24((uint64_t)v17);
  sub_1A6741A24((uint64_t)v18);
  sub_1A6741A24((uint64_t)v21);
  static TTSMarkup.SpeechBuilder.buildBlock(_:)((uint64_t)v24, a1);
  return sub_1A6741A24((uint64_t)v24);
}

unint64_t sub_1A6740490()
{
  unint64_t result = qword_1E96C1B90;
  if (!qword_1E96C1B90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E96C1B90);
  }
  return result;
}

unint64_t sub_1A67404E4()
{
  unint64_t result = qword_1E96C1B98;
  if (!qword_1E96C1B98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E96C1B98);
  }
  return result;
}

unint64_t sub_1A6740538()
{
  unint64_t result = qword_1E96C1648;
  if (!qword_1E96C1648)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E96C1648);
  }
  return result;
}

uint64_t _s12TextToSpeech15CoreSynthesizerC9UtteranceV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v4 || (v5 = sub_1A6893120(), char v6 = 0, (v5 & 1) != 0))
  {
    LOBYTE(v70) = *(unsigned char *)(a1 + 16);
    LOBYTE(v59[0]) = *(unsigned char *)(a2 + 16);
    if (!static TTSSpeechQueue.QueuingBehavior.== infix(_:_:)((unsigned __int8 *)&v70, (unsigned __int8 *)v59)) {
      goto LABEL_20;
    }
    LOBYTE(v70) = *(unsigned char *)(a1 + 17);
    LOBYTE(v59[0]) = *(unsigned char *)(a2 + 17);
    if ((static TTSSpeechQueue.IsoPrioritizedBehavior.== infix(_:_:)(&v70, v59) & 1) == 0
      || *(void *)(a1 + 24) != *(void *)(a2 + 24))
    {
      goto LABEL_20;
    }
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 40);
    uint64_t v10 = *(void *)(a1 + 48);
    uint64_t v9 = *(void *)(a1 + 56);
    uint64_t v12 = *(void *)(a1 + 64);
    uint64_t v11 = *(void *)(a1 + 72);
    uint64_t v14 = *(void *)(a1 + 80);
    uint64_t v13 = *(void *)(a1 + 88);
    uint64_t v16 = *(void *)(a1 + 96);
    uint64_t v15 = *(void *)(a1 + 104);
    uint64_t v17 = *(void **)(a1 + 112);
    uint64_t v18 = *(void *)(a1 + 120);
    unint64_t v19 = *(unsigned int *)(a1 + 128) | ((unint64_t)*(unsigned __int8 *)(a1 + 132) << 32);
    uint64_t v20 = *(void *)(a2 + 32);
    uint64_t v21 = *(void *)(a2 + 40);
    uint64_t v22 = *(void *)(a2 + 48);
    uint64_t v23 = *(void *)(a2 + 56);
    uint64_t v24 = *(void *)(a2 + 64);
    uint64_t v25 = *(void *)(a2 + 72);
    uint64_t v26 = *(void *)(a2 + 80);
    uint64_t v27 = *(void *)(a2 + 88);
    char v28 = *(void **)(a2 + 112);
    uint64_t v57 = *(void *)(a2 + 104);
    uint64_t v58 = *(void *)(a2 + 96);
    unint64_t v29 = *(unsigned int *)(a2 + 128) | ((unint64_t)*(unsigned __int8 *)(a2 + 132) << 32);
    unint64_t v30 = HIDWORD(v19);
    uint64_t v31 = *(void *)(a2 + 120);
    if (v8)
    {
      uint64_t v70 = *(void *)(a1 + 32);
      uint64_t v71 = v8;
      uint64_t v72 = v10;
      uint64_t v73 = v9;
      uint64_t v74 = v12;
      uint64_t v75 = v11;
      uint64_t v76 = v14;
      uint64_t v77 = v13;
      uint64_t v78 = v16;
      uint64_t v79 = v15;
      id v80 = v17;
      uint64_t v81 = v18;
      int v82 = v19;
      char v83 = BYTE4(v19);
      uint64_t v52 = v14;
      uint64_t v53 = v13;
      uint64_t v50 = v9;
      uint64_t v51 = v11;
      uint64_t v49 = v7;
      uint64_t v55 = v10;
      uint64_t v56 = v12;
      uint64_t v54 = v16;
      int v48 = v19;
      if (v21)
      {
        v59[0] = v20;
        v59[1] = v21;
        v59[2] = v22;
        v59[3] = v23;
        v59[4] = v24;
        __int16 v60 = v25;
        uint64_t v61 = v26;
        char v62 = v27;
        uint64_t v63 = v58;
        uint64_t v64 = v57;
        uint64_t v65 = v28;
        int v66 = v31;
        char v67 = BYTE4(v31) & 1;
        int v68 = v29;
        char v69 = BYTE4(v29) & 1;
        uint64_t v47 = v15;
        unint64_t v32 = v17;
        sub_1A67419D0();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        id v33 = v32;
        char v34 = sub_1A6891FC0();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1A673FF60(v49, v8, v55, v50, v56, v51, v52, v53, v54, v47, v32);
        if ((v34 & 1) == 0) {
          goto LABEL_20;
        }
        goto LABEL_14;
      }
      uint64_t v38 = v15;
      int v39 = v17;
      uint64_t v45 = v26;
      uint64_t v46 = v27;
      uint64_t v43 = v23;
      uint64_t v44 = v24;
      uint64_t v42 = v22;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v40 = v39;
      uint64_t v22 = v42;
      uint64_t v23 = v43;
      uint64_t v24 = v44;
      uint64_t v26 = v45;
      uint64_t v27 = v46;
      LODWORD(v19) = v48;
      uint64_t v17 = v39;
      uint64_t v15 = v38;
      uint64_t v16 = v54;
      uint64_t v10 = v55;
      uint64_t v7 = v49;
      uint64_t v9 = v50;
      uint64_t v12 = v56;
      uint64_t v11 = v51;
      uint64_t v14 = v52;
      uint64_t v13 = v53;
    }
    else if (!v21)
    {
LABEL_14:
      uint64_t v35 = *(void *)(a2 + 136);
      if (*(void *)(a1 + 136))
      {
        if (!v35) {
          goto LABEL_20;
        }
        swift_bridgeObjectRetain();
        uint64_t v36 = swift_bridgeObjectRetain();
        char v37 = sub_1A673F5F8(v36, v35);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v37 & 1) == 0) {
          goto LABEL_20;
        }
LABEL_23:
        if ((_s12TextToSpeech15CoreSynthesizerC9UtteranceV0C0O2eeoiySbAG_AGtFZ_0(a1 + 144, a2 + 144) & 1) != 0
          && *(void *)(a1 + 192) == *(void *)(a2 + 192))
        {
          char v6 = *(unsigned char *)(a1 + 200) ^ *(unsigned char *)(a2 + 200) ^ 1;
          return v6 & 1;
        }
        goto LABEL_20;
      }
      if (!v35) {
        goto LABEL_23;
      }
LABEL_20:
      char v6 = 0;
      return v6 & 1;
    }
    uint64_t v70 = v7;
    uint64_t v71 = v8;
    uint64_t v72 = v10;
    uint64_t v73 = v9;
    uint64_t v74 = v12;
    uint64_t v75 = v11;
    uint64_t v76 = v14;
    uint64_t v77 = v13;
    uint64_t v78 = v16;
    uint64_t v79 = v15;
    id v80 = v17;
    uint64_t v81 = v18;
    int v82 = v19;
    char v83 = v30;
    uint64_t v84 = v20;
    uint64_t v85 = v21;
    uint64_t v86 = v22;
    uint64_t v87 = v23;
    uint64_t v88 = v24;
    uint64_t v89 = v25;
    uint64_t v90 = v26;
    uint64_t v91 = v27;
    uint64_t v92 = v58;
    uint64_t v93 = v57;
    uint64_t v94 = v28;
    uint64_t v95 = v31;
    int v96 = v29;
    char v97 = BYTE4(v29);
    sub_1A673D140(v20, v21, v22, v23, v24, v25, v26, v27, v58, v57, v28);
    sub_1A67418E8((uint64_t)&v70);
    goto LABEL_20;
  }
  return v6 & 1;
}

unint64_t sub_1A6740988()
{
  unint64_t result = qword_1E96C1BA8;
  if (!qword_1E96C1BA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E96C1BA8);
  }
  return result;
}

unint64_t sub_1A67409E0()
{
  unint64_t result = qword_1E96C1BB0;
  if (!qword_1E96C1BB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E96C1BB0);
  }
  return result;
}

unint64_t sub_1A6740A38()
{
  unint64_t result = qword_1E96C1BB8;
  if (!qword_1E96C1BB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E96C1BB8);
  }
  return result;
}

unint64_t sub_1A6740A90()
{
  unint64_t result = qword_1E96C1BC0;
  if (!qword_1E96C1BC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E96C1BC0);
  }
  return result;
}

unint64_t sub_1A6740AE8()
{
  unint64_t result = qword_1E96C1BC8;
  if (!qword_1E96C1BC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E96C1BC8);
  }
  return result;
}

unint64_t sub_1A6740B40()
{
  unint64_t result = qword_1E96C1BD0;
  if (!qword_1E96C1BD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E96C1BD0);
  }
  return result;
}

uint64_t sub_1A6740B94()
{
  return MEMORY[0x1E4FBB1B0];
}

uint64_t _s9UtteranceVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 40))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t result = swift_bridgeObjectRelease();
  unsigned int v3 = *(unsigned __int8 *)(a1 + 184);
  if (v3 == 2) {
    return sub_1A6741A24(a1 + 144);
  }
  if (v3 <= 1)
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s9UtteranceVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  if (v5)
  {
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = v5;
    uint64_t v6 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = v6;
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
    uint64_t v7 = *(void *)(a2 + 104);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = v7;
    uint64_t v8 = *(void **)(a2 + 112);
    *(void *)(a1 + 112) = v8;
    *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
    *(unsigned char *)(a1 + 124) = *(unsigned char *)(a2 + 124);
    *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
    *(unsigned char *)(a1 + 132) = *(unsigned char *)(a2 + 132);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v9 = v8;
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v10;
    *(void *)(a1 + 125) = *(void *)(a2 + 125);
    long long v11 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v11;
    long long v12 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v12;
  }
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  int v13 = *(unsigned __int8 *)(a2 + 184);
  swift_bridgeObjectRetain();
  if (v13 == 2)
  {
    long long v15 = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 168) = v15;
    (**(void (***)(uint64_t, uint64_t))(v15 - 8))(a1 + 144, a2 + 144);
    *(unsigned char *)(a1 + 184) = 2;
  }
  else
  {
    uint64_t v14 = *(void *)(a2 + 152);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(void *)(a1 + 152) = v14;
    if (v13 == 1)
    {
      *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
      *(unsigned char *)(a1 + 164) = *(unsigned char *)(a2 + 164);
      *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
      *(unsigned char *)(a1 + 172) = *(unsigned char *)(a2 + 172);
      *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
      *(unsigned char *)(a1 + 180) = *(unsigned char *)(a2 + 180);
      *(unsigned char *)(a1 + 184) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 184) = 0;
    }
    swift_bridgeObjectRetain();
  }
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  return a1;
}

uint64_t _s9UtteranceVwca(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v4 = (_OWORD *)(a1 + 32);
  uint64_t v5 = (_OWORD *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 40))
  {
    if (v6)
    {
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
      *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 73);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v7 = *(void **)(a2 + 112);
      uint64_t v8 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = v7;
      id v9 = v7;

      int v10 = *(_DWORD *)(a2 + 120);
      *(unsigned char *)(a1 + 124) = *(unsigned char *)(a2 + 124);
      *(_DWORD *)(a1 + 120) = v10;
      int v11 = *(_DWORD *)(a2 + 128);
      *(unsigned char *)(a1 + 132) = *(unsigned char *)(a2 + 132);
      *(_DWORD *)(a1 + 128) = v11;
    }
    else
    {
      sub_1A67411AC(a1 + 32);
      long long v17 = *(_OWORD *)(a2 + 48);
      long long v16 = *(_OWORD *)(a2 + 64);
      _OWORD *v4 = *v5;
      *(_OWORD *)(a1 + 48) = v17;
      *(_OWORD *)(a1 + 64) = v16;
      long long v19 = *(_OWORD *)(a2 + 96);
      long long v18 = *(_OWORD *)(a2 + 112);
      long long v20 = *(_OWORD *)(a2 + 80);
      *(void *)(a1 + 125) = *(void *)(a2 + 125);
      *(_OWORD *)(a1 + 96) = v19;
      *(_OWORD *)(a1 + 112) = v18;
      *(_OWORD *)(a1 + 80) = v20;
    }
  }
  else if (v6)
  {
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
    *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 73);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    long long v12 = *(void **)(a2 + 112);
    *(void *)(a1 + 112) = v12;
    int v13 = *(_DWORD *)(a2 + 120);
    *(unsigned char *)(a1 + 124) = *(unsigned char *)(a2 + 124);
    *(_DWORD *)(a1 + 120) = v13;
    int v14 = *(_DWORD *)(a2 + 128);
    *(unsigned char *)(a1 + 132) = *(unsigned char *)(a2 + 132);
    *(_DWORD *)(a1 + 128) = v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v15 = v12;
  }
  else
  {
    long long v21 = *v5;
    long long v22 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v22;
    _OWORD *v4 = v21;
    long long v23 = *(_OWORD *)(a2 + 80);
    long long v24 = *(_OWORD *)(a2 + 96);
    long long v25 = *(_OWORD *)(a2 + 112);
    *(void *)(a1 + 125) = *(void *)(a2 + 125);
    *(_OWORD *)(a1 + 96) = v24;
    *(_OWORD *)(a1 + 112) = v25;
    *(_OWORD *)(a1 + 80) = v23;
  }
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    sub_1A673FFE4(a1 + 144);
    int v26 = *(unsigned __int8 *)(a2 + 184);
    if (v26 == 2)
    {
      uint64_t v30 = *(void *)(a2 + 168);
      *(void *)(a1 + 168) = v30;
      *(void *)(a1 + 176) = *(void *)(a2 + 176);
      (**(void (***)(uint64_t, uint64_t))(v30 - 8))(a1 + 144, a2 + 144);
      *(unsigned char *)(a1 + 184) = 2;
    }
    else
    {
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      if (v26 == 1)
      {
        int v27 = *(_DWORD *)(a2 + 160);
        *(unsigned char *)(a1 + 164) = *(unsigned char *)(a2 + 164);
        *(_DWORD *)(a1 + 160) = v27;
        int v28 = *(_DWORD *)(a2 + 168);
        *(unsigned char *)(a1 + 172) = *(unsigned char *)(a2 + 172);
        *(_DWORD *)(a1 + 168) = v28;
        int v29 = *(_DWORD *)(a2 + 176);
        *(unsigned char *)(a1 + 180) = *(unsigned char *)(a2 + 180);
        *(_DWORD *)(a1 + 176) = v29;
        *(unsigned char *)(a1 + 184) = 1;
      }
      else
      {
        *(unsigned char *)(a1 + 184) = 0;
      }
      swift_bridgeObjectRetain();
    }
  }
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  return a1;
}

uint64_t sub_1A67411AC(uint64_t a1)
{
  return a1;
}

__n128 _s9UtteranceVwtk(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  __n128 result = *(__n128 *)(a2 + 144);
  long long v9 = *(_OWORD *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 185) = *(_OWORD *)(a2 + 185);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

uint64_t _s9UtteranceVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  if (*(void *)(a1 + 40))
  {
    uint64_t v5 = *(void *)(a2 + 40);
    if (v5)
    {
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v5;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      swift_bridgeObjectRelease();
      uint64_t v6 = *(void *)(a2 + 64);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = v6;
      swift_bridgeObjectRelease();
      *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      swift_bridgeObjectRelease();
      long long v7 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);

      *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
      *(unsigned char *)(a1 + 124) = *(unsigned char *)(a2 + 124);
      *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
      *(unsigned char *)(a1 + 132) = *(unsigned char *)(a2 + 132);
      goto LABEL_6;
    }
    sub_1A67411AC(a1 + 32);
  }
  long long v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v8;
  *(void *)(a1 + 125) = *(void *)(a2 + 125);
  long long v9 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v9;
  long long v10 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v10;
LABEL_6:
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    sub_1A673FFE4(a1 + 144);
    long long v11 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v11;
    *(_OWORD *)(a1 + 169) = *(_OWORD *)(a2 + 169);
  }
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  return a1;
}

uint64_t _s9UtteranceVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 201)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s9UtteranceVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 200) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 201) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 201) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CoreSynthesizer.Utterance()
{
  return &type metadata for CoreSynthesizer.Utterance;
}

uint64_t _s5VoiceVwCP(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t _s9UtteranceV6SpeechOwxx(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 3) {
    unsigned int v1 = *(_DWORD *)a1 + 3;
  }
  if (v1 == 2) {
    return sub_1A6741A24(a1);
  }

  return swift_bridgeObjectRelease();
}

uint64_t _s9UtteranceV6SpeechOwcp(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 3) {
    unsigned int v3 = *(_DWORD *)a2 + 3;
  }
  if (v3 == 2)
  {
    long long v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v5;
    (**(void (***)(uint64_t))(v5 - 8))(a1);
    *(unsigned char *)(a1 + 40) = 2;
  }
  else
  {
    uint64_t v4 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v4;
    if (v3 == 1)
    {
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
      *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
      *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
      *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
      *(unsigned char *)(a1 + 40) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 40) = 0;
    }
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t _s9UtteranceV6SpeechOwca(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 3) {
      unsigned int v4 = *(_DWORD *)a1 + 3;
    }
    if (v4 == 2) {
      sub_1A6741A24(a1);
    }
    else {
      swift_bridgeObjectRelease();
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 3) {
      unsigned int v5 = *(_DWORD *)a2 + 3;
    }
    if (v5 == 2)
    {
      uint64_t v9 = *(void *)(a2 + 24);
      *(void *)(a1 + 24) = v9;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = 2;
    }
    else
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      if (v5 == 1)
      {
        int v6 = *(_DWORD *)(a2 + 16);
        *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
        *(_DWORD *)(a1 + 16) = v6;
        int v7 = *(_DWORD *)(a2 + 24);
        *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
        *(_DWORD *)(a1 + 24) = v7;
        int v8 = *(_DWORD *)(a2 + 32);
        *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
        *(_DWORD *)(a1 + 32) = v8;
        *(unsigned char *)(a1 + 40) = 1;
      }
      else
      {
        *(unsigned char *)(a1 + 40) = 0;
      }
      swift_bridgeObjectRetain();
    }
  }
  return a1;
}

__n128 _s9UtteranceV6SpeechOwtk(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t _s9UtteranceV6SpeechOwta(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 3) {
      unsigned int v4 = *(_DWORD *)a1 + 3;
    }
    if (v4 == 2) {
      sub_1A6741A24(a1);
    }
    else {
      swift_bridgeObjectRelease();
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 3) {
      unsigned int v5 = *(_DWORD *)a2 + 3;
    }
    if (v5 == 2)
    {
      long long v8 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v8;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      char v7 = 2;
    }
    else if (v5 == 1)
    {
      long long v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      *(void *)(a1 + 29) = *(void *)(a2 + 29);
      char v7 = 1;
    }
    else
    {
      char v7 = 0;
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    *(unsigned char *)(a1 + 40) = v7;
  }
  return a1;
}

uint64_t _s9UtteranceV6SpeechOwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 3) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t _s9UtteranceV6SpeechOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1A6741884(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 40);
  if (result >= 3) {
    return (*(_DWORD *)a1 + 3);
  }
  return result;
}

uint64_t sub_1A67418A0(uint64_t result, unsigned int a2)
{
  if (a2 > 2)
  {
    *(void *)(result + 32) = 0;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for CoreSynthesizer.Utterance.Speech()
{
  return &type metadata for CoreSynthesizer.Utterance.Speech;
}

ValueMetadata *type metadata accessor for CoreSynthesizer.Utterance.ReplacementOptions()
{
  return &type metadata for CoreSynthesizer.Utterance.ReplacementOptions;
}

uint64_t sub_1A67418E8(uint64_t a1)
{
  uint64_t v12 = *(void *)(a1 + 104);
  uint64_t v2 = *(void *)(a1 + 120);
  uint64_t v11 = *(void *)(a1 + 112);
  uint64_t v3 = *(void *)(a1 + 128);
  uint64_t v4 = *(void *)(a1 + 136);
  uint64_t v5 = *(void *)(a1 + 144);
  uint64_t v6 = *(void *)(a1 + 152);
  uint64_t v7 = *(void *)(a1 + 160);
  long long v10 = *(_OWORD *)(a1 + 168);
  long long v8 = *(void **)(a1 + 184);
  sub_1A673FF60(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void **)(a1 + 80));
  sub_1A673FF60(v12, v11, v2, v3, v4, v5, v6, v7, v10, *((uint64_t *)&v10 + 1), v8);
  return a1;
}

unint64_t sub_1A67419D0()
{
  unint64_t result = qword_1E96C1650;
  if (!qword_1E96C1650)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E96C1650);
  }
  return result;
}

uint64_t sub_1A6741A24(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1A6741A74(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1A6741AD0(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

void sub_1A6741B20()
{
  uint64_t v0 = (void *)sub_1A6891FD0();
  id v1 = TTSLocString(v0);

  if (v1)
  {
    uint64_t v2 = sub_1A6892000();
    uint64_t v4 = v3;

    sub_1A6741AD0(&qword_1E96C1BE0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1A689DC40;
    *(void *)(inited + 32) = 30049;
    *(void *)(inited + 40) = 0xE200000000000000;
    v22[0] = xmmword_1A689DC50;
    v22[1] = xmmword_1A689DC60;
    uint64_t v23 = sub_1A68353C0();
    uint64_t v24 = v6;
    char v25 = 0;
    unint64_t v7 = sub_1A67421CC((uint64_t)&unk_1EFB77E60, &qword_1E96C1C08, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))sub_1A67423E8);
    sub_1A6741AD0(&qword_1E96C1BE8);
    swift_arrayDestroy();
    unint64_t v8 = sub_1A67421CC(MEMORY[0x1E4FBC860], &qword_1E96C1C00, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))sub_1A67423F0);
    sub_1A68370E0(v22, v7, v8, (uint64_t)&unk_1EFB77E00, (uint64_t)&unk_1EFB77E30, (uint64_t)v20);
    long long v9 = v20[3];
    *(_OWORD *)(inited + 80) = v20[2];
    *(_OWORD *)(inited + 96) = v9;
    *(_OWORD *)(inited + 112) = v20[4];
    *(void *)(inited + 128) = v21;
    long long v10 = v20[1];
    *(_OWORD *)(inited + 48) = v20[0];
    *(_OWORD *)(inited + 64) = v10;
    unint64_t v11 = sub_1A6741DE0(inited);
    sub_1A6741AD0(&qword_1E96C1BF0);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_1A689DC40;
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = 0x694D797244746577;
    *(void *)(v13 + 24) = 0xE900000000000078;
    int v14 = (void *)sub_1A6891FD0();
    id v15 = TTSLocString(v14);

    if (v15)
    {
      uint64_t v16 = sub_1A6892000();
      uint64_t v18 = v17;

      *(void *)(v13 + 32) = v16;
      *(void *)(v13 + 40) = v18;
      *(void *)(v13 + 48) = 0x42C8000000000000;
      *(_DWORD *)(v13 + 56) = 1065353216;
      *(void *)(v13 + 64) = 0;
      *(void *)(v13 + 72) = 0;
      *(void *)(v12 + 32) = v13 | 0xC000000000000000;
      char v19 = sub_1A6747E5C();
      sub_1A683C7C4(v2, v4, v11, v12, 0xD00000000000001DLL, 0x80000001A68CC610, 0, 0, (uint64_t)&qword_1E96C4EE8, v19 & 1);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

unint64_t sub_1A6741DE0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  sub_1A6741AD0(&qword_1E96C1BF8);
  uint64_t v2 = sub_1A6892EF0();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v21 = v2 + 64;
  swift_retain();
  uint64_t v5 = a1 + 64;
  while (1)
  {
    uint64_t v22 = v4;
    uint64_t v6 = *(void *)(v5 - 24);
    uint64_t v23 = *(void *)(v5 - 32);
    uint64_t v7 = *(void *)(v5 - 16);
    uint64_t v8 = *(void *)(v5 - 8);
    uint64_t v9 = *(void *)v5;
    uint64_t v10 = *(void *)(v5 + 8);
    uint64_t v11 = *(void *)(v5 + 16);
    uint64_t v12 = *(void *)(v5 + 24);
    char v13 = *(unsigned char *)(v5 + 32);
    long long v24 = *(_OWORD *)(v5 + 56);
    long long v25 = *(_OWORD *)(v5 + 40);
    swift_bridgeObjectRetain();
    sub_1A674239C(v7, v8, v9, v10, v11, v12, v13);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_1A673F7AC(v23, v6);
    if (v15) {
      break;
    }
    *(void *)(v21 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v16 = (uint64_t *)(v3[6] + 16 * result);
    uint64_t *v16 = v23;
    v16[1] = v6;
    uint64_t v17 = v3[7] + 88 * result;
    *(void *)uint64_t v17 = v7;
    *(void *)(v17 + 8) = v8;
    *(void *)(v17 + 16) = v9;
    *(void *)(v17 + 24) = v10;
    *(void *)(v17 + 32) = v11;
    *(void *)(v17 + 40) = v12;
    *(unsigned char *)(v17 + 48) = v13;
    *(_OWORD *)(v17 + 56) = v25;
    *(_OWORD *)(v17 + 72) = v24;
    uint64_t v18 = v3[2];
    BOOL v19 = __OFADD__(v18, 1);
    uint64_t v20 = v18 + 1;
    if (v19) {
      goto LABEL_11;
    }
    _DWORD v3[2] = v20;
    v5 += 104;
    uint64_t v4 = v22 - 1;
    if (v22 == 1)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t *sub_1A6741FB0()
{
  if (qword_1E96C4EE0 != -1) {
    swift_once();
  }
  return &qword_1E96C4EE8;
}

uint64_t static TTSAudioEffect.Reverb.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_1E96C4EE0 != -1) {
    swift_once();
  }
  uint64_t v2 = unk_1E96C4EF0;
  uint64_t v3 = qword_1E96C4EF8;
  uint64_t v4 = qword_1E96C4F10;
  char v5 = byte_1E96C4F18;
  uint64_t v6 = qword_1E96C4F20;
  uint64_t v7 = unk_1E96C4F28;
  uint64_t v8 = qword_1E96C4F30;
  uint64_t v9 = unk_1E96C4F38;
  *(void *)a1 = qword_1E96C4EE8;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = unk_1E96C4F00;
  *(void *)(a1 + 40) = v4;
  *(unsigned char *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v6;
  *(void *)(a1 + 64) = v7;
  *(void *)(a1 + 72) = v8;
  *(void *)(a1 + 80) = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

unint64_t sub_1A67420E8(unsigned int a1)
{
  uint64_t v3 = MEMORY[0x1AD0C02A0](*(void *)(v1 + 40), a1, 4);

  return sub_1A6742130(a1, v3);
}

unint64_t sub_1A6742130(int a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(_DWORD *)(v7 + 4 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(_DWORD *)(v7 + 4 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_1A67421CC(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return MEMORY[0x1E4FBC868];
  }
  sub_1A6741AD0(a2);
  uint64_t v5 = (void *)sub_1A6892EF0();
  unsigned int v6 = *(_DWORD *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v11 = *(unsigned __int8 *)(a1 + 76);
  uint64_t v24 = *(unsigned int *)(a1 + 72);
  char v12 = *(unsigned char *)(a1 + 77);
  unint64_t result = sub_1A67420E8(v6);
  if (v14)
  {
LABEL_7:
    __break(1u);
    return MEMORY[0x1E4FBC868];
  }
  uint64_t v15 = v11;
  uint64_t v16 = (char *)(a1 + 125);
  unint64_t v17 = v24 | (v15 << 32);
  while (1)
  {
    *(void *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_DWORD *)(v5[6] + 4 * result) = v6;
    uint64_t v18 = v5[7] + 40 * result;
    *(void *)uint64_t v18 = v7;
    *(void *)(v18 + 8) = v8;
    *(void *)(v18 + 16) = v9;
    *(void *)(v18 + 24) = v10;
    *(unsigned char *)(v18 + 36) = BYTE4(v17);
    *(_DWORD *)(v18 + 32) = v17;
    *(unsigned char *)(v18 + 37) = v12 & 1;
    uint64_t v19 = v5[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      break;
    }
    v5[2] = v21;
    a3(v7, v8, v9, v10, v17);
    if (!--v3) {
      return (unint64_t)v5;
    }
    unsigned int v6 = *(_DWORD *)(v16 - 45);
    uint64_t v25 = *(void *)(v16 - 37);
    uint64_t v8 = *(void *)(v16 - 29);
    uint64_t v9 = *(void *)(v16 - 21);
    uint64_t v10 = *(void *)(v16 - 13);
    unint64_t v17 = *(unsigned int *)(v16 - 5) | ((unint64_t)*(v16 - 1) << 32);
    char v12 = *v16;
    unint64_t result = sub_1A67420E8(v6);
    v16 += 48;
    uint64_t v7 = v25;
    if (v22) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1A6742354()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 80, 7);
}

uint64_t sub_1A674239C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if ((a7 & 1) == 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v7 = vars8;
  }
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A67423E8()
{
  return swift_bridgeObjectRetain();
}

TextToSpeech::SSMLTag_optional __swiftcall SSMLTag.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v2 = v1;
  unint64_t v3 = sub_1A6892F30();
  result.float value = swift_bridgeObjectRelease();
  char v5 = 16;
  if (v3 < 0x10) {
    char v5 = v3;
  }
  char *v2 = v5;
  return result;
}

uint64_t SSMLTag.rawValue.getter()
{
  uint64_t result = 0x6B61657073;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x73612D796173;
      break;
    case 2:
      uint64_t result = 0x79646F736F7270;
      break;
    case 3:
      uint64_t result = 0x6F69647561;
      break;
    case 4:
      uint64_t result = 0x656D656E6F6870;
      break;
    case 5:
      uint64_t result = 112;
      break;
    case 6:
      uint64_t result = 115;
      break;
    case 7:
      uint64_t result = 6452595;
      break;
    case 8:
      uint64_t result = 0x6563696F76;
      break;
    case 9:
      uint64_t result = 1735287148;
      break;
    case 0xA:
      uint64_t result = 0x7369736168706D65;
      break;
    case 0xB:
      uint64_t result = 0x6B61657262;
      break;
    case 0xC:
      uint64_t result = 1802658157;
      break;
    case 0xD:
      uint64_t result = 0x6E776F6E6B6E75;
      break;
    case 0xE:
      uint64_t result = 1668506980;
      break;
    case 0xF:
      uint64_t result = 0x74786554776172;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1A67425D0()
{
  return sub_1A67425DC();
}

uint64_t sub_1A67425DC()
{
  uint64_t v0 = SSMLTag.rawValue.getter();
  uint64_t v2 = v1;
  if (v0 == SSMLTag.rawValue.getter() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = sub_1A6893120();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_1A6742674()
{
  return sub_1A6893250();
}

uint64_t sub_1A67426DC()
{
  SSMLTag.rawValue.getter();
  sub_1A68920F0();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1A6742740()
{
  return sub_1A6893250();
}

TextToSpeech::SSMLTag_optional sub_1A67427A4(Swift::String *a1)
{
  return SSMLTag.init(rawValue:)(*a1);
}

uint64_t sub_1A67427B0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SSMLTag.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1A67427E8()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12TextToSpeech14ParsedSSMLNode_parent;
  swift_beginAccess();
  return MEMORY[0x1AD0C1D60](v1);
}

void sub_1A6742834(void *a1)
{
}

void (*sub_1A674288C(void *a1))(id **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC12TextToSpeech14ParsedSSMLNode_parent;
  v3[4] = v1;
  v3[5] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  v3[3] = MEMORY[0x1AD0C1D60](v5);
  return sub_1A6742910;
}

void sub_1A6742910(id **a1, char a2)
{
  uint64_t v3 = *a1;
  id v4 = (*a1)[3];
  swift_unknownObjectWeakAssign();
  if (a2)
  {

    swift_endAccess();
  }
  else
  {
    swift_endAccess();
  }

  free(v3);
}

uint64_t sub_1A674298C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC12TextToSpeech14ParsedSSMLNode_tag);
  uint64_t result = swift_beginAccess();
  *a1 = *v3;
  return result;
}

uint64_t sub_1A67429DC(char *a1)
{
  char v2 = *a1;
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC12TextToSpeech14ParsedSSMLNode_tag);
  uint64_t result = swift_beginAccess();
  unsigned char *v3 = v2;
  return result;
}

uint64_t (*sub_1A6742A30())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1A6742A8C()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC12TextToSpeech14ParsedSSMLNode_tagName);
  swift_beginAccess();
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_1A6742AE4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + OBJC_IVAR____TtC12TextToSpeech14ParsedSSMLNode_tagName);
  swift_beginAccess();
  void *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1A6742B44())()
{
  return j_j__swift_endAccess;
}

unint64_t sub_1A6742BA0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  sub_1A6741AD0(&qword_1E96C1580);
  uint64_t v2 = (void *)sub_1A6892EF0();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  id v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_1A673F7AC(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v11 = v5;
    v11[1] = v6;
    char v12 = (void *)(v2[7] + 16 * result);
    void *v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1A6742CC4()
{
  return sub_1A6743AEC();
}

uint64_t sub_1A6742CD0(uint64_t a1)
{
  return sub_1A6743B40(a1, &OBJC_IVAR____TtC12TextToSpeech14ParsedSSMLNode_attributes);
}

uint64_t (*sub_1A6742CDC())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1A6742D38()
{
  return sub_1A6743AEC();
}

uint64_t sub_1A6742D44(uint64_t a1)
{
  return sub_1A6743B40(a1, &OBJC_IVAR____TtC12TextToSpeech14ParsedSSMLNode_children);
}

uint64_t (*sub_1A6742D50())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1A6742DAC()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12TextToSpeech14ParsedSSMLNode_range;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t sub_1A6742DF4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + OBJC_IVAR____TtC12TextToSpeech14ParsedSSMLNode_range);
  uint64_t result = swift_beginAccess();
  void *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*sub_1A6742E4C())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1A6742EA8()
{
  return sub_1A6742F28(&OBJC_IVAR____TtC12TextToSpeech14ParsedSSMLNode_tagStartRange);
}

uint64_t sub_1A6742EB4(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1A6742F7C(a1, a2, a3, &OBJC_IVAR____TtC12TextToSpeech14ParsedSSMLNode_tagStartRange);
}

uint64_t (*sub_1A6742EC0())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1A6742F1C()
{
  return sub_1A6742F28(&OBJC_IVAR____TtC12TextToSpeech14ParsedSSMLNode_tagEndRange);
}

uint64_t sub_1A6742F28(void *a1)
{
  uint64_t v2 = v1 + *a1;
  swift_beginAccess();
  return *(void *)v2;
}

uint64_t sub_1A6742F70(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1A6742F7C(a1, a2, a3, &OBJC_IVAR____TtC12TextToSpeech14ParsedSSMLNode_tagEndRange);
}

uint64_t sub_1A6742F7C(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  uint64_t v8 = v4 + *a4;
  uint64_t result = swift_beginAccess();
  *(void *)uint64_t v8 = a1;
  *(void *)(v8 + 8) = a2;
  *(unsigned char *)(v8 + 16) = a3 & 1;
  return result;
}

uint64_t (*sub_1A6742FDC())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1A6743038()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12TextToSpeech14ParsedSSMLNode_utf8StartOffset;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t sub_1A6743080(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC12TextToSpeech14ParsedSSMLNode_utf8StartOffset);
  uint64_t result = swift_beginAccess();
  void *v3 = a1;
  return result;
}

uint64_t (*sub_1A67430CC())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1A6743128()
{
  return sub_1A6743D1C(&OBJC_IVAR____TtC12TextToSpeech14ParsedSSMLNode_rawText);
}

uint64_t sub_1A6743134(uint64_t a1, uint64_t a2)
{
  return sub_1A6743D7C(a1, a2, &OBJC_IVAR____TtC12TextToSpeech14ParsedSSMLNode_rawText);
}

uint64_t (*sub_1A6743140())()
{
  return j_j__swift_endAccess;
}

id sub_1A674319C(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id v17 = objc_allocWithZone(v8);
  return sub_1A6743228(a1, a2, a3, a4, a5, a6, a7, a8);
}

id sub_1A6743228(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v14 = *a1;
  swift_unknownObjectWeakInit();
  uint64_t v15 = OBJC_IVAR____TtC12TextToSpeech14ParsedSSMLNode_attributes;
  uint64_t v16 = v8;
  uint64_t v17 = MEMORY[0x1E4FBC860];
  *(void *)&v8[v15] = sub_1A6742BA0(MEMORY[0x1E4FBC860]);
  *(void *)&v16[OBJC_IVAR____TtC12TextToSpeech14ParsedSSMLNode_children] = v17;
  uint64_t v18 = &v16[OBJC_IVAR____TtC12TextToSpeech14ParsedSSMLNode_tagStartRange];
  *(void *)uint64_t v18 = 0;
  *((void *)v18 + 1) = 0;
  v18[16] = 1;
  uint64_t v19 = &v16[OBJC_IVAR____TtC12TextToSpeech14ParsedSSMLNode_tagEndRange];
  *(void *)uint64_t v19 = 0;
  *((void *)v19 + 1) = 0;
  v19[16] = 1;
  BOOL v20 = &v16[OBJC_IVAR____TtC12TextToSpeech14ParsedSSMLNode_rawText];
  *(void *)BOOL v20 = 0;
  *((void *)v20 + 1) = 0;
  v16[OBJC_IVAR____TtC12TextToSpeech14ParsedSSMLNode_tag] = v14;
  uint64_t v21 = &v16[OBJC_IVAR____TtC12TextToSpeech14ParsedSSMLNode_tagName];
  *(void *)uint64_t v21 = a2;
  *((void *)v21 + 1) = a3;
  char v22 = &v16[OBJC_IVAR____TtC12TextToSpeech14ParsedSSMLNode_range];
  *(void *)char v22 = a4;
  *((void *)v22 + 1) = a5;
  swift_beginAccess();
  *(void *)BOOL v20 = a6;
  *((void *)v20 + 1) = a7;
  swift_bridgeObjectRelease();
  *(void *)&v16[OBJC_IVAR____TtC12TextToSpeech14ParsedSSMLNode_utf8StartOffset] = a8;

  v26.receiver = v16;
  v26.super_class = (Class)type metadata accessor for ParsedSSMLNode();
  return objc_msgSendSuper2(&v26, sel_init);
}

uint64_t type metadata accessor for ParsedSSMLNode()
{
  return self;
}

void ParsedSSMLNode.init()()
{
}

id ParsedSSMLNode.__deallocating_deinit()
{
  return sub_1A6746B64(type metadata accessor for ParsedSSMLNode);
}

void sub_1A67434A4(uint64_t a1)
{
}

void sub_1A67434C8(uint64_t a1)
{
}

void sub_1A67434F0(uint64_t a1)
{
}

void sub_1A6743514(uint64_t a1)
{
}

void sub_1A6743538(uint64_t a1)
{
}

void sub_1A674355C(uint64_t a1)
{
}

void sub_1A6743580(uint64_t a1)
{
}

void sub_1A674359C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = objc_msgSend(self, sel_sharedInstance);
  uint64_t v6 = (void *)sub_1A6891FD0();
  id v7 = objc_msgSend(v5, sel_regexForString_, v6);

  if (v7) {
    *a4 = v7;
  }
  else {
    __break(1u);
  }
}

uint64_t sub_1A6743634()
{
  return sub_1A6743AEC();
}

uint64_t sub_1A6743640(uint64_t a1)
{
  return sub_1A6743B40(a1, &OBJC_IVAR____TtC12TextToSpeech10SSMLParser_elementStack);
}

uint64_t (*sub_1A674364C())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1A67436A8()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12TextToSpeech10SSMLParser_currentUTF16Position;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t sub_1A67436F0(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC12TextToSpeech10SSMLParser_currentUTF16Position);
  uint64_t result = swift_beginAccess();
  void *v3 = a1;
  return result;
}

uint64_t (*sub_1A674373C())()
{
  return j_j__swift_endAccess;
}

id sub_1A6743798()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC12TextToSpeech10SSMLParser_ssml);
  swift_beginAccess();
  uint64_t v2 = *v1;

  return v2;
}

void sub_1A67437F0(void *a1)
{
  uint64_t v3 = (void **)(v1 + OBJC_IVAR____TtC12TextToSpeech10SSMLParser_ssml);
  swift_beginAccess();
  uint64_t v4 = *v3;
  void *v3 = a1;
}

uint64_t (*sub_1A6743844())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1A67438A0()
{
  uint64_t v1 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v2 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90);
  uint64_t v3 = v2();
  uint64_t v4 = (void *)(*(uint64_t (**)(void))((*v1 & *v0) + 0xA8))();
  id v5 = objc_msgSend(v4, sel_length);

  uint64_t result = v2();
  if (!__OFSUB__(v5, result)) {
    return v3;
  }
  __break(1u);
  return result;
}

void sub_1A6743964()
{
  uint64_t v1 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v2 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8))();
  uint64_t v3 = (*(uint64_t (**)(void))((*v1 & *v0) + 0xC0))();
  id v5 = objc_msgSend(v2, sel_substringWithRange_, v3, v4);

  if (!v5) {
    __break(1u);
  }
}

uint64_t sub_1A6743A20@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xD0))();
  *a2 = result;
  return result;
}

uint64_t sub_1A6743A7C(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xD8);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1A6743AE0()
{
  return sub_1A6743AEC();
}

uint64_t sub_1A6743AEC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A6743B34(uint64_t a1)
{
  return sub_1A6743B40(a1, &OBJC_IVAR____TtC12TextToSpeech10SSMLParser_roots);
}

uint64_t sub_1A6743B40(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(v2 + *a2);
  swift_beginAccess();
  void *v4 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1A6743B90())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1A6743BEC()
{
  uint64_t v1 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0);
  unint64_t v2 = v1();
  if (v2 >> 62) {
    uint64_t v3 = sub_1A6892EB0();
  }
  else {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v4 = swift_bridgeObjectRelease();
  if (v3 != 1) {
    return 0;
  }
  unint64_t v5 = ((uint64_t (*)(uint64_t))v1)(v4);
  unint64_t v6 = v5;
  if (!(v5 >> 62))
  {
    uint64_t result = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (result) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
  uint64_t result = sub_1A6892EB0();
  if (!result)
  {
LABEL_12:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_6:
  if ((v6 & 0xC000000000000001) != 0)
  {
    id v8 = (id)MEMORY[0x1AD0BFD30](0, v6);
    goto LABEL_9;
  }
  if (*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v8 = *(id *)(v6 + 32);
LABEL_9:
    id v9 = v8;
    swift_bridgeObjectRelease();
    return (uint64_t)v9;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A6743D10()
{
  return sub_1A6743D1C(&OBJC_IVAR____TtC12TextToSpeech10SSMLParser_preamble);
}

uint64_t sub_1A6743D1C(void *a1)
{
  unint64_t v2 = (uint64_t *)(v1 + *a1);
  swift_beginAccess();
  uint64_t v3 = *v2;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t sub_1A6743D70(uint64_t a1, uint64_t a2)
{
  return sub_1A6743D7C(a1, a2, &OBJC_IVAR____TtC12TextToSpeech10SSMLParser_preamble);
}

uint64_t sub_1A6743D7C(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v6 = (void *)(v3 + *a3);
  swift_beginAccess();
  *unint64_t v6 = a1;
  v6[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1A6743DD8())()
{
  return j_j__swift_endAccess;
}

id SSMLParser.__allocating_init(ssml:)()
{
  uint64_t v1 = (char *)objc_allocWithZone(v0);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  *(void *)&v1[OBJC_IVAR____TtC12TextToSpeech10SSMLParser_elementStack] = MEMORY[0x1E4FBC860];
  *(void *)&v1[OBJC_IVAR____TtC12TextToSpeech10SSMLParser_roots] = v2;
  uint64_t v3 = &v1[OBJC_IVAR____TtC12TextToSpeech10SSMLParser_preamble];
  *(void *)uint64_t v3 = 0;
  *((void *)v3 + 1) = 0;
  uint64_t v4 = v1;
  uint64_t v5 = sub_1A6891FD0();
  swift_bridgeObjectRelease();
  *(void *)&v4[OBJC_IVAR____TtC12TextToSpeech10SSMLParser_ssml] = v5;
  *(void *)&v4[OBJC_IVAR____TtC12TextToSpeech10SSMLParser_currentUTF16Position] = 0;

  v7.receiver = v4;
  v7.super_class = v0;
  return objc_msgSendSuper2(&v7, sel_init);
}

id SSMLParser.init(ssml:)()
{
  uint64_t v1 = MEMORY[0x1E4FBC860];
  *(void *)&v0[OBJC_IVAR____TtC12TextToSpeech10SSMLParser_elementStack] = MEMORY[0x1E4FBC860];
  *(void *)&v0[OBJC_IVAR____TtC12TextToSpeech10SSMLParser_roots] = v1;
  uint64_t v2 = &v0[OBJC_IVAR____TtC12TextToSpeech10SSMLParser_preamble];
  *(void *)uint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  uint64_t v3 = v0;
  uint64_t v4 = sub_1A6891FD0();
  swift_bridgeObjectRelease();
  *(void *)&v3[OBJC_IVAR____TtC12TextToSpeech10SSMLParser_ssml] = v4;
  *(void *)&v3[OBJC_IVAR____TtC12TextToSpeech10SSMLParser_currentUTF16Position] = 0;

  v6.receiver = v3;
  v6.super_class = (Class)type metadata accessor for SSMLParser();
  return objc_msgSendSuper2(&v6, sel_init);
}

uint64_t type metadata accessor for SSMLParser()
{
  return self;
}

id sub_1A6743FCC()
{
  return sub_1A67441D4(&qword_1E96C4F48, (id *)&qword_1E96D6128);
}

id sub_1A6743FF0()
{
  return sub_1A67441D4(&qword_1E96C4F58, (id *)&qword_1E96D6138);
}

uint64_t sub_1A6744014()
{
  if (qword_1E96C4F60 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v1 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v2 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8);
  id v3 = (id)qword_1E96D6140;
  uint64_t v4 = (void *)v2();
  uint64_t v5 = (*(uint64_t (**)(void))((*v1 & *v0) + 0xC0))();
  id v7 = objc_msgSend(v3, sel_firstMatchInString_options_range_, v4, 0, v5, v6);

  if (!v7) {
    return 0;
  }
  id v8 = objc_msgSend(v7, sel_range);

  id v9 = *(uint64_t (**)(void))((*v1 & *v0) + 0x90);
  uint64_t result = v9();
  if (!__OFSUB__(v8, result)) {
    return v9();
  }
  __break(1u);
  return result;
}

id sub_1A67441B0()
{
  return sub_1A67441D4(&qword_1E96C4F68, (id *)&qword_1E96D6148);
}

id sub_1A67441D4(void *a1, id *a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v4 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v5 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0xA8);
  id v6 = *a2;
  id v7 = (void *)v5();
  uint64_t v8 = (*(uint64_t (**)(void))((*v4 & *v2) + 0xC0))();
  id v10 = objc_msgSend(v6, sel_firstMatchInString_options_range_, v7, 0, v8, v9);

  return v10;
}

void *static SSMLParser.parse(ssml:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = (objc_class *)type metadata accessor for SSMLParser();
  id v3 = (char *)objc_allocWithZone(v2);
  uint64_t v4 = MEMORY[0x1E4FBC860];
  *(void *)&v3[OBJC_IVAR____TtC12TextToSpeech10SSMLParser_elementStack] = MEMORY[0x1E4FBC860];
  *(void *)&v3[OBJC_IVAR____TtC12TextToSpeech10SSMLParser_roots] = v4;
  uint64_t v5 = &v3[OBJC_IVAR____TtC12TextToSpeech10SSMLParser_preamble];
  *(void *)uint64_t v5 = 0;
  *((void *)v5 + 1) = 0;
  swift_bridgeObjectRetain();
  id v6 = v3;
  uint64_t v7 = sub_1A6891FD0();
  swift_bridgeObjectRelease();
  *(void *)&v6[OBJC_IVAR____TtC12TextToSpeech10SSMLParser_ssml] = v7;
  *(void *)&v6[OBJC_IVAR____TtC12TextToSpeech10SSMLParser_currentUTF16Position] = 0;

  v17.receiver = v6;
  v17.super_class = v2;
  uint64_t v8 = objc_msgSendSuper2(&v17, sel_init);
  uint64_t v9 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v10 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v8) + 0x130))();
  if (!v1)
  {
    uint64_t v11 = *(uint64_t (**)(uint64_t))((*v9 & *v8) + 0xD0);
    unint64_t v12 = v11(v10);
    uint64_t v9 = (void *)v12;
    if (v12 >> 62) {
      uint64_t v13 = sub_1A6892EB0();
    }
    else {
      uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v14 = swift_bridgeObjectRelease();
    if (v13)
    {
      uint64_t v9 = (void *)v11(v14);

      return v9;
    }
    sub_1A6746E24();
    swift_allocError();
    void *v16 = 0xD000000000000013;
    v16[1] = 0x80000001A68CC6B0;
    swift_willThrow();
  }

  return v9;
}

void *static SSMLParser.parseRootElement(ssml:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = (objc_class *)type metadata accessor for SSMLParser();
  id v3 = (char *)objc_allocWithZone(v2);
  uint64_t v4 = MEMORY[0x1E4FBC860];
  *(void *)&v3[OBJC_IVAR____TtC12TextToSpeech10SSMLParser_elementStack] = MEMORY[0x1E4FBC860];
  *(void *)&v3[OBJC_IVAR____TtC12TextToSpeech10SSMLParser_roots] = v4;
  uint64_t v5 = &v3[OBJC_IVAR____TtC12TextToSpeech10SSMLParser_preamble];
  *(void *)uint64_t v5 = 0;
  *((void *)v5 + 1) = 0;
  swift_bridgeObjectRetain();
  id v6 = v3;
  uint64_t v7 = sub_1A6891FD0();
  swift_bridgeObjectRelease();
  *(void *)&v6[OBJC_IVAR____TtC12TextToSpeech10SSMLParser_ssml] = v7;
  *(void *)&v6[OBJC_IVAR____TtC12TextToSpeech10SSMLParser_currentUTF16Position] = 0;

  v18.receiver = v6;
  v18.super_class = v2;
  uint64_t v8 = objc_msgSendSuper2(&v18, sel_init);
  uint64_t v9 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v10 = v8;
  uint64_t v11 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v8) + 0x130))();
  if (!v1)
  {
    uint64_t v12 = (*(uint64_t (**)(uint64_t))((*v9 & *v8) + 0xE8))(v11);
    if (v12)
    {
      uint64_t v10 = (void *)v12;

      return v10;
    }
    sub_1A6892C40();
    uint64_t v14 = sub_1A6892150();
    unint64_t v15 = (*(uint64_t (**)(uint64_t))((*v9 & *v8) + 0xD0))(v14);
    if (v15 >> 62) {
      uint64_t v16 = sub_1A6892EB0();
    }
    else {
      uint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    uint64_t v19 = v16;
    sub_1A68930E0();
    sub_1A6892150();
    swift_bridgeObjectRelease();
    sub_1A6892150();
    uint64_t v10 = 0;
    sub_1A6746E24();
    swift_allocError();
    void *v17 = 0;
    v17[1] = 0xE000000000000000;
    swift_willThrow();
  }

  return v10;
}

void sub_1A6744788()
{
  uint64_t v2 = v1;
  id v3 = v0;
  uint64_t v4 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v54 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90);
  if (!v54())
  {
    if (qword_1E96C4F40 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v5 = *(uint64_t (**)(void))((*v4 & *v0) + 0xA8);
    id v6 = (id)qword_1E96D6120;
    uint64_t v7 = (void *)v5();
    uint64_t v8 = (*(uint64_t (**)(void))((*v4 & *v0) + 0xC0))();
    id v10 = objc_msgSend(v6, sel_firstMatchInString_options_range_, v7, 0, v8, v9);

    if (v10)
    {
      uint64_t v11 = (void *)v5();
      id v12 = objc_msgSend(v10, sel_range);
      id v14 = objc_msgSend(v11, sel_substringWithRange_, v12, v13);

      uint64_t v15 = sub_1A6892000();
      uint64_t v17 = v16;

      (*(void (**)(uint64_t, uint64_t))((*v4 & *v3) + 0xF8))(v15, v17);
      objc_msgSend(v10, sel_range);
      uint64_t v19 = v18;
      BOOL v20 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))((*v4 & *v3) + 0xA0))(v55);
      if (__OFADD__(*v21, v19))
      {
        __break(1u);
        return;
      }
      *v21 += v19;
      v20(v55, 0);
    }
  }
  uint64_t v53 = *(uint64_t (**)(void))((*v4 & *v3) + 0xC8);
  char v22 = (void *)v53();
  uint64_t v23 = &selRef_compatibilityVersion;
  uint64_t v24 = (uint64_t)objc_msgSend(v22, sel_length);

  if (v24 >= 1)
  {
    do
    {
      uint64_t v30 = v54();
      uint64_t v31 = *(uint64_t (**)(void))((*v4 & *v3) + 0xA8);
      unint64_t v32 = (void *)v31();
      id v33 = v23;
      id v34 = [v32 v23[287]];

      if ((id)v30 == v34) {
        return;
      }
      if (qword_1E96C4F70 != -1) {
        swift_once();
      }
      swift_beginAccess();
      id v35 = (id)qword_1E96D6150;
      uint64_t v36 = (void *)v31();
      uint64_t v37 = (*(uint64_t (**)(void))((*v4 & *v3) + 0xC0))();
      id v39 = objc_msgSend(v35, sel_firstMatchInString_options_range_, v36, 0, v37, v38);

      if (v39) {
        return;
      }
      id v40 = (void *)(*(uint64_t (**)(void))((*v4 & *v3) + 0x110))();

      if (v40)
      {
        uint64_t v27 = (*(uint64_t (**)(void))((*v4 & *v3) + 0x140))();
        if (v2) {
          return;
        }
      }
      else
      {
        uint64_t v25 = (void *)(*(uint64_t (**)(void))((*v4 & *v3) + 0x118))();

        uint64_t v23 = v33;
        if (v25)
        {
          uint64_t v26 = v2;
          uint64_t v27 = (*(uint64_t (**)(void))((*v4 & *v3) + 0x148))();
          goto LABEL_11;
        }
        int v41 = (void *)(*(uint64_t (**)(void))((*v4 & *v3) + 0x128))();

        if (v41)
        {
          uint64_t v26 = v2;
          uint64_t v27 = (*(uint64_t (**)(void))((*v4 & *v3) + 0x150))();
LABEL_11:
          uint64_t v2 = v26;
          if (v26) {
            return;
          }
          goto LABEL_12;
        }
        uint64_t v42 = (*(uint64_t (**)(void))((*v4 & *v3) + 0x120))();
        if (v43)
        {
          unint64_t v56 = 0;
          unint64_t v57 = 0xE000000000000000;
          sub_1A6892C40();
          uint64_t v44 = swift_bridgeObjectRelease();
          unint64_t v56 = 0xD000000000000018;
          unint64_t v57 = 0x80000001A68CC720;
          uint64_t v45 = (void *)((uint64_t (*)(uint64_t))v53)(v44);
          id v46 = objc_msgSend(v45, sel_description);
          sub_1A6892000();

          sub_1A6892150();
          swift_bridgeObjectRelease();
          uint64_t v47 = sub_1A6892150();
          int v48 = (void *)((uint64_t (*)(uint64_t))v53)(v47);
          id v49 = [v48 (SEL)v33 + 408];

          id v58 = v49;
          sub_1A68930E0();
          sub_1A6892150();
          swift_bridgeObjectRelease();
          unint64_t v50 = v56;
          unint64_t v51 = v57;
          sub_1A6746E24();
          swift_allocError();
          *uint64_t v52 = v50;
          v52[1] = v51;
          swift_willThrow();
          return;
        }
        uint64_t v27 = (*(uint64_t (**)(uint64_t))((*v4 & *v3) + 0x158))(v42);
        if (v2) {
          return;
        }
      }
      uint64_t v23 = v33;
LABEL_12:
      int v28 = (void *)((uint64_t (*)(uint64_t))v53)(v27);
      id v29 = [v28 (SEL)v23 + 408];
    }
    while ((uint64_t)v29 > 0);
  }
}

uint64_t sub_1A6744EE0(void *a1)
{
  unint64_t v11 = sub_1A6742BA0(MEMORY[0x1E4FBC860]);
  if (qword_1E96C4F50 != -1) {
    swift_once();
  }
  swift_beginAccess();
  id v2 = (id)qword_1E96D6130;
  id v3 = objc_msgSend(a1, sel_length);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = &v11;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = sub_1A6746EB0;
  *(void *)(v5 + 24) = v4;
  void v10[4] = sub_1A674709C;
  v10[5] = v5;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 1107296256;
  v10[2] = sub_1A67450DC;
  v10[3] = &unk_1EFB80820;
  id v6 = _Block_copy(v10);
  id v7 = a1;
  swift_retain();
  swift_release();
  objc_msgSend(v2, sel_enumerateMatchesInString_options_range_usingBlock_, v7, 0, 0, v3, v6);

  _Block_release(v6);
  LOBYTE(v7) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v7)
  {
    __break(1u);
  }
  else
  {
    unint64_t v9 = v11;
    swift_release();
    return v9;
  }
  return result;
}

void sub_1A67450DC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = *(void (**)(void *, uint64_t, uint64_t))(a1 + 32);
  id v8 = a2;
  v7(a2, a3, a4);
}

void sub_1A6745150()
{
  uint64_t v1 = v0;
  id v2 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v3 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x110))();
  if (!v3)
  {
    sub_1A6746E24();
    swift_allocError();
    *id v49 = 0xD000000000000014;
    v49[1] = 0x80000001A68CC770;
    swift_willThrow();
    return;
  }
  uint64_t v4 = (void *)v3;
  uint64_t v5 = (void *)sub_1A6891FD0();
  id v69 = objc_msgSend(v4, sel_rangeWithName_, v5);
  id v65 = v6;

  objc_msgSend(v4, sel_range);
  id v7 = *(uint64_t (**)(void))((*v2 & *v1) + 0xA8);
  uint64_t v8 = v7();
  sub_1A6892000();

  uint64_t v9 = sub_1A6892810();
  uint64_t rawValue_8 = v10;
  uint64_t v64 = v9;
  LOBYTE(v8) = v11;
  uint64_t v12 = swift_bridgeObjectRelease();
  if (v8)
  {
    __break(1u);
  }
  else
  {
    uint64_t v13 = (void *)((uint64_t (*)(uint64_t))v7)(v12);
    id v14 = objc_msgSend(v13, sel_substringWithRange_, v69, v65);

    uint64_t v15 = sub_1A6892000();
    uint64_t v61 = v16;
    rawCFNumberRef Value = v15;

    uint64_t v17 = (void *)v7();
    uint64_t v18 = (void *)sub_1A6891FD0();
    id v66 = v4;
    id v19 = objc_msgSend(v4, sel_rangeWithName_, v18);
    uint64_t v21 = v20;

    id v22 = objc_msgSend(v17, sel_substringWithRange_, v19, v21);
    if (!v22)
    {
      sub_1A6892000();
      id v22 = (id)sub_1A6891FD0();
      uint64_t v23 = swift_bridgeObjectRelease();
    }
    ((void (*)(uint64_t))v7)(v23);
    unint64_t v24 = sub_1A6892080();
    unint64_t v26 = v25;
    unint64_t v27 = sub_1A68921E0();
    unint64_t v28 = v27;
    uint64_t v29 = (v24 >> 59) & 1;
    if ((v26 & 0x1000000000000000) == 0) {
      LOBYTE(v29) = 1;
    }
    if ((v27 & 0xC) == 4 << v29)
    {
      unint64_t v28 = sub_1A6747748(v27, v24, v26);
      __int16 v60 = v7;
      if ((v26 & 0x1000000000000000) == 0) {
        goto LABEL_9;
      }
    }
    else
    {
      __int16 v60 = v7;
      if ((v26 & 0x1000000000000000) == 0)
      {
LABEL_9:
        swift_bridgeObjectRelease();
        uint64_t v30 = v28 >> 16;
        goto LABEL_10;
      }
    }
    unint64_t v59 = v24 & 0xFFFFFFFFFFFFLL;
    if ((v26 & 0x2000000000000000) != 0) {
      unint64_t v59 = HIBYTE(v26) & 0xF;
    }
    if (v59 >= v28 >> 16)
    {
      uint64_t v30 = sub_1A68921B0();
      swift_bridgeObjectRelease();
LABEL_10:
      swift_bridgeObjectRetain();
      v31._uint64_t countAndFlagsBits = rawValue;
      v31._object = v61;
      SSMLTag.init(rawValue:)(v31);
      char v32 = v67;
      if (v67 == 16) {
        char v32 = 13;
      }
      LOBYTE(v67) = v32;
      id v33 = objc_allocWithZone((Class)type metadata accessor for ParsedSSMLNode());
      id v34 = sub_1A6743228((char *)&v67, rawValue, (uint64_t)v61, v64, rawValue_8, 0, 0, v30);
      id v35 = (void *)MEMORY[0x1E4FBC8C8];
      (*(void (**)(uint64_t, uint64_t, void))((*MEMORY[0x1E4FBC8C8] & *v34) + 0x138))(v64, rawValue_8, 0);
      uint64_t v36 = (*(uint64_t (**)(id))((*v35 & *v1) + 0x138))(v22);

      uint64_t v37 = (*(uint64_t (**)(uint64_t))((*v35 & *v34) + 0xF0))(v36);
      uint64_t v38 = (*(uint64_t (**)(uint64_t))((*v35 & *v1) + 0x90))(v37);
      id v39 = objc_msgSend(v66, sel_range);
      int v41 = &selRef_compatibilityVersion;
      if (__OFADD__(v39, v40))
      {
        __break(1u);
      }
      else
      {
        if (v38 >= (uint64_t)v39 + v40)
        {
          uint64_t v67 = 0;
          unint64_t v68 = 0xE000000000000000;
          sub_1A6892C40();
          uint64_t v50 = swift_bridgeObjectRelease();
          uint64_t v67 = 0x7320726573726150;
          unint64_t v68 = 0xEF2064656C6C6174;
          unint64_t v51 = (void *)((uint64_t (*)(uint64_t))v60)(v50);
          id v52 = objc_msgSend(v51, sel_description);
          sub_1A6892000();

          sub_1A6892150();
          swift_bridgeObjectRelease();
          uint64_t v53 = v67;
          unint64_t v54 = v68;
          sub_1A6746E24();
          swift_allocError();
          *uint64_t v55 = v53;
          v55[1] = v54;
          swift_willThrow();

          return;
        }
        uint64_t v42 = (char *)objc_msgSend(v66, sel_range);
        BOOL v44 = __OFADD__(v42, v43);
        uint64_t v45 = &v42[v43];
        if (!v44)
        {
          (*(void (**)(char *))((*v35 & *v1) + 0x98))(v45);
          id v46 = (void *)sub_1A6891FD0();
          objc_msgSend(v66, sel_rangeWithName_, v46);
          uint64_t v48 = v47;

          if (v48 >= 1)
          {
            (*(void (**)(void *))((*v35 & *v1) + 0x160))(v34);

            return;
          }
          unint64_t v56 = *(uint64_t (**)(uint64_t *))((*v35 & *v1) + 0x88);
          int v41 = v34;
          uint64_t v1 = (void *)v56(&v67);
          id v58 = v57;
          MEMORY[0x1AD0BF380]();
          if (*(void *)((*v58 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((*v58 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            goto LABEL_20;
          }
          goto LABEL_28;
        }
      }
      __break(1u);
LABEL_28:
      sub_1A6892320();
LABEL_20:
      sub_1A6892360();
      sub_1A6892300();
      ((void (*)(uint64_t *, void))v1)(&v67, 0);

      return;
    }
  }
  __break(1u);
}

void sub_1A6745890()
{
  uint64_t v1 = v0;
  id v2 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v3 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x118))();
  if (!v3)
  {
    sub_1A6746E24();
    swift_allocError();
    void *v32 = 0xD000000000000014;
    v32[1] = 0x80000001A68CC770;
    swift_willThrow();
    return;
  }
  uint64_t v4 = (void *)v3;
  unint64_t v5 = (*(uint64_t (**)(void))((*v2 & *v0) + 0x78))();
  if (v5 >> 62) {
    uint64_t v6 = sub_1A6892EB0();
  }
  else {
    uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (!v6)
  {
    sub_1A6892C40();
    swift_bridgeObjectRelease();
    unint64_t v59 = 0xD000000000000029;
    unint64_t v60 = 0x80000001A68CC7B0;
    id v33 = objc_msgSend(v4, sel_description);
    sub_1A6892000();

    sub_1A6892150();
    swift_bridgeObjectRelease();
    uint64_t v13 = v4;
    sub_1A6746E24();
    swift_allocError();
    void *v34 = 0xD000000000000029;
    v34[1] = 0x80000001A68CC7B0;
    swift_willThrow();
    goto LABEL_27;
  }
  uint64_t v8 = (char **)(*(uint64_t (**)(unint64_t *))((*v2 & *v0) + 0x88))(&v59);
  uint64_t v9 = v7;
  if (!(*v7 >> 62))
  {
    if (*(void *)((*v7 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_7;
    }
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  swift_bridgeObjectRetain();
  uint64_t v56 = sub_1A6892EB0();
  swift_bridgeObjectRelease();
  if (!v56) {
    goto LABEL_30;
  }
LABEL_7:
  sub_1A674785C();
  if (v10) {
    goto LABEL_11;
  }
  if (*v9 >> 62) {
    goto LABEL_33;
  }
  uint64_t v11 = *(void *)((*v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  unint64_t v12 = v11 - 1;
  if (__OFSUB__(v11, 1))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  while (1)
  {
    sub_1A67477C4(v12);
LABEL_11:
    uint64_t v13 = v10;
    uint64_t v14 = ((uint64_t (*)(unint64_t *, void))v8)(&v59, 0);
    uint64_t v61 = *(uint64_t (**)(void))((*v2 & *v1) + 0xA8);
    uint64_t v15 = (void *)((uint64_t (*)(uint64_t))v61)(v14);
    uint64_t v16 = (void *)sub_1A6891FD0();
    id v58 = v4;
    id v17 = objc_msgSend(v4, sel_rangeWithName_, v16);
    uint64_t v19 = v18;

    id v20 = objc_msgSend(v15, sel_substringWithRange_, v17, v19);
    uint64_t v21 = sub_1A6892000();
    uint64_t v23 = v22;

    unint64_t v24 = *(uint64_t (**)(void))((*v2 & *v13) + 0xD0);
    if (v24() == v21 && v25 == v23)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v27 = sub_1A6893120();
      swift_bridgeObjectRelease();
      if ((v27 & 1) == 0)
      {
        unint64_t v59 = 0;
        unint64_t v60 = 0xE000000000000000;
        sub_1A6892C40();
        uint64_t v28 = swift_bridgeObjectRelease();
        unint64_t v59 = 0xD000000000000017;
        unint64_t v60 = 0x80000001A68CC790;
        ((void (*)(uint64_t))v24)(v28);
        sub_1A6892150();
        swift_bridgeObjectRelease();
        sub_1A6892150();
        sub_1A6892150();
        swift_bridgeObjectRelease();
        unint64_t v29 = v59;
        unint64_t v30 = v60;
        sub_1A6746E24();
        swift_allocError();
        *Swift::String v31 = v29;
        v31[1] = v30;
        swift_willThrow();

        goto LABEL_27;
      }
    }
    swift_bridgeObjectRelease();
    objc_msgSend(v4, sel_range);
    uint64_t v35 = v61();
    sub_1A6892000();
    id v2 = v36;

    uint64_t v8 = (char **)sub_1A6892810();
    unint64_t v38 = v37;
    LOBYTE(v35) = v39;
    uint64_t v40 = swift_bridgeObjectRelease();
    if (v35) {
      goto LABEL_37;
    }
    int v41 = (void *)MEMORY[0x1E4FBC8C8];
    if (v38 >> 14 >= (unint64_t)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v13) + 0x118))(v40) >> 14) {
      break;
    }
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    swift_bridgeObjectRetain();
    uint64_t v57 = sub_1A6892EB0();
    swift_bridgeObjectRelease();
    unint64_t v12 = v57 - 1;
    if (__OFSUB__(v57, 1)) {
      goto LABEL_35;
    }
  }
  (*(void (**)(void))((*v41 & *v13) + 0x120))();
  (*(void (**)(char **, unint64_t, void))((*v41 & *v13) + 0x150))(v8, v38, 0);
  uint64_t v42 = (*(uint64_t (**)(void *))((*v41 & *v1) + 0x160))(v13);
  uint64_t v43 = (*(uint64_t (**)(uint64_t))((*v41 & *v1) + 0x90))(v42);
  uint64_t v8 = &selRef_compatibilityVersion;
  id v44 = objc_msgSend(v4, sel_range);
  if (__OFADD__(v44, v45)) {
    goto LABEL_32;
  }
  if (v43 >= (uint64_t)v44 + v45)
  {
    unint64_t v59 = 0;
    unint64_t v60 = 0xE000000000000000;
    sub_1A6892C40();
    uint64_t v50 = swift_bridgeObjectRelease();
    unint64_t v59 = 0x7320726573726150;
    unint64_t v60 = 0xEF2064656C6C6174;
    unint64_t v51 = (void *)((uint64_t (*)(uint64_t))v61)(v50);
    id v52 = objc_msgSend(v51, sel_description);
    sub_1A6892000();

    sub_1A6892150();
    swift_bridgeObjectRelease();
    unint64_t v53 = v59;
    unint64_t v54 = v60;
    sub_1A6746E24();
    swift_allocError();
    *uint64_t v55 = v53;
    v55[1] = v54;
    swift_willThrow();

LABEL_27:
  }
  else
  {
    id v46 = (char *)objc_msgSend(v4, sel_range);
    BOOL v48 = __OFADD__(v46, v47);
    id v49 = &v46[v47];
    if (!v48)
    {
      (*(void (**)(char *))((*v41 & *v1) + 0x98))(v49);

      goto LABEL_27;
    }
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
  }
}

void sub_1A6746088()
{
  uint64_t v1 = v0;
  id v2 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v3 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x128))();
  if (!v3)
  {
    sub_1A6746E24();
    swift_allocError();
    void *v12 = 0xD000000000000014;
    v12[1] = 0x80000001A68CC770;
    swift_willThrow();
    return;
  }
  uint64_t v4 = (void *)v3;
  uint64_t v5 = (*(uint64_t (**)(void))((*v2 & *v0) + 0x90))();
  id v6 = objc_msgSend(v4, sel_range);
  if (__OFADD__(v6, v7))
  {
    __break(1u);
  }
  else
  {
    if (v5 >= (uint64_t)v6 + v7)
    {
      sub_1A6892C40();
      uint64_t v13 = swift_bridgeObjectRelease();
      uint64_t v14 = (void *)(*(uint64_t (**)(uint64_t))((*v2 & *v1) + 0xA8))(v13);
      id v15 = objc_msgSend(v14, sel_description);
      sub_1A6892000();

      sub_1A6892150();
      swift_bridgeObjectRelease();
      sub_1A6746E24();
      swift_allocError();
      void *v16 = 0x7320726573726150;
      v16[1] = 0xEF2064656C6C6174;
      swift_willThrow();

      return;
    }
    uint64_t v8 = (char *)objc_msgSend(v4, sel_range);
    BOOL v10 = __OFADD__(v8, v9);
    uint64_t v11 = &v8[v9];
    if (!v10)
    {
      (*(void (**)(char *))((*v2 & *v1) + 0x98))(v11);

      return;
    }
  }
  __break(1u);
}

int64_t sub_1A67462EC()
{
  uint64_t v1 = v0;
  id v2 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v3 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x120))();
  if (v5)
  {
    sub_1A6746E24();
    swift_allocError();
    *unint64_t v30 = 0xD000000000000014;
    unint64_t v31 = 0x80000001A68CC770;
LABEL_13:
    v30[1] = v31;
    return swift_willThrow();
  }
  uint64_t v6 = v3;
  uint64_t v7 = v4;
  uint64_t v8 = *(uint64_t (**)(void))((*v2 & *v0) + 0xA8);
  uint64_t v9 = v8();
  sub_1A6892000();

  uint64_t v10 = sub_1A6892810();
  uint64_t v37 = v11;
  LOBYTE(v9) = v12;
  int64_t result = swift_bridgeObjectRelease();
  if (v9) {
    goto LABEL_20;
  }
  uint64_t v40 = v8;
  ((void (*)(int64_t))v8)(result);
  unint64_t v14 = sub_1A6892080();
  unint64_t v16 = v15;
  int64_t result = sub_1A68921E0();
  unint64_t v17 = result;
  uint64_t v18 = (v14 >> 59) & 1;
  if ((v16 & 0x1000000000000000) == 0) {
    LOBYTE(v18) = 1;
  }
  if ((result & 0xC) == 4 << v18)
  {
    int64_t result = sub_1A6747748(result, v14, v16);
    unint64_t v17 = result;
    if ((v16 & 0x1000000000000000) == 0) {
      goto LABEL_7;
    }
LABEL_15:
    unint64_t v36 = v14 & 0xFFFFFFFFFFFFLL;
    if ((v16 & 0x2000000000000000) != 0) {
      unint64_t v36 = HIBYTE(v16) & 0xF;
    }
    if (v36 < v17 >> 16) {
      goto LABEL_21;
    }
    uint64_t v20 = sub_1A68921B0();
    uint64_t v19 = swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  if ((v16 & 0x1000000000000000) != 0) {
    goto LABEL_15;
  }
LABEL_7:
  uint64_t v19 = swift_bridgeObjectRelease();
  uint64_t v20 = v17 >> 16;
LABEL_8:
  LOBYTE(v38) = 15;
  uint64_t v21 = (void *)((uint64_t (*)(uint64_t))v40)(v19);
  id v22 = objc_msgSend(v21, sel_substringWithRange_, v6, v7);

  uint64_t v23 = sub_1A6892000();
  uint64_t v25 = v24;

  id v26 = objc_allocWithZone((Class)type metadata accessor for ParsedSSMLNode());
  id v27 = sub_1A6743228((char *)&v38, 0, 0xE000000000000000, v10, v37, v23, v25, v20);
  uint64_t v28 = (void *)MEMORY[0x1E4FBC8C8];
  (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x160))();

  uint64_t v29 = (*(uint64_t (**)(void))((*v28 & *v1) + 0x90))();
  int64_t result = v6 + v7;
  if (!__OFADD__(v6, v7))
  {
    if (v29 < result) {
      return (*(uint64_t (**)(void))((*v28 & *v1) + 0x98))();
    }
    uint64_t v38 = 0;
    unint64_t v39 = 0xE000000000000000;
    sub_1A6892C40();
    uint64_t v32 = swift_bridgeObjectRelease();
    uint64_t v38 = 0x7320726573726150;
    unint64_t v39 = 0xEF2064656C6C6174;
    id v33 = (void *)((uint64_t (*)(uint64_t))v40)(v32);
    id v34 = objc_msgSend(v33, sel_description);
    sub_1A6892000();

    sub_1A6892150();
    swift_bridgeObjectRelease();
    uint64_t v35 = v38;
    unint64_t v31 = v39;
    sub_1A6746E24();
    swift_allocError();
    *unint64_t v30 = v35;
    goto LABEL_13;
  }
  __break(1u);
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
  return result;
}

void sub_1A674672C(void *a1)
{
  id v2 = v1;
  uint64_t v4 = (void *)MEMORY[0x1E4FBC8C8];
  char v5 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x78);
  unint64_t v6 = v5();
  if (v6 >> 62) {
    uint64_t v7 = sub_1A6892EB0();
  }
  else {
    uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v8 = swift_bridgeObjectRelease();
  if (v7)
  {
    unint64_t v9 = ((uint64_t (*)(uint64_t))v5)(v8);
    unint64_t v10 = v9;
    if (v9 >> 62) {
      uint64_t v11 = sub_1A6892EB0();
    }
    else {
      uint64_t v11 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v12 = swift_bridgeObjectRelease();
    BOOL v13 = __OFSUB__(v11, 1);
    unint64_t v14 = v11 - 1;
    if (v13)
    {
      __break(1u);
    }
    else
    {
      uint64_t v15 = ((uint64_t (*)(uint64_t))v5)(v12);
      unint64_t v10 = v15;
      if ((v15 & 0xC000000000000001) == 0)
      {
        if ((v14 & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if (v14 < *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          id v16 = *(id *)(v15 + 8 * v14 + 32);
          goto LABEL_11;
        }
        __break(1u);
        goto LABEL_29;
      }
    }
    id v16 = (id)MEMORY[0x1AD0BFD30](v14, v10);
LABEL_11:
    id v17 = v16;
    swift_bridgeObjectRelease();
    uint64_t v18 = (*(uint64_t (**)(id))((*v4 & *a1) + 0xA8))(v17);
    unint64_t v19 = ((uint64_t (*)(uint64_t))v5)(v18);
    unint64_t v10 = v19;
    if (!(v19 >> 62))
    {
      uint64_t v20 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_13;
    }
LABEL_29:
    uint64_t v20 = sub_1A6892EB0();
LABEL_13:
    uint64_t v21 = swift_bridgeObjectRelease();
    BOOL v13 = __OFSUB__(v20, 1);
    unint64_t v22 = v20 - 1;
    if (v13)
    {
      __break(1u);
    }
    else
    {
      uint64_t v23 = ((uint64_t (*)(uint64_t))v5)(v21);
      unint64_t v10 = v23;
      if ((v23 & 0xC000000000000001) == 0)
      {
        if ((v22 & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if (v22 < *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          uint64_t v24 = *(id *)(v23 + 8 * v22 + 32);
          goto LABEL_18;
        }
        __break(1u);
        goto LABEL_34;
      }
    }
    uint64_t v24 = (void *)MEMORY[0x1AD0BFD30](v22, v10);
LABEL_18:
    id v2 = v24;
    swift_bridgeObjectRelease();
    uint64_t v25 = *(uint64_t (**)(unsigned char *))((*v4 & *v2) + 0x110);
    id v26 = a1;
    a1 = (void *)v25(v34);
    uint64_t v28 = v27;
    MEMORY[0x1AD0BF380]();
    if (*(void *)((*v28 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((*v28 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    {
LABEL_19:
      sub_1A6892360();
      sub_1A6892300();
      ((void (*)(unsigned char *, void))a1)(v34, 0);

      return;
    }
LABEL_34:
    sub_1A6892320();
    goto LABEL_19;
  }
  uint64_t v29 = *(uint64_t (**)(unsigned char *))((*v4 & *v1) + 0xE0);
  unint64_t v30 = a1;
  unint64_t v31 = (void (*)(unsigned char *, void))v29(v34);
  id v33 = v32;
  MEMORY[0x1AD0BF380]();
  if (*(void *)((*v33 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v33 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_1A6892320();
  }
  sub_1A6892360();
  sub_1A6892300();
  v31(v34, 0);
}

id SSMLParser.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void SSMLParser.init()()
{
}

id SSMLParser.__deallocating_deinit()
{
  return sub_1A6746B64(type metadata accessor for SSMLParser);
}

id sub_1A6746B64(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

unint64_t ParsedSSMLNode.printNode(_:indent:)(uint64_t a1, uint64_t a2)
{
  return sub_1A6747948(a2);
}

uint64_t ParsedSSMLNode.description.getter()
{
  id v1 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v2 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x178))();
  if (!v3) {
    (*(void (**)(uint64_t))((*v1 & *v0) + 0xD0))(v2);
  }
  sub_1A6892150();
  swift_bridgeObjectRelease();
  uint64_t v4 = sub_1A6892150();
  (*(void (**)(uint64_t))((*v1 & *v0) + 0x118))(v4);
  sub_1A6892DC0();
  sub_1A6892150();
  sub_1A6892DC0();
  sub_1A6892150();
  swift_bridgeObjectRelease();
  sub_1A6892150();
  return 60;
}

unint64_t sub_1A6746E24()
{
  unint64_t result = qword_1E96C1C88;
  if (!qword_1E96C1C88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E96C1C88);
  }
  return result;
}

uint64_t sub_1A6746E78()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1A6746EB0(void *a1)
{
  if (!a1) {
    return sub_1A6891600();
  }
  uint64_t v3 = *(void **)(v1 + 16);
  uint64_t v4 = *(uint64_t **)(v1 + 24);
  char v5 = (void *)sub_1A6891FD0();
  id v6 = objc_msgSend(a1, sel_rangeWithName_, v5);
  uint64_t v8 = v7;

  if (v6 != (id)sub_1A6891600()
    || (unint64_t v9 = (void *)sub_1A6891FD0(),
        id v6 = objc_msgSend(a1, sel_rangeWithName_, v9),
        uint64_t v8 = v10,
        v9,
        uint64_t result = sub_1A6891600(),
        v6 != (id)result))
  {
    uint64_t v12 = (void *)sub_1A6891FD0();
    id v13 = objc_msgSend(a1, sel_rangeWithName_, v12);
    uint64_t v15 = v14;

    id v16 = objc_msgSend(v3, sel_substringWithRange_, v13, v15);
    uint64_t v17 = sub_1A6892000();
    uint64_t v19 = v18;

    id v20 = objc_msgSend(v3, sel_substringWithRange_, v6, v8);
    uint64_t v21 = sub_1A6892000();
    uint64_t v23 = v22;

    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v25 = *v4;
    uint64_t *v4 = 0x8000000000000000;
    sub_1A6747404(v21, v23, v17, v19, isUniquelyReferenced_nonNull_native);
    uint64_t *v4 = v25;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1A674708C()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1A674709C()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1A67470C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1A67470D4()
{
  return swift_release();
}

uint64_t sub_1A67470DC(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1A6741AD0(&qword_1E96C1580);
  char v42 = a2;
  uint64_t v6 = sub_1A6892ED0();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  unint64_t v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    uint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    uint64_t v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    uint64_t v34 = *v32;
    uint64_t v33 = v32[1];
    uint64_t v35 = (uint64_t *)(*(void *)(v5 + 56) + v31);
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_1A6893200();
    sub_1A68920F0();
    uint64_t result = sub_1A6893250();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v16 == v28;
        if (v16 == v28) {
          unint64_t v16 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = 16 * v17;
    uint64_t v19 = (void *)(*(void *)(v7 + 48) + v18);
    *uint64_t v19 = v34;
    v19[1] = v33;
    id v20 = (void *)(*(void *)(v7 + 56) + v18);
    *id v20 = v36;
    v20[1] = v37;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  uint64_t v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v24 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1A6747404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_1A673F7AC(a3, a4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_1A674758C();
LABEL_7:
    id v20 = (void *)*v6;
    if (v18)
    {
LABEL_8:
      unint64_t v21 = (void *)(v20[7] + 16 * v14);
      uint64_t result = swift_bridgeObjectRelease();
      *unint64_t v21 = a1;
      v21[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  sub_1A67470DC(v17, a5 & 1);
  unint64_t v23 = sub_1A673F7AC(a3, a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_17:
    uint64_t result = sub_1A6893150();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  id v20 = (void *)*v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  unint64_t v25 = (uint64_t *)(v20[6] + 16 * v14);
  *unint64_t v25 = a3;
  v25[1] = a4;
  int64_t v26 = (void *)(v20[7] + 16 * v14);
  *int64_t v26 = a1;
  v26[1] = a2;
  uint64_t v27 = v20[2];
  BOOL v28 = __OFADD__(v27, 1);
  uint64_t v29 = v27 + 1;
  if (v28)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  long long v20[2] = v29;

  return swift_bridgeObjectRetain();
}

void *sub_1A674758C()
{
  uint64_t v1 = v0;
  sub_1A6741AD0(&qword_1E96C1580);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1A6892EC0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    id v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    unint64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    void *v23 = v19;
    v23[1] = v18;
    char v24 = (void *)(*(void *)(v4 + 56) + v16);
    *char v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1A6747748(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = sub_1A68921E0();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = MEMORY[0x1AD0BF260](15, a1 >> 16);
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

void sub_1A67477C4(unint64_t a1)
{
  unint64_t v3 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  unint64_t *v1 = v3;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v3 & 0x8000000000000000) != 0
    || (v3 & 0x4000000000000000) != 0)
  {
    sub_1A67478CC(v3);
    unint64_t v3 = v5;
    unint64_t *v1 = v5;
  }
  unint64_t v6 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = v6 - 1;
    memmove((void *)((v3 & 0xFFFFFFFFFFFFFF8) + 8 * a1 + 32), (const void *)((v3 & 0xFFFFFFFFFFFFFF8) + 8 * a1 + 40), 8 * (v6 - 1 - a1));
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v7;
    sub_1A6892300();
  }
}

void sub_1A674785C()
{
  unint64_t v1 = *v0;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v0 = v1;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v1 & 0x8000000000000000) != 0
    || (v1 & 0x4000000000000000) != 0)
  {
    sub_1A67478CC(v1);
    unint64_t v1 = v3;
    *uint64_t v0 = v3;
  }
  uint64_t v4 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v4 - 1;
    sub_1A6892300();
  }
  else
  {
    __break(1u);
  }
}

void sub_1A67478CC(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_1A6892EB0();
    swift_bridgeObjectRelease();
  }

  JUMPOUT(0x1AD0BFD40);
}

unint64_t sub_1A6747948(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_1A6748030();
  uint64_t v4 = MEMORY[0x1E4FBB1A0];
  uint64_t v5 = sub_1A6892AC0();
  uint64_t v7 = v6;
  id v8 = objc_msgSend(v2, sel_description, 45, 0xE100000000000000, 0, 0xE000000000000000);
  sub_1A6892000();

  swift_bridgeObjectRetain();
  sub_1A6892150();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1A6741AD0(&qword_1E96C1728);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1A689DC40;
  *(void *)(v9 + 56) = v4;
  *(void *)(v9 + 32) = v5;
  *(void *)(v9 + 40) = v7;
  sub_1A68931D0();
  uint64_t v10 = swift_bridgeObjectRelease();
  unint64_t result = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x100))(v10);
  unint64_t v12 = result;
  if (!(result >> 62))
  {
    uint64_t v13 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v13) {
      goto LABEL_3;
    }
    return swift_bridgeObjectRelease();
  }
  unint64_t result = sub_1A6892EB0();
  uint64_t v13 = result;
  if (!result) {
    return swift_bridgeObjectRelease();
  }
LABEL_3:
  BOOL v14 = __OFADD__(a1, 1);
  uint64_t v15 = a1 + 1;
  if (v14)
  {
    __break(1u);
  }
  else if (v13 >= 1)
  {
    for (uint64_t i = 0; i != v13; ++i)
    {
      if ((v12 & 0xC000000000000001) != 0) {
        id v17 = (id)MEMORY[0x1AD0BFD30](i, v12);
      }
      else {
        id v17 = *(id *)(v12 + 8 * i + 32);
      }
      uint64_t v18 = v17;
      sub_1A6747948(v15);
    }
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

unsigned char *initializeBufferWithCopyOfBuffer for TTSSpeechQueue.State(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for SSMLTag(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF1) {
    goto LABEL_17;
  }
  if (a2 + 15 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 15) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 15;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 15;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 15;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x10;
  int v8 = v6 - 16;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SSMLTag(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 15 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 15) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF1) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF0)
  {
    unsigned int v6 = ((a2 - 241) >> 8) + 1;
    *unint64_t result = a2 + 15;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A6747CD4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 15;
        break;
    }
  }
  return result;
}

uint64_t sub_1A6747CFC(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_1A6747D04(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for SSMLTag()
{
  return &type metadata for SSMLTag;
}

void *initializeBufferWithCopyOfBuffer for SSMLParserError(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for SSMLParserError()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for SSMLParserError(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for SSMLParserError(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void *assignWithTake for SSMLParserError(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SSMLParserError(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SSMLParserError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_1A6747E5C()
{
  return 0;
}

ValueMetadata *type metadata accessor for SSMLParserError()
{
  return &type metadata for SSMLParserError;
}

uint64_t method lookup function for ParsedSSMLNode(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ParsedSSMLNode);
}

uint64_t method lookup function for SSMLParser(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SSMLParser);
}

uint64_t dispatch thunk of SSMLParser.roots.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of SSMLParser.roots.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of SSMLParser.roots.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of SSMLParser.root.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of SSMLParser.__allocating_init(ssml:)()
{
  return (*(uint64_t (**)(void))(v0 + 264))();
}

uint64_t dispatch thunk of SSMLParser.parse()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x130))();
}

void type metadata accessor for MatchingFlags()
{
  if (!qword_1E96C1C90)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1E96C1C90);
    }
  }
}

unint64_t sub_1A6748030()
{
  unint64_t result = qword_1EB67A290;
  if (!qword_1EB67A290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB67A290);
  }
  return result;
}

uint64_t TTSMarkup.Phoneme.accept<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v4 = *((unsigned char *)v3 + 8);
  uint64_t v5 = v3[2];
  uint64_t v6 = v3[3];
  uint64_t v8 = *v3;
  char v9 = v4;
  uint64_t v10 = v5;
  uint64_t v11 = v6;
  long long v12 = *((_OWORD *)v3 + 2);
  return (*(uint64_t (**)(uint64_t *))(a3 + 56))(&v8);
}

uint64_t TTSMarkup.Phoneme.init(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  char v4 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v5 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0xE8);
  uint64_t v6 = v5();
  if (!*(void *)(v6 + 16) || (unint64_t v7 = sub_1A673F7AC(26736, 0xE200000000000000), (v8 & 1) == 0))
  {

    uint64_t result = swift_bridgeObjectRelease();
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    return result;
  }
  char v9 = (uint64_t *)(*(void *)(v6 + 56) + 16 * v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  swift_bridgeObjectRetain();
  uint64_t v12 = swift_bridgeObjectRelease();
  if (*(void *)(((uint64_t (*)(uint64_t))v5)(v12) + 16)
    && (sub_1A673F7AC(0x7465626168706C61, 0xE800000000000000), (v13 & 1) != 0))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v14 = sub_1A6892F30();
    swift_bridgeObjectRelease();
    BOOL v15 = v14 == 1;
  }
  else
  {
    swift_bridgeObjectRelease();
    BOOL v15 = 0;
  }
  id v17 = *(uint64_t (**)(uint64_t))((*v4 & *a1) + 0x100);
  uint64_t v18 = swift_bridgeObjectRetain();
  unint64_t v19 = v17(v18);
  unint64_t v20 = v19;
  if (v19 >> 62)
  {
    uint64_t result = sub_1A6892EB0();
    if (result) {
      goto LABEL_10;
    }
LABEL_15:

    swift_bridgeObjectRelease();
    uint64_t v24 = 0;
    uint64_t v26 = 0;
    goto LABEL_16;
  }
  uint64_t result = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!result) {
    goto LABEL_15;
  }
LABEL_10:
  if ((v20 & 0xC000000000000001) != 0)
  {
    uint64_t v21 = (void *)MEMORY[0x1AD0BFD30](0, v20);
  }
  else
  {
    if (!*(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return result;
    }
    uint64_t v21 = *(id *)(v20 + 32);
  }
  uint64_t v22 = v21;
  uint64_t v23 = swift_bridgeObjectRelease();
  uint64_t v24 = (*(uint64_t (**)(uint64_t))((*v4 & *v22) + 0x178))(v23);
  uint64_t v26 = v25;

LABEL_16:
  *(void *)a2 = MEMORY[0x1E4FBC860];
  *(unsigned char *)(a2 + 8) = v15;
  *(void *)(a2 + 16) = v11;
  *(void *)(a2 + 24) = v10;
  *(void *)(a2 + 32) = v24;
  *(void *)(a2 + 40) = v26;

  return swift_bridgeObjectRelease();
}

uint64_t TTSMarkup.Phoneme.Alphabet.init(rawValue:)@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_1A6892F30();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

void static TTSMarkup.Phoneme.tag.getter(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t TTSMarkup.Phoneme.eventTaps.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t TTSMarkup.Phoneme.eventTaps.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v1 = a1;
  return result;
}

uint64_t (*TTSMarkup.Phoneme.eventTaps.modify())()
{
  return nullsub_19;
}

unint64_t TTSMarkup.Phoneme.attributes.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  sub_1A6741AD0(&qword_1E96C1588);
  uint64_t inited = swift_initStackObject();
  uint64_t v5 = inited;
  *(_OWORD *)(inited + 16) = xmmword_1A689DE50;
  *(void *)(inited + 32) = 0x7465626168706C61;
  *(void *)(inited + 40) = 0xE800000000000000;
  uint64_t v6 = 6385769;
  if (v1) {
    uint64_t v6 = 0x61706D61732D78;
  }
  unint64_t v7 = 0xE300000000000000;
  if (v1) {
    unint64_t v7 = 0xE700000000000000;
  }
  *(void *)(inited + 48) = v6;
  *(void *)(inited + 56) = v7;
  *(void *)(inited + 64) = 26736;
  *(void *)(inited + 72) = 0xE200000000000000;
  *(void *)(inited + 80) = v3;
  *(void *)(inited + 88) = v2;
  swift_bridgeObjectRetain();
  return sub_1A6742BA0(v5);
}

uint64_t TTSMarkup.Phoneme.Alphabet.rawValue.getter()
{
  if (*v0) {
    return 0x61706D61732D78;
  }
  else {
    return 6385769;
  }
}

uint64_t TTSMarkup.Phoneme.Alphabet.description.getter()
{
  if (*v0) {
    return 0x61706D61732D78;
  }
  else {
    return 6385769;
  }
}

uint64_t sub_1A6748588(char *a1, char *a2)
{
  return sub_1A6748594(*a1, *a2);
}

uint64_t sub_1A6748594(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x61706D61732D78;
  }
  else {
    uint64_t v3 = 6385769;
  }
  if (v2) {
    unint64_t v4 = 0xE300000000000000;
  }
  else {
    unint64_t v4 = 0xE700000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x61706D61732D78;
  }
  else {
    uint64_t v5 = 6385769;
  }
  if (a2) {
    unint64_t v6 = 0xE700000000000000;
  }
  else {
    unint64_t v6 = 0xE300000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = sub_1A6893120();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1A6748634()
{
  return sub_1A6893250();
}

uint64_t sub_1A67486B0()
{
  sub_1A68920F0();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1A6748718()
{
  return sub_1A6893250();
}

uint64_t sub_1A6748790@<X0>(char *a1@<X8>)
{
  return TTSMarkup.Phoneme.Alphabet.init(rawValue:)(a1);
}

void sub_1A674879C(uint64_t *a1@<X8>)
{
  uint64_t v2 = 6385769;
  if (*v1) {
    uint64_t v2 = 0x61706D61732D78;
  }
  unint64_t v3 = 0xE300000000000000;
  if (*v1) {
    unint64_t v3 = 0xE700000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1A67487D4()
{
  if (*v0) {
    return 0x61706D61732D78;
  }
  else {
    return 6385769;
  }
}

char *TTSMarkup.Phoneme.init(alphabet:phonemes:orthography:)@<X0>(char *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char v6 = *result;
  *(void *)a6 = MEMORY[0x1E4FBC860];
  *(unsigned char *)(a6 + 8) = v6;
  *(void *)(a6 + 16) = a2;
  *(void *)(a6 + 24) = a3;
  *(void *)(a6 + 32) = a4;
  *(void *)(a6 + 40) = a5;
  return result;
}

double TTSMarkup.Phoneme.content.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 40);
  if (v3)
  {
    uint64_t v4 = *(void *)(v1 + 32);
    *(void *)(a1 + 24) = &type metadata for TTSMarkup.SpeechText;
    *(void *)(a1 + 32) = &protocol witness table for TTSMarkup.SpeechText;
    uint64_t v5 = swift_allocObject();
    char v6 = (void *)(v5 + 16);
    *(void *)a1 = v5;
    swift_bridgeObjectRetain();
    TTSMarkup.SpeechText.init(_:)(v4, v3, v6);
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

void sub_1A67488B4(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

double sub_1A67488C4@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 40);
  if (v3)
  {
    uint64_t v4 = *(void *)(v1 + 32);
    *(void *)(a1 + 24) = &type metadata for TTSMarkup.SpeechText;
    *(void *)(a1 + 32) = &protocol witness table for TTSMarkup.SpeechText;
    uint64_t v5 = swift_allocObject();
    char v6 = (void *)(v5 + 16);
    *(void *)a1 = v5;
    swift_bridgeObjectRetain();
    TTSMarkup.SpeechText.init(_:)(v4, v3, v6);
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t sub_1A674895C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A6748964(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v1 = a1;
  return result;
}

uint64_t (*sub_1A6748990())()
{
  return nullsub_19;
}

uint64_t sub_1A67489BC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

unint64_t sub_1A6748A08()
{
  unint64_t result = qword_1E96C1C98;
  if (!qword_1E96C1C98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E96C1C98);
  }
  return result;
}

uint64_t _s7PhonemeVwxx()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t _s7PhonemeVwcp(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s7PhonemeVwca(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 _s7PhonemeVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t _s7PhonemeVwta(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s7PhonemeVwet(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s7PhonemeVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TTSMarkup.Phoneme()
{
  return &type metadata for TTSMarkup.Phoneme;
}

uint64_t _s7PhonemeV8AlphabetOwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s7PhonemeV8AlphabetOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A6748E04);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_1A6748E2C(unsigned char *result, char a2)
{
  *__n128 result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for TTSMarkup.Phoneme.Alphabet()
{
  return &type metadata for TTSMarkup.Phoneme.Alphabet;
}

float sub_1A6748E48(float a1)
{
  float v1 = a1 + 1.0;
  if (v1 <= 0.05) {
    float v1 = 0.05;
  }
  return logf(v1) / 0.057762;
}

float sub_1A6748E8C(float a1)
{
  return exp2f((float)(a1 + -69.0) / 12.0) * 440.0;
}

float sub_1A6748EC4(float a1)
{
  return (float)((float)(logf(a1 / 220.0) * 12.0) / 0.69315) + 57.0;
}

float sub_1A6748F0C(float a1)
{
  return log10f(a1) * 20.0;
}

float sub_1A6748F2C(float a1)
{
  return __exp10f(a1 / 20.0);
}

uint64_t sub_1A6748F38(uint64_t a1)
{
  return sub_1A6749058(a1, qword_1E96D6158);
}

uint64_t sub_1A6748F64()
{
  return sub_1A67490D0(qword_1E96C5380, (uint64_t)qword_1E96D6158);
}

uint64_t sub_1A6748F88(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_1A6748FC0(uint64_t a1)
{
  return sub_1A6749058(a1, qword_1E96D60F8);
}

uint64_t sub_1A6748FEC()
{
  return sub_1A67490D0(&qword_1E96C3BA8, (uint64_t)qword_1E96D60F8);
}

uint64_t sub_1A6749010(uint64_t a1)
{
  return sub_1A6749058(a1, qword_1E96D6170);
}

uint64_t sub_1A6749034()
{
  return sub_1A67490D0(qword_1E96C5390, (uint64_t)qword_1E96D6170);
}

uint64_t sub_1A6749058(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_1A6891CE0();
  sub_1A67495E4(v3, a2);
  sub_1A6748F88(v3, (uint64_t)a2);
  return sub_1A6891CD0();
}

uint64_t sub_1A67490D0(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = sub_1A6891CE0();

  return sub_1A6748F88(v3, a2);
}

uint64_t CoreSynthesizer.Voice.description.getter()
{
  return 0;
}

unint64_t sub_1A674932C()
{
  unint64_t result = qword_1EB67A220;
  if (!qword_1EB67A220)
  {
    sub_1A6891A40();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB67A220);
  }
  return result;
}

uint64_t CoreSynthesizer.Utterance.description.getter()
{
  sub_1A6892C40();
  sub_1A6892150();
  swift_bridgeObjectRetain();
  sub_1A6892150();
  swift_bridgeObjectRelease();
  sub_1A6892150();
  if (*(void *)(v0 + 40)) {
    CoreSynthesizer.Voice.description.getter();
  }
  sub_1A6892150();
  swift_bridgeObjectRelease();
  sub_1A6892150();
  sub_1A68930E0();
  sub_1A6892150();
  swift_bridgeObjectRelease();
  sub_1A6892150();
  sub_1A6892090();
  sub_1A6892150();
  swift_bridgeObjectRelease();
  sub_1A6892150();
  sub_1A6892090();
  sub_1A6892150();
  swift_bridgeObjectRelease();
  sub_1A6892150();
  return 0;
}

ValueMetadata *type metadata accessor for TTSSpeechQueue.Log()
{
  return &type metadata for TTSSpeechQueue.Log;
}

ValueMetadata *_s3LogVMa()
{
  return &_s3LogVN;
}

uint64_t *sub_1A67495E4(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

BOOL static FormattedStream.EscapeStyle.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t FormattedStream.EscapeStyle.hash(into:)()
{
  return sub_1A6893210();
}

uint64_t sub_1A6749698(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A6749714(a1, a2, a3, (void (*)(unsigned char *))FormattedStream.EscapeStyle.hash(into:));
}

uint64_t _s12TextToSpeech15FormattedStreamC11EscapeStyleO9hashValueSivg_0()
{
  return sub_1A6893250();
}

uint64_t sub_1A67496FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A6749714(a1, a2, a3, (void (*)(unsigned char *))FormattedStream.BracketStyle.AnglingStyle.hash(into:));
}

uint64_t sub_1A6749714(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *))
{
  sub_1A6893200();
  a4(v6);
  return sub_1A6893250();
}

uint64_t sub_1A6749758@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 112))();
  *a2 = result;
  return result;
}

uint64_t sub_1A67497A4(uint64_t *a1)
{
  return sub_1A6749800(*a1);
}

uint64_t sub_1A67497CC()
{
  swift_beginAccess();
  return *(void *)(v0 + 16);
}

uint64_t sub_1A6749800(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  return result;
}

char *FormattedStream.__allocating_init(_:)(uint64_t a1)
{
  int v2 = (char *)swift_allocObject();
  uint64_t v3 = *(void *)v2;
  *((void *)v2 + 2) = 0;
  (*(void (**)(char *, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 32))(&v2[*(void *)(v3 + 104)], a1);
  return v2;
}

char *FormattedStream.init(_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)v1;
  *((void *)v1 + 2) = 0;
  (*(void (**)(char *, uint64_t))(*(void *)(*(void *)(v2 + 80) - 8) + 32))(&v1[*(void *)(v2 + 104)], a1);
  return v1;
}

uint64_t sub_1A6749950()
{
  uint64_t result = swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 16);
  BOOL v3 = __OFADD__(v2, 4);
  uint64_t v4 = v2 + 4;
  if (v3) {
    __break(1u);
  }
  else {
    *(void *)(v0 + 16) = v4;
  }
  return result;
}

uint64_t sub_1A67499A0()
{
  uint64_t result = swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 16);
  BOOL v3 = __OFSUB__(v2, 4);
  uint64_t v4 = v2 - 4;
  if (v3) {
    __break(1u);
  }
  else {
    *(void *)(v0 + 16) = v4;
  }
  return result;
}

uint64_t sub_1A67499F0()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 112))();
  uint64_t v2 = MEMORY[0x1AD0BF2D0](32, 0xE100000000000000, v1);
  (*(void (**)(uint64_t))(*(void *)v0 + 208))(v2);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1A6749A7C(void (*a1)(uint64_t))
{
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)v1 + 168))();
  a1(v3);
  uint64_t v4 = *(uint64_t (**)(void))(*(void *)v1 + 176);

  return v4();
}

uint64_t sub_1A6749B0C(uint64_t a1, unint64_t a2)
{
  (*(void (**)(void))(*(void *)v2 + 184))();
  unsigned int v6 = *(uint64_t (**)(uint64_t, unint64_t))(*(void *)v2 + 208);
  v6(a1, a2);

  return v6(10, 0xE100000000000000);
}

uint64_t sub_1A6749BBC()
{
  return swift_endAccess();
}

uint64_t sub_1A6749C68(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v4 = v3;
  if (*a3)
  {
    if (*a3 == 1)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      sub_1A6748030();
      a1 = sub_1A6892AA0();
      a2 = v8;
    }
  }
  else
  {
    sub_1A6748030();
    sub_1A6892AA0();
    a1 = sub_1A6892AA0();
    a2 = v7;
    swift_bridgeObjectRelease();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 208))(a1, a2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A6749E18(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  if (!*a3)
  {
    uint64_t v4 = 60;
    unint64_t v5 = 0xE100000000000000;
    goto LABEL_5;
  }
  if (*a3 == 1)
  {
    uint64_t v4 = 12092;
    unint64_t v5 = 0xE200000000000000;
LABEL_5:
    uint64_t v7 = v4;
    unint64_t v8 = v5;
    sub_1A6892150();
    goto LABEL_7;
  }
  uint64_t v7 = 60;
  unint64_t v8 = 0xE100000000000000;
  sub_1A6892150();
LABEL_7:
  sub_1A6892150();
  (*(void (**)(uint64_t, unint64_t))(*(void *)v3 + 208))(v7, v8);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1A6749EF0(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6 = *a3;
  if (v6 == 2) {
    uint64_t v7 = 8739;
  }
  else {
    uint64_t v7 = 34;
  }
  if (v6 == 2) {
    unint64_t v8 = 0xE200000000000000;
  }
  else {
    unint64_t v8 = 0xE100000000000000;
  }
  if (v6 == 2) {
    uint64_t v9 = 8994;
  }
  else {
    uint64_t v9 = 34;
  }
  uint64_t v10 = *(void (**)(uint64_t, unint64_t))(*(void *)v3 + 208);
  v10(v7, v8);
  swift_bridgeObjectRelease();
  char v12 = v6;
  (*(void (**)(uint64_t, uint64_t, char *))(*(void *)v3 + 216))(a1, a2, &v12);
  v10(v9, v8);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1A6749FE8(uint64_t a1, unint64_t a2)
{
  id v17 = *(void (**)(uint64_t, unint64_t))(*(void *)v2 + 200);
  v17(572662307, 0xE400000000000000);
  v22[0] = 10;
  v22[1] = 0xE100000000000000;
  uint64_t v21 = v22;
  swift_bridgeObjectRetain();
  uint64_t v18 = sub_1A674A62C(0x7FFFFFFFFFFFFFFFLL, 1, sub_1A674AC60, (uint64_t)v20, a1, a2);
  uint64_t v5 = *((void *)v18 + 2);
  if (v5)
  {
    unint64_t v19 = *(void (**)(uint64_t))(*(void *)v2 + 184);
    int v6 = *(void (**)(uint64_t, uint64_t))(*(void *)v2 + 208);
    uint64_t v7 = (uint64_t *)(v18 + 56);
    do
    {
      uint64_t v8 = *(v7 - 3);
      uint64_t v9 = *(v7 - 2);
      uint64_t v10 = *(v7 - 1);
      uint64_t v11 = *v7;
      uint64_t v12 = swift_bridgeObjectRetain();
      v19(v12);
      uint64_t v13 = MEMORY[0x1AD0BF180](v8, v9, v10, v11);
      uint64_t v15 = v14;
      swift_bridgeObjectRelease();
      v6(v13, v15);
      swift_bridgeObjectRelease();
      v6(10, 0xE100000000000000);
      v7 += 4;
      --v5;
    }
    while (v5);
  }
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(uint64_t, unint64_t))v17)(589439522, 0xE400000000000000);
}

uint64_t sub_1A674A190(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v23 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[1] = *(void *)(v10 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v14 = (char *)v22 - v13;
  char v15 = *a2;
  if (sub_1A6892780() == 1)
  {
    uint64_t result = sub_1A68927D0();
    if (v26)
    {
      char v24 = v15;
      (*(void (**)(uint64_t, uint64_t, char *))(*v4 + 232))(v25, v26, &v24);
      return swift_bridgeObjectRelease();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v22[0] = v12;
    id v17 = *(void (**)(uint64_t, unint64_t))(*v4 + 208);
    v17(91, 0xE100000000000000);
    (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v9, a1, a3);
    sub_1A6892250();
    swift_getAssociatedConformanceWitness();
    sub_1A6892A40();
    if (v26)
    {
      uint64_t v18 = v25;
      uint64_t v19 = *v4;
      LOBYTE(v25) = v15;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(v19 + 232))(v18, v26, &v25);
      swift_bridgeObjectRelease();
      sub_1A6892A40();
      uint64_t v20 = v26;
      if (v26)
      {
        uint64_t v21 = v25;
        do
        {
          v17(8236, 0xE200000000000000);
          LOBYTE(v25) = v15;
          (*(void (**)(uint64_t, uint64_t, uint64_t *))(*v4 + 232))(v21, v20, &v25);
          swift_bridgeObjectRelease();
          sub_1A6892A40();
          uint64_t v21 = v25;
          uint64_t v20 = v26;
        }
        while (v26);
      }
    }
    (*(void (**)(char *, uint64_t))(v22[0] + 8))(v14, AssociatedTypeWitness);
    return ((uint64_t (*)(uint64_t, unint64_t))v17)(93, 0xE100000000000000);
  }
  return result;
}

uint64_t FormattedStream.deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 80) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 104));
  return v0;
}

uint64_t FormattedStream.__deallocating_deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 80) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 104));

  return swift_deallocClassInstance();
}

char *sub_1A674A62C(uint64_t a1, char a2, uint64_t (*a3)(void *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  v46[3] = a4;
  if (a1 < 0)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  uint64_t v11 = a5;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = MEMORY[0x1E4FBC860];
  uint64_t v43 = swift_allocObject();
  *(void *)(v43 + 16) = 15;
  uint64_t v15 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (uint64_t v16 = HIBYTE(a6) & 0xF) : (uint64_t v16 = v11 & 0xFFFFFFFFFFFFLL), !v16))
  {
    if ((a6 & 0x2000000000000000) == 0) {
      uint64_t v15 = v11 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v30 = 7;
    if (((a6 >> 60) & ((v11 & 0x800000000000000) == 0)) != 0) {
      uint64_t v30 = 11;
    }
    sub_1A674AA4C(v30 | (v15 << 16), v43, a2 & 1, v14);
    swift_bridgeObjectRelease();
    uint64_t v10 = *(char **)(v14 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_38;
  }
  uint64_t v38 = a1;
  uint64_t v39 = v14;
  unint64_t v44 = 4 * v16;
  uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  unint64_t v9 = 15;
  unint64_t v8 = 15;
  unint64_t v17 = 15;
  while (1)
  {
    v46[0] = sub_1A6892220();
    v46[1] = v18;
    uint64_t v19 = a3(v46);
    if (v7)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v10;
    }
    uint64_t v6 = v19;
    swift_bridgeObjectRelease();
    if (v6) {
      break;
    }
    unint64_t v9 = sub_1A6892110();
LABEL_9:
    if (v44 == v9 >> 14) {
      goto LABEL_29;
    }
  }
  if (v8 >> 14 == v9 >> 14 && (a2 & 1) != 0)
  {
    unint64_t v9 = sub_1A6892110();
    *(void *)(v43 + 16) = v9;
    unint64_t v8 = v9;
    unint64_t v17 = v9;
    goto LABEL_9;
  }
  if (v9 >> 14 < v8 >> 14)
  {
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v20 = sub_1A6892240();
  uint64_t v40 = v21;
  uint64_t v41 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v10 = sub_1A674AB5C(0, *((void *)v10 + 2) + 1, 1, v10);
  }
  unint64_t v27 = *((void *)v10 + 2);
  unint64_t v26 = *((void *)v10 + 3);
  uint64_t v6 = v27 + 1;
  if (v27 >= v26 >> 1) {
    uint64_t v10 = sub_1A674AB5C((char *)(v26 > 1), v27 + 1, 1, v10);
  }
  *((void *)v10 + 2) = v6;
  BOOL v28 = &v10[32 * v27];
  *((void *)v28 + 4) = v41;
  *((void *)v28 + 5) = v23;
  *((void *)v28 + 6) = v25;
  *((void *)v28 + 7) = v40;
  *(void *)(v39 + 16) = v10;
  uint64_t v29 = sub_1A6892110();
  unint64_t v9 = v29;
  *(void *)(v43 + 16) = v29;
  if (*((void *)v10 + 2) != v38)
  {
    unint64_t v8 = v29;
    unint64_t v17 = v29;
    goto LABEL_9;
  }
  unint64_t v17 = v29;
  unint64_t v8 = v29;
LABEL_29:
  if (v44 == v8 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_37;
  }
  if (v44 >= v17 >> 14)
  {
    uint64_t v6 = sub_1A6892240();
    unint64_t v8 = v31;
    unint64_t v9 = v32;
    uint64_t v11 = v33;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_43;
    }
    goto LABEL_34;
  }
LABEL_42:
  __break(1u);
LABEL_43:
  uint64_t v10 = sub_1A674AB5C(0, *((void *)v10 + 2) + 1, 1, v10);
LABEL_34:
  unint64_t v35 = *((void *)v10 + 2);
  unint64_t v34 = *((void *)v10 + 3);
  if (v35 >= v34 >> 1) {
    uint64_t v10 = sub_1A674AB5C((char *)(v34 > 1), v35 + 1, 1, v10);
  }
  *((void *)v10 + 2) = v35 + 1;
  uint64_t v36 = &v10[32 * v35];
  *((void *)v36 + 4) = v6;
  *((void *)v36 + 5) = v8;
  *((void *)v36 + 6) = v9;
  *((void *)v36 + 7) = v11;
  *(void *)(v39 + 16) = v10;
LABEL_37:
  swift_bridgeObjectRetain();
  swift_release();
LABEL_38:
  swift_release();
  return v10;
}

uint64_t sub_1A674AA4C(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v10 = *(void *)(a2 + 16) >> 14;
  int v11 = (v10 == a1 >> 14) & a3;
  if (v11 == 1) {
    return v11 ^ 1u;
  }
  if (a1 >> 14 < v10)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v4 = a4;
  uint64_t v5 = sub_1A6892240();
  uint64_t v6 = v12;
  uint64_t v7 = v13;
  uint64_t v8 = v14;
  unint64_t v9 = *(char **)(v4 + 16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v4 + 16) = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_9:
    unint64_t v9 = sub_1A674AB5C(0, *((void *)v9 + 2) + 1, 1, v9);
    *(void *)(v4 + 16) = v9;
  }
  unint64_t v17 = *((void *)v9 + 2);
  unint64_t v16 = *((void *)v9 + 3);
  if (v17 >= v16 >> 1)
  {
    unint64_t v9 = sub_1A674AB5C((char *)(v16 > 1), v17 + 1, 1, v9);
    *(void *)(v4 + 16) = v9;
  }
  *((void *)v9 + 2) = v17 + 1;
  uint64_t v18 = &v9[32 * v17];
  *((void *)v18 + 4) = v5;
  *((void *)v18 + 5) = v6;
  *((void *)v18 + 6) = v7;
  *((void *)v18 + 7) = v8;
  return v11 ^ 1u;
}

char *sub_1A674AB5C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1A6741AD0(&qword_1E96C1CA0);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1A674AC60(void *a1)
{
  uint64_t v2 = *(void **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1]) {
    return 1;
  }
  else {
    return sub_1A6893120() & 1;
  }
}

uint64_t sub_1A674ACB8()
{
  return swift_getWitnessTable();
}

uint64_t sub_1A674ACD4()
{
  return swift_getWitnessTable();
}

uint64_t sub_1A674ACF0()
{
  return 16;
}

__n128 sub_1A674ACFC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A674AD0C()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for FormattedStream()
{
  return sub_1A674B1C8();
}

uint64_t method lookup function for FormattedStream(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for FormattedStream);
}

uint64_t dispatch thunk of FormattedStream.indentLevel.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of FormattedStream.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t dispatch thunk of FormattedStream.indent()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of FormattedStream.dedent()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of FormattedStream.writeIndent()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of FormattedStream.withIndent(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of FormattedStream.line(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of FormattedStream.write(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of FormattedStream.writeEscaped(_:style:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of FormattedStream.writeBracketed(_:style:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of FormattedStream.writeQuoted(_:style:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of FormattedStream.writeMultilineString(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of FormattedStream.writeQuotedValues<A>(_:style:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t sub_1A674AFA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 16);
}

uint64_t type metadata accessor for FormattedStream.EscapeStyle()
{
  return sub_1A674B1C8();
}

uint64_t type metadata accessor for FormattedStream.BracketStyle()
{
  return sub_1A674B1C8();
}

uint64_t _s5VoiceV6GenderOwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *sub_1A674B074(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A674B140);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t type metadata accessor for FormattedStream.BracketStyle.AnglingStyle()
{
  return sub_1A674B1C8();
}

uint64_t sub_1A674B180()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1A674B1B8()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1A674B1C8()
{
  return swift_getGenericMetadata();
}

void __swiftcall CoreSynthesizer.Voice._bridgeToObjectiveC()(TTSSpeechVoice *__return_ptr retstr)
{
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v5 = v1[3];
  uint64_t v4 = v1[4];
  uint64_t v88 = *((unsigned __int8 *)v1 + 40);
  unsigned int v90 = *((unsigned __int8 *)v1 + 41);
  uint64_t v6 = v1[6];
  uint64_t v89 = *((char *)v1 + 56);
  uint64_t v7 = v1[8];
  id v92 = (id)v1[10];
  uint64_t v93 = v6;
  sub_1A6741AD0(&qword_1E96C15C0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1A689E170;
  *(void *)(inited + 32) = sub_1A6892000();
  *(void *)(inited + 40) = v9;
  uint64_t v10 = MEMORY[0x1E4FBB1A0];
  *(void *)(inited + 72) = MEMORY[0x1E4FBB1A0];
  *(void *)(inited + 48) = v5;
  *(void *)(inited + 56) = v4;
  *(void *)(inited + 80) = sub_1A6892000();
  *(void *)(inited + 88) = v11;
  *(void *)(inited + 120) = v10;
  *(void *)(inited + 96) = v3;
  *(void *)(inited + 104) = v2;
  *(void *)(inited + 128) = sub_1A6892000();
  *(void *)(inited + 136) = v12;
  int64_t v13 = *(void *)(v7 + 16);
  uint64_t v91 = (void *)inited;
  if (v13)
  {
    *(void *)&long long v107 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1A674CBF0(0, v13, 0);
    int64_t v14 = sub_1A674CD14(v7);
    int v16 = v15;
    int v18 = v17 & 1;
    uint64_t v100 = v7 + 56;
    uint64_t v19 = sub_1A6891A40();
    uint64_t v98 = v19;
    uint64_t v20 = *(void *)(v19 - 8);
    unint64_t v104 = *(void *)(v20 + 64);
    uint64_t v95 = v20 + 32;
    uint64_t v96 = v20 + 16;
    uint64_t v97 = v20;
    uint64_t v94 = v20 + 8;
    uint64_t v99 = v7;
    uint64_t v21 = v20;
    do
    {
      MEMORY[0x1F4188790](v19);
      uint64_t v23 = (char *)&v87 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
      if (v14 < 0 || v14 >= 1 << *(unsigned char *)(v7 + 32))
      {
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
        JUMPOUT(0x1A674BC84);
      }
      if (((*(void *)(v100 + (((unint64_t)v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
        goto LABEL_33;
      }
      if (*(_DWORD *)(v7 + 36) != v16) {
        goto LABEL_34;
      }
      int v103 = v18;
      uint64_t v24 = v98;
      uint64_t v25 = (*(uint64_t (**)(char *, int64_t, uint64_t))(v21 + 16))((char *)&v87 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0), *(void *)(v7 + 48) + *(void *)(v21 + 72) * v14, v98);
      MEMORY[0x1F4188790](v25);
      unint64_t v27 = (char *)&v87 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v27, v23, v24);
      uint64_t v28 = sub_1A6891860();
      uint64_t v101 = v29;
      uint64_t v102 = v28;
      (*(void (**)(char *, uint64_t))(v21 + 8))(v27, v24);
      uint64_t v30 = v107;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1A674CBF0(0, *(void *)(v30 + 16) + 1, 1);
        uint64_t v30 = v107;
      }
      unint64_t v32 = *(void *)(v30 + 16);
      unint64_t v31 = *(void *)(v30 + 24);
      if (v32 >= v31 >> 1)
      {
        sub_1A674CBF0((char *)(v31 > 1), v32 + 1, 1);
        uint64_t v30 = v107;
      }
      *(void *)(v30 + 16) = v32 + 1;
      uint64_t v33 = v30 + 16 * v32;
      uint64_t v34 = v101;
      *(void *)(v33 + 32) = v102;
      *(void *)(v33 + 40) = v34;
      uint64_t v7 = v99;
      uint64_t v19 = sub_1A674CDB4(v14, v16, v103 & 1, v99);
      int64_t v14 = v19;
      int v16 = v35;
      int v18 = v36 & 1;
      --v13;
    }
    while (v13);
    sub_1A674CE98(v19, v35, v36 & 1);
    swift_bridgeObjectRelease();
    uint64_t v10 = MEMORY[0x1E4FBB1A0];
    uint64_t inited = (uint64_t)v91;
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v30 = MEMORY[0x1E4FBC860];
  }
  char v37 = v89;
  *(void *)(inited + 168) = sub_1A6741AD0(&qword_1E96C15A0);
  *(void *)(inited + 144) = v30;
  *(void *)(inited + 176) = sub_1A6892000();
  *(void *)(inited + 184) = v38;
  uint64_t v39 = sub_1A6892000();
  *(void *)(inited + 216) = v10;
  *(void *)(inited + 192) = v39;
  *(void *)(inited + 200) = v40;
  *(void *)(inited + 224) = sub_1A6892000();
  *(void *)(inited + 232) = v41;
  *(void *)(inited + 240) = sub_1A6892000();
  *(void *)(inited + 248) = v42;
  *(void *)(inited + 264) = v10;
  strcpy((char *)(inited + 272), "NoveltyVoice");
  *(unsigned char *)(inited + 285) = 0;
  *(_WORD *)(inited + 286) = -5120;
  unint64_t v43 = sub_1A674CEA4();
  *(void *)&long long v107 = *(void *)sub_1A67F8D88();
  *(void *)&v106[0] = v93;
  unint64_t v104 = sub_1A674CEE4();
  sub_1A6892B10();
  *(void *)(inited + 288) = sub_1A6892990();
  *(void *)(inited + 312) = v43;
  strcpy((char *)(inited + 320), "PersonalVoice");
  *(_WORD *)(inited + 334) = -4864;
  LOBYTE(v107) = v37;
  LOBYTE(v106[0]) = 7;
  static CoreSynthesizer.Voice.VoiceType.== infix(_:_:)(&v107, (unsigned __int8 *)v106);
  *(void *)(inited + 336) = sub_1A6892990();
  *(void *)(inited + 360) = v43;
  *(void *)(inited + 368) = 0xD000000000000010;
  *(void *)(inited + 376) = 0x80000001A68CCBD0;
  objc_msgSend(v92, sel_auComponentDesc);
  __int16 v44 = WORD2(v107);
  int v45 = HIWORD(DWORD1(v107));
  unsigned int v46 = BYTE6(v107);
  int v103 = DWORD1(v107) >> 8;
  unsigned int v47 = BYTE5(v107);
  unsigned int v48 = BYTE4(v107);
  unsigned int v49 = (BYTE7(v107) + 1);
  if (SDWORD1(v107) < 0) {
    unsigned int v49 = ((DWORD1(v107) >> 30) & 0xFFFFC0FF | ((HIBYTE(DWORD1(v107)) & 0x3F) << 8)) + 33217;
  }
  *(void *)&long long v107 = (v49 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v49) >> 3)) & 7)));
  uint64_t v50 = MEMORY[0x1AD0BF1A0](&v107);
  unsigned int v52 = (v45 + 1);
  if (v46 >= 0x80) {
    unsigned int v52 = ((v46 >> 6) & 0xFFFFC0FF | ((v45 & 0x3F) << 8)) + 33217;
  }
  uint64_t v53 = v50;
  uint64_t v54 = v51;
  *(void *)&long long v107 = (v52 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v52) >> 3)) & 7)));
  MEMORY[0x1AD0BF1A0](&v107);
  *(void *)&long long v107 = v53;
  *((void *)&v107 + 1) = v54;
  swift_bridgeObjectRetain();
  sub_1A6892150();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  long long v55 = v107;
  unsigned int v56 = (v103 + 1);
  if (v47 >= 0x80) {
    unsigned int v56 = (v44 & 0x3F00 | (v47 >> 6)) + 33217;
  }
  *(void *)&long long v107 = (v56 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v56) >> 3)) & 7)));
  MEMORY[0x1AD0BF1A0](&v107);
  long long v107 = v55;
  swift_bridgeObjectRetain();
  sub_1A6892150();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  long long v57 = v107;
  unsigned int v58 = (v44 + 1);
  if (v48 >= 0x80) {
    unsigned int v58 = ((v48 >> 6) & 0xFFFFC0FF | ((v44 & 0x3F) << 8)) + 33217;
  }
  unint64_t v59 = v91;
  *(void *)&long long v107 = (v58 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v58) >> 3)) & 7)));
  MEMORY[0x1AD0BF1A0](&v107);
  long long v107 = v57;
  swift_bridgeObjectRetain();
  sub_1A6892150();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v60 = *((void *)&v107 + 1);
  v59[48] = v107;
  v59[49] = v60;
  uint64_t v61 = MEMORY[0x1E4FBB1A0];
  v59[51] = MEMORY[0x1E4FBB1A0];
  v59[52] = 0xD00000000000001BLL;
  v59[53] = 0x80000001A68CCBF0;
  id v62 = objc_msgSend(v92, sel_synthesizerBundleIdentifier);
  if (v62)
  {
    uint64_t v63 = v62;
    uint64_t v64 = sub_1A6892000();
    unint64_t v66 = v65;

    uint64_t v67 = v59 + 54;
    v59[57] = v61;
    if (v66)
    {
      *uint64_t v67 = v64;
      uint64_t v68 = v88;
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t v67 = v59 + 54;
    v59[57] = v61;
  }
  uint64_t v68 = v88;
  *uint64_t v67 = 0;
  unint64_t v66 = 0xE000000000000000;
LABEL_27:
  v59[55] = v66;
  unint64_t v69 = sub_1A674BC98((uint64_t)v59);
  switch(v68)
  {
    case 1:
    case 2:
    case 3:
    case 4:
      uint64_t v70 = sub_1A6892000();
      uint64_t v72 = v71;
      uint64_t v73 = sub_1A6892000();
      uint64_t v75 = v74;
      uint64_t v108 = v61;
      *(void *)&long long v107 = v70;
      *((void *)&v107 + 1) = v72;
      sub_1A674CF38(&v107, v106);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v105 = v69;
      sub_1A674C848(v106, v73, v75, isUniquelyReferenced_nonNull_native);
      unint64_t v69 = v105;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  if (v90 <= 1)
  {
    uint64_t v77 = sub_1A6892000();
    uint64_t v79 = v78;
    uint64_t v80 = sub_1A6892000();
    uint64_t v82 = v81;
    uint64_t v108 = v61;
    *(void *)&long long v107 = v77;
    *((void *)&v107 + 1) = v79;
    sub_1A674CF38(&v107, v106);
    char v83 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v105 = v69;
    sub_1A674C848(v106, v80, v82, v83);
    unint64_t v69 = v105;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_1A674BDC4(v69);
  swift_bridgeObjectRelease();
  id v84 = objc_allocWithZone((Class)TTSAXResource);
  uint64_t v85 = (void *)sub_1A6891E90();
  swift_bridgeObjectRelease();
  id v86 = objc_msgSend(v84, sel_initWithData_, v85);

  *(void *)&long long v107 = *(void *)sub_1A67F8DD0();
  *(void *)&v106[0] = v93;
  objc_msgSend(v86, sel_setIsSystemVoice_, sub_1A6892B10() & 1);
  objc_msgSend(v86, sel_speechVoice);
}

unint64_t sub_1A674BC98(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  sub_1A6741AD0(&qword_1E96C15B0);
  uint64_t v2 = sub_1A6892EF0();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1A674CF50(v6, (uint64_t)&v15);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_1A673F7AC(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_1A674CF38(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    _DWORD v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1A674BDC4(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_1A6741AD0(&qword_1E96C15B8);
    uint64_t v2 = sub_1A6892EF0();
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4FBC868];
  }
  uint64_t v28 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = v2 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v27) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v28 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v27) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v28 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v27) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v28 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    long long v17 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    sub_1A6741A74(*(void *)(a1 + 56) + 32 * v12, (uint64_t)v40);
    *(void *)&long long v39 = v19;
    *((void *)&v39 + 1) = v18;
    v37[2] = v39;
    v38[0] = v40[0];
    v38[1] = v40[1];
    *(void *)&v37[0] = v19;
    *((void *)&v37[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_1A674CF38(v38, v32);
    long long v33 = v29;
    long long v34 = v30;
    uint64_t v35 = v31;
    sub_1A674CF38(v32, v36);
    long long v29 = v33;
    long long v30 = v34;
    uint64_t v31 = v35;
    sub_1A674CF38(v36, v37);
    sub_1A674CF38(v37, &v33);
    uint64_t result = sub_1A6892BE0();
    uint64_t v20 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v6 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v21) & ~*(void *)(v6 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v6 + 8 * v22);
      }
      while (v26 == -1);
      unint64_t v9 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)(v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    uint64_t v10 = *(void *)(v2 + 48) + 40 * v9;
    *(_OWORD *)uint64_t v10 = v29;
    *(_OWORD *)(v10 + 16) = v30;
    *(void *)(v10 + 32) = v31;
    uint64_t result = (uint64_t)sub_1A674CF38(&v33, (_OWORD *)(*(void *)(v2 + 56) + 32 * v9));
    ++*(void *)(v2 + 16);
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v27)
  {
LABEL_37:
    swift_release();
    sub_1A674CF48();
    return v2;
  }
  unint64_t v14 = *(void *)(v28 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t static CoreSynthesizer.Voice._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v4 = objc_msgSend(self, sel_sharedInstance);
  id v5 = objc_msgSend(a1, sel_identifier);
  if (!v5)
  {
    sub_1A6892000();
    id v5 = (id)sub_1A6891FD0();
    swift_bridgeObjectRelease();
  }
  id v6 = objc_msgSend(v4, sel_resourceWithVoiceId_, v5);

  if (v6)
  {
    sub_1A673FF60(*(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 32), *(void *)(a2 + 40), *(void *)(a2 + 48), *(void *)(a2 + 56), *(void *)(a2 + 64), *(void *)(a2 + 72), *(void **)(a2 + 80));
    CoreSynthesizer.Voice.init(resource:)(v6, (uint64_t)v13);
    int v7 = v14;
    char v8 = v15;
    long long v9 = v13[1];
    *(_OWORD *)a2 = v13[0];
    *(_OWORD *)(a2 + 16) = v9;
    long long v10 = v13[3];
    *(_OWORD *)(a2 + 32) = v13[2];
    *(_OWORD *)(a2 + 48) = v10;
    long long v11 = v13[5];
    *(_OWORD *)(a2 + 64) = v13[4];
    *(_OWORD *)(a2 + 80) = v11;
    *(unsigned char *)(a2 + 100) = v8;
    *(_DWORD *)(a2 + 96) = v7;
    return 1;
  }
  else
  {
    uint64_t result = sub_1A6892E60();
    __break(1u);
  }
  return result;
}

void static CoreSynthesizer.Voice._unconditionallyBridgeFromObjectiveC(_:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!a1) {
    goto LABEL_7;
  }
  id v4 = self;
  id v5 = a1;
  id v6 = objc_msgSend(v4, sel_sharedInstance);
  id v7 = objc_msgSend(v5, sel_identifier);
  if (!v7)
  {
    sub_1A6892000();
    id v7 = (id)sub_1A6891FD0();
    swift_bridgeObjectRelease();
  }
  id v8 = objc_msgSend(v6, sel_resourceWithVoiceId_, v7);

  if (v8 && (v20 = v5, CoreSynthesizer.Voice.init(resource:)(v8, (uint64_t)&v21), long long v19 = v22, (void)v22))
  {
    uint64_t v9 = v23;
    uint64_t v10 = v24;
    __int16 v11 = v25;
    uint64_t v12 = v26;
    char v13 = v27;
    long long v18 = v28;
    unint64_t v14 = v31 | ((unint64_t)v32 << 32);
    uint64_t v16 = v29;
    uint64_t v15 = v30;
    uint64_t v17 = v21;

    *(void *)a2 = v17;
    *(_OWORD *)(a2 + 8) = v19;
    *(void *)(a2 + 24) = v9;
    *(void *)(a2 + 32) = v10;
    *(_WORD *)(a2 + 40) = v11;
    *(void *)(a2 + 48) = v12;
    *(unsigned char *)(a2 + 56) = v13;
    *(_OWORD *)(a2 + 64) = v18;
    *(void *)(a2 + 80) = v16;
    *(_DWORD *)(a2 + 88) = v15;
    *(unsigned char *)(a2 + 92) = BYTE4(v15) & 1;
    *(_DWORD *)(a2 + 96) = v14;
    *(unsigned char *)(a2 + 100) = BYTE4(v14) & 1;
  }
  else
  {
LABEL_7:
    sub_1A6892E60();
    __break(1u);
  }
}

uint64_t sub_1A674C528(void *a1, uint64_t a2)
{
  return 1;
}

uint64_t sub_1A674C548(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1A6741AD0(&qword_1E96C15B0);
  uint64_t v6 = sub_1A6892ED0();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    long long v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        unint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          unint64_t v19 = v34[v13];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v2;
              if (a2)
              {
                uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                unint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v20;
          }
        }
LABEL_21:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      uint64_t v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      uint64_t v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2)
      {
        sub_1A674CF38(v24, v35);
      }
      else
      {
        sub_1A6741A74((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      sub_1A6893200();
      sub_1A68920F0();
      uint64_t result = sub_1A6893250();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      uint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      *uint64_t v15 = v23;
      v15[1] = v22;
      uint64_t result = (uint64_t)sub_1A674CF38(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

_OWORD *sub_1A674C848(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_1A673F7AC(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1A674CA08();
      goto LABEL_7;
    }
    sub_1A674C548(v15, a4 & 1);
    unint64_t v21 = sub_1A673F7AC(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      int64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)sub_1A6893150();
    __break(1u);
    return result;
  }
LABEL_7:
  int64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    unint64_t v19 = (_OWORD *)(v18[7] + 32 * v12);
    sub_1A6741A24((uint64_t)v19);
    return sub_1A674CF38(a1, v19);
  }
LABEL_13:
  sub_1A674C99C(v12, a2, a3, a1, v18);

  return (_OWORD *)swift_bridgeObjectRetain();
}

_OWORD *sub_1A674C99C(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_1A674CF38(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

void *sub_1A674CA08()
{
  unint64_t v1 = v0;
  sub_1A6741AD0(&qword_1E96C15B0);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1A6892EC0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    sub_1A6741A74(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = v19;
    v21[1] = v18;
    sub_1A674CF38(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    unint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

char *sub_1A674CBF0(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_1A674CC10(a1, a2, a3, *v3);
  uint64_t *v3 = result;
  return result;
}

char *sub_1A674CC10(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1A6741AD0(&qword_1EB67A388);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

uint64_t sub_1A674CD14(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

int64_t sub_1A674CDB4(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1A674CE98(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_1A674CEA4()
{
  unint64_t result = qword_1E96C15A8;
  if (!qword_1E96C15A8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1E96C15A8);
  }
  return result;
}

unint64_t sub_1A674CEE4()
{
  unint64_t result = qword_1EB67A260;
  if (!qword_1EB67A260)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB67A260);
  }
  return result;
}

_OWORD *sub_1A674CF38(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_1A674CF48()
{
  return swift_release();
}

uint64_t sub_1A674CF50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1A6741AD0(&qword_1E96C1598);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

float Optional<A>.auParamValue.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](a1);
  unint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v5 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v5);
  unint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v12, a1);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, a1);
    return *(float *)sub_1A67DF5C0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
    float v13 = (*(float (**)(uint64_t, uint64_t))(a2 + 8))(v8, a2);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  return v13;
}

void sub_1A674D1AC(uint64_t a1@<X1>, uint64_t a2@<X2>, float *a3@<X8>)
{
  uint64_t v4 = *(void *)(a2 + a1 - 8);
  uint64_t v5 = sub_1A6892A00();
  *a3 = Optional<A>.auParamValue.getter(v5, v4);
}

uint64_t sub_1A674D1F4(float *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + a3 - 8);
  float v5 = *a1;
  uint64_t v6 = sub_1A6892A00();
  return Optional<A>.auParamValue.setter(v6, v4, v5);
}

uint64_t Optional<A>.auParamValue.setter(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v4 = v3;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8))(v4, a1);
  v8.n128_u32[0] = *(_DWORD *)sub_1A67DF5C0();
  uint64_t v9 = *(void *)(a1 + 16);
  if (v8.n128_f32[0] == a3)
  {
    uint64_t v10 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, float))(a2 + 32))(v9, a2, a3);
    uint64_t v10 = 0;
  }
  unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(*(void *)(v9 - 8) + 56);

  return v11(v4, v10, 1, v9, v8);
}

uint64_t (*Optional<A>.auParamValue.modify(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = v3;
  *(void *)a1 = a2;
  *(float *)(a1 + 24) = Optional<A>.auParamValue.getter(a2, a3);
  return sub_1A674D380;
}

uint64_t sub_1A674D380(uint64_t a1)
{
  return Optional<A>.auParamValue.setter(*(void *)a1, *(void *)(a1 + 8), *(float *)(a1 + 24));
}

uint64_t Optional<A>.init(auVal:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, float a4@<S0>)
{
  v8.n128_u32[0] = *(_DWORD *)sub_1A67DF5C0();
  if (v8.n128_f32[0] == a4)
  {
    uint64_t v9 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, float))(a2 + 32))(a1, a2, a4);
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(*(void *)(a1 - 8) + 56);

  return v10(a3, v9, 1, a1, v8);
}

float sub_1A674D46C(uint64_t a1, uint64_t a2)
{
  return Optional<A>.auParamValue.getter(a1, *(void *)(a2 - 8));
}

uint64_t sub_1A674D474(uint64_t a1, uint64_t a2, float a3)
{
  return Optional<A>.auParamValue.setter(a1, *(void *)(a2 - 8), a3);
}

uint64_t (*sub_1A674D47C(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = a2;
  uint64_t v5 = *(void *)(a3 - 8);
  *(void *)(a1 + 16) = v5;
  *(float *)(a1 + 24) = Optional<A>.auParamValue.getter(a2, v5);
  return sub_1A674D4D4;
}

uint64_t sub_1A674D4D4(uint64_t a1)
{
  return Optional<A>.auParamValue.setter(*(void *)(a1 + 8), *(void *)(a1 + 16), *(float *)(a1 + 24));
}

uint64_t sub_1A674D504@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, float a4@<S0>)
{
  return Optional<A>.init(auVal:)(*(void *)(a1 + 16), *(void *)(a2 - 8), a3, a4);
}

float sub_1A674D518@<S0>(float *a1@<X0>, _DWORD *a2@<X8>)
{
  float result = *a1;
  *a2 = *(_DWORD *)a1;
  return result;
}

float sub_1A674D524(float *a1, _DWORD *a2)
{
  float result = *a1;
  *a2 = *(_DWORD *)a1;
  return result;
}

void Float.auParamValue.setter(float a1)
{
  float *v1 = a1;
}

uint64_t (*Float.auParamValue.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *v1;
  return sub_1A6750338;
}

float sub_1A674D564()
{
  return *(float *)v0;
}

void sub_1A674D56C(float a1)
{
  float *v1 = a1;
}

float (*sub_1A674D574(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *v1;
  return sub_1A674D5A0;
}

float sub_1A674D5A0(uint64_t a1)
{
  float result = *(float *)(a1 + 8);
  **(float **)a1 = result;
  return result;
}

void sub_1A674D5B0(float *a1@<X8>, float a2@<S0>)
{
  *a1 = a2;
}

Swift::Bool __swiftcall Bool.init(auVal:)(Swift::Float auVal)
{
  return auVal > 0.0;
}

float Bool.auParamValue.getter(char a1)
{
  float result = 0.0;
  if (a1) {
    return 1.0;
  }
  return result;
}

unsigned char *sub_1A674D5D8@<X0>(unsigned char *result@<X0>, float *a2@<X8>)
{
  float v2 = 0.0;
  if (*result) {
    float v2 = 1.0;
  }
  *a2 = v2;
  return result;
}

float *sub_1A674D5F4(float *result, BOOL *a2)
{
  *a2 = *result > 0.0;
  return result;
}

void Bool.auParamValue.setter(float a1)
{
  BOOL *v1 = a1 > 0.0;
}

uint64_t (*Bool.auParamValue.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  float v2 = 0.0;
  if (*v1) {
    float v2 = 1.0;
  }
  *(float *)(a1 + 8) = v2;
  return sub_1A675033C;
}

float sub_1A674D654()
{
  float result = 0.0;
  if (*v0) {
    return 1.0;
  }
  return result;
}

void sub_1A674D66C(float a1)
{
  BOOL *v1 = a1 > 0.0;
}

uint64_t (*sub_1A674D67C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  float v2 = 0.0;
  if (*v1) {
    float v2 = 1.0;
  }
  *(float *)(a1 + 8) = v2;
  return sub_1A674D6B8;
}

uint64_t sub_1A674D6B8(uint64_t result)
{
  **(unsigned char **)float result = *(float *)(result + 8) > 0.0;
  return result;
}

void sub_1A674D6D0(BOOL *a1@<X8>, float a2@<S0>)
{
  *a1 = a2 > 0.0;
}

Swift::Int __swiftcall Int.init(auVal:)(Swift::Float auVal)
{
  if ((~LODWORD(auVal) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (auVal <= -9.2234e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (auVal < 9.2234e18) {
    return (uint64_t)auVal;
  }
LABEL_7:
  __break(1u);
  return result;
}

float Int.auParamValue.getter(uint64_t a1)
{
  return (float)a1;
}

float sub_1A674D72C@<S0>(uint64_t *a1@<X0>, float *a2@<X8>)
{
  float result = (float)*a1;
  *a2 = result;
  return result;
}

float *sub_1A674D73C(float *result, void *a2)
{
  float v2 = *result;
  if ((~*(_DWORD *)result & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v2 <= -9.2234e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v2 < 9.2234e18)
  {
    *a2 = (uint64_t)v2;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

void Int.auParamValue.setter(float a1)
{
  if ((~LODWORD(a1) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a1 <= -9.2234e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (a1 < 9.2234e18)
  {
    void *v1 = (uint64_t)a1;
    return;
  }
LABEL_7:
  __break(1u);
}

uint64_t (*Int.auParamValue.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  *(float *)(a1 + 8) = (float)*v1;
  return sub_1A674D800;
}

float sub_1A674D804()
{
  return (float)*v0;
}

void sub_1A674D810(float a1)
{
  if ((~LODWORD(a1) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a1 <= -9.2234e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (a1 < 9.2234e18)
  {
    void *v1 = (uint64_t)a1;
    return;
  }
LABEL_7:
  __break(1u);
}

uint64_t (*sub_1A674D858(uint64_t a1))()
{
  *(void *)a1 = v1;
  *(float *)(a1 + 8) = (float)*v1;
  return sub_1A674D800;
}

uint64_t sub_1A674D888(uint64_t result, char a2)
{
  float v2 = *(float *)(result + 8);
  BOOL v3 = (LODWORD(v2) & 0x7F800000) == 2139095040;
  if ((a2 & 1) == 0) {
    goto LABEL_6;
  }
  if ((LODWORD(v2) & 0x7F800000) == 0x7F800000)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v2 <= -9.2234e18)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  BOOL v3 = v2 == 9.2234e18;
  if (v2 < 9.2234e18)
  {
LABEL_9:
    **(void **)float result = (uint64_t)v2;
    return result;
  }
  __break(1u);
LABEL_6:
  if (v3)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v2 <= -9.2234e18)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v2 < 9.2234e18) {
    goto LABEL_9;
  }
LABEL_14:
  __break(1u);
  return result;
}

void sub_1A674D914(void *a1@<X8>, float a2@<S0>)
{
  if ((~LODWORD(a2) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a2 <= -9.2234e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (a2 < 9.2234e18)
  {
    *a1 = (uint64_t)a2;
    return;
  }
LABEL_7:
  __break(1u);
}

uint64_t sub_1A674D95C@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 128))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1A674D9AC(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 136))(*a1);
}

uint64_t sub_1A674D9F4()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 16);
}

void sub_1A674DA28(char a1)
{
  uint64_t v3 = swift_beginAccess();
  uint8_t v1[16] = a1;
  uint64_t v4 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v1 + 176))(v3);
  if (v4)
  {
    uint64_t v5 = v4;
    (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v4) + 0x70))();
  }
}

uint64_t (*sub_1A674DACC(uint64_t a1))()
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return sub_1A674DB24;
}

uint64_t sub_1A674DB28@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 152))();
  *a2 = result;
  return result;
}

uint64_t sub_1A674DB74(id *a1, uint64_t a2)
{
  return (*(uint64_t (**)(id))(**(void **)a2 + 160))(*a1);
}

id sub_1A674DBC8()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 24);

  return v1;
}

void sub_1A674DC0C(void *a1)
{
  swift_beginAccess();
  uint64_t v3 = (void *)v1[3];
  v1[3] = a1;
  id v4 = a1;

  uint64_t v5 = (void *)(*(uint64_t (**)(void))(*v1 + 176))();
  if (v5)
  {
    uint64_t v6 = v5;
    (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v5) + 0x70))();

    id v4 = v6;
  }
}

uint64_t (*sub_1A674DCD0(uint64_t a1))()
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return sub_1A674DB24;
}

void sub_1A674DD28(uint64_t a1, char a2)
{
  uint64_t v4 = swift_endAccess();
  if ((a2 & 1) == 0)
  {
    uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t))(**(void **)(a1 + 24) + 176))(v4);
    if (v5)
    {
      id v6 = v5;
      (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v5) + 0x70))();
    }
  }
}

uint64_t sub_1A674DDE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1A6741AD0(&qword_1E96C1640);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A674DE50()
{
  swift_beginAccess();
  return MEMORY[0x1AD0C1D60](v0 + 120);
}

void sub_1A674DE94(void *a1)
{
}

void (*sub_1A674DEE4(void *a1))(id **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_beginAccess();
  v3[3] = MEMORY[0x1AD0C1D60](v1 + 120);
  return sub_1A674DF60;
}

void sub_1A674DF60(id **a1, char a2)
{
  uint64_t v3 = *a1;
  id v4 = (*a1)[3];
  swift_unknownObjectWeakAssign();
  if (a2)
  {

    swift_endAccess();
  }
  else
  {
    swift_endAccess();
  }

  free(v3);
}

uint64_t sub_1A674DFDC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v11 = *(void *)(a3 + 24);
  uint64_t v12 = *(void *)(a3 + 32);
  uint64_t v13 = sub_1A674E06C(a3, v11);
  uint64_t v14 = sub_1A674F9C0(a1, a2, v13, a4, a5, v5, v11, v12);

  sub_1A6741A24(a3);
  return v14;
}

uint64_t sub_1A674E06C(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t AUParamWrapper.deinit()
{
  sub_1A6741A24(v0 + 32);
  sub_1A6750210(v0 + 72, &qword_1E96C1640);
  swift_unknownObjectWeakDestroy();
  return v0;
}

uint64_t AUParamWrapper.__deallocating_deinit()
{
  sub_1A6741A24(v0 + 32);
  sub_1A6750210(v0 + 72, &qword_1E96C1640);
  swift_unknownObjectWeakDestroy();

  return swift_deallocClassInstance();
}

uint64_t AUParamValue.wrapper.getter()
{
  sub_1A674F6A4();

  return swift_retain();
}

uint64_t AUParamValue.wrapper.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  void *v1 = a1;
  return result;
}

uint64_t (*AUParamValue.wrapper.modify())()
{
  return nullsub_19;
}

uint64_t AUParamValue.init(param:defaultValue:internalOnly:featureFlag:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v14 = type metadata accessor for AUParamWrapper();
  sub_1A674DDE8(a4, (uint64_t)v17);
  uint64_t v15 = sub_1A674F9C0(1, a1, a2, (uint64_t)v17, a3, v14, a5, a6);

  sub_1A6750210(a4, &qword_1E96C1640);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a5 - 8) + 8))(a2, a5);
  *a7 = v15;
  return result;
}

uint64_t AUParamValue.projectedValue.getter()
{
  return swift_retain();
}

uint64_t AUParamValue.wrappedValue.getter(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  id v4 = (void *)(*(uint64_t (**)(void))(**(void **)v1 + 152))();
  objc_msgSend(v4, sel_value);
  float v6 = v5;

  return (*(uint64_t (**)(uint64_t, float))(*(void *)(a1 + 24) + 32))(v3, v6);
}

uint64_t sub_1A674E34C()
{
  uint64_t v0 = type metadata accessor for AUParamValue();
  return AUParamValue.wrappedValue.getter(v0);
}

void sub_1A674E398(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AUParamValue();
  sub_1A674FB00(a1, v2);
}

uint64_t AUParamValue.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  sub_1A674FB00(a1, a2);
  id v4 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8);

  return v4(a1);
}

void (*AUParamValue.wrappedValue.modify(void *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  float v5 = malloc(0x30uLL);
  *a1 = v5;
  void *v5 = a2;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a2 + 16);
  v5[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  void v5[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v5[4] = malloc(v8);
  void v5[5] = malloc(v8);
  AUParamValue.wrappedValue.getter(a2);
  return sub_1A674E52C;
}

void sub_1A674E52C(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[4];
  id v4 = (void *)(*a1)[5];
  uint64_t v5 = (*a1)[2];
  uint64_t v6 = (*a1)[3];
  uint64_t v7 = **a1;
  if (a2)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[4], v4, v5);
    sub_1A674FB00((uint64_t)v3, v7);
    size_t v8 = *(void (**)(void *, uint64_t))(v6 + 8);
    v8(v3, v5);
    v8(v4, v5);
  }
  else
  {
    sub_1A674FB00((*a1)[5], v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t sub_1A674E618()
{
  sub_1A674F6A4();

  return swift_retain();
}

id TTSMagicFirstPartyAudioUnit.__allocating_init(componentDescription:options:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  v11[1] = *(id *)MEMORY[0x1E4F143B8];
  v11[0] = 0;
  v9[0] = a1;
  v9[1] = a2;
  int v10 = a3;
  id v5 = objc_msgSend(objc_allocWithZone(v4), sel_initWithComponentDescription_options_error_, v9, a4, v11);
  if (v5)
  {
    id v6 = v11[0];
  }
  else
  {
    id v7 = v11[0];
    sub_1A68916F0();

    swift_willThrow();
  }
  return v5;
}

void *TTSMagicFirstPartyAudioUnit.init(componentDescription:options:)(unint64_t a1, unint64_t a2, int a3, uint64_t a4)
{
  int v7 = a2;
  int v8 = a1;
  v20[1] = *(id *)MEMORY[0x1E4F143B8];
  unint64_t v9 = HIDWORD(a1);
  unint64_t v10 = HIDWORD(a2);
  *(void *)&v4[OBJC_IVAR____TtC12TextToSpeech27TTSMagicFirstPartyAudioUnit____lazy_storage___allValueParams] = 0;
  v20[0] = 0;
  v19.receiver = v4;
  v19.super_class = (Class)type metadata accessor for TTSMagicFirstPartyAudioUnit();
  v18[0] = v8;
  v18[1] = v9;
  long long v18[2] = v7;
  uint64_t v18[3] = v10;
  void v18[4] = a3;
  uint64_t v11 = objc_msgSendSuper2(&v19, sel_initWithComponentDescription_options_error_, v18, a4, v20);
  uint64_t v12 = v11;
  if (v11)
  {
    uint64_t v13 = *(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v11) + 0x70);
    id v14 = v20[0];
    id v15 = v12;
    v13();
  }
  else
  {
    id v16 = v20[0];
    sub_1A68916F0();

    swift_willThrow();
  }
  return v12;
}

uint64_t sub_1A674E8F0()
{
  uint64_t v1 = OBJC_IVAR____TtC12TextToSpeech27TTSMagicFirstPartyAudioUnit____lazy_storage___allValueParams;
  if (*(void *)&v0[OBJC_IVAR____TtC12TextToSpeech27TTSMagicFirstPartyAudioUnit____lazy_storage___allValueParams])
  {
    uint64_t v2 = *(void *)&v0[OBJC_IVAR____TtC12TextToSpeech27TTSMagicFirstPartyAudioUnit____lazy_storage___allValueParams];
  }
  else
  {
    uint64_t v2 = sub_1A674E958(v0);
    *(void *)&v0[v1] = v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_1A674E958(void *a1)
{
  uint64_t v16 = sub_1A6893280();
  uint64_t v15 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((void *)&v26 + 1) = type metadata accessor for TTSMagicFirstPartyAudioUnit();
  int64_t v24 = a1;
  id v4 = a1;
  sub_1A6893260();
  uint64_t v28 = MEMORY[0x1E4FBC860];
  id v14 = v3;
  sub_1A6893270();
  sub_1A6892DB0();
  swift_release();
  swift_retain();
  sub_1A6892F10();
  while (v27)
  {
    id v5 = v24;
    uint64_t v6 = v25;
    v22[0] = v24;
    v22[1] = v25;
    sub_1A674CF38(&v26, v23);
    v17[0] = v5;
    v17[1] = v6;
    sub_1A6741A74((uint64_t)v23, (uint64_t)&v18);
    sub_1A6741AD0(&qword_1EB67A198);
    if (swift_dynamicCast())
    {
      uint64_t v7 = *((void *)&v20 + 1);
      uint64_t v8 = v21;
      sub_1A673E63C(&v19, *((uint64_t *)&v20 + 1));
      uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8);
      sub_1A6741A24((uint64_t)&v19);
      if (*(unsigned char *)(v9 + 112) == 1 && (TTSIsInternalBuild() & 1) == 0)
      {
LABEL_11:
        sub_1A6750210((uint64_t)v22, &qword_1EB67A1A8);
        swift_release();
        goto LABEL_5;
      }
      sub_1A674DDE8(v9 + 72, (uint64_t)&v19);
      if (*((void *)&v20 + 1))
      {
        sub_1A673E770(&v19, (uint64_t)v17);
        char v10 = sub_1A6891AB0();
        sub_1A6741A24((uint64_t)v17);
        if ((v10 & 1) == 0) {
          goto LABEL_11;
        }
      }
      else
      {
        sub_1A6750210((uint64_t)&v19, &qword_1E96C1640);
      }
      uint64_t v11 = swift_retain();
      MEMORY[0x1AD0BF380](v11);
      if (*(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_1A6892320();
      }
      sub_1A6892360();
      sub_1A6892300();
      swift_release();
    }
    else
    {
      uint64_t v21 = 0;
      long long v19 = 0u;
      long long v20 = 0u;
      sub_1A6750210((uint64_t)&v19, &qword_1EB67A1A0);
    }
    sub_1A6750210((uint64_t)v22, &qword_1EB67A1A8);
LABEL_5:
    sub_1A6892F10();
  }
  swift_release_n();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v14, v16);
  return v28;
}

uint64_t sub_1A674EC8C(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR____TtC12TextToSpeech27TTSMagicFirstPartyAudioUnit____lazy_storage___allValueParams) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1A674ECA4(uint64_t *a1))(void *a1)
{
  a1[1] = v1;
  *a1 = sub_1A674E8F0();
  return sub_1A674ECEC;
}

uint64_t sub_1A674ECEC(void *a1)
{
  *(void *)(a1[1] + OBJC_IVAR____TtC12TextToSpeech27TTSMagicFirstPartyAudioUnit____lazy_storage___allValueParams) = *a1;
  return swift_bridgeObjectRelease();
}

void sub_1A674ED04()
{
  uint64_t v1 = self;
  unint64_t v2 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x58))();
  uint64_t v3 = v0;
  sub_1A674F6AC(v2, v3);
  swift_bridgeObjectRelease();

  sub_1A67501D4(0, (unint64_t *)&unk_1EB67A1B0);
  id v4 = (void *)sub_1A68922D0();
  swift_bridgeObjectRelease();
  id v5 = objc_msgSend(v1, sel_createTreeWithChildren_, v4);

  objc_msgSend(v3, sel_setParameterTree_, v5);
}

unint64_t sub_1A674EE24(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    unint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  sub_1A6741AD0(&qword_1E96C1CB0);
  unint64_t v2 = (void *)sub_1A6892EF0();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  id v4 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v5 = (uint64_t)*(v4 - 2);
    uint64_t v6 = (uint64_t)*(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    id v8 = v7;
    unint64_t result = sub_1A673F7AC(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v11 = v5;
    v11[1] = v6;
    *(void *)(v2[7] + 8 * result) = v8;
    uint64_t v12 = v2[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

id TTSMagicFirstPartyAudioUnit.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TTSMagicFirstPartyAudioUnit();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1A674F008(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1A6741AD0(&qword_1E96C1CB0);
  char v38 = a2;
  uint64_t v6 = sub_1A6892ED0();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v35 = v2;
  int64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    int64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    unint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void **)(*(void *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      id v33 = v32;
    }
    sub_1A6893200();
    sub_1A68920F0();
    uint64_t result = sub_1A6893250();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  int64_t v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v22 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

unint64_t sub_1A674F318(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = sub_1A6892BA0();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        sub_1A6893200();
        swift_bridgeObjectRetain();
        sub_1A68920F0();
        uint64_t v9 = sub_1A6893250();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          int64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            _OWORD *v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          unint64_t v15 = (void *)(v14 + 8 * v3);
          unint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *unint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  uint64_t *v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

id sub_1A674F4F0()
{
  uint64_t v1 = v0;
  sub_1A6741AD0(&qword_1E96C1CB0);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1A6892EC0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void **)(*(void *)(v2 + 56) + v19);
    BOOL v21 = (void *)(*(void *)(v4 + 48) + v16);
    *BOOL v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = v20;
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1A674F6A4()
{
  return *(void *)v0;
}

uint64_t sub_1A674F6AC(unint64_t a1, void *a2)
{
  uint64_t v14 = MEMORY[0x1E4FBC860];
  if (a1 >> 62)
  {
LABEL_17:
    swift_bridgeObjectRetain();
    uint64_t v4 = sub_1A6892EB0();
    if (v4) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
    {
LABEL_3:
      for (uint64_t i = 4; ; ++i)
      {
        uint64_t v6 = i - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          uint64_t v7 = MEMORY[0x1AD0BFD30](i - 4, a1);
          uint64_t v8 = i - 3;
          if (__OFADD__(v6, 1)) {
            goto LABEL_16;
          }
        }
        else
        {
          uint64_t v7 = *(void *)(a1 + 8 * i);
          swift_retain();
          uint64_t v8 = i - 3;
          if (__OFADD__(v6, 1))
          {
LABEL_16:
            __break(1u);
            goto LABEL_17;
          }
        }
        if ((*(uint64_t (**)(void))(*(void *)v7 + 128))())
        {
          int64_t v9 = *(uint64_t (**)(void *))(*(void *)v7 + 184);
          id v10 = a2;
          uint64_t v11 = v9(a2);
          (*(void (**)(uint64_t))(*(void *)v7 + 152))(v11);
          uint64_t v12 = swift_release();
          MEMORY[0x1AD0BF380](v12);
          if (*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            sub_1A6892320();
          }
          sub_1A6892360();
          sub_1A6892300();
        }
        else
        {
          swift_release();
        }
        if (v8 == v4)
        {
          swift_bridgeObjectRelease();
          return v14;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1E4FBC860];
}

uint64_t sub_1A674F8A8(char a1, void *a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v20[3] = a7;
  v20[4] = a8;
  uint64_t v16 = sub_1A675026C(v20);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a7 - 8) + 32))(v16, a3, a7);
  swift_unknownObjectWeakInit();
  *(unsigned char *)(a6 + 16) = a1;
  *(void *)(a6 + 24) = a2;
  sub_1A673E788((uint64_t)v20, a6 + 32);
  unint64_t v17 = *(void (**)(uint64_t, uint64_t))(a8 + 8);
  id v18 = a2;
  v17(a7, a8);
  objc_msgSend(v18, sel_setValue_);
  sub_1A67502D0(a4, a6 + 72);
  *(unsigned char *)(a6 + 112) = a5;
  sub_1A6741A24((uint64_t)v20);
  return a6;
}

uint64_t sub_1A674F9C0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v14 = a1;
  uint64_t v15 = *(void *)(a7 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v17 = (char *)&v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AUParamWrapper();
  uint64_t v18 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a3, a7);
  return sub_1A674F8A8(v14, a2, (uint64_t)v17, a4, a5, v18, a7, a8);
}

uint64_t type metadata accessor for AUParamWrapper()
{
  return self;
}

void sub_1A674FB00(uint64_t a1, uint64_t a2)
{
  id v4 = (id)(*(uint64_t (**)(void))(**(void **)v2 + 152))();
  (*(void (**)(void))(*(void *)(a2 + 24) + 8))(*(void *)(a2 + 16));
  objc_msgSend(v4, sel_setValue_);
}

uint64_t type metadata accessor for TTSMagicFirstPartyAudioUnit()
{
  return self;
}

uint64_t sub_1A674FBC4()
{
  unint64_t v1 = sub_1A674EE24(MEMORY[0x1E4FBC860]);
  unint64_t v2 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x58))();
  uint64_t v3 = v2;
  if (v2 >> 62) {
    goto LABEL_31;
  }
  uint64_t v4 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v4)
  {
LABEL_32:
    swift_bridgeObjectRelease();
    return v1;
  }
  while (2)
  {
    if (v4 >= 1)
    {
      uint64_t v5 = 0;
      unint64_t v6 = v3 & 0xC000000000000001;
      unint64_t v43 = v3 & 0xC000000000000001;
      uint64_t v44 = v3;
      uint64_t v45 = v4;
      while (1)
      {
        if (v6)
        {
          uint64_t v7 = (void *)MEMORY[0x1AD0BFD30](v5, v3);
        }
        else
        {
          uint64_t v7 = *(void **)(v3 + 8 * v5 + 32);
          swift_retain();
        }
        uint64_t v8 = v7[7];
        uint64_t v9 = v7[8];
        sub_1A673E63C(v7 + 4, v8);
        float v10 = (*(float (**)(uint64_t, uint64_t))(v9 + 8))(v8, v9);
        if (v10 != *(float *)sub_1A67DF5C0()) {
          break;
        }
        swift_release();
LABEL_6:
        if (v4 == ++v5) {
          goto LABEL_32;
        }
      }
      uint64_t v11 = (void *)(*(uint64_t (**)(void))(*v7 + 152))();
      id v12 = objc_msgSend(v11, sel_identifier);

      uint64_t v13 = sub_1A6892000();
      uint64_t v3 = v14;

      uint64_t v15 = v7[7];
      uint64_t v16 = v7[8];
      sub_1A673E63C(v7 + 4, v15);
      float v17 = (*(float (**)(uint64_t, uint64_t))(v16 + 8))(v15, v16);
      id v18 = objc_allocWithZone(NSNumber);
      *(float *)&double v19 = v17;
      id v20 = objc_msgSend(v18, sel_initWithFloat_, v19);
      if (!v20)
      {
        swift_bridgeObjectRetain();
        unint64_t v33 = sub_1A673F7AC(v13, v3);
        char v35 = v34;
        swift_bridgeObjectRelease();
        if (v35)
        {
          uint64_t v4 = v45;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            sub_1A674F4F0();
          }
          swift_bridgeObjectRelease();
          int64_t v36 = *(void **)(*(void *)(v1 + 56) + 8 * v33);
          sub_1A674F318(v33, v1);
          swift_release();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v3 = v44;
        }
        else
        {
          swift_release();
          swift_bridgeObjectRelease();
          uint64_t v3 = v44;
          uint64_t v4 = v45;
        }
        goto LABEL_6;
      }
      id v21 = v20;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unsigned int v46 = (void *)v1;
      unint64_t v23 = v1;
      unint64_t v1 = v13;
      unint64_t v25 = sub_1A673F7AC(v13, v3);
      uint64_t v26 = *(void *)(v23 + 16);
      BOOL v27 = (v24 & 1) == 0;
      uint64_t v28 = v26 + v27;
      if (__OFADD__(v26, v27))
      {
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        swift_bridgeObjectRetain();
        uint64_t v4 = sub_1A6892EB0();
        swift_bridgeObjectRelease();
        if (!v4) {
          goto LABEL_32;
        }
        continue;
      }
      char v29 = v24;
      if (*(void *)(v23 + 24) < v28)
      {
        sub_1A674F008(v28, isUniquelyReferenced_nonNull_native);
        unint64_t v30 = sub_1A673F7AC(v13, v3);
        if ((v29 & 1) != (v31 & 1)) {
          goto LABEL_34;
        }
        unint64_t v25 = v30;
        uint64_t v32 = v46;
        if ((v29 & 1) == 0) {
          goto LABEL_26;
        }
LABEL_23:
        unint64_t v1 = (unint64_t)v32;
        uint64_t v37 = v32[7];

        *(void *)(v37 + 8 * v25) = v21;
LABEL_28:
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v3 = v44;
        uint64_t v4 = v45;
        unint64_t v6 = v43;
        goto LABEL_6;
      }
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v32 = v46;
        if (v24) {
          goto LABEL_23;
        }
      }
      else
      {
        sub_1A674F4F0();
        uint64_t v32 = v46;
        if (v29) {
          goto LABEL_23;
        }
      }
LABEL_26:
      v32[(v25 >> 6) + 8] |= 1 << v25;
      char v38 = (uint64_t *)(v32[6] + 16 * v25);
      *char v38 = v13;
      v38[1] = v3;
      *(void *)(v32[7] + 8 * v25) = v21;
      uint64_t v39 = v32[2];
      BOOL v40 = __OFADD__(v39, 1);
      uint64_t v41 = v39 + 1;
      if (v40) {
        goto LABEL_30;
      }
      unint64_t v1 = (unint64_t)v32;
      _OWORD v32[2] = v41;
      swift_bridgeObjectRetain();
      goto LABEL_28;
    }
    break;
  }
  __break(1u);
LABEL_34:
  uint64_t result = sub_1A6893150();
  __break(1u);
  return result;
}

uint64_t sub_1A674FFF8()
{
  return 16;
}

__n128 sub_1A6750004(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A6750010()
{
  return 16;
}

__n128 sub_1A675001C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t dispatch thunk of AUParamConvertible.auParamValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of AUParamConvertible.auParamValue.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of AUParamConvertible.auParamValue.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of AUParamConvertible.init(auVal:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t method lookup function for AUParamWrapper(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AUParamWrapper);
}

uint64_t dispatch thunk of AUParamWrapper.enabled.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of AUParamWrapper.enabled.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of AUParamWrapper.enabled.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of AUParamWrapper.param.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of AUParamWrapper.param.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of AUParamWrapper.param.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t sub_1A6750168(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 24);
}

uint64_t type metadata accessor for AUParamValue()
{
  return sub_1A674B1C8();
}

uint64_t method lookup function for TTSMagicFirstPartyAudioUnit(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for TTSMagicFirstPartyAudioUnit);
}

uint64_t dispatch thunk of TTSMagicFirstPartyAudioUnit.buildParams()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t sub_1A67501D4(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_1A6750210(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_1A6741AD0(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t *sub_1A675026C(uint64_t *a1)
{
  unint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_1A67502D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1A6741AD0(&qword_1E96C1640);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for SpeechSlicer.VoiceQuery(uint64_t a1)
{
  return sub_1A675A684(a1, (uint64_t *)&unk_1E96C59F0);
}

uint64_t SpeechSlicer.slices(synthesizer:utteranceVoice:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 128) = a1;
  *(void *)(v3 + 136) = v2;
  sub_1A6750638(a2, v3 + 16);
  return MEMORY[0x1F4188298](sub_1A67503D4, 0, 0);
}

uint64_t sub_1A67503D4()
{
  uint64_t v2 = v0[16];
  uint64_t v1 = v0[17];
  v0[15] = *(void *)(v1 + *(int *)(type metadata accessor for SpeechSlicer(0) + 24));
  uint64_t v3 = swift_task_alloc();
  v0[18] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v0 + 2;
  swift_bridgeObjectRetain();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[19] = v4;
  uint64_t v5 = sub_1A6741AD0(&qword_1E96C1CD0);
  uint64_t v6 = type metadata accessor for SpeechSlicer.Slice(0);
  unint64_t v7 = sub_1A6750A68();
  void *v4 = v0;
  v4[1] = sub_1A67504FC;
  return sub_1A673ED60((uint64_t)&unk_1E96C1CC8, v3, v5, v6, v7);
}

uint64_t sub_1A67504FC(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t sub_1A6750638(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1A6741AD0(&qword_1E96C1608);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for SpeechSlicer(uint64_t a1)
{
  return sub_1A675A684(a1, (uint64_t *)&unk_1E96C59A0);
}

uint64_t sub_1A67506C0(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4)
{
  uint64_t v8 = *a2;
  sub_1A6750638(a4, v4 + 16);
  swift_retain();
  id v9 = a3;
  sub_1A675B02C(a4);
  float v10 = (void *)swift_task_alloc();
  *(void *)(v4 + 120) = v10;
  void *v10 = v4;
  v10[1] = sub_1A67507A8;
  return sub_1A6750B0C(a1, v8, (uint64_t)v9, v4 + 16);
}

uint64_t sub_1A67507A8()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1A67508A0(uint64_t a1, uint64_t *a2)
{
  unint64_t v7 = *(void **)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_1A6750954;
  return sub_1A67506C0(a1, a2, v7, v6);
}

uint64_t sub_1A6750954()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t type metadata accessor for SpeechSlicer.Slice(uint64_t a1)
{
  return sub_1A675A684(a1, (uint64_t *)&unk_1E96C59B0);
}

unint64_t sub_1A6750A68()
{
  unint64_t result = qword_1E96C1CD8;
  if (!qword_1E96C1CD8)
  {
    sub_1A6750AC4(&qword_1E96C1CD0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E96C1CD8);
  }
  return result;
}

uint64_t sub_1A6750AC4(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_1A6750B0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 672) = a3;
  *(void *)(v4 + 664) = a2;
  *(void *)(v4 + 656) = a1;
  sub_1A6741AD0(&qword_1E96C1CE8);
  *(void *)(v4 + 680) = swift_task_alloc();
  uint64_t v6 = sub_1A6891B40();
  *(void *)(v4 + 688) = v6;
  *(void *)(v4 + 696) = *(void *)(v6 - 8);
  *(void *)(v4 + 704) = swift_task_alloc();
  *(void *)(v4 + 712) = type metadata accessor for SpeechSlicer.VoiceQuery(0);
  *(void *)(v4 + 720) = swift_task_alloc();
  *(void *)(v4 + 728) = swift_task_alloc();
  long long v7 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v4 + 736) = *(_OWORD *)a4;
  *(_OWORD *)(v4 + 752) = v7;
  long long v8 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v4 + 768) = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(v4 + 784) = v8;
  long long v9 = *(_OWORD *)(a4 + 80);
  *(_OWORD *)(v4 + 800) = *(_OWORD *)(a4 + 64);
  *(_OWORD *)(v4 + 816) = v9;
  int v10 = *(_DWORD *)(a4 + 96);
  *(unsigned char *)(v4 + 836) = *(unsigned char *)(a4 + 100);
  *(_DWORD *)(v4 + 832) = v10;
  return MEMORY[0x1F4188298](sub_1A6750C70, 0, 0);
}

uint64_t sub_1A6750C70()
{
  uint64_t v1 = *(void *)(v0 + 696);
  uint64_t v2 = *(void *)(v0 + 688);
  uint64_t v3 = *(void *)(v0 + 664);
  uint64_t v4 = *(void *)(v0 + 656);
  uint64_t v5 = (int *)type metadata accessor for SpeechSlicer.Slice(0);
  *(_OWORD *)uint64_t v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(void *)(v4 + 93) = 0;
  uint64_t v6 = v5[5];
  *(_DWORD *)(v0 + 1016) = v6;
  uint64_t v7 = v4 + v6;
  long long v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 56);
  *(void *)(v0 + 840) = v8;
  *(void *)(v0 + 848) = (v1 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v8(v7, 1, 1, v2);
  *(void *)(v4 + v5[7]) = 0;
  uint64_t v9 = v5[10];
  *(_DWORD *)(v0 + 1020) = v9;
  int v10 = (void *)(v4 + v9);
  uint64_t v11 = v5[6];
  *(_DWORD *)(v0 + 1024) = v11;
  uint64_t v12 = (void *)(v4 + v11);
  void *v12 = 0;
  v12[1] = 0xE000000000000000;
  uint64_t v13 = v5[8];
  *(_DWORD *)(v0 + 1028) = v13;
  *(void *)(v4 + v13) = MEMORY[0x1E4FBC860];
  uint64_t v14 = v3
      + OBJC_IVAR____TtCV12TextToSpeech12SpeechSlicerP33_AA4177673707DD5115CAF93C9D57DEC615TrackedSSMLNode_voiceQuery;
  uint64_t v15 = v5[9];
  *(_DWORD *)(v0 + 1032) = v15;
  sub_1A67581E4(v14, v4 + v15, type metadata accessor for SpeechSlicer.VoiceQuery);
  uint64_t v16 = *(void *)(v3
                  + OBJC_IVAR____TtCV12TextToSpeech12SpeechSlicerP33_AA4177673707DD5115CAF93C9D57DEC615TrackedSSMLNode_voiceSelectionKey
                  + 8);
  void *v10 = *(void *)(v3
                   + OBJC_IVAR____TtCV12TextToSpeech12SpeechSlicerP33_AA4177673707DD5115CAF93C9D57DEC615TrackedSSMLNode_voiceSelectionKey);
  v10[1] = v16;
  uint64_t v17 = v5[11];
  *(_DWORD *)(v0 + 1036) = v17;
  *(void *)(v4 + v17) = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  id v18 = (void *)swift_task_alloc();
  *(void *)(v0 + 856) = v18;
  *id v18 = v0;
  v18[1] = sub_1A6750E38;
  uint64_t v19 = *(void *)(v0 + 656);
  v18[46] = *(void *)(v0 + 664);
  v18[47] = v19;
  return MEMORY[0x1F4188298](sub_1A6756750, 0, 0);
}

uint64_t sub_1A6750E38()
{
  swift_task_dealloc();
  return MEMORY[0x1F4188298](sub_1A6750F34, 0, 0);
}

uint64_t sub_1A6750F34()
{
  uint64_t v1 = *(void *)(v0 + 744);
  uint64_t v2 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v3 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + 672)) + 0x150))();
  *(void *)(v0 + 864) = v3;
  uint64_t v4 = sub_1A6891A40();
  *(void *)(v0 + 872) = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  *(void *)(v0 + 880) = v5;
  *(void *)(v0 + 888) = *(void *)(v5 + 64);
  uint64_t v7 = swift_task_alloc();
  *(void *)(v0 + 896) = v7;
  *(void *)(v0 + 904) = *(void *)(*(void *)(sub_1A6741AD0(&qword_1EB67A238) - 8) + 64);
  uint64_t v8 = swift_task_alloc();
  uint64_t v9 = v8;
  if (!v1)
  {
    int v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56);
    v10(v8, 1, 1, v4);
    goto LABEL_9;
  }
  CoreSynthesizer.Voice.primaryLocale.getter(v8);
  int v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v10(v9, 0, 1, v4);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v9, 1, v4) == 1)
  {
LABEL_9:
    *(void *)(v0 + 912) = v10;
    sub_1A6750210(v9, &qword_1EB67A238);
    swift_task_dealloc();
    id v86 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v3 + 184) + **(int **)(*(void *)v3 + 184));
    id v18 = (void *)swift_task_alloc();
    *(void *)(v0 + 920) = v18;
    *id v18 = v0;
    v18[1] = sub_1A6751E80;
    return v86(v7);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v7, v9, v4);
  swift_task_dealloc();
  sub_1A67581E4(*(void *)(v0 + 656) + *(int *)(v0 + 1032), *(void *)(v0 + 728), type metadata accessor for SpeechSlicer.VoiceQuery);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v12 = *(void *)(v0 + 864);
      uint64_t v13 = *(uint64_t **)(v0 + 728);
      sub_1A673FF60(*(void *)(v0 + 736), *(void *)(v0 + 744), *(void *)(v0 + 752), *(void *)(v0 + 760), *(void *)(v0 + 768), *(void *)(v0 + 776), *(void *)(v0 + 784), *(void *)(v0 + 792), *(void *)(v0 + 800), *(void *)(v0 + 808), *(void **)(v0 + 816));
      uint64_t v14 = *v13;
      uint64_t v15 = v13[1];
      *(void *)(v0 + 928) = v15;
      uint64_t v85 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v12 + 264)
                                                              + **(int **)(*(void *)v12 + 264));
      uint64_t v16 = (void *)swift_task_alloc();
      *(void *)(v0 + 936) = v16;
      void *v16 = v0;
      v16[1] = sub_1A6752B8C;
      return v85(v0 + 224, v14, v15);
    }
  }
  else
  {
    uint64_t v19 = *(void *)(v0 + 896);
    uint64_t v20 = *(void *)(v0 + 880);
    uint64_t v21 = *(void *)(v0 + 872);
    uint64_t v22 = *(void *)(v0 + 728);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(v19, v22, v21);
  }
  unint64_t v23 = (uint64_t *)(*(void *)(v0 + 656) + *(int *)(v0 + 1020));
  uint64_t v24 = v23[1];
  if (v24)
  {
    uint64_t v25 = *v23;
    uint64_t v26 = *(uint64_t (**)(uint64_t))((*v2 & **(void **)(v0 + 672)) + 0x270);
    uint64_t v27 = swift_bridgeObjectRetain();
    uint64_t v28 = v26(v27);
    if (*(void *)(v28 + 16))
    {
      unint64_t v29 = sub_1A673F7AC(v25, v24);
      if (v30)
      {
        uint64_t v31 = *(void *)(v0 + 880);
        uint64_t v32 = *(void *)(v0 + 872);
        uint64_t v33 = *(void *)(*(void *)(v28 + 56) + 8 * v29);
        *(void *)(v0 + 944) = v33;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v34 = swift_task_alloc();
        *(void *)(v0 + 952) = v34;
        (*(void (**)(void))(v31 + 16))();
        v10(v34, 0, 1, v32);
        char v35 = (void *)swift_task_alloc();
        *(void *)(v0 + 960) = v35;
        void *v35 = v0;
        v35[1] = sub_1A6752E20;
        uint64_t v36 = *(void *)(v0 + 680);
        return sub_1A6795F5C(v36, v34, v33);
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(void *)(*(void *)(v0 + 656) + 8))
  {
    uint64_t v37 = *(void *)(v0 + 896);
    uint64_t v38 = *(void *)(v0 + 880);
    uint64_t v39 = *(void *)(v0 + 872);
    BOOL v40 = *(void **)(v0 + 672);
    sub_1A673FF60(*(void *)(v0 + 736), *(void *)(v0 + 744), *(void *)(v0 + 752), *(void *)(v0 + 760), *(void *)(v0 + 768), *(void *)(v0 + 776), *(void *)(v0 + 784), *(void *)(v0 + 792), *(void *)(v0 + 800), *(void *)(v0 + 808), *(void **)(v0 + 816));
    swift_release();

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
LABEL_22:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v41 = *(uint64_t (**)(void))(v0 + 8);
    return v41();
  }
  if (*(void *)(v0 + 744))
  {
    uint64_t v90 = *(void *)(v0 + 880);
    uint64_t v82 = *(void *)(v0 + 872);
    uint64_t v77 = *(void **)(v0 + 816);
    uint64_t v87 = swift_task_alloc();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v42 = v77;
    CoreSynthesizer.Voice.primaryLocale.getter(v87);
    uint64_t v43 = sub_1A6891A20();
    uint64_t v44 = *(void *)(v43 - 8);
    uint64_t v45 = swift_task_alloc();
    sub_1A6891A30();
    uint64_t v81 = *(void (**)(uint64_t, uint64_t))(v90 + 8);
    v81(v87, v82);
    sub_1A6741AD0(&qword_1EB67A210);
    uint64_t v46 = swift_task_alloc();
    sub_1A68919F0();
    unsigned int v47 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
    v47(v45, v43);
    uint64_t v48 = swift_task_alloc();
    sub_1A6891A30();
    uint64_t v49 = swift_task_alloc();
    sub_1A68919F0();
    v47(v48, v43);
    uint64_t v50 = sub_1A6741AD0(&qword_1EB67A218) - 8;
    uint64_t v51 = swift_task_alloc();
    uint64_t v52 = v51 + *(int *)(v50 + 56);
    sub_1A675B090(v46, v51, &qword_1EB67A210);
    sub_1A675B090(v49, v52, &qword_1EB67A210);
    uint64_t v53 = sub_1A68918D0();
    uint64_t v54 = *(void *)(v53 - 8);
    long long v55 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v54 + 48);
    if (v55(v51, 1, v53) == 1)
    {
      sub_1A6750210(v49, &qword_1EB67A210);
      sub_1A6750210(v46, &qword_1EB67A210);
      int v56 = v55(v52, 1, v53);
      long long v57 = v56 == 1 ? &qword_1EB67A210 : &qword_1EB67A218;
      char v58 = v56 == 1 ? -1 : 0;
      char v59 = v58;
    }
    else
    {
      uint64_t v75 = v49;
      uint64_t v60 = swift_task_alloc();
      sub_1A675B090(v51, v60, &qword_1EB67A210);
      if (v55(v52, 1, v53) == 1)
      {
        sub_1A6750210(v75, &qword_1EB67A210);
        sub_1A6750210(v46, &qword_1EB67A210);
        (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v60, v53);
        swift_task_dealloc();
        char v59 = 0;
        long long v57 = &qword_1EB67A218;
      }
      else
      {
        uint64_t v61 = swift_task_alloc();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 32))(v61, v52, v53);
        sub_1A675B0F4(&qword_1E96C1550, MEMORY[0x1F418BD60]);
        char v79 = sub_1A6891FC0();
        id v62 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
        v62(v61, v53);
        long long v57 = &qword_1EB67A210;
        sub_1A6750210(v75, &qword_1EB67A210);
        sub_1A6750210(v46, &qword_1EB67A210);
        v62(v60, v53);
        swift_task_dealloc();
        char v59 = v79;
        swift_task_dealloc();
      }
    }
    sub_1A6750210(v51, v57);
    sub_1A673FF60(*(void *)(v0 + 736), *(void *)(v0 + 744), *(void *)(v0 + 752), *(void *)(v0 + 760), *(void *)(v0 + 768), *(void *)(v0 + 776), *(void *)(v0 + 784), *(void *)(v0 + 792), *(void *)(v0 + 800), *(void *)(v0 + 808), *(void **)(v0 + 816));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    if (v59)
    {
      uint64_t v63 = *(void *)(v0 + 896);
      uint64_t v64 = *(void *)(v0 + 872);
      int v88 = *(_DWORD *)(v0 + 832);
      char v84 = *(unsigned char *)(v0 + 836);
      uint64_t v65 = *(void *)(v0 + 824);
      uint64_t v83 = *(void *)(v0 + 816);
      long long v80 = *(_OWORD *)(v0 + 800);
      uint64_t v78 = *(unsigned __int8 *)(v0 + 792);
      uint64_t v66 = *(void *)(v0 + 784);
      uint64_t v67 = *(unsigned __int16 *)(v0 + 776);
      uint64_t v68 = *(void *)(v0 + 768);
      long long v74 = *(_OWORD *)(v0 + 736);
      long long v76 = *(_OWORD *)(v0 + 752);
      unint64_t v69 = *(void **)(v0 + 672);
      uint64_t v70 = *(void *)(v0 + 656);
      swift_release();

      swift_release();
      v81(v63, v64);
      sub_1A673FF60(*(void *)v70, *(void *)(v70 + 8), *(void *)(v70 + 16), *(void *)(v70 + 24), *(void *)(v70 + 32), *(void *)(v70 + 40), *(void *)(v70 + 48), *(void *)(v70 + 56), *(void *)(v70 + 64), *(void *)(v70 + 72), *(void **)(v70 + 80));
      *(_OWORD *)uint64_t v70 = v74;
      *(_OWORD *)(v70 + 16) = v76;
      *(void *)(v70 + 32) = v68;
      *(void *)(v70 + 40) = v67;
      *(void *)(v70 + 48) = v66;
      *(void *)(v70 + 56) = v78;
      *(_OWORD *)(v70 + 64) = v80;
      *(void *)(v70 + 80) = v83;
      *(void *)(v70 + 88) = v65 & 0x1FFFFFFFFLL;
      *(unsigned char *)(v70 + 100) = v84 & 1;
      *(_DWORD *)(v70 + 96) = v88;
      goto LABEL_22;
    }
  }
  uint64_t v71 = *(int **)(**(void **)(v0 + 864) + 304);
  uint64_t v89 = (uint64_t (*)(uint64_t, uint64_t))((char *)v71 + *v71);
  uint64_t v72 = (void *)swift_task_alloc();
  *(void *)(v0 + 1008) = v72;
  void *v72 = v0;
  v72[1] = sub_1A6754B04;
  uint64_t v73 = *(void *)(v0 + 896);
  return v89(v0 + 16, v73);
}

uint64_t sub_1A6751E80()
{
  swift_task_dealloc();
  return MEMORY[0x1F4188298](sub_1A6751F7C, 0, 0);
}

uint64_t sub_1A6751F7C()
{
  uint64_t v1 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 912);
  sub_1A67581E4(*(void *)(v0 + 656) + *(int *)(v0 + 1032), *(void *)(v0 + 728), type metadata accessor for SpeechSlicer.VoiceQuery);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v3 = *(void *)(v0 + 864);
      uint64_t v4 = *(uint64_t **)(v0 + 728);
      sub_1A673FF60(*(void *)(v0 + 736), *(void *)(v0 + 744), *(void *)(v0 + 752), *(void *)(v0 + 760), *(void *)(v0 + 768), *(void *)(v0 + 776), *(void *)(v0 + 784), *(void *)(v0 + 792), *(void *)(v0 + 800), *(void *)(v0 + 808), *(void **)(v0 + 816));
      uint64_t v5 = *v4;
      uint64_t v6 = v4[1];
      *(void *)(v0 + 928) = v6;
      uint64_t v75 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v3 + 264)
                                                              + **(int **)(*(void *)v3 + 264));
      uint64_t v7 = (void *)swift_task_alloc();
      *(void *)(v0 + 936) = v7;
      *uint64_t v7 = v0;
      v7[1] = sub_1A6752B8C;
      return v75(v0 + 224, v5, v6);
    }
  }
  else
  {
    uint64_t v9 = *(void *)(v0 + 896);
    uint64_t v10 = *(void *)(v0 + 880);
    uint64_t v11 = *(void *)(v0 + 872);
    uint64_t v12 = *(void *)(v0 + 728);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v9, v12, v11);
  }
  uint64_t v13 = (uint64_t *)(*(void *)(v0 + 656) + *(int *)(v0 + 1020));
  uint64_t v14 = v13[1];
  if (v14)
  {
    uint64_t v15 = *v13;
    uint64_t v16 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + 672)) + 0x270);
    uint64_t v17 = swift_bridgeObjectRetain();
    uint64_t v18 = v16(v17);
    if (*(void *)(v18 + 16))
    {
      unint64_t v19 = sub_1A673F7AC(v15, v14);
      if (v20)
      {
        uint64_t v21 = *(void *)(v0 + 880);
        uint64_t v22 = *(void *)(v0 + 872);
        uint64_t v23 = *(void *)(*(void *)(v18 + 56) + 8 * v19);
        *(void *)(v0 + 944) = v23;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v24 = swift_task_alloc();
        *(void *)(v0 + 952) = v24;
        (*(void (**)(void))(v21 + 16))();
        v1(v24, 0, 1, v22);
        uint64_t v25 = (void *)swift_task_alloc();
        *(void *)(v0 + 960) = v25;
        *uint64_t v25 = v0;
        v25[1] = sub_1A6752E20;
        uint64_t v26 = *(void *)(v0 + 680);
        return sub_1A6795F5C(v26, v24, v23);
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(void *)(*(void *)(v0 + 656) + 8))
  {
    uint64_t v27 = *(void *)(v0 + 896);
    uint64_t v28 = *(void *)(v0 + 880);
    uint64_t v29 = *(void *)(v0 + 872);
    char v30 = *(void **)(v0 + 672);
    sub_1A673FF60(*(void *)(v0 + 736), *(void *)(v0 + 744), *(void *)(v0 + 752), *(void *)(v0 + 760), *(void *)(v0 + 768), *(void *)(v0 + 776), *(void *)(v0 + 784), *(void *)(v0 + 792), *(void *)(v0 + 800), *(void *)(v0 + 808), *(void **)(v0 + 816));
    swift_release();

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
LABEL_16:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v31 = *(uint64_t (**)(void))(v0 + 8);
    return v31();
  }
  if (*(void *)(v0 + 744))
  {
    uint64_t v72 = *(void *)(v0 + 872);
    uint64_t v78 = *(void *)(v0 + 880);
    uint64_t v67 = *(void **)(v0 + 816);
    uint64_t v32 = swift_task_alloc();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v33 = v67;
    CoreSynthesizer.Voice.primaryLocale.getter(v32);
    uint64_t v34 = sub_1A6891A20();
    uint64_t v35 = *(void *)(v34 - 8);
    uint64_t v36 = swift_task_alloc();
    sub_1A6891A30();
    uint64_t v70 = *(void (**)(uint64_t, uint64_t))(v78 + 8);
    v70(v32, v72);
    sub_1A6741AD0(&qword_1EB67A210);
    uint64_t v37 = swift_task_alloc();
    sub_1A68919F0();
    uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
    v38(v36, v34);
    uint64_t v39 = swift_task_alloc();
    sub_1A6891A30();
    uint64_t v40 = swift_task_alloc();
    sub_1A68919F0();
    v38(v39, v34);
    uint64_t v41 = sub_1A6741AD0(&qword_1EB67A218) - 8;
    uint64_t v42 = swift_task_alloc();
    uint64_t v43 = v42 + *(int *)(v41 + 56);
    sub_1A675B090(v37, v42, &qword_1EB67A210);
    sub_1A675B090(v40, v43, &qword_1EB67A210);
    uint64_t v44 = sub_1A68918D0();
    uint64_t v45 = *(void *)(v44 - 8);
    uint64_t v46 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v45 + 48);
    if (v46(v42, 1, v44) == 1)
    {
      sub_1A6750210(v40, &qword_1EB67A210);
      sub_1A6750210(v37, &qword_1EB67A210);
      int v47 = v46(v43, 1, v44);
      uint64_t v48 = v47 == 1 ? &qword_1EB67A210 : &qword_1EB67A218;
      char v49 = v47 == 1 ? -1 : 0;
    }
    else
    {
      uint64_t v50 = swift_task_alloc();
      sub_1A675B090(v42, v50, &qword_1EB67A210);
      if (v46(v43, 1, v44) == 1)
      {
        sub_1A6750210(v40, &qword_1EB67A210);
        sub_1A6750210(v37, &qword_1EB67A210);
        (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v50, v44);
        swift_task_dealloc();
        char v49 = 0;
        uint64_t v48 = &qword_1EB67A218;
      }
      else
      {
        uint64_t v51 = swift_task_alloc();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 32))(v51, v43, v44);
        sub_1A675B0F4(&qword_1E96C1550, MEMORY[0x1F418BD60]);
        char v68 = sub_1A6891FC0();
        uint64_t v52 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
        v52(v51, v44);
        uint64_t v48 = &qword_1EB67A210;
        sub_1A6750210(v40, &qword_1EB67A210);
        sub_1A6750210(v37, &qword_1EB67A210);
        uint64_t v53 = v44;
        char v49 = v68;
        v52(v50, v53);
        swift_task_dealloc();
        swift_task_dealloc();
      }
    }
    sub_1A6750210(v42, v48);
    sub_1A673FF60(*(void *)(v0 + 736), *(void *)(v0 + 744), *(void *)(v0 + 752), *(void *)(v0 + 760), *(void *)(v0 + 768), *(void *)(v0 + 776), *(void *)(v0 + 784), *(void *)(v0 + 792), *(void *)(v0 + 800), *(void *)(v0 + 808), *(void **)(v0 + 816));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    if (v49)
    {
      uint64_t v54 = *(void *)(v0 + 896);
      uint64_t v55 = *(void *)(v0 + 872);
      int v76 = *(_DWORD *)(v0 + 832);
      char v74 = *(unsigned char *)(v0 + 836);
      uint64_t v56 = *(void *)(v0 + 824);
      uint64_t v73 = *(void *)(v0 + 816);
      long long v71 = *(_OWORD *)(v0 + 800);
      uint64_t v69 = *(unsigned __int8 *)(v0 + 792);
      uint64_t v57 = *(void *)(v0 + 784);
      uint64_t v58 = *(unsigned __int16 *)(v0 + 776);
      uint64_t v59 = *(void *)(v0 + 768);
      long long v65 = *(_OWORD *)(v0 + 736);
      long long v66 = *(_OWORD *)(v0 + 752);
      uint64_t v60 = *(void **)(v0 + 672);
      uint64_t v61 = *(void *)(v0 + 656);
      swift_release();

      swift_release();
      v70(v54, v55);
      sub_1A673FF60(*(void *)v61, *(void *)(v61 + 8), *(void *)(v61 + 16), *(void *)(v61 + 24), *(void *)(v61 + 32), *(void *)(v61 + 40), *(void *)(v61 + 48), *(void *)(v61 + 56), *(void *)(v61 + 64), *(void *)(v61 + 72), *(void **)(v61 + 80));
      *(_OWORD *)uint64_t v61 = v65;
      *(_OWORD *)(v61 + 16) = v66;
      *(void *)(v61 + 32) = v59;
      *(void *)(v61 + 40) = v58;
      *(void *)(v61 + 48) = v57;
      *(void *)(v61 + 56) = v69;
      *(_OWORD *)(v61 + 64) = v71;
      *(void *)(v61 + 80) = v73;
      *(void *)(v61 + 88) = v56 & 0x1FFFFFFFFLL;
      *(unsigned char *)(v61 + 100) = v74 & 1;
      *(_DWORD *)(v61 + 96) = v76;
      goto LABEL_16;
    }
  }
  id v62 = *(int **)(**(void **)(v0 + 864) + 304);
  uint64_t v77 = (uint64_t (*)(uint64_t, uint64_t))((char *)v62 + *v62);
  uint64_t v63 = (void *)swift_task_alloc();
  *(void *)(v0 + 1008) = v63;
  *uint64_t v63 = v0;
  v63[1] = sub_1A6754B04;
  uint64_t v64 = *(void *)(v0 + 896);
  return v77(v0 + 16, v64);
}

uint64_t sub_1A6752B8C()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4188298](sub_1A6752CA4, 0, 0);
}

uint64_t sub_1A6752CA4()
{
  uint64_t v1 = *(void *)(v0 + 896);
  uint64_t v2 = *(void *)(v0 + 880);
  uint64_t v3 = *(void *)(v0 + 872);
  uint64_t v4 = *(void **)(v0 + 672);
  uint64_t v5 = *(void *)(v0 + 656);
  swift_release();

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  long long v14 = *(_OWORD *)(v0 + 240);
  long long v15 = *(_OWORD *)(v0 + 224);
  long long v12 = *(_OWORD *)(v0 + 272);
  long long v13 = *(_OWORD *)(v0 + 256);
  long long v11 = *(_OWORD *)(v0 + 288);
  uint64_t v7 = *(void *)(v0 + 304);
  uint64_t v6 = *(void *)(v0 + 312);
  int v8 = *(_DWORD *)(v0 + 320);
  LOBYTE(v2) = *(unsigned char *)(v0 + 324);
  sub_1A673FF60(*(void *)v5, *(void *)(v5 + 8), *(void *)(v5 + 16), *(void *)(v5 + 24), *(void *)(v5 + 32), *(void *)(v5 + 40), *(void *)(v5 + 48), *(void *)(v5 + 56), *(void *)(v5 + 64), *(void *)(v5 + 72), *(void **)(v5 + 80));
  *(_OWORD *)uint64_t v5 = v15;
  *(_OWORD *)(v5 + 16) = v14;
  *(_OWORD *)(v5 + 32) = v13;
  *(_OWORD *)(v5 + 48) = v12;
  *(_OWORD *)(v5 + 64) = v11;
  *(void *)(v5 + 80) = v7;
  *(void *)(v5 + 88) = v6;
  *(unsigned char *)(v5 + 100) = v2;
  *(_DWORD *)(v5 + 96) = v8;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_1A6752E20()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 952);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_1A6750210(v1, &qword_1EB67A238);
  swift_task_dealloc();
  return MEMORY[0x1F4188298](sub_1A6752F64, 0, 0);
}

uint64_t sub_1A6752F64()
{
  uint64_t v1 = *(void *)(v0 + 696);
  uint64_t v2 = *(void *)(v0 + 688);
  uint64_t v3 = *(void *)(v0 + 680);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    sub_1A6750210(v3, &qword_1E96C1CE8);
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v1 + 32))(*(void *)(v0 + 704), v3, v2);
    uint64_t v4 = sub_1A6891B30();
    *(void *)(v0 + 968) = v5;
    if (v5)
    {
      uint64_t v6 = v4;
      uint64_t v7 = v5;
      uint64_t v8 = *(void *)(v0 + 864);
      uint64_t v9 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 840);
      uint64_t v10 = *(void *)(v0 + 704);
      uint64_t v11 = *(void *)(v0 + 696);
      uint64_t v12 = *(void *)(v0 + 688);
      uint64_t v13 = *(void *)(v0 + 656) + *(int *)(v0 + 1016);
      sub_1A6750210(v13, &qword_1E96C1CE8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v13, v10, v12);
      v9(v13, 0, 1, v12);
      uint64_t v63 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v8 + 264)
                                                              + **(int **)(*(void *)v8 + 264));
      long long v14 = (void *)swift_task_alloc();
      *(void *)(v0 + 976) = v14;
      *long long v14 = v0;
      v14[1] = sub_1A67539F0;
      return v63(v0 + 120, v6, v7);
    }
    (*(void (**)(void, void))(*(void *)(v0 + 696) + 8))(*(void *)(v0 + 704), *(void *)(v0 + 688));
  }
  if (*(void *)(*(void *)(v0 + 656) + 8))
  {
    uint64_t v16 = *(void *)(v0 + 896);
    uint64_t v17 = *(void *)(v0 + 880);
    uint64_t v18 = *(void *)(v0 + 872);
    unint64_t v19 = *(void **)(v0 + 672);
    sub_1A673FF60(*(void *)(v0 + 736), *(void *)(v0 + 744), *(void *)(v0 + 752), *(void *)(v0 + 760), *(void *)(v0 + 768), *(void *)(v0 + 776), *(void *)(v0 + 784), *(void *)(v0 + 792), *(void *)(v0 + 800), *(void *)(v0 + 808), *(void **)(v0 + 816));
    swift_release();

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
LABEL_10:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    char v20 = *(uint64_t (**)(void))(v0 + 8);
    return v20();
  }
  if (*(void *)(v0 + 744))
  {
    uint64_t v61 = *(void *)(v0 + 872);
    uint64_t v67 = *(void *)(v0 + 880);
    uint64_t v56 = *(void **)(v0 + 816);
    uint64_t v21 = swift_task_alloc();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v22 = v56;
    CoreSynthesizer.Voice.primaryLocale.getter(v21);
    uint64_t v23 = sub_1A6891A20();
    uint64_t v24 = *(void *)(v23 - 8);
    uint64_t v25 = swift_task_alloc();
    sub_1A6891A30();
    uint64_t v59 = *(void (**)(uint64_t, uint64_t))(v67 + 8);
    v59(v21, v61);
    sub_1A6741AD0(&qword_1EB67A210);
    uint64_t v26 = swift_task_alloc();
    sub_1A68919F0();
    uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    v27(v25, v23);
    uint64_t v28 = swift_task_alloc();
    sub_1A6891A30();
    uint64_t v29 = swift_task_alloc();
    sub_1A68919F0();
    v27(v28, v23);
    uint64_t v30 = sub_1A6741AD0(&qword_1EB67A218) - 8;
    uint64_t v31 = swift_task_alloc();
    uint64_t v32 = v31 + *(int *)(v30 + 56);
    sub_1A675B090(v26, v31, &qword_1EB67A210);
    sub_1A675B090(v29, v32, &qword_1EB67A210);
    uint64_t v33 = sub_1A68918D0();
    uint64_t v34 = *(void *)(v33 - 8);
    uint64_t v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 48);
    if (v35(v31, 1, v33) == 1)
    {
      sub_1A6750210(v29, &qword_1EB67A210);
      sub_1A6750210(v26, &qword_1EB67A210);
      int v36 = v35(v32, 1, v33);
      uint64_t v37 = v36 == 1 ? &qword_1EB67A210 : &qword_1EB67A218;
      char v38 = v36 == 1 ? -1 : 0;
    }
    else
    {
      uint64_t v39 = swift_task_alloc();
      sub_1A675B090(v31, v39, &qword_1EB67A210);
      if (v35(v32, 1, v33) == 1)
      {
        sub_1A6750210(v29, &qword_1EB67A210);
        sub_1A6750210(v26, &qword_1EB67A210);
        (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v39, v33);
        swift_task_dealloc();
        char v38 = 0;
        uint64_t v37 = &qword_1EB67A218;
      }
      else
      {
        uint64_t v40 = swift_task_alloc();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 32))(v40, v32, v33);
        sub_1A675B0F4(&qword_1E96C1550, MEMORY[0x1F418BD60]);
        char v57 = sub_1A6891FC0();
        uint64_t v41 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
        v41(v40, v33);
        uint64_t v37 = &qword_1EB67A210;
        sub_1A6750210(v29, &qword_1EB67A210);
        sub_1A6750210(v26, &qword_1EB67A210);
        uint64_t v42 = v33;
        char v38 = v57;
        v41(v39, v42);
        swift_task_dealloc();
        swift_task_dealloc();
      }
    }
    sub_1A6750210(v31, v37);
    sub_1A673FF60(*(void *)(v0 + 736), *(void *)(v0 + 744), *(void *)(v0 + 752), *(void *)(v0 + 760), *(void *)(v0 + 768), *(void *)(v0 + 776), *(void *)(v0 + 784), *(void *)(v0 + 792), *(void *)(v0 + 800), *(void *)(v0 + 808), *(void **)(v0 + 816));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    if (v38)
    {
      uint64_t v43 = *(void *)(v0 + 896);
      uint64_t v44 = *(void *)(v0 + 872);
      int v65 = *(_DWORD *)(v0 + 832);
      char v64 = *(unsigned char *)(v0 + 836);
      uint64_t v45 = *(void *)(v0 + 824);
      uint64_t v62 = *(void *)(v0 + 816);
      long long v60 = *(_OWORD *)(v0 + 800);
      uint64_t v58 = *(unsigned __int8 *)(v0 + 792);
      uint64_t v46 = *(void *)(v0 + 784);
      uint64_t v47 = *(unsigned __int16 *)(v0 + 776);
      uint64_t v48 = *(void *)(v0 + 768);
      long long v54 = *(_OWORD *)(v0 + 736);
      long long v55 = *(_OWORD *)(v0 + 752);
      char v49 = *(void **)(v0 + 672);
      uint64_t v50 = *(void *)(v0 + 656);
      swift_release();

      swift_release();
      v59(v43, v44);
      sub_1A673FF60(*(void *)v50, *(void *)(v50 + 8), *(void *)(v50 + 16), *(void *)(v50 + 24), *(void *)(v50 + 32), *(void *)(v50 + 40), *(void *)(v50 + 48), *(void *)(v50 + 56), *(void *)(v50 + 64), *(void *)(v50 + 72), *(void **)(v50 + 80));
      *(_OWORD *)uint64_t v50 = v54;
      *(_OWORD *)(v50 + 16) = v55;
      *(void *)(v50 + 32) = v48;
      *(void *)(v50 + 40) = v47;
      *(void *)(v50 + 48) = v46;
      *(void *)(v50 + 56) = v58;
      *(_OWORD *)(v50 + 64) = v60;
      *(void *)(v50 + 80) = v62;
      *(void *)(v50 + 88) = v45 & 0x1FFFFFFFFLL;
      *(unsigned char *)(v50 + 100) = v64 & 1;
      *(_DWORD *)(v50 + 96) = v65;
      goto LABEL_10;
    }
  }
  uint64_t v51 = *(int **)(**(void **)(v0 + 864) + 304);
  long long v66 = (uint64_t (*)(uint64_t, uint64_t))((char *)v51 + *v51);
  uint64_t v52 = (void *)swift_task_alloc();
  *(void *)(v0 + 1008) = v52;
  *uint64_t v52 = v0;
  v52[1] = sub_1A6754B04;
  uint64_t v53 = *(void *)(v0 + 896);
  return v66(v0 + 16, v53);
}

uint64_t sub_1A67539F0()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4188298](sub_1A6753B08, 0, 0);
}

uint64_t sub_1A6753B08()
{
  uint64_t v1 = *(int *)(v0 + 1036);
  uint64_t v2 = *(void *)(v0 + 656);
  long long v51 = *(_OWORD *)(v0 + 136);
  long long v54 = *(_OWORD *)(v0 + 120);
  long long v46 = *(_OWORD *)(v0 + 168);
  long long v49 = *(_OWORD *)(v0 + 152);
  long long v44 = *(_OWORD *)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 200);
  uint64_t v4 = *(void *)(v0 + 208);
  int v5 = *(_DWORD *)(v0 + 216);
  char v6 = *(unsigned char *)(v0 + 220);
  sub_1A673FF60(*(void *)v2, *(void *)(v2 + 8), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64), *(void *)(v2 + 72), *(void **)(v2 + 80));
  *(_OWORD *)uint64_t v2 = v54;
  *(_OWORD *)(v2 + 16) = v51;
  *(_OWORD *)(v2 + 32) = v49;
  *(_OWORD *)(v2 + 48) = v46;
  *(_OWORD *)(v2 + 64) = v44;
  *(void *)(v2 + 80) = v3;
  *(void *)(v2 + 88) = v4;
  *(unsigned char *)(v2 + 100) = v6;
  *(_DWORD *)(v2 + 96) = v5;
  sub_1A673E788(*(void *)(v2 + v1) + 16, v0 + 328);
  uint64_t v7 = *(void *)(v0 + 352);
  uint64_t v8 = *(void *)(v0 + 360);
  sub_1A673E63C((void *)(v0 + 328), v7);
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v7, v8);
  if (*(void *)(v0 + 392))
  {
    uint64_t v9 = *(int *)(v0 + 1036);
    uint64_t v47 = v9;
    uint64_t v55 = *(int *)(v0 + 1028);
    uint64_t v39 = *(void *)(v0 + 720);
    uint64_t v10 = *(void *)(v0 + 656);
    uint64_t v52 = (void *)(v10 + *(int *)(v0 + 1024));
    sub_1A673E770((long long *)(v0 + 368), v0 + 448);
    sub_1A6741A24(v0 + 328);
    uint64_t v11 = (uint64_t *)(*(void *)(v10 + v9)
                    + OBJC_IVAR____TtCV12TextToSpeech12SpeechSlicerP33_AA4177673707DD5115CAF93C9D57DEC615TrackedSSMLNode_children);
    swift_beginAccess();
    uint64_t v42 = *v11;
    uint64_t v12 = *(void *)(v0 + 472);
    uint64_t v13 = *(void *)(v0 + 480);
    sub_1A673E63C((void *)(v0 + 448), v12);
    swift_bridgeObjectRetain();
    unint64_t v14 = sub_1A682D6A4();
    TTSMarkupSpeech.rate(_:)(v14 | ((HIDWORD(v14) & 1) << 32), v12, v13, (uint64_t *)(v0 + 408));
    uint64_t v15 = *(void *)(v0 + 432);
    uint64_t v16 = *(void *)(v0 + 440);
    sub_1A673E63C((void *)(v0 + 408), v15);
    unint64_t v17 = sub_1A682D678();
    TTSMarkupSpeech.pitch(_:)(v17 | ((HIDWORD(v17) & 1) << 32), v15, v16, (uint64_t *)(v0 + 488));
    uint64_t v18 = *(void *)(v0 + 512);
    uint64_t v19 = *(void *)(v0 + 520);
    sub_1A673E63C((void *)(v0 + 488), v18);
    unint64_t v20 = sub_1A6891B20();
    TTSMarkupSpeech.volume(_:)(v20 | ((HIDWORD(v20) & 1) << 32), v18, v19, (uint64_t *)(v0 + 528));
    sub_1A6741A24(v0 + 448);
    sub_1A673E770((long long *)(v0 + 528), v0 + 448);
    sub_1A6741A24(v0 + 488);
    sub_1A6741A24(v0 + 408);
    sub_1A673E788(v0 + 448, v0 + 568);
    swift_storeEnumTagMultiPayload();
    type metadata accessor for SpeechSlicer.TrackedSSMLNode(0);
    uint64_t v21 = swift_allocObject();
    *(void *)(v0 + 984) = v21;
    swift_weakInit();
    sub_1A673E770((long long *)(v0 + 568), v21 + 16);
    *(void *)(v21
              + OBJC_IVAR____TtCV12TextToSpeech12SpeechSlicerP33_AA4177673707DD5115CAF93C9D57DEC615TrackedSSMLNode_children) = v42;
    swift_weakAssign();
    sub_1A675AFC8(v39, v21+ OBJC_IVAR____TtCV12TextToSpeech12SpeechSlicerP33_AA4177673707DD5115CAF93C9D57DEC615TrackedSSMLNode_voiceQuery);
    id v22 = (void *)(v21
                   + OBJC_IVAR____TtCV12TextToSpeech12SpeechSlicerP33_AA4177673707DD5115CAF93C9D57DEC615TrackedSSMLNode_voiceSelectionKey);
    *id v22 = 0;
    v22[1] = 0;
    uint64_t v23 = *(void *)(v10 + v47);
    *(void *)(v0 + 992) = v23;
    sub_1A6741AD0((uint64_t *)&unk_1E96C15F0);
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_1A689E330;
    *(void *)(v24 + 32) = v21;
    uint64_t v57 = v24;
    sub_1A6892300();
    uint64_t v25 = (uint64_t *)(v23
                    + OBJC_IVAR____TtCV12TextToSpeech12SpeechSlicerP33_AA4177673707DD5115CAF93C9D57DEC615TrackedSSMLNode_children);
    swift_beginAccess();
    *uint64_t v25 = v57;
    swift_retain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *uint64_t v52 = 0;
    v52[1] = 0xE000000000000000;
    swift_bridgeObjectRelease();
    *(void *)(v10 + v55) = MEMORY[0x1E4FBC860];
    swift_retain();
    uint64_t v26 = (void *)swift_task_alloc();
    *(void *)(v0 + 1000) = v26;
    *uint64_t v26 = v0;
    v26[1] = sub_1A675411C;
    uint64_t v27 = *(void *)(v0 + 656);
    v26[46] = v23;
    v26[47] = v27;
    return MEMORY[0x1F4188298](sub_1A6756750, 0, 0);
  }
  else
  {
    uint64_t v56 = *(void *)(v0 + 896);
    uint64_t v28 = *(void *)(v0 + 880);
    uint64_t v53 = *(void *)(v0 + 872);
    char v38 = *(void **)(v0 + 816);
    long long v37 = *(_OWORD *)(v0 + 800);
    uint64_t v50 = *(void *)(v0 + 792);
    uint64_t v48 = *(void *)(v0 + 784);
    uint64_t v40 = *(void *)(v0 + 768);
    uint64_t v41 = *(void *)(v0 + 776);
    uint64_t v36 = *(void *)(v0 + 760);
    uint64_t v29 = *(void *)(v0 + 752);
    uint64_t v30 = *(void *)(v0 + 744);
    uint64_t v31 = *(void *)(v0 + 736);
    uint64_t v32 = *(void *)(v0 + 696);
    uint64_t v43 = *(void *)(v0 + 688);
    uint64_t v45 = *(void *)(v0 + 704);
    uint64_t v33 = *(void **)(v0 + 672);
    swift_release();

    swift_release();
    sub_1A673FF60(v31, v30, v29, v36, v40, v41, v48, v50, v37, *((uint64_t *)&v37 + 1), v38);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v45, v43);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v56, v53);
    sub_1A6750210(v0 + 368, &qword_1E96C1CE0);
    sub_1A6741A24(v0 + 328);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v34 = *(uint64_t (**)(void))(v0 + 8);
    return v34();
  }
}

uint64_t sub_1A675411C()
{
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x1F4188298](sub_1A6754234, 0, 0);
}

uint64_t sub_1A6754234()
{
  uint64_t v1 = *(void *)(v0 + 704);
  uint64_t v2 = *(void *)(v0 + 696);
  uint64_t v3 = *(void *)(v0 + 688);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_1A6741A24(v0 + 448);
  if (*(void *)(*(void *)(v0 + 656) + 8))
  {
    uint64_t v4 = *(void *)(v0 + 896);
    uint64_t v5 = *(void *)(v0 + 880);
    uint64_t v6 = *(void *)(v0 + 872);
    uint64_t v7 = *(void **)(v0 + 672);
    sub_1A673FF60(*(void *)(v0 + 736), *(void *)(v0 + 744), *(void *)(v0 + 752), *(void *)(v0 + 760), *(void *)(v0 + 768), *(void *)(v0 + 776), *(void *)(v0 + 784), *(void *)(v0 + 792), *(void *)(v0 + 800), *(void *)(v0 + 808), *(void **)(v0 + 816));
    swift_release();

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
LABEL_3:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
  if (*(void *)(v0 + 744))
  {
    uint64_t v55 = *(void *)(v0 + 880);
    uint64_t v51 = *(void *)(v0 + 872);
    long long v46 = *(void **)(v0 + 816);
    uint64_t v10 = swift_task_alloc();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v11 = v46;
    CoreSynthesizer.Voice.primaryLocale.getter(v10);
    uint64_t v12 = sub_1A6891A20();
    uint64_t v13 = *(void *)(v12 - 8);
    uint64_t v14 = swift_task_alloc();
    sub_1A6891A30();
    long long v49 = *(void (**)(uint64_t, uint64_t))(v55 + 8);
    v49(v10, v51);
    sub_1A6741AD0(&qword_1EB67A210);
    uint64_t v15 = swift_task_alloc();
    sub_1A68919F0();
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v16(v14, v12);
    uint64_t v17 = swift_task_alloc();
    sub_1A6891A30();
    uint64_t v18 = swift_task_alloc();
    sub_1A68919F0();
    v16(v17, v12);
    uint64_t v19 = sub_1A6741AD0(&qword_1EB67A218) - 8;
    uint64_t v20 = swift_task_alloc();
    uint64_t v21 = v20 + *(int *)(v19 + 56);
    sub_1A675B090(v15, v20, &qword_1EB67A210);
    sub_1A675B090(v18, v21, &qword_1EB67A210);
    uint64_t v22 = sub_1A68918D0();
    uint64_t v23 = *(void *)(v22 - 8);
    uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
    if (v24(v20, 1, v22) == 1)
    {
      sub_1A6750210(v18, &qword_1EB67A210);
      sub_1A6750210(v15, &qword_1EB67A210);
      int v25 = v24(v21, 1, v22);
      uint64_t v26 = v25 == 1 ? &qword_1EB67A210 : &qword_1EB67A218;
      char v27 = v25 == 1 ? -1 : 0;
    }
    else
    {
      uint64_t v47 = v15;
      uint64_t v28 = swift_task_alloc();
      sub_1A675B090(v20, v28, &qword_1EB67A210);
      if (v24(v21, 1, v22) == 1)
      {
        sub_1A6750210(v18, &qword_1EB67A210);
        sub_1A6750210(v15, &qword_1EB67A210);
        (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v28, v22);
        swift_task_dealloc();
        char v27 = 0;
        uint64_t v26 = &qword_1EB67A218;
      }
      else
      {
        uint64_t v29 = swift_task_alloc();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 32))(v29, v21, v22);
        sub_1A675B0F4(&qword_1E96C1550, MEMORY[0x1F418BD60]);
        char v44 = sub_1A6891FC0();
        uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
        v30(v29, v22);
        uint64_t v26 = &qword_1EB67A210;
        sub_1A6750210(v18, &qword_1EB67A210);
        sub_1A6750210(v47, &qword_1EB67A210);
        v30(v28, v22);
        swift_task_dealloc();
        char v27 = v44;
        swift_task_dealloc();
      }
    }
    sub_1A6750210(v20, v26);
    sub_1A673FF60(*(void *)(v0 + 736), *(void *)(v0 + 744), *(void *)(v0 + 752), *(void *)(v0 + 760), *(void *)(v0 + 768), *(void *)(v0 + 776), *(void *)(v0 + 784), *(void *)(v0 + 792), *(void *)(v0 + 800), *(void *)(v0 + 808), *(void **)(v0 + 816));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    if (v27)
    {
      uint64_t v31 = *(void *)(v0 + 896);
      uint64_t v32 = *(void *)(v0 + 872);
      int v53 = *(_DWORD *)(v0 + 832);
      char v52 = *(unsigned char *)(v0 + 836);
      uint64_t v33 = *(void *)(v0 + 824);
      uint64_t v50 = *(void *)(v0 + 816);
      long long v48 = *(_OWORD *)(v0 + 800);
      uint64_t v45 = *(unsigned __int8 *)(v0 + 792);
      uint64_t v34 = *(void *)(v0 + 784);
      uint64_t v35 = *(unsigned __int16 *)(v0 + 776);
      uint64_t v36 = *(void *)(v0 + 768);
      long long v42 = *(_OWORD *)(v0 + 736);
      long long v43 = *(_OWORD *)(v0 + 752);
      long long v37 = *(void **)(v0 + 672);
      uint64_t v38 = *(void *)(v0 + 656);
      swift_release();

      swift_release();
      v49(v31, v32);
      sub_1A673FF60(*(void *)v38, *(void *)(v38 + 8), *(void *)(v38 + 16), *(void *)(v38 + 24), *(void *)(v38 + 32), *(void *)(v38 + 40), *(void *)(v38 + 48), *(void *)(v38 + 56), *(void *)(v38 + 64), *(void *)(v38 + 72), *(void **)(v38 + 80));
      *(_OWORD *)uint64_t v38 = v42;
      *(_OWORD *)(v38 + 16) = v43;
      *(void *)(v38 + 32) = v36;
      *(void *)(v38 + 40) = v35;
      *(void *)(v38 + 48) = v34;
      *(void *)(v38 + 56) = v45;
      *(_OWORD *)(v38 + 64) = v48;
      *(void *)(v38 + 80) = v50;
      *(void *)(v38 + 88) = v33 & 0x1FFFFFFFFLL;
      *(unsigned char *)(v38 + 100) = v52 & 1;
      *(_DWORD *)(v38 + 96) = v53;
      goto LABEL_3;
    }
  }
  uint64_t v39 = *(int **)(**(void **)(v0 + 864) + 304);
  long long v54 = (uint64_t (*)(uint64_t, uint64_t))((char *)v39 + *v39);
  uint64_t v40 = (void *)swift_task_alloc();
  *(void *)(v0 + 1008) = v40;
  *uint64_t v40 = v0;
  v40[1] = sub_1A6754B04;
  uint64_t v41 = *(void *)(v0 + 896);
  return v54(v0 + 16, v41);
}

uint64_t sub_1A6754B04()
{
  swift_task_dealloc();
  return MEMORY[0x1F4188298](sub_1A6754C00, 0, 0);
}

uint64_t sub_1A6754C00()
{
  uint64_t v1 = *(void *)(v0 + 896);
  uint64_t v2 = *(void *)(v0 + 880);
  uint64_t v3 = *(void *)(v0 + 872);
  uint64_t v4 = *(void **)(v0 + 672);
  swift_release();

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v5 = *(void *)(v0 + 24);
  unint64_t v6 = *(unsigned int *)(v0 + 832) | ((unint64_t)*(unsigned __int8 *)(v0 + 836) << 32);
  uint64_t v25 = *(void *)(v0 + 784);
  uint64_t v26 = *(void *)(v0 + 792);
  if (v5)
  {
    unint64_t v20 = *(unsigned int *)(v0 + 112) | ((unint64_t)*(unsigned __int8 *)(v0 + 116) << 32);
    uint64_t v7 = *(void *)(v0 + 88);
    uint64_t v19 = *(void *)(v0 + 96);
    uint64_t v24 = *(void *)(v0 + 80);
    uint64_t v18 = *(void *)(v0 + 72);
    uint64_t v17 = *(void *)(v0 + 64);
    uint64_t v8 = *(void *)(v0 + 48);
    uint64_t v22 = *(void *)(v0 + 104);
    uint64_t v23 = *(void *)(v0 + 56);
    uint64_t v9 = *(void *)(v0 + 32);
    uint64_t v10 = *(void *)(v0 + 40);
    uint64_t v11 = *(void *)(v0 + 16);
    sub_1A673FF60(*(void *)(v0 + 736), *(void *)(v0 + 744), *(void *)(v0 + 752), *(void *)(v0 + 760), *(void *)(v0 + 768), *(void *)(v0 + 776), v25, v26, *(void *)(v0 + 800), *(void *)(v0 + 808), *(void **)(v0 + 816));
    uint64_t v21 = v5;
    uint64_t v12 = v8;
    uint64_t v25 = v17;
    uint64_t v26 = v18;
    uint64_t v13 = v19;
    unint64_t v6 = v20;
  }
  else
  {
    uint64_t v23 = *(void *)(v0 + 776);
    uint64_t v24 = *(void *)(v0 + 800);
    uint64_t v7 = *(void *)(v0 + 808);
    uint64_t v13 = *(void *)(v0 + 816);
    uint64_t v21 = *(void *)(v0 + 744);
    uint64_t v22 = *(void *)(v0 + 824);
    uint64_t v12 = *(void *)(v0 + 768);
    uint64_t v10 = *(void *)(v0 + 760);
    uint64_t v9 = *(void *)(v0 + 752);
    uint64_t v11 = *(void *)(v0 + 736);
  }
  uint64_t v14 = *(void *)(v0 + 656);
  sub_1A673FF60(*(void *)v14, *(void *)(v14 + 8), *(void *)(v14 + 16), *(void *)(v14 + 24), *(void *)(v14 + 32), *(void *)(v14 + 40), *(void *)(v14 + 48), *(void *)(v14 + 56), *(void *)(v14 + 64), *(void *)(v14 + 72), *(void **)(v14 + 80));
  *(void *)uint64_t v14 = v11;
  *(void *)(v14 + 8) = v21;
  *(void *)(v14 + 16) = v9;
  *(void *)(v14 + 24) = v10;
  *(void *)(v14 + 32) = v12;
  *(void *)(v14 + 40) = v23;
  *(void *)(v14 + 48) = v25;
  *(void *)(v14 + 56) = v26;
  *(void *)(v14 + 64) = v24;
  *(void *)(v14 + 72) = v7;
  *(void *)(v14 + 80) = v13;
  *(void *)(v14 + 88) = v22;
  *(unsigned char *)(v14 + 100) = BYTE4(v6);
  *(_DWORD *)(v14 + 96) = v6;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
  return v15();
}

uint64_t sub_1A6754E48()
{
  uint64_t v1 = type metadata accessor for SpeechSlicer.VoiceQuery(0);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (uint64_t)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for SpeechSlicer(0);
  uint64_t v5 = *(int *)(v4 + 28);
  unint64_t v6 = *(void *)&v0[v5];
  if (!(v6 >> 62))
  {
    uint64_t v7 = *(char **)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v7) {
      goto LABEL_3;
    }
LABEL_32:
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = (char *)sub_1A6892EB0();
  if (!v7) {
    goto LABEL_32;
  }
LABEL_3:
  uint64_t v8 = v7 - 1;
  if (__OFSUB__(v7, 1))
  {
    __break(1u);
    goto LABEL_36;
  }
  uint64_t v31 = v4;
  uint64_t v32 = v5;
  if ((v6 & 0xC000000000000001) != 0)
  {
LABEL_36:
    uint64_t v9 = MEMORY[0x1AD0BFD30](v8, v6);
    goto LABEL_8;
  }
  if (((unint64_t)v8 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_38;
  }
  if ((unint64_t)v8 >= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  uint64_t v9 = *(void *)(v6 + 8 * (void)v8 + 32);
  swift_retain();
LABEL_8:
  uint64_t v30 = v0;
  swift_bridgeObjectRelease();
  uint64_t v10 = MEMORY[0x1E4FBC860];
  unint64_t v35 = MEMORY[0x1E4FBC860];
  swift_retain_n();
  uint64_t v7 = (char *)&unk_1E96C5000;
  uint64_t v33 = v9;
  while (1)
  {
    sub_1A673E788(v9 + 16, (uint64_t)v34);
    sub_1A67581E4(v9 + OBJC_IVAR____TtCV12TextToSpeech12SpeechSlicerP33_AA4177673707DD5115CAF93C9D57DEC615TrackedSSMLNode_voiceQuery, v3, type metadata accessor for SpeechSlicer.VoiceQuery);
    uint64_t v12 = *(void *)(v9
                    + OBJC_IVAR____TtCV12TextToSpeech12SpeechSlicerP33_AA4177673707DD5115CAF93C9D57DEC615TrackedSSMLNode_voiceSelectionKey);
    uint64_t v11 = *(void *)(v9
                    + OBJC_IVAR____TtCV12TextToSpeech12SpeechSlicerP33_AA4177673707DD5115CAF93C9D57DEC615TrackedSSMLNode_voiceSelectionKey
                    + 8);
    type metadata accessor for SpeechSlicer.TrackedSSMLNode(0);
    uint64_t v13 = swift_allocObject();
    swift_weakInit();
    sub_1A673E770(v34, v13 + 16);
    *(void *)(v13
              + OBJC_IVAR____TtCV12TextToSpeech12SpeechSlicerP33_AA4177673707DD5115CAF93C9D57DEC615TrackedSSMLNode_children) = v10;
    swift_weakAssign();
    sub_1A675AFC8(v3, v13+ OBJC_IVAR____TtCV12TextToSpeech12SpeechSlicerP33_AA4177673707DD5115CAF93C9D57DEC615TrackedSSMLNode_voiceQuery);
    uint64_t v14 = (void *)(v13
                   + OBJC_IVAR____TtCV12TextToSpeech12SpeechSlicerP33_AA4177673707DD5115CAF93C9D57DEC615TrackedSSMLNode_voiceSelectionKey);
    *uint64_t v14 = v12;
    v14[1] = v11;
    if (!(v35 >> 62))
    {
      swift_bridgeObjectRetain();
      swift_retain();
      goto LABEL_11;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v16 = sub_1A6892EB0();
    swift_bridgeObjectRelease();
    if (v16 < 0) {
      break;
    }
LABEL_11:
    sub_1A67577DC(0, 0, v13);
    uint64_t Strong = swift_weakLoadStrong();
    swift_release();
    swift_release_n();
    if (!Strong) {
      goto LABEL_15;
    }
    swift_retain();
    uint64_t v9 = Strong;
  }
  __break(1u);
LABEL_15:
  uint64_t v3 = v35;
  unint64_t v6 = v35 >> 62;
  if (v35 >> 62)
  {
LABEL_39:
    swift_bridgeObjectRetain();
    if (!sub_1A6892EB0()) {
      goto LABEL_40;
    }
LABEL_17:
    if (!*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_42;
    }
    swift_retain();
    swift_bridgeObjectRelease();
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t result = sub_1A6892EB0();
      uint64_t v18 = result;
      if (!result) {
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v18 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (!v18) {
        goto LABEL_24;
      }
    }
    if (v18 < 1)
    {
      __break(1u);
      return result;
    }
    uint64_t v20 = *(void *)(v3 + 32);
    swift_retain();
    uint64_t v21 = v18 - 1;
    if (v18 != 1)
    {
      uint64_t v26 = (uint64_t *)(v3 + 40);
      do
      {
        uint64_t v27 = *v26;
        swift_weakAssign();
        uint64_t v28 = (void *)(v20
                       + OBJC_IVAR____TtCV12TextToSpeech12SpeechSlicerP33_AA4177673707DD5115CAF93C9D57DEC615TrackedSSMLNode_children);
        swift_beginAccess();
        swift_retain_n();
        uint64_t v29 = swift_retain();
        MEMORY[0x1AD0BF380](v29);
        if (*(void *)((*v28 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v28 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          sub_1A6892320();
        }
        sub_1A6892360();
        sub_1A6892300();
        swift_endAccess();
        swift_release_n();
        ++v26;
        uint64_t v20 = v27;
        --v21;
      }
      while (v21);
    }
LABEL_24:
    swift_bridgeObjectRelease();
    uint64_t v7 = v30;
    uint64_t v22 = &v30[*(int *)(v31 + 24)];
    uint64_t v23 = swift_retain();
    MEMORY[0x1AD0BF380](v23);
    if (*(void *)((*(void *)v22 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((*(void *)v22 & 0xFFFFFFFFFFFFFF8)
                                                                                + 0x18) >> 1)
    {
LABEL_25:
      sub_1A6892360();
      sub_1A6892300();
      swift_release();
      swift_release();
      swift_release();
      unint64_t v24 = v35;
      uint64_t v25 = v32;
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)&v7[v25] = v24;
      return result;
    }
LABEL_42:
    sub_1A6892320();
    goto LABEL_25;
  }
  uint64_t v17 = *(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v17) {
    goto LABEL_17;
  }
LABEL_40:
  swift_release();
  return swift_bridgeObjectRelease_n();
}

uint64_t SpeechSlicer.init(speechRoot:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for SpeechSlicer.VoiceQuery(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v4 = (int *)type metadata accessor for SpeechSlicer(0);
  uint64_t v5 = MEMORY[0x1E4FBC860];
  *(void *)(a2 + v4[6]) = MEMORY[0x1E4FBC860];
  *(void *)(a2 + v4[7]) = v5;
  *(unsigned char *)(a2 + v4[8]) = 0;
  *(void *)(a2 + v4[9]) = v5;
  sub_1A673E788((uint64_t)a1, a2 + v4[5]);
  TTSMarkupVisitor.visit(_:)(a1, (uint64_t)v4, (uint64_t)&protocol witness table for SpeechSlicer);

  return sub_1A6741A24((uint64_t)a1);
}

unint64_t sub_1A6755400(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for SpeechSlicer.VoiceQuery(0);
  uint64_t v4 = MEMORY[0x1F4188790](v3 - 8);
  unint64_t v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v36 - v7;
  unint64_t v9 = type metadata accessor for SpeechSlicer(0);
  uint64_t v10 = *(int *)(v9 + 28);
  uint64_t v11 = *(void *)(v1 + v10);
  if (!((unint64_t)v11 >> 62))
  {
    uint64_t v12 = (void *)(v11 & 0xFFFFFFFFFFFFFF8);
    if (*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      sub_1A673E788(a1, (uint64_t)v37);
      uint64_t v13 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v13) {
        goto LABEL_9;
      }
LABEL_4:
      unint64_t v14 = v13 - 1;
      if (__OFSUB__(v13, 1))
      {
        __break(1u);
      }
      else if ((v11 & 0xC000000000000001) == 0)
      {
        if ((v14 & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if (v14 < *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          swift_retain();
          goto LABEL_9;
        }
        __break(1u);
        goto LABEL_46;
      }
      MEMORY[0x1AD0BFD30](v14, v11);
LABEL_9:
      swift_bridgeObjectRelease();
      sub_1A67581E4(v1, (uint64_t)v8, type metadata accessor for SpeechSlicer.VoiceQuery);
      uint64_t v15 = *(void *)(v1 + *(int *)(v9 + 36));
      uint64_t v16 = *(void *)(v15 + 16);
      if (v16)
      {
        uint64_t v17 = v15 + 16 * v16;
        uint64_t v19 = *(void *)(v17 + 16);
        uint64_t v18 = *(void *)(v17 + 24);
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v19 = 0;
        uint64_t v18 = 0;
      }
      type metadata accessor for SpeechSlicer.TrackedSSMLNode(0);
      uint64_t v11 = swift_allocObject();
      swift_weakInit();
      sub_1A673E770(v37, v11 + 16);
      uint64_t v12 = &unk_1E96C5000;
      *(void *)(v11
                + OBJC_IVAR____TtCV12TextToSpeech12SpeechSlicerP33_AA4177673707DD5115CAF93C9D57DEC615TrackedSSMLNode_children) = MEMORY[0x1E4FBC860];
      swift_weakAssign();
      swift_release();
      sub_1A675AFC8((uint64_t)v8, v11+ OBJC_IVAR____TtCV12TextToSpeech12SpeechSlicerP33_AA4177673707DD5115CAF93C9D57DEC615TrackedSSMLNode_voiceQuery);
      uint64_t v27 = (void *)(v11
                     + OBJC_IVAR____TtCV12TextToSpeech12SpeechSlicerP33_AA4177673707DD5115CAF93C9D57DEC615TrackedSSMLNode_voiceSelectionKey);
      *uint64_t v27 = v19;
      v27[1] = v18;
      unint64_t v9 = *(void *)(v1 + v10);
      if (v9 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v28 = sub_1A6892EB0();
        if (v28)
        {
LABEL_22:
          unint64_t v14 = v28 - 1;
          if (!__OFSUB__(v28, 1))
          {
            if ((v9 & 0xC000000000000001) == 0)
            {
              if ((v14 & 0x8000000000000000) != 0)
              {
                __break(1u);
              }
              else if (v14 < *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
              {
                uint64_t v29 = *(void *)(v9 + 8 * v14 + 32);
                swift_retain();
                goto LABEL_27;
              }
              __break(1u);
              goto LABEL_50;
            }
LABEL_47:
            uint64_t v29 = MEMORY[0x1AD0BFD30](v14, v9);
LABEL_27:
            swift_bridgeObjectRelease();
            uint64_t v30 = (void *)(v29 + v12[314]);
            swift_beginAccess();
            uint64_t v31 = swift_retain();
            MEMORY[0x1AD0BF380](v31);
            if (*(void *)((*v30 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((*v30 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            {
LABEL_28:
              sub_1A6892360();
              sub_1A6892300();
              swift_endAccess();
              swift_release();
              return v11;
            }
LABEL_50:
            sub_1A6892320();
            goto LABEL_28;
          }
LABEL_46:
          __break(1u);
          goto LABEL_47;
        }
      }
      else
      {
        uint64_t v28 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v28) {
          goto LABEL_22;
        }
      }
      swift_bridgeObjectRelease();
      return v11;
    }
    sub_1A673E788(a1, (uint64_t)v37);
    uint64_t v20 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v20) {
      goto LABEL_12;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    sub_1A67581E4(v1, (uint64_t)v6, type metadata accessor for SpeechSlicer.VoiceQuery);
    uint64_t v22 = *(void *)(v1 + *(int *)(v9 + 36));
    uint64_t v23 = *(void *)(v22 + 16);
    if (v23)
    {
      uint64_t v24 = v22 + 16 * v23;
      uint64_t v26 = *(void *)(v24 + 16);
      uint64_t v25 = *(void *)(v24 + 24);
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v26 = 0;
      uint64_t v25 = 0;
    }
    type metadata accessor for SpeechSlicer.TrackedSSMLNode(0);
    uint64_t v11 = swift_allocObject();
    swift_weakInit();
    sub_1A673E770(v37, v11 + 16);
    *(void *)(v11
              + OBJC_IVAR____TtCV12TextToSpeech12SpeechSlicerP33_AA4177673707DD5115CAF93C9D57DEC615TrackedSSMLNode_children) = MEMORY[0x1E4FBC860];
    swift_weakAssign();
    swift_release();
    sub_1A675AFC8((uint64_t)v6, v11+ OBJC_IVAR____TtCV12TextToSpeech12SpeechSlicerP33_AA4177673707DD5115CAF93C9D57DEC615TrackedSSMLNode_voiceQuery);
    uint64_t v32 = (void *)(v11
                   + OBJC_IVAR____TtCV12TextToSpeech12SpeechSlicerP33_AA4177673707DD5115CAF93C9D57DEC615TrackedSSMLNode_voiceSelectionKey);
    void *v32 = v26;
    v32[1] = v25;
    uint64_t v33 = (void *)(v1 + *(int *)(v9 + 24));
    uint64_t v34 = swift_retain();
    MEMORY[0x1AD0BF380](v34);
    if (*(void *)((*v33 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v33 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      sub_1A6892320();
    }
    sub_1A6892360();
    sub_1A6892300();
    return v11;
  }
  if (v11 < 0) {
    uint64_t v12 = *(void **)(v1 + v10);
  }
  else {
    uint64_t v12 = (void *)(v11 & 0xFFFFFFFFFFFFFF8);
  }
  swift_bridgeObjectRetain();
  uint64_t v35 = sub_1A6892EB0();
  swift_bridgeObjectRelease();
  if (v35)
  {
    sub_1A673E788(a1, (uint64_t)v37);
    swift_bridgeObjectRetain();
    uint64_t v13 = sub_1A6892EB0();
    if (!v13) {
      goto LABEL_9;
    }
    goto LABEL_4;
  }
  sub_1A673E788(a1, (uint64_t)v37);
  swift_bridgeObjectRetain();
  uint64_t v20 = sub_1A6892EB0();
  if (!v20) {
    goto LABEL_17;
  }
LABEL_12:
  unint64_t result = v20 - 1;
  if (__OFSUB__(v20, 1))
  {
    __break(1u);
    goto LABEL_54;
  }
  if ((v11 & 0xC000000000000001) != 0)
  {
LABEL_54:
    MEMORY[0x1AD0BFD30](result, v11);
    goto LABEL_17;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    swift_retain();
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A675594C(uint64_t a1)
{
  sub_1A6755400(a1);
  swift_release();
  sub_1A673E788(a1, (uint64_t)v5);
  sub_1A6741AD0(&qword_1E96C1CF8);
  if (swift_dynamicCast())
  {
    uint64_t v3 = (void *)v7;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    sub_1A673E788(a1, (uint64_t)&v7);
    sub_1A6741A24((uint64_t)&v7);
  }
  else
  {
    sub_1A673E788(a1, (uint64_t)&v7);
    sub_1A673E770(&v7, (uint64_t)v6);
    uint64_t result = swift_dynamicCast();
    if (!result) {
      return result;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t result = type metadata accessor for SpeechSlicer(0);
  *(unsigned char *)(v1 + *(int *)(result + 32)) = 1;
  return result;
}

unint64_t sub_1A6755A5C(void *a1)
{
  sub_1A6755400((uint64_t)a1);
  uint64_t v3 = type metadata accessor for SpeechSlicer(0);
  uint64_t v4 = (void *)(v1 + *(int *)(v3 + 28));
  MEMORY[0x1AD0BF380]();
  if (*(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_1A6892320();
  }
  sub_1A6892360();
  sub_1A6892300();
  TTSMarkupVisitor.visitChildren(_:)(a1, v3, (uint64_t)&protocol witness table for SpeechSlicer);
  if (!(*v4 >> 62))
  {
    if (*(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_5;
    }
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  swift_bridgeObjectRetain();
  uint64_t v8 = sub_1A6892EB0();
  swift_bridgeObjectRelease();
  if (!v8) {
    goto LABEL_13;
  }
LABEL_5:
  sub_1A674785C();
  if (!v5)
  {
    if (!(*v4 >> 62))
    {
      uint64_t v6 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
      unint64_t result = v6 - 1;
      if (!__OFSUB__(v6, 1))
      {
LABEL_8:
        sub_1A67477C4(result);
        goto LABEL_9;
      }
LABEL_16:
      __break(1u);
      return result;
    }
LABEL_14:
    swift_bridgeObjectRetain();
    uint64_t v9 = sub_1A6892EB0();
    swift_bridgeObjectRelease();
    unint64_t result = v9 - 1;
    if (!__OFSUB__(v9, 1)) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }
LABEL_9:

  return swift_release();
}

uint64_t SpeechSlicer.visit(_:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for SpeechSlicer.VoiceQuery(0);
  uint64_t v4 = MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v19[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1F4188790](v4);
  uint64_t v9 = (char *)&v19[-1] - v8;
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v19[-1] - v10;
  sub_1A67581E4(v1, (uint64_t)&v19[-1] - v10, type metadata accessor for SpeechSlicer.VoiceQuery);
  swift_bridgeObjectRetain();
  sub_1A6891900();
  swift_storeEnumTagMultiPayload();
  sub_1A67581E4(v1, (uint64_t)v6, type metadata accessor for SpeechSlicer.VoiceQuery);
  char v12 = sub_1A6757CAC((uint64_t)v6, (uint64_t)v9);
  sub_1A675824C((uint64_t)v6, type metadata accessor for SpeechSlicer.VoiceQuery);
  if ((v12 & 1) == 0)
  {
    sub_1A6758028((uint64_t)v9, v1);
    uint64_t v13 = *(int *)(type metadata accessor for SpeechSlicer(0) + 32);
    if (*(unsigned char *)(v1 + v13))
    {
      sub_1A6754E48();
      *(unsigned char *)(v1 + v13) = 0;
    }
  }
  sub_1A675824C((uint64_t)v9, type metadata accessor for SpeechSlicer.VoiceQuery);
  v19[3] = &type metadata for TTSMarkup.Language;
  v19[4] = &protocol witness table for TTSMarkup.Language;
  v19[0] = swift_allocObject();
  sub_1A67580D4(a1, v19[0] + 16);
  uint64_t v14 = type metadata accessor for SpeechSlicer(0);
  TTSMarkupVisitor.visitChildren(_:)(v19, v14, (uint64_t)&protocol witness table for SpeechSlicer);
  sub_1A6741A24((uint64_t)v19);
  sub_1A67581E4(v1, (uint64_t)v6, type metadata accessor for SpeechSlicer.VoiceQuery);
  char v15 = sub_1A6757CAC((uint64_t)v6, (uint64_t)v11);
  sub_1A675824C((uint64_t)v6, type metadata accessor for SpeechSlicer.VoiceQuery);
  if ((v15 & 1) == 0)
  {
    sub_1A6758028((uint64_t)v11, v1);
    uint64_t v16 = *(int *)(v14 + 32);
    if (*(unsigned char *)(v1 + v16))
    {
      sub_1A6754E48();
      *(unsigned char *)(v1 + v16) = 0;
    }
  }
  return sub_1A675824C((uint64_t)v11, type metadata accessor for SpeechSlicer.VoiceQuery);
}

uint64_t SpeechSlicer.visit(_:)(void *a1)
{
  uint64_t v3 = type metadata accessor for SpeechSlicer.VoiceQuery(0);
  uint64_t v4 = MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v31[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1F4188790](v4);
  uint64_t v9 = (void *)((char *)&v31[-1] - v8);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v31[-1] - v10;
  uint64_t v12 = a1[11];
  if (v12)
  {
    uint64_t v13 = a1[10];
    uint64_t v14 = type metadata accessor for SpeechSlicer(0);
    uint64_t v15 = *(int *)(v14 + 36);
    uint64_t v16 = *(char **)(v1 + v15);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v16 = sub_1A6757B94(0, *((void *)v16 + 2) + 1, 1, v16);
    }
    unint64_t v18 = *((void *)v16 + 2);
    unint64_t v17 = *((void *)v16 + 3);
    if (v18 >= v17 >> 1) {
      uint64_t v16 = sub_1A6757B94((char *)(v17 > 1), v18 + 1, 1, v16);
    }
    *((void *)v16 + 2) = v18 + 1;
    uint64_t v19 = &v16[16 * v18];
    *((void *)v19 + 4) = v13;
    *((void *)v19 + 5) = v12;
    *(void *)(v1 + v15) = v16;
    uint64_t v20 = *(int *)(v14 + 32);
    if (*(unsigned char *)(v1 + v20) == 1)
    {
      sub_1A6754E48();
      *(unsigned char *)(v1 + v20) = 0;
    }
    uint64_t v32 = &type metadata for TTSMarkup.Voice;
    uint64_t v33 = &protocol witness table for TTSMarkup.Voice;
    v31[0] = swift_allocObject();
    sub_1A6758188((uint64_t)a1, v31[0] + 16);
    TTSMarkupVisitor.visitChildren(_:)(v31, v14, (uint64_t)&protocol witness table for SpeechSlicer);
    sub_1A6741A24((uint64_t)v31);
    uint64_t v21 = *(void *)(v1 + v15);
    if (*(void *)(v21 + 16))
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (result)
      {
        uint64_t v23 = *(void *)(v21 + 16);
        if (v23)
        {
LABEL_11:
          *(void *)(v21 + 16) = v23 - 1;
          uint64_t result = swift_bridgeObjectRelease();
          *(void *)(v1 + v15) = v21;
          return result;
        }
        goto LABEL_21;
      }
    }
    else
    {
      __break(1u);
    }
    uint64_t result = (uint64_t)sub_1A6757C98(v21);
    uint64_t v21 = result;
    uint64_t v23 = *(void *)(result + 16);
    if (v23) {
      goto LABEL_11;
    }
LABEL_21:
    __break(1u);
    return result;
  }
  sub_1A67581E4(v1, (uint64_t)&v31[-1] - v10, type metadata accessor for SpeechSlicer.VoiceQuery);
  uint64_t v24 = a1[2];
  *uint64_t v9 = a1[1];
  v9[1] = v24;
  swift_storeEnumTagMultiPayload();
  sub_1A67581E4(v1, (uint64_t)v6, type metadata accessor for SpeechSlicer.VoiceQuery);
  swift_bridgeObjectRetain();
  char v25 = sub_1A6757CAC((uint64_t)v6, (uint64_t)v9);
  sub_1A675824C((uint64_t)v6, type metadata accessor for SpeechSlicer.VoiceQuery);
  if ((v25 & 1) == 0)
  {
    sub_1A6758028((uint64_t)v9, v1);
    uint64_t v26 = *(int *)(type metadata accessor for SpeechSlicer(0) + 32);
    if (*(unsigned char *)(v1 + v26))
    {
      sub_1A6754E48();
      *(unsigned char *)(v1 + v26) = 0;
    }
  }
  sub_1A675824C((uint64_t)v9, type metadata accessor for SpeechSlicer.VoiceQuery);
  uint64_t v32 = &type metadata for TTSMarkup.Voice;
  uint64_t v33 = &protocol witness table for TTSMarkup.Voice;
  v31[0] = swift_allocObject();
  sub_1A6758188((uint64_t)a1, v31[0] + 16);
  uint64_t v27 = type metadata accessor for SpeechSlicer(0);
  TTSMarkupVisitor.visitChildren(_:)(v31, v27, (uint64_t)&protocol witness table for SpeechSlicer);
  sub_1A6741A24((uint64_t)v31);
  sub_1A67581E4(v1, (uint64_t)v6, type metadata accessor for SpeechSlicer.VoiceQuery);
  char v28 = sub_1A6757CAC((uint64_t)v6, (uint64_t)v11);
  sub_1A675824C((uint64_t)v6, type metadata accessor for SpeechSlicer.VoiceQuery);
  if ((v28 & 1) == 0)
  {
    sub_1A6758028((uint64_t)v11, v1);
    uint64_t v29 = *(int *)(v27 + 32);
    if (*(unsigned char *)(v1 + v29))
    {
      sub_1A6754E48();
      *(unsigned char *)(v1 + v29) = 0;
    }
  }
  return sub_1A675824C((uint64_t)v11, type metadata accessor for SpeechSlicer.VoiceQuery);
}

unint64_t SpeechSlicer.visitAnyElement(_:)(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  sub_1A673E63C(a1, v2);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v3 + 24))(v6, v2, v3);
  uint64_t v4 = v6[3];
  sub_1A6750210((uint64_t)v6, &qword_1E96C1CE0);
  if (v4) {
    return sub_1A6755A5C(a1);
  }
  else {
    return sub_1A675594C((uint64_t)a1);
  }
}

uint64_t sub_1A675628C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for SpeechSlicer.Slice(0);
  uint64_t v3 = MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void **)(v1 + *(int *)(v3 + 28));
  if (!v6)
  {
    sub_1A67581E4(v1, (uint64_t)v5, type metadata accessor for SpeechSlicer.Slice);
LABEL_5:
    uint64_t v8 = *(void *)&v5[*(int *)(v2 + 24)];
    swift_bridgeObjectRetain();
    goto LABEL_6;
  }
  id v7 = objc_msgSend(v6, sel_transformedString);
  uint64_t v8 = sub_1A6892000();
  uint64_t v10 = v9;

  sub_1A67581E4(v1, (uint64_t)v5, type metadata accessor for SpeechSlicer.Slice);
  if (!v10) {
    goto LABEL_5;
  }
LABEL_6:
  sub_1A675824C((uint64_t)v5, type metadata accessor for SpeechSlicer.Slice);
  return v8;
}

void SpeechSlicer.Slice.transform(block:)(uint64_t (*a1)(uint64_t, uint64_t))
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for SpeechSlicer.Slice(0);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v8 = (char *)&v17 - v7;
  uint64_t v9 = *(int *)(v5 + 28);
  uint64_t v10 = *(void **)(v1 + v9);
  if (!v10)
  {
    sub_1A67581E4(v1, (uint64_t)&v17 - v7, type metadata accessor for SpeechSlicer.Slice);
LABEL_5:
    uint64_t v15 = (uint64_t *)&v8[*(int *)(v4 + 24)];
    uint64_t v12 = *v15;
    uint64_t v14 = v15[1];
    swift_bridgeObjectRetain();
    goto LABEL_6;
  }
  id v11 = objc_msgSend(v10, sel_transformedString);
  uint64_t v12 = sub_1A6892000();
  uint64_t v14 = v13;

  sub_1A67581E4(v1, (uint64_t)v8, type metadata accessor for SpeechSlicer.Slice);
  if (!v14) {
    goto LABEL_5;
  }
LABEL_6:
  sub_1A675824C((uint64_t)v8, type metadata accessor for SpeechSlicer.Slice);
  uint64_t v16 = a1(v12, v14);
  swift_bridgeObjectRelease();

  *(void *)(v2 + v9) = v16;
}

unint64_t SpeechSlicer.Slice.handle(event:)(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v21 = a1[1];
  uint64_t v22 = *a1;
  *(void *)&long long v24 = *a1;
  *((void *)&v24 + 1) = v21;
  uint64_t v19 = v3;
  uint64_t v20 = v2;
  uint64_t v25 = v2;
  uint64_t v26 = v3;
  uint64_t v4 = type metadata accessor for SpeechSlicer.Slice(0);
  uint64_t v5 = (uint64_t *)(v1 + *(int *)(v4 + 24));
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  unint64_t result = sub_1A6756694();
  uint64_t v10 = *(void *)(v1 + *(int *)(v4 + 32));
  uint64_t v11 = *(void *)(v10 + 16);
  if (v11)
  {
    unint64_t v12 = result >> 14;
    uint64_t v13 = (_OWORD *)(v10 + 32);
    unint64_t v14 = v9 >> 14;
    swift_bridgeObjectRetain();
    do
    {
      sub_1A67582AC(v13, &v24);
      if (v12 < *((void *)&v24 + 1) >> 14
        && (unint64_t)v24 >> 14 != *((void *)&v24 + 1) >> 14
        && (unint64_t)v24 >> 14 < v14
        && v12 != v14)
      {
        uint64_t v17 = v28;
        uint64_t v18 = v29;
        sub_1A673E63C(v27, v28);
        v23[0] = v22;
        v23[1] = v21;
        _OWORD v23[2] = v20;
        v23[3] = v19;
        (*(void (**)(void *, long long *, uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 96))(v23, &v24, v6, v7, v17, v18);
      }
      sub_1A6758320((uint64_t)&v24);
      uint64_t v13 = (_OWORD *)((char *)v13 + 72);
      --v11;
    }
    while (v11);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1A6756694()
{
  uint64_t result = *v0;
  if ((unint64_t)v0[2] >> 61 != 1 || v0[2] >= 3u) {
    return 15;
  }
  return result;
}

uint64_t sub_1A6756730(uint64_t a1)
{
  *(void *)(v2 + 368) = a1;
  *(void *)(v2 + 376) = v1;
  return MEMORY[0x1F4188298](sub_1A6756750, 0, 0);
}

uint64_t sub_1A6756750()
{
  uint64_t v89 = (void *)(v0 + 240);
  uint64_t v2 = *(void *)(v0 + 368);
  uint64_t v1 = *(void *)(v0 + 376);
  uint64_t v3 = (int *)type metadata accessor for SpeechSlicer.Slice(0);
  *(void *)(v0 + 384) = v3;
  uint64_t v4 = v3[6];
  *(_DWORD *)(v0 + 464) = v4;
  uint64_t v5 = (char *)(v1 + v4);
  uint64_t v6 = *(void *)(v1 + v4);
  *(void *)(v0 + 392) = v6;
  unint64_t v7 = *((void *)v5 + 1);
  *(void *)(v0 + 400) = v7;
  if ((v7 & 0x2000000000000000) != 0) {
    uint64_t v8 = HIBYTE(v7) & 0xF;
  }
  else {
    uint64_t v8 = v6;
  }
  if (((v7 >> 60) & ((v6 & 0x800000000000000) == 0)) != 0) {
    unint64_t v9 = 11;
  }
  else {
    unint64_t v9 = 7;
  }
  uint64_t v10 = v2 + 16;
  sub_1A673E788(v2 + 16, v0 + 240);
  uint64_t v11 = (unint64_t *)(v2
                           + OBJC_IVAR____TtCV12TextToSpeech12SpeechSlicerP33_AA4177673707DD5115CAF93C9D57DEC615TrackedSSMLNode_children);
  swift_beginAccess();
  if (*v11 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_1A6892EB0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v12 = *(void *)((*v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v13 = *(void *)(v0 + 264);
  uint64_t v14 = *(void *)(v0 + 272);
  sub_1A673E63C(v89, v13);
  if (v12)
  {
    (*(void (**)(uint64_t, uint64_t))(v14 + 32))(v13, v14);
    sub_1A6892150();
    swift_bridgeObjectRelease();
    *(void *)(v0 + 408) = *(void *)v5;
    *(void *)(v0 + 416) = *((void *)v5 + 1);
    unint64_t v15 = *v11;
    *(void *)(v0 + 424) = *v11;
    if (v15 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v16 = sub_1A6892EB0();
    }
    else
    {
      uint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    uint64_t v17 = (void *)(v0 + 240);
    *(void *)(v0 + 432) = v16;
    if (v16)
    {
      if (v16 >= 1)
      {
        *(void *)(v0 + 440) = 0;
        uint64_t v18 = *(void *)(v0 + 424);
        if ((v18 & 0xC000000000000001) != 0)
        {
          uint64_t v19 = MEMORY[0x1AD0BFD30](0);
        }
        else
        {
          uint64_t v19 = *(void *)(v18 + 32);
          swift_retain();
        }
        *(void *)(v0 + 448) = v19;
        int v65 = (void *)swift_task_alloc();
        *(void *)(v0 + 456) = v65;
        *int v65 = v0;
        v65[1] = sub_1A6756F94;
        uint64_t v66 = *(void *)(v0 + 376);
        v65[46] = v19;
        v65[47] = v66;
        uint64_t v27 = sub_1A6756750;
        unint64_t v26 = 0;
        uint64_t v24 = 0;
        return MEMORY[0x1F4188298](v27, v26, v24);
      }
      __break(1u);
    }
    else
    {
      uint64_t v16 = *(void *)(v0 + 416);
      uint64_t v32 = *(void *)(v0 + 408);
      uint64_t v33 = *(int *)(v0 + 464);
      uint64_t v5 = *(char **)(v0 + 376);
      swift_bridgeObjectRelease();
      unint64_t v34 = v32 & 0xFFFFFFFFFFFFLL;
      if ((v16 & 0x2000000000000000) != 0) {
        unint64_t v34 = HIBYTE(v16) & 0xF;
      }
      uint64_t v36 = *(void *)&v5[v33];
      unint64_t v35 = *(void *)&v5[v33 + 8];
      if ((v35 & 0x2000000000000000) != 0) {
        unint64_t v9 = HIBYTE(v35) & 0xF;
      }
      else {
        unint64_t v9 = v36 & 0xFFFFFFFFFFFFLL;
      }
      if (((v35 >> 60) & ((v36 & 0x800000000000000) == 0)) != 0) {
        uint64_t v37 = 11;
      }
      else {
        uint64_t v37 = 7;
      }
      if (v9 >= v34)
      {
        unint64_t v38 = *(void *)(v0 + 400);
        if ((v38 & 0x2000000000000000) != 0) {
          unint64_t v39 = HIBYTE(v38) & 0xF;
        }
        else {
          unint64_t v39 = *(void *)(v0 + 392) & 0xFFFFFFFFFFFFLL;
        }
        uint64_t v40 = (uint64_t *)(*(void *)(v0 + 376) + *(int *)(v0 + 464));
        uint64_t v41 = *(void *)(v0 + 264);
        uint64_t v42 = *(void *)(v0 + 272);
        sub_1A673E63C(v89, v41);
        (*(void (**)(uint64_t, uint64_t))(v42 + 40))(v41, v42);
        uint64_t v5 = v43;
        uint64_t v16 = (uint64_t)v40;
        sub_1A6892150();
        swift_bridgeObjectRelease();
        uint64_t v44 = *v40;
        unint64_t v45 = v40[1];
        unint64_t v46 = HIBYTE(v45) & 0xF;
        if ((v45 & 0x2000000000000000) == 0) {
          unint64_t v46 = *v40 & 0xFFFFFFFFFFFFLL;
        }
        if (v46 >= v39)
        {
          unint64_t v47 = v37 | (v9 << 16);
          unint64_t v48 = *(void *)(v0 + 416);
          unint64_t v49 = *(void *)(v0 + 400);
          uint64_t v5 = *(char **)(v0 + 376);
          uint64_t v50 = *(void *)(v0 + 384);
          uint64_t v51 = HIBYTE(v48) & 0xF;
          if ((v48 & 0x2000000000000000) == 0) {
            uint64_t v51 = *(void *)(v0 + 408);
          }
          if (((v48 >> 60) & ((*(void *)(v0 + 408) & 0x800000000000000) == 0)) != 0) {
            uint64_t v52 = 11;
          }
          else {
            uint64_t v52 = 7;
          }
          uint64_t v53 = v52 | (v51 << 16);
          uint64_t v54 = HIBYTE(v49) & 0xF;
          if ((v49 & 0x2000000000000000) == 0) {
            uint64_t v54 = *(void *)(v0 + 392);
          }
          if (((v49 >> 60) & ((*(void *)(v0 + 392) & 0x800000000000000) == 0)) != 0) {
            uint64_t v55 = 11;
          }
          else {
            uint64_t v55 = 7;
          }
          uint64_t v56 = v55 | (v54 << 16);
          if (((v45 >> 60) & ((v44 & 0x800000000000000) == 0)) != 0) {
            uint64_t v57 = 11;
          }
          else {
            uint64_t v57 = 7;
          }
          unint64_t v58 = v57 | (v46 << 16);
          sub_1A673E788((uint64_t)v89, v0 + 120);
          *(void *)(v0 + 88) = v56;
          *(void *)(v0 + 96) = v58;
          *(void *)(v0 + 104) = v53;
          *(void *)(v0 + 112) = v47;
          unint64_t v9 = *(int *)(v50 + 32);
          uint64_t v16 = *(void *)&v5[v9];
          if (swift_isUniquelyReferenced_nonNull_native()) {
            goto LABEL_59;
          }
          goto LABEL_87;
        }
LABEL_86:
        __break(1u);
LABEL_87:
        uint64_t v16 = (uint64_t)sub_1A6757A74(0, *(void *)(v16 + 16) + 1, 1, (char *)v16);
LABEL_59:
        unint64_t v60 = *(void *)(v16 + 16);
        unint64_t v59 = *(void *)(v16 + 24);
        if (v60 >= v59 >> 1) {
          uint64_t v16 = (uint64_t)sub_1A6757A74((char *)(v59 > 1), v60 + 1, 1, (char *)v16);
        }
        *(void *)(v16 + 16) = v60 + 1;
        uint64_t v61 = v16 + 72 * v60;
        *(_OWORD *)(v61 + 32) = *(_OWORD *)(v0 + 88);
        long long v62 = *(_OWORD *)(v0 + 104);
        long long v63 = *(_OWORD *)(v0 + 120);
        long long v64 = *(_OWORD *)(v0 + 136);
        *(void *)(v61 + 96) = *(void *)(v0 + 152);
        *(_OWORD *)(v61 + 64) = v63;
        *(_OWORD *)(v61 + 80) = v64;
        *(_OWORD *)(v61 + 48) = v62;
        *(void *)&v5[v9] = v16;
        goto LABEL_79;
      }
    }
    __break(1u);
    goto LABEL_86;
  }
  (*(void (**)(uint64_t, uint64_t))(v14 + 24))(v13, v14);
  uint64_t v20 = *(void *)(v0 + 224);
  sub_1A6750210(v0 + 200, &qword_1E96C1CE0);
  uint64_t v17 = (void *)(v0 + 240);
  if (!v20)
  {
    unint64_t v21 = v9 | (v8 << 16);
    sub_1A673E788(v10, v0 + 160);
    sub_1A6741AD0(&qword_1E96C1CF8);
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_70;
    }
    uint64_t v22 = *(void **)(v0 + 280);
    if (!v22)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_70;
    }
    unint64_t v9 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v22) + 0x160);
    uint64_t v23 = v22;
    uint64_t v25 = ((uint64_t (*)(void))v9)();
    unint64_t v26 = *((void *)v5 + 1);
    if ((v26 & 0x1000000000000000) != 0)
    {
      uint64_t v27 = (uint64_t (*)())sub_1A6892190();
      uint64_t v28 = v25 - (void)v27;
      if (!__OFSUB__(v25, v27))
      {
LABEL_24:
        if (v28 < 1)
        {

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          *(void *)(v0 + 336) = 0;
          *(void *)(v0 + 344) = 0xE000000000000000;
          *(void *)(v0 + 352) = 32;
          *(void *)(v0 + 360) = 0xE100000000000000;
          sub_1A6748030();
          sub_1A6892AC0();
          sub_1A6892150();
          swift_bridgeObjectRelease();
          uint64_t v29 = *(void *)v5;
          unint64_t v9 = *((void *)v5 + 1);

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v30 = HIBYTE(v9) & 0xF;
          if ((v9 & 0x2000000000000000) == 0) {
            uint64_t v30 = v29;
          }
          uint64_t v31 = v30 << 16;
          if ((v9 & 0x1000000000000000) == 0 || (v29 & 0x800000000000000) != 0) {
            unint64_t v21 = v31 | 7;
          }
          else {
            unint64_t v21 = v31 | 0xB;
          }
        }
        uint64_t v17 = (void *)(v0 + 240);
LABEL_70:
        uint64_t v67 = *(void *)(v0 + 264);
        uint64_t v68 = *(void *)(v0 + 272);
        sub_1A673E63C(v17, v67);
        (*(void (**)(uint64_t, uint64_t))(v68 + 48))(v67, v68);
        uint64_t v70 = v69;
        long long v71 = v5;
        sub_1A6892150();
        swift_bridgeObjectRelease();
        unint64_t v72 = *((void *)v5 + 1);
        uint64_t v73 = HIBYTE(v72) & 0xF;
        if ((v72 & 0x2000000000000000) == 0) {
          uint64_t v73 = *(void *)v5 & 0xFFFFFFFFFFFFLL;
        }
        if (4 * v73 < v21 >> 14)
        {
          __break(1u);
        }
        else
        {
          uint64_t v70 = *(void *)(v0 + 376);
          uint64_t v74 = 7;
          if (((v72 >> 60) & ((*(void *)v5 & 0x800000000000000) == 0)) != 0) {
            uint64_t v74 = 11;
          }
          uint64_t v75 = v74 | (v73 << 16);
          sub_1A673E788((uint64_t)v17, v0 + 48);
          *(void *)(v0 + 16) = v21;
          *(void *)(v0 + 24) = v75;
          *(void *)(v0 + 32) = v21;
          *(void *)(v0 + 40) = v75;
          unint64_t v9 = v3[8];
          long long v71 = *(char **)(v70 + v9);
          if (swift_isUniquelyReferenced_nonNull_native()) {
            goto LABEL_76;
          }
        }
        long long v71 = sub_1A6757A74(0, *((void *)v71 + 2) + 1, 1, v71);
LABEL_76:
        unint64_t v77 = *((void *)v71 + 2);
        unint64_t v76 = *((void *)v71 + 3);
        if (v77 >= v76 >> 1) {
          long long v71 = sub_1A6757A74((char *)(v76 > 1), v77 + 1, 1, v71);
        }
        uint64_t v79 = *(void *)(v0 + 368);
        uint64_t v78 = *(void *)(v0 + 376);
        *((void *)v71 + 2) = v77 + 1;
        long long v80 = &v71[72 * v77];
        *((_OWORD *)v80 + 2) = *(_OWORD *)(v0 + 16);
        long long v81 = *(_OWORD *)(v0 + 32);
        long long v82 = *(_OWORD *)(v0 + 48);
        long long v83 = *(_OWORD *)(v0 + 64);
        *((void *)v80 + 12) = *(void *)(v0 + 80);
        *((_OWORD *)v80 + 4) = v82;
        *((_OWORD *)v80 + 5) = v83;
        *((_OWORD *)v80 + 3) = v81;
        *(void *)(v70 + v9) = v71;
        sub_1A6758028(v79+ OBJC_IVAR____TtCV12TextToSpeech12SpeechSlicerP33_AA4177673707DD5115CAF93C9D57DEC615TrackedSSMLNode_voiceQuery, v78 + v3[9]);
        uint64_t v84 = *(void *)(v79
                        + OBJC_IVAR____TtCV12TextToSpeech12SpeechSlicerP33_AA4177673707DD5115CAF93C9D57DEC615TrackedSSMLNode_voiceSelectionKey);
        uint64_t v85 = *(void *)(v79
                        + OBJC_IVAR____TtCV12TextToSpeech12SpeechSlicerP33_AA4177673707DD5115CAF93C9D57DEC615TrackedSSMLNode_voiceSelectionKey
                        + 8);
        id v86 = (void *)(v78 + v3[10]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *id v86 = v84;
        v86[1] = v85;
        uint64_t v17 = (void *)(v0 + 240);
        goto LABEL_79;
      }
    }
    else
    {
      if ((v26 & 0x2000000000000000) != 0) {
        uint64_t v27 = (uint64_t (*)())(HIBYTE(v26) & 0xF);
      }
      else {
        uint64_t v27 = (uint64_t (*)())(*(void *)v5 & 0xFFFFFFFFFFFFLL);
      }
      uint64_t v28 = v25 - (void)v27;
      if (!__OFSUB__(v25, v27)) {
        goto LABEL_24;
      }
    }
    __break(1u);
    return MEMORY[0x1F4188298](v27, v26, v24);
  }
LABEL_79:
  sub_1A6741A24((uint64_t)v17);
  uint64_t v87 = *(uint64_t (**)(void))(v0 + 8);
  return v87();
}

uint64_t sub_1A6756F94()
{
  swift_task_dealloc();
  return MEMORY[0x1F4188298](sub_1A6757090, 0, 0);
}

uint64_t sub_1A6757090()
{
  uint64_t v2 = *(void *)(v0 + 440);
  uint64_t v3 = *(void *)(v0 + 432);
  swift_release();
  if (v2 + 1 == v3)
  {
    uint64_t v4 = *(char **)(v0 + 416);
    uint64_t v5 = *(void *)(v0 + 408);
    uint64_t v6 = *(int *)(v0 + 464);
    uint64_t v7 = *(void *)(v0 + 376);
    swift_bridgeObjectRelease();
    unint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
    if (((unint64_t)v4 & 0x2000000000000000) != 0) {
      unint64_t v8 = ((unint64_t)v4 >> 56) & 0xF;
    }
    uint64_t v10 = *(void *)(v7 + v6);
    unint64_t v9 = *(void *)(v7 + v6 + 8);
    if ((v9 & 0x2000000000000000) != 0) {
      unint64_t v11 = HIBYTE(v9) & 0xF;
    }
    else {
      unint64_t v11 = v10 & 0xFFFFFFFFFFFFLL;
    }
    if (((v9 >> 60) & ((v10 & 0x800000000000000) == 0)) != 0) {
      uint64_t v12 = 11;
    }
    else {
      uint64_t v12 = 7;
    }
    if (v11 < v8)
    {
      __break(1u);
    }
    else
    {
      uint64_t v5 = v0 + 240;
      unint64_t v13 = *(void *)(v0 + 400);
      if ((v13 & 0x2000000000000000) != 0) {
        unint64_t v14 = HIBYTE(v13) & 0xF;
      }
      else {
        unint64_t v14 = *(void *)(v0 + 392) & 0xFFFFFFFFFFFFLL;
      }
      unint64_t v15 = (char *)(*(void *)(v0 + 376) + *(int *)(v0 + 464));
      uint64_t v16 = *(void *)(v0 + 264);
      uint64_t v1 = *(void *)(v0 + 272);
      sub_1A673E63C((void *)(v0 + 240), v16);
      (*(void (**)(uint64_t, uint64_t))(v1 + 40))(v16, v1);
      uint64_t v7 = v17;
      uint64_t v4 = v15;
      sub_1A6892150();
      swift_bridgeObjectRelease();
      uint64_t v18 = *(void *)v15;
      unint64_t v19 = *((void *)v15 + 1);
      unint64_t v20 = HIBYTE(v19) & 0xF;
      if ((v19 & 0x2000000000000000) == 0) {
        unint64_t v20 = *(void *)v15 & 0xFFFFFFFFFFFFLL;
      }
      if (v20 >= v14)
      {
        unint64_t v21 = v12 | (v11 << 16);
        unint64_t v22 = *(void *)(v0 + 416);
        unint64_t v23 = *(void *)(v0 + 400);
        uint64_t v7 = *(void *)(v0 + 376);
        uint64_t v24 = *(void *)(v0 + 384);
        uint64_t v25 = HIBYTE(v22) & 0xF;
        if ((v22 & 0x2000000000000000) == 0) {
          uint64_t v25 = *(void *)(v0 + 408);
        }
        if (((v22 >> 60) & ((*(void *)(v0 + 408) & 0x800000000000000) == 0)) != 0) {
          uint64_t v26 = 11;
        }
        else {
          uint64_t v26 = 7;
        }
        uint64_t v27 = v26 | (v25 << 16);
        uint64_t v28 = HIBYTE(v23) & 0xF;
        if ((v23 & 0x2000000000000000) == 0) {
          uint64_t v28 = *(void *)(v0 + 392);
        }
        if (((v23 >> 60) & ((*(void *)(v0 + 392) & 0x800000000000000) == 0)) != 0) {
          uint64_t v29 = 11;
        }
        else {
          uint64_t v29 = 7;
        }
        uint64_t v30 = v29 | (v28 << 16);
        if (((v19 >> 60) & ((v18 & 0x800000000000000) == 0)) != 0) {
          uint64_t v31 = 11;
        }
        else {
          uint64_t v31 = 7;
        }
        unint64_t v32 = v31 | (v20 << 16);
        sub_1A673E788(v0 + 240, v0 + 120);
        *(void *)(v0 + 88) = v30;
        *(void *)(v0 + 96) = v32;
        *(void *)(v0 + 104) = v27;
        *(void *)(v0 + 112) = v21;
        uint64_t v1 = *(int *)(v24 + 32);
        uint64_t v4 = *(char **)(v7 + v1);
        if (swift_isUniquelyReferenced_nonNull_native()) {
          goto LABEL_31;
        }
        goto LABEL_44;
      }
    }
    __break(1u);
LABEL_44:
    uint64_t v4 = sub_1A6757A74(0, *((void *)v4 + 2) + 1, 1, v4);
LABEL_31:
    unint64_t v34 = *((void *)v4 + 2);
    unint64_t v33 = *((void *)v4 + 3);
    if (v34 >= v33 >> 1) {
      uint64_t v4 = sub_1A6757A74((char *)(v33 > 1), v34 + 1, 1, v4);
    }
    *((void *)v4 + 2) = v34 + 1;
    unint64_t v35 = &v4[72 * v34];
    *((_OWORD *)v35 + 2) = *(_OWORD *)(v0 + 88);
    long long v36 = *(_OWORD *)(v0 + 104);
    long long v37 = *(_OWORD *)(v0 + 120);
    long long v38 = *(_OWORD *)(v0 + 136);
    *((void *)v35 + 12) = *(void *)(v0 + 152);
    *((_OWORD *)v35 + 4) = v37;
    *((_OWORD *)v35 + 5) = v38;
    *((_OWORD *)v35 + 3) = v36;
    *(void *)(v7 + v1) = v4;
    sub_1A6741A24(v5);
    unint64_t v39 = *(uint64_t (**)(void))(v0 + 8);
    return v39();
  }
  uint64_t v41 = *(void *)(v0 + 440) + 1;
  *(void *)(v0 + 440) = v41;
  uint64_t v42 = *(void *)(v0 + 424);
  if ((v42 & 0xC000000000000001) != 0)
  {
    uint64_t v43 = MEMORY[0x1AD0BFD30]();
  }
  else
  {
    uint64_t v43 = *(void *)(v42 + 8 * v41 + 32);
    swift_retain();
  }
  *(void *)(v0 + 448) = v43;
  uint64_t v44 = (void *)swift_task_alloc();
  *(void *)(v0 + 456) = v44;
  *uint64_t v44 = v0;
  v44[1] = sub_1A6756F94;
  uint64_t v45 = *(void *)(v0 + 376);
  v44[46] = v43;
  v44[47] = v45;
  return MEMORY[0x1F4188298](sub_1A6756750, 0, 0);
}

uint64_t sub_1A67573F8()
{
  sub_1A6741A24(v0 + 16);
  sub_1A675824C(v0 + OBJC_IVAR____TtCV12TextToSpeech12SpeechSlicerP33_AA4177673707DD5115CAF93C9D57DEC615TrackedSSMLNode_voiceQuery, type metadata accessor for SpeechSlicer.VoiceQuery);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_weakDestroy();

  return swift_deallocClassInstance();
}

uint64_t sub_1A67574AC()
{
  uint64_t v1 = type metadata accessor for SpeechSlicer.VoiceQuery(0);
  MEMORY[0x1F4188790](v1);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A67581E4(v0, (uint64_t)v3, type metadata accessor for SpeechSlicer.VoiceQuery);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_1A6893210();
      sub_1A68920F0();
      return swift_bridgeObjectRelease();
    }
    else
    {
      return sub_1A6893210();
    }
  }
  else
  {
    uint64_t v6 = sub_1A6891A40();
    uint64_t v7 = *(void *)(v6 - 8);
    MEMORY[0x1F4188790](v6);
    unint64_t v9 = (char *)&v10 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v3, v6);
    sub_1A6893210();
    sub_1A675B0F4((unint64_t *)&qword_1EB67A220, MEMORY[0x1F418BE20]);
    sub_1A6891F20();
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
}

uint64_t sub_1A6757690()
{
  return sub_1A6893250();
}

uint64_t sub_1A67576D4()
{
  return sub_1A6893250();
}

unint64_t sub_1A6757740(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  sub_1A673E63C(a1, v2);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v3 + 24))(v6, v2, v3);
  uint64_t v4 = v6[3];
  sub_1A6750210((uint64_t)v6, &qword_1E96C1CE0);
  if (v4) {
    return sub_1A6755A5C(a1);
  }
  else {
    return sub_1A675594C((uint64_t)a1);
  }
}

char *sub_1A67577DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = a3;
    uint64_t v5 = a2;
    uint64_t v6 = a1;
    unint64_t v7 = *v4;
    if (!(*v4 >> 62))
    {
      if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v22 = sub_1A6892EB0();
  swift_bridgeObjectRelease();
  if (v22 < v5) {
    goto LABEL_32;
  }
LABEL_4:
  uint64_t v9 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  uint64_t v8 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_34:
    __break(1u);
LABEL_35:
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_1A6892EB0();
    swift_bridgeObjectRelease();
    uint64_t v11 = v10 + v8;
    if (!__OFADD__(v10, v8)) {
      goto LABEL_8;
    }
LABEL_37:
    __break(1u);
LABEL_38:
    swift_bridgeObjectRetain();
    uint64_t v14 = sub_1A6892EB0();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  unint64_t v7 = *v4;
  if (*v4 >> 62) {
    goto LABEL_35;
  }
  uint64_t v10 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v11 = v10 + v8;
  if (__OFADD__(v10, v8)) {
    goto LABEL_37;
  }
LABEL_8:
  unint64_t v7 = *v4;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  unint64_t *v4 = v7;
  uint64_t v10 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000) == 0 && (v7 & 0x4000000000000000) == 0)
  {
    uint64_t v13 = v7 & 0xFFFFFFFFFFFFFF8;
    if (v11 <= *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_18;
    }
    uint64_t v10 = 1;
  }
  if (v7 >> 62) {
    goto LABEL_38;
  }
  uint64_t v14 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v14 <= v11) {
    uint64_t v14 = v11;
  }
  swift_bridgeObjectRetain();
  unint64_t v7 = MEMORY[0x1AD0BFD40](v10, v14, 1, v7);
  swift_bridgeObjectRelease();
  unint64_t *v4 = v7;
  uint64_t v13 = v7 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  unint64_t v15 = (void *)(v13 + 32 + 8 * v6);
  type metadata accessor for SpeechSlicer.TrackedSSMLNode(0);
  swift_arrayDestroy();
  if (v8)
  {
    if (v7 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v23 = sub_1A6892EB0();
      swift_bridgeObjectRelease();
      uint64_t v17 = v23 - v5;
      if (!__OFSUB__(v23, v5)) {
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v16 = *(void *)(v13 + 16);
      uint64_t v17 = v16 - v5;
      if (!__OFSUB__(v16, v5))
      {
LABEL_21:
        uint64_t result = (char *)(v15 + 1);
        unint64_t v19 = (char *)(v13 + 32 + 8 * v5);
        if (v15 + 1 != (void *)v19 || result >= &v19[8 * v17]) {
          uint64_t result = (char *)memmove(result, v19, 8 * v17);
        }
        if (!(v7 >> 62))
        {
          uint64_t v20 = *(void *)(v13 + 16);
          uint64_t v21 = v20 + v8;
          if (!__OFADD__(v20, v8))
          {
LABEL_26:
            *(void *)(v13 + 16) = v21;
            goto LABEL_27;
          }
LABEL_44:
          __break(1u);
          return result;
        }
LABEL_42:
        swift_bridgeObjectRetain();
        uint64_t v24 = sub_1A6892EB0();
        uint64_t result = (char *)swift_bridgeObjectRelease();
        uint64_t v21 = v24 + v8;
        if (!__OFADD__(v24, v8)) {
          goto LABEL_26;
        }
        goto LABEL_44;
      }
    }
    __break(1u);
    goto LABEL_42;
  }
LABEL_27:
  *unint64_t v15 = v3;

  return (char *)sub_1A6892300();
}

char *sub_1A6757A74(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1A6741AD0(&qword_1E96C1D18);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 72);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[72 * v8]) {
      memmove(v12, v13, 72 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1A6757B94(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1A6741AD0(&qword_1EB67A388);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1A6757C98(uint64_t a1)
{
  return sub_1A6757B94(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1A6757CAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SpeechSlicer.VoiceQuery(0);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  int64_t v7 = (uint64_t *)((char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v29 - v8;
  uint64_t v10 = sub_1A6741AD0(&qword_1E96C1D00);
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = &v13[*(int *)(v11 + 56)];
  sub_1A67581E4(a1, (uint64_t)v13, type metadata accessor for SpeechSlicer.VoiceQuery);
  sub_1A67581E4(a2, (uint64_t)v14, type metadata accessor for SpeechSlicer.VoiceQuery);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    sub_1A67581E4((uint64_t)v13, (uint64_t)v9, type metadata accessor for SpeechSlicer.VoiceQuery);
    int v20 = swift_getEnumCaseMultiPayload();
    uint64_t v21 = sub_1A6891A40();
    uint64_t v22 = v21;
    uint64_t v23 = *(void *)(v21 - 8);
    if (!v20)
    {
      MEMORY[0x1F4188790](v21);
      uint64_t v26 = (char *)&v29 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v26, v14, v22);
      char v24 = MEMORY[0x1AD0BE9F0](v9, v26);
      uint64_t v27 = *(void (**)(char *, uint64_t))(v23 + 8);
      v27(v26, v22);
      v27(v9, v22);
      sub_1A675824C((uint64_t)v13, type metadata accessor for SpeechSlicer.VoiceQuery);
      return v24 & 1;
    }
    (*(void (**)(char *, uint64_t))(*(void *)(v21 - 8) + 8))(v9, v21);
    goto LABEL_15;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (swift_getEnumCaseMultiPayload() == 2) {
      goto LABEL_19;
    }
LABEL_15:
    sub_1A6750210((uint64_t)v13, &qword_1E96C1D00);
    goto LABEL_16;
  }
  sub_1A67581E4((uint64_t)v13, (uint64_t)v7, type metadata accessor for SpeechSlicer.VoiceQuery);
  uint64_t v17 = *v7;
  uint64_t v16 = v7[1];
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  if (v17 == *(void *)v14 && v16 == *((void *)v14 + 1))
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_19;
  }
  char v19 = sub_1A6893120();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v19)
  {
LABEL_19:
    sub_1A675824C((uint64_t)v13, type metadata accessor for SpeechSlicer.VoiceQuery);
    char v24 = 1;
    return v24 & 1;
  }
  sub_1A675824C((uint64_t)v13, type metadata accessor for SpeechSlicer.VoiceQuery);
LABEL_16:
  char v24 = 0;
  return v24 & 1;
}

uint64_t sub_1A6758028(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SpeechSlicer.VoiceQuery(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A675808C()
{
  swift_bridgeObjectRelease();
  sub_1A6741A24(v0 + 24);
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 80, 7);
}

uint64_t sub_1A67580D4(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1A6758130()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1A6741A24(v0 + 56);
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 112, 7);
}

uint64_t sub_1A6758188(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1A67581E4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1A675824C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

_OWORD *sub_1A67582AC(_OWORD *a1, _OWORD *a2)
{
  *a2 = *a1;
  a2[1] = a1[1];
  long long v3 = *(_OWORD *)((char *)a1 + 56);
  *(_OWORD *)((char *)a2 + 56) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))((uint64_t)(a2 + 2), (uint64_t)(a1 + 2));
  return a2;
}

uint64_t sub_1A6758320(uint64_t a1)
{
  return a1;
}

uint64_t *initializeBufferWithCopyOfBuffer for SpeechSlicer(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for SpeechSlicer.VoiceQuery(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v11 = a2[1];
      *a1 = *a2;
      a1[1] = v11;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
    }
    else
    {
      uint64_t v9 = sub_1A6891A40();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
      swift_storeEnumTagMultiPayload();
    }
    uint64_t v12 = a3[5];
    long long v13 = *(_OWORD *)((char *)a2 + v12 + 24);
    *(_OWORD *)((char *)a1 + v12 + 24) = v13;
    (**(void (***)(void))(v13 - 8))();
    uint64_t v14 = a3[7];
    *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    *(uint64_t *)((char *)a1 + v14) = *(uint64_t *)((char *)a2 + v14);
    uint64_t v15 = a3[9];
    *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
    *(uint64_t *)((char *)a1 + v15) = *(uint64_t *)((char *)a2 + v15);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for SpeechSlicer(uint64_t a1, uint64_t a2)
{
  type metadata accessor for SpeechSlicer.VoiceQuery(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    swift_bridgeObjectRelease();
  }
  else if (!EnumCaseMultiPayload)
  {
    uint64_t v5 = sub_1A6891A40();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  }
  sub_1A6741A24(a1 + *(int *)(a2 + 20));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for SpeechSlicer(void *a1, void *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeechSlicer.VoiceQuery(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v9 = a2[1];
    *a1 = *a2;
    a1[1] = v9;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  else
  {
    uint64_t v8 = sub_1A6891A40();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v10 = a3[5];
  long long v11 = *(_OWORD *)((char *)a2 + v10 + 24);
  *(_OWORD *)((char *)a1 + v10 + 24) = v11;
  (**(void (***)(void))(v11 - 8))();
  uint64_t v12 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);
  uint64_t v13 = a3[9];
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  *(void *)((char *)a1 + v13) = *(void *)((char *)a2 + v13);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for SpeechSlicer(void *a1, void *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_1A675824C((uint64_t)a1, type metadata accessor for SpeechSlicer.VoiceQuery);
    uint64_t v6 = type metadata accessor for SpeechSlicer.VoiceQuery(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
    else
    {
      uint64_t v8 = sub_1A6891A40();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
  }
  sub_1A67588AC((void *)((char *)a1 + a3[5]), (void *)((char *)a2 + a3[5]));
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t *sub_1A67588AC(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    long long v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        uint64_t result = (uint64_t *)swift_release();
        uint64_t *v3 = v12;
      }
      else
      {
        long long v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          uint64_t *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

char *initializeWithTake for SpeechSlicer(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeechSlicer.VoiceQuery(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  else
  {
    uint64_t v7 = sub_1A6891A40();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v8];
  long long v11 = &a2[v8];
  long long v12 = *((_OWORD *)v11 + 1);
  *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
  *((_OWORD *)v10 + 1) = v12;
  *((void *)v10 + 4) = *((void *)v11 + 4);
  *(void *)&a1[v9] = *(void *)&a2[v9];
  uint64_t v13 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  a1[v13] = a2[v13];
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  return a1;
}

char *assignWithTake for SpeechSlicer(char *a1, char *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_1A675824C((uint64_t)a1, type metadata accessor for SpeechSlicer.VoiceQuery);
    uint64_t v6 = type metadata accessor for SpeechSlicer.VoiceQuery(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
    else
    {
      uint64_t v7 = sub_1A6891A40();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  sub_1A6741A24((uint64_t)&a1[v8]);
  long long v11 = *((_OWORD *)v10 + 1);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *((_OWORD *)v9 + 1) = v11;
  *((void *)v9 + 4) = *((void *)v10 + 4);
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  *(void *)&a1[v12] = *(void *)&a2[v12];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SpeechSlicer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1A6758D48);
}

uint64_t sub_1A6758D48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeechSlicer.VoiceQuery(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 24);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for SpeechSlicer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1A6758E20);
}

uint64_t sub_1A6758E20(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for SpeechSlicer.VoiceQuery(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 24) = (a2 - 1);
  }
  return result;
}

uint64_t sub_1A6758EE0()
{
  uint64_t result = type metadata accessor for SpeechSlicer.VoiceQuery(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for SpeechSlicer.Slice(void *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    uint64_t v4 = (void *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = a2[1];
    if (v7)
    {
      void *v4 = *a2;
      v4[1] = v7;
      uint64_t v8 = a2[3];
      int v4[2] = a2[2];
      void v4[3] = v8;
      _OWORD v4[4] = a2[4];
      *((_WORD *)v4 + 20) = *((_WORD *)a2 + 20);
      v4[6] = a2[6];
      *((unsigned char *)v4 + 56) = *((unsigned char *)a2 + 56);
      uint64_t v9 = a2[9];
      v4[8] = a2[8];
      v4[9] = v9;
      unint64_t v10 = (void *)a2[10];
      v4[10] = v10;
      *((_DWORD *)v4 + 22) = *((_DWORD *)a2 + 22);
      *((unsigned char *)v4 + 92) = *((unsigned char *)a2 + 92);
      *((_DWORD *)v4 + 24) = *((_DWORD *)a2 + 24);
      *((unsigned char *)v4 + 100) = *((unsigned char *)a2 + 100);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v11 = v10;
    }
    else
    {
      long long v13 = *((_OWORD *)a2 + 5);
      *((_OWORD *)v4 + 4) = *((_OWORD *)a2 + 4);
      *((_OWORD *)v4 + 5) = v13;
      *(void *)((char *)v4 + 93) = *(uint64_t *)((char *)a2 + 93);
      long long v14 = *((_OWORD *)a2 + 1);
      *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
      *((_OWORD *)v4 + 1) = v14;
      long long v15 = *((_OWORD *)a2 + 3);
      *((_OWORD *)v4 + 2) = *((_OWORD *)a2 + 2);
      *((_OWORD *)v4 + 3) = v15;
    }
    uint64_t v16 = a3[5];
    uint64_t v17 = (char *)v4 + v16;
    uint64_t v18 = (char *)a2 + v16;
    uint64_t v19 = sub_1A6891B40();
    uint64_t v20 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      uint64_t v21 = sub_1A6741AD0(&qword_1E96C1CE8);
      memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    uint64_t v22 = a3[6];
    uint64_t v23 = a3[7];
    char v24 = (void *)((char *)v4 + v22);
    uint64_t v25 = (uint64_t *)((char *)a2 + v22);
    uint64_t v26 = v25[1];
    *char v24 = *v25;
    v24[1] = v26;
    uint64_t v27 = *(void **)((char *)a2 + v23);
    *(void *)((char *)v4 + v23) = v27;
    uint64_t v28 = a3[9];
    *(void *)((char *)v4 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    uint64_t v29 = (void *)((char *)v4 + v28);
    uint64_t v30 = (uint64_t *)((char *)a2 + v28);
    uint64_t v31 = type metadata accessor for SpeechSlicer.VoiceQuery(0);
    swift_bridgeObjectRetain();
    id v32 = v27;
    swift_bridgeObjectRetain();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v35 = v30[1];
      *uint64_t v29 = *v30;
      v29[1] = v35;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      uint64_t v34 = sub_1A6891A40();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v34 - 8) + 16))(v29, v30, v34);
      swift_storeEnumTagMultiPayload();
    }
    uint64_t v36 = a3[10];
    uint64_t v37 = a3[11];
    long long v38 = (void *)((char *)v4 + v36);
    unint64_t v39 = (uint64_t *)((char *)a2 + v36);
    uint64_t v40 = v39[1];
    *long long v38 = *v39;
    v38[1] = v40;
    *(void *)((char *)v4 + v37) = *(uint64_t *)((char *)a2 + v37);
    swift_bridgeObjectRetain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for SpeechSlicer.Slice(uint64_t a1, int *a2)
{
  if (*(void *)(a1 + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = sub_1A6891B40();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  uint64_t v7 = a1 + a2[9];
  type metadata accessor for SpeechSlicer.VoiceQuery(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    swift_bridgeObjectRelease();
  }
  else if (!EnumCaseMultiPayload)
  {
    uint64_t v9 = sub_1A6891A40();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v7, v9);
  }
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for SpeechSlicer.Slice(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v6;
    uint64_t v7 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v7;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
    uint64_t v8 = *(void *)(a2 + 72);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = v8;
    uint64_t v9 = *(void **)(a2 + 80);
    *(void *)(a1 + 80) = v9;
    *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
    *(unsigned char *)(a1 + 92) = *(unsigned char *)(a2 + 92);
    *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
    *(unsigned char *)(a1 + 100) = *(unsigned char *)(a2 + 100);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v10 = v9;
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v11;
    *(void *)(a1 + 93) = *(void *)(a2 + 93);
    long long v12 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v12;
    long long v13 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v13;
  }
  uint64_t v14 = a3[5];
  long long v15 = (void *)(a1 + v14);
  uint64_t v16 = (const void *)(a2 + v14);
  uint64_t v17 = sub_1A6891B40();
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    uint64_t v19 = sub_1A6741AD0(&qword_1E96C1CE8);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v18 + 16))(v15, v16, v17);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  uint64_t v20 = a3[6];
  uint64_t v21 = a3[7];
  uint64_t v22 = (void *)(a1 + v20);
  uint64_t v23 = (void *)(a2 + v20);
  uint64_t v24 = v23[1];
  *uint64_t v22 = *v23;
  v22[1] = v24;
  uint64_t v25 = *(void **)(a2 + v21);
  *(void *)(a1 + v21) = v25;
  uint64_t v26 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = (void *)(a2 + v26);
  uint64_t v29 = type metadata accessor for SpeechSlicer.VoiceQuery(0);
  swift_bridgeObjectRetain();
  id v30 = v25;
  swift_bridgeObjectRetain();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v33 = v28[1];
    *uint64_t v27 = *v28;
    v27[1] = v33;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    uint64_t v32 = sub_1A6891A40();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v32 - 8) + 16))(v27, v28, v32);
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v34 = a3[10];
  uint64_t v35 = a3[11];
  uint64_t v36 = (void *)(a1 + v34);
  uint64_t v37 = (void *)(a2 + v34);
  uint64_t v38 = v37[1];
  *uint64_t v36 = *v37;
  v36[1] = v38;
  *(void *)(a1 + v35) = *(void *)(a2 + v35);
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SpeechSlicer.Slice(uint64_t a1, long long *a2, int *a3)
{
  uint64_t v6 = *((void *)a2 + 1);
  if (*(void *)(a1 + 8))
  {
    if (v6)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *((void *)a2 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 24) = *((void *)a2 + 3);
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
      *(unsigned char *)(a1 + 41) = *((unsigned char *)a2 + 41);
      *(void *)(a1 + 48) = *((void *)a2 + 6);
      *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
      *(void *)(a1 + 64) = *((void *)a2 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 72) = *((void *)a2 + 9);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v7 = (void *)*((void *)a2 + 10);
      uint64_t v8 = *(void **)(a1 + 80);
      *(void *)(a1 + 80) = v7;
      id v9 = v7;

      int v10 = *((_DWORD *)a2 + 22);
      *(unsigned char *)(a1 + 92) = *((unsigned char *)a2 + 92);
      *(_DWORD *)(a1 + 88) = v10;
      int v11 = *((_DWORD *)a2 + 24);
      *(unsigned char *)(a1 + 100) = *((unsigned char *)a2 + 100);
      *(_DWORD *)(a1 + 96) = v11;
    }
    else
    {
      sub_1A67411AC(a1);
      long long v17 = a2[1];
      long long v16 = a2[2];
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 16) = v17;
      *(_OWORD *)(a1 + 32) = v16;
      long long v19 = a2[4];
      long long v18 = a2[5];
      long long v20 = a2[3];
      *(void *)(a1 + 93) = *(void *)((char *)a2 + 93);
      *(_OWORD *)(a1 + 64) = v19;
      *(_OWORD *)(a1 + 80) = v18;
      *(_OWORD *)(a1 + 48) = v20;
    }
  }
  else if (v6)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = *((void *)a2 + 1);
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(void *)(a1 + 24) = *((void *)a2 + 3);
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
    *(unsigned char *)(a1 + 41) = *((unsigned char *)a2 + 41);
    *(void *)(a1 + 48) = *((void *)a2 + 6);
    *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
    *(void *)(a1 + 64) = *((void *)a2 + 8);
    *(void *)(a1 + 72) = *((void *)a2 + 9);
    long long v12 = (void *)*((void *)a2 + 10);
    *(void *)(a1 + 80) = v12;
    int v13 = *((_DWORD *)a2 + 22);
    *(unsigned char *)(a1 + 92) = *((unsigned char *)a2 + 92);
    *(_DWORD *)(a1 + 88) = v13;
    int v14 = *((_DWORD *)a2 + 24);
    *(unsigned char *)(a1 + 100) = *((unsigned char *)a2 + 100);
    *(_DWORD *)(a1 + 96) = v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v15 = v12;
  }
  else
  {
    long long v21 = *a2;
    long long v22 = a2[2];
    *(_OWORD *)(a1 + 16) = a2[1];
    *(_OWORD *)(a1 + 32) = v22;
    *(_OWORD *)a1 = v21;
    long long v23 = a2[3];
    long long v24 = a2[4];
    long long v25 = a2[5];
    *(void *)(a1 + 93) = *(void *)((char *)a2 + 93);
    *(_OWORD *)(a1 + 64) = v24;
    *(_OWORD *)(a1 + 80) = v25;
    *(_OWORD *)(a1 + 48) = v23;
  }
  uint64_t v26 = a3[5];
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = (char *)a2 + v26;
  uint64_t v29 = sub_1A6891B40();
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v31 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v30 + 48);
  int v32 = v31(v27, 1, v29);
  int v33 = v31(v28, 1, v29);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(void *, char *, uint64_t))(v30 + 16))(v27, v28, v29);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v33)
  {
    (*(void (**)(void *, uint64_t))(v30 + 8))(v27, v29);
LABEL_13:
    uint64_t v34 = sub_1A6741AD0(&qword_1E96C1CE8);
    memcpy(v27, v28, *(void *)(*(void *)(v34 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(void *, char *, uint64_t))(v30 + 24))(v27, v28, v29);
LABEL_14:
  uint64_t v35 = a3[6];
  uint64_t v36 = (void *)(a1 + v35);
  uint64_t v37 = (void *)((char *)a2 + v35);
  *uint64_t v36 = *v37;
  v36[1] = v37[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v38 = a3[7];
  unint64_t v39 = *(void **)(a1 + v38);
  uint64_t v40 = *(void **)((char *)a2 + v38);
  *(void *)(a1 + v38) = v40;
  id v41 = v40;

  *(void *)(a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if ((long long *)a1 != a2)
  {
    uint64_t v42 = a3[9];
    uint64_t v43 = (void *)(a1 + v42);
    uint64_t v44 = (void *)((char *)a2 + v42);
    sub_1A675824C(a1 + v42, type metadata accessor for SpeechSlicer.VoiceQuery);
    uint64_t v45 = type metadata accessor for SpeechSlicer.VoiceQuery(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *uint64_t v43 = *v44;
      v43[1] = v44[1];
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64));
    }
    else
    {
      uint64_t v47 = sub_1A6891A40();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v47 - 8) + 16))(v43, v44, v47);
      swift_storeEnumTagMultiPayload();
    }
  }
  uint64_t v48 = a3[10];
  unint64_t v49 = (void *)(a1 + v48);
  uint64_t v50 = (void *)((char *)a2 + v48);
  *unint64_t v49 = *v50;
  v49[1] = v50[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[11]) = *(void *)((char *)a2 + a3[11]);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for SpeechSlicer.Slice(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  *(void *)(a1 + 93) = *(void *)(a2 + 93);
  long long v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  long long v8 = *(_OWORD *)(a2 + 48);
  uint64_t v9 = a3[5];
  int v10 = (void *)(a1 + v9);
  int v11 = (const void *)(a2 + v9);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v8;
  uint64_t v12 = sub_1A6891B40();
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    uint64_t v14 = sub_1A6741AD0(&qword_1E96C1CE8);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  uint64_t v15 = a3[7];
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  *(void *)(a1 + v15) = *(void *)(a2 + v15);
  uint64_t v16 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  long long v17 = (void *)(a1 + v16);
  long long v18 = (const void *)(a2 + v16);
  uint64_t v19 = type metadata accessor for SpeechSlicer.VoiceQuery(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    uint64_t v20 = sub_1A6891A40();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v20 - 8) + 32))(v17, v18, v20);
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v21 = a3[11];
  *(_OWORD *)(a1 + a3[10]) = *(_OWORD *)(a2 + a3[10]);
  *(void *)(a1 + v21) = *(void *)(a2 + v21);
  return a1;
}

uint64_t assignWithTake for SpeechSlicer.Slice(uint64_t a1, uint64_t a2, int *a3)
{
  if (*(void *)(a1 + 8))
  {
    uint64_t v6 = *(void *)(a2 + 8);
    if (v6)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v6;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      swift_bridgeObjectRelease();
      uint64_t v7 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = v7;
      swift_bridgeObjectRelease();
      *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      swift_bridgeObjectRelease();
      long long v8 = *(void **)(a1 + 80);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);

      *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
      *(unsigned char *)(a1 + 92) = *(unsigned char *)(a2 + 92);
      *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
      *(unsigned char *)(a1 + 100) = *(unsigned char *)(a2 + 100);
      goto LABEL_6;
    }
    sub_1A67411AC(a1);
  }
  long long v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v9;
  *(void *)(a1 + 93) = *(void *)(a2 + 93);
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  long long v11 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v11;
LABEL_6:
  uint64_t v12 = a3[5];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t v15 = sub_1A6891B40();
  uint64_t v16 = *(void *)(v15 - 8);
  long long v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 32))(v13, v14, v15);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v19)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v13, v15);
LABEL_11:
    uint64_t v20 = sub_1A6741AD0(&qword_1E96C1CE8);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 40))(v13, v14, v15);
LABEL_12:
  uint64_t v21 = a3[6];
  long long v22 = (void *)(a1 + v21);
  long long v23 = (uint64_t *)(a2 + v21);
  uint64_t v25 = *v23;
  uint64_t v24 = v23[1];
  *long long v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease();
  uint64_t v26 = a3[7];
  uint64_t v27 = *(void **)(a1 + v26);
  *(void *)(a1 + v26) = *(void *)(a2 + v26);

  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v28 = a3[9];
    uint64_t v29 = (void *)(a1 + v28);
    uint64_t v30 = (const void *)(a2 + v28);
    sub_1A675824C(a1 + v28, type metadata accessor for SpeechSlicer.VoiceQuery);
    uint64_t v31 = type metadata accessor for SpeechSlicer.VoiceQuery(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      uint64_t v32 = sub_1A6891A40();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v32 - 8) + 32))(v29, v30, v32);
      swift_storeEnumTagMultiPayload();
    }
  }
  uint64_t v33 = a3[10];
  uint64_t v34 = (void *)(a1 + v33);
  uint64_t v35 = (uint64_t *)(a2 + v33);
  uint64_t v37 = *v35;
  uint64_t v36 = v35[1];
  void *v34 = v37;
  v34[1] = v36;
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SpeechSlicer.Slice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1A675A274);
}

uint64_t sub_1A675A274(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1A6741AD0(&qword_1E96C1CE8);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + a3[5];
    long long v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v12 = *(void *)(a1 + a3[6] + 8);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
  else
  {
    uint64_t v13 = type metadata accessor for SpeechSlicer.VoiceQuery(0);
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
    uint64_t v15 = v13;
    uint64_t v16 = a1 + a3[9];
    return v14(v16, a2, v15);
  }
}

uint64_t storeEnumTagSinglePayload for SpeechSlicer.Slice(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1A675A3C0);
}

uint64_t sub_1A675A3C0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = sub_1A6741AD0(&qword_1E96C1CE8);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + a4[5];
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[6] + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v13 = type metadata accessor for SpeechSlicer.VoiceQuery(0);
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
    uint64_t v15 = v13;
    uint64_t v16 = a1 + a4[9];
    return v14(v16, a2, a2, v15);
  }
  return result;
}

void sub_1A675A4F8()
{
  sub_1A675A604();
  if (v0 <= 0x3F)
  {
    type metadata accessor for SpeechSlicer.VoiceQuery(319);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_1A675A604()
{
  if (!qword_1E96C1CF0)
  {
    sub_1A6891B40();
    unint64_t v0 = sub_1A6892A00();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E96C1CF0);
    }
  }
}

uint64_t sub_1A675A65C()
{
  return type metadata accessor for SpeechSlicer.TrackedSSMLNode(0);
}

uint64_t type metadata accessor for SpeechSlicer.TrackedSSMLNode(uint64_t a1)
{
  return sub_1A675A684(a1, (uint64_t *)&unk_1E96C59E0);
}

uint64_t sub_1A675A684(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1A675A6BC()
{
  uint64_t result = type metadata accessor for SpeechSlicer.VoiceQuery(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t _s10BreadCrumbVwxx(uint64_t a1)
{
  return sub_1A6741A24(a1 + 32);
}

_OWORD *_s10BreadCrumbVwcp(_OWORD *a1, _OWORD *a2)
{
  long long v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  long long v4 = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)a1 + 56) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  return a1;
}

void *_s10BreadCrumbVwca(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  sub_1A67588AC(a1 + 4, a2 + 4);
  return a1;
}

__n128 _s7ManagerVwtk(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t _s10BreadCrumbVwta(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  sub_1A6741A24(a1 + 32);
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  return a1;
}

uint64_t _s10BreadCrumbVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s10BreadCrumbVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 56) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TTSMarkup.BreadCrumb()
{
  return &type metadata for TTSMarkup.BreadCrumb;
}

uint64_t *sub_1A675A948(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v10 = a2[1];
      *a1 = *a2;
      a1[1] = v10;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v8 = sub_1A6891A40();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_1A675AA68(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    return swift_bridgeObjectRelease();
  }
  else if (!result)
  {
    uint64_t v3 = sub_1A6891A40();
    long long v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(a1, v3);
  }
  return result;
}

void *sub_1A675AB08(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v7 = sub_1A6891A40();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *sub_1A675ABE4(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1A675824C((uint64_t)a1, type metadata accessor for SpeechSlicer.VoiceQuery);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v7 = sub_1A6891A40();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void *sub_1A675ACEC(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = sub_1A6891A40();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *sub_1A675ADA0(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1A675824C((uint64_t)a1, type metadata accessor for SpeechSlicer.VoiceQuery);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = sub_1A6891A40();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for TTSMacroLanguageDisambiguationMapping(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for TTSMacroLanguageDisambiguationMapping(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_1A675AECC()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1A675AEDC()
{
  uint64_t result = sub_1A6891A40();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

unint64_t sub_1A675AF70()
{
  unint64_t result = qword_1E96C5A00[0];
  if (!qword_1E96C5A00[0])
  {
    type metadata accessor for SpeechSlicer.VoiceQuery(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E96C5A00);
  }
  return result;
}

uint64_t sub_1A675AFC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SpeechSlicer.VoiceQuery(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A675B02C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1A675B090(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_1A6741AD0(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1A675B0F4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1A675B13C()
{
  unint64_t result = sub_1A6742BA0((uint64_t)&unk_1EFB7A960);
  qword_1E96C4018 = result;
  return result;
}

unint64_t sub_1A675B164(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    unint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  sub_1A6741AD0(&qword_1EB67A370);
  unint64_t v2 = (void *)sub_1A6892EF0();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_1A673F7AC(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1A675B280(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_1A6741AD0(&qword_1E96C1D48);
    unint64_t v2 = (void *)sub_1A6892EF0();
  }
  else
  {
    unint64_t v2 = (void *)MEMORY[0x1E4FBC868];
  }
  uint64_t v3 = sub_1A6741AD0(&qword_1E96C1D40);
  uint64_t v4 = MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    uint64_t v9 = *(int *)(v4 + 48);
    unint64_t v10 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    v21[1] = a1;
    uint64_t v11 = a1 + v10;
    uint64_t v12 = *(void *)(v5 + 72);
    swift_retain();
    while (1)
    {
      sub_1A675B090(v11, (uint64_t)v7, &qword_1E96C1D40);
      unint64_t result = sub_1A675E2B8((uint64_t)v7);
      if (v14) {
        break;
      }
      unint64_t v15 = result;
      *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      uint64_t v16 = v2[6];
      uint64_t v17 = sub_1A68918D0();
      unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v16 + *(void *)(*(void *)(v17 - 8) + 72) * v15, v7, v17);
      *(void *)(v2[7] + 8 * v15) = *(void *)&v7[v9];
      uint64_t v18 = v2[2];
      BOOL v19 = __OFADD__(v18, 1);
      uint64_t v20 = v18 + 1;
      if (v19) {
        goto LABEL_12;
      }
      v2[2] = v20;
      v11 += v12;
      if (!--v8)
      {
        swift_release();
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_12:
    __break(1u);
  }
  else
  {
LABEL_10:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  return result;
}

unint64_t sub_1A675B474()
{
  sub_1A6741AD0(&qword_1EB67A390);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1A689DE50;
  *(void *)(inited + 32) = 0x55522D7572;
  *(void *)(inited + 40) = 0xE500000000000000;
  *(void *)(inited + 48) = &unk_1EFB7AB10;
  *(void *)(inited + 56) = 0x4F4E2D626ELL;
  *(void *)(inited + 64) = 0xE500000000000000;
  *(void *)(inited + 72) = &unk_1EFB7AAE0;
  unint64_t result = sub_1A675B164(inited);
  qword_1EB67AA40 = result;
  return result;
}

unint64_t sub_1A675B4F4()
{
  sub_1A6741AD0(&qword_1EB67A390);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1A689E4B0;
  *(void *)(inited + 32) = 0x4B482D687ALL;
  *(void *)(inited + 40) = 0xE500000000000000;
  *(void *)(inited + 48) = &unk_1EFB7AAB0;
  *(void *)(inited + 56) = 0x4F4D2D687ALL;
  *(void *)(inited + 64) = 0xE500000000000000;
  *(void *)(inited + 72) = &unk_1EFB7A9E0;
  *(void *)(inited + 80) = 26746;
  *(void *)(inited + 88) = 0xE200000000000000;
  *(void *)(inited + 96) = &unk_1EFB7AA10;
  *(void *)(inited + 104) = 0x41532D7261;
  *(void *)(inited + 112) = 0xE500000000000000;
  *(void *)(inited + 120) = &unk_1EFB7AA40;
  *(void *)(inited + 128) = 0x4F4E2D6F6ELL;
  *(void *)(inited + 136) = 0xE500000000000000;
  *(void *)(inited + 144) = &unk_1EFB7AA80;
  unint64_t result = sub_1A675B164(inited);
  qword_1EB67AA30 = result;
  return result;
}

unint64_t sub_1A675B5C0()
{
  unint64_t result = sub_1A6742BA0((uint64_t)&unk_1EFB79940);
  qword_1E96D6110 = result;
  return result;
}

uint64_t *sub_1A675B5E8()
{
  if (qword_1E96C4000 != -1) {
    swift_once();
  }
  return &qword_1E96D6110;
}

uint64_t Locale.LanguageCode.macroLanguage.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_1E96C4020 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_1E96C4018;
  uint64_t v3 = sub_1A6891890();
  if (*(void *)(v2 + 16) && (sub_1A673F7AC(v3, v4), (v5 & 1) != 0))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_1A68918E0();
    uint64_t v6 = sub_1A68918D0();
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
    uint64_t v8 = v6;
    uint64_t v9 = a1;
    uint64_t v10 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v11 = sub_1A68918D0();
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v8 = v11;
    uint64_t v9 = a1;
    uint64_t v10 = 1;
  }

  return v7(v9, v10, 1, v8);
}

uint64_t Locale.LanguageCode.isMacroLanguage.getter()
{
  if (qword_1E96C4020 != -1) {
    swift_once();
  }
  uint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = sub_1A675B7F8(v0);
  uint64_t v2 = sub_1A6891890();
  char v4 = sub_1A675B990(v2, v3, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

uint64_t sub_1A675B7F8(uint64_t a1)
{
  uint64_t result = sub_1A6892700();
  int64_t v3 = 0;
  uint64_t v18 = result;
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    int64_t v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      int64_t v3 = v14 + 1;
      if (v14 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v15 = *(void *)(v4 + 8 * v3);
      if (!v15)
      {
        int64_t v3 = v14 + 2;
        if (v14 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v15 = *(void *)(v4 + 8 * v3);
        if (!v15)
        {
          int64_t v3 = v14 + 3;
          if (v14 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v15 = *(void *)(v4 + 8 * v3);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    uint64_t v11 = (uint64_t *)(*(void *)(a1 + 56) + 16 * v10);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    swift_bridgeObjectRetain();
    sub_1A675E4B8(&v17, v12, v13);
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  unint64_t v15 = *(void *)(v4 + 8 * v16);
  if (v15)
  {
    int64_t v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v3 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v3);
    ++v16;
    if (v15) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1A675B990(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    sub_1A6893200();
    sub_1A68920F0();
    uint64_t v6 = sub_1A6893250();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if ((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      uint64_t v10 = *(void *)(a3 + 48);
      uint64_t v11 = (void *)(v10 + 16 * v8);
      BOOL v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (sub_1A6893120() & 1) != 0) {
        return 1;
      }
      uint64_t v14 = ~v7;
      unint64_t v15 = (v8 + 1) & v14;
      if ((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
      {
        while (1)
        {
          int64_t v16 = (void *)(v10 + 16 * v15);
          BOOL v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (sub_1A6893120() & 1) != 0) {
            break;
          }
          uint64_t result = 0;
          unint64_t v15 = (v15 + 1) & v14;
          if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
            return result;
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t Locale.LanguageCode.childLanguages.getter(uint64_t a1)
{
  if (qword_1E96C4020 != -1) {
    a1 = swift_once();
  }
  uint64_t v2 = qword_1E96C4018;
  MEMORY[0x1F4188790](a1);
  void v14[2] = v1;
  swift_bridgeObjectRetain();
  uint64_t v3 = sub_1A675BD20((uint64_t)sub_1A675E184, (uint64_t)v14, v2);
  int64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    uint64_t v17 = MEMORY[0x1E4FBC860];
    sub_1A675FF04(0, v4, 0);
    uint64_t v5 = v17;
    uint64_t v6 = sub_1A68918D0();
    uint64_t v16 = v6;
    uint64_t v7 = *(void *)(v6 - 8);
    uint64_t v8 = *(void *)(v7 + 64);
    uint64_t v15 = v3;
    uint64_t v9 = v3 + 40;
    do
    {
      MEMORY[0x1F4188790](v6);
      swift_bridgeObjectRetain();
      sub_1A68918E0();
      uint64_t v17 = v5;
      unint64_t v11 = *(void *)(v5 + 16);
      unint64_t v10 = *(void *)(v5 + 24);
      if (v11 >= v10 >> 1)
      {
        sub_1A675FF04(v10 > 1, v11 + 1, 1);
        uint64_t v5 = v17;
      }
      v9 += 16;
      *(void *)(v5 + 16) = v11 + 1;
      uint64_t v6 = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))(v5+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v11, (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v16);
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = sub_1A6760D00(v5);
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_1A675BD20(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3;
  uint64_t v5 = (uint64_t (*)(void *))result;
  int64_t v6 = 0;
  uint64_t v7 = *(void *)(a3 + 64);
  uint64_t v26 = a3 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & v7;
  int64_t v27 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = MEMORY[0x1E4FBC860];
  uint64_t v24 = (uint64_t (*)(void *))result;
  if ((v9 & v7) != 0) {
    goto LABEL_6;
  }
LABEL_7:
  if (__OFADD__(v6++, 1))
  {
    __break(1u);
    goto LABEL_36;
  }
  if (v6 >= v27) {
    goto LABEL_33;
  }
  unint64_t v15 = *(void *)(v26 + 8 * v6);
  if (v15) {
    goto LABEL_19;
  }
  int64_t v16 = v6 + 1;
  if (v6 + 1 >= v27) {
    goto LABEL_33;
  }
  unint64_t v15 = *(void *)(v26 + 8 * v16);
  if (v15)
  {
LABEL_18:
    int64_t v6 = v16;
LABEL_19:
    unint64_t v10 = (v15 - 1) & v15;
    for (unint64_t i = __clz(__rbit64(v15)) + (v6 << 6); ; unint64_t i = v12 | (v6 << 6))
    {
      uint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * i);
      uint64_t v18 = *v17;
      uint64_t v19 = v17[1];
      v28[0] = *v17;
      v28[1] = v19;
      swift_bridgeObjectRetain();
      char v20 = v5(v28);
      if (v3) {
        break;
      }
      if (v20)
      {
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v29 = v11;
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_1A674CBF0(0, *(void *)(v11 + 16) + 1, 1);
          uint64_t v11 = v29;
        }
        unint64_t v22 = *(void *)(v11 + 16);
        unint64_t v21 = *(void *)(v11 + 24);
        if (v22 >= v21 >> 1)
        {
          uint64_t result = (uint64_t)sub_1A674CBF0((char *)(v21 > 1), v22 + 1, 1);
          uint64_t v11 = v29;
        }
        *(void *)(v11 + 16) = v22 + 1;
        uint64_t v23 = v11 + 16 * v22;
        *(void *)(v23 + 32) = v18;
        *(void *)(v23 + 40) = v19;
        uint64_t v4 = a3;
        uint64_t v5 = v24;
        if (!v10) {
          goto LABEL_7;
        }
      }
      else
      {
        uint64_t result = swift_bridgeObjectRelease();
        if (!v10) {
          goto LABEL_7;
        }
      }
LABEL_6:
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    return v11;
  }
  int64_t v16 = v6 + 2;
  if (v6 + 2 >= v27)
  {
LABEL_33:
    swift_release();
    return v11;
  }
  unint64_t v15 = *(void *)(v26 + 8 * v16);
  if (v15) {
    goto LABEL_18;
  }
  int64_t v16 = v6 + 3;
  if (v6 + 3 >= v27) {
    goto LABEL_33;
  }
  unint64_t v15 = *(void *)(v26 + 8 * v16);
  if (v15) {
    goto LABEL_18;
  }
  int64_t v16 = v6 + 4;
  if (v6 + 4 >= v27) {
    goto LABEL_33;
  }
  unint64_t v15 = *(void *)(v26 + 8 * v16);
  if (v15) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v6 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v6 >= v27) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v26 + 8 * v6);
    ++v16;
    if (v15) {
      goto LABEL_19;
    }
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1A675BF9C(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = a2;
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = MEMORY[0x1E4FBC860];
  if (v2)
  {
    uint64_t v29 = MEMORY[0x1E4FBC860];
    sub_1A674CBF0(0, v2, 0);
    uint64_t v3 = v29;
    uint64_t v5 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      int64_t v6 = (void (*)(unsigned char *, void))sub_1A6891810();
      uint64_t v7 = (void (*)(unsigned char *, void))sub_1A68919B0();
      uint64_t v9 = v8;
      uint64_t v10 = sub_1A68918D0();
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10))
      {
        swift_bridgeObjectRetain();
        sub_1A68918A0();
      }
      v7(v27, 0);
      v6(v28, 0);
      uint64_t v11 = sub_1A6891A40();
      void v25[2] = v25;
      uint64_t v12 = *(void *)(v11 - 8);
      MEMORY[0x1F4188790](v11);
      uint64_t v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v15 = sub_1A6891830();
      MEMORY[0x1F4188790](v15);
      (*(void (**)(char *, uint64_t))(v17 + 16))((char *)v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v26);
      sub_1A6891840();
      uint64_t v18 = sub_1A6891860();
      uint64_t v20 = v19;
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
      swift_bridgeObjectRelease();
      uint64_t v29 = v3;
      unint64_t v22 = *(void *)(v3 + 16);
      unint64_t v21 = *(void *)(v3 + 24);
      if (v22 >= v21 >> 1)
      {
        sub_1A674CBF0((char *)(v21 > 1), v22 + 1, 1);
        uint64_t v3 = v29;
      }
      v5 += 16;
      *(void *)(v3 + 16) = v22 + 1;
      uint64_t v23 = v3 + 16 * v22;
      *(void *)(v23 + 32) = v18;
      *(void *)(v23 + 40) = v20;
      --v2;
    }
    while (v2);
  }
  return v3;
}

unint64_t sub_1A675C280()
{
  sub_1A6741AD0(&qword_1E96C1D38);
  uint64_t v0 = (int *)(sub_1A6741AD0(&qword_1E96C1D40) - 8);
  unint64_t v1 = (*(unsigned __int8 *)(*(void *)v0 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v0 + 80);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1A689DC40;
  uint64_t v3 = v0[14];
  sub_1A68918C0();
  sub_1A6741AD0(&qword_1E96C1D30);
  type metadata accessor for TTSMacroLanguageDisambiguationMapping();
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1A689E4C0;
  sub_1A6741AD0(&qword_1E96C1D20);
  sub_1A6891950();
  sub_1A68918C0();
  swift_storeEnumTagMultiPayload();
  sub_1A6891950();
  sub_1A68918C0();
  swift_storeEnumTagMultiPayload();
  sub_1A68918C0();
  swift_storeEnumTagMultiPayload();
  *(void *)(v2 + v1 + v3) = v4;
  unint64_t result = sub_1A675B280(v2);
  qword_1E96D6188 = result;
  return result;
}

uint64_t Locale.withTTSLanguageDisambiguation(overrides:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v116 = a2;
  uint64_t v129 = type metadata accessor for TTSMacroLanguageDisambiguationMapping();
  uint64_t v134 = *(void **)(v129 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v129);
  uint64_t v135 = (void (**)(char *))((char *)v94 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v94 - v6;
  uint64_t v8 = sub_1A68918D0();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v131 = v10;
  uint64_t v11 = (char *)v94 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1A6891A20();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v126 = v14;
  uint64_t v15 = (char *)v94 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v122 = v2;
  sub_1A6891A30();
  uint64_t v16 = sub_1A6741AD0(&qword_1EB67A210);
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v130 = v17;
  uint64_t v18 = (char *)v94 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A68919F0();
  uint64_t v19 = *(void (**)(char *, uint64_t))(v13 + 8);
  uint64_t v127 = v13 + 8;
  uint64_t v128 = v12;
  uint64_t v125 = v19;
  v19(v15, v12);
  uint64_t v123 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  uint64_t v124 = v9 + 48;
  if (v123(v18, 1, v8) == 1)
  {
    sub_1A6750210((uint64_t)v18, &qword_1EB67A210);
LABEL_11:
    uint64_t v29 = v116;
    uint64_t v30 = sub_1A6891A40();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 16))(v29, v122, v30);
  }
  uint64_t v20 = *(void (**)(void))(v9 + 32);
  uint64_t v119 = v9 + 32;
  uint64_t v118 = v20;
  ((void (*)(char *, char *, uint64_t))v20)(v11, v18, v8);
  if (qword_1E96C4020 != -1) {
    swift_once();
  }
  uint64_t v21 = swift_bridgeObjectRetain();
  uint64_t v22 = sub_1A675B7F8(v21);
  uint64_t v23 = sub_1A6891890();
  char v25 = sub_1A675B990(v23, v24, v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v25 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    goto LABEL_11;
  }
  if (a1 && *(void *)(a1 + 16) && (unint64_t v26 = sub_1A675E2B8((uint64_t)v11), (v27 & 1) != 0))
  {
    uint64_t v28 = *(void *)(*(void *)(a1 + 56) + 8 * v26);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v28 = MEMORY[0x1E4FBC860];
  }
  if (qword_1E96C5B10 != -1) {
    swift_once();
  }
  uint64_t v32 = v122;
  if (*(void *)(qword_1E96D6188 + 16))
  {
    sub_1A675E2B8((uint64_t)v11);
    if (v33)
    {
      uint64_t v136 = v28;
      size_t v34 = swift_bridgeObjectRetain();
      sub_1A6760140(v34);
      uint64_t v28 = v136;
    }
  }
  uint64_t v35 = *(void *)(v28 + 16);
  uint64_t v36 = v116;
  if (v35)
  {
    unint64_t v37 = (*((unsigned __int8 *)v134 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v134 + 80);
    v94[1] = v28;
    uint64_t v38 = v28 + v37;
    double v115 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v95 = v9;
    uint64_t v96 = (void (**)(char *, uint64_t))(v9 + 8);
    uint64_t v120 = v134[9];
    uint64_t v98 = v8;
    uint64_t v102 = v11;
    int v103 = v7;
    while (1)
    {
      uint64_t v39 = sub_1A676100C(v38, (uint64_t)v7);
      uint64_t v134 = v94;
      uint64_t v40 = MEMORY[0x1F4188790](v39);
      unint64_t v42 = (v41 + 15) & 0xFFFFFFFFFFFFFFF0;
      uint64_t v121 = (char *)v94 - v42;
      uint64_t v132 = v94;
      uint64_t v43 = MEMORY[0x1F4188790](v40);
      uint64_t v45 = (char *)v94 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v133 = v94;
      MEMORY[0x1F4188790](v43);
      uint64_t v47 = (char *)v94 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
      sub_1A6891A30();
      sub_1A676100C((uint64_t)v7, (uint64_t)v135);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (!EnumCaseMultiPayload) {
        break;
      }
      if (EnumCaseMultiPayload == 1)
      {
        (*v135)(v47);
        swift_release();
      }
      else
      {
        ((void (*)(char *, void (**)(char *), uint64_t))v118)(v45, v135, v8);
        (*v115)(v45, 0, 1, v8);
      }
LABEL_34:
      v125(v47, v128);
      if (v123(v45, 1, v8) != 1)
      {
        swift_bridgeObjectRelease();
        long long v81 = v121;
        ((void (*)(char *, char *, uint64_t))v118)(v121, v45, v8);
        uint64_t v82 = sub_1A6891830();
        uint64_t v135 = (void (**)(char *))v94;
        uint64_t v83 = v8;
        uint64_t v84 = *(void *)(v82 - 8);
        uint64_t v85 = *(void *)(v84 + 64);
        MEMORY[0x1F4188790](v82);
        unint64_t v86 = (v85 + 15) & 0xFFFFFFFFFFFFFFF0;
        sub_1A6891860();
        uint64_t v87 = sub_1A6891820();
        uint64_t v133 = v94;
        MEMORY[0x1F4188790](v87);
        uint64_t v89 = (char *)v94 - ((v88 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v90 = v95 + 16;
        (*(void (**)(char *, char *, uint64_t))(v95 + 16))(v89, v81, v83);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v90 + 40))(v89, 0, 1, v83);
        uint64_t v91 = (uint64_t (*)(uint64_t *, void))sub_1A6891810();
        sub_1A68919D0();
        uint64_t v92 = v91(&v136, 0);
        MEMORY[0x1F4188790](v92);
        (*(void (**)(char *, char *, uint64_t))(v84 + 16))((char *)v94 - v86, (char *)v94 - v86, v82);
        sub_1A6891840();
        (*(void (**)(char *, uint64_t))(v84 + 8))((char *)v94 - v86, v82);
        uint64_t v93 = *(void (**)(char *, uint64_t))(v90 - 8);
        v93(v121, v83);
        sub_1A6761070((uint64_t)v103);
        return ((uint64_t (*)(char *, uint64_t))v93)(v102, v83);
      }
      sub_1A6761070((uint64_t)v7);
      sub_1A6750210((uint64_t)v45, &qword_1EB67A210);
      v38 += v120;
      if (!--v35)
      {
        swift_bridgeObjectRelease();
        uint64_t v36 = v116;
        uint64_t v9 = v95;
        goto LABEL_38;
      }
    }
    uint64_t v105 = v35;
    sub_1A6741AD0(&qword_1E96C1D20);
    uint64_t v49 = (uint64_t)v135;
    uint64_t v50 = sub_1A6891960();
    float v113 = v94;
    uint64_t v51 = *(void *)(v50 - 8);
    uint64_t v117 = v47;
    uint64_t v52 = v51;
    MEMORY[0x1F4188790](v50);
    uint64_t v101 = (char *)v53;
    uint64_t v54 = (char *)v94 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v55 = *(void (**)(char *, uint64_t, uint64_t))(v52 + 32);
    uint64_t v100 = v52 + 32;
    uint64_t v99 = v55;
    uint64_t v56 = ((uint64_t (*)(char *, uint64_t, uint64_t))v55)(v54, v49, v50);
    float v112 = v94;
    MEMORY[0x1F4188790](v56);
    float v111 = (char *)v94 - v42;
    v118();
    uint64_t v57 = sub_1A6741AD0(&qword_1E96C1570);
    uint64_t v109 = v94;
    uint64_t v58 = *(void *)(*(void *)(v57 - 8) + 64);
    MEMORY[0x1F4188790](v57 - 8);
    unint64_t v59 = (char *)v94 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
    unint64_t v60 = *(void (**)(char *, char *, uint64_t))(v52 + 16);
    uint64_t v108 = v54;
    v60(v59, v54, v50);
    uint64_t v61 = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(v59, 0, 1, v50);
    long long v107 = v94;
    MEMORY[0x1F4188790](v61);
    unint64_t v104 = (char *)((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_1A6891A00();
    uint64_t v62 = sub_1A6741AD0(&qword_1E96C1590);
    uint64_t v106 = v94;
    uint64_t v63 = MEMORY[0x1F4188790](v62 - 8);
    int v65 = (char *)v94 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v66 = (uint64_t)&v65[*(int *)(v63 + 56)];
    sub_1A675B090((uint64_t)v59, (uint64_t)v65, &qword_1E96C1570);
    uint64_t v114 = v66;
    sub_1A675B090((uint64_t)v59, v66, &qword_1E96C1570);
    uint64_t v67 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v52 + 48);
    uint64_t v110 = v50;
    uint64_t v68 = v67(v65, 1, v50);
    if (v68 == 1)
    {
      sub_1A6750210((uint64_t)v59, &qword_1E96C1570);
      sub_1A6750210((uint64_t)v59, &qword_1E96C1570);
      uint64_t v69 = v110;
      (*(void (**)(char *, uint64_t))(v52 + 8))(v108, v110);
      int v70 = v67((char *)v114, 1, v69);
      uint64_t v11 = v102;
      if (v70 == 1)
      {
        sub_1A6750210((uint64_t)v65, &qword_1E96C1570);
        uint64_t v8 = v98;
        uint64_t v32 = v122;
        uint64_t v47 = v117;
        uint64_t v35 = v105;
LABEL_32:
        ((void (*)(char *, char *, uint64_t))v118)(v45, v111, v8);
        (*v115)(v45, 0, 1, v8);
        goto LABEL_33;
      }
    }
    else
    {
      uint64_t v97 = (uint64_t)v94 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
      MEMORY[0x1F4188790](v68);
      long long v71 = (char *)((char *)v94 - v104);
      sub_1A675B090((uint64_t)v65, (char *)v94 - v104, &qword_1E96C1570);
      uint64_t v72 = v110;
      uint64_t v73 = v67((char *)v114, 1, v110);
      if (v73 != 1)
      {
        unint64_t v104 = (char *)v94;
        MEMORY[0x1F4188790](v73);
        uint64_t v101 = v65;
        unint64_t v76 = v71;
        unint64_t v77 = (char *)v94 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0);
        v99(v77, v114, v72);
        sub_1A6761A7C(&qword_1E96C1D28, MEMORY[0x1F418BDA8]);
        char v78 = sub_1A6891FC0();
        uint64_t v79 = *(void (**)(char *, uint64_t))(v52 + 8);
        v79(v77, v72);
        sub_1A6750210(v97, &qword_1E96C1570);
        sub_1A6750210((uint64_t)v59, &qword_1E96C1570);
        v79(v108, v72);
        v79(v76, v72);
        sub_1A6750210((uint64_t)v101, &qword_1E96C1570);
        uint64_t v8 = v98;
        uint64_t v11 = v102;
        uint64_t v32 = v122;
        uint64_t v47 = v117;
        uint64_t v35 = v105;
        if (v78) {
          goto LABEL_32;
        }
LABEL_30:
        (*v96)(v111, v8);
        (*v115)(v45, 1, 1, v8);
LABEL_33:
        uint64_t v7 = v103;
        goto LABEL_34;
      }
      sub_1A6750210(v97, &qword_1E96C1570);
      sub_1A6750210((uint64_t)v59, &qword_1E96C1570);
      uint64_t v74 = *(void (**)(char *, uint64_t))(v52 + 8);
      v74(v108, v72);
      v74(v71, v72);
      uint64_t v11 = v102;
    }
    sub_1A6750210((uint64_t)v65, &qword_1E96C1590);
    uint64_t v8 = v98;
    uint64_t v32 = v122;
    uint64_t v47 = v117;
    uint64_t v35 = v105;
    goto LABEL_30;
  }
  swift_bridgeObjectRelease();
LABEL_38:
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v80 = sub_1A6891A40();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v80 - 8) + 16))(v36, v32, v80);
}

id TTSAXResource.primaryLocales.getter()
{
  id result = objc_msgSend(v0, sel_languages);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = sub_1A68922E0();

    uint64_t v4 = MEMORY[0x1E4FBC860];
    uint64_t v21 = (char *)MEMORY[0x1E4FBC860];
    uint64_t v5 = *(void *)(v3 + 16);
    if (v5)
    {
      swift_bridgeObjectRetain();
      uint64_t v6 = (uint64_t *)(v3 + 40);
      do
      {
        uint64_t v7 = *v6;
        v20[0] = *(v6 - 1);
        v20[1] = v7;
        sub_1A675D780(&v21, v20, &v19);
        swift_bridgeObjectRelease();
        uint64_t v8 = v19;
        uint64_t v21 = v19;
        v6 += 2;
        --v5;
      }
      while (v5);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v8 = (char *)MEMORY[0x1E4FBC860];
    }
    swift_bridgeObjectRelease();
    int64_t v9 = *((void *)v8 + 2);
    if (v9)
    {
      v20[0] = v4;
      sub_1A675FF34(0, v9, 0);
      uint64_t v10 = v20[0];
      uint64_t v11 = sub_1A6891A40();
      uint64_t v18 = v11;
      uint64_t v12 = *(void *)(v11 - 8);
      uint64_t v13 = *(void *)(v12 + 64);
      v17[1] = v12 + 32;
      uint64_t v14 = v8 + 40;
      do
      {
        MEMORY[0x1F4188790](v11);
        swift_bridgeObjectRetain();
        sub_1A6891900();
        v20[0] = v10;
        unint64_t v16 = *(void *)(v10 + 16);
        unint64_t v15 = *(void *)(v10 + 24);
        if (v16 >= v15 >> 1)
        {
          sub_1A675FF34(v15 > 1, v16 + 1, 1);
          uint64_t v10 = v20[0];
        }
        v14 += 16;
        *(void *)(v10 + 16) = v16 + 1;
        uint64_t v11 = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v12 + 32))(v10+ ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(void *)(v12 + 72) * v16, (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v18);
        --v9;
      }
      while (v9);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      return (id)MEMORY[0x1E4FBC860];
    }
    return (id)v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1A675D780@<X0>(char **a1@<X0>, uint64_t *a2@<X1>, char **a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v6 = *a1;
  uint64_t v8 = *a2;
  uint64_t v7 = a2[1];
  if (qword_1EB67AA38 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_1EB67AA30;
  if (*(void *)(qword_1EB67AA30 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v10 = sub_1A673F7AC(v8, v7);
    if (v11)
    {
      uint64_t v12 = *(void *)(*(void *)(v9 + 56) + 8 * v10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      uint64_t result = sub_1A6760268(v12);
      *a3 = v6;
      return result;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v44 = a3;
  uint64_t v42 = sub_1A6891830();
  uint64_t v43 = v40;
  uint64_t v47 = *(void *)(v42 - 8);
  MEMORY[0x1F4188790](v42);
  unint64_t v15 = (char *)v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  uint64_t v46 = v15;
  sub_1A6891820();
  uint64_t v16 = sub_1A6741AD0(&qword_1EB67A210);
  uint64_t v45 = v40;
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v18 = (char *)v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_1A68919E0();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)v40 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  uint64_t v41 = v8;
  sub_1A68919A0();
  sub_1A68919C0();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  uint64_t v23 = sub_1A68918D0();
  uint64_t v24 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v18, 1, v23) == 1)
  {
    sub_1A6750210((uint64_t)v18, &qword_1EB67A210);
LABEL_13:
    uint64_t v30 = v44;
    uint64_t v31 = v42;
    goto LABEL_14;
  }
  v40[1] = v4;
  uint64_t v25 = sub_1A6891890();
  uint64_t v27 = v26;
  (*(void (**)(char *, uint64_t))(v24 + 8))(v18, v23);
  uint64_t v28 = qword_1EB67AA30;
  if (!*(void *)(qword_1EB67AA30 + 16))
  {
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  unint64_t v29 = sub_1A673F7AC(v25, v27);
  uint64_t v30 = v44;
  uint64_t v31 = v42;
  if (v32)
  {
    uint64_t v33 = *(void *)(*(void *)(v28 + 56) + 8 * v29);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v34 = (uint64_t)v46;
    uint64_t v35 = sub_1A675BF9C(v33, (uint64_t)v46);
    swift_bridgeObjectRelease();
    uint64_t v48 = v6;
    swift_bridgeObjectRetain();
    sub_1A6760268(v35);
    uint64_t v36 = v47;
    *uint64_t v30 = v48;
    return (*(uint64_t (**)(uint64_t, uint64_t))(v36 + 8))(v34, v31);
  }
  swift_bridgeObjectRelease();
LABEL_14:
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = sub_1A6757B94(0, *((void *)v6 + 2) + 1, 1, v6);
  }
  unint64_t v38 = *((void *)v6 + 2);
  unint64_t v37 = *((void *)v6 + 3);
  if (v38 >= v37 >> 1) {
    uint64_t v6 = sub_1A6757B94((char *)(v37 > 1), v38 + 1, 1, v6);
  }
  *((void *)v6 + 2) = v38 + 1;
  uint64_t v39 = &v6[16 * v38];
  *((void *)v39 + 4) = v41;
  *((void *)v39 + 5) = v7;
  swift_bridgeObjectRelease();
  *uint64_t v30 = v6;
  return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v46, v31);
}

void TTSAXResource.secondaryLocales.getter()
{
  id v1 = objc_msgSend(v0, sel_synthesisProviderVoice);
  id v2 = objc_msgSend(v1, sel_supportedLanguages);

  uint64_t v3 = sub_1A68922E0();
  uint64_t v4 = sub_1A67610CC(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  id v5 = objc_msgSend(v0, sel_synthesisProviderVoice);
  id v6 = objc_msgSend(v5, sel_primaryLanguages);

  uint64_t v7 = sub_1A68922E0();
  uint64_t v8 = sub_1A6760528(v7, v4);
  swift_bridgeObjectRelease();
  uint64_t v54 = v8;
  id v9 = objc_msgSend(v0, sel_synthesisProviderVoice);
  LODWORD(v7) = objc_msgSend(v9, sel_isFirstParty);

  if (v7)
  {
    int64_t v10 = 0;
    uint64_t v11 = v4 + 56;
    uint64_t v12 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v13 = -1;
    if (v12 < 64) {
      uint64_t v13 = ~(-1 << v12);
    }
    unint64_t v14 = v13 & *(void *)(v4 + 56);
    int64_t v52 = (unint64_t)(v12 + 63) >> 6;
    while (1)
    {
      if (v14)
      {
        unint64_t v15 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        unint64_t v16 = v15 | (v10 << 6);
      }
      else
      {
        int64_t v17 = v10 + 1;
        if (__OFADD__(v10, 1)) {
          goto LABEL_48;
        }
        if (v17 >= v52)
        {
LABEL_33:
          swift_release();
          goto LABEL_34;
        }
        unint64_t v18 = *(void *)(v11 + 8 * v17);
        ++v10;
        if (!v18)
        {
          int64_t v10 = v17 + 1;
          if (v17 + 1 >= v52) {
            goto LABEL_33;
          }
          unint64_t v18 = *(void *)(v11 + 8 * v10);
          if (!v18)
          {
            int64_t v10 = v17 + 2;
            if (v17 + 2 >= v52) {
              goto LABEL_33;
            }
            unint64_t v18 = *(void *)(v11 + 8 * v10);
            if (!v18)
            {
              int64_t v19 = v17 + 3;
              if (v19 >= v52) {
                goto LABEL_33;
              }
              unint64_t v18 = *(void *)(v11 + 8 * v19);
              if (!v18)
              {
                while (1)
                {
                  int64_t v10 = v19 + 1;
                  if (__OFADD__(v19, 1)) {
                    goto LABEL_49;
                  }
                  if (v10 >= v52) {
                    goto LABEL_33;
                  }
                  unint64_t v18 = *(void *)(v11 + 8 * v10);
                  ++v19;
                  if (v18) {
                    goto LABEL_21;
                  }
                }
              }
              int64_t v10 = v19;
            }
          }
        }
LABEL_21:
        unint64_t v14 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v10 << 6);
      }
      uint64_t v20 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v16);
      uint64_t v21 = *v20;
      uint64_t v22 = v20[1];
      uint64_t v23 = qword_1EB67AA48;
      swift_bridgeObjectRetain();
      if (v23 != -1) {
        swift_once();
      }
      uint64_t v24 = qword_1EB67AA40;
      if (*(void *)(qword_1EB67AA40 + 16))
      {
        unint64_t v25 = sub_1A673F7AC(v21, v22);
        uint64_t v26 = MEMORY[0x1E4FBC860];
        if (v27)
        {
          uint64_t v26 = *(void *)(*(void *)(v24 + 56) + 8 * v25);
          swift_bridgeObjectRetain();
        }
      }
      else
      {
        uint64_t v26 = MEMORY[0x1E4FBC860];
      }
      swift_bridgeObjectRelease();
      uint64_t v28 = *(void *)(v26 + 16);
      if (v28)
      {
        unint64_t v29 = (uint64_t *)(v26 + 40);
        do
        {
          uint64_t v30 = *(v29 - 1);
          uint64_t v31 = *v29;
          swift_bridgeObjectRetain();
          sub_1A675E4B8(&v53, v30, v31);
          swift_bridgeObjectRelease();
          v29 += 2;
          --v28;
        }
        while (v28);
      }
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
LABEL_34:
  uint64_t v32 = v54;
  int64_t v33 = *(void *)(v54 + 16);
  if (v33)
  {
    uint64_t v53 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    sub_1A675FF34(0, v33, 0);
    uint64_t v34 = v53;
    int64_t v35 = sub_1A674CD14(v32);
    int v37 = v36;
    char v39 = v38 & 1;
    uint64_t v51 = v32 + 56;
    uint64_t v40 = sub_1A6891A40();
    uint64_t v50 = v40;
    uint64_t v41 = *(void *)(v40 - 8);
    int64_t v52 = *(void *)(v41 + 64);
    uint64_t v48 = v41 + 32;
    uint64_t v49 = v41;
    while (1)
    {
      MEMORY[0x1F4188790](v40);
      uint64_t v43 = (char *)&v48 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
      if (v35 < 0 || v35 >= 1 << *(unsigned char *)(v32 + 32)) {
        break;
      }
      if (((*(void *)(v51 + (((unint64_t)v35 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v35) & 1) == 0) {
        goto LABEL_46;
      }
      if (*(_DWORD *)(v32 + 36) != v37) {
        goto LABEL_47;
      }
      swift_bridgeObjectRetain();
      sub_1A6891900();
      uint64_t v53 = v34;
      unint64_t v45 = *(void *)(v34 + 16);
      unint64_t v44 = *(void *)(v34 + 24);
      if (v45 >= v44 >> 1)
      {
        sub_1A675FF34(v44 > 1, v45 + 1, 1);
        uint64_t v34 = v53;
      }
      *(void *)(v34 + 16) = v45 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v49 + 32))(v34+ ((*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80))+ *(void *)(v49 + 72) * v45, v43, v50);
      uint64_t v40 = sub_1A674CDB4(v35, v37, v39 & 1, v32);
      int64_t v35 = v40;
      int v37 = v46;
      char v39 = v47 & 1;
      if (!--v33)
      {
        sub_1A674CE98(v40, v46, v47 & 1);
        swift_bridgeObjectRelease_n();
        return;
      }
    }
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1A675E184(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  if (qword_1E96C4020 != -1) {
    swift_once();
  }
  uint64_t v3 = qword_1E96C4018;
  if (!*(void *)(qword_1E96C4018 + 16)) {
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_1A673F7AC(v2, v1);
  if ((v5 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_12:
    sub_1A6891890();
    goto LABEL_13;
  }
  id v6 = (uint64_t *)(*(void *)(v3 + 56) + 16 * v4);
  uint64_t v8 = *v6;
  uint64_t v7 = v6[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = sub_1A6891890();
  if (!v7)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return 0;
  }
  if (v8 == v9 && v7 == v10)
  {
    swift_bridgeObjectRelease_n();
    return 1;
  }
  else
  {
    char v12 = sub_1A6893120();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v12 & 1;
  }
}

unint64_t sub_1A675E2B8(uint64_t a1)
{
  sub_1A68918D0();
  sub_1A6761A7C(&qword_1E96C1568, MEMORY[0x1F418BD58]);
  uint64_t v2 = sub_1A6891F10();

  return sub_1A675E338(a1, v2);
}

unint64_t sub_1A675E338(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = a1;
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  uint64_t v15 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v14 = ~v3;
    uint64_t v5 = sub_1A68918D0();
    uint64_t v6 = v5;
    uint64_t v7 = *(void **)(v5 - 8);
    uint64_t v8 = (void (*)(char *, unint64_t, uint64_t))v7[2];
    uint64_t v9 = v7[8];
    uint64_t v10 = v7[9];
    uint64_t v11 = (uint64_t (**)(char *, uint64_t))(v7 + 1);
    do
    {
      MEMORY[0x1F4188790](v5);
      v8((char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), *(void *)(v17 + 48) + v10 * v4, v6);
      sub_1A6761A7C(&qword_1E96C1550, MEMORY[0x1F418BD58]);
      char v12 = sub_1A6891FC0();
      uint64_t v5 = (*v11)((char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
      if (v12) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v14;
    }
    while (((*(void *)(v15 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

uint64_t sub_1A675E4B8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  sub_1A6893200();
  swift_bridgeObjectRetain();
  sub_1A68920F0();
  uint64_t v8 = sub_1A6893250();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    char v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_1A6893120() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = (uint64_t *)(*(void *)(*v3 + 48) + 16 * v10);
      uint64_t v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      unint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_1A6893120() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  uint64_t *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_1A675F048(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  uint64_t *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_1A675E668(char *a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = sub_1A68918D0();
  sub_1A6761A7C(&qword_1E96C1568, MEMORY[0x1F418BD58]);
  swift_bridgeObjectRetain();
  int v37 = a2;
  uint64_t v8 = sub_1A6891F10();
  uint64_t v9 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v10 = v8 & ~v9;
  uint64_t v34 = v6 + 56;
  uint64_t v11 = v7 - 8;
  if ((*(void *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v30 = v2;
    uint64_t v31 = a1;
    uint64_t v32 = ~v9;
    char v12 = *(void **)v11;
    v28[1] = v11 & 0xFFFFFFFFFFFFLL | 0x2E3F000000000000;
    unint64_t v29 = v12;
    BOOL v13 = (void (*)(char *, unint64_t, uint64_t))v12[2];
    int64_t v35 = v12 + 2;
    int v36 = v13;
    uint64_t v14 = v12[8];
    uint64_t v33 = v12[9];
    uint64_t v15 = (uint64_t (**)(char *, uint64_t))(v12 + 1);
    while (1)
    {
      MEMORY[0x1F4188790](v8);
      uint64_t v16 = v6;
      uint64_t v17 = *(void *)(v6 + 48);
      unint64_t v18 = v33 * v10;
      v36((char *)v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v17 + v33 * v10, v7);
      sub_1A6761A7C(&qword_1E96C1550, MEMORY[0x1F418BD58]);
      char v19 = sub_1A6891FC0();
      uint64_t v20 = *v15;
      uint64_t v8 = (*v15)((char *)v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
      if (v19) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v32;
      uint64_t v6 = v16;
      if (((*(void *)(v34 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v30;
        a1 = v31;
        uint64_t v21 = v29;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v20(v37, v7);
    v36(v31, *(void *)(*v30 + 48) + v18, v7);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v21 = *(void **)v11;
LABEL_7:
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    char v23 = isUniquelyReferenced_nonNull_native;
    MEMORY[0x1F4188790](isUniquelyReferenced_nonNull_native);
    unint64_t v25 = (char *)v28 - v24;
    uint64_t v26 = v37;
    ((void (*)(char *, char *, uint64_t))v21[2])((char *)v28 - v24, v37, v7);
    uint64_t v38 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    sub_1A675F1E4((uint64_t)v25, v10, v23);
    uint64_t *v3 = v38;
    swift_bridgeObjectRelease();
    ((void (*)(char *, char *, uint64_t))v21[4])(a1, v26, v7);
    return 1;
  }
}

uint64_t sub_1A675E9A0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1A6741AD0((uint64_t *)&unk_1EB67A350);
  uint64_t v3 = sub_1A6892C00();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      char v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      sub_1A6893200();
      sub_1A68920F0();
      uint64_t result = sub_1A6893250();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      BOOL v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *BOOL v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_1A675EC80()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1A6741AD0(&qword_1E96C1D50);
  uint64_t v3 = sub_1A6892C00();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = *(void *)(v2 + 56);
    uint64_t v38 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & v6;
    int v36 = v0;
    int64_t v37 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v13 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        int64_t v40 = v11;
        unint64_t v14 = v13 | (v11 << 6);
      }
      else
      {
        int64_t v15 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v37) {
          goto LABEL_33;
        }
        unint64_t v16 = v38[v15];
        int64_t v17 = v11 + 1;
        if (!v16)
        {
          int64_t v17 = v11 + 2;
          if (v11 + 2 >= v37) {
            goto LABEL_33;
          }
          unint64_t v16 = v38[v17];
          if (!v16)
          {
            int64_t v17 = v11 + 3;
            if (v11 + 3 >= v37) {
              goto LABEL_33;
            }
            unint64_t v16 = v38[v17];
            if (!v16)
            {
              uint64_t v18 = v11 + 4;
              if (v11 + 4 >= v37)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v36;
                uint64_t v34 = 1 << *(unsigned char *)(v2 + 32);
                if (v34 > 63) {
                  bzero(v38, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v38 = -1 << v34;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v38[v18];
              if (!v16)
              {
                while (1)
                {
                  int64_t v17 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v17 >= v37) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v38[v17];
                  ++v18;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v17 = v11 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v8 = (v16 - 1) & v16;
        int64_t v40 = v17;
        unint64_t v14 = __clz(__rbit64(v16)) + (v17 << 6);
      }
      uint64_t v19 = sub_1A68918D0();
      char v39 = &v35;
      uint64_t v20 = *(void *)(v19 - 8);
      MEMORY[0x1F4188790](v19);
      uint64_t v22 = (char *)&v35 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v23 = v2;
      uint64_t v24 = *(void *)(v2 + 48);
      char v25 = *(void (**)(char *, unint64_t, uint64_t))(v20 + 32);
      uint64_t v26 = *(void *)(v20 + 72);
      v25(v22, v24 + v26 * v14, v19);
      sub_1A6761A7C(&qword_1E96C1568, MEMORY[0x1F418BD58]);
      uint64_t result = sub_1A6891F10();
      uint64_t v27 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v9 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v28) & ~*(void *)(v9 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v9 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v12 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v25)(*(void *)(v4 + 48) + v12 * v26, v22, v19);
      ++*(void *)(v4 + 16);
      int64_t v11 = v40;
      uint64_t v2 = v23;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_1A675F048(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_1A675E9A0();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (uint64_t)sub_1A675F458();
      goto LABEL_22;
    }
    sub_1A675F8B4();
  }
  uint64_t v11 = *v4;
  sub_1A6893200();
  sub_1A68920F0();
  uint64_t result = sub_1A6893250();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    int64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = sub_1A6893120(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = sub_1A6893140();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = sub_1A6893120();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (uint64_t *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

uint64_t sub_1A675F1E4(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v29 = a1;
  unint64_t v5 = *(void *)(*v3 + 16);
  unint64_t v6 = *(void *)(*v3 + 24);
  if (v6 > v5 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_1A675EC80();
  }
  else
  {
    if (v6 > v5)
    {
      sub_1A675F60C();
      goto LABEL_12;
    }
    sub_1A675FB64();
  }
  uint64_t v7 = *v3;
  uint64_t v8 = sub_1A68918D0();
  sub_1A6761A7C(&qword_1E96C1568, MEMORY[0x1F418BD58]);
  uint64_t v9 = sub_1A6891F10();
  uint64_t v10 = -1 << *(unsigned char *)(v7 + 32);
  a2 = v9 & ~v10;
  uint64_t v27 = v7 + 56;
  uint64_t v28 = v7;
  if ((*(void *)(v7 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v26 = ~v10;
    uint64_t v11 = *(void **)(v8 - 8);
    uint64_t v12 = (void (*)(char *, unint64_t, uint64_t))v11[2];
    uint64_t v13 = v11[8];
    uint64_t v14 = v11[9];
    int64_t v15 = (uint64_t (**)(char *, uint64_t))(v11 + 1);
    do
    {
      MEMORY[0x1F4188790](v9);
      v12((char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), *(void *)(v28 + 48) + v14 * a2, v8);
      sub_1A6761A7C(&qword_1E96C1550, MEMORY[0x1F418BD58]);
      char v16 = sub_1A6891FC0();
      uint64_t v9 = (*v15)((char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
      if (v16) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v26;
    }
    while (((*(void *)(v27 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v17 = *v25;
  *(void *)(*v25 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t v18 = *(void *)(v17 + 48);
  uint64_t v19 = sub_1A68918D0();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32))(v18 + *(void *)(*(void *)(v19 - 8) + 72) * a2, v29, v19);
  uint64_t v21 = *(void *)(v17 + 16);
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (!v22)
  {
    *(void *)(v17 + 16) = v23;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = sub_1A6893140();
  __break(1u);
  return result;
}

void *sub_1A675F458()
{
  uint64_t v1 = v0;
  sub_1A6741AD0((uint64_t *)&unk_1EB67A350);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1A6892BF0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1A675F60C()
{
  uint64_t v1 = v0;
  sub_1A6741AD0(&qword_1E96C1D50);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1A6892BF0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_30:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  unint64_t v6 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  uint64_t v24 = v1;
  char v25 = (const void *)(v2 + 56);
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v6) {
    uint64_t result = memmove(result, v25, 8 * v6);
  }
  int64_t v8 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v9 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & *(void *)(v2 + 56);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v8 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v21 >= v12) {
      goto LABEL_28;
    }
    unint64_t v22 = *((void *)v25 + v21);
    ++v8;
    if (!v22)
    {
      int64_t v8 = v21 + 1;
      if (v21 + 1 >= v12) {
        goto LABEL_28;
      }
      unint64_t v22 = *((void *)v25 + v8);
      if (!v22)
      {
        int64_t v8 = v21 + 2;
        if (v21 + 2 >= v12) {
          goto LABEL_28;
        }
        unint64_t v22 = *((void *)v25 + v8);
        if (!v22) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v11 = (v22 - 1) & v22;
    unint64_t v14 = __clz(__rbit64(v22)) + (v8 << 6);
LABEL_12:
    uint64_t v15 = sub_1A68918D0();
    uint64_t v16 = *(void *)(v15 - 8);
    MEMORY[0x1F4188790](v15);
    uint64_t v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
    unint64_t v20 = *(void *)(v19 + 72) * v14;
    (*(void (**)(char *, unint64_t, uint64_t))(v16 + 16))(v18, *(void *)(v2 + 48) + v20, v15);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v16 + 32))(*(void *)(v4 + 48) + v20, v18, v15);
  }
  int64_t v23 = v21 + 3;
  if (v23 >= v12)
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v24;
    goto LABEL_30;
  }
  unint64_t v22 = *((void *)v25 + v23);
  if (v22)
  {
    int64_t v8 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v8 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v8 >= v12) {
      goto LABEL_28;
    }
    unint64_t v22 = *((void *)v25 + v8);
    ++v23;
    if (v22) {
      goto LABEL_27;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_1A675F8B4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1A6741AD0((uint64_t *)&unk_1EB67A350);
  uint64_t v3 = sub_1A6892C00();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    sub_1A6893200();
    swift_bridgeObjectRetain();
    sub_1A68920F0();
    uint64_t result = sub_1A6893250();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *unint64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1A675FB64()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1A6741AD0(&qword_1E96C1D50);
  uint64_t v3 = sub_1A6892C00();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = *(void *)(v2 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & v6;
  int64_t v36 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v36) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v35 + 8 * v15);
    ++v11;
    if (!v16)
    {
      int64_t v11 = v15 + 1;
      if (v15 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v35 + 8 * v11);
      if (!v16)
      {
        int64_t v11 = v15 + 2;
        if (v15 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v35 + 8 * v11);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    uint64_t v18 = sub_1A68918D0();
    int64_t v37 = &v34;
    uint64_t v19 = *(void *)(v18 - 8);
    MEMORY[0x1F4188790](v18);
    uint64_t v21 = (char *)&v34 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v23 = v22;
    uint64_t v24 = v2;
    uint64_t v25 = *(void *)(v2 + 48);
    uint64_t v26 = *(void *)(v23 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v19 + 16))(v21, v25 + v26 * v14, v18);
    sub_1A6761A7C(&qword_1E96C1568, MEMORY[0x1F418BD58]);
    uint64_t result = sub_1A6891F10();
    uint64_t v27 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v28 = result & ~v27;
    unint64_t v29 = v28 >> 6;
    if (((-1 << v28) & ~*(void *)(v9 + 8 * (v28 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v28) & ~*(void *)(v9 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v30 = 0;
      unint64_t v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v32 = v29 == v31;
        if (v29 == v31) {
          unint64_t v29 = 0;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v9 + 8 * v29);
      }
      while (v33 == -1);
      unint64_t v12 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v19 + 32))(*(void *)(v4 + 48) + v12 * v26, v21, v18);
    ++*(void *)(v4 + 16);
    uint64_t v2 = v24;
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v35 + 8 * v17);
  if (v16)
  {
    int64_t v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v11 >= v36) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v35 + 8 * v11);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

size_t sub_1A675FF04(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_1A675FF64(a1, a2, a3, (void *)*v3, &qword_1E96C1D58, MEMORY[0x1F418BD50]);
  size_t *v3 = result;
  return result;
}

size_t sub_1A675FF34(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_1A675FF64(a1, a2, a3, (void *)*v3, &qword_1EB67A378, MEMORY[0x1F418BE38]);
  size_t *v3 = result;
  return result;
}

size_t sub_1A675FF64(size_t result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  char v8 = result;
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    unint64_t v16 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  sub_1A6741AD0(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v16 = (void *)swift_allocObject();
  size_t result = j__malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_29;
  }
  _DWORD v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(result - v15) / v14);
LABEL_19:
  uint64_t v18 = *(void *)(a6(0) - 8);
  if (v8)
  {
    if (v16 < a4
      || (unint64_t v19 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80),
          (char *)v16 + v19 >= (char *)a4 + v19 + *(void *)(v18 + 72) * v11))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (size_t)v16;
}

size_t sub_1A6760140(size_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  size_t v6 = result;
  size_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= v3[3] >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    int64_t v11 = v4 + v2;
  }
  else {
    int64_t v11 = v4;
  }
  size_t result = sub_1A6760354(result, v11, 1, v3);
  uint64_t v3 = (void *)result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  uint64_t v7 = (v3[3] >> 1) - v3[2];
  size_t result = type metadata accessor for TTSMacroLanguageDisambiguationMapping();
  if (v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  size_t result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    size_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v8 = v3[2];
  BOOL v9 = __OFADD__(v8, v2);
  uint64_t v10 = v8 + v2;
  if (!v9)
  {
    _DWORD v3[2] = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1A6760268(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  size_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    int64_t v10 = v4 + v2;
  }
  else {
    int64_t v10 = v4;
  }
  size_t result = (uint64_t)sub_1A6757B94((char *)result, v10, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  size_t result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    size_t result = swift_bridgeObjectRelease();
    uint64_t *v1 = v3;
    return result;
  }
  uint64_t v7 = *(void *)(v3 + 16);
  BOOL v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

size_t sub_1A6760354(size_t result, int64_t a2, char a3, void *a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  sub_1A6741AD0(&qword_1E96C1D30);
  uint64_t v10 = *(void *)(type metadata accessor for TTSMacroLanguageDisambiguationMapping() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t result = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_29;
  }
  _OWORD v13[2] = v8;
  void v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  uint64_t v15 = *(void *)(type metadata accessor for TTSMacroLanguageDisambiguationMapping() - 8);
  if (v5)
  {
    if (v13 < a4
      || (unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(void *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return (size_t)v13;
}

uint64_t sub_1A6760528(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(a2 + 16))
  {
    swift_release();
    return MEMORY[0x1E4FBC870];
  }
  uint64_t v26 = a1;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = a2 + 56;
    v25[0] = a1 + 32;
    swift_bridgeObjectRetain();
    uint64_t v5 = 0;
    while (1)
    {
      unint64_t v6 = (uint64_t *)(v25[0] + 16 * v5);
      uint64_t v8 = *v6;
      uint64_t v7 = v6[1];
      ++v5;
      sub_1A6893200();
      swift_bridgeObjectRetain();
      sub_1A68920F0();
      uint64_t v9 = sub_1A6893250();
      uint64_t v10 = -1 << *(unsigned char *)(v2 + 32);
      unint64_t v11 = v9 & ~v10;
      if ((*(void *)(v4 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11))
      {
        uint64_t v12 = *(void *)(v2 + 48);
        uint64_t v13 = (void *)(v12 + 16 * v11);
        BOOL v14 = *v13 == v8 && v13[1] == v7;
        if (v14 || (sub_1A6893120() & 1) != 0)
        {
          uint64_t isStackAllocationSafe = swift_bridgeObjectRelease();
          uint64_t v27 = v5;
LABEL_19:
          char v19 = *(unsigned char *)(v2 + 32);
          unint64_t v20 = (unint64_t)((1 << v19) + 63) >> 6;
          size_t v21 = 8 * v20;
          if ((v19 & 0x3Fu) < 0xE
            || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
          {
            MEMORY[0x1F4188790](isStackAllocationSafe);
            memcpy((char *)v25 - ((v21 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v21);
            uint64_t v22 = sub_1A676083C((uint64_t)v25 - ((v21 + 15) & 0x3FFFFFFFFFFFFFF0), v20, v2, v11, &v26);
            swift_release();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v23 = (void *)swift_slowAlloc();
            memcpy(v23, (const void *)(v2 + 56), v21);
            uint64_t v22 = sub_1A676083C((uint64_t)v23, v20, v2, v11, &v26);
            swift_release();
            swift_bridgeObjectRelease();
            MEMORY[0x1AD0C1C50](v23, -1, -1);
          }
          return v22;
        }
        uint64_t v15 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v15;
          if (((*(void *)(v4 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
            break;
          }
          unint64_t v16 = (void *)(v12 + 16 * v11);
          BOOL v17 = *v16 == v8 && v16[1] == v7;
          if (v17 || (sub_1A6893120() & 1) != 0)
          {
            uint64_t v27 = v5;
            uint64_t isStackAllocationSafe = swift_bridgeObjectRelease();
            goto LABEL_19;
          }
        }
      }
      swift_bridgeObjectRelease();
      if (v5 == v3)
      {
        swift_bridgeObjectRelease();
        return v2;
      }
    }
  }
  return v2;
}

uint64_t sub_1A676083C(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v6 = *(void *)(a3 + 16);
  *(void *)(result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  char v30 = (unint64_t *)result;
  uint64_t v31 = v6 - 1;
  uint64_t v8 = *a5;
  unint64_t v7 = a5[1];
  unint64_t v9 = *(void *)(*a5 + 16);
  if (v7 == v9)
  {
LABEL_2:
    swift_retain();
    return sub_1A6760A68(v30, a2, v31, a3);
  }
  uint64_t v32 = a3 + 56;
  while ((v7 & 0x8000000000000000) == 0)
  {
    if (v7 >= v9) {
      goto LABEL_29;
    }
    uint64_t v11 = v8 + 16 * v7;
    uint64_t v13 = *(void *)(v11 + 32);
    uint64_t v12 = *(void *)(v11 + 40);
    a5[1] = v7 + 1;
    sub_1A6893200();
    swift_bridgeObjectRetain();
    sub_1A68920F0();
    uint64_t v14 = sub_1A6893250();
    uint64_t v15 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v16 = v14 & ~v15;
    unint64_t v17 = v16 >> 6;
    uint64_t v18 = 1 << v16;
    if (((1 << v16) & *(void *)(v32 + 8 * (v16 >> 6))) == 0) {
      goto LABEL_4;
    }
    uint64_t v19 = *(void *)(a3 + 48);
    unint64_t v20 = (void *)(v19 + 16 * v16);
    BOOL v21 = *v20 == v13 && v20[1] == v12;
    if (!v21 && (sub_1A6893120() & 1) == 0)
    {
      uint64_t v24 = ~v15;
      for (unint64_t i = v16 + 1; ; unint64_t i = v26 + 1)
      {
        unint64_t v26 = i & v24;
        if (((*(void *)(v32 + (((i & v24) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v24)) & 1) == 0) {
          break;
        }
        uint64_t v27 = (void *)(v19 + 16 * v26);
        BOOL v28 = *v27 == v13 && v27[1] == v12;
        if (v28 || (sub_1A6893120() & 1) != 0)
        {
          size_t result = swift_bridgeObjectRelease();
          unint64_t v17 = v26 >> 6;
          uint64_t v18 = 1 << v26;
          goto LABEL_15;
        }
      }
LABEL_4:
      size_t result = swift_bridgeObjectRelease();
      goto LABEL_5;
    }
    size_t result = swift_bridgeObjectRelease();
LABEL_15:
    unint64_t v22 = v30[v17];
    v30[v17] = v22 & ~v18;
    if ((v18 & v22) != 0)
    {
      uint64_t v23 = v31 - 1;
      if (__OFSUB__(v31, 1)) {
        goto LABEL_30;
      }
      --v31;
      if (!v23) {
        return MEMORY[0x1E4FBC870];
      }
    }
LABEL_5:
    uint64_t v8 = *a5;
    unint64_t v7 = a5[1];
    unint64_t v9 = *(void *)(*a5 + 16);
    if (v7 == v9) {
      goto LABEL_2;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1A6760A68(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v8 = MEMORY[0x1E4FBC870];
LABEL_36:
    swift_release();
    return v8;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_1A6741AD0((uint64_t *)&unk_1EB67A350);
  uint64_t result = sub_1A6892C10();
  uint64_t v8 = result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_39;
    }
    if (v14 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v30) {
        goto LABEL_36;
      }
      unint64_t v15 = a1[v10];
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v30) {
          goto LABEL_36;
        }
        unint64_t v15 = a1[v10];
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    unint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    sub_1A6893200();
    swift_bridgeObjectRetain();
    sub_1A68920F0();
    uint64_t result = sub_1A6893250();
    uint64_t v20 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    BOOL v28 = (void *)(*(void *)(v8 + 48) + 16 * v23);
    *BOOL v28 = v18;
    v28[1] = v19;
    ++*(void *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5) {
      goto LABEL_36;
    }
  }
  uint64_t v16 = v14 + 3;
  if (v16 >= v30) {
    goto LABEL_36;
  }
  unint64_t v15 = a1[v16];
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_1A6760D00(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = sub_1A68918D0();
  sub_1A6761A7C(&qword_1E96C1568, MEMORY[0x1F418BD58]);
  uint64_t v23 = sub_1A6892700();
  uint64_t v4 = sub_1A6741AD0(&qword_1EB67A210);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[0] = *(void *)(v3 - 8);
  v17[1] = v3 - 8;
  if (v2)
  {
    uint64_t v7 = v17[0];
    uint64_t v8 = a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    uint64_t v18 = *(void *)(v17[0] + 72);
    unint64_t v22 = (void (**)(char *, void, uint64_t, uint64_t))(v17[0] + 56);
    unint64_t v9 = *(void (**)(char *, uint64_t, uint64_t))(v17[0] + 16);
    uint64_t v20 = v17[0] + 16;
    unint64_t v21 = v9;
    uint64_t v19 = (uint64_t (**)(char *, uint64_t, uint64_t))(v17[0] + 48);
    void v17[2] = v17[0] + 8;
    void v17[3] = v17[0] + 32;
    while (1)
    {
      v21(v6, v8, v3);
      (*v22)(v6, 0, 1, v3);
      uint64_t v10 = (*v19)(v6, 1, v3);
      if (v10 == 1) {
        break;
      }
      uint64_t v11 = MEMORY[0x1F4188790](v10);
      unint64_t v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
      MEMORY[0x1F4188790](v11);
      unint64_t v15 = (char *)v17 - v14;
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))((char *)v17 - v14, v6, v3);
      sub_1A675E668(v13, v15);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v3);
      v8 += v18;
      if (!--v2) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17[0] + 56))(v6, 1, 1, v3);
  }
  return v23;
}

uint64_t type metadata accessor for TTSMacroLanguageDisambiguationMapping()
{
  uint64_t result = qword_1E96C4028;
  if (!qword_1E96C4028) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1A676100C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TTSMacroLanguageDisambiguationMapping();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A6761070(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TTSMacroLanguageDisambiguationMapping();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1A67610CC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = sub_1A6892700();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain();
      sub_1A675E4B8(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TTSMacroLanguageDisambiguationMapping(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v9 = sub_1A68918D0();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      swift_retain();
    }
    else
    {
      uint64_t v10 = sub_1A6891960();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
      uint64_t v11 = *(int *)(sub_1A6741AD0(&qword_1E96C1D20) + 48);
      uint64_t v12 = (char *)a1 + v11;
      unint64_t v13 = (char *)a2 + v11;
      uint64_t v14 = sub_1A68918D0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for TTSMacroLanguageDisambiguationMapping(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
LABEL_5:
    uint64_t v4 = sub_1A68918D0();
    int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
    return v5(a1, v4);
  }
  if (result != 1)
  {
    if (result) {
      return result;
    }
    uint64_t v3 = sub_1A6891960();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
    a1 += *(int *)(sub_1A6741AD0(&qword_1E96C1D20) + 48);
    goto LABEL_5;
  }

  return swift_release();
}

void *initializeWithCopy for TTSMacroLanguageDisambiguationMapping(void *a1, void *a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v6 = sub_1A68918D0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1A6891960();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(sub_1A6741AD0(&qword_1E96C1D20) + 48);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_1A68918D0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for TTSMacroLanguageDisambiguationMapping(void *a1, void *a2)
{
  if (a1 != a2)
  {
    sub_1A6761070((uint64_t)a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v6 = sub_1A68918D0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v5 = a2[1];
      *a1 = *a2;
      a1[1] = v5;
      swift_retain();
    }
    else
    {
      uint64_t v7 = sub_1A6891960();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      uint64_t v8 = *(int *)(sub_1A6741AD0(&qword_1E96C1D20) + 48);
      uint64_t v9 = (char *)a1 + v8;
      uint64_t v10 = (char *)a2 + v8;
      uint64_t v11 = sub_1A68918D0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *initializeWithTake for TTSMacroLanguageDisambiguationMapping(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v12 = sub_1A68918D0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(a1, a2, v12);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v7 = sub_1A6891960();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    uint64_t v8 = *(int *)(sub_1A6741AD0(&qword_1E96C1D20) + 48);
    uint64_t v9 = &a1[v8];
    uint64_t v10 = &a2[v8];
    uint64_t v11 = sub_1A68918D0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *assignWithTake for TTSMacroLanguageDisambiguationMapping(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1A6761070((uint64_t)a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v12 = sub_1A68918D0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(a1, a2, v12);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v7 = sub_1A6891960();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      uint64_t v8 = *(int *)(sub_1A6741AD0(&qword_1E96C1D20) + 48);
      uint64_t v9 = &a1[v8];
      uint64_t v10 = &a2[v8];
      uint64_t v11 = sub_1A68918D0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_1A6761990()
{
  uint64_t result = sub_1A6891960();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_1A68918D0();
    if (v2 <= 0x3F)
    {
      uint64_t v3 = *(void *)(result - 8) + 64;
      swift_getTupleTypeLayout2();
      uint64_t v5 = &v4;
      uint64_t v6 = MEMORY[0x1E4FBC858] + 64;
      uint64_t v7 = v3;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t sub_1A6761A7C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t TTSMarkup.Language.init(_:)@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v27 = MEMORY[0x1E4FBC860];
  char v4 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v5 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0xE8))();
  if (!*(void *)(v5 + 16) || (unint64_t v6 = sub_1A673F7AC(0x676E616C3A6C6D78, 0xE800000000000000), (v7 & 1) == 0))
  {

    uint64_t result = swift_bridgeObjectRelease();
    a2[2] = 0u;
    a2[3] = 0u;
    *a2 = 0u;
    a2[1] = 0u;
    return result;
  }
  uint64_t v8 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v6);
  uint64_t v10 = *v8;
  uint64_t v9 = v8[1];
  swift_bridgeObjectRetain();
  uint64_t v11 = swift_bridgeObjectRelease();
  v28[5] = v10;
  v28[6] = v9;
  unint64_t v12 = (*(uint64_t (**)(uint64_t))((*v4 & *a1) + 0x100))(v11);
  unint64_t v13 = v12;
  if (!(v12 >> 62))
  {
    uint64_t v14 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v14) {
      goto LABEL_5;
    }
LABEL_20:
    unint64_t v17 = (void *)MEMORY[0x1E4FBC860];
LABEL_21:
    swift_bridgeObjectRelease_n();
    uint64_t v25 = sub_1A6741AD0(&qword_1E96C1D60);
    BOOL v26 = &protocol witness table for <A> [A];

    *(void *)&long long v24 = v17;
    sub_1A673E770(&v24, (uint64_t)v28);
    sub_1A67580D4((uint64_t)&v27, (uint64_t)a2);
    return sub_1A6762054((uint64_t)&v27);
  }
  swift_bridgeObjectRetain();
  uint64_t result = sub_1A6892EB0();
  uint64_t v14 = result;
  if (!result) {
    goto LABEL_20;
  }
LABEL_5:
  if (v14 >= 1)
  {
    uint64_t v16 = 0;
    unint64_t v17 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      if ((v13 & 0xC000000000000001) != 0) {
        id v18 = (id)MEMORY[0x1AD0BFD30](v16, v13);
      }
      else {
        id v18 = *(id *)(v13 + 8 * v16 + 32);
      }
      uint64_t v19 = v18;
      sub_1A677BA04((uint64_t)&v22);

      if (v23)
      {
        sub_1A673E770(&v22, (uint64_t)&v24);
        sub_1A673E770(&v24, (uint64_t)&v22);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v17 = sub_1A676207C(0, v17[2] + 1, 1, v17);
        }
        unint64_t v21 = v17[2];
        unint64_t v20 = v17[3];
        if (v21 >= v20 >> 1) {
          unint64_t v17 = sub_1A676207C((void *)(v20 > 1), v21 + 1, 1, v17);
        }
        void v17[2] = v21 + 1;
        sub_1A673E770(&v22, (uint64_t)&v17[5 * v21 + 4]);
      }
      else
      {
        sub_1A6761FF4((uint64_t)&v22);
      }
      ++v16;
    }
    while (v14 != v16);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

void static TTSMarkup.Language.tag.getter(unsigned char *a1@<X8>)
{
  *a1 = 9;
}

uint64_t TTSMarkup.Language.eventTaps.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t TTSMarkup.Language.eventTaps.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v1 = a1;
  return result;
}

uint64_t (*TTSMarkup.Language.eventTaps.modify())()
{
  return nullsub_19;
}

uint64_t TTSMarkup.Language._content.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1A673E788(v1 + 8, a1);
}

uint64_t TTSMarkup.Language._content.setter(long long *a1)
{
  uint64_t v3 = v1 + 8;
  sub_1A6741A24(v3);

  return sub_1A673E770(a1, v3);
}

uint64_t (*TTSMarkup.Language._content.modify())()
{
  return nullsub_19;
}

uint64_t TTSMarkup.Language.content.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1A673E788(v1 + 8, a1);
}

uint64_t TTSMarkup.Language.accept<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t))(a3 + 88))(v3);
}

uint64_t TTSMarkup.Language.init(languageCode:speech:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, void *a4@<X8>)
{
  a4[6] = a1;
  *a4 = MEMORY[0x1E4FBC860];
  a4[7] = a2;
  return a3();
}

unint64_t TTSMarkup.Language.attributes.getter()
{
  sub_1A6741AD0(&qword_1E96C1588);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1A689DC40;
  *(void *)(inited + 32) = 0x676E616C3A6C6D78;
  *(void *)(inited + 40) = 0xE800000000000000;
  uint64_t v2 = *(void *)(v0 + 56);
  *(void *)(inited + 48) = *(void *)(v0 + 48);
  *(void *)(inited + 56) = v2;
  swift_bridgeObjectRetain();
  return sub_1A6742BA0(inited);
}

void sub_1A6761F60(unsigned char *a1@<X8>)
{
  *a1 = 9;
}

unint64_t sub_1A6761F6C()
{
  sub_1A6741AD0(&qword_1E96C1588);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1A689DC40;
  *(void *)(inited + 32) = 0x676E616C3A6C6D78;
  *(void *)(inited + 40) = 0xE800000000000000;
  uint64_t v2 = *(void *)(v0 + 56);
  *(void *)(inited + 48) = *(void *)(v0 + 48);
  *(void *)(inited + 56) = v2;
  swift_bridgeObjectRetain();
  return sub_1A6742BA0(inited);
}

uint64_t sub_1A6761FE0@<X0>(uint64_t a1@<X8>)
{
  return sub_1A673E788(v1 + 8, a1);
}

uint64_t sub_1A6761FF4(uint64_t a1)
{
  uint64_t v2 = sub_1A6741AD0(&qword_1E96C1CE0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1A6762054(uint64_t a1)
{
  return a1;
}

void *sub_1A676207C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1A6741AD0(&qword_1E96C1D68);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[5 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    sub_1A6741AD0(&qword_1E96C1CF8);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t _s8LanguageVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease();
  sub_1A6741A24(a1 + 8);

  return swift_bridgeObjectRelease();
}

uint64_t _s8LanguageVwcp(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = a2 + 8;
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v5;
  uint64_t v6 = v5;
  int64_t v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_bridgeObjectRetain();
  v7(a1 + 8, v4, v6);
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  swift_bridgeObjectRetain();
  return a1;
}

void *_s8LanguageVwca(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_1A67588AC(a1 + 1, a2 + 1);
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 _s8LanguageVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t _s8LanguageVwta(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  sub_1A6741A24(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s8LanguageVwet(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s8LanguageVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TTSMarkup.Language()
{
  return &type metadata for TTSMarkup.Language;
}

uint64_t VocalizerProsody.rate.getter()
{
  return *(void *)v0;
}

uint64_t VocalizerProsody.rate.setter(uint64_t result)
{
  void *v1 = result;
  return result;
}

uint64_t (*VocalizerProsody.rate.modify())()
{
  return nullsub_19;
}

uint64_t VocalizerProsody.pitch.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t VocalizerProsody.pitch.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*VocalizerProsody.pitch.modify())()
{
  return nullsub_19;
}

uint64_t VocalizerProsody.volume.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t VocalizerProsody.volume.setter(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t (*VocalizerProsody.volume.modify())()
{
  return nullsub_19;
}

uint64_t VocalizerMarkupWriter.language.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t VocalizerMarkupWriter.language.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = a2;
  return result;
}

uint64_t (*VocalizerMarkupWriter.language.modify())()
{
  return nullsub_19;
}

uint64_t VocalizerMarkupWriter.phonemeMappings.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t VocalizerMarkupWriter.phonemeMappings.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 24) = a1;
  return result;
}

uint64_t (*VocalizerMarkupWriter.phonemeMappings.modify())()
{
  return nullsub_19;
}

__n128 VocalizerMarkupWriter.defaultProsody.getter@<Q0>(__n128 *a1@<X8>)
{
  unint64_t v2 = v1[3].n128_u64[0];
  __n128 result = v1[2];
  *a1 = result;
  a1[1].n128_u64[0] = v2;
  return result;
}

__n128 VocalizerMarkupWriter.defaultProsody.setter(__n128 *a1)
{
  unint64_t v2 = a1[1].n128_u64[0];
  __n128 result = *a1;
  v1[2] = *a1;
  v1[3].n128_u64[0] = v2;
  return result;
}

uint64_t (*VocalizerMarkupWriter.defaultProsody.modify())()
{
  return nullsub_19;
}

__n128 sub_1A67625E4@<Q0>(uint64_t a1@<X8>)
{
  unint64_t v2 = v1[4].n128_u64[0];
  if (*(void *)(v2 + 16))
  {
    uint64_t v3 = *(void *)(v2 + 48);
    *(_OWORD *)a1 = *(_OWORD *)(v2 + 32);
    *(void *)(a1 + 16) = v3;
    sub_1A6763E3C(0, 1);
  }
  else
  {
    unint64_t v5 = v1[3].n128_u64[0];
    __n128 result = v1[2];
    *(__n128 *)a1 = result;
    *(void *)(a1 + 16) = v5;
  }
  return result;
}

float VocalizerMarkupWriter.standardVoiceMidiPitch.getter()
{
  return *(float *)(v0 + 72);
}

void VocalizerMarkupWriter.standardVoiceMidiPitch.setter(float a1)
{
  *(float *)(v1 + 72) = a1;
}

uint64_t (*VocalizerMarkupWriter.standardVoiceMidiPitch.modify())()
{
  return nullsub_19;
}

int64x2_t VocalizerMarkupWriter.init(stream:)@<Q0>(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  a2->i64[1] = 0x53552D6E65;
  a2[1].i64[0] = 0xE500000000000000;
  uint64_t v4 = MEMORY[0x1E4FBC860];
  a2[1].i64[1] = sub_1A6742BA0(MEMORY[0x1E4FBC860]);
  int64x2_t result = vdupq_n_s64(0x64uLL);
  a2[2] = result;
  a2[3].i64[0] = 80;
  a2[3].i8[8] = 0;
  a2[4].i64[0] = v4;
  a2[4].i32[2] = 1110441984;
  a2->i64[0] = a1;
  return result;
}

uint64_t VocalizerMarkupWriter.visit(_:)(uint64_t a1, uint64_t a2)
{
  return TTSMarkupVisitor.visit(_:)((void *)(a1 + 8), a2, (uint64_t)&protocol witness table for VocalizerMarkupWriter<A>);
}

void VocalizerMarkupWriter.visit(_:)()
{
  double v1 = sub_1A685AE4C() * 1000.0;
  if ((~*(void *)&v1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v1 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v1 < 9.22337204e18)
  {
    uint64_t v2 = *v0;
    sub_1A68930E0();
    sub_1A6892150();
    swift_bridgeObjectRelease();
    sub_1A6892150();
    (*(void (**)(uint64_t, unint64_t))(*(void *)v2 + 208))(0x65737561705C1B20, 0xE90000000000003DLL);
    swift_bridgeObjectRelease();
    return;
  }
LABEL_7:
  __break(1u);
}

uint64_t VocalizerMarkupWriter.visit(_:)()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  sub_1A6892150();
  swift_bridgeObjectRelease();
  sub_1A6892150();
  (*(void (**)(uint64_t, unint64_t))(*(void *)v1 + 208))(0x3D6B726D5C1B20, 0xE700000000000000);

  return swift_bridgeObjectRelease();
}

uint64_t VocalizerMarkupWriter.visit(_:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  char v4 = v1[56];
  swift_bridgeObjectRetain();
  if ((v4 & 1) == 0)
  {
    unint64_t v5 = (void *)sub_1A6891FD0();
    id v6 = objc_msgSend(self, sel_sharedInstance);
    int64_t v7 = (void *)sub_1A6891FD0();
    id v8 = objc_msgSend(v6, sel_regexForString_, v7);

    if (v8)
    {
      id v9 = objc_msgSend(v8, sel_firstMatchInString_options_range_, v5, 0, 0, objc_msgSend(v5, sel_length));
      if (v9)
      {
        uint64_t v10 = v9;
        size_t v11 = (void *)sub_1A6891FD0();
        id v12 = objc_msgSend(v10, sel_rangeWithName_, v11);
        uint64_t v14 = v13;

        if (v12 == (id)sub_1A6891600())
        {
        }
        else
        {
          swift_bridgeObjectRelease();
          unint64_t v15 = (void *)sub_1A6891FD0();
          id v16 = objc_msgSend(v5, sel_stringByReplacingCharactersInRange_withString_, v12, v14, v15);

          uint64_t v3 = sub_1A6892000();
          uint64_t v2 = v17;
        }
      }
    }
  }
  v1[56] = 1;
  (*(void (**)(uint64_t, uint64_t))(**(void **)v1 + 208))(v3, v2);

  return swift_bridgeObjectRelease();
}

id VocalizerMarkupWriter.visit(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (*(unsigned char *)(a1 + 8) == 14)
  {
    sub_1A6763F50(a1, (uint64_t)v18);
  }
  else
  {
    v18[0] = *(unsigned char *)(a1 + 8);
    v17[0] = 0;
    sub_1A6764048();
    char v6 = sub_1A6891FC0();
    sub_1A6763F50(a1, (uint64_t)v18);
    if (v6)
    {
      sub_1A6763FAC((uint64_t)v18);
      sub_1A6763F50(a1, (uint64_t)v17);
      goto LABEL_8;
    }
  }
  if (v19 == 14)
  {
    sub_1A6763FAC((uint64_t)v18);
    sub_1A6763F50(a1, (uint64_t)v17);
    goto LABEL_9;
  }
  v17[0] = v19;
  sub_1A6764048();
  char v7 = sub_1A6891FC0();
  sub_1A6763FAC((uint64_t)v18);
  sub_1A6763F50(a1, (uint64_t)v17);
  if (v7)
  {
LABEL_8:
    sub_1A6763FAC((uint64_t)v17);
    goto LABEL_12;
  }
LABEL_9:
  if (v17[8] == 14)
  {
    sub_1A6763FAC((uint64_t)v17);
    goto LABEL_13;
  }
  sub_1A6764048();
  char v8 = sub_1A6891FC0();
  sub_1A6763FAC((uint64_t)v17);
  if (v8)
  {
LABEL_12:
    v3[56] = 1;
    (*(void (**)(uint64_t, unint64_t))(**(void **)v3 + 208))(0x6570733D6E745C1BLL, 0xEB000000005C6C6CLL);
    TTSMarkupVisitor.visit(_:)((void *)(a1 + 16), a2, (uint64_t)&protocol witness table for VocalizerMarkupWriter<A>);
    return (id)(*(uint64_t (**)(uint64_t, unint64_t))(**(void **)v3 + 208))(0x726F6E3D6E745C1BLL, 0xEC0000005C6C616DLL);
  }
LABEL_13:
  id result = (id)AXTTSLogCommon();
  if (result)
  {
    uint64_t v10 = result;
    sub_1A6892850();
    sub_1A6741AD0(&qword_1E96C1638);
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_1A689DC40;
    if (*(unsigned char *)(a1 + 8) == 14)
    {
      uint64_t v12 = 0;
      unint64_t v13 = 0;
    }
    else
    {
      uint64_t v12 = TTSMarkup.SayAs.Interpretation.rawValue.getter();
      unint64_t v13 = v14;
    }
    *(void *)(v11 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v11 + 64) = sub_1A6764000();
    uint64_t v15 = 0x3E6C696E3CLL;
    if (v13) {
      uint64_t v15 = v12;
    }
    unint64_t v16 = 0xE500000000000000;
    if (v13) {
      unint64_t v16 = v13;
    }
    *(void *)(v11 + 32) = v15;
    *(void *)(v11 + 40) = v16;
    sub_1A6891CA0();

    return (id)swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void VocalizerMarkupWriter.visit(_:)(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = *(unsigned int *)(a1 + 56) | ((unint64_t)*(unsigned __int8 *)(a1 + 60) << 32);
  if (*(unsigned __int8 *)(a1 + 60) >> 2 > 0x3EuLL)
  {
    uint64_t v7 = 0;
  }
  else
  {
    LODWORD(v47) = *(_DWORD *)(a1 + 56);
    BYTE4(v47) = BYTE4(v5);
    sub_1A67631B4(v2[18]);
    uint64_t v7 = v6;
  }
  unint64_t v8 = *(unsigned int *)(a1 + 48) | ((unint64_t)*(unsigned __int8 *)(a1 + 52) << 32);
  if (*(unsigned __int8 *)(a1 + 52) == 255)
  {
    uint64_t v9 = 0;
  }
  else
  {
    LODWORD(v47) = *(_DWORD *)(a1 + 48);
    BYTE4(v47) = BYTE4(v8) & 1;
    uint64_t v9 = sub_1A6763370();
  }
  unint64_t v10 = *(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32);
  if (*(unsigned __int8 *)(a1 + 68) != 255)
  {
    sub_1A676CAA4();
    LODWORD(v47) = v10;
    BYTE4(v47) = BYTE4(v10) & 1;
    float v11 = sub_1A676CAA4() * 80.0;
    if ((~LODWORD(v11) & 0x7F800000) != 0)
    {
      if (v11 > -9.2234e18)
      {
        if (v11 < 9.2234e18)
        {
          uint64_t v12 = (uint64_t)v11;
          goto LABEL_13;
        }
LABEL_47:
        __break(1u);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_47;
  }
  uint64_t v12 = 0;
LABEL_13:
  unint64_t v13 = v5 >> 34;
  unint64_t v14 = HIDWORD(v10);
  if (HIDWORD(v8) < 0xFF) {
    goto LABEL_21;
  }
  if (v13 >= 0x3F && v14 >= 0xFF)
  {
    TTSMarkupVisitor.visit(_:)((void *)(a1 + 8), a2, (uint64_t)&protocol witness table for VocalizerMarkupWriter<A>);
    return;
  }
  uint64_t v15 = *((void *)v2 + 8);
  if (*(void *)(v15 + 16))
  {
    uint64_t v9 = *(void *)(v15 + 32);
LABEL_21:
    if (v13 < 0x3F) {
      goto LABEL_26;
    }
    goto LABEL_22;
  }
  uint64_t v9 = *((void *)v2 + 4);
  if (v13 < 0x3F) {
    goto LABEL_26;
  }
LABEL_22:
  uint64_t v16 = *((void *)v2 + 8);
  if (*(void *)(v16 + 16)) {
    uint64_t v7 = *(void *)(v16 + 40);
  }
  else {
    uint64_t v7 = *((void *)v2 + 5);
  }
LABEL_26:
  uint64_t v17 = (void *)*((void *)v2 + 8);
  uint64_t v18 = *((void *)v2 + 6);
  uint64_t v19 = v17[2];
  BOOL v21 = v14 > 0xFE || v19 == 0;
  if (v14 >= 0xFF) {
    uint64_t v22 = *((void *)v2 + 6);
  }
  else {
    uint64_t v22 = v12;
  }
  if (v14 >= 0xFF && v19)
  {
    BOOL v21 = 0;
    uint64_t v22 = v17[6];
  }
  uint64_t v23 = *((void *)v2 + 1);
  long long v24 = *((_OWORD *)v2 + 1);
  uint64_t v26 = *((void *)v2 + 4);
  uint64_t v25 = *((void *)v2 + 5);
  char v27 = *((unsigned char *)v2 + 56);
  int v28 = *((_DWORD *)v2 + 18);
  uint64_t v29 = v25;
  uint64_t v30 = *((void *)v2 + 6);
  uint64_t v31 = v26;
  if (!v21)
  {
    uint64_t v29 = v17[5];
    uint64_t v30 = v17[6];
    uint64_t v31 = v17[4];
  }
  uint64_t v39 = v30;
  uint64_t v47 = *(void *)v2;
  uint64_t v48 = v23;
  long long v49 = v24;
  *(void *)&long long v50 = v26;
  *((void *)&v50 + 1) = v25;
  uint64_t v51 = v18;
  char v52 = v27;
  uint64_t v53 = v17;
  int v54 = v28;
  uint64_t v44 = v9;
  uint64_t v45 = v7;
  uint64_t v46 = v22;
  if (!v21)
  {
    uint64_t v25 = v17[5];
    uint64_t v18 = v17[6];
    uint64_t v26 = v17[4];
  }
  *(void *)&long long v42 = v26;
  *((void *)&v42 + 1) = v25;
  uint64_t v43 = v18;
  sub_1A67634BC(&v44, (uint64_t *)&v42);
  sub_1A6763928(0, 0, v9, v7, v22);
  TTSMarkupVisitor.visit(_:)((void *)(a1 + 8), a2, (uint64_t)&protocol witness table for VocalizerMarkupWriter<A>);
  uint64_t v32 = *((void *)v2 + 1);
  uint64_t v33 = *((void *)v2 + 2);
  uint64_t v34 = *((void *)v2 + 3);
  uint64_t v35 = *((void *)v2 + 6);
  char v36 = *((unsigned char *)v2 + 56);
  int64_t v37 = (void *)*((void *)v2 + 8);
  int v38 = *((_DWORD *)v2 + 18);
  uint64_t v47 = *(void *)v2;
  uint64_t v48 = v32;
  *(void *)&long long v49 = v33;
  *((void *)&v49 + 1) = v34;
  long long v50 = *((_OWORD *)v2 + 2);
  uint64_t v51 = v35;
  char v52 = v36;
  uint64_t v53 = v37;
  int v54 = v38;
  uint64_t v44 = v31;
  uint64_t v45 = v29;
  uint64_t v46 = v39;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1A67625E4((uint64_t)&v42);
  long long v40 = v42;
  uint64_t v41 = v43;
  sub_1A67634BC(&v44, (uint64_t *)&v40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
}

void sub_1A67631B4(float a1)
{
  unsigned int v3 = *((unsigned __int8 *)v1 + 4);
  unint64_t v4 = *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32);
  sub_1A6748E8C(a1);
  if (!(v3 >> 6)) {
    return;
  }
  if (v3 >> 6 == 1)
  {
    sub_1A6748EC4(*(float *)&v4);
LABEL_8:
    sub_1A67631B4(a1);
    return;
  }
  float v5 = *(float *)&v4;
  uint64_t v6 = HIDWORD(v4) & 0x3F;
  if (!v6) {
    goto LABEL_8;
  }
  if (v6 == 1)
  {
    sub_1A680FC18(-12.0, 12.0, 0.0, 200.0, *(float *)&v4);
    goto LABEL_8;
  }
  BOOL v7 = *(float *)&v4 <= 0.0;
  if (*(float *)&v4 < 0.0)
  {
    float v8 = sub_1A680FC18(-100.0, 0.0, 50.0, 100.0, *(float *)&v4);
    if ((~LODWORD(v8) & 0x7F800000) != 0)
    {
      if (v8 > -9.2234e18)
      {
        BOOL v7 = v8 <= 9.2234e18;
        if (v8 < 9.2234e18) {
          return;
        }
        __break(1u);
        goto LABEL_14;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_22;
  }
LABEL_14:
  if (!v7)
  {
    float v9 = sub_1A680FC18(0.0, 100.0, 100.0, 200.0, v5);
    if ((~LODWORD(v9) & 0x7F800000) != 0)
    {
      if (v9 > -9.2234e18)
      {
        if (v9 < 9.2234e18) {
          return;
        }
LABEL_24:
        __break(1u);
        return;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
}

uint64_t sub_1A6763370()
{
  float v1 = *(float *)v0;
  if ((*(unsigned char *)(v0 + 4) & 1) == 0)
  {
    float v2 = 2.0;
    float v4 = 0.25;
    uint64_t result = 100;
    switch(*(_DWORD *)v0)
    {
      case 1u:
        float v4 = 0.5;
        goto LABEL_6;
      case 2u:
        return result;
      case 3u:
        goto LABEL_14;
      case 4u:
        float v2 = 4.0;
        goto LABEL_14;
      default:
        goto LABEL_6;
    }
  }
  float v2 = *(float *)v0;
  BOOL v3 = v1 <= 1.0;
  if (v1 >= 1.0)
  {
LABEL_10:
    if (v3) {
      return 100;
    }
LABEL_14:
    float v6 = sub_1A680FC18(1.0, 4.0, 100.0, 400.0, v2);
    if ((~LODWORD(v6) & 0x7F800000) != 0)
    {
      if (v6 > -9.2234e18)
      {
        if (v6 < 9.2234e18) {
          return (uint64_t)v6;
        }
LABEL_22:
        __break(1u);
        JUMPOUT(0x1A67634A8);
      }
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  float v4 = *(float *)v0;
LABEL_6:
  float v6 = sub_1A680FC18(0.0, 1.0, 50.0, 100.0, v4);
  if ((~LODWORD(v6) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  if (v6 <= -9.2234e18)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  BOOL v3 = v6 <= 9.2234e18;
  if (v6 >= 9.2234e18)
  {
    __break(1u);
    goto LABEL_10;
  }
  return (uint64_t)v6;
}

uint64_t *sub_1A67634BC(uint64_t *result, uint64_t *a2)
{
  uint64_t v3 = *result;
  uint64_t v4 = result[2];
  uint64_t v5 = *a2;
  uint64_t v6 = a2[2];
  uint64_t v7 = *v2;
  if (result[1] == a2[1])
  {
    if (v3 == v5) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_1A68930E0();
    sub_1A6892150();
    swift_bridgeObjectRelease();
    sub_1A6892150();
    (*(void (**)(uint64_t, unint64_t))(*(void *)v7 + 208))(0x3D68637469705C1BLL, 0xE800000000000000);
    uint64_t result = (uint64_t *)swift_bridgeObjectRelease();
    if (v3 == v5)
    {
LABEL_3:
      if (v4 == v6) {
        return result;
      }
      goto LABEL_4;
    }
  }
  sub_1A68930E0();
  sub_1A6892150();
  swift_bridgeObjectRelease();
  sub_1A6892150();
  (*(void (**)(uint64_t, unint64_t))(*(void *)v7 + 208))(0x3D657461725C1BLL, 0xE700000000000000);
  uint64_t result = (uint64_t *)swift_bridgeObjectRelease();
  if (v4 == v6) {
    return result;
  }
LABEL_4:
  sub_1A68930E0();
  sub_1A6892150();
  swift_bridgeObjectRelease();
  sub_1A6892150();
  (*(void (**)(uint64_t, unint64_t))(*(void *)v7 + 208))(0x3D6C6F765C1BLL, 0xE600000000000000);
  return (uint64_t *)swift_bridgeObjectRelease();
}

void VocalizerMarkupWriter.visit(_:)(uint64_t a1)
{
  float v2 = v1;
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = self;
  uint64_t v6 = (void *)sub_1A6891FD0();
  uint64_t v7 = (void *)sub_1A6891FD0();
  id v8 = objc_msgSend(v5, sel_lhPhonemesFromIPA_language_, v6, v7);

  if (v8)
  {
    uint64_t v9 = sub_1A6892000();
    uint64_t v11 = v10;

    uint64_t v12 = v2 + 3;
    swift_bridgeObjectRetain();
    if (v4)
    {
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v15 = *v12;
      uint64_t *v12 = 0x8000000000000000;
      sub_1A6747404(v3, v4, v9, v11, isUniquelyReferenced_nonNull_native);
      uint64_t *v12 = v15;
    }
    else
    {
      sub_1A6763B7C(v9, v11);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *((unsigned char *)v2 + 56) = 1;
    uint64_t v14 = *v2;
    sub_1A6892C40();
    swift_bridgeObjectRelease();
    sub_1A6892150();
    swift_bridgeObjectRelease();
    sub_1A6892150();
    (*(void (**)(uint64_t, unint64_t))(*(void *)v14 + 208))(0x686C3D696F745C1BLL, 0xEA00000000005C70);
    swift_bridgeObjectRelease();
  }
}

unint64_t sub_1A6763928(unint64_t result, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  unint64_t v7 = *v5;
  int64_t v8 = *(void *)(*v5 + 16);
  if (v8 < a2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v9 = result;
  unint64_t v10 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v11 = 1 - v10;
  if (__OFSUB__(1, v10))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  int64_t v12 = v8 + v11;
  if (__OFADD__(v8, v11))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (!result || v12 > *(void *)(v7 + 24) >> 1)
  {
    if (v8 <= v12) {
      int64_t v16 = v8 + v11;
    }
    else {
      int64_t v16 = v8;
    }
    uint64_t result = (unint64_t)sub_1A6763A64((char *)result, v16, 1, (char *)v7);
    unint64_t v7 = result;
  }
  unint64_t v17 = v7 + 32;
  uint64_t v18 = (void *)(v7 + 32 + 24 * v9);
  if (!v11) {
    goto LABEL_19;
  }
  uint64_t v19 = *(void *)(v7 + 16);
  BOOL v20 = __OFSUB__(v19, a2);
  uint64_t v21 = v19 - a2;
  if (v20) {
    goto LABEL_25;
  }
  uint64_t result = (unint64_t)(v18 + 3);
  uint64_t v22 = (void *)(v17 + 24 * a2);
  if (v18 + 3 != v22 || result >= (unint64_t)&v22[3 * v21]) {
    uint64_t result = (unint64_t)memmove((void *)result, v22, 24 * v21);
  }
  uint64_t v23 = *(void *)(v7 + 16);
  BOOL v20 = __OFADD__(v23, v11);
  uint64_t v24 = v23 + v11;
  if (!v20)
  {
    *(void *)(v7 + 16) = v24;
LABEL_19:
    *uint64_t v18 = a3;
    unint64_t v25 = v17 + 24 * v9;
    *(void *)(v25 + 8) = a4;
    *(void *)(v25 + 16) = a5;
    unint64_t *v5 = v7;
    return result;
  }
LABEL_26:
  __break(1u);
  return result;
}

char *sub_1A6763A64(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1A6741AD0(&qword_1E96C1D78);
    unint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 24 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1A6763B7C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1A673F7AC(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  uint64_t *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1A674758C();
    uint64_t v9 = v12;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 16 * v6);
  sub_1A6763C64(v6, v9);
  uint64_t *v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

unint64_t sub_1A6763C64(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = sub_1A6892BA0();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        sub_1A6893200();
        swift_bridgeObjectRetain();
        sub_1A68920F0();
        uint64_t v9 = sub_1A6893250();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          unint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            _OWORD *v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          int64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  uint64_t *v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1A6763E3C(unint64_t result, int64_t a2)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v4 = *v2;
  int64_t v5 = *(void *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v6 = result;
  unint64_t v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  unint64_t v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v9 <= *(void *)(v4 + 24) >> 1)
  {
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    if (v5 <= v9) {
      int64_t v10 = v5 + v8;
    }
    else {
      int64_t v10 = v5;
    }
    uint64_t result = (unint64_t)sub_1A6763A64((char *)result, v10, 1, (char *)v4);
    unint64_t v4 = result;
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = *(void *)(v4 + 16);
  BOOL v12 = __OFSUB__(v11, a2);
  uint64_t v13 = v11 - a2;
  if (v12) {
    goto LABEL_26;
  }
  uint64_t result = v4 + 32 + 24 * v6;
  uint64_t v14 = (const void *)(v4 + 32 + 24 * a2);
  if (v6 != a2 || result >= (unint64_t)v14 + 24 * v13) {
    uint64_t result = (unint64_t)memmove((void *)result, v14, 24 * v13);
  }
  uint64_t v15 = *(void *)(v4 + 16);
  BOOL v12 = __OFADD__(v15, v8);
  uint64_t v16 = v15 + v8;
  if (!v12)
  {
    *(void *)(v4 + 16) = v16;
LABEL_20:
    unint64_t *v2 = v4;
    return result;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1A6763F50(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1A6763FAC(uint64_t a1)
{
  return a1;
}

unint64_t sub_1A6764000()
{
  unint64_t result = qword_1E96C1610;
  if (!qword_1E96C1610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E96C1610);
  }
  return result;
}

unint64_t sub_1A6764048()
{
  unint64_t result = qword_1E96C1D70;
  if (!qword_1E96C1D70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E96C1D70);
  }
  return result;
}

__n128 initializeBufferWithCopyOfBuffer for VocalizerProsody(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for VocalizerProsody(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for VocalizerProsody(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for VocalizerProsody()
{
  return &type metadata for VocalizerProsody;
}

uint64_t sub_1A676410C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 48);
}

uint64_t sub_1A6764114()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1A6764160(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1A67641E0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  return a1;
}

__n128 sub_1A67642A0(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1A67642C4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  return a1;
}

uint64_t sub_1A676434C(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 76)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1A6764394(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 72) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 76) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 76) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for VocalizerMarkupWriter()
{
  return sub_1A674B1C8();
}

uint64_t TTSMarkup.Sentence.accept<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v7[3] = &type metadata for TTSMarkup.Sentence;
  v7[4] = &protocol witness table for TTSMarkup.Sentence;
  v7[0] = swift_allocObject();
  sub_1A67644CC(v3, v7[0] + 16);
  TTSMarkupVisitor.visit(_:)(v7, a2, a3);
  return sub_1A6741A24((uint64_t)v7);
}

uint64_t sub_1A676448C()
{
  swift_bridgeObjectRelease();
  sub_1A6741A24(v0 + 24);

  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t sub_1A67644CC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = *(void *)a1;
  uint64_t v3 = a2 + 8;
  uint64_t v4 = a1 + 8;
  long long v5 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 32) = v5;
  uint64_t v6 = v5;
  unint64_t v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_bridgeObjectRetain();
  v7(v3, v4, v6);
  return a2;
}

uint64_t TTSMarkup.Sentence.init(_:)@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  *(void *)&v20[0] = MEMORY[0x1E4FBC860];
  unint64_t v4 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x100))();
  unint64_t v5 = v4;
  if (!(v4 >> 62))
  {
    uint64_t v6 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v6) {
      goto LABEL_3;
    }
LABEL_17:
    int64_t v9 = (void *)MEMORY[0x1E4FBC860];
LABEL_18:
    swift_bridgeObjectRelease_n();
    uint64_t v18 = sub_1A6741AD0(&qword_1E96C1D60);
    uint64_t v19 = &protocol witness table for <A> [A];

    *(void *)&long long v17 = v9;
    uint64_t result = sub_1A673E770(&v17, (uint64_t)v20 + 8);
    long long v14 = v20[1];
    *a2 = v20[0];
    a2[1] = v14;
    a2[2] = v20[2];
    return result;
  }
  swift_bridgeObjectRetain();
  uint64_t result = sub_1A6892EB0();
  uint64_t v6 = result;
  if (!result) {
    goto LABEL_17;
  }
LABEL_3:
  if (v6 >= 1)
  {
    uint64_t v8 = 0;
    int64_t v9 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      if ((v5 & 0xC000000000000001) != 0) {
        id v10 = (id)MEMORY[0x1AD0BFD30](v8, v5);
      }
      else {
        id v10 = *(id *)(v5 + 8 * v8 + 32);
      }
      uint64_t v11 = v10;
      sub_1A677BA04((uint64_t)&v15);

      if (v16)
      {
        sub_1A673E770(&v15, (uint64_t)&v17);
        sub_1A673E770(&v17, (uint64_t)&v15);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          int64_t v9 = sub_1A676207C(0, v9[2] + 1, 1, v9);
        }
        unint64_t v13 = v9[2];
        unint64_t v12 = v9[3];
        if (v13 >= v12 >> 1) {
          int64_t v9 = sub_1A676207C((void *)(v12 > 1), v13 + 1, 1, v9);
        }
        void v9[2] = v13 + 1;
        sub_1A673E770(&v15, (uint64_t)&v9[5 * v13 + 4]);
      }
      else
      {
        sub_1A6761FF4((uint64_t)&v15);
      }
      ++v8;
    }
    while (v6 != v8);
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

void static TTSMarkup.Sentence.tag.getter(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

uint64_t TTSMarkup.Sentence.eventTaps.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t TTSMarkup.Sentence.eventTaps.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v1 = a1;
  return result;
}

uint64_t (*TTSMarkup.Sentence.eventTaps.modify())()
{
  return nullsub_19;
}

unint64_t TTSMarkup.Sentence.attributes.getter()
{
  return sub_1A6742BA0(MEMORY[0x1E4FBC860]);
}

uint64_t TTSMarkup.Sentence._content.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1A673E788(v1 + 8, a1);
}

uint64_t TTSMarkup.Sentence._content.setter(long long *a1)
{
  uint64_t v3 = v1 + 8;
  sub_1A6741A24(v3);

  return sub_1A673E770(a1, v3);
}

uint64_t (*TTSMarkup.Sentence._content.modify())()
{
  return nullsub_19;
}

uint64_t TTSMarkup.Sentence.content.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1A673E788(v1 + 8, a1);
}

uint64_t TTSMarkup.Sentence.init(speech:)@<X0>(uint64_t (*a1)(void)@<X0>, void *a2@<X8>)
{
  *a2 = MEMORY[0x1E4FBC860];
  return a1();
}

void sub_1A67648A0(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

unint64_t sub_1A67648AC()
{
  return sub_1A6742BA0(MEMORY[0x1E4FBC860]);
}

uint64_t _s8SentenceVwxx(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  swift_bridgeObjectRelease();

  return sub_1A6741A24(v1);
}

uint64_t _s8SentenceVwcp(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = a2 + 8;
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v4;
  uint64_t v5 = v4;
  uint64_t v6 = **(void (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);
  swift_bridgeObjectRetain();
  v6(a1 + 8, v3, v5);
  return a1;
}

void *_s8SentenceVwca(void *a1, void *a2)
{
  uint64_t v3 = a2 + 1;
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_1A67588AC(a1 + 1, v3);
  return a1;
}

uint64_t _s8SentenceVwta(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  sub_1A6741A24(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

ValueMetadata *type metadata accessor for TTSMarkup.Sentence()
{
  return &type metadata for TTSMarkup.Sentence;
}

uint64_t sub_1A6764A44()
{
  uint64_t v0 = sub_1A6741AD0(&qword_1E96C1D80);
  sub_1A67495E4(v0, qword_1E96D6190);
  sub_1A6748F88(v0, (uint64_t)qword_1E96D6190);
  return sub_1A6891C20();
}

uint64_t sub_1A6764AB8(void *a1)
{
  uint64_t v2 = type metadata accessor for PronunciationRuleSet();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v5 = (char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_1A67EE8DC();
  id v29 = v6;
  uint64_t v27 = MEMORY[0x1E4FBC860];
  id v7 = objc_msgSend(a1, sel_primaryLanguage);
  uint64_t v8 = sub_1A6892000();
  uint64_t v10 = v9;

  unint64_t v11 = (unint64_t)objc_msgSend(a1, sel_type);
  if (v11 <= 0xA && ((1 << v11) & 0x4D8) != 0)
  {
    unint64_t v13 = objc_msgSend(a1, sel_type) == (id)3 ? 0x80000001A68CCEC0 : 0x80000001A68CCEA0;
    unint64_t v14 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))off_1EFB7FF58[0])(v8, v10, 0xD000000000000019, v13);
    swift_bridgeObjectRelease();
    if (v14) {
      sub_1A6764DB4(v14);
    }
  }
  uint64_t v15 = ((uint64_t (*)(uint64_t, uint64_t))off_1EFB7FF60)(v8, v10);
  id v16 = a1;
  long long v17 = sub_1A6765760(v15, v16);
  swift_bridgeObjectRelease();

  uint64_t v18 = v17[2];
  if (v18)
  {
    uint64_t v19 = *(unsigned __int8 *)(v3 + 80);
    v26[1] = v17;
    uint64_t v20 = (uint64_t)v17 + ((v19 + 32) & ~v19);
    uint64_t v21 = *(void *)(v3 + 72);
    do
    {
      sub_1A6766854(v20, (uint64_t)v5);
      id v22 = v16;
      swift_bridgeObjectRetain();
      sub_1A6765B30((uint64_t)v5, v22, v8, v10);

      uint64_t v23 = swift_bridgeObjectRelease();
      MEMORY[0x1AD0BF380](v23);
      if (*(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_1A6892320();
      }
      sub_1A6892360();
      sub_1A6892300();
      sub_1A67668B8((uint64_t)v5);
      v20 += v21;
      --v18;
    }
    while (v18);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v24 = v27;
  swift_release();

  return v24;
}

uint64_t sub_1A6764DB4(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = sub_1A6892EB0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_1A6892EB0();
    swift_bridgeObjectRelease();
    uint64_t v6 = v5 + v3;
    if (!__OFADD__(v5, v3)) {
      goto LABEL_5;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3)) {
    goto LABEL_25;
  }
LABEL_5:
  unint64_t v4 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  unint64_t *v1 = v4;
  uint64_t v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v5 = 1;
  }
  if (v4 >> 62) {
    goto LABEL_27;
  }
  uint64_t v9 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6) {
      uint64_t v9 = v6;
    }
    swift_bridgeObjectRetain();
    unint64_t v4 = MEMORY[0x1AD0BFD40](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    unint64_t *v1 = v4;
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    uint64_t result = sub_1A67655A0(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v9 = sub_1A6892EB0();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();

  return sub_1A6892300();
}

uint64_t TTSPronunciationUtils.deinit()
{
  return v0;
}

uint64_t TTSPronunciationUtils.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_1A6764F98()
{
  return swift_allocObject();
}

uint64_t sub_1A6764FA8(uint64_t a1, uint64_t a2, char *a3)
{
  char v4 = *a3;
  uint64_t v5 = *v3;
  unint64_t v6 = (unint64_t)*v3 >> 61;
  char v7 = 1;
  switch(v6)
  {
    case 1uLL:
      char v27 = *(unsigned char *)((v5 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
      char v26 = v4;
      sub_1A6766BBC();
      sub_1A6892290();
      sub_1A6892290();
      if (v24 == v23[0] && v25 == v23[1]) {
        char v7 = 1;
      }
      else {
        char v7 = sub_1A6893120();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
    case 2uLL:
      uint64_t v13 = *(void *)((v5 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
      uint64_t v14 = *(void *)(v13 + 16);
      if (!v14) {
        return v7 & 1;
      }
      swift_bridgeObjectRetain();
      uint64_t v15 = 0;
      break;
    case 3uLL:
      uint64_t v17 = *(void *)((v5 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
      uint64_t v18 = *(void *)(v17 + 16);
      if (!v18)
      {
        char v7 = 0;
        return v7 & 1;
      }
      swift_bridgeObjectRetain();
      uint64_t v19 = 0;
      while (1)
      {
        uint64_t v24 = *(void *)(v17 + 8 * v19 + 32);
        LOBYTE(v23[0]) = v4;
        swift_retain();
        if (sub_1A6764FA8(a1, a2, v23)) {
          break;
        }
        ++v19;
        swift_release();
        if (v18 == v19) {
          goto LABEL_17;
        }
      }
      swift_release();
      goto LABEL_23;
    case 4uLL:
      uint64_t v20 = *(void *)((v5 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
      uint64_t v21 = swift_allocObject();
      *(void *)(v21 + 16) = v20;
      uint64_t v24 = v21 | 0x4000000000000000;
      LOBYTE(v23[0]) = v4;
      swift_bridgeObjectRetain();
      char v22 = sub_1A6764FA8(a1, a2, v23);
      swift_release();
      char v7 = v22 ^ 1;
      return v7 & 1;
    case 5uLL:
      return v7 & 1;
    default:
      sub_1A68920A0();
      sub_1A68920A0();
      char v10 = sub_1A68921F0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v10 & 1;
  }
  do
  {
    uint64_t v24 = *(void *)(v13 + 8 * v15 + 32);
    LOBYTE(v23[0]) = v4;
    swift_retain();
    char v16 = sub_1A6764FA8(a1, a2, v23);
    swift_release();
    if ((v16 & 1) == 0)
    {
LABEL_17:
      swift_bridgeObjectRelease();
      char v7 = 0;
      return v7 & 1;
    }
    ++v15;
  }
  while (v14 != v15);
LABEL_23:
  swift_bridgeObjectRelease();
  char v7 = 1;
  return v7 & 1;
}

size_t sub_1A6765274(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_1A6765294(a1, a2, a3, (void *)*v3);
  size_t *v3 = result;
  return result;
}

size_t sub_1A6765294(size_t result, int64_t a2, char a3, void *a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  sub_1A6741AD0(&qword_1E96C1DC8);
  uint64_t v10 = *(void *)(type metadata accessor for PronunciationRuleSet() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t result = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_29;
  }
  _OWORD v13[2] = v8;
  void v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  uint64_t v15 = *(void *)(type metadata accessor for PronunciationRuleSet() - 8);
  if (v5)
  {
    if (v13 < a4
      || (unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(void *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (size_t)v13;
}

void (*sub_1A6765468(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(void *a1)
{
  unint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_1A6765518(v6, a2, a3);
  return sub_1A67654D0;
}

void sub_1A67654D0(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

void (*sub_1A6765518(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)MEMORY[0x1AD0BFD30](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return sub_1A6765598;
  }
  __break(1u);
  return result;
}

void sub_1A6765598(id *a1)
{
}

uint64_t sub_1A67655A0(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = result;
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = sub_1A6892EB0();
    size_t result = swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = sub_1A6892EB0();
      size_t result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          sub_1A6766A64(&qword_1E96C1D98, &qword_1E96C1D88);
          swift_bridgeObjectRetain();
          for (unint64_t i = 0; i != v7; ++i)
          {
            sub_1A6741AD0(&qword_1E96C1D88);
            uint64_t v10 = sub_1A6765468(v13, i, a3);
            id v12 = *v11;
            ((void (*)(void (**)(id *), void))v10)(v13, 0);
            *(void *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        sub_1A6766964();
        swift_arrayInitWithCopy();
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

id sub_1A6765760(uint64_t a1, id a2)
{
  uint64_t v42 = type metadata accessor for PronunciationRuleSet();
  uint64_t v5 = MEMORY[0x1F4188790](v42);
  uint64_t v38 = (uint64_t)v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)v35 - v8;
  MEMORY[0x1F4188790](v7);
  id v12 = (char *)v35 - v11;
  id result = (id)MEMORY[0x1E4FBC860];
  uint64_t v46 = MEMORY[0x1E4FBC860];
  uint64_t v14 = *(void *)(a1 + 16);
  if (v14)
  {
    uint64_t v15 = *(unsigned __int8 *)(v10 + 80);
    uint64_t v16 = *(void *)(v10 + 72);
    id v40 = a2;
    uint64_t v41 = v16;
    v35[1] = v2;
    uint64_t v36 = (v15 + 32) & ~v15;
    uint64_t v17 = a1 + v36;
    uint64_t v39 = "tion found for %@";
    unint64_t v37 = 0x80000001A68CCF40;
    while (1)
    {
      sub_1A6766854(v17, (uint64_t)v12);
      uint64_t v45 = *(void *)&v12[*(int *)(v42 + 28)];
      swift_retain();
      id result = objc_msgSend(a2, sel_voiceId);
      if (!result)
      {
        __break(1u);
        return result;
      }
      uint64_t v18 = result;
      uint64_t v43 = sub_1A6892000();
      uint64_t v20 = v19;

      id v21 = objc_msgSend(a2, sel_speechVoice);
      id v22 = objc_msgSend(v21, sel_synthesisProviderVoice);

      id v23 = objc_msgSend(v22, sel_synthesizerBundleIdentifier);
      if (v23)
      {
        uint64_t v24 = sub_1A6892000();
        uint64_t v26 = v25;

        if (v24 == 0xD00000000000002BLL && v26 == v37)
        {
          swift_bridgeObjectRelease();
LABEL_12:
          char v28 = 2;
          a2 = v40;
          goto LABEL_16;
        }
        char v27 = sub_1A6893120();
        swift_bridgeObjectRelease();
        if (v27) {
          goto LABEL_12;
        }
      }
      a2 = v40;
      id v29 = objc_msgSend(v40, sel_type);
      if ((unint64_t)(v29 - 2) >= 9) {
        char v28 = 1;
      }
      else {
        char v28 = byte_1A689E66A[(void)(v29 - 2)];
      }
LABEL_16:
      char v44 = v28;
      char v30 = sub_1A6764FA8(v43, v20, &v44);
      swift_release();
      swift_bridgeObjectRelease();
      sub_1A6766854((uint64_t)v12, (uint64_t)v9);
      if (v30)
      {
        char v31 = v9[*(int *)(v42 + 44)];
        sub_1A67668B8((uint64_t)v9);
        if (v31)
        {
          sub_1A6766B20((uint64_t)v12, v38);
          uint64_t v32 = v46;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1A6765274(0, *(void *)(v32 + 16) + 1, 1);
            uint64_t v32 = v46;
          }
          unint64_t v34 = *(void *)(v32 + 16);
          unint64_t v33 = *(void *)(v32 + 24);
          if (v34 >= v33 >> 1)
          {
            sub_1A6765274(v33 > 1, v34 + 1, 1);
            uint64_t v32 = v46;
          }
          *(void *)(v32 + 16) = v34 + 1;
          sub_1A6766B20(v38, v32 + v36 + v34 * v41);
          goto LABEL_5;
        }
      }
      else
      {
        sub_1A67668B8((uint64_t)v9);
      }
      sub_1A67668B8((uint64_t)v12);
LABEL_5:
      v17 += v41;
      if (!--v14) {
        return (id)v46;
      }
    }
  }
  return result;
}

void sub_1A6765B30(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v81 = a4;
  uint64_t v80 = a3;
  id v82 = a2;
  uint64_t v78 = sub_1A6741AD0(&qword_1E96C1D80);
  uint64_t v5 = *(void *)(v78 - 8);
  MEMORY[0x1F4188790](v78);
  unint64_t v77 = (char *)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1A6741AD0(&qword_1E96C1DA0);
  MEMORY[0x1F4188790](v7 - 8);
  unint64_t v76 = (char *)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = objc_msgSend(objc_allocWithZone((Class)TTSRuleset), sel_init);
  uint64_t v94 = 0x5F656C75727861;
  unint64_t v95 = 0xE700000000000000;
  uint64_t v10 = (int *)type metadata accessor for PronunciationRuleSet();
  swift_bridgeObjectRetain();
  sub_1A6892150();
  swift_bridgeObjectRelease();
  sub_1A6892150();
  sub_1A68917D0();
  sub_1A6892150();
  swift_bridgeObjectRelease();
  sub_1A6892150();
  swift_bridgeObjectRetain();
  sub_1A6892150();
  swift_bridgeObjectRelease();
  uint64_t v11 = (void *)sub_1A6891FD0();
  swift_bridgeObjectRelease();
  objc_msgSend(v9, sel_setIdentifier_, v11);

  objc_msgSend(v9, sel_setPriority_, *(void *)(a1 + v10[10]));
  if (*(void *)(a1 + v10[8] + 8))
  {
    id v12 = objc_allocWithZone((Class)TTSRegex);
    swift_bridgeObjectRetain();
    uint64_t v13 = (void *)sub_1A6891FD0();
    swift_bridgeObjectRelease();
    id v14 = objc_msgSend(v12, sel_initWithPerlPattern_, v13);

    objc_msgSend(v9, sel_setActivationRegex_, v14);
  }
  id v83 = v9;
  uint64_t v15 = v10[9];
  uint64_t v16 = *(void *)(*(void *)(a1 + v15) + 16);
  if (!v16) {
    return;
  }
  unint64_t v17 = 0;
  uint64_t v74 = (void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v73 = (void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v18 = 88;
  long long v75 = xmmword_1A689DC40;
  uint64_t v79 = "tion found for %@";
  unint64_t v72 = 0x80000001A68CCF40;
  uint64_t v85 = a1;
  uint64_t v86 = v15;
  uint64_t v84 = v16;
  while (1)
  {
    uint64_t v19 = *(void *)(a1 + v15);
    if (v17 >= *(void *)(v19 + 16)) {
      break;
    }
    uint64_t v20 = (void *)(v19 + v18);
    if (*((unsigned char *)v20 - 23) != 1) {
      goto LABEL_7;
    }
    uint64_t v88 = v18;
    uint64_t v21 = *(v20 - 7);
    uint64_t v22 = *(v20 - 6);
    uint64_t v23 = *(v20 - 4);
    uint64_t v90 = *(v20 - 5);
    char v24 = *((unsigned char *)v20 - 24);
    uint64_t v25 = *(v20 - 2);
    uint64_t v26 = *v20;
    unint64_t v92 = v17;
    id v27 = objc_allocWithZone((Class)TTSRuleReplacement);
    swift_bridgeObjectRetain();
    uint64_t v93 = v23;
    swift_bridgeObjectRetain();
    uint64_t v89 = v25;
    sub_1A67669A4(v25);
    swift_bridgeObjectRetain();
    id v28 = objc_msgSend(v27, sel_init);
    if (HIDWORD(v92)) {
      goto LABEL_47;
    }
    uint64_t v87 = v26;
    id v91 = v28;
    objc_msgSend(v28, sel_setOriginalRulesetIndex_);
    v100[0] = v21;
    v100[1] = v22;
    uint64_t v29 = sub_1A6891680();
    uint64_t v30 = *(void *)(v29 - 8);
    MEMORY[0x1F4188790](v29);
    uint64_t v32 = (char *)&v71 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
    swift_bridgeObjectRetain();
    sub_1A6891670();
    sub_1A6748030();
    sub_1A6892A90();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v32, v29);
    swift_bridgeObjectRelease();
    char v33 = sub_1A68921F0();
    swift_bridgeObjectRelease();
    if (v33)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      v100[0] = 6446127;
      v100[1] = 0xE300000000000000;
      swift_bridgeObjectRetain();
      sub_1A6892150();
      swift_bridgeObjectRelease();
      sub_1A6892150();
    }
    id v34 = objc_allocWithZone((Class)TTSRegex);
    uint64_t v35 = (void *)sub_1A6891FD0();
    swift_bridgeObjectRelease();
    id v36 = objc_msgSend(v34, sel_initWithPerlPattern_, v35);

    id v37 = v91;
    objc_msgSend(v91, sel_setRegex_, v36);

    char v99 = v24;
    char v98 = 1;
    sub_1A67669BC();
    sub_1A6892290();
    sub_1A6892290();
    a1 = v85;
    if (v100[0] == v96 && v100[1] == v97)
    {
      swift_bridgeObjectRelease_n();
      BOOL v38 = 1;
    }
    else
    {
      char v39 = sub_1A6893120();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v39)
      {
        BOOL v38 = 1;
      }
      else
      {
        v100[0] = v90;
        v100[1] = v93;
        uint64_t v40 = qword_1E96C5B98;
        swift_bridgeObjectRetain();
        if (v40 != -1) {
          swift_once();
        }
        uint64_t v41 = v78;
        uint64_t v42 = sub_1A6748F88(v78, (uint64_t)qword_1E96D6190);
        swift_beginAccess();
        uint64_t v43 = v77;
        (*v74)(v77, v42, v41);
        sub_1A6766A10();
        sub_1A6766A64((unint64_t *)&qword_1E96C1DB8, &qword_1E96C1D80);
        uint64_t v44 = (uint64_t)v76;
        sub_1A6891F40();
        (*v73)(v43, v41);
        swift_bridgeObjectRelease();
        uint64_t v45 = sub_1A6741AD0(&qword_1E96C1DC0);
        BOOL v38 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 48))(v44, 1, v45) != 1;
        sub_1A6766AA8(v44);
      }
      id v37 = v91;
    }
    objc_msgSend(v37, sel_setIsTerminalRule_, v38);
    if ((v24 & 1) == 0)
    {
      uint64_t v53 = (void *)sub_1A6891FD0();
      uint64_t v15 = v86;
      goto LABEL_39;
    }
    id v46 = objc_msgSend(v82, sel_speechVoice);
    id v47 = objc_msgSend(v46, sel_synthesisProviderVoice);

    id v48 = objc_msgSend(v47, sel_synthesizerBundleIdentifier);
    uint64_t v49 = v90;
    if (v48)
    {
      uint64_t v50 = sub_1A6892000();
      uint64_t v52 = v51;

      if (v50 == 0xD00000000000002BLL && v52 == v72)
      {
        swift_bridgeObjectRelease();
LABEL_30:
        uint64_t v55 = self;
        uint64_t v56 = (void *)sub_1A6891FD0();
        uint64_t v57 = (void *)sub_1A6891FD0();
        id v58 = objc_msgSend(v55, sel_eloquencePhonemesFromIPA_language_, v56, v57);

        uint64_t v15 = v86;
        if (!v58) {
          goto LABEL_43;
        }
        sub_1A6892000();

        v100[0] = 5988384;
        v100[1] = 0xE300000000000000;
        sub_1A6892150();
        swift_bridgeObjectRelease();
        goto LABEL_37;
      }
      char v54 = sub_1A6893120();
      swift_bridgeObjectRelease();
      if (v54) {
        goto LABEL_30;
      }
    }
    if (objc_msgSend(v82, sel_type) == (id)2)
    {
      v100[0] = 0;
      v100[1] = 0xE000000000000000;
      sub_1A6892C40();
      swift_bridgeObjectRelease();
      strcpy((char *)v100, "[[inpt PHON]] ");
      HIBYTE(v100[1]) = -18;
      unint64_t v59 = self;
      unint64_t v60 = (void *)sub_1A6891FD0();
      id v61 = objc_msgSend(v59, sel_applebetPhonemesFromIPA_, v60);

      uint64_t v15 = v86;
      if (!v61) {
        goto LABEL_49;
      }
      sub_1A6892000();

      sub_1A6892150();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v62 = self;
      uint64_t v63 = (void *)sub_1A6891FD0();
      uint64_t v64 = (void *)sub_1A6891FD0();
      id v65 = objc_msgSend(v62, sel_lhPhonemesFromIPA_language_, v63, v64);

      uint64_t v15 = v86;
      if (!v65) {
        goto LABEL_43;
      }
      sub_1A6892000();

      v100[0] = 724526428;
      v100[1] = 0xE400000000000000;
      sub_1A6892150();
      swift_bridgeObjectRelease();
    }
LABEL_37:
    sub_1A6892150();
    if (!v100[1])
    {
LABEL_43:
      id v68 = (id)AXTTSLogCommon();
      if (!v68) {
        goto LABEL_48;
      }
      uint64_t v69 = v68;
      sub_1A6892870();
      sub_1A6741AD0(&qword_1E96C1638);
      uint64_t v70 = swift_allocObject();
      *(_OWORD *)(v70 + 16) = v75;
      *(void *)(v70 + 56) = MEMORY[0x1E4FBB1A0];
      *(void *)(v70 + 64) = sub_1A6764000();
      *(void *)(v70 + 32) = v49;
      *(void *)(v70 + 40) = v93;
      swift_bridgeObjectRetain();
      sub_1A6891CA0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      sub_1A6766B08(v89);
      goto LABEL_6;
    }
    uint64_t v53 = (void *)sub_1A6891FD0();
    swift_bridgeObjectRelease();
    id v37 = v91;
LABEL_39:
    objc_msgSend(v37, sel_setReplacement_, v53);

    id v66 = objc_msgSend(v37, sel_replacement);
    if (!v66)
    {
      sub_1A6892000();
      id v66 = (id)sub_1A6891FD0();
      swift_bridgeObjectRelease();
    }
    id v67 = objc_msgSend(self, sel_processReplacementStringForSpecialCharacters_, v66);

    if (!v67)
    {
      sub_1A6892000();
      id v67 = (id)sub_1A6891FD0();
      swift_bridgeObjectRelease();
    }
    objc_msgSend(v37, sel_setReplacement_, v67);

    objc_msgSend(v83, sel_addRuleReplacement_, v37);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1A6766B08(v89);

LABEL_6:
    swift_bridgeObjectRelease();
    uint64_t v16 = v84;
    uint64_t v18 = v88;
    unint64_t v17 = v92;
LABEL_7:
    ++v17;
    v18 += 64;
    if (v16 == v17) {
      return;
    }
  }
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
}

uint64_t sub_1A6766854(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PronunciationRuleSet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A67668B8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PronunciationRuleSet();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for TTSPronunciationUtils()
{
  return self;
}

uint64_t method lookup function for TTSPronunciationUtils(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for TTSPronunciationUtils);
}

uint64_t dispatch thunk of static TTSPronunciationUtils.rulesets(for:)()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

unint64_t sub_1A6766964()
{
  unint64_t result = qword_1E96C1D90;
  if (!qword_1E96C1D90)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1E96C1D90);
  }
  return result;
}

uint64_t sub_1A67669A4(uint64_t result)
{
  if ((~result & 0xF000000000000007) != 0) {
    return swift_retain();
  }
  return result;
}

unint64_t sub_1A67669BC()
{
  unint64_t result = qword_1E96C1DA8;
  if (!qword_1E96C1DA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E96C1DA8);
  }
  return result;
}

unint64_t sub_1A6766A10()
{
  unint64_t result = qword_1E96C1DB0;
  if (!qword_1E96C1DB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E96C1DB0);
  }
  return result;
}

uint64_t sub_1A6766A64(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1A6750AC4(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1A6766AA8(uint64_t a1)
{
  uint64_t v2 = sub_1A6741AD0(&qword_1E96C1DA0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1A6766B08(uint64_t result)
{
  if ((~result & 0xF000000000000007) != 0) {
    return swift_release();
  }
  return result;
}

uint64_t sub_1A6766B20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PronunciationRuleSet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A6766B84()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

unint64_t sub_1A6766BBC()
{
  unint64_t result = qword_1E96C1DD0;
  if (!qword_1E96C1DD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E96C1DD0);
  }
  return result;
}

uint64_t sub_1A6766C10@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4 = *v2 | ((unint64_t)*((unsigned __int8 *)v2 + 4) << 32);
  unint64_t v5 = v2[2] | ((unint64_t)*((unsigned __int8 *)v2 + 12) << 32);
  unint64_t v6 = v2[4] | ((unint64_t)*((unsigned __int8 *)v2 + 20) << 32);
  sub_1A673E788(a1, (uint64_t)&v21);
  sub_1A6741AD0(&qword_1E96C1CF8);
  if (swift_dynamicCast())
  {
    long long v27 = v17;
    long long v28 = v18;
    long long v29 = v19;
    unint64_t v7 = v20[0] | ((unint64_t)LOBYTE(v20[1]) << 32);
    __int16 v25 = *(_WORD *)((char *)&v20[1] + 1);
    char v26 = HIBYTE(v20[1]);
    unint64_t v8 = v20[2] | ((unint64_t)LOBYTE(v20[3]) << 32);
    __int16 v23 = *(_WORD *)((char *)&v20[3] + 1);
    char v24 = HIBYTE(v20[3]);
    unint64_t v9 = v20[4] | ((unint64_t)LOBYTE(v20[5]) << 32);
    a2[3] = (uint64_t)&type metadata for TTSMarkup.Prosody;
    a2[4] = (uint64_t)&protocol witness table for TTSMarkup.Prosody;
    uint64_t result = swift_allocObject();
    *a2 = result;
    long long v11 = v28;
    *(_OWORD *)(result + 16) = v27;
    *(_OWORD *)(result + 32) = v11;
    *(_OWORD *)(result + 48) = v29;
    if (HIDWORD(v4) <= 0xFE) {
      unint64_t v12 = v4;
    }
    else {
      unint64_t v12 = v7;
    }
    *(unsigned char *)(result + 68) = BYTE4(v12);
    *(_DWORD *)(result + 64) = v12;
    *(_WORD *)(result + 69) = v25;
    *(unsigned char *)(result + 71) = v26;
    if (v6 >> 34 <= 0x3E) {
      unint64_t v13 = v6;
    }
    else {
      unint64_t v13 = v8;
    }
    *(unsigned char *)(result + 76) = BYTE4(v13);
    *(_DWORD *)(result + 72) = v13;
    *(_WORD *)(result + 77) = v23;
    *(unsigned char *)(result + 79) = v24;
    if (HIDWORD(v5) <= 0xFE) {
      unint64_t v14 = v5;
    }
    else {
      unint64_t v14 = v9;
    }
    *(unsigned char *)(result + 84) = BYTE4(v14);
    *(_DWORD *)(result + 80) = v14;
  }
  else
  {
    long long v19 = 0u;
    memset(v20, 0, 21);
    long long v18 = 0u;
    long long v17 = 0u;
    uint64_t v15 = sub_1A6750210((uint64_t)&v17, &qword_1E96C1DD8);
    BYTE4(v17) = BYTE4(v4);
    LODWORD(v17) = v4;
    BYTE4(v27) = BYTE4(v6);
    LODWORD(v27) = v6;
    char v22 = BYTE4(v5);
    int v21 = v5;
    MEMORY[0x1F4188790](v15);
    a2[3] = (uint64_t)&type metadata for TTSMarkup.Prosody;
    a2[4] = (uint64_t)&protocol witness table for TTSMarkup.Prosody;
    uint64_t v16 = swift_allocObject();
    *a2 = v16;
    return TTSMarkup.Prosody.init(rate:pitch:volume:speech:)((int *)&v17, (int *)&v27, &v21, (uint64_t (*)(void))sub_1A6766E88, v16 + 16);
  }
  return result;
}

uint64_t sub_1A6766E88@<X0>(uint64_t a1@<X8>)
{
  static TTSMarkup.SpeechBuilder.buildExpression(_:)(v4, *(void *)(v1 + 16));
  static TTSMarkup.SpeechBuilder.buildBlock(_:)((uint64_t)v4, a1);
  return sub_1A6741A24((uint64_t)v4);
}

uint64_t sub_1A6766ED0()
{
  return sub_1A6767528(85);
}

char *TTSMarkup.SpeechText.phonemes(_:_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v9 = *(void *)(v4 + 16);
  uint64_t v8 = *(void *)(v4 + 24);
  char v13 = *a1;
  a4[3] = (uint64_t)&type metadata for TTSMarkup.Phoneme;
  a4[4] = (uint64_t)&protocol witness table for TTSMarkup.Phoneme;
  uint64_t v10 = swift_allocObject();
  uint64_t v11 = v10 + 16;
  *a4 = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return TTSMarkup.Phoneme.init(alphabet:phonemes:orthography:)(&v13, a2, a3, v9, v8, v11);
}

uint64_t sub_1A6766F84()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t TTSMarkup.SpeechText.substitute(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v6 = *(void **)v3;
  uint64_t v5 = *(void *)(v3 + 8);
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v7 = *(void *)(v3 + 24);
  if (a2)
  {
    MEMORY[0x1F4188790](a1);
    a3[3] = (uint64_t)&type metadata for TTSMarkup.Sub;
    a3[4] = (uint64_t)&protocol witness table for TTSMarkup.Sub;
    uint64_t v11 = swift_allocObject();
    unint64_t v12 = (void *)(v11 + 16);
    *a3 = v11;
    swift_bridgeObjectRetain();
    return sub_1A6821A80(a1, a2, (uint64_t (*)(void))sub_1A6767170, v12);
  }
  else
  {
    a3[3] = (uint64_t)&type metadata for TTSMarkup.SpeechText;
    a3[4] = (uint64_t)&protocol witness table for TTSMarkup.SpeechText;
    unint64_t v14 = (void *)swift_allocObject();
    *a3 = (uint64_t)v14;
    void v14[2] = v6;
    v14[3] = v5;
    void v14[4] = v8;
    v14[5] = v7;
    id v15 = v6;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_1A6767128()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t sub_1A6767170@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = (void *)v1[2];
  uint64_t v3 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v5 = v1[5];
  v10[3] = &type metadata for TTSMarkup.SpeechText;
  void v10[4] = &protocol witness table for TTSMarkup.SpeechText;
  uint64_t v7 = (void *)swift_allocObject();
  v10[0] = v7;
  long long v7[2] = v4;
  v7[3] = v3;
  v7[4] = v6;
  void v7[5] = v5;
  id v8 = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static TTSMarkup.SpeechBuilder.buildExpression(_:)(v11, v10);
  sub_1A6741A24((uint64_t)v10);
  static TTSMarkup.SpeechBuilder.buildBlock(_:)((uint64_t)v11, a1);
  return sub_1A6741A24((uint64_t)v11);
}

uint64_t sub_1A6767220()
{
  swift_bridgeObjectRelease();
  sub_1A6741A24(v0 + 32);
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 80, 7);
}

uint64_t sub_1A6767268@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a1 + 4);
  int v11 = *a1;
  BOOL v12 = v7 != 0;
  char v14 = -1;
  int v13 = 0;
  char v16 = -4;
  int v15 = 0;
  v10[3] = a2;
  void v10[4] = a3;
  id v8 = sub_1A675026C(v10);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(v8, v4, a2);
  sub_1A6766C10((uint64_t)v10, a4);
  return sub_1A6741A24((uint64_t)v10);
}

uint64_t sub_1A6767328@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  int v7 = *a1;
  char v8 = *((unsigned char *)a1 + 4);
  char v13 = -1;
  int v12 = 0;
  char v15 = -1;
  int v14 = 0;
  char v17 = v8;
  int v16 = v7;
  void v11[3] = a2;
  UInt8 v11[4] = a3;
  uint64_t v9 = sub_1A675026C(v11);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(v9, v4, a2);
  sub_1A6766C10((uint64_t)v11, a4);
  return sub_1A6741A24((uint64_t)v11);
}

uint64_t sub_1A67673D4@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  int v7 = *a1;
  BOOL v8 = *((unsigned char *)a1 + 4) == 0;
  char v14 = -1;
  int v13 = 0;
  char v9 = 1;
  if (v8) {
    char v9 = 0;
  }
  int v15 = v7;
  char v16 = v9;
  char v18 = -4;
  int v17 = 0;
  uint64_t v12[3] = a2;
  void v12[4] = a3;
  uint64_t v10 = sub_1A675026C(v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(v10, v4, a2);
  sub_1A6766C10((uint64_t)v12, a4);
  return sub_1A6741A24((uint64_t)v12);
}

uint64_t TTSMarkupSpeech.emphasis(_:)@<X0>(char *a1@<X0>, uint64_t *a2@<X8>)
{
  char v5 = *a1;
  a2[3] = (uint64_t)&type metadata for TTSMarkup.Emphasis;
  a2[4] = (uint64_t)&protocol witness table for TTSMarkup.Emphasis;
  uint64_t v3 = swift_allocObject();
  *a2 = v3;
  return TTSMarkup.Emphasis.init(_:speech:)(&v5, sub_1A676751C, v3 + 16);
}

uint64_t sub_1A6767520()
{
  return sub_1A6767528(65);
}

uint64_t sub_1A6767528(uint64_t a1)
{
  swift_bridgeObjectRelease();
  sub_1A6741A24(v1 + 24);

  return MEMORY[0x1F4186498](v1, a1, 7);
}

uint64_t TTSMarkupSpeech.language(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  a3[3] = (uint64_t)&type metadata for TTSMarkup.Language;
  a3[4] = (uint64_t)&protocol witness table for TTSMarkup.Language;
  uint64_t v6 = swift_allocObject();
  int v7 = (void *)(v6 + 16);
  *a3 = v6;
  swift_bridgeObjectRetain();
  return TTSMarkup.Language.init(languageCode:speech:)(a1, a2, sub_1A676751C, v7);
}

uint64_t sub_1A6767614()
{
  swift_bridgeObjectRelease();
  sub_1A6741A24(v0 + 24);
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 80, 7);
}

uint64_t TTSMarkupSpeech.preferringSelection(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  a3[3] = (uint64_t)&type metadata for TTSMarkup.Voice;
  a3[4] = (uint64_t)&protocol witness table for TTSMarkup.Voice;
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = v6 + 16;
  *a3 = v6;
  swift_bridgeObjectRetain();
  return TTSMarkup.Voice.init(voiceSelectionClientKey:speech:)(a1, a2, sub_1A676751C, v7);
}

uint64_t sub_1A67676FC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1A6741A24(v0 + 56);
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 112, 7);
}

uint64_t TTSMarkupSpeech.preferringAccessibilitySelections()@<X0>(uint64_t *a1@<X8>)
{
  return TTSMarkupSpeech.preferringSelection(_:)(0x6269737365636361, 0xED00007974696C69, a1);
}

uint64_t TTSMarkupSpeech.rate(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if ((a1 & 0x100000000) != 0)
  {
    a4[3] = a2;
    a4[4] = a3;
    uint64_t v7 = sub_1A675026C(a4);
    BOOL v8 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16);
    return v8(v7, v4, a2);
  }
  else
  {
    int v9 = a1;
    char v10 = 1;
    return sub_1A6767268(&v9, a2, a3, a4);
  }
}

uint64_t TTSMarkupSpeech.rate(_:)@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (*a1 == 5)
  {
    a4[3] = a2;
    a4[4] = a3;
    uint64_t v6 = sub_1A675026C(a4);
    uint64_t v7 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16);
    return v7(v6, v4, a2);
  }
  else
  {
    int v9 = *a1;
    char v10 = 0;
    return sub_1A6767268(&v9, a2, a3, a4);
  }
}

uint64_t TTSMarkupSpeech.pitch(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if ((a1 & 0x100000000) != 0)
  {
    a4[3] = a2;
    a4[4] = a3;
    uint64_t v7 = sub_1A675026C(a4);
    BOOL v8 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16);
    return v8(v7, v4, a2);
  }
  else
  {
    int v9 = a1;
    char v10 = -126;
    return sub_1A6767328(&v9, a2, a3, a4);
  }
}

uint64_t TTSMarkupSpeech.pitch(_:)@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (*a1 == 5)
  {
    a4[3] = a2;
    a4[4] = a3;
    uint64_t v6 = sub_1A675026C(a4);
    uint64_t v7 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16);
    return v7(v6, v4, a2);
  }
  else
  {
    int v9 = *a1;
    char v10 = 0;
    return sub_1A6767328(&v9, a2, a3, a4);
  }
}

uint64_t TTSMarkupSpeech.volume(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if ((a1 & 0x100000000) != 0)
  {
    a4[3] = a2;
    a4[4] = a3;
    int v9 = sub_1A675026C(a4);
    char v10 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16);
    return v10(v9, v4, a2);
  }
  else
  {
    sub_1A676CBE4((uint64_t)&v13, *(float *)&a1);
    int v11 = v13;
    char v12 = v14;
    return sub_1A67673D4(&v11, a2, a3, a4);
  }
}

uint64_t TTSMarkupSpeech.volume(_:)@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (*a1 == 6)
  {
    a4[3] = a2;
    a4[4] = a3;
    uint64_t v6 = sub_1A675026C(a4);
    uint64_t v7 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16);
    return v7(v6, v4, a2);
  }
  else
  {
    int v9 = *a1;
    char v10 = 0;
    return sub_1A67673D4(&v9, a2, a3, a4);
  }
}

uint64_t TTSMarkupSpeech.voice(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  if (a2)
  {
    MEMORY[0x1F4188790](a1);
    a5[3] = (uint64_t)&type metadata for TTSMarkup.Voice;
    a5[4] = (uint64_t)&protocol witness table for TTSMarkup.Voice;
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = v10 + 16;
    *a5 = v10;
    swift_bridgeObjectRetain();
    return TTSMarkup.Voice.init(named:speech:)(a1, a2, sub_1A676751C, v11);
  }
  else
  {
    a5[3] = a3;
    a5[4] = a4;
    int v13 = sub_1A675026C(a5);
    char v14 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16);
    return v14(v13, v5, a3);
  }
}

uint64_t sub_1A6767CA0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 32);
  long long v8 = *(_OWORD *)(v1 + 16);
  uint64_t v6 = v8;
  uint64_t v4 = sub_1A675026C(v7);
  (*(void (**)(uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(v4, v3);
  static TTSMarkup.SpeechBuilder.buildExpression(_:)(v9, v7);
  sub_1A6741A24((uint64_t)v7);
  static TTSMarkup.SpeechBuilder.buildBlock(_:)((uint64_t)v9, a1);
  return sub_1A6741A24((uint64_t)v9);
}

uint64_t TTSMarkupSpeech.marker(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  swift_retain();
  TTSMarkupSpeech.tap(_:)((uint64_t)sub_1A6767E28, v10, a3, a4, a5);

  return swift_release();
}

uint64_t sub_1A6767DF0()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t TTSMarkup.SpeechText.word(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v8 = *(void **)v3;
  uint64_t v7 = *(void *)(v3 + 8);
  uint64_t v10 = *(void *)(v3 + 16);
  uint64_t v9 = *(void *)(v3 + 24);
  uint64_t v11 = (void *)swift_allocObject();
  id v11[2] = a1;
  void v11[3] = a2;
  UInt8 v11[4] = v8;
  uint64_t v11[5] = v7;
  v11[6] = v10;
  v11[7] = v9;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = sub_1A6767F40;
  *(void *)(v12 + 24) = v11;
  id v13 = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  TTSMarkupSpeech.tap(_:)((uint64_t)sub_1A6767E28, v12, (uint64_t)&type metadata for TTSMarkup.SpeechText, (uint64_t)&protocol witness table for TTSMarkup.SpeechText, a3);
  swift_release();
  return swift_release();
}

{
  uint64_t v3;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;

  long long v8 = *(void **)v3;
  uint64_t v7 = *(void *)(v3 + 8);
  uint64_t v10 = *(void *)(v3 + 16);
  uint64_t v9 = *(void *)(v3 + 24);
  uint64_t v11 = (void *)swift_allocObject();
  id v11[2] = a1;
  void v11[3] = a2;
  UInt8 v11[4] = v8;
  uint64_t v11[5] = v7;
  v11[6] = v10;
  v11[7] = v9;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = sub_1A6768090;
  *(void *)(v12 + 24) = v11;
  id v13 = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  TTSMarkupSpeech.tap(_:)((uint64_t)sub_1A6767E28, v12, (uint64_t)&type metadata for TTSMarkup.SpeechText, (uint64_t)&protocol witness table for TTSMarkup.SpeechText, a3);
  swift_release();
  return swift_release();
}

uint64_t sub_1A6767F40(uint64_t result)
{
  if (!*(unsigned char *)(result + 16)) {
    return (*(uint64_t (**)(void, void, void, void))(v1 + 16))(*(void *)result, *(void *)(result + 8), *(void *)(v1 + 48), *(void *)(v1 + 56));
  }
  return result;
}

uint64_t sub_1A6768090(uint64_t result)
{
  if (!*(unsigned char *)(result + 16)) {
    return (*(uint64_t (**)(void, void, void, void, void))(v1 + 16))(*(void *)result, *(void *)(result + 8), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(result + 24));
  }
  return result;
}

uint64_t TTSMarkup.SpeechText.sentence(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v8 = *(void **)v3;
  uint64_t v7 = *(void *)(v3 + 8);
  uint64_t v10 = *(void *)(v3 + 16);
  uint64_t v9 = *(void *)(v3 + 24);
  uint64_t v11 = (void *)swift_allocObject();
  id v11[2] = a1;
  void v11[3] = a2;
  UInt8 v11[4] = v8;
  uint64_t v11[5] = v7;
  v11[6] = v10;
  v11[7] = v9;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = sub_1A67681E4;
  *(void *)(v12 + 24) = v11;
  id v13 = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  TTSMarkupSpeech.tap(_:)((uint64_t)sub_1A6767E28, v12, (uint64_t)&type metadata for TTSMarkup.SpeechText, (uint64_t)&protocol witness table for TTSMarkup.SpeechText, a3);
  swift_release();
  return swift_release();
}

{
  uint64_t v3;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;

  long long v8 = *(void **)v3;
  uint64_t v7 = *(void *)(v3 + 8);
  uint64_t v10 = *(void *)(v3 + 16);
  uint64_t v9 = *(void *)(v3 + 24);
  uint64_t v11 = (void *)swift_allocObject();
  id v11[2] = a1;
  void v11[3] = a2;
  UInt8 v11[4] = v8;
  uint64_t v11[5] = v7;
  v11[6] = v10;
  v11[7] = v9;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = sub_1A6768338;
  *(void *)(v12 + 24) = v11;
  id v13 = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  TTSMarkupSpeech.tap(_:)((uint64_t)sub_1A6767E28, v12, (uint64_t)&type metadata for TTSMarkup.SpeechText, (uint64_t)&protocol witness table for TTSMarkup.SpeechText, a3);
  swift_release();
  return swift_release();
}

uint64_t sub_1A67681E4(uint64_t result)
{
  if (*(unsigned char *)(result + 16) == 1) {
    return (*(uint64_t (**)(void, void, void, void))(v1 + 16))(*(void *)result, *(void *)(result + 8), *(void *)(v1 + 48), *(void *)(v1 + 56));
  }
  return result;
}

uint64_t sub_1A6768338(uint64_t result)
{
  if (*(unsigned char *)(result + 16) == 1) {
    return (*(uint64_t (**)(void, void, void, void, void))(v1 + 16))(*(void *)result, *(void *)(result + 8), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(result + 24));
  }
  return result;
}

uint64_t TTSMarkup.SpeechText.paragraph(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v8 = *(void **)v3;
  uint64_t v7 = *(void *)(v3 + 8);
  uint64_t v10 = *(void *)(v3 + 16);
  uint64_t v9 = *(void *)(v3 + 24);
  uint64_t v11 = (void *)swift_allocObject();
  id v11[2] = a1;
  void v11[3] = a2;
  UInt8 v11[4] = v8;
  uint64_t v11[5] = v7;
  v11[6] = v10;
  v11[7] = v9;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = sub_1A6768490;
  *(void *)(v12 + 24) = v11;
  id v13 = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  TTSMarkupSpeech.tap(_:)((uint64_t)sub_1A6767E28, v12, (uint64_t)&type metadata for TTSMarkup.SpeechText, (uint64_t)&protocol witness table for TTSMarkup.SpeechText, a3);
  swift_release();
  return swift_release();
}

{
  uint64_t v3;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;

  long long v8 = *(void **)v3;
  uint64_t v7 = *(void *)(v3 + 8);
  uint64_t v10 = *(void *)(v3 + 16);
  uint64_t v9 = *(void *)(v3 + 24);
  uint64_t v11 = (void *)swift_allocObject();
  id v11[2] = a1;
  void v11[3] = a2;
  UInt8 v11[4] = v8;
  uint64_t v11[5] = v7;
  v11[6] = v10;
  v11[7] = v9;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = sub_1A6768634;
  *(void *)(v12 + 24) = v11;
  id v13 = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  TTSMarkupSpeech.tap(_:)((uint64_t)sub_1A6767E28, v12, (uint64_t)&type metadata for TTSMarkup.SpeechText, (uint64_t)&protocol witness table for TTSMarkup.SpeechText, a3);
  swift_release();
  return swift_release();
}

uint64_t sub_1A6768490(uint64_t result)
{
  if (*(unsigned char *)(result + 16) == 2) {
    return (*(uint64_t (**)(void, void, void, void))(v1 + 16))(*(void *)result, *(void *)(result + 8), *(void *)(v1 + 48), *(void *)(v1 + 56));
  }
  return result;
}

uint64_t sub_1A67685E4()
{
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t sub_1A6768634(uint64_t result)
{
  if (*(unsigned char *)(result + 16) == 2) {
    return (*(uint64_t (**)(void, void, void, void, void))(v1 + 16))(*(void *)result, *(void *)(result + 8), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(result + 24));
  }
  return result;
}

uint64_t sub_1A6768678(uint64_t result)
{
  unint64_t v2 = *(void *)(result + 16);
  if (v2 >> 61 == 1)
  {
    uint64_t v3 = *(uint64_t (**)(long long *))(v1 + 16);
    uint64_t v4 = *(void *)(result + 24);
    long long v5 = *(_OWORD *)result;
    char v6 = v2;
    uint64_t v7 = v4;
    return v3(&v5);
  }
  return result;
}

__n128 initializeBufferWithCopyOfBuffer for ProsodyModifier(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(void *)(a1 + 13) = *(void *)(a2 + 13);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ProsodyModifier(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 21)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 4);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = (v3 ^ 0xFF) - 1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ProsodyModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 21) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 21) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 4) = ~(_BYTE)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ProsodyModifier()
{
  return &type metadata for ProsodyModifier;
}

uint64_t TTSMarkup.Voice.init(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v27 = MEMORY[0x1E4FBC860];
  uint64_t v28 = 0;
  unint64_t v29 = 0xE000000000000000;
  char v30 = 0;
  v32[5] = 0;
  v32[6] = 0;
  uint64_t v31 = MEMORY[0x1E4FBC860];
  int v4 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v5 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0xE8))();
  if (*(void *)(v5 + 16) && (unint64_t v6 = sub_1A673F7AC(1701667182, 0xE400000000000000), (v7 & 1) != 0))
  {
    long long v8 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v6);
    uint64_t v10 = *v8;
    unint64_t v9 = v8[1];
    swift_bridgeObjectRetain();
    uint64_t v11 = swift_bridgeObjectRelease();
    uint64_t v28 = v10;
    unint64_t v29 = v9;
  }
  else
  {
    uint64_t v11 = swift_bridgeObjectRelease();
  }
  unint64_t v12 = (*(uint64_t (**)(uint64_t))((*v4 & *a1) + 0x100))(v11);
  unint64_t v13 = v12;
  if (!(v12 >> 62))
  {
    uint64_t v14 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v14) {
      goto LABEL_7;
    }
LABEL_21:
    int v17 = (void *)MEMORY[0x1E4FBC860];
LABEL_22:
    swift_bridgeObjectRelease_n();
    uint64_t v25 = sub_1A6741AD0(&qword_1E96C1D60);
    char v26 = &protocol witness table for <A> [A];

    *(void *)&long long v24 = v17;
    sub_1A673E770(&v24, (uint64_t)v32);
    sub_1A6758188((uint64_t)&v27, a2);
    return sub_1A67691EC((uint64_t)&v27);
  }
  swift_bridgeObjectRetain();
  uint64_t result = sub_1A6892EB0();
  uint64_t v14 = result;
  if (!result) {
    goto LABEL_21;
  }
LABEL_7:
  if (v14 >= 1)
  {
    uint64_t v16 = 0;
    int v17 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      if ((v13 & 0xC000000000000001) != 0) {
        id v18 = (id)MEMORY[0x1AD0BFD30](v16, v13);
      }
      else {
        id v18 = *(id *)(v13 + 8 * v16 + 32);
      }
      long long v19 = v18;
      sub_1A677BA04((uint64_t)&v22);

      if (v23)
      {
        sub_1A673E770(&v22, (uint64_t)&v24);
        sub_1A673E770(&v24, (uint64_t)&v22);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          int v17 = sub_1A676207C(0, v17[2] + 1, 1, v17);
        }
        unint64_t v21 = v17[2];
        unint64_t v20 = v17[3];
        if (v21 >= v20 >> 1) {
          int v17 = sub_1A676207C((void *)(v20 > 1), v21 + 1, 1, v17);
        }
        void v17[2] = v21 + 1;
        sub_1A673E770(&v22, (uint64_t)&v17[5 * v21 + 4]);
      }
      else
      {
        sub_1A6761FF4((uint64_t)&v22);
      }
      ++v16;
    }
    while (v14 != v16);
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

void static TTSMarkup.Voice.tag.getter(unsigned char *a1@<X8>)
{
  *a1 = 8;
}

uint64_t TTSMarkup.Voice.eventTaps.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t TTSMarkup.Voice.eventTaps.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v1 = a1;
  return result;
}

uint64_t (*TTSMarkup.Voice.eventTaps.modify())()
{
  return nullsub_19;
}

uint64_t TTSMarkup.Voice.Gender.init(rawValue:)@<X0>(char *a1@<X8>)
{
  unint64_t v2 = sub_1A6892F30();
  uint64_t result = swift_bridgeObjectRelease();
  char v4 = 3;
  if (v2 < 3) {
    char v4 = v2;
  }
  *a1 = v4;
  return result;
}

uint64_t TTSMarkup.Voice.Gender.rawValue.getter()
{
  uint64_t v1 = 1701601645;
  if (*v0 != 1) {
    uint64_t v1 = 0x656C616D6566;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6669636570736E75;
  }
}

uint64_t sub_1A6768B74(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1A6768B80(*a1, *a2);
}

uint64_t sub_1A6768B80(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xEB00000000646569;
  uint64_t v3 = 0x6669636570736E75;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v5 = 1701601645;
    }
    else {
      uint64_t v5 = 0x656C616D6566;
    }
    if (v4 == 1) {
      unint64_t v6 = 0xE400000000000000;
    }
    else {
      unint64_t v6 = 0xE600000000000000;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
  uint64_t v5 = 0x6669636570736E75;
  unint64_t v6 = 0xEB00000000646569;
  int v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1) {
      uint64_t v3 = 1701601645;
    }
    else {
      uint64_t v3 = 0x656C616D6566;
    }
    if (v7 == 1) {
      unint64_t v2 = 0xE400000000000000;
    }
    else {
      unint64_t v2 = 0xE600000000000000;
    }
  }
LABEL_15:
  if (v5 == v3 && v6 == v2) {
    char v8 = 1;
  }
  else {
    char v8 = sub_1A6893120();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1A6768C8C()
{
  return sub_1A6893250();
}

uint64_t sub_1A6768D2C()
{
  sub_1A68920F0();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1A6768DB8()
{
  return sub_1A6893250();
}

uint64_t sub_1A6768E54@<X0>(char *a1@<X8>)
{
  return TTSMarkup.Voice.Gender.init(rawValue:)(a1);
}

void sub_1A6768E60(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xEB00000000646569;
  unint64_t v4 = 0xE400000000000000;
  uint64_t v5 = 1701601645;
  if (v2 != 1)
  {
    uint64_t v5 = 0x656C616D6566;
    unint64_t v4 = 0xE600000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x6669636570736E75;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t TTSMarkup.Voice._content.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1A673E788(v1 + 40, a1);
}

uint64_t TTSMarkup.Voice._content.setter(long long *a1)
{
  uint64_t v3 = v1 + 40;
  sub_1A6741A24(v3);

  return sub_1A673E770(a1, v3);
}

uint64_t (*TTSMarkup.Voice._content.modify())()
{
  return nullsub_19;
}

uint64_t TTSMarkup.Voice.content.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1A673E788(v1 + 40, a1);
}

uint64_t TTSMarkup.Voice.voiceSelectionClientKey.getter()
{
  uint64_t v1 = *(void *)(v0 + 80);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TTSMarkup.Voice.voiceSelectionClientKey.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 80) = a1;
  *(void *)(v2 + 88) = a2;
  return result;
}

uint64_t (*TTSMarkup.Voice.voiceSelectionClientKey.modify())()
{
  return nullsub_19;
}

uint64_t TTSMarkup.Voice.init(named:speech:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  *(unsigned char *)(a4 + 24) = 0;
  uint64_t v4 = MEMORY[0x1E4FBC860];
  *(void *)(a4 + 32) = MEMORY[0x1E4FBC860];
  *(void *)(a4 + 80) = 0;
  *(void *)(a4 + 88) = 0;
  *(void *)a4 = v4;
  *(void *)(a4 + 8) = a1;
  *(void *)(a4 + 16) = a2;
  return a3();
}

uint64_t TTSMarkup.Voice.init(gender:spokenLanguages:speech:)@<X0>(uint64_t (*a1)(uint64_t)@<X2>, uint64_t a2@<X8>)
{
  uint64_t v4 = swift_bridgeObjectRelease();
  uint64_t v5 = MEMORY[0x1E4FBC860];
  *(unsigned char *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = v5;
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 16) = 0xE000000000000000;
  return a1(v4);
}

uint64_t TTSMarkup.Voice.init(voiceSelectionClientKey:speech:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  *(unsigned char *)(a4 + 24) = 0;
  uint64_t v4 = MEMORY[0x1E4FBC860];
  *(void *)(a4 + 32) = MEMORY[0x1E4FBC860];
  *(void *)a4 = v4;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0xE000000000000000;
  *(void *)(a4 + 80) = a1;
  *(void *)(a4 + 88) = a2;
  return a3();
}

unint64_t TTSMarkup.Voice.attributes.getter()
{
  sub_1A6741AD0(&qword_1E96C1588);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1A689DC40;
  *(void *)(inited + 32) = 1701667182;
  *(void *)(inited + 40) = 0xE400000000000000;
  uint64_t v2 = *(void *)(v0 + 16);
  *(void *)(inited + 48) = *(void *)(v0 + 8);
  *(void *)(inited + 56) = v2;
  swift_bridgeObjectRetain();
  return sub_1A6742BA0(inited);
}

uint64_t TTSMarkup.Voice.accept<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t))(a3 + 80))(v3);
}

void sub_1A6769160(unsigned char *a1@<X8>)
{
  *a1 = 8;
}

unint64_t sub_1A676916C()
{
  sub_1A6741AD0(&qword_1E96C1588);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1A689DC40;
  *(void *)(inited + 32) = 1701667182;
  *(void *)(inited + 40) = 0xE400000000000000;
  uint64_t v2 = *(void *)(v0 + 16);
  *(void *)(inited + 48) = *(void *)(v0 + 8);
  *(void *)(inited + 56) = v2;
  swift_bridgeObjectRetain();
  return sub_1A6742BA0(inited);
}

uint64_t sub_1A67691D8@<X0>(uint64_t a1@<X8>)
{
  return sub_1A673E788(v1 + 40, a1);
}

uint64_t sub_1A67691EC(uint64_t a1)
{
  return a1;
}

unint64_t sub_1A6769218()
{
  unint64_t result = qword_1E96C1DE0;
  if (!qword_1E96C1DE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E96C1DE0);
  }
  return result;
}

uint64_t _s5VoiceVwxx_0(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1A6741A24(a1 + 40);

  return swift_bridgeObjectRelease();
}

uint64_t _s5VoiceVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = a2 + 40;
  long long v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v6;
  uint64_t v7 = v6;
  char v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8(a1 + 40, v5, v7);
  uint64_t v9 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v9;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s5VoiceVwca_0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_1A67588AC((uint64_t *)(a1 + 40), (uint64_t *)(a2 + 40));
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 _s5VoiceVwtk_0(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t _s5VoiceVwta_0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  sub_1A6741A24(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s5VoiceVwet_0(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s5VoiceVwst_0(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TTSMarkup.Voice()
{
  return &type metadata for TTSMarkup.Voice;
}

unsigned char *_s5VoiceV6GenderOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A676966CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TTSMarkup.Voice.Gender()
{
  return &type metadata for TTSMarkup.Voice.Gender;
}

double sub_1A67696A4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = a1;
  *(_DWORD *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 12) = 1;
  double result = 2.06158465e11;
  *(_OWORD *)(a2 + 16) = xmmword_1A689E790;
  return result;
}

uint64_t sub_1A67696C4()
{
  sub_1A685AE4C();
  uint64_t v1 = *v0;
  sub_1A6892150();
  sub_1A68926C0();
  sub_1A6892150();
  (*(void (**)(void, unint64_t))(*(void *)v1 + 208))(0, 0xE000000000000000);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A67697C8()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  sub_1A6892150();
  swift_bridgeObjectRelease();
  sub_1A6892150();
  (*(void (**)(uint64_t, unint64_t))(*(void *)v1 + 208))(0x20636E79735B5BLL, 0xE700000000000000);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1A6769888(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  if (*(unsigned __int8 *)(a1 + 52) != 255)
  {
    float v6 = *(float *)(a1 + 48);
    float v8 = *((float *)v2 + 4);
    float v7 = *((float *)v2 + 5);
    float v9 = *((float *)v2 + 6);
    if ((((unint64_t)*(unsigned __int8 *)(a1 + 52) << 32) & 0x100000000) == 0)
    {
      float v10 = 2.0;
      float v11 = 0.25;
      switch(*(_DWORD *)(a1 + 48))
      {
        case 1u:
          float v11 = 0.5;
          goto LABEL_7;
        case 2u:
          goto LABEL_9;
        case 3u:
          goto LABEL_12;
        case 4u:
          float v10 = 4.0;
          goto LABEL_12;
        default:
          goto LABEL_7;
      }
    }
    float v10 = *(float *)(a1 + 48);
    if (v6 >= 1.0)
    {
      if (v6 <= 1.0)
      {
LABEL_9:
        if ((*((unsigned char *)v2 + 12) & 1) == 0) {
          goto LABEL_14;
        }
        goto LABEL_15;
      }
LABEL_12:
      float v12 = 1.0;
      float v13 = 2.0;
      float v7 = *((float *)v2 + 4);
    }
    else
    {
      float v11 = *(float *)(a1 + 48);
LABEL_7:
      float v12 = 0.0;
      float v13 = 1.0;
      float v9 = *((float *)v2 + 4);
      float v10 = v11;
    }
    float v8 = sub_1A680FC18(v12, v13, v7, v9, v10);
    if ((*((unsigned char *)v2 + 12) & 1) == 0)
    {
LABEL_14:
      if (v8 == *((float *)v2 + 2)) {
        goto LABEL_16;
      }
    }
LABEL_15:
    *((float *)v2 + 2) = v8;
    *((unsigned char *)v2 + 12) = 0;
    uint64_t v14 = *v2;
    sub_1A6892150();
    sub_1A68926D0();
    sub_1A6892150();
    (*(void (**)(void, unint64_t))(*(void *)v14 + 208))(0, 0xE000000000000000);
    swift_bridgeObjectRelease();
  }
LABEL_16:
  unint64_t v15 = *(unsigned int *)(a1 + 56) | ((unint64_t)*(unsigned __int8 *)(a1 + 60) << 32);
  if (*(unsigned __int8 *)(a1 + 60) >> 2 <= 0x3EuLL)
  {
    sub_1A6769DF4(*((float *)v2 + 7));
    uint64_t v16 = *v2;
    sub_1A6892150();
    swift_bridgeObjectRelease();
    sub_1A6892150();
    (*(void (**)(uint64_t, unint64_t))(*(void *)v16 + 208))(0x20736162705B5BLL, 0xE700000000000000);
    swift_bridgeObjectRelease();
  }
  if (*(unsigned __int8 *)(a1 + 68) != 255)
  {
    sub_1A676CAA4();
    uint64_t v17 = *v2;
    sub_1A6892150();
    sub_1A68926D0();
    sub_1A6892150();
    (*(void (**)(void, unint64_t))(*(void *)v17 + 208))(0, 0xE000000000000000);
    swift_bridgeObjectRelease();
  }
  uint64_t result = TTSMarkupVisitor.visit(_:)((void *)(a1 + 8), a2, (uint64_t)&off_1EFB79588);
  if (v15 >> 34 <= 0x3E)
  {
    uint64_t v19 = sub_1A6769DF4(*((float *)v2 + 7));
    uint64_t v21 = v20;
    uint64_t v22 = sub_1A6769F40();
    if ((v22 & 1) == 0)
    {
      uint64_t v22 = sub_1A6769F40();
      if ((v22 & 1) == 0) {
        return swift_bridgeObjectRelease();
      }
    }
    uint64_t v23 = MEMORY[0x1F4188790](v22);
    if ((v21 & 0x1000000000000000) != 0 || !(v21 & 0x2000000000000000 | v19 & 0x1000000000000000))
    {
      sub_1A6892C30();
    }
    else
    {
      MEMORY[0x1F4188790](v23);
      if ((v21 & 0x2000000000000000) != 0)
      {
        BOOL v27 = (v19 > 0x20u || ((0x100003E01uLL >> v19) & 1) == 0)
           && (char v26 = (unsigned char *)_swift_stdlib_strtof_clocale()) != 0
           && *v26 == 0;
        char v29 = v27;
        uint64_t result = swift_bridgeObjectRelease();
        goto LABEL_37;
      }
      if ((v19 & 0x1000000000000000) != 0)
      {
        uint64_t v24 = (v21 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v25 = v19 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v24 = sub_1A6892CD0();
      }
      char v29 = sub_1A676A450(v24, v25, (void (*)(uint64_t *__return_ptr))sub_1A676A520) & 1;
    }
    uint64_t result = swift_bridgeObjectRelease();
LABEL_37:
    if ((v29 & 1) == 0) {
      return result;
    }
    uint64_t v28 = *v3;
    sub_1A680FC34();
    sub_1A6892150();
    swift_bridgeObjectRelease();
    sub_1A6892150();
    (*(void (**)(uint64_t, unint64_t))(*(void *)v28 + 208))(0x20736162705B5BLL, 0xE700000000000000);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1A6769DF4(float a1)
{
  unsigned int v2 = *((unsigned __int8 *)v1 + 4);
  unint64_t v3 = *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32);
  float v4 = sub_1A6748E8C(a1);
  if (v2 >> 6)
  {
    if (v2 >> 6 == 1)
    {
      sub_1A6748EC4(*(float *)&v3);
      sub_1A68926D0();
      return 0;
    }
    else
    {
      uint64_t v6 = HIDWORD(v3) & 0x3F;
      if (v6)
      {
        if (v6 != 1) {
          sub_1A6748E48(*(float *)&v3 / 100.0);
        }
      }
      else
      {
        sub_1A6748EC4(v4 + *(float *)&v3);
      }
      return sub_1A680FC34();
    }
  }
  else
  {
    uint64_t result = 3289389;
    switch((char)v3)
    {
      case 1:
        uint64_t result = 13869;
        break;
      case 2:
        uint64_t result = 12331;
        break;
      case 3:
        uint64_t result = 13867;
        break;
      case 4:
        uint64_t result = 3289387;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t sub_1A6769F40()
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v0 = sub_1A6892180();
  if (v1)
  {
    uint64_t v2 = v0;
    uint64_t v3 = v1;
    do
    {
      uint64_t v6 = sub_1A6892180();
      if (!v7)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return 1;
      }
      if (v2 == v6 && v3 == v7)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        char v4 = sub_1A6893120();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v4 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return 0;
        }
      }
      uint64_t v2 = sub_1A6892180();
      uint64_t v3 = v5;
    }
    while (v5);
  }
  swift_bridgeObjectRelease();
  sub_1A6892180();
  uint64_t v9 = v8;
  swift_bridgeObjectRelease();
  BOOL v10 = v9 == 0;
  swift_bridgeObjectRelease();
  return v10;
}

void sub_1A676A0A8()
{
  uint64_t v1 = self;
  uint64_t v2 = (void *)sub_1A6891FD0();
  id v3 = objc_msgSend(v1, sel_applebetPhonemesFromIPA_, v2);

  if (v3)
  {
    sub_1A6892000();

    uint64_t v4 = *v0;
    sub_1A6892C40();
    swift_bridgeObjectRelease();
    strcpy((char *)v5, "[[inpt PHON]] ");
    HIBYTE(v5[1]) = -18;
    sub_1A6892150();
    swift_bridgeObjectRelease();
    sub_1A6892150();
    (*(void (**)(void, void))(*(void *)v4 + 208))(v5[0], v5[1]);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1A676A210(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)v1 + 208))(*(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t sub_1A676A25C(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(result + 8) != 14)
  {
    uint64_t v4 = result;
    sub_1A6764048();
    if (sub_1A6891FC0())
    {
      (*(void (**)(uint64_t, unint64_t))(**(void **)v2 + 208))(0x4C20726168635B5BLL, 0xED00005D5D4C5254);
      TTSMarkupVisitor.visit(_:)((void *)(v4 + 16), a2, (uint64_t)&off_1EFB79588);
      return (*(uint64_t (**)(uint64_t, unint64_t))(**(void **)v2 + 208))(0x4E20726168635B5BLL, 0xED00005D5D4D524FLL);
    }
    else
    {
      uint64_t result = sub_1A6891FC0();
      if (result)
      {
        (*(void (**)(uint64_t, unint64_t))(**(void **)v2 + 208))(0x4C2072626D6E5B5BLL, 0xED00005D5D4C5254);
        TTSMarkupVisitor.visit(_:)((void *)(v4 + 16), a2, (uint64_t)&off_1EFB79588);
        return (*(uint64_t (**)(uint64_t, unint64_t))(**(void **)v2 + 208))(0x4E2072626D6E5B5BLL, 0xED00005D5D4D524FLL);
      }
    }
  }
  return result;
}

uint64_t sub_1A676A450(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  if (a1)
  {
    a3(&var2);
    if (!v3) {
      char v4 = var2;
    }
  }
  else
  {
    ((void (*)(uint64_t *__return_ptr, void, void))a3)((uint64_t *)((char *)&var2 + 1), 0, 0);
    if (!v3) {
      char v4 = BYTE1(var2);
    }
  }
  return v4 & 1;
}

unsigned char *sub_1A676A4B0@<X0>(unsigned char *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3 = *result;
  BOOL v4 = v3 > 0x20;
  uint64_t v5 = (1 << v3) & 0x100003E01;
  BOOL v6 = v4 || v5 == 0;
  BOOL v7 = v6 && (result = (unsigned char *)_swift_stdlib_strtof_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

void *sub_1A676A520@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

uint64_t sub_1A676A564(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 40);
}

uint64_t destroy for SpeechStringIntervalTree()
{
  return swift_release();
}

uint64_t sub_1A676A574(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_retain();
  return a1;
}

uint64_t sub_1A676A5BC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  int v4 = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  return a1;
}

__n128 _s6MarkerVwtk(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_1A676A640(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

uint64_t _s5PauseVwet(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s5PauseVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for PlainTalkWriter()
{
  return sub_1A674B1C8();
}

uint64_t TTSMarkup.Prosody.accept<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t))(a3 + 64))(v3);
}

__n128 TTSMarkup.Prosody.init(_:)@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&v76[0] = MEMORY[0x1E4FBC860];
  *(_DWORD *)unint64_t v77 = 0;
  v77[4] = -1;
  *(_DWORD *)&v77[8] = 0;
  v77[12] = -4;
  *(_DWORD *)&v77[16] = 0;
  v77[20] = -1;
  unint64_t v5 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x100))();
  unint64_t v6 = v5;
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = sub_1A6892EB0();
  }
  else
  {
    uint64_t v7 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  BOOL v10 = (void *)MEMORY[0x1E4FBC860];
  if (v7)
  {
    if (v7 < 1)
    {
      __break(1u);
      goto LABEL_53;
    }
    for (uint64_t i = 0; i != v7; ++i)
    {
      if ((v6 & 0xC000000000000001) != 0) {
        id v12 = (id)MEMORY[0x1AD0BFD30](i, v6);
      }
      else {
        id v12 = *(id *)(v6 + 8 * i + 32);
      }
      float v13 = v12;
      sub_1A677BA04((uint64_t)&v71);

      if (v72)
      {
        sub_1A673E770(&v71, (uint64_t)&v73);
        sub_1A673E770(&v73, (uint64_t)&v71);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          BOOL v10 = sub_1A676207C(0, v10[2] + 1, 1, v10);
        }
        unint64_t v15 = v10[2];
        unint64_t v14 = v10[3];
        if (v15 >= v14 >> 1) {
          BOOL v10 = sub_1A676207C((void *)(v14 > 1), v15 + 1, 1, v10);
        }
        v10[2] = v15 + 1;
        sub_1A673E770(&v71, (uint64_t)&v10[5 * v15 + 4]);
      }
      else
      {
        sub_1A6761FF4((uint64_t)&v71);
      }
    }
  }
  swift_bridgeObjectRelease_n();
  uint64_t v74 = sub_1A6741AD0(&qword_1E96C1D60);
  long long v75 = &protocol witness table for <A> [A];
  *(void *)&long long v73 = v10;
  uint64_t v16 = sub_1A673E770(&v73, (uint64_t)v76 + 8);
  uint64_t v17 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *a1) + 0xE8);
  uint64_t v18 = v17(v16);
  if (!*(void *)(v18 + 16)) {
    goto LABEL_23;
  }
  unint64_t v19 = sub_1A673F7AC(1702125938, 0xE400000000000000);
  if ((v20 & 1) == 0) {
    goto LABEL_23;
  }
  uint64_t v21 = (uint64_t *)(*(void *)(v18 + 56) + 16 * v19);
  uint64_t v22 = *v21;
  uint64_t v23 = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  TTSMarkup.Prosody.PredefinedRate.init(rawValue:)((char *)&v73);
  uint64_t v24 = v73;
  if (v73 == 5)
  {
    uint64_t v25 = sub_1A6831C74();
    swift_beginAccess();
    char v26 = *(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)*v25 + 144);
    swift_retain();
    LODWORD(v27) = v26(v22, v23, &unk_1EFB7CD18);
    uint64_t v29 = v28;
    swift_release();
    if (v29)
    {
      swift_bridgeObjectRelease();
      uint64_t v24 = COERCE_UNSIGNED_INT(v27 / 100.0) | 0x100000000;
      goto LABEL_22;
    }
LABEL_23:
    uint64_t v30 = swift_bridgeObjectRelease();
    goto LABEL_24;
  }
LABEL_22:
  uint64_t v30 = swift_bridgeObjectRelease();
  *(_DWORD *)unint64_t v77 = v24;
  v77[4] = BYTE4(v24);
LABEL_24:
  uint64_t v31 = v17(v30);
  if (!*(void *)(v31 + 16)) {
    goto LABEL_30;
  }
  unint64_t v32 = sub_1A673F7AC(0x656D756C6F76, 0xE600000000000000);
  if ((v33 & 1) == 0) {
    goto LABEL_30;
  }
  id v34 = (uint64_t *)(*(void *)(v31 + 56) + 16 * v32);
  uint64_t v35 = *v34;
  uint64_t v36 = v34[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  TTSMarkup.Prosody.PredefinedVolume.init(rawValue:)((char *)&v73);
  uint64_t v37 = v73;
  if (v73 == 6)
  {
    BOOL v38 = sub_1A6831C74();
    swift_beginAccess();
    char v39 = *(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)*v38 + 160);
    swift_retain();
    unsigned int v40 = v39(v35, v36, &unk_1EFB7CD78);
    uint64_t v42 = v41;
    swift_release();
    if (v42)
    {
      swift_bridgeObjectRelease();
      uint64_t v37 = v40 | 0x100000000;
      goto LABEL_29;
    }
LABEL_30:
    uint64_t v43 = swift_bridgeObjectRelease();
    goto LABEL_31;
  }
LABEL_29:
  uint64_t v43 = swift_bridgeObjectRelease();
  *(_DWORD *)&v77[16] = v37;
  v77[20] = BYTE4(v37);
LABEL_31:
  uint64_t v44 = v17(v43);
  if (!*(void *)(v44 + 16) || (unint64_t v45 = sub_1A673F7AC(0x6863746970, 0xE500000000000000), (v46 & 1) == 0))
  {

    swift_bridgeObjectRelease();
    goto LABEL_37;
  }
  id v47 = (uint64_t *)(*(void *)(v44 + 56) + 16 * v45);
  uint64_t v7 = *v47;
  unint64_t v6 = v47[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  TTSMarkup.Prosody.PredefinedPitch.init(rawValue:)((char *)&v73);
  unint64_t v48 = v73;
  if (v73 == 5)
  {
    uint64_t v49 = sub_1A6831C74();
    swift_beginAccess();
    uint64_t v50 = *(uint64_t (**)(uint64_t, unint64_t, void *))(*(void *)*v49 + 144);
    swift_retain();
    unsigned int v51 = v50(v7, v6, &unk_1EFB7CD48);
    uint64_t v53 = v52;
    swift_release();
    if (v53)
    {
      swift_bridgeObjectRelease();
      unint64_t v48 = v51 | 0x4000000000;
      goto LABEL_49;
    }
    swift_beginAccess();
    BOOL v10 = (void *)*v49;
    uint64_t v78 = MEMORY[0x1E4FBC860];
    swift_retain();
    sub_1A674CBF0(0, 3, 0);
    uint64_t v56 = v78;
    unint64_t v2 = *(void *)(v78 + 16);
    unint64_t v9 = *(void *)(v78 + 24);
    unint64_t v57 = v9 >> 1;
    unint64_t v8 = v2 + 1;
    if (v9 >> 1 > v2)
    {
LABEL_41:
      *(void *)(v56 + 16) = v8;
      uint64_t v58 = v56 + 16 * v2;
      *(void *)(v58 + 32) = 31304;
      *(void *)(v58 + 40) = 0xE200000000000000;
      uint64_t v78 = v56;
      int64_t v59 = v2 + 2;
      if (v57 <= v8)
      {
        unint64_t v69 = v8;
        int64_t v70 = v59;
        sub_1A674CBF0((char *)(v9 > 1), v59, 1);
        int64_t v59 = v70;
        unint64_t v8 = v69;
        uint64_t v56 = v78;
      }
      *(void *)(v56 + 16) = v59;
      uint64_t v60 = v56 + 16 * v8;
      *(void *)(v60 + 32) = 29811;
      *(void *)(v60 + 40) = 0xE200000000000000;
      uint64_t v78 = v56;
      unint64_t v62 = *(void *)(v56 + 16);
      unint64_t v61 = *(void *)(v56 + 24);
      unint64_t v63 = v62 + 1;
      if (v62 >= v61 >> 1)
      {
        sub_1A674CBF0((char *)(v61 > 1), v62 + 1, 1);
        unint64_t v63 = v62 + 1;
        uint64_t v56 = v78;
      }
      *(void *)(v56 + 16) = v63;
      uint64_t v64 = v56 + 16 * v62;
      *(void *)(v64 + 32) = 37;
      *(void *)(v64 + 40) = 0xE100000000000000;
      unsigned int v65 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*v10 + 168))(v7, v6, v56);
      uint64_t v67 = v66;
      swift_release();
      swift_release();
      if (v67 && (TTSMarkup.Prosody.RelativePitchUnit.init(rawValue:)((char *)&v78), v78 != 3)) {
        unint64_t v48 = v65 | ((unint64_t)v78 << 32) | 0xFFFFFF8000000000;
      }
      else {
        unint64_t v48 = 0xFC00000000;
      }
      goto LABEL_49;
    }
LABEL_53:
    unint64_t v68 = v8;
    sub_1A674CBF0((char *)(v9 > 1), v8, 1);
    unint64_t v8 = v68;
    uint64_t v56 = v78;
    unint64_t v9 = *(void *)(v78 + 24);
    unint64_t v57 = v9 >> 1;
    goto LABEL_41;
  }
LABEL_49:
  swift_bridgeObjectRelease();

  if (((v48 >> 34) & 0x3F) != 0x3F)
  {
    *(_DWORD *)&v77[8] = v48;
    v77[12] = BYTE4(v48);
  }
LABEL_37:
  long long v54 = *(_OWORD *)v77;
  *(_OWORD *)(a2 + 32) = v76[2];
  *(_OWORD *)(a2 + 48) = v54;
  *(void *)(a2 + 61) = *(void *)&v77[13];
  __n128 result = (__n128)v76[1];
  *(_OWORD *)a2 = v76[0];
  *(__n128 *)(a2 + 16) = result;
  return result;
}

void static TTSMarkup.Prosody.tag.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t TTSMarkup.Prosody.eventTaps.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t TTSMarkup.Prosody.eventTaps.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v1 = a1;
  return result;
}

uint64_t (*TTSMarkup.Prosody.eventTaps.modify())()
{
  return nullsub_19;
}

uint64_t TTSMarkup.Prosody._content.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1A673E788(v1 + 8, a1);
}

uint64_t TTSMarkup.Prosody._content.setter(long long *a1)
{
  uint64_t v3 = v1 + 8;
  sub_1A6741A24(v3);

  return sub_1A673E770(a1, v3);
}

uint64_t (*TTSMarkup.Prosody._content.modify())()
{
  return nullsub_19;
}

uint64_t TTSMarkup.Prosody.content.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1A673E788(v1 + 8, a1);
}

uint64_t TTSMarkup.Prosody.PredefinedRate.description.getter()
{
  uint64_t result = 0x776F6C732D78;
  switch(*v0)
  {
    case 1:
      uint64_t result = 2003790963;
      break;
    case 2:
      uint64_t result = 0x6D756964656DLL;
      break;
    case 3:
      uint64_t result = 1953718630;
      break;
    case 4:
      uint64_t result = 0x747361662D78;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t TTSMarkup.Prosody.PredefinedRate.rawValue.getter()
{
  uint64_t result = 0x776F6C732D78;
  switch(*v0)
  {
    case 1:
      uint64_t result = 2003790963;
      break;
    case 2:
      uint64_t result = 0x6D756964656DLL;
      break;
    case 3:
      uint64_t result = 1953718630;
      break;
    case 4:
      uint64_t result = 0x747361662D78;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t TTSMarkup.Prosody.PredefinedRate.init(rawValue:)@<X0>(char *a1@<X8>)
{
  return sub_1A676BE60(a1);
}

uint64_t sub_1A676B11C(unsigned __int8 *a1, char *a2)
{
  return sub_1A676B544(*a1, *a2);
}

uint64_t sub_1A676B128(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 29811;
    }
    else {
      uint64_t v3 = 37;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE200000000000000;
    }
    else {
      unint64_t v4 = 0xE100000000000000;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 29811;
      }
      else {
        uint64_t v6 = 37;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE200000000000000;
      }
      else {
        unint64_t v7 = 0xE100000000000000;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE200000000000000;
    uint64_t v3 = 31304;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE200000000000000;
  if (v3 != 31304)
  {
LABEL_21:
    char v8 = sub_1A6893120();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1A676B1FC(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x746E656C6973;
  unint64_t v3 = 0xE600000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 0x746E656C6973;
  switch(v4)
  {
    case 1:
      uint64_t v5 = 0x74666F732D78;
      break;
    case 2:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v5 = 1952870259;
      break;
    case 3:
      uint64_t v5 = 0x6D756964656DLL;
      break;
    case 4:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v5 = 1685417836;
      break;
    case 5:
      uint64_t v5 = 0x64756F6C2D78;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE600000000000000;
  switch(a2)
  {
    case 1:
      if (v5 == 0x74666F732D78) {
        goto LABEL_16;
      }
      goto LABEL_19;
    case 2:
      unint64_t v6 = 0xE400000000000000;
      if (v5 != 1952870259) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 3:
      if (v5 != 0x6D756964656DLL) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 4:
      unint64_t v6 = 0xE400000000000000;
      uint64_t v2 = 1685417836;
      goto LABEL_15;
    case 5:
      if (v5 != 0x64756F6C2D78) {
        goto LABEL_19;
      }
      goto LABEL_16;
    default:
LABEL_15:
      if (v5 != v2) {
        goto LABEL_19;
      }
LABEL_16:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_19:
      }
        char v7 = sub_1A6893120();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_1A676B3B0(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x776F6C2D78;
  unint64_t v3 = 0xE500000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 0x776F6C2D78;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE300000000000000;
      uint64_t v5 = 7827308;
      break;
    case 2:
      unint64_t v3 = 0xE600000000000000;
      uint64_t v5 = 0x6D756964656DLL;
      break;
    case 3:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v5 = 1751607656;
      break;
    case 4:
      unint64_t v3 = 0xE600000000000000;
      uint64_t v5 = 0x686769682D78;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE500000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE300000000000000;
      if (v5 == 7827308) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      unint64_t v6 = 0xE600000000000000;
      if (v5 != 0x6D756964656DLL) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      unint64_t v6 = 0xE400000000000000;
      uint64_t v2 = 1751607656;
      goto LABEL_12;
    case 4:
      unint64_t v6 = 0xE600000000000000;
      if (v5 != 0x686769682D78) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v5 != v2) {
        goto LABEL_16;
      }
LABEL_13:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = sub_1A6893120();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_1A676B544(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x776F6C732D78;
  unint64_t v3 = 0xE600000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 0x776F6C732D78;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v5 = 2003790963;
      break;
    case 2:
      uint64_t v5 = 0x6D756964656DLL;
      break;
    case 3:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v5 = 1953718630;
      break;
    case 4:
      uint64_t v5 = 0x747361662D78;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE600000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE400000000000000;
      if (v5 == 2003790963) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      if (v5 != 0x6D756964656DLL) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      unint64_t v6 = 0xE400000000000000;
      uint64_t v2 = 1953718630;
      goto LABEL_12;
    case 4:
      if (v5 != 0x747361662D78) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v5 != v2) {
        goto LABEL_16;
      }
LABEL_13:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = sub_1A6893120();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_1A676B6C8()
{
  return sub_1A6893250();
}

uint64_t sub_1A676B79C()
{
  return sub_1A6893250();
}

uint64_t sub_1A676B884()
{
  sub_1A68920F0();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1A676B940()
{
  return sub_1A6893250();
}

uint64_t sub_1A676BA10()
{
  return sub_1A6893250();
}

uint64_t sub_1A676BAF4@<X0>(char *a1@<X8>)
{
  return TTSMarkup.Prosody.PredefinedRate.init(rawValue:)(a1);
}

void sub_1A676BB00(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE600000000000000;
  uint64_t v3 = 0x776F6C732D78;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE400000000000000;
      uint64_t v3 = 2003790963;
      goto LABEL_3;
    case 2:
      *a1 = 0x6D756964656DLL;
      a1[1] = 0xE600000000000000;
      break;
    case 3:
      *a1 = 1953718630;
      a1[1] = 0xE400000000000000;
      break;
    case 4:
      *a1 = 0x747361662D78;
      a1[1] = 0xE600000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t sub_1A676BB98()
{
  uint64_t result = 0x776F6C732D78;
  switch(*v0)
  {
    case 1:
      uint64_t result = 2003790963;
      break;
    case 2:
      uint64_t result = 0x6D756964656DLL;
      break;
    case 3:
      uint64_t result = 1953718630;
      break;
    case 4:
      uint64_t result = 0x747361662D78;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t TTSMarkup.Prosody.Rate.description.getter()
{
  if (*(unsigned char *)(v0 + 4))
  {
    sub_1A68926D0();
    sub_1A6892150();
    return 0;
  }
  else
  {
    uint64_t result = 0x776F6C732D78;
    switch(*(_DWORD *)v0)
    {
      case 1u:
        uint64_t result = 2003790963;
        break;
      case 2u:
        uint64_t result = 0x6D756964656DLL;
        break;
      case 3u:
        uint64_t result = 1953718630;
        break;
      case 4u:
        uint64_t result = 0x747361662D78;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t TTSMarkup.Prosody.PredefinedPitch.description.getter()
{
  uint64_t result = 0x776F6C2D78;
  switch(*v0)
  {
    case 1:
      uint64_t result = 7827308;
      break;
    case 2:
      uint64_t result = 0x6D756964656DLL;
      break;
    case 3:
      uint64_t result = 1751607656;
      break;
    case 4:
      uint64_t result = 0x686769682D78;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t TTSMarkup.Prosody.PredefinedPitch.rawValue.getter()
{
  uint64_t result = 0x776F6C2D78;
  switch(*v0)
  {
    case 1:
      uint64_t result = 7827308;
      break;
    case 2:
      uint64_t result = 0x6D756964656DLL;
      break;
    case 3:
      uint64_t result = 1751607656;
      break;
    case 4:
      uint64_t result = 0x686769682D78;
      break;
    default:
      return result;
  }
  return result;
}

float TTSMarkup.Prosody.PredefinedPitch.relativePercentage.getter()
{
  return flt_1A689ECD0[*v0];
}

uint64_t TTSMarkup.Prosody.PredefinedPitch.init(rawValue:)@<X0>(char *a1@<X8>)
{
  return sub_1A676BE60(a1);
}

uint64_t sub_1A676BE60@<X0>(char *a1@<X8>)
{
  unint64_t v2 = sub_1A6892F30();
  uint64_t result = swift_bridgeObjectRelease();
  char v4 = 5;
  if (v2 < 5) {
    char v4 = v2;
  }
  *a1 = v4;
  return result;
}

uint64_t sub_1A676BEB8(unsigned __int8 *a1, char *a2)
{
  return sub_1A676B3B0(*a1, *a2);
}

uint64_t sub_1A676BEC4()
{
  return sub_1A6893250();
}

uint64_t sub_1A676BFA0()
{
  sub_1A68920F0();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1A676C064()
{
  return sub_1A6893250();
}

uint64_t sub_1A676C13C@<X0>(char *a1@<X8>)
{
  return TTSMarkup.Prosody.PredefinedPitch.init(rawValue:)(a1);
}

void sub_1A676C148(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE500000000000000;
  uint64_t v3 = 0x776F6C2D78;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE300000000000000;
      uint64_t v3 = 7827308;
      goto LABEL_3;
    case 2:
      *a1 = 0x6D756964656DLL;
      a1[1] = 0xE600000000000000;
      break;
    case 3:
      *a1 = 1751607656;
      a1[1] = 0xE400000000000000;
      break;
    case 4:
      *a1 = 0x686769682D78;
      a1[1] = 0xE600000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t sub_1A676C1E8()
{
  uint64_t result = 0x776F6C2D78;
  switch(*v0)
  {
    case 1:
      uint64_t result = 7827308;
      break;
    case 2:
      uint64_t result = 0x6D756964656DLL;
      break;
    case 3:
      uint64_t result = 1751607656;
      break;
    case 4:
      uint64_t result = 0x686769682D78;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t TTSMarkup.Prosody.RelativePitchUnit.description.getter()
{
  uint64_t v1 = 29811;
  if (*v0 != 1) {
    uint64_t v1 = 37;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 31304;
  }
}

uint64_t TTSMarkup.Prosody.RelativePitchUnit.rawValue.getter()
{
  uint64_t v1 = 29811;
  if (*v0 != 1) {
    uint64_t v1 = 37;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 31304;
  }
}

uint64_t TTSMarkup.Prosody.RelativePitchUnit.init(rawValue:)@<X0>(char *a1@<X8>)
{
  unint64_t v2 = sub_1A6892F30();
  uint64_t result = swift_bridgeObjectRelease();
  char v4 = 3;
  if (v2 < 3) {
    char v4 = v2;
  }
  *a1 = v4;
  return result;
}

void *static TTSMarkup.Prosody.RelativePitchUnit.allCases.getter()
{
  return &unk_1EFB7C408;
}

uint64_t sub_1A676C350(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1A676B128(*a1, *a2);
}

uint64_t sub_1A676C35C()
{
  return sub_1A6893250();
}

uint64_t sub_1A676C3DC()
{
  sub_1A68920F0();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1A676C448()
{
  return sub_1A6893250();
}

uint64_t sub_1A676C4C4@<X0>(char *a1@<X8>)
{
  return TTSMarkup.Prosody.RelativePitchUnit.init(rawValue:)(a1);
}

void sub_1A676C4D0(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE200000000000000;
  unint64_t v4 = 0xE200000000000000;
  uint64_t v5 = 29811;
  if (v2 != 1)
  {
    uint64_t v5 = 37;
    unint64_t v4 = 0xE100000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 31304;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1A676C50C()
{
  uint64_t v1 = 29811;
  if (*v0 != 1) {
    uint64_t v1 = 37;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 31304;
  }
}

void sub_1A676C544(void *a1@<X8>)
{
  *a1 = &unk_1EFB7C528;
}

uint64_t TTSMarkup.Prosody.Pitch.description.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 4) >> 6;
  if (v1)
  {
    if (v1 == 1)
    {
      uint64_t v3 = 0;
      sub_1A68926D0();
      sub_1A6892150();
    }
    else
    {
      uint64_t v3 = sub_1A680FC34();
      sub_1A6892150();
      swift_bridgeObjectRelease();
    }
    return v3;
  }
  else
  {
    uint64_t result = 0x776F6C2D78;
    switch(*(_DWORD *)v0)
    {
      case 1u:
        uint64_t result = 7827308;
        break;
      case 2u:
        uint64_t result = 0x6D756964656DLL;
        break;
      case 3u:
        uint64_t result = 1751607656;
        break;
      case 4u:
        uint64_t result = 0x686769682D78;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t TTSMarkup.Prosody.PredefinedVolume.description.getter()
{
  uint64_t result = 0x746E656C6973;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x74666F732D78;
      break;
    case 2:
      uint64_t result = 1952870259;
      break;
    case 3:
      uint64_t result = 0x6D756964656DLL;
      break;
    case 4:
      uint64_t result = 1685417836;
      break;
    case 5:
      uint64_t result = 0x64756F6C2D78;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t TTSMarkup.Prosody.PredefinedVolume.rawValue.getter()
{
  uint64_t result = 0x746E656C6973;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x74666F732D78;
      break;
    case 2:
      uint64_t result = 1952870259;
      break;
    case 3:
      uint64_t result = 0x6D756964656DLL;
      break;
    case 4:
      uint64_t result = 1685417836;
      break;
    case 5:
      uint64_t result = 0x64756F6C2D78;
      break;
    default:
      return result;
  }
  return result;
}

float TTSMarkup.Prosody.PredefinedVolume.amplitude.getter()
{
  return flt_1A689ECE4[*v0];
}

uint64_t TTSMarkup.Prosody.PredefinedVolume.init(rawValue:)@<X0>(char *a1@<X8>)
{
  unint64_t v2 = sub_1A6892F30();
  uint64_t result = swift_bridgeObjectRelease();
  char v4 = 6;
  if (v2 < 6) {
    char v4 = v2;
  }
  *a1 = v4;
  return result;
}

uint64_t sub_1A676C860(unsigned __int8 *a1, char *a2)
{
  return sub_1A676B1FC(*a1, *a2);
}

uint64_t sub_1A676C86C()
{
  return sub_1A676B79C();
}

uint64_t sub_1A676C874()
{
  sub_1A68920F0();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1A676C944()
{
  return sub_1A676BA10();
}

uint64_t sub_1A676C94C@<X0>(char *a1@<X8>)
{
  return TTSMarkup.Prosody.PredefinedVolume.init(rawValue:)(a1);
}

void sub_1A676C958(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x746E656C6973;
  switch(*v1)
  {
    case 1:
      uint64_t v2 = 0x74666F732D78;
      goto LABEL_3;
    case 2:
      *a1 = 1952870259;
      a1[1] = 0xE400000000000000;
      break;
    case 3:
      *a1 = 0x6D756964656DLL;
      a1[1] = 0xE600000000000000;
      break;
    case 4:
      *a1 = 1685417836;
      a1[1] = 0xE400000000000000;
      break;
    case 5:
      *a1 = 0x64756F6C2D78;
      a1[1] = 0xE600000000000000;
      break;
    default:
LABEL_3:
      *a1 = v2;
      a1[1] = 0xE600000000000000;
      break;
  }
}

uint64_t sub_1A676CA08()
{
  uint64_t result = 0x746E656C6973;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x74666F732D78;
      break;
    case 2:
      uint64_t result = 1952870259;
      break;
    case 3:
      uint64_t result = 0x6D756964656DLL;
      break;
    case 4:
      uint64_t result = 1685417836;
      break;
    case 5:
      uint64_t result = 0x64756F6C2D78;
      break;
    default:
      return result;
  }
  return result;
}

float sub_1A676CAA4()
{
  if (*(unsigned char *)(v0 + 4)) {
    return roundf(sub_1A6748F2C(*(float *)v0) * 100.0) / 100.0;
  }
  else {
    return flt_1A689ECE4[(char)*(_DWORD *)v0];
  }
}

uint64_t TTSMarkup.Prosody.Volume.description.getter()
{
  if (*(unsigned char *)(v0 + 4))
  {
    uint64_t v2 = sub_1A680FC34();
    sub_1A6892150();
    return v2;
  }
  else
  {
    uint64_t result = 0x746E656C6973;
    switch(*(_DWORD *)v0)
    {
      case 1u:
        uint64_t result = 0x74666F732D78;
        break;
      case 2u:
        uint64_t result = 1952870259;
        break;
      case 3u:
        uint64_t result = 0x6D756964656DLL;
        break;
      case 4u:
        uint64_t result = 1685417836;
        break;
      case 5u:
        uint64_t result = 0x64756F6C2D78;
        break;
      default:
        return result;
    }
  }
  return result;
}

void sub_1A676CBE4(uint64_t a1@<X8>, float a2@<S0>)
{
  if (a2 == 0.0) {
    float v4 = 0.0;
  }
  else {
    float v4 = sub_1A6748F0C(a2);
  }
  *(float *)a1 = v4;
  *(unsigned char *)(a1 + 4) = a2 != 0.0;
}

uint64_t TTSMarkup.Prosody.init(rate:pitch:volume:speech:)@<X0>(int *a1@<X0>, int *a2@<X1>, int *a3@<X2>, uint64_t (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  int v5 = *a1;
  char v6 = *((unsigned char *)a1 + 4);
  int v7 = *a2;
  char v8 = *((unsigned char *)a2 + 4);
  int v9 = *a3;
  char v10 = *((unsigned char *)a3 + 4);
  *(void *)a5 = MEMORY[0x1E4FBC860];
  *(unsigned char *)(a5 + 52) = v6;
  *(_DWORD *)(a5 + 48) = v5;
  *(unsigned char *)(a5 + 60) = v8;
  *(_DWORD *)(a5 + 56) = v7;
  *(unsigned char *)(a5 + 68) = v10;
  *(_DWORD *)(a5 + 64) = v9;
  return a4();
}

uint64_t TTSMarkup.Prosody.attributes.getter()
{
  uint64_t v1 = MEMORY[0x1E4FBC868];
  if (*(unsigned __int8 *)(v0 + 52) != 255)
  {
    if ((((unint64_t)*(unsigned __int8 *)(v0 + 52) << 32) & 0x100000000) != 0)
    {
      sub_1A68926D0();
      sub_1A6892150();
      uint64_t v3 = 0;
      uint64_t v2 = 0xE000000000000000;
    }
    else
    {
      uint64_t v2 = 0xE400000000000000;
      uint64_t v3 = 2003790963;
      switch(*(_DWORD *)(v0 + 48))
      {
        case 1u:
          break;
        case 2u:
          uint64_t v2 = 0xE600000000000000;
          uint64_t v3 = 0x6D756964656DLL;
          break;
        case 3u:
          uint64_t v3 = 1953718630;
          break;
        case 4u:
          uint64_t v2 = 0xE600000000000000;
          uint64_t v3 = 0x747361662D78;
          break;
        default:
          uint64_t v2 = 0xE600000000000000;
          uint64_t v3 = 0x776F6C732D78;
          break;
      }
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1A6747404(v3, v2, 1702125938, 0xE400000000000000, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
  }
  if (*(unsigned __int8 *)(v0 + 60) >> 2 <= 0x3EuLL)
  {
    uint64_t v5 = TTSMarkup.Prosody.Pitch.description.getter();
    uint64_t v7 = v6;
    char v8 = swift_isUniquelyReferenced_nonNull_native();
    sub_1A6747404(v5, v7, 0x6863746970, 0xE500000000000000, v8);
    swift_bridgeObjectRelease();
  }
  if (*(unsigned __int8 *)(v0 + 68) != 255)
  {
    if ((((unint64_t)*(unsigned __int8 *)(v0 + 68) << 32) & 0x100000000) != 0)
    {
      uint64_t v14 = sub_1A680FC34();
      uint64_t v15 = v11;
      sub_1A6892150();
      uint64_t v10 = v14;
      uint64_t v9 = v15;
    }
    else
    {
      uint64_t v9 = 0xE600000000000000;
      uint64_t v10 = 0x746E656C6973;
      switch(*(_DWORD *)(v0 + 64))
      {
        case 1u:
          uint64_t v10 = 0x74666F732D78;
          break;
        case 2u:
          uint64_t v9 = 0xE400000000000000;
          uint64_t v10 = 1952870259;
          break;
        case 3u:
          uint64_t v10 = 0x6D756964656DLL;
          break;
        case 4u:
          uint64_t v9 = 0xE400000000000000;
          uint64_t v10 = 1685417836;
          break;
        case 5u:
          uint64_t v10 = 0x64756F6C2D78;
          break;
        default:
          break;
      }
    }
    char v12 = swift_isUniquelyReferenced_nonNull_native();
    sub_1A6747404(v10, v9, 0x656D756C6F76, 0xE600000000000000, v12);
    swift_bridgeObjectRelease();
  }
  return v1;
}

void sub_1A676CF94(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

unint64_t sub_1A676CFB0()
{
  unint64_t result = qword_1E96C1DE8;
  if (!qword_1E96C1DE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E96C1DE8);
  }
  return result;
}

unint64_t sub_1A676D008()
{
  unint64_t result = qword_1E96C1DF0;
  if (!qword_1E96C1DF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E96C1DF0);
  }
  return result;
}

unint64_t sub_1A676D060()
{
  unint64_t result = qword_1E96C1DF8;
  if (!qword_1E96C1DF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E96C1DF8);
  }
  return result;
}

unint64_t sub_1A676D0B8()
{
  unint64_t result = qword_1E96C1E00;
  if (!qword_1E96C1E00)
  {
    sub_1A6750AC4(&qword_1E96C1E08);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E96C1E00);
  }
  return result;
}

unint64_t sub_1A676D118()
{
  unint64_t result = qword_1E96C1E10;
  if (!qword_1E96C1E10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E96C1E10);
  }
  return result;
}

uint64_t _s7ProsodyVwcp(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = a2 + 8;
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v5;
  uint64_t v6 = v5;
  uint64_t v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_bridgeObjectRetain();
  v7(a1 + 8, v4, v6);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 68) = *(unsigned char *)(a2 + 68);
  return a1;
}

uint64_t _s7ProsodyVwca(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_1A67588AC((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  int v4 = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = v4;
  int v5 = *(_DWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
  *(_DWORD *)(a1 + 56) = v5;
  int v6 = *(_DWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 68) = *(unsigned char *)(a2 + 68);
  *(_DWORD *)(a1 + 64) = v6;
  return a1;
}

__n128 _s7ProsodyVwtk(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 61) = *(void *)(a2 + 61);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t _s7ProsodyVwta(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  sub_1A6741A24(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
  *(unsigned char *)(a1 + 68) = *(unsigned char *)(a2 + 68);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  return a1;
}

uint64_t _s7ProsodyVwet(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 69)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s7ProsodyVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 68) = 0;
    *(_DWORD *)(result + 64) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 69) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 69) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TTSMarkup.Prosody()
{
  return &type metadata for TTSMarkup.Prosody;
}

ValueMetadata *type metadata accessor for TTSMarkup.Prosody.PredefinedRate()
{
  return &type metadata for TTSMarkup.Prosody.PredefinedRate;
}

uint64_t _s7ProsodyV5PitchOwCP(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(unsigned char *)(result + 4) = *((unsigned char *)a2 + 4);
  *(_DWORD *)__n128 result = v2;
  return result;
}

uint64_t sub_1A676D444(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 4);
}

uint64_t sub_1A676D44C(uint64_t result, char a2)
{
  *(unsigned char *)(result + 4) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for TTSMarkup.Prosody.Rate()
{
  return &type metadata for TTSMarkup.Prosody.Rate;
}

uint64_t _s5VoiceV7QualityOwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s7ProsodyV15PredefinedPitchOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *__n128 result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A676D5C4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TTSMarkup.Prosody.PredefinedPitch()
{
  return &type metadata for TTSMarkup.Prosody.PredefinedPitch;
}

unsigned char *_s7ProsodyV17RelativePitchUnitOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A676D6C8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TTSMarkup.Prosody.RelativePitchUnit()
{
  return &type metadata for TTSMarkup.Prosody.RelativePitchUnit;
}

uint64_t _s7ProsodyV5PitchOwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x3E && *(unsigned char *)(a1 + 5)) {
    return (*(_DWORD *)a1 + 62);
  }
  unsigned int v3 = ((*(unsigned __int8 *)(a1 + 4) >> 6) & 0xFFFFFFC3 | (4 * ((*(unsigned __int8 *)(a1 + 4) >> 2) & 0xF))) ^ 0x3F;
  if (v3 >= 0x3D) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t _s7ProsodyV5PitchOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3D)
  {
    *(unsigned char *)(result + 4) = 0;
    *(_DWORD *)__n128 result = a2 - 62;
    if (a3 >= 0x3E) {
      *(unsigned char *)(result + 5) = 1;
    }
  }
  else
  {
    if (a3 >= 0x3E) {
      *(unsigned char *)(result + 5) = 0;
    }
    if (a2)
    {
      *(_DWORD *)__n128 result = 0;
      *(unsigned char *)(result + 4) = 4 * (((-a2 >> 2) & 0xF) - 16 * a2);
    }
  }
  return result;
}

uint64_t sub_1A676D7A8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 4) >> 6;
}

uint64_t sub_1A676D7B4(uint64_t result)
{
  *(unsigned char *)(result + 4) &= 0x3Fu;
  return result;
}

unsigned int *sub_1A676D7CC(unsigned int *result, uint64_t a2)
{
  *((unsigned char *)result + 4) = ((*result | ((unint64_t)*((unsigned __int8 *)result + 4) << 32)) & 0x3FFFFFFFFLL | (a2 << 38)) >> 32;
  return result;
}

ValueMetadata *type metadata accessor for TTSMarkup.Prosody.Pitch()
{
  return &type metadata for TTSMarkup.Prosody.Pitch;
}

uint64_t _s7ProsodyV16PredefinedVolumeOwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s7ProsodyV16PredefinedVolumeOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *__n128 result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A676D958);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TTSMarkup.Prosody.PredefinedVolume()
{
  return &type metadata for TTSMarkup.Prosody.PredefinedVolume;
}

uint64_t _s7ProsodyV6VolumeOwet_0(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 5)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 4);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t _s7ProsodyV6VolumeOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 4) = 0;
    *(_DWORD *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 5) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 5) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 4) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TTSMarkup.Prosody.Volume()
{
  return &type metadata for TTSMarkup.Prosody.Volume;
}

uint64_t sub_1A676DA40()
{
  return sub_1A6743D1C(&OBJC_IVAR____TtC12TextToSpeech22VoiceTaggedSSMLSnippet_ssml);
}

uint64_t sub_1A676DA58(uint64_t a1, uint64_t a2)
{
  return sub_1A6743D7C(a1, a2, &OBJC_IVAR____TtC12TextToSpeech22VoiceTaggedSSMLSnippet_ssml);
}

uint64_t sub_1A676DA64@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x68))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1A676DAC0(uint64_t *a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x70);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t (*sub_1A676DB38())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1A676DBA0()
{
  return sub_1A6743D1C(&OBJC_IVAR____TtC12TextToSpeech22VoiceTaggedSSMLSnippet_voiceName);
}

uint64_t sub_1A676DBB8(uint64_t a1, uint64_t a2)
{
  return sub_1A6743D7C(a1, a2, &OBJC_IVAR____TtC12TextToSpeech22VoiceTaggedSSMLSnippet_voiceName);
}

uint64_t sub_1A676DBC4@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x80))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1A676DC20(uint64_t *a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x88);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t (*sub_1A676DC98())()
{
  return j_j__swift_endAccess;
}

id sub_1A676DD00(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + *a3;
  swift_beginAccess();
  if (*(void *)(v3 + 8))
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = (void *)sub_1A6891FD0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = 0;
  }

  return v4;
}

uint64_t sub_1A676DD88()
{
  return sub_1A6743D1C(&OBJC_IVAR____TtC12TextToSpeech22VoiceTaggedSSMLSnippet_language);
}

uint64_t sub_1A676DDA0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a3)
  {
    uint64_t v6 = sub_1A6892000();
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
  uint64_t v9 = (uint64_t *)(a1 + *a4);
  swift_beginAccess();
  *uint64_t v9 = v6;
  v9[1] = v8;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A676DE1C(uint64_t a1, uint64_t a2)
{
  return sub_1A6743D7C(a1, a2, &OBJC_IVAR____TtC12TextToSpeech22VoiceTaggedSSMLSnippet_language);
}

uint64_t sub_1A676DE28@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x98))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1A676DE84(uint64_t *a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xA0);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t (*sub_1A676DEFC())()
{
  return j_j__swift_endAccess;
}

id sub_1A676DF58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  float v13 = (char *)objc_allocWithZone(v6);
  uint64_t v14 = &v13[OBJC_IVAR____TtC12TextToSpeech22VoiceTaggedSSMLSnippet_voiceName];
  *(void *)uint64_t v14 = 0;
  *((void *)v14 + 1) = 0;
  uint64_t v15 = &v13[OBJC_IVAR____TtC12TextToSpeech22VoiceTaggedSSMLSnippet_language];
  *(void *)uint64_t v15 = 0;
  *((void *)v15 + 1) = 0;
  uint64_t v16 = &v13[OBJC_IVAR____TtC12TextToSpeech22VoiceTaggedSSMLSnippet_ssml];
  *(void *)uint64_t v16 = a1;
  *((void *)v16 + 1) = a2;
  swift_beginAccess();
  *(void *)uint64_t v14 = a3;
  *((void *)v14 + 1) = a4;
  uint64_t v17 = v13;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(void *)uint64_t v15 = a5;
  *((void *)v15 + 1) = a6;

  swift_bridgeObjectRelease();
  v19.receiver = v17;
  v19.super_class = v6;
  return objc_msgSendSuper2(&v19, sel_init);
}

uint64_t type metadata accessor for VoiceTaggedSSMLSnippet()
{
  return self;
}

void VoiceTaggedSSMLSnippet.init()()
{
}

id VoiceTaggedSSMLSnippet.__deallocating_deinit()
{
  return sub_1A67709F0(type metadata accessor for VoiceTaggedSSMLSnippet);
}

uint64_t sub_1A676E1DC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A676E294(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC12TextToSpeech10TaggedSSML_ssmlSnippets);
  swift_beginAccess();
  void *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A676E2E8@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x60))();
  *a2 = result;
  return result;
}

uint64_t sub_1A676E344(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x68);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t (*sub_1A676E3A8())()
{
  return j_j__swift_endAccess;
}

id sub_1A676E410()
{
  swift_beginAccess();
  swift_bridgeObjectRetain();
  uint64_t v0 = (void *)sub_1A6891FD0();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t sub_1A676E488()
{
  return sub_1A6743D1C(&OBJC_IVAR____TtC12TextToSpeech10TaggedSSML_originalSSML);
}

uint64_t sub_1A676E4A0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = sub_1A6892000();
  uint64_t v8 = v7;
  uint64_t v9 = (uint64_t *)(a1 + *a4);
  swift_beginAccess();
  *uint64_t v9 = v6;
  v9[1] = v8;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A676E50C(uint64_t a1, uint64_t a2)
{
  return sub_1A6743D7C(a1, a2, &OBJC_IVAR____TtC12TextToSpeech10TaggedSSML_originalSSML);
}

uint64_t sub_1A676E518@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x78))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1A676E574(uint64_t *a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x80);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t (*sub_1A676E5EC())()
{
  return j__swift_endAccess;
}

id sub_1A676E648(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (char *)objc_allocWithZone(v2);
  *(void *)&v5[OBJC_IVAR____TtC12TextToSpeech10TaggedSSML_ssmlSnippets] = MEMORY[0x1E4FBC860];
  uint64_t v6 = &v5[OBJC_IVAR____TtC12TextToSpeech10TaggedSSML_originalSSML];
  *(void *)uint64_t v6 = a1;
  *((void *)v6 + 1) = a2;
  v8.receiver = v5;
  v8.super_class = v2;
  return objc_msgSendSuper2(&v8, sel_init);
}

uint64_t type metadata accessor for TaggedSSML()
{
  return self;
}

id TaggedSSML.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void TaggedSSML.init()()
{
}

id TaggedSSML.__deallocating_deinit()
{
  return sub_1A67709F0(type metadata accessor for TaggedSSML);
}

uint64_t sub_1A676E7DC@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x70))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1A676E838(uint64_t *a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x78);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_1A676E8B0()
{
  return sub_1A6743D1C(&OBJC_IVAR____TtC12TextToSpeech15SSMLVoiceTagger_currentVoiceName);
}

uint64_t sub_1A676E8BC(uint64_t a1, uint64_t a2)
{
  return sub_1A6743D7C(a1, a2, &OBJC_IVAR____TtC12TextToSpeech15SSMLVoiceTagger_currentVoiceName);
}

uint64_t (*sub_1A676E8C8())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1A676E924@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x88))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1A676E980(uint64_t *a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x90);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_1A676E9F8()
{
  return sub_1A6743D1C(&OBJC_IVAR____TtC12TextToSpeech15SSMLVoiceTagger_currentLanguage);
}

uint64_t sub_1A676EA04(uint64_t a1, uint64_t a2)
{
  return sub_1A6743D7C(a1, a2, &OBJC_IVAR____TtC12TextToSpeech15SSMLVoiceTagger_currentLanguage);
}

uint64_t (*sub_1A676EA10())()
{
  return j_j__swift_endAccess;
}

id SSMLVoiceTagger.init()()
{
  id v1 = &v0[OBJC_IVAR____TtC12TextToSpeech15SSMLVoiceTagger_currentVoiceName];
  *(void *)id v1 = 0;
  *((void *)v1 + 1) = 0;
  uint64_t v2 = &v0[OBJC_IVAR____TtC12TextToSpeech15SSMLVoiceTagger_currentLanguage];
  *(void *)uint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  uint64_t v3 = MEMORY[0x1E4FBC860];
  *(void *)&v0[OBJC_IVAR____TtC12TextToSpeech15SSMLVoiceTagger_leafPiles] = MEMORY[0x1E4FBC860];
  *(void *)&v0[OBJC_IVAR____TtC12TextToSpeech15SSMLVoiceTagger_voiceTagRanges] = v3;
  v5.receiver = v0;
  v5.super_class = (Class)type metadata accessor for SSMLVoiceTagger();
  return objc_msgSendSuper2(&v5, sel_init);
}

uint64_t type metadata accessor for SSMLVoiceTagger()
{
  return self;
}

void *sub_1A676EB84(void *a1, unint64_t a2)
{
  uint64_t v4 = v2;
  type metadata accessor for SSMLParser();
  swift_bridgeObjectRetain();
  uint64_t v97 = a1;
  uint64_t v7 = SSMLParser.__allocating_init(ssml:)();
  objc_super v8 = (void *)MEMORY[0x1E4FBC8C8];
  (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v7) + 0x130))();
  sub_1A6741AD0(&qword_1E96C1E60);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1A689DC40;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  uint64_t v10 = MEMORY[0x1E4FBC860];
  *(void *)(v9 + 64) = MEMORY[0x1E4FBC860];
  uint64_t v11 = (char *)v2 + OBJC_IVAR____TtC12TextToSpeech15SSMLVoiceTagger_leafPiles;
  swift_beginAccess();
  unint64_t v95 = v11;
  *(void *)uint64_t v11 = v9;
  swift_bridgeObjectRelease();
  (*(void (**)(void, void))((*v8 & *v4) + 0x78))(0, 0);
  uint64_t v12 = (*(uint64_t (**)(void, void))((*v8 & *v4) + 0x90))(0, 0);
  uint64_t v87 = v7;
  uint64_t v13 = (*(uint64_t (**)(uint64_t))((*v8 & *v7) + 0xE8))(v12);
  if (v13)
  {
    uint64_t v14 = (void *)v13;
    sub_1A676FB84(v13);
  }
  uint64_t v15 = *(void *)((char *)v4 + OBJC_IVAR____TtC12TextToSpeech15SSMLVoiceTagger_voiceTagRanges);
  uint64_t v16 = *(void *)(v15 + 16);
  if (v16)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v17 = (unint64_t *)(v15 + 40);
    unint64_t v18 = (unint64_t)v97;
    unint64_t v19 = a2;
    do
    {
      unint64_t v20 = *(v17 - 1);
      unint64_t v21 = *v17;
      unint64_t v22 = sub_1A6892240();
      sub_1A676F6C8(v22, v23, v24, v25);
      swift_bridgeObjectRelease();
      uint64_t v105 = 0;
      unint64_t v106 = 0xE000000000000000;
      uint64_t v107 = 32;
      unint64_t v108 = 0xE100000000000000;
      sub_1A6748030();
      uint64_t v26 = sub_1A6892AC0();
      unint64_t v18 = sub_1A676F7C8(v20, v21, v26, v27, v18, v19);
      unint64_t v3 = v28;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v19 = v3;
      v17 += 2;
      --v16;
    }
    while (v16);
    swift_bridgeObjectRelease();
    objc_super v8 = (void *)MEMORY[0x1E4FBC8C8];
    uint64_t v29 = (void *)v18;
    uint64_t v10 = MEMORY[0x1E4FBC860];
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v29 = v97;
    unint64_t v19 = a2;
  }
  uint64_t v30 = (objc_class *)type metadata accessor for TaggedSSML();
  uint64_t v31 = (char *)objc_allocWithZone(v30);
  *(void *)&v31[OBJC_IVAR____TtC12TextToSpeech10TaggedSSML_ssmlSnippets] = v10;
  unint64_t v32 = &v31[OBJC_IVAR____TtC12TextToSpeech10TaggedSSML_originalSSML];
  *(void *)unint64_t v32 = v29;
  *((void *)v32 + 1) = v19;
  v104.receiver = v31;
  v104.super_class = v30;
  swift_bridgeObjectRetain();
  char v33 = objc_msgSendSuper2(&v104, sel_init);
  unint64_t v34 = v19;
  uint64_t v35 = v33;
  unint64_t v36 = *(void *)(*(void *)v11 + 16);
  if (v36 < 2)
  {
    uint64_t v72 = (objc_class *)type metadata accessor for VoiceTaggedSSMLSnippet();
    long long v73 = (char *)objc_allocWithZone(v72);
    uint64_t v74 = &v73[OBJC_IVAR____TtC12TextToSpeech22VoiceTaggedSSMLSnippet_voiceName];
    *(void *)uint64_t v74 = 0;
    *((void *)v74 + 1) = 0;
    long long v75 = &v73[OBJC_IVAR____TtC12TextToSpeech22VoiceTaggedSSMLSnippet_language];
    *(void *)long long v75 = 0;
    *((void *)v75 + 1) = 0;
    unint64_t v76 = &v73[OBJC_IVAR____TtC12TextToSpeech22VoiceTaggedSSMLSnippet_ssml];
    *(void *)unint64_t v76 = v29;
    *((void *)v76 + 1) = v34;
    swift_beginAccess();
    *(void *)uint64_t v74 = 0;
    *((void *)v74 + 1) = 0;
    unint64_t v77 = v73;
    swift_bridgeObjectRelease();
    swift_beginAccess();
    *(void *)long long v75 = 0;
    *((void *)v75 + 1) = 0;

    swift_bridgeObjectRelease();
    v103.receiver = v77;
    v103.super_class = v72;
    objc_msgSendSuper2(&v103, sel_init);
    uint64_t v78 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))((*v8 & *v35) + 0x70))(&v105);
    uint64_t v80 = v79;
    MEMORY[0x1AD0BF380]();
    if (*(void *)((*v80 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v80 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      sub_1A6892320();
    }
    sub_1A6892360();
    sub_1A6892300();
    v78(&v105, 0);
  }
  else
  {
    uint64_t v86 = (void *)v34;
    unint64_t v37 = 0;
    id v82 = *(uint64_t (**)(uint64_t *))((*v8 & *v33) + 0x70);
    uint64_t v84 = v29;
    uint64_t v85 = v33;
    unint64_t v83 = *(void *)(*(void *)v11 + 16);
    while (v37 != v36)
    {
      unint64_t v38 = *(void *)(*(void *)v95 + 16);
      if (v37 >= v38) {
        goto LABEL_45;
      }
      char v39 = (void *)(*(void *)v95 + 40 * v37);
      uint64_t v40 = v39[5];
      uint64_t v91 = v39[6];
      unint64_t v92 = (char *)(v37 + 1);
      uint64_t v89 = v39[4];
      uint64_t v90 = v39[7];
      swift_bridgeObjectRetain();
      uint64_t v35 = v86;
      swift_bridgeObjectRetain();
      uint64_t v88 = v40;
      swift_bridgeObjectRetain();
      unint64_t v41 = 0;
      unint64_t v93 = v38;
      unint64_t v94 = v37;
      do
      {
        if (v41 == v38)
        {
          __break(1u);
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          goto LABEL_44;
        }
        if (v41 != v37)
        {
          if (v41 >= *(void *)(*(void *)v95 + 16)) {
            goto LABEL_42;
          }
          unint64_t v96 = v41;
          unint64_t v3 = *(void *)(*(void *)v95 + 40 * v41 + 64);
          if (v3 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v43 = sub_1A6892EB0();
            if (v43)
            {
LABEL_21:
              if (v43 >= 1)
              {
                uint64_t v44 = 0;
                unint64_t v98 = v3;
                unint64_t v99 = v3 & 0xC000000000000001;
                uint64_t v45 = v43;
                while (1)
                {
                  char v46 = v99 ? (void *)MEMORY[0x1AD0BFD30](v44, v3) : *(id *)(v3 + 8 * v44 + 32);
                  id v47 = v46;
                  unint64_t v48 = v8;
                  uint64_t v49 = *(uint64_t (**)(void))((*v8 & *v46) + 0x118);
                  unint64_t v50 = v49();
                  v49();
                  uint64_t v52 = (void *)(v51 >> 14);
                  if (v51 >> 14 < v50 >> 14) {
                    break;
                  }
                  ++v44;
                  unint64_t v53 = sub_1A6892240();
                  sub_1A676F6C8(v53, v54, v55, v56);
                  uint64_t v57 = swift_bridgeObjectRelease();
                  unint64_t v58 = ((uint64_t (*)(uint64_t))v49)(v57);
                  unint64_t v60 = v59;
                  uint64_t v105 = 0;
                  unint64_t v106 = 0xE000000000000000;
                  uint64_t v101 = 32;
                  unint64_t v102 = 0xE100000000000000;
                  sub_1A6748030();
                  uint64_t v61 = sub_1A6892AC0();
                  uint64_t v29 = (void *)sub_1A676F7C8(v58, v60, v61, v62, (unint64_t)v29, (unint64_t)v35);
                  uint64_t v42 = v63;
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();

                  uint64_t v35 = v42;
                  objc_super v8 = v48;
                  unint64_t v3 = v98;
                  if (v45 == v44) {
                    goto LABEL_14;
                  }
                }
                __break(1u);
                goto LABEL_40;
              }
              goto LABEL_43;
            }
          }
          else
          {
            uint64_t v43 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain();
            if (v43) {
              goto LABEL_21;
            }
          }
          uint64_t v42 = v35;
LABEL_14:
          swift_bridgeObjectRelease();
          uint64_t v35 = v42;
          unint64_t v38 = v93;
          unint64_t v37 = v94;
          unint64_t v41 = v96;
        }
        ++v41;
      }
      while (v41 != v38);
      uint64_t v64 = (objc_class *)type metadata accessor for VoiceTaggedSSMLSnippet();
      unsigned int v65 = (char *)objc_allocWithZone(v64);
      uint64_t v66 = &v65[OBJC_IVAR____TtC12TextToSpeech22VoiceTaggedSSMLSnippet_voiceName];
      *(void *)uint64_t v66 = 0;
      *((void *)v66 + 1) = 0;
      unint64_t v3 = (unint64_t)&v65[OBJC_IVAR____TtC12TextToSpeech22VoiceTaggedSSMLSnippet_language];
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      uint64_t v67 = &v65[OBJC_IVAR____TtC12TextToSpeech22VoiceTaggedSSMLSnippet_ssml];
      *(void *)uint64_t v67 = v29;
      *((void *)v67 + 1) = v35;
      swift_beginAccess();
      *(void *)uint64_t v66 = v89;
      *((void *)v66 + 1) = v88;
      unint64_t v68 = v65;
      swift_bridgeObjectRelease();
      swift_beginAccess();
      *(void *)unint64_t v3 = v91;
      *(void *)(v3 + 8) = v90;

      swift_bridgeObjectRelease();
      v100.receiver = v68;
      v100.super_class = v64;
      objc_msgSendSuper2(&v100, sel_init);
      uint64_t v35 = v85;
      unint64_t v69 = (void (*)(uint64_t *, void))v82(&v105);
      long long v71 = v70;
      MEMORY[0x1AD0BF380]();
      if (*(void *)((*v71 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v71 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_1A6892320();
      }
      sub_1A6892360();
      sub_1A6892300();
      v69(&v105, 0);
      unint64_t v37 = (unint64_t)v92;
      unint64_t v36 = v83;
      uint64_t v29 = v84;
      uint64_t v52 = v87;
      if (v92 == (char *)v83)
      {
LABEL_40:

        swift_bridgeObjectRelease();
        return v35;
      }
    }
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    sub_1A6892320();
    sub_1A6892360();
    sub_1A6892300();
    ((void (*)(uint64_t *, void))v3)(&v105, 0);
  }
  return v35;
}

unint64_t sub_1A676F6C8(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    uint64_t result = sub_1A6747748(result, a3, a4);
    unint64_t v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    uint64_t result = sub_1A6747748(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v10 < a2 >> 16)
  {
LABEL_17:
    __break(1u);
    return result;
  }

  return sub_1A68921B0();
}

uint64_t sub_1A676F7C8(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  swift_bridgeObjectRetain();
  sub_1A6892A30();
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  if ((v13 & 0x1000000000000000) != 0) {
    goto LABEL_25;
  }
  swift_bridgeObjectRetain();
  sub_1A6892A30();
  uint64_t v15 = v14;
  uint64_t result = swift_bridgeObjectRelease();
  if ((v15 & 0x1000000000000000) != 0) {
    goto LABEL_25;
  }
  uint64_t v17 = (a5 >> 59) & 1;
  if ((a6 & 0x1000000000000000) == 0) {
    LOBYTE(v17) = 1;
  }
  uint64_t v18 = 4 << v17;
  unint64_t v19 = a1;
  if ((a1 & 0xC) == 4 << v17)
  {
    uint64_t result = sub_1A6747748(a1, a5, a6);
    unint64_t v19 = result;
  }
  uint64_t v40 = a3;
  unint64_t v20 = a2;
  unint64_t v21 = a5 & 0x800000000000000;
  if ((a6 & 0x1000000000000000) != 0)
  {
    uint64_t v23 = a6 & 0x2000000000000000;
    uint64_t v25 = a5 & 0xFFFFFFFFFFFFLL;
    unint64_t v24 = HIBYTE(a6) & 0xF;
    if ((a6 & 0x2000000000000000) != 0) {
      unint64_t v32 = HIBYTE(a6) & 0xF;
    }
    else {
      unint64_t v32 = a5 & 0xFFFFFFFFFFFFLL;
    }
    if (v32 < v19 >> 16) {
      goto LABEL_43;
    }
    uint64_t result = sub_1A68921B0();
    uint64_t v22 = result;
    if (v21) {
      uint64_t v26 = 7;
    }
    else {
      uint64_t v26 = 11;
    }
  }
  else
  {
    uint64_t v22 = v19 >> 16;
    uint64_t v23 = a6 & 0x2000000000000000;
    unint64_t v24 = HIBYTE(a6) & 0xF;
    uint64_t v25 = a5 & 0xFFFFFFFFFFFFLL;
    uint64_t v26 = 7;
  }
  if (!v23) {
    unint64_t v24 = v25;
  }
  uint64_t v27 = 4 << (v21 >> 59);
  unint64_t v28 = v26 | (v24 << 16);
  a2 = v20;
  if ((a6 & 0x1000000000000000) == 0) {
    uint64_t v27 = 8;
  }
  unint64_t v29 = v20;
  if ((v20 & 0xC) == v27)
  {
    unint64_t v33 = v20;
    uint64_t v34 = v22;
    uint64_t result = sub_1A6747748(v33, a5, a6);
    uint64_t v22 = v34;
    unint64_t v29 = result;
  }
  if ((v26 & 0xC) == v18)
  {
    unint64_t v35 = v26 | (v24 << 16);
    uint64_t v36 = v22;
    uint64_t result = sub_1A6747748(v35, a5, a6);
    uint64_t v22 = v36;
    unint64_t v28 = result;
    if ((a6 & 0x1000000000000000) == 0)
    {
LABEL_17:
      uint64_t v30 = (v28 >> 16) - (v29 >> 16);
      if ((a4 & 0x1000000000000000) == 0) {
        goto LABEL_18;
      }
      goto LABEL_37;
    }
  }
  else if ((a6 & 0x1000000000000000) == 0)
  {
    goto LABEL_17;
  }
  if (v24 < v29 >> 16)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (v24 >= v28 >> 16)
  {
    uint64_t v37 = v22;
    uint64_t v38 = sub_1A68921B0();
    uint64_t v22 = v37;
    uint64_t v30 = v38;
    if ((a4 & 0x1000000000000000) == 0)
    {
LABEL_18:
      if ((a4 & 0x2000000000000000) != 0)
      {
        uint64_t result = HIBYTE(a4) & 0xF;
        uint64_t v31 = v22 + result;
        if (!__OFADD__(v22, result)) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t result = v40 & 0xFFFFFFFFFFFFLL;
        uint64_t v31 = v22 + (v40 & 0xFFFFFFFFFFFFLL);
        if (!__OFADD__(v22, v40 & 0xFFFFFFFFFFFFLL)) {
          goto LABEL_23;
        }
      }
      goto LABEL_39;
    }
LABEL_37:
    uint64_t v39 = v22;
    uint64_t result = sub_1A6892190();
    uint64_t v31 = v39 + result;
    if (!__OFADD__(v39, result))
    {
LABEL_23:
      uint64_t result = v31 + v30;
      if (!__OFADD__(v31, v30))
      {
        MEMORY[0x1AD0BF190](result);
LABEL_25:
        sub_1A6892240();
        sub_1A6771400();
        sub_1A6892130();
        swift_bridgeObjectRelease();
        sub_1A6892130();
        sub_1A677118C(a2, a5, a6);
        sub_1A6892130();
        swift_bridgeObjectRelease();
        return 0;
      }
      goto LABEL_40;
    }
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
  return result;
}

uint64_t sub_1A676FB84(uint64_t a1)
{
  void (*v12)(uint64_t *__return_ptr);
  char *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  char **v19;
  uint64_t v20;
  char *v21;
  uint64_t (*v22)(void);
  uint64_t v23;
  uint64_t v24;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  char *v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t i;
  id v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t j;
  id v65;
  void *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  unint64_t v86;
  char *v87;
  void *v88;
  char isUniquelyReferenced_nonNull_native;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;

  uint64_t v2 = v1;
  char v4 = sub_1A677060C();
  objc_super v5 = (uint64_t *)MEMORY[0x1E4FBC8C8];
  if (v4)
  {
    uint64_t v6 = (char **)((char *)v1 + OBJC_IVAR____TtC12TextToSpeech15SSMLVoiceTagger_leafPiles);
    uint64_t v7 = swift_beginAccess();
    uint64_t v8 = *((void *)*v6 + 2);
    if (v8)
    {
      uint64_t v9 = (uint64_t)&(*v6)[40 * v8];
      uint64_t v11 = *(void *)(v9 + 8);
      uint64_t v10 = *(void *)(v9 + 16);
      uint64_t v7 = swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v10 = 0;
    }
    uint64_t v22 = *(uint64_t (**)(void))((*v5 & *v1) + 0x88);
    uint64_t v23 = ((uint64_t (*)(uint64_t))v22)(v7);
    if (v10)
    {
      if (!v24) {
        goto LABEL_79;
      }
      if (v11 == v23 && v10 == v24)
      {
        swift_bridgeObjectRelease();
        uint64_t v23 = swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v26 = sub_1A6893120();
        swift_bridgeObjectRelease();
        uint64_t v23 = swift_bridgeObjectRelease();
        if ((v26 & 1) == 0) {
          goto LABEL_80;
        }
      }
    }
    else if (v24)
    {
      goto LABEL_79;
    }
    uint64_t v67 = *((void *)*v6 + 2);
    if (v67)
    {
      unint64_t v68 = &(*v6)[40 * v67];
      int64_t v70 = *((void *)v68 - 1);
      unint64_t v69 = *(void *)v68;
      uint64_t v23 = swift_bridgeObjectRetain();
    }
    else
    {
      int64_t v70 = 0;
      unint64_t v69 = 0;
    }
    long long v71 = (*(uint64_t (**)(uint64_t))((*v5 & *v1) + 0x70))(v23);
    if (v69)
    {
      if (v72)
      {
        if (v70 == v71 && v69 == v72)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_85;
        }
        uint64_t v74 = sub_1A6893120();
        swift_bridgeObjectRelease();
        uint64_t v23 = swift_bridgeObjectRelease();
        if (v74)
        {
LABEL_85:
          uint64_t v86 = *((void *)*v6 + 2);
          swift_beginAccess();
          uint64_t v87 = *v6;
          uint64_t v88 = (id)a1;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *uint64_t v6 = v87;
          if (isUniquelyReferenced_nonNull_native)
          {
            if (v86) {
              goto LABEL_87;
            }
          }
          else
          {
            uint64_t v87 = sub_1A67713EC((uint64_t)v87);
            *uint64_t v6 = v87;
            if (v86)
            {
LABEL_87:
              if (v86 <= *((void *)v87 + 2))
              {
                MEMORY[0x1AD0BF380]();
                if (*(void *)((*(void *)&v87[40 * v86 + 24] & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((*(void *)&v87[40 * v86 + 24] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
                {
LABEL_89:
                  sub_1A6892360();
                  sub_1A6892300();
                  return swift_endAccess();
                }
LABEL_94:
                sub_1A6892320();
                goto LABEL_89;
              }
LABEL_93:
              __break(1u);
              goto LABEL_94;
            }
          }
          __break(1u);
          goto LABEL_93;
        }
LABEL_80:
        long long v75 = (*(uint64_t (**)(uint64_t))((*v5 & *v1) + 0x70))(v23);
        unint64_t v77 = v76;
        uint64_t v78 = v22();
        uint64_t v80 = v79;
        uint64_t v81 = *v6;
        id v82 = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v6 = v81;
        if ((v82 & 1) == 0)
        {
          uint64_t v81 = sub_1A67712D4(0, *((void *)v81 + 2) + 1, 1, v81);
          *uint64_t v6 = v81;
        }
        uint64_t v84 = *((void *)v81 + 2);
        unint64_t v83 = *((void *)v81 + 3);
        if (v84 >= v83 >> 1)
        {
          uint64_t v81 = sub_1A67712D4((char *)(v83 > 1), v84 + 1, 1, v81);
          *uint64_t v6 = v81;
        }
        *((void *)v81 + 2) = v84 + 1;
        uint64_t v85 = &v81[40 * v84];
        *((void *)v85 + 4) = v75;
        *((void *)v85 + 5) = v77;
        *((void *)v85 + 6) = v78;
        *((void *)v85 + 7) = v80;
        *((void *)v85 + 8) = MEMORY[0x1E4FBC860];
        goto LABEL_85;
      }
    }
    else if (!v72)
    {
      goto LABEL_85;
    }
LABEL_79:
    uint64_t v23 = swift_bridgeObjectRelease();
    goto LABEL_80;
  }
  uint64_t v12 = *(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *(void *)a1) + 0xB8);
  uint64_t v13 = (char *)((*MEMORY[0x1E4FBC8C8] & *(void *)a1) + 184);
  v12(&v103);
  sub_1A6770984();
  sub_1A6892290();
  sub_1A6892290();
  if (v101 == v99 && v102 == v100)
  {
    uint64_t v14 = swift_bridgeObjectRelease_n();
  }
  else
  {
    uint64_t v15 = sub_1A6893120();
    swift_bridgeObjectRelease();
    uint64_t v14 = swift_bridgeObjectRelease();
    if ((v15 & 1) == 0)
    {
      unint64_t v21 = 0;
      unint64_t v20 = 0;
      goto LABEL_25;
    }
  }
  uint64_t v16 = (*(uint64_t (**)(uint64_t))((*v5 & *(void *)a1) + 0xE8))(v14);
  if (*(void *)(v16 + 16) && (uint64_t v17 = sub_1A673F7AC(0x676E616C3A6C6D78, 0xE800000000000000), (v18 & 1) != 0))
  {
    unint64_t v19 = (char **)(*(void *)(v16 + 56) + 16 * v17);
    unint64_t v21 = *v19;
    unint64_t v20 = (uint64_t)v19[1];
    swift_bridgeObjectRetain();
  }
  else
  {
    unint64_t v21 = 0;
    unint64_t v20 = 0;
  }
  uint64_t v14 = swift_bridgeObjectRelease();
LABEL_25:
  ((void (*)(uint64_t *__return_ptr, uint64_t))v12)(&v103, v14);
  sub_1A6892290();
  sub_1A6892290();
  uint64_t v27 = v100;
  if (v101 == v99 && v102 == v100)
  {
    unint64_t v28 = swift_bridgeObjectRelease_n();
    goto LABEL_29;
  }
  unint64_t v29 = sub_1A6893120();
  swift_bridgeObjectRelease();
  unint64_t v28 = swift_bridgeObjectRelease();
  if (v29)
  {
LABEL_29:
    uint64_t v30 = (*(uint64_t (**)(uint64_t))((*v5 & *(void *)a1) + 0xE8))(v28);
    if (*(void *)(v30 + 16) && (uint64_t v31 = sub_1A673F7AC(1701667182, 0xE400000000000000), (v32 & 1) != 0))
    {
      unint64_t v33 = (uint64_t *)(*(void *)(v30 + 56) + 16 * v31);
      uint64_t v34 = *v33;
      unint64_t v35 = v33[1];
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v34 = 0;
      unint64_t v35 = 0;
    }
    swift_bridgeObjectRelease();
    goto LABEL_35;
  }
  uint64_t v34 = 0;
  unint64_t v35 = 0;
LABEL_35:
  if ((sub_1A67707DC() & 1) == 0) {
    goto LABEL_49;
  }
  uint64_t v36 = (*(uint64_t (**)(void))((*v5 & *(void *)a1) + 0x130))();
  if (v38) {
    goto LABEL_49;
  }
  uint64_t v27 = v36;
  uint64_t v13 = v37;
  uint64_t v39 = (*(uint64_t (**)(void))((*v5 & *(void *)a1) + 0x148))();
  unint64_t v96 = v41;
  uint64_t v97 = v39;
  if (v42) {
    goto LABEL_49;
  }
  unint64_t v94 = v21;
  unint64_t v95 = v27;
  unint64_t v98 = v20;
  uint64_t v43 = (unint64_t)&OBJC_IVAR___TTSSubstitution__languages;
  uint64_t v27 = OBJC_IVAR____TtC12TextToSpeech15SSMLVoiceTagger_voiceTagRanges;
  unint64_t v21 = *(char **)((char *)v2 + OBJC_IVAR____TtC12TextToSpeech15SSMLVoiceTagger_voiceTagRanges);
  uint64_t v44 = *((void *)v21 + 2);
  unint64_t v20 = v44 + 2;
  if (__OFADD__(v44, 2)) {
    goto LABEL_104;
  }
  uint64_t v45 = (char *)swift_isUniquelyReferenced_nonNull_native();
  *(void *)((char *)v2 + v27) = v21;
  uint64_t v40 = (char *)v27;
  if (!v45 || v20 > *((void *)v21 + 3) >> 1)
  {
    if (v44 <= v20) {
      char v46 = v44 + 2;
    }
    else {
      char v46 = v44;
    }
    id v47 = sub_1A67711D8(v45, v46, 1, v21);
    uint64_t v40 = (char *)v27;
    unint64_t v21 = v47;
  }
  unint64_t v20 = v98;
  unint64_t v48 = v95;
  *(void *)&v40[(void)v2] = v21;
  uint64_t v44 = *((void *)v21 + 2);
  uint64_t v43 = *((void *)v21 + 3);
  uint64_t v27 = v44 + 1;
  if (v44 >= v43 >> 1) {
    goto LABEL_105;
  }
  while (1)
  {
    *((void *)v21 + 2) = v27;
    uint64_t v49 = &v21[16 * v44];
    *((void *)v49 + 4) = v48;
    *((void *)v49 + 5) = v13;
    unint64_t v50 = *(char **)&v40[(void)v2];
    uint64_t v27 = *((void *)v50 + 2);
    unint64_t v51 = *((void *)v50 + 3);
    if (v27 >= v51 >> 1)
    {
      uint64_t v13 = v40;
      unint64_t v50 = sub_1A67711D8((char *)(v51 > 1), v27 + 1, 1, v50);
      *(void *)&v13[(void)v2] = v50;
    }
    unint64_t v21 = v94;
    *((void *)v50 + 2) = v27 + 1;
    uint64_t v52 = &v50[16 * v27];
    *((void *)v52 + 4) = v97;
    *((void *)v52 + 5) = v96;
LABEL_49:
    unint64_t v53 = *v5;
    if (v35 | v20) {
      break;
    }
    uint64_t v44 = a1;
    unint64_t v54 = (*(uint64_t (**)(void))((v53 & *(void *)a1) + 0x100))();
    a1 = v54;
    if ((unint64_t)v54 >> 62)
    {
      if (v54 < 0) {
        uint64_t v44 = v54;
      }
      else {
        uint64_t v44 = v54 & 0xFFFFFFFFFFFFFF8;
      }
      swift_bridgeObjectRetain();
      unint64_t v20 = sub_1A6892EB0();
      if (!v20) {
        goto LABEL_99;
      }
    }
    else
    {
      unint64_t v20 = *(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v20) {
        goto LABEL_99;
      }
    }
    if (v20 >= 1)
    {
      for (uint64_t i = 0; i != v20; ++i)
      {
        if ((a1 & 0xC000000000000001) != 0) {
          unint64_t v56 = (id)MEMORY[0x1AD0BFD30](i, a1);
        }
        else {
          unint64_t v56 = *(id *)(a1 + 8 * i + 32);
        }
        uint64_t v57 = v56;
        sub_1A676FB84();
      }
LABEL_99:
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease_n();
    }
    __break(1u);
LABEL_103:
    __break(1u);
LABEL_104:
    __break(1u);
LABEL_105:
    uint64_t v91 = v21;
    unint64_t v92 = v40;
    unint64_t v93 = sub_1A67711D8((char *)(v43 > 1), v27, 1, v91);
    uint64_t v40 = v92;
    unint64_t v48 = v95;
    unint64_t v21 = v93;
    *(void *)&v40[(void)v2] = v93;
  }
  unint64_t v58 = (*(uint64_t (**)(void))((v53 & *v2) + 0x70))();
  unint64_t v96 = v59;
  uint64_t v97 = v58;
  unint64_t v60 = (*(uint64_t (**)(void))((*v5 & *v2) + 0x88))();
  unint64_t v94 = v61;
  unint64_t v95 = v60;
  uint64_t v13 = *(char **)((*v5 & *v2) + 0x90);
  uint64_t v27 = (*v5 & *v2) + 144;
  swift_bridgeObjectRetain();
  ((void (*)(char *, uint64_t))v13)(v21, v20);
  unint64_t v21 = *(char **)((*v5 & *v2) + 0x78);
  unint64_t v20 = (*v5 & *v2) + 120;
  unint64_t v62 = ((uint64_t (*)(uint64_t, uint64_t))v21)(v34, v35);
  uint64_t v44 = a1;
  unint64_t v63 = (*(uint64_t (**)(uint64_t))((*v5 & *(void *)a1) + 0x100))(v62);
  a1 = v63;
  if (v63 >> 62)
  {
    uint64_t v34 = sub_1A6892EB0();
    if (!v34) {
      goto LABEL_101;
    }
  }
  else
  {
    uint64_t v43 = v63 & 0xFFFFFFFFFFFFFF8;
    uint64_t v34 = *(void *)((v63 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v34) {
      goto LABEL_101;
    }
  }
  if (v34 < 1) {
    goto LABEL_103;
  }
  for (unint64_t j = 0; j != v34; ++j)
  {
    if ((a1 & 0xC000000000000001) != 0) {
      unsigned int v65 = (id)MEMORY[0x1AD0BFD30](j, a1);
    }
    else {
      unsigned int v65 = *(id *)(a1 + 8 * j + 32);
    }
    uint64_t v66 = v65;
    sub_1A676FB84();
  }
LABEL_101:
  swift_bridgeObjectRelease();
  ((void (*)(unint64_t, char *))v13)(v95, v94);
  ((void (*)(uint64_t, uint64_t))v21)(v97, v96);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A677060C()
{
  id v1 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v2 = (*(void *(**)(uint64_t *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB8))(&v16);
  unsigned int v3 = v16 - 1;
  if (v3 < 0xF && ((0x45CDu >> v3) & 1) != 0) {
    return (0x7E7Fu >> v3) & 1;
  }
  unint64_t v4 = (*(uint64_t (**)(void *))((*v1 & *v0) + 0x100))(v2);
  unint64_t v5 = v4;
  if (v4 >> 62) {
    goto LABEL_20;
  }
  uint64_t v6 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v6)
  {
    while (1)
    {
      id v7 = (v5 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1AD0BFD30](0, v5) : *(id *)(v5 + 32);
      uint64_t v8 = v7;
      char v9 = sub_1A677060C();

      if ((v9 & 1) == 0) {
        break;
      }
      if (v6 != 1)
      {
        uint64_t v10 = 5;
        while (1)
        {
          id v11 = (v5 & 0xC000000000000001) != 0
              ? (id)MEMORY[0x1AD0BFD30](v10 - 4, v5)
              : *(id *)(v5 + 8 * v10);
          uint64_t v12 = v11;
          uint64_t v13 = v10 - 3;
          if (__OFADD__(v10 - 4, 1)) {
            break;
          }
          char v14 = sub_1A677060C();

          if ((v14 & 1) == 0) {
            goto LABEL_17;
          }
          ++v10;
          if (v13 == v6) {
            goto LABEL_16;
          }
        }
        __break(1u);
LABEL_20:
        swift_bridgeObjectRetain();
        uint64_t v6 = sub_1A6892EB0();
        if (v6) {
          continue;
        }
      }
      goto LABEL_16;
    }
LABEL_17:
    swift_bridgeObjectRelease_n();
    return 0;
  }
  else
  {
LABEL_16:
    swift_bridgeObjectRelease_n();
    return 1;
  }
}

uint64_t sub_1A67707DC()
{
  void (*v1)(uint64_t *__return_ptr);
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  id v1 = *(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB8);
  v1(&v11);
  sub_1A6770984();
  sub_1A6892290();
  sub_1A6892290();
  if (v9 == v7 && v10 == v8)
  {
    swift_bridgeObjectRelease_n();
    unint64_t v5 = 1;
  }
  else
  {
    unsigned int v3 = sub_1A6893120();
    swift_bridgeObjectRelease();
    unint64_t v4 = swift_bridgeObjectRelease();
    if (v3)
    {
      unint64_t v5 = 1;
    }
    else
    {
      ((void (*)(uint64_t *__return_ptr, uint64_t))v1)(&v11, v4);
      sub_1A6892290();
      sub_1A6892290();
      if (v9 == v7 && v10 == v8) {
        unint64_t v5 = 1;
      }
      else {
        unint64_t v5 = sub_1A6893120();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  return v5 & 1;
}

unint64_t sub_1A6770984()
{
  unint64_t result = qword_1E96C1E68;
  if (!qword_1E96C1E68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E96C1E68);
  }
  return result;
}

id SSMLVoiceTagger.__deallocating_deinit()
{
  return sub_1A67709F0(type metadata accessor for SSMLVoiceTagger);
}

id sub_1A67709F0(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t method lookup function for VoiceTaggedSSMLSnippet(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for VoiceTaggedSSMLSnippet);
}

uint64_t dispatch thunk of VoiceTaggedSSMLSnippet.ssml.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of VoiceTaggedSSMLSnippet.ssml.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of VoiceTaggedSSMLSnippet.ssml.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of VoiceTaggedSSMLSnippet.voiceName.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of VoiceTaggedSSMLSnippet.voiceName.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of VoiceTaggedSSMLSnippet.voiceName.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of VoiceTaggedSSMLSnippet.language.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of VoiceTaggedSSMLSnippet.language.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of VoiceTaggedSSMLSnippet.language.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8))();
}

uint64_t method lookup function for TaggedSSML(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for TaggedSSML);
}

uint64_t dispatch thunk of TaggedSSML.ssmlSnippets.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of TaggedSSML.ssmlSnippets.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of TaggedSSML.ssmlSnippets.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of TaggedSSML.originalSSML.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of TaggedSSML.originalSSML.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of TaggedSSML.originalSSML.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

uint64_t destroy for SSMLLeafPile()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for SSMLLeafPile(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for SSMLLeafPile(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for SSMLLeafPile(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SSMLLeafPile(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SSMLLeafPile(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SSMLLeafPile(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SSMLLeafPile()
{
  return &type metadata for SSMLLeafPile;
}

uint64_t method lookup function for SSMLVoiceTagger(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SSMLVoiceTagger);
}

uint64_t dispatch thunk of SSMLVoiceTagger.currentVoiceName.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of SSMLVoiceTagger.currentVoiceName.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of SSMLVoiceTagger.currentVoiceName.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of SSMLVoiceTagger.currentLanguage.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of SSMLVoiceTagger.currentLanguage.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of SSMLVoiceTagger.currentLanguage.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of SSMLVoiceTagger.tagSSML(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0))();
}

unint64_t sub_1A677118C(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (4 * v3 >= result >> 14) {
    return sub_1A6892240();
  }
  __break(1u);
  return result;
}

char *sub_1A67711D8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1A6741AD0(&qword_1E96C1E70);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  char v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1A67712D4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1A6741AD0(&qword_1E96C1E60);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8]) {
      memmove(v12, v13, 40 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1A67713EC(uint64_t a1)
{
  return sub_1A67712D4(0, *(void *)(a1 + 16), 0, (char *)a1);
}

unint64_t sub_1A6771400()
{
  unint64_t result = qword_1E96C1E78;
  if (!qword_1E96C1E78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E96C1E78);
  }
  return result;
}

uint64_t TTSAURenderer.executor.getter()
{
  return swift_retain();
}

uint64_t sub_1A6771464@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 208))();
  *a2 = result;
  return result;
}

uint64_t sub_1A67714B0(id *a1, uint64_t a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))(**(void **)a2 + 216);
  id v4 = *a1;
  return v3(v2);
}

void *sub_1A6771508()
{
  swift_beginAccess();
  id v1 = *(void **)(v0 + 40);
  id v2 = v1;
  return v1;
}

void sub_1A677154C(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void **)(v1 + 40);
  *(void *)(v1 + 40) = a1;
}

uint64_t (*sub_1A6771594())()
{
  return j__swift_endAccess;
}

uint64_t sub_1A67715E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[6] = a3;
  v4[7] = v3;
  _OWORD v4[4] = a1;
  void v4[5] = a2;
  sub_1A6741AD0((uint64_t *)&unk_1EB67A2C0);
  v4[8] = swift_task_alloc();
  type metadata accessor for TTSAURenderer();
  v4[9] = sub_1A677B99C(&qword_1E96C1E88, v5, (void (*)(uint64_t))type metadata accessor for TTSAURenderer);
  uint64_t v7 = sub_1A68923E0();
  v4[10] = v7;
  v4[11] = v6;
  return MEMORY[0x1F4188298](sub_1A67716D4, v7, v6);
}

uint64_t sub_1A67716D4()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = *(void *)(v1 + 64);
  if (v2)
  {
    v0[12] = v2;
    v0[13] = v2;
    swift_retain();
    swift_retain();
    uint64_t v3 = (void *)swift_task_alloc();
    v0[14] = v3;
    uint64_t v4 = sub_1A6741AD0(&qword_1E96C1520);
    void *v3 = v0;
    v3[1] = sub_1A6771904;
    uint64_t v5 = MEMORY[0x1E4FBC848] + 8;
    uint64_t v6 = MEMORY[0x1E4FBC0F0];
    return MEMORY[0x1F4187DA0](v0 + 2, v2, v5, v4, v6);
  }
  else
  {
    uint64_t v7 = v0[8];
    uint64_t v8 = v0[9];
    uint64_t v10 = v0[5];
    uint64_t v9 = v0[6];
    size_t v11 = (void *)v0[4];
    uint64_t v12 = *(void **)(v1 + 48);
    *(void *)(v1 + 48) = v11;
    id v13 = v11;

    sub_1A6741AD0(&qword_1E96C1E90);
    uint64_t v14 = TTSAsyncThrowingChannel.__allocating_init()();
    uint64_t v15 = sub_1A68924A0();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v7, 1, 1, v15);
    uint64_t v16 = (void *)swift_allocObject();
    _DWORD v16[2] = v1;
    v16[3] = v8;
    void v16[4] = v1;
    v16[5] = v10;
    v16[6] = v9;
    v16[7] = v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain_n();
    *(void *)(v1 + 64) = sub_1A67724DC(v7, (uint64_t)&unk_1E96C1EA0, (uint64_t)v16);
    swift_release();
    swift_task_dealloc();
    uint64_t v17 = (uint64_t (*)(uint64_t))v0[1];
    return v17(v14);
  }
}

uint64_t sub_1A6771904()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 88);
  uint64_t v3 = *(void *)(v1 + 80);
  return MEMORY[0x1F4188298](sub_1A6771A48, v3, v2);
}

uint64_t sub_1A6771A48()
{
  sub_1A6771D48(*(id *)(v0 + 16), *(unsigned char *)(v0 + 24));
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v1 + 64);
  if (*(void *)(v0 + 96))
  {
    if (v2)
    {
      swift_retain();
      swift_retain();
      sub_1A6741AD0(&qword_1E96C1520);
      char v3 = sub_1A6892580();
      swift_release();
      swift_release();
      uint64_t v1 = *(void *)(v0 + 56);
      if (v3) {
        goto LABEL_12;
      }
      uint64_t v2 = *(void *)(v1 + 64);
    }
  }
  else if (!v2)
  {
    goto LABEL_12;
  }
  swift_retain();
  swift_release();
  if (v2)
  {
LABEL_9:
    *(void *)(v0 + 96) = v2;
    *(void *)(v0 + 104) = v2;
    swift_retain();
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 112) = v4;
    uint64_t v5 = sub_1A6741AD0(&qword_1E96C1520);
    void *v4 = v0;
    v4[1] = sub_1A6771904;
    uint64_t v6 = MEMORY[0x1E4FBC848] + 8;
    uint64_t v7 = MEMORY[0x1E4FBC0F0];
    return MEMORY[0x1F4187DA0](v0 + 16, v2, v6, v5, v7);
  }
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v1 + 64);
  if (v2)
  {
    swift_retain();
    goto LABEL_9;
  }
LABEL_12:
  uint64_t v8 = *(void *)(v0 + 64);
  uint64_t v9 = *(void *)(v0 + 72);
  uint64_t v11 = *(void *)(v0 + 40);
  uint64_t v10 = *(void *)(v0 + 48);
  uint64_t v12 = *(void **)(v0 + 32);
  id v13 = *(void **)(v1 + 48);
  *(void *)(v1 + 48) = v12;
  id v14 = v12;

  sub_1A6741AD0(&qword_1E96C1E90);
  uint64_t v15 = TTSAsyncThrowingChannel.__allocating_init()();
  uint64_t v16 = sub_1A68924A0();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v8, 1, 1, v16);
  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = v1;
  void v17[3] = v9;
  void v17[4] = v1;
  uint64_t v17[5] = v11;
  v17[6] = v10;
  v17[7] = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain_n();
  *(void *)(v1 + 64) = sub_1A67724DC(v8, (uint64_t)&unk_1E96C1EA0, (uint64_t)v17);
  swift_release();
  swift_release();
  swift_task_dealloc();
  uint64_t v18 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v18(v15);
}

uint64_t type metadata accessor for TTSAURenderer()
{
  return self;
}

void sub_1A6771D48(id a1, char a2)
{
  if (a2) {
}
  }

uint64_t sub_1A6771D54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void v7[5] = a6;
  v7[6] = a7;
  uint64_t v7[3] = a4;
  v7[4] = a5;
  uint64_t v8 = sub_1A6892400();
  v7[7] = v8;
  v7[8] = *(void *)(v8 - 8);
  v7[9] = swift_task_alloc();
  type metadata accessor for TTSAURenderer();
  sub_1A677B99C(&qword_1E96C1E88, v9, (void (*)(uint64_t))type metadata accessor for TTSAURenderer);
  uint64_t v11 = sub_1A68923E0();
  v7[10] = v11;
  v7[11] = v10;
  return MEMORY[0x1F4188298](sub_1A6771E6C, v11, v10);
}

uint64_t sub_1A6771E6C()
{
  TTSKickAudioComponentRegistry();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[12] = v1;
  void *v1 = v0;
  v1[1] = sub_1A6771F08;
  uint64_t v3 = v0[4];
  uint64_t v2 = v0[5];
  return sub_1A67746E0(v3, v2);
}

uint64_t sub_1A6771F08()
{
  uint64_t v2 = (void *)*v1;
  v2[13] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[10];
    uint64_t v4 = v2[11];
    return MEMORY[0x1F4188298](sub_1A67721B0, v3, v4);
  }
  else
  {
    uint64_t v5 = (void *)swift_task_alloc();
    v2[14] = v5;
    void *v5 = v2;
    v5[1] = sub_1A6772078;
    uint64_t v6 = v2[6];
    return sub_1A6772AAC(v6);
  }
}

uint64_t sub_1A6772078()
{
  uint64_t v2 = (void *)*v1;
  v2[15] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[10];
    uint64_t v4 = v2[11];
    return MEMORY[0x1F4188298](sub_1A67722C4, v3, v4);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v2[1];
    return v5();
  }
}

uint64_t sub_1A67721B0()
{
  uint64_t v1 = *(void **)(v0 + 104);
  *(void *)(v0 + 16) = v1;
  id v2 = v1;
  sub_1A6741AD0(&qword_1E96C1520);
  if (swift_dynamicCast())
  {
    uint64_t v4 = *(void *)(v0 + 64);
    uint64_t v3 = *(void *)(v0 + 72);
    uint64_t v5 = *(void *)(v0 + 56);

    TTSAsyncThrowingChannel.finish()();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    uint64_t v6 = *(void **)(v0 + 16);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 24);

    TTSAsyncThrowingChannel.fail<>(_:)(v1);
    uint64_t v8 = *(void **)(v7 + 32);
    *(void *)(v7 + 32) = 0;

    uint64_t v6 = v1;
  }

  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_1A67722C4()
{
  uint64_t v1 = *(void **)(v0 + 120);
  *(void *)(v0 + 16) = v1;
  id v2 = v1;
  sub_1A6741AD0(&qword_1E96C1520);
  if (swift_dynamicCast())
  {
    uint64_t v4 = *(void *)(v0 + 64);
    uint64_t v3 = *(void *)(v0 + 72);
    uint64_t v5 = *(void *)(v0 + 56);

    TTSAsyncThrowingChannel.finish()();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    uint64_t v6 = *(void **)(v0 + 16);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 24);

    TTSAsyncThrowingChannel.fail<>(_:)(v1);
    uint64_t v8 = *(void **)(v7 + 32);
    *(void *)(v7 + 32) = 0;

    uint64_t v6 = v1;
  }

  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_1A67723D8()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t sub_1A6772430()
{
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v5 = v0[6];
  uint64_t v4 = v0[7];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_1A6750954;
  return sub_1A6771D54((uint64_t)v6, v7, v8, v2, v3, v5, v4);
}

uint64_t sub_1A67724DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_1A68924A0();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    sub_1A6892490();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  sub_1A677B668(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1A68923E0();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t sub_1A677265C()
{
  if (*(void *)(v0 + 64))
  {
    swift_retain();
    sub_1A6741AD0(&qword_1E96C1520);
    sub_1A6892590();
    swift_release();
  }
  *(void *)(v0 + 64) = 0;

  return swift_release();
}

uint64_t TTSAURenderer.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  TTSAURenderer.init()();
  return v0;
}

uint64_t TTSAURenderer.init()()
{
  type metadata accessor for TTSExecutor();
  *(void *)(v0 + 16) = TTSExecutor.__allocating_init()();
  sub_1A67501D4(0, (unint64_t *)&qword_1EB67A340);
  uint64_t v1 = sub_1A6891E10();
  MEMORY[0x1F4188790](v1 - 8);
  sub_1A6891E00();
  uint64_t v2 = sub_1A6892890();
  MEMORY[0x1F4188790](v2 - 8);
  sub_1A6892880();
  uint64_t v3 = sub_1A68928A0();
  MEMORY[0x1F4188790](v3);
  (*(void (**)(char *, void))(v5 + 104))((char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x1E4FBCC50]);
  *(void *)(v0 + 24) = sub_1A68928D0();
  *(void *)(v0 + 32) = 0;
  *(void *)(v0 + 40) = 0;
  *(void *)(v0 + 48) = 0;
  if (TTSSpeechUnitTestingMode()) {
    int v6 = 512;
  }
  else {
    int v6 = 256;
  }
  *(_DWORD *)(v0 + 56) = v6;
  *(_DWORD *)(v0 + 60) = 0;
  *(void *)(v0 + 64) = 0;
  *(unsigned char *)(v0 + 72) = 0;
  sub_1A6741AD0(&qword_1E96C14D0);
  *(void *)(v0 + 80) = sub_1A680204C();
  *(void *)(v0 + 88) = 0;
  uint64_t v7 = MEMORY[0x1E4FBC860];
  *(void *)(v0 + 96) = 0;
  *(void *)(v0 + 104) = v7;
  return v0;
}

id *TTSAURenderer.deinit()
{
  id v1 = v0[12];
  if (v1) {
    objc_msgSend(v1, sel_invalidate);
  }
  swift_release();

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t TTSAURenderer.__deallocating_deinit()
{
  TTSAURenderer.deinit();

  return swift_deallocClassInstance();
}

uint64_t sub_1A67729D8()
{
  uint64_t v1 = (*(uint64_t (**)(void))(**(void **)(v0 + 80) + 160))();
  unint64_t v2 = sub_1A67778F0(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if ((v2 & 0x8000000000000000) != 0 || (uint64_t v3 = (void *)v2, (v2 & 0x4000000000000000) != 0))
  {
    uint64_t v3 = sub_1A67779EC(v2);
    swift_release();
  }
  uint64_t v5 = v3;
  sub_1A677786C((uint64_t *)&v5, sub_1A6778474);
  swift_release();
  return (uint64_t)v5;
}

uint64_t sub_1A6772AAC(uint64_t a1)
{
  v2[34] = a1;
  v2[35] = v1;
  uint64_t v3 = sub_1A6892D90();
  v2[36] = v3;
  v2[37] = *(void *)(v3 - 8);
  v2[38] = swift_task_alloc();
  v2[39] = type metadata accessor for TTSAURenderer.SpeechBuffer();
  v2[40] = swift_task_alloc();
  type metadata accessor for TTSAURenderer();
  v2[41] = sub_1A677B99C(&qword_1E96C1E88, v4, (void (*)(uint64_t))type metadata accessor for TTSAURenderer);
  uint64_t v5 = sub_1A68923E0();
  v2[42] = v5;
  v2[43] = v6;
  return MEMORY[0x1F4188298](sub_1A6772C24, v5, v6);
}

uint64_t sub_1A6772C24()
{
  uint64_t v1 = *(void *)(v0 + 280);
  unint64_t v2 = *(void **)(v1 + 48);
  *(void *)(v0 + 352) = v2;
  if (!v2) {
    goto LABEL_11;
  }
  uint64_t v3 = *(void **)(v1 + 32);
  *(void *)(v0 + 360) = v3;
  if (!v3) {
    goto LABEL_11;
  }
  *(_DWORD *)(v1 + 60) = 0;
  uint64_t v4 = *(void *)(v1 + 80);
  *(void *)(v0 + 368) = v4;
  uint64_t v5 = *(void (**)(void))(*(void *)v4 + 160);
  uint64_t v6 = (*(void *)v4 + 160) & 0xFFFFFFFFFFFFLL | 0x1643000000000000;
  *(void *)(v0 + 376) = v5;
  *(void *)(v0 + 384) = v6;
  id v7 = v2;
  id v8 = v3;
  v5();
  swift_bridgeObjectRelease();
  objc_msgSend(v8, sel_cancelSpeechRequest);
  objc_msgSend(v8, sel_maximumFramesToRender);
  objc_msgSend(v8, sel_synthesizeSpeechRequest_, v7);
  id v9 = objc_msgSend(v8, sel_maximumFramesToRender);
  uint64_t v10 = *(uint64_t (**)(id))(*(void *)v1 + 208);
  unint64_t v11 = (*(void *)v1 + 208) & 0xFFFFFFFFFFFFLL | 0xFC00000000000000;
  *(void *)(v0 + 392) = v10;
  *(void *)(v0 + 400) = v11;
  uint64_t v12 = (void *)v10(v9);
  if (!v12) {
    goto LABEL_8;
  }
  uint64_t v13 = v12;
  objc_msgSend(v12, sel_sampleRate);
  double v15 = v14;

  double v19 = v15 * 0.1;
  if ((~COERCE__INT64(v15 * 0.1) & 0x7FF0000000000000) == 0)
  {
LABEL_25:
    __break(1u);
    return MEMORY[0x1F4188298](v16, v17, v18);
  }
  if (v19 <= -1.0)
  {
    __break(1u);
    goto LABEL_25;
  }
  if (v19 < 4294967300.0) {
    goto LABEL_9;
  }
  __break(1u);
LABEL_8:
  double v19 = 2205.0;
LABEL_9:
  *(double *)(v0 + 408) = v19;
  if ((sub_1A68925B0() & 1) == 0)
  {
    uint64_t v24 = *(void *)(v0 + 280);
    *(unsigned char *)(v0 + 520) = 0;
    *(_DWORD *)(v0 + 508) = 0;
    *(void *)(v0 + 416) = 0;
    uint64_t v25 = *(void **)(v24 + 32);
    *(void *)(v0 + 424) = v25;
    if (v25)
    {
      uint64_t v26 = *(uint64_t (**)(void))(v0 + 392);
      id v27 = v25;
      uint64_t v28 = v26();
      *(void *)(v0 + 432) = v28;
      if (v28)
      {
        unint64_t v29 = (void *)v28;
        id v30 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F153B8]), sel_initWithPCMFormat_frameCapacity_, v28, *(unsigned int *)(*(void *)(v0 + 280) + 56));
        *(void *)(v0 + 440) = v30;
        if (v30)
        {
          *(_DWORD *)(v0 + 512) = *(_DWORD *)(*(void *)(v0 + 280) + 56);
          swift_getObjectType();
          uint64_t v31 = sub_1A68923E0();
          uint64_t v33 = v32;
          uint64_t v16 = sub_1A6772FB8;
          uint64_t v17 = v31;
          uint64_t v18 = v33;
          return MEMORY[0x1F4188298](v16, v17, v18);
        }

        id v27 = v29;
      }
    }
    sub_1A677AF54();
    swift_allocError();
    void *v34 = 3;
    swift_willThrow();
    unint64_t v35 = *(void **)(v0 + 352);

    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_12;
  }
  unint64_t v21 = *(void **)(v0 + 352);
  uint64_t v20 = *(void **)(v0 + 360);
  TTSAsyncThrowingChannel.finish()();

LABEL_11:
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
LABEL_12:
  return v22();
}

uint64_t sub_1A6772FB8()
{
  uint64_t v1 = (void *)v0;
  uint64_t v2 = v0;
  uint64_t v3 = v0 + 16;
  uint64_t v4 = (const void *)(v0 + 144);
  uint64_t v5 = v0 + 240;
  int v6 = *(_DWORD *)(v0 + 512);
  id v7 = (void *)v1[55];
  id v8 = (void *)v1[53];
  v1[2] = v2;
  v1[7] = v5;
  v1[3] = sub_1A6773300;
  uint64_t v20 = v3;
  uint64_t v9 = swift_continuation_init();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v8;
  *(_DWORD *)(v10 + 24) = v6;
  *(void *)(v10 + 32) = v7;
  *(void *)(v10 + 40) = v9;
  v1[22] = sub_1A677B11C;
  v1[23] = v10;
  v1[18] = MEMORY[0x1E4F143A8];
  v1[19] = 1107296256;
  v1[20] = sub_1A677469C;
  v1[21] = &unk_1EFB81540;
  unint64_t v11 = _Block_copy(v4);
  uint64_t v21 = sub_1A6891E10();
  uint64_t v12 = *(void *)(v21 - 8);
  uint64_t v13 = swift_task_alloc();
  id v14 = v8;
  id v15 = v7;
  sub_1A6891DF0();
  uint64_t v16 = sub_1A6891DE0();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = swift_task_alloc();
  v1[33] = MEMORY[0x1E4FBC860];
  sub_1A677B280((unint64_t *)&qword_1E96C1600, MEMORY[0x1F41AAEE8]);
  sub_1A6741AD0(&qword_1E96C1618);
  sub_1A6766A64((unint64_t *)&unk_1E96C1620, &qword_1E96C1618);
  sub_1A6892B90();
  MEMORY[0x1AD0BF980](0, v13, v18, v11);
  _Block_release(v11);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v18, v16);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v21);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x1F41881E8](v20);
}

uint64_t sub_1A6773300()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 448) = v2;
  if (v2)
  {
    swift_willThrow();
    uint64_t v3 = *(void *)(v1 + 336);
    uint64_t v4 = *(void *)(v1 + 344);
    uint64_t v5 = sub_1A6773B6C;
  }
  else
  {
    *(_DWORD *)(v1 + 516) = *(_DWORD *)(v1 + 240);
    *(void *)(v1 + 456) = *(void *)(v1 + 248);
    uint64_t v3 = *(void *)(v1 + 336);
    uint64_t v4 = *(void *)(v1 + 344);
    uint64_t v5 = sub_1A6773458;
  }
  return MEMORY[0x1F4188298](v5, v3, v4);
}

uint64_t sub_1A6773458()
{
  uint64_t v1 = (unsigned char *)(v0 + 520);
  int v2 = *(_DWORD *)(v0 + 516);
  uint64_t v3 = *(void **)(v0 + 432);
  uint64_t v4 = *(void **)(v0 + 424);

  if ((v2 & 0x80) != 0) {
    objc_msgSend(*(id *)(v0 + 360), sel_reset);
  }
  uint64_t v5 = *(void **)(v0 + 456);
  if (*v1)
  {
    int v6 = v5;
LABEL_5:
    char v7 = 1;
LABEL_12:
    *(void *)(v0 + 464) = v6;
    *(unsigned char *)(v0 + 521) = v7;
    uint64_t v13 = *(void *)(v0 + 280);
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = v6;
    unint64_t v15 = *(void *)(v13 + 104);
    if (v15 >> 62)
    {
      unint64_t v51 = v6;
      swift_bridgeObjectRetain();
      uint64_t v16 = sub_1A6892EB0();
      if (!v16) {
        goto LABEL_38;
      }
    }
    else
    {
      uint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t v17 = v6;
      swift_bridgeObjectRetain();
      if (!v16) {
        goto LABEL_38;
      }
    }
    if (v16 >= 1)
    {
      uint64_t v18 = 0;
      unint64_t v65 = v15 & 0xC000000000000001;
      uint64_t v66 = v16;
      unint64_t v67 = v15;
      do
      {
        if (v65) {
          id v19 = (id)MEMORY[0x1AD0BFD30](v18, v15);
        }
        else {
          id v19 = *(id *)(v15 + 8 * v18 + 32);
        }
        uint64_t v21 = v19;
        uint64_t v22 = *(void *)(v0 + 280);
        ++v18;
        *(_DWORD *)(v0 + 504) = 64;
        LODWORD(v20) = *(_DWORD *)(v22 + 60);
        *(double *)(v0 + 80) = (double)v20;
        *(_OWORD *)(v0 + 104) = 0u;
        *(_OWORD *)(v0 + 120) = 0u;
        *(_OWORD *)(v0 + 88) = 0u;
        *(void *)(v0 + 136) = 1;
        id v23 = objc_msgSend(v19, sel_AUAudioUnit);
        uint64_t v24 = (void (**)(id, uint64_t, uint64_t, id, void, id, void *))objc_msgSend(v23, sel_renderBlock);

        id v25 = objc_msgSend(v6, sel_frameLength);
        id v26 = objc_msgSend(v6, sel_mutableAudioBufferList);
        *(void *)(v0 + 224) = sub_1A677B300;
        *(void *)(v0 + 232) = v14;
        *(void *)(v0 + 192) = MEMORY[0x1E4F143A8];
        *(void *)(v0 + 200) = 1107296256;
        *(void *)(v0 + 208) = sub_1A6774618;
        *(void *)(v0 + 216) = &unk_1EFB81590;
        id v27 = _Block_copy((const void *)(v0 + 192));
        swift_retain_n();
        swift_release();
        v24[2](v24, v0 + 504, v0 + 80, v25, 0, v26, v27);

        _Block_release(v27);
        _Block_release(v24);
        swift_release();
        unint64_t v15 = v67;
      }
      while (v66 != v18);
LABEL_38:
      swift_release();
      uint64_t v52 = *(void *)(v0 + 416);
      unint64_t v53 = *(void (**)(void))(v0 + 376);
      swift_bridgeObjectRelease();
      unint64_t v54 = v6;
      v53();
      uint64_t v55 = swift_bridgeObjectRetain();
      uint64_t v56 = sub_1A67778F0(v55);
      swift_bridgeObjectRelease();
      *(void *)(v0 + 256) = v56;
      sub_1A677786C((uint64_t *)(v0 + 256), sub_1A6777B30);
      *(void *)(v0 + 472) = v52;
      if (v52)
      {
        return swift_release();
      }
      else
      {
        unint64_t v58 = *(int **)(v0 + 312);
        uint64_t v57 = *(void *)(v0 + 320);
        uint64_t v59 = *(void *)(v0 + 280);
        swift_bridgeObjectRelease();
        uint64_t v60 = *(void *)(v0 + 256);
        LODWORD(v59) = *(_DWORD *)(v59 + 60);
        uint64_t v61 = v54;
        sub_1A68917F0();
        *(_DWORD *)(v57 + v58[5]) = v59;
        *(void *)(v57 + v58[6]) = v61;
        *(void *)(v57 + v58[7]) = v60;
        unint64_t v62 = (void *)swift_task_alloc();
        *(void *)(v0 + 480) = v62;
        *unint64_t v62 = v0;
        v62[1] = sub_1A6773C30;
        uint64_t v63 = *(void *)(v0 + 320);
        return TTSAsyncThrowingChannel.send(_:)(v63);
      }
    }
    __break(1u);
    goto LABEL_46;
  }
  unsigned int v8 = *(_DWORD *)(v0 + 508);
  unsigned int v9 = *(double *)(v0 + 408);
  uint64_t v10 = v5;
  if (v8 >= v9)
  {
    int v6 = v10;
    goto LABEL_11;
  }
  char v11 = TTSSpeechUnitTestingMode();
  int v6 = *(char **)(v0 + 456);
  if (v11)
  {
LABEL_11:
    char v7 = 0;
    goto LABEL_12;
  }
  uint64_t v12 = sub_1A6774440(0.001);
  if (v12)
  {
    int v6 = v12;

    goto LABEL_5;
  }
  uint64_t v28 = *(void *)(v0 + 280);
  int v29 = *(_DWORD *)(v28 + 56);
  int v30 = *(_DWORD *)(v28 + 60);
  BOOL v31 = __CFADD__(v30, v29);
  int v32 = v30 + v29;
  if (v31)
  {
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
  }
  uint64_t v33 = *(void **)(v0 + 456);
  int v34 = *(_DWORD *)(v0 + 508);
  *(_DWORD *)(v28 + 60) = v32;

  int v35 = *(_DWORD *)(v28 + 56);
  int v36 = v34 + v35;
  if (__CFADD__(v34, v35)) {
    goto LABEL_47;
  }
  uint64_t v37 = *(void *)(v0 + 416);
  if (sub_1A68925B0())
  {
    uint64_t v39 = *(void **)(v0 + 352);
    uint64_t v38 = *(void **)(v0 + 360);
    TTSAsyncThrowingChannel.finish()();

    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v40 = *(uint64_t (**)(void))(v0 + 8);
LABEL_34:
    return v40();
  }
  unsigned char *v1 = 0;
  *(_DWORD *)(v0 + 508) = v36;
  *(void *)(v0 + 416) = v37;
  unint64_t v41 = *(void **)(*(void *)(v0 + 280) + 32);
  *(void *)(v0 + 424) = v41;
  if (!v41)
  {
LABEL_33:
    sub_1A677AF54();
    swift_allocError();
    *uint64_t v49 = 3;
    swift_willThrow();
    unint64_t v50 = *(void **)(v0 + 352);

    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v40 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_34;
  }
  uint64_t v42 = *(uint64_t (**)(void))(v0 + 392);
  id v43 = v41;
  uint64_t v44 = v42();
  *(void *)(v0 + 432) = v44;
  if (!v44)
  {
LABEL_32:

    goto LABEL_33;
  }
  uint64_t v45 = (void *)v44;
  id v46 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F153B8]), sel_initWithPCMFormat_frameCapacity_, v44, *(unsigned int *)(*(void *)(v0 + 280) + 56));
  *(void *)(v0 + 440) = v46;
  if (!v46)
  {

    id v43 = v45;
    goto LABEL_32;
  }
  *(_DWORD *)(v0 + 512) = *(_DWORD *)(*(void *)(v0 + 280) + 56);
  swift_getObjectType();
  uint64_t v48 = sub_1A68923E0();
  return MEMORY[0x1F4188298](sub_1A6772FB8, v48, v47);
}

uint64_t sub_1A6773B6C()
{
  uint64_t v1 = *(void **)(v0 + 432);
  int v2 = *(void **)(v0 + 424);

  uint64_t v3 = *(void **)(v0 + 352);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_1A6773C30()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 320);
  swift_task_dealloc();
  sub_1A677B344(v2);
  uint64_t v3 = *(void *)(v1 + 344);
  uint64_t v4 = *(void *)(v1 + 336);
  return MEMORY[0x1F4188298](sub_1A6773DA0, v4, v3);
}

uint64_t sub_1A6773DA0()
{
  uint64_t v1 = *(void *)(v0 + 280);
  int v2 = *(_DWORD *)(v1 + 56);
  int v3 = *(_DWORD *)(v1 + 60);
  BOOL v4 = __CFADD__(v3, v2);
  int v5 = v3 + v2;
  if (v4) {
    __break(1u);
  }
  int v6 = *(_DWORD *)(v0 + 516);
  *(_DWORD *)(v1 + 60) = v5;
  if ((v6 & 0x80) == 0)
  {
    unsigned int v8 = *(void **)(v0 + 456);
    char v7 = *(void **)(v0 + 464);

    uint64_t v9 = *(void *)(v0 + 472);
    char v10 = *(unsigned char *)(v0 + 521);
    int v11 = *(_DWORD *)(v0 + 508);
    if (sub_1A68925B0())
    {
      uint64_t v13 = *(void **)(v0 + 352);
      uint64_t v12 = *(void **)(v0 + 360);
      TTSAsyncThrowingChannel.finish()();

      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
LABEL_17:
      return v14();
    }
    *(unsigned char *)(v0 + 520) = v10;
    *(_DWORD *)(v0 + 508) = v11;
    *(void *)(v0 + 416) = v9;
    uint64_t v18 = *(void **)(*(void *)(v0 + 280) + 32);
    *(void *)(v0 + 424) = v18;
    if (v18)
    {
      id v19 = *(uint64_t (**)(void))(v0 + 392);
      id v20 = v18;
      uint64_t v21 = v19();
      *(void *)(v0 + 432) = v21;
      if (v21)
      {
        uint64_t v22 = (void *)v21;
        id v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F153B8]), sel_initWithPCMFormat_frameCapacity_, v21, *(unsigned int *)(*(void *)(v0 + 280) + 56));
        *(void *)(v0 + 440) = v23;
        if (v23)
        {
          *(_DWORD *)(v0 + 512) = *(_DWORD *)(*(void *)(v0 + 280) + 56);
          swift_getObjectType();
          uint64_t v25 = sub_1A68923E0();
          return MEMORY[0x1F4188298](sub_1A6772FB8, v25, v24);
        }

        id v20 = v22;
      }
    }
    sub_1A677AF54();
    swift_allocError();
    *id v26 = 3;
    swift_willThrow();
    id v27 = *(void **)(v0 + 352);

    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_17;
  }
  objc_msgSend(*(id *)(v0 + 360), sel_maximumFramesToRender);
  sub_1A6892D80();
  uint64_t v15 = dword_1E96C1F08;
  uint64_t v16 = (void *)swift_task_alloc();
  *(void *)(v0 + 488) = v16;
  void *v16 = v0;
  v16[1] = sub_1A67740E0;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1E96C1F08 + v15))(5000000000000000, 0, 0, 0, 1);
}

uint64_t sub_1A67740E0()
{
  int v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 496) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[37] + 8))(v2[38], v2[36]);
  uint64_t v3 = v2[43];
  uint64_t v4 = v2[42];
  if (v0) {
    int v5 = sub_1A6774378;
  }
  else {
    int v5 = sub_1A6774294;
  }
  return MEMORY[0x1F4188298](v5, v4, v3);
}

uint64_t sub_1A6774294()
{
  int v2 = *(void **)(v0 + 456);
  uint64_t v1 = *(void **)(v0 + 464);
  id v3 = *(id *)(v0 + 360);
  objc_msgSend(v3, sel_maximumFramesToRender);

  int v5 = *(void **)(v0 + 352);
  uint64_t v4 = *(void **)(v0 + 360);
  TTSAsyncThrowingChannel.finish()();

  swift_task_dealloc();
  swift_task_dealloc();
  int v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_1A6774378()
{
  uint64_t v1 = (void *)v0[57];
  int v2 = (void *)v0[58];
  uint64_t v4 = (void *)v0[44];
  id v3 = (void *)v0[45];

  swift_task_dealloc();
  swift_task_dealloc();
  int v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

char *sub_1A6774440(float a1)
{
  id v3 = objc_msgSend(v1, sel_floatChannelData);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3;
  unsigned int v5 = objc_msgSend(v1, sel_frameLength);
  id v6 = objc_msgSend(v1, sel_format);
  unsigned int v7 = objc_msgSend(v6, sel_channelCount);

  if (!v5) {
    return 0;
  }
  uint64_t v8 = 0;
  uint64_t v9 = v5;
  uint64_t v10 = v7;
  while (!v7)
  {
LABEL_4:
    if (++v8 == v5) {
      return 0;
    }
  }
  uint64_t v11 = v7 - 1;
  uint64_t v12 = v4 + 1;
  if (fabsf(*(float *)(*v4 + 4 * v8)) <= a1)
  {
    while (v11)
    {
      uint64_t v13 = *v12++;
      --v11;
      if (fabsf(*(float *)(v13 + 4 * v8)) > a1) {
        goto LABEL_9;
      }
    }
    goto LABEL_4;
  }
LABEL_9:
  uint64_t v14 = v5 - v8;
  uint64_t result = (char *)objc_msgSend(v1, sel_format);
  if (v14 < 0) {
    goto LABEL_24;
  }
  uint64_t v16 = result;
  id v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F153B8]), sel_initWithPCMFormat_frameCapacity_, result, v9 - v8);

  if (!v17) {
    return (char *)v17;
  }
  uint64_t result = (char *)objc_msgSend(v17, sel_setFrameLength_, v9 - v8);
  unint64_t v18 = 0;
  size_t v19 = 4 * v14;
  uint64_t v20 = 8 * v10;
  while (v20 != v18)
  {
    uint64_t v21 = v4[v18 / 8];
    uint64_t result = (char *)objc_msgSend(v17, sel_floatChannelData);
    if (!result) {
      goto LABEL_25;
    }
    uint64_t v22 = (char *)(v21 + 4 * v8);
    uint64_t result = *(char **)&result[v18];
    if (result != v22 || (unint64_t)result >= v21 + 4 * v9) {
      uint64_t result = (char *)memmove(result, v22, v19);
    }
    v18 += 8;
    if (v20 == v18) {
      return (char *)v17;
    }
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1A6774618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v12 = v11(a2, a3, a4, a5, a6);
  swift_release();
  return v12;
}

uint64_t sub_1A677469C(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

uint64_t sub_1A67746E0(uint64_t a1, uint64_t a2)
{
  v3[18] = a2;
  v3[19] = v2;
  v3[17] = a1;
  type metadata accessor for TTSAURenderer();
  sub_1A677B99C(&qword_1E96C1E88, v4, (void (*)(uint64_t))type metadata accessor for TTSAURenderer);
  uint64_t v5 = sub_1A68923E0();
  v3[20] = v5;
  v3[21] = v6;
  return MEMORY[0x1F4188298](sub_1A67747CC, v5, v6);
}

uint64_t sub_1A67747CC()
{
  uint64_t v1 = *(void **)(v0 + 152);
  uint64_t v2 = (void *)v1[6];
  *(void *)(v0 + 176) = v2;
  if (!v2)
  {
    sub_1A677AF54();
    swift_allocError();
    void *v16 = 1;
    swift_willThrow();
    id v17 = *(uint64_t (**)(void))(v0 + 8);
LABEL_18:
    return v17();
  }
  id v3 = objc_msgSend(v2, sel_voice);
  objc_msgSend(v3, sel_auComponentDesc);
  int32x2_t v26 = *(int32x2_t *)&v27[12];

  uint64_t v4 = (void *)v1[4];
  if (v4)
  {
    BOOL v5 = v1[11] && *(void *)(v0 + 136) == 0;
    BOOL v6 = v5;
    objc_msgSend(v4, sel_componentDescription, *(void *)&v27[12]);
    int32x4_t v7 = vdupq_lane_s32(v26, 0);
    v7.i64[0] = *(void *)v27;
    v7.i32[2] = *(_DWORD *)&v27[8];
    if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v7, *(int32x4_t *)v27))), 0xFuLL))) & 1) == 0&& !v6)
    {
      unint64_t v9 = *(void *)(v0 + 144);
      uint64_t v8 = *(void *)(v0 + 152);
      sub_1A6775494(*(void **)(v0 + 136));
      uint64_t v10 = *(void *)(v8 + 104);
      swift_bridgeObjectRetain();
      LOBYTE(v9) = sub_1A6776668(v9, v10, (uint64_t)&unk_1E96C1EF0);
      swift_bridgeObjectRelease();
      uint64_t v11 = *(void *)(v0 + 152);
      if (v9)
      {
        if (*(unsigned char *)(v11 + 72))
        {
LABEL_23:
          unint64_t v18 = *(void *)(v8 + 104);
          if (v18 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v19 = sub_1A6892EB0();
            if (v19) {
              goto LABEL_25;
            }
          }
          else
          {
            uint64_t v19 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain();
            if (v19)
            {
LABEL_25:
              if (v19 < 1) {
                __break(1u);
              }
              uint64_t v20 = 0;
              do
              {
                if ((v18 & 0xC000000000000001) != 0) {
                  id v21 = (id)MEMORY[0x1AD0BFD30](v20, v18);
                }
                else {
                  id v21 = *(id *)(v18 + 8 * v20 + 32);
                }
                uint64_t v22 = v21;
                ++v20;
                id v23 = objc_msgSend(v21, sel_AUAudioUnit);
                objc_msgSend(v23, sel_reset);
              }
              while (v19 != v20);
            }
          }
          uint64_t v24 = *(void **)(v0 + 176);
          swift_bridgeObjectRelease();

          id v17 = *(uint64_t (**)(void))(v0 + 8);
          goto LABEL_18;
        }
      }
      else
      {
        *(void *)(v8 + 104) = *(void *)(v0 + 144);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(unsigned char *)(v11 + 72) = 0;
      }
      sub_1A677594C();
      goto LABEL_23;
    }
  }
  uint64_t v12 = v0 + 16;
  objc_msgSend(self, sel_registerFirstPartyInProcessAudioUnits);
  uint64_t v13 = self;
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v0 + 128;
  *(void *)(v0 + 24) = sub_1A6774C04;
  uint64_t v14 = swift_continuation_init();
  *(_DWORD *)(v0 + 192) = *(_DWORD *)v27;
  uint64_t v15 = v0 + 192;
  *(void *)(v15 - 112) = MEMORY[0x1E4F143A8];
  *(void *)(v15 - 104) = 0x40000000;
  *(void *)(v15 - 96) = sub_1A6775324;
  *(void *)(v15 - 88) = &unk_1E5C69408;
  *(void *)(v15 - 80) = v14;
  *(_DWORD *)(v15 + 4) = *(_DWORD *)&v27[4];
  *(_DWORD *)(v15 + 8) = *(_DWORD *)&v27[8];
  *(int32x2_t *)(v15 + 12) = v26;
  objc_msgSend(v13, sel_instantiateWithComponentDescription_options_completionHandler_, v15, 1);
  return MEMORY[0x1F41881E8](v12);
}

uint64_t sub_1A6774C04()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 184) = v2;
  uint64_t v3 = *(void *)(v1 + 168);
  uint64_t v4 = *(void *)(v1 + 160);
  if (v2) {
    BOOL v5 = sub_1A6775254;
  }
  else {
    BOOL v5 = sub_1A6774D60;
  }
  return MEMORY[0x1F4188298](v5, v4, v3);
}

uint64_t sub_1A6774D60()
{
  uint64_t v1 = v0[19];
  uint64_t v2 = (void *)v0[16];
  id v3 = objc_msgSend(self, sel_makeAU_, v2);
  uint64_t v4 = *(void **)(v1 + 32);
  *(void *)(v1 + 32) = v3;

  sub_1A67756FC();
  BOOL v5 = *(void **)(v1 + 32);
  if (v5)
  {
    uint64_t v6 = v0[19];
    objc_msgSend(v5, sel_setMaximumFramesToRender_, *(unsigned int *)(v6 + 56));
    uint64_t v7 = *(void **)(v6 + 32);
    if (v7)
    {
      uint64_t v8 = v0[19];
      id v9 = objc_msgSend(v7, sel_outputBusses);
      id v10 = objc_msgSend(v9, sel_objectAtIndexedSubscript_, 0);

      objc_msgSend(v10, sel_setEnabled_, 1);
      uint64_t v11 = *(void **)(v8 + 32);
      if (v11) {
        objc_msgSend(v11, sel_setRenderingOffline_, 1);
      }
    }
  }
  uint64_t v12 = v0[19];
  *(void *)(v12 + 88) = 0;
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void **)(v12 + 32);
  if (!v13) {
    goto LABEL_13;
  }
  uint64_t v14 = (void **)(v0 + 10);
  uint64_t v15 = v0[19];
  uint64_t v16 = swift_allocObject();
  swift_weakInit();
  v0[14] = sub_1A677AFE0;
  v0[15] = v16;
  v0[10] = MEMORY[0x1E4F143A8];
  v0[11] = 1107296256;
  v0[12] = sub_1A67753E4;
  v0[13] = &unk_1EFB814F0;
  id v17 = _Block_copy(v0 + 10);
  id v18 = v13;
  swift_release();
  objc_msgSend(v18, sel_setSpeechSynthesisOutputMetadataBlock_, v17);
  _Block_release(v17);

  uint64_t v19 = *(void **)(v15 + 32);
  if (!v19) {
    goto LABEL_13;
  }
  *uint64_t v14 = 0;
  unsigned int v20 = objc_msgSend(v19, sel_allocateRenderResourcesAndReturnError_, v0 + 10);
  id v21 = *v14;
  if (!v20)
  {
    int v34 = (void *)v0[22];
    id v36 = v21;
    sub_1A68916F0();

    goto LABEL_15;
  }
  uint64_t v22 = *(void **)(v0[19] + 32);
  id v23 = v21;
  if (!v22
    || (id v24 = objc_msgSend(v22, sel_outputBusses),
        id v25 = objc_msgSend(v24, sel_objectAtIndexedSubscript_, 0),
        v24,
        id v26 = objc_msgSend(v25, sel_format),
        v25,
        !v26))
  {
LABEL_13:
    int v34 = (void *)v0[22];
    sub_1A677AF54();
    swift_allocError();
    void *v35 = 0;
LABEL_15:
    swift_willThrow();

    uint64_t v37 = (uint64_t (*)(void))v0[1];
    goto LABEL_16;
  }
  id v27 = (unsigned char *)v0[19];
  uint64_t v28 = *(void (**)(id))(*(void *)v27 + 216);
  id v29 = v26;
  v28(v26);

  v27[72] = 0;
  unint64_t v31 = v0[18];
  uint64_t v30 = v0[19];
  sub_1A6775494((void *)v0[17]);
  uint64_t v32 = *(void *)(v30 + 104);
  swift_bridgeObjectRetain();
  LOBYTE(v31) = sub_1A6776668(v31, v32, (uint64_t)&unk_1E96C1EF0);
  swift_bridgeObjectRelease();
  uint64_t v33 = v0[19];
  if ((v31 & 1) == 0)
  {
    *(void *)(v30 + 104) = v0[18];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(v33 + 72) = 0;
    goto LABEL_20;
  }
  if ((*(unsigned char *)(v33 + 72) & 1) == 0) {
LABEL_20:
  }
    sub_1A677594C();
  unint64_t v39 = *(void *)(v30 + 104);
  if (v39 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v40 = sub_1A6892EB0();
    if (v40) {
      goto LABEL_23;
    }
  }
  else
  {
    uint64_t v40 = *(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v40)
    {
LABEL_23:
      if (v40 < 1) {
        __break(1u);
      }
      uint64_t v41 = 0;
      do
      {
        if ((v39 & 0xC000000000000001) != 0) {
          id v42 = (id)MEMORY[0x1AD0BFD30](v41, v39);
        }
        else {
          id v42 = *(id *)(v39 + 8 * v41 + 32);
        }
        id v43 = v42;
        ++v41;
        id v44 = objc_msgSend(v42, sel_AUAudioUnit);
        objc_msgSend(v44, sel_reset);
      }
      while (v40 != v41);
    }
  }
  uint64_t v45 = (void *)v0[22];
  swift_bridgeObjectRelease();

  uint64_t v37 = (uint64_t (*)(void))v0[1];
LABEL_16:
  return v37();
}

uint64_t sub_1A6775254()
{
  uint64_t v2 = (void *)v0[22];
  uint64_t v1 = v0[23];
  swift_willThrow();
  sub_1A677AF54();
  swift_allocError();
  void *v3 = v1;
  swift_willThrow();

  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1A6775324(uint64_t result, void *a2, void *a3)
{
  if (a3)
  {
    sub_1A6741AD0(&qword_1E96C1520);
    swift_allocError();
    void *v4 = a3;
    id v5 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else if (a2)
  {
    **(void **)(*(void *)(*(void *)(result + 32) + 64) + 40) = a2;
    id v6 = a2;
    return swift_continuation_throwingResume();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1A67753E4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void (**)(uint64_t, id))(a1 + 32);
  sub_1A67501D4(0, &qword_1E96C3170);
  uint64_t v5 = sub_1A68922E0();
  swift_retain();
  id v6 = a3;
  v4(v5, v6);
  swift_release();
  swift_bridgeObjectRelease();
}

void *sub_1A6775494(void *result)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void *)(v1 + 88);
  if (result)
  {
    if (v3)
    {
      swift_bridgeObjectRetain();
      uint64_t v4 = swift_bridgeObjectRetain();
      char v5 = sub_1A673F5F8(v4, v3);
      swift_bridgeObjectRelease();
      uint64_t result = (void *)swift_bridgeObjectRelease();
      if (v5) {
        return result;
      }
    }
  }
  else if (!v3)
  {
    return result;
  }
  uint64_t result = *(void **)(v1 + 32);
  if (!result) {
    return result;
  }
  uint64_t result = objc_msgSend(result, sel_parameterTree);
  if (!result) {
    return result;
  }
  id v6 = result;
  id v7 = objc_msgSend(result, sel_allParameters);

  sub_1A67501D4(0, &qword_1E96C1EE0);
  unint64_t v8 = sub_1A68922E0();

  if (v2)
  {
    if (v8 >> 62)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v9 = sub_1A6892EB0();
      uint64_t result = (void *)swift_bridgeObjectRelease();
      if (v9) {
        goto LABEL_11;
      }
    }
    else
    {
      uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = (void *)swift_bridgeObjectRetain();
      if (v9)
      {
LABEL_11:
        if (v9 < 1)
        {
          __break(1u);
          return result;
        }
        for (uint64_t i = 0; i != v9; ++i)
        {
          if ((v8 & 0xC000000000000001) != 0) {
            id v11 = (id)MEMORY[0x1AD0BFD30](i, v8);
          }
          else {
            id v11 = *(id *)(v8 + 8 * i + 32);
          }
          uint64_t v12 = v11;
          id v13 = objc_msgSend(v11, sel_identifier);
          uint64_t v14 = sub_1A6892000();
          uint64_t v16 = v15;

          if (v2[2] && (unint64_t v17 = sub_1A673F7AC(v14, v16), (v18 & 1) != 0))
          {
            int v19 = *(_DWORD *)(v2[7] + 4 * v17);
            swift_bridgeObjectRelease();
            LODWORD(v20) = v19;
            objc_msgSend(v12, sel_setValue_, v20);
          }
          else
          {

            swift_bridgeObjectRelease();
          }
        }
      }
    }
    swift_bridgeObjectRelease();
    *(void *)(v1 + 88) = v2;
  }

  return (void *)swift_bridgeObjectRelease();
}

void sub_1A67756FC()
{
  uint64_t v1 = *(void **)(v0 + 32);
  if (v1)
  {
    uint64_t v2 = v0;
    id v17 = v1;
    if (!TTSHasRBSAssertionEntitlement()
      || (objc_msgSend(v17, sel_remoteProcessIdentifier) ? (BOOL v3 = MEMORY[0x1E4F96480] == 0) : (BOOL v3 = 1), v3))
    {
      uint64_t v16 = v17;
    }
    else
    {
      id v4 = objc_msgSend(self, sel_targetWithPid_, objc_msgSend(v17, sel_remoteProcessIdentifier));
      char v5 = (void *)sub_1A6891FD0();
      id v6 = (void *)sub_1A6891FD0();
      id v7 = objc_msgSend(self, sel_attributeWithDomain_name_, v5, v6);

      sub_1A6741AD0((uint64_t *)&unk_1E96C15F0);
      uint64_t v8 = swift_allocObject();
      *(_OWORD *)(v8 + 16) = xmmword_1A689E330;
      *(void *)(v8 + 32) = v7;
      sub_1A6892300();
      id v9 = objc_allocWithZone(MEMORY[0x1E4F96320]);
      id v10 = v4;
      id v11 = v7;
      uint64_t v12 = (void *)sub_1A6891FD0();
      sub_1A67501D4(0, &qword_1E96C1ED8);
      id v13 = (void *)sub_1A68922D0();
      swift_bridgeObjectRelease();
      id v14 = objc_msgSend(v9, sel_initWithExplanation_target_attributes_, v12, v10, v13);

      uint64_t v15 = *(void **)(v2 + 96);
      *(void *)(v2 + 96) = v14;

      uint64_t v16 = v15;
    }
  }
}

void sub_1A677594C()
{
  uint64_t v2 = v1;
  v39[1] = *(id *)MEMORY[0x1E4F143B8];
  BOOL v3 = (char **)(*(uint64_t (**)(void))(*(void *)v0 + 208))();
  if (v3)
  {
    id v4 = v3;
    if (*(unsigned char *)(v0 + 72))
    {
    }
    else
    {
      unint64_t v5 = *(void *)(v0 + 104);
      if (v5 >> 62) {
        goto LABEL_20;
      }
      uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      for (; v6; uint64_t v6 = sub_1A6892EB0())
      {
        uint64_t v32 = v2;
        uint64_t v33 = v0;
        unint64_t v36 = v5 & 0xC000000000000001;
        uint64_t v37 = v4;
        uint64_t v2 = 4;
        uint64_t v34 = v6;
        unint64_t v35 = v5;
        id v4 = &selRef_compatibilityVersion;
        while (1)
        {
          id v7 = v36 ? (id)MEMORY[0x1AD0BFD30](v2 - 4, v5) : *(id *)(v5 + 8 * v2);
          uint64_t v8 = v7;
          if (__OFADD__(v2 - 4, 1)) {
            break;
          }
          uint64_t v38 = v2 - 3;
          id v9 = objc_msgSend(v7, sel_AUAudioUnit);
          unsigned int v10 = objc_msgSend(v9, sel_renderResourcesAllocated);

          if (v10)
          {
            id v11 = objc_msgSend(v8, sel_AUAudioUnit);
            objc_msgSend(v11, sel_deallocateRenderResources);
          }
          id v12 = objc_msgSend(v8, sel_AUAudioUnit, v32);
          objc_msgSend(v12, sel_setRenderingOffline_, 1);

          id v13 = objc_msgSend(v8, sel_AUAudioUnit);
          objc_msgSend(v13, sel_setMaximumFramesToRender_, *(unsigned int *)(v0 + 56));

          id v14 = objc_msgSend(v8, sel_AUAudioUnit);
          id v15 = objc_msgSend(v14, sel_outputBusses);

          id v16 = objc_msgSend(v15, sel_objectAtIndexedSubscript_, 0);
          v39[0] = 0;
          LODWORD(v15) = objc_msgSend(v16, sel_setFormat_error_, v37, v39);

          id v17 = v39[0];
          if (!v15) {
            goto LABEL_18;
          }
          id v18 = v39[0];
          id v19 = objc_msgSend(v8, (SEL)&selRef__phonemeSubstitutionsForAction_ + 2);
          id v20 = objc_msgSend(v19, sel_outputBusses);

          id v21 = objc_msgSend(v20, sel_objectAtIndexedSubscript_, 0);
          objc_msgSend(v21, sel_setEnabled_, 1);

          id v22 = objc_msgSend(v8, (SEL)&selRef__phonemeSubstitutionsForAction_ + 2);
          id v23 = objc_msgSend(v22, sel_inputBusses);

          id v24 = objc_msgSend(v23, sel_objectAtIndexedSubscript_, 0);
          v39[0] = 0;
          LODWORD(v23) = objc_msgSend(v24, sel_setFormat_error_, v37, v39);

          id v17 = v39[0];
          if (!v23) {
            goto LABEL_18;
          }
          id v25 = v39[0];
          id v26 = objc_msgSend(v8, (SEL)&selRef__phonemeSubstitutionsForAction_ + 2);
          id v27 = objc_msgSend(v26, sel_inputBusses);

          id v28 = objc_msgSend(v27, sel_objectAtIndexedSubscript_, 0);
          objc_msgSend(v28, sel_setEnabled_, 1);

          id v29 = objc_msgSend(v8, (SEL)&selRef__phonemeSubstitutionsForAction_ + 2);
          v39[0] = 0;
          LODWORD(v27) = objc_msgSend(v29, sel_allocateRenderResourcesAndReturnError_, v39);

          id v17 = v39[0];
          if (!v27)
          {
LABEL_18:
            id v31 = v17;
            swift_bridgeObjectRelease();
            sub_1A68916F0();

            swift_willThrow();
            return;
          }
          id v30 = v39[0];

          ++v2;
          unint64_t v5 = v35;
          uint64_t v0 = v33;
          if (v38 == v34)
          {

            swift_bridgeObjectRelease();
            goto LABEL_22;
          }
        }
        __break(1u);
LABEL_20:
        swift_bridgeObjectRetain();
      }

      swift_bridgeObjectRelease();
LABEL_22:
      *(unsigned char *)(v0 + 72) = 1;
    }
  }
}

uint64_t static TTSAURenderer.format(forVoice:)(uint64_t a1)
{
  unint64_t v5 = (uint64_t (*)(uint64_t))((char *)&dword_1E96C1EB0 + dword_1E96C1EB0);
  BOOL v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_1A677B9E8;
  return v5(a1);
}

uint64_t sub_1A6776008(void *a1, void *aBlock)
{
  v2[2] = a1;
  v2[3] = _Block_copy(aBlock);
  id v7 = (uint64_t (*)(id))((char *)&dword_1E96C1EB0 + dword_1E96C1EB0);
  id v4 = a1;
  unint64_t v5 = (void *)swift_task_alloc();
  v2[4] = v5;
  void *v5 = v2;
  v5[1] = sub_1A67760D0;
  return v7(v4);
}

uint64_t sub_1A67760D0(void *a1)
{
  BOOL v3 = *(void (***)(void, void))(*v1 + 24);
  id v4 = *(void **)(*v1 + 16);
  uint64_t v7 = *v1;
  swift_task_dealloc();

  ((void (**)(void, void *))v3)[2](v3, a1);
  _Block_release(v3);

  unint64_t v5 = *(uint64_t (**)(void))(v7 + 8);
  return v5();
}

uint64_t sub_1A677621C()
{
  uint64_t v0 = type metadata accessor for TTSAURenderer();
  uint64_t v2 = sub_1A677B99C(&qword_1E96C1F50, v1, (void (*)(uint64_t))type metadata accessor for TTSAURenderer);

  return TTSActor.unownedExecutor.getter(v0, v2);
}

uint64_t sub_1A677628C()
{
  return swift_retain();
}

uint64_t TTSAURenderer.SpeechBuffer.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_1A6891800();
  id v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t TTSAURenderer.SpeechBuffer.id.setter(uint64_t a1)
{
  uint64_t v3 = sub_1A6891800();
  id v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t (*TTSAURenderer.SpeechBuffer.id.modify())()
{
  return nullsub_19;
}

uint64_t TTSAURenderer.SpeechBuffer.offset.getter()
{
  return *(unsigned int *)(v0 + *(int *)(type metadata accessor for TTSAURenderer.SpeechBuffer() + 20));
}

uint64_t TTSAURenderer.SpeechBuffer.offset.setter(int a1)
{
  uint64_t result = type metadata accessor for TTSAURenderer.SpeechBuffer();
  *(_DWORD *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*TTSAURenderer.SpeechBuffer.offset.modify())(void, void)
{
  return nullsub_19;
}

id TTSAURenderer.SpeechBuffer.audio.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for TTSAURenderer.SpeechBuffer() + 24));

  return v1;
}

void TTSAURenderer.SpeechBuffer.audio.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for TTSAURenderer.SpeechBuffer() + 24);

  *(void *)(v1 + v3) = a1;
}

uint64_t (*TTSAURenderer.SpeechBuffer.audio.modify())(void, void)
{
  return nullsub_19;
}

uint64_t TTSAURenderer.SpeechBuffer.markers.getter()
{
  type metadata accessor for TTSAURenderer.SpeechBuffer();

  return swift_bridgeObjectRetain();
}

uint64_t TTSAURenderer.SpeechBuffer.markers.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for TTSAURenderer.SpeechBuffer() + 28);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*TTSAURenderer.SpeechBuffer.markers.modify())(void, void)
{
  return nullsub_19;
}

uint64_t TTSAURenderer.SpeechBuffer.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_1A6891800();
  sub_1A677B280(&qword_1EB67A200, MEMORY[0x1F418BCD8]);
  sub_1A6891F20();
  uint64_t v4 = type metadata accessor for TTSAURenderer.SpeechBuffer();
  sub_1A6893230();
  id v5 = *(id *)(v1 + *(int *)(v4 + 24));
  sub_1A68929C0();

  unint64_t v6 = *(void *)(v2 + *(int *)(v4 + 28));
  swift_bridgeObjectRetain();
  sub_1A6779868(a1, v6);

  return swift_bridgeObjectRelease();
}

id sub_1A6776668(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  unint64_t v6 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t v7 = sub_1A6892EB0();
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v28 = sub_1A6892EB0();
    swift_bridgeObjectRelease();
    if (v7 == v28) {
      goto LABEL_5;
    }
LABEL_49:
    LOBYTE(v7) = 0;
    return (id)(v7 & 1);
  }
  if (v7 != *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_49;
  }
LABEL_5:
  if (!v7) {
    goto LABEL_38;
  }
  uint64_t v8 = v5 & 0xFFFFFFFFFFFFFF8;
  if (v5 < 0) {
    uint64_t v8 = v5;
  }
  if (!v6) {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFF8) + 32;
  }
  uint64_t v9 = a2 & 0xFFFFFFFFFFFFFF8;
  uint64_t v10 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
  if (a2 < 0) {
    uint64_t v11 = a2;
  }
  else {
    uint64_t v11 = a2 & 0xFFFFFFFFFFFFFF8;
  }
  if ((unint64_t)a2 >> 62) {
    uint64_t v10 = v11;
  }
  if (v8 == v10)
  {
LABEL_38:
    LOBYTE(v7) = 1;
    return (id)(v7 & 1);
  }
  if ((v7 & 0x8000000000000000) != 0) {
    goto LABEL_55;
  }
  unint64_t v29 = v5 & 0xC000000000000001;
  if ((v5 & 0xC000000000000001) != 0) {
    goto LABEL_56;
  }
  for (id result = *(id *)(v5 + 32); ; id result = (id)MEMORY[0x1AD0BFD30](0, v5))
  {
    id v13 = result;
    if ((a2 & 0xC000000000000001) == 0) {
      break;
    }
    id v14 = (id)MEMORY[0x1AD0BFD30](0, a2);
LABEL_22:
    id v15 = v14;
    sub_1A67501D4(0, (unint64_t *)a3);
    a3 = sub_1A68929B0();

    if ((a3 & 1) == 0) {
      goto LABEL_49;
    }
    unint64_t v16 = v7 - 1;
    if (v7 == 1) {
      return (id)(v7 & 1);
    }
    if (((a2 | v5) & 0xC000000000000001) != 0)
    {
      uint64_t v17 = 0;
      unint64_t v18 = v7 - 2;
      while (v16 != v17)
      {
        unint64_t v7 = v17 + 1;
        if (v29) {
          id v19 = (id)MEMORY[0x1AD0BFD30](v17 + 1, v5);
        }
        else {
          id v19 = *(id *)(v5 + 40 + 8 * v17);
        }
        a3 = (uint64_t)v19;
        if ((a2 & 0xC000000000000001) != 0)
        {
          id v20 = (id)MEMORY[0x1AD0BFD30](v17 + 1, a2);
        }
        else
        {
          if (v7 >= *(void *)(v9 + 16)) {
            goto LABEL_54;
          }
          id v20 = *(id *)(a2 + 40 + 8 * v17);
        }
        id v21 = v20;
        unint64_t v7 = sub_1A68929B0();

        if ((v7 & 1) != 0 && v18 != v17++) {
          continue;
        }
        return (id)(v7 & 1);
      }
      __break(1u);
    }
    else
    {
      unint64_t v23 = *(void *)(v9 + 16);
      if (v23 <= 1) {
        unint64_t v23 = 1;
      }
      a3 = v23 - 1;
      id v24 = (void **)(v5 + 40);
      uint64_t v9 = a2 + 40;
      while (v16)
      {
        if (!a3) {
          goto LABEL_53;
        }
        id v26 = *v24++;
        id v25 = v26;
        id v27 = *(void **)v9;
        v9 += 8;
        a2 = v25;
        uint64_t v5 = v27;
        unint64_t v7 = sub_1A68929B0();

        if (v7)
        {
          --a3;
          if (--v16) {
            continue;
          }
        }
        return (id)(v7 & 1);
      }
    }
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    ;
  }
  if (*(void *)(v9 + 16))
  {
    id v14 = *(id *)(a2 + 32);
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

uint64_t TTSAURenderer.SpeechBuffer.hashValue.getter()
{
  uint64_t v1 = v0;
  sub_1A6893200();
  sub_1A6891800();
  sub_1A677B280(&qword_1EB67A200, MEMORY[0x1F418BCD8]);
  sub_1A6891F20();
  uint64_t v2 = type metadata accessor for TTSAURenderer.SpeechBuffer();
  sub_1A6893230();
  id v3 = *(id *)(v0 + *(int *)(v2 + 24));
  sub_1A68929C0();

  unint64_t v4 = *(void *)(v1 + *(int *)(v2 + 28));
  swift_bridgeObjectRetain();
  sub_1A6779868((uint64_t)v6, v4);
  swift_bridgeObjectRelease();
  return sub_1A6893250();
}

uint64_t sub_1A6776A2C(uint64_t a1)
{
  uint64_t v3 = v1;
  sub_1A6893200();
  sub_1A6891800();
  sub_1A677B280(&qword_1EB67A200, MEMORY[0x1F418BCD8]);
  sub_1A6891F20();
  sub_1A6893230();
  id v4 = *(id *)(v1 + *(int *)(a1 + 24));
  sub_1A68929C0();

  unint64_t v5 = *(void *)(v3 + *(int *)(a1 + 28));
  swift_bridgeObjectRetain();
  sub_1A6779868((uint64_t)v7, v5);
  swift_bridgeObjectRelease();
  return sub_1A6893250();
}

uint64_t sub_1A6776AFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  sub_1A6891800();
  sub_1A677B280(&qword_1EB67A200, MEMORY[0x1F418BCD8]);
  sub_1A6891F20();
  sub_1A6893230();
  id v6 = *(id *)(v2 + *(int *)(a2 + 24));
  sub_1A68929C0();

  unint64_t v7 = *(void *)(v4 + *(int *)(a2 + 28));
  swift_bridgeObjectRetain();
  sub_1A6779868(a1, v7);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1A6776BC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  sub_1A6893200();
  sub_1A6891800();
  sub_1A677B280(&qword_1EB67A200, MEMORY[0x1F418BCD8]);
  sub_1A6891F20();
  sub_1A6893230();
  id v5 = *(id *)(v2 + *(int *)(a2 + 24));
  sub_1A68929C0();

  unint64_t v6 = *(void *)(v4 + *(int *)(a2 + 28));
  swift_bridgeObjectRetain();
  sub_1A6779868((uint64_t)v8, v6);
  swift_bridgeObjectRelease();
  return sub_1A6893250();
}

_DWORD *sub_1A6776C98@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_DWORD *sub_1A6776CA4@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(unsigned char *)(a2 + 4) = 0;
  return result;
}

void sub_1A6776CB4(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

void sub_1A6776CC0(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

_DWORD *sub_1A6776CC8@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

_DWORD *sub_1A6776CDC@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

_DWORD *sub_1A6776CF0@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_1A6776D04(_DWORD *a1, int *a2)
{
  int v3 = *a2;
  int v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

_DWORD *sub_1A6776D34@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(_DWORD *)a2 = v3;
  *(unsigned char *)(a2 + 4) = v3 == 0;
  return result;
}

int *sub_1A6776D60@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  *v2 |= *result;
  int v5 = v4 & v3;
  *(_DWORD *)a2 = v5;
  *(unsigned char *)(a2 + 4) = v5 == 0;
  return result;
}

_DWORD *sub_1A6776D84(_DWORD *result)
{
  *v1 |= *result;
  return result;
}

_DWORD *sub_1A6776D98(_DWORD *result)
{
  *v1 &= *result;
  return result;
}

_DWORD *sub_1A6776DAC(_DWORD *result)
{
  *v1 ^= *result;
  return result;
}

_DWORD *sub_1A6776DC0@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1A6776DD4(_DWORD *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_1A6776DE8(_DWORD *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_1A6776DFC(_DWORD *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_1A6776E10()
{
  return *v0 == 0;
}

_DWORD *sub_1A6776E20(_DWORD *result)
{
  *v1 &= ~*result;
  return result;
}

BOOL sub_1A6776E34(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1A6776E48@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  int v3 = sub_1A6779F20(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t sub_1A6776E88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 56) = v5;
  uint64_t v12 = sub_1A6892D70();
  *(void *)(v6 + 64) = v12;
  *(void *)(v6 + 72) = *(void *)(v12 - 8);
  *(void *)(v6 + 80) = swift_task_alloc();
  *(void *)(v6 + 88) = swift_task_alloc();
  *(void *)(v6 + 40) = a1;
  *(void *)(v6 + 48) = a2;
  *(void *)(v6 + 16) = a3;
  *(void *)(v6 + 24) = a4;
  *(unsigned char *)(v6 + 32) = a5 & 1;
  return MEMORY[0x1F4188298](sub_1A6776F8C, 0, 0);
}

uint64_t sub_1A6776F8C()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v4 = sub_1A6892D90();
  uint64_t v5 = sub_1A677B99C(&qword_1E96C1F10, 255, MEMORY[0x1E4FBD1A8]);
  sub_1A6893160();
  sub_1A677B99C(&qword_1E96C1F18, 255, MEMORY[0x1E4FBD178]);
  sub_1A6892DA0();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v6;
  v0[13] = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v6(v1, v2);
  unint64_t v7 = (void *)swift_task_alloc();
  v0[14] = v7;
  *unint64_t v7 = v0;
  v7[1] = sub_1A6777134;
  uint64_t v8 = v0[11];
  return MEMORY[0x1F4188178](v8, v0 + 2, v4, v5);
}

uint64_t sub_1A6777134()
{
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  uint64_t v3 = *(void *)(*v1 + 88);
  uint64_t v4 = *(void *)(*v1 + 64);
  uint64_t v5 = *v1;
  *(void *)(v5 + 120) = v0;
  swift_task_dealloc();
  v2(v3, v4);
  if (v0)
  {
    return MEMORY[0x1F4188298](sub_1A67772F0, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
}

uint64_t sub_1A67772F0()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1A677735C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v4;
  void *v4 = v3;
  v4[1] = sub_1A677B9EC;
  return v6();
}

uint64_t sub_1A6777428(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  void *v5 = v4;
  v5[1] = sub_1A677B9EC;
  return v7();
}

uint64_t sub_1A67774F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1A68924A0();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_1A6892490();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_1A677B668(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1A68923E0();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_1A6777698(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_1A6777774;
  return v6(a1);
}

uint64_t sub_1A6777774()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1A677786C(uint64_t *a1, void (*a2)(void *))
{
  uint64_t v4 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    sub_1A6779E5C();
  }
  uint64_t v6 = *(void *)(v4 + 16);
  v8[0] = v4 + 32;
  v8[1] = v6;
  a2(v8);
  return sub_1A6892CF0();
}

uint64_t sub_1A67778F0(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v2 = sub_1A6892BC0();
    if (v2) {
      goto LABEL_3;
    }
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return MEMORY[0x1E4FBC860];
  }
LABEL_3:
  if (v2 <= 0)
  {
    uint64_t v3 = (void *)MEMORY[0x1E4FBC860];
  }
  else
  {
    sub_1A6741AD0((uint64_t *)&unk_1E96C15F0);
    uint64_t v3 = (void *)swift_allocObject();
    int64_t v4 = j__malloc_size(v3);
    uint64_t v5 = v4 - 32;
    if (v4 < 32) {
      uint64_t v5 = v4 - 25;
    }
    _DWORD v3[2] = v2;
    v3[3] = (2 * (v5 >> 3)) | 1;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_1A6779B50(&v8, v3 + 4, v2, a1);
  uint64_t result = sub_1A674CF48();
  if (v6 == (void *)v2) {
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

void *sub_1A67779EC(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  while (1)
  {
    if (v2 <= 0)
    {
      uint64_t v3 = (void *)MEMORY[0x1E4FBC860];
    }
    else
    {
      sub_1A6741AD0((uint64_t *)&unk_1E96C15F0);
      uint64_t v3 = (void *)swift_allocObject();
      int64_t v4 = j__malloc_size(v3);
      uint64_t v5 = v4 - 32;
      if (v4 < 32) {
        uint64_t v5 = v4 - 25;
      }
      _DWORD v3[2] = v2;
      v3[3] = (2 * (v5 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    sub_1A6779980((uint64_t)(v3 + 4), v2, v1);
    unint64_t v1 = v6;
    swift_bridgeObjectRelease();
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v2 = sub_1A6892EB0();
    swift_bridgeObjectRelease();
    if (!v2) {
      return (void *)MEMORY[0x1E4FBC860];
    }
  }
  return v3;
}

uint64_t type metadata accessor for TTSAURenderer.SpeechBuffer()
{
  uint64_t result = qword_1E96C6A20;
  if (!qword_1E96C6A20) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1A6777B30(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = sub_1A68930D0();
  if (v4 >= v3)
  {
    if (v3 < 0) {
      goto LABEL_158;
    }
    if (v3) {
      sub_1A6778CC8(0, v3, 1, a1);
    }
    return;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_157;
  }
  uint64_t v116 = v4;
  uint64_t v118 = v3;
  uint64_t v114 = a1;
  if (v3 > 1)
  {
    uint64_t v6 = v5 >> 1;
    sub_1A67501D4(0, &qword_1E96C3170);
    uint64_t v7 = sub_1A6892340();
    *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) = v6;
    uint64_t v3 = v118;
    uint64_t v123 = (char *)((v7 & 0xFFFFFFFFFFFFFF8) + 32);
    uint64_t v124 = v7;
LABEL_12:
    uint64_t v9 = 0;
    uint64_t v10 = *a1;
    uint64_t v115 = v10 - 8;
    uint64_t v8 = (char *)MEMORY[0x1E4FBC860];
    uint64_t v11 = (SEL *)&unk_1E5C6B000;
    while (1)
    {
      uint64_t v13 = v9 + 1;
      uint64_t v119 = v9;
      if (v9 + 1 >= v3) {
        goto LABEL_49;
      }
      uint64_t v14 = *(void **)(v10 + 8 * v9);
      id v15 = *(id *)(v10 + 8 * v13);
      id v16 = v14;
      id v17 = [v15 v11[482]];
      if (v17 != [v16 v11[482]]) {
        break;
      }
      id v18 = objc_msgSend(v15, sel_mark);
      if (v18 == objc_msgSend(v16, sel_mark) && objc_msgSend(v15, sel_mark) == (id)1)
      {
        id v19 = objc_msgSend(v15, sel_textRange);
        id v20 = objc_msgSend(v16, sel_textRange);

        BOOL v21 = (uint64_t)v19 < (uint64_t)v20;
        uint64_t v13 = v9 + 1;
        goto LABEL_21;
      }

      uint64_t v25 = v9 + 2;
      if (v9 + 2 >= v118) {
        goto LABEL_41;
      }
      int v120 = 1;
LABEL_28:
      uint64_t v26 = v25;
      do
      {
        uint64_t v25 = v26;
        unint64_t v29 = *(void **)(v10 + 8 * v13);
        id v30 = *(id *)(v10 + 8 * v26);
        id v31 = v29;
        uint64_t v11 = (SEL *)&unk_1E5C6B000;
        id v32 = v31;
        id v33 = objc_msgSend(v30, sel_byteSampleOffset);
        if (v33 == objc_msgSend(v32, sel_byteSampleOffset))
        {
          id v34 = objc_msgSend(v30, sel_mark);
          if (v34 == objc_msgSend(v32, sel_mark) && objc_msgSend(v30, sel_mark) == (id)1)
          {
            id v35 = objc_msgSend(v30, sel_textRange);
            id v36 = objc_msgSend(v32, sel_textRange);

            uint64_t v9 = v119;
            if (((v120 ^ ((uint64_t)v35 >= (uint64_t)v36)) & 1) == 0) {
              goto LABEL_39;
            }
          }
          else
          {

            uint64_t v9 = v119;
            if (!v120) {
              goto LABEL_48;
            }
          }
        }
        else
        {
          id v27 = objc_msgSend(v30, sel_byteSampleOffset);
          id v28 = objc_msgSend(v32, sel_byteSampleOffset);

          if (((v120 ^ ((uint64_t)v27 >= (uint64_t)v28)) & 1) == 0) {
            goto LABEL_39;
          }
        }
        uint64_t v26 = v25 + 1;
        uint64_t v13 = v25;
      }
      while (v25 + 1 < v118);
      ++v25;
LABEL_39:
      if (v120)
      {
        if (v25 < v9) {
          goto LABEL_159;
        }
LABEL_41:
        if (v9 < v25)
        {
          uint64_t v37 = (uint64_t *)(v115 + 8 * v25);
          uint64_t v38 = v25;
          uint64_t v39 = v9;
          uint64_t v40 = (uint64_t *)(v10 + 8 * v9);
          do
          {
            if (v39 != --v38)
            {
              if (!v10) {
                goto LABEL_164;
              }
              uint64_t v41 = *v40;
              *uint64_t v40 = *v37;
              *uint64_t v37 = v41;
            }
            ++v39;
            --v37;
            ++v40;
          }
          while (v39 < v38);
        }
      }
LABEL_48:
      uint64_t v13 = v25;
      uint64_t v3 = v118;
LABEL_49:
      if (v13 >= v3) {
        goto LABEL_74;
      }
      if (__OFSUB__(v13, v9)) {
        goto LABEL_156;
      }
      if (v13 - v9 >= v116) {
        goto LABEL_74;
      }
      if (__OFADD__(v9, v116)) {
        goto LABEL_160;
      }
      if (v9 + v116 >= v3) {
        uint64_t v42 = v3;
      }
      else {
        uint64_t v42 = v9 + v116;
      }
      if (v42 < v9)
      {
LABEL_161:
        __break(1u);
LABEL_162:
        __break(1u);
LABEL_163:
        __break(1u);
LABEL_164:
        __break(1u);
LABEL_165:
        __break(1u);
        return;
      }
      if (v13 == v42) {
        goto LABEL_74;
      }
      float v113 = v8;
      uint64_t v43 = v115 + 8 * v13;
      uint64_t v117 = v42;
      while (2)
      {
        id v44 = *(void **)(v10 + 8 * v13);
        uint64_t v121 = v43;
        while (1)
        {
          uint64_t v45 = v13;
          uint64_t v46 = *(void **)v43;
          id v47 = v44;
          id v48 = v46;
          id v49 = [v47 v11[482]];
          if (v49 == [v48 v11[482]])
          {
            id v50 = objc_msgSend(v47, sel_mark);
            if (v50 != objc_msgSend(v48, sel_mark) || objc_msgSend(v47, sel_mark) != (id)1)
            {

              if (!v10) {
                goto LABEL_162;
              }
              goto LABEL_71;
            }
            id v51 = objc_msgSend(v47, sel_textRange);
            id v52 = objc_msgSend(v48, sel_textRange);
          }
          else
          {
            id v51 = [v47 v11[482]];
            id v52 = [v48 v11[482]];
          }
          id v53 = v52;

          if ((uint64_t)v51 >= (uint64_t)v53) {
            break;
          }
          if (!v10) {
            goto LABEL_162;
          }
LABEL_71:
          uint64_t v13 = v45;
          unint64_t v54 = *(void **)v43;
          id v44 = *(void **)(v43 + 8);
          *(void *)uint64_t v43 = v44;
          *(void *)(v43 + 8) = v54;
          v43 -= 8;
          if (v45 == ++v9) {
            goto LABEL_60;
          }
        }
        uint64_t v13 = v45;
LABEL_60:
        ++v13;
        uint64_t v9 = v119;
        uint64_t v43 = v121 + 8;
        if (v13 != v117) {
          continue;
        }
        break;
      }
      uint64_t v13 = v117;
      uint64_t v8 = v113;
LABEL_74:
      if (v13 < v9) {
        goto LABEL_151;
      }
      uint64_t v122 = v13;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v8 = sub_1A6779758(0, *((void *)v8 + 2) + 1, 1, v8);
      }
      unint64_t v56 = *((void *)v8 + 2);
      unint64_t v55 = *((void *)v8 + 3);
      unint64_t v12 = v56 + 1;
      if (v56 >= v55 >> 1) {
        uint64_t v8 = sub_1A6779758((char *)(v55 > 1), v56 + 1, 1, v8);
      }
      *((void *)v8 + 2) = v12;
      uint64_t v57 = v8 + 32;
      unint64_t v58 = &v8[16 * v56 + 32];
      *(void *)unint64_t v58 = v9;
      *((void *)v58 + 1) = v122;
      if (v56)
      {
        while (2)
        {
          unint64_t v59 = v12 - 1;
          if (v12 >= 4)
          {
            uint64_t v64 = &v57[16 * v12];
            uint64_t v65 = *((void *)v64 - 8);
            uint64_t v66 = *((void *)v64 - 7);
            BOOL v70 = __OFSUB__(v66, v65);
            uint64_t v67 = v66 - v65;
            if (v70) {
              goto LABEL_140;
            }
            uint64_t v69 = *((void *)v64 - 6);
            uint64_t v68 = *((void *)v64 - 5);
            BOOL v70 = __OFSUB__(v68, v69);
            uint64_t v62 = v68 - v69;
            char v63 = v70;
            if (v70) {
              goto LABEL_141;
            }
            unint64_t v71 = v12 - 2;
            uint64_t v72 = &v57[16 * v12 - 32];
            uint64_t v74 = *(void *)v72;
            uint64_t v73 = *((void *)v72 + 1);
            BOOL v70 = __OFSUB__(v73, v74);
            uint64_t v75 = v73 - v74;
            if (v70) {
              goto LABEL_142;
            }
            BOOL v70 = __OFADD__(v62, v75);
            uint64_t v76 = v62 + v75;
            if (v70) {
              goto LABEL_144;
            }
            if (v76 >= v67)
            {
              unint64_t v94 = &v57[16 * v59];
              uint64_t v96 = *(void *)v94;
              uint64_t v95 = *((void *)v94 + 1);
              BOOL v70 = __OFSUB__(v95, v96);
              uint64_t v97 = v95 - v96;
              if (v70) {
                goto LABEL_150;
              }
              BOOL v87 = v62 < v97;
            }
            else
            {
LABEL_93:
              if (v63) {
                goto LABEL_143;
              }
              unint64_t v71 = v12 - 2;
              unint64_t v77 = &v57[16 * v12 - 32];
              uint64_t v79 = *(void *)v77;
              uint64_t v78 = *((void *)v77 + 1);
              BOOL v80 = __OFSUB__(v78, v79);
              uint64_t v81 = v78 - v79;
              char v82 = v80;
              if (v80) {
                goto LABEL_145;
              }
              unint64_t v83 = &v57[16 * v59];
              uint64_t v85 = *(void *)v83;
              uint64_t v84 = *((void *)v83 + 1);
              BOOL v70 = __OFSUB__(v84, v85);
              uint64_t v86 = v84 - v85;
              if (v70) {
                goto LABEL_147;
              }
              if (__OFADD__(v81, v86)) {
                goto LABEL_149;
              }
              if (v81 + v86 < v62) {
                goto LABEL_105;
              }
              BOOL v87 = v62 < v86;
            }
            if (v87) {
              unint64_t v59 = v71;
            }
          }
          else
          {
            if (v12 == 3)
            {
              uint64_t v61 = *((void *)v8 + 4);
              uint64_t v60 = *((void *)v8 + 5);
              BOOL v70 = __OFSUB__(v60, v61);
              uint64_t v62 = v60 - v61;
              char v63 = v70;
              goto LABEL_93;
            }
            uint64_t v88 = *((void *)v8 + 4);
            uint64_t v89 = *((void *)v8 + 5);
            BOOL v70 = __OFSUB__(v89, v88);
            uint64_t v81 = v89 - v88;
            char v82 = v70;
LABEL_105:
            if (v82) {
              goto LABEL_146;
            }
            uint64_t v90 = &v57[16 * v59];
            uint64_t v92 = *(void *)v90;
            uint64_t v91 = *((void *)v90 + 1);
            BOOL v70 = __OFSUB__(v91, v92);
            uint64_t v93 = v91 - v92;
            if (v70) {
              goto LABEL_148;
            }
            if (v93 < v81) {
              goto LABEL_14;
            }
          }
          unint64_t v98 = v59 - 1;
          if (v59 - 1 >= v12)
          {
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            __break(1u);
LABEL_149:
            __break(1u);
LABEL_150:
            __break(1u);
LABEL_151:
            __break(1u);
LABEL_152:
            __break(1u);
LABEL_153:
            __break(1u);
LABEL_154:
            __break(1u);
LABEL_155:
            __break(1u);
LABEL_156:
            __break(1u);
LABEL_157:
            __break(1u);
LABEL_158:
            __break(1u);
LABEL_159:
            __break(1u);
LABEL_160:
            __break(1u);
            goto LABEL_161;
          }
          uint64_t v99 = v10;
          if (!v10) {
            goto LABEL_163;
          }
          objc_super v100 = v8;
          uint64_t v101 = &v57[16 * v98];
          uint64_t v102 = *(void *)v101;
          objc_super v103 = &v57[16 * v59];
          uint64_t v104 = *((void *)v103 + 1);
          uint64_t v105 = v99;
          sub_1A6778F9C((char *)(v99 + 8 * *(void *)v101), (char *)(v99 + 8 * *(void *)v103), v99 + 8 * v104, v123);
          if (v1) {
            goto LABEL_134;
          }
          if (v104 < v102) {
            goto LABEL_137;
          }
          if (v59 > *((void *)v100 + 2)) {
            goto LABEL_138;
          }
          *(void *)uint64_t v101 = v102;
          *(void *)&v57[16 * v98 + 8] = v104;
          unint64_t v106 = *((void *)v100 + 2);
          if (v59 >= v106) {
            goto LABEL_139;
          }
          uint64_t v8 = v100;
          unint64_t v12 = v106 - 1;
          memmove(&v57[16 * v59], v103 + 16, 16 * (v106 - 1 - v59));
          *((void *)v100 + 2) = v106 - 1;
          uint64_t v10 = v105;
          uint64_t v11 = (SEL *)&unk_1E5C6B000;
          if (v106 <= 2) {
            goto LABEL_14;
          }
          continue;
        }
      }
      unint64_t v12 = 1;
LABEL_14:
      uint64_t v3 = v118;
      uint64_t v9 = v122;
      if (v122 >= v118) {
        goto LABEL_123;
      }
    }
    id v22 = [v15 v11[482]];
    id v23 = [v16 v11[482]];

    BOOL v21 = (uint64_t)v22 < (uint64_t)v23;
    uint64_t v13 = v9 + 1;
LABEL_21:
    int v24 = v21;
    int v120 = v24;
    uint64_t v25 = v9 + 2;
    if (v9 + 2 >= v118) {
      goto LABEL_39;
    }
    goto LABEL_28;
  }
  uint64_t v8 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v124 = MEMORY[0x1E4FBC860];
  uint64_t v123 = (char *)((MEMORY[0x1E4FBC860] & 0xFFFFFFFFFFFFFF8) + 32);
  if (v3 == 1) {
    goto LABEL_12;
  }
  unint64_t v12 = *(void *)(MEMORY[0x1E4FBC860] + 16);
LABEL_123:
  if (v12 >= 2)
  {
    uint64_t v107 = *v114;
    do
    {
      unint64_t v108 = v12 - 2;
      if (v12 < 2) {
        goto LABEL_152;
      }
      if (!v107) {
        goto LABEL_165;
      }
      uint64_t v109 = *(void *)&v8[16 * v108 + 32];
      uint64_t v110 = *(void *)&v8[16 * v12 + 24];
      sub_1A6778F9C((char *)(v107 + 8 * v109), (char *)(v107 + 8 * *(void *)&v8[16 * v12 + 16]), v107 + 8 * v110, v123);
      if (v1) {
        break;
      }
      if (v110 < v109) {
        goto LABEL_153;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v8 = sub_1A6779854((uint64_t)v8);
      }
      if (v108 >= *((void *)v8 + 2)) {
        goto LABEL_154;
      }
      float v111 = &v8[16 * v108 + 32];
      *(void *)float v111 = v109;
      *((void *)v111 + 1) = v110;
      unint64_t v112 = *((void *)v8 + 2);
      if (v12 > v112) {
        goto LABEL_155;
      }
      memmove(&v8[16 * v12 + 16], &v8[16 * v12 + 32], 16 * (v112 - v12));
      *((void *)v8 + 2) = v112 - 1;
      unint64_t v12 = v112 - 1;
    }
    while (v112 > 2);
  }
LABEL_134:
  swift_bridgeObjectRelease();
  *(void *)((v124 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
  sub_1A6892300();
  swift_bridgeObjectRelease();
}

void sub_1A6778474(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = a1[1];
  uint64_t v5 = sub_1A68930D0();
  if (v5 >= v4)
  {
    if (v4 < 0) {
      goto LABEL_148;
    }
    if (v4) {
      sub_1A6778E54(0, v4, 1, a1);
    }
    return;
  }
  if (v4 >= 0) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = v4 + 1;
  }
  if (v4 < -1) {
    goto LABEL_147;
  }
  uint64_t v7 = v5;
  uint64_t v114 = v4;
  uint64_t v110 = a1;
  if (v4 <= 1)
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
    uint64_t v117 = MEMORY[0x1E4FBC860];
    uint64_t v115 = (id *)((MEMORY[0x1E4FBC860] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v4 != 1)
    {
      unint64_t v13 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      if (v13 < 2) {
        goto LABEL_124;
      }
      goto LABEL_112;
    }
  }
  else
  {
    uint64_t v8 = v6 >> 1;
    sub_1A67501D4(0, &qword_1E96C3170);
    uint64_t v9 = sub_1A6892340();
    *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) = v8;
    uint64_t v4 = v114;
    uint64_t v115 = (id *)((v9 & 0xFFFFFFFFFFFFFF8) + 32);
    uint64_t v117 = v9;
  }
  uint64_t v112 = v7;
  uint64_t v11 = 0;
  uint64_t v12 = *a1;
  uint64_t v111 = *a1 - 8;
  uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v116 = *a1;
  while (1)
  {
    uint64_t v14 = v11++;
    if (v11 < v4)
    {
      id v15 = *(void **)(v12 + 8 * v14);
      id v16 = *(id *)(v12 + 8 * v11);
      id v17 = v15;
      if (objc_msgSend(v16, sel_mark) == (id)1 && objc_msgSend(v17, sel_mark) == (id)1)
      {
        id v18 = objc_msgSend(v16, sel_textRange);
        id v19 = objc_msgSend(v17, sel_textRange);

        BOOL v20 = (uint64_t)v18 < (uint64_t)v19;
      }
      else
      {
        id v21 = objc_msgSend(v16, sel_byteSampleOffset);
        id v22 = objc_msgSend(v17, sel_byteSampleOffset);

        BOOL v20 = (uint64_t)v21 < (uint64_t)v22;
      }
      int v23 = v20;
      uint64_t v24 = v14 + 2;
      if (v14 + 2 >= v114)
      {
LABEL_30:
        uint64_t v12 = v116;
        if (!v23)
        {
LABEL_40:
          uint64_t v11 = v24;
          uint64_t v4 = v114;
          goto LABEL_41;
        }
      }
      else
      {
        uint64_t v12 = v116;
        do
        {
          id v28 = *(void **)(v12 + 8 * v11);
          id v29 = *(id *)(v12 + 8 * v24);
          id v30 = v28;
          if (objc_msgSend(v29, sel_mark) == (id)1 && objc_msgSend(v30, sel_mark) == (id)1)
          {
            id v31 = objc_msgSend(v29, sel_textRange);
            id v32 = objc_msgSend(v30, sel_textRange);

            if (((v23 ^ ((uint64_t)v31 >= (uint64_t)v32)) & 1) == 0) {
              goto LABEL_30;
            }
          }
          else
          {
            id v25 = objc_msgSend(v29, sel_byteSampleOffset);
            id v26 = objc_msgSend(v30, sel_byteSampleOffset);

            if (v23 == (uint64_t)v25 >= (uint64_t)v26) {
              goto LABEL_30;
            }
          }
          uint64_t v27 = v24 + 1;
          uint64_t v11 = v24;
          uint64_t v24 = v27;
          uint64_t v12 = v116;
        }
        while (v27 < v114);
        uint64_t v24 = v27;
        if (!v23) {
          goto LABEL_40;
        }
      }
      if (v24 < v14) {
        goto LABEL_149;
      }
      if (v14 < v24)
      {
        id v33 = (uint64_t *)(v111 + 8 * v24);
        uint64_t v34 = v24;
        uint64_t v35 = v14;
        id v36 = (uint64_t *)(v12 + 8 * v14);
        while (1)
        {
          if (v35 != --v34)
          {
            if (!v12) {
              goto LABEL_154;
            }
            uint64_t v37 = *v36;
            *id v36 = *v33;
            *id v33 = v37;
          }
          ++v35;
          --v33;
          ++v36;
          if (v35 >= v34) {
            goto LABEL_40;
          }
        }
      }
      goto LABEL_40;
    }
LABEL_41:
    if (v11 < v4)
    {
      if (__OFSUB__(v11, v14)) {
        goto LABEL_146;
      }
      if (v11 - v14 < v112) {
        break;
      }
    }
LABEL_63:
    if (v11 < v14) {
      goto LABEL_141;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v10 = sub_1A6779758(0, *((void *)v10 + 2) + 1, 1, v10);
    }
    unint64_t v51 = *((void *)v10 + 2);
    unint64_t v50 = *((void *)v10 + 3);
    unint64_t v13 = v51 + 1;
    uint64_t v12 = v116;
    if (v51 >= v50 >> 1)
    {
      objc_super v100 = sub_1A6779758((char *)(v50 > 1), v51 + 1, 1, v10);
      uint64_t v12 = v116;
      uint64_t v10 = v100;
    }
    *((void *)v10 + 2) = v13;
    id v52 = v10 + 32;
    id v53 = &v10[16 * v51 + 32];
    *(void *)id v53 = v14;
    *((void *)v53 + 1) = v11;
    if (v51)
    {
      while (1)
      {
        unint64_t v54 = v13 - 1;
        if (v13 >= 4)
        {
          unint64_t v59 = &v52[16 * v13];
          uint64_t v60 = *((void *)v59 - 8);
          uint64_t v61 = *((void *)v59 - 7);
          BOOL v65 = __OFSUB__(v61, v60);
          uint64_t v62 = v61 - v60;
          if (v65) {
            goto LABEL_130;
          }
          uint64_t v64 = *((void *)v59 - 6);
          uint64_t v63 = *((void *)v59 - 5);
          BOOL v65 = __OFSUB__(v63, v64);
          uint64_t v57 = v63 - v64;
          char v58 = v65;
          if (v65) {
            goto LABEL_131;
          }
          unint64_t v66 = v13 - 2;
          uint64_t v67 = &v52[16 * v13 - 32];
          uint64_t v69 = *(void *)v67;
          uint64_t v68 = *((void *)v67 + 1);
          BOOL v65 = __OFSUB__(v68, v69);
          uint64_t v70 = v68 - v69;
          if (v65) {
            goto LABEL_132;
          }
          BOOL v65 = __OFADD__(v57, v70);
          uint64_t v71 = v57 + v70;
          if (v65) {
            goto LABEL_134;
          }
          if (v71 >= v62)
          {
            uint64_t v89 = &v52[16 * v54];
            uint64_t v91 = *(void *)v89;
            uint64_t v90 = *((void *)v89 + 1);
            BOOL v65 = __OFSUB__(v90, v91);
            uint64_t v92 = v90 - v91;
            if (v65) {
              goto LABEL_140;
            }
            BOOL v82 = v57 < v92;
            goto LABEL_100;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v83 = *((void *)v10 + 4);
            uint64_t v84 = *((void *)v10 + 5);
            BOOL v65 = __OFSUB__(v84, v83);
            uint64_t v76 = v84 - v83;
            char v77 = v65;
            goto LABEL_94;
          }
          uint64_t v56 = *((void *)v10 + 4);
          uint64_t v55 = *((void *)v10 + 5);
          BOOL v65 = __OFSUB__(v55, v56);
          uint64_t v57 = v55 - v56;
          char v58 = v65;
        }
        if (v58) {
          goto LABEL_133;
        }
        unint64_t v66 = v13 - 2;
        uint64_t v72 = &v52[16 * v13 - 32];
        uint64_t v74 = *(void *)v72;
        uint64_t v73 = *((void *)v72 + 1);
        BOOL v75 = __OFSUB__(v73, v74);
        uint64_t v76 = v73 - v74;
        char v77 = v75;
        if (v75) {
          goto LABEL_135;
        }
        uint64_t v78 = &v52[16 * v54];
        uint64_t v80 = *(void *)v78;
        uint64_t v79 = *((void *)v78 + 1);
        BOOL v65 = __OFSUB__(v79, v80);
        uint64_t v81 = v79 - v80;
        if (v65) {
          goto LABEL_137;
        }
        if (__OFADD__(v76, v81)) {
          goto LABEL_139;
        }
        if (v76 + v81 >= v57)
        {
          BOOL v82 = v57 < v81;
LABEL_100:
          if (v82) {
            unint64_t v54 = v66;
          }
          goto LABEL_102;
        }
LABEL_94:
        if (v77) {
          goto LABEL_136;
        }
        uint64_t v85 = &v52[16 * v54];
        uint64_t v87 = *(void *)v85;
        uint64_t v86 = *((void *)v85 + 1);
        BOOL v65 = __OFSUB__(v86, v87);
        uint64_t v88 = v86 - v87;
        if (v65) {
          goto LABEL_138;
        }
        if (v88 < v76) {
          goto LABEL_14;
        }
LABEL_102:
        unint64_t v93 = v54 - 1;
        if (v54 - 1 >= v13)
        {
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
          goto LABEL_151;
        }
        if (!v12) {
          goto LABEL_153;
        }
        unint64_t v94 = v10;
        uint64_t v95 = &v52[16 * v93];
        uint64_t v96 = *(void *)v95;
        uint64_t v97 = &v52[16 * v54];
        uint64_t v98 = *((void *)v97 + 1);
        sub_1A67793E4((void **)(v12 + 8 * *(void *)v95), (id *)(v12 + 8 * *(void *)v97), v12 + 8 * v98, v115);
        if (v1) {
          goto LABEL_124;
        }
        if (v98 < v96) {
          goto LABEL_127;
        }
        if (v54 > *((void *)v94 + 2)) {
          goto LABEL_128;
        }
        *(void *)uint64_t v95 = v96;
        *(void *)&v52[16 * v93 + 8] = v98;
        unint64_t v99 = *((void *)v94 + 2);
        if (v54 >= v99) {
          goto LABEL_129;
        }
        uint64_t v10 = v94;
        unint64_t v13 = v99 - 1;
        memmove(&v52[16 * v54], v97 + 16, 16 * (v99 - 1 - v54));
        *((void *)v94 + 2) = v99 - 1;
        uint64_t v12 = v116;
        if (v99 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v13 = 1;
LABEL_14:
    uint64_t v4 = v114;
    if (v11 >= v114)
    {
      uint64_t v2 = v1;
      if (v13 < 2)
      {
LABEL_124:
        swift_bridgeObjectRelease();
        *(void *)((v117 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
        sub_1A6892300();
        swift_bridgeObjectRelease();
        return;
      }
LABEL_112:
      uint64_t v101 = *v110;
      while (1)
      {
        unint64_t v102 = v13 - 2;
        if (v13 < 2) {
          goto LABEL_142;
        }
        if (!v101) {
          goto LABEL_155;
        }
        objc_super v103 = v10;
        uint64_t v104 = v10 + 32;
        uint64_t v105 = *(void *)&v10[16 * v102 + 32];
        uint64_t v106 = *(void *)&v10[16 * v13 + 24];
        sub_1A67793E4((void **)(v101 + 8 * v105), (id *)(v101 + 8 * *(void *)&v104[16 * v13 - 16]), v101 + 8 * v106, v115);
        if (v2) {
          goto LABEL_124;
        }
        if (v106 < v105) {
          goto LABEL_143;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          objc_super v103 = sub_1A6779854((uint64_t)v103);
        }
        if (v102 >= *((void *)v103 + 2)) {
          goto LABEL_144;
        }
        uint64_t v107 = &v103[16 * v102 + 32];
        *(void *)uint64_t v107 = v105;
        *((void *)v107 + 1) = v106;
        unint64_t v108 = *((void *)v103 + 2);
        if (v13 > v108) {
          goto LABEL_145;
        }
        uint64_t v10 = v103;
        memmove(&v103[16 * v13 + 16], &v103[16 * v13 + 32], 16 * (v108 - v13));
        *((void *)v103 + 2) = v108 - 1;
        unint64_t v13 = v108 - 1;
        if (v108 <= 2) {
          goto LABEL_124;
        }
      }
    }
  }
  if (__OFADD__(v14, v112)) {
    goto LABEL_150;
  }
  if (v14 + v112 >= v4) {
    uint64_t v38 = v4;
  }
  else {
    uint64_t v38 = v14 + v112;
  }
  if (v38 >= v14)
  {
    if (v11 != v38)
    {
      uint64_t v109 = v10;
      uint64_t v39 = v111 + 8 * v11;
      uint64_t v113 = v38;
      do
      {
        uint64_t v40 = *(void **)(v12 + 8 * v11);
        uint64_t v41 = v14;
        uint64_t v42 = v39;
        while (1)
        {
          uint64_t v43 = *(void **)v42;
          id v44 = v40;
          id v45 = v43;
          if (objc_msgSend(v44, sel_mark) == (id)1 && objc_msgSend(v45, sel_mark) == (id)1)
          {
            id v46 = objc_msgSend(v44, sel_textRange);
            id v47 = objc_msgSend(v45, sel_textRange);
          }
          else
          {
            id v46 = objc_msgSend(v44, sel_byteSampleOffset);
            id v47 = objc_msgSend(v45, sel_byteSampleOffset);
          }
          id v48 = v47;

          if ((uint64_t)v46 >= (uint64_t)v48) {
            break;
          }
          uint64_t v12 = v116;
          if (!v116) {
            goto LABEL_152;
          }
          id v49 = *(void **)v42;
          uint64_t v40 = *(void **)(v42 + 8);
          *(void *)uint64_t v42 = v40;
          *(void *)(v42 + 8) = v49;
          v42 -= 8;
          if (v11 == ++v14) {
            goto LABEL_52;
          }
        }
        uint64_t v12 = v116;
LABEL_52:
        ++v11;
        v39 += 8;
        uint64_t v14 = v41;
      }
      while (v11 != v113);
      uint64_t v11 = v113;
      uint64_t v10 = v109;
    }
    goto LABEL_63;
  }
LABEL_151:
  __break(1u);
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
}

void sub_1A6778CC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v5 = *a4;
    uint64_t v6 = *a4 + 8 * a3 - 8;
LABEL_5:
    uint64_t v7 = *(void **)(v5 + 8 * v4);
    uint64_t v8 = a1;
    uint64_t v20 = v6;
    while (1)
    {
      uint64_t v9 = *(void **)v6;
      id v10 = v7;
      id v11 = v9;
      id v12 = objc_msgSend(v10, sel_byteSampleOffset);
      if (v12 != objc_msgSend(v11, sel_byteSampleOffset)) {
        break;
      }
      id v13 = objc_msgSend(v10, sel_mark);
      if (v13 == objc_msgSend(v11, sel_mark) && objc_msgSend(v10, sel_mark) == (id)1)
      {
        id v14 = objc_msgSend(v10, sel_textRange);
        id v15 = objc_msgSend(v11, sel_textRange);
LABEL_11:
        id v16 = v15;

        if ((uint64_t)v14 >= (uint64_t)v16) {
          goto LABEL_4;
        }
        if (!v5) {
          goto LABEL_17;
        }
        goto LABEL_15;
      }

      if (!v5)
      {
LABEL_17:
        __break(1u);
        return;
      }
LABEL_15:
      id v17 = *(void **)v6;
      uint64_t v7 = *(void **)(v6 + 8);
      *(void *)uint64_t v6 = v7;
      *(void *)(v6 + 8) = v17;
      v6 -= 8;
      if (v4 == ++v8)
      {
LABEL_4:
        ++v4;
        uint64_t v6 = v20 + 8;
        if (v4 == a2) {
          return;
        }
        goto LABEL_5;
      }
    }
    id v14 = objc_msgSend(v10, sel_byteSampleOffset);
    id v15 = objc_msgSend(v11, sel_byteSampleOffset);
    goto LABEL_11;
  }
}

void sub_1A6778E54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v5 = *a4;
    uint64_t v6 = *a4 + 8 * a3 - 8;
LABEL_5:
    uint64_t v7 = *(void **)(v5 + 8 * v4);
    uint64_t v8 = a1;
    uint64_t v18 = v6;
    while (1)
    {
      uint64_t v9 = *(void **)v6;
      id v10 = v7;
      id v11 = v9;
      if (objc_msgSend(v10, sel_mark) == (id)1 && objc_msgSend(v11, sel_mark) == (id)1)
      {
        id v12 = objc_msgSend(v10, sel_textRange);
        id v13 = objc_msgSend(v11, sel_textRange);
      }
      else
      {
        id v12 = objc_msgSend(v10, sel_byteSampleOffset);
        id v13 = objc_msgSend(v11, sel_byteSampleOffset);
      }
      id v14 = v13;

      if ((uint64_t)v12 >= (uint64_t)v14)
      {
LABEL_4:
        ++v4;
        uint64_t v6 = v18 + 8;
        if (v4 == a2) {
          return;
        }
        goto LABEL_5;
      }
      if (!v5) {
        break;
      }
      id v15 = *(void **)v6;
      uint64_t v7 = *(void **)(v6 + 8);
      *(void *)uint64_t v6 = v7;
      *(void *)(v6 + 8) = v15;
      v6 -= 8;
      if (v4 == ++v8) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
}

uint64_t sub_1A6778F9C(char *__src, char *a2, unint64_t a3, char *a4)
{
  uint64_t v5 = (void **)__src;
  uint64_t v6 = a2 - __src;
  uint64_t v7 = a2 - __src + 7;
  if (a2 - __src >= 0) {
    uint64_t v7 = a2 - __src;
  }
  uint64_t v8 = v7 >> 3;
  __srca = (id *)a2;
  uint64_t v9 = a3 - (void)a2;
  uint64_t v10 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v10 = a3 - (void)a2;
  }
  uint64_t v11 = v10 >> 3;
  if (v8 >= v10 >> 3)
  {
    if (a4 != a2 || &a2[8 * v11] <= a4) {
      memmove(a4, a2, 8 * v11);
    }
    uint64_t v43 = (void **)a4;
    id v13 = &a4[8 * v11];
    if (v5 >= __srca || v9 < 8)
    {
LABEL_52:
      id v12 = v43;
      goto LABEL_53;
    }
    id v25 = (id *)(a3 - 8);
    id v26 = (SEL *)&unk_1E5C6B000;
    uint64_t v42 = v5;
    while (1)
    {
      id v45 = v25 + 1;
      uint64_t v27 = v13 - 8;
      id v28 = __srca - 1;
      id v29 = *(__srca - 1);
      id v30 = *((id *)v13 - 1);
      id v31 = v29;
      id v32 = [v30 v26[482]];
      if (v32 == [v31 v26[482]])
      {
        id v33 = objc_msgSend(v30, sel_mark);
        if (v33 != objc_msgSend(v31, sel_mark) || objc_msgSend(v30, sel_mark) != (id)1)
        {

          goto LABEL_42;
        }
        id v34 = objc_msgSend(v30, sel_textRange);
        uint64_t v35 = v13;
        id v36 = objc_msgSend(v31, sel_textRange);

        BOOL v37 = (uint64_t)v34 < (uint64_t)v36;
      }
      else
      {
        id v38 = [v30 v26[482]];
        uint64_t v35 = v13;
        id v39 = [v31 v26[482]];

        BOOL v37 = (uint64_t)v38 < (uint64_t)v39;
      }
      id v13 = v35;
      uint64_t v5 = v42;
      if (!v37)
      {
        id v28 = (id *)v27;
        if (v45 == (id *)v35)
        {
          id v13 = v27;
          id v26 = (SEL *)&unk_1E5C6B000;
          if (v25 < (id *)v35) {
            goto LABEL_50;
          }
        }
        else
        {
          id v13 = v27;
LABEL_48:
          id v26 = (SEL *)&unk_1E5C6B000;
        }
LABEL_49:
        *id v25 = *v28;
        goto LABEL_50;
      }
LABEL_42:
      if (v45 != __srca)
      {
        --__srca;
        goto LABEL_48;
      }
      BOOL v40 = v25 >= __srca--;
      id v26 = (SEL *)&unk_1E5C6B000;
      if (v40) {
        goto LABEL_49;
      }
LABEL_50:
      if (__srca > v5)
      {
        --v25;
        if (v13 > (char *)v43) {
          continue;
        }
      }
      goto LABEL_52;
    }
  }
  id v12 = (void **)a4;
  if (a4 != __src || &__src[8 * v8] <= a4) {
    memmove(a4, __src, 8 * v8);
  }
  id v13 = &a4[8 * v8];
  if ((unint64_t)__srca < a3 && v6 >= 8)
  {
    do
    {
      id v14 = v13;
      id v15 = *v12;
      id v16 = *__srca;
      id v17 = v15;
      id v18 = objc_msgSend(v16, sel_byteSampleOffset);
      if (v18 == objc_msgSend(v17, sel_byteSampleOffset))
      {
        id v19 = objc_msgSend(v16, sel_mark);
        if (v19 != objc_msgSend(v17, sel_mark) || objc_msgSend(v16, sel_mark) != (id)1)
        {

LABEL_21:
          int v23 = __srca;
          BOOL v24 = v5 == __srca++;
          id v13 = v14;
          if (v24) {
            goto LABEL_23;
          }
LABEL_22:
          void *v5 = *v23;
          goto LABEL_23;
        }
        id v20 = objc_msgSend(v16, sel_textRange);
        id v21 = objc_msgSend(v17, sel_textRange);
      }
      else
      {
        id v20 = objc_msgSend(v16, sel_byteSampleOffset);
        id v21 = objc_msgSend(v17, sel_byteSampleOffset);
      }
      id v22 = v21;

      if ((uint64_t)v20 < (uint64_t)v22) {
        goto LABEL_21;
      }
      int v23 = v12;
      BOOL v24 = v5 == v12++;
      id v13 = v14;
      if (!v24) {
        goto LABEL_22;
      }
LABEL_23:
      ++v5;
    }
    while (v12 < (void **)v13 && (unint64_t)__srca < a3);
  }
  __srca = v5;
LABEL_53:
  if (__srca != v12
    || __srca >= (void **)((char *)v12
                         + ((v13 - (char *)v12 + (v13 - (char *)v12 < 0 ? 7uLL : 0)) & 0xFFFFFFFFFFFFFFF8)))
  {
    memmove(__srca, v12, 8 * ((v13 - (char *)v12) / 8));
  }
  return 1;
}

uint64_t sub_1A67793E4(void **__dst, id *__src, unint64_t a3, id *a4)
{
  uint64_t v5 = __src;
  uint64_t v6 = __dst;
  int64_t v7 = (char *)__src - (char *)__dst;
  int64_t v8 = (char *)__src - (char *)__dst + 7;
  if ((char *)__src - (char *)__dst >= 0) {
    int64_t v8 = (char *)__src - (char *)__dst;
  }
  uint64_t v9 = v8 >> 3;
  uint64_t v10 = a3 - (void)__src;
  uint64_t v11 = a3 - (void)__src + 7;
  if ((uint64_t)(a3 - (void)__src) >= 0) {
    uint64_t v11 = a3 - (void)__src;
  }
  uint64_t v12 = v11 >> 3;
  if (v9 >= v11 >> 3)
  {
    if (a4 != __src || &__src[v12] <= a4) {
      memmove(a4, __src, 8 * v12);
    }
    uint64_t v35 = a4;
    id v14 = (char *)&a4[v12];
    if (v6 >= v5 || v10 < 8)
    {
LABEL_49:
      id v13 = v35;
      goto LABEL_50;
    }
    int v23 = (id *)(a3 - 8);
    while (1)
    {
      id v36 = v23 + 1;
      id v38 = (id *)v14;
      id v25 = v14 - 8;
      BOOL v24 = (void *)*((void *)v14 - 1);
      id v26 = v5 - 1;
      uint64_t v27 = *(v5 - 1);
      id v28 = v24;
      id v29 = v27;
      if (objc_msgSend(v28, sel_mark) != (id)1) {
        goto LABEL_34;
      }
      if (objc_msgSend(v29, sel_mark) == (id)1)
      {
        id v30 = objc_msgSend(v28, sel_textRange);
        id v31 = objc_msgSend(v29, sel_textRange);
      }
      else
      {
LABEL_34:
        id v30 = objc_msgSend(v28, sel_byteSampleOffset);
        id v31 = objc_msgSend(v29, sel_byteSampleOffset);
      }
      id v32 = v31;

      if ((uint64_t)v30 < (uint64_t)v32) {
        break;
      }
      id v26 = (id *)v25;
      if (v36 != v38)
      {
        id v14 = v25;
LABEL_45:
        id v13 = v35;
        goto LABEL_46;
      }
      id v14 = v25;
      id v13 = v35;
      if (v23 >= v38) {
        goto LABEL_46;
      }
LABEL_47:
      if (v5 <= v6) {
        goto LABEL_50;
      }
      --v23;
      if (v14 <= (char *)v13) {
        goto LABEL_49;
      }
    }
    id v14 = (char *)v38;
    if (v36 != v5)
    {
      --v5;
      goto LABEL_45;
    }
    BOOL v33 = v23 >= v5--;
    id v13 = v35;
    if (!v33) {
      goto LABEL_47;
    }
LABEL_46:
    id *v23 = *v26;
    goto LABEL_47;
  }
  id v13 = a4;
  if (a4 != __dst || &__dst[v9] <= a4) {
    memmove(a4, __dst, 8 * v9);
  }
  id v14 = (char *)&a4[v9];
  if ((unint64_t)v5 < a3 && v7 >= 8)
  {
    while (1)
    {
      id v15 = *v13;
      id v16 = *v5;
      id v17 = v15;
      if (objc_msgSend(v16, sel_mark) == (id)1 && objc_msgSend(v17, sel_mark) == (id)1)
      {
        id v18 = objc_msgSend(v16, sel_textRange);
        id v19 = objc_msgSend(v17, sel_textRange);
      }
      else
      {
        id v18 = objc_msgSend(v16, sel_byteSampleOffset);
        id v19 = objc_msgSend(v17, sel_byteSampleOffset);
      }
      id v20 = v19;

      if ((uint64_t)v18 >= (uint64_t)v20) {
        break;
      }
      id v21 = v5;
      BOOL v22 = v6 == v5++;
      if (!v22) {
        goto LABEL_20;
      }
LABEL_21:
      ++v6;
      if (v13 >= (void **)v14 || (unint64_t)v5 >= a3) {
        goto LABEL_23;
      }
    }
    id v21 = v13;
    BOOL v22 = v6 == v13++;
    if (v22) {
      goto LABEL_21;
    }
LABEL_20:
    *uint64_t v6 = *v21;
    goto LABEL_21;
  }
LABEL_23:
  uint64_t v5 = v6;
LABEL_50:
  if (v5 != v13
    || v5 >= (void **)((char *)v13 + ((v14 - (char *)v13 + (v14 - (char *)v13 < 0 ? 7uLL : 0)) & 0xFFFFFFFFFFFFFFF8)))
  {
    memmove(v5, v13, 8 * ((v14 - (char *)v13) / 8));
  }
  return 1;
}

char *sub_1A6779758(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1A6741AD0(&qword_1E96C1F20);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  id v13 = v10 + 32;
  id v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1A6779854(uint64_t a1)
{
  return sub_1A6779758(0, *(void *)(a1 + 16), 0, (char *)a1);
}

void sub_1A6779868(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_1A6892EB0();
    swift_bridgeObjectRelease();
    sub_1A6893210();
    swift_bridgeObjectRetain();
    uint64_t v3 = sub_1A6892EB0();
    swift_bridgeObjectRelease();
    if (!v3) {
      return;
    }
  }
  else
  {
    sub_1A6893210();
    uint64_t v3 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v3) {
      return;
    }
  }
  if (v3 < 1)
  {
    __break(1u);
  }
  else if ((a2 & 0xC000000000000001) != 0)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      MEMORY[0x1AD0BFD30](i, a2);
      sub_1A68929C0();
      swift_unknownObjectRelease();
    }
  }
  else
  {
    char v5 = (void **)(a2 + 32);
    do
    {
      unint64_t v6 = *v5++;
      id v7 = v6;
      sub_1A68929C0();

      --v3;
    }
    while (v3);
  }
}

uint64_t sub_1A6779980(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = result;
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = sub_1A6892EB0();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = sub_1A6892EB0();
      uint64_t result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          sub_1A6766A64(&qword_1E96C1F00, &qword_1E96C1EF8);
          swift_bridgeObjectRetain();
          for (unint64_t i = 0; i != v7; ++i)
          {
            sub_1A6741AD0(&qword_1E96C1EF8);
            uint64_t v10 = sub_1A6765468(v13, i, a3);
            id v12 = *v11;
            ((void (*)(void (**)(id *), void))v10)(v13, 0);
            *(void *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        sub_1A67501D4(0, &qword_1E96C3170);
        swift_arrayInitWithCopy();
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_1A6779B50(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  unint64_t v6 = a2;
  uint64_t v7 = result;
  if ((a4 & 0xC000000000000001) != 0)
  {
    sub_1A6892BB0();
    sub_1A67501D4(0, &qword_1E96C3170);
    sub_1A677B7B8();
    uint64_t result = (void *)sub_1A6892740();
    uint64_t v4 = v27;
    uint64_t v8 = v28;
    uint64_t v9 = v29;
    int64_t v10 = v30;
    unint64_t v11 = v31;
    BOOL v24 = v7;
    if (v6) {
      goto LABEL_3;
    }
LABEL_36:
    uint64_t v12 = 0;
LABEL_46:
    *BOOL v24 = v4;
    v24[1] = v8;
    v24[2] = v9;
    v24[3] = v10;
    v24[4] = v11;
    return (void *)v12;
  }
  int64_t v10 = 0;
  uint64_t v20 = -1 << *(unsigned char *)(a4 + 32);
  uint64_t v8 = a4 + 56;
  uint64_t v9 = ~v20;
  uint64_t v21 = -v20;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  else {
    uint64_t v22 = -1;
  }
  unint64_t v11 = v22 & *(void *)(a4 + 56);
  BOOL v24 = result;
  if (!a2) {
    goto LABEL_36;
  }
LABEL_3:
  if (!a3)
  {
    uint64_t v12 = 0;
    goto LABEL_46;
  }
  if (a3 < 0) {
    goto LABEL_48;
  }
  uint64_t v12 = 0;
  int64_t v25 = (unint64_t)(v9 + 64) >> 6;
  uint64_t v23 = v9;
  while (1)
  {
    if (v4 < 0)
    {
      if (!sub_1A6892BD0()) {
        goto LABEL_45;
      }
      sub_1A67501D4(0, &qword_1E96C3170);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v15 = v26;
      uint64_t result = (void *)swift_unknownObjectRelease();
      if (!v26) {
        goto LABEL_45;
      }
      goto LABEL_8;
    }
    if (v11)
    {
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v10 << 6);
      goto LABEL_7;
    }
    int64_t v16 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      break;
    }
    if (v16 >= v25)
    {
      unint64_t v11 = 0;
      goto LABEL_45;
    }
    unint64_t v17 = *(void *)(v8 + 8 * v16);
    if (v17) {
      goto LABEL_23;
    }
    int64_t v18 = v10 + 2;
    if (v10 + 2 >= v25)
    {
      unint64_t v11 = 0;
      ++v10;
      goto LABEL_45;
    }
    unint64_t v17 = *(void *)(v8 + 8 * v18);
    if (!v17)
    {
      if (v10 + 3 >= v25) {
        goto LABEL_42;
      }
      unint64_t v17 = *(void *)(v8 + 8 * (v10 + 3));
      if (v17)
      {
        int64_t v16 = v10 + 3;
        goto LABEL_23;
      }
      int64_t v18 = v10 + 4;
      if (v10 + 4 >= v25)
      {
        unint64_t v11 = 0;
        v10 += 3;
        goto LABEL_45;
      }
      unint64_t v17 = *(void *)(v8 + 8 * v18);
      if (!v17)
      {
        int64_t v16 = v10 + 5;
        if (v10 + 5 >= v25)
        {
LABEL_42:
          unint64_t v11 = 0;
          int64_t v10 = v18;
          goto LABEL_45;
        }
        unint64_t v17 = *(void *)(v8 + 8 * v16);
        if (!v17)
        {
          int64_t v19 = v10 + 6;
          while (v25 != v19)
          {
            unint64_t v17 = *(void *)(v8 + 8 * v19++);
            if (v17)
            {
              int64_t v16 = v19 - 1;
              goto LABEL_23;
            }
          }
          unint64_t v11 = 0;
          int64_t v10 = v25 - 1;
          goto LABEL_45;
        }
        goto LABEL_23;
      }
    }
    int64_t v16 = v18;
LABEL_23:
    unint64_t v11 = (v17 - 1) & v17;
    unint64_t v14 = __clz(__rbit64(v17)) + (v16 << 6);
    int64_t v10 = v16;
LABEL_7:
    uint64_t result = *(id *)(*(void *)(v4 + 48) + 8 * v14);
    id v15 = result;
    if (!result) {
      goto LABEL_45;
    }
LABEL_8:
    ++v12;
    *v6++ = v15;
    if (v12 == a3)
    {
      uint64_t v12 = a3;
LABEL_45:
      uint64_t v9 = v23;
      goto LABEL_46;
    }
  }
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

void sub_1A6779E5C()
{
}

uint64_t _s12TextToSpeech13TTSAURendererC0C6BufferV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  if ((sub_1A68917E0() & 1) != 0
    && (uint64_t v4 = type metadata accessor for TTSAURenderer.SpeechBuffer(),
        *(_DWORD *)(a1 + *(int *)(v4 + 20)) == *(_DWORD *)(a2 + *(int *)(v4 + 20)))
    && (uint64_t v5 = v4, sub_1A67501D4(0, (unint64_t *)&qword_1EB67A1C8), (sub_1A68929B0() & 1) != 0))
  {
    unsigned __int8 v6 = sub_1A6776668(*(void *)(a1 + *(int *)(v5 + 28)), *(void *)(a2 + *(int *)(v5 + 28)), (uint64_t)&qword_1E96C3170);
  }
  else
  {
    unsigned __int8 v6 = 0;
  }
  return v6 & 1;
}

uint64_t sub_1A6779F20(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = result;
  LODWORD(result) = 0;
  uint64_t v3 = (int *)(v2 + 32);
  do
  {
    int v5 = *v3++;
    int v4 = v5;
    if ((v5 & ~result) == 0) {
      int v4 = 0;
    }
    uint64_t result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_1A6779F58(uint64_t a1)
{
  *(void *)(v1 + 128) = a1;
  return MEMORY[0x1F4188298](sub_1A6779F78, 0, 0);
}

uint64_t sub_1A6779F78()
{
  uint64_t v1 = v0 + 16;
  uint64_t v2 = *(void **)(v0 + 128);
  uint64_t v3 = self;
  objc_msgSend(v2, sel_auComponentDesc);
  *(void *)(v0 + 56) = v0 + 120;
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 24) = sub_1A677A0BC;
  uint64_t v4 = swift_continuation_init();
  *(_OWORD *)(v0 + 144) = v7;
  uint64_t v5 = v0 + 144;
  *(void *)(v5 - 64) = MEMORY[0x1E4F143A8];
  *(void *)(v5 - 56) = 0x40000000;
  *(void *)(v5 - 48) = sub_1A6775324;
  *(void *)(v5 - 40) = &unk_1E5C6AEA8;
  *(void *)(v5 - 32) = v4;
  *(_DWORD *)(v5 + 16) = v8;
  objc_msgSend(v3, sel_instantiateWithComponentDescription_options_completionHandler_, v5, 1);
  return MEMORY[0x1F41881E8](v1);
}

uint64_t sub_1A677A0BC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 136) = v1;
  if (v1) {
    uint64_t v2 = sub_1A677A2A0;
  }
  else {
    uint64_t v2 = sub_1A677A1CC;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

uint64_t sub_1A677A1CC()
{
  uint64_t v1 = *(void **)(v0 + 120);
  if (v1)
  {
    id v2 = objc_msgSend(*(id *)(v0 + 120), sel_outputBusses);
    id v3 = objc_msgSend(v2, sel_objectAtIndexedSubscript_, 0);

    id v4 = objc_msgSend(v3, sel_format);
  }
  else
  {
    id v4 = 0;
  }
  uint64_t v5 = *(uint64_t (**)(id))(v0 + 8);
  return v5(v4);
}

uint64_t sub_1A677A2A0()
{
  uint64_t v1 = *(void **)(v0 + 136);
  swift_willThrow();

  id v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2(0);
}

uint64_t sub_1A677A318(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1A677B99C(&qword_1E96C1E88, a2, (void (*)(uint64_t))type metadata accessor for TTSAURenderer);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1A677A370()
{
  return sub_1A677B99C(&qword_1E96C1EB8, 255, (void (*)(uint64_t))type metadata accessor for TTSAURenderer.SpeechBuffer);
}

uint64_t method lookup function for TTSAURenderer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for TTSAURenderer);
}

uint64_t dispatch thunk of TTSAURenderer.audioFormat.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of TTSAURenderer.audioFormat.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of TTSAURenderer.audioFormat.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of TTSAURenderer.synthesize(request:voiceSettings:chain:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v3 + 352)
                                                          + **(int **)(*(void *)v3 + 352));
  int v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *int v8 = v4;
  v8[1] = sub_1A677A564;
  return v10(a1, a2, a3);
}

uint64_t sub_1A677A564(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t dispatch thunk of TTSAURenderer.cancel()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 360))();
}

uint64_t dispatch thunk of TTSAURenderer.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 368))();
}

uint64_t dispatch thunk of TTSAURenderer.flushMarkers()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 376))();
}

void *initializeBufferWithCopyOfBuffer for TTSAURenderer.SynthesisError(void *a1, void **a2)
{
  uint64_t v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    id v4 = v3;
  }
  *a1 = v3;
  return a1;
}

void destroy for TTSAURenderer.SynthesisError(void **a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)v1 >= 0xFFFFFFFF) {
}
  }

void **assignWithCopy for TTSAURenderer.SynthesisError(void **a1, void **a2)
{
  uint64_t v3 = *a1;
  id v4 = *a2;
  if ((unint64_t)v3 < 0xFFFFFFFF)
  {
    if ((unint64_t)v4 >= 0xFFFFFFFF) {
      id v7 = v4;
    }
    *a1 = v4;
  }
  else if ((unint64_t)v4 < 0xFFFFFFFF)
  {

    *a1 = *a2;
  }
  else
  {
    id v5 = v4;
    uint64_t v6 = *a1;
    *a1 = v4;
  }
  return a1;
}

void *initializeWithTake for VoiceResolver.Mode(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

void **assignWithTake for TTSAURenderer.SynthesisError(void **a1, unint64_t *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if ((unint64_t)v3 < 0xFFFFFFFF) {
    goto LABEL_6;
  }
  if (v4 < 0xFFFFFFFF)
  {

LABEL_6:
    *a1 = (void *)v4;
    return a1;
  }
  *a1 = (void *)v4;

  return a1;
}

uint64_t getEnumTagSinglePayload for TTSAURenderer.SynthesisError(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFFA && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483643);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 4;
  if (v4 >= 6) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for TTSAURenderer.SynthesisError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFB)
  {
    *(void *)uint64_t result = 0;
    *(_DWORD *)uint64_t result = a2 - 2147483643;
    if (a3 >= 0x7FFFFFFB) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFB) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2 + 4;
    }
  }
  return result;
}

uint64_t sub_1A677A8CC(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}