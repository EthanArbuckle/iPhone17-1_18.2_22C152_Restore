id stringsArrayFromIdentityProofingOptions(char a1)
{
  id v2;
  uint64_t v3;
  __CFString *v4;
  uint64_t v5;
  uint64_t vars8;

  v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  v3 = a1 & 3;
  if (v3)
  {
    while ((v3 & 1) == 0)
    {
      if ((v3 & 2) != 0)
      {
        v4 = @"IdentityProofingOptionsWatch";
        v5 = 2;
LABEL_6:
        [v2 addObject:v4];
        v3 ^= v5;
      }
      if (!v3) {
        goto LABEL_8;
      }
    }
    v4 = @"IdentityProofingOptionsPhone";
    v5 = 1;
    goto LABEL_6;
  }
LABEL_8:
  return v2;
}

uint64_t IdentityProofingOptionsFromStringsArray(void *a1)
{
  id v1 = a1;
  uint64_t v5 = 0;
  v6 = &v5;
  uint64_t v7 = 0x2020000000;
  uint64_t v8 = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __IdentityProofingOptionsFromStringsArray_block_invoke;
  v4[3] = &unk_1E6A85BF8;
  v4[4] = &v5;
  [v1 enumerateObjectsUsingBlock:v4];
  uint64_t v2 = v6[3];
  _Block_object_dispose(&v5, 8);

  return v2;
}

void sub_1D78563AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __IdentityProofingOptionsFromStringsArray_block_invoke(uint64_t a1, void *a2)
{
  id v5 = a2;
  if ([v5 isEqual:@"IdentityProofingOptionsPhone"])
  {
    uint64_t v3 = 1;
  }
  else
  {
    if (![v5 isEqual:@"IdentityProofingOptionsWatch"]) {
      goto LABEL_6;
    }
    uint64_t v3 = 2;
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) |= v3;
LABEL_6:
  return MEMORY[0x1F41817F8]();
}

uint64_t eventCallback(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return [a1 handleEvent:a4];
}

uint64_t DIPSecNonceForBAAAttestation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F40F6F78](a1, *MEMORY[0x1E4F3BB60], a2, a3);
}

uint64_t DIPSecPolicyCreateApplePinned()
{
  return MEMORY[0x1F40F7028]();
}

uint64_t DIPSecPolicyCreateApplePayModelSigning(int a1)
{
  return MEMORY[0x1F40F7020](a1 != 0);
}

uint64_t DIPSecCopyEncryptedToServer()
{
  return MEMORY[0x1F40F6D60]();
}

uint64_t DIPCCCryptorGCMOneshotEncrypt()
{
  return CCCryptorGCMOneshotEncrypt();
}

uint64_t DIPCCCryptorGCMOneshotDecrypt()
{
  return CCCryptorGCMOneshotDecrypt();
}

uint64_t DIPSecKeyCopyAttestationKey()
{
  return MEMORY[0x1F40F6E88]();
}

uint64_t DIPSecKeyCreateAttestation()
{
  return MEMORY[0x1F40F6E90]();
}

uint64_t DIPSecKeyCreateEncryptedDataWithParameters()
{
  return MEMORY[0x1F40F6EB8]();
}

uint64_t DIPSecCertificateCopySubjectPublicKeyInfoSHA256Digest()
{
  return MEMORY[0x1F40F6B60]();
}

id DigestSha256(void *a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = (const void *)[v1 bytes];
  CC_LONG v3 = [v1 length];

  v4 = CC_SHA256(v2, v3, md);
  if (v4)
  {
    v4 = [MEMORY[0x1E4F1C9B8] dataWithBytes:md length:32];
  }
  return v4;
}

id getUIKPath()
{
  [@"systemgroup.com.apple.mobileactivationd" UTF8String];
  uint64_t v0 = container_system_group_path_for_identifier();
  if (v0)
  {
    id v1 = (void *)v0;
    uint64_t v2 = [NSString stringWithUTF8String:v0];
    CC_LONG v3 = [v2 stringByAppendingPathComponent:@"Library/uik/uik.pem"];

    free(v1);
  }
  else
  {
    CC_LONG v3 = 0;
  }
  return v3;
}

uint64_t hasSEService()
{
  uint64_t v0 = MobileGestalt_get_current_device();
  uint64_t secureElement = MobileGestalt_get_secureElement();

  return secureElement;
}

id getSEABASSOIDS()
{
  v6[9] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = *MEMORY[0x1E4F97A90];
  v6[0] = *MEMORY[0x1E4F97A98];
  v6[1] = v0;
  uint64_t v1 = *MEMORY[0x1E4F97A60];
  v6[2] = *MEMORY[0x1E4F97A68];
  v6[3] = v1;
  uint64_t v2 = *MEMORY[0x1E4F97A78];
  v6[4] = *MEMORY[0x1E4F97A70];
  v6[5] = v2;
  uint64_t v3 = *MEMORY[0x1E4F97A80];
  v6[6] = *MEMORY[0x1E4F97AA0];
  v6[7] = v3;
  v6[8] = *MEMORY[0x1E4F97A88];
  v4 = [MEMORY[0x1E4F1C978] arrayWithObjects:v6 count:9];
  return v4;
}

id ECDSASHA256RawToDER(void *a1)
{
  id v1 = a1;
  if ([v1 length] != 64) {
    goto LABEL_9;
  }
  uint64_t v2 = [v1 bytes];
  uint64_t v3 = (unsigned char *)(v2 + 31);
  unint64_t v4 = v2 + 1;
  do
  {
    char v5 = *(unsigned char *)(v4 - 1);
    *(unsigned char *)(v4 - 1) = *v3;
    *v3-- = v5;
    BOOL v6 = v4++ >= (unint64_t)v3;
  }
  while (!v6);
  uint64_t v7 = (unsigned char *)(v2 + 63);
  unint64_t v8 = v2 + 33;
  do
  {
    char v9 = *(unsigned char *)(v8 - 1);
    *(unsigned char *)(v8 - 1) = *v7;
    *v7-- = v9;
    BOOL v6 = v8++ >= (unint64_t)v7;
  }
  while (!v6);
  ccder_sizeof_integer();
  ccder_sizeof_integer();
  unint64_t v10 = ccder_sizeof();
  if (v10 >= 0x40)
  {
    v12 = (void *)[objc_alloc(MEMORY[0x1E4F1CA58]) initWithLength:v10];
    v13 = v12;
    if (v12)
    {
      id v14 = v12;
      [v14 mutableBytes];
      ccder_encode_integer();
      ccder_encode_integer();
      ccder_encode_constructed_tl();
      v11 = [MEMORY[0x1E4F1C9B8] dataWithData:v14];
    }
    else
    {
      v11 = 0;
    }
  }
  else
  {
LABEL_9:
    v11 = 0;
  }

  return v11;
}

uint64_t DIPSecGenerateSelfSignedCertificate()
{
  return MEMORY[0x1F40F6DB0]();
}

id APPLEIDV_LOG_CLIENT()
{
  if (APPLEIDV_LOG_CLIENT_once != -1) {
    dispatch_once(&APPLEIDV_LOG_CLIENT_once, &__block_literal_global);
  }
  uint64_t v0 = (void *)APPLEIDV_LOG_CLIENT_log;
  return v0;
}

id DIV_LOG_KEXT()
{
  if (DIV_LOG_KEXT_once != -1) {
    dispatch_once(&DIV_LOG_KEXT_once, &__block_literal_global_162);
  }
  uint64_t v0 = (void *)DIV_LOG_KEXT_log;
  return v0;
}

uint64_t buildMetadataBuffer(void *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  BOOL v6 = v5;
  uint64_t v7 = 4294967290;
  if (a1 && v5)
  {
    a1[6] = 0;
    unint64_t v8 = [v5 length];
    char v9 = (const void *)[v6 bytes];
    if (a3 == 1)
    {
      size_t v10 = 32;
    }
    else
    {
      if (a3 != 2)
      {
        uint64_t v7 = 4294967265;
        goto LABEL_11;
      }
      size_t v10 = 65;
    }
    if (v8 < v10)
    {
      uint64_t v7 = 12;
    }
    else
    {
      v11 = malloc_type_malloc(v10 | 4, 0x61E5F4D4uLL);
      if (v11)
      {
        v12 = v11;
        a1[7] = v10 | 4;
        unsigned char *v11 = a1[5];
        v11[1] = a3;
        memcpy(v11 + 2, v9, v10);
        uint64_t v7 = 0;
        v12[v10 | 2] = 0;
        v12[v10 + 3] = 0;
        a1[6] = v12;
      }
      else
      {
        uint64_t v7 = 4294967277;
      }
    }
  }
LABEL_11:

  return v7;
}

uint64_t AuthorizePresentmentFromAppleIDV(void *a1)
{
  size_t v18 = 0;
  if (!a1) {
    goto LABEL_14;
  }
  if (!a1[3])
  {
    uint64_t v15 = 4294967270;
    goto LABEL_11;
  }
  if (!*a1
    || a1[4] > 0xFFFFFFFEuLL
    || !a1[6]
    || a1[7] > 0xFFFFFFFEuLL
    || (uint64_t v2 = (char *)malloc_type_malloc(0x1000uLL, 0xCC5F8C18uLL)) == 0)
  {
LABEL_14:
    uint64_t v15 = 5;
    goto LABEL_11;
  }
  uint64_t v3 = v2;
  uint64_t v4 = a1[1];
  *uint64_t v2 = 60;
  *(_WORD *)(v2 + 1) = v4;
  v2[3] = BYTE2(v4);
  v2[4] = BYTE3(v4);
  __memcpy_chk();
  uint64_t v5 = (v4 + 5);
  BOOL v6 = &v3[v5];
  uint64_t v7 = (const void *)a1[3];
  uint64_t v8 = a1[4];
  char *v6 = 21;
  *(_WORD *)(v6 + 1) = v8;
  v6[3] = BYTE2(v8);
  v6[4] = BYTE3(v8);
  memcpy(&v3[v5 + 5], v7, v8);
  uint64_t v9 = (v8 + 5) + v5;
  size_t v10 = &v3[v9];
  v11 = (const void *)a1[6];
  uint64_t v12 = a1[7];
  *size_t v10 = 22;
  *(_WORD *)(v10 + 1) = v12;
  v10[3] = BYTE2(v12);
  v10[4] = BYTE3(v12);
  memcpy(&v3[v9 + 5], v11, v12);
  size_t v13 = (v12 + 5) + v9;
  id v14 = APPLEIDV_LOG_CLIENT();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
    AuthorizePresentmentFromAppleIDV_cold_2((uint64_t)v3, v13, v14);
  }

  uint64_t v15 = GenericAppleIDVCall(3u, v3, v13, &v19, &v18);
  free(v3);
LABEL_11:
  v16 = APPLEIDV_LOG_CLIENT();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG)) {
    AuthorizePresentmentFromAppleIDV_cold_1();
  }

  return v15;
}

uint64_t extractACLForSCRD(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t result = 5;
  if (a1 && a3)
  {
    if (a4)
    {
      ccder_decode_constructed_tl();
      *a3 = 0;
      uint64_t result = 20;
      *a4 = 0;
    }
  }
  return result;
}

uint64_t GenericAppleIDVCall(uint32_t a1, const void *a2, size_t a3, void *a4, size_t *a5)
{
  *(void *)existing = 0;
  io_connect_t connect = 0;
  uint64_t MatchingServices = MEMORY[0x1D947C730](0, &existing[1]);
  if (!MatchingServices)
  {
    CFDictionaryRef v12 = IOServiceMatching("AppleIDV");
    if (v12)
    {
      uint64_t MatchingServices = IOServiceGetMatchingServices(existing[1], v12, existing);
      if (!MatchingServices)
      {
        io_service_t v13 = IOIteratorNext(existing[0]);
        if (v13)
        {
          io_object_t v14 = v13;
          uint64_t MatchingServices = IOServiceOpen(v13, *MEMORY[0x1E4F14960], 0, &connect);
          IOObjectRelease(v14);
          if (!MatchingServices) {
            uint64_t MatchingServices = IOConnectCallStructMethod(connect, a1, a2, a3, a4, a5);
          }
        }
        else
        {
          uint64_t MatchingServices = 5;
        }
        IOObjectRelease(existing[0]);
        if (connect) {
          IOServiceClose(connect);
        }
      }
    }
    else
    {
      return 5;
    }
  }
  return MatchingServices;
}

uint64_t tlvEncodeWithCheck(uint64_t a1, char a2, const void *a3, unsigned int a4, uint64_t *a5, void *a6)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v12 = APPLEIDV_LOG_CLIENT();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v15 = *a5;
    int v16 = 136316162;
    v17 = "tlvEncodeWithCheck";
    __int16 v18 = 1024;
    int v19 = 105;
    __int16 v20 = 2048;
    uint64_t v21 = v15;
    __int16 v22 = 2048;
    uint64_t v23 = a1;
    __int16 v24 = 1024;
    unsigned int v25 = a4;
    _os_log_debug_impl(&dword_1D7853000, v12, OS_LOG_TYPE_DEBUG, "[%s:%d] tlvEncode on outputBufferLength = %zu at %p for a buffer of length %u (+ 5 bytes of type and length)", (uint8_t *)&v16, 0x2Cu);
  }

  if (*a5 < (unint64_t)a4 + 5) {
    return 4294967272;
  }
  *(unsigned char *)a1 = a2;
  *(_DWORD *)(a1 + 1) = a4;
  memcpy((void *)(a1 + 5), a3, a4);
  uint64_t result = 0;
  uint64_t v14 = a4 + 5;
  *a6 += v14;
  *a5 -= v14;
  return result;
}

void OUTLINED_FUNCTION_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0x18u);
}

void OUTLINED_FUNCTION_4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x1Cu);
}

void OUTLINED_FUNCTION_8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

void OUTLINED_FUNCTION_10(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0x26u);
}

void OUTLINED_FUNCTION_11(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0x14u);
}

void OUTLINED_FUNCTION_13(uint64_t a1@<X8>)
{
  *(void *)(v1 - 24) = a1;
}

void OUTLINED_FUNCTION_16(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xEu);
}

void OUTLINED_FUNCTION_17(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x26u);
}

void OUTLINED_FUNCTION_18(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x26u);
}

unsigned char *HexToBytes(void *a1)
{
  id v1 = a1;
  char v9 = 0;
  if (([v1 length] & 1) == 0)
  {
    uint64_t v2 = malloc_type_malloc((unint64_t)[v1 length] >> 1, 0xF07C7779uLL);
    if (!v2) {
      goto LABEL_10;
    }
    if (![v1 length])
    {
LABEL_7:
      objc_msgSend(MEMORY[0x1E4F1C9B8], "dataWithBytesNoCopy:length:freeWhenDone:", v2, (unint64_t)objc_msgSend(v1, "length") >> 1, 1);
      uint64_t v2 = (unsigned char *)objc_claimAutoreleasedReturnValue();
      goto LABEL_10;
    }
    unint64_t v3 = 0;
    uint64_t v4 = v2;
    while (1)
    {
      __str[0] = [v1 characterAtIndex:v3];
      unint64_t v5 = v3 + 1;
      __str[1] = [v1 characterAtIndex:v5];
      uint64_t v7 = 0;
      unsigned char *v4 = strtol(__str, &v7, 16);
      if (v7 != &v9) {
        break;
      }
      ++v4;
      unint64_t v3 = v5 + 1;
      if (v3 >= [v1 length]) {
        goto LABEL_7;
      }
    }
    free(v2);
  }
  uint64_t v2 = 0;
LABEL_10:

  return v2;
}

uint64_t LogotypeInfo.data.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  *a1 = *v1;
  a1[1] = v3;
  a1[2] = v4;
  return sub_1D785BF34(v2, v3);
}

uint64_t sub_1D785BF34(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for LogotypeData(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *_s13CoreIDVShared12LogotypeDataVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  if (v3)
  {
    *a1 = *a2;
    a1[1] = v3;
    a1[2] = a2[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
  }
  return a1;
}

void *assignWithCopy for LogotypeData(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  if (a1[1])
  {
    if (v4)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1D785C0F4((uint64_t)a1);
      uint64_t v5 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v5;
    }
  }
  else if (v4)
  {
    *a1 = *a2;
    a1[1] = a2[1];
    a1[2] = a2[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v6 = *(_OWORD *)a2;
    a1[2] = a2[2];
    *(_OWORD *)a1 = v6;
  }
  return a1;
}

uint64_t sub_1D785C0F4(uint64_t a1)
{
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for LogotypeData(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 8)) {
    goto LABEL_5;
  }
  uint64_t v4 = *(void *)(a2 + 8);
  if (!v4)
  {
    sub_1D785C0F4(a1);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for LogotypeData(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for LogotypeData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

uint64_t sub_1D785C27C()
{
  return 0;
}

ValueMetadata *type metadata accessor for LogotypeInfo()
{
  return &type metadata for LogotypeInfo;
}

void type metadata accessor for CFData(uint64_t a1)
{
}

void type metadata accessor for SecTrust(uint64_t a1)
{
}

void type metadata accessor for URLFileProtection(uint64_t a1)
{
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for CGPoint(uint64_t a1)
{
}

void type metadata accessor for AppleIDVACLUseCase(uint64_t a1)
{
}

void type metadata accessor for AppleIDVACLType(uint64_t a1)
{
}

void type metadata accessor for SecAccessControl(uint64_t a1)
{
}

void type metadata accessor for SecKey(uint64_t a1)
{
}

void type metadata accessor for SecKeyAlgorithm(uint64_t a1)
{
}

void type metadata accessor for CFString(uint64_t a1)
{
}

void type metadata accessor for URLResourceKey(uint64_t a1)
{
}

void type metadata accessor for COSEKeyOKPCurve(uint64_t a1)
{
}

void type metadata accessor for COSEKeyEC2Curve(uint64_t a1)
{
}

void type metadata accessor for IdentityProofingOptions(uint64_t a1)
{
}

void type metadata accessor for VNBarcodeSymbology(uint64_t a1)
{
}

void type metadata accessor for VNImageOption(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for ASN1Any(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_1D785C428(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1D785C448(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
}

void type metadata accessor for CFError(uint64_t a1)
{
}

void type metadata accessor for SecCertificate(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

uint64_t sub_1D785C4C4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (*a1)
  {
    uint64_t v4 = sub_1D78F7D1C();
    uint64_t v6 = v5;
    type metadata accessor for ASN1Error.Backing();
    uint64_t v7 = swift_allocObject();
    *(unsigned char *)(v7 + 16) = 0;
    *(void *)(v7 + 24) = v4;
    *(void *)(v7 + 32) = v6;
    *(void *)(v7 + 40) = 0xD000000000000020;
    *(void *)(v7 + 48) = 0x80000001D7ABCCD0;
    *(void *)(v7 + 56) = 28;
    sub_1D785D8F0();
    swift_allocError();
    *uint64_t v8 = v7;
LABEL_5:
    swift_willThrow();
    return sub_1D785D944((uint64_t)a1);
  }
  sub_1D785D98C((uint64_t)(a1 + 2), (uint64_t)v29);
  sub_1D785D98C((uint64_t)v29, (uint64_t)v30);
  if (v32 == 1)
  {
    type metadata accessor for ASN1Error.Backing();
    uint64_t v10 = swift_allocObject();
    *(unsigned char *)(v10 + 16) = 1;
    *(void *)(v10 + 24) = 0xD000000000000019;
    *(void *)(v10 + 32) = 0x80000001D7ABCD00;
    *(void *)(v10 + 40) = 0xD000000000000020;
    *(void *)(v10 + 48) = 0x80000001D7ABCCD0;
    *(void *)(v10 + 56) = 32;
    sub_1D785D8F0();
    swift_allocError();
    uint64_t *v11 = v10;
    goto LABEL_5;
  }
  long long v18 = v30[0];
  long long v19 = v30[1];
  uint64_t v20 = v31;
  sub_1D7A2BC88((uint64_t)v21);
  sub_1D785D9E8((uint64_t)v21, (uint64_t)v25);
  if (!(void)v26)
  {
    sub_1D785DA98((uint64_t)v29, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRetain);
    sub_1D785DA98((uint64_t)v29, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRetain);
    goto LABEL_11;
  }
  v28[2] = v25[2];
  v28[3] = v25[3];
  v28[4] = v26;
  v28[5] = v27;
  v28[0] = v25[0];
  v28[1] = v25[1];
  sub_1D7A2BC88((uint64_t)v22);
  sub_1D785DA98((uint64_t)v29, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRetain);
  sub_1D785DA98((uint64_t)v29, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRetain);
  sub_1D785DAD8(v22);
  sub_1D785D9E8((uint64_t)v22, (uint64_t)v23);
  if (v24)
  {
    sub_1D785DAD8(v21);
LABEL_11:
    type metadata accessor for ASN1Error.Backing();
    uint64_t v13 = swift_allocObject();
    *(unsigned char *)(v13 + 16) = 1;
    *(void *)(v13 + 24) = 0xD000000000000019;
    *(void *)(v13 + 32) = 0x80000001D7ABCD20;
    *(void *)(v13 + 40) = 0xD000000000000020;
    *(void *)(v13 + 48) = 0x80000001D7ABCCD0;
    *(void *)(v13 + 56) = 37;
    sub_1D785D8F0();
    swift_allocError();
    *uint64_t v14 = v13;
    swift_willThrow();
    sub_1D785DA98((uint64_t)v29, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
    sub_1D785D944((uint64_t)a1);
    return swift_unknownObjectRelease();
  }
  sub_1D79333AC((uint64_t)v28, &v16);
  sub_1D785DA98((uint64_t)v29, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
  sub_1D785D944((uint64_t)a1);
  uint64_t result = swift_unknownObjectRelease();
  if (!v2)
  {
    uint64_t v15 = v17;
    *(_OWORD *)a2 = v16;
    *(void *)(a2 + 16) = v15;
  }
  return result;
}

void *sub_1D785C824@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void sub_1D785C834(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_1D785C840(uint64_t a1, uint64_t a2)
{
  return sub_1D785D488(a1, a2, MEMORY[0x1E4F27EB8]);
}

uint64_t sub_1D785C864(uint64_t a1, uint64_t a2)
{
  return sub_1D785D488(a1, a2, MEMORY[0x1E4FBB198]);
}

BOOL sub_1D785C884(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1D785C898()
{
  return sub_1D7A9B4B8();
}

uint64_t sub_1D785C8E4()
{
  return sub_1D7A9B4A8();
}

uint64_t sub_1D785C93C()
{
  return sub_1D7A9D628();
}

id sub_1D785C9A4()
{
  return *v0;
}

uint64_t sub_1D785C9AC@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_1D785C9B4(uint64_t a1, id *a2)
{
  uint64_t result = sub_1D7A9BFA8();
  *a2 = 0;
  return result;
}

uint64_t sub_1D785CA2C(uint64_t a1, id *a2)
{
  char v3 = sub_1D7A9BFB8();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_1D785CAAC@<X0>(uint64_t *a1@<X8>)
{
  sub_1D7A9BFC8();
  uint64_t v2 = sub_1D7A9BF98();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1D785CAF0()
{
  swift_getWitnessTable();
  return sub_1D7A9B498();
}

uint64_t sub_1D785CB60()
{
  return sub_1D7A9BFC8();
}

uint64_t sub_1D785CB70(uint64_t a1)
{
  uint64_t v2 = sub_1D785D024(&qword_1EA842058, type metadata accessor for LAError);
  return MEMORY[0x1F40E44F0](a1, v2);
}

uint64_t sub_1D785CBDC(uint64_t a1)
{
  uint64_t v2 = sub_1D785D024(&qword_1EA842058, type metadata accessor for LAError);
  return MEMORY[0x1F40E44A8](a1, v2);
}

uint64_t sub_1D785CC48(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_1D785D024(&qword_1EA842058, type metadata accessor for LAError);
  id v5 = a1;
  return MEMORY[0x1F40E4498](v5, a2, v4);
}

uint64_t sub_1D785CCD8()
{
  id v1 = *v0;
  uint64_t v2 = sub_1D7A9C968();

  return v2;
}

uint64_t sub_1D785CD10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1D785D024(&qword_1EA842058, type metadata accessor for LAError);
  return MEMORY[0x1F40E44D8](a1, a2, v4);
}

uint64_t sub_1D785CD8C()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D785CDF0(uint64_t a1)
{
  uint64_t v2 = sub_1D785D024(&qword_1EA841FE0, type metadata accessor for URLFileProtection);
  uint64_t v3 = sub_1D785D024(&qword_1EA841FE8, type metadata accessor for URLFileProtection);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t sub_1D785CEAC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1D7A9BFC8();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1D785CED8(uint64_t a1)
{
  uint64_t v2 = sub_1D785D024(&qword_1EA842010, type metadata accessor for VNImageOption);
  uint64_t v3 = sub_1D785D024(&qword_1EA842018, type metadata accessor for VNImageOption);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t sub_1D785CF94()
{
  return sub_1D785D024(&qword_1EA841F70, type metadata accessor for VNImageOption);
}

uint64_t sub_1D785CFDC()
{
  return sub_1D785D024(&qword_1EA841F78, type metadata accessor for VNImageOption);
}

uint64_t sub_1D785D024(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D785D06C(uint64_t a1)
{
  uint64_t v2 = sub_1D785D024(&qword_1EA842000, type metadata accessor for VNBarcodeSymbology);
  uint64_t v3 = sub_1D785D024(&qword_1EA842008, type metadata accessor for VNBarcodeSymbology);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t sub_1D785D128()
{
  return sub_1D785D024(&qword_1EA841F80, type metadata accessor for VNBarcodeSymbology);
}

uint64_t sub_1D785D170()
{
  return sub_1D785D024(&qword_1EA841F88, type metadata accessor for VNBarcodeSymbology);
}

uint64_t sub_1D785D1B8(uint64_t a1)
{
  uint64_t v2 = sub_1D785D024(&qword_1EA842060, type metadata accessor for LAError);
  return MEMORY[0x1F40E6E20](a1, v2);
}

uint64_t sub_1D785D224(uint64_t a1)
{
  uint64_t v2 = sub_1D785D024(&qword_1EA842060, type metadata accessor for LAError);
  return MEMORY[0x1F40E6E10](a1, v2);
}

uint64_t sub_1D785D294(uint64_t a1)
{
  uint64_t v2 = sub_1D785D024(&qword_1EA842058, type metadata accessor for LAError);
  return MEMORY[0x1F40E4480](a1, v2);
}

uint64_t sub_1D785D300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1D785D024(&qword_1EA842058, type metadata accessor for LAError);
  return MEMORY[0x1F40E44B8](a1, a2, a3, v6);
}

uint64_t sub_1D785D384@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_1D7A9BF98();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1D785D3CC(uint64_t a1)
{
  uint64_t v2 = sub_1D785D024(&qword_1EA841FF0, type metadata accessor for URLResourceKey);
  uint64_t v3 = sub_1D785D024(&qword_1EA841FF8, type metadata accessor for URLResourceKey);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t sub_1D785D488(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = sub_1D7A9BFC8();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1D785D4CC()
{
  sub_1D7A9BFC8();
  sub_1D7A9C0B8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D785D520()
{
  sub_1D7A9BFC8();
  sub_1D7A9D5D8();
  sub_1D7A9C0B8();
  uint64_t v0 = sub_1D7A9D628();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1D785D594()
{
  uint64_t v0 = sub_1D7A9BFC8();
  uint64_t v2 = v1;
  if (v0 == sub_1D7A9BFC8() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = sub_1D7A9D358();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_1D785D620()
{
  return sub_1D785D024(&qword_1EA841F90, type metadata accessor for VNBarcodeSymbology);
}

uint64_t sub_1D785D668()
{
  return sub_1D785D024(&qword_1EA841F98, type metadata accessor for URLResourceKey);
}

uint64_t sub_1D785D6B0()
{
  return sub_1D785D024(&qword_1EA841FA0, type metadata accessor for URLResourceKey);
}

uint64_t sub_1D785D6F8()
{
  return sub_1D785D024(&qword_1EA841FA8, type metadata accessor for URLResourceKey);
}

uint64_t sub_1D785D740()
{
  return sub_1D785D024(&qword_1EA841FB0, type metadata accessor for URLFileProtection);
}

uint64_t sub_1D785D788()
{
  return sub_1D785D024(&qword_1EA841FB8, type metadata accessor for URLFileProtection);
}

uint64_t sub_1D785D7D0()
{
  return sub_1D785D024(&qword_1EA841FC0, type metadata accessor for URLFileProtection);
}

uint64_t sub_1D785D818()
{
  return sub_1D785D024((unint64_t *)&qword_1EA841FC8, type metadata accessor for CFString);
}

uint64_t sub_1D785D860()
{
  return sub_1D785D024(&qword_1EBDF9DC0, type metadata accessor for CFString);
}

uint64_t sub_1D785D8A8()
{
  return sub_1D785D024(&qword_1EA841FD8, type metadata accessor for VNImageOption);
}

unint64_t sub_1D785D8F0()
{
  unint64_t result = qword_1EA842020;
  if (!qword_1EA842020)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA842020);
  }
  return result;
}

uint64_t sub_1D785D944(uint64_t a1)
{
  return a1;
}

uint64_t sub_1D785D98C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1D785D9E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA842028);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_1D785DA98(uint64_t a1, void (*a2)(void, void, void, void, void, void))
{
  return a1;
}

uint64_t *sub_1D785DAD8(uint64_t *a1)
{
  return a1;
}

uint64_t sub_1D785DB2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9)
{
  if (a9)
  {
    j__swift_unknownObjectRelease(a3, a4, a5, a6, a7, a8 & 1);
    return swift_unknownObjectRelease();
  }
  return result;
}

void type metadata accessor for MADownloadResult(uint64_t a1)
{
}

void type metadata accessor for Code(uint64_t a1)
{
}

void type metadata accessor for SecPolicy(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for DocumentDrift(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for DocumentDrift(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

uint64_t sub_1D785DC28()
{
  return sub_1D785D024(&qword_1EA842050, type metadata accessor for Code);
}

uint64_t sub_1D785DC70()
{
  return sub_1D785D024(&qword_1EA842058, type metadata accessor for LAError);
}

void type metadata accessor for LAError(uint64_t a1)
{
}

void sub_1D785DCCC(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_1D785DD14()
{
  return sub_1D785D024(&qword_1EA842060, type metadata accessor for LAError);
}

uint64_t sub_1D785DD5C()
{
  return sub_1D785D024(&qword_1EA842068, type metadata accessor for LAError);
}

uint64_t sub_1D785DDA4()
{
  return sub_1D785D024(&qword_1EA842070, type metadata accessor for LAError);
}

uint64_t sub_1D785DDEC()
{
  return sub_1D785D024((unint64_t *)&qword_1EA842078, type metadata accessor for Code);
}

uint64_t sub_1D785DE34()
{
  return sub_1D785D024(&qword_1EA842080, type metadata accessor for Code);
}

unint64_t sub_1D785DE80()
{
  unint64_t result = qword_1EA842088;
  if (!qword_1EA842088)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA842088);
  }
  return result;
}

uint64_t sub_1D785DED4()
{
  return sub_1D785D024(&qword_1EA842090, type metadata accessor for LAError);
}

uint64_t sub_1D785DF1C()
{
  return sub_1D785D024(&qword_1EA842098, type metadata accessor for LAError);
}

uint64_t static ISO18013JumboPackage.supportedJumboPackageVersion.getter()
{
  return 0x2E312D6F626D754ALL;
}

uint64_t ISO18013JumboPackage.version.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ISO18013JumboPackage.packages.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ISO18013JumboPackage.init(version:packages:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

void ISO18013JumboPackage.init(version:packages:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  sub_1D7A9B3F8();
  swift_allocObject();
  sub_1D7A9B3E8();
  uint64_t v9 = sub_1D78603A4(a3);
  if (v4)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    __int16 v14 = 0;
    id v10 = v4;
    unint64_t v11 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v4, 0, 0xE000000000000000, &v14, 0, v11, 0xD000000000000068, 0x80000001D7ABD610, v12, 0xD000000000000017, 0x80000001D7ABD680, 33);
    swift_willThrow();
  }
  else
  {
    uint64_t v13 = v9;
    swift_bridgeObjectRelease();
    swift_release();
    *a4 = a1;
    a4[1] = a2;
    a4[2] = v13;
  }
}

BOOL sub_1D785E14C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t _s13CoreIDVShared11SESKeystoreC15AttestationOIDsO9hashValueSivg_0()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D785E1AC()
{
  return sub_1D7A9D5E8();
}

uint64_t sub_1D785E1D8()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D785E21C()
{
  if (*v0) {
    return 0x736567616B636170;
  }
  else {
    return 0x6E6F6973726576;
  }
}

uint64_t sub_1D785E258@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1D7860D5C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D785E280()
{
  return 0;
}

void sub_1D785E28C(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1D785E298(uint64_t a1)
{
  unint64_t v2 = sub_1D78605DC();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1D785E2D4(uint64_t a1)
{
  unint64_t v2 = sub_1D78605DC();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t ISO18013JumboPackage.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA842170);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7, v8, v9, v10, v11, v12, v13);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D78605DC();
  sub_1D7A9D6A8();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  LOBYTE(v27) = 0;
  uint64_t v16 = sub_1D7A9D0F8();
  uint64_t v19 = v16;
  uint64_t v20 = v17;
  BOOL v21 = v16 == 0x2E312D6F626D754ALL && v17 == 0xE900000000000030;
  if (v21 || (sub_1D7A9D358() & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA842180);
    char v29 = 1;
    sub_1D7860680();
    swift_bridgeObjectRetain();
    sub_1D7A9D148();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v5);
    uint64_t v26 = v27;
    *a2 = v19;
    a2[1] = v20;
    a2[2] = v26;
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v27 = 0;
    unint64_t v28 = 0xE000000000000000;
    swift_bridgeObjectRetain();
    sub_1D7A9CC48();
    sub_1D7A9C128();
    sub_1D7A9C128();
    swift_bridgeObjectRelease();
    sub_1D7A9C128();
    sub_1D7A9C128();
    sub_1D7A9C128();
    uint64_t v22 = v27;
    uint64_t v23 = v28;
    LOWORD(v27) = 398;
    unint64_t v24 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, v22, v23, (__int16 *)&v27, 0, v24, 0xD000000000000068, 0x80000001D7ABD610, v25, 0x6F72662874696E69, 0xEB00000000293A6DLL, 49);
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return swift_bridgeObjectRelease();
}

uint64_t ISO18013JumboPackage.encode(to:)(void *a1)
{
  uint64_t v3 = sub_1D7A9B418();
  uint64_t v47 = *(void *)(v3 - 8);
  uint64_t v48 = v3;
  MEMORY[0x1F4188790](v3, v4, v5, v6, v7, v8, v9, v10);
  v46 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA842198);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12, v14, v15, v16, v17, v18, v19, v20);
  uint64_t v22 = (char *)&v41 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = *(void *)(v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D78605DC();
  uint64_t v23 = v12;
  sub_1D7A9D6E8();
  char v52 = 0;
  unint64_t v24 = v22;
  uint64_t v25 = v49;
  sub_1D7A9D1D8();
  if (v25) {
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v22, v12);
  }
  uint64_t v27 = v48;
  uint64_t v49 = v13;
  uint64_t v50 = MEMORY[0x1E4FBC860];
  uint64_t v28 = v45;
  uint64_t v29 = *(void *)(v45 + 16);
  if (v29)
  {
    v42 = v22;
    uint64_t v43 = 0;
    uint64_t v44 = v12;
    v30 = self;
    swift_bridgeObjectRetain_n();
    uint64_t v31 = (unint64_t *)(v28 + 40);
    do
    {
      uint64_t v32 = *(v31 - 1);
      unint64_t v33 = *v31;
      sub_1D7860790(v32, *v31);
      v34 = (void *)sub_1D7A9AFF8();
      id v35 = objc_msgSend(v30, sel_cborWithEncodedTag24Data_, v34);
      sub_1D78607E8(v32, v33);

      if (v35)
      {
        MEMORY[0x1D947B060]();
        if (*(void *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          sub_1D7A9C368();
        }
        sub_1D7A9C3A8();
        sub_1D7A9C338();
      }
      v31 += 2;
      --v29;
    }
    while (v29);
    swift_bridgeObjectRelease();
    uint64_t v36 = v48;
    uint64_t v23 = v44;
    unint64_t v24 = v42;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v36 = v27;
  }
  swift_bridgeObjectRelease();
  sub_1D7860840();
  v37 = (void *)sub_1D7A9C2F8();
  swift_bridgeObjectRelease();
  id v38 = objc_msgSend(self, sel_cborWithArray_, v37);

  v39 = v46;
  sub_1D7A9B408();
  char v51 = 1;
  sub_1D7860880();
  sub_1D7A9D228();
  uint64_t v40 = v49;
  (*(void (**)(char *, uint64_t))(v47 + 8))(v39, v36);
  return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v24, v23);
}

uint64_t sub_1D785EAC8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return ISO18013JumboPackage.init(from:)(a1, a2);
}

uint64_t sub_1D785EAE0(void *a1)
{
  return ISO18013JumboPackage.encode(to:)(a1);
}

unint64_t sub_1D785EAF8(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF8670);
  uint64_t v2 = sub_1D7A9CFF8();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1D78614F8(v6, (uint64_t)v12, &qword_1EBDF8C10);
    unint64_t result = sub_1D7A186B0((uint64_t)v12);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(unsigned char *)(v3[6] + result) = v12[0];
    unint64_t result = (unint64_t)sub_1D7860E50(&v13, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v9 = v3[2];
    BOOL v10 = __OFADD__(v9, 1);
    uint64_t v11 = v9 + 1;
    if (v10) {
      goto LABEL_11;
    }
    v3[2] = v11;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1D785EC20(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF8670);
  uint64_t v2 = sub_1D7A9CFF8();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1D78614F8(v6, (uint64_t)v13, &qword_1EBDF8C10);
    char v7 = v13[0];
    unint64_t result = sub_1D7A18740(v13[0]);
    if (v9) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(unsigned char *)(v3[6] + result) = v7;
    unint64_t result = (unint64_t)sub_1D7860E50(&v14, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1D785ED50(uint64_t a1)
{
  return sub_1D785EDF8(a1, &qword_1EA842248);
}

unint64_t sub_1D785ED5C(uint64_t a1)
{
  return sub_1D785EDF8(a1, &qword_1EA842240);
}

unint64_t sub_1D785ED68(uint64_t a1)
{
  return sub_1D785EDF8(a1, &qword_1EA842238);
}

unint64_t sub_1D785ED74(uint64_t a1)
{
  return sub_1D785EDF8(a1, &qword_1EA842230);
}

unint64_t sub_1D785ED80(uint64_t a1)
{
  return sub_1D785EDF8(a1, &qword_1EA842228);
}

unint64_t sub_1D785ED8C(uint64_t a1)
{
  return sub_1D785EDF8(a1, &qword_1EA842220);
}

unint64_t sub_1D785ED98(uint64_t a1)
{
  return sub_1D785EDF8(a1, &qword_1EA842218);
}

unint64_t sub_1D785EDA4(uint64_t a1)
{
  return sub_1D785EDF8(a1, &qword_1EA842210);
}

unint64_t sub_1D785EDB0(uint64_t a1)
{
  return sub_1D785EDF8(a1, &qword_1EA8421D0);
}

unint64_t sub_1D785EDBC(uint64_t a1)
{
  return sub_1D785EDF8(a1, &qword_1EA842208);
}

unint64_t sub_1D785EDC8(uint64_t a1)
{
  return sub_1D785EDF8(a1, &qword_1EA842200);
}

unint64_t sub_1D785EDD4(uint64_t a1)
{
  return sub_1D785EDF8(a1, &qword_1EA8421F8);
}

unint64_t sub_1D785EDE0(uint64_t a1)
{
  return sub_1D785EDF8(a1, &qword_1EA8421D8);
}

unint64_t sub_1D785EDEC(uint64_t a1)
{
  return sub_1D785EDF8(a1, &qword_1EBDF93E0);
}

unint64_t sub_1D785EDF8(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v3 = (void *)sub_1D7A9CFF8();
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  uint64_t v5 = (_OWORD *)(a1 + 48);
  while (1)
  {
    uint64_t v6 = *((void *)v5 - 2);
    uint64_t v7 = *((void *)v5 - 1);
    long long v14 = *v5;
    swift_bridgeObjectRetain();
    swift_retain();
    unint64_t result = sub_1D7A18684(v6, v7);
    if (v9) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v10 = v6;
    v10[1] = v7;
    *(_OWORD *)(v3[7] + 16 * result) = v14;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v3[2] = v13;
    v5 += 2;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1D785EF20(uint64_t a1)
{
  return sub_1D785FC58(a1, &qword_1EA842308);
}

unint64_t sub_1D785EF2C(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8422F0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v4, v5, v6, v7, v8, v9, v10);
  BOOL v12 = (void *)((char *)v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(void *)(a1 + 16))
  {
    long long v14 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8422F8);
  uint64_t v13 = sub_1D7A9CFF8();
  long long v14 = (void *)v13;
  uint64_t v15 = *(void *)(a1 + 16);
  if (!v15)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v14;
  }
  uint64_t v16 = (uint64_t)v12 + *(int *)(v2 + 48);
  uint64_t v17 = v13 + 64;
  unint64_t v18 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v32[1] = a1;
  uint64_t v19 = a1 + v18;
  uint64_t v20 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_1D78614F8(v19, (uint64_t)v12, &qword_1EA8422F0);
    uint64_t v21 = *v12;
    uint64_t v22 = v12[1];
    unint64_t result = sub_1D7A18684(*v12, v22);
    if (v24) {
      break;
    }
    unint64_t v25 = result;
    *(void *)(v17 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v26 = (uint64_t *)(v14[6] + 16 * result);
    *uint64_t v26 = v21;
    v26[1] = v22;
    uint64_t v27 = v14[7];
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA842300);
    unint64_t result = sub_1D7861490(v16, v27 + *(void *)(*(void *)(v28 - 8) + 72) * v25);
    uint64_t v29 = v14[2];
    BOOL v30 = __OFADD__(v29, 1);
    uint64_t v31 = v29 + 1;
    if (v30) {
      goto LABEL_11;
    }
    v14[2] = v31;
    v19 += v20;
    if (!--v15)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1D785F118(uint64_t a1)
{
  return sub_1D785FC58(a1, &qword_1EA8422E8);
}

unint64_t sub_1D785F124(uint64_t a1)
{
  return sub_1D785F420(a1, &qword_1EA8422D0, &qword_1EA8422D8, (uint64_t (*)(void))type metadata accessor for ISO18013Package.Document, (uint64_t (*)(void))type metadata accessor for ISO18013Package.Document);
}

unint64_t sub_1D785F160(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8422C0);
  uint64_t v2 = (void *)sub_1D7A9CFF8();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *(v4 - 1);
    uint64_t v6 = *v4;
    uint64_t v7 = v4[1];
    uint64_t v8 = v4[2];
    uint64_t v10 = v4[3];
    uint64_t v9 = v4[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_1D7A18684(v5, v6);
    if (v12) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v13 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v13 = v5;
    v13[1] = v6;
    long long v14 = (uint64_t *)(v2[7] + 32 * result);
    *long long v14 = v7;
    v14[1] = v8;
    v14[2] = v10;
    v14[3] = v9;
    uint64_t v15 = v2[2];
    BOOL v16 = __OFADD__(v15, 1);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    v2[2] = v17;
    v4 += 6;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1D785F2A0(uint64_t a1)
{
  return sub_1D785F768(a1, &qword_1EBDF9668, &qword_1EBDF93B8, (uint64_t (*)(uint64_t *, unint64_t))sub_1D7860E50);
}

unint64_t sub_1D785F2C8(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF7928);
  uint64_t v2 = (void *)sub_1D7A9CFF8();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v5 = (uint64_t)*(v4 - 2);
    uint64_t v6 = (uint64_t)*(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    id v8 = v7;
    unint64_t result = sub_1D7A18684(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v11 = v5;
    v11[1] = v6;
    *(void *)(v2[7] + 8 * result) = v8;
    uint64_t v12 = v2[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1D785F3E4(uint64_t a1)
{
  return sub_1D785F420(a1, &qword_1EA8422B0, &qword_1EA8422B8, (uint64_t (*)(void))type metadata accessor for AnyCodable, (uint64_t (*)(void))type metadata accessor for AnyCodable);
}

unint64_t sub_1D785F420(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  id v38 = a4;
  v39 = a5;
  uint64_t v40 = a2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7, v9, v10, v11, v12, v13, v14, v15);
  uint64_t v17 = (uint64_t *)((char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(void *)(a1 + 16))
  {
    uint64_t v19 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v18 = sub_1D7A9CFF8();
  uint64_t v19 = (void *)v18;
  uint64_t v20 = *(void *)(a1 + 16);
  if (!v20)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v19;
  }
  uint64_t v21 = (uint64_t)v17 + *(int *)(v7 + 48);
  uint64_t v22 = v18 + 64;
  unint64_t v23 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v37 = a1;
  uint64_t v24 = a1 + v23;
  uint64_t v25 = *(void *)(v8 + 72);
  swift_retain();
  while (1)
  {
    sub_1D78614F8(v24, (uint64_t)v17, v40);
    uint64_t v27 = *v17;
    uint64_t v26 = v17[1];
    unint64_t result = sub_1D7A18684(*v17, v26);
    if (v29) {
      break;
    }
    unint64_t v30 = result;
    *(void *)(v22 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v31 = (uint64_t *)(v19[6] + 16 * result);
    *uint64_t v31 = v27;
    v31[1] = v26;
    uint64_t v32 = v19[7];
    uint64_t v33 = v38(0);
    unint64_t result = sub_1D7861428(v21, v32 + *(void *)(*(void *)(v33 - 8) + 72) * v30, v39);
    uint64_t v34 = v19[2];
    BOOL v35 = __OFADD__(v34, 1);
    uint64_t v36 = v34 + 1;
    if (v35) {
      goto LABEL_11;
    }
    v19[2] = v36;
    v24 += v25;
    if (!--v20)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1D785F610(uint64_t a1)
{
  return sub_1D785FC58(a1, &qword_1EA8422A8);
}

unint64_t sub_1D785F61C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF93D0);
  uint64_t v2 = (void *)sub_1D7A9CFF8();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_1D7A18684(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    void *v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1D785F740(uint64_t a1)
{
  return sub_1D785F768(a1, &qword_1EA842260, &qword_1EA842268, (uint64_t (*)(uint64_t *, unint64_t))sub_1D7860E50);
}

unint64_t sub_1D785F768(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t *, unint64_t))
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v8 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v7 = sub_1D7A9CFF8();
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  uint64_t v10 = v7 + 64;
  uint64_t v11 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1D78614F8(v11, (uint64_t)&v20, a3);
    uint64_t v12 = v20;
    uint64_t v13 = v21;
    unint64_t result = sub_1D7A18684(v20, v21);
    if (v15) {
      break;
    }
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v16 = (uint64_t *)(v8[6] + 16 * result);
    uint64_t *v16 = v12;
    v16[1] = v13;
    unint64_t result = a4(&v22, v8[7] + 32 * result);
    uint64_t v17 = v8[2];
    BOOL v18 = __OFADD__(v17, 1);
    uint64_t v19 = v17 + 1;
    if (v18) {
      goto LABEL_11;
    }
    v8[2] = v19;
    v11 += 48;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1D785F8A8(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA842298);
  uint64_t v2 = (void *)sub_1D7A9CFF8();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (_DWORD *)(a1 + 36);
  while (1)
  {
    char v5 = *((unsigned char *)v4 - 4);
    int v6 = *v4;
    unint64_t result = sub_1D7A18CC0(v5);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(unsigned char *)(v2[6] + result) = v5;
    *(_DWORD *)(v2[7] + 4 * result) = v6;
    uint64_t v9 = v2[2];
    BOOL v10 = __OFADD__(v9, 1);
    uint64_t v11 = v9 + 1;
    if (v10) {
      goto LABEL_11;
    }
    v2[2] = v11;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1D785F9AC(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA842288);
  uint64_t v2 = sub_1D7A9CFF8();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1D78614F8(v6, (uint64_t)&v13, &qword_1EA842290);
    uint64_t v7 = v13;
    unint64_t result = sub_1D7A18D48(v13);
    if (v9) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v7;
    unint64_t result = (unint64_t)sub_1D7860E50(&v14, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1D785FADC(uint64_t a1)
{
  return sub_1D786014C(a1, &qword_1EA842280, (uint64_t (*)(id))sub_1D7A18DDC);
}

unint64_t sub_1D785FAFC(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF93C8);
  uint64_t v2 = (void *)sub_1D7A9CFF8();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    unint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    sub_1D7861414(v5, v6);
    swift_bridgeObjectRetain();
    unint64_t result = sub_1D7A18E2C(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    BOOL v11 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    void *v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1D785FC24(uint64_t a1)
{
  return sub_1D785FFFC(a1, &qword_1EA842250, &qword_1EA842258, (uint64_t (*)(uint64_t))sub_1D7A18EA4);
}

unint64_t sub_1D785FC4C(uint64_t a1)
{
  return sub_1D785FC58(a1, &qword_1EA8421F0);
}

unint64_t sub_1D785FC58(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v3 = (void *)sub_1D7A9CFF8();
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  uint64_t v5 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v6 = *(v5 - 2);
    uint64_t v7 = *(v5 - 1);
    uint64_t v8 = *v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_1D7A18684(v6, v7);
    if (v10) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    BOOL v11 = (uint64_t *)(v3[6] + 16 * result);
    uint64_t *v11 = v6;
    v11[1] = v7;
    *(void *)(v3[7] + 8 * result) = v8;
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1D785FD70(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF93E8);
  uint64_t v2 = sub_1D7A9CFF8();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1D78614F8(v6, (uint64_t)v15, &qword_1EA8421E8);
    unint64_t result = sub_1D7A18C7C((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v9 = v3[6] + 40 * result;
    long long v10 = v15[0];
    long long v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)sub_1D7860E50(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1D785FEB4(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8421E0);
  uint64_t v2 = (void *)sub_1D7A9CFF8();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v5 = (uint64_t)*(v4 - 2);
    unint64_t v6 = (unint64_t)*(v4 - 1);
    uint64_t v7 = *v4;
    sub_1D7860790(v5, v6);
    id v8 = v7;
    unint64_t result = sub_1D7A18F78(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    long long v11 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v11 = v5;
    v11[1] = v6;
    *(void *)(v2[7] + 8 * result) = v8;
    uint64_t v12 = v2[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1D785FFD4(uint64_t a1)
{
  return sub_1D785FFFC(a1, &qword_1EBDF82A0, &qword_1EBDF8270, (uint64_t (*)(uint64_t))sub_1D7A19038);
}

unint64_t sub_1D785FFFC(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t))
{
  if (!*(void *)(a1 + 16))
  {
    id v8 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v7 = sub_1D7A9CFF8();
  id v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  uint64_t v10 = v7 + 64;
  uint64_t v11 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1D78614F8(v11, (uint64_t)&v18, a3);
    uint64_t v12 = v18;
    unint64_t result = a4(v18);
    if (v14) {
      break;
    }
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v8[6] + 8 * result) = v12;
    unint64_t result = (unint64_t)sub_1D7860E50(&v19, (_OWORD *)(v8[7] + 32 * result));
    uint64_t v15 = v8[2];
    BOOL v16 = __OFADD__(v15, 1);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    v8[2] = v17;
    v11 += 40;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1D786012C(uint64_t a1)
{
  return sub_1D786014C(a1, &qword_1EA8421C8, (uint64_t (*)(id))sub_1D7A18EA4);
}

unint64_t sub_1D786014C(uint64_t a1, uint64_t *a2, uint64_t (*a3)(id))
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v5 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v5 = (void *)sub_1D7A9CFF8();
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v5;
  }
  swift_retain();
  uint64_t v7 = (void **)(a1 + 40);
  while (1)
  {
    id v8 = *v7;
    id v9 = *(v7 - 1);
    id v10 = v8;
    unint64_t result = a3(v9);
    if (v12) {
      break;
    }
    *(void *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v13 = 8 * result;
    *(void *)(v5[6] + v13) = v9;
    *(void *)(v5[7] + v13) = v10;
    uint64_t v14 = v5[2];
    BOOL v15 = __OFADD__(v14, 1);
    uint64_t v16 = v14 + 1;
    if (v15) {
      goto LABEL_11;
    }
    v5[2] = v16;
    v7 += 2;
    if (!--v6)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1D7860264(uint64_t a1)
{
  if (a1 < 0)
  {
    uint64_t result = sub_1D7A9CF88();
    __break(1u);
  }
  else if (a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF8C10);
    uint64_t result = sub_1D7A9C388();
    *(void *)(result + 16) = a1;
  }
  else
  {
    return MEMORY[0x1E4FBC860];
  }
  return result;
}

uint64_t sub_1D7860308(uint64_t a1)
{
  if (a1 < 0)
  {
    uint64_t result = sub_1D7A9CF88();
    __break(1u);
  }
  else if (a1)
  {
    uint64_t result = sub_1D7A9C388();
    *(void *)(result + 16) = a1;
  }
  else
  {
    return MEMORY[0x1E4FBC860];
  }
  return result;
}

uint64_t sub_1D78603A4(uint64_t a1)
{
  uint64_t v2 = v1;
  int64_t v4 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x1E4FBC860];
  if (v4)
  {
    uint64_t v18 = MEMORY[0x1E4FBC860];
    sub_1D78AB508(0, v4, 0);
    uint64_t result = v18;
    uint64_t v6 = (uint64_t *)(a1 + 40);
    while (1)
    {
      int64_t v17 = v4;
      uint64_t v7 = result;
      uint64_t v8 = *v6;
      unint64_t v9 = v6[1];
      sub_1D7860790(*v6, v9);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA842310);
      sub_1D786155C();
      uint64_t v10 = sub_1D7A9B3C8();
      if (v2) {
        break;
      }
      uint64_t v12 = v10;
      uint64_t v13 = v11;
      sub_1D78607E8(v8, v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = v7;
      unint64_t v14 = *(void *)(v7 + 16);
      unint64_t v15 = *(void *)(v7 + 24);
      if (v14 >= v15 >> 1)
      {
        sub_1D78AB508(v15 > 1, v14 + 1, 1);
        uint64_t result = v7;
      }
      *(void *)(result + 16) = v14 + 1;
      uint64_t v16 = result + 16 * v14;
      *(void *)(v16 + 32) = v12;
      *(void *)(v16 + 40) = v13;
      v6 += 6;
      uint64_t v2 = 0;
      int64_t v4 = v17 - 1;
      if (v17 == 1) {
        return result;
      }
    }
    sub_1D78607E8(v8, v9);
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_1D7860544()
{
  unint64_t result = qword_1EBDF9570;
  if (!qword_1EBDF9570)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBDF9570);
  }
  return result;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_1D78605DC()
{
  unint64_t result = qword_1EA842178;
  if (!qword_1EA842178)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA842178);
  }
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

unint64_t sub_1D7860680()
{
  unint64_t result = qword_1EA842188;
  if (!qword_1EA842188)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA842180);
    sub_1D786073C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA842188);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

unint64_t sub_1D786073C()
{
  unint64_t result = qword_1EA842190;
  if (!qword_1EA842190)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA842190);
  }
  return result;
}

uint64_t sub_1D7860790(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }
  return swift_retain();
}

uint64_t sub_1D78607E8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

unint64_t sub_1D7860840()
{
  unint64_t result = qword_1EA8421A0;
  if (!qword_1EA8421A0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EA8421A0);
  }
  return result;
}

unint64_t sub_1D7860880()
{
  unint64_t result = qword_1EA8421A8;
  if (!qword_1EA8421A8)
  {
    sub_1D7A9B418();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8421A8);
  }
  return result;
}

uint64_t destroy for LogotypeDetails()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *_s13CoreIDVShared15LogotypeDetailsVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for LogotypeDetails(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for LogotypeDetails(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for LogotypeDetails(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LogotypeDetails(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ISO18013JumboPackage()
{
  return &type metadata for ISO18013JumboPackage;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ISO18013JumboPackage.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ISO18013JumboPackage.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D7860C08);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_1D7860C30(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_1D7860C38(unsigned char *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ISO18013JumboPackage.CodingKeys()
{
  return &type metadata for ISO18013JumboPackage.CodingKeys;
}

unint64_t sub_1D7860C58()
{
  unint64_t result = qword_1EA8421B0;
  if (!qword_1EA8421B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8421B0);
  }
  return result;
}

unint64_t sub_1D7860CB0()
{
  unint64_t result = qword_1EA8421B8;
  if (!qword_1EA8421B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8421B8);
  }
  return result;
}

unint64_t sub_1D7860D08()
{
  unint64_t result = qword_1EA8421C0;
  if (!qword_1EA8421C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8421C0);
  }
  return result;
}

uint64_t sub_1D7860D5C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000;
  if (v2 || (sub_1D7A9D358() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x736567616B636170 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_1D7A9D358();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

_OWORD *sub_1D7860E50(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

unint64_t sub_1D7860E60(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return MEMORY[0x1E4FBC868];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8422E0);
  int v3 = (void *)sub_1D7A9CFF8();
  uint64_t v5 = a1[4];
  uint64_t v4 = a1[5];
  unint64_t v6 = a1[6];
  unint64_t result = sub_1D7A18648(v5);
  if (v8)
  {
LABEL_7:
    __break(1u);
    return MEMORY[0x1E4FBC868];
  }
  unint64_t v9 = a1 + 9;
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v5;
    uint64_t v10 = (uint64_t *)(v3[7] + 16 * result);
    *uint64_t v10 = v4;
    v10[1] = v6;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      break;
    }
    v3[2] = v13;
    sub_1D7860790(v4, v6);
    if (!--v1) {
      return (unint64_t)v3;
    }
    uint64_t v5 = *(v9 - 2);
    uint64_t v4 = *(v9 - 1);
    unint64_t v6 = *v9;
    unint64_t result = sub_1D7A18648(v5);
    v9 += 3;
    if (v14) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_1D7860F64(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8422C8);
    int v3 = (void *)sub_1D7A9CFF8();
    for (i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      uint64_t v5 = *(i - 1);
      uint64_t v6 = *i;
      unint64_t result = sub_1D7A18648(v5);
      if (v8) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      uint64_t v9 = 8 * result;
      *(void *)(v3[6] + v9) = v5;
      *(void *)(v3[7] + v9) = v6;
      uint64_t v10 = v3[2];
      BOOL v11 = __OFADD__(v10, 1);
      uint64_t v12 = v10 + 1;
      if (v11) {
        goto LABEL_10;
      }
      v3[2] = v12;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC868];
  }
  return result;
}

unint64_t sub_1D786103C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x1E4FBC868];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8422A0);
  int v3 = (void *)sub_1D7A9CFF8();
  unsigned __int8 v4 = *(unsigned char *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  unint64_t result = sub_1D7A18C10(v4);
  if (v8)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  uint64_t v9 = (void *)(a1 + 72);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(unsigned char *)(v3[6] + result) = v4;
    uint64_t v10 = (void *)(v3[7] + 16 * result);
    *uint64_t v10 = v6;
    v10[1] = v5;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      break;
    }
    v3[2] = v13;
    if (!--v1) {
      goto LABEL_8;
    }
    char v14 = v9 + 3;
    unsigned __int8 v4 = *((unsigned char *)v9 - 16);
    uint64_t v6 = *(v9 - 1);
    uint64_t v15 = *v9;
    swift_bridgeObjectRetain();
    unint64_t result = sub_1D7A18C10(v4);
    uint64_t v9 = v14;
    uint64_t v5 = v15;
    if (v16) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_1D786114C(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA842270);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v4, v5, v6, v7, v8, v9, v10);
  BOOL v12 = (uint64_t *)((char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = *(void *)(a1 + 16);
  if (v13)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA842278);
    char v14 = (void *)sub_1D7A9CFF8();
    uint64_t v15 = (uint64_t)v12 + *(int *)(v2 + 48);
    uint64_t v16 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v17 = *(void *)(v3 + 72);
    while (1)
    {
      sub_1D78614F8(v16, (uint64_t)v12, &qword_1EA842270);
      uint64_t v18 = *v12;
      unint64_t result = sub_1D7A18648(*v12);
      if (v20) {
        break;
      }
      unint64_t v21 = result;
      *(void *)((char *)v14 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(void *)(v14[6] + 8 * result) = v18;
      uint64_t v22 = v14[7];
      uint64_t v23 = type metadata accessor for AnyCodable();
      unint64_t result = sub_1D7861428(v15, v22 + *(void *)(*(void *)(v23 - 8) + 72) * v21, (uint64_t (*)(void))type metadata accessor for AnyCodable);
      uint64_t v24 = v14[2];
      BOOL v25 = __OFADD__(v24, 1);
      uint64_t v26 = v24 + 1;
      if (v25) {
        goto LABEL_10;
      }
      v14[2] = v26;
      v16 += v17;
      if (!--v13) {
        return (unint64_t)v14;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC868];
  }
  return result;
}

unint64_t sub_1D7861310(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x1E4FBC868];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF8298);
  uint64_t v3 = (void *)sub_1D7A9CFF8();
  char v4 = *(unsigned char *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  unint64_t v6 = *(void *)(a1 + 48);
  unint64_t result = sub_1D7A19088(v4);
  if (v8)
  {
LABEL_7:
    __break(1u);
    return MEMORY[0x1E4FBC868];
  }
  uint64_t v9 = (unint64_t *)(a1 + 72);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(unsigned char *)(v3[6] + result) = v4;
    uint64_t v10 = (uint64_t *)(v3[7] + 16 * result);
    *uint64_t v10 = v5;
    v10[1] = v6;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      break;
    }
    v3[2] = v13;
    sub_1D7860790(v5, v6);
    if (!--v1) {
      return (unint64_t)v3;
    }
    char v4 = *((unsigned char *)v9 - 16);
    uint64_t v5 = *(v9 - 1);
    unint64_t v6 = *v9;
    unint64_t result = sub_1D7A19088(v4);
    v9 += 3;
    if (v14) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1D7861414(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x30) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1D7861428(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1D7861490(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA842300);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D78614F8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_1D786155C()
{
  unint64_t result = qword_1EA842318;
  if (!qword_1EA842318)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA842310);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA842318);
  }
  return result;
}

uint64_t sub_1D78615B8(uint64_t a1, unint64_t a2, unsigned __int16 *a3)
{
  uint64_t v4 = v3;
  uint64_t v49 = sub_1D7A9C7C8();
  uint64_t v51 = *(void *)(v49 - 8);
  MEMORY[0x1F4188790](v49, v8, v9, v10, v11, v12, v13, v14);
  uint64_t v48 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_1D7A9C7B8();
  uint64_t v47 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16, v17, v18, v19, v20, v21, v22, v23);
  uint64_t v24 = sub_1D7A9B708();
  MEMORY[0x1F4188790](v24 - 8, v25, v26, v27, v28, v29, v30, v31);
  int v50 = *a3;
  *(unsigned char *)(v4 + 40) = 0;
  uint64_t v32 = MEMORY[0x1E4FBC860];
  *(void *)(v4 + 48) = sub_1D785ED50(MEMORY[0x1E4FBC860]);
  *(void *)(v4 + 56) = sub_1D785ED5C(v32);
  *(void *)(v4 + 64) = sub_1D785ED68(v32);
  *(void *)(v4 + 72) = sub_1D785ED74(v32);
  *(void *)(v4 + 80) = sub_1D785ED80(v32);
  *(void *)(v4 + 88) = sub_1D785ED8C(v32);
  *(void *)(v4 + 96) = sub_1D785ED98(v32);
  *(void *)(v4 + 104) = sub_1D785EDA4(v32);
  *(void *)(v4 + 112) = sub_1D785EDB0(v32);
  *(void *)(v4 + 120) = sub_1D785EDBC(v32);
  *(void *)(v4 + 128) = sub_1D785EDC8(v32);
  *(void *)(v4 + 136) = sub_1D785EDD4(v32);
  uint64_t v45 = a1;
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  unint64_t v46 = sub_1D7865074();
  uint64_t v52 = 0;
  unint64_t v53 = 0xE000000000000000;
  swift_bridgeObjectRetain();
  sub_1D7A9CC48();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v52 = a1;
  unint64_t v53 = a2;
  sub_1D7A9C128();
  unint64_t v43 = v53;
  uint64_t v44 = v52;
  sub_1D7A9B6F8();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9408);
  uint64_t v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_1D7AA08E0;
  sub_1D7A9C7A8();
  uint64_t v52 = v33;
  uint64_t v42 = sub_1D78650B4((unint64_t *)&qword_1EBDF9DE0, MEMORY[0x1E4FBCC10]);
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9DD0);
  uint64_t v47 = sub_1D78650FC((unint64_t *)&qword_1EBDF9DD8, &qword_1EBDF9DD0);
  sub_1D7A9CBA8();
  unsigned int v40 = *MEMORY[0x1E4FBCC58];
  uint64_t v34 = *(void (**)(void))(v51 + 104);
  v51 += 104;
  v39 = (void (*)(char *, void, uint64_t))v34;
  uint64_t v36 = v48;
  uint64_t v35 = v49;
  v34(v48);
  *(void *)(v4 + 144) = sub_1D7A9C808();
  uint64_t v52 = v45;
  unint64_t v53 = a2;
  sub_1D7A9C128();
  sub_1D7A9B6F8();
  uint64_t v52 = MEMORY[0x1E4FBC860];
  sub_1D7A9CBA8();
  v39(v36, v40, v35);
  *(void *)(v4 + 32) = sub_1D7A9C808();
  *(_WORD *)(v4 + 152) = v50;
  return v4;
}

uint64_t sub_1D7861A58(void *a1)
{
  uint64_t v2 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v3 = swift_allocObject();
  swift_weakInit();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v2;
  *(void *)(v4 + 24) = v3;
  uint64_t v14 = sub_1D786514C;
  uint64_t v15 = v4;
  uint64_t v10 = MEMORY[0x1E4F143A8];
  uint64_t v11 = 1107296256;
  uint64_t v12 = sub_1D79899E4;
  uint64_t v13 = &block_descriptor;
  uint64_t v5 = _Block_copy(&v10);
  swift_retain();
  swift_release();
  objc_msgSend(a1, sel_setInvalidationHandler_, v5);
  _Block_release(v5);
  uint64_t v6 = swift_allocObject();
  swift_weakInit();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v2;
  *(void *)(v7 + 24) = v6;
  uint64_t v14 = sub_1D7864DF0;
  uint64_t v15 = v7;
  uint64_t v10 = MEMORY[0x1E4F143A8];
  uint64_t v11 = 1107296256;
  uint64_t v12 = sub_1D79899E4;
  uint64_t v13 = &block_descriptor_29;
  uint64_t v8 = _Block_copy(&v10);
  swift_retain();
  swift_release();
  objc_msgSend(a1, sel_setInterruptionHandler_, v8);
  _Block_release(v8);
  return swift_release();
}

uint64_t sub_1D7861C60()
{
  uint64_t v1 = *(NSObject **)(v0 + 32);
  uint64_t v2 = swift_allocObject();
  swift_weakInit();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = sub_1D7864E44;
  *(void *)(v3 + 24) = v2;
  v6[4] = sub_1D7864E5C;
  v6[5] = v3;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 1107296256;
  v6[2] = sub_1D792EC70;
  v6[3] = &block_descriptor_36;
  uint64_t v4 = _Block_copy(v6);
  swift_retain();
  swift_release();
  dispatch_sync(v1, v4);
  _Block_release(v4);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v1) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1D7861DB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1D7A9B5F8();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6, v7, v8, v9, v10, v11, v12);
  uint64_t v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v15 = __swift_project_value_buffer(v4, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v14, v15, v4);
  swift_retain_n();
  swift_retain_n();
  uint64_t v16 = sub_1D7A9B5D8();
  int v17 = sub_1D7A9C738();
  if (os_log_type_enabled(v16, (os_log_type_t)v17))
  {
    int v34 = v17;
    os_log_t v35 = v16;
    uint64_t v36 = a2;
    uint64_t v32 = a2 + 16;
    uint64_t v18 = swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    v40[0] = v33;
    *(_DWORD *)uint64_t v18 = 136315650;
    swift_beginAccess();
    uint64_t v19 = (void *)MEMORY[0x1D947D840](a1 + 16);
    uint64_t v39 = (uint64_t)v19;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9110);
    uint64_t v20 = sub_1D7A9C998();
    unint64_t v22 = v21;

    uint64_t v39 = sub_1D7923300(v20, v22, v40);
    sub_1D7A9C9E8();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12) = 1024;
    swift_beginAccess();
    uint64_t v23 = (void *)MEMORY[0x1D947D840](a1 + 16);
    if (v23)
    {
      uint64_t v24 = v23;
      unsigned int v25 = objc_msgSend(v23, sel_processIdentifier);
      swift_release();
    }
    else
    {
      swift_release();
      unsigned int v25 = -1;
    }
    unsigned int v38 = v25;
    sub_1D7A9C9E8();
    swift_release();
    *(_WORD *)(v18 + 18) = 2080;
    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      uint64_t v28 = *(void *)(Strong + 16);
      unint64_t v27 = *(void *)(Strong + 24);
      swift_bridgeObjectRetain();
      swift_release();
    }
    else
    {
      unint64_t v27 = 0xE90000000000003ELL;
      uint64_t v28 = 0x6E776F6E6B6E553CLL;
    }
    uint64_t v37 = sub_1D7923300(v28, v27, v40);
    sub_1D7A9C9E8();
    swift_release_n();
    swift_bridgeObjectRelease();
    os_log_t v29 = v35;
    _os_log_impl(&dword_1D7853000, v35, (os_log_type_t)v34, "CoreIDVShared (%s:%d: %s connection interrupted", (uint8_t *)v18, 0x1Cu);
    uint64_t v30 = v33;
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v30, -1, -1);
    MEMORY[0x1D947D740](v18, -1, -1);
  }
  else
  {

    swift_release_n();
    swift_release_n();
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1D7861C60();
    return swift_release();
  }
  return result;
}

uint64_t sub_1D78621E8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, BOOL *a5@<X8>)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = a3;
    *(void *)(v12 + 24) = a4;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *(void *)(v11 + 96);
    *(void *)(v11 + 96) = 0x8000000000000000;
    sub_1D78A044C((uint64_t)sub_1D7864CB0, v12, a1, a2, isUniquelyReferenced_nonNull_native);
    *(void *)(v11 + 96) = v14;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    uint64_t result = swift_release();
  }
  *a5 = v11 == 0;
  return result;
}

uint64_t sub_1D7862324@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, BOOL *a5@<X8>)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = a3;
    *(void *)(v12 + 24) = a4;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *(void *)(v11 + 64);
    *(void *)(v11 + 64) = 0x8000000000000000;
    sub_1D78A048C((uint64_t)sub_1D78651D8, v12, a1, a2, isUniquelyReferenced_nonNull_native);
    *(void *)(v11 + 64) = v14;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    uint64_t result = swift_release();
  }
  *a5 = v11 == 0;
  return result;
}

uint64_t sub_1D7862460@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_beginAccess();
    uint64_t v7 = sub_1D789EED0(a1, a2);
    uint64_t v9 = v8;
    swift_endAccess();
    uint64_t result = swift_release();
    if (v7) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v10 = 0;
  }
  *a3 = v7;
  a3[1] = v10;
  return result;
}

uint64_t sub_1D7862528@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, BOOL *a5@<X8>)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = a3;
    *(void *)(v12 + 24) = a4;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *(void *)(v11 + 72);
    *(void *)(v11 + 72) = 0x8000000000000000;
    sub_1D78A04CC((uint64_t)sub_1D7864CE8, v12, a1, a2, isUniquelyReferenced_nonNull_native);
    *(void *)(v11 + 72) = v14;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    uint64_t result = swift_release();
  }
  *a5 = v11 == 0;
  return result;
}

uint64_t sub_1D7862664@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_beginAccess();
    uint64_t v7 = sub_1D789EEE8(a1, a2);
    uint64_t v9 = v8;
    swift_endAccess();
    uint64_t result = swift_release();
    if (v7) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v10 = 0;
  }
  *a3 = v7;
  a3[1] = v10;
  return result;
}

uint64_t sub_1D786272C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, BOOL *a5@<X8>)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = a3;
    *(void *)(v12 + 24) = a4;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *(void *)(v11 + 88);
    *(void *)(v11 + 88) = 0x8000000000000000;
    sub_1D78A050C((uint64_t)sub_1D78651D8, v12, a1, a2, isUniquelyReferenced_nonNull_native);
    *(void *)(v11 + 88) = v14;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    uint64_t result = swift_release();
  }
  *a5 = v11 == 0;
  return result;
}

uint64_t sub_1D7862868@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_beginAccess();
    uint64_t v7 = sub_1D789EFF0(a1, a2);
    uint64_t v9 = v8;
    swift_endAccess();
    uint64_t result = swift_release();
    if (v7) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v10 = 0;
  }
  *a3 = v7;
  a3[1] = v10;
  return result;
}

uint64_t sub_1D7862930@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, BOOL *a5@<X8>)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = a3;
    *(void *)(v12 + 24) = a4;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *(void *)(v11 + 112);
    *(void *)(v11 + 112) = 0x8000000000000000;
    sub_1D78A054C((uint64_t)sub_1D7864D18, v12, a1, a2, isUniquelyReferenced_nonNull_native);
    *(void *)(v11 + 112) = v14;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    uint64_t result = swift_release();
  }
  *a5 = v11 == 0;
  return result;
}

uint64_t sub_1D7862A6C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_beginAccess();
    uint64_t v7 = sub_1D789F008(a1, a2);
    uint64_t v9 = v8;
    swift_endAccess();
    uint64_t result = swift_release();
    if (v7) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v10 = 0;
  }
  *a3 = v7;
  a3[1] = v10;
  return result;
}

uint64_t sub_1D7862B34()
{
  uint64_t v0 = sub_1D7A9B6C8();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0, v2, v3, v4, v5, v6, v7, v8);
  uint64_t v10 = (char *)&v177 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v188 = sub_1D7A9B708();
  uint64_t v11 = *(void *)(v188 - 8);
  MEMORY[0x1F4188790](v188, v12, v13, v14, v15, v16, v17, v18);
  v187 = (char *)&v177 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    return result;
  }
  uint64_t v21 = result;
  uint64_t v183 = v0;
  *(unsigned char *)(result + 40) = 1;
  LOWORD(aBlock) = *(_WORD *)(result + 152);
  unint64_t v22 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
  sub_1D7860544();
  id v184 = (id)swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000013, 0x80000001D7ABD9C0, (__int16 *)&aBlock, 0, v22, 0xD000000000000069, 0x80000001D7ABD9E0, v23, 0xD000000000000017, 0x80000001D7ABDA50, 418);
  v189 = (void *)v21;
  uint64_t v24 = *(void *)(v21 + 48);
  uint64_t v25 = *(void *)(v24 + 64);
  uint64_t v177 = v24 + 64;
  uint64_t v26 = 1 << *(unsigned char *)(v24 + 32);
  uint64_t v27 = -1;
  if (v26 < 64) {
    uint64_t v27 = ~(-1 << v26);
  }
  unint64_t v28 = v27 & v25;
  int64_t v178 = (unint64_t)(v26 + 63) >> 6;
  v179 = &v196;
  v186 = (void (**)(char *, uint64_t))(v1 + 8);
  v185 = (void (**)(char *, uint64_t))(v11 + 8);
  uint64_t v180 = v24;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v29 = 0;
  while (1)
  {
    if (v28)
    {
      unint64_t v30 = __clz(__rbit64(v28));
      v28 &= v28 - 1;
      unint64_t v31 = v30 | (v29 << 6);
      goto LABEL_6;
    }
    int64_t v40 = v29 + 1;
    uint64_t v41 = v189;
    if (__OFADD__(v29, 1))
    {
      __break(1u);
LABEL_181:
      __break(1u);
LABEL_182:
      __break(1u);
LABEL_183:
      __break(1u);
LABEL_184:
      __break(1u);
LABEL_185:
      __break(1u);
LABEL_186:
      __break(1u);
LABEL_187:
      __break(1u);
      goto LABEL_188;
    }
    uint64_t v42 = v183;
    if (v40 >= v178) {
      goto LABEL_24;
    }
    unint64_t v43 = *(void *)(v177 + 8 * v40);
    ++v29;
    if (!v43)
    {
      int64_t v29 = v40 + 1;
      if (v40 + 1 >= v178) {
        goto LABEL_24;
      }
      unint64_t v43 = *(void *)(v177 + 8 * v29);
      if (!v43)
      {
        int64_t v29 = v40 + 2;
        if (v40 + 2 >= v178) {
          goto LABEL_24;
        }
        unint64_t v43 = *(void *)(v177 + 8 * v29);
        if (!v43)
        {
          int64_t v29 = v40 + 3;
          if (v40 + 3 >= v178) {
            goto LABEL_24;
          }
          unint64_t v43 = *(void *)(v177 + 8 * v29);
          if (!v43) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v28 = (v43 - 1) & v43;
    unint64_t v31 = __clz(__rbit64(v43)) + (v29 << 6);
LABEL_6:
    uint64_t v32 = *(void *)(v180 + 56);
    uint64_t v33 = swift_allocObject();
    long long v181 = *(_OWORD *)(v32 + 16 * v31);
    *(_OWORD *)(v33 + 16) = v181;
    int v34 = (void *)swift_allocObject();
    v34[2] = sub_1D7864E64;
    v34[3] = v33;
    id v35 = v184;
    v34[4] = v184;
    v198 = sub_1D7864E6C;
    v199 = v34;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v195 = 1107296256;
    v196 = sub_1D79899E4;
    v197 = &block_descriptor_45;
    uint64_t v36 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    id v37 = v35;
    unsigned int v38 = v187;
    sub_1D7A9B6E8();
    uint64_t v193 = MEMORY[0x1E4FBC860];
    sub_1D78650B4((unint64_t *)&qword_1EBDF9D90, MEMORY[0x1E4FBCB00]);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9D98);
    sub_1D78650FC((unint64_t *)&qword_1EBDF9DA0, &qword_1EBDF9D98);
    uint64_t v39 = v183;
    sub_1D7A9CBA8();
    MEMORY[0x1D947B570](0, v38, v10, v36);
    _Block_release(v36);
    swift_release();
    (*v186)(v10, v39);
    (*v185)(v38, v188);
    uint64_t result = swift_release();
  }
  int64_t v44 = v40 + 4;
  if (v44 < v178)
  {
    unint64_t v43 = *(void *)(v177 + 8 * v44);
    if (!v43)
    {
      while (1)
      {
        int64_t v29 = v44 + 1;
        if (__OFADD__(v44, 1)) {
          break;
        }
        if (v29 >= v178) {
          goto LABEL_24;
        }
        unint64_t v43 = *(void *)(v177 + 8 * v29);
        ++v44;
        if (v43) {
          goto LABEL_23;
        }
      }
LABEL_188:
      __break(1u);
      goto LABEL_189;
    }
    int64_t v29 = v44;
    goto LABEL_23;
  }
LABEL_24:
  swift_release();
  swift_beginAccess();
  uint64_t v45 = v41[8];
  uint64_t v46 = *(void *)(v45 + 64);
  uint64_t v177 = v45 + 64;
  uint64_t v47 = 1 << *(unsigned char *)(v45 + 32);
  uint64_t v48 = -1;
  if (v47 < 64) {
    uint64_t v48 = ~(-1 << v47);
  }
  unint64_t v49 = v48 & v46;
  int64_t v178 = (unint64_t)(v47 + 63) >> 6;
  v179 = &v196;
  uint64_t v180 = v45;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v50 = 0;
  uint64_t v51 = v187;
  while (2)
  {
    if (v49)
    {
      unint64_t v52 = __clz(__rbit64(v49));
      v49 &= v49 - 1;
      unint64_t v53 = v52 | (v50 << 6);
LABEL_28:
      uint64_t v54 = *(void *)(v180 + 56);
      uint64_t v55 = swift_allocObject();
      long long v181 = *(_OWORD *)(v54 + 16 * v53);
      *(_OWORD *)(v55 + 16) = v181;
      v56 = (void *)swift_allocObject();
      v56[2] = sub_1D7864E64;
      v56[3] = v55;
      id v57 = v184;
      v56[4] = v184;
      v198 = sub_1D7864E6C;
      v199 = v56;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v195 = 1107296256;
      v196 = sub_1D79899E4;
      v197 = &block_descriptor_54;
      v58 = _Block_copy(&aBlock);
      id v59 = v57;
      swift_retain();
      swift_retain();
      sub_1D7A9B6E8();
      uint64_t v192 = MEMORY[0x1E4FBC860];
      sub_1D78650B4((unint64_t *)&qword_1EBDF9D90, MEMORY[0x1E4FBCB00]);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9D98);
      sub_1D78650FC((unint64_t *)&qword_1EBDF9DA0, &qword_1EBDF9D98);
      uint64_t v42 = v183;
      sub_1D7A9CBA8();
      MEMORY[0x1D947B570](0, v51, v10, v58);
      _Block_release(v58);
      swift_release();
      (*v186)(v10, v42);
      (*v185)(v51, v188);
      uint64_t result = swift_release();
      continue;
    }
    break;
  }
  int64_t v60 = v50 + 1;
  v61 = v189;
  if (__OFADD__(v50, 1)) {
    goto LABEL_181;
  }
  if (v60 < v178)
  {
    unint64_t v62 = *(void *)(v177 + 8 * v60);
    ++v50;
    if (!v62)
    {
      int64_t v50 = v60 + 1;
      if (v60 + 1 >= v178) {
        goto LABEL_46;
      }
      unint64_t v62 = *(void *)(v177 + 8 * v50);
      if (!v62)
      {
        int64_t v50 = v60 + 2;
        if (v60 + 2 >= v178) {
          goto LABEL_46;
        }
        unint64_t v62 = *(void *)(v177 + 8 * v50);
        if (!v62)
        {
          int64_t v50 = v60 + 3;
          if (v60 + 3 >= v178) {
            goto LABEL_46;
          }
          unint64_t v62 = *(void *)(v177 + 8 * v50);
          if (!v62)
          {
            int64_t v63 = v60 + 4;
            if (v63 >= v178) {
              goto LABEL_46;
            }
            unint64_t v62 = *(void *)(v177 + 8 * v63);
            if (!v62)
            {
              while (1)
              {
                int64_t v50 = v63 + 1;
                if (__OFADD__(v63, 1)) {
                  break;
                }
                if (v50 >= v178) {
                  goto LABEL_46;
                }
                unint64_t v62 = *(void *)(v177 + 8 * v50);
                ++v63;
                if (v62) {
                  goto LABEL_45;
                }
              }
LABEL_189:
              __break(1u);
              goto LABEL_190;
            }
            int64_t v50 = v63;
          }
        }
      }
    }
LABEL_45:
    unint64_t v49 = (v62 - 1) & v62;
    unint64_t v53 = __clz(__rbit64(v62)) + (v50 << 6);
    goto LABEL_28;
  }
LABEL_46:
  swift_release();
  swift_beginAccess();
  uint64_t v64 = v61[9];
  uint64_t v65 = *(void *)(v64 + 64);
  uint64_t v177 = v64 + 64;
  uint64_t v66 = 1 << *(unsigned char *)(v64 + 32);
  uint64_t v67 = -1;
  if (v66 < 64) {
    uint64_t v67 = ~(-1 << v66);
  }
  unint64_t v68 = v67 & v65;
  int64_t v178 = (unint64_t)(v66 + 63) >> 6;
  v179 = &v196;
  uint64_t v180 = v64;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v69 = 0;
  v182 = v10;
  v70 = v187;
  while (2)
  {
    if (v68)
    {
      unint64_t v71 = __clz(__rbit64(v68));
      v68 &= v68 - 1;
      unint64_t v72 = v71 | (v69 << 6);
LABEL_50:
      uint64_t v73 = *(void *)(v180 + 56);
      uint64_t v74 = swift_allocObject();
      long long v181 = *(_OWORD *)(v73 + 16 * v72);
      *(_OWORD *)(v74 + 16) = v181;
      v75 = (void *)swift_allocObject();
      v75[2] = sub_1D7864E64;
      v75[3] = v74;
      id v76 = v184;
      v75[4] = v184;
      v198 = sub_1D7864E6C;
      v199 = v75;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v195 = 1107296256;
      v196 = sub_1D79899E4;
      v197 = &block_descriptor_63;
      v77 = _Block_copy(&aBlock);
      id v78 = v76;
      swift_retain();
      swift_retain();
      sub_1D7A9B6E8();
      uint64_t v191 = MEMORY[0x1E4FBC860];
      sub_1D78650B4((unint64_t *)&qword_1EBDF9D90, MEMORY[0x1E4FBCB00]);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9D98);
      sub_1D78650FC((unint64_t *)&qword_1EBDF9DA0, &qword_1EBDF9D98);
      uint64_t v10 = v182;
      sub_1D7A9CBA8();
      MEMORY[0x1D947B570](0, v70, v10, v77);
      _Block_release(v77);
      swift_release();
      (*v186)(v10, v42);
      (*v185)(v70, v188);
      uint64_t result = swift_release();
      continue;
    }
    break;
  }
  int64_t v79 = v69 + 1;
  v80 = v189;
  if (__OFADD__(v69, 1)) {
    goto LABEL_182;
  }
  if (v79 < v178)
  {
    unint64_t v81 = *(void *)(v177 + 8 * v79);
    ++v69;
    if (!v81)
    {
      int64_t v69 = v79 + 1;
      if (v79 + 1 >= v178) {
        goto LABEL_68;
      }
      unint64_t v81 = *(void *)(v177 + 8 * v69);
      if (!v81)
      {
        int64_t v69 = v79 + 2;
        if (v79 + 2 >= v178) {
          goto LABEL_68;
        }
        unint64_t v81 = *(void *)(v177 + 8 * v69);
        if (!v81)
        {
          int64_t v69 = v79 + 3;
          if (v79 + 3 >= v178) {
            goto LABEL_68;
          }
          unint64_t v81 = *(void *)(v177 + 8 * v69);
          if (!v81)
          {
            int64_t v82 = v79 + 4;
            if (v82 >= v178) {
              goto LABEL_68;
            }
            unint64_t v81 = *(void *)(v177 + 8 * v82);
            if (!v81)
            {
              while (1)
              {
                int64_t v69 = v82 + 1;
                if (__OFADD__(v82, 1)) {
                  break;
                }
                if (v69 >= v178) {
                  goto LABEL_68;
                }
                unint64_t v81 = *(void *)(v177 + 8 * v69);
                ++v82;
                if (v81) {
                  goto LABEL_67;
                }
              }
LABEL_190:
              __break(1u);
              goto LABEL_191;
            }
            int64_t v69 = v82;
          }
        }
      }
    }
LABEL_67:
    unint64_t v68 = (v81 - 1) & v81;
    unint64_t v72 = __clz(__rbit64(v81)) + (v69 << 6);
    goto LABEL_50;
  }
LABEL_68:
  swift_release();
  uint64_t v83 = v80[10];
  uint64_t v84 = *(void *)(v83 + 64);
  uint64_t v177 = v83 + 64;
  uint64_t v85 = 1 << *(unsigned char *)(v83 + 32);
  uint64_t v86 = -1;
  if (v85 < 64) {
    uint64_t v86 = ~(-1 << v85);
  }
  unint64_t v87 = v86 & v84;
  int64_t v178 = (unint64_t)(v85 + 63) >> 6;
  v179 = &v196;
  uint64_t v180 = v83;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v88 = 0;
  v89 = v187;
  while (2)
  {
    if (v87)
    {
      unint64_t v90 = __clz(__rbit64(v87));
      v87 &= v87 - 1;
      unint64_t v91 = v90 | (v88 << 6);
LABEL_72:
      uint64_t v92 = *(void *)(v180 + 56);
      uint64_t v93 = swift_allocObject();
      long long v181 = *(_OWORD *)(v92 + 16 * v91);
      *(_OWORD *)(v93 + 16) = v181;
      v94 = (void *)swift_allocObject();
      v94[2] = sub_1D7864E64;
      v94[3] = v93;
      id v95 = v184;
      v94[4] = v184;
      v198 = sub_1D7864E6C;
      v199 = v94;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v195 = 1107296256;
      v196 = sub_1D79899E4;
      v197 = &block_descriptor_72;
      v96 = _Block_copy(&aBlock);
      id v97 = v95;
      swift_retain();
      swift_retain();
      sub_1D7A9B6E8();
      uint64_t v191 = MEMORY[0x1E4FBC860];
      sub_1D78650B4((unint64_t *)&qword_1EBDF9D90, MEMORY[0x1E4FBCB00]);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9D98);
      sub_1D78650FC((unint64_t *)&qword_1EBDF9DA0, &qword_1EBDF9D98);
      uint64_t v42 = v183;
      sub_1D7A9CBA8();
      MEMORY[0x1D947B570](0, v89, v10, v96);
      _Block_release(v96);
      swift_release();
      (*v186)(v10, v42);
      (*v185)(v89, v188);
      uint64_t result = swift_release();
      continue;
    }
    break;
  }
  int64_t v98 = v88 + 1;
  v99 = v189;
  if (__OFADD__(v88, 1)) {
    goto LABEL_183;
  }
  if (v98 < v178)
  {
    unint64_t v100 = *(void *)(v177 + 8 * v98);
    ++v88;
    if (!v100)
    {
      int64_t v88 = v98 + 1;
      if (v98 + 1 >= v178) {
        goto LABEL_90;
      }
      unint64_t v100 = *(void *)(v177 + 8 * v88);
      if (!v100)
      {
        int64_t v88 = v98 + 2;
        if (v98 + 2 >= v178) {
          goto LABEL_90;
        }
        unint64_t v100 = *(void *)(v177 + 8 * v88);
        if (!v100)
        {
          int64_t v88 = v98 + 3;
          if (v98 + 3 >= v178) {
            goto LABEL_90;
          }
          unint64_t v100 = *(void *)(v177 + 8 * v88);
          if (!v100)
          {
            int64_t v101 = v98 + 4;
            if (v101 >= v178) {
              goto LABEL_90;
            }
            unint64_t v100 = *(void *)(v177 + 8 * v101);
            if (!v100)
            {
              while (1)
              {
                int64_t v88 = v101 + 1;
                if (__OFADD__(v101, 1)) {
                  break;
                }
                if (v88 >= v178) {
                  goto LABEL_90;
                }
                unint64_t v100 = *(void *)(v177 + 8 * v88);
                ++v101;
                if (v100) {
                  goto LABEL_89;
                }
              }
LABEL_191:
              __break(1u);
              goto LABEL_192;
            }
            int64_t v88 = v101;
          }
        }
      }
    }
LABEL_89:
    unint64_t v87 = (v100 - 1) & v100;
    unint64_t v91 = __clz(__rbit64(v100)) + (v88 << 6);
    goto LABEL_72;
  }
LABEL_90:
  swift_release();
  swift_beginAccess();
  uint64_t v102 = v99[14];
  uint64_t v103 = *(void *)(v102 + 64);
  uint64_t v177 = v102 + 64;
  uint64_t v104 = 1 << *(unsigned char *)(v102 + 32);
  uint64_t v105 = -1;
  if (v104 < 64) {
    uint64_t v105 = ~(-1 << v104);
  }
  unint64_t v106 = v105 & v103;
  int64_t v178 = (unint64_t)(v104 + 63) >> 6;
  v179 = &v196;
  uint64_t v180 = v102;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v107 = 0;
  v108 = v187;
  while (2)
  {
    if (v106)
    {
      unint64_t v109 = __clz(__rbit64(v106));
      v106 &= v106 - 1;
      unint64_t v110 = v109 | (v107 << 6);
LABEL_94:
      uint64_t v111 = *(void *)(v180 + 56);
      uint64_t v112 = swift_allocObject();
      long long v181 = *(_OWORD *)(v111 + 16 * v110);
      *(_OWORD *)(v112 + 16) = v181;
      v113 = (void *)swift_allocObject();
      v113[2] = sub_1D7864E80;
      v113[3] = v112;
      id v114 = v184;
      v113[4] = v184;
      v198 = sub_1D7864EBC;
      v199 = v113;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v195 = 1107296256;
      v196 = sub_1D79899E4;
      v197 = &block_descriptor_81;
      v115 = _Block_copy(&aBlock);
      id v116 = v114;
      swift_retain();
      swift_retain();
      sub_1D7A9B6E8();
      uint64_t v190 = MEMORY[0x1E4FBC860];
      sub_1D78650B4((unint64_t *)&qword_1EBDF9D90, MEMORY[0x1E4FBCB00]);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9D98);
      sub_1D78650FC((unint64_t *)&qword_1EBDF9DA0, &qword_1EBDF9D98);
      uint64_t v10 = v182;
      sub_1D7A9CBA8();
      MEMORY[0x1D947B570](0, v108, v10, v115);
      _Block_release(v115);
      swift_release();
      (*v186)(v10, v42);
      (*v185)(v108, v188);
      uint64_t result = swift_release();
      continue;
    }
    break;
  }
  int64_t v117 = v107 + 1;
  v118 = v189;
  if (__OFADD__(v107, 1)) {
    goto LABEL_184;
  }
  if (v117 < v178)
  {
    unint64_t v119 = *(void *)(v177 + 8 * v117);
    ++v107;
    if (!v119)
    {
      int64_t v107 = v117 + 1;
      if (v117 + 1 >= v178) {
        goto LABEL_112;
      }
      unint64_t v119 = *(void *)(v177 + 8 * v107);
      if (!v119)
      {
        int64_t v107 = v117 + 2;
        if (v117 + 2 >= v178) {
          goto LABEL_112;
        }
        unint64_t v119 = *(void *)(v177 + 8 * v107);
        if (!v119)
        {
          int64_t v107 = v117 + 3;
          if (v117 + 3 >= v178) {
            goto LABEL_112;
          }
          unint64_t v119 = *(void *)(v177 + 8 * v107);
          if (!v119)
          {
            int64_t v120 = v117 + 4;
            if (v120 >= v178) {
              goto LABEL_112;
            }
            unint64_t v119 = *(void *)(v177 + 8 * v120);
            if (!v119)
            {
              while (1)
              {
                int64_t v107 = v120 + 1;
                if (__OFADD__(v120, 1)) {
                  break;
                }
                if (v107 >= v178) {
                  goto LABEL_112;
                }
                unint64_t v119 = *(void *)(v177 + 8 * v107);
                ++v120;
                if (v119) {
                  goto LABEL_111;
                }
              }
LABEL_192:
              __break(1u);
              goto LABEL_193;
            }
            int64_t v107 = v120;
          }
        }
      }
    }
LABEL_111:
    unint64_t v106 = (v119 - 1) & v119;
    unint64_t v110 = __clz(__rbit64(v119)) + (v107 << 6);
    goto LABEL_94;
  }
LABEL_112:
  swift_release();
  uint64_t v121 = v118[15];
  uint64_t v122 = *(void *)(v121 + 64);
  uint64_t v177 = v121 + 64;
  uint64_t v123 = 1 << *(unsigned char *)(v121 + 32);
  uint64_t v124 = -1;
  if (v123 < 64) {
    uint64_t v124 = ~(-1 << v123);
  }
  unint64_t v125 = v124 & v122;
  int64_t v178 = (unint64_t)(v123 + 63) >> 6;
  v179 = &v196;
  uint64_t v180 = v121;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v126 = 0;
  v127 = v187;
  while (2)
  {
    if (v125)
    {
      unint64_t v128 = __clz(__rbit64(v125));
      v125 &= v125 - 1;
      unint64_t v129 = v128 | (v126 << 6);
LABEL_116:
      uint64_t v130 = *(void *)(v180 + 56);
      uint64_t v131 = swift_allocObject();
      long long v181 = *(_OWORD *)(v130 + 16 * v129);
      *(_OWORD *)(v131 + 16) = v181;
      uint64_t v132 = swift_allocObject();
      *(void *)(v132 + 16) = sub_1D7864EEC;
      *(void *)(v132 + 24) = v131;
      v198 = sub_1D7864F24;
      v199 = (void *)v132;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v195 = 1107296256;
      v196 = sub_1D79899E4;
      v197 = &block_descriptor_90;
      v133 = _Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      sub_1D7A9B6E8();
      uint64_t v190 = MEMORY[0x1E4FBC860];
      sub_1D78650B4((unint64_t *)&qword_1EBDF9D90, MEMORY[0x1E4FBCB00]);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9D98);
      sub_1D78650FC((unint64_t *)&qword_1EBDF9DA0, &qword_1EBDF9D98);
      uint64_t v10 = v182;
      sub_1D7A9CBA8();
      MEMORY[0x1D947B570](0, v127, v10, v133);
      _Block_release(v133);
      swift_release();
      (*v186)(v10, v42);
      (*v185)(v127, v188);
      uint64_t result = swift_release();
      continue;
    }
    break;
  }
  int64_t v134 = v126 + 1;
  v135 = v189;
  if (__OFADD__(v126, 1)) {
    goto LABEL_185;
  }
  if (v134 < v178)
  {
    unint64_t v136 = *(void *)(v177 + 8 * v134);
    ++v126;
    if (!v136)
    {
      int64_t v126 = v134 + 1;
      if (v134 + 1 >= v178) {
        goto LABEL_134;
      }
      unint64_t v136 = *(void *)(v177 + 8 * v126);
      if (!v136)
      {
        int64_t v126 = v134 + 2;
        if (v134 + 2 >= v178) {
          goto LABEL_134;
        }
        unint64_t v136 = *(void *)(v177 + 8 * v126);
        if (!v136)
        {
          int64_t v126 = v134 + 3;
          if (v134 + 3 >= v178) {
            goto LABEL_134;
          }
          unint64_t v136 = *(void *)(v177 + 8 * v126);
          if (!v136)
          {
            int64_t v137 = v134 + 4;
            if (v137 >= v178) {
              goto LABEL_134;
            }
            unint64_t v136 = *(void *)(v177 + 8 * v137);
            if (!v136)
            {
              while (1)
              {
                int64_t v126 = v137 + 1;
                if (__OFADD__(v137, 1)) {
                  break;
                }
                if (v126 >= v178) {
                  goto LABEL_134;
                }
                unint64_t v136 = *(void *)(v177 + 8 * v126);
                ++v137;
                if (v136) {
                  goto LABEL_133;
                }
              }
LABEL_193:
              __break(1u);
              goto LABEL_194;
            }
            int64_t v126 = v137;
          }
        }
      }
    }
LABEL_133:
    unint64_t v125 = (v136 - 1) & v136;
    unint64_t v129 = __clz(__rbit64(v136)) + (v126 << 6);
    goto LABEL_116;
  }
LABEL_134:
  swift_release();
  uint64_t v138 = v135[16];
  uint64_t v139 = *(void *)(v138 + 64);
  uint64_t v177 = v138 + 64;
  uint64_t v140 = 1 << *(unsigned char *)(v138 + 32);
  uint64_t v141 = -1;
  if (v140 < 64) {
    uint64_t v141 = ~(-1 << v140);
  }
  unint64_t v142 = v141 & v139;
  int64_t v178 = (unint64_t)(v140 + 63) >> 6;
  v179 = &v196;
  uint64_t v180 = v138;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v143 = 0;
  v144 = v187;
  while (2)
  {
    if (v142)
    {
      unint64_t v145 = __clz(__rbit64(v142));
      v142 &= v142 - 1;
      unint64_t v146 = v145 | (v143 << 6);
LABEL_138:
      uint64_t v147 = *(void *)(v180 + 56);
      uint64_t v148 = swift_allocObject();
      long long v181 = *(_OWORD *)(v147 + 16 * v146);
      *(_OWORD *)(v148 + 16) = v181;
      v149 = (void *)swift_allocObject();
      v149[2] = sub_1D7864E64;
      v149[3] = v148;
      id v150 = v184;
      v149[4] = v184;
      v198 = sub_1D7864FD4;
      v199 = v149;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v195 = 1107296256;
      v196 = sub_1D79899E4;
      v197 = &block_descriptor_99;
      v151 = _Block_copy(&aBlock);
      id v152 = v150;
      swift_retain();
      swift_retain();
      sub_1D7A9B6E8();
      uint64_t v190 = MEMORY[0x1E4FBC860];
      sub_1D78650B4((unint64_t *)&qword_1EBDF9D90, MEMORY[0x1E4FBCB00]);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9D98);
      sub_1D78650FC((unint64_t *)&qword_1EBDF9DA0, &qword_1EBDF9D98);
      uint64_t v153 = v183;
      sub_1D7A9CBA8();
      MEMORY[0x1D947B570](0, v144, v10, v151);
      _Block_release(v151);
      swift_release();
      (*v186)(v10, v153);
      (*v185)(v144, v188);
      uint64_t result = swift_release();
      continue;
    }
    break;
  }
  int64_t v154 = v143 + 1;
  v155 = v189;
  if (__OFADD__(v143, 1)) {
    goto LABEL_186;
  }
  if (v154 < v178)
  {
    unint64_t v156 = *(void *)(v177 + 8 * v154);
    ++v143;
    if (!v156)
    {
      int64_t v143 = v154 + 1;
      if (v154 + 1 >= v178) {
        goto LABEL_156;
      }
      unint64_t v156 = *(void *)(v177 + 8 * v143);
      if (!v156)
      {
        int64_t v143 = v154 + 2;
        if (v154 + 2 >= v178) {
          goto LABEL_156;
        }
        unint64_t v156 = *(void *)(v177 + 8 * v143);
        if (!v156)
        {
          int64_t v143 = v154 + 3;
          if (v154 + 3 >= v178) {
            goto LABEL_156;
          }
          unint64_t v156 = *(void *)(v177 + 8 * v143);
          if (!v156)
          {
            int64_t v157 = v154 + 4;
            if (v157 >= v178) {
              goto LABEL_156;
            }
            unint64_t v156 = *(void *)(v177 + 8 * v157);
            if (!v156)
            {
              while (1)
              {
                int64_t v143 = v157 + 1;
                if (__OFADD__(v157, 1)) {
                  break;
                }
                if (v143 >= v178) {
                  goto LABEL_156;
                }
                unint64_t v156 = *(void *)(v177 + 8 * v143);
                ++v157;
                if (v156) {
                  goto LABEL_155;
                }
              }
LABEL_194:
              __break(1u);
              goto LABEL_195;
            }
            int64_t v143 = v157;
          }
        }
      }
    }
LABEL_155:
    unint64_t v142 = (v156 - 1) & v156;
    unint64_t v146 = __clz(__rbit64(v156)) + (v143 << 6);
    goto LABEL_138;
  }
LABEL_156:
  swift_release();
  uint64_t v158 = v155[17];
  uint64_t v159 = *(void *)(v158 + 64);
  uint64_t v177 = v158 + 64;
  uint64_t v160 = 1 << *(unsigned char *)(v158 + 32);
  uint64_t v161 = -1;
  if (v160 < 64) {
    uint64_t v161 = ~(-1 << v160);
  }
  unint64_t v162 = v161 & v159;
  int64_t v178 = (unint64_t)(v160 + 63) >> 6;
  v179 = &v196;
  uint64_t v180 = v158;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v163 = 0;
  v164 = v187;
  while (2)
  {
    if (v162)
    {
      unint64_t v165 = __clz(__rbit64(v162));
      v162 &= v162 - 1;
      unint64_t v166 = v165 | (v163 << 6);
LABEL_160:
      uint64_t v167 = *(void *)(v180 + 56);
      uint64_t v168 = swift_allocObject();
      long long v181 = *(_OWORD *)(v167 + 16 * v166);
      *(_OWORD *)(v168 + 16) = v181;
      uint64_t v169 = swift_allocObject();
      *(void *)(v169 + 16) = sub_1D7865010;
      *(void *)(v169 + 24) = v168;
      v198 = sub_1D7865048;
      v199 = (void *)v169;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v195 = 1107296256;
      v196 = sub_1D79899E4;
      v197 = &block_descriptor_108;
      v170 = _Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      sub_1D7A9B6E8();
      uint64_t v190 = MEMORY[0x1E4FBC860];
      sub_1D78650B4((unint64_t *)&qword_1EBDF9D90, MEMORY[0x1E4FBCB00]);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9D98);
      sub_1D78650FC((unint64_t *)&qword_1EBDF9DA0, &qword_1EBDF9D98);
      uint64_t v171 = v183;
      sub_1D7A9CBA8();
      MEMORY[0x1D947B570](0, v164, v10, v170);
      _Block_release(v170);
      swift_release();
      (*v186)(v10, v171);
      (*v185)(v164, v188);
      uint64_t result = swift_release();
      continue;
    }
    break;
  }
  int64_t v172 = v163 + 1;
  v173 = v189;
  if (__OFADD__(v163, 1)) {
    goto LABEL_187;
  }
  if (v172 >= v178)
  {
LABEL_178:
    swift_release();
    uint64_t v176 = MEMORY[0x1E4FBC868];
    v173[6] = MEMORY[0x1E4FBC868];
    swift_bridgeObjectRelease();
    v173[8] = v176;
    swift_bridgeObjectRelease();
    v173[9] = v176;
    swift_bridgeObjectRelease();
    v173[10] = v176;
    swift_bridgeObjectRelease();
    v173[14] = v176;
    swift_bridgeObjectRelease();
    v173[15] = v176;
    swift_bridgeObjectRelease();
    v173[16] = v176;
    swift_bridgeObjectRelease();
    v173[17] = v176;
    swift_bridgeObjectRelease();

    return swift_release();
  }
  unint64_t v174 = *(void *)(v177 + 8 * v172);
  ++v163;
  if (v174) {
    goto LABEL_177;
  }
  int64_t v163 = v172 + 1;
  if (v172 + 1 >= v178) {
    goto LABEL_178;
  }
  unint64_t v174 = *(void *)(v177 + 8 * v163);
  if (v174) {
    goto LABEL_177;
  }
  int64_t v163 = v172 + 2;
  if (v172 + 2 >= v178) {
    goto LABEL_178;
  }
  unint64_t v174 = *(void *)(v177 + 8 * v163);
  if (v174) {
    goto LABEL_177;
  }
  int64_t v163 = v172 + 3;
  if (v172 + 3 >= v178) {
    goto LABEL_178;
  }
  unint64_t v174 = *(void *)(v177 + 8 * v163);
  if (v174)
  {
LABEL_177:
    unint64_t v162 = (v174 - 1) & v174;
    unint64_t v166 = __clz(__rbit64(v174)) + (v163 << 6);
    goto LABEL_160;
  }
  int64_t v175 = v172 + 4;
  if (v175 >= v178) {
    goto LABEL_178;
  }
  unint64_t v174 = *(void *)(v177 + 8 * v175);
  if (v174)
  {
    int64_t v163 = v175;
    goto LABEL_177;
  }
  while (1)
  {
    int64_t v163 = v175 + 1;
    if (__OFADD__(v175, 1)) {
      break;
    }
    if (v163 >= v178) {
      goto LABEL_178;
    }
    unint64_t v174 = *(void *)(v177 + 8 * v163);
    ++v175;
    if (v174) {
      goto LABEL_177;
    }
  }
LABEL_195:
  __break(1u);
  return result;
}

uint64_t sub_1D7864B90()
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t sub_1D7864C20()
{
  sub_1D7864B90();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for IdentityManagmentDisconnectHandler()
{
  return self;
}

uint64_t sub_1D7864C78()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D7864CB0(void *a1, void *a2)
{
  return (*(uint64_t (**)(void, void, void))(v2 + 16))(*a1, a1[1], *a2);
}

uint64_t sub_1D7864CE8(void *a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(v2 + 16))(*a1, *a2);
}

uint64_t sub_1D7864D18(void *a1)
{
  return sub_1D78651DC(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_1D7864D20()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1D7864D58()
{
  swift_weakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t objectdestroy_21Tm()
{
  swift_release();
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D7864DF0()
{
  return sub_1D7861DB4(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_1D7864E44()
{
  return sub_1D7862B34();
}

uint64_t sub_1D7864E4C()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D7864E5C()
{
  return sub_1D792EC48(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_1D7864E6C()
{
  return sub_1D7864FDC();
}

uint64_t sub_1D7864E80(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  uint64_t v4 = a1;
  return v2(&v4);
}

uint64_t sub_1D7864EBC()
{
  return (*(uint64_t (**)(void))(v0 + 16))(*(void *)(v0 + 32));
}

uint64_t sub_1D7864EEC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t (**)(void *))(v2 + 16);
  v5[0] = a1;
  v5[1] = a2;
  return v3(v5);
}

uint64_t sub_1D7864F24()
{
  return (*(uint64_t (**)(void, unint64_t))(v0 + 16))(0, 0xF000000000000000);
}

uint64_t sub_1D7864F54(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t *, uint64_t *))(v2 + 16);
  uint64_t v5 = a2;
  uint64_t v6 = a1;
  return v3(&v6, &v5);
}

uint64_t objectdestroy_41Tm()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_1D7864FD4()
{
  return sub_1D7864FDC();
}

uint64_t sub_1D7864FDC()
{
  return (*(uint64_t (**)(void, void))(v0 + 16))(0, *(void *)(v0 + 32));
}

uint64_t sub_1D7865010(char a1)
{
  uint64_t v2 = *(uint64_t (**)(char *))(v1 + 16);
  char v4 = a1;
  return v2(&v4);
}

uint64_t sub_1D7865048()
{
  return (*(uint64_t (**)(void))(v0 + 16))(0);
}

unint64_t sub_1D7865074()
{
  unint64_t result = qword_1EBDF9DB0;
  if (!qword_1EBDF9DB0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EBDF9DB0);
  }
  return result;
}

uint64_t sub_1D78650B4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D78650FC(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D78651DC(void *a1, uint64_t (*a2)(void))
{
  return a2(*a1);
}

uint64_t sub_1D7865208(uint64_t a1, unint64_t a2, unsigned __int16 *a3)
{
  uint64_t v50 = sub_1D7A9C7C8();
  uint64_t v52 = *(void *)(v50 - 8);
  MEMORY[0x1F4188790](v50, v7, v8, v9, v10, v11, v12, v13);
  uint64_t v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_1D7A9C7B8();
  uint64_t v48 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16, v17, v18, v19, v20, v21, v22, v23);
  uint64_t v24 = sub_1D7A9B708();
  MEMORY[0x1F4188790](v24 - 8, v25, v26, v27, v28, v29, v30, v31);
  int v51 = *a3;
  *(unsigned char *)(v3 + 40) = 0;
  uint64_t v32 = MEMORY[0x1E4FBC860];
  *(void *)(v3 + 48) = sub_1D785EDE0(MEMORY[0x1E4FBC860]);
  *(void *)(v3 + 56) = sub_1D785EDB0(v32);
  *(void *)(v3 + 64) = sub_1D785EDEC(v32);
  uint64_t v47 = a1;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = a2;
  uint64_t v33 = v3;
  uint64_t v41 = v3;
  unint64_t v49 = sub_1D7865074();
  uint64_t v53 = 0;
  unint64_t v54 = 0xE000000000000000;
  swift_bridgeObjectRetain();
  sub_1D7A9CC48();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v53 = a1;
  unint64_t v54 = a2;
  sub_1D7A9C128();
  unint64_t v45 = v54;
  uint64_t v46 = v53;
  sub_1D7A9B6F8();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9408);
  uint64_t v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_1D7AA08E0;
  sub_1D7A9C7A8();
  uint64_t v53 = v34;
  uint64_t v44 = sub_1D78650B4((unint64_t *)&qword_1EBDF9DE0, MEMORY[0x1E4FBCC10]);
  uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9DD0);
  uint64_t v48 = sub_1D78650FC((unint64_t *)&qword_1EBDF9DD8, &qword_1EBDF9DD0);
  sub_1D7A9CBA8();
  uint64_t v35 = *MEMORY[0x1E4FBCC58];
  uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t))(v52 + 104);
  v52 += 104;
  uint64_t v42 = v36;
  uint64_t v37 = v50;
  v36(v15, v35, v50);
  *(void *)(v33 + 72) = sub_1D7A9C808();
  uint64_t v53 = v47;
  unint64_t v54 = a2;
  sub_1D7A9C128();
  sub_1D7A9B6F8();
  uint64_t v53 = MEMORY[0x1E4FBC860];
  sub_1D7A9CBA8();
  v42(v15, v35, v37);
  uint64_t v38 = sub_1D7A9C808();
  uint64_t v39 = v41;
  *(void *)(v41 + 32) = v38;
  *(_WORD *)(v39 + 80) = v51;
  return v39;
}

uint64_t sub_1D7865640(void *a1)
{
  uint64_t v2 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v3 = swift_allocObject();
  swift_weakInit();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v2;
  *(void *)(v4 + 24) = v3;
  uint64_t v14 = sub_1D78667CC;
  uint64_t v15 = v4;
  uint64_t v10 = MEMORY[0x1E4F143A8];
  uint64_t v11 = 1107296256;
  uint64_t v12 = sub_1D79899E4;
  uint64_t v13 = &block_descriptor_0;
  uint64_t v5 = _Block_copy(&v10);
  swift_retain();
  swift_release();
  objc_msgSend(a1, sel_setInvalidationHandler_, v5);
  _Block_release(v5);
  uint64_t v6 = swift_allocObject();
  swift_weakInit();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v2;
  *(void *)(v7 + 24) = v6;
  uint64_t v14 = sub_1D7866724;
  uint64_t v15 = v7;
  uint64_t v10 = MEMORY[0x1E4F143A8];
  uint64_t v11 = 1107296256;
  uint64_t v12 = sub_1D79899E4;
  uint64_t v13 = &block_descriptor_17;
  uint64_t v8 = _Block_copy(&v10);
  swift_retain();
  swift_release();
  objc_msgSend(a1, sel_setInterruptionHandler_, v8);
  _Block_release(v8);
  return swift_release();
}

uint64_t sub_1D7865848()
{
  uint64_t v1 = *(NSObject **)(v0 + 32);
  uint64_t v2 = swift_allocObject();
  swift_weakInit();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = sub_1D7866740;
  *(void *)(v3 + 24) = v2;
  v6[4] = sub_1D7864E5C;
  v6[5] = v3;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 1107296256;
  v6[2] = sub_1D792EC70;
  v6[3] = &block_descriptor_24;
  uint64_t v4 = _Block_copy(v6);
  swift_retain();
  swift_release();
  dispatch_sync(v1, v4);
  _Block_release(v4);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v1) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1D786599C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1D7A9B5F8();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6, v7, v8, v9, v10, v11, v12);
  uint64_t v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v15 = __swift_project_value_buffer(v4, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v14, v15, v4);
  swift_retain_n();
  swift_retain_n();
  uint64_t v16 = sub_1D7A9B5D8();
  int v17 = sub_1D7A9C738();
  if (os_log_type_enabled(v16, (os_log_type_t)v17))
  {
    int v34 = v17;
    os_log_t v35 = v16;
    uint64_t v36 = a2;
    uint64_t v32 = a2 + 16;
    uint64_t v18 = swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    v40[0] = v33;
    *(_DWORD *)uint64_t v18 = 136315650;
    swift_beginAccess();
    uint64_t v19 = (void *)MEMORY[0x1D947D840](a1 + 16);
    uint64_t v39 = (uint64_t)v19;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9110);
    uint64_t v20 = sub_1D7A9C998();
    unint64_t v22 = v21;

    uint64_t v39 = sub_1D7923300(v20, v22, v40);
    sub_1D7A9C9E8();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12) = 1024;
    swift_beginAccess();
    uint64_t v23 = (void *)MEMORY[0x1D947D840](a1 + 16);
    if (v23)
    {
      uint64_t v24 = v23;
      unsigned int v25 = objc_msgSend(v23, sel_processIdentifier);
      swift_release();
    }
    else
    {
      swift_release();
      unsigned int v25 = -1;
    }
    unsigned int v38 = v25;
    sub_1D7A9C9E8();
    swift_release();
    *(_WORD *)(v18 + 18) = 2080;
    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      uint64_t v28 = *(void *)(Strong + 16);
      unint64_t v27 = *(void *)(Strong + 24);
      swift_bridgeObjectRetain();
      swift_release();
    }
    else
    {
      unint64_t v27 = 0xE90000000000003ELL;
      uint64_t v28 = 0x6E776F6E6B6E553CLL;
    }
    uint64_t v37 = sub_1D7923300(v28, v27, v40);
    sub_1D7A9C9E8();
    swift_release_n();
    swift_bridgeObjectRelease();
    os_log_t v29 = v35;
    _os_log_impl(&dword_1D7853000, v35, (os_log_type_t)v34, "CoreIDVShared (%s:%d: %s connection interrupted", (uint8_t *)v18, 0x1Cu);
    uint64_t v30 = v33;
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v30, -1, -1);
    MEMORY[0x1D947D740](v18, -1, -1);
  }
  else
  {

    swift_release_n();
    swift_release_n();
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1D7865848();
    return swift_release();
  }
  return result;
}

uint64_t sub_1D7865DD0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, BOOL *a5@<X8>)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = a3;
    *(void *)(v12 + 24) = a4;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *(void *)(v11 + 56);
    *(void *)(v11 + 56) = 0x8000000000000000;
    sub_1D78A054C((uint64_t)sub_1D7866668, v12, a1, a2, isUniquelyReferenced_nonNull_native);
    *(void *)(v11 + 56) = v14;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    uint64_t result = swift_release();
  }
  *a5 = v11 == 0;
  return result;
}

uint64_t sub_1D7865F0C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_beginAccess();
    uint64_t v7 = sub_1D789F008(a1, a2);
    uint64_t v9 = v8;
    swift_endAccess();
    uint64_t result = swift_release();
    if (v7) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v10 = 0;
  }
  *a3 = v7;
  a3[1] = v10;
  return result;
}

uint64_t sub_1D7865FD4()
{
  uint64_t v48 = sub_1D7A9B6C8();
  uint64_t v0 = *(void *)(v48 - 8);
  MEMORY[0x1F4188790](v48, v1, v2, v3, v4, v5, v6, v7);
  uint64_t v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = sub_1D7A9B708();
  uint64_t v10 = *(void *)(v49 - 8);
  MEMORY[0x1F4188790](v49, v11, v12, v13, v14, v15, v16, v17);
  uint64_t v19 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    return result;
  }
  uint64_t v21 = result;
  *(unsigned char *)(result + 40) = 1;
  LOWORD(aBlock[0]) = *(_WORD *)(result + 80);
  unint64_t v22 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
  sub_1D7860544();
  id v51 = (id)swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000013, 0x80000001D7ABD9C0, (__int16 *)aBlock, 0, v22, 0xD000000000000075, 0x80000001D7ABDBA0, v23, 0xD000000000000017, 0x80000001D7ABDA50, 152);
  uint64_t v52 = v21;
  uint64_t v24 = *(void *)(v21 + 48);
  uint64_t v25 = *(void *)(v24 + 64);
  uint64_t v43 = v24 + 64;
  uint64_t v26 = 1 << *(unsigned char *)(v24 + 32);
  uint64_t v27 = -1;
  if (v26 < 64) {
    uint64_t v27 = ~(-1 << v26);
  }
  unint64_t v28 = v27 & v25;
  int64_t v44 = (unint64_t)(v26 + 63) >> 6;
  uint64_t v47 = v56;
  uint64_t v46 = (void (**)(char *, uint64_t))(v0 + 8);
  unint64_t v45 = (void (**)(char *, uint64_t))(v10 + 8);
  uint64_t v50 = v24;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v29 = 0;
  while (1)
  {
    if (v28)
    {
      unint64_t v30 = __clz(__rbit64(v28));
      v28 &= v28 - 1;
      unint64_t v31 = v30 | (v29 << 6);
      goto LABEL_6;
    }
    int64_t v39 = v29 + 1;
    uint64_t v40 = v52;
    if (__OFADD__(v29, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v39 >= v44) {
      goto LABEL_24;
    }
    unint64_t v41 = *(void *)(v43 + 8 * v39);
    ++v29;
    if (!v41)
    {
      int64_t v29 = v39 + 1;
      if (v39 + 1 >= v44) {
        goto LABEL_24;
      }
      unint64_t v41 = *(void *)(v43 + 8 * v29);
      if (!v41)
      {
        int64_t v29 = v39 + 2;
        if (v39 + 2 >= v44) {
          goto LABEL_24;
        }
        unint64_t v41 = *(void *)(v43 + 8 * v29);
        if (!v41)
        {
          int64_t v29 = v39 + 3;
          if (v39 + 3 >= v44) {
            goto LABEL_24;
          }
          unint64_t v41 = *(void *)(v43 + 8 * v29);
          if (!v41) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v28 = (v41 - 1) & v41;
    unint64_t v31 = __clz(__rbit64(v41)) + (v29 << 6);
LABEL_6:
    uint64_t v32 = *(void *)(v50 + 56);
    uint64_t v33 = swift_allocObject();
    long long v53 = *(_OWORD *)(v32 + 16 * v31);
    *(_OWORD *)(v33 + 16) = v53;
    int v34 = (void *)swift_allocObject();
    v34[2] = sub_1D7864F54;
    v34[3] = v33;
    id v35 = v51;
    v34[4] = v51;
    v56[2] = sub_1D7866798;
    v56[3] = v34;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    v56[0] = sub_1D79899E4;
    v56[1] = &block_descriptor_33;
    uint64_t v36 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    id v37 = v35;
    sub_1D7A9B6E8();
    uint64_t v54 = MEMORY[0x1E4FBC860];
    sub_1D78650B4((unint64_t *)&qword_1EBDF9D90, MEMORY[0x1E4FBCB00]);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9D98);
    sub_1D78650FC((unint64_t *)&qword_1EBDF9DA0, &qword_1EBDF9D98);
    uint64_t v38 = v48;
    sub_1D7A9CBA8();
    MEMORY[0x1D947B570](0, v19, v9, v36);
    _Block_release(v36);
    swift_release();
    (*v46)(v9, v38);
    (*v45)(v19, v49);
    uint64_t result = swift_release();
  }
  int64_t v42 = v39 + 4;
  if (v42 >= v44)
  {
LABEL_24:
    swift_release();
    *(void *)(v40 + 48) = MEMORY[0x1E4FBC868];
    swift_bridgeObjectRelease();

    return swift_release();
  }
  unint64_t v41 = *(void *)(v43 + 8 * v42);
  if (v41)
  {
    int64_t v29 = v42;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v29 = v42 + 1;
    if (__OFADD__(v42, 1)) {
      break;
    }
    if (v29 >= v44) {
      goto LABEL_24;
    }
    unint64_t v41 = *(void *)(v43 + 8 * v29);
    ++v42;
    if (v41) {
      goto LABEL_23;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1D78665AC()
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for IdentityProofingDataSharingDisconnectionHandler()
{
  return self;
}

uint64_t sub_1D7866630()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D7866668(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t sub_1D7866694()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1D78666CC()
{
  swift_weakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t sub_1D7866724()
{
  return sub_1D786599C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1D7866740()
{
  return sub_1D7865FD4();
}

uint64_t sub_1D7866748()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D7866758()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_1D7866798()
{
  return (*(uint64_t (**)(uint64_t, void))(v0 + 16))(1, *(void *)(v0 + 32));
}

uint64_t static IdentityImageQualityMetrics.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t IdentityImageQualityMetrics.inlineMetrics.getter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__inlineMetrics);
  uint64_t v2 = v1 + 4;
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1D7869410(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

void sub_1D7866864(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(*a1 + OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__inlineMetrics);
  uint64_t v4 = v3 + 4;
  uint64_t v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1D7869410(v4, &v6);
  os_unfair_lock_unlock(v5);
  *a2 = v6;
}

uint64_t sub_1D78668D8(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(*a2 + OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__inlineMetrics);
  uint64_t v3 = (void *)(v2 + 16);
  uint64_t v4 = (os_unfair_lock_s *)(v2 + 24);
  swift_bridgeObjectRetain();
  os_unfair_lock_lock(v4);
  sub_1D78669C4(v3);
  os_unfair_lock_unlock(v4);
  return swift_bridgeObjectRelease();
}

uint64_t IdentityImageQualityMetrics.inlineMetrics.setter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__inlineMetrics);
  uint64_t v2 = v1 + 4;
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1D78669C4(v2);
  os_unfair_lock_unlock(v3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D78669C4(void *a1)
{
  return sub_1D7869258(a1);
}

uint64_t (*IdentityImageQualityMetrics.inlineMetrics.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__inlineMetrics);
  a1[1] = v3;
  uint64_t v4 = v3 + 4;
  uint64_t v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1D7869410(v4, &v7);
  a1[2] = 0;
  os_unfair_lock_unlock(v5);
  *a1 = v7;
  return sub_1D7866A70;
}

uint64_t sub_1D7866A70(uint64_t a1, char a2)
{
  uint64_t v2 = *(os_unfair_lock_s **)(a1 + 8);
  uint64_t v3 = v2 + 6;
  uint64_t v4 = v2 + 4;
  if (a2)
  {
    swift_bridgeObjectRetain();
    os_unfair_lock_lock(v3);
    sub_1D78669C4(v4);
    os_unfair_lock_unlock(v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    os_unfair_lock_lock(v2 + 6);
    sub_1D78669C4(v4);
    os_unfair_lock_unlock(v3);
  }
  return swift_bridgeObjectRelease();
}

uint64_t IdentityImageQualityMetrics.captureMetrics.getter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__captureMetrics);
  uint64_t v2 = v1 + 4;
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1D7869410(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

void sub_1D7866B8C(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(*a1 + OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__captureMetrics);
  uint64_t v4 = v3 + 4;
  uint64_t v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1D7869410(v4, &v6);
  os_unfair_lock_unlock(v5);
  *a2 = v6;
}

uint64_t sub_1D7866C00(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(*a2 + OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__captureMetrics);
  uint64_t v3 = (void *)(v2 + 16);
  uint64_t v4 = (os_unfair_lock_s *)(v2 + 24);
  swift_bridgeObjectRetain();
  os_unfair_lock_lock(v4);
  sub_1D78669C4(v3);
  os_unfair_lock_unlock(v4);
  return swift_bridgeObjectRelease();
}

uint64_t IdentityImageQualityMetrics.captureMetrics.setter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__captureMetrics);
  uint64_t v2 = v1 + 4;
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1D78669C4(v2);
  os_unfair_lock_unlock(v3);
  return swift_bridgeObjectRelease();
}

uint64_t (*IdentityImageQualityMetrics.captureMetrics.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__captureMetrics);
  a1[1] = v3;
  uint64_t v4 = v3 + 4;
  uint64_t v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1D7869410(v4, &v7);
  a1[2] = 0;
  os_unfair_lock_unlock(v5);
  *a1 = v7;
  return sub_1D7866A70;
}

uint64_t IdentityImageQualityMetrics.videoMetrics.getter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__videoMetrics);
  uint64_t v2 = v1 + 4;
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1D7869410(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

void sub_1D7866DE8(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(*a1 + OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__videoMetrics);
  uint64_t v4 = v3 + 4;
  uint64_t v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1D7869410(v4, &v6);
  os_unfair_lock_unlock(v5);
  *a2 = v6;
}

uint64_t sub_1D7866E5C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(*a2 + OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__videoMetrics);
  uint64_t v3 = (void *)(v2 + 16);
  uint64_t v4 = (os_unfair_lock_s *)(v2 + 24);
  swift_bridgeObjectRetain();
  os_unfair_lock_lock(v4);
  sub_1D78669C4(v3);
  os_unfair_lock_unlock(v4);
  return swift_bridgeObjectRelease();
}

uint64_t IdentityImageQualityMetrics.videoMetrics.setter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__videoMetrics);
  uint64_t v2 = v1 + 4;
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1D78669C4(v2);
  os_unfair_lock_unlock(v3);
  return swift_bridgeObjectRelease();
}

uint64_t (*IdentityImageQualityMetrics.videoMetrics.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__videoMetrics);
  a1[1] = v3;
  uint64_t v4 = v3 + 4;
  uint64_t v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1D7869410(v4, &v7);
  a1[2] = 0;
  os_unfair_lock_unlock(v5);
  *a1 = v7;
  return sub_1D7866A70;
}

id IdentityImageQualityMetrics.init()()
{
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v2 = OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__inlineMetrics;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA842338);
  uint64_t v3 = swift_allocObject();
  uint64_t v4 = MEMORY[0x1E4FBC860];
  *(_DWORD *)(v3 + 24) = 0;
  *(void *)(v3 + 16) = v4;
  *(void *)&v0[v2] = v3;
  uint64_t v5 = OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__captureMetrics;
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 24) = 0;
  *(void *)(v6 + 16) = v4;
  *(void *)&v0[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__videoMetrics;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA842340);
  uint64_t v8 = swift_allocObject();
  *(_DWORD *)(v8 + 24) = 0;
  *(void *)(v8 + 16) = v4;
  *(void *)&v0[v7] = v8;
  v10.receiver = v0;
  v10.super_class = ObjectType;
  return objc_msgSendSuper2(&v10, sel_init);
}

id IdentityImageQualityMetrics.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return IdentityImageQualityMetrics.init(coder:)(a1);
}

id IdentityImageQualityMetrics.init(coder:)(void *a1)
{
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v4 = OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__inlineMetrics;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA842338);
  uint64_t v5 = swift_allocObject();
  uint64_t v6 = MEMORY[0x1E4FBC860];
  *(_DWORD *)(v5 + 24) = 0;
  *(void *)(v5 + 16) = v6;
  *(void *)&v1[v4] = v5;
  uint64_t v7 = OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__captureMetrics;
  uint64_t v8 = swift_allocObject();
  *(_DWORD *)(v8 + 24) = 0;
  *(void *)(v8 + 16) = v6;
  *(void *)&v1[v7] = v8;
  uint64_t v9 = OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__videoMetrics;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA842340);
  uint64_t v10 = swift_allocObject();
  *(_DWORD *)(v10 + 24) = 0;
  *(void *)(v10 + 16) = v6;
  *(void *)&v1[v9] = v10;
  v54.receiver = v1;
  v54.super_class = ObjectType;
  id v11 = objc_msgSendSuper2(&v54, sel_init);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA843600);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1D7AA0A40;
  unint64_t v13 = sub_1D7867558();
  *(void *)(v12 + 32) = v13;
  uint64_t v14 = type metadata accessor for ImageQualityMetrics();
  *(void *)(v12 + 40) = v14;
  id v15 = v11;
  sub_1D7A9C918();
  swift_bridgeObjectRelease();
  if (v53)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA842358);
    uint64_t v16 = swift_dynamicCast();
  }
  else
  {
    uint64_t v16 = sub_1D7867598((uint64_t)v52);
  }
  MEMORY[0x1F4188790](v16, v17, v18, v19, v20, v21, v22, v23);
  uint64_t v25 = v24 + 4;
  uint64_t v26 = v24 + 6;
  os_unfair_lock_lock(v24 + 6);
  sub_1D78669C4(v25);
  os_unfair_lock_unlock(v26);
  swift_bridgeObjectRelease();
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_1D7AA0A40;
  *(void *)(v27 + 32) = v13;
  *(void *)(v27 + 40) = v14;
  sub_1D7A9C918();
  swift_bridgeObjectRelease();
  if (v53)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA842358);
    uint64_t v28 = swift_dynamicCast();
  }
  else
  {
    uint64_t v28 = sub_1D7867598((uint64_t)v52);
  }
  MEMORY[0x1F4188790](v28, v29, v30, v31, v32, v33, v34, v35);
  id v37 = v36 + 4;
  uint64_t v38 = v36 + 6;
  os_unfair_lock_lock(v36 + 6);
  sub_1D78669C4(v37);
  os_unfair_lock_unlock(v38);
  swift_bridgeObjectRelease();
  uint64_t v39 = swift_allocObject();
  *(_OWORD *)(v39 + 16) = xmmword_1D7AA0A40;
  *(void *)(v39 + 32) = v13;
  *(void *)(v39 + 40) = type metadata accessor for MetricsSequence();
  sub_1D7A9C918();
  swift_bridgeObjectRelease();
  if (v53)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA842350);
    uint64_t v40 = swift_dynamicCast();
  }
  else
  {
    uint64_t v40 = sub_1D7867598((uint64_t)v52);
  }
  MEMORY[0x1F4188790](v40, v41, v42, v43, v44, v45, v46, v47);
  uint64_t v49 = v48 + 4;
  uint64_t v50 = v48 + 6;
  os_unfair_lock_lock(v48 + 6);
  sub_1D78669C4(v49);
  os_unfair_lock_unlock(v50);

  swift_bridgeObjectRelease();
  return v15;
}

unint64_t sub_1D7867558()
{
  unint64_t result = qword_1EBDF90E0;
  if (!qword_1EBDF90E0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EBDF90E0);
  }
  return result;
}

uint64_t sub_1D7867598(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF9680);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for MetricsSequence()
{
  return self;
}

Swift::Void __swiftcall IdentityImageQualityMetrics.encode(with:)(NSCoder with)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__inlineMetrics);
  uint64_t v5 = v4 + 4;
  uint64_t v6 = v4 + 6;
  os_unfair_lock_lock(v4 + 6);
  sub_1D7869410(v5, &v19);
  os_unfair_lock_unlock(v6);
  type metadata accessor for ImageQualityMetrics();
  uint64_t v7 = (void *)sub_1D7A9C2F8();
  swift_bridgeObjectRelease();
  uint64_t v8 = (void *)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeObject:v7 forKey:v8];

  uint64_t v9 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__captureMetrics);
  uint64_t v10 = v9 + 4;
  id v11 = v9 + 6;
  os_unfair_lock_lock(v9 + 6);
  sub_1D7869410(v10, &v19);
  os_unfair_lock_unlock(v11);
  uint64_t v12 = (void *)sub_1D7A9C2F8();
  swift_bridgeObjectRelease();
  unint64_t v13 = (void *)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeObject:v12 forKey:v13];

  uint64_t v14 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__videoMetrics);
  id v15 = v14 + 4;
  uint64_t v16 = v14 + 6;
  os_unfair_lock_lock(v14 + 6);
  sub_1D7869410(v15, &v19);
  os_unfair_lock_unlock(v16);
  type metadata accessor for MetricsSequence();
  uint64_t v17 = (void *)sub_1D7A9C2F8();
  swift_bridgeObjectRelease();
  id v18 = (id)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeObject:v17 forKey:v18];
}

id IdentityImageQualityMetrics.addMetrics(metrics:isInline:)(char *a1, int a2)
{
  unint64_t v3 = v2;
  uint64_t v6 = sub_1D7A9B5F8();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v8, v9, v10, v11, v12, v13, v14);
  uint64_t v16 = (char *)v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = &a1[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_modelDecision];
  swift_beginAccess();
  uint64_t v61 = *((void *)v17 + 1);
  if (v61)
  {
    uint64_t v62 = *(void *)v17;
    int v60 = a2;
    if (a2) {
      uint64_t v18 = *(void *)(v3 + OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__inlineMetrics);
    }
    else {
      uint64_t v18 = *(void *)(v3 + OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__captureMetrics);
    }
    uint64_t v19 = (void *)(v18 + 16);
    uint64_t v20 = (os_unfair_lock_s *)(v18 + 24);
    uint64_t v21 = v61;
    swift_bridgeObjectRetain();
    os_unfair_lock_lock(v20);
    unint64_t v22 = 0;
    sub_1D7869410(v19, v65);
    os_unfair_lock_unlock(v20);
    unint64_t v28 = v65[0];
    unint64_t v64 = v65[0];
    unint64_t v63 = MEMORY[0x1E4FBC860];
    if (v65[0] >> 62) {
      goto LABEL_30;
    }
    uint64_t v29 = *(void *)((v65[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v29)
    {
      while (1)
      {
        v59[0] = a1;
        v59[1] = v22;
        unint64_t v22 = v3;
        unint64_t v3 = 0;
        a1 = (char *)(v28 & 0xC000000000000001);
        while (a1)
        {
          uint64_t v30 = (char *)MEMORY[0x1D947BA10](v3, v28);
LABEL_18:
          uint64_t v31 = v30;
          unint64_t v32 = v3 + 1;
          if (__OFADD__(v3, 1)) {
            goto LABEL_29;
          }
          uint64_t v33 = &v30[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_modelDecision];
          swift_beginAccess();
          uint64_t v34 = *((void *)v33 + 1);
          if (v34 && (*(void *)v33 == v62 ? (BOOL v35 = v34 == v21) : (BOOL v35 = 0), v35 || (sub_1D7A9D358() & 1) != 0))
          {
          }
          else
          {
            sub_1D7A9CD98();
            sub_1D7A9CDD8();
            uint64_t v21 = v61;
            sub_1D7A9CDE8();
            sub_1D7A9CDA8();
          }
          ++v3;
          if (v32 == v29)
          {
            unint64_t v36 = v63;
            a1 = (char *)v59[0];
            goto LABEL_32;
          }
        }
        if (v3 < *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          break;
        }
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v29 = sub_1D7A9CFB8();
        if (!v29) {
          goto LABEL_31;
        }
      }
      uint64_t v30 = (char *)*(id *)(v28 + 8 * v3 + 32);
      goto LABEL_18;
    }
LABEL_31:
    unint64_t v36 = MEMORY[0x1E4FBC860];
LABEL_32:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v64 = v36;
    if ((v36 & 0x8000000000000000) != 0 || (v36 & 0x4000000000000000) != 0)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v41 = sub_1D7A9CFB8();
      swift_release();
      if (v41)
      {
        swift_bridgeObjectRetain();
        uint64_t v42 = sub_1D7A9CFB8();
        id result = (id)swift_release_n();
        if (v42 != 5) {
          goto LABEL_47;
        }
        goto LABEL_36;
      }
    }
    else
    {
      uint64_t v37 = *(void *)(v36 + 16);
      swift_bridgeObjectRetain();
      if (v37)
      {
        id result = (id)swift_release();
        if (v37 != 5)
        {
LABEL_47:
          uint64_t v43 = a1;
          MEMORY[0x1D947B060]();
          if (*(void *)((v64 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v64 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            sub_1D7A9C368();
          }
          sub_1D7A9C3A8();
          uint64_t v44 = sub_1D7A9C338();
          unint64_t v45 = v64;
          MEMORY[0x1F4188790](v44, v46, v47, v48, v49, v50, v51, v52);
          v59[-2] = v45;
          objc_super v54 = (void *)(v53 + 16);
          uint64_t v55 = (os_unfair_lock_s *)(v53 + 24);
          swift_bridgeObjectRetain();
          os_unfair_lock_lock(v55);
          sub_1D78669C4(v54);
          os_unfair_lock_unlock(v55);
          swift_bridgeObjectRelease();
          return (id)swift_bridgeObjectRelease();
        }
LABEL_36:
        uint64_t v38 = a1;
        unint64_t v39 = v36 >> 62;
        if (v36 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v56 = sub_1D7A9CFB8();
          id result = (id)swift_bridgeObjectRelease();
          if (v56)
          {
            swift_bridgeObjectRetain();
            uint64_t v57 = sub_1D7A9CFB8();
            id result = (id)swift_bridgeObjectRelease();
            if (!v57)
            {
              __break(1u);
              goto LABEL_53;
            }
LABEL_38:
            if ((v36 & 0xC000000000000001) == 0)
            {
              if (!*(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10))
              {
LABEL_57:
                __break(1u);
                return result;
              }
              id result = *(id *)(v36 + 32);
              uint64_t v40 = result;
              if (!v39) {
                goto LABEL_41;
              }
              goto LABEL_54;
            }
LABEL_53:
            id result = (id)MEMORY[0x1D947BA10](0, v36);
            uint64_t v40 = result;
            if (!v39)
            {
LABEL_41:
              if (*(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10))
              {
LABEL_42:
                a1 = v38;
                sub_1D7868EB0(0, 1);

                goto LABEL_47;
              }
              goto LABEL_55;
            }
LABEL_54:
            swift_bridgeObjectRetain();
            uint64_t v58 = sub_1D7A9CFB8();
            id result = (id)swift_bridgeObjectRelease();
            if (v58) {
              goto LABEL_42;
            }
LABEL_55:
            __break(1u);
          }
        }
        else if (*(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_38;
        }
        __break(1u);
        goto LABEL_57;
      }
    }
    swift_release();
    goto LABEL_47;
  }
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v23 = __swift_project_value_buffer(v6, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v16, v23, v6);
  uint64_t v24 = sub_1D7A9B5D8();
  os_log_type_t v25 = sub_1D7A9C758();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v26 = 0;
    _os_log_impl(&dword_1D7853000, v24, v25, "Image quality metrics did not contain a modelDecision so it could not be saved.", v26, 2u);
    MEMORY[0x1D947D740](v26, -1, -1);
  }

  return (id)(*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v16, v6);
}

void IdentityImageQualityMetrics.addVideoMetrics(metrics:index:)(char *a1, uint64_t a2)
{
  uint64_t v5 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__videoMetrics);
  uint64_t v6 = v5 + 6;
  uint64_t v7 = v5 + 4;
  os_unfair_lock_lock(v5 + 6);
  sub_1D7869410(v7, &v19);
  while (1)
  {
    os_unfair_lock_unlock(v6);
    if (v19 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = sub_1D7A9CFB8();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v8 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (v8 > a2) {
      break;
    }
    objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MetricsSequence()), sel_init);
    os_unfair_lock_lock(v6);
    sub_1D7869410(v7, &v19);
    os_unfair_lock_unlock(v6);
    MEMORY[0x1D947B060]();
    if (*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      sub_1D7A9C368();
    }
    sub_1D7A9C3A8();
    uint64_t v9 = sub_1D7A9C338();
    MEMORY[0x1F4188790](v9, v10, v11, v12, v13, v14, v15, v16);
    os_unfair_lock_lock(v6);
    sub_1D78669C4(v7);
    os_unfair_lock_unlock(v6);
    swift_bridgeObjectRelease();
    os_unfair_lock_lock(v6);
    sub_1D7869410(v7, &v19);
  }
  os_unfair_lock_lock(v6);
  sub_1D7869410(v7, &v19);
  os_unfair_lock_unlock(v6);
  if ((v19 & 0xC000000000000001) != 0)
  {
    id v17 = (id)MEMORY[0x1D947BA10](a2, v19);
    goto LABEL_13;
  }
  if (a2 < 0)
  {
    __break(1u);
  }
  else if (*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10) > (unint64_t)a2)
  {
    id v17 = *(id *)(v19 + 8 * a2 + 32);
LABEL_13:
    uint64_t v18 = v17;
    swift_bridgeObjectRelease();
    MetricsSequence.addMetrics(_:)(a1);

    return;
  }
  __break(1u);
  os_unfair_lock_unlock(v6);
  __break(1u);
}

id MetricsSequence.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void MetricsSequence.addMetrics(_:)(char *a1)
{
  uint64_t v3 = sub_1D7A9B5F8();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v5, v6, v7, v8, v9, v10, v11);
  uint64_t v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC13CoreIDVShared15MetricsSequence__sequence);
  uint64_t v15 = v14 + 4;
  uint64_t v16 = v14 + 6;
  os_unfair_lock_lock(v14 + 6);
  sub_1D786895C(v15, v52);
  os_unfair_lock_unlock(v16);
  uint64_t v17 = v52[0];
  if (v52[0] >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = (char *)sub_1D7A9CFB8();
    swift_bridgeObjectRelease();
    if (v18)
    {
LABEL_3:
      unint64_t v19 = v18 - 1;
      if (__OFSUB__(v18, 1))
      {
        __break(1u);
      }
      else
      {
        uint64_t v50 = v15;
        if ((v17 & 0xC000000000000001) == 0)
        {
          if (((unint64_t)v19 & 0x8000000000000000) != 0)
          {
            __break(1u);
          }
          else if ((unint64_t)v19 < *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            uint64_t v20 = (char *)*(id *)(v17 + 8 * (void)v19 + 32);
LABEL_8:
            uint64_t v18 = v20;
            swift_bridgeObjectRelease();
            uint64_t v21 = &v18[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_modelDecision];
            swift_beginAccess();
            uint64_t v22 = *((void *)v21 + 1);
            if (v22)
            {
              uint64_t v23 = *(void *)v21;
              uint64_t v24 = &a1[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_modelDecision];
              swift_beginAccess();
              uint64_t v25 = *((void *)v24 + 1);
              if (v25)
              {
                BOOL v26 = v23 == *(void *)v24 && v22 == v25;
                if (v26 || (sub_1D7A9D358() & 1) != 0)
                {

                  return;
                }
                uint64_t v30 = a1;
                os_unfair_lock_lock(v16);
                uint64_t v31 = v50;
                sub_1D786895C(v50, v51);
                os_unfair_lock_unlock(v16);
                MEMORY[0x1D947B060]();
                if (*(void *)((*(void *)v51 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v51 & 0xFFFFFFFFFFFFFF8)
                                                                                             + 0x18) >> 1)
                  sub_1D7A9C368();
                sub_1D7A9C3A8();
                uint64_t v32 = sub_1D7A9C338();
                MEMORY[0x1F4188790](v32, v33, v34, v35, v36, v37, v38, v39);
                os_unfair_lock_lock(v16);
                sub_1D78669C4(v31);
                os_unfair_lock_unlock(v16);

                goto LABEL_25;
              }
            }
            v51[0] = 345;
            unint64_t v27 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
            sub_1D7860544();
            uint64_t v16 = (os_unfair_lock_s *)swift_allocError();
            DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000003DLL, 0x80000001D7ABDC20, v51, 0, v27, 0xD00000000000006DLL, 0x80000001D7ABDC60, v28, 0x697274654D646461, 0xEE00293A5F287363, 134);
            if (qword_1EBDF9DC8 == -1)
            {
LABEL_17:
              uint64_t v29 = __swift_project_value_buffer(v3, (uint64_t)qword_1EBDFBE70);
              swift_beginAccess();
              (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v13, v29, v3);
              DIPLogError(_:message:log:)(v16, 0, 0xE000000000000000);
              _s13CoreIDVShared9AnalyticsC9sendErroryys0E0_pFZ_0(v16);

              (*(void (**)(char *, uint64_t))(v4 + 8))(v13, v3);
              return;
            }
LABEL_30:
            swift_once();
            goto LABEL_17;
          }
          __break(1u);
          goto LABEL_30;
        }
      }
      uint64_t v20 = (char *)MEMORY[0x1D947BA10](v19, v17);
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v18 = *(char **)((v52[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v18) {
      goto LABEL_3;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v40 = a1;
  os_unfair_lock_lock(v16);
  sub_1D786895C(v15, v52);
  os_unfair_lock_unlock(v16);
  MEMORY[0x1D947B060]();
  if (*(void *)((v52[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v52[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_1D7A9C368();
  }
  sub_1D7A9C3A8();
  uint64_t v41 = sub_1D7A9C338();
  MEMORY[0x1F4188790](v41, v42, v43, v44, v45, v46, v47, v48);
  os_unfair_lock_lock(v16);
  sub_1D78669C4(v15);
  os_unfair_lock_unlock(v16);
LABEL_25:
  swift_bridgeObjectRelease();
}

uint64_t static MetricsSequence.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t MetricsSequence.sequence.getter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC13CoreIDVShared15MetricsSequence__sequence);
  uint64_t v2 = v1 + 4;
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1D786895C(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

void sub_1D78687FC(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(*a1 + OBJC_IVAR____TtC13CoreIDVShared15MetricsSequence__sequence);
  uint64_t v4 = v3 + 4;
  uint64_t v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1D786895C(v4, &v6);
  os_unfair_lock_unlock(v5);
  *a2 = v6;
}

uint64_t sub_1D7868870(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(*a2 + OBJC_IVAR____TtC13CoreIDVShared15MetricsSequence__sequence);
  uint64_t v3 = (void *)(v2 + 16);
  uint64_t v4 = (os_unfair_lock_s *)(v2 + 24);
  swift_bridgeObjectRetain();
  os_unfair_lock_lock(v4);
  sub_1D78669C4(v3);
  os_unfair_lock_unlock(v4);
  return swift_bridgeObjectRelease();
}

uint64_t MetricsSequence.sequence.setter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC13CoreIDVShared15MetricsSequence__sequence);
  uint64_t v2 = v1 + 4;
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1D78669C4(v2);
  os_unfair_lock_unlock(v3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D786895C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_bridgeObjectRetain();
}

uint64_t (*MetricsSequence.sequence.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC13CoreIDVShared15MetricsSequence__sequence);
  a1[1] = v3;
  uint64_t v4 = v3 + 4;
  uint64_t v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1D786895C(v4, &v7);
  a1[2] = 0;
  os_unfair_lock_unlock(v5);
  *a1 = v7;
  return sub_1D7866A70;
}

id MetricsSequence.init()()
{
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v2 = OBJC_IVAR____TtC13CoreIDVShared15MetricsSequence__sequence;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA842338);
  uint64_t v3 = swift_allocObject();
  *(_DWORD *)(v3 + 24) = 0;
  *(void *)(v3 + 16) = MEMORY[0x1E4FBC860];
  *(void *)&v0[v2] = v3;
  v5.receiver = v0;
  v5.super_class = ObjectType;
  return objc_msgSendSuper2(&v5, sel_init);
}

id MetricsSequence.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return MetricsSequence.init(coder:)(a1);
}

id MetricsSequence.init(coder:)(void *a1)
{
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v4 = OBJC_IVAR____TtC13CoreIDVShared15MetricsSequence__sequence;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA842338);
  uint64_t v5 = swift_allocObject();
  *(_DWORD *)(v5 + 24) = 0;
  *(void *)(v5 + 16) = MEMORY[0x1E4FBC860];
  *(void *)&v1[v4] = v5;
  v23.receiver = v1;
  v23.super_class = ObjectType;
  id v6 = objc_msgSendSuper2(&v23, sel_init);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA843600);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1D7AA0A40;
  *(void *)(v7 + 32) = sub_1D7867558();
  *(void *)(v7 + 40) = type metadata accessor for ImageQualityMetrics();
  id v8 = v6;
  sub_1D7A9C918();
  swift_bridgeObjectRelease();
  if (v22)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA842358);
    uint64_t v9 = swift_dynamicCast();
  }
  else
  {
    uint64_t v9 = sub_1D7867598((uint64_t)v21);
  }
  MEMORY[0x1F4188790](v9, v10, v11, v12, v13, v14, v15, v16);
  uint64_t v18 = v17 + 4;
  unint64_t v19 = v17 + 6;
  os_unfair_lock_lock(v17 + 6);
  sub_1D78669C4(v18);
  os_unfair_lock_unlock(v19);

  swift_bridgeObjectRelease();
  return v8;
}

Swift::Void __swiftcall MetricsSequence.encode(with:)(NSCoder with)
{
  id v3 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC13CoreIDVShared15MetricsSequence__sequence);
  uint64_t v4 = v3 + 4;
  uint64_t v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1D786895C(v4, &v8);
  os_unfair_lock_unlock(v5);
  type metadata accessor for ImageQualityMetrics();
  id v6 = (void *)sub_1D7A9C2F8();
  swift_bridgeObjectRelease();
  id v7 = (id)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeObject:v6 forKey:v7];
}

id _s13CoreIDVShared27IdentityImageQualityMetricsCfD_0()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1D7868EB0(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = a2;
    uint64_t v4 = a1;
    if (!(*v3 >> 62))
    {
      if (*(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v21 = sub_1D7A9CFB8();
  swift_bridgeObjectRelease();
  if (v21 < v2) {
    goto LABEL_33;
  }
LABEL_4:
  uint64_t v6 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v5 = v4 - v2;
  if (__OFSUB__(0, v6))
  {
LABEL_35:
    __break(1u);
LABEL_36:
    swift_bridgeObjectRetain();
    uint64_t v7 = sub_1D7A9CFB8();
    swift_bridgeObjectRelease();
    uint64_t v8 = v7 + v5;
    if (!__OFADD__(v7, v5)) {
      goto LABEL_8;
    }
LABEL_38:
    __break(1u);
LABEL_39:
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_1D7A9CFB8();
    swift_bridgeObjectRelease();
    unint64_t v9 = *v3;
    goto LABEL_15;
  }
  if (*v3 >> 62) {
    goto LABEL_36;
  }
  uint64_t v7 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v8 = v7 - v6;
  if (__OFADD__(v7, v5)) {
    goto LABEL_38;
  }
LABEL_8:
  unint64_t v9 = *v3;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *id v3 = v9;
  uint64_t v7 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v9 & 0x8000000000000000) == 0 && (v9 & 0x4000000000000000) == 0)
  {
    uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8;
    if (v8 <= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_18;
    }
    uint64_t v7 = 1;
  }
  if (v9 >> 62) {
    goto LABEL_39;
  }
  uint64_t v12 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v12 <= v8) {
    uint64_t v12 = v8;
  }
  swift_bridgeObjectRetain();
  *id v3 = MEMORY[0x1D947BA20](v7, v12, 1, v9);
  swift_bridgeObjectRelease();
  uint64_t v11 = *v3 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  uint64_t v13 = v11 + 32;
  uint64_t v14 = (char *)(v11 + 32 + 8 * v4);
  type metadata accessor for ImageQualityMetrics();
  swift_arrayDestroy();
  if (v5)
  {
    if (*v3 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v22 = sub_1D7A9CFB8();
      swift_bridgeObjectRelease();
      uint64_t v16 = v22 - v2;
      if (!__OFSUB__(v22, v2))
      {
LABEL_21:
        if (v16 < 0)
        {
LABEL_46:
          uint64_t result = sub_1D7A9D008();
          __break(1u);
          return result;
        }
        uint64_t v17 = (char *)(v13 + 8 * v2);
        if (v4 != v2 || v14 >= &v17[8 * v16]) {
          memmove(v14, v17, 8 * v16);
        }
        if (!(*v3 >> 62))
        {
          uint64_t v18 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
          uint64_t v19 = v18 + v5;
          if (!__OFADD__(v18, v5))
          {
LABEL_27:
            *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) = v19;
            goto LABEL_28;
          }
          goto LABEL_45;
        }
LABEL_43:
        swift_bridgeObjectRetain();
        uint64_t v23 = sub_1D7A9CFB8();
        swift_bridgeObjectRelease();
        uint64_t v19 = v23 + v5;
        if (!__OFADD__(v23, v5)) {
          goto LABEL_27;
        }
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
    }
    else
    {
      uint64_t v15 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t v16 = v15 - v2;
      if (!__OFSUB__(v15, v2)) {
        goto LABEL_21;
      }
    }
    __break(1u);
    goto LABEL_43;
  }
LABEL_28:
  return sub_1D7A9C338();
}

uint64_t type metadata accessor for IdentityImageQualityMetrics()
{
  return self;
}

uint64_t method lookup function for IdentityImageQualityMetrics(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for IdentityImageQualityMetrics);
}

uint64_t dispatch thunk of IdentityImageQualityMetrics.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t method lookup function for MetricsSequence(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for MetricsSequence);
}

uint64_t dispatch thunk of MetricsSequence.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t sub_1D7869258(void *a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  swift_bridgeObjectRelease();
  *a1 = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D78692A0(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = sub_1D789E300(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[2 * a2 + 4];
    if (a1 != a2 || &v4[2 * a1 + 4] >= (void *)&v16[16 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[2 * a1 + 4], v16, 16 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = sub_1D7A9D008();
  __break(1u);
  return result;
}

uint64_t sub_1D7869410@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_1D786895C(a1, a2);
}

uint64_t IdentityCredentialPayloadBuilder.__allocating_init(with:dateProvider:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v7 = objc_allocWithZone(v3);
  return IdentityCredentialPayloadBuilder.init(with:dateProvider:)(a1, a2, a3);
}

uint64_t IdentityCredentialPayloadBuilder.init(with:dateProvider:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_1D7A9C028();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7, v9, v10, v11, v12, v13, v14, v15);
  uint64_t v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = &v3[OBJC_IVAR____TtC13CoreIDVShared32IdentityCredentialPayloadBuilder_version];
  *(void *)uint64_t v18 = 3157553;
  *((void *)v18 + 1) = 0xE300000000000000;
  *(void *)&v3[OBJC_IVAR____TtC13CoreIDVShared32IdentityCredentialPayloadBuilder_randomDataSize] = 32;
  *(void *)&v3[OBJC_IVAR____TtC13CoreIDVShared32IdentityCredentialPayloadBuilder_cborDataTag] = 24;
  uint64_t v19 = v3;
  sub_1D7A9C008();
  uint64_t v20 = sub_1D7A9BFD8();
  unint64_t v22 = v21;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v17, v7);
  if (v22 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    uint64_t v24 = (uint64_t *)&v19[OBJC_IVAR____TtC13CoreIDVShared32IdentityCredentialPayloadBuilder_identifierStringData];
    *uint64_t v24 = v20;
    v24[1] = v22;
    *(_OWORD *)&v19[OBJC_IVAR____TtC13CoreIDVShared32IdentityCredentialPayloadBuilder_kidRange] = xmmword_1D7AA0AA0;
    sub_1D7869658(a1, (uint64_t)&v19[OBJC_IVAR____TtC13CoreIDVShared32IdentityCredentialPayloadBuilder_delegate]);
    uint64_t v25 = &v19[OBJC_IVAR____TtC13CoreIDVShared32IdentityCredentialPayloadBuilder_dateProvider];
    *(void *)uint64_t v25 = a2;
    *((void *)v25 + 1) = a3;

    BOOL v26 = (objc_class *)type metadata accessor for IdentityCredentialPayloadBuilder();
    v28.receiver = v19;
    v28.super_class = v26;
    id v27 = objc_msgSendSuper2(&v28, sel_init);
    __swift_destroy_boxed_opaque_existential_1(a1);
    return (uint64_t)v27;
  }
  return result;
}

uint64_t sub_1D7869658(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t type metadata accessor for IdentityCredentialPayloadBuilder()
{
  return self;
}

uint64_t sub_1D78696E0(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  v2[7] = type metadata accessor for ISO18013Package.Document();
  v2[8] = swift_task_alloc();
  uint64_t v3 = sub_1D7A9B328();
  v2[9] = v3;
  v2[10] = *(void *)(v3 - 8);
  v2[11] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_1D78697D0, 0, 0);
}

uint64_t sub_1D78697D0()
{
  uint64_t v1 = sub_1D786D398(v0[5]);
  v0[12] = v1;
  uint64_t v2 = v1;
  v0[13] = sub_1D786E15C(v1);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[14] = (uint64_t)v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1D78698E0;
  uint64_t v4 = v0[11];
  uint64_t v5 = v0[5];
  return sub_1D7869D74(v4, v5, v2);
}

uint64_t sub_1D78698E0()
{
  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_1D7869D04;
  }
  else
  {
    uint64_t v2 = sub_1D7869A0C;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

uint64_t sub_1D7869A0C()
{
  uint64_t v32 = v0;
  uint64_t v1 = v0;
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[13];
  uint64_t v5 = v0[10];
  uint64_t v4 = v0[11];
  uint64_t v7 = (char *)v0[8];
  uint64_t v6 = v0[9];
  uint64_t v9 = v0[6];
  uint64_t v8 = v0[7];
  uint64_t v10 = v0[5];
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(&v7[*(int *)(v8 + 20)], v4, v6);
  *(void *)uint64_t v7 = v3;
  uint64_t v11 = *(void *)(v9 + OBJC_IVAR____TtC13CoreIDVShared32IdentityCredentialPayloadBuilder_version);
  uint64_t v12 = *(void *)(v9 + OBJC_IVAR____TtC13CoreIDVShared32IdentityCredentialPayloadBuilder_version + 8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA842418);
  uint64_t v13 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EA8422D0) - 8);
  unint64_t v14 = (*(unsigned __int8 *)(*(void *)v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v13 + 80);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_1D7AA08E0;
  uint64_t v16 = (void *)(v15 + v14);
  uint64_t v17 = v15 + v14 + v13[14];
  uint64_t v18 = *(void *)(v10 + 16);
  void *v16 = *(void *)(v10 + 8);
  v16[1] = v18;
  sub_1D786E970((uint64_t)v7, v17, (uint64_t (*)(void))type metadata accessor for ISO18013Package.Document);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v19 = sub_1D785F124(v15);
  v31[0] = *(unsigned char *)v10;
  sub_1D786D1B0(v31);
  v1[2] = v11;
  v1[3] = v12;
  v1[4] = v19;
  sub_1D786E85C();
  uint64_t v20 = sub_1D7A9B3C8();
  uint64_t v29 = v21;
  uint64_t v30 = v20;
  uint64_t v22 = v1[10];
  uint64_t v23 = v1[11];
  uint64_t v24 = v1[8];
  uint64_t v25 = v1[9];
  swift_release();
  if (v2)
  {
    sub_1D7871A78(v24, (uint64_t (*)(void))type metadata accessor for ISO18013Package.Document);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v23, v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    BOOL v26 = (uint64_t (*)(void))v1[1];
    return v26();
  }
  else
  {
    sub_1D7871A78(v24, (uint64_t (*)(void))type metadata accessor for ISO18013Package.Document);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v23, v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    objc_super v28 = (uint64_t (*)(uint64_t, uint64_t))v1[1];
    return v28(v30, v29);
  }
}

uint64_t sub_1D7869D04()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1D7869D74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[30] = a3;
  v4[31] = v3;
  v4[28] = a1;
  v4[29] = a2;
  uint64_t v5 = sub_1D7A9BD88();
  v4[32] = v5;
  v4[33] = *(void *)(v5 - 8);
  v4[34] = swift_task_alloc();
  uint64_t v6 = sub_1D7A9B838();
  v4[35] = v6;
  v4[36] = *(void *)(v6 - 8);
  v4[37] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA842478);
  v4[38] = swift_task_alloc();
  v4[39] = swift_task_alloc();
  uint64_t v7 = sub_1D7A9B5F8();
  v4[40] = v7;
  v4[41] = *(void *)(v7 - 8);
  v4[42] = swift_task_alloc();
  uint64_t v8 = sub_1D7A9B388();
  v4[43] = v8;
  v4[44] = *(void *)(v8 - 8);
  v4[45] = swift_task_alloc();
  v4[46] = type metadata accessor for ISO18013MobileSecurityObject(0);
  v4[47] = swift_task_alloc();
  v4[48] = type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo(0);
  v4[49] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9118);
  v4[50] = swift_task_alloc();
  uint64_t v9 = sub_1D7A9B148();
  v4[51] = v9;
  v4[52] = *(void *)(v9 - 8);
  v4[53] = swift_task_alloc();
  v4[54] = swift_task_alloc();
  v4[55] = swift_task_alloc();
  v4[56] = swift_task_alloc();
  v4[57] = type metadata accessor for ISO18013MobileSecurityObject.DeviceKeyInfo(0);
  v4[58] = swift_task_alloc();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA842300);
  v4[59] = v10;
  v4[60] = *(void *)(v10 - 8);
  v4[61] = swift_task_alloc();
  v4[62] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_1D786A16C, 0, 0);
}

uint64_t sub_1D786A16C()
{
  uint64_t v148 = v1;
  uint64_t v2 = v1;
  v147[2] = *MEMORY[0x1E4F143B8];
  uint64_t v130 = v1[60];
  uint64_t v134 = v1[61];
  uint64_t v128 = v1[59];
  uint64_t v3 = v1[30];
  uint64_t v4 = (void *)MEMORY[0x1E4FBC860];
  unint64_t v5 = sub_1D785F118(MEMORY[0x1E4FBC860]);
  uint64_t v6 = v3 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(v3 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v3 + 64);
  int64_t v10 = (unint64_t)(63 - v7) >> 6;
  swift_bridgeObjectRetain();
  int64_t v11 = 0;
  uint64_t v12 = (uint64_t *)&unk_1EA842300;
  v144 = v2;
  uint64_t v119 = v3 + 64;
  uint64_t v120 = v3;
  int64_t v118 = v10;
  unint64_t v125 = v5;
  if (!v9) {
    goto LABEL_7;
  }
LABEL_5:
  uint64_t v121 = (v9 - 1) & v9;
  int64_t v122 = v11;
  unint64_t v13 = __clz(__rbit64(v9)) | (v11 << 6);
LABEL_18:
  uint64_t v20 = *(void *)(v3 + 56);
  uint64_t v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v13);
  uint64_t v22 = v21[1];
  uint64_t v123 = *v21;
  uint64_t v23 = *(void *)(v20 + 8 * v13);
  uint64_t v24 = sub_1D7860E60(v4);
  uint64_t v126 = v23 + 64;
  uint64_t v25 = -1 << *(unsigned char *)(v23 + 32);
  if (-v25 < 64) {
    uint64_t v26 = ~(-1 << -(char)v25);
  }
  else {
    uint64_t v26 = -1;
  }
  unint64_t v27 = v26 & *(void *)(v23 + 64);
  int64_t v127 = (unint64_t)(63 - v25) >> 6;
  uint64_t v124 = v22;
  swift_bridgeObjectRetain();
  uint64_t v138 = v23;
  swift_bridgeObjectRetain();
  int64_t v28 = 0;
  while (1)
  {
    if (v27)
    {
      unint64_t v31 = __clz(__rbit64(v27));
      uint64_t v32 = (uint64_t *)((v27 - 1) & v27);
      unint64_t v33 = v31 | (v28 << 6);
      goto LABEL_42;
    }
    int64_t v34 = v28 + 1;
    if (__OFADD__(v28, 1))
    {
      __break(1u);
LABEL_82:
      uint64_t v55 = 1;
LABEL_69:
      uint64_t v57 = v2[57];
      uint64_t v56 = v2[58];
      uint64_t v58 = v2[56];
      uint64_t v139 = v2[54];
      uint64_t v59 = v2[52];
      uint64_t v131 = v2[50];
      uint64_t v135 = v2[51];
      uint64_t v60 = v144[31];
      uint64_t v61 = (int *)v24;
      uint64_t v62 = (char *)v4 + *(int *)(v24 + 40);
      uint64_t v63 = sub_1D7A9B458();
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v63 - 8) + 16))(v56, v62, v63);
      unint64_t v64 = (uint64_t *)(v56 + *(int *)(v57 + 20));
      *unint64_t v64 = v55;
      v64[1] = v0;
      *(void *)(v56 + *(int *)(v57 + 24)) = 0;
      (*(void (**)(void))(*(void *)(v60
                                    + OBJC_IVAR____TtC13CoreIDVShared32IdentityCredentialPayloadBuilder_dateProvider
                                    + 8)
                        + 8))();
      unint64_t v145 = v61;
      sub_1D78614F8((uint64_t)v4 + v61[7], v131, &qword_1EBDF9118);
      uint64_t v65 = *(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 16);
      v65(v139, v58, v135);
      int v66 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v131, 1, v135);
      uint64_t v67 = v144[55];
      uint64_t v68 = v144[51];
      uint64_t v69 = v144[52];
      uint64_t v70 = v144[50];
      if (v66 == 1)
      {
        unint64_t v71 = *(void (**)(uint64_t, uint64_t, uint64_t))(v69 + 32);
        v71(v144[55], v144[54], v144[51]);
        sub_1D7871C4C(v70, &qword_1EBDF9118);
      }
      else
      {
        (*(void (**)(void, void))(v69 + 8))(v144[54], v144[51]);
        unint64_t v71 = *(void (**)(uint64_t, uint64_t, uint64_t))(v69 + 32);
        v71(v67, v70, v68);
      }
      if (sub_1D7A9B0D8())
      {
        v71(v144[53], v144[55], v144[51]);
      }
      else
      {
        uint64_t v72 = v144[56];
        uint64_t v73 = v144[53];
        uint64_t v74 = v144[51];
        (*(void (**)(void, uint64_t))(v144[52] + 8))(v144[55], v74);
        v65(v73, v72, v74);
      }
      v75 = v71;
      uint64_t v76 = v144[55];
      uint64_t v77 = v144[56];
      uint64_t v78 = v144[52];
      uint64_t v79 = v144[51];
      uint64_t v24 = (uint64_t)v144;
      unint64_t v81 = (int *)v144[48];
      uint64_t v80 = v144[49];
      uint64_t v140 = v144[31];
      uint64_t v82 = v144[29];
      v75(v76, v144[53], v79);
      v65(v80, v77, v79);
      v65(v80 + v81[5], v76, v79);
      v65(v80 + v81[6], v82 + v145[8], v79);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v78 + 56))(v80 + v81[7], 1, 1, v79);
      BOOL v132 = *(unsigned __int8 *)(v82 + v145[9]) < 2u;
      uint64_t v83 = *(void *)(v140 + OBJC_IVAR____TtC13CoreIDVShared32IdentityCredentialPayloadBuilder_version + 8);
      uint64_t v129 = *(void *)(v140 + OBJC_IVAR____TtC13CoreIDVShared32IdentityCredentialPayloadBuilder_version);
      uint64_t v84 = *(void *)&aSha256_1[8 * *(char *)(v82 + v145[13])];
      uint64_t v85 = v144[49];
      unint64_t v87 = (int *)v144[46];
      uint64_t v86 = (void *)v144[47];
      uint64_t v88 = v144[44];
      uint64_t v136 = v144[45];
      uint64_t v141 = v144[43];
      uint64_t v89 = v144[29];
      sub_1D786E970(v144[58], (uint64_t)v86 + v87[7], type metadata accessor for ISO18013MobileSecurityObject.DeviceKeyInfo);
      uint64_t v2 = *(void **)(v89 + 8);
      uint64_t v90 = *(void *)(v89 + 16);
      sub_1D786E970(v85, (uint64_t)v86 + v87[9], type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo);
      *uint64_t v86 = v129;
      v86[1] = v83;
      v86[2] = v84;
      v86[3] = 0xE700000000000000;
      v86[4] = v125;
      unint64_t v91 = (void *)((char *)v86 + v87[8]);
      *unint64_t v91 = v2;
      v91[1] = v90;
      *((unsigned char *)v86 + v87[10]) = v132;
      LOBYTE(v2) = *(unsigned char *)v89;
      LOBYTE(v147[0]) = *(unsigned char *)v89;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v144[63] = sub_1D786D1B0((char *)v147);
      (*(void (**)(uint64_t, void, uint64_t))(v88 + 104))(v136, *MEMORY[0x1E4F50DA8], v141);
      sub_1D7A9B398();
      sub_1D7871E20(&qword_1EA842480, (void (*)(uint64_t))type metadata accessor for ISO18013MobileSecurityObject);
      uint64_t v0 = 0;
      uint64_t v32 = (uint64_t *)sub_1D7A9B3C8();
      int64_t v10 = v92;
      v144[26] = v32;
      v144[27] = v92;
      sub_1D7871AD8();
      uint64_t v42 = sub_1D7A9B3B8();
      v144[64] = v42;
      v144[65] = v43;
LABEL_79:
      uint64_t v93 = v42;
      unint64_t v94 = v43;
      uint64_t v95 = *(void *)(v24 + 232);
      sub_1D78607E8((uint64_t)v32, v10);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA842490);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1D7AA08E0;
      *(void *)(inited + 32) = 1;
      uint64_t v97 = v145[12];
      *(_DWORD *)(v24 + 616) = v97;
      *(void *)(inited + 40) = qword_1D7AA0F38[*(char *)(v95 + v97)];
      unint64_t v98 = sub_1D7860F64(inited);
      *(void *)(v24 + 528) = v98;
      swift_setDeallocating();
      LOBYTE(v147[0]) = (_BYTE)v2;
      sub_1D7860790(v93, v94);
      *(void *)(v24 + 536) = sub_1D786D1B0((char *)v147);
      *(void *)(v24 + 160) = v98;
      *(void *)(v24 + 168) = v93;
      *(void *)(v24 + 176) = v94;
      sub_1D7871B2C();
      uint64_t v99 = sub_1D7A9B3C8();
      *(void *)(v24 + 544) = v99;
      *(void *)(v24 + 552) = v100;
      if (v0)
      {
        uint64_t v146 = *(void *)(v24 + 464);
        uint64_t v142 = *(void *)(v24 + 448);
        uint64_t v101 = *(void *)(v24 + 408);
        uint64_t v102 = *(void *)(v24 + 416);
        uint64_t v133 = *(void *)(v24 + 392);
        uint64_t v137 = *(void *)(v24 + 440);
        uint64_t v103 = *(void *)(v24 + 376);
        swift_release();
        swift_release();
        sub_1D78607E8(v93, v94);
        sub_1D7871A78(v103, type metadata accessor for ISO18013MobileSecurityObject);
        sub_1D7871A78(v133, type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo);
        uint64_t v104 = *(void (**)(uint64_t, uint64_t))(v102 + 8);
        v104(v137, v101);
        v104(v142, v101);
        sub_1D7871A78(v146, type metadata accessor for ISO18013MobileSecurityObject.DeviceKeyInfo);
        swift_bridgeObjectRelease();
        sub_1D78607E8(v93, v94);
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v52 = (uint64_t (*)(void))v144[1];
        return v52();
      }
      else
      {
        uint64_t v105 = v99;
        unint64_t v106 = v100;
        if (qword_1EBDF9DC8 != -1) {
          swift_once();
        }
        uint64_t v108 = v144[41];
        uint64_t v107 = v144[42];
        uint64_t v109 = v144[40];
        uint64_t v110 = v144[31];
        uint64_t v111 = __swift_project_value_buffer(v109, (uint64_t)qword_1EBDFBE70);
        v144[70] = v111;
        swift_beginAccess();
        uint64_t v112 = *(void (**)(uint64_t, uint64_t, uint64_t))(v108 + 16);
        v144[71] = v112;
        v144[72] = (v108 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
        v112(v107, v111, v109);
        sub_1D7860790(v105, v106);
        sub_1D7923E8C(v107, v105, v106);
        sub_1D78607E8(v105, v106);
        v113 = *(void (**)(uint64_t, uint64_t))(v108 + 8);
        v144[73] = v113;
        v144[74] = (v108 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
        v113(v107, v109);
        uint64_t v114 = *(void *)(v110 + OBJC_IVAR____TtC13CoreIDVShared32IdentityCredentialPayloadBuilder_delegate + 24);
        uint64_t v115 = *(void *)(v110 + OBJC_IVAR____TtC13CoreIDVShared32IdentityCredentialPayloadBuilder_delegate + 32);
        __swift_project_boxed_opaque_existential_1((void *)(v110 + OBJC_IVAR____TtC13CoreIDVShared32IdentityCredentialPayloadBuilder_delegate), v114);
        int64_t v143 = (uint64_t (*)(void *, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(*(void *)(v115 + 8) + **(int **)(v115 + 8));
        id v116 = (void *)swift_task_alloc();
        v144[75] = v116;
        *id v116 = v144;
        v116[1] = sub_1D786B26C;
        uint64_t v117 = v144[31];
        return v143(v144 + 8, v117, v105, v106, v114, v115);
      }
    }
    if (v34 >= v127) {
      goto LABEL_6;
    }
    unint64_t v35 = *(void *)(v126 + 8 * v34);
    ++v28;
    if (!v35)
    {
      int64_t v28 = v34 + 1;
      if (v34 + 1 >= v127) {
        goto LABEL_6;
      }
      unint64_t v35 = *(void *)(v126 + 8 * v28);
      if (!v35)
      {
        int64_t v28 = v34 + 2;
        if (v34 + 2 >= v127) {
          goto LABEL_6;
        }
        unint64_t v35 = *(void *)(v126 + 8 * v28);
        if (!v35)
        {
          int64_t v28 = v34 + 3;
          if (v34 + 3 >= v127) {
            goto LABEL_6;
          }
          unint64_t v35 = *(void *)(v126 + 8 * v28);
          if (!v35)
          {
            int64_t v36 = v34 + 4;
            if (v36 >= v127)
            {
LABEL_6:
              swift_release();
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v147[0] = v125;
              sub_1D78A091C(v24, v123, v124, isUniquelyReferenced_nonNull_native);
              unint64_t v15 = v147[0];
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v6 = v119;
              uint64_t v3 = v120;
              uint64_t v4 = (void *)MEMORY[0x1E4FBC860];
              int64_t v10 = v118;
              unint64_t v9 = v121;
              int64_t v11 = v122;
              unint64_t v125 = v15;
              if (v121) {
                goto LABEL_5;
              }
LABEL_7:
              BOOL v16 = __OFADD__(v11, 1);
              int64_t v17 = v11 + 1;
              if (v16) {
                goto LABEL_89;
              }
              if (v17 >= v10) {
                goto LABEL_64;
              }
              unint64_t v18 = *(void *)(v6 + 8 * v17);
              if (!v18)
              {
                int64_t v19 = v17 + 1;
                if (v17 + 1 >= v10) {
                  goto LABEL_64;
                }
                unint64_t v18 = *(void *)(v6 + 8 * v19);
                if (!v18)
                {
                  int64_t v19 = v17 + 2;
                  if (v17 + 2 >= v10) {
                    goto LABEL_64;
                  }
                  unint64_t v18 = *(void *)(v6 + 8 * v19);
                  if (!v18)
                  {
                    int64_t v19 = v17 + 3;
                    if (v17 + 3 >= v10)
                    {
LABEL_64:
                      swift_release();
                      uint64_t v4 = (void *)v2[29];
                      uint64_t v24 = type metadata accessor for CredentialBuilderPayloadDetails(0);
                      objc_super v54 = (void *)((char *)v4 + *(int *)(v24 + 44));
                      uint64_t v55 = *v54;
                      uint64_t v0 = v54[1];
                      if (*v54)
                      {
                        if (v55 == 1)
                        {
                          uint64_t v0 = 0;
                          goto LABEL_69;
                        }
                      }
                      else if (!v0)
                      {
                        goto LABEL_82;
                      }
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      goto LABEL_69;
                    }
                    unint64_t v18 = *(void *)(v6 + 8 * v19);
                    if (!v18)
                    {
                      while (1)
                      {
                        int64_t v17 = v19 + 1;
                        if (__OFADD__(v19, 1)) {
                          goto LABEL_90;
                        }
                        if (v17 >= v10) {
                          goto LABEL_64;
                        }
                        unint64_t v18 = *(void *)(v6 + 8 * v17);
                        ++v19;
                        if (v18) {
                          goto LABEL_17;
                        }
                      }
                    }
                  }
                }
                int64_t v17 = v19;
              }
LABEL_17:
              uint64_t v121 = (v18 - 1) & v18;
              int64_t v122 = v17;
              unint64_t v13 = __clz(__rbit64(v18)) + (v17 << 6);
              goto LABEL_18;
            }
            unint64_t v35 = *(void *)(v126 + 8 * v36);
            if (!v35)
            {
              while (1)
              {
                int64_t v28 = v36 + 1;
                if (__OFADD__(v36, 1)) {
                  break;
                }
                if (v28 >= v127) {
                  goto LABEL_6;
                }
                unint64_t v35 = *(void *)(v126 + 8 * v28);
                ++v36;
                if (v35) {
                  goto LABEL_41;
                }
              }
              __break(1u);
LABEL_89:
              __break(1u);
LABEL_90:
              __break(1u);
            }
            int64_t v28 = v36;
          }
        }
      }
    }
LABEL_41:
    uint64_t v32 = (uint64_t *)((v35 - 1) & v35);
    unint64_t v33 = __clz(__rbit64(v35)) + (v28 << 6);
LABEL_42:
    uint64_t v37 = v2[61];
    uint64_t v38 = v2[62];
    uint64_t v39 = v2[29];
    sub_1D78614F8(*(void *)(v138 + 56) + *(void *)(v130 + 72) * v33, v38, v12);
    sub_1D7871D78(v38, v37, v12);
    uint64_t v41 = *(void *)(v134 + 8);
    uint64_t v40 = *(void *)(v134 + 16);
    LOBYTE(v147[0]) = *(unsigned char *)(v39 + *(int *)(type metadata accessor for CredentialBuilderPayloadDetails(0) + 52));
    uint64_t v0 = 0;
    uint64_t v42 = (uint64_t)computeISO18013Digest(algorithm:data:)((unsigned __int8 *)v147, v41, v40);
    uint64_t v44 = *(void *)(v2[61] + *(int *)(v128 + 48));
    if (v44 < 0)
    {
      __break(1u);
LABEL_77:
      __break(1u);
LABEL_78:
      __break(1u);
      goto LABEL_79;
    }
    int64_t v10 = v42;
    uint64_t v4 = (void *)v43;
    unint64_t v145 = (int *)v32;
    uint64_t v0 = v28;
    uint64_t v32 = v12;
    sub_1D7860790(v42, v43);
    char v45 = swift_isUniquelyReferenced_nonNull_native();
    v147[0] = v24;
    unint64_t v46 = sub_1D7A18648(v44);
    uint64_t v47 = *(void *)(v24 + 16);
    BOOL v48 = (v43 & 1) == 0;
    uint64_t v42 = v47 + v48;
    if (__OFADD__(v47, v48)) {
      goto LABEL_77;
    }
    LOBYTE(v2) = v43;
    if (*(void *)(v24 + 24) < v42) {
      break;
    }
    if (v45)
    {
      if (v43) {
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v42 = (uint64_t)sub_1D7972EEC();
      uint64_t v24 = v147[0];
      if (v2)
      {
LABEL_22:
        uint64_t v29 = *(void *)(v24 + 56) + 16 * v46;
        sub_1D78607E8(*(void *)v29, *(void *)(v29 + 8));
        *(void *)uint64_t v29 = v10;
        *(void *)(v29 + 8) = v4;
        goto LABEL_23;
      }
    }
LABEL_50:
    *(void *)(v24 + 8 * (v46 >> 6) + 64) |= 1 << v46;
    *(void *)(*(void *)(v24 + 48) + 8 * v46) = v44;
    uint64_t v49 = (int64_t *)(*(void *)(v24 + 56) + 16 * v46);
    *uint64_t v49 = v10;
    v49[1] = (int64_t)v4;
    uint64_t v50 = *(void *)(v24 + 16);
    BOOL v16 = __OFADD__(v50, 1);
    uint64_t v51 = v50 + 1;
    if (v16) {
      goto LABEL_78;
    }
    *(void *)(v24 + 16) = v51;
LABEL_23:
    uint64_t v2 = v144;
    uint64_t v30 = v144[61];
    swift_bridgeObjectRelease();
    sub_1D78607E8(v10, (unint64_t)v4);
    uint64_t v12 = v32;
    sub_1D7871C4C(v30, v32);
    int64_t v28 = v0;
    unint64_t v27 = (unint64_t)v145;
  }
  sub_1D796F944(v42, v45);
  uint64_t v24 = v147[0];
  uint64_t v42 = sub_1D7A18648(v44);
  if ((v2 & 1) == (v43 & 1))
  {
    unint64_t v46 = v42;
    if (v2) {
      goto LABEL_22;
    }
    goto LABEL_50;
  }
  return sub_1D7A9D4F8();
}

uint64_t sub_1D786B26C()
{
  *(void *)(*(void *)v1 + 608) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1D786C46C;
  }
  else {
    uint64_t v2 = sub_1D786B3AC;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

uint64_t sub_1D786B3AC()
{
  uint64_t v108 = v0;
  uint64_t v107 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(int *)(v0 + 616);
  uint64_t v2 = *(void *)(v0 + 232);
  long long v3 = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v0 + 32) = v3;
  *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 96);
  uint64_t v104 = (void *)(v0 + 16);
  if (qword_1D7AA0F38[*(char *)(v0 + 16)] != qword_1D7AA0F38[*(char *)(v2 + v1)])
  {
    unint64_t v22 = *(void *)(v0 + 552);
    uint64_t v23 = *(void *)(v0 + 544);
    unint64_t v24 = *(void *)(v0 + 520);
    uint64_t v25 = *(void *)(v0 + 512);
    uint64_t v101 = *(void *)(v0 + 448);
    uint64_t v103 = *(void *)(v0 + 464);
    uint64_t v26 = *(void *)(v0 + 408);
    uint64_t v27 = *(void *)(v0 + 416);
    uint64_t v91 = *(void *)(v0 + 392);
    uint64_t v96 = *(void *)(v0 + 440);
    uint64_t v86 = *(void *)(v0 + 376);
    LOWORD(v106) = 360;
    unint64_t v28 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000062, 0x80000001D7ABDED0, (__int16 *)&v106, 0, v28, 0xD000000000000055, 0x80000001D7ABDF40, v29, 0xD000000000000023, 0x80000001D7ABDFA0, 177);
    swift_willThrow();
    sub_1D78607E8(v23, v22);
    swift_release();
    swift_bridgeObjectRelease();
    sub_1D78607E8(v25, v24);
    swift_release();
    sub_1D7871B80(v104);
    sub_1D78607E8(v25, v24);
    sub_1D7871A78(v86, type metadata accessor for ISO18013MobileSecurityObject);
    sub_1D7871A78(v91, type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo);
    uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
    v30(v96, v26);
    v30(v101, v26);
    goto LABEL_6;
  }
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v0 + 584);
  uint64_t v5 = *(void *)(v0 + 336);
  uint64_t v6 = *(void *)(v0 + 320);
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 568))(v5, *(void *)(v0 + 560), v6);
  sub_1D7871BF0((void *)(v0 + 16));
  sub_1D7923EA4(v5, v0 + 16);
  sub_1D7871B80((void *)(v0 + 16));
  v4(v5, v6);
  if (*(void *)(v0 + 24))
  {
    uint64_t v7 = *(void *)(v0 + 312);
    uint64_t v8 = *(void *)(v0 + 48);
    unint64_t v9 = *(void *)(v0 + 56);
    sub_1D7860790(*(void *)(v0 + 512), *(void *)(v0 + 520));
    swift_bridgeObjectRetain();
    sub_1D7860790(v8, v9);
    sub_1D7A9B318();
    uint64_t v10 = sub_1D7A9B328();
    uint64_t v11 = *(void *)(v10 - 8);
    int v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v7, 1, v10);
    unint64_t v13 = *(void *)(v0 + 552);
    uint64_t v14 = *(void *)(v0 + 544);
    unint64_t v15 = *(void *)(v0 + 520);
    uint64_t v16 = *(void *)(v0 + 512);
    uint64_t v100 = *(void *)(v0 + 448);
    uint64_t v103 = *(void *)(v0 + 464);
    uint64_t v17 = *(void *)(v0 + 416);
    uint64_t v90 = *(void *)(v0 + 440);
    uint64_t v95 = *(void *)(v0 + 408);
    uint64_t v85 = *(void *)(v0 + 392);
    uint64_t v81 = *(void *)(v0 + 376);
    uint64_t v18 = *(void *)(v0 + 312);
    if (v12 == 1)
    {
      sub_1D7871C4C(*(void *)(v0 + 312), &qword_1EA842478);
      LOWORD(v106) = 358;
      unint64_t v19 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000004ALL, 0x80000001D7ABE040, (__int16 *)&v106, 0, v19, 0xD000000000000055, 0x80000001D7ABDF40, v20, 0xD000000000000023, 0x80000001D7ABDFA0, 189);
      swift_willThrow();
      sub_1D78607E8(v14, v13);
      swift_release();
      swift_bridgeObjectRelease();
      sub_1D78607E8(v16, v15);
      swift_release();
      sub_1D7871B80(v104);
      sub_1D78607E8(v16, v15);
      sub_1D7871A78(v81, type metadata accessor for ISO18013MobileSecurityObject);
      sub_1D7871A78(v85, type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo);
      uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
      v21(v90, v95);
      v21(v100, v95);
LABEL_6:
      uint64_t v31 = v103;
LABEL_7:
      sub_1D7871A78(v31, type metadata accessor for ISO18013MobileSecurityObject.DeviceKeyInfo);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v32 = *(uint64_t (**)(void))(v0 + 8);
      goto LABEL_8;
    }
    uint64_t v83 = *(void *)(v0 + 224);
    sub_1D78607E8(v14, v13);
    swift_release();
    swift_bridgeObjectRelease();
    sub_1D78607E8(v16, v15);
    swift_release();
    sub_1D7871B80(v104);
    sub_1D78607E8(v16, v15);
    sub_1D7871A78(v81, type metadata accessor for ISO18013MobileSecurityObject);
    sub_1D7871A78(v85, type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo);
    uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
    v44(v90, v95);
    v44(v100, v95);
    sub_1D7871A78(v103, type metadata accessor for ISO18013MobileSecurityObject.DeviceKeyInfo);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v83, v18, v10);
  }
  else
  {
    unint64_t v34 = *(void *)(v0 + 40);
    if (v34 >> 60 == 15)
    {
      unint64_t v35 = *(void *)(v0 + 552);
      uint64_t v36 = *(void *)(v0 + 544);
      unint64_t v37 = *(void *)(v0 + 520);
      uint64_t v38 = *(void *)(v0 + 512);
      uint64_t v102 = *(void *)(v0 + 448);
      uint64_t v103 = *(void *)(v0 + 464);
      uint64_t v40 = *(void *)(v0 + 408);
      uint64_t v39 = *(void *)(v0 + 416);
      uint64_t v92 = *(void *)(v0 + 392);
      uint64_t v97 = *(void *)(v0 + 440);
      uint64_t v87 = *(void *)(v0 + 376);
      LOWORD(v106) = 0;
      unint64_t v41 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000019, 0x80000001D7ABDFD0, (__int16 *)&v106, 0, v41, 0xD000000000000055, 0x80000001D7ABDF40, v42, 0xD000000000000023, 0x80000001D7ABDFA0, 209);
      swift_willThrow();
      sub_1D78607E8(v36, v35);
      swift_release();
      swift_bridgeObjectRelease();
      sub_1D78607E8(v38, v37);
      swift_release();
      sub_1D7871B80(v104);
      sub_1D78607E8(v38, v37);
      sub_1D7871A78(v87, type metadata accessor for ISO18013MobileSecurityObject);
      sub_1D7871A78(v92, type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo);
      unint64_t v43 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
      v43(v97, v40);
      v43(v102, v40);
      goto LABEL_6;
    }
    uint64_t v45 = *(void *)(v0 + 32);
    long long v106 = xmmword_1D7AA0AB0;
    sub_1D7860790(v45, v34);
    sub_1D7A9B048();
    sub_1D7A9B048();
    sub_1D7860790(0, 0xC000000000000000);
    sub_1D7871E20(&qword_1EA8424A0, MEMORY[0x1E4F25170]);
    sub_1D7A9B828();
    *(void *)(v0 + 634) = 0;
    *(void *)(v0 + 640) = 0;
    sub_1D7A9B808();
    sub_1D78607E8(0, 0xC000000000000000);
    uint64_t v88 = *(void *)(v0 + 512);
    unint64_t v93 = *(void *)(v0 + 520);
    uint64_t v46 = *(void *)(v0 + 296);
    uint64_t v98 = *(void *)(v0 + 304);
    uint64_t v48 = *(void *)(v0 + 280);
    uint64_t v47 = *(void *)(v0 + 288);
    uint64_t v50 = *(void *)(v0 + 264);
    uint64_t v49 = *(void *)(v0 + 272);
    uint64_t v51 = *(void *)(v0 + 256);
    sub_1D7A9B818();
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v49, v51);
    sub_1D78607E8(0, 0xC000000000000000);
    sub_1D7871E20(&qword_1EA8424A8, MEMORY[0x1E4F24F80]);
    uint64_t v52 = sub_1D7A9BD78();
    uint64_t v54 = sub_1D78D1370(v52, v53);
    swift_bridgeObjectRelease();
    uint64_t v55 = sub_1D78D1EB0(v54);
    unint64_t v57 = v56;
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v46, v48);
    uint64_t v80 = v55;
    unint64_t v82 = v57;
    uint64_t v58 = sub_1D7A9B058();
    unint64_t v60 = v59;
    uint64_t v61 = *(void *)(v0 + 48);
    unint64_t v62 = *(void *)(v0 + 56);
    sub_1D7860790(v88, v93);
    sub_1D7860790(v58, v60);
    sub_1D7860790(v61, v62);
    unint64_t v94 = v60;
    sub_1D7A9B318();
    uint64_t v63 = sub_1D7A9B328();
    uint64_t v64 = *(void *)(v63 - 8);
    int v65 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v98, 1, v63);
    unint64_t v66 = *(void *)(v0 + 552);
    uint64_t v67 = *(void *)(v0 + 544);
    uint64_t v74 = *(void *)(v0 + 512);
    unint64_t v75 = *(void *)(v0 + 520);
    uint64_t v99 = *(void *)(v0 + 464);
    uint64_t v89 = *(void *)(v0 + 448);
    uint64_t v68 = *(void *)(v0 + 416);
    uint64_t v78 = *(void *)(v0 + 440);
    uint64_t v79 = *(void *)(v0 + 408);
    uint64_t v76 = *(void *)(v0 + 376);
    uint64_t v77 = *(void *)(v0 + 392);
    uint64_t v69 = *(void *)(v0 + 304);
    if (v65 == 1)
    {
      sub_1D7871C4C(*(void *)(v0 + 304), &qword_1EA842478);
      v105[0] = 358;
      unint64_t v70 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000042, 0x80000001D7ABDFF0, v105, 0, v70, 0xD000000000000055, 0x80000001D7ABDF40, v71, 0xD000000000000023, 0x80000001D7ABDFA0, 205);
      swift_willThrow();
      sub_1D78607E8(v67, v66);
      swift_release();
      swift_bridgeObjectRelease();
      sub_1D78607E8(v74, v75);
      swift_release();
      sub_1D78607E8(v80, v82);
      sub_1D7871BDC(v45, v34);
      sub_1D7871B80(v104);
      sub_1D78607E8(v58, v94);
      sub_1D78607E8(v74, v75);
      sub_1D78607E8(v106, *((unint64_t *)&v106 + 1));
      sub_1D7871A78(v76, type metadata accessor for ISO18013MobileSecurityObject);
      sub_1D7871A78(v77, type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo);
      uint64_t v72 = *(void (**)(uint64_t, uint64_t))(v68 + 8);
      v72(v78, v79);
      v72(v89, v79);
      uint64_t v31 = v99;
      goto LABEL_7;
    }
    uint64_t v84 = *(void *)(v0 + 224);
    sub_1D78607E8(v67, v66);
    swift_release();
    swift_bridgeObjectRelease();
    sub_1D78607E8(v74, v75);
    swift_release();
    sub_1D78607E8(v80, v82);
    sub_1D7871BDC(v45, v34);
    sub_1D7871B80(v104);
    sub_1D78607E8(v58, v94);
    sub_1D78607E8(v74, v75);
    sub_1D78607E8(0, 0xC000000000000000);
    sub_1D7871A78(v76, type metadata accessor for ISO18013MobileSecurityObject);
    sub_1D7871A78(v77, type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo);
    uint64_t v73 = *(void (**)(uint64_t, uint64_t))(v68 + 8);
    v73(v78, v79);
    v73(v89, v79);
    sub_1D7871A78(v99, type metadata accessor for ISO18013MobileSecurityObject.DeviceKeyInfo);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v64 + 32))(v84, v69, v63);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v32 = *(uint64_t (**)(void))(v0 + 8);
LABEL_8:
  return v32();
}

uint64_t sub_1D786C46C()
{
  unint64_t v1 = v0[65];
  uint64_t v2 = v0[64];
  uint64_t v11 = v0[56];
  uint64_t v12 = v0[58];
  uint64_t v10 = v0[55];
  uint64_t v4 = v0[51];
  uint64_t v3 = v0[52];
  uint64_t v5 = v0[49];
  uint64_t v6 = v0[47];
  sub_1D78607E8(v0[68], v0[69]);
  swift_release();
  swift_bridgeObjectRelease();
  sub_1D78607E8(v2, v1);
  swift_release();
  sub_1D78607E8(v2, v1);
  sub_1D7871A78(v6, type metadata accessor for ISO18013MobileSecurityObject);
  sub_1D7871A78(v5, type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v7(v10, v4);
  v7(v11, v4);
  sub_1D7871A78(v12, type metadata accessor for ISO18013MobileSecurityObject.DeviceKeyInfo);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t CredentialBuilderSignatureAlgorithm.rawValue.getter()
{
  return qword_1D7AA0F38[*v0];
}

unint64_t sub_1D786C6D4(uint64_t a1, unint64_t a2)
{
  return 0xD00000000000001FLL;
}

unint64_t sub_1D786C7D8(uint64_t a1)
{
  return 0xD000000000000024;
}

id IdentityCredentialPayloadBuilder.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void IdentityCredentialPayloadBuilder.init()()
{
}

id IdentityCredentialPayloadBuilder.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for IdentityCredentialPayloadBuilder();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void CredentialBuilderPayloadDetails.format.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t CredentialBuilderPayloadDetails.docType.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CredentialBuilderPayloadDetails.elements.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CredentialBuilderPayloadDetails.validFrom.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for CredentialBuilderPayloadDetails(0);
  return sub_1D78614F8(v1 + *(int *)(v3 + 28), a1, &qword_1EBDF9118);
}

uint64_t CredentialBuilderPayloadDetails.validUntil.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CredentialBuilderPayloadDetails(0) + 32);
  uint64_t v4 = sub_1D7A9B148();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t CredentialBuilderPayloadDetails.timePolicy.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for CredentialBuilderPayloadDetails(0);
  *a1 = *(unsigned char *)(v1 + *(int *)(result + 36));
  return result;
}

uint64_t CredentialBuilderPayloadDetails.deviceKey.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CredentialBuilderPayloadDetails(0) + 40);
  uint64_t v4 = sub_1D7A9B458();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t CredentialBuilderPayloadDetails.deviceKeyAuthorizations.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for CredentialBuilderPayloadDetails(0) + 44));
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  *a1 = *v3;
  a1[1] = v5;
  return sub_1D786E8D0(v4);
}

uint64_t CredentialBuilderPayloadDetails.signingAlgorithm.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for CredentialBuilderPayloadDetails(0);
  *a1 = *(unsigned char *)(v1 + *(int *)(result + 48));
  return result;
}

uint64_t CredentialBuilderPayloadDetails.digestAlgorithm.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for CredentialBuilderPayloadDetails(0);
  *a1 = *(unsigned char *)(v1 + *(int *)(result + 52));
  return result;
}

uint64_t CredentialBuilderPayloadDetails.KeyAuthorizations.namespaces.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CredentialBuilderPayloadDetails.KeyAuthorizations.dataElements.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CredentialBuilderPayloadDetails.KeyAuthorizations.init(namespaces:dataElements:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t CredentialBuilderPayloadDetails.Element.elementIdentifier.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CredentialBuilderPayloadDetails.Element.elementValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for CredentialBuilderPayloadDetails.Element(0);
  return sub_1D786E970(v1 + *(int *)(v3 + 20), a1, (uint64_t (*)(void))type metadata accessor for AnyCodable);
}

uint64_t CredentialBuilderPayloadDetails.Element.init(elementIdentifier:elementValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = a1;
  a4[1] = a2;
  uint64_t v6 = type metadata accessor for CredentialBuilderPayloadDetails.Element(0);
  return sub_1D7871D10(a3, (uint64_t)a4 + *(int *)(v6 + 20), (uint64_t (*)(void))type metadata accessor for AnyCodable);
}

uint64_t CredentialBuilderPayloadDetails.init(format:docType:elements:validFrom:validUntil:timePolicy:deviceKey:deviceKeyAuthorizations:signingAlgorithm:digestAlgorithm:)@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t *a10, char *a11, char *a12)
{
  char v16 = *a7;
  uint64_t v17 = *a10;
  uint64_t v18 = a10[1];
  char v19 = *a11;
  char v20 = *a12;
  *(unsigned char *)a9 = *a1;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(void *)(a9 + 24) = a4;
  uint64_t v21 = (int *)type metadata accessor for CredentialBuilderPayloadDetails(0);
  sub_1D7871D78(a5, a9 + v21[7], &qword_1EBDF9118);
  uint64_t v22 = a9 + v21[8];
  uint64_t v23 = sub_1D7A9B148();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 32))(v22, a6, v23);
  *(unsigned char *)(a9 + v21[9]) = v16;
  uint64_t v24 = a9 + v21[10];
  uint64_t v25 = sub_1D7A9B458();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 32))(v24, a8, v25);
  uint64_t v27 = (void *)(a9 + v21[11]);
  *uint64_t v27 = v17;
  v27[1] = v18;
  *(unsigned char *)(a9 + v21[12]) = v19;
  *(unsigned char *)(a9 + v21[13]) = v20;
  return result;
}

void CredentialBuilderSignatureDetails.signingAlgorithm.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t CredentialBuilderSignatureDetails.issuerCertificate.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CredentialBuilderSignatureDetails.issuerKey.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_1D786E9D8(v1, *(void *)(v0 + 24));
  return v1;
}

uint64_t CredentialBuilderSignatureDetails.signature.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  sub_1D7860790(v1, *(void *)(v0 + 40));
  return v1;
}

double CredentialBuilderSignatureDetails.init(signingAlgorithm:issuerCertificate:signature:)@<D0>(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(unsigned char *)a5 = *a1;
  *(void *)(a5 + 8) = a2;
  double result = 0.0;
  *(_OWORD *)(a5 + 16) = xmmword_1D7AA0AC0;
  *(void *)(a5 + 32) = a3;
  *(void *)(a5 + 40) = a4;
  return result;
}

unsigned char *CredentialBuilderSignatureDetails.init(signingAlgorithm:issuerKey:signature:)@<X0>(unsigned char *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(unsigned char *)a6 = *result;
  *(void *)(a6 + 8) = 0;
  *(void *)(a6 + 16) = a2;
  *(void *)(a6 + 24) = a3;
  *(void *)(a6 + 32) = a4;
  *(void *)(a6 + 40) = a5;
  return result;
}

CoreIDVShared::CredentialBuilderPayloadFormat_optional __swiftcall CredentialBuilderPayloadFormat.init(rawValue:)(Swift::UInt rawValue)
{
  if (rawValue == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (!rawValue) {
    char v2 = 0;
  }
  *uint64_t v1 = v2;
  return (CoreIDVShared::CredentialBuilderPayloadFormat_optional)rawValue;
}

uint64_t CredentialBuilderPayloadFormat.rawValue.getter()
{
  return *v0;
}

void *sub_1D786CF5C@<X0>(void *result@<X0>, char *a2@<X8>)
{
  if (*result == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (*result) {
    char v3 = v2;
  }
  else {
    char v3 = 0;
  }
  *a2 = v3;
  return result;
}

void sub_1D786CF7C(void *a1@<X8>)
{
  *a1 = *v1;
}

CoreIDVShared::CredentialBuilderSignatureAlgorithm_optional __swiftcall CredentialBuilderSignatureAlgorithm.init(rawValue:)(Swift::Int rawValue)
{
  char v2 = 1;
  switch(rawValue)
  {
    case -36:
      *uint64_t v1 = 3;
      break;
    case -35:
      *uint64_t v1 = 2;
      break;
    case -8:
      goto LABEL_6;
    case -7:
      char v2 = 0;
LABEL_6:
      *uint64_t v1 = v2;
      break;
    default:
      *uint64_t v1 = 4;
      break;
  }
  return (CoreIDVShared::CredentialBuilderSignatureAlgorithm_optional)rawValue;
}

BOOL sub_1D786D060(char *a1, char *a2)
{
  return qword_1D7AA0F38[*a1] == qword_1D7AA0F38[*a2];
}

uint64_t sub_1D786D084()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D786D0D4()
{
  return sub_1D7A9D5E8();
}

uint64_t sub_1D786D10C()
{
  return sub_1D7A9D628();
}

CoreIDVShared::CredentialBuilderSignatureAlgorithm_optional sub_1D786D158(Swift::Int *a1)
{
  return CredentialBuilderSignatureAlgorithm.init(rawValue:)(*a1);
}

void sub_1D786D160(void *a1@<X8>)
{
  *a1 = qword_1D7AA0F38[*v1];
}

CoreIDVShared::CredentialBuilderTimePolicy_optional __swiftcall CredentialBuilderTimePolicy.init(rawValue:)(Swift::UInt rawValue)
{
  char v2 = 3;
  if (rawValue < 3) {
    char v2 = rawValue;
  }
  *uint64_t v1 = v2;
  return (CoreIDVShared::CredentialBuilderTimePolicy_optional)rawValue;
}

uint64_t CredentialBuilderTimePolicy.rawValue.getter()
{
  return *v0;
}

BOOL sub_1D786D194(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

CoreIDVShared::CredentialBuilderTimePolicy_optional sub_1D786D1A8(Swift::UInt *a1)
{
  return CredentialBuilderTimePolicy.init(rawValue:)(*a1);
}

uint64_t sub_1D786D1B0(char *a1)
{
  uint64_t v2 = sub_1D7A9CEA8();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v4, v5, v6, v7, v8, v9, v10);
  uint64_t v12 = &v19[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  char v13 = *a1;
  sub_1D7A9B3F8();
  swift_allocObject();
  uint64_t v14 = sub_1D7A9B3E8();
  if (v13)
  {
    if (qword_1EA841630 != -1) {
      swift_once();
    }
    uint64_t v15 = __swift_project_value_buffer(v2, (uint64_t)qword_1EA846FB8);
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v3 + 16))(v12, v15, v2);
    uint64_t v21 = &type metadata for ISO18013CodingKeyFormat;
    v20[0] = 1;
  }
  else
  {
    if (qword_1EA841630 != -1) {
      swift_once();
    }
    uint64_t v16 = __swift_project_value_buffer(v2, (uint64_t)qword_1EA846FB8);
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v3 + 16))(v12, v16, v2);
    uint64_t v21 = &type metadata for ISO18013CodingKeyFormat;
    v20[0] = 0;
  }
  uint64_t v17 = (void (*)(unsigned char *, void))sub_1D7A9B3D8();
  sub_1D7A16528((uint64_t)v20, (uint64_t)v12);
  v17(v19, 0);
  return v14;
}

uint64_t sub_1D786D398(uint64_t a1)
{
  v188[5] = *MEMORY[0x1E4F143B8];
  uint64_t v172 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA842300);
  uint64_t v165 = *(void *)(v172 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v172, v2, v3, v4, v5, v6, v7, v8);
  uint64_t v179 = (uint64_t)&v151 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x1F4188790](v9, v11, v12, v13, v14, v15, v16, v17);
  uint64_t v171 = (uint64_t *)((char *)&v151 - v19);
  MEMORY[0x1F4188790](v18, v20, v21, v22, v23, v24, v25, v26);
  uint64_t v166 = (uint64_t)&v151 - v27;
  uint64_t v181 = type metadata accessor for ISO18013IssuerSignedItem();
  uint64_t v35 = MEMORY[0x1F4188790](v181, v28, v29, v30, v31, v32, v33, v34);
  uint64_t v170 = (uint64_t)&v151 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v35, v37, v38, v39, v40, v41, v42, v43);
  uint64_t v180 = (uint64_t *)((char *)&v151 - v44);
  uint64_t v169 = type metadata accessor for CredentialBuilderPayloadDetails.Element(0);
  uint64_t v161 = *(void *)(v169 - 8);
  MEMORY[0x1F4188790](v169, v45, v46, v47, v48, v49, v50, v51);
  uint64_t v53 = (uint64_t *)((char *)&v151 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8424C0);
  uint64_t v55 = *(void *)(v54 - 8);
  MEMORY[0x1F4188790](v54, v56, v57, v58, v59, v60, v61, v62);
  uint64_t v160 = (char *)&v151 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8424C8);
  uint64_t v72 = MEMORY[0x1F4188790](v64 - 8, v65, v66, v67, v68, v69, v70, v71);
  uint64_t v74 = (unint64_t *)((char *)&v151 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v72, v75, v76, v77, v78, v79, v80, v81);
  uint64_t v83 = (uint64_t *)((char *)&v151 - v82);
  unint64_t v159 = sub_1D785EF20(MEMORY[0x1E4FBC860]);
  LOBYTE(v188[0]) = *(unsigned char *)a1;
  uint64_t v84 = sub_1D786D1B0((char *)v188);
  uint64_t v85 = *(void *)(a1 + 24);
  uint64_t v86 = *(void *)(v85 + 64);
  uint64_t v155 = v85 + 64;
  uint64_t v87 = 1 << *(unsigned char *)(v85 + 32);
  uint64_t v88 = -1;
  if (v87 < 64) {
    uint64_t v88 = ~(-1 << v87);
  }
  unint64_t v89 = v88 & v86;
  int64_t v156 = (unint64_t)(v87 + 63) >> 6;
  int64_t v175 = (unsigned int (**)(void *, uint64_t, uint64_t))(v55 + 48);
  uint64_t v176 = (void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v55 + 56);
  SecRandomRef v173 = (SecRandomRef)*MEMORY[0x1E4F3BC60];
  swift_bridgeObjectRetain();
  int64_t v90 = 0;
  uint64_t v177 = v84;
  uint64_t v157 = v85;
  uint64_t v168 = v53;
  uint64_t v164 = v54;
  int64_t v163 = v74;
  unint64_t v162 = v83;
  if (!v89) {
    goto LABEL_6;
  }
  while (2)
  {
    uint64_t v153 = (v89 - 1) & v89;
    int64_t v154 = v90;
    unint64_t v91 = __clz(__rbit64(v89)) | (v90 << 6);
LABEL_17:
    uint64_t v98 = *(void *)(v85 + 56);
    uint64_t v99 = (uint64_t *)(*(void *)(v85 + 48) + 16 * v91);
    uint64_t v100 = v99[1];
    uint64_t v152 = *v99;
    uint64_t v101 = *(void *)(v98 + 8 * v91);
    uint64_t v158 = v100;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v182 = sub_1D785EF2C(MEMORY[0x1E4FBC860]);
    unint64_t v102 = 0;
    unint64_t v103 = *(void *)(v101 + 16);
    uint64_t v174 = v101;
    unint64_t v167 = v103;
    while (1)
    {
      if (v102 == v103)
      {
        uint64_t v104 = 1;
        unint64_t v105 = v103;
      }
      else
      {
        if (v102 >= *(void *)(v101 + 16)) {
          goto LABEL_55;
        }
        uint64_t v106 = (uint64_t)&v160[*(int *)(v54 + 48)];
        sub_1D786E970(v101+ ((*(unsigned __int8 *)(v161 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v161 + 80))+ *(void *)(v161 + 72) * v102, v106, type metadata accessor for CredentialBuilderPayloadDetails.Element);
        uint64_t v107 = (uint64_t)v74 + *(int *)(v54 + 48);
        *uint64_t v74 = v102;
        sub_1D7871D10(v106, v107, type metadata accessor for CredentialBuilderPayloadDetails.Element);
        uint64_t v104 = 0;
        unint64_t v105 = v102 + 1;
      }
      (*v176)(v74, v104, 1, v54);
      sub_1D7871D78((uint64_t)v74, (uint64_t)v83, &qword_1EA8424C8);
      if ((*v175)(v83, 1, v54) == 1) {
        break;
      }
      uint64_t v108 = *v83;
      sub_1D7871D10((uint64_t)v83 + *(int *)(v54 + 48), (uint64_t)v53, type metadata accessor for CredentialBuilderPayloadDetails.Element);
      uint64_t v109 = sub_1D7A9C388();
      *(void *)(v109 + 16) = 32;
      *(_OWORD *)(v109 + 48) = 0u;
      *(_OWORD *)(v109 + 32) = 0u;
      if (SecRandomCopyBytes(v173, 0x20uLL, (void *)(v109 + 32)))
      {
        swift_bridgeObjectRelease();
        LOWORD(v188[0]) = 359;
        unint64_t v147 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
        sub_1D7860544();
        uint64_t v148 = swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000024, 0x80000001D7ABE0E0, (__int16 *)v188, 0, v147, 0xD000000000000055, 0x80000001D7ABDF40, v149, 0xD000000000000020, 0x80000001D7ABE110, 219);
        uint64_t v183 = v148;
        swift_willThrow();
        swift_release();
        swift_bridgeObjectRelease();
LABEL_51:
        sub_1D7871A78((uint64_t)v53, type metadata accessor for CredentialBuilderPayloadDetails.Element);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v159;
      }
      unint64_t v178 = v105;
      uint64_t v110 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8424D0);
      v188[3] = v110;
      v188[4] = sub_1D7871DDC(&qword_1EA8424D8, &qword_1EA8424D0);
      v188[0] = v109;
      uint64_t v111 = __swift_project_boxed_opaque_existential_1(v188, v110);
      uint64_t v112 = *v111;
      size_t v113 = *(void *)(*v111 + 16);
      if (v113)
      {
        if (v113 <= 0xE)
        {
          memset(__dst, 0, sizeof(__dst));
          unsigned __int8 v187 = v113;
          memcpy(__dst, (const void *)(v112 + 32), v113);
          size_t v185 = *(void *)__dst;
          unint64_t v184 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v187 << 48);
          swift_bridgeObjectRetain();
          goto LABEL_34;
        }
        sub_1D7A9ACD8();
        swift_allocObject();
        swift_bridgeObjectRetain();
        uint64_t v114 = sub_1D7A9AC88();
        uint64_t v115 = v114;
        if (v113 >= 0x7FFFFFFF)
        {
          sub_1D7A9AFC8();
          uint64_t v117 = swift_allocObject();
          *(void *)(v117 + 16) = 0;
          *(void *)(v117 + 24) = v113;
          size_t v185 = v117;
          unint64_t v116 = v115 | 0x8000000000000000;
        }
        else
        {
          size_t v185 = v113 << 32;
          unint64_t v116 = v114 | 0x4000000000000000;
        }
      }
      else
      {
        swift_bridgeObjectRetain();
        size_t v185 = 0;
        unint64_t v116 = 0xC000000000000000;
      }
      unint64_t v184 = v116;
LABEL_34:
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v188);
      if (v108 < 0)
      {
        sub_1D7A9CF88();
        __break(1u);
LABEL_60:
        uint64_t result = sub_1D7A9D4F8();
        __break(1u);
        return result;
      }
      uint64_t v119 = *v53;
      uint64_t v118 = v53[1];
      uint64_t v120 = v180;
      sub_1D786E970((uint64_t)v53 + *(int *)(v169 + 20), (uint64_t)v180 + *(int *)(v181 + 28), (uint64_t (*)(void))type metadata accessor for AnyCodable);
      *uint64_t v120 = v108;
      unint64_t v122 = v184;
      uint64_t v121 = v185;
      v120[1] = v185;
      v120[2] = v122;
      v120[3] = v119;
      v120[4] = v118;
      uint64_t v123 = v170;
      sub_1D786E970((uint64_t)v120, v170, (uint64_t (*)(void))type metadata accessor for ISO18013IssuerSignedItem);
      uint64_t v124 = (uint64_t)v171;
      *uint64_t v171 = 24;
      uint64_t v125 = v124 + *(int *)(v172 + 48);
      sub_1D786E970(v123, v125, (uint64_t (*)(void))type metadata accessor for ISO18013IssuerSignedItem);
      uint64_t v126 = v118;
      swift_bridgeObjectRetain_n();
      sub_1D7860790(v121, v122);
      sub_1D7871E20(&qword_1EA8424E0, (void (*)(uint64_t))type metadata accessor for ISO18013IssuerSignedItem);
      swift_retain();
      uint64_t v127 = v183;
      uint64_t v128 = sub_1D7A9B3C8();
      uint64_t v183 = v127;
      if (v127)
      {
        swift_release();
        sub_1D7871A78(v123, (uint64_t (*)(void))type metadata accessor for ISO18013IssuerSignedItem);
        sub_1D7871A78(v125, (uint64_t (*)(void))type metadata accessor for ISO18013IssuerSignedItem);
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1D78607E8(v185, v184);
        sub_1D7871A78((uint64_t)v180, (uint64_t (*)(void))type metadata accessor for ISO18013IssuerSignedItem);
        uint64_t v53 = v168;
        goto LABEL_51;
      }
      uint64_t v130 = v128;
      uint64_t v131 = v129;
      swift_release();
      sub_1D7871A78(v123, (uint64_t (*)(void))type metadata accessor for ISO18013IssuerSignedItem);
      *(void *)(v124 + 8) = v130;
      *(void *)(v124 + 16) = v131;
      uint64_t v132 = v166;
      sub_1D7871D78(v124, v166, &qword_1EA842300);
      sub_1D7871D78(v132, v179, &qword_1EA842300);
      unint64_t v133 = v182;
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v188[0] = v133;
      unint64_t v136 = sub_1D7A18684(v119, v126);
      uint64_t v137 = *(void *)(v133 + 16);
      BOOL v138 = (v135 & 1) == 0;
      uint64_t v139 = v137 + v138;
      if (__OFADD__(v137, v138))
      {
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
      }
      char v140 = v135;
      if (*(void *)(v133 + 24) >= v139)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          sub_1D7972ECC();
        }
      }
      else
      {
        sub_1D796F924(v139, isUniquelyReferenced_nonNull_native);
        uint64_t v141 = sub_1D7A18684(v119, v126);
        if ((v140 & 1) != (v142 & 1)) {
          goto LABEL_60;
        }
        unint64_t v136 = v141;
      }
      int64_t v143 = (void *)v188[0];
      unint64_t v182 = v188[0];
      if (v140)
      {
        sub_1D7871CA8(v179, *(void *)(v188[0] + 56) + *(void *)(v165 + 72) * v136);
      }
      else
      {
        *(void *)(v188[0] + 8 * (v136 >> 6) + 64) |= 1 << v136;
        v144 = (uint64_t *)(v143[6] + 16 * v136);
        uint64_t *v144 = v119;
        v144[1] = v126;
        sub_1D7871D78(v179, v143[7] + *(void *)(v165 + 72) * v136, &qword_1EA842300);
        uint64_t v145 = v143[2];
        BOOL v94 = __OFADD__(v145, 1);
        uint64_t v146 = v145 + 1;
        if (v94) {
          goto LABEL_56;
        }
        v143[2] = v146;
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1D78607E8(v185, v184);
      sub_1D7871A78((uint64_t)v180, (uint64_t (*)(void))type metadata accessor for ISO18013IssuerSignedItem);
      uint64_t v53 = v168;
      sub_1D7871A78((uint64_t)v168, type metadata accessor for CredentialBuilderPayloadDetails.Element);
      uint64_t v54 = v164;
      uint64_t v74 = v163;
      uint64_t v83 = v162;
      uint64_t v101 = v174;
      unint64_t v103 = v167;
      unint64_t v102 = v178;
    }
    swift_bridgeObjectRelease();
    unint64_t v92 = v159;
    char v93 = swift_isUniquelyReferenced_nonNull_native();
    v188[0] = v92;
    sub_1D78A08DC(v182, v152, v158, v93);
    unint64_t v159 = v188[0];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v85 = v157;
    int64_t v90 = v154;
    unint64_t v89 = v153;
    if (v153) {
      continue;
    }
    break;
  }
LABEL_6:
  BOOL v94 = __OFADD__(v90, 1);
  int64_t v95 = v90 + 1;
  if (v94) {
    goto LABEL_57;
  }
  if (v95 < v156)
  {
    unint64_t v96 = *(void *)(v155 + 8 * v95);
    if (v96) {
      goto LABEL_16;
    }
    int64_t v97 = v95 + 1;
    if (v95 + 1 < v156)
    {
      unint64_t v96 = *(void *)(v155 + 8 * v97);
      if (v96) {
        goto LABEL_15;
      }
      int64_t v97 = v95 + 2;
      if (v95 + 2 < v156)
      {
        unint64_t v96 = *(void *)(v155 + 8 * v97);
        if (v96) {
          goto LABEL_15;
        }
        int64_t v97 = v95 + 3;
        if (v95 + 3 < v156)
        {
          unint64_t v96 = *(void *)(v155 + 8 * v97);
          if (!v96)
          {
            while (1)
            {
              int64_t v95 = v97 + 1;
              if (__OFADD__(v97, 1)) {
                goto LABEL_58;
              }
              if (v95 >= v156) {
                goto LABEL_53;
              }
              unint64_t v96 = *(void *)(v155 + 8 * v95);
              ++v97;
              if (v96) {
                goto LABEL_16;
              }
            }
          }
LABEL_15:
          int64_t v95 = v97;
LABEL_16:
          uint64_t v153 = (v96 - 1) & v96;
          int64_t v154 = v95;
          unint64_t v91 = __clz(__rbit64(v96)) + (v95 << 6);
          goto LABEL_17;
        }
      }
    }
  }
LABEL_53:
  swift_release();
  swift_release();
  return v159;
}

uint64_t sub_1D786E15C(uint64_t a1)
{
  uint64_t v2 = &qword_1EA842300;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA842300);
  uint64_t v105 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3 - 8, v4, v5, v6, v7, v8, v9, v10);
  uint64_t v12 = (char *)&v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8424B0);
  uint64_t v21 = MEMORY[0x1F4188790](v13 - 8, v14, v15, v16, v17, v18, v19, v20);
  uint64_t v23 = (uint64_t *)((char *)&v91 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v21, v24, v25, v26, v27, v28, v29, v30);
  uint64_t v32 = (uint64_t *)((char *)&v91 - v31);
  unint64_t v33 = sub_1D785EF20(MEMORY[0x1E4FBC860]);
  uint64_t v34 = *(void *)(a1 + 64);
  uint64_t v92 = a1 + 64;
  uint64_t v35 = 1 << *(unsigned char *)(a1 + 32);
  if (v35 < 64) {
    uint64_t v36 = ~(-1 << v35);
  }
  else {
    uint64_t v36 = -1;
  }
  unint64_t v100 = v36 & v34;
  int64_t v93 = (unint64_t)(v35 + 63) >> 6;
  uint64_t v95 = a1;
  swift_bridgeObjectRetain();
  int64_t v37 = 0;
LABEL_6:
  unint64_t v99 = v33;
  if (!v100)
  {
    int64_t v42 = v37 + 1;
    if (__OFADD__(v37, 1))
    {
LABEL_63:
      __break(1u);
      goto LABEL_64;
    }
    if (v42 >= v93) {
      goto LABEL_59;
    }
    unint64_t v43 = *(void *)(v92 + 8 * v42);
    int64_t v44 = v37 + 1;
    if (!v43)
    {
      int64_t v44 = v37 + 2;
      if (v37 + 2 >= v93) {
        goto LABEL_59;
      }
      unint64_t v43 = *(void *)(v92 + 8 * v44);
      if (!v43)
      {
        int64_t v44 = v37 + 3;
        if (v37 + 3 >= v93) {
          goto LABEL_59;
        }
        unint64_t v43 = *(void *)(v92 + 8 * v44);
        if (!v43)
        {
          uint64_t v45 = v37 + 4;
          if (v37 + 4 < v93)
          {
            unint64_t v43 = *(void *)(v92 + 8 * v45);
            if (v43)
            {
              int64_t v44 = v37 + 4;
              goto LABEL_21;
            }
            while (1)
            {
              int64_t v44 = v45 + 1;
              if (__OFADD__(v45, 1)) {
                goto LABEL_65;
              }
              if (v44 >= v93) {
                break;
              }
              unint64_t v43 = *(void *)(v92 + 8 * v44);
              ++v45;
              if (v43) {
                goto LABEL_21;
              }
            }
          }
LABEL_59:
          swift_release();
          return v33;
        }
      }
    }
LABEL_21:
    unint64_t v100 = (v43 - 1) & v43;
    int64_t v98 = v44;
    unint64_t v41 = __clz(__rbit64(v43)) + (v44 << 6);
    goto LABEL_22;
  }
  unint64_t v40 = __clz(__rbit64(v100));
  v100 &= v100 - 1;
  int64_t v98 = v37;
  unint64_t v41 = v40 | (v37 << 6);
LABEL_22:
  uint64_t v46 = *(void *)(v95 + 56);
  uint64_t v47 = (uint64_t *)(*(void *)(v95 + 48) + 16 * v41);
  uint64_t v48 = v47[1];
  uint64_t v96 = *v47;
  uint64_t v97 = v48;
  uint64_t v49 = *(void *)(v46 + 8 * v41);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v107 = sub_1D785EF2C(MEMORY[0x1E4FBC860]);
  uint64_t v103 = v49;
  int64_t v104 = 0;
  uint64_t v50 = *(void *)(v49 + 64);
  uint64_t v101 = v49 + 64;
  uint64_t v51 = 1 << *(unsigned char *)(v49 + 32);
  if (v51 < 64) {
    uint64_t v52 = ~(-1 << v51);
  }
  else {
    uint64_t v52 = -1;
  }
  unint64_t v53 = v52 & v50;
  int64_t v102 = (unint64_t)(v51 + 63) >> 6;
  int64_t v94 = v102 - 1;
  while (1)
  {
    if (v53)
    {
      unint64_t v54 = __clz(__rbit64(v53));
      uint64_t v55 = (v53 - 1) & v53;
      unint64_t v56 = v54 | (v104 << 6);
LABEL_30:
      uint64_t v57 = *(void *)(v103 + 56);
      uint64_t v58 = (void *)(*(void *)(v103 + 48) + 16 * v56);
      uint64_t v59 = v58[1];
      *uint64_t v23 = *v58;
      v23[1] = v59;
      uint64_t v60 = v57 + *(void *)(v105 + 72) * v56;
      uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8424B8);
      sub_1D78614F8(v60, (uint64_t)v23 + *(int *)(v61 + 48), v2);
      (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56))(v23, 0, 1, v61);
      swift_bridgeObjectRetain();
      goto LABEL_49;
    }
    int64_t v62 = v104 + 1;
    if (__OFADD__(v104, 1)) {
      goto LABEL_62;
    }
    if (v62 < v102)
    {
      unint64_t v63 = *(void *)(v101 + 8 * v62);
      if (v63) {
        goto LABEL_34;
      }
      int64_t v64 = v104 + 2;
      ++v104;
      if (v62 + 1 < v102)
      {
        unint64_t v63 = *(void *)(v101 + 8 * v64);
        if (v63) {
          goto LABEL_37;
        }
        int64_t v104 = v62 + 1;
        if (v62 + 2 < v102)
        {
          unint64_t v63 = *(void *)(v101 + 8 * (v62 + 2));
          if (v63)
          {
            v62 += 2;
            goto LABEL_34;
          }
          int64_t v64 = v62 + 3;
          int64_t v104 = v62 + 2;
          if (v62 + 3 < v102) {
            break;
          }
        }
      }
    }
LABEL_48:
    uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8424B8);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 56))(v23, 1, 1, v65);
    uint64_t v55 = 0;
LABEL_49:
    sub_1D7871D78((uint64_t)v23, (uint64_t)v32, &qword_1EA8424B0);
    uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8424B8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v66 - 8) + 48))(v32, 1, v66) == 1)
    {
      swift_release();
      unint64_t v38 = v99;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v108 = v38;
      sub_1D78A08DC(v107, v96, v97, isUniquelyReferenced_nonNull_native);
      unint64_t v33 = v108;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      int64_t v37 = v98;
      goto LABEL_6;
    }
    unint64_t v106 = v55;
    uint64_t v67 = v23;
    uint64_t v68 = *v32;
    uint64_t v69 = v32[1];
    uint64_t v70 = v32;
    uint64_t v71 = (uint64_t)v32 + *(int *)(v66 + 48);
    uint64_t v72 = (uint64_t)v12;
    uint64_t v73 = (uint64_t)v12;
    uint64_t v74 = v2;
    sub_1D7871D78(v71, v73, v2);
    unint64_t v75 = v107;
    int v76 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v108 = v75;
    unint64_t v78 = sub_1D7A18684(v68, v69);
    uint64_t v79 = *(void *)(v75 + 16);
    BOOL v80 = (v77 & 1) == 0;
    uint64_t v81 = v79 + v80;
    if (__OFADD__(v79, v80))
    {
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
      goto LABEL_63;
    }
    char v82 = v77;
    if (*(void *)(v75 + 24) >= v81)
    {
      if ((v76 & 1) == 0) {
        sub_1D7972ECC();
      }
    }
    else
    {
      sub_1D796F924(v81, v76);
      uint64_t v83 = sub_1D7A18684(v68, v69);
      if ((v82 & 1) != (v84 & 1)) {
        goto LABEL_66;
      }
      unint64_t v78 = v83;
    }
    uint64_t v2 = v74;
    uint64_t v85 = (void *)v108;
    unint64_t v107 = v108;
    if (v82)
    {
      uint64_t v12 = (char *)v72;
      sub_1D7871CA8(v72, *(void *)(v108 + 56) + *(void *)(v105 + 72) * v78);
    }
    else
    {
      *(void *)(v108 + 8 * (v78 >> 6) + 64) |= 1 << v78;
      uint64_t v86 = (uint64_t *)(v85[6] + 16 * v78);
      *uint64_t v86 = v68;
      v86[1] = v69;
      uint64_t v12 = (char *)v72;
      sub_1D7871D78(v72, v85[7] + *(void *)(v105 + 72) * v78, v2);
      uint64_t v87 = v85[2];
      BOOL v88 = __OFADD__(v87, 1);
      uint64_t v89 = v87 + 1;
      if (v88) {
        goto LABEL_61;
      }
      v85[2] = v89;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v23 = v67;
    uint64_t v32 = v70;
    unint64_t v53 = v106;
  }
  unint64_t v63 = *(void *)(v101 + 8 * v64);
  if (v63)
  {
LABEL_37:
    int64_t v62 = v64;
LABEL_34:
    uint64_t v55 = (v63 - 1) & v63;
    unint64_t v56 = __clz(__rbit64(v63)) + (v62 << 6);
    int64_t v104 = v62;
    goto LABEL_30;
  }
  while (1)
  {
    int64_t v62 = v64 + 1;
    if (__OFADD__(v64, 1)) {
      break;
    }
    if (v62 >= v102)
    {
      int64_t v104 = v94;
      goto LABEL_48;
    }
    unint64_t v63 = *(void *)(v101 + 8 * v62);
    ++v64;
    if (v63) {
      goto LABEL_34;
    }
  }
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  uint64_t result = sub_1D7A9D4F8();
  __break(1u);
  return result;
}

unint64_t sub_1D786E85C()
{
  unint64_t result = qword_1EA842420;
  if (!qword_1EA842420)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA842420);
  }
  return result;
}

uint64_t type metadata accessor for CredentialBuilderPayloadDetails(uint64_t a1)
{
  return sub_1D786E938(a1, (uint64_t *)&unk_1EA842450);
}

uint64_t sub_1D786E8D0(uint64_t result)
{
  if (result != 1)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t type metadata accessor for CredentialBuilderPayloadDetails.Element(uint64_t a1)
{
  return sub_1D786E938(a1, (uint64_t *)&unk_1EA842468);
}

uint64_t sub_1D786E938(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1D786E970(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1D786E9D8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1D7860790(a1, a2);
  }
  return a1;
}

unint64_t sub_1D786E9F0()
{
  unint64_t result = qword_1EA842428;
  if (!qword_1EA842428)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA842428);
  }
  return result;
}

unint64_t sub_1D786EA48()
{
  unint64_t result = qword_1EA842430;
  if (!qword_1EA842430)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA842430);
  }
  return result;
}

unint64_t sub_1D786EAA0()
{
  unint64_t result = qword_1EA842438;
  if (!qword_1EA842438)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA842438);
  }
  return result;
}

uint64_t dispatch thunk of IdentityCredentialPayloadBuilderDelegate.signPayload(builder:dataToSign:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a6 + 8)
                                                                                     + **(int **)(a6 + 8));
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v13;
  void *v13 = v6;
  v13[1] = sub_1D786EC1C;
  return v15(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1D786EC1C()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t method lookup function for IdentityCredentialPayloadBuilder(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for IdentityCredentialPayloadBuilder);
}

uint64_t dispatch thunk of IdentityCredentialPayloadBuilder.__allocating_init(with:dateProvider:)()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of IdentityCredentialPayloadBuilder.buildPayload(with:)(uint64_t a1)
{
  uint64_t v4 = *(int **)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x90);
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1D786EE50;
  return v7(a1);
}

uint64_t sub_1D786EE50(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *v2;
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
  return v5(a1, a2);
}

char *initializeBufferWithCopyOfBuffer for CredentialBuilderPayloadDetails(char *a1, char *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *(void *)a2;
    *(void *)uint64_t v4 = *(void *)a2;
    uint64_t v4 = (char *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v7 = *((void *)a2 + 2);
    *((void *)a1 + 1) = *((void *)a2 + 1);
    *((void *)a1 + 2) = v7;
    *((void *)a1 + 3) = *((void *)a2 + 3);
    uint64_t v8 = a3[7];
    __dst = &a1[v8];
    uint64_t v9 = &a2[v8];
    uint64_t v10 = sub_1D7A9B148();
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v12(v9, 1, v10))
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9118);
      memcpy(__dst, v9, *(void *)(*(void *)(v13 - 8) + 64));
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(&v4[a3[8]], &a2[a3[8]], v10);
    }
    else
    {
      uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
      v15(__dst, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(__dst, 0, 1, v10);
      v15(&v4[a3[8]], &a2[a3[8]], v10);
    }
    uint64_t v16 = a3[10];
    v4[a3[9]] = a2[a3[9]];
    uint64_t v17 = &v4[v16];
    uint64_t v18 = &a2[v16];
    uint64_t v19 = sub_1D7A9B458();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
    uint64_t v20 = a3[11];
    uint64_t v21 = &v4[v20];
    uint64_t v22 = &a2[v20];
    if (*(void *)v22 == 1)
    {
      *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
    }
    else
    {
      uint64_t v23 = *((void *)v22 + 1);
      *(void *)uint64_t v21 = *(void *)v22;
      *((void *)v21 + 1) = v23;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    uint64_t v24 = a3[13];
    v4[a3[12]] = a2[a3[12]];
    v4[v24] = a2[v24];
  }
  return v4;
}

uint64_t destroy for CredentialBuilderPayloadDetails(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[7];
  uint64_t v5 = sub_1D7A9B148();
  uint64_t v6 = *(void *)(v5 - 8);
  int v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  if (!v7) {
    v8(v4, v5);
  }
  v8(a1 + a2[8], v5);
  uint64_t v9 = a1 + a2[10];
  uint64_t v10 = sub_1D7A9B458();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  uint64_t result = *(void *)(a1 + a2[11]);
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for CredentialBuilderPayloadDetails(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v7 = a3[7];
  __dst = (void *)(a1 + v7);
  uint64_t v8 = (const void *)(a2 + v7);
  uint64_t v9 = sub_1D7A9B148();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v11(v8, 1, v9))
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9118);
    memcpy(__dst, v8, *(void *)(*(void *)(v12 - 8) + 64));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(a1 + a3[8], a2 + a3[8], v9);
  }
  else
  {
    uint64_t v13 = *(void (**)(void *, const void *, uint64_t))(v10 + 16);
    v13(__dst, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(__dst, 0, 1, v9);
    v13((void *)(a1 + a3[8]), (const void *)(a2 + a3[8]), v9);
  }
  uint64_t v14 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = sub_1D7A9B458();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
  uint64_t v18 = a3[11];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  if (*(void *)v20 == 1)
  {
    *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
  }
  else
  {
    uint64_t v21 = *(void *)(v20 + 8);
    *(void *)uint64_t v19 = *(void *)v20;
    *(void *)(v19 + 8) = v21;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v22 = a3[13];
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  *(unsigned char *)(a1 + v22) = *(unsigned char *)(a2 + v22);
  return a1;
}

uint64_t assignWithCopy for CredentialBuilderPayloadDetails(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[7];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = sub_1D7A9B148();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9118);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 24))(a1 + a3[8], a2 + a3[8], v9);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  uint64_t v15 = a3[10];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = sub_1D7A9B458();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 24))(v16, v17, v18);
  uint64_t v19 = a3[11];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = a2 + v19;
  uint64_t v22 = *(void *)(a2 + v19);
  if (*(void *)(a1 + v19) != 1)
  {
    if (v22 != 1)
    {
      *uint64_t v20 = v22;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v20[1] = *(void *)(v21 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_14;
    }
    sub_1D786F81C(a1 + v19);
    goto LABEL_12;
  }
  if (v22 == 1)
  {
LABEL_12:
    *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
    goto LABEL_14;
  }
  *uint64_t v20 = v22;
  v20[1] = *(void *)(v21 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_14:
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  return a1;
}

uint64_t sub_1D786F81C(uint64_t a1)
{
  return a1;
}

uint64_t initializeWithTake for CredentialBuilderPayloadDetails(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v6 = a3[7];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_1D7A9B148();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9118);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(a1 + a3[8], a2 + a3[8], v9);
  }
  else
  {
    int v12 = *(void (**)(void *, const void *, uint64_t))(v10 + 32);
    v12(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    v12((void *)(a1 + a3[8]), (const void *)(a2 + a3[8]), v9);
  }
  uint64_t v13 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = sub_1D7A9B458();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
  uint64_t v17 = a3[12];
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  *(unsigned char *)(a1 + v17) = *(unsigned char *)(a2 + v17);
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  return a1;
}

uint64_t assignWithTake for CredentialBuilderPayloadDetails(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[7];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = sub_1D7A9B148();
  uint64_t v11 = *(void *)(v10 - 8);
  int v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9118);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 40))(a1 + a3[8], a2 + a3[8], v10);
  uint64_t v16 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = sub_1D7A9B458();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 40))(v17, v18, v19);
  uint64_t v20 = a3[11];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (void *)(a2 + v20);
  if (*(void *)(a1 + v20) != 1)
  {
    if (*v22 != 1)
    {
      *uint64_t v21 = *v22;
      swift_bridgeObjectRelease();
      v21[1] = v22[1];
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    sub_1D786F81C((uint64_t)v21);
  }
  *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
LABEL_12:
  uint64_t v23 = a3[13];
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  *(unsigned char *)(a1 + v23) = *(unsigned char *)(a2 + v23);
  return a1;
}

uint64_t getEnumTagSinglePayload for CredentialBuilderPayloadDetails(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1D786FCBC);
}

uint64_t sub_1D786FCBC(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9118);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[7];
LABEL_9:
    int v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v13(a1 + v11, a2, v9);
  }
  uint64_t v12 = sub_1D7A9B148();
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[8];
    goto LABEL_9;
  }
  uint64_t v14 = sub_1D7A9B458();
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + a3[10];
  return v15(v17, a2, v16);
}

uint64_t storeEnumTagSinglePayload for CredentialBuilderPayloadDetails(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1D786FE4C);
}

uint64_t sub_1D786FE4C(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
    return result;
  }
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9118);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[7];
LABEL_7:
    int v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v13(v5 + v11, a2, a2, v9);
  }
  uint64_t v12 = sub_1D7A9B148();
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[8];
    goto LABEL_7;
  }
  uint64_t v14 = sub_1D7A9B458();
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  uint64_t v17 = v5 + a4[10];
  return v15(v17, a2, a2, v16);
}

void sub_1D786FFC8()
{
  sub_1D787010C();
  if (v0 <= 0x3F)
  {
    sub_1D7A9B148();
    if (v1 <= 0x3F)
    {
      sub_1D7A9B458();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void sub_1D787010C()
{
  if (!qword_1EA842460)
  {
    sub_1D7A9B148();
    unint64_t v0 = sub_1D7A9C9A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EA842460);
    }
  }
}

uint64_t destroy for CredentialBuilderPayloadDetails.KeyAuthorizations()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *_s13CoreIDVShared31CredentialBuilderPayloadDetailsV17KeyAuthorizationsVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for CredentialBuilderPayloadDetails.KeyAuthorizations(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for CredentialBuilderPayloadDetails.KeyAuthorizations(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CredentialBuilderPayloadDetails.KeyAuthorizations(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CredentialBuilderPayloadDetails.KeyAuthorizations(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CredentialBuilderPayloadDetails.KeyAuthorizations()
{
  return &type metadata for CredentialBuilderPayloadDetails.KeyAuthorizations;
}

void *initializeBufferWithCopyOfBuffer for CredentialBuilderPayloadDetails.Element(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (void *)(v16 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    *uint64_t v7 = *((unsigned char *)a2 + v6);
    v7[16] = *((unsigned char *)a2 + v6 + 16);
    *((void *)v7 + 1) = *(void *)((char *)a2 + v6 + 8);
    v7[32] = *((unsigned char *)a2 + v6 + 32);
    *((void *)v7 + 3) = *(void *)((char *)a2 + v6 + 24);
    v7[40] = *((unsigned char *)a2 + v6 + 40);
    *((_DWORD *)v7 + 9) = *(_DWORD *)((char *)a2 + v6 + 36);
    *((void *)v7 + 6) = *(void *)((char *)a2 + v6 + 48);
    v7[56] = *((unsigned char *)a2 + v6 + 56);
    uint64_t v9 = (int *)type metadata accessor for AnyCodable();
    uint64_t v10 = v9[9];
    __dst = &v7[v10];
    uint64_t v11 = &v8[v10];
    uint64_t v12 = sub_1D7A9B148();
    uint64_t v13 = *(void *)(v12 - 8);
    uint64_t v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain();
    if (v14(v11, 1, v12))
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9118);
      memcpy(__dst, v11, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(__dst, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
    }
    uint64_t v17 = v9[10];
    uint64_t v18 = &v7[v17];
    uint64_t v19 = &v8[v17];
    uint64_t v20 = *((void *)v19 + 1);
    *(void *)uint64_t v18 = *(void *)v19;
    *((void *)v18 + 1) = v20;
    *(void *)&v7[v9[11]] = *(void *)&v8[v9[11]];
    *(void *)&v7[v9[12]] = *(void *)&v8[v9[12]];
    *(void *)&v7[v9[13]] = *(void *)&v8[v9[13]];
    uint64_t v21 = v9[14];
    uint64_t v22 = &v7[v21];
    uint64_t v23 = (uint64_t *)&v8[v21];
    unint64_t v24 = *(void *)&v8[v21 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v24 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
    }
    else
    {
      uint64_t v25 = *v23;
      sub_1D7860790(*v23, v24);
      *(void *)uint64_t v22 = v25;
      *((void *)v22 + 1) = v24;
    }
  }
  return v3;
}

uint64_t destroy for CredentialBuilderPayloadDetails.Element(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for AnyCodable();
  uint64_t v6 = v4 + *(int *)(v5 + 36);
  uint64_t v7 = sub_1D7A9B148();
  uint64_t v8 = *(void *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v10 = (uint64_t *)(v4 + *(int *)(v5 + 56));
  unint64_t v11 = v10[1];
  if (v11 >> 60 != 15)
  {
    uint64_t v12 = *v10;
    return sub_1D78607E8(v12, v11);
  }
  return result;
}

void *initializeWithCopy for CredentialBuilderPayloadDetails.Element(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  *uint64_t v5 = *((unsigned char *)a2 + v4);
  v5[16] = *((unsigned char *)a2 + v4 + 16);
  *((void *)v5 + 1) = *(void *)((char *)a2 + v4 + 8);
  v5[32] = *((unsigned char *)a2 + v4 + 32);
  *((void *)v5 + 3) = *(void *)((char *)a2 + v4 + 24);
  v5[40] = *((unsigned char *)a2 + v4 + 40);
  *((_DWORD *)v5 + 9) = *(_DWORD *)((char *)a2 + v4 + 36);
  *((void *)v5 + 6) = *(void *)((char *)a2 + v4 + 48);
  v5[56] = *((unsigned char *)a2 + v4 + 56);
  uint64_t v7 = (int *)type metadata accessor for AnyCodable();
  uint64_t v8 = v7[9];
  uint64_t v9 = &v5[v8];
  uint64_t v10 = &v6[v8];
  uint64_t v11 = sub_1D7A9B148();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  if (v13(v10, 1, v11))
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9118);
    memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v15 = v7[10];
  uint64_t v16 = &v5[v15];
  uint64_t v17 = &v6[v15];
  uint64_t v18 = *((void *)v17 + 1);
  *(void *)uint64_t v16 = *(void *)v17;
  *((void *)v16 + 1) = v18;
  *(void *)&v5[v7[11]] = *(void *)&v6[v7[11]];
  *(void *)&v5[v7[12]] = *(void *)&v6[v7[12]];
  *(void *)&v5[v7[13]] = *(void *)&v6[v7[13]];
  uint64_t v19 = v7[14];
  uint64_t v20 = &v5[v19];
  uint64_t v21 = (uint64_t *)&v6[v19];
  unint64_t v22 = *(void *)&v6[v19 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v22 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
  }
  else
  {
    uint64_t v23 = *v21;
    sub_1D7860790(*v21, v22);
    *(void *)uint64_t v20 = v23;
    *((void *)v20 + 1) = v22;
  }
  return a1;
}

void *assignWithCopy for CredentialBuilderPayloadDetails.Element(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v34 = a1;
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  *uint64_t v7 = *((unsigned char *)a2 + v6);
  uint64_t v9 = *(void *)((char *)a2 + v6 + 8);
  v7[16] = v8[16];
  *((void *)v7 + 1) = v9;
  uint64_t v10 = *((void *)v8 + 3);
  v7[32] = v8[32];
  *((void *)v7 + 3) = v10;
  LODWORD(v10) = *((_DWORD *)v8 + 9);
  v7[40] = v8[40];
  *((_DWORD *)v7 + 9) = v10;
  uint64_t v11 = *((void *)v8 + 6);
  v7[56] = v8[56];
  *((void *)v7 + 6) = v11;
  uint64_t v12 = (int *)type metadata accessor for AnyCodable();
  uint64_t v13 = v12[9];
  uint64_t v14 = &v7[v13];
  uint64_t v15 = &v8[v13];
  uint64_t v16 = sub_1D7A9B148();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  int v19 = v18(v14, 1, v16);
  int v20 = v18(v15, 1, v16);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v20)
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v14, v16);
LABEL_6:
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9118);
    memcpy(v14, v15, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v17 + 24))(v14, v15, v16);
LABEL_7:
  uint64_t v22 = v12[10];
  uint64_t v23 = &v7[v22];
  unint64_t v24 = &v8[v22];
  *(void *)uint64_t v23 = *(void *)v24;
  *((void *)v23 + 1) = *((void *)v24 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v7[v12[11]] = *(void *)&v8[v12[11]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v7[v12[12]] = *(void *)&v8[v12[12]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v7[v12[13]] = *(void *)&v8[v12[13]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v25 = v12[14];
  uint64_t v26 = (uint64_t *)&v7[v25];
  uint64_t v27 = (uint64_t *)&v8[v25];
  unint64_t v28 = *(void *)&v8[v25 + 8];
  if (*(void *)&v7[v25 + 8] >> 60 != 15)
  {
    if (v28 >> 60 != 15)
    {
      uint64_t v30 = *v27;
      sub_1D7860790(v30, v28);
      uint64_t v31 = *v26;
      unint64_t v32 = v26[1];
      *uint64_t v26 = v30;
      v26[1] = v28;
      sub_1D78607E8(v31, v32);
      return v34;
    }
    sub_1D7870C24((uint64_t)v26);
    goto LABEL_12;
  }
  if (v28 >> 60 == 15)
  {
LABEL_12:
    *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
    return v34;
  }
  uint64_t v29 = *v27;
  sub_1D7860790(v29, v28);
  *uint64_t v26 = v29;
  v26[1] = v28;
  return v34;
}

uint64_t sub_1D7870C24(uint64_t a1)
{
  return a1;
}

_OWORD *initializeWithTake for CredentialBuilderPayloadDetails.Element(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  *uint64_t v5 = *((unsigned char *)a2 + v4);
  v5[16] = *((unsigned char *)a2 + v4 + 16);
  *((void *)v5 + 1) = *(void *)((char *)a2 + v4 + 8);
  v5[32] = *((unsigned char *)a2 + v4 + 32);
  *((void *)v5 + 3) = *(void *)((char *)a2 + v4 + 24);
  *((_DWORD *)v5 + 9) = *(_DWORD *)((char *)a2 + v4 + 36);
  v5[40] = *((unsigned char *)a2 + v4 + 40);
  uint64_t v7 = *(void *)((char *)a2 + v4 + 48);
  v5[56] = v6[56];
  *((void *)v5 + 6) = v7;
  uint64_t v8 = (int *)type metadata accessor for AnyCodable();
  uint64_t v9 = v8[9];
  uint64_t v10 = &v5[v9];
  uint64_t v11 = &v6[v9];
  uint64_t v12 = sub_1D7A9B148();
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9118);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  *(_OWORD *)&v5[v8[10]] = *(_OWORD *)&v6[v8[10]];
  *(void *)&v5[v8[11]] = *(void *)&v6[v8[11]];
  *(void *)&v5[v8[12]] = *(void *)&v6[v8[12]];
  *(void *)&v5[v8[13]] = *(void *)&v6[v8[13]];
  *(_OWORD *)&v5[v8[14]] = *(_OWORD *)&v6[v8[14]];
  return a1;
}

void *assignWithTake for CredentialBuilderPayloadDetails.Element(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  unint64_t v32 = a1;
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  *uint64_t v8 = *((unsigned char *)a2 + v7);
  *((void *)v8 + 1) = *(void *)((char *)a2 + v7 + 8);
  v8[16] = *((unsigned char *)a2 + v7 + 16);
  *((void *)v8 + 3) = *(void *)((char *)a2 + v7 + 24);
  v8[32] = *((unsigned char *)a2 + v7 + 32);
  *((_DWORD *)v8 + 9) = *(_DWORD *)((char *)a2 + v7 + 36);
  v8[40] = *((unsigned char *)a2 + v7 + 40);
  v8[56] = *((unsigned char *)a2 + v7 + 56);
  *((void *)v8 + 6) = *(void *)((char *)a2 + v7 + 48);
  uint64_t v10 = (int *)type metadata accessor for AnyCodable();
  uint64_t v11 = v10[9];
  uint64_t v12 = &v8[v11];
  uint64_t v13 = &v9[v11];
  uint64_t v14 = sub_1D7A9B148();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v12, v14);
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9118);
    memcpy(v12, v13, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v12, v13, v14);
LABEL_7:
  uint64_t v20 = v10[10];
  uint64_t v21 = &v8[v20];
  uint64_t v22 = &v9[v20];
  uint64_t v24 = *(void *)v22;
  uint64_t v23 = *((void *)v22 + 1);
  *(void *)uint64_t v21 = v24;
  *((void *)v21 + 1) = v23;
  swift_bridgeObjectRelease();
  *(void *)&v8[v10[11]] = *(void *)&v9[v10[11]];
  swift_bridgeObjectRelease();
  *(void *)&v8[v10[12]] = *(void *)&v9[v10[12]];
  swift_bridgeObjectRelease();
  *(void *)&v8[v10[13]] = *(void *)&v9[v10[13]];
  swift_bridgeObjectRelease();
  uint64_t v25 = v10[14];
  uint64_t v26 = (uint64_t *)&v8[v25];
  uint64_t v27 = (uint64_t *)&v9[v25];
  unint64_t v28 = *(void *)&v8[v25 + 8];
  if (v28 >> 60 != 15)
  {
    unint64_t v29 = v27[1];
    if (v29 >> 60 != 15)
    {
      uint64_t v30 = *v26;
      *uint64_t v26 = *v27;
      v26[1] = v29;
      sub_1D78607E8(v30, v28);
      return v32;
    }
    sub_1D7870C24((uint64_t)v26);
  }
  *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
  return v32;
}

uint64_t getEnumTagSinglePayload for CredentialBuilderPayloadDetails.Element(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1D78710E8);
}

uint64_t sub_1D78710E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for AnyCodable();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for CredentialBuilderPayloadDetails.Element(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1D78711AC);
}

uint64_t sub_1D78711AC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for AnyCodable();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1D7871254()
{
  uint64_t result = type metadata accessor for AnyCodable();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for CredentialBuilderSignatureDetails(uint64_t *a1)
{
  swift_bridgeObjectRelease();
  unint64_t v2 = a1[3];
  if (v2 >> 60 != 15) {
    sub_1D78607E8(a1[2], v2);
  }
  uint64_t v3 = a1[4];
  unint64_t v4 = a1[5];
  return sub_1D78607E8(v3, v4);
}

uint64_t initializeWithCopy for CredentialBuilderSignatureDetails(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  unint64_t v4 = (_OWORD *)(a2 + 16);
  unint64_t v5 = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  if (v5 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16) = *v4;
  }
  else
  {
    uint64_t v6 = *(void *)v4;
    sub_1D7860790(v6, v5);
    *(void *)(a1 + 16) = v6;
    *(void *)(a1 + 24) = v5;
  }
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v7 = *(void *)(a2 + 40);
  sub_1D7860790(v8, v7);
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v7;
  return a1;
}

uint64_t assignWithCopy for CredentialBuilderSignatureDetails(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v4 = (uint64_t *)(a2 + 16);
  unint64_t v5 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24) >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      uint64_t v7 = *v4;
      sub_1D7860790(*v4, *(void *)(a2 + 24));
      uint64_t v8 = *(void *)(a1 + 16);
      unint64_t v9 = *(void *)(a1 + 24);
      *(void *)(a1 + 16) = v7;
      *(void *)(a1 + 24) = v5;
      sub_1D78607E8(v8, v9);
      goto LABEL_8;
    }
    sub_1D7870C24(a1 + 16);
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v4;
    goto LABEL_8;
  }
  uint64_t v6 = *v4;
  sub_1D7860790(*v4, *(void *)(a2 + 24));
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v5;
LABEL_8:
  uint64_t v11 = *(void *)(a2 + 32);
  unint64_t v10 = *(void *)(a2 + 40);
  sub_1D7860790(v11, v10);
  uint64_t v12 = *(void *)(a1 + 32);
  unint64_t v13 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v11;
  *(void *)(a1 + 40) = v10;
  sub_1D78607E8(v12, v13);
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for CredentialBuilderSignatureDetails(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  unint64_t v4 = (void *)(a2 + 16);
  unint64_t v5 = *(void *)(a1 + 24);
  if (v5 >> 60 != 15)
  {
    unint64_t v6 = *(void *)(a2 + 24);
    if (v6 >> 60 != 15)
    {
      uint64_t v7 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = *v4;
      *(void *)(a1 + 24) = v6;
      sub_1D78607E8(v7, v5);
      goto LABEL_6;
    }
    sub_1D7870C24(a1 + 16);
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)v4;
LABEL_6:
  uint64_t v8 = *(void *)(a1 + 32);
  unint64_t v9 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_1D78607E8(v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for CredentialBuilderSignatureDetails(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CredentialBuilderSignatureDetails(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CredentialBuilderSignatureDetails()
{
  return &type metadata for CredentialBuilderSignatureDetails;
}

unsigned char *storeEnumTagSinglePayload for CredentialBuilderPayloadFormat(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D7871710);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CredentialBuilderPayloadFormat()
{
  return &type metadata for CredentialBuilderPayloadFormat;
}

uint64_t getEnumTagSinglePayload for CredentialBuilderSignatureAlgorithm(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CredentialBuilderSignatureAlgorithm(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *__n128 result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D78718A4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CredentialBuilderSignatureAlgorithm()
{
  return &type metadata for CredentialBuilderSignatureAlgorithm;
}

uint64_t getEnumTagSinglePayload for CredentialBuilderTimePolicy(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CredentialBuilderTimePolicy(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D7871A38);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

unsigned char *sub_1D7871A60(unsigned char *result, char a2)
{
  *__n128 result = a2;
  return result;
}

ValueMetadata *type metadata accessor for CredentialBuilderTimePolicy()
{
  return &type metadata for CredentialBuilderTimePolicy;
}

uint64_t sub_1D7871A78(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_1D7871AD8()
{
  unint64_t result = qword_1EA842488;
  if (!qword_1EA842488)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA842488);
  }
  return result;
}

unint64_t sub_1D7871B2C()
{
  unint64_t result = qword_1EA842498;
  if (!qword_1EA842498)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA842498);
  }
  return result;
}

void *sub_1D7871B80(void *a1)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  unint64_t v5 = a1[5];
  swift_bridgeObjectRelease();
  sub_1D7871BDC(v2, v3);
  sub_1D78607E8(v4, v5);
  return a1;
}

uint64_t sub_1D7871BDC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1D78607E8(a1, a2);
  }
  return a1;
}

void *sub_1D7871BF0(void *a1)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  unint64_t v5 = a1[5];
  swift_bridgeObjectRetain();
  sub_1D786E9D8(v2, v3);
  sub_1D7860790(v4, v5);
  return a1;
}

uint64_t sub_1D7871C4C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1D7871CA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA842300);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D7871D10(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1D7871D78(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1D7871DDC(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D7871E20(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t static SharedInternalDefaultsKeys.useSignatureWithUAM.getter()
{
  return 0xD00000000000001CLL;
}

unint64_t static SharedInternalDefaultsKeys.disableCertificatePinning.getter()
{
  return 0xD000000000000021;
}

unint64_t static SharedInternalDefaultsKeys.logEncryptedData.getter()
{
  return 0xD000000000000018;
}

unint64_t static SharedInternalDefaultsKeys.disableJWSSignatureChecking.getter()
{
  return 0xD000000000000024;
}

unint64_t static SharedInternalDefaultsKeys.forceBackgroundTaskDeferral.getter()
{
  return 0xD000000000000024;
}

unint64_t static SharedInternalDefaultsKeys.lengthyBackgroundTasks.getter()
{
  return 0xD00000000000001ELL;
}

unint64_t static SharedInternalDefaultsKeys.includeUnencryptedData.getter()
{
  return 0xD00000000000001ELL;
}

unint64_t static SharedInternalDefaultsKeys.forceExpireBAACert.getter()
{
  return 0xD00000000000001BLL;
}

unint64_t static SharedInternalDefaultsKeys.enablePedanticConcurrency.getter()
{
  return 0xD000000000000022;
}

unint64_t static SharedInternalDefaultsKeys.logSensitiveData.getter()
{
  return 0xD000000000000018;
}

unint64_t static SharedInternalDefaultsKeys.logCryptoParams.getter()
{
  return 0xD000000000000017;
}

unint64_t static SharedInternalDefaultsKeys.logAppleIDVStatus.getter()
{
  return 0xD000000000000019;
}

unint64_t static SharedInternalDefaultsKeys.issuerValidationLogOnly.getter()
{
  return 0xD000000000000020;
}

unint64_t static SharedInternalDefaultsKeys.imageQualityVerboseLogging.getter()
{
  return 0xD00000000000001ALL;
}

unint64_t static SharedInternalDefaultsKeys.forceFeedbackUI.getter()
{
  return 0xD00000000000001BLL;
}

unint64_t static SharedInternalDefaultsKeys.enableScreenshare.getter()
{
  return 0xD00000000000001DLL;
}

unint64_t static SharedInternalDefaultsKeys.injectProofingImages.getter()
{
  return 0xD000000000000020;
}

unint64_t static SharedInternalDefaultsKeys.showIDScanDebugUI.getter()
{
  return 0xD00000000000001FLL;
}

unint64_t static SharedInternalDefaultsKeys.doNotRequireHSA2.getter()
{
  return 0xD000000000000019;
}

unint64_t static SharedInternalDefaultsKeys.forceImproperlyEncryptedMdocRequest.getter()
{
  return 0xD00000000000002DLL;
}

unint64_t static SharedInternalDefaultsKeys.fakeExpensiveNetworkforUploads.getter()
{
  return 0xD000000000000028;
}

unint64_t static SharedInternalDefaultsKeys.showPADFrameLogging.getter()
{
  return 0xD00000000000001DLL;
}

unint64_t static SharedInternalDefaultsKeys.injectFedStatsData.getter()
{
  return 0xD000000000000020;
}

unint64_t static SharedInternalDefaultsKeys.drawFaceBounds.getter()
{
  return 0xD000000000000018;
}

unint64_t static SharedInternalDefaultsKeys.drawFaceLandmarks.getter()
{
  return 0xD00000000000001BLL;
}

unint64_t static SharedInternalDefaultsKeys.presentErrorAlert.getter()
{
  return 0xD00000000000001BLL;
}

unint64_t static SharedInternalDefaultsKeys.simulateSelfieError.getter()
{
  return 0xD00000000000001DLL;
}

unint64_t static SharedInternalDefaultsKeys.stitchFramesToIgnore.getter()
{
  return 0xD00000000000001CLL;
}

unint64_t static SharedInternalDefaultsKeys.skipSelfieCompression.getter()
{
  return 0xD00000000000001FLL;
}

ValueMetadata *type metadata accessor for SharedInternalDefaultsKeys()
{
  return &type metadata for SharedInternalDefaultsKeys;
}

uint64_t RFC8152SigStructure.init(protected:payload:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

uint64_t static RFC8152SigStructure.protectedHeaderAlg.getter()
{
  return 1;
}

uint64_t RFC8152SigStructure.init(algorithm:payload:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA842490);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D7AA08E0;
  *(void *)(inited + 32) = 1;
  *(void *)(inited + 40) = a1;
  unint64_t v9 = sub_1D7860F64(inited);
  uint64_t result = swift_setDeallocating();
  *a4 = v9;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

double RFC8152SigStructure.init(from:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = sub_1D7860F64(MEMORY[0x1E4FBC860]);
  __swift_destroy_boxed_opaque_existential_1(a1);
  *(void *)a2 = v4;
  double result = 0.0;
  *(_OWORD *)(a2 + 8) = xmmword_1D7AA0AB0;
  return result;
}

uint64_t RFC8152SigStructure.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D7A9D6C8();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v6, v7);
  sub_1D7A9D2E8();
  if (!v1)
  {
    sub_1D7A9B3F8();
    swift_allocObject();
    sub_1D7A9B3E8();
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8424E8);
    sub_1D7872574();
    uint64_t v2 = sub_1D7A9B3C8();
    unint64_t v4 = v3;
    swift_release();
    swift_bridgeObjectRelease();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v6, v7);
    sub_1D7871AD8();
    sub_1D7A9D2F8();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v6, v7);
    sub_1D7A9D2F8();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v6, v7);
    sub_1D7A9D2F8();
    sub_1D78607E8(v2, v4);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
}

double sub_1D78724B0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = sub_1D7860F64(MEMORY[0x1E4FBC860]);
  __swift_destroy_boxed_opaque_existential_1(a1);
  *(void *)a2 = v4;
  double result = 0.0;
  *(_OWORD *)(a2 + 8) = xmmword_1D7AA0AB0;
  return result;
}

uint64_t sub_1D787250C(void *a1)
{
  return RFC8152SigStructure.encode(to:)(a1);
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

unint64_t sub_1D7872574()
{
  unint64_t result = qword_1EA8424F0;
  if (!qword_1EA8424F0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA8424E8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8424F0);
  }
  return result;
}

uint64_t destroy for RFC8152SigStructure(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16);
  return sub_1D78607E8(v2, v3);
}

void *_s13CoreIDVShared19RFC8152SigStructureVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  unint64_t v4 = a2[2];
  swift_bridgeObjectRetain();
  sub_1D7860790(v3, v4);
  a1[1] = v3;
  a1[2] = v4;
  return a1;
}

void *assignWithCopy for RFC8152SigStructure(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[1];
  unint64_t v4 = a2[2];
  sub_1D7860790(v5, v4);
  uint64_t v6 = a1[1];
  unint64_t v7 = a1[2];
  a1[1] = v5;
  a1[2] = v4;
  sub_1D78607E8(v6, v7);
  return a1;
}

void *assignWithTake for RFC8152SigStructure(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = a1[1];
  unint64_t v5 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  sub_1D78607E8(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for RFC8152SigStructure(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RFC8152SigStructure(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RFC8152SigStructure()
{
  return &type metadata for RFC8152SigStructure;
}

uint64_t withTaskTimeoutHandler<A>(timeout:operation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  *(void *)(v5 + 40) = a3;
  *(void *)(v5 + 48) = a4;
  *(void *)(v5 + 32) = a2;
  *(double *)(v5 + 24) = a5;
  *(void *)(v5 + 16) = a1;
  return MEMORY[0x1F4188298](sub_1D78727E8, 0, 0);
}

uint64_t sub_1D78727E8()
{
  double v1 = *(double *)(v0 + 24);
  if (v1 <= 0.0)
  {
    uint64_t v11 = (uint64_t (*)(uint64_t))(*(void *)(v0 + 32) + **(int **)(v0 + 32));
    unint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 80) = v7;
    *unint64_t v7 = v0;
    v7[1] = sub_1D7872AD8;
    uint64_t v8 = *(void *)(v0 + 16);
    return v11(v8);
  }
  else
  {
    uint64_t v2 = *(void *)(v0 + 48);
    uint64_t v3 = swift_task_alloc();
    *(void *)(v0 + 56) = v3;
    long long v4 = *(_OWORD *)(v0 + 32);
    *(void *)(v3 + 16) = v2;
    *(double *)(v3 + 24) = v1;
    *(_OWORD *)(v3 + 32) = v4;
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 64) = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_1D787299C;
    uint64_t v6 = *(void *)(v0 + 16);
    return MEMORY[0x1F4188080](v6);
  }
}

uint64_t sub_1D787299C()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](sub_1D7872BCC, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_1D7872AD8()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  double v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1D7872BCC()
{
  swift_task_dealloc();
  double v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1D7872C30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  *(void *)(v6 + 56) = a4;
  *(void *)(v6 + 64) = a5;
  *(void *)(v6 + 48) = a3;
  *(double *)(v6 + 40) = a6;
  *(void *)(v6 + 24) = a1;
  *(void *)(v6 + 32) = a2;
  *(void *)(v6 + 72) = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1EBDF9740);
  uint64_t v7 = sub_1D7A9D638();
  *(void *)(v6 + 80) = v7;
  uint64_t v8 = sub_1D7A9C9A8();
  *(void *)(v6 + 88) = v8;
  *(void *)(v6 + 96) = *(void *)(v8 - 8);
  *(void *)(v6 + 104) = swift_task_alloc();
  *(void *)(v6 + 112) = *(void *)(v7 - 8);
  *(void *)(v6 + 120) = swift_task_alloc();
  *(void *)(v6 + 128) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9978);
  *(void *)(v6 + 136) = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_1D7872DC4, 0, 0);
}

uint64_t sub_1D7872DC4()
{
  uint64_t v1 = v0[17];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[7];
  uint64_t v13 = v0[6];
  uint64_t v4 = v0[5];
  uint64_t v5 = sub_1D7A9C4A8();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  v6(v1, 1, 1, v5);
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = 0;
  v7[3] = 0;
  v7[4] = v2;
  v7[5] = v4;
  uint64_t v8 = sub_1D7A9C568();
  sub_1D78737D8(v1, (uint64_t)&unk_1EA842518, (uint64_t)v7);
  sub_1D7873DD0(v1);
  v6(v1, 1, 1, v5);
  unint64_t v9 = (void *)swift_allocObject();
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = v2;
  v9[5] = v13;
  v9[6] = v3;
  swift_retain();
  sub_1D78737D8(v1, (uint64_t)&unk_1EA842528, (uint64_t)v9);
  sub_1D7873DD0(v1);
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1EA842530 + dword_1EA842530);
  uint64_t v10 = (void *)swift_task_alloc();
  v0[18] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_1D7872FE4;
  uint64_t v11 = v0[13];
  return v14(v11, 0, 0, v8);
}

uint64_t sub_1D7872FE4()
{
  swift_task_dealloc();
  return MEMORY[0x1F4188298](sub_1D78730E0, 0, 0);
}

uint64_t sub_1D78730E0()
{
  uint64_t v1 = v0[13];
  uint64_t v2 = v0[14];
  uint64_t v3 = v0[10];
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3);
  uint64_t v5 = (uint64_t *)v0[16];
  if (v4 == 1)
  {
    uint64_t v6 = v0[11];
    uint64_t v7 = v0[12];
    sub_1D7873F94();
    *uint64_t v5 = swift_allocError();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1, v6);
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v0[16], v1, v3);
  }
  uint64_t v9 = v0[15];
  uint64_t v8 = v0[16];
  uint64_t v10 = v0[14];
  uint64_t v11 = v0[10];
  uint64_t v12 = v0[3];
  sub_1D7A9C488();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v9, v8, v11);
  sub_1D78A2A28(v11, (uint64_t)(v0 + 2), v12);
  (*(void (**)(void, void))(v0[14] + 8))(v0[16], v0[10]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_1D78732C8(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *((void *)v2 + 2);
  double v7 = v2[3];
  uint64_t v9 = *((void *)v2 + 4);
  uint64_t v8 = *((void *)v2 + 5);
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v10;
  *uint64_t v10 = v3;
  v10[1] = sub_1D786EC1C;
  return sub_1D7872C30(a1, a2, v9, v8, v6, v7);
}

uint64_t sub_1D7873394(double a1)
{
  *(double *)(v1 + 16) = a1;
  uint64_t v2 = sub_1D7A9CE48();
  *(void *)(v1 + 24) = v2;
  *(void *)(v1 + 32) = *(void *)(v2 - 8);
  *(void *)(v1 + 40) = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_1D7873454, 0, 0);
}

uint64_t sub_1D7873454()
{
  uint64_t v1 = sub_1D7A9D6F8();
  uint64_t v3 = v2;
  sub_1D7A9CE38();
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1EA8459D0 + dword_1EA8459D0);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v4;
  void *v4 = v0;
  v4[1] = sub_1D7873530;
  return v6(v1, v3, 0, 0, 1);
}

uint64_t sub_1D7873530()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 40);
  uint64_t v3 = *(void *)(*(void *)v1 + 32);
  uint64_t v4 = *(void *)(*(void *)v1 + 24);
  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0) {
    uint64_t v5 = sub_1D7873738;
  }
  else {
    uint64_t v5 = sub_1D78736A0;
  }
  return MEMORY[0x1F4188298](v5, 0, 0);
}

uint64_t sub_1D78736A0()
{
  sub_1D7873F94();
  swift_allocError();
  swift_willThrow();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1D7873738()
{
  sub_1D7873F94();
  swift_allocError();
  swift_willThrow();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1D78737D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9978);
  MEMORY[0x1F4188790](v7 - 8, v8, v9, v10, v11, v12, v13, v14);
  uint64_t v16 = (char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7873FE8(a1, (uint64_t)v16);
  uint64_t v17 = sub_1D7A9C4A8();
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    sub_1D7873DD0((uint64_t)v16);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v19 = sub_1D7A9C438();
      uint64_t v21 = v20;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    sub_1D7A9C498();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v16, v17);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v19 = 0;
  uint64_t v21 = 0;
LABEL_6:
  uint64_t v22 = *v4;
  uint64_t v23 = (void *)(v21 | v19);
  if (v21 | v19)
  {
    v26[0] = 0;
    v26[1] = 0;
    uint64_t v23 = v26;
    v26[2] = v19;
    v26[3] = v21;
  }
  v25[1] = 1;
  v25[2] = v23;
  v25[3] = v22;
  swift_task_create();
  return swift_release();
}

uint64_t sub_1D78739AC(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v8 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v6;
  void *v6 = v4;
  v6[1] = sub_1D786EC1C;
  return v8(a1);
}

uint64_t sub_1D7873A88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a2;
  v4[3] = a3;
  uint64_t v7 = (void *)swift_task_alloc();
  v4[4] = v7;
  *uint64_t v7 = v4;
  v7[1] = sub_1D7873B38;
  return MEMORY[0x1F4187E20](a1, a4);
}

uint64_t sub_1D7873B38()
{
  uint64_t v2 = (void *)*v1;
  v2[5] = v0;
  swift_task_dealloc();
  if (v0)
  {
    if (v2[2])
    {
      swift_getObjectType();
      uint64_t v3 = sub_1D7A9C438();
      uint64_t v5 = v4;
    }
    else
    {
      uint64_t v3 = 0;
      uint64_t v5 = 0;
    }
    return MEMORY[0x1F4188298](sub_1D7873CA8, v3, v5);
  }
  else
  {
    uint64_t v6 = (uint64_t (*)(void))v2[1];
    return v6();
  }
}

uint64_t sub_1D7873CA8()
{
  return MEMORY[0x1F41867D8](*(void *)(v0 + 40), "_Concurrency/TaskGroup.swift", 28, 1, 1173);
}

ValueMetadata *type metadata accessor for TimeoutError()
{
  return &type metadata for TimeoutError;
}

uint64_t sub_1D7873CD4()
{
  swift_unknownObjectRelease();
  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t sub_1D7873D0C()
{
  double v2 = *(double *)(v0 + 40);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1D7874050;
  return sub_1D7873394(v2);
}

uint64_t sub_1D7873DD0(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9978);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1D7873E30()
{
  swift_unknownObjectRelease();
  swift_release();
  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t sub_1D7873E70(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 40);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1D7874050;
  uint64_t v8 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v6 = (void *)swift_task_alloc();
  void v5[2] = v6;
  void *v6 = v5;
  v6[1] = sub_1D786EC1C;
  return v8(a1);
}

unint64_t sub_1D7873F94()
{
  unint64_t result = qword_1EBDF8688[0];
  if (!qword_1EBDF8688[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1EBDF8688);
  }
  return result;
}

uint64_t sub_1D7873FE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9978);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D7874058()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1D78740AC()
{
  uint64_t v1 = *(void **)(v0 + 16);
  objc_msgSend(v1, sel_invalidate);

  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SendableXPCConnection()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1D787414C()
{
  unint64_t v0 = sub_1D7A9D058();
  swift_bridgeObjectRelease();
  if (v0 >= 5) {
    return 5;
  }
  else {
    return v0;
  }
}

uint64_t sub_1D787419C(char a1)
{
  uint64_t result = 0x687469726F676C61;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x7265646E6573;
      break;
    case 2:
      uint64_t result = 0x6E65697069636572;
      break;
    case 3:
      uint64_t result = 0x736D61726170;
      break;
    case 4:
      uint64_t result = 1635017060;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1D7874240(char a1)
{
  uint64_t result = 0x687469726F676C61;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x7265646E6573;
      break;
    case 2:
      uint64_t result = 0x6E65697069636572;
      break;
    case 3:
      uint64_t result = 0x736D61726170;
      break;
    case 4:
      uint64_t result = 1635017060;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1D78742E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB1C8];
  return MEMORY[0x1F4185BB0](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_1D7874358(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4183DE0](a1, a2, WitnessTable, v5);
}

uint64_t sub_1D78743C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4183DF0](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_1D7874434(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4183DE8](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_1D78744A4@<X0>(void *a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  return sub_1D787D908(a1, a2, (uint64_t (*)(void, void, void, void, void))sub_1D787414C, a3);
}

uint64_t sub_1D78744BC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1D787D964(a1, (uint64_t (*)(void, void, void, void))sub_1D787419C, a2);
}

uint64_t sub_1D78744D4()
{
  return sub_1D7874240(*v0);
}

uint64_t sub_1D78744E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, unsigned char *a4@<X8>)
{
  uint64_t result = sub_1D7874198(a1, a2, a3[2], a3[3], a3[4]);
  *a4 = result;
  return result;
}

uint64_t sub_1D7874518@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1D7885B8C();
  *a1 = result;
  return result;
}

uint64_t sub_1D787454C(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t sub_1D78745A0(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t HPKEEncryptedMessagePlain.init(sender:recipient:unencryptedData:)@<X0>(char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char v8 = *a1;
  char v9 = *a2;
  *(unsigned char *)a5 = 0;
  *(_OWORD *)(a5 + 8) = xmmword_1D7AA0AC0;
  *(_OWORD *)(a5 + 24) = 0u;
  *(_OWORD *)(a5 + 40) = 0u;
  *(_OWORD *)(a5 + 56) = 0u;
  *(_OWORD *)(a5 + 72) = 0u;
  *(_OWORD *)(a5 + 88) = 0u;
  *(void *)(a5 + 104) = 0;
  *(void *)(a5 + 112) = 0xF000000000000000;
  uint64_t v10 = a5 + *(int *)(type metadata accessor for HPKEEncryptedMessagePlain() + 60);
  uint64_t v11 = *(void *)(a4 - 8);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
  v14(v10, 1, 1, a4);
  *(unsigned char *)(a5 + 1) = v8;
  *(unsigned char *)(a5 + 2) = v9;
  uint64_t v12 = sub_1D7A9C9A8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v10, v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v10, a3, a4);
  return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v14)(v10, 0, 1, a4);
}

uint64_t type metadata accessor for HPKEEncryptedMessagePlain()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t HPKEEncryptedMessagePlain.seal(to:encryptor:)(unint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = v3;
  unint64_t v100 = a2;
  unint64_t v101 = a1;
  uint64_t v7 = a3[2];
  uint64_t v6 = a3[3];
  unint64_t v108 = a3;
  uint64_t v8 = a3[4];
  uint64_t v103 = v6;
  uint64_t v102 = v8;
  uint64_t v9 = type metadata accessor for HPKEEnvelope();
  uint64_t v97 = *(void *)(v9 - 8);
  uint64_t v98 = v9;
  MEMORY[0x1F4188790](v9, v10, v11, v12, v13, v14, v15, v16);
  uint64_t v18 = (unint64_t *)((char *)&v88 - v17);
  uint64_t v19 = sub_1D7A9C9A8();
  uint64_t v106 = *(void *)(v19 - 8);
  uint64_t v107 = v19;
  uint64_t v27 = MEMORY[0x1F4188790](v19, v20, v21, v22, v23, v24, v25, v26);
  uint64_t v105 = (uint64_t)&v88 - v28;
  unint64_t v109 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v27, v29, v30, v31, v32, v33, v34, v35);
  unint64_t v99 = (char *)&v88 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = sub_1D7A9B5F8();
  uint64_t v38 = *(void *)(v37 - 8);
  MEMORY[0x1F4188790](v37, v39, v40, v41, v42, v43, v44, v45);
  uint64_t v47 = (char *)&v88 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v48 = __swift_project_value_buffer(v37, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v47, v48, v37);
  uint64_t v49 = sub_1D7A9B5D8();
  os_log_type_t v50 = sub_1D7A9C748();
  if (os_log_type_enabled(v49, v50))
  {
    uint64_t v95 = v18;
    uint64_t v51 = swift_slowAlloc();
    uint64_t v110 = v7;
    uint64_t v52 = (uint8_t *)v51;
    uint64_t v53 = swift_slowAlloc();
    uint64_t v112 = v53;
    uint64_t v96 = v4;
    *(_DWORD *)uint64_t v52 = 136315138;
    *(void *)&long long v94 = v52 + 4;
    uint64_t v111 = v110;
    swift_getMetatypeMetadata();
    uint64_t v54 = sub_1D7A9C038();
    uint64_t v111 = sub_1D7923300(v54, v55, &v112);
    uint64_t v4 = v96;
    sub_1D7A9C9E8();
    uint64_t v18 = v95;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1D7853000, v49, v50, "sealing messages using HPKE: message type = %s", v52, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v53, -1, -1);
    unint64_t v56 = v52;
    uint64_t v7 = v110;
    MEMORY[0x1D947D740](v56, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v38 + 8))(v47, v37);
  uint64_t v57 = v107;
  uint64_t v59 = v105;
  uint64_t v58 = v106;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v106 + 16))(v105, v4 + *((int *)v108 + 15), v107);
  unint64_t v60 = v109;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v109 + 48))(v59, 1, v7) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v59, v57);
    LOWORD(v112) = 105;
    unint64_t v61 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000002CLL, 0x80000001D7ABE610, (__int16 *)&v112, 0, v61, 0xD000000000000051, 0x80000001D7ABE640, v62, 0xD000000000000013, 0x80000001D7ABE6A0, 88);
    return swift_willThrow();
  }
  else
  {
    uint64_t v64 = (uint64_t)v99;
    (*(void (**)(char *, uint64_t, uint64_t))(v60 + 32))(v99, v59, v7);
    uint64_t v65 = v100[3];
    uint64_t v66 = v100[4];
    __swift_project_boxed_opaque_existential_1(v100, v65);
    uint64_t v67 = v104;
    sub_1D78FC4E8(v64, v101, v65, v7, v66, v103, v102);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v60 + 8))(v64, v7);
    if (!v67)
    {
      uint64_t v68 = v18[1];
      unint64_t v101 = v18[2];
      uint64_t v102 = v68;
      uint64_t v69 = (void *)v18[4];
      unint64_t v99 = (char *)v18[3];
      uint64_t v70 = (uint64_t)v99;
      unint64_t v100 = v69;
      uint64_t v71 = v18[5];
      uint64_t v95 = (void *)v18[6];
      unint64_t v72 = (unint64_t)v95;
      uint64_t v96 = v71;
      uint64_t v73 = v18[7];
      unint64_t v74 = v18[8];
      uint64_t v89 = v18[9];
      unint64_t v88 = v18[10];
      uint64_t v91 = v18[11];
      unint64_t v90 = v18[12];
      uint64_t v75 = *(void *)(v4 + 8);
      unint64_t v109 = *(void *)(v4 + 16);
      uint64_t v110 = v75;
      uint64_t v76 = *(void *)(v4 + 24);
      uint64_t v107 = *(void *)(v4 + 32);
      unint64_t v108 = (void *)v76;
      uint64_t v77 = *(void *)(v4 + 40);
      uint64_t v105 = *(void *)(v4 + 48);
      uint64_t v106 = v77;
      uint64_t v78 = *(void *)(v4 + 56);
      uint64_t v103 = *(void *)(v4 + 64);
      uint64_t v104 = v78;
      long long v94 = *(_OWORD *)(v4 + 72);
      uint64_t v93 = *(void *)(v4 + 88);
      uint64_t v92 = *(void *)(v4 + 96);
      sub_1D7860790(v68, v101);
      sub_1D7860790(v70, (unint64_t)v69);
      sub_1D786E9D8(v71, v72);
      sub_1D786E9D8(v73, v74);
      uint64_t v79 = v89;
      unint64_t v80 = v88;
      sub_1D786E9D8(v89, v88);
      uint64_t v81 = v91;
      unint64_t v82 = v90;
      sub_1D786E9D8(v91, v90);
      sub_1D7884608(v110, v109, (uint64_t)v108, v107, v106, v105, v104, v103, v94, *((uint64_t *)&v94 + 1), v93, v92, (void (*)(void))sub_1D78607E8, (void (*)(uint64_t, uint64_t))sub_1D7871BDC);
      unint64_t v83 = v101;
      *(void *)(v4 + 8) = v102;
      *(void *)(v4 + 16) = v83;
      char v84 = v100;
      *(void *)(v4 + 24) = v99;
      *(void *)(v4 + 32) = v84;
      uint64_t v85 = v95;
      *(void *)(v4 + 40) = v96;
      *(void *)(v4 + 48) = v85;
      *(void *)(v4 + 56) = v73;
      *(void *)(v4 + 64) = v74;
      *(void *)(v4 + 72) = v79;
      *(void *)(v4 + 80) = v80;
      *(void *)(v4 + 88) = v81;
      *(void *)(v4 + 96) = v82;
      uint64_t v86 = v18[13];
      unint64_t v87 = v18[14];
      sub_1D7860790(v86, v87);
      (*(void (**)(void *, uint64_t))(v97 + 8))(v18, v98);
      uint64_t result = sub_1D7871BDC(*(void *)(v4 + 104), *(void *)(v4 + 112));
      *(void *)(v4 + 104) = v86;
      *(void *)(v4 + 112) = v87;
    }
  }
  return result;
}

uint64_t type metadata accessor for HPKEEnvelope()
{
  return __swift_instantiateGenericMetadata();
}

void HPKEEncryptedMessagePlain.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v59 = sub_1D7A9CD48();
  uint64_t v56 = *(void *)(v59 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v59, v6, v7, v8, v9, v10, v11, v12);
  unint64_t v55 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13, v15, v16, v17, v18, v19, v20, v21);
  uint64_t v22 = *(void **)(a2 + 16);
  uint64_t v57 = (char *)&v55 - v23;
  uint64_t v58 = v22;
  type metadata accessor for HPKEEncryptedMessagePlain.CodingKeys();
  swift_getWitnessTable();
  uint64_t v24 = sub_1D7A9D238();
  uint64_t v25 = *(void *)(v24 - 8);
  MEMORY[0x1F4188790](v24, v26, v27, v28, v29, v30, v31, v32);
  uint64_t v34 = (char *)&v55 - v33;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D7A9D6E8();
  LOBYTE(v61[0]) = *(unsigned char *)v3;
  LOBYTE(v63) = 0;
  sub_1D78843EC();
  uint64_t v35 = v60;
  sub_1D7A9D228();
  if (v35)
  {
    (*(void (**)(char *, uint64_t))(v25 + 8))(v34, v24);
    uint64_t v39 = v58;
    uint64_t v40 = v59;
    uint64_t v41 = v57;
    id v63 = v35;
    id v42 = v35;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF9740);
    if (swift_dynamicCast())
    {

      uint64_t v44 = v55;
      uint64_t v43 = v56;
      (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v55, v41, v40);
      *(void *)&v61[0] = 0;
      *((void *)&v61[0] + 1) = 0xE000000000000000;
      sub_1D7A9CC48();
      swift_bridgeObjectRelease();
      *(void *)&v61[0] = 0xD00000000000001ALL;
      *((void *)&v61[0] + 1) = 0x80000001D7ABE6C0;
      uint64_t v62 = v39;
      swift_getMetatypeMetadata();
      sub_1D7A9C038();
      sub_1D7A9C128();
      swift_bridgeObjectRelease();
      sub_1D7A9C128();
      long long v45 = v61[0];
      uint64_t v46 = (void *)swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v43 + 16))(v47, v44, v40);
      LOWORD(v61[0]) = 116;
      unint64_t v48 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v46, v45, *((uint64_t *)&v45 + 1), (__int16 *)v61, 0, v48, 0xD000000000000051, 0x80000001D7ABE640, v49, 0x742865646F636E65, 0xEB00000000293A6FLL, 105);
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v43 + 8))(v44, v40);
      id v50 = v63;
    }
    else
    {

      *(void *)&v61[0] = 0;
      *((void *)&v61[0] + 1) = 0xE000000000000000;
      sub_1D7A9CC48();
      sub_1D7A9C128();
      id v63 = v39;
      swift_getMetatypeMetadata();
      sub_1D7A9C038();
      sub_1D7A9C128();
      swift_bridgeObjectRelease();
      sub_1D7A9C128();
      long long v51 = v61[0];
      LOWORD(v61[0]) = 0;
      id v52 = v35;
      unint64_t v53 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v35, v51, *((uint64_t *)&v51 + 1), (__int16 *)v61, 0, v53, 0xD000000000000051, 0x80000001D7ABE640, v54, 0x742865646F636E65, 0xEB00000000293A6FLL, 108);
      swift_willThrow();
      id v50 = v35;
    }
  }
  else
  {
    LOBYTE(v61[0]) = *(unsigned char *)(v3 + 1);
    LOBYTE(v63) = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8425C0);
    sub_1D78844E8(&qword_1EA8425C8, &qword_1EA8425C0, (void (*)(void))sub_1D7884440);
    sub_1D7A9D228();
    LOBYTE(v61[0]) = *(unsigned char *)(v3 + 2);
    LOBYTE(v63) = 2;
    sub_1D7A9D228();
    long long v36 = *(_OWORD *)(v3 + 24);
    v61[0] = *(_OWORD *)(v3 + 8);
    v61[1] = v36;
    long long v37 = *(_OWORD *)(v3 + 56);
    v61[2] = *(_OWORD *)(v3 + 40);
    v61[3] = v37;
    long long v38 = *(_OWORD *)(v3 + 88);
    v61[4] = *(_OWORD *)(v3 + 72);
    v61[5] = v38;
    LOBYTE(v63) = 3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8425D8);
    sub_1D78844E8(&qword_1EA8425E0, &qword_1EA8425D8, (void (*)(void))sub_1D7884494);
    sub_1D7A9D228();
    v61[0] = *(_OWORD *)(v3 + 104);
    LOBYTE(v63) = 4;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8425F0);
    sub_1D78844E8(&qword_1EA8425F8, &qword_1EA8425F0, (void (*)(void))sub_1D7871AD8);
    sub_1D7A9D228();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v34, v24);
  }
}

uint64_t HPKEEncryptedMessagePlain.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v71 = a3;
  uint64_t v78 = sub_1D7A9CCF8();
  uint64_t v76 = *(void *)(v78 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v78, v6, v7, v8, v9, v10, v11, v12);
  uint64_t v75 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13, v15, v16, v17, v18, v19, v20, v21);
  uint64_t v77 = (char *)&v70 - v22;
  type metadata accessor for HPKEEncryptedMessagePlain.CodingKeys();
  swift_getWitnessTable();
  uint64_t v74 = sub_1D7A9D168();
  uint64_t v73 = *(void *)(v74 - 8);
  MEMORY[0x1F4188790](v74, v23, v24, v25, v26, v27, v28, v29);
  uint64_t v31 = (char *)&v70 - v30;
  uint64_t v32 = type metadata accessor for HPKEEncryptedMessagePlain();
  uint64_t v72 = *(void *)(v32 - 8);
  uint64_t v40 = MEMORY[0x1F4188790](v32, v33, v34, v35, v36, v37, v38, v39);
  id v42 = (char *)&v70 - v41;
  char *v42 = 0;
  *(_OWORD *)(v42 + 8) = xmmword_1D7AA0AC0;
  *(_OWORD *)(v42 + 56) = 0u;
  *(_OWORD *)(v42 + 72) = 0u;
  *(_OWORD *)(v42 + 88) = 0u;
  *(_OWORD *)(v42 + 24) = 0u;
  *(_OWORD *)(v42 + 40) = 0u;
  *((void *)v42 + 13) = 0;
  *((void *)v42 + 14) = 0xF000000000000000;
  uint64_t v43 = (char *)&v70 + *(int *)(v40 + 60) - v41;
  uint64_t v44 = *(void (**)(void))(*(void *)(a2 - 8) + 56);
  uint64_t v79 = v43;
  unint64_t v80 = (void *)a2;
  v44();
  uint64_t v45 = a1[3];
  uint64_t v81 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v45);
  sub_1D7A9D6A8();
  if (v3)
  {
    unint64_t v48 = v80;
    uint64_t v49 = v78;
    id v50 = v77;
    id v84 = v3;
    id v51 = v3;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF9740);
    if (swift_dynamicCast())
    {

      id v52 = v75;
      uint64_t v53 = v76;
      (*(void (**)(char *, char *, uint64_t))(v76 + 32))(v75, v50, v49);
      *(void *)&v82[0] = 0;
      *((void *)&v82[0] + 1) = 0xE000000000000000;
      sub_1D7A9CC48();
      swift_bridgeObjectRelease();
      *(void *)&v82[0] = 0xD00000000000001ALL;
      *((void *)&v82[0] + 1) = 0x80000001D7ABE6C0;
      unint64_t v83 = v48;
      swift_getMetatypeMetadata();
      sub_1D7A9C038();
      sub_1D7A9C128();
      swift_bridgeObjectRelease();
      sub_1D7A9C128();
      uint64_t v54 = *((void *)&v82[0] + 1);
      unint64_t v80 = *(void **)&v82[0];
      unint64_t v55 = (void *)swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v53 + 16))(v56, v52, v49);
      LOWORD(v82[0]) = 115;
      unint64_t v57 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v55, (uint64_t)v80, v54, (__int16 *)v82, 0, v57, 0xD000000000000051, 0x80000001D7ABE640, v58, 0x6F72662874696E69, 0xEB00000000293A6DLL, 123);
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v53 + 8))(v52, v49);
      id v59 = v84;
    }
    else
    {

      *(void *)&v82[0] = 0;
      *((void *)&v82[0] + 1) = 0xE000000000000000;
      sub_1D7A9CC48();
      sub_1D7A9C128();
      id v84 = v48;
      swift_getMetatypeMetadata();
      sub_1D7A9C038();
      sub_1D7A9C128();
      swift_bridgeObjectRelease();
      sub_1D7A9C128();
      long long v60 = v82[0];
      LOWORD(v82[0]) = 0;
      id v61 = v3;
      unint64_t v62 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v3, v60, *((uint64_t *)&v60 + 1), (__int16 *)v82, 0, v62, 0xD000000000000051, 0x80000001D7ABE640, v63, 0x6F72662874696E69, 0xEB00000000293A6DLL, 126);
      swift_willThrow();
      id v59 = v3;
    }

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v81);
    sub_1D7884608(*((void *)v42 + 1), *((void *)v42 + 2), *((void *)v42 + 3), *((void *)v42 + 4), *((void *)v42 + 5), *((void *)v42 + 6), *((void *)v42 + 7), *((void *)v42 + 8), *((void *)v42 + 9), *((void *)v42 + 10), *((void *)v42 + 11), *((void *)v42 + 12), (void (*)(void))sub_1D78607E8, (void (*)(uint64_t, uint64_t))sub_1D7871BDC);
    sub_1D7871BDC(*((void *)v42 + 13), *((void *)v42 + 14));
    uint64_t v64 = sub_1D7A9C9A8();
    return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v64 - 8) + 8))(v79, v64);
  }
  else
  {
    uint64_t v46 = v72;
    uint64_t v47 = v73;
    LOBYTE(v84) = 1;
    sub_1D7884560();
    sub_1D7A9D0E8();
    v42[1] = v82[0];
    LOBYTE(v84) = 2;
    sub_1D7A9D0E8();
    v42[2] = v82[0];
    LOBYTE(v84) = 3;
    sub_1D78845B4();
    sub_1D7A9D148();
    long long v65 = v82[1];
    *(_OWORD *)(v42 + 8) = v82[0];
    *(_OWORD *)(v42 + 24) = v65;
    long long v66 = v82[3];
    *(_OWORD *)(v42 + 40) = v82[2];
    *(_OWORD *)(v42 + 56) = v66;
    long long v67 = v82[5];
    *(_OWORD *)(v42 + 72) = v82[4];
    *(_OWORD *)(v42 + 88) = v67;
    LOBYTE(v84) = 4;
    sub_1D786073C();
    sub_1D7A9D148();
    (*(void (**)(char *, uint64_t))(v47 + 8))(v31, v74);
    long long v68 = v82[0];
    sub_1D7871BDC(*((void *)v42 + 13), *((void *)v42 + 14));
    *(_OWORD *)(v42 + 104) = v68;
    (*(void (**)(uint64_t, char *, uint64_t))(v46 + 16))(v71, v42, v32);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v81);
    return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v42, v32);
  }
}

void HPKEEncryptedMessagePlain.open(with:authenticationContext:)(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = a3[2];
  uint64_t v10 = sub_1D7A9C9A8();
  MEMORY[0x1F4188790](v10 - 8, v11, v12, v13, v14, v15, v16, v17);
  uint64_t v19 = (char *)&v72 - v18;
  uint64_t v20 = a3[4];
  uint64_t v21 = a3[3];
  uint64_t v22 = type metadata accessor for HPKEEnvelope();
  uint64_t v30 = MEMORY[0x1F4188790](v22, v23, v24, v25, v26, v27, v28, v29);
  uint64_t v33 = (char *)&v72 - v32;
  unint64_t v34 = v4[2];
  if (v34 >> 60 == 15)
  {
    LOWORD(v94) = 278;
    unint64_t v35 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000023, 0x80000001D7ABE760, (__int16 *)&v94, 0, v35, 0xD000000000000051, 0x80000001D7ABE640, v36, 0xD000000000000021, 0x80000001D7ABE790, 132);
    swift_willThrow();
  }
  else
  {
    uint64_t v37 = (uint64_t)v19;
    uint64_t v78 = v20;
    uint64_t v80 = v21;
    uint64_t v79 = a1;
    uint64_t v81 = a4;
    uint64_t v82 = a2;
    uint64_t v38 = v4[1];
    uint64_t v93 = v4[3];
    uint64_t v39 = v4[5];
    unint64_t v105 = v4[4];
    uint64_t v41 = v4[6];
    uint64_t v40 = v4[7];
    uint64_t v42 = v4[8];
    uint64_t v92 = v4[9];
    unint64_t v91 = v4[10];
    uint64_t v90 = v4[11];
    unint64_t v89 = v4[12];
    unint64_t v86 = v4[14];
    uint64_t v87 = v38;
    uint64_t v88 = v39;
    uint64_t v85 = v42;
    if (v86 >> 60 == 15)
    {
      LOWORD(v94) = 278;
      unint64_t v43 = v42;
      sub_1D7860790(v38, v34);
      sub_1D7860790(v93, v105);
      sub_1D786E9D8(v39, v41);
      sub_1D786E9D8(v40, v43);
      uint64_t v45 = v91;
      uint64_t v44 = v92;
      sub_1D786E9D8(v92, v91);
      uint64_t v47 = v89;
      uint64_t v46 = v90;
      sub_1D786E9D8(v90, v89);
      unint64_t v48 = v34;
      unint64_t v49 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000021, 0x80000001D7ABE7C0, (__int16 *)&v94, 0, v49, 0xD000000000000051, 0x80000001D7ABE640, v50, 0xD000000000000021, 0x80000001D7ABE790, 135);
      swift_willThrow();
      sub_1D7884608(v87, v48, v93, v105, v88, v41, v40, v85, v44, v45, v46, v47, (void (*)(void))sub_1D78607E8, (void (*)(uint64_t, uint64_t))sub_1D7871BDC);
    }
    else
    {
      uint64_t v76 = v31;
      uint64_t v77 = v30;
      uint64_t v72 = v4[13];
      *(void *)&long long v94 = v38;
      *((void *)&v94 + 1) = v34;
      uint64_t v95 = v93;
      unint64_t v96 = v105;
      uint64_t v97 = v39;
      uint64_t v98 = v41;
      uint64_t v99 = v40;
      uint64_t v100 = v42;
      uint64_t v101 = v92;
      uint64_t v51 = v90;
      unint64_t v102 = v91;
      uint64_t v103 = v90;
      uint64_t v52 = v89;
      unint64_t v104 = v89;
      uint64_t v53 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
      uint64_t v74 = v33;
      uint64_t v73 = v37;
      uint64_t v54 = v42;
      v53(v37, 1, 1, v9);
      uint64_t v75 = sub_1D786E9D8;
      unint64_t v83 = v34;
      uint64_t v84 = v41;
      unint64_t v55 = (uint64_t (*)(uint64_t, unint64_t))v40;
      uint64_t v56 = v54;
      uint64_t v70 = v51;
      unint64_t v57 = v34;
      uint64_t v58 = v93;
      unint64_t v59 = v105;
      sub_1D7884608(v38, v57, v93, v105, v88, v84, (uint64_t)v55, v54, v92, v91, v70, v52, (void (*)(void))sub_1D7860790, (void (*)(uint64_t, uint64_t))sub_1D786E9D8);
      uint64_t v60 = v72;
      unint64_t v61 = v86;
      sub_1D786E9D8(v72, v86);
      uint64_t v71 = (void (*)(uint64_t, uint64_t))v75;
      unint64_t v62 = v83;
      uint64_t v63 = v59;
      uint64_t v64 = v88;
      uint64_t v75 = v55;
      sub_1D7884608(v38, v83, v58, v63, v88, v84, (uint64_t)v55, v56, v92, v91, v90, v89, (void (*)(void))sub_1D7860790, v71);
      sub_1D786E9D8(v60, v61);
      uint64_t v65 = (uint64_t)v74;
      uint64_t v66 = v80;
      uint64_t v67 = v78;
      HPKEEnvelope.init(params:data:unencryptedData:)(&v94, v60, v61, v73, v9, (uint64_t)v74);
      uint64_t v68 = v79[3];
      uint64_t v69 = v79[4];
      __swift_project_boxed_opaque_existential_1(v79, v68);
      sub_1D78FC5C8(v65, v82, v68, v9, v69, v66, v67);
      (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v65, v77);
      sub_1D7884608(v87, v62, v93, v105, v64, v84, (uint64_t)v75, v85, v92, v91, v90, v89, (void (*)(void))sub_1D78607E8, (void (*)(uint64_t, uint64_t))sub_1D7871BDC);
      sub_1D7871BDC(v60, v86);
    }
  }
}

uint64_t HPKEEnvelope.init(params:data:unencryptedData:)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  long long v20 = a1[1];
  long long v21 = *a1;
  long long v18 = a1[3];
  long long v19 = a1[2];
  long long v17 = a1[4];
  uint64_t v11 = *((void *)a1 + 10);
  uint64_t v12 = *((void *)a1 + 11);
  *(unsigned char *)a6 = 0;
  uint64_t v13 = a6 + *(int *)(type metadata accessor for HPKEEnvelope() + 52);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 56))(v13, 1, 1, a5);
  *(_OWORD *)(a6 + 8) = v21;
  *(_OWORD *)(a6 + 24) = v20;
  *(_OWORD *)(a6 + 40) = v19;
  *(_OWORD *)(a6 + 56) = v18;
  *(_OWORD *)(a6 + 72) = v17;
  *(void *)(a6 + 88) = v11;
  *(void *)(a6 + 96) = v12;
  *(void *)(a6 + 104) = a2;
  *(void *)(a6 + 112) = a3;
  uint64_t v14 = sub_1D7A9C9A8();
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40);
  return v15(v13, a4, v14);
}

uint64_t sub_1D7876724@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return HPKEEncryptedMessagePlain.init(from:)(a1, *(void *)(a2 + 16), a3);
}

void sub_1D7876748(void *a1, uint64_t a2)
{
}

uint64_t sub_1D7876760()
{
  unint64_t v0 = sub_1D7A9D058();
  swift_bridgeObjectRelease();
  if (v0 >= 6) {
    return 6;
  }
  else {
    return v0;
  }
}

uint64_t sub_1D78767B0(char a1)
{
  uint64_t result = 0x687469726F676C61;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x7265646E6573;
      break;
    case 2:
      uint64_t result = 0x6E65697069636572;
      break;
    case 3:
      uint64_t result = 1397320560;
      break;
    case 4:
      uint64_t result = 1937335659;
      break;
    case 5:
      uint64_t result = 0x736567617373656DLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1D787686C(char a1)
{
  uint64_t result = 0x687469726F676C61;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x7265646E6573;
      break;
    case 2:
      uint64_t result = 0x6E65697069636572;
      break;
    case 3:
      uint64_t result = 1397320560;
      break;
    case 4:
      uint64_t result = 1937335659;
      break;
    case 5:
      uint64_t result = 0x736567617373656DLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1D7876928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB1C8];
  return MEMORY[0x1F4185BB0](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_1D787699C(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4183DE0](a1, a2, WitnessTable, v5);
}

uint64_t sub_1D7876A08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4183DF0](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_1D7876A78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4183DE8](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_1D7876AE8@<X0>(void *a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  return sub_1D787D908(a1, a2, (uint64_t (*)(void, void, void, void, void))sub_1D7876760, a3);
}

uint64_t sub_1D7876B00@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1D787D964(a1, (uint64_t (*)(void, void, void, void))sub_1D78767B0, a2);
}

uint64_t sub_1D7876B18()
{
  return sub_1D787686C(*v0);
}

uint64_t sub_1D7876B28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, unsigned char *a4@<X8>)
{
  uint64_t result = sub_1D78767AC(a1, a2, a3[2], a3[3], a3[4]);
  *a4 = result;
  return result;
}

uint64_t sub_1D7876B5C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1D7885B94();
  *a1 = result;
  return result;
}

uint64_t sub_1D7876B90(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t sub_1D7876BE4(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t HPKEEncryptedMessageWithKeyWrap.init(sender:recipient:messages:)@<X0>(char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char v8 = *a1;
  char v9 = *a2;
  *(unsigned char *)a5 = 1;
  sub_1D78846FC((uint64_t)v12);
  *(unsigned char *)(a5 + 1) = v8;
  *(unsigned char *)(a5 + 2) = v9;
  sub_1D7871D78((uint64_t)v12, a5 + 8, &qword_1EA842610);
  uint64_t v10 = type metadata accessor for HPKEEncryptedMessageWithKeyWrap();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v10 + 60), a3, a4);
  *(void *)(a5 + 136) = MEMORY[0x1E4FBC868];
  return result;
}

Swift::Void __swiftcall HPKEEncryptedMessageWithKeyWrap.addMessageEncryptionKey(keyID:key:)(Swift::String keyID, CoreIDVShared::AEADKey key)
{
  object = keyID._object;
  uint64_t countAndFlagsBits = keyID._countAndFlagsBits;
  uint64_t v5 = *(void *)key.secretKey._countAndFlagsBits;
  uint64_t v4 = *(void *)(key.secretKey._countAndFlagsBits + 8);
  uint64_t v7 = *(void *)(key.secretKey._countAndFlagsBits + 16);
  uint64_t v6 = *(void *)(key.secretKey._countAndFlagsBits + 24);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA842618);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D7AA08E0;
  *(void *)(inited + 32) = countAndFlagsBits;
  *(void *)(inited + 40) = object;
  *(void *)(inited + 48) = v5;
  *(void *)(inited + 56) = v4;
  *(void *)(inited + 64) = v7;
  *(void *)(inited + 72) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v9 = sub_1D785F160(inited);
  HPKEEncryptedMessageWithKeyWrap.addMessageEncryptionKeys(keys:)((Swift::OpaquePointer)v9);
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall HPKEEncryptedMessageWithKeyWrap.addMessageEncryptionKeys(keys:)(Swift::OpaquePointer keys)
{
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v4 = *(void *)(v1 + 136);
  *(void *)(v1 + 136) = 0x8000000000000000;
  sub_1D7884734((uint64_t)keys._rawValue, (uint64_t)sub_1D7884E18, 0, isUniquelyReferenced_nonNull_native, &v4);
  *(void *)(v1 + 136) = v4;
  swift_bridgeObjectRelease();
}

uint64_t HPKEEncryptedMessageWithKeyWrap.sealKeys(to:encryptor:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v35 = a3;
  uint64_t v37 = a1;
  uint64_t v6 = sub_1D7A9B5F8();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v8, v9, v10, v11, v12, v13, v14);
  uint64_t v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = *(void *)(*(void *)(v4 + 136) + 16);
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v17 = __swift_project_value_buffer(v6, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v16, v17, v6);
  long long v18 = sub_1D7A9B5D8();
  os_log_type_t v19 = sub_1D7A9C748();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = swift_slowAlloc();
    uint64_t v34 = v6;
    uint64_t v21 = v20;
    uint64_t v33 = swift_slowAlloc();
    *(void *)&v41[0] = v33;
    *(_DWORD *)uint64_t v21 = 136315394;
    uint64_t v32 = v21 + 4;
    v39[0] = *(void *)(v35 + 16);
    swift_getMetatypeMetadata();
    uint64_t v35 = v4;
    uint64_t v22 = sub_1D7A9C038();
    v39[0] = sub_1D7923300(v22, v23, (uint64_t *)v41);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease();
    *(_WORD *)(v21 + 12) = 2048;
    v39[0] = v36;
    uint64_t v4 = v35;
    sub_1D7A9C9E8();
    _os_log_impl(&dword_1D7853000, v18, v19, "sealing keys: message type = %s, # of keys: %ld", (uint8_t *)v21, 0x16u);
    uint64_t v24 = v33;
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v24, -1, -1);
    MEMORY[0x1D947D740](v21, -1, -1);

    (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v34);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v6);
  }
  uint64_t v25 = a2[3];
  uint64_t v26 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v25);
  uint64_t v40 = *(void *)(v4 + 136);
  swift_bridgeObjectRetain();
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA842620);
  uint64_t v28 = sub_1D7884EC4(&qword_1EA842628, (void (*)(void))sub_1D7884E70);
  uint64_t v29 = sub_1D7884EC4(&qword_1EA842638, (void (*)(void))sub_1D7884F40);
  uint64_t v30 = v42;
  sub_1D78FC4E8((uint64_t)&v40, v37, v25, v27, v26, v28, v29);
  if (v30) {
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v38[4] = v41[4];
  v38[5] = v41[5];
  v38[6] = v41[6];
  v38[7] = v41[7];
  v38[0] = v41[0];
  v38[1] = v41[1];
  v38[2] = v41[2];
  v38[3] = v41[3];
  nullsub_1(v38);
  sub_1D7871D78(v4 + 8, (uint64_t)v39, &qword_1EA842610);
  sub_1D78850B4(v39, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1D7884F94);
  return sub_1D7871D78((uint64_t)v38, v4 + 8, &qword_1EA842610);
}

void HPKEEncryptedMessageWithKeyWrap.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v57 = sub_1D7A9CD48();
  uint64_t v55 = *(void *)(v57 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v57, v4, v5, v6, v7, v8, v9, v10);
  uint64_t v54 = (char *)v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11, v13, v14, v15, v16, v17, v18, v19);
  uint64_t v56 = (char *)v53 - v20;
  uint64_t v21 = *(void *)(a2 + 32);
  uint64_t v58 = *(void **)(a2 + 16);
  v53[1] = v21;
  v53[2] = a2;
  type metadata accessor for HPKEEncryptedMessageWithKeyWrap.CodingKeys();
  swift_getWitnessTable();
  uint64_t v22 = sub_1D7A9D238();
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22, v24, v25, v26, v27, v28, v29, v30);
  uint64_t v32 = (char *)v53 - v31;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v33 = v59;
  sub_1D7A9D6E8();
  LOBYTE(v63) = *v33;
  LOBYTE(v62[0]) = 0;
  sub_1D78843EC();
  uint64_t v67 = v32;
  uint64_t v34 = v60;
  sub_1D7A9D228();
  if (v34)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v67, v22);
    uint64_t v35 = v57;
    uint64_t v36 = v58;
    uint64_t v37 = v56;
    v62[0] = v34;
    id v38 = v34;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF9740);
    if (swift_dynamicCast())
    {

      uint64_t v39 = v54;
      uint64_t v40 = v55;
      (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v54, v37, v35);
      unint64_t v63 = 0;
      unint64_t v64 = 0xE000000000000000;
      sub_1D7A9CC48();
      swift_bridgeObjectRelease();
      unint64_t v63 = 0xD000000000000015;
      unint64_t v64 = 0x80000001D7ABE7F0;
      uint64_t v66 = v36;
      swift_getMetatypeMetadata();
      sub_1D7A9C038();
      sub_1D7A9C128();
      swift_bridgeObjectRelease();
      sub_1D7A9C128();
      uint64_t v41 = v63;
      uint64_t v42 = v64;
      unint64_t v43 = (void *)swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v40 + 16))(v44, v39, v35);
      LOWORD(v63) = 116;
      unint64_t v45 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v43, v41, v42, (__int16 *)&v63, 0, v45, 0xD000000000000051, 0x80000001D7ABE640, v46, 0x742865646F636E65, 0xEB00000000293A6FLL, 205);
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v39, v35);
      id v47 = v62[0];
    }
    else
    {

      unint64_t v63 = 0;
      unint64_t v64 = 0xE000000000000000;
      sub_1D7A9CC48();
      swift_bridgeObjectRelease();
      unint64_t v63 = 0xD000000000000015;
      unint64_t v64 = 0x80000001D7ABE7F0;
      v62[0] = v36;
      swift_getMetatypeMetadata();
      sub_1D7A9C038();
      sub_1D7A9C128();
      swift_bridgeObjectRelease();
      sub_1D7A9C128();
      uint64_t v48 = v63;
      uint64_t v49 = v64;
      LOWORD(v63) = 0;
      id v50 = v34;
      unint64_t v51 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v34, v48, v49, (__int16 *)&v63, 0, v51, 0xD000000000000051, 0x80000001D7ABE640, v52, 0x742865646F636E65, 0xEB00000000293A6FLL, 208);
      swift_willThrow();
      id v47 = v34;
    }
  }
  else
  {
    uint64_t v60 = (void (**)(void, uint64_t))v23;
    LOBYTE(v63) = v33[1];
    LOBYTE(v62[0]) = 1;
    sub_1D7884440();
    sub_1D7A9D228();
    LOBYTE(v66) = v33[2];
    char v65 = 2;
    sub_1D7A9D228();
    sub_1D7871D78((uint64_t)(v33 + 8), (uint64_t)&v63, &qword_1EA842610);
    sub_1D7871D78((uint64_t)&v63, (uint64_t)v62, &qword_1EA842610);
    char v61 = 4;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA842648);
    sub_1D7871DDC(&qword_1EA842650, &qword_1EA842648);
    sub_1D7A9D1C8();
    LOBYTE(v62[0]) = 5;
    sub_1D7A9D228();
    ((void (**)(char *, uint64_t))v60)[1](v67, v22);
  }
}

void *HPKEEncryptedMessageWithKeyWrap.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v82 = a4;
  uint64_t v91 = sub_1D7A9CCF8();
  uint64_t v89 = *(void *)(v91 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v91, v7, v8, v9, v10, v11, v12, v13);
  uint64_t v88 = (char *)&v78 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x1F4188790](v14, v16, v17, v18, v19, v20, v21, v22);
  uint64_t v90 = (char *)&v78 - v24;
  uint64_t v81 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v23, v25, v26, v27, v28, v29, v30, v31);
  uint64_t v84 = (char *)&v78 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for HPKEEncryptedMessageWithKeyWrap.CodingKeys();
  swift_getWitnessTable();
  uint64_t v87 = sub_1D7A9D168();
  uint64_t v85 = *(void *)(v87 - 8);
  MEMORY[0x1F4188790](v87, v33, v34, v35, v36, v37, v38, v39);
  uint64_t v41 = (char *)&v78 - v40;
  uint64_t v92 = a2;
  uint64_t v83 = a3;
  uint64_t v42 = type metadata accessor for HPKEEncryptedMessageWithKeyWrap();
  uint64_t v79 = *(void *)(v42 - 8);
  uint64_t v80 = v42;
  MEMORY[0x1F4188790](v42, v43, v44, v45, v46, v47, v48, v49);
  unint64_t v51 = (char *)&v78 - v50;
  *((unsigned char *)&v78 - v50) = 1;
  sub_1D78846FC((uint64_t)v99);
  long long v94 = v51 + 8;
  sub_1D7871D78((uint64_t)v99, (uint64_t)(v51 + 8), &qword_1EA842610);
  uint64_t v52 = a1[3];
  uint64_t v100 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v52);
  unint64_t v86 = v41;
  uint64_t v53 = v93;
  sub_1D7A9D6A8();
  if (v53)
  {
    uint64_t v55 = (uint64_t)v100;
    uint64_t v56 = v91;
    uint64_t v57 = v92;
    uint64_t v58 = v90;
    *(void *)&v96[0] = v53;
    id v59 = v53;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF9740);
    if (swift_dynamicCast())
    {

      char v61 = v88;
      uint64_t v60 = v89;
      (*(void (**)(char *, char *, uint64_t))(v89 + 32))(v88, v58, v56);
      *(void *)&v98[0] = 0;
      *((void *)&v98[0] + 1) = 0xE000000000000000;
      sub_1D7A9CC48();
      swift_bridgeObjectRelease();
      *(void *)&v98[0] = 0xD000000000000015;
      *((void *)&v98[0] + 1) = 0x80000001D7ABE7F0;
      uint64_t v97 = v57;
      swift_getMetatypeMetadata();
      sub_1D7A9C038();
      sub_1D7A9C128();
      swift_bridgeObjectRelease();
      sub_1D7A9C128();
      long long v62 = v98[0];
      unint64_t v63 = (void *)swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v60 + 16))(v64, v61, v56);
      LOWORD(v98[0]) = 115;
      unint64_t v65 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v63, v62, *((uint64_t *)&v62 + 1), (__int16 *)v98, 0, v65, 0xD000000000000051, 0x80000001D7ABE640, v66, 0x6F72662874696E69, 0xEB00000000293A6DLL, 224);
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v60 + 8))(v61, v56);
      uint64_t v55 = (uint64_t)v100;
      uint64_t v67 = *(void **)&v96[0];
    }
    else
    {

      *(void *)&v98[0] = 0;
      *((void *)&v98[0] + 1) = 0xE000000000000000;
      sub_1D7A9CC48();
      swift_bridgeObjectRelease();
      *(void *)&v98[0] = 0xD000000000000015;
      *((void *)&v98[0] + 1) = 0x80000001D7ABE7F0;
      *(void *)&v96[0] = v57;
      swift_getMetatypeMetadata();
      sub_1D7A9C038();
      sub_1D7A9C128();
      swift_bridgeObjectRelease();
      sub_1D7A9C128();
      long long v68 = v98[0];
      LOWORD(v98[0]) = 0;
      id v69 = v53;
      unint64_t v70 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v53, v68, *((uint64_t *)&v68 + 1), (__int16 *)v98, 0, v70, 0xD000000000000051, 0x80000001D7ABE640, v71, 0x6F72662874696E69, 0xEB00000000293A6DLL, 227);
      swift_willThrow();
      uint64_t v67 = v53;
    }

    __swift_destroy_boxed_opaque_existential_1(v55);
    sub_1D7871D78((uint64_t)v94, (uint64_t)v98, &qword_1EA842610);
    return sub_1D78850B4(v98, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1D7884F94);
  }
  else
  {
    uint64_t v54 = v85;
    LOBYTE(v96[0]) = 1;
    sub_1D7884560();
    sub_1D7A9D148();
    v51[1] = v98[0];
    LOBYTE(v96[0]) = 2;
    sub_1D7A9D148();
    v51[2] = v98[0];
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA842648);
    LOBYTE(v97) = 4;
    sub_1D7871DDC(&qword_1EA842658, &qword_1EA842648);
    sub_1D7A9D148();
    v96[4] = v98[4];
    v96[5] = v98[5];
    v96[6] = v98[6];
    v96[7] = v98[7];
    v96[0] = v98[0];
    v96[1] = v98[1];
    v96[2] = v98[2];
    v96[3] = v98[3];
    nullsub_1(v96);
    sub_1D7871D78((uint64_t)v96, (uint64_t)v94, &qword_1EA842610);
    char v95 = 5;
    uint64_t v72 = v84;
    uint64_t v73 = v92;
    sub_1D7A9D148();
    uint64_t v74 = (uint64_t)v100;
    uint64_t v75 = v80;
    (*(void (**)(char *, char *, uint64_t))(v81 + 32))(&v51[*(int *)(v80 + 60)], v72, v73);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v86, v87);
    *((void *)v51 + 17) = MEMORY[0x1E4FBC868];
    uint64_t v76 = v79;
    (*(void (**)(uint64_t, char *, uint64_t))(v79 + 16))(v82, v51, v75);
    __swift_destroy_boxed_opaque_existential_1(v74);
    return (void *)(*(uint64_t (**)(char *, uint64_t))(v76 + 8))(v51, v75);
  }
}

void *HPKEEncryptedMessageWithKeyWrap.getKeys()@<X0>(uint64_t a1@<X8>)
{
  sub_1D7871D78(v1 + 8, (uint64_t)v4, &qword_1EA842610);
  sub_1D7871D78((uint64_t)v4, a1, &qword_1EA842610);
  return sub_1D78850B4(v4, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1D7885118);
}

uint64_t HPKEEncryptedMessageWithKeyWrap.getMessages()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 60));
}

void *sub_1D7878338@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return HPKEEncryptedMessageWithKeyWrap.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

void sub_1D787835C(void *a1, uint64_t a2)
{
}

CoreIDVShared::HPKEEncryptionParamsAlgorithmIdentifier_optional __swiftcall HPKEEncryptionParamsAlgorithmIdentifier.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v2 = v1;
  uint64_t v3 = sub_1D7A9D058();
  result.value = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *uint64_t v2 = v5;
  return result;
}

uint64_t HPKEEncryptionParamsAlgorithmIdentifier.rawValue.getter()
{
  if (*v0) {
    return 0xD000000000000010;
  }
  else {
    return 0x50482D454C505041;
  }
}

uint64_t sub_1D7878424(char *a1, char *a2)
{
  return sub_1D7994C40(*a1, *a2);
}

uint64_t sub_1D7878430()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D78784C4()
{
  sub_1D7A9C0B8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D7878544()
{
  return sub_1D7A9D628();
}

CoreIDVShared::HPKEEncryptionParamsAlgorithmIdentifier_optional sub_1D78785D4(Swift::String *a1)
{
  return HPKEEncryptionParamsAlgorithmIdentifier.init(rawValue:)(*a1);
}

void sub_1D78785E0(unint64_t *a1@<X8>)
{
  unint64_t v2 = 0x50482D454C505041;
  if (*v1) {
    unint64_t v2 = 0xD000000000000010;
  }
  unint64_t v3 = 0x80000001D7ABB140;
  if (!*v1) {
    unint64_t v3 = 0xED000031762D454BLL;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1D7878630()
{
  return sub_1D7A9C2B8();
}

uint64_t sub_1D7878690()
{
  return sub_1D7A9C258();
}

void HPKEEncryptedMessageAlgorithm.algorithm.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_1D78786EC()
{
  return 1;
}

uint64_t sub_1D78786F4()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D787874C()
{
  return sub_1D7A9C0B8();
}

uint64_t sub_1D7878768()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D78787BC@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2 = sub_1D7A9D058();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_1D7878810(void *a1@<X8>)
{
  *a1 = 0x687469726F676C61;
  a1[1] = 0xE90000000000006DLL;
}

uint64_t sub_1D7878830()
{
  return 0x687469726F676C61;
}

uint64_t sub_1D787884C@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2 = sub_1D7A9D058();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_1D78788A4(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1D78788B0(uint64_t a1)
{
  unint64_t v2 = sub_1D7885220();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1D78788EC(uint64_t a1)
{
  unint64_t v2 = sub_1D7885220();
  return MEMORY[0x1F41862B0](a1, v2);
}

CoreIDVShared::HPKEEncryptedMessageAlgorithm __swiftcall HPKEEncryptedMessageAlgorithm.init(algorithm:)(CoreIDVShared::HPKEEncryptedMessageAlgorithm algorithm)
{
  *uint64_t v1 = *(unsigned char *)algorithm.algorithm;
  return algorithm;
}

void HPKEEncryptedMessageAlgorithm.encode(to:)(void *a1)
{
  uint64_t v3 = sub_1D7A9CD48();
  uint64_t v48 = *(void *)(v3 - 8);
  uint64_t v49 = v3;
  uint64_t v11 = MEMORY[0x1F4188790](v3, v4, v5, v6, v7, v8, v9, v10);
  uint64_t v47 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11, v13, v14, v15, v16, v17, v18, v19);
  uint64_t v21 = (char *)&v46 - v20;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA842660);
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22, v24, v25, v26, v27, v28, v29, v30);
  uint64_t v32 = (char *)&v46 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v33 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D7885220();
  sub_1D7A9D6E8();
  char v54 = v33;
  sub_1D78843EC();
  uint64_t v34 = v50;
  sub_1D7A9D228();
  if (v34)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v32, v22);
    id v51 = v34;
    id v35 = v34;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF9740);
    uint64_t v36 = v49;
    if (swift_dynamicCast())
    {

      uint64_t v38 = v47;
      uint64_t v37 = v48;
      (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v47, v21, v36);
      uint64_t v39 = (void *)swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v37 + 16))(v40, v38, v36);
      __int16 v52 = 116;
      unint64_t v41 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v39, 0xD00000000000002CLL, 0x80000001D7ABE850, &v52, 0, v41, 0xD000000000000051, 0x80000001D7ABE640, v42, 0x742865646F636E65, 0xEB00000000293A6FLL, 265);
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v36);
    }
    else
    {

      __int16 v53 = 0;
      id v43 = v34;
      unint64_t v44 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v34, 0xD000000000000034, 0x80000001D7ABE810, &v53, 0, v44, 0xD000000000000051, 0x80000001D7ABE640, v45, 0x742865646F636E65, 0xEB00000000293A6FLL, 268);
      swift_willThrow();
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v32, v22);
  }
}

uint64_t HPKEEncryptedMessageAlgorithm.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v49 = a2;
  uint64_t v4 = sub_1D7A9CCF8();
  uint64_t v51 = *(void *)(v4 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v4, v5, v6, v7, v8, v9, v10, v11);
  uint64_t v50 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12, v14, v15, v16, v17, v18, v19, v20);
  uint64_t v22 = (char *)&v48 - v21;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA842670);
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v23, v25, v26, v27, v28, v29, v30, v31);
  char v33 = (char *)&v48 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = a1[3];
  __int16 v52 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v34);
  sub_1D7885220();
  sub_1D7A9D6A8();
  if (v2)
  {
    id v56 = v2;
    id v36 = v2;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF9740);
    if (swift_dynamicCast())
    {

      uint64_t v38 = v50;
      uint64_t v37 = v51;
      (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v50, v22, v4);
      uint64_t v39 = (void *)swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v37 + 16))(v40, v38, v4);
      __int16 v54 = 115;
      unint64_t v41 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v39, 0xD00000000000002CLL, 0x80000001D7ABE8C0, &v54, 0, v41, 0xD000000000000051, 0x80000001D7ABE640, v42, 0x6F72662874696E69, 0xEB00000000293A6DLL, 280);
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v4);
      id v43 = v56;
    }
    else
    {

      __int16 v55 = 0;
      id v44 = v2;
      unint64_t v45 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v2, 0xD000000000000034, 0x80000001D7ABE880, &v55, 0, v45, 0xD000000000000051, 0x80000001D7ABE640, v46, 0x6F72662874696E69, 0xEB00000000293A6DLL, 283);
      swift_willThrow();
      id v43 = v2;
    }
  }
  else
  {
    id v35 = v49;
    sub_1D7885274();
    sub_1D7A9D148();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v33, v23);
    *id v35 = v53;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
}

uint64_t sub_1D78791CC@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return HPKEEncryptedMessageAlgorithm.init(from:)(a1, a2);
}

void sub_1D78791E4(void *a1)
{
}

void HPKEEnvelope.algorithm.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *HPKEEnvelope.algorithm.setter(unsigned char *result)
{
  *uint64_t v1 = *result;
  return result;
}

uint64_t (*HPKEEnvelope.algorithm.modify())()
{
  return nullsub_1;
}

uint64_t HPKEEnvelope.params.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[1];
  unint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  unint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  unint64_t v7 = v1[6];
  uint64_t v8 = v1[7];
  unint64_t v9 = v1[8];
  uint64_t v10 = v1[9];
  unint64_t v11 = v1[10];
  uint64_t v13 = v1[11];
  unint64_t v12 = v1[12];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v10;
  a1[9] = v11;
  a1[10] = v13;
  a1[11] = v12;
  sub_1D7860790(v2, v3);
  sub_1D7860790(v4, v5);
  sub_1D786E9D8(v6, v7);
  sub_1D786E9D8(v8, v9);
  sub_1D786E9D8(v10, v11);
  return sub_1D786E9D8(v13, v12);
}

uint64_t HPKEEnvelope.data.getter()
{
  uint64_t v1 = *(void *)(v0 + 104);
  sub_1D7860790(v1, *(void *)(v0 + 112));
  return v1;
}

uint64_t HPKEEnvelope.data.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1D78607E8(*(void *)(v2 + 104), *(void *)(v2 + 112));
  *(void *)(v2 + 104) = a1;
  *(void *)(v2 + 112) = a2;
  return result;
}

uint64_t (*HPKEEnvelope.data.modify())()
{
  return nullsub_1;
}

uint64_t sub_1D7879378()
{
  unint64_t v0 = sub_1D7A9D058();
  swift_bridgeObjectRelease();
  if (v0 >= 4) {
    return 4;
  }
  else {
    return v0;
  }
}

uint64_t sub_1D78793C8(char a1)
{
  uint64_t result = 0x687469726F676C61;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x736D61726170;
      break;
    case 2:
      uint64_t result = 1635017060;
      break;
    case 3:
      uint64_t result = 0x707972636E656E75;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1D7879460(char a1)
{
  uint64_t result = 0x687469726F676C61;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x736D61726170;
      break;
    case 2:
      uint64_t result = 1635017060;
      break;
    case 3:
      uint64_t result = 0x707972636E656E75;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1D78794F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB1C8];
  return MEMORY[0x1F4185BB0](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_1D787956C(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4183DE0](a1, a2, WitnessTable, v5);
}

uint64_t sub_1D78795D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4183DF0](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_1D7879648(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4183DE8](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_1D78796B8@<X0>(void *a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  return sub_1D787D908(a1, a2, (uint64_t (*)(void, void, void, void, void))sub_1D7879378, a3);
}

uint64_t sub_1D78796D0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1D787D964(a1, (uint64_t (*)(void, void, void, void))sub_1D78793C8, a2);
}

uint64_t sub_1D78796E8()
{
  return sub_1D7879460(*v0);
}

uint64_t sub_1D78796F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, unsigned char *a4@<X8>)
{
  uint64_t result = sub_1D78793C4(a1, a2, a3[2], a3[3], a3[4]);
  *a4 = result;
  return result;
}

uint64_t sub_1D787972C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1D7885B9C();
  *a1 = result;
  return result;
}

uint64_t sub_1D7879760(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t sub_1D78797B4(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

void HPKEEnvelope.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v92 = sub_1D7A9CD48();
  uint64_t v90 = *(void *)(v92 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v92, v4, v5, v6, v7, v8, v9, v10);
  uint64_t v89 = (char *)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11, v13, v14, v15, v16, v17, v18, v19);
  uint64_t v91 = (char *)&v80 - v20;
  uint64_t v88 = sub_1D7A9B5F8();
  uint64_t v85 = *(void *)(v88 - 8);
  MEMORY[0x1F4188790](v88, v21, v22, v23, v24, v25, v26, v27);
  uint64_t v87 = (char *)&v80 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = *(void *)(a2 + 32);
  uint64_t v93 = *(void **)(a2 + 16);
  uint64_t v86 = v29;
  type metadata accessor for HPKEEnvelope.CodingKeys();
  swift_getWitnessTable();
  uint64_t v30 = sub_1D7A9D238();
  uint64_t v31 = *(void *)(v30 - 8);
  MEMORY[0x1F4188790](v30, v32, v33, v34, v35, v36, v37, v38);
  uint64_t v40 = (char *)&v80 - v39;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v41 = v94;
  sub_1D7A9D6E8();
  LOBYTE(v96) = *(unsigned char *)v41;
  LOBYTE(v103[0]) = 0;
  sub_1D78843EC();
  uint64_t v42 = v95;
  sub_1D7A9D228();
  if (v42)
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v40, v30);
    uint64_t v48 = v91;
    unint64_t v104 = v42;
    uint64_t v49 = v42;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF9740);
    uint64_t v50 = v92;
    if (swift_dynamicCast())
    {

      uint64_t v51 = v90;
      __int16 v52 = v89;
      (*(void (**)(char *, char *, uint64_t))(v90 + 32))(v89, v48, v50);
      v103[0] = 0;
      v103[1] = 0xE000000000000000;
      sub_1D7A9CC48();
      swift_bridgeObjectRelease();
      strcpy((char *)v103, "HPKEEnvelope<");
      HIWORD(v103[1]) = -4864;
      unint64_t v102 = v93;
      swift_getMetatypeMetadata();
      sub_1D7A9C038();
      sub_1D7A9C128();
      swift_bridgeObjectRelease();
      sub_1D7A9C128();
      uint64_t v53 = v103[0];
      uint64_t v54 = v103[1];
      __int16 v55 = (void *)swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v51 + 16))(v56, v52, v50);
      strcpy((char *)v103, "t");
      unint64_t v57 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v55, v53, v54, (__int16 *)v103, 0, v57, 0xD000000000000051, 0x80000001D7ABE640, v58, 0x742865646F636E65, 0xEB00000000293A6FLL, 327);
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v51 + 8))(v52, v50);
      id v59 = v104;
    }
    else
    {

      v103[0] = 0;
      v103[1] = 0xE000000000000000;
      sub_1D7A9CC48();
      swift_bridgeObjectRelease();
      strcpy((char *)v103, "HPKEEnvelope<");
      HIWORD(v103[1]) = -4864;
      unint64_t v104 = (char *)v93;
      swift_getMetatypeMetadata();
      sub_1D7A9C038();
      sub_1D7A9C128();
      swift_bridgeObjectRelease();
      sub_1D7A9C128();
      uint64_t v60 = v103[0];
      uint64_t v61 = v103[1];
      LOWORD(v103[0]) = 0;
      long long v62 = v42;
      unint64_t v63 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v42, v60, v61, (__int16 *)v103, 0, v63, 0xD000000000000051, 0x80000001D7ABE640, v64, 0x742865646F636E65, 0xEB00000000293A6FLL, 330);
      swift_willThrow();
      id v59 = v42;
    }
  }
  else
  {
    uint64_t v43 = v88;
    long long v44 = *(_OWORD *)(v41 + 24);
    long long v96 = *(_OWORD *)(v41 + 8);
    long long v97 = v44;
    long long v45 = *(_OWORD *)(v41 + 56);
    long long v98 = *(_OWORD *)(v41 + 40);
    long long v99 = v45;
    long long v46 = *(_OWORD *)(v41 + 88);
    long long v100 = *(_OWORD *)(v41 + 72);
    long long v101 = v46;
    LOBYTE(v103[0]) = 1;
    sub_1D7884494();
    sub_1D7A9D228();
    long long v96 = *(_OWORD *)(v41 + 104);
    LOBYTE(v103[0]) = 2;
    sub_1D7871AD8();
    sub_1D7A9D228();
    uint64_t v47 = v31;
    char v95 = v40;
    if (shouldIncludeUnencryptedData()())
    {
      uint64_t v83 = v30;
      if (qword_1EBDF9DC8 != -1) {
        swift_once();
      }
      uint64_t v65 = v43;
      uint64_t v66 = __swift_project_value_buffer(v43, (uint64_t)qword_1EBDFBE70);
      swift_beginAccess();
      uint64_t v67 = v85;
      long long v68 = v87;
      (*(void (**)(char *, uint64_t, uint64_t))(v85 + 16))(v87, v66, v65);
      id v69 = sub_1D7A9B5D8();
      os_log_type_t v70 = sub_1D7A9C748();
      int v71 = v70;
      uint64_t v84 = v69;
      if (os_log_type_enabled(v69, v70))
      {
        int v82 = v71;
        uint64_t v72 = (uint8_t *)swift_slowAlloc();
        uint64_t v81 = swift_slowAlloc();
        v103[0] = v81;
        uint64_t v80 = v72;
        *(_DWORD *)uint64_t v72 = 136315138;
        unint64_t v104 = (char *)v93;
        swift_getMetatypeMetadata();
        uint64_t v73 = sub_1D7A9C038();
        unint64_t v104 = (char *)sub_1D7923300(v73, v74, v103);
        sub_1D7A9C9E8();
        uint64_t v47 = v31;
        swift_bridgeObjectRelease();
        uint64_t v75 = v84;
        uint64_t v76 = v80;
        _os_log_impl(&dword_1D7853000, v84, (os_log_type_t)v82, "including unencrypted data for HPKEEnvelope<%s>", v80, 0xCu);
        uint64_t v77 = v81;
        swift_arrayDestroy();
        MEMORY[0x1D947D740](v77, -1, -1);
        MEMORY[0x1D947D740](v76, -1, -1);

        (*(void (**)(char *, uint64_t))(v67 + 8))(v87, v88);
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v67 + 8))(v68, v88);
      }
      uint64_t v78 = v83;
      LOBYTE(v103[0]) = 3;
      uint64_t v79 = v95;
      sub_1D7A9D1C8();
      (*(void (**)(char *, uint64_t))(v47 + 8))(v79, v78);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v31 + 8))(v95, v30);
    }
  }
}

Swift::Bool __swiftcall shouldIncludeUnencryptedData()()
{
  uint64_t v0 = sub_1D7A9B5F8();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0, v2, v3, v4, v5, v6, v7, v8);
  uint64_t v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = objc_msgSend(self, sel_standardUserDefaults);
  if (qword_1EBDF9690 != -1) {
    swift_once();
  }
  if (byte_1EBDFBE68 == 1)
  {
    uint64_t v12 = sub_1D7A9BF98();
    unsigned int v13 = objc_msgSend(v11, sel_BOOLForKey_, v12);

    id v11 = (id)v12;
  }
  else
  {
    unsigned int v13 = 0;
  }

  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v14 = __swift_project_value_buffer(v0, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v10, v14, v0);
  uint64_t v15 = sub_1D7A9B5D8();
  os_log_type_t v16 = sub_1D7A9C748();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 67240192;
    v19[1] = v13;
    sub_1D7A9C9E8();
    _os_log_impl(&dword_1D7853000, v15, v16, "shouldIncludeUnencryptedData: %{BOOL,public}d", v17, 8u);
    MEMORY[0x1D947D740](v17, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v10, v0);
  return v13;
}

uint64_t HPKEEnvelope.init(from:)@<X0>(void *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v96 = a3;
  uint64_t v105 = sub_1D7A9CCF8();
  uint64_t v102 = *(void *)(v105 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v105, v5, v6, v7, v8, v9, v10, v11);
  long long v101 = (char *)&v95 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12, v14, v15, v16, v17, v18, v19, v20);
  unint64_t v104 = (char *)&v95 - v21;
  uint64_t v22 = sub_1D7A9C9A8();
  uint64_t v110 = *(void *)(v22 - 8);
  uint64_t v111 = v22;
  MEMORY[0x1F4188790](v22, v23, v24, v25, v26, v27, v28, v29);
  long long v99 = (char *)&v95 - v30;
  type metadata accessor for HPKEEnvelope.CodingKeys();
  swift_getWitnessTable();
  uint64_t v100 = sub_1D7A9D168();
  uint64_t v98 = *(void *)(v100 - 8);
  MEMORY[0x1F4188790](v100, v31, v32, v33, v34, v35, v36, v37);
  uint64_t v39 = (char *)&v95 - v38;
  uint64_t v40 = type metadata accessor for HPKEEnvelope();
  uint64_t v97 = *(void *)(v40 - 8);
  uint64_t v48 = MEMORY[0x1F4188790](v40, v41, v42, v43, v44, v45, v46, v47);
  uint64_t v50 = (char *)&v95 - v49;
  *uint64_t v50 = 0;
  uint64_t v51 = *(int *)(v48 + 52);
  uint64_t v112 = v50;
  __int16 v52 = &v50[v51];
  uint64_t v53 = *(void (**)(void))(*(void *)(a2 - 8) + 56);
  unint64_t v108 = v52;
  uint64_t v106 = (void *)a2;
  v53();
  uint64_t v54 = a1[3];
  unint64_t v109 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v54);
  uint64_t v103 = v39;
  __int16 v55 = v107;
  sub_1D7A9D6A8();
  if (v55)
  {
    int v60 = 0;
    LODWORD(v107) = 0;
    uint64_t v62 = v105;
    uint64_t v61 = v106;
    unint64_t v63 = v104;
    id v115 = v55;
    id v64 = v55;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF9740);
    if (swift_dynamicCast())
    {

      uint64_t v65 = v102;
      uint64_t v66 = *(void (**)(char *, char *, uint64_t))(v102 + 32);
      LODWORD(v106) = 0;
      uint64_t v67 = v101;
      v66(v101, v63, v62);
      *(void *)&v113[0] = 0;
      *((void *)&v113[0] + 1) = 0xE000000000000000;
      sub_1D7A9CC48();
      swift_bridgeObjectRelease();
      strcpy((char *)v113, "HPKEEnvelope<");
      HIWORD(v113[0]) = -4864;
      uint64_t v114 = v61;
      swift_getMetatypeMetadata();
      sub_1D7A9C038();
      sub_1D7A9C128();
      swift_bridgeObjectRelease();
      sub_1D7A9C128();
      long long v68 = v113[0];
      id v69 = (void *)swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v65 + 16))(v70, v67, v62);
      LOWORD(v113[0]) = 115;
      unint64_t v71 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v69, v68, *((uint64_t *)&v68 + 1), (__int16 *)v113, 0, v71, 0xD000000000000051, 0x80000001D7ABE640, v72, 0x6F72662874696E69, 0xEB00000000293A6DLL, 343);
      swift_willThrow();
      uint64_t v73 = v67;
      int v60 = (int)v106;
      (*(void (**)(char *, uint64_t))(v65 + 8))(v73, v62);
      id v74 = v115;
    }
    else
    {

      *(void *)&v113[0] = 0;
      *((void *)&v113[0] + 1) = 0xE000000000000000;
      sub_1D7A9CC48();
      swift_bridgeObjectRelease();
      strcpy((char *)v113, "HPKEEnvelope<");
      HIWORD(v113[0]) = -4864;
      id v115 = v61;
      swift_getMetatypeMetadata();
      sub_1D7A9C038();
      sub_1D7A9C128();
      swift_bridgeObjectRelease();
      sub_1D7A9C128();
      long long v75 = v113[0];
      LOWORD(v113[0]) = 0;
      id v76 = v55;
      unint64_t v77 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v55, v75, *((uint64_t *)&v75 + 1), (__int16 *)v113, 0, v77, 0xD000000000000051, 0x80000001D7ABE640, v78, 0x6F72662874696E69, 0xEB00000000293A6DLL, 346);
      swift_willThrow();
      id v74 = v55;
    }

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v109);
    if (v60)
    {
      uint64_t v79 = *((void *)v112 + 1);
      unint64_t v80 = *((void *)v112 + 2);
      uint64_t v81 = *((void *)v112 + 3);
      unint64_t v82 = *((void *)v112 + 4);
      uint64_t v83 = *((void *)v112 + 5);
      unint64_t v84 = *((void *)v112 + 6);
      uint64_t v85 = *((void *)v112 + 7);
      unint64_t v86 = *((void *)v112 + 8);
      uint64_t v88 = *((void *)v112 + 9);
      unint64_t v87 = *((void *)v112 + 10);
      unint64_t v89 = *((void *)v112 + 12);
      unint64_t v109 = (void *)*((void *)v112 + 11);
      uint64_t v106 = (void *)v89;
      sub_1D78607E8(v79, v80);
      sub_1D78607E8(v81, v82);
      sub_1D7871BDC(v83, v84);
      sub_1D7871BDC(v85, v86);
      sub_1D7871BDC(v88, v87);
      sub_1D7871BDC((uint64_t)v109, (unint64_t)v106);
    }
    if (v107) {
      sub_1D78607E8(*((void *)v112 + 13), *((void *)v112 + 14));
    }
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v110 + 8))(v108, v111);
  }
  else
  {
    uint64_t v56 = v97;
    uint64_t v107 = (void *)v40;
    uint64_t v57 = v98;
    uint64_t v58 = v99;
    LOBYTE(v115) = 0;
    sub_1D7885274();
    sub_1D7A9D0E8();
    id v59 = v112;
    *uint64_t v112 = v113[0] & 1;
    LOBYTE(v115) = 1;
    sub_1D78845B4();
    sub_1D7A9D148();
    long long v90 = v113[1];
    *(_OWORD *)(v59 + 8) = v113[0];
    *(_OWORD *)(v59 + 24) = v90;
    long long v91 = v113[3];
    *(_OWORD *)(v59 + 40) = v113[2];
    *(_OWORD *)(v59 + 56) = v91;
    long long v92 = v113[5];
    *(_OWORD *)(v59 + 72) = v113[4];
    *(_OWORD *)(v59 + 88) = v92;
    LOBYTE(v115) = 2;
    sub_1D786073C();
    sub_1D7A9D148();
    *(_OWORD *)(v59 + 104) = v113[0];
    LOBYTE(v113[0]) = 3;
    sub_1D7A9D0E8();
    (*(void (**)(char *, uint64_t))(v57 + 8))(v103, v100);
    (*(void (**)(unsigned char *, char *, uint64_t))(v110 + 40))(v108, v58, v111);
    uint64_t v93 = v107;
    (*(void (**)(uint64_t, unsigned char *, void *))(v56 + 16))(v96, v59, v107);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v109);
    return (*(uint64_t (**)(unsigned char *, void *))(v56 + 8))(v59, v93);
  }
}

uint64_t sub_1D787ADCC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return HPKEEnvelope.init(from:)(a1, *(void *)(a2 + 16), a3);
}

void sub_1D787ADF0(void *a1, uint64_t a2)
{
}

void HPKEShallowEnvelope.algorithm.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t HPKEShallowEnvelope.params.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[1];
  unint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  unint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  unint64_t v7 = v1[6];
  uint64_t v8 = v1[7];
  unint64_t v9 = v1[8];
  uint64_t v10 = v1[9];
  unint64_t v11 = v1[10];
  uint64_t v13 = v1[11];
  unint64_t v12 = v1[12];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v10;
  a1[9] = v11;
  a1[10] = v13;
  a1[11] = v12;
  sub_1D7860790(v2, v3);
  sub_1D7860790(v4, v5);
  sub_1D786E9D8(v6, v7);
  sub_1D786E9D8(v8, v9);
  sub_1D786E9D8(v10, v11);
  return sub_1D786E9D8(v13, v12);
}

uint64_t HPKEShallowEnvelope.data.getter()
{
  uint64_t v1 = *(void *)(v0 + 104);
  sub_1D7860790(v1, *(void *)(v0 + 112));
  return v1;
}

uint64_t sub_1D787AF08()
{
  uint64_t v1 = 0x736D61726170;
  if (*v0 != 1) {
    uint64_t v1 = 1635017060;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x687469726F676C61;
  }
}

uint64_t sub_1D787AF5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1D7885BA4(a1, a2);
  *a3 = result;
  return result;
}

void sub_1D787AF84(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1D787AF90(uint64_t a1)
{
  unint64_t v2 = sub_1D78852E0();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1D787AFCC(uint64_t a1)
{
  unint64_t v2 = sub_1D78852E0();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t HPKEShallowEnvelope.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA842680);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6, v7, v8, v9, v10, v11, v12);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v15 = *v1;
  uint64_t v16 = *((void *)v1 + 1);
  uint64_t v36 = *((void *)v1 + 2);
  uint64_t v37 = v16;
  uint64_t v17 = *((void *)v1 + 3);
  uint64_t v34 = *((void *)v1 + 4);
  uint64_t v35 = v17;
  uint64_t v18 = *((void *)v1 + 5);
  uint64_t v32 = *((void *)v1 + 6);
  uint64_t v33 = v18;
  uint64_t v19 = *((void *)v1 + 7);
  uint64_t v30 = *((void *)v1 + 8);
  uint64_t v31 = v19;
  uint64_t v29 = *((void *)v1 + 9);
  uint64_t v28 = *((void *)v1 + 10);
  uint64_t v27 = *((void *)v1 + 11);
  uint64_t v26 = *((void *)v1 + 12);
  uint64_t v25 = *((void *)v1 + 13);
  uint64_t v24 = *((void *)v1 + 14);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D78852E0();
  sub_1D7A9D6E8();
  LOBYTE(v38) = v15;
  char v50 = 0;
  sub_1D78843EC();
  sub_1D7A9D228();
  if (!v2)
  {
    uint64_t v20 = v24;
    uint64_t v21 = v25;
    uint64_t v38 = v37;
    uint64_t v39 = v36;
    uint64_t v40 = v35;
    uint64_t v41 = v34;
    uint64_t v42 = v33;
    uint64_t v43 = v32;
    uint64_t v44 = v31;
    uint64_t v45 = v30;
    uint64_t v46 = v29;
    uint64_t v47 = v28;
    uint64_t v48 = v27;
    uint64_t v49 = v26;
    char v50 = 1;
    sub_1D7884494();
    sub_1D7A9D228();
    uint64_t v38 = v21;
    uint64_t v39 = v20;
    char v50 = 2;
    sub_1D7871AD8();
    sub_1D7A9D228();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v14, v4);
}

uint64_t HPKEShallowEnvelope.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA842690);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7, v8, v9, v10, v11, v12, v13);
  char v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D78852E0();
  sub_1D7A9D6A8();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v69 = 0;
  sub_1D7885274();
  sub_1D7A9D148();
  int v16 = v56;
  char v69 = 1;
  sub_1D78845B4();
  sub_1D7A9D148();
  int v68 = v16;
  uint64_t v17 = v58;
  unint64_t v18 = v59;
  unint64_t v19 = v61;
  uint64_t v50 = v60;
  uint64_t v51 = v62;
  unint64_t v47 = v63;
  uint64_t v48 = v64;
  unint64_t v55 = v65;
  uint64_t v52 = v66;
  uint64_t v53 = v56;
  unint64_t v49 = v67;
  char v69 = 2;
  unint64_t v46 = v57;
  sub_1D7860790(v56, v57);
  uint64_t v54 = v17;
  uint64_t v20 = v17;
  unint64_t v21 = v18;
  sub_1D7860790(v20, v18);
  unint64_t v22 = v19;
  sub_1D786E9D8(v50, v19);
  sub_1D786E9D8(v51, v47);
  sub_1D786E9D8(v48, v55);
  sub_1D786E9D8(v52, v49);
  sub_1D786073C();
  sub_1D7A9D148();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v5);
  unint64_t v45 = v21;
  uint64_t v23 = v56;
  unint64_t v24 = v57;
  unint64_t v43 = v57;
  unint64_t v25 = v46;
  sub_1D7860790(v53, v46);
  sub_1D7860790(v54, v21);
  unint64_t v26 = v22;
  unint64_t v42 = v22;
  sub_1D786E9D8(v50, v22);
  unint64_t v27 = v47;
  sub_1D786E9D8(v51, v47);
  sub_1D786E9D8(v48, v55);
  sub_1D786E9D8(v52, v49);
  uint64_t v44 = v23;
  sub_1D7860790(v23, v24);
  sub_1D78607E8(v53, v25);
  sub_1D78607E8(v54, v21);
  uint64_t v28 = v50;
  sub_1D7871BDC(v50, v26);
  uint64_t v29 = v51;
  sub_1D7871BDC(v51, v27);
  uint64_t v30 = v48;
  unint64_t v31 = v55;
  sub_1D7871BDC(v48, v55);
  uint64_t v32 = v52;
  unint64_t v33 = v49;
  sub_1D7871BDC(v52, v49);
  *(unsigned char *)a2 = v68;
  unint64_t v34 = v46;
  *(void *)(a2 + 8) = v53;
  *(void *)(a2 + 16) = v34;
  unint64_t v35 = v45;
  *(void *)(a2 + 24) = v54;
  *(void *)(a2 + 32) = v35;
  *(void *)(a2 + 40) = v28;
  unint64_t v36 = v42;
  *(void *)(a2 + 48) = v42;
  *(void *)(a2 + 56) = v29;
  unint64_t v37 = v47;
  *(void *)(a2 + 64) = v47;
  *(void *)(a2 + 72) = v30;
  *(void *)(a2 + 80) = v31;
  *(void *)(a2 + 88) = v32;
  uint64_t v38 = v44;
  *(void *)(a2 + 96) = v33;
  *(void *)(a2 + 104) = v38;
  unint64_t v39 = v43;
  *(void *)(a2 + 112) = v43;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  sub_1D78607E8(v53, v46);
  sub_1D78607E8(v54, v45);
  sub_1D7871BDC(v50, v36);
  sub_1D7871BDC(v51, v37);
  sub_1D7871BDC(v30, v31);
  sub_1D7871BDC(v52, v33);
  return sub_1D78607E8(v44, v39);
}

uint64_t sub_1D787B7A8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return HPKEShallowEnvelope.init(from:)(a1, a2);
}

uint64_t sub_1D787B7C0(void *a1)
{
  return HPKEShallowEnvelope.encode(to:)(a1);
}

void HPKEEnvelopeEncryptedMessagePKRHash.algorithm.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

void *HPKEEnvelopeEncryptedMessagePKRHash.keys.getter@<X0>(uint64_t a1@<X8>)
{
  sub_1D7871D78(v1 + 8, (uint64_t)v4, &qword_1EA842610);
  sub_1D7871D78((uint64_t)v4, a1, &qword_1EA842610);
  return sub_1D78850B4(v4, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1D7885118);
}

void HPKEEnvelopeEncryptedMessagePKRHash.params.getter(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[17];
  unint64_t v3 = v1[18];
  uint64_t v4 = v1[19];
  uint64_t v5 = v1[20];
  uint64_t v6 = v1[21];
  uint64_t v7 = v1[22];
  uint64_t v8 = v1[23];
  uint64_t v9 = v1[24];
  uint64_t v10 = v1[25];
  uint64_t v11 = v1[26];
  uint64_t v12 = v1[27];
  uint64_t v13 = v1[28];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v10;
  a1[9] = v11;
  a1[10] = v12;
  a1[11] = v13;
  sub_1D7884608(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, (void (*)(void))sub_1D7860790, (void (*)(uint64_t, uint64_t))sub_1D786E9D8);
}

uint64_t HPKEEnvelopeEncryptedMessagePKRHash.pkRHash.getter()
{
  char v1 = *v0;
  sub_1D7871D78((uint64_t)(v0 + 8), (uint64_t)v6, &qword_1EA842610);
  if (v1)
  {
    sub_1D7871D78((uint64_t)v6, (uint64_t)v5, &qword_1EA842610);
    if (sub_1D7885334((uint64_t)v5) != 1)
    {
      uint64_t v2 = v5[3];
      unint64_t v3 = v5[4];
LABEL_7:
      sub_1D7860790(v2, v3);
      return v2;
    }
  }
  else if (*((void *)v0 + 18) >> 60 != 15)
  {
    uint64_t v2 = *((void *)v0 + 19);
    unint64_t v3 = *((void *)v0 + 20);
    goto LABEL_7;
  }
  return 0;
}

uint64_t sub_1D787B978()
{
  uint64_t v1 = 1937335659;
  if (*v0 != 1) {
    uint64_t v1 = 0x736D61726170;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x687469726F676C61;
  }
}

uint64_t sub_1D787B9CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1D7885CF0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D787B9F4(uint64_t a1)
{
  unint64_t v2 = sub_1D7885358();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1D787BA30(uint64_t a1)
{
  unint64_t v2 = sub_1D7885358();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t HPKEEnvelopeEncryptedMessagePKRHash.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA842698);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7, v8, v9, v10, v11, v12, v13);
  char v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = a1[3];
  int v68 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v16);
  sub_1D7885358();
  sub_1D7A9D6A8();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v68);
  }
  uint64_t v38 = a2;
  LOBYTE(v39[0]) = 0;
  sub_1D7885274();
  sub_1D7A9D148();
  char v17 = v47[0];
  LOBYTE(v60[0]) = v47[0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA842648);
  char v58 = 1;
  sub_1D7871DDC(&qword_1EA842658, &qword_1EA842648);
  sub_1D7A9D0E8();
  sub_1D7871D78((uint64_t)&v59, (uint64_t)v57, &qword_1EA842610);
  sub_1D7871D78((uint64_t)v57, (uint64_t)v60 + 8, &qword_1EA842610);
  char v49 = 2;
  sub_1D78850B4(v57, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1D7885118);
  sub_1D78845B4();
  sub_1D7A9D0E8();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v5);
  uint64_t v18 = v50;
  long long v19 = v51;
  long long v20 = v52;
  uint64_t v36 = *((void *)&v53 + 1);
  uint64_t v37 = v53;
  uint64_t v34 = *((void *)&v54 + 1);
  uint64_t v35 = v54;
  uint64_t v33 = v55;
  uint64_t v21 = v56;
  *((void *)&v61 + 1) = v50;
  long long v62 = v51;
  long long v63 = v52;
  long long v64 = v53;
  long long v65 = v54;
  long long v66 = v55;
  LOBYTE(v39[0]) = v17;
  uint64_t v22 = *((void *)&v55 + 1);
  uint64_t v67 = v56;
  sub_1D7871D78((uint64_t)v57, (uint64_t)v39 + 8, &qword_1EA842610);
  *((void *)&v40 + 1) = v18;
  long long v41 = v19;
  long long v42 = v20;
  *(void *)&long long v43 = v37;
  *((void *)&v43 + 1) = v36;
  *(void *)&long long v44 = v35;
  *((void *)&v44 + 1) = v34;
  *(void *)&long long v45 = v33;
  *((void *)&v45 + 1) = v22;
  uint64_t v46 = v21;
  sub_1D78853AC((uint64_t)v39, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1D7885118, (void (*)(void))sub_1D7860790, (void (*)(uint64_t, uint64_t))sub_1D786E9D8);
  sub_1D78850B4(v57, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1D7884F94);
  long long v23 = v45;
  uint64_t v24 = v38;
  *(_OWORD *)(v38 + 192) = v44;
  *(_OWORD *)(v24 + 208) = v23;
  *(void *)(v24 + 224) = v46;
  long long v25 = v41;
  *(_OWORD *)(v24 + 128) = v40;
  *(_OWORD *)(v24 + 144) = v25;
  long long v26 = v43;
  *(_OWORD *)(v24 + 160) = v42;
  *(_OWORD *)(v24 + 176) = v26;
  long long v27 = v39[5];
  *(_OWORD *)(v24 + 64) = v39[4];
  *(_OWORD *)(v24 + 80) = v27;
  long long v28 = v39[7];
  *(_OWORD *)(v24 + 96) = v39[6];
  *(_OWORD *)(v24 + 112) = v28;
  long long v29 = v39[1];
  *(_OWORD *)uint64_t v24 = v39[0];
  *(_OWORD *)(v24 + 16) = v29;
  long long v30 = v39[3];
  *(_OWORD *)(v24 + 32) = v39[2];
  *(_OWORD *)(v24 + 48) = v30;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v68);
  v47[12] = v65;
  v47[13] = v66;
  uint64_t v48 = v67;
  v47[8] = v61;
  v47[9] = v62;
  v47[10] = v63;
  v47[11] = v64;
  v47[4] = v60[4];
  v47[5] = v60[5];
  v47[6] = v60[6];
  v47[7] = v60[7];
  v47[0] = v60[0];
  v47[1] = v60[1];
  v47[2] = v60[2];
  v47[3] = v60[3];
  return sub_1D78853AC((uint64_t)v47, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1D7884F94, (void (*)(void))sub_1D78607E8, (void (*)(uint64_t, uint64_t))sub_1D7871BDC);
}

uint64_t sub_1D787BFC8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return HPKEEnvelopeEncryptedMessagePKRHash.init(from:)(a1, a2);
}

uint64_t HPKEParams.pkEm.getter()
{
  uint64_t v1 = *(void *)v0;
  sub_1D7860790(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t HPKEParams.pkRHash.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_1D7860790(v1, *(void *)(v0 + 24));
  return v1;
}

uint64_t HPKEParams.pkISm.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  sub_1D786E9D8(v1, *(void *)(v0 + 40));
  return v1;
}

uint64_t HPKEParams.pkISHash.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  sub_1D786E9D8(v1, *(void *)(v0 + 56));
  return v1;
}

uint64_t HPKEParams.pkSm.getter()
{
  uint64_t v1 = *(void *)(v0 + 64);
  sub_1D786E9D8(v1, *(void *)(v0 + 72));
  return v1;
}

uint64_t HPKEParams.infoHash.getter()
{
  uint64_t v1 = *(void *)(v0 + 80);
  sub_1D786E9D8(v1, *(void *)(v0 + 88));
  return v1;
}

__n128 HPKEParams.init(mode:pkEm:pkRHash:pkISm:pkISHash:pkSm:infoHash:)@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, long long a9, __n128 a10, uint64_t a11)
{
  __n128 result = a10;
  *(void *)a8 = a1;
  *(void *)(a8 + 8) = a2;
  *(void *)(a8 + 16) = a3;
  *(void *)(a8 + 24) = a4;
  *(void *)(a8 + 32) = a5;
  *(void *)(a8 + 40) = a6;
  *(void *)(a8 + 48) = a7;
  *(_OWORD *)(a8 + 56) = a9;
  *(__n128 *)(a8 + 72) = a10;
  *(void *)(a8 + 88) = a11;
  return result;
}

uint64_t HPKEParams.description.getter()
{
  unint64_t v1 = v0[5];
  unint64_t v2 = v0[7];
  unint64_t v3 = v0[9];
  unint64_t v4 = v0[11];
  sub_1D7A9CC48();
  sub_1D7A9C128();
  sub_1D7A9CE78();
  sub_1D7A9C128();
  sub_1D7A9B008();
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  sub_1D7A9B008();
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  if (v1 >> 60 != 15) {
    sub_1D7A9B008();
  }
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  if (v2 >> 60 != 15) {
    sub_1D7A9B008();
  }
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  if (v3 >> 60 != 15) {
    sub_1D7A9B008();
  }
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  if (v4 >> 60 != 15) {
    sub_1D7A9B008();
  }
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1D787C434()
{
  uint64_t result = 1701080941;
  switch(*v0)
  {
    case 1:
      uint64_t result = 1833266032;
      break;
    case 2:
      uint64_t result = 0x68736148526B70;
      break;
    case 3:
      uint64_t result = 0x6D53496B70;
      break;
    case 4:
      uint64_t result = 0x6873614853496B70;
      break;
    case 5:
      uint64_t result = 1834183536;
      break;
    case 6:
      uint64_t result = 0x687361486F666E69;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1D787C4F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1D7885E3C(a1, a2);
  *a3 = result;
  return result;
}

void sub_1D787C520(unsigned char *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_1D787C52C(uint64_t a1)
{
  unint64_t v2 = sub_1D7885498();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1D787C568(uint64_t a1)
{
  unint64_t v2 = sub_1D7885498();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t HPKEParams.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8426A8);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6, v7, v8, v9, v10, v11, v12);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *v1;
  uint64_t v36 = v1[1];
  uint64_t v37 = v15;
  uint64_t v16 = v1[2];
  uint64_t v34 = v1[3];
  uint64_t v35 = v16;
  uint64_t v17 = v1[5];
  uint64_t v31 = v1[4];
  uint64_t v32 = v17;
  uint64_t v18 = v1[7];
  uint64_t v29 = v1[6];
  uint64_t v30 = v18;
  uint64_t v19 = v1[9];
  uint64_t v27 = v1[8];
  uint64_t v28 = v19;
  uint64_t v20 = v1[11];
  uint64_t v33 = v1[10];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D7885498();
  uint64_t v21 = v4;
  sub_1D7A9D6E8();
  LOBYTE(v38) = 0;
  sub_1D78854EC();
  sub_1D7A9D228();
  if (!v2)
  {
    uint64_t v22 = v34;
    uint64_t v23 = v35;
    uint64_t v26 = v20;
    uint64_t v24 = v33;
    uint64_t v38 = v37;
    uint64_t v39 = v36;
    char v40 = 1;
    sub_1D7871AD8();
    sub_1D7A9D228();
    uint64_t v38 = v23;
    uint64_t v39 = v22;
    char v40 = 2;
    sub_1D7A9D228();
    uint64_t v38 = v31;
    uint64_t v39 = v32;
    char v40 = 3;
    sub_1D7A9D1C8();
    uint64_t v38 = v29;
    uint64_t v39 = v30;
    char v40 = 4;
    sub_1D7A9D1C8();
    uint64_t v38 = v27;
    uint64_t v39 = v28;
    char v40 = 5;
    sub_1D7A9D1C8();
    uint64_t v38 = v24;
    uint64_t v39 = v26;
    char v40 = 6;
    sub_1D7A9D1C8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v14, v21);
}

uint64_t HPKEParams.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8426C0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7, v8, v9, v10, v11, v12, v13);
  uint64_t v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D7885498();
  sub_1D7A9D6A8();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  LOBYTE(v50) = 0;
  sub_1D7885540();
  sub_1D7A9D148();
  char v52 = 1;
  sub_1D786073C();
  sub_1D7A9D148();
  uint64_t v17 = v50;
  char v52 = 2;
  unint64_t v46 = v51;
  sub_1D7860790(v50, v51);
  sub_1D7A9D148();
  uint64_t v45 = v17;
  uint64_t v18 = v50;
  char v52 = 3;
  unint64_t v49 = v51;
  sub_1D7860790(v50, v51);
  sub_1D7A9D0E8();
  uint64_t v48 = v18;
  uint64_t v19 = v50;
  char v52 = 4;
  unint64_t v44 = v51;
  sub_1D786E9D8(v50, v51);
  sub_1D7A9D0E8();
  uint64_t v47 = v19;
  unint64_t v20 = v44;
  char v52 = 5;
  unint64_t v42 = v51;
  uint64_t v43 = v50;
  sub_1D786E9D8(v50, v51);
  sub_1D7A9D0E8();
  char v52 = 6;
  unint64_t v40 = v51;
  uint64_t v41 = v50;
  sub_1D786E9D8(v50, v51);
  sub_1D7A9D0E8();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v5);
  uint64_t v21 = v50;
  unint64_t v22 = v51;
  unint64_t v38 = v51;
  sub_1D7860790(v45, v46);
  sub_1D7860790(v48, v49);
  unint64_t v23 = v20;
  sub_1D786E9D8(v47, v20);
  unint64_t v24 = v42;
  sub_1D786E9D8(v43, v42);
  unint64_t v26 = v40;
  uint64_t v25 = v41;
  sub_1D786E9D8(v41, v40);
  uint64_t v39 = v21;
  sub_1D786E9D8(v21, v22);
  sub_1D7871BDC(v25, v26);
  uint64_t v27 = v43;
  sub_1D7871BDC(v43, v24);
  uint64_t v28 = v47;
  sub_1D7871BDC(v47, v23);
  uint64_t v29 = v48;
  unint64_t v30 = v49;
  sub_1D78607E8(v48, v49);
  uint64_t v32 = v45;
  unint64_t v31 = v46;
  sub_1D78607E8(v45, v46);
  *a2 = v32;
  a2[1] = v31;
  a2[2] = v29;
  a2[3] = v30;
  unint64_t v33 = v44;
  a2[4] = v28;
  a2[5] = v33;
  unint64_t v34 = v42;
  a2[6] = v27;
  a2[7] = v34;
  unint64_t v36 = v40;
  uint64_t v35 = v41;
  a2[8] = v41;
  a2[9] = v36;
  unint64_t v37 = v38;
  a2[10] = v39;
  a2[11] = v37;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  sub_1D78607E8(v32, v46);
  sub_1D78607E8(v48, v49);
  sub_1D7871BDC(v47, v33);
  sub_1D7871BDC(v43, v34);
  sub_1D7871BDC(v35, v36);
  return sub_1D7871BDC(v39, v37);
}

uint64_t sub_1D787CEF8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return HPKEParams.init(from:)(a1, a2);
}

uint64_t sub_1D787CF10(void *a1)
{
  return HPKEParams.encode(to:)(a1);
}

uint64_t HPKEKEMMode.init(rawValue:)@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = result != 0;
  return result;
}

uint64_t HPKEKEMMode.rawValue.getter()
{
  return 0;
}

uint64_t sub_1D787CF44()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D787CF88()
{
  return sub_1D7A9D5E8();
}

uint64_t sub_1D787CFB0()
{
  return sub_1D7A9D628();
}

void *sub_1D787CFF0@<X0>(void *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result != 0;
  return result;
}

void sub_1D787D004(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1D787D00C()
{
  return sub_1D7A9C2C8();
}

uint64_t sub_1D787D06C()
{
  return sub_1D7A9C268();
}

uint64_t AEADKey.secretKey.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AEADKey.nonce.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

CoreIDVShared::AEADKey __swiftcall AEADKey.init(secretKey:nonce:)(Swift::String secretKey, Swift::String nonce)
{
  *uint64_t v2 = secretKey;
  v2[1] = nonce;
  result.nonce = nonce;
  result.secretKey = secretKey;
  return result;
}

uint64_t sub_1D787D128()
{
  if (*v0) {
    return 0x65636E6F6ELL;
  }
  else {
    return 0x654B746572636573;
  }
}

uint64_t sub_1D787D164@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1D78860E8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D787D18C(uint64_t a1)
{
  unint64_t v2 = sub_1D7885594();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1D787D1C8(uint64_t a1)
{
  unint64_t v2 = sub_1D7885594();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t AEADKey.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8426D0);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v5, v6, v7, v8, v9, v10, v11);
  uint64_t v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v1 + 16);
  v17[1] = *(void *)(v1 + 24);
  v17[2] = v14;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D7885594();
  sub_1D7A9D6E8();
  char v19 = 0;
  uint64_t v15 = v17[3];
  sub_1D7A9D1D8();
  if (!v15)
  {
    char v18 = 1;
    sub_1D7A9D1D8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v13, v3);
}

uint64_t AEADKey.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8426E0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7, v8, v9, v10, v11, v12, v13);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D7885594();
  sub_1D7A9D6A8();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v27 = 0;
  uint64_t v16 = sub_1D7A9D0F8();
  uint64_t v18 = v17;
  char v26 = 1;
  swift_bridgeObjectRetain();
  uint64_t v19 = sub_1D7A9D0F8();
  uint64_t v21 = v20;
  unint64_t v22 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v25 = v19;
  v22(v15, v5);
  *a2 = v16;
  a2[1] = v18;
  a2[2] = v25;
  a2[3] = v21;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D787D580@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return AEADKey.init(from:)(a1, a2);
}

uint64_t sub_1D787D598(void *a1)
{
  return AEADKey.encode(to:)(a1);
}

uint64_t SealedMessage.keyID.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SealedMessage.data.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_1D7860790(v1, *(void *)(v0 + 24));
  return v1;
}

uint64_t SealedMessage.unencryptedData.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 48);
  uint64_t v5 = sub_1D7A9C9A8();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t sub_1D787D688()
{
  unint64_t v0 = sub_1D7A9D058();
  swift_bridgeObjectRelease();
  if (v0 >= 3) {
    return 3;
  }
  else {
    return v0;
  }
}

uint64_t sub_1D787D6D8(char a1)
{
  if (!a1) {
    return 0x644979656BLL;
  }
  if (a1 == 1) {
    return 1635017060;
  }
  return 0x707972636E656E75;
}

uint64_t sub_1D787D730(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB1C8];
  return MEMORY[0x1F4185BB0](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_1D787D7A4(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4183DE0](a1, a2, WitnessTable, v5);
}

uint64_t sub_1D787D810(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4183DF0](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_1D787D880(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4183DE8](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_1D787D8F0@<X0>(void *a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  return sub_1D787D908(a1, a2, (uint64_t (*)(void, void, void, void, void))sub_1D787D688, a3);
}

uint64_t sub_1D787D908@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t (*a3)(void, void, void, void, void)@<X3>, unsigned char *a4@<X8>)
{
  uint64_t result = a3(*a1, a1[1], a2[2], a2[3], a2[4]);
  *a4 = result;
  return result;
}

uint64_t sub_1D787D94C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1D787D964(a1, (uint64_t (*)(void, void, void, void))sub_1D787D6D8, a2);
}

uint64_t sub_1D787D964@<X0>(void *a1@<X0>, uint64_t (*a2)(void, void, void, void)@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result = a2(*v3, a1[2], a1[3], a1[4]);
  *a3 = result;
  a3[1] = v6;
  return result;
}

uint64_t sub_1D787D9A0()
{
  return sub_1D787D6D8(*v0);
}

uint64_t sub_1D787D9B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, unsigned char *a4@<X8>)
{
  uint64_t result = sub_1D787D6D4(a1, a2, a3[2], a3[3], a3[4]);
  *a4 = result;
  return result;
}

uint64_t sub_1D787D9E4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1D78861E0();
  *a1 = result;
  return result;
}

uint64_t sub_1D787DA18(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t sub_1D787DA6C(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t SealedMessage.init(keyID:data:unencryptedData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  *a6 = a1;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  uint64_t v7 = (char *)a6 + *(int *)(type metadata accessor for SealedMessage() + 48);
  uint64_t v8 = sub_1D7A9C9A8();
  uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32);
  return v9(v7, a5, v8);
}

void SealedMessage.encode(to:)(void *a1, void *a2)
{
  uint64_t v4 = sub_1D7A9CD48();
  uint64_t v94 = *(void *)(v4 - 8);
  uint64_t v95 = v4;
  uint64_t v12 = MEMORY[0x1F4188790](v4, v5, v6, v7, v8, v9, v10, v11);
  uint64_t v93 = (char *)v83 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12, v14, v15, v16, v17, v18, v19, v20);
  uint64_t v96 = (char *)v83 - v21;
  uint64_t v22 = sub_1D7A9B5F8();
  uint64_t v91 = *(void *)(v22 - 8);
  uint64_t v92 = v22;
  MEMORY[0x1F4188790](v22, v23, v24, v25, v26, v27, v28, v29);
  uint64_t v31 = a2[4];
  uint64_t v97 = (void *)a2[2];
  uint64_t v89 = v31;
  long long v90 = (char *)v83 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SealedMessage.CodingKeys();
  swift_getWitnessTable();
  uint64_t v32 = sub_1D7A9D238();
  uint64_t v33 = *(void *)(v32 - 8);
  MEMORY[0x1F4188790](v32, v34, v35, v36, v37, v38, v39, v40);
  unint64_t v42 = (char *)v83 - v41;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v43 = v98;
  sub_1D7A9D6E8();
  LOBYTE(v100) = 0;
  unint64_t v44 = v99;
  sub_1D7A9D1D8();
  if (v44)
  {
    (*(void (**)(char *, uint64_t))(v33 + 8))(v42, v32);
    unint64_t v49 = v96;
    id v104 = v44;
    id v50 = v44;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF9740);
    uint64_t v51 = v95;
    if (swift_dynamicCast())
    {

      char v52 = v93;
      uint64_t v53 = v94;
      (*(void (**)(char *, char *, uint64_t))(v94 + 32))(v93, v49, v51);
      uint64_t v102 = 0;
      unint64_t v103 = 0xE000000000000000;
      sub_1D7A9CC48();
      swift_bridgeObjectRelease();
      uint64_t v102 = 0x654D64656C616553;
      unint64_t v103 = 0xEF3C736567617373;
      long long v101 = v97;
      swift_getMetatypeMetadata();
      sub_1D7A9C038();
      sub_1D7A9C128();
      swift_bridgeObjectRelease();
      sub_1D7A9C128();
      uint64_t v54 = v102;
      uint64_t v55 = v103;
      uint64_t v56 = (void *)swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v53 + 16))(v57, v52, v51);
      LOWORD(v102) = 116;
      unint64_t v58 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v56, v54, v55, (__int16 *)&v102, 0, v58, 0xD000000000000051, 0x80000001D7ABE640, v59, 0x742865646F636E65, 0xEB00000000293A6FLL, 465);
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v53 + 8))(v52, v51);
      id v60 = v104;
    }
    else
    {

      uint64_t v102 = 0;
      unint64_t v103 = 0xE000000000000000;
      sub_1D7A9CC48();
      swift_bridgeObjectRelease();
      uint64_t v102 = 0x654D64656C616553;
      unint64_t v103 = 0xEF3C736567617373;
      id v104 = v97;
      swift_getMetatypeMetadata();
      sub_1D7A9C038();
      sub_1D7A9C128();
      swift_bridgeObjectRelease();
      sub_1D7A9C128();
      uint64_t v61 = v102;
      uint64_t v62 = v103;
      LOWORD(v102) = 0;
      id v63 = v44;
      unint64_t v64 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v44, v61, v62, (__int16 *)&v102, 0, v64, 0xD000000000000051, 0x80000001D7ABE640, v65, 0x742865646F636E65, 0xEB00000000293A6FLL, 468);
      swift_willThrow();
      id v60 = v44;
    }
  }
  else
  {
    uint64_t v45 = v42;
    uint64_t v47 = v90;
    uint64_t v46 = v91;
    uint64_t v48 = v92;
    long long v99 = a2;
    long long v100 = *(_OWORD *)(v43 + 16);
    LOBYTE(v102) = 1;
    sub_1D7871AD8();
    sub_1D7A9D228();
    uint64_t v88 = v45;
    uint64_t v66 = v33;
    if (shouldIncludeUnencryptedData()())
    {
      uint64_t v86 = v32;
      if (qword_1EBDF9DC8 != -1) {
        swift_once();
      }
      uint64_t v67 = v48;
      uint64_t v68 = __swift_project_value_buffer(v48, (uint64_t)qword_1EBDFBE70);
      swift_beginAccess();
      uint64_t v69 = v46;
      uint64_t v70 = *(void (**)(char *, uint64_t, uint64_t))(v46 + 16);
      unint64_t v71 = v47;
      v70(v47, v68, v67);
      uint64_t v72 = sub_1D7A9B5D8();
      os_log_type_t v73 = sub_1D7A9C748();
      int v74 = v73;
      unint64_t v87 = v72;
      if (os_log_type_enabled(v72, v73))
      {
        int v85 = v74;
        long long v75 = (uint8_t *)swift_slowAlloc();
        uint64_t v76 = swift_slowAlloc();
        uint64_t v102 = v76;
        unint64_t v84 = v75;
        *(_DWORD *)long long v75 = 136315138;
        v83[1] = v75 + 4;
        id v104 = v97;
        swift_getMetatypeMetadata();
        uint64_t v77 = sub_1D7A9C038();
        id v104 = (id)sub_1D7923300(v77, v78, &v102);
        sub_1D7A9C9E8();
        uint64_t v66 = v33;
        swift_bridgeObjectRelease();
        uint64_t v79 = v87;
        unint64_t v80 = v84;
        _os_log_impl(&dword_1D7853000, v87, (os_log_type_t)v85, "including unencrypted data for SealedMessage<%s>", v84, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1D947D740](v76, -1, -1);
        MEMORY[0x1D947D740](v80, -1, -1);

        (*(void (**)(char *, uint64_t))(v69 + 8))(v71, v92);
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v69 + 8))(v47, v92);
      }
      uint64_t v81 = v86;
      LOBYTE(v102) = 2;
      unint64_t v82 = v88;
      sub_1D7A9D1C8();
      (*(void (**)(char *, uint64_t))(v66 + 8))(v82, v81);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v33 + 8))(v88, v32);
    }
  }
}

uint64_t SealedMessage.init(from:)@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v78 = a4;
  uint64_t v86 = sub_1D7A9CCF8();
  uint64_t v84 = *(void *)(v86 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v86, v7, v8, v9, v10, v11, v12, v13);
  uint64_t v83 = (char *)&v77 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14, v16, v17, v18, v19, v20, v21, v22);
  unint64_t v87 = (char *)&v77 - v23;
  uint64_t v77 = sub_1D7A9C9A8();
  uint64_t v80 = *(void *)(v77 - 8);
  MEMORY[0x1F4188790](v77, v24, v25, v26, v27, v28, v29, v30);
  unint64_t v82 = (char *)&v77 - v31;
  type metadata accessor for SealedMessage.CodingKeys();
  swift_getWitnessTable();
  uint64_t v85 = sub_1D7A9D168();
  uint64_t v79 = *(void *)(v85 - 8);
  MEMORY[0x1F4188790](v85, v32, v33, v34, v35, v36, v37, v38);
  uint64_t v40 = (char *)&v77 - v39;
  long long v90 = a2;
  uint64_t v81 = a3;
  uint64_t v41 = type metadata accessor for SealedMessage();
  unint64_t v42 = *(void (***)(void, void, uint64_t))(v41 - 8);
  MEMORY[0x1F4188790](v41, v43, v44, v45, v46, v47, v48, v49);
  uint64_t v91 = (uint64_t *)((char *)&v77 - v50);
  uint64_t v51 = a1[3];
  uint64_t v89 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v51);
  char v52 = v88;
  sub_1D7A9D6A8();
  if (v52)
  {
    int v56 = 0;
    uint64_t v57 = v86;
    unint64_t v58 = v87;
    id v94 = v52;
    id v59 = v52;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF9740);
    if (swift_dynamicCast())
    {

      LODWORD(v88) = 0;
      uint64_t v60 = v84;
      uint64_t v61 = v58;
      uint64_t v62 = v83;
      (*(void (**)(char *, char *, uint64_t))(v84 + 32))(v83, v61, v57);
      *(void *)&long long v93 = 0;
      *((void *)&v93 + 1) = 0xE000000000000000;
      sub_1D7A9CC48();
      swift_bridgeObjectRelease();
      strcpy((char *)&v93, "SealedMessage<");
      HIBYTE(v93) = -18;
      uint64_t v92 = v90;
      swift_getMetatypeMetadata();
      sub_1D7A9C038();
      sub_1D7A9C128();
      swift_bridgeObjectRelease();
      sub_1D7A9C128();
      long long v63 = v93;
      unint64_t v64 = (void *)swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v60 + 16))(v65, v62, v57);
      LOWORD(v93) = 115;
      unint64_t v66 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v64, v63, *((uint64_t *)&v63 + 1), (__int16 *)&v93, 0, v66, 0xD000000000000051, 0x80000001D7ABE640, v67, 0x6F72662874696E69, 0xEB00000000293A6DLL, 480);
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v60 + 8))(v62, v57);
      int v56 = (int)v88;
      id v68 = v94;
    }
    else
    {

      *(void *)&long long v93 = 0;
      *((void *)&v93 + 1) = 0xE000000000000000;
      sub_1D7A9CC48();
      swift_bridgeObjectRelease();
      strcpy((char *)&v93, "SealedMessage<");
      HIBYTE(v93) = -18;
      id v94 = v90;
      swift_getMetatypeMetadata();
      sub_1D7A9C038();
      sub_1D7A9C128();
      swift_bridgeObjectRelease();
      sub_1D7A9C128();
      long long v69 = v93;
      LOWORD(v93) = 0;
      id v70 = v52;
      unint64_t v71 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v52, v69, *((uint64_t *)&v69 + 1), (__int16 *)&v93, 0, v71, 0xD000000000000051, 0x80000001D7ABE640, v72, 0x6F72662874696E69, 0xEB00000000293A6DLL, 483);
      swift_willThrow();
      id v68 = v52;
    }

    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v89);
    if (v56) {
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v88 = v42;
    uint64_t v54 = v79;
    uint64_t v53 = v80;
    LOBYTE(v93) = 0;
    uint64_t v55 = sub_1D7A9D0F8();
    os_log_type_t v73 = v91;
    *uint64_t v91 = v55;
    v73[1] = v74;
    LOBYTE(v94) = 1;
    sub_1D786073C();
    sub_1D7A9D148();
    *((_OWORD *)v73 + 1) = v93;
    LOBYTE(v93) = 2;
    sub_1D7A9D0E8();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v40, v85);
    (*(void (**)(char *, char *, uint64_t))(v53 + 32))((char *)v73 + *(int *)(v41 + 48), v82, v77);
    long long v75 = v88;
    ((void (**)(uint64_t, uint64_t *, uint64_t))v88)[2](v78, v73, v41);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v89);
    return ((uint64_t (*)(uint64_t *, uint64_t))v75[1])(v73, v41);
  }
  return result;
}

uint64_t sub_1D787EBEC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return SealedMessage.init(from:)(a1, *(void **)(a2 + 16), *(void *)(a2 + 24), a3);
}

void sub_1D787EC10(void *a1, void *a2)
{
}

uint64_t HPKESuiteKwV1.init(pkISm:info:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v48 = a3;
  uint64_t v49 = a4;
  uint64_t v46 = a1;
  uint64_t v47 = a2;
  uint64_t v45 = sub_1D7A9BA48();
  uint64_t v6 = *(void *)(v45 - 8);
  MEMORY[0x1F4188790](v45, v7, v8, v9, v10, v11, v12, v13);
  uint64_t v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = sub_1D7A9BA28();
  uint64_t v16 = *(void *)(v44 - 8);
  MEMORY[0x1F4188790](v44, v17, v18, v19, v20, v21, v22, v23);
  uint64_t v25 = (char *)&v44 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_1D7A9BA38();
  uint64_t v27 = *(void *)(v26 - 8);
  MEMORY[0x1F4188790](v26, v28, v29, v30, v31, v32, v33, v34);
  uint64_t v36 = (char *)&v44 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  *a5 = &type metadata for AEADScheme_AES_128_GCM;
  a5[1] = &off_1F2F1ADC8;
  uint64_t v37 = (int *)type metadata accessor for HPKESuiteKwV1();
  (*(void (**)(char *, void, uint64_t))(v27 + 104))(v36, *MEMORY[0x1E4F250A8], v26);
  (*(void (**)(char *, void, uint64_t))(v16 + 104))(v25, *MEMORY[0x1E4F25090], v44);
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v15, *MEMORY[0x1E4F250B8], v45);
  uint64_t result = sub_1D7A9BA08();
  uint64_t v39 = (void *)((char *)a5 + v37[7]);
  uint64_t v40 = v47;
  void *v39 = v46;
  v39[1] = v40;
  uint64_t v41 = (char *)a5 + v37[8];
  *(void *)uint64_t v41 = 0;
  *((void *)v41 + 1) = 0;
  v41[16] = -1;
  unint64_t v42 = (void *)((char *)a5 + v37[6]);
  uint64_t v43 = v49;
  void *v42 = v48;
  v42[1] = v43;
  return result;
}

double HPKESuiteKwV1.init(skR:info:)@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v50 = a2;
  uint64_t v51 = a3;
  uint64_t v49 = sub_1D7A9BA48();
  uint64_t v6 = *(void *)(v49 - 8);
  MEMORY[0x1F4188790](v49, v7, v8, v9, v10, v11, v12, v13);
  uint64_t v15 = &v44[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v48 = sub_1D7A9BA28();
  uint64_t v16 = *(void *)(v48 - 8);
  MEMORY[0x1F4188790](v48, v17, v18, v19, v20, v21, v22, v23);
  uint64_t v25 = &v44[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v26 = sub_1D7A9BA38();
  uint64_t v27 = *(void *)(v26 - 8);
  MEMORY[0x1F4188790](v26, v28, v29, v30, v31, v32, v33, v34);
  uint64_t v36 = &v44[-((v35 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v37 = *a1;
  uint64_t v46 = a1[1];
  uint64_t v47 = v37;
  int v45 = *((unsigned __int8 *)a1 + 16);
  *a4 = &type metadata for AEADScheme_AES_128_GCM;
  a4[1] = &off_1F2F1ADC8;
  uint64_t v38 = (int *)type metadata accessor for HPKESuiteKwV1();
  (*(void (**)(unsigned char *, void, uint64_t))(v27 + 104))(v36, *MEMORY[0x1E4F250A8], v26);
  (*(void (**)(unsigned char *, void, uint64_t))(v16 + 104))(v25, *MEMORY[0x1E4F25090], v48);
  (*(void (**)(unsigned char *, void, uint64_t))(v6 + 104))(v15, *MEMORY[0x1E4F250B8], v49);
  sub_1D7A9BA08();
  uint64_t v39 = (char *)a4 + v38[8];
  uint64_t v40 = v46;
  *(void *)uint64_t v39 = v47;
  *((void *)v39 + 1) = v40;
  void v39[16] = v45;
  double result = 0.0;
  *(_OWORD *)((char *)a4 + v38[7]) = xmmword_1D7AA0AB0;
  unint64_t v42 = (void *)((char *)a4 + v38[6]);
  uint64_t v43 = v51;
  void *v42 = v50;
  v42[1] = v43;
  return result;
}

uint64_t HPKESuiteKwV1.sealMessageAEAD<A>(message:)(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v70 = a1;
  unint64_t v71 = a2;
  uint64_t v11 = sub_1D7A9C9A8();
  uint64_t v68 = *(void *)(v11 - 8);
  uint64_t v69 = v11;
  uint64_t v19 = MEMORY[0x1F4188790](v11, v12, v13, v14, v15, v16, v17, v18);
  uint64_t v67 = (char *)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = MEMORY[0x1F4188790](v19, v21, v22, v23, v24, v25, v26, v27);
  uint64_t v30 = (char *)&v56 - v29;
  uint64_t v31 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](v28, v32, v33, v34, v35, v36, v37, v38);
  unint64_t v66 = *(void (**)(char *, uint64_t, uint64_t))(v31 + 16);
  v66((char *)&v56 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0), a3, a4);
  if (swift_dynamicCast())
  {
    uint64_t v64 = a3;
    uint64_t v65 = a6;
    uint64_t v40 = v72;
    unint64_t v41 = v73;
  }
  else
  {
    uint64_t v62 = v30;
    uint64_t v63 = a5;
    sub_1D7A9AC48();
    swift_allocObject();
    sub_1D7A9AC38();
    uint64_t v42 = a6;
    uint64_t v40 = sub_1D7A9AC28();
    uint64_t v43 = a3;
    unint64_t v41 = v44;
    uint64_t result = swift_release();
    if (v6) {
      return result;
    }
    uint64_t v64 = v43;
    uint64_t v65 = v42;
    uint64_t v30 = v62;
  }
  uint64_t v46 = sub_1D787F4A8(&v72, v40, v41);
  if (v6) {
    return sub_1D78607E8(v40, v41);
  }
  uint64_t v61 = v49;
  uint64_t v62 = (char *)v48;
  uint64_t v63 = v47;
  uint64_t v76 = v46;
  unint64_t v59 = v73;
  uint64_t v60 = v72;
  uint64_t v57 = v75;
  uint64_t v58 = v74;
  Swift::Bool v50 = shouldIncludeUnencryptedData()();
  sub_1D78607E8(v40, v41);
  if (v50)
  {
    v66(v30, v64, a4);
    uint64_t v51 = 0;
  }
  else
  {
    uint64_t v51 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 56))(v30, v51, 1, a4);
  uint64_t v52 = (uint64_t)v67;
  (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v67, v30, v69);
  uint64_t result = SealedMessage.init(keyID:data:unencryptedData:)((uint64_t)v62, v61, v76, v63, v52, v70);
  uint64_t v53 = v71;
  unint64_t v54 = v59;
  *unint64_t v71 = v60;
  v53[1] = v54;
  uint64_t v55 = v57;
  v53[2] = v58;
  void v53[3] = v55;
  return result;
}

uint64_t sub_1D787F4A8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v96 = a2;
  uint64_t v97 = a3;
  uint64_t v91 = a1;
  uint64_t v99 = *MEMORY[0x1E4F143B8];
  uint64_t v94 = sub_1D7A9B9A8();
  uint64_t v3 = *(void *)(v94 - 8);
  MEMORY[0x1F4188790](v94, v4, v5, v6, v7, v8, v9, v10);
  uint64_t v12 = (char *)v90 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1D7A9B928();
  MEMORY[0x1F4188790](v13 - 8, v14, v15, v16, v17, v18, v19, v20);
  uint64_t v21 = sub_1D7A9B8C8();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21, v23, v24, v25, v26, v27, v28, v29);
  uint64_t v31 = (char *)v90 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = sub_1D7A9B1A8();
  uint64_t v33 = *(void *)(v32 - 8);
  MEMORY[0x1F4188790](v32, v34, v35, v36, v37, v38, v39, v40);
  uint64_t v42 = (char *)v90 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7A9B198();
  v90[1] = sub_1D7A9B158();
  uint64_t v92 = v43;
  (*(void (**)(char *, uint64_t))(v33 + 8))(v42, v32);
  sub_1D7A9B918();
  sub_1D7A9B8B8();
  uint64_t v44 = v93;
  sub_1D7A9B898();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v31, v21);
  unint64_t v45 = *((void *)&v98 + 1);
  uint64_t v46 = v98;
  sub_1D7A9B998();
  sub_1D7A9B978();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v94);
  long long v47 = v98;
  uint64_t v48 = *v95;
  uint64_t v49 = v95[1];
  Swift::Bool v50 = v95;
  uint64_t v51 = type metadata accessor for HPKESuiteKwV1();
  uint64_t v52 = (*(uint64_t (**)(uint64_t, unint64_t, void, void, void, void, uint64_t, uint64_t, uint64_t, uint64_t))(v49 + 8))(v46, v45, v47, *((void *)&v47 + 1), *(void *)((char *)v50 + *(int *)(v51 + 28)), *(void *)((char *)v50 + *(int *)(v51 + 28) + 8), v96, v97, v48, v49);
  if (!v44)
  {
    uint64_t v96 = v53;
    uint64_t v97 = v52;
    switch(v45 >> 62)
    {
      case 1uLL:
        if (v46 >> 32 < (int)v46)
        {
          __break(1u);
LABEL_33:
          __break(1u);
        }
        else
        {
          sub_1D7860790(v46, v45);
          uint64_t v55 = sub_1D7A9AC98();
          if (!v55)
          {
LABEL_9:
            uint64_t v57 = sub_1D7A9ACA8();
            if (v57 >= (v46 >> 32) - (int)v46) {
              uint64_t v58 = (v46 >> 32) - (int)v46;
            }
            else {
              uint64_t v58 = v57;
            }
            uint64_t v59 = v55 + v58;
            if (v55) {
              uint64_t v60 = v59;
            }
            else {
              uint64_t v60 = 0;
            }
            uint64_t v61 = sub_1D78D0C88(v55, v60);
            unint64_t v63 = v62;
            uint64_t v64 = sub_1D7A9B008();
            uint64_t v66 = v65;
            sub_1D78607E8(v61, v63);
            sub_1D78607E8(v46, v45);
LABEL_30:
            uint64_t v85 = sub_1D7A9B008();
            uint64_t v87 = v86;
            sub_1D78607E8(v47, *((unint64_t *)&v47 + 1));
            sub_1D78607E8(v46, v45);
            uint64_t v88 = v91;
            *uint64_t v91 = v64;
            v88[1] = v66;
            v88[2] = v85;
            v88[3] = v87;
            return v97;
          }
          uint64_t v56 = sub_1D7A9ACB8();
          if (!__OFSUB__((int)v46, v56))
          {
            v55 += (int)v46 - v56;
            goto LABEL_9;
          }
        }
        __break(1u);
LABEL_35:
        __break(1u);
        return result;
      case 2uLL:
        uint64_t v67 = *(void *)(v46 + 16);
        uint64_t v95 = *(void **)(v46 + 24);
        swift_retain();
        swift_retain();
        uint64_t v68 = sub_1D7A9AC98();
        if (v68)
        {
          uint64_t v69 = v45 & 0x3FFFFFFFFFFFFFFFLL;
          uint64_t v70 = sub_1D7A9ACB8();
          if (__OFSUB__(v67, v70)) {
            goto LABEL_35;
          }
          v68 += v67 - v70;
        }
        else
        {
          uint64_t v69 = v45 & 0x3FFFFFFFFFFFFFFFLL;
        }
        BOOL v75 = __OFSUB__(v95, v67);
        uint64_t v76 = (char *)v95 - v67;
        if (!v75)
        {
          uint64_t v94 = v69;
          uint64_t v77 = sub_1D7A9ACA8();
          if (v77 >= (uint64_t)v76) {
            uint64_t v78 = (uint64_t)v76;
          }
          else {
            uint64_t v78 = v77;
          }
          uint64_t v79 = v68 + v78;
          if (v68) {
            uint64_t v80 = v79;
          }
          else {
            uint64_t v80 = 0;
          }
          uint64_t v81 = sub_1D78D0C88(v68, v80);
          unint64_t v83 = v82;
          uint64_t v64 = sub_1D7A9B008();
          uint64_t v66 = v84;
          sub_1D78607E8(v81, v83);
          swift_release();
          swift_release();
          goto LABEL_30;
        }
        goto LABEL_33;
      case 3uLL:
        *(void *)((char *)&v98 + 6) = 0;
        *(void *)&long long v98 = 0;
        unint64_t v54 = (char *)&v98;
        goto LABEL_20;
      default:
        *(void *)&long long v98 = v46;
        WORD4(v98) = v45;
        BYTE10(v98) = BYTE2(v45);
        BYTE11(v98) = BYTE3(v45);
        BYTE12(v98) = BYTE4(v45);
        BYTE13(v98) = BYTE5(v45);
        unint64_t v54 = (char *)&v98 + BYTE6(v45);
LABEL_20:
        uint64_t v71 = sub_1D78D0C88((uint64_t)&v98, (uint64_t)v54);
        unint64_t v73 = v72;
        uint64_t v64 = sub_1D7A9B008();
        uint64_t v66 = v74;
        sub_1D78607E8(v71, v73);
        goto LABEL_30;
    }
  }
  sub_1D78607E8(v47, *((unint64_t *)&v47 + 1));
  sub_1D78607E8(v46, v45);
  swift_bridgeObjectRelease();
  return v97;
}

uint64_t sub_1D787FAD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1D787FAF0(a1, a2, a3);
}

uint64_t sub_1D787FAF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  v14[3] = MEMORY[0x1E4FBB2B8];
  v14[4] = MEMORY[0x1E4F27EF0];
  v14[0] = a1;
  v14[1] = a2;
  uint64_t v4 = __swift_project_boxed_opaque_existential_1(v14, MEMORY[0x1E4FBB2B8]);
  uint64_t v5 = (unsigned char *)*v4;
  if (*v4 && (v6 = (unsigned char *)v4[1], uint64_t v7 = v6 - v5, v6 != v5))
  {
    if (v7 <= 14)
    {
      uint64_t v8 = sub_1D7A7B1EC(v5, v6);
      unint64_t v9 = v12 & 0xFFFFFFFFFFFFFFLL;
    }
    else if ((unint64_t)v7 >= 0x7FFFFFFF)
    {
      uint64_t v8 = sub_1D79329A4((uint64_t)v5, (uint64_t)v6);
      unint64_t v9 = v13 | 0x8000000000000000;
    }
    else
    {
      uint64_t v8 = sub_1D7932A20((uint64_t)v5, (uint64_t)v6);
      unint64_t v9 = v11 | 0x4000000000000000;
    }
  }
  else
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0xC000000000000000;
  }
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  *a3 = v8;
  a3[1] = v9;
  return result;
}

uint64_t HPKESuiteKwV1.openMessageAEAD(cipherText:key:aad:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = sub_1D7A9AFB8();
  if (v8 >> 60 == 15)
  {
    __int16 v21 = 282;
    unint64_t v9 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000021, 0x80000001D7ABE910, &v21, 0, v9, 0xD000000000000051, 0x80000001D7ABE640, v10, 0xD000000000000020, 0x80000001D7ABE940, 563);
    swift_willThrow();
  }
  else
  {
    unint64_t v11 = v8;
    uint64_t v19 = v7;
    uint64_t v12 = sub_1D7A9AFB8();
    if (v13 >> 60 == 15)
    {
      __int16 v20 = 283;
      unint64_t v14 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000026, 0x80000001D7ABE970, &v20, 0, v14, 0xD000000000000051, 0x80000001D7ABE640, v15, 0xD000000000000020, 0x80000001D7ABE940, 566);
      swift_willThrow();
      sub_1D7871BDC(v19, v11);
    }
    else
    {
      uint64_t v16 = v12;
      unint64_t v17 = v13;
      a5 = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)(v5 + 8) + 16))(v12, v13);
      sub_1D7871BDC(v16, v17);
      sub_1D7871BDC(v19, v11);
    }
  }
  return a5;
}

void HPKESuiteKwV1.sealMessageHPKE<A>(message:to:encoder:)(uint64_t a1@<X0>, void *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v316 = a4;
  uint64_t v326 = a1;
  uint64_t v315 = a6;
  uint64_t v353 = *MEMORY[0x1E4F143B8];
  uint64_t v327 = a3;
  uint64_t v320 = sub_1D7A9C9A8();
  uint64_t v317 = *(void *)(v320 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v320, v8, v9, v10, v11, v12, v13, v14);
  v314 = (char *)&v296 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15, v17, v18, v19, v20, v21, v22, v23);
  v319 = (char *)&v296 - v24;
  v330 = (uint64_t *)sub_1D7A9BA18();
  uint64_t v329 = *(v330 - 1);
  MEMORY[0x1F4188790](v330, v25, v26, v27, v28, v29, v30, v31);
  v331 = (char *)&v296 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v325 = sub_1D7A9BA88();
  uint64_t v324 = *(void *)(v325 - 8);
  MEMORY[0x1F4188790](v325, v33, v34, v35, v36, v37, v38, v39);
  v332 = (char *)&v296 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = sub_1D7A9BAF8();
  uint64_t v42 = *(void *)(v41 - 8);
  uint64_t v50 = MEMORY[0x1F4188790](v41, v43, v44, v45, v46, v47, v48, v49);
  unint64_t v328 = (unint64_t)&v296 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v50, v52, v53, v54, v55, v56, v57, v58);
  v337 = (char *)&v296 - v59;
  uint64_t v335 = sub_1D7A9B5F8();
  uint64_t v338 = *(void *)(v335 - 8);
  uint64_t v67 = MEMORY[0x1F4188790](v335, v60, v61, v62, v63, v64, v65, v66);
  v322 = (char *)&v296 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v67, v69, v70, v71, v72, v73, v74, v75);
  uint64_t v77 = (char *)&v296 - v76;
  *((void *)&v341 + 1) = sub_1D7A9BD88();
  uint64_t v340 = *(void *)(*((void *)&v341 + 1) - 8);
  uint64_t v85 = MEMORY[0x1F4188790](*((void *)&v341 + 1), v78, v79, v80, v81, v82, v83, v84);
  uint64_t v323 = (uint64_t)&v296 - ((v86 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = MEMORY[0x1F4188790](v85, v87, v88, v89, v90, v91, v92, v93);
  uint64_t v96 = (char *)&v296 - v95;
  MEMORY[0x1F4188790](v94, v97, v98, v99, v100, v101, v102, v103);
  uint64_t v105 = (char *)&v296 - v104;
  unint64_t v334 = sub_1D7A9B838();
  *(void *)&long long v341 = *(void *)(v334 - 8);
  uint64_t v113 = MEMORY[0x1F4188790](v334, v106, v107, v108, v109, v110, v111, v112);
  v321 = (char *)&v296 - ((v114 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v122 = MEMORY[0x1F4188790](v113, v115, v116, v117, v118, v119, v120, v121);
  v318 = (char *)&v296 - v123;
  MEMORY[0x1F4188790](v122, v124, v125, v126, v127, v128, v129, v130);
  uint64_t v132 = (char *)&v296 - v131;
  v133.SecCertificateRef value = SecTrustRef.getLeafCertificate()().value;
  if (!v133.value)
  {
    LOWORD(v342) = 261;
    unint64_t v140 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000029, 0x80000001D7ABE9A0, (__int16 *)&v342, 0, v140, 0xD000000000000051, 0x80000001D7ABE640, v141, 0xD000000000000024, 0x80000001D7ABE9D0, 576);
    swift_willThrow();
    return;
  }
  uint64_t v311 = a5;
  SecCertificateRef value = v133.value;
  uint64_t v134 = SecCertificateCopyKey(v133.value);
  if (!v134
    || (char v135 = v134,
        uint64_t v313 = copyPublicKeyDataFromSecKeyPublic(_:)(v134),
        unint64_t v137 = v136,
        v135,
        v137 >> 60 == 15))
  {
    LOWORD(v342) = 242;
    unint64_t v138 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000035, 0x80000001D7ABEA00, (__int16 *)&v342, 0, v138, 0xD000000000000051, 0x80000001D7ABE640, v139, 0xD000000000000024, 0x80000001D7ABE9D0, 580);
    swift_willThrow();
LABEL_20:

    return;
  }
  uint64_t v310 = sub_1D7885664(&qword_1EA8424A0, MEMORY[0x1E4F25170]);
  sub_1D7A9B828();
  unint64_t v312 = v137;
  uint64_t v306 = v42;
  uint64_t v307 = v41;
  v304 = v96;
  switch(v137 >> 62)
  {
    case 1uLL:
      uint64_t v146 = v313;
      if (v146 >> 32 < (int)v146)
      {
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
      }
      unint64_t v145 = v312;
      sub_1D7860790(v313, v312);
      uint64_t v150 = v339;
      sub_1D78D117C((int)v146, v146 >> 32, v145 & 0x3FFFFFFFFFFFFFFFLL, (uint64_t)v105);
      uint64_t v339 = v150;
      break;
    case 2uLL:
      unint64_t v145 = v312;
      uint64_t v146 = v313;
      uint64_t v148 = *(void *)(v313 + 16);
      uint64_t v147 = *(void *)(v313 + 24);
      sub_1D786E9D8(v313, v312);
      swift_retain();
      swift_retain();
      uint64_t v149 = v339;
      sub_1D78D117C(v148, v147, v145 & 0x3FFFFFFFFFFFFFFFLL, (uint64_t)v105);
      if (v149) {
        goto LABEL_88;
      }
      uint64_t v339 = 0;
      swift_release();
      swift_release();
      break;
    case 3uLL:
      *(void *)((char *)&v342 + 6) = 0;
      *(void *)&long long v342 = 0;
      uint64_t v144 = *((void *)&v341 + 1);
      sub_1D7A9B808();
      sub_1D7871BDC(v313, v312);
      goto LABEL_14;
    default:
      uint64_t v142 = v313;
      *(void *)&long long v342 = v313;
      unint64_t v143 = v312;
      DWORD2(v342) = v312;
      WORD6(v342) = WORD2(v312);
      uint64_t v144 = *((void *)&v341 + 1);
      sub_1D7A9B808();
      sub_1D7871BDC(v142, v143);
      goto LABEL_14;
  }
  sub_1D7871BDC(v146, v145);
  uint64_t v144 = *((void *)&v341 + 1);
LABEL_14:
  v305 = a2;
  sub_1D7A9B818();
  uint64_t v151 = *(void (**)(uint64_t, uint64_t))(v340 + 8);
  v340 += 8;
  v303 = v151;
  v151((uint64_t)v105, v144);
  uint64_t v152 = sub_1D7885664(&qword_1EA8424A8, MEMORY[0x1E4F24F80]);
  unint64_t v153 = v334;
  uint64_t v301 = v152;
  uint64_t v154 = sub_1D7A9BD78();
  uint64_t v156 = sub_1D78D1370(v154, v155);
  swift_bridgeObjectRelease();
  uint64_t v309 = sub_1D78D1EB0(v156);
  unint64_t v308 = v157;
  swift_release();
  uint64_t v158 = *(void (**)(char *, unint64_t))(v341 + 8);
  *(void *)&long long v341 = v341 + 8;
  v302 = v158;
  v158(v132, v153);
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v159 = v335;
  uint64_t v160 = __swift_project_value_buffer(v335, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  uint64_t v161 = v338;
  uint64_t v162 = v338 + 16;
  int64_t v163 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v338 + 16);
  uint64_t v164 = v163(v77, v160, v159);
  MEMORY[0x1F4188790](v164, v165, v166, v167, v168, v169, v170, v171);
  uint64_t v172 = v333;
  Logger.cryptoParam(_:)((uint64_t (*)(void))sub_1D7885AD4);
  int64_t v175 = *(void (**)(uint64_t, uint64_t))(v161 + 8);
  uint64_t v174 = v161 + 8;
  SecRandomRef v173 = v175;
  v175((uint64_t)v77, v159);
  unint64_t v176 = v312;
  *(void *)&long long v342 = v313;
  *((void *)&v342 + 1) = v312;
  sub_1D7860790(v313, v312);
  uint64_t v177 = v337;
  uint64_t v178 = v339;
  sub_1D7A9BAE8();
  uint64_t v179 = (void *)v178;
  if (v178)
  {
    unint64_t v180 = v308;
    uint64_t v181 = v309;
    uint64_t v182 = v313;
LABEL_19:
    LOWORD(v342) = 274;
    id v190 = v179;
    unint64_t v191 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v179, 0xD000000000000028, 0x80000001D7ABEA40, (__int16 *)&v342, 0, v191, 0xD000000000000051, 0x80000001D7ABE640, v192, 0xD000000000000024, 0x80000001D7ABE9D0, 622);
    swift_willThrow();

    sub_1D78607E8(v181, v180);
    sub_1D7871BDC(v182, v176);
    goto LABEL_20;
  }
  uint64_t v339 = v160;
  v298 = v173;
  v299 = (void (*)(char *, uint64_t, uint64_t))v163;
  uint64_t v300 = v162;
  uint64_t v338 = v174;
  (*(void (**)(unint64_t, char *, uint64_t))(v306 + 16))(v328, v177, v307);
  uint64_t v183 = (int *)type metadata accessor for HPKESuiteKwV1();
  (*(void (**)(char *, char *, uint64_t *))(v329 + 16))(v331, (char *)v172 + v183[5], v330);
  unint64_t v184 = (uint64_t *)((char *)v172 + v183[6]);
  sub_1D7860790(*v184, v184[1]);
  sub_1D7A9BA58();
  size_t v185 = v183;
  v330 = v184;
  uint64_t v186 = v305[3];
  uint64_t v187 = v305[4];
  __swift_project_boxed_opaque_existential_1(v305, v186);
  uint64_t v188 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v187 + 8))(v326, v327, v311, v186, v187);
  v331 = 0;
  uint64_t v193 = v188;
  v194 = v189;
  uint64_t v195 = sub_1D7A9BA68();
  uint64_t v197 = v195;
  unint64_t v198 = v196;
  uint64_t v199 = (uint64_t)v304;
  switch(v196 >> 62)
  {
    case 1uLL:
      uint64_t v329 = (int)v195;
      uint64_t v209 = (v195 >> 32) - (int)v195;
      uint64_t v205 = *((void *)&v341 + 1);
      if (v195 >> 32 < (int)v195) {
        goto LABEL_82;
      }
      uint64_t v210 = sub_1D7A9AC98();
      if (!v210) {
        goto LABEL_32;
      }
      uint64_t v211 = sub_1D7A9ACB8();
      if (__OFSUB__(v329, v211)) {
        goto LABEL_86;
      }
      v210 += v329 - v211;
LABEL_32:
      uint64_t v212 = sub_1D7A9ACA8();
      if (v212 >= v209) {
        uint64_t v213 = (v197 >> 32) - (int)v197;
      }
      else {
        uint64_t v213 = v212;
      }
      uint64_t v214 = v210 + v213;
      if (v210) {
        uint64_t v215 = v214;
      }
      else {
        uint64_t v215 = 0;
      }
      uint64_t v329 = sub_1D78D0C88(v210, v215);
      unint64_t v328 = v216;
      goto LABEL_48;
    case 2uLL:
      uint64_t v201 = *(void *)(v195 + 16);
      uint64_t v329 = *(void *)(v195 + 24);
      swift_retain();
      swift_retain();
      uint64_t v202 = sub_1D7A9AC98();
      if (v202)
      {
        uint64_t v203 = v202;
        uint64_t v204 = sub_1D7A9ACB8();
        uint64_t v205 = *((void *)&v341 + 1);
        if (__OFSUB__(v201, v204))
        {
          __break(1u);
LABEL_86:
          __break(1u);
LABEL_87:
          __break(1u);
LABEL_88:
          swift_release();
          swift_release();
          __break(1u);
LABEL_89:
          swift_release();
          swift_release();
          __break(1u);
          JUMPOUT(0x1D7881BD4);
        }
        uint64_t v206 = v201;
        uint64_t v207 = v203 + v201 - v204;
      }
      else
      {
        uint64_t v206 = v201;
        uint64_t v207 = 0;
        uint64_t v205 = *((void *)&v341 + 1);
      }
      uint64_t v217 = v329 - v206;
      if (__OFSUB__(v329, v206)) {
        goto LABEL_83;
      }
      uint64_t v218 = sub_1D7A9ACA8();
      if (v218 >= v217) {
        uint64_t v219 = v217;
      }
      else {
        uint64_t v219 = v218;
      }
      uint64_t v220 = v207 + v219;
      if (v207) {
        uint64_t v221 = v220;
      }
      else {
        uint64_t v221 = 0;
      }
      uint64_t v329 = sub_1D78D0C88(v207, v221);
      unint64_t v328 = v222;
      swift_release();
      swift_release();
LABEL_48:
      sub_1D78607E8(v197, v198);
      uint64_t v199 = (uint64_t)v304;
      uint64_t v183 = v185;
LABEL_49:
      uint64_t v297 = v193;
      long long v296 = xmmword_1D7AA0AC0;
      long long v352 = xmmword_1D7AA0AC0;
      v223 = (uint64_t *)((char *)v333 + v183[7]);
      unint64_t v224 = v223[1];
      uint64_t v225 = v323;
      v305 = v194;
      v333 = v223;
      if (v224 >> 60 == 15)
      {
        uint64_t v226 = (uint64_t)v322;
      }
      else
      {
        uint64_t v227 = *v223;
        sub_1D7860790(*v223, v224);
        sub_1D7A9B828();
        switch(v224 >> 62)
        {
          case 1uLL:
            if (v227 >> 32 < (int)v227) {
              goto LABEL_87;
            }
            sub_1D7860790(v227, v224);
            uint64_t v199 = (uint64_t)v304;
            v232 = v331;
            sub_1D78D117C((int)v227, v227 >> 32, v224 & 0x3FFFFFFFFFFFFFFFLL, (uint64_t)v304);
            v331 = v232;
            goto LABEL_59;
          case 2uLL:
            uint64_t v228 = *(void *)(v227 + 16);
            uint64_t v229 = *(void *)(v227 + 24);
            sub_1D786E9D8(v227, v224);
            swift_retain();
            swift_retain();
            uint64_t v230 = v229;
            uint64_t v199 = (uint64_t)v304;
            v231 = v331;
            sub_1D78D117C(v228, v230, v224 & 0x3FFFFFFFFFFFFFFFLL, (uint64_t)v304);
            v331 = v231;
            if (v231) {
              goto LABEL_89;
            }
            swift_release();
            swift_release();
LABEL_59:
            sub_1D7871BDC(v227, v224);
            break;
          case 3uLL:
            *(void *)((char *)&v342 + 6) = 0;
            *(void *)&long long v342 = 0;
            goto LABEL_56;
          default:
            *(void *)&long long v342 = v227;
            WORD4(v342) = v224;
            BYTE10(v342) = BYTE2(v224);
            BYTE11(v342) = BYTE3(v224);
            BYTE12(v342) = BYTE4(v224);
            BYTE13(v342) = BYTE5(v224);
LABEL_56:
            sub_1D7A9B808();
            sub_1D7871BDC(v227, v224);
            break;
        }
        v233 = v318;
        sub_1D7A9B818();
        v303(v199, v205);
        unint64_t v234 = v334;
        uint64_t v235 = sub_1D7A9BD78();
        uint64_t v237 = sub_1D78D1370(v235, v236);
        swift_bridgeObjectRelease();
        uint64_t v238 = sub_1D78D1EB0(v237);
        uint64_t v240 = v239;
        swift_release();
        v302(v233, v234);
        sub_1D7871BDC(v352, *((unint64_t *)&v352 + 1));
        *(void *)&long long v352 = v238;
        *((void *)&v352 + 1) = v240;
        uint64_t v226 = (uint64_t)v322;
        uint64_t v241 = v335;
        v299(v322, v339, v335);
        sub_1D791EF30(v226, (uint64_t)&v352);
        sub_1D7871BDC(v227, v224);
        v298(v226, v241);
        uint64_t v225 = v323;
      }
      uint64_t v242 = *v330;
      unint64_t v243 = v330[1];
      sub_1D7860790(*v330, v243);
      sub_1D7A9B828();
      switch(v243 >> 62)
      {
        case 1uLL:
          v248 = v331;
          if (v242 >> 32 < (int)v242) {
            goto LABEL_84;
          }
          sub_1D7860790(v242, v243);
          sub_1D78D117C((int)v242, v242 >> 32, v243 & 0x3FFFFFFFFFFFFFFFLL, v225);
          v331 = v248;
          goto LABEL_69;
        case 2uLL:
          uint64_t v244 = *(void *)(v242 + 16);
          uint64_t v245 = *(void *)(v242 + 24);
          sub_1D7860790(v242, v243);
          swift_retain();
          swift_retain();
          v246 = v331;
          sub_1D78D117C(v244, v245, v243 & 0x3FFFFFFFFFFFFFFFLL, v225);
          v331 = v246;
          if (v246) {
            goto LABEL_89;
          }
          swift_release();
          swift_release();
LABEL_69:
          sub_1D78607E8(v242, v243);
          uint64_t v205 = *((void *)&v341 + 1);
          v247 = v321;
          break;
        case 3uLL:
          *(void *)((char *)&v342 + 6) = 0;
          *(void *)&long long v342 = 0;
          goto LABEL_66;
        default:
          *(void *)&long long v342 = v242;
          WORD4(v342) = v243;
          BYTE10(v342) = BYTE2(v243);
          BYTE11(v342) = BYTE3(v243);
          BYTE12(v342) = BYTE4(v243);
          BYTE13(v342) = BYTE5(v243);
LABEL_66:
          sub_1D7A9B808();
          sub_1D78607E8(v242, v243);
          v247 = v321;
          break;
      }
      sub_1D7A9B818();
      v303(v225, v205);
      sub_1D78607E8(v242, v243);
      unint64_t v249 = v334;
      uint64_t v250 = sub_1D7A9BD78();
      uint64_t v252 = sub_1D78D1370(v250, v251);
      swift_bridgeObjectRelease();
      uint64_t v253 = sub_1D78D1EB0(v252);
      unint64_t v255 = v254;
      swift_release();
      v302(v247, v249);
      uint64_t v256 = v335;
      v299((char *)v226, v339, v335);
      sub_1D7860790(v253, v255);
      sub_1D79240F0(v226, v253, v255);
      sub_1D78607E8(v253, v255);
      v298(v226, v256);
      long long v257 = v352;
      *(void *)&long long v342 = v297;
      *((void *)&v342 + 1) = v305;
      uint64_t v258 = *v333;
      unint64_t v259 = v333[1];
      if (v259 >> 60 == 15) {
        uint64_t v260 = 0;
      }
      else {
        uint64_t v260 = *v333;
      }
      unint64_t v261 = 0xC000000000000000;
      if (v259 >> 60 != 15) {
        unint64_t v261 = v333[1];
      }
      uint64_t v340 = v260;
      uint64_t v350 = v260;
      unint64_t v351 = v261;
      unint64_t v334 = v261;
      sub_1D7860790(v253, v255);
      uint64_t v262 = v329;
      unint64_t v263 = v328;
      sub_1D7860790(v329, v328);
      sub_1D7860790(v309, v308);
      long long v341 = v257;
      sub_1D786E9D8(v257, *((unint64_t *)&v257 + 1));
      sub_1D786E9D8(v258, v259);
      sub_1D7885ADC();
      v264 = v332;
      v265 = v331;
      uint64_t v266 = sub_1D7A9BA78();
      if (v265)
      {
        sub_1D78607E8(v262, v263);
        unint64_t v268 = v308;
        sub_1D78607E8(v309, v308);
        sub_1D7871BDC(0, 0xF000000000000000);
        sub_1D7871BDC(v341, *((unint64_t *)&v341 + 1));
        sub_1D7871BDC(0, 0xF000000000000000);
        sub_1D7871BDC(v253, v255);
        sub_1D78607E8(v253, v255);
        sub_1D78607E8(v262, v263);
        sub_1D78607E8(v340, v334);
        (*(void (**)(char *, uint64_t))(v324 + 8))(v264, v325);
        (*(void (**)(char *, uint64_t))(v306 + 8))(v337, v307);
        sub_1D78607E8(v297, (unint64_t)v305);
        sub_1D7871BDC(v352, *((unint64_t *)&v352 + 1));
        uint64_t v179 = v265;
        uint64_t v182 = v313;
        unint64_t v176 = v312;
        unint64_t v180 = v268;
        uint64_t v181 = v309;
        goto LABEL_19;
      }
      uint64_t v269 = v267;
      uint64_t v270 = v253;
      v271 = (uint64_t *)v255;
      uint64_t v272 = v266;
      sub_1D78607E8(v340, v334);
      uint64_t v273 = (uint64_t)v322;
      uint64_t v274 = v335;
      v299(v322, v339, v335);
      sub_1D7860790(v272, v269);
      sub_1D7924110(v273, v272, v269);
      uint64_t v340 = v272;
      uint64_t v339 = v269;
      sub_1D78607E8(v272, v269);
      v298(v273, v274);
      Swift::Bool v275 = shouldIncludeUnencryptedData()();
      uint64_t v276 = v327;
      uint64_t v277 = *(void *)(v327 - 8);
      if (v275)
      {
        v278 = v319;
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v327 - 8) + 16))(v319, v326, v327);
        uint64_t v279 = 0;
      }
      else
      {
        uint64_t v279 = 1;
        v278 = v319;
      }
      uint64_t v280 = v329;
      unint64_t v281 = v328;
      v282 = v271;
      uint64_t v323 = v270;
      v330 = v271;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v277 + 56))(v278, v279, 1, v276);
      *(void *)&long long v342 = v280;
      *((void *)&v342 + 1) = v281;
      uint64_t v329 = v280;
      unint64_t v328 = v281;
      v283 = v278;
      uint64_t v284 = v309;
      unint64_t v285 = v308;
      uint64_t v343 = v309;
      unint64_t v344 = v308;
      long long v345 = v296;
      uint64_t v286 = v341;
      long long v346 = v341;
      unint64_t v287 = *((void *)&v341 + 1);
      long long v347 = v296;
      uint64_t v348 = v270;
      v349 = v282;
      uint64_t v288 = v317;
      uint64_t v289 = (uint64_t)v314;
      (*(void (**)(char *, char *, uint64_t))(v317 + 16))(v314, v283, v320);
      sub_1D7860790(v280, v281);
      sub_1D7860790(v284, v285);
      sub_1D786E9D8(0, 0xF000000000000000);
      sub_1D786E9D8(v286, v287);
      sub_1D786E9D8(0, 0xF000000000000000);
      uint64_t v290 = v323;
      unint64_t v291 = (unint64_t)v330;
      sub_1D786E9D8(v323, (unint64_t)v330);
      HPKEEnvelope.init(params:data:unencryptedData:)(&v342, v340, v339, v289, v327, v315);
      sub_1D78607E8(v297, (unint64_t)v305);

      uint64_t v292 = v329;
      unint64_t v293 = v328;
      sub_1D78607E8(v329, v328);
      uint64_t v294 = v309;
      unint64_t v295 = v308;
      sub_1D78607E8(v309, v308);
      sub_1D7871BDC(0, 0xF000000000000000);
      sub_1D7871BDC(v341, *((unint64_t *)&v341 + 1));
      sub_1D7871BDC(0, 0xF000000000000000);
      sub_1D7871BDC(v290, v291);
      sub_1D78607E8(v290, v291);
      sub_1D78607E8(v294, v295);
      sub_1D78607E8(v292, v293);
      sub_1D7871BDC(v313, v312);
      (*(void (**)(char *, uint64_t))(v288 + 8))(v319, v320);
      (*(void (**)(char *, uint64_t))(v324 + 8))(v332, v325);
      (*(void (**)(char *, uint64_t))(v306 + 8))(v337, v307);
      sub_1D7871BDC(v352, *((unint64_t *)&v352 + 1));
      break;
    case 3uLL:
      *(void *)((char *)&v342 + 6) = 0;
      *(void *)&long long v342 = 0;
      v200 = &v342;
      goto LABEL_27;
    default:
      *(void *)&long long v342 = v195;
      WORD4(v342) = v196;
      BYTE10(v342) = BYTE2(v196);
      BYTE11(v342) = BYTE3(v196);
      BYTE12(v342) = BYTE4(v196);
      BYTE13(v342) = BYTE5(v196);
      v200 = (long long *)((char *)&v342 + BYTE6(v196));
LABEL_27:
      uint64_t v329 = sub_1D78D0C88((uint64_t)&v342, (uint64_t)v200);
      unint64_t v328 = v208;
      sub_1D78607E8(v197, v198);
      uint64_t v205 = *((void *)&v341 + 1);
      goto LABEL_49;
  }
}

unint64_t sub_1D7881C14()
{
  return 0xD000000000000018;
}

void HPKESuiteKwV1.openMessageHPKE<A>(envelope:authenticationContext:decoder:)(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = a1[12];
  uint64_t v31 = a1[13];
  unint64_t v6 = a1[2];
  uint64_t v8 = a1[3];
  unint64_t v7 = a1[4];
  uint64_t v10 = a1[5];
  unint64_t v9 = a1[6];
  uint64_t v12 = a1[7];
  unint64_t v11 = a1[8];
  uint64_t v13 = a1[9];
  unint64_t v29 = a1[10];
  unint64_t v30 = a1[14];
  uint64_t v14 = a1[11];
  v38[0] = a1[1];
  v38[1] = v6;
  v38[2] = v8;
  v38[3] = v7;
  v38[4] = v10;
  v38[5] = v9;
  v38[6] = v12;
  v38[7] = v11;
  _OWORD v38[8] = v13;
  v38[9] = v29;
  v38[10] = v14;
  v38[11] = v5;
  unint64_t v34 = v6;
  uint64_t v35 = v38[0];
  sub_1D7860790(v38[0], v6);
  uint64_t v36 = v8;
  uint64_t v15 = v8;
  unint64_t v16 = v7;
  sub_1D7860790(v15, v7);
  sub_1D786E9D8(v10, v9);
  sub_1D786E9D8(v12, v11);
  sub_1D786E9D8(v13, v29);
  uint64_t v39 = v14;
  unint64_t v37 = v5;
  sub_1D786E9D8(v14, v5);
  uint64_t v17 = HPKESuiteKwV1.openMessageHPKEWithoutDecoding(data:params:authenticationContext:)(v31, v30, v38, a2);
  if (v33)
  {
    sub_1D78607E8(v35, v34);
    sub_1D78607E8(v36, v7);
    sub_1D7871BDC(v10, v9);
    sub_1D7871BDC(v12, v11);
    sub_1D7871BDC(v13, v29);
    sub_1D7871BDC(v39, v5);
    LOWORD(v38[0]) = 0;
    id v23 = v33;
    unint64_t v24 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v33, 0, 0xE000000000000000, (__int16 *)v38, 0, v24, 0xD000000000000051, 0x80000001D7ABE640, v25, 0xD000000000000038, 0x80000001D7ABEA70, 639);
    swift_willThrow();
  }
  else
  {
    uint64_t v19 = (uint64_t)v17;
    unint64_t v20 = v18;
    sub_1D78607E8(v35, v34);
    sub_1D78607E8(v36, v16);
    sub_1D7871BDC(v10, v9);
    sub_1D7871BDC(v12, v11);
    sub_1D7871BDC(v13, v29);
    sub_1D7871BDC(v39, v37);
    uint64_t v21 = a3[3];
    uint64_t v22 = a3[4];
    __swift_project_boxed_opaque_existential_1(a3, v21);
    (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 8))(a4, v19, v20, a4, a5, v21, v22);
    sub_1D78607E8(v19, v20);
  }
}

void *HPKESuiteKwV1.openMessageHPKEWithoutDecoding(data:params:authenticationContext:)(uint64_t a1, unint64_t a2, uint64_t *a3, void *a4)
{
  id v303 = a4;
  unint64_t v288 = a2;
  uint64_t v287 = a1;
  uint64_t v331 = *MEMORY[0x1E4F143B8];
  uint64_t v301 = sub_1D7A9BB58();
  uint64_t v300 = *(void *)(v301 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v301, v5, v6, v7, v8, v9, v10, v11);
  uint64_t v297 = (char *)&v284 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12, v14, v15, v16, v17, v18, v19, v20);
  uint64_t v306 = (char *)&v284 - v21;
  uint64_t v299 = sub_1D7A9BA18();
  uint64_t v298 = *(void *)(v299 - 8);
  uint64_t v29 = MEMORY[0x1F4188790](v299, v22, v23, v24, v25, v26, v27, v28);
  uint64_t v290 = (char *)&v284 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v29, v31, v32, v33, v34, v35, v36, v37);
  uint64_t v289 = (char *)&v284 - v38;
  uint64_t v296 = sub_1D7A9B908();
  uint64_t v295 = *(void *)(v296 - 8);
  uint64_t v46 = MEMORY[0x1F4188790](v296, v39, v40, v41, v42, v43, v44, v45);
  uint64_t v294 = (char *)&v284 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v46, v48, v49, v50, v51, v52, v53, v54);
  uint64_t v305 = (uint64_t)&v284 - v55;
  uint64_t v293 = sub_1D7A9BAB8();
  uint64_t v286 = *(void *)(v293 - 8);
  uint64_t v63 = MEMORY[0x1F4188790](v293, v56, v57, v58, v59, v60, v61, v62);
  uint64_t v292 = (char *)&v284 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = MEMORY[0x1F4188790](v63, v65, v66, v67, v68, v69, v70, v71);
  unint64_t v291 = (char *)&v284 - v73;
  MEMORY[0x1F4188790](v72, v74, v75, v76, v77, v78, v79, v80);
  unint64_t v285 = (char *)&v284 - v81;
  os_log_t v313 = (os_log_t)sub_1D7A9BD88();
  Class isa = v313[-1].isa;
  MEMORY[0x1F4188790](v313, v82, v83, v84, v85, v86, v87, v88);
  uint64_t v315 = (char *)&v284 - ((v89 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v310 = sub_1D7A9B838();
  uint64_t v309 = *(void *)(v310 - 8);
  MEMORY[0x1F4188790](v310, v90, v91, v92, v93, v94, v95, v96);
  unint64_t v308 = (char *)&v284 - ((v97 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = sub_1D7A9B5F8();
  uint64_t v324 = *(void *)(v98 - 8);
  uint64_t v106 = MEMORY[0x1F4188790](v98, v99, v100, v101, v102, v103, v104, v105);
  v302 = (char *)&v284 - ((v107 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = MEMORY[0x1F4188790](v106, v108, v109, v110, v111, v112, v113, v114);
  unint64_t v312 = (char *)&v284 - v116;
  uint64_t v124 = MEMORY[0x1F4188790](v115, v117, v118, v119, v120, v121, v122, v123);
  v321 = (char *)&v284 - v125;
  uint64_t v133 = MEMORY[0x1F4188790](v124, v126, v127, v128, v129, v130, v131, v132);
  uint64_t v311 = (char *)&v284 - v134;
  uint64_t v142 = MEMORY[0x1F4188790](v133, v135, v136, v137, v138, v139, v140, v141);
  v304 = (char *)&v284 - v143;
  uint64_t v151 = MEMORY[0x1F4188790](v142, v144, v145, v146, v147, v148, v149, v150);
  unint64_t v153 = (char *)&v284 - v152;
  MEMORY[0x1F4188790](v151, v154, v155, v156, v157, v158, v159, v160);
  uint64_t v162 = (char *)&v284 - v161;
  uint64_t v164 = *a3;
  unint64_t v163 = a3[1];
  uint64_t v165 = a3[4];
  unint64_t v166 = a3[5];
  uint64_t v317 = a3[10];
  unint64_t v318 = a3[11];
  long long v330 = xmmword_1D7AA0AB0;
  unint64_t v319 = v163;
  uint64_t v320 = v164;
  if (v166 >> 60 == 15)
  {
    sub_1D7860790(v164, v163);
    if (qword_1EBDF9DC8 != -1) {
      swift_once();
    }
    uint64_t v167 = __swift_project_value_buffer(v98, (uint64_t)qword_1EBDFBE70);
    swift_beginAccess();
    uint64_t v168 = *(void (**)(char *, uint64_t, uint64_t))(v324 + 16);
    v168(v153, v167, v98);
    uint64_t v169 = sub_1D7A9B5D8();
    os_log_type_t v170 = sub_1D7A9C748();
    BOOL v171 = os_log_type_enabled(v169, v170);
    uint64_t v172 = v322;
    if (v171)
    {
      SecRandomRef v173 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)SecRandomRef v173 = 0;
      _os_log_impl(&dword_1D7853000, v169, v170, "openMessageHPKE: pkISm is empty", v173, 2u);
      MEMORY[0x1D947D740](v173, -1, -1);
    }

    uint64_t v174 = v324;
    int64_t v175 = *(void (**)(char *, uint64_t))(v324 + 8);
    v175(v153, v98);
  }
  else
  {
    *(void *)&long long v330 = v165;
    *((void *)&v330 + 1) = v166;
    sub_1D786E9D8(v165, v166);
    sub_1D786E9D8(v165, v166);
    sub_1D786E9D8(v165, v166);
    sub_1D7860790(v164, v163);
    if (qword_1EBDF9DC8 != -1) {
      swift_once();
    }
    uint64_t v176 = __swift_project_value_buffer(v98, (uint64_t)qword_1EBDFBE70);
    swift_beginAccess();
    uint64_t v323 = *(void (**)(char *, uint64_t, uint64_t))(v324 + 16);
    v323(v162, v176, v98);
    sub_1D7860790(v165, v166);
    uint64_t v177 = sub_1D7A9B5D8();
    os_log_type_t v178 = sub_1D7A9C748();
    if (os_log_type_enabled(v177, v178))
    {
      uint64_t v284 = v98;
      uint64_t v179 = (uint8_t *)swift_slowAlloc();
      uint64_t v180 = swift_slowAlloc();
      v328[0] = v180;
      *(_DWORD *)uint64_t v179 = 136315138;
      uint64_t v316 = (void (*)(char *, uint64_t))(v179 + 4);
      uint64_t v181 = sub_1D7A9B008();
      uint64_t v326 = sub_1D7923300(v181, v182, v328);
      sub_1D7A9C9E8();
      uint64_t v98 = v284;
      swift_bridgeObjectRelease();
      sub_1D7871BDC(v165, v166);
      sub_1D7871BDC(v165, v166);
      _os_log_impl(&dword_1D7853000, v177, v178, "openMessageHPKE: envelope.params.pkISm = %s", v179, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D947D740](v180, -1, -1);
      uint64_t v183 = v179;
      uint64_t v164 = v320;
      MEMORY[0x1D947D740](v183, -1, -1);

      sub_1D7871BDC(v165, v166);
    }
    else
    {
      sub_1D7871BDC(v165, v166);
      sub_1D7871BDC(v165, v166);
      sub_1D78607E8(v165, v166);
    }
    uint64_t v174 = v324;
    int64_t v175 = *(void (**)(char *, uint64_t))(v324 + 8);
    v175(v162, v98);
    uint64_t v172 = v322;
    uint64_t v168 = v323;
  }
  unint64_t v184 = v318;
  uint64_t v323 = v168;
  uint64_t v316 = v175;
  if (v318 >> 60 != 15)
  {
    size_t v185 = (uint64_t *)(v172 + *(int *)(type metadata accessor for HPKESuiteKwV1() + 24));
    uint64_t v187 = *v185;
    unint64_t v186 = v185[1];
    sub_1D786E9D8(v317, v184);
    sub_1D7860790(v187, v186);
    sub_1D7885664(&qword_1EA8424A0, MEMORY[0x1E4F25170]);
    sub_1D7A9B828();
    switch(v186 >> 62)
    {
      case 1uLL:
        if (v187 >> 32 < (int)v187) {
          __break(1u);
        }
        sub_1D7860790(v187, v186);
        uint64_t v192 = (uint64_t)v315;
        uint64_t v193 = v314;
        sub_1D78D117C((int)v187, v187 >> 32, v186 & 0x3FFFFFFFFFFFFFFFLL, (uint64_t)v315);
        v314 = v193;
        sub_1D78607E8(v187, v186);
        unint64_t v184 = v318;
        os_log_t v191 = v313;
        break;
      case 2uLL:
        uint64_t v188 = *(void *)(v187 + 16);
        uint64_t v189 = *(void *)(v187 + 24);
        sub_1D7860790(v187, v186);
        swift_retain();
        swift_retain();
        id v190 = v314;
        sub_1D78D117C(v188, v189, v186 & 0x3FFFFFFFFFFFFFFFLL, (uint64_t)v315);
        v314 = v190;
        if (v190)
        {
          swift_release();
          swift_release();
          __break(1u);
          JUMPOUT(0x1D7883BE8);
        }
        swift_release();
        swift_release();
        sub_1D78607E8(v187, v186);
        unint64_t v184 = v318;
        os_log_t v191 = v313;
        uint64_t v192 = (uint64_t)v315;
        break;
      case 3uLL:
        memset(v328, 0, 14);
        goto LABEL_19;
      default:
        v328[0] = v187;
        LOWORD(v328[1]) = v186;
        BYTE2(v328[1]) = BYTE2(v186);
        BYTE3(v328[1]) = BYTE3(v186);
        BYTE4(v328[1]) = BYTE4(v186);
        BYTE5(v328[1]) = BYTE5(v186);
LABEL_19:
        uint64_t v192 = (uint64_t)v315;
        os_log_t v191 = v313;
        sub_1D7A9B808();
        sub_1D78607E8(v187, v186);
        break;
    }
    v194 = v308;
    sub_1D7A9B818();
    (*((void (**)(uint64_t, os_log_t))isa + 1))(v192, v191);
    sub_1D78607E8(v187, v186);
    sub_1D7885664(&qword_1EA8424A8, MEMORY[0x1E4F24F80]);
    uint64_t v195 = v310;
    uint64_t v196 = sub_1D7A9BD78();
    uint64_t v198 = sub_1D78D1370(v196, v197);
    swift_bridgeObjectRelease();
    uint64_t v199 = sub_1D78D1EB0(v198);
    unint64_t v201 = v200;
    swift_release();
    (*(void (**)(char *, uint64_t))(v309 + 8))(v194, v195);
    uint64_t v202 = v317;
    if (sub_1D788583C(v199, v201, v317, v184))
    {
      uint64_t v172 = v322;
      int64_t v175 = v316;
      uint64_t v168 = v323;
      if (qword_1EBDF9DC8 != -1) {
        swift_once();
      }
      uint64_t v203 = __swift_project_value_buffer(v98, (uint64_t)qword_1EBDFBE70);
      swift_beginAccess();
      v168(v311, v203, v98);
      uint64_t v204 = sub_1D7A9B5D8();
      os_log_type_t v205 = sub_1D7A9C748();
      if (os_log_type_enabled(v204, v205))
      {
        uint64_t v206 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v206 = 0;
        _os_log_impl(&dword_1D7853000, v204, v205, "openMessageHPKE: info matches envelope infoHash", v206, 2u);
        MEMORY[0x1D947D740](v206, -1, -1);

        sub_1D78607E8(v199, v201);
        sub_1D7871BDC(v317, v318);
      }
      else
      {
        sub_1D7871BDC(v317, v184);
        sub_1D78607E8(v199, v201);
      }
      uint64_t v174 = v324;
      v175(v311, v98);
      uint64_t v164 = v320;
    }
    else
    {
      uint64_t v168 = v323;
      if (qword_1EBDF9DC8 != -1) {
        swift_once();
      }
      __swift_project_value_buffer(v98, (uint64_t)qword_1EBDFBE70);
      swift_beginAccess();
      uint64_t v207 = v304;
      ((void (*)(void))v168)();
      sub_1D786E9D8(v202, v184);
      sub_1D7860790(v199, v201);
      sub_1D786E9D8(v202, v184);
      sub_1D7860790(v199, v201);
      unint64_t v208 = sub_1D7A9B5D8();
      os_log_type_t v209 = sub_1D7A9C758();
      if (os_log_type_enabled(v208, v209))
      {
        uint64_t v210 = swift_slowAlloc();
        os_log_t v313 = v208;
        uint64_t v211 = v210;
        uint64_t v315 = (char *)swift_slowAlloc();
        v328[0] = (uint64_t)v315;
        *(_DWORD *)uint64_t v211 = 136315394;
        uint64_t v212 = sub_1D7A9B008();
        uint64_t v284 = v98;
        uint64_t v326 = sub_1D7923300(v212, v213, v328);
        sub_1D7A9C9E8();
        swift_bridgeObjectRelease();
        sub_1D7871BDC(v202, v184);
        sub_1D7871BDC(v202, v184);
        *(_WORD *)(v211 + 12) = 2080;
        uint64_t v214 = sub_1D7A9B008();
        uint64_t v326 = sub_1D7923300(v214, v215, v328);
        uint64_t v168 = v323;
        sub_1D7A9C9E8();
        uint64_t v98 = v284;
        swift_bridgeObjectRelease();
        sub_1D78607E8(v199, v201);
        sub_1D78607E8(v199, v201);
        os_log_t v216 = v313;
        _os_log_impl(&dword_1D7853000, v313, v209, "openMessageHPKE: info does not match envelope's infoHash! envelope infoHash = %s, computed infoHash = %s", (uint8_t *)v211, 0x16u);
        uint64_t v217 = (uint64_t)v315;
        swift_arrayDestroy();
        MEMORY[0x1D947D740](v217, -1, -1);
        MEMORY[0x1D947D740](v211, -1, -1);

        sub_1D78607E8(v199, v201);
        sub_1D7871BDC(v317, v184);
        uint64_t v174 = v324;
        uint64_t v218 = v304;
      }
      else
      {
        sub_1D7871BDC(v202, v184);
        sub_1D78607E8(v199, v201);
        sub_1D7871BDC(v202, v184);
        sub_1D7871BDC(v202, v184);
        sub_1D78607E8(v199, v201);
        sub_1D78607E8(v199, v201);

        uint64_t v174 = v324;
        uint64_t v218 = v207;
      }
      int64_t v175 = v316;
      v316(v218, v98);
      uint64_t v164 = v320;
      uint64_t v172 = v322;
    }
  }
  long long v329 = xmmword_1D7AA0AC0;
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v219 = __swift_project_value_buffer(v98, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  uint64_t v324 = v219;
  unint64_t v318 = v174 + 16;
  v168(v321, v219, v98);
  uint64_t v220 = sub_1D7A9B5D8();
  os_log_type_t v221 = sub_1D7A9C748();
  if (os_log_type_enabled(v220, v221))
  {
    unint64_t v222 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v222 = 0;
    _os_log_impl(&dword_1D7853000, v220, v221, "openMessageHPKE: using HPKE library", v222, 2u);
    MEMORY[0x1D947D740](v222, -1, -1);
  }

  v223 = (char *)(v174 + 8);
  v175(v321, v98);
  uint64_t v224 = type metadata accessor for HPKESuiteKwV1();
  uint64_t v225 = v172 + *(int *)(v224 + 32);
  int v226 = *(unsigned __int8 *)(v225 + 16);
  if (v226 == 255)
  {
    LOWORD(v326) = 0;
    unint64_t v237 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    uint64_t v236 = (void *)swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000016, 0x80000001D7ABEAB0, (__int16 *)&v326, 0, v237, 0xD000000000000051, 0x80000001D7ABE640, v238, 0xD000000000000042, 0x80000001D7ABEAD0, 694);
    swift_willThrow();
    goto LABEL_48;
  }
  uint64_t v317 = v224;
  v321 = v223;
  uint64_t v228 = *(void **)v225;
  uint64_t v227 = *(char **)(v225 + 8);
  uint64_t v229 = v312;
  uint64_t v230 = v324;
  v231 = (uint64_t (*)(char *, uint64_t, uint64_t))v323;
  v323(v312, v324, v98);
  if (v226)
  {
    sub_1D7885B30(v228, v227, v226);
    sub_1D7885B30(v228, v227, v226);
    sub_1D7924130();
    uint64_t v239 = v316;
    uint64_t v315 = v227;
    v316(v229, v98);
    uint64_t v240 = v302;
    uint64_t v241 = v231(v302, v230, v98);
    MEMORY[0x1F4188790](v241, v242, v243, v244, v245, v246, v247, v248);
    unint64_t v249 = v319;
    Logger.cryptoParam(_:)(sub_1D7885B58);
    v239(v240, v98);
    uint64_t v250 = v315;
    uint64_t v251 = v306;
    uint64_t v252 = v314;
    sub_1D7A9BB28();
    uint64_t v236 = v252;
    if (v252)
    {
      sub_1D7885B64(v228, v250, v226);
      uint64_t v164 = v320;
      goto LABEL_48;
    }
    uint64_t v284 = v98;
    (*(void (**)(char *, char *, uint64_t))(v300 + 16))(v297, v251, v301);
    uint64_t v259 = v317;
    uint64_t v260 = v322;
    (*(void (**)(char *, uint64_t, uint64_t))(v298 + 16))(v290, v322 + *(int *)(v317 + 20), v299);
    unint64_t v261 = (uint64_t *)(v260 + *(int *)(v259 + 24));
    uint64_t v262 = *v261;
    unint64_t v263 = v261[1];
    sub_1D7860790(v320, v249);
    sub_1D7860790(v262, v263);
    uint64_t v264 = v301;
    sub_1D7A9BA98();
    sub_1D7885B64(v228, v250, v226);
    (*(void (**)(char *, uint64_t))(v300 + 8))(v306, v264);
    uint64_t v269 = &v324;
  }
  else
  {
    sub_1D7885B48(v228, v227, 0);
    sub_1D7885B48(v228, v227, 0);
    sub_1D791F220();
    v316(v229, v98);
    sub_1D7885B30(v228, v227, v226);
    id v232 = v303;
    id v233 = v303;
    uint64_t v234 = v305;
    uint64_t v235 = v314;
    sub_1D7883BF8(v228, v232, v305);
    uint64_t v236 = v235;
    if (v235)
    {
      sub_1D7885B64(v228, v227, v226);
      sub_1D7885B64(v228, v227, v226);
      uint64_t v164 = v320;
LABEL_48:
      LOWORD(v327[0]) = 275;
      id v265 = v236;
      unint64_t v266 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v236, 0xD000000000000028, 0x80000001D7ABEB20, (__int16 *)v327, 0, v266, 0xD000000000000051, 0x80000001D7ABE640, v267, 0xD000000000000042, 0x80000001D7ABEAD0, 703);
      swift_willThrow();
      sub_1D78607E8(v164, v319);

      goto LABEL_49;
    }
    uint64_t v284 = v98;
    (*(void (**)(char *, uint64_t, uint64_t))(v295 + 16))(v294, v234, v296);
    uint64_t v253 = v317;
    uint64_t v254 = v322;
    (*(void (**)(char *, uint64_t, uint64_t))(v298 + 16))(v289, v322 + *(int *)(v317 + 20), v299);
    unint64_t v255 = (uint64_t *)(v254 + *(int *)(v253 + 24));
    uint64_t v256 = *v255;
    unint64_t v257 = v255[1];
    sub_1D7860790(v320, v319);
    sub_1D7860790(v256, v257);
    uint64_t v258 = v296;
    sub_1D7A9BA98();
    sub_1D7885B64(v228, v227, v226);
    sub_1D7885B64(v228, v227, v226);
    (*(void (**)(uint64_t, uint64_t))(v295 + 8))(v305, v258);
    uint64_t v269 = (uint64_t *)&v323;
  }
  uint64_t v270 = v286;
  v271 = v285;
  (*(void (**)(char *, void, uint64_t))(v286 + 32))(v285, *(v269 - 32), v293);
  uint64_t v272 = (uint64_t)v312;
  uint64_t v273 = v284;
  v323(v312, v324, v284);
  uint64_t v274 = v287;
  unint64_t v275 = v288;
  sub_1D7860790(v287, v288);
  sub_1D79243C8();
  sub_1D78607E8(v274, v275);
  v316((char *)v272, v273);
  v327[0] = v274;
  v327[1] = v275;
  swift_beginAccess();
  long long v325 = v330;
  sub_1D7885ADC();
  uint64_t v276 = sub_1D7A9BAA8();
  uint64_t v277 = v320;
  uint64_t v236 = (void *)v276;
  uint64_t v279 = v278;
  sub_1D7871BDC(v329, *((unint64_t *)&v329 + 1));
  *(void *)&long long v329 = v236;
  *((void *)&v329 + 1) = v279;
  v323((char *)v272, v324, v273);
  sub_1D791F438(v272, (uint64_t)&v329);
  v316((char *)v272, v273);
  (*(void (**)(char *, uint64_t))(v270 + 8))(v271, v293);
  unint64_t v280 = *((void *)&v329 + 1);
  if (*((void *)&v329 + 1) >> 60 != 15)
  {
    uint64_t v236 = (void *)v329;
    long long v283 = v330;
    sub_1D7860790(v329, *((unint64_t *)&v329 + 1));
    sub_1D78607E8(v283, *((unint64_t *)&v283 + 1));
    sub_1D78607E8(v277, v319);
    sub_1D7871BDC((uint64_t)v236, v280);
    return v236;
  }
  LOWORD(v327[0]) = 0;
  unint64_t v281 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
  sub_1D7860544();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000017, 0x80000001D7ABEB50, (__int16 *)v327, 0, v281, 0xD000000000000051, 0x80000001D7ABE640, v282, 0xD000000000000042, 0x80000001D7ABEAD0, 707);
  swift_willThrow();
  sub_1D78607E8(v277, v319);
LABEL_49:
  sub_1D78607E8(v330, *((unint64_t *)&v330 + 1));
  sub_1D7871BDC(v329, *((unint64_t *)&v329 + 1));
  return v236;
}

void sub_1D7883BF8(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  id v73 = a1;
  uint64_t v71 = a3;
  uint64_t v4 = sub_1D7A9B908();
  uint64_t v72 = *(void *)(v4 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v4, v5, v6, v7, v8, v9, v10, v11);
  uint64_t v14 = (char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x1F4188790](v12, v15, v16, v17, v18, v19, v20, v21);
  uint64_t v24 = (char *)&v69 - v23;
  MEMORY[0x1F4188790](v22, v25, v26, v27, v28, v29, v30, v31);
  uint64_t v33 = (char *)&v69 - v32;
  uint64_t v34 = sub_1D7A9B5F8();
  uint64_t v35 = *(void *)(v34 - 8);
  uint64_t v43 = MEMORY[0x1F4188790](v34, v36, v37, v38, v39, v40, v41, v42);
  uint64_t v45 = (char *)&v69 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v43, v46, v47, v48, v49, v50, v51, v52);
  uint64_t v54 = (char *)&v69 - v53;
  if (a2)
  {
    uint64_t v69 = v4;
    uint64_t v70 = v24;
    uint64_t v55 = qword_1EBDF9DC8;
    id v56 = a2;
    if (v55 != -1) {
      swift_once();
    }
    uint64_t v57 = __swift_project_value_buffer(v34, (uint64_t)qword_1EBDFBE70);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v45, v57, v34);
    uint64_t v58 = sub_1D7A9B5D8();
    os_log_type_t v59 = sub_1D7A9C748();
    if (os_log_type_enabled(v58, v59))
    {
      uint64_t v60 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v60 = 0;
      _os_log_impl(&dword_1D7853000, v58, v59, "Instantiating SecureEnclave PrivateKey with an authentication context", v60, 2u);
      MEMORY[0x1D947D740](v60, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v35 + 8))(v45, v34);
    id v61 = v73;
    uint64_t v62 = v74;
    sub_1D7A9B8D8();
    if (v62)
    {

      return;
    }
    sub_1D7A9B8E8();
    uint64_t v68 = v70;
    sub_1D7A9B8F8();

    uint64_t v4 = v69;
    (*(void (**)(char *, uint64_t))(v72 + 8))(v33, v69);
    uint64_t v14 = v68;
    goto LABEL_15;
  }
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v63 = __swift_project_value_buffer(v34, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v54, v63, v34);
  uint64_t v64 = sub_1D7A9B5D8();
  os_log_type_t v65 = sub_1D7A9C748();
  if (os_log_type_enabled(v64, v65))
  {
    uint64_t v66 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v66 = 0;
    _os_log_impl(&dword_1D7853000, v64, v65, "Instantiating SecureEnclave PrivateKey with no authentication context", v66, 2u);
    MEMORY[0x1D947D740](v66, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v35 + 8))(v54, v34);
  uint64_t v67 = v74;
  sub_1D7A9B8D8();
  if (!v67) {
LABEL_15:
  }
    (*(void (**)(uint64_t, char *, uint64_t))(v72 + 32))(v71, v14, v4);
}

uint64_t sub_1D7884084()
{
  return 0;
}

uint64_t sub_1D78841CC(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return HPKESuiteKwV1.sealMessageAEAD<A>(message:)(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1D78841E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return HPKESuiteKwV1.openMessageAEAD(cipherText:key:aad:)(a1, a2, a3, a4, a5);
}

void sub_1D78841FC(uint64_t a1@<X0>, void *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
}

void sub_1D7884214(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
}

uint64_t static AEADScheme_AES_128_GCM.id.getter()
{
  return sub_1D78D1EB0((uint64_t)&unk_1F2F157A0);
}

uint64_t static AEADScheme_AES_128_GCM.name.getter()
{
  return 0x2D3832312D534541;
}

uint64_t static AEADScheme_AES_128_GCM.nK.getter()
{
  return 16;
}

uint64_t static AEADScheme_AES_128_GCM.nN.getter()
{
  return 12;
}

uint64_t static AEADScheme_AES_128_GCM.tN.getter()
{
  return 16;
}

uint64_t static AEADScheme_AES_128_GCM.seal(key:nonce:aad:pt:)(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7, unint64_t a8)
{
  return sub_1D78861E8(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t static AEADScheme_AES_128_GCM.open(key:nonce:aad:ct:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8)
{
  return sub_1D7886EAC(a1, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t sub_1D78842A0(uint64_t a1, unint64_t a2)
{
  return 0xD000000000000010;
}

uint64_t sub_1D78843A4(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7, unint64_t a8)
{
  return sub_1D78861E8(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1D78843BC(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8)
{
  return sub_1D7886EAC(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t type metadata accessor for HPKEEncryptedMessagePlain.CodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t sub_1D78843EC()
{
  unint64_t result = qword_1EA8425B8;
  if (!qword_1EA8425B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8425B8);
  }
  return result;
}

unint64_t sub_1D7884440()
{
  unint64_t result = qword_1EA8425D0;
  if (!qword_1EA8425D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8425D0);
  }
  return result;
}

unint64_t sub_1D7884494()
{
  unint64_t result = qword_1EA8425E8;
  if (!qword_1EA8425E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8425E8);
  }
  return result;
}

uint64_t sub_1D78844E8(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1D7884560()
{
  unint64_t result = qword_1EA842600;
  if (!qword_1EA842600)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA842600);
  }
  return result;
}

unint64_t sub_1D78845B4()
{
  unint64_t result = qword_1EA842608;
  if (!qword_1EA842608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA842608);
  }
  return result;
}

void sub_1D7884608(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void (*a13)(void), void (*a14)(uint64_t, uint64_t))
{
  if (a2 >> 60 != 15)
  {
    a13();
    ((void (*)(uint64_t, uint64_t))a13)(a3, a4);
    a14(a5, a6);
    a14(a7, a8);
    a14(a9, a10);
    a14(a11, a12);
  }
}

double sub_1D78846FC(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 1;
  return result;
}

uint64_t type metadata accessor for HPKEEncryptedMessageWithKeyWrap()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1D7884734(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  uint64_t v64 = a5;
  uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = ~v6;
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v9 = -v6;
  uint64_t v57 = a1;
  uint64_t v58 = a1 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  uint64_t v59 = v7;
  uint64_t v60 = 0;
  uint64_t v61 = v10 & v8;
  uint64_t v62 = a2;
  uint64_t v63 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1D7884C40(&v52);
  uint64_t v11 = *((void *)&v52 + 1);
  if (!*((void *)&v52 + 1))
  {
LABEL_25:
    swift_release();
    swift_bridgeObjectRelease();
    sub_1D78907D0();
    return swift_release();
  }
  uint64_t v12 = v52;
  uint64_t v13 = v54;
  uint64_t v51 = v53;
  uint64_t v15 = v55;
  uint64_t v14 = v56;
  uint64_t v16 = (void *)*v64;
  unint64_t v18 = sub_1D7A18684(v52, *((uint64_t *)&v52 + 1));
  uint64_t v19 = v16[2];
  BOOL v20 = (v17 & 1) == 0;
  uint64_t v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  char v22 = v17;
  if (v16[3] >= v21)
  {
    if ((a4 & 1) == 0) {
      sub_1D797309C();
    }
    goto LABEL_11;
  }
  sub_1D796FC0C(v21, a4 & 1);
  uint64_t v23 = sub_1D7A18684(v12, v11);
  if ((v22 & 1) == (v24 & 1))
  {
    unint64_t v18 = v23;
LABEL_11:
    uint64_t v25 = (void *)*v64;
    if (v22)
    {
      swift_bridgeObjectRelease();
      uint64_t v26 = (void *)(v25[7] + 32 * v18);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *uint64_t v26 = v51;
      v26[1] = v13;
LABEL_15:
      v26[2] = v15;
      v26[3] = v14;
LABEL_18:
      while (1)
      {
        sub_1D7884C40(&v52);
        uint64_t v36 = *((void *)&v52 + 1);
        if (!*((void *)&v52 + 1)) {
          goto LABEL_25;
        }
        uint64_t v37 = v52;
        uint64_t v38 = v53;
        uint64_t v39 = v54;
        uint64_t v15 = v55;
        uint64_t v14 = v56;
        uint64_t v40 = (void *)*v64;
        unint64_t v42 = sub_1D7A18684(v52, *((uint64_t *)&v52 + 1));
        uint64_t v43 = v40[2];
        BOOL v44 = (v41 & 1) == 0;
        uint64_t v45 = v43 + v44;
        if (__OFADD__(v43, v44)) {
          goto LABEL_26;
        }
        char v46 = v41;
        if (v40[3] < v45)
        {
          sub_1D796FC0C(v45, 1);
          uint64_t v47 = sub_1D7A18684(v37, v36);
          if ((v46 & 1) != (v48 & 1)) {
            goto LABEL_28;
          }
          unint64_t v42 = v47;
        }
        uint64_t v49 = (void *)*v64;
        if (v46)
        {
          swift_bridgeObjectRelease();
          uint64_t v26 = (void *)(v49[7] + 32 * v42);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          *uint64_t v26 = v38;
          v26[1] = v39;
          goto LABEL_15;
        }
        v49[(v42 >> 6) + 8] |= 1 << v42;
        uint64_t v32 = (uint64_t *)(v49[6] + 16 * v42);
        *uint64_t v32 = v37;
        v32[1] = v36;
        uint64_t v33 = (void *)(v49[7] + 32 * v42);
        *uint64_t v33 = v38;
        v33[1] = v39;
        v33[2] = v15;
        v33[3] = v14;
        uint64_t v34 = v49[2];
        BOOL v30 = __OFADD__(v34, 1);
        uint64_t v35 = v34 + 1;
        if (v30) {
          goto LABEL_27;
        }
        v49[2] = v35;
      }
    }
    v25[(v18 >> 6) + 8] |= 1 << v18;
    uint64_t v27 = (uint64_t *)(v25[6] + 16 * v18);
    *uint64_t v27 = v12;
    v27[1] = v11;
    uint64_t v28 = (void *)(v25[7] + 32 * v18);
    *uint64_t v28 = v51;
    v28[1] = v13;
    v28[2] = v15;
    v28[3] = v14;
    uint64_t v29 = v25[2];
    BOOL v30 = __OFADD__(v29, 1);
    uint64_t v31 = v29 + 1;
    if (!v30)
    {
      v25[2] = v31;
      goto LABEL_18;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = sub_1D7A9D4F8();
  __break(1u);
  return result;
}

uint64_t sub_1D7884A64@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v5 = v1[3];
  int64_t v7 = v5;
  unint64_t v8 = v1[4];
  if (v8)
  {
    uint64_t v9 = (v8 - 1) & v8;
    unint64_t v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    char v11 = *(unsigned char *)(*(void *)(v3 + 48) + v10);
    sub_1D78907D8(*(void *)(v3 + 56) + 32 * v10, (uint64_t)v23 + 8);
    LOBYTE(v23[0]) = v11;
    goto LABEL_23;
  }
  int64_t v12 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  int64_t v13 = (unint64_t)(v6 + 64) >> 6;
  if (v12 < v13)
  {
    unint64_t v14 = *(void *)(v4 + 8 * v12);
    if (v14)
    {
LABEL_7:
      uint64_t v9 = (v14 - 1) & v14;
      unint64_t v10 = __clz(__rbit64(v14)) + (v12 << 6);
      int64_t v7 = v12;
      goto LABEL_3;
    }
    int64_t v15 = v5 + 2;
    int64_t v7 = v5 + 1;
    if (v5 + 2 < v13)
    {
      unint64_t v14 = *(void *)(v4 + 8 * v15);
      if (v14)
      {
LABEL_10:
        int64_t v12 = v15;
        goto LABEL_7;
      }
      int64_t v7 = v5 + 2;
      if (v5 + 3 < v13)
      {
        unint64_t v14 = *(void *)(v4 + 8 * (v5 + 3));
        if (v14)
        {
          int64_t v12 = v5 + 3;
          goto LABEL_7;
        }
        int64_t v15 = v5 + 4;
        int64_t v7 = v5 + 3;
        if (v5 + 4 < v13)
        {
          unint64_t v14 = *(void *)(v4 + 8 * v15);
          if (v14) {
            goto LABEL_10;
          }
          int64_t v12 = v5 + 5;
          int64_t v7 = v5 + 4;
          if (v5 + 5 < v13)
          {
            unint64_t v14 = *(void *)(v4 + 8 * v12);
            if (v14) {
              goto LABEL_7;
            }
            int64_t v7 = v13 - 1;
            int64_t v16 = v5 + 6;
            while (v13 != v16)
            {
              unint64_t v14 = *(void *)(v4 + 8 * v16++);
              if (v14)
              {
                int64_t v12 = v16 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v9 = 0;
  uint64_t v24 = 0;
  memset(v23, 0, sizeof(v23));
LABEL_23:
  *uint64_t v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  char v17 = (void (*)(_OWORD *))v1[5];
  uint64_t result = sub_1D7871D78((uint64_t)v23, (uint64_t)v21, &qword_1EBDF99A8);
  if (v22)
  {
    v19[0] = v21[0];
    v19[1] = v21[1];
    uint64_t v20 = v22;
    v17(v19);
    return sub_1D7871C4C((uint64_t)v19, &qword_1EBDF8C00);
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t sub_1D7884C40@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = *v1;
  int64_t v5 = v1[3];
  unint64_t v4 = v1[4];
  int64_t v6 = v5;
  if (!v4)
  {
    int64_t v19 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      return result;
    }
    int64_t v20 = (unint64_t)(v1[2] + 64) >> 6;
    if (v19 < v20)
    {
      uint64_t v21 = v1[1];
      unint64_t v22 = *(void *)(v21 + 8 * v19);
      if (v22)
      {
LABEL_9:
        uint64_t v7 = (v22 - 1) & v22;
        unint64_t v8 = __clz(__rbit64(v22)) + (v19 << 6);
        int64_t v6 = v19;
        goto LABEL_3;
      }
      int64_t v23 = v5 + 2;
      int64_t v6 = v5 + 1;
      if (v5 + 2 < v20)
      {
        unint64_t v22 = *(void *)(v21 + 8 * v23);
        if (v22)
        {
LABEL_12:
          int64_t v19 = v23;
          goto LABEL_9;
        }
        int64_t v6 = v5 + 2;
        if (v5 + 3 < v20)
        {
          unint64_t v22 = *(void *)(v21 + 8 * (v5 + 3));
          if (v22)
          {
            int64_t v19 = v5 + 3;
            goto LABEL_9;
          }
          int64_t v23 = v5 + 4;
          int64_t v6 = v5 + 3;
          if (v5 + 4 < v20)
          {
            unint64_t v22 = *(void *)(v21 + 8 * v23);
            if (v22) {
              goto LABEL_12;
            }
            int64_t v19 = v5 + 5;
            int64_t v6 = v5 + 4;
            if (v5 + 5 < v20)
            {
              unint64_t v22 = *(void *)(v21 + 8 * v19);
              if (v22) {
                goto LABEL_9;
              }
              int64_t v6 = v20 - 1;
              int64_t v24 = v5 + 6;
              while (v20 != v24)
              {
                unint64_t v22 = *(void *)(v21 + 8 * v24++);
                if (v22)
                {
                  int64_t v19 = v24 - 1;
                  goto LABEL_9;
                }
              }
            }
          }
        }
      }
    }
    v1[3] = v6;
    v1[4] = 0;
    *a1 = 0u;
    a1[1] = 0u;
    a1[2] = 0u;
    return result;
  }
  uint64_t v7 = (v4 - 1) & v4;
  unint64_t v8 = __clz(__rbit64(v4)) | (v5 << 6);
LABEL_3:
  uint64_t v9 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v8);
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  int64_t v12 = (uint64_t *)(*(void *)(v3 + 56) + 32 * v8);
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];
  uint64_t v15 = v12[2];
  uint64_t v16 = v12[3];
  v1[3] = v6;
  v1[4] = v7;
  char v17 = (void (*)(void *))v1[5];
  v25[0] = v10;
  v25[1] = v11;
  v25[2] = v13;
  v25[3] = v14;
  void v25[4] = v15;
  v25[5] = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v17(v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D7884E18@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v6 = a1[5];
  a2[2] = a1[2];
  a2[3] = v4;
  a2[4] = v5;
  a2[5] = v6;
  *a2 = v3;
  a2[1] = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

unint64_t sub_1D7884E70()
{
  unint64_t result = qword_1EA842630;
  if (!qword_1EA842630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA842630);
  }
  return result;
}

uint64_t sub_1D7884EC4(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA842620);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1D7884F40()
{
  unint64_t result = qword_1EA842640;
  if (!qword_1EA842640)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA842640);
  }
  return result;
}

uint64_t sub_1D7884F94(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, unint64_t a13, uint64_t a14, unint64_t a15, uint64_t a16)
{
  if (a16 != 1)
  {
    sub_1D78607E8(a2, a3);
    sub_1D78607E8(a4, a5);
    sub_1D7871BDC(a6, a7);
    sub_1D7871BDC(a8, a9);
    sub_1D7871BDC(a10, a11);
    sub_1D7871BDC(a12, a13);
    sub_1D78607E8(a14, a15);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t type metadata accessor for HPKEEncryptedMessageWithKeyWrap.CodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

void *sub_1D78850B4(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  return a1;
}

uint64_t sub_1D7885118(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, unint64_t a13, uint64_t a14, unint64_t a15, uint64_t a16)
{
  if (a16 != 1)
  {
    sub_1D7860790(a2, a3);
    sub_1D7860790(a4, a5);
    sub_1D786E9D8(a6, a7);
    sub_1D786E9D8(a8, a9);
    sub_1D786E9D8(a10, a11);
    sub_1D786E9D8(a12, a13);
    sub_1D7860790(a14, a15);
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t sub_1D7885220()
{
  unint64_t result = qword_1EA842668;
  if (!qword_1EA842668)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA842668);
  }
  return result;
}

unint64_t sub_1D7885274()
{
  unint64_t result = qword_1EA842678;
  if (!qword_1EA842678)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA842678);
  }
  return result;
}

uint64_t type metadata accessor for HPKEEnvelope.CodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t sub_1D78852E0()
{
  unint64_t result = qword_1EA842688;
  if (!qword_1EA842688)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA842688);
  }
  return result;
}

uint64_t sub_1D7885334(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 120);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  int v2 = v1 - 1;
  if (v2 < 0) {
    int v2 = -1;
  }
  return (v2 + 1);
}

unint64_t sub_1D7885358()
{
  unint64_t result = qword_1EA8426A0;
  if (!qword_1EA8426A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8426A0);
  }
  return result;
}

uint64_t sub_1D78853AC(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void), void (*a3)(void), void (*a4)(uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(a1 + 136);
  unint64_t v6 = *(void *)(a1 + 144);
  uint64_t v7 = *(void *)(a1 + 152);
  uint64_t v8 = *(void *)(a1 + 160);
  uint64_t v9 = *(void *)(a1 + 168);
  uint64_t v10 = *(void *)(a1 + 176);
  uint64_t v11 = *(void *)(a1 + 184);
  uint64_t v16 = *(void *)(a1 + 192);
  long long v15 = *(_OWORD *)(a1 + 200);
  uint64_t v13 = *(void *)(a1 + 216);
  uint64_t v12 = *(void *)(a1 + 224);
  a2(*(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128));
  sub_1D7884608(v5, v6, v7, v8, v9, v10, v11, v16, v15, *((uint64_t *)&v15 + 1), v13, v12, a3, a4);
  return a1;
}

unint64_t sub_1D7885498()
{
  unint64_t result = qword_1EA8426B0;
  if (!qword_1EA8426B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8426B0);
  }
  return result;
}

unint64_t sub_1D78854EC()
{
  unint64_t result = qword_1EA8426B8;
  if (!qword_1EA8426B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8426B8);
  }
  return result;
}

unint64_t sub_1D7885540()
{
  unint64_t result = qword_1EA8426C8;
  if (!qword_1EA8426C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8426C8);
  }
  return result;
}

unint64_t sub_1D7885594()
{
  unint64_t result = qword_1EA8426D8;
  if (!qword_1EA8426D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8426D8);
  }
  return result;
}

uint64_t type metadata accessor for SealedMessage()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for SealedMessage.CodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for HPKESuiteKwV1()
{
  uint64_t result = qword_1EA842900;
  if (!qword_1EA842900) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1D7885664(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D78856AC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t __s1 = a1;
  __int16 v9 = a2;
  char v10 = BYTE2(a2);
  char v11 = BYTE3(a2);
  char v12 = BYTE4(a2);
  char v13 = BYTE5(a2);
  sub_1D7A7429C((uint64_t)&__s1, a3, a4, &v7);
  if (!v4) {
    char v5 = v7;
  }
  return v5 & 1;
}

uint64_t sub_1D7885784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result = sub_1D7A9AC98();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = sub_1D7A9ACB8();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  sub_1D7A9ACA8();
  sub_1D7A7429C(v11, a4, a5, &v13);
  if (!v5) {
    char v12 = v13;
  }
  return v12 & 1;
}

uint64_t sub_1D788583C(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v8) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        JUMPOUT(0x1D7885AA4);
      }
      uint64_t v8 = (int)v8;
LABEL_6:
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v12) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_27;
          }
          uint64_t v12 = (int)v12;
LABEL_11:
          if (v8 == v12)
          {
            if (v8 < 1)
            {
              char v17 = 1;
            }
            else
            {
              switch(a2 >> 62)
              {
                case 1uLL:
                  if (a1 >> 32 < (int)a1) {
                    goto LABEL_29;
                  }
                  sub_1D7860790(a3, a4);
                  sub_1D7860790(a1, a2);
                  char v17 = sub_1D7885784((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, a3, a4);
                  sub_1D78607E8(a3, a4);
                  uint64_t v18 = a1;
                  unint64_t v19 = a2;
                  break;
                case 2uLL:
                  uint64_t v20 = a2 & 0x3FFFFFFFFFFFFFFFLL;
                  uint64_t v21 = *(void *)(a1 + 16);
                  uint64_t v22 = *(void *)(a1 + 24);
                  sub_1D7860790(a3, a4);
                  swift_retain();
                  swift_retain();
                  char v17 = sub_1D7885784(v21, v22, v20, a3, a4);
                  sub_1D78607E8(a3, a4);
                  swift_release();
                  swift_release();
                  return v17 & 1;
                case 3uLL:
                  sub_1D7860790(a3, a4);
                  uint64_t v16 = 0;
                  uint64_t v15 = 0;
                  goto LABEL_22;
                default:
                  sub_1D7860790(a3, a4);
                  uint64_t v15 = a2 & 0xFFFFFFFFFFFFFFLL;
                  uint64_t v16 = a1;
LABEL_22:
                  char v17 = sub_1D78856AC(v16, v15, a3, a4);
                  uint64_t v18 = a3;
                  unint64_t v19 = a4;
                  break;
              }
              sub_1D78607E8(v18, v19);
            }
          }
          else
          {
            char v17 = 0;
          }
          return v17 & 1;
        case 2uLL:
          uint64_t v14 = *(void *)(a3 + 16);
          uint64_t v13 = *(void *)(a3 + 24);
          BOOL v11 = __OFSUB__(v13, v14);
          uint64_t v12 = v13 - v14;
          if (!v11) {
            goto LABEL_11;
          }
          goto LABEL_28;
        case 3uLL:
          char v17 = v8 == 0;
          return v17 & 1;
        default:
          uint64_t v12 = BYTE6(a4);
          goto LABEL_11;
      }
    case 2uLL:
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      BOOL v11 = __OFSUB__(v9, v10);
      uint64_t v8 = v9 - v10;
      if (!v11) {
        goto LABEL_6;
      }
      goto LABEL_26;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v8 = BYTE6(a2);
      goto LABEL_6;
  }
}

unint64_t sub_1D7885AD4()
{
  return sub_1D7881C14();
}

unint64_t sub_1D7885ADC()
{
  unint64_t result = qword_1EA8426E8;
  if (!qword_1EA8426E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8426E8);
  }
  return result;
}

id sub_1D7885B30(id result, void *a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return sub_1D7885B48(result, a2, a3 & 1);
  }
  return result;
}

id sub_1D7885B48(void *a1, id a2, char a3)
{
  if (a3) {
    return (id)swift_bridgeObjectRetain();
  }
  else {
    return a1;
  }
}

uint64_t sub_1D7885B58()
{
  return sub_1D7884084();
}

void sub_1D7885B64(void *a1, void *a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    sub_1D7885B7C(a1, a2, a3 & 1);
  }
}

void sub_1D7885B7C(void *a1, id a2, char a3)
{
  if (a3) {
    swift_bridgeObjectRelease();
  }
  else {
}
  }

uint64_t sub_1D7885B8C()
{
  return 5;
}

uint64_t sub_1D7885B94()
{
  return 6;
}

uint64_t sub_1D7885B9C()
{
  return 4;
}

uint64_t sub_1D7885BA4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x687469726F676C61 && a2 == 0xE90000000000006DLL;
  if (v2 || (sub_1D7A9D358() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x736D61726170 && a2 == 0xE600000000000000 || (sub_1D7A9D358() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = sub_1D7A9D358();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1D7885CF0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x687469726F676C61 && a2 == 0xE90000000000006DLL;
  if (v2 || (sub_1D7A9D358() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1937335659 && a2 == 0xE400000000000000 || (sub_1D7A9D358() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x736D61726170 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = sub_1D7A9D358();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1D7885E3C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701080941 && a2 == 0xE400000000000000;
  if (v2 || (sub_1D7A9D358() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1833266032 && a2 == 0xE400000000000000 || (sub_1D7A9D358() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x68736148526B70 && a2 == 0xE700000000000000 || (sub_1D7A9D358() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6D53496B70 && a2 == 0xE500000000000000 || (sub_1D7A9D358() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6873614853496B70 && a2 == 0xE800000000000000 || (sub_1D7A9D358() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 1834183536 && a2 == 0xE400000000000000 || (sub_1D7A9D358() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x687361486F666E69 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    char v6 = sub_1D7A9D358();
    swift_bridgeObjectRelease();
    if (v6) {
      return 6;
    }
    else {
      return 7;
    }
  }
}

uint64_t sub_1D78860E8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x654B746572636573 && a2 == 0xE900000000000079;
  if (v2 || (sub_1D7A9D358() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65636E6F6ELL && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_1D7A9D358();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1D78861E0()
{
  return 3;
}

uint64_t sub_1D78861E8(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7, unint64_t a8)
{
  unint64_t v135 = a7;
  unint64_t v136 = a8;
  unint64_t v137 = a6;
  uint64_t v134 = a5;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA842B98);
  uint64_t v20 = MEMORY[0x1F4188790](v12 - 8, v13, v14, v15, v16, v17, v18, v19);
  uint64_t v22 = (char *)&v127 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20, v23, v24, v25, v26, v27, v28, v29);
  uint64_t v31 = (char *)&v127 - v30;
  uint64_t v32 = sub_1D7A9B9E8();
  uint64_t v132 = *(void *)(v32 - 8);
  uint64_t v133 = v32;
  uint64_t v40 = MEMORY[0x1F4188790](v32, v33, v34, v35, v36, v37, v38, v39);
  unint64_t v42 = (char *)&v127 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = MEMORY[0x1F4188790](v40, v43, v44, v45, v46, v47, v48, v49);
  long long v52 = (char *)&v127 - v51;
  MEMORY[0x1F4188790](v50, v53, v54, v55, v56, v57, v58, v59);
  uint64_t v131 = (char *)&v127 - v60;
  uint64_t v61 = sub_1D7A9B9A8();
  uint64_t v62 = *(void *)(v61 - 8);
  uint64_t v138 = v61;
  uint64_t v139 = v62;
  MEMORY[0x1F4188790](v61, v63, v64, v65, v66, v67, v68, v69);
  uint64_t v145 = (char *)&v127 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = sub_1D7A9B8C8();
  uint64_t v79 = MEMORY[0x1F4188790](v71, v72, v73, v74, v75, v76, v77, v78);
  uint64_t v82 = (char *)&v127 - ((v81 + 15) & 0xFFFFFFFFFFFFFFF0);
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v83) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        JUMPOUT(0x1D7886C20);
      }
      uint64_t v83 = (int)v83;
LABEL_6:
      if (v83 == 16)
      {
        switch(a4 >> 62)
        {
          case 1uLL:
            LODWORD(v87) = HIDWORD(a3) - a3;
            if (__OFSUB__(HIDWORD(a3), a3)) {
              goto LABEL_36;
            }
            uint64_t v87 = (int)v87;
LABEL_18:
            if (v87 == 12)
            {
              uint64_t v128 = v80;
              uint64_t v129 = v79;
              unint64_t v143 = a1;
              unint64_t v144 = a2;
              uint64_t v97 = a1;
              uint64_t v98 = v82;
              sub_1D7860790(v97, a2);
              uint64_t v130 = v98;
              sub_1D7A9B8A8();
              unint64_t v143 = a3;
              unint64_t v144 = a4;
              sub_1D7860790(a3, a4);
              sub_1D7885ADC();
              uint64_t v99 = v145;
              uint64_t v100 = v140;
              sub_1D7A9B988();
              if (v100)
              {
                LOWORD(v143) = 272;
                id v115 = v100;
                unint64_t v116 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
                sub_1D7860544();
                swift_allocError();
                DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v100, 0xD000000000000034, 0x80000001D7ABEC90, (__int16 *)&v143, 0, v116, 0xD000000000000051, 0x80000001D7ABE640, v117, 0xD000000000000017, 0x80000001D7ABEC70, 762);
                swift_willThrow();

                return (*(uint64_t (**)(char *, uint64_t))(v128 + 8))(v130, v129);
              }
              else
              {
                uint64_t v101 = (void (**)(char *, char *, uint64_t))(v139 + 16);
                uint64_t v102 = (void (**)(char *, void, uint64_t, uint64_t))(v139 + 56);
                unint64_t v103 = v137;
                unint64_t v143 = v135;
                unint64_t v144 = v136;
                if (v137 >> 60 == 15)
                {
                  uint64_t v104 = v138;
                  (*v101)(v22, v99, v138);
                  (*v102)(v22, 0, 1, v104);
                  sub_1D7A9B968();
                  sub_1D7871C4C((uint64_t)v22, &qword_1EA842B98);
                  long long v52 = v42;
                }
                else
                {
                  uint64_t v113 = v138;
                  (*v101)(v31, v99, v138);
                  (*v102)(v31, 0, 1, v113);
                  uint64_t v114 = v134;
                  uint64_t v141 = v134;
                  unint64_t v142 = v103;
                  sub_1D7860790(v134, v103);
                  sub_1D7A9B958();
                  sub_1D7871C4C((uint64_t)v31, &qword_1EA842B98);
                  sub_1D7871BDC(v114, v103);
                }
                uint64_t v118 = v131;
                uint64_t v119 = v132;
                uint64_t v120 = v133;
                (*(void (**)(char *, char *, uint64_t))(v132 + 32))(v131, v52, v133);
                uint64_t v121 = sub_1D7A9B9B8();
                unint64_t v123 = v122;
                uint64_t v124 = sub_1D7A9B9C8();
                unint64_t v126 = v125;
                unint64_t v143 = v121;
                unint64_t v144 = v123;
                sub_1D7860790(v121, v123);
                sub_1D7A7AFC8(v124, v126);
                sub_1D78607E8(v124, v126);
                sub_1D78607E8(v121, v123);
                (*(void (**)(char *, uint64_t))(v119 + 8))(v118, v120);
                (*(void (**)(char *, uint64_t))(v139 + 8))(v145, v138);
                (*(void (**)(char *, uint64_t))(v128 + 8))(v130, v129);
                return v143;
              }
            }
LABEL_22:
            unint64_t v143 = 0;
            unint64_t v144 = 0xE000000000000000;
            sub_1D7A9CC48();
            swift_bridgeObjectRelease();
            unint64_t v143 = 0xD00000000000001BLL;
            unint64_t v144 = 0x80000001D7ABEBB0;
            uint64_t v105 = 0;
            switch(a4 >> 62)
            {
              case 0uLL:
                uint64_t v105 = BYTE6(a4);
                goto LABEL_27;
              case 1uLL:
                LODWORD(v105) = HIDWORD(a3) - a3;
                if (__OFSUB__(HIDWORD(a3), a3)) {
                  goto LABEL_38;
                }
                uint64_t v105 = (int)v105;
LABEL_27:
                uint64_t v141 = v105;
                sub_1D7A9D258();
                sub_1D7A9C128();
                swift_bridgeObjectRelease();
                sub_1D7A9C128();
                uint64_t v141 = 12;
                sub_1D7A9D258();
                sub_1D7A9C128();
                swift_bridgeObjectRelease();
                uint64_t v108 = v143;
                uint64_t v109 = v144;
                LOWORD(v143) = 272;
                unint64_t v110 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
                sub_1D7860544();
                swift_allocError();
                DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, v108, v109, (__int16 *)&v143, 0, v110, 0xD000000000000051, 0x80000001D7ABE640, v111, 0xD000000000000017, 0x80000001D7ABEC70, 747);
                break;
              case 2uLL:
                uint64_t v107 = *(void *)(a3 + 16);
                uint64_t v106 = *(void *)(a3 + 24);
                BOOL v86 = __OFSUB__(v106, v107);
                uint64_t v105 = v106 - v107;
                if (!v86) {
                  goto LABEL_27;
                }
                goto LABEL_39;
              case 3uLL:
                goto LABEL_27;
              default:
                goto LABEL_40;
            }
            break;
          case 2uLL:
            uint64_t v96 = *(void *)(a3 + 16);
            uint64_t v95 = *(void *)(a3 + 24);
            BOOL v86 = __OFSUB__(v95, v96);
            uint64_t v87 = v95 - v96;
            if (!v86) {
              goto LABEL_18;
            }
            goto LABEL_37;
          case 3uLL:
            goto LABEL_22;
          default:
            uint64_t v87 = BYTE6(a4);
            goto LABEL_18;
        }
      }
      else
      {
LABEL_9:
        unint64_t v143 = 0;
        unint64_t v144 = 0xE000000000000000;
        sub_1D7A9CC48();
        swift_bridgeObjectRelease();
        unint64_t v143 = 0xD000000000000019;
        unint64_t v144 = 0x80000001D7ABEB70;
        uint64_t v88 = 0;
        switch(a2 >> 62)
        {
          case 0uLL:
            uint64_t v88 = BYTE6(a2);
            goto LABEL_14;
          case 1uLL:
            LODWORD(v88) = HIDWORD(a1) - a1;
            if (__OFSUB__(HIDWORD(a1), a1)) {
              goto LABEL_34;
            }
            uint64_t v88 = (int)v88;
LABEL_14:
            uint64_t v141 = v88;
            sub_1D7A9D258();
            sub_1D7A9C128();
            swift_bridgeObjectRelease();
            sub_1D7A9C128();
            uint64_t v141 = 16;
            sub_1D7A9D258();
            sub_1D7A9C128();
            swift_bridgeObjectRelease();
            uint64_t v91 = v143;
            uint64_t v92 = v144;
            LOWORD(v143) = 272;
            unint64_t v93 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
            sub_1D7860544();
            swift_allocError();
            DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, v91, v92, (__int16 *)&v143, 0, v93, 0xD000000000000051, 0x80000001D7ABE640, v94, 0xD000000000000017, 0x80000001D7ABEC70, 744);
            break;
          case 2uLL:
            uint64_t v90 = *(void *)(a1 + 16);
            uint64_t v89 = *(void *)(a1 + 24);
            BOOL v86 = __OFSUB__(v89, v90);
            uint64_t v88 = v89 - v90;
            if (!v86) {
              goto LABEL_14;
            }
            goto LABEL_35;
          case 3uLL:
            goto LABEL_14;
          default:
LABEL_40:
            JUMPOUT(0);
        }
      }
      return swift_willThrow();
    case 2uLL:
      uint64_t v85 = *(void *)(a1 + 16);
      uint64_t v84 = *(void *)(a1 + 24);
      BOOL v86 = __OFSUB__(v84, v85);
      uint64_t v83 = v84 - v85;
      if (!v86) {
        goto LABEL_6;
      }
      goto LABEL_33;
    case 3uLL:
      goto LABEL_9;
    default:
      uint64_t v83 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_1D7886C60(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = a2 >> 62;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_29;
      }
      uint64_t v4 = (int)v4;
LABEL_6:
      if (v4 >= 16)
      {
        if (v3)
        {
          if (v3 == 1)
          {
            LODWORD(v10) = HIDWORD(a1) - a1;
            if (__OFSUB__(HIDWORD(a1), a1))
            {
LABEL_31:
              __break(1u);
              goto LABEL_32;
            }
            uint64_t v10 = (int)v10;
          }
          else
          {
            uint64_t v12 = *(void *)(a1 + 16);
            uint64_t v11 = *(void *)(a1 + 24);
            BOOL v7 = __OFSUB__(v11, v12);
            uint64_t v10 = v11 - v12;
            if (v7)
            {
LABEL_32:
              __break(1u);
LABEL_33:
              __break(1u);
              goto LABEL_34;
            }
          }
        }
        else
        {
          uint64_t v10 = BYTE6(a2);
        }
        if (!__OFSUB__(v10, 16))
        {
          if (v10 - 16 < 0) {
            goto LABEL_28;
          }
          if (!v3) {
            goto LABEL_24;
          }
          if (v3 == 1)
          {
            if (!__OFSUB__(HIDWORD(a1), a1)) {
              goto LABEL_24;
            }
            goto LABEL_33;
          }
          uint64_t v14 = *(void *)(a1 + 16);
          uint64_t v13 = *(void *)(a1 + 24);
          uint64_t v15 = v13 - v14;
          if (__OFSUB__(v13, v14))
          {
LABEL_34:
            __break(1u);
            goto LABEL_35;
          }
          if (__OFSUB__(v15, 16))
          {
LABEL_35:
            __break(1u);
            JUMPOUT(0x1D7886E9CLL);
          }
          if (v15 >= v15 - 16)
          {
LABEL_24:
            uint64_t v2 = sub_1D7A9B058();
            sub_1D7A9B058();
            return v2;
          }
          __break(1u);
        }
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
LABEL_7:
      __int16 v17 = 273;
      unint64_t v8 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000001ELL, 0x80000001D7ABEC10, &v17, 0, v8, 0xD000000000000051, 0x80000001D7ABE640, v9, 0xD00000000000001DLL, 0x80000001D7ABEC30, 796);
      swift_willThrow();
      return v2;
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_6;
      }
      goto LABEL_30;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_1D7886EAC(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8)
{
  uint64_t v122 = a7;
  unint64_t v123 = a8;
  uint64_t v126 = a5;
  unint64_t v127 = a6;
  unint64_t v121 = a4;
  uint64_t v110 = sub_1D7A9B9E8();
  uint64_t v109 = *(void *)(v110 - 8);
  MEMORY[0x1F4188790](v110, v11, v12, v13, v14, v15, v16, v17);
  uint64_t v128 = (char *)&v108 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v125 = sub_1D7A9B9A8();
  uint64_t v129 = *(void *)(v125 - 8);
  uint64_t v26 = MEMORY[0x1F4188790](v125, v19, v20, v21, v22, v23, v24, v25);
  uint64_t v111 = (char *)&v108 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26, v28, v29, v30, v31, v32, v33, v34);
  unint64_t v116 = (char *)&v108 - v35;
  uint64_t v113 = sub_1D7A9B8C8();
  uint64_t v112 = *(void *)(v113 - 8);
  MEMORY[0x1F4188790](v113, v36, v37, v38, v39, v40, v41, v42);
  id v115 = (char *)&v108 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = sub_1D7A9B5F8();
  uint64_t v45 = *(void *)(v44 - 8);
  MEMORY[0x1F4188790](v44, v46, v47, v48, v49, v50, v51, v52);
  uint64_t v54 = (char *)&v108 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v55 = __swift_project_value_buffer(v44, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  uint64_t v56 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 16);
  v56(v54, v55, v44);
  unint64_t v120 = a2 >> 62;
  sub_1D7860790(a1, a2);
  sub_1D7924680((uint64_t)v54, a1, a2);
  uint64_t v134 = a1;
  unint64_t v124 = a2;
  sub_1D78607E8(a1, a2);
  uint64_t v57 = *(void (**)(char *, uint64_t))(v45 + 8);
  v57(v54, v44);
  v56(v54, v55, v44);
  uint64_t v58 = v56;
  uint64_t v119 = v56;
  unint64_t v59 = v121;
  unint64_t v117 = v121 >> 62;
  sub_1D7860790(a3, v121);
  sub_1D79246A0((uint64_t)v54, a3, v59);
  uint64_t v118 = a3;
  sub_1D78607E8(a3, v59);
  v57(v54, v44);
  v58(v54, v55, v44);
  uint64_t v61 = v126;
  unint64_t v60 = v127;
  sub_1D7860790(v126, v127);
  sub_1D79246C0((uint64_t)v54, v61, v60);
  sub_1D78607E8(v61, v60);
  v57(v54, v44);
  v119(v54, v55, v44);
  uint64_t v63 = v122;
  unint64_t v62 = v123;
  sub_1D7860790(v122, v123);
  sub_1D79246E0((uint64_t)v54, v63, v62);
  sub_1D78607E8(v63, v62);
  v57(v54, v44);
  unsigned __int8 v64 = BYTE6(v124);
  uint64_t v65 = v125;
  uint64_t v66 = v129;
  int v67 = v120;
  switch(v120)
  {
    case 1uLL:
      LODWORD(v68) = HIDWORD(v134) - v134;
      if (__OFSUB__(HIDWORD(v134), v134))
      {
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        JUMPOUT(0x1D7887AC8);
      }
      uint64_t v68 = (int)v68;
LABEL_8:
      if (v68 == 16)
      {
        uint64_t v72 = v117;
        switch((int)v117)
        {
          case 1:
            LODWORD(v73) = HIDWORD(v118) - v118;
            if (__OFSUB__(HIDWORD(v118), v118)) {
              goto LABEL_36;
            }
            uint64_t v73 = (int)v73;
LABEL_20:
            if (v73 == 12)
            {
              unint64_t v132 = v134;
              unint64_t v133 = v124;
              sub_1D7860790(v134, v124);
              uint64_t v83 = v115;
              sub_1D7A9B8A8();
              unint64_t v132 = v118;
              unint64_t v133 = v59;
              sub_1D7860790(v118, v59);
              sub_1D7885ADC();
              uint64_t v84 = v114;
              sub_1D7A9B988();
              uint64_t v77 = (uint64_t)v84;
              if (v84)
              {
                LOWORD(v132) = 273;
                id v101 = v84;
                unint64_t v102 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
                sub_1D7860544();
                swift_allocError();
                DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v84, 0xD000000000000034, 0x80000001D7ABEBD0, (__int16 *)&v132, 0, v102, 0xD000000000000051, 0x80000001D7ABE640, v103, 0xD000000000000017, 0x80000001D7ABEB90, 789);
                swift_willThrow();

                (*(void (**)(char *, uint64_t))(v112 + 8))(v83, v113);
              }
              else
              {
                uint64_t v92 = sub_1D7886C60(v63, v62);
                unint64_t v94 = v93;
                uint64_t v96 = v95;
                unint64_t v98 = v97;
                (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v111, v116, v65);
                unint64_t v132 = v92;
                unint64_t v133 = v94;
                uint64_t v130 = v96;
                unint64_t v131 = v98;
                unint64_t v124 = v92;
                uint64_t v99 = v92;
                unint64_t v100 = v94;
                sub_1D7860790(v99, v94);
                uint64_t v134 = v96;
                sub_1D7860790(v96, v98);
                sub_1D7A9B9D8();
                uint64_t v104 = v134;
                unint64_t v105 = v98;
                uint64_t v106 = v124;
                unint64_t v132 = v126;
                unint64_t v133 = v127;
                uint64_t v107 = v115;
                uint64_t v77 = sub_1D7A9B948();
                sub_1D78607E8(v104, v105);
                sub_1D78607E8(v106, v100);
                (*(void (**)(char *, uint64_t))(v109 + 8))(v128, v110);
                (*(void (**)(char *, uint64_t))(v129 + 8))(v116, v65);
                (*(void (**)(char *, uint64_t))(v112 + 8))(v107, v113);
              }
              return v77;
            }
LABEL_23:
            unint64_t v132 = 0;
            unint64_t v133 = 0xE000000000000000;
            sub_1D7A9CC48();
            swift_bridgeObjectRelease();
            unint64_t v132 = 0xD00000000000001BLL;
            unint64_t v133 = 0x80000001D7ABEBB0;
            uint64_t v85 = 0;
            switch(v72)
            {
              case 0:
                uint64_t v85 = BYTE6(v59);
                goto LABEL_28;
              case 1:
                LODWORD(v85) = HIDWORD(v118) - v118;
                if (__OFSUB__(HIDWORD(v118), v118)) {
                  goto LABEL_38;
                }
                uint64_t v85 = (int)v85;
LABEL_28:
                uint64_t v130 = v85;
                sub_1D7A9D258();
                sub_1D7A9C128();
                swift_bridgeObjectRelease();
                sub_1D7A9C128();
                uint64_t v130 = 12;
                sub_1D7A9D258();
                sub_1D7A9C128();
                swift_bridgeObjectRelease();
                uint64_t v77 = v132;
                uint64_t v88 = v133;
                LOWORD(v132) = 273;
                unint64_t v89 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
                sub_1D7860544();
                swift_allocError();
                DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, v77, v88, (__int16 *)&v132, 0, v89, 0xD000000000000051, 0x80000001D7ABE640, v90, 0xD000000000000017, 0x80000001D7ABEB90, 777);
                break;
              case 2:
                uint64_t v87 = *(void *)(v118 + 16);
                uint64_t v86 = *(void *)(v118 + 24);
                BOOL v71 = __OFSUB__(v86, v87);
                uint64_t v85 = v86 - v87;
                if (!v71) {
                  goto LABEL_28;
                }
                goto LABEL_39;
              case 3:
                goto LABEL_28;
              default:
                goto LABEL_40;
            }
            break;
          case 2:
            uint64_t v82 = *(void *)(v118 + 16);
            uint64_t v81 = *(void *)(v118 + 24);
            BOOL v71 = __OFSUB__(v81, v82);
            uint64_t v73 = v81 - v82;
            if (!v71) {
              goto LABEL_20;
            }
            goto LABEL_37;
          case 3:
            goto LABEL_23;
          default:
            uint64_t v73 = BYTE6(v59);
            goto LABEL_20;
        }
      }
      else
      {
LABEL_11:
        unint64_t v132 = 0;
        unint64_t v133 = 0xE000000000000000;
        sub_1D7A9CC48();
        swift_bridgeObjectRelease();
        unint64_t v132 = 0xD000000000000019;
        unint64_t v133 = 0x80000001D7ABEB70;
        uint64_t v74 = 0;
        switch(v67)
        {
          case 0:
            uint64_t v74 = v64;
            goto LABEL_16;
          case 1:
            LODWORD(v74) = HIDWORD(v134) - v134;
            if (__OFSUB__(HIDWORD(v134), v134)) {
              goto LABEL_34;
            }
            uint64_t v74 = (int)v74;
LABEL_16:
            uint64_t v130 = v74;
            sub_1D7A9D258();
            sub_1D7A9C128();
            swift_bridgeObjectRelease();
            sub_1D7A9C128();
            uint64_t v130 = 16;
            sub_1D7A9D258();
            sub_1D7A9C128();
            swift_bridgeObjectRelease();
            uint64_t v77 = v132;
            uint64_t v78 = v133;
            LOWORD(v132) = 273;
            unint64_t v79 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
            sub_1D7860544();
            swift_allocError();
            DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, v77, v78, (__int16 *)&v132, 0, v79, 0xD000000000000051, 0x80000001D7ABE640, v80, 0xD000000000000017, 0x80000001D7ABEB90, 774);
            break;
          case 2:
            uint64_t v76 = *(void *)(v134 + 16);
            uint64_t v75 = *(void *)(v134 + 24);
            BOOL v71 = __OFSUB__(v75, v76);
            uint64_t v74 = v75 - v76;
            if (!v71) {
              goto LABEL_16;
            }
            goto LABEL_35;
          case 3:
            goto LABEL_16;
          default:
LABEL_40:
            JUMPOUT(0);
        }
      }
      swift_willThrow();
      return v77;
    case 2uLL:
      uint64_t v70 = *(void *)(v134 + 16);
      uint64_t v69 = *(void *)(v134 + 24);
      BOOL v71 = __OFSUB__(v69, v70);
      uint64_t v68 = v69 - v70;
      if (!v71) {
        goto LABEL_8;
      }
      goto LABEL_33;
    case 3uLL:
      goto LABEL_11;
    default:
      uint64_t v68 = BYTE6(v124);
      goto LABEL_8;
  }
}

unint64_t sub_1D7887B0C()
{
  unint64_t result = qword_1EA8426F0;
  if (!qword_1EA8426F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8426F0);
  }
  return result;
}

unint64_t sub_1D7887B64()
{
  unint64_t result = qword_1EA8426F8[0];
  if (!qword_1EA8426F8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1EA8426F8);
  }
  return result;
}

uint64_t sub_1D7887BB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 48);
}

uint64_t sub_1D7887BC0()
{
  uint64_t result = sub_1D7A9C9A8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_1D7887C7C(unsigned char *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v9 = *(void *)(v5 + 64);
  }
  else {
    size_t v9 = *(void *)(v5 + 64) + 1;
  }
  unint64_t v10 = ((v7 + 120) & ~(unint64_t)v7) + v9;
  int v11 = v7 & 0x100000;
  if (v8 > 7 || v11 != 0 || v10 > 0x18)
  {
    uint64_t v14 = *a2;
    *unint64_t v3 = *a2;
    unint64_t v3 = (void *)(v14 + ((v8 & 0xF8 ^ 0x1F8) & (v8 + 16)));
    swift_retain();
  }
  else
  {
    *a1 = *(unsigned char *)a2;
    a1[1] = *((unsigned char *)a2 + 1);
    a1[2] = *((unsigned char *)a2 + 2);
    unint64_t v15 = (unint64_t)(a1 + 10) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v16 = ((unint64_t)a2 + 10) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v17 = *(void *)(v16 + 8);
    if ((v17 & 0x3000000000000000) != 0)
    {
      long long v18 = *(_OWORD *)(v16 + 16);
      *(_OWORD *)unint64_t v15 = *(_OWORD *)v16;
      *(_OWORD *)(v15 + 16) = v18;
      long long v19 = *(_OWORD *)(v16 + 32);
      long long v20 = *(_OWORD *)(v16 + 48);
      long long v21 = *(_OWORD *)(v16 + 80);
      *(_OWORD *)(v15 + 64) = *(_OWORD *)(v16 + 64);
      *(_OWORD *)(v15 + 80) = v21;
      *(_OWORD *)(v15 + 32) = v19;
      *(_OWORD *)(v15 + 48) = v20;
    }
    else
    {
      uint64_t v22 = *(void *)v16;
      sub_1D7860790(*(void *)v16, *(void *)(v16 + 8));
      *(void *)unint64_t v15 = v22;
      *(void *)(v15 + 8) = v17;
      uint64_t v23 = *(void *)(v16 + 16);
      unint64_t v24 = *(void *)(v16 + 24);
      sub_1D7860790(v23, v24);
      *(void *)(v15 + 16) = v23;
      *(void *)(v15 + 24) = v24;
      uint64_t v25 = (uint64_t *)(v16 + 32);
      unint64_t v26 = *(void *)(v16 + 40);
      if (v26 >> 60 == 15)
      {
        *(_OWORD *)(v15 + 32) = *(_OWORD *)v25;
      }
      else
      {
        uint64_t v27 = *v25;
        sub_1D7860790(*v25, *(void *)(v16 + 40));
        *(void *)(v15 + 32) = v27;
        *(void *)(v15 + 40) = v26;
      }
      uint64_t v28 = (uint64_t *)(v16 + 48);
      unint64_t v29 = *(void *)(v16 + 56);
      if (v29 >> 60 == 15)
      {
        *(_OWORD *)(v15 + 48) = *(_OWORD *)v28;
      }
      else
      {
        uint64_t v30 = *v28;
        sub_1D7860790(*v28, *(void *)(v16 + 56));
        *(void *)(v15 + 48) = v30;
        *(void *)(v15 + 56) = v29;
      }
      uint64_t v31 = (uint64_t *)(v16 + 64);
      unint64_t v32 = *(void *)(v16 + 72);
      if (v32 >> 60 == 15)
      {
        *(_OWORD *)(v15 + 64) = *(_OWORD *)v31;
      }
      else
      {
        uint64_t v33 = *v31;
        sub_1D7860790(*v31, *(void *)(v16 + 72));
        *(void *)(v15 + 64) = v33;
        *(void *)(v15 + 72) = v32;
      }
      uint64_t v34 = (uint64_t *)(v16 + 80);
      unint64_t v35 = *(void *)(v16 + 88);
      if (v35 >> 60 == 15)
      {
        *(_OWORD *)(v15 + 80) = *(_OWORD *)v34;
      }
      else
      {
        uint64_t v36 = *v34;
        sub_1D7860790(*v34, *(void *)(v16 + 88));
        *(void *)(v15 + 80) = v36;
        *(void *)(v15 + 88) = v35;
      }
    }
    uint64_t v37 = ~v8;
    unint64_t v38 = (v15 + 103) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v39 = (v16 + 103) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v40 = *(void *)(v39 + 8);
    if ((v40 & 0x3000000000000000) != 0)
    {
      *(_OWORD *)unint64_t v38 = *(_OWORD *)v39;
    }
    else
    {
      uint64_t v41 = *(void *)v39;
      sub_1D7860790(*(void *)v39, *(void *)(v39 + 8));
      *(void *)unint64_t v38 = v41;
      *(void *)(v38 + 8) = v40;
    }
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))((v39 + v8 + 16) & v37, 1, v4))
    {
      memcpy((void *)((v38 + v8 + 16) & v37), (const void *)((v39 + v8 + 16) & v37), v9);
    }
    else
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))((v38 + v8 + 16) & v37, (v39 + v8 + 16) & v37, v4);
      (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v6 + 56))((v38 + v8 + 16) & v37, 0, 1, v4);
    }
  }
  return v3;
}

uint64_t sub_1D7887F84(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (uint64_t *)((a1 + 10) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v4 = v3[1];
  if ((v4 & 0x3000000000000000) == 0)
  {
    sub_1D78607E8(*v3, v4);
    sub_1D78607E8(v3[2], v3[3]);
    unint64_t v5 = v3[5];
    if (v5 >> 60 != 15) {
      sub_1D78607E8(v3[4], v5);
    }
    unint64_t v6 = v3[7];
    if (v6 >> 60 != 15) {
      sub_1D78607E8(v3[6], v6);
    }
    unint64_t v7 = v3[9];
    if (v7 >> 60 != 15) {
      sub_1D78607E8(v3[8], v7);
    }
    unint64_t v8 = v3[11];
    if (v8 >> 60 != 15) {
      sub_1D78607E8(v3[10], v8);
    }
  }
  size_t v9 = (uint64_t *)(((unint64_t)v3 + 103) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v10 = v9[1];
  if ((v10 & 0x3000000000000000) == 0) {
    sub_1D78607E8(*v9, v10);
  }
  uint64_t v11 = *(void *)(a2 + 16);
  uint64_t v15 = *(void *)(v11 - 8);
  unint64_t v12 = ((unint64_t)v9 + *(unsigned __int8 *)(v15 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v15 + 48))(v12, 1, v11);
  if (!result)
  {
    uint64_t v14 = *(uint64_t (**)(unint64_t, uint64_t))(v15 + 8);
    return v14(v12, v11);
  }
  return result;
}

unsigned char *sub_1D7888100(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  unint64_t v5 = (unint64_t)(a1 + 10) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (unint64_t)(a2 + 10) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(v6 + 8);
  if ((v7 & 0x3000000000000000) != 0)
  {
    long long v8 = *(_OWORD *)(v6 + 16);
    *(_OWORD *)unint64_t v5 = *(_OWORD *)v6;
    *(_OWORD *)(v5 + 16) = v8;
    long long v9 = *(_OWORD *)(v6 + 32);
    long long v10 = *(_OWORD *)(v6 + 48);
    long long v11 = *(_OWORD *)(v6 + 80);
    *(_OWORD *)(v5 + 64) = *(_OWORD *)(v6 + 64);
    *(_OWORD *)(v5 + 80) = v11;
    *(_OWORD *)(v5 + 32) = v9;
    *(_OWORD *)(v5 + 48) = v10;
  }
  else
  {
    uint64_t v12 = *(void *)v6;
    sub_1D7860790(*(void *)v6, *(void *)(v6 + 8));
    *(void *)unint64_t v5 = v12;
    *(void *)(v5 + 8) = v7;
    uint64_t v13 = *(void *)(v6 + 16);
    unint64_t v14 = *(void *)(v6 + 24);
    sub_1D7860790(v13, v14);
    *(void *)(v5 + 16) = v13;
    *(void *)(v5 + 24) = v14;
    uint64_t v15 = (uint64_t *)(v6 + 32);
    unint64_t v16 = *(void *)(v6 + 40);
    if (v16 >> 60 == 15)
    {
      *(_OWORD *)(v5 + 32) = *(_OWORD *)v15;
    }
    else
    {
      uint64_t v17 = *v15;
      sub_1D7860790(*v15, *(void *)(v6 + 40));
      *(void *)(v5 + 32) = v17;
      *(void *)(v5 + 40) = v16;
    }
    long long v18 = (uint64_t *)(v6 + 48);
    unint64_t v19 = *(void *)(v6 + 56);
    if (v19 >> 60 == 15)
    {
      *(_OWORD *)(v5 + 48) = *(_OWORD *)v18;
    }
    else
    {
      uint64_t v20 = *v18;
      sub_1D7860790(*v18, *(void *)(v6 + 56));
      *(void *)(v5 + 48) = v20;
      *(void *)(v5 + 56) = v19;
    }
    long long v21 = (uint64_t *)(v6 + 64);
    unint64_t v22 = *(void *)(v6 + 72);
    if (v22 >> 60 == 15)
    {
      *(_OWORD *)(v5 + 64) = *(_OWORD *)v21;
    }
    else
    {
      uint64_t v23 = *v21;
      sub_1D7860790(*v21, *(void *)(v6 + 72));
      *(void *)(v5 + 64) = v23;
      *(void *)(v5 + 72) = v22;
    }
    unint64_t v24 = (uint64_t *)(v6 + 80);
    unint64_t v25 = *(void *)(v6 + 88);
    if (v25 >> 60 == 15)
    {
      *(_OWORD *)(v5 + 80) = *(_OWORD *)v24;
    }
    else
    {
      uint64_t v26 = *v24;
      sub_1D7860790(*v24, *(void *)(v6 + 88));
      *(void *)(v5 + 80) = v26;
      *(void *)(v5 + 88) = v25;
    }
  }
  unint64_t v27 = (v5 + 103) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v28 = (v6 + 103) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v29 = *(void *)(v28 + 8);
  if ((v29 & 0x3000000000000000) != 0)
  {
    *(_OWORD *)unint64_t v27 = *(_OWORD *)v28;
  }
  else
  {
    uint64_t v30 = *(void *)v28;
    sub_1D7860790(*(void *)v28, *(void *)(v28 + 8));
    *(void *)unint64_t v27 = v30;
    *(void *)(v27 + 8) = v29;
  }
  uint64_t v31 = *(void *)(a3 + 16);
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v33 = *(unsigned __int8 *)(v32 + 80);
  uint64_t v34 = (void *)((v27 + v33 + 16) & ~v33);
  unint64_t v35 = (const void *)((v28 + v33 + 16) & ~v33);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v32 + 48))(v35, 1, v31))
  {
    if (*(_DWORD *)(v32 + 84)) {
      size_t v36 = *(void *)(v32 + 64);
    }
    else {
      size_t v36 = *(void *)(v32 + 64) + 1;
    }
    memcpy(v34, v35, v36);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v32 + 16))(v34, v35, v31);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v32 + 56))(v34, 0, 1, v31);
  }
  return a1;
}

unsigned char *sub_1D78883B8(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  unint64_t v5 = (void *)((unint64_t)(a1 + 10) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v6 = (unint64_t)(a2 + 10) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = v5[1];
  uint64_t v8 = *(void *)(v6 + 8);
  uint64_t v9 = v8 & 0x3000000000000000;
  if ((v7 & 0x3000000000000000) != 0)
  {
    if (!v9)
    {
      uint64_t v10 = *(void *)v6;
      sub_1D7860790(*(void *)v6, *(void *)(v6 + 8));
      *unint64_t v5 = v10;
      v5[1] = v8;
      uint64_t v11 = *(void *)(v6 + 16);
      unint64_t v12 = *(void *)(v6 + 24);
      sub_1D7860790(v11, v12);
      void v5[2] = v11;
      v5[3] = v12;
      uint64_t v13 = (uint64_t *)(v6 + 32);
      unint64_t v14 = *(void *)(v6 + 40);
      if (v14 >> 60 == 15)
      {
        *((_OWORD *)v5 + 2) = *(_OWORD *)v13;
      }
      else
      {
        uint64_t v56 = *v13;
        sub_1D7860790(*v13, *(void *)(v6 + 40));
        v5[4] = v56;
        v5[5] = v14;
      }
      uint64_t v57 = (uint64_t *)(v6 + 48);
      unint64_t v58 = *(void *)(v6 + 56);
      if (v58 >> 60 == 15)
      {
        *((_OWORD *)v5 + 3) = *(_OWORD *)v57;
      }
      else
      {
        uint64_t v59 = *v57;
        sub_1D7860790(*v57, *(void *)(v6 + 56));
        v5[6] = v59;
        v5[7] = v58;
      }
      unint64_t v60 = (uint64_t *)(v6 + 64);
      unint64_t v61 = *(void *)(v6 + 72);
      if (v61 >> 60 == 15)
      {
        *((_OWORD *)v5 + 4) = *(_OWORD *)v60;
      }
      else
      {
        uint64_t v62 = *v60;
        sub_1D7860790(*v60, *(void *)(v6 + 72));
        v5[8] = v62;
        v5[9] = v61;
      }
      uint64_t v63 = (_OWORD *)(v6 + 80);
      unint64_t v64 = *(void *)(v6 + 88);
      if (v64 >> 60 == 15)
      {
        *((_OWORD *)v5 + 5) = *v63;
        goto LABEL_15;
      }
      uint64_t v65 = *(void *)v63;
      goto LABEL_68;
    }
LABEL_14:
    long long v19 = *(_OWORD *)(v6 + 16);
    *(_OWORD *)unint64_t v5 = *(_OWORD *)v6;
    *((_OWORD *)v5 + 1) = v19;
    long long v20 = *(_OWORD *)(v6 + 32);
    long long v21 = *(_OWORD *)(v6 + 48);
    long long v22 = *(_OWORD *)(v6 + 80);
    *((_OWORD *)v5 + 4) = *(_OWORD *)(v6 + 64);
    *((_OWORD *)v5 + 5) = v22;
    *((_OWORD *)v5 + 2) = v20;
    *((_OWORD *)v5 + 3) = v21;
    goto LABEL_15;
  }
  if (v9)
  {
    sub_1D78607E8(*v5, v7);
    sub_1D78607E8(v5[2], v5[3]);
    unint64_t v15 = v5[5];
    if (v15 >> 60 != 15) {
      sub_1D78607E8(v5[4], v15);
    }
    unint64_t v16 = v5[7];
    if (v16 >> 60 != 15) {
      sub_1D78607E8(v5[6], v16);
    }
    unint64_t v17 = v5[9];
    if (v17 >> 60 != 15) {
      sub_1D78607E8(v5[8], v17);
    }
    unint64_t v18 = v5[11];
    if (v18 >> 60 != 15) {
      sub_1D78607E8(v5[10], v18);
    }
    goto LABEL_14;
  }
  uint64_t v42 = *(void *)v6;
  sub_1D7860790(*(void *)v6, *(void *)(v6 + 8));
  uint64_t v43 = *v5;
  unint64_t v44 = v5[1];
  *unint64_t v5 = v42;
  v5[1] = v8;
  sub_1D78607E8(v43, v44);
  uint64_t v45 = *(void *)(v6 + 16);
  unint64_t v46 = *(void *)(v6 + 24);
  sub_1D7860790(v45, v46);
  uint64_t v47 = v5[2];
  unint64_t v48 = v5[3];
  void v5[2] = v45;
  v5[3] = v46;
  sub_1D78607E8(v47, v48);
  uint64_t v49 = (uint64_t *)(v6 + 32);
  unint64_t v50 = *(void *)(v6 + 40);
  if (v5[5] >> 60 == 15)
  {
    if (v50 >> 60 != 15)
    {
      uint64_t v51 = *v49;
      sub_1D7860790(*v49, *(void *)(v6 + 40));
      v5[4] = v51;
      v5[5] = v50;
      goto LABEL_51;
    }
    goto LABEL_49;
  }
  if (v50 >> 60 == 15)
  {
    sub_1D7870C24((uint64_t)(v5 + 4));
LABEL_49:
    *((_OWORD *)v5 + 2) = *(_OWORD *)v49;
    goto LABEL_51;
  }
  uint64_t v66 = *v49;
  sub_1D7860790(*v49, *(void *)(v6 + 40));
  uint64_t v67 = v5[4];
  unint64_t v68 = v5[5];
  v5[4] = v66;
  v5[5] = v50;
  sub_1D78607E8(v67, v68);
LABEL_51:
  uint64_t v69 = (uint64_t *)(v6 + 48);
  unint64_t v70 = *(void *)(v6 + 56);
  if (v5[7] >> 60 == 15)
  {
    if (v70 >> 60 != 15)
    {
      uint64_t v71 = *v69;
      sub_1D7860790(*v69, *(void *)(v6 + 56));
      v5[6] = v71;
      v5[7] = v70;
      goto LABEL_58;
    }
    goto LABEL_56;
  }
  if (v70 >> 60 == 15)
  {
    sub_1D7870C24((uint64_t)(v5 + 6));
LABEL_56:
    *((_OWORD *)v5 + 3) = *(_OWORD *)v69;
    goto LABEL_58;
  }
  uint64_t v72 = *v69;
  sub_1D7860790(*v69, *(void *)(v6 + 56));
  uint64_t v73 = v5[6];
  unint64_t v74 = v5[7];
  v5[6] = v72;
  v5[7] = v70;
  sub_1D78607E8(v73, v74);
LABEL_58:
  uint64_t v75 = (uint64_t *)(v6 + 64);
  unint64_t v76 = *(void *)(v6 + 72);
  if (v5[9] >> 60 == 15)
  {
    if (v76 >> 60 != 15)
    {
      uint64_t v77 = *v75;
      sub_1D7860790(*v75, *(void *)(v6 + 72));
      v5[8] = v77;
      v5[9] = v76;
      goto LABEL_65;
    }
    goto LABEL_63;
  }
  if (v76 >> 60 == 15)
  {
    sub_1D7870C24((uint64_t)(v5 + 8));
LABEL_63:
    *((_OWORD *)v5 + 4) = *(_OWORD *)v75;
    goto LABEL_65;
  }
  uint64_t v78 = *v75;
  sub_1D7860790(*v75, *(void *)(v6 + 72));
  uint64_t v79 = v5[8];
  unint64_t v80 = v5[9];
  v5[8] = v78;
  v5[9] = v76;
  sub_1D78607E8(v79, v80);
LABEL_65:
  uint64_t v81 = (uint64_t *)(v6 + 80);
  unint64_t v64 = *(void *)(v6 + 88);
  if (v5[11] >> 60 == 15)
  {
    if (v64 >> 60 != 15)
    {
      uint64_t v65 = *v81;
LABEL_68:
      sub_1D7860790(v65, v64);
      v5[10] = v65;
      v5[11] = v64;
      goto LABEL_15;
    }
    goto LABEL_71;
  }
  if (v64 >> 60 == 15)
  {
    sub_1D7870C24((uint64_t)(v5 + 10));
LABEL_71:
    *((_OWORD *)v5 + 5) = *(_OWORD *)v81;
    goto LABEL_15;
  }
  uint64_t v82 = *v81;
  sub_1D7860790(*v81, *(void *)(v6 + 88));
  uint64_t v83 = v5[10];
  unint64_t v84 = v5[11];
  v5[10] = v82;
  v5[11] = v64;
  sub_1D78607E8(v83, v84);
LABEL_15:
  uint64_t v23 = (uint64_t *)(((unint64_t)v5 + 103) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v24 = (v6 + 103) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = v23[1];
  uint64_t v26 = *(void *)(v24 + 8);
  uint64_t v27 = v26 & 0x3000000000000000;
  if ((v25 & 0x3000000000000000) != 0)
  {
    if (!v27)
    {
      uint64_t v28 = *(void *)v24;
      sub_1D7860790(*(void *)v24, *(void *)(v24 + 8));
      *uint64_t v23 = v28;
      v23[1] = v26;
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (v27)
  {
    sub_1D78607E8(*v23, v25);
LABEL_20:
    *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
    goto LABEL_21;
  }
  uint64_t v52 = *(void *)v24;
  sub_1D7860790(*(void *)v24, *(void *)(v24 + 8));
  uint64_t v53 = *v23;
  unint64_t v54 = v23[1];
  *uint64_t v23 = v52;
  v23[1] = v26;
  sub_1D78607E8(v53, v54);
LABEL_21:
  uint64_t v29 = *(void *)(a3 + 16);
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v31 = *(unsigned __int8 *)(v30 + 80);
  uint64_t v32 = (void *)(((unint64_t)v23 + v31 + 16) & ~v31);
  uint64_t v33 = (void *)((v24 + v31 + 16) & ~v31);
  uint64_t v34 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v30 + 48);
  int v35 = v34(v32, 1, v29);
  int v36 = v34(v33, 1, v29);
  if (v35)
  {
    if (!v36)
    {
      (*(void (**)(void *, void *, uint64_t))(v30 + 16))(v32, v33, v29);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(v32, 0, 1, v29);
      return a1;
    }
    int v37 = *(_DWORD *)(v30 + 84);
    size_t v38 = *(void *)(v30 + 64);
  }
  else
  {
    if (!v36)
    {
      (*(void (**)(void *, void *, uint64_t))(v30 + 24))(v32, v33, v29);
      return a1;
    }
    uint64_t v40 = *(void (**)(void *, uint64_t))(v30 + 8);
    uint64_t v39 = v30 + 8;
    v40(v32, v29);
    int v37 = *(_DWORD *)(v39 + 76);
    size_t v38 = *(void *)(v39 + 56);
  }
  if (v37) {
    size_t v41 = v38;
  }
  else {
    size_t v41 = v38 + 1;
  }
  memcpy(v32, v33, v41);
  return a1;
}

unsigned char *sub_1D78889AC(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  unint64_t v4 = (_OWORD *)((unint64_t)(a1 + 10) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v5 = (_OWORD *)((unint64_t)(a2 + 10) & 0xFFFFFFFFFFFFFFF8);
  long long v6 = v5[1];
  _OWORD *v4 = *v5;
  v4[1] = v6;
  long long v7 = v5[2];
  long long v8 = v5[3];
  long long v9 = v5[5];
  v4[4] = v5[4];
  void v4[5] = v9;
  v4[2] = v7;
  v4[3] = v8;
  uint64_t v10 = (_OWORD *)(((unint64_t)v4 + 103) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = (_OWORD *)(((unint64_t)v5 + 103) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v10 = *v11;
  uint64_t v12 = *(void *)(a3 + 16);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  unint64_t v15 = (void *)(((unint64_t)v10 + v14 + 16) & ~v14);
  unint64_t v16 = (const void *)(((unint64_t)v11 + v14 + 16) & ~v14);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v16, 1, v12))
  {
    if (*(_DWORD *)(v13 + 84)) {
      size_t v17 = *(void *)(v13 + 64);
    }
    else {
      size_t v17 = *(void *)(v13 + 64) + 1;
    }
    memcpy(v15, v16, v17);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v15, v16, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v15, 0, 1, v12);
  }
  return a1;
}

unsigned char *sub_1D7888B08(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  unint64_t v5 = (void *)((unint64_t)(a1 + 10) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v6 = (unint64_t)(a2 + 10) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = v5[1];
  if ((v7 & 0x3000000000000000) != 0)
  {
LABEL_2:
    long long v8 = *(_OWORD *)(v6 + 16);
    *(_OWORD *)unint64_t v5 = *(_OWORD *)v6;
    *((_OWORD *)v5 + 1) = v8;
    long long v9 = *(_OWORD *)(v6 + 32);
    long long v10 = *(_OWORD *)(v6 + 48);
    long long v11 = *(_OWORD *)(v6 + 80);
    *((_OWORD *)v5 + 4) = *(_OWORD *)(v6 + 64);
    *((_OWORD *)v5 + 5) = v11;
    *((_OWORD *)v5 + 2) = v9;
    *((_OWORD *)v5 + 3) = v10;
    goto LABEL_3;
  }
  uint64_t v26 = *(void *)(v6 + 8);
  if ((v26 & 0x3000000000000000) != 0)
  {
    sub_1D78607E8(*v5, v7);
    sub_1D78607E8(v5[2], v5[3]);
    unint64_t v27 = v5[5];
    if (v27 >> 60 != 15) {
      sub_1D78607E8(v5[4], v27);
    }
    unint64_t v28 = v5[7];
    if (v28 >> 60 != 15) {
      sub_1D78607E8(v5[6], v28);
    }
    unint64_t v29 = v5[9];
    if (v29 >> 60 != 15) {
      sub_1D78607E8(v5[8], v29);
    }
    unint64_t v30 = v5[11];
    if (v30 >> 60 != 15) {
      sub_1D78607E8(v5[10], v30);
    }
    goto LABEL_2;
  }
  uint64_t v35 = *v5;
  *unint64_t v5 = *(void *)v6;
  v5[1] = v26;
  sub_1D78607E8(v35, v7);
  uint64_t v36 = v5[2];
  unint64_t v37 = v5[3];
  *((_OWORD *)v5 + 1) = *(_OWORD *)(v6 + 16);
  sub_1D78607E8(v36, v37);
  size_t v38 = (_OWORD *)(v6 + 32);
  unint64_t v39 = v5[5];
  if (v39 >> 60 == 15) {
    goto LABEL_30;
  }
  unint64_t v40 = *(void *)(v6 + 40);
  if (v40 >> 60 == 15)
  {
    sub_1D7870C24((uint64_t)(v5 + 4));
LABEL_30:
    *((_OWORD *)v5 + 2) = *v38;
    goto LABEL_34;
  }
  uint64_t v42 = v5[4];
  v5[4] = *(void *)v38;
  v5[5] = v40;
  sub_1D78607E8(v42, v39);
LABEL_34:
  uint64_t v43 = (_OWORD *)(v6 + 48);
  unint64_t v44 = v5[7];
  if (v44 >> 60 == 15)
  {
LABEL_37:
    *((_OWORD *)v5 + 3) = *v43;
    goto LABEL_39;
  }
  unint64_t v45 = *(void *)(v6 + 56);
  if (v45 >> 60 == 15)
  {
    sub_1D7870C24((uint64_t)(v5 + 6));
    goto LABEL_37;
  }
  uint64_t v46 = v5[6];
  v5[6] = *(void *)v43;
  v5[7] = v45;
  sub_1D78607E8(v46, v44);
LABEL_39:
  uint64_t v47 = (_OWORD *)(v6 + 64);
  unint64_t v48 = v5[9];
  if (v48 >> 60 == 15)
  {
LABEL_42:
    *((_OWORD *)v5 + 4) = *v47;
    goto LABEL_44;
  }
  unint64_t v49 = *(void *)(v6 + 72);
  if (v49 >> 60 == 15)
  {
    sub_1D7870C24((uint64_t)(v5 + 8));
    goto LABEL_42;
  }
  uint64_t v50 = v5[8];
  v5[8] = *(void *)v47;
  v5[9] = v49;
  sub_1D78607E8(v50, v48);
LABEL_44:
  uint64_t v51 = (_OWORD *)(v6 + 80);
  unint64_t v52 = v5[11];
  if (v52 >> 60 == 15)
  {
LABEL_47:
    *((_OWORD *)v5 + 5) = *v51;
    goto LABEL_3;
  }
  unint64_t v53 = *(void *)(v6 + 88);
  if (v53 >> 60 == 15)
  {
    sub_1D7870C24((uint64_t)(v5 + 10));
    goto LABEL_47;
  }
  uint64_t v54 = v5[10];
  v5[10] = *(void *)v51;
  v5[11] = v53;
  sub_1D78607E8(v54, v52);
LABEL_3:
  uint64_t v12 = (uint64_t *)(((unint64_t)v5 + 103) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v13 = (v6 + 103) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = v12[1];
  if ((v14 & 0x3000000000000000) != 0)
  {
LABEL_6:
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
    goto LABEL_7;
  }
  uint64_t v15 = *(void *)(v13 + 8);
  if ((v15 & 0x3000000000000000) != 0)
  {
    sub_1D78607E8(*v12, v14);
    goto LABEL_6;
  }
  uint64_t v34 = *v12;
  uint64_t *v12 = *(void *)v13;
  v12[1] = v15;
  sub_1D78607E8(v34, v14);
LABEL_7:
  uint64_t v16 = *(void *)(a3 + 16);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(unsigned __int8 *)(v17 + 80);
  long long v19 = (void *)(((unint64_t)v12 + v18 + 16) & ~v18);
  long long v20 = (void *)((v13 + v18 + 16) & ~v18);
  long long v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v17 + 48);
  int v22 = v21(v19, 1, v16);
  int v23 = v21(v20, 1, v16);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(void *, void *, uint64_t))(v17 + 32))(v19, v20, v16);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v19, 0, 1, v16);
      return a1;
    }
    int v24 = *(_DWORD *)(v17 + 84);
    size_t v25 = *(void *)(v17 + 64);
  }
  else
  {
    if (!v23)
    {
      (*(void (**)(void *, void *, uint64_t))(v17 + 40))(v19, v20, v16);
      return a1;
    }
    uint64_t v32 = *(void (**)(void *, uint64_t))(v17 + 8);
    uint64_t v31 = v17 + 8;
    v32(v19, v16);
    int v24 = *(_DWORD *)(v31 + 76);
    size_t v25 = *(void *)(v31 + 56);
  }
  if (v24) {
    size_t v33 = v25;
  }
  else {
    size_t v33 = v25 + 1;
  }
  memcpy(v19, v20, v33);
  return a1;
}

uint64_t sub_1D7888F00(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  int v5 = *(_DWORD *)(v4 + 84);
  if (v5) {
    unsigned int v6 = v5 - 1;
  }
  else {
    unsigned int v6 = 0;
  }
  if (v6 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = v6;
  }
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v5) {
    ++v9;
  }
  if (!a2) {
    return 0;
  }
  int v10 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_28;
  }
  uint64_t v11 = v9 + ((v8 + 120) & ~v8);
  char v12 = 8 * v11;
  if (v11 <= 3)
  {
    unsigned int v15 = ((v10 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      int v13 = *(_DWORD *)&a1[v11];
      if (!v13) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
    if (v15 > 0xFF)
    {
      int v13 = *(unsigned __int16 *)&a1[v11];
      if (!*(_WORD *)&a1[v11]) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
    if (v15 < 2)
    {
LABEL_28:
      if (v6 > 0xFE)
      {
        unsigned int v18 = (*(uint64_t (**)(unint64_t))(v4 + 48))((((((unint64_t)(a1 + 10) & 0xFFFFFFFFFFFFFFF8)
                                                                       + 103) & 0xFFFFFFFFFFFFFFF8)
                                                                     + v8
                                                                     + 16) & ~v8);
        if (v18 >= 2) {
          return v18 - 1;
        }
        else {
          return 0;
        }
      }
      else
      {
        unsigned int v17 = *a1;
        if (v17 >= 2) {
          return v17 - 1;
        }
        else {
          return 0;
        }
      }
    }
  }
  int v13 = a1[v11];
  if (!a1[v11]) {
    goto LABEL_28;
  }
LABEL_20:
  int v16 = (v13 - 1) << v12;
  if (v11 > 3) {
    int v16 = 0;
  }
  if (v11)
  {
    if (v11 > 3) {
      LODWORD(v11) = 4;
    }
    switch((int)v11)
    {
      case 2:
        LODWORD(v11) = *(unsigned __int16 *)a1;
        break;
      case 3:
        LODWORD(v11) = *(unsigned __int16 *)a1 | (a1[2] << 16);
        break;
      case 4:
        LODWORD(v11) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v11) = *a1;
        break;
    }
  }
  return v7 + (v11 | v16) + 1;
}

void sub_1D78890EC(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  if (v9 <= 0xFE) {
    unsigned int v10 = 254;
  }
  else {
    unsigned int v10 = v9;
  }
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  size_t v12 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (!v8) {
    ++v12;
  }
  size_t v13 = ((v11 + 120) & ~v11) + v12;
  BOOL v14 = a3 >= v10;
  unsigned int v15 = a3 - v10;
  if (v15 == 0 || !v14)
  {
LABEL_17:
    if (v10 < a2) {
      goto LABEL_18;
    }
    goto LABEL_25;
  }
  if (v13 > 3)
  {
    int v6 = 1;
    if (v10 < a2) {
      goto LABEL_18;
    }
    goto LABEL_25;
  }
  unsigned int v16 = ((v15 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
  if (!HIWORD(v16))
  {
    if (v16 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v16 > 1;
    }
    goto LABEL_17;
  }
  int v6 = 4;
  if (v10 < a2)
  {
LABEL_18:
    unsigned int v17 = ~v10 + a2;
    if (v13 < 4)
    {
      int v18 = (v17 >> (8 * v13)) + 1;
      if (v13)
      {
        int v19 = v17 & ~(-1 << (8 * v13));
        bzero(a1, v13);
        if (v13 == 3)
        {
          *(_WORD *)a1 = v19;
          a1[2] = BYTE2(v19);
        }
        else if (v13 == 2)
        {
          *(_WORD *)a1 = v19;
        }
        else
        {
          *a1 = v19;
        }
      }
    }
    else
    {
      bzero(a1, v13);
      *(_DWORD *)a1 = v17;
      int v18 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v13] = v18;
        return;
      case 2:
        *(_WORD *)&a1[v13] = v18;
        return;
      case 3:
        goto LABEL_57;
      case 4:
        *(_DWORD *)&a1[v13] = v18;
        return;
      default:
        return;
    }
  }
LABEL_25:
  switch(v6)
  {
    case 1:
      a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 2:
      *(_WORD *)&a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 3:
LABEL_57:
      __break(1u);
      JUMPOUT(0x1D7889400);
    case 4:
      *(_DWORD *)&a1[v13] = 0;
      goto LABEL_29;
    default:
LABEL_29:
      if (a2)
      {
LABEL_30:
        if (v9 > 0xFE)
        {
          long long v20 = (unsigned char *)((((((unint64_t)(a1 + 10) & 0xFFFFFFFFFFFFFFF8) + 103) & 0xFFFFFFFFFFFFFFF8)
                         + v11
                         + 16) & ~v11);
          if (v9 >= a2)
          {
            uint64_t v24 = a2 + 1;
            size_t v25 = *(void (**)(unint64_t, uint64_t))(v7 + 56);
            unint64_t v26 = (((((unint64_t)(a1 + 10) & 0xFFFFFFFFFFFFFFF8) + 103) & 0xFFFFFFFFFFFFFFF8) + v11 + 16) & ~v11;
            v25(v26, v24);
          }
          else
          {
            if (v12 <= 3) {
              int v21 = ~(-1 << (8 * v12));
            }
            else {
              int v21 = -1;
            }
            if (v12)
            {
              int v22 = v21 & (~v9 + a2);
              if (v12 <= 3) {
                int v23 = v12;
              }
              else {
                int v23 = 4;
              }
              bzero(v20, v12);
              switch(v23)
              {
                case 2:
                  *(_WORD *)long long v20 = v22;
                  break;
                case 3:
                  *(_WORD *)long long v20 = v22;
                  v20[2] = BYTE2(v22);
                  break;
                case 4:
                  *(_DWORD *)long long v20 = v22;
                  break;
                default:
                  *long long v20 = v22;
                  break;
              }
            }
          }
        }
        else
        {
          *a1 = a2 + 1;
        }
      }
      return;
  }
}

uint64_t sub_1D7889438()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_1D78894F8(unsigned char *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 144) & (unint64_t)~v6) + *(void *)(v5 + 64) > 0x18)
  {
    uint64_t v9 = *a2;
    *unint64_t v3 = *a2;
    unint64_t v3 = (void *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v10 = ~v6;
    *a1 = *(unsigned char *)a2;
    a1[1] = *((unsigned char *)a2 + 1);
    a1[2] = *((unsigned char *)a2 + 2);
    unint64_t v11 = (unint64_t)(a1 + 10) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v12 = ((unint64_t)a2 + 10) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v13 = *(void *)(v12 + 120);
    if (v13 >= 0xFFFFFFFF) {
      LODWORD(v13) = -1;
    }
    if ((int)v13 - 1 < 0)
    {
      *(unsigned char *)unint64_t v11 = *(unsigned char *)v12;
      uint64_t v20 = *(void *)(v12 + 8);
      unint64_t v21 = *(void *)(v12 + 16);
      sub_1D7860790(v20, v21);
      *(void *)(v11 + 8) = v20;
      *(void *)(v11 + 16) = v21;
      uint64_t v22 = *(void *)(v12 + 24);
      unint64_t v23 = *(void *)(v12 + 32);
      sub_1D7860790(v22, v23);
      *(void *)(v11 + 24) = v22;
      *(void *)(v11 + 32) = v23;
      uint64_t v24 = (uint64_t *)(v12 + 40);
      unint64_t v25 = *(void *)(v12 + 48);
      if (v25 >> 60 == 15)
      {
        *(_OWORD *)(v11 + 40) = *(_OWORD *)v24;
      }
      else
      {
        uint64_t v26 = *v24;
        sub_1D7860790(*v24, *(void *)(v12 + 48));
        *(void *)(v11 + 40) = v26;
        *(void *)(v11 + 48) = v25;
      }
      unint64_t v27 = (uint64_t *)(v12 + 56);
      unint64_t v28 = *(void *)(v12 + 64);
      if (v28 >> 60 == 15)
      {
        *(_OWORD *)(v11 + 56) = *(_OWORD *)v27;
      }
      else
      {
        uint64_t v29 = *v27;
        sub_1D7860790(*v27, *(void *)(v12 + 64));
        *(void *)(v11 + 56) = v29;
        *(void *)(v11 + 64) = v28;
      }
      unint64_t v30 = (uint64_t *)(v12 + 72);
      unint64_t v31 = *(void *)(v12 + 80);
      if (v31 >> 60 == 15)
      {
        *(_OWORD *)(v11 + 72) = *(_OWORD *)v30;
      }
      else
      {
        uint64_t v32 = *v30;
        sub_1D7860790(*v30, *(void *)(v12 + 80));
        *(void *)(v11 + 72) = v32;
        *(void *)(v11 + 80) = v31;
      }
      size_t v33 = (uint64_t *)(v12 + 88);
      unint64_t v34 = *(void *)(v12 + 96);
      if (v34 >> 60 == 15)
      {
        *(_OWORD *)(v11 + 88) = *(_OWORD *)v33;
      }
      else
      {
        uint64_t v35 = *v33;
        sub_1D7860790(*v33, *(void *)(v12 + 96));
        *(void *)(v11 + 88) = v35;
        *(void *)(v11 + 96) = v34;
      }
      uint64_t v36 = *(void *)(v12 + 104);
      unint64_t v37 = *(void *)(v12 + 112);
      sub_1D7860790(v36, v37);
      *(void *)(v11 + 104) = v36;
      *(void *)(v11 + 112) = v37;
      *(void *)(v11 + 120) = *(void *)(v12 + 120);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v14 = *(_OWORD *)v12;
      long long v15 = *(_OWORD *)(v12 + 16);
      long long v16 = *(_OWORD *)(v12 + 48);
      *(_OWORD *)(v11 + 32) = *(_OWORD *)(v12 + 32);
      *(_OWORD *)(v11 + 48) = v16;
      *(_OWORD *)unint64_t v11 = v14;
      *(_OWORD *)(v11 + 16) = v15;
      long long v17 = *(_OWORD *)(v12 + 64);
      long long v18 = *(_OWORD *)(v12 + 80);
      long long v19 = *(_OWORD *)(v12 + 112);
      *(_OWORD *)(v11 + 96) = *(_OWORD *)(v12 + 96);
      *(_OWORD *)(v11 + 112) = v19;
      *(_OWORD *)(v11 + 64) = v17;
      *(_OWORD *)(v11 + 80) = v18;
    }
    size_t v38 = (void *)((v11 + 135) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v39 = (void *)((v12 + 135) & 0xFFFFFFFFFFFFFFF8);
    *size_t v38 = *v39;
    uint64_t v40 = ((unint64_t)v38 + v6 + 8) & v10;
    uint64_t v41 = ((unint64_t)v39 + v6 + 8) & v10;
    uint64_t v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    v42(v40, v41, v4);
  }
  return v3;
}

uint64_t sub_1D78897B8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (void *)((a1 + 10) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v4 = v3[15];
  if (v4 >= 0xFFFFFFFF) {
    LODWORD(v4) = -1;
  }
  if ((int)v4 - 1 < 0)
  {
    sub_1D78607E8(v3[1], v3[2]);
    sub_1D78607E8(v3[3], v3[4]);
    unint64_t v5 = v3[6];
    if (v5 >> 60 != 15) {
      sub_1D78607E8(v3[5], v5);
    }
    unint64_t v6 = v3[8];
    if (v6 >> 60 != 15) {
      sub_1D78607E8(v3[7], v6);
    }
    unint64_t v7 = v3[10];
    if (v7 >> 60 != 15) {
      sub_1D78607E8(v3[9], v7);
    }
    unint64_t v8 = v3[12];
    if (v8 >> 60 != 15) {
      sub_1D78607E8(v3[11], v8);
    }
    sub_1D78607E8(v3[13], v3[14]);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v10 = *(uint64_t (**)(unint64_t))(v9 + 8);
  unint64_t v11 = ((((unint64_t)v3 + 135) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v9 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  return v10(v11);
}

unsigned char *sub_1D78898D0(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  unint64_t v5 = (unint64_t)(a1 + 10) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (unint64_t)(a2 + 10) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = *(void *)(v6 + 120);
  if (v7 >= 0xFFFFFFFF) {
    LODWORD(v7) = -1;
  }
  if ((int)v7 - 1 < 0)
  {
    *(unsigned char *)unint64_t v5 = *(unsigned char *)v6;
    uint64_t v14 = *(void *)(v6 + 8);
    unint64_t v15 = *(void *)(v6 + 16);
    sub_1D7860790(v14, v15);
    *(void *)(v5 + 8) = v14;
    *(void *)(v5 + 16) = v15;
    uint64_t v16 = *(void *)(v6 + 24);
    unint64_t v17 = *(void *)(v6 + 32);
    sub_1D7860790(v16, v17);
    *(void *)(v5 + 24) = v16;
    *(void *)(v5 + 32) = v17;
    long long v18 = (uint64_t *)(v6 + 40);
    unint64_t v19 = *(void *)(v6 + 48);
    if (v19 >> 60 == 15)
    {
      *(_OWORD *)(v5 + 40) = *(_OWORD *)v18;
    }
    else
    {
      uint64_t v20 = *v18;
      sub_1D7860790(*v18, *(void *)(v6 + 48));
      *(void *)(v5 + 40) = v20;
      *(void *)(v5 + 48) = v19;
    }
    unint64_t v21 = (uint64_t *)(v6 + 56);
    unint64_t v22 = *(void *)(v6 + 64);
    if (v22 >> 60 == 15)
    {
      *(_OWORD *)(v5 + 56) = *(_OWORD *)v21;
    }
    else
    {
      uint64_t v23 = *v21;
      sub_1D7860790(*v21, *(void *)(v6 + 64));
      *(void *)(v5 + 56) = v23;
      *(void *)(v5 + 64) = v22;
    }
    uint64_t v24 = (uint64_t *)(v6 + 72);
    unint64_t v25 = *(void *)(v6 + 80);
    if (v25 >> 60 == 15)
    {
      *(_OWORD *)(v5 + 72) = *(_OWORD *)v24;
    }
    else
    {
      uint64_t v26 = *v24;
      sub_1D7860790(*v24, *(void *)(v6 + 80));
      *(void *)(v5 + 72) = v26;
      *(void *)(v5 + 80) = v25;
    }
    unint64_t v27 = (uint64_t *)(v6 + 88);
    unint64_t v28 = *(void *)(v6 + 96);
    if (v28 >> 60 == 15)
    {
      *(_OWORD *)(v5 + 88) = *(_OWORD *)v27;
    }
    else
    {
      uint64_t v29 = *v27;
      sub_1D7860790(*v27, *(void *)(v6 + 96));
      *(void *)(v5 + 88) = v29;
      *(void *)(v5 + 96) = v28;
    }
    uint64_t v30 = *(void *)(v6 + 104);
    unint64_t v31 = *(void *)(v6 + 112);
    sub_1D7860790(v30, v31);
    *(void *)(v5 + 104) = v30;
    *(void *)(v5 + 112) = v31;
    *(void *)(v5 + 120) = *(void *)(v6 + 120);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v8 = *(_OWORD *)v6;
    long long v9 = *(_OWORD *)(v6 + 16);
    long long v10 = *(_OWORD *)(v6 + 48);
    *(_OWORD *)(v5 + 32) = *(_OWORD *)(v6 + 32);
    *(_OWORD *)(v5 + 48) = v10;
    *(_OWORD *)unint64_t v5 = v8;
    *(_OWORD *)(v5 + 16) = v9;
    long long v11 = *(_OWORD *)(v6 + 64);
    long long v12 = *(_OWORD *)(v6 + 80);
    long long v13 = *(_OWORD *)(v6 + 112);
    *(_OWORD *)(v5 + 96) = *(_OWORD *)(v6 + 96);
    *(_OWORD *)(v5 + 112) = v13;
    *(_OWORD *)(v5 + 64) = v11;
    *(_OWORD *)(v5 + 80) = v12;
  }
  uint64_t v32 = (void *)((v5 + 135) & 0xFFFFFFFFFFFFFFF8);
  size_t v33 = (void *)((v6 + 135) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v32 = *v33;
  uint64_t v34 = *(void *)(a3 + 16);
  uint64_t v35 = *(void *)(v34 - 8);
  uint64_t v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 16);
  uint64_t v37 = *(unsigned __int8 *)(v35 + 80);
  uint64_t v38 = ((unint64_t)v32 + v37 + 8) & ~v37;
  uint64_t v39 = ((unint64_t)v33 + v37 + 8) & ~v37;
  swift_bridgeObjectRetain();
  v36(v38, v39, v34);
  return a1;
}

unsigned char *sub_1D7889B08(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  unint64_t v5 = (unint64_t)(a1 + 10) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (unint64_t)(a2 + 10) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = *(void *)(v5 + 120);
  if (v7 >= 0xFFFFFFFF) {
    LODWORD(v7) = -1;
  }
  int v8 = v7 - 1;
  unint64_t v9 = *(void *)(v6 + 120);
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  int v10 = v9 - 1;
  if (v8 < 0)
  {
    if ((v10 & 0x80000000) == 0)
    {
      sub_1D78607E8(*(void *)(v5 + 8), *(void *)(v5 + 16));
      sub_1D78607E8(*(void *)(v5 + 24), *(void *)(v5 + 32));
      unint64_t v17 = *(void *)(v5 + 48);
      if (v17 >> 60 != 15) {
        sub_1D78607E8(*(void *)(v5 + 40), v17);
      }
      unint64_t v18 = *(void *)(v5 + 64);
      if (v18 >> 60 != 15) {
        sub_1D78607E8(*(void *)(v5 + 56), v18);
      }
      unint64_t v19 = *(void *)(v5 + 80);
      if (v19 >> 60 != 15) {
        sub_1D78607E8(*(void *)(v5 + 72), v19);
      }
      unint64_t v20 = *(void *)(v5 + 96);
      if (v20 >> 60 != 15) {
        sub_1D78607E8(*(void *)(v5 + 88), v20);
      }
      sub_1D78607E8(*(void *)(v5 + 104), *(void *)(v5 + 112));
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
    *(unsigned char *)unint64_t v5 = *(unsigned char *)v6;
    uint64_t v27 = *(void *)(v6 + 8);
    unint64_t v28 = *(void *)(v6 + 16);
    sub_1D7860790(v27, v28);
    uint64_t v29 = *(void *)(v5 + 8);
    unint64_t v30 = *(void *)(v5 + 16);
    *(void *)(v5 + 8) = v27;
    *(void *)(v5 + 16) = v28;
    sub_1D78607E8(v29, v30);
    uint64_t v31 = *(void *)(v6 + 24);
    unint64_t v32 = *(void *)(v6 + 32);
    sub_1D7860790(v31, v32);
    uint64_t v33 = *(void *)(v5 + 24);
    unint64_t v34 = *(void *)(v5 + 32);
    *(void *)(v5 + 24) = v31;
    *(void *)(v5 + 32) = v32;
    sub_1D78607E8(v33, v34);
    uint64_t v35 = (uint64_t *)(v6 + 40);
    unint64_t v36 = *(void *)(v6 + 48);
    if (*(void *)(v5 + 48) >> 60 == 15)
    {
      if (v36 >> 60 != 15)
      {
        uint64_t v37 = *v35;
        sub_1D7860790(*v35, *(void *)(v6 + 48));
        *(void *)(v5 + 40) = v37;
        *(void *)(v5 + 48) = v36;
        goto LABEL_38;
      }
    }
    else
    {
      if (v36 >> 60 != 15)
      {
        uint64_t v50 = *v35;
        sub_1D7860790(*v35, *(void *)(v6 + 48));
        uint64_t v51 = *(void *)(v5 + 40);
        unint64_t v52 = *(void *)(v5 + 48);
        *(void *)(v5 + 40) = v50;
        *(void *)(v5 + 48) = v36;
        sub_1D78607E8(v51, v52);
LABEL_38:
        unint64_t v53 = (uint64_t *)(v6 + 56);
        unint64_t v54 = *(void *)(v6 + 64);
        if (*(void *)(v5 + 64) >> 60 == 15)
        {
          if (v54 >> 60 != 15)
          {
            uint64_t v55 = *v53;
            sub_1D7860790(*v53, *(void *)(v6 + 64));
            *(void *)(v5 + 56) = v55;
            *(void *)(v5 + 64) = v54;
            goto LABEL_45;
          }
        }
        else
        {
          if (v54 >> 60 != 15)
          {
            uint64_t v56 = *v53;
            sub_1D7860790(*v53, *(void *)(v6 + 64));
            uint64_t v57 = *(void *)(v5 + 56);
            unint64_t v58 = *(void *)(v5 + 64);
            *(void *)(v5 + 56) = v56;
            *(void *)(v5 + 64) = v54;
            sub_1D78607E8(v57, v58);
LABEL_45:
            uint64_t v59 = (uint64_t *)(v6 + 72);
            unint64_t v60 = *(void *)(v6 + 80);
            if (*(void *)(v5 + 80) >> 60 == 15)
            {
              if (v60 >> 60 != 15)
              {
                uint64_t v61 = *v59;
                sub_1D7860790(*v59, *(void *)(v6 + 80));
                *(void *)(v5 + 72) = v61;
                *(void *)(v5 + 80) = v60;
                goto LABEL_52;
              }
            }
            else
            {
              if (v60 >> 60 != 15)
              {
                uint64_t v62 = *v59;
                sub_1D7860790(*v59, *(void *)(v6 + 80));
                uint64_t v63 = *(void *)(v5 + 72);
                unint64_t v64 = *(void *)(v5 + 80);
                *(void *)(v5 + 72) = v62;
                *(void *)(v5 + 80) = v60;
                sub_1D78607E8(v63, v64);
LABEL_52:
                uint64_t v65 = (uint64_t *)(v6 + 88);
                unint64_t v66 = *(void *)(v6 + 96);
                if (*(void *)(v5 + 96) >> 60 == 15)
                {
                  if (v66 >> 60 != 15)
                  {
                    uint64_t v67 = *v65;
                    sub_1D7860790(*v65, *(void *)(v6 + 96));
                    *(void *)(v5 + 88) = v67;
                    *(void *)(v5 + 96) = v66;
LABEL_59:
                    uint64_t v71 = *(void *)(v6 + 104);
                    unint64_t v72 = *(void *)(v6 + 112);
                    sub_1D7860790(v71, v72);
                    uint64_t v73 = *(void *)(v5 + 104);
                    unint64_t v74 = *(void *)(v5 + 112);
                    *(void *)(v5 + 104) = v71;
                    *(void *)(v5 + 112) = v72;
                    sub_1D78607E8(v73, v74);
                    *(void *)(v5 + 120) = *(void *)(v6 + 120);
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRelease();
                    goto LABEL_60;
                  }
                }
                else
                {
                  if (v66 >> 60 != 15)
                  {
                    uint64_t v68 = *v65;
                    sub_1D7860790(*v65, *(void *)(v6 + 96));
                    uint64_t v69 = *(void *)(v5 + 88);
                    unint64_t v70 = *(void *)(v5 + 96);
                    *(void *)(v5 + 88) = v68;
                    *(void *)(v5 + 96) = v66;
                    sub_1D78607E8(v69, v70);
                    goto LABEL_59;
                  }
                  sub_1D7870C24(v5 + 88);
                }
                *(_OWORD *)(v5 + 88) = *(_OWORD *)v65;
                goto LABEL_59;
              }
              sub_1D7870C24(v5 + 72);
            }
            *(_OWORD *)(v5 + 72) = *(_OWORD *)v59;
            goto LABEL_52;
          }
          sub_1D7870C24(v5 + 56);
        }
        *(_OWORD *)(v5 + 56) = *(_OWORD *)v53;
        goto LABEL_45;
      }
      sub_1D7870C24(v5 + 40);
    }
    *(_OWORD *)(v5 + 40) = *(_OWORD *)v35;
    goto LABEL_38;
  }
  if ((v10 & 0x80000000) == 0)
  {
LABEL_19:
    long long v21 = *(_OWORD *)v6;
    long long v22 = *(_OWORD *)(v6 + 16);
    long long v23 = *(_OWORD *)(v6 + 48);
    *(_OWORD *)(v5 + 32) = *(_OWORD *)(v6 + 32);
    *(_OWORD *)(v5 + 48) = v23;
    *(_OWORD *)unint64_t v5 = v21;
    *(_OWORD *)(v5 + 16) = v22;
    long long v24 = *(_OWORD *)(v6 + 64);
    long long v25 = *(_OWORD *)(v6 + 80);
    long long v26 = *(_OWORD *)(v6 + 112);
    *(_OWORD *)(v5 + 96) = *(_OWORD *)(v6 + 96);
    *(_OWORD *)(v5 + 112) = v26;
    *(_OWORD *)(v5 + 64) = v24;
    *(_OWORD *)(v5 + 80) = v25;
    goto LABEL_60;
  }
  *(unsigned char *)unint64_t v5 = *(unsigned char *)v6;
  uint64_t v11 = *(void *)(v6 + 8);
  unint64_t v12 = *(void *)(v6 + 16);
  sub_1D7860790(v11, v12);
  *(void *)(v5 + 8) = v11;
  *(void *)(v5 + 16) = v12;
  uint64_t v13 = *(void *)(v6 + 24);
  unint64_t v14 = *(void *)(v6 + 32);
  sub_1D7860790(v13, v14);
  *(void *)(v5 + 24) = v13;
  *(void *)(v5 + 32) = v14;
  unint64_t v15 = (uint64_t *)(v6 + 40);
  unint64_t v16 = *(void *)(v6 + 48);
  if (v16 >> 60 == 15)
  {
    *(_OWORD *)(v5 + 40) = *(_OWORD *)v15;
  }
  else
  {
    uint64_t v38 = *v15;
    sub_1D7860790(*v15, *(void *)(v6 + 48));
    *(void *)(v5 + 40) = v38;
    *(void *)(v5 + 48) = v16;
  }
  uint64_t v39 = (uint64_t *)(v6 + 56);
  unint64_t v40 = *(void *)(v6 + 64);
  if (v40 >> 60 == 15)
  {
    *(_OWORD *)(v5 + 56) = *(_OWORD *)v39;
  }
  else
  {
    uint64_t v41 = *v39;
    sub_1D7860790(*v39, *(void *)(v6 + 64));
    *(void *)(v5 + 56) = v41;
    *(void *)(v5 + 64) = v40;
  }
  uint64_t v42 = (uint64_t *)(v6 + 72);
  unint64_t v43 = *(void *)(v6 + 80);
  if (v43 >> 60 == 15)
  {
    *(_OWORD *)(v5 + 72) = *(_OWORD *)v42;
  }
  else
  {
    uint64_t v44 = *v42;
    sub_1D7860790(*v42, *(void *)(v6 + 80));
    *(void *)(v5 + 72) = v44;
    *(void *)(v5 + 80) = v43;
  }
  unint64_t v45 = (uint64_t *)(v6 + 88);
  unint64_t v46 = *(void *)(v6 + 96);
  if (v46 >> 60 == 15)
  {
    *(_OWORD *)(v5 + 88) = *(_OWORD *)v45;
  }
  else
  {
    uint64_t v47 = *v45;
    sub_1D7860790(*v45, *(void *)(v6 + 96));
    *(void *)(v5 + 88) = v47;
    *(void *)(v5 + 96) = v46;
  }
  uint64_t v48 = *(void *)(v6 + 104);
  unint64_t v49 = *(void *)(v6 + 112);
  sub_1D7860790(v48, v49);
  *(void *)(v5 + 104) = v48;
  *(void *)(v5 + 112) = v49;
  *(void *)(v5 + 120) = *(void *)(v6 + 120);
  swift_bridgeObjectRetain();
LABEL_60:
  uint64_t v75 = (void *)((v5 + 135) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v76 = (void *)((v6 + 135) & 0xFFFFFFFFFFFFFFF8);
  void *v75 = *v76;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v77 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v77 + 24))(((unint64_t)v75 + *(unsigned __int8 *)(v77 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80), ((unint64_t)v76 + *(unsigned __int8 *)(v77 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80));
  return a1;
}

unsigned char *sub_1D788A048(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  unint64_t v4 = (_OWORD *)((unint64_t)(a1 + 10) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v5 = (long long *)((unint64_t)(a2 + 10) & 0xFFFFFFFFFFFFFFF8);
  long long v6 = *v5;
  long long v7 = v5[1];
  long long v8 = v5[3];
  v4[2] = v5[2];
  v4[3] = v8;
  _OWORD *v4 = v6;
  v4[1] = v7;
  long long v9 = v5[4];
  long long v10 = v5[5];
  long long v11 = v5[7];
  v4[6] = v5[6];
  v4[7] = v11;
  v4[4] = v9;
  void v4[5] = v10;
  unint64_t v12 = (void *)(((unint64_t)v4 + 135) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (void *)(((unint64_t)v5 + 135) & 0xFFFFFFFFFFFFFFF8);
  void *v12 = *v13;
  uint64_t v14 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v14 + 32))(((unint64_t)v12 + *(unsigned __int8 *)(v14 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80), ((unint64_t)v13 + *(unsigned __int8 *)(v14 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  return a1;
}

unsigned char *sub_1D788A110(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  unint64_t v5 = (unint64_t)(a1 + 10) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (unint64_t)(a2 + 10) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = *(void *)(v5 + 120);
  if (v7 >= 0xFFFFFFFF) {
    LODWORD(v7) = -1;
  }
  if ((int)v7 - 1 >= 0) {
    goto LABEL_16;
  }
  unint64_t v8 = *(void *)(v6 + 120);
  if (v8 >= 0xFFFFFFFF) {
    LODWORD(v8) = -1;
  }
  if ((int)v8 - 1 < 0)
  {
    *(unsigned char *)unint64_t v5 = *(unsigned char *)v6;
    uint64_t v23 = *(void *)(v5 + 8);
    unint64_t v24 = *(void *)(v5 + 16);
    *(_OWORD *)(v5 + 8) = *(_OWORD *)(v6 + 8);
    sub_1D78607E8(v23, v24);
    uint64_t v25 = *(void *)(v5 + 24);
    unint64_t v26 = *(void *)(v5 + 32);
    *(_OWORD *)(v5 + 24) = *(_OWORD *)(v6 + 24);
    sub_1D78607E8(v25, v26);
    uint64_t v27 = (void *)(v6 + 40);
    unint64_t v28 = *(void *)(v5 + 48);
    if (v28 >> 60 != 15)
    {
      unint64_t v29 = *(void *)(v6 + 48);
      if (v29 >> 60 != 15)
      {
        uint64_t v30 = *(void *)(v5 + 40);
        *(void *)(v5 + 40) = *v27;
        *(void *)(v5 + 48) = v29;
        sub_1D78607E8(v30, v28);
LABEL_23:
        uint64_t v31 = (void *)(v6 + 56);
        unint64_t v32 = *(void *)(v5 + 64);
        if (v32 >> 60 != 15)
        {
          unint64_t v33 = *(void *)(v6 + 64);
          if (v33 >> 60 != 15)
          {
            uint64_t v34 = *(void *)(v5 + 56);
            *(void *)(v5 + 56) = *v31;
            *(void *)(v5 + 64) = v33;
            sub_1D78607E8(v34, v32);
LABEL_28:
            uint64_t v35 = (void *)(v6 + 72);
            unint64_t v36 = *(void *)(v5 + 80);
            if (v36 >> 60 != 15)
            {
              unint64_t v37 = *(void *)(v6 + 80);
              if (v37 >> 60 != 15)
              {
                uint64_t v38 = *(void *)(v5 + 72);
                *(void *)(v5 + 72) = *v35;
                *(void *)(v5 + 80) = v37;
                sub_1D78607E8(v38, v36);
LABEL_33:
                uint64_t v39 = (void *)(v6 + 88);
                unint64_t v40 = *(void *)(v5 + 96);
                if (v40 >> 60 != 15)
                {
                  unint64_t v41 = *(void *)(v6 + 96);
                  if (v41 >> 60 != 15)
                  {
                    uint64_t v42 = *(void *)(v5 + 88);
                    *(void *)(v5 + 88) = *v39;
                    *(void *)(v5 + 96) = v41;
                    sub_1D78607E8(v42, v40);
                    goto LABEL_38;
                  }
                  sub_1D7870C24(v5 + 88);
                }
                *(_OWORD *)(v5 + 88) = *(_OWORD *)v39;
LABEL_38:
                uint64_t v43 = *(void *)(v5 + 104);
                unint64_t v44 = *(void *)(v5 + 112);
                *(_OWORD *)(v5 + 104) = *(_OWORD *)(v6 + 104);
                sub_1D78607E8(v43, v44);
                *(void *)(v5 + 120) = *(void *)(v6 + 120);
                swift_bridgeObjectRelease();
                goto LABEL_17;
              }
              sub_1D7870C24(v5 + 72);
            }
            *(_OWORD *)(v5 + 72) = *(_OWORD *)v35;
            goto LABEL_33;
          }
          sub_1D7870C24(v5 + 56);
        }
        *(_OWORD *)(v5 + 56) = *(_OWORD *)v31;
        goto LABEL_28;
      }
      sub_1D7870C24(v5 + 40);
    }
    *(_OWORD *)(v5 + 40) = *(_OWORD *)v27;
    goto LABEL_23;
  }
  sub_1D78607E8(*(void *)(v5 + 8), *(void *)(v5 + 16));
  sub_1D78607E8(*(void *)(v5 + 24), *(void *)(v5 + 32));
  unint64_t v9 = *(void *)(v5 + 48);
  if (v9 >> 60 != 15) {
    sub_1D78607E8(*(void *)(v5 + 40), v9);
  }
  unint64_t v10 = *(void *)(v5 + 64);
  if (v10 >> 60 != 15) {
    sub_1D78607E8(*(void *)(v5 + 56), v10);
  }
  unint64_t v11 = *(void *)(v5 + 80);
  if (v11 >> 60 != 15) {
    sub_1D78607E8(*(void *)(v5 + 72), v11);
  }
  unint64_t v12 = *(void *)(v5 + 96);
  if (v12 >> 60 != 15) {
    sub_1D78607E8(*(void *)(v5 + 88), v12);
  }
  sub_1D78607E8(*(void *)(v5 + 104), *(void *)(v5 + 112));
  swift_bridgeObjectRelease();
LABEL_16:
  long long v13 = *(_OWORD *)v6;
  long long v14 = *(_OWORD *)(v6 + 16);
  long long v15 = *(_OWORD *)(v6 + 48);
  *(_OWORD *)(v5 + 32) = *(_OWORD *)(v6 + 32);
  *(_OWORD *)(v5 + 48) = v15;
  *(_OWORD *)unint64_t v5 = v13;
  *(_OWORD *)(v5 + 16) = v14;
  long long v16 = *(_OWORD *)(v6 + 64);
  long long v17 = *(_OWORD *)(v6 + 80);
  long long v18 = *(_OWORD *)(v6 + 112);
  *(_OWORD *)(v5 + 96) = *(_OWORD *)(v6 + 96);
  *(_OWORD *)(v5 + 112) = v18;
  *(_OWORD *)(v5 + 64) = v16;
  *(_OWORD *)(v5 + 80) = v17;
LABEL_17:
  unint64_t v19 = (void *)((v5 + 135) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v20 = (void *)((v6 + 135) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v19 = *v20;
  swift_bridgeObjectRelease();
  uint64_t v21 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v21 + 40))(((unint64_t)v19 + *(unsigned __int8 *)(v21 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80), ((unint64_t)v20 + *(unsigned __int8 *)(v21 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
  return a1;
}

uint64_t sub_1D788A420(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v9 = a2 - v8;
  if (a2 <= v8) {
    goto LABEL_23;
  }
  uint64_t v10 = ((v6 + 144) & ~v6) + v7;
  char v11 = 8 * (((v6 - 112) & ~(_BYTE)v6) + v7);
  if (v10 <= 3)
  {
    unsigned int v14 = ((v9 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v14))
    {
      int v12 = *(_DWORD *)((char *)a1 + v10);
      if (!v12) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v14 > 0xFF)
    {
      int v12 = *(unsigned __int16 *)((char *)a1 + v10);
      if (!*(unsigned __int16 *)((char *)a1 + v10)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v14 < 2)
    {
LABEL_23:
      long long v16 = (unint64_t *)((((unint64_t)(a1 + 5) & 0xFFFFFFFFFFFFFFF8) + 135) & 0xFFFFFFFFFFFFFFF8);
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v16 + v6 + 8) & ~v6);
      }
      unint64_t v17 = *v16;
      if (v17 >= 0xFFFFFFFF) {
        LODWORD(v17) = -1;
      }
      return (v17 + 1);
    }
  }
  int v12 = *((unsigned __int8 *)a1 + v10);
  if (!*((unsigned char *)a1 + v10)) {
    goto LABEL_23;
  }
LABEL_15:
  int v15 = (v12 - 1) << v11;
  if (v10 > 3) {
    int v15 = 0;
  }
  if (v10)
  {
    if (v10 > 3) {
      LODWORD(v10) = 4;
    }
    switch((int)v10)
    {
      case 2:
        LODWORD(v10) = *a1;
        break;
      case 3:
        LODWORD(v10) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v10) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v10) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v8 + (v10 | v15) + 1;
}

void sub_1D788A5D0(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v7 + 84);
  }
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  size_t v11 = ((v10 + 144) & ~v10) + *(void *)(v6 + 64);
  BOOL v12 = a3 >= v9;
  unsigned int v13 = a3 - v9;
  if (v13 != 0 && v12)
  {
    if (v11 <= 3)
    {
      unsigned int v17 = ((v13 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
      if (HIWORD(v17))
      {
        int v14 = 4;
      }
      else if (v17 >= 0x100)
      {
        int v14 = 2;
      }
      else
      {
        int v14 = v17 > 1;
      }
    }
    else
    {
      int v14 = 1;
    }
  }
  else
  {
    int v14 = 0;
  }
  if (v9 < a2)
  {
    unsigned int v15 = ~v9 + a2;
    if (v11 < 4)
    {
      int v16 = (v15 >> (8 * (((v10 - 112) & ~(_BYTE)v10) + *(unsigned char *)(v6 + 64)))) + 1;
      if (v11)
      {
        int v18 = v15 & ~(-1 << (8 * (((v10 - 112) & ~(_BYTE)v10) + *(unsigned char *)(v6 + 64))));
        bzero(a1, v11);
        if (v11 == 3)
        {
          *(_WORD *)a1 = v18;
          a1[2] = BYTE2(v18);
        }
        else if (v11 == 2)
        {
          *(_WORD *)a1 = v18;
        }
        else
        {
          *a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v15;
      int v16 = 1;
    }
    switch(v14)
    {
      case 1:
        a1[v11] = v16;
        return;
      case 2:
        *(_WORD *)&a1[v11] = v16;
        return;
      case 3:
        goto LABEL_42;
      case 4:
        *(_DWORD *)&a1[v11] = v16;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v11] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v11] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x1D788A83CLL);
    case 4:
      *(_DWORD *)&a1[v11] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        unint64_t v19 = (void *)((((unint64_t)(a1 + 10) & 0xFFFFFFFFFFFFFFF8) + 135) & 0xFFFFFFFFFFFFFFF8);
        if ((v8 & 0x80000000) != 0)
        {
          uint64_t v21 = *(void (**)(unint64_t))(v7 + 56);
          v21(((unint64_t)v19 + v10 + 8) & ~v10);
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v20 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v20 = a2 - 1;
          }
          *unint64_t v19 = v20;
        }
      }
      return;
  }
}

ValueMetadata *type metadata accessor for HPKEEncryptionParamsAlgorithmIdentifier()
{
  return &type metadata for HPKEEncryptionParamsAlgorithmIdentifier;
}

ValueMetadata *type metadata accessor for HPKEEncryptedMessageAlgorithm()
{
  return &type metadata for HPKEEncryptedMessageAlgorithm;
}

uint64_t sub_1D788A88C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 40);
}

uint64_t sub_1D788A894()
{
  uint64_t result = sub_1D7A9C9A8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_1D788A944(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3 = (void *)a1;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7;
  if (*(_DWORD *)(v5 + 84)) {
    uint64_t v9 = *(void *)(v5 + 64);
  }
  else {
    uint64_t v9 = *(void *)(v5 + 64) + 1;
  }
  unint64_t v10 = ((v7 + 120) & ~(unint64_t)v7) + v9;
  int v11 = v7 & 0x100000;
  if (v8 > 7 || v11 != 0 || v10 > 0x18)
  {
    uint64_t v14 = *(void *)a2;
    *unint64_t v3 = *(void *)a2;
    unint64_t v3 = (void *)(v14 + ((v8 & 0xF8 ^ 0x1F8) & (v8 + 16)));
    swift_retain();
  }
  else
  {
    size_t __n = v9;
    *(unsigned char *)a1 = *(unsigned char *)a2;
    unint64_t v15 = a1 & 0xFFFFFFFFFFFFFFF8;
    int v16 = (void *)(a2 & 0xFFFFFFFFFFFFFFF8);
    int v18 = (uint64_t *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
    uint64_t v17 = *v18;
    unint64_t v19 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
    sub_1D7860790(*v18, v19);
    *(void *)(v15 + 8) = v17;
    *(void *)(v15 + 16) = v19;
    uint64_t v20 = v16[3];
    unint64_t v21 = v16[4];
    sub_1D7860790(v20, v21);
    *(void *)(v15 + 24) = v20;
    *(void *)(v15 + 32) = v21;
    long long v22 = v16 + 5;
    unint64_t v23 = v16[6];
    if (v23 >> 60 == 15)
    {
      *(_OWORD *)(v15 + 40) = *(_OWORD *)v22;
    }
    else
    {
      uint64_t v24 = *v22;
      sub_1D7860790(*v22, v16[6]);
      *(void *)(v15 + 40) = v24;
      *(void *)(v15 + 48) = v23;
    }
    uint64_t v25 = v18 + 6;
    unint64_t v26 = v18[7];
    if (v26 >> 60 == 15)
    {
      *(_OWORD *)(v15 + 56) = *(_OWORD *)v25;
    }
    else
    {
      uint64_t v27 = *v25;
      sub_1D7860790(*v25, v18[7]);
      *(void *)(v15 + 56) = v27;
      *(void *)(v15 + 64) = v26;
    }
    unint64_t v28 = v18 + 8;
    unint64_t v29 = v18[9];
    uint64_t v43 = v4;
    if (v29 >> 60 == 15)
    {
      *(_OWORD *)(v15 + 72) = *(_OWORD *)v28;
    }
    else
    {
      uint64_t v30 = *v28;
      sub_1D7860790(*v28, v29);
      *(void *)(v15 + 72) = v30;
      *(void *)(v15 + 80) = v29;
    }
    uint64_t v31 = ~v8;
    unint64_t v32 = v18 + 10;
    unint64_t v33 = v18[11];
    if (v33 >> 60 == 15)
    {
      *(_OWORD *)(v15 + 88) = *(_OWORD *)v32;
    }
    else
    {
      uint64_t v34 = *v32;
      sub_1D7860790(*v32, v18[11]);
      *(void *)(v15 + 88) = v34;
      *(void *)(v15 + 96) = v33;
    }
    uint64_t v35 = (void *)((v15 + 111) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v36 = (uint64_t *)(((unint64_t)v16 + 111) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v37 = *v36;
    unint64_t v38 = v36[1];
    sub_1D7860790(*v36, v38);
    *uint64_t v35 = v37;
    v35[1] = v38;
    uint64_t v39 = (void *)(((unint64_t)v35 + v8 + 16) & v31);
    unint64_t v40 = (const void *)(((unint64_t)v36 + v8 + 16) & v31);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(v40, 1, v43))
    {
      memcpy(v39, v40, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v39, v40, v43);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v39, 0, 1, v43);
    }
  }
  return v3;
}

uint64_t sub_1D788AC18(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (void *)(a1 & 0xFFFFFFFFFFFFFFF8);
  sub_1D78607E8(*(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8), *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 16));
  sub_1D78607E8(v3[3], v3[4]);
  unint64_t v4 = v3[6];
  if (v4 >> 60 != 15) {
    sub_1D78607E8(v3[5], v4);
  }
  unint64_t v5 = v3[8];
  if (v5 >> 60 != 15) {
    sub_1D78607E8(v3[7], v5);
  }
  unint64_t v6 = v3[10];
  if (v6 >> 60 != 15) {
    sub_1D78607E8(v3[9], v6);
  }
  unint64_t v7 = v3[12];
  if (v7 >> 60 != 15) {
    sub_1D78607E8(v3[11], v7);
  }
  unint64_t v8 = ((unint64_t)v3 + 111) & 0xFFFFFFFFFFFFFFF8;
  sub_1D78607E8(*(void *)v8, *(void *)(v8 + 8));
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  unint64_t v11 = (v8 + *(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v14 = v10;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v10 + 48))(v11, 1, v9);
  if (!result)
  {
    unsigned int v13 = *(uint64_t (**)(unint64_t, uint64_t))(v14 + 8);
    return v13(v11, v9);
  }
  return result;
}

unint64_t sub_1D788AD60(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unint64_t v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (void *)(a2 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v7 = *(void *)v8;
  unint64_t v9 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  sub_1D7860790(*(void *)v8, v9);
  *(void *)(v5 + 8) = v7;
  *(void *)(v5 + 16) = v9;
  uint64_t v10 = v6[3];
  unint64_t v11 = v6[4];
  sub_1D7860790(v10, v11);
  *(void *)(v5 + 24) = v10;
  *(void *)(v5 + 32) = v11;
  BOOL v12 = v6 + 5;
  unint64_t v13 = v6[6];
  if (v13 >> 60 == 15)
  {
    *(_OWORD *)(v5 + 40) = *(_OWORD *)v12;
  }
  else
  {
    uint64_t v14 = *v12;
    sub_1D7860790(*v12, v6[6]);
    *(void *)(v5 + 40) = v14;
    *(void *)(v5 + 48) = v13;
  }
  unint64_t v15 = (uint64_t *)(v8 + 48);
  unint64_t v16 = *(void *)(v8 + 56);
  if (v16 >> 60 == 15)
  {
    *(_OWORD *)(v5 + 56) = *(_OWORD *)v15;
  }
  else
  {
    uint64_t v17 = *v15;
    sub_1D7860790(*v15, *(void *)(v8 + 56));
    *(void *)(v5 + 56) = v17;
    *(void *)(v5 + 64) = v16;
  }
  int v18 = (uint64_t *)(v8 + 64);
  unint64_t v19 = *(void *)(v8 + 72);
  if (v19 >> 60 == 15)
  {
    *(_OWORD *)(v5 + 72) = *(_OWORD *)v18;
  }
  else
  {
    uint64_t v20 = *v18;
    sub_1D7860790(*v18, *(void *)(v8 + 72));
    *(void *)(v5 + 72) = v20;
    *(void *)(v5 + 80) = v19;
  }
  unint64_t v21 = (uint64_t *)(v8 + 80);
  unint64_t v22 = *(void *)(v8 + 88);
  if (v22 >> 60 == 15)
  {
    *(_OWORD *)(v5 + 88) = *(_OWORD *)v21;
  }
  else
  {
    uint64_t v23 = *v21;
    sub_1D7860790(*v21, *(void *)(v8 + 88));
    *(void *)(v5 + 88) = v23;
    *(void *)(v5 + 96) = v22;
  }
  uint64_t v24 = (void *)((v5 + 111) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v25 = (uint64_t *)(((unint64_t)v6 + 111) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v26 = *v25;
  unint64_t v27 = v25[1];
  sub_1D7860790(*v25, v27);
  *uint64_t v24 = v26;
  v24[1] = v27;
  uint64_t v28 = *(void *)(a3 + 16);
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(unsigned __int8 *)(v29 + 80);
  uint64_t v31 = (void *)(((unint64_t)v24 + v30 + 16) & ~v30);
  unint64_t v32 = (const void *)(((unint64_t)v25 + v30 + 16) & ~v30);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v29 + 48))(v32, 1, v28))
  {
    if (*(_DWORD *)(v29 + 84)) {
      size_t v33 = *(void *)(v29 + 64);
    }
    else {
      size_t v33 = *(void *)(v29 + 64) + 1;
    }
    memcpy(v31, v32, v33);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v29 + 16))(v31, v32, v28);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(v31, 0, 1, v28);
  }
  return a1;
}

unint64_t sub_1D788AFB8(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unint64_t v5 = (void *)(a1 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v6 = (void *)(a2 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v7 = *(void *)v8;
  unint64_t v9 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  sub_1D7860790(*(void *)v8, v9);
  uint64_t v10 = v5[1];
  unint64_t v11 = v5[2];
  v5[1] = v7;
  void v5[2] = v9;
  sub_1D78607E8(v10, v11);
  uint64_t v12 = v6[3];
  unint64_t v13 = v6[4];
  sub_1D7860790(v12, v13);
  uint64_t v14 = v5[3];
  unint64_t v15 = v5[4];
  v5[3] = v12;
  v5[4] = v13;
  sub_1D78607E8(v14, v15);
  unint64_t v16 = v6 + 5;
  unint64_t v17 = v6[6];
  if (v5[6] >> 60 == 15)
  {
    if (v17 >> 60 != 15)
    {
      uint64_t v18 = *v16;
      sub_1D7860790(*v16, v6[6]);
      v5[5] = v18;
      v5[6] = v17;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v17 >> 60 == 15)
  {
    sub_1D7870C24((uint64_t)(v5 + 5));
LABEL_6:
    *(_OWORD *)(v5 + 5) = *(_OWORD *)v16;
    goto LABEL_8;
  }
  uint64_t v19 = *v16;
  sub_1D7860790(*v16, v6[6]);
  uint64_t v20 = v5[5];
  unint64_t v21 = v5[6];
  v5[5] = v19;
  v5[6] = v17;
  sub_1D78607E8(v20, v21);
LABEL_8:
  unint64_t v22 = (uint64_t *)(v8 + 48);
  unint64_t v23 = *(void *)(v8 + 56);
  if (v5[8] >> 60 == 15)
  {
    if (v23 >> 60 != 15)
    {
      uint64_t v24 = *v22;
      sub_1D7860790(*v22, *(void *)(v8 + 56));
      v5[7] = v24;
      v5[8] = v23;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v23 >> 60 == 15)
  {
    sub_1D7870C24((uint64_t)(v5 + 7));
LABEL_13:
    *(_OWORD *)(v5 + 7) = *(_OWORD *)v22;
    goto LABEL_15;
  }
  uint64_t v25 = *v22;
  sub_1D7860790(*v22, *(void *)(v8 + 56));
  uint64_t v26 = v5[7];
  unint64_t v27 = v5[8];
  v5[7] = v25;
  v5[8] = v23;
  sub_1D78607E8(v26, v27);
LABEL_15:
  uint64_t v28 = (uint64_t *)(v8 + 64);
  unint64_t v29 = *(void *)(v8 + 72);
  if (v5[10] >> 60 == 15)
  {
    if (v29 >> 60 != 15)
    {
      uint64_t v30 = *v28;
      sub_1D7860790(*v28, *(void *)(v8 + 72));
      v5[9] = v30;
      v5[10] = v29;
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  if (v29 >> 60 == 15)
  {
    sub_1D7870C24((uint64_t)(v5 + 9));
LABEL_20:
    *(_OWORD *)(v5 + 9) = *(_OWORD *)v28;
    goto LABEL_22;
  }
  uint64_t v31 = *v28;
  sub_1D7860790(*v28, *(void *)(v8 + 72));
  uint64_t v32 = v5[9];
  unint64_t v33 = v5[10];
  v5[9] = v31;
  v5[10] = v29;
  sub_1D78607E8(v32, v33);
LABEL_22:
  uint64_t v34 = (uint64_t *)(v8 + 80);
  unint64_t v35 = *(void *)(v8 + 88);
  if (v5[12] >> 60 == 15)
  {
    if (v35 >> 60 != 15)
    {
      uint64_t v36 = *v34;
      sub_1D7860790(*v34, *(void *)(v8 + 88));
      v5[11] = v36;
      v5[12] = v35;
      goto LABEL_29;
    }
    goto LABEL_27;
  }
  if (v35 >> 60 == 15)
  {
    sub_1D7870C24((uint64_t)(v5 + 11));
LABEL_27:
    *(_OWORD *)(v5 + 11) = *(_OWORD *)v34;
    goto LABEL_29;
  }
  uint64_t v37 = *v34;
  sub_1D7860790(*v34, *(void *)(v8 + 88));
  uint64_t v38 = v5[11];
  unint64_t v39 = v5[12];
  v5[11] = v37;
  v5[12] = v35;
  sub_1D78607E8(v38, v39);
LABEL_29:
  unint64_t v40 = (uint64_t *)(((unint64_t)v5 + 111) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v41 = (uint64_t *)(((unint64_t)v6 + 111) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v42 = *v41;
  unint64_t v43 = v41[1];
  sub_1D7860790(*v41, v43);
  uint64_t v44 = *v40;
  unint64_t v45 = v40[1];
  *unint64_t v40 = v42;
  v40[1] = v43;
  sub_1D78607E8(v44, v45);
  uint64_t v46 = *(void *)(a3 + 16);
  uint64_t v47 = *(void *)(v46 - 8);
  uint64_t v48 = *(unsigned __int8 *)(v47 + 80);
  unint64_t v49 = (void *)(((unint64_t)v40 + v48 + 16) & ~v48);
  uint64_t v50 = (void *)(((unint64_t)v41 + v48 + 16) & ~v48);
  uint64_t v51 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v47 + 48);
  LODWORD(v41) = v51(v49, 1, v46);
  int v52 = v51(v50, 1, v46);
  if (v41)
  {
    if (!v52)
    {
      (*(void (**)(void *, void *, uint64_t))(v47 + 16))(v49, v50, v46);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v47 + 56))(v49, 0, 1, v46);
      return a1;
    }
    int v53 = *(_DWORD *)(v47 + 84);
    size_t v54 = *(void *)(v47 + 64);
  }
  else
  {
    if (!v52)
    {
      (*(void (**)(void *, void *, uint64_t))(v47 + 24))(v49, v50, v46);
      return a1;
    }
    uint64_t v56 = *(void (**)(void *, uint64_t))(v47 + 8);
    uint64_t v55 = v47 + 8;
    v56(v49, v46);
    int v53 = *(_DWORD *)(v55 + 76);
    size_t v54 = *(void *)(v55 + 56);
  }
  if (v53) {
    size_t v57 = v54;
  }
  else {
    size_t v57 = v54 + 1;
  }
  memcpy(v49, v50, v57);
  return a1;
}

unint64_t sub_1D788B3A8(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unint64_t v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  long long v5 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 56);
  long long v6 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 72);
  long long v7 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 88);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
  *(_OWORD *)(v4 + 88) = v7;
  *(_OWORD *)(v4 + 72) = v6;
  *(_OWORD *)(v4 + 56) = v5;
  long long v8 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(_OWORD *)(v4 + 8) = v8;
  unint64_t v9 = (_OWORD *)(((a1 & 0xFFFFFFFFFFFFFFF8) + 111) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = (_OWORD *)(((a2 & 0xFFFFFFFFFFFFFFF8) + 111) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v9 = *v10;
  uint64_t v11 = *(void *)(a3 + 16);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v14 = (void *)(((unint64_t)v9 + v13 + 16) & ~v13);
  unint64_t v15 = (const void *)(((unint64_t)v10 + v13 + 16) & ~v13);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v15, 1, v11))
  {
    if (*(_DWORD *)(v12 + 84)) {
      size_t v16 = *(void *)(v12 + 64);
    }
    else {
      size_t v16 = *(void *)(v12 + 64) + 1;
    }
    memcpy(v14, v15, v16);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v14, v15, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v14, 0, 1, v11);
  }
  return a1;
}

unint64_t sub_1D788B500(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unint64_t v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (a1 & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v6 = *(void *)v7;
  unint64_t v8 = a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
  unint64_t v10 = *(void *)(v5 + 16);
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v9;
  sub_1D78607E8(v6, v10);
  uint64_t v11 = *(void *)(v5 + 24);
  unint64_t v12 = *(void *)(v5 + 32);
  *(_OWORD *)(v5 + 24) = *(_OWORD *)(v8 + 24);
  sub_1D78607E8(v11, v12);
  uint64_t v13 = (_OWORD *)(v8 + 40);
  unint64_t v14 = *(void *)(v5 + 48);
  if (v14 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v15 = *(void *)(v8 + 48);
  if (v15 >> 60 == 15)
  {
    sub_1D7870C24(v5 + 40);
LABEL_4:
    *(_OWORD *)(v5 + 40) = *v13;
    goto LABEL_6;
  }
  uint64_t v16 = *(void *)(v7 + 32);
  *(void *)(v7 + 32) = *(void *)v13;
  *(void *)(v7 + 40) = v15;
  sub_1D78607E8(v16, v14);
LABEL_6:
  unint64_t v17 = (_OWORD *)(v9 + 48);
  unint64_t v18 = *(void *)(v7 + 56);
  if (v18 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)(v7 + 48) = *v17;
    goto LABEL_11;
  }
  unint64_t v19 = *(void *)(v9 + 56);
  if (v19 >> 60 == 15)
  {
    sub_1D7870C24(v7 + 48);
    goto LABEL_9;
  }
  uint64_t v20 = *(void *)(v7 + 48);
  *(void *)(v7 + 48) = *(void *)v17;
  *(void *)(v7 + 56) = v19;
  sub_1D78607E8(v20, v18);
LABEL_11:
  unint64_t v21 = (_OWORD *)(v9 + 64);
  unint64_t v22 = *(void *)(v7 + 72);
  if (v22 >> 60 == 15)
  {
LABEL_14:
    *(_OWORD *)(v7 + 64) = *v21;
    goto LABEL_16;
  }
  unint64_t v23 = *(void *)(v9 + 72);
  if (v23 >> 60 == 15)
  {
    sub_1D7870C24(v7 + 64);
    goto LABEL_14;
  }
  uint64_t v24 = *(void *)(v7 + 64);
  *(void *)(v7 + 64) = *(void *)v21;
  *(void *)(v7 + 72) = v23;
  sub_1D78607E8(v24, v22);
LABEL_16:
  uint64_t v25 = (_OWORD *)(v9 + 80);
  unint64_t v26 = *(void *)(v7 + 88);
  if (v26 >> 60 == 15)
  {
LABEL_19:
    *(_OWORD *)(v7 + 80) = *v25;
    goto LABEL_21;
  }
  unint64_t v27 = *(void *)(v9 + 88);
  if (v27 >> 60 == 15)
  {
    sub_1D7870C24(v7 + 80);
    goto LABEL_19;
  }
  uint64_t v28 = *(void *)(v7 + 80);
  *(void *)(v7 + 80) = *(void *)v25;
  *(void *)(v7 + 88) = v27;
  sub_1D78607E8(v28, v26);
LABEL_21:
  unint64_t v29 = (uint64_t *)((v5 + 111) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v30 = (_OWORD *)((v8 + 111) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v31 = *v29;
  unint64_t v32 = v29[1];
  *(_OWORD *)unint64_t v29 = *v30;
  sub_1D78607E8(v31, v32);
  uint64_t v33 = *(void *)(a3 + 16);
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v35 = *(unsigned __int8 *)(v34 + 80);
  uint64_t v36 = (void *)(((unint64_t)v29 + v35 + 16) & ~v35);
  uint64_t v37 = (void *)(((unint64_t)v30 + v35 + 16) & ~v35);
  uint64_t v38 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v34 + 48);
  int v39 = v38(v36, 1, v33);
  int v40 = v38(v37, 1, v33);
  if (v39)
  {
    if (!v40)
    {
      (*(void (**)(void *, void *, uint64_t))(v34 + 32))(v36, v37, v33);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v36, 0, 1, v33);
      return a1;
    }
    int v41 = *(_DWORD *)(v34 + 84);
    size_t v42 = *(void *)(v34 + 64);
  }
  else
  {
    if (!v40)
    {
      (*(void (**)(void *, void *, uint64_t))(v34 + 40))(v36, v37, v33);
      return a1;
    }
    uint64_t v44 = *(void (**)(void *, uint64_t))(v34 + 8);
    uint64_t v43 = v34 + 8;
    v44(v36, v33);
    int v41 = *(_DWORD *)(v43 + 76);
    size_t v42 = *(void *)(v43 + 56);
  }
  if (v41) {
    size_t v45 = v42;
  }
  else {
    size_t v45 = v42 + 1;
  }
  memcpy(v36, v37, v45);
  return a1;
}

uint64_t sub_1D788B800(unint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  int v5 = *(_DWORD *)(v4 + 84);
  if (v5) {
    unsigned int v6 = v5 - 1;
  }
  else {
    unsigned int v6 = 0;
  }
  if (v6 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = v6;
  }
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v5) {
    ++v9;
  }
  if (!a2) {
    return 0;
  }
  int v10 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_28;
  }
  uint64_t v11 = v9 + ((v8 + 120) & ~v8);
  char v12 = 8 * v11;
  if (v11 <= 3)
  {
    unsigned int v15 = ((v10 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      int v13 = *(_DWORD *)(a1 + v11);
      if (!v13) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
    if (v15 > 0xFF)
    {
      int v13 = *(unsigned __int16 *)(a1 + v11);
      if (!*(_WORD *)(a1 + v11)) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
    if (v15 < 2)
    {
LABEL_28:
      if (v6 > 0xFE)
      {
        unsigned int v18 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((((a1 & 0xFFFFFFFFFFFFFFF8) + 111) & 0xFFFFFFFFFFFFFFF8)
                                                                     + v8
                                                                     + 16) & ~v8);
        if (v18 >= 2) {
          return v18 - 1;
        }
        else {
          return 0;
        }
      }
      else
      {
        unsigned int v17 = *(unsigned __int8 *)a1;
        if (v17 >= 2) {
          return v17 - 1;
        }
        else {
          return 0;
        }
      }
    }
  }
  int v13 = *(unsigned __int8 *)(a1 + v11);
  if (!*(unsigned char *)(a1 + v11)) {
    goto LABEL_28;
  }
LABEL_20:
  int v16 = (v13 - 1) << v12;
  if (v11 > 3) {
    int v16 = 0;
  }
  if (v11)
  {
    if (v11 > 3) {
      LODWORD(v11) = 4;
    }
    switch((int)v11)
    {
      case 2:
        LODWORD(v11) = *(unsigned __int16 *)a1;
        break;
      case 3:
        LODWORD(v11) = *(unsigned __int16 *)a1 | (*(unsigned __int8 *)(a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v11) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v11) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v11 | v16) + 1;
}

void sub_1D788B9E8(unint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  if (v9 <= 0xFE) {
    unsigned int v10 = 254;
  }
  else {
    unsigned int v10 = v9;
  }
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  size_t v12 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (!v8) {
    ++v12;
  }
  size_t v13 = ((v11 + 120) & ~v11) + v12;
  BOOL v14 = a3 >= v10;
  unsigned int v15 = a3 - v10;
  if (v15 == 0 || !v14)
  {
LABEL_17:
    if (v10 < a2) {
      goto LABEL_18;
    }
    goto LABEL_25;
  }
  if (v13 > 3)
  {
    int v6 = 1;
    if (v10 < a2) {
      goto LABEL_18;
    }
    goto LABEL_25;
  }
  unsigned int v16 = ((v15 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
  if (!HIWORD(v16))
  {
    if (v16 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v16 > 1;
    }
    goto LABEL_17;
  }
  int v6 = 4;
  if (v10 < a2)
  {
LABEL_18:
    unsigned int v17 = ~v10 + a2;
    if (v13 < 4)
    {
      int v18 = (v17 >> (8 * v13)) + 1;
      if (v13)
      {
        int v19 = v17 & ~(-1 << (8 * v13));
        bzero((void *)a1, v13);
        if (v13 == 3)
        {
          *(_WORD *)a1 = v19;
          *(unsigned char *)(a1 + 2) = BYTE2(v19);
        }
        else if (v13 == 2)
        {
          *(_WORD *)a1 = v19;
        }
        else
        {
          *(unsigned char *)a1 = v19;
        }
      }
    }
    else
    {
      bzero((void *)a1, v13);
      *(_DWORD *)a1 = v17;
      int v18 = 1;
    }
    switch(v6)
    {
      case 1:
        *(unsigned char *)(a1 + v13) = v18;
        return;
      case 2:
        *(_WORD *)(a1 + v13) = v18;
        return;
      case 3:
        goto LABEL_57;
      case 4:
        *(_DWORD *)(a1 + v13) = v18;
        return;
      default:
        return;
    }
  }
LABEL_25:
  switch(v6)
  {
    case 1:
      *(unsigned char *)(a1 + v13) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 2:
      *(_WORD *)(a1 + v13) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 3:
LABEL_57:
      __break(1u);
      JUMPOUT(0x1D788BCF8);
    case 4:
      *(_DWORD *)(a1 + v13) = 0;
      goto LABEL_29;
    default:
LABEL_29:
      if (a2)
      {
LABEL_30:
        if (v9 > 0xFE)
        {
          uint64_t v20 = (unsigned char *)(((((a1 & 0xFFFFFFFFFFFFFFF8) + 111) & 0xFFFFFFFFFFFFFFF8) + v11 + 16) & ~v11);
          if (v9 >= a2)
          {
            uint64_t v24 = a2 + 1;
            uint64_t v25 = *(void (**)(unint64_t, uint64_t))(v7 + 56);
            unint64_t v26 = ((((a1 & 0xFFFFFFFFFFFFFFF8) + 111) & 0xFFFFFFFFFFFFFFF8) + v11 + 16) & ~v11;
            v25(v26, v24);
          }
          else
          {
            if (v12 <= 3) {
              int v21 = ~(-1 << (8 * v12));
            }
            else {
              int v21 = -1;
            }
            if (v12)
            {
              int v22 = v21 & (~v9 + a2);
              if (v12 <= 3) {
                int v23 = v12;
              }
              else {
                int v23 = 4;
              }
              bzero(v20, v12);
              switch(v23)
              {
                case 2:
                  *(_WORD *)uint64_t v20 = v22;
                  break;
                case 3:
                  *(_WORD *)uint64_t v20 = v22;
                  v20[2] = BYTE2(v22);
                  break;
                case 4:
                  *(_DWORD *)uint64_t v20 = v22;
                  break;
                default:
                  *uint64_t v20 = v22;
                  break;
              }
            }
          }
        }
        else
        {
          *(unsigned char *)a1 = a2 + 1;
        }
      }
      return;
  }
}

uint64_t destroy for HPKEShallowEnvelope(void *a1)
{
  sub_1D78607E8(a1[1], a1[2]);
  sub_1D78607E8(a1[3], a1[4]);
  unint64_t v2 = a1[6];
  if (v2 >> 60 != 15) {
    sub_1D78607E8(a1[5], v2);
  }
  unint64_t v3 = a1[8];
  if (v3 >> 60 != 15) {
    sub_1D78607E8(a1[7], v3);
  }
  unint64_t v4 = a1[10];
  if (v4 >> 60 != 15) {
    sub_1D78607E8(a1[9], v4);
  }
  unint64_t v5 = a1[12];
  if (v5 >> 60 != 15) {
    sub_1D78607E8(a1[11], v5);
  }
  uint64_t v6 = a1[13];
  unint64_t v7 = a1[14];
  return sub_1D78607E8(v6, v7);
}

uint64_t initializeWithCopy for HPKEShallowEnvelope(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  sub_1D7860790(v4, v5);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v7 = *(void *)(a2 + 32);
  sub_1D7860790(v6, v7);
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  int v8 = (uint64_t *)(a2 + 40);
  unint64_t v9 = *(void *)(a2 + 48);
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)v8;
  }
  else
  {
    uint64_t v10 = *v8;
    sub_1D7860790(*v8, *(void *)(a2 + 48));
    *(void *)(a1 + 40) = v10;
    *(void *)(a1 + 48) = v9;
  }
  uint64_t v11 = (uint64_t *)(a2 + 56);
  unint64_t v12 = *(void *)(a2 + 64);
  if (v12 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 56) = *(_OWORD *)v11;
  }
  else
  {
    uint64_t v13 = *v11;
    sub_1D7860790(*v11, *(void *)(a2 + 64));
    *(void *)(a1 + 56) = v13;
    *(void *)(a1 + 64) = v12;
  }
  BOOL v14 = (uint64_t *)(a2 + 72);
  unint64_t v15 = *(void *)(a2 + 80);
  if (v15 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 72) = *(_OWORD *)v14;
  }
  else
  {
    uint64_t v16 = *v14;
    sub_1D7860790(*v14, *(void *)(a2 + 80));
    *(void *)(a1 + 72) = v16;
    *(void *)(a1 + 80) = v15;
  }
  unsigned int v17 = (uint64_t *)(a2 + 88);
  unint64_t v18 = *(void *)(a2 + 96);
  if (v18 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 88) = *(_OWORD *)v17;
  }
  else
  {
    uint64_t v19 = *v17;
    sub_1D7860790(*v17, *(void *)(a2 + 96));
    *(void *)(a1 + 88) = v19;
    *(void *)(a1 + 96) = v18;
  }
  uint64_t v21 = *(void *)(a2 + 104);
  unint64_t v20 = *(void *)(a2 + 112);
  sub_1D7860790(v21, v20);
  *(void *)(a1 + 104) = v21;
  *(void *)(a1 + 112) = v20;
  return a1;
}

uint64_t assignWithCopy for HPKEShallowEnvelope(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  sub_1D7860790(v4, v5);
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  sub_1D78607E8(v6, v7);
  uint64_t v8 = *(void *)(a2 + 24);
  unint64_t v9 = *(void *)(a2 + 32);
  sub_1D7860790(v8, v9);
  uint64_t v10 = *(void *)(a1 + 24);
  unint64_t v11 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = v9;
  sub_1D78607E8(v10, v11);
  unint64_t v12 = (uint64_t *)(a2 + 40);
  unint64_t v13 = *(void *)(a2 + 48);
  if (*(void *)(a1 + 48) >> 60 == 15)
  {
    if (v13 >> 60 != 15)
    {
      uint64_t v14 = *v12;
      sub_1D7860790(*v12, *(void *)(a2 + 48));
      *(void *)(a1 + 40) = v14;
      *(void *)(a1 + 48) = v13;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v13 >> 60 == 15)
  {
    sub_1D7870C24(a1 + 40);
LABEL_6:
    *(_OWORD *)(a1 + 40) = *(_OWORD *)v12;
    goto LABEL_8;
  }
  uint64_t v15 = *v12;
  sub_1D7860790(*v12, *(void *)(a2 + 48));
  uint64_t v16 = *(void *)(a1 + 40);
  unint64_t v17 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = v15;
  *(void *)(a1 + 48) = v13;
  sub_1D78607E8(v16, v17);
LABEL_8:
  unint64_t v18 = (uint64_t *)(a2 + 56);
  unint64_t v19 = *(void *)(a2 + 64);
  if (*(void *)(a1 + 64) >> 60 == 15)
  {
    if (v19 >> 60 != 15)
    {
      uint64_t v20 = *v18;
      sub_1D7860790(*v18, *(void *)(a2 + 64));
      *(void *)(a1 + 56) = v20;
      *(void *)(a1 + 64) = v19;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v19 >> 60 == 15)
  {
    sub_1D7870C24(a1 + 56);
LABEL_13:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)v18;
    goto LABEL_15;
  }
  uint64_t v21 = *v18;
  sub_1D7860790(*v18, *(void *)(a2 + 64));
  uint64_t v22 = *(void *)(a1 + 56);
  unint64_t v23 = *(void *)(a1 + 64);
  *(void *)(a1 + 56) = v21;
  *(void *)(a1 + 64) = v19;
  sub_1D78607E8(v22, v23);
LABEL_15:
  uint64_t v24 = (uint64_t *)(a2 + 72);
  unint64_t v25 = *(void *)(a2 + 80);
  if (*(void *)(a1 + 80) >> 60 == 15)
  {
    if (v25 >> 60 != 15)
    {
      uint64_t v26 = *v24;
      sub_1D7860790(*v24, *(void *)(a2 + 80));
      *(void *)(a1 + 72) = v26;
      *(void *)(a1 + 80) = v25;
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  if (v25 >> 60 == 15)
  {
    sub_1D7870C24(a1 + 72);
LABEL_20:
    *(_OWORD *)(a1 + 72) = *(_OWORD *)v24;
    goto LABEL_22;
  }
  uint64_t v27 = *v24;
  sub_1D7860790(*v24, *(void *)(a2 + 80));
  uint64_t v28 = *(void *)(a1 + 72);
  unint64_t v29 = *(void *)(a1 + 80);
  *(void *)(a1 + 72) = v27;
  *(void *)(a1 + 80) = v25;
  sub_1D78607E8(v28, v29);
LABEL_22:
  uint64_t v30 = (uint64_t *)(a2 + 88);
  unint64_t v31 = *(void *)(a2 + 96);
  if (*(void *)(a1 + 96) >> 60 != 15)
  {
    if (v31 >> 60 != 15)
    {
      uint64_t v33 = *v30;
      sub_1D7860790(*v30, *(void *)(a2 + 96));
      uint64_t v34 = *(void *)(a1 + 88);
      unint64_t v35 = *(void *)(a1 + 96);
      *(void *)(a1 + 88) = v33;
      *(void *)(a1 + 96) = v31;
      sub_1D78607E8(v34, v35);
      goto LABEL_29;
    }
    sub_1D7870C24(a1 + 88);
    goto LABEL_27;
  }
  if (v31 >> 60 == 15)
  {
LABEL_27:
    *(_OWORD *)(a1 + 88) = *(_OWORD *)v30;
    goto LABEL_29;
  }
  uint64_t v32 = *v30;
  sub_1D7860790(*v30, *(void *)(a2 + 96));
  *(void *)(a1 + 88) = v32;
  *(void *)(a1 + 96) = v31;
LABEL_29:
  uint64_t v37 = *(void *)(a2 + 104);
  unint64_t v36 = *(void *)(a2 + 112);
  sub_1D7860790(v37, v36);
  uint64_t v38 = *(void *)(a1 + 104);
  unint64_t v39 = *(void *)(a1 + 112);
  *(void *)(a1 + 104) = v37;
  *(void *)(a1 + 112) = v36;
  sub_1D78607E8(v38, v39);
  return a1;
}

__n128 __swift_memcpy120_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for HPKEShallowEnvelope(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_1D78607E8(v4, v5);
  uint64_t v6 = *(void *)(a1 + 24);
  unint64_t v7 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  sub_1D78607E8(v6, v7);
  uint64_t v8 = (_OWORD *)(a2 + 40);
  unint64_t v9 = *(void *)(a1 + 48);
  if (v9 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v10 = *(void *)(a2 + 48);
  if (v10 >> 60 == 15)
  {
    sub_1D7870C24(a1 + 40);
LABEL_4:
    *(_OWORD *)(a1 + 40) = *v8;
    goto LABEL_6;
  }
  uint64_t v11 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = *(void *)v8;
  *(void *)(a1 + 48) = v10;
  sub_1D78607E8(v11, v9);
LABEL_6:
  unint64_t v12 = (_OWORD *)(a2 + 56);
  unint64_t v13 = *(void *)(a1 + 64);
  if (v13 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)(a1 + 56) = *v12;
    goto LABEL_11;
  }
  unint64_t v14 = *(void *)(a2 + 64);
  if (v14 >> 60 == 15)
  {
    sub_1D7870C24(a1 + 56);
    goto LABEL_9;
  }
  uint64_t v15 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = *(void *)v12;
  *(void *)(a1 + 64) = v14;
  sub_1D78607E8(v15, v13);
LABEL_11:
  uint64_t v16 = (_OWORD *)(a2 + 72);
  unint64_t v17 = *(void *)(a1 + 80);
  if (v17 >> 60 == 15)
  {
LABEL_14:
    *(_OWORD *)(a1 + 72) = *v16;
    goto LABEL_16;
  }
  unint64_t v18 = *(void *)(a2 + 80);
  if (v18 >> 60 == 15)
  {
    sub_1D7870C24(a1 + 72);
    goto LABEL_14;
  }
  uint64_t v19 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = *(void *)v16;
  *(void *)(a1 + 80) = v18;
  sub_1D78607E8(v19, v17);
LABEL_16:
  uint64_t v20 = (void *)(a2 + 88);
  unint64_t v21 = *(void *)(a1 + 96);
  if (v21 >> 60 != 15)
  {
    unint64_t v22 = *(void *)(a2 + 96);
    if (v22 >> 60 != 15)
    {
      uint64_t v23 = *(void *)(a1 + 88);
      *(void *)(a1 + 88) = *v20;
      *(void *)(a1 + 96) = v22;
      sub_1D78607E8(v23, v21);
      goto LABEL_21;
    }
    sub_1D7870C24(a1 + 88);
  }
  *(_OWORD *)(a1 + 88) = *(_OWORD *)v20;
LABEL_21:
  uint64_t v24 = *(void *)(a1 + 104);
  unint64_t v25 = *(void *)(a1 + 112);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  sub_1D78607E8(v24, v25);
  return a1;
}

uint64_t getEnumTagSinglePayload for HPKEShallowEnvelope(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[120]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for HPKEShallowEnvelope(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 120) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 120) = 0;
    }
    if (a2) {
      *(unsigned char *)__n128 result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HPKEShallowEnvelope()
{
  return &type metadata for HPKEShallowEnvelope;
}

void *destroy for HPKEEnvelopeEncryptedMessagePKRHash(void *result)
{
  unint64_t v1 = result;
  if (result[16] != 1)
  {
    sub_1D78607E8(result[2], result[3]);
    sub_1D78607E8(v1[4], v1[5]);
    unint64_t v2 = v1[7];
    if (v2 >> 60 != 15) {
      sub_1D78607E8(v1[6], v2);
    }
    unint64_t v3 = v1[9];
    if (v3 >> 60 != 15) {
      sub_1D78607E8(v1[8], v3);
    }
    unint64_t v4 = v1[11];
    if (v4 >> 60 != 15) {
      sub_1D78607E8(v1[10], v4);
    }
    unint64_t v5 = v1[13];
    if (v5 >> 60 != 15) {
      sub_1D78607E8(v1[12], v5);
    }
    sub_1D78607E8(v1[14], v1[15]);
    __n128 result = (void *)swift_bridgeObjectRelease();
  }
  unint64_t v6 = v1[18];
  if (v6 >> 60 != 15)
  {
    sub_1D78607E8(v1[17], v6);
    __n128 result = (void *)sub_1D78607E8(v1[19], v1[20]);
    unint64_t v7 = v1[22];
    if (v7 >> 60 != 15) {
      __n128 result = (void *)sub_1D78607E8(v1[21], v7);
    }
    unint64_t v8 = v1[24];
    if (v8 >> 60 != 15) {
      __n128 result = (void *)sub_1D78607E8(v1[23], v8);
    }
    unint64_t v9 = v1[26];
    if (v9 >> 60 != 15) {
      __n128 result = (void *)sub_1D78607E8(v1[25], v9);
    }
    unint64_t v10 = v1[28];
    if (v10 >> 60 != 15)
    {
      uint64_t v11 = v1[27];
      return (void *)sub_1D78607E8(v11, v10);
    }
  }
  return result;
}

uint64_t initializeWithCopy for HPKEEnvelopeEncryptedMessagePKRHash(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 128);
  if (v4 == 1)
  {
    long long v5 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v5;
    long long v6 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v6;
    long long v7 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = v7;
    long long v8 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v8;
  }
  else
  {
    *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
    uint64_t v9 = *(void *)(a2 + 16);
    unint64_t v10 = *(void *)(a2 + 24);
    sub_1D7860790(v9, v10);
    *(void *)(a1 + 16) = v9;
    *(void *)(a1 + 24) = v10;
    uint64_t v11 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40);
    sub_1D7860790(v11, v12);
    *(void *)(a1 + 32) = v11;
    *(void *)(a1 + 40) = v12;
    unint64_t v13 = (uint64_t *)(a2 + 48);
    unint64_t v14 = *(void *)(a2 + 56);
    if (v14 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 48) = *(_OWORD *)v13;
    }
    else
    {
      uint64_t v15 = *v13;
      sub_1D7860790(*v13, *(void *)(a2 + 56));
      *(void *)(a1 + 48) = v15;
      *(void *)(a1 + 56) = v14;
    }
    uint64_t v16 = (uint64_t *)(a2 + 64);
    unint64_t v17 = *(void *)(a2 + 72);
    if (v17 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 64) = *(_OWORD *)v16;
    }
    else
    {
      uint64_t v18 = *v16;
      sub_1D7860790(*v16, *(void *)(a2 + 72));
      *(void *)(a1 + 64) = v18;
      *(void *)(a1 + 72) = v17;
    }
    uint64_t v19 = (uint64_t *)(a2 + 80);
    unint64_t v20 = *(void *)(a2 + 88);
    if (v20 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 80) = *(_OWORD *)v19;
    }
    else
    {
      uint64_t v21 = *v19;
      sub_1D7860790(*v19, *(void *)(a2 + 88));
      *(void *)(a1 + 80) = v21;
      *(void *)(a1 + 88) = v20;
    }
    unint64_t v22 = (uint64_t *)(a2 + 96);
    unint64_t v23 = *(void *)(a2 + 104);
    if (v23 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 96) = *(_OWORD *)v22;
    }
    else
    {
      uint64_t v24 = *v22;
      sub_1D7860790(*v22, *(void *)(a2 + 104));
      *(void *)(a1 + 96) = v24;
      *(void *)(a1 + 104) = v23;
    }
    uint64_t v25 = *(void *)(a2 + 112);
    unint64_t v26 = *(void *)(a2 + 120);
    sub_1D7860790(v25, v26);
    *(void *)(a1 + 112) = v25;
    *(void *)(a1 + 120) = v26;
    *(void *)(a1 + 128) = v4;
    swift_bridgeObjectRetain();
  }
  unint64_t v27 = *(void *)(a2 + 144);
  if (v27 >> 60 == 15)
  {
    long long v28 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = v28;
    long long v29 = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 216) = v29;
    long long v30 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v30;
  }
  else
  {
    uint64_t v31 = *(void *)(a2 + 136);
    sub_1D7860790(v31, *(void *)(a2 + 144));
    *(void *)(a1 + 136) = v31;
    *(void *)(a1 + 144) = v27;
    uint64_t v32 = *(void *)(a2 + 152);
    unint64_t v33 = *(void *)(a2 + 160);
    sub_1D7860790(v32, v33);
    *(void *)(a1 + 152) = v32;
    *(void *)(a1 + 160) = v33;
    uint64_t v34 = (uint64_t *)(a2 + 168);
    unint64_t v35 = *(void *)(a2 + 176);
    if (v35 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 168) = *(_OWORD *)v34;
    }
    else
    {
      uint64_t v36 = *v34;
      sub_1D7860790(*v34, *(void *)(a2 + 176));
      *(void *)(a1 + 168) = v36;
      *(void *)(a1 + 176) = v35;
    }
    uint64_t v37 = (uint64_t *)(a2 + 184);
    unint64_t v38 = *(void *)(a2 + 192);
    if (v38 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 184) = *(_OWORD *)v37;
    }
    else
    {
      uint64_t v39 = *v37;
      sub_1D7860790(*v37, *(void *)(a2 + 192));
      *(void *)(a1 + 184) = v39;
      *(void *)(a1 + 192) = v38;
    }
    int v40 = (uint64_t *)(a2 + 200);
    unint64_t v41 = *(void *)(a2 + 208);
    if (v41 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 200) = *(_OWORD *)v40;
    }
    else
    {
      uint64_t v42 = *v40;
      sub_1D7860790(*v40, *(void *)(a2 + 208));
      *(void *)(a1 + 200) = v42;
      *(void *)(a1 + 208) = v41;
    }
    uint64_t v43 = (uint64_t *)(a2 + 216);
    unint64_t v44 = *(void *)(a2 + 224);
    if (v44 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 216) = *(_OWORD *)v43;
    }
    else
    {
      uint64_t v45 = *v43;
      sub_1D7860790(*v43, v44);
      *(void *)(a1 + 216) = v45;
      *(void *)(a1 + 224) = v44;
    }
  }
  return a1;
}

uint64_t assignWithCopy for HPKEEnvelopeEncryptedMessagePKRHash(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  long long v5 = (long long *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 128);
  if (*(void *)(a1 + 128) != 1)
  {
    if (v6 == 1)
    {
      sub_1D7871C4C(a1 + 8, &qword_1EA842648);
      long long v13 = v5[3];
      long long v15 = *v5;
      long long v14 = v5[1];
      v4[2] = v5[2];
      v4[3] = v13;
      _OWORD *v4 = v15;
      v4[1] = v14;
      long long v16 = v5[7];
      long long v18 = v5[4];
      long long v17 = v5[5];
      v4[6] = v5[6];
      v4[7] = v16;
      v4[4] = v18;
      void v4[5] = v17;
      goto LABEL_48;
    }
    *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
    uint64_t v25 = *(void *)(a2 + 16);
    unint64_t v26 = *(void *)(a2 + 24);
    sub_1D7860790(v25, v26);
    uint64_t v27 = *(void *)(a1 + 16);
    unint64_t v28 = *(void *)(a1 + 24);
    *(void *)(a1 + 16) = v25;
    *(void *)(a1 + 24) = v26;
    sub_1D78607E8(v27, v28);
    uint64_t v29 = *(void *)(a2 + 32);
    unint64_t v30 = *(void *)(a2 + 40);
    sub_1D7860790(v29, v30);
    uint64_t v31 = *(void *)(a1 + 32);
    unint64_t v32 = *(void *)(a1 + 40);
    *(void *)(a1 + 32) = v29;
    *(void *)(a1 + 40) = v30;
    sub_1D78607E8(v31, v32);
    unint64_t v33 = (uint64_t *)(a2 + 48);
    unint64_t v34 = *(void *)(a2 + 56);
    if (*(void *)(a1 + 56) >> 60 == 15)
    {
      if (v34 >> 60 != 15)
      {
        uint64_t v35 = *v33;
        sub_1D7860790(*v33, *(void *)(a2 + 56));
        *(void *)(a1 + 48) = v35;
        *(void *)(a1 + 56) = v34;
        goto LABEL_26;
      }
    }
    else
    {
      if (v34 >> 60 != 15)
      {
        uint64_t v48 = *v33;
        sub_1D7860790(*v33, *(void *)(a2 + 56));
        uint64_t v49 = *(void *)(a1 + 48);
        unint64_t v50 = *(void *)(a1 + 56);
        *(void *)(a1 + 48) = v48;
        *(void *)(a1 + 56) = v34;
        sub_1D78607E8(v49, v50);
LABEL_26:
        uint64_t v51 = (uint64_t *)(a2 + 64);
        unint64_t v52 = *(void *)(a2 + 72);
        if (*(void *)(a1 + 72) >> 60 == 15)
        {
          if (v52 >> 60 != 15)
          {
            uint64_t v53 = *v51;
            sub_1D7860790(*v51, *(void *)(a2 + 72));
            *(void *)(a1 + 64) = v53;
            *(void *)(a1 + 72) = v52;
            goto LABEL_33;
          }
        }
        else
        {
          if (v52 >> 60 != 15)
          {
            uint64_t v54 = *v51;
            sub_1D7860790(*v51, *(void *)(a2 + 72));
            uint64_t v55 = *(void *)(a1 + 64);
            unint64_t v56 = *(void *)(a1 + 72);
            *(void *)(a1 + 64) = v54;
            *(void *)(a1 + 72) = v52;
            sub_1D78607E8(v55, v56);
LABEL_33:
            size_t v57 = (uint64_t *)(a2 + 80);
            unint64_t v58 = *(void *)(a2 + 88);
            if (*(void *)(a1 + 88) >> 60 == 15)
            {
              if (v58 >> 60 != 15)
              {
                uint64_t v59 = *v57;
                sub_1D7860790(*v57, *(void *)(a2 + 88));
                *(void *)(a1 + 80) = v59;
                *(void *)(a1 + 88) = v58;
                goto LABEL_40;
              }
            }
            else
            {
              if (v58 >> 60 != 15)
              {
                uint64_t v60 = *v57;
                sub_1D7860790(*v57, *(void *)(a2 + 88));
                uint64_t v61 = *(void *)(a1 + 80);
                unint64_t v62 = *(void *)(a1 + 88);
                *(void *)(a1 + 80) = v60;
                *(void *)(a1 + 88) = v58;
                sub_1D78607E8(v61, v62);
LABEL_40:
                uint64_t v63 = (uint64_t *)(a2 + 96);
                unint64_t v64 = *(void *)(a2 + 104);
                if (*(void *)(a1 + 104) >> 60 == 15)
                {
                  if (v64 >> 60 != 15)
                  {
                    uint64_t v65 = *v63;
                    sub_1D7860790(*v63, *(void *)(a2 + 104));
                    *(void *)(a1 + 96) = v65;
                    *(void *)(a1 + 104) = v64;
LABEL_47:
                    uint64_t v69 = *(void *)(a2 + 112);
                    unint64_t v70 = *(void *)(a2 + 120);
                    sub_1D7860790(v69, v70);
                    uint64_t v71 = *(void *)(a1 + 112);
                    unint64_t v72 = *(void *)(a1 + 120);
                    *(void *)(a1 + 112) = v69;
                    *(void *)(a1 + 120) = v70;
                    sub_1D78607E8(v71, v72);
                    *(void *)(a1 + 128) = *(void *)(a2 + 128);
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRelease();
                    goto LABEL_48;
                  }
                }
                else
                {
                  if (v64 >> 60 != 15)
                  {
                    uint64_t v66 = *v63;
                    sub_1D7860790(*v63, *(void *)(a2 + 104));
                    uint64_t v67 = *(void *)(a1 + 96);
                    unint64_t v68 = *(void *)(a1 + 104);
                    *(void *)(a1 + 96) = v66;
                    *(void *)(a1 + 104) = v64;
                    sub_1D78607E8(v67, v68);
                    goto LABEL_47;
                  }
                  sub_1D7870C24(a1 + 96);
                }
                *(_OWORD *)(a1 + 96) = *(_OWORD *)v63;
                goto LABEL_47;
              }
              sub_1D7870C24(a1 + 80);
            }
            *(_OWORD *)(a1 + 80) = *(_OWORD *)v57;
            goto LABEL_40;
          }
          sub_1D7870C24(a1 + 64);
        }
        *(_OWORD *)(a1 + 64) = *(_OWORD *)v51;
        goto LABEL_33;
      }
      sub_1D7870C24(a1 + 48);
    }
    *(_OWORD *)(a1 + 48) = *(_OWORD *)v33;
    goto LABEL_26;
  }
  if (v6 == 1)
  {
    long long v7 = *v5;
    long long v8 = *(_OWORD *)(a2 + 24);
    long long v9 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v9;
    _OWORD *v4 = v7;
    *(_OWORD *)(a1 + 24) = v8;
    long long v10 = *(_OWORD *)(a2 + 72);
    long long v11 = *(_OWORD *)(a2 + 88);
    long long v12 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v12;
    *(_OWORD *)(a1 + 72) = v10;
    *(_OWORD *)(a1 + 88) = v11;
  }
  else
  {
    *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
    uint64_t v19 = *(void *)(a2 + 16);
    unint64_t v20 = *(void *)(a2 + 24);
    sub_1D7860790(v19, v20);
    *(void *)(a1 + 16) = v19;
    *(void *)(a1 + 24) = v20;
    uint64_t v21 = *(void *)(a2 + 32);
    unint64_t v22 = *(void *)(a2 + 40);
    sub_1D7860790(v21, v22);
    *(void *)(a1 + 32) = v21;
    *(void *)(a1 + 40) = v22;
    unint64_t v23 = (uint64_t *)(a2 + 48);
    unint64_t v24 = *(void *)(a2 + 56);
    if (v24 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 48) = *(_OWORD *)v23;
    }
    else
    {
      uint64_t v36 = *v23;
      sub_1D7860790(*v23, *(void *)(a2 + 56));
      *(void *)(a1 + 48) = v36;
      *(void *)(a1 + 56) = v24;
    }
    uint64_t v37 = (uint64_t *)(a2 + 64);
    unint64_t v38 = *(void *)(a2 + 72);
    if (v38 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 64) = *(_OWORD *)v37;
    }
    else
    {
      uint64_t v39 = *v37;
      sub_1D7860790(*v37, *(void *)(a2 + 72));
      *(void *)(a1 + 64) = v39;
      *(void *)(a1 + 72) = v38;
    }
    int v40 = (uint64_t *)(a2 + 80);
    unint64_t v41 = *(void *)(a2 + 88);
    if (v41 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 80) = *(_OWORD *)v40;
    }
    else
    {
      uint64_t v42 = *v40;
      sub_1D7860790(*v40, *(void *)(a2 + 88));
      *(void *)(a1 + 80) = v42;
      *(void *)(a1 + 88) = v41;
    }
    uint64_t v43 = (uint64_t *)(a2 + 96);
    unint64_t v44 = *(void *)(a2 + 104);
    if (v44 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 96) = *(_OWORD *)v43;
    }
    else
    {
      uint64_t v45 = *v43;
      sub_1D7860790(*v43, *(void *)(a2 + 104));
      *(void *)(a1 + 96) = v45;
      *(void *)(a1 + 104) = v44;
    }
    uint64_t v46 = *(void *)(a2 + 112);
    unint64_t v47 = *(void *)(a2 + 120);
    sub_1D7860790(v46, v47);
    *(void *)(a1 + 112) = v46;
    *(void *)(a1 + 120) = v47;
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    swift_bridgeObjectRetain();
  }
LABEL_48:
  uint64_t v73 = (_OWORD *)(a1 + 136);
  unint64_t v74 = (_OWORD *)(a2 + 136);
  unint64_t v75 = *(void *)(a2 + 144);
  if (*(void *)(a1 + 144) >> 60 != 15)
  {
    if (v75 >> 60 == 15)
    {
      sub_1D788D034((uint64_t *)(a1 + 136));
      long long v80 = *(_OWORD *)(a2 + 152);
      *uint64_t v73 = *v74;
      *(_OWORD *)(a1 + 152) = v80;
      long long v81 = *(_OWORD *)(a2 + 216);
      long long v83 = *(_OWORD *)(a2 + 168);
      long long v82 = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
      *(_OWORD *)(a1 + 216) = v81;
      *(_OWORD *)(a1 + 168) = v83;
      *(_OWORD *)(a1 + 184) = v82;
      return a1;
    }
    uint64_t v89 = *(void *)(a2 + 136);
    sub_1D7860790(v89, *(void *)(a2 + 144));
    uint64_t v90 = *(void *)(a1 + 136);
    unint64_t v91 = *(void *)(a1 + 144);
    *(void *)(a1 + 136) = v89;
    *(void *)(a1 + 144) = v75;
    sub_1D78607E8(v90, v91);
    uint64_t v92 = *(void *)(a2 + 152);
    unint64_t v93 = *(void *)(a2 + 160);
    sub_1D7860790(v92, v93);
    uint64_t v94 = *(void *)(a1 + 152);
    unint64_t v95 = *(void *)(a1 + 160);
    *(void *)(a1 + 152) = v92;
    *(void *)(a1 + 160) = v93;
    sub_1D78607E8(v94, v95);
    uint64_t v96 = (uint64_t *)(a2 + 168);
    unint64_t v97 = *(void *)(a2 + 176);
    if (*(void *)(a1 + 176) >> 60 == 15)
    {
      if (v97 >> 60 != 15)
      {
        uint64_t v98 = *v96;
        sub_1D7860790(*v96, *(void *)(a2 + 176));
        *(void *)(a1 + 168) = v98;
        *(void *)(a1 + 176) = v97;
        goto LABEL_72;
      }
    }
    else
    {
      if (v97 >> 60 != 15)
      {
        uint64_t v109 = *v96;
        sub_1D7860790(*v96, *(void *)(a2 + 176));
        uint64_t v110 = *(void *)(a1 + 168);
        unint64_t v111 = *(void *)(a1 + 176);
        *(void *)(a1 + 168) = v109;
        *(void *)(a1 + 176) = v97;
        sub_1D78607E8(v110, v111);
LABEL_72:
        uint64_t v112 = (uint64_t *)(a2 + 184);
        unint64_t v113 = *(void *)(a2 + 192);
        if (*(void *)(a1 + 192) >> 60 == 15)
        {
          if (v113 >> 60 != 15)
          {
            uint64_t v114 = *v112;
            sub_1D7860790(*v112, *(void *)(a2 + 192));
            *(void *)(a1 + 184) = v114;
            *(void *)(a1 + 192) = v113;
            goto LABEL_79;
          }
        }
        else
        {
          if (v113 >> 60 != 15)
          {
            uint64_t v115 = *v112;
            sub_1D7860790(*v112, *(void *)(a2 + 192));
            uint64_t v116 = *(void *)(a1 + 184);
            unint64_t v117 = *(void *)(a1 + 192);
            *(void *)(a1 + 184) = v115;
            *(void *)(a1 + 192) = v113;
            sub_1D78607E8(v116, v117);
LABEL_79:
            uint64_t v118 = (uint64_t *)(a2 + 200);
            unint64_t v119 = *(void *)(a2 + 208);
            if (*(void *)(a1 + 208) >> 60 == 15)
            {
              if (v119 >> 60 != 15)
              {
                uint64_t v120 = *v118;
                sub_1D7860790(*v118, *(void *)(a2 + 208));
                *(void *)(a1 + 200) = v120;
                *(void *)(a1 + 208) = v119;
                goto LABEL_86;
              }
            }
            else
            {
              if (v119 >> 60 != 15)
              {
                uint64_t v121 = *v118;
                sub_1D7860790(*v118, *(void *)(a2 + 208));
                uint64_t v122 = *(void *)(a1 + 200);
                unint64_t v123 = *(void *)(a1 + 208);
                *(void *)(a1 + 200) = v121;
                *(void *)(a1 + 208) = v119;
                sub_1D78607E8(v122, v123);
LABEL_86:
                unint64_t v124 = (uint64_t *)(a2 + 216);
                unint64_t v107 = *(void *)(a2 + 224);
                if (*(void *)(a1 + 224) >> 60 == 15)
                {
                  if (v107 >> 60 != 15)
                  {
                    uint64_t v108 = *v124;
                    goto LABEL_89;
                  }
                }
                else
                {
                  if (v107 >> 60 != 15)
                  {
                    uint64_t v125 = *v124;
                    sub_1D7860790(*v124, v107);
                    uint64_t v126 = *(void *)(a1 + 216);
                    unint64_t v127 = *(void *)(a1 + 224);
                    *(void *)(a1 + 216) = v125;
                    *(void *)(a1 + 224) = v107;
                    sub_1D78607E8(v126, v127);
                    return a1;
                  }
                  sub_1D7870C24(a1 + 216);
                }
                *(_OWORD *)(a1 + 216) = *(_OWORD *)v124;
                return a1;
              }
              sub_1D7870C24(a1 + 200);
            }
            *(_OWORD *)(a1 + 200) = *(_OWORD *)v118;
            goto LABEL_86;
          }
          sub_1D7870C24(a1 + 184);
        }
        *(_OWORD *)(a1 + 184) = *(_OWORD *)v112;
        goto LABEL_79;
      }
      sub_1D7870C24(a1 + 168);
    }
    *(_OWORD *)(a1 + 168) = *(_OWORD *)v96;
    goto LABEL_72;
  }
  if (v75 >> 60 != 15)
  {
    uint64_t v84 = *(void *)(a2 + 136);
    sub_1D7860790(v84, *(void *)(a2 + 144));
    *(void *)(a1 + 136) = v84;
    *(void *)(a1 + 144) = v75;
    uint64_t v85 = *(void *)(a2 + 152);
    unint64_t v86 = *(void *)(a2 + 160);
    sub_1D7860790(v85, v86);
    *(void *)(a1 + 152) = v85;
    *(void *)(a1 + 160) = v86;
    uint64_t v87 = (uint64_t *)(a2 + 168);
    unint64_t v88 = *(void *)(a2 + 176);
    if (v88 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 168) = *(_OWORD *)v87;
    }
    else
    {
      uint64_t v99 = *v87;
      sub_1D7860790(*v87, *(void *)(a2 + 176));
      *(void *)(a1 + 168) = v99;
      *(void *)(a1 + 176) = v88;
    }
    unint64_t v100 = (uint64_t *)(a2 + 184);
    unint64_t v101 = *(void *)(a2 + 192);
    if (v101 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 184) = *(_OWORD *)v100;
    }
    else
    {
      uint64_t v102 = *v100;
      sub_1D7860790(*v100, *(void *)(a2 + 192));
      *(void *)(a1 + 184) = v102;
      *(void *)(a1 + 192) = v101;
    }
    uint64_t v103 = (uint64_t *)(a2 + 200);
    unint64_t v104 = *(void *)(a2 + 208);
    if (v104 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 200) = *(_OWORD *)v103;
    }
    else
    {
      uint64_t v105 = *v103;
      sub_1D7860790(*v103, *(void *)(a2 + 208));
      *(void *)(a1 + 200) = v105;
      *(void *)(a1 + 208) = v104;
    }
    uint64_t v106 = (_OWORD *)(a2 + 216);
    unint64_t v107 = *(void *)(a2 + 224);
    if (v107 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 216) = *v106;
      return a1;
    }
    uint64_t v108 = *(void *)v106;
LABEL_89:
    sub_1D7860790(v108, v107);
    *(void *)(a1 + 216) = v108;
    *(void *)(a1 + 224) = v107;
    return a1;
  }
  long long v76 = *(_OWORD *)(a2 + 152);
  *uint64_t v73 = *v74;
  *(_OWORD *)(a1 + 152) = v76;
  long long v77 = *(_OWORD *)(a2 + 168);
  long long v78 = *(_OWORD *)(a2 + 184);
  long long v79 = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = v79;
  *(_OWORD *)(a1 + 168) = v77;
  *(_OWORD *)(a1 + 184) = v78;
  return a1;
}

uint64_t *sub_1D788D034(uint64_t *a1)
{
  return a1;
}

__n128 __swift_memcpy232_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  long long v7 = a2[7];
  long long v8 = a2[8];
  long long v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  __n128 result = (__n128)a2[11];
  long long v11 = a2[12];
  long long v12 = a2[13];
  *(void *)(a1 + 224) = *((void *)a2 + 28);
  *(_OWORD *)(a1 + 192) = v11;
  *(_OWORD *)(a1 + 208) = v12;
  *(__n128 *)(a1 + 176) = result;
  return result;
}

uint64_t assignWithTake for HPKEEnvelopeEncryptedMessagePKRHash(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  long long v4 = (_OWORD *)(a1 + 8);
  long long v5 = (_OWORD *)(a2 + 8);
  if (*(void *)(a1 + 128) == 1) {
    goto LABEL_4;
  }
  if (*(void *)(a2 + 128) == 1)
  {
    sub_1D7871C4C(a1 + 8, &qword_1EA842648);
LABEL_4:
    long long v6 = v5[5];
    v4[4] = v5[4];
    void v4[5] = v6;
    long long v7 = v5[7];
    v4[6] = v5[6];
    v4[7] = v7;
    long long v8 = v5[1];
    _OWORD *v4 = *v5;
    v4[1] = v8;
    long long v9 = v5[3];
    v4[2] = v5[2];
    v4[3] = v9;
    goto LABEL_26;
  }
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  unint64_t v11 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_1D78607E8(v10, v11);
  uint64_t v12 = *(void *)(a1 + 32);
  unint64_t v13 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_1D78607E8(v12, v13);
  long long v14 = (_OWORD *)(a2 + 48);
  unint64_t v15 = *(void *)(a1 + 56);
  if (v15 >> 60 == 15) {
    goto LABEL_8;
  }
  unint64_t v16 = *(void *)(a2 + 56);
  if (v16 >> 60 == 15)
  {
    sub_1D7870C24(a1 + 48);
LABEL_8:
    *(_OWORD *)(a1 + 48) = *v14;
    goto LABEL_10;
  }
  uint64_t v17 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)v14;
  *(void *)(a1 + 56) = v16;
  sub_1D78607E8(v17, v15);
LABEL_10:
  long long v18 = (_OWORD *)(a2 + 64);
  unint64_t v19 = *(void *)(a1 + 72);
  if (v19 >> 60 == 15)
  {
LABEL_13:
    *(_OWORD *)(a1 + 64) = *v18;
    goto LABEL_15;
  }
  unint64_t v20 = *(void *)(a2 + 72);
  if (v20 >> 60 == 15)
  {
    sub_1D7870C24(a1 + 64);
    goto LABEL_13;
  }
  uint64_t v21 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = *(void *)v18;
  *(void *)(a1 + 72) = v20;
  sub_1D78607E8(v21, v19);
LABEL_15:
  unint64_t v22 = (_OWORD *)(a2 + 80);
  unint64_t v23 = *(void *)(a1 + 88);
  if (v23 >> 60 == 15)
  {
LABEL_18:
    *(_OWORD *)(a1 + 80) = *v22;
    goto LABEL_20;
  }
  unint64_t v24 = *(void *)(a2 + 88);
  if (v24 >> 60 == 15)
  {
    sub_1D7870C24(a1 + 80);
    goto LABEL_18;
  }
  uint64_t v25 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = *(void *)v22;
  *(void *)(a1 + 88) = v24;
  sub_1D78607E8(v25, v23);
LABEL_20:
  unint64_t v26 = (void *)(a2 + 96);
  unint64_t v27 = *(void *)(a1 + 104);
  if (v27 >> 60 != 15)
  {
    unint64_t v28 = *(void *)(a2 + 104);
    if (v28 >> 60 != 15)
    {
      uint64_t v29 = *(void *)(a1 + 96);
      *(void *)(a1 + 96) = *v26;
      *(void *)(a1 + 104) = v28;
      sub_1D78607E8(v29, v27);
      goto LABEL_25;
    }
    sub_1D7870C24(a1 + 96);
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)v26;
LABEL_25:
  uint64_t v30 = *(void *)(a1 + 112);
  unint64_t v31 = *(void *)(a1 + 120);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  sub_1D78607E8(v30, v31);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRelease();
LABEL_26:
  unint64_t v32 = *(void *)(a1 + 144);
  if (v32 >> 60 == 15)
  {
LABEL_29:
    long long v34 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = v34;
    long long v35 = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 216) = v35;
    long long v36 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v36;
    return a1;
  }
  unint64_t v33 = *(void *)(a2 + 144);
  if (v33 >> 60 == 15)
  {
    sub_1D788D034((uint64_t *)(a1 + 136));
    goto LABEL_29;
  }
  uint64_t v37 = *(void *)(a1 + 136);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v33;
  sub_1D78607E8(v37, v32);
  uint64_t v38 = *(void *)(a1 + 152);
  unint64_t v39 = *(void *)(a1 + 160);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  sub_1D78607E8(v38, v39);
  int v40 = (_OWORD *)(a2 + 168);
  unint64_t v41 = *(void *)(a1 + 176);
  if (v41 >> 60 == 15) {
    goto LABEL_33;
  }
  unint64_t v42 = *(void *)(a2 + 176);
  if (v42 >> 60 == 15)
  {
    sub_1D7870C24(a1 + 168);
LABEL_33:
    *(_OWORD *)(a1 + 168) = *v40;
    goto LABEL_35;
  }
  uint64_t v43 = *(void *)(a1 + 168);
  *(void *)(a1 + 168) = *(void *)v40;
  *(void *)(a1 + 176) = v42;
  sub_1D78607E8(v43, v41);
LABEL_35:
  unint64_t v44 = (_OWORD *)(a2 + 184);
  unint64_t v45 = *(void *)(a1 + 192);
  if (v45 >> 60 == 15)
  {
LABEL_38:
    *(_OWORD *)(a1 + 184) = *v44;
    goto LABEL_40;
  }
  unint64_t v46 = *(void *)(a2 + 192);
  if (v46 >> 60 == 15)
  {
    sub_1D7870C24(a1 + 184);
    goto LABEL_38;
  }
  uint64_t v47 = *(void *)(a1 + 184);
  *(void *)(a1 + 184) = *(void *)v44;
  *(void *)(a1 + 192) = v46;
  sub_1D78607E8(v47, v45);
LABEL_40:
  uint64_t v48 = (void *)(a2 + 200);
  unint64_t v49 = *(void *)(a1 + 208);
  if (v49 >> 60 != 15)
  {
    unint64_t v50 = *(void *)(a2 + 208);
    if (v50 >> 60 != 15)
    {
      uint64_t v51 = *(void *)(a1 + 200);
      *(void *)(a1 + 200) = *v48;
      *(void *)(a1 + 208) = v50;
      sub_1D78607E8(v51, v49);
      goto LABEL_45;
    }
    sub_1D7870C24(a1 + 200);
  }
  *(_OWORD *)(a1 + 200) = *(_OWORD *)v48;
LABEL_45:
  unint64_t v52 = (void *)(a2 + 216);
  unint64_t v53 = *(void *)(a1 + 224);
  if (v53 >> 60 != 15)
  {
    unint64_t v54 = *(void *)(a2 + 224);
    if (v54 >> 60 != 15)
    {
      uint64_t v55 = *(void *)(a1 + 216);
      *(void *)(a1 + 216) = *v52;
      *(void *)(a1 + 224) = v54;
      sub_1D78607E8(v55, v53);
      return a1;
    }
    sub_1D7870C24(a1 + 216);
  }
  *(_OWORD *)(a1 + 216) = *(_OWORD *)v52;
  return a1;
}

uint64_t getEnumTagSinglePayload for HPKEEnvelopeEncryptedMessagePKRHash(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFFD && *(unsigned char *)(a1 + 232)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 128);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  BOOL v5 = __OFSUB__(v4, 1);
  int v6 = v4 - 1;
  if (v6 < 0 != v5) {
    int v6 = -1;
  }
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for HPKEEnvelopeEncryptedMessagePKRHash(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 2147483646;
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 232) = 1;
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 232) = 0;
    }
    if (a2) {
      *(void *)(result + 128) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HPKEEnvelopeEncryptedMessagePKRHash()
{
  return &type metadata for HPKEEnvelopeEncryptedMessagePKRHash;
}

void destroy for HPKEPrivateKey(uint64_t a1)
{
}

uint64_t _s13CoreIDVShared14HPKEPrivateKeyOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)a2;
  int v4 = *(void **)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_1D7885B48(*(void **)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for HPKEPrivateKey(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)a2;
  int v4 = *(void **)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_1D7885B48(*(void **)a2, v4, v5);
  int v6 = *(void **)a1;
  long long v7 = *(void **)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  sub_1D7885B7C(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for HPKEPrivateKey(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  int v4 = *(void **)a1;
  char v5 = *(void **)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  sub_1D7885B7C(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for HPKEPrivateKey(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HPKEPrivateKey(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1D788D6EC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_1D788D6F4(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for HPKEPrivateKey()
{
  return &type metadata for HPKEPrivateKey;
}

uint64_t destroy for HPKEParams(uint64_t *a1)
{
  sub_1D78607E8(*a1, a1[1]);
  uint64_t result = sub_1D78607E8(a1[2], a1[3]);
  unint64_t v3 = a1[5];
  if (v3 >> 60 != 15) {
    uint64_t result = sub_1D78607E8(a1[4], v3);
  }
  unint64_t v4 = a1[7];
  if (v4 >> 60 != 15) {
    uint64_t result = sub_1D78607E8(a1[6], v4);
  }
  unint64_t v5 = a1[9];
  if (v5 >> 60 != 15) {
    uint64_t result = sub_1D78607E8(a1[8], v5);
  }
  unint64_t v6 = a1[11];
  if (v6 >> 60 != 15)
  {
    uint64_t v7 = a1[10];
    return sub_1D78607E8(v7, v6);
  }
  return result;
}

uint64_t initializeWithCopy for HPKEParams(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1D7860790(*a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = a2[2];
  unint64_t v7 = a2[3];
  sub_1D7860790(v6, v7);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  char v8 = a2 + 4;
  unint64_t v9 = a2[5];
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v8;
  }
  else
  {
    uint64_t v10 = *v8;
    sub_1D7860790(*v8, a2[5]);
    *(void *)(a1 + 32) = v10;
    *(void *)(a1 + 40) = v9;
  }
  unint64_t v11 = a2 + 6;
  unint64_t v12 = a2[7];
  if (v12 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)v11;
  }
  else
  {
    uint64_t v13 = *v11;
    sub_1D7860790(*v11, a2[7]);
    *(void *)(a1 + 48) = v13;
    *(void *)(a1 + 56) = v12;
  }
  long long v14 = a2 + 8;
  unint64_t v15 = a2[9];
  if (v15 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)v14;
  }
  else
  {
    uint64_t v16 = *v14;
    sub_1D7860790(*v14, a2[9]);
    *(void *)(a1 + 64) = v16;
    *(void *)(a1 + 72) = v15;
  }
  uint64_t v17 = a2 + 10;
  unint64_t v18 = a2[11];
  if (v18 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)v17;
  }
  else
  {
    uint64_t v19 = *v17;
    sub_1D7860790(*v17, v18);
    *(void *)(a1 + 80) = v19;
    *(void *)(a1 + 88) = v18;
  }
  return a1;
}

uint64_t *assignWithCopy for HPKEParams(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1D7860790(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_1D78607E8(v6, v7);
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_1D7860790(v8, v9);
  uint64_t v10 = a1[2];
  unint64_t v11 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  sub_1D78607E8(v10, v11);
  unint64_t v12 = a2 + 4;
  unint64_t v13 = a2[5];
  if ((unint64_t)a1[5] >> 60 == 15)
  {
    if (v13 >> 60 != 15)
    {
      uint64_t v14 = *v12;
      sub_1D7860790(*v12, a2[5]);
      a1[4] = v14;
      a1[5] = v13;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v13 >> 60 == 15)
  {
    sub_1D7870C24((uint64_t)(a1 + 4));
LABEL_6:
    *((_OWORD *)a1 + 2) = *(_OWORD *)v12;
    goto LABEL_8;
  }
  uint64_t v15 = *v12;
  sub_1D7860790(*v12, a2[5]);
  uint64_t v16 = a1[4];
  unint64_t v17 = a1[5];
  a1[4] = v15;
  a1[5] = v13;
  sub_1D78607E8(v16, v17);
LABEL_8:
  unint64_t v18 = a2 + 6;
  unint64_t v19 = a2[7];
  if ((unint64_t)a1[7] >> 60 == 15)
  {
    if (v19 >> 60 != 15)
    {
      uint64_t v20 = *v18;
      sub_1D7860790(*v18, a2[7]);
      a1[6] = v20;
      a1[7] = v19;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v19 >> 60 == 15)
  {
    sub_1D7870C24((uint64_t)(a1 + 6));
LABEL_13:
    *((_OWORD *)a1 + 3) = *(_OWORD *)v18;
    goto LABEL_15;
  }
  uint64_t v21 = *v18;
  sub_1D7860790(*v18, a2[7]);
  uint64_t v22 = a1[6];
  unint64_t v23 = a1[7];
  a1[6] = v21;
  a1[7] = v19;
  sub_1D78607E8(v22, v23);
LABEL_15:
  unint64_t v24 = a2 + 8;
  unint64_t v25 = a2[9];
  if ((unint64_t)a1[9] >> 60 == 15)
  {
    if (v25 >> 60 != 15)
    {
      uint64_t v26 = *v24;
      sub_1D7860790(*v24, a2[9]);
      a1[8] = v26;
      a1[9] = v25;
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  if (v25 >> 60 == 15)
  {
    sub_1D7870C24((uint64_t)(a1 + 8));
LABEL_20:
    *((_OWORD *)a1 + 4) = *(_OWORD *)v24;
    goto LABEL_22;
  }
  uint64_t v27 = *v24;
  sub_1D7860790(*v24, a2[9]);
  uint64_t v28 = a1[8];
  unint64_t v29 = a1[9];
  a1[8] = v27;
  a1[9] = v25;
  sub_1D78607E8(v28, v29);
LABEL_22:
  uint64_t v30 = a2 + 10;
  unint64_t v31 = a2[11];
  if ((unint64_t)a1[11] >> 60 != 15)
  {
    if (v31 >> 60 != 15)
    {
      uint64_t v33 = *v30;
      sub_1D7860790(*v30, v31);
      uint64_t v34 = a1[10];
      unint64_t v35 = a1[11];
      a1[10] = v33;
      a1[11] = v31;
      sub_1D78607E8(v34, v35);
      return a1;
    }
    sub_1D7870C24((uint64_t)(a1 + 10));
    goto LABEL_27;
  }
  if (v31 >> 60 == 15)
  {
LABEL_27:
    *((_OWORD *)a1 + 5) = *(_OWORD *)v30;
    return a1;
  }
  uint64_t v32 = *v30;
  sub_1D7860790(*v30, v31);
  a1[10] = v32;
  a1[11] = v31;
  return a1;
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t assignWithTake for HPKEParams(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_1D78607E8(v4, v5);
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_1D78607E8(v6, v7);
  uint64_t v8 = (_OWORD *)(a2 + 32);
  unint64_t v9 = *(void *)(a1 + 40);
  if (v9 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v10 = *(void *)(a2 + 40);
  if (v10 >> 60 == 15)
  {
    sub_1D7870C24(a1 + 32);
LABEL_4:
    *(_OWORD *)(a1 + 32) = *v8;
    goto LABEL_6;
  }
  uint64_t v11 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = *(void *)v8;
  *(void *)(a1 + 40) = v10;
  sub_1D78607E8(v11, v9);
LABEL_6:
  unint64_t v12 = (_OWORD *)(a2 + 48);
  unint64_t v13 = *(void *)(a1 + 56);
  if (v13 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)(a1 + 48) = *v12;
    goto LABEL_11;
  }
  unint64_t v14 = *(void *)(a2 + 56);
  if (v14 >> 60 == 15)
  {
    sub_1D7870C24(a1 + 48);
    goto LABEL_9;
  }
  uint64_t v15 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)v12;
  *(void *)(a1 + 56) = v14;
  sub_1D78607E8(v15, v13);
LABEL_11:
  uint64_t v16 = (_OWORD *)(a2 + 64);
  unint64_t v17 = *(void *)(a1 + 72);
  if (v17 >> 60 == 15)
  {
LABEL_14:
    *(_OWORD *)(a1 + 64) = *v16;
    goto LABEL_16;
  }
  unint64_t v18 = *(void *)(a2 + 72);
  if (v18 >> 60 == 15)
  {
    sub_1D7870C24(a1 + 64);
    goto LABEL_14;
  }
  uint64_t v19 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = *(void *)v16;
  *(void *)(a1 + 72) = v18;
  sub_1D78607E8(v19, v17);
LABEL_16:
  uint64_t v20 = (void *)(a2 + 80);
  unint64_t v21 = *(void *)(a1 + 88);
  if (v21 >> 60 != 15)
  {
    unint64_t v22 = *(void *)(a2 + 88);
    if (v22 >> 60 != 15)
    {
      uint64_t v23 = *(void *)(a1 + 80);
      *(void *)(a1 + 80) = *v20;
      *(void *)(a1 + 88) = v22;
      sub_1D78607E8(v23, v21);
      return a1;
    }
    sub_1D7870C24(a1 + 80);
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)v20;
  return a1;
}

uint64_t getEnumTagSinglePayload for HPKEParams(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 96)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for HPKEParams(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 13;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 96) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HPKEParams()
{
  return &type metadata for HPKEParams;
}

ValueMetadata *type metadata accessor for HPKEKEMMode()
{
  return &type metadata for HPKEKEMMode;
}

uint64_t destroy for AEADKey()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for AEADKey(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AEADKey(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for AEADKey(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DIPError(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DIPError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AEADKey()
{
  return &type metadata for AEADKey;
}

uint64_t sub_1D788DFA8()
{
  uint64_t result = sub_1D7A9C9A8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1D788E04C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v9 = *(void *)(v5 + 64);
  }
  else {
    size_t v9 = *(void *)(v5 + 64) + 1;
  }
  unint64_t v10 = ((v7 + 32) & ~(unint64_t)v7) + v9;
  int v11 = v7 & 0x100000;
  if (v8 > 7 || v11 != 0 || v10 > 0x18)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v8 & 0xF8 ^ 0x1F8) & (v8 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v15 = ~v8;
    uint64_t v16 = a2[1];
    *a1 = *a2;
    a1[1] = v16;
    unint64_t v17 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v18 = (uint64_t *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v19 = *v18;
    unint64_t v20 = v18[1];
    swift_bridgeObjectRetain();
    sub_1D7860790(v19, v20);
    void *v17 = v19;
    v17[1] = v20;
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(((unint64_t)v18 + v8 + 16) & ~v8, 1, v4))
    {
      memcpy((void *)(((unint64_t)v17 + v8 + 16) & v15), (const void *)(((unint64_t)v18 + v8 + 16) & v15), v9);
    }
    else
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(((unint64_t)v17 + v8 + 16) & v15, ((unint64_t)v18 + v8 + 16) & v15, v4);
      (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v6 + 56))(((unint64_t)v17 + v8 + 16) & v15, 0, 1, v4);
    }
  }
  return a1;
}

uint64_t sub_1D788E1F0(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  unint64_t v4 = (a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  sub_1D78607E8(*(void *)v4, *(void *)(v4 + 8));
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = (v4 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = v6;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v7, 1, v5);
  if (!result)
  {
    size_t v9 = *(uint64_t (**)(unint64_t, uint64_t))(v10 + 8);
    return v9(v7, v5);
  }
  return result;
}

void *sub_1D788E2D0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  uint64_t v6 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v7 = (uint64_t *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = *v7;
  unint64_t v9 = v7[1];
  swift_bridgeObjectRetain();
  sub_1D7860790(v8, v9);
  void *v6 = v8;
  v6[1] = v9;
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  unint64_t v13 = (void *)(((unint64_t)v6 + v12 + 16) & ~v12);
  uint64_t v14 = (const void *)(((unint64_t)v7 + v12 + 16) & ~v12);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v14, 1, v10))
  {
    if (*(_DWORD *)(v11 + 84)) {
      size_t v15 = *(void *)(v11 + 64);
    }
    else {
      size_t v15 = *(void *)(v11 + 64) + 1;
    }
    memcpy(v13, v14, v15);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v13, v14, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v10);
  }
  return a1;
}

void *sub_1D788E40C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = (uint64_t *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v7 = (uint64_t *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = *v7;
  unint64_t v9 = v7[1];
  sub_1D7860790(*v7, v9);
  uint64_t v10 = *v6;
  unint64_t v11 = v6[1];
  uint64_t *v6 = v8;
  v6[1] = v9;
  sub_1D78607E8(v10, v11);
  uint64_t v12 = *(void *)(a3 + 16);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  size_t v15 = (void *)(((unint64_t)v6 + v14 + 16) & ~v14);
  uint64_t v16 = (void *)(((unint64_t)v7 + v14 + 16) & ~v14);
  unint64_t v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  LODWORD(v6) = v17(v15, 1, v12);
  int v18 = v17(v16, 1, v12);
  if (v6)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 16))(v15, v16, v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v15, 0, 1, v12);
      return a1;
    }
    int v19 = *(_DWORD *)(v13 + 84);
    size_t v20 = *(void *)(v13 + 64);
  }
  else
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 24))(v15, v16, v12);
      return a1;
    }
    unint64_t v22 = *(void (**)(void *, uint64_t))(v13 + 8);
    uint64_t v21 = v13 + 8;
    v22(v15, v12);
    int v19 = *(_DWORD *)(v21 + 76);
    size_t v20 = *(void *)(v21 + 56);
  }
  if (v19) {
    size_t v23 = v20;
  }
  else {
    size_t v23 = v20 + 1;
  }
  memcpy(v15, v16, v23);
  return a1;
}

_OWORD *sub_1D788E5D0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v4 = (_OWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = (_OWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  _OWORD *v4 = *v5;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  unint64_t v9 = (void *)(((unint64_t)v4 + v8 + 16) & ~v8);
  uint64_t v10 = (const void *)(((unint64_t)v5 + v8 + 16) & ~v8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6))
  {
    if (*(_DWORD *)(v7 + 84)) {
      size_t v11 = *(void *)(v7 + 64);
    }
    else {
      size_t v11 = *(void *)(v7 + 64) + 1;
    }
    memcpy(v9, v10, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(v9, v10, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
  }
  return a1;
}

void *sub_1D788E704(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = (uint64_t *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (_OWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = *v7;
  unint64_t v10 = v7[1];
  *(_OWORD *)uint64_t v7 = *v8;
  sub_1D78607E8(v9, v10);
  uint64_t v11 = *(void *)(a3 + 16);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v14 = (void *)(((unint64_t)v7 + v13 + 16) & ~v13);
  size_t v15 = (void *)(((unint64_t)v8 + v13 + 16) & ~v13);
  uint64_t v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  LODWORD(v8) = v16(v14, 1, v11);
  int v17 = v16(v15, 1, v11);
  if (v8)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v14, v15, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v14, 0, 1, v11);
      return a1;
    }
    int v18 = *(_DWORD *)(v12 + 84);
    size_t v19 = *(void *)(v12 + 64);
  }
  else
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v14, v15, v11);
      return a1;
    }
    uint64_t v21 = *(void (**)(void *, uint64_t))(v12 + 8);
    uint64_t v20 = v12 + 8;
    v21(v14, v11);
    int v18 = *(_DWORD *)(v20 + 76);
    size_t v19 = *(void *)(v20 + 56);
  }
  if (v18) {
    size_t v22 = v19;
  }
  else {
    size_t v22 = v19 + 1;
  }
  memcpy(v14, v15, v22);
  return a1;
}

uint64_t sub_1D788E8AC(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  int v5 = *(_DWORD *)(v4 + 84);
  if (v5) {
    unsigned int v6 = v5 - 1;
  }
  else {
    unsigned int v6 = 0;
  }
  if (v6 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = v6;
  }
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v5) {
    ++v9;
  }
  if (!a2) {
    return 0;
  }
  int v10 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_28;
  }
  uint64_t v11 = v9 + ((v8 + 32) & ~v8);
  char v12 = 8 * v11;
  if (v11 <= 3)
  {
    unsigned int v15 = ((v10 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      int v13 = *(_DWORD *)((char *)a1 + v11);
      if (!v13) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
    if (v15 > 0xFF)
    {
      int v13 = *(unsigned __int16 *)((char *)a1 + v11);
      if (!*(unsigned __int16 *)((char *)a1 + v11)) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
    if (v15 < 2)
    {
LABEL_28:
      if ((v6 & 0x80000000) != 0)
      {
        unsigned int v18 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8)
                                                                     + v8
                                                                     + 16) & ~v8);
        if (v18 >= 2) {
          return v18 - 1;
        }
        else {
          return 0;
        }
      }
      else
      {
        unint64_t v17 = *((void *)a1 + 1);
        if (v17 >= 0xFFFFFFFF) {
          LODWORD(v17) = -1;
        }
        return (v17 + 1);
      }
    }
  }
  int v13 = *((unsigned __int8 *)a1 + v11);
  if (!*((unsigned char *)a1 + v11)) {
    goto LABEL_28;
  }
LABEL_20:
  int v16 = (v13 - 1) << v12;
  if (v11 > 3) {
    int v16 = 0;
  }
  if (v11)
  {
    if (v11 > 3) {
      LODWORD(v11) = 4;
    }
    switch((int)v11)
    {
      case 2:
        LODWORD(v11) = *a1;
        break;
      case 3:
        LODWORD(v11) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v11) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v11) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v11 | v16) + 1;
}

void sub_1D788EA90(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = v9;
  }
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  size_t v12 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (!v8) {
    ++v12;
  }
  size_t v13 = ((v11 + 32) & ~v11) + v12;
  BOOL v14 = a3 >= v10;
  unsigned int v15 = a3 - v10;
  if (v15 == 0 || !v14)
  {
LABEL_17:
    if (v10 < a2) {
      goto LABEL_18;
    }
    goto LABEL_25;
  }
  if (v13 > 3)
  {
    int v6 = 1;
    if (v10 < a2) {
      goto LABEL_18;
    }
    goto LABEL_25;
  }
  unsigned int v16 = ((v15 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
  if (!HIWORD(v16))
  {
    if (v16 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v16 > 1;
    }
    goto LABEL_17;
  }
  int v6 = 4;
  if (v10 < a2)
  {
LABEL_18:
    unsigned int v17 = ~v10 + a2;
    if (v13 < 4)
    {
      int v18 = (v17 >> (8 * v13)) + 1;
      if (v13)
      {
        int v19 = v17 & ~(-1 << (8 * v13));
        bzero(a1, v13);
        if (v13 == 3)
        {
          *(_WORD *)a1 = v19;
          a1[2] = BYTE2(v19);
        }
        else if (v13 == 2)
        {
          *(_WORD *)a1 = v19;
        }
        else
        {
          *a1 = v19;
        }
      }
    }
    else
    {
      bzero(a1, v13);
      *(_DWORD *)a1 = v17;
      int v18 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v13] = v18;
        return;
      case 2:
        *(_WORD *)&a1[v13] = v18;
        return;
      case 3:
        goto LABEL_59;
      case 4:
        *(_DWORD *)&a1[v13] = v18;
        return;
      default:
        return;
    }
  }
LABEL_25:
  switch(v6)
  {
    case 1:
      a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 2:
      *(_WORD *)&a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 3:
LABEL_59:
      __break(1u);
      JUMPOUT(0x1D788EDA8);
    case 4:
      *(_DWORD *)&a1[v13] = 0;
      goto LABEL_29;
    default:
LABEL_29:
      if (a2)
      {
LABEL_30:
        if ((v9 & 0x80000000) != 0)
        {
          uint64_t v20 = (unsigned char *)((((unint64_t)(a1 + 23) & 0xFFFFFFFFFFFFFFF8) + v11 + 16) & ~v11);
          if (v9 >= a2)
          {
            uint64_t v24 = a2 + 1;
            unint64_t v25 = *(void (**)(unint64_t, uint64_t))(v7 + 56);
            unint64_t v26 = (((unint64_t)(a1 + 23) & 0xFFFFFFFFFFFFFFF8) + v11 + 16) & ~v11;
            v25(v26, v24);
          }
          else
          {
            if (v12 <= 3) {
              int v21 = ~(-1 << (8 * v12));
            }
            else {
              int v21 = -1;
            }
            if (v12)
            {
              int v22 = v21 & (~v9 + a2);
              if (v12 <= 3) {
                int v23 = v12;
              }
              else {
                int v23 = 4;
              }
              bzero(v20, v12);
              switch(v23)
              {
                case 2:
                  *(_WORD *)uint64_t v20 = v22;
                  break;
                case 3:
                  *(_WORD *)uint64_t v20 = v22;
                  v20[2] = BYTE2(v22);
                  break;
                case 4:
                  *(_DWORD *)uint64_t v20 = v22;
                  break;
                default:
                  *uint64_t v20 = v22;
                  break;
              }
            }
          }
        }
        else if ((a2 & 0x80000000) != 0)
        {
          *(void *)a1 = a2 ^ 0x80000000;
          *((void *)a1 + 1) = 0;
        }
        else
        {
          *((void *)a1 + 1) = a2 - 1;
        }
      }
      return;
  }
}

void *initializeBufferWithCopyOfBuffer for HPKESuiteKwV1(void *a1, uint64_t *a2, int *a3)
{
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v5 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    *a1 = v5;
    a1 = (void *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v8 = a2[1];
    *a1 = v5;
    a1[1] = v8;
    uint64_t v9 = a3[5];
    unsigned int v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = sub_1D7A9BA18();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    uint64_t v13 = a3[6];
    BOOL v14 = (void *)((char *)a1 + v13);
    unsigned int v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v16 = *v15;
    unint64_t v17 = v15[1];
    sub_1D7860790(*v15, v17);
    *BOOL v14 = v16;
    v14[1] = v17;
    uint64_t v18 = a3[7];
    int v19 = (char *)a1 + v18;
    uint64_t v20 = (char *)a2 + v18;
    unint64_t v21 = *((void *)v20 + 1);
    if (v21 >> 60 == 15)
    {
      *(_OWORD *)int v19 = *(_OWORD *)v20;
    }
    else
    {
      uint64_t v22 = *(void *)v20;
      sub_1D7860790(*(void *)v20, *((void *)v20 + 1));
      *(void *)int v19 = v22;
      *((void *)v19 + 1) = v21;
    }
    uint64_t v23 = a3[8];
    uint64_t v24 = (char *)a1 + v23;
    unint64_t v25 = (char *)a2 + v23;
    int v26 = v25[16];
    if (v26 == 255)
    {
      *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
      v24[16] = v25[16];
    }
    else
    {
      char v27 = v26 & 1;
      uint64_t v28 = *(void *)v25;
      unint64_t v29 = (void *)*((void *)v25 + 1);
      sub_1D7885B48(*(void **)v25, v29, v26 & 1);
      *(void *)uint64_t v24 = v28;
      *((void *)v24 + 1) = v29;
      v24[16] = v27;
    }
  }
  return a1;
}

void destroy for HPKESuiteKwV1(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = sub_1D7A9BA18();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  sub_1D78607E8(*(void *)(a1 + a2[6]), *(void *)(a1 + a2[6] + 8));
  int v6 = (uint64_t *)(a1 + a2[7]);
  unint64_t v7 = v6[1];
  if (v7 >> 60 != 15) {
    sub_1D78607E8(*v6, v7);
  }
  uint64_t v8 = a1 + a2[8];
  int v9 = *(unsigned __int8 *)(v8 + 16);
  if (v9 != 255)
  {
    unsigned int v10 = *(void **)v8;
    uint64_t v11 = *(void **)(v8 + 8);
    sub_1D7885B7C(v10, v11, v9 & 1);
  }
}

_OWORD *initializeWithCopy for HPKESuiteKwV1(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_1D7A9BA18();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (uint64_t *)((char *)a1 + v10);
  uint64_t v12 = (uint64_t *)((char *)a2 + v10);
  uint64_t v13 = *v12;
  unint64_t v14 = v12[1];
  sub_1D7860790(*v12, v14);
  uint64_t *v11 = v13;
  v11[1] = v14;
  uint64_t v15 = a3[7];
  uint64_t v16 = (char *)a1 + v15;
  unint64_t v17 = (char *)a2 + v15;
  unint64_t v18 = *((void *)v17 + 1);
  if (v18 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
  }
  else
  {
    uint64_t v19 = *(void *)v17;
    sub_1D7860790(*(void *)v17, *((void *)v17 + 1));
    *(void *)uint64_t v16 = v19;
    *((void *)v16 + 1) = v18;
  }
  uint64_t v20 = a3[8];
  unint64_t v21 = (char *)a1 + v20;
  uint64_t v22 = (char *)a2 + v20;
  int v23 = v22[16];
  if (v23 == 255)
  {
    *(_OWORD *)unint64_t v21 = *(_OWORD *)v22;
    v21[16] = v22[16];
  }
  else
  {
    char v24 = v23 & 1;
    uint64_t v25 = *(void *)v22;
    int v26 = (void *)*((void *)v22 + 1);
    sub_1D7885B48(*(void **)v22, v26, v23 & 1);
    *(void *)unint64_t v21 = v25;
    *((void *)v21 + 1) = v26;
    v21[16] = v24;
  }
  return a1;
}

_OWORD *assignWithCopy for HPKESuiteKwV1(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_1D7A9BA18();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (uint64_t *)((char *)a1 + v10);
  uint64_t v12 = (uint64_t *)((char *)a2 + v10);
  uint64_t v13 = *v12;
  unint64_t v14 = v12[1];
  sub_1D7860790(*v12, v14);
  uint64_t v15 = *v11;
  unint64_t v16 = v11[1];
  uint64_t *v11 = v13;
  v11[1] = v14;
  sub_1D78607E8(v15, v16);
  uint64_t v17 = a3[7];
  unint64_t v18 = (uint64_t *)((char *)a1 + v17);
  uint64_t v19 = (uint64_t *)((char *)a2 + v17);
  unint64_t v20 = *(void *)((char *)a2 + v17 + 8);
  if (*(void *)((char *)a1 + v17 + 8) >> 60 == 15)
  {
    if (v20 >> 60 != 15)
    {
      uint64_t v21 = *v19;
      sub_1D7860790(v21, v20);
      *unint64_t v18 = v21;
      v18[1] = v20;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v20 >> 60 == 15)
  {
    sub_1D7870C24((uint64_t)v18);
LABEL_6:
    *(_OWORD *)unint64_t v18 = *(_OWORD *)v19;
    goto LABEL_8;
  }
  uint64_t v22 = *v19;
  sub_1D7860790(v22, v20);
  uint64_t v23 = *v18;
  unint64_t v24 = v18[1];
  *unint64_t v18 = v22;
  v18[1] = v20;
  sub_1D78607E8(v23, v24);
LABEL_8:
  uint64_t v25 = a3[8];
  uint64_t v26 = (uint64_t)a1 + v25;
  char v27 = (char *)a2 + v25;
  int v28 = *((unsigned __int8 *)a1 + v25 + 16);
  int v29 = *((unsigned __int8 *)a2 + v25 + 16);
  if (v28 == 255)
  {
    if (v29 == 255)
    {
      long long v31 = *(_OWORD *)v27;
      *(unsigned char *)(v26 + 16) = v27[16];
      *(_OWORD *)uint64_t v26 = v31;
    }
    else
    {
      char v38 = v29 & 1;
      unint64_t v39 = *(void **)v27;
      int v40 = (void *)*((void *)v27 + 1);
      sub_1D7885B48(v39, v40, v29 & 1);
      *(void *)uint64_t v26 = v39;
      *(void *)(v26 + 8) = v40;
      *(unsigned char *)(v26 + 16) = v38;
    }
  }
  else if (v29 == 255)
  {
    sub_1D788F350(v26);
    char v30 = v27[16];
    *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
    *(unsigned char *)(v26 + 16) = v30;
  }
  else
  {
    char v32 = v29 & 1;
    uint64_t v33 = *(void **)v27;
    uint64_t v34 = (void *)*((void *)v27 + 1);
    sub_1D7885B48(v33, v34, v29 & 1);
    unint64_t v35 = *(void **)v26;
    long long v36 = *(void **)(v26 + 8);
    char v37 = *(unsigned char *)(v26 + 16);
    *(void *)uint64_t v26 = v33;
    *(void *)(v26 + 8) = v34;
    *(unsigned char *)(v26 + 16) = v32;
    sub_1D7885B7C(v35, v36, v37);
  }
  return a1;
}

uint64_t sub_1D788F350(uint64_t a1)
{
  return a1;
}

_OWORD *initializeWithTake for HPKESuiteKwV1(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_1D7A9BA18();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  uint64_t v11 = a3[8];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  v12[16] = v13[16];
  return a1;
}

_OWORD *assignWithTake for HPKESuiteKwV1(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_1D7A9BA18();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = *(void *)((char *)a1 + v10);
  unint64_t v12 = *(void *)((char *)a1 + v10 + 8);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  sub_1D78607E8(v11, v12);
  uint64_t v13 = a3[7];
  uint64_t v14 = (uint64_t)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  unint64_t v16 = *(void *)((char *)a1 + v13 + 8);
  if (v16 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v17 = *((void *)v15 + 1);
  if (v17 >> 60 == 15)
  {
    sub_1D7870C24(v14);
LABEL_4:
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
    goto LABEL_6;
  }
  uint64_t v18 = *(void *)v14;
  *(void *)uint64_t v14 = *(void *)v15;
  *(void *)(v14 + 8) = v17;
  sub_1D78607E8(v18, v16);
LABEL_6:
  uint64_t v19 = a3[8];
  uint64_t v20 = (uint64_t)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  int v22 = *((unsigned __int8 *)a1 + v19 + 16);
  if (v22 != 255)
  {
    int v23 = v21[16];
    if (v23 != 255)
    {
      unint64_t v24 = *(void **)v20;
      uint64_t v25 = *(void **)(v20 + 8);
      *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
      *(unsigned char *)(v20 + 16) = v23 & 1;
      sub_1D7885B7C(v24, v25, v22 & 1);
      return a1;
    }
    sub_1D788F350(v20);
  }
  *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
  *(unsigned char *)(v20 + 16) = v21[16];
  return a1;
}

uint64_t getEnumTagSinglePayload for HPKESuiteKwV1(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1D788F5A4);
}

uint64_t sub_1D788F5A4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_1D7A9BA18();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for HPKESuiteKwV1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1D788F668);
}

void *sub_1D788F668(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_1D7A9BA18();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1D788F710()
{
  uint64_t result = sub_1D7A9BA18();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for AEADScheme_AES_128_GCM()
{
  return &type metadata for AEADScheme_AES_128_GCM;
}

uint64_t sub_1D788F7D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 24);
}

unsigned char *_s13CoreIDVShared39HPKEEncryptionParamsAlgorithmIdentifierOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D788F8B0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AEADKey.CodingKeys()
{
  return &type metadata for AEADKey.CodingKeys;
}

uint64_t getEnumTagSinglePayload for HPKEParams.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for HPKEParams.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D788FA44);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HPKEParams.CodingKeys()
{
  return &type metadata for HPKEParams.CodingKeys;
}

ValueMetadata *type metadata accessor for HPKEEnvelopeEncryptedMessagePKRHash.CodingKeys()
{
  return &type metadata for HPKEEnvelopeEncryptedMessagePKRHash.CodingKeys;
}

unsigned char *_s13CoreIDVShared35HPKEEnvelopeEncryptedMessagePKRHashV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D788FB58);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HPKEShallowEnvelope.CodingKeys()
{
  return &type metadata for HPKEShallowEnvelope.CodingKeys;
}

unsigned char *sub_1D788FB90(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D788FC5CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for DaemonAnalytics.GarbageCollectionEventType(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *_s13CoreIDVShared11HPKEKEMModeOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1D788FD70);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for HPKEEncryptedMessageAlgorithm.CodingKeys()
{
  return &type metadata for HPKEEncryptedMessageAlgorithm.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ISO18013MobileSecurityObject.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *sub_1D788FE38(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D788FF04);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for IDCSAnalytics.GarbageCollectionEventType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *sub_1D788FFBC(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D7890088);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

uint64_t sub_1D78900B0()
{
  return swift_getWitnessTable();
}

uint64_t sub_1D78900CC()
{
  return swift_getWitnessTable();
}

unint64_t sub_1D78900EC()
{
  unint64_t result = qword_1EA842B10;
  if (!qword_1EA842B10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA842B10);
  }
  return result;
}

uint64_t sub_1D7890140()
{
  return swift_getWitnessTable();
}

unint64_t sub_1D7890160()
{
  unint64_t result = qword_1EA842B18;
  if (!qword_1EA842B18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA842B18);
  }
  return result;
}

unint64_t sub_1D78901B8()
{
  unint64_t result = qword_1EA842B20;
  if (!qword_1EA842B20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA842B20);
  }
  return result;
}

unint64_t sub_1D7890210()
{
  unint64_t result = qword_1EA842B28;
  if (!qword_1EA842B28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA842B28);
  }
  return result;
}

unint64_t sub_1D7890268()
{
  unint64_t result = qword_1EA842B30;
  if (!qword_1EA842B30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA842B30);
  }
  return result;
}

uint64_t sub_1D78902BC()
{
  return swift_getWitnessTable();
}

uint64_t sub_1D78902D8()
{
  return swift_getWitnessTable();
}

uint64_t sub_1D78902F4()
{
  return swift_getWitnessTable();
}

unint64_t sub_1D7890314()
{
  unint64_t result = qword_1EA842B38;
  if (!qword_1EA842B38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA842B38);
  }
  return result;
}

unint64_t sub_1D789036C()
{
  unint64_t result = qword_1EA842B40;
  if (!qword_1EA842B40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA842B40);
  }
  return result;
}

unint64_t sub_1D78903C4()
{
  unint64_t result = qword_1EA842B48;
  if (!qword_1EA842B48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA842B48);
  }
  return result;
}

unint64_t sub_1D789041C()
{
  unint64_t result = qword_1EA842B50;
  if (!qword_1EA842B50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA842B50);
  }
  return result;
}

unint64_t sub_1D7890474()
{
  unint64_t result = qword_1EA842B58;
  if (!qword_1EA842B58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA842B58);
  }
  return result;
}

unint64_t sub_1D78904CC()
{
  unint64_t result = qword_1EA842B60;
  if (!qword_1EA842B60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA842B60);
  }
  return result;
}

unint64_t sub_1D7890524()
{
  unint64_t result = qword_1EA842B68;
  if (!qword_1EA842B68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA842B68);
  }
  return result;
}

unint64_t sub_1D789057C()
{
  unint64_t result = qword_1EA842B70;
  if (!qword_1EA842B70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA842B70);
  }
  return result;
}

uint64_t sub_1D78905D0()
{
  return swift_getWitnessTable();
}

uint64_t sub_1D78905EC()
{
  return swift_getWitnessTable();
}

unint64_t sub_1D789060C()
{
  unint64_t result = qword_1EA842B78;
  if (!qword_1EA842B78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA842B78);
  }
  return result;
}

unint64_t sub_1D7890664()
{
  unint64_t result = qword_1EA842B80;
  if (!qword_1EA842B80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA842B80);
  }
  return result;
}

uint64_t sub_1D78906B8()
{
  return swift_getWitnessTable();
}

uint64_t sub_1D78906D4()
{
  return swift_getWitnessTable();
}

uint64_t sub_1D78906F0()
{
  return swift_getWitnessTable();
}

uint64_t sub_1D789070C()
{
  return swift_getWitnessTable();
}

unint64_t sub_1D7890728()
{
  unint64_t result = qword_1EA842B88;
  if (!qword_1EA842B88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA842B88);
  }
  return result;
}

unint64_t sub_1D789077C()
{
  unint64_t result = qword_1EA842B90;
  if (!qword_1EA842B90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA842B90);
  }
  return result;
}

uint64_t sub_1D78907D0()
{
  return swift_release();
}

uint64_t sub_1D78907D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

Swift::Void __swiftcall PreferencesURLOpener.openFaceIDAndPasscodeSettings()()
{
}

id sub_1D7890878(uint64_t a1, unint64_t a2)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = sub_1D7A9B5F8();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6, v7, v8, v9, v10, v11, v12);
  uint64_t v14 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8477F0);
  MEMORY[0x1F4188790](v15 - 8, v16, v17, v18, v19, v20, v21, v22);
  unint64_t v24 = (char *)&v63 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_1D7A9AF68();
  uint64_t v26 = *(void *)(v25 - 8);
  MEMORY[0x1F4188790](v25, v27, v28, v29, v30, v31, v32, v33);
  unint64_t v35 = (char *)&v63 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7A9AF58();
  int v36 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25);
  unint64_t v64 = (char *)a1;
  if (v36 == 1)
  {
    uint64_t v37 = v5;
    sub_1D7891060((uint64_t)v24);
    id v68 = 0;
    unint64_t v69 = 0xE000000000000000;
    sub_1D7A9CC48();
    swift_bridgeObjectRelease();
    id v68 = (id)0xD00000000000001FLL;
    unint64_t v69 = 0x80000001D7ABEDA0;
    sub_1D7A9C128();
    uint64_t v38 = (uint64_t)v68;
    uint64_t v39 = v69;
    LOWORD(v68) = 104;
    unint64_t v40 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    unint64_t v41 = (void *)swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, v38, v39, (__int16 *)&v68, 0, v40, 0xD00000000000005DLL, 0x80000001D7ABEDC0, v42, 0x284C52556E65706FLL, 0xEB00000000293A5FLL, 44);
    swift_willThrow();
  }
  else
  {
    uint64_t v65 = v4;
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v35, v24, v25);
    id result = objc_msgSend(self, sel_defaultWorkspace);
    if (!result)
    {
      __break(1u);
      return result;
    }
    unint64_t v44 = result;
    unint64_t v45 = (void *)sub_1D7A9AF08();
    sub_1D785F2A0(MEMORY[0x1E4FBC860]);
    unint64_t v46 = (void *)sub_1D7A9BE98();
    swift_bridgeObjectRelease();
    id v68 = 0;
    unsigned int v47 = objc_msgSend(v44, sel_openSensitiveURL_withOptions_error_, v45, v46, &v68);

    if (v47)
    {
      uint64_t v48 = *(uint64_t (**)(char *, uint64_t))(v26 + 8);
      id v49 = v68;
      return (id)v48(v35, v25);
    }
    uint64_t v37 = v5;
    id v50 = v68;
    unint64_t v41 = (void *)sub_1D7A9AE58();

    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v35, v25);
    uint64_t v4 = v65;
  }
  uint64_t v51 = v37;
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v52 = __swift_project_value_buffer(v4, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v14, v52, v4);
  swift_bridgeObjectRetain();
  id v53 = v41;
  swift_bridgeObjectRetain();
  id v54 = v41;
  uint64_t v55 = sub_1D7A9B5D8();
  os_log_type_t v56 = sub_1D7A9C748();
  if (os_log_type_enabled(v55, v56))
  {
    uint64_t v57 = swift_slowAlloc();
    uint64_t v58 = swift_slowAlloc();
    uint64_t v65 = v4;
    uint64_t v59 = (void *)v58;
    uint64_t v60 = swift_slowAlloc();
    uint64_t v67 = v60;
    *(_DWORD *)uint64_t v57 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v66 = sub_1D7923300((uint64_t)v64, a2, &v67);
    unint64_t v64 = v14;
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v57 + 12) = 2112;
    id v61 = v41;
    uint64_t v62 = _swift_stdlib_bridgeErrorToNSError();
    uint64_t v66 = v62;
    sub_1D7A9C9E8();
    *uint64_t v59 = v62;

    _os_log_impl(&dword_1D7853000, v55, v56, "Could not open system URL %s. Error: %@", (uint8_t *)v57, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF8C60);
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v59, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v60, -1, -1);
    MEMORY[0x1D947D740](v57, -1, -1);

    return (id)(*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v64, v65);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    return (id)(*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v14, v4);
  }
}

Swift::Void __swiftcall PreferencesURLOpener.openStoragePreferences()()
{
}

Swift::Void __swiftcall PreferencesURLOpener.openWiFiPreferences()()
{
}

id sub_1D7890F7C()
{
  return sub_1D7890878(0xD000000000000010, 0x80000001D7ABED50);
}

id sub_1D7890FAC()
{
  return sub_1D7890878(0xD000000000000024, 0x80000001D7ABED70);
}

id sub_1D7890FDC()
{
  return sub_1D7890878(0x6F723A7366657270, 0xEF494649573D746FLL);
}

uint64_t dispatch thunk of PreferencesURLOpening.openFaceIDAndPasscodeSettings()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of PreferencesURLOpening.openStoragePreferences()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of PreferencesURLOpening.openWiFiPreferences()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

ValueMetadata *type metadata accessor for PreferencesURLOpener()
{
  return &type metadata for PreferencesURLOpener;
}

uint64_t sub_1D7891060(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8477F0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1D78910C0(uint64_t a1)
{
  return sub_1D7891138(a1, qword_1EA842BA0);
}

uint64_t sub_1D78910E8(uint64_t a1)
{
  return sub_1D7891138(a1, qword_1EA842BB8);
}

uint64_t sub_1D789110C(uint64_t a1)
{
  return sub_1D7891138(a1, qword_1EBDF8EE8);
}

uint64_t sub_1D7891138(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_1D7A9B5F8();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return sub_1D7A9B5E8();
}

uint64_t sub_1D78911B0()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA842BD0);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA842BD0);
  if (qword_1EA841328 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EA842BB8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "generateTransportKey.total";
  *(void *)(v1 + 8) = 26;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.presentmentGenerateTransportKey.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841338, (uint64_t)qword_1EA842BD0, a1);
}

uint64_t sub_1D78912C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DIPSignpost.Config(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D7891328()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA842BE8);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA842BE8);
  if (qword_1EA841328 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EA842BB8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "interpretRequest.total";
  *(void *)(v1 + 8) = 22;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.presentmentInterpretRequest.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841340, (uint64_t)qword_1EA842BE8, a1);
}

uint64_t sub_1D789143C()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA842C00);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA842C00);
  if (qword_1EA841328 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EA842BB8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "buildResponse.total";
  *(void *)(v1 + 8) = 19;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.presentmentBuildResponse.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841348, (uint64_t)qword_1EA842C00, a1);
}

uint64_t sub_1D7891550()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA842C18);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA842C18);
  if (qword_1EA841328 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EA842BB8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "buildErrorResponse.total";
  *(void *)(v1 + 8) = 24;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.presentmentBuildErrorResponse.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841350, (uint64_t)qword_1EA842C18, a1);
}

uint64_t sub_1D7891664()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA842C30);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA842C30);
  if (qword_1EA841328 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EA842BB8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "interpretRequest.decodeSessionEstablishment";
  *(void *)(v1 + 8) = 43;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.presentmentDecodeSessionEstablishment.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841358, (uint64_t)qword_1EA842C30, a1);
}

uint64_t sub_1D7891778()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA842C48);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA842C48);
  if (qword_1EA841328 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EA842BB8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "interpretRequest.deriveSessionKey";
  *(void *)(v1 + 8) = 33;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.presentmentDeriveSessionKey.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841360, (uint64_t)qword_1EA842C48, a1);
}

uint64_t sub_1D789188C()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA842C60);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA842C60);
  if (qword_1EA841328 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EA842BB8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "interpretRequest.decryptReaderRequest";
  *(void *)(v1 + 8) = 37;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.presentmentDecryptReaderRequest.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841368, (uint64_t)qword_1EA842C60, a1);
}

uint64_t sub_1D78919A0()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA842C78);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA842C78);
  if (qword_1EA841328 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EA842BB8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "interpretRequest.decodeReaderRequest";
  *(void *)(v1 + 8) = 36;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.presentmentDecodeReaderRequest.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841370, (uint64_t)qword_1EA842C78, a1);
}

uint64_t sub_1D7891AB4()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA842C90);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA842C90);
  if (qword_1EA841328 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EA842BB8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "interpretRequest.readerAuth";
  *(void *)(v1 + 8) = 27;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.presentmentReaderAuth.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841378, (uint64_t)qword_1EA842C90, a1);
}

uint64_t sub_1D7891BC8()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA842CA8);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA842CA8);
  if (qword_1EA841328 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EA842BB8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "interpretRequest.buildProposal";
  *(void *)(v1 + 8) = 30;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.presentmentBuildProposal.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841380, (uint64_t)qword_1EA842CA8, a1);
}

uint64_t sub_1D7891CDC()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA842CC0);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA842CC0);
  if (qword_1EA841328 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EA842BB8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "buildResponse.buildPayload";
  *(void *)(v1 + 8) = 26;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.presentmentBuildResponsePayload.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841388, (uint64_t)qword_1EA842CC0, a1);
}

uint64_t sub_1D7891DF0()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA842CD8);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA842CD8);
  if (qword_1EA841328 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EA842BB8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "buildResponse.issuerSigned";
  *(void *)(v1 + 8) = 26;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.presentmentBuildResponsePayloadIssuerSigned.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841390, (uint64_t)qword_1EA842CD8, a1);
}

uint64_t sub_1D7891F04()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA842CF0);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA842CF0);
  if (qword_1EA841328 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EA842BB8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "buildResponse.deviceSigned";
  *(void *)(v1 + 8) = 26;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.presentmentBuildResponsePayloadDeviceSigned.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841398, (uint64_t)qword_1EA842CF0, a1);
}

uint64_t sub_1D7892018()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA842D08);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA842D08);
  if (qword_1EA841328 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EA842BB8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "buildResponse.signDeviceDataLegacySE";
  *(void *)(v1 + 8) = 36;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.presentmentBuildResponseSignDeviceDataLegacySE.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA8413A0, (uint64_t)qword_1EA842D08, a1);
}

uint64_t sub_1D789212C()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA842D20);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA842D20);
  if (qword_1EA841328 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EA842BB8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "buildResponse.signDeviceDataSES";
  *(void *)(v1 + 8) = 31;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.presentmentBuildResponseSignDeviceDataSES.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA8413A8, (uint64_t)qword_1EA842D20, a1);
}

uint64_t sub_1D7892240()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA842D38);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA842D38);
  if (qword_1EA841328 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EA842BB8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "buildResponse.encryptResponse";
  *(void *)(v1 + 8) = 29;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.presentmentEncryptResponse.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA8413B0, (uint64_t)qword_1EA842D38, a1);
}

uint64_t sub_1D7892354()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA842D50);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA842D50);
  if (qword_1EA841328 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EA842BB8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "buildResponse.encryptResponseHPKE";
  *(void *)(v1 + 8) = 33;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.presentmentEncryptResponseHPKE.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA8413B8, (uint64_t)qword_1EA842D50, a1);
}

uint64_t sub_1D7892468()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA842D68);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA842D68);
  if (qword_1EBDF8F00 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDF8EE8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "database.fetchCredentialIdentifiers";
  *(void *)(v1 + 8) = 35;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.databaseFetchCredentialIdentifiers.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(qword_1EA8413C0, (uint64_t)qword_1EA842D68, a1);
}

uint64_t sub_1D789257C()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EBDF9018);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EBDF9018);
  if (qword_1EBDF8F00 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDF8EE8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "database.fetchCredentialIdentifiersByDocType";
  *(void *)(v1 + 8) = 44;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.databaseFetchCredentialIdentifiersByDocType.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EBDF9038, (uint64_t)qword_1EBDF9018, a1);
}

uint64_t sub_1D7892690()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA842D80);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA842D80);
  if (qword_1EBDF8F00 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDF8EE8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "database.fetchCredentialIdentifiersByDocTypeAndRegion";
  *(void *)(v1 + 8) = 53;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.databaseFetchCredentialIdentifiersByDocTypeAndRegion.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA8413D0, (uint64_t)qword_1EA842D80, a1);
}

uint64_t sub_1D78927A4()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA842D98);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA842D98);
  if (qword_1EBDF8F00 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDF8EE8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "database.fetchCredential";
  *(void *)(v1 + 8) = 24;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.databaseFetchCredential.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA8413D8, (uint64_t)qword_1EA842D98, a1);
}

uint64_t sub_1D78928B8()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EBDF8FF0);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EBDF8FF0);
  if (qword_1EBDF8F00 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDF8EE8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "database.fetchAllCredentials";
  *(void *)(v1 + 8) = 28;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.databaseFetchAllCredentials.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EBDF9010, (uint64_t)qword_1EBDF8FF0, a1);
}

uint64_t sub_1D78929CC()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EBDF8F08);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EBDF8F08);
  if (qword_1EBDF8F00 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDF8EE8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "database.fetchAuthACL";
  *(void *)(v1 + 8) = 21;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.databaseFetchAuthACL.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EBDF8F28, (uint64_t)qword_1EBDF8F08, a1);
}

uint64_t sub_1D7892AE0()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA842DB0);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA842DB0);
  if (qword_1EBDF8F00 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDF8EE8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "database.fetchAllAuthACLs";
  *(void *)(v1 + 8) = 25;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.databaseFetchAllAuthACLs.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA8413E0, (uint64_t)qword_1EA842DB0, a1);
}

uint64_t sub_1D7892BF4()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA842DC8);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA842DC8);
  if (qword_1EBDF8F00 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDF8EE8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "database.deleteAuthACL";
  *(void *)(v1 + 8) = 22;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.databaseDeleteAuthACL.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA8413E8, (uint64_t)qword_1EA842DC8, a1);
}

uint64_t sub_1D7892D08()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA842DE0);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA842DE0);
  if (qword_1EBDF8F00 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDF8EE8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "database.deleteAllAuthACLs";
  *(void *)(v1 + 8) = 26;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.databaseDeleteAllAuthACLs.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA8413F0, (uint64_t)qword_1EA842DE0, a1);
}

uint64_t sub_1D7892E1C()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA842DF8);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA842DF8);
  if (qword_1EBDF8F00 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDF8EE8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "database.fetchActiveCredentialsByDocType";
  *(void *)(v1 + 8) = 40;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.databaseFetchActiveCredentialsByDocType.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA8413F8, (uint64_t)qword_1EA842DF8, a1);
}

uint64_t sub_1D7892F30()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA842E10);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA842E10);
  if (qword_1EBDF8F00 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDF8EE8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "database.fetchActiveCredentialsByDocTypeAndRegion";
  *(void *)(v1 + 8) = 49;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.databaseFetchActiveCredentialsByDocTypeAndRegion.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841400, (uint64_t)qword_1EA842E10, a1);
}

uint64_t sub_1D7893044()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA842E28);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA842E28);
  if (qword_1EBDF8F00 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDF8EE8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "database.fetchCredentialIdentifiersForPublicKeyIdentifier";
  *(void *)(v1 + 8) = 57;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.databaseFetchCredentialIdentifiersForPublicKeyIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841408, (uint64_t)qword_1EA842E28, a1);
}

uint64_t sub_1D7893158()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EBDF82F0);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EBDF82F0);
  if (qword_1EBDF8F00 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDF8EE8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "database.fetchCredentialsInStates";
  *(void *)(v1 + 8) = 33;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.databaseFetchCredentialInStates.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EBDF8330, (uint64_t)qword_1EBDF82F0, a1);
}

uint64_t sub_1D789326C()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EBDF8308);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EBDF8308);
  if (qword_1EBDF8F00 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDF8EE8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "database.fetchAllInactivePresentmentKeys";
  *(void *)(v1 + 8) = 40;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.databaseFetchAllInactivePresentmentKeys.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EBDF8338, (uint64_t)qword_1EBDF8308, a1);
}

uint64_t sub_1D7893380()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EBDF8F30);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EBDF8F30);
  if (qword_1EBDF8F00 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDF8EE8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "database.fetchAllInactiveDeviceEncryptionKeys";
  *(void *)(v1 + 8) = 45;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.databaseFetchAllInactiveDeviceEncryptionKeys.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EBDF8F50, (uint64_t)qword_1EBDF8F30, a1);
}

uint64_t sub_1D7893494()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EBDF82D8);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EBDF82D8);
  if (qword_1EBDF8F00 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDF8EE8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "database.fetchAllSEKeySlots";
  *(void *)(v1 + 8) = 27;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.databaseFetchAllSEKeySlots.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EBDF8328, (uint64_t)qword_1EBDF82D8, a1);
}

uint64_t sub_1D78935A8()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA842E40);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA842E40);
  if (qword_1EBDF8F00 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDF8EE8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "database.fetchActiveDocTypes";
  *(void *)(v1 + 8) = 28;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.databaseFetchActiveDocTypes.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841410, (uint64_t)qword_1EA842E40, a1);
}

uint64_t sub_1D78936BC()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA842E58);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA842E58);
  if (qword_1EBDF8F00 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDF8EE8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "database.fetchActiveRegionsInPartitions";
  *(void *)(v1 + 8) = 39;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.databaseFetchActiveRegionsInPartitions.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841418, (uint64_t)qword_1EA842E58, a1);
}

uint64_t sub_1D78937D0()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA842E70);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA842E70);
  if (qword_1EA841320 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EA842BA0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "consistency.total";
  *(void *)(v1 + 8) = 17;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.consistencyCheckTotal.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841420, (uint64_t)qword_1EA842E70, a1);
}

uint64_t sub_1D78938E4()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA842E88);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA842E88);
  if (qword_1EA841320 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EA842BA0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "consistency.keySigningKeys";
  *(void *)(v1 + 8) = 26;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.consistencyCheckKeySigningKeys.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841428, (uint64_t)qword_1EA842E88, a1);
}

uint64_t sub_1D78939F8()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA842EA0);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA842EA0);
  if (qword_1EA841320 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EA842BA0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "consistency.deviceEncryptionKeys";
  *(void *)(v1 + 8) = 32;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.consistencyCheckDeviceEncryptionKeys.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841430, (uint64_t)qword_1EA842EA0, a1);
}

uint64_t sub_1D7893B0C()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA842EB8);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA842EB8);
  if (qword_1EA841320 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EA842BA0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "consistency.presentmentKeys";
  *(void *)(v1 + 8) = 27;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.consistencyCheckPresentmentKeys.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841438, (uint64_t)qword_1EA842EB8, a1);
}

uint64_t sub_1D7893C20()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA842ED0);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA842ED0);
  if (qword_1EA841320 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EA842BA0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "consistency.payloads";
  *(void *)(v1 + 8) = 20;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.consistencyCheckPayloads.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841440, (uint64_t)qword_1EA842ED0, a1);
}

uint64_t sub_1D7893D34()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA842EE8);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA842EE8);
  if (qword_1EBDF8F00 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDF8EE8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "database.fetchPrearmTrustKey";
  *(void *)(v1 + 8) = 28;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.databaseFetchPrearmTrustKey.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841448, (uint64_t)qword_1EA842EE8, a1);
}

uint64_t sub_1D7893E48()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA842F00);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA842F00);
  if (qword_1EBDF8F00 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDF8EE8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "database.fetchAllPrearmTrustKeys";
  *(void *)(v1 + 8) = 32;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.databaseFetchAllPrearmTrustKeys.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841450, (uint64_t)qword_1EA842F00, a1);
}

uint64_t sub_1D7893F5C()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA842F18);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA842F18);
  if (qword_1EBDF8F00 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDF8EE8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "database.deletePrearmTrustKey";
  *(void *)(v1 + 8) = 29;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.databaseDeletePrearmTrustKey.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841458, (uint64_t)qword_1EA842F18, a1);
}

uint64_t sub_1D7894070()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA842F30);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA842F30);
  if (qword_1EA841320 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EA842BA0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "storage.generatePresentmentKeys";
  *(void *)(v1 + 8) = 31;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.storageGeneratePresentmentKeys.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841460, (uint64_t)qword_1EA842F30, a1);
}

uint64_t sub_1D7894184()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA842F48);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA842F48);
  if (qword_1EA841320 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EA842BA0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "storage.generateSESPresentmentKey";
  *(void *)(v1 + 8) = 33;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.storageGenerateSESPresentmentKey.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841468, (uint64_t)qword_1EA842F48, a1);
}

uint64_t sub_1D7894298()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA842F60);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA842F60);
  if (qword_1EA841320 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EA842BA0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "storage.prepareProgenitorKeyMetadata";
  *(void *)(v1 + 8) = 36;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.storagePrepareProgenitorKeyMetadata.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841470, (uint64_t)qword_1EA842F60, a1);
}

uint64_t sub_1D78943AC()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA842F78);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA842F78);
  if (qword_1EA841320 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EA842BA0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "ckm.generateSESProgenitorKeyAttestation";
  *(void *)(v1 + 8) = 39;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.ckmGenerateSESProgenitorKeyAttestation.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841478, (uint64_t)qword_1EA842F78, a1);
}

uint64_t sub_1D78944C0()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA842F90);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA842F90);
  if (qword_1EA841320 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EA842BA0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "ckm.generateSESPresentmentKeyAttestation";
  *(void *)(v1 + 8) = 40;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.ckmGenerateSESPresentmentKeyAttestation.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841480, (uint64_t)qword_1EA842F90, a1);
}

uint64_t sub_1D78945D4()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA842FA8);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA842FA8);
  if (qword_1EA841320 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EA842BA0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "ckm.generateSESProgenitorKey";
  *(void *)(v1 + 8) = 28;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.ckmGenerateSESProgenitorKey.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841488, (uint64_t)qword_1EA842FA8, a1);
}

uint64_t sub_1D78946E8()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA842FC0);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA842FC0);
  if (qword_1EA841320 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EA842BA0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "ckm.generateSESPresentmentKey";
  *(void *)(v1 + 8) = 29;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.ckmGenerateSESPresentmentKey.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841490, (uint64_t)qword_1EA842FC0, a1);
}

uint64_t sub_1D78947FC()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA842FD8);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA842FD8);
  if (qword_1EA841320 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EA842BA0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "ckm.fetchSESProgenitorKey";
  *(void *)(v1 + 8) = 25;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.ckmFetchSESProgenitorKey.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841498, (uint64_t)qword_1EA842FD8, a1);
}

uint64_t sub_1D7894910()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA842FF0);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA842FF0);
  if (qword_1EA841320 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EA842BA0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "ckm.fetchSESPresentmentKey";
  *(void *)(v1 + 8) = 26;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.ckmFetchSESPresentmentKey.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(qword_1EA8414A0, (uint64_t)qword_1EA842FF0, a1);
}

uint64_t sub_1D7894A24@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for DIPSignpost.Config(0);
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  return sub_1D78912C4(v6, a3);
}

ValueMetadata *type metadata accessor for IDCSSignposts()
{
  return &type metadata for IDCSSignposts;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_1D7894AF8(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v26 = MEMORY[0x1E4FBC860];
    sub_1D78AB528(0, v1, 0);
    uint64_t v2 = v26;
    uint64_t v4 = (void **)(a1 + 32);
    do
    {
      uint64_t v5 = *v4;
      uint64_t ErrorValue = swift_getErrorValue();
      v23[1] = v23;
      uint64_t v7 = v24;
      uint64_t v8 = v25;
      uint64_t v9 = *(void *)(v24 - 8);
      MEMORY[0x1F4188790](ErrorValue, v23[2], v10, v11, v12, v13, v14, v15);
      uint64_t v17 = (char *)v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v9 + 16))(v17);
      id v18 = v5;
      uint64_t v19 = sub_1D78952A8(v7, v8);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v17, v7);

      uint64_t v26 = v2;
      unint64_t v21 = *(void *)(v2 + 16);
      unint64_t v20 = *(void *)(v2 + 24);
      if (v21 >= v20 >> 1)
      {
        sub_1D78AB528(v20 > 1, v21 + 1, 1);
        uint64_t v2 = v26;
      }
      *(void *)(v2 + 16) = v21 + 1;
      *(void *)(v2 + 8 * v21 + 32) = v19;
      ++v4;
      --v1;
    }
    while (v1);
  }
  return v2;
}

void DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(id a1@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, __int16 *a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  __int16 v17 = *a4;
  if (a1
    && (v31[4] = a1,
        id v19 = a1,
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF9740),
        (swift_dynamicCast() & 1) != 0))
  {
    unint64_t v20 = (void *)v31[1];
    unint64_t v21 = v31[2];
    id v28 = (id)v31[3];

    if ((a5 & 1) == 0) {
      __int16 v17 = v31[0];
    }
  }
  else
  {
    unint64_t v20 = (void *)MEMORY[0x1E4FBC860];
    unint64_t v21 = sub_1D785EC20(MEMORY[0x1E4FBC860]);
    id v22 = a1;

    id v28 = a1;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v31[0] = v21;
  sub_1D789EB68(a6, (uint64_t)sub_1D789EB58, 0, isUniquelyReferenced_nonNull_native, (uint64_t)v31);
  uint64_t v24 = v31[0];
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v20 = sub_1D789E1D4(0, v20[2] + 1, 1, v20);
  }
  unint64_t v26 = v20[2];
  unint64_t v25 = v20[3];
  if (v26 >= v25 >> 1) {
    unint64_t v20 = sub_1D789E1D4((void *)(v25 > 1), v26 + 1, 1, v20);
  }
  v20[2] = v26 + 1;
  uint64_t v27 = &v20[7 * v26];
  v27[4] = a2;
  v27[5] = a3;
  v27[6] = a7;
  v27[7] = a8;
  v27[8] = a10;
  v27[9] = a11;
  v27[10] = a12;

  *(_WORD *)a9 = v17;
  *(void *)(a9 + 8) = v20;
  *(void *)(a9 + 16) = v24;
  *(void *)(a9 + 24) = v28;
}

void DIPError.code.getter(_WORD *a1@<X8>)
{
  *a1 = *v1;
}

_WORD *DIPError.code.setter(_WORD *result)
{
  *int64_t v1 = *result;
  return result;
}

uint64_t (*DIPError.code.modify())()
{
  return nullsub_1;
}

uint64_t DIPError.properties.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DIPError.properties.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*DIPError.properties.modify())()
{
  return nullsub_1;
}

void *DIPError.underlyingError.getter()
{
  uint64_t v1 = *(void **)(v0 + 24);
  id v2 = v1;
  return v1;
}

void DIPError.underlyingError.setter(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
}

uint64_t (*DIPError.underlyingError.modify())()
{
  return nullsub_1;
}

uint64_t DIPError.isAuthorizationError.getter()
{
  return ((unsigned __int16)*v0 - 325 < 7) & (0x61u >> (*v0 - 69));
}

uint64_t sub_1D7894FD4(uint64_t a1)
{
  unint64_t v2 = sub_1D78A1294();
  return MEMORY[0x1F40E6E20](a1, v2);
}

uint64_t sub_1D7895010(uint64_t a1)
{
  unint64_t v2 = sub_1D78A1294();
  return MEMORY[0x1F40E6E10](a1, v2);
}

uint64_t static DIPError.errorDomain.getter()
{
  return 0x726F727245504944;
}

uint64_t DIPError.errorCode.getter()
{
  return qword_1D7AA32E8[*v0];
}

uint64_t DIPError.Code.rawValue.getter()
{
  return qword_1D7AA32E8[*v0];
}

unint64_t DIPError.errorUserInfo.getter()
{
  __int16 v1 = *v0;
  uint64_t v3 = *((void *)v0 + 1);
  uint64_t v2 = *((void *)v0 + 2);
  uint64_t v4 = (void *)*((void *)v0 + 3);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9400);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D7AA0A40;
  *(void *)(inited + 32) = sub_1D7A9BFC8();
  *(void *)(inited + 40) = v6;
  uint64_t v7 = DIPError.description.getter();
  uint64_t v8 = MEMORY[0x1E4FBB1A0];
  *(void *)(inited + 72) = MEMORY[0x1E4FBB1A0];
  *(void *)(inited + 48) = v7;
  *(void *)(inited + 56) = v9;
  *(void *)(inited + 80) = sub_1D7A9BFC8();
  *(void *)(inited + 88) = v10;
  LOWORD(v28) = v1;
  *((void *)&v28 + 1) = v3;
  uint64_t v29 = v2;
  uint64_t v30 = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v11 = v4;
  uint64_t v12 = sub_1D7A9C058();
  *(void *)(inited + 120) = v8;
  *(void *)(inited + 96) = v12;
  *(void *)(inited + 104) = v13;
  unint64_t v14 = sub_1D785F2A0(inited);
  unint64_t v31 = v14;
  uint64_t v15 = sub_1D7A9BFC8();
  uint64_t v17 = v15;
  uint64_t v18 = v16;
  if (v4)
  {
    swift_getErrorValue();
    id v19 = sub_1D78952A8(v26, v27);
    swift_getErrorValue();
    uint64_t v30 = v25;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v28);
    (*(void (**)(uint64_t *, uint64_t, void *))(*((void *)v25 - 1) + 16))(boxed_opaque_existential_0, v24, v25);

    sub_1D7860E50(&v28, v23);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v31 = 0x8000000000000000;
    sub_1D78A095C(v23, v17, v18, isUniquelyReferenced_nonNull_native);
    unint64_t v31 = v14;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1D789F14C(v15, v16, &v28);
    swift_bridgeObjectRelease();
    sub_1D7871C4C((uint64_t)&v28, (uint64_t *)&unk_1EBDF9680);
  }
  return v31;
}

id sub_1D78952A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8477F0);
  MEMORY[0x1F4188790](v3 - 8, v4, v5, v6, v7, v8, v9, v10);
  v182[0] = (char *)v182 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v196 = MEMORY[0x1E4FBC868];
  uint64_t v12 = sub_1D7A9BFC8();
  uint64_t v14 = v13;
  v182[1] = a2;
  uint64_t v15 = sub_1D7A9D578();
  if (!v15)
  {
    long long v191 = 0uLL;
    uint64_t v192 = 0;
    uint64_t v193 = 1;
LABEL_10:
    unint64_t v21 = &qword_1EA843058;
    id v22 = &v191;
LABEL_11:
    sub_1D7871C4C((uint64_t)v22, v21);
LABEL_12:
    sub_1D789F14C(v12, v14, &v194);
    swift_bridgeObjectRelease();
    sub_1D7871C4C((uint64_t)&v194, (uint64_t *)&unk_1EBDF9680);
    goto LABEL_13;
  }
  uint64_t v16 = (void *)v15;
  uint64_t v17 = sub_1D7A9BFC8();
  uint64_t v19 = v18;
  if (objc_msgSend(v16, sel_respondsToSelector_, sel___swift_objectForKeyedSubscript_))
  {
    *(void *)&long long v188 = v17;
    *((void *)&v188 + 1) = v19;
    swift_bridgeObjectRetain();
    id v20 = objc_msgSend(v16, byte_1E6A8706F, sub_1D7A9D4C8());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    if (v20)
    {
      sub_1D7A9CB08();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v186 = 0u;
      long long v187 = 0u;
    }
    sub_1D7871D78((uint64_t)&v186, (uint64_t)&v188, (uint64_t *)&unk_1EBDF9680);
  }
  else
  {
    swift_unknownObjectRelease();
    long long v188 = 0uLL;
    uint64_t v189 = 0;
    uint64_t v190 = 1;
  }
  sub_1D7871D78((uint64_t)&v188, (uint64_t)&v191, &qword_1EA843058);
  swift_bridgeObjectRelease();
  if (v193 == 1) {
    goto LABEL_10;
  }
  sub_1D7871D78((uint64_t)&v191, (uint64_t)&v194, (uint64_t *)&unk_1EBDF9680);
  if (!v195)
  {
    unint64_t v21 = (uint64_t *)&unk_1EBDF9680;
    id v22 = &v194;
    goto LABEL_11;
  }
  uint64_t v32 = MEMORY[0x1E4FBB1A0];
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_12;
  }
  uint64_t v195 = v32;
  long long v194 = v188;
  sub_1D7860E50(&v194, &v191);
  unint64_t v33 = v196;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&long long v188 = v33;
  unint64_t v196 = 0x8000000000000000;
  sub_1D78A095C(&v191, v12, v14, isUniquelyReferenced_nonNull_native);
  unint64_t v196 = v188;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_13:
  uint64_t v23 = sub_1D7A9BFC8();
  uint64_t v25 = v24;
  uint64_t v26 = sub_1D7A9D578();
  if (!v26)
  {
    long long v191 = 0uLL;
    uint64_t v192 = 0;
    uint64_t v193 = 1;
LABEL_25:
    unint64_t v35 = &qword_1EA843058;
    int v36 = &v191;
LABEL_26:
    sub_1D7871C4C((uint64_t)v36, v35);
LABEL_27:
    sub_1D789F14C(v23, v25, &v194);
    swift_bridgeObjectRelease();
    sub_1D7871C4C((uint64_t)&v194, (uint64_t *)&unk_1EBDF9680);
    goto LABEL_28;
  }
  uint64_t v27 = (void *)v26;
  uint64_t v28 = sub_1D7A9BFC8();
  uint64_t v30 = v29;
  if (objc_msgSend(v27, (SEL)&_OBJC_LABEL_PROTOCOL___NSCoding, sel___swift_objectForKeyedSubscript_))
  {
    *(void *)&long long v188 = v28;
    *((void *)&v188 + 1) = v30;
    swift_bridgeObjectRetain();
    id v31 = objc_msgSend(v27, byte_1E6A8706F, sub_1D7A9D4C8());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    if (v31)
    {
      sub_1D7A9CB08();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v186 = 0u;
      long long v187 = 0u;
    }
    sub_1D7871D78((uint64_t)&v186, (uint64_t)&v188, (uint64_t *)&unk_1EBDF9680);
  }
  else
  {
    swift_unknownObjectRelease();
    long long v188 = 0uLL;
    uint64_t v189 = 0;
    uint64_t v190 = 1;
  }
  sub_1D7871D78((uint64_t)&v188, (uint64_t)&v191, &qword_1EA843058);
  swift_bridgeObjectRelease();
  if (v193 == 1) {
    goto LABEL_25;
  }
  sub_1D7871D78((uint64_t)&v191, (uint64_t)&v194, (uint64_t *)&unk_1EBDF9680);
  if (!v195)
  {
    unint64_t v35 = (uint64_t *)&unk_1EBDF9680;
    int v36 = &v194;
    goto LABEL_26;
  }
  uint64_t v46 = MEMORY[0x1E4FBB1A0];
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_27;
  }
  uint64_t v195 = v46;
  long long v194 = v188;
  sub_1D7860E50(&v194, &v191);
  unint64_t v47 = v196;
  char v48 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&long long v188 = v47;
  unint64_t v196 = 0x8000000000000000;
  sub_1D78A095C(&v191, v23, v25, v48);
  unint64_t v196 = v188;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_28:
  uint64_t v37 = sub_1D7A9BFC8();
  uint64_t v39 = v38;
  uint64_t v40 = sub_1D7A9D578();
  if (!v40)
  {
    long long v191 = 0uLL;
    uint64_t v192 = 0;
    uint64_t v193 = 1;
LABEL_41:
    id v49 = &qword_1EA843058;
    id v50 = &v191;
LABEL_42:
    sub_1D7871C4C((uint64_t)v50, v49);
LABEL_43:
    sub_1D789F14C(v37, v39, &v194);
    swift_bridgeObjectRelease();
    sub_1D7871C4C((uint64_t)&v194, (uint64_t *)&unk_1EBDF9680);
    goto LABEL_44;
  }
  unint64_t v41 = (void *)v40;
  uint64_t v42 = sub_1D7A9BFC8();
  uint64_t v44 = v43;
  if (objc_msgSend(v41, (SEL)&_OBJC_LABEL_PROTOCOL___NSCoding, sel___swift_objectForKeyedSubscript_))
  {
    *(void *)&long long v188 = v42;
    *((void *)&v188 + 1) = v44;
    swift_bridgeObjectRetain();
    id v45 = objc_msgSend(v41, byte_1E6A8706F, sub_1D7A9D4C8());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    if (v45)
    {
      sub_1D7A9CB08();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v186 = 0u;
      long long v187 = 0u;
    }
    sub_1D7871D78((uint64_t)&v186, (uint64_t)&v188, (uint64_t *)&unk_1EBDF9680);
  }
  else
  {
    swift_unknownObjectRelease();
    long long v188 = 0uLL;
    uint64_t v189 = 0;
    uint64_t v190 = 1;
  }
  sub_1D7871D78((uint64_t)&v188, (uint64_t)&v191, &qword_1EA843058);
  swift_bridgeObjectRelease();
  if (v193 == 1) {
    goto LABEL_41;
  }
  sub_1D7871D78((uint64_t)&v191, (uint64_t)&v194, (uint64_t *)&unk_1EBDF9680);
  if (!v195)
  {
    id v49 = (uint64_t *)&unk_1EBDF9680;
    id v50 = &v194;
    goto LABEL_42;
  }
  uint64_t v60 = MEMORY[0x1E4FBB1A0];
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_43;
  }
  uint64_t v195 = v60;
  long long v194 = v188;
  sub_1D7860E50(&v194, &v191);
  unint64_t v61 = v196;
  char v62 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&long long v188 = v61;
  unint64_t v196 = 0x8000000000000000;
  sub_1D78A095C(&v191, v37, v39, v62);
  unint64_t v196 = v188;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_44:
  uint64_t v51 = sub_1D7A9BFC8();
  uint64_t v53 = v52;
  uint64_t v54 = sub_1D7A9D578();
  if (!v54)
  {
    long long v191 = 0uLL;
    uint64_t v192 = 0;
    uint64_t v193 = 1;
LABEL_57:
    uint64_t v63 = &qword_1EA843058;
    unint64_t v64 = &v191;
LABEL_58:
    sub_1D7871C4C((uint64_t)v64, v63);
LABEL_59:
    sub_1D789F14C(v51, v53, &v194);
    swift_bridgeObjectRelease();
    sub_1D7871C4C((uint64_t)&v194, (uint64_t *)&unk_1EBDF9680);
    goto LABEL_60;
  }
  uint64_t v55 = (void *)v54;
  uint64_t v56 = sub_1D7A9BFC8();
  uint64_t v58 = v57;
  if (objc_msgSend(v55, (SEL)&_OBJC_LABEL_PROTOCOL___NSCoding, sel___swift_objectForKeyedSubscript_))
  {
    *(void *)&long long v188 = v56;
    *((void *)&v188 + 1) = v58;
    swift_bridgeObjectRetain();
    id v59 = objc_msgSend(v55, byte_1E6A8706F, sub_1D7A9D4C8());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    if (v59)
    {
      sub_1D7A9CB08();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v186 = 0u;
      long long v187 = 0u;
    }
    sub_1D7871D78((uint64_t)&v186, (uint64_t)&v188, (uint64_t *)&unk_1EBDF9680);
  }
  else
  {
    swift_unknownObjectRelease();
    long long v188 = 0uLL;
    uint64_t v189 = 0;
    uint64_t v190 = 1;
  }
  sub_1D7871D78((uint64_t)&v188, (uint64_t)&v191, &qword_1EA843058);
  swift_bridgeObjectRelease();
  if (v193 == 1) {
    goto LABEL_57;
  }
  sub_1D7871D78((uint64_t)&v191, (uint64_t)&v194, (uint64_t *)&unk_1EBDF9680);
  if (!v195)
  {
    uint64_t v63 = (uint64_t *)&unk_1EBDF9680;
    unint64_t v64 = &v194;
    goto LABEL_58;
  }
  uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF7900);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_59;
  }
  uint64_t v195 = v74;
  *(void *)&long long v194 = v188;
  sub_1D7860E50(&v194, &v191);
  unint64_t v75 = v196;
  char v76 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&long long v188 = v75;
  unint64_t v196 = 0x8000000000000000;
  sub_1D78A095C(&v191, v51, v53, v76);
  unint64_t v196 = v188;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_60:
  uint64_t v65 = sub_1D7A9BFC8();
  uint64_t v67 = v66;
  uint64_t v68 = sub_1D7A9D578();
  if (!v68)
  {
    long long v191 = 0uLL;
    uint64_t v192 = 0;
    uint64_t v193 = 1;
LABEL_73:
    long long v77 = &qword_1EA843058;
    long long v78 = &v191;
LABEL_74:
    sub_1D7871C4C((uint64_t)v78, v77);
LABEL_75:
    sub_1D789F14C(v65, v67, &v194);
    swift_bridgeObjectRelease();
    sub_1D7871C4C((uint64_t)&v194, (uint64_t *)&unk_1EBDF9680);
    goto LABEL_76;
  }
  unint64_t v69 = (void *)v68;
  uint64_t v70 = sub_1D7A9BFC8();
  uint64_t v72 = v71;
  if (objc_msgSend(v69, (SEL)&_OBJC_LABEL_PROTOCOL___NSCoding, sel___swift_objectForKeyedSubscript_))
  {
    *(void *)&long long v188 = v70;
    *((void *)&v188 + 1) = v72;
    swift_bridgeObjectRetain();
    id v73 = objc_msgSend(v69, byte_1E6A8706F, sub_1D7A9D4C8());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    if (v73)
    {
      sub_1D7A9CB08();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v186 = 0u;
      long long v187 = 0u;
    }
    sub_1D7871D78((uint64_t)&v186, (uint64_t)&v188, (uint64_t *)&unk_1EBDF9680);
  }
  else
  {
    swift_unknownObjectRelease();
    long long v188 = 0uLL;
    uint64_t v189 = 0;
    uint64_t v190 = 1;
  }
  sub_1D7871D78((uint64_t)&v188, (uint64_t)&v191, &qword_1EA843058);
  swift_bridgeObjectRelease();
  if (v193 == 1) {
    goto LABEL_73;
  }
  sub_1D7871D78((uint64_t)&v191, (uint64_t)&v194, (uint64_t *)&unk_1EBDF9680);
  if (!v195)
  {
    long long v77 = (uint64_t *)&unk_1EBDF9680;
    long long v78 = &v194;
    goto LABEL_74;
  }
  uint64_t v88 = MEMORY[0x1E4FBB1A0];
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_75;
  }
  uint64_t v195 = v88;
  long long v194 = v188;
  sub_1D7860E50(&v194, &v191);
  unint64_t v89 = v196;
  char v90 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&long long v188 = v89;
  unint64_t v196 = 0x8000000000000000;
  sub_1D78A095C(&v191, v65, v67, v90);
  unint64_t v196 = v188;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_76:
  uint64_t v79 = sub_1D7A9BFC8();
  uint64_t v81 = v80;
  uint64_t v82 = sub_1D7A9D578();
  if (!v82)
  {
    long long v191 = 0uLL;
    uint64_t v192 = 0;
    uint64_t v193 = 1;
LABEL_89:
    unint64_t v91 = &qword_1EA843058;
    uint64_t v92 = &v191;
LABEL_90:
    sub_1D7871C4C((uint64_t)v92, v91);
LABEL_91:
    sub_1D789F14C(v79, v81, &v194);
    swift_bridgeObjectRelease();
    sub_1D7871C4C((uint64_t)&v194, (uint64_t *)&unk_1EBDF9680);
    goto LABEL_92;
  }
  long long v83 = (void *)v82;
  uint64_t v84 = sub_1D7A9BFC8();
  uint64_t v86 = v85;
  if (objc_msgSend(v83, (SEL)&_OBJC_LABEL_PROTOCOL___NSCoding, sel___swift_objectForKeyedSubscript_))
  {
    *(void *)&long long v188 = v84;
    *((void *)&v188 + 1) = v86;
    swift_bridgeObjectRetain();
    id v87 = objc_msgSend(v83, byte_1E6A8706F, sub_1D7A9D4C8());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    if (v87)
    {
      sub_1D7A9CB08();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v186 = 0u;
      long long v187 = 0u;
    }
    sub_1D7871D78((uint64_t)&v186, (uint64_t)&v188, (uint64_t *)&unk_1EBDF9680);
  }
  else
  {
    swift_unknownObjectRelease();
    long long v188 = 0uLL;
    uint64_t v189 = 0;
    uint64_t v190 = 1;
  }
  sub_1D7871D78((uint64_t)&v188, (uint64_t)&v191, &qword_1EA843058);
  swift_bridgeObjectRelease();
  if (v193 == 1) {
    goto LABEL_89;
  }
  sub_1D7871D78((uint64_t)&v191, (uint64_t)&v194, (uint64_t *)&unk_1EBDF9680);
  if (!v195)
  {
    unint64_t v91 = (uint64_t *)&unk_1EBDF9680;
    uint64_t v92 = &v194;
    goto LABEL_90;
  }
  uint64_t v102 = MEMORY[0x1E4FBB1A0];
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_91;
  }
  uint64_t v195 = v102;
  long long v194 = v188;
  sub_1D7860E50(&v194, &v191);
  unint64_t v103 = v196;
  char v104 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&long long v188 = v103;
  unint64_t v196 = 0x8000000000000000;
  sub_1D78A095C(&v191, v79, v81, v104);
  unint64_t v196 = v188;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_92:
  uint64_t v93 = sub_1D7A9BFC8();
  uint64_t v95 = v94;
  uint64_t v96 = sub_1D7A9D578();
  if (!v96)
  {
    long long v191 = 0uLL;
    uint64_t v192 = 0;
    uint64_t v193 = 1;
LABEL_105:
    uint64_t v105 = &qword_1EA843058;
    uint64_t v106 = &v191;
LABEL_106:
    sub_1D7871C4C((uint64_t)v106, v105);
LABEL_107:
    sub_1D789F14C(v93, v95, &v194);
    swift_bridgeObjectRelease();
    sub_1D7871C4C((uint64_t)&v194, (uint64_t *)&unk_1EBDF9680);
    goto LABEL_108;
  }
  unint64_t v97 = (void *)v96;
  uint64_t v98 = sub_1D7A9BFC8();
  uint64_t v100 = v99;
  if (objc_msgSend(v97, (SEL)&_OBJC_LABEL_PROTOCOL___NSCoding, sel___swift_objectForKeyedSubscript_))
  {
    *(void *)&long long v188 = v98;
    *((void *)&v188 + 1) = v100;
    swift_bridgeObjectRetain();
    id v101 = objc_msgSend(v97, byte_1E6A8706F, sub_1D7A9D4C8());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    if (v101)
    {
      sub_1D7A9CB08();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v186 = 0u;
      long long v187 = 0u;
    }
    sub_1D7871D78((uint64_t)&v186, (uint64_t)&v188, (uint64_t *)&unk_1EBDF9680);
  }
  else
  {
    swift_unknownObjectRelease();
    long long v188 = 0uLL;
    uint64_t v189 = 0;
    uint64_t v190 = 1;
  }
  sub_1D7871D78((uint64_t)&v188, (uint64_t)&v191, &qword_1EA843058);
  swift_bridgeObjectRelease();
  if (v193 == 1) {
    goto LABEL_105;
  }
  sub_1D7871D78((uint64_t)&v191, (uint64_t)&v194, (uint64_t *)&unk_1EBDF9680);
  if (!v195)
  {
    uint64_t v105 = (uint64_t *)&unk_1EBDF9680;
    uint64_t v106 = &v194;
    goto LABEL_106;
  }
  uint64_t v117 = MEMORY[0x1E4FBB550];
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_107;
  }
  uint64_t v195 = v117;
  *(void *)&long long v194 = v188;
  sub_1D7860E50(&v194, &v191);
  unint64_t v118 = v196;
  char v119 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&long long v188 = v118;
  unint64_t v196 = 0x8000000000000000;
  sub_1D78A095C(&v191, v93, v95, v119);
  unint64_t v196 = v188;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_108:
  uint64_t v107 = sub_1D7A9BFC8();
  uint64_t v109 = v108;
  uint64_t v110 = sub_1D7A9D578();
  if (!v110)
  {
    long long v191 = 0uLL;
    uint64_t v192 = 0;
    uint64_t v193 = 1;
    uint64_t v116 = v182[0];
LABEL_121:
    uint64_t v120 = &qword_1EA843058;
    uint64_t v121 = &v191;
LABEL_122:
    sub_1D7871C4C((uint64_t)v121, v120);
    uint64_t v122 = sub_1D7A9AF68();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v122 - 8) + 56))(v116, 1, 1, v122);
LABEL_123:
    sub_1D7871C4C(v116, &qword_1EA8477F0);
    sub_1D789F14C(v107, v109, &v194);
    swift_bridgeObjectRelease();
    sub_1D7871C4C((uint64_t)&v194, (uint64_t *)&unk_1EBDF9680);
    goto LABEL_124;
  }
  unint64_t v111 = (void *)v110;
  uint64_t v112 = sub_1D7A9BFC8();
  uint64_t v114 = v113;
  if (objc_msgSend(v111, (SEL)&_OBJC_LABEL_PROTOCOL___NSCoding, sel___swift_objectForKeyedSubscript_))
  {
    *(void *)&long long v188 = v112;
    *((void *)&v188 + 1) = v114;
    swift_bridgeObjectRetain();
    id v115 = objc_msgSend(v111, byte_1E6A8706F, sub_1D7A9D4C8());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    if (v115)
    {
      sub_1D7A9CB08();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v186 = 0u;
      long long v187 = 0u;
    }
    sub_1D7871D78((uint64_t)&v186, (uint64_t)&v188, (uint64_t *)&unk_1EBDF9680);
  }
  else
  {
    swift_unknownObjectRelease();
    long long v188 = 0uLL;
    uint64_t v189 = 0;
    uint64_t v190 = 1;
  }
  uint64_t v116 = v182[0];
  sub_1D7871D78((uint64_t)&v188, (uint64_t)&v191, &qword_1EA843058);
  swift_bridgeObjectRelease();
  if (v193 == 1) {
    goto LABEL_121;
  }
  sub_1D7871D78((uint64_t)&v191, (uint64_t)&v194, (uint64_t *)&unk_1EBDF9680);
  if (!v195)
  {
    uint64_t v120 = (uint64_t *)&unk_1EBDF9680;
    uint64_t v121 = &v194;
    goto LABEL_122;
  }
  uint64_t v132 = sub_1D7A9AF68();
  int v133 = swift_dynamicCast();
  uint64_t v134 = *(void *)(v132 - 8);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v134 + 56))(v116, v133 ^ 1u, 1, v132);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v134 + 48))(v116, 1, v132) == 1) {
    goto LABEL_123;
  }
  uint64_t v195 = v132;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v194);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v134 + 32))(boxed_opaque_existential_0, v116, v132);
  sub_1D7860E50(&v194, &v191);
  unint64_t v136 = v196;
  char v137 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&long long v188 = v136;
  unint64_t v196 = 0x8000000000000000;
  sub_1D78A095C(&v191, v107, v109, v137);
  unint64_t v196 = v188;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_124:
  uint64_t v123 = sub_1D7A9BFC8();
  uint64_t v125 = v124;
  uint64_t v126 = sub_1D7A9D578();
  if (!v126)
  {
    long long v191 = 0uLL;
    uint64_t v192 = 0;
    uint64_t v193 = 1;
LABEL_137:
    uint64_t v138 = &qword_1EA843058;
    uint64_t v139 = &v191;
LABEL_138:
    sub_1D7871C4C((uint64_t)v139, v138);
LABEL_139:
    sub_1D789F14C(v123, v125, &v194);
    swift_bridgeObjectRelease();
    sub_1D7871C4C((uint64_t)&v194, (uint64_t *)&unk_1EBDF9680);
    goto LABEL_140;
  }
  unint64_t v127 = (void *)v126;
  uint64_t v128 = sub_1D7A9BFC8();
  uint64_t v130 = v129;
  if (objc_msgSend(v127, (SEL)&_OBJC_LABEL_PROTOCOL___NSCoding, sel___swift_objectForKeyedSubscript_))
  {
    *(void *)&long long v188 = v128;
    *((void *)&v188 + 1) = v130;
    swift_bridgeObjectRetain();
    id v131 = objc_msgSend(v127, sel___swift_objectForKeyedSubscript_, sub_1D7A9D4C8());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    if (v131)
    {
      sub_1D7A9CB08();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v186 = 0u;
      long long v187 = 0u;
    }
    sub_1D7871D78((uint64_t)&v186, (uint64_t)&v188, (uint64_t *)&unk_1EBDF9680);
  }
  else
  {
    swift_unknownObjectRelease();
    long long v188 = 0uLL;
    uint64_t v189 = 0;
    uint64_t v190 = 1;
  }
  sub_1D7871D78((uint64_t)&v188, (uint64_t)&v191, &qword_1EA843058);
  swift_bridgeObjectRelease();
  if (v193 == 1) {
    goto LABEL_137;
  }
  sub_1D7871D78((uint64_t)&v191, (uint64_t)&v194, (uint64_t *)&unk_1EBDF9680);
  if (!v195)
  {
    uint64_t v138 = (uint64_t *)&unk_1EBDF9680;
    uint64_t v139 = &v194;
    goto LABEL_138;
  }
  uint64_t v149 = MEMORY[0x1E4FBB1A0];
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_139;
  }
  uint64_t v195 = v149;
  long long v194 = v188;
  sub_1D7860E50(&v194, &v191);
  unint64_t v150 = v196;
  char v151 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&long long v188 = v150;
  unint64_t v196 = 0x8000000000000000;
  sub_1D78A095C(&v191, v123, v125, v151);
  unint64_t v196 = v188;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_140:
  uint64_t v140 = sub_1D7A9BFC8();
  uint64_t v142 = v141;
  uint64_t v143 = sub_1D7A9D578();
  if (!v143)
  {
    long long v191 = 0uLL;
    uint64_t v192 = 0;
    uint64_t v193 = 1;
LABEL_153:
    uint64_t v152 = &qword_1EA843058;
    unint64_t v153 = &v191;
LABEL_154:
    sub_1D7871C4C((uint64_t)v153, v152);
LABEL_155:
    sub_1D789F14C(v140, v142, &v194);
    swift_bridgeObjectRelease();
    sub_1D7871C4C((uint64_t)&v194, (uint64_t *)&unk_1EBDF9680);
    goto LABEL_156;
  }
  unint64_t v144 = (void *)v143;
  uint64_t v145 = sub_1D7A9BFC8();
  uint64_t v147 = v146;
  if (objc_msgSend(v144, (SEL)&_OBJC_LABEL_PROTOCOL___NSCoding, sel___swift_objectForKeyedSubscript_))
  {
    *(void *)&long long v188 = v145;
    *((void *)&v188 + 1) = v147;
    swift_bridgeObjectRetain();
    id v148 = objc_msgSend(v144, sel___swift_objectForKeyedSubscript_, sub_1D7A9D4C8());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    if (v148)
    {
      sub_1D7A9CB08();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v186 = 0u;
      long long v187 = 0u;
    }
    sub_1D7871D78((uint64_t)&v186, (uint64_t)&v188, (uint64_t *)&unk_1EBDF9680);
  }
  else
  {
    swift_unknownObjectRelease();
    long long v188 = 0uLL;
    uint64_t v189 = 0;
    uint64_t v190 = 1;
  }
  sub_1D7871D78((uint64_t)&v188, (uint64_t)&v191, &qword_1EA843058);
  swift_bridgeObjectRelease();
  if (v193 == 1) {
    goto LABEL_153;
  }
  sub_1D7871D78((uint64_t)&v191, (uint64_t)&v194, (uint64_t *)&unk_1EBDF9680);
  if (!v195)
  {
    uint64_t v152 = (uint64_t *)&unk_1EBDF9680;
    unint64_t v153 = &v194;
    goto LABEL_154;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF9740);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_155;
  }
  unint64_t v163 = (void *)v188;
  swift_getErrorValue();
  uint64_t v164 = (void *)sub_1D78952A8(v184, v185);

  swift_getErrorValue();
  uint64_t v165 = v182[2];
  uint64_t v166 = v183;
  uint64_t v195 = v183;
  uint64_t v167 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v194);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v166 - 8) + 16))(v167, v165, v166);

  sub_1D7860E50(&v194, &v191);
  unint64_t v168 = v196;
  char v169 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&long long v188 = v168;
  unint64_t v196 = 0x8000000000000000;
  sub_1D78A095C(&v191, v140, v142, v169);
  unint64_t v196 = v188;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_156:
  uint64_t v154 = sub_1D7A9BFC8();
  uint64_t v156 = v155;
  uint64_t v157 = sub_1D7A9D578();
  if (!v157)
  {
    long long v191 = 0uLL;
    uint64_t v192 = 0;
    uint64_t v193 = 1;
LABEL_169:
    os_log_type_t v170 = &qword_1EA843058;
    BOOL v171 = &v191;
LABEL_170:
    sub_1D7871C4C((uint64_t)v171, v170);
    goto LABEL_171;
  }
  uint64_t v158 = (void *)v157;
  uint64_t v159 = sub_1D7A9BFC8();
  uint64_t v161 = v160;
  if (objc_msgSend(v158, (SEL)&_OBJC_LABEL_PROTOCOL___NSCoding, sel___swift_objectForKeyedSubscript_))
  {
    *(void *)&long long v188 = v159;
    *((void *)&v188 + 1) = v161;
    swift_bridgeObjectRetain();
    id v162 = objc_msgSend(v158, sel___swift_objectForKeyedSubscript_, sub_1D7A9D4C8());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    if (v162)
    {
      sub_1D7A9CB08();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v186 = 0u;
      long long v187 = 0u;
    }
    sub_1D7871D78((uint64_t)&v186, (uint64_t)&v188, (uint64_t *)&unk_1EBDF9680);
  }
  else
  {
    swift_unknownObjectRelease();
    long long v188 = 0uLL;
    uint64_t v189 = 0;
    uint64_t v190 = 1;
  }
  sub_1D7871D78((uint64_t)&v188, (uint64_t)&v191, &qword_1EA843058);
  swift_bridgeObjectRelease();
  if (v193 == 1) {
    goto LABEL_169;
  }
  sub_1D7871D78((uint64_t)&v191, (uint64_t)&v194, (uint64_t *)&unk_1EBDF9680);
  if (!v195)
  {
    os_log_type_t v170 = (uint64_t *)&unk_1EBDF9680;
    BOOL v171 = &v194;
    goto LABEL_170;
  }
  uint64_t v178 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA843060);
  if (swift_dynamicCast())
  {
    uint64_t v179 = sub_1D7894AF8(v188);
    swift_bridgeObjectRelease();
    uint64_t v195 = v178;
    *(void *)&long long v194 = v179;
    sub_1D7860E50(&v194, &v191);
    unint64_t v180 = v196;
    char v181 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v188 = v180;
    unint64_t v196 = 0x8000000000000000;
    sub_1D78A095C(&v191, v154, v156, v181);
    unint64_t v196 = v188;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_172;
  }
LABEL_171:
  sub_1D789F14C(v154, v156, &v194);
  swift_bridgeObjectRelease();
  sub_1D7871C4C((uint64_t)&v194, (uint64_t *)&unk_1EBDF9680);
LABEL_172:
  sub_1D7A9D568();
  uint64_t v172 = sub_1D7A9D558();
  id v173 = objc_allocWithZone(MEMORY[0x1E4F28C58]);
  uint64_t v174 = (void *)sub_1D7A9BF98();
  swift_bridgeObjectRelease();
  int64_t v175 = (void *)sub_1D7A9BE98();
  swift_bridgeObjectRelease();
  id v176 = objc_msgSend(v173, sel_initWithDomain_code_userInfo_, v174, v172, v175);

  return v176;
}

uint64_t sub_1D7896E04()
{
  return 0x726F727245504944;
}

uint64_t sub_1D7896E1C()
{
  return qword_1D7AA32E8[*v0];
}

CoreIDVShared::DIPError::Code_optional __swiftcall DIPError.Code.init(rawValue:)(Swift::Int rawValue)
{
  if (rawValue <= 39999)
  {
    if (rawValue <= -29)
    {
      switch(rawValue)
      {
        case -1407:
          *__int16 v1 = 114;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1406:
          *__int16 v1 = 113;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1405:
          *__int16 v1 = 112;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1404:
          *__int16 v1 = 111;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1403:
          *__int16 v1 = 110;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1402:
          *__int16 v1 = 109;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1401:
          *__int16 v1 = 108;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1315:
          *__int16 v1 = 127;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1314:
          *__int16 v1 = 126;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1311:
          *__int16 v1 = 125;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1310:
          *__int16 v1 = 124;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1309:
          *__int16 v1 = 123;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1308:
          *__int16 v1 = 122;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1307:
          *__int16 v1 = 121;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1306:
          *__int16 v1 = 120;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1305:
          *__int16 v1 = 119;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1304:
          *__int16 v1 = 118;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1303:
          *__int16 v1 = 117;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1302:
          *__int16 v1 = 116;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1301:
          *__int16 v1 = 115;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1204:
          *__int16 v1 = 107;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1203:
          *__int16 v1 = 106;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1202:
          *__int16 v1 = 105;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1201:
          *__int16 v1 = 104;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1112:
          *__int16 v1 = 103;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1111:
          *__int16 v1 = 102;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1109:
          *__int16 v1 = 101;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1108:
          *__int16 v1 = 100;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1107:
          *__int16 v1 = 99;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1106:
          *__int16 v1 = 98;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1105:
          *__int16 v1 = 97;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1104:
          *__int16 v1 = 96;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1103:
          *__int16 v1 = 95;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1102:
          *__int16 v1 = 94;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1101:
          *__int16 v1 = 93;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        default:
          goto LABEL_150;
      }
    }
    if (rawValue <= 19999)
    {
      __int16 v2 = 0;
      switch(rawValue)
      {
        case -28:
          *__int16 v1 = 22;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -22:
          *__int16 v1 = 21;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -21:
          *__int16 v1 = 20;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -20:
          *__int16 v1 = 19;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -19:
          *__int16 v1 = 18;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -18:
          *__int16 v1 = 17;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -17:
          *__int16 v1 = 16;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -16:
          *__int16 v1 = 15;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -15:
          *__int16 v1 = 14;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -14:
          *__int16 v1 = 13;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -13:
          *__int16 v1 = 12;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -12:
          *__int16 v1 = 11;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -11:
          *__int16 v1 = 10;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -10:
          *__int16 v1 = 9;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -9:
          *__int16 v1 = 8;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -8:
          *__int16 v1 = 7;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -7:
          *__int16 v1 = 6;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -6:
          *__int16 v1 = 5;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -5:
          *__int16 v1 = 4;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -4:
          *__int16 v1 = 3;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -3:
          *__int16 v1 = 2;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -2:
          __int16 v2 = 1;
          goto LABEL_93;
        case -1:
LABEL_93:
          *__int16 v1 = v2;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 200:
          *__int16 v1 = 23;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        default:
          goto LABEL_150;
      }
    }
    switch(rawValue)
    {
      case 20000:
        *__int16 v1 = 24;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case 20001:
        *__int16 v1 = 25;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case 20100:
        *__int16 v1 = 26;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
    }
  }
  else
  {
    if (rawValue <= 40599)
    {
      switch(rawValue)
      {
        case 40000:
          *__int16 v1 = 27;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40001:
        case 40002:
        case 40003:
        case 40004:
        case 40005:
        case 40006:
        case 40007:
        case 40008:
        case 40009:
        case 40016:
        case 40017:
        case 40018:
        case 40019:
        case 40031:
        case 40032:
        case 40033:
        case 40034:
        case 40035:
        case 40036:
        case 40037:
        case 40038:
        case 40039:
        case 40040:
        case 40041:
        case 40042:
        case 40043:
        case 40044:
        case 40045:
        case 40046:
        case 40047:
        case 40048:
        case 40049:
        case 40050:
        case 40051:
        case 40052:
        case 40053:
        case 40054:
        case 40055:
        case 40056:
        case 40057:
        case 40058:
        case 40059:
        case 40060:
        case 40061:
        case 40062:
        case 40063:
        case 40064:
        case 40065:
        case 40066:
        case 40067:
        case 40068:
        case 40069:
        case 40070:
        case 40071:
        case 40072:
        case 40073:
        case 40074:
        case 40075:
        case 40076:
        case 40077:
        case 40078:
        case 40079:
        case 40080:
        case 40081:
        case 40082:
        case 40083:
        case 40084:
        case 40085:
        case 40086:
        case 40087:
        case 40088:
        case 40089:
        case 40090:
        case 40091:
        case 40092:
        case 40093:
        case 40094:
        case 40095:
        case 40096:
        case 40097:
        case 40098:
        case 40099:
        case 40100:
        case 40103:
        case 40104:
        case 40105:
        case 40106:
        case 40107:
        case 40108:
        case 40109:
        case 40110:
        case 40111:
        case 40112:
        case 40113:
        case 40114:
        case 40115:
        case 40116:
        case 40117:
        case 40118:
        case 40119:
        case 40120:
        case 40121:
        case 40122:
        case 40123:
        case 40124:
        case 40125:
        case 40126:
        case 40127:
        case 40128:
        case 40129:
        case 40130:
        case 40131:
        case 40132:
        case 40133:
        case 40134:
        case 40135:
        case 40136:
        case 40137:
        case 40138:
        case 40139:
        case 40140:
        case 40141:
        case 40142:
        case 40143:
        case 40144:
        case 40145:
        case 40146:
        case 40147:
        case 40148:
        case 40149:
        case 40150:
        case 40151:
        case 40152:
        case 40153:
        case 40154:
        case 40155:
        case 40156:
        case 40157:
        case 40158:
        case 40159:
        case 40160:
        case 40161:
        case 40162:
        case 40163:
        case 40164:
        case 40165:
        case 40166:
        case 40167:
        case 40168:
        case 40169:
        case 40170:
        case 40171:
        case 40172:
        case 40173:
        case 40174:
        case 40175:
        case 40176:
        case 40177:
        case 40178:
        case 40179:
        case 40180:
        case 40181:
        case 40182:
        case 40183:
        case 40184:
        case 40185:
        case 40186:
        case 40187:
        case 40188:
        case 40189:
        case 40190:
        case 40191:
        case 40192:
        case 40193:
        case 40194:
        case 40195:
        case 40196:
        case 40197:
        case 40198:
        case 40199:
        case 40202:
        case 40203:
        case 40204:
          goto LABEL_150;
        case 40010:
          *__int16 v1 = 28;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40011:
          *__int16 v1 = 29;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40012:
          *__int16 v1 = 30;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40013:
          *__int16 v1 = 31;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40014:
          *__int16 v1 = 32;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40015:
          *__int16 v1 = 33;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40020:
          *__int16 v1 = 34;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40021:
          *__int16 v1 = 35;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40022:
          *__int16 v1 = 36;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40023:
          *__int16 v1 = 37;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40024:
          *__int16 v1 = 38;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40025:
          *__int16 v1 = 39;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40026:
          *__int16 v1 = 40;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40027:
          *__int16 v1 = 41;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40028:
          *__int16 v1 = 42;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40029:
          *__int16 v1 = 43;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40030:
          *__int16 v1 = 44;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40101:
          *__int16 v1 = 45;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40102:
          *__int16 v1 = 46;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40200:
          *__int16 v1 = 47;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40201:
          *__int16 v1 = 48;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40205:
          *__int16 v1 = 49;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        default:
          switch(rawValue)
          {
            case 40401:
              *__int16 v1 = 50;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case 40402:
              *__int16 v1 = 51;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case 40403:
              *__int16 v1 = 52;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case 40404:
              *__int16 v1 = 53;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case 40405:
            case 40406:
            case 40407:
              goto LABEL_150;
            case 40408:
              *__int16 v1 = 54;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            default:
              if (rawValue != 40500) {
                goto LABEL_150;
              }
              *__int16 v1 = 55;
              break;
          }
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
      }
    }
    if (rawValue <= 49999)
    {
      switch(rawValue)
      {
        case 40600:
          *__int16 v1 = 56;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40601:
          *__int16 v1 = 57;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40701:
          *__int16 v1 = 58;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40801:
          *__int16 v1 = 59;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40802:
          *__int16 v1 = 60;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40803:
          *__int16 v1 = 61;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40804:
          *__int16 v1 = 62;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40805:
          *__int16 v1 = 63;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40806:
          *__int16 v1 = 64;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40807:
          *__int16 v1 = 65;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40808:
          *__int16 v1 = 66;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40809:
          *__int16 v1 = 67;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40810:
          *__int16 v1 = 68;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40811:
          *__int16 v1 = 69;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40812:
          *__int16 v1 = 70;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40813:
          *__int16 v1 = 71;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40814:
          *__int16 v1 = 72;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40815:
          *__int16 v1 = 73;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40816:
          *__int16 v1 = 74;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40817:
          *__int16 v1 = 75;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40818:
          *__int16 v1 = 76;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40819:
          *__int16 v1 = 77;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40820:
          *__int16 v1 = 78;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40821:
          *__int16 v1 = 79;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40822:
          *__int16 v1 = 80;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40823:
          *__int16 v1 = 81;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40824:
          *__int16 v1 = 82;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40825:
          *__int16 v1 = 83;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40826:
          *__int16 v1 = 84;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40827:
          *__int16 v1 = 85;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40828:
          *__int16 v1 = 86;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        default:
          goto LABEL_150;
      }
    }
    if (rawValue > 99990)
    {
      switch(rawValue)
      {
        case 99991:
          *__int16 v1 = 90;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 99992:
          *__int16 v1 = 91;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 99993:
          *__int16 v1 = 92;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
      }
    }
    else
    {
      switch(rawValue)
      {
        case 50000:
          *__int16 v1 = 87;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 50001:
          *__int16 v1 = 88;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 50002:
          *__int16 v1 = 89;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
      }
    }
  }
LABEL_150:
  if (rawValue > -2121)
  {
    switch(rawValue)
    {
      case -2120:
        *__int16 v1 = 150;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -2119:
        *__int16 v1 = 149;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -2118:
        *__int16 v1 = 148;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -2117:
        *__int16 v1 = 147;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -2116:
        *__int16 v1 = 146;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -2115:
        *__int16 v1 = 145;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -2114:
        *__int16 v1 = 144;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -2113:
        *__int16 v1 = 143;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -2112:
        *__int16 v1 = 142;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -2111:
        *__int16 v1 = 141;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -2110:
        *__int16 v1 = 140;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -2109:
        *__int16 v1 = 139;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -2108:
        *__int16 v1 = 138;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -2107:
        *__int16 v1 = 137;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -2106:
        *__int16 v1 = 136;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -2105:
        *__int16 v1 = 135;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -2104:
        *__int16 v1 = 134;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -2103:
        *__int16 v1 = 133;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -2102:
        *__int16 v1 = 132;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -2101:
        *__int16 v1 = 131;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      default:
        if (rawValue == -1316)
        {
          *__int16 v1 = 128;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        }
        if (rawValue == -1317)
        {
          *__int16 v1 = 129;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        }
LABEL_160:
        if (rawValue <= -4121)
        {
          switch(rawValue)
          {
            case -5302:
              *__int16 v1 = 254;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5301:
              *__int16 v1 = 253;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5300:
            case -5299:
            case -5298:
            case -5297:
            case -5296:
            case -5295:
            case -5294:
            case -5293:
            case -5292:
            case -5291:
            case -5290:
            case -5289:
            case -5288:
            case -5287:
            case -5286:
            case -5285:
            case -5284:
            case -5283:
            case -5282:
            case -5281:
            case -5280:
            case -5279:
            case -5278:
            case -5277:
            case -5276:
            case -5275:
            case -5274:
            case -5273:
            case -5272:
            case -5271:
            case -5270:
            case -5269:
            case -5268:
            case -5267:
            case -5266:
            case -5265:
            case -5264:
            case -5263:
            case -5262:
            case -5261:
            case -5260:
            case -5259:
            case -5258:
            case -5257:
            case -5256:
            case -5255:
            case -5254:
            case -5253:
            case -5252:
            case -5251:
            case -5250:
            case -5249:
            case -5248:
            case -5247:
            case -5246:
            case -5245:
            case -5244:
            case -5243:
            case -5242:
            case -5241:
            case -5240:
            case -5239:
            case -5238:
            case -5237:
            case -5236:
            case -5235:
            case -5234:
            case -5233:
            case -5232:
            case -5231:
            case -5230:
            case -5229:
            case -5228:
            case -5227:
            case -5226:
            case -5225:
            case -5224:
            case -5223:
            case -5222:
            case -5221:
            case -5200:
            case -5199:
            case -5198:
            case -5197:
            case -5196:
            case -5195:
            case -5194:
            case -5193:
            case -5192:
            case -5191:
            case -5190:
            case -5189:
            case -5188:
            case -5187:
            case -5186:
            case -5185:
            case -5184:
            case -5183:
            case -5182:
            case -5181:
            case -5180:
            case -5179:
            case -5178:
            case -5177:
            case -5176:
            case -5175:
            case -5174:
            case -5173:
            case -5172:
            case -5171:
            case -5170:
            case -5169:
            case -5168:
            case -5167:
            case -5166:
            case -5165:
            case -5164:
            case -5163:
            case -5162:
            case -5161:
            case -5160:
            case -5159:
            case -5158:
            case -5157:
            case -5156:
            case -5155:
            case -5154:
            case -5153:
            case -5152:
            case -5151:
            case -5150:
            case -5149:
            case -5148:
            case -5147:
            case -5146:
            case -5145:
            case -5144:
            case -5143:
            case -5142:
            case -5141:
            case -5140:
            case -5139:
            case -5138:
            case -5137:
            case -5136:
            case -5135:
            case -5134:
            case -5133:
            case -5132:
            case -5131:
            case -5130:
            case -5129:
            case -5128:
            case -5127:
            case -5126:
            case -5125:
            case -5124:
            case -5123:
            case -5122:
            case -5121:
            case -5120:
            case -5119:
            case -5118:
            case -5117:
            case -5116:
            case -5115:
            case -5114:
            case -5113:
            case -5112:
            case -5111:
            case -5110:
            case -5109:
            case -5108:
              goto LABEL_288;
            case -5220:
              *__int16 v1 = 252;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5219:
              *__int16 v1 = 251;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5218:
              *__int16 v1 = 250;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5217:
              *__int16 v1 = 249;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5216:
              *__int16 v1 = 248;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5215:
              *__int16 v1 = 247;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5214:
              *__int16 v1 = 246;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5213:
              *__int16 v1 = 245;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5212:
              *__int16 v1 = 244;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5211:
              *__int16 v1 = 243;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5210:
              *__int16 v1 = 242;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5209:
              *__int16 v1 = 241;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5208:
              *__int16 v1 = 240;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5207:
              *__int16 v1 = 239;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5206:
              *__int16 v1 = 238;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5205:
              *__int16 v1 = 237;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5204:
              *__int16 v1 = 236;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5203:
              *__int16 v1 = 235;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5202:
              *__int16 v1 = 234;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5201:
              *__int16 v1 = 233;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5107:
              *__int16 v1 = 232;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5106:
              *__int16 v1 = 231;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5105:
              *__int16 v1 = 230;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5104:
              *__int16 v1 = 229;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5103:
              *__int16 v1 = 228;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5102:
              *__int16 v1 = 227;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5101:
              *__int16 v1 = 226;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            default:
              if (rawValue == -5401)
              {
                *__int16 v1 = 255;
                return (CoreIDVShared::DIPError::Code_optional)rawValue;
              }
LABEL_288:
              if (rawValue <= -6106)
              {
                switch(rawValue)
                {
                  case -7019:
                    *__int16 v1 = 319;
                    return (CoreIDVShared::DIPError::Code_optional)rawValue;
                  case -7018:
                    *__int16 v1 = 318;
                    return (CoreIDVShared::DIPError::Code_optional)rawValue;
                  case -7017:
                    *__int16 v1 = 317;
                    return (CoreIDVShared::DIPError::Code_optional)rawValue;
                  case -7016:
                    *__int16 v1 = 316;
                    return (CoreIDVShared::DIPError::Code_optional)rawValue;
                  case -7015:
                    *__int16 v1 = 315;
                    return (CoreIDVShared::DIPError::Code_optional)rawValue;
                  case -7014:
                    *__int16 v1 = 314;
                    return (CoreIDVShared::DIPError::Code_optional)rawValue;
                  case -7013:
                    *__int16 v1 = 313;
                    return (CoreIDVShared::DIPError::Code_optional)rawValue;
                  case -7012:
                    *__int16 v1 = 312;
                    return (CoreIDVShared::DIPError::Code_optional)rawValue;
                  case -7011:
                    *__int16 v1 = 311;
                    return (CoreIDVShared::DIPError::Code_optional)rawValue;
                  case -7010:
                    *__int16 v1 = 310;
                    return (CoreIDVShared::DIPError::Code_optional)rawValue;
                  case -7009:
                    *__int16 v1 = 309;
                    return (CoreIDVShared::DIPError::Code_optional)rawValue;
                  case -7008:
                    *__int16 v1 = 308;
                    return (CoreIDVShared::DIPError::Code_optional)rawValue;
                  case -7007:
                    *__int16 v1 = 307;
                    return (CoreIDVShared::DIPError::Code_optional)rawValue;
                  case -7006:
                    *__int16 v1 = 306;
                    return (CoreIDVShared::DIPError::Code_optional)rawValue;
                  case -7005:
                    *__int16 v1 = 305;
                    return (CoreIDVShared::DIPError::Code_optional)rawValue;
                  case -7004:
                    *__int16 v1 = 304;
                    return (CoreIDVShared::DIPError::Code_optional)rawValue;
                  case -7003:
                    *__int16 v1 = 303;
                    return (CoreIDVShared::DIPError::Code_optional)rawValue;
                  case -7002:
                    *__int16 v1 = 302;
                    return (CoreIDVShared::DIPError::Code_optional)rawValue;
                  case -7001:
                    *__int16 v1 = 301;
                    return (CoreIDVShared::DIPError::Code_optional)rawValue;
                  case -7000:
                    *__int16 v1 = 300;
                    return (CoreIDVShared::DIPError::Code_optional)rawValue;
                  default:
LABEL_297:
                    if (rawValue <= -9200)
                    {
                      if (rawValue <= -10003)
                      {
                        switch(rawValue)
                        {
                          case -11023:
                            *__int16 v1 = 383;
                            break;
                          case -11022:
                            *__int16 v1 = 382;
                            break;
                          case -11021:
                            *__int16 v1 = 381;
                            break;
                          case -11020:
                            *__int16 v1 = 380;
                            break;
                          case -11019:
                            *__int16 v1 = 379;
                            break;
                          case -11018:
                            *__int16 v1 = 378;
                            break;
                          case -11017:
                            *__int16 v1 = 377;
                            break;
                          case -11016:
                            *__int16 v1 = 376;
                            break;
                          case -11015:
                            *__int16 v1 = 375;
                            break;
                          case -11014:
                            *__int16 v1 = 374;
                            break;
                          case -11013:
                            *__int16 v1 = 373;
                            break;
                          case -11012:
                            *__int16 v1 = 372;
                            break;
                          case -11011:
                            *__int16 v1 = 371;
                            break;
                          case -11010:
                            *__int16 v1 = 370;
                            break;
                          case -11009:
                            *__int16 v1 = 369;
                            break;
                          case -11008:
                            *__int16 v1 = 368;
                            break;
                          case -11007:
                            *__int16 v1 = 367;
                            break;
                          case -11006:
                            *__int16 v1 = 366;
                            break;
                          case -11005:
                            *__int16 v1 = 365;
                            break;
                          case -11004:
                            *__int16 v1 = 364;
                            break;
                          case -11003:
                            *__int16 v1 = 363;
                            break;
                          case -11002:
                            *__int16 v1 = 362;
                            break;
                          case -11001:
                            *__int16 v1 = 361;
                            break;
                          default:
                            goto LABEL_435;
                        }
                        return (CoreIDVShared::DIPError::Code_optional)rawValue;
                      }
                      switch(rawValue)
                      {
                        case -10002:
                          *__int16 v1 = 360;
                          return (CoreIDVShared::DIPError::Code_optional)rawValue;
                        case -10001:
                          *__int16 v1 = 359;
                          return (CoreIDVShared::DIPError::Code_optional)rawValue;
                        case -10000:
                          *__int16 v1 = 358;
                          return (CoreIDVShared::DIPError::Code_optional)rawValue;
                      }
                    }
                    else
                    {
                      if (rawValue <= -8505)
                      {
                        switch(rawValue)
                        {
                          case -9199:
                            *__int16 v1 = 357;
                            break;
                          case -9104:
                            *__int16 v1 = 356;
                            break;
                          case -9103:
                            *__int16 v1 = 355;
                            break;
                          case -9102:
                            *__int16 v1 = 354;
                            break;
                          case -9101:
                            *__int16 v1 = 353;
                            break;
                          case -9100:
                            *__int16 v1 = 352;
                            break;
                          case -9014:
                            *__int16 v1 = 351;
                            break;
                          case -9013:
                            *__int16 v1 = 350;
                            break;
                          case -9012:
                            *__int16 v1 = 349;
                            break;
                          case -9011:
                            *__int16 v1 = 348;
                            break;
                          case -9010:
                            *__int16 v1 = 347;
                            break;
                          case -9009:
                            *__int16 v1 = 346;
                            break;
                          case -9008:
                            *__int16 v1 = 345;
                            break;
                          case -9007:
                            *__int16 v1 = 344;
                            break;
                          case -9006:
                            *__int16 v1 = 343;
                            break;
                          case -9005:
                            *__int16 v1 = 342;
                            break;
                          case -9004:
                            *__int16 v1 = 341;
                            break;
                          case -9003:
                            *__int16 v1 = 340;
                            break;
                          case -9002:
                            *__int16 v1 = 339;
                            break;
                          case -9001:
                            *__int16 v1 = 338;
                            break;
                          case -9000:
                            *__int16 v1 = 337;
                            break;
                          default:
                            goto LABEL_435;
                        }
                        return (CoreIDVShared::DIPError::Code_optional)rawValue;
                      }
                      if (rawValue <= -8305)
                      {
                        switch(rawValue)
                        {
                          case -8504:
                            *__int16 v1 = 336;
                            break;
                          case -8503:
                            *__int16 v1 = 335;
                            break;
                          case -8502:
                            *__int16 v1 = 334;
                            break;
                          case -8501:
                            *__int16 v1 = 333;
                            break;
                          case -8500:
                            *__int16 v1 = 332;
                            break;
                          case -8434:
                            *__int16 v1 = 331;
                            break;
                          case -8433:
                            *__int16 v1 = 330;
                            break;
                          case -8429:
                            *__int16 v1 = 329;
                            break;
                          case -8428:
                            *__int16 v1 = 328;
                            break;
                          case -8404:
                            *__int16 v1 = 327;
                            break;
                          case -8403:
                            *__int16 v1 = 326;
                            break;
                          case -8401:
                            *__int16 v1 = 325;
                            break;
                          case -8400:
                            *__int16 v1 = 324;
                            break;
                          default:
                            goto LABEL_435;
                        }
                        return (CoreIDVShared::DIPError::Code_optional)rawValue;
                      }
                      if (rawValue > -8002)
                      {
                        if (rawValue == -7020)
                        {
                          *__int16 v1 = 320;
                          return (CoreIDVShared::DIPError::Code_optional)rawValue;
                        }
                        if (rawValue == -8001)
                        {
                          *__int16 v1 = 321;
                          return (CoreIDVShared::DIPError::Code_optional)rawValue;
                        }
                      }
                      else
                      {
                        if (rawValue == -8304)
                        {
                          *__int16 v1 = 323;
                          return (CoreIDVShared::DIPError::Code_optional)rawValue;
                        }
                        if (rawValue == -8301)
                        {
                          *__int16 v1 = 322;
                          return (CoreIDVShared::DIPError::Code_optional)rawValue;
                        }
                      }
                    }
LABEL_435:
                    __int16 v2 = 384;
                    switch(rawValue)
                    {
                      case -11302:
                        *__int16 v1 = 447;
                        break;
                      case -11301:
                        *__int16 v1 = 446;
                        break;
                      case -11300:
                        *__int16 v1 = 445;
                        break;
                      case -11213:
                        *__int16 v1 = 444;
                        break;
                      case -11212:
                        *__int16 v1 = 443;
                        break;
                      case -11211:
                        *__int16 v1 = 442;
                        break;
                      case -11210:
                        *__int16 v1 = 441;
                        break;
                      case -11209:
                        *__int16 v1 = 440;
                        break;
                      case -11208:
                        *__int16 v1 = 439;
                        break;
                      case -11207:
                        *__int16 v1 = 438;
                        break;
                      case -11202:
                        *__int16 v1 = 437;
                        break;
                      case -11201:
                        *__int16 v1 = 436;
                        break;
                      case -11170:
                        *__int16 v1 = 435;
                        break;
                      case -11162:
                        *__int16 v1 = 434;
                        break;
                      case -11161:
                        *__int16 v1 = 433;
                        break;
                      case -11160:
                        *__int16 v1 = 432;
                        break;
                      case -11159:
                        *__int16 v1 = 431;
                        break;
                      case -11158:
                        *__int16 v1 = 430;
                        break;
                      case -11157:
                        *__int16 v1 = 429;
                        break;
                      case -11156:
                        *__int16 v1 = 428;
                        break;
                      case -11155:
                        *__int16 v1 = 427;
                        break;
                      case -11154:
                        *__int16 v1 = 426;
                        break;
                      case -11153:
                        *__int16 v1 = 425;
                        break;
                      case -11152:
                        *__int16 v1 = 424;
                        break;
                      case -11151:
                        *__int16 v1 = 423;
                        break;
                      case -11150:
                        *__int16 v1 = 422;
                        break;
                      case -11117:
                        *__int16 v1 = 421;
                        break;
                      case -11116:
                        *__int16 v1 = 420;
                        break;
                      case -11115:
                        *__int16 v1 = 419;
                        break;
                      case -11114:
                        *__int16 v1 = 418;
                        break;
                      case -11113:
                        *__int16 v1 = 417;
                        break;
                      case -11112:
                        *__int16 v1 = 416;
                        break;
                      case -11111:
                        *__int16 v1 = 415;
                        break;
                      case -11110:
                        *__int16 v1 = 414;
                        break;
                      case -11109:
                        *__int16 v1 = 413;
                        break;
                      case -11108:
                        *__int16 v1 = 412;
                        break;
                      case -11107:
                        *__int16 v1 = 411;
                        break;
                      case -11106:
                        *__int16 v1 = 410;
                        break;
                      case -11105:
                        *__int16 v1 = 409;
                        break;
                      case -11104:
                        *__int16 v1 = 408;
                        break;
                      case -11103:
                        *__int16 v1 = 407;
                        break;
                      case -11102:
                        *__int16 v1 = 406;
                        break;
                      case -11101:
                        *__int16 v1 = 405;
                        break;
                      case -11045:
                        *__int16 v1 = 404;
                        break;
                      case -11044:
                        *__int16 v1 = 403;
                        break;
                      case -11043:
                        *__int16 v1 = 402;
                        break;
                      case -11042:
                        *__int16 v1 = 401;
                        break;
                      case -11041:
                        *__int16 v1 = 400;
                        break;
                      case -11040:
                        *__int16 v1 = 399;
                        break;
                      case -11038:
                        *__int16 v1 = 398;
                        break;
                      case -11037:
                        *__int16 v1 = 397;
                        break;
                      case -11036:
                        *__int16 v1 = 396;
                        break;
                      case -11035:
                        *__int16 v1 = 395;
                        break;
                      case -11034:
                        *__int16 v1 = 394;
                        break;
                      case -11033:
                        *__int16 v1 = 393;
                        break;
                      case -11032:
                        *__int16 v1 = 392;
                        break;
                      case -11031:
                        *__int16 v1 = 391;
                        break;
                      case -11030:
                        *__int16 v1 = 390;
                        break;
                      case -11029:
                        *__int16 v1 = 389;
                        break;
                      case -11028:
                        *__int16 v1 = 388;
                        break;
                      case -11027:
                        *__int16 v1 = 387;
                        break;
                      case -11026:
                        *__int16 v1 = 386;
                        break;
                      case -11025:
                        *__int16 v1 = 385;
                        break;
                      case -11024:
                        goto LABEL_93;
                      default:
                        switch(rawValue)
                        {
                          case -12060:
                            *__int16 v1 = 511;
                            break;
                          case -12059:
                            *__int16 v1 = 510;
                            break;
                          case -12058:
                            *__int16 v1 = 509;
                            break;
                          case -12057:
                            *__int16 v1 = 508;
                            break;
                          case -12056:
                            *__int16 v1 = 507;
                            break;
                          case -12055:
                            *__int16 v1 = 506;
                            break;
                          case -12054:
                            *__int16 v1 = 505;
                            break;
                          case -12053:
                            *__int16 v1 = 504;
                            break;
                          case -12052:
                            *__int16 v1 = 503;
                            break;
                          case -12051:
                          case -12006:
                          case -12004:
LABEL_503:
                            __int16 v2 = 512;
                            switch(rawValue)
                            {
                              case -12127:
                                *__int16 v1 = 575;
                                break;
                              case -12126:
                                *__int16 v1 = 574;
                                break;
                              case -12125:
                                *__int16 v1 = 573;
                                break;
                              case -12124:
                                *__int16 v1 = 572;
                                break;
                              case -12123:
                                *__int16 v1 = 571;
                                break;
                              case -12122:
                                *__int16 v1 = 570;
                                break;
                              case -12121:
                                *__int16 v1 = 569;
                                break;
                              case -12120:
                                *__int16 v1 = 568;
                                break;
                              case -12119:
                                *__int16 v1 = 567;
                                break;
                              case -12118:
                                *__int16 v1 = 566;
                                break;
                              case -12117:
                                *__int16 v1 = 565;
                                break;
                              case -12116:
                                *__int16 v1 = 564;
                                break;
                              case -12113:
                                *__int16 v1 = 563;
                                break;
                              case -12112:
                                *__int16 v1 = 562;
                                break;
                              case -12111:
                                *__int16 v1 = 561;
                                break;
                              case -12110:
                                *__int16 v1 = 560;
                                break;
                              case -12109:
                                *__int16 v1 = 559;
                                break;
                              case -12108:
                                *__int16 v1 = 558;
                                break;
                              case -12107:
                                *__int16 v1 = 557;
                                break;
                              case -12106:
                                *__int16 v1 = 556;
                                break;
                              case -12105:
                                *__int16 v1 = 555;
                                break;
                              case -12104:
                                *__int16 v1 = 554;
                                break;
                              case -12103:
                                *__int16 v1 = 553;
                                break;
                              case -12102:
                                *__int16 v1 = 552;
                                break;
                              case -12101:
                                *__int16 v1 = 551;
                                break;
                              case -12100:
                                *__int16 v1 = 550;
                                break;
                              case -12099:
                                *__int16 v1 = 549;
                                break;
                              case -12098:
                                *__int16 v1 = 548;
                                break;
                              case -12097:
                                *__int16 v1 = 547;
                                break;
                              case -12096:
                                *__int16 v1 = 546;
                                break;
                              case -12095:
                                *__int16 v1 = 545;
                                break;
                              case -12094:
                                *__int16 v1 = 544;
                                break;
                              case -12093:
                                *__int16 v1 = 543;
                                break;
                              case -12092:
                                *__int16 v1 = 542;
                                break;
                              case -12091:
                                *__int16 v1 = 541;
                                break;
                              case -12090:
                                *__int16 v1 = 540;
                                break;
                              case -12089:
                                *__int16 v1 = 539;
                                break;
                              case -12088:
                                *__int16 v1 = 538;
                                break;
                              case -12087:
                                *__int16 v1 = 537;
                                break;
                              case -12086:
                                *__int16 v1 = 536;
                                break;
                              case -12085:
                                *__int16 v1 = 535;
                                break;
                              case -12084:
                                *__int16 v1 = 534;
                                break;
                              case -12083:
                                *__int16 v1 = 533;
                                break;
                              case -12082:
                                *__int16 v1 = 532;
                                break;
                              case -12081:
                                *__int16 v1 = 531;
                                break;
                              case -12080:
                                *__int16 v1 = 530;
                                break;
                              case -12079:
                                *__int16 v1 = 529;
                                break;
                              case -12078:
                                *__int16 v1 = 528;
                                break;
                              case -12077:
                                *__int16 v1 = 527;
                                break;
                              case -12076:
                                *__int16 v1 = 526;
                                break;
                              case -12075:
                                *__int16 v1 = 525;
                                break;
                              case -12074:
                                *__int16 v1 = 524;
                                break;
                              case -12073:
                                *__int16 v1 = 523;
                                break;
                              case -12072:
                                *__int16 v1 = 522;
                                break;
                              case -12071:
                                *__int16 v1 = 521;
                                break;
                              case -12070:
                                *__int16 v1 = 520;
                                break;
                              case -12069:
                                *__int16 v1 = 519;
                                break;
                              case -12068:
                                *__int16 v1 = 518;
                                break;
                              case -12067:
                                *__int16 v1 = 517;
                                break;
                              case -12066:
                                *__int16 v1 = 516;
                                break;
                              case -12065:
                                *__int16 v1 = 515;
                                break;
                              case -12064:
                                *__int16 v1 = 514;
                                break;
                              case -12062:
                                *__int16 v1 = 513;
                                break;
                              case -12061:
                                goto LABEL_93;
                              default:
                                __int16 v2 = 576;
                                switch(rawValue)
                                {
                                  case -12213:
                                    *__int16 v1 = 621;
                                    break;
                                  case -12212:
                                    *__int16 v1 = 620;
                                    break;
                                  case -12211:
                                    *__int16 v1 = 619;
                                    break;
                                  case -12210:
                                    *__int16 v1 = 618;
                                    break;
                                  case -12209:
                                    *__int16 v1 = 617;
                                    break;
                                  case -12208:
                                    *__int16 v1 = 616;
                                    break;
                                  case -12207:
                                    *__int16 v1 = 615;
                                    break;
                                  case -12206:
                                    *__int16 v1 = 614;
                                    break;
                                  case -12205:
                                    *__int16 v1 = 613;
                                    break;
                                  case -12204:
                                    *__int16 v1 = 612;
                                    break;
                                  case -12203:
                                    *__int16 v1 = 611;
                                    break;
                                  case -12202:
                                    *__int16 v1 = 610;
                                    break;
                                  case -12201:
                                    *__int16 v1 = 609;
                                    break;
                                  case -12200:
                                    *__int16 v1 = 608;
                                    break;
                                  case -12199:
                                  case -12198:
                                  case -12197:
                                  case -12196:
                                  case -12195:
                                  case -12194:
                                  case -12193:
                                  case -12192:
                                  case -12191:
                                  case -12190:
                                  case -12189:
                                  case -12188:
                                  case -12187:
                                  case -12186:
                                  case -12185:
                                  case -12184:
                                  case -12183:
                                  case -12182:
                                  case -12181:
                                  case -12180:
                                  case -12179:
                                  case -12178:
                                  case -12177:
                                  case -12176:
                                  case -12175:
                                  case -12174:
                                  case -12173:
                                  case -12172:
                                  case -12171:
                                  case -12170:
                                  case -12169:
                                  case -12168:
                                  case -12167:
                                  case -12166:
                                  case -12165:
                                  case -12164:
                                  case -12163:
                                  case -12162:
                                  case -12161:
                                  case -12160:
                                  case -12159:
                                  case -12134:
                                  case -12127:
                                  case -12126:
                                  case -12125:
                                  case -12124:
                                  case -12123:
                                  case -12122:
                                  case -12121:
                                  case -12120:
                                  case -12119:
                                  case -12118:
                                  case -12117:
                                  case -12116:
                                  case -12115:
                                  case -12114:
                                  case -12113:
                                  case -12112:
                                  case -12111:
                                  case -12110:
                                  case -12109:
                                  case -12108:
                                  case -12107:
                                  case -12106:
                                  case -12105:
                                  case -12104:
                                  case -12103:
                                  case -12102:
                                  case -12101:
                                  case -12100:
                                  case -12099:
                                  case -12098:
                                  case -12097:
                                  case -12096:
                                  case -12095:
                                  case -12094:
                                  case -12093:
                                  case -12092:
                                  case -12091:
                                  case -12090:
                                  case -12089:
                                  case -12088:
                                  case -12087:
                                  case -12086:
                                  case -12085:
                                  case -12084:
                                  case -12083:
                                  case -12082:
                                  case -12081:
                                  case -12080:
                                  case -12079:
                                  case -12078:
                                  case -12077:
                                  case -12076:
                                  case -12075:
                                  case -12074:
                                  case -12073:
                                  case -12072:
                                  case -12071:
                                  case -12070:
                                  case -12069:
                                  case -12068:
                                  case -12067:
                                  case -12066:
                                  case -12065:
                                  case -12064:
                                  case -12062:
                                  case -12061:
                                  case -12060:
                                  case -12059:
                                  case -12058:
                                  case -12057:
                                  case -12056:
                                  case -12055:
                                  case -12054:
                                  case -12053:
                                  case -12052:
LABEL_634:
                                    if (rawValue > -17005)
                                    {
                                      __int16 v2 = 640;
                                      switch(rawValue)
                                      {
                                        case -15033:
                                          *__int16 v1 = 657;
                                          break;
                                        case -15032:
                                          *__int16 v1 = 656;
                                          break;
                                        case -15031:
                                          *__int16 v1 = 655;
                                          break;
                                        case -15030:
                                          *__int16 v1 = 654;
                                          break;
                                        case -15029:
                                          *__int16 v1 = 653;
                                          break;
                                        case -15028:
                                          *__int16 v1 = 652;
                                          break;
                                        case -15027:
                                          *__int16 v1 = 651;
                                          break;
                                        case -15026:
                                          *__int16 v1 = 650;
                                          break;
                                        case -15025:
                                          *__int16 v1 = 649;
                                          break;
                                        case -15024:
                                          *__int16 v1 = 648;
                                          break;
                                        case -15023:
                                          *__int16 v1 = 647;
                                          break;
                                        case -15022:
                                          *__int16 v1 = 646;
                                          break;
                                        case -15021:
                                          *__int16 v1 = 645;
                                          break;
                                        case -15020:
                                          *__int16 v1 = 644;
                                          break;
                                        case -15019:
                                          *__int16 v1 = 643;
                                          break;
                                        case -15018:
                                          *__int16 v1 = 642;
                                          break;
                                        case -15017:
                                          *__int16 v1 = 641;
                                          break;
                                        case -15016:
                                          goto LABEL_93;
                                        default:
                                          switch(rawValue)
                                          {
                                            case -16006:
                                              *__int16 v1 = 664;
                                              break;
                                            case -16005:
                                              *__int16 v1 = 663;
                                              break;
                                            case -16004:
                                              *__int16 v1 = 662;
                                              break;
                                            case -16003:
                                              *__int16 v1 = 661;
                                              break;
                                            case -16002:
                                              *__int16 v1 = 660;
                                              break;
                                            case -16001:
                                              *__int16 v1 = 659;
                                              break;
                                            case -16000:
                                              *__int16 v1 = 658;
                                              break;
                                            default:
                                              switch(rawValue)
                                              {
                                                case -17004:
                                                  *__int16 v1 = 669;
                                                  break;
                                                case -17003:
                                                  *__int16 v1 = 668;
                                                  break;
                                                case -17002:
                                                  *__int16 v1 = 667;
                                                  break;
                                                case -17001:
                                                  *__int16 v1 = 666;
                                                  break;
                                                case -17000:
                                                  *__int16 v1 = 665;
                                                  break;
                                                default:
LABEL_717:
                                                  __int16 v2 = 704;
                                                  switch(rawValue)
                                                  {
                                                    case -18087:
                                                      *__int16 v1 = 756;
                                                      break;
                                                    case -18086:
                                                      *__int16 v1 = 755;
                                                      break;
                                                    case -18085:
                                                      *__int16 v1 = 754;
                                                      break;
                                                    case -18084:
                                                      *__int16 v1 = 753;
                                                      break;
                                                    case -18083:
                                                      *__int16 v1 = 752;
                                                      break;
                                                    case -18082:
                                                      *__int16 v1 = 751;
                                                      break;
                                                    case -18081:
                                                      *__int16 v1 = 750;
                                                      break;
                                                    case -18080:
                                                      *__int16 v1 = 749;
                                                      break;
                                                    case -18079:
                                                      *__int16 v1 = 748;
                                                      break;
                                                    case -18078:
                                                      *__int16 v1 = 747;
                                                      break;
                                                    case -18077:
                                                      *__int16 v1 = 746;
                                                      break;
                                                    case -18076:
                                                      *__int16 v1 = 745;
                                                      break;
                                                    case -18075:
                                                      *__int16 v1 = 744;
                                                      break;
                                                    case -18074:
                                                      *__int16 v1 = 743;
                                                      break;
                                                    case -18073:
                                                      *__int16 v1 = 742;
                                                      break;
                                                    case -18072:
                                                      *__int16 v1 = 741;
                                                      break;
                                                    case -18071:
                                                      *__int16 v1 = 740;
                                                      break;
                                                    case -18070:
                                                      *__int16 v1 = 739;
                                                      break;
                                                    case -18069:
                                                      *__int16 v1 = 738;
                                                      break;
                                                    case -18068:
                                                      *__int16 v1 = 737;
                                                      break;
                                                    case -18067:
                                                      *__int16 v1 = 736;
                                                      break;
                                                    case -18066:
                                                      *__int16 v1 = 735;
                                                      break;
                                                    case -18065:
                                                      *__int16 v1 = 734;
                                                      break;
                                                    case -18064:
LABEL_771:
                                                      if (rawValue <= -21009)
                                                      {
                                                        switch(rawValue)
                                                        {
                                                          case -25005:
                                                            *__int16 v1 = 805;
                                                            break;
                                                          case -25004:
                                                            *__int16 v1 = 804;
                                                            break;
                                                          case -25003:
                                                            *__int16 v1 = 803;
                                                            break;
                                                          case -25002:
                                                            *__int16 v1 = 802;
                                                            break;
                                                          case -25001:
                                                            *__int16 v1 = 801;
                                                            break;
                                                          case -25000:
                                                            *__int16 v1 = 800;
                                                            break;
                                                          default:
                                                            JUMPOUT(0);
                                                        }
                                                      }
                                                      else
                                                      {
                                                        __int16 v2 = 768;
                                                        switch(rawValue)
                                                        {
                                                          case -20022:
                                                            *__int16 v1 = 779;
                                                            break;
                                                          case -20021:
                                                            *__int16 v1 = 778;
                                                            break;
                                                          case -20020:
                                                            *__int16 v1 = 777;
                                                            break;
                                                          case -20019:
                                                            *__int16 v1 = 776;
                                                            break;
                                                          case -20018:
                                                            *__int16 v1 = 775;
                                                            break;
                                                          case -20017:
                                                            *__int16 v1 = 774;
                                                            break;
                                                          case -20016:
                                                            *__int16 v1 = 773;
                                                            break;
                                                          case -20015:
                                                            *__int16 v1 = 772;
                                                            break;
                                                          case -20014:
                                                            *__int16 v1 = 771;
                                                            break;
                                                          case -20013:
                                                            *__int16 v1 = 770;
                                                            break;
                                                          case -20012:
                                                            *__int16 v1 = 769;
                                                            break;
                                                          case -20011:
                                                            goto LABEL_93;
                                                          default:
                                                            __int16 v2 = 788;
                                                            switch(rawValue)
                                                            {
                                                              case -21008:
                                                                goto LABEL_93;
                                                              case -21007:
                                                                *__int16 v1 = 787;
                                                                break;
                                                              case -21006:
                                                                *__int16 v1 = 786;
                                                                break;
                                                              case -21005:
                                                                *__int16 v1 = 785;
                                                                break;
                                                              case -21004:
                                                                *__int16 v1 = 784;
                                                                break;
                                                              case -21003:
                                                                *__int16 v1 = 783;
                                                                break;
                                                              case -21002:
                                                                *__int16 v1 = 782;
                                                                break;
                                                              case -21001:
                                                                *__int16 v1 = 781;
                                                                break;
                                                              case -21000:
                                                                *__int16 v1 = 780;
                                                                break;
                                                              default:
                                                                *__int16 v1 = 806;
                                                                break;
                                                            }
                                                            break;
                                                        }
                                                      }
                                                      break;
                                                    case -18063:
                                                      *__int16 v1 = 733;
                                                      break;
                                                    case -18062:
                                                      *__int16 v1 = 732;
                                                      break;
                                                    case -18061:
                                                      *__int16 v1 = 731;
                                                      break;
                                                    case -18060:
                                                      *__int16 v1 = 730;
                                                      break;
                                                    case -18059:
                                                      *__int16 v1 = 729;
                                                      break;
                                                    case -18058:
                                                      *__int16 v1 = 728;
                                                      break;
                                                    case -18057:
                                                      *__int16 v1 = 727;
                                                      break;
                                                    case -18056:
                                                      *__int16 v1 = 726;
                                                      break;
                                                    case -18055:
                                                      *__int16 v1 = 725;
                                                      break;
                                                    case -18054:
                                                      *__int16 v1 = 724;
                                                      break;
                                                    case -18053:
                                                      *__int16 v1 = 723;
                                                      break;
                                                    case -18052:
                                                      *__int16 v1 = 722;
                                                      break;
                                                    case -18051:
                                                      *__int16 v1 = 721;
                                                      break;
                                                    case -18050:
                                                      *__int16 v1 = 720;
                                                      break;
                                                    case -18049:
                                                      *__int16 v1 = 719;
                                                      break;
                                                    case -18048:
                                                      *__int16 v1 = 718;
                                                      break;
                                                    case -18047:
                                                      *__int16 v1 = 717;
                                                      break;
                                                    case -18046:
                                                      *__int16 v1 = 716;
                                                      break;
                                                    case -18045:
                                                      *__int16 v1 = 715;
                                                      break;
                                                    case -18044:
                                                      *__int16 v1 = 714;
                                                      break;
                                                    case -18043:
                                                      *__int16 v1 = 713;
                                                      break;
                                                    case -18042:
                                                      *__int16 v1 = 712;
                                                      break;
                                                    case -18041:
                                                      *__int16 v1 = 711;
                                                      break;
                                                    case -18040:
                                                      *__int16 v1 = 710;
                                                      break;
                                                    case -18039:
                                                      *__int16 v1 = 709;
                                                      break;
                                                    case -18038:
                                                      *__int16 v1 = 708;
                                                      break;
                                                    case -18037:
                                                      *__int16 v1 = 707;
                                                      break;
                                                    case -18036:
                                                      *__int16 v1 = 706;
                                                      break;
                                                    case -18035:
                                                      *__int16 v1 = 705;
                                                      break;
                                                    case -18034:
                                                      goto LABEL_93;
                                                    default:
                                                      switch(rawValue)
                                                      {
                                                        case -20010:
                                                          *__int16 v1 = 767;
                                                          break;
                                                        case -20009:
                                                          *__int16 v1 = 766;
                                                          break;
                                                        case -20008:
                                                          *__int16 v1 = 765;
                                                          break;
                                                        case -20007:
                                                          *__int16 v1 = 764;
                                                          break;
                                                        case -20006:
                                                          *__int16 v1 = 763;
                                                          break;
                                                        case -20005:
                                                          *__int16 v1 = 762;
                                                          break;
                                                        case -20004:
                                                          *__int16 v1 = 761;
                                                          break;
                                                        case -20003:
                                                          *__int16 v1 = 760;
                                                          break;
                                                        case -20002:
                                                          *__int16 v1 = 759;
                                                          break;
                                                        case -20001:
                                                          *__int16 v1 = 758;
                                                          break;
                                                        case -20000:
                                                          *__int16 v1 = 757;
                                                          break;
                                                        default:
                                                          goto LABEL_771;
                                                      }
                                                      break;
                                                  }
                                                  break;
                                              }
                                              break;
                                          }
                                          break;
                                      }
                                    }
                                    else
                                    {
                                      switch(rawValue)
                                      {
                                        case -18033:
                                          *__int16 v1 = 703;
                                          break;
                                        case -18032:
                                          *__int16 v1 = 702;
                                          break;
                                        case -18031:
                                          *__int16 v1 = 701;
                                          break;
                                        case -18030:
                                          *__int16 v1 = 700;
                                          break;
                                        case -18029:
                                          *__int16 v1 = 699;
                                          break;
                                        case -18028:
                                          *__int16 v1 = 698;
                                          break;
                                        case -18027:
                                          *__int16 v1 = 697;
                                          break;
                                        case -18026:
                                          *__int16 v1 = 696;
                                          break;
                                        case -18025:
                                          *__int16 v1 = 695;
                                          break;
                                        case -18024:
                                          *__int16 v1 = 694;
                                          break;
                                        case -18023:
                                          *__int16 v1 = 693;
                                          break;
                                        case -18022:
                                          *__int16 v1 = 692;
                                          break;
                                        case -18021:
                                          *__int16 v1 = 691;
                                          break;
                                        case -18020:
                                          *__int16 v1 = 690;
                                          break;
                                        case -18019:
                                          *__int16 v1 = 689;
                                          break;
                                        case -18018:
                                          *__int16 v1 = 688;
                                          break;
                                        case -18017:
                                          *__int16 v1 = 687;
                                          break;
                                        case -18016:
                                          *__int16 v1 = 686;
                                          break;
                                        case -18015:
                                          *__int16 v1 = 685;
                                          break;
                                        case -18014:
                                          *__int16 v1 = 684;
                                          break;
                                        case -18013:
                                          *__int16 v1 = 683;
                                          break;
                                        case -18012:
                                          *__int16 v1 = 682;
                                          break;
                                        case -18011:
                                          *__int16 v1 = 681;
                                          break;
                                        case -18010:
                                          *__int16 v1 = 680;
                                          break;
                                        case -18009:
                                          *__int16 v1 = 679;
                                          break;
                                        case -18008:
                                          *__int16 v1 = 678;
                                          break;
                                        case -18007:
                                          *__int16 v1 = 677;
                                          break;
                                        case -18006:
                                          *__int16 v1 = 676;
                                          break;
                                        case -18005:
                                          *__int16 v1 = 675;
                                          break;
                                        case -18004:
                                          *__int16 v1 = 674;
                                          break;
                                        case -18003:
                                          *__int16 v1 = 673;
                                          break;
                                        case -18002:
                                          *__int16 v1 = 672;
                                          break;
                                        case -18001:
                                          *__int16 v1 = 671;
                                          break;
                                        case -18000:
                                          *__int16 v1 = 670;
                                          break;
                                        default:
                                          goto LABEL_717;
                                      }
                                    }
                                    break;
                                  case -12158:
                                    *__int16 v1 = 600;
                                    break;
                                  case -12157:
                                    *__int16 v1 = 605;
                                    break;
                                  case -12156:
                                    *__int16 v1 = 604;
                                    break;
                                  case -12155:
                                    *__int16 v1 = 599;
                                    break;
                                  case -12154:
                                    *__int16 v1 = 598;
                                    break;
                                  case -12153:
                                    *__int16 v1 = 597;
                                    break;
                                  case -12152:
                                    *__int16 v1 = 603;
                                    break;
                                  case -12151:
                                    *__int16 v1 = 602;
                                    break;
                                  case -12150:
                                    *__int16 v1 = 601;
                                    break;
                                  case -12149:
                                    *__int16 v1 = 596;
                                    break;
                                  case -12148:
                                    *__int16 v1 = 595;
                                    break;
                                  case -12147:
                                    *__int16 v1 = 594;
                                    break;
                                  case -12146:
                                    *__int16 v1 = 593;
                                    break;
                                  case -12145:
                                    *__int16 v1 = 592;
                                    break;
                                  case -12144:
                                    *__int16 v1 = 591;
                                    break;
                                  case -12143:
                                    *__int16 v1 = 590;
                                    break;
                                  case -12142:
                                    *__int16 v1 = 589;
                                    break;
                                  case -12141:
                                    *__int16 v1 = 588;
                                    break;
                                  case -12140:
                                    *__int16 v1 = 587;
                                    break;
                                  case -12139:
                                    *__int16 v1 = 586;
                                    break;
                                  case -12138:
                                    *__int16 v1 = 585;
                                    break;
                                  case -12137:
                                    *__int16 v1 = 584;
                                    break;
                                  case -12136:
                                    *__int16 v1 = 583;
                                    break;
                                  case -12135:
                                    *__int16 v1 = 582;
                                    break;
                                  case -12133:
                                    *__int16 v1 = 581;
                                    break;
                                  case -12132:
                                    *__int16 v1 = 580;
                                    break;
                                  case -12131:
                                    *__int16 v1 = 579;
                                    break;
                                  case -12130:
                                    *__int16 v1 = 578;
                                    break;
                                  case -12129:
                                    *__int16 v1 = 577;
                                    break;
                                  case -12128:
                                    goto LABEL_93;
                                  case -12063:
                                    *__int16 v1 = 607;
                                    break;
                                  case -12051:
                                    *__int16 v1 = 606;
                                    break;
                                  default:
                                    switch(rawValue)
                                    {
                                      case -15015:
                                        *__int16 v1 = 639;
                                        break;
                                      case -15014:
                                      case -15008:
                                        goto LABEL_634;
                                      case -15013:
                                        *__int16 v1 = 638;
                                        break;
                                      case -15012:
                                        *__int16 v1 = 637;
                                        break;
                                      case -15011:
                                        *__int16 v1 = 636;
                                        break;
                                      case -15010:
                                        *__int16 v1 = 635;
                                        break;
                                      case -15009:
                                        *__int16 v1 = 634;
                                        break;
                                      case -15007:
                                        *__int16 v1 = 633;
                                        break;
                                      case -15006:
                                        *__int16 v1 = 632;
                                        break;
                                      case -15005:
                                        *__int16 v1 = 631;
                                        break;
                                      case -15004:
                                        *__int16 v1 = 630;
                                        break;
                                      case -15003:
                                        *__int16 v1 = 629;
                                        break;
                                      case -15002:
                                        *__int16 v1 = 628;
                                        break;
                                      case -15001:
                                        *__int16 v1 = 627;
                                        break;
                                      case -15000:
                                        *__int16 v1 = 626;
                                        break;
                                      default:
                                        switch(rawValue)
                                        {
                                          case -14003:
                                            *__int16 v1 = 625;
                                            break;
                                          case -14002:
                                            *__int16 v1 = 624;
                                            break;
                                          case -14001:
                                            *__int16 v1 = 623;
                                            break;
                                          case -14000:
                                            *__int16 v1 = 622;
                                            break;
                                          default:
                                            goto LABEL_634;
                                        }
                                        break;
                                    }
                                    break;
                                }
                                break;
                            }
                            break;
                          case -12050:
                            *__int16 v1 = 502;
                            break;
                          case -12049:
                            *__int16 v1 = 501;
                            break;
                          case -12048:
                            *__int16 v1 = 500;
                            break;
                          case -12047:
                            *__int16 v1 = 499;
                            break;
                          case -12046:
                            *__int16 v1 = 498;
                            break;
                          case -12045:
                            *__int16 v1 = 497;
                            break;
                          case -12044:
                            *__int16 v1 = 496;
                            break;
                          case -12043:
                            *__int16 v1 = 495;
                            break;
                          case -12042:
                            *__int16 v1 = 494;
                            break;
                          case -12041:
                            *__int16 v1 = 493;
                            break;
                          case -12040:
                            *__int16 v1 = 492;
                            break;
                          case -12039:
                            *__int16 v1 = 491;
                            break;
                          case -12038:
                            *__int16 v1 = 490;
                            break;
                          case -12037:
                            *__int16 v1 = 489;
                            break;
                          case -12036:
                            *__int16 v1 = 488;
                            break;
                          case -12035:
                            *__int16 v1 = 487;
                            break;
                          case -12034:
                            *__int16 v1 = 486;
                            break;
                          case -12033:
                            *__int16 v1 = 485;
                            break;
                          case -12032:
                            *__int16 v1 = 484;
                            break;
                          case -12031:
                            *__int16 v1 = 483;
                            break;
                          case -12030:
                            *__int16 v1 = 482;
                            break;
                          case -12029:
                            *__int16 v1 = 481;
                            break;
                          case -12028:
                            *__int16 v1 = 480;
                            break;
                          case -12027:
                            *__int16 v1 = 479;
                            break;
                          case -12026:
                            *__int16 v1 = 478;
                            break;
                          case -12025:
                            *__int16 v1 = 477;
                            break;
                          case -12024:
                            *__int16 v1 = 476;
                            break;
                          case -12023:
                            *__int16 v1 = 475;
                            break;
                          case -12022:
                            *__int16 v1 = 474;
                            break;
                          case -12021:
                            *__int16 v1 = 473;
                            break;
                          case -12020:
                            *__int16 v1 = 472;
                            break;
                          case -12019:
                            *__int16 v1 = 471;
                            break;
                          case -12018:
                            *__int16 v1 = 470;
                            break;
                          case -12017:
                            *__int16 v1 = 469;
                            break;
                          case -12016:
                            *__int16 v1 = 468;
                            break;
                          case -12015:
                            *__int16 v1 = 467;
                            break;
                          case -12014:
                            *__int16 v1 = 466;
                            break;
                          case -12013:
                            *__int16 v1 = 465;
                            break;
                          case -12012:
                            *__int16 v1 = 464;
                            break;
                          case -12011:
                            *__int16 v1 = 463;
                            break;
                          case -12010:
                            *__int16 v1 = 462;
                            break;
                          case -12009:
                            *__int16 v1 = 461;
                            break;
                          case -12008:
                            *__int16 v1 = 460;
                            break;
                          case -12007:
                            *__int16 v1 = 459;
                            break;
                          case -12005:
                            *__int16 v1 = 458;
                            break;
                          case -12003:
                            *__int16 v1 = 457;
                            break;
                          case -12002:
                            *__int16 v1 = 456;
                            break;
                          case -12001:
                            *__int16 v1 = 455;
                            break;
                          case -12000:
                            *__int16 v1 = 454;
                            break;
                          default:
                            __int16 v2 = 448;
                            switch(rawValue)
                            {
                              case -11308:
                                *__int16 v1 = 453;
                                break;
                              case -11307:
                                *__int16 v1 = 452;
                                break;
                              case -11306:
                                *__int16 v1 = 451;
                                break;
                              case -11305:
                                *__int16 v1 = 450;
                                break;
                              case -11304:
                                *__int16 v1 = 449;
                                break;
                              case -11303:
                                goto LABEL_93;
                              default:
                                goto LABEL_503;
                            }
                            break;
                        }
                        break;
                    }
                    return (CoreIDVShared::DIPError::Code_optional)rawValue;
                }
              }
              switch(rawValue)
              {
                case -6105:
                  *__int16 v1 = 299;
                  break;
                case -6104:
                  *__int16 v1 = 298;
                  break;
                case -6103:
                  *__int16 v1 = 297;
                  break;
                case -6102:
                  *__int16 v1 = 296;
                  break;
                case -6101:
                  *__int16 v1 = 295;
                  break;
                case -6100:
                case -6099:
                case -6098:
                case -6097:
                case -6096:
                case -6095:
                case -6094:
                case -6093:
                case -6092:
                case -6091:
                case -6090:
                case -6089:
                case -6088:
                case -6087:
                case -6086:
                case -6085:
                case -6084:
                case -6083:
                case -6082:
                case -6081:
                case -6080:
                case -6079:
                case -6078:
                case -6077:
                case -6076:
                case -6075:
                case -6074:
                case -6073:
                case -6072:
                case -6071:
                case -6070:
                case -6069:
                case -6068:
                case -6067:
                case -6066:
                case -6065:
                case -6064:
                case -6063:
                case -6062:
                case -6061:
                case -6060:
                case -6059:
                case -6058:
                case -6057:
                case -6056:
                case -6055:
                case -6054:
                case -6053:
                case -6052:
                case -6051:
                case -6050:
                case -6049:
                case -6048:
                case -6047:
                case -6046:
                case -6045:
                case -6044:
                case -6043:
                case -6042:
                case -6041:
                case -6040:
                case -6039:
                case -6038:
                case -6037:
                case -6036:
                case -6035:
                case -6034:
                case -6033:
                case -6032:
                case -6031:
                case -6030:
                case -6029:
                case -6028:
                case -6027:
                case -6026:
                case -6025:
                case -6024:
                case -6023:
                case -6022:
                case -6021:
                case -6020:
                case -6019:
                case -6018:
                case -6017:
                case -6016:
                case -6015:
                case -6014:
                case -6013:
                case -6012:
                case -6011:
                case -6000:
                case -5999:
                case -5998:
                case -5997:
                case -5996:
                case -5995:
                case -5994:
                case -5993:
                case -5992:
                case -5991:
                case -5990:
                case -5989:
                case -5988:
                case -5987:
                case -5986:
                case -5985:
                case -5984:
                case -5983:
                case -5982:
                case -5981:
                case -5980:
                case -5979:
                case -5978:
                case -5977:
                case -5976:
                case -5975:
                case -5974:
                case -5973:
                case -5972:
                case -5971:
                case -5970:
                case -5969:
                case -5968:
                case -5967:
                case -5966:
                case -5965:
                case -5964:
                case -5963:
                case -5962:
                case -5961:
                case -5960:
                case -5959:
                case -5958:
                case -5957:
                case -5956:
                case -5955:
                case -5954:
                case -5953:
                case -5952:
                case -5951:
                case -5950:
                case -5949:
                case -5948:
                case -5947:
                case -5946:
                case -5945:
                case -5944:
                case -5943:
                case -5942:
                case -5941:
                case -5940:
                case -5939:
                case -5938:
                case -5937:
                case -5936:
                case -5935:
                case -5934:
                case -5933:
                case -5932:
                case -5931:
                case -5930:
                case -5929:
                case -5928:
                case -5927:
                case -5926:
                case -5925:
                case -5924:
                case -5923:
                case -5922:
                case -5921:
                case -5920:
                case -5919:
                case -5918:
                case -5917:
                case -5916:
                case -5915:
                case -5914:
                  goto LABEL_297;
                case -6010:
                  *__int16 v1 = 294;
                  break;
                case -6009:
                  *__int16 v1 = 293;
                  break;
                case -6008:
                  *__int16 v1 = 292;
                  break;
                case -6007:
                  *__int16 v1 = 291;
                  break;
                case -6006:
                  *__int16 v1 = 290;
                  break;
                case -6005:
                  *__int16 v1 = 289;
                  break;
                case -6004:
                  *__int16 v1 = 288;
                  break;
                case -6003:
                  *__int16 v1 = 287;
                  break;
                case -6002:
                  *__int16 v1 = 286;
                  break;
                case -6001:
                  *__int16 v1 = 285;
                  break;
                case -5913:
                  *__int16 v1 = 284;
                  break;
                case -5912:
                  *__int16 v1 = 283;
                  break;
                case -5911:
                  *__int16 v1 = 282;
                  break;
                case -5910:
                  *__int16 v1 = 281;
                  break;
                case -5909:
                  *__int16 v1 = 280;
                  break;
                case -5908:
                  *__int16 v1 = 279;
                  break;
                case -5907:
                  *__int16 v1 = 278;
                  break;
                case -5906:
                  *__int16 v1 = 277;
                  break;
                case -5905:
                  *__int16 v1 = 276;
                  break;
                case -5904:
                  *__int16 v1 = 275;
                  break;
                case -5903:
                  *__int16 v1 = 274;
                  break;
                case -5902:
                  *__int16 v1 = 273;
                  break;
                case -5901:
                  *__int16 v1 = 272;
                  break;
                default:
                  switch(rawValue)
                  {
                    case -5702:
                      *__int16 v1 = 271;
                      break;
                    case -5701:
                      *__int16 v1 = 270;
                      break;
                    case -5700:
                    case -5699:
                    case -5698:
                    case -5697:
                    case -5696:
                    case -5695:
                    case -5694:
                    case -5693:
                    case -5692:
                    case -5691:
                    case -5690:
                    case -5689:
                    case -5688:
                    case -5687:
                    case -5686:
                    case -5685:
                    case -5684:
                    case -5683:
                    case -5682:
                    case -5681:
                    case -5680:
                    case -5679:
                    case -5678:
                    case -5677:
                    case -5676:
                    case -5675:
                    case -5674:
                    case -5673:
                    case -5672:
                    case -5671:
                    case -5670:
                    case -5669:
                    case -5668:
                    case -5667:
                    case -5666:
                    case -5665:
                    case -5664:
                    case -5663:
                    case -5662:
                    case -5661:
                    case -5660:
                    case -5659:
                    case -5658:
                    case -5657:
                    case -5656:
                    case -5655:
                    case -5654:
                    case -5653:
                    case -5652:
                    case -5651:
                    case -5650:
                    case -5649:
                    case -5648:
                    case -5647:
                    case -5646:
                    case -5645:
                    case -5644:
                    case -5643:
                    case -5642:
                    case -5641:
                    case -5640:
                    case -5639:
                    case -5638:
                    case -5637:
                    case -5636:
                    case -5635:
                    case -5634:
                    case -5633:
                    case -5632:
                    case -5631:
                    case -5630:
                    case -5629:
                    case -5628:
                    case -5627:
                    case -5626:
                    case -5625:
                    case -5624:
                    case -5623:
                    case -5622:
                    case -5621:
                    case -5620:
                    case -5619:
                    case -5618:
                    case -5617:
                    case -5616:
                    case -5615:
                    case -5614:
                    case -5613:
                    case -5612:
                    case -5611:
                    case -5610:
                      goto LABEL_297;
                    case -5609:
                      *__int16 v1 = 269;
                      break;
                    case -5608:
                      *__int16 v1 = 268;
                      break;
                    case -5607:
                      *__int16 v1 = 267;
                      break;
                    case -5606:
                      *__int16 v1 = 266;
                      break;
                    case -5605:
                      *__int16 v1 = 265;
                      break;
                    case -5604:
                      *__int16 v1 = 264;
                      break;
                    case -5603:
                      *__int16 v1 = 263;
                      break;
                    case -5602:
                      *__int16 v1 = 262;
                      break;
                    case -5601:
                      *__int16 v1 = 261;
                      break;
                    default:
                      __int16 v2 = 256;
                      switch(rawValue)
                      {
                        case -5505:
                          *__int16 v1 = 260;
                          break;
                        case -5504:
                          *__int16 v1 = 259;
                          break;
                        case -5503:
                          *__int16 v1 = 258;
                          break;
                        case -5502:
                          *__int16 v1 = 257;
                          break;
                        case -5501:
                          goto LABEL_93;
                        default:
                          goto LABEL_297;
                      }
                      break;
                  }
                  break;
              }
              break;
          }
        }
        else
        {
          switch(rawValue)
          {
            case -4120:
              *__int16 v1 = 225;
              break;
            case -4119:
              *__int16 v1 = 224;
              break;
            case -4118:
              *__int16 v1 = 223;
              break;
            case -4117:
              *__int16 v1 = 222;
              break;
            case -4116:
              *__int16 v1 = 221;
              break;
            case -4115:
              *__int16 v1 = 220;
              break;
            case -4114:
              *__int16 v1 = 219;
              break;
            case -4113:
              *__int16 v1 = 218;
              break;
            case -4112:
              *__int16 v1 = 217;
              break;
            case -4111:
              *__int16 v1 = 216;
              break;
            case -4110:
              *__int16 v1 = 215;
              break;
            case -4109:
              *__int16 v1 = 214;
              break;
            case -4108:
              *__int16 v1 = 213;
              break;
            case -4107:
              *__int16 v1 = 212;
              break;
            case -4106:
              *__int16 v1 = 211;
              break;
            case -4105:
              *__int16 v1 = 210;
              break;
            case -4104:
              *__int16 v1 = 209;
              break;
            case -4103:
              *__int16 v1 = 208;
              break;
            case -4102:
              *__int16 v1 = 207;
              break;
            case -4101:
              *__int16 v1 = 206;
              break;
            default:
              __int16 v2 = 192;
              switch(rawValue)
              {
                case -3222:
                  *__int16 v1 = 205;
                  break;
                case -3221:
                  *__int16 v1 = 204;
                  break;
                case -3220:
                  *__int16 v1 = 203;
                  break;
                case -3219:
                  *__int16 v1 = 202;
                  break;
                case -3218:
                  *__int16 v1 = 201;
                  break;
                case -3217:
                  *__int16 v1 = 200;
                  break;
                case -3216:
                  *__int16 v1 = 199;
                  break;
                case -3215:
                  *__int16 v1 = 198;
                  break;
                case -3214:
                  *__int16 v1 = 197;
                  break;
                case -3213:
                  *__int16 v1 = 196;
                  break;
                case -3212:
                  *__int16 v1 = 195;
                  break;
                case -3211:
                  *__int16 v1 = 194;
                  break;
                case -3210:
                  *__int16 v1 = 193;
                  break;
                case -3203:
                  goto LABEL_93;
                default:
                  goto LABEL_288;
              }
              break;
          }
        }
        break;
    }
  }
  else
  {
    switch(rawValue)
    {
      case -3202:
        *__int16 v1 = 191;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3201:
        *__int16 v1 = 190;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3200:
        *__int16 v1 = 189;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3199:
      case -3198:
      case -3197:
      case -3196:
      case -3195:
      case -3194:
      case -3193:
      case -3192:
      case -3191:
      case -3190:
      case -3189:
      case -3188:
      case -3187:
      case -3186:
      case -3185:
      case -3184:
      case -3183:
      case -3182:
      case -3181:
      case -3180:
      case -3179:
      case -3170:
      case -3169:
      case -3168:
      case -3160:
      case -3150:
      case -3149:
      case -3148:
      case -3147:
      case -3146:
      case -3145:
      case -3144:
      case -3143:
      case -3142:
      case -3141:
      case -3140:
      case -3139:
      case -3138:
      case -3137:
      case -3136:
      case -3135:
      case -3134:
      case -3133:
      case -3132:
      case -3131:
      case -3130:
      case -3129:
      case -3128:
      case -3127:
      case -3126:
      case -3125:
      case -3124:
      case -3123:
      case -3122:
      case -3121:
      case -3120:
      case -3119:
      case -3118:
      case -3117:
      case -3116:
      case -3115:
        goto LABEL_160;
      case -3178:
        *__int16 v1 = 188;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3177:
        *__int16 v1 = 187;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3176:
        *__int16 v1 = 186;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3175:
        *__int16 v1 = 185;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3174:
        *__int16 v1 = 184;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3173:
        *__int16 v1 = 183;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3172:
        *__int16 v1 = 182;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3171:
        *__int16 v1 = 181;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3167:
        *__int16 v1 = 180;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3166:
        *__int16 v1 = 179;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3165:
        *__int16 v1 = 178;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3164:
        *__int16 v1 = 177;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3163:
        *__int16 v1 = 176;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3162:
        *__int16 v1 = 175;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3161:
        *__int16 v1 = 174;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3159:
        *__int16 v1 = 173;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3158:
        *__int16 v1 = 172;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3157:
        *__int16 v1 = 171;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3156:
        *__int16 v1 = 170;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3155:
        *__int16 v1 = 169;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3154:
        *__int16 v1 = 168;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3153:
        *__int16 v1 = 167;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3152:
        *__int16 v1 = 166;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3151:
        *__int16 v1 = 165;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3114:
        *__int16 v1 = 164;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3113:
        *__int16 v1 = 163;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3112:
        *__int16 v1 = 162;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3111:
        *__int16 v1 = 161;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3110:
        *__int16 v1 = 160;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3109:
        *__int16 v1 = 159;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3108:
        *__int16 v1 = 158;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3107:
        *__int16 v1 = 157;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3106:
        *__int16 v1 = 156;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3105:
        *__int16 v1 = 155;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3104:
        *__int16 v1 = 154;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3103:
        *__int16 v1 = 153;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3102:
        *__int16 v1 = 152;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3101:
        *__int16 v1 = 151;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      default:
        if (rawValue != -131600) {
          goto LABEL_160;
        }
        *__int16 v1 = 130;
        break;
    }
  }
  return (CoreIDVShared::DIPError::Code_optional)rawValue;
}

BOOL sub_1D789C724(__int16 *a1, __int16 *a2)
{
  return qword_1D7AA32E8[*a1] == qword_1D7AA32E8[*a2];
}

uint64_t sub_1D789C748()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D789C798()
{
  return sub_1D7A9D5E8();
}

uint64_t sub_1D789C7D0()
{
  return sub_1D7A9D628();
}

CoreIDVShared::DIPError::Code_optional sub_1D789C81C(Swift::Int *a1)
{
  return DIPError.Code.init(rawValue:)(*a1);
}

void sub_1D789C824(void *a1@<X8>)
{
  *a1 = qword_1D7AA32E8[*v1];
}

CoreIDVShared::DIPError::PropertyKey_optional __swiftcall DIPError.PropertyKey.init(rawValue:)(Swift::String rawValue)
{
  __int16 v2 = v1;
  uint64_t v3 = sub_1D7A9D478();
  result.SecCertificateRef value = swift_bridgeObjectRelease();
  char v5 = 0;
  char v6 = 10;
  switch(v3)
  {
    case 0:
      goto LABEL_12;
    case 1:
      char v5 = 1;
      goto LABEL_12;
    case 2:
      char v5 = 2;
      goto LABEL_12;
    case 3:
      char v5 = 3;
      goto LABEL_12;
    case 4:
      char v5 = 4;
      goto LABEL_12;
    case 5:
      char v5 = 5;
      goto LABEL_12;
    case 6:
      char v5 = 6;
      goto LABEL_12;
    case 7:
      char v5 = 7;
      goto LABEL_12;
    case 8:
      char v5 = 8;
      goto LABEL_12;
    case 9:
      char v5 = 9;
LABEL_12:
      char v6 = v5;
      break;
    case 10:
      break;
    case 11:
      char v6 = 11;
      break;
    case 12:
      char v6 = 12;
      break;
    case 13:
      char v6 = 13;
      break;
    case 14:
      char v6 = 14;
      break;
    case 15:
      char v6 = 15;
      break;
    case 16:
      char v6 = 16;
      break;
    case 17:
      char v6 = 17;
      break;
    case 18:
      char v6 = 18;
      break;
    case 19:
      char v6 = 19;
      break;
    case 20:
      char v6 = 20;
      break;
    case 21:
      char v6 = 21;
      break;
    case 22:
      char v6 = 22;
      break;
    case 23:
      char v6 = 23;
      break;
    case 24:
      char v6 = 24;
      break;
    case 25:
      char v6 = 25;
      break;
    case 26:
      char v6 = 26;
      break;
    case 27:
      char v6 = 27;
      break;
    default:
      char v6 = 28;
      break;
  }
  *__int16 v2 = v6;
  return result;
}

unint64_t DIPError.PropertyKey.rawValue.getter()
{
  unint64_t result = 0x666B726F576F6E69;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x69766F72506F6E69;
      break;
    case 2:
      unint64_t result = 0x6C666B726F577073;
      break;
    case 3:
      unint64_t result = 0x6469766F72507073;
      break;
    case 4:
      unint64_t result = 0x7475626972747461;
      break;
    case 5:
    case 0xC:
    case 0x10:
    case 0x1A:
      unint64_t result = 0xD000000000000012;
      break;
    case 6:
      unint64_t result = 0x5255726576726573;
      break;
    case 7:
      unint64_t result = 0xD000000000000010;
      break;
    case 8:
      unint64_t result = 0xD000000000000013;
      break;
    case 9:
      unint64_t result = 0x4974736575716572;
      break;
    case 0xA:
      unint64_t result = 0x61737265766E6F63;
      break;
    case 0xB:
      unint64_t result = 0xD000000000000010;
      break;
    case 0xD:
      unint64_t result = 0xD000000000000013;
      break;
    case 0xE:
      unint64_t result = 0x63655264756F6C63;
      break;
    case 0xF:
      unint64_t result = 0x6552656369766564;
      break;
    case 0x11:
      unint64_t result = 0x6761735574726563;
      break;
    case 0x12:
      unint64_t result = 0x6573616261746164;
      break;
    case 0x13:
      unint64_t result = 0x74737973656C6966;
      break;
    case 0x14:
      unint64_t result = 0x69796C7265646E75;
      break;
    case 0x15:
      unint64_t result = 0x636E456567616D69;
      break;
    case 0x16:
      unint64_t result = 1701273968;
      break;
    case 0x17:
      unint64_t result = 0x636E75614C6F6E69;
      break;
    case 0x18:
      unint64_t result = 0x746E756F43797274;
      break;
    case 0x19:
      unint64_t result = 0x746E656D75636F64;
      break;
    case 0x1B:
      unint64_t result = 0xD000000000000016;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1D789CDD8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1D799454C(*a1, *a2);
}

uint64_t sub_1D789CDE4()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D789CE4C()
{
  DIPError.PropertyKey.rawValue.getter();
  sub_1D7A9C0B8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D789CEB0()
{
  return sub_1D7A9D628();
}

CoreIDVShared::DIPError::PropertyKey_optional sub_1D789CF14(Swift::String *a1)
{
  return DIPError.PropertyKey.init(rawValue:)(*a1);
}

unint64_t sub_1D789CF20@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = DIPError.PropertyKey.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t DIPError.description.getter()
{
  uint64_t v1 = *v0;
  __int16 v2 = *v0;
  uint64_t v3 = *((void *)v0 + 1);
  uint64_t v4 = *((void *)v0 + 2);
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v28 = v4;
  if (v5)
  {
    char v6 = (uint64_t *)(v3 + 56 * v5);
    while (1)
    {
      uint64_t v8 = *(v6 - 3);
      unint64_t v7 = *(v6 - 2);
      uint64_t v9 = HIBYTE(v7) & 0xF;
      if ((v7 & 0x2000000000000000) == 0) {
        uint64_t v9 = v8 & 0xFFFFFFFFFFFFLL;
      }
      if (v9) {
        break;
      }
      v6 -= 7;
      if (!--v5) {
        goto LABEL_9;
      }
    }
    uint64_t v11 = *(v6 - 1);
    uint64_t v10 = *v6;
    uint64_t v13 = v6[1];
    uint64_t v12 = v6[2];
    uint64_t v14 = v6[3];
    *(void *)&v29[0] = 0;
    *((void *)&v29[0] + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1D7A9C128();
    uint64_t v33 = v8;
    *(void *)&long long v34 = v7;
    *((void *)&v34 + 1) = v11;
    uint64_t v35 = v10;
    uint64_t v4 = v28;
    uint64_t v36 = v13;
    uint64_t v37 = v12;
    uint64_t v38 = v14;
    sub_1D7A9CE78();
    sub_1D7A9C128();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
LABEL_9:
  sub_1D7A9CC48();
  swift_bridgeObjectRelease();
  uint64_t v33 = 0x20726F727245;
  *(void *)&long long v34 = 0xE600000000000000;
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  sub_1D7A9C128();
  sub_1D7A9C128();
  *(void *)&v29[0] = qword_1D7AA32E8[v1];
  sub_1D7A9D258();
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  LOWORD(v29[0]) = v2;
  sub_1D7A9C038();
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  uint64_t result = 0x20726F727245;
  uint64_t v31 = 0x20726F727245;
  unint64_t v32 = 0xE600000000000000;
  if (!*(void *)(v4 + 16)) {
    return result;
  }
  sub_1D7A9C128();
  uint64_t v26 = v4 + 64;
  uint64_t v16 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & *(void *)(v4 + 64);
  int64_t v27 = (unint64_t)(v16 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v19 = 0;
  if (!v18) {
    goto LABEL_17;
  }
LABEL_15:
  unint64_t v20 = __clz(__rbit64(v18));
  v18 &= v18 - 1;
  unint64_t v21 = v20 | (v19 << 6);
  while (2)
  {
    uint64_t v22 = *(void *)(v28 + 56);
    LOBYTE(v29[0]) = *(unsigned char *)(*(void *)(v28 + 48) + v21);
    sub_1D78907D8(v22 + 32 * v21, (uint64_t)v29 + 8);
    while (1)
    {
      sub_1D7871D78((uint64_t)v29, (uint64_t)&v33, &qword_1EBDF99A8);
      if (!v36)
      {
        swift_bridgeObjectRelease();
        swift_release();
        sub_1D7A9C128();
        return v31;
      }
      sub_1D7860E50(&v34, v29);
      sub_1D7A9CE78();
      sub_1D7A9C128();
      sub_1D7A9CE78();
      swift_bridgeObjectRetain();
      sub_1D7A9C128();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1D7A9C128();
      swift_bridgeObjectRelease();
      uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
      if (v18) {
        goto LABEL_15;
      }
LABEL_17:
      int64_t v23 = v19 + 1;
      if (__OFADD__(v19, 1))
      {
        __break(1u);
        goto LABEL_39;
      }
      if (v23 < v27)
      {
        unint64_t v24 = *(void *)(v26 + 8 * v23);
        if (v24) {
          goto LABEL_20;
        }
        int64_t v25 = v19 + 2;
        ++v19;
        if (v23 + 1 < v27)
        {
          unint64_t v24 = *(void *)(v26 + 8 * v25);
          if (v24) {
            goto LABEL_23;
          }
          int64_t v19 = v23 + 1;
          if (v23 + 2 < v27)
          {
            unint64_t v24 = *(void *)(v26 + 8 * (v23 + 2));
            if (v24)
            {
              v23 += 2;
              goto LABEL_20;
            }
            int64_t v25 = v23 + 3;
            int64_t v19 = v23 + 2;
            if (v23 + 3 < v27) {
              break;
            }
          }
        }
      }
LABEL_34:
      unint64_t v18 = 0;
      uint64_t v30 = 0;
      memset(v29, 0, sizeof(v29));
    }
    unint64_t v24 = *(void *)(v26 + 8 * v25);
    if (v24)
    {
LABEL_23:
      int64_t v23 = v25;
LABEL_20:
      unint64_t v18 = (v24 - 1) & v24;
      unint64_t v21 = __clz(__rbit64(v24)) + (v23 << 6);
      int64_t v19 = v23;
      continue;
    }
    break;
  }
  while (1)
  {
    int64_t v23 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v23 >= v27)
    {
      int64_t v19 = v27 - 1;
      goto LABEL_34;
    }
    unint64_t v24 = *(void *)(v26 + 8 * v23);
    ++v25;
    if (v24) {
      goto LABEL_20;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t DIPError.debugDescription.getter()
{
  uint64_t v46 = sub_1D7A9AF68();
  uint64_t v1 = *(void *)(v46 - 8);
  MEMORY[0x1F4188790](v46, v2, v3, v4, v5, v6, v7, v8);
  id v45 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(__int16 *)v0;
  uint64_t v11 = v0[1];
  uint64_t v12 = v0[2];
  id v43 = (id)v0[3];
  unint64_t v54 = 0;
  *(void *)&long long v55 = 0xE000000000000000;
  sub_1D7A9CC48();
  swift_bridgeObjectRelease();
  unint64_t v54 = 0xD00000000000001FLL;
  *(void *)&long long v55 = 0x80000001D7ABF670;
  *(void *)&v52[0] = qword_1D7AA32E8[v10];
  sub_1D7A9D258();
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  LOWORD(v52[0]) = v10;
  sub_1D7A9C038();
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  unint64_t v57 = v54;
  uint64_t v58 = v55;
  uint64_t v13 = *(void *)(v12 + 16);
  uint64_t v47 = v11;
  if (!v13) {
    goto LABEL_29;
  }
  uint64_t v42 = v1;
  sub_1D7A9C128();
  uint64_t v14 = *(void *)(v12 + 64);
  uint64_t v44 = (void (**)(char *, uint64_t))(v12 + 64);
  uint64_t v15 = 1 << *(unsigned char *)(v12 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & v14;
  int64_t v48 = (unint64_t)(v15 + 63) >> 6;
  int64_t v41 = v48 - 1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v19 = 0;
  if (!v17) {
    goto LABEL_9;
  }
LABEL_7:
  unint64_t v21 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  unint64_t v22 = v21 | (v19 << 6);
  while (2)
  {
    uint64_t v23 = *(void *)(v12 + 56);
    LOBYTE(v52[0]) = *(unsigned char *)(*(void *)(v12 + 48) + v22);
    sub_1D78907D8(v23 + 32 * v22, (uint64_t)v52 + 8);
    while (1)
    {
      sub_1D7871D78((uint64_t)v52, (uint64_t)&v54, &qword_1EBDF99A8);
      if (!v56)
      {
        swift_release();
        uint64_t v11 = v47;
        uint64_t v1 = v42;
LABEL_29:
        uint64_t v27 = *(void *)(v11 + 16);
        if (v27)
        {
          sub_1D7A9C128();
          uint64_t v44 = (void (**)(char *, uint64_t))(v1 + 8);
          swift_bridgeObjectRetain();
          uint64_t v28 = v11 + 56 * v27;
          while (v27 <= *(void *)(v11 + 16))
          {
            unint64_t v29 = *(void *)(v28 - 16);
            int64_t v48 = *(void *)(v28 - 24);
            uint64_t v30 = *(void *)(v28 + 24);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            sub_1D7A9C128();
            unint64_t v54 = 0;
            *(void *)&long long v55 = 0xE000000000000000;
            uint64_t v31 = v45;
            sub_1D7A9AEC8();
            uint64_t v32 = sub_1D7A9AEE8();
            uint64_t v34 = v33;
            (*v44)(v31, v46);
            swift_bridgeObjectRelease();
            unint64_t v54 = v32;
            *(void *)&long long v55 = v34;
            sub_1D7A9C128();
            swift_bridgeObjectRetain();
            sub_1D7A9C128();
            swift_bridgeObjectRelease();
            sub_1D7A9C128();
            *(void *)&v52[0] = v30;
            sub_1D7A9D258();
            sub_1D7A9C128();
            swift_bridgeObjectRelease();
            unint64_t v54 = 539822345;
            *(void *)&long long v55 = 0xE400000000000000;
            sub_1D7A9C128();
            swift_bridgeObjectRelease();
            sub_1D7A9C128();
            int64_t v35 = v48;
            swift_bridgeObjectRelease();
            uint64_t v36 = HIBYTE(v29) & 0xF;
            if ((v29 & 0x2000000000000000) == 0) {
              uint64_t v36 = v35 & 0xFFFFFFFFFFFFLL;
            }
            if (v36)
            {
              unint64_t v54 = 9;
              *(void *)&long long v55 = 0xE100000000000000;
              swift_bridgeObjectRetain();
              sub_1D7A9C128();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease_n();
              sub_1D7A9C128();
            }
            else
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            --v27;
            swift_bridgeObjectRelease();
            v28 -= 56;
            uint64_t v11 = v47;
            if (!v27) {
              goto LABEL_39;
            }
          }
          __break(1u);
LABEL_39:
          swift_bridgeObjectRelease();
        }
        id v37 = v43;
        if (v43)
        {
          id v38 = v43;
          sub_1D7A9C128();
          unint64_t v54 = (unint64_t)v37;
          id v39 = v37;
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF9740);
          sub_1D7A9C058();
          unint64_t v54 = 0x202D09090ALL;
          *(void *)&long long v55 = 0xE500000000000000;
          sub_1D7A9C128();
          swift_bridgeObjectRelease();
          sub_1D7A9C128();
          swift_bridgeObjectRelease();
        }
        return v57;
      }
      char v20 = v54;
      sub_1D7860E50(&v55, v52);
      sub_1D7A9C128();
      uint64_t v50 = 0;
      unint64_t v51 = 0xE000000000000000;
      char v49 = v20;
      sub_1D7A9CE78();
      sub_1D7A9C128();
      sub_1D7A9CE78();
      uint64_t v50 = 539822345;
      unint64_t v51 = 0xE400000000000000;
      sub_1D7A9C128();
      swift_bridgeObjectRelease();
      sub_1D7A9C128();
      swift_bridgeObjectRelease();
      uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
      if (v17) {
        goto LABEL_7;
      }
LABEL_9:
      int64_t v24 = v19 + 1;
      if (__OFADD__(v19, 1))
      {
        __break(1u);
        goto LABEL_44;
      }
      if (v24 < v48)
      {
        unint64_t v25 = (unint64_t)v44[v24];
        if (v25) {
          goto LABEL_12;
        }
        int64_t v26 = v19 + 2;
        ++v19;
        if (v24 + 1 < v48)
        {
          unint64_t v25 = (unint64_t)v44[v26];
          if (v25) {
            goto LABEL_15;
          }
          int64_t v19 = v24 + 1;
          if (v24 + 2 < v48)
          {
            unint64_t v25 = (unint64_t)v44[v24 + 2];
            if (v25)
            {
              v24 += 2;
              goto LABEL_12;
            }
            int64_t v26 = v24 + 3;
            int64_t v19 = v24 + 2;
            if (v24 + 3 < v48) {
              break;
            }
          }
        }
      }
LABEL_26:
      unint64_t v17 = 0;
      uint64_t v53 = 0;
      memset(v52, 0, sizeof(v52));
    }
    unint64_t v25 = (unint64_t)v44[v26];
    if (v25)
    {
LABEL_15:
      int64_t v24 = v26;
LABEL_12:
      unint64_t v17 = (v25 - 1) & v25;
      unint64_t v22 = __clz(__rbit64(v25)) + (v24 << 6);
      int64_t v19 = v24;
      continue;
    }
    break;
  }
  while (1)
  {
    int64_t v24 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v24 >= v48)
    {
      int64_t v19 = v41;
      goto LABEL_26;
    }
    unint64_t v25 = (unint64_t)v44[v24];
    ++v26;
    if (v25) {
      goto LABEL_12;
    }
  }
LABEL_44:
  __break(1u);
  return result;
}

void DIPLogError(_:message:log:)(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    uint64_t v4 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v4)
  {
    unint64_t v5 = a3;
    uint64_t v29 = a2;
    unint64_t v30 = a3;
    swift_bridgeObjectRetain();
    sub_1D7A9C128();
    uint64_t v8 = v29;
    unint64_t v7 = v30;
    uint64_t v29 = a2;
    unint64_t v30 = v5;
    swift_bridgeObjectRetain();
    sub_1D7A9C128();
    uint64_t v9 = a2;
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    unint64_t v7 = 0xE000000000000000;
    unint64_t v5 = 0xE000000000000000;
  }
  id v10 = a1;
  id v11 = a1;
  swift_bridgeObjectRetain();
  uint64_t v12 = sub_1D7A9B5D8();
  os_log_type_t v13 = sub_1D7A9C758();
  uint64_t v28 = v9;
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    uint64_t v29 = v15;
    *(_DWORD *)uint64_t v14 = 136446466;
    swift_bridgeObjectRetain();
    sub_1D7923300(v8, v7, &v29);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v14 + 12) = 2082;
    id v16 = a1;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF9740);
    uint64_t v17 = sub_1D7A9C038();
    sub_1D7923300(v17, v18, &v29);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1D7853000, v12, v13, "%{public}s%{public}s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v15, -1, -1);
    MEMORY[0x1D947D740](v14, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
  id v19 = a1;
  id v20 = a1;
  swift_bridgeObjectRetain();
  unint64_t v21 = sub_1D7A9B5D8();
  os_log_type_t v22 = sub_1D7A9C738();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    uint64_t v29 = v24;
    *(_DWORD *)uint64_t v23 = 136446466;
    swift_bridgeObjectRetain();
    sub_1D7923300(v28, v5, &v29);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v23 + 12) = 2082;
    id v25 = a1;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF9740);
    uint64_t v26 = sub_1D7A9C058();
    sub_1D7923300(v26, v27, &v29);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1D7853000, v21, v22, "%{public}s%{public}s", (uint8_t *)v23, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v24, -1, -1);
    MEMORY[0x1D947D740](v23, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
}

void Error.dipErrorCode.getter(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, __int16 *a8@<X8>)
{
  MEMORY[0x1F4188790](a1, v8, a2, a3, a4, a5, a6, a7);
  (*(void (**)(char *))(v11 + 16))((char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (swift_dynamicCast())
  {
    __int16 v12 = v14;
    os_log_type_t v13 = v15;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    __int16 v12 = 806;
  }
  *a8 = v12;
}

char *sub_1D789E0D8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  int64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v7 = a2;
    }
LABEL_8:
    int64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      int64_t v9 = *((void *)a4 + 2);
    }
    else {
      int64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF9D80);
      uint64_t v10 = (char *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * v11 - 64;
      __int16 v12 = v10 + 32;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32]) {
          memmove(v12, a4 + 32, v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
      __int16 v12 = (char *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1D78A1FC8(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1D789E1D4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF9670);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      __int16 v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4]) {
          memmove(v12, a4 + 4, 56 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      __int16 v12 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1D78A20B0(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1D789E300(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF7930);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      os_log_type_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      os_log_type_t v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1D78A21A8(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1D789E410(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1D789E428(a1, a2, a3, a4, &qword_1EA843018);
}

void *sub_1D789E41C(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1D789E428(a1, a2, a3, a4, &qword_1EA843020);
}

void *sub_1D789E428(void *result, int64_t a2, char a3, void *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      int64_t v11 = (void *)swift_allocObject();
      int64_t v12 = _swift_stdlib_malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 25;
      }
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 3);
      __int16 v14 = v11 + 4;
      if (v6) {
        goto LABEL_15;
      }
    }
    else
    {
      int64_t v11 = (void *)MEMORY[0x1E4FBC860];
      __int16 v14 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v9 + 4]) {
          memmove(v14, a4 + 4, 8 * v9);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1D78A1EDC(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1D789E534(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1D789E7B4(a1, a2, a3, a4, &qword_1EA843050, type metadata accessor for CredentialBuilderPayloadDetails.Element, type metadata accessor for CredentialBuilderPayloadDetails.Element);
}

char *sub_1D789E558(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA843048);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 29;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 2);
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (char *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32]) {
          memmove(v13, a4 + 32, 4 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_1D78A229C(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1D789E668(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA843028);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 96);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[12 * v8 + 4]) {
          memmove(v12, a4 + 4, 96 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v12 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1D78A25F4(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1D789E790(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1D789E7B4(a1, a2, a3, a4, &qword_1EA843040, (uint64_t (*)(void))type metadata accessor for AnyCodable, (uint64_t (*)(void))type metadata accessor for AnyCodable);
}

uint64_t sub_1D789E7B4(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    unint64_t v18 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  unint64_t v18 = (void *)swift_allocObject();
  size_t v19 = _swift_stdlib_malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = sub_1D7A9CF88();
    __break(1u);
    return result;
  }
  v18[2] = v13;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1D78A2498(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

void *sub_1D789EA34(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA843030);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v12 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1D78A2388(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1D789EB58@<X0>(unsigned char *a1@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *a1;
  return sub_1D78907D8((uint64_t)(a1 + 8), (uint64_t)(a2 + 8));
}

uint64_t sub_1D789EB68(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = ~v7;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = -v7;
  uint64_t v48 = a1;
  uint64_t v49 = a1 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  else {
    uint64_t v11 = -1;
  }
  uint64_t v50 = v8;
  uint64_t v51 = 0;
  uint64_t v52 = v11 & v9;
  uint64_t v53 = a2;
  uint64_t v54 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1D7884A64((uint64_t)v45);
  if (!v47) {
    goto LABEL_26;
  }
  char v12 = v45[0];
  sub_1D7860E50(&v46, v44);
  uint64_t v13 = *(void **)a5;
  unint64_t v15 = sub_1D7A18740(v12);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  char v19 = v14;
  if (v13[3] >= v18)
  {
    if (a4)
    {
      if (v14) {
        goto LABEL_12;
      }
    }
    else
    {
      sub_1D7972860();
      if (v19) {
        goto LABEL_12;
      }
    }
LABEL_14:
    unint64_t v23 = *(void **)a5;
    *(void *)(*(void *)a5 + 8 * (v15 >> 6) + 64) |= 1 << v15;
    *(unsigned char *)(v23[6] + v15) = v12;
    sub_1D7860E50(v44, (_OWORD *)(v23[7] + 32 * v15));
    uint64_t v24 = v23[2];
    BOOL v25 = __OFADD__(v24, 1);
    uint64_t v26 = v24 + 1;
    if (v25)
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    _OWORD v23[2] = v26;
LABEL_16:
    sub_1D7884A64((uint64_t)v45);
    while (v47)
    {
      char v29 = v45[0];
      sub_1D7860E50(&v46, v44);
      unint64_t v30 = *(void **)a5;
      unint64_t v31 = sub_1D7A18740(v29);
      uint64_t v33 = v30[2];
      BOOL v34 = (v32 & 1) == 0;
      BOOL v25 = __OFADD__(v33, v34);
      uint64_t v35 = v33 + v34;
      if (v25) {
        goto LABEL_27;
      }
      char v36 = v32;
      if (v30[3] < v35)
      {
        sub_1D796EEC8(v35, 1);
        unint64_t v31 = sub_1D7A18740(v29);
        if ((v36 & 1) != (v37 & 1)) {
          goto LABEL_29;
        }
      }
      if (v36)
      {
        uint64_t v27 = 32 * v31;
        sub_1D78907D8(*(void *)(*(void *)a5 + 56) + 32 * v31, (uint64_t)v42);
        sub_1D78907D8((uint64_t)v42, (uint64_t)v43);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
        uint64_t v28 = (_OWORD *)(*(void *)(*(void *)a5 + 56) + v27);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
        sub_1D7860E50(v43, v28);
      }
      else
      {
        id v38 = *(void **)a5;
        *(void *)(*(void *)a5 + 8 * (v31 >> 6) + 64) |= 1 << v31;
        *(unsigned char *)(v38[6] + v31) = v29;
        sub_1D7860E50(v44, (_OWORD *)(v38[7] + 32 * v31));
        uint64_t v39 = v38[2];
        BOOL v25 = __OFADD__(v39, 1);
        uint64_t v40 = v39 + 1;
        if (v25) {
          goto LABEL_28;
        }
        v38[2] = v40;
      }
      sub_1D7884A64((uint64_t)v45);
    }
LABEL_26:
    swift_release();
    swift_bridgeObjectRelease();
    sub_1D78907D0();
    return swift_release();
  }
  sub_1D796EEC8(v18, a4 & 1);
  unint64_t v20 = sub_1D7A18740(v12);
  if ((v19 & 1) == (v21 & 1))
  {
    unint64_t v15 = v20;
    if ((v19 & 1) == 0) {
      goto LABEL_14;
    }
LABEL_12:
    sub_1D78907D8(*(void *)(*(void *)a5 + 56) + 32 * v15, (uint64_t)v42);
    sub_1D78907D8((uint64_t)v42, (uint64_t)v43);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
    unint64_t v22 = (_OWORD *)(*(void *)(*(void *)a5 + 56) + 32 * v15);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    sub_1D7860E50(v43, v22);
    goto LABEL_16;
  }
LABEL_29:
  uint64_t result = sub_1D7A9D4F8();
  __break(1u);
  return result;
}

uint64_t sub_1D789EED0(uint64_t a1, uint64_t a2)
{
  return sub_1D789EF00(a1, a2, (void (*)(void))sub_1D7972A2C);
}

uint64_t sub_1D789EEE8(uint64_t a1, uint64_t a2)
{
  return sub_1D789EF00(a1, a2, (void (*)(void))sub_1D7972A38);
}

uint64_t sub_1D789EF00(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  char v5 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_1D7A18684(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *v5;
  uint64_t v14 = *v5;
  *char v5 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    a3();
    uint64_t v11 = v14;
  }
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(*(void *)(v11 + 56) + 16 * v8);
  sub_1D789F628(v8, v11);
  *char v5 = v11;
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_1D789EFF0(uint64_t a1, uint64_t a2)
{
  return sub_1D789EF00(a1, a2, (void (*)(void))sub_1D7972A44);
}

uint64_t sub_1D789F008(uint64_t a1, uint64_t a2)
{
  return sub_1D789EF00(a1, a2, (void (*)(void))sub_1D7972A50);
}

double sub_1D789F020@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1D7A187CC(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v13 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1D7972C18();
      uint64_t v9 = v13;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = sub_1D7A9CEA8();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
    sub_1D7860E50((_OWORD *)(*(void *)(v9 + 56) + 32 * v6), a2);
    sub_1D789F800(v6, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

double sub_1D789F14C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_1D7A18684(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    uint64_t *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1D7973274();
      uint64_t v11 = v13;
    }
    swift_bridgeObjectRelease();
    sub_1D7860E50((_OWORD *)(*(void *)(v11 + 56) + 32 * v8), a3);
    sub_1D789FAB8(v8, v11);
    uint64_t *v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_0(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_1D789F2B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1D7A18684(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1D7973294();
    uint64_t v9 = v12;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 8 * v6);
  sub_1D789FC90(v6, v9);
  *uint64_t v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1D789F384@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_1D7A18684(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v21 = *v4;
    uint64_t *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1D7974204();
      uint64_t v11 = v21;
    }
    swift_bridgeObjectRelease();
    uint64_t v12 = *(void *)(v11 + 56);
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9118);
    uint64_t v20 = *(void *)(v13 - 8);
    sub_1D7871D78(v12 + *(void *)(v20 + 72) * v8, a3, &qword_1EBDF9118);
    sub_1D78A0060(v8, v11);
    uint64_t *v4 = v11;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a3;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9118);
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a3;
    uint64_t v16 = 1;
  }
  return v14(v15, v16, 1, v17);
}

double sub_1D789F52C@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1D7A18C7C(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v11 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1D79747D0();
      uint64_t v9 = v11;
    }
    sub_1D78A2748(*(void *)(v9 + 48) + 40 * v6);
    sub_1D7860E50((_OWORD *)(*(void *)(v9 + 56) + 32 * v6), a2);
    sub_1D78A0280(v6, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

unint64_t sub_1D789F628(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = sub_1D7A9CBB8();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        sub_1D7A9D5D8();
        swift_bridgeObjectRetain();
        sub_1D7A9C0B8();
        uint64_t v9 = sub_1D7A9D628();
        double result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            _OWORD *v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  uint64_t *v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1D789F800(int64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1D7A9CEA8();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = MEMORY[0x1F4188790](v4, v6, v7, v8, v9, v10, v11, v12);
  uint64_t v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v17 = (a1 + 1) & ~v16;
  if (((1 << v17) & *(void *)(a2 + 64 + 8 * (v17 >> 6))) != 0)
  {
    uint64_t v18 = ~v16;
    uint64_t v45 = a2 + 64;
    unint64_t result = sub_1D7A9CBB8();
    uint64_t v19 = v45;
    if ((*(void *)(v45 + 8 * (v17 >> 6)) & (1 << v17)) != 0)
    {
      unint64_t v43 = (result + 1) & v18;
      BOOL v21 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v20 = v5 + 16;
      uint64_t v42 = v21;
      uint64_t v22 = *(void *)(v20 + 56);
      uint64_t v44 = v20;
      unint64_t v23 = (uint64_t (**)(char *, uint64_t))(v20 - 8);
      do
      {
        int64_t v24 = v22 * v17;
        v42(v15, *(void *)(a2 + 48) + v22 * v17, v4);
        uint64_t v25 = sub_1D7A9BEF8();
        unint64_t result = (*v23)(v15, v4);
        unint64_t v26 = v25 & v18;
        if (a1 >= (uint64_t)v43)
        {
          if (v26 >= v43 && a1 >= (uint64_t)v26)
          {
LABEL_17:
            uint64_t v29 = *(void *)(a2 + 48);
            unint64_t result = v29 + v22 * a1;
            unint64_t v30 = v29 + v24 + v22;
            if (v22 * a1 < v24 || result >= v30)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
            }
            else if (v22 * a1 != v24)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v32 = *(void *)(a2 + 56);
            uint64_t v33 = (_OWORD *)(v32 + 32 * a1);
            BOOL v34 = (_OWORD *)(v32 + 32 * v17);
            uint64_t v19 = v45;
            if (a1 != v17 || (a1 = v17, v33 >= v34 + 2))
            {
              long long v35 = v34[1];
              *uint64_t v33 = *v34;
              v33[1] = v35;
              a1 = v17;
            }
            goto LABEL_5;
          }
        }
        else if (v26 >= v43 || a1 >= (uint64_t)v26)
        {
          goto LABEL_17;
        }
        uint64_t v19 = v45;
LABEL_5:
        unint64_t v17 = (v17 + 1) & v18;
      }
      while (((*(void *)(v19 + ((v17 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v17) & 1) != 0);
    }
    char v36 = (uint64_t *)(v19 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v37 = *v36;
    uint64_t v38 = (-1 << a1) - 1;
  }
  else
  {
    char v36 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v38 = *v36;
    uint64_t v37 = (-1 << a1) - 1;
  }
  *char v36 = v38 & v37;
  uint64_t v39 = *(void *)(a2 + 16);
  BOOL v40 = __OFSUB__(v39, 1);
  uint64_t v41 = v39 - 1;
  if (v40)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v41;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1D789FAB8(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = sub_1D7A9CBB8();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        sub_1D7A9D5D8();
        swift_bridgeObjectRetain();
        sub_1D7A9C0B8();
        uint64_t v10 = sub_1D7A9D628();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          uint64_t v13 = (_OWORD *)(v12 + 16 * v3);
          uint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            _OWORD *v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          uint64_t v16 = (_OWORD *)(v15 + 32 * v3);
          unint64_t v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 2))
          {
            long long v9 = v17[1];
            _OWORD *v16 = *v17;
            v16[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *uint64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1D789FC90(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = sub_1D7A9CBB8();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        sub_1D7A9D5D8();
        swift_bridgeObjectRetain();
        sub_1D7A9C0B8();
        uint64_t v9 = sub_1D7A9D628();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            _OWORD *v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t v15 = (void *)(v14 + 8 * v3);
          uint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  uint64_t *v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1D789FE68(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = sub_1D7A9CBB8();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        sub_1D7A9D5D8();
        swift_bridgeObjectRetain();
        sub_1D7A9C0B8();
        uint64_t v10 = sub_1D7A9D628();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          uint64_t v13 = (_OWORD *)(v12 + 16 * v3);
          uint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            _OWORD *v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          unint64_t v16 = v15 + 24 * v3;
          unint64_t v17 = (long long *)(v15 + 24 * v6);
          if (24 * v3 < (uint64_t)(24 * v6) || v16 >= (unint64_t)v17 + 24 || (v18 = v3 == v6, int64_t v3 = v6, !v18))
          {
            long long v9 = *v17;
            *(void *)(v16 + 16) = *((void *)v17 + 2);
            *(_OWORD *)unint64_t v16 = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v20 = *v19;
    uint64_t v21 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v21 = *v19;
    uint64_t v20 = (-1 << result) - 1;
  }
  *uint64_t v19 = v21 & v20;
  uint64_t v22 = *(void *)(a2 + 16);
  BOOL v23 = __OFSUB__(v22, 1);
  uint64_t v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1D78A0060(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = sub_1D7A9CBB8();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        sub_1D7A9D5D8();
        swift_bridgeObjectRetain();
        sub_1D7A9C0B8();
        uint64_t v9 = sub_1D7A9D628();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8) {
          break;
        }
        if (v10 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v11 = *(void *)(a2 + 48);
        uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
        uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
        if (v3 != v6 || v12 >= v13 + 1) {
          _OWORD *v12 = *v13;
        }
        uint64_t v14 = *(void *)(a2 + 56);
        uint64_t v15 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9118) - 8) + 72);
        int64_t v16 = v15 * v3;
        unint64_t result = v14 + v15 * v3;
        int64_t v17 = v15 * v6;
        unint64_t v18 = v14 + v15 * v6 + v15;
        if (v16 < v17 || result >= v18)
        {
          unint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v3 = v6;
          if (v16 == v17) {
            goto LABEL_6;
          }
          unint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          goto LABEL_21;
        }
      }
      if (v10 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      if (v3 < (uint64_t)v10) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_21:
    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  *uint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1D78A0280(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = sub_1D7A9CBB8();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        sub_1D78A26EC(*(void *)(a2 + 48) + 40 * v6, (uint64_t)v28);
        uint64_t v10 = sub_1D7A9CBD8();
        unint64_t result = sub_1D78A2748((uint64_t)v28);
        unint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            uint64_t v14 = *(void *)(a2 + 48);
            unint64_t v15 = v14 + 40 * v3;
            int64_t v16 = (long long *)(v14 + 40 * v6);
            if (v3 != v6 || v15 >= (unint64_t)v16 + 40)
            {
              long long v17 = *v16;
              long long v18 = v16[1];
              *(void *)(v15 + 32) = *((void *)v16 + 4);
              *(_OWORD *)unint64_t v15 = v17;
              *(_OWORD *)(v15 + 16) = v18;
            }
            uint64_t v19 = *(void *)(a2 + 56);
            uint64_t v20 = (_OWORD *)(v19 + 32 * v3);
            uint64_t v21 = (_OWORD *)(v19 + 32 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v20 >= v21 + 2))
            {
              long long v9 = v21[1];
              *uint64_t v20 = *v21;
              v20[1] = v9;
              int64_t v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1 << result) - 1;
  }
  *uint64_t v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  BOOL v26 = __OFSUB__(v25, 1);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_1D78A044C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  return sub_1D78A058C(a1, a2, a3, a4, a5, (void (*)(void))sub_1D7972A20, (void (*)(void))sub_1D796F1D8, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1D7974B6C);
}

uint64_t sub_1D78A048C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  return sub_1D78A058C(a1, a2, a3, a4, a5, (void (*)(void))sub_1D7972A2C, (void (*)(void))sub_1D796F1E4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1D7974B6C);
}

uint64_t sub_1D78A04CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  return sub_1D78A058C(a1, a2, a3, a4, a5, (void (*)(void))sub_1D7972A38, (void (*)(void))sub_1D796F1F0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1D7974B6C);
}

uint64_t sub_1D78A050C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  return sub_1D78A058C(a1, a2, a3, a4, a5, (void (*)(void))sub_1D7972A44, (void (*)(void))sub_1D796F1FC, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1D7974B6C);
}

uint64_t sub_1D78A054C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  return sub_1D78A058C(a1, a2, a3, a4, a5, (void (*)(void))sub_1D7972A50, (void (*)(void))sub_1D796F208, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1D7974B6C);
}

uint64_t sub_1D78A058C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void (*a6)(void), void (*a7)(void), void (*a8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  unint64_t v11 = v8;
  uint64_t v16 = *v8;
  uint64_t v18 = sub_1D7A18684(a3, a4);
  uint64_t v19 = *(void *)(v16 + 16);
  BOOL v20 = (v17 & 1) == 0;
  uint64_t v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v22 = v17;
  uint64_t v23 = *(void *)(v16 + 24);
  if (v23 >= v21 && (a5 & 1) != 0)
  {
LABEL_7:
    uint64_t v24 = *v11;
    if (v22)
    {
LABEL_8:
      uint64_t v25 = (void *)(*(void *)(v24 + 56) + 16 * v18);
      uint64_t result = swift_release();
      *uint64_t v25 = a1;
      v25[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  if (v23 >= v21 && (a5 & 1) == 0)
  {
    a6();
    goto LABEL_7;
  }
  a7();
  uint64_t v27 = sub_1D7A18684(a3, a4);
  if ((v22 & 1) != (v28 & 1))
  {
LABEL_15:
    uint64_t result = sub_1D7A9D4F8();
    __break(1u);
    return result;
  }
  uint64_t v18 = v27;
  uint64_t v24 = *v11;
  if (v22) {
    goto LABEL_8;
  }
LABEL_11:
  a8(v18, a3, a4, a1, a2, v24);
  return swift_bridgeObjectRetain();
}

_OWORD *sub_1D78A0704(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = sub_1D7A9CEA8();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8, v10, v11, v12, v13, v14, v15, v16);
  uint64_t v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = (void *)*v3;
  unint64_t v21 = sub_1D7A187CC(a2);
  uint64_t v22 = v19[2];
  BOOL v23 = (v20 & 1) == 0;
  uint64_t v24 = v22 + v23;
  if (__OFADD__(v22, v23))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v25 = v20;
  uint64_t v26 = v19[3];
  if (v26 < v24 || (a3 & 1) == 0)
  {
    if (v26 >= v24 && (a3 & 1) == 0)
    {
      sub_1D7972C18();
      goto LABEL_7;
    }
    sub_1D796F51C(v24, a3 & 1);
    unint64_t v30 = sub_1D7A187CC(a2);
    if ((v25 & 1) == (v31 & 1))
    {
      unint64_t v21 = v30;
      uint64_t v27 = *v4;
      if (v25) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v18, a2, v8);
      return sub_1D7974BC0(v21, (uint64_t)v18, a1, v27);
    }
LABEL_15:
    uint64_t result = (_OWORD *)sub_1D7A9D4F8();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v27 = *v4;
  if ((v25 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  char v28 = (_OWORD *)(v27[7] + 32 * v21);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  return sub_1D7860E50(a1, v28);
}

uint64_t sub_1D78A08DC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1D78A1ADC(a1, a2, a3, a4, (void (*)(void))sub_1D7972EC0, (void (*)(void))sub_1D796F918, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1D7974C80);
}

uint64_t sub_1D78A091C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1D78A1ADC(a1, a2, a3, a4, (void (*)(void))sub_1D7972EE0, (void (*)(void))sub_1D796F938, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1D7974C80);
}

_OWORD *sub_1D78A095C(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_1D7A18684(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1D7973274();
      goto LABEL_7;
    }
    sub_1D796FF38(v15, a4 & 1);
    uint64_t v21 = sub_1D7A18684(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      uint64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)sub_1D7A9D4F8();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = (_OWORD *)(v18[7] + 32 * v12);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    return sub_1D7860E50(a1, v19);
  }
LABEL_13:
  sub_1D7974C84(v12, a2, a3, a1, v18);
  return (_OWORD *)swift_bridgeObjectRetain();
}

unint64_t sub_1D78A0AB8()
{
  unint64_t result = qword_1EA843008;
  if (!qword_1EA843008)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA843008);
  }
  return result;
}

unint64_t sub_1D78A0B10()
{
  unint64_t result = qword_1EBDF8C08;
  if (!qword_1EBDF8C08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBDF8C08);
  }
  return result;
}

void destroy for DIPError(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 24);
}

uint64_t initializeWithCopy for DIPError(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  uint64_t v4 = *(void **)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v5 = v4;
  *(void *)(a1 + 24) = v4;
  return a1;
}

uint64_t assignWithCopy for DIPError(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 24);
  id v5 = *(void **)(a2 + 24);
  id v6 = v5;
  *(void *)(a1 + 24) = v5;

  return a1;
}

uint64_t assignWithTake for DIPError(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);

  return a1;
}

ValueMetadata *type metadata accessor for DIPError()
{
  return &type metadata for DIPError;
}

_WORD *__swift_memcpy2_2(_WORD *result, _WORD *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for DIPError.Code(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFCDB) {
    goto LABEL_17;
  }
  if (a2 + 805 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 805 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 805;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 805;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 805;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x326;
  int v8 = v6 - 806;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for DIPError.Code(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 805 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 805 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFCDB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFCDA)
  {
    unsigned int v6 = ((a2 - 64731) >> 16) + 1;
    *(_WORD *)unint64_t result = a2 + 805;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D78A0E5CLL);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(_WORD *)unint64_t result = a2 + 805;
        break;
    }
  }
  return result;
}

uint64_t sub_1D78A0E84(unsigned __int16 *a1)
{
  return *a1;
}

_WORD *sub_1D78A0E8C(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for DIPError.Code()
{
  return &type metadata for DIPError.Code;
}

uint64_t getEnumTagSinglePayload for DIPError.PropertyKey(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xE5) {
    goto LABEL_17;
  }
  if (a2 + 27 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 27) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 27;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 27;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 27;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x1C;
  int v8 = v6 - 28;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for DIPError.PropertyKey(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 27 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 27) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE4)
  {
    unsigned int v6 = ((a2 - 229) >> 8) + 1;
    *unint64_t result = a2 + 27;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D78A1000);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 27;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DIPError.PropertyKey()
{
  return &type metadata for DIPError.PropertyKey;
}

uint64_t destroy for DIPInvocation()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for DIPInvocation(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for DIPInvocation(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

void *assignWithTake for DIPInvocation(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  return a1;
}

uint64_t getEnumTagSinglePayload for DIPInvocation(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DIPInvocation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DIPInvocation()
{
  return &type metadata for DIPInvocation;
}

unint64_t sub_1D78A1294()
{
  unint64_t result = qword_1EA843010;
  if (!qword_1EA843010)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA843010);
  }
  return result;
}

void sub_1D78A12E8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_1D7A18684(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];

      *(void *)(v19 + 8 * v12) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1D7973294();
    goto LABEL_7;
  }
  sub_1D796FF58(v15, a4 & 1);
  uint64_t v20 = sub_1D7A18684(a2, a3);
  if ((v16 & 1) != (v21 & 1))
  {
LABEL_15:
    sub_1D7A9D4F8();
    __break(1u);
    return;
  }
  unint64_t v12 = v20;
  uint64_t v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  sub_1D7974CF0(v12, a2, a3, a1, v18);
  swift_bridgeObjectRetain();
}

uint64_t sub_1D78A1428(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  BOOL v7 = (void **)v6;
  BOOL v14 = (void *)*v6;
  unint64_t v16 = sub_1D7A18684(a4, a5);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v20 = v15;
  uint64_t v21 = v14[3];
  if (v21 < v19 || (a6 & 1) == 0)
  {
    if (v21 >= v19 && (a6 & 1) == 0)
    {
      sub_1D7973448();
      goto LABEL_9;
    }
    sub_1D7970268(v19, a6 & 1);
    uint64_t v22 = sub_1D7A18684(a4, a5);
    if ((v20 & 1) == (v23 & 1))
    {
      unint64_t v16 = v22;
      goto LABEL_9;
    }
LABEL_15:
    uint64_t result = sub_1D7A9D4F8();
    __break(1u);
    return result;
  }
LABEL_9:
  int v24 = a3 & 1;
  char v25 = *v7;
  if (v20)
  {
    BOOL v26 = v24 != 0;
    uint64_t v27 = v25[7] + 24 * v16;
    uint64_t result = sub_1D78A2804();
    *(void *)uint64_t v27 = a1;
    *(void *)(v27 + 8) = a2;
    *(unsigned char *)(v27 + 16) = v26;
  }
  else
  {
    sub_1D7974D38(v16, a4, a5, a1, a2, v24, v25);
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t sub_1D78A1594(uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_1D7A18C10(a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    BOOL v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = (uint64_t *)(v18[7] + 16 * v12);
      unint64_t result = swift_bridgeObjectRelease();
      *uint64_t v19 = a1;
      v19[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1D7973834();
    goto LABEL_7;
  }
  sub_1D79708E4(v15, a4 & 1);
  unint64_t v21 = sub_1D7A18C10(a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_15:
    unint64_t result = sub_1D7A9D4F8();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  BOOL v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  return sub_1D7974D90(v12, a3, a1, a2, v18);
}

uint64_t sub_1D78A16C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = (void **)v5;
  unint64_t v12 = (void *)*v5;
  unint64_t v14 = sub_1D7A18684(a3, a4);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a5 & 1) != 0)
  {
LABEL_7:
    char v20 = *v6;
    if (v18)
    {
LABEL_8:
      unint64_t v21 = (uint64_t *)(v20[7] + 16 * v14);
      uint64_t result = swift_bridgeObjectRelease();
      *unint64_t v21 = a1;
      v21[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_1D79739E0();
    goto LABEL_7;
  }
  sub_1D7970BCC(v17, a5 & 1);
  uint64_t v23 = sub_1D7A18684(a3, a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_15:
    uint64_t result = sub_1D7A9D4F8();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  char v20 = *v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  sub_1D7974B70(v14, a3, a4, a1, a2, v20);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D78A1818(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_1D7A18684(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1D7974204();
      goto LABEL_7;
    }
    sub_1D79718B8(v15, a4 & 1);
    uint64_t v22 = sub_1D7A18684(a2, a3);
    if ((v16 & 1) == (v23 & 1))
    {
      unint64_t v12 = v22;
      char v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = sub_1D7A9D4F8();
    __break(1u);
    return result;
  }
LABEL_7:
  char v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = v18[7];
    uint64_t v20 = v19
        + *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9118) - 8) + 72) * v12;
    return sub_1D78A279C(a1, v20);
  }
LABEL_13:
  sub_1D7974DD8(v12, a2, a3, a1, v18);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D78A1980(char a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  int v8 = (void *)*v3;
  unint64_t v10 = sub_1D7A18648(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    char v16 = *v4;
    if (v14)
    {
LABEL_8:
      *(unsigned char *)(v16[7] + v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1D7974484();
    goto LABEL_7;
  }
  sub_1D7971C80(result, a3 & 1);
  uint64_t result = sub_1D7A18648(a2);
  if ((v14 & 1) != (v17 & 1))
  {
LABEL_15:
    uint64_t result = sub_1D7A9D4F8();
    __break(1u);
    return result;
  }
  unint64_t v10 = result;
  char v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:
  return sub_1D7974E84(v10, a2, a1, v16);
}

uint64_t sub_1D78A1A9C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1D78A1ADC(a1, a2, a3, a4, (void (*)(void))sub_1D7974614, (void (*)(void))sub_1D7971F20, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1D7974C80);
}

uint64_t sub_1D78A1ADC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void), void (*a6)(void), void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  unint64_t v10 = v7;
  uint64_t v15 = *v7;
  uint64_t v17 = sub_1D7A18684(a2, a3);
  uint64_t v18 = *(void *)(v15 + 16);
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v21 = v16;
  uint64_t v22 = *(void *)(v15 + 24);
  if (v22 >= v20 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v23 = *v10;
    if (v21)
    {
LABEL_8:
      uint64_t v24 = *(void *)(v23 + 56);
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v24 + 8 * v17) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v22 >= v20 && (a4 & 1) == 0)
  {
    a5();
    goto LABEL_7;
  }
  a6();
  uint64_t v26 = sub_1D7A18684(a2, a3);
  if ((v21 & 1) != (v27 & 1))
  {
LABEL_15:
    uint64_t result = sub_1D7A9D4F8();
    __break(1u);
    return result;
  }
  uint64_t v17 = v26;
  uint64_t v23 = *v10;
  if (v21) {
    goto LABEL_8;
  }
LABEL_11:
  a7(v17, a2, a3, a1, v23);
  return swift_bridgeObjectRetain();
}

_OWORD *sub_1D78A1C50(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  int v8 = (void *)*v3;
  unint64_t v10 = sub_1D7A18C7C(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_1D79747D0();
      goto LABEL_7;
    }
    sub_1D7972240(v13, a3 & 1);
    unint64_t v19 = sub_1D7A18C7C(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      char v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
LABEL_13:
      sub_1D78A26EC(a2, (uint64_t)v21);
      return sub_1D7974EC8(v10, (uint64_t)v21, a1, v16);
    }
LABEL_15:
    uint64_t result = (_OWORD *)sub_1D7A9D4F8();
    __break(1u);
    return result;
  }
LABEL_7:
  char v16 = *v4;
  if ((v14 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v17 = (_OWORD *)(v16[7] + 32 * v10);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  return sub_1D7860E50(a1, v17);
}

_OWORD *sub_1D78A1D9C(_OWORD *a1, char a2, char a3)
{
  uint64_t v4 = (void **)v3;
  int v8 = (void *)*v3;
  unint64_t v10 = sub_1D7A18740(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_1D7972860();
      goto LABEL_7;
    }
    sub_1D796EEC8(v13, a3 & 1);
    unint64_t v19 = sub_1D7A18740(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      char v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)sub_1D7A9D4F8();
    __break(1u);
    return result;
  }
LABEL_7:
  char v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = (_OWORD *)(v16[7] + 32 * v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    return sub_1D7860E50(a1, v17);
  }
LABEL_13:
  return sub_1D7974F44(v10, a2, a1, v16);
}

char *sub_1D78A1EDC(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    BOOL v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)sub_1D7A9D008();
  __break(1u);
  return result;
}

char *sub_1D78A1FC8(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + a1 + 32);
    size_t v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  uint64_t result = (char *)sub_1D7A9D008();
  __break(1u);
  return result;
}

uint64_t sub_1D78A20B0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 56 * a1 + 32;
    unint64_t v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_1D7A9D008();
  __break(1u);
  return result;
}

uint64_t sub_1D78A21A8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_1D7A9D008();
  __break(1u);
  return result;
}

char *sub_1D78A229C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 4 * a1 + 32);
    size_t v6 = 4 * v4;
    BOOL v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)sub_1D7A9D008();
  __break(1u);
  return result;
}

uint64_t sub_1D78A2388(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA843038);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_1D7A9D008();
  __break(1u);
  return result;
}

uint64_t sub_1D78A2498(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = sub_1D7A9D008();
  __break(1u);
  return result;
}

uint64_t sub_1D78A25F4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 96 * a1 + 32;
    unint64_t v6 = a3 + 96 * v4;
    if (v5 >= v6 || v5 + 96 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_1D7A9D008();
  __break(1u);
  return result;
}

uint64_t sub_1D78A26EC(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1D78A2748(uint64_t a1)
{
  return a1;
}

uint64_t sub_1D78A279C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9118);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D78A2804()
{
  return swift_release();
}

uint64_t dispatch thunk of IdentityKey.getIdentityPrivateKey()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of IdentityKey.getIdentityPublicKey()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of IdentityKey.getIdentityPublicKeyData()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of IdentityKey.sign(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of IdentityKey.attestation(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of IdentityKey.attestationType()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of IdentityKey.persist()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of IdentityKey.supportAuthMethod()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of IdentityKey.authMethod()(uint64_t a1, uint64_t a2)
{
  BOOL v7 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(a2 + 72) + **(int **)(a2 + 72));
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *unint64_t v5 = v2;
  v5[1] = sub_1D786EE50;
  return v7(a1, a2);
}

uint64_t dispatch thunk of IdentityKey.signatureAlgorithm.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t sub_1D78A2A28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (swift_getEnumCaseMultiPayload() != 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 32))(a3, v3);
  }
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)(*(void *)(a1 + 24) - 8) + 32))(a2, v3, *(void *)(a1 + 24));
  return swift_willThrowTypedImpl();
}

uint64_t sub_1D78A2AF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1D7A9C4A8();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_1D7A9C498();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_1D7873DD0(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1D7A9C438();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

void runAsyncAndBlock<A>(file:function:line:_:)(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v45 = a6;
  uint64_t v46 = a7;
  uint64_t v47 = a9;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9978);
  MEMORY[0x1F4188790](v15 - 8, v16, v17, v18, v19, v20, v21, v22);
  uint64_t v24 = (char *)&v44 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_1D7A9C9A8();
  uint64_t v26 = *(void *)(v25 - 8);
  MEMORY[0x1F4188790](v25, v27, v28, v29, v30, v31, v32, v33);
  long long v35 = (char *)&v44 - v34;
  sub_1D78A2F74(a1, a2, a3, a4, a5);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a8 - 8) + 56))(v35, 1, 1, a8);
  uint64_t v36 = sub_1D78A493C();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v35, v25);
  dispatch_semaphore_t v37 = dispatch_semaphore_create(0);
  uint64_t v38 = sub_1D7A9C4A8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v24, 1, 1, v38);
  uint64_t v39 = (void *)swift_allocObject();
  v39[2] = 0;
  v39[3] = 0;
  uint64_t v40 = v45;
  v39[4] = a8;
  v39[5] = v40;
  v39[6] = v46;
  v39[7] = v36;
  _OWORD v39[8] = v37;
  swift_retain();
  swift_retain();
  uint64_t v41 = v37;
  sub_1D78A2AF8((uint64_t)v24, (uint64_t)&unk_1EA843078, (uint64_t)v39);
  swift_release();
  sub_1D7A9C8B8();
  uint64_t v48 = a8;
  uint64_t v42 = v36 + *(void *)(*MEMORY[0x1E4FBBAB0] + *(void *)v36 + 16);
  unint64_t v43 = (os_unfair_lock_s *)(v36 + ((*(unsigned int *)(*(void *)v36 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v43);
  sub_1D78A4A98(v42, v47);
  os_unfair_lock_unlock(v43);
  swift_release();
}

void sub_1D78A2F74(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_1D7A9B5F8();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10, v12, v13, v14, v15, v16, v17, v18);
  uint64_t v20 = (char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v21 = objc_msgSend(self, sel_standardUserDefaults);
  if (qword_1EBDF9690 != -1)
  {
    id v35 = v21;
    swift_once();
    id v21 = v35;
  }
  if (byte_1EBDFBE68 == 1)
  {
    id v35 = v21;
    uint64_t v22 = (void *)sub_1D7A9BF98();
    unsigned __int8 v23 = objc_msgSend(v35, sel_BOOLForKey_, v22);

    if (v23)
    {
      sub_1D7A9D078();
      if (v38 == 1)
      {
        if (qword_1EBDF9DC8 != -1) {
          swift_once();
        }
        uint64_t v24 = __swift_project_value_buffer(v10, (uint64_t)qword_1EBDFBE70);
        swift_beginAccess();
        (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v20, v24, v10);
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        uint64_t v25 = sub_1D7A9B5D8();
        os_log_type_t v26 = sub_1D7A9C768();
        int v27 = v26;
        if (os_log_type_enabled(v25, v26))
        {
          uint64_t v28 = swift_slowAlloc();
          int v34 = v27;
          uint64_t v29 = v28;
          id v35 = (id)swift_slowAlloc();
          id v37 = v35;
          *(_DWORD *)uint64_t v29 = 136315650;
          os_log_t v33 = v25;
          swift_bridgeObjectRetain();
          uint64_t v36 = sub_1D7923300(a3, a4, (uint64_t *)&v37);
          sub_1D7A9C9E8();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v29 + 12) = 2080;
          swift_bridgeObjectRetain();
          uint64_t v36 = sub_1D7923300(a1, a2, (uint64_t *)&v37);
          sub_1D7A9C9E8();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v29 + 22) = 2048;
          uint64_t v36 = a5;
          sub_1D7A9C9E8();
          os_log_t v30 = v33;
          _os_log_impl(&dword_1D7853000, v33, (os_log_type_t)v34, "CONCURRENCY ERROR: runAsyncAndBlock should not be invoked from a Swift Concurrency thread. Invoked by %s %s:%ld", (uint8_t *)v29, 0x20u);
          id v31 = v35;
          swift_arrayDestroy();
          MEMORY[0x1D947D740](v31, -1, -1);
          MEMORY[0x1D947D740](v29, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
        (*(void (**)(char *, uint64_t))(v11 + 8))(v20, v10);
      }
    }
  }
  else
  {
  }
}

uint64_t sub_1D78A3394(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[3] = a7;
  v8[4] = a8;
  v8[2] = a6;
  v8[5] = *(void *)(a8 - 8);
  uint64_t v10 = swift_task_alloc();
  v8[6] = v10;
  uint64_t v13 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  uint64_t v11 = (void *)swift_task_alloc();
  v8[7] = v11;
  void *v11 = v8;
  v11[1] = sub_1D78A34D0;
  return v13(v10);
}

uint64_t sub_1D78A34D0()
{
  swift_task_dealloc();
  return MEMORY[0x1F4188298](sub_1D78A35CC, 0, 0);
}

uint64_t sub_1D78A35CC()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[2];
  uint64_t v5 = swift_task_alloc();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v1;
  sub_1D7A9C9A8();
  uint64_t v6 = v4 + *(void *)(*MEMORY[0x1E4FBBAB0] + *(void *)v4 + 16);
  uint64_t v7 = (os_unfair_lock_s *)(v4 + ((*(unsigned int *)(*(void *)v4 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v7);
  sub_1D78A4D28(v6);
  os_unfair_lock_unlock(v7);
  swift_task_dealloc();
  sub_1D7A9C8C8();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1D78A36FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1D7A9C9A8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  uint64_t v7 = *(void *)(a3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, a3);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, a3);
}

uint64_t sub_1D78A37E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_1D7A9C9A8();
  MEMORY[0x1F4188790](v6, v7, v6, v8, v9, v10, v11, v12);
  uint64_t v14 = (char *)v18 - v13;
  (*(void (**)(char *, uint64_t))(v15 + 16))((char *)v18 - v13, a1);
  uint64_t v16 = *(void *)(a2 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, a2);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v16 + 32))(a3, v14, a2);
  }
  __break(1u);
  return result;
}

void runAsyncAndBlock<A>(timeout:file:function:line:_:)(double a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, char *a11)
{
  unint64_t v91 = a4;
  unint64_t v93 = a6;
  uint64_t v94 = a7;
  uint64_t v92 = a5;
  int v97 = a2;
  double v89 = a1;
  uint64_t v90 = a9;
  uint64_t v95 = a10;
  uint64_t v96 = a8;
  uint64_t v88 = sub_1D7A9B698();
  uint64_t v86 = *(void *)(v88 - 8);
  MEMORY[0x1F4188790](v88, v12, v13, v14, v15, v16, v17, v18);
  uint64_t v20 = (char **)((char *)&v84 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v87 = sub_1D7A9B738();
  uint64_t v85 = *(void *)(v87 - 8);
  uint64_t v28 = MEMORY[0x1F4188790](v87, v21, v22, v23, v24, v25, v26, v27);
  os_log_t v30 = (char *)&v84 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v28, v31, v32, v33, v34, v35, v36, v37);
  uint64_t v84 = (char *)&v84 - v38;
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9978);
  MEMORY[0x1F4188790](v39 - 8, v40, v41, v42, v43, v44, v45, v46);
  uint64_t v48 = (char *)&v84 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1EBDF9740);
  uint64_t v49 = sub_1D7A9D638();
  uint64_t v50 = sub_1D7A9C9A8();
  uint64_t v51 = *(void *)(v50 - 8);
  MEMORY[0x1F4188790](v50, v52, v53, v54, v55, v56, v57, v58);
  uint64_t v60 = (char *)&v84 - v59;
  sub_1D78A2F74(a3, v91, v92, v93, v94);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v60, 1, 1, v49);
  uint64_t v61 = sub_1D78A493C();
  (*(void (**)(char *, uint64_t))(v51 + 8))(v60, v50);
  dispatch_semaphore_t v62 = dispatch_semaphore_create(0);
  uint64_t v63 = sub_1D7A9C4A8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v63 - 8) + 56))(v48, 1, 1, v63);
  unint64_t v64 = (void *)swift_allocObject();
  v64[2] = 0;
  v64[3] = 0;
  uint64_t v65 = v96;
  v64[4] = a11;
  v64[5] = v65;
  v64[6] = v95;
  v64[7] = v61;
  v64[8] = v62;
  swift_retain();
  swift_retain();
  uint64_t v66 = v62;
  sub_1D78A2AF8((uint64_t)v48, (uint64_t)&unk_1EA843088, (uint64_t)v64);
  swift_release();
  if ((v97 & 1) == 0)
  {
    sub_1D7A9B728();
    if ((~*(void *)&v89 & 0x7FF0000000000000) != 0)
    {
      if (v89 > -9.22337204e18)
      {
        if (v89 < 9.22337204e18)
        {
          uint64_t v67 = v30;
          *uint64_t v20 = (uint64_t)v89;
          uint64_t v68 = v86;
          uint64_t v69 = v88;
          (*(void (**)(void *, void, uint64_t))(v86 + 104))(v20, *MEMORY[0x1E4FBCAE8], v88);
          uint64_t v70 = v84;
          MEMORY[0x1D947A4C0](v67, v20);
          (*(void (**)(void *, uint64_t))(v68 + 8))(v20, v69);
          uint64_t v71 = *(void (**)(char *, uint64_t))(v85 + 8);
          uint64_t v72 = v67;
          uint64_t v73 = v87;
          v71(v72, v87);
          LOBYTE(v69) = sub_1D7A9C8A8();
          uint64_t v74 = ((uint64_t (*)(char *, uint64_t))v71)(v70, v73);
          if (v69)
          {
            sub_1D7873F94();
            swift_allocError();
            swift_willThrow();
            swift_release();

            return;
          }
          goto LABEL_8;
        }
LABEL_12:
        __break(1u);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v74 = sub_1D7A9C8B8();
LABEL_8:
  MEMORY[0x1F4188790](v74, v75, v76, v77, v78, v79, v80, v81);
  *(&v84 - 2) = a11;
  uint64_t v82 = v61 + *(void *)(*MEMORY[0x1E4FBBAB0] + *(void *)v61 + 16);
  long long v83 = (os_unfair_lock_s *)(v61 + ((*(unsigned int *)(*(void *)v61 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v83);
  sub_1D78A4BE4(v82, v90);
  os_unfair_lock_unlock(v83);
  swift_release();
}

uint64_t sub_1D78A3E9C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[3] = a7;
  v8[4] = a8;
  v8[2] = a6;
  v8[5] = *(void *)(a8 - 8);
  uint64_t v10 = swift_task_alloc();
  v8[6] = v10;
  uint64_t v13 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  uint64_t v11 = (void *)swift_task_alloc();
  v8[7] = v11;
  void *v11 = v8;
  v11[1] = sub_1D78A3FD8;
  return v13(v10);
}

uint64_t sub_1D78A3FD8()
{
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1D78A4244;
  }
  else {
    uint64_t v2 = sub_1D78A40EC;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

uint64_t sub_1D78A40EC()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[2];
  uint64_t v5 = swift_task_alloc();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v1;
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1EBDF9740);
  sub_1D7A9D638();
  sub_1D7A9C9A8();
  uint64_t v6 = v4 + *(void *)(*MEMORY[0x1E4FBBAB0] + *(void *)v4 + 16);
  uint64_t v7 = (os_unfair_lock_s *)(v4 + ((*(unsigned int *)(*(void *)v4 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v7);
  sub_1D78A4C1C(v6);
  os_unfair_lock_unlock(v7);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_1D7A9C8C8();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1D78A4244()
{
  uint64_t v1 = (void *)v0[8];
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[2];
  uint64_t v4 = swift_task_alloc();
  *(void *)(v4 + 16) = v2;
  *(void *)(v4 + 24) = v1;
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1EBDF9740);
  sub_1D7A9D638();
  sub_1D7A9C9A8();
  uint64_t v5 = (void *)(v3 + *(void *)(*MEMORY[0x1E4FBBAB0] + *(void *)v3 + 16));
  uint64_t v6 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(void *)v3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v6);
  sub_1D78A4C00(v5);
  os_unfair_lock_unlock(v6);

  swift_task_dealloc();
  sub_1D7A9C8C8();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1D78A4384(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1EBDF9740);
  uint64_t v6 = sub_1D7A9D638();
  uint64_t v7 = sub_1D7A9C9A8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(a1, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(a1, a2, a3);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(a1, 0, 1, v6);
}

id sub_1D78A44A4(void *a1, void *a2)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1EBDF9740);
  uint64_t v4 = sub_1D7A9D638();
  uint64_t v5 = sub_1D7A9C9A8();
  (*(void (**)(void *, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  *a1 = a2;
  swift_storeEnumTagMultiPayload();
  (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(a1, 0, 1, v4);
  return a2;
}

uint64_t sub_1D78A4594@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1EBDF9740);
  uint64_t v4 = sub_1D7A9D638();
  uint64_t v5 = sub_1D7A9C9A8();
  MEMORY[0x1F4188790](v5, v6, v5, v7, v8, v9, v10, v11);
  uint64_t v13 = (char *)&v16 - v12;
  (*(void (**)(char *, uint64_t))(v14 + 16))((char *)&v16 - v12, a1);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v13, 1, v4);
  if (result != 1) {
    return sub_1D78A2A28(v4, (uint64_t)&v17, a2);
  }
  __break(1u);
  return result;
}

uint64_t sub_1D78A46EC@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t v4 = sub_1D7A9C578();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, 1, v4);
  *a2 = result != 1;
  return result;
}

uint64_t sub_1D78A4768(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_1D78A4844;
  return v6(a1);
}

uint64_t sub_1D78A4844()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1D78A493C()
{
  return sub_1D7A9CD58();
}

uint64_t sub_1D78A49BC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (int *)v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  void *v11 = v2;
  v11[1] = sub_1D786EC1C;
  return sub_1D78A3394(a1, v4, v5, v7, v8, v9, v10, v6);
}

uint64_t sub_1D78A4A98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1D78A37E4(a1, *(void *)(v2 + 16), a2);
}

uint64_t objectdestroyTm()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 72, 7);
}

uint64_t sub_1D78A4B08(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (int *)v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  void *v11 = v2;
  v11[1] = sub_1D7874050;
  return sub_1D78A3E9C(a1, v4, v5, v7, v8, v9, v10, v6);
}

uint64_t sub_1D78A4BE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1D78A4594(a1, a2);
}

id sub_1D78A4C00(void *a1)
{
  return sub_1D78A44A4(a1, *(void **)(v1 + 24));
}

uint64_t sub_1D78A4C1C(uint64_t a1)
{
  return sub_1D78A4384(a1, *(void *)(v1 + 24), *(void *)(v1 + 16));
}

uint64_t sub_1D78A4C38()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D78A4C70(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1D786EC1C;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1EA843090 + dword_1EA843090);
  return v6(a1, v4);
}

uint64_t sub_1D78A4D28(uint64_t a1)
{
  return sub_1D78A36FC(a1, *(void *)(v1 + 24), *(void *)(v1 + 16));
}

uint64_t sub_1D78A4D44@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = *a1;
  *(_DWORD *)((char *)a1 + ((*(unsigned int *)(v4 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v4 + *MEMORY[0x1E4FBBAB0]) - 8) + 16))(a2, v3);
}

BOOL static SESKeystore.SignatureOutputFormat.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t SESKeystore.SignatureOutputFormat.hash(into:)()
{
  return sub_1D7A9D5E8();
}

uint64_t SESKeystore.SignatureOutputFormat.hashValue.getter()
{
  return sub_1D7A9D628();
}

uint64_t SESKeystore.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t SESKeystore.init()()
{
  return v0;
}

void *sub_1D78A4E84()
{
  v98[4] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  MEMORY[0x1F4188790](v0, v1, v2, v3, v4, v5, v6, v7);
  uint64_t v9 = (char *)&v87 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DIPSignpost(0);
  MEMORY[0x1F4188790](v10 - 8, v11, v12, v13, v14, v15, v16, v17);
  uint64_t v19 = (char *)&v87 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_1D7A9B5F8();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v29 = MEMORY[0x1F4188790](v20, v22, v23, v24, v25, v26, v27, v28);
  uint64_t v88 = (char *)&v87 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = MEMORY[0x1F4188790](v29, v31, v32, v33, v34, v35, v36, v37);
  uint64_t v96 = (char *)&v87 - v39;
  MEMORY[0x1F4188790](v38, v40, v41, v42, v43, v44, v45, v46);
  uint64_t v48 = (char *)&v87 - v47;
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v49 = __swift_project_value_buffer(v20, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  uint64_t v50 = *(void (**)(char *, char *, uint64_t))(v21 + 16);
  uint64_t v92 = (void *)(v21 + 16);
  unint64_t v93 = (char *)v49;
  unint64_t v91 = v50;
  v50(v48, (char *)v49, v20);
  uint64_t v51 = sub_1D7A9B5D8();
  os_log_type_t v52 = sub_1D7A9C748();
  if (os_log_type_enabled(v51, v52))
  {
    uint64_t v53 = (uint8_t *)swift_slowAlloc();
    uint64_t v95 = v0;
    uint64_t v54 = v20;
    uint64_t v55 = v21;
    uint64_t v56 = v19;
    uint64_t v57 = v53;
    *(_WORD *)uint64_t v53 = 0;
    _os_log_impl(&dword_1D7853000, v51, v52, "SESKeystore createKey", v53, 2u);
    uint64_t v58 = v57;
    uint64_t v19 = v56;
    uint64_t v21 = v55;
    uint64_t v20 = v54;
    uint64_t v0 = v95;
    MEMORY[0x1D947D740](v58, -1, -1);
  }

  uint64_t v94 = *(void (**)(char *, uint64_t))(v21 + 8);
  uint64_t v95 = v21 + 8;
  v94(v48, v20);
  if (qword_1EA841578 != -1) {
    swift_once();
  }
  uint64_t v59 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA845DC0);
  sub_1D78912C4(v59, (uint64_t)v9);
  DIPSignpost.init(_:)(v9, (uint64_t)v19);
  v98[0] = 0;
  id v60 = (id)SESKeyCreate();
  id v61 = v98[0];
  id v62 = v98[0];
  id v63 = v62;
  if (!v60)
  {
    uint64_t v67 = v96;
    if (v62)
    {
      uint64_t v89 = 0;
      id v90 = v61;
      uint64_t v88 = (char *)0xF000000000000000;
      goto LABEL_12;
    }
LABEL_18:
    LOWORD(v98[0]) = 193;
    unint64_t v80 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    unint64_t v64 = (void *)swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000032, 0x80000001D7ABF790, (__int16 *)v98, 0, v80, 0xD000000000000054, 0x80000001D7ABF7D0, v81, 0x654B657461657263, 0xEF293A6C63612879, 70);
    swift_willThrow();
LABEL_19:

    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    sub_1D78AB48C((uint64_t)v19);
    LOWORD(v98[0]) = 0;
    id v82 = v64;
    unint64_t v83 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v64, 0, 0xE000000000000000, (__int16 *)v98, 0, v83, 0xD000000000000054, 0x80000001D7ABF7D0, v84, 0x654B657461657263, 0xEF293A6C63612879, 76);
    swift_willThrow();

    return v64;
  }
  id v90 = v61;
  unint64_t v64 = (void *)sub_1D7A9B028();
  unint64_t v66 = v65;

  if (v63)
  {
    uint64_t v88 = (char *)v66;
    uint64_t v89 = (uint64_t)v64;
    uint64_t v67 = v96;
LABEL_12:
    v91(v67, v93, v20);
    id v68 = v63;
    uint64_t v69 = sub_1D7A9B5D8();
    os_log_type_t v70 = sub_1D7A9C758();
    if (os_log_type_enabled(v69, v70))
    {
      uint64_t v71 = (uint8_t *)swift_slowAlloc();
      uint64_t v92 = (void *)swift_slowAlloc();
      v98[0] = v92;
      unint64_t v93 = v19;
      *(_DWORD *)uint64_t v71 = 136446210;
      unint64_t v91 = (void (*)(char *, char *, uint64_t))(v71 + 4);
      id v72 = objc_msgSend(v68, sel_debugDescription);
      uint64_t v73 = sub_1D7A9BFC8();
      unint64_t v75 = v74;

      uint64_t v97 = sub_1D7923300(v73, v75, (uint64_t *)v98);
      uint64_t v19 = v93;
      sub_1D7A9C9E8();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1D7853000, v69, v70, "Error from SESKeyCreate: %{public}s", v71, 0xCu);
      uint64_t v76 = v92;
      swift_arrayDestroy();
      MEMORY[0x1D947D740](v76, -1, -1);
      MEMORY[0x1D947D740](v71, -1, -1);

      uint64_t v77 = v96;
    }
    else
    {

      uint64_t v77 = v67;
    }
    v94(v77, v20);
    LOWORD(v98[0]) = 193;
    id v63 = v68;
    unint64_t v78 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    unint64_t v64 = (void *)swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v90, 0xD000000000000017, 0x80000001D7ABF830, (__int16 *)v98, 0, v78, 0xD000000000000054, 0x80000001D7ABF7D0, v79, 0x654B657461657263, 0xEF293A6C63612879, 67);
    swift_willThrow();

    sub_1D7871BDC(v89, (unint64_t)v88);
    goto LABEL_19;
  }
  if (v66 >> 60 == 15) {
    goto LABEL_18;
  }
  uint64_t v86 = (uint64_t)v88;
  v91(v88, v93, v20);
  sub_1D786E9D8((uint64_t)v64, v66);
  sub_1D79246F8(v86, (uint64_t)v64, v66);
  sub_1D7871BDC((uint64_t)v64, v66);
  v94((char *)v86, v20);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  sub_1D78AB48C((uint64_t)v19);
  return v64;
}

uint64_t sub_1D78A56DC(uint64_t a1, unint64_t a2)
{
  return sub_1D78A6604(a1, a2, 24, 0xD000000000000016);
}

id sub_1D78A56FC(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, unsigned __int8 *a7, void *a8)
{
  uint64_t v176 = a5;
  id v175 = a8;
  unint64_t v180 = a4;
  char v181 = (void *)a6;
  uint64_t v179 = a3;
  v184[5] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v161 = sub_1D7A9BB98();
  uint64_t v160 = *(void *)(v161 - 8);
  MEMORY[0x1F4188790](v161, v11, v12, v13, v14, v15, v16, v17);
  BOOL v171 = (char *)&v156 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v168 = type metadata accessor for DIPSignpost.Config(0);
  MEMORY[0x1F4188790](v168, v19, v20, v21, v22, v23, v24, v25);
  char v169 = (char *)&v156 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for DIPSignpost(0);
  MEMORY[0x1F4188790](v27 - 8, v28, v29, v30, v31, v32, v33, v34);
  uint64_t v178 = (uint64_t)&v156 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v182 = sub_1D7A9B5F8();
  uint64_t v36 = *(void *)(v182 - 8);
  uint64_t v44 = MEMORY[0x1F4188790](v182, v37, v38, v39, v40, v41, v42, v43);
  uint64_t v46 = (char *)&v156 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = MEMORY[0x1F4188790](v44, v47, v48, v49, v50, v51, v52, v53);
  uint64_t v166 = (char *)&v156 - v55;
  MEMORY[0x1F4188790](v54, v56, v57, v58, v59, v60, v61, v62);
  unint64_t v64 = (char *)&v156 - v63;
  int v162 = *a7;
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v65 = v182;
  uint64_t v66 = __swift_project_value_buffer(v182, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  uint64_t v67 = *(void (**)(char *, uint64_t, uint64_t))(v36 + 16);
  uint64_t v165 = v66;
  uint64_t v164 = v36 + 16;
  unint64_t v163 = v67;
  v67(v64, v66, v65);
  sub_1D7860790(a1, a2);
  uint64_t v68 = v179;
  unint64_t v69 = v180;
  sub_1D7860790(v179, v180);
  uint64_t v70 = v176;
  uint64_t v174 = v36;
  unint64_t v71 = (unint64_t)v181;
  sub_1D7860790(v176, (unint64_t)v181);
  id v72 = v175;
  unint64_t v173 = a2;
  sub_1D7860790(a1, a2);
  sub_1D7860790(v68, v69);
  sub_1D7860790(v70, v71);
  id v73 = v72;
  unint64_t v74 = sub_1D7A9B5D8();
  os_log_type_t v75 = sub_1D7A9C748();
  int v76 = v75;
  uint64_t v167 = v74;
  BOOL v77 = os_log_type_enabled(v74, v75);
  uint64_t v172 = v46;
  uint64_t v170 = a1;
  if (v77)
  {
    uint64_t v78 = swift_slowAlloc();
    uint64_t v159 = (void *)swift_slowAlloc();
    v184[0] = v159;
    *(_DWORD *)uint64_t v78 = 136315906;
    int v158 = v76;
    unint64_t v79 = v173;
    unint64_t v80 = v177;
    uint64_t v81 = sub_1D79F1750(a1, v173);
    id v157 = v73;
    uint64_t v177 = v80;
    uint64_t v183 = v81;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF7900);
    sub_1D78AC5E4();
    uint64_t v82 = sub_1D7A9BF38();
    uint64_t v156 = v64;
    unint64_t v84 = v83;
    swift_bridgeObjectRelease();
    uint64_t v183 = sub_1D7923300(v82, v84, (uint64_t *)v184);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease();
    sub_1D78607E8(a1, v79);
    sub_1D78607E8(a1, v79);
    *(_WORD *)(v78 + 12) = 2080;
    uint64_t v85 = v179;
    unint64_t v86 = v180;
    uint64_t v87 = v177;
    uint64_t v88 = sub_1D79F1750(v179, v180);
    uint64_t v177 = v87;
    uint64_t v183 = v88;
    uint64_t v89 = sub_1D7A9BF38();
    unint64_t v91 = v90;
    swift_bridgeObjectRelease();
    uint64_t v183 = sub_1D7923300(v89, v91, (uint64_t *)v184);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease();
    sub_1D78607E8(v85, v86);
    sub_1D78607E8(v85, v86);
    *(_WORD *)(v78 + 22) = 2080;
    uint64_t v93 = v176;
    uint64_t v92 = v177;
    uint64_t v94 = sub_1D79F1750(v176, (unint64_t)v181);
    uint64_t v177 = v92;
    uint64_t v183 = v94;
    uint64_t v95 = sub_1D7A9BF38();
    unint64_t v97 = v96;
    swift_bridgeObjectRelease();
    uint64_t v183 = sub_1D7923300(v95, v97, (uint64_t *)v184);
    uint64_t v98 = v174;
    sub_1D7A9C9E8();
    unint64_t v99 = (unint64_t)v181;
    swift_bridgeObjectRelease();
    sub_1D78607E8(v93, v99);
    sub_1D78607E8(v93, v99);
    *(_WORD *)(v78 + 32) = 2080;
    id v100 = v175;
    uint64_t v183 = (uint64_t)v175;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8430A0);
    uint64_t v101 = sub_1D7A9C998();
    uint64_t v183 = sub_1D7923300(v101, v102, (uint64_t *)v184);
    sub_1D7A9C9E8();
    id v73 = v157;

    swift_bridgeObjectRelease();
    unint64_t v103 = v167;
    _os_log_impl(&dword_1D7853000, v167, (os_log_type_t)v158, "SESKeystore signDigest digest = %s, keyBlob = %s, externalizedLAContext = %s, seAccessEndpoint = %s", (uint8_t *)v78, 0x2Au);
    char v104 = v159;
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v104, -1, -1);
    MEMORY[0x1D947D740](v78, -1, -1);

    uint64_t v167 = *(NSObject **)(v98 + 8);
    ((void (*)(char *, uint64_t))v167)(v156, v182);
  }
  else
  {
    id v100 = v175;
    unint64_t v105 = v173;
    sub_1D78607E8(a1, v173);
    sub_1D78607E8(a1, v105);
    uint64_t v107 = v179;
    unint64_t v106 = v180;
    sub_1D78607E8(v179, v180);
    sub_1D78607E8(v107, v106);
    uint64_t v108 = v176;
    unint64_t v109 = (unint64_t)v181;
    sub_1D78607E8(v176, (unint64_t)v181);
    sub_1D78607E8(v108, v109);

    uint64_t v167 = *(NSObject **)(v174 + 8);
    ((void (*)(char *, uint64_t))v167)(v64, v182);
  }
  if (qword_1EA841580 != -1) {
    swift_once();
  }
  uint64_t v110 = __swift_project_value_buffer(v168, (uint64_t)qword_1EA845DD8);
  unint64_t v111 = v169;
  sub_1D78912C4(v110, (uint64_t)v169);
  DIPSignpost.init(_:)(v111, v178);
  uint64_t v112 = (void *)*MEMORY[0x1E4F3BA38];
  if (v100)
  {
    id v113 = v73;
    id v114 = v112;
    id v115 = (void *)sub_1D7A9AFF8();
    uint64_t v116 = (void *)sub_1D7A9AFF8();
    uint64_t v117 = (void *)sub_1D7A9AFF8();
    v184[0] = 0;
    id v118 = (id)SESKeySignPrecomputedDigestWithListenerEndpoint();

    id v119 = v184[0];
    if (v118)
    {
      uint64_t v120 = (void *)sub_1D7A9B028();
      unint64_t v122 = v121;
    }
    else
    {

      uint64_t v120 = 0;
      unint64_t v122 = 0xF000000000000000;
    }
    uint64_t v128 = v177;
    uint64_t v131 = (uint64_t)v172;
    uint64_t v129 = v171;
    if (v119)
    {
LABEL_15:
      uint64_t v132 = v166;
      v163(v166, v165, v182);
      id v133 = v119;
      uint64_t v134 = sub_1D7A9B5D8();
      os_log_type_t v135 = sub_1D7A9C758();
      if (os_log_type_enabled(v134, v135))
      {
        unint64_t v136 = (uint8_t *)swift_slowAlloc();
        char v137 = (void *)swift_slowAlloc();
        char v181 = v120;
        uint64_t v179 = (uint64_t)v137;
        v184[0] = v137;
        unint64_t v180 = v122;
        *(_DWORD *)unint64_t v136 = 136446210;
        uint64_t v177 = v136 + 4;
        id v138 = objc_msgSend(v133, sel_debugDescription);
        id v139 = v119;
        uint64_t v140 = sub_1D7A9BFC8();
        unint64_t v142 = v141;

        uint64_t v143 = v140;
        id v119 = v139;
        uint64_t v183 = sub_1D7923300(v143, v142, (uint64_t *)v184);
        unint64_t v122 = v180;
        sub_1D7A9C9E8();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1D7853000, v134, v135, "Error from SESKeySignPrecomputedDigest: %{public}s", v136, 0xCu);
        uint64_t v144 = v179;
        swift_arrayDestroy();
        uint64_t v120 = v181;
        MEMORY[0x1D947D740](v144, -1, -1);
        MEMORY[0x1D947D740](v136, -1, -1);

        uint64_t v145 = v166;
      }
      else
      {

        uint64_t v145 = v132;
      }
      ((void (*)(char *, uint64_t))v167)(v145, v182);
      LOWORD(v184[0]) = 194;
      id v146 = v133;
      unint64_t v147 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v119, 0xD000000000000026, 0x80000001D7ABF8F0, (__int16 *)v184, 0, v147, 0xD000000000000054, 0x80000001D7ABF7D0, v148, 0xD00000000000004ALL, 0x80000001D7ABF8A0, 111);
      swift_willThrow();
      sub_1D7871BDC((uint64_t)v120, v122);

      goto LABEL_27;
    }
  }
  else
  {
    id v123 = v112;
    uint64_t v124 = (void *)sub_1D7A9AFF8();
    uint64_t v125 = (void *)sub_1D7A9AFF8();
    uint64_t v126 = (void *)sub_1D7A9AFF8();
    v184[0] = 0;
    id v127 = (id)SESKeySignPrecomputedDigest();

    uint64_t v128 = v177;
    uint64_t v129 = v171;
    id v119 = v184[0];
    if (v127)
    {
      uint64_t v120 = (void *)sub_1D7A9B028();
      unint64_t v122 = v130;
    }
    else
    {
      uint64_t v120 = 0;
      unint64_t v122 = 0xF000000000000000;
    }
    uint64_t v131 = (uint64_t)v172;
    if (v119) {
      goto LABEL_15;
    }
  }
  if (v122 >> 60 != 15)
  {
    if (v162)
    {
      v163((char *)v131, v165, v182);
      sub_1D786E9D8((uint64_t)v120, v122);
      sub_1D7924728(v131, (uint64_t)v120, v122);
      id v119 = v120;
    }
    else
    {
      v184[0] = v120;
      v184[1] = (id)v122;
      sub_1D7860790((uint64_t)v120, v122);
      sub_1D7885ADC();
      sub_1D7A9BB68();
      if (v128)
      {
        sub_1D7871BDC((uint64_t)v120, v122);
        goto LABEL_27;
      }
      id v119 = (id)sub_1D7A9BB78();
      unint64_t v154 = v153;
      (*(void (**)(char *, uint64_t))(v160 + 8))(v129, v161);
      v163((char *)v131, v165, v182);
      sub_1D7860790((uint64_t)v119, v154);
      sub_1D7924710(v131, (uint64_t)v119, v154);
      sub_1D78607E8((uint64_t)v119, v154);
    }
    sub_1D7871BDC((uint64_t)v120, v122);
    ((void (*)(uint64_t, uint64_t))v167)(v131, v182);
    uint64_t v155 = v178;
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    sub_1D78AB48C(v155);
    return v119;
  }
  LOWORD(v184[0]) = 194;
  unint64_t v149 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
  sub_1D7860544();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000042, 0x80000001D7ABF850, (__int16 *)v184, 0, v149, 0xD000000000000054, 0x80000001D7ABF7D0, v150, 0xD00000000000004ALL, 0x80000001D7ABF8A0, 114);
  swift_willThrow();
LABEL_27:
  uint64_t v151 = v178;
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  sub_1D78AB48C(v151);
  return v119;
}

uint64_t sub_1D78A65C4(uint64_t a1, unint64_t a2)
{
  return sub_1D78A6604(a1, a2, 44, 0xD00000000000002ALL);
}

uint64_t sub_1D78A65E4(uint64_t a1, unint64_t a2)
{
  return sub_1D78A6604(a1, a2, 44, 0xD00000000000002ALL);
}

uint64_t sub_1D78A6604(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

const char *sub_1D78A66DC(char *a1, char *a2)
{
  uint64_t v85 = a1;
  unint64_t v86 = a2;
  v88[4] = *(id *)MEMORY[0x1E4F143B8];
  unint64_t v83 = type metadata accessor for DIPSignpost.Config(0);
  MEMORY[0x1F4188790](v83, v2, v3, v4, v5, v6, v7, v8);
  unint64_t v84 = (char *)v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DIPSignpost(0);
  MEMORY[0x1F4188790](v10 - 8, v11, v12, v13, v14, v15, v16, v17);
  uint64_t v19 = (char *)v78 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_1D7A9B5F8();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v29 = MEMORY[0x1F4188790](v20, v22, v23, v24, v25, v26, v27, v28);
  uint64_t v31 = (char *)v78 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v29, v32, v33, v34, v35, v36, v37, v38);
  uint64_t v40 = (char *)v78 - v39;
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v41 = __swift_project_value_buffer(v20, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  unint64_t v80 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  uint64_t v81 = v41;
  v80(v40, v41, v20);
  uint64_t v42 = sub_1D7A9B5D8();
  os_log_type_t v43 = sub_1D7A9C748();
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v44 = v31;
    uint64_t v45 = v20;
    uint64_t v46 = v21;
    uint64_t v47 = v19;
    uint64_t v48 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v48 = 0;
    _os_log_impl(&dword_1D7853000, v42, v43, "SESKeystore getPublicKey", v48, 2u);
    uint64_t v49 = v48;
    uint64_t v19 = v47;
    uint64_t v21 = v46;
    uint64_t v20 = v45;
    uint64_t v31 = v44;
    MEMORY[0x1D947D740](v49, -1, -1);
  }

  uint64_t v50 = *(void (**)(char *, uint64_t))(v21 + 8);
  uint64_t v82 = v21 + 8;
  v50(v40, v20);
  if (qword_1EA841588 != -1) {
    swift_once();
  }
  uint64_t v51 = __swift_project_value_buffer(v83, (uint64_t)qword_1EA845DF0);
  uint64_t v52 = v84;
  sub_1D78912C4(v51, (uint64_t)v84);
  DIPSignpost.init(_:)(v52, (uint64_t)v19);
  uint64_t v53 = (void *)sub_1D7A9AFF8();
  v88[0] = 0;
  id v54 = (id)SESKeyPublicKey();

  uint64_t v55 = (const char *)v88[0];
  id v56 = v88[0];
  id v57 = v56;
  if (!v54)
  {
    if (!v56) {
      goto LABEL_17;
    }
    unint64_t v86 = (char *)v55;
    uint64_t v55 = 0;
    unint64_t v59 = 0xF000000000000000;
LABEL_13:
    v80(v31, v81, v20);
    id v60 = v57;
    uint64_t v61 = sub_1D7A9B5D8();
    uint64_t v62 = v31;
    os_log_type_t v63 = sub_1D7A9C758();
    if (os_log_type_enabled(v61, v63))
    {
      uint64_t v81 = (uint64_t)v62;
      uint64_t v64 = swift_slowAlloc();
      unint64_t v83 = v59;
      uint64_t v65 = (uint8_t *)v64;
      unint64_t v79 = (void *)swift_slowAlloc();
      v88[0] = v79;
      uint64_t v85 = v19;
      *(_DWORD *)uint64_t v65 = 136315138;
      v78[1] = v65 + 4;
      id v66 = objc_msgSend(v60, sel_localizedDescription);
      uint64_t v67 = sub_1D7A9BFC8();
      unint64_t v80 = (void (*)(char *, uint64_t, uint64_t))v50;
      uint64_t v68 = v67;
      unint64_t v84 = v55;
      unint64_t v70 = v69;

      uint64_t v87 = sub_1D7923300(v68, v70, (uint64_t *)v88);
      uint64_t v19 = v85;
      sub_1D7A9C9E8();

      uint64_t v55 = v84;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1D7853000, v61, v63, "Error from SESKeyPublicKey: %s", v65, 0xCu);
      unint64_t v71 = v79;
      swift_arrayDestroy();
      MEMORY[0x1D947D740](v71, -1, -1);
      id v72 = v65;
      unint64_t v59 = v83;
      MEMORY[0x1D947D740](v72, -1, -1);

      ((void (*)(uint64_t, uint64_t))v80)(v81, v20);
    }
    else
    {

      v50(v62, v20);
    }
    LOWORD(v88[0]) = 196;
    id v57 = v60;
    unint64_t v73 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v86, 0xD00000000000001ALL, 0x80000001D7ABF970, (__int16 *)v88, 0, v73, 0xD000000000000054, 0x80000001D7ABF7D0, v74, 0xD000000000000011, 0x80000001D7ABF950, 147);
    swift_willThrow();

    sub_1D7871BDC((uint64_t)v55, v59);
    goto LABEL_18;
  }
  unint64_t v86 = (char *)v55;
  uint64_t v55 = (const char *)sub_1D7A9B028();
  unint64_t v59 = v58;

  if (v57) {
    goto LABEL_13;
  }
  if (v59 >> 60 == 15)
  {
LABEL_17:
    LOWORD(v88[0]) = 196;
    unint64_t v75 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000029, 0x80000001D7ABF920, (__int16 *)v88, 0, v75, 0xD000000000000054, 0x80000001D7ABF7D0, v76, 0xD000000000000011, 0x80000001D7ABF950, 150);
    swift_willThrow();
LABEL_18:

    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    sub_1D78AB48C((uint64_t)v19);
    return v55;
  }
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  sub_1D78AB48C((uint64_t)v19);
  return v55;
}

uint64_t sub_1D78A6DF0()
{
  v81[4] = *(id *)MEMORY[0x1E4F143B8];
  id v78 = (id)type metadata accessor for DIPSignpost.Config(0);
  MEMORY[0x1F4188790](v78, v0, v1, v2, v3, v4, v5, v6);
  unint64_t v79 = (char *)v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DIPSignpost(0);
  MEMORY[0x1F4188790](v8 - 8, v9, v10, v11, v12, v13, v14, v15);
  uint64_t v17 = (char *)v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_1D7A9B5F8();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v27 = MEMORY[0x1F4188790](v18, v20, v21, v22, v23, v24, v25, v26);
  uint64_t v29 = (char *)v71 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v27, v30, v31, v32, v33, v34, v35, v36);
  uint64_t v38 = (char *)v71 - v37;
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v39 = __swift_project_value_buffer(v18, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  uint64_t v74 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  uint64_t v75 = v39;
  v74(v38, v39, v18);
  uint64_t v40 = sub_1D7A9B5D8();
  os_log_type_t v41 = sub_1D7A9C748();
  if (os_log_type_enabled(v40, v41))
  {
    uint64_t v42 = (uint8_t *)swift_slowAlloc();
    BOOL v77 = v29;
    os_log_type_t v43 = v17;
    uint64_t v44 = v42;
    *(_WORD *)uint64_t v42 = 0;
    _os_log_impl(&dword_1D7853000, v40, v41, "SESKeystore getCASDCertificate", v42, 2u);
    uint64_t v45 = v44;
    uint64_t v17 = v43;
    uint64_t v29 = v77;
    MEMORY[0x1D947D740](v45, -1, -1);
  }

  uint64_t v47 = *(void (**)(char *, uint64_t))(v19 + 8);
  uint64_t v46 = v19 + 8;
  uint64_t v76 = v47;
  v47(v38, v18);
  if (qword_1EA841590 != -1) {
    swift_once();
  }
  uint64_t v48 = __swift_project_value_buffer((uint64_t)v78, (uint64_t)qword_1EA845E08);
  uint64_t v49 = v79;
  sub_1D78912C4(v48, (uint64_t)v79);
  DIPSignpost.init(_:)(v49, (uint64_t)v17);
  v81[0] = 0;
  id v50 = (id)SESKeyGetPTAttestationCASD();
  id v78 = v81[0];
  id v51 = v81[0];
  id v52 = v51;
  if (v50)
  {
    unint64_t v79 = (const char *)sub_1D7A9B028();
    unint64_t v54 = v53;

    if (v52)
    {
      unint64_t v72 = v54;
      unint64_t v73 = v17;
LABEL_12:
      v74(v29, v75, v18);
      id v55 = v52;
      id v56 = sub_1D7A9B5D8();
      id v57 = v29;
      os_log_type_t v58 = sub_1D7A9C758();
      if (os_log_type_enabled(v56, v58))
      {
        uint64_t v59 = swift_slowAlloc();
        uint64_t v75 = v46;
        id v60 = (uint8_t *)v59;
        uint64_t v74 = (void (*)(char *, uint64_t, uint64_t))swift_slowAlloc();
        v81[0] = v74;
        BOOL v77 = v57;
        *(_DWORD *)id v60 = 136315138;
        v71[1] = v60 + 4;
        id v61 = objc_msgSend(v55, sel_localizedDescription);
        uint64_t v62 = sub_1D7A9BFC8();
        unint64_t v64 = v63;

        uint64_t v80 = sub_1D7923300(v62, v64, (uint64_t *)v81);
        sub_1D7A9C9E8();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1D7853000, v56, v58, "Error from getCASDCertificate: %s", v60, 0xCu);
        uint64_t v65 = v74;
        swift_arrayDestroy();
        MEMORY[0x1D947D740](v65, -1, -1);
        MEMORY[0x1D947D740](v60, -1, -1);

        v76(v77, v18);
      }
      else
      {

        v76(v57, v18);
      }
      LOWORD(v81[0]) = 198;
      id v52 = v55;
      unint64_t v66 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v78, 0xD00000000000001DLL, 0x80000001D7ABF9B0, (__int16 *)v81, 0, v66, 0xD000000000000054, 0x80000001D7ABF7D0, v67, 0xD000000000000014, 0x80000001D7ABF990, 171);
      swift_willThrow();

      sub_1D7871BDC((uint64_t)v79, v72);
      uint64_t v17 = v73;
      goto LABEL_18;
    }
    if (v54 >> 60 != 15)
    {
      DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
      sub_1D78AB48C((uint64_t)v17);
      return (uint64_t)v79;
    }
  }
  else if (v51)
  {
    unint64_t v79 = 0;
    unint64_t v72 = 0xF000000000000000;
    unint64_t v73 = v17;
    goto LABEL_12;
  }
  LOWORD(v81[0]) = 198;
  unint64_t v68 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
  sub_1D7860544();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000029, 0x80000001D7ABF920, (__int16 *)v81, 0, v68, 0xD000000000000054, 0x80000001D7ABF7D0, v69, 0xD000000000000014, 0x80000001D7ABF990, 174);
  swift_willThrow();
LABEL_18:

  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  sub_1D78AB48C((uint64_t)v17);
  return (uint64_t)v79;
}

const char *sub_1D78A74EC(char *a1, char *a2)
{
  uint64_t v85 = a1;
  unint64_t v86 = a2;
  v88[4] = *(id *)MEMORY[0x1E4F143B8];
  unint64_t v83 = type metadata accessor for DIPSignpost.Config(0);
  MEMORY[0x1F4188790](v83, v2, v3, v4, v5, v6, v7, v8);
  unint64_t v84 = (char *)v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DIPSignpost(0);
  MEMORY[0x1F4188790](v10 - 8, v11, v12, v13, v14, v15, v16, v17);
  uint64_t v19 = (char *)v78 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_1D7A9B5F8();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v29 = MEMORY[0x1F4188790](v20, v22, v23, v24, v25, v26, v27, v28);
  uint64_t v31 = (char *)v78 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v29, v32, v33, v34, v35, v36, v37, v38);
  uint64_t v40 = (char *)v78 - v39;
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v41 = __swift_project_value_buffer(v20, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  uint64_t v80 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  uint64_t v81 = v41;
  v80(v40, v41, v20);
  uint64_t v42 = sub_1D7A9B5D8();
  os_log_type_t v43 = sub_1D7A9C748();
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v44 = v31;
    uint64_t v45 = v20;
    uint64_t v46 = v21;
    uint64_t v47 = v19;
    uint64_t v48 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v48 = 0;
    _os_log_impl(&dword_1D7853000, v42, v43, "SESKeystore getACLConstraints", v48, 2u);
    uint64_t v49 = v48;
    uint64_t v19 = v47;
    uint64_t v21 = v46;
    uint64_t v20 = v45;
    uint64_t v31 = v44;
    MEMORY[0x1D947D740](v49, -1, -1);
  }

  id v50 = *(void (**)(char *, uint64_t))(v21 + 8);
  uint64_t v82 = v21 + 8;
  v50(v40, v20);
  if (qword_1EA841598 != -1) {
    swift_once();
  }
  uint64_t v51 = __swift_project_value_buffer(v83, (uint64_t)qword_1EA845E20);
  id v52 = v84;
  sub_1D78912C4(v51, (uint64_t)v84);
  DIPSignpost.init(_:)(v52, (uint64_t)v19);
  unint64_t v53 = (void *)sub_1D7A9AFF8();
  v88[0] = 0;
  id v54 = (id)SESKeyGetAccessControlConstraints();

  id v55 = (const char *)v88[0];
  id v56 = v88[0];
  id v57 = v56;
  if (!v54)
  {
    if (!v56) {
      goto LABEL_17;
    }
    unint64_t v86 = (char *)v55;
    id v55 = 0;
    unint64_t v59 = 0xF000000000000000;
LABEL_13:
    v80(v31, v81, v20);
    id v60 = v57;
    id v61 = sub_1D7A9B5D8();
    uint64_t v62 = v31;
    os_log_type_t v63 = sub_1D7A9C758();
    if (os_log_type_enabled(v61, v63))
    {
      uint64_t v81 = (uint64_t)v62;
      uint64_t v64 = swift_slowAlloc();
      unint64_t v83 = v59;
      uint64_t v65 = (uint8_t *)v64;
      unint64_t v79 = (void *)swift_slowAlloc();
      v88[0] = v79;
      uint64_t v85 = v19;
      *(_DWORD *)uint64_t v65 = 136315138;
      v78[1] = v65 + 4;
      id v66 = objc_msgSend(v60, sel_localizedDescription);
      uint64_t v67 = sub_1D7A9BFC8();
      uint64_t v80 = (void (*)(char *, uint64_t, uint64_t))v50;
      uint64_t v68 = v67;
      unint64_t v84 = v55;
      unint64_t v70 = v69;

      uint64_t v87 = sub_1D7923300(v68, v70, (uint64_t *)v88);
      uint64_t v19 = v85;
      sub_1D7A9C9E8();

      id v55 = v84;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1D7853000, v61, v63, "Error form SESKeyGetAccessControlConstraints: %s", v65, 0xCu);
      unint64_t v71 = v79;
      swift_arrayDestroy();
      MEMORY[0x1D947D740](v71, -1, -1);
      unint64_t v72 = v65;
      unint64_t v59 = v83;
      MEMORY[0x1D947D740](v72, -1, -1);

      ((void (*)(uint64_t, uint64_t))v80)(v81, v20);
    }
    else
    {

      v50(v62, v20);
    }
    LOWORD(v88[0]) = 199;
    id v57 = v60;
    unint64_t v73 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v86, 0xD00000000000002CLL, 0x80000001D7ABFA20, (__int16 *)v88, 0, v73, 0xD000000000000054, 0x80000001D7ABF7D0, v74, 0xD000000000000016, 0x80000001D7ABFA00, 196);
    swift_willThrow();

    sub_1D7871BDC((uint64_t)v55, v59);
    goto LABEL_18;
  }
  unint64_t v86 = (char *)v55;
  id v55 = (const char *)sub_1D7A9B028();
  unint64_t v59 = v58;

  if (v57) {
    goto LABEL_13;
  }
  if (v59 >> 60 == 15)
  {
LABEL_17:
    LOWORD(v88[0]) = 199;
    unint64_t v75 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000029, 0x80000001D7ABF9D0, (__int16 *)v88, 0, v75, 0xD000000000000054, 0x80000001D7ABF7D0, v76, 0xD000000000000016, 0x80000001D7ABFA00, 199);
    swift_willThrow();
LABEL_18:

    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    sub_1D78AB48C((uint64_t)v19);
    return v55;
  }
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  sub_1D78AB48C((uint64_t)v19);
  return v55;
}

void *sub_1D78A7BFC(uint64_t a1, uint8_t *a2, uint8_t *a3, void *a4, uint64_t a5)
{
  unint64_t v111 = a3;
  uint64_t v112 = a4;
  uint64_t v109 = a1;
  uint64_t v110 = a2;
  v117[4] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v6 = type metadata accessor for DIPSignpost.Config(0);
  MEMORY[0x1F4188790](v6, v7, v8, v9, v10, v11, v12, v13);
  uint64_t v15 = (char *)&v102 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DIPSignpost(0);
  MEMORY[0x1F4188790](v16 - 8, v17, v18, v19, v20, v21, v22, v23);
  uint64_t v25 = (char *)&v102 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_1D7A9B5F8();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v35 = MEMORY[0x1F4188790](v26, v28, v29, v30, v31, v32, v33, v34);
  id v113 = (char *)&v102 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v35, v37, v38, v39, v40, v41, v42, v43);
  uint64_t v45 = (char *)&v102 - v44;
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v46 = __swift_project_value_buffer(v26, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  uint64_t v47 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 16);
  uint64_t v104 = v27 + 16;
  uint64_t v105 = v46;
  unint64_t v103 = v47;
  v47(v45, v46, v26);
  uint64_t v48 = sub_1D7A9B5D8();
  os_log_type_t v49 = sub_1D7A9C748();
  BOOL v50 = os_log_type_enabled(v48, v49);
  uint64_t v114 = v26;
  if (v50)
  {
    uint64_t v51 = v15;
    uint64_t v52 = v6;
    unint64_t v53 = v25;
    uint64_t v54 = a5;
    uint64_t v55 = v27;
    id v56 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v56 = 0;
    _os_log_impl(&dword_1D7853000, v48, v49, "SESKeystore getAttestation", v56, 2u);
    id v57 = v56;
    uint64_t v27 = v55;
    a5 = v54;
    uint64_t v25 = v53;
    uint64_t v6 = v52;
    uint64_t v15 = v51;
    uint64_t v26 = v114;
    MEMORY[0x1D947D740](v57, -1, -1);
  }

  unint64_t v59 = *(void (**)(char *, uint64_t))(v27 + 8);
  uint64_t v58 = v27 + 8;
  unint64_t v106 = v59;
  v59(v45, v26);
  if (qword_1EA8415A0 != -1) {
    swift_once();
  }
  uint64_t v107 = v58;
  uint64_t v60 = __swift_project_value_buffer(v6, (uint64_t)qword_1EA845E38);
  sub_1D78912C4(v60, (uint64_t)v15);
  DIPSignpost.init(_:)(v15, (uint64_t)v25);
  int64_t v61 = *(void *)(a5 + 16);
  uint64_t v108 = v25;
  if (v61)
  {
    v117[0] = (id)MEMORY[0x1E4FBC860];
    sub_1D78AB4E8(0, v61, 0);
    uint64_t v62 = v117[0];
    uint64_t v63 = a5 + 32;
    id v115 = (void *)*MEMORY[0x1E4F97A78];
    do
    {
      ++v63;
      uint64_t v64 = sub_1D7A9BFC8();
      uint64_t v66 = v65;
      v117[0] = v62;
      unint64_t v68 = v62[2];
      unint64_t v67 = v62[3];
      if (v68 >= v67 >> 1)
      {
        sub_1D78AB4E8(v67 > 1, v68 + 1, 1);
        uint64_t v62 = v117[0];
      }
      v62[2] = v68 + 1;
      unint64_t v69 = &v62[2 * v68];
      v69[4] = v64;
      v69[5] = v66;
      --v61;
    }
    while (v61);
    uint64_t v25 = v108;
    uint64_t v26 = v114;
  }
  unint64_t v70 = (void *)sub_1D7A9AFF8();
  unint64_t v71 = (void *)sub_1D7A9BF98();
  unint64_t v72 = (void *)sub_1D7A9C2F8();
  swift_bridgeObjectRelease();
  v117[0] = 0;
  id v73 = (id)SESKeyCreatePTAttestation();

  id v74 = v117[0];
  id v75 = v117[0];
  id v76 = v75;
  if (!v73)
  {
    unint64_t v79 = v113;
    if (!v75) {
      goto LABEL_23;
    }
    unint64_t v72 = 0;
    unint64_t v78 = 0xF000000000000000;
LABEL_19:
    v103(v79, v105, v26);
    id v80 = v76;
    uint64_t v81 = sub_1D7A9B5D8();
    os_log_type_t v82 = sub_1D7A9C758();
    if (os_log_type_enabled(v81, v82))
    {
      unint64_t v83 = (uint8_t *)swift_slowAlloc();
      unint64_t v84 = (void *)swift_slowAlloc();
      id v115 = v72;
      uint64_t v112 = v84;
      v117[0] = v84;
      *(_DWORD *)unint64_t v83 = 136315138;
      uint64_t v110 = v83 + 4;
      unint64_t v111 = v83;
      id v85 = v74;
      id v86 = objc_msgSend(v80, sel_localizedDescription);
      unint64_t v87 = v78;
      uint64_t v88 = sub_1D7A9BFC8();
      unint64_t v90 = v89;

      id v74 = v85;
      uint64_t v91 = v88;
      unint64_t v78 = v87;
      uint64_t v116 = sub_1D7923300(v91, v90, (uint64_t *)v117);
      sub_1D7A9C9E8();

      uint64_t v25 = v108;
      swift_bridgeObjectRelease();
      os_log_type_t v92 = v82;
      uint64_t v93 = v111;
      _os_log_impl(&dword_1D7853000, v81, v92, "Error from SESKeyCreatePTAttestation: %s", v111, 0xCu);
      uint64_t v94 = v112;
      swift_arrayDestroy();
      unint64_t v72 = v115;
      MEMORY[0x1D947D740](v94, -1, -1);
      MEMORY[0x1D947D740](v93, -1, -1);

      uint64_t v95 = v113;
      uint64_t v96 = v114;
    }
    else
    {

      uint64_t v95 = v79;
      uint64_t v96 = v26;
    }
    v106(v95, v96);
    LOWORD(v117[0]) = 196;
    id v76 = v80;
    unint64_t v97 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v74, 0xD000000000000024, 0x80000001D7ABFAB0, (__int16 *)v117, 0, v97, 0xD000000000000054, 0x80000001D7ABF7D0, v98, 0xD00000000000002BLL, 0x80000001D7ABFA80, 222);
    swift_willThrow();

    sub_1D7871BDC((uint64_t)v72, v78);
    goto LABEL_24;
  }
  unint64_t v72 = (void *)sub_1D7A9B028();
  unint64_t v78 = v77;

  unint64_t v79 = v113;
  if (v76) {
    goto LABEL_19;
  }
  if (v78 >> 60 == 15)
  {
LABEL_23:
    LOWORD(v117[0]) = 196;
    unint64_t v99 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000002ELL, 0x80000001D7ABFA50, (__int16 *)v117, 0, v99, 0xD000000000000054, 0x80000001D7ABF7D0, v100, 0xD00000000000002BLL, 0x80000001D7ABFA80, 225);
    swift_willThrow();
LABEL_24:

    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    sub_1D78AB48C((uint64_t)v25);
    return v72;
  }
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  sub_1D78AB48C((uint64_t)v25);
  return v72;
}

uint64_t sub_1D78A842C(void (*a1)(char *, uint64_t), uint64_t a2)
{
  unint64_t v79 = a1;
  v82[4] = *MEMORY[0x1E4F143B8];
  uint64_t v77 = type metadata accessor for DIPSignpost.Config(0);
  MEMORY[0x1F4188790](v77, v3, v4, v5, v6, v7, v8, v9);
  unint64_t v78 = (char *)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DIPSignpost(0);
  MEMORY[0x1F4188790](v11 - 8, v12, v13, v14, v15, v16, v17, v18);
  uint64_t v80 = (uint64_t)&v73 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_1D7A9B5F8();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v29 = MEMORY[0x1F4188790](v20, v22, v23, v24, v25, v26, v27, v28);
  uint64_t v31 = (char *)&v73 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v29, v32, v33, v34, v35, v36, v37, v38);
  uint64_t v40 = (char *)&v73 - v39;
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v41 = __swift_project_value_buffer(v20, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  id v74 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  id v75 = (char *)v41;
  v74(v40, v41, v20);
  uint64_t v42 = sub_1D7A9B5D8();
  os_log_type_t v43 = sub_1D7A9C748();
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v44 = (uint8_t *)swift_slowAlloc();
    uint64_t v76 = a2;
    uint64_t v45 = v31;
    uint64_t v46 = v20;
    uint64_t v47 = v21;
    uint64_t v48 = v44;
    *(_WORD *)uint64_t v44 = 0;
    _os_log_impl(&dword_1D7853000, v42, v43, "SESKeystore deleteKey", v44, 2u);
    os_log_type_t v49 = v48;
    uint64_t v21 = v47;
    uint64_t v20 = v46;
    uint64_t v31 = v45;
    MEMORY[0x1D947D740](v49, -1, -1);
  }

  BOOL v50 = *(void (**)(char *, uint64_t))(v21 + 8);
  uint64_t v76 = v21 + 8;
  v50(v40, v20);
  if (qword_1EA8415A8 != -1) {
    swift_once();
  }
  uint64_t v51 = __swift_project_value_buffer(v77, (uint64_t)qword_1EA845E50);
  uint64_t v52 = v78;
  sub_1D78912C4(v51, (uint64_t)v78);
  uint64_t v53 = v80;
  DIPSignpost.init(_:)(v52, v80);
  uint64_t v54 = (void *)sub_1D7A9AFF8();
  v82[0] = 0;
  SESKeyDelete();

  uint64_t v55 = (char *)v82[0];
  if (v82[0])
  {
    unint64_t v79 = v50;
    v74(v31, (uint64_t)v75, v20);
    id v56 = v55;
    id v57 = sub_1D7A9B5D8();
    os_log_type_t v58 = sub_1D7A9C758();
    if (os_log_type_enabled(v57, v58))
    {
      uint64_t v59 = swift_slowAlloc();
      unint64_t v78 = v55;
      uint64_t v60 = (uint8_t *)v59;
      uint64_t v77 = swift_slowAlloc();
      v82[0] = v77;
      *(_DWORD *)uint64_t v60 = 136315138;
      id v74 = (void (*)(char *, uint64_t, uint64_t))(v60 + 4);
      id v61 = objc_msgSend(v56, sel_localizedDescription);
      uint64_t v62 = sub_1D7A9BFC8();
      id v75 = v31;
      uint64_t v63 = v62;
      unint64_t v65 = v64;

      uint64_t v81 = sub_1D7923300(v63, v65, v82);
      sub_1D7A9C9E8();

      uint64_t v53 = v80;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1D7853000, v57, v58, "Error from SESKeyDelete: %s", v60, 0xCu);
      uint64_t v66 = v77;
      swift_arrayDestroy();
      MEMORY[0x1D947D740](v66, -1, -1);
      unint64_t v67 = v60;
      uint64_t v55 = (char *)v78;
      MEMORY[0x1D947D740](v67, -1, -1);

      unint64_t v68 = v75;
    }
    else
    {

      unint64_t v68 = v31;
    }
    v79(v68, v20);
    LOWORD(v82[0]) = 195;
    unint64_t v69 = v56;
    unint64_t v70 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v55, 0xD000000000000017, 0x80000001D7ABFAE0, (__int16 *)v82, 0, v70, 0xD000000000000054, 0x80000001D7ABF7D0, v71, 0x654B6574656C6564, 0xED0000293A5F2879, 245);
    swift_willThrow();
  }
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  return sub_1D78AB48C(v53);
}

const char *sub_1D78A8A18(void *a1, const char *a2, void (*a3)(char *, uint64_t), void *a4, unint64_t a5)
{
  id v90 = a4;
  unint64_t v91 = a5;
  os_log_type_t v92 = a3;
  uint64_t v88 = a1;
  unint64_t v89 = a2;
  v96[4] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v5 = type metadata accessor for DIPSignpost.Config(0);
  MEMORY[0x1F4188790](v5, v6, v7, v8, v9, v10, v11, v12);
  uint64_t v14 = (char *)&v85 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DIPSignpost(0);
  MEMORY[0x1F4188790](v15 - 8, v16, v17, v18, v19, v20, v21, v22);
  uint64_t v94 = (uint64_t)&v85 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_1D7A9B5F8();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v33 = MEMORY[0x1F4188790](v24, v26, v27, v28, v29, v30, v31, v32);
  uint64_t v93 = (char *)&v85 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v33, v35, v36, v37, v38, v39, v40, v41);
  os_log_type_t v43 = (char *)&v85 - v42;
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v44 = __swift_project_value_buffer(v24, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  id v86 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 16);
  v86(v43, v44, v24);
  uint64_t v45 = sub_1D7A9B5D8();
  os_log_type_t v46 = sub_1D7A9C748();
  if (os_log_type_enabled(v45, v46))
  {
    uint64_t v47 = (uint8_t *)swift_slowAlloc();
    uint64_t v87 = v25 + 16;
    uint64_t v48 = v14;
    uint64_t v49 = v44;
    uint64_t v50 = v5;
    uint64_t v51 = v24;
    uint64_t v52 = v25;
    uint64_t v53 = v47;
    *(_WORD *)uint64_t v47 = 0;
    _os_log_impl(&dword_1D7853000, v45, v46, "SESKeystore changeACL", v47, 2u);
    uint64_t v54 = v53;
    uint64_t v25 = v52;
    uint64_t v24 = v51;
    uint64_t v5 = v50;
    uint64_t v44 = v49;
    uint64_t v14 = v48;
    MEMORY[0x1D947D740](v54, -1, -1);
  }

  uint64_t v55 = *(void (**)(char *, uint64_t))(v25 + 8);
  uint64_t v87 = v25 + 8;
  v55(v43, v24);
  if (qword_1EA8415B0 != -1) {
    swift_once();
  }
  uint64_t v56 = __swift_project_value_buffer(v5, (uint64_t)qword_1EA845E68);
  sub_1D78912C4(v56, (uint64_t)v14);
  uint64_t v57 = v94;
  DIPSignpost.init(_:)(v14, v94);
  os_log_type_t v58 = (void *)sub_1D7A9AFF8();
  uint64_t v59 = (void *)sub_1D7A9AFF8();
  v96[0] = 0;
  id v60 = (id)SESKeyUpdateACL();

  id v61 = v96[0];
  id v62 = v96[0];
  id v63 = v62;
  if (v60)
  {
    os_log_type_t v92 = v55;
    uint64_t v14 = (const char *)sub_1D7A9B028();
    unint64_t v65 = v64;

    if (v63)
    {
      id v90 = v61;
      unint64_t v91 = v65;
      uint64_t v66 = v93;
LABEL_12:
      v86(v66, v44, v24);
      id v67 = v63;
      unint64_t v68 = sub_1D7A9B5D8();
      os_log_type_t v69 = sub_1D7A9C758();
      if (os_log_type_enabled(v68, v69))
      {
        uint64_t v70 = swift_slowAlloc();
        unint64_t v89 = v14;
        uint64_t v71 = (uint8_t *)v70;
        uint64_t v88 = (void *)swift_slowAlloc();
        v96[0] = v88;
        *(_DWORD *)uint64_t v71 = 136315138;
        id v86 = (void (*)(char *, uint64_t, uint64_t))(v71 + 4);
        id v72 = objc_msgSend(v67, sel_localizedDescription);
        uint64_t v73 = sub_1D7A9BFC8();
        unint64_t v75 = v74;

        uint64_t v76 = v73;
        uint64_t v57 = v94;
        uint64_t v95 = sub_1D7923300(v76, v75, (uint64_t *)v96);
        sub_1D7A9C9E8();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1D7853000, v68, v69, "Error from SESKeyUpdateACL: %s", v71, 0xCu);
        uint64_t v77 = v88;
        swift_arrayDestroy();
        MEMORY[0x1D947D740](v77, -1, -1);
        unint64_t v78 = v71;
        uint64_t v14 = v89;
        MEMORY[0x1D947D740](v78, -1, -1);

        unint64_t v79 = v93;
      }
      else
      {

        unint64_t v79 = v66;
      }
      v92(v79, v24);
      LOWORD(v96[0]) = 200;
      id v63 = v67;
      unint64_t v80 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v90, 0xD00000000000001ALL, 0x80000001D7ABFB60, (__int16 *)v96, 0, v80, 0xD000000000000054, 0x80000001D7ABF7D0, v81, 0xD000000000000026, 0x80000001D7ABFB30, 268);
      swift_willThrow();

      sub_1D7871BDC((uint64_t)v14, v91);
      goto LABEL_18;
    }
    if (v65 >> 60 != 15)
    {
      DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
      sub_1D78AB48C(v57);
      return v14;
    }
  }
  else
  {
    uint64_t v66 = v93;
    if (v62)
    {
      os_log_type_t v92 = v55;
      uint64_t v14 = 0;
      id v90 = v61;
      unint64_t v91 = 0xF000000000000000;
      goto LABEL_12;
    }
  }
  LOWORD(v96[0]) = 200;
  unint64_t v82 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
  sub_1D7860544();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000025, 0x80000001D7ABFB00, (__int16 *)v96, 0, v82, 0xD000000000000054, 0x80000001D7ABF7D0, v83, 0xD000000000000026, 0x80000001D7ABFB30, 271);
  swift_willThrow();
LABEL_18:

  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  sub_1D78AB48C(v57);
  return v14;
}

id sub_1D78A9154(double a1)
{
  v114[4] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v105 = sub_1D7A9B308();
  uint64_t v103 = *(void *)(v105 - 8);
  MEMORY[0x1F4188790](v105, v2, v3, v4, v5, v6, v7, v8);
  uint64_t v104 = (char *)&v101 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v109 = (id)type metadata accessor for DIPSignpost.Config(0);
  MEMORY[0x1F4188790](v109, v10, v11, v12, v13, v14, v15, v16);
  uint64_t v18 = (char *)&v101 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DIPSignpost(0);
  MEMORY[0x1F4188790](v19 - 8, v20, v21, v22, v23, v24, v25, v26);
  uint64_t v112 = (uint64_t)&v101 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_1D7A9B5F8();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v37 = MEMORY[0x1F4188790](v28, v30, v31, v32, v33, v34, v35, v36);
  uint64_t v101 = (char *)&v101 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = MEMORY[0x1F4188790](v37, v39, v40, v41, v42, v43, v44, v45);
  uint64_t v110 = (char *)&v101 - v47;
  MEMORY[0x1F4188790](v46, v48, v49, v50, v51, v52, v53, v54);
  uint64_t v56 = (char *)&v101 - v55;
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v57 = __swift_project_value_buffer(v28, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  unint64_t v106 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 16);
  id v107 = (id)v57;
  v106(v56, v57, v28);
  os_log_type_t v58 = sub_1D7A9B5D8();
  os_log_type_t v59 = sub_1D7A9C748();
  if (os_log_type_enabled(v58, v59))
  {
    id v60 = (uint8_t *)swift_slowAlloc();
    unint64_t v111 = v18;
    uint64_t v61 = v28;
    uint64_t v62 = v29;
    id v63 = v60;
    *(_WORD *)id v60 = 0;
    _os_log_impl(&dword_1D7853000, v58, v59, "SESKeystore createSEBAASCertificate", v60, 2u);
    unint64_t v64 = v63;
    uint64_t v29 = v62;
    uint64_t v28 = v61;
    uint64_t v18 = v111;
    MEMORY[0x1D947D740](v64, -1, -1);
  }

  uint64_t v66 = *(void (**)(char *, uint64_t))(v29 + 8);
  unint64_t v65 = (const char *)(v29 + 8);
  uint64_t v108 = v66;
  v66(v56, v28);
  if (qword_1EA8415B8 != -1) {
    swift_once();
  }
  unint64_t v111 = v65;
  uint64_t v67 = __swift_project_value_buffer((uint64_t)v109, (uint64_t)qword_1EA845E80);
  sub_1D78912C4(v67, (uint64_t)v18);
  DIPSignpost.init(_:)(v18, v112);
  id v68 = getSEABASSOIDS();
  if (!v68)
  {
    sub_1D7A9C318();
    id v68 = (id)sub_1D7A9C2F8();
    swift_bridgeObjectRelease();
  }
  os_log_type_t v69 = (void *)sub_1D7A9AFF8();
  uint64_t v70 = (void *)sub_1D7A9BF98();
  id v71 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, a1);
  v114[0] = 0;
  id v72 = (id)SESKeyAttestWithSEBAA();

  id v73 = v114[0];
  id v74 = v114[0];
  id v75 = v74;
  if (v72)
  {
    id v109 = v73;
    id v71 = (id)sub_1D7A9B028();
    unint64_t v77 = v76;

    unint64_t v78 = v110;
    if (v75)
    {
      unint64_t v102 = v77;
LABEL_14:
      v106(v78, (uint64_t)v107, v28);
      id v79 = v75;
      unint64_t v80 = sub_1D7A9B5D8();
      os_log_type_t v81 = sub_1D7A9C758();
      if (os_log_type_enabled(v80, v81))
      {
        unint64_t v82 = (uint8_t *)swift_slowAlloc();
        unint64_t v106 = (void (*)(char *, uint64_t, uint64_t))swift_slowAlloc();
        v114[0] = v106;
        *(_DWORD *)unint64_t v82 = 136315138;
        id v83 = objc_msgSend(v79, sel_localizedDescription, v82 + 4, v102);
        uint64_t v84 = sub_1D7A9BFC8();
        id v107 = v71;
        unint64_t v86 = v85;

        uint64_t v113 = sub_1D7923300(v84, v86, (uint64_t *)v114);
        sub_1D7A9C9E8();

        id v71 = v107;
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1D7853000, v80, v81, "Error from SESKeyCreateSEBAASCertificate: %s", v82, 0xCu);
        uint64_t v87 = v106;
        swift_arrayDestroy();
        MEMORY[0x1D947D740](v87, -1, -1);
        MEMORY[0x1D947D740](v82, -1, -1);

        v108(v110, v28);
      }
      else
      {

        v108(v78, v28);
      }
      uint64_t v88 = v105;
      v114[0] = v79;
      id v89 = v79;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF9740);
      id v90 = v104;
      if (swift_dynamicCast())
      {
        LOWORD(v113) = 202;
        id v75 = v89;
        unint64_t v91 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
        sub_1D7860544();
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v109, 0xD00000000000002FLL, 0x80000001D7ABFC20, (__int16 *)&v113, 0, v91, 0xD000000000000054, 0x80000001D7ABF7D0, v92, 0xD00000000000002FLL, 0x80000001D7ABFBD0, 301);
        swift_willThrow();

        sub_1D7871BDC((uint64_t)v71, v102);
        (*(void (**)(char *, uint64_t))(v103 + 8))(v90, v88);
      }
      else
      {

        LOWORD(v114[0]) = 201;
        id v75 = v89;
        unint64_t v93 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
        sub_1D7860544();
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v109, 0xD000000000000019, 0x80000001D7ABFC00, (__int16 *)v114, 0, v93, 0xD000000000000054, 0x80000001D7ABF7D0, v94, 0xD00000000000002FLL, 0x80000001D7ABFBD0, 303);
        swift_willThrow();

        sub_1D7871BDC((uint64_t)v71, v102);
      }
      goto LABEL_22;
    }
    if (v77 >> 60 != 15)
    {
      uint64_t v99 = (uint64_t)v101;
      v106(v101, (uint64_t)v107, v28);
      sub_1D786E9D8((uint64_t)v71, v77);
      sub_1D7924740(v99, (uint64_t)v71, v77);
      sub_1D7871BDC((uint64_t)v71, v77);
      v108((char *)v99, v28);
      uint64_t v100 = v112;
      DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
      sub_1D78AB48C(v100);
      return v71;
    }
  }
  else
  {
    unint64_t v78 = v110;
    if (v74)
    {
      id v109 = v73;
      id v71 = 0;
      unint64_t v102 = 0xF000000000000000;
      goto LABEL_14;
    }
  }
  LOWORD(v114[0]) = 201;
  unint64_t v95 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
  sub_1D7860544();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000002ALL, 0x80000001D7ABFBA0, (__int16 *)v114, 0, v95, 0xD000000000000054, 0x80000001D7ABF7D0, v96, 0xD00000000000002FLL, 0x80000001D7ABFBD0, 308);
  swift_willThrow();
LABEL_22:

  uint64_t v97 = v112;
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  sub_1D78AB48C(v97);
  return v71;
}

uint64_t SESKeystore.KeyDesignation.description.getter()
{
  unint64_t v1 = 0x74696E65676F7250;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000016;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1701736270;
  }
}

BOOL static SESKeystore.KeyDesignation.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t SESKeystore.KeyDesignation.hash(into:)()
{
  return sub_1D7A9D5E8();
}

uint64_t sub_1D78A9BEC()
{
  unint64_t v1 = 0x74696E65676F7250;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000016;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1701736270;
  }
}

uint64_t sub_1D78A9C48(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint8_t *a5)
{
  v79[3] = a4;
  unint64_t v86 = (unint64_t)a5;
  uint64_t v87 = a1;
  v91[4] = *MEMORY[0x1E4F143B8];
  uint64_t v85 = type metadata accessor for DIPSignpost.Config(0);
  MEMORY[0x1F4188790](v85, v7, v8, v9, v10, v11, v12, v13);
  uint64_t v15 = (char *)v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DIPSignpost(0);
  MEMORY[0x1F4188790](v16 - 8, v17, v18, v19, v20, v21, v22, v23);
  uint64_t v25 = (char *)v79 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_1D7A9B5F8();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v35 = MEMORY[0x1F4188790](v26, v28, v29, v30, v31, v32, v33, v34);
  uint64_t v84 = (char *)v79 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v35, v37, v38, v39, v40, v41, v42, v43);
  uint64_t v45 = (char *)v79 - v44;
  id v89 = (void (*)(char *, uint64_t))*a3;
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v46 = __swift_project_value_buffer(v26, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  unint64_t v80 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 16);
  uint64_t v81 = v46;
  v80(v45, v46, v26);
  uint64_t v47 = sub_1D7A9B5D8();
  os_log_type_t v48 = sub_1D7A9C748();
  BOOL v49 = os_log_type_enabled(v47, v48);
  uint64_t v88 = v27;
  if (v49)
  {
    v79[1] = a2;
    uint64_t v82 = v26;
    id v83 = v25;
    uint64_t v50 = (uint8_t *)swift_slowAlloc();
    uint64_t v51 = swift_slowAlloc();
    v91[0] = v51;
    *(_DWORD *)uint64_t v50 = 136315138;
    unint64_t v52 = 0xEA0000000000726FLL;
    unint64_t v53 = 0x74696E65676F7250;
    if (v89 != 1)
    {
      unint64_t v53 = 0xD000000000000016;
      unint64_t v52 = 0x80000001D7ABFC50;
    }
    if (v89) {
      uint64_t v54 = v53;
    }
    else {
      uint64_t v54 = 1701736270;
    }
    if (v89) {
      unint64_t v55 = v52;
    }
    else {
      unint64_t v55 = 0xE400000000000000;
    }
    uint64_t v90 = sub_1D7923300(v54, v55, v91);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1D7853000, v47, v48, "SESKeystore designateKey with designation %s", v50, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v51, -1, -1);
    MEMORY[0x1D947D740](v50, -1, -1);

    uint64_t v56 = *(void (**)(char *, uint64_t))(v88 + 8);
    uint64_t v26 = v82;
    v56(v45, v82);
    uint64_t v25 = v83;
  }
  else
  {

    uint64_t v56 = *(void (**)(char *, uint64_t))(v27 + 8);
    v56(v45, v26);
  }
  if (qword_1EA8415C0 != -1) {
    swift_once();
  }
  uint64_t v57 = __swift_project_value_buffer(v85, (uint64_t)qword_1EA845E98);
  sub_1D78912C4(v57, (uint64_t)v15);
  DIPSignpost.init(_:)(v15, (uint64_t)v25);
  if (v86 >> 60 == 15) {
    os_log_type_t v58 = 0;
  }
  else {
    os_log_type_t v58 = (void *)sub_1D7A9AFF8();
  }
  os_log_type_t v59 = (void *)sub_1D7A9AFF8();
  v91[0] = 0;
  char v60 = SESKeyDesignate();

  uint64_t v61 = (void *)v91[0];
  if (v91[0])
  {
    uint64_t v62 = v84;
    v80(v84, v81, v26);
    id v63 = v61;
    unint64_t v64 = sub_1D7A9B5D8();
    os_log_type_t v65 = sub_1D7A9C758();
    if (os_log_type_enabled(v64, v65))
    {
      id v89 = v56;
      uint64_t v66 = (uint8_t *)swift_slowAlloc();
      uint64_t v87 = swift_slowAlloc();
      v91[0] = v87;
      *(_DWORD *)uint64_t v66 = 136315138;
      unint64_t v86 = (unint64_t)(v66 + 4);
      id v67 = objc_msgSend(v63, sel_localizedDescription);
      uint64_t v82 = v26;
      id v68 = v67;
      uint64_t v69 = sub_1D7A9BFC8();
      id v83 = v25;
      unint64_t v71 = v70;

      uint64_t v90 = sub_1D7923300(v69, v71, v91);
      sub_1D7A9C9E8();

      uint64_t v25 = v83;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1D7853000, v64, v65, "Error from SESKeyDesignate: %s", v66, 0xCu);
      uint64_t v72 = v87;
      swift_arrayDestroy();
      MEMORY[0x1D947D740](v72, -1, -1);
      MEMORY[0x1D947D740](v66, -1, -1);

      v89(v84, v82);
    }
    else
    {

      v56(v62, v26);
    }
    LOWORD(v91[0]) = 203;
    id v73 = v63;
    unint64_t v74 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v61, 0xD00000000000001ALL, 0x80000001D7ABFCF0, (__int16 *)v91, 0, v74, 0xD000000000000054, 0x80000001D7ABF7D0, v75, 0xD000000000000030, 0x80000001D7ABFCB0, 384);
    swift_willThrow();
  }
  else if ((v60 & 1) == 0)
  {
    LOWORD(v91[0]) = 203;
    unint64_t v76 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000032, 0x80000001D7ABFC70, (__int16 *)v91, 0, v76, 0xD000000000000054, 0x80000001D7ABF7D0, v77, 0xD000000000000030, 0x80000001D7ABFCB0, 387);
    swift_willThrow();
  }
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  return sub_1D78AB48C((uint64_t)v25);
}

uint64_t sub_1D78AA430(unsigned __int8 *a1)
{
  v82[4] = *MEMORY[0x1E4F143B8];
  uint64_t v77 = type metadata accessor for DIPSignpost.Config(0);
  MEMORY[0x1F4188790](v77, v3, v4, v5, v6, v7, v8, v9);
  unint64_t v78 = (char *)v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DIPSignpost(0);
  MEMORY[0x1F4188790](v11 - 8, v12, v13, v14, v15, v16, v17, v18);
  uint64_t v20 = (char *)v72 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_1D7A9B5F8();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v30 = MEMORY[0x1F4188790](v21, v23, v24, v25, v26, v27, v28, v29);
  id v79 = (char *)v72 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v30, v32, v33, v34, v35, v36, v37, v38);
  uint64_t v40 = (char *)v72 - v39;
  id v80 = (id)*a1;
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v41 = __swift_project_value_buffer(v21, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  unint64_t v74 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  v74(v40, v41, v21);
  uint64_t v42 = sub_1D7A9B5D8();
  os_log_type_t v43 = sub_1D7A9C748();
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v75 = v22;
    uint64_t v76 = v21;
    v72[1] = v1;
    id v73 = v20;
    uint64_t v44 = (uint8_t *)swift_slowAlloc();
    uint64_t v45 = swift_slowAlloc();
    v82[0] = v45;
    *(_DWORD *)uint64_t v44 = 136315138;
    unint64_t v46 = 0xEA0000000000726FLL;
    unint64_t v47 = 0x74696E65676F7250;
    if (v80 != 1)
    {
      unint64_t v47 = 0xD000000000000016;
      unint64_t v46 = 0x80000001D7ABFC50;
    }
    if (v80) {
      uint64_t v48 = v47;
    }
    else {
      uint64_t v48 = 1701736270;
    }
    if (v80) {
      unint64_t v49 = v46;
    }
    else {
      unint64_t v49 = 0xE400000000000000;
    }
    uint64_t v81 = sub_1D7923300(v48, v49, v82);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1D7853000, v42, v43, "SESKeystore clearKeyDesignation with designation %s", v44, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v45, -1, -1);
    MEMORY[0x1D947D740](v44, -1, -1);

    uint64_t v22 = v75;
    uint64_t v21 = v76;
    uint64_t v50 = *(const char **)(v75 + 8);
    ((void (*)(char *, uint64_t))v50)(v40, v76);
    uint64_t v20 = v73;
  }
  else
  {

    uint64_t v50 = *(const char **)(v22 + 8);
    ((void (*)(char *, uint64_t))v50)(v40, v21);
  }
  uint64_t v51 = v79;
  if (qword_1EA8415C8 != -1) {
    swift_once();
  }
  uint64_t v52 = __swift_project_value_buffer(v77, (uint64_t)qword_1EA845EB0);
  unint64_t v53 = v78;
  sub_1D78912C4(v52, (uint64_t)v78);
  DIPSignpost.init(_:)(v53, (uint64_t)v20);
  v82[0] = 0;
  char v54 = SESKeyRemoveDesignation();
  unint64_t v55 = (void *)v82[0];
  if (v82[0])
  {
    v74(v51, v41, v21);
    id v80 = v55;
    id v56 = v55;
    uint64_t v57 = sub_1D7A9B5D8();
    os_log_type_t v58 = sub_1D7A9C758();
    if (os_log_type_enabled(v57, v58))
    {
      unint64_t v78 = v50;
      os_log_type_t v59 = (uint8_t *)swift_slowAlloc();
      uint64_t v77 = swift_slowAlloc();
      v82[0] = v77;
      *(_DWORD *)os_log_type_t v59 = 136315138;
      unint64_t v74 = (void (*)(char *, uint64_t, uint64_t))(v59 + 4);
      id v60 = objc_msgSend(v56, sel_localizedDescription);
      uint64_t v75 = v22;
      id v61 = v60;
      uint64_t v62 = sub_1D7A9BFC8();
      uint64_t v76 = v21;
      unint64_t v64 = v63;

      uint64_t v81 = sub_1D7923300(v62, v64, v82);
      sub_1D7A9C9E8();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1D7853000, v57, v58, "Error from SESKeyRemoveDesignation: %s", v59, 0xCu);
      uint64_t v65 = v77;
      swift_arrayDestroy();
      MEMORY[0x1D947D740](v65, -1, -1);
      MEMORY[0x1D947D740](v59, -1, -1);

      ((void (*)(char *, uint64_t))v78)(v79, v76);
    }
    else
    {

      ((void (*)(char *, uint64_t))v50)(v51, v21);
    }
    LOWORD(v82[0]) = 204;
    id v68 = v56;
    unint64_t v69 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v80, 0xD000000000000022, 0x80000001D7ABFD70, (__int16 *)v82, 0, v69, 0xD000000000000054, 0x80000001D7ABF7D0, v70, 0xD000000000000017, 0x80000001D7ABFD50, 405);
    swift_willThrow();
  }
  else if ((v54 & 1) == 0)
  {
    LOWORD(v82[0]) = 204;
    unint64_t v66 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000003ALL, 0x80000001D7ABFD10, (__int16 *)v82, 0, v66, 0xD000000000000054, 0x80000001D7ABF7D0, v67, 0xD000000000000017, 0x80000001D7ABFD50, 408);
    swift_willThrow();
  }
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  return sub_1D78AB48C((uint64_t)v20);
}

void SESKeystore.DesignatedKey.designation.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t SESKeystore.DesignatedKey.publicKeyIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  sub_1D7860790(v1, *(void *)(v0 + 16));
  return v1;
}

unsigned char *SESKeystore.DesignatedKey.init(designation:publicKeyIdentifier:)@<X0>(unsigned char *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(unsigned char *)a4 = *result;
  *(void *)(a4 + 8) = a2;
  *(void *)(a4 + 16) = a3;
  return result;
}

void *sub_1D78AABFC()
{
  v121[4] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  MEMORY[0x1F4188790](v0, v1, v2, v3, v4, v5, v6, v7);
  uint64_t v9 = (char *)&v108 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DIPSignpost(0);
  MEMORY[0x1F4188790](v10 - 8, v11, v12, v13, v14, v15, v16, v17);
  uint64_t v19 = (uint64_t *)((char *)&v108 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = sub_1D7A9B5F8();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v29 = MEMORY[0x1F4188790](v20, v22, v23, v24, v25, v26, v27, v28);
  id v118 = (char *)&v108 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = MEMORY[0x1F4188790](v29, v31, v32, v33, v34, v35, v36, v37);
  uint64_t v40 = (char *)&v108 - v39;
  MEMORY[0x1F4188790](v38, v41, v42, v43, v44, v45, v46, v47);
  unint64_t v49 = (char *)&v108 - v48;
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v50 = __swift_project_value_buffer(v20, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  uint64_t v51 = *(void (**)(char *, void *, uint64_t))(v21 + 16);
  uint64_t v116 = (uint8_t *)(v21 + 16);
  uint64_t v117 = (void *)v50;
  id v115 = v51;
  v51(v49, (void *)v50, v20);
  uint64_t v52 = sub_1D7A9B5D8();
  os_log_type_t v53 = sub_1D7A9C748();
  if (os_log_type_enabled(v52, v53))
  {
    char v54 = (uint8_t *)swift_slowAlloc();
    uint64_t v114 = v9;
    uint64_t v55 = v0;
    id v56 = v19;
    uint64_t v57 = v40;
    os_log_type_t v58 = v54;
    *(_WORD *)char v54 = 0;
    _os_log_impl(&dword_1D7853000, v52, v53, "SESKeystore getDesignatedKeys", v54, 2u);
    os_log_type_t v59 = v58;
    uint64_t v40 = v57;
    uint64_t v19 = v56;
    uint64_t v0 = v55;
    uint64_t v9 = v114;
    MEMORY[0x1D947D740](v59, -1, -1);
  }

  id v61 = *(const char **)(v21 + 8);
  uint64_t v60 = v21 + 8;
  uint64_t v114 = v61;
  ((void (*)(char *, uint64_t))v61)(v49, v20);
  if (qword_1EA8415D0 != -1) {
    swift_once();
  }
  uint64_t v62 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA845EC8);
  sub_1D78912C4(v62, (uint64_t)v9);
  DIPSignpost.init(_:)(v9, (uint64_t)v19);
  v121[0] = 0;
  id v63 = (id)SESKeyGetDesignatedKeys();
  id v64 = v121[0];
  uint64_t v119 = v20;
  if (v63)
  {
    uint64_t v65 = v63;
    uint64_t v111 = v60;
    sub_1D78AC640();
    unint64_t v66 = sub_1D7A9C318();
    id v67 = v64;

    if (!v67)
    {
      id v109 = v19;
      uint64_t v19 = (void *)MEMORY[0x1E4FBC860];
      if (v66)
      {
        if (v66 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v68 = sub_1D7A9CFB8();
          swift_bridgeObjectRelease();
          if (v68) {
            goto LABEL_12;
          }
        }
        else
        {
          uint64_t v68 = *(void *)((v66 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v68)
          {
LABEL_12:
            v121[0] = v19;
            sub_1D78AB548(0, v68 & ~(v68 >> 63), 0);
            if (v68 < 0) {
              __break(1u);
            }
            uint64_t v70 = 0;
            uint64_t v19 = v121[0];
            unint64_t v112 = v66 & 0xC000000000000001;
            *(void *)&long long v69 = 134217984;
            long long v110 = v69;
            uint64_t v113 = v68;
            do
            {
              if (v112) {
                id v71 = (id)MEMORY[0x1D947BA10](v70, v66);
              }
              else {
                id v71 = *(id *)(v66 + 8 * v70 + 32);
              }
              uint64_t v72 = v71;
              id v73 = objc_msgSend(v71, sel_designation);
              if ((unint64_t)v73 >= 3)
              {
                v115(v118, v117, v119);
                unint64_t v74 = sub_1D7A9B5D8();
                os_log_type_t v75 = sub_1D7A9C758();
                if (os_log_type_enabled(v74, v75))
                {
                  uint64_t v76 = swift_slowAlloc();
                  *(_DWORD *)uint64_t v76 = v110;
                  *(void *)(v76 + 4) = v73;
                  _os_log_impl(&dword_1D7853000, v74, v75, "Unknown SESKeyDesignation: %ld", (uint8_t *)v76, 0xCu);
                  MEMORY[0x1D947D740](v76, -1, -1);
                }

                ((void (*)(char *, uint64_t))v114)(v118, v119);
                LOBYTE(v73) = 0;
              }
              id v77 = objc_msgSend(v72, sel_keyIdentifier);
              uint64_t v78 = sub_1D7A9B028();
              uint64_t v80 = v79;

              v121[0] = v19;
              unint64_t v82 = v19[2];
              unint64_t v81 = v19[3];
              if (v82 >= v81 >> 1)
              {
                sub_1D78AB548(v81 > 1, v82 + 1, 1);
                uint64_t v19 = v121[0];
              }
              _OWORD v19[2] = v82 + 1;
              id v83 = &v19[3 * v82];
              *((unsigned char *)v83 + 32) = (_BYTE)v73;
              ++v70;
              v83[5] = v78;
              v83[6] = v80;
            }
            while (v113 != v70);
          }
        }
        swift_bridgeObjectRelease();
      }
LABEL_34:
      uint64_t v106 = (uint64_t)v109;
      DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
      sub_1D78AB48C(v106);
      return v19;
    }
  }
  else
  {
    id v84 = v121[0];
    if (!v64)
    {
      id v109 = v19;
      uint64_t v19 = (void *)MEMORY[0x1E4FBC860];
      goto LABEL_34;
    }
    uint64_t v111 = v60;
  }
  id v85 = v64;
  swift_bridgeObjectRelease();
  uint64_t v86 = v119;
  v115(v40, v117, v119);
  id v87 = v85;
  uint64_t v88 = sub_1D7A9B5D8();
  id v89 = v40;
  os_log_type_t v90 = sub_1D7A9C758();
  if (os_log_type_enabled(v88, v90))
  {
    unint64_t v91 = (uint8_t *)swift_slowAlloc();
    uint64_t v117 = (void *)swift_slowAlloc();
    v121[0] = v117;
    uint64_t v116 = v91;
    *(_DWORD *)unint64_t v91 = 136315138;
    id v115 = (void (*)(char *, void *, uint64_t))(v91 + 4);
    id v92 = objc_msgSend(v87, sel_localizedDescription);
    id v118 = v89;
    id v93 = v64;
    uint64_t v94 = v19;
    id v95 = v92;
    uint64_t v96 = sub_1D7A9BFC8();
    unint64_t v98 = v97;

    uint64_t v19 = v94;
    id v64 = v93;
    uint64_t v120 = sub_1D7923300(v96, v98, (uint64_t *)v121);
    sub_1D7A9C9E8();

    swift_bridgeObjectRelease();
    uint64_t v99 = v116;
    _os_log_impl(&dword_1D7853000, v88, v90, "Error from SESKeyGetDesignatedKeys: %s", v116, 0xCu);
    uint64_t v100 = v117;
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v100, -1, -1);
    MEMORY[0x1D947D740](v99, -1, -1);

    uint64_t v101 = v118;
    uint64_t v102 = v119;
  }
  else
  {

    uint64_t v101 = v89;
    uint64_t v102 = v86;
  }
  ((void (*)(char *, uint64_t))v114)(v101, v102);
  LOWORD(v121[0]) = 205;
  id v103 = v87;
  unint64_t v104 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
  sub_1D7860544();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v64, 0xD000000000000022, 0x80000001D7ABFDA0, (__int16 *)v121, 0, v104, 0xD000000000000054, 0x80000001D7ABF7D0, v105, 0xD000000000000013, 0x80000001D7ABFDD0, 442);
  swift_willThrow();

  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  sub_1D78AB48C((uint64_t)v19);
  return v19;
}

uint64_t SESKeystore.deinit()
{
  return v0;
}

uint64_t SESKeystore.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_1D78AB48C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DIPSignpost(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1D78AB4E8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1D78AB658(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1D78AB508(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1D78AB7C4(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1D78AB528(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1D78AB930(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1D78AB548(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1D78ABABC(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1D78AB568(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1D78ABC44(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1D78AB588(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1D78ABDF0(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1D78AB5A8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1D78ABF5C(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1D78AB5C8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1D78AC0E8(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1D78AB5E8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1D78AC328(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1D78AB608(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1D78AC488(a1, a2, a3, *v3, &qword_1EA843018);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1D78AB630(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1D78AC488(a1, a2, a3, *v3, &qword_1EA8430E8);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1D78AB658(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF7930);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_1D7A9D008();
  __break(1u);
  return result;
}

uint64_t sub_1D78AB7C4(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA843100);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_1D7A9D008();
  __break(1u);
  return result;
}

uint64_t sub_1D78AB930(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8430F8);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF9740);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_1D7A9D008();
  __break(1u);
  return result;
}

uint64_t sub_1D78ABABC(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8430F0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[24 * v8] || v12 >= &v13[24 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_1D7A9D008();
  __break(1u);
  return result;
}

uint64_t sub_1D78ABC44(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8430D0);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 72);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 72 * v8) {
      memmove(v10 + 4, a4 + 4, 72 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 72 * v8 || v12 >= v13 + 72 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8430D8);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_1D7A9D008();
  __break(1u);
  return result;
}

uint64_t sub_1D78ABDF0(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8430C8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_1D7A9D008();
  __break(1u);
  return result;
}

uint64_t sub_1D78ABF5C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8430E0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[56 * v8]) {
      memmove(v12, v13, 56 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[56 * v8] || v12 >= &v13[56 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_1D7A9D008();
  __break(1u);
  return result;
}

uint64_t sub_1D78AC0E8(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    unint64_t v13 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA843050);
  uint64_t v10 = *(void *)(type metadata accessor for CredentialBuilderPayloadDetails.Element(0) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v13 = (void *)swift_allocObject();
  size_t v14 = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_34;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(type metadata accessor for CredentialBuilderPayloadDetails.Element(0) - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v18 = (char *)v13 + v17;
  uint64_t v19 = (char *)a4 + v17;
  if (a1)
  {
    if (v13 < a4 || v18 >= &v19[*(void *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v20 = *(void *)(v16 + 72) * v8;
  uint64_t v21 = &v18[v20];
  unint64_t v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  uint64_t result = sub_1D7A9D008();
  __break(1u);
  return result;
}

uint64_t sub_1D78AC328(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA843048);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 29;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8]) {
      memmove(v13, v14, 4 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[4 * v8] || v13 >= &v14[4 * v8])
  {
    memcpy(v13, v14, 4 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_1D7A9D008();
  __break(1u);
  return result;
}

uint64_t sub_1D78AC488(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    int64_t v11 = (char *)swift_allocObject();
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x1E4FBC860];
  }
  size_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9]) {
      memmove(v14, v15, 8 * v9);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v9] || v14 >= &v15[8 * v9])
  {
    memcpy(v14, v15, 8 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  uint64_t result = sub_1D7A9D008();
  __break(1u);
  return result;
}

unint64_t sub_1D78AC5E4()
{
  unint64_t result = qword_1EBDF7910;
  if (!qword_1EBDF7910)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1EBDF7900);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBDF7910);
  }
  return result;
}

unint64_t sub_1D78AC640()
{
  unint64_t result = qword_1EA8430A8;
  if (!qword_1EA8430A8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EA8430A8);
  }
  return result;
}

unint64_t sub_1D78AC684()
{
  unint64_t result = qword_1EA8430B0;
  if (!qword_1EA8430B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8430B0);
  }
  return result;
}

unint64_t sub_1D78AC6DC()
{
  unint64_t result = qword_1EA8430B8;
  if (!qword_1EA8430B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8430B8);
  }
  return result;
}

unint64_t sub_1D78AC734()
{
  unint64_t result = qword_1EA8430C0;
  if (!qword_1EA8430C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8430C0);
  }
  return result;
}

uint64_t type metadata accessor for SESKeystore()
{
  return self;
}

uint64_t method lookup function for SESKeystore(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SESKeystore);
}

uint64_t dispatch thunk of SESKeystore.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of SESKeystore.createKey(acl:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t dispatch thunk of SESKeystore.signDigest(_:withKey:externalizedLAContext:outputFormat:seAccessEndpoint:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of SESKeystore.getPublicKey(of:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of SESKeystore.getCASDCertificate()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of SESKeystore.getACLConstraints(of:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of SESKeystore.getAttestation(for:subjectIdentifier:oids:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of SESKeystore.deleteKey(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of SESKeystore.changeACL(of:to:authorizingLAContext:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of SESKeystore.createSEBAASCertificate(with:validityInterval:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of SESKeystore.designateKey(_:designation:sessionHandoffToken:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of SESKeystore.clearKeyDesignation(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of SESKeystore.getDesignatedKeys()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

ValueMetadata *type metadata accessor for SESKeystore.AttestationOIDs()
{
  return &type metadata for SESKeystore.AttestationOIDs;
}

unsigned char *storeEnumTagSinglePayload for SESKeystore.SignatureOutputFormat(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D78ACB58);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SESKeystore.SignatureOutputFormat()
{
  return &type metadata for SESKeystore.SignatureOutputFormat;
}

unsigned char *_s13CoreIDVShared11SESKeystoreC15AttestationOIDsOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D78ACC5CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SESKeystore.KeyDesignation()
{
  return &type metadata for SESKeystore.KeyDesignation;
}

uint64_t destroy for SESKeystore.DesignatedKey(uint64_t a1)
{
  return sub_1D78607E8(*(void *)(a1 + 8), *(void *)(a1 + 16));
}

uint64_t _s13CoreIDVShared11SESKeystoreC13DesignatedKeyVwCP_0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  sub_1D7860790(v3, v4);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  return a1;
}

uint64_t assignWithCopy for SESKeystore.DesignatedKey(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  sub_1D7860790(v3, v4);
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  sub_1D78607E8(v5, v6);
  return a1;
}

uint64_t assignWithTake for SESKeystore.DesignatedKey(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_1D78607E8(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for SESKeystore.DesignatedKey(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && a1[24]) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 3;
  int v5 = v3 - 3;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SESKeystore.DesignatedKey(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(unsigned char *)unint64_t result = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SESKeystore.DesignatedKey()
{
  return &type metadata for SESKeystore.DesignatedKey;
}

void DIPRecordError(_:message:log:)(void *a1, uint64_t a2, unint64_t a3)
{
  DIPLogError(_:message:log:)(a1, a2, a3);
  _s13CoreIDVShared9AnalyticsC9sendErroryys0E0_pFZ_0(a1);
}

uint64_t sub_1D78ACE5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = sub_1D785F2C8(MEMORY[0x1E4FBC860]);
  sub_1D7A9D258();
  uint64_t v5 = sub_1D7A9BF98();
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v51 = (void *)v4;
  sub_1D78A12E8(v5, 0x646F43726F727265, 0xE900000000000065, isUniquelyReferenced_nonNull_native);
  unint64_t v7 = (void *)v4;
  swift_bridgeObjectRelease();
  if (qword_1EBDF7850)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = sub_1D7A9BF98();
    swift_bridgeObjectRelease();
    char v9 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v51 = v7;
    sub_1D78A12E8(v8, 0x737365636F7270, 0xE700000000000000, v9);
    swift_bridgeObjectRelease();
  }
  uint64_t v10 = sub_1D78CD028((uint64_t)&unk_1F2F15A88);
  uint64_t v11 = a3 + 64;
  uint64_t v12 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(a3 + 64);
  int64_t v15 = (unint64_t)(v12 + 63) >> 6;
  int64_t v43 = v15 - 1;
  swift_bridgeObjectRetain();
  int64_t v16 = 0;
  while (v14)
  {
    unint64_t v17 = __clz(__rbit64(v14));
    v14 &= v14 - 1;
    unint64_t v18 = v17 | (v16 << 6);
LABEL_8:
    uint64_t v19 = *(void *)(a3 + 56);
    LOBYTE(v49[0]) = *(unsigned char *)(*(void *)(a3 + 48) + v18);
    sub_1D78907D8(v19 + 32 * v18, (uint64_t)v49 + 8);
LABEL_27:
    sub_1D78C40CC((uint64_t)v49, (uint64_t)&v51);
    if (!v53)
    {
      swift_bridgeObjectRelease();
      swift_release();
      return (uint64_t)v7;
    }
    char v23 = (char)v51;
    sub_1D7860E50(&v52, v49);
    if (sub_1D78AD308(v23, v10))
    {
      int64_t v44 = v15;
      uint64_t v45 = v11;
      unint64_t v24 = DIPError.PropertyKey.rawValue.getter();
      uint64_t v26 = v25;
      sub_1D7A9CE78();
      uint64_t v46 = sub_1D7A9BF98();
      swift_bridgeObjectRelease();
      uint64_t v27 = v7;
      char v28 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v48 = v26;
      uint64_t v47 = v24;
      unint64_t v30 = sub_1D7A18684(v24, v26);
      uint64_t v31 = v27[2];
      BOOL v32 = (v29 & 1) == 0;
      uint64_t v33 = v31 + v32;
      if (__OFADD__(v31, v32)) {
        goto LABEL_44;
      }
      char v34 = v29;
      if (v27[3] >= v33)
      {
        if (v28)
        {
          unint64_t v7 = v27;
          if (v29) {
            goto LABEL_38;
          }
        }
        else
        {
          sub_1D7973294();
          unint64_t v7 = v27;
          if (v34) {
            goto LABEL_38;
          }
        }
      }
      else
      {
        sub_1D796FF58(v33, v28);
        uint64_t v35 = sub_1D7A18684(v47, v48);
        if ((v34 & 1) != (v36 & 1)) {
          goto LABEL_47;
        }
        unint64_t v30 = v35;
        unint64_t v7 = v27;
        if (v34)
        {
LABEL_38:
          uint64_t v41 = v7[7];

          *(void *)(v41 + 8 * v30) = v46;
          goto LABEL_39;
        }
      }
      v7[(v30 >> 6) + 8] |= 1 << v30;
      uint64_t v37 = (uint64_t *)(v7[6] + 16 * v30);
      uint64_t *v37 = v47;
      v37[1] = v48;
      *(void *)(v7[7] + 8 * v30) = v46;
      uint64_t v38 = v7[2];
      BOOL v39 = __OFADD__(v38, 1);
      uint64_t v40 = v38 + 1;
      if (v39) {
        goto LABEL_45;
      }
      v7[2] = v40;
      swift_bridgeObjectRetain();
LABEL_39:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
      int64_t v15 = v44;
      uint64_t v11 = v45;
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
    }
  }
  int64_t v20 = v16 + 1;
  if (__OFADD__(v16, 1))
  {
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  if (v20 >= v15)
  {
LABEL_26:
    unint64_t v14 = 0;
    uint64_t v50 = 0;
    memset(v49, 0, sizeof(v49));
    goto LABEL_27;
  }
  unint64_t v21 = *(void *)(v11 + 8 * v20);
  if (v21)
  {
LABEL_12:
    unint64_t v14 = (v21 - 1) & v21;
    unint64_t v18 = __clz(__rbit64(v21)) + (v20 << 6);
    int64_t v16 = v20;
    goto LABEL_8;
  }
  int64_t v22 = v16 + 2;
  ++v16;
  if (v20 + 1 >= v15) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v11 + 8 * v22);
  if (v21) {
    goto LABEL_15;
  }
  int64_t v16 = v20 + 1;
  if (v20 + 2 >= v15) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v11 + 8 * (v20 + 2));
  if (v21)
  {
    v20 += 2;
    goto LABEL_12;
  }
  int64_t v22 = v20 + 3;
  int64_t v16 = v20 + 2;
  if (v20 + 3 >= v15) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v11 + 8 * v22);
  if (v21)
  {
LABEL_15:
    int64_t v20 = v22;
    goto LABEL_12;
  }
  while (1)
  {
    int64_t v20 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v20 >= v15)
    {
      int64_t v16 = v43;
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v11 + 8 * v20);
    ++v22;
    if (v21) {
      goto LABEL_12;
    }
  }
LABEL_46:
  __break(1u);
LABEL_47:
  uint64_t result = sub_1D7A9D4F8();
  __break(1u);
  return result;
}

uint64_t sub_1D78AD308(char a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    sub_1D7A9D5D8();
    DIPError.PropertyKey.rawValue.getter();
    sub_1D7A9C0B8();
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_1D7A9D628();
    uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v6 = v4 & ~v5;
    if ((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
    {
      uint64_t v7 = ~v5;
      while (1)
      {
        unint64_t v8 = 0xED00004449776F6CLL;
        unint64_t v9 = 0x666B726F576F6E69;
        switch(*(unsigned char *)(*(void *)(a2 + 48) + v6))
        {
          case 1:
            unint64_t v9 = 0x69766F72506F6E69;
            unint64_t v8 = 0xED00004449726564;
            break;
          case 2:
            unint64_t v9 = 0x6C666B726F577073;
            unint64_t v8 = 0xEC0000004449776FLL;
            break;
          case 3:
            unint64_t v9 = 0x6469766F72507073;
            unint64_t v8 = 0xEC00000044497265;
            break;
          case 4:
            unint64_t v9 = 0x7475626972747461;
            unint64_t v8 = 0xEB00000000444965;
            break;
          case 5:
            uint64_t v10 = "daemonSessionState";
            goto LABEL_31;
          case 6:
            unint64_t v9 = 0x5255726576726573;
            unint64_t v8 = 0xE90000000000004CLL;
            break;
          case 7:
            unint64_t v9 = 0xD000000000000010;
            uint64_t v11 = "serverStatusCode";
            goto LABEL_33;
          case 8:
            unint64_t v9 = 0xD000000000000013;
            uint64_t v11 = "serverSubStatusCode";
            goto LABEL_33;
          case 9:
            unint64_t v9 = 0x4974736575716572;
            unint64_t v8 = 0xE900000000000044;
            break;
          case 0xA:
            unint64_t v9 = 0x61737265766E6F63;
            unint64_t v8 = 0xEE0044496E6F6974;
            break;
          case 0xB:
            unint64_t v9 = 0xD000000000000010;
            uint64_t v11 = "serverRetryAfter";
            goto LABEL_33;
          case 0xC:
            uint64_t v10 = "cloudContainerName";
            goto LABEL_31;
          case 0xD:
            unint64_t v9 = 0xD000000000000013;
            uint64_t v11 = "cloudContainerState";
            goto LABEL_33;
          case 0xE:
            unint64_t v9 = 0x63655264756F6C63;
            unint64_t v8 = 0xEF656E6F5A64726FLL;
            break;
          case 0xF:
            unint64_t v9 = 0x6552656369766564;
            unint64_t v8 = 0xEC0000006E6F6967;
            break;
          case 0x10:
            uint64_t v10 = "appleAccountStatus";
            goto LABEL_31;
          case 0x11:
            unint64_t v9 = 0x6761735574726563;
            unint64_t v8 = 0xE900000000000065;
            break;
          case 0x12:
            unint64_t v9 = 0x6573616261746164;
            unint64_t v8 = 0xEE006E6D756C6F43;
            break;
          case 0x13:
            unint64_t v9 = 0x74737973656C6966;
            unint64_t v8 = 0xEE00687461506D65;
            break;
          case 0x14:
            unint64_t v9 = 0x69796C7265646E75;
            unint64_t v8 = 0xEF6F6E727245676ELL;
            break;
          case 0x15:
            unint64_t v9 = 0x636E456567616D69;
            unint64_t v8 = 0xED0000676E69646FLL;
            break;
          case 0x16:
            unint64_t v8 = 0xE400000000000000;
            unint64_t v9 = 1701273968;
            break;
          case 0x17:
            unint64_t v9 = 0x636E75614C6F6E69;
            unint64_t v8 = 0xED00007265695468;
            break;
          case 0x18:
            unint64_t v8 = 0xE800000000000000;
            unint64_t v9 = 0x746E756F43797274;
            break;
          case 0x19:
            unint64_t v9 = 0x746E656D75636F64;
            unint64_t v8 = 0xEF74736575716552;
            break;
          case 0x1A:
            uint64_t v10 = "termsAndConditions";
LABEL_31:
            unint64_t v8 = (unint64_t)(v10 - 32) | 0x8000000000000000;
            unint64_t v9 = 0xD000000000000012;
            break;
          case 0x1B:
            unint64_t v9 = 0xD000000000000016;
            uint64_t v11 = "issuerCertificateChain";
LABEL_33:
            unint64_t v8 = (unint64_t)(v11 - 32) | 0x8000000000000000;
            break;
          default:
            break;
        }
        unint64_t v12 = 0x666B726F576F6E69;
        unint64_t v13 = 0xED00004449776F6CLL;
        switch(a1)
        {
          case 1:
            uint64_t v14 = 0x69766F72506F6E69;
            uint64_t v15 = 0x4449726564;
            goto LABEL_70;
          case 2:
            unint64_t v13 = 0xEC0000004449776FLL;
            if (v9 != 0x6C666B726F577073) {
              goto LABEL_80;
            }
            goto LABEL_79;
          case 3:
            uint64_t v16 = 0x6469766F72507073;
            uint64_t v17 = 1145664101;
            goto LABEL_55;
          case 4:
            unint64_t v13 = 0xEB00000000444965;
            if (v9 != 0x7475626972747461) {
              goto LABEL_80;
            }
            goto LABEL_79;
          case 5:
            unint64_t v18 = "daemonSessionState";
            goto LABEL_77;
          case 6:
            unint64_t v13 = 0xE90000000000004CLL;
            if (v9 != 0x5255726576726573) {
              goto LABEL_80;
            }
            goto LABEL_79;
          case 7:
            unint64_t v19 = 0xD000000000000010;
            int64_t v20 = "serverStatusCode";
            goto LABEL_84;
          case 8:
            unint64_t v19 = 0xD000000000000013;
            int64_t v20 = "serverSubStatusCode";
            goto LABEL_84;
          case 9:
            unint64_t v13 = 0xE900000000000044;
            if (v9 != 0x4974736575716572) {
              goto LABEL_80;
            }
            goto LABEL_79;
          case 10:
            uint64_t v21 = 0x61737265766E6F63;
            uint64_t v22 = 0x44496E6F6974;
            goto LABEL_62;
          case 11:
            unint64_t v19 = 0xD000000000000010;
            int64_t v20 = "serverRetryAfter";
            goto LABEL_84;
          case 12:
            unint64_t v18 = "cloudContainerName";
            goto LABEL_77;
          case 13:
            unint64_t v19 = 0xD000000000000013;
            int64_t v20 = "cloudContainerState";
            goto LABEL_84;
          case 14:
            unint64_t v13 = 0xEF656E6F5A64726FLL;
            if (v9 != 0x63655264756F6C63) {
              goto LABEL_80;
            }
            goto LABEL_79;
          case 15:
            uint64_t v16 = 0x6552656369766564;
            uint64_t v17 = 1852795239;
LABEL_55:
            unint64_t v13 = v17 & 0xFFFFFFFFFFFFLL | 0xEC00000000000000;
            if (v9 != v16) {
              goto LABEL_80;
            }
            goto LABEL_79;
          case 16:
            unint64_t v18 = "appleAccountStatus";
            goto LABEL_77;
          case 17:
            unint64_t v13 = 0xE900000000000065;
            if (v9 != 0x6761735574726563) {
              goto LABEL_80;
            }
            goto LABEL_79;
          case 18:
            uint64_t v21 = 0x6573616261746164;
            uint64_t v22 = 0x6E6D756C6F43;
            goto LABEL_62;
          case 19:
            uint64_t v21 = 0x74737973656C6966;
            uint64_t v22 = 0x687461506D65;
LABEL_62:
            unint64_t v13 = v22 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
            if (v9 != v21) {
              goto LABEL_80;
            }
            goto LABEL_79;
          case 20:
            unint64_t v13 = 0xEF6F6E727245676ELL;
            if (v9 != 0x69796C7265646E75) {
              goto LABEL_80;
            }
            goto LABEL_79;
          case 21:
            uint64_t v14 = 0x636E456567616D69;
            uint64_t v15 = 0x676E69646FLL;
            goto LABEL_70;
          case 22:
            unint64_t v13 = 0xE400000000000000;
            if (v9 != 1701273968) {
              goto LABEL_80;
            }
            goto LABEL_79;
          case 23:
            uint64_t v14 = 0x636E75614C6F6E69;
            uint64_t v15 = 0x7265695468;
LABEL_70:
            unint64_t v13 = v15 & 0xFFFFFFFFFFFFLL | 0xED00000000000000;
            if (v9 != v14) {
              goto LABEL_80;
            }
            goto LABEL_79;
          case 24:
            unint64_t v13 = 0xE800000000000000;
            if (v9 != 0x746E756F43797274) {
              goto LABEL_80;
            }
            goto LABEL_79;
          case 25:
            unint64_t v13 = 0xEF74736575716552;
            if (v9 != 0x746E656D75636F64) {
              goto LABEL_80;
            }
            goto LABEL_79;
          case 26:
            unint64_t v18 = "termsAndConditions";
LABEL_77:
            unint64_t v13 = (unint64_t)(v18 - 32) | 0x8000000000000000;
            unint64_t v12 = 0xD000000000000012;
            goto LABEL_78;
          case 27:
            unint64_t v19 = 0xD000000000000016;
            int64_t v20 = "issuerCertificateChain";
LABEL_84:
            unint64_t v13 = (unint64_t)(v20 - 32) | 0x8000000000000000;
            if (v9 != v19) {
              goto LABEL_80;
            }
            goto LABEL_79;
          default:
LABEL_78:
            if (v9 != v12) {
              goto LABEL_80;
            }
LABEL_79:
            if (v8 == v13)
            {
              swift_bridgeObjectRelease_n();
              char v23 = 1;
              return v23 & 1;
            }
LABEL_80:
            char v23 = sub_1D7A9D358();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v23) {
              return v23 & 1;
            }
            unint64_t v6 = (v6 + 1) & v7;
            if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
              return v23 & 1;
            }
            break;
        }
      }
    }
  }
  char v23 = 0;
  return v23 & 1;
}

uint64_t sub_1D78ADBB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    sub_1D7A9D5D8();
    sub_1D7A9C0B8();
    uint64_t v6 = sub_1D7A9D628();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if ((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      uint64_t v10 = *(void *)(a3 + 48);
      uint64_t v11 = (void *)(v10 + 16 * v8);
      BOOL v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (sub_1D7A9D358() & 1) != 0) {
        return 1;
      }
      uint64_t v14 = ~v7;
      unint64_t v15 = (v8 + 1) & v14;
      if ((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
      {
        while (1)
        {
          uint64_t v16 = (void *)(v10 + 16 * v15);
          BOOL v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (sub_1D7A9D358() & 1) != 0) {
            break;
          }
          uint64_t result = 0;
          unint64_t v15 = (v15 + 1) & v14;
          if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
            return result;
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

id sub_1D78ADCEC(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  uint64_t v3 = v1(v2);
  swift_release();
  if (v3)
  {
    sub_1D78C4038(0, (unint64_t *)&qword_1EBDF7920);
    uint64_t v4 = (void *)sub_1D7A9BE98();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = 0;
  }
  return v4;
}

uint64_t Analytics.deinit()
{
  return v0;
}

void static DaemonAnalytics.sendPasskitRegistrationEvent(success:preconditionFailed:)(char a1, char a2)
{
  uint64_t v4 = (void *)sub_1D7A9BF98();
  uint64_t v5 = swift_allocObject();
  *(unsigned char *)(v5 + 16) = a2;
  *(unsigned char *)(v5 + 17) = a1;
  v7[4] = sub_1D78C1C30;
  v7[5] = v5;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1107296256;
  v7[2] = sub_1D78ADCEC;
  v7[3] = &block_descriptor_1;
  uint64_t v6 = _Block_copy(v7);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v6);
}

unint64_t sub_1D78ADE84()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF7938);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D7AA0A40;
  *(void *)(inited + 32) = 0xD000000000000012;
  *(void *)(inited + 40) = 0x80000001D7AC0CF0;
  *(void *)(inited + 48) = sub_1D7A9C418();
  *(void *)(inited + 56) = 0x6673736563637573;
  *(void *)(inited + 64) = 0xEA00000000006C75;
  *(void *)(inited + 72) = sub_1D7A9C418();
  return sub_1D785F2C8(inited);
}

void static DaemonAnalytics.sendODNConcurrentInvocationsEvent(workflowInProgress:newWorkflow:isBackground:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = (void *)sub_1D7A9BF98();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a1;
  *(void *)(v11 + 24) = a2;
  *(void *)(v11 + 32) = a3;
  *(void *)(v11 + 40) = a4;
  *(unsigned char *)(v11 + 48) = a5;
  v13[4] = sub_1D78C1C5C;
  v13[5] = v11;
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 1107296256;
  v13[2] = sub_1D78ADCEC;
  v13[3] = &block_descriptor_6;
  BOOL v12 = _Block_copy(v13);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v12);
}

unint64_t sub_1D78AE054()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF7938);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D7AA4E80;
  *(void *)(inited + 32) = 0x6572676F72506E69;
  *(void *)(inited + 40) = 0xEA00000000007373;
  *(void *)(inited + 48) = sub_1D7A9BF98();
  *(void *)(inited + 56) = 7824750;
  *(void *)(inited + 64) = 0xE300000000000000;
  *(void *)(inited + 72) = sub_1D7A9BF98();
  *(void *)(inited + 80) = 0x636142734977656ELL;
  *(void *)(inited + 88) = 0xEF646E756F72676BLL;
  *(void *)(inited + 96) = sub_1D7A9C418();
  return sub_1D785F2C8(inited);
}

void static DaemonAnalytics.sendODNProfileUsedEvent(providerID:workflowID:fromWorkflow:fromCDN:fromFallback:isUnavailable:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6, char a7, char a8)
{
  uint64_t v16 = (void *)sub_1D7A9BF98();
  uint64_t v17 = swift_allocObject();
  *(unsigned char *)(v17 + 16) = a5;
  *(unsigned char *)(v17 + 17) = a6;
  *(unsigned char *)(v17 + 18) = a7;
  *(unsigned char *)(v17 + 19) = a8;
  *(void *)(v17 + 24) = a1;
  *(void *)(v17 + 32) = a2;
  *(void *)(v17 + 40) = a3;
  *(void *)(v17 + 48) = a4;
  v19[4] = sub_1D78C1C70;
  v19[5] = v17;
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 1107296256;
  _OWORD v19[2] = sub_1D78ADCEC;
  v19[3] = &block_descriptor_12;
  unint64_t v18 = _Block_copy(v19);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v18);
}

unint64_t sub_1D78AE28C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF7938);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D7AA4E90;
  strcpy((char *)(inited + 32), "fromWorkflow");
  *(unsigned char *)(inited + 45) = 0;
  *(_WORD *)(inited + 46) = -5120;
  *(void *)(inited + 48) = sub_1D7A9C418();
  *(void *)(inited + 56) = 0x4E44436D6F7266;
  *(void *)(inited + 64) = 0xE700000000000000;
  *(void *)(inited + 72) = sub_1D7A9C418();
  strcpy((char *)(inited + 80), "fromFallback");
  *(unsigned char *)(inited + 93) = 0;
  *(_WORD *)(inited + 94) = -5120;
  *(void *)(inited + 96) = sub_1D7A9C418();
  strcpy((char *)(inited + 104), "isUnavailable");
  *(_WORD *)(inited + 118) = -4864;
  *(void *)(inited + 120) = sub_1D7A9C418();
  unint64_t v11 = sub_1D785F2C8(inited);
  if (a6)
  {
    uint64_t v12 = sub_1D7A9BF98();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1D78A12E8(v12, 0x72656469766F7270, 0xEA00000000004449, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
  }
  if (a8)
  {
    uint64_t v14 = sub_1D7A9BF98();
    char v15 = swift_isUniquelyReferenced_nonNull_native();
    sub_1D78A12E8(v14, 0x776F6C666B726F77, 0xEA00000000004449, v15);
    swift_bridgeObjectRelease();
  }
  return v11;
}

void static DaemonAnalytics.sendODNRecomputedEvent(providerID:workflowID:totalPregenerated:mismatchedKeys:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (void *)sub_1D7A9BF98();
  unint64_t v13 = (void *)swift_allocObject();
  v13[2] = a5;
  v13[3] = a1;
  v13[4] = a2;
  v13[5] = a3;
  void v13[6] = a4;
  v13[7] = a6;
  v15[4] = sub_1D78C1CD4;
  v15[5] = v13;
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 1107296256;
  _OWORD v15[2] = sub_1D78ADCEC;
  v15[3] = &block_descriptor_18;
  uint64_t v14 = _Block_copy(v15);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v14);
}

uint64_t sub_1D78AE5AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF7938);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D7AA08E0;
  *(void *)(inited + 32) = 0xD000000000000011;
  *(void *)(inited + 40) = 0x80000001D7AC0C10;
  *(void *)(inited + 48) = sub_1D7A9C648();
  unint64_t v10 = sub_1D785F2C8(inited);
  unint64_t v16 = v10;
  if (a3)
  {
    uint64_t v11 = sub_1D7A9BF98();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1D78A12E8(v11, 0x72656469766F7270, 0xEA00000000004449, isUniquelyReferenced_nonNull_native);
    unint64_t v16 = v10;
    swift_bridgeObjectRelease();
  }
  if (a5)
  {
    uint64_t v13 = sub_1D7A9BF98();
    char v14 = swift_isUniquelyReferenced_nonNull_native();
    sub_1D78A12E8(v13, 0x776F6C666B726F77, 0xEA00000000004449, v14);
    unint64_t v16 = v10;
    swift_bridgeObjectRelease();
  }
  sub_1D78AF2C8(a6, (uint64_t *)&v16);
  return v16;
}

uint64_t sub_1D78AE720(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  BOOL v5 = *a1 == 0x6D614E7473726966 && v4 == 0xE900000000000065;
  if (v5 || (sub_1D7A9D358() & 1) != 0)
  {
    sub_1D78C4038(0, (unint64_t *)&qword_1EBDF93C0);
    uint64_t v6 = sub_1D7A9C938();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v30 = *a2;
    *a2 = 0x8000000000000000;
    uint64_t v8 = v6;
    uint64_t v9 = 20038;
LABEL_7:
    uint64_t v10 = 0xE200000000000000;
    goto LABEL_8;
  }
  BOOL v12 = v3 == 0x656D614E7473616CLL && v4 == 0xE800000000000000;
  if (v12 || (sub_1D7A9D358() & 1) != 0)
  {
    sub_1D78C4038(0, (unint64_t *)&qword_1EBDF93C0);
    uint64_t v13 = sub_1D7A9C938();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v30 = *a2;
    *a2 = 0x8000000000000000;
    uint64_t v8 = v13;
    uint64_t v9 = 20044;
    goto LABEL_7;
  }
  if (v3 == 0x6C69616D65 && v4 == 0xE500000000000000 || (sub_1D7A9D358() & 1) != 0)
  {
    sub_1D78C4038(0, (unint64_t *)&qword_1EBDF93C0);
    uint64_t v14 = sub_1D7A9C938();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v30 = *a2;
    *a2 = 0x8000000000000000;
    uint64_t v8 = v14;
    uint64_t v9 = 19781;
    goto LABEL_7;
  }
  if (v3 == 0x6D754E656E6F6870 && v4 == 0xEB00000000726562 || (sub_1D7A9D358() & 1) != 0)
  {
    sub_1D78C4038(0, (unint64_t *)&qword_1EBDF93C0);
    uint64_t v15 = sub_1D7A9C938();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v30 = *a2;
    *a2 = 0x8000000000000000;
    uint64_t v8 = v15;
    uint64_t v9 = 20048;
    goto LABEL_7;
  }
  if (v3 == 0x31746565727473 && v4 == 0xE700000000000000 || (sub_1D7A9D358() & 1) != 0)
  {
    sub_1D78C4038(0, (unint64_t *)&qword_1EBDF93C0);
    uint64_t v16 = sub_1D7A9C938();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v30 = *a2;
    *a2 = 0x8000000000000000;
    uint64_t v8 = v16;
    uint64_t v9 = 827479123;
    uint64_t v10 = 0xE400000000000000;
    goto LABEL_8;
  }
  if (v3 == 0x32746565727473 && v4 == 0xE700000000000000 || (sub_1D7A9D358() & 1) != 0)
  {
    sub_1D78C4038(0, (unint64_t *)&qword_1EBDF93C0);
    uint64_t v17 = sub_1D7A9C938();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v30 = *a2;
    *a2 = 0x8000000000000000;
    uint64_t v8 = v17;
    uint64_t v9 = 844256339;
    uint64_t v10 = 0xE400000000000000;
    goto LABEL_8;
  }
  if (v3 == 0x6574617473 && v4 == 0xE500000000000000 || (sub_1D7A9D358() & 1) != 0)
  {
    sub_1D78C4038(0, (unint64_t *)&qword_1EBDF93C0);
    uint64_t v18 = sub_1D7A9C938();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v30 = *a2;
    *a2 = 0x8000000000000000;
    uint64_t v8 = v18;
    uint64_t v9 = 4281427;
    uint64_t v10 = 0xE300000000000000;
    goto LABEL_8;
  }
  if (v3 == 0x6F436C6174736F70 && v4 == 0xEA00000000006564 || (sub_1D7A9D358() & 1) != 0)
  {
    sub_1D78C4038(0, (unint64_t *)&qword_1EBDF93C0);
    uint64_t v19 = sub_1D7A9C938();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v30 = *a2;
    *a2 = 0x8000000000000000;
    uint64_t v8 = v19;
    uint64_t v9 = 20304;
    goto LABEL_7;
  }
  if (v3 == 0x7972746E756F63 && v4 == 0xE700000000000000 || (sub_1D7A9D358() & 1) != 0)
  {
    sub_1D78C4038(0, (unint64_t *)&qword_1EBDF93C0);
    uint64_t v20 = sub_1D7A9C938();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v30 = *a2;
    *a2 = 0x8000000000000000;
    uint64_t v8 = v20;
    uint64_t v9 = 67;
    uint64_t v10 = 0xE100000000000000;
    goto LABEL_8;
  }
  if (v3 == 0xD000000000000012 && v4 == 0x80000001D7AC0C30 || (sub_1D7A9D358() & 1) != 0)
  {
    sub_1D78C4038(0, (unint64_t *)&qword_1EBDF93C0);
    uint64_t v21 = sub_1D7A9C938();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v30 = *a2;
    *a2 = 0x8000000000000000;
    uint64_t v8 = v21;
    uint64_t v9 = 5129796;
    uint64_t v10 = 0xE300000000000000;
    goto LABEL_8;
  }
  if (v3 == 0xD000000000000011 && v4 == 0x80000001D7AC0C50 || (sub_1D7A9D358() & 1) != 0)
  {
    sub_1D78C4038(0, (unint64_t *)&qword_1EBDF93C0);
    uint64_t v22 = sub_1D7A9C938();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v30 = *a2;
    *a2 = 0x8000000000000000;
    uint64_t v9 = 5131332;
    uint64_t v8 = v22;
    uint64_t v10 = 0xE300000000000000;
    goto LABEL_8;
  }
  if (v3 == 0xD000000000000010 && v4 == 0x80000001D7AC0C70 || (sub_1D7A9D358() & 1) != 0)
  {
    sub_1D78C4038(0, (unint64_t *)&qword_1EBDF93C0);
    uint64_t v23 = sub_1D7A9C938();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v30 = *a2;
    *a2 = 0x8000000000000000;
    uint64_t v8 = v23;
    uint64_t v9 = 0x3152545344;
    uint64_t v10 = 0xE500000000000000;
    goto LABEL_8;
  }
  if (v3 == 0xD000000000000010 && v4 == 0x80000001D7AC0C90 || (sub_1D7A9D358() & 1) != 0)
  {
    sub_1D78C4038(0, (unint64_t *)&qword_1EBDF93C0);
    uint64_t v24 = sub_1D7A9C938();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v30 = *a2;
    *a2 = 0x8000000000000000;
    uint64_t v8 = v24;
    uint64_t v9 = 0x3252545344;
    uint64_t v10 = 0xE500000000000000;
    goto LABEL_8;
  }
  if (v3 == 0x746E656D75636F64 && v4 == 0xEE0065746174732ELL || (sub_1D7A9D358() & 1) != 0)
  {
    sub_1D78C4038(0, (unint64_t *)&qword_1EBDF93C0);
    uint64_t v25 = sub_1D7A9C938();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v30 = *a2;
    *a2 = 0x8000000000000000;
    uint64_t v8 = v25;
    uint64_t v9 = 1096045380;
    uint64_t v10 = 0xE400000000000000;
    goto LABEL_8;
  }
  if (v3 == 0xD000000000000013 && v4 == 0x80000001D7AC0CB0 || (sub_1D7A9D358() & 1) != 0)
  {
    sub_1D78C4038(0, (unint64_t *)&qword_1EBDF93C0);
    uint64_t v26 = sub_1D7A9C938();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v30 = *a2;
    *a2 = 0x8000000000000000;
    uint64_t v8 = v26;
    uint64_t v9 = 5197892;
    uint64_t v10 = 0xE300000000000000;
    goto LABEL_8;
  }
  if (v3 == 0xD000000000000010 && v4 == 0x80000001D7AC0CD0 || (sub_1D7A9D358() & 1) != 0)
  {
    sub_1D78C4038(0, (unint64_t *)&qword_1EBDF93C0);
    uint64_t v27 = sub_1D7A9C938();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v30 = *a2;
    *a2 = 0x8000000000000000;
    uint64_t v8 = v27;
    uint64_t v9 = 17220;
    goto LABEL_7;
  }
  if (v3 == 0x614E646573726170 && v4 == 0xEA0000000000656DLL || (sub_1D7A9D358() & 1) != 0)
  {
    sub_1D78C4038(0, (unint64_t *)&qword_1EBDF93C0);
    uint64_t v28 = sub_1D7A9C938();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v30 = *a2;
    *a2 = 0x8000000000000000;
    uint64_t v8 = v28;
    uint64_t v9 = 5262915;
    uint64_t v10 = 0xE300000000000000;
  }
  else
  {
    sub_1D78C4038(0, (unint64_t *)&qword_1EBDF93C0);
    uint64_t v29 = sub_1D7A9C938();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v30 = *a2;
    *a2 = 0x8000000000000000;
    uint64_t v8 = v29;
    uint64_t v9 = 0x4E574F4E4B4E55;
    uint64_t v10 = 0xE700000000000000;
  }
LABEL_8:
  sub_1D78A12E8(v8, v9, v10, isUniquelyReferenced_nonNull_native);
  *a2 = v30;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D78AF2C8(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = a1 + 56;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a1 + 56);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v11 = 0;
  if (!v8) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v12 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    uint64_t v17 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v18 = v17[1];
    v20[0] = *v17;
    v20[1] = v18;
    swift_bridgeObjectRetain();
    sub_1D78AE720(v20, a2);
    if (v2)
    {
      swift_release();
      return swift_bridgeObjectRelease();
    }
    uint64_t result = swift_bridgeObjectRelease();
    if (v8) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v11++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v11 >= v9) {
      return swift_release();
    }
    unint64_t v15 = *(void *)(v5 + 8 * v11);
    if (!v15)
    {
      int64_t v16 = v11 + 1;
      if (v11 + 1 >= v9) {
        return swift_release();
      }
      unint64_t v15 = *(void *)(v5 + 8 * v16);
      if (v15) {
        goto LABEL_14;
      }
      int64_t v16 = v11 + 2;
      if (v11 + 2 >= v9) {
        return swift_release();
      }
      unint64_t v15 = *(void *)(v5 + 8 * v16);
      if (v15) {
        goto LABEL_14;
      }
      int64_t v16 = v11 + 3;
      if (v11 + 3 >= v9) {
        return swift_release();
      }
      unint64_t v15 = *(void *)(v5 + 8 * v16);
      if (v15)
      {
LABEL_14:
        int64_t v11 = v16;
        goto LABEL_15;
      }
      int64_t v19 = v11 + 4;
      if (v11 + 4 >= v9) {
        return swift_release();
      }
      unint64_t v15 = *(void *)(v5 + 8 * v19);
      v11 += 4;
      if (!v15) {
        break;
      }
    }
LABEL_15:
    unint64_t v8 = (v15 - 1) & v15;
  }
  while (1)
  {
    int64_t v11 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v11 >= v9) {
      return swift_release();
    }
    unint64_t v15 = *(void *)(v5 + 8 * v11);
    ++v19;
    if (v15) {
      goto LABEL_15;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void static DaemonAnalytics.sendBoundBiometricDeletedEvent()()
{
  uint64_t v0 = sub_1D7A9B5F8();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0, v2, v3, v4, v5, v6, v7, v8);
  uint64_t v10 = (char *)&aBlock[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v11 = __swift_project_value_buffer(v0, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v10, v11, v0);
  unint64_t v12 = sub_1D7A9B5D8();
  os_log_type_t v13 = sub_1D7A9C748();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl(&dword_1D7853000, v12, v13, "sendBoundBiometricDeletedEvent", v14, 2u);
    MEMORY[0x1D947D740](v14, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v10, v0);
  unint64_t v15 = (void *)sub_1D7A9BF98();
  aBlock[4] = sub_1D78C42A8;
  aBlock[5] = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1D78ADCEC;
  aBlock[3] = &block_descriptor_21;
  int64_t v16 = _Block_copy(aBlock);
  AnalyticsSendEventLazy();
  _Block_release(v16);
}

void static DaemonAnalytics.sendDateOfBirthInvalidEvent(issuer:isEmpty:invalidRange:incorrectFormat:)(uint64_t a1, uint64_t a2, char a3, char a4, char a5)
{
  uint64_t v10 = sub_1D7A9B5F8();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10, v12, v13, v14, v15, v16, v17, v18);
  uint64_t v20 = (char *)&aBlock[-1] - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v21 = __swift_project_value_buffer(v10, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v20, v21, v10);
  uint64_t v22 = sub_1D7A9B5D8();
  os_log_type_t v23 = sub_1D7A9C748();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    uint64_t v31 = a2;
    char v25 = a3;
    uint64_t v26 = v24;
    *(_DWORD *)uint64_t v24 = 67109120;
    LODWORD(aBlock[0]) = v25 & 1;
    sub_1D7A9C9E8();
    _os_log_impl(&dword_1D7853000, v22, v23, "sendDateOfBirthInvalid. Did retrieve date of birth from pdf417: %{BOOL}d", v26, 8u);
    uint64_t v27 = v26;
    a3 = v25;
    a2 = v31;
    MEMORY[0x1D947D740](v27, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v11 + 8))(v20, v10);
  uint64_t v28 = (void *)sub_1D7A9BF98();
  uint64_t v29 = swift_allocObject();
  *(unsigned char *)(v29 + 16) = a3 & 1;
  *(unsigned char *)(v29 + 17) = a4 & 1;
  *(unsigned char *)(v29 + 18) = a5 & 1;
  *(void *)(v29 + 24) = a1;
  *(void *)(v29 + 32) = a2;
  aBlock[4] = sub_1D78C1CEC;
  aBlock[5] = v29;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1D78ADCEC;
  aBlock[3] = &block_descriptor_27;
  uint64_t v30 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v30);
}

unint64_t sub_1D78AF994()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF7938);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D7AA4E90;
  *(void *)(inited + 32) = 0x7974706D457369;
  *(void *)(inited + 40) = 0xE700000000000000;
  *(void *)(inited + 48) = sub_1D7A9C418();
  strcpy((char *)(inited + 56), "invalidRange");
  *(unsigned char *)(inited + 69) = 0;
  *(_WORD *)(inited + 70) = -5120;
  *(void *)(inited + 72) = sub_1D7A9C418();
  *(void *)(inited + 80) = 0x636572726F636E69;
  *(void *)(inited + 88) = 0xEF74616D726F4674;
  *(void *)(inited + 96) = sub_1D7A9C418();
  *(void *)(inited + 104) = 0x726575737369;
  *(void *)(inited + 112) = 0xE600000000000000;
  *(void *)(inited + 120) = sub_1D7A9BF98();
  return sub_1D785F2C8(inited);
}

void static DaemonAnalytics.sendGenderInvalidEvent(issuer:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1D7A9B5F8();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6, v7, v8, v9, v10, v11, v12);
  uint64_t v14 = (char *)&aBlock[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v15 = __swift_project_value_buffer(v4, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v14, v15, v4);
  uint64_t v16 = sub_1D7A9B5D8();
  os_log_type_t v17 = sub_1D7A9C748();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl(&dword_1D7853000, v16, v17, "sendGenderInvalidEvent", v18, 2u);
    MEMORY[0x1D947D740](v18, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
  uint64_t v19 = (void *)sub_1D7A9BF98();
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a1;
  *(void *)(v20 + 24) = a2;
  aBlock[4] = sub_1D78C1D38;
  aBlock[5] = v20;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1D78ADCEC;
  aBlock[3] = &block_descriptor_33_0;
  uint64_t v21 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v21);
}

unint64_t sub_1D78AFD28()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF7938);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D7AA08E0;
  *(void *)(inited + 32) = 0x726575737369;
  *(void *)(inited + 40) = 0xE600000000000000;
  *(void *)(inited + 48) = sub_1D7A9BF98();
  return sub_1D785F2C8(inited);
}

void static DaemonAnalytics.sendStaticWorkflowFetchedEvent(workflowID:wasLoadedFromCache:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v6 = sub_1D7A9B5F8();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v8, v9, v10, v11, v12, v13, v14);
  uint64_t v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v17 = __swift_project_value_buffer(v6, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v16, v17, v6);
  swift_bridgeObjectRetain_n();
  uint64_t v18 = sub_1D7A9B5D8();
  os_log_type_t v19 = sub_1D7A9C748();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    aBlock[0] = v26;
    *(_DWORD *)uint64_t v20 = 136446466;
    swift_bridgeObjectRetain();
    uint64_t v27 = sub_1D7923300(a1, a2, aBlock);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v20 + 12) = 1026;
    LODWORD(v27) = a3 & 1;
    sub_1D7A9C9E8();
    _os_log_impl(&dword_1D7853000, v18, v19, "sendStaticWorkflowFetchedEvent workflowID  = %{public}s, wasLoadedFromCache = %{BOOL,public}d", (uint8_t *)v20, 0x12u);
    uint64_t v21 = v26;
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v21, -1, -1);
    MEMORY[0x1D947D740](v20, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v6);
  uint64_t v22 = (void *)sub_1D7A9BF98();
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = a1;
  *(void *)(v23 + 24) = a2;
  *(unsigned char *)(v23 + 32) = a3 & 1;
  aBlock[4] = (uint64_t)sub_1D78C1D78;
  aBlock[5] = v23;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  void aBlock[2] = (uint64_t)sub_1D78ADCEC;
  aBlock[3] = (uint64_t)&block_descriptor_39;
  uint64_t v24 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v24);
}

unint64_t sub_1D78B0110(uint64_t a1, uint64_t a2, char a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF7938);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D7AA0A40;
  *(void *)(inited + 32) = 0x776F6C666B726F77;
  *(void *)(inited + 40) = 0xEA00000000004449;
  *(void *)(inited + 48) = sub_1D7A9BF98();
  *(void *)(inited + 56) = 0xD000000000000012;
  *(void *)(inited + 64) = 0x80000001D7AC0BF0;
  *(void *)(inited + 72) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithBool_, a3 & 1);
  return sub_1D785F2C8(inited);
}

void static DaemonAnalytics.sendStaticAssetFetchedEvent(wasLoadedFromCache:)(char a1)
{
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v4, v5, v6, v7, v8, v9, v10);
  uint64_t v12 = (char *)&aBlock[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v13 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v12, v13, v2);
  uint64_t v14 = sub_1D7A9B5D8();
  os_log_type_t v15 = sub_1D7A9C748();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 67240192;
    LODWORD(aBlock[0]) = a1 & 1;
    sub_1D7A9C9E8();
    _os_log_impl(&dword_1D7853000, v14, v15, "sendStaticAssetFetchedEvent, wasLoadedFromCache = %{BOOL,public}d", v16, 8u);
    MEMORY[0x1D947D740](v16, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);
  uint64_t v17 = (void *)sub_1D7A9BF98();
  uint64_t v18 = swift_allocObject();
  *(unsigned char *)(v18 + 16) = a1 & 1;
  aBlock[4] = sub_1D78C1D94;
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1D78ADCEC;
  aBlock[3] = &block_descriptor_45_0;
  os_log_type_t v19 = _Block_copy(aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v19);
}

void static DaemonAnalytics.sendDynamicWorkflowNeededEvent(providerID:wasFetchedInTime:didError:)(uint64_t a1, unint64_t a2, char a3, char a4)
{
  uint64_t v8 = sub_1D7A9B5F8();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8, v10, v11, v12, v13, v14, v15, v16);
  uint64_t v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v19 = __swift_project_value_buffer(v8, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v18, v19, v8);
  swift_bridgeObjectRetain_n();
  uint64_t v20 = sub_1D7A9B5D8();
  os_log_type_t v21 = sub_1D7A9C748();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = swift_slowAlloc();
    uint64_t v30 = a1;
    uint64_t v23 = v22;
    uint64_t v29 = swift_slowAlloc();
    aBlock[0] = v29;
    *(_DWORD *)uint64_t v23 = 136446722;
    swift_bridgeObjectRetain();
    uint64_t v31 = sub_1D7923300(v30, a2, aBlock);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v23 + 12) = 1026;
    LODWORD(v31) = a3 & 1;
    sub_1D7A9C9E8();
    *(_WORD *)(v23 + 18) = 1026;
    LODWORD(v31) = a4 & 1;
    sub_1D7A9C9E8();
    _os_log_impl(&dword_1D7853000, v20, v21, "sendDynamicWorkflowNeededEvent providerID = %{public}s, wasFetchedInTime = %{BOOL,public}d, didError = %{BOOL,public}d", (uint8_t *)v23, 0x18u);
    uint64_t v24 = v29;
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v24, -1, -1);
    uint64_t v25 = v23;
    a1 = v30;
    MEMORY[0x1D947D740](v25, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v9 + 8))(v18, v8);
  uint64_t v26 = (void *)sub_1D7A9BF98();
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = a1;
  *(void *)(v27 + 24) = a2;
  *(unsigned char *)(v27 + 32) = a3 & 1;
  *(unsigned char *)(v27 + 33) = a4 & 1;
  aBlock[4] = (uint64_t)sub_1D78C1DC0;
  aBlock[5] = v27;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  void aBlock[2] = (uint64_t)sub_1D78ADCEC;
  aBlock[3] = (uint64_t)&block_descriptor_51;
  uint64_t v28 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v28);
}

void static DaemonAnalytics.sendAccountKeySigningKeyUnavailableEvent()()
{
  uint64_t v0 = sub_1D7A9B5F8();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0, v2, v3, v4, v5, v6, v7, v8);
  uint64_t v10 = (char *)&aBlock[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v11 = __swift_project_value_buffer(v0, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v10, v11, v0);
  uint64_t v12 = sub_1D7A9B5D8();
  os_log_type_t v13 = sub_1D7A9C748();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl(&dword_1D7853000, v12, v13, "sendAccountKeySigningKeyUnavailableEvent", v14, 2u);
    MEMORY[0x1D947D740](v14, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v10, v0);
  uint64_t v15 = (void *)sub_1D7A9BF98();
  aBlock[4] = sub_1D78B0A58;
  aBlock[5] = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1D78ADCEC;
  aBlock[3] = &block_descriptor_54_0;
  uint64_t v16 = _Block_copy(aBlock);
  AnalyticsSendEventLazy();
  _Block_release(v16);
}

unint64_t sub_1D78B0A58()
{
  return sub_1D785F2C8(MEMORY[0x1E4FBC860]);
}

void static DaemonAnalytics.sendImageQualitySettingsNeededEvent(providerID:wasFetchedInTime:didError:)(uint64_t a1, unint64_t a2, char a3, char a4)
{
  uint64_t v8 = sub_1D7A9B5F8();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8, v10, v11, v12, v13, v14, v15, v16);
  uint64_t v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v19 = __swift_project_value_buffer(v8, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v18, v19, v8);
  swift_bridgeObjectRetain_n();
  uint64_t v20 = sub_1D7A9B5D8();
  os_log_type_t v21 = sub_1D7A9C748();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = swift_slowAlloc();
    uint64_t v30 = a1;
    uint64_t v23 = v22;
    uint64_t v29 = swift_slowAlloc();
    aBlock[0] = v29;
    *(_DWORD *)uint64_t v23 = 136446722;
    swift_bridgeObjectRetain();
    uint64_t v31 = sub_1D7923300(v30, a2, aBlock);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v23 + 12) = 1026;
    LODWORD(v31) = a3 & 1;
    sub_1D7A9C9E8();
    *(_WORD *)(v23 + 18) = 1026;
    LODWORD(v31) = a4 & 1;
    sub_1D7A9C9E8();
    _os_log_impl(&dword_1D7853000, v20, v21, "sendImageQualitySettingsNeededEvent providerID = %{public}s, wasFetchedInTime = %{BOOL,public}d, didError = %{BOOL,public}d", (uint8_t *)v23, 0x18u);
    uint64_t v24 = v29;
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v24, -1, -1);
    uint64_t v25 = v23;
    a1 = v30;
    MEMORY[0x1D947D740](v25, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v9 + 8))(v18, v8);
  uint64_t v26 = (void *)sub_1D7A9BF98();
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = a1;
  *(void *)(v27 + 24) = a2;
  *(unsigned char *)(v27 + 32) = a3 & 1;
  *(unsigned char *)(v27 + 33) = a4 & 1;
  aBlock[4] = (uint64_t)sub_1D78C4138;
  aBlock[5] = v27;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  void aBlock[2] = (uint64_t)sub_1D78ADCEC;
  aBlock[3] = (uint64_t)&block_descriptor_60;
  uint64_t v28 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v28);
}

unint64_t sub_1D78B0E04(uint64_t a1, uint64_t a2, char a3, char a4)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF7938);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D7AA4E80;
  *(void *)(inited + 32) = 0x72656469766F7270;
  *(void *)(inited + 40) = 0xEA00000000004449;
  *(void *)(inited + 48) = sub_1D7A9BF98();
  *(void *)(inited + 56) = 0xD000000000000010;
  *(void *)(inited + 64) = 0x80000001D7AC0BD0;
  *(void *)(inited + 72) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithBool_, a3 & 1);
  *(void *)(inited + 80) = 0x726F727245646964;
  *(void *)(inited + 88) = 0xE800000000000000;
  *(void *)(inited + 96) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithBool_, a4 & 1);
  return sub_1D785F2C8(inited);
}

void static DaemonAnalytics.sendIdentityProvisioningAttemptedEvent(workflowID:trigger:target:wasSuccessful:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, int a6)
{
  uint64_t v40 = a5;
  uint64_t v41 = a1;
  uint64_t v10 = sub_1D7A9B5F8();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10, v12, v13, v14, v15, v16, v17, v18);
  uint64_t v20 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v21 = __swift_project_value_buffer(v10, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v20, v21, v10);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v22 = sub_1D7A9B5D8();
  os_log_type_t v23 = sub_1D7A9C748();
  int v24 = v23;
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v25 = swift_slowAlloc();
    uint64_t v39 = a3;
    uint64_t v26 = v25;
    uint64_t v37 = swift_slowAlloc();
    aBlock[0] = v37;
    *(_DWORD *)uint64_t v26 = 136315906;
    if (a2) {
      uint64_t v27 = v41;
    }
    else {
      uint64_t v27 = 0x3E6C696E3CLL;
    }
    HIDWORD(v36) = v24;
    unint64_t v28 = a4;
    if (a2) {
      unint64_t v29 = a2;
    }
    else {
      unint64_t v29 = 0xE500000000000000;
    }
    int v38 = a6;
    swift_bridgeObjectRetain();
    uint64_t v42 = sub_1D7923300(v27, v29, aBlock);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease_n();
    a4 = v28;
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v42 = sub_1D7923300(v39, v28, aBlock);
    LOBYTE(a6) = v38;
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v26 + 22) = 2048;
    uint64_t v30 = v40;
    uint64_t v42 = v40;
    sub_1D7A9C9E8();
    *(_WORD *)(v26 + 32) = 1024;
    LODWORD(v42) = a6 & 1;
    sub_1D7A9C9E8();
    _os_log_impl(&dword_1D7853000, v22, BYTE4(v36), "sendIdentityProvisioningAttemptedEvent workflowID = %s, trigger = %s, target = %lld, wasSuccessful = %{BOOL}d)", (uint8_t *)v26, 0x26u);
    uint64_t v31 = v37;
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v31, -1, -1);
    uint64_t v32 = v26;
    a3 = v39;
    MEMORY[0x1D947D740](v32, -1, -1);

    (*(void (**)(char *, uint64_t))(v11 + 8))(v20, v10);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v20, v10);
    uint64_t v30 = v40;
  }
  uint64_t v33 = (void *)sub_1D7A9BF98();
  uint64_t v34 = swift_allocObject();
  *(void *)(v34 + 16) = a3;
  *(void *)(v34 + 24) = a4;
  *(void *)(v34 + 32) = v30;
  *(unsigned char *)(v34 + 40) = a6 & 1;
  *(void *)(v34 + 48) = v41;
  *(void *)(v34 + 56) = a2;
  aBlock[4] = (uint64_t)sub_1D78C1E24;
  aBlock[5] = v34;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  void aBlock[2] = (uint64_t)sub_1D78ADCEC;
  aBlock[3] = (uint64_t)&block_descriptor_66;
  uint64_t v35 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v35);
}

unint64_t sub_1D78B1374(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF7938);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D7AA4E80;
  *(void *)(inited + 32) = 0x72656767697274;
  *(void *)(inited + 40) = 0xE700000000000000;
  *(void *)(inited + 48) = sub_1D7A9BF98();
  *(void *)(inited + 56) = 0x746567726174;
  *(void *)(inited + 64) = 0xE600000000000000;
  *(void *)(inited + 72) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithLongLong_, a3);
  strcpy((char *)(inited + 80), "wasSuccessful");
  *(_WORD *)(inited + 94) = -4864;
  *(void *)(inited + 96) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithBool_, a4 & 1);
  unint64_t v10 = sub_1D785F2C8(inited);
  if (a6)
  {
    uint64_t v11 = sub_1D7A9BF98();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1D78A12E8(v11, 0x776F6C666B726F77, 0xEA00000000004449, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
  }
  return v10;
}

void static DaemonAnalytics.sendUploadedAssetToCloudKitEvent(assetType:isUserInitiated:fileSizeBytes:batchUploadDurationSeconds:metaUploadDurationSeconds:batchSizeBytes:batchAssetCount:networkType:networkCost:isScheduledUpload:)(uint64_t a1, unint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, double a9, double a10, uint64_t a11, unint64_t a12, unsigned __int8 a13)
{
  double v61 = *(double *)&a5;
  double v62 = *(double *)&a6;
  int v60 = a3;
  uint64_t v59 = a1;
  unint64_t v19 = a12;
  uint64_t v20 = sub_1D7A9B5F8();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20, v22, v23, v24, v25, v26, v27, v28);
  uint64_t v30 = (char *)&v50 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  int v58 = a13;
  uint64_t v57 = a11;
  uint64_t v31 = __swift_project_value_buffer(v20, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v30, v31, v20);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v32 = sub_1D7A9B5D8();
  os_log_type_t v33 = sub_1D7A9C748();
  int v55 = v33;
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = swift_slowAlloc();
    uint64_t v56 = a7;
    uint64_t v35 = v34;
    uint64_t v53 = swift_slowAlloc();
    aBlock[0] = v53;
    *(_DWORD *)uint64_t v35 = 136317442;
    swift_bridgeObjectRetain();
    double v63 = COERCE_DOUBLE(sub_1D7923300(v59, a2, aBlock));
    unint64_t v54 = a12;
    os_log_t v52 = v32;
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v35 + 12) = 1024;
    LODWORD(v63) = v60 & 1;
    uint64_t v50 = (char *)&v63 + 4;
    sub_1D7A9C9E8();
    *(_WORD *)(v35 + 18) = 2048;
    double v63 = *(double *)&a4;
    sub_1D7A9C9E8();
    *(_WORD *)(v35 + 28) = 2048;
    double v63 = a9;
    sub_1D7A9C9E8();
    *(_WORD *)(v35 + 38) = 2048;
    double v63 = a10;
    sub_1D7A9C9E8();
    *(_WORD *)(v35 + 48) = 2048;
    uint64_t v51 = a4;
    double v63 = v61;
    sub_1D7A9C9E8();
    *(_WORD *)(v35 + 58) = 2048;
    double v63 = v62;
    sub_1D7A9C9E8();
    *(_WORD *)(v35 + 68) = 2080;
    swift_bridgeObjectRetain();
    double v63 = COERCE_DOUBLE(sub_1D7923300(v56, a8, aBlock));
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v35 + 78) = 2080;
    unint64_t v19 = v54;
    swift_bridgeObjectRetain();
    double v63 = COERCE_DOUBLE(sub_1D7923300(v57, v19, aBlock));
    uint64_t v36 = v59;
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v35 + 88) = 1024;
    LODWORD(v63) = v58 & 1;
    sub_1D7A9C9E8();
    uint64_t v37 = v20;
    unint64_t v38 = a2;
    os_log_t v39 = v52;
    _os_log_impl(&dword_1D7853000, v52, (os_log_type_t)v55, "sendUploadedAssetToCloudKitEvent assetType = %s, isUserInitiated = %{BOOL}d, fileSizeBytes = %llu, batchUploadDurationSeconds = %f, metaUploadDurationSeconds = %f, batchSizeBytes = %llu, batchAssetCount = %lu, networkType = %s, networkCost = %s, isScheduledUpload = %{BOOL}d", (uint8_t *)v35, 0x5Eu);
    uint64_t v40 = v53;
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v40, -1, -1);
    uint64_t v41 = v35;
    a7 = v56;
    MEMORY[0x1D947D740](v41, -1, -1);

    a2 = v38;
    uint64_t v42 = v37;
    double v43 = v61;
    char v44 = v60;
    (*(void (**)(char *, uint64_t))(v21 + 8))(v30, v42);
    uint64_t v45 = v51;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v30, v20);
    uint64_t v45 = a4;
    double v43 = v61;
    char v44 = v60;
    uint64_t v36 = v59;
  }
  uint64_t v46 = (void *)sub_1D7A9BF98();
  uint64_t v47 = swift_allocObject();
  *(void *)(v47 + 16) = v36;
  *(void *)(v47 + 24) = a2;
  *(unsigned char *)(v47 + 32) = v44 & 1;
  *(void *)(v47 + 40) = v45;
  *(double *)(v47 + 48) = a9;
  *(double *)(v47 + 56) = a10;
  double v48 = v62;
  *(double *)(v47 + 64) = v43;
  *(double *)(v47 + 72) = v48;
  *(void *)(v47 + 80) = a7;
  *(void *)(v47 + 88) = a8;
  *(void *)(v47 + 96) = v57;
  *(void *)(v47 + 104) = v19;
  *(unsigned char *)(v47 + 112) = v58 & 1;
  aBlock[4] = (uint64_t)sub_1D78C1E80;
  aBlock[5] = v47;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  void aBlock[2] = (uint64_t)sub_1D78ADCEC;
  aBlock[3] = (uint64_t)&block_descriptor_72_0;
  unint64_t v49 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v49);
}

unint64_t sub_1D78B1AC8(double a1, double a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF7938);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D7AA4EA0;
  *(void *)(inited + 32) = 0x7079547465737361;
  *(void *)(inited + 40) = 0xE900000000000065;
  *(void *)(inited + 48) = sub_1D7A9BF98();
  *(void *)(inited + 56) = 0x6E49726573557369;
  *(void *)(inited + 64) = 0xEF64657461697469;
  *(void *)(inited + 72) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithBool_, a5 & 1);
  strcpy((char *)(inited + 80), "fileSizeBytes");
  *(_WORD *)(inited + 94) = -4864;
  *(void *)(inited + 96) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithUnsignedLongLong_, a6);
  *(void *)(inited + 104) = 0xD00000000000001ALL;
  *(void *)(inited + 112) = 0x80000001D7AC0B70;
  *(void *)(inited + 120) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, a1);
  *(void *)(inited + 128) = 0xD000000000000019;
  *(void *)(inited + 136) = 0x80000001D7AC0B90;
  *(void *)(inited + 144) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, a2);
  strcpy((char *)(inited + 152), "batchSizeBytes");
  *(unsigned char *)(inited + 167) = -18;
  *(void *)(inited + 168) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithUnsignedLongLong_, a7);
  *(void *)(inited + 176) = 0x7373416863746162;
  *(void *)(inited + 184) = 0xEF746E756F437465;
  *(void *)(inited + 192) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithUnsignedInteger_, a8);
  *(void *)(inited + 200) = 0x546B726F7774656ELL;
  *(void *)(inited + 208) = 0xEB00000000657079;
  *(void *)(inited + 216) = sub_1D7A9BF98();
  *(void *)(inited + 224) = 0x436B726F7774656ELL;
  *(void *)(inited + 232) = 0xEB0000000074736FLL;
  *(void *)(inited + 240) = sub_1D7A9BF98();
  *(void *)(inited + 248) = 0xD000000000000011;
  *(void *)(inited + 256) = 0x80000001D7AC0BB0;
  *(void *)(inited + 264) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithBool_, a13 & 1);
  return sub_1D785F2C8(inited);
}

void static DaemonAnalytics.sendWatchUnpairedEvent(hasMatchingSession:)(char a1)
{
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v4, v5, v6, v7, v8, v9, v10);
  uint64_t v12 = (char *)&aBlock[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v13 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v12, v13, v2);
  uint64_t v14 = sub_1D7A9B5D8();
  os_log_type_t v15 = sub_1D7A9C748();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 67109120;
    LODWORD(aBlock[0]) = a1 & 1;
    sub_1D7A9C9E8();
    _os_log_impl(&dword_1D7853000, v14, v15, "sendWatchUnpairedEvent hasMatchingSession = %{BOOL}d", v16, 8u);
    MEMORY[0x1D947D740](v16, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);
  uint64_t v17 = (void *)sub_1D7A9BF98();
  uint64_t v18 = swift_allocObject();
  *(unsigned char *)(v18 + 16) = a1 & 1;
  aBlock[4] = sub_1D78C1ED8;
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1D78ADCEC;
  aBlock[3] = &block_descriptor_78;
  unint64_t v19 = _Block_copy(aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v19);
}

unint64_t sub_1D78B203C(char a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF7938);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D7AA08E0;
  *(void *)(inited + 32) = 0xD000000000000012;
  *(void *)(inited + 40) = a2;
  *(void *)(inited + 48) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithBool_, a1 & 1);
  return sub_1D785F2C8(inited);
}

uint64_t DaemonAnalytics.GarbageCollectionEventType.init(rawValue:)@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2 = sub_1D7A9D058();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t DaemonAnalytics.GarbageCollectionEventType.rawValue.getter()
{
  return 0x737341656C617473;
}

uint64_t sub_1D78B2144()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D78B21A4()
{
  return sub_1D7A9C0B8();
}

uint64_t sub_1D78B21C8()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D78B2224@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2 = sub_1D7A9D058();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_1D78B2278(char *a1@<X8>)
{
  a1[15] = -18;
}

void static DaemonAnalytics.sendGarbageCollectedEvent(eventType:count:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_1D7A9B5F8();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v5, v6, v7, v8, v9, v10, v11);
  uint64_t v13 = (char *)&aBlock[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v14 = __swift_project_value_buffer(v3, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v13, v14, v3);
  os_log_type_t v15 = sub_1D7A9B5D8();
  os_log_type_t v16 = sub_1D7A9C748();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    aBlock[0] = v18;
    *(_DWORD *)uint64_t v17 = 136315138;
    uint64_t v22 = sub_1D7923300(0x737341656C617473, 0xEE00656C69467465, aBlock);
    sub_1D7A9C9E8();
    _os_log_impl(&dword_1D7853000, v15, v16, "sendGarbageCollectedEvent eventType = %s", v17, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v18, -1, -1);
    MEMORY[0x1D947D740](v17, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v4 + 8))(v13, v3);
  unint64_t v19 = (void *)sub_1D7A9BF98();
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a2;
  aBlock[4] = (uint64_t)sub_1D78C1F14;
  aBlock[5] = v20;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  void aBlock[2] = (uint64_t)sub_1D78ADCEC;
  aBlock[3] = (uint64_t)&block_descriptor_84;
  uint64_t v21 = _Block_copy(aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v21);
}

unint64_t sub_1D78B25A8(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF7938);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D7AA0A40;
  *(void *)(inited + 32) = 0x707954746E657665;
  *(void *)(inited + 40) = 0xE900000000000065;
  *(void *)(inited + 48) = sub_1D7A9BF98();
  *(void *)(inited + 56) = 0x6F437463656A626FLL;
  *(void *)(inited + 64) = 0xEB00000000746E75;
  *(void *)(inited + 72) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, a1);
  return sub_1D785F2C8(inited);
}

uint64_t DaemonAnalytics.DigitalPresentmentRequestedEventOutcome.description.getter()
{
  unint64_t v1 = *v0;
  unint64_t v2 = *v0 >> 62;
  if (!v2)
  {
    id v4 = (id)v1;
    sub_1D7A9CC48();
    swift_bridgeObjectRelease();
    unint64_t v7 = 0xD00000000000001ELL;
    swift_getErrorValue();
    goto LABEL_5;
  }
  if (v2 == 1)
  {
    id v3 = (id)(v1 & 0x3FFFFFFFFFFFFFFFLL);
    sub_1D7A9CC48();
    swift_bridgeObjectRelease();
    unint64_t v7 = 0xD00000000000001FLL;
    swift_getErrorValue();
LABEL_5:
    sub_1D7A9D548();
    sub_1D7A9C128();
    swift_bridgeObjectRelease();
    sub_1D78C1F1C(v1);
    return v7;
  }
  uint64_t v6 = 0x6E61432072657355;
  if (v1 != 0x8000000000000008) {
    uint64_t v6 = 0x636E614320707041;
  }
  if (v1 == 0x8000000000000000) {
    return 0x73736563637553;
  }
  else {
    return v6;
  }
}

void static DaemonAnalytics.sendDigitalPresentmentRequestDocumentEvent(merchantID:bundleID:documentType:outcome:elements:isTestMDL:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t *a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t v48 = a3;
  uint64_t v49 = a6;
  uint64_t v50 = a2;
  uint64_t v47 = a1;
  uint64_t v13 = sub_1D7A9B5F8();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13, v15, v16, v17, v18, v19, v20, v21);
  uint64_t v23 = (char *)&v42 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v24 = *a7;
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  int v46 = a9;
  uint64_t v25 = __swift_project_value_buffer(v13, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v23, v25, v13);
  sub_1D78C1F38(v24);
  sub_1D78C1F38(v24);
  uint64_t v26 = sub_1D7A9B5D8();
  os_log_type_t v27 = sub_1D7A9C748();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = swift_slowAlloc();
    uint64_t v45 = a4;
    uint64_t v29 = (uint8_t *)v28;
    uint64_t v30 = swift_slowAlloc();
    uint64_t v43 = a5;
    uint64_t v31 = v30;
    uint64_t v51 = v24;
    aBlock[0] = v30;
    uint64_t v44 = a8;
    *(_DWORD *)uint64_t v29 = 136315138;
    uint64_t v42 = v29 + 4;
    uint64_t v32 = DaemonAnalytics.DigitalPresentmentRequestedEventOutcome.description.getter();
    uint64_t v51 = sub_1D7923300(v32, v33, aBlock);
    a8 = v44;
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease();
    sub_1D78C1F1C(v24);
    sub_1D78C1F1C(v24);
    _os_log_impl(&dword_1D7853000, v26, v27, "sendDigitalPresentmentRequestDocumentEvent outcome = %s", v29, 0xCu);
    swift_arrayDestroy();
    uint64_t v34 = v31;
    a5 = v43;
    MEMORY[0x1D947D740](v34, -1, -1);
    uint64_t v35 = v29;
    a4 = v45;
    MEMORY[0x1D947D740](v35, -1, -1);
  }
  else
  {
    sub_1D78C1F1C(v24);
    sub_1D78C1F1C(v24);
  }

  (*(void (**)(char *, uint64_t))(v14 + 8))(v23, v13);
  uint64_t v36 = (void *)sub_1D7A9BF98();
  uint64_t v37 = swift_allocObject();
  uint64_t v38 = v47;
  *(void *)(v37 + 16) = v24;
  *(void *)(v37 + 24) = v38;
  uint64_t v39 = v49;
  uint64_t v40 = v48;
  *(void *)(v37 + 32) = v50;
  *(void *)(v37 + 40) = v40;
  *(void *)(v37 + 48) = a4;
  *(unsigned char *)(v37 + 56) = v46 & 1;
  *(void *)(v37 + 64) = a5;
  *(void *)(v37 + 72) = v39;
  *(void *)(v37 + 80) = a8;
  aBlock[4] = (uint64_t)sub_1D78C1FAC;
  aBlock[5] = v37;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  void aBlock[2] = (uint64_t)sub_1D78ADCEC;
  aBlock[3] = (uint64_t)&block_descriptor_90_0;
  uint64_t v41 = _Block_copy(aBlock);
  sub_1D78C1F38(v24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v41);
}

void *sub_1D78B2BE8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF7938);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D7AA08E0;
  *(void *)(inited + 32) = 0x656D6F6374756FLL;
  *(void *)(inited + 40) = 0xE700000000000000;
  char v231 = a6;
  uint64_t v15 = sub_1D7A9BF98();
  swift_bridgeObjectRelease();
  *(void *)(inited + 48) = v15;
  unint64_t v16 = sub_1D785F2C8(inited);
  if (a3)
  {
    uint64_t v17 = sub_1D7A9BF98();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1D78A12E8(v17, 0x746E61686372656DLL, 0xEA00000000004449, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
  }
  if (a5)
  {
    uint64_t v19 = sub_1D7A9BF98();
    char v20 = swift_isUniquelyReferenced_nonNull_native();
    sub_1D78A12E8(v19, 0x4449656C646E7562, 0xE800000000000000, v20);
    swift_bridgeObjectRelease();
  }
  uint64_t v21 = &unk_1E6A87000;
  if ((a1 >> 62) <= 1)
  {
    swift_getErrorValue();
    sub_1D78C1F38(a1);
    id v22 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, sub_1D7A9D558());
    char v23 = swift_isUniquelyReferenced_nonNull_native();
    sub_1D78A12E8((uint64_t)v22, 0xD000000000000010, 0x80000001D7AC0A70, v23);
    swift_bridgeObjectRelease();
    sub_1D78C1F1C(a1);
  }
  id v24 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithBool_, v231 & 1);
  char v25 = swift_isUniquelyReferenced_nonNull_native();
  sub_1D78A12E8((uint64_t)v24, 0x444D747365547369, 0xE90000000000004CLL, v25);
  uint64_t v26 = (void *)v16;
  swift_bridgeObjectRelease();
  if (a8)
  {
    uint64_t v27 = sub_1D7A9BF98();
    char v28 = swift_isUniquelyReferenced_nonNull_native();
    sub_1D78A12E8(v27, 0x746E656D75636F64, 0xEC00000065707954, v28);
    swift_bridgeObjectRelease();
  }
  uint64_t v29 = *(void *)(a9 + 16);
  if (v29)
  {
    uint64_t v30 = (unsigned __int8 *)(swift_bridgeObjectRetain() + 48);
    while (2)
    {
      uint64_t v34 = *((void *)v30 - 2);
      uint64_t v33 = *((void *)v30 - 1);
      unsigned int v36 = *v30;
      v30 += 24;
      char v35 = v36;
      switch(v36 >> 4)
      {
        case 1u:
          uint64_t v103 = -2;
          if (v34) {
            uint64_t v103 = -1;
          }
          if (v33) {
            uint64_t v104 = v103;
          }
          else {
            uint64_t v104 = v34;
          }
          id v39 = objc_msgSend(objc_allocWithZone(NSNumber), (SEL)v21 + 2091, v104);
          char v105 = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v42 = sub_1D7A18684(0x614E796C696D6166, 0xEA0000000000656DLL);
          uint64_t v107 = v26[2];
          BOOL v108 = (v106 & 1) == 0;
          uint64_t v109 = v107 + v108;
          if (__OFADD__(v107, v108)) {
            goto LABEL_272;
          }
          char v110 = v106;
          if (v26[3] >= v109)
          {
            if (v105)
            {
              if (v106) {
                goto LABEL_11;
              }
            }
            else
            {
              sub_1D7973294();
              if (v110) {
                goto LABEL_11;
              }
            }
          }
          else
          {
            sub_1D796FF58(v109, v105);
            uint64_t v111 = sub_1D7A18684(0x614E796C696D6166, 0xEA0000000000656DLL);
            if ((v110 & 1) != (v112 & 1)) {
              goto LABEL_296;
            }
            unint64_t v42 = v111;
            if (v110) {
              goto LABEL_11;
            }
          }
          v26[(v42 >> 6) + 8] |= 1 << v42;
          uint64_t v199 = (void *)(v26[6] + 16 * v42);
          void *v199 = 0x614E796C696D6166;
          v199[1] = 0xEA0000000000656DLL;
          *(void *)(v26[7] + 8 * v42) = v39;
          uint64_t v200 = v26[2];
          BOOL v186 = __OFADD__(v200, 1);
          uint64_t v187 = v200 + 1;
          if (v186) {
            goto LABEL_286;
          }
          goto LABEL_236;
        case 2u:
          uint64_t v93 = -2;
          if (v34) {
            uint64_t v93 = -1;
          }
          if (v33) {
            uint64_t v94 = v93;
          }
          else {
            uint64_t v94 = v34;
          }
          id v39 = objc_msgSend(objc_allocWithZone(NSNumber), (SEL)v21 + 2091, v94);
          char v95 = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v42 = sub_1D7A18684(7890291, 0xE300000000000000);
          uint64_t v97 = v26[2];
          BOOL v98 = (v96 & 1) == 0;
          uint64_t v99 = v97 + v98;
          if (__OFADD__(v97, v98)) {
            goto LABEL_271;
          }
          char v100 = v96;
          if (v26[3] >= v99)
          {
            if (v95)
            {
              if (v96) {
                goto LABEL_11;
              }
            }
            else
            {
              sub_1D7973294();
              if (v100) {
                goto LABEL_11;
              }
            }
          }
          else
          {
            sub_1D796FF58(v99, v95);
            uint64_t v101 = sub_1D7A18684(7890291, 0xE300000000000000);
            if ((v100 & 1) != (v102 & 1)) {
              goto LABEL_296;
            }
            unint64_t v42 = v101;
            if (v100) {
              goto LABEL_11;
            }
          }
          v26[(v42 >> 6) + 8] |= 1 << v42;
          uint64_t v195 = (void *)(v26[6] + 16 * v42);
          *uint64_t v195 = 7890291;
          v195[1] = 0xE300000000000000;
          *(void *)(v26[7] + 8 * v42) = v39;
          uint64_t v196 = v26[2];
          BOOL v186 = __OFADD__(v196, 1);
          uint64_t v187 = v196 + 1;
          if (v186) {
            goto LABEL_284;
          }
          goto LABEL_236;
        case 3u:
          uint64_t v113 = -2;
          if (v34) {
            uint64_t v113 = -1;
          }
          if (v33) {
            uint64_t v114 = v113;
          }
          else {
            uint64_t v114 = v34;
          }
          id v39 = objc_msgSend(objc_allocWithZone(NSNumber), (SEL)v21 + 2091, v114);
          char v115 = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v42 = sub_1D7A18684(0x7469617274726F70, 0xE800000000000000);
          uint64_t v117 = v26[2];
          BOOL v118 = (v116 & 1) == 0;
          uint64_t v119 = v117 + v118;
          if (__OFADD__(v117, v118)) {
            goto LABEL_273;
          }
          char v120 = v116;
          if (v26[3] >= v119)
          {
            if (v115)
            {
              if (v116) {
                goto LABEL_11;
              }
            }
            else
            {
              sub_1D7973294();
              if (v120) {
                goto LABEL_11;
              }
            }
          }
          else
          {
            sub_1D796FF58(v119, v115);
            uint64_t v121 = sub_1D7A18684(0x7469617274726F70, 0xE800000000000000);
            if ((v120 & 1) != (v122 & 1)) {
              goto LABEL_296;
            }
            unint64_t v42 = v121;
            if (v120) {
              goto LABEL_11;
            }
          }
          v26[(v42 >> 6) + 8] |= 1 << v42;
          unint64_t v201 = (void *)(v26[6] + 16 * v42);
          *unint64_t v201 = 0x7469617274726F70;
          v201[1] = 0xE800000000000000;
          *(void *)(v26[7] + 8 * v42) = v39;
          uint64_t v202 = v26[2];
          BOOL v186 = __OFADD__(v202, 1);
          uint64_t v187 = v202 + 1;
          if (v186) {
            goto LABEL_287;
          }
          goto LABEL_236;
        case 4u:
          uint64_t v59 = -2;
          if (v34) {
            uint64_t v59 = -1;
          }
          if (v33) {
            uint64_t v60 = v59;
          }
          else {
            uint64_t v60 = v34;
          }
          id v39 = objc_msgSend(objc_allocWithZone(NSNumber), (SEL)v21 + 2091, v60);
          char v61 = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v42 = sub_1D7A18684(0x73736572646461, 0xE700000000000000);
          uint64_t v63 = v26[2];
          BOOL v64 = (v62 & 1) == 0;
          uint64_t v65 = v63 + v64;
          if (__OFADD__(v63, v64)) {
            goto LABEL_268;
          }
          char v66 = v62;
          if (v26[3] >= v65)
          {
            if (v61)
            {
              if (v62) {
                goto LABEL_11;
              }
            }
            else
            {
              sub_1D7973294();
              if (v66) {
                goto LABEL_11;
              }
            }
          }
          else
          {
            sub_1D796FF58(v65, v61);
            uint64_t v67 = sub_1D7A18684(0x73736572646461, 0xE700000000000000);
            if ((v66 & 1) != (v68 & 1)) {
              goto LABEL_296;
            }
            unint64_t v42 = v67;
            if (v66) {
              goto LABEL_11;
            }
          }
          v26[(v42 >> 6) + 8] |= 1 << v42;
          long long v188 = (void *)(v26[6] + 16 * v42);
          *long long v188 = 0x73736572646461;
          v188[1] = 0xE700000000000000;
          *(void *)(v26[7] + 8 * v42) = v39;
          uint64_t v189 = v26[2];
          BOOL v186 = __OFADD__(v189, 1);
          uint64_t v187 = v189 + 1;
          if (v186) {
            goto LABEL_282;
          }
          goto LABEL_236;
        case 5u:
          uint64_t v133 = -2;
          if (v34) {
            uint64_t v133 = -1;
          }
          if (v33) {
            uint64_t v134 = v133;
          }
          else {
            uint64_t v134 = v34;
          }
          id v71 = objc_msgSend(objc_allocWithZone(NSNumber), (SEL)v21 + 2091, v134);
          char v135 = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v74 = sub_1D7A18684(0xD000000000000010, 0x80000001D7ABC810);
          uint64_t v137 = v26[2];
          BOOL v138 = (v136 & 1) == 0;
          uint64_t v139 = v137 + v138;
          if (__OFADD__(v137, v138)) {
            goto LABEL_275;
          }
          char v140 = v136;
          if (v26[3] >= v139)
          {
            if (v135)
            {
              if (v136) {
                goto LABEL_204;
              }
            }
            else
            {
              sub_1D7973294();
              if (v140) {
                goto LABEL_204;
              }
            }
          }
          else
          {
            sub_1D796FF58(v139, v135);
            uint64_t v141 = sub_1D7A18684(0xD000000000000010, 0x80000001D7ABC810);
            if ((v140 & 1) != (v142 & 1)) {
              goto LABEL_296;
            }
            unint64_t v74 = v141;
            if (v140) {
              goto LABEL_204;
            }
          }
          v26[(v74 >> 6) + 8] |= 1 << v74;
          os_log_type_t v205 = (void *)(v26[6] + 16 * v74);
          *os_log_type_t v205 = 0xD000000000000010;
          v205[1] = 0x80000001D7ABC810;
          *(void *)(v26[7] + 8 * v74) = v71;
          uint64_t v206 = v26[2];
          BOOL v186 = __OFADD__(v206, 1);
          uint64_t v192 = v206 + 1;
          if (v186) {
            goto LABEL_289;
          }
          goto LABEL_259;
        case 6u:
          uint64_t v143 = -2;
          if (v34) {
            uint64_t v143 = -1;
          }
          if (v33) {
            uint64_t v144 = v143;
          }
          else {
            uint64_t v144 = v34;
          }
          id v71 = objc_msgSend(objc_allocWithZone(NSNumber), (SEL)v21 + 2091, v144);
          char v145 = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v74 = sub_1D7A18684(0xD00000000000001BLL, 0x80000001D7AC0B10);
          uint64_t v147 = v26[2];
          BOOL v148 = (v146 & 1) == 0;
          uint64_t v149 = v147 + v148;
          if (__OFADD__(v147, v148)) {
            goto LABEL_276;
          }
          char v150 = v146;
          if (v26[3] >= v149)
          {
            if (v145)
            {
              if (v146) {
                goto LABEL_204;
              }
            }
            else
            {
              sub_1D7973294();
              if (v150) {
                goto LABEL_204;
              }
            }
          }
          else
          {
            sub_1D796FF58(v149, v145);
            uint64_t v151 = sub_1D7A18684(0xD00000000000001BLL, 0x80000001D7AC0B10);
            if ((v150 & 1) != (v152 & 1)) {
              goto LABEL_296;
            }
            unint64_t v74 = v151;
            if (v150)
            {
LABEL_204:
              uint64_t v207 = v26[7];
              uint64_t v208 = 8 * v74;
              goto LABEL_205;
            }
          }
          v26[(v74 >> 6) + 8] |= 1 << v74;
          int v226 = (void *)(v26[6] + 16 * v74);
          *int v226 = 0xD00000000000001BLL;
          v226[1] = 0x80000001D7AC0B10;
          *(void *)(v26[7] + 8 * v74) = v71;
          uint64_t v227 = v26[2];
          BOOL v186 = __OFADD__(v227, 1);
          uint64_t v192 = v227 + 1;
          if (v186) {
            goto LABEL_293;
          }
          goto LABEL_259;
        case 7u:
          uint64_t v123 = -2;
          if (v34) {
            uint64_t v123 = -1;
          }
          if (v33) {
            uint64_t v124 = v123;
          }
          else {
            uint64_t v124 = v34;
          }
          id v71 = objc_msgSend(objc_allocWithZone(NSNumber), (SEL)v21 + 2091, v124);
          char v125 = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v74 = sub_1D7A18684(0xD000000000000016, 0x80000001D7AC0AF0);
          uint64_t v127 = v26[2];
          BOOL v128 = (v126 & 1) == 0;
          uint64_t v129 = v127 + v128;
          if (__OFADD__(v127, v128)) {
            goto LABEL_274;
          }
          char v130 = v126;
          if (v26[3] >= v129)
          {
            if (v125)
            {
              if (v126) {
                goto LABEL_204;
              }
            }
            else
            {
              sub_1D7973294();
              if (v130) {
                goto LABEL_204;
              }
            }
          }
          else
          {
            sub_1D796FF58(v129, v125);
            uint64_t v131 = sub_1D7A18684(0xD000000000000016, 0x80000001D7AC0AF0);
            if ((v130 & 1) != (v132 & 1)) {
              goto LABEL_296;
            }
            unint64_t v74 = v131;
            if (v130) {
              goto LABEL_204;
            }
          }
          v26[(v74 >> 6) + 8] |= 1 << v74;
          uint64_t v203 = (void *)(v26[6] + 16 * v74);
          *uint64_t v203 = 0xD000000000000016;
          v203[1] = 0x80000001D7AC0AF0;
          *(void *)(v26[7] + 8 * v74) = v71;
          uint64_t v204 = v26[2];
          BOOL v186 = __OFADD__(v204, 1);
          uint64_t v192 = v204 + 1;
          if (v186) {
            goto LABEL_288;
          }
          goto LABEL_259;
        case 8u:
          uint64_t v153 = -2;
          if (v34) {
            uint64_t v153 = -1;
          }
          if (v33) {
            uint64_t v154 = v153;
          }
          else {
            uint64_t v154 = v34;
          }
          id v39 = objc_msgSend(objc_allocWithZone(NSNumber), (SEL)v21 + 2091, v154);
          char v155 = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v42 = sub_1D7A18684(0x746E656D75636F64, 0xEE007265626D754ELL);
          uint64_t v157 = v26[2];
          BOOL v158 = (v156 & 1) == 0;
          uint64_t v159 = v157 + v158;
          if (__OFADD__(v157, v158)) {
            goto LABEL_277;
          }
          char v160 = v156;
          if (v26[3] >= v159)
          {
            if (v155)
            {
              if (v156) {
                goto LABEL_11;
              }
            }
            else
            {
              sub_1D7973294();
              if (v160) {
                goto LABEL_11;
              }
            }
          }
          else
          {
            sub_1D796FF58(v159, v155);
            uint64_t v161 = sub_1D7A18684(0x746E656D75636F64, 0xEE007265626D754ELL);
            if ((v160 & 1) != (v162 & 1)) {
              goto LABEL_296;
            }
            unint64_t v42 = v161;
            if (v160) {
              goto LABEL_11;
            }
          }
          v26[(v42 >> 6) + 8] |= 1 << v42;
          os_log_type_t v209 = (char *)(v26[6] + 16 * v42);
          strcpy(v209, "documentNumber");
          v209[15] = -18;
          *(void *)(v26[7] + 8 * v42) = v39;
          uint64_t v210 = v26[2];
          BOOL v186 = __OFADD__(v210, 1);
          uint64_t v187 = v210 + 1;
          if (v186) {
            goto LABEL_290;
          }
          goto LABEL_236;
        case 9u:
          uint64_t v69 = -2;
          if (v34) {
            uint64_t v69 = -1;
          }
          if (v33) {
            uint64_t v70 = v69;
          }
          else {
            uint64_t v70 = v34;
          }
          id v71 = objc_msgSend(objc_allocWithZone(NSNumber), (SEL)v21 + 2091, v70);
          char v72 = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v74 = sub_1D7A18684(0xD000000000000011, 0x80000001D7AC0AD0);
          uint64_t v75 = v26[2];
          BOOL v76 = (v73 & 1) == 0;
          uint64_t v77 = v75 + v76;
          if (__OFADD__(v75, v76)) {
            goto LABEL_269;
          }
          char v78 = v73;
          if (v26[3] >= v77)
          {
            if (v72)
            {
              if (v73) {
                goto LABEL_204;
              }
            }
            else
            {
              sub_1D7973294();
              if (v78) {
                goto LABEL_204;
              }
            }
          }
          else
          {
            sub_1D796FF58(v77, v72);
            uint64_t v79 = sub_1D7A18684(0xD000000000000011, 0x80000001D7AC0AD0);
            if ((v78 & 1) != (v80 & 1)) {
              goto LABEL_296;
            }
            unint64_t v74 = v79;
            if (v78) {
              goto LABEL_204;
            }
          }
          v26[(v74 >> 6) + 8] |= 1 << v74;
          uint64_t v190 = (void *)(v26[6] + 16 * v74);
          *uint64_t v190 = 0xD000000000000011;
          v190[1] = 0x80000001D7AC0AD0;
          *(void *)(v26[7] + 8 * v74) = v71;
          uint64_t v191 = v26[2];
          BOOL v186 = __OFADD__(v191, 1);
          uint64_t v192 = v191 + 1;
          if (v186) {
            goto LABEL_283;
          }
          goto LABEL_259;
        case 0xAu:
          uint64_t v163 = -2;
          if (v34) {
            uint64_t v163 = -1;
          }
          if (v33) {
            uint64_t v164 = v163;
          }
          else {
            uint64_t v164 = v34;
          }
          id v39 = objc_msgSend(objc_allocWithZone(NSNumber), (SEL)v21 + 2091, v164);
          char v165 = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v42 = sub_1D7A18684(6645601, 0xE300000000000000);
          uint64_t v167 = v26[2];
          BOOL v168 = (v166 & 1) == 0;
          uint64_t v169 = v167 + v168;
          if (__OFADD__(v167, v168)) {
            goto LABEL_278;
          }
          char v170 = v166;
          if (v26[3] >= v169)
          {
            if (v165)
            {
              if (v166) {
                goto LABEL_11;
              }
            }
            else
            {
              sub_1D7973294();
              if (v170) {
                goto LABEL_11;
              }
            }
          }
          else
          {
            sub_1D796FF58(v169, v165);
            uint64_t v171 = sub_1D7A18684(6645601, 0xE300000000000000);
            if ((v170 & 1) != (v172 & 1)) {
              goto LABEL_296;
            }
            unint64_t v42 = v171;
            if (v170) {
              goto LABEL_11;
            }
          }
          v26[(v42 >> 6) + 8] |= 1 << v42;
          uint64_t v211 = (void *)(v26[6] + 16 * v42);
          *uint64_t v211 = 6645601;
          v211[1] = 0xE300000000000000;
          *(void *)(v26[7] + 8 * v42) = v39;
          uint64_t v212 = v26[2];
          BOOL v186 = __OFADD__(v212, 1);
          uint64_t v187 = v212 + 1;
          if (v186) {
            goto LABEL_291;
          }
          goto LABEL_236;
        case 0xBu:
          uint64_t v49 = -2;
          if (v34) {
            uint64_t v49 = -1;
          }
          if (v33) {
            uint64_t v50 = v49;
          }
          else {
            uint64_t v50 = v34;
          }
          id v39 = objc_msgSend(objc_allocWithZone(NSNumber), (SEL)v21 + 2091, v50);
          char v51 = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v42 = sub_1D7A18684(0x6942664F65746164, 0xEB00000000687472);
          uint64_t v53 = v26[2];
          BOOL v54 = (v52 & 1) == 0;
          uint64_t v55 = v53 + v54;
          if (__OFADD__(v53, v54)) {
            goto LABEL_267;
          }
          char v56 = v52;
          if (v26[3] >= v55)
          {
            if (v51)
            {
              if (v52) {
                goto LABEL_11;
              }
            }
            else
            {
              sub_1D7973294();
              if (v56) {
                goto LABEL_11;
              }
            }
          }
          else
          {
            sub_1D796FF58(v55, v51);
            uint64_t v57 = sub_1D7A18684(0x6942664F65746164, 0xEB00000000687472);
            if ((v56 & 1) != (v58 & 1)) {
              goto LABEL_296;
            }
            unint64_t v42 = v57;
            if (v56) {
              goto LABEL_11;
            }
          }
          v26[(v42 >> 6) + 8] |= 1 << v42;
          uint64_t v184 = (void *)(v26[6] + 16 * v42);
          *uint64_t v184 = 0x6942664F65746164;
          v184[1] = 0xEB00000000687472;
          *(void *)(v26[7] + 8 * v42) = v39;
          uint64_t v185 = v26[2];
          BOOL v186 = __OFADD__(v185, 1);
          uint64_t v187 = v185 + 1;
          if (v186) {
            goto LABEL_281;
          }
          goto LABEL_236;
        case 0xCu:
          uint64_t v81 = -2;
          if (v33) {
            uint64_t v81 = -1;
          }
          if (v35) {
            uint64_t v82 = v81;
          }
          else {
            uint64_t v82 = v33;
          }
          id v83 = objc_msgSend(objc_allocWithZone(NSNumber), (SEL)v21 + 2091, v82);
          char v84 = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v86 = sub_1D7A18684(0x61654C7441656761, 0xEA00000000007473);
          uint64_t v87 = v26[2];
          BOOL v88 = (v85 & 1) == 0;
          uint64_t v89 = v87 + v88;
          if (__OFADD__(v87, v88)) {
            goto LABEL_270;
          }
          char v90 = v85;
          if (v26[3] >= v89)
          {
            if (v84)
            {
              if (v85) {
                goto LABEL_171;
              }
            }
            else
            {
              sub_1D7973294();
              if (v90) {
                goto LABEL_171;
              }
            }
          }
          else
          {
            sub_1D796FF58(v89, v84);
            uint64_t v91 = sub_1D7A18684(0x61654C7441656761, 0xEA00000000007473);
            if ((v90 & 1) != (v92 & 1)) {
              goto LABEL_296;
            }
            unint64_t v86 = v91;
            if (v90)
            {
LABEL_171:
              uint64_t v193 = v26[7];
              uint64_t v194 = 8 * v86;

              *(void *)(v193 + v194) = v83;
              goto LABEL_228;
            }
          }
          v26[(v86 >> 6) + 8] |= 1 << v86;
          unint64_t v213 = (void *)(v26[6] + 16 * v86);
          *unint64_t v213 = 0x61654C7441656761;
          v213[1] = 0xEA00000000007473;
          *(void *)(v26[7] + 8 * v86) = v83;
          uint64_t v214 = v26[2];
          BOOL v186 = __OFADD__(v214, 1);
          uint64_t v215 = v214 + 1;
          if (v186) {
            goto LABEL_292;
          }
          v26[2] = v215;
LABEL_228:
          swift_bridgeObjectRelease();
          uint64_t v21 = &unk_1E6A87000;
          id v39 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, v34);
          char v216 = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v42 = sub_1D7A18684(0x61654C7441656761, 0xEF73726165597473);
          uint64_t v218 = v26[2];
          BOOL v219 = (v217 & 1) == 0;
          uint64_t v220 = v218 + v219;
          if (__OFADD__(v218, v219)) {
            goto LABEL_280;
          }
          char v221 = v217;
          if (v26[3] >= v220)
          {
            if (v216)
            {
              if (v217) {
                goto LABEL_11;
              }
            }
            else
            {
              sub_1D7973294();
              if (v221) {
                goto LABEL_11;
              }
            }
          }
          else
          {
            sub_1D796FF58(v220, v216);
            uint64_t v222 = sub_1D7A18684(0x61654C7441656761, 0xEF73726165597473);
            if ((v221 & 1) != (v223 & 1)) {
              goto LABEL_296;
            }
            unint64_t v42 = v222;
            if (v221) {
              goto LABEL_11;
            }
          }
          v26[(v42 >> 6) + 8] |= 1 << v42;
          uint64_t v224 = (void *)(v26[6] + 16 * v42);
          *uint64_t v224 = 0x61654C7441656761;
          v224[1] = 0xEF73726165597473;
          *(void *)(v26[7] + 8 * v42) = v39;
          uint64_t v225 = v26[2];
          BOOL v186 = __OFADD__(v225, 1);
          uint64_t v187 = v225 + 1;
          if (v186) {
            goto LABEL_295;
          }
          goto LABEL_236;
        case 0xDu:
          uint64_t v173 = -2;
          if (v34) {
            uint64_t v173 = -1;
          }
          if (v33) {
            uint64_t v174 = v173;
          }
          else {
            uint64_t v174 = v34;
          }
          id v71 = objc_msgSend(objc_allocWithZone(NSNumber), (SEL)v21 + 2091, v174);
          char v175 = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v177 = sub_1D7A18684(0xD000000000000011, 0x80000001D7AC0AB0);
          uint64_t v178 = v26[2];
          BOOL v179 = (v176 & 1) == 0;
          uint64_t v180 = v178 + v179;
          if (__OFADD__(v178, v179)) {
            goto LABEL_279;
          }
          char v181 = v176;
          if (v26[3] >= v180)
          {
            if (v175)
            {
              if (v176) {
                goto LABEL_218;
              }
            }
            else
            {
              sub_1D7973294();
              if (v181) {
                goto LABEL_218;
              }
            }
          }
          else
          {
            sub_1D796FF58(v180, v175);
            uint64_t v182 = sub_1D7A18684(0xD000000000000011, 0x80000001D7AC0AB0);
            if ((v181 & 1) != (v183 & 1)) {
              goto LABEL_296;
            }
            unint64_t v177 = v182;
            if (v181)
            {
LABEL_218:
              uint64_t v207 = v26[7];
              uint64_t v208 = 8 * v177;
LABEL_205:

              *(void *)(v207 + v208) = v71;
              goto LABEL_260;
            }
          }
          v26[(v177 >> 6) + 8] |= 1 << v177;
          uint64_t v228 = (void *)(v26[6] + 16 * v177);
          *uint64_t v228 = 0xD000000000000011;
          v228[1] = 0x80000001D7AC0AB0;
          *(void *)(v26[7] + 8 * v177) = v71;
          uint64_t v229 = v26[2];
          BOOL v186 = __OFADD__(v229, 1);
          uint64_t v192 = v229 + 1;
          if (v186) {
            goto LABEL_294;
          }
LABEL_259:
          v26[2] = v192;
LABEL_260:
          swift_bridgeObjectRelease();
          uint64_t v21 = &unk_1E6A87000;
          if (--v29) {
            continue;
          }
LABEL_264:
          swift_bridgeObjectRelease();
          break;
        default:
          uint64_t v37 = -2;
          if (v34) {
            uint64_t v37 = -1;
          }
          if (v33) {
            uint64_t v38 = v37;
          }
          else {
            uint64_t v38 = v34;
          }
          id v39 = objc_msgSend(objc_allocWithZone(NSNumber), *((SEL *)v21 + 322), v38);
          char v40 = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v42 = sub_1D7A18684(0x6D614E6E65766967, 0xE900000000000065);
          uint64_t v43 = v26[2];
          BOOL v44 = (v41 & 1) == 0;
          uint64_t v45 = v43 + v44;
          if (__OFADD__(v43, v44))
          {
            __break(1u);
LABEL_267:
            __break(1u);
LABEL_268:
            __break(1u);
LABEL_269:
            __break(1u);
LABEL_270:
            __break(1u);
LABEL_271:
            __break(1u);
LABEL_272:
            __break(1u);
LABEL_273:
            __break(1u);
LABEL_274:
            __break(1u);
LABEL_275:
            __break(1u);
LABEL_276:
            __break(1u);
LABEL_277:
            __break(1u);
LABEL_278:
            __break(1u);
LABEL_279:
            __break(1u);
LABEL_280:
            __break(1u);
LABEL_281:
            __break(1u);
LABEL_282:
            __break(1u);
LABEL_283:
            __break(1u);
LABEL_284:
            __break(1u);
LABEL_285:
            __break(1u);
LABEL_286:
            __break(1u);
LABEL_287:
            __break(1u);
LABEL_288:
            __break(1u);
LABEL_289:
            __break(1u);
LABEL_290:
            __break(1u);
LABEL_291:
            __break(1u);
LABEL_292:
            __break(1u);
LABEL_293:
            __break(1u);
LABEL_294:
            __break(1u);
LABEL_295:
            __break(1u);
LABEL_296:
            sub_1D7A9D4F8();
            __break(1u);
            JUMPOUT(0x1D78B43BCLL);
          }
          char v46 = v41;
          if (v26[3] >= v45)
          {
            if (v40)
            {
              if (v41) {
                goto LABEL_11;
              }
            }
            else
            {
              sub_1D7973294();
              if (v46) {
                goto LABEL_11;
              }
            }
          }
          else
          {
            sub_1D796FF58(v45, v40);
            uint64_t v47 = sub_1D7A18684(0x6D614E6E65766967, 0xE900000000000065);
            if ((v46 & 1) != (v48 & 1)) {
              goto LABEL_296;
            }
            unint64_t v42 = v47;
            if (v46)
            {
LABEL_11:
              uint64_t v31 = v26[7];
              uint64_t v32 = 8 * v42;

              *(void *)(v31 + v32) = v39;
              goto LABEL_12;
            }
          }
          v26[(v42 >> 6) + 8] |= 1 << v42;
          uint64_t v197 = (void *)(v26[6] + 16 * v42);
          void *v197 = 0x6D614E6E65766967;
          v197[1] = 0xE900000000000065;
          *(void *)(v26[7] + 8 * v42) = v39;
          uint64_t v198 = v26[2];
          BOOL v186 = __OFADD__(v198, 1);
          uint64_t v187 = v198 + 1;
          if (v186) {
            goto LABEL_285;
          }
LABEL_236:
          v26[2] = v187;
LABEL_12:
          swift_bridgeObjectRelease();
          if (!--v29) {
            goto LABEL_264;
          }
          continue;
      }
      break;
    }
  }
  return v26;
}

CoreIDVShared::DaemonAnalytics::DigitalPresentmentCanRequestDocumentOutcome_optional __swiftcall DaemonAnalytics.DigitalPresentmentCanRequestDocumentOutcome.init(rawValue:)(Swift::String rawValue)
{
  return (CoreIDVShared::DaemonAnalytics::DigitalPresentmentCanRequestDocumentOutcome_optional)sub_1D78BF86C(v1);
}

unint64_t DaemonAnalytics.DigitalPresentmentCanRequestDocumentOutcome.rawValue.getter()
{
  unint64_t result = 0x73736563637573;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x44676E697373696DLL;
      break;
    case 2:
      unint64_t result = 0xD000000000000012;
      break;
    case 3:
      unint64_t result = 0xD000000000000017;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1D78B44AC(unsigned __int8 *a1, char *a2)
{
  return sub_1D79976FC(*a1, *a2);
}

uint64_t sub_1D78B44B8()
{
  return sub_1D7A1DE84();
}

uint64_t sub_1D78B44C0()
{
  return sub_1D7A353C8();
}

uint64_t sub_1D78B44C8()
{
  return sub_1D7A1F2D0();
}

CoreIDVShared::DaemonAnalytics::DigitalPresentmentCanRequestDocumentOutcome_optional sub_1D78B44D0(Swift::String *a1)
{
  return DaemonAnalytics.DigitalPresentmentCanRequestDocumentOutcome.init(rawValue:)(*a1);
}

void sub_1D78B44DC(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE700000000000000;
  uint64_t v3 = 0x73736563637573;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xEF746E656D75636FLL;
      uint64_t v3 = 0x44676E697373696DLL;
      goto LABEL_3;
    case 2:
      *a1 = 0xD000000000000012;
      a1[1] = 0x80000001D7ABB390;
      break;
    case 3:
      *a1 = 0xD000000000000017;
      a1[1] = 0x80000001D7ABB3B0;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

void static DaemonAnalytics.sendDigitalPresentmentCanRequestDocumentEvent(outcome:bundleID:documentType:isTestMDL:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v38 = a4;
  uint64_t v11 = sub_1D7A9B5F8();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11, v13, v14, v15, v16, v17, v18, v19);
  uint64_t v21 = (char *)&v33 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = *a1;
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v23 = __swift_project_value_buffer(v11, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v21, v23, v11);
  id v24 = sub_1D7A9B5D8();
  os_log_type_t v25 = sub_1D7A9C748();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v34 = a2;
    uint64_t v36 = a3;
    uint64_t v37 = a5;
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    aBlock[0] = v27;
    *(_DWORD *)uint64_t v26 = 136315138;
    unint64_t v28 = 0xE700000000000000;
    uint64_t v29 = 0x73736563637573;
    int v35 = a6;
    switch(v22)
    {
      case 1:
        unint64_t v28 = 0xEF746E656D75636FLL;
        uint64_t v29 = 0x44676E697373696DLL;
        break;
      case 2:
        unint64_t v28 = 0x80000001D7ABB390;
        uint64_t v29 = 0xD000000000000012;
        break;
      case 3:
        uint64_t v29 = 0xD000000000000017;
        unint64_t v28 = 0x80000001D7ABB3B0;
        break;
      default:
        break;
    }
    uint64_t v39 = sub_1D7923300(v29, v28, aBlock);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1D7853000, v24, v25, "sendDigitalPresentmentCanRequestDocumentEvent outcome = %s", v26, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v27, -1, -1);
    MEMORY[0x1D947D740](v26, -1, -1);

    (*(void (**)(char *, uint64_t))(v12 + 8))(v21, v11);
    a3 = v36;
    a5 = v37;
    LOBYTE(a6) = v35;
    a2 = v34;
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v12 + 8))(v21, v11);
  }
  uint64_t v30 = (void *)sub_1D7A9BF98();
  uint64_t v31 = swift_allocObject();
  *(unsigned char *)(v31 + 16) = v22;
  *(void *)(v31 + 24) = v38;
  *(void *)(v31 + 32) = a5;
  *(unsigned char *)(v31 + 40) = a6 & 1;
  *(void *)(v31 + 48) = a2;
  *(void *)(v31 + 56) = a3;
  aBlock[4] = (uint64_t)sub_1D78C2028;
  aBlock[5] = v31;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  void aBlock[2] = (uint64_t)sub_1D78ADCEC;
  aBlock[3] = (uint64_t)&block_descriptor_97;
  uint64_t v32 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v32);
}

unint64_t sub_1D78B49A0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF7938);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D7AA4E80;
  *(void *)(inited + 32) = 0x656D6F6374756FLL;
  *(void *)(inited + 40) = 0xE700000000000000;
  uint64_t v9 = sub_1D7A9BF98();
  swift_bridgeObjectRelease();
  *(void *)(inited + 48) = v9;
  strcpy((char *)(inited + 56), "documentType");
  *(unsigned char *)(inited + 69) = 0;
  *(_WORD *)(inited + 70) = -5120;
  *(void *)(inited + 72) = sub_1D7A9BF98();
  *(void *)(inited + 80) = 0x444D747365547369;
  *(void *)(inited + 88) = 0xE90000000000004CLL;
  *(void *)(inited + 96) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithBool_, a4 & 1);
  unint64_t v10 = sub_1D785F2C8(inited);
  if (a6)
  {
    uint64_t v11 = sub_1D7A9BF98();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1D78A12E8(v11, 0x4449656C646E7562, 0xE800000000000000, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
  }
  return v10;
}

uint64_t DaemonAnalytics.DigitalPresentmentSpinnerShownOutcome.analyticsValue.getter()
{
  uint64_t v1 = *v0 >> 62;
  uint64_t v2 = 0x6C616E696D726574;
  if (v1 != 1) {
    uint64_t v2 = 0x73736563637573;
  }
  if (v1) {
    return v2;
  }
  else {
    return 0x6C62617972746572;
  }
}

uint64_t DaemonAnalytics.DigitalPresentmentSpinnerShownOutcome.error.getter()
{
  uint64_t v1 = *v0;
  unint64_t v2 = (unint64_t)*v0 >> 62;
  if (v2 == 2) {
    return 0;
  }
  uint64_t v3 = (void *)(v1 & 0x3FFFFFFFFFFFFFFFLL);
  if (v2 == 1) {
    v1 &= 0x3FFFFFFFFFFFFFFFuLL;
  }
  id v4 = v3;
  return v1;
}

void static DaemonAnalytics.sendDigitalPresentmentSpinnerShownEvent(outcome:duration:)(unint64_t *a1, double a2)
{
  uint64_t v4 = sub_1D7A9B5F8();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6, v7, v8, v9, v10, v11, v12);
  uint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v15 = *a1;
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v16 = __swift_project_value_buffer(v4, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v14, v16, v4);
  uint64_t v17 = (void *)(v15 & 0x3FFFFFFFFFFFFFFFLL);
  id v18 = (id)(v15 & 0x3FFFFFFFFFFFFFFFLL);
  id v19 = (id)(v15 & 0x3FFFFFFFFFFFFFFFLL);
  uint64_t v20 = sub_1D7A9B5D8();
  os_log_type_t v21 = sub_1D7A9C748();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    unint64_t v34 = v15;
    aBlock[0] = v33;
    unint64_t v23 = v15 >> 62;
    *(_DWORD *)uint64_t v22 = 136315394;
    unint64_t v24 = 0xED0000726F727245;
    uint64_t v25 = 0x6C616E696D726574;
    if (v15 >> 62 != 1)
    {
      uint64_t v25 = 0x73736563637573;
      unint64_t v24 = 0xE700000000000000;
    }
    if (v23) {
      uint64_t v26 = v25;
    }
    else {
      uint64_t v26 = 0x6C62617972746572;
    }
    if (v23) {
      unint64_t v27 = v24;
    }
    else {
      unint64_t v27 = 0xEE00726F72724565;
    }
    uint64_t v35 = sub_1D7923300(v26, v27, aBlock);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease();

    *(_WORD *)(v22 + 12) = 2048;
    uint64_t v35 = *(void *)&a2;
    sub_1D7A9C9E8();
    _os_log_impl(&dword_1D7853000, v20, v21, "sendDigitalPresentmentSpinnerShownEvent outcome = %s duration = %f", (uint8_t *)v22, 0x16u);
    uint64_t v28 = v33;
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v28, -1, -1);
    MEMORY[0x1D947D740](v22, -1, -1);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
    unint64_t v15 = v34;
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
  }
  uint64_t v29 = (void *)sub_1D7A9BF98();
  uint64_t v30 = swift_allocObject();
  *(double *)(v30 + 16) = a2;
  *(void *)(v30 + 24) = v15;
  aBlock[4] = (uint64_t)sub_1D78C2078;
  aBlock[5] = v30;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  void aBlock[2] = (uint64_t)sub_1D78ADCEC;
  aBlock[3] = (uint64_t)&block_descriptor_103;
  uint64_t v31 = _Block_copy(aBlock);
  id v32 = v17;
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v31);
}

unint64_t sub_1D78B5080(unint64_t a1, double a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF7938);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D7AA0A40;
  *(void *)(inited + 32) = 0x6E6F697461727564;
  *(void *)(inited + 40) = 0xE800000000000000;
  *(void *)(inited + 48) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, a2);
  *(void *)(inited + 56) = 0x656D6F6374756FLL;
  *(void *)(inited + 64) = 0xE700000000000000;
  uint64_t v5 = sub_1D7A9BF98();
  swift_bridgeObjectRelease();
  *(void *)(inited + 72) = v5;
  unint64_t v6 = sub_1D785F2C8(inited);
  if (a1 >> 62 != 2)
  {
    uint64_t v7 = (void *)(a1 & 0x3FFFFFFFFFFFFFFFLL);
    swift_getErrorValue();
    id v8 = (id)(a1 & 0x3FFFFFFFFFFFFFFFLL);
    id v9 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, sub_1D7A9D558());
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1D78A12E8((uint64_t)v9, 0xD000000000000010, 0x80000001D7AC0A70, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
  }
  return v6;
}

void static DaemonAnalytics.sendMobileDocumentReaderAttestationKeyCreationFailedEvent(error:)(void *a1)
{
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v4, v5, v6, v7, v8, v9, v10);
  uint64_t v12 = (char *)&aBlock[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v13 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v12, v13, v2);
  uint64_t v14 = sub_1D7A9B5D8();
  os_log_type_t v15 = sub_1D7A9C748();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl(&dword_1D7853000, v14, v15, "sendMobileDocumentReaderSEKeyCreationFailedEvent", v16, 2u);
    MEMORY[0x1D947D740](v16, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);
  uint64_t v17 = (void *)sub_1D7A9BF98();
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a1;
  aBlock[4] = sub_1D78C20BC;
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1D78ADCEC;
  aBlock[3] = &block_descriptor_109;
  id v19 = _Block_copy(aBlock);
  id v20 = a1;
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v19);
}

unint64_t sub_1D78B54F8(void *a1)
{
  unint64_t v2 = sub_1D785F2C8(MEMORY[0x1E4FBC860]);
  id v3 = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF9740);
  if (swift_dynamicCast())
  {
    id v4 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, qword_1D7AA6070[v9]);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1D78A12E8((uint64_t)v4, 0x646F43726F727265, 0xE900000000000065, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v6 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, -1);
    char v7 = swift_isUniquelyReferenced_nonNull_native();
    sub_1D78A12E8((uint64_t)v6, 0x646F43726F727265, 0xE900000000000065, v7);
    swift_bridgeObjectRelease();
  }
  return v2;
}

void static DaemonAnalytics.sendMobileDocumentReaderSEPairingResultEvent(result:)(void *a1, char a2)
{
  uint64_t v4 = sub_1D7A9B5F8();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6, v7, v8, v9, v10, v11, v12);
  uint64_t v14 = (char *)&aBlock[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v15 = __swift_project_value_buffer(v4, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v14, v15, v4);
  uint64_t v16 = sub_1D7A9B5D8();
  os_log_type_t v17 = sub_1D7A9C748();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl(&dword_1D7853000, v16, v17, "sendMobileDocumentReaderSEKeyCreationFailedEvent", v18, 2u);
    MEMORY[0x1D947D740](v18, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
  id v19 = (void *)sub_1D7A9BF98();
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a1;
  char v21 = a2 & 1;
  *(unsigned char *)(v20 + 24) = v21;
  aBlock[4] = sub_1D78C210C;
  aBlock[5] = v20;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1D78ADCEC;
  aBlock[3] = &block_descriptor_115;
  uint64_t v22 = _Block_copy(aBlock);
  sub_1D78C2118(a1, v21);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v22);
}

unint64_t sub_1D78B58F8(void *a1, char a2)
{
  unint64_t v4 = sub_1D785F2C8(MEMORY[0x1E4FBC860]);
  if (a2)
  {
    sub_1D78C4038(0, (unint64_t *)&qword_1EBDF93C0);
    id v8 = a1;
    uint64_t v9 = sub_1D7A9C938();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1D78A12E8(v9, 0x73736563637573, 0xE700000000000000, isUniquelyReferenced_nonNull_native);
    unint64_t v7 = v4;
    swift_bridgeObjectRelease();
    id v11 = a1;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF9740);
    if (swift_dynamicCast())
    {
      id v12 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, qword_1D7AA6070[(__int16)v4]);
      char v13 = swift_isUniquelyReferenced_nonNull_native();
      sub_1D78A12E8((uint64_t)v12, 0x646F43726F727265, 0xE900000000000065, v13);
      swift_bridgeObjectRelease();
      sub_1D78C2100(a1, 1);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      id v14 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, -1);
      char v15 = swift_isUniquelyReferenced_nonNull_native();
      sub_1D78A12E8((uint64_t)v14, 0x646F43726F727265, 0xE900000000000065, v15);
      swift_bridgeObjectRelease();
      sub_1D78C2100(a1, 1);
    }
  }
  else
  {
    sub_1D78C4038(0, (unint64_t *)&qword_1EBDF93C0);
    uint64_t v5 = sub_1D7A9C938();
    char v6 = swift_isUniquelyReferenced_nonNull_native();
    sub_1D78A12E8(v5, 0x73736563637573, 0xE700000000000000, v6);
    unint64_t v7 = v4;
    swift_bridgeObjectRelease();
  }
  return v7;
}

void static DaemonAnalytics.sendResponseValidationResultEvent(result:issuerCertificateChain:)(void *a1, int a2, unint64_t a3)
{
  uint64_t v6 = sub_1D7A9B5F8();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v8, v9, v10, v11, v12, v13, v14);
  uint64_t v16 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v17 = __swift_project_value_buffer(v6, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v16, v17, v6);
  swift_bridgeObjectRetain_n();
  uint64_t v18 = sub_1D7A9B5D8();
  int v19 = sub_1D7A9C748();
  if (!os_log_type_enabled(v18, (os_log_type_t)v19))
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v6);
LABEL_26:
    uint64_t v53 = (void *)sub_1D7A9BF98();
    uint64_t v54 = swift_allocObject();
    *(void *)(v54 + 16) = a1;
    *(unsigned char *)(v54 + 24) = a2 & 1;
    *(void *)(v54 + 32) = a3;
    aBlock[4] = (uint64_t)sub_1D78C2168;
    aBlock[5] = v54;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    void aBlock[2] = (uint64_t)sub_1D78ADCEC;
    aBlock[3] = (uint64_t)&block_descriptor_121;
    uint64_t v55 = _Block_copy(aBlock);
    swift_bridgeObjectRetain();
    sub_1D78C2118(a1, a2 & 1);
    swift_release();
    AnalyticsSendEventLazy();
    _Block_release(v55);

    return;
  }
  uint64_t v20 = (uint8_t *)swift_slowAlloc();
  uint64_t v61 = swift_slowAlloc();
  aBlock[0] = v61;
  uint64_t v63 = v20;
  *(_DWORD *)uint64_t v20 = 136315138;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v21 = sub_1D7A9CFB8();
  }
  else
  {
    uint64_t v21 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  os_log_t v64 = v18;
  uint64_t v65 = v16;
  int v62 = v19;
  if (!v21)
  {
    swift_bridgeObjectRelease();
    unint64_t v23 = (void *)MEMORY[0x1E4FBC860];
LABEL_25:
    uint64_t v47 = v63;
    uint64_t v48 = MEMORY[0x1D947B0A0](v23, MEMORY[0x1E4FBB1A0]);
    unint64_t v50 = v49;
    swift_bridgeObjectRelease();
    uint64_t v67 = sub_1D7923300(v48, v50, aBlock);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    os_log_t v51 = v64;
    _os_log_impl(&dword_1D7853000, v64, (os_log_type_t)v62, "sendResponseValidationResultEvent issuerCertificateChain=%s", v47, 0xCu);
    uint64_t v52 = v61;
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v52, -1, -1);
    MEMORY[0x1D947D740](v47, -1, -1);

    (*(void (**)(char *, uint64_t))(v7 + 8))(v65, v6);
    goto LABEL_26;
  }
  if (v21 >= 1)
  {
    uint64_t v57 = v7;
    uint64_t v58 = v6;
    int v59 = a2;
    uint64_t v60 = a1;
    unint64_t v66 = a3;
    if ((a3 & 0xC000000000000001) != 0)
    {
      uint64_t v22 = 0;
      unint64_t v23 = (void *)MEMORY[0x1E4FBC860];
      do
      {
        unint64_t v24 = (__SecCertificate *)MEMORY[0x1D947BA10](v22, a3);
        CFDataRef v25 = SecCertificateCopyData(v24);
        uint64_t v26 = sub_1D7A9B028();
        unint64_t v28 = v27;

        uint64_t v29 = sub_1D7A9B008();
        uint64_t v31 = v30;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v23 = sub_1D789E300(0, v23[2] + 1, 1, v23);
        }
        unint64_t v33 = v23[2];
        unint64_t v32 = v23[3];
        if (v33 >= v32 >> 1) {
          unint64_t v23 = sub_1D789E300((void *)(v32 > 1), v33 + 1, 1, v23);
        }
        ++v22;
        _OWORD v23[2] = v33 + 1;
        unint64_t v34 = &v23[2 * v33];
        v34[4] = v29;
        v34[5] = v31;
        swift_unknownObjectRelease();
        sub_1D78607E8(v26, v28);
        a3 = v66;
      }
      while (v21 != v22);
    }
    else
    {
      uint64_t v35 = 0;
      unint64_t v23 = (void *)MEMORY[0x1E4FBC860];
      do
      {
        uint64_t v36 = (__SecCertificate *)*(id *)(a3 + 8 * v35 + 32);
        CFDataRef v37 = SecCertificateCopyData(v36);
        uint64_t v38 = sub_1D7A9B028();
        unint64_t v40 = v39;

        uint64_t v41 = sub_1D7A9B008();
        uint64_t v43 = v42;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v23 = sub_1D789E300(0, v23[2] + 1, 1, v23);
        }
        unint64_t v45 = v23[2];
        unint64_t v44 = v23[3];
        if (v45 >= v44 >> 1) {
          unint64_t v23 = sub_1D789E300((void *)(v44 > 1), v45 + 1, 1, v23);
        }
        ++v35;
        _OWORD v23[2] = v45 + 1;
        char v46 = &v23[2 * v45];
        v46[4] = v41;
        v46[5] = v43;

        sub_1D78607E8(v38, v40);
        a3 = v66;
      }
      while (v21 != v35);
    }
    swift_bridgeObjectRelease();
    a1 = v60;
    LOBYTE(a2) = v59;
    uint64_t v7 = v57;
    uint64_t v6 = v58;
    goto LABEL_25;
  }
  __break(1u);
}

void sub_1D78B611C(void *a1, char a2, unint64_t a3)
{
  sub_1D785F2C8(MEMORY[0x1E4FBC860]);
  if (a2)
  {
    sub_1D78C4038(0, (unint64_t *)&qword_1EBDF8260);
    id v9 = a1;
    uint64_t v10 = sub_1D7A9C978();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1D78A12E8(v10, 0x746C75736572, 0xE600000000000000, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    id v12 = a1;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF9740);
    if (swift_dynamicCast())
    {
      unint64_t v3 = v44;
      sub_1D7A9D258();
      uint64_t v13 = sub_1D7A9BF98();
      swift_bridgeObjectRelease();
      char v14 = swift_isUniquelyReferenced_nonNull_native();
      sub_1D78A12E8(v13, 0x646F43726F727265, 0xE900000000000065, v14);
      swift_bridgeObjectRelease();
      sub_1D78C2100(a1, 1);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1D78C2100(a1, 1);
    }
  }
  else
  {
    sub_1D78C4038(0, (unint64_t *)&qword_1EBDF8260);
    uint64_t v7 = sub_1D7A9C978();
    char v8 = swift_isUniquelyReferenced_nonNull_native();
    sub_1D78A12E8(v7, 0x746C75736572, 0xE600000000000000, v8);
    swift_bridgeObjectRelease();
  }
  unint64_t v15 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t v16 = sub_1D7A9CFB8();
  }
  else
  {
    unint64_t v16 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  if (!v16)
  {
LABEL_21:
    swift_bridgeObjectRelease();
    uint64_t v29 = a3 & 0xFFFFFFFFFFFFFF8;
    if (!v15) {
      goto LABEL_22;
    }
    goto LABEL_25;
  }
  unint64_t v3 = a3 & 0xC000000000000001;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v17 = (id)MEMORY[0x1D947BA10](0, a3);
  }
  else
  {
    if (!*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    id v17 = *(id *)(a3 + 32);
  }
  uint64_t v18 = v17;
  swift_bridgeObjectRelease();
  object = SecCertificateRef.commonName()().value._object;

  if (object)
  {
    uint64_t v20 = sub_1D7A9BF98();
    swift_bridgeObjectRelease();
    char v21 = swift_isUniquelyReferenced_nonNull_native();
    sub_1D78A12E8(v20, 0xD000000000000018, 0x80000001D7AC0A50, v21);
    swift_bridgeObjectRelease();
  }
  if (v3)
  {
    swift_bridgeObjectRetain();
    uint64_t v22 = (__SecCertificate *)MEMORY[0x1D947BA10](0, a3);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (!*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_50;
    }
    uint64_t v22 = (__SecCertificate *)*(id *)(a3 + 32);
  }
  CFDataRef v23 = SecCertificateCopySerialNumberData(v22, 0);
  if (v23)
  {
    CFDataRef v24 = v23;
    uint64_t v25 = sub_1D7A9B028();
    unint64_t v3 = v26;

    sub_1D7A9B008();
    sub_1D78607E8(v25, v3);
    uint64_t v27 = sub_1D7A9BF98();
    swift_bridgeObjectRelease();
    char v28 = swift_isUniquelyReferenced_nonNull_native();
    sub_1D78A12E8(v27, 0xD00000000000001ALL, 0x80000001D7AC0A30, v28);
    goto LABEL_21;
  }

  uint64_t v29 = a3 & 0xFFFFFFFFFFFFFF8;
  if (!v15)
  {
LABEL_22:
    uint64_t v30 = *(void *)(v29 + 16);
    if (!v16) {
      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  swift_bridgeObjectRetain();
  uint64_t v30 = sub_1D7A9CFB8();
  swift_bridgeObjectRelease();
  if (!v16) {
    return;
  }
LABEL_26:
  if (v30 < 2) {
    return;
  }
  if (__OFSUB__(v16--, 1)) {
    goto LABEL_46;
  }
  unint64_t v3 = a3 & 0xC000000000000001;
  if ((a3 & 0xC000000000000001) == 0)
  {
    if ((v16 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v16 < *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      id v32 = *(id *)(a3 + 8 * v16 + 32);
      goto LABEL_32;
    }
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
LABEL_47:
  swift_bridgeObjectRetain();
  id v32 = (id)MEMORY[0x1D947BA10](v16, a3);
  swift_bridgeObjectRelease();
LABEL_32:
  unint64_t v33 = SecCertificateRef.commonName()().value._object;

  if (v33)
  {
    uint64_t v34 = sub_1D7A9BF98();
    swift_bridgeObjectRelease();
    char v35 = swift_isUniquelyReferenced_nonNull_native();
    sub_1D78A12E8(v34, 0xD000000000000014, 0x80000001D7AC0A10, v35);
    swift_bridgeObjectRelease();
  }
  if (v3)
  {
    swift_bridgeObjectRetain();
    uint64_t v36 = (__SecCertificate *)MEMORY[0x1D947BA10](v16, a3);
    swift_bridgeObjectRelease();
    goto LABEL_39;
  }
  if ((v16 & 0x8000000000000000) != 0) {
    goto LABEL_51;
  }
  if (v16 >= *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_52:
    __break(1u);
    return;
  }
  uint64_t v36 = (__SecCertificate *)*(id *)(a3 + 8 * v16 + 32);
LABEL_39:
  CFDataRef v37 = SecCertificateCopySerialNumberData(v36, 0);
  if (v37)
  {
    CFDataRef v38 = v37;
    uint64_t v39 = sub_1D7A9B028();
    unint64_t v41 = v40;

    sub_1D7A9B008();
    sub_1D78607E8(v39, v41);
    uint64_t v42 = sub_1D7A9BF98();
    swift_bridgeObjectRelease();
    char v43 = swift_isUniquelyReferenced_nonNull_native();
    sub_1D78A12E8(v42, 0xD000000000000016, 0x80000001D7AC09F0, v43);
    swift_bridgeObjectRelease();
  }
  else
  {
  }
}

CoreIDVShared::DaemonAnalytics::VICALFetchResult_optional __swiftcall DaemonAnalytics.VICALFetchResult.init(rawValue:)(Swift::String rawValue)
{
  return (CoreIDVShared::DaemonAnalytics::VICALFetchResult_optional)sub_1D78BF86C(v1);
}

uint64_t DaemonAnalytics.VICALFetchResult.rawValue.getter()
{
  uint64_t result = 0x73736563637573;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6B6361626C6C6166;
      break;
    case 2:
      uint64_t result = 0x6572756C696166;
      break;
    case 3:
      uint64_t result = 0x686361436D6F7266;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1D78B67D4(unsigned __int8 *a1, char *a2)
{
  return sub_1D7997BCC(*a1, *a2);
}

uint64_t sub_1D78B67E0()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D78B68BC()
{
  sub_1D7A9C0B8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D78B6980()
{
  return sub_1D7A9D628();
}

CoreIDVShared::DaemonAnalytics::VICALFetchResult_optional sub_1D78B6A58(Swift::String *a1)
{
  return DaemonAnalytics.VICALFetchResult.init(rawValue:)(*a1);
}

void sub_1D78B6A64(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE700000000000000;
  uint64_t v3 = 0x73736563637573;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE800000000000000;
      uint64_t v3 = 0x6B6361626C6C6166;
      goto LABEL_3;
    case 2:
      *a1 = 0x6572756C696166;
      a1[1] = 0xE700000000000000;
      break;
    case 3:
      *a1 = 0x686361436D6F7266;
      a1[1] = 0xE900000000000065;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

void static DaemonAnalytics.sendVICALFetchedEvent(result:error:)(unsigned __int8 *a1, void *a2)
{
  aBlock[9] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = sub_1D7A9B5F8();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6, v7, v8, v9, v10, v11, v12);
  char v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *a1;
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v16 = __swift_project_value_buffer(v4, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v14, v16, v4);
  id v17 = a2;
  id v18 = a2;
  int v19 = sub_1D7A9B5D8();
  os_log_type_t v20 = sub_1D7A9C748();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = swift_slowAlloc();
    uint64_t v31 = (void *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    aBlock[0] = v32;
    *(_DWORD *)uint64_t v21 = 136315394;
    unint64_t v22 = 0xE700000000000000;
    uint64_t v23 = 0x73736563637573;
    uint64_t v33 = v15;
    switch(v15)
    {
      case 1:
        unint64_t v22 = 0xE800000000000000;
        uint64_t v23 = 0x6B6361626C6C6166;
        break;
      case 2:
        uint64_t v23 = 0x6572756C696166;
        break;
      case 3:
        unint64_t v22 = 0xE900000000000065;
        uint64_t v23 = 0x686361436D6F7266;
        break;
      default:
        break;
    }
    uint64_t v34 = sub_1D7923300(v23, v22, aBlock);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease();
    *(_WORD *)(v21 + 12) = 2112;
    if (a2)
    {
      id v24 = a2;
      uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v34 = v15;
      sub_1D7A9C9E8();
    }
    else
    {
      uint64_t v34 = 0;
      sub_1D7A9C9E8();
      uint64_t v15 = 0;
    }
    uint64_t v25 = v31;
    *uint64_t v31 = v15;

    _os_log_impl(&dword_1D7853000, v19, v20, "sendVICALFetchedEvent result=%s error=%@", (uint8_t *)v21, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF8C60);
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v25, -1, -1);
    uint64_t v26 = v32;
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v26, -1, -1);
    MEMORY[0x1D947D740](v21, -1, -1);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
    LOBYTE(v15) = v33;
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
  }
  uint64_t v27 = (void *)sub_1D7A9BF98();
  uint64_t v28 = swift_allocObject();
  *(unsigned char *)(v28 + 16) = v15;
  *(void *)(v28 + 24) = a2;
  aBlock[4] = (uint64_t)sub_1D78C21B0;
  aBlock[5] = v28;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  void aBlock[2] = (uint64_t)sub_1D78ADCEC;
  aBlock[3] = (uint64_t)&block_descriptor_128;
  uint64_t v29 = _Block_copy(aBlock);
  id v30 = a2;
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v29);
}

uint64_t sub_1D78B6FBC(uint64_t a1, void *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF7938);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D7AA08E0;
  *(void *)(inited + 32) = 0x746C75736572;
  *(void *)(inited + 40) = 0xE600000000000000;
  uint64_t v4 = sub_1D7A9BF98();
  swift_bridgeObjectRelease();
  *(void *)(inited + 48) = v4;
  unint64_t v5 = sub_1D785F2C8(inited);
  static ServerEnvironment.current(suiteNameOverride:)(0, 0, (char *)v14);
  uint64_t v6 = sub_1D7A9BF98();
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v14[0] = v5;
  sub_1D78A12E8(v6, 0x6D6E6F7269766E65, 0xEB00000000746E65, isUniquelyReferenced_nonNull_native);
  uint64_t v8 = v14[0];
  swift_bridgeObjectRelease();
  if (a2)
  {
    v14[4] = a2;
    id v9 = a2;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF9740);
    if (swift_dynamicCast())
    {
      uint64_t v10 = (void *)v14[3];
      v14[0] = qword_1D7AA6070[SLOWORD(v14[0])];
      sub_1D7A9D258();
      uint64_t v11 = sub_1D7A9BF98();
      swift_bridgeObjectRelease();
      char v12 = swift_isUniquelyReferenced_nonNull_native();
      v14[0] = v8;
      sub_1D78A12E8(v11, 0x646F43726F727265, 0xE900000000000065, v12);
      uint64_t v8 = v14[0];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  return v8;
}

CoreIDVShared::DaemonAnalytics::MobileDocumentReaderInvalidSessionReason_optional __swiftcall DaemonAnalytics.MobileDocumentReaderInvalidSessionReason.init(rawValue:)(Swift::String rawValue)
{
  return (CoreIDVShared::DaemonAnalytics::MobileDocumentReaderInvalidSessionReason_optional)sub_1D78BF86C(v1);
}

uint64_t DaemonAnalytics.MobileDocumentReaderInvalidSessionReason.rawValue.getter()
{
  uint64_t result = 0xD000000000000012;
  switch(*v0)
  {
    case 1:
      uint64_t v2 = 0x4D6C61636976;
      goto LABEL_4;
    case 2:
      uint64_t v2 = 0x4D79654B6573;
LABEL_4:
      uint64_t result = v2 & 0xFFFFFFFFFFFFLL | 0x7369000000000000;
      break;
    case 3:
      uint64_t result = 0x4D6E6F6973736573;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1D78B72E4(unsigned __int8 *a1, char *a2)
{
  return sub_1D79978C4(*a1, *a2);
}

uint64_t sub_1D78B72F0()
{
  return sub_1D7A1DF7C();
}

uint64_t sub_1D78B72F8()
{
  sub_1D7A9C0B8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D78B73CC()
{
  return sub_1D7A1F1E8();
}

CoreIDVShared::DaemonAnalytics::MobileDocumentReaderInvalidSessionReason_optional sub_1D78B73D4(Swift::String *a1)
{
  return DaemonAnalytics.MobileDocumentReaderInvalidSessionReason.init(rawValue:)(*a1);
}

void sub_1D78B73E0(uint64_t a1@<X8>)
{
  unint64_t v2 = 0x80000001D7ABB3F0;
  unint64_t v3 = 0xD000000000000012;
  switch(*v1)
  {
    case 1:
      unint64_t v3 = 0x73694D6C61636976;
      unint64_t v2 = 0xEC000000676E6973;
      goto LABEL_3;
    case 2:
      strcpy((char *)a1, "seKeyMissing");
      *(unsigned char *)(a1 + 13) = 0;
      *(_WORD *)(a1 + 14) = -5120;
      break;
    case 3:
      strcpy((char *)a1, "sessionMissing");
      *(unsigned char *)(a1 + 15) = -18;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

void static DaemonAnalytics.sendReadDocumentSessionStatus(status:)(char *a1)
{
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v4, v5, v6, v7, v8, v9, v10);
  char v12 = (char *)&aBlock[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v13 = *a1;
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v14 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v12, v14, v2);
  uint64_t v15 = sub_1D7A9B5D8();
  os_log_type_t v16 = sub_1D7A9C748();
  if (os_log_type_enabled(v15, v16))
  {
    id v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v17 = 0;
    _os_log_impl(&dword_1D7853000, v15, v16, "sendReadDocumentSessionStatus", v17, 2u);
    MEMORY[0x1D947D740](v17, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);
  id v18 = (void *)sub_1D7A9BF98();
  uint64_t v19 = swift_allocObject();
  *(unsigned char *)(v19 + 16) = v13;
  aBlock[4] = sub_1D78C21CC;
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1D78ADCEC;
  aBlock[3] = &block_descriptor_135;
  os_log_type_t v20 = _Block_copy(aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v20);
}

unint64_t sub_1D78B770C(unsigned __int8 a1)
{
  int v1 = a1;
  unint64_t v2 = sub_1D785F2C8(MEMORY[0x1E4FBC860]);
  sub_1D78C4038(0, (unint64_t *)&qword_1EBDF8260);
  if (v1 == 4)
  {
    uint64_t v3 = sub_1D7A9C978();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v11 = v2;
    uint64_t v5 = v3;
    uint64_t v6 = 0x737574617473;
  }
  else
  {
    uint64_t v7 = sub_1D7A9C978();
    char v8 = swift_isUniquelyReferenced_nonNull_native();
    sub_1D78A12E8(v7, 0x737574617473, 0xE600000000000000, v8);
    swift_bridgeObjectRelease();
    uint64_t v9 = sub_1D7A9BF98();
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v11 = v2;
    uint64_t v5 = v9;
    uint64_t v6 = 0x6E6F73616572;
  }
  sub_1D78A12E8(v5, v6, 0xE600000000000000, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  return v11;
}

CoreIDVShared::DaemonAnalytics::MobileDocumentReaderFetchLogoError_optional __swiftcall DaemonAnalytics.MobileDocumentReaderFetchLogoError.init(rawValue:)(Swift::String rawValue)
{
  return (CoreIDVShared::DaemonAnalytics::MobileDocumentReaderFetchLogoError_optional)sub_1D78BF86C(v1);
}

unint64_t DaemonAnalytics.MobileDocumentReaderFetchLogoError.rawValue.getter()
{
  unint64_t result = 0xD000000000000028;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000027;
      break;
    case 2:
      unint64_t result = 0xD000000000000029;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1D78B797C(unsigned __int8 *a1, char *a2)
{
  return sub_1D7997A78(*a1, *a2);
}

uint64_t sub_1D78B7988()
{
  return sub_1D7A1E068();
}

uint64_t sub_1D78B7990()
{
  return sub_1D7A354AC();
}

uint64_t sub_1D78B7998()
{
  return sub_1D7A1F114();
}

CoreIDVShared::DaemonAnalytics::MobileDocumentReaderFetchLogoError_optional sub_1D78B79A0(Swift::String *a1)
{
  return DaemonAnalytics.MobileDocumentReaderFetchLogoError.init(rawValue:)(*a1);
}

unint64_t sub_1D78B79AC@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = DaemonAnalytics.MobileDocumentReaderFetchLogoError.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void static DaemonAnalytics.sendMobileDocumentReaderFetchLogoResult(result:logoURLString:)(char *a1, uint64_t a2, uint64_t a3)
{
  char v5 = *a1;
  char v6 = a1[1];
  uint64_t v7 = (void *)sub_1D7A9BF98();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  *(unsigned char *)(v8 + 32) = v5;
  *(unsigned char *)(v8 + 33) = v6;
  v10[4] = sub_1D78C220C;
  v10[5] = v8;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 1107296256;
  v10[2] = sub_1D78ADCEC;
  v10[3] = &block_descriptor_142;
  uint64_t v9 = _Block_copy(v10);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v9);
}

uint64_t sub_1D78B7AE8(uint64_t a1, uint64_t a2, __int16 a3)
{
  unsigned __int8 v3 = a3;
  uint64_t v6 = sub_1D7A9B5F8();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v6, v8, v9, v10, v11, v12, v13, v14);
  id v17 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15, v18, v19, v20, v21, v22, v23, v24);
  uint64_t v26 = (char *)&v58 - v25;
  unint64_t v27 = sub_1D785F2C8(MEMORY[0x1E4FBC860]);
  unint64_t v63 = v27;
  if (a2)
  {
    unint64_t v28 = v27;
    uint64_t v29 = sub_1D7A9BF98();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v62 = v28;
    sub_1D78A12E8(v29, 7107189, 0xE300000000000000, isUniquelyReferenced_nonNull_native);
    unint64_t v63 = v62;
    swift_bridgeObjectRelease();
  }
  else
  {
  }
  if ((a3 & 0x100) != 0)
  {
    if (qword_1EBDF9DC8 != -1) {
      swift_once();
    }
    uint64_t v41 = v3;
    uint64_t v42 = __swift_project_value_buffer(v6, (uint64_t)qword_1EBDFBE70);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v17, v42, v6);
    char v43 = sub_1D7A9B5D8();
    os_log_type_t v44 = sub_1D7A9C748();
    if (os_log_type_enabled(v43, v44))
    {
      unint64_t v45 = (uint8_t *)swift_slowAlloc();
      uint64_t v46 = swift_slowAlloc();
      uint64_t v61 = v46;
      *(_DWORD *)unint64_t v45 = 136315138;
      unint64_t v47 = 0x80000001D7ABB430;
      uint64_t v48 = v46;
      uint64_t v49 = 0xD000000000000028;
      uint64_t v59 = v41;
      switch(v41)
      {
        case 1:
          uint64_t v49 = 0xD000000000000027;
          unint64_t v50 = "documentReaderCertificateInvalidLogoURL";
          goto LABEL_18;
        case 2:
          uint64_t v49 = 0xD000000000000029;
          unint64_t v50 = "documentReaderCertificateLogoHashMismatch";
          goto LABEL_18;
        case 3:
          unint64_t v50 = "documentReaderCertificateLogoFetchFailed";
LABEL_18:
          unint64_t v47 = (unint64_t)(v50 - 32) | 0x8000000000000000;
          break;
        default:
          break;
      }
      uint64_t v60 = sub_1D7923300(v49, v47, &v61);
      sub_1D7A9C9E8();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1D7853000, v43, v44, "sendMobileDocumentReaderFetchLogoStatus sending event stating fetch logo failed. Error code: %s.", v45, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D947D740](v48, -1, -1);
      MEMORY[0x1D947D740](v45, -1, -1);

      (*(void (**)(char *, uint64_t))(v7 + 8))(v17, v6);
      uint64_t v41 = v59;
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v7 + 8))(v17, v6);
    }
    sub_1D78C4038(0, (unint64_t *)&qword_1EBDF8260);
    uint64_t v51 = sub_1D7A9C978();
    uint64_t v52 = v63;
    char v53 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v61 = v52;
    sub_1D78A12E8(v51, 0x737574617473, 0xE600000000000000, v53);
    uint64_t v54 = v61;
    swift_bridgeObjectRelease();
    switch(v41)
    {
      case 0:
      case 1:
      case 2:
      case 3:
        uint64_t v55 = sub_1D7A9BF98();
        swift_bridgeObjectRelease();
        char v37 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v61 = v54;
        uint64_t v38 = v55;
        uint64_t v39 = 0x646F43726F727265;
        uint64_t v40 = 0xE900000000000065;
        break;
      default:
        JUMPOUT(0);
    }
  }
  else
  {
    if (qword_1EBDF9DC8 != -1) {
      swift_once();
    }
    uint64_t v31 = __swift_project_value_buffer(v6, (uint64_t)qword_1EBDFBE70);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v26, v31, v6);
    uint64_t v32 = sub_1D7A9B5D8();
    os_log_type_t v33 = sub_1D7A9C748();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v34 = 0;
      _os_log_impl(&dword_1D7853000, v32, v33, "sendMobileDocumentReaderFetchLogoStatus sending event stating fetch logo was a success.", v34, 2u);
      MEMORY[0x1D947D740](v34, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v26, v6);
    sub_1D78C4038(0, (unint64_t *)&qword_1EBDF8260);
    uint64_t v35 = sub_1D7A9C978();
    uint64_t v36 = v63;
    char v37 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v61 = v36;
    uint64_t v38 = v35;
    uint64_t v39 = 0x737574617473;
    uint64_t v40 = 0xE600000000000000;
  }
  sub_1D78A12E8(v38, v39, v40, v37);
  uint64_t v56 = v61;
  swift_bridgeObjectRelease();
  return v56;
}

uint64_t DaemonAnalytics.deinit()
{
  return v0;
}

CoreIDVShared::IDCSAnalytics::ReaderAuthOutcome_optional __swiftcall IDCSAnalytics.ReaderAuthOutcome.init(rawValue:)(Swift::String rawValue)
{
  return (CoreIDVShared::IDCSAnalytics::ReaderAuthOutcome_optional)sub_1D78BF54C(v1);
}

uint64_t IDCSAnalytics.ReaderAuthOutcome.rawValue.getter()
{
  uint64_t v1 = 0x6E65687475616E75;
  if (*v0 != 1) {
    uint64_t v1 = 0x64657463656A6572;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x69746E6568747561;
  }
}

uint64_t sub_1D78B8194(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1D7998424(*a1, *a2);
}

uint64_t sub_1D78B81A0()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D78B825C()
{
  sub_1D7A9C0B8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D78B8304()
{
  return sub_1D7A9D628();
}

CoreIDVShared::IDCSAnalytics::ReaderAuthOutcome_optional sub_1D78B83BC(Swift::String *a1)
{
  return IDCSAnalytics.ReaderAuthOutcome.init(rawValue:)(*a1);
}

void sub_1D78B83C8(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xED00006465746163;
  unint64_t v4 = 0xEF64657461636974;
  uint64_t v5 = 0x6E65687475616E75;
  if (v2 != 1)
  {
    uint64_t v5 = 0x64657463656A6572;
    unint64_t v4 = 0xE800000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x69746E6568747561;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

CoreIDVShared::IDCSAnalytics::ReaderAuthFailureReason_optional __swiftcall IDCSAnalytics.ReaderAuthFailureReason.init(rawValue:)(Swift::String rawValue)
{
  int v2 = v1;
  unint64_t v3 = sub_1D7A9D058();
  result.SecCertificateRef value = swift_bridgeObjectRelease();
  char v5 = 15;
  if (v3 < 0xF) {
    char v5 = v3;
  }
  *int v2 = v5;
  return result;
}

unint64_t IDCSAnalytics.ReaderAuthFailureReason.rawValue.getter()
{
  unint64_t result = 0x7250687475416F6ELL;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
      unint64_t result = 0xD000000000000014;
      break;
    case 3:
    case 0xA:
    case 0xB:
      unint64_t result = 0xD000000000000012;
      break;
    case 4:
      unint64_t result = 0xD000000000000011;
      break;
    case 5:
      unint64_t result = 0xD000000000000013;
      break;
    case 6:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 7:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 8:
      unint64_t result = 0xD000000000000017;
      break;
    case 9:
      unint64_t result = 0xD000000000000015;
      break;
    case 0xC:
      unint64_t result = 0xD000000000000016;
      break;
    case 0xD:
      unint64_t result = 0xD000000000000013;
      break;
    case 0xE:
      unint64_t result = 0x726568746FLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1D78B8660(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1D79982C0(*a1, *a2);
}

uint64_t sub_1D78B866C(uint64_t a1, uint64_t a2)
{
  return sub_1D78BAE04(a1, a2, (void (*)(uint64_t))IDCSAnalytics.ReaderAuthFailureReason.rawValue.getter);
}

uint64_t sub_1D78B8684(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D78BAE8C(a1, a2, a3, (void (*)(void))IDCSAnalytics.ReaderAuthFailureReason.rawValue.getter);
}

uint64_t sub_1D78B869C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D78BAF0C(a1, a2, a3, (void (*)(uint64_t))IDCSAnalytics.ReaderAuthFailureReason.rawValue.getter);
}

CoreIDVShared::IDCSAnalytics::ReaderAuthFailureReason_optional sub_1D78B86B4(Swift::String *a1)
{
  return IDCSAnalytics.ReaderAuthFailureReason.init(rawValue:)(*a1);
}

unint64_t sub_1D78B86C0@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = IDCSAnalytics.ReaderAuthFailureReason.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t IDCSAnalytics.PhysicalPresentmentRequestedEventOutcome.description.getter()
{
  uint64_t v1 = *v0;
  if (!*v0) {
    return 0x73736563637553;
  }
  id v2 = v1;
  unint64_t v3 = (void *)sub_1D7A9AE48();
  objc_msgSend(v3, sel_code);

  uint64_t v4 = sub_1D7A9D258();
  return v4;
}

uint64_t sub_1D78B8790()
{
  uint64_t v1 = *v0;
  if (!*v0) {
    return 0x73736563637553;
  }
  id v2 = v1;
  unint64_t v3 = (void *)sub_1D7A9AE48();
  objc_msgSend(v3, sel_code);

  uint64_t v4 = sub_1D7A9D258();
  return v4;
}

CoreIDVShared::IDCSAnalytics::NetworkStatus_optional __swiftcall IDCSAnalytics.NetworkStatus.init(rawValue:)(Swift::String rawValue)
{
  return (CoreIDVShared::IDCSAnalytics::NetworkStatus_optional)sub_1D78BC830(v1);
}

uint64_t IDCSAnalytics.NetworkStatus.rawValue.getter()
{
  if (*v0) {
    return 0x656E696C66666FLL;
  }
  else {
    return 0x656E696C6E6FLL;
  }
}

uint64_t sub_1D78B887C(char *a1, char *a2)
{
  return sub_1D799866C(*a1, *a2);
}

uint64_t sub_1D78B8888()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D78B8908()
{
  sub_1D7A9C0B8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D78B8974()
{
  return sub_1D7A9D628();
}

CoreIDVShared::IDCSAnalytics::NetworkStatus_optional sub_1D78B89F0(Swift::String *a1)
{
  return IDCSAnalytics.NetworkStatus.init(rawValue:)(*a1);
}

void sub_1D78B89FC(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x656E696C6E6FLL;
  if (*v1) {
    uint64_t v2 = 0x656E696C66666FLL;
  }
  unint64_t v3 = 0xE600000000000000;
  if (*v1) {
    unint64_t v3 = 0xE700000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

CoreIDVShared::IDCSAnalytics::ConnectionType_optional __swiftcall IDCSAnalytics.ConnectionType.init(rawValue:)(Swift::String rawValue)
{
  return (CoreIDVShared::IDCSAnalytics::ConnectionType_optional)sub_1D78BF54C(v1);
}

uint64_t IDCSAnalytics.ConnectionType.rawValue.getter()
{
  uint64_t v1 = 1768319351;
  if (*v0 != 1) {
    uint64_t v1 = 0x726568746FLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x72616C756C6C6563;
  }
}

uint64_t sub_1D78B8A94(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1D7998568(*a1, *a2);
}

uint64_t sub_1D78B8AA0()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D78B8B38()
{
  sub_1D7A9C0B8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D78B8BBC()
{
  return sub_1D7A9D628();
}

CoreIDVShared::IDCSAnalytics::ConnectionType_optional sub_1D78B8C50(Swift::String *a1)
{
  return IDCSAnalytics.ConnectionType.init(rawValue:)(*a1);
}

void sub_1D78B8C5C(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE800000000000000;
  unint64_t v4 = 0xE400000000000000;
  uint64_t v5 = 1768319351;
  if (v2 != 1)
  {
    uint64_t v5 = 0x726568746FLL;
    unint64_t v4 = 0xE500000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x72616C756C6C6563;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

void static IDCSAnalytics.sendReaderAuthOutcomeEvent(docType:outcome:failureReason:)(uint64_t a1, unint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  uint64_t v8 = sub_1D7A9B5F8();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8, v10, v11, v12, v13, v14, v15, v16);
  uint64_t v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(v19) = *a3;
  LODWORD(v20) = *a4;
  swift_bridgeObjectRetain();
  uint64_t v21 = sub_1D78C2228((uint64_t)&unk_1F2F15FD8);
  swift_arrayDestroy();
  LOBYTE(a4) = sub_1D78ADBB4(a1, a2, v21);
  swift_bridgeObjectRelease();
  if ((a4 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    a2 = 0xE500000000000000;
    a1 = 0x726568746FLL;
  }
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v22 = __swift_project_value_buffer(v8, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v18, v22, v8);
  swift_bridgeObjectRetain_n();
  uint64_t v23 = sub_1D7A9B5D8();
  os_log_type_t v24 = sub_1D7A9C748();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v38 = v8;
    int v40 = v20;
    int v25 = v19;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v37 = swift_slowAlloc();
    aBlock[0] = v37;
    *(_DWORD *)uint64_t v19 = 136446722;
    swift_bridgeObjectRetain();
    uint64_t v41 = a1;
    uint64_t v42 = sub_1D7923300(a1, a2, aBlock);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v19 + 12) = 2082;
    unint64_t v26 = 0xEF64657461636974;
    uint64_t v27 = 0x6E65687475616E75;
    if (v25 != 1)
    {
      uint64_t v27 = 0x64657463656A6572;
      unint64_t v26 = 0xE800000000000000;
    }
    int v39 = v25;
    if (v25) {
      uint64_t v28 = v27;
    }
    else {
      uint64_t v28 = 0x69746E6568747561;
    }
    if (v25) {
      unint64_t v20 = v26;
    }
    else {
      unint64_t v20 = 0xED00006465746163;
    }
    uint64_t v42 = sub_1D7923300(v28, v20, aBlock);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 22) = 2082;
    LOBYTE(v20) = v40;
    if (v40 == 15)
    {
      unint64_t v29 = 0xE500000000000000;
      unint64_t v30 = 0x3E6C696E3CLL;
    }
    else
    {
      LOBYTE(v42) = v40;
      unint64_t v30 = IDCSAnalytics.ReaderAuthFailureReason.rawValue.getter();
      unint64_t v29 = v31;
    }
    uint64_t v32 = v38;
    uint64_t v42 = sub_1D7923300(v30, v29, aBlock);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1D7853000, v23, v24, "sendReaderAuthOutcomeEvent docType = %{public}s, outcome: %{public}s, failure reason = %{public}s", (uint8_t *)v19, 0x20u);
    uint64_t v33 = v37;
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v33, -1, -1);
    MEMORY[0x1D947D740](v19, -1, -1);

    (*(void (**)(char *, uint64_t))(v9 + 8))(v18, v32);
    a1 = v41;
    LOBYTE(v19) = v39;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v18, v8);
  }
  uint64_t v34 = (void *)sub_1D7A9BF98();
  uint64_t v35 = swift_allocObject();
  *(unsigned char *)(v35 + 16) = v19;
  *(void *)(v35 + 24) = a1;
  *(void *)(v35 + 32) = a2;
  *(unsigned char *)(v35 + 40) = v20;
  aBlock[4] = (uint64_t)sub_1D78C22F8;
  aBlock[5] = v35;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  void aBlock[2] = (uint64_t)sub_1D78ADCEC;
  aBlock[3] = (uint64_t)&block_descriptor_153;
  uint64_t v36 = _Block_copy(aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v36);
}

unint64_t sub_1D78B91A4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF7938);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D7AA08E0;
  *(void *)(inited + 32) = 0x656D6F6374756FLL;
  *(void *)(inited + 40) = 0xE700000000000000;
  uint64_t v7 = sub_1D7A9BF98();
  swift_bridgeObjectRelease();
  *(void *)(inited + 48) = v7;
  unint64_t v8 = sub_1D785F2C8(inited);
  if (a3)
  {
    uint64_t v9 = sub_1D7A9BF98();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1D78A12E8(v9, 0x65707954636F64, 0xE700000000000000, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
  }
  if (a4 != 15)
  {
    IDCSAnalytics.ReaderAuthFailureReason.rawValue.getter();
    uint64_t v11 = sub_1D7A9BF98();
    swift_bridgeObjectRelease();
    char v12 = swift_isUniquelyReferenced_nonNull_native();
    sub_1D78A12E8(v11, 0x526572756C696166, 0xED00006E6F736165, v12);
    swift_bridgeObjectRelease();
  }
  return v8;
}

CoreIDVShared::IDCSAnalytics::ReaderAuthOnlineOCSPOutcome_optional __swiftcall IDCSAnalytics.ReaderAuthOnlineOCSPOutcome.init(rawValue:)(Swift::String rawValue)
{
  return (CoreIDVShared::IDCSAnalytics::ReaderAuthOnlineOCSPOutcome_optional)sub_1D78BF54C(v1);
}

uint64_t IDCSAnalytics.ReaderAuthOnlineOCSPOutcome.rawValue.getter()
{
  uint64_t v1 = 0x64656B6F766572;
  if (*v0 != 1) {
    uint64_t v1 = 0x756C636E6F636E69;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6B6F766552746F6ELL;
  }
}

uint64_t sub_1D78B93F0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1D7997F3C(*a1, *a2);
}

uint64_t sub_1D78B93FC()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D78B94AC()
{
  sub_1D7A9C0B8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D78B9548()
{
  return sub_1D7A9D628();
}

CoreIDVShared::IDCSAnalytics::ReaderAuthOnlineOCSPOutcome_optional sub_1D78B95F4(Swift::String *a1)
{
  return IDCSAnalytics.ReaderAuthOnlineOCSPOutcome.init(rawValue:)(*a1);
}

void sub_1D78B9600(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xEA00000000006465;
  unint64_t v4 = 0xE700000000000000;
  uint64_t v5 = 0x64656B6F766572;
  if (v2 != 1)
  {
    uint64_t v5 = 0x756C636E6F636E69;
    unint64_t v4 = 0xEC00000065766973;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x6B6F766552746F6ELL;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

void static IDCSAnalytics.sendOnlineOCSPOutcomeEvent(docType:outcome:)(uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6 = sub_1D7A9B5F8();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v8, v9, v10, v11, v12, v13, v14);
  uint64_t v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v17 = *a3;
  swift_bridgeObjectRetain();
  uint64_t v18 = sub_1D78C2228((uint64_t)&unk_1F2F16080);
  swift_arrayDestroy();
  LOBYTE(a3) = sub_1D78ADBB4(a1, a2, v18);
  swift_bridgeObjectRelease();
  if ((a3 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    a2 = 0xE500000000000000;
    a1 = 0x726568746FLL;
  }
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v19 = __swift_project_value_buffer(v6, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v16, v19, v6);
  swift_bridgeObjectRetain_n();
  unint64_t v20 = sub_1D7A9B5D8();
  os_log_type_t v21 = sub_1D7A9C748();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v32 = v6;
    uint64_t v22 = swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    aBlock[0] = v31;
    *(_DWORD *)uint64_t v22 = 136446466;
    swift_bridgeObjectRetain();
    uint64_t v34 = a1;
    uint64_t v35 = sub_1D7923300(a1, a2, aBlock);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v22 + 12) = 2082;
    unint64_t v23 = 0xE700000000000000;
    uint64_t v24 = 0x64656B6F766572;
    if (v17 != 1)
    {
      uint64_t v24 = 0x756C636E6F636E69;
      unint64_t v23 = 0xEC00000065766973;
    }
    int v33 = v17;
    if (v17) {
      uint64_t v25 = v24;
    }
    else {
      uint64_t v25 = 0x6B6F766552746F6ELL;
    }
    if (v17) {
      unint64_t v26 = v23;
    }
    else {
      unint64_t v26 = 0xEA00000000006465;
    }
    uint64_t v35 = sub_1D7923300(v25, v26, aBlock);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1D7853000, v20, v21, "sendOnlineOCSPOutcomeEvent doctype = %{public}s, outcome: %{public}s", (uint8_t *)v22, 0x16u);
    uint64_t v27 = v31;
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v27, -1, -1);
    MEMORY[0x1D947D740](v22, -1, -1);

    (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v32);
    a1 = v34;
    LOBYTE(v17) = v33;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v6);
  }
  uint64_t v28 = (void *)sub_1D7A9BF98();
  uint64_t v29 = swift_allocObject();
  *(unsigned char *)(v29 + 16) = v17;
  *(void *)(v29 + 24) = a1;
  *(void *)(v29 + 32) = a2;
  aBlock[4] = (uint64_t)sub_1D78C2340;
  aBlock[5] = v29;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  void aBlock[2] = (uint64_t)sub_1D78ADCEC;
  aBlock[3] = (uint64_t)&block_descriptor_161;
  unint64_t v30 = _Block_copy(aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v30);
}

unint64_t sub_1D78B9ACC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF7938);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D7AA08E0;
  *(void *)(inited + 32) = 0x656D6F6374756FLL;
  *(void *)(inited + 40) = 0xE700000000000000;
  uint64_t v5 = sub_1D7A9BF98();
  swift_bridgeObjectRelease();
  *(void *)(inited + 48) = v5;
  unint64_t v6 = sub_1D785F2C8(inited);
  if (a3)
  {
    uint64_t v7 = sub_1D7A9BF98();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1D78A12E8(v7, 0x65707954636F64, 0xE700000000000000, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
  }
  return v6;
}

void static IDCSAnalytics.sendPhysicalPresentmentEvent(networkStatus:connectionType:presentmentResult:biometricAuthMethod:terminalAuthPerformed:portraitWasRequested:isAppleReader:)(os_log_t a1, unsigned __int8 *a2, uint64_t a3, unint64_t a4, int a5, int a6, int a7, int a8)
{
  LODWORD(v10) = a6;
  int v60 = a5;
  uint64_t v14 = sub_1D7A9B5F8();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14, v16, v17, v18, v19, v20, v21, v22);
  uint64_t v24 = (char *)&v50 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(a1) = LOBYTE(a1->isa);
  uint64_t v59 = *a2;
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v26 = __swift_project_value_buffer(v14, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v24, v26, v14);
  swift_bridgeObjectRetain_n();
  uint64_t v27 = sub_1D7A9B5D8();
  int v57 = sub_1D7A9C748();
  if (os_log_type_enabled(v27, (os_log_type_t)v57))
  {
    os_log_t v51 = v27;
    uint64_t v52 = v14;
    uint64_t v58 = a3;
    int v54 = v10;
    int v55 = a7;
    uint64_t v28 = swift_slowAlloc();
    uint64_t v50 = swift_slowAlloc();
    aBlock[0] = v50;
    *(_DWORD *)uint64_t v28 = 136316674;
    uint64_t v29 = 0x656E696C66666FLL;
    if ((a1 & 1) == 0) {
      uint64_t v29 = 0x656E696C6E6FLL;
    }
    unint64_t v30 = 0xE700000000000000;
    if ((a1 & 1) == 0) {
      unint64_t v30 = 0xE600000000000000;
    }
    int v53 = (int)a1;
    if (a1 == 2) {
      uint64_t v31 = 0x3E6C696E3CLL;
    }
    else {
      uint64_t v31 = v29;
    }
    if (a1 == 2) {
      unint64_t v32 = 0xE500000000000000;
    }
    else {
      unint64_t v32 = v30;
    }
    uint64_t v61 = sub_1D7923300(v31, v32, aBlock);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease();
    *(_WORD *)(v28 + 12) = 2080;
    unint64_t v33 = 0xE800000000000000;
    uint64_t v34 = 0x72616C756C6C6563;
    int v56 = a8;
    switch(v59)
    {
      case 1:
        unint64_t v33 = 0xE400000000000000;
        uint64_t v34 = 1768319351;
        break;
      case 2:
        unint64_t v33 = 0xE500000000000000;
        uint64_t v34 = 0x726568746FLL;
        break;
      case 3:
        unint64_t v33 = 0xE500000000000000;
        uint64_t v34 = 0x3E6C696E3CLL;
        break;
      default:
        break;
    }
    uint64_t v61 = sub_1D7923300(v34, v33, aBlock);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease();
    *(_WORD *)(v28 + 22) = 2080;
    if (a4) {
      uint64_t v10 = v58;
    }
    else {
      uint64_t v10 = 0x3E6C696E3CLL;
    }
    if (a4) {
      unint64_t v35 = a4;
    }
    else {
      unint64_t v35 = 0xE500000000000000;
    }
    swift_bridgeObjectRetain();
    uint64_t v61 = sub_1D7923300(v10, v35, aBlock);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v28 + 32) = 2080;
    LOBYTE(v61) = v60;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA843108);
    uint64_t v36 = sub_1D7A9C038();
    uint64_t v61 = sub_1D7923300(v36, v37, aBlock);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease();
    *(_WORD *)(v28 + 42) = 2080;
    char v38 = v54;
    LOBYTE(v61) = v54;
    uint64_t v39 = sub_1D7A9C038();
    uint64_t v61 = sub_1D7923300(v39, v40, aBlock);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease();
    *(_WORD *)(v28 + 52) = 2080;
    char v41 = v55;
    LOBYTE(v61) = v55;
    uint64_t v42 = sub_1D7A9C038();
    uint64_t v61 = sub_1D7923300(v42, v43, aBlock);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease();
    *(_WORD *)(v28 + 62) = 2080;
    LOBYTE(a8) = v56;
    LOBYTE(v61) = v56;
    uint64_t v44 = sub_1D7A9C038();
    uint64_t v61 = sub_1D7923300(v44, v45, aBlock);
    a3 = v58;
    LOBYTE(a7) = v41;
    sub_1D7A9C9E8();
    LOBYTE(v10) = v38;
    swift_bridgeObjectRelease();
    a1 = v51;
    _os_log_impl(&dword_1D7853000, v51, (os_log_type_t)v57, "sendPhysicalPresentmentEvent networkStatus = %s, connectionType = %s, presentmentResult = %s, biometricAuthMethod = %s, terminalAuthPerformed = %s, portraitWasRequested = %s, isAppleReader = %s", (uint8_t *)v28, 0x48u);
    uint64_t v46 = v50;
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v46, -1, -1);
    MEMORY[0x1D947D740](v28, -1, -1);

    (*(void (**)(char *, uint64_t))(v15 + 8))(v24, v52);
    LOBYTE(a1) = v53;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v24, v14);
  }
  unint64_t v47 = (void *)sub_1D7A9BF98();
  uint64_t v48 = swift_allocObject();
  *(unsigned char *)(v48 + 16) = (_BYTE)a1;
  *(unsigned char *)(v48 + 17) = v59;
  *(void *)(v48 + 24) = a3;
  *(void *)(v48 + 32) = a4;
  *(unsigned char *)(v48 + 40) = v60;
  *(unsigned char *)(v48 + 41) = v10;
  *(unsigned char *)(v48 + 42) = a7;
  *(unsigned char *)(v48 + 43) = a8;
  aBlock[4] = (uint64_t)sub_1D78C2384;
  aBlock[5] = v48;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  void aBlock[2] = (uint64_t)sub_1D78ADCEC;
  aBlock[3] = (uint64_t)&block_descriptor_167;
  uint64_t v49 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v49);
}

unint64_t sub_1D78BA270(unsigned __int8 a1, char a2, uint64_t a3, uint64_t a4, char a5, char a6, char a7, char a8)
{
  int v14 = a1;
  unint64_t v15 = sub_1D785F2C8(MEMORY[0x1E4FBC860]);
  if (v14 != 2)
  {
    uint64_t v16 = sub_1D7A9BF98();
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1D78A12E8(v16, 0x536B726F7774656ELL, 0xED00007375746174, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
  }
  switch(a2)
  {
    case 3:
      break;
    default:
      uint64_t v18 = sub_1D7A9BF98();
      swift_bridgeObjectRelease();
      char v19 = swift_isUniquelyReferenced_nonNull_native();
      sub_1D78A12E8(v18, 0x697463656E6E6F63, 0xEE00657079546E6FLL, v19);
      swift_bridgeObjectRelease();
      break;
  }
  if (a4)
  {
    uint64_t v20 = sub_1D7A9BF98();
    char v21 = swift_isUniquelyReferenced_nonNull_native();
    sub_1D78A12E8(v20, 0xD000000000000011, 0x80000001D7AC09D0, v21);
    swift_bridgeObjectRelease();
  }
  if (a5 == 2)
  {
    if (a6 == 2) {
      goto LABEL_9;
    }
  }
  else
  {
    id v25 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithBool_, a5 & 1);
    char v26 = swift_isUniquelyReferenced_nonNull_native();
    sub_1D78A12E8((uint64_t)v25, 0xD000000000000013, 0x80000001D7AC09B0, v26);
    swift_bridgeObjectRelease();
    if (a6 == 2)
    {
LABEL_9:
      if (a7 == 2) {
        goto LABEL_10;
      }
LABEL_15:
      id v29 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithBool_, a7 & 1);
      char v30 = swift_isUniquelyReferenced_nonNull_native();
      sub_1D78A12E8((uint64_t)v29, 0xD000000000000014, 0x80000001D7AC0970, v30);
      swift_bridgeObjectRelease();
      if (a8 == 2) {
        return v15;
      }
      goto LABEL_11;
    }
  }
  id v27 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithBool_, a6 & 1);
  char v28 = swift_isUniquelyReferenced_nonNull_native();
  sub_1D78A12E8((uint64_t)v27, 0xD000000000000015, 0x80000001D7AC0990, v28);
  swift_bridgeObjectRelease();
  if (a7 != 2) {
    goto LABEL_15;
  }
LABEL_10:
  if (a8 != 2)
  {
LABEL_11:
    id v22 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithBool_, a8 & 1);
    char v23 = swift_isUniquelyReferenced_nonNull_native();
    sub_1D78A12E8((uint64_t)v22, 0x656C7070417369, 0xE700000000000000, v23);
    swift_bridgeObjectRelease();
  }
  return v15;
}

CoreIDVShared::IDCSAnalytics::PayloadValidationReason_optional __swiftcall IDCSAnalytics.PayloadValidationReason.init(rawValue:)(Swift::String rawValue)
{
  return (CoreIDVShared::IDCSAnalytics::PayloadValidationReason_optional)sub_1D78BF54C(v1);
}

uint64_t IDCSAnalytics.PayloadValidationReason.rawValue.getter()
{
  uint64_t v1 = 0x6D746E6573657270;
  if (*v0 != 1) {
    uint64_t v1 = 0x6E776F6E6B6E75;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6F697369766F7270;
  }
}

uint64_t sub_1D78BA6C8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1D79982F0(*a1, *a2);
}

uint64_t sub_1D78BA6D4()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D78BA788()
{
  sub_1D7A9C0B8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D78BA828()
{
  return sub_1D7A9D628();
}

CoreIDVShared::IDCSAnalytics::PayloadValidationReason_optional sub_1D78BA8D8(Swift::String *a1)
{
  return IDCSAnalytics.PayloadValidationReason.init(rawValue:)(*a1);
}

void sub_1D78BA8E4(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xEC000000676E696ELL;
  unint64_t v4 = 0xEB00000000746E65;
  uint64_t v5 = 0x6D746E6573657270;
  if (v2 != 1)
  {
    uint64_t v5 = 0x6E776F6E6B6E75;
    unint64_t v4 = 0xE700000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x6F697369766F7270;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

CoreIDVShared::IDCSAnalytics::PayloadValidationResult_optional __swiftcall IDCSAnalytics.PayloadValidationResult.init(rawValue:)(Swift::String rawValue)
{
  int v2 = v1;
  uint64_t v3 = sub_1D7A9D478();
  result.SecCertificateRef value = swift_bridgeObjectRelease();
  char v5 = 0;
  char v6 = 7;
  switch(v3)
  {
    case 0:
      goto LABEL_9;
    case 1:
      char v5 = 1;
      goto LABEL_9;
    case 2:
      char v5 = 2;
      goto LABEL_9;
    case 3:
      char v5 = 3;
      goto LABEL_9;
    case 4:
      char v5 = 4;
      goto LABEL_9;
    case 5:
      char v5 = 5;
      goto LABEL_9;
    case 6:
      char v5 = 6;
LABEL_9:
      char v6 = v5;
      break;
    case 7:
      break;
    case 8:
      char v6 = 8;
      break;
    case 9:
      char v6 = 9;
      break;
    case 10:
      char v6 = 10;
      break;
    case 11:
      char v6 = 11;
      break;
    case 12:
      char v6 = 12;
      break;
    case 13:
      char v6 = 13;
      break;
    case 14:
      char v6 = 14;
      break;
    case 15:
      char v6 = 15;
      break;
    case 16:
      char v6 = 16;
      break;
    case 17:
      char v6 = 17;
      break;
    case 18:
      char v6 = 18;
      break;
    case 19:
      char v6 = 19;
      break;
    case 20:
      char v6 = 20;
      break;
    case 21:
      char v6 = 21;
      break;
    case 22:
      char v6 = 22;
      break;
    case 23:
      char v6 = 23;
      break;
    case 24:
      char v6 = 24;
      break;
    default:
      char v6 = 25;
      break;
  }
  *int v2 = v6;
  return result;
}

uint64_t IDCSAnalytics.PayloadValidationResult.rawValue.getter()
{
  uint64_t result = 0x64696C6176;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x64696C61766E69;
      break;
    case 2:
      uint64_t result = 0xD000000000000014;
      break;
    case 3:
      uint64_t result = 0xD000000000000015;
      break;
    case 4:
      uint64_t result = 0xD000000000000013;
      break;
    case 5:
      uint64_t result = 0xD000000000000018;
      break;
    case 6:
      uint64_t result = 0xD000000000000012;
      break;
    case 7:
      uint64_t result = 0xD000000000000013;
      break;
    case 8:
      uint64_t result = 0xD00000000000001DLL;
      break;
    case 9:
    case 0xC:
    case 0x18:
      uint64_t result = 0xD00000000000001ALL;
      break;
    case 0xA:
      uint64_t result = 0x4464696C61766E69;
      break;
    case 0xB:
      uint64_t v2 = 0x696C61766E69;
      goto LABEL_20;
    case 0xD:
      uint64_t result = 0x44676E697373696DLL;
      break;
    case 0xE:
      uint64_t result = 0x4D676E697373696DLL;
      break;
    case 0xF:
      uint64_t result = 0xD000000000000015;
      break;
    case 0x10:
      uint64_t result = 0xD000000000000011;
      break;
    case 0x11:
      uint64_t result = 0xD000000000000016;
      break;
    case 0x12:
      uint64_t result = 0x6156746559746F6ELL;
      break;
    case 0x13:
      uint64_t v2 = 0x657269707865;
LABEL_20:
      uint64_t result = v2 & 0xFFFFFFFFFFFFLL | 0x4D64000000000000;
      break;
    case 0x14:
      uint64_t result = 0xD000000000000016;
      break;
    case 0x15:
      uint64_t result = 0xD00000000000001DLL;
      break;
    case 0x16:
      uint64_t result = 0xD00000000000001FLL;
      break;
    case 0x17:
      uint64_t result = 0xD00000000000001BLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1D78BADE0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1D79982D8(*a1, *a2);
}

uint64_t sub_1D78BADEC(uint64_t a1, uint64_t a2)
{
  return sub_1D78BAE04(a1, a2, (void (*)(uint64_t))IDCSAnalytics.PayloadValidationResult.rawValue.getter);
}

uint64_t sub_1D78BAE04(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v4 = sub_1D7A9D5D8();
  a3(v4);
  sub_1D7A9C0B8();
  swift_bridgeObjectRelease();
  return sub_1D7A9D628();
}

uint64_t sub_1D78BAE74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D78BAE8C(a1, a2, a3, (void (*)(void))IDCSAnalytics.PayloadValidationResult.rawValue.getter);
}

uint64_t sub_1D78BAE8C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4();
  sub_1D7A9C0B8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D78BAEF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D78BAF0C(a1, a2, a3, (void (*)(uint64_t))IDCSAnalytics.PayloadValidationResult.rawValue.getter);
}

uint64_t sub_1D78BAF0C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v5 = sub_1D7A9D5D8();
  a4(v5);
  sub_1D7A9C0B8();
  swift_bridgeObjectRelease();
  return sub_1D7A9D628();
}

CoreIDVShared::IDCSAnalytics::PayloadValidationResult_optional sub_1D78BAF78(Swift::String *a1)
{
  return IDCSAnalytics.PayloadValidationResult.init(rawValue:)(*a1);
}

uint64_t sub_1D78BAF84@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = IDCSAnalytics.PayloadValidationResult.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void static IDCSAnalytics.sendPayloadValidationEvent(reason:docType:issuer:result:region:issuingJurisdiction:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unsigned __int8 *a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10)
{
  uint64_t v67 = a4;
  uint64_t v68 = a7;
  uint64_t v16 = sub_1D7A9B5F8();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16, v18, v19, v20, v21, v22, v23, v24);
  char v26 = (char *)&v57 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v27 = *a1;
  int v65 = *a6;
  int v66 = v27;
  if (a3)
  {
    swift_bridgeObjectRetain();
    uint64_t v28 = sub_1D78C2228((uint64_t)&unk_1F2F163A0);
    swift_arrayDestroy();
    char v29 = sub_1D78ADBB4(a2, a3, v28);
    swift_bridgeObjectRelease();
    if ((v29 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      a3 = 0xE500000000000000;
      a2 = 0x726568746FLL;
    }
  }
  uint64_t v30 = v17;
  uint64_t v64 = a9;
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v31 = __swift_project_value_buffer(v16, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v26, v31, v16);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  unint64_t v32 = v26;
  unint64_t v33 = a5;
  uint64_t v34 = sub_1D7A9B5D8();
  os_log_type_t v35 = sub_1D7A9C748();
  int v36 = v35;
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v37 = swift_slowAlloc();
    os_log_t v60 = v34;
    uint64_t v38 = v37;
    uint64_t v61 = swift_slowAlloc();
    aBlock[0] = v61;
    *(_DWORD *)uint64_t v38 = 136316162;
    unint64_t v62 = v32;
    uint64_t v63 = a2;
    if (a3) {
      uint64_t v39 = a2;
    }
    else {
      uint64_t v39 = 0x3E6C696E3CLL;
    }
    if (a3) {
      unint64_t v40 = a3;
    }
    else {
      unint64_t v40 = 0xE500000000000000;
    }
    int v59 = v36;
    swift_bridgeObjectRetain();
    uint64_t v69 = sub_1D7923300(v39, v40, aBlock);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v38 + 12) = 2080;
    if (v33) {
      uint64_t v41 = v67;
    }
    else {
      uint64_t v41 = 0x3E6C696E3CLL;
    }
    if (v33) {
      unint64_t v42 = v33;
    }
    else {
      unint64_t v42 = 0xE500000000000000;
    }
    uint64_t v58 = v16;
    swift_bridgeObjectRetain();
    uint64_t v69 = sub_1D7923300(v41, v42, aBlock);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v38 + 22) = 2080;
    if (a8) {
      uint64_t v43 = v68;
    }
    else {
      uint64_t v43 = 0x3E6C696E3CLL;
    }
    if (a8) {
      unint64_t v44 = a8;
    }
    else {
      unint64_t v44 = 0xE500000000000000;
    }
    swift_bridgeObjectRetain();
    uint64_t v69 = sub_1D7923300(v43, v44, aBlock);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v38 + 32) = 2080;
    unint64_t v57 = v33;
    uint64_t v45 = v30;
    uint64_t v46 = v64;
    if (a10) {
      uint64_t v47 = v64;
    }
    else {
      uint64_t v47 = 0x3E6C696E3CLL;
    }
    if (a10) {
      unint64_t v48 = a10;
    }
    else {
      unint64_t v48 = 0xE500000000000000;
    }
    swift_bridgeObjectRetain();
    uint64_t v69 = sub_1D7923300(v47, v48, aBlock);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v38 + 42) = 2080;
    char v49 = v65;
    LOBYTE(v69) = v65;
    uint64_t v50 = IDCSAnalytics.PayloadValidationResult.rawValue.getter();
    uint64_t v69 = sub_1D7923300(v50, v51, aBlock);
    a2 = v63;
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease();
    os_log_t v52 = v60;
    _os_log_impl(&dword_1D7853000, v60, (os_log_type_t)v59, "sendPayloadValidationEvent docType = %s, issuer = %s, region = %s, issuingJurisdiction = %s, uint64_t result = %s ", (uint8_t *)v38, 0x34u);
    uint64_t v53 = v61;
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v53, -1, -1);
    MEMORY[0x1D947D740](v38, -1, -1);

    (*(void (**)(char *, uint64_t))(v45 + 8))(v62, v58);
    unint64_t v33 = v57;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v32, v16);
    char v49 = v65;
    uint64_t v46 = v64;
  }
  int v54 = (void *)sub_1D7A9BF98();
  uint64_t v55 = swift_allocObject();
  *(unsigned char *)(v55 + 16) = v66;
  *(unsigned char *)(v55 + 17) = v49;
  *(void *)(v55 + 24) = a2;
  *(void *)(v55 + 32) = a3;
  *(void *)(v55 + 40) = v67;
  *(void *)(v55 + 48) = v33;
  *(void *)(v55 + 56) = v68;
  *(void *)(v55 + 64) = a8;
  *(void *)(v55 + 72) = v46;
  *(void *)(v55 + 80) = a10;
  aBlock[4] = (uint64_t)sub_1D78C23F4;
  aBlock[5] = v55;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  void aBlock[2] = (uint64_t)sub_1D78ADCEC;
  aBlock[3] = (uint64_t)&block_descriptor_175;
  int v56 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v56);
}

unint64_t sub_1D78BB604(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF7938);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D7AA0A40;
  *(void *)(inited + 32) = 0x6E6F73616572;
  *(void *)(inited + 40) = 0xE600000000000000;
  sub_1D7A9CE78();
  uint64_t v13 = sub_1D7A9BF98();
  swift_bridgeObjectRelease();
  *(void *)(inited + 48) = v13;
  *(void *)(inited + 56) = 0x746C75736572;
  *(void *)(inited + 64) = 0xE600000000000000;
  sub_1D7A9CE78();
  uint64_t v14 = sub_1D7A9BF98();
  swift_bridgeObjectRelease();
  *(void *)(inited + 72) = v14;
  unint64_t v15 = sub_1D785F2C8(inited);
  if (a4)
  {
    uint64_t v16 = sub_1D7A9BF98();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1D78A12E8(v16, 0x65707954636F64, 0xE700000000000000, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
  }
  if (a6)
  {
    uint64_t v18 = sub_1D7A9BF98();
    char v19 = swift_isUniquelyReferenced_nonNull_native();
    sub_1D78A12E8(v18, 0x726575737369, 0xE600000000000000, v19);
    swift_bridgeObjectRelease();
  }
  if (a8)
  {
    uint64_t v20 = sub_1D7A9BF98();
    char v21 = swift_isUniquelyReferenced_nonNull_native();
    sub_1D78A12E8(v20, 0x6E6F69676572, 0xE600000000000000, v21);
    swift_bridgeObjectRelease();
  }
  if (a10)
  {
    uint64_t v22 = sub_1D7A9BF98();
    char v23 = swift_isUniquelyReferenced_nonNull_native();
    sub_1D78A12E8(v22, 0xD000000000000013, 0x80000001D7AC0950, v23);
    swift_bridgeObjectRelease();
  }
  return v15;
}

CoreIDVShared::IDCSAnalytics::GarbageCollectionEventType_optional __swiftcall IDCSAnalytics.GarbageCollectionEventType.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v2 = v1;
  unint64_t v3 = sub_1D7A9D058();
  result.SecCertificateRef value = swift_bridgeObjectRelease();
  char v5 = 5;
  if (v3 < 5) {
    char v5 = v3;
  }
  *uint64_t v2 = v5;
  return result;
}

unint64_t IDCSAnalytics.GarbageCollectionEventType.rawValue.getter()
{
  unint64_t result = 0xD000000000000014;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000016;
      break;
    case 2:
      unint64_t result = 0x64656E616870726FLL;
      break;
    case 3:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 4:
      unint64_t result = 0xD00000000000001CLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1D78BB994(unsigned __int8 *a1, char *a2)
{
  return sub_1D7998068(*a1, *a2);
}

uint64_t sub_1D78BB9A0()
{
  return sub_1D7A1E140();
}

uint64_t sub_1D78BB9A8()
{
  return sub_1D7A35564();
}

uint64_t sub_1D78BB9B0()
{
  return sub_1D7A1EF14();
}

CoreIDVShared::IDCSAnalytics::GarbageCollectionEventType_optional sub_1D78BB9B8(Swift::String *a1)
{
  return IDCSAnalytics.GarbageCollectionEventType.init(rawValue:)(*a1);
}

unint64_t sub_1D78BB9C4@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = IDCSAnalytics.GarbageCollectionEventType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void static IDCSAnalytics.sendGarbageCollectedEvent(eventType:count:)(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v48 = a2;
  uint64_t v3 = sub_1D7A9B5F8();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v3, v5, v6, v7, v8, v9, v10, v11);
  uint64_t v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12, v15, v16, v17, v18, v19, v20, v21);
  char v23 = (char *)&v43 - v22;
  uint64_t v24 = *a1;
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v25 = 0xD000000000000014;
  uint64_t v26 = __swift_project_value_buffer(v3, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  uint64_t v45 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  uint64_t v46 = v26;
  v45(v23, v26, v3);
  int v27 = sub_1D7A9B5D8();
  os_log_type_t v28 = sub_1D7A9C748();
  BOOL v29 = os_log_type_enabled(v27, v28);
  uint64_t v47 = v24;
  if (v29)
  {
    uint64_t v43 = v14;
    uint64_t v44 = v4;
    uint64_t v30 = swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    aBlock[0] = v31;
    *(_DWORD *)uint64_t v30 = 136315394;
    unint64_t v32 = 0x80000001D7ABB9E0;
    uint64_t v33 = v31;
    switch(v24)
    {
      case 1:
        uint64_t v25 = 0xD000000000000016;
        uint64_t v34 = "inactivePresentmentKey";
        goto LABEL_13;
      case 2:
        unint64_t v32 = 0xEF73746F6C534553;
        uint64_t v25 = 0x64656E616870726FLL;
        break;
      case 3:
        uint64_t v25 = 0xD00000000000001BLL;
        uint64_t v34 = "inactiveDeviceEncryptionKey";
        goto LABEL_13;
      case 4:
        uint64_t v25 = 0xD00000000000001CLL;
        uint64_t v34 = "inactivePayloadProtectionKey";
LABEL_13:
        unint64_t v32 = (unint64_t)(v34 - 32) | 0x8000000000000000;
        break;
      default:
        break;
    }
    uint64_t v49 = sub_1D7923300(v25, v32, aBlock);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 12) = 2048;
    uint64_t v36 = v48;
    uint64_t v49 = v48;
    sub_1D7A9C9E8();
    _os_log_impl(&dword_1D7853000, v27, v28, "sendGarbageCollectedEvent eventType = %s, count = %ld", (uint8_t *)v30, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v33, -1, -1);
    MEMORY[0x1D947D740](v30, -1, -1);

    os_log_type_t v35 = *(void (**)(char *, uint64_t))(v44 + 8);
    v35(v23, v3);
    uint64_t v14 = v43;
    if (v36 >= 1) {
      goto LABEL_15;
    }
  }
  else
  {

    os_log_type_t v35 = *(void (**)(char *, uint64_t))(v4 + 8);
    v35(v23, v3);
    uint64_t v36 = v48;
    if (v48 >= 1)
    {
LABEL_15:
      unint64_t v40 = (void *)sub_1D7A9BF98();
      uint64_t v41 = swift_allocObject();
      *(unsigned char *)(v41 + 16) = v47;
      *(void *)(v41 + 24) = v36;
      aBlock[4] = (uint64_t)sub_1D78C2440;
      aBlock[5] = v41;
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1107296256;
      void aBlock[2] = (uint64_t)sub_1D78ADCEC;
      aBlock[3] = (uint64_t)&block_descriptor_183;
      unint64_t v42 = _Block_copy(aBlock);
      swift_release();
      AnalyticsSendEventLazy();
      _Block_release(v42);

      return;
    }
  }
  v45(v14, v46, v3);
  uint64_t v37 = sub_1D7A9B5D8();
  os_log_type_t v38 = sub_1D7A9C748();
  if (os_log_type_enabled(v37, v38))
  {
    uint64_t v39 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v39 = 0;
    _os_log_impl(&dword_1D7853000, v37, v38, "sendGarbageCollectedEvent not recording event because count is zero", v39, 2u);
    MEMORY[0x1D947D740](v39, -1, -1);
  }

  v35(v14, v3);
}

unint64_t sub_1D78BBEE8(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF7938);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D7AA0A40;
  *(void *)(inited + 32) = 0x707954746E657665;
  *(void *)(inited + 40) = 0xE900000000000065;
  uint64_t v4 = (void *)inited;
  uint64_t v5 = sub_1D7A9BF98();
  swift_bridgeObjectRelease();
  v4[6] = v5;
  v4[7] = 0x6F437463656A626FLL;
  v4[8] = 0xEB00000000746E75;
  v4[9] = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, a2);
  return sub_1D785F2C8((uint64_t)v4);
}

CoreIDVShared::IDCSAnalytics::FetchCredentialUUIDsEventResult_optional __swiftcall IDCSAnalytics.FetchCredentialUUIDsEventResult.init(rawValue:)(Swift::String rawValue)
{
  return (CoreIDVShared::IDCSAnalytics::FetchCredentialUUIDsEventResult_optional)sub_1D78BF86C(v1);
}

unint64_t IDCSAnalytics.FetchCredentialUUIDsEventResult.rawValue.getter()
{
  unint64_t result = 0x7465527364697575;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x526F544C43416F6ELL;
      break;
    case 2:
      unint64_t result = 0x5473444955556F6ELL;
      break;
    case 3:
      unint64_t result = 0xD000000000000018;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1D78BC134(unsigned __int8 *a1, char *a2)
{
  return sub_1D7997D5C(*a1, *a2);
}

uint64_t sub_1D78BC140()
{
  return sub_1D7A1E244();
}

uint64_t sub_1D78BC148()
{
  sub_1D7A9C0B8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D78BC234()
{
  return sub_1D7A1F014();
}

CoreIDVShared::IDCSAnalytics::FetchCredentialUUIDsEventResult_optional sub_1D78BC23C(Swift::String *a1)
{
  return IDCSAnalytics.FetchCredentialUUIDsEventResult.init(rawValue:)(*a1);
}

void sub_1D78BC248(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xED000064656E7275;
  uint64_t v3 = 0x7465527364697575;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xED00006E72757465;
      uint64_t v3 = 0x526F544C43416F6ELL;
      goto LABEL_3;
    case 2:
      *a1 = 0x5473444955556F6ELL;
      a1[1] = 0xEF6E72757465526FLL;
      break;
    case 3:
      *a1 = 0xD000000000000018;
      a1[1] = 0x80000001D7ABBAA0;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

void static IDCSAnalytics.sendFetchCredentialUUIDsCalledEvent(result:)(unsigned __int8 *a1)
{
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v4, v5, v6, v7, v8, v9, v10);
  uint64_t v12 = (char *)&aBlock[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *a1;
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v14 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v12, v14, v2);
  uint64_t v15 = sub_1D7A9B5D8();
  os_log_type_t v16 = sub_1D7A9C748();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    aBlock[0] = v18;
    *(_DWORD *)uint64_t v17 = 136315138;
    unint64_t v19 = 0xED000064656E7275;
    uint64_t v20 = 0x7465527364697575;
    switch(v13)
    {
      case 1:
        unint64_t v19 = 0xED00006E72757465;
        uint64_t v20 = 0x526F544C43416F6ELL;
        break;
      case 2:
        unint64_t v19 = 0xEF6E72757465526FLL;
        uint64_t v20 = 0x5473444955556F6ELL;
        break;
      case 3:
        unint64_t v19 = 0x80000001D7ABBAA0;
        uint64_t v20 = 0xD000000000000018;
        break;
      default:
        break;
    }
    uint64_t v24 = sub_1D7923300(v20, v19, aBlock);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1D7853000, v15, v16, "sendFetchCredentialUUIDsCalledEvent unint64_t result = %s", v17, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v18, -1, -1);
    MEMORY[0x1D947D740](v17, -1, -1);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);
  }
  uint64_t v21 = (void *)sub_1D7A9BF98();
  uint64_t v22 = swift_allocObject();
  *(unsigned char *)(v22 + 16) = v13;
  aBlock[4] = (uint64_t)sub_1D78C245C;
  aBlock[5] = v22;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  void aBlock[2] = (uint64_t)sub_1D78ADCEC;
  aBlock[3] = (uint64_t)&block_descriptor_190;
  char v23 = _Block_copy(aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v23);
}

unint64_t sub_1D78BC6DC()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF7938);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D7AA08E0;
  *(void *)(inited + 32) = 0x746C75736572;
  *(void *)(inited + 40) = 0xE600000000000000;
  uint64_t v1 = sub_1D7A9BF98();
  swift_bridgeObjectRelease();
  *(void *)(inited + 48) = v1;
  return sub_1D785F2C8(inited);
}

CoreIDVShared::IDCSAnalytics::NamespaceElement __swiftcall IDCSAnalytics.NamespaceElement.init(namespace:element:)(Swift::String a1, Swift::String element)
{
  *uint64_t v2 = a1;
  v2[1] = element;
  result.element = element;
  result.namespace = a1;
  return result;
}

CoreIDVShared::IDCSAnalytics::ElementFallbackAlgorithm_optional __swiftcall IDCSAnalytics.ElementFallbackAlgorithm.init(rawValue:)(Swift::String rawValue)
{
  return (CoreIDVShared::IDCSAnalytics::ElementFallbackAlgorithm_optional)sub_1D78BC830(v1);
}

uint64_t sub_1D78BC830@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_1D7A9D058();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

unint64_t IDCSAnalytics.ElementFallbackAlgorithm.rawValue.getter()
{
  if (*v0) {
    return 0xD000000000000013;
  }
  else {
    return 0xD000000000000017;
  }
}

uint64_t sub_1D78BC8D0(char *a1, char *a2)
{
  return sub_1D7998214(*a1, *a2);
}

uint64_t sub_1D78BC8DC()
{
  return sub_1D7A1E348();
}

uint64_t sub_1D78BC8E4()
{
  sub_1D7A9C0B8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D78BC958()
{
  return sub_1D7A1EE90();
}

CoreIDVShared::IDCSAnalytics::ElementFallbackAlgorithm_optional sub_1D78BC960(Swift::String *a1)
{
  return IDCSAnalytics.ElementFallbackAlgorithm.init(rawValue:)(*a1);
}

void sub_1D78BC96C(unint64_t *a1@<X8>)
{
  if (*v1) {
    unint64_t v2 = 0xD000000000000013;
  }
  else {
    unint64_t v2 = 0xD000000000000017;
  }
  unint64_t v3 = 0x80000001D7ABBAC0;
  if (*v1) {
    unint64_t v3 = 0x80000001D7ABBAE0;
  }
  *a1 = v2;
  a1[1] = v3;
}

void static IDCSAnalytics.sendElementFallbackTriggeredEvent(algorithm:from:to:)(unsigned __int8 *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = sub_1D7A9B5F8();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v8, v9, v10, v11, v12, v13, v14);
  uint64_t v43 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v44 = *a1;
  uint64_t v16 = a2[1];
  uint64_t v17 = *a3;
  uint64_t v18 = a3[1];
  uint64_t aBlock = *a2;
  uint64_t v47 = v16;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  sub_1D7A9C128();
  swift_bridgeObjectRetain();
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  uint64_t v20 = aBlock;
  unint64_t v19 = v47;
  if (v18)
  {
    uint64_t aBlock = v17;
    uint64_t v47 = v18;
    sub_1D78C24B8(v17, v18);
    swift_bridgeObjectRetain();
    sub_1D7A9C128();
    swift_bridgeObjectRetain();
    sub_1D7A9C128();
    swift_bridgeObjectRelease();
    sub_1D78C24FC(v17, v18);
    uint64_t v18 = aBlock;
    unint64_t v21 = v47;
  }
  else
  {
    unint64_t v21 = 0;
  }
  uint64_t v22 = v7;
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v23 = __swift_project_value_buffer(v6, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  uint64_t v25 = v43;
  v24(v43, v23, v6);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v26 = sub_1D7A9B5D8();
  os_log_type_t v27 = sub_1D7A9C748();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = swift_slowAlloc();
    uint64_t v42 = v18;
    uint64_t v29 = v28;
    uint64_t v39 = swift_slowAlloc();
    uint64_t aBlock = v39;
    *(_DWORD *)uint64_t v29 = 136315650;
    if (v44) {
      uint64_t v30 = 0xD000000000000013;
    }
    else {
      uint64_t v30 = 0xD000000000000017;
    }
    uint64_t v40 = v22;
    uint64_t v41 = v6;
    if (v44) {
      unint64_t v31 = 0x80000001D7ABBAE0;
    }
    else {
      unint64_t v31 = 0x80000001D7ABBAC0;
    }
    uint64_t v45 = sub_1D7923300(v30, v31, &aBlock);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease();
    *(_WORD *)(v29 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v45 = sub_1D7923300(v20, v19, &aBlock);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v29 + 22) = 2080;
    if (v21) {
      uint64_t v32 = v42;
    }
    else {
      uint64_t v32 = 0x3E6C696E3CLL;
    }
    if (v21) {
      unint64_t v33 = v21;
    }
    else {
      unint64_t v33 = 0xE500000000000000;
    }
    swift_bridgeObjectRetain();
    uint64_t v45 = sub_1D7923300(v32, v33, &aBlock);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1D7853000, v26, v27, "sendElementFallbackTriggeredEvent %s from %s to %s", (uint8_t *)v29, 0x20u);
    uint64_t v34 = v39;
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v34, -1, -1);
    uint64_t v35 = v29;
    uint64_t v18 = v42;
    MEMORY[0x1D947D740](v35, -1, -1);

    (*(void (**)(char *, uint64_t))(v40 + 8))(v43, v41);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v25, v6);
  }
  uint64_t v36 = (void *)sub_1D7A9BF98();
  uint64_t v37 = swift_allocObject();
  *(unsigned char *)(v37 + 16) = v44;
  *(void *)(v37 + 24) = v20;
  *(void *)(v37 + 32) = v19;
  *(void *)(v37 + 40) = v18;
  *(void *)(v37 + 48) = v21;
  uint64_t v50 = sub_1D78C24A8;
  uint64_t v51 = v37;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v47 = 1107296256;
  uint64_t v48 = sub_1D78ADCEC;
  uint64_t v49 = &block_descriptor_197;
  os_log_type_t v38 = _Block_copy(&aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v38);
}

unint64_t sub_1D78BCEF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF7938);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D7AA0A40;
  *(void *)(inited + 32) = 0x687469726F676C61;
  *(void *)(inited + 40) = 0xE90000000000006DLL;
  uint64_t v7 = sub_1D7A9BF98();
  swift_bridgeObjectRelease();
  *(void *)(inited + 48) = v7;
  *(void *)(inited + 56) = 0x6D656C456D6F7266;
  *(void *)(inited + 64) = 0xEB00000000746E65;
  *(void *)(inited + 72) = sub_1D7A9BF98();
  unint64_t v8 = sub_1D785F2C8(inited);
  if (a5)
  {
    uint64_t v9 = sub_1D7A9BF98();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1D78A12E8(v9, 0x6E656D656C456F74, 0xE900000000000074, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
  }
  return v8;
}

void static IDCSAnalytics.sendLegacyACLUsageEvent(presentmentType:)(uint64_t a1)
{
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v4, v5, v6, v7, v8, v9, v10);
  uint64_t v12 = (char *)&aBlock[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v13 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v12, v13, v2);
  uint64_t v14 = sub_1D7A9B5D8();
  os_log_type_t v15 = sub_1D7A9C748();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    aBlock[0] = v17;
    *(_DWORD *)uint64_t v16 = 136315138;
    uint64_t v21 = sub_1D7923300(0xD000000000000029, 0x80000001D7AC0610, aBlock);
    sub_1D7A9C9E8();
    _os_log_impl(&dword_1D7853000, v14, v15, "%s called", v16, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v17, -1, -1);
    MEMORY[0x1D947D740](v16, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);
  uint64_t v18 = (void *)sub_1D7A9BF98();
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a1;
  aBlock[4] = (uint64_t)sub_1D78C2550;
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  void aBlock[2] = (uint64_t)sub_1D78ADCEC;
  aBlock[3] = (uint64_t)&block_descriptor_203;
  uint64_t v20 = _Block_copy(aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v20);
}

unint64_t sub_1D78BD36C(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF7938);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D7AA08E0;
  *(void *)(inited + 32) = 0x6D746E6573657270;
  *(void *)(inited + 40) = 0xEF65707954746E65;
  *(void *)(inited + 48) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithUnsignedInteger_, a1);
  return sub_1D785F2C8(inited);
}

void static IDCSAnalytics.sendPayloadMissingRequiredElementEvent(element:issuer:)(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v38 = a2;
  uint64_t v5 = sub_1D7A9B5F8();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7, v8, v9, v10, v11, v12, v13);
  os_log_type_t v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *a1;
  unint64_t v16 = a1[1];
  uint64_t v19 = a1[2];
  uint64_t v18 = a1[3];
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v20 = __swift_project_value_buffer(v5, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v15, v20, v5);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v21 = sub_1D7A9B5D8();
  os_log_type_t v22 = sub_1D7A9C748();
  int v23 = v22;
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v24 = swift_slowAlloc();
    uint64_t v37 = v17;
    uint64_t v25 = v24;
    uint64_t v26 = swift_slowAlloc();
    uint64_t v36 = v26;
    *(_DWORD *)uint64_t v25 = 136315394;
    uint64_t v33 = v25 + 4;
    uint64_t v39 = v26;
    uint64_t aBlock = v37;
    unint64_t v41 = v16;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    int v34 = v23;
    sub_1D7A9C128();
    swift_bridgeObjectRetain();
    uint64_t v35 = v5;
    uint64_t v27 = v19;
    sub_1D7A9C128();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    uint64_t aBlock = sub_1D7923300(aBlock, v41, &v39);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v25 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t aBlock = sub_1D7923300(v38, a3, &v39);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1D7853000, v21, (os_log_type_t)v34, "sendPayloadMissingRequiredElement for element %s, issuer %s", (uint8_t *)v25, 0x16u);
    uint64_t v28 = v36;
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v28, -1, -1);
    uint64_t v29 = v25;
    uint64_t v17 = v37;
    MEMORY[0x1D947D740](v29, -1, -1);

    (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v35);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v5);
    uint64_t v27 = v19;
  }
  uint64_t v30 = (void *)sub_1D7A9BF98();
  unint64_t v31 = (void *)swift_allocObject();
  v31[2] = v17;
  v31[3] = v16;
  v31[4] = v27;
  v31[5] = v18;
  void v31[6] = v38;
  v31[7] = a3;
  int v44 = sub_1D78C25A0;
  uint64_t v45 = v31;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  unint64_t v41 = 1107296256;
  uint64_t v42 = sub_1D78ADCEC;
  uint64_t v43 = &block_descriptor_209;
  uint64_t v32 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v32);
}

unint64_t sub_1D78BD870()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF7938);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D7AA0A40;
  *(void *)(inited + 32) = 0x746E656D656C65;
  *(void *)(inited + 40) = 0xE700000000000000;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  sub_1D7A9C128();
  swift_bridgeObjectRetain();
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  uint64_t v1 = sub_1D7A9BF98();
  swift_bridgeObjectRelease();
  *(void *)(inited + 48) = v1;
  *(void *)(inited + 56) = 0x726575737369;
  *(void *)(inited + 64) = 0xE600000000000000;
  *(void *)(inited + 72) = sub_1D7A9BF98();
  return sub_1D785F2C8(inited);
}

void static IDCSAnalytics.sendUnknownLogotypeHashAlgorithmIdentifier(_:)(long long *a1)
{
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v4, v5, v6, v7, v8, v9, v10);
  uint64_t v12 = (char *)&aBlock[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v13 = a1[1];
  long long v24 = *a1;
  long long v25 = v13;
  uint64_t v26 = *((void *)a1 + 4);
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v14 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v12, v14, v2);
  os_log_type_t v15 = sub_1D7A9B5D8();
  os_log_type_t v16 = sub_1D7A9C748();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl(&dword_1D7853000, v15, v16, "sendUnknownLogotypeHashAlgorithmIdentifier", v17, 2u);
    MEMORY[0x1D947D740](v17, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);
  uint64_t v18 = (void *)sub_1D7A9BF98();
  uint64_t v19 = swift_allocObject();
  long long v20 = v25;
  *(_OWORD *)(v19 + 16) = v24;
  *(_OWORD *)(v19 + 32) = v20;
  *(void *)(v19 + 48) = v26;
  aBlock[4] = sub_1D78C2610;
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1D78ADCEC;
  aBlock[3] = &block_descriptor_215;
  uint64_t v21 = _Block_copy(aBlock);
  sub_1D78C2618((uint64_t)&v24);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v21);
}

unint64_t sub_1D78BDC28(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF7938);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D7AA08E0;
  *(void *)(inited + 32) = 0xD000000000000013;
  *(void *)(inited + 40) = 0x80000001D7AC0930;
  sub_1D78C2618(a1);
  uint64_t v3 = swift_bridgeObjectRetain();
  sub_1D7A46E6C(v3);
  swift_bridgeObjectRelease();
  sub_1D78C4000(a1);
  uint64_t v4 = sub_1D7A9BF98();
  swift_bridgeObjectRelease();
  *(void *)(inited + 48) = v4;
  return sub_1D785F2C8(inited);
}

void static IDCSAnalytics.sendRequestedElementsNotPermittedEvent(rpIdentifier:isDisplayOnly:notPermittedElements:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8 = sub_1D7A9B5F8();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8, v10, v11, v12, v13, v14, v15, v16);
  uint64_t v18 = (char *)&aBlock[-1] - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v19 = __swift_project_value_buffer(v8, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v18, v19, v8);
  long long v20 = sub_1D7A9B5D8();
  os_log_type_t v21 = sub_1D7A9C748();
  if (os_log_type_enabled(v20, v21))
  {
    os_log_type_t v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v22 = 0;
    _os_log_impl(&dword_1D7853000, v20, v21, "sendRequestedElementsNotPermittedEvent", v22, 2u);
    MEMORY[0x1D947D740](v22, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v18, v8);
  int v23 = (void *)sub_1D7A9BF98();
  uint64_t v24 = swift_allocObject();
  *(unsigned char *)(v24 + 16) = a3 & 1;
  *(void *)(v24 + 24) = a4;
  *(void *)(v24 + 32) = a1;
  *(void *)(v24 + 40) = a2;
  aBlock[4] = sub_1D78C26A0;
  aBlock[5] = v24;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1D78ADCEC;
  aBlock[3] = &block_descriptor_221;
  long long v25 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendExplodingEventLazy();
  _Block_release(v25);
}

unint64_t sub_1D78BDF94()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF7938);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D7AA4E80;
  *(void *)(inited + 32) = 0x4F79616C70736964;
  *(void *)(inited + 40) = 0xEB00000000796C6ELL;
  *(void *)(inited + 48) = sub_1D7A9C418();
  *(void *)(inited + 56) = 0xD000000000000013;
  *(void *)(inited + 64) = 0x80000001D7AC0910;
  uint64_t v1 = swift_bridgeObjectRetain();
  uint64_t v2 = sub_1D790FA70(v1);
  swift_bridgeObjectRelease();
  uint64_t v5 = v2;
  sub_1D78C0E10((uint64_t *)&v5);
  uint64_t v3 = sub_1D7A9C2F8();
  swift_release();
  *(void *)(inited + 72) = v3;
  strcpy((char *)(inited + 80), "rpIdentifier");
  *(unsigned char *)(inited + 93) = 0;
  *(_WORD *)(inited + 94) = -5120;
  *(void *)(inited + 96) = sub_1D7A9BF98();
  return sub_1D785F2C8(inited);
}

void static IDCSAnalytics.sendPayloadIngestionSizeEvent(docType:issuer:overallSizeBytes:numberOfPackages:packageSizeBytes:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v45 = a3;
  uint64_t v13 = sub_1D7A9B5F8();
  uint64_t v46 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13, v14, v15, v16, v17, v18, v19, v20);
  os_log_type_t v22 = (char *)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v23 = __swift_project_value_buffer(v13, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v22, v23, v13);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v24 = sub_1D7A9B5D8();
  os_log_type_t v25 = sub_1D7A9C748();
  int v44 = v25;
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = swift_slowAlloc();
    os_log_t v39 = v24;
    uint64_t v27 = v26;
    uint64_t v40 = swift_slowAlloc();
    aBlock[0] = v40;
    *(_DWORD *)uint64_t v27 = 136316162;
    uint64_t v42 = a6;
    swift_bridgeObjectRetain();
    uint64_t v47 = sub_1D7923300(a1, a2, aBlock);
    uint64_t v41 = a1;
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v27 + 12) = 2080;
    if (a4) {
      uint64_t v28 = v45;
    }
    else {
      uint64_t v28 = 0x3E6C696E3CLL;
    }
    uint64_t v38 = v13;
    unint64_t v29 = a2;
    if (a4) {
      unint64_t v30 = a4;
    }
    else {
      unint64_t v30 = 0xE500000000000000;
    }
    uint64_t v43 = a7;
    swift_bridgeObjectRetain();
    uint64_t v31 = v28;
    a6 = v42;
    uint64_t v47 = sub_1D7923300(v31, v30, aBlock);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease_n();
    a2 = v29;
    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 22) = 2048;
    uint64_t v47 = a5;
    sub_1D7A9C9E8();
    *(_WORD *)(v27 + 32) = 2048;
    uint64_t v47 = a6;
    sub_1D7A9C9E8();
    *(_WORD *)(v27 + 42) = 2048;
    a7 = v43;
    uint64_t v47 = v43;
    a1 = v41;
    sub_1D7A9C9E8();
    os_log_t v32 = v39;
    _os_log_impl(&dword_1D7853000, v39, (os_log_type_t)v44, "sendPayloadIngestionSizeEvent docType = %s, issuer = %s, overallSizeBytes = %ld, numberOfPackages = %ld, packageSizeBytes = %ld", (uint8_t *)v27, 0x34u);
    uint64_t v33 = v40;
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v33, -1, -1);
    MEMORY[0x1D947D740](v27, -1, -1);

    (*(void (**)(char *, uint64_t))(v46 + 8))(v22, v38);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v22, v13);
  }
  int v34 = (void *)sub_1D7A9BF98();
  uint64_t v35 = (void *)swift_allocObject();
  v35[2] = a1;
  v35[3] = a2;
  v35[4] = a5;
  v35[5] = a6;
  uint64_t v36 = v45;
  v35[6] = a7;
  v35[7] = v36;
  v35[8] = a4;
  aBlock[4] = (uint64_t)sub_1D78C26F0;
  aBlock[5] = (uint64_t)v35;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  void aBlock[2] = (uint64_t)sub_1D78ADCEC;
  aBlock[3] = (uint64_t)&block_descriptor_227;
  uint64_t v37 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v37);
}

unint64_t sub_1D78BE558(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF7938);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D7AA4E90;
  *(void *)(inited + 32) = 0x65707954636F64;
  *(void *)(inited + 40) = 0xE700000000000000;
  *(void *)(inited + 48) = sub_1D7A9BF98();
  strcpy((char *)(inited + 56), "overallSizeKB");
  *(_WORD *)(inited + 70) = -4864;
  *(void *)(inited + 72) = sub_1D7A9C648();
  *(void *)(inited + 80) = 0xD000000000000010;
  *(void *)(inited + 88) = 0x80000001D7AC08F0;
  *(void *)(inited + 96) = sub_1D7A9C648();
  strcpy((char *)(inited + 104), "packageSizeKB");
  *(_WORD *)(inited + 118) = -4864;
  *(void *)(inited + 120) = sub_1D7A9C648();
  unint64_t v9 = sub_1D785F2C8(inited);
  if (a7)
  {
    uint64_t v10 = sub_1D7A9BF98();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1D78A12E8(v10, 0x726575737369, 0xE600000000000000, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
  }
  return v9;
}

void static IDCSAnalytics.sendPayloadPortraitSizeEvent(docType:issuer:portraitSizeBytes:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_1D7A9B5F8();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10, v12, v13, v14, v15, v16, v17, v18);
  uint64_t v20 = (char *)&v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v21 = __swift_project_value_buffer(v10, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v20, v21, v10);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  os_log_type_t v22 = sub_1D7A9B5D8();
  os_log_type_t v23 = sub_1D7A9C748();
  int v24 = v23;
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v25 = swift_slowAlloc();
    uint64_t v38 = v11;
    uint64_t v26 = v25;
    uint64_t v36 = swift_slowAlloc();
    aBlock[0] = v36;
    *(_DWORD *)uint64_t v26 = 136315650;
    uint64_t v37 = v10;
    swift_bridgeObjectRetain();
    uint64_t v27 = sub_1D7923300(a1, a2, aBlock);
    unint64_t v39 = a2;
    uint64_t v40 = v27;
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v26 + 12) = 2080;
    if (a4) {
      uint64_t v28 = a3;
    }
    else {
      uint64_t v28 = 0x3E6C696E3CLL;
    }
    uint64_t v35 = v20;
    HIDWORD(v34) = v24;
    if (a4) {
      unint64_t v29 = a4;
    }
    else {
      unint64_t v29 = 0xE500000000000000;
    }
    swift_bridgeObjectRetain();
    uint64_t v40 = sub_1D7923300(v28, v29, aBlock);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 22) = 2048;
    uint64_t v40 = a5;
    a2 = v39;
    sub_1D7A9C9E8();
    _os_log_impl(&dword_1D7853000, v22, BYTE4(v34), "sendPayloadPortraitSizeEvent docType = %s, issuer = %s, portraitSizeBytes = %ld", (uint8_t *)v26, 0x20u);
    uint64_t v30 = v36;
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v30, -1, -1);
    MEMORY[0x1D947D740](v26, -1, -1);

    (*(void (**)(char *, uint64_t))(v38 + 8))(v35, v37);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v20, v10);
  }
  uint64_t v31 = (void *)sub_1D7A9BF98();
  os_log_t v32 = (void *)swift_allocObject();
  void v32[2] = a1;
  v32[3] = a2;
  v32[4] = a5;
  v32[5] = a3;
  v32[6] = a4;
  aBlock[4] = (uint64_t)sub_1D78C2744;
  aBlock[5] = (uint64_t)v32;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  void aBlock[2] = (uint64_t)sub_1D78ADCEC;
  aBlock[3] = (uint64_t)&block_descriptor_233;
  uint64_t v33 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v33);
}

unint64_t sub_1D78BEB20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF7938);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D7AA0A40;
  *(void *)(inited + 32) = 0x65707954636F64;
  *(void *)(inited + 40) = 0xE700000000000000;
  *(void *)(inited + 48) = sub_1D7A9BF98();
  strcpy((char *)(inited + 56), "portraitSizeKB");
  *(unsigned char *)(inited + 71) = -18;
  *(void *)(inited + 72) = sub_1D7A9C648();
  unint64_t v7 = sub_1D785F2C8(inited);
  if (a5)
  {
    uint64_t v8 = sub_1D7A9BF98();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1D78A12E8(v8, 0x726575737369, 0xE600000000000000, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t IDCSAnalytics.deinit()
{
  return v0;
}

void static UIAnalytics.sendIDScanCompleteEvent(imageType:iqaCode:retakeCount:captureTime:)(uint64_t a1, unint64_t a2, uint64_t *a3, uint64_t a4, float a5)
{
  uint64_t v10 = sub_1D7A9B5F8();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10, v12, v13, v14, v15, v16, v17, v18);
  uint64_t v20 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = *a3;
  unint64_t v21 = a3[1];
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v23 = __swift_project_value_buffer(v10, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v20, v23, v10);
  swift_bridgeObjectRetain();
  sub_1D78C2754(v22, v21);
  swift_bridgeObjectRetain();
  sub_1D78C2754(v22, v21);
  int v24 = sub_1D7A9B5D8();
  int v25 = sub_1D7A9C748();
  if (os_log_type_enabled(v24, (os_log_type_t)v25))
  {
    int v39 = v25;
    os_log_t v40 = v24;
    uint64_t v26 = swift_slowAlloc();
    uint64_t v38 = swift_slowAlloc();
    uint64_t v44 = v38;
    *(_DWORD *)uint64_t v26 = 136446978;
    swift_bridgeObjectRetain();
    uint64_t v42 = a1;
    uint64_t aBlock = sub_1D7923300(a1, a2, &v44);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v26 + 12) = 2082;
    uint64_t v43 = a4;
    uint64_t v41 = v10;
    if (v21 == 48)
    {
      unint64_t v27 = 0xE500000000000000;
      unint64_t v28 = 0x3E6C696E3CLL;
    }
    else
    {
      uint64_t aBlock = v22;
      uint64_t v46 = v21;
      unint64_t v28 = IQACode.toString.getter();
      unint64_t v27 = v29;
    }
    uint64_t aBlock = sub_1D7923300(v28, v27, &v44);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease();
    sub_1D78C2764(v22, v21);
    sub_1D78C2764(v22, v21);
    *(_WORD *)(v26 + 22) = 2050;
    uint64_t v30 = v43;
    uint64_t aBlock = v43;
    sub_1D7A9C9E8();
    *(_WORD *)(v26 + 32) = 2082;
    uint64_t v31 = sub_1D7A9C5D8();
    uint64_t aBlock = sub_1D7923300(v31, v32, &v44);
    sub_1D7A9C9E8();
    a4 = v30;
    swift_bridgeObjectRelease();
    os_log_t v33 = v40;
    _os_log_impl(&dword_1D7853000, v40, (os_log_type_t)v39, "sendIDScanCompleteEvent imageType = %{public}s, iqaCode = %{public}s, retakeCount = %{public}ld, captureTime = %{public}s", (uint8_t *)v26, 0x2Au);
    uint64_t v34 = v38;
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v34, -1, -1);
    MEMORY[0x1D947D740](v26, -1, -1);

    (*(void (**)(char *, uint64_t))(v11 + 8))(v20, v41);
    a1 = v42;
  }
  else
  {
    swift_bridgeObjectRelease_n();
    sub_1D78C2764(v22, v21);
    sub_1D78C2764(v22, v21);

    (*(void (**)(char *, uint64_t))(v11 + 8))(v20, v10);
  }
  uint64_t v35 = (void *)sub_1D7A9BF98();
  uint64_t v36 = swift_allocObject();
  *(void *)(v36 + 16) = a1;
  *(void *)(v36 + 24) = a2;
  *(void *)(v36 + 32) = a4;
  *(float *)(v36 + 40) = a5;
  *(void *)(v36 + 48) = v22;
  *(void *)(v36 + 56) = v21;
  uint64_t v49 = sub_1D78C27D0;
  uint64_t v50 = v36;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v46 = 1107296256;
  uint64_t v47 = sub_1D78ADCEC;
  uint64_t v48 = &block_descriptor_239;
  uint64_t v37 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  sub_1D78C2754(v22, v21);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v37);
}

unint64_t sub_1D78BF10C(float a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF7938);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D7AA4E80;
  *(void *)(inited + 32) = 0x7079546567616D69;
  *(void *)(inited + 40) = 0xE900000000000065;
  *(void *)(inited + 48) = sub_1D7A9BF98();
  *(void *)(inited + 56) = 0x6F43656B61746572;
  *(void *)(inited + 64) = 0xEB00000000746E75;
  *(void *)(inited + 72) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, a4);
  *(void *)(inited + 80) = 0x5465727574706163;
  *(void *)(inited + 88) = 0xEB00000000656D69;
  id v10 = objc_allocWithZone(NSNumber);
  *(float *)&double v11 = a1;
  *(void *)(inited + 96) = objc_msgSend(v10, sel_initWithFloat_, v11);
  unint64_t v12 = sub_1D785F2C8(inited);
  if (a6 != 48)
  {
    IQACode.toString.getter();
    uint64_t v13 = sub_1D7A9BF98();
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1D78A12E8(v13, 0x65646F43617169, 0xE700000000000000, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
  }
  return v12;
}

CoreIDVShared::UIAnalytics::BiometricAuthType_optional __swiftcall UIAnalytics.BiometricAuthType.init(rawValue:)(Swift::String rawValue)
{
  return (CoreIDVShared::UIAnalytics::BiometricAuthType_optional)sub_1D78BF54C(v1);
}

uint64_t UIAnalytics.BiometricAuthType.rawValue.getter()
{
  uint64_t v1 = 0x44496863756F74;
  if (*v0 != 1) {
    uint64_t v1 = 0x65646F6373736170;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x444965636166;
  }
}

uint64_t sub_1D78BF304(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1D7998E04(*a1, *a2);
}

uint64_t sub_1D78BF310()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D78BF3B0()
{
  sub_1D7A9C0B8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D78BF43C()
{
  return sub_1D7A9D628();
}

CoreIDVShared::UIAnalytics::BiometricAuthType_optional sub_1D78BF4D8(Swift::String *a1)
{
  return UIAnalytics.BiometricAuthType.init(rawValue:)(*a1);
}

void sub_1D78BF4E4(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE600000000000000;
  unint64_t v4 = 0xE700000000000000;
  uint64_t v5 = 0x44496863756F74;
  if (v2 != 1)
  {
    uint64_t v5 = 0x65646F6373736170;
    unint64_t v4 = 0xE800000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x444965636166;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

CoreIDVShared::UIAnalytics::BiometricBindingSetupOutcome_optional __swiftcall UIAnalytics.BiometricBindingSetupOutcome.init(rawValue:)(Swift::String rawValue)
{
  return (CoreIDVShared::UIAnalytics::BiometricBindingSetupOutcome_optional)sub_1D78BF54C(v1);
}

uint64_t sub_1D78BF54C@<X0>(char *a1@<X8>)
{
  unint64_t v2 = sub_1D7A9D058();
  uint64_t result = swift_bridgeObjectRelease();
  char v4 = 3;
  if (v2 < 3) {
    char v4 = v2;
  }
  *a1 = v4;
  return result;
}

uint64_t UIAnalytics.BiometricBindingSetupOutcome.rawValue.getter()
{
  uint64_t v1 = 0x64656C65636E6163;
  if (*v0 != 1) {
    uint64_t v1 = 0x626967696C656E69;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x73736563637573;
  }
}

uint64_t sub_1D78BF604(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1D7998CE0(*a1, *a2);
}

uint64_t sub_1D78BF610()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D78BF6B8()
{
  sub_1D7A9C0B8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D78BF74C()
{
  return sub_1D7A9D628();
}

CoreIDVShared::UIAnalytics::BiometricBindingSetupOutcome_optional sub_1D78BF7F0(Swift::String *a1)
{
  return UIAnalytics.BiometricBindingSetupOutcome.init(rawValue:)(*a1);
}

void sub_1D78BF7FC(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE700000000000000;
  unint64_t v4 = 0xE800000000000000;
  uint64_t v5 = 0x64656C65636E6163;
  if (v2 != 1)
  {
    uint64_t v5 = 0x626967696C656E69;
    unint64_t v4 = 0xEA0000000000656CLL;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x73736563637573;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

CoreIDVShared::UIAnalytics::BiometricBindingReplacementOutcome_optional __swiftcall UIAnalytics.BiometricBindingReplacementOutcome.init(rawValue:)(Swift::String rawValue)
{
  return (CoreIDVShared::UIAnalytics::BiometricBindingReplacementOutcome_optional)sub_1D78BF86C(v1);
}

uint64_t sub_1D78BF86C@<X0>(char *a1@<X8>)
{
  unint64_t v2 = sub_1D7A9D058();
  uint64_t result = swift_bridgeObjectRelease();
  char v4 = 4;
  if (v2 < 4) {
    char v4 = v2;
  }
  *a1 = v4;
  return result;
}

uint64_t UIAnalytics.BiometricBindingReplacementOutcome.rawValue.getter()
{
  uint64_t result = 0x646563616C706572;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6E6946676E6F7277;
      break;
    case 2:
      uint64_t result = 0x6C69614668747561;
      break;
    case 3:
      uint64_t result = 0x6F6B636F4C6F6962;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1D78BF964(unsigned __int8 *a1, char *a2)
{
  return sub_1D7998B34(*a1, *a2);
}

uint64_t sub_1D78BF970()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D78BFA5C()
{
  sub_1D7A9C0B8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D78BFB30()
{
  return sub_1D7A9D628();
}

CoreIDVShared::UIAnalytics::BiometricBindingReplacementOutcome_optional sub_1D78BFC18(Swift::String *a1)
{
  return UIAnalytics.BiometricBindingReplacementOutcome.init(rawValue:)(*a1);
}

void sub_1D78BFC24(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE800000000000000;
  uint64_t v3 = 0x646563616C706572;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xEB00000000726567;
      uint64_t v3 = 0x6E6946676E6F7277;
      goto LABEL_3;
    case 2:
      *a1 = 0x6C69614668747561;
      a1[1] = 0xEA00000000006465;
      break;
    case 3:
      *a1 = 0x6F6B636F4C6F6962;
      a1[1] = 0xEA00000000007475;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

void static UIAnalytics.sendBiometricBindingSetupCompleteEvent(authType:outcome:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v3 = sub_1D7A9B5F8();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v5, v6, v7, v8, v9, v10, v11);
  uint64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v14 = *a1;
  LODWORD(a1) = *a2;
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v16 = __swift_project_value_buffer(v3, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v13, v16, v3);
  uint64_t v17 = sub_1D7A9B5D8();
  os_log_type_t v18 = sub_1D7A9C748();
  if (os_log_type_enabled(v17, v18))
  {
    int v33 = (int)a1;
    a1 = (unsigned __int8 *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    aBlock[0] = v19;
    *(_DWORD *)a1 = 136315394;
    unint64_t v20 = 0xE700000000000000;
    uint64_t v21 = 0x44496863756F74;
    if (v14 != 1)
    {
      uint64_t v21 = 0x65646F6373736170;
      unint64_t v20 = 0xE800000000000000;
    }
    int v32 = v14;
    if (v14) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = 0x444965636166;
    }
    if (v14) {
      unint64_t v23 = v20;
    }
    else {
      unint64_t v23 = 0xE600000000000000;
    }
    uint64_t v34 = sub_1D7923300(v22, v23, aBlock);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease();
    *((_WORD *)a1 + 6) = 2080;
    unint64_t v24 = 0xE800000000000000;
    uint64_t v25 = 0x64656C65636E6163;
    if (v33 != 1)
    {
      uint64_t v25 = 0x626967696C656E69;
      unint64_t v24 = 0xEA0000000000656CLL;
    }
    if (v33) {
      uint64_t v26 = v25;
    }
    else {
      uint64_t v26 = 0x73736563637573;
    }
    if (v33) {
      unint64_t v27 = v24;
    }
    else {
      unint64_t v27 = 0xE700000000000000;
    }
    uint64_t v34 = sub_1D7923300(v26, v27, aBlock);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1D7853000, v17, v18, "sendBiometricBindingSetupCompleteEvent authType = %s, outcome = %s", a1, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v19, -1, -1);
    MEMORY[0x1D947D740](a1, -1, -1);

    (*(void (**)(char *, uint64_t))(v4 + 8))(v13, v3);
    LOBYTE(v14) = v32;
    LOBYTE(a1) = v33;
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v4 + 8))(v13, v3);
  }
  unint64_t v28 = (void *)sub_1D7A9BF98();
  uint64_t v29 = swift_allocObject();
  *(unsigned char *)(v29 + 16) = v14;
  *(unsigned char *)(v29 + 17) = (_BYTE)a1;
  aBlock[4] = (uint64_t)sub_1D78C27F4;
  aBlock[5] = v29;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  void aBlock[2] = (uint64_t)sub_1D78ADCEC;
  aBlock[3] = (uint64_t)&block_descriptor_248;
  uint64_t v30 = _Block_copy(aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v30);
}

unint64_t sub_1D78C00E0()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF7938);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D7AA0A40;
  *(void *)(inited + 32) = 0x6570795468747561;
  *(void *)(inited + 40) = 0xE800000000000000;
  uint64_t v1 = sub_1D7A9BF98();
  swift_bridgeObjectRelease();
  *(void *)(inited + 48) = v1;
  *(void *)(inited + 56) = 0x656D6F6374756FLL;
  *(void *)(inited + 64) = 0xE700000000000000;
  uint64_t v2 = sub_1D7A9BF98();
  swift_bridgeObjectRelease();
  *(void *)(inited + 72) = v2;
  return sub_1D785F2C8(inited);
}

void static UIAnalytics.sendBiometricReplacedEvent(authType:outcome:target:)(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = sub_1D7A9B5F8();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v8, v9, v10, v11, v12, v13, v14);
  uint64_t v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v17 = *a1;
  uint64_t v18 = *a2;
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v19 = __swift_project_value_buffer(v6, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v16, v19, v6);
  unint64_t v20 = sub_1D7A9B5D8();
  os_log_type_t v21 = sub_1D7A9C748();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v34 = a3;
    uint64_t v35 = v18;
    uint64_t v22 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    aBlock[0] = v18;
    *(_DWORD *)uint64_t v22 = 136315650;
    unint64_t v23 = 0xE700000000000000;
    uint64_t v24 = 0x44496863756F74;
    if (v17 != 1)
    {
      uint64_t v24 = 0x65646F6373736170;
      unint64_t v23 = 0xE800000000000000;
    }
    if (v17) {
      uint64_t v25 = v24;
    }
    else {
      uint64_t v25 = 0x444965636166;
    }
    if (v17) {
      unint64_t v26 = v23;
    }
    else {
      unint64_t v26 = 0xE600000000000000;
    }
    uint64_t v36 = sub_1D7923300(v25, v26, aBlock);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 12) = 2080;
    unint64_t v27 = 0xE800000000000000;
    uint64_t v28 = 0x646563616C706572;
    int v33 = v17;
    switch(v35)
    {
      case 1:
        unint64_t v27 = 0xEB00000000726567;
        uint64_t v28 = 0x6E6946676E6F7277;
        break;
      case 2:
        unint64_t v27 = 0xEA00000000006465;
        uint64_t v28 = 0x6C69614668747561;
        break;
      case 3:
        unint64_t v27 = 0xEA00000000007475;
        uint64_t v28 = 0x6F6B636F4C6F6962;
        break;
      default:
        break;
    }
    uint64_t v36 = sub_1D7923300(v28, v27, aBlock);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 22) = 2048;
    a3 = v34;
    uint64_t v36 = v34;
    sub_1D7A9C9E8();
    _os_log_impl(&dword_1D7853000, v20, v21, "sendBiometricReplacedEvent authType = %s, outcome = %s, target = %lld", (uint8_t *)v22, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v18, -1, -1);
    MEMORY[0x1D947D740](v22, -1, -1);

    (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v6);
    LOBYTE(v17) = v33;
    LOBYTE(v18) = v35;
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v6);
  }
  uint64_t v29 = (void *)sub_1D7A9BF98();
  uint64_t v30 = swift_allocObject();
  *(unsigned char *)(v30 + 16) = v17;
  *(unsigned char *)(v30 + 17) = v18;
  *(void *)(v30 + 24) = a3;
  aBlock[4] = (uint64_t)sub_1D78C2810;
  aBlock[5] = v30;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  void aBlock[2] = (uint64_t)sub_1D78ADCEC;
  aBlock[3] = (uint64_t)&block_descriptor_254;
  uint64_t v31 = _Block_copy(aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v31);
}

unint64_t sub_1D78C06C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF7938);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D7AA4E80;
  *(void *)(inited + 32) = 0x6570795468747561;
  *(void *)(inited + 40) = 0xE800000000000000;
  uint64_t v5 = sub_1D7A9BF98();
  swift_bridgeObjectRelease();
  *(void *)(inited + 48) = v5;
  *(void *)(inited + 56) = 0x746C75736572;
  *(void *)(inited + 64) = 0xE600000000000000;
  uint64_t v6 = sub_1D7A9BF98();
  swift_bridgeObjectRelease();
  *(void *)(inited + 72) = v6;
  *(void *)(inited + 80) = 0x746567726174;
  *(void *)(inited + 88) = 0xE600000000000000;
  *(void *)(inited + 96) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithLongLong_, a3);
  return sub_1D785F2C8(inited);
}

void static UIAnalytics.sendLivenessRestartEvent(timeout:stitchDetected:faceOutOfBounds:faceTooSmall:sentToBackground:proofingCompleted:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v32 = a1;
  uint64_t v33 = a2;
  uint64_t v10 = sub_1D7A9B5F8();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10, v12, v13, v14, v15, v16, v17, v18);
  unint64_t v20 = (char *)&v29 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v21 = __swift_project_value_buffer(v10, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v20, v21, v10);
  uint64_t v22 = sub_1D7A9B5D8();
  os_log_type_t v23 = sub_1D7A9C748();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 134219264;
    aBlock[0] = v32;
    int v31 = a6;
    sub_1D7A9C9E8();
    uint64_t v30 = a5;
    *(_WORD *)(v24 + 12) = 2048;
    aBlock[0] = v33;
    sub_1D7A9C9E8();
    *(_WORD *)(v24 + 22) = 2048;
    aBlock[0] = a3;
    sub_1D7A9C9E8();
    *(_WORD *)(v24 + 32) = 2048;
    aBlock[0] = a4;
    sub_1D7A9C9E8();
    *(_WORD *)(v24 + 42) = 2048;
    a5 = v30;
    aBlock[0] = v30;
    LOBYTE(a6) = v31;
    sub_1D7A9C9E8();
    *(_WORD *)(v24 + 52) = 1024;
    LODWORD(aBlock[0]) = a6 & 1;
    sub_1D7A9C9E8();
    _os_log_impl(&dword_1D7853000, v22, v23, "sendLivenessRestartEvent timeout: %ld, stitchDetected %ld, faceOutOfBounds %ld, faceTooSmall %ld, sentToBackground %ld, proofingCompleted %{BOOL}d", (uint8_t *)v24, 0x3Au);
    MEMORY[0x1D947D740](v24, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v11 + 8))(v20, v10);
  uint64_t v25 = (void *)sub_1D7A9BF98();
  uint64_t v26 = swift_allocObject();
  uint64_t v27 = v33;
  *(void *)(v26 + 16) = v32;
  *(void *)(v26 + 24) = v27;
  *(void *)(v26 + 32) = a3;
  *(void *)(v26 + 40) = a4;
  *(void *)(v26 + 48) = a5;
  *(unsigned char *)(v26 + 56) = a6 & 1;
  aBlock[4] = sub_1D78C2830;
  aBlock[5] = v26;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1D78ADCEC;
  aBlock[3] = &block_descriptor_260;
  uint64_t v28 = _Block_copy(aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v28);
}

unint64_t sub_1D78C0C20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF7938);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D7AA4EB0;
  *(void *)(inited + 32) = 0x74756F656D6974;
  *(void *)(inited + 40) = 0xE700000000000000;
  *(void *)(inited + 48) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, a1);
  strcpy((char *)(inited + 56), "stitchDetected");
  *(unsigned char *)(inited + 71) = -18;
  *(void *)(inited + 72) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, a2);
  *(void *)(inited + 80) = 0x4F74754F65636166;
  *(void *)(inited + 88) = 0xEF73646E756F4266;
  *(void *)(inited + 96) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, a3);
  strcpy((char *)(inited + 104), "faceTooSmall");
  *(unsigned char *)(inited + 117) = 0;
  *(_WORD *)(inited + 118) = -5120;
  *(void *)(inited + 120) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, a4);
  *(void *)(inited + 128) = 0xD000000000000010;
  *(void *)(inited + 136) = 0x80000001D7AC08B0;
  *(void *)(inited + 144) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, a5);
  *(void *)(inited + 152) = 0xD000000000000011;
  *(void *)(inited + 160) = 0x80000001D7AC08D0;
  *(void *)(inited + 168) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithBool_, a6 & 1);
  return sub_1D785F2C8(inited);
}

uint64_t UIAnalytics.deinit()
{
  return v0;
}

uint64_t UIAnalytics.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_1D78C0E10(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1D78C1AA0(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  uint64_t result = sub_1D78C0E7C(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_1D78C0E7C(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t result = sub_1D7A9D248();
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_152;
    }
    if (v3) {
      return sub_1D78C1568(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_160;
  }
  uint64_t v105 = result;
  char v102 = a1;
  if (v3 < 2)
  {
    uint64_t v8 = MEMORY[0x1E4FBC860];
    __dst = (char *)(MEMORY[0x1E4FBC860] + 32);
    if (v3 != 1)
    {
      unint64_t v12 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      uint64_t v11 = (char *)MEMORY[0x1E4FBC860];
LABEL_118:
      uint64_t v94 = v11;
      uint64_t v104 = v8;
      if (v12 >= 2)
      {
        uint64_t v95 = *v102;
        do
        {
          unint64_t v96 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_147;
          }
          if (!v95) {
            goto LABEL_159;
          }
          uint64_t v97 = v94;
          uint64_t v98 = *(void *)&v94[16 * v96 + 32];
          uint64_t v99 = *(void *)&v94[16 * v12 + 24];
          sub_1D78C1638((char *)(v95 + 16 * v98), (char *)(v95 + 16 * *(void *)&v94[16 * v12 + 16]), v95 + 16 * v99, __dst);
          if (v1) {
            break;
          }
          if (v99 < v98) {
            goto LABEL_148;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v97 = sub_1D78C1A8C((uint64_t)v97);
          }
          if (v96 >= *((void *)v97 + 2)) {
            goto LABEL_149;
          }
          char v100 = &v97[16 * v96 + 32];
          *(void *)char v100 = v98;
          *((void *)v100 + 1) = v99;
          unint64_t v101 = *((void *)v97 + 2);
          if (v12 > v101) {
            goto LABEL_150;
          }
          memmove(&v97[16 * v12 + 16], &v97[16 * v12 + 32], 16 * (v101 - v12));
          uint64_t v94 = v97;
          *((void *)v97 + 2) = v101 - 1;
          unint64_t v12 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      *(void *)(v104 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v104 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = sub_1D7A9C388();
    *(void *)(v7 + 16) = v6;
    uint64_t v104 = v7;
    __dst = (char *)(v7 + 32);
  }
  uint64_t v9 = 0;
  uint64_t v10 = *a1;
  uint64_t v103 = v10 + 8;
  uint64_t v11 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v106 = v3;
  while (1)
  {
    uint64_t v13 = v9++;
    if (v9 >= v3) {
      goto LABEL_46;
    }
    uint64_t v14 = (uint64_t *)(v10 + 16 * v9);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = (void *)(v10 + 16 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      uint64_t v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_45;
      }
      int v19 = 0;
    }
    else
    {
      int v19 = sub_1D7A9D358();
      uint64_t v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_36;
      }
    }
    uint64_t v21 = (void *)(v103 + 16 * v20);
    do
    {
      os_log_type_t v23 = (void *)(v10 + 16 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if (v19) {
          goto LABEL_37;
        }
      }
      else if ((v19 ^ sub_1D7A9D358()))
      {
        goto LABEL_36;
      }
      v21 += 2;
      uint64_t v22 = v20 + 1;
      uint64_t v9 = v20;
      uint64_t v20 = v22;
    }
    while (v22 < v3);
    uint64_t v20 = v22;
LABEL_36:
    uint64_t v9 = v20;
    if (v19)
    {
LABEL_37:
      if (v20 < v13) {
        goto LABEL_155;
      }
      if (v13 < v20)
      {
        uint64_t v25 = 16 * v20;
        uint64_t v26 = 16 * v13;
        uint64_t v27 = v20;
        uint64_t v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10) {
              goto LABEL_158;
            }
            uint64_t v29 = v10 + v25;
            uint64_t v30 = *(void *)(v10 + v26);
            uint64_t v31 = *(void *)(v10 + v26 + 8);
            *(_OWORD *)(v10 + v26) = *(_OWORD *)(v10 + v25 - 16);
            *(void *)(v29 - 16) = v30;
            *(void *)(v29 - 8) = v31;
          }
          ++v28;
          v25 -= 16;
          v26 += 16;
        }
        while (v28 < v27);
      }
LABEL_45:
      uint64_t v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13)) {
        goto LABEL_151;
      }
      if (v9 - v13 < v105) {
        break;
      }
    }
LABEL_67:
    if (v9 < v13) {
      goto LABEL_146;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = sub_1D78C18D4(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v41 = *((void *)v11 + 2);
    unint64_t v40 = *((void *)v11 + 3);
    unint64_t v12 = v41 + 1;
    if (v41 >= v40 >> 1) {
      uint64_t v11 = sub_1D78C18D4((char *)(v40 > 1), v41 + 1, 1, v11);
    }
    *((void *)v11 + 2) = v12;
    uint64_t v42 = v11 + 32;
    uint64_t v43 = &v11[16 * v41 + 32];
    *(void *)uint64_t v43 = v13;
    *((void *)v43 + 1) = v9;
    if (v41)
    {
      uint64_t v107 = v9;
      while (1)
      {
        unint64_t v44 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v49 = &v42[16 * v12];
          uint64_t v50 = *((void *)v49 - 8);
          uint64_t v51 = *((void *)v49 - 7);
          BOOL v55 = __OFSUB__(v51, v50);
          uint64_t v52 = v51 - v50;
          if (v55) {
            goto LABEL_135;
          }
          uint64_t v54 = *((void *)v49 - 6);
          uint64_t v53 = *((void *)v49 - 5);
          BOOL v55 = __OFSUB__(v53, v54);
          uint64_t v47 = v53 - v54;
          char v48 = v55;
          if (v55) {
            goto LABEL_136;
          }
          unint64_t v56 = v12 - 2;
          unint64_t v57 = &v42[16 * v12 - 32];
          uint64_t v59 = *(void *)v57;
          uint64_t v58 = *((void *)v57 + 1);
          BOOL v55 = __OFSUB__(v58, v59);
          uint64_t v60 = v58 - v59;
          if (v55) {
            goto LABEL_138;
          }
          BOOL v55 = __OFADD__(v47, v60);
          uint64_t v61 = v47 + v60;
          if (v55) {
            goto LABEL_141;
          }
          if (v61 >= v52)
          {
            uint64_t v79 = &v42[16 * v44];
            uint64_t v81 = *(void *)v79;
            uint64_t v80 = *((void *)v79 + 1);
            BOOL v55 = __OFSUB__(v80, v81);
            uint64_t v82 = v80 - v81;
            if (v55) {
              goto LABEL_145;
            }
            BOOL v72 = v47 < v82;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v73 = *((void *)v11 + 4);
            uint64_t v74 = *((void *)v11 + 5);
            BOOL v55 = __OFSUB__(v74, v73);
            uint64_t v66 = v74 - v73;
            char v67 = v55;
            goto LABEL_99;
          }
          uint64_t v46 = *((void *)v11 + 4);
          uint64_t v45 = *((void *)v11 + 5);
          BOOL v55 = __OFSUB__(v45, v46);
          uint64_t v47 = v45 - v46;
          char v48 = v55;
        }
        if (v48) {
          goto LABEL_137;
        }
        unint64_t v56 = v12 - 2;
        unint64_t v62 = &v42[16 * v12 - 32];
        uint64_t v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        BOOL v65 = __OFSUB__(v63, v64);
        uint64_t v66 = v63 - v64;
        char v67 = v65;
        if (v65) {
          goto LABEL_140;
        }
        uint64_t v68 = &v42[16 * v44];
        uint64_t v70 = *(void *)v68;
        uint64_t v69 = *((void *)v68 + 1);
        BOOL v55 = __OFSUB__(v69, v70);
        uint64_t v71 = v69 - v70;
        if (v55) {
          goto LABEL_143;
        }
        if (__OFADD__(v66, v71)) {
          goto LABEL_144;
        }
        if (v66 + v71 >= v47)
        {
          BOOL v72 = v47 < v71;
LABEL_105:
          if (v72) {
            unint64_t v44 = v56;
          }
          goto LABEL_107;
        }
LABEL_99:
        if (v67) {
          goto LABEL_139;
        }
        uint64_t v75 = &v42[16 * v44];
        uint64_t v77 = *(void *)v75;
        uint64_t v76 = *((void *)v75 + 1);
        BOOL v55 = __OFSUB__(v76, v77);
        uint64_t v78 = v76 - v77;
        if (v55) {
          goto LABEL_142;
        }
        if (v78 < v66) {
          goto LABEL_15;
        }
LABEL_107:
        unint64_t v83 = v44 - 1;
        if (v44 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        uint64_t v84 = v10;
        if (!v10) {
          goto LABEL_157;
        }
        char v85 = v11;
        unint64_t v86 = &v42[16 * v83];
        uint64_t v87 = *(void *)v86;
        BOOL v88 = v42;
        unint64_t v89 = v44;
        char v90 = &v42[16 * v44];
        uint64_t v91 = *((void *)v90 + 1);
        uint64_t v92 = v84;
        sub_1D78C1638((char *)(v84 + 16 * *(void *)v86), (char *)(v84 + 16 * *(void *)v90), v84 + 16 * v91, __dst);
        if (v1) {
          goto LABEL_115;
        }
        if (v91 < v87) {
          goto LABEL_132;
        }
        if (v89 > *((void *)v85 + 2)) {
          goto LABEL_133;
        }
        *(void *)unint64_t v86 = v87;
        *(void *)&v88[16 * v83 + 8] = v91;
        unint64_t v93 = *((void *)v85 + 2);
        if (v89 >= v93) {
          goto LABEL_134;
        }
        uint64_t v11 = v85;
        unint64_t v12 = v93 - 1;
        memmove(v90, v90 + 16, 16 * (v93 - 1 - v89));
        uint64_t v42 = v88;
        *((void *)v85 + 2) = v93 - 1;
        uint64_t v10 = v92;
        uint64_t v9 = v107;
        if (v93 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    uint64_t v3 = v106;
    if (v9 >= v106)
    {
      uint64_t v8 = v104;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v105)) {
    goto LABEL_153;
  }
  if (v13 + v105 >= v3) {
    uint64_t v32 = v3;
  }
  else {
    uint64_t v32 = v13 + v105;
  }
  if (v32 >= v13)
  {
    if (v9 != v32)
    {
      uint64_t v33 = (void *)(v10 + 16 * v9);
      do
      {
        uint64_t v34 = (uint64_t *)(v10 + 16 * v9);
        uint64_t v35 = *v34;
        uint64_t v36 = v34[1];
        uint64_t v37 = v13;
        uint64_t v38 = v33;
        do
        {
          BOOL v39 = v35 == *(v38 - 2) && v36 == *(v38 - 1);
          if (v39 || (sub_1D7A9D358() & 1) == 0) {
            break;
          }
          if (!v10) {
            goto LABEL_156;
          }
          uint64_t v35 = *v38;
          uint64_t v36 = v38[1];
          *(_OWORD *)uint64_t v38 = *((_OWORD *)v38 - 1);
          *(v38 - 1) = v36;
          *(v38 - 2) = v35;
          v38 -= 2;
          ++v37;
        }
        while (v9 != v37);
        ++v9;
        v33 += 2;
      }
      while (v9 != v32);
      uint64_t v9 = v32;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  uint64_t result = sub_1D7A9CF88();
  __break(1u);
  return result;
}

uint64_t sub_1D78C1568(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 16 * a3;
LABEL_5:
    uint64_t v9 = (uint64_t *)(v7 + 16 * v4);
    uint64_t result = *v9;
    uint64_t v10 = v9[1];
    uint64_t v11 = v6;
    unint64_t v12 = (uint64_t *)v8;
    while (1)
    {
      BOOL v13 = result == *(v12 - 2) && v10 == *(v12 - 1);
      if (v13 || (uint64_t result = sub_1D7A9D358(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v7) {
        break;
      }
      uint64_t result = *v12;
      uint64_t v10 = v12[1];
      *(_OWORD *)unint64_t v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1D78C1638(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 15;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 4;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 15;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 4;
  uint64_t v27 = __src;
  uint64_t v26 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst) {
        memmove(__dst, a2, 16 * v13);
      }
      uint64_t v17 = &v4[16 * v13];
      uint64_t v25 = v17;
      uint64_t v27 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        uint64_t v18 = (char *)(a3 - 16);
        int v19 = v6;
        while (1)
        {
          uint64_t v20 = v18 + 16;
          uint64_t v21 = *((void *)v19 - 2);
          uint64_t v22 = *((void *)v19 - 1);
          v19 -= 16;
          BOOL v23 = *((void *)v17 - 2) == v21 && *((void *)v17 - 1) == v22;
          if (v23 || (sub_1D7A9D358() & 1) == 0)
          {
            uint64_t v25 = v17 - 16;
            if (v20 < v17 || v18 >= v17 || v20 != v17) {
              *(_OWORD *)uint64_t v18 = *((_OWORD *)v17 - 1);
            }
            int v19 = v6;
            v17 -= 16;
            if (v6 <= v7) {
              goto LABEL_50;
            }
          }
          else
          {
            if (v20 != v6 || v18 >= v6) {
              *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
            }
            uint64_t v27 = v19;
            if (v19 <= v7) {
              goto LABEL_50;
            }
          }
          v18 -= 16;
          uint64_t v6 = v19;
          if (v17 <= v4) {
            goto LABEL_50;
          }
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst) {
      memmove(__dst, __src, 16 * v10);
    }
    uint64_t v14 = &v4[16 * v10];
    uint64_t v25 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        BOOL v15 = *(void *)v6 == *(void *)v4 && *((void *)v6 + 1) == *((void *)v4 + 1);
        if (v15 || (sub_1D7A9D358() & 1) == 0)
        {
          if (v7 != v4) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v4;
          }
          v4 += 16;
          uint64_t v26 = v4;
          uint64_t v16 = v6;
        }
        else
        {
          uint64_t v16 = v6 + 16;
          if (v7 < v6 || v7 >= v16 || v7 != v6) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
          }
        }
        v7 += 16;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      uint64_t v27 = v7;
    }
LABEL_50:
    sub_1D78C19D0((void **)&v27, (const void **)&v26, &v25);
    return 1;
  }
  uint64_t result = sub_1D7A9D008();
  __break(1u);
  return result;
}

char *sub_1D78C18D4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA8431A0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1D78C19D0(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 15;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -16)
  {
    uint64_t result = (char *)sub_1D7A9D008();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
    {
      return (char *)memmove(result, v3, 16 * v7);
    }
  }
  return result;
}

char *sub_1D78C1A8C(uint64_t a1)
{
  return sub_1D78C18D4(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1D78C1AA0(uint64_t a1)
{
  return sub_1D78AB658(0, *(void *)(a1 + 16), 0, (char *)a1);
}

void _s13CoreIDVShared9AnalyticsC9sendErroryys0E0_pFZ_0(void *a1)
{
  BOOL v15 = a1;
  id v1 = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF9740);
  if (swift_dynamicCast())
  {
    uint64_t v2 = v10;
    uint64_t v3 = v11;
    uint64_t v4 = v12;
    uint64_t v5 = (void *)sub_1D7A9BF98();
    uint64_t v6 = swift_allocObject();
    *(_WORD *)(v6 + 16) = aBlock;
    *(void *)(v6 + 24) = v2;
    *(void *)(v6 + 32) = v3;
    *(void *)(v6 + 40) = v4;
    uint64_t v13 = sub_1D78C40BC;
    uint64_t v14 = v6;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v10 = 1107296256;
    int64_t v11 = sub_1D78ADCEC;
    uint64_t v12 = &block_descriptor_413;
    uint64_t v7 = _Block_copy(&aBlock);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v8 = v4;
    swift_release();
    AnalyticsSendEventLazy();
    _Block_release(v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1D78C1C20()
{
  return MEMORY[0x1F4186498](v0, 18, 7);
}

unint64_t sub_1D78C1C30()
{
  return sub_1D78ADE84();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t sub_1D78C1C54()
{
  return objectdestroy_2Tm(49);
}

unint64_t sub_1D78C1C5C()
{
  return sub_1D78AE054();
}

unint64_t sub_1D78C1C70()
{
  return sub_1D78AE28C(*(unsigned __int8 *)(v0 + 16), *(unsigned __int8 *)(v0 + 17), *(unsigned __int8 *)(v0 + 18), *(unsigned __int8 *)(v0 + 19), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t sub_1D78C1C8C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t sub_1D78C1CD4()
{
  return sub_1D78C25B8(sub_1D78AE5AC);
}

unint64_t sub_1D78C1CEC()
{
  return sub_1D78AF994();
}

uint64_t sub_1D78C1D00()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

unint64_t sub_1D78C1D38()
{
  return sub_1D78AFD28();
}

uint64_t sub_1D78C1D40()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 33, 7);
}

unint64_t sub_1D78C1D78()
{
  return sub_1D78B0110(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
}

uint64_t sub_1D78C1D84()
{
  return MEMORY[0x1F4186498](v0, 17, 7);
}

unint64_t sub_1D78C1D94()
{
  return sub_1D78B203C(*(unsigned char *)(v0 + 16), 0x80000001D7AC0BF0);
}

unint64_t sub_1D78C1DC0()
{
  return sub_1D78B0E04(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32), *(unsigned char *)(v0 + 33));
}

uint64_t sub_1D78C1DE4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 64, 7);
}

unint64_t sub_1D78C1E24()
{
  return sub_1D78B1374(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56));
}

uint64_t sub_1D78C1E38()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 113, 7);
}

unint64_t sub_1D78C1E80()
{
  return sub_1D78B1AC8(*(double *)(v0 + 48), *(double *)(v0 + 56), *(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(unsigned char *)(v0 + 112));
}

uint64_t sub_1D78C1EC8()
{
  return MEMORY[0x1F4186498](v0, 17, 7);
}

unint64_t sub_1D78C1ED8()
{
  return sub_1D78B203C(*(unsigned char *)(v0 + 16), 0x80000001D7AC0B50);
}

uint64_t sub_1D78C1F04()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

unint64_t sub_1D78C1F14()
{
  return sub_1D78B25A8(*(void *)(v0 + 16));
}

void sub_1D78C1F1C(unint64_t a1)
{
  if (a1 >> 62)
  {
    if (a1 >> 62 != 1) {
      return;
    }
    a1 &= 0x3FFFFFFFFFFFFFFFuLL;
  }
}

unint64_t sub_1D78C1F38(unint64_t result)
{
  if (result >> 62)
  {
    if (result >> 62 != 1) {
      return result;
    }
    result &= 0x3FFFFFFFFFFFFFFFuLL;
  }
  return (unint64_t)(id)result;
}

uint64_t sub_1D78C1F54()
{
  sub_1D78C1F1C(*(void *)(v0 + 16));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 88, 7);
}

void *sub_1D78C1FAC()
{
  return sub_1D78B2BE8(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(unsigned char *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80));
}

uint64_t sub_1D78C1FE8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 64, 7);
}

unint64_t sub_1D78C2028()
{
  return sub_1D78B49A0(*(unsigned __int8 *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56));
}

uint64_t sub_1D78C203C()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

unint64_t sub_1D78C2078()
{
  return sub_1D78B5080(*(void *)(v0 + 24), *(double *)(v0 + 16));
}

uint64_t sub_1D78C2084()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

unint64_t sub_1D78C20BC()
{
  return sub_1D78B54F8(*(void **)(v0 + 16));
}

uint64_t sub_1D78C20C4()
{
  sub_1D78C2100(*(id *)(v0 + 16), *(unsigned char *)(v0 + 24));
  return MEMORY[0x1F4186498](v0, 25, 7);
}

void sub_1D78C2100(id a1, char a2)
{
  if (a2) {
}
  }

unint64_t sub_1D78C210C()
{
  return sub_1D78B58F8(*(void **)(v0 + 16), *(unsigned char *)(v0 + 24));
}

id sub_1D78C2118(id result, char a2)
{
  if (a2) {
    return result;
  }
  return result;
}

uint64_t sub_1D78C2124()
{
  sub_1D78C2100(*(id *)(v0 + 16), *(unsigned char *)(v0 + 24));
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 40, 7);
}

void sub_1D78C2168()
{
  sub_1D78B611C(*(void **)(v0 + 16), *(unsigned char *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1D78C2178()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D78C21B0()
{
  return sub_1D78B6FBC(*(unsigned __int8 *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1D78C21BC()
{
  return MEMORY[0x1F4186498](v0, 17, 7);
}

unint64_t sub_1D78C21CC()
{
  return sub_1D78B770C(*(unsigned char *)(v0 + 16));
}

uint64_t sub_1D78C21D4()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 34, 7);
}

uint64_t sub_1D78C220C()
{
  return sub_1D78B7AE8(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned __int8 *)(v0 + 32) | (unsigned __int16)(*(unsigned __int8 *)(v0 + 33) << 8));
}

uint64_t sub_1D78C2228(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = sub_1D7A9C638();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain();
      sub_1D790FB58(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_1D78C22C0()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 41, 7);
}

unint64_t sub_1D78C22F8()
{
  return sub_1D78B91A4(*(unsigned __int8 *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
}

uint64_t sub_1D78C2308()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 40, 7);
}

unint64_t sub_1D78C2340()
{
  return sub_1D78B9ACC(*(unsigned __int8 *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1D78C234C()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 44, 7);
}

unint64_t sub_1D78C2384()
{
  return sub_1D78BA270(*(unsigned char *)(v0 + 16), *(unsigned char *)(v0 + 17), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40), *(unsigned char *)(v0 + 41), *(unsigned char *)(v0 + 42), *(unsigned char *)(v0 + 43));
}

uint64_t sub_1D78C23A4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 88, 7);
}

unint64_t sub_1D78C23F4()
{
  return sub_1D78BB604(*(unsigned __int8 *)(v0 + 16), *(unsigned __int8 *)(v0 + 17), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80));
}

uint64_t sub_1D78C2430()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

unint64_t sub_1D78C2440()
{
  return sub_1D78BBEE8(*(unsigned __int8 *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1D78C244C()
{
  return MEMORY[0x1F4186498](v0, 17, 7);
}

unint64_t sub_1D78C245C()
{
  return sub_1D78BC6DC();
}

uint64_t objectdestroy_8Tm()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 56, 7);
}

unint64_t sub_1D78C24A8()
{
  return sub_1D78BCEF8(*(unsigned __int8 *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t sub_1D78C24B8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1D78C24FC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1D78C2540()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

unint64_t sub_1D78C2550()
{
  return sub_1D78BD36C(*(void *)(v0 + 16));
}

uint64_t sub_1D78C2558()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t sub_1D78C25A0()
{
  return sub_1D78C25B8((uint64_t (*)(void, void, void, void, void, void))sub_1D78BD870);
}

uint64_t sub_1D78C25B8(uint64_t (*a1)(void, void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t sub_1D78C25D0()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return MEMORY[0x1F4186498](v0, 56, 7);
}

unint64_t sub_1D78C2610()
{
  return sub_1D78BDC28(v0 + 16);
}

uint64_t sub_1D78C2618(uint64_t a1)
{
  return a1;
}

uint64_t sub_1D78C264C()
{
  return objectdestroy_2Tm(48);
}

uint64_t objectdestroy_2Tm(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v1, a1, 7);
}

unint64_t sub_1D78C26A0()
{
  return sub_1D78BDF94();
}

uint64_t sub_1D78C26B0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 72, 7);
}

unint64_t sub_1D78C26F0()
{
  return sub_1D78BE558(v0[2], v0[3], v0[4], v0[5], v0[6], v0[7], v0[8]);
}

uint64_t sub_1D78C2704()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 56, 7);
}

unint64_t sub_1D78C2744()
{
  return sub_1D78BEB20(v0[2], v0[3], v0[4], v0[5], v0[6]);
}

uint64_t sub_1D78C2754(uint64_t a1, unint64_t a2)
{
  if (a2 != 48) {
    return sub_1D7861414(a1, a2);
  }
  return a1;
}

uint64_t sub_1D78C2764(uint64_t a1, unint64_t a2)
{
  if (a2 != 48) {
    return sub_1D78C2774(a1, a2);
  }
  return a1;
}

uint64_t sub_1D78C2774(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x30) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1D78C2788()
{
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 56) >= 0x31uLL) {
    swift_bridgeObjectRelease();
  }
  return MEMORY[0x1F4186498](v0, 64, 7);
}

unint64_t sub_1D78C27D0()
{
  return sub_1D78BF10C(*(float *)(v0 + 40), *(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 48), *(void *)(v0 + 56));
}

uint64_t sub_1D78C27E4()
{
  return MEMORY[0x1F4186498](v0, 18, 7);
}

unint64_t sub_1D78C27F4()
{
  return sub_1D78C00E0();
}

uint64_t sub_1D78C2800()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

unint64_t sub_1D78C2810()
{
  return sub_1D78C06C4(*(unsigned __int8 *)(v0 + 16), *(unsigned __int8 *)(v0 + 17), *(void *)(v0 + 24));
}

uint64_t sub_1D78C2820()
{
  return MEMORY[0x1F4186498](v0, 57, 7);
}

unint64_t sub_1D78C2830()
{
  return sub_1D78C0C20(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(unsigned char *)(v0 + 56));
}

unint64_t sub_1D78C2848()
{
  unint64_t result = qword_1EA843110;
  if (!qword_1EA843110)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA843110);
  }
  return result;
}

unint64_t sub_1D78C28A0()
{
  unint64_t result = qword_1EA843118;
  if (!qword_1EA843118)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA843118);
  }
  return result;
}

unint64_t sub_1D78C28F8()
{
  unint64_t result = qword_1EA843120;
  if (!qword_1EA843120)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA843120);
  }
  return result;
}

unint64_t sub_1D78C2950()
{
  unint64_t result = qword_1EA843128;
  if (!qword_1EA843128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA843128);
  }
  return result;
}

unint64_t sub_1D78C29A8()
{
  unint64_t result = qword_1EA843130;
  if (!qword_1EA843130)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA843130);
  }
  return result;
}

unint64_t sub_1D78C2A00()
{
  unint64_t result = qword_1EA843138;
  if (!qword_1EA843138)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA843138);
  }
  return result;
}

unint64_t sub_1D78C2A58()
{
  unint64_t result = qword_1EA843140;
  if (!qword_1EA843140)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA843140);
  }
  return result;
}

unint64_t sub_1D78C2AB0()
{
  unint64_t result = qword_1EA843148;
  if (!qword_1EA843148)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA843148);
  }
  return result;
}

unint64_t sub_1D78C2B08()
{
  unint64_t result = qword_1EA843150;
  if (!qword_1EA843150)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA843150);
  }
  return result;
}

unint64_t sub_1D78C2B60()
{
  unint64_t result = qword_1EA843158;
  if (!qword_1EA843158)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA843158);
  }
  return result;
}

unint64_t sub_1D78C2BB8()
{
  unint64_t result = qword_1EA843160;
  if (!qword_1EA843160)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA843160);
  }
  return result;
}

unint64_t sub_1D78C2C10()
{
  unint64_t result = qword_1EA843168;
  if (!qword_1EA843168)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA843168);
  }
  return result;
}

unint64_t sub_1D78C2C68()
{
  unint64_t result = qword_1EA843170;
  if (!qword_1EA843170)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA843170);
  }
  return result;
}

unint64_t sub_1D78C2CC0()
{
  unint64_t result = qword_1EA843178;
  if (!qword_1EA843178)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA843178);
  }
  return result;
}

unint64_t sub_1D78C2D18()
{
  unint64_t result = qword_1EA843180;
  if (!qword_1EA843180)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA843180);
  }
  return result;
}

unint64_t sub_1D78C2D70()
{
  unint64_t result = qword_1EA843188;
  if (!qword_1EA843188)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA843188);
  }
  return result;
}

unint64_t sub_1D78C2DC8()
{
  unint64_t result = qword_1EA843190;
  if (!qword_1EA843190)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA843190);
  }
  return result;
}

unint64_t sub_1D78C2E20()
{
  unint64_t result = qword_1EA843198;
  if (!qword_1EA843198)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA843198);
  }
  return result;
}

uint64_t type metadata accessor for Analytics()
{
  return self;
}

uint64_t method lookup function for Analytics(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for Analytics);
}

uint64_t type metadata accessor for DaemonAnalytics()
{
  return self;
}

uint64_t method lookup function for DaemonAnalytics(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for DaemonAnalytics);
}

unsigned char *storeEnumTagSinglePayload for DaemonAnalytics.GarbageCollectionEventType(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1D78C2F88);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for DaemonAnalytics.GarbageCollectionEventType()
{
  return &type metadata for DaemonAnalytics.GarbageCollectionEventType;
}

unint64_t *initializeBufferWithCopyOfBuffer for DaemonAnalytics.DigitalPresentmentRequestedEventOutcome(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  sub_1D78C1F38(*a2);
  *a1 = v3;
  return a1;
}

void destroy for DaemonAnalytics.DigitalPresentmentRequestedEventOutcome(unint64_t *a1)
{
}

unint64_t *assignWithCopy for DaemonAnalytics.DigitalPresentmentRequestedEventOutcome(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  sub_1D78C1F38(*a2);
  unint64_t v4 = *a1;
  *a1 = v3;
  sub_1D78C1F1C(v4);
  return a1;
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

unint64_t *assignWithTake for DaemonAnalytics.DigitalPresentmentRequestedEventOutcome(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  *a1 = *a2;
  sub_1D78C1F1C(v3);
  return a1;
}

ValueMetadata *type metadata accessor for DaemonAnalytics.DigitalPresentmentRequestedEventOutcome()
{
  return &type metadata for DaemonAnalytics.DigitalPresentmentRequestedEventOutcome;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for DaemonAnalytics.DigitalPresentmentRequestedEventRetention(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for DaemonAnalytics.DigitalPresentmentRequestedEventRetention(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)unint64_t result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

uint64_t sub_1D78C30F8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1D78C3114(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)unint64_t result = (a2 - 1);
    *(unsigned char *)(result + 8) = 1;
  }
  else
  {
    *(unsigned char *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for DaemonAnalytics.DigitalPresentmentRequestedEventRetention()
{
  return &type metadata for DaemonAnalytics.DigitalPresentmentRequestedEventRetention;
}

uint64_t getEnumTagSinglePayload for DaemonAnalytics.DigitalPresentmentRequestedEventElement(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x73 && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 115);
  }
  unsigned int v3 = ((*(unsigned __int8 *)(a1 + 16) >> 4) & 0xFFFFFF8F | (16 * ((*(unsigned __int8 *)(a1 + 16) >> 1) & 7))) ^ 0x7F;
  if (v3 >= 0x72) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for DaemonAnalytics.DigitalPresentmentRequestedEventElement(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x72)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 115;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x73) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0x73) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0;
      *(void *)(result + 8) = 0;
      *(unsigned char *)(result + 16) = 2 * (((-a2 >> 4) & 7) - 8 * a2);
    }
  }
  return result;
}

uint64_t sub_1D78C31EC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16) >> 4;
}

uint64_t sub_1D78C31F8(uint64_t result)
{
  *(unsigned char *)(result + 16) &= 0xFu;
  return result;
}

uint64_t sub_1D78C3208(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = *(unsigned char *)(result + 16) & 1 | (16 * a2);
  return result;
}

ValueMetadata *type metadata accessor for DaemonAnalytics.DigitalPresentmentRequestedEventElement()
{
  return &type metadata for DaemonAnalytics.DigitalPresentmentRequestedEventElement;
}

ValueMetadata *type metadata accessor for DaemonAnalytics.DigitalPresentmentCanRequestDocumentOutcome()
{
  return &type metadata for DaemonAnalytics.DigitalPresentmentCanRequestDocumentOutcome;
}

void *initializeBufferWithCopyOfBuffer for DaemonAnalytics.DigitalPresentmentSpinnerShownOutcome(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  id v4 = (id)(*a2 & 0x3FFFFFFFFFFFFFFFLL);
  *a1 = v3;
  return a1;
}

void destroy for DaemonAnalytics.DigitalPresentmentSpinnerShownOutcome(void *a1)
{
}

uint64_t *assignWithCopy for DaemonAnalytics.DigitalPresentmentSpinnerShownOutcome(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  id v4 = (id)(*a2 & 0x3FFFFFFFFFFFFFFFLL);
  uint64_t v5 = *a1;
  *a1 = v3;

  return a1;
}

uint64_t *assignWithTake for DaemonAnalytics.DigitalPresentmentSpinnerShownOutcome(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t _s13CoreIDVShared15DaemonAnalyticsC39DigitalPresentmentRequestedEventOutcomeOwet_0(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7E && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 126);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 5) | (4 * ((*(void *)a1 >> 57) & 0x18 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7D) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t _s13CoreIDVShared15DaemonAnalyticsC39DigitalPresentmentRequestedEventOutcomeOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(void *)unint64_t result = a2 - 126;
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(void *)unint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_1D78C33A8(void *a1)
{
  uint64_t v1 = *a1 >> 62;
  if (v1 <= 1) {
    return v1;
  }
  else {
    return (*a1 >> 3) + 2;
  }
}

void *sub_1D78C33C4(void *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *sub_1D78C33D4(unint64_t *result, uint64_t a2)
{
  if (a2 < 2)
  {
    uint64_t v2 = *result & 0xFFFFFFFFFFFFFF8;
    unint64_t v3 = a2 << 62;
  }
  else
  {
    uint64_t v2 = 8 * (a2 - 2);
    unint64_t v3 = 0x8000000000000000;
  }
  *unint64_t result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for DaemonAnalytics.DigitalPresentmentSpinnerShownOutcome()
{
  return &type metadata for DaemonAnalytics.DigitalPresentmentSpinnerShownOutcome;
}

ValueMetadata *type metadata accessor for DaemonAnalytics.VICALFetchResult()
{
  return &type metadata for DaemonAnalytics.VICALFetchResult;
}

uint64_t getEnumTagSinglePayload for DaemonAnalytics.MobileDocumentReaderSessionStatus(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC)
  {
    unsigned int v2 = a2 + 4;
    if (a2 + 4 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 4;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 4;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1D78C34CCLL);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 4;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  BOOL v8 = v7 >= 4;
  unsigned int v9 = v7 - 4;
  if (!v8) {
    unsigned int v9 = -1;
  }
  if (v9 + 1 >= 2) {
    return v9;
  }
  else {
    return 0;
  }
}

unsigned char *storeEnumTagSinglePayload for DaemonAnalytics.MobileDocumentReaderSessionStatus(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 4;
  if (a3 + 4 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFC) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v7 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x1D78C35B4);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

uint64_t sub_1D78C35DC(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 >= 4) {
    return v1 - 3;
  }
  else {
    return 0;
  }
}

unsigned char *sub_1D78C35F0(unsigned char *result, int a2)
{
  if (a2) {
    *unint64_t result = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for DaemonAnalytics.MobileDocumentReaderSessionStatus()
{
  return &type metadata for DaemonAnalytics.MobileDocumentReaderSessionStatus;
}

ValueMetadata *type metadata accessor for DaemonAnalytics.MobileDocumentReaderInvalidSessionReason()
{
  return &type metadata for DaemonAnalytics.MobileDocumentReaderInvalidSessionReason;
}

ValueMetadata *type metadata accessor for DaemonAnalytics.MobileDocumentReaderFetchLogoError()
{
  return &type metadata for DaemonAnalytics.MobileDocumentReaderFetchLogoError;
}

uint64_t type metadata accessor for IDCSAnalytics()
{
  return self;
}

uint64_t method lookup function for IDCSAnalytics(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for IDCSAnalytics);
}

ValueMetadata *type metadata accessor for IDCSAnalytics.ReaderAuthOutcome()
{
  return &type metadata for IDCSAnalytics.ReaderAuthOutcome;
}

uint64_t getEnumTagSinglePayload for IDCSAnalytics.ReaderAuthFailureReason(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF2) {
    goto LABEL_17;
  }
  if (a2 + 14 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 14) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 14;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 14;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 14;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xF;
  int v8 = v6 - 15;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for IDCSAnalytics.ReaderAuthFailureReason(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 14 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 14) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF2) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF1)
  {
    unsigned int v6 = ((a2 - 242) >> 8) + 1;
    *unint64_t result = a2 + 14;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D78C37DCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 14;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IDCSAnalytics.ReaderAuthFailureReason()
{
  return &type metadata for IDCSAnalytics.ReaderAuthFailureReason;
}

void *initializeBufferWithCopyOfBuffer for IDCSAnalytics.PhysicalPresentmentRequestedEventOutcome(void *a1, id *a2)
{
  id v3 = *a2;
  id v4 = *a2;
  *a1 = v3;
  return a1;
}

void destroy for IDCSAnalytics.PhysicalPresentmentRequestedEventOutcome(id *a1)
{
}

void **assignWithCopy for IDCSAnalytics.PhysicalPresentmentRequestedEventOutcome(void **a1, id *a2)
{
  id v3 = *a2;
  id v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = v3;

  return a1;
}

void **assignWithTake for IDCSAnalytics.PhysicalPresentmentRequestedEventOutcome(void **a1, void **a2)
{
  id v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for IDCSAnalytics.PhysicalPresentmentRequestedEventOutcome(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for IDCSAnalytics.PhysicalPresentmentRequestedEventOutcome(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = 0;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

uint64_t sub_1D78C3964(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_1D78C397C(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  *unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for IDCSAnalytics.PhysicalPresentmentRequestedEventOutcome()
{
  return &type metadata for IDCSAnalytics.PhysicalPresentmentRequestedEventOutcome;
}

ValueMetadata *type metadata accessor for IDCSAnalytics.NetworkStatus()
{
  return &type metadata for IDCSAnalytics.NetworkStatus;
}

ValueMetadata *type metadata accessor for IDCSAnalytics.ConnectionType()
{
  return &type metadata for IDCSAnalytics.ConnectionType;
}

ValueMetadata *type metadata accessor for IDCSAnalytics.ReaderAuthOnlineOCSPOutcome()
{
  return &type metadata for IDCSAnalytics.ReaderAuthOnlineOCSPOutcome;
}

ValueMetadata *type metadata accessor for IDCSAnalytics.PayloadValidationReason()
{
  return &type metadata for IDCSAnalytics.PayloadValidationReason;
}

uint64_t getEnumTagSinglePayload for IDCSAnalytics.PayloadValidationResult(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xE8) {
    goto LABEL_17;
  }
  if (a2 + 24 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 24) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 24;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 24;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 24;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x19;
  int v8 = v6 - 25;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for IDCSAnalytics.PayloadValidationResult(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 24 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 24) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE7)
  {
    unsigned int v6 = ((a2 - 232) >> 8) + 1;
    *unint64_t result = a2 + 24;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D78C3B4CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 24;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IDCSAnalytics.PayloadValidationResult()
{
  return &type metadata for IDCSAnalytics.PayloadValidationResult;
}

unsigned char *storeEnumTagSinglePayload for IDCSAnalytics.GarbageCollectionEventType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D78C3C50);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IDCSAnalytics.GarbageCollectionEventType()
{
  return &type metadata for IDCSAnalytics.GarbageCollectionEventType;
}

ValueMetadata *type metadata accessor for IDCSAnalytics.FetchCredentialUUIDsEventResult()
{
  return &type metadata for IDCSAnalytics.FetchCredentialUUIDsEventResult;
}

ValueMetadata *type metadata accessor for IDCSAnalytics.NamespaceElement()
{
  return &type metadata for IDCSAnalytics.NamespaceElement;
}

unsigned char *_s13CoreIDVShared13IDCSAnalyticsC13NetworkStatusOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D78C3D74);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IDCSAnalytics.ElementFallbackAlgorithm()
{
  return &type metadata for IDCSAnalytics.ElementFallbackAlgorithm;
}

uint64_t type metadata accessor for UIAnalytics()
{
  return self;
}

uint64_t method lookup function for UIAnalytics(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UIAnalytics);
}

ValueMetadata *type metadata accessor for UIAnalytics.BiometricAuthType()
{
  return &type metadata for UIAnalytics.BiometricAuthType;
}

unsigned char *_s13CoreIDVShared13IDCSAnalyticsC17ReaderAuthOutcomeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D78C3EC4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UIAnalytics.BiometricBindingSetupOutcome()
{
  return &type metadata for UIAnalytics.BiometricBindingSetupOutcome;
}

unsigned char *_s13CoreIDVShared15DaemonAnalyticsC43DigitalPresentmentCanRequestDocumentOutcomeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D78C3FC8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UIAnalytics.BiometricBindingReplacementOutcome()
{
  return &type metadata for UIAnalytics.BiometricBindingReplacementOutcome;
}

uint64_t sub_1D78C4000(uint64_t a1)
{
  return a1;
}

uint64_t sub_1D78C4038(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_1D78C4074()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t sub_1D78C40BC()
{
  return sub_1D78ACE5C(*(unsigned __int16 *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1D78C40CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF99A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t static IdentityDocument.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t IdentityDocument.image.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC13CoreIDVShared16IdentityDocument_image);
  sub_1D786E9D8(v1, *(void *)(v0 + OBJC_IVAR____TtC13CoreIDVShared16IdentityDocument_image + 8));
  return v1;
}

void *IdentityDocument.scanMetrics.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC13CoreIDVShared16IdentityDocument_scanMetrics);
  id v2 = v1;
  return v1;
}

void *IdentityDocument.imageMetrics.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC13CoreIDVShared16IdentityDocument_imageMetrics);
  id v2 = v1;
  return v1;
}

uint64_t IdentityDocument.pdf417Data.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC13CoreIDVShared16IdentityDocument_pdf417Data);
  sub_1D786E9D8(v1, *(void *)(v0 + OBJC_IVAR____TtC13CoreIDVShared16IdentityDocument_pdf417Data + 8));
  return v1;
}

id IdentityDocument.__allocating_init(image:scanMetrics:imageMetrics:pdf417Data:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = (char *)objc_allocWithZone(v6);
  uint64_t v14 = &v13[OBJC_IVAR____TtC13CoreIDVShared16IdentityDocument_image];
  *(void *)uint64_t v14 = a1;
  *((void *)v14 + 1) = a2;
  *(void *)&v13[OBJC_IVAR____TtC13CoreIDVShared16IdentityDocument_scanMetrics] = a3;
  *(void *)&v13[OBJC_IVAR____TtC13CoreIDVShared16IdentityDocument_imageMetrics] = a4;
  BOOL v15 = &v13[OBJC_IVAR____TtC13CoreIDVShared16IdentityDocument_pdf417Data];
  *(void *)BOOL v15 = a5;
  *((void *)v15 + 1) = a6;
  v17.receiver = v13;
  v17.super_class = v6;
  return objc_msgSendSuper2(&v17, sel_init);
}

id IdentityDocument.init(image:scanMetrics:imageMetrics:pdf417Data:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v14 = &v6[OBJC_IVAR____TtC13CoreIDVShared16IdentityDocument_image];
  *(void *)uint64_t v14 = a1;
  *((void *)v14 + 1) = a2;
  *(void *)&v6[OBJC_IVAR____TtC13CoreIDVShared16IdentityDocument_scanMetrics] = a3;
  *(void *)&v6[OBJC_IVAR____TtC13CoreIDVShared16IdentityDocument_imageMetrics] = a4;
  BOOL v15 = &v6[OBJC_IVAR____TtC13CoreIDVShared16IdentityDocument_pdf417Data];
  *(void *)BOOL v15 = a5;
  *((void *)v15 + 1) = a6;
  v17.receiver = v6;
  v17.super_class = ObjectType;
  return objc_msgSendSuper2(&v17, sel_init);
}

id IdentityDocument.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  id v4 = sub_1D78C48FC();

  return v4;
}

id IdentityDocument.init(coder:)(void *a1)
{
  id v2 = sub_1D78C48FC();

  return v2;
}

Swift::Void __swiftcall IdentityDocument.encode(with:)(NSCoder with)
{
  if (*(void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared16IdentityDocument_image + 8) >> 60 == 15) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = sub_1D7A9AFF8();
  }
  id v4 = (void *)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeObject:v3 forKey:v4];
  swift_unknownObjectRelease();

  uint64_t v5 = *(void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared16IdentityDocument_scanMetrics);
  unsigned int v6 = (void *)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeObject:v5 forKey:v6];

  uint64_t v7 = *(void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared16IdentityDocument_imageMetrics);
  int v8 = (void *)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeObject:v7 forKey:v8];

  if (*(void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared16IdentityDocument_pdf417Data + 8) >> 60 == 15) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = sub_1D7A9AFF8();
  }
  id v10 = (id)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeObject:v9 forKey:v10];
  swift_unknownObjectRelease();
}

id IdentityDocument.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void IdentityDocument.init()()
{
}

id IdentityDocument.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id sub_1D78C48FC()
{
  ObjectType = (objc_class *)swift_getObjectType();
  sub_1D78C4AF4();
  objc_super v2 = v0;
  uint64_t v3 = sub_1D7A9C908();
  if (v3)
  {
    id v4 = (void *)v3;
    uint64_t v5 = sub_1D7A9B028();
    unint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    unint64_t v7 = 0xF000000000000000;
  }
  int v8 = (uint64_t *)&v2[OBJC_IVAR____TtC13CoreIDVShared16IdentityDocument_image];
  *int v8 = v5;
  v8[1] = v7;
  type metadata accessor for IdentityImageQualityMetrics();
  *(void *)&v2[OBJC_IVAR____TtC13CoreIDVShared16IdentityDocument_scanMetrics] = sub_1D7A9C908();
  *(void *)&v2[OBJC_IVAR____TtC13CoreIDVShared16IdentityDocument_imageMetrics] = sub_1D7A9C908();
  uint64_t v9 = sub_1D7A9C908();
  if (v9)
  {
    id v10 = (void *)v9;
    uint64_t v11 = sub_1D7A9B028();
    unint64_t v13 = v12;
  }
  else
  {
    uint64_t v11 = 0;
    unint64_t v13 = 0xF000000000000000;
  }
  uint64_t v14 = (uint64_t *)&v2[OBJC_IVAR____TtC13CoreIDVShared16IdentityDocument_pdf417Data];
  *uint64_t v14 = v11;
  v14[1] = v13;

  v16.receiver = v2;
  v16.super_class = ObjectType;
  return objc_msgSendSuper2(&v16, sel_init);
}

uint64_t type metadata accessor for IdentityDocument()
{
  return self;
}

uint64_t method lookup function for IdentityDocument(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for IdentityDocument);
}

uint64_t dispatch thunk of IdentityDocument.__allocating_init(image:scanMetrics:imageMetrics:pdf417Data:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of IdentityDocument.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

unint64_t sub_1D78C4AF4()
{
  unint64_t result = qword_1EA847920;
  if (!qword_1EA847920)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EA847920);
  }
  return result;
}

uint64_t LogotypeDetails.mediaType.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t LogotypeDetails.mediaType.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *objc_super v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*LogotypeDetails.mediaType.modify())()
{
  return nullsub_1;
}

uint64_t LogotypeDetails.logotypes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LogotypeDetails.logotypes.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*LogotypeDetails.logotypes.modify())()
{
  return nullsub_1;
}

ValueMetadata *type metadata accessor for LogotypeDetails()
{
  return &type metadata for LogotypeDetails;
}

uint64_t sub_1D78C4C20@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1D78C4E8C(a1, 22, 0);
  if (!v2)
  {
    uint64_t v8 = v6;
    unint64_t v9 = v7;
    uint64_t v10 = sub_1D78C5340(16, 0, a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1D78C5B6C);
    uint64_t v11 = sub_1D78C5340(16, 0, a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1D798F73C);
    if (*(void *)(v10 + 16) == *(void *)(v11 + 16))
    {
      uint64_t v12 = sub_1D78D1764(v10, v11, (void (*)(void *__return_ptr, _OWORD *))sub_1D78C5610);
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if (__OFSUB__(v9 >> 1, v8))
      {
        __break(1u);
      }
      else
      {
        swift_unknownObjectRetain();
        uint64_t v13 = sub_1D7A9C098();
        uint64_t v15 = v14;
        swift_unknownObjectRelease();
        uint64_t v16 = sub_1D78C567C(v12);
        swift_release();
        uint64_t result = swift_unknownObjectRelease();
        *a2 = v13;
        a2[1] = v15;
        a2[2] = v16;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      type metadata accessor for ASN1Error.Backing();
      uint64_t v17 = swift_allocObject();
      *(unsigned char *)(v17 + 16) = 1;
      *(void *)(v17 + 24) = 0xD000000000000043;
      *(void *)(v17 + 32) = 0x80000001D7AC0DC0;
      *(void *)(v17 + 40) = 0xD000000000000023;
      *(void *)(v17 + 48) = 0x80000001D7AC0E10;
      *(void *)(v17 + 56) = 30;
      sub_1D785D8F0();
      swift_allocError();
      *uint64_t v18 = v17;
      swift_willThrow();
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1D78C4E8C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  sub_1D7A2BC88((uint64_t)v8);
  sub_1D785D9E8((uint64_t)v8, (uint64_t)v9);
  if ((void)v10)
  {
    v12[2] = v9[2];
    v12[3] = v9[3];
    v12[4] = v10;
    v12[5] = v11;
    v12[0] = v9[0];
    v12[1] = v9[1];
    return sub_1D7A890BC((uint64_t)v12, a2, a3);
  }
  else
  {
    sub_1D7A9CC48();
    swift_bridgeObjectRelease();
    type metadata accessor for ASN1Error.Backing();
    uint64_t v6 = swift_allocObject();
    *(unsigned char *)(v6 + 16) = 1;
    *(void *)(v6 + 24) = 0xD000000000000038;
    *(void *)(v6 + 32) = 0x80000001D7AC0F50;
    *(void *)(v6 + 40) = 0xD000000000000018;
    *(void *)(v6 + 48) = 0x80000001D7AC0E80;
    *(void *)(v6 + 56) = 1087;
    sub_1D785D8F0();
    swift_allocError();
    *unint64_t v7 = v6;
    return swift_willThrow();
  }
}

uint64_t sub_1D78C4FCC(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  sub_1D7A2BC88((uint64_t)v8);
  sub_1D785D9E8((uint64_t)v8, (uint64_t)v9);
  if ((void)v10)
  {
    v12[2] = v9[2];
    v12[3] = v9[3];
    v12[4] = v10;
    v12[5] = v11;
    v12[0] = v9[0];
    v12[1] = v9[1];
    return sub_1D7A471E8((uint64_t)v12, a2, a3);
  }
  else
  {
    sub_1D7A9CC48();
    swift_bridgeObjectRelease();
    type metadata accessor for ASN1Error.Backing();
    uint64_t v6 = swift_allocObject();
    *(unsigned char *)(v6 + 16) = 1;
    *(void *)(v6 + 24) = 0xD00000000000003FLL;
    *(void *)(v6 + 32) = 0x80000001D7AC0F10;
    *(void *)(v6 + 40) = 0xD000000000000018;
    *(void *)(v6 + 48) = 0x80000001D7AC0E80;
    *(void *)(v6 + 56) = 1087;
    sub_1D785D8F0();
    swift_allocError();
    *unint64_t v7 = v6;
    return swift_willThrow();
  }
}

uint64_t sub_1D78C5110(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  sub_1D7A2BC88((uint64_t)v12);
  sub_1D785D9E8((uint64_t)v12, (uint64_t)v13);
  if (!(void)v14)
  {
    sub_1D7A9CC48();
    swift_bridgeObjectRelease();
    type metadata accessor for ASN1Error.Backing();
    uint64_t v6 = swift_allocObject();
    *(unsigned char *)(v6 + 16) = 1;
    *(void *)(v6 + 24) = 0xD00000000000003ALL;
    *(void *)(v6 + 32) = 0x80000001D7AC0EA0;
    *(void *)(v6 + 40) = 0xD000000000000018;
    *(void *)(v6 + 48) = 0x80000001D7AC0E80;
    *(void *)(v6 + 56) = 1087;
    sub_1D785D8F0();
    swift_allocError();
    *unint64_t v7 = v6;
    swift_willThrow();
    return v6;
  }
  v17[1] = v13[2];
  v17[2] = v13[3];
  v17[3] = v14;
  void v17[4] = v15;
  long long v16 = v13[0];
  v17[0] = v13[1];
  if (*(void *)&v13[0] != a2 || BYTE8(v13[0]) != a3)
  {
    uint64_t v8 = sub_1D78F7D1C();
    uint64_t v6 = v9;
    type metadata accessor for ASN1Error.Backing();
    uint64_t v10 = swift_allocObject();
    *(unsigned char *)(v10 + 16) = 0;
    *(void *)(v10 + 24) = v8;
    *(void *)(v10 + 32) = v6;
    *(void *)(v10 + 40) = 0xD000000000000023;
    *(void *)(v10 + 48) = 0x80000001D7AC0EE0;
    *(void *)(v10 + 56) = 26;
    sub_1D785D8F0();
    swift_allocError();
    uint64_t *v11 = v10;
    swift_willThrow();
    sub_1D785DAD8(v12);
    return v6;
  }
  sub_1D785D98C((uint64_t)v17, (uint64_t)v18);
  uint64_t result = sub_1D785D98C((uint64_t)v18, (uint64_t)&v19);
  if (v20)
  {
    uint64_t v6 = v19;
    sub_1D785DA98((uint64_t)v18, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRetain);
    sub_1D785DAD8(v12);
    return v6;
  }
  __break(1u);
  return result;
}

uint64_t sub_1D78C5340(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  sub_1D7A2BC88((uint64_t)v18);
  sub_1D785D9E8((uint64_t)v18, (uint64_t)v19);
  if ((void)v20)
  {
    v23[1] = v19[2];
    _OWORD v23[2] = v19[3];
    void v23[3] = v20;
    v23[4] = v21;
    long long v22 = v19[0];
    v23[0] = v19[1];
    if (*(void *)&v19[0] == a1
      && BYTE8(v19[0]) == a2
      && (sub_1D785D98C((uint64_t)v23, (uint64_t)v24), sub_1D785D98C((uint64_t)v24, (uint64_t)v25), (v26 & 1) == 0))
    {
      uint64_t v13 = v25[0];
      uint64_t v14 = v25[1];
      uint64_t v15 = v25[2];
      uint64_t v16 = v25[3];
      sub_1D785DA98((uint64_t)v24, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRetain);
      uint64_t v9 = a4(v13, v14, v15, v16);
      sub_1D785DA98((uint64_t)v24, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
      sub_1D785DAD8(v18);
    }
    else
    {
      uint64_t v7 = sub_1D78F7D1C();
      uint64_t v9 = v8;
      type metadata accessor for ASN1Error.Backing();
      uint64_t v10 = swift_allocObject();
      *(unsigned char *)(v10 + 16) = 0;
      *(void *)(v10 + 24) = v7;
      *(void *)(v10 + 32) = v9;
      *(void *)(v10 + 40) = 0xD000000000000018;
      *(void *)(v10 + 48) = 0x80000001D7AC0E80;
      *(void *)(v10 + 56) = 107;
      sub_1D785D8F0();
      swift_allocError();
      uint64_t *v11 = v10;
      swift_willThrow();
      sub_1D785DAD8(v18);
    }
  }
  else
  {
    sub_1D7A9CC48();
    sub_1D7A9C128();
    sub_1D7A9C128();
    sub_1D7A9C128();
    sub_1D78F7D1C();
    sub_1D7A9C128();
    swift_bridgeObjectRelease();
    type metadata accessor for ASN1Error.Backing();
    uint64_t v9 = swift_allocObject();
    *(unsigned char *)(v9 + 16) = 1;
    *(void *)(v9 + 24) = 0;
    *(void *)(v9 + 32) = 0xE000000000000000;
    *(void *)(v9 + 40) = 0xD000000000000018;
    *(void *)(v9 + 48) = 0x80000001D7AC0E80;
    *(void *)(v9 + 56) = 125;
    sub_1D785D8F0();
    swift_allocError();
    uint64_t *v12 = v9;
    swift_willThrow();
  }
  return v9;
}

uint64_t sub_1D78C5610@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  if (__OFSUB__(*(void *)(result + 24) >> 1, *(void *)(result + 16)))
  {
    __break(1u);
  }
  else
  {
    swift_unknownObjectRetain();
    uint64_t v3 = sub_1D7A9C098();
    uint64_t v5 = v4;
    uint64_t result = swift_unknownObjectRelease();
    *a2 = v3;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1D78C567C(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v20 = MEMORY[0x1E4FBC860];
    sub_1D78AB568(0, v1, 0);
    uint64_t v2 = v20;
    uint64_t v4 = a1 + 56;
    do
    {
      uint64_t v5 = *(void *)(v4 + 16);
      long long v10 = *(_OWORD *)(v4 + 24);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      sub_1D7860790(v5, v10);
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8431D0);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8430D8);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1D78AB568(0, *(void *)(v2 + 16) + 1, 1);
        uint64_t v2 = v20;
      }
      unint64_t v7 = *(void *)(v2 + 16);
      unint64_t v6 = *(void *)(v2 + 24);
      if (v7 >= v6 >> 1)
      {
        sub_1D78AB568(v6 > 1, v7 + 1, 1);
        uint64_t v2 = v20;
      }
      *(void *)(v2 + 16) = v7 + 1;
      uint64_t v8 = (void *)(v2 + 72 * v7);
      v8[4] = v11;
      v8[5] = v12;
      v8[6] = v13;
      v8[7] = v14;
      v8[8] = v15;
      v8[9] = v16;
      v8[10] = v17;
      v8[11] = v18;
      v8[12] = v19;
      v4 += 72;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1D78C583C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  BOOL v4 = *(void *)a1 == 16 && *(unsigned char *)(a1 + 8) == 0;
  if (!v4 || (sub_1D785D98C(a1 + 16, (uint64_t)v31), sub_1D785D98C((uint64_t)v31, (uint64_t)v32), (v34 & 1) != 0))
  {
    sub_1D78C5EDC(a1);
    uint64_t v6 = sub_1D78F7D1C();
    uint64_t v8 = v7;
    type metadata accessor for ASN1Error.Backing();
    uint64_t v9 = swift_allocObject();
    *(unsigned char *)(v9 + 16) = 0;
    *(void *)(v9 + 24) = v6;
    *(void *)(v9 + 32) = v8;
    *(void *)(v9 + 40) = 0xD000000000000018;
    *(void *)(v9 + 48) = 0x80000001D7AC0E80;
    *(void *)(v9 + 56) = 82;
    sub_1D785D8F0();
    swift_allocError();
    *long long v10 = v9;
    swift_willThrow();
    return sub_1D785D944(a1);
  }
  v26[0] = v32[0];
  v26[1] = v32[1];
  uint64_t v27 = v33;
  sub_1D785DA98((uint64_t)v31, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRetain);
  sub_1D785DA98((uint64_t)v31, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRetain);
  sub_1D78C5EDC(a1);
  sub_1D7933CFC((uint64_t)v25);
  if (v2)
  {
    swift_unknownObjectRelease();
    sub_1D785DA98((uint64_t)v31, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
    return sub_1D785D944(a1);
  }
  uint64_t v12 = v25[0];
  uint64_t v11 = v25[1];
  uint64_t v14 = v25[2];
  uint64_t v13 = v25[3];
  uint64_t v15 = v25[4];
  uint64_t v16 = sub_1D78C5110((uint64_t)v26, 4, 0);
  uint64_t v24 = sub_1D78D19C8(v16, v18, v19, v20);
  unint64_t v35 = v21;
  swift_unknownObjectRelease();
  sub_1D7A2BC88((uint64_t)v28);
  sub_1D785DAD8(v28);
  sub_1D785D9E8((uint64_t)v28, (uint64_t)v29);
  if (v30)
  {
    type metadata accessor for ASN1Error.Backing();
    uint64_t v22 = swift_allocObject();
    *(unsigned char *)(v22 + 16) = 1;
    *(void *)(v22 + 24) = 0xD000000000000019;
    *(void *)(v22 + 32) = 0x80000001D7ABCD20;
    *(void *)(v22 + 40) = 0xD000000000000018;
    *(void *)(v22 + 48) = 0x80000001D7AC0E80;
    *(void *)(v22 + 56) = 90;
    sub_1D785D8F0();
    swift_allocError();
    *BOOL v23 = v22;
    swift_willThrow();
    sub_1D785DA98((uint64_t)v31, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    sub_1D78607E8((uint64_t)v24, v35);
    swift_unknownObjectRelease();
    return sub_1D785D944(a1);
  }
  swift_unknownObjectRelease();
  sub_1D785DA98((uint64_t)v31, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
  uint64_t result = sub_1D785D944(a1);
  *a2 = v12;
  a2[1] = v11;
  a2[2] = v14;
  a2[3] = v13;
  a2[4] = v15;
  a2[5] = v24;
  a2[6] = v35;
  return result;
}

uint64_t sub_1D78C5B6C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v64 = MEMORY[0x1E4FBC860];
  sub_1D78AB5A8(0, 0, 0);
  uint64_t v8 = v64;
  int64_t v9 = a4 >> 1;
  uint64_t v39 = a1;
  uint64_t result = swift_unknownObjectRetain();
  if (a4 >> 1 == a3)
  {
LABEL_39:
    swift_unknownObjectRelease();
    return v8;
  }
  else
  {
    uint64_t v37 = a4 & 1;
    uint64_t v38 = a2 + 112;
    uint64_t v41 = a2;
    while (a3 < v9)
    {
      uint64_t v11 = (uint64_t *)(a2 + 96 * a3);
      uint64_t v12 = *v11;
      char v13 = *((unsigned char *)v11 + 8);
      int v14 = *((unsigned __int8 *)v11 + 24);
      uint64_t v15 = a3 + 1;
      long long v45 = *((_OWORD *)v11 + 3);
      long long v47 = *((_OWORD *)v11 + 2);
      uint64_t v43 = v8;
      if (v14 == 1)
      {
        uint64_t v16 = v11[2];
        if (v15 == v9)
        {
          uint64_t v17 = v9;
        }
        else
        {
          uint64_t v22 = (void *)(v38 + 96 * a3);
          uint64_t v17 = a3 + 1;
          do
          {
            if (v17 >= v9)
            {
LABEL_41:
              __break(1u);
LABEL_42:
              __break(1u);
              goto LABEL_43;
            }
            if (v16 >= *v22) {
              goto LABEL_15;
            }
            uint64_t v23 = v17 + 1;
            if (__OFADD__(v17, 1)) {
              goto LABEL_42;
            }
            ++v17;
            v22 += 12;
          }
          while (v23 != v9);
          uint64_t v17 = v9;
LABEL_15:
          if (v17 <= a3) {
            goto LABEL_44;
          }
          if (v17 < 0) {
            goto LABEL_45;
          }
        }
        uint64_t v24 = v17 - v15;
        if (__OFSUB__(v17, v15)) {
          goto LABEL_46;
        }
        if (v24 < 0) {
          goto LABEL_47;
        }
        uint64_t v25 = v9 - v15;
        if (__OFSUB__(v9, v15)) {
          goto LABEL_48;
        }
        uint64_t v40 = v12;
        if (!v24 || v25 < 0 || (uint64_t v26 = v9, v25 >= v24))
        {
          uint64_t v26 = v17;
          if (__OFADD__(v15, v24)) {
            goto LABEL_51;
          }
          if (v9 < v17) {
            goto LABEL_49;
          }
        }
        if (v26 <= a3) {
          goto LABEL_50;
        }
        if (v15 != v17)
        {
          if (v15 >= v17) {
            goto LABEL_52;
          }
          uint64_t v27 = (uint64_t *)(v38 + 96 * a3);
          do
          {
            uint64_t v28 = *v27;
            v27 += 12;
            if (v16 >= v28)
            {
              __break(1u);
              goto LABEL_41;
            }
            --v24;
          }
          while (v24);
          if (*(void *)(a2 + 96 * v15 + 16) != v16 + 1) {
            goto LABEL_53;
          }
        }
        char v19 = v13;
        uint64_t v21 = v37 | (2 * v17);
        uint64_t v18 = v39;
        swift_unknownObjectRetain();
        uint64_t v20 = v15;
        uint64_t v42 = v26;
        uint64_t v12 = v40;
      }
      else
      {
        uint64_t v18 = v11[8];
        if (!v18) {
          goto LABEL_54;
        }
        char v19 = *((unsigned char *)v11 + 8);
        a2 = v11[9];
        uint64_t v20 = v11[10];
        uint64_t v21 = v11[11];
        swift_unknownObjectRetain();
        uint64_t v16 = 0;
        uint64_t v42 = v15;
      }
      uint64_t v29 = v14 ^ 1u;
      uint64_t v54 = v12;
      char v55 = v19;
      uint64_t v56 = v18;
      uint64_t v57 = a2;
      uint64_t v58 = v20;
      uint64_t v59 = v21;
      uint64_t v60 = v16;
      char v61 = v29;
      long long v62 = v47;
      long long v63 = v45;
      swift_unknownObjectRetain();
      sub_1D78C583C((uint64_t)&v54, &v50);
      if (v49)
      {
        j__swift_unknownObjectRelease(v18, a2, v20, v21, v16, v29);
        uint64_t v8 = v43;
        swift_release();
        swift_unknownObjectRelease();
        goto LABEL_39;
      }
      j__swift_unknownObjectRelease(v18, a2, v20, v21, v16, v29);
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v30 = v50;
      long long v31 = v51;
      long long v32 = v52;
      long long v33 = v53;
      uint64_t v8 = v43;
      uint64_t v64 = v43;
      unint64_t v35 = *(void *)(v43 + 16);
      unint64_t v34 = *(void *)(v43 + 24);
      if (v35 >= v34 >> 1)
      {
        long long v46 = v52;
        long long v48 = v51;
        long long v44 = v53;
        uint64_t result = sub_1D78AB5A8(v34 > 1, v35 + 1, 1);
        long long v33 = v44;
        long long v32 = v46;
        long long v31 = v48;
        uint64_t v8 = v64;
      }
      *(void *)(v8 + 16) = v35 + 1;
      uint64_t v36 = v8 + 56 * v35;
      *(void *)(v36 + 32) = v30;
      *(_OWORD *)(v36 + 40) = v31;
      *(_OWORD *)(v36 + 56) = v32;
      *(_OWORD *)(v36 + 72) = v33;
      a2 = v41;
      a3 = v42;
      if (v42 == v9) {
        goto LABEL_39;
      }
    }
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
  }
  return result;
}

uint64_t sub_1D78C5EDC(uint64_t a1)
{
  return a1;
}

CoreIDVShared::CoreIDVAssetBundle::CertificateType_optional __swiftcall CoreIDVAssetBundle.CertificateType.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v2 = v1;
  unint64_t v3 = sub_1D7A9D058();
  result.SecCertificateRef value = swift_bridgeObjectRelease();
  char v5 = 3;
  if (v3 < 3) {
    char v5 = v3;
  }
  *uint64_t v2 = v5;
  return result;
}

unint64_t CoreIDVAssetBundle.CertificateType.rawValue.getter()
{
  unint64_t v1 = 0xD000000000000010;
  if (*v0 == 1) {
    unint64_t v1 = 0x6F52726575737369;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0xD000000000000011;
  }
}

uint64_t sub_1D78C5FE4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1D7999370(*a1, *a2);
}

uint64_t sub_1D78C5FF0()
{
  return sub_1D7A1E3D0();
}

uint64_t sub_1D78C5FF8()
{
  sub_1D7A9C0B8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D78C6094()
{
  return sub_1D7A1EB5C();
}

CoreIDVShared::CoreIDVAssetBundle::CertificateType_optional sub_1D78C609C(Swift::String *a1)
{
  return CoreIDVAssetBundle.CertificateType.init(rawValue:)(*a1);
}

void sub_1D78C60A8(unint64_t *a1@<X8>)
{
  unint64_t v2 = 0xD000000000000010;
  unint64_t v3 = 0xEB0000000073746FLL;
  if (*v1 == 1) {
    unint64_t v2 = 0x6F52726575737369;
  }
  else {
    unint64_t v3 = 0x80000001D7ABBB70;
  }
  if (*v1)
  {
    unint64_t v4 = v3;
  }
  else
  {
    unint64_t v2 = 0xD000000000000011;
    unint64_t v4 = 0x80000001D7ABBB50;
  }
  *a1 = v2;
  a1[1] = v4;
}

uint64_t CoreIDVAssetBundle.version.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CoreIDVAssetBundle.terminalAuthRoots.getter@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 24);
  *(void *)a1 = *(void *)(v1 + 16);
  *(unsigned char *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t CoreIDVAssetBundle.issuerRoots.getter@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 40);
  *(void *)a1 = *(void *)(v1 + 32);
  *(unsigned char *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t CoreIDVAssetBundle.appleIssuerRoots.getter@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 56);
  *(void *)a1 = *(void *)(v1 + 48);
  *(unsigned char *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

unint64_t sub_1D78C6180()
{
  unint64_t result = 0x6E6F6973726576;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000011;
      break;
    case 2:
      unint64_t result = 0x6F52726575737369;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1D78C6224@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1D78C89BC(a1, a2);
  *a3 = result;
  return result;
}

void sub_1D78C624C(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1D78C6258(uint64_t a1)
{
  unint64_t v2 = sub_1D78C6510();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1D78C6294(uint64_t a1)
{
  unint64_t v2 = sub_1D78C6510();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t CoreIDVAssetBundle.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8431D8);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v5, v6, v7, v8, v9, v10, v11);
  char v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v1 + 16);
  int v28 = *(unsigned __int8 *)(v1 + 24);
  uint64_t v23 = *(void *)(v1 + 32);
  uint64_t v24 = v14;
  int v22 = *(unsigned __int8 *)(v1 + 40);
  uint64_t v21 = *(void *)(v1 + 48);
  HIDWORD(v20) = *(unsigned __int8 *)(v1 + 56);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D78C6510();
  sub_1D7A9D6E8();
  LOBYTE(v26) = 0;
  uint64_t v15 = v25;
  sub_1D7A9D1D8();
  if (!v15)
  {
    char v16 = v22;
    uint64_t v17 = v23;
    uint64_t v18 = v21;
    uint64_t v26 = v24;
    char v27 = v28;
    char v29 = 1;
    sub_1D78C6564();
    sub_1D7A9D1C8();
    uint64_t v26 = v17;
    char v27 = v16;
    char v29 = 2;
    sub_1D7A9D1C8();
    uint64_t v26 = v18;
    char v27 = BYTE4(v20);
    char v29 = 3;
    sub_1D7A9D1C8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v13, v3);
}

unint64_t sub_1D78C6510()
{
  unint64_t result = qword_1EA8431E0;
  if (!qword_1EA8431E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8431E0);
  }
  return result;
}

unint64_t sub_1D78C6564()
{
  unint64_t result = qword_1EA8431E8;
  if (!qword_1EA8431E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8431E8);
  }
  return result;
}

uint64_t CoreIDVAssetBundle.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8431F0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7, v8, v9, v10, v11, v12, v13);
  uint64_t v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D78C6510();
  sub_1D7A9D6A8();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  LOBYTE(v29) = 0;
  uint64_t v16 = sub_1D7A9D0F8();
  uint64_t v18 = v17;
  uint64_t v28 = v16;
  char v32 = 1;
  sub_1D78C6940();
  swift_bridgeObjectRetain();
  sub_1D7A9D0E8();
  int v31 = v30;
  char v32 = 2;
  uint64_t v27 = v29;
  swift_bridgeObjectRetain();
  uint64_t v26 = 0;
  sub_1D7A9D0E8();
  int v24 = v30;
  char v32 = 3;
  uint64_t v25 = v29;
  swift_bridgeObjectRetain();
  sub_1D7A9D0E8();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v5);
  uint64_t v20 = v29;
  unsigned __int8 v21 = v30;
  swift_bridgeObjectRetain();
  uint64_t v22 = v27;
  *(void *)a2 = v28;
  *(void *)(a2 + 8) = v18;
  *(void *)(a2 + 16) = v22;
  *(unsigned char *)(a2 + 24) = v31;
  *(void *)(a2 + 32) = v25;
  *(unsigned char *)(a2 + 40) = v24;
  *(void *)(a2 + 48) = v20;
  *(unsigned char *)(a2 + 56) = v21;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

unint64_t sub_1D78C6940()
{
  unint64_t result = qword_1EA8431F8;
  if (!qword_1EA8431F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8431F8);
  }
  return result;
}

uint64_t sub_1D78C6994@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return CoreIDVAssetBundle.init(from:)(a1, a2);
}

uint64_t sub_1D78C69AC(void *a1)
{
  return CoreIDVAssetBundle.encode(to:)(a1);
}

uint64_t CoreIDVAssetCertificates.certificates.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CoreIDVAssetCertificates.overrideDefault.getter()
{
  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t sub_1D78C69D4()
{
  if (*v0) {
    return 0x656469727265766FLL;
  }
  else {
    return 0x6369666974726563;
  }
}

uint64_t sub_1D78C6A24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1D78C8B84(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D78C6A4C(uint64_t a1)
{
  unint64_t v2 = sub_1D78C6C78();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1D78C6A88(uint64_t a1)
{
  unint64_t v2 = sub_1D78C6C78();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t CoreIDVAssetCertificates.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA843200);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6, v7, v8, v9, v10, v11, v12);
  uint64_t v14 = (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *v1;
  v17[2] = *((unsigned __int8 *)v1 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D78C6C78();
  sub_1D7A9D6E8();
  uint64_t v20 = v15;
  char v19 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF8C18);
  sub_1D78C6EE0((unint64_t *)&unk_1EA844210);
  sub_1D7A9D228();
  if (!v2)
  {
    char v18 = 1;
    sub_1D7A9D1E8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v14, v4);
}

unint64_t sub_1D78C6C78()
{
  unint64_t result = qword_1EA843208;
  if (!qword_1EA843208)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA843208);
  }
  return result;
}

uint64_t CoreIDVAssetCertificates.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA843210);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7, v8, v9, v10, v11, v12, v13);
  uint64_t v15 = &v19[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D78C6C78();
  sub_1D7A9D6A8();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF8C18);
  v19[15] = 0;
  sub_1D78C6EE0((unint64_t *)&unk_1EBDF8C20);
  sub_1D7A9D148();
  uint64_t v16 = v20;
  v19[14] = 1;
  swift_bridgeObjectRetain();
  char v17 = sub_1D7A9D108();
  (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v15, v5);
  *(void *)a2 = v16;
  *(unsigned char *)(a2 + 8) = v17 & 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D78C6EE0(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EBDF8C18);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D78C6F44@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return CoreIDVAssetCertificates.init(from:)(a1, a2);
}

uint64_t sub_1D78C6F5C(void *a1)
{
  return CoreIDVAssetCertificates.encode(to:)(a1);
}

CoreIDVShared::CoreIDVAsset::deviceType_optional __swiftcall CoreIDVAsset.deviceType.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v2 = v1;
  uint64_t v3 = sub_1D7A9D058();
  result.SecCertificateRef value = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *uint64_t v2 = v5;
  return result;
}

uint64_t CoreIDVAsset.deviceType.rawValue.getter()
{
  if (*v0) {
    return 0x534F6863746177;
  }
  else {
    return 5459817;
  }
}

uint64_t sub_1D78C700C(char *a1, char *a2)
{
  return sub_1D79991C4(*a1, *a2);
}

uint64_t sub_1D78C7018()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D78C7094()
{
  sub_1D7A9C0B8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D78C70FC()
{
  return sub_1D7A9D628();
}

CoreIDVShared::CoreIDVAsset::deviceType_optional sub_1D78C7174(Swift::String *a1)
{
  return CoreIDVAsset.deviceType.init(rawValue:)(*a1);
}

void sub_1D78C7180(uint64_t *a1@<X8>)
{
  uint64_t v2 = 5459817;
  if (*v1) {
    uint64_t v2 = 0x534F6863746177;
  }
  unint64_t v3 = 0xE300000000000000;
  if (*v1) {
    unint64_t v3 = 0xE700000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1D78C71B8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1D7999264(*a1, *a2);
}

uint64_t sub_1D78C71C4()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D78C7260()
{
  sub_1D7A9C0B8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D78C72E8()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D78C7380@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1D78C8CB4();
  *a1 = result;
  return result;
}

void sub_1D78C73B0(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE700000000000000;
  unint64_t v4 = 0xE300000000000000;
  uint64_t v5 = 5459817;
  if (v2 != 1)
  {
    uint64_t v5 = 0x534F6863746177;
    unint64_t v4 = 0xE700000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x746C7561666564;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1D78C7408()
{
  uint64_t v1 = 5459817;
  if (*v0 != 1) {
    uint64_t v1 = 0x534F6863746177;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x746C7561666564;
  }
}

uint64_t sub_1D78C745C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1D78C8CB4();
  *a1 = result;
  return result;
}

uint64_t sub_1D78C7484(uint64_t a1)
{
  unint64_t v2 = sub_1D78C78F0();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1D78C74C0(uint64_t a1)
{
  unint64_t v2 = sub_1D78C78F0();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t CoreIDVAsset.base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v3 = *(void *)(v1 + 32);
  char v4 = *(unsigned char *)(v1 + 40);
  uint64_t v5 = *(void *)(v1 + 48);
  char v6 = *(unsigned char *)(v1 + 56);
  uint64_t v7 = *(void *)(v1 + 64);
  char v8 = *(unsigned char *)(v1 + 72);
  *(void *)a1 = *(void *)(v1 + 16);
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v5;
  *(unsigned char *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = v7;
  *(unsigned char *)(a1 + 56) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t CoreIDVAsset.iOS.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CoreIDVAsset.watchOS.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CoreIDVAsset.__allocating_init(from:)(void *a1)
{
  uint64_t v2 = swift_allocObject();
  CoreIDVAsset.init(from:)(a1);
  return v2;
}

uint64_t CoreIDVAsset.init(from:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA843218);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6, v7, v8, v9, v10, v11, v12);
  uint64_t v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D78C78F0();
  sub_1D7A9D6A8();
  if (v2)
  {
    type metadata accessor for CoreIDVAsset();
    swift_deallocPartialClassInstance();
  }
  else
  {
    char v30 = 0;
    sub_1D78C7968();
    sub_1D7A9D148();
    uint64_t v15 = v24;
    char v16 = v25;
    uint64_t v17 = v26;
    char v18 = v27;
    uint64_t v19 = v28;
    char v20 = v29;
    *(_OWORD *)(v1 + 16) = v23;
    *(void *)(v1 + 32) = v15;
    *(unsigned char *)(v1 + 40) = v16;
    *(void *)(v1 + 48) = v17;
    *(unsigned char *)(v1 + 56) = v18;
    *(void *)(v1 + 64) = v19;
    *(unsigned char *)(v1 + 72) = v20;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA843230);
    char v30 = 1;
    v22[1] = sub_1D78C7D28(&qword_1EA843238, (void (*)(void))sub_1D78C7968);
    sub_1D7A9D0E8();
    *(void *)(v1 + 80) = v23;
    char v30 = 2;
    sub_1D7A9D0E8();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
    *(void *)(v1 + 88) = v23;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v1;
}

unint64_t sub_1D78C78F0()
{
  unint64_t result = qword_1EA843220;
  if (!qword_1EA843220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA843220);
  }
  return result;
}

uint64_t type metadata accessor for CoreIDVAsset()
{
  return self;
}

unint64_t sub_1D78C7968()
{
  unint64_t result = qword_1EA843228;
  if (!qword_1EA843228)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA843228);
  }
  return result;
}

uint64_t CoreIDVAsset.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t CoreIDVAsset.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1D78C7A94(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA843240);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7, v8, v9, v10, v11, v12, v13);
  uint64_t v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D78C78F0();
  sub_1D7A9D6E8();
  uint64_t v16 = *(void *)(v3 + 32);
  char v17 = *(unsigned char *)(v3 + 40);
  uint64_t v18 = *(void *)(v3 + 48);
  char v19 = *(unsigned char *)(v3 + 56);
  uint64_t v20 = *(void *)(v3 + 64);
  char v21 = *(unsigned char *)(v3 + 72);
  long long v25 = *(_OWORD *)(v3 + 16);
  uint64_t v26 = v16;
  char v27 = v17;
  uint64_t v28 = v18;
  char v29 = v19;
  uint64_t v30 = v20;
  char v31 = v21;
  char v24 = 0;
  sub_1D78C7CD4();
  sub_1D7A9D228();
  if (!v2)
  {
    *(void *)&long long v25 = *(void *)(v3 + 80);
    char v24 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA843230);
    sub_1D78C7D28(&qword_1EA843250, (void (*)(void))sub_1D78C7CD4);
    sub_1D7A9D1C8();
    *(void *)&long long v25 = *(void *)(v3 + 88);
    char v24 = 2;
    sub_1D7A9D1C8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v15, v5);
}

unint64_t sub_1D78C7CD4()
{
  unint64_t result = qword_1EA843248;
  if (!qword_1EA843248)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA843248);
  }
  return result;
}

uint64_t sub_1D78C7D28(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA843230);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1D78C7DA8()
{
  unint64_t result = qword_1EA843258;
  if (!qword_1EA843258)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA843258);
  }
  return result;
}

unint64_t sub_1D78C7E00()
{
  unint64_t result = qword_1EA843260;
  if (!qword_1EA843260)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA843260);
  }
  return result;
}

uint64_t sub_1D78C7E54@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for CoreIDVAsset();
  uint64_t v5 = swift_allocObject();
  uint64_t result = CoreIDVAsset.init(from:)(a1);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_1D78C7EAC(void *a1)
{
  return sub_1D78C7A94(a1);
}

uint64_t destroy for CoreIDVAssetBundle()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CoreIDVAssetBundle(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CoreIDVAssetBundle(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

__n128 __swift_memcpy57_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for CoreIDVAssetBundle(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for CoreIDVAssetBundle(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 57)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CoreIDVAssetBundle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 57) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 57) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CoreIDVAssetBundle()
{
  return &type metadata for CoreIDVAssetBundle;
}

ValueMetadata *type metadata accessor for CoreIDVAssetBundle.CertificateType()
{
  return &type metadata for CoreIDVAssetBundle.CertificateType;
}

uint64_t initializeBufferWithCopyOfBuffer for CoreIDVAssetCertificates(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for CoreIDVAssetCertificates()
{
  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for CoreIDVAssetCertificates(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for CoreIDVAssetCertificates(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for CoreIDVAssetCertificates(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 9)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CoreIDVAssetCertificates(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 9) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CoreIDVAssetCertificates()
{
  return &type metadata for CoreIDVAssetCertificates;
}

uint64_t method lookup function for CoreIDVAsset(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CoreIDVAsset);
}

uint64_t dispatch thunk of CoreIDVAsset.__allocating_init(from:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of CoreIDVAsset.encode(to:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

ValueMetadata *type metadata accessor for CoreIDVAsset.deviceType()
{
  return &type metadata for CoreIDVAsset.deviceType;
}

unsigned char *_s13CoreIDVShared18CoreIDVAssetBundleV15CertificateTypeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D78C8464);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CoreIDVAsset.CodingKeys()
{
  return &type metadata for CoreIDVAsset.CodingKeys;
}

unsigned char *_s13CoreIDVShared12CoreIDVAssetC10deviceTypeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D78C8568);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CoreIDVAssetCertificates.CodingKeys()
{
  return &type metadata for CoreIDVAssetCertificates.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for CoreIDVAssetBundle.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *__n128 result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D78C866CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CoreIDVAssetBundle.CodingKeys()
{
  return &type metadata for CoreIDVAssetBundle.CodingKeys;
}

unint64_t sub_1D78C86A8()
{
  unint64_t result = qword_1EA843268;
  if (!qword_1EA843268)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA843268);
  }
  return result;
}

unint64_t sub_1D78C8700()
{
  unint64_t result = qword_1EA843270;
  if (!qword_1EA843270)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA843270);
  }
  return result;
}

unint64_t sub_1D78C8758()
{
  unint64_t result = qword_1EA843278;
  if (!qword_1EA843278)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA843278);
  }
  return result;
}

unint64_t sub_1D78C87B0()
{
  unint64_t result = qword_1EA843280;
  if (!qword_1EA843280)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA843280);
  }
  return result;
}

unint64_t sub_1D78C8808()
{
  unint64_t result = qword_1EA843288;
  if (!qword_1EA843288)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA843288);
  }
  return result;
}

unint64_t sub_1D78C8860()
{
  unint64_t result = qword_1EA843290;
  if (!qword_1EA843290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA843290);
  }
  return result;
}

unint64_t sub_1D78C88B8()
{
  unint64_t result = qword_1EA843298;
  if (!qword_1EA843298)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA843298);
  }
  return result;
}

unint64_t sub_1D78C8910()
{
  unint64_t result = qword_1EA8432A0;
  if (!qword_1EA8432A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8432A0);
  }
  return result;
}

unint64_t sub_1D78C8968()
{
  unint64_t result = qword_1EA8432A8;
  if (!qword_1EA8432A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8432A8);
  }
  return result;
}

uint64_t sub_1D78C89BC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000;
  if (v2 || (sub_1D7A9D358() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001D7ABBB50 || (sub_1D7A9D358() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6F52726575737369 && a2 == 0xEB0000000073746FLL || (sub_1D7A9D358() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001D7ABBB70)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = sub_1D7A9D358();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_1D78C8B84(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6369666974726563 && a2 == 0xEC00000073657461;
  if (v2 || (sub_1D7A9D358() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656469727265766FLL && a2 == 0xEF746C7561666544)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_1D7A9D358();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1D78C8CB4()
{
  unint64_t v0 = sub_1D7A9D058();
  swift_bridgeObjectRelease();
  if (v0 >= 3) {
    return 3;
  }
  else {
    return v0;
  }
}

uint64_t static DeveloperTestMDLCredentialBuilder.payloadElements.getter()
{
  uint64_t v512 = type metadata accessor for CredentialBuilderPayloadDetails.Element(0);
  *(void *)&long long v520 = *(void *)(v512 - 8);
  MEMORY[0x1F4188790](v512, v0, v1, v2, v3, v4, v5, v6);
  v482 = (void *)((char *)v461 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = (int *)type metadata accessor for AnyCodable();
  uint64_t v481 = *((void *)v8 - 1);
  uint64_t v16 = MEMORY[0x1F4188790](v8, v9, v10, v11, v12, v13, v14, v15);
  v465 = (char *)v461 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = MEMORY[0x1F4188790](v16, v18, v19, v20, v21, v22, v23, v24);
  v477 = (char *)v461 - v26;
  uint64_t v34 = MEMORY[0x1F4188790](v25, v27, v28, v29, v30, v31, v32, v33);
  uint64_t v480 = (uint64_t)v461 - v35;
  uint64_t v43 = MEMORY[0x1F4188790](v34, v36, v37, v38, v39, v40, v41, v42);
  v493 = (char *)v461 - v44;
  MEMORY[0x1F4188790](v43, v45, v46, v47, v48, v49, v50, v51);
  v494 = (char *)v461 - v52;
  uint64_t v510 = sub_1D7A9AF68();
  *(void *)&long long v507 = *(void *)(v510 - 8);
  MEMORY[0x1F4188790](v510, v53, v54, v55, v56, v57, v58, v59);
  v517 = (char *)v461 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8477F0);
  uint64_t v69 = MEMORY[0x1F4188790](v61 - 8, v62, v63, v64, v65, v66, v67, v68);
  v506 = (char *)v461 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v69, v71, v72, v73, v74, v75, v76, v77);
  unint64_t v504 = (unint64_t)v461 - v78;
  uint64_t v514 = sub_1D7A9B238();
  uint64_t v79 = *(void *)(v514 - 8);
  MEMORY[0x1F4188790](v514, v80, v81, v82, v83, v84, v85, v86);
  BOOL v88 = (char *)v461 - ((v87 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v519 = sub_1D7A9B2B8();
  uint64_t v501 = *(void *)(v519 - 8);
  MEMORY[0x1F4188790](v519, v89, v90, v91, v92, v93, v94, v95);
  uint64_t v97 = (void *)((char *)v461 - ((v96 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v503 = sub_1D7A9AD28();
  uint64_t v502 = *(void *)(v503 - 8);
  MEMORY[0x1F4188790](v503, v98, v99, v100, v101, v102, v103, v104);
  v499 = (char *)v461 - ((v105 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v106 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9118);
  uint64_t v114 = MEMORY[0x1F4188790](v106 - 8, v107, v108, v109, v110, v111, v112, v113);
  v472 = (char *)v461 - ((v115 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v123 = MEMORY[0x1F4188790](v114, v116, v117, v118, v119, v120, v121, v122);
  v476 = (char *)v461 - v124;
  uint64_t v132 = MEMORY[0x1F4188790](v123, v125, v126, v127, v128, v129, v130, v131);
  v478 = (char *)v461 - v133;
  uint64_t v141 = MEMORY[0x1F4188790](v132, v134, v135, v136, v137, v138, v139, v140);
  v479 = (char *)v461 - v142;
  uint64_t v150 = MEMORY[0x1F4188790](v141, v143, v144, v145, v146, v147, v148, v149);
  v491 = (char *)v461 - v151;
  uint64_t v159 = MEMORY[0x1F4188790](v150, v152, v153, v154, v155, v156, v157, v158);
  uint64_t v495 = (uint64_t)v461 - v160;
  uint64_t v168 = MEMORY[0x1F4188790](v159, v161, v162, v163, v164, v165, v166, v167);
  v497 = (char *)v461 - v169;
  MEMORY[0x1F4188790](v168, v170, v171, v172, v173, v174, v175, v176);
  uint64_t v178 = (uint64_t)v461 - v177;
  uint64_t v179 = sub_1D7A9B148();
  uint64_t v180 = *(void **)(v179 - 8);
  uint64_t v188 = MEMORY[0x1F4188790](v179, v181, v182, v183, v184, v185, v186, v187);
  v498 = (char *)v461 - ((v189 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v197 = MEMORY[0x1F4188790](v188, v190, v191, v192, v193, v194, v195, v196);
  unint64_t v199 = (unint64_t)v461 - v198;
  MEMORY[0x1F4188790](v197, v200, v201, v202, v203, v204, v205, v206);
  v500 = (char *)v461 - v207;
  id v208 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28D48]), sel_init);
  v496 = "red12CoreIDVAsset";
  os_log_type_t v209 = (void *)sub_1D7A9BF98();
  id v513 = v208;
  uint64_t v210 = (uint64_t)objc_msgSend(v208, sel_dateFromString_, v209);

  if (!v210)
  {
LABEL_43:
    v460 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v180[7];
    uint64_t v213 = (uint64_t)(v180 + 7);
    v460(v178, 1, 1, v179);
    goto LABEL_44;
  }
  sub_1D7A9B118();

  uint64_t v210 = v180[4];
  unint64_t v511 = v199;
  uint64_t v211 = v180 + 4;
  ((void (*)(uint64_t, unint64_t, uint64_t))v210)(v178, v199, v179);
  uint64_t v212 = (void (*)(char *, uint64_t, uint64_t, uint64_t *))v180[7];
  v516 = v180 + 7;
  v518 = v212;
  v212((char *)v178, 0, 1, (uint64_t *)v179);
  v492 = (char *)v180;
  uint64_t v214 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v180[6];
  uint64_t v213 = (uint64_t)(v180 + 6);
  v509 = (unsigned char *)v213;
  *(void *)&long long v508 = v214;
  if (v214(v178, 1, v179) == 1)
  {
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  ((void (*)(char *, uint64_t, uint64_t))v210)(v500, v178, v179);
  uint64_t v215 = v514;
  (*(void (**)(char *, void, uint64_t))(v79 + 104))(v88, *MEMORY[0x1E4F27B20], v514);
  char v216 = v97;
  sub_1D7A9B248();
  (*(void (**)(char *, uint64_t))(v79 + 8))(v88, v215);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8432B0);
  uint64_t v217 = (uint64_t)v211;
  uint64_t v218 = (void (*)(char *, unint64_t, uint64_t))v210;
  uint64_t v219 = sub_1D7A9B2A8();
  uint64_t v220 = *(void *)(v219 - 8);
  unint64_t v221 = (*(unsigned __int8 *)(v220 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v220 + 80);
  uint64_t v222 = swift_allocObject();
  long long v505 = xmmword_1D7AA08E0;
  *(_OWORD *)(v222 + 16) = xmmword_1D7AA08E0;
  (*(void (**)(unint64_t, void, uint64_t))(v220 + 104))(v222 + v221, *MEMORY[0x1E4F27C20], v219);
  sub_1D78CD99C(v222);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  char v223 = (void *)sub_1D7A9BF98();
  id v224 = objc_msgSend(v513, sel_dateFromString_, v223);

  uint64_t v514 = (uint64_t)v218;
  if (v224)
  {
    unint64_t v225 = v511;
    sub_1D7A9B118();

    int v226 = v497;
    uint64_t v178 = v217;
    v218(v497, v225, v179);
    uint64_t v227 = (uint64_t)v226;
    v518(v226, 0, 1, (uint64_t *)v179);
    int v228 = ((uint64_t (*)(char *, uint64_t, uint64_t))v508)(v226, 1, v179);
    uint64_t v229 = v492;
    if (v228 != 1)
    {
      uint64_t v230 = v498;
      ((void (*)(char *, char *, uint64_t))v514)(v498, v226, v179);
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v178 = v217;
    uint64_t v227 = (uint64_t)v497;
    v518(v497, 1, 1, (uint64_t *)v179);
    unint64_t v225 = v511;
    uint64_t v229 = v492;
  }
  uint64_t v230 = v498;
  sub_1D7A9B138();
  sub_1D7871C4C(v227, &qword_1EBDF9118);
LABEL_8:
  sub_1D7A9B138();
  char v231 = v499;
  sub_1D7A9B258();
  swift_bridgeObjectRelease();
  id v232 = v229 + 8;
  id v233 = (void (*)(unint64_t, uint64_t))*((void *)v229 + 1);
  v233(v225, v179);
  v464 = v232;
  v463 = (void (*)(char *, uint64_t *))v233;
  v233((unint64_t)v230, v179);
  (*(void (**)(uint64_t *, void))(v501 + 8))(v216, v519);
  uint64_t v234 = sub_1D7A9ACF8();
  LOBYTE(v233) = v235;
  (*(void (**)(char *, unint64_t))(v502 + 8))(v231, v503);
  uint64_t v236 = 35;
  if ((v233 & 1) == 0) {
    uint64_t v236 = v234;
  }
  *(void *)&long long v519 = v236;
  if (qword_1EA841638 != -1) {
LABEL_41:
  }
    swift_once();
  unint64_t v237 = (void *)qword_1EA86F340;
  uint64_t v238 = (void *)sub_1D7A9BF98();
  uint64_t v239 = (void *)sub_1D7A9BF98();
  id v240 = objc_msgSend(v237, sel_URLForResource_withExtension_, v238, v239);

  v515 = (uint64_t *)v179;
  uint64_t v241 = v510;
  uint64_t v242 = v504;
  if (v240)
  {
    sub_1D7A9AF38();

    uint64_t v243 = 0;
  }
  else
  {
    uint64_t v243 = 1;
  }
  uint64_t v244 = v507;
  uint64_t v245 = (uint64_t)v506;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v507 + 56))(v242, v243, 1, v241);
  sub_1D78CDC8C(v242, v245);
  int v246 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v244 + 48))(v245, 1, v241);
  v506 = (char *)v178;
  if (v246 == 1)
  {
    uint64_t v501 = 0;
    unint64_t v503 = 0xF000000000000000;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v244 + 32))(v517, v245, v241);
    uint64_t v501 = sub_1D7A9AF88();
    unint64_t v503 = v247;
    (*(void (**)(char *, uint64_t))(v244 + 8))(v517, v241);
  }
  sub_1D7871C4C(v242, &qword_1EA8477F0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8432B8);
  uint64_t inited = swift_initStackObject();
  long long v489 = xmmword_1D7AA4E80;
  *(_OWORD *)(inited + 16) = xmmword_1D7AA4E80;
  uint64_t v510 = 0xD000000000000011;
  *(void *)(inited + 32) = 0xD000000000000011;
  *(void *)(inited + 40) = 0x80000001D7ABBEB0;
  v485 = (void *)inited;
  uint64_t v249 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA843050);
  uint64_t v250 = *(char **)(v520 + 72);
  uint64_t v251 = *(unsigned __int8 *)(v520 + 80);
  uint64_t v252 = (v251 + 32) & ~v251;
  uint64_t v484 = v249;
  uint64_t v483 = v251 | 7;
  uint64_t v253 = swift_allocObject();
  *(_OWORD *)(v253 + 16) = xmmword_1D7AA8070;
  uint64_t v486 = v252;
  uint64_t v473 = v253;
  uint64_t v179 = v253 + v252;
  uint64_t v178 = v512;
  uint64_t v254 = v253 + v252 + *(int *)(v512 + 20);
  *(unsigned char *)uint64_t v254 = 2;
  *(void *)(v254 + 8) = 0;
  *(unsigned char *)(v254 + 16) = 1;
  *(void *)(v254 + 24) = 0;
  *(unsigned char *)(v254 + 32) = 1;
  *(_DWORD *)(v254 + 36) = 0;
  *(unsigned char *)(v254 + 40) = 1;
  *(void *)(v254 + 48) = 0;
  *(unsigned char *)(v254 + 56) = 1;
  uint64_t v210 = (uint64_t)v515;
  uint64_t v213 = (uint64_t)v518;
  uint64_t v97 = v516;
  v518((char *)(v254 + v8[9]), 1, 1, v515);
  uint64_t v255 = v8[10];
  long long v474 = xmmword_1D7AA8080;
  *(_OWORD *)(v254 + v255) = xmmword_1D7AA8080;
  *(void *)(v254 + v8[11]) = 0;
  *(void *)(v254 + v8[12]) = 0;
  *(void *)(v254 + v8[13]) = 0;
  uint64_t v256 = v8[14];
  long long v520 = xmmword_1D7AA0AC0;
  *(_OWORD *)(v254 + v256) = xmmword_1D7AA0AC0;
  *(void *)uint64_t v179 = 0x616E5F6E65766967;
  *(void *)(v179 + 8) = 0xEA0000000000656DLL;
  v517 = v250;
  unint64_t v257 = &v250[v179];
  unint64_t v199 = (unint64_t)&v250[v179 + *(int *)(v178 + 20)];
  *(unsigned char *)unint64_t v199 = 2;
  *(void *)(v199 + 8) = 0;
  *(unsigned char *)(v199 + 16) = 1;
  *(void *)(v199 + 24) = 0;
  *(unsigned char *)(v199 + 32) = 1;
  *(_DWORD *)(v199 + 36) = 0;
  *(unsigned char *)(v199 + 40) = 1;
  *(void *)(v199 + 48) = 0;
  *(unsigned char *)(v199 + 56) = 1;
  ((void (*)(unint64_t, uint64_t, uint64_t, uint64_t))v213)(v199 + v8[9], 1, 1, v210);
  uint64_t v258 = v8[10];
  long long v475 = xmmword_1D7AA8090;
  *(_OWORD *)(v199 + v258) = xmmword_1D7AA8090;
  *(void *)(v199 + v8[11]) = 0;
  *(void *)(v199 + v8[12]) = 0;
  *(void *)(v199 + v8[13]) = 0;
  *(_OWORD *)(v199 + v8[14]) = v520;
  *(void *)unint64_t v257 = 0x6E5F796C696D6166;
  *((void *)v257 + 1) = 0xEB00000000656D61;
  if (v503 >> 60 == 15) {
    goto LABEL_45;
  }
  uint64_t v259 = 2 * (void)v517;
  uint64_t v260 = (void *)(v179 + 2 * (void)v517);
  uint64_t v261 = (uint64_t)v494;
  unsigned char *v494 = 2;
  *(void *)(v261 + 8) = 0;
  *(unsigned char *)(v261 + 16) = 1;
  *(void *)(v261 + 24) = 0;
  *(unsigned char *)(v261 + 32) = 1;
  *(_DWORD *)(v261 + 36) = 0;
  *(unsigned char *)(v261 + 40) = 1;
  *(void *)(v261 + 48) = 0;
  *(unsigned char *)(v261 + 56) = 1;
  uint64_t v262 = v518;
  v518((char *)(v261 + v8[9]), 1, 1, v515);
  unint64_t v263 = (void *)(v261 + v8[10]);
  *unint64_t v263 = 0;
  v263[1] = 0;
  *(void *)(v261 + v8[11]) = 0;
  *(void *)(v261 + v8[12]) = 0;
  *(void *)(v261 + v8[13]) = 0;
  uint64_t v264 = (void *)(v261 + v8[14]);
  unint64_t v265 = v503;
  void *v264 = v501;
  v264[1] = v265;
  *uint64_t v260 = 0x7469617274726F70;
  v260[1] = 0xE800000000000000;
  uint64_t v266 = v512;
  sub_1D7871D10(v261, (uint64_t)v260 + *(int *)(v512 + 20), (uint64_t (*)(void))type metadata accessor for AnyCodable);
  uint64_t v471 = v259;
  *(void *)&long long v507 = v179;
  uint64_t v267 = v517;
  uint64_t v490 = (uint64_t)&v517[v259];
  unint64_t v268 = &v517[v259 + v179];
  uint64_t v269 = &v268[*(int *)(v266 + 20)];
  *uint64_t v269 = 2;
  *((void *)v269 + 1) = 0;
  v269[16] = 1;
  *((void *)v269 + 3) = 0;
  v269[32] = 1;
  *((_DWORD *)v269 + 9) = 0;
  v269[40] = 1;
  *((void *)v269 + 6) = 0;
  v269[56] = 1;
  uint64_t v270 = v515;
  v262(&v269[v8[9]], 1, 1, v515);
  *(_OWORD *)&v269[v8[10]] = xmmword_1D7AA80A0;
  *(void *)&v269[v8[11]] = 0;
  *(void *)&v269[v8[12]] = 0;
  *(void *)&v269[v8[13]] = 0;
  *(_OWORD *)&v269[v8[14]] = v520;
  v271 = v97;
  unint64_t v504 = 0xD000000000000010;
  *(void *)unint64_t v268 = 0xD000000000000010;
  *((void *)v268 + 1) = 0x80000001D7ABC020;
  uint64_t v272 = 4 * (void)v267;
  uint64_t v273 = v507;
  uint64_t v274 = v507 + 4 * (void)v267;
  uint64_t v275 = v274 + *(int *)(v266 + 20);
  *(unsigned char *)uint64_t v275 = 2;
  *(void *)(v275 + 8) = 0;
  *(unsigned char *)(v275 + 16) = 1;
  *(void *)(v275 + 24) = 0;
  *(unsigned char *)(v275 + 32) = 1;
  *(_DWORD *)(v275 + 36) = 0;
  *(unsigned char *)(v275 + 40) = 1;
  *(void *)(v275 + 48) = 0;
  *(unsigned char *)(v275 + 56) = 1;
  uint64_t v276 = v271;
  v518((char *)(v275 + v8[9]), 1, 1, v270);
  *(_OWORD *)(v275 + v8[10]) = xmmword_1D7AA80B0;
  *(void *)(v275 + v8[11]) = 0;
  *(void *)(v275 + v8[12]) = 0;
  *(void *)(v275 + v8[13]) = 0;
  *(_OWORD *)(v275 + v8[14]) = v520;
  strcpy((char *)v274, "resident_city");
  *(_WORD *)(v274 + 14) = -4864;
  uint64_t v470 = v272;
  v469 = &v517[v272];
  uint64_t v277 = &v517[v272 + v273];
  uint64_t v278 = v266;
  uint64_t v279 = &v277[*(int *)(v266 + 20)];
  *uint64_t v279 = 2;
  *((void *)v279 + 1) = 0;
  v279[16] = 1;
  *((void *)v279 + 3) = 0;
  v279[32] = 1;
  *((_DWORD *)v279 + 9) = 0;
  v279[40] = 1;
  *((void *)v279 + 6) = 0;
  v279[56] = 1;
  unint64_t v280 = v270;
  v518(&v279[v8[9]], 1, 1, v270);
  *(_OWORD *)&v279[v8[10]] = xmmword_1D7AA80C0;
  *(void *)&v279[v8[11]] = 0;
  *(void *)&v279[v8[12]] = 0;
  *(void *)&v279[v8[13]] = 0;
  *(_OWORD *)&v279[v8[14]] = v520;
  strcpy(v277, "resident_state");
  v277[15] = -18;
  uint64_t v468 = 2 * v490;
  unint64_t v281 = (unint64_t *)(v273 + 2 * v490);
  uint64_t v282 = v273;
  uint64_t v283 = v278;
  uint64_t v284 = (char *)v281 + *(int *)(v278 + 20);
  *uint64_t v284 = 2;
  *((void *)v284 + 1) = 0;
  v284[16] = 1;
  *((void *)v284 + 3) = 0;
  v284[32] = 1;
  *((_DWORD *)v284 + 9) = 0;
  v284[40] = 1;
  *((void *)v284 + 6) = 0;
  v284[56] = 1;
  v518(&v284[v8[9]], 1, 1, v280);
  *(_OWORD *)&v284[v8[10]] = xmmword_1D7AA80D0;
  *(void *)&v284[v8[11]] = 0;
  *(void *)&v284[v8[12]] = 0;
  *(void *)&v284[v8[13]] = 0;
  *(_OWORD *)&v284[v8[14]] = v520;
  *unint64_t v281 = v504;
  v281[1] = 0x80000001D7ABC0E0;
  uint64_t v285 = 8 * (void)v517;
  uint64_t v467 = 7 * (void)v517;
  uint64_t v286 = (void *)(v282 + 7 * (void)v517);
  uint64_t v287 = v283;
  unint64_t v288 = (char *)v286 + *(int *)(v283 + 20);
  *unint64_t v288 = 2;
  *((void *)v288 + 1) = 0;
  v288[16] = 1;
  *((void *)v288 + 3) = 0;
  v288[32] = 1;
  *((_DWORD *)v288 + 9) = 0;
  v288[40] = 1;
  *((void *)v288 + 6) = 0;
  v288[56] = 1;
  uint64_t v289 = v515;
  v518(&v288[v8[9]], 1, 1, v515);
  uint64_t v290 = v276;
  *(_OWORD *)&v288[v8[10]] = xmmword_1D7AA80E0;
  *(void *)&v288[v8[11]] = 0;
  *(void *)&v288[v8[12]] = 0;
  *(void *)&v288[v8[13]] = 0;
  *(_OWORD *)&v288[v8[14]] = v520;
  *uint64_t v286 = 0xD000000000000014;
  v286[1] = 0x80000001D7ABC0C0;
  unint64_t v291 = (void *)(v282 + v285);
  uint64_t v292 = v282 + v285 + *(int *)(v287 + 20);
  *(unsigned char *)uint64_t v292 = 2;
  *(void *)(v292 + 8) = 2;
  *(unsigned char *)(v292 + 16) = 0;
  *(void *)(v292 + 24) = 0;
  *(unsigned char *)(v292 + 32) = 1;
  *(_DWORD *)(v292 + 36) = 0;
  *(unsigned char *)(v292 + 40) = 1;
  *(void *)(v292 + 48) = 0;
  *(unsigned char *)(v292 + 56) = 1;
  uint64_t v293 = v289;
  uint64_t v294 = v289;
  uint64_t v97 = v290;
  v518((char *)(v292 + v8[9]), 1, 1, v293);
  uint64_t v295 = (void *)(v292 + v8[10]);
  *uint64_t v295 = 0;
  v295[1] = 0;
  *(void *)(v292 + v8[11]) = 0;
  *(void *)(v292 + v8[12]) = 0;
  *(void *)(v292 + v8[13]) = 0;
  *(_OWORD *)(v292 + v8[14]) = v520;
  *unint64_t v291 = 7890291;
  v291[1] = 0xE300000000000000;
  uint64_t v462 = v285;
  v466 = &v517[v285];
  uint64_t v296 = (uint64_t *)&v517[v285 + v282];
  uint64_t v297 = (char *)v296 + *(int *)(v287 + 20);
  *uint64_t v297 = 2;
  *((void *)v297 + 1) = 0;
  v297[16] = 1;
  *((void *)v297 + 3) = 0;
  v297[32] = 1;
  *((_DWORD *)v297 + 9) = 0;
  v297[40] = 1;
  *((void *)v297 + 6) = 0;
  v297[56] = 1;
  v518(&v297[v8[9]], 1, 1, v294);
  uint64_t v298 = &v297[v8[10]];
  unint64_t v504 = 0xD000000000000016;
  *(void *)uint64_t v298 = 0xD000000000000016;
  *((void *)v298 + 1) = 0x80000001D7AC0FE0;
  *(void *)&v297[v8[11]] = 0;
  *(void *)&v297[v8[12]] = 0;
  *(void *)&v297[v8[13]] = 0;
  *(_OWORD *)&v297[v8[14]] = v520;
  *uint64_t v296 = v510;
  v296[1] = 0x80000001D7ABBF60;
  unint64_t v199 = (unint64_t)v517;
  uint64_t v210 = v282;
  uint64_t v299 = (void *)(v282 + 10 * (void)v517);
  uint64_t v300 = (char *)v299 + *(int *)(v287 + 20);
  *uint64_t v300 = 2;
  *((void *)v300 + 1) = 0;
  v300[16] = 1;
  *((void *)v300 + 3) = 0;
  v300[32] = 1;
  *((_DWORD *)v300 + 9) = 0;
  v300[40] = 1;
  *((void *)v300 + 6) = 0;
  v300[56] = 1;
  uint64_t v301 = (uint64_t)v515;
  v518(&v300[v8[9]], 1, 1, v515);
  *(_OWORD *)&v300[v8[10]] = xmmword_1D7AA80F0;
  *(void *)&v300[v8[11]] = 0;
  *(void *)&v300[v8[12]] = 0;
  *(void *)&v300[v8[13]] = 0;
  *(_OWORD *)&v300[v8[14]] = v520;
  *uint64_t v299 = 0xD000000000000014;
  v299[1] = 0x80000001D7ABC080;
  v302 = (void *)(v210 + 11 * v199);
  id v303 = (char *)v302 + *(int *)(v287 + 20);
  *id v303 = 2;
  *((void *)v303 + 1) = 0;
  v303[16] = 1;
  *((void *)v303 + 3) = 0;
  v303[32] = 1;
  *((_DWORD *)v303 + 9) = 0;
  v303[40] = 1;
  *((void *)v303 + 6) = 0;
  v303[56] = 1;
  v518(&v303[v8[9]], 1, 1, (uint64_t *)v301);
  *(_OWORD *)&v303[v8[10]] = xmmword_1D7AA8100;
  *(void *)&v303[v8[11]] = 0;
  *(void *)&v303[v8[12]] = 0;
  *(void *)&v303[v8[13]] = 0;
  *(_OWORD *)&v303[v8[14]] = v520;
  void *v302 = 0x5F676E6975737369;
  v302[1] = 0xEF7972746E756F63;
  v304 = (unint64_t *)(v210 + 12 * v199);
  uint64_t v305 = (char *)v304 + *(int *)(v287 + 20);
  char *v305 = 2;
  *((void *)v305 + 1) = 0;
  v305[16] = 1;
  *((void *)v305 + 3) = 0;
  v305[32] = 1;
  *((_DWORD *)v305 + 9) = 0;
  v305[40] = 1;
  *((void *)v305 + 6) = 0;
  v305[56] = 1;
  uint64_t v178 = v301;
  v518(&v305[v8[9]], 1, 1, (uint64_t *)v301);
  uint64_t v179 = (uint64_t)v518;
  *(_OWORD *)&v305[v8[10]] = xmmword_1D7AA8110;
  *(void *)&v305[v8[11]] = 0;
  *(void *)&v305[v8[12]] = 0;
  *(void *)&v305[v8[13]] = 0;
  *(_OWORD *)&v305[v8[14]] = v520;
  unint64_t *v304 = v504;
  v304[1] = 0x80000001D7ABBFB0;
  sub_1D7860790(v501, v503);
  v487 = "Test Issuing Authority";
  uint64_t v213 = sub_1D7A9BF98();
  id v306 = objc_msgSend(v513, sel_dateFromString_, v213);

  if (!v306)
  {
LABEL_46:
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v179)(v495, 1, 1, v178);
    goto LABEL_47;
  }
  unint64_t v307 = v511;
  sub_1D7A9B118();

  unint64_t v199 = v495;
  ((void (*)(uint64_t, unint64_t, uint64_t))v514)(v495, v307, v178);
  uint64_t v213 = 1;
  ((void (*)(unint64_t, void, uint64_t, uint64_t))v179)(v199, 0, 1, v178);
  uint64_t v210 = v178;
  if (((unsigned int (*)(unint64_t, uint64_t, uint64_t))v508)(v199, 1, v178) == 1)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  unint64_t v308 = (void *)(v507 + 13 * (void)v517);
  uint64_t v309 = (uint64_t)v493;
  unsigned char *v493 = 2;
  *(void *)(v309 + 8) = 0;
  *(unsigned char *)(v309 + 16) = 1;
  *(void *)(v309 + 24) = 0;
  *(unsigned char *)(v309 + 32) = 1;
  *(_DWORD *)(v309 + 36) = 0;
  *(unsigned char *)(v309 + 40) = 1;
  *(void *)(v309 + 48) = 0;
  *(unsigned char *)(v309 + 56) = 1;
  uint64_t v310 = v309 + v8[9];
  ((void (*)(uint64_t, unint64_t, uint64_t))v514)(v310, v199, v178);
  unint64_t v199 = (unint64_t)v516;
  uint64_t v210 = (uint64_t)v518;
  v518((char *)v310, 0, 1, (uint64_t *)v178);
  uint64_t v311 = (void *)(v309 + v8[10]);
  *uint64_t v311 = 0;
  v311[1] = 0;
  *(void *)(v309 + v8[11]) = 0;
  *(void *)(v309 + v8[12]) = 0;
  *(void *)(v309 + v8[13]) = 0;
  *(_OWORD *)(v309 + v8[14]) = v520;
  *unint64_t v308 = 0x645F797269707865;
  v308[1] = 0xEB00000000657461;
  uint64_t v97 = (uint64_t *)v512;
  sub_1D7871D10(v309, (uint64_t)v308 + *(int *)(v512 + 20), (uint64_t (*)(void))type metadata accessor for AnyCodable);
  unint64_t v312 = (void *)(v507 + 14 * (void)v517);
  os_log_t v313 = (char *)v312 + *((int *)v97 + 5);
  *os_log_t v313 = 2;
  *((void *)v313 + 1) = 0;
  v313[16] = 1;
  *((void *)v313 + 3) = 0;
  v313[32] = 1;
  *((_DWORD *)v313 + 9) = 0;
  v313[40] = 1;
  *((void *)v313 + 6) = 0;
  v313[56] = 1;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v210)(&v313[v8[9]], 1, 1, v178);
  *(_OWORD *)&v313[v8[10]] = xmmword_1D7AA8120;
  *(void *)&v313[v8[11]] = 0;
  *(void *)&v313[v8[12]] = 0;
  *(void *)&v313[v8[13]] = 0;
  *(_OWORD *)&v313[v8[14]] = v520;
  *unint64_t v312 = 0x746E656D75636F64;
  v312[1] = 0xEF7265626D756E5FLL;
  v488 = "2052-02-10T00:00:00Z";
  uint64_t v213 = sub_1D7A9BF98();
  id v314 = objc_msgSend(v513, sel_dateFromString_, v213);

  if (!v314)
  {
LABEL_48:
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v210)(v491, 1, 1, v178);
    goto LABEL_49;
  }
  uint64_t v213 = v511;
  sub_1D7A9B118();

  uint64_t v315 = v491;
  unint64_t v199 = (unint64_t)v506;
  ((void (*)(char *, uint64_t, uint64_t))v514)(v491, v213, v178);
  ((void (*)(char *, void, uint64_t, uint64_t))v210)(v315, 0, 1, v178);
  int v316 = ((uint64_t (*)(char *, uint64_t, uint64_t))v508)(v315, 1, v178);
  uint64_t v97 = v482;
  if (v316 == 1)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  uint64_t v317 = (void *)(v507 - (void)v517 + 16 * (void)v517);
  uint64_t v318 = v480;
  *(unsigned char *)uint64_t v480 = 2;
  *(void *)(v318 + 8) = 0;
  *(unsigned char *)(v318 + 16) = 1;
  *(void *)(v318 + 24) = 0;
  *(unsigned char *)(v318 + 32) = 1;
  *(_DWORD *)(v318 + 36) = 0;
  *(unsigned char *)(v318 + 40) = 1;
  *(void *)(v318 + 48) = 0;
  *(unsigned char *)(v318 + 56) = 1;
  uint64_t v319 = v318 + v8[9];
  ((void (*)(uint64_t, char *, uint64_t))v514)(v319, v315, v178);
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v210)(v319, 0, 1, v178);
  uint64_t v320 = (void *)(v318 + v8[10]);
  *uint64_t v320 = 0;
  v320[1] = 0;
  *(void *)(v318 + v8[11]) = 0;
  *(void *)(v318 + v8[12]) = 0;
  *(void *)(v318 + v8[13]) = 0;
  *(_OWORD *)(v318 + v8[14]) = v520;
  *uint64_t v317 = 0x61645F6575737369;
  v317[1] = 0xEA00000000006574;
  sub_1D7871D10(v318, (uint64_t)v317 + *(int *)(v512 + 20), (uint64_t (*)(void))type metadata accessor for AnyCodable);
  uint64_t v321 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA843040);
  uint64_t v322 = *(void *)(v481 + 72);
  uint64_t v323 = *(unsigned __int8 *)(v481 + 80);
  uint64_t v502 = (v323 + 32) & ~v323;
  v499 = (char *)v321;
  v498 = (char *)(v502 + v322);
  v497 = (char *)(v323 | 7);
  v491 = (char *)swift_allocObject();
  *((_OWORD *)v491 + 1) = v505;
  uint64_t v324 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8432C0);
  uint64_t v325 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8422B0);
  unint64_t v326 = *(void *)(*(void *)(v325 - 8) + 72);
  uint64_t v327 = *(unsigned __int8 *)(*(void *)(v325 - 8) + 80);
  uint64_t v328 = (v327 + 32) & ~v327;
  v461[0] = 3 * v326;
  v496 = (char *)v324;
  v461[1] = v328 + 3 * v326;
  v494 = (unsigned char *)(v327 | 7);
  uint64_t v329 = swift_allocObject();
  *(_OWORD *)(v329 + 16) = v489;
  uint64_t v495 = v328;
  uint64_t v481 = v329;
  long long v330 = (void *)(v329 + v328);
  uint64_t v510 = v325;
  uint64_t v331 = v329 + v328 + *(int *)(v325 + 48);
  void *v330 = 0xD000000000000015;
  v330[1] = 0x80000001D7ABC160;
  AnyCodable.init(value:)(68, 0xE100000000000000, v331);
  unint64_t v504 = v326;
  v332 = (void *)((char *)v330 + v326);
  void *v332 = 0x61645F6575737369;
  v332[1] = 0xEA00000000006574;
  uint64_t v213 = v199;
  unint64_t v199 = v178;
  v333 = (void *)sub_1D7A9BF98();
  id v334 = objc_msgSend(v513, sel_dateFromString_, v333);

  if (!v334)
  {
LABEL_50:
    ((void (*)(char *, uint64_t, uint64_t, unint64_t))v210)(v479, 1, 1, v199);
    goto LABEL_51;
  }
  unint64_t v335 = v511;
  sub_1D7A9B118();

  uint64_t v336 = (uint64_t)v479;
  ((void (*)(char *, unint64_t, unint64_t))v514)(v479, v335, v199);
  ((void (*)(uint64_t, void, uint64_t, unint64_t))v210)(v336, 0, 1, v199);
  if (((unsigned int (*)(uint64_t, uint64_t, unint64_t))v508)(v336, 1, v199) == 1)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  AnyCodable.init(value:)(v336, (uint64_t)v332 + *(int *)(v510 + 48));
  v493 = (unsigned char *)(2 * v504);
  v337 = (void *)((char *)v330 + 2 * v504);
  void *v337 = 0x645F797269707865;
  v337[1] = 0xEB00000000657461;
  uint64_t v338 = (void *)sub_1D7A9BF98();
  id v339 = objc_msgSend(v513, sel_dateFromString_, v338);

  uint64_t v213 = (uint64_t)v478;
  if (!v339)
  {
LABEL_52:
    v518((char *)v213, 1, 1, v515);
LABEL_53:
    __break(1u);
LABEL_54:
    ((void (*)(char *, uint64_t, uint64_t, uint64_t *))v210)(v476, 1, 1, v97);
LABEL_55:
    __break(1u);
LABEL_56:
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t *))v210)(v472, 1, 1, v515);
    goto LABEL_57;
  }
  unint64_t v340 = v511;
  sub_1D7A9B118();

  long long v341 = v515;
  ((void (*)(uint64_t, unint64_t, uint64_t *))v514)(v213, v340, v515);
  uint64_t v210 = 1;
  v518((char *)v213, 0, 1, v341);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t *))v508)(v213, 1, v341) == 1) {
    goto LABEL_53;
  }
  long long v342 = &v491[v502];
  uint64_t v480 = 16 * (void)v517;
  uint64_t v343 = (void *)(v507 + 16 * (void)v517);
  AnyCodable.init(value:)(v213, (uint64_t)v337 + *(int *)(v510 + 48));
  unint64_t v344 = sub_1D785F3E4(v481);
  *long long v342 = 2;
  *((void *)v342 + 1) = 0;
  v342[16] = 1;
  *((void *)v342 + 3) = 0;
  v342[32] = 1;
  *((_DWORD *)v342 + 9) = 0;
  v342[40] = 1;
  *((void *)v342 + 6) = 0;
  v342[56] = 1;
  long long v345 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))v518;
  v518(&v342[v8[9]], 1, 1, v341);
  long long v346 = v341;
  long long v347 = v345;
  uint64_t v348 = &v342[v8[10]];
  *(void *)uint64_t v348 = 0;
  *((void *)v348 + 1) = 0;
  *(void *)&v342[v8[11]] = 0;
  *(void *)&v342[v8[12]] = v344;
  *(void *)&v342[v8[13]] = 0;
  *(_OWORD *)&v342[v8[14]] = v520;
  uint64_t v349 = (uint64_t)v477;
  unsigned char *v477 = 2;
  *(void *)(v349 + 8) = 0;
  *(unsigned char *)(v349 + 16) = 1;
  *(void *)(v349 + 24) = 0;
  *(unsigned char *)(v349 + 32) = 1;
  *(_DWORD *)(v349 + 36) = 0;
  *(unsigned char *)(v349 + 40) = 1;
  *(void *)(v349 + 48) = 0;
  *(unsigned char *)(v349 + 56) = 1;
  v347(v349 + v8[9], 1, 1, v341);
  uint64_t v350 = (void *)(v349 + v8[10]);
  *uint64_t v350 = 0;
  v350[1] = 0;
  *(void *)(v349 + v8[11]) = v491;
  *(void *)(v349 + v8[12]) = 0;
  *(void *)(v349 + v8[13]) = 0;
  *(_OWORD *)(v349 + v8[14]) = v520;
  *uint64_t v343 = 0xD000000000000012;
  v343[1] = 0x80000001D7ABBF90;
  unint64_t v199 = v512;
  sub_1D7871D10(v349, (uint64_t)v343 + *(int *)(v512 + 20), (uint64_t (*)(void))type metadata accessor for AnyCodable);
  unint64_t v351 = v517;
  uint64_t v352 = v507;
  uint64_t v353 = &v517[v480 + v507];
  v354 = &v353[*(int *)(v199 + 20)];
  char *v354 = 2;
  *((void *)v354 + 1) = v519;
  v354[16] = 0;
  *((void *)v354 + 3) = 0;
  v354[32] = 1;
  *((_DWORD *)v354 + 9) = 0;
  v354[40] = 1;
  *((void *)v354 + 6) = 0;
  v354[56] = 1;
  uint64_t v179 = (uint64_t)v516;
  v518(&v354[v8[9]], 1, 1, v346);
  v355 = &v354[v8[10]];
  *(void *)v355 = 0;
  *((void *)v355 + 1) = 0;
  *(void *)&v354[v8[11]] = 0;
  *(void *)&v354[v8[12]] = 0;
  *(void *)&v354[v8[13]] = 0;
  *(_OWORD *)&v354[v8[14]] = v520;
  strcpy(v353, "age_in_years");
  v353[13] = 0;
  *((_WORD *)v353 + 7) = -5120;
  v356 = (void *)(v352 + 18 * (void)v351);
  v357 = (char *)v356 + *(int *)(v199 + 20);
  v358 = &v357[v8[9]];
  (*((void (**)(char *, char *, uint64_t *))v492 + 2))(v358, v500, v346);
  char *v357 = 2;
  *((void *)v357 + 1) = 0;
  v357[16] = 1;
  *((void *)v357 + 3) = 0;
  v357[32] = 1;
  *((_DWORD *)v357 + 9) = 0;
  v357[40] = 1;
  *((void *)v357 + 6) = 0;
  v357[56] = 1;
  v518(v358, 0, 1, v346);
  v359 = &v357[v8[10]];
  *(void *)v359 = 0;
  *((void *)v359 + 1) = 0;
  *(void *)&v357[v8[11]] = 0;
  *(void *)&v357[v8[12]] = 0;
  *(void *)&v357[v8[13]] = 0;
  *(_OWORD *)&v357[v8[14]] = v520;
  void *v356 = 0x61645F6874726962;
  v356[1] = 0xEA00000000006574;
  v522 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v178 = 100;
  sub_1D78AB5C8(0, 100, 0);
  v360 = v517;
  uint64_t v361 = 0;
  BOOL v362 = 0;
  uint64_t v180 = v522;
  uint64_t v210 = v486;
  do
  {
    if (v362)
    {
      __break(1u);
      goto LABEL_43;
    }
    uint64_t v521 = v361;
    sub_1D78CC5EC(&v521, v519, v97);
    v522 = v180;
    unint64_t v199 = v180[2];
    unint64_t v363 = v180[3];
    uint64_t v179 = v199 + 1;
    if (v199 >= v363 >> 1)
    {
      sub_1D78AB5C8(v363 > 1, v199 + 1, 1);
      v360 = v517;
      uint64_t v180 = v522;
    }
    v180[2] = v179;
    sub_1D7871D10((uint64_t)v97, (uint64_t)v180 + v210 + v199 * (void)v360, type metadata accessor for CredentialBuilderPayloadDetails.Element);
    BOOL v362 = v361 == 99;
    if (v361 == 99)
    {
      uint64_t v361 = 0;
    }
    else if (__OFADD__(v361++, 1))
    {
      __break(1u);
      goto LABEL_41;
    }
    --v178;
  }
  while (v178);
  v522 = (void *)v473;
  sub_1D78CC9D0((uint64_t)v180);
  v365 = v485;
  v485[6] = v522;
  v365[7] = 0xD000000000000017;
  v365[8] = 0x80000001D7ABBED0;
  uint64_t v366 = swift_allocObject();
  *(_OWORD *)(v366 + 16) = xmmword_1D7AA8130;
  v491 = (char *)v366;
  v367 = (char *)(v366 + v210);
  uint64_t v368 = v512;
  uint64_t v369 = v366 + v210 + *(int *)(v512 + 20);
  *(unsigned char *)uint64_t v369 = 2;
  *(void *)(v369 + 8) = 0;
  *(unsigned char *)(v369 + 16) = 1;
  *(void *)(v369 + 24) = 0;
  *(unsigned char *)(v369 + 32) = 1;
  *(_DWORD *)(v369 + 36) = 0;
  *(unsigned char *)(v369 + 40) = 1;
  *(void *)(v369 + 48) = 0;
  *(unsigned char *)(v369 + 56) = 1;
  uint64_t v97 = v515;
  uint64_t v210 = (uint64_t)v518;
  v518((char *)(v369 + v8[9]), 1, 1, v515);
  uint64_t v370 = v8[10];
  long long v519 = xmmword_1D7AA8140;
  *(_OWORD *)(v369 + v370) = xmmword_1D7AA8140;
  *(void *)(v369 + v8[11]) = 0;
  *(void *)(v369 + v8[12]) = 0;
  *(void *)(v369 + v8[13]) = 0;
  *(_OWORD *)(v369 + v8[14]) = v520;
  *(void *)v367 = 0xD000000000000015;
  *((void *)v367 + 1) = 0x80000001D7ABC210;
  v371 = &v360[(void)v367 + *(int *)(v368 + 20)];
  char *v371 = 2;
  *((void *)v371 + 1) = 0;
  v371[16] = 1;
  *((void *)v371 + 3) = 0;
  v371[32] = 1;
  *((_DWORD *)v371 + 9) = 0;
  v371[40] = 1;
  *((void *)v371 + 6) = 0;
  v371[56] = 1;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t *))v210)(&v371[v8[9]], 1, 1, v97);
  *(_OWORD *)&v371[v8[10]] = v474;
  *(void *)&v371[v8[11]] = 0;
  *(void *)&v371[v8[12]] = 0;
  *(void *)&v371[v8[13]] = 0;
  *(_OWORD *)&v371[v8[14]] = v520;
  strcpy(&v360[(void)v367], "aka_given_name");
  v360[(void)v367 + 15] = -18;
  v372 = &v367[v471];
  v373 = &v367[v471 + *(int *)(v368 + 20)];
  char *v373 = 2;
  *((void *)v373 + 1) = 0;
  v373[16] = 1;
  *((void *)v373 + 3) = 0;
  v373[32] = 1;
  *((_DWORD *)v373 + 9) = 0;
  v373[40] = 1;
  *((void *)v373 + 6) = 0;
  v373[56] = 1;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t *))v210)(&v373[v8[9]], 1, 1, v97);
  uint64_t v374 = v8[10];
  long long v507 = xmmword_1D7AA8150;
  *(_OWORD *)&v373[v374] = xmmword_1D7AA8150;
  *(void *)&v373[v8[11]] = 0;
  *(void *)&v373[v8[12]] = 0;
  *(void *)&v373[v8[13]] = 0;
  *(_OWORD *)&v373[v8[14]] = v520;
  *(void *)v372 = 0x6675735F656D616ELL;
  *((void *)v372 + 1) = 0xEB00000000786966;
  v375 = &v367[v490];
  uint64_t v376 = (uint64_t)&v367[v490 + *(int *)(v368 + 20)];
  *(unsigned char *)uint64_t v376 = 2;
  *(void *)(v376 + 8) = 0;
  *(unsigned char *)(v376 + 16) = 1;
  *(void *)(v376 + 24) = 0;
  *(unsigned char *)(v376 + 32) = 1;
  *(_DWORD *)(v376 + 36) = 0;
  *(unsigned char *)(v376 + 40) = 1;
  *(void *)(v376 + 48) = 0;
  *(unsigned char *)(v376 + 56) = 1;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))v210)(v376 + v8[9], 1, 1, v97);
  *(_OWORD *)(v376 + v8[10]) = v507;
  *(void *)(v376 + v8[11]) = 0;
  *(void *)(v376 + v8[12]) = 0;
  *(void *)(v376 + v8[13]) = 0;
  *(_OWORD *)(v376 + v8[14]) = v520;
  *(void *)v375 = 0x666675735F616B61;
  *((void *)v375 + 1) = 0xEA00000000007869;
  v377 = &v367[v470];
  v378 = &v367[v470 + *(int *)(v368 + 20)];
  char *v378 = 2;
  *((void *)v378 + 1) = 0;
  v378[16] = 1;
  *((void *)v378 + 3) = 0;
  v378[32] = 1;
  *((_DWORD *)v378 + 9) = 0;
  v378[40] = 1;
  *((void *)v378 + 6) = 0;
  v378[56] = 1;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t *))v210)(&v378[v8[9]], 1, 1, v97);
  *(_OWORD *)&v378[v8[10]] = v519;
  *(void *)&v378[v8[11]] = 0;
  *(void *)&v378[v8[12]] = 0;
  *(void *)&v378[v8[13]] = 0;
  *(_OWORD *)&v378[v8[14]] = v520;
  *(void *)v377 = 0xD000000000000016;
  *((void *)v377 + 1) = 0x80000001D7ABC1F0;
  v379 = &v469[(void)v367];
  v380 = &v469[(void)v367 + *(int *)(v368 + 20)];
  char *v380 = 2;
  *((void *)v380 + 1) = 0;
  v380[16] = 1;
  *((void *)v380 + 3) = 0;
  v380[32] = 1;
  *((_DWORD *)v380 + 9) = 0;
  v380[40] = 1;
  *((void *)v380 + 6) = 0;
  v380[56] = 1;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t *))v210)(&v380[v8[9]], 1, 1, v97);
  *(_OWORD *)&v380[v8[10]] = v475;
  *(void *)&v380[v8[11]] = 0;
  *(void *)&v380[v8[12]] = 0;
  *(void *)&v380[v8[13]] = 0;
  *(_OWORD *)&v380[v8[14]] = v520;
  *(void *)v379 = 0x696D61665F616B61;
  *((void *)v379 + 1) = 0xEF656D616E5F796CLL;
  v381 = &v367[v468];
  v382 = &v367[v468 + *(int *)(v368 + 20)];
  char *v382 = 2;
  *((void *)v382 + 1) = 2;
  v382[16] = 0;
  *((void *)v382 + 3) = 0;
  v382[32] = 1;
  *((_DWORD *)v382 + 9) = 0;
  v382[40] = 1;
  *((void *)v382 + 6) = 0;
  v382[56] = 1;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t *))v210)(&v382[v8[9]], 1, 1, v97);
  v383 = &v382[v8[10]];
  *(void *)v383 = 0;
  *((void *)v383 + 1) = 0;
  *(void *)&v382[v8[11]] = 0;
  *(void *)&v382[v8[12]] = 0;
  *(void *)&v382[v8[13]] = 0;
  *(_OWORD *)&v382[v8[14]] = v520;
  *(void *)v381 = 7890291;
  *((void *)v381 + 1) = 0xE300000000000000;
  *(void *)&long long v519 = v367;
  v384 = &v367[v467];
  v385 = &v367[v467 + *(int *)(v368 + 20)];
  char *v385 = 2;
  *((void *)v385 + 1) = 0;
  v385[16] = 1;
  *((void *)v385 + 3) = 0;
  v385[32] = 1;
  *((_DWORD *)v385 + 9) = 0;
  v385[40] = 1;
  *((void *)v385 + 6) = 0;
  v385[56] = 1;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t *))v210)(&v385[v8[9]], 1, 1, v97);
  *(_OWORD *)&v385[v8[10]] = xmmword_1D7AA8160;
  *(void *)&v385[v8[11]] = 0;
  *(void *)&v385[v8[12]] = 0;
  *(void *)&v385[v8[13]] = 0;
  *(_OWORD *)&v385[v8[14]] = v520;
  strcpy(v384, "DHS_compliance");
  v384[15] = -18;
  *(void *)&long long v507 = swift_allocObject();
  *(_OWORD *)(v507 + 16) = v505;
  uint64_t v386 = swift_allocObject();
  *(_OWORD *)(v386 + 16) = v489;
  uint64_t v387 = v495;
  uint64_t v490 = v386;
  v388 = (char *)(v386 + v495);
  *(void *)v388 = 0xD000000000000016;
  *((void *)v388 + 1) = 0x80000001D7ABC2E0;
  v492 = v388;
  unint64_t v389 = v504;
  uint64_t v390 = swift_allocObject();
  *(_OWORD *)(v390 + 16) = xmmword_1D7AA4E90;
  uint64_t v391 = v390 + v387;
  uint64_t v392 = v510;
  uint64_t v393 = v391 + *(int *)(v510 + 48);
  *(void *)uint64_t v391 = 0xD00000000000001BLL;
  *(void *)(v391 + 8) = 0x80000001D7ABC340;
  AnyCodable.init(value:)(68, 0xE100000000000000, v393);
  v394 = (void *)(v391 + v389);
  uint64_t v395 = v391 + v389 + *(int *)(v392 + 48);
  void *v394 = 0xD000000000000022;
  v394[1] = 0x80000001D7ABC360;
  AnyCodable.init(value:)(1701736270, 0xE400000000000000, v395);
  v396 = &v493[v391];
  void *v396 = 0x61645F6575737369;
  v396[1] = 0xEA00000000006574;
  v397 = (void *)sub_1D7A9BF98();
  id v398 = objc_msgSend(v513, sel_dateFromString_, v397);

  if (!v398) {
    goto LABEL_54;
  }
  unint64_t v399 = v511;
  sub_1D7A9B118();

  uint64_t v400 = (uint64_t)v476;
  ((void (*)(char *, unint64_t, uint64_t *))v514)(v476, v399, v97);
  ((void (*)(uint64_t, void, uint64_t, uint64_t *))v210)(v400, 0, 1, v97);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t *))v508)(v400, 1, v97) == 1) {
    goto LABEL_55;
  }
  AnyCodable.init(value:)(v400, (uint64_t)v396 + *(int *)(v510 + 48));
  v401 = (void *)(v391 + v461[0]);
  void *v401 = 0x645F797269707865;
  v401[1] = 0xEB00000000657461;
  v402 = (void *)sub_1D7A9BF98();
  id v403 = objc_msgSend(v513, sel_dateFromString_, v402);

  if (!v403) {
    goto LABEL_56;
  }
  unint64_t v404 = v511;
  sub_1D7A9B118();

  uint64_t v405 = (uint64_t)v472;
  v406 = v515;
  ((void (*)(char *, unint64_t, uint64_t *))v514)(v472, v404, v515);
  ((void (*)(uint64_t, void, uint64_t, uint64_t *))v210)(v405, 0, 1, v406);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t *))v508)(v405, 1, v406);
  if (result != 1)
  {
    uint64_t v408 = v507 + v502;
    uint64_t v514 = v519 + v462;
    uint64_t v409 = *(int *)(v510 + 48);
    v410 = v492;
    v411 = &v492[v409];
    AnyCodable.init(value:)(v405, (uint64_t)v401 + v409);
    unint64_t v412 = sub_1D785F3E4(v390);
    char *v411 = 2;
    *((void *)v411 + 1) = 0;
    v411[16] = 1;
    *((void *)v411 + 3) = 0;
    v411[32] = 1;
    *((_DWORD *)v411 + 9) = 0;
    v411[40] = 1;
    *((void *)v411 + 6) = 0;
    v411[56] = 1;
    v518(&v411[v8[9]], 1, 1, v406);
    v413 = &v411[v8[10]];
    *(void *)v413 = 0;
    *((void *)v413 + 1) = 0;
    *(void *)&v411[v8[11]] = 0;
    *(void *)&v411[v8[12]] = v412;
    *(void *)&v411[v8[13]] = 0;
    *(_OWORD *)&v411[v8[14]] = v520;
    v414 = &v410[v504];
    uint64_t v415 = v510;
    unint64_t v416 = (unint64_t)&v410[v504 + *(int *)(v510 + 48)];
    unint64_t v511 = 0xD00000000000001DLL;
    *(void *)v414 = 0xD00000000000001DLL;
    *((void *)v414 + 1) = 0x80000001D7ABC300;
    uint64_t v417 = swift_allocObject();
    *(void *)&long long v489 = v417;
    *(_OWORD *)(v417 + 16) = v505;
    uint64_t v418 = v417 + v502;
    uint64_t v419 = v495;
    v509 = &v493[v495];
    uint64_t v420 = swift_allocObject();
    long long v508 = xmmword_1D7AA0A40;
    *(_OWORD *)(v420 + 16) = xmmword_1D7AA0A40;
    v421 = (void *)(v420 + v419);
    uint64_t v422 = (uint64_t)v421 + *(int *)(v415 + 48);
    v506 = (char *)0xD000000000000021;
    void *v421 = 0xD000000000000021;
    v421[1] = 0x80000001D7ABC390;
    AnyCodable.init(value:)(1701736270, 0xE400000000000000, v422);
    v423 = (void *)((char *)v421 + v504);
    uint64_t v424 = (uint64_t)v421 + v504 + *(int *)(v415 + 48);
    v488 = (const char *)0xD000000000000028;
    void *v423 = 0xD000000000000028;
    v423[1] = 0x80000001D7ABC3C0;
    AnyCodable.init(value:)(1701736270, 0xE400000000000000, v424);
    unint64_t v425 = sub_1D785F3E4(v420);
    *(unsigned char *)uint64_t v418 = 2;
    *(void *)(v418 + 8) = 0;
    *(unsigned char *)(v418 + 16) = 1;
    *(void *)(v418 + 24) = 0;
    *(unsigned char *)(v418 + 32) = 1;
    *(_DWORD *)(v418 + 36) = 0;
    *(unsigned char *)(v418 + 40) = 1;
    *(void *)(v418 + 48) = 0;
    *(unsigned char *)(v418 + 56) = 1;
    v426 = v406;
    v427 = v406;
    v428 = (void (*)(unint64_t, uint64_t, uint64_t, uint64_t *))v518;
    v518((char *)(v418 + v8[9]), 1, 1, v427);
    v429 = (void *)(v418 + v8[10]);
    void *v429 = 0;
    v429[1] = 0;
    *(void *)(v418 + v8[11]) = 0;
    *(void *)(v418 + v8[12]) = v425;
    *(void *)(v418 + v8[13]) = 0;
    *(_OWORD *)(v418 + v8[14]) = v520;
    *(unsigned char *)unint64_t v416 = 2;
    *(void *)(v416 + 8) = 0;
    *(unsigned char *)(v416 + 16) = 1;
    *(void *)(v416 + 24) = 0;
    *(unsigned char *)(v416 + 32) = 1;
    *(_DWORD *)(v416 + 36) = 0;
    *(unsigned char *)(v416 + 40) = 1;
    *(void *)(v416 + 48) = 0;
    *(unsigned char *)(v416 + 56) = 1;
    v428(v416 + v8[9], 1, 1, v426);
    v430 = (void *)(v416 + v8[10]);
    void *v430 = 0;
    v430[1] = 0;
    *(void *)(v416 + v8[11]) = v489;
    *(void *)(v416 + v8[12]) = 0;
    *(void *)(v416 + v8[13]) = 0;
    *(_OWORD *)(v416 + v8[14]) = v520;
    v431 = (unint64_t *)&v493[(void)v492];
    uint64_t v432 = v510;
    v433 = &v493[(void)v492 + *(int *)(v510 + 48)];
    unint64_t *v431 = v511;
    v431[1] = 0x80000001D7ABC320;
    uint64_t v434 = swift_allocObject();
    unint64_t v511 = v434;
    *(_OWORD *)(v434 + 16) = v505;
    uint64_t v435 = v434 + v502;
    uint64_t v436 = swift_allocObject();
    *(_OWORD *)(v436 + 16) = v508;
    v437 = (char *)(v436 + v495);
    uint64_t v438 = v436 + v495 + *(int *)(v432 + 48);
    *(void *)v437 = v506;
    *((void *)v437 + 1) = 0x80000001D7ABC3F0;
    AnyCodable.init(value:)(1701736270, 0xE400000000000000, v438);
    v439 = (const char **)&v437[v504];
    uint64_t v440 = (uint64_t)&v437[v504 + *(int *)(v432 + 48)];
    *v439 = v488;
    v439[1] = (const char *)0x80000001D7ABC420;
    AnyCodable.init(value:)(1701736270, 0xE400000000000000, v440);
    unint64_t v441 = sub_1D785F3E4(v436);
    *(unsigned char *)uint64_t v435 = 2;
    *(void *)(v435 + 8) = 0;
    *(unsigned char *)(v435 + 16) = 1;
    *(void *)(v435 + 24) = 0;
    *(unsigned char *)(v435 + 32) = 1;
    *(_DWORD *)(v435 + 36) = 0;
    *(unsigned char *)(v435 + 40) = 1;
    *(void *)(v435 + 48) = 0;
    *(unsigned char *)(v435 + 56) = 1;
    v442 = v515;
    v443 = v518;
    v518((char *)(v435 + v8[9]), 1, 1, v515);
    v444 = (void *)(v435 + v8[10]);
    void *v444 = 0;
    v444[1] = 0;
    *(void *)(v435 + v8[11]) = 0;
    *(void *)(v435 + v8[12]) = v441;
    *(void *)(v435 + v8[13]) = 0;
    *(_OWORD *)(v435 + v8[14]) = v520;
    unsigned char *v433 = 2;
    *((void *)v433 + 1) = 0;
    v433[16] = 1;
    *((void *)v433 + 3) = 0;
    v433[32] = 1;
    *((_DWORD *)v433 + 9) = 0;
    v433[40] = 1;
    *((void *)v433 + 6) = 0;
    v433[56] = 1;
    v445 = v442;
    v443(&v433[v8[9]], 1, 1, v442);
    v446 = &v433[v8[10]];
    void *v446 = 0;
    v446[1] = 0;
    *(void *)&v433[v8[11]] = v511;
    *(void *)&v433[v8[12]] = 0;
    *(void *)&v433[v8[13]] = 0;
    *(_OWORD *)&v433[v8[14]] = v520;
    unint64_t v447 = sub_1D785F3E4(v490);
    *(unsigned char *)uint64_t v408 = 2;
    *(void *)(v408 + 8) = 0;
    *(unsigned char *)(v408 + 16) = 1;
    *(void *)(v408 + 24) = 0;
    *(unsigned char *)(v408 + 32) = 1;
    *(_DWORD *)(v408 + 36) = 0;
    *(unsigned char *)(v408 + 40) = 1;
    *(void *)(v408 + 48) = 0;
    *(unsigned char *)(v408 + 56) = 1;
    v443((char *)(v408 + v8[9]), 1, 1, v442);
    v448 = (void *)(v408 + v8[10]);
    void *v448 = 0;
    v448[1] = 0;
    *(void *)(v408 + v8[11]) = 0;
    *(void *)(v408 + v8[12]) = v447;
    *(void *)(v408 + v8[13]) = 0;
    *(_OWORD *)(v408 + v8[14]) = v520;
    uint64_t v449 = (uint64_t)v465;
    unsigned char *v465 = 2;
    *(void *)(v449 + 8) = 0;
    *(unsigned char *)(v449 + 16) = 1;
    *(void *)(v449 + 24) = 0;
    *(unsigned char *)(v449 + 32) = 1;
    *(_DWORD *)(v449 + 36) = 0;
    *(unsigned char *)(v449 + 40) = 1;
    *(void *)(v449 + 48) = 0;
    *(unsigned char *)(v449 + 56) = 1;
    v443((char *)(v449 + v8[9]), 1, 1, v442);
    v450 = (void *)(v449 + v8[10]);
    void *v450 = 0;
    v450[1] = 0;
    *(void *)(v449 + v8[11]) = v507;
    *(void *)(v449 + v8[12]) = 0;
    *(void *)(v449 + v8[13]) = 0;
    *(_OWORD *)(v449 + v8[14]) = v520;
    *(void *)(v519 + 8 * (void)v517) = 0xD00000000000001BLL;
    uint64_t v451 = v514;
    *(void *)(v514 + 8) = 0x80000001D7ABC190;
    uint64_t v452 = v512;
    sub_1D7871D10(v449, v451 + *(int *)(v512 + 20), (uint64_t (*)(void))type metadata accessor for AnyCodable);
    v453 = v485;
    v485[9] = v491;
    v453[10] = 0xD00000000000002DLL;
    v453[11] = 0x80000001D7AC1040;
    uint64_t v454 = v486;
    uint64_t v455 = swift_allocObject();
    *(_OWORD *)(v455 + 16) = v505;
    uint64_t v456 = v455 + v454;
    uint64_t v457 = v456 + *(int *)(v452 + 20);
    *(unsigned char *)uint64_t v457 = 1;
    *(void *)(v457 + 8) = 0;
    *(unsigned char *)(v457 + 16) = 1;
    *(void *)(v457 + 24) = 0;
    *(unsigned char *)(v457 + 32) = 1;
    *(_DWORD *)(v457 + 36) = 0;
    *(unsigned char *)(v457 + 40) = 1;
    *(void *)(v457 + 48) = 0;
    *(unsigned char *)(v457 + 56) = 1;
    v443((char *)(v457 + v8[9]), 1, 1, v445);
    v458 = (void *)(v457 + v8[10]);
    void *v458 = 0;
    v458[1] = 0;
    *(void *)(v457 + v8[11]) = 0;
    *(void *)(v457 + v8[12]) = 0;
    *(void *)(v457 + v8[13]) = 0;
    *(_OWORD *)(v457 + v8[14]) = v520;
    strcpy((char *)v456, "test_document");
    *(_WORD *)(v456 + 14) = -4864;
    v453[12] = v455;
    unint64_t v459 = sub_1D785F610((uint64_t)v453);

    sub_1D7871BDC(v501, v503);
    v463(v500, v445);
    return v459;
  }
LABEL_57:
  __break(1u);
  return result;
}

double sub_1D78CC5EC@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v58 = a3;
  uint64_t v57 = a2;
  uint64_t v56 = sub_1D7A9AE98();
  uint64_t v4 = *(void *)(v56 - 8);
  MEMORY[0x1F4188790](v56, v5, v6, v7, v8, v9, v10, v11);
  uint64_t v13 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1D7A9B228();
  MEMORY[0x1F4188790](v14 - 8, v15, v16, v17, v18, v19, v20, v21);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8432D0);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v31 = MEMORY[0x1F4188790](v22, v24, v25, v26, v27, v28, v29, v30);
  uint64_t v33 = (char *)&v54 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v31, v34, v35, v36, v37, v38, v39, v40);
  uint64_t v42 = (char *)&v54 - v41;
  uint64_t v55 = *a1;
  uint64_t v61 = v55;
  sub_1D7A9B1D8();
  sub_1D78CDF34();
  sub_1D7A9AD88();
  uint64_t v59 = 2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8432D8);
  sub_1D7871DDC(&qword_1EA8432E0, &qword_1EA8432D8);
  sub_1D7A9AE88();
  MEMORY[0x1D9479B10](v13, v22);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v13, v56);
  uint64_t v43 = *(void (**)(char *, uint64_t))(v23 + 8);
  v43(v33, v22);
  sub_1D7871DDC(&qword_1EA8432E8, &qword_1EA8432D0);
  sub_1D7A9CA78();
  v43(v42, v22);
  LOBYTE(v43) = v55 <= v57;
  uint64_t v59 = 0x7265766F5F656761;
  unint64_t v60 = 0xE90000000000005FLL;
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  uint64_t v44 = v59;
  unint64_t v45 = v60;
  uint64_t v46 = type metadata accessor for CredentialBuilderPayloadDetails.Element(0);
  uint64_t v47 = v58;
  uint64_t v48 = (char *)v58 + *(int *)(v46 + 20);
  *uint64_t v48 = (char)v43;
  *((void *)v48 + 1) = 0;
  v48[16] = 1;
  *((void *)v48 + 3) = 0;
  v48[32] = 1;
  *((_DWORD *)v48 + 9) = 0;
  v48[40] = 1;
  *((void *)v48 + 6) = 0;
  v48[56] = 1;
  uint64_t v49 = (int *)type metadata accessor for AnyCodable();
  uint64_t v50 = &v48[v49[9]];
  uint64_t v51 = sub_1D7A9B148();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v50, 1, 1, v51);
  uint64_t v52 = &v48[v49[10]];
  *(void *)uint64_t v52 = 0;
  *((void *)v52 + 1) = 0;
  *(void *)&v48[v49[11]] = 0;
  *(void *)&v48[v49[12]] = 0;
  *(void *)&v48[v49[13]] = 0;
  double result = 0.0;
  *(_OWORD *)&v48[v49[14]] = xmmword_1D7AA0AC0;
  *uint64_t v47 = v44;
  v47[1] = v45;
  return result;
}

uint64_t sub_1D78CC9D0(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(void *)(v3 + 24) >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v23 = v4 + v2;
  }
  else {
    int64_t v23 = v4;
  }
  unint64_t v3 = sub_1D789E534(isUniquelyReferenced_nonNull_native, v23, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = (*(void *)(v3 + 24) >> 1) - v9;
  uint64_t v11 = *(void *)(type metadata accessor for CredentialBuilderPayloadDetails.Element(0) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  if (v10 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v14 = v3 + v13 + v12 * v9;
  unint64_t v15 = a1 + v13;
  uint64_t v16 = v12 * v8;
  unint64_t v17 = v14 + v16;
  unint64_t v18 = v15 + v16;
  if (v15 < v17 && v14 < v18) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v20 = *(void *)(v3 + 16);
  BOOL v21 = __OFADD__(v20, v8);
  uint64_t v22 = v20 + v8;
  if (!v21)
  {
    *(void *)(v3 + 16) = v22;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_1D7A9D008();
  __break(1u);
  return result;
}

uint64_t sub_1D78CCB80(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  unint64_t v3 = sub_1D789EA34(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v10 = (unint64_t)&v3[5 * v9 + 4];
  if (a1 + 32 < v10 + 40 * v8 && v10 < a1 + 32 + 40 * v8) {
    goto LABEL_24;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA843038);
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v12 = v3[2];
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_1D7A9D008();
  __break(1u);
  return result;
}

void *sub_1D78CCCF8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v5 = a4 >> 1;
  uint64_t v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v7 = *(void **)v4;
  int64_t v8 = *(void *)(*(void *)v4 + 16);
  int64_t v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t result = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!result || v9 > v7[3] >> 1) {
    goto LABEL_8;
  }
  if (v5 == a3)
  {
    while (v6 > 0)
    {
      __break(1u);
LABEL_8:
      if (v8 <= v9) {
        int64_t v13 = v8 + v6;
      }
      else {
        int64_t v13 = v8;
      }
      uint64_t result = sub_1D789E41C(result, v13, 1, v7);
      uint64_t v7 = result;
      if (v5 != a3) {
        goto LABEL_12;
      }
    }
    goto LABEL_22;
  }
LABEL_12:
  uint64_t v14 = v7[2];
  if ((v7[3] >> 1) - v14 < v6) {
    goto LABEL_25;
  }
  if (v6 < 0) {
    goto LABEL_27;
  }
  int64_t v15 = (char *)&v7[v14 + 4];
  uint64_t v16 = (char *)(a2 + 8 * a3);
  if (v16 < &v15[8 * v6] && v15 < &v16[8 * v6]) {
    goto LABEL_27;
  }
  uint64_t result = memcpy(v15, v16, 8 * v6);
  if (!v6)
  {
LABEL_22:
    *(void *)uint64_t v4 = v7;
    return result;
  }
  uint64_t v18 = v7[2];
  BOOL v19 = __OFADD__(v18, v6);
  uint64_t v20 = v18 + v6;
  if (!v19)
  {
    v7[2] = v20;
    goto LABEL_22;
  }
LABEL_26:
  __break(1u);
LABEL_27:
  uint64_t result = (void *)sub_1D7A9D008();
  __break(1u);
  return result;
}

char *sub_1D78CCE90(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v5 = a4 >> 1;
  int64_t v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v7 = *v4;
  int64_t v8 = *((void *)*v4 + 2);
  int64_t v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!result || v9 > *((void *)v7 + 3) >> 1) {
    goto LABEL_8;
  }
  if (v5 == a3)
  {
    while (v6 > 0)
    {
      __break(1u);
LABEL_8:
      if (v8 <= v9) {
        int64_t v13 = v8 + v6;
      }
      else {
        int64_t v13 = v8;
      }
      uint64_t result = sub_1D789E0D8(result, v13, 1, v7);
      uint64_t v7 = result;
      if (v5 != a3) {
        goto LABEL_12;
      }
    }
    goto LABEL_22;
  }
LABEL_12:
  uint64_t v14 = *((void *)v7 + 2);
  if ((*((void *)v7 + 3) >> 1) - v14 < v6) {
    goto LABEL_25;
  }
  if (v6 < 0) {
    goto LABEL_27;
  }
  int64_t v15 = &v7[v14 + 32];
  if (a2 + a3 < (unint64_t)&v15[v6] && (unint64_t)v15 < a2 + a3 + v6) {
    goto LABEL_27;
  }
  uint64_t result = (char *)memcpy(v15, (const void *)(a2 + a3), v6);
  if (!v6)
  {
LABEL_22:
    void *v4 = v7;
    return result;
  }
  uint64_t v17 = *((void *)v7 + 2);
  BOOL v18 = __OFADD__(v17, v6);
  uint64_t v19 = v17 + v6;
  if (!v18)
  {
    *((void *)v7 + 2) = v19;
    goto LABEL_22;
  }
LABEL_26:
  __break(1u);
LABEL_27:
  uint64_t result = (char *)sub_1D7A9D008();
  __break(1u);
  return result;
}

uint64_t sub_1D78CD028(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x1E4FBC870];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF8C70);
  uint64_t v3 = sub_1D7A9CC28();
  uint64_t v4 = 0;
  uint64_t v5 = v3 + 56;
  uint64_t v33 = a1 + 32;
  do
  {
    uint64_t v6 = *(unsigned __int8 *)(v33 + v4);
    sub_1D7A9D5D8();
    DIPError.PropertyKey.rawValue.getter();
    sub_1D7A9C0B8();
    swift_bridgeObjectRelease();
    uint64_t v7 = sub_1D7A9D628();
    uint64_t v8 = ~(-1 << *(unsigned char *)(v3 + 32));
    unint64_t v9 = v7 & v8;
    unint64_t v10 = (v7 & (unint64_t)v8) >> 6;
    uint64_t v11 = *(void *)(v5 + 8 * v10);
    uint64_t v12 = 1 << (v7 & v8);
    if ((v12 & v11) != 0)
    {
      while (1)
      {
        unint64_t v13 = 0xED00004449776F6CLL;
        unint64_t v14 = 0x666B726F576F6E69;
        switch(*(unsigned char *)(*(void *)(v3 + 48) + v9))
        {
          case 1:
            unint64_t v14 = 0x69766F72506F6E69;
            unint64_t v13 = 0xED00004449726564;
            break;
          case 2:
            unint64_t v13 = 0xEC0000004449776FLL;
            unint64_t v14 = 0x6C666B726F577073;
            break;
          case 3:
            unint64_t v14 = 0x6469766F72507073;
            unint64_t v13 = 0xEC00000044497265;
            break;
          case 4:
            unint64_t v14 = 0x7475626972747461;
            unint64_t v13 = 0xEB00000000444965;
            break;
          case 5:
            int64_t v15 = "daemonSessionState";
            goto LABEL_33;
          case 6:
            unint64_t v13 = 0xE90000000000004CLL;
            unint64_t v14 = 0x5255726576726573;
            break;
          case 7:
            unint64_t v14 = 0xD000000000000010;
            uint64_t v16 = "serverStatusCode";
            goto LABEL_35;
          case 8:
            unint64_t v14 = 0xD000000000000013;
            uint64_t v16 = "serverSubStatusCode";
            goto LABEL_35;
          case 9:
            unint64_t v14 = 0x4974736575716572;
            unint64_t v13 = 0xE900000000000044;
            break;
          case 0xA:
            unint64_t v14 = 0x61737265766E6F63;
            unint64_t v13 = 0xEE0044496E6F6974;
            break;
          case 0xB:
            unint64_t v14 = 0xD000000000000010;
            uint64_t v16 = "serverRetryAfter";
            goto LABEL_35;
          case 0xC:
            int64_t v15 = "cloudContainerName";
            goto LABEL_33;
          case 0xD:
            unint64_t v14 = 0xD000000000000013;
            uint64_t v16 = "cloudContainerState";
            goto LABEL_35;
          case 0xE:
            unint64_t v14 = 0x63655264756F6C63;
            unint64_t v13 = 0xEF656E6F5A64726FLL;
            break;
          case 0xF:
            unint64_t v14 = 0x6552656369766564;
            unint64_t v13 = 0xEC0000006E6F6967;
            break;
          case 0x10:
            int64_t v15 = "appleAccountStatus";
            goto LABEL_33;
          case 0x11:
            unint64_t v13 = 0xE900000000000065;
            unint64_t v14 = 0x6761735574726563;
            break;
          case 0x12:
            unint64_t v14 = 0x6573616261746164;
            unint64_t v13 = 0xEE006E6D756C6F43;
            break;
          case 0x13:
            unint64_t v14 = 0x74737973656C6966;
            unint64_t v13 = 0xEE00687461506D65;
            break;
          case 0x14:
            unint64_t v14 = 0x69796C7265646E75;
            unint64_t v13 = 0xEF6F6E727245676ELL;
            break;
          case 0x15:
            unint64_t v14 = 0x636E456567616D69;
            unint64_t v13 = 0xED0000676E69646FLL;
            break;
          case 0x16:
            unint64_t v13 = 0xE400000000000000;
            unint64_t v14 = 1701273968;
            break;
          case 0x17:
            unint64_t v14 = 0x636E75614C6F6E69;
            unint64_t v13 = 0xED00007265695468;
            break;
          case 0x18:
            unint64_t v13 = 0xE800000000000000;
            unint64_t v14 = 0x746E756F43797274;
            break;
          case 0x19:
            unint64_t v14 = 0x746E656D75636F64;
            unint64_t v13 = 0xEF74736575716552;
            break;
          case 0x1A:
            int64_t v15 = "termsAndConditions";
LABEL_33:
            unint64_t v13 = (unint64_t)(v15 - 32) | 0x8000000000000000;
            unint64_t v14 = 0xD000000000000012;
            break;
          case 0x1B:
            unint64_t v14 = 0xD000000000000016;
            uint64_t v16 = "issuerCertificateChain";
LABEL_35:
            unint64_t v13 = (unint64_t)(v16 - 32) | 0x8000000000000000;
            break;
          default:
            break;
        }
        unint64_t v17 = 0x666B726F576F6E69;
        unint64_t v18 = 0xED00004449776F6CLL;
        switch(v6)
        {
          case 1:
            uint64_t v19 = 0x69766F72506F6E69;
            uint64_t v20 = 0x4449726564;
            goto LABEL_72;
          case 2:
            unint64_t v18 = 0xEC0000004449776FLL;
            if (v14 != 0x6C666B726F577073) {
              goto LABEL_82;
            }
            goto LABEL_81;
          case 3:
            uint64_t v21 = 0x6469766F72507073;
            uint64_t v22 = 1145664101;
            goto LABEL_57;
          case 4:
            unint64_t v18 = 0xEB00000000444965;
            if (v14 != 0x7475626972747461) {
              goto LABEL_82;
            }
            goto LABEL_81;
          case 5:
            int64_t v23 = "daemonSessionState";
            goto LABEL_79;
          case 6:
            unint64_t v18 = 0xE90000000000004CLL;
            if (v14 != 0x5255726576726573) {
              goto LABEL_82;
            }
            goto LABEL_81;
          case 7:
            unint64_t v24 = 0xD000000000000010;
            uint64_t v25 = "serverStatusCode";
            goto LABEL_86;
          case 8:
            unint64_t v24 = 0xD000000000000013;
            uint64_t v25 = "serverSubStatusCode";
            goto LABEL_86;
          case 9:
            unint64_t v18 = 0xE900000000000044;
            if (v14 != 0x4974736575716572) {
              goto LABEL_82;
            }
            goto LABEL_81;
          case 10:
            uint64_t v26 = 0x61737265766E6F63;
            uint64_t v27 = 0x44496E6F6974;
            goto LABEL_64;
          case 11:
            unint64_t v24 = 0xD000000000000010;
            uint64_t v25 = "serverRetryAfter";
            goto LABEL_86;
          case 12:
            int64_t v23 = "cloudContainerName";
            goto LABEL_79;
          case 13:
            unint64_t v24 = 0xD000000000000013;
            uint64_t v25 = "cloudContainerState";
            goto LABEL_86;
          case 14:
            unint64_t v18 = 0xEF656E6F5A64726FLL;
            if (v14 != 0x63655264756F6C63) {
              goto LABEL_82;
            }
            goto LABEL_81;
          case 15:
            uint64_t v21 = 0x6552656369766564;
            uint64_t v22 = 1852795239;
LABEL_57:
            unint64_t v18 = v22 & 0xFFFFFFFFFFFFLL | 0xEC00000000000000;
            if (v14 != v21) {
              goto LABEL_82;
            }
            goto LABEL_81;
          case 16:
            int64_t v23 = "appleAccountStatus";
            goto LABEL_79;
          case 17:
            unint64_t v18 = 0xE900000000000065;
            if (v14 != 0x6761735574726563) {
              goto LABEL_82;
            }
            goto LABEL_81;
          case 18:
            uint64_t v26 = 0x6573616261746164;
            uint64_t v27 = 0x6E6D756C6F43;
            goto LABEL_64;
          case 19:
            uint64_t v26 = 0x74737973656C6966;
            uint64_t v27 = 0x687461506D65;
LABEL_64:
            unint64_t v18 = v27 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
            if (v14 != v26) {
              goto LABEL_82;
            }
            goto LABEL_81;
          case 20:
            unint64_t v18 = 0xEF6F6E727245676ELL;
            if (v14 != 0x69796C7265646E75) {
              goto LABEL_82;
            }
            goto LABEL_81;
          case 21:
            uint64_t v19 = 0x636E456567616D69;
            uint64_t v20 = 0x676E69646FLL;
            goto LABEL_72;
          case 22:
            unint64_t v18 = 0xE400000000000000;
            if (v14 != 1701273968) {
              goto LABEL_82;
            }
            goto LABEL_81;
          case 23:
            uint64_t v19 = 0x636E75614C6F6E69;
            uint64_t v20 = 0x7265695468;
LABEL_72:
            unint64_t v18 = v20 & 0xFFFFFFFFFFFFLL | 0xED00000000000000;
            if (v14 != v19) {
              goto LABEL_82;
            }
            goto LABEL_81;
          case 24:
            unint64_t v18 = 0xE800000000000000;
            if (v14 != 0x746E756F43797274) {
              goto LABEL_82;
            }
            goto LABEL_81;
          case 25:
            unint64_t v18 = 0xEF74736575716552;
            if (v14 != 0x746E656D75636F64) {
              goto LABEL_82;
            }
            goto LABEL_81;
          case 26:
            int64_t v23 = "termsAndConditions";
LABEL_79:
            unint64_t v18 = (unint64_t)(v23 - 32) | 0x8000000000000000;
            unint64_t v17 = 0xD000000000000012;
            goto LABEL_80;
          case 27:
            unint64_t v24 = 0xD000000000000016;
            uint64_t v25 = "issuerCertificateChain";
LABEL_86:
            unint64_t v18 = (unint64_t)(v25 - 32) | 0x8000000000000000;
            if (v14 != v24) {
              goto LABEL_82;
            }
            goto LABEL_81;
          default:
LABEL_80:
            if (v14 != v17) {
              goto LABEL_82;
            }
LABEL_81:
            if (v13 == v18)
            {
              swift_bridgeObjectRelease_n();
              goto LABEL_4;
            }
LABEL_82:
            char v28 = sub_1D7A9D358();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v28) {
              goto LABEL_4;
            }
            unint64_t v9 = (v9 + 1) & v8;
            unint64_t v10 = v9 >> 6;
            uint64_t v11 = *(void *)(v5 + 8 * (v9 >> 6));
            uint64_t v12 = 1 << v9;
            if ((v11 & (1 << v9)) == 0) {
              goto LABEL_88;
            }
            break;
        }
      }
    }
LABEL_88:
    *(void *)(v5 + 8 * v10) = v12 | v11;
    *(unsigned char *)(*(void *)(v3 + 48) + v9) = v6;
    uint64_t v29 = *(void *)(v3 + 16);
    BOOL v30 = __OFADD__(v29, 1);
    uint64_t v31 = v29 + 1;
    if (v30)
    {
      __break(1u);
      JUMPOUT(0x1D78CD8BCLL);
    }
    *(void *)(v3 + 16) = v31;
LABEL_4:
    ++v4;
  }
  while (v4 != v1);
  return v3;
}

uint64_t sub_1D78CD99C(uint64_t a1)
{
  uint64_t v2 = sub_1D7A9B2A8();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v2, v4, v5, v6, v7, v8, v9, v10);
  unint64_t v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11, v14, v15, v16, v17, v18, v19, v20);
  uint64_t v51 = (char *)&v44 - v21;
  uint64_t v22 = *(void *)(a1 + 16);
  if (v22)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8432F0);
    uint64_t v23 = sub_1D7A9CC28();
    uint64_t v24 = 0;
    uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v25 = v3 + 16;
    uint64_t v49 = v26;
    uint64_t v50 = v23 + 56;
    uint64_t v27 = *(unsigned __int8 *)(v25 + 64);
    uint64_t v46 = v22;
    uint64_t v47 = a1 + ((v27 + 32) & ~v27);
    uint64_t v28 = *(void *)(v25 + 56);
    uint64_t v29 = (void (**)(char *, uint64_t))(v25 - 8);
    unint64_t v45 = (uint64_t (**)(unint64_t, char *, uint64_t))(v25 + 16);
    while (1)
    {
      uint64_t v48 = v24;
      v49(v51, v47 + v28 * v24, v2);
      sub_1D78CDF88(&qword_1EA8432F8);
      uint64_t v30 = sub_1D7A9BEF8();
      uint64_t v31 = ~(-1 << *(unsigned char *)(v23 + 32));
      unint64_t v32 = v30 & v31;
      unint64_t v33 = (v30 & (unint64_t)v31) >> 6;
      uint64_t v34 = *(void *)(v50 + 8 * v33);
      uint64_t v35 = 1 << (v30 & v31);
      if ((v35 & v34) != 0)
      {
        while (1)
        {
          uint64_t v36 = v25;
          v49(v13, *(void *)(v23 + 48) + v32 * v28, v2);
          sub_1D78CDF88(&qword_1EA843300);
          char v37 = sub_1D7A9BF88();
          uint64_t v38 = *v29;
          (*v29)(v13, v2);
          if (v37) {
            break;
          }
          unint64_t v32 = (v32 + 1) & v31;
          unint64_t v33 = v32 >> 6;
          uint64_t v34 = *(void *)(v50 + 8 * (v32 >> 6));
          uint64_t v35 = 1 << v32;
          uint64_t v25 = v36;
          if ((v34 & (1 << v32)) == 0) {
            goto LABEL_8;
          }
        }
        v38(v51, v2);
        uint64_t v25 = v36;
      }
      else
      {
LABEL_8:
        uint64_t v39 = v51;
        *(void *)(v50 + 8 * v33) = v35 | v34;
        uint64_t result = (*v45)(*(void *)(v23 + 48) + v32 * v28, v39, v2);
        uint64_t v41 = *(void *)(v23 + 16);
        BOOL v42 = __OFADD__(v41, 1);
        uint64_t v43 = v41 + 1;
        if (v42)
        {
          __break(1u);
          return result;
        }
        *(void *)(v23 + 16) = v43;
      }
      uint64_t v24 = v48 + 1;
      if (v48 + 1 == v46) {
        return v23;
      }
    }
  }
  return MEMORY[0x1E4FBC870];
}

uint64_t sub_1D78CDC8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8477F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for DeveloperTestMDLCredentialBuilder()
{
  return &type metadata for DeveloperTestMDLCredentialBuilder;
}

uint64_t sub_1D78CDD04(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8432C8);
    uint64_t v3 = sub_1D7A9CC28();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v31 = v1;
    uint64_t v32 = a1 + 32;
    while (1)
    {
      uint64_t v6 = *(void **)(v32 + 8 * v4);
      sub_1D7A9BFC8();
      sub_1D7A9D5D8();
      id v7 = v6;
      sub_1D7A9C0B8();
      uint64_t v8 = sub_1D7A9D628();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v11 = v8 & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        uint64_t v15 = sub_1D7A9BFC8();
        uint64_t v17 = v16;
        if (v15 == sub_1D7A9BFC8() && v17 == v18)
        {
LABEL_3:
          swift_bridgeObjectRelease_n();
LABEL_4:

          goto LABEL_5;
        }
        char v20 = sub_1D7A9D358();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        if (v20) {
          goto LABEL_4;
        }
        uint64_t v21 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v21;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          uint64_t v22 = sub_1D7A9BFC8();
          uint64_t v24 = v23;
          if (v22 == sub_1D7A9BFC8() && v24 == v25) {
            goto LABEL_3;
          }
          char v27 = sub_1D7A9D358();
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          if (v27) {
            goto LABEL_4;
          }
        }
      }
      *(void *)(v5 + 8 * v12) = v14 | v13;
      *(void *)(*(void *)(v3 + 48) + 8 * v11) = v7;
      uint64_t v28 = *(void *)(v3 + 16);
      BOOL v29 = __OFADD__(v28, 1);
      uint64_t v30 = v28 + 1;
      if (v29)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v30;
LABEL_5:
      if (++v4 == v31) {
        return v3;
      }
    }
  }
  return MEMORY[0x1E4FBC870];
}

unint64_t sub_1D78CDF34()
{
  unint64_t result = qword_1EBDF9750;
  if (!qword_1EBDF9750)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBDF9750);
  }
  return result;
}

uint64_t sub_1D78CDF88(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1D7A9B2A8();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t ISO18013Package.Document.init(namespaces:issuerAuth:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = a1;
  uint64_t v4 = (char *)a3 + *(int *)(type metadata accessor for ISO18013Package.Document() + 20);
  uint64_t v5 = sub_1D7A9B328();
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32);
  return v6(v4, a2, v5);
}

uint64_t type metadata accessor for ISO18013Package.Document()
{
  uint64_t result = qword_1EA8433B0;
  if (!qword_1EA8433B0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

CoreIDVShared::ISO18013Package __swiftcall ISO18013Package.init(version:documents:)(Swift::String version, Swift::OpaquePointer documents)
{
  *(Swift::String *)uint64_t v2 = version;
  *(Swift::OpaquePointer *)(v2 + 16) = documents;
  result.version = version;
  result.documents = documents;
  return result;
}

uint64_t static ISO18013Package.supportedVersion.getter()
{
  return 3157553;
}

uint64_t ISO18013Package.version.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ISO18013Package.documents.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D78CE0EC()
{
  if (*v0) {
    return 0x746E656D75636F64;
  }
  else {
    return 0x6E6F6973726576;
  }
}

uint64_t sub_1D78CE12C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1D78CFD1C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D78CE154(uint64_t a1)
{
  unint64_t v2 = sub_1D78CE368();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1D78CE190(uint64_t a1)
{
  unint64_t v2 = sub_1D78CE368();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t ISO18013Package.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA843308);
  uint64_t v17 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v5, v6, v7, v8, v9, v10, v11);
  uint64_t v13 = (char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D78CE368();
  sub_1D7A9D6E8();
  char v20 = 0;
  sub_1D7A9D1D8();
  if (!v2)
  {
    uint64_t v18 = v16;
    char v19 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA843318);
    sub_1D78CE3BC();
    sub_1D7A9D228();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v13, v4);
}

unint64_t sub_1D78CE368()
{
  unint64_t result = qword_1EA843310;
  if (!qword_1EA843310)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA843310);
  }
  return result;
}

unint64_t sub_1D78CE3BC()
{
  unint64_t result = qword_1EA843320;
  if (!qword_1EA843320)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA843318);
    sub_1D78CF3C0(&qword_1EA843328, (void (*)(uint64_t))type metadata accessor for ISO18013Package.Document);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA843320);
  }
  return result;
}

uint64_t ISO18013Package.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA843330);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7, v8, v9, v10, v11, v12, v13);
  uint64_t v15 = (char *)v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D78CE368();
  sub_1D7A9D6A8();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v23 = 0;
  uint64_t v16 = sub_1D7A9D0F8();
  uint64_t v18 = v17;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA843318);
  char v22 = 1;
  sub_1D78CE68C();
  swift_bridgeObjectRetain();
  sub_1D7A9D148();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v5);
  uint64_t v19 = v21[1];
  *a2 = v16;
  a2[1] = v18;
  a2[2] = v19;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

unint64_t sub_1D78CE68C()
{
  unint64_t result = qword_1EA843338;
  if (!qword_1EA843338)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA843318);
    sub_1D78CF3C0(&qword_1EA843340, (void (*)(uint64_t))type metadata accessor for ISO18013Package.Document);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA843338);
  }
  return result;
}

uint64_t sub_1D78CE738@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return ISO18013Package.init(from:)(a1, a2);
}

uint64_t sub_1D78CE750(void *a1)
{
  return ISO18013Package.encode(to:)(a1);
}

uint64_t ISO18013Package.Document.namespaces.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ISO18013Package.Document.issuerAuth.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ISO18013Package.Document() + 20);
  uint64_t v4 = sub_1D7A9B328();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t sub_1D78CE7E8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1D7997350(*a1, *a2);
}

uint64_t sub_1D78CE7F4()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D78CE87C()
{
  sub_1D7A9C0B8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D78CE8F0()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D78CE974@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_1D7A9D058();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

void sub_1D78CE9D4(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x63617053656D616ELL;
  if (*v1) {
    uint64_t v2 = 0x7541726575737369;
  }
  unint64_t v3 = 0xEA00000000006874;
  if (!*v1) {
    unint64_t v3 = 0xEA00000000007365;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1D78CEA18()
{
  if (*v0) {
    return 0x7541726575737369;
  }
  else {
    return 0x63617053656D616ELL;
  }
}

uint64_t sub_1D78CEA58@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_1D7A9D058();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

uint64_t sub_1D78CEABC(uint64_t a1)
{
  unint64_t v2 = sub_1D78CEEA4();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1D78CEAF8(uint64_t a1)
{
  unint64_t v2 = sub_1D78CEEA4();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t ISO18013Package.Document.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v42 = a2;
  uint64_t v44 = sub_1D7A9B328();
  uint64_t v41 = *(void *)(v44 - 8);
  MEMORY[0x1F4188790](v44, v4, v5, v6, v7, v8, v9, v10);
  uint64_t v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA843348);
  uint64_t v43 = *(void *)(v45 - 8);
  MEMORY[0x1F4188790](v45, v13, v14, v15, v16, v17, v18, v19);
  uint64_t v21 = (char *)&v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for ISO18013Package.Document();
  MEMORY[0x1F4188790](v22, v23, v24, v25, v26, v27, v28, v29);
  uint64_t v31 = (char *)&v39 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D78CEEA4();
  sub_1D7A9D6A8();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v39 = v12;
  uint64_t v40 = a1;
  uint64_t v32 = v31;
  uint64_t v34 = v43;
  uint64_t v33 = v44;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA843358);
  char v47 = 0;
  sub_1D78CEEF8(&qword_1EA843360, (void (*)(void))sub_1D78CEF74);
  uint64_t v35 = v45;
  sub_1D7A9D148();
  uint64_t v36 = (uint64_t)v32;
  *uint64_t v32 = v48;
  char v46 = 1;
  sub_1D78CF3C0(&qword_1EA843380, MEMORY[0x1E4F50D80]);
  char v37 = v39;
  sub_1D7A9D148();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v21, v35);
  (*(void (**)(uint64_t, char *, uint64_t))(v41 + 32))(v36 + *(int *)(v22 + 20), v37, v33);
  sub_1D78CF00C(v36, v42);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
  return sub_1D78CF070(v36);
}

unint64_t sub_1D78CEEA4()
{
  unint64_t result = qword_1EA843350;
  if (!qword_1EA843350)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA843350);
  }
  return result;
}

uint64_t sub_1D78CEEF8(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA843358);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1D78CEF74()
{
  unint64_t result = qword_1EA843368;
  if (!qword_1EA843368)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA843370);
    sub_1D78CF378(&qword_1EA843378);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA843368);
  }
  return result;
}

uint64_t sub_1D78CF00C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ISO18013Package.Document();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D78CF070(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ISO18013Package.Document();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t ISO18013Package.Document.encode(to:)(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA843388);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7, v8, v9, v10, v11, v12, v13);
  uint64_t v15 = &v17[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D78CEEA4();
  sub_1D7A9D6E8();
  uint64_t v18 = *v3;
  v17[7] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA843358);
  sub_1D78CEEF8(&qword_1EA843390, (void (*)(void))sub_1D78CF2E0);
  sub_1D7A9D228();
  if (!v2)
  {
    type metadata accessor for ISO18013Package.Document();
    v17[6] = 1;
    sub_1D7A9B328();
    sub_1D78CF3C0(&qword_1EA8433A8, MEMORY[0x1E4F50D80]);
    sub_1D7A9D228();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v15, v5);
}

unint64_t sub_1D78CF2E0()
{
  unint64_t result = qword_1EA843398;
  if (!qword_1EA843398)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA843370);
    sub_1D78CF378(&qword_1EA8433A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA843398);
  }
  return result;
}

uint64_t sub_1D78CF378(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA842300);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D78CF3C0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D78CF408@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ISO18013Package.Document.init(from:)(a1, a2);
}

uint64_t sub_1D78CF420(void *a1)
{
  return ISO18013Package.Document.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for ISO18013Package()
{
  return &type metadata for ISO18013Package;
}

uint64_t *initializeBufferWithCopyOfBuffer for ISO18013Package.Document(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = sub_1D7A9B328();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for ISO18013Package.Document(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_1D7A9B328();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

void *initializeWithCopy for ISO18013Package.Document(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_1D7A9B328();
  uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

void *assignWithCopy for ISO18013Package.Document(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_1D7A9B328();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

void *initializeWithTake for ISO18013Package.Document(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_1D7A9B328();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *assignWithTake for ISO18013Package.Document(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_1D7A9B328();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for ISO18013Package.Document(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1D78CF7EC);
}

uint64_t sub_1D78CF7EC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_1D7A9B328();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ISO18013Package.Document(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1D78CF8B0);
}

void *sub_1D78CF8B0(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_1D7A9B328();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1D78CF958()
{
  uint64_t result = sub_1D7A9B328();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ISO18013Package.Document.CodingKeys()
{
  return &type metadata for ISO18013Package.Document.CodingKeys;
}

unsigned char *_s13CoreIDVShared15ISO18013PackageV8DocumentV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D78CFAD4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ISO18013Package.CodingKeys()
{
  return &type metadata for ISO18013Package.CodingKeys;
}

unint64_t sub_1D78CFB10()
{
  unint64_t result = qword_1EA8433C0;
  if (!qword_1EA8433C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8433C0);
  }
  return result;
}

unint64_t sub_1D78CFB68()
{
  unint64_t result = qword_1EA8433C8;
  if (!qword_1EA8433C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8433C8);
  }
  return result;
}

unint64_t sub_1D78CFBC0()
{
  unint64_t result = qword_1EA8433D0;
  if (!qword_1EA8433D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8433D0);
  }
  return result;
}

unint64_t sub_1D78CFC18()
{
  unint64_t result = qword_1EA8433D8;
  if (!qword_1EA8433D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8433D8);
  }
  return result;
}

unint64_t sub_1D78CFC70()
{
  unint64_t result = qword_1EA8433E0;
  if (!qword_1EA8433E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8433E0);
  }
  return result;
}

unint64_t sub_1D78CFCC8()
{
  unint64_t result = qword_1EA8433E8;
  if (!qword_1EA8433E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8433E8);
  }
  return result;
}

uint64_t sub_1D78CFD1C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000;
  if (v2 || (sub_1D7A9D358() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E656D75636F64 && a2 == 0xE900000000000073)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_1D7A9D358();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

char *computeISO18013Digest(algorithm:data:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v122 = *MEMORY[0x1E4F143B8];
  uint64_t v115 = sub_1D7A9BDA8();
  uint64_t v110 = *(void *)(v115 - 8);
  MEMORY[0x1F4188790](v115, v7, v8, v9, v10, v11, v12, v13);
  uint64_t v114 = (uint64_t)&v101 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v106 = sub_1D7A9B858();
  uint64_t v112 = *(void *)(v106 - 8);
  MEMORY[0x1F4188790](v106, v15, v16, v17, v18, v19, v20, v21);
  uint64_t v111 = (char *)&v101 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v113 = sub_1D7A9BD98();
  uint64_t v108 = *(void *)(v113 - 8);
  MEMORY[0x1F4188790](v113, v23, v24, v25, v26, v27, v28, v29);
  uint64_t v116 = (uint64_t)&v101 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v120 = sub_1D7A9B848();
  uint64_t v109 = *(void *)(v120 - 8);
  MEMORY[0x1F4188790](v120, v31, v32, v33, v34, v35, v36, v37);
  uint64_t v119 = (char *)&v101 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = sub_1D7A9BD88();
  uint64_t v107 = *(void *)(v39 - 8);
  MEMORY[0x1F4188790](v39, v40, v41, v42, v43, v44, v45, v46);
  uint64_t v48 = (char *)&v101 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = sub_1D7A9B838();
  uint64_t v118 = *(void *)(v49 - 8);
  MEMORY[0x1F4188790](v49, v50, v51, v52, v53, v54, v55, v56);
  uint64_t v58 = (char *)&v101 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v117 = *a1;
  sub_1D7A9B3F8();
  swift_allocObject();
  sub_1D7A9B3E8();
  *(void *)&long long v121 = a2;
  *((void *)&v121 + 1) = a3;
  sub_1D7871AD8();
  uint64_t v59 = sub_1D7A9B3B8();
  unint64_t v61 = v60;
  swift_release();
  if (!v3)
  {
    uint64_t v104 = v39;
    uint64_t v105 = v48;
    uint64_t v102 = v58;
    uint64_t v64 = v118;
    uint64_t v63 = v119;
    uint64_t v103 = v49;
    uint64_t v65 = v120;
    if (v117)
    {
      if (v117 == 1)
      {
        sub_1D78D1F70(&qword_1EA843400, MEMORY[0x1E4F25180]);
        sub_1D7A9B828();
        unint64_t v66 = v61;
        switch(v61 >> 62)
        {
          case 1uLL:
            if (v59 >> 32 < (int)v59)
            {
              __break(1u);
LABEL_32:
              __break(1u);
LABEL_33:
              __break(1u);
            }
            sub_1D7860790(v59, v61);
            unint64_t v66 = v61;
            uint64_t v79 = v116;
            sub_1D78D1234((int)v59, v59 >> 32, v61 & 0x3FFFFFFFFFFFFFFFLL, v116, MEMORY[0x1E4F25180], &qword_1EA843400, MEMORY[0x1E4F25180]);
            sub_1D78607E8(v59, v61);
            uint64_t v77 = v65;
            uint64_t v78 = v113;
LABEL_17:
            sub_1D7A9B818();
            (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v79, v78);
            sub_1D78D1F70(&qword_1EA843408, MEMORY[0x1E4F24FA0]);
            uint64_t v86 = sub_1D7A9BD78();
            uint64_t v87 = v63;
            uint64_t v89 = sub_1D78D1370(v86, v88);
            swift_bridgeObjectRelease();
            uint64_t v48 = (char *)sub_1D78D1EB0(v89);
            swift_release();
            sub_1D78607E8(v59, v66);
            (*(void (**)(char *, uint64_t))(v109 + 8))(v87, v77);
            break;
          case 2uLL:
            uint64_t v75 = *(void *)(v59 + 16);
            uint64_t v76 = *(void *)(v59 + 24);
            sub_1D7860790(v59, v61);
            swift_retain();
            swift_retain();
            sub_1D78D1234(v75, v76, v61 & 0x3FFFFFFFFFFFFFFFLL, v116, MEMORY[0x1E4F25180], &qword_1EA843400, MEMORY[0x1E4F25180]);
            swift_release();
            swift_release();
            sub_1D78607E8(v59, v61);
            unint64_t v66 = v61;
            uint64_t v77 = v65;
            uint64_t v78 = v113;
            uint64_t v79 = v116;
            goto LABEL_17;
          case 3uLL:
            *(void *)((char *)&v121 + 6) = 0;
            *(void *)&long long v121 = 0;
            goto LABEL_14;
          default:
            *(void *)&long long v121 = v59;
            WORD4(v121) = v61;
            BYTE10(v121) = BYTE2(v61);
            BYTE11(v121) = BYTE3(v61);
            BYTE12(v121) = BYTE4(v61);
            BYTE13(v121) = BYTE5(v61);
LABEL_14:
            uint64_t v79 = v116;
            uint64_t v78 = v113;
            sub_1D7A9B808();
            sub_1D78607E8(v59, v66);
            uint64_t v77 = v65;
            goto LABEL_17;
        }
      }
      else
      {
        sub_1D78D1F70(&qword_1EA8433F0, MEMORY[0x1E4F25190]);
        sub_1D7A9B828();
        unint64_t v70 = v61;
        uint64_t v71 = v112;
        switch(v61 >> 62)
        {
          case 1uLL:
            if (v59 >> 32 < (int)v59) {
              goto LABEL_33;
            }
            uint64_t v72 = v59;
            sub_1D7860790(v59, v61);
            uint64_t v74 = v114;
            sub_1D78D1234((int)v59, v59 >> 32, v61 & 0x3FFFFFFFFFFFFFFFLL, v114, MEMORY[0x1E4F25190], &qword_1EA8433F0, MEMORY[0x1E4F25190]);
LABEL_29:
            sub_1D78607E8(v72, v70);
            uint64_t v96 = v111;
            uint64_t v71 = v112;
            uint64_t v73 = v115;
            break;
          case 2uLL:
            uint64_t v72 = v59;
            uint64_t v95 = *(void *)(v59 + 16);
            uint64_t v94 = *(void *)(v59 + 24);
            sub_1D7860790(v59, v70);
            swift_retain();
            swift_retain();
            uint64_t v74 = v114;
            sub_1D78D1234(v95, v94, v70 & 0x3FFFFFFFFFFFFFFFLL, v114, MEMORY[0x1E4F25190], &qword_1EA8433F0, MEMORY[0x1E4F25190]);
            swift_release();
            swift_release();
            goto LABEL_29;
          case 3uLL:
            *(void *)((char *)&v121 + 6) = 0;
            *(void *)&long long v121 = 0;
            uint64_t v74 = v114;
            uint64_t v73 = v115;
            sub_1D7A9B808();
            uint64_t v72 = v59;
            goto LABEL_26;
          default:
            uint64_t v72 = v59;
            *(void *)&long long v121 = v59;
            WORD4(v121) = v61;
            BYTE10(v121) = BYTE2(v61);
            BYTE11(v121) = BYTE3(v61);
            BYTE12(v121) = BYTE4(v61);
            BYTE13(v121) = BYTE5(v61);
            uint64_t v74 = v114;
            uint64_t v73 = v115;
            sub_1D7A9B808();
LABEL_26:
            sub_1D78607E8(v59, v61);
            uint64_t v96 = v111;
            break;
        }
        sub_1D7A9B818();
        (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v74, v73);
        sub_1D78D1F70(&qword_1EA8433F8, MEMORY[0x1E4F24FB8]);
        uint64_t v97 = v106;
        uint64_t v98 = sub_1D7A9BD78();
        uint64_t v100 = sub_1D78D1370(v98, v99);
        swift_bridgeObjectRelease();
        uint64_t v48 = (char *)sub_1D78D1EB0(v100);
        swift_release();
        sub_1D78607E8(v72, v70);
        (*(void (**)(char *, uint64_t))(v71 + 8))(v96, v97);
      }
    }
    else
    {
      sub_1D78D1F70(&qword_1EA8424A0, MEMORY[0x1E4F25170]);
      sub_1D7A9B828();
      unint64_t v67 = v61;
      uint64_t v68 = v59;
      uint64_t v69 = v64;
      switch(v61 >> 62)
      {
        case 1uLL:
          if (v59 >> 32 < (int)v59) {
            goto LABEL_32;
          }
          sub_1D7860790(v59, v61);
          uint64_t v85 = (uint64_t)v105;
          sub_1D78D1234((int)v59, v59 >> 32, v61 & 0x3FFFFFFFFFFFFFFFLL, (uint64_t)v105, MEMORY[0x1E4F25170], &qword_1EA8424A0, MEMORY[0x1E4F25170]);
          sub_1D78607E8(v59, v61);
          uint64_t v83 = v103;
          uint64_t v82 = v104;
          break;
        case 2uLL:
          uint64_t v80 = *(void *)(v59 + 16);
          uint64_t v81 = *(void *)(v59 + 24);
          sub_1D7860790(v68, v67);
          swift_retain();
          swift_retain();
          sub_1D78D1234(v80, v81, v67 & 0x3FFFFFFFFFFFFFFFLL, (uint64_t)v105, MEMORY[0x1E4F25170], &qword_1EA8424A0, MEMORY[0x1E4F25170]);
          swift_release();
          swift_release();
          sub_1D78607E8(v68, v67);
          uint64_t v83 = v103;
          uint64_t v82 = v104;
          uint64_t v84 = v102;
          uint64_t v85 = (uint64_t)v105;
          goto LABEL_23;
        case 3uLL:
          *(void *)((char *)&v121 + 6) = 0;
          *(void *)&long long v121 = 0;
          goto LABEL_19;
        default:
          *(void *)&long long v121 = v59;
          WORD4(v121) = v61;
          BYTE10(v121) = BYTE2(v61);
          BYTE11(v121) = BYTE3(v61);
          BYTE12(v121) = BYTE4(v61);
          BYTE13(v121) = BYTE5(v61);
LABEL_19:
          uint64_t v82 = v104;
          uint64_t v85 = (uint64_t)v105;
          sub_1D7A9B808();
          sub_1D78607E8(v59, v61);
          uint64_t v83 = v103;
          break;
      }
      uint64_t v84 = v102;
LABEL_23:
      sub_1D7A9B818();
      (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v85, v82);
      sub_1D78D1F70(&qword_1EA8424A8, MEMORY[0x1E4F24F80]);
      uint64_t v90 = sub_1D7A9BD78();
      uint64_t v92 = v84;
      uint64_t v93 = sub_1D78D1370(v90, v91);
      swift_bridgeObjectRelease();
      uint64_t v48 = (char *)sub_1D78D1EB0(v93);
      swift_release();
      sub_1D78607E8(v68, v67);
      (*(void (**)(char *, uint64_t))(v69 + 8))(v92, v83);
    }
  }
  return v48;
}

uint64_t ISO18013DigestAlgorithm.rawValue.getter()
{
  return *(void *)&aSha256_2[8 * *v0];
}

uint64_t sub_1D78D0C88(uint64_t a1, uint64_t a2)
{
  v8[3] = MEMORY[0x1E4FBB2B8];
  v8[4] = MEMORY[0x1E4F27EF0];
  v8[0] = a1;
  v8[1] = a2;
  BOOL v2 = __swift_project_boxed_opaque_existential_1(v8, MEMORY[0x1E4FBB2B8]);
  uint64_t v3 = (unsigned char *)*v2;
  if (*v2 && (v4 = (unsigned char *)v2[1], uint64_t v5 = v4 - v3, v4 != v3))
  {
    if (v5 <= 14)
    {
      uint64_t v6 = sub_1D7A7B1EC(v3, v4);
    }
    else if ((unint64_t)v5 >= 0x7FFFFFFF)
    {
      uint64_t v6 = sub_1D79329A4((uint64_t)v3, (uint64_t)v4);
    }
    else
    {
      uint64_t v6 = sub_1D7932A20((uint64_t)v3, (uint64_t)v4);
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v6;
}

uint64_t sub_1D78D0D44(uint64_t a1, unint64_t a2)
{
  v28[5] = *MEMORY[0x1E4F143B8];
  v28[3] = MEMORY[0x1E4F277C0];
  v28[4] = MEMORY[0x1E4F277B0];
  v28[0] = a1;
  v28[1] = a2;
  unsigned int v4 = __swift_project_boxed_opaque_existential_1(v28, MEMORY[0x1E4F277C0]);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  switch(v6 >> 62)
  {
    case 1uLL:
      if (v5 >> 32 < (int)v5)
      {
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      sub_1D7860790(a1, a2);
      sub_1D7860790(v5, v6);
      uint64_t v8 = (unsigned char *)sub_1D7A9AC98();
      if (v8)
      {
        uint64_t v9 = sub_1D7A9ACB8();
        if (!__OFSUB__((int)v5, v9))
        {
          v8 += (int)v5 - v9;
          goto LABEL_7;
        }
LABEL_31:
        __break(1u);
      }
LABEL_7:
      uint64_t v10 = sub_1D7A9ACA8();
      if (v10 >= (v5 >> 32) - (int)v5) {
        uint64_t v11 = (v5 >> 32) - (int)v5;
      }
      else {
        uint64_t v11 = v10;
      }
      uint64_t v12 = &v8[v11];
      if (v8) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 0;
      }
      sub_1D793284C(v8, v13, &v27);
      sub_1D78607E8(v5, v6);
LABEL_27:
      sub_1D78607E8(a1, a2);
      uint64_t v24 = v27;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
      return v24;
    case 2uLL:
      uint64_t v14 = *(void *)(v5 + 16);
      uint64_t v15 = *(void *)(v5 + 24);
      sub_1D7860790(a1, a2);
      swift_retain();
      swift_retain();
      uint64_t v16 = (unsigned char *)sub_1D7A9AC98();
      if (!v16) {
        goto LABEL_17;
      }
      uint64_t v17 = sub_1D7A9ACB8();
      if (__OFSUB__(v14, v17)) {
        goto LABEL_30;
      }
      v16 += v14 - v17;
LABEL_17:
      BOOL v18 = __OFSUB__(v15, v14);
      uint64_t v19 = v15 - v14;
      if (v18) {
        goto LABEL_29;
      }
      uint64_t v20 = sub_1D7A9ACA8();
      if (v20 >= v19) {
        uint64_t v21 = v19;
      }
      else {
        uint64_t v21 = v20;
      }
      uint64_t v22 = &v16[v21];
      if (v16) {
        uint64_t v23 = v22;
      }
      else {
        uint64_t v23 = 0;
      }
      sub_1D793284C(v16, v23, &v27);
      swift_release();
      swift_release();
      goto LABEL_27;
    case 3uLL:
      memset(v26, 0, 14);
      sub_1D7860790(a1, a2);
      uint64_t v7 = v26;
      goto LABEL_26;
    default:
      v26[0] = *v4;
      LOWORD(v26[1]) = v6;
      BYTE2(v26[1]) = BYTE2(v6);
      BYTE3(v26[1]) = BYTE3(v6);
      BYTE4(v26[1]) = BYTE4(v6);
      BYTE5(v26[1]) = BYTE5(v6);
      sub_1D7860790(a1, a2);
      uint64_t v7 = (char *)v26 + BYTE6(v6);
LABEL_26:
      sub_1D793284C(v26, v7, &v27);
      goto LABEL_27;
  }
}

CoreIDVShared::ISO18013DigestAlgorithm_optional __swiftcall ISO18013DigestAlgorithm.init(rawValue:)(Swift::String rawValue)
{
  BOOL v2 = v1;
  unint64_t v3 = sub_1D7A9D058();
  result.SecCertificateRef value = swift_bridgeObjectRelease();
  char v5 = 3;
  if (v3 < 3) {
    char v5 = v3;
  }
  *BOOL v2 = v5;
  return result;
}

uint64_t sub_1D78D1054(char *a1, char *a2)
{
  return sub_1D79960CC(*a1, *a2);
}

uint64_t sub_1D78D1060()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D78D10BC()
{
  sub_1D7A9C0B8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D78D10FC()
{
  return sub_1D7A9D628();
}

CoreIDVShared::ISO18013DigestAlgorithm_optional sub_1D78D1154(Swift::String *a1)
{
  return ISO18013DigestAlgorithm.init(rawValue:)(*a1);
}

void sub_1D78D1160(void *a1@<X8>)
{
  *a1 = *(void *)&aSha256_2[8 * *v1];
  a1[1] = 0xE700000000000000;
}

uint64_t sub_1D78D117C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1D78D1234(a1, a2, a3, a4, MEMORY[0x1E4F25170], &qword_1EA8424A0, MEMORY[0x1E4F25170]);
}

uint64_t sub_1D78D11D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1D78D1234(a1, a2, a3, a4, MEMORY[0x1E4F25180], &qword_1EA843400, MEMORY[0x1E4F25180]);
}

uint64_t sub_1D78D1234(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), unint64_t *a6, void (*a7)(uint64_t))
{
  uint64_t result = sub_1D7A9AC98();
  if (!result || (uint64_t result = sub_1D7A9ACB8(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      sub_1D7A9ACA8();
      a5(0);
      sub_1D78D1F70(a6, a7);
      return sub_1D7A9B808();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1D78D1314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1D78D1234(a1, a2, a3, a4, MEMORY[0x1E4F25190], &qword_1EA8433F0, MEMORY[0x1E4F25190]);
}

uint64_t sub_1D78D1370(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  unint64_t v3 = (void *)MEMORY[0x1E4FBC860];
  if (v2 != a2)
  {
    if (v2 > a2)
    {
      uint64_t v5 = a2;
      if (a2 < 0)
      {
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
      if (!v2)
      {
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      uint64_t v6 = result;
      uint64_t result = swift_bridgeObjectRetain();
      size_t v4 = 0;
      uint64_t v7 = v3 + 4;
      while (1)
      {
        char v8 = *(unsigned char *)(v6 + v5 + 32);
        if (!v4)
        {
          unint64_t v9 = v3[3];
          if ((uint64_t)((v9 >> 1) + 0x4000000000000000) < 0) {
            goto LABEL_29;
          }
          int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
          if (v10 <= 1) {
            uint64_t v11 = 1;
          }
          else {
            uint64_t v11 = v10;
          }
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF9D80);
          uint64_t v12 = (void *)swift_allocObject();
          size_t v13 = 2 * _swift_stdlib_malloc_size(v12) - 64;
          v12[2] = v11;
          v12[3] = v13;
          unint64_t v14 = (unint64_t)(v12 + 4);
          size_t v15 = v3[3] >> 1;
          if (v3[2])
          {
            if (v12 != v3 || v14 >= (unint64_t)v3 + v15 + 32) {
              memmove(v12 + 4, v3 + 4, v15);
            }
            v3[2] = 0;
          }
          uint64_t v7 = (unsigned char *)(v14 + v15);
          size_t v4 = (v13 >> 1) - v15;
          uint64_t result = swift_release();
          unint64_t v3 = v12;
        }
        BOOL v17 = __OFSUB__(v4--, 1);
        if (v17) {
          break;
        }
        ++v5;
        *v7++ = v8;
        if (v2 == v5)
        {
          uint64_t result = swift_bridgeObjectRelease();
          goto LABEL_24;
        }
      }
      __break(1u);
LABEL_29:
      __break(1u);
    }
    __break(1u);
    goto LABEL_31;
  }
  size_t v4 = 0;
LABEL_24:
  unint64_t v18 = v3[3];
  if (v18 < 2) {
    return (uint64_t)v3;
  }
  unint64_t v19 = v18 >> 1;
  BOOL v17 = __OFSUB__(v19, v4);
  unint64_t v20 = v19 - v4;
  if (!v17)
  {
    v3[2] = v20;
    return (uint64_t)v3;
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_1D78D14E0(uint64_t result, int64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  uint64_t v6 = 0;
  uint64_t v7 = 32;
  int64_t v8 = result;
  while (1)
  {
    BOOL v9 = v8 <= a2;
    if (a3 > 0) {
      BOOL v9 = v8 >= a2;
    }
    if (v9) {
      break;
    }
    BOOL v10 = __OFADD__(v8, a3);
    v8 += a3;
    if (v10) {
      int64_t v8 = (v8 >> 63) ^ 0x8000000000000000;
    }
    v7 += 8;
    BOOL v10 = __OFADD__(v6++, 1);
    if (v10)
    {
      __break(1u);
      break;
    }
  }
  if (v6 > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA843018);
    uint64_t v11 = (int64_t *)swift_allocObject();
    uint64_t result = _swift_stdlib_malloc_size(v11);
    uint64_t v12 = result - 32;
    if (result < 32) {
      uint64_t v12 = result - 25;
    }
    uint64_t v13 = v12 >> 3;
    v11[2] = v6;
    v11[3] = 2 * v13;
    unint64_t v14 = v11 + 4;
    uint64_t v15 = v13 & 0x7FFFFFFFFFFFFFFFLL;
LABEL_15:
    v15 -= v6;
    while (1)
    {
      BOOL v16 = v5 <= a2;
      if (a3 > 0) {
        BOOL v16 = v5 >= a2;
      }
      if (v16) {
        break;
      }
      if (__OFADD__(v5, a3)) {
        int64_t v17 = ((v5 + a3) >> 63) ^ 0x8000000000000000;
      }
      else {
        int64_t v17 = v5 + a3;
      }
      *v14++ = v5;
      uint64_t v5 = v17;
      if (!--v6) {
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  uint64_t v11 = (int64_t *)MEMORY[0x1E4FBC860];
  unint64_t v14 = (int64_t *)(MEMORY[0x1E4FBC860] + 32);
  uint64_t v15 = *(void *)(MEMORY[0x1E4FBC860] + 24) >> 1;
  if (v6) {
    goto LABEL_15;
  }
  int64_t v17 = result;
LABEL_23:
  BOOL v18 = v17 <= a2;
  if (a3 > 0) {
    BOOL v18 = v17 >= a2;
  }
  if (!v18)
  {
    uint64_t v19 = (a3 >> 63) ^ 0x7FFFFFFFFFFFFFFFLL;
    do
    {
      int64_t v20 = v17 + a3;
      if (__OFADD__(v17, a3))
      {
        int64_t v20 = v19;
        if (!v15) {
          goto LABEL_32;
        }
        int64_t v20 = v19;
      }
      else if (!v15)
      {
LABEL_32:
        unint64_t v21 = v11[3];
        if ((uint64_t)((v21 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_58;
        }
        int64_t v22 = v21 & 0xFFFFFFFFFFFFFFFELL;
        if (v22 <= 1) {
          uint64_t v23 = 1;
        }
        else {
          uint64_t v23 = v22;
        }
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EA843018);
        uint64_t v24 = (int64_t *)swift_allocObject();
        int64_t v25 = _swift_stdlib_malloc_size(v24);
        uint64_t v26 = v25 - 32;
        if (v25 < 32) {
          uint64_t v26 = v25 - 25;
        }
        uint64_t v27 = v26 >> 3;
        v24[2] = v23;
        v24[3] = 2 * (v26 >> 3);
        unint64_t v28 = (unint64_t)(v24 + 4);
        unint64_t v29 = (unint64_t)v11[3] >> 1;
        if (v11[2])
        {
          if (v24 != v11 || v28 >= (unint64_t)&v11[v29 + 4]) {
            memmove(v24 + 4, v11 + 4, 8 * v29);
          }
          v11[2] = 0;
        }
        unint64_t v14 = (int64_t *)(v28 + 8 * v29);
        uint64_t v15 = (v27 & 0x7FFFFFFFFFFFFFFFLL) - v29;
        uint64_t result = swift_release();
        uint64_t v11 = v24;
        uint64_t v19 = (a3 >> 63) ^ 0x7FFFFFFFFFFFFFFFLL;
      }
      BOOL v10 = __OFSUB__(v15--, 1);
      if (v10) {
        goto LABEL_57;
      }
      *v14++ = v17;
      BOOL v31 = v20 <= a2;
      if (a3 > 0) {
        BOOL v31 = v20 >= a2;
      }
      int64_t v17 = v20;
    }
    while (!v31);
  }
  unint64_t v32 = v11[3];
  if (v32 < 2) {
    return (uint64_t)v11;
  }
  unint64_t v33 = v32 >> 1;
  BOOL v10 = __OFSUB__(v33, v15);
  unint64_t v34 = v33 - v15;
  if (!v10)
  {
    v11[2] = v34;
    return (uint64_t)v11;
  }
LABEL_59:
  __break(1u);
  return result;
}

uint64_t sub_1D78D1764(uint64_t result, uint64_t a2, void (*a3)(void *__return_ptr, _OWORD *))
{
  uint64_t v4 = result;
  unint64_t v5 = *(void *)(result + 16);
  unint64_t v6 = *(void *)(a2 + 16);
  if (v6 >= v5) {
    uint64_t v7 = *(void *)(result + 16);
  }
  else {
    uint64_t v7 = *(void *)(a2 + 16);
  }
  if (v7)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA843420);
    int64_t v8 = (void *)swift_allocObject();
    uint64_t v9 = (uint64_t)(_swift_stdlib_malloc_size(v8) - 32) / 72;
    v8[2] = v7;
    v8[3] = 2 * v9;
    unint64_t v33 = v8;
    uint64_t v28 = v9 & 0x7FFFFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = swift_retain();
    uint64_t v10 = 0;
    uint64_t v29 = -v7;
    uint64_t v11 = (long long *)(a2 + 48);
    uint64_t v12 = v4 + 40;
    uint64_t v13 = 4;
    unint64_t v30 = v6;
    unint64_t v31 = v5;
    while (v5 + v10)
    {
      if (!(v6 + v10)) {
        goto LABEL_19;
      }
      unint64_t v14 = &v33[v13];
      uint64_t v15 = *(void *)(v12 + 32);
      unint64_t v16 = *(void *)(v12 + 40);
      uint64_t v35 = *(void *)(v12 + 24);
      long long v34 = *(_OWORD *)(v12 + 8);
      uint64_t v18 = *(void *)(v12 - 8);
      uint64_t v17 = *(void *)v12;
      long long v19 = *v11;
      v37[0] = *(v11 - 1);
      v37[1] = v19;
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      sub_1D7860790(v15, v16);
      swift_unknownObjectRetain();
      a3(v36, v37);
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v20 = v36[0];
      uint64_t v21 = v36[1];
      *unint64_t v14 = v18;
      v14[1] = v17;
      *((_OWORD *)v14 + 1) = v34;
      v14[4] = v35;
      void v14[5] = v15;
      --v10;
      v14[6] = v16;
      v14[7] = v20;
      v14[8] = v21;
      unint64_t v6 = v30;
      unint64_t v5 = v31;
      v13 += 9;
      v11 += 2;
      v12 += 56;
      if (v29 == v10)
      {
        uint64_t v22 = v28 + v10;
        uint64_t v23 = v33;
        goto LABEL_10;
      }
    }
    goto LABEL_18;
  }
  uint64_t v23 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v22 = *(void *)(MEMORY[0x1E4FBC860] + 24) >> 1;
  if (v5)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = swift_retain();
    if (v5 <= v6)
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
LABEL_10:
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
  }
  unint64_t v24 = v23[3];
  if (v24 < 2) {
    return (uint64_t)v23;
  }
  unint64_t v25 = v24 >> 1;
  BOOL v26 = __OFSUB__(v25, v22);
  uint64_t v27 = v25 - v22;
  if (!v26)
  {
    _OWORD v23[2] = v27;
    return (uint64_t)v23;
  }
LABEL_20:
  __break(1u);
  return result;
}

void *sub_1D78D19C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA843428);
  v19[3] = v8;
  _OWORD v19[4] = sub_1D7871DDC((unint64_t *)&unk_1EA843430, &qword_1EA843428);
  uint64_t v9 = (void *)swift_allocObject();
  v19[0] = v9;
  v9[2] = a1;
  v9[3] = a2;
  _OWORD v9[4] = a3;
  v9[5] = a4;
  uint64_t result = __swift_project_boxed_opaque_existential_1(v19, v8);
  uint64_t v11 = result[2];
  uint64_t v12 = result[3] >> 1;
  BOOL v13 = __OFSUB__(v12, v11);
  uint64_t v14 = v12 - v11;
  if (v13)
  {
    __break(1u);
  }
  else
  {
    uint64_t v15 = (unsigned char *)(result[1] + v11);
    unint64_t v16 = &v15[v14];
    swift_unknownObjectRetain();
    sub_1D793284C(v15, v16, &v18);
    uint64_t v17 = v18;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    return (void *)v17;
  }
  return result;
}

uint64_t sub_1D78D1AC8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int64_t v6 = a4 >> 1;
  uint64_t result = MEMORY[0x1E4FBC860];
  if (a4 >> 1 == a3)
  {
    uint64_t v4 = 0;
    goto LABEL_52;
  }
  char v8 = a4;
  uint64_t v9 = a3;
  uint64_t v45 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v43 = a1;
  uint64_t result = swift_unknownObjectRetain();
  if (v6 > v9)
  {
    uint64_t v4 = 0;
    uint64_t v41 = v8 & 1;
    uint64_t v42 = a2 + 112;
    uint64_t v11 = MEMORY[0x1E4FBC860] + 32;
    uint64_t v44 = a2;
    do
    {
      if (v6 <= v9)
      {
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
        return result;
      }
      uint64_t v12 = (uint64_t *)(a2 + 96 * v9);
      uint64_t v13 = *v12;
      char v14 = *((unsigned char *)v12 + 8);
      uint64_t v15 = v9 + 1;
      long long v50 = *((_OWORD *)v12 + 3);
      long long v51 = *((_OWORD *)v12 + 2);
      char v49 = *((unsigned char *)v12 + 24);
      if (v49)
      {
        uint64_t v16 = v12[2];
        uint64_t v17 = v6;
        if (v15 != v6)
        {
          uint64_t v18 = (void *)(v42 + 96 * v9);
          uint64_t v17 = v9 + 1;
          do
          {
            if (v17 >= v6)
            {
LABEL_57:
              __break(1u);
LABEL_58:
              __break(1u);
              goto LABEL_59;
            }
            if (v16 >= *v18) {
              goto LABEL_14;
            }
            uint64_t v19 = v17 + 1;
            if (__OFADD__(v17, 1)) {
              goto LABEL_58;
            }
            ++v17;
            v18 += 12;
          }
          while (v19 != v6);
          uint64_t v17 = v6;
LABEL_14:
          if (v17 <= v9) {
            goto LABEL_61;
          }
          if (v17 < 0) {
            goto LABEL_62;
          }
        }
        uint64_t v20 = v17 - v15;
        if (__OFSUB__(v17, v15)) {
          goto LABEL_63;
        }
        if (v20 < 0) {
          goto LABEL_64;
        }
        uint64_t v21 = v6 - v15;
        if (__OFSUB__(v6, v15)) {
          goto LABEL_65;
        }
        char v46 = v14;
        uint64_t v22 = v13;
        if (!v20 || v21 < 0 || (uint64_t v23 = v6, v21 >= v20))
        {
          uint64_t v23 = v17;
          if (__OFADD__(v15, v20)) {
            goto LABEL_69;
          }
          if (v6 < v17) {
            goto LABEL_66;
          }
        }
        if (v23 <= v9) {
          goto LABEL_67;
        }
        if (v15 != v17)
        {
          if (v15 >= v17) {
            goto LABEL_70;
          }
          unint64_t v24 = (uint64_t *)(v42 + 96 * v9);
          do
          {
            uint64_t v25 = *v24;
            v24 += 12;
            if (v16 >= v25)
            {
              __break(1u);
              goto LABEL_57;
            }
            --v20;
          }
          while (v20);
          if (*(void *)(a2 + 96 * v15 + 16) != v16 + 1) {
            goto LABEL_71;
          }
        }
        uint64_t v48 = v41 | (2 * v17);
        uint64_t v26 = v43;
        uint64_t result = swift_unknownObjectRetain();
        uint64_t v9 = v23;
        uint64_t v47 = a2;
        uint64_t v13 = v22;
        char v14 = v46;
        if (v4)
        {
LABEL_43:
          uint64_t result = swift_unknownObjectRetain();
          BOOL v37 = __OFSUB__(v4--, 1);
          if (v37) {
            goto LABEL_60;
          }
          goto LABEL_48;
        }
      }
      else
      {
        uint64_t v26 = v12[8];
        if (!v26) {
          goto LABEL_73;
        }
        uint64_t v36 = v12[10];
        uint64_t v47 = v12[9];
        uint64_t v48 = v12[11];
        uint64_t result = swift_unknownObjectRetain();
        uint64_t v16 = 0;
        ++v9;
        uint64_t v15 = v36;
        a2 = v44;
        if (v4) {
          goto LABEL_43;
        }
      }
      unint64_t v27 = *((void *)v45 + 3);
      if ((uint64_t)((v27 >> 1) + 0x4000000000000000) < 0) {
        goto LABEL_68;
      }
      int64_t v28 = v27 & 0xFFFFFFFFFFFFFFFELL;
      if (v28 <= 1) {
        uint64_t v29 = 1;
      }
      else {
        uint64_t v29 = v28;
      }
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA843418);
      unint64_t v30 = (char *)swift_allocObject();
      uint64_t v31 = (uint64_t)(_swift_stdlib_malloc_size(v30) - 32) / 96;
      *((void *)v30 + 2) = v29;
      *((void *)v30 + 3) = 2 * v31;
      unint64_t v32 = v30 + 32;
      uint64_t v33 = *((void *)v45 + 3) >> 1;
      uint64_t v11 = (uint64_t)&v30[96 * v33 + 32];
      uint64_t v34 = (v31 & 0x7FFFFFFFFFFFFFFFLL) - v33;
      if (*((void *)v45 + 2))
      {
        uint64_t v35 = v45 + 32;
        if (v30 != v45 || v32 >= &v35[96 * v33]) {
          memmove(v32, v35, 96 * v33);
        }
        swift_unknownObjectRetain();
        *((void *)v45 + 2) = 0;
      }
      else
      {
        swift_unknownObjectRetain();
      }
      uint64_t result = swift_release();
      uint64_t v45 = v30;
      a2 = v44;
      BOOL v37 = __OFSUB__(v34, 1);
      uint64_t v4 = v34 - 1;
      if (v37) {
        goto LABEL_60;
      }
LABEL_48:
      *(void *)uint64_t v11 = v13;
      *(unsigned char *)(v11 + 8) = v14;
      *(void *)(v11 + 16) = v26;
      *(void *)(v11 + 24) = v47;
      *(void *)(v11 + 32) = v15;
      *(void *)(v11 + 40) = v48;
      *(void *)(v11 + 48) = v16;
      *(unsigned char *)(v11 + 56) = v49 ^ 1;
      *(_OWORD *)(v11 + 64) = v51;
      *(_OWORD *)(v11 + 80) = v50;
      if (v9 == v6) {
        goto LABEL_51;
      }
      v11 += 96;
    }
    while (v9 < v6);
  }
  __break(1u);
LABEL_51:
  swift_unknownObjectRelease();
  uint64_t result = (uint64_t)v45;
LABEL_52:
  unint64_t v38 = *(void *)(result + 24);
  if (v38 >= 2)
  {
    unint64_t v39 = v38 >> 1;
    BOOL v37 = __OFSUB__(v39, v4);
    uint64_t v40 = v39 - v4;
    if (v37) {
      goto LABEL_72;
    }
    *(void *)(result + 16) = v40;
  }
  return result;
}

uint64_t sub_1D78D1EB0(uint64_t a1)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8424D0);
  uint64_t v10 = sub_1D7871DDC(&qword_1EA8424D8, &qword_1EA8424D0);
  v8[0] = a1;
  uint64_t v2 = __swift_project_boxed_opaque_existential_1(v8, v9);
  unint64_t v3 = (unsigned char *)(*v2 + 32);
  uint64_t v4 = &v3[*(void *)(*v2 + 16)];
  swift_bridgeObjectRetain();
  sub_1D793284C(v3, v4, &v7);
  uint64_t v5 = v7;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v5;
}

uint64_t sub_1D78D1F70(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1D78D1FBC()
{
  unint64_t result = qword_1EA843410;
  if (!qword_1EA843410)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA843410);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ISO18013DigestAlgorithm(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D78D20DCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ISO18013DigestAlgorithm()
{
  return &type metadata for ISO18013DigestAlgorithm;
}

uint64_t sub_1D78D2114()
{
  swift_unknownObjectRelease();
  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t static ImageQualityMetrics.supportsSecureCoding.getter()
{
  return byte_1EA843440;
}

uint64_t static ImageQualityMetrics.supportsSecureCoding.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  byte_1EA843440 = a1;
  return result;
}

uint64_t (*static ImageQualityMetrics.supportsSecureCoding.modify())()
{
  return j_j__swift_endAccess;
}

unint64_t sub_1D78D22BC()
{
  return sub_1D78D2C50(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_blurriness);
}

uint64_t sub_1D78D22C8(uint64_t a1)
{
  return sub_1D78D2CB0(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_blurriness);
}

uint64_t (*sub_1D78D22D4())()
{
  return j_j__swift_endAccess;
}

unint64_t sub_1D78D2330()
{
  return sub_1D78D2C50(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_exposure);
}

uint64_t sub_1D78D233C(uint64_t a1)
{
  return sub_1D78D2CB0(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_exposure);
}

uint64_t (*sub_1D78D2348())()
{
  return j_j__swift_endAccess;
}

unint64_t sub_1D78D23A4()
{
  return sub_1D78D2C50(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_cardDistortion);
}

uint64_t sub_1D78D23B0(uint64_t a1)
{
  return sub_1D78D2CB0(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_cardDistortion);
}

uint64_t (*sub_1D78D23BC())()
{
  return j_j__swift_endAccess;
}

unint64_t sub_1D78D2418()
{
  return sub_1D78D2C50(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceToImageRatio);
}

uint64_t sub_1D78D2424(uint64_t a1)
{
  return sub_1D78D2CB0(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceToImageRatio);
}

uint64_t (*sub_1D78D2430())()
{
  return j_j__swift_endAccess;
}

unint64_t sub_1D78D248C()
{
  return sub_1D78D2C50(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceCenteredRatio);
}

uint64_t sub_1D78D2498(uint64_t a1)
{
  return sub_1D78D2CB0(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceCenteredRatio);
}

uint64_t (*sub_1D78D24A4())()
{
  return j_j__swift_endAccess;
}

unint64_t sub_1D78D2500()
{
  return sub_1D78D2C50(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headPitch);
}

uint64_t sub_1D78D250C(uint64_t a1)
{
  return sub_1D78D2CB0(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headPitch);
}

uint64_t (*sub_1D78D2518())()
{
  return j_j__swift_endAccess;
}

unint64_t sub_1D78D2574()
{
  return sub_1D78D2C50(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headRoll);
}

uint64_t sub_1D78D2580(uint64_t a1)
{
  return sub_1D78D2CB0(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headRoll);
}

uint64_t (*sub_1D78D258C())()
{
  return j_j__swift_endAccess;
}

unint64_t sub_1D78D25E8()
{
  return sub_1D78D2C50(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headYaw);
}

uint64_t sub_1D78D25F4(uint64_t a1)
{
  return sub_1D78D2CB0(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headYaw);
}

uint64_t (*sub_1D78D2600())()
{
  return j_j__swift_endAccess;
}

unint64_t sub_1D78D265C()
{
  return sub_1D78D2C50(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_blinkingConfidence);
}

uint64_t sub_1D78D2668(uint64_t a1)
{
  return sub_1D78D2CB0(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_blinkingConfidence);
}

uint64_t (*sub_1D78D2674())()
{
  return j_j__swift_endAccess;
}

unint64_t sub_1D78D26D0()
{
  return sub_1D78D2C50(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_prescriptionConfidence);
}

uint64_t sub_1D78D26DC(uint64_t a1)
{
  return sub_1D78D2CB0(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_prescriptionConfidence);
}

uint64_t (*sub_1D78D26E8())()
{
  return j_j__swift_endAccess;
}

unint64_t sub_1D78D2744()
{
  return sub_1D78D2C50(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_sunglassesConfidence);
}

uint64_t sub_1D78D2750(uint64_t a1)
{
  return sub_1D78D2CB0(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_sunglassesConfidence);
}

uint64_t (*sub_1D78D275C())()
{
  return j_j__swift_endAccess;
}

unint64_t sub_1D78D27B8()
{
  return sub_1D78D2C50(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_facemaskConfidence);
}

uint64_t sub_1D78D27C4(uint64_t a1)
{
  return sub_1D78D2CB0(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_facemaskConfidence);
}

uint64_t (*sub_1D78D27D0())()
{
  return j_j__swift_endAccess;
}

unint64_t sub_1D78D282C()
{
  return sub_1D78D2C50(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headgearConfidence);
}

uint64_t sub_1D78D2838(uint64_t a1)
{
  return sub_1D78D2CB0(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headgearConfidence);
}

uint64_t (*sub_1D78D2844())()
{
  return j_j__swift_endAccess;
}

unint64_t sub_1D78D28A0()
{
  return sub_1D78D2C50(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_captureTime);
}

uint64_t sub_1D78D28AC(uint64_t a1)
{
  return sub_1D78D2CB0(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_captureTime);
}

uint64_t (*sub_1D78D28B8())()
{
  return j_j__swift_endAccess;
}

unint64_t sub_1D78D2914()
{
  return sub_1D78D2C50(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceCaptureQuality);
}

uint64_t sub_1D78D2920(uint64_t a1)
{
  return sub_1D78D2CB0(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceCaptureQuality);
}

uint64_t (*sub_1D78D292C())()
{
  return j__swift_endAccess;
}

unint64_t sub_1D78D298C()
{
  return sub_1D78D2C50(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentSize);
}

uint64_t sub_1D78D2998(uint64_t a1)
{
  return sub_1D78D2CB0(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentSize);
}

uint64_t (*sub_1D78D29A4())()
{
  return j_j__swift_endAccess;
}

unint64_t sub_1D78D2A00()
{
  return sub_1D78D2C50(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentRotation);
}

uint64_t sub_1D78D2A0C(uint64_t a1)
{
  return sub_1D78D2CB0(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentRotation);
}

uint64_t (*sub_1D78D2A18())()
{
  return j_j__swift_endAccess;
}

unint64_t sub_1D78D2A74()
{
  return sub_1D78D2C50(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentSkew);
}

uint64_t sub_1D78D2A80(uint64_t a1)
{
  return sub_1D78D2CB0(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentSkew);
}

uint64_t (*sub_1D78D2A8C())()
{
  return j_j__swift_endAccess;
}

unint64_t sub_1D78D2AE8()
{
  return sub_1D78D2C50(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_leftDrift);
}

uint64_t sub_1D78D2AF4(uint64_t a1)
{
  return sub_1D78D2CB0(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_leftDrift);
}

uint64_t (*sub_1D78D2B00())()
{
  return j_j__swift_endAccess;
}

unint64_t sub_1D78D2B5C()
{
  return sub_1D78D2C50(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rightDrift);
}

uint64_t sub_1D78D2B68(uint64_t a1)
{
  return sub_1D78D2CB0(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rightDrift);
}

uint64_t (*sub_1D78D2B74())()
{
  return j_j__swift_endAccess;
}

unint64_t sub_1D78D2BD0()
{
  return sub_1D78D2C50(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_upDrift);
}

uint64_t sub_1D78D2BDC(uint64_t a1)
{
  return sub_1D78D2CB0(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_upDrift);
}

uint64_t (*sub_1D78D2BE8())()
{
  return j_j__swift_endAccess;
}

unint64_t sub_1D78D2C44()
{
  return sub_1D78D2C50(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_downDrift);
}

unint64_t sub_1D78D2C50(void *a1)
{
  uint64_t v2 = (unsigned int *)(v1 + *a1);
  swift_beginAccess();
  return *v2 | ((unint64_t)*((unsigned __int8 *)v2 + 4) << 32);
}

uint64_t sub_1D78D2CA4(uint64_t a1)
{
  return sub_1D78D2CB0(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_downDrift);
}

uint64_t sub_1D78D2CB0(uint64_t a1, void *a2)
{
  uint64_t v4 = v2 + *a2;
  uint64_t result = swift_beginAccess();
  *(_DWORD *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 4) = BYTE4(a1) & 1;
  return result;
}

uint64_t (*sub_1D78D2D00())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1D78D2D5C()
{
  return sub_1D78D37F0();
}

uint64_t sub_1D78D2D68(uint64_t a1)
{
  return sub_1D78D3844(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceConfidences);
}

uint64_t (*sub_1D78D2D74())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1D78D2DD0()
{
  return sub_1D78D37F0();
}

uint64_t sub_1D78D2DDC(uint64_t a1)
{
  return sub_1D78D3844(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headgearConfidences);
}

uint64_t (*sub_1D78D2DE8())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1D78D2E44()
{
  return sub_1D78D8DF0(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_numFaces);
}

uint64_t sub_1D78D2E50(uint64_t a1, char a2)
{
  return sub_1D78D8E44(a1, a2, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_numFaces);
}

uint64_t (*sub_1D78D2E5C())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1D78D2EB8()
{
  return sub_1D78D8DF0(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_luxLevel);
}

uint64_t sub_1D78D2EC4(uint64_t a1, char a2)
{
  return sub_1D78D8E44(a1, a2, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_luxLevel);
}

uint64_t (*sub_1D78D2ED0())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1D78D2F2C()
{
  return sub_1D78D8DF0(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_skinTone);
}

uint64_t sub_1D78D2F38(uint64_t a1, char a2)
{
  return sub_1D78D8E44(a1, a2, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_skinTone);
}

uint64_t (*sub_1D78D2F44())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1D78D2FA0()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_pdf417Detected);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_1D78D2FE8(char a1)
{
  int v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_pdf417Detected);
  uint64_t result = swift_beginAccess();
  *int v3 = a1;
  return result;
}

uint64_t (*sub_1D78D3034())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1D78D3090()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isAAMVACompliant);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_1D78D30D8(char a1)
{
  int v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isAAMVACompliant);
  uint64_t result = swift_beginAccess();
  *int v3 = a1;
  return result;
}

uint64_t (*sub_1D78D3124())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1D78D3180()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isAutoCaptured);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_1D78D31C8(char a1)
{
  int v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isAutoCaptured);
  uint64_t result = swift_beginAccess();
  *int v3 = a1;
  return result;
}

uint64_t (*sub_1D78D3214())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1D78D3270()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isFlashEnabled);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_1D78D32B8(char a1)
{
  int v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isFlashEnabled);
  uint64_t result = swift_beginAccess();
  *int v3 = a1;
  return result;
}

uint64_t (*sub_1D78D3304())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1D78D3360()
{
  return sub_1D78D3BB0(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_issuerNumber);
}

uint64_t sub_1D78D336C(uint64_t a1, uint64_t a2)
{
  return sub_1D78D3C10(a1, a2, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_issuerNumber);
}

uint64_t (*sub_1D78D3378())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1D78D33D4()
{
  return sub_1D78D3BB0(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentType);
}

uint64_t sub_1D78D33E0(uint64_t a1, uint64_t a2)
{
  return sub_1D78D3C10(a1, a2, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentType);
}

uint64_t (*sub_1D78D33EC())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1D78D3448()
{
  return sub_1D78D37F0();
}

uint64_t sub_1D78D3454(uint64_t a1)
{
  return sub_1D78D3844(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_originalVertices);
}

uint64_t (*sub_1D78D3460())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1D78D34BC()
{
  return sub_1D78D37F0();
}

uint64_t sub_1D78D34C8(uint64_t a1)
{
  return sub_1D78D3844(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_targetVertices);
}

uint64_t (*sub_1D78D34D4())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1D78D3530()
{
  return sub_1D78D37F0();
}

uint64_t sub_1D78D353C(uint64_t a1)
{
  return sub_1D78D3844(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rectangleCorners);
}

uint64_t (*sub_1D78D3548())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1D78D35A4()
{
  return sub_1D78D37F0();
}

uint64_t sub_1D78D35B0(uint64_t a1)
{
  return sub_1D78D3844(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentCorners);
}

uint64_t (*sub_1D78D35BC())()
{
  return j_j__swift_endAccess;
}

void sub_1D78D3618(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  int v3 = (void **)(*a2 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_fuzzyMatchAssessment);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *int v3 = v2;
  id v5 = v2;
}

void *sub_1D78D367C()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_fuzzyMatchAssessment);
  swift_beginAccess();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void sub_1D78D36CC(void *a1)
{
  id v3 = (void **)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_fuzzyMatchAssessment);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *id v3 = a1;
}

uint64_t (*sub_1D78D3720())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1D78D377C(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = *a1;
  unsigned int v6 = (void *)(*a2 + *a5);
  swift_beginAccess();
  void *v6 = v5;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D78D37E4()
{
  return sub_1D78D37F0();
}

uint64_t sub_1D78D37F0()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D78D3838(uint64_t a1)
{
  return sub_1D78D3844(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_closestMatchAssessments);
}

uint64_t sub_1D78D3844(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(v2 + *a2);
  swift_beginAccess();
  void *v4 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1D78D3894())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1D78D38F0()
{
  return sub_1D78D3BB0(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_modelDecision);
}

uint64_t sub_1D78D38FC(uint64_t a1, uint64_t a2)
{
  return sub_1D78D3C10(a1, a2, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_modelDecision);
}

uint64_t (*sub_1D78D3908())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1D78D3964()
{
  return sub_1D78D3BB0(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_modelVersion);
}

uint64_t sub_1D78D3970(uint64_t a1, uint64_t a2)
{
  return sub_1D78D3C10(a1, a2, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_modelVersion);
}

uint64_t (*sub_1D78D397C())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1D78D39D8()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_exploration);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_1D78D3A20(char a1)
{
  id v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_exploration);
  uint64_t result = swift_beginAccess();
  *id v3 = a1;
  return result;
}

uint64_t (*sub_1D78D3A6C())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1D78D3AC8()
{
  return sub_1D78D8DF0(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rescanCount);
}

uint64_t sub_1D78D3AD4(uint64_t a1, char a2)
{
  return sub_1D78D8E44(a1, a2, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rescanCount);
}

uint64_t (*sub_1D78D3AE0())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1D78D3B3C(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v7 = (void *)(*a2 + *a5);
  swift_beginAccess();
  *uint64_t v7 = v6;
  v7[1] = v5;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D78D3BA4()
{
  return sub_1D78D3BB0(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_livenessChute);
}

uint64_t sub_1D78D3BB0(void *a1)
{
  uint64_t v2 = (uint64_t *)(v1 + *a1);
  swift_beginAccess();
  uint64_t v3 = *v2;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t sub_1D78D3C04(uint64_t a1, uint64_t a2)
{
  return sub_1D78D3C10(a1, a2, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_livenessChute);
}

uint64_t sub_1D78D3C10(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = (void *)(v3 + *a3);
  swift_beginAccess();
  void *v6 = a1;
  v6[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1D78D3C6C())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1D78D3CC8()
{
  return sub_1D78D8DF0(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_errorCode);
}

uint64_t sub_1D78D3CD4(uint64_t a1, char a2)
{
  return sub_1D78D8E44(a1, a2, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_errorCode);
}

uint64_t (*sub_1D78D3CE0())()
{
  return j_j__swift_endAccess;
}

id ImageQualityMetrics.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id ImageQualityMetrics.init()()
{
  id v1 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_blurriness];
  *(_DWORD *)id v1 = 0;
  v1[4] = 1;
  uint64_t v2 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_exposure];
  *(_DWORD *)uint64_t v2 = 0;
  v2[4] = 1;
  uint64_t v3 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_cardDistortion];
  *(_DWORD *)uint64_t v3 = 0;
  v3[4] = 1;
  uint64_t v4 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceToImageRatio];
  *(_DWORD *)uint64_t v4 = 0;
  v4[4] = 1;
  uint64_t v5 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceCenteredRatio];
  *(_DWORD *)uint64_t v5 = 0;
  v5[4] = 1;
  uint64_t v6 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headPitch];
  *(_DWORD *)uint64_t v6 = 0;
  v6[4] = 1;
  uint64_t v7 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headRoll];
  *(_DWORD *)uint64_t v7 = 0;
  v7[4] = 1;
  char v8 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headYaw];
  *(_DWORD *)char v8 = 0;
  v8[4] = 1;
  uint64_t v9 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_blinkingConfidence];
  *(_DWORD *)uint64_t v9 = 0;
  _OWORD v9[4] = 1;
  uint64_t v10 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_prescriptionConfidence];
  *(_DWORD *)uint64_t v10 = 0;
  v10[4] = 1;
  uint64_t v11 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_sunglassesConfidence];
  *(_DWORD *)uint64_t v11 = 0;
  v11[4] = 1;
  uint64_t v12 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_facemaskConfidence];
  *(_DWORD *)uint64_t v12 = 0;
  v12[4] = 1;
  uint64_t v13 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headgearConfidence];
  *(_DWORD *)uint64_t v13 = 0;
  _OWORD v13[4] = 1;
  char v14 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_captureTime];
  *(_DWORD *)char v14 = 0;
  v14[4] = 1;
  uint64_t v15 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceCaptureQuality];
  *(_DWORD *)uint64_t v15 = 0;
  v15[4] = 1;
  uint64_t v16 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentSize];
  *(_DWORD *)uint64_t v16 = 0;
  v16[4] = 1;
  uint64_t v17 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentRotation];
  *(_DWORD *)uint64_t v17 = 0;
  void v17[4] = 1;
  uint64_t v18 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentSkew];
  *(_DWORD *)uint64_t v18 = 0;
  v18[4] = 1;
  uint64_t v19 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_leftDrift];
  *(_DWORD *)uint64_t v19 = 0;
  _OWORD v19[4] = 1;
  uint64_t v20 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rightDrift];
  *(_DWORD *)uint64_t v20 = 0;
  v20[4] = 1;
  uint64_t v21 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_upDrift];
  *(_DWORD *)uint64_t v21 = 0;
  v21[4] = 1;
  uint64_t v22 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_downDrift];
  *(_DWORD *)uint64_t v22 = 0;
  v22[4] = 1;
  *(void *)&v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceConfidences] = 0;
  *(void *)&v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headgearConfidences] = 0;
  uint64_t v23 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_numFaces];
  *(void *)uint64_t v23 = 0;
  v23[8] = 1;
  unint64_t v24 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_luxLevel];
  *(void *)unint64_t v24 = 0;
  v24[8] = 1;
  uint64_t v25 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_skinTone];
  *(void *)uint64_t v25 = 0;
  v25[8] = 1;
  v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_pdf417Detected] = 2;
  v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isAAMVACompliant] = 2;
  v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isAutoCaptured] = 2;
  v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isFlashEnabled] = 2;
  uint64_t v26 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_issuerNumber];
  *uint64_t v26 = 0;
  v26[1] = 0;
  unint64_t v27 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentType];
  *unint64_t v27 = 0;
  v27[1] = 0;
  *(void *)&v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_originalVertices] = 0;
  *(void *)&v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_targetVertices] = 0;
  *(void *)&v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rectangleCorners] = 0;
  *(void *)&v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentCorners] = 0;
  *(void *)&v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_fuzzyMatchAssessment] = 0;
  *(void *)&v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_closestMatchAssessments] = 0;
  int64_t v28 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_modelDecision];
  *int64_t v28 = 0;
  v28[1] = 0;
  uint64_t v29 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_modelVersion];
  *uint64_t v29 = 0;
  v29[1] = 0;
  v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_exploration] = 2;
  unint64_t v30 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rescanCount];
  *(void *)unint64_t v30 = 0;
  v30[8] = 1;
  uint64_t v31 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_livenessChute];
  *uint64_t v31 = 0;
  v31[1] = 0;
  unint64_t v32 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_errorCode];
  *(void *)unint64_t v32 = 0;
  v32[8] = 1;
  v34.receiver = v0;
  v34.super_class = (Class)type metadata accessor for ImageQualityMetrics();
  return objc_msgSendSuper2(&v34, sel_init);
}

uint64_t type metadata accessor for ImageQualityMetrics()
{
  return self;
}

id ImageQualityMetrics.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  id v4 = sub_1D78D9BFC();

  return v4;
}

id ImageQualityMetrics.init(coder:)(void *a1)
{
  id v2 = sub_1D78D9BFC();

  return v2;
}

void sub_1D78D41A4(void *a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_blurriness;
  swift_beginAccess();
  uint64_t v4 = 0;
  if ((*(unsigned char *)(v3 + 4) & 1) == 0) {
    uint64_t v4 = sub_1D7A9C5B8();
  }
  uint64_t v5 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_encodeObject_forKey_, v4, v5);
  swift_unknownObjectRelease();

  uint64_t v6 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_exposure;
  swift_beginAccess();
  uint64_t v7 = 0;
  if ((*(unsigned char *)(v6 + 4) & 1) == 0) {
    uint64_t v7 = sub_1D7A9C5B8();
  }
  char v8 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_encodeObject_forKey_, v7, v8);
  swift_unknownObjectRelease();

  uint64_t v9 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_cardDistortion;
  swift_beginAccess();
  uint64_t v10 = 0;
  if ((*(unsigned char *)(v9 + 4) & 1) == 0) {
    uint64_t v10 = sub_1D7A9C5B8();
  }
  uint64_t v11 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_encodeObject_forKey_, v10, v11);
  swift_unknownObjectRelease();

  uint64_t v12 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceToImageRatio;
  swift_beginAccess();
  uint64_t v13 = 0;
  if ((*(unsigned char *)(v12 + 4) & 1) == 0) {
    uint64_t v13 = sub_1D7A9C5B8();
  }
  char v14 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_encodeObject_forKey_, v13, v14);
  swift_unknownObjectRelease();

  uint64_t v15 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceCenteredRatio;
  swift_beginAccess();
  uint64_t v16 = 0;
  if ((*(unsigned char *)(v15 + 4) & 1) == 0) {
    uint64_t v16 = sub_1D7A9C5B8();
  }
  uint64_t v17 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_encodeObject_forKey_, v16, v17);
  swift_unknownObjectRelease();

  uint64_t v18 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headPitch;
  swift_beginAccess();
  uint64_t v19 = 0;
  if ((*(unsigned char *)(v18 + 4) & 1) == 0) {
    uint64_t v19 = sub_1D7A9C5B8();
  }
  uint64_t v20 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_encodeObject_forKey_, v19, v20);
  swift_unknownObjectRelease();

  uint64_t v21 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headRoll;
  swift_beginAccess();
  uint64_t v22 = 0;
  if ((*(unsigned char *)(v21 + 4) & 1) == 0) {
    uint64_t v22 = sub_1D7A9C5B8();
  }
  uint64_t v23 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_encodeObject_forKey_, v22, v23);
  swift_unknownObjectRelease();

  uint64_t v24 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headYaw;
  swift_beginAccess();
  uint64_t v25 = 0;
  if ((*(unsigned char *)(v24 + 4) & 1) == 0) {
    uint64_t v25 = sub_1D7A9C5B8();
  }
  uint64_t v26 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_encodeObject_forKey_, v25, v26);
  swift_unknownObjectRelease();

  uint64_t v27 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_blinkingConfidence;
  swift_beginAccess();
  uint64_t v28 = 0;
  if ((*(unsigned char *)(v27 + 4) & 1) == 0) {
    uint64_t v28 = sub_1D7A9C5B8();
  }
  uint64_t v29 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_encodeObject_forKey_, v28, v29);
  swift_unknownObjectRelease();

  uint64_t v30 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_prescriptionConfidence;
  swift_beginAccess();
  uint64_t v31 = 0;
  if ((*(unsigned char *)(v30 + 4) & 1) == 0) {
    uint64_t v31 = sub_1D7A9C5B8();
  }
  unint64_t v32 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_encodeObject_forKey_, v31, v32);
  swift_unknownObjectRelease();

  uint64_t v33 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_sunglassesConfidence;
  swift_beginAccess();
  uint64_t v34 = 0;
  if ((*(unsigned char *)(v33 + 4) & 1) == 0) {
    uint64_t v34 = sub_1D7A9C5B8();
  }
  uint64_t v35 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_encodeObject_forKey_, v34, v35);
  swift_unknownObjectRelease();

  uint64_t v36 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_facemaskConfidence;
  swift_beginAccess();
  uint64_t v37 = 0;
  if ((*(unsigned char *)(v36 + 4) & 1) == 0) {
    uint64_t v37 = sub_1D7A9C5B8();
  }
  unint64_t v38 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_encodeObject_forKey_, v37, v38);
  swift_unknownObjectRelease();

  uint64_t v39 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headgearConfidence;
  swift_beginAccess();
  uint64_t v40 = 0;
  if ((*(unsigned char *)(v39 + 4) & 1) == 0) {
    uint64_t v40 = sub_1D7A9C5B8();
  }
  uint64_t v41 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_encodeObject_forKey_, v40, v41);
  swift_unknownObjectRelease();

  uint64_t v42 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_captureTime;
  swift_beginAccess();
  uint64_t v43 = 0;
  if ((*(unsigned char *)(v42 + 4) & 1) == 0) {
    uint64_t v43 = sub_1D7A9C5B8();
  }
  uint64_t v44 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_encodeObject_forKey_, v43, v44);
  swift_unknownObjectRelease();

  uint64_t v45 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceCaptureQuality;
  swift_beginAccess();
  uint64_t v46 = 0;
  if ((*(unsigned char *)(v45 + 4) & 1) == 0) {
    uint64_t v46 = sub_1D7A9C5B8();
  }
  uint64_t v47 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_encodeObject_forKey_, v46, v47);
  swift_unknownObjectRelease();

  uint64_t v48 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentSize;
  swift_beginAccess();
  uint64_t v49 = 0;
  if ((*(unsigned char *)(v48 + 4) & 1) == 0) {
    uint64_t v49 = sub_1D7A9C5B8();
  }
  long long v50 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_encodeObject_forKey_, v49, v50);
  swift_unknownObjectRelease();

  uint64_t v51 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentRotation;
  swift_beginAccess();
  uint64_t v52 = 0;
  if ((*(unsigned char *)(v51 + 4) & 1) == 0) {
    uint64_t v52 = sub_1D7A9C5B8();
  }
  uint64_t v53 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_encodeObject_forKey_, v52, v53);
  swift_unknownObjectRelease();

  uint64_t v54 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentSkew;
  swift_beginAccess();
  uint64_t v55 = 0;
  if ((*(unsigned char *)(v54 + 4) & 1) == 0) {
    uint64_t v55 = sub_1D7A9C5B8();
  }
  uint64_t v56 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_encodeObject_forKey_, v55, v56);
  swift_unknownObjectRelease();

  uint64_t v57 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_leftDrift;
  swift_beginAccess();
  uint64_t v58 = 0;
  if ((*(unsigned char *)(v57 + 4) & 1) == 0) {
    uint64_t v58 = sub_1D7A9C5B8();
  }
  uint64_t v59 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_encodeObject_forKey_, v58, v59);
  swift_unknownObjectRelease();

  uint64_t v60 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rightDrift;
  swift_beginAccess();
  uint64_t v61 = 0;
  if ((*(unsigned char *)(v60 + 4) & 1) == 0) {
    uint64_t v61 = sub_1D7A9C5B8();
  }
  uint64_t v62 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_encodeObject_forKey_, v61, v62);
  swift_unknownObjectRelease();

  uint64_t v63 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_upDrift;
  swift_beginAccess();
  uint64_t v64 = 0;
  if ((*(unsigned char *)(v63 + 4) & 1) == 0) {
    uint64_t v64 = sub_1D7A9C5B8();
  }
  uint64_t v65 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_encodeObject_forKey_, v64, v65);
  swift_unknownObjectRelease();

  uint64_t v66 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_downDrift;
  swift_beginAccess();
  uint64_t v67 = 0;
  if ((*(unsigned char *)(v66 + 4) & 1) == 0) {
    uint64_t v67 = sub_1D7A9C5B8();
  }
  uint64_t v68 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_encodeObject_forKey_, v67, v68);
  swift_unknownObjectRelease();

  uint64_t v69 = (void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceConfidences);
  swift_beginAccess();
  if (*v69)
  {
    swift_bridgeObjectRetain();
    uint64_t v70 = sub_1D7A9C2F8();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v70 = 0;
  }
  uint64_t v71 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_encodeObject_forKey_, v70, v71);
  swift_unknownObjectRelease();

  uint64_t v72 = (void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headgearConfidences);
  swift_beginAccess();
  if (*v72)
  {
    swift_bridgeObjectRetain();
    uint64_t v73 = sub_1D7A9C2F8();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v73 = 0;
  }
  uint64_t v74 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_encodeObject_forKey_, v73, v74);
  swift_unknownObjectRelease();

  uint64_t v75 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_numFaces;
  swift_beginAccess();
  uint64_t v76 = 0;
  if ((*(unsigned char *)(v75 + 8) & 1) == 0) {
    uint64_t v76 = sub_1D7A9C648();
  }
  uint64_t v77 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_encodeObject_forKey_, v76, v77);
  swift_unknownObjectRelease();

  uint64_t v78 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_luxLevel;
  swift_beginAccess();
  uint64_t v79 = 0;
  if ((*(unsigned char *)(v78 + 8) & 1) == 0) {
    uint64_t v79 = sub_1D7A9C648();
  }
  uint64_t v80 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_encodeObject_forKey_, v79, v80);
  swift_unknownObjectRelease();

  uint64_t v81 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_skinTone;
  swift_beginAccess();
  uint64_t v82 = 0;
  if ((*(unsigned char *)(v81 + 8) & 1) == 0) {
    uint64_t v82 = sub_1D7A9C648();
  }
  uint64_t v83 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_encodeObject_forKey_, v82, v83);
  swift_unknownObjectRelease();

  uint64_t v84 = (unsigned char *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_pdf417Detected);
  swift_beginAccess();
  uint64_t v85 = 0;
  if (*v84 != 2) {
    uint64_t v85 = sub_1D7A9C418();
  }
  uint64_t v86 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_encodeObject_forKey_, v85, v86);
  swift_unknownObjectRelease();

  uint64_t v87 = (unsigned char *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isAAMVACompliant);
  swift_beginAccess();
  uint64_t v88 = 0;
  if (*v87 != 2) {
    uint64_t v88 = sub_1D7A9C418();
  }
  uint64_t v89 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_encodeObject_forKey_, v88, v89);
  swift_unknownObjectRelease();

  uint64_t v90 = (unsigned char *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isAutoCaptured);
  swift_beginAccess();
  uint64_t v91 = 0;
  if (*v90 != 2) {
    uint64_t v91 = sub_1D7A9C418();
  }
  uint64_t v92 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_encodeObject_forKey_, v91, v92);
  swift_unknownObjectRelease();

  uint64_t v93 = (unsigned char *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isFlashEnabled);
  swift_beginAccess();
  uint64_t v94 = 0;
  if (*v93 != 2) {
    uint64_t v94 = sub_1D7A9C418();
  }
  uint64_t v95 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_encodeObject_forKey_, v94, v95);
  swift_unknownObjectRelease();

  uint64_t v96 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_issuerNumber;
  swift_beginAccess();
  if (*(void *)(v96 + 8))
  {
    swift_bridgeObjectRetain();
    uint64_t v97 = sub_1D7A9BF98();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v97 = 0;
  }
  uint64_t v98 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_encodeObject_forKey_, v97, v98);
  swift_unknownObjectRelease();

  uint64_t v99 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentType;
  swift_beginAccess();
  if (*(void *)(v99 + 8))
  {
    swift_bridgeObjectRetain();
    uint64_t v100 = sub_1D7A9BF98();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v100 = 0;
  }
  uint64_t v101 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_encodeObject_forKey_, v100, v101);
  swift_unknownObjectRelease();

  uint64_t v102 = (void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_originalVertices);
  swift_beginAccess();
  if (*v102)
  {
    type metadata accessor for IQPoint();
    swift_bridgeObjectRetain();
    uint64_t v103 = sub_1D7A9C2F8();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v103 = 0;
  }
  uint64_t v104 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_encodeObject_forKey_, v103, v104);
  swift_unknownObjectRelease();

  uint64_t v105 = (void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_targetVertices);
  swift_beginAccess();
  if (*v105)
  {
    type metadata accessor for IQPoint();
    swift_bridgeObjectRetain();
    uint64_t v106 = sub_1D7A9C2F8();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v106 = 0;
  }
  uint64_t v107 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_encodeObject_forKey_, v106, v107);
  swift_unknownObjectRelease();

  uint64_t v108 = (void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rectangleCorners);
  swift_beginAccess();
  if (*v108)
  {
    type metadata accessor for IQPoint();
    swift_bridgeObjectRetain();
    uint64_t v109 = sub_1D7A9C2F8();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v109 = 0;
  }
  uint64_t v110 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_encodeObject_forKey_, v109, v110);
  swift_unknownObjectRelease();

  uint64_t v111 = (void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentCorners);
  swift_beginAccess();
  if (*v111)
  {
    type metadata accessor for IQPoint();
    swift_bridgeObjectRetain();
    uint64_t v112 = sub_1D7A9C2F8();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v112 = 0;
  }
  uint64_t v113 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_encodeObject_forKey_, v112, v113);
  swift_unknownObjectRelease();

  uint64_t v114 = (id *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_fuzzyMatchAssessment);
  swift_beginAccess();
  id v115 = *v114;
  uint64_t v116 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_encodeObject_forKey_, v115, v116);

  int v117 = (void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_closestMatchAssessments);
  swift_beginAccess();
  if (*v117)
  {
    swift_bridgeObjectRetain();
    uint64_t v118 = sub_1D7A9C2F8();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v118 = 0;
  }
  uint64_t v119 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_encodeObject_forKey_, v118, v119);
  swift_unknownObjectRelease();

  uint64_t v120 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_modelDecision;
  swift_beginAccess();
  if (*(void *)(v120 + 8))
  {
    swift_bridgeObjectRetain();
    uint64_t v121 = sub_1D7A9BF98();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v121 = 0;
  }
  uint64_t v122 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_encodeObject_forKey_, v121, v122);
  swift_unknownObjectRelease();

  uint64_t v123 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_modelVersion;
  swift_beginAccess();
  if (*(void *)(v123 + 8))
  {
    swift_bridgeObjectRetain();
    uint64_t v124 = sub_1D7A9BF98();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v124 = 0;
  }
  uint64_t v125 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_encodeObject_forKey_, v124, v125);
  swift_unknownObjectRelease();

  uint64_t v126 = (unsigned char *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_exploration);
  swift_beginAccess();
  uint64_t v127 = 0;
  if (*v126 != 2) {
    uint64_t v127 = sub_1D7A9C418();
  }
  uint64_t v128 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_encodeObject_forKey_, v127, v128);
  swift_unknownObjectRelease();

  uint64_t v129 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rescanCount;
  swift_beginAccess();
  uint64_t v130 = 0;
  if ((*(unsigned char *)(v129 + 8) & 1) == 0) {
    uint64_t v130 = sub_1D7A9C648();
  }
  uint64_t v131 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_encodeObject_forKey_, v130, v131);
  swift_unknownObjectRelease();

  uint64_t v132 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_livenessChute;
  swift_beginAccess();
  if (*(void *)(v132 + 8))
  {
    swift_bridgeObjectRetain();
    uint64_t v133 = sub_1D7A9BF98();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v133 = 0;
  }
  uint64_t v134 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_encodeObject_forKey_, v133, v134);
  swift_unknownObjectRelease();

  uint64_t v135 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_errorCode;
  swift_beginAccess();
  uint64_t v136 = 0;
  if ((*(unsigned char *)(v135 + 8) & 1) == 0) {
    uint64_t v136 = sub_1D7A9C648();
  }
  uint64_t v137 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_encodeObject_forKey_, v136, v137);
  swift_unknownObjectRelease();
}

char *sub_1D78D58EC(uint64_t a1)
{
  uint64_t v3 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ImageQualityMetrics()), sel_init);
  if (a1)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    uint64_t v5 = qword_1EA8419C8 & ~v4;
    swift_retain();
    if (!v5)
    {
      uint64_t v6 = (int *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_blurriness);
      swift_beginAccess();
      int v7 = *v6;
      char v8 = *((unsigned char *)v6 + 4);
      uint64_t v9 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_blurriness];
      swift_beginAccess();
      *(_DWORD *)uint64_t v9 = v7;
      _OWORD v9[4] = v8;
    }
    if ((qword_1EA8419E8 & ~v4) == 0)
    {
      uint64_t v10 = (int *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_exposure);
      swift_beginAccess();
      int v11 = *v10;
      char v12 = *((unsigned char *)v10 + 4);
      uint64_t v13 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_exposure];
      swift_beginAccess();
      *(_DWORD *)uint64_t v13 = v11;
      _OWORD v13[4] = v12;
    }
    if ((qword_1EA841A08 & ~v4) == 0)
    {
      char v14 = (int *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_cardDistortion);
      swift_beginAccess();
      int v15 = *v14;
      char v16 = *((unsigned char *)v14 + 4);
      uint64_t v17 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_cardDistortion];
      swift_beginAccess();
      *(_DWORD *)uint64_t v17 = v15;
      void v17[4] = v16;
    }
    if ((qword_1EA841A28 & ~v4) == 0)
    {
      uint64_t v18 = (int *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceToImageRatio);
      swift_beginAccess();
      int v19 = *v18;
      char v20 = *((unsigned char *)v18 + 4);
      uint64_t v21 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceToImageRatio];
      swift_beginAccess();
      *(_DWORD *)uint64_t v21 = v19;
      v21[4] = v20;
    }
    if ((qword_1EA841A48 & ~v4) == 0)
    {
      uint64_t v22 = (int *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceCenteredRatio);
      swift_beginAccess();
      int v23 = *v22;
      char v24 = *((unsigned char *)v22 + 4);
      uint64_t v25 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceCenteredRatio];
      swift_beginAccess();
      *(_DWORD *)uint64_t v25 = v23;
      void v25[4] = v24;
    }
    if ((qword_1EA841A68 & ~v4) == 0)
    {
      uint64_t v26 = (int *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headPitch);
      swift_beginAccess();
      int v27 = *v26;
      char v28 = *((unsigned char *)v26 + 4);
      uint64_t v29 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headPitch];
      swift_beginAccess();
      *(_DWORD *)uint64_t v29 = v27;
      v29[4] = v28;
    }
    if ((qword_1EA841A88 & ~v4) == 0)
    {
      uint64_t v30 = (int *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headRoll);
      swift_beginAccess();
      int v31 = *v30;
      char v32 = *((unsigned char *)v30 + 4);
      uint64_t v33 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headRoll];
      swift_beginAccess();
      *(_DWORD *)uint64_t v33 = v31;
      v33[4] = v32;
    }
    if ((qword_1EA841AA8 & ~v4) == 0)
    {
      uint64_t v34 = (int *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headYaw);
      swift_beginAccess();
      int v35 = *v34;
      char v36 = *((unsigned char *)v34 + 4);
      uint64_t v37 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headYaw];
      swift_beginAccess();
      *(_DWORD *)uint64_t v37 = v35;
      v37[4] = v36;
    }
    if ((qword_1EA841AC8 & ~v4) == 0)
    {
      unint64_t v38 = (int *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_blinkingConfidence);
      swift_beginAccess();
      int v39 = *v38;
      char v40 = *((unsigned char *)v38 + 4);
      uint64_t v41 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_blinkingConfidence];
      swift_beginAccess();
      *(_DWORD *)uint64_t v41 = v39;
      v41[4] = v40;
    }
    if ((qword_1EA841AE8 & ~v4) == 0)
    {
      uint64_t v42 = (int *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_prescriptionConfidence);
      swift_beginAccess();
      int v43 = *v42;
      char v44 = *((unsigned char *)v42 + 4);
      uint64_t v45 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_prescriptionConfidence];
      swift_beginAccess();
      *(_DWORD *)uint64_t v45 = v43;
      v45[4] = v44;
    }
    if ((qword_1EA841B08 & ~v4) == 0)
    {
      uint64_t v46 = (int *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_sunglassesConfidence);
      swift_beginAccess();
      int v47 = *v46;
      char v48 = *((unsigned char *)v46 + 4);
      uint64_t v49 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_sunglassesConfidence];
      swift_beginAccess();
      *(_DWORD *)uint64_t v49 = v47;
      v49[4] = v48;
    }
    if ((qword_1EA841B28 & ~v4) == 0)
    {
      long long v50 = (int *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_facemaskConfidence);
      swift_beginAccess();
      int v51 = *v50;
      char v52 = *((unsigned char *)v50 + 4);
      uint64_t v53 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_facemaskConfidence];
      swift_beginAccess();
      *(_DWORD *)uint64_t v53 = v51;
      v53[4] = v52;
    }
    if ((qword_1EA841B48 & ~v4) == 0)
    {
      uint64_t v54 = (int *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headgearConfidence);
      swift_beginAccess();
      int v55 = *v54;
      char v56 = *((unsigned char *)v54 + 4);
      uint64_t v57 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headgearConfidence];
      swift_beginAccess();
      *(_DWORD *)uint64_t v57 = v55;
      v57[4] = v56;
    }
    if ((qword_1EA841B68 & ~v4) == 0)
    {
      uint64_t v58 = (int *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_captureTime);
      swift_beginAccess();
      int v59 = *v58;
      char v60 = *((unsigned char *)v58 + 4);
      uint64_t v61 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_captureTime];
      swift_beginAccess();
      *(_DWORD *)uint64_t v61 = v59;
      v61[4] = v60;
    }
    if ((qword_1EA841B88 & ~v4) == 0)
    {
      uint64_t v62 = (int *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceCaptureQuality);
      swift_beginAccess();
      int v63 = *v62;
      char v64 = *((unsigned char *)v62 + 4);
      uint64_t v65 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceCaptureQuality];
      swift_beginAccess();
      *(_DWORD *)uint64_t v65 = v63;
      v65[4] = v64;
    }
    if ((qword_1EA841BA8 & ~v4) == 0)
    {
      uint64_t v66 = (int *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentSize);
      swift_beginAccess();
      int v67 = *v66;
      char v68 = *((unsigned char *)v66 + 4);
      uint64_t v69 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentSize];
      swift_beginAccess();
      *(_DWORD *)uint64_t v69 = v67;
      v69[4] = v68;
    }
    if ((qword_1EA841BC8 & ~v4) == 0)
    {
      uint64_t v70 = (int *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentRotation);
      swift_beginAccess();
      int v71 = *v70;
      char v72 = *((unsigned char *)v70 + 4);
      uint64_t v73 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentRotation];
      swift_beginAccess();
      *(_DWORD *)uint64_t v73 = v71;
      v73[4] = v72;
    }
    if ((qword_1EA841BE8 & ~v4) == 0)
    {
      uint64_t v74 = (int *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentSkew);
      swift_beginAccess();
      int v75 = *v74;
      char v76 = *((unsigned char *)v74 + 4);
      uint64_t v77 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentSkew];
      swift_beginAccess();
      *(_DWORD *)uint64_t v77 = v75;
      v77[4] = v76;
    }
    if ((qword_1EA841C08 & ~v4) == 0)
    {
      uint64_t v78 = (int *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_leftDrift);
      swift_beginAccess();
      int v79 = *v78;
      char v80 = *((unsigned char *)v78 + 4);
      uint64_t v81 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_leftDrift];
      swift_beginAccess();
      *(_DWORD *)uint64_t v81 = v79;
      v81[4] = v80;
      uint64_t v82 = (int *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rightDrift);
      swift_beginAccess();
      int v83 = *v82;
      char v84 = *((unsigned char *)v82 + 4);
      uint64_t v85 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rightDrift];
      swift_beginAccess();
      *(_DWORD *)uint64_t v85 = v83;
      v85[4] = v84;
      uint64_t v86 = (int *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_upDrift);
      swift_beginAccess();
      int v87 = *v86;
      char v88 = *((unsigned char *)v86 + 4);
      uint64_t v89 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_upDrift];
      swift_beginAccess();
      *(_DWORD *)uint64_t v89 = v87;
      v89[4] = v88;
      uint64_t v90 = (int *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_downDrift);
      swift_beginAccess();
      int v91 = *v90;
      char v92 = *((unsigned char *)v90 + 4);
      uint64_t v93 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_downDrift];
      swift_beginAccess();
      *(_DWORD *)uint64_t v93 = v91;
      v93[4] = v92;
    }
    if ((qword_1EA841C28 & ~v4) == 0)
    {
      uint64_t v94 = (uint64_t *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceConfidences);
      swift_beginAccess();
      uint64_t v95 = *v94;
      uint64_t v96 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceConfidences];
      swift_beginAccess();
      *(void *)uint64_t v96 = v95;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    if ((qword_1EA841B48 & ~v4) == 0)
    {
      uint64_t v97 = (uint64_t *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headgearConfidences);
      swift_beginAccess();
      uint64_t v98 = *v97;
      uint64_t v99 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headgearConfidences];
      swift_beginAccess();
      *(void *)uint64_t v99 = v98;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    if ((qword_1EA841C48 & ~v4) == 0)
    {
      uint64_t v100 = (uint64_t *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_numFaces);
      swift_beginAccess();
      uint64_t v101 = *v100;
      char v102 = *((unsigned char *)v100 + 8);
      uint64_t v103 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_numFaces];
      swift_beginAccess();
      *(void *)uint64_t v103 = v101;
      v103[8] = v102;
    }
    if ((qword_1EA841C68 & ~v4) == 0)
    {
      uint64_t v104 = (uint64_t *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_luxLevel);
      swift_beginAccess();
      uint64_t v105 = *v104;
      char v106 = *((unsigned char *)v104 + 8);
      uint64_t v107 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_luxLevel];
      swift_beginAccess();
      *(void *)uint64_t v107 = v105;
      v107[8] = v106;
    }
    if ((qword_1EA841C88 & ~v4) == 0)
    {
      uint64_t v108 = (uint64_t *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_skinTone);
      swift_beginAccess();
      uint64_t v109 = *v108;
      char v110 = *((unsigned char *)v108 + 8);
      uint64_t v111 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_skinTone];
      swift_beginAccess();
      *(void *)uint64_t v111 = v109;
      v111[8] = v110;
    }
    if ((qword_1EA841CA8 & ~v4) == 0)
    {
      uint64_t v112 = (char *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_pdf417Detected);
      swift_beginAccess();
      char v113 = *v112;
      uint64_t v114 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_pdf417Detected];
      swift_beginAccess();
      *uint64_t v114 = v113;
    }
    if ((qword_1EA841CC8 & ~v4) == 0)
    {
      id v115 = (char *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isAAMVACompliant);
      swift_beginAccess();
      char v116 = *v115;
      int v117 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isAAMVACompliant];
      swift_beginAccess();
      *int v117 = v116;
    }
    if ((qword_1EA841CE8 & ~v4) == 0)
    {
      uint64_t v118 = (char *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isAutoCaptured);
      swift_beginAccess();
      char v119 = *v118;
      uint64_t v120 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isAutoCaptured];
      swift_beginAccess();
      *uint64_t v120 = v119;
    }
    if ((qword_1EA841D08 & ~v4) == 0)
    {
      uint64_t v121 = (char *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isFlashEnabled);
      swift_beginAccess();
      char v122 = *v121;
      uint64_t v123 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isFlashEnabled];
      swift_beginAccess();
      *uint64_t v123 = v122;
    }
    if ((qword_1EA841D28 & ~v4) == 0)
    {
      uint64_t v124 = (uint64_t *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_issuerNumber);
      swift_beginAccess();
      uint64_t v126 = *v124;
      uint64_t v125 = v124[1];
      uint64_t v127 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_issuerNumber];
      swift_beginAccess();
      *(void *)uint64_t v127 = v126;
      *((void *)v127 + 1) = v125;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    if ((qword_1EA841D48 & ~v4) == 0)
    {
      uint64_t v128 = (uint64_t *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentType);
      swift_beginAccess();
      uint64_t v130 = *v128;
      uint64_t v129 = v128[1];
      uint64_t v131 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentType];
      swift_beginAccess();
      *(void *)uint64_t v131 = v130;
      *((void *)v131 + 1) = v129;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    if ((qword_1EA841D68 & ~v4) == 0)
    {
      uint64_t v132 = (uint64_t *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_originalVertices);
      swift_beginAccess();
      uint64_t v133 = *v132;
      uint64_t v134 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_originalVertices];
      swift_beginAccess();
      *(void *)uint64_t v134 = v133;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    if ((qword_1EA841D88 & ~v4) == 0)
    {
      uint64_t v135 = (uint64_t *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_targetVertices);
      swift_beginAccess();
      uint64_t v136 = *v135;
      uint64_t v137 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_targetVertices];
      swift_beginAccess();
      *(void *)uint64_t v137 = v136;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    if ((qword_1EA841DA8 & ~v4) == 0)
    {
      uint64_t v138 = (uint64_t *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rectangleCorners);
      swift_beginAccess();
      uint64_t v139 = *v138;
      uint64_t v140 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rectangleCorners];
      swift_beginAccess();
      *(void *)uint64_t v140 = v139;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    if ((qword_1EA841DC8 & ~v4) == 0)
    {
      uint64_t v141 = (uint64_t *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentCorners);
      swift_beginAccess();
      uint64_t v142 = *v141;
      uint64_t v143 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentCorners];
      swift_beginAccess();
      *(void *)uint64_t v143 = v142;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    if ((qword_1EA841DE8 & ~v4) == 0)
    {
      uint64_t v144 = (void **)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_fuzzyMatchAssessment);
      swift_beginAccess();
      uint64_t v145 = *v144;
      uint64_t v146 = (void **)&v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_fuzzyMatchAssessment];
      swift_beginAccess();
      uint64_t v147 = *v146;
      *uint64_t v146 = v145;
      id v148 = v145;
    }
    if ((qword_1EA841E08 & ~v4) == 0)
    {
      uint64_t v149 = (uint64_t *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_closestMatchAssessments);
      swift_beginAccess();
      uint64_t v150 = *v149;
      uint64_t v151 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_closestMatchAssessments];
      swift_beginAccess();
      *(void *)uint64_t v151 = v150;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    if ((qword_1EA841E28 & ~v4) != 0)
    {
      swift_release();
    }
    else
    {
      uint64_t v152 = (uint64_t *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_livenessChute);
      swift_beginAccess();
      uint64_t v154 = *v152;
      uint64_t v153 = v152[1];
      uint64_t v155 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_livenessChute];
      swift_beginAccess();
      *(void *)uint64_t v155 = v154;
      *((void *)v155 + 1) = v153;
      swift_bridgeObjectRetain();
      swift_release();
      swift_bridgeObjectRelease();
    }
  }
  return v3;
}

uint64_t sub_1D78D6814()
{
  uint64_t v1 = v0;
  sub_1D7A9CC48();
  sub_1D7A9C128();
  uint64_t v2 = v0 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_blurriness;
  swift_beginAccess();
  if ((*(unsigned char *)(v2 + 4) & 1) == 0) {
    sub_1D7A9C5D8();
  }
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  uint64_t v3 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_exposure;
  swift_beginAccess();
  if ((*(unsigned char *)(v3 + 4) & 1) == 0) {
    sub_1D7A9C5D8();
  }
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  uint64_t v4 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_cardDistortion;
  swift_beginAccess();
  if ((*(unsigned char *)(v4 + 4) & 1) == 0) {
    sub_1D7A9C5D8();
  }
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  uint64_t v5 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceToImageRatio;
  swift_beginAccess();
  if ((*(unsigned char *)(v5 + 4) & 1) == 0) {
    sub_1D7A9C5D8();
  }
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  uint64_t v6 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceCenteredRatio;
  swift_beginAccess();
  if ((*(unsigned char *)(v6 + 4) & 1) == 0) {
    sub_1D7A9C5D8();
  }
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  uint64_t v7 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headPitch;
  swift_beginAccess();
  if ((*(unsigned char *)(v7 + 4) & 1) == 0) {
    sub_1D7A9C5D8();
  }
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  uint64_t v8 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headRoll;
  swift_beginAccess();
  if ((*(unsigned char *)(v8 + 4) & 1) == 0) {
    sub_1D7A9C5D8();
  }
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  uint64_t v9 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headYaw;
  swift_beginAccess();
  if ((*(unsigned char *)(v9 + 4) & 1) == 0) {
    sub_1D7A9C5D8();
  }
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  uint64_t v10 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_blinkingConfidence;
  swift_beginAccess();
  if ((*(unsigned char *)(v10 + 4) & 1) == 0) {
    sub_1D7A9C5D8();
  }
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  uint64_t v11 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_prescriptionConfidence;
  swift_beginAccess();
  if ((*(unsigned char *)(v11 + 4) & 1) == 0) {
    sub_1D7A9C5D8();
  }
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  uint64_t v12 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_sunglassesConfidence;
  swift_beginAccess();
  if ((*(unsigned char *)(v12 + 4) & 1) == 0) {
    sub_1D7A9C5D8();
  }
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  uint64_t v13 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_facemaskConfidence;
  swift_beginAccess();
  if ((*(unsigned char *)(v13 + 4) & 1) == 0) {
    sub_1D7A9C5D8();
  }
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  uint64_t v14 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headgearConfidence;
  swift_beginAccess();
  if ((*(unsigned char *)(v14 + 4) & 1) == 0) {
    sub_1D7A9C5D8();
  }
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  uint64_t v15 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_captureTime;
  swift_beginAccess();
  if ((*(unsigned char *)(v15 + 4) & 1) == 0) {
    sub_1D7A9C5D8();
  }
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  uint64_t v16 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceCaptureQuality;
  swift_beginAccess();
  if ((*(unsigned char *)(v16 + 4) & 1) == 0) {
    sub_1D7A9C5D8();
  }
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  uint64_t v17 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentSize;
  swift_beginAccess();
  if ((*(unsigned char *)(v17 + 4) & 1) == 0) {
    sub_1D7A9C5D8();
  }
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  uint64_t v18 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentRotation;
  swift_beginAccess();
  if ((*(unsigned char *)(v18 + 4) & 1) == 0) {
    sub_1D7A9C5D8();
  }
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  uint64_t v19 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentSkew;
  swift_beginAccess();
  if ((*(unsigned char *)(v19 + 4) & 1) == 0) {
    sub_1D7A9C5D8();
  }
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  uint64_t v20 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_leftDrift;
  swift_beginAccess();
  if ((*(unsigned char *)(v20 + 4) & 1) == 0) {
    sub_1D7A9C5D8();
  }
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  uint64_t v21 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rightDrift;
  swift_beginAccess();
  if ((*(unsigned char *)(v21 + 4) & 1) == 0) {
    sub_1D7A9C5D8();
  }
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  uint64_t v22 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_upDrift;
  swift_beginAccess();
  if ((*(unsigned char *)(v22 + 4) & 1) == 0) {
    sub_1D7A9C5D8();
  }
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  uint64_t v23 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_downDrift;
  swift_beginAccess();
  if ((*(unsigned char *)(v23 + 4) & 1) == 0) {
    sub_1D7A9C5D8();
  }
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  char v24 = (void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceConfidences);
  swift_beginAccess();
  if (*v24)
  {
    uint64_t v25 = swift_bridgeObjectRetain();
    MEMORY[0x1D947B0A0](v25, MEMORY[0x1E4FBB470]);
    swift_bridgeObjectRelease();
  }
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  uint64_t v26 = (void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headgearConfidences);
  swift_beginAccess();
  if (*v26)
  {
    uint64_t v27 = swift_bridgeObjectRetain();
    MEMORY[0x1D947B0A0](v27, MEMORY[0x1E4FBB470]);
    swift_bridgeObjectRelease();
  }
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  uint64_t v28 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_numFaces;
  swift_beginAccess();
  if ((*(unsigned char *)(v28 + 8) & 1) == 0)
  {
    sub_1D78CDF34();
    sub_1D7A9CAE8();
  }
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  uint64_t v29 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_luxLevel;
  swift_beginAccess();
  if ((*(unsigned char *)(v29 + 8) & 1) == 0)
  {
    sub_1D78CDF34();
    sub_1D7A9CAE8();
  }
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  swift_beginAccess();
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  swift_beginAccess();
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  swift_beginAccess();
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  swift_beginAccess();
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  uint64_t v30 = (void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_originalVertices);
  swift_beginAccess();
  if (*v30)
  {
    uint64_t v31 = type metadata accessor for IQPoint();
    uint64_t v32 = swift_bridgeObjectRetain();
    MEMORY[0x1D947B0A0](v32, v31);
    swift_bridgeObjectRelease();
  }
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  uint64_t v33 = (void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_targetVertices);
  swift_beginAccess();
  if (*v33)
  {
    uint64_t v34 = type metadata accessor for IQPoint();
    uint64_t v35 = swift_bridgeObjectRetain();
    MEMORY[0x1D947B0A0](v35, v34);
    swift_bridgeObjectRelease();
  }
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  char v36 = (void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rectangleCorners);
  swift_beginAccess();
  if (*v36)
  {
    uint64_t v37 = type metadata accessor for IQPoint();
    uint64_t v38 = swift_bridgeObjectRetain();
    MEMORY[0x1D947B0A0](v38, v37);
    swift_bridgeObjectRelease();
  }
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  int v39 = (void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentCorners);
  swift_beginAccess();
  if (*v39)
  {
    uint64_t v40 = type metadata accessor for IQPoint();
    uint64_t v41 = swift_bridgeObjectRetain();
    MEMORY[0x1D947B0A0](v41, v40);
    swift_bridgeObjectRelease();
  }
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  uint64_t v42 = (id *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_fuzzyMatchAssessment);
  swift_beginAccess();
  if (*v42)
  {
    id v43 = objc_msgSend(*v42, sel_debugDescription);
    sub_1D7A9BFC8();
  }
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  char v44 = (void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_closestMatchAssessments);
  swift_beginAccess();
  if (*v44)
  {
    uint64_t v45 = swift_bridgeObjectRetain();
    MEMORY[0x1D947B0F0](v45, MEMORY[0x1E4FBB550]);
    swift_bridgeObjectRelease();
  }
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  swift_beginAccess();
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  uint64_t v46 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rescanCount;
  swift_beginAccess();
  if ((*(unsigned char *)(v46 + 8) & 1) == 0)
  {
    sub_1D78CDF34();
    sub_1D7A9CAE8();
  }
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  uint64_t v47 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_errorCode;
  swift_beginAccess();
  if ((*(unsigned char *)(v47 + 8) & 1) == 0)
  {
    sub_1D78CDF34();
    sub_1D7A9CAE8();
  }
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  return 0;
}

id ImageQualityMetrics.__deallocating_deinit()
{
  return sub_1D78D9BC4(type metadata accessor for ImageQualityMetrics);
}

uint64_t static IQPoint.supportsSecureCoding.getter()
{
  return byte_1EA843441;
}

uint64_t static IQPoint.supportsSecureCoding.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  byte_1EA843441 = a1;
  return result;
}

uint64_t (*static IQPoint.supportsSecureCoding.modify())()
{
  return j_j__swift_endAccess;
}

float sub_1D78D809C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x;
  swift_beginAccess();
  return *(float *)v1;
}

uint64_t sub_1D78D80E4(float a1)
{
  uint64_t v3 = (float *)(v1 + OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*sub_1D78D8138())()
{
  return j_j__swift_endAccess;
}

float sub_1D78D8194()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13CoreIDVShared7IQPoint_y;
  swift_beginAccess();
  return *(float *)v1;
}

uint64_t sub_1D78D81DC(float a1)
{
  uint64_t v3 = (float *)(v1 + OBJC_IVAR____TtC13CoreIDVShared7IQPoint_y);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*sub_1D78D8230())()
{
  return j_j__swift_endAccess;
}

id IQPoint.__allocating_init(x:y:)(float a1, float a2)
{
  uint64_t v5 = (char *)objc_allocWithZone(v2);
  *(float *)&v5[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x] = a1;
  *(float *)&v5[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_y] = a2;
  v7.receiver = v5;
  v7.super_class = v2;
  return objc_msgSendSuper2(&v7, sel_init);
}

id IQPoint.init(x:y:)(float a1, float a2)
{
  *(float *)&v2[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x] = a1;
  *(float *)&v2[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_y] = a2;
  v4.receiver = v2;
  v4.super_class = (Class)type metadata accessor for IQPoint();
  return objc_msgSendSuper2(&v4, sel_init);
}

id IQPoint.__allocating_init(point:)(double a1, double a2)
{
  uint64_t v5 = (char *)objc_allocWithZone(v2);
  float v6 = a1;
  *(float *)&v5[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x] = v6;
  float v7 = a2;
  *(float *)&v5[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_y] = v7;
  v9.receiver = v5;
  v9.super_class = v2;
  return objc_msgSendSuper2(&v9, sel_init);
}

id IQPoint.init(point:)(double a1, double a2)
{
  float v3 = a1;
  *(float *)&v2[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x] = v3;
  float v4 = a2;
  *(float *)&v2[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_y] = v4;
  v6.receiver = v2;
  v6.super_class = (Class)type metadata accessor for IQPoint();
  return objc_msgSendSuper2(&v6, sel_init);
}

id IQPoint.__allocating_init(coder:)(void *a1)
{
  float v3 = (char *)objc_allocWithZone(v1);
  float v4 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_decodeFloatForKey_, v4);
  int v6 = v5;

  *(_DWORD *)&v3[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x] = v6;
  float v7 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_decodeFloatForKey_, v7);
  int v9 = v8;

  *(_DWORD *)&v3[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_y] = v9;
  v12.receiver = v3;
  v12.super_class = v1;
  id v10 = objc_msgSendSuper2(&v12, sel_init);

  return v10;
}

id IQPoint.init(coder:)(void *a1)
{
  float v3 = v1;
  float v4 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_decodeFloatForKey_, v4);
  int v6 = v5;

  *(_DWORD *)&v3[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x] = v6;
  float v7 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_decodeFloatForKey_, v7);
  int v9 = v8;

  *(_DWORD *)&v3[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_y] = v9;
  v12.receiver = v3;
  v12.super_class = (Class)type metadata accessor for IQPoint();
  id v10 = objc_msgSendSuper2(&v12, sel_init);

  return v10;
}

void sub_1D78D8684(void *a1)
{
  float v3 = (int *)(v1 + OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x);
  swift_beginAccess();
  int v4 = *v3;
  int v5 = (void *)sub_1D7A9BF98();
  LODWORD(v6) = v4;
  objc_msgSend(a1, sel_encodeFloat_forKey_, v5, v6);

  float v7 = (int *)(v1 + OBJC_IVAR____TtC13CoreIDVShared7IQPoint_y);
  swift_beginAccess();
  int v8 = *v7;
  int v9 = (void *)sub_1D7A9BF98();
  LODWORD(v10) = v8;
  objc_msgSend(a1, sel_encodeFloat_forKey_, v9, v10);
}

uint64_t sub_1D78D8860()
{
  return 0;
}

void IQPoint.init()()
{
}

id IQPoint.__deallocating_deinit()
{
  return sub_1D78D9BC4(type metadata accessor for IQPoint);
}

uint64_t static FuzzyMatchAssessment.supportsSecureCoding.getter()
{
  return byte_1EA843442;
}

uint64_t static FuzzyMatchAssessment.supportsSecureCoding.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  byte_1EA843442 = a1;
  return result;
}

uint64_t (*static FuzzyMatchAssessment.supportsSecureCoding.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1D78D8B2C()
{
  return sub_1D78D8DF0(&OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_firstName);
}

uint64_t sub_1D78D8B38(uint64_t a1, char a2)
{
  return sub_1D78D8E44(a1, a2, &OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_firstName);
}

uint64_t (*sub_1D78D8B44())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1D78D8BA0()
{
  return sub_1D78D8DF0(&OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_lastName);
}

uint64_t sub_1D78D8BAC(uint64_t a1, char a2)
{
  return sub_1D78D8E44(a1, a2, &OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_lastName);
}

uint64_t (*sub_1D78D8BB8())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1D78D8C14()
{
  return sub_1D78D8DF0(&OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_state);
}

uint64_t sub_1D78D8C20(uint64_t a1, char a2)
{
  return sub_1D78D8E44(a1, a2, &OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_state);
}

uint64_t (*sub_1D78D8C2C())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1D78D8C88()
{
  return sub_1D78D8DF0(&OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_houseNumber);
}

uint64_t sub_1D78D8C94(uint64_t a1, char a2)
{
  return sub_1D78D8E44(a1, a2, &OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_houseNumber);
}

uint64_t (*sub_1D78D8CA0())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1D78D8CFC()
{
  return sub_1D78D8DF0(&OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_street);
}

uint64_t sub_1D78D8D08(uint64_t a1, char a2)
{
  return sub_1D78D8E44(a1, a2, &OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_street);
}

uint64_t (*sub_1D78D8D14())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1D78D8D70()
{
  return sub_1D78D8DF0(&OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_dob);
}

uint64_t sub_1D78D8D7C(uint64_t a1, char a2)
{
  return sub_1D78D8E44(a1, a2, &OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_dob);
}

uint64_t (*sub_1D78D8D88())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1D78D8DE4()
{
  return sub_1D78D8DF0(&OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_postalCode);
}

uint64_t sub_1D78D8DF0(void *a1)
{
  uint64_t v2 = v1 + *a1;
  swift_beginAccess();
  return *(void *)v2;
}

uint64_t sub_1D78D8E38(uint64_t a1, char a2)
{
  return sub_1D78D8E44(a1, a2, &OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_postalCode);
}

uint64_t sub_1D78D8E44(uint64_t a1, char a2, void *a3)
{
  uint64_t v6 = v3 + *a3;
  uint64_t result = swift_beginAccess();
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*sub_1D78D8EA0())()
{
  return j_j__swift_endAccess;
}

id FuzzyMatchAssessment.__allocating_init(firstName:lastName:state:houseNumber:street:dob:postalCode:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, char a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  char v15 = a2 & 1;
  char v16 = a4 & 1;
  char v17 = a6 & 1;
  char v18 = a8 & 1;
  id v19 = objc_allocWithZone(v14);
  return FuzzyMatchAssessment.init(firstName:lastName:state:houseNumber:street:dob:postalCode:)(a1, v15, a3, v16, a5, v17, a7, v18, a9, a10 & 1, a11, a12 & 1, a13, a14 & 1);
}

id FuzzyMatchAssessment.init(firstName:lastName:state:houseNumber:street:dob:postalCode:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, char a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  char v17 = &v14[OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_firstName];
  *(void *)char v17 = 0;
  unsigned char v17[8] = 1;
  char v18 = &v14[OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_lastName];
  *(void *)char v18 = 0;
  v18[8] = 1;
  id v19 = &v14[OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_state];
  *(void *)id v19 = 0;
  v19[8] = 1;
  uint64_t v20 = &v14[OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_houseNumber];
  *(void *)uint64_t v20 = 0;
  v20[8] = 1;
  uint64_t v21 = &v14[OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_street];
  *(void *)uint64_t v21 = 0;
  v21[8] = 1;
  uint64_t v22 = &v14[OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_dob];
  *(void *)uint64_t v22 = 0;
  v22[8] = 1;
  uint64_t v23 = &v14[OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_postalCode];
  *(void *)uint64_t v23 = 0;
  v23[8] = 1;
  swift_beginAccess();
  *(void *)char v17 = a1;
  unsigned char v17[8] = a2 & 1;
  swift_beginAccess();
  *(void *)char v18 = a3;
  v18[8] = a4 & 1;
  swift_beginAccess();
  *(void *)id v19 = a5;
  v19[8] = a6 & 1;
  swift_beginAccess();
  *(void *)uint64_t v20 = a7;
  v20[8] = a8 & 1;
  swift_beginAccess();
  *(void *)uint64_t v21 = a9;
  v21[8] = a10 & 1;
  swift_beginAccess();
  *(void *)uint64_t v22 = a11;
  v22[8] = a12 & 1;
  swift_beginAccess();
  *(void *)uint64_t v23 = a13;
  v23[8] = a14 & 1;
  v31.receiver = v14;
  v31.super_class = (Class)type metadata accessor for FuzzyMatchAssessment();
  return objc_msgSendSuper2(&v31, sel_init);
}

id FuzzyMatchAssessment.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  id v4 = sub_1D78DB6F4();

  return v4;
}

id FuzzyMatchAssessment.init(coder:)(void *a1)
{
  id v2 = sub_1D78DB6F4();

  return v2;
}

void sub_1D78D92B8(void *a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_firstName;
  swift_beginAccess();
  uint64_t v4 = 0;
  if ((*(unsigned char *)(v3 + 8) & 1) == 0) {
    uint64_t v4 = sub_1D7A9C648();
  }
  int v5 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_encodeObject_forKey_, v4, v5);
  swift_unknownObjectRelease();

  uint64_t v6 = v1 + OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_lastName;
  swift_beginAccess();
  uint64_t v7 = 0;
  if ((*(unsigned char *)(v6 + 8) & 1) == 0) {
    uint64_t v7 = sub_1D7A9C648();
  }
  int v8 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_encodeObject_forKey_, v7, v8);
  swift_unknownObjectRelease();

  uint64_t v9 = v1 + OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_state;
  swift_beginAccess();
  uint64_t v10 = 0;
  if ((*(unsigned char *)(v9 + 8) & 1) == 0) {
    uint64_t v10 = sub_1D7A9C648();
  }
  uint64_t v11 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_encodeObject_forKey_, v10, v11);
  swift_unknownObjectRelease();

  uint64_t v12 = v1 + OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_houseNumber;
  swift_beginAccess();
  uint64_t v13 = 0;
  if ((*(unsigned char *)(v12 + 8) & 1) == 0) {
    uint64_t v13 = sub_1D7A9C648();
  }
  uint64_t v14 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_encodeObject_forKey_, v13, v14);
  swift_unknownObjectRelease();

  uint64_t v15 = v1 + OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_street;
  swift_beginAccess();
  uint64_t v16 = 0;
  if ((*(unsigned char *)(v15 + 8) & 1) == 0) {
    uint64_t v16 = sub_1D7A9C648();
  }
  char v17 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_encodeObject_forKey_, v16, v17);
  swift_unknownObjectRelease();

  uint64_t v18 = v1 + OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_dob;
  swift_beginAccess();
  uint64_t v19 = 0;
  if ((*(unsigned char *)(v18 + 8) & 1) == 0) {
    uint64_t v19 = sub_1D7A9C648();
  }
  uint64_t v20 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_encodeObject_forKey_, v19, v20);
  swift_unknownObjectRelease();

  uint64_t v21 = v1 + OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_postalCode;
  swift_beginAccess();
  uint64_t v22 = 0;
  if ((*(unsigned char *)(v21 + 8) & 1) == 0) {
    uint64_t v22 = sub_1D7A9C648();
  }
  uint64_t v23 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_encodeObject_forKey_, v22, v23);
  swift_unknownObjectRelease();
}

id sub_1D78D96A0(void *a1, uint64_t a2, void (*a3)(void))
{
  id v4 = a1;
  a3();

  int v5 = (void *)sub_1D7A9BF98();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1D78D9710()
{
  uint64_t v1 = v0;
  sub_1D7A9CC48();
  sub_1D7A9C128();
  uint64_t v2 = v0 + OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_firstName;
  swift_beginAccess();
  if ((*(unsigned char *)(v2 + 8) & 1) == 0)
  {
    sub_1D78CDF34();
    sub_1D7A9CAE8();
  }
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  uint64_t v3 = v1 + OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_lastName;
  swift_beginAccess();
  if ((*(unsigned char *)(v3 + 8) & 1) == 0)
  {
    sub_1D78CDF34();
    sub_1D7A9CAE8();
  }
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  uint64_t v4 = v1 + OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_state;
  swift_beginAccess();
  if ((*(unsigned char *)(v4 + 8) & 1) == 0)
  {
    sub_1D78CDF34();
    sub_1D7A9CAE8();
  }
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  uint64_t v5 = v1 + OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_houseNumber;
  swift_beginAccess();
  if ((*(unsigned char *)(v5 + 8) & 1) == 0)
  {
    sub_1D78CDF34();
    sub_1D7A9CAE8();
  }
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  uint64_t v6 = v1 + OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_street;
  swift_beginAccess();
  if ((*(unsigned char *)(v6 + 8) & 1) == 0)
  {
    sub_1D78CDF34();
    sub_1D7A9CAE8();
  }
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  uint64_t v7 = v1 + OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_dob;
  swift_beginAccess();
  if ((*(unsigned char *)(v7 + 8) & 1) == 0)
  {
    sub_1D78CDF34();
    sub_1D7A9CAE8();
  }
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  uint64_t v8 = v1 + OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_postalCode;
  swift_beginAccess();
  if ((*(unsigned char *)(v8 + 8) & 1) == 0)
  {
    sub_1D78CDF34();
    sub_1D7A9CAE8();
  }
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  return 0;
}

void FuzzyMatchAssessment.init()()
{
}

id FuzzyMatchAssessment.__deallocating_deinit()
{
  return sub_1D78D9BC4(type metadata accessor for FuzzyMatchAssessment);
}

id sub_1D78D9BC4(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

id sub_1D78D9BFC()
{
  uint64_t v1 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_blurriness];
  *(_DWORD *)uint64_t v1 = 0;
  char v2 = 1;
  v1[4] = 1;
  objc_super v3 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_exposure];
  *(_DWORD *)objc_super v3 = 0;
  v3[4] = 1;
  uint64_t v4 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_cardDistortion];
  *(_DWORD *)uint64_t v4 = 0;
  v4[4] = 1;
  uint64_t v5 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceToImageRatio];
  *(_DWORD *)uint64_t v5 = 0;
  v5[4] = 1;
  uint64_t v6 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceCenteredRatio];
  *(_DWORD *)uint64_t v6 = 0;
  v6[4] = 1;
  uint64_t v7 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headPitch];
  *(_DWORD *)uint64_t v7 = 0;
  uint64_t v164 = v7;
  v7[4] = 1;
  uint64_t v8 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headRoll];
  *(_DWORD *)uint64_t v8 = 0;
  uint64_t v165 = v8;
  v8[4] = 1;
  uint64_t v9 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headYaw];
  *(_DWORD *)uint64_t v9 = 0;
  uint64_t v166 = v9;
  _OWORD v9[4] = 1;
  uint64_t v10 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_blinkingConfidence];
  *(_DWORD *)uint64_t v10 = 0;
  uint64_t v167 = v10;
  v10[4] = 1;
  uint64_t v11 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_prescriptionConfidence];
  *(_DWORD *)uint64_t v11 = 0;
  uint64_t v168 = v11;
  v11[4] = 1;
  uint64_t v12 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_sunglassesConfidence];
  *(_DWORD *)uint64_t v12 = 0;
  uint64_t v169 = v12;
  v12[4] = 1;
  uint64_t v13 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_facemaskConfidence];
  *(_DWORD *)uint64_t v13 = 0;
  uint64_t v170 = v13;
  _OWORD v13[4] = 1;
  uint64_t v14 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headgearConfidence];
  *(_DWORD *)uint64_t v14 = 0;
  uint64_t v171 = v14;
  v14[4] = 1;
  uint64_t v15 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_captureTime];
  *(_DWORD *)uint64_t v15 = 0;
  uint64_t v172 = v15;
  v15[4] = 1;
  uint64_t v16 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceCaptureQuality];
  *(_DWORD *)uint64_t v16 = 0;
  uint64_t v173 = v16;
  v16[4] = 1;
  char v17 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentSize];
  *(_DWORD *)char v17 = 0;
  uint64_t v174 = v17;
  void v17[4] = 1;
  uint64_t v18 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentRotation];
  *(_DWORD *)uint64_t v18 = 0;
  uint64_t v175 = v18;
  v18[4] = 1;
  uint64_t v19 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentSkew];
  *(_DWORD *)uint64_t v19 = 0;
  uint64_t v176 = v19;
  _OWORD v19[4] = 1;
  uint64_t v20 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_leftDrift];
  *(_DWORD *)uint64_t v20 = 0;
  uint64_t v177 = v20;
  v20[4] = 1;
  uint64_t v21 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rightDrift];
  *(_DWORD *)uint64_t v21 = 0;
  uint64_t v178 = v21;
  v21[4] = 1;
  uint64_t v22 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_upDrift];
  *(_DWORD *)uint64_t v22 = 0;
  uint64_t v179 = v22;
  v22[4] = 1;
  uint64_t v23 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_downDrift];
  *(_DWORD *)uint64_t v23 = 0;
  uint64_t v204 = v23;
  v23[4] = 1;
  uint64_t v180 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceConfidences];
  *(void *)&v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceConfidences] = 0;
  uint64_t v181 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headgearConfidences];
  *(void *)&v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headgearConfidences] = 0;
  char v24 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_numFaces];
  *(void *)char v24 = 0;
  uint64_t v182 = v24;
  v24[8] = 1;
  uint64_t v25 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_luxLevel];
  *(void *)uint64_t v25 = 0;
  uint64_t v183 = v25;
  v25[8] = 1;
  uint64_t v26 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_skinTone];
  *(void *)uint64_t v26 = 0;
  uint64_t v184 = v26;
  v26[8] = 1;
  uint64_t v185 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_pdf417Detected];
  v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_pdf417Detected] = 2;
  uint64_t v186 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isAAMVACompliant];
  v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isAAMVACompliant] = 2;
  uint64_t v187 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isAutoCaptured];
  v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isAutoCaptured] = 2;
  uint64_t v188 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isFlashEnabled];
  v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isFlashEnabled] = 2;
  uint64_t v27 = (uint64_t *)&v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_issuerNumber];
  *uint64_t v27 = 0;
  v27[1] = 0;
  uint64_t v189 = v27;
  uint64_t v28 = (uint64_t *)&v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentType];
  *uint64_t v28 = 0;
  v28[1] = 0;
  uint64_t v190 = v28;
  uint64_t v191 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_originalVertices];
  *(void *)&v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_originalVertices] = 0;
  uint64_t v192 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_targetVertices];
  *(void *)&v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_targetVertices] = 0;
  uint64_t v193 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rectangleCorners];
  *(void *)&v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rectangleCorners] = 0;
  uint64_t v194 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentCorners];
  *(void *)&v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentCorners] = 0;
  uint64_t v195 = (void **)&v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_fuzzyMatchAssessment];
  *(void *)&v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_fuzzyMatchAssessment] = 0;
  uint64_t v196 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_closestMatchAssessments];
  *(void *)&v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_closestMatchAssessments] = 0;
  uint64_t v29 = (uint64_t *)&v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_modelDecision];
  *uint64_t v29 = 0;
  v29[1] = 0;
  uint64_t v197 = v29;
  uint64_t v30 = (uint64_t *)&v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_modelVersion];
  uint64_t *v30 = 0;
  v30[1] = 0;
  uint64_t v198 = v30;
  objc_super v31 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_exploration];
  *objc_super v31 = 2;
  uint64_t v32 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rescanCount];
  *(void *)uint64_t v32 = 0;
  unint64_t v199 = v31;
  uint64_t v200 = v32;
  v32[8] = 1;
  uint64_t v33 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_livenessChute];
  *uint64_t v33 = 0;
  v33[1] = 0;
  uint64_t v201 = v33;
  uint64_t v34 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_errorCode];
  *(void *)uint64_t v34 = 0;
  uint64_t v203 = v34;
  v34[8] = 1;
  uint64_t v35 = sub_1D78C4038(0, (unint64_t *)&qword_1EBDF93C0);
  uint64_t v202 = v0;
  uint64_t v36 = sub_1D7A9C908();
  uint64_t v37 = (void *)v36;
  if (v36)
  {
    LODWORD(v220) = 0;
    BYTE4(v220) = 1;
    MEMORY[0x1D947B340](v36, &v220);

    LODWORD(v37) = v220;
    char v2 = BYTE4(v220);
  }
  char v38 = 1;
  swift_beginAccess();
  *(_DWORD *)uint64_t v1 = v37;
  v1[4] = v2;
  uint64_t v39 = sub_1D7A9C908();
  uint64_t v40 = (void *)v39;
  if (v39)
  {
    LODWORD(v220) = 0;
    BYTE4(v220) = 1;
    MEMORY[0x1D947B340](v39, &v220);

    LODWORD(v40) = v220;
    char v38 = BYTE4(v220);
  }
  char v41 = 1;
  swift_beginAccess();
  *(_DWORD *)objc_super v3 = v40;
  v3[4] = v38;
  uint64_t v42 = sub_1D7A9C908();
  id v43 = (void *)v42;
  if (v42)
  {
    LODWORD(v220) = 0;
    BYTE4(v220) = 1;
    MEMORY[0x1D947B340](v42, &v220);

    LODWORD(v43) = v220;
    char v41 = BYTE4(v220);
  }
  char v44 = 1;
  swift_beginAccess();
  *(_DWORD *)uint64_t v4 = v43;
  v4[4] = v41;
  uint64_t v45 = sub_1D7A9C908();
  uint64_t v46 = (void *)v45;
  if (v45)
  {
    LODWORD(v220) = 0;
    BYTE4(v220) = 1;
    MEMORY[0x1D947B340](v45, &v220);

    LODWORD(v46) = v220;
    char v44 = BYTE4(v220);
  }
  char v47 = 1;
  swift_beginAccess();
  *(_DWORD *)uint64_t v5 = v46;
  v5[4] = v44;
  uint64_t v48 = sub_1D7A9C908();
  uint64_t v49 = (void *)v48;
  if (v48)
  {
    LODWORD(v220) = 0;
    BYTE4(v220) = 1;
    MEMORY[0x1D947B340](v48, &v220);

    LODWORD(v49) = v220;
    char v47 = BYTE4(v220);
  }
  char v50 = 1;
  swift_beginAccess();
  *(_DWORD *)uint64_t v6 = v49;
  v6[4] = v47;
  uint64_t v51 = sub_1D7A9C908();
  char v52 = (void *)v51;
  if (v51)
  {
    LODWORD(v220) = 0;
    BYTE4(v220) = 1;
    MEMORY[0x1D947B340](v51, &v220);

    LODWORD(v52) = v220;
    char v50 = BYTE4(v220);
  }
  char v53 = 1;
  swift_beginAccess();
  *(_DWORD *)uint64_t v164 = v52;
  v164[4] = v50;
  uint64_t v54 = sub_1D7A9C908();
  int v55 = (void *)v54;
  if (v54)
  {
    LODWORD(v220) = 0;
    BYTE4(v220) = 1;
    MEMORY[0x1D947B340](v54, &v220);

    LODWORD(v55) = v220;
    char v53 = BYTE4(v220);
  }
  char v56 = 1;
  swift_beginAccess();
  *(_DWORD *)uint64_t v165 = v55;
  v165[4] = v53;
  uint64_t v57 = sub_1D7A9C908();
  uint64_t v58 = (void *)v57;
  if (v57)
  {
    LODWORD(v220) = 0;
    BYTE4(v220) = 1;
    MEMORY[0x1D947B340](v57, &v220);

    LODWORD(v58) = v220;
    char v56 = BYTE4(v220);
  }
  char v59 = 1;
  swift_beginAccess();
  *(_DWORD *)uint64_t v166 = v58;
  v166[4] = v56;
  uint64_t v60 = sub_1D7A9C908();
  uint64_t v61 = (void *)v60;
  if (v60)
  {
    LODWORD(v220) = 0;
    BYTE4(v220) = 1;
    MEMORY[0x1D947B340](v60, &v220);

    LODWORD(v61) = v220;
    char v59 = BYTE4(v220);
  }
  char v62 = 1;
  swift_beginAccess();
  *(_DWORD *)uint64_t v167 = v61;
  v167[4] = v59;
  uint64_t v63 = sub_1D7A9C908();
  char v64 = (void *)v63;
  if (v63)
  {
    LODWORD(v220) = 0;
    BYTE4(v220) = 1;
    MEMORY[0x1D947B340](v63, &v220);

    LODWORD(v64) = v220;
    char v62 = BYTE4(v220);
  }
  char v65 = 1;
  swift_beginAccess();
  *(_DWORD *)uint64_t v168 = v64;
  v168[4] = v62;
  uint64_t v66 = sub_1D7A9C908();
  int v67 = (void *)v66;
  if (v66)
  {
    LODWORD(v220) = 0;
    BYTE4(v220) = 1;
    MEMORY[0x1D947B340](v66, &v220);

    LODWORD(v67) = v220;
    char v65 = BYTE4(v220);
  }
  char v68 = 1;
  swift_beginAccess();
  *(_DWORD *)uint64_t v169 = v67;
  v169[4] = v65;
  uint64_t v69 = sub_1D7A9C908();
  uint64_t v70 = (void *)v69;
  if (v69)
  {
    LODWORD(v220) = 0;
    BYTE4(v220) = 1;
    MEMORY[0x1D947B340](v69, &v220);

    LODWORD(v70) = v220;
    char v68 = BYTE4(v220);
  }
  char v71 = 1;
  swift_beginAccess();
  *(_DWORD *)uint64_t v170 = v70;
  v170[4] = v68;
  uint64_t v72 = sub_1D7A9C908();
  uint64_t v73 = (void *)v72;
  if (v72)
  {
    LODWORD(v220) = 0;
    BYTE4(v220) = 1;
    MEMORY[0x1D947B340](v72, &v220);

    LODWORD(v73) = v220;
    char v71 = BYTE4(v220);
  }
  char v74 = 1;
  swift_beginAccess();
  *(_DWORD *)uint64_t v171 = v73;
  v171[4] = v71;
  uint64_t v75 = sub_1D7A9C908();
  char v76 = (void *)v75;
  if (v75)
  {
    LODWORD(v220) = 0;
    BYTE4(v220) = 1;
    MEMORY[0x1D947B340](v75, &v220);

    LODWORD(v76) = v220;
    char v74 = BYTE4(v220);
  }
  char v77 = 1;
  swift_beginAccess();
  *(_DWORD *)uint64_t v172 = v76;
  v172[4] = v74;
  uint64_t v78 = sub_1D7A9C908();
  int v79 = (void *)v78;
  if (v78)
  {
    LODWORD(v220) = 0;
    BYTE4(v220) = 1;
    MEMORY[0x1D947B340](v78, &v220);

    LODWORD(v79) = v220;
    char v77 = BYTE4(v220);
  }
  char v80 = 1;
  swift_beginAccess();
  *(_DWORD *)uint64_t v173 = v79;
  v173[4] = v77;
  uint64_t v81 = sub_1D7A9C908();
  uint64_t v82 = (void *)v81;
  if (v81)
  {
    LODWORD(v220) = 0;
    BYTE4(v220) = 1;
    MEMORY[0x1D947B340](v81, &v220);

    LODWORD(v82) = v220;
    char v80 = BYTE4(v220);
  }
  char v83 = 1;
  swift_beginAccess();
  *(_DWORD *)uint64_t v174 = v82;
  v174[4] = v80;
  uint64_t v84 = sub_1D7A9C908();
  uint64_t v85 = (void *)v84;
  if (v84)
  {
    LODWORD(v220) = 0;
    BYTE4(v220) = 1;
    MEMORY[0x1D947B340](v84, &v220);

    LODWORD(v85) = v220;
    char v83 = BYTE4(v220);
  }
  char v86 = 1;
  swift_beginAccess();
  *(_DWORD *)uint64_t v175 = v85;
  v175[4] = v83;
  uint64_t v87 = sub_1D7A9C908();
  char v88 = (void *)v87;
  if (v87)
  {
    LODWORD(v220) = 0;
    BYTE4(v220) = 1;
    MEMORY[0x1D947B340](v87, &v220);

    LODWORD(v88) = v220;
    char v86 = BYTE4(v220);
  }
  char v89 = 1;
  swift_beginAccess();
  *(_DWORD *)uint64_t v176 = v88;
  v176[4] = v86;
  uint64_t v90 = sub_1D7A9C908();
  int v91 = (void *)v90;
  if (v90)
  {
    LODWORD(v220) = 0;
    BYTE4(v220) = 1;
    MEMORY[0x1D947B340](v90, &v220);

    LODWORD(v91) = v220;
    char v89 = BYTE4(v220);
  }
  char v92 = 1;
  swift_beginAccess();
  *(_DWORD *)uint64_t v177 = v91;
  v177[4] = v89;
  uint64_t v93 = sub_1D7A9C908();
  uint64_t v94 = (void *)v93;
  if (v93)
  {
    LODWORD(v220) = 0;
    BYTE4(v220) = 1;
    MEMORY[0x1D947B340](v93, &v220);

    LODWORD(v94) = v220;
    char v92 = BYTE4(v220);
  }
  char v95 = 1;
  swift_beginAccess();
  *(_DWORD *)uint64_t v178 = v94;
  v178[4] = v92;
  uint64_t v96 = sub_1D7A9C908();
  uint64_t v97 = (void *)v96;
  if (v96)
  {
    LODWORD(v220) = 0;
    BYTE4(v220) = 1;
    MEMORY[0x1D947B340](v96, &v220);

    LODWORD(v97) = v220;
    char v95 = BYTE4(v220);
  }
  char v98 = 1;
  swift_beginAccess();
  *(_DWORD *)uint64_t v179 = v97;
  v179[4] = v95;
  uint64_t v99 = sub_1D7A9C908();
  uint64_t v100 = (void *)v99;
  if (v99)
  {
    LODWORD(v220) = 0;
    BYTE4(v220) = 1;
    MEMORY[0x1D947B340](v99, &v220);

    LODWORD(v100) = v220;
    char v98 = BYTE4(v220);
  }
  swift_beginAccess();
  *(_DWORD *)uint64_t v204 = v100;
  v204[4] = v98;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA843600);
  uint64_t v101 = swift_allocObject();
  *(_OWORD *)(v101 + 16) = xmmword_1D7AA0A40;
  uint64_t v102 = sub_1D78C4038(0, (unint64_t *)&qword_1EBDF90E0);
  *(void *)(v101 + 32) = v102;
  *(void *)(v101 + 40) = v35;
  sub_1D7A9C918();
  swift_bridgeObjectRelease();
  if (v222)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA843620);
    if (swift_dynamicCast()) {
      uint64_t v103 = v219;
    }
    else {
      uint64_t v103 = 0;
    }
  }
  else
  {
    sub_1D7867598((uint64_t)&v220);
    uint64_t v103 = 0;
  }
  swift_beginAccess();
  *uint64_t v180 = v103;
  swift_bridgeObjectRelease();
  uint64_t v104 = swift_allocObject();
  *(_OWORD *)(v104 + 16) = xmmword_1D7AA0A40;
  *(void *)(v104 + 32) = v102;
  *(void *)(v104 + 40) = v35;
  sub_1D7A9C918();
  swift_bridgeObjectRelease();
  if (v222)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA843620);
    if (swift_dynamicCast()) {
      uint64_t v105 = v218;
    }
    else {
      uint64_t v105 = 0;
    }
  }
  else
  {
    sub_1D7867598((uint64_t)&v220);
    uint64_t v105 = 0;
  }
  char v106 = 1;
  swift_beginAccess();
  *uint64_t v181 = v105;
  swift_bridgeObjectRelease();
  uint64_t v107 = (void *)sub_1D7A9C908();
  if (v107)
  {
    uint64_t v220 = 0;
    char v221 = 1;
    sub_1D7A9C658();

    uint64_t v107 = v220;
    char v106 = v221;
  }
  char v108 = 1;
  swift_beginAccess();
  *(void *)uint64_t v182 = v107;
  v182[8] = v106;
  uint64_t v109 = (void *)sub_1D7A9C908();
  if (v109)
  {
    uint64_t v220 = 0;
    char v221 = 1;
    sub_1D7A9C658();

    uint64_t v109 = v220;
    char v108 = v221;
  }
  char v110 = 1;
  swift_beginAccess();
  *(void *)uint64_t v183 = v109;
  v183[8] = v108;
  uint64_t v111 = (void *)sub_1D7A9C908();
  if (v111)
  {
    uint64_t v220 = 0;
    char v221 = 1;
    sub_1D7A9C658();

    uint64_t v111 = v220;
    char v110 = v221;
  }
  swift_beginAccess();
  *(void *)uint64_t v184 = v111;
  v184[8] = v110;
  uint64_t v112 = sub_1D7A9C908();
  char v113 = 2;
  if (v112)
  {
    uint64_t v114 = (void *)v112;
    LOBYTE(v220) = 2;
    MEMORY[0x1D947B1A0](v112, &v220);

    char v113 = (char)v220;
  }
  swift_beginAccess();
  *uint64_t v185 = v113;
  uint64_t v115 = sub_1D7A9C908();
  char v116 = 2;
  if (v115)
  {
    int v117 = (void *)v115;
    LOBYTE(v220) = 2;
    MEMORY[0x1D947B1A0](v115, &v220);

    char v116 = (char)v220;
  }
  swift_beginAccess();
  *uint64_t v186 = v116;
  uint64_t v118 = sub_1D7A9C908();
  char v119 = 2;
  if (v118)
  {
    uint64_t v120 = (void *)v118;
    LOBYTE(v220) = 2;
    MEMORY[0x1D947B1A0](v118, &v220);

    char v119 = (char)v220;
  }
  swift_beginAccess();
  char *v187 = v119;
  uint64_t v121 = sub_1D7A9C908();
  char v122 = 2;
  if (v121)
  {
    uint64_t v123 = (void *)v121;
    LOBYTE(v220) = 2;
    MEMORY[0x1D947B1A0](v121, &v220);

    char v122 = (char)v220;
  }
  swift_beginAccess();
  *uint64_t v188 = v122;
  sub_1D78C4038(0, (unint64_t *)&qword_1EBDF8260);
  uint64_t v124 = sub_1D7A9C908();
  if (v124)
  {
    uint64_t v125 = (void *)v124;
    uint64_t v126 = sub_1D7A9BFC8();
    uint64_t v128 = v127;
  }
  else
  {
    uint64_t v126 = 0;
    uint64_t v128 = 0;
  }
  swift_beginAccess();
  uint64_t *v189 = v126;
  v189[1] = v128;
  swift_bridgeObjectRelease();
  uint64_t v129 = sub_1D7A9C908();
  if (v129)
  {
    uint64_t v130 = (void *)v129;
    uint64_t v131 = sub_1D7A9BFC8();
    uint64_t v133 = v132;
  }
  else
  {
    uint64_t v131 = 0;
    uint64_t v133 = 0;
  }
  swift_beginAccess();
  *uint64_t v190 = v131;
  v190[1] = v133;
  swift_bridgeObjectRelease();
  uint64_t v134 = swift_allocObject();
  *(_OWORD *)(v134 + 16) = xmmword_1D7AA0A40;
  *(void *)(v134 + 32) = v102;
  uint64_t v135 = type metadata accessor for IQPoint();
  *(void *)(v134 + 40) = v135;
  sub_1D7A9C918();
  swift_bridgeObjectRelease();
  if (v222)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA843618);
    if (swift_dynamicCast()) {
      uint64_t v136 = v217;
    }
    else {
      uint64_t v136 = 0;
    }
  }
  else
  {
    sub_1D7867598((uint64_t)&v220);
    uint64_t v136 = 0;
  }
  swift_beginAccess();
  *uint64_t v191 = v136;
  swift_bridgeObjectRelease();
  uint64_t v137 = swift_allocObject();
  *(_OWORD *)(v137 + 16) = xmmword_1D7AA0A40;
  *(void *)(v137 + 32) = v102;
  *(void *)(v137 + 40) = v135;
  sub_1D7A9C918();
  swift_bridgeObjectRelease();
  if (v222)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA843618);
    if (swift_dynamicCast()) {
      uint64_t v138 = v216;
    }
    else {
      uint64_t v138 = 0;
    }
  }
  else
  {
    sub_1D7867598((uint64_t)&v220);
    uint64_t v138 = 0;
  }
  swift_beginAccess();
  *uint64_t v192 = v138;
  swift_bridgeObjectRelease();
  uint64_t v139 = swift_allocObject();
  *(_OWORD *)(v139 + 16) = xmmword_1D7AA0A40;
  *(void *)(v139 + 32) = v102;
  *(void *)(v139 + 40) = v135;
  sub_1D7A9C918();
  swift_bridgeObjectRelease();
  if (v222)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA843618);
    if (swift_dynamicCast()) {
      uint64_t v140 = v215;
    }
    else {
      uint64_t v140 = 0;
    }
  }
  else
  {
    sub_1D7867598((uint64_t)&v220);
    uint64_t v140 = 0;
  }
  swift_beginAccess();
  *uint64_t v193 = v140;
  swift_bridgeObjectRelease();
  uint64_t v141 = swift_allocObject();
  *(_OWORD *)(v141 + 16) = xmmword_1D7AA0A40;
  *(void *)(v141 + 32) = v102;
  *(void *)(v141 + 40) = v135;
  sub_1D7A9C918();
  swift_bridgeObjectRelease();
  if (v222)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA843618);
    if (swift_dynamicCast()) {
      uint64_t v142 = v214;
    }
    else {
      uint64_t v142 = 0;
    }
  }
  else
  {
    sub_1D7867598((uint64_t)&v220);
    uint64_t v142 = 0;
  }
  swift_beginAccess();
  void *v194 = v142;
  swift_bridgeObjectRelease();
  type metadata accessor for FuzzyMatchAssessment();
  uint64_t v143 = sub_1D7A9C908();
  swift_beginAccess();
  uint64_t v144 = *v195;
  *uint64_t v195 = (void *)v143;

  uint64_t v145 = swift_allocObject();
  *(_OWORD *)(v145 + 16) = xmmword_1D7AA0A40;
  *(void *)(v145 + 32) = v102;
  *(void *)(v145 + 40) = v35;
  sub_1D7A9C918();
  swift_bridgeObjectRelease();
  if (v222)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA843610);
    if (swift_dynamicCast()) {
      uint64_t v146 = v213;
    }
    else {
      uint64_t v146 = 0;
    }
  }
  else
  {
    sub_1D7867598((uint64_t)&v220);
    uint64_t v146 = 0;
  }
  swift_beginAccess();
  *uint64_t v196 = v146;
  swift_bridgeObjectRelease();
  uint64_t v147 = sub_1D7A9C908();
  if (v147)
  {
    id v148 = (void *)v147;
    uint64_t v149 = sub_1D7A9BFC8();
    uint64_t v151 = v150;
  }
  else
  {
    uint64_t v149 = 0;
    uint64_t v151 = 0;
  }
  swift_beginAccess();
  uint64_t *v197 = v149;
  v197[1] = v151;
  swift_bridgeObjectRelease();
  uint64_t v152 = sub_1D7A9C908();
  if (v152)
  {
    uint64_t v153 = (void *)v152;
    uint64_t v154 = sub_1D7A9BFC8();
    uint64_t v156 = v155;
  }
  else
  {
    uint64_t v154 = 0;
    uint64_t v156 = 0;
  }
  swift_beginAccess();
  *uint64_t v198 = v154;
  v198[1] = v156;
  swift_bridgeObjectRelease();
  uint64_t v157 = sub_1D7A9C908();
  char v158 = 2;
  if (v157)
  {
    uint64_t v159 = (void *)v157;
    v212[0] = 2;
    MEMORY[0x1D947B1A0](v157, v212);

    char v158 = v212[0];
  }
  swift_beginAccess();
  char *v199 = v158;
  uint64_t v160 = (void *)sub_1D7A9C908();
  if (v160)
  {
    uint64_t v210 = 0;
    char v211 = 1;
    sub_1D7A9C658();

    uint64_t v160 = 0;
  }
  swift_beginAccess();
  *(void *)uint64_t v200 = v160;
  v200[8] = 1;
  uint64_t v161 = (void *)sub_1D7A9C908();
  if (v161)
  {
    uint64_t v208 = 0;
    uint64_t v209 = 0;
    sub_1D7A9BFB8();
  }
  swift_beginAccess();
  *uint64_t v201 = 0;
  v201[1] = 0;
  swift_bridgeObjectRelease();
  uint64_t v162 = (void *)sub_1D7A9C908();
  if (v162)
  {
    uint64_t v206 = 0;
    char v207 = 1;
    sub_1D7A9C658();

    uint64_t v162 = 0;
  }
  swift_beginAccess();
  *(void *)uint64_t v203 = v162;
  v203[8] = 1;

  v205.receiver = v202;
  v205.super_class = (Class)type metadata accessor for ImageQualityMetrics();
  return objc_msgSendSuper2(&v205, sel_init);
}

uint64_t type metadata accessor for IQPoint()
{
  return self;
}

uint64_t type metadata accessor for FuzzyMatchAssessment()
{
  return self;
}

id sub_1D78DB6F4()
{
  uint64_t v1 = &v0[OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_firstName];
  *(void *)uint64_t v1 = 0;
  v1[8] = 1;
  char v2 = &v0[OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_lastName];
  *(void *)char v2 = 0;
  v2[8] = 1;
  objc_super v3 = &v0[OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_state];
  *(void *)objc_super v3 = 0;
  v3[8] = 1;
  uint64_t v4 = &v0[OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_houseNumber];
  *(void *)uint64_t v4 = 0;
  v4[8] = 1;
  uint64_t v5 = &v0[OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_street];
  *(void *)uint64_t v5 = 0;
  v5[8] = 1;
  uint64_t v6 = &v0[OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_dob];
  *(void *)uint64_t v6 = 0;
  uint64_t v19 = v6;
  v6[8] = 1;
  uint64_t v7 = &v0[OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_postalCode];
  *(void *)uint64_t v7 = 0;
  uint64_t v21 = v7;
  v7[8] = 1;
  sub_1D78C4038(0, (unint64_t *)&qword_1EBDF93C0);
  uint64_t v20 = v0;
  uint64_t v8 = (void *)sub_1D7A9C908();
  if (v8)
  {
    uint64_t v35 = 0;
    char v36 = 1;
    sub_1D7A9C658();

    uint64_t v8 = 0;
  }
  swift_beginAccess();
  *(void *)uint64_t v1 = v8;
  v1[8] = 1;
  uint64_t v9 = (void *)sub_1D7A9C908();
  if (v9)
  {
    uint64_t v33 = 0;
    char v34 = 1;
    sub_1D7A9C658();

    uint64_t v9 = 0;
  }
  swift_beginAccess();
  *(void *)char v2 = v9;
  v2[8] = 1;
  uint64_t v10 = (void *)sub_1D7A9C908();
  if (v10)
  {
    uint64_t v31 = 0;
    char v32 = 1;
    sub_1D7A9C658();

    uint64_t v10 = 0;
  }
  swift_beginAccess();
  *(void *)objc_super v3 = v10;
  v3[8] = 1;
  uint64_t v11 = sub_1D7A9C908();
  if (v11)
  {
    uint64_t v12 = (void *)v11;
    uint64_t v29 = 0;
    char v30 = 1;
    sub_1D7A9C658();
  }
  swift_beginAccess();
  *(void *)uint64_t v4 = 0;
  v4[8] = 1;
  uint64_t v13 = (void *)sub_1D7A9C908();
  if (v13)
  {
    uint64_t v27 = 0;
    char v28 = 1;
    sub_1D7A9C658();

    uint64_t v13 = 0;
  }
  swift_beginAccess();
  *(void *)uint64_t v5 = v13;
  v5[8] = 1;
  uint64_t v14 = sub_1D7A9C908();
  if (v14)
  {
    uint64_t v15 = (void *)v14;
    uint64_t v25 = 0;
    char v26 = 1;
    sub_1D7A9C658();
  }
  swift_beginAccess();
  *(void *)uint64_t v19 = 0;
  v19[8] = 1;
  uint64_t v16 = sub_1D7A9C908();
  if (v16)
  {
    char v17 = (void *)v16;
    uint64_t v23 = 0;
    char v24 = 1;
    sub_1D7A9C658();
  }
  swift_beginAccess();
  *(void *)uint64_t v21 = 0;
  v21[8] = 1;

  v22.receiver = v20;
  v22.super_class = (Class)type metadata accessor for FuzzyMatchAssessment();
  return objc_msgSendSuper2(&v22, sel_init);
}

uint64_t sub_1D78DBB04@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_blurriness, a2);
}

uint64_t sub_1D78DBB10(int *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_blurriness);
}

uint64_t sub_1D78DBB1C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_exposure, a2);
}

uint64_t sub_1D78DBB28(int *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_exposure);
}

uint64_t sub_1D78DBB34@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_cardDistortion, a2);
}

uint64_t sub_1D78DBB40(int *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_cardDistortion);
}

uint64_t sub_1D78DBB4C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceToImageRatio, a2);
}

uint64_t sub_1D78DBB58(int *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceToImageRatio);
}

uint64_t sub_1D78DBB64@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceCenteredRatio, a2);
}

uint64_t sub_1D78DBB70(int *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceCenteredRatio);
}

uint64_t sub_1D78DBB7C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headPitch, a2);
}

uint64_t sub_1D78DBB88(int *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headPitch);
}

uint64_t sub_1D78DBB94@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headRoll, a2);
}

uint64_t sub_1D78DBBA0(int *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headRoll);
}

uint64_t sub_1D78DBBAC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headYaw, a2);
}

uint64_t sub_1D78DBBB8(int *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headYaw);
}

uint64_t sub_1D78DBBC4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_blinkingConfidence, a2);
}

uint64_t sub_1D78DBBD0(int *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_blinkingConfidence);
}

uint64_t sub_1D78DBBDC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_prescriptionConfidence, a2);
}

uint64_t sub_1D78DBBE8(int *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_prescriptionConfidence);
}

uint64_t sub_1D78DBBF4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_sunglassesConfidence, a2);
}

uint64_t sub_1D78DBC00(int *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_sunglassesConfidence);
}

uint64_t sub_1D78DBC0C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_facemaskConfidence, a2);
}

uint64_t sub_1D78DBC18(int *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_facemaskConfidence);
}

uint64_t sub_1D78DBC24@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headgearConfidence, a2);
}

uint64_t sub_1D78DBC30(int *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headgearConfidence);
}

uint64_t sub_1D78DBC3C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_captureTime, a2);
}

uint64_t sub_1D78DBC48(int *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_captureTime);
}

uint64_t sub_1D78DBC54@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceCaptureQuality, a2);
}

uint64_t sub_1D78DBC60(int *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceCaptureQuality);
}

uint64_t sub_1D78DBC6C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentSize, a2);
}

uint64_t sub_1D78DBC78(int *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentSize);
}

uint64_t sub_1D78DBC84@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentRotation, a2);
}

uint64_t sub_1D78DBC90(int *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentRotation);
}

uint64_t sub_1D78DBC9C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentSkew, a2);
}

uint64_t sub_1D78DBCA8(int *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentSkew);
}

uint64_t sub_1D78DBCB4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_leftDrift, a2);
}

uint64_t sub_1D78DBCC0(int *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_leftDrift);
}

uint64_t sub_1D78DBCCC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rightDrift, a2);
}

uint64_t sub_1D78DBCD8(int *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rightDrift);
}

uint64_t sub_1D78DBCE4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_upDrift, a2);
}

uint64_t sub_1D78DBCF0(int *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_upDrift);
}

uint64_t sub_1D78DBCFC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_downDrift, a2);
}

uint64_t keypath_getTm@<X0>(void *a1@<X0>, void *a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a1 + *a2;
  uint64_t result = swift_beginAccess();
  char v6 = *(unsigned char *)(v4 + 4);
  *(_DWORD *)a3 = *(_DWORD *)v4;
  *(unsigned char *)(a3 + 4) = v6;
  return result;
}

uint64_t sub_1D78DBD60(int *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_downDrift);
}

uint64_t keypath_setTm(int *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  int v5 = *a1;
  char v6 = *((unsigned char *)a1 + 4);
  uint64_t v7 = *a2 + *a5;
  uint64_t result = swift_beginAccess();
  *(_DWORD *)uint64_t v7 = v5;
  *(unsigned char *)(v7 + 4) = v6;
  return result;
}

uint64_t sub_1D78DBDC8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return keypath_get_87Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceConfidences, a2);
}

uint64_t sub_1D78DBDD4(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_1D78D377C(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceConfidences);
}

uint64_t sub_1D78DBDF4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return keypath_get_87Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headgearConfidences, a2);
}

uint64_t sub_1D78DBE00(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_1D78D377C(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headgearConfidences);
}

uint64_t sub_1D78DBE20@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_get_91Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_numFaces, a2);
}

uint64_t sub_1D78DBE2C(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_92Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_numFaces);
}

uint64_t sub_1D78DBE38@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_get_91Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_luxLevel, a2);
}

uint64_t sub_1D78DBE44(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_92Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_luxLevel);
}

uint64_t sub_1D78DBE50@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_get_91Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_skinTone, a2);
}

uint64_t sub_1D78DBE5C(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_92Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_skinTone);
}

uint64_t sub_1D78DBE68@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_97Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_pdf417Detected, a2);
}

uint64_t sub_1D78DBE74(char *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_98Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_pdf417Detected);
}

uint64_t sub_1D78DBE80@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_97Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isAAMVACompliant, a2);
}

uint64_t sub_1D78DBE8C(char *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_98Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isAAMVACompliant);
}

uint64_t sub_1D78DBE98@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_97Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isAutoCaptured, a2);
}

uint64_t sub_1D78DBEA4(char *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_98Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isAutoCaptured);
}

uint64_t sub_1D78DBEB0@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_97Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isFlashEnabled, a2);
}

uint64_t sub_1D78DBEBC(char *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_98Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isFlashEnabled);
}

uint64_t sub_1D78DBEC8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return keypath_get_105Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_issuerNumber, a2);
}

uint64_t sub_1D78DBED4(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_1D78D3B3C(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_issuerNumber);
}

uint64_t sub_1D78DBEF4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return keypath_get_105Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentType, a2);
}

uint64_t sub_1D78DBF00(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_1D78D3B3C(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentType);
}

uint64_t sub_1D78DBF20@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return keypath_get_87Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_originalVertices, a2);
}

uint64_t sub_1D78DBF2C(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_1D78D377C(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_originalVertices);
}

uint64_t sub_1D78DBF4C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return keypath_get_87Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_targetVertices, a2);
}

uint64_t sub_1D78DBF58(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_1D78D377C(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_targetVertices);
}

uint64_t sub_1D78DBF78@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return keypath_get_87Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rectangleCorners, a2);
}

uint64_t sub_1D78DBF84(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_1D78D377C(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rectangleCorners);
}

uint64_t sub_1D78DBFA4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return keypath_get_87Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentCorners, a2);
}

uint64_t sub_1D78DBFB0(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_1D78D377C(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentCorners);
}

id sub_1D78DBFD0@<X0>(void *a1@<X0>, void **a2@<X8>)
{
  objc_super v3 = (void **)(*a1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_fuzzyMatchAssessment);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *a2 = *v3;
  return v4;
}

uint64_t sub_1D78DC038@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return keypath_get_87Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_closestMatchAssessments, a2);
}

uint64_t keypath_get_87Tm@<X0>(void *a1@<X0>, void *a2@<X3>, void *a3@<X8>)
{
  uint64_t v4 = (void *)(*a1 + *a2);
  swift_beginAccess();
  *a3 = *v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D78DC098(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_1D78D377C(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_closestMatchAssessments);
}

uint64_t sub_1D78DC0B8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return keypath_get_105Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_modelDecision, a2);
}

uint64_t sub_1D78DC0C4(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_1D78D3B3C(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_modelDecision);
}

uint64_t sub_1D78DC0E4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return keypath_get_105Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_modelVersion, a2);
}

uint64_t sub_1D78DC0F0(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_1D78D3B3C(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_modelVersion);
}

uint64_t sub_1D78DC110@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_97Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_exploration, a2);
}

uint64_t keypath_get_97Tm@<X0>(void *a1@<X0>, void *a2@<X3>, unsigned char *a3@<X8>)
{
  uint64_t v4 = (unsigned char *)(*a1 + *a2);
  uint64_t result = swift_beginAccess();
  *a3 = *v4;
  return result;
}

uint64_t sub_1D78DC16C(char *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_98Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_exploration);
}

uint64_t keypath_set_98Tm(char *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  char v5 = *a1;
  char v6 = (unsigned char *)(*a2 + *a5);
  uint64_t result = swift_beginAccess();
  unsigned char *v6 = v5;
  return result;
}

uint64_t sub_1D78DC1C4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_get_91Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rescanCount, a2);
}

uint64_t sub_1D78DC1D0(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_92Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rescanCount);
}

uint64_t sub_1D78DC1DC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return keypath_get_105Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_livenessChute, a2);
}

uint64_t keypath_get_105Tm@<X0>(void *a1@<X0>, void *a2@<X3>, void *a3@<X8>)
{
  uint64_t v4 = (void *)(*a1 + *a2);
  swift_beginAccess();
  uint64_t v5 = v4[1];
  *a3 = *v4;
  a3[1] = v5;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D78DC23C(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_1D78D3B3C(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_livenessChute);
}

uint64_t sub_1D78DC25C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_get_91Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_errorCode, a2);
}

uint64_t sub_1D78DC268(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_92Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_errorCode);
}

uint64_t sub_1D78DC278(int *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_134Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x);
}

uint64_t sub_1D78DC288(int *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_134Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared7IQPoint_y);
}

uint64_t keypath_set_134Tm(int *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  int v5 = *a1;
  char v6 = (_DWORD *)(*a2 + *a5);
  uint64_t result = swift_beginAccess();
  _DWORD *v6 = v5;
  return result;
}

uint64_t sub_1D78DC2E8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_get_91Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_firstName, a2);
}

uint64_t sub_1D78DC2F4(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_92Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_firstName);
}

uint64_t sub_1D78DC300@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_get_91Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_lastName, a2);
}

uint64_t sub_1D78DC30C(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_92Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_lastName);
}

uint64_t sub_1D78DC318@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_get_91Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_state, a2);
}

uint64_t sub_1D78DC324(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_92Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_state);
}

uint64_t sub_1D78DC330@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_get_91Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_houseNumber, a2);
}

uint64_t sub_1D78DC33C(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_92Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_houseNumber);
}

uint64_t sub_1D78DC348@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_get_91Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_street, a2);
}

uint64_t sub_1D78DC354(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_92Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_street);
}

uint64_t sub_1D78DC360@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_get_91Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_dob, a2);
}

uint64_t sub_1D78DC36C(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_92Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_dob);
}

uint64_t sub_1D78DC378@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_get_91Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_postalCode, a2);
}

uint64_t keypath_get_91Tm@<X0>(void *a1@<X0>, void *a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a1 + *a2;
  uint64_t result = swift_beginAccess();
  char v6 = *(unsigned char *)(v4 + 8);
  *(void *)a3 = *(void *)v4;
  *(unsigned char *)(a3 + 8) = v6;
  return result;
}

uint64_t sub_1D78DC3DC(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_92Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_postalCode);
}

uint64_t keypath_set_92Tm(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = *a1;
  char v6 = *((unsigned char *)a1 + 8);
  uint64_t v7 = *a2 + *a5;
  uint64_t result = swift_beginAccess();
  *(void *)uint64_t v7 = v5;
  *(unsigned char *)(v7 + 8) = v6;
  return result;
}

uint64_t method lookup function for ImageQualityMetrics(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ImageQualityMetrics);
}

uint64_t dispatch thunk of ImageQualityMetrics.blurriness.getter()
{
  unint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1B8))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of ImageQualityMetrics.blurriness.setter(unint64_t a1)
{
  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x1C0))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of ImageQualityMetrics.blurriness.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1C8))();
}

uint64_t dispatch thunk of ImageQualityMetrics.exposure.getter()
{
  unint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1D0))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of ImageQualityMetrics.exposure.setter(unint64_t a1)
{
  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x1D8))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of ImageQualityMetrics.exposure.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1E0))();
}

uint64_t dispatch thunk of ImageQualityMetrics.cardDistortion.getter()
{
  unint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1E8))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of ImageQualityMetrics.cardDistortion.setter(unint64_t a1)
{
  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x1F0))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of ImageQualityMetrics.cardDistortion.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1F8))();
}

uint64_t dispatch thunk of ImageQualityMetrics.faceToImageRatio.getter()
{
  unint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x200))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of ImageQualityMetrics.faceToImageRatio.setter(unint64_t a1)
{
  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x208))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of ImageQualityMetrics.faceToImageRatio.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x210))();
}

uint64_t dispatch thunk of ImageQualityMetrics.faceCenteredRatio.getter()
{
  unint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x218))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of ImageQualityMetrics.faceCenteredRatio.setter(unint64_t a1)
{
  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x220))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of ImageQualityMetrics.faceCenteredRatio.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x228))();
}

uint64_t dispatch thunk of ImageQualityMetrics.headPitch.getter()
{
  unint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x230))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of ImageQualityMetrics.headPitch.setter(unint64_t a1)
{
  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x238))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of ImageQualityMetrics.headPitch.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x240))();
}

uint64_t dispatch thunk of ImageQualityMetrics.headRoll.getter()
{
  unint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x248))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of ImageQualityMetrics.headRoll.setter(unint64_t a1)
{
  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x250))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of ImageQualityMetrics.headRoll.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x258))();
}

uint64_t dispatch thunk of ImageQualityMetrics.headYaw.getter()
{
  unint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x260))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of ImageQualityMetrics.headYaw.setter(unint64_t a1)
{
  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x268))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of ImageQualityMetrics.headYaw.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x270))();
}

uint64_t dispatch thunk of ImageQualityMetrics.blinkingConfidence.getter()
{
  unint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x278))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of ImageQualityMetrics.blinkingConfidence.setter(unint64_t a1)
{
  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x280))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of ImageQualityMetrics.blinkingConfidence.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x288))();
}

uint64_t dispatch thunk of ImageQualityMetrics.prescriptionConfidence.getter()
{
  unint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x290))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of ImageQualityMetrics.prescriptionConfidence.setter(unint64_t a1)
{
  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x298))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of ImageQualityMetrics.prescriptionConfidence.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2A0))();
}

uint64_t dispatch thunk of ImageQualityMetrics.sunglassesConfidence.getter()
{
  unint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2A8))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of ImageQualityMetrics.sunglassesConfidence.setter(unint64_t a1)
{
  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x2B0))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of ImageQualityMetrics.sunglassesConfidence.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2B8))();
}

uint64_t dispatch thunk of ImageQualityMetrics.facemaskConfidence.getter()
{
  unint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2C0))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of ImageQualityMetrics.facemaskConfidence.setter(unint64_t a1)
{
  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x2C8))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of ImageQualityMetrics.facemaskConfidence.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2D0))();
}

uint64_t dispatch thunk of ImageQualityMetrics.headgearConfidence.getter()
{
  unint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2D8))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of ImageQualityMetrics.headgearConfidence.setter(unint64_t a1)
{
  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x2E0))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of ImageQualityMetrics.headgearConfidence.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2E8))();
}

uint64_t dispatch thunk of ImageQualityMetrics.captureTime.getter()
{
  unint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2F0))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of ImageQualityMetrics.captureTime.setter(unint64_t a1)
{
  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x2F8))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of ImageQualityMetrics.captureTime.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x300))();
}

uint64_t dispatch thunk of ImageQualityMetrics.faceCaptureQuality.getter()
{
  unint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x308))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of ImageQualityMetrics.faceCaptureQuality.setter(unint64_t a1)
{
  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x310))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of ImageQualityMetrics.faceCaptureQuality.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x318))();
}

uint64_t dispatch thunk of ImageQualityMetrics.documentSize.getter()
{
  unint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x320))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of ImageQualityMetrics.documentSize.setter(unint64_t a1)
{
  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x328))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of ImageQualityMetrics.documentSize.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x330))();
}

uint64_t dispatch thunk of ImageQualityMetrics.documentRotation.getter()
{
  unint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x338))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of ImageQualityMetrics.documentRotation.setter(unint64_t a1)
{
  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x340))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of ImageQualityMetrics.documentRotation.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x348))();
}

uint64_t dispatch thunk of ImageQualityMetrics.documentSkew.getter()
{
  unint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x350))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of ImageQualityMetrics.documentSkew.setter(unint64_t a1)
{
  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x358))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of ImageQualityMetrics.documentSkew.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x360))();
}

uint64_t dispatch thunk of ImageQualityMetrics.leftDrift.getter()
{
  unint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x368))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of ImageQualityMetrics.leftDrift.setter(unint64_t a1)
{
  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x370))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of ImageQualityMetrics.leftDrift.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x378))();
}

uint64_t dispatch thunk of ImageQualityMetrics.rightDrift.getter()
{
  unint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x380))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of ImageQualityMetrics.rightDrift.setter(unint64_t a1)
{
  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x388))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of ImageQualityMetrics.rightDrift.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x390))();
}

uint64_t dispatch thunk of ImageQualityMetrics.upDrift.getter()
{
  unint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x398))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of ImageQualityMetrics.upDrift.setter(unint64_t a1)
{
  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x3A0))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of ImageQualityMetrics.upDrift.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x3A8))();
}

uint64_t dispatch thunk of ImageQualityMetrics.downDrift.getter()
{
  unint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x3B0))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of ImageQualityMetrics.downDrift.setter(unint64_t a1)
{
  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x3B8))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of ImageQualityMetrics.downDrift.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x3C0))();
}

uint64_t dispatch thunk of ImageQualityMetrics.faceConfidences.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x3C8))();
}

uint64_t dispatch thunk of ImageQualityMetrics.faceConfidences.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x3D0))();
}

uint64_t dispatch thunk of ImageQualityMetrics.faceConfidences.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x3D8))();
}

uint64_t dispatch thunk of ImageQualityMetrics.headgearConfidences.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x3E0))();
}

uint64_t dispatch thunk of ImageQualityMetrics.headgearConfidences.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x3E8))();
}

uint64_t dispatch thunk of ImageQualityMetrics.headgearConfidences.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x3F0))();
}

uint64_t dispatch thunk of ImageQualityMetrics.numFaces.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x3F8))();
}

uint64_t dispatch thunk of ImageQualityMetrics.numFaces.setter(uint64_t a1, char a2)
{
  return (*(uint64_t (**)(uint64_t, void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x400))(a1, a2 & 1);
}

uint64_t dispatch thunk of ImageQualityMetrics.numFaces.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x408))();
}

uint64_t dispatch thunk of ImageQualityMetrics.luxLevel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x410))();
}

uint64_t dispatch thunk of ImageQualityMetrics.luxLevel.setter(uint64_t a1, char a2)
{
  return (*(uint64_t (**)(uint64_t, void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x418))(a1, a2 & 1);
}

uint64_t dispatch thunk of ImageQualityMetrics.luxLevel.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x420))();
}

uint64_t dispatch thunk of ImageQualityMetrics.skinTone.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x428))();
}

uint64_t dispatch thunk of ImageQualityMetrics.skinTone.setter(uint64_t a1, char a2)
{
  return (*(uint64_t (**)(uint64_t, void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x430))(a1, a2 & 1);
}

uint64_t dispatch thunk of ImageQualityMetrics.skinTone.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x438))();
}

uint64_t dispatch thunk of ImageQualityMetrics.pdf417Detected.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x440))();
}

uint64_t dispatch thunk of ImageQualityMetrics.pdf417Detected.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x448))();
}

uint64_t dispatch thunk of ImageQualityMetrics.pdf417Detected.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x450))();
}

uint64_t dispatch thunk of ImageQualityMetrics.isAAMVACompliant.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x458))();
}

uint64_t dispatch thunk of ImageQualityMetrics.isAAMVACompliant.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x460))();
}

uint64_t dispatch thunk of ImageQualityMetrics.isAAMVACompliant.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x468))();
}

uint64_t dispatch thunk of ImageQualityMetrics.isAutoCaptured.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x470))();
}

uint64_t dispatch thunk of ImageQualityMetrics.isAutoCaptured.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x478))();
}

uint64_t dispatch thunk of ImageQualityMetrics.isAutoCaptured.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x480))();
}

uint64_t dispatch thunk of ImageQualityMetrics.isFlashEnabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x488))();
}

uint64_t dispatch thunk of ImageQualityMetrics.isFlashEnabled.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x490))();
}

uint64_t dispatch thunk of ImageQualityMetrics.isFlashEnabled.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x498))();
}

uint64_t dispatch thunk of ImageQualityMetrics.issuerNumber.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x4A0))();
}

uint64_t dispatch thunk of ImageQualityMetrics.issuerNumber.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x4A8))();
}

uint64_t dispatch thunk of ImageQualityMetrics.issuerNumber.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x4B0))();
}

uint64_t dispatch thunk of ImageQualityMetrics.documentType.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x4B8))();
}

uint64_t dispatch thunk of ImageQualityMetrics.documentType.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x4C0))();
}

uint64_t dispatch thunk of ImageQualityMetrics.documentType.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x4C8))();
}

uint64_t dispatch thunk of ImageQualityMetrics.originalVertices.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x4D0))();
}

uint64_t dispatch thunk of ImageQualityMetrics.originalVertices.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x4D8))();
}

uint64_t dispatch thunk of ImageQualityMetrics.originalVertices.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x4E0))();
}

uint64_t dispatch thunk of ImageQualityMetrics.targetVertices.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x4E8))();
}

uint64_t dispatch thunk of ImageQualityMetrics.targetVertices.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x4F0))();
}

uint64_t dispatch thunk of ImageQualityMetrics.targetVertices.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x4F8))();
}

uint64_t dispatch thunk of ImageQualityMetrics.rectangleCorners.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x500))();
}

uint64_t dispatch thunk of ImageQualityMetrics.rectangleCorners.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x508))();
}

uint64_t dispatch thunk of ImageQualityMetrics.rectangleCorners.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x510))();
}

uint64_t dispatch thunk of ImageQualityMetrics.documentCorners.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x518))();
}

uint64_t dispatch thunk of ImageQualityMetrics.documentCorners.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x520))();
}

uint64_t dispatch thunk of ImageQualityMetrics.documentCorners.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x528))();
}

uint64_t dispatch thunk of ImageQualityMetrics.fuzzyMatchAssessment.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x530))();
}

uint64_t dispatch thunk of ImageQualityMetrics.fuzzyMatchAssessment.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x538))();
}

uint64_t dispatch thunk of ImageQualityMetrics.fuzzyMatchAssessment.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x540))();
}

uint64_t dispatch thunk of ImageQualityMetrics.closestMatchAssessments.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x548))();
}

uint64_t dispatch thunk of ImageQualityMetrics.closestMatchAssessments.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x550))();
}

uint64_t dispatch thunk of ImageQualityMetrics.closestMatchAssessments.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x558))();
}

uint64_t dispatch thunk of ImageQualityMetrics.modelDecision.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x560))();
}

uint64_t dispatch thunk of ImageQualityMetrics.modelDecision.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x568))();
}

uint64_t dispatch thunk of ImageQualityMetrics.modelDecision.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x570))();
}

uint64_t dispatch thunk of ImageQualityMetrics.modelVersion.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x578))();
}

uint64_t dispatch thunk of ImageQualityMetrics.modelVersion.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x580))();
}

uint64_t dispatch thunk of ImageQualityMetrics.modelVersion.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x588))();
}

uint64_t dispatch thunk of ImageQualityMetrics.exploration.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x590))();
}

uint64_t dispatch thunk of ImageQualityMetrics.exploration.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x598))();
}

uint64_t dispatch thunk of ImageQualityMetrics.exploration.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x5A0))();
}

uint64_t dispatch thunk of ImageQualityMetrics.rescanCount.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x5A8))();
}

uint64_t dispatch thunk of ImageQualityMetrics.rescanCount.setter(uint64_t a1, char a2)
{
  return (*(uint64_t (**)(uint64_t, void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x5B0))(a1, a2 & 1);
}

uint64_t dispatch thunk of ImageQualityMetrics.rescanCount.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x5B8))();
}

uint64_t dispatch thunk of ImageQualityMetrics.livenessChute.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x5C0))();
}

uint64_t dispatch thunk of ImageQualityMetrics.livenessChute.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x5C8))();
}

uint64_t dispatch thunk of ImageQualityMetrics.livenessChute.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x5D0))();
}

uint64_t dispatch thunk of ImageQualityMetrics.errorCode.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x5D8))();
}

uint64_t dispatch thunk of ImageQualityMetrics.errorCode.setter(uint64_t a1, char a2)
{
  return (*(uint64_t (**)(uint64_t, void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x5E0))(a1, a2 & 1);
}

uint64_t dispatch thunk of ImageQualityMetrics.errorCode.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x5E8))();
}

uint64_t dispatch thunk of ImageQualityMetrics.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 1520))();
}

uint64_t dispatch thunk of ImageQualityMetrics.encode(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x5F8))();
}

uint64_t dispatch thunk of ImageQualityMetrics.getSubset(flags:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x600))();
}

uint64_t method lookup function for IQPoint(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for IQPoint);
}

uint64_t dispatch thunk of IQPoint.x.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of IQPoint.x.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of IQPoint.x.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of IQPoint.y.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of IQPoint.y.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of IQPoint.y.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of IQPoint.__allocating_init(x:y:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of IQPoint.__allocating_init(point:)()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of IQPoint.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t dispatch thunk of IQPoint.encode(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8))();
}

uint64_t method lookup function for FuzzyMatchAssessment(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for FuzzyMatchAssessment);
}

uint64_t dispatch thunk of FuzzyMatchAssessment.firstName.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of FuzzyMatchAssessment.firstName.setter(uint64_t a1, char a2)
{
  return (*(uint64_t (**)(uint64_t, void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x90))(a1, a2 & 1);
}

uint64_t dispatch thunk of FuzzyMatchAssessment.firstName.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of FuzzyMatchAssessment.lastName.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of FuzzyMatchAssessment.lastName.setter(uint64_t a1, char a2)
{
  return (*(uint64_t (**)(uint64_t, void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0xA8))(a1, a2 & 1);
}

uint64_t dispatch thunk of FuzzyMatchAssessment.lastName.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of FuzzyMatchAssessment.state.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of FuzzyMatchAssessment.state.setter(uint64_t a1, char a2)
{
  return (*(uint64_t (**)(uint64_t, void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0xC0))(a1, a2 & 1);
}

uint64_t dispatch thunk of FuzzyMatchAssessment.state.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of FuzzyMatchAssessment.houseNumber.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of FuzzyMatchAssessment.houseNumber.setter(uint64_t a1, char a2)
{
  return (*(uint64_t (**)(uint64_t, void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0xD8))(a1, a2 & 1);
}

uint64_t dispatch thunk of FuzzyMatchAssessment.houseNumber.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of FuzzyMatchAssessment.street.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of FuzzyMatchAssessment.street.setter(uint64_t a1, char a2)
{
  return (*(uint64_t (**)(uint64_t, void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0xF0))(a1, a2 & 1);
}

uint64_t dispatch thunk of FuzzyMatchAssessment.street.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of FuzzyMatchAssessment.dob.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x100))();
}

uint64_t dispatch thunk of FuzzyMatchAssessment.dob.setter(uint64_t a1, char a2)
{
  return (*(uint64_t (**)(uint64_t, void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x108))(a1, a2 & 1);
}

uint64_t dispatch thunk of FuzzyMatchAssessment.dob.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x110))();
}

uint64_t dispatch thunk of FuzzyMatchAssessment.postalCode.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x118))();
}

uint64_t dispatch thunk of FuzzyMatchAssessment.postalCode.setter(uint64_t a1, char a2)
{
  return (*(uint64_t (**)(uint64_t, void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x120))(a1, a2 & 1);
}

uint64_t dispatch thunk of FuzzyMatchAssessment.postalCode.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x128))();
}

uint64_t dispatch thunk of FuzzyMatchAssessment.__allocating_init(firstName:lastName:state:houseNumber:street:dob:postalCode:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  LOBYTE(a10) = a10 & 1;
  LOBYTE(a12) = a12 & 1;
  return (*(uint64_t (**)(uint64_t, void, uint64_t, void, uint64_t, void, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 304))(a1, a2 & 1, a3, a4 & 1, a5, a6 & 1, a7, a8 & 1, a9, a10, a11, a12, a13);
}

uint64_t dispatch thunk of FuzzyMatchAssessment.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 312))();
}

uint64_t dispatch thunk of FuzzyMatchAssessment.encode(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x140))();
}

uint64_t static IdentityProofingImageDimensions.supportsSecureCoding.getter()
{
  return byte_1EA843630;
}

uint64_t static IdentityProofingImageDimensions.supportsSecureCoding.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  byte_1EA843630 = a1;
  return result;
}

uint64_t (*static IdentityProofingImageDimensions.supportsSecureCoding.modify())()
{
  return j_j__swift_endAccess;
}

void *IdentityProofingImageDimensions.idFront.getter()
{
  unint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC13CoreIDVShared31IdentityProofingImageDimensions_idFront);
  id v2 = v1;
  return v1;
}

void *IdentityProofingImageDimensions.idBack.getter()
{
  unint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC13CoreIDVShared31IdentityProofingImageDimensions_idBack);
  id v2 = v1;
  return v1;
}

void *IdentityProofingImageDimensions.selfie.getter()
{
  unint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC13CoreIDVShared31IdentityProofingImageDimensions_selfie);
  id v2 = v1;
  return v1;
}

id IdentityProofingImageDimensions.__allocating_init(idFront:idBack:selfie:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (char *)objc_allocWithZone(v3);
  *(void *)&v7[OBJC_IVAR____TtC13CoreIDVShared31IdentityProofingImageDimensions_idFront] = a1;
  *(void *)&v7[OBJC_IVAR____TtC13CoreIDVShared31IdentityProofingImageDimensions_idBack] = a2;
  *(void *)&v7[OBJC_IVAR____TtC13CoreIDVShared31IdentityProofingImageDimensions_selfie] = a3;
  v9.receiver = v7;
  v9.super_class = v3;
  return objc_msgSendSuper2(&v9, sel_init);
}

id IdentityProofingImageDimensions.init(idFront:idBack:selfie:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v3[OBJC_IVAR____TtC13CoreIDVShared31IdentityProofingImageDimensions_idFront] = a1;
  *(void *)&v3[OBJC_IVAR____TtC13CoreIDVShared31IdentityProofingImageDimensions_idBack] = a2;
  *(void *)&v3[OBJC_IVAR____TtC13CoreIDVShared31IdentityProofingImageDimensions_selfie] = a3;
  v9.receiver = v3;
  v9.super_class = ObjectType;
  return objc_msgSendSuper2(&v9, sel_init);
}

id IdentityProofingImageDimensions.__allocating_init(coder:)(void *a1)
{
  id v2 = v1;
  id v4 = objc_allocWithZone(v2);
  type metadata accessor for IdentityImageDimension();
  uint64_t v5 = (char *)v4;
  *(void *)&v5[OBJC_IVAR____TtC13CoreIDVShared31IdentityProofingImageDimensions_idFront] = sub_1D7A9C908();
  *(void *)&v5[OBJC_IVAR____TtC13CoreIDVShared31IdentityProofingImageDimensions_idBack] = sub_1D7A9C908();
  *(void *)&v5[OBJC_IVAR____TtC13CoreIDVShared31IdentityProofingImageDimensions_selfie] = sub_1D7A9C908();

  v8.receiver = v5;
  v8.super_class = v2;
  id v6 = objc_msgSendSuper2(&v8, sel_init);

  return v6;
}

id IdentityProofingImageDimensions.init(coder:)(void *a1)
{
  id v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  type metadata accessor for IdentityImageDimension();
  uint64_t v5 = v2;
  *(void *)&v5[OBJC_IVAR____TtC13CoreIDVShared31IdentityProofingImageDimensions_idFront] = sub_1D7A9C908();
  *(void *)&v5[OBJC_IVAR____TtC13CoreIDVShared31IdentityProofingImageDimensions_idBack] = sub_1D7A9C908();
  *(void *)&v5[OBJC_IVAR____TtC13CoreIDVShared31IdentityProofingImageDimensions_selfie] = sub_1D7A9C908();

  v8.receiver = v5;
  v8.super_class = ObjectType;
  id v6 = objc_msgSendSuper2(&v8, sel_init);

  return v6;
}

uint64_t type metadata accessor for IdentityImageDimension()
{
  return self;
}

Swift::Void __swiftcall IdentityProofingImageDimensions.encode(with:)(NSCoder with)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared31IdentityProofingImageDimensions_idFront);
  id v4 = (void *)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeObject:v3 forKey:v4];

  uint64_t v5 = *(void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared31IdentityProofingImageDimensions_idBack);
  id v6 = (void *)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeObject:v5 forKey:v6];

  uint64_t v7 = *(void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared31IdentityProofingImageDimensions_selfie);
  id v8 = (id)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeObject:v7 forKey:v8];
}

uint64_t IdentityProofingImageDimensions.debugDescription.getter()
{
  sub_1D7A9CC48();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + OBJC_IVAR____TtC13CoreIDVShared31IdentityProofingImageDimensions_idFront)) {
    IdentityImageDimension.debugDescription.getter();
  }
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  if (*(void *)(v0 + OBJC_IVAR____TtC13CoreIDVShared31IdentityProofingImageDimensions_idBack)) {
    IdentityImageDimension.debugDescription.getter();
  }
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  if (*(void *)(v0 + OBJC_IVAR____TtC13CoreIDVShared31IdentityProofingImageDimensions_selfie)) {
    IdentityImageDimension.debugDescription.getter();
  }
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  return 0x284449746E6F7246;
}

uint64_t IdentityImageDimension.debugDescription.getter()
{
  uint64_t v2 = sub_1D7A9D258();
  sub_1D7A9C128();
  sub_1D7A9D258();
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  if ((*(unsigned char *)(v0 + OBJC_IVAR____TtC13CoreIDVShared22IdentityImageDimension_scale + 8) & 1) == 0) {
    sub_1D7A9C5A8();
  }
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  return v2;
}

void IdentityProofingImageDimensions.init()()
{
}

uint64_t static IdentityImageDimension.supportsSecureCoding.getter()
{
  return byte_1EA843631;
}

uint64_t static IdentityImageDimension.supportsSecureCoding.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  byte_1EA843631 = a1;
  return result;
}

uint64_t (*static IdentityImageDimension.supportsSecureCoding.modify())()
{
  return j__swift_endAccess;
}

uint64_t IdentityImageDimension.height.getter()
{
  return *(void *)(v0 + OBJC_IVAR____TtC13CoreIDVShared22IdentityImageDimension_height);
}

uint64_t IdentityImageDimension.width.getter()
{
  return *(void *)(v0 + OBJC_IVAR____TtC13CoreIDVShared22IdentityImageDimension_width);
}

uint64_t IdentityImageDimension.scale.getter()
{
  return *(void *)(v0 + OBJC_IVAR____TtC13CoreIDVShared22IdentityImageDimension_scale);
}

id IdentityImageDimension.__allocating_init(height:width:scale:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  objc_super v9 = (char *)objc_allocWithZone(v4);
  *(void *)&v9[OBJC_IVAR____TtC13CoreIDVShared22IdentityImageDimension_height] = a1;
  *(void *)&v9[OBJC_IVAR____TtC13CoreIDVShared22IdentityImageDimension_width] = a2;
  uint64_t v10 = &v9[OBJC_IVAR____TtC13CoreIDVShared22IdentityImageDimension_scale];
  *(void *)uint64_t v10 = a3;
  v10[8] = a4 & 1;
  v12.receiver = v9;
  v12.super_class = v4;
  return objc_msgSendSuper2(&v12, sel_init);
}

id IdentityImageDimension.init(height:width:scale:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v4[OBJC_IVAR____TtC13CoreIDVShared22IdentityImageDimension_height] = a1;
  *(void *)&v4[OBJC_IVAR____TtC13CoreIDVShared22IdentityImageDimension_width] = a2;
  uint64_t v10 = &v4[OBJC_IVAR____TtC13CoreIDVShared22IdentityImageDimension_scale];
  *(void *)uint64_t v10 = a3;
  v10[8] = a4 & 1;
  v12.receiver = v4;
  v12.super_class = ObjectType;
  return objc_msgSendSuper2(&v12, sel_init);
}

id IdentityImageDimension.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  id v4 = sub_1D78E0348(a1);

  return v4;
}

id IdentityImageDimension.init(coder:)(void *a1)
{
  id v2 = sub_1D78E0348(a1);

  return v2;
}

Swift::Void __swiftcall IdentityImageDimension.encode(with:)(NSCoder with)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared22IdentityImageDimension_height);
  id v4 = (void *)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeInteger:v3 forKey:v4];

  uint64_t v5 = *(void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared22IdentityImageDimension_width);
  id v6 = (void *)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeInteger:v5 forKey:v6];

  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC13CoreIDVShared22IdentityImageDimension_scale + 8)) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = sub_1D7A9C588();
  }
  id v8 = (id)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeObject:v7 forKey:v8];
  swift_unknownObjectRelease();
}

id sub_1D78E0240(void *a1, uint64_t a2, void (*a3)(void))
{
  id v4 = a1;
  a3();

  uint64_t v5 = (void *)sub_1D7A9BF98();
  swift_bridgeObjectRelease();
  return v5;
}

id IdentityImageDimension.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void IdentityImageDimension.init()()
{
}

id sub_1D78E0348(void *a1)
{
  id v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v5 = v2;
  id v6 = (void *)sub_1D7A9BF98();
  id v7 = objc_msgSend(a1, sel_decodeIntegerForKey_, v6);

  *(void *)&v5[OBJC_IVAR____TtC13CoreIDVShared22IdentityImageDimension_height] = v7;
  id v8 = (void *)sub_1D7A9BF98();
  id v9 = objc_msgSend(a1, sel_decodeIntegerForKey_, v8);

  *(void *)&v5[OBJC_IVAR____TtC13CoreIDVShared22IdentityImageDimension_width] = v9;
  sub_1D78E0538();
  uint64_t v10 = sub_1D7A9C908();
  char v11 = 1;
  if (v10)
  {
    objc_super v12 = (void *)v10;
    uint64_t v16 = 0;
    char v17 = 1;
    MEMORY[0x1D947B310](v10, &v16);

    uint64_t v13 = v16;
    char v11 = v17;
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v14 = &v5[OBJC_IVAR____TtC13CoreIDVShared22IdentityImageDimension_scale];
  *(void *)uint64_t v14 = v13;
  v14[8] = v11;

  v18.receiver = v5;
  v18.super_class = ObjectType;
  return objc_msgSendSuper2(&v18, sel_init);
}

uint64_t type metadata accessor for IdentityProofingImageDimensions()
{
  return self;
}

uint64_t method lookup function for IdentityProofingImageDimensions(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for IdentityProofingImageDimensions);
}

uint64_t dispatch thunk of IdentityProofingImageDimensions.__allocating_init(idFront:idBack:selfie:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of IdentityProofingImageDimensions.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t method lookup function for IdentityImageDimension(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for IdentityImageDimension);
}

uint64_t dispatch thunk of IdentityImageDimension.__allocating_init(height:width:scale:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v4 + 104))(a1, a2, a3, a4 & 1);
}

uint64_t dispatch thunk of IdentityImageDimension.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

unint64_t sub_1D78E0538()
{
  unint64_t result = qword_1EBDF93C0;
  if (!qword_1EBDF93C0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EBDF93C0);
  }
  return result;
}

unint64_t static DigitalPresentmentRemoteAlertDefs.UserInfoKey.displayConfig.getter()
{
  return 0xD00000000000001FLL;
}

unint64_t DigitalPresentmentRemoteAlertDefs.BSActionID.description.getter()
{
  return 0xD000000000000010;
}

uint64_t DigitalPresentmentRemoteAlertDefs.BSActionID.rawValue.getter()
{
  return 0;
}

uint64_t DigitalPresentmentRemoteAlertDefs.BSActionID.init(rawValue:)@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = result != 0;
  return result;
}

unint64_t sub_1D78E0640()
{
  return DigitalPresentmentRemoteAlertDefs.BSActionID.description.getter();
}

CoreIDVShared::DigitalPresentmentRemoteAlertDefs::BSSettingIndex_optional __swiftcall DigitalPresentmentRemoteAlertDefs.BSSettingIndex.init(rawValue:)(Swift::Int rawValue)
{
  if (rawValue == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (!rawValue) {
    char v2 = 0;
  }
  *id v1 = v2;
  return (CoreIDVShared::DigitalPresentmentRemoteAlertDefs::BSSettingIndex_optional)rawValue;
}

uint64_t DigitalPresentmentRemoteAlertDefs.BSSettingIndex.rawValue.getter()
{
  return *v0;
}

uint64_t DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent.description.getter()
{
  unint64_t v1 = v0[1];
  if (v1 >> 60 == 15) {
    return 0x656C6C65636E6163;
  }
  uint64_t v3 = *v0;
  sub_1D7860790(*v0, v1);
  sub_1D7A9CC48();
  swift_bridgeObjectRelease();
  switch(v1 >> 62)
  {
    case 1uLL:
      if (!__OFSUB__(HIDWORD(v3), v3)) {
        goto LABEL_7;
      }
      __break(1u);
LABEL_9:
      __break(1u);
      JUMPOUT(0x1D78E07C8);
    case 2uLL:
      if (!__OFSUB__(*(void *)(v3 + 24), *(void *)(v3 + 16))) {
        goto LABEL_7;
      }
      goto LABEL_9;
    default:
LABEL_7:
      sub_1D7A9D258();
      sub_1D7A9C128();
      swift_bridgeObjectRelease();
      sub_1D7A9C128();
      sub_1D7871BDC(v3, v1);
      uint64_t result = 0xD00000000000001BLL;
      break;
  }
  return result;
}

uint64_t DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent.encode()()
{
  uint64_t v0 = sub_1D7A9B5F8();
  MEMORY[0x1F4188790](v0, v1, v2, v3, v4, v5, v6, v7);
  sub_1D7A9AC48();
  swift_allocObject();
  sub_1D7A9AC38();
  sub_1D78E0AF0();
  uint64_t v8 = sub_1D7A9AC28();
  swift_release();
  return v8;
}

unint64_t sub_1D78E0AF0()
{
  unint64_t result = qword_1EA8436D0;
  if (!qword_1EA8436D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8436D0);
  }
  return result;
}

uint64_t static DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent.decode(data:)@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v2 = sub_1D7A9B5F8();
  MEMORY[0x1F4188790](v2, v3, v4, v5, v6, v7, v8, v9);
  sub_1D7A9ABF8();
  swift_allocObject();
  sub_1D7A9ABE8();
  sub_1D78E18DC();
  sub_1D7A9ABD8();
  uint64_t result = swift_release();
  *a1 = v11;
  return result;
}

uint64_t sub_1D78E0E64()
{
  return 1635017060;
}

uint64_t sub_1D78E0E74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_1D7A9D358();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1D78E0EFC(uint64_t a1)
{
  unint64_t v2 = sub_1D78E19D8();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1D78E0F38(uint64_t a1)
{
  unint64_t v2 = sub_1D78E19D8();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1D78E0F74()
{
  return 0;
}

uint64_t sub_1D78E0F80@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t sub_1D78E0FB0(uint64_t a1)
{
  unint64_t v2 = sub_1D78E1984();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1D78E0FEC(uint64_t a1)
{
  unint64_t v2 = sub_1D78E1984();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1D78E1028()
{
  if (*v0) {
    return 0x656C6C65636E6163;
  }
  else {
    return 0x69746E6568747561;
  }
}

uint64_t sub_1D78E1074@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1D78E2244(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D78E109C(uint64_t a1)
{
  unint64_t v2 = sub_1D78E1930();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1D78E10D8(uint64_t a1)
{
  unint64_t v2 = sub_1D78E1930();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8436E0);
  uint64_t v40 = *(void *)(v3 - 8);
  uint64_t v41 = v3;
  MEMORY[0x1F4188790](v3, v4, v5, v6, v7, v8, v9, v10);
  uint64_t v39 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8436E8);
  uint64_t v42 = *(void *)(v12 - 8);
  uint64_t v43 = v12;
  MEMORY[0x1F4188790](v12, v13, v14, v15, v16, v17, v18, v19);
  uint64_t v21 = (char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8436F0);
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22, v24, v25, v26, v27, v28, v29, v30);
  char v32 = (char *)&v38 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v33 = v1[1];
  uint64_t v38 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D78E1930();
  sub_1D7A9D6E8();
  if (v33 >> 60 == 15)
  {
    LOBYTE(v44) = 1;
    sub_1D78E1984();
    char v34 = v39;
    sub_1D7A9D178();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v34, v41);
    return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v32, v22);
  }
  else
  {
    LOBYTE(v44) = 0;
    uint64_t v36 = v38;
    sub_1D7860790(v38, v33);
    sub_1D78E19D8();
    sub_1D7A9D178();
    uint64_t v44 = v36;
    unint64_t v45 = v33;
    sub_1D7871AD8();
    uint64_t v37 = v43;
    sub_1D7A9D228();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v21, v37);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v32, v22);
    return sub_1D7871BDC(v36, v33);
  }
}

uint64_t DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent.init(from:)@<X0>(void *a1@<X0>, long long *a2@<X8>)
{
  uint64_t v49 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA843710);
  uint64_t v50 = *(void *)(v3 - 8);
  uint64_t v51 = v3;
  MEMORY[0x1F4188790](v3, v4, v5, v6, v7, v8, v9, v10);
  uint64_t v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA843718);
  uint64_t v48 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13, v14, v15, v16, v17, v18, v19, v20);
  uint64_t v22 = (char *)&v47 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA843720);
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v23, v25, v26, v27, v28, v29, v30, v31);
  unint64_t v33 = (char *)&v47 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = a1[3];
  char v52 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v34);
  sub_1D78E1930();
  uint64_t v35 = v54;
  sub_1D7A9D6A8();
  if (v35) {
    goto LABEL_9;
  }
  uint64_t v47 = v13;
  uint64_t v37 = v50;
  uint64_t v36 = v51;
  uint64_t v54 = v24;
  uint64_t v38 = sub_1D7A9D158();
  if (*(void *)(v38 + 16) != 1)
  {
    uint64_t v40 = sub_1D7A9CCF8();
    swift_allocError();
    uint64_t v42 = v41;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA843728);
    void *v42 = &type metadata for DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent;
    sub_1D7A9D098();
    sub_1D7A9CCB8();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v40 - 8) + 104))(v42, *MEMORY[0x1E4FBBA70], v40);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v33, v23);
LABEL_9:
    uint64_t v44 = (uint64_t)v52;
    return __swift_destroy_boxed_opaque_existential_1(v44);
  }
  if (*(unsigned char *)(v38 + 32))
  {
    LOBYTE(v53) = 1;
    sub_1D78E1984();
    sub_1D7A9D088();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v12, v36);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v33, v23);
    long long v39 = xmmword_1D7AA0AC0;
  }
  else
  {
    LOBYTE(v53) = 0;
    sub_1D78E19D8();
    uint64_t v43 = v22;
    sub_1D7A9D088();
    sub_1D786073C();
    uint64_t v46 = v47;
    sub_1D7A9D148();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v43, v46);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v33, v23);
    long long v39 = v53;
  }
  uint64_t v44 = (uint64_t)v52;
  *uint64_t v49 = v39;
  return __swift_destroy_boxed_opaque_existential_1(v44);
}

uint64_t sub_1D78E18A8@<X0>(void *a1@<X0>, long long *a2@<X8>)
{
  return DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent.init(from:)(a1, a2);
}

uint64_t sub_1D78E18C0(void *a1)
{
  return DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent.encode(to:)(a1);
}

unint64_t sub_1D78E18DC()
{
  unint64_t result = qword_1EA8436D8;
  if (!qword_1EA8436D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8436D8);
  }
  return result;
}

unint64_t sub_1D78E1930()
{
  unint64_t result = qword_1EA8436F8;
  if (!qword_1EA8436F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8436F8);
  }
  return result;
}

unint64_t sub_1D78E1984()
{
  unint64_t result = qword_1EA843700;
  if (!qword_1EA843700)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA843700);
  }
  return result;
}

unint64_t sub_1D78E19D8()
{
  unint64_t result = qword_1EA843708;
  if (!qword_1EA843708)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA843708);
  }
  return result;
}

unint64_t sub_1D78E1A30()
{
  unint64_t result = qword_1EA843730;
  if (!qword_1EA843730)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA843730);
  }
  return result;
}

unint64_t sub_1D78E1A88()
{
  unint64_t result = qword_1EA843738;
  if (!qword_1EA843738)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA843738);
  }
  return result;
}

ValueMetadata *type metadata accessor for DigitalPresentmentRemoteAlertDefs()
{
  return &type metadata for DigitalPresentmentRemoteAlertDefs;
}

ValueMetadata *type metadata accessor for DigitalPresentmentRemoteAlertDefs.UserInfoKey()
{
  return &type metadata for DigitalPresentmentRemoteAlertDefs.UserInfoKey;
}

ValueMetadata *type metadata accessor for DigitalPresentmentRemoteAlertDefs.BSActionID()
{
  return &type metadata for DigitalPresentmentRemoteAlertDefs.BSActionID;
}

ValueMetadata *type metadata accessor for DigitalPresentmentRemoteAlertDefs.BSSettingIndex()
{
  return &type metadata for DigitalPresentmentRemoteAlertDefs.BSSettingIndex;
}

uint64_t *destroy for DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent(uint64_t *result)
{
  unint64_t v1 = result[1];
  if ((v1 & 0x3000000000000000) == 0) {
    return (uint64_t *)sub_1D78607E8(*result, v1);
  }
  return result;
}

uint64_t _s13CoreIDVShared33DigitalPresentmentRemoteAlertDefsV28DigitalPresentmentSheetEventOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = a2[1];
  if ((v3 & 0x3000000000000000) != 0)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    uint64_t v4 = *a2;
    sub_1D7860790(*a2, a2[1]);
    *(void *)a1 = v4;
    *(void *)(a1 + 8) = v3;
  }
  return a1;
}

uint64_t *assignWithCopy for DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = a2[1];
  uint64_t v6 = v5 & 0x3000000000000000;
  if ((v4 & 0x3000000000000000) == 0)
  {
    if (!v6)
    {
      uint64_t v9 = *a2;
      sub_1D7860790(v9, v5);
      uint64_t v10 = *a1;
      unint64_t v11 = a1[1];
      *a1 = v9;
      a1[1] = v5;
      sub_1D78607E8(v10, v11);
      return a1;
    }
    sub_1D78607E8(*a1, v4);
    goto LABEL_6;
  }
  if (v6)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  uint64_t v7 = *a2;
  sub_1D7860790(v7, v5);
  *a1 = v7;
  a1[1] = v5;
  return a1;
}

uint64_t *assignWithTake for DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4 = a1[1];
  if ((v4 & 0x3000000000000000) == 0)
  {
    uint64_t v5 = a2[1];
    if ((v5 & 0x3000000000000000) == 0)
    {
      uint64_t v7 = *a1;
      *a1 = *a2;
      a1[1] = v5;
      sub_1D78607E8(v7, v4);
      return a1;
    }
    sub_1D78607E8(*a1, v4);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xC && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 12);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  if (v3 + 1 >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xB)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 12;
    if (a3 >= 0xC) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xC) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0;
      *(void *)(result + 8) = (unint64_t)((4 * (a2 ^ 0xF)) | ((a2 ^ 0xF) >> 2)) << 60;
    }
  }
  return result;
}

uint64_t sub_1D78E1D34(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8) >> 60;
  if (((4 * v1) & 0xC) != 0) {
    return 16 - ((4 * v1) & 0xC | (v1 >> 2));
  }
  else {
    return 0;
  }
}

void *sub_1D78E1D5C(void *result, unsigned int a2)
{
  if (a2 > 0xC)
  {
    *unint64_t result = a2 - 13;
    result[1] = 0;
  }
  else if (a2)
  {
    *unint64_t result = 0;
    result[1] = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
  }
  return result;
}

ValueMetadata *type metadata accessor for DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent()
{
  return &type metadata for DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent;
}

unsigned char *_s13CoreIDVShared33DigitalPresentmentRemoteAlertDefsV14BSSettingIndexOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D78E1E68);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent.CodingKeys()
{
  return &type metadata for DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent.CodingKeys;
}

unsigned char *_s13CoreIDVShared33DigitalPresentmentRemoteAlertDefsV10BSActionIDOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1D78E1F3CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent.AuthenticatedCodingKeys()
{
  return &type metadata for DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent.AuthenticatedCodingKeys;
}

ValueMetadata *type metadata accessor for DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent.CancelledCodingKeys()
{
  return &type metadata for DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent.CancelledCodingKeys;
}

unint64_t sub_1D78E1F88()
{
  unint64_t result = qword_1EA843740;
  if (!qword_1EA843740)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA843740);
  }
  return result;
}

unint64_t sub_1D78E1FE0()
{
  unint64_t result = qword_1EA843748;
  if (!qword_1EA843748)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA843748);
  }
  return result;
}

unint64_t sub_1D78E2038()
{
  unint64_t result = qword_1EA843750;
  if (!qword_1EA843750)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA843750);
  }
  return result;
}

unint64_t sub_1D78E2090()
{
  unint64_t result = qword_1EA843758;
  if (!qword_1EA843758)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA843758);
  }
  return result;
}

unint64_t sub_1D78E20E8()
{
  unint64_t result = qword_1EA843760;
  if (!qword_1EA843760)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA843760);
  }
  return result;
}

unint64_t sub_1D78E2140()
{
  unint64_t result = qword_1EA843768;
  if (!qword_1EA843768)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA843768);
  }
  return result;
}

unint64_t sub_1D78E2198()
{
  unint64_t result = qword_1EA843770;
  if (!qword_1EA843770)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA843770);
  }
  return result;
}

unint64_t sub_1D78E21F0()
{
  unint64_t result = qword_1EA843778;
  if (!qword_1EA843778)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA843778);
  }
  return result;
}

uint64_t sub_1D78E2244(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x69746E6568747561 && a2 == 0xED00006465746163;
  if (v2 || (sub_1D7A9D358() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C6C65636E6163 && a2 == 0xE900000000000064)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_1D7A9D358();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

unint64_t IdentityProofingAvailability.init(rawValue:)(unint64_t result)
{
  if (result > 2) {
    return 0;
  }
  return result;
}

uint64_t *sub_1D78E2388@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *result;
  BOOL v3 = (unint64_t)*result > 2;
  if ((unint64_t)*result > 2) {
    uint64_t v2 = 0;
  }
  *(void *)a2 = v2;
  *(unsigned char *)(a2 + 8) = v3;
  return result;
}

unint64_t IdentityProofingActionStatus.init(rawValue:)(unint64_t a1)
{
  return sub_1D78E392C(a1);
}

unint64_t sub_1D78E23C4@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_1D78E392C(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t IdentityProofingActionStatus.debugDescription.getter(uint64_t a1)
{
  uint64_t result = 0xD000000000000017;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      return 0x6550737574617473;
    case 2:
      return 0x416F547964616572;
    case 3:
      return 1701736302;
    case 4:
      uint64_t v3 = 0x417265746E65;
      goto LABEL_14;
    case 5:
      return 0x6464417972746572;
    case 6:
      return 0xD000000000000016;
    case 7:
      return 0x6441746F6E6E6163;
    case 8:
      return 0x6F54656C62616E75;
    case 9:
      return 0x46676E6974696177;
    case 10:
      uint64_t v3 = 0x417972746572;
LABEL_14:
      uint64_t result = v3 & 0xFFFFFFFFFFFFLL | 0x7475000000000000;
      break;
    case 11:
      uint64_t result = 0x64657269707865;
      break;
    case 12:
      uint64_t result = 0x7373656E6576696CLL;
      break;
    default:
      sub_1D7A9D4A8();
      __break(1u);
      JUMPOUT(0x1D78E25E0);
  }
  return result;
}

uint64_t sub_1D78E2614()
{
  return IdentityProofingActionStatus.debugDescription.getter(*v0);
}

uint64_t IdentityTarget.init(rawValue:)(uint64_t a1)
{
  if (a1 == 2) {
    uint64_t v1 = 2;
  }
  else {
    uint64_t v1 = 0;
  }
  if (a1 == 1) {
    return 1;
  }
  else {
    return v1;
  }
}

uint64_t sub_1D78E2640()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D78E2688()
{
  return sub_1D7A9D618();
}

uint64_t sub_1D78E26B4()
{
  return sub_1D7A9D628();
}

void *sub_1D78E26F8@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  if (*result == 2) {
    uint64_t v2 = 2;
  }
  else {
    uint64_t v2 = *result == 1;
  }
  BOOL v3 = *result != 2 && *result != 1;
  *(void *)a2 = v2;
  *(unsigned char *)(a2 + 8) = v3;
  return result;
}

uint64_t IdentityTarget.debugDescription.getter(uint64_t a1)
{
  if (a1 == 1) {
    return 0x656E6F6870;
  }
  if (a1 == 2) {
    return 0x6863746177;
  }
  uint64_t result = sub_1D7A9D4A8();
  __break(1u);
  return result;
}

uint64_t sub_1D78E2794()
{
  if (*v0 == 1) {
    return 0x656E6F6870;
  }
  if (*v0 == 2) {
    return 0x6863746177;
  }
  uint64_t result = sub_1D7A9D4A8();
  __break(1u);
  return result;
}

uint64_t static IdentityProofingConfiguration.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t IdentityProofingConfiguration.state.getter()
{
  return sub_1D78E28A4(&OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_state);
}

uint64_t IdentityProofingConfiguration.country.getter()
{
  return sub_1D78E28A4(&OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_country);
}

uint64_t IdentityProofingConfiguration.targetDevice.getter()
{
  return *(void *)(v0 + OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_targetDevice);
}

uint64_t IdentityProofingConfiguration.actionStatus.getter()
{
  return *(void *)(v0 + OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_actionStatus);
}

uint64_t IdentityProofingConfiguration.credentialIdentifier.getter()
{
  return sub_1D78E28A4(&OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_credentialIdentifier);
}

uint64_t IdentityProofingConfiguration.productIdentifier.getter()
{
  return sub_1D78E28A4(&OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_productIdentifier);
}

uint64_t IdentityProofingConfiguration.axSettings.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t IdentityProofingConfiguration.accountKeyIdentifier.getter()
{
  return sub_1D78E28A4(&OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_accountKeyIdentifier);
}

uint64_t IdentityProofingConfiguration.extendedReviewURLString.getter()
{
  return sub_1D78E28A4(&OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_extendedReviewURLString);
}

uint64_t IdentityProofingConfiguration.learnMoreURLString.getter()
{
  return sub_1D78E28A4(&OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_learnMoreURLString);
}

uint64_t sub_1D78E28A4(void *a1)
{
  uint64_t v2 = *(void *)(v1 + *a1);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t IdentityProofingConfiguration.supplementalProvisioningData.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_supplementalProvisioningData);
  sub_1D786E9D8(v1, *(void *)(v0 + OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_supplementalProvisioningData + 8));
  return v1;
}

id IdentityProofingConfiguration.__allocating_init(state:country:targetDevice:actionStatus:credentialIdentifier:productIdentifier:axSettings:accountKeyIdentifier:extendedReviewURLString:learnMoreURLString:supplementalProvisioningData:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, char a8, long long a9, long long a10, long long a11, long long a12, long long a13, long long a14, uint64_t a15)
{
  char v22 = a6 & 1;
  char v23 = a8 & 1;
  id v24 = objc_allocWithZone(v15);
  return IdentityProofingConfiguration.init(state:country:targetDevice:actionStatus:credentialIdentifier:productIdentifier:axSettings:accountKeyIdentifier:extendedReviewURLString:learnMoreURLString:supplementalProvisioningData:)(a1, a2, a3, a4, a5, v22, a7, v23, a9, *((uint64_t *)&a9 + 1), a10, *((uint64_t *)&a10 + 1), a11, *((uint64_t *)&a11 + 1), a12, *((uint64_t *)&a12 + 1), a13, *((uint64_t *)&a13 + 1), a14,
           *((uint64_t *)&a14 + 1),
           a15);
}

id IdentityProofingConfiguration.init(state:country:targetDevice:actionStatus:credentialIdentifier:productIdentifier:axSettings:accountKeyIdentifier:extendedReviewURLString:learnMoreURLString:supplementalProvisioningData:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v29 = &v21[OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_state];
  *(void *)uint64_t v29 = a1;
  *((void *)v29 + 1) = a2;
  uint64_t v30 = &v21[OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_country];
  *(void *)uint64_t v30 = a3;
  *((void *)v30 + 1) = a4;
  uint64_t v31 = &v21[OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_targetDevice];
  *(void *)uint64_t v31 = a5;
  v31[8] = a6 & 1;
  uint64_t v32 = &v21[OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_actionStatus];
  *(void *)uint64_t v32 = a7;
  v32[8] = a8 & 1;
  unint64_t v33 = &v21[OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_credentialIdentifier];
  *(void *)unint64_t v33 = a9;
  *((void *)v33 + 1) = a10;
  uint64_t v34 = &v21[OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_productIdentifier];
  *(void *)uint64_t v34 = a11;
  *((void *)v34 + 1) = a12;
  *(void *)&v21[OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_axSettings] = a13;
  uint64_t v35 = &v21[OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_accountKeyIdentifier];
  *(void *)uint64_t v35 = a14;
  *((void *)v35 + 1) = a15;
  uint64_t v36 = &v21[OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_extendedReviewURLString];
  *(void *)uint64_t v36 = a16;
  *((void *)v36 + 1) = a17;
  uint64_t v37 = &v21[OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_learnMoreURLString];
  *(void *)uint64_t v37 = a18;
  *((void *)v37 + 1) = a19;
  uint64_t v38 = &v21[OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_supplementalProvisioningData];
  *(void *)uint64_t v38 = a20;
  *((void *)v38 + 1) = a21;
  v42.receiver = v21;
  v42.super_class = ObjectType;
  return objc_msgSendSuper2(&v42, sel_init);
}

Swift::Void __swiftcall IdentityProofingConfiguration.encode(with:)(NSCoder with)
{
  if (*(void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_state + 8)) {
    uint64_t v3 = sub_1D7A9BF98();
  }
  else {
    uint64_t v3 = 0;
  }
  char v4 = (void *)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeObject:v3 forKey:v4];
  swift_unknownObjectRelease();

  if (*(void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_country + 8)) {
    uint64_t v5 = sub_1D7A9BF98();
  }
  else {
    uint64_t v5 = 0;
  }
  char v6 = (void *)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeObject:v5 forKey:v6];
  swift_unknownObjectRelease();

  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_targetDevice + 8)) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = sub_1D7A9D348();
  }
  uint64_t v8 = (void *)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeObject:v7 forKey:v8];
  swift_unknownObjectRelease();

  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_actionStatus + 8)) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = sub_1D7A9D348();
  }
  uint64_t v10 = (void *)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeObject:v9 forKey:v10];
  swift_unknownObjectRelease();

  if (*(void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_credentialIdentifier + 8)) {
    uint64_t v11 = sub_1D7A9BF98();
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = (void *)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeObject:v11 forKey:v12];
  swift_unknownObjectRelease();

  if (*(void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_productIdentifier + 8)) {
    uint64_t v13 = sub_1D7A9BF98();
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = (void *)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeObject:v13 forKey:v14];
  swift_unknownObjectRelease();

  if (*(void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_axSettings)) {
    uint64_t v15 = sub_1D7A9C2F8();
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v16 = (void *)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeObject:v15 forKey:v16];
  swift_unknownObjectRelease();

  if (*(void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_accountKeyIdentifier + 8)) {
    uint64_t v17 = sub_1D7A9BF98();
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v18 = (void *)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeObject:v17 forKey:v18];
  swift_unknownObjectRelease();

  if (*(void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_extendedReviewURLString + 8)) {
    uint64_t v19 = sub_1D7A9BF98();
  }
  else {
    uint64_t v19 = 0;
  }
  uint64_t v20 = (void *)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeObject:v19 forKey:v20];
  swift_unknownObjectRelease();

  if (*(void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_learnMoreURLString + 8)) {
    uint64_t v21 = sub_1D7A9BF98();
  }
  else {
    uint64_t v21 = 0;
  }
  char v22 = (void *)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeObject:v21 forKey:v22];
  swift_unknownObjectRelease();

  if (*(void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_supplementalProvisioningData + 8) >> 60 == 15) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = sub_1D7A9AFF8();
  }
  id v24 = (void *)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeObject:v23 forKey:v24];
  swift_unknownObjectRelease();
}

id IdentityProofingConfiguration.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  id v4 = sub_1D78E393C(a1);

  return v4;
}

id IdentityProofingConfiguration.init(coder:)(void *a1)
{
  id v2 = sub_1D78E393C(a1);

  return v2;
}

void IdentityProofingConfiguration.init()()
{
}

uint64_t IdentityProofingConfiguration.description.getter()
{
  sub_1D7A9CC48();
  sub_1D7A9C128();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8437D8);
  sub_1D7A9C038();
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  swift_bridgeObjectRetain();
  sub_1D7A9C038();
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  if ((*(unsigned char *)(v0 + OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_targetDevice + 8) & 1) != 0
    || (uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_targetDevice), v1 == 1)
    || v1 == 2)
  {
    sub_1D7A9C038();
    sub_1D7A9C128();
    swift_bridgeObjectRelease();
    sub_1D7A9C128();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8437E0);
    sub_1D7A9C038();
    sub_1D7A9C128();
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    uint64_t result = sub_1D7A9D4A8();
    __break(1u);
  }
  return result;
}

uint64_t static IdentityProofingStatus.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t IdentityProofingStatus.activeConfigurations.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t IdentityProofingStatus.availability.getter()
{
  return *(void *)(v0 + OBJC_IVAR____TtC13CoreIDVShared22IdentityProofingStatus_availability);
}

id IdentityProofingStatus.__allocating_init(activeConfigurations:availability:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (char *)objc_allocWithZone(v2);
  *(void *)&v5[OBJC_IVAR____TtC13CoreIDVShared22IdentityProofingStatus_activeConfigurations] = a1;
  *(void *)&v5[OBJC_IVAR____TtC13CoreIDVShared22IdentityProofingStatus_availability] = a2;
  v7.receiver = v5;
  v7.super_class = v2;
  return objc_msgSendSuper2(&v7, sel_init);
}

id IdentityProofingStatus.init(activeConfigurations:availability:)(uint64_t a1, uint64_t a2)
{
  ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v2[OBJC_IVAR____TtC13CoreIDVShared22IdentityProofingStatus_activeConfigurations] = a1;
  *(void *)&v2[OBJC_IVAR____TtC13CoreIDVShared22IdentityProofingStatus_availability] = a2;
  v7.receiver = v2;
  v7.super_class = ObjectType;
  return objc_msgSendSuper2(&v7, sel_init);
}

id IdentityProofingStatus.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  id v4 = sub_1D78E3E24(a1);

  return v4;
}

id IdentityProofingStatus.init(coder:)(void *a1)
{
  id v2 = sub_1D78E3E24(a1);

  return v2;
}

Swift::Void __swiftcall IdentityProofingStatus.encode(with:)(NSCoder with)
{
  type metadata accessor for IdentityProofingConfiguration();
  id v3 = (void *)sub_1D7A9C2F8();
  id v4 = (void *)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeObject:v3 forKey:v4];

  uint64_t v5 = *(void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared22IdentityProofingStatus_availability);
  id v6 = (id)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeInt64:v5 forKey:v6];
}

id IdentityProofingStatus.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void IdentityProofingStatus.init()()
{
}

unint64_t sub_1D78E392C(unint64_t result)
{
  if (result > 0xC) {
    return 0;
  }
  return result;
}

id sub_1D78E393C(void *a1)
{
  id v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v5 = sub_1D78C4038(0, (unint64_t *)&qword_1EBDF8260);
  id v6 = v2;
  uint64_t v7 = sub_1D7A9C908();
  if (v7)
  {
    uint64_t v8 = (void *)v7;
    uint64_t v9 = sub_1D7A9BFC8();
    uint64_t v11 = v10;
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v11 = 0;
  }
  uint64_t v12 = (uint64_t *)&v6[OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_state];
  uint64_t *v12 = v9;
  v12[1] = v11;
  uint64_t v13 = sub_1D7A9C908();
  if (v13)
  {
    uint64_t v14 = (void *)v13;
    uint64_t v15 = sub_1D7A9BFC8();
    uint64_t v17 = v16;
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v17 = 0;
  }
  uint64_t v18 = (uint64_t *)&v6[OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_country];
  *uint64_t v18 = v15;
  v18[1] = v17;
  uint64_t v19 = (void *)sub_1D7A9BF98();
  id v20 = objc_msgSend(a1, sel_decodeInt64ForKey_, v19);

  if (v20 == (id)1 || v20 == (id)2)
  {
    char v21 = 0;
  }
  else
  {
    id v20 = 0;
    char v21 = 1;
  }
  char v22 = &v6[OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_targetDevice];
  *(void *)char v22 = v20;
  v22[8] = v21;
  uint64_t v23 = (void *)sub_1D7A9BF98();
  id v24 = objc_msgSend(a1, sel_decodeInt64ForKey_, v23);

  unint64_t v25 = sub_1D78E392C((unint64_t)v24);
  uint64_t v26 = &v6[OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_actionStatus];
  *(void *)uint64_t v26 = v25;
  v26[8] = v27 & 1;
  uint64_t v28 = sub_1D7A9C908();
  if (v28)
  {
    uint64_t v29 = (void *)v28;
    uint64_t v30 = sub_1D7A9BFC8();
    uint64_t v32 = v31;
  }
  else
  {
    uint64_t v30 = 0;
    uint64_t v32 = 0;
  }
  unint64_t v33 = (uint64_t *)&v6[OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_credentialIdentifier];
  *unint64_t v33 = v30;
  v33[1] = v32;
  uint64_t v34 = sub_1D7A9C908();
  if (v34)
  {
    uint64_t v35 = (void *)v34;
    uint64_t v36 = sub_1D7A9BFC8();
    uint64_t v38 = v37;
  }
  else
  {
    uint64_t v36 = 0;
    uint64_t v38 = 0;
  }
  long long v39 = (uint64_t *)&v6[OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_productIdentifier];
  uint64_t *v39 = v36;
  v39[1] = v38;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA843600);
  uint64_t v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_1D7AA0A40;
  *(void *)(v40 + 32) = sub_1D78C4038(0, (unint64_t *)&qword_1EBDF90E0);
  *(void *)(v40 + 40) = v5;
  sub_1D7A9C918();
  swift_bridgeObjectRelease();
  if (v71)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF7900);
    int v41 = swift_dynamicCast();
    uint64_t v42 = v68;
    if (!v41) {
      uint64_t v42 = 0;
    }
  }
  else
  {
    sub_1D7867598((uint64_t)v70);
    uint64_t v42 = 0;
  }
  *(void *)&v6[OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_axSettings] = v42;
  uint64_t v43 = sub_1D7A9C908();
  if (v43)
  {
    uint64_t v44 = (void *)v43;
    uint64_t v45 = sub_1D7A9BFC8();
    uint64_t v47 = v46;
  }
  else
  {
    uint64_t v45 = 0;
    uint64_t v47 = 0;
  }
  uint64_t v48 = (uint64_t *)&v6[OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_accountKeyIdentifier];
  *uint64_t v48 = v45;
  v48[1] = v47;
  uint64_t v49 = sub_1D7A9C908();
  if (v49)
  {
    uint64_t v50 = (void *)v49;
    uint64_t v51 = sub_1D7A9BFC8();
    uint64_t v53 = v52;
  }
  else
  {
    uint64_t v51 = 0;
    uint64_t v53 = 0;
  }
  uint64_t v54 = (uint64_t *)&v6[OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_extendedReviewURLString];
  *uint64_t v54 = v51;
  v54[1] = v53;
  uint64_t v55 = sub_1D7A9C908();
  if (v55)
  {
    char v56 = (void *)v55;
    uint64_t v57 = sub_1D7A9BFC8();
    uint64_t v59 = v58;
  }
  else
  {
    uint64_t v57 = 0;
    uint64_t v59 = 0;
  }
  uint64_t v60 = (uint64_t *)&v6[OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_learnMoreURLString];
  *uint64_t v60 = v57;
  v60[1] = v59;
  sub_1D78C4038(0, (unint64_t *)&qword_1EA847920);
  uint64_t v61 = sub_1D7A9C908();
  if (v61)
  {
    char v62 = (void *)v61;
    uint64_t v63 = sub_1D7A9B028();
    unint64_t v65 = v64;
  }
  else
  {
    uint64_t v63 = 0;
    unint64_t v65 = 0xF000000000000000;
  }
  uint64_t v66 = (uint64_t *)&v6[OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_supplementalProvisioningData];
  *uint64_t v66 = v63;
  v66[1] = v65;

  v69.receiver = v6;
  v69.super_class = ObjectType;
  return objc_msgSendSuper2(&v69, sel_init);
}

id sub_1D78E3E24(void *a1)
{
  id v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA843600);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1D7AA0A40;
  *(void *)(v5 + 32) = sub_1D78C4038(0, (unint64_t *)&qword_1EBDF90E0);
  *(void *)(v5 + 40) = type metadata accessor for IdentityProofingConfiguration();
  id v6 = v2;
  sub_1D7A9C918();
  swift_bridgeObjectRelease();
  if (v15)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA843818);
    if (swift_dynamicCast())
    {
      uint64_t v7 = v12;
      goto LABEL_6;
    }
  }
  else
  {
    sub_1D7867598((uint64_t)v14);
  }
  uint64_t v7 = MEMORY[0x1E4FBC860];
LABEL_6:
  *(void *)&v6[OBJC_IVAR____TtC13CoreIDVShared22IdentityProofingStatus_activeConfigurations] = v7;
  uint64_t v8 = (void *)sub_1D7A9BF98();
  id v9 = objc_msgSend(a1, sel_decodeInt64ForKey_, v8);

  uint64_t v10 = 2;
  if ((unint64_t)v9 < 2) {
    uint64_t v10 = (uint64_t)v9;
  }
  *(void *)&v6[OBJC_IVAR____TtC13CoreIDVShared22IdentityProofingStatus_availability] = v10;

  v13.receiver = v6;
  v13.super_class = ObjectType;
  return objc_msgSendSuper2(&v13, sel_init);
}

uint64_t type metadata accessor for IdentityProofingConfiguration()
{
  return self;
}

unint64_t sub_1D78E3FD8()
{
  unint64_t result = qword_1EA8437F8;
  if (!qword_1EA8437F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8437F8);
  }
  return result;
}

unint64_t sub_1D78E4030()
{
  unint64_t result = qword_1EA843800;
  if (!qword_1EA843800)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA843800);
  }
  return result;
}

unint64_t sub_1D78E4088()
{
  unint64_t result = qword_1EA843808;
  if (!qword_1EA843808)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA843808);
  }
  return result;
}

ValueMetadata *type metadata accessor for IdentityProofingAvailability()
{
  return &type metadata for IdentityProofingAvailability;
}

ValueMetadata *type metadata accessor for IdentityProofingActionStatus()
{
  return &type metadata for IdentityProofingActionStatus;
}

ValueMetadata *type metadata accessor for IdentityTarget()
{
  return &type metadata for IdentityTarget;
}

uint64_t method lookup function for IdentityProofingConfiguration(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for IdentityProofingConfiguration);
}

uint64_t dispatch thunk of IdentityProofingConfiguration.__allocating_init(state:country:targetDevice:actionStatus:credentialIdentifier:productIdentifier:axSettings:accountKeyIdentifier:extendedReviewURLString:learnMoreURLString:supplementalProvisioningData:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, char a8)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, void))(v8 + 168))(a1, a2, a3, a4, a5, a6 & 1, a7, a8 & 1);
}

uint64_t dispatch thunk of IdentityProofingConfiguration.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t type metadata accessor for IdentityProofingStatus()
{
  return self;
}

uint64_t method lookup function for IdentityProofingStatus(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for IdentityProofingStatus);
}

uint64_t dispatch thunk of IdentityProofingStatus.__allocating_init(activeConfigurations:availability:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of IdentityProofingStatus.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

BOOL static DIPBackgroundDeferralStatus.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t DIPBackgroundDeferralStatus.hash(into:)()
{
  return sub_1D7A9D5E8();
}

uint64_t DIPBackgroundDeferralStatus.hashValue.getter()
{
  return sub_1D7A9D628();
}

CoreIDVShared::DIPBackgroundActivitySettings __swiftcall DIPBackgroundActivitySettings.init()()
{
  *uint64_t v0 = 256;
  return result;
}

uint64_t DIPBackgroundActivitySettings.requireNetworkActivity.getter()
{
  return *v0;
}

uint64_t DIPBackgroundActivitySettings.requireNetworkActivity.setter(uint64_t result)
{
  *id v1 = result;
  return result;
}

uint64_t (*DIPBackgroundActivitySettings.requireNetworkActivity.modify())()
{
  return nullsub_1;
}

uint64_t DIPBackgroundActivitySettings.allowBattery.getter()
{
  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t DIPBackgroundActivitySettings.allowBattery.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 1) = result;
  return result;
}

uint64_t (*DIPBackgroundActivitySettings.allowBattery.modify())()
{
  return nullsub_1;
}

uint64_t DIPBackgroundActivitySettings.requireClassA.getter()
{
  return *(unsigned __int8 *)(v0 + 2);
}

uint64_t DIPBackgroundActivitySettings.requireClassA.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 2) = result;
  return result;
}

uint64_t (*DIPBackgroundActivitySettings.requireClassA.modify())()
{
  return nullsub_1;
}

uint64_t DIPBackgroundActivitySettings.requireInExpensiveNetworkConnectivity.getter()
{
  return *(unsigned __int8 *)(v0 + 3);
}

uint64_t DIPBackgroundActivitySettings.requireInExpensiveNetworkConnectivity.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 3) = result;
  return result;
}

uint64_t (*DIPBackgroundActivitySettings.requireInExpensiveNetworkConnectivity.modify())()
{
  return nullsub_1;
}

uint64_t sub_1D78E4358()
{
  type metadata accessor for DIPBackgroundActivityManager();
  uint64_t v0 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9988);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 16) = MEMORY[0x1E4FBC868];
  *(void *)(v0 + 16) = result;
  qword_1EBDF9760 = v0;
  return result;
}

uint64_t static DIPBackgroundActivityManager.sharedInstance.getter()
{
  if (qword_1EBDF9798 != -1) {
    swift_once();
  }
  return swift_retain();
}

uint64_t DIPBackgroundActivityManager.registerActivity(identifier:activity:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = sub_1D7A9B5F8();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10, v12, v13, v14, v15, v16, v17, v18);
  id v20 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v21 = __swift_project_value_buffer(v10, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v20, v21, v10);
  swift_bridgeObjectRetain_n();
  char v22 = sub_1D7A9B5D8();
  os_log_type_t v23 = sub_1D7A9C738();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v46 = v10;
    uint64_t v24 = swift_slowAlloc();
    uint64_t v48 = a3;
    unint64_t v25 = (uint8_t *)v24;
    uint64_t v26 = swift_slowAlloc();
    uint64_t v47 = v5;
    uint64_t v27 = v26;
    aBlock[0] = v26;
    uint64_t v49 = a4;
    *(_DWORD *)unint64_t v25 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v50 = sub_1D7923300(a1, a2, aBlock);
    a4 = v49;
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1D7853000, v22, v23, "Registering background activity %{public}s", v25, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v27, -1, -1);
    uint64_t v28 = v25;
    a3 = v48;
    MEMORY[0x1D947D740](v28, -1, -1);

    uint64_t v29 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v20, v46);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    uint64_t v29 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v20, v10);
  }
  MEMORY[0x1F4188790](v29, v30, v31, v32, v33, v34, v35, v36);
  *(&v45 - 4) = a1;
  *(&v45 - 3) = a2;
  uint64_t v38 = (uint64_t *)&v37[4];
  long long v39 = v37 + 6;
  *(&v45 - 2) = a3;
  *(&v45 - 1) = a4;
  os_unfair_lock_lock(v37 + 6);
  sub_1D78E97B8(v38);
  os_unfair_lock_unlock(v39);
  uint64_t v40 = (void *)swift_allocObject();
  v40[2] = a1;
  uint64_t v40[3] = a2;
  v40[4] = a3;
  v40[5] = a4;
  int v41 = (void *)*MEMORY[0x1E4F14158];
  aBlock[4] = (uint64_t)sub_1D78E97E0;
  aBlock[5] = (uint64_t)v40;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  void aBlock[2] = (uint64_t)sub_1D78E4804;
  aBlock[3] = (uint64_t)&block_descriptor_2;
  uint64_t v42 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_release();
  uint64_t v43 = sub_1D7A9C078();
  xpc_activity_register((const char *)(v43 + 32), v41, v42);
  swift_release();
  _Block_release(v42);
  return swift_release();
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  os_unfair_lock_s *v37;
  uint64_t *v38;
  os_unfair_lock_s *v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t aBlock[7];

  uint64_t v5 = v4;
  uint64_t v10 = sub_1D7A9B5F8();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10, v12, v13, v14, v15, v16, v17, v18);
  id v20 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v21 = __swift_project_value_buffer(v10, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v20, v21, v10);
  swift_bridgeObjectRetain_n();
  char v22 = sub_1D7A9B5D8();
  os_log_type_t v23 = sub_1D7A9C738();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v46 = v10;
    uint64_t v24 = swift_slowAlloc();
    uint64_t v48 = a3;
    unint64_t v25 = (uint8_t *)v24;
    uint64_t v26 = swift_slowAlloc();
    uint64_t v47 = v5;
    uint64_t v27 = v26;
    aBlock[0] = v26;
    uint64_t v49 = a4;
    *(_DWORD *)unint64_t v25 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v50 = sub_1D7923300(a1, a2, aBlock);
    a4 = v49;
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1D7853000, v22, v23, "Registering background activity %{public}s", v25, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v27, -1, -1);
    uint64_t v28 = v25;
    a3 = v48;
    MEMORY[0x1D947D740](v28, -1, -1);

    uint64_t v29 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v20, v46);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    uint64_t v29 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v20, v10);
  }
  MEMORY[0x1F4188790](v29, v30, v31, v32, v33, v34, v35, v36);
  *(&v45 - 4) = a1;
  *(&v45 - 3) = a2;
  uint64_t v38 = (uint64_t *)&v37[4];
  long long v39 = v37 + 6;
  *(&v45 - 2) = a3;
  *(&v45 - 1) = a4;
  os_unfair_lock_lock(v37 + 6);
  sub_1D78E9804(v38);
  os_unfair_lock_unlock(v39);
  uint64_t v40 = (void *)swift_allocObject();
  v40[2] = a1;
  uint64_t v40[3] = a2;
  v40[4] = a3;
  v40[5] = a4;
  int v41 = (void *)*MEMORY[0x1E4F14158];
  aBlock[4] = (uint64_t)sub_1D78E982C;
  aBlock[5] = (uint64_t)v40;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  void aBlock[2] = (uint64_t)sub_1D78E4804;
  aBlock[3] = (uint64_t)&block_descriptor_9;
  uint64_t v42 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_release();
  uint64_t v43 = sub_1D7A9C078();
  xpc_activity_register((const char *)(v43 + 32), v41, v42);
  swift_release();
  _Block_release(v42);
  return swift_release();
}

uint64_t sub_1D78E4804(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_1D78E4C50(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  swift_bridgeObjectRetain();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v14 = *a1;
  *a1 = 0x8000000000000000;
  sub_1D78A1428(a4, a5, a6, a2, a3, isUniquelyReferenced_nonNull_native);
  *a1 = v14;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall DIPBackgroundActivityManager.unregisterActivity(identifier:)(Swift::String identifier)
{
  uint64_t v2 = v1;
  object = identifier._object;
  uint64_t countAndFlagsBits = identifier._countAndFlagsBits;
  uint64_t v5 = sub_1D7A9B5F8();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7, v8, v9, v10, v11, v12, v13);
  uint64_t v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v16 = __swift_project_value_buffer(v5, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v15, v16, v5);
  swift_bridgeObjectRetain_n();
  uint64_t v17 = sub_1D7A9B5D8();
  os_log_type_t v18 = sub_1D7A9C738();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v35 = v2;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v36 = countAndFlagsBits;
    id v20 = (uint8_t *)v19;
    uint64_t v21 = swift_slowAlloc();
    uint64_t v38 = v21;
    *(_DWORD *)id v20 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v37 = sub_1D7923300(v36, (unint64_t)object, &v38);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1D7853000, v17, v18, "Unregistering background activity %{public}s", v20, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v21, -1, -1);
    char v22 = v20;
    uint64_t countAndFlagsBits = v36;
    MEMORY[0x1D947D740](v22, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v23 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v15, v5);
  MEMORY[0x1F4188790](v23, v24, v25, v26, v27, v28, v29, v30);
  *(&v35 - 2) = countAndFlagsBits;
  *(&v35 - 1) = (uint64_t)object;
  uint64_t v32 = (uint64_t *)&v31[4];
  uint64_t v33 = v31 + 6;
  os_unfair_lock_lock(v31 + 6);
  sub_1D78E9838(v32);
  os_unfair_lock_unlock(v33);
  uint64_t v34 = sub_1D7A9C078();
  xpc_activity_unregister((const char *)(v34 + 32));
  swift_release();
}

uint64_t sub_1D78E5004(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1D7A18684(a2, a3);
  char v8 = v7;
  swift_bridgeObjectRelease();
  if ((v8 & 1) == 0) {
    return swift_bridgeObjectRelease();
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = *a1;
  uint64_t v12 = *a1;
  *a1 = 0x8000000000000000;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_1D7973448();
    uint64_t v10 = v12;
  }
  swift_bridgeObjectRelease();
  sub_1D789FE68(v6, v10);
  *a1 = v10;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_1D78A2804();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DIPBackgroundActivityManager.scheduleActivity(identifier:after:gracePeriod:settings:)(Swift::String identifier, Swift::Double after, Swift::Double gracePeriod, CoreIDVShared::DIPBackgroundActivitySettings_optional settings)
{
  unint64_t v6 = v5;
  uint64_t v7 = v4;
  char v8 = *(unsigned int **)&settings.value.requireNetworkActivity;
  object = identifier._object;
  uint64_t countAndFlagsBits = identifier._countAndFlagsBits;
  uint64_t v12 = sub_1D7A9B5F8();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12, v14, v15, v16, v17, v18, v19, v20);
  char v22 = (char *)&v57 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v23 = *v8;
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v24 = __swift_project_value_buffer(v12, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v22, v24, v12);
  swift_bridgeObjectRetain_n();
  uint64_t v25 = sub_1D7A9B5D8();
  os_log_type_t v26 = sub_1D7A9C738();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v59 = v7;
    uint64_t v27 = swift_slowAlloc();
    unsigned int v58 = v23;
    uint64_t v28 = (uint8_t *)v27;
    uint64_t v29 = swift_slowAlloc();
    uint64_t v60 = v5;
    uint64_t v30 = v29;
    uint64_t aBlock = v29;
    uint64_t v57 = v12;
    *(_DWORD *)uint64_t v28 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v68 = sub_1D7923300(countAndFlagsBits, (unint64_t)object, &aBlock);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1D7853000, v25, v26, "Scheduling background activity %{public}s", v28, 0xCu);
    swift_arrayDestroy();
    uint64_t v31 = v30;
    unint64_t v6 = v60;
    MEMORY[0x1D947D740](v31, -1, -1);
    uint64_t v32 = v28;
    unint64_t v23 = v58;
    MEMORY[0x1D947D740](v32, -1, -1);

    (*(void (**)(char *, uint64_t))(v13 + 8))(v22, v57);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v22, v12);
  }
  xpc_object_t v33 = xpc_dictionary_create(0, 0, 0);
  if ((~*(void *)&after & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  if (after <= -9.22337204e18)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (after >= 9.22337204e18)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v34 = v33;
  xpc_dictionary_set_int64(v33, (const char *)*MEMORY[0x1E4F14170], (uint64_t)after);
  if ((~*(void *)&gracePeriod & 0x7FF0000000000000) == 0)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (gracePeriod <= -9.22337204e18)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (gracePeriod >= 9.22337204e18)
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  xpc_dictionary_set_int64(v34, (const char *)*MEMORY[0x1E4F141A8], (uint64_t)gracePeriod);
  uint64_t v43 = countAndFlagsBits;
  if (v23 == 2) {
    goto LABEL_17;
  }
  if (!*MEMORY[0x1E4F14338]) {
    goto LABEL_30;
  }
  xpc_dictionary_set_BOOL(v34, (const char *)*MEMORY[0x1E4F14338], v23 & 1);
  xpc_dictionary_set_BOOL(v34, (const char *)*MEMORY[0x1E4F14138], v23 & 0x100);
  if (!*MEMORY[0x1E4F14310])
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  xpc_dictionary_set_BOOL(v34, (const char *)*MEMORY[0x1E4F14310], v23 & 0x10000);
  if (!*MEMORY[0x1E4F14330])
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  xpc_dictionary_set_BOOL(v34, (const char *)*MEMORY[0x1E4F14330], v23 & 0x1000000);
LABEL_17:
  MEMORY[0x1F4188790](v35, v36, v37, v38, v39, v40, v41, v42);
  uint64_t v45 = (uint64_t)&v44[4];
  unint64_t v23 = (unint64_t)&v44[6];
  os_unfair_lock_lock(v44 + 6);
  sub_1D78E9854(v45, (uint64_t)&aBlock);
  if (v6)
  {
LABEL_33:
    os_unfair_lock_unlock((os_unfair_lock_t)v23);
    __break(1u);
    return;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)v23);
  unsigned __int8 v46 = v64;
  if (v64 == 255)
  {
    uint64_t aBlock = 0;
    unint64_t v63 = 0xE000000000000000;
    sub_1D7A9CC48();
    swift_bridgeObjectRelease();
    uint64_t aBlock = 0xD00000000000001CLL;
    unint64_t v63 = 0x80000001D7AC1B10;
    sub_1D7A9C128();
    sub_1D7A9C128();
    uint64_t v51 = aBlock;
    uint64_t v52 = v63;
    LOWORD(aBlock) = 105;
    unint64_t v53 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, v51, v52, (__int16 *)&aBlock, 0, v53, 0xD000000000000065, 0x80000001D7AC1B50, v54, 0xD000000000000038, 0x80000001D7AC1BC0, 176);
    swift_willThrow();
    swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v47 = aBlock;
    uint64_t v48 = v63;
    uint64_t v49 = (void *)swift_allocObject();
    _OWORD v49[2] = v43;
    v49[3] = object;
    v49[4] = v47;
    v49[5] = v48;
    if (v46)
    {
      uint64_t v66 = sub_1D78EA41C;
      int v67 = v49;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      unint64_t v63 = 1107296256;
      uint64_t v50 = &block_descriptor_16;
    }
    else
    {
      uint64_t v66 = sub_1D78EA420;
      int v67 = v49;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      unint64_t v63 = 1107296256;
      uint64_t v50 = &block_descriptor_23;
    }
    unint64_t v64 = sub_1D78E4804;
    unint64_t v65 = v50;
    uint64_t v55 = _Block_copy(&aBlock);
    uint64_t v60 = v67;
    sub_1D78E9874(v47, v48, v46);
    swift_bridgeObjectRetain();
    sub_1D78E9874(v47, v48, v46);
    swift_retain();
    swift_release();
    uint64_t v56 = sub_1D7A9C078();
    xpc_activity_register((const char *)(v56 + 32), v34, v55);
    swift_unknownObjectRelease();
    sub_1D78E9894(v47, v48, v46);
    swift_release();
    _Block_release(v55);
    swift_release();
    sub_1D78E9894(v47, v48, v46);
  }
}

uint64_t sub_1D78E5858@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *(void *)result;
  if (*(void *)(*(void *)result + 16))
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = sub_1D7A18684(a2, a3);
    if (v9)
    {
      uint64_t v10 = *(void *)(v5 + 56) + 24 * v8;
      uint64_t v11 = *(void *)v10;
      uint64_t v12 = *(void *)(v10 + 8);
      char v13 = *(unsigned char *)(v10 + 16);
      sub_1D78E988C();
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      char v13 = -1;
    }
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    char v13 = -1;
  }
  *(void *)a4 = v11;
  *(void *)(a4 + 8) = v12;
  *(unsigned char *)(a4 + 16) = v13;
  return result;
}

xpc_activity_state_t sub_1D78E5910(_xpc_activity_s *a1, uint64_t a2, unint64_t a3, uint64_t (**a4)(uint64_t a1), NSObject *a5)
{
  dispatch_semaphore_t v94 = a5;
  uint64_t v93 = a4;
  unint64_t v102 = a3;
  uint64_t v104 = a2;
  uint64_t v6 = sub_1D7A9B5F8();
  uint64_t v98 = *(void *)(v6 - 8);
  uint64_t v99 = v6;
  MEMORY[0x1F4188790](v6, v7, v8, v9, v10, v11, v12, v13);
  uint64_t v97 = (char *)&v86 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_1D7A9B6C8();
  uint64_t v16 = *(NSObject **)(v15 - 8);
  MEMORY[0x1F4188790](v15, v17, v18, v19, v20, v21, v22, v23);
  uint64_t v25 = (char *)&v86 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_1D7A9C7C8();
  uint64_t v27 = *(void *)(v26 - 8);
  MEMORY[0x1F4188790](v26, v28, v29, v30, v31, v32, v33, v34);
  uint64_t v36 = (char *)&v86 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = sub_1D7A9B708();
  uint64_t v95 = *(void *)(v37 - 8);
  uint64_t v96 = v37;
  MEMORY[0x1F4188790](v37, v38, v39, v40, v41, v42, v43, v44);
  unsigned __int8 v46 = (char *)&v86 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = sub_1D7A9C7B8();
  MEMORY[0x1F4188790](v47 - 8, v48, v49, v50, v51, v52, v53, v54);
  xpc_activity_state_t result = xpc_activity_get_state(a1);
  if (result)
  {
    uint64_t v56 = swift_allocObject();
    int v91 = v25;
    uint64_t v57 = v56;
    *(void *)(v56 + 16) = a1;
    char v92 = a1;
    unsigned int v58 = (void *)sub_1D7865074();
    uint64_t v100 = v15;
    id v101 = v58;
    uint64_t v103 = v16;
    unint64_t aBlock = 0;
    unint64_t v108 = 0xE000000000000000;
    swift_unknownObjectRetain();
    uint64_t v59 = v104;
    sub_1D7A9CC48();
    swift_bridgeObjectRelease();
    unint64_t aBlock = 0xD00000000000001DLL;
    unint64_t v108 = 0x80000001D7AC1C60;
    unint64_t v60 = v102;
    sub_1D7A9C128();
    sub_1D7A9C7A8();
    sub_1D7A9B6E8();
    (*(void (**)(char *, void, uint64_t))(v27 + 104))(v36, *MEMORY[0x1E4FBCC58], v26);
    id v101 = (id)sub_1D7A9C808();
    dispatch_semaphore_t v61 = dispatch_semaphore_create(0);
    char v62 = (void *)swift_allocObject();
    v62[2] = v59;
    v62[3] = v60;
    dispatch_semaphore_t v63 = v94;
    v62[4] = v93;
    v62[5] = v63;
    v62[6] = sub_1D78EA418;
    v62[7] = v57;
    v62[8] = v61;
    uint64_t v111 = sub_1D78EA2D0;
    uint64_t v112 = v62;
    unint64_t aBlock = MEMORY[0x1E4F143A8];
    unint64_t v108 = 1107296256;
    uint64_t v93 = &v109;
    uint64_t v109 = sub_1D79899E4;
    char v110 = &block_descriptor_70;
    unint64_t v64 = _Block_copy(&aBlock);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    dispatch_semaphore_t v94 = v61;
    sub_1D7A9B6E8();
    uint64_t v106 = MEMORY[0x1E4FBC860];
    uint64_t v89 = sub_1D78EA2E8((unint64_t *)&qword_1EBDF9D90, MEMORY[0x1E4FBCB00]);
    uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9D98);
    unint64_t v90 = sub_1D78EA330();
    unint64_t v65 = v91;
    uint64_t v66 = v100;
    sub_1D7A9CBA8();
    MEMORY[0x1D947B570](0, v46, v65, v64);
    _Block_release(v64);
    Class isa = (void (*)(char *, uint64_t))v103[1].isa;
    ++v103;
    uint64_t v87 = isa;
    isa(v65, v66);
    char v86 = *(void (**)(char *, uint64_t))(v95 + 8);
    uint64_t v68 = v96;
    v86(v46, v96);
    swift_release();
    dispatch_semaphore_t v69 = dispatch_semaphore_create(0);
    uint64_t v70 = (void *)swift_allocObject();
    dispatch_semaphore_t v71 = v94;
    v70[2] = v94;
    v70[3] = sub_1D78EA418;
    uint64_t v72 = v104;
    v70[4] = v57;
    v70[5] = v72;
    uint64_t v73 = v92;
    v70[6] = v60;
    v70[7] = v73;
    v70[8] = v69;
    uint64_t v111 = sub_1D78EA3E4;
    uint64_t v112 = v70;
    unint64_t aBlock = MEMORY[0x1E4F143A8];
    unint64_t v108 = 1107296256;
    uint64_t v109 = sub_1D79899E4;
    char v110 = &block_descriptor_76;
    char v74 = _Block_copy(&aBlock);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v95 = v57;
    swift_retain();
    dispatch_semaphore_t v94 = v71;
    uint64_t v75 = v69;
    sub_1D7A9B6E8();
    uint64_t v106 = MEMORY[0x1E4FBC860];
    uint64_t v76 = v100;
    sub_1D7A9CBA8();
    MEMORY[0x1D947B570](0, v46, v65, v74);
    _Block_release(v74);
    v87(v65, v76);
    v86(v46, v68);
    swift_release();
    uint64_t v103 = v75;
    sub_1D7A9C8B8();
    if (qword_1EBDF9DC8 != -1) {
      swift_once();
    }
    uint64_t v77 = v99;
    uint64_t v78 = __swift_project_value_buffer(v99, (uint64_t)qword_1EBDFBE70);
    swift_beginAccess();
    char v80 = v97;
    uint64_t v79 = v98;
    (*(void (**)(char *, uint64_t, uint64_t))(v98 + 16))(v97, v78, v77);
    unint64_t v81 = v102;
    swift_bridgeObjectRetain_n();
    uint64_t v82 = sub_1D7A9B5D8();
    os_log_type_t v83 = sub_1D7A9C748();
    if (os_log_type_enabled(v82, v83))
    {
      uint64_t v84 = (uint8_t *)swift_slowAlloc();
      uint64_t v85 = swift_slowAlloc();
      uint64_t v106 = v85;
      *(_DWORD *)uint64_t v84 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v105 = sub_1D7923300(v104, v81, &v106);
      sub_1D7A9C9E8();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1D7853000, v82, v83, "Background activity %{public}s is exiting", v84, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D947D740](v85, -1, -1);
      MEMORY[0x1D947D740](v84, -1, -1);
      swift_release();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_release();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v79 + 8))(v80, v77);
  }
  return result;
}

uint64_t sub_1D78E6208(uint64_t a1, unint64_t a2, void (*a3)(uint64_t, void), uint64_t a4, uint64_t a5, void (*a6)(char *, uint64_t), uint64_t a7)
{
  uint64_t v69 = a7;
  uint64_t v70 = a1;
  uint64_t v66 = a3;
  int v67 = a6;
  uint64_t v64 = a5;
  uint64_t v65 = a4;
  uint64_t v8 = sub_1D7A9B5F8();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v8, v10, v11, v12, v13, v14, v15, v16);
  uint64_t v19 = (char *)&v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x1F4188790](v17, v20, v21, v22, v23, v24, v25, v26);
  uint64_t v29 = (char *)&v63 - v28;
  MEMORY[0x1F4188790](v27, v30, v31, v32, v33, v34, v35, v36);
  uint64_t v38 = (char *)&v63 - v37;
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v39 = __swift_project_value_buffer(v8, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v72 = v9 + 16;
  uint64_t v73 = v39;
  dispatch_semaphore_t v71 = v40;
  v40(v38, v39, v8);
  swift_bridgeObjectRetain_n();
  uint64_t v41 = sub_1D7A9B5D8();
  os_log_type_t v42 = sub_1D7A9C738();
  BOOL v43 = os_log_type_enabled(v41, v42);
  uint64_t v68 = v19;
  if (v43)
  {
    uint64_t v44 = (uint8_t *)swift_slowAlloc();
    uint64_t v45 = swift_slowAlloc();
    dispatch_semaphore_t v63 = v29;
    uint64_t v46 = v45;
    uint64_t v75 = v45;
    *(_DWORD *)uint64_t v44 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v74 = sub_1D7923300(v70, a2, &v75);
    uint64_t v19 = v68;
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1D7853000, v41, v42, "Running background activity %{public}s", v44, 0xCu);
    swift_arrayDestroy();
    uint64_t v47 = v46;
    uint64_t v29 = v63;
    MEMORY[0x1D947D740](v47, -1, -1);
    MEMORY[0x1D947D740](v44, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v48 = *(void (**)(char *, uint64_t))(v9 + 8);
  v48(v38, v8);
  v66(v64, v67);
  id v49 = objc_msgSend(self, sel_standardUserDefaults);
  if (qword_1EBDF9690 != -1) {
    swift_once();
  }
  if (byte_1EBDFBE68 == 1)
  {
    uint64_t v50 = (void *)sub_1D7A9BF98();
    unsigned __int8 v51 = objc_msgSend(v49, sel_BOOLForKey_, v50);

    if (v51)
    {
      v71(v29, v73, v8);
      swift_bridgeObjectRetain_n();
      uint64_t v52 = sub_1D7A9B5D8();
      os_log_type_t v53 = sub_1D7A9C748();
      if (os_log_type_enabled(v52, v53))
      {
        int v67 = v48;
        uint64_t v54 = (uint8_t *)swift_slowAlloc();
        uint64_t v55 = swift_slowAlloc();
        uint64_t v66 = (void (*)(uint64_t, void))v9;
        uint64_t v56 = v55;
        uint64_t v75 = v55;
        dispatch_semaphore_t v63 = v29;
        *(_DWORD *)uint64_t v54 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v74 = sub_1D7923300(v70, a2, &v75);
        uint64_t v48 = v67;
        sub_1D7A9C9E8();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1D7853000, v52, v53, "Background activity %{public}s will sleep for 30 seconds due to internal defaults setting", v54, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1D947D740](v56, -1, -1);
        MEMORY[0x1D947D740](v54, -1, -1);

        uint64_t v57 = v63;
      }
      else
      {

        swift_bridgeObjectRelease_n();
        uint64_t v57 = v29;
      }
      v48(v57, v8);
      sleep(0x1Eu);
    }
  }
  else
  {
  }
  v71(v19, v73, v8);
  swift_bridgeObjectRetain_n();
  unsigned int v58 = sub_1D7A9B5D8();
  os_log_type_t v59 = sub_1D7A9C738();
  if (os_log_type_enabled(v58, v59))
  {
    int v67 = v48;
    unint64_t v60 = (uint8_t *)swift_slowAlloc();
    uint64_t v61 = swift_slowAlloc();
    uint64_t v75 = v61;
    *(_DWORD *)unint64_t v60 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v74 = sub_1D7923300(v70, a2, &v75);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1D7853000, v58, v59, "Background activity %{public}s finished running", v60, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v61, -1, -1);
    MEMORY[0x1D947D740](v60, -1, -1);

    v67(v68, v8);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    v48(v19, v8);
  }
  return sub_1D7A9C8C8();
}

uint64_t sub_1D78E6898(uint64_t a1, void (*a2)(uint64_t *__return_ptr, uint64_t), uint64_t a3, uint64_t a4, unint64_t a5, _xpc_activity_s *a6, uint64_t a7)
{
  void (*v92)(uint64_t *__return_ptr, uint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96[4];

  uint64_t v87 = a7;
  xpc_activity_t v83 = a6;
  unint64_t v84 = a5;
  uint64_t v81 = a4;
  char v92 = a2;
  uint64_t v93 = a3;
  uint64_t v91 = a1;
  uint64_t v7 = sub_1D7A9B5F8();
  uint64_t v85 = *(void *)(v7 - 8);
  uint64_t v86 = v7;
  uint64_t v15 = MEMORY[0x1F4188790](v7, v8, v9, v10, v11, v12, v13, v14);
  char v80 = (char *)&v80 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15, v17, v18, v19, v20, v21, v22, v23);
  uint64_t v82 = (char *)&v80 - v24;
  uint64_t v25 = sub_1D7A9B738();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v34 = MEMORY[0x1F4188790](v25, v27, v28, v29, v30, v31, v32, v33);
  uint64_t v36 = (char *)&v80 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v34, v37, v38, v39, v40, v41, v42, v43);
  uint64_t v45 = (char *)&v80 - v44;
  uint64_t v46 = sub_1D7A9B698();
  MEMORY[0x1F4188790](v46, v47, v48, v49, v50, v51, v52, v53);
  uint64_t v55 = (char **)((char *)&v80 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0));
  unsigned int v89 = *MEMORY[0x1E4FBCAC8];
  uint64_t v88 = *(void (**)(void *, void, uint64_t))(v56 + 104);
  uint64_t v57 = (void (**)(char *, uint64_t))(v26 + 8);
  uint64_t v90 = v56 + 104;
  unsigned int v58 = (uint64_t (**)(void *, uint64_t))(v56 + 8);
  while (1)
  {
    *uint64_t v55 = 3000;
    v88(v55, v89, v46);
    sub_1D7A9B728();
    MEMORY[0x1D947A4C0](v36, v55);
    os_log_type_t v59 = *v57;
    (*v57)(v36, v25);
    sub_1D7A9C8A8();
    v59(v45, v25);
    uint64_t v60 = (*v58)(v55, v46);
    v92(v96, v60);
    if (LOBYTE(v96[0]) == 1) {
      break;
    }
    if ((sub_1D7A9B6A8() & 1) == 0)
    {
      xpc_activity_set_state(v83, 5);
      if (qword_1EBDF9DC8 != -1) {
        swift_once();
      }
      uint64_t v61 = v86;
      uint64_t v62 = __swift_project_value_buffer(v86, (uint64_t)qword_1EBDFBE70);
      swift_beginAccess();
      uint64_t v63 = v85;
      uint64_t v64 = v80;
      (*(void (**)(char *, uint64_t, uint64_t))(v85 + 16))(v80, v62, v61);
      unint64_t v65 = v84;
      swift_bridgeObjectRetain_n();
      uint64_t v66 = sub_1D7A9B5D8();
      os_log_type_t v67 = sub_1D7A9C738();
      if (os_log_type_enabled(v66, v67))
      {
        uint64_t v68 = (uint8_t *)swift_slowAlloc();
        uint64_t v69 = swift_slowAlloc();
        uint64_t v95 = v69;
        *(_DWORD *)uint64_t v68 = 136446210;
        swift_bridgeObjectRetain();
        dispatch_semaphore_t v94 = sub_1D7923300(v81, v65, &v95);
        sub_1D7A9C9E8();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1D7853000, v66, v67, "Completed background activity %{public}s", v68, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1D947D740](v69, -1, -1);
        MEMORY[0x1D947D740](v68, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v63 + 8))(v64, v61);
      return sub_1D7A9C8C8();
    }
  }
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v70 = v86;
  uint64_t v71 = __swift_project_value_buffer(v86, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  uint64_t v72 = v85;
  uint64_t v73 = v82;
  (*(void (**)(char *, uint64_t, uint64_t))(v85 + 16))(v82, v71, v70);
  unint64_t v74 = v84;
  swift_bridgeObjectRetain_n();
  uint64_t v75 = sub_1D7A9B5D8();
  os_log_type_t v76 = sub_1D7A9C738();
  if (os_log_type_enabled(v75, v76))
  {
    uint64_t v77 = (uint8_t *)swift_slowAlloc();
    uint64_t v78 = swift_slowAlloc();
    uint64_t v95 = v78;
    *(_DWORD *)uint64_t v77 = 136446210;
    swift_bridgeObjectRetain();
    dispatch_semaphore_t v94 = sub_1D7923300(v81, v74, &v95);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1D7853000, v75, v76, "Background activity %{public}s was deferred", v77, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v78, -1, -1);
    MEMORY[0x1D947D740](v77, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v72 + 8))(v73, v70);
  xpc_activity_set_state(v83, 3);
  return sub_1D7A9C8C8();
}

xpc_activity_state_t sub_1D78E6F1C(_xpc_activity_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9978);
  MEMORY[0x1F4188790](v10 - 8, v11, v12, v13, v14, v15, v16, v17);
  uint64_t v19 = (char *)&v24 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  xpc_activity_state_t result = xpc_activity_get_state(a1);
  if (result)
  {
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = a1;
    uint64_t v22 = sub_1D7A9C4A8();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v19, 1, 1, v22);
    uint64_t v23 = (void *)swift_allocObject();
    _OWORD v23[2] = 0;
    void v23[3] = 0;
    v23[4] = a2;
    _OWORD v23[5] = a3;
    v23[6] = a4;
    v23[7] = a5;
    v23[8] = sub_1D78E9CD0;
    v23[9] = v21;
    v23[10] = a1;
    swift_unknownObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1D78A2AF8((uint64_t)v19, (uint64_t)&unk_1EA843898, (uint64_t)v23);
    return swift_release();
  }
  return result;
}

BOOL sub_1D78E7094@<W0>(_xpc_activity_s *a1@<X0>, unsigned char *a2@<X8>)
{
  id v4 = objc_msgSend(self, sel_standardUserDefaults);
  if (qword_1EBDF9690 != -1) {
    swift_once();
  }
  if (byte_1EBDFBE68 != 1)
  {

    goto LABEL_7;
  }
  uint64_t v5 = (void *)sub_1D7A9BF98();
  unsigned __int8 v6 = objc_msgSend(v4, sel_BOOLForKey_, v5);

  if ((v6 & 1) == 0)
  {
LABEL_7:
    BOOL result = xpc_activity_should_defer(a1);
    goto LABEL_8;
  }
  BOOL result = 1;
LABEL_8:
  *a2 = result;
  return result;
}

uint64_t sub_1D78E7188(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[11] = v12;
  v8[12] = v13;
  v8[9] = a7;
  v8[10] = a8;
  v8[7] = a5;
  v8[8] = a6;
  v8[6] = a4;
  uint64_t v9 = sub_1D7A9B5F8();
  v8[13] = v9;
  v8[14] = *(void *)(v9 - 8);
  v8[15] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_1D78E725C, 0, 0);
}

uint64_t sub_1D78E725C()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 128) = v2;
  long long v3 = *(_OWORD *)(v0 + 56);
  long long v4 = *(_OWORD *)(v0 + 72);
  long long v5 = *(_OWORD *)(v0 + 88);
  *(void *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = v3;
  *(_OWORD *)(v2 + 40) = v4;
  *(_OWORD *)(v2 + 56) = v5;
  unsigned __int8 v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 136) = v6;
  void *v6 = v0;
  v6[1] = sub_1D78E7358;
  return MEMORY[0x1F4187F28]();
}

uint64_t sub_1D78E7358()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return MEMORY[0x1F4188298](sub_1D78E7470, 0, 0);
}

uint64_t sub_1D78E7470()
{
  uint64_t v20 = v0;
  xpc_activity_set_state(*(xpc_activity_t *)(v0 + 96), 5);
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v4 = __swift_project_value_buffer(v3, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_bridgeObjectRetain_n();
  long long v5 = sub_1D7A9B5D8();
  os_log_type_t v6 = sub_1D7A9C738();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v9 = *(void *)(v0 + 112);
  uint64_t v8 = *(void *)(v0 + 120);
  uint64_t v10 = *(void *)(v0 + 104);
  unint64_t v11 = *(void *)(v0 + 56);
  if (v7)
  {
    uint64_t v16 = *(void *)(v0 + 48);
    uint64_t v18 = *(void *)(v0 + 104);
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = v8;
    uint64_t v13 = swift_slowAlloc();
    uint64_t v19 = v13;
    *(_DWORD *)uint64_t v12 = 136446210;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 40) = sub_1D7923300(v16, v11, &v19);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1D7853000, v5, v6, "Completed background activity %{public}s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v13, -1, -1);
    MEMORY[0x1D947D740](v12, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v17, v18);
  }
  else
  {
    swift_bridgeObjectRelease_n();

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  }
  swift_task_dealloc();
  uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
  return v14();
}

uint64_t sub_1D78E76DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[8] = a8;
  v8[9] = v11;
  v8[6] = a6;
  v8[7] = a7;
  v8[4] = a4;
  void v8[5] = a5;
  v8[2] = a2;
  void v8[3] = a3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9978);
  v8[10] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_1D78E7784, 0, 0);
}

uint64_t sub_1D78E7784()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0[10];
  uint64_t v14 = v0[9];
  uint64_t v15 = v0 + 12;
  uint64_t v4 = v0[7];
  uint64_t v3 = v0[8];
  uint64_t v5 = v0[6];
  uint64_t v6 = v0[3];
  uint64_t v7 = sub_1D7A9C4A8();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  long long v16 = *((_OWORD *)v1 + 2);
  v13(v2, 1, 1, v7);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = 0;
  *(void *)(v8 + 24) = 0;
  *(void *)(v8 + 32) = v6;
  *(_OWORD *)(v8 + 40) = v16;
  *(void *)(v8 + 56) = v5;
  *(void *)(v8 + 64) = v4;
  *(void *)(v8 + 72) = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  sub_1D78E8B84(v2, (uint64_t)&unk_1EA8438B8, v8);
  sub_1D7873DD0(v2);
  v13(v2, 1, 1, v7);
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = 0;
  v9[3] = 0;
  _OWORD v9[4] = v4;
  v9[5] = v3;
  v9[6] = v6;
  v9[7] = v16;
  v9[8] = v14;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_unknownObjectRetain();
  sub_1D78E8B84(v2, (uint64_t)&unk_1EA8438C8, (uint64_t)v9);
  sub_1D7873DD0(v2);
  uint64_t v10 = (void *)swift_task_alloc();
  v1[11] = v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9B80);
  *uint64_t v10 = v1;
  v10[1] = sub_1D78E79D8;
  return MEMORY[0x1F4187C48](v15, 0, 0, v11);
}

uint64_t sub_1D78E79D8()
{
  swift_task_dealloc();
  return MEMORY[0x1F4188298](sub_1D78E7AD4, 0, 0);
}

uint64_t sub_1D78E7AD4()
{
  sub_1D7A9C488();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1D78E7B50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[12] = a8;
  v8[13] = v13;
  v8[10] = a6;
  v8[11] = a7;
  v8[8] = a4;
  v8[9] = a5;
  uint64_t v9 = sub_1D7A9CE48();
  v8[14] = v9;
  v8[15] = *(void *)(v9 - 8);
  v8[16] = swift_task_alloc();
  uint64_t v10 = sub_1D7A9B5F8();
  v8[17] = v10;
  v8[18] = *(void *)(v10 - 8);
  v8[19] = swift_task_alloc();
  v8[20] = swift_task_alloc();
  v8[21] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_1D78E7C98, 0, 0);
}

uint64_t sub_1D78E7C98()
{
  uint64_t v25 = v0;
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[21];
  uint64_t v2 = v0[17];
  uint64_t v3 = v0[18];
  uint64_t v4 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE70);
  v0[22] = v4;
  swift_beginAccess();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[23] = v5;
  v0[24] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v5(v1, v4, v2);
  swift_bridgeObjectRetain_n();
  uint64_t v6 = sub_1D7A9B5D8();
  os_log_type_t v7 = sub_1D7A9C738();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = v0[21];
  uint64_t v10 = v0[17];
  uint64_t v11 = v0[18];
  unint64_t v12 = v0[9];
  if (v8)
  {
    uint64_t v20 = v0[8];
    uint64_t v22 = v0[17];
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = v9;
    uint64_t v14 = swift_slowAlloc();
    uint64_t v24 = v14;
    *(_DWORD *)uint64_t v13 = 136446210;
    swift_bridgeObjectRetain();
    v0[7] = sub_1D7923300(v20, v12, &v24);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1D7853000, v6, v7, "Running background activity %{public}s", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v14, -1, -1);
    MEMORY[0x1D947D740](v13, -1, -1);

    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v15(v21, v22);
  }
  else
  {
    swift_bridgeObjectRelease_n();

    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v15(v9, v10);
  }
  v0[25] = v15;
  uint64_t v23 = (uint64_t (*)(uint64_t, uint64_t))(v0[10] + *(int *)v0[10]);
  long long v16 = (void *)swift_task_alloc();
  v0[26] = v16;
  void *v16 = v0;
  v16[1] = sub_1D78E7F80;
  uint64_t v18 = v0[12];
  uint64_t v17 = v0[13];
  return v23(v18, v17);
}

uint64_t sub_1D78E7F80()
{
  swift_task_dealloc();
  return MEMORY[0x1F4188298](sub_1D78E807C, 0, 0);
}

uint64_t sub_1D78E807C()
{
  uint64_t v32 = v0;
  if ((sub_1D7A9C528() & 1) == 0)
  {
    id v1 = objc_msgSend(self, sel_standardUserDefaults);
    if (qword_1EBDF9690 != -1) {
      swift_once();
    }
    if (byte_1EBDFBE68 == 1)
    {
      uint64_t v2 = (void *)sub_1D7A9BF98();
      unsigned __int8 v3 = objc_msgSend(v1, sel_BOOLForKey_, v2);

      if (v3)
      {
        (*(void (**)(void, void, void))(v0 + 184))(*(void *)(v0 + 160), *(void *)(v0 + 176), *(void *)(v0 + 136));
        swift_bridgeObjectRetain_n();
        uint64_t v4 = sub_1D7A9B5D8();
        os_log_type_t v5 = sub_1D7A9C748();
        BOOL v6 = os_log_type_enabled(v4, v5);
        os_log_type_t v7 = *(void (**)(uint64_t, uint64_t))(v0 + 200);
        uint64_t v8 = *(void *)(v0 + 160);
        uint64_t v9 = *(void *)(v0 + 136);
        unint64_t v10 = *(void *)(v0 + 72);
        if (v6)
        {
          uint64_t v11 = *(void *)(v0 + 64);
          uint64_t v27 = *(void *)(v0 + 160);
          unint64_t v12 = (uint8_t *)swift_slowAlloc();
          uint64_t v13 = swift_slowAlloc();
          uint64_t v31 = v13;
          *(_DWORD *)unint64_t v12 = 136446210;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 48) = sub_1D7923300(v11, v10, &v31);
          sub_1D7A9C9E8();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1D7853000, v4, v5, "Background activity %{public}s will sleep for 30 seconds due to internal defaults setting", v12, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1D947D740](v13, -1, -1);
          MEMORY[0x1D947D740](v12, -1, -1);

          v7(v27, v9);
        }
        else
        {
          swift_bridgeObjectRelease_n();

          v7(v8, v9);
        }
        sub_1D7A9CE38();
        uint64_t v30 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1EA8459D0
                                                                               + dword_1EA8459D0);
        uint64_t v26 = (void *)swift_task_alloc();
        *(void *)(v0 + 216) = v26;
        *uint64_t v26 = v0;
        v26[1] = sub_1D78E85AC;
        return v30(0xA055690D9DB80000, 1, 0, 0, 1);
      }
    }
    else
    {
    }
    if ((sub_1D7A9C528() & 1) == 0)
    {
      (*(void (**)(void, void, void))(v0 + 184))(*(void *)(v0 + 152), *(void *)(v0 + 176), *(void *)(v0 + 136));
      swift_bridgeObjectRetain_n();
      uint64_t v14 = sub_1D7A9B5D8();
      os_log_type_t v15 = sub_1D7A9C738();
      BOOL v16 = os_log_type_enabled(v14, v15);
      uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v0 + 200);
      uint64_t v18 = *(void *)(v0 + 152);
      uint64_t v19 = *(void *)(v0 + 136);
      unint64_t v20 = *(void *)(v0 + 72);
      if (v16)
      {
        uint64_t v21 = *(void *)(v0 + 64);
        uint64_t v29 = *(void *)(v0 + 152);
        uint64_t v22 = (uint8_t *)swift_slowAlloc();
        uint64_t v28 = v17;
        uint64_t v23 = swift_slowAlloc();
        uint64_t v31 = v23;
        *(_DWORD *)uint64_t v22 = 136446210;
        swift_bridgeObjectRetain();
        *(void *)(v0 + 40) = sub_1D7923300(v21, v20, &v31);
        sub_1D7A9C9E8();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1D7853000, v14, v15, "Background activity %{public}s finished running", v22, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1D947D740](v23, -1, -1);
        MEMORY[0x1D947D740](v22, -1, -1);

        v28(v29, v19);
      }
      else
      {
        swift_bridgeObjectRelease_n();

        v17(v18, v19);
      }
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
  return v24();
}

uint64_t sub_1D78E85AC()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 128);
  uint64_t v3 = *(void *)(*(void *)v1 + 120);
  uint64_t v4 = *(void *)(*(void *)v1 + 112);
  *(void *)(*(void *)v1 + 224) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0) {
    os_log_type_t v5 = sub_1D78E894C;
  }
  else {
    os_log_type_t v5 = sub_1D78E871C;
  }
  return MEMORY[0x1F4188298](v5, 0, 0);
}

uint64_t sub_1D78E871C()
{
  uint64_t v16 = v0;
  if ((sub_1D7A9C528() & 1) == 0)
  {
    (*(void (**)(void, void, void))(v0 + 184))(*(void *)(v0 + 152), *(void *)(v0 + 176), *(void *)(v0 + 136));
    swift_bridgeObjectRetain_n();
    uint64_t v1 = sub_1D7A9B5D8();
    os_log_type_t v2 = sub_1D7A9C738();
    BOOL v3 = os_log_type_enabled(v1, v2);
    uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v0 + 200);
    uint64_t v5 = *(void *)(v0 + 152);
    uint64_t v6 = *(void *)(v0 + 136);
    unint64_t v7 = *(void *)(v0 + 72);
    if (v3)
    {
      uint64_t v14 = *(void *)(v0 + 152);
      uint64_t v8 = *(void *)(v0 + 64);
      uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v0 + 200);
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      uint64_t v15 = v10;
      *(_DWORD *)uint64_t v9 = 136446210;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 40) = sub_1D7923300(v8, v7, &v15);
      sub_1D7A9C9E8();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1D7853000, v1, v2, "Background activity %{public}s finished running", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D947D740](v10, -1, -1);
      MEMORY[0x1D947D740](v9, -1, -1);

      v13(v14, v6);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      v4(v5, v6);
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

uint64_t sub_1D78E894C()
{
  uint64_t v16 = v0;

  if ((sub_1D7A9C528() & 1) == 0)
  {
    (*(void (**)(void, void, void))(v0 + 184))(*(void *)(v0 + 152), *(void *)(v0 + 176), *(void *)(v0 + 136));
    swift_bridgeObjectRetain_n();
    uint64_t v1 = sub_1D7A9B5D8();
    os_log_type_t v2 = sub_1D7A9C738();
    BOOL v3 = os_log_type_enabled(v1, v2);
    uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v0 + 200);
    uint64_t v5 = *(void *)(v0 + 152);
    uint64_t v6 = *(void *)(v0 + 136);
    unint64_t v7 = *(void *)(v0 + 72);
    if (v3)
    {
      uint64_t v14 = *(void *)(v0 + 152);
      uint64_t v8 = *(void *)(v0 + 64);
      uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v0 + 200);
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      uint64_t v15 = v10;
      *(_DWORD *)uint64_t v9 = 136446210;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 40) = sub_1D7923300(v8, v7, &v15);
      sub_1D7A9C9E8();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1D7853000, v1, v2, "Background activity %{public}s finished running", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D947D740](v10, -1, -1);
      MEMORY[0x1D947D740](v9, -1, -1);

      v13(v14, v6);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      v4(v5, v6);
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

uint64_t sub_1D78E8B84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9978);
  MEMORY[0x1F4188790](v8 - 8, v9, v10, v11, v12, v13, v14, v15);
  uint64_t v17 = (char *)v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7873FE8(a1, (uint64_t)v17);
  uint64_t v18 = sub_1D7A9C4A8();
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
    sub_1D7873DD0((uint64_t)v17);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v20 = sub_1D7A9C438();
      uint64_t v22 = v21;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    sub_1D7A9C498();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v17, v18);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v20 = 0;
  uint64_t v22 = 0;
LABEL_6:
  uint64_t v23 = *v4;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = a2;
  *(void *)(v24 + 24) = a3;
  uint64_t v25 = (void *)(v22 | v20);
  if (v22 | v20)
  {
    v28[0] = 0;
    v28[1] = 0;
    uint64_t v25 = v28;
    v28[2] = v20;
    v28[3] = v22;
  }
  v27[1] = 1;
  v27[2] = v25;
  v27[3] = v23;
  swift_task_create();
  return swift_release();
}

uint64_t sub_1D78E8D7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[14] = a7;
  v8[15] = a8;
  v8[12] = a5;
  v8[13] = a6;
  v8[11] = a4;
  uint64_t v9 = sub_1D7A9B5F8();
  v8[16] = v9;
  v8[17] = *(void *)(v9 - 8);
  v8[18] = swift_task_alloc();
  uint64_t v10 = sub_1D7A9CE28();
  v8[19] = v10;
  v8[20] = *(void *)(v10 - 8);
  v8[21] = swift_task_alloc();
  v8[22] = swift_task_alloc();
  uint64_t v11 = sub_1D7A9CE48();
  v8[23] = v11;
  v8[24] = *(void *)(v11 - 8);
  v8[25] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_1D78E8F0C, 0, 0);
}

uint64_t sub_1D78E8F0C()
{
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 152);
  sub_1D7A9CE38();
  *(_OWORD *)(v0 + 64) = xmmword_1D7AA8F60;
  *(void *)(v0 + 48) = 0;
  *(void *)(v0 + 40) = 0;
  *(unsigned char *)(v0 + 56) = 1;
  uint64_t v4 = sub_1D78EA2E8(&qword_1EBDF9998, MEMORY[0x1E4FBD1A8]);
  sub_1D7A9D508();
  sub_1D78EA2E8(&qword_1EBDF9BC0, MEMORY[0x1E4FBD178]);
  sub_1D7A9CE58();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  *(void *)(v0 + 208) = v5;
  *(void *)(v0 + 216) = (v2 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v5(v1, v3);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 224) = v6;
  void *v6 = v0;
  v6[1] = sub_1D78E90C4;
  uint64_t v8 = *(void *)(v0 + 176);
  uint64_t v7 = *(void *)(v0 + 184);
  return MEMORY[0x1F4188178](v8, v0 + 40, v7, v4);
}

uint64_t sub_1D78E90C4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 232) = v0;
  swift_task_dealloc();
  if (v0)
  {
    (*(void (**)(void, void))(v2 + 208))(*(void *)(v2 + 176), *(void *)(v2 + 152));
    uint64_t v3 = sub_1D78E9648;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 192);
    uint64_t v4 = *(void *)(v2 + 200);
    uint64_t v6 = *(void *)(v2 + 184);
    (*(void (**)(void, void))(v2 + 208))(*(void *)(v2 + 176), *(void *)(v2 + 152));
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    uint64_t v3 = sub_1D78E921C;
  }
  return MEMORY[0x1F4188298](v3, 0, 0);
}

uint64_t sub_1D78E921C()
{
  uint64_t v28 = v0;
  (*(void (**)(void))(v0 + 88))();
  if (*(unsigned char *)(v0 + 57) == 1)
  {
    if (qword_1EBDF9DC8 != -1) {
      swift_once();
    }
    uint64_t v2 = *(void *)(v0 + 136);
    uint64_t v1 = *(void *)(v0 + 144);
    uint64_t v3 = *(void *)(v0 + 128);
    uint64_t v4 = __swift_project_value_buffer(v3, (uint64_t)qword_1EBDFBE70);
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
    swift_bridgeObjectRetain_n();
    uint64_t v5 = sub_1D7A9B5D8();
    os_log_type_t v6 = sub_1D7A9C738();
    BOOL v7 = os_log_type_enabled(v5, v6);
    uint64_t v9 = *(void *)(v0 + 136);
    uint64_t v8 = *(void *)(v0 + 144);
    uint64_t v10 = *(void *)(v0 + 128);
    unint64_t v11 = *(void *)(v0 + 112);
    if (v7)
    {
      uint64_t v24 = *(void *)(v0 + 104);
      uint64_t v26 = *(void *)(v0 + 128);
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = v8;
      uint64_t v13 = swift_slowAlloc();
      uint64_t v27 = v13;
      *(_DWORD *)uint64_t v12 = 136446210;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 80) = sub_1D7923300(v24, v11, &v27);
      sub_1D7A9C9E8();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1D7853000, v5, v6, "Background activity %{public}s was deferred", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D947D740](v13, -1, -1);
      MEMORY[0x1D947D740](v12, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v25, v26);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    }
    xpc_activity_set_state(*(xpc_activity_t *)(v0 + 120), 3);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
    return v22();
  }
  else
  {
    uint64_t v15 = *(void *)(v0 + 160);
    uint64_t v14 = *(void *)(v0 + 168);
    uint64_t v16 = *(void *)(v0 + 152);
    sub_1D7A9CE38();
    *(_OWORD *)(v0 + 64) = xmmword_1D7AA8F60;
    *(void *)(v0 + 48) = 0;
    *(void *)(v0 + 40) = 0;
    *(unsigned char *)(v0 + 56) = 1;
    uint64_t v17 = sub_1D78EA2E8(&qword_1EBDF9998, MEMORY[0x1E4FBD1A8]);
    sub_1D7A9D508();
    sub_1D78EA2E8(&qword_1EBDF9BC0, MEMORY[0x1E4FBD178]);
    sub_1D7A9CE58();
    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    *(void *)(v0 + 208) = v18;
    *(void *)(v0 + 216) = (v15 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v18(v14, v16);
    uint64_t v19 = (void *)swift_task_alloc();
    *(void *)(v0 + 224) = v19;
    *uint64_t v19 = v0;
    v19[1] = sub_1D78E90C4;
    uint64_t v21 = *(void *)(v0 + 176);
    uint64_t v20 = *(void *)(v0 + 184);
    return MEMORY[0x1F4188178](v21, v0 + 40, v20, v17);
  }
}

uint64_t sub_1D78E9648()
{
  uint64_t v1 = (void *)v0[29];
  (*(void (**)(void, void))(v0[24] + 8))(v0[25], v0[23]);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t DIPBackgroundActivityManager.deinit()
{
  swift_release();
  return v0;
}

uint64_t DIPBackgroundActivityManager.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

void sub_1D78E974C(uint64_t a1, uint64_t a2, CoreIDVShared::DIPBackgroundActivitySettings_optional a3, Swift::Double a4, Swift::Double a5)
{
}

uint64_t sub_1D78E9770(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return DIPBackgroundActivityManager.registerActivity(identifier:activity:)(a1, a2, a3, a4);
}

uint64_t sub_1D78E9794(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return DIPBackgroundActivityManager.registerActivity(identifier:activity:)(a1, a2, a3, a4);
}

uint64_t sub_1D78E97B8(uint64_t *a1)
{
  return sub_1D78E4C50(a1, v1[2], v1[3], v1[4], v1[5], 0);
}

xpc_activity_state_t sub_1D78E97E0(_xpc_activity_s *a1)
{
  return sub_1D78E5910(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(uint64_t (***)(uint64_t))(v1 + 32), *(NSObject **)(v1 + 40));
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t sub_1D78E9804(uint64_t *a1)
{
  return sub_1D78E4C50(a1, v1[2], v1[3], v1[4], v1[5], 1);
}

xpc_activity_state_t sub_1D78E982C(_xpc_activity_s *a1)
{
  return sub_1D78E6F1C(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_1D78E9838(uint64_t *a1)
{
  return sub_1D78E5004(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1D78E9854@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1D78E5858(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_1D78E9874(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return sub_1D78E988C();
  }
  return result;
}

uint64_t sub_1D78E988C()
{
  return swift_retain();
}

uint64_t sub_1D78E9894(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return sub_1D78A2804();
  }
  return result;
}

uint64_t objectdestroyTm_0()
{
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x1F4186498](v0, 48, 7);
}

unint64_t sub_1D78E98F4()
{
  unint64_t result = qword_1EA843820;
  if (!qword_1EA843820)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA843820);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for DIPBackgroundDeferralStatus(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D78E9A14);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DIPBackgroundDeferralStatus()
{
  return &type metadata for DIPBackgroundDeferralStatus;
}

_DWORD *__swift_memcpy4_1(_DWORD *result, _DWORD *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for DIPBackgroundActivitySettings(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[4]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for DIPBackgroundActivitySettings(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_DWORD *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 4) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 4) = 0;
    }
    if (a2) {
      *(unsigned char *)unint64_t result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DIPBackgroundActivitySettings()
{
  return &type metadata for DIPBackgroundActivitySettings;
}

uint64_t dispatch thunk of DIPBackgroundActivityManagerProtocol.scheduleActivity(identifier:after:gracePeriod:settings:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of DIPBackgroundActivityManagerProtocol.registerActivity(identifier:activity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 16))();
}

{
  return (*(uint64_t (**)(void))(a6 + 24))();
}

uint64_t type metadata accessor for DIPBackgroundActivityManager()
{
  return self;
}

uint64_t method lookup function for DIPBackgroundActivityManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for DIPBackgroundActivityManager);
}

uint64_t destroy for DIPBackgroundActivityManager.Storage()
{
  return sub_1D78A2804();
}

uint64_t _s13CoreIDVShared28DIPBackgroundActivityManagerC7StorageOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  sub_1D78E988C();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for DIPBackgroundActivityManager.Storage(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  sub_1D78E988C();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  sub_1D78A2804();
  return a1;
}

uint64_t assignWithTake for DIPBackgroundActivityManager.Storage(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  sub_1D78A2804();
  return a1;
}

ValueMetadata *type metadata accessor for DIPBackgroundActivityManager.Storage()
{
  return &type metadata for DIPBackgroundActivityManager.Storage;
}

uint64_t sub_1D78E9C98()
{
  swift_unknownObjectRelease();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

BOOL sub_1D78E9CD0@<W0>(unsigned char *a1@<X8>)
{
  return sub_1D78E7094(*(_xpc_activity_s **)(v1 + 16), a1);
}

uint64_t sub_1D78E9CEC()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  return MEMORY[0x1F4186498](v0, 88, 7);
}

uint64_t sub_1D78E9D44(uint64_t a1)
{
  uint64_t v4 = v1[3];
  uint64_t v12 = v1[2];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v7 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v9 = v1[8];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_1D786EC1C;
  return sub_1D78E7188(a1, v12, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_1D78E9E38(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = v2[5];
  uint64_t v10 = v2[6];
  uint64_t v11 = v2[7];
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v12;
  void *v12 = v3;
  v12[1] = sub_1D7874050;
  return sub_1D78E76DC(a1, a2, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_1D78E9F28()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return MEMORY[0x1F4186498](v0, 80, 7);
}

uint64_t sub_1D78E9F78(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  void *v11 = v2;
  v11[1] = sub_1D7874050;
  return sub_1D78E7B50(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1D78EA064()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return MEMORY[0x1F4186498](v0, 72, 7);
}

uint64_t sub_1D78EA0B4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  void *v11 = v2;
  v11[1] = sub_1D7874050;
  return sub_1D78E8D7C(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1D78EA190()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D78EA1C8(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1D786EC1C;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1EA8438D8 + dword_1EA8438D8);
  return v6(a1, v4);
}

uint64_t sub_1D78EA280()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 72, 7);
}

uint64_t sub_1D78EA2D0()
{
  return sub_1D78EA3FC((uint64_t (*)(void, void, void, void, void, void, void))sub_1D78E6208);
}

uint64_t sub_1D78EA2E8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1D78EA330()
{
  unint64_t result = qword_1EBDF9DA0;
  if (!qword_1EBDF9DA0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EBDF9D98);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBDF9DA0);
  }
  return result;
}

uint64_t sub_1D78EA38C()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, 72, 7);
}