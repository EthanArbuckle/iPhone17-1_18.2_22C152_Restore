unint64_t sub_1D7A18C10(unsigned __int8 a1)
{
  uint64_t v2;
  uint64_t vars8;

  sub_1D7A9D5D8();
  sub_1D7A9D5E8();
  v2 = sub_1D7A9D628();
  return sub_1D7A19D40(a1, v2);
}

unint64_t sub_1D7A18C7C(uint64_t a1)
{
  uint64_t v2 = sub_1D7A9CBD8();
  return sub_1D7A19DE0(a1, v2);
}

unint64_t sub_1D7A18CC0(char a1)
{
  sub_1D7A9D5D8();
  sub_1D790021C(a1);
  sub_1D7A9C0B8();
  swift_bridgeObjectRelease();
  uint64_t v2 = sub_1D7A9D628();
  return sub_1D7A19EA8(a1, v2);
}

unint64_t sub_1D7A18D48(uint64_t a1)
{
  sub_1D7A9BFC8();
  sub_1D7A9D5D8();
  sub_1D7A9C0B8();
  uint64_t v2 = sub_1D7A9D628();
  swift_bridgeObjectRelease();
  return sub_1D7A1A46C(a1, v2);
}

unint64_t sub_1D7A18DDC(uint64_t a1)
{
  uint64_t v2 = sub_1D7A9C948();
  return sub_1D7A1A850(a1, v2, (unint64_t *)&qword_1EBDF93C0);
}

unint64_t sub_1D7A18E2C(uint64_t a1, uint64_t a2)
{
  sub_1D7A9D5D8();
  IQACode.hash(into:)();
  uint64_t v4 = sub_1D7A9D628();
  return sub_1D7A1A5E4(a1, a2, v4);
}

unint64_t sub_1D7A18EA4(uint64_t a1)
{
  sub_1D7A9D5D8();
  type metadata accessor for CFString(0);
  sub_1D7A1B3BC();
  sub_1D7A9B4A8();
  uint64_t v2 = sub_1D7A9D628();
  return sub_1D7A1A688(a1, v2);
}

unint64_t sub_1D7A18F28(uint64_t a1)
{
  uint64_t v2 = sub_1D7A9C948();
  return sub_1D7A1A850(a1, v2, (unint64_t *)&qword_1EA8421A0);
}

uint64_t sub_1D7A18F78(uint64_t a1, uint64_t a2)
{
  return sub_1D7A18FA4(a1, a2, MEMORY[0x1E4F27780], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1D7A1A964);
}

uint64_t sub_1D7A18FA4(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  sub_1D7A9D5D8();
  a3(v10, a1, a2);
  uint64_t v7 = sub_1D7A9D628();
  return a4(a1, a2, v7);
}

unint64_t sub_1D7A19038(uint64_t a1)
{
  uint64_t v2 = sub_1D7A9C948();
  return sub_1D7A1A850(a1, v2, (unint64_t *)&qword_1EBDF8260);
}

unint64_t sub_1D7A19088(char a1)
{
  char v1 = a1 & 1;
  sub_1D7A9D5D8();
  sub_1D7A9D5E8();
  uint64_t v2 = sub_1D7A9D628();
  return sub_1D7A1B300(v1, v2);
}

unint64_t sub_1D7A190F8(uint64_t a1)
{
  uint64_t v2 = sub_1D7A9C948();
  return sub_1D7A1A850(a1, v2, (unint64_t *)&qword_1EBDF7920);
}

unint64_t sub_1D7A19148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_1D7A9D358() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_1D7A9D358() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_1D7A1922C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = ~v4;
    while (1)
    {
      unint64_t v7 = DIPError.PropertyKey.rawValue.getter();
      uint64_t v9 = v8;
      if (v7 == DIPError.PropertyKey.rawValue.getter() && v9 == v10) {
        break;
      }
      char v12 = sub_1D7A9D358();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v12 & 1) == 0)
      {
        unint64_t v5 = (v5 + 1) & v6;
        if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
          continue;
        }
      }
      return v5;
    }
    swift_bridgeObjectRelease_n();
  }
  return v5;
}

unint64_t sub_1D7A1934C(char a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v6 = ~v3;
    while (1)
    {
      unint64_t v7 = 0xED00004449776F6CLL;
      unint64_t v8 = 0x666B726F576F6E69;
      switch(*(unsigned char *)(*(void *)(v2 + 48) + v4))
      {
        case 1:
          unint64_t v8 = 0x69766F72506F6E69;
          unint64_t v7 = 0xED00004449726564;
          break;
        case 2:
          unint64_t v8 = 0x6C666B726F577073;
          unint64_t v7 = 0xEC0000004449776FLL;
          break;
        case 3:
          unint64_t v8 = 0x6469766F72507073;
          unint64_t v7 = 0xEC00000044497265;
          break;
        case 4:
          unint64_t v8 = 0x7475626972747461;
          unint64_t v7 = 0xEB00000000444965;
          break;
        case 5:
          uint64_t v9 = "daemonSessionState";
          goto LABEL_30;
        case 6:
          unint64_t v8 = 0x5255726576726573;
          unint64_t v7 = 0xE90000000000004CLL;
          break;
        case 7:
          unint64_t v8 = 0xD000000000000010;
          uint64_t v10 = "serverStatusCode";
          goto LABEL_32;
        case 8:
          unint64_t v8 = 0xD000000000000013;
          uint64_t v10 = "serverSubStatusCode";
          goto LABEL_32;
        case 9:
          unint64_t v8 = 0x4974736575716572;
          unint64_t v7 = 0xE900000000000044;
          break;
        case 0xA:
          unint64_t v8 = 0x61737265766E6F63;
          unint64_t v7 = 0xEE0044496E6F6974;
          break;
        case 0xB:
          unint64_t v8 = 0xD000000000000010;
          uint64_t v10 = "serverRetryAfter";
          goto LABEL_32;
        case 0xC:
          uint64_t v9 = "cloudContainerName";
          goto LABEL_30;
        case 0xD:
          unint64_t v8 = 0xD000000000000013;
          uint64_t v10 = "cloudContainerState";
          goto LABEL_32;
        case 0xE:
          unint64_t v8 = 0x63655264756F6C63;
          unint64_t v7 = 0xEF656E6F5A64726FLL;
          break;
        case 0xF:
          unint64_t v8 = 0x6552656369766564;
          unint64_t v7 = 0xEC0000006E6F6967;
          break;
        case 0x10:
          uint64_t v9 = "appleAccountStatus";
          goto LABEL_30;
        case 0x11:
          unint64_t v8 = 0x6761735574726563;
          unint64_t v7 = 0xE900000000000065;
          break;
        case 0x12:
          unint64_t v8 = 0x6573616261746164;
          unint64_t v7 = 0xEE006E6D756C6F43;
          break;
        case 0x13:
          unint64_t v8 = 0x74737973656C6966;
          unint64_t v7 = 0xEE00687461506D65;
          break;
        case 0x14:
          unint64_t v8 = 0x69796C7265646E75;
          unint64_t v7 = 0xEF6F6E727245676ELL;
          break;
        case 0x15:
          unint64_t v8 = 0x636E456567616D69;
          unint64_t v7 = 0xED0000676E69646FLL;
          break;
        case 0x16:
          unint64_t v7 = 0xE400000000000000;
          unint64_t v8 = 1701273968;
          break;
        case 0x17:
          unint64_t v8 = 0x636E75614C6F6E69;
          unint64_t v7 = 0xED00007265695468;
          break;
        case 0x18:
          unint64_t v7 = 0xE800000000000000;
          unint64_t v8 = 0x746E756F43797274;
          break;
        case 0x19:
          unint64_t v8 = 0x746E656D75636F64;
          unint64_t v7 = 0xEF74736575716552;
          break;
        case 0x1A:
          uint64_t v9 = "termsAndConditions";
LABEL_30:
          unint64_t v7 = (unint64_t)(v9 - 32) | 0x8000000000000000;
          unint64_t v8 = 0xD000000000000012;
          break;
        case 0x1B:
          unint64_t v8 = 0xD000000000000016;
          uint64_t v10 = "issuerCertificateChain";
LABEL_32:
          unint64_t v7 = (unint64_t)(v10 - 32) | 0x8000000000000000;
          break;
        default:
          break;
      }
      unint64_t v11 = 0x666B726F576F6E69;
      unint64_t v12 = 0xED00004449776F6CLL;
      switch(a1)
      {
        case 1:
          uint64_t v13 = 0x69766F72506F6E69;
          uint64_t v14 = 0x4449726564;
          goto LABEL_69;
        case 2:
          unint64_t v12 = 0xEC0000004449776FLL;
          if (v8 != 0x6C666B726F577073) {
            goto LABEL_79;
          }
          goto LABEL_78;
        case 3:
          uint64_t v15 = 0x6469766F72507073;
          uint64_t v16 = 1145664101;
          goto LABEL_54;
        case 4:
          unint64_t v12 = 0xEB00000000444965;
          if (v8 != 0x7475626972747461) {
            goto LABEL_79;
          }
          goto LABEL_78;
        case 5:
          v17 = "daemonSessionState";
          goto LABEL_76;
        case 6:
          unint64_t v12 = 0xE90000000000004CLL;
          if (v8 != 0x5255726576726573) {
            goto LABEL_79;
          }
          goto LABEL_78;
        case 7:
          unint64_t v18 = 0xD000000000000010;
          v19 = "serverStatusCode";
          goto LABEL_83;
        case 8:
          unint64_t v18 = 0xD000000000000013;
          v19 = "serverSubStatusCode";
          goto LABEL_83;
        case 9:
          unint64_t v12 = 0xE900000000000044;
          if (v8 != 0x4974736575716572) {
            goto LABEL_79;
          }
          goto LABEL_78;
        case 10:
          uint64_t v20 = 0x61737265766E6F63;
          uint64_t v21 = 0x44496E6F6974;
          goto LABEL_61;
        case 11:
          unint64_t v18 = 0xD000000000000010;
          v19 = "serverRetryAfter";
          goto LABEL_83;
        case 12:
          v17 = "cloudContainerName";
          goto LABEL_76;
        case 13:
          unint64_t v18 = 0xD000000000000013;
          v19 = "cloudContainerState";
          goto LABEL_83;
        case 14:
          unint64_t v12 = 0xEF656E6F5A64726FLL;
          if (v8 != 0x63655264756F6C63) {
            goto LABEL_79;
          }
          goto LABEL_78;
        case 15:
          uint64_t v15 = 0x6552656369766564;
          uint64_t v16 = 1852795239;
LABEL_54:
          unint64_t v12 = v16 & 0xFFFFFFFFFFFFLL | 0xEC00000000000000;
          if (v8 != v15) {
            goto LABEL_79;
          }
          goto LABEL_78;
        case 16:
          v17 = "appleAccountStatus";
          goto LABEL_76;
        case 17:
          unint64_t v12 = 0xE900000000000065;
          if (v8 != 0x6761735574726563) {
            goto LABEL_79;
          }
          goto LABEL_78;
        case 18:
          uint64_t v20 = 0x6573616261746164;
          uint64_t v21 = 0x6E6D756C6F43;
          goto LABEL_61;
        case 19:
          uint64_t v20 = 0x74737973656C6966;
          uint64_t v21 = 0x687461506D65;
LABEL_61:
          unint64_t v12 = v21 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
          if (v8 != v20) {
            goto LABEL_79;
          }
          goto LABEL_78;
        case 20:
          unint64_t v12 = 0xEF6F6E727245676ELL;
          if (v8 != 0x69796C7265646E75) {
            goto LABEL_79;
          }
          goto LABEL_78;
        case 21:
          uint64_t v13 = 0x636E456567616D69;
          uint64_t v14 = 0x676E69646FLL;
          goto LABEL_69;
        case 22:
          unint64_t v12 = 0xE400000000000000;
          if (v8 != 1701273968) {
            goto LABEL_79;
          }
          goto LABEL_78;
        case 23:
          uint64_t v13 = 0x636E75614C6F6E69;
          uint64_t v14 = 0x7265695468;
LABEL_69:
          unint64_t v12 = v14 & 0xFFFFFFFFFFFFLL | 0xED00000000000000;
          if (v8 != v13) {
            goto LABEL_79;
          }
          goto LABEL_78;
        case 24:
          unint64_t v12 = 0xE800000000000000;
          if (v8 != 0x746E756F43797274) {
            goto LABEL_79;
          }
          goto LABEL_78;
        case 25:
          unint64_t v12 = 0xEF74736575716552;
          if (v8 != 0x746E656D75636F64) {
            goto LABEL_79;
          }
          goto LABEL_78;
        case 26:
          v17 = "termsAndConditions";
LABEL_76:
          unint64_t v12 = (unint64_t)(v17 - 32) | 0x8000000000000000;
          unint64_t v11 = 0xD000000000000012;
          goto LABEL_77;
        case 27:
          unint64_t v18 = 0xD000000000000016;
          v19 = "issuerCertificateChain";
LABEL_83:
          unint64_t v12 = (unint64_t)(v19 - 32) | 0x8000000000000000;
          if (v8 != v18) {
            goto LABEL_79;
          }
          goto LABEL_78;
        default:
LABEL_77:
          if (v8 != v11) {
            goto LABEL_79;
          }
LABEL_78:
          if (v7 == v12)
          {
            swift_bridgeObjectRelease_n();
            return v4;
          }
LABEL_79:
          char v22 = sub_1D7A9D358();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v22) {
            return v4;
          }
          unint64_t v4 = (v4 + 1) & v6;
          if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
            return v4;
          }
          break;
      }
    }
  }
  return v4;
}

unint64_t sub_1D7A19BA8(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = a1;
  uint64_t v4 = sub_1D7A9CEA8();
  MEMORY[0x1F4188790](v4, v5, v6, v7, v8, v9, v10, v11);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = v2;
  uint64_t v15 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v16 = a2 & ~v15;
  uint64_t v27 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v16 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v16))
  {
    uint64_t v17 = ~v15;
    uint64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v12 + 16);
    uint64_t v18 = v12 + 16;
    v19 = v20;
    uint64_t v21 = *(void *)(v18 + 56);
    char v22 = (void (**)(char *, uint64_t))(v18 - 8);
    do
    {
      uint64_t v23 = v18;
      v19(v14, *(void *)(v29 + 48) + v21 * v16, v4);
      char v24 = sub_1D7A9BF88();
      (*v22)(v14, v4);
      if (v24) {
        break;
      }
      unint64_t v16 = (v16 + 1) & v17;
      uint64_t v18 = v23;
    }
    while (((*(void *)(v27 + ((v16 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v16) & 1) != 0);
  }
  return v16;
}

unint64_t sub_1D7A19D40(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_1D7A19DE0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v6 = ~v3;
    do
    {
      sub_1D78A26EC(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      char v7 = MEMORY[0x1D947B960](v9, a1);
      sub_1D78A2748((uint64_t)v9);
      if (v7) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v6;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_1D7A19EA8(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    uint64_t v6 = a1;
    while (1)
    {
      unint64_t v7 = 0xEA00000000007373;
      unint64_t v8 = 0x656E697272756C62;
      switch(*(unsigned char *)(*(void *)(v2 + 48) + v4))
      {
        case 1:
          unint64_t v7 = 0xE800000000000000;
          unint64_t v8 = 0x657275736F707865;
          break;
        case 2:
          unint64_t v8 = 0x7473694464726163;
          unint64_t v7 = 0xEE006E6F6974726FLL;
          break;
        case 3:
          unint64_t v8 = 0xD000000000000010;
          unint64_t v7 = 0x80000001D7ABBBE0;
          break;
        case 4:
          unint64_t v8 = 0xD000000000000011;
          unint64_t v7 = 0x80000001D7ABBC00;
          break;
        case 5:
          unint64_t v8 = 0x6374695064616568;
          unint64_t v7 = 0xE900000000000068;
          break;
        case 6:
          unint64_t v7 = 0xE800000000000000;
          unint64_t v8 = 0x6C6C6F5264616568;
          break;
        case 7:
          unint64_t v7 = 0xE700000000000000;
          unint64_t v8 = 0x77615964616568;
          break;
        case 8:
          unint64_t v8 = 0x666E6F4365636166;
          unint64_t v7 = 0xEE0065636E656469;
          break;
        case 9:
          uint64_t v9 = "o";
          goto LABEL_19;
        case 0xA:
          unint64_t v8 = 0xD000000000000016;
          unint64_t v7 = 0x80000001D7ABBC50;
          break;
        case 0xB:
          unint64_t v8 = 0xD000000000000014;
          unint64_t v7 = 0x80000001D7ABBC70;
          break;
        case 0xC:
          uint64_t v9 = "sunglassesConfidence";
          goto LABEL_19;
        case 0xD:
          uint64_t v9 = "facemaskConfidence";
          goto LABEL_19;
        case 0xE:
          unint64_t v8 = 0x5465727574706163;
          unint64_t v7 = 0xEB00000000656D69;
          break;
        case 0xF:
          uint64_t v9 = "headgearConfidence";
LABEL_19:
          unint64_t v7 = (unint64_t)v9 | 0x8000000000000000;
          unint64_t v8 = 0xD000000000000012;
          break;
        case 0x10:
          unint64_t v8 = 0xD000000000000010;
          unint64_t v7 = 0x80000001D7ABBD10;
          break;
        case 0x11:
          unint64_t v8 = 0x6556746567726174;
          unint64_t v7 = 0xEE00736563697472;
          break;
        case 0x12:
          unint64_t v8 = 0xD000000000000010;
          unint64_t v7 = 0x80000001D7ABBCF0;
          break;
        case 0x13:
          unint64_t v8 = 0x746E656D75636F64;
          unint64_t v7 = 0xEC00000077656B53;
          break;
        default:
          break;
      }
      unint64_t v10 = 0x656E697272756C62;
      unint64_t v11 = 0xEA00000000007373;
      switch(v6)
      {
        case 1:
          unint64_t v11 = 0xE800000000000000;
          unint64_t v10 = 0x657275736F707865;
          break;
        case 2:
          unint64_t v10 = 0x7473694464726163;
          unint64_t v11 = 0xEE006E6F6974726FLL;
          break;
        case 3:
          unint64_t v10 = 0xD000000000000010;
          unint64_t v11 = 0x80000001D7ABBBE0;
          break;
        case 4:
          unint64_t v10 = 0xD000000000000011;
          unint64_t v11 = 0x80000001D7ABBC00;
          break;
        case 5:
          unint64_t v10 = 0x6374695064616568;
          unint64_t v11 = 0xE900000000000068;
          break;
        case 6:
          unint64_t v11 = 0xE800000000000000;
          unint64_t v10 = 0x6C6C6F5264616568;
          break;
        case 7:
          unint64_t v11 = 0xE700000000000000;
          unint64_t v10 = 0x77615964616568;
          break;
        case 8:
          unint64_t v10 = 0x666E6F4365636166;
          unint64_t v11 = 0xEE0065636E656469;
          break;
        case 9:
          uint64_t v12 = "o";
          goto LABEL_40;
        case 10:
          unint64_t v10 = 0xD000000000000016;
          unint64_t v11 = 0x80000001D7ABBC50;
          break;
        case 11:
          unint64_t v10 = 0xD000000000000014;
          unint64_t v11 = 0x80000001D7ABBC70;
          break;
        case 12:
          uint64_t v12 = "sunglassesConfidence";
          goto LABEL_40;
        case 13:
          uint64_t v12 = "facemaskConfidence";
          goto LABEL_40;
        case 14:
          unint64_t v10 = 0x5465727574706163;
          unint64_t v11 = 0xEB00000000656D69;
          break;
        case 15:
          uint64_t v12 = "headgearConfidence";
LABEL_40:
          unint64_t v11 = (unint64_t)v12 | 0x8000000000000000;
          unint64_t v10 = 0xD000000000000012;
          break;
        case 16:
          unint64_t v10 = 0xD000000000000010;
          unint64_t v11 = 0x80000001D7ABBD10;
          break;
        case 17:
          unint64_t v10 = 0x6556746567726174;
          unint64_t v11 = 0xEE00736563697472;
          break;
        case 18:
          unint64_t v10 = 0xD000000000000010;
          unint64_t v11 = 0x80000001D7ABBCF0;
          break;
        case 19:
          unint64_t v10 = 0x746E656D75636F64;
          unint64_t v11 = 0xEC00000077656B53;
          break;
        default:
          break;
      }
      if (v8 == v10 && v7 == v11) {
        break;
      }
      char v13 = sub_1D7A9D358();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v13 & 1) == 0)
      {
        unint64_t v4 = (v4 + 1) & v5;
        if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4)) {
          continue;
        }
      }
      return v4;
    }
    swift_bridgeObjectRelease_n();
  }
  return v4;
}

unint64_t sub_1D7A1A46C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = sub_1D7A9BFC8();
    uint64_t v8 = v7;
    if (v6 == sub_1D7A9BFC8() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = sub_1D7A9D358();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = sub_1D7A9BFC8();
          uint64_t v15 = v14;
          if (v13 == sub_1D7A9BFC8() && v15 == v16) {
            break;
          }
          char v18 = sub_1D7A9D358();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_1D7A1A5E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v9[0] = a1;
  v9[1] = a2;
  uint64_t v4 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v5 = a3 & ~v4;
  if ((*(void *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = ~v4;
    do
    {
      long long v8 = *(_OWORD *)(*(void *)(v3 + 48) + 16 * v5);
      if (_s13CoreIDVShared7IQACodeO2eeoiySbAC_ACtFZ_0((uint64_t *)&v8, v9)) {
        break;
      }
      unint64_t v5 = (v5 + 1) & v6;
    }
    while (((*(void *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  return v5;
}

unint64_t sub_1D7A1A688(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    type metadata accessor for CFString(0);
    uint64_t v6 = *(void **)(*(void *)(v2 + 48) + 8 * i);
    sub_1D7A1B3BC();
    id v7 = v6;
    char v8 = sub_1D7A9B498();

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v4;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v11 = sub_1D7A9B498();

        if (v11) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_1D7A1A7B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_1D7A1A850(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t i = a2 & ~v5;
  if ((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    sub_1D78C4038(0, a3);
    id v7 = *(id *)(*(void *)(v3 + 48) + 8 * i);
    char v8 = sub_1D7A9C958();

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v5;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v3 + 48) + 8 * i);
        char v11 = sub_1D7A9C958();

        if (v11) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_1D7A1A964(uint64_t a1, unint64_t a2, uint64_t a3)
{
  __s1[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v7 = v3;
    unint64_t v8 = a2;
    uint64_t v10 = ~v5;
    unint64_t v80 = HIDWORD(a1);
    size_t v86 = HIDWORD(a1) - (int)a1;
    uint64_t v87 = ~v5;
    BOOL v11 = __OFSUB__(HIDWORD(a1), a1);
    BOOL v85 = v11;
    unint64_t v88 = a2 >> 62;
    uint64_t v83 = v3 + 64;
    uint64_t v84 = (int)a1;
    uint64_t v81 = a1 >> 32;
    uint64_t v79 = (a1 >> 32) - (int)a1;
    unint64_t v89 = a2 >> 62;
    size_t __n = BYTE6(a2);
    while (1)
    {
      uint64_t v12 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v6);
      uint64_t v14 = *v12;
      unint64_t v13 = v12[1];
      uint64_t v15 = 0;
      switch(v13 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v14), v14))
          {
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
          }
          uint64_t v15 = HIDWORD(v14) - (int)v14;
LABEL_14:
          sub_1D7860790(v14, v13);
          break;
        case 2uLL:
          uint64_t v17 = *(void *)(v14 + 16);
          uint64_t v16 = *(void *)(v14 + 24);
          uint64_t v15 = v16 - v17;
          if (!__OFSUB__(v16, v17)) {
            goto LABEL_14;
          }
          goto LABEL_122;
        case 3uLL:
          break;
        default:
          uint64_t v15 = BYTE6(v13);
          break;
      }
      size_t v18 = __n;
      switch(v89)
      {
        case 1uLL:
          size_t v18 = v86;
          if (v85) {
            goto LABEL_123;
          }
          goto LABEL_19;
        case 2uLL:
          uint64_t v20 = *(void *)(a1 + 16);
          uint64_t v19 = *(void *)(a1 + 24);
          BOOL v21 = __OFSUB__(v19, v20);
          size_t v18 = v19 - v20;
          if (!v21) {
            goto LABEL_19;
          }
          goto LABEL_124;
        case 3uLL:
          if (v15) {
            goto LABEL_7;
          }
          goto LABEL_119;
        default:
LABEL_19:
          if (v15 == v18)
          {
            if (v15 < 1)
            {
LABEL_119:
              sub_1D78607E8(v14, v13);
              return v6;
            }
            switch(v13 >> 62)
            {
              case 1uLL:
                if ((int)v14 > v14 >> 32) {
                  goto LABEL_125;
                }
                uint64_t v26 = sub_1D7A9AC98();
                if (v26)
                {
                  uint64_t v27 = v26;
                  uint64_t v28 = sub_1D7A9ACB8();
                  if (__OFSUB__((int)v14, v28)) {
                    goto LABEL_127;
                  }
                  uint64_t v29 = (const void *)(v27 + (int)v14 - v28);
                }
                else
                {
                  uint64_t v29 = 0;
                }
                sub_1D7A9ACA8();
                if (!v88)
                {
                  LOWORD(__s1[0]) = a1;
                  BYTE2(__s1[0]) = BYTE2(a1);
                  BYTE3(__s1[0]) = BYTE3(a1);
                  BYTE4(__s1[0]) = v80;
                  BYTE5(__s1[0]) = BYTE5(a1);
                  BYTE6(__s1[0]) = BYTE6(a1);
                  HIBYTE(__s1[0]) = HIBYTE(a1);
                  LOWORD(__s1[1]) = v8;
                  BYTE2(__s1[1]) = BYTE2(v8);
                  BYTE3(__s1[1]) = BYTE3(v8);
                  BYTE4(__s1[1]) = BYTE4(v8);
                  BYTE5(__s1[1]) = BYTE5(v8);
                  if (!v29) {
                    goto LABEL_155;
                  }
                  int v46 = memcmp(v29, __s1, __n);
LABEL_102:
                  sub_1D78607E8(v14, v13);
                  uint64_t v10 = v87;
                  if (!v46) {
                    return v6;
                  }
                  break;
                }
                if (v88 == 1)
                {
                  if (v81 < v84) {
                    goto LABEL_136;
                  }
                  swift_retain();
                  uint64_t v47 = sub_1D7A9AC98();
                  if (v47)
                  {
                    uint64_t v48 = sub_1D7A9ACB8();
                    if (__OFSUB__(v84, v48)) {
                      goto LABEL_143;
                    }
                    v47 += v84 - v48;
                  }
                  uint64_t v49 = sub_1D7A9ACA8();
                  size_t v50 = v79;
                  if (v49 < v79) {
                    size_t v50 = v49;
                  }
                  if (!v29) {
                    goto LABEL_148;
                  }
                  if (!v47) {
                    goto LABEL_149;
                  }
                  size_t v39 = v50;
                  v40 = v29;
                  v38 = (const void *)v47;
LABEL_71:
                  int v46 = memcmp(v40, v38, v39);
                  sub_1D78607E8(a1, v8);
                  goto LABEL_102;
                }
                uint64_t v69 = *(void *)(a1 + 16);
                uint64_t v78 = *(void *)(a1 + 24);
                swift_retain();
                swift_retain();
                uint64_t v70 = sub_1D7A9AC98();
                if (v70)
                {
                  uint64_t v71 = v70;
                  uint64_t v72 = sub_1D7A9ACB8();
                  if (__OFSUB__(v69, v72)) {
                    goto LABEL_142;
                  }
                  v73 = (const void *)(v71 + v69 - v72);
                }
                else
                {
                  v73 = 0;
                }
                if (__OFSUB__(v78, v69)) {
                  goto LABEL_137;
                }
                uint64_t v74 = sub_1D7A9ACA8();
                if (v74 >= v78 - v69) {
                  size_t v75 = v78 - v69;
                }
                else {
                  size_t v75 = v74;
                }
                if (!v29) {
                  goto LABEL_156;
                }
                uint64_t v4 = v83;
                if (!v73) {
                  goto LABEL_157;
                }
                int v62 = memcmp(v29, v73, v75);
LABEL_115:
                swift_release();
LABEL_116:
                swift_release();
                sub_1D78607E8(v14, v13);
                unint64_t v8 = a2;
                uint64_t v10 = v87;
                if (!v62) {
                  return v6;
                }
                break;
              case 2uLL:
                uint64_t v30 = *(void *)(v14 + 16);
                swift_retain();
                swift_retain();
                uint64_t v31 = sub_1D7A9AC98();
                if (v31)
                {
                  uint64_t v32 = v31;
                  uint64_t v33 = sub_1D7A9ACB8();
                  if (__OFSUB__(v30, v33)) {
                    goto LABEL_126;
                  }
                  v34 = (const void *)(v32 + v30 - v33);
                }
                else
                {
                  v34 = 0;
                }
                sub_1D7A9ACA8();
                uint64_t v4 = v83;
                if (!v88)
                {
                  LOWORD(__s1[0]) = a1;
                  BYTE2(__s1[0]) = BYTE2(a1);
                  BYTE3(__s1[0]) = BYTE3(a1);
                  BYTE4(__s1[0]) = v80;
                  BYTE5(__s1[0]) = BYTE5(a1);
                  BYTE6(__s1[0]) = BYTE6(a1);
                  HIBYTE(__s1[0]) = HIBYTE(a1);
                  LODWORD(__s1[1]) = a2;
                  WORD2(__s1[1]) = WORD2(a2);
                  if (!v34) {
                    goto LABEL_152;
                  }
                  int v62 = memcmp(v34, __s1, __n);
                  swift_release();
                  goto LABEL_116;
                }
                if (v88 == 1)
                {
                  if (v81 < v84) {
                    goto LABEL_130;
                  }
                  swift_retain();
                  v42 = (char *)sub_1D7A9AC98();
                  if (v42)
                  {
                    uint64_t v43 = sub_1D7A9ACB8();
                    if (__OFSUB__(v84, v43)) {
                      goto LABEL_141;
                    }
                    v42 += v84 - v43;
                  }
                  uint64_t v44 = sub_1D7A9ACA8();
                  size_t v45 = v79;
                  if (v44 < v79) {
                    size_t v45 = v44;
                  }
                  if (!v34) {
                    goto LABEL_146;
                  }
                  if (!v42) {
                    goto LABEL_147;
                  }
                  int v46 = memcmp(v34, v42, v45);
                  unint64_t v8 = a2;
                  sub_1D78607E8(a1, a2);
                  swift_release();
                  swift_release();
                  goto LABEL_102;
                }
                uint64_t v63 = *(void *)(a1 + 16);
                uint64_t v77 = *(void *)(a1 + 24);
                swift_retain();
                swift_retain();
                v64 = (char *)sub_1D7A9AC98();
                if (v64)
                {
                  uint64_t v65 = sub_1D7A9ACB8();
                  if (__OFSUB__(v63, v65)) {
                    goto LABEL_140;
                  }
                  v64 += v63 - v65;
                }
                BOOL v21 = __OFSUB__(v77, v63);
                int64_t v66 = v77 - v63;
                if (v21) {
                  goto LABEL_135;
                }
                uint64_t v67 = sub_1D7A9ACA8();
                if (v67 >= v66) {
                  size_t v68 = v66;
                }
                else {
                  size_t v68 = v67;
                }
                if (!v34) {
                  goto LABEL_153;
                }
                uint64_t v4 = v83;
                if (!v64) {
                  goto LABEL_154;
                }
                int v62 = memcmp(v34, v64, v68);
                swift_release();
                swift_release();
                goto LABEL_115;
              case 3uLL:
                memset(__s1, 0, 14);
                if (!v88) {
                  goto LABEL_45;
                }
                if (v88 == 1)
                {
                  if (v81 < v84) {
                    goto LABEL_129;
                  }
                  sub_1D7860790(a1, v8);
                  uint64_t v35 = sub_1D7A9AC98();
                  if (!v35) {
                    goto LABEL_145;
                  }
                  uint64_t v23 = v35;
                  uint64_t v36 = sub_1D7A9ACB8();
                  uint64_t v25 = v84 - v36;
                  if (__OFSUB__(v84, v36)) {
                    goto LABEL_134;
                  }
LABEL_41:
                  uint64_t v37 = sub_1D7A9ACA8();
                  v38 = (const void *)(v23 + v25);
                  if (v37 >= v79) {
                    size_t v39 = v79;
                  }
                  else {
                    size_t v39 = v37;
                  }
                  v40 = __s1;
                  goto LABEL_71;
                }
                uint64_t v57 = *(void *)(a1 + 16);
                uint64_t v58 = *(void *)(a1 + 24);
                swift_retain();
                swift_retain();
                v53 = (char *)sub_1D7A9AC98();
                if (v53)
                {
                  uint64_t v59 = sub_1D7A9ACB8();
                  if (__OFSUB__(v57, v59)) {
                    goto LABEL_139;
                  }
                  v53 += v57 - v59;
                }
                BOOL v21 = __OFSUB__(v58, v57);
                int64_t v55 = v58 - v57;
                if (v21) {
                  goto LABEL_132;
                }
                uint64_t v56 = sub_1D7A9ACA8();
                if (!v53) {
                  goto LABEL_151;
                }
LABEL_83:
                if (v56 >= v55) {
                  size_t v60 = v55;
                }
                else {
                  size_t v60 = v56;
                }
                int v61 = memcmp(__s1, v53, v60);
                swift_release();
                swift_release();
                sub_1D78607E8(v14, v13);
                uint64_t v4 = v83;
                uint64_t v10 = v87;
                if (!v61) {
                  return v6;
                }
                break;
              default:
                __s1[0] = v14;
                LOWORD(__s1[1]) = v13;
                BYTE2(__s1[1]) = BYTE2(v13);
                BYTE3(__s1[1]) = BYTE3(v13);
                BYTE4(__s1[1]) = BYTE4(v13);
                BYTE5(__s1[1]) = BYTE5(v13);
                if (!v88)
                {
LABEL_45:
                  __int16 __s2 = a1;
                  char v92 = BYTE2(a1);
                  char v93 = BYTE3(a1);
                  char v94 = v80;
                  char v95 = BYTE5(a1);
                  char v96 = BYTE6(a1);
                  char v97 = HIBYTE(a1);
                  __int16 v98 = v8;
                  char v99 = BYTE2(v8);
                  char v100 = BYTE3(v8);
                  char v101 = BYTE4(v8);
                  char v102 = BYTE5(v8);
                  int v41 = memcmp(__s1, &__s2, __n);
                  sub_1D78607E8(v14, v13);
                  if (!v41) {
                    return v6;
                  }
                  break;
                }
                if (v88 == 1)
                {
                  if (v81 < v84) {
                    goto LABEL_128;
                  }
                  sub_1D7860790(a1, v8);
                  uint64_t v22 = sub_1D7A9AC98();
                  if (!v22)
                  {
                    sub_1D7A9ACA8();
                    __break(1u);
LABEL_145:
                    sub_1D7A9ACA8();
                    __break(1u);
LABEL_146:
                    __break(1u);
LABEL_147:
                    __break(1u);
LABEL_148:
                    __break(1u);
LABEL_149:
                    __break(1u);
LABEL_150:
                    __break(1u);
LABEL_151:
                    __break(1u);
LABEL_152:
                    __break(1u);
LABEL_153:
                    __break(1u);
LABEL_154:
                    __break(1u);
LABEL_155:
                    __break(1u);
LABEL_156:
                    __break(1u);
LABEL_157:
                    __break(1u);
                    JUMPOUT(0x1D7A1B2D0);
                  }
                  uint64_t v23 = v22;
                  uint64_t v24 = sub_1D7A9ACB8();
                  uint64_t v25 = v84 - v24;
                  if (__OFSUB__(v84, v24)) {
                    goto LABEL_133;
                  }
                  goto LABEL_41;
                }
                uint64_t v51 = *(void *)(a1 + 16);
                uint64_t v52 = *(void *)(a1 + 24);
                swift_retain();
                swift_retain();
                v53 = (char *)sub_1D7A9AC98();
                if (v53)
                {
                  uint64_t v54 = sub_1D7A9ACB8();
                  if (__OFSUB__(v51, v54)) {
                    goto LABEL_138;
                  }
                  v53 += v51 - v54;
                }
                BOOL v21 = __OFSUB__(v52, v51);
                int64_t v55 = v52 - v51;
                if (v21) {
                  goto LABEL_131;
                }
                uint64_t v56 = sub_1D7A9ACA8();
                if (!v53) {
                  goto LABEL_150;
                }
                goto LABEL_83;
            }
          }
          else
          {
LABEL_7:
            sub_1D78607E8(v14, v13);
          }
          unint64_t v6 = (v6 + 1) & v10;
          if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
            return v6;
          }
          break;
      }
    }
  }
  return v6;
}

unint64_t sub_1D7A1B300(char a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (((((a1 & 1) == 0) ^ *(unsigned __int8 *)(v7 + result)) & 1) == 0)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if ((((a1 & 1) == 0) ^ *(unsigned char *)(v7 + result))) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_1D7A1B3BC()
{
  unint64_t result = qword_1EA846FF0;
  if (!qword_1EA846FF0)
  {
    type metadata accessor for CFString(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA846FF0);
  }
  return result;
}

BOOL static AsyncCoreDataStore.StoreType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t AsyncCoreDataStore.StoreType.hash(into:)()
{
  return sub_1D7A9D5E8();
}

uint64_t AsyncCoreDataStore.StoreType.hashValue.getter()
{
  return sub_1D7A9D628();
}

uint64_t AsyncCoreDataStore.__allocating_init(persistentStoreName:modelURL:databaseURL:storeType:urlFileProtection:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6)
{
  uint64_t v12 = swift_allocObject();
  char v13 = *a5;
  uint64_t v14 = OBJC_IVAR____TtC13CoreIDVShared18AsyncCoreDataStore__container;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9990);
  uint64_t v15 = swift_allocObject();
  *(_DWORD *)(v15 + 24) = 0;
  *(void *)(v15 + 16) = 0;
  *(void *)(v12 + v14) = v15;
  uint64_t v16 = (void *)(v12 + OBJC_IVAR____TtC13CoreIDVShared18AsyncCoreDataStore_persistentStoreName);
  *uint64_t v16 = a1;
  v16[1] = a2;
  uint64_t v17 = v12 + OBJC_IVAR____TtC13CoreIDVShared18AsyncCoreDataStore_modelURL;
  uint64_t v18 = sub_1D7A9AF68();
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32);
  v19(v17, a3, v18);
  v19(v12 + OBJC_IVAR____TtC13CoreIDVShared18AsyncCoreDataStore_databaseURL, a4, v18);
  *(void *)(v12 + OBJC_IVAR____TtC13CoreIDVShared18AsyncCoreDataStore_urlFileProtection) = a6;
  *(unsigned char *)(v12 + 16) = v13;
  return v12;
}

uint64_t AsyncCoreDataStore.init(persistentStoreName:modelURL:databaseURL:storeType:urlFileProtection:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6)
{
  char v12 = *a5;
  uint64_t v13 = OBJC_IVAR____TtC13CoreIDVShared18AsyncCoreDataStore__container;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9990);
  uint64_t v14 = swift_allocObject();
  *(_DWORD *)(v14 + 24) = 0;
  *(void *)(v14 + 16) = 0;
  *(void *)(v6 + v13) = v14;
  uint64_t v15 = (void *)(v6 + OBJC_IVAR____TtC13CoreIDVShared18AsyncCoreDataStore_persistentStoreName);
  *uint64_t v15 = a1;
  v15[1] = a2;
  uint64_t v16 = v6 + OBJC_IVAR____TtC13CoreIDVShared18AsyncCoreDataStore_modelURL;
  uint64_t v17 = sub_1D7A9AF68();
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 32);
  v18(v16, a3, v17);
  v18(v6 + OBJC_IVAR____TtC13CoreIDVShared18AsyncCoreDataStore_databaseURL, a4, v17);
  *(void *)(v6 + OBJC_IVAR____TtC13CoreIDVShared18AsyncCoreDataStore_urlFileProtection) = a6;
  *(unsigned char *)(v6 + 16) = v12;
  return v6;
}

void AsyncCoreDataStore.container.getter()
{
  char v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC13CoreIDVShared18AsyncCoreDataStore__container);
  uint64_t v2 = (void **)&v1[4];
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1D7A1B88C(v2, &v4);
  os_unfair_lock_unlock(v3);
}

void sub_1D7A1B74C(void **a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *a1;
  if (*a1)
  {
    *a3 = v5;
LABEL_3:
    id v6 = v5;
    return;
  }
  if ((*(unsigned char *)(a2 + 16) & 1) == 0)
  {
    uint64_t v8 = sub_1D7A1BD34();
    if (v3) {
      goto LABEL_6;
    }
LABEL_9:
    *a1 = v8;
    *a3 = v8;
    char v12 = v8;
    uint64_t v5 = 0;
    goto LABEL_3;
  }
  uint64_t v8 = sub_1D7A1C340();
  if (!v3) {
    goto LABEL_9;
  }
LABEL_6:
  __int16 v13 = 0;
  id v9 = v3;
  unint64_t v10 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
  sub_1D7860544();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v3, 0, 0xE000000000000000, &v13, 0, v10, 0xD000000000000059, 0x80000001D7AC9640, v11, 0x656E6961746E6F63, 0xE900000000000072, 57);
  swift_willThrow();
}

void sub_1D7A1B88C(void **a1@<X0>, void *a2@<X8>)
{
  sub_1D7A1B74C(a1, v2, a2);
}

id sub_1D7A1B8A8()
{
  uint64_t v1 = sub_1D7A9B5F8();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1, v3, v4, v5, v6, v7, v8, v9);
  uint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v12 = objc_allocWithZone(MEMORY[0x1E4F1C120]);
  __int16 v13 = (void *)sub_1D7A9AF08();
  id v14 = objc_msgSend(v12, sel_initWithContentsOfURL_, v13);

  if (v14)
  {
    if (qword_1EBDF9DC8 != -1) {
      swift_once();
    }
    uint64_t v15 = __swift_project_value_buffer(v1, (uint64_t)qword_1EBDFBE70);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v11, v15, v1);
    swift_retain_n();
    uint64_t v16 = v1;
    uint64_t v17 = v2;
    uint64_t v18 = sub_1D7A9B5D8();
    os_log_type_t v19 = sub_1D7A9C748();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v37 = v16;
      uint64_t v20 = swift_slowAlloc();
      uint64_t v38 = v0;
      BOOL v21 = (uint8_t *)v20;
      uint64_t v36 = swift_slowAlloc();
      uint64_t v42 = v36;
      id v39 = v14;
      *(_DWORD *)BOOL v21 = 136446210;
      uint64_t v35 = v21 + 4;
      uint64_t v22 = sub_1D7A9AEA8();
      uint64_t v40 = sub_1D7923300(v22, v23, &v42);
      id v14 = v39;
      sub_1D7A9C9E8();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1D7853000, v18, v19, "Successfully loaded Core Data model at path %{public}s", v21, 0xCu);
      uint64_t v24 = v36;
      swift_arrayDestroy();
      MEMORY[0x1D947D740](v24, -1, -1);
      MEMORY[0x1D947D740](v21, -1, -1);

      (*(void (**)(char *, uint64_t))(v17 + 8))(v11, v37);
    }
    else
    {

      swift_release_n();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v11, v16);
    }
  }
  else
  {
    v41[0] = 94;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF8678);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1D7AA08E0;
    *(unsigned char *)(inited + 32) = 19;
    uint64_t v26 = sub_1D7A9AEA8();
    *(void *)(inited + 64) = MEMORY[0x1E4FBB1A0];
    *(void *)(inited + 40) = v26;
    *(void *)(inited + 48) = v27;
    unint64_t v28 = sub_1D785EC20(inited);
    sub_1D7860544();
    uint64_t v29 = (void *)swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000029, 0x80000001D7AC9810, v41, 0, v28, 0xD000000000000059, 0x80000001D7AC9640, v30, 0x65646F4D64616F6CLL, 0xEB0000000029286CLL, 73);
    swift_willThrow();
    v41[0] = 0;
    id v31 = v29;
    unint64_t v32 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v29, 0, 0xE000000000000000, v41, 0, v32, 0xD000000000000059, 0x80000001D7AC9640, v33, 0x65646F4D64616F6CLL, 0xEB0000000029286CLL, 79);
    swift_willThrow();
  }
  return v14;
}

void *sub_1D7A1BD34()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = (void *)sub_1D7A9B5F8();
  uint64_t v5 = *(v4 - 1);
  MEMORY[0x1F4188790](v4, v6, v7, v8, v9, v10, v11, v12);
  id v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v15 = __swift_project_value_buffer((uint64_t)v4, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, void *))(v5 + 16))(v14, v15, v4);
  swift_retain();
  uint64_t v16 = sub_1D7A9B5D8();
  os_log_type_t v17 = sub_1D7A9C748();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v43 = v1;
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v42 = swift_slowAlloc();
    aBlock[0] = v42;
    *(_DWORD *)uint64_t v18 = 136446210;
    int v41 = v18 + 4;
    uint64_t v20 = *(void *)(v3 + OBJC_IVAR____TtC13CoreIDVShared18AsyncCoreDataStore_persistentStoreName);
    unint64_t v19 = *(void *)(v3 + OBJC_IVAR____TtC13CoreIDVShared18AsyncCoreDataStore_persistentStoreName + 8);
    swift_bridgeObjectRetain();
    uint64_t v45 = sub_1D7923300(v20, v19, aBlock);
    sub_1D7A9C9E8();
    swift_release();
    uint64_t v2 = v43;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1D7853000, v16, v17, "Initializing on-disk Core Data database %{public}s", v18, 0xCu);
    uint64_t v21 = v42;
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v21, -1, -1);
    MEMORY[0x1D947D740](v18, -1, -1);
  }
  else
  {

    swift_release();
  }
  (*(void (**)(char *, void *))(v5 + 8))(v14, v4);
  id v22 = sub_1D7A1B8A8();
  if (!v2)
  {
    unint64_t v23 = v22;
    id v24 = objc_allocWithZone(MEMORY[0x1E4F1C150]);
    swift_bridgeObjectRetain();
    id v25 = v23;
    uint64_t v26 = (void *)sub_1D7A9BF98();
    swift_bridgeObjectRelease();
    uint64_t v4 = objc_msgSend(v24, sel_initWithName_managedObjectModel_, v26, v25);

    id v27 = objc_allocWithZone(MEMORY[0x1E4F1C190]);
    unint64_t v28 = (void *)sub_1D7A9AF08();
    id v29 = objc_msgSend(v27, sel_initWithURL_, v28);

    objc_msgSend(v29, sel_setType_, *MEMORY[0x1E4F1BF70]);
    objc_msgSend(v29, sel_setShouldInferMappingModelAutomatically_, 1);
    objc_msgSend(v29, sel_setShouldMigrateStoreAutomatically_, 1);
    objc_msgSend(v29, sel_setTimeout_, 10.0);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF99C0);
    uint64_t v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_1D7AA97B0;
    *(void *)(v30 + 32) = v29;
    aBlock[0] = v30;
    sub_1D7A9C338();
    sub_1D7A1DDAC();
    id v31 = v29;
    unint64_t v32 = (void *)sub_1D7A9C2F8();
    swift_bridgeObjectRelease();
    objc_msgSend(v4, sel_setPersistentStoreDescriptions_, v32);

    uint64_t v33 = swift_allocObject();
    *(void *)(v33 + 16) = 0;
    uint64_t v34 = swift_allocObject();
    *(void *)(v34 + 16) = v3;
    *(void *)(v34 + 24) = v33;
    aBlock[4] = (uint64_t)sub_1D7A1DE28;
    aBlock[5] = v34;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1D7A1D06C;
    aBlock[3] = (uint64_t)&block_descriptor_12;
    uint64_t v35 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    objc_msgSend(v4, sel_loadPersistentStoresWithCompletionHandler_, v35);
    _Block_release(v35);
    swift_beginAccess();
    uint64_t v2 = *(void **)(v33 + 16);
    if (!v2)
    {

      swift_release();
      return v4;
    }
    id v36 = v2;
    swift_willThrow();

    swift_release();
  }
  LOWORD(v45) = 0;
  id v37 = v2;
  unint64_t v38 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
  sub_1D7860544();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v2, 0, 0xE000000000000000, (__int16 *)&v45, 0, v38, 0xD000000000000059, 0x80000001D7AC9640, v39, 0xD000000000000015, 0x80000001D7AC9750, 144);
  swift_willThrow();

  return v4;
}

void *sub_1D7A1C340()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = (void *)sub_1D7A9B5F8();
  uint64_t v5 = *(v4 - 1);
  MEMORY[0x1F4188790](v4, v6, v7, v8, v9, v10, v11, v12);
  id v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v15 = __swift_project_value_buffer((uint64_t)v4, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, void *))(v5 + 16))(v14, v15, v4);
  swift_retain();
  uint64_t v16 = sub_1D7A9B5D8();
  os_log_type_t v17 = sub_1D7A9C748();
  if (os_log_type_enabled(v16, v17))
  {
    int v41 = v1;
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v40 = swift_slowAlloc();
    aBlock[0] = v40;
    *(_DWORD *)uint64_t v18 = 136446210;
    uint64_t v39 = v18 + 4;
    uint64_t v20 = *(void *)(v3 + OBJC_IVAR____TtC13CoreIDVShared18AsyncCoreDataStore_persistentStoreName);
    unint64_t v19 = *(void *)(v3 + OBJC_IVAR____TtC13CoreIDVShared18AsyncCoreDataStore_persistentStoreName + 8);
    swift_bridgeObjectRetain();
    uint64_t v43 = sub_1D7923300(v20, v19, aBlock);
    sub_1D7A9C9E8();
    swift_release();
    uint64_t v2 = v41;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1D7853000, v16, v17, "Initializing in-memory Core Data database %{public}s", v18, 0xCu);
    uint64_t v21 = v40;
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v21, -1, -1);
    MEMORY[0x1D947D740](v18, -1, -1);
  }
  else
  {

    swift_release();
  }
  (*(void (**)(char *, void *))(v5 + 8))(v14, v4);
  id v22 = sub_1D7A1B8A8();
  if (!v2)
  {
    unint64_t v23 = v22;
    id v24 = objc_allocWithZone(MEMORY[0x1E4F1C150]);
    swift_bridgeObjectRetain();
    id v25 = v23;
    uint64_t v26 = (void *)sub_1D7A9BF98();
    swift_bridgeObjectRelease();
    uint64_t v4 = objc_msgSend(v24, sel_initWithName_managedObjectModel_, v26, v25);

    id v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C190]), sel_init);
    objc_msgSend(v27, sel_setType_, *MEMORY[0x1E4F1BDE0]);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF99C0);
    uint64_t v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_1D7AA97B0;
    *(void *)(v28 + 32) = v27;
    aBlock[0] = v28;
    sub_1D7A9C338();
    sub_1D7A1DDAC();
    id v29 = v27;
    uint64_t v30 = (void *)sub_1D7A9C2F8();
    swift_bridgeObjectRelease();
    objc_msgSend(v4, sel_setPersistentStoreDescriptions_, v30);

    uint64_t v31 = swift_allocObject();
    *(void *)(v31 + 16) = 0;
    uint64_t v32 = swift_allocObject();
    *(void *)(v32 + 16) = v31;
    *(void *)(v32 + 24) = v3;
    aBlock[4] = (uint64_t)sub_1D7A1DE4C;
    aBlock[5] = v32;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1D7A1D06C;
    aBlock[3] = (uint64_t)&block_descriptor_17_0;
    uint64_t v33 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    objc_msgSend(v4, sel_loadPersistentStoresWithCompletionHandler_, v33);
    _Block_release(v33);
    swift_beginAccess();
    uint64_t v2 = *(void **)(v31 + 16);
    if (!v2)
    {

      swift_release();
      return v4;
    }
    id v34 = v2;
    swift_willThrow();

    swift_release();
  }
  LOWORD(v43) = 0;
  id v35 = v2;
  unint64_t v36 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
  sub_1D7860544();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v2, 0, 0xE000000000000000, (__int16 *)&v43, 0, v36, 0xD000000000000059, 0x80000001D7AC9640, v37, 0xD000000000000017, 0x80000001D7AC9840, 178);
  swift_willThrow();

  return v4;
}

void sub_1D7A1C8E8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v82 = a3;
  uint64_t v83 = a4;
  v86[3] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v5 = sub_1D7A9B5F8();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7, v8, v9, v10, v11, v12, v13);
  uint64_t v15 = (char *)&v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_1D7A9AD78();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16, v18, v19, v20, v21, v22, v23, v24);
  uint64_t v26 = (char *)&v75 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_1D7A9AF68();
  MEMORY[0x1F4188790](v27, v28, v29, v30, v31, v32, v33, v34);
  uint64_t v37 = (char *)&v75 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    LOWORD(v86[0]) = 160;
    id v38 = a2;
    unint64_t v39 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    uint64_t v40 = (void *)swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(a2, 0xD000000000000027, 0x80000001D7AC97E0, (__int16 *)v86, 0, v39, 0xD000000000000059, 0x80000001D7AC9640, v41, 0xD000000000000015, 0x80000001D7AC9750, 115);
    swift_willThrow();
LABEL_9:
    uint64_t v69 = (void **)(v83 + 16);
    LOWORD(v86[0]) = 0;
    id v70 = v40;
    unint64_t v71 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    uint64_t v72 = swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v40, 0, 0xE000000000000000, (__int16 *)v86, 0, v71, 0xD000000000000059, 0x80000001D7AC9640, v73, 0xD000000000000015, 0x80000001D7AC9750, 134);

    swift_beginAccess();
    uint64_t v74 = *v69;
    *uint64_t v69 = (void *)v72;

    return;
  }
  uint64_t v79 = v6;
  uint64_t v80 = v17;
  uint64_t v81 = v16;
  uint64_t v42 = v35;
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v37, v82 + OBJC_IVAR____TtC13CoreIDVShared18AsyncCoreDataStore_databaseURL, v27);
  sub_1D7A9AD68();
  sub_1D7A9AD58();
  sub_1D7A9AEF8();
  uint64_t v77 = v42;
  uint64_t v78 = v27;
  uint64_t v43 = (void *)sub_1D7A9AF08();
  uint64_t v44 = v82;
  sub_1D7A9BFC8();
  uint64_t v45 = (void *)sub_1D7A9BF98();
  swift_bridgeObjectRelease();
  uint64_t v46 = *MEMORY[0x1E4F1C590];
  v86[0] = 0;
  unsigned int v47 = objc_msgSend(v43, sel_setResourceValue_forKey_error_, v45, v46, v86);

  if (!v47)
  {
    id v63 = v86[0];
    v64 = (void *)sub_1D7A9AE58();

    swift_willThrow();
    uint64_t v66 = v77;
    uint64_t v65 = v78;
    LOWORD(v86[0]) = 160;
    unint64_t v67 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    uint64_t v40 = (void *)swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000029, 0x80000001D7AC97B0, (__int16 *)v86, 0, v67, 0xD000000000000059, 0x80000001D7AC9640, v68, 0xD000000000000015, 0x80000001D7AC9750, 128);
    swift_willThrow();

    (*(void (**)(char *, uint64_t))(v80 + 8))(v26, v81);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v37, v65);
    goto LABEL_9;
  }
  uint64_t v48 = qword_1EBDF9DC8;
  id v49 = v86[0];
  if (v48 != -1) {
    swift_once();
  }
  uint64_t v50 = v5;
  uint64_t v51 = __swift_project_value_buffer(v5, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  uint64_t v52 = v79;
  v53 = v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v79 + 16))(v15, v51, v50);
  uint64_t v54 = v44;
  swift_retain_n();
  int64_t v55 = sub_1D7A9B5D8();
  os_log_type_t v56 = sub_1D7A9C748();
  if (os_log_type_enabled(v55, v56))
  {
    uint64_t v57 = (uint8_t *)swift_slowAlloc();
    uint64_t v83 = swift_slowAlloc();
    uint64_t v85 = v83;
    *(_DWORD *)uint64_t v57 = 136446210;
    size_t v75 = v57 + 4;
    v76 = v57;
    uint64_t v59 = *(void *)(v54 + OBJC_IVAR____TtC13CoreIDVShared18AsyncCoreDataStore_persistentStoreName);
    unint64_t v58 = *(void *)(v54 + OBJC_IVAR____TtC13CoreIDVShared18AsyncCoreDataStore_persistentStoreName + 8);
    swift_bridgeObjectRetain();
    uint64_t v84 = sub_1D7923300(v59, v58, &v85);
    sub_1D7A9C9E8();
    swift_release_n();
    swift_bridgeObjectRelease();
    os_log_type_t v60 = v56;
    int v61 = v76;
    _os_log_impl(&dword_1D7853000, v55, v60, "Done initializing %{public}s database", v76, 0xCu);
    uint64_t v62 = v83;
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v62, -1, -1);
    MEMORY[0x1D947D740](v61, -1, -1);

    (*(void (**)(char *, uint64_t))(v79 + 8))(v53, v50);
  }
  else
  {
    swift_release_n();

    (*(void (**)(char *, uint64_t))(v52 + 8))(v53, v50);
  }
  (*(void (**)(char *, uint64_t))(v80 + 8))(v26, v81);
  (*(void (**)(char *, uint64_t))(v77 + 8))(v37, v78);
}

void sub_1D7A1D06C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void (**)(id, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(v7, a3);
  swift_release();
}

void sub_1D7A1D0F8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_1D7A9B5F8();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7, v9, v10, v11, v12, v13, v14, v15);
  uint64_t v17 = (char *)v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v34[0] = 160;
    id v18 = a2;
    unint64_t v19 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    uint64_t v20 = swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(a2, 0xD000000000000031, 0x80000001D7AC9860, v34, 0, v19, 0xD000000000000059, 0x80000001D7AC9640, v21, 0xD000000000000017, 0x80000001D7AC9840, 164);
    swift_beginAccess();
    uint64_t v22 = *(void **)(a3 + 16);
    *(void *)(a3 + 16) = v20;
  }
  else
  {
    if (qword_1EBDF9DC8 != -1) {
      swift_once();
    }
    uint64_t v23 = __swift_project_value_buffer(v7, (uint64_t)qword_1EBDFBE70);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v17, v23, v7);
    swift_retain();
    uint64_t v24 = sub_1D7A9B5D8();
    os_log_type_t v25 = sub_1D7A9C748();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      uint64_t v33 = v31;
      *(_DWORD *)uint64_t v26 = 136446210;
      v30[1] = v26 + 4;
      uint64_t v28 = *(void *)(a4 + OBJC_IVAR____TtC13CoreIDVShared18AsyncCoreDataStore_persistentStoreName);
      unint64_t v27 = *(void *)(a4 + OBJC_IVAR____TtC13CoreIDVShared18AsyncCoreDataStore_persistentStoreName + 8);
      swift_bridgeObjectRetain();
      uint64_t v32 = sub_1D7923300(v28, v27, &v33);
      sub_1D7A9C9E8();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1D7853000, v24, v25, "Done initializing %{public}s database", v26, 0xCu);
      uint64_t v29 = v31;
      swift_arrayDestroy();
      MEMORY[0x1D947D740](v29, -1, -1);
      MEMORY[0x1D947D740](v26, -1, -1);
    }
    else
    {

      swift_release();
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v17, v7);
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> AsyncCoreDataStore.destroyPersistentStore()()
{
  v42[3] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v4, v5, v6, v7, v8, v9, v10);
  uint64_t v12 = (char *)v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC13CoreIDVShared18AsyncCoreDataStore__container);
  uint64_t v14 = (void **)&v13[4];
  uint64_t v15 = v13 + 6;
  os_unfair_lock_lock(v13 + 6);
  sub_1D7A1B88C(v14, v42);
  if (v1)
  {
    os_unfair_lock_unlock(v15);
    uint64_t v16 = v1;
  }
  else
  {
    os_unfair_lock_unlock(v15);
    id v38 = v42[0];
    id v39 = objc_msgSend(v42[0], sel_persistentStoreCoordinator);
    if (qword_1EBDF9DC8 != -1) {
      swift_once();
    }
    uint64_t v17 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE70);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v12, v17, v2);
    swift_retain_n();
    id v18 = sub_1D7A9B5D8();
    os_log_type_t v19 = sub_1D7A9C738();
    int v37 = v19;
    if (os_log_type_enabled(v18, v19))
    {
      os_log_t v36 = v18;
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v35 = (void *)swift_slowAlloc();
      id v41 = v35;
      *(_DWORD *)uint64_t v20 = 136446210;
      v33[1] = v20 + 4;
      uint64_t v34 = v20;
      sub_1D7A9AF68();
      sub_1D7A1DAB8();
      uint64_t v21 = sub_1D7A9D258();
      uint64_t v40 = sub_1D7923300(v21, v22, (uint64_t *)&v41);
      sub_1D7A9C9E8();
      swift_release_n();
      swift_bridgeObjectRelease();
      os_log_t v23 = v36;
      uint64_t v24 = v34;
      _os_log_impl(&dword_1D7853000, v36, (os_log_type_t)v37, "Deleting Core Data database at %{public}s", v34, 0xCu);
      os_log_type_t v25 = v35;
      swift_arrayDestroy();
      MEMORY[0x1D947D740](v25, -1, -1);
      MEMORY[0x1D947D740](v24, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);
    uint64_t v26 = (void *)sub_1D7A9AF08();
    uint64_t v27 = *MEMORY[0x1E4F1BF70];
    id v41 = 0;
    unsigned __int8 v28 = objc_msgSend(v39, sel_destroyPersistentStoreAtURL_withType_options_error_, v26, v27, 0, &v41);

    if (v28)
    {
      id v29 = v41;

      return;
    }
    id v30 = v41;
    uint64_t v16 = (void *)sub_1D7A9AE58();

    swift_willThrow();
  }
  LOWORD(v41) = 160;
  unint64_t v31 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
  sub_1D7860544();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000001FLL, 0x80000001D7AC9620, (__int16 *)&v41, 0, v31, 0xD000000000000059, 0x80000001D7AC9640, v32, 0xD000000000000018, 0x80000001D7AC96A0, 196);
  swift_willThrow();
}

uint64_t AsyncCoreDataStore.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13CoreIDVShared18AsyncCoreDataStore_modelURL;
  uint64_t v2 = sub_1D7A9AF68();
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  v3(v1, v2);
  v3(v0 + OBJC_IVAR____TtC13CoreIDVShared18AsyncCoreDataStore_databaseURL, v2);
  swift_bridgeObjectRelease();

  swift_release();
  return v0;
}

uint64_t AsyncCoreDataStore.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13CoreIDVShared18AsyncCoreDataStore_modelURL;
  uint64_t v2 = sub_1D7A9AF68();
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  v3(v1, v2);
  v3(v0 + OBJC_IVAR____TtC13CoreIDVShared18AsyncCoreDataStore_databaseURL, v2);
  swift_bridgeObjectRelease();

  swift_release();
  return swift_deallocClassInstance();
}

unint64_t sub_1D7A1DAB8()
{
  unint64_t result = qword_1EBDF7D08;
  if (!qword_1EBDF7D08)
  {
    sub_1D7A9AF68();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBDF7D08);
  }
  return result;
}

unint64_t sub_1D7A1DB14()
{
  unint64_t result = qword_1EA847000;
  if (!qword_1EA847000)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847000);
  }
  return result;
}

uint64_t sub_1D7A1DB68()
{
  return type metadata accessor for AsyncCoreDataStore();
}

uint64_t type metadata accessor for AsyncCoreDataStore()
{
  uint64_t result = qword_1EBDF9948;
  if (!qword_1EBDF9948) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1D7A1DBBC()
{
  uint64_t result = sub_1D7A9AF68();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for AsyncCoreDataStore(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AsyncCoreDataStore);
}

uint64_t dispatch thunk of AsyncCoreDataStore.__allocating_init(persistentStoreName:modelURL:databaseURL:storeType:urlFileProtection:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

unsigned char *storeEnumTagSinglePayload for AsyncCoreDataStore.StoreType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D7A1DD74);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AsyncCoreDataStore.StoreType()
{
  return &type metadata for AsyncCoreDataStore.StoreType;
}

unint64_t sub_1D7A1DDAC()
{
  unint64_t result = qword_1EBDF9818[0];
  if (!qword_1EBDF9818[0])
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, qword_1EBDF9818);
  }
  return result;
}

uint64_t sub_1D7A1DDEC()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

void sub_1D7A1DE28(uint64_t a1, void *a2)
{
  sub_1D7A1C8E8(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t block_copy_helper_12(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_12()
{
  return swift_release();
}

void sub_1D7A1DE4C(uint64_t a1, void *a2)
{
  sub_1D7A1D0F8(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

CoreIDVShared::Milestone __swiftcall Milestone.init(tag:description:)(Swift::String tag, Swift::String description)
{
  *uint64_t v2 = tag;
  v2[1] = description;
  result.description = description;
  result.tag = tag;
  return result;
}

Swift::Void __swiftcall Milestone.log()()
{
  logMilestone(tag:description:)(*v0, v0[1]);
}

ValueMetadata *type metadata accessor for Milestone()
{
  return &type metadata for Milestone;
}

uint64_t sub_1D7A1DE84()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D7A1DF7C()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D7A1E068()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D7A1E140()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D7A1E244()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D7A1E348()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D7A1E3D0()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D7A1E480()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D7A1E5B8()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D7A1E63C()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D7A1E72C()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D7A1E830()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D7A1E8E0()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D7A1E9F4()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D7A1EA78()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D7A1EB5C()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D7A1EC08()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D7A1ED64()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D7A1EE90()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D7A1EF14()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D7A1F014()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D7A1F114()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D7A1F1E8()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D7A1F2D0()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D7A1F3C4()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D7A1F444()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D7A1F554()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D7A1F660()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D7A1F6E0()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D7A1F7CC()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D7A1F8AC()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D7A1F9E0()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D7A1FA34()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D7A1FB34()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D7A1FBE0()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D7A1FD18()
{
  return sub_1D7A9D628();
}

uint64_t ISO18013IssuerSignedItem.init(digestID:random:elementIdentifier:elementValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  *a7 = a1;
  a7[1] = a2;
  a7[2] = a3;
  a7[3] = a4;
  a7[4] = a5;
  uint64_t v8 = (uint64_t)a7 + *(int *)(type metadata accessor for ISO18013IssuerSignedItem() + 28);
  return sub_1D7969D70(a6, v8);
}

uint64_t type metadata accessor for ISO18013IssuerSignedItem()
{
  uint64_t result = qword_1EA847038;
  if (!qword_1EA847038) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t ISO18013IssuerSignedItem.digestID.getter()
{
  return *(void *)v0;
}

uint64_t ISO18013IssuerSignedItem.random.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  sub_1D7860790(v1, *(void *)(v0 + 16));
  return v1;
}

uint64_t ISO18013IssuerSignedItem.elementIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ISO18013IssuerSignedItem.elementValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for ISO18013IssuerSignedItem();
  return sub_1D7A209B8(v1 + *(int *)(v3 + 28), a1, (uint64_t (*)(void))type metadata accessor for AnyCodable);
}

uint64_t sub_1D7A1FF94(unsigned __int8 *a1, char *a2)
{
  return sub_1D7995D00(*a1, *a2);
}

uint64_t sub_1D7A1FFA0()
{
  return sub_1D7A1EA78();
}

uint64_t sub_1D7A1FFA8()
{
  sub_1D7A9C0B8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D7A20074()
{
  return sub_1D7A1F7CC();
}

uint64_t sub_1D7A2007C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1D7989550();
  *a1 = result;
  return result;
}

void sub_1D7A200B4(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xE800000000000000;
  uint64_t v3 = 0x4449747365676964;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE600000000000000;
      uint64_t v3 = 0x6D6F646E6172;
      goto LABEL_3;
    case 2:
      *(void *)a1 = 0xD000000000000011;
      *(void *)(a1 + 8) = 0x80000001D7ABCB30;
      break;
    case 3:
      strcpy((char *)a1, "elementValue");
      *(unsigned char *)(a1 + 13) = 0;
      *(_WORD *)(a1 + 14) = -5120;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

unint64_t sub_1D7A20158()
{
  unint64_t result = 0x4449747365676964;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x6D6F646E6172;
      break;
    case 2:
      unint64_t result = 0xD000000000000011;
      break;
    case 3:
      unint64_t result = 0x56746E656D656C65;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1D7A201F0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1D7989550();
  *a1 = result;
  return result;
}

uint64_t sub_1D7A20220(uint64_t a1)
{
  unint64_t v2 = sub_1D7A20A7C();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1D7A2025C(uint64_t a1)
{
  unint64_t v2 = sub_1D7A20A7C();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1D7A20298@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1D7989550();
  *a1 = result;
  return result;
}

uint64_t sub_1D7A202D0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1D7989550();
  *a1 = result;
  return result;
}

uint64_t sub_1D7A20300(uint64_t a1)
{
  unint64_t v2 = sub_1D7A20964();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1D7A2033C(uint64_t a1)
{
  unint64_t v2 = sub_1D7A20964();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t ISO18013IssuerSignedItem.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v65 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847008);
  uint64_t v69 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v4, v5, v6, v7, v8, v9, v10);
  unint64_t v71 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = type metadata accessor for AnyCodable();
  uint64_t v19 = MEMORY[0x1F4188790](v66, v12, v13, v14, v15, v16, v17, v18);
  uint64_t v21 = (char *)&v64 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19, v22, v23, v24, v25, v26, v27, v28);
  id v30 = (char *)&v64 - v29;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847010);
  uint64_t v68 = *(void *)(v31 - 8);
  MEMORY[0x1F4188790](v31, v32, v33, v34, v35, v36, v37, v38);
  id v70 = (char *)&v64 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = type metadata accessor for ISO18013IssuerSignedItem();
  MEMORY[0x1F4188790](v64, v40, v41, v42, v43, v44, v45, v46);
  unint64_t v67 = (uint64_t *)((char *)&v64 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v48 = a1[3];
  uint64_t v49 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v48);
  Decoder.codingKeyFormat.getter(v48, v49, &v76);
  char v50 = v76;
  uint64_t v51 = a1[3];
  uint64_t v72 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v51);
  if ((v50 & 1) == 0)
  {
    unint64_t v71 = v30;
    uint64_t v57 = v68;
    sub_1D7A20A7C();
    unint64_t v58 = v70;
    uint64_t v59 = v73;
    sub_1D7A9D6A8();
    if (!v59)
    {
      LOBYTE(v74) = 0;
      uint64_t v60 = sub_1D7A9D138();
      uint64_t v56 = (uint64_t)v67;
      *unint64_t v67 = v60;
      char v75 = 1;
      sub_1D786073C();
      sub_1D7A9D148();
      *(_OWORD *)(v56 + 8) = v74;
      LOBYTE(v74) = 2;
      *(void *)(v56 + 24) = sub_1D7A9D0F8();
      *(void *)(v56 + 32) = v63;
      LOBYTE(v74) = 3;
      sub_1D7A20EB8(&qword_1EA843D60);
      uint64_t v21 = v71;
      sub_1D7A9D148();
      (*(void (**)(char *, uint64_t))(v57 + 8))(v58, v31);
      goto LABEL_7;
    }
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v72);
  }
  uint64_t v52 = v69;
  sub_1D7A20964();
  v53 = v71;
  uint64_t v54 = v73;
  sub_1D7A9D6A8();
  if (v54) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v72);
  }
  LOBYTE(v74) = 0;
  uint64_t v55 = sub_1D7A9D138();
  uint64_t v56 = (uint64_t)v67;
  *unint64_t v67 = v55;
  char v75 = 1;
  sub_1D786073C();
  sub_1D7A9D148();
  *(_OWORD *)(v56 + 8) = v74;
  LOBYTE(v74) = 2;
  *(void *)(v56 + 24) = sub_1D7A9D0F8();
  *(void *)(v56 + 32) = v62;
  LOBYTE(v74) = 3;
  sub_1D7A20EB8(&qword_1EA843D60);
  sub_1D7A9D148();
  (*(void (**)(char *, uint64_t))(v52 + 8))(v53, v3);
LABEL_7:
  sub_1D7969D70((uint64_t)v21, v56 + *(int *)(v64 + 28));
  sub_1D7A209B8(v56, v65, (uint64_t (*)(void))type metadata accessor for ISO18013IssuerSignedItem);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v72);
  return sub_1D7A20A20(v56);
}

unint64_t sub_1D7A20964()
{
  unint64_t result = qword_1EA847018;
  if (!qword_1EA847018)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847018);
  }
  return result;
}

uint64_t sub_1D7A209B8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1D7A20A20(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ISO18013IssuerSignedItem();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1D7A20A7C()
{
  unint64_t result = qword_1EA847020;
  if (!qword_1EA847020)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847020);
  }
  return result;
}

uint64_t ISO18013IssuerSignedItem.encode(to:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847028);
  uint64_t v32 = *(void *)(v4 - 8);
  uint64_t v33 = v4;
  MEMORY[0x1F4188790](v4, v5, v6, v7, v8, v9, v10, v11);
  uint64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847030);
  uint64_t v31 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14, v15, v16, v17, v18, v19, v20, v21);
  uint64_t v23 = (char *)&v31 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = a1[3];
  uint64_t v25 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v24);
  Encoder.codingKeyFormat.getter(v24, v25, &v37);
  char v26 = v37;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  if (v26)
  {
    sub_1D7A20964();
    sub_1D7A9D6E8();
    LOBYTE(v35) = 0;
    uint64_t v28 = v33;
    uint64_t v27 = v34;
    sub_1D7A9D218();
    if (!v27)
    {
      long long v35 = *(_OWORD *)(v2 + 8);
      char v36 = 1;
      sub_1D7871AD8();
      sub_1D7A9D228();
      LOBYTE(v35) = 2;
      sub_1D7A9D1D8();
      type metadata accessor for ISO18013IssuerSignedItem();
      LOBYTE(v35) = 3;
      type metadata accessor for AnyCodable();
      sub_1D7A20EB8(&qword_1EA843D90);
      sub_1D7A9D228();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v13, v28);
  }
  else
  {
    sub_1D7A20A7C();
    sub_1D7A9D6E8();
    LOBYTE(v35) = 0;
    uint64_t v30 = v34;
    sub_1D7A9D218();
    if (!v30)
    {
      long long v35 = *(_OWORD *)(v2 + 8);
      char v36 = 1;
      sub_1D7871AD8();
      sub_1D7A9D228();
      LOBYTE(v35) = 2;
      sub_1D7A9D1D8();
      type metadata accessor for ISO18013IssuerSignedItem();
      LOBYTE(v35) = 3;
      type metadata accessor for AnyCodable();
      sub_1D7A20EB8(&qword_1EA843D90);
      sub_1D7A9D228();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v23, v14);
  }
}

uint64_t sub_1D7A20EB8(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for AnyCodable();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D7A20EFC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ISO18013IssuerSignedItem.init(from:)(a1, a2);
}

uint64_t sub_1D7A20F14(void *a1)
{
  return ISO18013IssuerSignedItem.encode(to:)(a1);
}

void *initializeBufferWithCopyOfBuffer for ISO18013IssuerSignedItem(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    unint64_t v8 = a2[2];
    sub_1D7860790(v7, v8);
    v4[1] = v7;
    v4[2] = v8;
    uint64_t v9 = a2[4];
    v4[3] = a2[3];
    v4[4] = v9;
    uint64_t v10 = *(int *)(a3 + 28);
    uint64_t v11 = (char *)v4 + v10;
    uint64_t v12 = (char *)a2 + v10;
    *uint64_t v11 = *((unsigned char *)a2 + v10);
    v11[16] = *((unsigned char *)a2 + v10 + 16);
    *((void *)v11 + 1) = *(void *)((char *)a2 + v10 + 8);
    v11[32] = *((unsigned char *)a2 + v10 + 32);
    *((void *)v11 + 3) = *(void *)((char *)a2 + v10 + 24);
    v11[40] = *((unsigned char *)a2 + v10 + 40);
    *((_DWORD *)v11 + 9) = *(_DWORD *)((char *)a2 + v10 + 36);
    *((void *)v11 + 6) = *(void *)((char *)a2 + v10 + 48);
    v11[56] = *((unsigned char *)a2 + v10 + 56);
    uint64_t v13 = (int *)type metadata accessor for AnyCodable();
    uint64_t v14 = v13[9];
    __dst = &v11[v14];
    uint64_t v15 = &v12[v14];
    uint64_t v16 = sub_1D7A9B148();
    uint64_t v17 = *(void *)(v16 - 8);
    uint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
    swift_bridgeObjectRetain();
    if (v18(v15, 1, v16))
    {
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9118);
      memcpy(__dst, v15, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(__dst, v15, v16);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
    }
    uint64_t v21 = v13[10];
    uint64_t v22 = &v11[v21];
    uint64_t v23 = &v12[v21];
    uint64_t v24 = *((void *)v23 + 1);
    *(void *)uint64_t v22 = *(void *)v23;
    *((void *)v22 + 1) = v24;
    *(void *)&v11[v13[11]] = *(void *)&v12[v13[11]];
    *(void *)&v11[v13[12]] = *(void *)&v12[v13[12]];
    *(void *)&v11[v13[13]] = *(void *)&v12[v13[13]];
    uint64_t v25 = v13[14];
    char v26 = &v11[v25];
    uint64_t v27 = (uint64_t *)&v12[v25];
    unint64_t v28 = *(void *)&v12[v25 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v28 >> 60 == 15)
    {
      *(_OWORD *)char v26 = *(_OWORD *)v27;
    }
    else
    {
      uint64_t v29 = *v27;
      sub_1D7860790(*v27, v28);
      *(void *)char v26 = v29;
      *((void *)v26 + 1) = v28;
    }
  }
  return v4;
}

uint64_t destroy for ISO18013IssuerSignedItem(uint64_t a1, uint64_t a2)
{
  sub_1D78607E8(*(void *)(a1 + 8), *(void *)(a1 + 16));
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for AnyCodable();
  uint64_t v6 = v4 + *(int *)(v5 + 36);
  uint64_t v7 = sub_1D7A9B148();
  uint64_t v8 = *(void *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v10 = (uint64_t *)(v4 + *(int *)(v5 + 56));
  unint64_t v11 = v10[1];
  if (v11 >> 60 != 15)
  {
    uint64_t v12 = *v10;
    return sub_1D78607E8(v12, v11);
  }
  return result;
}

void *initializeWithCopy for ISO18013IssuerSignedItem(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  unint64_t v7 = a2[2];
  sub_1D7860790(v6, v7);
  a1[1] = v6;
  a1[2] = v7;
  uint64_t v8 = a2[4];
  a1[3] = a2[3];
  a1[4] = v8;
  uint64_t v9 = *(int *)(a3 + 28);
  uint64_t v10 = (char *)a1 + v9;
  unint64_t v11 = (char *)a2 + v9;
  char *v10 = *((unsigned char *)a2 + v9);
  v10[16] = *((unsigned char *)a2 + v9 + 16);
  *((void *)v10 + 1) = *(void *)((char *)a2 + v9 + 8);
  v10[32] = *((unsigned char *)a2 + v9 + 32);
  *((void *)v10 + 3) = *(void *)((char *)a2 + v9 + 24);
  v10[40] = *((unsigned char *)a2 + v9 + 40);
  *((_DWORD *)v10 + 9) = *(_DWORD *)((char *)a2 + v9 + 36);
  *((void *)v10 + 6) = *(void *)((char *)a2 + v9 + 48);
  v10[56] = *((unsigned char *)a2 + v9 + 56);
  uint64_t v12 = (int *)type metadata accessor for AnyCodable();
  uint64_t v13 = v12[9];
  __dst = &v10[v13];
  uint64_t v14 = &v11[v13];
  uint64_t v15 = sub_1D7A9B148();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  swift_bridgeObjectRetain();
  if (v17(v14, 1, v15))
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9118);
    memcpy(__dst, v14, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(__dst, v14, v15);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
  }
  uint64_t v19 = v12[10];
  uint64_t v20 = &v10[v19];
  uint64_t v21 = &v11[v19];
  uint64_t v22 = *((void *)v21 + 1);
  *(void *)uint64_t v20 = *(void *)v21;
  *((void *)v20 + 1) = v22;
  *(void *)&v10[v12[11]] = *(void *)&v11[v12[11]];
  *(void *)&v10[v12[12]] = *(void *)&v11[v12[12]];
  *(void *)&v10[v12[13]] = *(void *)&v11[v12[13]];
  uint64_t v23 = v12[14];
  uint64_t v24 = &v10[v23];
  uint64_t v25 = (uint64_t *)&v11[v23];
  unint64_t v26 = *(void *)&v11[v23 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v26 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
  }
  else
  {
    uint64_t v27 = *v25;
    sub_1D7860790(*v25, v26);
    *(void *)uint64_t v24 = v27;
    *((void *)v24 + 1) = v26;
  }
  return a1;
}

void *assignWithCopy for ISO18013IssuerSignedItem(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  unint64_t v7 = a2[2];
  sub_1D7860790(v6, v7);
  uint64_t v8 = a1[1];
  unint64_t v9 = a1[2];
  a1[1] = v6;
  a1[2] = v7;
  sub_1D78607E8(v8, v9);
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(int *)(a3 + 28);
  unint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  *unint64_t v11 = *((unsigned char *)a2 + v10);
  uint64_t v13 = *(void *)((char *)a2 + v10 + 8);
  v11[16] = v12[16];
  *((void *)v11 + 1) = v13;
  uint64_t v14 = *((void *)v12 + 3);
  v11[32] = v12[32];
  *((void *)v11 + 3) = v14;
  LODWORD(v14) = *((_DWORD *)v12 + 9);
  v11[40] = v12[40];
  *((_DWORD *)v11 + 9) = v14;
  uint64_t v15 = *((void *)v12 + 6);
  v11[56] = v12[56];
  *((void *)v11 + 6) = v15;
  uint64_t v16 = (int *)type metadata accessor for AnyCodable();
  uint64_t v17 = v16[9];
  uint64_t v18 = &v11[v17];
  uint64_t v19 = &v12[v17];
  uint64_t v20 = sub_1D7A9B148();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
  uint64_t v38 = v18;
  LODWORD(v18) = v22(v18, 1, v20);
  int v23 = v22(v19, 1, v20);
  if (v18)
  {
    if (v23)
    {
      size_t v24 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9118) - 8) + 64);
      uint64_t v25 = v38;
LABEL_6:
      memcpy(v25, v19, v24);
      goto LABEL_9;
    }
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v38, v19, v20);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v38, 0, 1, v20);
  }
  else
  {
    if (v23)
    {
      (*(void (**)(char *, uint64_t))(v21 + 8))(v38, v20);
      size_t v24 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9118) - 8) + 64);
      uint64_t v25 = v38;
      goto LABEL_6;
    }
    (*(void (**)(char *, char *, uint64_t))(v21 + 24))(v38, v19, v20);
  }
LABEL_9:
  uint64_t v26 = v16[10];
  uint64_t v27 = &v11[v26];
  unint64_t v28 = &v12[v26];
  *(void *)uint64_t v27 = *(void *)v28;
  *((void *)v27 + 1) = *((void *)v28 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v11[v16[11]] = *(void *)&v12[v16[11]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v11[v16[12]] = *(void *)&v12[v16[12]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v11[v16[13]] = *(void *)&v12[v16[13]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v29 = v16[14];
  uint64_t v30 = (uint64_t *)&v11[v29];
  uint64_t v31 = (uint64_t *)&v12[v29];
  unint64_t v32 = *(void *)&v12[v29 + 8];
  if (*(void *)&v11[v29 + 8] >> 60 != 15)
  {
    if (v32 >> 60 != 15)
    {
      uint64_t v34 = *v31;
      sub_1D7860790(v34, v32);
      uint64_t v35 = *v30;
      unint64_t v36 = v30[1];
      *uint64_t v30 = v34;
      v30[1] = v32;
      sub_1D78607E8(v35, v36);
      return a1;
    }
    sub_1D7870C24((uint64_t)v30);
    goto LABEL_14;
  }
  if (v32 >> 60 == 15)
  {
LABEL_14:
    *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
    return a1;
  }
  uint64_t v33 = *v31;
  sub_1D7860790(v33, v32);
  *uint64_t v30 = v33;
  v30[1] = v32;
  return a1;
}

uint64_t initializeWithTake for ISO18013IssuerSignedItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  *(unsigned char *)uint64_t v5 = *(unsigned char *)(a2 + v4);
  *(void *)(v5 + 8) = *(void *)(a2 + v4 + 8);
  *(unsigned char *)(v5 + 16) = *(unsigned char *)(a2 + v4 + 16);
  *(void *)(v5 + 24) = *(void *)(a2 + v4 + 24);
  *(unsigned char *)(v5 + 32) = *(unsigned char *)(a2 + v4 + 32);
  LODWORD(v4) = *(_DWORD *)(a2 + v4 + 36);
  *(unsigned char *)(v5 + 40) = *(unsigned char *)(v6 + 40);
  *(_DWORD *)(v5 + 36) = v4;
  uint64_t v7 = *(void *)(v6 + 48);
  *(unsigned char *)(v5 + 56) = *(unsigned char *)(v6 + 56);
  *(void *)(v5 + 48) = v7;
  uint64_t v8 = (int *)type metadata accessor for AnyCodable();
  uint64_t v9 = v8[9];
  uint64_t v10 = (void *)(v5 + v9);
  unint64_t v11 = (const void *)(v6 + v9);
  uint64_t v12 = sub_1D7A9B148();
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9118);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  *(_OWORD *)(v5 + v8[10]) = *(_OWORD *)(v6 + v8[10]);
  *(void *)(v5 + v8[11]) = *(void *)(v6 + v8[11]);
  *(void *)(v5 + v8[12]) = *(void *)(v6 + v8[12]);
  *(void *)(v5 + v8[13]) = *(void *)(v6 + v8[13]);
  *(_OWORD *)(v5 + v8[14]) = *(_OWORD *)(v6 + v8[14]);
  return a1;
}

uint64_t assignWithTake for ISO18013IssuerSignedItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a1 + 8);
  unint64_t v8 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v6;
  sub_1D78607E8(v7, v8);
  uint64_t v9 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  *(unsigned char *)uint64_t v11 = *(unsigned char *)(a2 + v10);
  *(void *)(v11 + 8) = *(void *)(a2 + v10 + 8);
  *(unsigned char *)(v11 + 16) = *(unsigned char *)(a2 + v10 + 16);
  *(void *)(v11 + 24) = *(void *)(a2 + v10 + 24);
  *(unsigned char *)(v11 + 32) = *(unsigned char *)(a2 + v10 + 32);
  *(_DWORD *)(v11 + 36) = *(_DWORD *)(a2 + v10 + 36);
  *(unsigned char *)(v11 + 40) = *(unsigned char *)(a2 + v10 + 40);
  *(unsigned char *)(v11 + 56) = *(unsigned char *)(a2 + v10 + 56);
  *(void *)(v11 + 48) = *(void *)(a2 + v10 + 48);
  uint64_t v13 = (int *)type metadata accessor for AnyCodable();
  uint64_t v14 = v13[9];
  uint64_t v15 = (void *)(v11 + v14);
  uint64_t v16 = (void *)(v12 + v14);
  uint64_t v17 = sub_1D7A9B148();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v18 + 48);
  uint64_t v35 = v15;
  LODWORD(v15) = v19(v15, 1, v17);
  int v20 = v19(v16, 1, v17);
  if (v15)
  {
    if (v20)
    {
      size_t v21 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9118) - 8) + 64);
      uint64_t v22 = v35;
LABEL_6:
      memcpy(v22, v16, v21);
      goto LABEL_9;
    }
    (*(void (**)(void *, void *, uint64_t))(v18 + 32))(v35, v16, v17);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v35, 0, 1, v17);
  }
  else
  {
    if (v20)
    {
      (*(void (**)(void *, uint64_t))(v18 + 8))(v35, v17);
      size_t v21 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9118) - 8) + 64);
      uint64_t v22 = v35;
      goto LABEL_6;
    }
    (*(void (**)(void *, void *, uint64_t))(v18 + 40))(v35, v16, v17);
  }
LABEL_9:
  uint64_t v23 = v13[10];
  size_t v24 = (void *)(v11 + v23);
  uint64_t v25 = (uint64_t *)(v12 + v23);
  uint64_t v27 = *v25;
  uint64_t v26 = v25[1];
  *size_t v24 = v27;
  v24[1] = v26;
  swift_bridgeObjectRelease();
  *(void *)(v11 + v13[11]) = *(void *)(v12 + v13[11]);
  swift_bridgeObjectRelease();
  *(void *)(v11 + v13[12]) = *(void *)(v12 + v13[12]);
  swift_bridgeObjectRelease();
  *(void *)(v11 + v13[13]) = *(void *)(v12 + v13[13]);
  swift_bridgeObjectRelease();
  uint64_t v28 = v13[14];
  uint64_t v29 = (uint64_t *)(v11 + v28);
  uint64_t v30 = (uint64_t *)(v12 + v28);
  unint64_t v31 = *(void *)(v11 + v28 + 8);
  if (v31 >> 60 != 15)
  {
    unint64_t v32 = v30[1];
    if (v32 >> 60 != 15)
    {
      uint64_t v33 = *v29;
      *uint64_t v29 = *v30;
      v29[1] = v32;
      sub_1D78607E8(v33, v31);
      return a1;
    }
    sub_1D7870C24((uint64_t)v29);
  }
  *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
  return a1;
}

uint64_t getEnumTagSinglePayload for ISO18013IssuerSignedItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1D7A21D8C);
}

uint64_t sub_1D7A21D8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for AnyCodable();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ISO18013IssuerSignedItem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1D7A21E50);
}

uint64_t sub_1D7A21E50(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 32) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for AnyCodable();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1D7A21EF8()
{
  uint64_t result = type metadata accessor for AnyCodable();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ISO18013IssuerSignedItem.CodingKeys()
{
  return &type metadata for ISO18013IssuerSignedItem.CodingKeys;
}

unsigned char *_s13CoreIDVShared24ISO18013IssuerSignedItemV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D7A22088);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ISO18013IssuerSignedItem.ACWGCodingKeys()
{
  return &type metadata for ISO18013IssuerSignedItem.ACWGCodingKeys;
}

unint64_t sub_1D7A220C4()
{
  unint64_t result = qword_1EA847048;
  if (!qword_1EA847048)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847048);
  }
  return result;
}

unint64_t sub_1D7A2211C()
{
  unint64_t result = qword_1EA847050;
  if (!qword_1EA847050)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847050);
  }
  return result;
}

unint64_t sub_1D7A22174()
{
  unint64_t result = qword_1EA847058;
  if (!qword_1EA847058)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847058);
  }
  return result;
}

unint64_t sub_1D7A221CC()
{
  unint64_t result = qword_1EA847060;
  if (!qword_1EA847060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847060);
  }
  return result;
}

unint64_t sub_1D7A22224()
{
  unint64_t result = qword_1EA847068;
  if (!qword_1EA847068)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847068);
  }
  return result;
}

unint64_t sub_1D7A2227C()
{
  unint64_t result = qword_1EA847070;
  if (!qword_1EA847070)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847070);
  }
  return result;
}

uint64_t sub_1D7A222D0()
{
  unint64_t v0 = sub_1D7A9D058();
  swift_bridgeObjectRelease();
  if (v0 >= 4) {
    return 4;
  }
  else {
    return v0;
  }
}

uint64_t sub_1D7A22320(char a1)
{
  uint64_t result = 0x726564616568;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x65746365746F7270;
      break;
    case 2:
      uint64_t result = 0x64616F6C796170;
      break;
    case 3:
      uint64_t result = 0x727574616E676973;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1D7A223BC(char a1)
{
  uint64_t result = 0x726564616568;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x65746365746F7270;
      break;
    case 2:
      uint64_t result = 0x64616F6C796170;
      break;
    case 3:
      uint64_t result = 0x727574616E676973;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1D7A22458(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB1C8];
  return MEMORY[0x1F4185BB0](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_1D7A224CC(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4183DE0](a1, a2, WitnessTable, v5);
}

uint64_t sub_1D7A22538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4183DF0](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_1D7A225A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4183DE8](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_1D7A22618@<X0>(void *a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  return sub_1D7A2446C(a1, a2, (uint64_t (*)(void, void, void, void, void))sub_1D7A222D0, a3);
}

uint64_t sub_1D7A22630@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1D7A234A0(a1, (uint64_t (*)(void, void, void, void))sub_1D7A22320, a2);
}

uint64_t sub_1D7A22648()
{
  return sub_1D7A223BC(*v0);
}

uint64_t sub_1D7A22658@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, unsigned char *a4@<X8>)
{
  uint64_t result = sub_1D7A2231C(a1, a2, a3[2], a3[3], a3[4]);
  *a4 = result;
  return result;
}

uint64_t sub_1D7A2268C(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t sub_1D7A226E0(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t JWSSignedJSON.JWSType.init(rawValue:)@<X0>(BOOL *a1@<X8>)
{
  return sub_1D7A22A2C(a1);
}

uint64_t JWSSignedJSON.JWSType.rawValue.getter()
{
  return 0x4F534A2B45534F4ALL;
}

uint64_t sub_1D7A2275C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB1C8];
  return MEMORY[0x1F4185BB0](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_1D7A227D0(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4183DE0](a1, a2, WitnessTable, v5);
}

uint64_t sub_1D7A2283C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4183DF0](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_1D7A228AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4183DE8](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_1D7A2291C@<X0>(BOOL *a1@<X8>)
{
  return JWSSignedJSON.JWSType.init(rawValue:)(a1);
}

void sub_1D7A22928(void *a1@<X8>)
{
  *a1 = 0x4F534A2B45534F4ALL;
  a1[1] = 0xE90000000000004ELL;
}

uint64_t sub_1D7A22948()
{
  return sub_1D7A9C2B8();
}

uint64_t sub_1D7A229BC()
{
  return sub_1D7A9C258();
}

uint64_t JWSSignedJSON.JWSContentType.init(rawValue:)@<X0>(BOOL *a1@<X8>)
{
  return sub_1D7A22A2C(a1);
}

uint64_t sub_1D7A22A2C@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2 = sub_1D7A9D058();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

unint64_t JWSSignedJSON.JWSContentType.rawValue.getter()
{
  return 0xD00000000000001FLL;
}

uint64_t sub_1D7A22A9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB1C8];
  return MEMORY[0x1F4185BB0](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_1D7A22B10(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4183DE0](a1, a2, WitnessTable, v5);
}

uint64_t sub_1D7A22B7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4183DF0](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_1D7A22BEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4183DE8](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_1D7A22C5C@<X0>(BOOL *a1@<X8>)
{
  return JWSSignedJSON.JWSContentType.init(rawValue:)(a1);
}

void sub_1D7A22C68(void *a1@<X8>)
{
  *a1 = 0xD00000000000001FLL;
  a1[1] = 0x80000001D7ABCB80;
}

uint64_t sub_1D7A22C88()
{
  return sub_1D7A9C2B8();
}

uint64_t sub_1D7A22CFC()
{
  return sub_1D7A9C258();
}

uint64_t JWSSignedJSON.JWSCritical.init(rawValue:)@<X0>(char *a1@<X8>)
{
  unint64_t v2 = sub_1D7A9D058();
  uint64_t result = swift_bridgeObjectRelease();
  char v4 = 3;
  if (v2 < 3) {
    char v4 = v2;
  }
  *a1 = v4;
  return result;
}

uint64_t JWSSignedJSON.JWSCritical.rawValue.getter()
{
  uint64_t v1 = 0x64657461657263;
  if (*v0 != 1) {
    uint64_t v1 = 1953259891;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x65636E6F6ELL;
  }
}

uint64_t sub_1D7A22E0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB1C8];
  return MEMORY[0x1F4185BB0](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_1D7A22E80(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4183DE0](a1, a2, WitnessTable, v5);
}

uint64_t sub_1D7A22EEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4183DF0](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_1D7A22F5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4183DE8](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_1D7A22FCC@<X0>(char *a1@<X8>)
{
  return JWSSignedJSON.JWSCritical.init(rawValue:)(a1);
}

uint64_t sub_1D7A22FD8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = JWSSignedJSON.JWSCritical.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1D7A23000()
{
  return sub_1D7A9C2B8();
}

uint64_t sub_1D7A23074()
{
  return sub_1D7A9C258();
}

uint64_t sub_1D7A230D8()
{
  unint64_t v0 = sub_1D7A9D058();
  swift_bridgeObjectRelease();
  if (v0 >= 8) {
    return 8;
  }
  else {
    return v0;
  }
}

uint64_t sub_1D7A23128(char a1)
{
  uint64_t result = 6777953;
  switch(a1)
  {
    case 1:
      uint64_t result = 6580587;
      break;
    case 2:
      uint64_t result = 7371124;
      break;
    case 3:
      uint64_t result = 7959651;
      break;
    case 4:
      uint64_t result = 1953067619;
      break;
    case 5:
      uint64_t result = 0x65636E6F6ELL;
      break;
    case 6:
      uint64_t result = 0x64657461657263;
      break;
    case 7:
      uint64_t result = 1953259891;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1D7A231EC(char a1)
{
  uint64_t result = 6777953;
  switch(a1)
  {
    case 1:
      uint64_t result = 6580587;
      break;
    case 2:
      uint64_t result = 7371124;
      break;
    case 3:
      uint64_t result = 7959651;
      break;
    case 4:
      uint64_t result = 1953067619;
      break;
    case 5:
      uint64_t result = 0x65636E6F6ELL;
      break;
    case 6:
      uint64_t result = 0x64657461657263;
      break;
    case 7:
      uint64_t result = 1953259891;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1D7A232B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB1C8];
  return MEMORY[0x1F4185BB0](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_1D7A23324(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4183DE0](a1, a2, WitnessTable, v5);
}

uint64_t sub_1D7A23390(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4183DF0](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_1D7A23400(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4183DE8](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_1D7A23470@<X0>(void *a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  return sub_1D7A2446C(a1, a2, (uint64_t (*)(void, void, void, void, void))sub_1D7A230D8, a3);
}

uint64_t sub_1D7A23488@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1D7A234A0(a1, (uint64_t (*)(void, void, void, void))sub_1D7A23128, a2);
}

uint64_t sub_1D7A234A0@<X0>(void *a1@<X0>, uint64_t (*a2)(void, void, void, void)@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result = a2(*v3, a1[2], a1[3], a1[4]);
  *a3 = result;
  a3[1] = v6;
  return result;
}

uint64_t sub_1D7A234DC()
{
  return sub_1D7A231EC(*v0);
}

uint64_t sub_1D7A234EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, unsigned char *a4@<X8>)
{
  uint64_t result = sub_1D7A23124(a1, a2, a3[2], a3[3], a3[4]);
  *a4 = result;
  return result;
}

uint64_t sub_1D7A23520@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1D7A2A030();
  *a1 = result;
  return result;
}

uint64_t sub_1D7A23554(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t sub_1D7A235A8(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t sub_1D7A235FC()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[6];
  uint64_t v3 = v0[8];
  swift_bridgeObjectRetain();
  JWSSignedJSON.JWSCritical.init(rawValue:)(&v5);
  uint64_t result = 0;
  switch(v5)
  {
    case 1:
      uint64_t v1 = v2;
      goto LABEL_4;
    case 2:
      uint64_t v1 = v3;
      goto LABEL_4;
    case 3:
      return result;
    default:
LABEL_4:
      swift_bridgeObjectRetain();
      return v1;
  }
}

uint64_t JWSSignedJSON.DIPJWSProtectedHeader.encode(to:)(void *a1, void *a2)
{
  uint64_t v4 = a2[2];
  uint64_t v5 = a2[4];
  uint64_t v29 = a2[3];
  uint64_t v30 = v4;
  uint64_t v28 = v5;
  type metadata accessor for JWSSignedJSON.DIPJWSProtectedHeader.CodingKeys();
  swift_getWitnessTable();
  uint64_t v6 = sub_1D7A9D238();
  uint64_t v31 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v7, v8, v9, v10, v11, v12, v13);
  uint64_t v15 = (char *)v24 - v14;
  char v16 = *v2;
  uint64_t v17 = *((void *)v2 + 1);
  uint64_t v26 = *((void *)v2 + 2);
  uint64_t v27 = v17;
  uint64_t v18 = *((void *)v2 + 3);
  uint64_t v19 = *((void *)v2 + 4);
  v24[6] = *((void *)v2 + 5);
  uint64_t v25 = v18;
  uint64_t v20 = *((void *)v2 + 6);
  v24[4] = *((void *)v2 + 7);
  v24[5] = v19;
  v24[2] = *((void *)v2 + 8);
  v24[3] = v20;
  v24[1] = *((void *)v2 + 9);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D7A9D6E8();
  LOBYTE(v33) = v16;
  char v34 = 0;
  sub_1D7A23A9C();
  uint64_t v21 = v32;
  sub_1D7A9D228();
  if (v21) {
    return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v15, v6);
  }
  uint64_t v23 = v31;
  LOBYTE(v33) = 1;
  sub_1D7A9D188();
  LOBYTE(v33) = 2;
  type metadata accessor for JWSSignedJSON.JWSType();
  swift_getWitnessTable();
  sub_1D7A9D228();
  LOBYTE(v33) = 3;
  type metadata accessor for JWSSignedJSON.JWSContentType();
  swift_getWitnessTable();
  sub_1D7A9D228();
  uint64_t v33 = v25;
  char v34 = 4;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF7900);
  sub_1D7919C34(&qword_1EBDF8230);
  sub_1D7A9D1C8();
  LOBYTE(v33) = 5;
  sub_1D7A9D188();
  LOBYTE(v33) = 6;
  sub_1D7A9D188();
  LOBYTE(v33) = 7;
  sub_1D7A9D188();
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v15, v6);
}

uint64_t type metadata accessor for JWSSignedJSON.DIPJWSProtectedHeader.CodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t sub_1D7A23A9C()
{
  unint64_t result = qword_1EA847078;
  if (!qword_1EA847078)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847078);
  }
  return result;
}

uint64_t type metadata accessor for JWSSignedJSON.JWSType()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for JWSSignedJSON.JWSContentType()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t JWSSignedJSON.DIPJWSProtectedHeader.init(from:)@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v39 = a2;
  type metadata accessor for JWSSignedJSON.DIPJWSProtectedHeader.CodingKeys();
  swift_getWitnessTable();
  uint64_t v4 = sub_1D7A9D168();
  uint64_t v40 = *(void *)(v4 - 8);
  uint64_t v41 = v4;
  MEMORY[0x1F4188790](v4, v5, v6, v7, v8, v9, v10, v11);
  uint64_t v12 = *(void *)(a1 + 24);
  uint64_t v42 = a1;
  uint64_t v13 = (void *)a1;
  uint64_t v15 = (char *)&v36 - v14;
  __swift_project_boxed_opaque_existential_1(v13, v12);
  sub_1D7A9D6A8();
  if (!v2)
  {
    char v45 = 0;
    sub_1D7A240B4();
    sub_1D7A9D148();
    int v16 = v43;
    LOBYTE(v43) = 1;
    uint64_t v38 = v15;
    uint64_t v17 = sub_1D7A9D0A8();
    uint64_t v20 = v19;
    uint64_t v37 = v17;
    int v44 = v16;
    type metadata accessor for JWSSignedJSON.JWSType();
    LOBYTE(v43) = 2;
    swift_bridgeObjectRetain();
    swift_getWitnessTable();
    sub_1D7A9D148();
    type metadata accessor for JWSSignedJSON.JWSContentType();
    LOBYTE(v43) = 3;
    swift_getWitnessTable();
    sub_1D7A9D148();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF7900);
    char v45 = 4;
    sub_1D7919C34(&qword_1EBDF7A30);
    sub_1D7A9D0E8();
    uint64_t v21 = v43;
    LOBYTE(v43) = 5;
    swift_bridgeObjectRetain();
    uint64_t v22 = sub_1D7A9D0A8();
    uint64_t v24 = v23;
    char v25 = v44;
    LOBYTE(v43) = 6;
    swift_bridgeObjectRetain();
    uint64_t v26 = sub_1D7A9D0A8();
    uint64_t v28 = v27;
    LOBYTE(v43) = 7;
    swift_bridgeObjectRetain();
    uint64_t v29 = sub_1D7A9D0A8();
    uint64_t v31 = v30;
    uint64_t v36 = v26;
    uint64_t v32 = *(void (**)(char *, uint64_t))(v40 + 8);
    uint64_t v40 = v29;
    v32(v38, v41);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v33 = v39;
    *uint64_t v39 = v25;
    v33[1] = v37;
    void v33[2] = v20;
    v33[3] = v21;
    v33[4] = v22;
    uint64_t v34 = v36;
    v33[5] = v24;
    v33[6] = v34;
    uint64_t v35 = v40;
    v33[7] = v28;
    v33[8] = v35;
    v33[9] = v31;
  }
  __swift_destroy_boxed_opaque_existential_1(v42);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

unint64_t sub_1D7A240B4()
{
  unint64_t result = qword_1EBDF7A70;
  if (!qword_1EBDF7A70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBDF7A70);
  }
  return result;
}

uint64_t sub_1D7A24108@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return JWSSignedJSON.DIPJWSProtectedHeader.init(from:)(a1, a2);
}

uint64_t sub_1D7A2412C(void *a1, void *a2)
{
  return JWSSignedJSON.DIPJWSProtectedHeader.encode(to:)(a1, a2);
}

uint64_t JWSSignedJSON.DIPJWSUnprotectedHeader.x5c.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t JWSSignedJSON.DIPJWSUnprotectedHeader.x5c.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*JWSSignedJSON.DIPJWSUnprotectedHeader.x5c.modify())()
{
  return nullsub_1;
}

uint64_t JWSSignedJSON.DIPJWSUnprotectedHeader.uam.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t JWSSignedJSON.DIPJWSUnprotectedHeader.uam.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = a2;
  return result;
}

uint64_t (*JWSSignedJSON.DIPJWSUnprotectedHeader.uam.modify())()
{
  return nullsub_1;
}

uint64_t sub_1D7A24220()
{
  uint64_t v0 = sub_1D7A9D058();
  swift_bridgeObjectRelease();
  if (v0 == 1) {
    unsigned int v1 = 1;
  }
  else {
    unsigned int v1 = 2;
  }
  if (v0) {
    return v1;
  }
  else {
    return 0;
  }
}

uint64_t sub_1D7A24274(char a1)
{
  if (a1) {
    return 7168373;
  }
  else {
    return 6501752;
  }
}

uint64_t sub_1D7A24294(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB1C8];
  return MEMORY[0x1F4185BB0](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_1D7A24308(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4183DE0](a1, a2, WitnessTable, v5);
}

uint64_t sub_1D7A24374(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4183DF0](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_1D7A243E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4183DE8](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_1D7A24454@<X0>(void *a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  return sub_1D7A2446C(a1, a2, (uint64_t (*)(void, void, void, void, void))sub_1D7A24220, a3);
}

uint64_t sub_1D7A2446C@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t (*a3)(void, void, void, void, void)@<X3>, unsigned char *a4@<X8>)
{
  uint64_t result = a3(*a1, a1[1], a2[2], a2[3], a2[4]);
  *a4 = result;
  return result;
}

uint64_t sub_1D7A244B0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1D7A24274(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1D7A244E8()
{
  return sub_1D7A24274(*v0);
}

uint64_t sub_1D7A244FC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1D7A24220();
  *a1 = result;
  return result;
}

uint64_t sub_1D7A24530@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1D797A868();
  *a1 = result;
  return result;
}

uint64_t sub_1D7A24564(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t sub_1D7A245B8(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

void JWSSignedJSON.DIPJWSUnprotectedHeader.init()(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t JWSSignedJSON.DIPJWSUnprotectedHeader.encode(to:)(void *a1)
{
  type metadata accessor for JWSSignedJSON.DIPJWSUnprotectedHeader.CodingKeys();
  swift_getWitnessTable();
  uint64_t v3 = sub_1D7A9D238();
  uint64_t v19 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v4, v5, v6, v7, v8, v9, v10);
  uint64_t v12 = (char *)v18 - v11;
  uint64_t v14 = *v1;
  uint64_t v13 = v1[1];
  v18[1] = v1[2];
  v18[2] = v13;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D7A9D6E8();
  uint64_t v23 = v14;
  char v22 = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF7900);
  sub_1D7919C34(&qword_1EBDF8230);
  uint64_t v15 = v20;
  sub_1D7A9D1C8();
  if (v15) {
    return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v12, v3);
  }
  uint64_t v17 = v19;
  char v21 = 1;
  sub_1D7A9D188();
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v12, v3);
}

uint64_t type metadata accessor for JWSSignedJSON.DIPJWSUnprotectedHeader.CodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t JWSSignedJSON.DIPJWSUnprotectedHeader.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  char v22 = a2;
  type metadata accessor for JWSSignedJSON.DIPJWSUnprotectedHeader.CodingKeys();
  swift_getWitnessTable();
  uint64_t v4 = sub_1D7A9D168();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6, v7, v8, v9, v10, v11, v12);
  uint64_t v14 = (char *)&v22 - v13;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D7A9D6A8();
  if (!v2)
  {
    uint64_t v15 = v5;
    int v16 = v22;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF7900);
    char v24 = 0;
    sub_1D7919C34(&qword_1EBDF7A30);
    sub_1D7A9D0E8();
    uint64_t v17 = v25;
    char v23 = 1;
    swift_bridgeObjectRetain();
    uint64_t v19 = sub_1D7A9D0A8();
    uint64_t v21 = v20;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v14, v4);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *int v16 = v17;
    v16[1] = v19;
    v16[2] = v21;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D7A24ABC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return JWSSignedJSON.DIPJWSUnprotectedHeader.init(from:)(a1, a2);
}

uint64_t sub_1D7A24AE0(void *a1)
{
  return JWSSignedJSON.DIPJWSUnprotectedHeader.encode(to:)(a1);
}

uint64_t JWSSignedJSON.unprotectedHeader.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 64);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 48);
  *(void *)(a1 + 16) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 JWSSignedJSON.unprotectedHeader.setter(__n128 *a1)
{
  __n128 v4 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __n128 result = v4;
  v1[3] = v4;
  v1[4].n128_u64[0] = v2;
  return result;
}

uint64_t (*JWSSignedJSON.unprotectedHeader.modify())()
{
  return nullsub_1;
}

uint64_t JWSSignedJSON.protectedHeader.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 88);
  uint64_t v4 = *(void *)(v1 + 144);
  *(unsigned char *)a1 = *(unsigned char *)(v1 + 72);
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  long long v5 = *(_OWORD *)(v1 + 112);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 96);
  *(_OWORD *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(v1 + 128);
  *(void *)(a1 + 72) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 JWSSignedJSON.protectedHeader.setter(char *a1)
{
  char v2 = *a1;
  long long v7 = *(_OWORD *)(a1 + 24);
  long long v8 = *(_OWORD *)(a1 + 8);
  __n128 v5 = *(__n128 *)(a1 + 56);
  long long v6 = *(_OWORD *)(a1 + 40);
  uint64_t v3 = *((void *)a1 + 9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v1 + 72) = v2;
  *(_OWORD *)(v1 + 80) = v8;
  *(_OWORD *)(v1 + 96) = v7;
  __n128 result = v5;
  *(_OWORD *)(v1 + 112) = v6;
  *(__n128 *)(v1 + 128) = v5;
  *(void *)(v1 + 144) = v3;
  return result;
}

uint64_t (*JWSSignedJSON.protectedHeader.modify())()
{
  return nullsub_1;
}

uint64_t JWSSignedJSON.payload.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 60));
}

uint64_t JWSSignedJSON.init(payload:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for JWSSignedJSON();
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 48) = 0;
  *(unsigned char *)(a3 + 72) = 0;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(void *)(a3 + 144) = 0;
  uint64_t v7 = *(void *)(a2 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a3 + *(int *)(v6 + 60), a1, a2);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0xE000000000000000;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0xE000000000000000;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, a2);
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0xE000000000000000;
  return result;
}

uint64_t type metadata accessor for JWSSignedJSON()
{
  return __swift_instantiateGenericMetadata();
}

__n128 JWSSignedJSON.init(_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for JWSSignedJSON();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3 + *(int *)(v6 + 60), a1 + *(int *)(v6 + 60), a2);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a3 = *(void *)a1;
  *(void *)(a3 + 8) = v7;
  *(_OWORD *)(a3 + 16) = *(_OWORD *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 40);
  *(void *)(a3 + 32) = *(void *)(a1 + 32);
  *(void *)(a3 + 40) = v8;
  uint64_t v9 = *(void *)(a1 + 64);
  *(_OWORD *)(a3 + 48) = *(_OWORD *)(a1 + 48);
  *(void *)(a3 + 64) = v9;
  uint64_t v10 = *(void *)(a1 + 144);
  *(unsigned char *)(a3 + 72) = *(unsigned char *)(a1 + 72);
  long long v11 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a3 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a3 + 96) = v11;
  __n128 result = *(__n128 *)(a1 + 112);
  long long v13 = *(_OWORD *)(a1 + 128);
  *(__n128 *)(a3 + 112) = result;
  *(_OWORD *)(a3 + 128) = v13;
  *(void *)(a3 + 144) = v10;
  return result;
}

uint64_t JWSSignedJSON.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v160 = a5;
  uint64_t v171 = sub_1D7A9CCF8();
  uint64_t v170 = *(void *)(v171 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v171, v9, v10, v11, v12, v13, v14, v15);
  v169 = (char *)&v147 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = MEMORY[0x1F4188790](v16, v18, v19, v20, v21, v22, v23, v24);
  v174 = (char *)&v147 - v26;
  uint64_t v161 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v25, v27, v28, v29, v30, v31, v32, v33);
  uint64_t v35 = (char *)&v147 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for JWSSignedJSON.CodingKeys();
  swift_getWitnessTable();
  uint64_t v167 = sub_1D7A9D168();
  uint64_t v164 = *(void *)(v167 - 8);
  MEMORY[0x1F4188790](v167, v36, v37, v38, v39, v40, v41, v42);
  int v44 = (char *)&v147 - v43;
  uint64_t v166 = a3;
  uint64_t v165 = a4;
  uint64_t v162 = type metadata accessor for JWSSignedJSON();
  uint64_t v45 = *(void *)(v162 - 8);
  MEMORY[0x1F4188790](v162, v46, v47, v48, v49, v50, v51, v52);
  v190 = (char *)&v147 - v53;
  uint64_t v54 = a1[3];
  v172 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v54);
  v168 = v44;
  uint64_t v55 = v173;
  sub_1D7A9D6A8();
  uint64_t v163 = a2;
  if (v55)
  {
    uint64_t v57 = v174;
    *(void *)&long long v175 = v55;
    id v58 = v55;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF9740);
    uint64_t v59 = v171;
    if (swift_dynamicCast())
    {

      uint64_t v60 = v170;
      int v61 = v169;
      (*(void (**)(char *, char *, uint64_t))(v170 + 32))(v169, v57, v59);
      uint64_t v62 = (void *)swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v60 + 16))(v63, v61, v59);
      LOWORD(v188) = 117;
      uint64_t v64 = v59;
      unint64_t v65 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v62, 0xD000000000000011, 0x80000001D7AC9920, (__int16 *)&v188, 0, v65, 0xD000000000000057, 0x80000001D7AC98C0, v66, 0x6F72662874696E69, 0xEB00000000293A6DLL, 126);
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v60 + 8))(v61, v64);
      unint64_t v67 = (void *)v175;
    }
    else
    {

      LOWORD(v175) = 0;
      id v68 = v55;
      unint64_t v69 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v55, 0xD00000000000001BLL, 0x80000001D7AC98A0, (__int16 *)&v175, 0, v69, 0xD000000000000057, 0x80000001D7AC98C0, v70, 0x6F72662874696E69, 0xEB00000000293A6DLL, 129);
      swift_willThrow();
      unint64_t v67 = v55;
    }

    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v172);
  }
  uint64_t v56 = v164;
  uint64_t v159 = v45;
  v173 = v35;
  type metadata accessor for JWSSignedJSON.DIPJWSUnprotectedHeader();
  LOBYTE(v188) = 0;
  swift_getWitnessTable();
  sub_1D7A9D148();
  uint64_t v72 = v176;
  uint64_t v73 = v190;
  *((_OWORD *)v190 + 3) = v175;
  *((void *)v73 + 8) = v72;
  LOBYTE(v175) = 1;
  uint64_t v74 = sub_1D7A9D0F8();
  *(void *)uint64_t v73 = v74;
  *((void *)v73 + 1) = v75;
  LOBYTE(v175) = 2;
  uint64_t v76 = v74;
  uint64_t v77 = v75;
  swift_bridgeObjectRetain();
  uint64_t v78 = sub_1D7A9D0F8();
  uint64_t v157 = v76;
  uint64_t v158 = v77;
  *((void *)v73 + 2) = v78;
  *((void *)v73 + 3) = v79;
  LOBYTE(v175) = 3;
  uint64_t v80 = v79;
  swift_bridgeObjectRetain();
  uint64_t v81 = v167;
  uint64_t v82 = sub_1D7A9D0F8();
  uint64_t v84 = v83;
  uint64_t v154 = v78;
  (*(void (**)(char *, uint64_t))(v56 + 8))(v168, v81);
  *((void *)v73 + 4) = v82;
  *((void *)v73 + 5) = v84;
  uint64_t v188 = v157;
  uint64_t v189 = v158;
  uint64_t v186 = 45;
  unint64_t v187 = 0xE100000000000000;
  uint64_t v184 = 43;
  unint64_t v185 = 0xE100000000000000;
  unint64_t v85 = sub_1D791118C();
  uint64_t v188 = sub_1D7A9CA58();
  uint64_t v189 = v86;
  uint64_t v186 = 95;
  unint64_t v187 = 0xE100000000000000;
  uint64_t v184 = 47;
  unint64_t v185 = 0xE100000000000000;
  unint64_t v153 = v85;
  uint64_t v87 = sub_1D7A9CA58();
  uint64_t v89 = v88;
  swift_bridgeObjectRelease();
  *(void *)&long long v175 = v87;
  *((void *)&v175 + 1) = v89;
  swift_bridgeObjectRetain();
  uint64_t v90 = sub_1D7A9C0D8();
  swift_bridgeObjectRelease();
  uint64_t v91 = v90 & 3;
  if (v90 <= 0) {
    uint64_t v91 = -(-v90 & 3);
  }
  if (v91 >= 1)
  {
    MEMORY[0x1D947AF40](61, 0xE100000000000000, 4 - v91);
    sub_1D7A9C128();
    swift_bridgeObjectRelease();
  }
  uint64_t v92 = sub_1D7A9AFB8();
  unint64_t v94 = v93;
  sub_1D786E9D8(v92, v93);
  swift_bridgeObjectRelease();
  if (v94 >> 60 == 15)
  {
    swift_bridgeObjectRelease();
    *(void *)&long long v175 = 0;
    *((void *)&v175 + 1) = 0xE000000000000000;
    sub_1D7A9CC48();
    sub_1D7A9C128();
    sub_1D7A9C128();
    swift_bridgeObjectRelease();
    uint64_t v96 = *((void *)&v175 + 1);
    uint64_t v95 = v175;
    LOWORD(v175) = 117;
    unint64_t v97 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, v95, v96, (__int16 *)&v175, 0, v97, 0xD000000000000057, 0x80000001D7AC98C0, v98, 0x6F72662874696E69, 0xEB00000000293A6DLL, 134);
    swift_willThrow();
    int v101 = 0;
    int v102 = 0;
  }
  else
  {
    sub_1D7871BDC(v92, v94);
    swift_bridgeObjectRelease();
    uint64_t v99 = sub_1D7A9ABF8();
    swift_allocObject();
    sub_1D7A9ABE8();
    uint64_t v100 = type metadata accessor for JWSSignedJSON.DIPJWSProtectedHeader();
    swift_getWitnessTable();
    sub_1D7A9ABD8();
    uint64_t v149 = v99;
    uint64_t v152 = v80;
    uint64_t v151 = v92;
    uint64_t v150 = 0;
    swift_release();
    uint64_t v105 = *((void *)&v175 + 1);
    v104 = v176;
    uint64_t v107 = v177;
    uint64_t v106 = v178;
    uint64_t v108 = v179;
    uint64_t v109 = v180;
    uint64_t v110 = v181;
    uint64_t v111 = v182;
    v112 = v183;
    LODWORD(v168) = v175;
    v73[72] = v175;
    uint64_t v167 = v105;
    *((void *)v73 + 10) = v105;
    *((void *)v73 + 11) = v104;
    v174 = v104;
    *((void *)v73 + 12) = v107;
    *((void *)v73 + 13) = v106;
    uint64_t v165 = v106;
    uint64_t v171 = v108;
    *((void *)v73 + 14) = v108;
    *((void *)v73 + 15) = v109;
    uint64_t v164 = v109;
    uint64_t v170 = v110;
    *((void *)v73 + 16) = v110;
    *((void *)v73 + 17) = v111;
    uint64_t v158 = v111;
    v169 = v112;
    *((void *)v73 + 18) = v112;
    if (v107 && (uint64_t v113 = *(void *)(v107 + 16)) != 0)
    {
      uint64_t v156 = v100;
      unint64_t v148 = v94;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v157 = v107;
      uint64_t v114 = v107 + 40;
      v115 = v174;
      uint64_t v116 = v107;
      uint64_t v117 = v171;
      uint64_t v118 = v170;
      v119 = v169;
      while (1)
      {
        uint64_t v120 = *(void *)(v114 - 8);
        LOBYTE(v175) = (_BYTE)v168;
        *((void *)&v175 + 1) = v167;
        v176 = v115;
        uint64_t v177 = v116;
        uint64_t v178 = v165;
        uint64_t v179 = v117;
        uint64_t v180 = v164;
        uint64_t v181 = v118;
        uint64_t v182 = v158;
        v183 = v119;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v155 = v120;
        sub_1D7A235FC();
        uint64_t v122 = v121;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (!v122) {
          break;
        }
        v114 += 16;
        swift_bridgeObjectRelease();
        if (!--v113)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          uint64_t v73 = v190;
          unint64_t v94 = v148;
          goto LABEL_28;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      *(void *)&long long v175 = 0;
      *((void *)&v175 + 1) = 0xE000000000000000;
      sub_1D7A9CC48();
      sub_1D7A9C128();
      sub_1D7A9C128();
      swift_bridgeObjectRelease();
      uint64_t v141 = *((void *)&v175 + 1);
      uint64_t v140 = v175;
      LOWORD(v175) = 117;
      unint64_t v142 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, v140, v141, (__int16 *)&v175, 0, v142, 0xD000000000000057, 0x80000001D7AC98C0, v143, 0x6F72662874696E69, 0xEB00000000293A6DLL, 142);
      swift_willThrow();
      sub_1D7871BDC(v151, v148);
      int v102 = 0;
      int v101 = 1;
      uint64_t v73 = v190;
    }
    else
    {
LABEL_28:
      uint64_t v188 = v154;
      uint64_t v189 = v152;
      uint64_t v186 = 45;
      unint64_t v187 = 0xE100000000000000;
      uint64_t v184 = 43;
      unint64_t v185 = 0xE100000000000000;
      uint64_t v188 = sub_1D7A9CA58();
      uint64_t v189 = v123;
      uint64_t v186 = 95;
      unint64_t v187 = 0xE100000000000000;
      uint64_t v184 = 47;
      unint64_t v185 = 0xE100000000000000;
      uint64_t v124 = sub_1D7A9CA58();
      uint64_t v126 = v125;
      swift_bridgeObjectRelease();
      *(void *)&long long v175 = v124;
      *((void *)&v175 + 1) = v126;
      swift_bridgeObjectRetain();
      uint64_t v127 = sub_1D7A9C0D8();
      swift_bridgeObjectRelease();
      uint64_t v128 = v127 & 3;
      if (v127 <= 0) {
        uint64_t v128 = -(-v127 & 3);
      }
      if (v128 >= 1)
      {
        MEMORY[0x1D947AF40](61, 0xE100000000000000, 4 - v128);
        sub_1D7A9C128();
        swift_bridgeObjectRelease();
      }
      uint64_t v129 = sub_1D7A9AFB8();
      unint64_t v131 = v130;
      sub_1D786E9D8(v129, v130);
      swift_bridgeObjectRelease();
      v132 = v173;
      if (v131 >> 60 != 15)
      {
        unint64_t v137 = v94;
        sub_1D7871BDC(v129, v131);
        swift_bridgeObjectRelease();
        swift_allocObject();
        sub_1D7A9ABE8();
        uint64_t v138 = v163;
        uint64_t v139 = v150;
        sub_1D7A9ABD8();
        if (v139)
        {
          sub_1D7871BDC(v151, v137);
          sub_1D7871BDC(v129, v131);
          swift_release();
          int v102 = 0;
          int v101 = 1;
          uint64_t v103 = (uint64_t)v172;
        }
        else
        {
          swift_release();
          (*(void (**)(char *, char *, uint64_t))(v161 + 32))(&v73[*(int *)(v162 + 60)], v132, v138);
          JWSSignedJSON.verify()();
          if (!v144)
          {
            sub_1D7871BDC(v129, v131);
            sub_1D7871BDC(v151, v137);
            uint64_t v145 = v159;
            uint64_t v146 = v162;
            (*(void (**)(uint64_t, char *, uint64_t))(v159 + 16))(v160, v73, v162);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v172);
            return (*(uint64_t (**)(char *, uint64_t))(v145 + 8))(v73, v146);
          }
          sub_1D7871BDC(v129, v131);
          sub_1D7871BDC(v151, v137);
          int v101 = 1;
          int v102 = 1;
          uint64_t v103 = (uint64_t)v172;
        }
        goto LABEL_21;
      }
      *(void *)&long long v175 = 0;
      *((void *)&v175 + 1) = 0xE000000000000000;
      sub_1D7A9CC48();
      sub_1D7A9C128();
      sub_1D7A9C128();
      swift_bridgeObjectRelease();
      uint64_t v134 = *((void *)&v175 + 1);
      uint64_t v133 = v175;
      LOWORD(v175) = 117;
      unint64_t v135 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, v133, v134, (__int16 *)&v175, 0, v135, 0xD000000000000057, 0x80000001D7AC98C0, v136, 0x6F72662874696E69, 0xEB00000000293A6DLL, 149);
      swift_willThrow();
      sub_1D7871BDC(v151, v94);
      int v102 = 0;
      int v101 = 1;
    }
  }
  uint64_t v103 = (uint64_t)v172;
LABEL_21:
  __swift_destroy_boxed_opaque_existential_1(v103);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v101)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v102 & 1) == 0) {
      return result;
    }
  }
  else if (!v102)
  {
    return result;
  }
  return (*(uint64_t (**)(char *, uint64_t))(v161 + 8))(&v73[*(int *)(v162 + 60)], v163);
}

uint64_t type metadata accessor for JWSSignedJSON.CodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JWSSignedJSON.verify()()
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v5 = v0;
  uint64_t v6 = sub_1D7A9C028();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v8, v9, v10, v11, v12, v13, v14);
  uint64_t v16 = (char *)&v98 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(v4 + 48);
  if (!v17 || !*(void *)(v17 + 16))
  {
    LOWORD(v106) = 104;
    unint64_t v31 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000002DLL, 0x80000001D7AC9A20, (__int16 *)&v106, 0, v31, 0xD000000000000057, 0x80000001D7AC98C0, v32, 0x2928796669726576, 0xE800000000000000, 254);
    swift_willThrow();
    return;
  }
  unint64_t v18 = sub_1D785FEB4(MEMORY[0x1E4FBC860]);
  sub_1D7A29994(v5, v19, v20, v21, v22, v23, v24, v25, &v104);
  if (v2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_6:
    LOWORD(v106) = 0;
    id v28 = v3;
    unint64_t v29 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v3, 0xD000000000000022, 0x80000001D7AC9A50, (__int16 *)&v106, 0, v29, 0xD000000000000057, 0x80000001D7AC98C0, v30, 0x2928796669726576, 0xE800000000000000, 262);
    swift_willThrow();

    return;
  }
  char v26 = v104;
  uint64_t v27 = decodeCertificateChain(fromBase64DER:)(v17);
  uint64_t v106 = v18;
  unint64_t v107 = 0;
  LOBYTE(v102) = v26;
  SecTrustRef v33 = DIPOIDVerifier.verifyChain(_:forUsage:)((Swift::OpaquePointer)v27, (CoreIDVShared::DIPCertUsage)&v102);
  if (v34)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v3 = v34;
    goto LABEL_6;
  }
  uint64_t v35 = v33;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  SecKeyRef v36 = SecTrustCopyKey(v35);
  if (!v36)
  {
    LOWORD(v106) = 0;
    unint64_t v57 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000003BLL, 0x80000001D7AC9A80, (__int16 *)&v106, 0, v57, 0xD000000000000057, 0x80000001D7AC98C0, v58, 0x2928796669726576, 0xE800000000000000, 267);
    swift_willThrow();

    return;
  }
  SecKeyRef v37 = v36;
  uint64_t v108 = v35;
  unint64_t v38 = *(void *)(v4 + 8);
  uint64_t v106 = *(void *)v4;
  unint64_t v107 = v38;
  swift_bridgeObjectRetain();
  sub_1D7A9C128();
  SecKeyRef v39 = v37;
  swift_bridgeObjectRetain();
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C008();
  uint64_t v40 = sub_1D7A9BFD8();
  unint64_t v42 = v41;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v6);
  if (v42 >> 60 == 15)
  {
LABEL_18:
    LOWORD(v106) = 0;
    unint64_t v55 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000044, 0x80000001D7AC9AC0, (__int16 *)&v106, 0, v55, 0xD000000000000057, 0x80000001D7AC98C0, v56, 0x2928796669726576, 0xE800000000000000, 272);
    swift_willThrow();

LABEL_19:
    return;
  }
  uint64_t v43 = *(void *)(v4 + 40);
  uint64_t v104 = *(void *)(v4 + 32);
  uint64_t v105 = v43;
  uint64_t v102 = 45;
  unint64_t v103 = 0xE100000000000000;
  uint64_t v100 = 43;
  unint64_t v101 = 0xE100000000000000;
  uint64_t v44 = v40;
  unint64_t v99 = v42;
  sub_1D7860790(v40, v42);
  sub_1D791118C();
  uint64_t v104 = sub_1D7A9CA58();
  uint64_t v105 = v45;
  uint64_t v102 = 95;
  unint64_t v103 = 0xE100000000000000;
  uint64_t v100 = 47;
  unint64_t v101 = 0xE100000000000000;
  uint64_t v46 = sub_1D7A9CA58();
  unint64_t v48 = v47;
  swift_bridgeObjectRelease();
  uint64_t v106 = v46;
  unint64_t v107 = v48;
  swift_bridgeObjectRetain();
  uint64_t v49 = sub_1D7A9C0D8();
  swift_bridgeObjectRelease();
  uint64_t v50 = v49 & 3;
  if (v49 <= 0) {
    uint64_t v50 = -(-v49 & 3);
  }
  if (v50 >= 1)
  {
    MEMORY[0x1D947AF40](61, 0xE100000000000000, 4 - v50);
    sub_1D7A9C128();
    swift_bridgeObjectRelease();
  }
  uint64_t v51 = sub_1D7A9AFB8();
  unint64_t v53 = v52;
  sub_1D786E9D8(v51, v52);
  swift_bridgeObjectRelease();
  if (v53 >> 60 == 15)
  {
    unint64_t v54 = v99;
    sub_1D7871BDC(v44, v99);
    sub_1D7871BDC(v44, v54);
    SecKeyRef v39 = v37;
    goto LABEL_18;
  }
  sub_1D7871BDC(v51, v53);
  if (!*(unsigned char *)(v4 + 72))
  {
    sub_1D786E9D8(v51, v53);
    sub_1D7871BDC(v44, v99);
    unint64_t v65 = v108;
LABEL_28:
    uint64_t v66 = (void *)sub_1D7A9AFF8();
    sub_1D7871BDC(v51, v53);
    id v67 = ECDSASHA256RawToDER(v66);

    if (!v67)
    {
      LOWORD(v106) = 0;
      unint64_t v85 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000003FLL, 0x80000001D7AC9B60, (__int16 *)&v106, 0, v85, 0xD000000000000057, 0x80000001D7AC98C0, v86, 0x2928796669726576, 0xE800000000000000, 288);
      swift_willThrow();
      sub_1D78607E8(v44, v99);
      sub_1D7871BDC(v51, v53);

      return;
    }
    uint64_t v68 = sub_1D7A9B028();
    unint64_t v98 = v69;

    sub_1D7871BDC(v51, v53);
    unint64_t v70 = v99;
    goto LABEL_33;
  }
  if (*(unsigned char *)(v4 + 72) == 1)
  {
    unint64_t v59 = v99;
    if (!*(void *)(v4 + 64))
    {
LABEL_26:
      sub_1D7871BDC(v44, v59);
      uint64_t v62 = v108;
      LOWORD(v106) = 0;
      unint64_t v63 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000036, 0x80000001D7AC9BE0, (__int16 *)&v106, 0, v63, 0xD000000000000057, 0x80000001D7AC98C0, v64, 0x2928796669726576, 0xE800000000000000, 278);
      swift_willThrow();
      sub_1D7871BDC(v51, v53);
      sub_1D7871BDC(v44, v59);

      return;
    }
    sub_1D7860790(v51, v53);
    uint64_t v60 = sub_1D7A9AFB8();
    if (v61 >> 60 == 15)
    {
      sub_1D7871BDC(v51, v53);
      goto LABEL_26;
    }
    uint64_t v106 = v60;
    unint64_t v107 = v61;
    uint64_t v89 = (void *)sub_1D7A9AFF8();
    sub_1D7871BDC(v44, v59);
    id v90 = DigestSha256(v89);

    if (!v90)
    {
      sub_1D7871BDC(v51, v53);
      LOWORD(v104) = 0;
      unint64_t v96 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000041, 0x80000001D7AC9B10, (__int16 *)&v104, 0, v96, 0xD000000000000057, 0x80000001D7AC98C0, v97, 0x2928796669726576, 0xE800000000000000, 281);
      swift_willThrow();
      sub_1D7871BDC(v44, v59);
      sub_1D7871BDC(v51, v53);

      sub_1D78607E8(v106, v107);
      return;
    }
    uint64_t v91 = sub_1D7A9B028();
    unint64_t v93 = v92;

    sub_1D7A9B048();
    sub_1D7871BDC(v44, v59);
    sub_1D78607E8(v91, v93);
    uint64_t v44 = v106;
    unint64_t v99 = v107;
    unint64_t v65 = v108;
    goto LABEL_28;
  }
  sub_1D7860790(v51, v53);
  unint64_t v71 = v99;
  uint64_t v72 = (void *)sub_1D7A9AFF8();
  sub_1D7871BDC(v44, v71);
  id v73 = DigestSha256(v72);

  if (!v73)
  {
    sub_1D7871BDC(v51, v53);
    LOWORD(v106) = 0;
    unint64_t v87 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000041, 0x80000001D7AC9B10, (__int16 *)&v106, 0, v87, 0xD000000000000057, 0x80000001D7AC98C0, v88, 0x2928796669726576, 0xE800000000000000, 293);
    swift_willThrow();
    sub_1D7871BDC(v51, v53);
    sub_1D7871BDC(v44, v71);
LABEL_45:

    goto LABEL_19;
  }
  uint64_t v74 = sub_1D7A9B028();
  unint64_t v76 = v75;

  sub_1D7871BDC(v44, v71);
  sub_1D7860790(v74, v76);
  uint64_t v77 = (void *)sub_1D7A9AFF8();
  sub_1D7871BDC(v51, v53);
  id v78 = ECDSASHA256RawToDER(v77);

  if (!v78)
  {
    LOWORD(v106) = 0;
    unint64_t v94 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000003FLL, 0x80000001D7AC9B60, (__int16 *)&v106, 0, v94, 0xD000000000000057, 0x80000001D7AC98C0, v95, 0x2928796669726576, 0xE800000000000000, 297);
    swift_willThrow();
    sub_1D78607E8(v74, v76);
    sub_1D7871BDC(v51, v53);
    sub_1D78607E8(v74, v76);
    goto LABEL_45;
  }
  unint64_t v79 = v76;
  uint64_t v68 = sub_1D7A9B028();
  unint64_t v98 = v80;

  sub_1D7871BDC(v51, v53);
  sub_1D78607E8(v74, v79);
  uint64_t v44 = v74;
  unint64_t v70 = v79;
  unint64_t v65 = v108;
LABEL_33:
  id v81 = objc_msgSend(self, sel_standardUserDefaults);
  if (qword_1EBDF9690 != -1) {
    swift_once();
  }
  if (byte_1EBDFBE68 == 1)
  {
    uint64_t v82 = v68;
    uint64_t v83 = (void *)sub_1D7A9BF98();
    unsigned __int8 v84 = objc_msgSend(v81, sel_BOOLForKey_, v83);

    uint64_t v68 = v82;
    if (v84)
    {
      sub_1D78607E8(v82, v98);
      sub_1D78607E8(v44, v70);

      return;
    }
  }
  else
  {
  }
  sub_1D7A879B0(v68, v98, v44, v70, v37, (const __CFString *)*MEMORY[0x1E4F3BA70]);
  sub_1D78607E8(v68, v98);

  sub_1D78607E8(v44, v70);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JWSSignedJSON.setCertificateChain(_:)(Swift::OpaquePointer a1)
{
  if (*((void *)a1._rawValue + 2))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v1[6]._rawValue = a1._rawValue;
  }
  else
  {
    __int16 v5 = 105;
    unint64_t v3 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000026, 0x80000001D7AC9C20, &v5, 0, v3, 0xD000000000000057, 0x80000001D7AC98C0, v4, 0xD000000000000017, 0x80000001D7AC9C50, 160);
    swift_willThrow();
  }
}

uint64_t JWSSignedJSON.setKid(_:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 24))(v4, v5);
  if (!v2)
  {
    uint64_t v8 = result;
    unint64_t v9 = v7;
    uint64_t v10 = (void *)sub_1D7A9AFF8();
    sub_1D78607E8(v8, v9);
    id v11 = DigestSha256(v10);

    if (v11)
    {
      uint64_t v23 = sub_1D7A9B028();
      unint64_t v13 = v12;

      sub_1D7A9B008();
      sub_1D791118C();
      sub_1D7A9CA58();
      swift_bridgeObjectRelease();
      uint64_t v14 = sub_1D7A9CA58();
      uint64_t v16 = v15;
      swift_bridgeObjectRelease();
      v22[0] = v14;
      v22[1] = v16;
      uint64_t v17 = sub_1D7A9CA58();
      uint64_t v19 = v18;
      swift_bridgeObjectRelease();
      sub_1D78607E8(v23, v13);
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v3 + 80) = v17;
      *(void *)(v3 + 88) = v19;
    }
    else
    {
      LOWORD(v22[0]) = 0;
      unint64_t v20 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000039, 0x80000001D7AC9C70, (__int16 *)v22, 0, v20, 0xD000000000000057, 0x80000001D7AC98C0, v21, 0x5F2864694B746573, 0xEA0000000000293ALL, 167);
      return swift_willThrow();
    }
  }
  return result;
}

Swift::Void __swiftcall JWSSignedJSON.setNonce(_:)(Swift::String a1)
{
  *(Swift::String *)(v1 + 104) = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(v1 + 96);
  if (!v2)
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC860];
    *(void *)(v1 + 96) = MEMORY[0x1E4FBC860];
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1D789E300(0, v2[2] + 1, 1, v2);
  }
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_1D789E300((void *)(v3 > 1), v4 + 1, 1, v2);
  }
  v2[2] = v4 + 1;
  uint64_t v5 = &v2[2 * v4];
  v5[4] = 0x65636E6F6ELL;
  v5[5] = 0xE500000000000000;
  *(void *)(v1 + 96) = v2;
}

Swift::Void __swiftcall JWSSignedJSON.setSalt(_:)(Swift::String a1)
{
  *(Swift::String *)(v1 + 136) = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(v1 + 96);
  if (!v2)
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC860];
    *(void *)(v1 + 96) = MEMORY[0x1E4FBC860];
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1D789E300(0, v2[2] + 1, 1, v2);
  }
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_1D789E300((void *)(v3 > 1), v4 + 1, 1, v2);
  }
  v2[2] = v4 + 1;
  uint64_t v5 = &v2[2 * v4];
  v5[4] = 1953259891;
  v5[5] = 0xE400000000000000;
  *(void *)(v1 + 96) = v2;
}

uint64_t sub_1D7A277E8(uint8_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v151 = *MEMORY[0x1E4F143B8];
  uint64_t v128 = sub_1D7A9C028();
  uint64_t v127 = *(void *)(v128 - 8);
  MEMORY[0x1F4188790](v128, v4, v5, v6, v7, v8, v9, v10);
  uint64_t v126 = (char *)&v123 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v131 = sub_1D7A9B5F8();
  uint64_t v130 = *(void *)(v131 - 8);
  MEMORY[0x1F4188790](v131, v12, v13, v14, v15, v16, v17, v18);
  uint64_t v129 = (char *)&v123 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_t v134 = (os_log_t)sub_1D7A9AC08();
  Class isa = v134[-1].isa;
  MEMORY[0x1F4188790](v134, v21, v22, v23, v24, v25, v26, v27);
  unint64_t v29 = (uint64_t *)((char *)&v123 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v30 = sub_1D7A9B148();
  uint64_t v31 = *(void *)(v30 - 8);
  MEMORY[0x1F4188790](v30, v32, v33, v34, v35, v36, v37, v38);
  uint64_t v40 = (char *)&v123 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7A9B138();
  uint64_t v41 = UTCTimestamp(_:)();
  uint64_t v43 = v42;
  (*(void (**)(char *, uint64_t))(v31 + 8))(v40, v30);
  swift_bridgeObjectRelease();
  v2[15] = v41;
  v2[16] = v43;
  uint64_t v44 = v2;
  uint64_t v45 = (void *)v2[12];
  if (!v45)
  {
    uint64_t v45 = (void *)MEMORY[0x1E4FBC860];
    v2[12] = MEMORY[0x1E4FBC860];
  }
  uint64_t v46 = *((void *)a1 + 2);
  unint64_t v133 = *((void *)a1 + 3);
  uint64_t v47 = *((void *)a1 + 4);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v132 = a1;
  uint64_t v136 = v47;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    uint64_t v45 = sub_1D789E300(0, v45[2] + 1, 1, v45);
  }
  unint64_t v50 = v45[2];
  unint64_t v49 = v45[3];
  if (v50 >= v49 >> 1) {
    uint64_t v45 = sub_1D789E300((void *)(v49 > 1), v50 + 1, 1, v45);
  }
  v45[2] = v50 + 1;
  uint64_t v51 = &v45[2 * v50];
  v51[4] = 0x64657461657263;
  v51[5] = 0xE700000000000000;
  unint64_t v52 = v2;
  v2[12] = v45;
  sub_1D7A9AC48();
  swift_allocObject();
  uint64_t v53 = sub_1D7A9AC38();
  *unint64_t v29 = 0x7974696E69666E49;
  v29[1] = 0xE800000000000000;
  v29[2] = 0x74696E69666E492DLL;
  v29[3] = 0xE900000000000079;
  v29[4] = 5136718;
  v29[5] = 0xE300000000000000;
  (*((void (**)(void *, void, os_log_t))isa + 13))(v29, *MEMORY[0x1E4F26D30], v134);
  sub_1D7A9AC18();
  unint64_t v54 = v2[10];
  uint64_t v55 = v2[11];
  uint64_t v56 = v44[18];
  LOBYTE(v144) = *((unsigned char *)v44 + 72);
  unint64_t v145 = v54;
  uint64_t v146 = v55;
  long long v57 = *((_OWORD *)v44 + 7);
  long long v147 = *((_OWORD *)v44 + 6);
  long long v148 = v57;
  long long v149 = *((_OWORD *)v44 + 8);
  uint64_t v150 = v56;
  os_log_t v134 = v46;
  uint64_t v58 = v53;
  type metadata accessor for JWSSignedJSON.DIPJWSProtectedHeader();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  unint64_t v59 = v135;
  uint64_t v60 = sub_1D7A9AC28();
  if (v59)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v144 = 0;
    unint64_t v145 = 0xE000000000000000;
    sub_1D7A9CC48();
    sub_1D7A9C128();
    *(void *)&v137[0] = v59;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF9740);
    sub_1D7A9CE78();
    uint64_t v74 = v144;
    uint64_t v75 = v145;
    LOWORD(v144) = 118;
    id v76 = v59;
    unint64_t v77 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v59, v74, v75, (__int16 *)&v144, 0, v77, 0xD000000000000057, 0x80000001D7AC98C0, v78, 0x5365426F54746567, 0xEF292864656E6769, 209);
    swift_willThrow();
  }
  else
  {
    uint64_t v62 = v60;
    unint64_t v63 = v61;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v125 = v62;
    uint64_t v144 = sub_1D7A9B008();
    unint64_t v145 = v64;
    *(void *)&v137[0] = 43;
    *((void *)&v137[0] + 1) = 0xE100000000000000;
    uint64_t v142 = 45;
    unint64_t v143 = 0xE100000000000000;
    sub_1D791118C();
    unint64_t v133 = v63;
    uint64_t v65 = sub_1D7A9CA58();
    unint64_t v135 = (void *)v58;
    unint64_t v67 = v66;
    swift_bridgeObjectRelease();
    uint64_t v144 = v65;
    unint64_t v145 = v67;
    *(void *)&v137[0] = 47;
    *((void *)&v137[0] + 1) = 0xE100000000000000;
    uint64_t v142 = 95;
    unint64_t v143 = 0xE100000000000000;
    uint64_t v68 = sub_1D7A9CA58();
    unint64_t v70 = v69;
    swift_bridgeObjectRelease();
    uint64_t v144 = v68;
    unint64_t v145 = v70;
    *(void *)&v137[0] = 61;
    *((void *)&v137[0] + 1) = 0xE100000000000000;
    uint64_t v142 = 0;
    unint64_t v143 = 0xE000000000000000;
    uint64_t v71 = sub_1D7A9CA58();
    uint64_t v73 = v72;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *unint64_t v52 = v71;
    v52[1] = v73;
    uint64_t v80 = sub_1D7A9AC28();
    unint64_t v82 = v81;
    uint64_t v83 = sub_1D7A9B008();
    uint64_t v136 = v80;
    uint64_t v144 = v83;
    unint64_t v145 = v84;
    *(void *)&v137[0] = 43;
    *((void *)&v137[0] + 1) = 0xE100000000000000;
    uint64_t v142 = 45;
    unint64_t v143 = 0xE100000000000000;
    uint64_t v85 = sub_1D7A9CA58();
    unint64_t v87 = v86;
    swift_bridgeObjectRelease();
    uint64_t v144 = v85;
    unint64_t v145 = v87;
    *(void *)&v137[0] = 47;
    *((void *)&v137[0] + 1) = 0xE100000000000000;
    uint64_t v142 = 95;
    unint64_t v143 = 0xE100000000000000;
    uint64_t v88 = sub_1D7A9CA58();
    unint64_t v90 = v89;
    swift_bridgeObjectRelease();
    uint64_t v144 = v88;
    unint64_t v145 = v90;
    *(void *)&v137[0] = 61;
    *((void *)&v137[0] + 1) = 0xE100000000000000;
    uint64_t v142 = 0;
    unint64_t v143 = 0xE000000000000000;
    uint64_t v91 = sub_1D7A9CA58();
    uint64_t v93 = v92;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v52[2] = v91;
    v52[3] = v93;
    unint64_t v94 = v52;
    if (qword_1EBDF9DC8 != -1) {
      swift_once();
    }
    uint64_t v95 = v131;
    uint64_t v96 = __swift_project_value_buffer(v131, (uint64_t)qword_1EBDFBE70);
    swift_beginAccess();
    uint64_t v97 = v130;
    unint64_t v98 = v129;
    (*(void (**)(char *, uint64_t, uint64_t))(v130 + 16))(v129, v96, v95);
    uint64_t v99 = v136;
    sub_1D7860790(v136, v82);
    sub_1D7860790(v99, v82);
    uint64_t v100 = sub_1D7A9B5D8();
    int v101 = sub_1D7A9C748();
    if (os_log_type_enabled(v100, (os_log_type_t)v101))
    {
      int v124 = v101;
      os_log_t v134 = v100;
      uint64_t v102 = (uint8_t *)swift_slowAlloc();
      uint64_t v123 = swift_slowAlloc();
      uint64_t v141 = v123;
      v132 = v102;
      *(_DWORD *)uint64_t v102 = 136315138;
      switch(v82 >> 62)
      {
        case 1uLL:
          if (v99 >> 32 < (int)v99) {
            __break(1u);
          }
          unint64_t v103 = v82;
          sub_1D7860790(v99, v82);
          swift_retain();
          uint64_t v105 = sub_1D79DC0B8((int)v99, v99 >> 32, v82 & 0x3FFFFFFFFFFFFFFFLL, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1D79DC270);
          unint64_t v107 = v116;
          uint64_t v115 = v99;
          sub_1D78607E8(v99, v82);
          goto LABEL_21;
        case 2uLL:
          uint64_t v109 = v82 & 0x3FFFFFFFFFFFFFFFLL;
          unint64_t v110 = v82;
          uint64_t v111 = v99;
          uint64_t v112 = *(void *)(v99 + 16);
          uint64_t v113 = *(void *)(v99 + 24);
          unint64_t v103 = v110;
          sub_1D7860790(v111, v110);
          swift_retain();
          swift_retain();
          uint64_t v105 = sub_1D79DC0B8(v112, v113, v109, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1D79DC270);
          unint64_t v107 = v114;
          swift_release();
          uint64_t v115 = v111;
          swift_release();
LABEL_21:
          uint64_t v104 = v115;
          if (v107)
          {
            uint64_t v108 = v115;
          }
          else
          {
            uint64_t v139 = v115;
            unint64_t v140 = v103;
            sub_1D7860790(v115, v103);
            __swift_instantiateConcreteTypeFromMangledName(&qword_1EA846870);
            if (swift_dynamicCast())
            {
              sub_1D79A0894(v137, (uint64_t)&v144);
              __swift_project_boxed_opaque_existential_1(&v144, v147);
              if (sub_1D7A9D028())
              {
                __swift_project_boxed_opaque_existential_1(&v144, v147);
                sub_1D7A9D018();
                sub_1D78607E8(v115, v103);
                unint64_t v107 = *((void *)&v137[0] + 1);
                uint64_t v105 = *(void *)&v137[0];
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v144);
                goto LABEL_30;
              }
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v144);
            }
            else
            {
              uint64_t v138 = 0;
              memset(v137, 0, sizeof(v137));
              sub_1D7A2B974((uint64_t)v137);
            }
            uint64_t v105 = sub_1D79DC168(v115, v103);
            unint64_t v107 = v117;
            uint64_t v108 = v115;
          }
LABEL_29:
          sub_1D78607E8(v108, v103);
LABEL_30:
          uint64_t v118 = v132;
          uint64_t v144 = sub_1D7923300(v105, v107, &v141);
          sub_1D7A9C9E8();
          swift_bridgeObjectRelease();
          sub_1D78607E8(v104, v103);
          sub_1D78607E8(v104, v103);
          os_log_t v119 = v134;
          _os_log_impl(&dword_1D7853000, v134, (os_log_type_t)v124, "jws signed payload is %s", v118, 0xCu);
          uint64_t v120 = v123;
          swift_arrayDestroy();
          MEMORY[0x1D947D740](v120, -1, -1);
          MEMORY[0x1D947D740](v118, -1, -1);

          (*(void (**)(char *, uint64_t))(v130 + 8))(v129, v131);
          break;
        case 3uLL:
          *(void *)((char *)v137 + 6) = 0;
          *(void *)&v137[0] = 0;
          sub_1D79DC270(&v144);
          sub_1D78607E8(v99, v82);
          unint64_t v103 = v82;
          uint64_t v104 = v99;
          uint64_t v105 = v144;
          unint64_t v107 = v145;
          goto LABEL_30;
        default:
          uint64_t v144 = v99;
          LOWORD(v145) = v82;
          BYTE2(v145) = BYTE2(v82);
          BYTE3(v145) = BYTE3(v82);
          BYTE4(v145) = BYTE4(v82);
          BYTE5(v145) = BYTE5(v82);
          unint64_t v103 = v82;
          uint64_t v104 = v99;
          uint64_t v105 = sub_1D7A9C098();
          unint64_t v107 = v106;
          uint64_t v108 = v99;
          goto LABEL_29;
      }
    }
    else
    {
      sub_1D78607E8(v99, v82);
      sub_1D78607E8(v99, v82);

      (*(void (**)(char *, uint64_t))(v97 + 8))(v98, v95);
      unint64_t v103 = v82;
      uint64_t v104 = v99;
    }
    unint64_t v121 = v94[1];
    uint64_t v144 = *v94;
    unint64_t v145 = v121;
    swift_bridgeObjectRetain();
    sub_1D7A9C128();
    swift_bridgeObjectRetain();
    sub_1D7A9C128();
    swift_bridgeObjectRelease();
    uint64_t v122 = v126;
    sub_1D7A9C008();
    uint64_t v74 = sub_1D7A9BFD8();
    swift_bridgeObjectRelease();
    sub_1D78607E8(v125, v133);
    swift_release();
    sub_1D78607E8(v104, v103);
    (*(void (**)(char *, uint64_t))(v127 + 8))(v122, v128);
  }
  return v74;
}

uint64_t JWSSignedJSON.sign(_:)(uint64_t a1, uint64_t a2)
{
  v3[21] = a2;
  v3[22] = v2;
  v3[20] = a1;
  return MEMORY[0x1F4188298](sub_1D7A28880, 0, 0);
}

uint64_t sub_1D7A28880()
{
  uint64_t v46 = v0;
  uint64_t v2 = (uint8_t *)v0[21];
  uint64_t v1 = v0[22];
  unint64_t v3 = (void *)v0[20];
  uint64_t v4 = v3[3];
  uint64_t v5 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v4);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v5 + 80))(&v45, v4, v5);
  *(unsigned char *)(v1 + 72) = v45;
  uint64_t v6 = sub_1D7A277E8(v2);
  v0[23] = v6;
  v0[24] = v7;
  unint64_t v8 = v7;
  if (v7 >> 60 == 15) {
    goto LABEL_5;
  }
  uint64_t v9 = v6;
  uint64_t v10 = (void *)sub_1D7A9AFF8();
  id v11 = DigestSha256(v10);

  if (!v11)
  {
    sub_1D7871BDC(v9, v8);
LABEL_5:
    *(_WORD *)((char *)&v45 + 1) = 0;
    unint64_t v19 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000003DLL, 0x80000001D7AC9CB0, (__int16 *)((char *)&v45 + 1), 0, v19, 0xD000000000000057, 0x80000001D7AC98C0, v20, 0x293A5F286E676973, 0xE800000000000000, 216);
    swift_willThrow();
    uint64_t v21 = (uint64_t (*)(void))v0[1];
    goto LABEL_6;
  }
  uint64_t v43 = (void *)v0[20];
  uint64_t v12 = sub_1D7A9B028();
  unint64_t v14 = v13;

  v0[25] = v12;
  v0[26] = v14;
  uint64_t v16 = v3[3];
  uint64_t v15 = v3[4];
  __swift_project_boxed_opaque_existential_1(v43, v16);
  uint64_t v44 = v12;
  uint64_t v17 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v15 + 32))(v12, v14, v16, v15);
  v0[27] = v17;
  v0[28] = v18;
  uint64_t v40 = v0[22];
  uint64_t v41 = (void *)v0[20];
  uint64_t v38 = v17;
  unint64_t v39 = v18;
  v0[2] = sub_1D7A9B008();
  v0[3] = v23;
  v0[4] = 43;
  v0[5] = 0xE100000000000000;
  v0[6] = 45;
  v0[7] = 0xE100000000000000;
  sub_1D791118C();
  uint64_t v24 = sub_1D7A9CA58();
  uint64_t v26 = v25;
  swift_bridgeObjectRelease();
  v0[8] = v24;
  v0[9] = v26;
  v0[10] = 47;
  v0[11] = 0xE100000000000000;
  v0[12] = 95;
  v0[13] = 0xE100000000000000;
  uint64_t v27 = sub_1D7A9CA58();
  uint64_t v29 = v28;
  swift_bridgeObjectRelease();
  v0[14] = v27;
  v0[15] = v29;
  v0[16] = 61;
  v0[17] = 0xE100000000000000;
  v0[18] = 0;
  v0[19] = 0xE000000000000000;
  uint64_t v30 = sub_1D7A9CA58();
  uint64_t v32 = v31;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v40 + 32) = v30;
  *(void *)(v40 + 40) = v32;
  uint64_t v33 = v3[3];
  uint64_t v34 = v3[4];
  __swift_project_boxed_opaque_existential_1(v41, v33);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v34 + 64))(v33, v34))
  {
    uint64_t v36 = v3[3];
    uint64_t v35 = v3[4];
    __swift_project_boxed_opaque_existential_1((void *)v0[20], v36);
    uint64_t v42 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v35 + 72) + **(int **)(v35 + 72));
    uint64_t v37 = (void *)swift_task_alloc();
    v0[29] = v37;
    *uint64_t v37 = v0;
    v37[1] = sub_1D7A28E60;
    return v42(v36, v35);
  }
  sub_1D7871BDC(v9, v8);
  sub_1D78607E8(v38, v39);
  sub_1D78607E8(v44, v14);
  uint64_t v21 = (uint64_t (*)(void))v0[1];
LABEL_6:
  return v21();
}

uint64_t sub_1D7A28E60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[30] = a1;
  v4[31] = a2;
  v4[32] = v2;
  swift_task_dealloc();
  if (v2) {
    uint64_t v5 = sub_1D7A290A4;
  }
  else {
    uint64_t v5 = sub_1D7A28F78;
  }
  return MEMORY[0x1F4188298](v5, 0, 0);
}

uint64_t sub_1D7A28F78()
{
  unint64_t v1 = v0[31];
  if (v1 >> 60 == 15)
  {
    uint64_t v2 = v0[27];
    unint64_t v3 = v0[28];
    uint64_t v5 = v0[25];
    unint64_t v4 = v0[26];
    sub_1D7871BDC(v0[23], v0[24]);
    sub_1D78607E8(v2, v3);
    sub_1D78607E8(v5, v4);
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v8 = v0[30];
    uint64_t v10 = v0[27];
    unint64_t v9 = v0[28];
    uint64_t v11 = v0[25];
    unint64_t v18 = v0[26];
    uint64_t v12 = v0[23];
    unint64_t v13 = v0[24];
    uint64_t v6 = sub_1D7A9B008();
    uint64_t v7 = v14;
    sub_1D7871BDC(v12, v13);
    sub_1D78607E8(v10, v9);
    sub_1D78607E8(v11, v18);
    sub_1D7871BDC(v8, v1);
  }
  uint64_t v15 = v0[22];
  swift_bridgeObjectRelease();
  *(void *)(v15 + 56) = v6;
  *(void *)(v15 + 64) = v7;
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t sub_1D7A290A4()
{
  uint64_t v12 = v0;
  sub_1D78607E8(v0[27], v0[28]);
  unint64_t v1 = (void *)v0[32];
  uint64_t v3 = v0[25];
  unint64_t v2 = v0[26];
  uint64_t v4 = v0[23];
  unint64_t v5 = v0[24];
  v11[0] = 0;
  id v6 = v1;
  unint64_t v7 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
  sub_1D7860544();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v1, 0xD00000000000002FLL, 0x80000001D7AC9CF0, v11, 0, v7, 0xD000000000000057, 0x80000001D7AC98C0, v8, 0x293A5F286E676973, 0xE800000000000000, 226);
  swift_willThrow();

  sub_1D78607E8(v3, v2);
  sub_1D7871BDC(v4, v5);
  unint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

void JWSSignedJSON.encode(to:)(void *a1, void *a2)
{
  uint64_t v93 = a1;
  uint64_t v3 = v2;
  uint64_t v87 = sub_1D7A9CD48();
  uint64_t v84 = *(void *)(v87 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v87, v5, v6, v7, v8, v9, v10, v11);
  uint64_t v83 = (char *)&v83 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12, v14, v15, v16, v17, v18, v19, v20);
  uint64_t v85 = (char *)&v83 - v21;
  uint64_t v22 = a2[2];
  uint64_t v23 = a2[4];
  uint64_t v91 = a2[3];
  uint64_t v92 = v22;
  uint64_t v90 = v23;
  uint64_t v24 = type metadata accessor for JWSSignedJSON.CodingKeys();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v89 = v24;
  uint64_t v96 = sub_1D7A9D238();
  uint64_t v86 = *(void *)(v96 - 8);
  uint64_t v32 = MEMORY[0x1F4188790](v96, v25, v26, v27, v28, v29, v30, v31);
  uint64_t v95 = (char *)&v83 - v33;
  uint64_t v34 = *(a2 - 1);
  uint64_t v42 = MEMORY[0x1F4188790](v32, v35, v36, v37, v38, v39, v40, v41);
  uint64_t v44 = (char *)&v83 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v42, v45, v46, v47, v48, v49, v50, v51);
  uint64_t v53 = (char *)&v83 - v52;
  unint64_t v54 = *(void *)(v3 + 24);
  if ((v54 & 0x2000000000000000) != 0) {
    uint64_t v55 = HIBYTE(v54) & 0xF;
  }
  else {
    uint64_t v55 = *(void *)(v3 + 16) & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v56 = *(void (**)(char *, uint64_t, void *))(v34 + 16);
  uint64_t v57 = v3;
  v56((char *)&v83 - v52, v3, a2);
  if (v55)
  {
    unint64_t v58 = *((void *)v53 + 1);
    uint64_t v59 = *(void *)v53 & 0xFFFFFFFFFFFFLL;
    if ((v58 & 0x2000000000000000) != 0) {
      uint64_t v59 = HIBYTE(v58) & 0xF;
    }
    BOOL v60 = v59 == 0;
  }
  else
  {
    BOOL v60 = 1;
  }
  unint64_t v61 = *(void (**)(char *, void *))(v34 + 8);
  v61(v53, a2);
  uint64_t v62 = v57;
  v56(v44, v57, a2);
  if (v60)
  {
    v61(v44, a2);
LABEL_19:
    LOWORD(v97) = 105;
    unint64_t v78 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000002DLL, 0x80000001D7AC9D80, (__int16 *)&v97, 0, v78, 0xD000000000000057, 0x80000001D7AC98C0, v79, 0x742865646F636E65, 0xEB00000000293A6FLL, 233);
    swift_willThrow();
    return;
  }
  unint64_t v63 = *((void *)v44 + 5);
  if ((v63 & 0x2000000000000000) != 0) {
    uint64_t v64 = HIBYTE(v63) & 0xF;
  }
  else {
    uint64_t v64 = *((void *)v44 + 4) & 0xFFFFFFFFFFFFLL;
  }
  v61(v44, a2);
  if (!v64) {
    goto LABEL_19;
  }
  __swift_project_boxed_opaque_existential_1(v93, v93[3]);
  uint64_t v65 = v95;
  sub_1D7A9D6E8();
  uint64_t v66 = *(void *)(v62 + 64);
  long long v97 = *(_OWORD *)(v62 + 48);
  uint64_t v98 = v66;
  LOBYTE(v99) = 0;
  type metadata accessor for JWSSignedJSON.DIPJWSUnprotectedHeader();
  swift_getWitnessTable();
  uint64_t v67 = v96;
  uint64_t v68 = v94;
  sub_1D7A9D228();
  if (v68)
  {
    (*(void (**)(char *, uint64_t))(v86 + 8))(v65, v67);
    uint64_t v69 = v87;
    unint64_t v70 = v85;
    *(void *)&long long v97 = v68;
    id v71 = v68;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF9740);
    if (swift_dynamicCast())
    {

      uint64_t v73 = v83;
      uint64_t v72 = v84;
      (*(void (**)(char *, char *, uint64_t))(v84 + 32))(v83, v70, v69);
      uint64_t v74 = (void *)swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v72 + 16))(v75, v73, v69);
      __int16 v99 = 118;
      unint64_t v76 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v74, 0xD000000000000012, 0x80000001D7AC9D60, &v99, 0, v76, 0xD000000000000057, 0x80000001D7AC98C0, v77, 0x742865646F636E65, 0xEB00000000293A6FLL, 243);
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v72 + 8))(v73, v69);
    }
    else
    {

      LOWORD(v97) = 0;
      id v80 = v68;
      unint64_t v81 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v68, 0xD000000000000037, 0x80000001D7AC9D20, (__int16 *)&v97, 0, v81, 0xD000000000000057, 0x80000001D7AC98C0, v82, 0x742865646F636E65, 0xEB00000000293A6FLL, 246);
      swift_willThrow();
    }
  }
  else
  {
    LOBYTE(v97) = 1;
    sub_1D7A9D1D8();
    LOBYTE(v97) = 2;
    sub_1D7A9D1D8();
    LOBYTE(v97) = 3;
    sub_1D7A9D1D8();
    (*(void (**)(char *, uint64_t))(v86 + 8))(v65, v67);
  }
}

void sub_1D7A29994(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unsigned char *a9@<X8>)
{
  uint64_t v67 = a9;
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v72 = v9;
  uint64_t v73 = v13;
  uint64_t v14 = MEMORY[0x1F4188790](a1, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v69 = (char *)v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14, v17, v18, v19, v20, v21, v22, v23);
  uint64_t v25 = (char *)v64 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = sub_1D7A9B5F8();
  uint64_t v68 = *(void *)(v70 - 8);
  uint64_t v33 = MEMORY[0x1F4188790](v70, v26, v27, v28, v29, v30, v31, v32);
  id v71 = (char *)v64 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EBDF7958 != -1) {
    uint64_t v33 = swift_once();
  }
  MEMORY[0x1F4188790](v33, v34, v35, v36, v37, v38, v39, v40);
  unint64_t v43 = (unint64_t)&v42[4];
  uint64_t v44 = v42 + 6;
  os_unfair_lock_lock(v42 + 6);
  sub_1D7A2B9D4(v43, v76);
  if (v10)
  {
    os_unfair_lock_unlock(v44);
    __break(1u);
  }
  else
  {
    os_unfair_lock_unlock(v44);
    if (v76[0] == 21)
    {
      uint64_t v45 = v16;
      if (qword_1EBDF9DC8 != -1) {
        swift_once();
      }
      uint64_t v46 = v70;
      uint64_t v47 = __swift_project_value_buffer(v70, (uint64_t)qword_1EBDFBE70);
      swift_beginAccess();
      uint64_t v48 = v68;
      uint64_t v49 = v71;
      (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v71, v47, v46);
      (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v25, v72, a1);
      uint64_t v50 = sub_1D7A9B5D8();
      os_log_type_t v51 = sub_1D7A9C748();
      LODWORD(v67) = v51;
      BOOL v52 = os_log_type_enabled(v50, v51);
      uint64_t v53 = v73;
      if (v52)
      {
        unint64_t v54 = (uint8_t *)swift_slowAlloc();
        uint64_t v66 = swift_slowAlloc();
        uint64_t v74 = v66;
        *(_DWORD *)unint64_t v54 = 136446210;
        v64[1] = v54 + 4;
        uint64_t v65 = v54;
        uint64_t v55 = v69;
        (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v69, &v25[*(int *)(a1 + 60)], v12);
        swift_getDynamicType();
        (*(void (**)(char *, uint64_t))(v73 + 8))(v55, v12);
        uint64_t v56 = sub_1D7A9D758();
        uint64_t v77 = sub_1D7923300(v56, v57, &v74);
        sub_1D7A9C9E8();
        uint64_t v53 = v73;
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v45 + 8))(v25, a1);
        unint64_t v58 = v65;
        _os_log_impl(&dword_1D7853000, v50, (os_log_type_t)v67, "No cert type registered for JWSSignedJSON %{public}s", v65, 0xCu);
        uint64_t v59 = v66;
        swift_arrayDestroy();
        MEMORY[0x1D947D740](v59, -1, -1);
        MEMORY[0x1D947D740](v58, -1, -1);

        (*(void (**)(char *, uint64_t))(v48 + 8))(v71, v70);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v45 + 8))(v25, a1);

        (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v46);
        uint64_t v55 = v69;
      }
      uint64_t v74 = 0;
      unint64_t v75 = 0xE000000000000000;
      sub_1D7A9CC48();
      sub_1D7A9C128();
      (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v55, v72 + *(int *)(a1 + 60), v12);
      swift_getDynamicType();
      (*(void (**)(char *, uint64_t))(v53 + 8))(v55, v12);
      sub_1D7A9D758();
      sub_1D7A9C128();
      swift_bridgeObjectRelease();
      uint64_t v60 = v74;
      uint64_t v61 = v75;
      LOWORD(v74) = 105;
      unint64_t v62 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, v60, v61, (__int16 *)&v74, 0, v62, 0xD000000000000057, 0x80000001D7AC98C0, v63, 0xD000000000000015, 0x80000001D7AC9E30, 316);
      swift_willThrow();
    }
    else
    {
      *uint64_t v67 = v76[0];
    }
  }
}

uint64_t sub_1D7A29FC4@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return JWSSignedJSON.init(from:)(a1, a2[2], a2[3], a2[4], a3);
}

void sub_1D7A29FE8(void *a1, void *a2)
{
}

uint64_t type metadata accessor for JWSSignedJSON.DIPJWSUnprotectedHeader()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for JWSSignedJSON.DIPJWSProtectedHeader()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1D7A2A030()
{
  return 8;
}

uint64_t type metadata accessor for JWSSignedJSON.JWSCritical()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1D7A2A050()
{
  return swift_getWitnessTable();
}

uint64_t sub_1D7A2A06C()
{
  return swift_getWitnessTable();
}

uint64_t sub_1D7A2A088()
{
  return swift_getWitnessTable();
}

uint64_t sub_1D7A2A0A4()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1D7A2A158(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 152) & (unint64_t)~v6) + *(void *)(v5 + 64) > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v10 = a2[1];
    *a1 = *a2;
    a1[1] = v10;
    uint64_t v11 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v12 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v11 = *v12;
    v11[1] = v12[1];
    uint64_t v13 = (void *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v14 = (void *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
    void *v13 = *v14;
    v13[1] = v14[1];
    uint64_t v15 = (void *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v16 = (void *)(((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v15 = *v16;
    v15[1] = v16[1];
    v15[2] = v16[2];
    unint64_t v17 = ((unint64_t)v15 + 31) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v18 = ((unint64_t)v16 + 31) & 0xFFFFFFFFFFFFFFF8;
    *(unsigned char *)unint64_t v17 = *(unsigned char *)v18;
    *(void *)(v17 + 8) = *(void *)(v18 + 8);
    *(void *)(v17 + 16) = *(void *)(v18 + 16);
    *(void *)(v17 + 24) = *(void *)(v18 + 24);
    *(void *)(v17 + 32) = *(void *)(v18 + 32);
    *(void *)(v17 + 40) = *(void *)(v18 + 40);
    *(void *)(v17 + 48) = *(void *)(v18 + 48);
    *(void *)(v17 + 56) = *(void *)(v18 + 56);
    *(void *)(v17 + 64) = *(void *)(v18 + 64);
    *(void *)(v17 + 72) = *(void *)(v18 + 72);
    uint64_t v22 = (v18 + v6 + 80) & ~v6;
    uint64_t v23 = (v17 + v6 + 80) & ~v6;
    uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    uint64_t v21 = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v19(v23, v22, v21);
  }
  return a1;
}

uint64_t sub_1D7A2A394(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (((((((((a1 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
      + *(unsigned __int8 *)(v4 + 80)
      + 80) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  return v5(v6);
}

void *sub_1D7A2A470(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v6 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v5 = *v6;
  v5[1] = v6[1];
  uint64_t v7 = (void *)(((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)(((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v7 = *v8;
  v7[1] = v8[1];
  uint64_t v9 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = (void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v9 = *v10;
  v9[1] = v10[1];
  uint64_t v9[2] = v10[2];
  unint64_t v11 = ((unint64_t)v9 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = ((unint64_t)v10 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v11 = *(unsigned char *)v12;
  *(void *)(v11 + 8) = *(void *)(v12 + 8);
  *(void *)(v11 + 16) = *(void *)(v12 + 16);
  *(void *)(v11 + 24) = *(void *)(v12 + 24);
  *(void *)(v11 + 32) = *(void *)(v12 + 32);
  *(void *)(v11 + 40) = *(void *)(v12 + 40);
  *(void *)(v11 + 48) = *(void *)(v12 + 48);
  *(void *)(v11 + 56) = *(void *)(v12 + 56);
  *(void *)(v11 + 64) = *(void *)(v12 + 64);
  *(void *)(v11 + 72) = *(void *)(v12 + 72);
  uint64_t v13 = *(void *)(a3 + 16);
  unint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16);
  uint64_t v14 = *(unsigned __int8 *)(*(void *)(v13 - 8) + 80);
  uint64_t v17 = (v14 + 80 + v11) & ~v14;
  uint64_t v16 = (v14 + 80 + v12) & ~v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v18(v17, v16, v13);
  return a1;
}

void *sub_1D7A2A63C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v6 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v6 = *v7;
  v6[1] = v7[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v8 = (void *)(((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = (void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v11 = (void *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF8);
  void *v10 = *v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10[1] = v11[1];
  v10[2] = v11[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v12 = ((unint64_t)v10 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = ((unint64_t)v11 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v12 = *(unsigned char *)v13;
  *(void *)(v12 + 8) = *(void *)(v13 + 8);
  *(void *)(v12 + 16) = *(void *)(v13 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v12 + 24) = *(void *)(v13 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v12 + 32) = *(void *)(v13 + 32);
  *(void *)(v12 + 40) = *(void *)(v13 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v12 + 48) = *(void *)(v13 + 48);
  *(void *)(v12 + 56) = *(void *)(v13 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v12 + 64) = *(void *)(v13 + 64);
  *(void *)(v12 + 72) = *(void *)(v13 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v14 + 24))((*(unsigned __int8 *)(v14 + 80) + 80 + v12) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80), (*(unsigned __int8 *)(v14 + 80) + 80 + v13) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  return a1;
}

_OWORD *sub_1D7A2A834(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (_OWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = (_OWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v4 = *v5;
  unint64_t v6 = (_OWORD *)(((unint64_t)v4 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = (_OWORD *)(((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v6 = *v7;
  unint64_t v8 = ((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = ((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  long long v10 = *(_OWORD *)v9;
  *(void *)(v8 + 16) = *(void *)(v9 + 16);
  *(_OWORD *)unint64_t v8 = v10;
  unint64_t v11 = (_OWORD *)((v8 + 31) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v12 = (_OWORD *)((v9 + 31) & 0xFFFFFFFFFFFFFFF8);
  long long v13 = v12[4];
  long long v15 = v12[1];
  long long v14 = v12[2];
  v11[3] = v12[3];
  v11[4] = v13;
  v11[1] = v15;
  v11[2] = v14;
  *unint64_t v11 = *v12;
  uint64_t v16 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v16 + 32))(((unint64_t)v11 + *(unsigned __int8 *)(v16 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), ((unint64_t)v12 + *(unsigned __int8 *)(v16 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  return a1;
}

void *sub_1D7A2A908(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRelease();
  unint64_t v9 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  long long v10 = (void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v9 = *v10;
  v9[1] = v10[1];
  swift_bridgeObjectRelease();
  unint64_t v11 = (void *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v12 = (void *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v11 = *v12;
  swift_bridgeObjectRelease();
  v11[1] = v12[1];
  v11[2] = v12[2];
  swift_bridgeObjectRelease();
  unint64_t v13 = ((unint64_t)v11 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = ((unint64_t)v12 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v13 = *(unsigned char *)v14;
  *(void *)(v13 + 8) = *(void *)(v14 + 8);
  *(void *)(v13 + 16) = *(void *)(v14 + 16);
  swift_bridgeObjectRelease();
  *(void *)(v13 + 24) = *(void *)(v14 + 24);
  swift_bridgeObjectRelease();
  *(void *)(v13 + 32) = *(void *)(v14 + 32);
  *(void *)(v13 + 40) = *(void *)(v14 + 40);
  swift_bridgeObjectRelease();
  *(void *)(v13 + 48) = *(void *)(v14 + 48);
  *(void *)(v13 + 56) = *(void *)(v14 + 56);
  swift_bridgeObjectRelease();
  *(void *)(v13 + 64) = *(void *)(v14 + 64);
  *(void *)(v13 + 72) = *(void *)(v14 + 72);
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v15 + 40))((*(unsigned __int8 *)(v15 + 80) + 80 + v13) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80), (*(unsigned __int8 *)(v15 + 80) + 80 + v14) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  return a1;
}

uint64_t sub_1D7A2AAA0(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v9 = a2 - v8;
  if (a2 <= v8) {
    goto LABEL_23;
  }
  uint64_t v10 = ((v6 + 152) & ~v6) + v7;
  char v11 = 8 * (((v6 - 104) & ~(_BYTE)v6) + v7);
  if (v10 <= 3)
  {
    unsigned int v14 = ((v9 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v14))
    {
      int v12 = *(_DWORD *)((char *)a1 + v10);
      if (!v12) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v14 > 0xFF)
    {
      int v12 = *(unsigned __int16 *)((char *)a1 + v10);
      if (!*(unsigned __int16 *)((char *)a1 + v10)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v14 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((((((((((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8)
      }
                                                                            + 23) & 0xFFFFFFFFFFFFFFF8)
                                                                          + 23) & 0xFFFFFFFFFFFFFFF8)
                                                                        + 31) & 0xFFFFFFFFFFFFFFF8)
                                                                      + v6
                                                                      + 80) & ~v6);
      unint64_t v16 = *((void *)a1 + 1);
      if (v16 >= 0xFFFFFFFF) {
        LODWORD(v16) = -1;
      }
      return (v16 + 1);
    }
  }
  int v12 = *((unsigned __int8 *)a1 + v10);
  if (!*((unsigned char *)a1 + v10)) {
    goto LABEL_23;
  }
LABEL_15:
  int v15 = (v12 - 1) << v11;
  if (v10 > 3) {
    int v15 = 0;
  }
  if (v10)
  {
    if (v10 > 3) {
      LODWORD(v10) = 4;
    }
    switch((int)v10)
    {
      case 2:
        LODWORD(v10) = *a1;
        break;
      case 3:
        LODWORD(v10) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v10) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v10) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v8 + (v10 | v15) + 1;
}

void sub_1D7A2AC60(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v7 + 84);
  }
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  size_t v11 = ((v10 + 152) & ~v10) + *(void *)(v6 + 64);
  BOOL v12 = a3 >= v9;
  unsigned int v13 = a3 - v9;
  if (v13 != 0 && v12)
  {
    if (v11 <= 3)
    {
      unsigned int v17 = ((v13 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
      if (HIWORD(v17))
      {
        int v14 = 4;
      }
      else if (v17 >= 0x100)
      {
        int v14 = 2;
      }
      else
      {
        int v14 = v17 > 1;
      }
    }
    else
    {
      int v14 = 1;
    }
  }
  else
  {
    int v14 = 0;
  }
  if (v9 < a2)
  {
    unsigned int v15 = ~v9 + a2;
    if (v11 < 4)
    {
      int v16 = (v15 >> (8 * (((v10 - 104) & ~(_BYTE)v10) + *(unsigned char *)(v6 + 64)))) + 1;
      if (v11)
      {
        int v18 = v15 & ~(-1 << (8 * (((v10 - 104) & ~(_BYTE)v10) + *(unsigned char *)(v6 + 64))));
        bzero(a1, v11);
        if (v11 == 3)
        {
          *(_WORD *)a1 = v18;
          a1[2] = BYTE2(v18);
        }
        else if (v11 == 2)
        {
          *(_WORD *)a1 = v18;
        }
        else
        {
          *a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v15;
      int v16 = 1;
    }
    switch(v14)
    {
      case 1:
        a1[v11] = v16;
        return;
      case 2:
        *(_WORD *)&a1[v11] = v16;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v11] = v16;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v11] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v11] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x1D7A2AEE0);
    case 4:
      *(_DWORD *)&a1[v11] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v8 & 0x80000000) != 0)
        {
          unint64_t v19 = (((((((((unint64_t)(a1 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
                 + 31) & 0xFFFFFFFFFFFFFFF8)
               + v10
               + 80) & ~v10;
          uint64_t v20 = *(void (**)(unint64_t))(v7 + 56);
          v20(v19);
        }
        else if ((a2 & 0x80000000) != 0)
        {
          *(void *)a1 = a2 ^ 0x80000000;
          *((void *)a1 + 1) = 0;
        }
        else
        {
          *((void *)a1 + 1) = a2 - 1;
        }
      }
      return;
  }
}

unsigned char *sub_1D7A2AF0C(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1D7A2AFA8);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

unsigned char *sub_1D7A2AFD0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D7A2B09CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t sub_1D7A2B0C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 56);
}

uint64_t sub_1D7A2B0CC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D7A2B120(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1D7A2B1A8(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1D7A2B278(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1D7A2B2F8(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 80)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t sub_1D7A2B354(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 80) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

uint64_t sub_1D7A2B3C0()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *sub_1D7A2B3FC(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_1D7A2B43C(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *sub_1D7A2B4A4(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1D7A2B4EC(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t sub_1D7A2B548(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

unsigned char *sub_1D7A2B59C(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D7A2B668);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

unsigned char *sub_1D7A2B690(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D7A2B75CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_1D7A2B784(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D7A2B850);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

uint64_t sub_1D7A2B878()
{
  return swift_getWitnessTable();
}

uint64_t sub_1D7A2B894()
{
  return swift_getWitnessTable();
}

uint64_t sub_1D7A2B8B0()
{
  return swift_getWitnessTable();
}

uint64_t sub_1D7A2B8CC()
{
  return swift_getWitnessTable();
}

uint64_t sub_1D7A2B8E8()
{
  return swift_getWitnessTable();
}

uint64_t sub_1D7A2B904()
{
  return swift_getWitnessTable();
}

uint64_t sub_1D7A2B920()
{
  return swift_getWitnessTable();
}

uint64_t sub_1D7A2B93C()
{
  return swift_getWitnessTable();
}

uint64_t sub_1D7A2B958()
{
  return swift_getWitnessTable();
}

uint64_t sub_1D7A2B974(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA846878);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1D7A2B9D4@<X0>(unint64_t a1@<X0>, char *a2@<X8>)
{
  return sub_1D79B2E18(a1, *(void *)(v2 + 16), a2);
}

void static VICALMilestone.loadDocument.getter(void *a1@<X8>)
{
  *a1 = 0x3937346566616562;
  a1[1] = 0xE800000000000000;
  a1[2] = 0xD000000000000013;
  a1[3] = 0x80000001D7AC9E50;
}

void static VICALMilestone.cdnReturnedDocument.getter(void *a1@<X8>)
{
  *a1 = 0x6337336634633661;
  a1[1] = 0xE800000000000000;
  a1[2] = 0xD000000000000020;
  a1[3] = 0x80000001D7AC9E70;
}

void static VICALMilestone.cacheReturnedDocument.getter(void *a1@<X8>)
{
  *a1 = 0x6262623531663065;
  a1[1] = 0xE800000000000000;
  a1[2] = 0xD000000000000022;
  a1[3] = 0x80000001D7AC9EA0;
}

void static VICALMilestone.documentSignerCertificateTrusted.getter(void *a1@<X8>)
{
  *a1 = 0x3232633134633263;
  a1[1] = 0xE800000000000000;
  a1[2] = 0xD000000000000029;
  a1[3] = 0x80000001D7AC9ED0;
}

void static VICALMilestone.documentSignerCertificateUntrusted.getter(void *a1@<X8>)
{
  *a1 = 0x6233396138383764;
  a1[1] = 0xE800000000000000;
  a1[2] = 0xD000000000000030;
  a1[3] = 0x80000001D7AC9F00;
}

void static VICALMilestone.documentSignerCertificateRevoked.getter(void *a1@<X8>)
{
  *a1 = 0x3962326133626130;
  a1[1] = 0xE800000000000000;
  a1[2] = 0xD000000000000032;
  a1[3] = 0x80000001D7AC9F40;
}

void static VICALMilestone.documentSignerCertificateExpired.getter(void *a1@<X8>)
{
  *a1 = 0x6630346536643161;
  a1[1] = 0xE800000000000000;
  a1[2] = 0xD00000000000002CLL;
  a1[3] = 0x80000001D7AC9F80;
}

void static VICALMilestone.documentSignatureValid.getter(void *a1@<X8>)
{
  *a1 = 0x3865616337303564;
  a1[1] = 0xE800000000000000;
  a1[2] = 0xD000000000000021;
  a1[3] = 0x80000001D7AC9FB0;
}

void static VICALMilestone.storeDocument.getter(void *a1@<X8>)
{
  *a1 = 0x3531346539373062;
  a1[1] = 0xE800000000000000;
  a1[2] = 0xD00000000000001FLL;
  a1[3] = 0x80000001D7AC9FE0;
}

void static VICALMilestone.missingDocument.getter(void *a1@<X8>)
{
  *a1 = 0x3230623063303464;
  a1[1] = 0xE800000000000000;
  a1[2] = 0xD000000000000021;
  a1[3] = 0x80000001D7ACA000;
}

ValueMetadata *type metadata accessor for VICALMilestone()
{
  return &type metadata for VICALMilestone;
}

unint64_t sub_1D7A2BC34()
{
  unint64_t result = qword_1EA847108;
  if (!qword_1EA847108)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847108);
  }
  return result;
}

void sub_1D7A2BC88(uint64_t a1@<X8>)
{
  int64_t v3 = v1[2];
  unint64_t v4 = v1[3];
  if (v3 == v4 >> 1)
  {
    uint64_t v5 = 0;
    unsigned int v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    long long v9 = 0uLL;
    long long v10 = 0uLL;
    long long v11 = 0uLL;
    long long v12 = 0uLL;
LABEL_9:
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = v8;
    *(_OWORD *)(a1 + 32) = v9;
    *(_OWORD *)(a1 + 48) = v10;
    *(_OWORD *)(a1 + 64) = v11;
    *(_OWORD *)(a1 + 80) = v12;
    return;
  }
  if (v3 >= (uint64_t)(v4 >> 1))
  {
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v13 = *v1;
  uint64_t v14 = v1[1];
  unsigned int v15 = (long long *)(v14 + 96 * v3);
  long long v16 = v15[1];
  long long v44 = *v15;
  long long v45 = v16;
  long long v17 = v15[2];
  long long v18 = v15[3];
  long long v19 = v15[5];
  v48[0] = v15[4];
  v48[1] = v19;
  long long v46 = v17;
  long long v47 = v18;
  uint64_t v20 = v3 + 1;
  v1[2] = v3 + 1;
  if (BYTE8(v45))
  {
    sub_1D7A2FD24(v13, v14, v20, v4, (uint64_t)&v44);
    uint64_t v25 = v24;
    if (!__OFSUB__(v23 >> 1, v22))
    {
      uint64_t v26 = v21;
      uint64_t v27 = v22;
      unint64_t v28 = v23;
      *unint64_t v1 = sub_1D7A2C2B0((v23 >> 1) - v22, v13, v14, v20, v4);
      v1[1] = v29;
      v1[2] = v30;
      v1[3] = v31;
      uint64_t v5 = v44;
      unsigned int v6 = BYTE8(v44);
      sub_1D7A2F630(v25, v26, v27, v28, v45, &v40);
      uint64_t v7 = v40;
      uint64_t v8 = v41;
      *((void *)&v32 + 1) = *((void *)&v46 + 1);
      long long v37 = v42;
      long long v39 = v46;
      *(void *)&long long v32 = v43;
      long long v33 = v32;
      long long v35 = v47;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      long long v10 = v33;
      long long v12 = v35;
      long long v9 = v37;
      long long v11 = v39;
      goto LABEL_9;
    }
    goto LABEL_11;
  }
  sub_1D7871D78((uint64_t)v48, (uint64_t)v49, &qword_1EA847128);
  sub_1D7871D78((uint64_t)v49, (uint64_t)&v40, &qword_1EA847128);
  uint64_t v7 = v40;
  if (v40)
  {
    uint64_t v8 = v41;
    uint64_t v5 = v44;
    unsigned int v6 = BYTE8(v44);
    long long v36 = v42;
    long long v38 = v46;
    long long v34 = v47;
    sub_1D7A2FCF8((uint64_t)v49);
    swift_unknownObjectRetain();
    long long v12 = v34;
    long long v9 = v36;
    long long v11 = v38;
    long long v10 = xmmword_1D7AA9710;
    goto LABEL_9;
  }
LABEL_12:
  __break(1u);
}

uint64_t sub_1D7A2BE8C()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3] >> 1;
  if (v1 == v2)
  {
    int v3 = 0;
  }
  else
  {
    if (v1 >= v2)
    {
      __break(1u);
      return result;
    }
    int v3 = *(unsigned __int8 *)(v0[1] + v1);
    v0[2] = v1 + 1;
  }
  return v3 | ((v1 == v2) << 8);
}

uint64_t sub_1D7A2BED4@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, uint64_t a4@<X8>)
{
  long long v11 = *a1;
  long long v12 = a1[1];
  uint64_t v13 = *((void *)a1 + 4);
  sub_1D7A2BC88((uint64_t)v14);
  sub_1D7871D78((uint64_t)v14, (uint64_t)v23, &qword_1EA842028);
  if (!(void)v24)
  {
    swift_unknownObjectRetain();
    uint64_t result = swift_unknownObjectRelease();
LABEL_10:
    *(_OWORD *)a4 = xmmword_1D7AA9710;
    *(void *)(a4 + 16) = 0;
    return result;
  }
  v27[1] = v23[2];
  v27[2] = v23[3];
  v27[3] = v24;
  v27[4] = v25;
  long long v26 = v23[0];
  v27[0] = v23[1];
  if (*(void *)&v23[0] != a2 || BYTE8(v26) != a3)
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    uint64_t result = (uint64_t)sub_1D785DAD8(v14);
    goto LABEL_10;
  }
  *a1 = v11;
  a1[1] = v12;
  *((void *)a1 + 4) = v13;
  sub_1D785D98C((uint64_t)v27, (uint64_t)v28);
  uint64_t result = sub_1D785D98C((uint64_t)v28, (uint64_t)&v29);
  if ((v30 & 1) == 0)
  {
    sub_1D7A2BC88((uint64_t)v15);
    sub_1D7871D78((uint64_t)v15, (uint64_t)v19, &qword_1EA842028);
    if ((void)v20)
    {
      void v22[2] = v19[2];
      v22[3] = v19[3];
      v22[4] = v20;
      v22[5] = v21;
      v22[0] = v19[0];
      v22[1] = v19[1];
      sub_1D7A2BC88((uint64_t)v16);
      sub_1D785DA98((uint64_t)v28, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRetain);
      sub_1D785DA98((uint64_t)v28, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRetain);
      swift_unknownObjectRetain();
      sub_1D785DAD8(v16);
      sub_1D7871D78((uint64_t)v16, (uint64_t)v17, &qword_1EA842028);
      if (!v18)
      {
        sub_1D785C4C4(v22, a4);
        sub_1D785DA98((uint64_t)v28, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
        sub_1D785DAD8(v14);
        swift_unknownObjectRelease();
        return swift_unknownObjectRelease();
      }
      sub_1D785DAD8(v15);
    }
    else
    {
      sub_1D785DA98((uint64_t)v28, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRetain);
      sub_1D785DA98((uint64_t)v28, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRetain);
      swift_unknownObjectRetain();
    }
    sub_1D7A9CC48();
    sub_1D7A9C128();
    sub_1D7A9C128();
    sub_1D7A9C128();
    sub_1D78F7D1C();
    sub_1D7A9C128();
    swift_bridgeObjectRelease();
    type metadata accessor for ASN1Error.Backing();
    uint64_t v9 = swift_allocObject();
    *(unsigned char *)(v9 + 16) = 1;
    *(void *)(v9 + 24) = 0;
    *(void *)(v9 + 32) = 0xE000000000000000;
    *(void *)(v9 + 40) = 0xD000000000000018;
    *(void *)(v9 + 48) = 0x80000001D7AC0E80;
    *(void *)(v9 + 56) = 220;
    sub_1D785D8F0();
    swift_allocError();
    uint64_t *v10 = v9;
    swift_willThrow();
    sub_1D785DA98((uint64_t)v28, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
    sub_1D785DAD8(v14);
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_1D7A2C2B0(uint64_t result, uint64_t a2, uint64_t a3, int64_t a4, unint64_t a5)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  int64_t v5 = a5 >> 1;
  uint64_t v6 = (a5 >> 1) - a4;
  if (__OFSUB__(a5 >> 1, a4))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (result)
  {
    if ((v6 & 0x8000000000000000) == 0)
    {
      int64_t v7 = a5 >> 1;
      if (v6 < result)
      {
LABEL_8:
        if (v7 >= a4)
        {
          if (v5 >= a4) {
            return a2;
          }
          goto LABEL_15;
        }
LABEL_14:
        __break(1u);
LABEL_15:
        __break(1u);
        goto LABEL_16;
      }
    }
  }
  int64_t v7 = a4 + result;
  if (!__OFADD__(a4, result))
  {
    if (v5 >= v7) {
      goto LABEL_8;
    }
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_1D7A2C320@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  unint64_t v5 = a3 >> 62;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v10 = (int)a2;
      uint64_t v9 = a2 >> 32;
      break;
    case 2uLL:
      uint64_t v10 = *(void *)(a2 + 16);
      uint64_t v9 = *(void *)(a2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v10 = 0;
      uint64_t v9 = BYTE6(a3);
      break;
  }
  uint64_t v11 = sub_1D7A2F544(v10, v9, a2, a3);
  if (!a1 || v11 < 0 || v11 >= a1)
  {
    uint64_t v12 = sub_1D7A2F4C8(v10, a1, a2, a3);
    uint64_t v13 = 0;
    switch((int)v5)
    {
      case 1:
        uint64_t v13 = a2 >> 32;
        break;
      case 2:
        uint64_t v13 = *(void *)(a2 + 24);
        break;
      case 3:
        break;
      default:
        uint64_t v13 = BYTE6(a3);
        break;
    }
    if (v13 < v12)
    {
LABEL_16:
      __break(1u);
      JUMPOUT(0x1D7A2C4A0);
    }
  }
  uint64_t v14 = sub_1D7A9AFE8();
  uint64_t v16 = v15;
  uint64_t result = sub_1D78607E8(a2, a3);
  *a4 = v14;
  a4[1] = v16;
  return result;
}

void sub_1D7A2C4D0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (v5 > 8)
    {
      sub_1D7A9CC48();
      swift_bridgeObjectRelease();
      sub_1D7A9D258();
      sub_1D7A9C128();
      swift_bridgeObjectRelease();
      sub_1D7A9C128();
      sub_1D7A9C128();
      type metadata accessor for ASN1Error.Backing();
      uint64_t v6 = swift_allocObject();
      *(unsigned char *)(v6 + 16) = 1;
      *(void *)(v6 + 24) = 0xD000000000000010;
      *(void *)(v6 + 32) = 0x80000001D7ACA2B0;
      *(void *)(v6 + 40) = 0xD000000000000018;
      *(void *)(v6 + 48) = 0x80000001D7AC0E80;
      *(void *)(v6 + 56) = 1171;
      sub_1D785D8F0();
      swift_allocError();
      *int64_t v7 = v6;
      swift_willThrow();
      swift_unknownObjectRelease();
      return;
    }
    if ((unint64_t)(v5 - 0x1000000000000000) >> 61 != 7) {
      goto LABEL_24;
    }
    uint64_t v10 = sub_1D7A46C68(0, 8 * v5, 8);
    uint64_t v11 = *(void *)(v10 + 16);
    if (!v11)
    {
LABEL_21:
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      return;
    }
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    if (a3 <= v4) {
      uint64_t v14 = v4;
    }
    else {
      uint64_t v14 = a3;
    }
    unint64_t v15 = v14 - a3;
    while (v15 > v11 - 1)
    {
      unint64_t v17 = *(void *)(v10 + 8 * v12 + 32);
      if (v17 - 65 < 0xFFFFFFFFFFFFFF7FLL)
      {
        unint64_t v16 = 0;
      }
      else
      {
        unint64_t v18 = *(unsigned __int8 *)(a2 + a3 + v12);
        if ((v17 & 0x8000000000000000) != 0)
        {
          unint64_t v20 = v18 >> -(char)v17;
          if (v17 <= 0xFFFFFFFFFFFFFFC0) {
            unint64_t v16 = 0;
          }
          else {
            unint64_t v16 = v20;
          }
        }
        else
        {
          uint64_t v19 = v18 << v17;
          if (v17 >= 0x40) {
            unint64_t v16 = 0;
          }
          else {
            unint64_t v16 = v19;
          }
        }
      }
      ++v12;
      v13 |= v16;
      if (v11 == v12) {
        goto LABEL_21;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_24:
  __break(1u);
}

uint64_t sub_1D7A2C724()
{
  uint64_t v0 = sub_1D7A9CAC8();
  uint64_t result = sub_1D7A9CEB8();
  uint64_t v2 = v0 - result;
  if (__OFSUB__(v0, result))
  {
    __break(1u);
  }
  else
  {
    BOOL v3 = __OFADD__(v2, 7);
    uint64_t v4 = v2 + 7;
    if (!v3) {
      return v4 / 8;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1D7A2C790(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return sub_1D7A2C7BC(a1, a2, a3, (void (*)(uint64_t *__return_ptr, _OWORD *))sub_1D798F4C4);
}

uint64_t sub_1D7A2C7BC(uint64_t a1, uint64_t a2, unsigned __int8 a3, void (*a4)(uint64_t *__return_ptr, _OWORD *))
{
  sub_1D7A2BC88((uint64_t)v10);
  sub_1D7871D78((uint64_t)v10, (uint64_t)v11, &qword_1EA842028);
  if ((void)v12)
  {
    v14[2] = v11[2];
    v14[3] = v11[3];
    v14[4] = v12;
    v14[5] = v13;
    v14[0] = v11[0];
    v14[1] = v11[1];
    uint64_t v7 = sub_1D7A2CDC8((uint64_t)v14, a2, a3, a4);
    sub_1D785DAD8(v10);
  }
  else
  {
    sub_1D7A9CC48();
    sub_1D7A9C128();
    sub_1D7A9C128();
    sub_1D7A9C128();
    sub_1D7A9D258();
    sub_1D7A9C128();
    swift_bridgeObjectRelease();
    sub_1D7A9C128();
    sub_1D7A9CE78();
    sub_1D7A9C128();
    type metadata accessor for ASN1Error.Backing();
    uint64_t v7 = swift_allocObject();
    *(unsigned char *)(v7 + 16) = 1;
    *(void *)(v7 + 24) = 0;
    *(void *)(v7 + 32) = 0xE000000000000000;
    *(void *)(v7 + 40) = 0xD000000000000018;
    *(void *)(v7 + 48) = 0x80000001D7AC0E80;
    *(void *)(v7 + 56) = 420;
    sub_1D785D8F0();
    swift_allocError();
    *uint64_t v8 = v7;
    swift_willThrow();
  }
  return v7;
}

uint64_t sub_1D7A2CA20()
{
  sub_1D7A9D5E8();
  sub_1D7A9D5E8();
  sub_1D7A9D5E8();
  sub_1D7A9D5F8();
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[7] >> 1;
  uint64_t result = v2 - v1;
  if (__OFSUB__(v2, v1))
  {
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v4 = v0[5];
  uint64_t result = sub_1D7A9D5E8();
  BOOL v5 = __OFSUB__(v2, v1);
  uint64_t v6 = v2 - v1;
  if (v6)
  {
    if ((v6 < 0) ^ v5 | (v6 == 0))
    {
LABEL_17:
      __break(1u);
      goto LABEL_18;
    }
    uint64_t v7 = v4 + v1;
    do
    {
      ++v7;
      sub_1D7A9D5F8();
      --v6;
    }
    while (v6);
  }
  if (!v0[8]) {
    return sub_1D7A9D5F8();
  }
  uint64_t v8 = v0[10];
  unint64_t v9 = v0[11];
  uint64_t v10 = v0[9];
  sub_1D7A9D5F8();
  unint64_t v11 = v9 >> 1;
  uint64_t result = (v9 >> 1) - v8;
  if (__OFSUB__(v9 >> 1, v8))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t result = sub_1D7A9D5E8();
  BOOL v12 = __OFSUB__(v11, v8);
  uint64_t v13 = v11 - v8;
  if (!v13) {
    return result;
  }
  if ((v13 < 0) ^ v12 | (v13 == 0))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  uint64_t v14 = v10 + v8;
  do
  {
    ++v14;
    uint64_t result = sub_1D7A9D5F8();
    --v13;
  }
  while (v13);
  return result;
}

uint64_t sub_1D7A2CB18()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D7A2CB5C()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D7A2CB98(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[3];
  uint64_t v9[2] = a1[2];
  v9[3] = v2;
  long long v3 = a1[5];
  v9[4] = a1[4];
  v9[5] = v3;
  long long v4 = a1[1];
  v9[0] = *a1;
  v9[1] = v4;
  long long v5 = a2[3];
  v10[2] = a2[2];
  v10[3] = v5;
  long long v6 = a2[5];
  v10[4] = a2[4];
  v10[5] = v6;
  long long v7 = a2[1];
  v10[0] = *a2;
  v10[1] = v7;
  return sub_1D7A2F9A8((uint64_t)v9, (uint64_t)v10) & 1;
}

uint64_t sub_1D7A2CBF4()
{
  v3[0] = 0;
  v3[1] = 0xE000000000000000;
  sub_1D7A9CC48();
  sub_1D7A9C128();
  sub_1D78F7D1C();
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  v3[0] = *(void *)(v0 + 16);
  sub_1D7A9D258();
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  sub_1D7871D78(v0 + 64, (uint64_t)v2, &qword_1EA847128);
  uint64_t result = sub_1D7871D78((uint64_t)v2, (uint64_t)v3, &qword_1EA847128);
  if (v3[0] && __OFSUB__(v3[3] >> 1, v3[2]))
  {
    __break(1u);
  }
  else
  {
    sub_1D7A9D258();
    sub_1D7A9C128();
    swift_bridgeObjectRelease();
    sub_1D7A9C128();
    return 0;
  }
  return result;
}

uint64_t sub_1D7A2CD84()
{
  return sub_1D7A2CBF4();
}

uint64_t sub_1D7A2CDC8(uint64_t a1, uint64_t a2, unsigned __int8 a3, void (*a4)(uint64_t *__return_ptr, _OWORD *))
{
  if (*(void *)a1 != a2 || *(unsigned __int8 *)(a1 + 8) != a3)
  {
    uint64_t v9 = sub_1D78F7D1C();
    uint64_t v11 = v10;
    type metadata accessor for ASN1Error.Backing();
    uint64_t v12 = swift_allocObject();
    *(unsigned char *)(v12 + 16) = 0;
    *(void *)(v12 + 24) = v9;
    *(void *)(v12 + 32) = v11;
    *(void *)(v12 + 40) = 0xD000000000000018;
    *(void *)(v12 + 48) = 0x80000001D7AC0E80;
    *(void *)(v12 + 56) = 439;
    sub_1D785D8F0();
    swift_allocError();
    uint64_t *v13 = v12;
    return swift_willThrow();
  }
  sub_1D785D98C(a1 + 16, (uint64_t)v28);
  sub_1D785D98C((uint64_t)v28, (uint64_t)v29);
  if (v31)
  {
    sub_1D7A9CC48();
    swift_bridgeObjectRelease();
    strcpy((char *)v17, "Explicit tag ");
    HIWORD(v17[0]) = -4864;
    sub_1D78F7D1C();
    sub_1D7A9C128();
    swift_bridgeObjectRelease();
    sub_1D7A9C128();
    sub_1D7A9C128();
    sub_1D7A9C128();
    long long v6 = v17[0];
    type metadata accessor for ASN1Error.Backing();
    uint64_t v7 = swift_allocObject();
    *(unsigned char *)(v7 + 16) = 1;
    *(_OWORD *)(v7 + 24) = v6;
    *(void *)(v7 + 40) = 0xD000000000000018;
    *(void *)(v7 + 48) = 0x80000001D7AC0E80;
    *(void *)(v7 + 56) = 444;
    sub_1D785D8F0();
    swift_allocError();
    *uint64_t v8 = v7;
    return swift_willThrow();
  }
  v17[0] = v29[0];
  v17[1] = v29[1];
  uint64_t v18 = v30;
  sub_1D7A2BC88((uint64_t)v20);
  sub_1D7871D78((uint64_t)v20, (uint64_t)v24, &qword_1EA842028);
  if (!(void)v25)
  {
    sub_1D785DA98((uint64_t)v28, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRetain);
    sub_1D785DA98((uint64_t)v28, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRetain);
    goto LABEL_11;
  }
  v27[2] = v24[2];
  v27[3] = v24[3];
  v27[4] = v25;
  _OWORD v27[5] = v26;
  v27[0] = v24[0];
  v27[1] = v24[1];
  sub_1D7A2BC88((uint64_t)v21);
  sub_1D785DA98((uint64_t)v28, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRetain);
  sub_1D785DA98((uint64_t)v28, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRetain);
  sub_1D785DAD8(v21);
  sub_1D7871D78((uint64_t)v21, (uint64_t)v22, &qword_1EA842028);
  if (v23)
  {
    sub_1D785DAD8(v20);
LABEL_11:
    sub_1D7A9CC48();
    sub_1D7A9C128();
    sub_1D78F7D1C();
    sub_1D7A9C128();
    swift_bridgeObjectRelease();
    sub_1D7A9C128();
    sub_1D7A9C128();
    type metadata accessor for ASN1Error.Backing();
    uint64_t v15 = swift_allocObject();
    *(unsigned char *)(v15 + 16) = 1;
    *(void *)(v15 + 24) = 0;
    *(void *)(v15 + 32) = 0xE000000000000000;
    *(void *)(v15 + 40) = 0xD000000000000018;
    *(void *)(v15 + 48) = 0x80000001D7AC0E80;
    *(void *)(v15 + 56) = 449;
    sub_1D785D8F0();
    swift_allocError();
    *unint64_t v16 = v15;
    swift_willThrow();
    sub_1D785DA98((uint64_t)v28, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
    return swift_unknownObjectRelease();
  }
  a4(&v19, v27);
  swift_unknownObjectRelease();
  sub_1D785DAD8(v20);
  uint64_t result = sub_1D785DA98((uint64_t)v28, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
  if (!v4) {
    return v19;
  }
  return result;
}

uint64_t sub_1D7A2D270(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v10 = a4;
  v8[0] = a1;
  v8[1] = a2;
  uint64_t v9 = a3;
  swift_unknownObjectRetain();
  uint64_t v11 = sub_1D789E668(0, 16, 0, MEMORY[0x1E4FBC860]);
  sub_1D7A2D3C0(v8, 1, &v11);
  uint64_t result = v8[0];
  if (v5) {
    goto LABEL_6;
  }
  if (!__OFSUB__(v10 >> 1, v9))
  {
    if (v10 >> 1 == v9)
    {
      uint64_t v4 = v11;
      swift_unknownObjectRelease();
      return (uint64_t)v4;
    }
    type metadata accessor for ASN1Error.Backing();
    uint64_t v4 = (uint64_t *)swift_allocObject();
    *((unsigned char *)v4 + 16) = 1;
    v4[3] = 0xD000000000000021;
    v4[4] = 0x80000001D7ACA120;
    v4[5] = 0xD000000000000018;
    v4[6] = 0x80000001D7AC0E80;
    v4[7] = 475;
    sub_1D785D8F0();
    swift_allocError();
    *uint64_t v7 = v4;
    swift_willThrow();
LABEL_6:
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    return (uint64_t)v4;
  }
  __break(1u);
  return result;
}

uint64_t sub_1D7A2D3C0(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  if (a2 > 50)
  {
    type metadata accessor for ASN1Error.Backing();
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = v4;
    *(unsigned char *)(v4 + 16) = 1;
    *(void *)(v4 + 24) = 0xD000000000000021;
    *(void *)(v4 + 32) = 0x80000001D7ACA1A0;
    *(void *)(v4 + 40) = 0xD000000000000018;
    *(void *)(v4 + 48) = 0x80000001D7AC0E80;
    uint64_t v6 = 486;
LABEL_9:
    *(void *)(v4 + 56) = v6;
    sub_1D785D8F0();
    swift_allocError();
    *uint64_t v22 = v5;
    return swift_willThrow();
  }
  uint64_t v9 = a1;
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  uint64_t v12 = a1[2];
  unint64_t v13 = a1[3];
  int v14 = sub_1D7A2BE8C();
  if ((v14 & 0x100) != 0)
  {
    type metadata accessor for ASN1Error.Backing();
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = v4;
    *(unsigned char *)(v4 + 16) = 3;
    *(void *)(v4 + 24) = 0;
    *(void *)(v4 + 32) = 0xE000000000000000;
    *(void *)(v4 + 40) = 0xD000000000000018;
    *(void *)(v4 + 48) = 0x80000001D7AC0E80;
    uint64_t v6 = 492;
    goto LABEL_9;
  }
  char v15 = v14;
  if ((~v14 & 0x1F) != 0)
  {
    uint64_t v61 = sub_1D78F7FF0(v14);
    char v62 = v24;
    swift_unknownObjectRetain();
  }
  else
  {
    uint64_t v59 = v12;
    uint64_t v16 = v11;
    char v17 = sub_1D78F7FE8(v14);
    swift_unknownObjectRetain();
    sub_1D7A46AC8();
    if (v3) {
      return swift_unknownObjectRelease();
    }
    char v62 = v17;
    unint64_t v19 = v18;
    if (v18 <= 0x1E)
    {
      sub_1D7A9CC48();
      swift_bridgeObjectRelease();
      unint64_t v63 = 0xD00000000000002CLL;
      unint64_t v64 = 0x80000001D7ACA170;
      unint64_t v67 = v19;
      sub_1D7A9D258();
      sub_1D7A9C128();
      swift_bridgeObjectRelease();
      type metadata accessor for ASN1Error.Backing();
      uint64_t v20 = swift_allocObject();
      *(unsigned char *)(v20 + 16) = 1;
      *(void *)(v20 + 24) = 0xD00000000000002CLL;
      *(void *)(v20 + 32) = 0x80000001D7ACA170;
      *(void *)(v20 + 40) = 0xD000000000000018;
      *(void *)(v20 + 48) = 0x80000001D7AC0E80;
      *(void *)(v20 + 56) = 506;
      sub_1D785D8F0();
      swift_allocError();
      *long long v21 = v20;
      swift_willThrow();
      return swift_unknownObjectRelease();
    }
    uint64_t v61 = v18;
    uint64_t v11 = v16;
    uint64_t v12 = v59;
  }
  sub_1D7A2DADC();
  if (v3) {
    return swift_unknownObjectRelease();
  }
  if (v26)
  {
    type metadata accessor for ASN1Error.Backing();
    uint64_t v39 = swift_allocObject();
    uint64_t v40 = v39;
    *(unsigned char *)(v39 + 16) = 3;
    *(void *)(v39 + 24) = 0;
    *(void *)(v39 + 32) = 0xE000000000000000;
    *(void *)(v39 + 40) = 0xD000000000000018;
    *(void *)(v39 + 48) = 0x80000001D7AC0E80;
    uint64_t v41 = 514;
LABEL_27:
    *(void *)(v39 + 56) = v41;
    sub_1D785D8F0();
    swift_allocError();
    *uint64_t v43 = v40;
    swift_willThrow();
    return swift_unknownObjectRelease();
  }
  if (v25 < 0)
  {
    uint64_t v42 = v25;
    sub_1D7A9CC48();
    swift_bridgeObjectRelease();
    unint64_t v63 = 0xD000000000000019;
    unint64_t v64 = 0x80000001D7ACA150;
    unint64_t v67 = v42;
    sub_1D7A9D258();
    sub_1D7A9C128();
    swift_bridgeObjectRelease();
    type metadata accessor for ASN1Error.Backing();
    uint64_t v39 = swift_allocObject();
    uint64_t v40 = v39;
    *(unsigned char *)(v39 + 16) = 1;
    *(void *)(v39 + 24) = 0xD000000000000019;
    *(void *)(v39 + 32) = 0x80000001D7ACA150;
    *(void *)(v39 + 40) = 0xD000000000000018;
    *(void *)(v39 + 48) = 0x80000001D7AC0E80;
    uint64_t v41 = 519;
    goto LABEL_27;
  }
  uint64_t v58 = *v9;
  uint64_t v60 = v25;
  int64_t v53 = v9[2];
  uint64_t v54 = v9[1];
  unint64_t v55 = v9[3];
  uint64_t v27 = sub_1D79DA870(v25, *v9, v54, v53, v55);
  unint64_t v56 = v29;
  uint64_t v57 = v28;
  unint64_t v51 = v30;
  uint64_t v52 = v27;
  unint64_t v63 = v27;
  unint64_t v64 = v30;
  uint64_t v65 = v28;
  unint64_t v66 = v29;
  *uint64_t v9 = sub_1D7A2C2B0(v60, v58, v54, v53, v55);
  v9[1] = v31;
  uint64_t v9[2] = v32;
  v9[3] = v33;
  uint64_t v34 = v56 >> 1;
  if (__OFSUB__(v56 >> 1, v57))
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if ((v56 >> 1) - v57 != v60)
  {
    type metadata accessor for ASN1Error.Backing();
    uint64_t v44 = swift_allocObject();
    *(unsigned char *)(v44 + 16) = 3;
    *(void *)(v44 + 24) = 0;
    *(void *)(v44 + 32) = 0xE000000000000000;
    *(void *)(v44 + 40) = 0xD000000000000018;
    *(void *)(v44 + 48) = 0x80000001D7AC0E80;
    *(void *)(v44 + 56) = 526;
    sub_1D785D8F0();
    swift_allocError();
    *long long v45 = v44;
    swift_unknownObjectRetain();
    swift_willThrow();
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  if (v34 < v12) {
    goto LABEL_42;
  }
  if ((uint64_t)(v13 >> 1) < v12)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  if (v13 >> 1 < v34)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  unint64_t v55 = v56 & 0xFFFFFFFFFFFFFFFELL | v13 & 1;
  if ((v15 & 0x20) != 0)
  {
    long long v46 = *a3;
    swift_unknownObjectRetain_n();
    swift_unknownObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      long long v46 = sub_1D789E668(0, v46[2] + 1, 1, v46);
    }
    unint64_t v48 = v46[2];
    unint64_t v47 = v46[3];
    char v49 = v62;
    if (v48 >= v47 >> 1)
    {
      long long v46 = sub_1D789E668((void *)(v47 > 1), v48 + 1, 1, v46);
      char v49 = v62;
    }
    v46[2] = v48 + 1;
    uint64_t v50 = &v46[12 * v48];
    v50[4] = v61;
    *((unsigned char *)v50 + 40) = v49;
    v50[6] = a2;
    *((unsigned char *)v50 + 56) = 1;
    v50[8] = v10;
    v50[9] = v11;
    v50[10] = v12;
    v50[11] = v55;
    *((_OWORD *)v50 + 6) = 0u;
    *((_OWORD *)v50 + 7) = 0u;
    *a3 = v46;
    if (!v60)
    {
      swift_unknownObjectRelease_n();
      return swift_unknownObjectRelease();
    }
    uint64_t v9 = (uint64_t *)(a2 + 1);
    while (1)
    {
      sub_1D7A2D3C0(&v63, a2 + 1, a3);
      if (__OFSUB__(v66 >> 1, v65)) {
        break;
      }
      if ((uint64_t)((v66 >> 1) - v65) <= 0)
      {
        swift_unknownObjectRelease_n();
        return swift_unknownObjectRelease();
      }
    }
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v9 = *a3;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_45:
  }
    uint64_t v9 = sub_1D789E668(0, v9[2] + 1, 1, v9);
  unint64_t v36 = v9[2];
  unint64_t v35 = v9[3];
  char v37 = v62;
  if (v36 >= v35 >> 1)
  {
    uint64_t v9 = sub_1D789E668((void *)(v35 > 1), v36 + 1, 1, v9);
    char v37 = v62;
  }
  uint64_t v9[2] = v36 + 1;
  long long v38 = &v9[12 * v36];
  v38[4] = v61;
  *((unsigned char *)v38 + 40) = v37;
  v38[6] = a2;
  *((unsigned char *)v38 + 56) = 0;
  v38[8] = v10;
  v38[9] = v11;
  v38[10] = v12;
  v38[11] = v55;
  v38[12] = v52;
  v38[13] = v51;
  v38[14] = v57;
  v38[15] = v56;
  swift_unknownObjectRelease();
  uint64_t result = swift_unknownObjectRelease();
  *a3 = v9;
  return result;
}

void sub_1D7A2DADC()
{
  uint64_t v2 = v0[2];
  unint64_t v3 = v0[3];
  int64_t v4 = v3 >> 1;
  if (v2 == v3 >> 1) {
    return;
  }
  if (v2 >= v4)
  {
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v5 = *v0;
  uint64_t v6 = v0[1];
  int v7 = *(unsigned __int8 *)(v6 + v2);
  int64_t v8 = v2 + 1;
  v0[2] = v2 + 1;
  if (v7 == 128)
  {
    type metadata accessor for ASN1Error.Backing();
    uint64_t v9 = swift_allocObject();
    *(unsigned char *)(v9 + 16) = 4;
    *(void *)(v9 + 24) = 0xD000000000000035;
    *(void *)(v9 + 32) = 0x80000001D7ACA270;
    *(void *)(v9 + 40) = 0xD000000000000018;
    *(void *)(v9 + 48) = 0x80000001D7AC0E80;
    *(void *)(v9 + 56) = 1129;
    sub_1D785D8F0();
    swift_allocError();
    uint64_t *v10 = v9;
    swift_willThrow();
    return;
  }
  if ((v7 & 0x80) != 0)
  {
    BOOL v11 = __OFSUB__(v4, v8);
    int64_t v12 = v4 - v8;
    if (!v11)
    {
      unint64_t v13 = v7 & 0x7F;
      if (v12 < (uint64_t)v13) {
        return;
      }
      sub_1D79DA870(v7 & 0x7F, v5, v6, v2 + 1, v3);
      uint64_t v15 = v14;
      unint64_t v27 = v17;
      uint64_t v28 = v16;
      *uint64_t v0 = sub_1D7A2C2B0(v13, v5, v6, v8, v3);
      v0[1] = v18;
      v0[2] = v19;
      v0[3] = v20;
      swift_unknownObjectRetain();
      uint64_t v21 = swift_unknownObjectRetain();
      sub_1D7A2C4D0(v21, v15, v28, v27);
      if (!v1)
      {
        if (v22 <= 0x7F)
        {
          sub_1D7A9CC48();
          sub_1D7A9C128();
          sub_1D7A9D258();
          sub_1D7A9C128();
          swift_bridgeObjectRelease();
          sub_1D7A9C128();
          type metadata accessor for ASN1Error.Backing();
          uint64_t v23 = swift_allocObject();
          uint64_t v24 = v23;
          *(unsigned char *)(v23 + 16) = 4;
          *(void *)(v23 + 24) = 0;
          *(void *)(v23 + 32) = 0xE000000000000000;
          *(void *)(v23 + 40) = 0xD000000000000018;
          *(void *)(v23 + 48) = 0x80000001D7AC0E80;
          uint64_t v25 = 1148;
        }
        else
        {
          if (v13 <= (71 - __clz(v22)) >> 3) {
            goto LABEL_15;
          }
          type metadata accessor for ASN1Error.Backing();
          uint64_t v23 = swift_allocObject();
          uint64_t v24 = v23;
          *(unsigned char *)(v23 + 16) = 4;
          *(void *)(v23 + 24) = 0xD000000000000031;
          *(void *)(v23 + 32) = 0x80000001D7ACA230;
          *(void *)(v23 + 40) = 0xD000000000000018;
          *(void *)(v23 + 48) = 0x80000001D7AC0E80;
          uint64_t v25 = 1153;
        }
        *(void *)(v23 + 56) = v25;
        sub_1D785D8F0();
        swift_allocError();
        *char v26 = v24;
        swift_willThrow();
      }
LABEL_15:
      swift_unknownObjectRelease();
      return;
    }
LABEL_18:
    __break(1u);
  }
}

uint64_t sub_1D7A2DE18()
{
  uint64_t v1 = v0[1];
  uint64_t v2 = v0[2];
  unint64_t v3 = v0[3];
  sub_1D7A9D5D8();
  sub_1D7A2FB8C((uint64_t)v5, v1, v2, v3);
  return sub_1D7A9D628();
}

uint64_t sub_1D7A2DE74(uint64_t a1)
{
  return sub_1D7A2FB8C(a1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1D7A2DE80()
{
  uint64_t v1 = v0[1];
  uint64_t v2 = v0[2];
  unint64_t v3 = v0[3];
  sub_1D7A9D5D8();
  sub_1D7A2FB8C((uint64_t)v5, v1, v2, v3);
  return sub_1D7A9D628();
}

uint64_t sub_1D7A2DED8(uint64_t a1, uint64_t a2)
{
  return sub_1D7932B78(*(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a2 + 8), *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t sub_1D7A2DEF4()
{
  uint64_t v1 = v0[1];
  uint64_t v2 = v0[2];
  unint64_t v3 = v0[3];
  sub_1D7A9D5D8();
  sub_1D7A2FB8C((uint64_t)v5, v1, v2, v3);
  sub_1D7A9D5E8();
  return sub_1D7A9D628();
}

uint64_t sub_1D7A2DF64(uint64_t a1)
{
  sub_1D7A2FB8C(a1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(void *)(v1 + 24));
  return sub_1D7A9D5E8();
}

uint64_t sub_1D7A2DF9C()
{
  uint64_t v1 = v0[1];
  uint64_t v2 = v0[2];
  unint64_t v3 = v0[3];
  sub_1D7A9D5D8();
  sub_1D7A2FB8C((uint64_t)v5, v1, v2, v3);
  sub_1D7A9D5E8();
  return sub_1D7A9D628();
}

uint64_t sub_1D7A2E008(void *a1, void *a2)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = a2[4];
  return sub_1D7932B78(a1[1], a1[2], a1[3], a2[1], a2[2], a2[3]) & (v2 == v3);
}

uint64_t sub_1D7A2E04C@<X0>(uint64_t a1@<X8>)
{
  sub_1D7A2BC88((uint64_t)v3);
  return sub_1D7871D78((uint64_t)v3, a1, &qword_1EA842028);
}

__n128 sub_1D7A2E090@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 32);
  __n128 result = *(__n128 *)v1;
  long long v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = v2;
  return result;
}

uint64_t sub_1D7A2E0A4()
{
  uint64_t v1 = sub_1D78D1AC8(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16), *(void *)(v0 + 24));
  swift_unknownObjectRelease();
  return v1;
}

uint64_t sub_1D7A2E0E0(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_1D7A9D5E8();
  sub_1D7A9D5E8();
  sub_1D785D98C((uint64_t)(v2 + 2), (uint64_t)v17);
  sub_1D785D98C((uint64_t)v17, (uint64_t)v18);
  uint64_t v4 = v19;
  uint64_t v5 = v20;
  unint64_t v6 = v21;
  if (v22)
  {
    sub_1D7A9D5E8();
    unint64_t v7 = v6 >> 1;
    uint64_t result = v7 - v5;
    if (__OFSUB__(v7, v5))
    {
LABEL_16:
      __break(1u);
LABEL_17:
      __break(1u);
      goto LABEL_18;
    }
    uint64_t result = sub_1D7A9D5E8();
    BOOL v9 = __OFSUB__(v7, v5);
    uint64_t v10 = v7 - v5;
    if (v10)
    {
      if ((v10 < 0) ^ v9 | (v10 == 0))
      {
LABEL_18:
        __break(1u);
        return result;
      }
      uint64_t v11 = v4 + v5;
      do
      {
        ++v11;
        sub_1D7A9D5F8();
        --v10;
      }
      while (v10);
    }
  }
  else
  {
    sub_1D7A9D5E8();
    sub_1D7A2FB8C(a1, v4, v5, v6);
    sub_1D7A9D5E8();
  }
  uint64_t v12 = v2[10];
  uint64_t v13 = v2[11] >> 1;
  uint64_t result = v13 - v12;
  if (__OFSUB__(v13, v12))
  {
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v14 = v2[9];
  uint64_t result = sub_1D7A9D5E8();
  uint64_t v15 = v13 - v12;
  if (v13 == v12) {
    return result;
  }
  if (v13 <= v12) {
    goto LABEL_17;
  }
  uint64_t v16 = v14 + v12;
  do
  {
    ++v16;
    uint64_t result = sub_1D7A9D5F8();
    --v15;
  }
  while (v15);
  return result;
}

uint64_t sub_1D7A2E204(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_1D785D98C(v2, (uint64_t)v12);
  uint64_t v4 = v12[1];
  uint64_t v5 = v12[2];
  unint64_t v6 = v12[3];
  if ((v13 & 1) == 0)
  {
    sub_1D7A9D5E8();
    sub_1D7A2FB8C(a1, v4, v5, v6);
    return sub_1D7A9D5E8();
  }
  sub_1D7A9D5E8();
  unint64_t v7 = v6 >> 1;
  uint64_t result = v7 - v5;
  if (__OFSUB__(v7, v5))
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t result = sub_1D7A9D5E8();
  BOOL v9 = __OFSUB__(v7, v5);
  uint64_t v10 = v7 - v5;
  if (!v10) {
    return result;
  }
  if ((v10 < 0) ^ v9 | (v10 == 0))
  {
LABEL_11:
    __break(1u);
    return result;
  }
  uint64_t v11 = v4 + v5;
  do
  {
    ++v11;
    uint64_t result = sub_1D7A9D5F8();
    --v10;
  }
  while (v10);
  return result;
}

uint64_t sub_1D7A2E2C8()
{
  sub_1D7A9D5D8();
  sub_1D785D98C(v0, (uint64_t)v10);
  uint64_t v1 = v11;
  uint64_t v2 = v12;
  unint64_t v3 = v13;
  if ((v14 & 1) == 0)
  {
    sub_1D7A9D5E8();
    sub_1D7A2FB8C((uint64_t)v9, v1, v2, v3);
    sub_1D7A9D5E8();
    return sub_1D7A9D628();
  }
  sub_1D7A9D5E8();
  unint64_t v4 = v3 >> 1;
  uint64_t result = v4 - v2;
  if (__OFSUB__(v4, v2))
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t result = sub_1D7A9D5E8();
  BOOL v6 = __OFSUB__(v4, v2);
  uint64_t v7 = v4 - v2;
  if (!v7) {
    return sub_1D7A9D628();
  }
  if (!((v7 < 0) ^ v6 | (v7 == 0)))
  {
    uint64_t v8 = v1 + v2;
    do
    {
      ++v8;
      sub_1D7A9D5F8();
      --v7;
    }
    while (v7);
    return sub_1D7A9D628();
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1D7A2E3AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D7A2F000(a1, a2, a3);
}

unint64_t sub_1D7A2E3EC()
{
  unint64_t result = qword_1EA847110;
  if (!qword_1EA847110)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847110);
  }
  return result;
}

unint64_t sub_1D7A2E444()
{
  unint64_t result = qword_1EA847118;
  if (!qword_1EA847118)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847118);
  }
  return result;
}

unint64_t sub_1D7A2E49C()
{
  unint64_t result = qword_1EA847120;
  if (!qword_1EA847120)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847120);
  }
  return result;
}

uint64_t sub_1D7A2E4F0()
{
  long long v1 = v0[3];
  long long v8 = v0[2];
  long long v9 = v1;
  long long v2 = v0[5];
  long long v10 = v0[4];
  long long v11 = v2;
  long long v3 = v0[1];
  long long v6 = *v0;
  long long v7 = v3;
  sub_1D7A9D5D8();
  sub_1D7A2E0E0((uint64_t)v5);
  return sub_1D7A9D628();
}

uint64_t sub_1D7A2E550(uint64_t a1)
{
  return sub_1D7A2E0E0(a1);
}

uint64_t sub_1D7A2E594()
{
  long long v1 = v0[3];
  long long v8 = v0[2];
  long long v9 = v1;
  long long v2 = v0[5];
  long long v10 = v0[4];
  long long v11 = v2;
  long long v3 = v0[1];
  long long v6 = *v0;
  long long v7 = v3;
  sub_1D7A9D5D8();
  sub_1D7A2E0E0((uint64_t)v5);
  return sub_1D7A9D628();
}

uint64_t sub_1D7A2E5F0(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[3];
  uint64_t v9[2] = a1[2];
  v9[3] = v2;
  long long v3 = a1[5];
  v9[4] = a1[4];
  v9[5] = v3;
  long long v4 = a1[1];
  v9[0] = *a1;
  v9[1] = v4;
  long long v5 = a2[3];
  v10[2] = a2[2];
  v10[3] = v5;
  long long v6 = a2[5];
  v10[4] = a2[4];
  v10[5] = v6;
  long long v7 = a2[1];
  v10[0] = *a2;
  v10[1] = v7;
  return sub_1D7A2FA5C((uint64_t)v9, (uint64_t)v10) & 1;
}

uint64_t sub_1D7A2E64C()
{
  sub_1D785D98C(v0, (uint64_t)&v2);
  return sub_1D7A2E2C8();
}

uint64_t sub_1D7A2E684(uint64_t a1)
{
  sub_1D785D98C(v1, (uint64_t)&v4);
  return sub_1D7A2E204(a1);
}

uint64_t sub_1D7A2E6C4()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 16);
  unint64_t v3 = *(void *)(v0 + 24);
  char v4 = *(unsigned char *)(v0 + 40);
  sub_1D7A9D5D8();
  if ((v4 & 1) == 0)
  {
    sub_1D7A9D5E8();
    sub_1D7A2FB8C((uint64_t)v10, v1, v2, v3);
    sub_1D7A9D5E8();
    return sub_1D7A9D628();
  }
  sub_1D7A9D5E8();
  unint64_t v5 = v3 >> 1;
  uint64_t result = v5 - v2;
  if (__OFSUB__(v5, v2))
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t result = sub_1D7A9D5E8();
  BOOL v7 = __OFSUB__(v5, v2);
  uint64_t v8 = v5 - v2;
  if (!v8) {
    return sub_1D7A9D628();
  }
  if (!((v8 < 0) ^ v7 | (v8 == 0)))
  {
    uint64_t v9 = v1 + v2;
    do
    {
      ++v9;
      sub_1D7A9D5F8();
      --v8;
    }
    while (v8);
    return sub_1D7A9D628();
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1D7A2E794(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  unint64_t v9 = *(void *)(a2 + 24);
  if ((*(unsigned char *)(a1 + 40) & 1) == 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 1) == 0)
    {
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v12 = *(void *)(a2 + 32);
      return sub_1D7932B78(v4, v5, v6, v7, v8, v9) & (v11 == v12);
    }
    return 0;
  }
  if ((*(unsigned char *)(a2 + 40) & 1) == 0) {
    return 0;
  }
  return sub_1D7932AA4(v4, v5, v6, v7, v8, v9);
}

uint64_t sub_1D7A2E818(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1D785D944(a5);
}

uint64_t sub_1D7A2E84C(unint64_t a1, char a2, char a3, uint64_t *a4)
{
  sub_1D78F7E80(a1, a2, a3);
  uint64_t v7 = *a4;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_29;
  }
  while (1)
  {
    unint64_t v10 = *(void *)(v7 + 16);
    unint64_t v9 = *(void *)(v7 + 24);
    unint64_t v11 = v10 + 1;
    if (v10 >= v9 >> 1)
    {
      uint64_t result = (uint64_t)sub_1D789E0D8((char *)(v9 > 1), v10 + 1, 1, (char *)v7);
      uint64_t v7 = result;
    }
    *(void *)(v7 + 16) = v11;
    *(unsigned char *)(v7 + 32 + v10) = 0;
    *a4 = v7;
    unint64_t v12 = *(void *)(v7 + 16);
    unint64_t v13 = v12 - v11;
    if ((uint64_t)(v12 - v11) < 128)
    {
      if ((v13 & 0x8000000000000000) != 0) {
        goto LABEL_34;
      }
      if (v10 < v12)
      {
        *(unsigned char *)(v7 + 32 + v10) = v13;
        goto LABEL_27;
      }
    }
    else
    {
      if (v12 > v10)
      {
        unint64_t v5 = 71 - __clz(v13);
        unint64_t v4 = v5 >> 3;
        sub_1D7A2EE3C(v5 >> 3, v10 + 1, v12);
        uint64_t v7 = *a4;
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if (result) {
          goto LABEL_7;
        }
        goto LABEL_32;
      }
      __break(1u);
    }
    __break(1u);
LABEL_32:
    uint64_t result = (uint64_t)sub_1D7A2EFC4(v7);
    uint64_t v7 = result;
LABEL_7:
    if (v10 >= *(void *)(v7 + 16)) {
      break;
    }
    uint64_t v14 = v7 + 32;
    *(unsigned char *)(v7 + 32 + v10) = (v5 >> 3) | 0x80;
    *a4 = v7;
    if (v10 + 1 < *(void *)(v7 + 16))
    {
      *(unsigned char *)(v14 + v10 + 1) = v13 >> (8 * ((v4 - 1) & 7));
      if (v4 == 1) {
        goto LABEL_27;
      }
      if (v10 + 2 < *(void *)(v7 + 16))
      {
        *(unsigned char *)(v14 + v10 + 2) = v13 >> (8 * ((v4 - 2) & 7));
        if (v4 == 2) {
          goto LABEL_27;
        }
        if (v10 + 3 < *(void *)(v7 + 16))
        {
          *(unsigned char *)(v14 + v10 + 3) = v13 >> (8 * ((v4 - 3) & 7));
          if (v4 == 3) {
            goto LABEL_27;
          }
          if (v10 + 4 < *(void *)(v7 + 16))
          {
            *(unsigned char *)(v14 + v10 + 4) = v13 >> (8 * ((v4 - 4) & 7));
            if (v4 == 4) {
              goto LABEL_27;
            }
            if (v10 + 5 < *(void *)(v7 + 16))
            {
              *(unsigned char *)(v14 + v10 + 5) = v13 >> (8 * ((v4 - 5) & 7));
              if (v4 == 5) {
                goto LABEL_27;
              }
              if (v10 + 6 < *(void *)(v7 + 16))
              {
                *(unsigned char *)(v14 + v10 + 6) = v13 >> (8 * ((v4 - 6) & 7));
                if (v4 == 6) {
                  goto LABEL_27;
                }
                if (v10 + 7 < *(void *)(v7 + 16))
                {
                  *(unsigned char *)(v14 + v10 + 7) = v13 >> (8 * ((v4 - 7) & 7));
                  if (v4 == 7) {
                    goto LABEL_27;
                  }
                  if (v10 + 8 < *(void *)(v7 + 16))
                  {
                    *(unsigned char *)(v14 + v10 + 8) = v13 >> (v5 & 0x38);
LABEL_27:
                    *a4 = v7;
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_29:
    uint64_t result = (uint64_t)sub_1D789E0D8(0, *(void *)(v7 + 16) + 1, 1, (char *)v7);
    uint64_t v7 = result;
  }
  __break(1u);
LABEL_34:
  uint64_t result = sub_1D7A9CF88();
  __break(1u);
  return result;
}

uint64_t sub_1D7A2EB04(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 32);
  unint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 48);
  uint64_t v8 = *(unsigned __int8 *)(a2 + 56);
  if (v8)
  {
    j__swift_unknownObjectRetain(*(void *)(a2 + 16), *(void *)(a2 + 24), v5, v6, v7, 1);
    sub_1D78CCE90(v3, v4, v5, v6);
    return j__swift_unknownObjectRelease(v3, v4, v5, v6, v7, v8);
  }
  unsigned int v34 = *(unsigned __int8 *)(a2 + 56);
  uint64_t v35 = *(void *)(a2 + 48);
  int64_t v9 = v6 >> 1;
  if (v5 == v6 >> 1) {
    return result;
  }
  uint64_t v40 = *(void *)(a2 + 24);
  j__swift_unknownObjectRetain(v3, v4, v5, v6, v7, 0);
  uint64_t v10 = v4;
  uint64_t v37 = v3;
  unint64_t v38 = v6 & 0xFFFFFFFFFFFFFFFELL;
  uint64_t result = swift_unknownObjectRetain();
  uint64_t v36 = v4 + 112;
  uint64_t v11 = v5;
  unint64_t v32 = v6;
  uint64_t v33 = v5;
  unint64_t v12 = v6;
  uint64_t v39 = v2;
  while (1)
  {
    if (v11 >= (uint64_t)(v12 >> 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    if (v9 <= v11) {
      goto LABEL_46;
    }
    if (v12 >> 1 < v9) {
      goto LABEL_47;
    }
    uint64_t v17 = v10 + 96 * v11;
    uint64_t v18 = *(void *)v17;
    uint64_t v19 = *(unsigned __int8 *)(v17 + 8);
    uint64_t v20 = *(unsigned __int8 *)(v17 + 24);
    uint64_t v21 = v11 + 1;
    unint64_t v22 = v12 & 1;
    long long v41 = *(_OWORD *)(v17 + 48);
    long long v42 = *(_OWORD *)(v17 + 32);
    if (*(unsigned char *)(v17 + 24)) {
      break;
    }
    uint64_t result = *(void *)(v17 + 64);
    if (!result) {
      goto LABEL_57;
    }
    int64_t v25 = v11 + 1;
    uint64_t v10 = *(void *)(v17 + 72);
    uint64_t v21 = *(void *)(v17 + 80);
    uint64_t v13 = *(void *)(v17 + 88);
    uint64_t v14 = swift_unknownObjectRetain();
    uint64_t v23 = 0;
LABEL_6:
    unint64_t v12 = v22 | v38;
    uint64_t v43 = v18;
    char v44 = v19;
    uint64_t v45 = v14;
    uint64_t v46 = v10;
    uint64_t v47 = v21;
    uint64_t v48 = v13;
    uint64_t v49 = v23;
    char v50 = v20 ^ 1;
    long long v51 = v42;
    long long v52 = v41;
    swift_unknownObjectRetain();
    uint64_t v15 = v18;
    uint64_t v16 = v53;
    uint64_t result = sub_1D7A2E818(v15, v19, v20, v39, (uint64_t)&v43);
    uint64_t v53 = v16;
    uint64_t v11 = v25;
    uint64_t v10 = v40;
    if (v25 == v9) {
      goto LABEL_39;
    }
  }
  uint64_t v23 = *(void *)(v17 + 16);
  if (v21 == v9)
  {
    uint64_t v24 = v9;
  }
  else
  {
    char v26 = (void *)(v36 + 96 * v11);
    uint64_t v24 = v11 + 1;
    do
    {
      if (v24 >= v9)
      {
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
        goto LABEL_45;
      }
      if (v23 >= *v26) {
        goto LABEL_21;
      }
      uint64_t v27 = v24 + 1;
      if (__OFADD__(v24, 1)) {
        goto LABEL_44;
      }
      ++v24;
      v26 += 12;
    }
    while (v27 != v9);
    uint64_t v24 = v9;
LABEL_21:
    if (v24 <= v11) {
      goto LABEL_48;
    }
    if (v24 < 0) {
      goto LABEL_49;
    }
  }
  uint64_t v28 = v24 - v21;
  if (__OFSUB__(v24, v21)) {
    goto LABEL_50;
  }
  if (v28 < 0) {
    goto LABEL_51;
  }
  int64_t v29 = v9 - v21;
  if (__OFSUB__(v9, v21)) {
    goto LABEL_52;
  }
  if (!v28 || v29 < 0 || (int64_t v25 = v9, v29 >= v28))
  {
    int64_t v25 = v24;
    if (__OFADD__(v21, v28)) {
      goto LABEL_55;
    }
    if (v9 < v24) {
      goto LABEL_53;
    }
  }
  if (v25 <= v11) {
    goto LABEL_54;
  }
  if (v21 == v24)
  {
LABEL_5:
    uint64_t v13 = v22 | (2 * v24);
    uint64_t v14 = swift_unknownObjectRetain();
    goto LABEL_6;
  }
  if (v21 < v24)
  {
    unint64_t v30 = (uint64_t *)(v36 + 96 * v11);
    do
    {
      uint64_t v31 = *v30;
      v30 += 12;
      if (v23 >= v31)
      {
        __break(1u);
        goto LABEL_43;
      }
      --v28;
    }
    while (v28);
    if (*(void *)(v10 + 96 * v21 + 16) == v23 + 1) {
      goto LABEL_5;
    }
    __break(1u);
LABEL_39:
    uint64_t v3 = v37;
    uint64_t v4 = v10;
    swift_unknownObjectRelease();
    unint64_t v6 = v32;
    uint64_t v5 = v33;
    uint64_t v7 = v35;
    uint64_t v8 = v34;
    return j__swift_unknownObjectRelease(v3, v4, v5, v6, v7, v8);
  }
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
  return result;
}

uint64_t sub_1D7A2EE3C(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result < 1) {
    goto LABEL_28;
  }
  uint64_t v6 = a3;
  uint64_t v7 = *v4;
  uint64_t v8 = *(void *)(*v4 + 16);
  uint64_t v9 = v8 - a3;
  if (__OFSUB__(v8, a3)) {
    goto LABEL_29;
  }
  uint64_t v3 = a2;
  uint64_t v5 = result;
  if (v9 >= result) {
    goto LABEL_13;
  }
  uint64_t v10 = result - v9;
  if (__OFSUB__(result, v9))
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v10 < 0)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    uint64_t result = (uint64_t)sub_1D789E0D8(0, v8 + 1, 1, (char *)v7);
    uint64_t v7 = result;
LABEL_8:
    unint64_t v11 = *(void *)(v7 + 16);
    do
    {
      unint64_t v12 = *(void *)(v7 + 24);
      if (v11 >= v12 >> 1)
      {
        uint64_t result = (uint64_t)sub_1D789E0D8((char *)(v12 > 1), v11 + 1, 1, (char *)v7);
        uint64_t v7 = result;
      }
      *(void *)(v7 + 16) = v11 + 1;
      *(unsigned char *)(v7 + v11++ + 32) = 0;
      --v10;
    }
    while (v10);
    *uint64_t v4 = v7;
    goto LABEL_13;
  }
  if (v10)
  {
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result) {
      goto LABEL_8;
    }
    goto LABEL_33;
  }
LABEL_13:
  if (v6 == v3) {
    return result;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_30;
  }
  do
  {
    while (1)
    {
      if (v6 <= v3)
      {
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      unint64_t v13 = v6 - 1 + v5;
      if (__OFADD__(v6 - 1, v5)) {
        goto LABEL_24;
      }
      unint64_t v14 = v6 - 1;
      if (v6 < 1) {
        goto LABEL_25;
      }
      unint64_t v15 = *(void *)(v7 + 16);
      if (v14 >= v15) {
        goto LABEL_26;
      }
      if (v13 < v15) {
        break;
      }
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      uint64_t result = (uint64_t)sub_1D7A2EFC4(v7);
      uint64_t v7 = result;
    }
    *(unsigned char *)(v7 + 32 + v13) = *(unsigned char *)(v7 + v6-- + 31);
  }
  while (v14 != v3);
  *uint64_t v4 = v7;
  return result;
}

char *sub_1D7A2EFC4(uint64_t a1)
{
  return sub_1D789E0D8(0, *(void *)(a1 + 16), 0, (char *)a1);
}

void *sub_1D7A2EFD8(void *a1)
{
  return sub_1D789E410(0, a1[2], 0, a1);
}

char *sub_1D7A2EFEC(uint64_t a1)
{
  return sub_1D789E558(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1D7A2F000(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v35 = a3;
  uint64_t v5 = v3[1];
  uint64_t v31 = *v3;
  int64_t v6 = v3[2];
  long long v29 = *(_OWORD *)(v3 + 3);
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
LABEL_43:
    *(void *)uint64_t result = v31;
    *(void *)(result + 8) = v5;
    *(void *)(result + 16) = v6;
    *(_OWORD *)(result + 24) = v29;
    return v35;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    int64_t v7 = (unint64_t)v29 >> 1;
    if (v6 == (unint64_t)v29 >> 1)
    {
LABEL_5:
      uint64_t v35 = 0;
      goto LABEL_43;
    }
    uint64_t v27 = result;
    if (v6 >= (uint64_t)((unint64_t)v29 >> 1))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      int64_t v12 = (unint64_t)v29 >> 1;
      uint64_t v35 = v4;
LABEL_42:
      swift_unknownObjectRetain();
      int64_t v6 = v12;
      uint64_t result = v27;
      goto LABEL_43;
    }
    uint64_t v8 = a2;
    uint64_t v28 = v5 + 112;
    uint64_t v4 = 1;
    while (v7 > v6)
    {
      uint64_t v9 = (uint64_t *)(v5 + 96 * v6);
      uint64_t v10 = *v9;
      char v11 = *((unsigned char *)v9 + 8);
      int64_t v12 = v6 + 1;
      long long v33 = *((_OWORD *)v9 + 3);
      long long v34 = *((_OWORD *)v9 + 2);
      char v32 = *((unsigned char *)v9 + 24);
      if (v32)
      {
        uint64_t v13 = v9[2];
        int64_t v14 = (unint64_t)v29 >> 1;
        if (v12 != v7)
        {
          unint64_t v15 = (void *)(v28 + 96 * v6);
          int64_t v14 = v6 + 1;
          do
          {
            if (v14 >= v7)
            {
LABEL_45:
              __break(1u);
LABEL_46:
              __break(1u);
              goto LABEL_47;
            }
            if (v13 >= *v15) {
              goto LABEL_17;
            }
            int64_t v16 = v14 + 1;
            if (__OFADD__(v14, 1)) {
              goto LABEL_46;
            }
            ++v14;
            v15 += 12;
          }
          while (v16 != v7);
          int64_t v14 = (unint64_t)v29 >> 1;
LABEL_17:
          if (v14 <= v6) {
            goto LABEL_48;
          }
          if (v14 < 0) {
            goto LABEL_49;
          }
        }
        int64_t v17 = v14 - v12;
        if (__OFSUB__(v14, v12)) {
          goto LABEL_50;
        }
        if (v17 < 0) {
          goto LABEL_51;
        }
        int64_t v18 = v7 - v12;
        if (__OFSUB__(v7, v12)) {
          goto LABEL_52;
        }
        if (!v17 || v18 < 0 || (int64_t v19 = (unint64_t)v29 >> 1, v18 >= v17))
        {
          int64_t v19 = v14;
          if (__OFADD__(v12, v17)) {
            goto LABEL_55;
          }
          if (v7 < v14) {
            goto LABEL_53;
          }
        }
        if (v19 <= v6) {
          goto LABEL_54;
        }
        if (v12 != v14)
        {
          if (v12 >= v14) {
            goto LABEL_56;
          }
          uint64_t v20 = (uint64_t *)(v28 + 96 * v6);
          do
          {
            uint64_t v21 = *v20;
            v20 += 12;
            if (v13 >= v21)
            {
              __break(1u);
              goto LABEL_45;
            }
            --v17;
          }
          while (v17);
          if (*(void *)(v5 + 96 * v12 + 16) != v13 + 1) {
            goto LABEL_57;
          }
        }
        uint64_t v22 = v29 & 1 | (2 * v14);
        uint64_t v23 = swift_unknownObjectRetain();
        int64_t v24 = v12;
        int64_t v12 = v19;
        uint64_t v25 = v22;
        uint64_t v26 = v5;
      }
      else
      {
        uint64_t result = v9[8];
        if (!result) {
          goto LABEL_59;
        }
        uint64_t v26 = v9[9];
        int64_t v30 = v9[10];
        uint64_t v25 = v9[11];
        uint64_t v23 = swift_unknownObjectRetain();
        uint64_t v13 = 0;
        int64_t v24 = v30;
      }
      *(void *)uint64_t v8 = v10;
      *(unsigned char *)(v8 + 8) = v11;
      *(void *)(v8 + 16) = v23;
      *(void *)(v8 + 24) = v26;
      *(void *)(v8 + 32) = v24;
      *(void *)(v8 + 40) = v25;
      *(void *)(v8 + 48) = v13;
      *(unsigned char *)(v8 + 56) = v32 ^ 1;
      *(_OWORD *)(v8 + 64) = v34;
      *(_OWORD *)(v8 + 80) = v33;
      if (v4 == v35) {
        goto LABEL_42;
      }
      if (v12 == v7) {
        goto LABEL_41;
      }
      ++v4;
      v8 += 96;
      uint64_t result = swift_unknownObjectRetain();
      int64_t v6 = v12;
      if (v12 >= v7) {
        goto LABEL_40;
      }
    }
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
  }
  __break(1u);
LABEL_59:
  __break(1u);
  return result;
}

uint64_t sub_1D7A2F2C8(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  char v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *char v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1D7A2F4C8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  BOOL v4 = __OFADD__(a1, a2);
  uint64_t result = a1 + a2;
  if (v4)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v7 = (int)a3;
      uint64_t v6 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(a3 + 16);
      uint64_t v6 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v7 = 0;
      uint64_t v6 = BYTE6(a4);
      break;
  }
  if (v6 < result || result < v7)
  {
LABEL_10:
    __break(1u);
    JUMPOUT(0x1D7A2F534);
  }
  return result;
}

uint64_t sub_1D7A2F544(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v5 = (int)a3;
      uint64_t v4 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v5 = *(void *)(a3 + 16);
      uint64_t v4 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v5 = 0;
      uint64_t v4 = BYTE6(a4);
      break;
  }
  if (v4 < a1 || v5 > a1)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v7 = (int)a3;
      uint64_t v6 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(a3 + 16);
      uint64_t v6 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v7 = 0;
      uint64_t v6 = BYTE6(a4);
      break;
  }
  if (v6 < a2 || v7 > a2) {
    goto LABEL_16;
  }
  BOOL v8 = __OFSUB__(a2, a1);
  uint64_t result = a2 - a1;
  if (v8)
  {
LABEL_17:
    __break(1u);
    JUMPOUT(0x1D7A2F610);
  }
  return result;
}

uint64_t sub_1D7A2F630@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  int64_t v6 = a4 >> 1;
  if (a4 >> 1 == a3)
  {
LABEL_7:
    *a6 = result;
    a6[1] = a2;
    a6[2] = a3;
    a6[3] = a4;
    a6[4] = a5;
  }
  else
  {
    uint64_t v7 = (void *)(a2 + 96 * a3 + 16);
    uint64_t v8 = a3;
    do
    {
      if (v8 >= v6)
      {
        __break(1u);
LABEL_9:
        __break(1u);
        goto LABEL_10;
      }
      if (*v7 <= a5) {
        goto LABEL_9;
      }
      ++v8;
      v7 += 12;
    }
    while (v6 != v8);
    if (*(void *)(a2 + 96 * a3 + 16) == a5 + 1) {
      goto LABEL_7;
    }
LABEL_10:
    __break(1u);
  }
  return result;
}

uint64_t sub_1D7A2F6A4(unint64_t a1, char a2, char a3, uint64_t a4, uint64_t a5)
{
  sub_1D78F7E80(a1, a2, a3);
  unint64_t v9 = *(char **)a4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_32;
  }
  while (1)
  {
    unint64_t v11 = *((void *)v9 + 2);
    unint64_t v10 = *((void *)v9 + 3);
    unint64_t v12 = v11 + 1;
    if (v11 >= v10 >> 1) {
      unint64_t v9 = sub_1D789E0D8((char *)(v10 > 1), v11 + 1, 1, v9);
    }
    *((void *)v9 + 2) = v12;
    v9[v11 + 32] = 0;
    *(void *)a4 = v9;
    uint64_t result = sub_1D7A2EB04(a4, a5);
    if (v5) {
      return result;
    }
    unint64_t v9 = *(char **)a4;
    unint64_t v14 = *(void *)(*(void *)a4 + 16);
    unint64_t v15 = v14 - v12;
    if ((uint64_t)(v14 - v12) <= 127)
    {
      if ((v15 & 0x8000000000000000) != 0) {
        goto LABEL_38;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (result) {
        goto LABEL_27;
      }
    }
    else
    {
      if (v14 > v11)
      {
        unint64_t v6 = 71 - __clz(v15);
        a5 = v6 >> 3;
        sub_1D7A2EE3C(v6 >> 3, v11 + 1, v14);
        unint64_t v9 = *(char **)a4;
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if (result) {
          goto LABEL_8;
        }
        goto LABEL_36;
      }
      __break(1u);
    }
    uint64_t result = (uint64_t)sub_1D7A2EFC4((uint64_t)v9);
    unint64_t v9 = (char *)result;
LABEL_27:
    if (v11 < *((void *)v9 + 2))
    {
      v9[v11 + 32] = v15;
      goto LABEL_29;
    }
    __break(1u);
LABEL_36:
    uint64_t result = (uint64_t)sub_1D7A2EFC4((uint64_t)v9);
    unint64_t v9 = (char *)result;
LABEL_8:
    if (v11 >= *((void *)v9 + 2)) {
      break;
    }
    unint64_t v16 = v9 + 32;
    v9[v11 + 32] = (v6 >> 3) | 0x80;
    *(void *)a4 = v9;
    if (v11 + 1 < *((void *)v9 + 2))
    {
      v16[v11 + 1] = v15 >> (8 * ((a5 - 1) & 7));
      if (a5 == 1) {
        goto LABEL_29;
      }
      if (v11 + 2 < *((void *)v9 + 2))
      {
        v16[v11 + 2] = v15 >> (8 * ((a5 - 2) & 7));
        if (a5 == 2) {
          goto LABEL_29;
        }
        if (v11 + 3 < *((void *)v9 + 2))
        {
          v16[v11 + 3] = v15 >> (8 * ((a5 - 3) & 7));
          if (a5 == 3) {
            goto LABEL_29;
          }
          if (v11 + 4 < *((void *)v9 + 2))
          {
            v16[v11 + 4] = v15 >> (8 * ((a5 - 4) & 7));
            if (a5 == 4) {
              goto LABEL_29;
            }
            if (v11 + 5 < *((void *)v9 + 2))
            {
              v16[v11 + 5] = v15 >> (8 * ((a5 - 5) & 7));
              if (a5 == 5) {
                goto LABEL_29;
              }
              if (v11 + 6 < *((void *)v9 + 2))
              {
                v16[v11 + 6] = v15 >> (8 * ((a5 - 6) & 7));
                if (a5 == 6) {
                  goto LABEL_29;
                }
                if (v11 + 7 < *((void *)v9 + 2))
                {
                  v16[v11 + 7] = v15 >> (8 * ((a5 - 7) & 7));
                  if (a5 == 7) {
                    goto LABEL_29;
                  }
                  if (v11 + 8 < *((void *)v9 + 2))
                  {
                    v16[v11 + 8] = v15 >> (v6 & 0x38);
LABEL_29:
                    *(void *)a4 = v9;
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_32:
    unint64_t v9 = sub_1D789E0D8(0, *((void *)v9 + 2) + 1, 1, v9);
  }
  __break(1u);
LABEL_38:
  sub_1D785D944(a5);
  uint64_t result = sub_1D7A9CF88();
  __break(1u);
  return result;
}

uint64_t sub_1D7A2F9A8(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 == *(void *)a2
    && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8)
    && *(void *)(a1 + 16) == *(void *)(a2 + 16)
    && ((*(unsigned __int8 *)(a1 + 24) ^ *(unsigned __int8 *)(a2 + 24)) & 1) == 0
    && (sub_1D7932AA4(*(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a2 + 40), *(void *)(a2 + 48), *(void *)(a2 + 56)) & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 64);
    if (*(void *)(a1 + 64))
    {
      if (v4
        && (sub_1D7932AA4(*(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a2 + 72), *(void *)(a2 + 80), *(void *)(a2 + 88)) & 1) != 0)
      {
        return 1;
      }
    }
    else if (!v4)
    {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_1D7A2FA5C(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2 || *(unsigned __int8 *)(a1 + 8) != *(unsigned __int8 *)(a2 + 8)) {
    goto LABEL_8;
  }
  sub_1D785D98C(a1 + 16, (uint64_t)v13);
  sub_1D785D98C(a2 + 16, (uint64_t)v12);
  sub_1D785D98C((uint64_t)v13, (uint64_t)v14);
  uint64_t v4 = v15;
  uint64_t v5 = v16;
  unint64_t v6 = v17;
  if (v19)
  {
    sub_1D785D98C((uint64_t)v12, (uint64_t)v20);
    if (v25 & 1) != 0 && (sub_1D7932AA4(v4, v5, v6, v21, v22, v23))
    {
LABEL_12:
      char v8 = sub_1D7932AA4(*(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a2 + 72), *(void *)(a2 + 80), *(void *)(a2 + 88));
      return v8 & 1;
    }
    goto LABEL_8;
  }
  uint64_t v7 = v18;
  sub_1D785D98C((uint64_t)v12, (uint64_t)v20);
  if (v25)
  {
LABEL_8:
    char v8 = 0;
    return v8 & 1;
  }
  uint64_t v10 = v24;
  char v11 = sub_1D7932B78(v4, v5, v6, v21, v22, v23);
  char v8 = 0;
  if ((v11 & 1) != 0 && v7 == v10) {
    goto LABEL_12;
  }
  return v8 & 1;
}

uint64_t sub_1D7A2FB8C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int64_t v4 = a4 >> 1;
  uint64_t result = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_25:
    __break(1u);
    return result;
  }
  uint64_t v6 = a3;
  uint64_t result = sub_1D7A9D5E8();
  if (v4 != v6)
  {
    uint64_t v21 = v4;
    while (v6 < v4)
    {
      uint64_t v7 = (void *)(a2 + 96 * v6);
      uint64_t v8 = v7[5];
      uint64_t v9 = v7[6];
      uint64_t v10 = v7[10];
      uint64_t v23 = v7[9];
      unint64_t v24 = v7[11];
      unint64_t v12 = v7[7];
      uint64_t v11 = v7[8];
      sub_1D7A9D5E8();
      sub_1D7A9D5E8();
      sub_1D7A9D5E8();
      sub_1D7A9D5F8();
      unint64_t v13 = v12 >> 1;
      uint64_t result = (v12 >> 1) - v9;
      if (__OFSUB__(v12 >> 1, v9)) {
        goto LABEL_21;
      }
      uint64_t result = sub_1D7A9D5E8();
      BOOL v14 = __OFSUB__(v13, v9);
      uint64_t v15 = v13 - v9;
      if (v15)
      {
        if ((v15 < 0) ^ v14 | (v15 == 0)) {
          goto LABEL_23;
        }
        uint64_t v16 = v8 + v9;
        do
        {
          ++v16;
          sub_1D7A9D5F8();
          --v15;
        }
        while (v15);
      }
      if (v11)
      {
        sub_1D7A9D5F8();
        unint64_t v17 = v24 >> 1;
        uint64_t result = (v24 >> 1) - v10;
        if (__OFSUB__(v24 >> 1, v10)) {
          goto LABEL_22;
        }
        uint64_t result = sub_1D7A9D5E8();
        BOOL v18 = __OFSUB__(v17, v10);
        uint64_t v19 = v17 - v10;
        if (v19)
        {
          if ((v19 < 0) ^ v18 | (v19 == 0)) {
            goto LABEL_24;
          }
          uint64_t v20 = v23 + v10;
          do
          {
            ++v20;
            uint64_t result = sub_1D7A9D5F8();
            --v19;
          }
          while (v19);
        }
      }
      else
      {
        uint64_t result = sub_1D7A9D5F8();
      }
      ++v6;
      int64_t v4 = v21;
      if (v6 == v21) {
        return result;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  return result;
}

uint64_t sub_1D7A2FCF8(uint64_t a1)
{
  return a1;
}

void sub_1D7A2FD24(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  int64_t v5 = a4 >> 1;
  int64_t v6 = a3;
  if (a4 >> 1 != a3)
  {
    uint64_t v7 = (void *)(a2 + 96 * a3 + 16);
    int64_t v6 = a3;
    while (1)
    {
      if (v6 >= v5)
      {
        __break(1u);
        goto LABEL_13;
      }
      if (*(void *)(a5 + 16) >= *v7) {
        break;
      }
      ++v6;
      v7 += 12;
      if (v5 == v6)
      {
        int64_t v6 = a4 >> 1;
        break;
      }
    }
    if (v6 >= a3) {
      goto LABEL_8;
    }
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
LABEL_8:
  if (v5 < a3)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v5 < v6)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v6 < 0) {
LABEL_16:
  }
    __break(1u);
}

uint64_t sub_1D7A2FDA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result = sub_1D7A2D270(a1, a2, a3, a4);
  if (!v5)
  {
    unint64_t v11 = v10;
    unint64_t v12 = v10 >> 1;
    if (v9 == v10 >> 1)
    {
      __break(1u);
    }
    else if (v9 < (uint64_t)(v10 >> 1))
    {
      uint64_t v13 = result;
      uint64_t v14 = v8;
      uint64_t v15 = (long long *)(v8 + 96 * v9);
      long long v16 = v15[1];
      long long v44 = *v15;
      long long v45 = v16;
      long long v17 = v15[2];
      long long v18 = v15[3];
      long long v19 = v15[5];
      v48[0] = v15[4];
      v48[1] = v19;
      long long v46 = v17;
      long long v47 = v18;
      int64_t v20 = v9 + 1;
      int v51 = BYTE8(v45);
      if (BYTE8(v45))
      {
        sub_1D7A2FD24(result, v8, v9 + 1, v10, (uint64_t)&v44);
        uint64_t v41 = v29;
        uint64_t result = (v28 >> 1) - v27;
        if (__OFSUB__(v28 >> 1, v27))
        {
LABEL_17:
          __break(1u);
          goto LABEL_18;
        }
        uint64_t v30 = v26;
        uint64_t v31 = v27;
        unint64_t v32 = v28;
        sub_1D7A2C2B0(result, v13, v14, v20, v11);
        unint64_t v37 = v33;
        int64_t v20 = v34;
        sub_1D7A2F630(v41, v30, v31, v32, v45, v42);
        uint64_t v21 = v42[0];
        uint64_t v39 = v42[1];
        uint64_t v22 = v42[2];
        long long v38 = v43;
        long long v40 = v46;
        uint64_t v24 = *((void *)&v47 + 1);
        uint64_t v25 = v47;
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        uint64_t result = swift_unknownObjectRelease();
        unint64_t v12 = v37 >> 1;
      }
      else
      {
        sub_1D7871D78((uint64_t)v48, (uint64_t)v49, &qword_1EA847128);
        uint64_t result = sub_1D7871D78((uint64_t)v49, (uint64_t)v50, &qword_1EA847128);
        uint64_t v21 = v50[0];
        if (!v50[0])
        {
LABEL_18:
          __break(1u);
          return result;
        }
        uint64_t v22 = v50[2];
        uint64_t v39 = v50[1];
        *((void *)&v23 + 1) = *((void *)&v46 + 1);
        long long v40 = v46;
        uint64_t v24 = *((void *)&v47 + 1);
        uint64_t v25 = v47;
        *(void *)&long long v23 = v50[3];
        long long v38 = v23;
        sub_1D7A2FCF8((uint64_t)v49);
        swift_unknownObjectRetain();
        uint64_t result = swift_unknownObjectRelease();
      }
      if (!__OFSUB__(v12, v20))
      {
        if (v12 == v20)
        {
          char v35 = BYTE8(v44);
          BOOL v36 = (v51 & 1) == 0;
          *(void *)a5 = v44;
          *(unsigned char *)(a5 + 8) = v35;
          *(void *)(a5 + 16) = v21;
          *(void *)(a5 + 24) = v39;
          *(void *)(a5 + 32) = v22;
          *(_OWORD *)(a5 + 40) = v38;
          *(unsigned char *)(a5 + 56) = v36;
          *(_OWORD *)(a5 + 64) = v40;
          *(void *)(a5 + 80) = v25;
          *(void *)(a5 + 88) = v24;
          return result;
        }
        goto LABEL_16;
      }
LABEL_15:
      __break(1u);
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
    __break(1u);
    goto LABEL_15;
  }
  return result;
}

ValueMetadata *type metadata accessor for DER()
{
  return &type metadata for DER;
}

uint64_t destroy for ASN1Node.Content(uint64_t a1)
{
  return j__swift_unknownObjectRelease(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t initializeWithCopy for ASN1Node.Content(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = *((unsigned __int8 *)a2 + 40);
  j__swift_unknownObjectRetain(*a2, v4, v5, v6, v7, v8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 40) = v8;
  return a1;
}

uint64_t *assignWithCopy for ASN1Node.Content(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = *((unsigned __int8 *)a2 + 40);
  j__swift_unknownObjectRetain(*a2, v4, v5, v6, v7, v8);
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  uint64_t v11 = a1[2];
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  uint64_t v14 = *((unsigned __int8 *)a1 + 40);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  *((unsigned char *)a1 + 40) = v8;
  j__swift_unknownObjectRelease(v9, v10, v11, v12, v13, v14);
  return a1;
}

uint64_t *assignWithTake for ASN1Node.Content(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  char v4 = *(unsigned char *)(a2 + 40);
  uint64_t v5 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  uint64_t v10 = *((unsigned __int8 *)a1 + 40);
  long long v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v11;
  a1[4] = v3;
  *((unsigned char *)a1 + 40) = v4;
  j__swift_unknownObjectRelease(v5, v7, v6, v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for ASN1Node.Content(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ASN1Node.Content(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1D7A301F0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t sub_1D7A301F8(uint64_t result, char a2)
{
  *(unsigned char *)(result + 40) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ASN1Node.Content()
{
  return &type metadata for ASN1Node.Content;
}

uint64_t destroy for DER.ParserNode()
{
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for DER.ParserNode(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v3 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v3;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DER.ParserNode(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  return a1;
}

uint64_t assignWithTake for DER.ParserNode(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  swift_unknownObjectRelease();
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  swift_unknownObjectRelease();
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for DER.ParserNode(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DER.ParserNode(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DER.ParserNode()
{
  return &type metadata for DER.ParserNode;
}

ValueMetadata *type metadata accessor for DER.ParseResult()
{
  return &type metadata for DER.ParseResult;
}

ValueMetadata *type metadata accessor for ASN1NodeCollection()
{
  return &type metadata for ASN1NodeCollection;
}

uint64_t destroy for ASN1Node(uint64_t a1)
{
  j__swift_unknownObjectRelease(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned __int8 *)(a1 + 56));
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for ASN1Node(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(unsigned __int8 *)(a2 + 56);
  j__swift_unknownObjectRetain(v4, v5, v6, v7, v8, v9);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  *(unsigned char *)(a1 + 56) = v9;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ASN1Node(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(unsigned __int8 *)(a2 + 56);
  j__swift_unknownObjectRetain(v4, v5, v6, v7, v8, v9);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v13 = *(void *)(a1 + 40);
  uint64_t v14 = *(void *)(a1 + 48);
  uint64_t v15 = *(unsigned __int8 *)(a1 + 56);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  *(unsigned char *)(a1 + 56) = v9;
  j__swift_unknownObjectRelease(v10, v11, v12, v13, v14, v15);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  return a1;
}

uint64_t assignWithTake for ASN1Node(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 48);
  char v5 = *(unsigned char *)(a2 + 56);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(unsigned __int8 *)(a1 + 56);
  long long v12 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v12;
  *(void *)(a1 + 48) = v4;
  *(unsigned char *)(a1 + 56) = v5;
  j__swift_unknownObjectRelease(v6, v7, v8, v9, v10, v11);
  swift_unknownObjectRelease();
  long long v13 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v13;
  return a1;
}

uint64_t getEnumTagSinglePayload for ASN1Node(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ASN1Node(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 64) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ASN1Node()
{
  return &type metadata for ASN1Node;
}

ValueMetadata *type metadata accessor for ASN1NodeCollection.Iterator()
{
  return &type metadata for ASN1NodeCollection.Iterator;
}

unint64_t sub_1D7A307BC()
{
  unint64_t result = qword_1EA847130;
  if (!qword_1EA847130)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847130);
  }
  return result;
}

unint64_t sub_1D7A30814()
{
  unint64_t result = qword_1EA847138;
  if (!qword_1EA847138)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847138);
  }
  return result;
}

uint64_t IdentityProofingAttributeConfigHelper.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t IdentityProofingAttributeConfigHelper.init()()
{
  return v0;
}

uint64_t sub_1D7A30884(uint64_t a1, uint64_t a2)
{
  uint64_t v49 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847140);
  MEMORY[0x1F4188790](v3 - 8, v4, v5, v6, v7, v8, v9, v10);
  long long v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847148);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13, v15, v16, v17, v18, v19, v20, v21);
  uint64_t v48 = (char *)&v48 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847150);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v32 = MEMORY[0x1F4188790](v23, v25, v26, v27, v28, v29, v30, v31);
  int64_t v34 = (char *)&v48 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v32, v35, v36, v37, v38, v39, v40, v41);
  long long v43 = (char *)&v48 - v42;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847158);
  sub_1D7A9B4D8();
  sub_1D7A9B4E8();
  long long v44 = *(void (**)(char *, uint64_t))(v24 + 8);
  v44(v34, v23);
  uint64_t v50 = a1;
  uint64_t v51 = v49;
  sub_1D792A744();
  sub_1D7A30BC0();
  sub_1D7A9BF18();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    v44(v43, v23);
    sub_1D7A30C1C((uint64_t)v12);
    return 0;
  }
  else
  {
    long long v46 = v48;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v48, v12, v13);
    swift_getKeyPath();
    sub_1D7A9B4F8();
    swift_release();
    uint64_t v45 = MEMORY[0x1D947AE00](v50, v51, v52, v53);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v46, v13);
    v44(v43, v23);
  }
  return v45;
}

unint64_t sub_1D7A30BC0()
{
  unint64_t result = qword_1EA847160;
  if (!qword_1EA847160)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA847150);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847160);
  }
  return result;
}

uint64_t sub_1D7A30C1C(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847140);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t IdentityProofingAttributeConfigHelper.deinit()
{
  return v0;
}

uint64_t IdentityProofingAttributeConfigHelper.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for IdentityProofingAttributeConfigHelper()
{
  return self;
}

uint64_t method lookup function for IdentityProofingAttributeConfigHelper(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for IdentityProofingAttributeConfigHelper);
}

uint64_t dispatch thunk of IdentityProofingAttributeConfigHelper.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of IdentityProofingAttributeConfigHelper.fetchAttributeID(input:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

void sub_1D7A30D08(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

void sub_1D7A30D70(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = sub_1D7A9AE48();
  }
  else {
    uint64_t v3 = 0;
  }
  id v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
}

uint64_t sub_1D7A30DD4()
{
  __int16 v4 = 508;
  unint64_t v0 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
  sub_1D7860544();
  uint64_t v1 = swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000013, 0x80000001D7ABD9C0, &v4, 0, v0, 0xD000000000000067, 0x80000001D7ACA340, v2, 0xD000000000000021, 0x80000001D7AB74A0, 20);
  return v1;
}

id IdentityProofingDataSharingClient.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id IdentityProofingDataSharingClient.init()()
{
  id v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC13CoreIDVShared33IdentityProofingDataSharingClient_remoteObjectProxy;
  *(void *)&v0[OBJC_IVAR____TtC13CoreIDVShared33IdentityProofingDataSharingClient_remoteObjectProxy] = 0;
  uint64_t v3 = OBJC_IVAR____TtC13CoreIDVShared33IdentityProofingDataSharingClient_connection;
  __int16 v4 = self;
  uint64_t v5 = v0;
  id v6 = objc_msgSend(v4, sel_interfaceWithProtocol_, &unk_1F2F33418);
  long long aBlock = 0u;
  long long v27 = 0u;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847178);
  swift_allocObject();
  uint64_t v7 = sub_1D7A33214(0xD000000000000035, 0x80000001D7AC2800, (uint64_t)v6, 0, 0, 0, 0, 0, (uint64_t)&aBlock, (uint64_t)sub_1D7A30DD4, 0, (uint64_t)&block_descriptor_81_0, (uint64_t)&block_descriptor_78_0);

  *(void *)&v1[v3] = v7;
  uint64_t v8 = (uint64_t)&v5[OBJC_IVAR____TtC13CoreIDVShared33IdentityProofingDataSharingClient_remoteObjectProxyError];
  LOWORD(aBlock) = 511;
  unint64_t v9 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000001BLL, 0x80000001D7AC7BF0, (__int16 *)&aBlock, 0, v9, 0xD000000000000067, 0x80000001D7ACA340, v8, 0xD000000000000021, 0x80000001D7AB74A0, 23);
  uint64_t v10 = (void *)v7[2];
  uint64_t v11 = OBJC_IVAR____TtC13CoreIDVShared33IdentityProofingDataSharingClient_serverConnection;
  *(void *)&v5[OBJC_IVAR____TtC13CoreIDVShared33IdentityProofingDataSharingClient_serverConnection] = v10;
  LOWORD(aBlock) = 508;
  type metadata accessor for IdentityProofingDataSharingDisconnectionHandler();
  swift_allocObject();
  id v12 = v10;
  *(void *)&v5[OBJC_IVAR____TtC13CoreIDVShared33IdentityProofingDataSharingClient_disconnectHandler] = sub_1D7865208(0xD000000000000021, 0x80000001D7AB74A0, (unsigned __int16 *)&aBlock);
  id v13 = v12;
  id v14 = objc_msgSend(v4, sel_interfaceWithProtocol_, &unk_1F2F33418);
  objc_msgSend(v13, sel_setRemoteObjectInterface_, v14);

  uint64_t v15 = *(void **)&v5[v11];
  swift_retain();
  id v16 = v15;
  sub_1D7865640(v16);
  swift_release();

  uint64_t v17 = *(void **)&v5[v11];
  uint64_t v28 = sub_1D7A31264;
  uint64_t v29 = 0;
  *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
  *((void *)&aBlock + 1) = 1107296256;
  *(void *)&long long v27 = sub_1D7A30D08;
  *((void *)&v27 + 1) = &block_descriptor_13;
  uint64_t v18 = _Block_copy(&aBlock);
  id v19 = v17;
  id v20 = objc_msgSend(v19, sel_remoteObjectProxyWithErrorHandler_, v18);
  _Block_release(v18);

  sub_1D7A9CB08();
  swift_unknownObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF92D0);
  int v21 = swift_dynamicCast();
  uint64_t v22 = v25;
  if (!v21) {
    uint64_t v22 = 0;
  }
  *(void *)&v1[v2] = v22;

  swift_unknownObjectRelease();
  v24.receiver = v5;
  v24.super_class = (Class)type metadata accessor for IdentityProofingDataSharingClient();
  return objc_msgSendSuper2(&v24, sel_init);
}

uint64_t sub_1D7A31264(void *a1)
{
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v4, v5, v6, v7, v8, v9, v10);
  id v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v13 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v12, v13, v2);
  id v14 = a1;
  id v15 = a1;
  id v16 = sub_1D7A9B5D8();
  os_log_type_t v17 = sub_1D7A9C748();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    uint64_t v24 = v19;
    *(_DWORD *)uint64_t v18 = 136315138;
    v23[0] = v18 + 4;
    swift_getErrorValue();
    uint64_t v20 = sub_1D7A9D548();
    v23[1] = sub_1D7923300(v20, v21, &v24);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1D7853000, v16, v17, "error: IdentityProofingDataSharingClient init %s", v18, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v19, -1, -1);
    MEMORY[0x1D947D740](v18, -1, -1);
  }
  else
  {
  }
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v12, v2);
}

uint64_t sub_1D7A31518()
{
  *(void *)(v1 + 24) = v0;
  return MEMORY[0x1F4188298](sub_1D7A31538, 0, 0);
}

uint64_t sub_1D7A31538()
{
  uint64_t v1 = *(void *)(v0[3] + OBJC_IVAR____TtC13CoreIDVShared33IdentityProofingDataSharingClient_connection);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[4] = v2;
  v2[2] = v1;
  v2[3] = &unk_1EA8471A0;
  v2[4] = 0;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[5] = v3;
  v3[2] = 0;
  v3[3] = 0;
  void v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1D79CB354;
  return MEMORY[0x1F4188148](v0 + 2, &unk_1EA8471B0, v2, sub_1D7A33668, v3, 0, 0, &type metadata for IdentityProofingDataSharingUserConsent);
}

uint64_t sub_1D7A3166C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)(v2 + 128) = a1;
  *(void *)(v2 + 136) = v3;
  return MEMORY[0x1F4188298](sub_1D7A31690, 0, 0);
}

uint64_t sub_1D7A31690()
{
  uint64_t v1 = (void *)v0[17];
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_1D79CB62C;
  uint64_t v2 = swift_continuation_init();
  v0[10] = MEMORY[0x1E4F143A8];
  v0[11] = 0x40000000;
  v0[12] = sub_1D7A3178C;
  v0[13] = &block_descriptor_74;
  v0[14] = v2;
  objc_msgSend(v1, sel_fetchUserConsentWithCompletionHandler_, v0 + 10);
  return MEMORY[0x1F41881E8](v0 + 2);
}

uint64_t sub_1D7A3178C(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF9740);
    swift_allocError();
    *uint64_t v4 = a3;
    id v5 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    **(void **)(*(void *)(*(void *)(a1 + 32) + 64) + 40) = a2;
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_1D7A319A8(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  id v4 = a2;
  id v5 = (void *)swift_task_alloc();
  v2[4] = v5;
  *id v5 = v2;
  v5[1] = sub_1D7A31A6C;
  v5[3] = v4;
  return MEMORY[0x1F4188298](sub_1D7A31538, 0, 0);
}

uint64_t sub_1D7A31A6C(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v6 = *v2;
  uint64_t v5 = *v2;
  uint64_t v7 = *(void **)(*v2 + 16);
  uint64_t v8 = *v2;
  swift_task_dealloc();

  uint64_t v9 = *(void *)(v5 + 24);
  if (v3)
  {
    uint64_t v10 = (void *)sub_1D7A9AE48();

    (*(void (**)(uint64_t))(v9 + 16))(v9);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, void))(v9 + 16))(v9, a1, 0);
  }
  _Block_release(*(const void **)(v6 + 24));
  uint64_t v11 = *(uint64_t (**)(void))(v8 + 8);
  return v11();
}

void sub_1D7A31BF8(uint64_t a1, void (*a2)(void *), uint64_t a3)
{
  id v4 = v3;
  uint64_t v57 = a1;
  uint64_t v7 = sub_1D7A9B5F8();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7, v9, v10, v11, v12, v13, v14, v15);
  os_log_type_t v17 = (char *)&aBlock[-1] - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_1D7A9B1A8();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18, v20, v21, v22, v23, v24, v25, v26);
  uint64_t v28 = (char *)&aBlock[-1] - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = *(void **)&v4[OBJC_IVAR____TtC13CoreIDVShared33IdentityProofingDataSharingClient_remoteObjectProxy];
  if (v29)
  {
    swift_unknownObjectRetain();
    sub_1D7A9B198();
    uint64_t v30 = sub_1D7A9B158();
    uint64_t v32 = v31;
    (*(void (**)(char *, uint64_t))(v19 + 8))(v28, v18);
    uint64_t v33 = swift_allocObject();
    uint64_t v34 = swift_weakInit();
    MEMORY[0x1F4188790](v34, v35, v36, v37, v38, v39, v40, v41);
    *(&v57 - 6) = v33;
    *(&v57 - 5) = v30;
    *(&v57 - 4) = v32;
    *(&v57 - 3) = (uint64_t)a2;
    *(&v57 - 2) = a3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9410);
    sub_1D7A9C7E8();
    swift_release();
    uint64_t v42 = (void *)swift_allocObject();
    v42[2] = v4;
    void v42[3] = v30;
    id v42[4] = v32;
    v42[5] = a2;
    v42[6] = a3;
    aBlock[4] = sub_1D7A336C8;
    aBlock[5] = v42;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1D79C1C04;
    aBlock[3] = &block_descriptor_9_0;
    long long v43 = _Block_copy(aBlock);
    long long v44 = v4;
    swift_retain();
    swift_release();
    objc_msgSend(v29, sel_didChangeUserConsent_completion_, v57, v43);
    _Block_release(v43);
    swift_unknownObjectRelease();
  }
  else
  {
    if (qword_1EBDF9DC8 != -1) {
      swift_once();
    }
    uint64_t v45 = a2;
    uint64_t v46 = __swift_project_value_buffer(v7, (uint64_t)qword_1EBDFBE70);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v17, v46, v7);
    long long v47 = sub_1D7A9B5D8();
    os_log_type_t v48 = sub_1D7A9C748();
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v49 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v49 = 0;
      _os_log_impl(&dword_1D7853000, v47, v48, "Cannot invoke didChangeUserConsent because no proxy is set", v49, 2u);
      MEMORY[0x1D947D740](v49, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v8 + 8))(v17, v7);
    __int16 v50 = *(_WORD *)&v4[OBJC_IVAR____TtC13CoreIDVShared33IdentityProofingDataSharingClient_remoteObjectProxyError];
    uint64_t v51 = *(void *)&v4[OBJC_IVAR____TtC13CoreIDVShared33IdentityProofingDataSharingClient_remoteObjectProxyError + 8];
    uint64_t v52 = *(void *)&v4[OBJC_IVAR____TtC13CoreIDVShared33IdentityProofingDataSharingClient_remoteObjectProxyError + 16];
    uint64_t v53 = *(void **)&v4[OBJC_IVAR____TtC13CoreIDVShared33IdentityProofingDataSharingClient_remoteObjectProxyError + 24];
    sub_1D7860544();
    uint64_t v54 = (void *)swift_allocError();
    *(_WORD *)uint64_t v55 = v50;
    *(void *)(v55 + 8) = v51;
    *(void *)(v55 + 16) = v52;
    *(void *)(v55 + 24) = v53;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v56 = v53;
    v45(v54);
  }
}

uint64_t sub_1D7A32060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  swift_allocObject();
  swift_weakInit();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA846680);
  sub_1D7A9C7E8();
  swift_release();
  if (v8) {
    sub_1D78EEA8C(v8);
  }
  return a5(a1);
}

uint64_t sub_1D7A321C8()
{
  *(void *)(v1 + 16) = v0;
  return MEMORY[0x1F4188298](sub_1D7A321E8, 0, 0);
}

uint64_t sub_1D7A321E8()
{
  uint64_t v1 = *(void *)(v0[2] + OBJC_IVAR____TtC13CoreIDVShared33IdentityProofingDataSharingClient_connection);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[3] = v2;
  v2[2] = v1;
  v2[3] = &unk_1EA8471C0;
  v2[4] = 0;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[4] = v3;
  v3[2] = 0;
  v3[3] = 0;
  void v3[4] = v1;
  id v4 = (void *)swift_task_alloc();
  v0[5] = v4;
  *id v4 = v0;
  v4[1] = sub_1D7A3231C;
  uint64_t v5 = MEMORY[0x1E4FBB390];
  return MEMORY[0x1F4188148](v0 + 7, &unk_1EA8471D0, v2, sub_1D7A33794, v3, 0, 0, v5);
}

uint64_t sub_1D7A3231C()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](sub_1D7A32468, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(unsigned __int8 *)(v2 + 56);
    id v4 = *(uint64_t (**)(uint64_t))(v2 + 8);
    return v4(v3);
  }
}

uint64_t sub_1D7A32468()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t sub_1D7A324D8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)(v2 + 120) = a1;
  *(void *)(v2 + 128) = v3;
  return MEMORY[0x1F4188298](sub_1D7A324FC, 0, 0);
}

uint64_t sub_1D7A324FC()
{
  uint64_t v1 = (void *)v0[16];
  v0[2] = v0;
  v0[7] = v0 + 18;
  v0[3] = sub_1D7A325F8;
  uint64_t v2 = swift_continuation_init();
  v0[10] = MEMORY[0x1E4F143A8];
  v0[11] = 0x40000000;
  v0[12] = sub_1D7A32708;
  v0[13] = &block_descriptor_69;
  v0[14] = v2;
  objc_msgSend(v1, sel_checkUserConsentWithCompletionHandler_, v0 + 10);
  return MEMORY[0x1F41881E8](v0 + 2);
}

uint64_t sub_1D7A325F8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 136) = v1;
  if (v1) {
    uint64_t v2 = sub_1D79C2CC8;
  }
  else {
    uint64_t v2 = sub_1D79C61A0;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

uint64_t sub_1D7A32708(uint64_t a1, char a2, void *a3)
{
  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF9740);
    swift_allocError();
    *uint64_t v4 = a3;
    id v5 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    **(unsigned char **)(*(void *)(*(void *)(a1 + 32) + 64) + 40) = a2;
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_1D7A32924(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  id v4 = a2;
  id v5 = (void *)swift_task_alloc();
  v2[4] = v5;
  *id v5 = v2;
  v5[1] = sub_1D7A329E4;
  v5[2] = v4;
  return MEMORY[0x1F4188298](sub_1D7A321E8, 0, 0);
}

uint64_t sub_1D7A329E4(char a1)
{
  uint64_t v3 = v1;
  uint64_t v6 = *v2;
  uint64_t v5 = *v2;
  uint64_t v7 = *(void **)(*v2 + 16);
  uint64_t v8 = *v2;
  swift_task_dealloc();

  uint64_t v9 = *(void *)(v5 + 24);
  if (v3)
  {
    uint64_t v10 = (void *)sub_1D7A9AE48();

    (*(void (**)(uint64_t, void, void *))(v9 + 16))(v9, 0, v10);
  }
  else
  {
    (*(void (**)(uint64_t, void, void))(v9 + 16))(v9, a1 & 1, 0);
  }
  _Block_release(*(const void **)(v6 + 24));
  uint64_t v11 = *(uint64_t (**)(void))(v8 + 8);
  return v11();
}

id IdentityProofingDataSharingClient.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for IdentityProofingDataSharingClient();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1D7A32C3C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  id v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v4;
  *id v4 = v3;
  v4[1] = sub_1D7874050;
  return v6();
}

uint64_t sub_1D7A32D08(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_1D7874050;
  return v7();
}

uint64_t sub_1D7A32DD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1D7A9C4A8();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_1D7A9C498();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_1D7871C4C(a1, &qword_1EBDF9978);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1D7A9C438();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_1D7A32F80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a3;
  v4[6] = a4;
  v4[3] = a1;
  v4[4] = a2;
  return MEMORY[0x1F4188298](sub_1D7A32FA4, 0, 0);
}

uint64_t sub_1D7A32FA4()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 56) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 32);
  *(void *)(v2 + 32) = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1D79CEACC;
  return MEMORY[0x1F4188160](v0 + 16, 0, 0, 0xD000000000000021, 0x80000001D7AC7A00, sub_1D7A3421C, v2, &type metadata for IdentityProofingDataSharingUserConsent);
}

uint64_t sub_1D7A330A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return MEMORY[0x1F4188298](sub_1D7A330CC, 0, 0);
}

uint64_t sub_1D7A330CC()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 48) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 24);
  *(void *)(v2 + 32) = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1D79CE724;
  uint64_t v4 = MEMORY[0x1E4FBB390];
  return MEMORY[0x1F4188160](v0 + 72, 0, 0, 0xD000000000000021, 0x80000001D7AC7A00, sub_1D7A341F0, v2, v4);
}

void *sub_1D7A331D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return sub_1D7A33214(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, (uint64_t)&block_descriptor_87, (uint64_t)&block_descriptor_84_0);
}

void *sub_1D7A33214(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v43 = a7;
  uint64_t v44 = a6;
  id v18 = objc_allocWithZone(MEMORY[0x1E4F29268]);
  uint64_t v19 = (void *)sub_1D7A9BF98();
  swift_bridgeObjectRelease();
  id v20 = objc_msgSend(v18, sel_initWithMachServiceName_options_, v19, 4096);

  v13[2] = v20;
  objc_msgSend(v20, sel_setExportedInterface_, a8);
  uint64_t v45 = a9;
  sub_1D7A34228(a9, (uint64_t)&aBlock);
  uint64_t v21 = v49;
  if (v49)
  {
    uint64_t v22 = __swift_project_boxed_opaque_existential_1(&aBlock, v49);
    uint64_t v23 = *(void *)(v21 - 8);
    MEMORY[0x1F4188790](v22, v22, v24, v25, v26, v27, v28, v29);
    uint64_t v31 = (char *)&v42 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v23 + 16))(v31);
    id v32 = v20;
    uint64_t v33 = sub_1D7A9D348();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v31, v21);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&aBlock);
  }
  else
  {
    id v34 = v20;
    uint64_t v33 = 0;
  }
  objc_msgSend(v20, sel_setExportedObject_, v33);

  swift_unknownObjectRelease();
  uint64_t v35 = (void *)v13[2];
  objc_msgSend(v35, sel_setRemoteObjectInterface_, a3);
  objc_msgSend(v35, sel_activate);
  if (a4)
  {
    uint64_t v50 = a4;
    uint64_t v51 = a5;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v47 = 1107296256;
    os_log_type_t v48 = sub_1D79899E4;
    uint64_t v49 = a12;
    uint64_t v36 = _Block_copy(&aBlock);
    id v37 = v35;
    sub_1D78F0D88(a4);
    swift_release();
  }
  else
  {
    id v38 = v35;
    uint64_t v36 = 0;
  }
  objc_msgSend(v35, sel_setInvalidationHandler_, v36);
  _Block_release(v36);

  uint64_t v39 = (void *)v13[2];
  if (v44)
  {
    uint64_t v50 = v44;
    uint64_t v51 = v43;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v47 = 1107296256;
    os_log_type_t v48 = sub_1D79899E4;
    uint64_t v49 = a13;
    uint64_t v40 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
  }
  else
  {
    uint64_t v40 = 0;
  }
  objc_msgSend(v39, sel_setInterruptionHandler_, v40);
  _Block_release(v40);
  sub_1D7871C4C(v45, (uint64_t *)&unk_1EBDF9680);
  v13[3] = a10;
  v13[4] = a11;
  return v13;
}

uint64_t block_copy_helper_13(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_13()
{
  return swift_release();
}

uint64_t type metadata accessor for IdentityProofingDataSharingClient()
{
  return self;
}

uint64_t sub_1D7A335A0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_1D786EC1C;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1EA8471A8 + dword_1EA8471A8);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_1D7A33668()
{
  return sub_1D79B851C(v0[2], v0[3], v0[4]);
}

uint64_t sub_1D7A33674()
{
  swift_weakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1D7A336AC@<X0>(BOOL *a1@<X8>)
{
  return sub_1D7A340B8(a1);
}

uint64_t sub_1D7A336CC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_1D7874050;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1EA8471C8 + dword_1EA8471C8);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_1D7A33794()
{
  return sub_1D79B8550(v0[2], v0[3], v0[4]);
}

uint64_t method lookup function for IdentityProofingDataSharingClient(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for IdentityProofingDataSharingClient);
}

uint64_t dispatch thunk of IdentityProofingDataSharingClient.fetchUserConsent()()
{
  uint64_t v2 = *(int **)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90);
  uint64_t v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1D79B7D7C;
  return v5();
}

uint64_t dispatch thunk of IdentityProofingDataSharingClient.didChangeUserConsent(_:completion:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of IdentityProofingDataSharingClient.checkUserConsent()()
{
  uint64_t v2 = *(int **)((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0);
  uint64_t v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1D79B7D7C;
  return v5();
}

uint64_t sub_1D7A339F8()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_1D786EC1C;
  uint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_1EA8471E8 + dword_1EA8471E8);
  return v5(v2, v3);
}

uint64_t sub_1D7A33AAC()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D7A33AE4(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1D7874050;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1EA847208 + dword_1EA847208);
  return v6(a1, v4);
}

uint64_t sub_1D7A33B9C(uint64_t a1, char *a2, void *a3)
{
  uint64_t v6 = sub_1D7A9B5F8();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v8, v9, v10, v11, v12, v13, v14);
  uint64_t v16 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_1D7A9B1A8();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17, v19, v20, v21, v22, v23, v24, v25);
  uint64_t v27 = (char *)&v64 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = swift_allocObject();
  uint64_t v29 = a3;
  *(void *)(v28 + 16) = a3;
  uint64_t v30 = *(void **)&a2[OBJC_IVAR____TtC13CoreIDVShared33IdentityProofingDataSharingClient_remoteObjectProxy];
  if (v30)
  {
    uint64_t v66 = a1;
    _Block_copy(v29);
    swift_unknownObjectRetain();
    sub_1D7A9B198();
    uint64_t v31 = sub_1D7A9B158();
    uint64_t v65 = a2;
    uint64_t v33 = v32;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v27, v17);
    uint64_t v34 = swift_allocObject();
    uint64_t v35 = swift_weakInit();
    MEMORY[0x1F4188790](v35, v36, v37, v38, v39, v40, v41, v42);
    *(&v64 - 6) = v34;
    *(&v64 - 5) = v31;
    *(&v64 - 4) = v33;
    *(&v64 - 3) = (uint64_t)sub_1D79D5B58;
    *(&v64 - 2) = v28;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9410);
    sub_1D7A9C7E8();
    swift_release();
    uint64_t v43 = (void *)swift_allocObject();
    uint64_t v44 = v65;
    v43[2] = v65;
    v43[3] = v31;
    v43[4] = v33;
    v43[5] = sub_1D79D5B58;
    v43[6] = v28;
    aBlock[4] = sub_1D7A336C8;
    aBlock[5] = v43;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1D79C1C04;
    aBlock[3] = &block_descriptor_51_0;
    uint64_t v45 = _Block_copy(aBlock);
    id v46 = v44;
    swift_retain();
    swift_release();
    objc_msgSend(v30, sel_didChangeUserConsent_completion_, v66, v45);
    _Block_release(v45);
    swift_release();
    return swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v48 = v7;
    uint64_t v49 = (void (**)(const void *, void *))v29;
    _Block_copy(v29);
    if (qword_1EBDF9DC8 != -1) {
      swift_once();
    }
    uint64_t v50 = __swift_project_value_buffer(v6, (uint64_t)qword_1EBDFBE70);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v16, v50, v6);
    uint64_t v51 = sub_1D7A9B5D8();
    os_log_type_t v52 = sub_1D7A9C748();
    if (os_log_type_enabled(v51, v52))
    {
      uint64_t v53 = a2;
      uint64_t v54 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v54 = 0;
      _os_log_impl(&dword_1D7853000, v51, v52, "Cannot invoke didChangeUserConsent because no proxy is set", v54, 2u);
      uint64_t v55 = v54;
      a2 = v53;
      MEMORY[0x1D947D740](v55, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v48 + 8))(v16, v6);
    __int16 v56 = *(_WORD *)&a2[OBJC_IVAR____TtC13CoreIDVShared33IdentityProofingDataSharingClient_remoteObjectProxyError];
    uint64_t v57 = *(void *)&a2[OBJC_IVAR____TtC13CoreIDVShared33IdentityProofingDataSharingClient_remoteObjectProxyError + 8];
    uint64_t v58 = *(void *)&a2[OBJC_IVAR____TtC13CoreIDVShared33IdentityProofingDataSharingClient_remoteObjectProxyError + 16];
    uint64_t v59 = *(void **)&a2[OBJC_IVAR____TtC13CoreIDVShared33IdentityProofingDataSharingClient_remoteObjectProxyError + 24];
    sub_1D7860544();
    uint64_t v60 = (void *)swift_allocError();
    *(_WORD *)uint64_t v61 = v56;
    *(void *)(v61 + 8) = v57;
    *(void *)(v61 + 16) = v58;
    *(void *)(v61 + 24) = v59;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v62 = v59;
    unint64_t v63 = (void *)sub_1D7A9AE48();
    v49[2](v49, v63);

    return swift_release();
  }
}

uint64_t sub_1D7A34080()
{
  _Block_release(*(const void **)(v0 + 16));
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1D7A340B8@<X0>(BOOL *a1@<X8>)
{
  return sub_1D7865DD0(v1[3], v1[4], v1[5], v1[6], a1);
}

uint64_t objectdestroy_5Tm_0()
{
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t sub_1D7A34128(uint64_t a1)
{
  return sub_1D7A32060(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(uint64_t (**)(uint64_t))(v1 + 40));
}

uint64_t sub_1D7A3413C()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_1D7874050;
  uint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_1EA847218 + dword_1EA847218);
  return v5(v2, v3);
}

uint64_t sub_1D7A341F0(uint64_t a1)
{
  return sub_1D79BB0C8(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1D7A341FC@<X0>(uint64_t *a1@<X8>)
{
  return sub_1D7865F0C(*(void *)(v1 + 24), *(void *)(v1 + 32), a1);
}

uint64_t sub_1D7A3421C(uint64_t a1)
{
  return sub_1D79BB0A0(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1D7A34228(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF9680);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t HashDigest.algorithm.getter@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = *(void *)v1;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  swift_unknownObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 HashDigest.algorithm.setter(long long *a1)
{
  __n128 v4 = (__n128)a1[1];
  long long v5 = *a1;
  uint64_t v2 = *((void *)a1 + 4);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  __n128 result = v4;
  *(_OWORD *)uint64_t v1 = v5;
  *(__n128 *)(v1 + 16) = v4;
  *(void *)(v1 + 32) = v2;
  return result;
}

uint64_t (*HashDigest.algorithm.modify())()
{
  return nullsub_1;
}

uint64_t HashDigest.digest.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  sub_1D7860790(v1, *(void *)(v0 + 48));
  return v1;
}

uint64_t HashDigest.digest.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1D78607E8(*(void *)(v2 + 40), *(void *)(v2 + 48));
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = a2;
  return result;
}

uint64_t (*HashDigest.digest.modify())()
{
  return nullsub_1;
}

uint64_t HashDigest.equalsHash(of:)(uint64_t a1, unint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 40);
  unint64_t v7 = *(void *)(v2 + 48);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v8 = AlgorithmIdentifier.hash(_:)(a1, a2);
  unint64_t v10 = v9;
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  if (v3) {
    return 0;
  }
  char v12 = sub_1D788583C(v6, v7, v8, v10);
  sub_1D78607E8(v8, v10);
  return v12 & 1;
}

uint64_t destroy for HashDigest(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 48);
  return sub_1D78607E8(v2, v3);
}

uint64_t initializeWithCopy for HashDigest(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  unint64_t v5 = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  sub_1D7860790(v4, v5);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  return a1;
}

void *assignWithCopy for HashDigest(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  uint64_t v5 = a2[5];
  unint64_t v4 = a2[6];
  sub_1D7860790(v5, v4);
  uint64_t v6 = a1[5];
  unint64_t v7 = a1[6];
  a1[5] = v5;
  a1[6] = v4;
  sub_1D78607E8(v6, v7);
  return a1;
}

uint64_t assignWithTake for HashDigest(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_unknownObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(void *)(a1 + 40);
  unint64_t v5 = *(void *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  sub_1D78607E8(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for HashDigest(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HashDigest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HashDigest()
{
  return &type metadata for HashDigest;
}

void sub_1D7A3472C()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4F28B50]);
  uint64_t v1 = (void *)sub_1D7A9BF98();
  id v2 = objc_msgSend(v0, sel_initWithPath_, v1);

  qword_1EBDF8C48 = (uint64_t)v2;
}

uint64_t static NSBundle.internalSettings.getter()
{
  if (qword_1EBDF8C58 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_1EBDF8C48;
  id v1 = (id)qword_1EBDF8C48;
  return v0;
}

uint64_t sub_1D7A347F8()
{
  return 0x6F727245314E5341;
}

uint64_t sub_1D7A3493C()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D7A34984()
{
  return sub_1D7A9D5E8();
}

uint64_t sub_1D7A349B4()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D7A349F8()
{
  return sub_1D7A347F8();
}

BOOL sub_1D7A34A00(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(*(void *)a1 + 16) == *(unsigned __int8 *)(*(void *)a2 + 16);
}

uint64_t sub_1D7A34A1C()
{
  return sub_1D7A9C038();
}

uint64_t sub_1D7A34A50()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ASN1Error.Backing()
{
  return self;
}

ValueMetadata *type metadata accessor for ASN1Error()
{
  return &type metadata for ASN1Error;
}

ValueMetadata *type metadata accessor for ASN1Error.ErrorCode()
{
  return &type metadata for ASN1Error.ErrorCode;
}

unint64_t sub_1D7A34ADC()
{
  unint64_t result = qword_1EA847238;
  if (!qword_1EA847238)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847238);
  }
  return result;
}

unint64_t sub_1D7A34B34()
{
  unint64_t result = qword_1EA847240;
  if (!qword_1EA847240)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847240);
  }
  return result;
}

unint64_t sub_1D7A34B8C()
{
  unint64_t result = qword_1EA847248;
  if (!qword_1EA847248)
  {
    type metadata accessor for ASN1Error.Backing();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847248);
  }
  return result;
}

unsigned char *_s13CoreIDVShared9ASN1ErrorV9ErrorCodeV11BackingCodeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D7A34CACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ASN1Error.ErrorCode.BackingCode()
{
  return &type metadata for ASN1Error.ErrorCode.BackingCode;
}

unint64_t sub_1D7A34CE8()
{
  unint64_t result = qword_1EA847250;
  if (!qword_1EA847250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847250);
  }
  return result;
}

uint64_t sub_1D7A34D3C()
{
  sub_1D7A9C0B8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D7A34EAC()
{
  sub_1D7A9C0B8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D7A34FC0()
{
  sub_1D7A9C0B8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D7A350E0()
{
  sub_1D7A9C0B8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D7A351C4()
{
  sub_1D7A9C0B8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D7A35294()
{
  sub_1D7A9C0B8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D7A353C8()
{
  sub_1D7A9C0B8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D7A354AC()
{
  sub_1D7A9C0B8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D7A35564()
{
  sub_1D7A9C0B8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D7A35648()
{
  sub_1D7A9C0B8();
  return swift_bridgeObjectRelease();
}

CoreIDVShared::EncryptionParamsAlgorithmIdentifier_optional __swiftcall EncryptionParamsAlgorithmIdentifier.init(rawValue:)(Swift::String rawValue)
{
  id v2 = v1;
  unint64_t v3 = sub_1D7A9D058();
  result.value = swift_bridgeObjectRelease();
  char v5 = 3;
  if (v3 < 3) {
    char v5 = v3;
  }
  *id v2 = v5;
  return result;
}

uint64_t EncryptionParamsAlgorithmIdentifier.rawValue.getter()
{
  uint64_t v1 = 0x33765F4345;
  if (*v0 != 1) {
    uint64_t v1 = 0x48535F33765F4345;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x765F4343455F5645;
  }
}

uint64_t sub_1D7A35854(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1D7994CF8(*a1, *a2);
}

uint64_t sub_1D7A35860()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D7A3590C()
{
  sub_1D7A9C0B8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D7A359A4()
{
  return sub_1D7A9D628();
}

CoreIDVShared::EncryptionParamsAlgorithmIdentifier_optional sub_1D7A35A4C(Swift::String *a1)
{
  return EncryptionParamsAlgorithmIdentifier.init(rawValue:)(*a1);
}

void sub_1D7A35A58(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xEF312E4E53412D31;
  unint64_t v4 = 0xE500000000000000;
  uint64_t v5 = 0x33765F4345;
  if (v2 != 1)
  {
    uint64_t v5 = 0x48535F33765F4345;
    unint64_t v4 = 0xE800000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x765F4343455F5645;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1D7A35AC0()
{
  return sub_1D7A9C2B8();
}

uint64_t sub_1D7A35B20()
{
  return sub_1D7A9C258();
}

CoreIDVShared::EncryptedMessageEntity_optional __swiftcall EncryptedMessageEntity.init(rawValue:)(Swift::String rawValue)
{
  int v2 = v1;
  unint64_t v3 = sub_1D7A9D058();
  result.value = swift_bridgeObjectRelease();
  char v5 = 9;
  if (v3 < 9) {
    char v5 = v3;
  }
  *int v2 = v5;
  return result;
}

uint64_t EncryptedMessageEntity.rawValue.getter()
{
  uint64_t result = 0x6576726573766469;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x656369766564;
      break;
    case 2:
      uint64_t result = 0x732D656369766564;
      break;
    case 3:
      uint64_t result = 7302761;
      break;
    case 4:
      uint64_t result = 28787;
      break;
    case 5:
      uint64_t result = 0x616E65687461;
      break;
    case 6:
      uint64_t result = 0x726F737365737361;
      break;
    case 7:
      uint64_t result = 0x726575737369;
      break;
    case 8:
      uint64_t result = 7566953;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1D7A35CC8(unsigned __int8 *a1, char *a2)
{
  return sub_1D7996410(*a1, *a2);
}

uint64_t sub_1D7A35CD4()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D7A35D1C()
{
  return sub_1D7A35294();
}

uint64_t sub_1D7A35D24()
{
  return sub_1D7A9D628();
}

CoreIDVShared::EncryptedMessageEntity_optional sub_1D7A35D68(Swift::String *a1)
{
  return EncryptedMessageEntity.init(rawValue:)(*a1);
}

uint64_t sub_1D7A35D74@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EncryptedMessageEntity.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1D7A35D9C()
{
  return sub_1D7A9C2B8();
}

uint64_t sub_1D7A35DFC()
{
  return sub_1D7A9C258();
}

id RecipientEncryptionCertificate.keyAgreement.getter()
{
  return *v0;
}

void *RecipientEncryptionCertificate.signing.getter()
{
  uint64_t v1 = *(void **)(v0 + 8);
  id v2 = v1;
  return v1;
}

void RecipientEncryptionCertificate.recipient.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 16);
}

uint64_t RecipientEncryptionCertificate.init(keyAgreement:signing:recipient:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  char v4 = *a3;
  *(void *)a4 = result;
  *(void *)(a4 + 8) = a2;
  *(unsigned char *)(a4 + 16) = v4;
  return result;
}

void EncryptedMessage.sender.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

void EncryptedMessage.recipient.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 1);
}

uint64_t EncryptedMessage.message.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  char v3 = *(unsigned char *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = *(void *)(v1 + 40);
  uint64_t v6 = *(void *)(v1 + 48);
  uint64_t v7 = *(void *)(v1 + 56);
  uint64_t v8 = *(void *)(v1 + 64);
  uint64_t v10 = *(void *)(v1 + 104);
  uint64_t v9 = *(void *)(v1 + 112);
  *(void *)a1 = *(void *)(v1 + 8);
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v8;
  long long v11 = *(_OWORD *)(v1 + 88);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 72);
  *(_OWORD *)(a1 + 80) = v11;
  *(void *)(a1 + 96) = v10;
  *(void *)(a1 + 104) = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t EncryptedMessage.senderSigningKey.getter()
{
  uint64_t v1 = *(void *)(v0 + 120);
  swift_bridgeObjectRetain();
  return v1;
}

__n128 EncryptedMessage.init(sender:recipient:message:senderSigningKey:)@<Q0>(unsigned char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char v6 = *a2;
  char v7 = *(unsigned char *)(a3 + 16);
  long long v8 = *(_OWORD *)(a3 + 24);
  uint64_t v9 = *(void *)(a3 + 40);
  uint64_t v10 = *(void *)(a3 + 48);
  uint64_t v11 = *(void *)(a3 + 104);
  *(unsigned char *)a6 = *a1;
  *(unsigned char *)(a6 + 1) = v6;
  *(_OWORD *)(a6 + 8) = *(_OWORD *)a3;
  *(unsigned char *)(a6 + 24) = v7;
  *(_OWORD *)(a6 + 32) = v8;
  *(void *)(a6 + 48) = v9;
  *(void *)(a6 + 56) = v10;
  long long v12 = *(_OWORD *)(a3 + 72);
  *(_OWORD *)(a6 + 64) = *(_OWORD *)(a3 + 56);
  *(_OWORD *)(a6 + 80) = v12;
  __n128 result = *(__n128 *)(a3 + 88);
  *(__n128 *)(a6 + 96) = result;
  *(void *)(a6 + 112) = v11;
  *(void *)(a6 + 120) = a4;
  *(void *)(a6 + 128) = a5;
  return result;
}

uint64_t static EncryptedMessage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2 = *(unsigned char *)a1;
  uint64_t v34 = *(void *)(a1 + 16);
  uint64_t v35 = *(void *)(a1 + 8);
  char v33 = *(unsigned char *)(a1 + 24);
  uint64_t v31 = *(void *)(a1 + 40);
  uint64_t v32 = *(void *)(a1 + 32);
  uint64_t v29 = *(void *)(a1 + 56);
  uint64_t v30 = *(void *)(a1 + 48);
  uint64_t v27 = *(void *)(a1 + 72);
  uint64_t v28 = *(void *)(a1 + 64);
  uint64_t v25 = *(void *)(a1 + 88);
  uint64_t v26 = *(void *)(a1 + 80);
  char v3 = *(unsigned char *)a2;
  uint64_t v23 = *(void *)(a2 + 16);
  uint64_t v24 = *(void *)(a2 + 8);
  char v22 = *(unsigned char *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 48);
  uint64_t v7 = *(void *)(a2 + 56);
  uint64_t v8 = *(void *)(a2 + 64);
  uint64_t v20 = *(void *)(a2 + 80);
  uint64_t v21 = *(void *)(a2 + 72);
  uint64_t v18 = *(void *)(a2 + 96);
  uint64_t v19 = *(void *)(a2 + 88);
  uint64_t v16 = *(void *)(a2 + 112);
  uint64_t v17 = *(void *)(a2 + 104);
  uint64_t v10 = *(void *)(a1 + 96);
  uint64_t v9 = *(void *)(a1 + 104);
  uint64_t v11 = *(void *)(a1 + 112);
  unint64_t v13 = *(void *)(a1 + 120);
  unint64_t v14 = *(void *)(a2 + 120);
  *(void *)&long long v15 = *(void *)(a1 + 128);
  *((void *)&v15 + 1) = *(void *)(a2 + 128);
  if ((sub_1D7996410(*(unsigned char *)(a1 + 1), *(unsigned char *)(a2 + 1)) & 1) == 0) {
    return 0;
  }
  if ((sub_1D7996410(v2, v3) & 1) == 0) {
    return 0;
  }
  v49[0] = v35;
  v49[1] = v34;
  char v50 = v33;
  uint64_t v51 = v32;
  uint64_t v52 = v31;
  uint64_t v53 = v30;
  uint64_t v54 = v29;
  uint64_t v55 = v28;
  uint64_t v56 = v27;
  uint64_t v57 = v26;
  uint64_t v58 = v25;
  uint64_t v59 = v10;
  uint64_t v60 = v9;
  uint64_t v61 = v11;
  v36[0] = v24;
  v36[1] = v23;
  char v37 = v22;
  uint64_t v38 = v4;
  uint64_t v39 = v5;
  uint64_t v40 = v6;
  uint64_t v41 = v7;
  uint64_t v42 = v8;
  uint64_t v43 = v21;
  uint64_t v44 = v20;
  uint64_t v45 = v19;
  uint64_t v46 = v18;
  uint64_t v47 = v17;
  uint64_t v48 = v16;
  if ((static EncryptedDataContainer.== infix(_:_:)((uint64_t)v49, (uint64_t)v36) & 1) == 0) {
    return 0;
  }
  uint64_t result = v15 == 0;
  if ((void)v15 && *((void *)&v15 + 1))
  {
    if (__PAIR128__(v15, v13) == __PAIR128__(*((unint64_t *)&v15 + 1), v14))
    {
      return 1;
    }
    else
    {
      return sub_1D7A9D358();
    }
  }
  return result;
}

uint64_t static EncryptedDataContainer.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  unsigned __int8 v4 = *(unsigned char *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  long long v9 = *(_OWORD *)(a1 + 56);
  long long v10 = *(_OWORD *)(a1 + 72);
  long long v11 = *(_OWORD *)(a1 + 88);
  uint64_t v12 = *(void *)(a1 + 104);
  uint64_t v13 = *(void *)(a2 + 8);
  char v14 = *(unsigned char *)(a2 + 16);
  uint64_t v15 = *(void *)(a2 + 24);
  uint64_t v16 = *(void *)(a2 + 32);
  uint64_t v18 = *(void *)(a2 + 40);
  uint64_t v17 = *(void *)(a2 + 48);
  long long v19 = *(_OWORD *)(a2 + 56);
  long long v20 = *(_OWORD *)(a2 + 72);
  long long v21 = *(_OWORD *)(a2 + 88);
  uint64_t v22 = *(void *)(a2 + 104);
  if (!v3)
  {
    if (!v13)
    {
LABEL_9:
      v44[0] = v4;
      uint64_t v45 = v5;
      uint64_t v46 = v6;
      uint64_t v47 = v7;
      uint64_t v48 = v8;
      long long v49 = v9;
      long long v50 = v10;
      long long v51 = v11;
      uint64_t v52 = v12;
      v35[0] = v14;
      uint64_t v36 = v15;
      uint64_t v37 = v16;
      uint64_t v38 = v18;
      uint64_t v39 = v17;
      long long v40 = v19;
      long long v41 = v20;
      long long v42 = v21;
      uint64_t v43 = v22;
      char v25 = _s13CoreIDVShared16EncryptionParamsV2eeoiySbAC_ACtFZ_0(v44, (uint64_t)v35);
      return v25 & 1;
    }
LABEL_8:
    char v25 = 0;
    return v25 & 1;
  }
  if (!v13) {
    goto LABEL_8;
  }
  if (*(void *)a1 == *(void *)a2 && v3 == v13) {
    goto LABEL_9;
  }
  long long v33 = *(_OWORD *)(a1 + 72);
  long long v34 = *(_OWORD *)(a1 + 56);
  long long v32 = *(_OWORD *)(a1 + 88);
  unsigned __int8 v31 = *(unsigned char *)(a1 + 16);
  uint64_t v30 = *(void *)(a1 + 24);
  long long v28 = *(_OWORD *)(a2 + 72);
  long long v29 = *(_OWORD *)(a2 + 56);
  long long v27 = *(_OWORD *)(a2 + 88);
  char v23 = sub_1D7A9D358();
  long long v21 = v27;
  long long v20 = v28;
  long long v19 = v29;
  uint64_t v5 = v30;
  unsigned __int8 v4 = v31;
  long long v11 = v32;
  long long v10 = v33;
  long long v9 = v34;
  char v24 = v23;
  char v25 = 0;
  if (v24) {
    goto LABEL_9;
  }
  return v25 & 1;
}

BOOL sub_1D7A36340(char a1, char a2)
{
  return a1 == a2;
}

uint64_t sub_1D7A36350()
{
  return sub_1D7A9D5E8();
}

uint64_t sub_1D7A36378(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7265646E6573 && a2 == 0xE600000000000000;
  if (v2 || (sub_1D7A9D358() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E65697069636572 && a2 == 0xE900000000000074 || (sub_1D7A9D358() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6567617373656DLL && a2 == 0xE700000000000000 || (sub_1D7A9D358() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001D7ACA9D0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = sub_1D7A9D358();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_1D7A36534()
{
  return sub_1D7A9D628();
}

unint64_t sub_1D7A3657C(char a1)
{
  unint64_t result = 0x7265646E6573;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6E65697069636572;
      break;
    case 2:
      unint64_t result = 0x6567617373656DLL;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

BOOL sub_1D7A36614(char *a1, char *a2)
{
  return sub_1D7A36340(*a1, *a2);
}

uint64_t sub_1D7A3662C()
{
  return sub_1D7A36534();
}

uint64_t sub_1D7A3663C()
{
  return sub_1D7A36350();
}

uint64_t sub_1D7A3664C()
{
  return sub_1D7A9D628();
}

unint64_t sub_1D7A36698()
{
  return sub_1D7A3657C(*v0);
}

uint64_t sub_1D7A366A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1D7A36378(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D7A366DC(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t sub_1D7A36730(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t EncryptedMessage.encode(to:)(void *a1, void *a2)
{
  uint64_t v4 = a2[3];
  uint64_t v5 = a2[4];
  uint64_t v38 = a2[2];
  uint64_t v37 = v4;
  uint64_t v36 = v5;
  type metadata accessor for EncryptedMessage.CodingKeys();
  swift_getWitnessTable();
  uint64_t v6 = sub_1D7A9D238();
  uint64_t v43 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v7, v8, v9, v10, v11, v12, v13);
  uint64_t v15 = (char *)v25 - v14;
  char v16 = *v2;
  int v59 = v2[1];
  uint64_t v17 = *((void *)v2 + 1);
  uint64_t v41 = *((void *)v2 + 2);
  uint64_t v42 = v17;
  int v40 = v2[24];
  uint64_t v39 = *((void *)v2 + 4);
  uint64_t v35 = *((void *)v2 + 5);
  uint64_t v34 = *((void *)v2 + 6);
  uint64_t v33 = *((void *)v2 + 7);
  uint64_t v32 = *((void *)v2 + 8);
  uint64_t v31 = *((void *)v2 + 9);
  uint64_t v30 = *((void *)v2 + 10);
  uint64_t v29 = *((void *)v2 + 11);
  uint64_t v28 = *((void *)v2 + 12);
  uint64_t v27 = *((void *)v2 + 13);
  uint64_t v26 = *((void *)v2 + 14);
  v25[1] = *((void *)v2 + 15);
  v25[0] = *((void *)v2 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v18 = v6;
  sub_1D7A9D6E8();
  LOBYTE(v45) = v16;
  char v60 = 0;
  sub_1D7884440();
  uint64_t v19 = v44;
  sub_1D7A9D228();
  if (v19) {
    return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v15, v6);
  }
  uint64_t v21 = v39;
  char v22 = v40;
  uint64_t v24 = v41;
  uint64_t v23 = v42;
  LOBYTE(v45) = v59;
  char v60 = 1;
  sub_1D7A9D228();
  uint64_t v45 = v23;
  uint64_t v46 = v24;
  char v47 = v22;
  uint64_t v48 = v21;
  uint64_t v49 = v35;
  uint64_t v50 = v34;
  uint64_t v51 = v33;
  uint64_t v52 = v32;
  uint64_t v53 = v31;
  uint64_t v54 = v30;
  uint64_t v55 = v29;
  uint64_t v56 = v28;
  uint64_t v57 = v27;
  uint64_t v58 = v26;
  char v60 = 2;
  type metadata accessor for EncryptedDataContainer();
  swift_getWitnessTable();
  sub_1D7A9D228();
  LOBYTE(v45) = 3;
  sub_1D7A9D188();
  return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v15, v18);
}

uint64_t EncryptedMessage.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v54 = a3;
  uint64_t v56 = a2;
  type metadata accessor for EncryptedMessage.CodingKeys();
  swift_getWitnessTable();
  uint64_t v57 = sub_1D7A9D168();
  uint64_t v55 = *(void *)(v57 - 8);
  MEMORY[0x1F4188790](v57, v4, v5, v6, v7, v8, v9, v10);
  uint64_t v12 = (char *)&v41 - v11;
  uint64_t v13 = a1[3];
  int v59 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v13);
  uint64_t v58 = v12;
  uint64_t v14 = v89;
  sub_1D7A9D6A8();
  if (v14) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
  }
  LOBYTE(v60) = 0;
  sub_1D7884560();
  sub_1D7A9D148();
  int v15 = v69;
  LOBYTE(v60) = 1;
  sub_1D7A9D148();
  LODWORD(v89) = v15;
  int v16 = v69;
  type metadata accessor for EncryptedDataContainer();
  LOBYTE(v60) = 2;
  swift_getWitnessTable();
  sub_1D7A9D148();
  int v49 = v16;
  uint64_t v17 = v70;
  int v43 = v71;
  uint64_t v18 = v73;
  uint64_t v19 = v75;
  uint64_t v47 = v74;
  uint64_t v48 = v72;
  uint64_t v20 = v77;
  uint64_t v45 = v69;
  uint64_t v46 = v76;
  uint64_t v21 = v79;
  uint64_t v44 = v78;
  uint64_t v22 = v81;
  uint64_t v42 = v80;
  char v86 = 3;
  uint64_t v52 = v82;
  swift_bridgeObjectRetain();
  uint64_t v51 = v17;
  swift_bridgeObjectRetain();
  uint64_t v56 = v18;
  swift_bridgeObjectRetain();
  uint64_t v53 = v19;
  swift_bridgeObjectRetain();
  uint64_t v50 = v20;
  swift_bridgeObjectRetain();
  uint64_t v23 = v21;
  swift_bridgeObjectRetain();
  uint64_t v24 = v22;
  swift_bridgeObjectRetain();
  uint64_t v25 = sub_1D7A9D0A8();
  uint64_t v26 = *(void (**)(char *, uint64_t))(v55 + 8);
  uint64_t v28 = v27;
  uint64_t v41 = v27;
  v26(v58, v57);
  LOBYTE(v60) = v89;
  BYTE1(v60) = v49;
  uint64_t v30 = v50;
  uint64_t v29 = v51;
  *((void *)&v60 + 1) = v45;
  *(void *)&long long v61 = v51;
  BYTE8(v61) = v43;
  *(void *)&long long v62 = v48;
  *((void *)&v62 + 1) = v56;
  *(void *)&long long v63 = v47;
  *((void *)&v63 + 1) = v53;
  *(void *)&long long v64 = v46;
  *((void *)&v64 + 1) = v50;
  *(void *)&long long v65 = v44;
  *((void *)&v65 + 1) = v23;
  uint64_t v31 = v23;
  *(void *)&long long v66 = v42;
  *((void *)&v66 + 1) = v24;
  *(void *)&long long v67 = v52;
  *((void *)&v67 + 1) = v25;
  uint64_t v68 = v28;
  sub_1D7A3CA8C((uint64_t)&v60);
  swift_bridgeObjectRelease();
  uint64_t v32 = v24;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v33 = v53;
  swift_bridgeObjectRelease();
  uint64_t v34 = v56;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  long long v35 = v67;
  uint64_t v58 = (char *)v25;
  uint64_t v36 = v54;
  *(_OWORD *)(v54 + 96) = v66;
  *(_OWORD *)(v36 + 112) = v35;
  *(void *)(v36 + 128) = v68;
  long long v37 = v63;
  *(_OWORD *)(v36 + 32) = v62;
  *(_OWORD *)(v36 + 48) = v37;
  long long v38 = v65;
  *(_OWORD *)(v36 + 64) = v64;
  *(_OWORD *)(v36 + 80) = v38;
  long long v39 = v61;
  *(_OWORD *)uint64_t v36 = v60;
  *(_OWORD *)(v36 + 16) = v39;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
  LOBYTE(v69) = v89;
  BYTE1(v69) = v49;
  *(_DWORD *)((char *)&v69 + 2) = *(_DWORD *)&v87[7];
  HIWORD(v69) = v88;
  uint64_t v70 = v45;
  uint64_t v71 = v29;
  LOBYTE(v72) = v43;
  *(_DWORD *)((char *)&v72 + 1) = *(_DWORD *)v87;
  HIDWORD(v72) = *(_DWORD *)&v87[3];
  uint64_t v73 = v48;
  uint64_t v74 = v34;
  uint64_t v75 = v47;
  uint64_t v76 = v33;
  uint64_t v77 = v46;
  uint64_t v78 = v30;
  uint64_t v79 = v44;
  uint64_t v80 = v31;
  uint64_t v81 = v42;
  uint64_t v82 = v32;
  uint64_t v83 = v52;
  uint64_t v84 = v58;
  uint64_t v85 = v41;
  return sub_1D7A3CB20((uint64_t)&v69);
}

uint64_t sub_1D7A370C0(uint64_t a1, uint64_t a2)
{
  return static EncryptedMessage.== infix(_:_:)(a1, a2);
}

uint64_t sub_1D7A370D0@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return EncryptedMessage.init(from:)(a1, *(void *)(a2 + 32), a3);
}

uint64_t sub_1D7A370F4(void *a1, void *a2)
{
  return EncryptedMessage.encode(to:)(a1, a2);
}

uint64_t KeyAgreementParams.sender.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t KeyAgreementParams.recipientFingerprint.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1D7A37170()
{
  if (*v0) {
    return 0xD000000000000014;
  }
  else {
    return 0x7265646E6573;
  }
}

uint64_t sub_1D7A371AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1D7A3ED10(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D7A371D4(uint64_t a1)
{
  unint64_t v2 = sub_1D7A3CC58();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1D7A37210(uint64_t a1)
{
  unint64_t v2 = sub_1D7A3CC58();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t KeyAgreementParams.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF82B0);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v5, v6, v7, v8, v9, v10, v11);
  uint64_t v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v1 + 16);
  v17[1] = *(void *)(v1 + 24);
  _OWORD v17[2] = v14;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D7A3CC58();
  sub_1D7A9D6E8();
  char v19 = 0;
  uint64_t v15 = v17[3];
  sub_1D7A9D1D8();
  if (!v15)
  {
    char v18 = 1;
    sub_1D7A9D1D8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v13, v3);
}

uint64_t KeyAgreementParams.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847258);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7, v8, v9, v10, v11, v12, v13);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D7A3CC58();
  sub_1D7A9D6A8();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v27 = 0;
  uint64_t v16 = sub_1D7A9D0F8();
  uint64_t v18 = v17;
  char v26 = 1;
  swift_bridgeObjectRetain();
  uint64_t v19 = sub_1D7A9D0F8();
  uint64_t v21 = v20;
  uint64_t v22 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v25 = v19;
  v22(v15, v5);
  *a2 = v16;
  a2[1] = v18;
  a2[2] = v25;
  a2[3] = v21;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D7A375CC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return KeyAgreementParams.init(from:)(a1, a2);
}

uint64_t sub_1D7A375E4(void *a1)
{
  return KeyAgreementParams.encode(to:)(a1);
}

uint64_t KDFParams.senderSigningKeyFingerprint.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t KDFParams.recipientSigningKeyFingerprint.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t KDFParams.conversationToken.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t KDFParams.sharedIdentifierNames.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t KDFParams.init(senderSigningKeyFingerprint:recipientSigningKeyFingerprint:conversationToken:sharedIdentifierNames:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  *a8 = result;
  a8[1] = a2;
  a8[2] = a3;
  a8[3] = a4;
  a8[4] = a5;
  a8[5] = a6;
  a8[6] = a7;
  return result;
}

unint64_t sub_1D7A376AC(char a1)
{
  unint64_t result = 0xD00000000000001BLL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 2:
      unint64_t result = 0xD000000000000011;
      break;
    case 3:
      unint64_t result = 0xD000000000000015;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1D7A37748()
{
  return sub_1D7A376AC(*v0);
}

uint64_t sub_1D7A37750@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1D7A3EDF8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D7A37778(uint64_t a1)
{
  unint64_t v2 = sub_1D7A3CCAC();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1D7A377B4(uint64_t a1)
{
  unint64_t v2 = sub_1D7A3CCAC();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t KDFParams.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF82B8);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v5, v6, v7, v8, v9, v10, v11);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = v1[2];
  uint64_t v23 = v1[3];
  uint64_t v24 = v14;
  uint64_t v15 = v1[4];
  uint64_t v21 = v1[5];
  uint64_t v22 = v15;
  uint64_t v20 = v1[6];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D7A3CCAC();
  sub_1D7A9D6E8();
  char v30 = 0;
  uint64_t v16 = v25;
  sub_1D7A9D188();
  if (!v16)
  {
    uint64_t v17 = v20;
    char v29 = 1;
    sub_1D7A9D188();
    char v28 = 2;
    sub_1D7A9D188();
    uint64_t v26 = v17;
    char v27 = 3;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF7900);
    sub_1D7919C34(&qword_1EBDF8230);
    sub_1D7A9D1C8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v13, v3);
}

uint64_t KDFParams.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847260);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7, v8, v9, v10, v11, v12, v13);
  uint64_t v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D7A3CCAC();
  sub_1D7A9D6A8();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v35 = 0;
  uint64_t v16 = sub_1D7A9D0A8();
  uint64_t v18 = v17;
  uint64_t v29 = v16;
  char v34 = 1;
  swift_bridgeObjectRetain();
  uint64_t v19 = sub_1D7A9D0A8();
  uint64_t v30 = v20;
  uint64_t v27 = v19;
  char v33 = 2;
  swift_bridgeObjectRetain();
  uint64_t v28 = 0;
  uint64_t v26 = sub_1D7A9D0A8();
  uint64_t v22 = v21;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF7900);
  char v32 = 3;
  sub_1D7919C34(&qword_1EBDF7A30);
  swift_bridgeObjectRetain();
  sub_1D7A9D0E8();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v5);
  uint64_t v24 = v31;
  swift_bridgeObjectRetain();
  uint64_t v25 = v30;
  *a2 = v29;
  a2[1] = v18;
  a2[2] = v27;
  a2[3] = v25;
  a2[4] = v26;
  a2[5] = v22;
  a2[6] = v24;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D7A37D90@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return KDFParams.init(from:)(a1, a2);
}

uint64_t sub_1D7A37DA8(void *a1)
{
  return KDFParams.encode(to:)(a1);
}

void EncryptionParams.algorithmIdentifier.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t EncryptionParams.keyAgreement.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[2];
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  *a1 = v1[1];
  a1[1] = v2;
  a1[2] = v3;
  a1[3] = v4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t EncryptionParams.kdf.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 80);
  uint64_t v2 = *(void *)(v1 + 88);
  *(void *)a1 = *(void *)(v1 + 40);
  long long v4 = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 24) = v4;
  *(void *)(a1 + 40) = v3;
  *(void *)(a1 + 48) = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 EncryptionParams.init(alg:sender:recipientFingerprint:kdfParams:)@<Q0>(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  long long v7 = *(_OWORD *)(a6 + 16);
  *(_OWORD *)(a7 + 40) = *(_OWORD *)a6;
  uint64_t v8 = *(void *)(a6 + 48);
  *(unsigned char *)a7 = *a1;
  *(void *)(a7 + 8) = a2;
  *(void *)(a7 + 16) = a3;
  *(void *)(a7 + 24) = a4;
  *(void *)(a7 + 32) = a5;
  *(_OWORD *)(a7 + 56) = v7;
  __n128 result = *(__n128 *)(a6 + 32);
  *(__n128 *)(a7 + 72) = result;
  *(void *)(a7 + 88) = v8;
  return result;
}

unint64_t sub_1D7A37EB4()
{
  uint64_t v1 = 0x656572674179656BLL;
  if (*v0 != 1) {
    uint64_t v1 = 6710379;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0xD000000000000013;
  }
}

uint64_t sub_1D7A37F14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1D7A3EF94(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D7A37F3C(uint64_t a1)
{
  unint64_t v2 = sub_1D7A3CD00();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1D7A37F78(uint64_t a1)
{
  unint64_t v2 = sub_1D7A3CD00();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t EncryptionParams.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF82A8);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6, v7, v8, v9, v10, v11, v12);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v15 = *v1;
  uint64_t v16 = *((void *)v1 + 1);
  uint64_t v35 = *((void *)v1 + 2);
  uint64_t v36 = v16;
  uint64_t v17 = *((void *)v1 + 3);
  uint64_t v33 = *((void *)v1 + 4);
  uint64_t v34 = v17;
  uint64_t v18 = *((void *)v1 + 5);
  uint64_t v31 = *((void *)v1 + 6);
  uint64_t v32 = v18;
  uint64_t v19 = *((void *)v1 + 7);
  uint64_t v29 = *((void *)v1 + 8);
  uint64_t v30 = v19;
  uint64_t v20 = *((void *)v1 + 9);
  uint64_t v27 = *((void *)v1 + 10);
  uint64_t v28 = v20;
  uint64_t v26 = *((void *)v1 + 11);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D7A3CD00();
  sub_1D7A9D6E8();
  LOBYTE(v37) = v15;
  char v44 = 0;
  sub_1D7A3CD54();
  sub_1D7A9D228();
  if (!v2)
  {
    uint64_t v22 = v29;
    uint64_t v21 = v30;
    uint64_t v24 = v31;
    uint64_t v23 = v32;
    uint64_t v37 = v36;
    uint64_t v38 = v35;
    uint64_t v39 = v34;
    uint64_t v40 = v33;
    char v44 = 1;
    sub_1D7A3CDA8();
    sub_1D7A9D228();
    uint64_t v37 = v23;
    uint64_t v38 = v24;
    uint64_t v39 = v21;
    uint64_t v40 = v22;
    uint64_t v41 = v28;
    uint64_t v42 = v27;
    uint64_t v43 = v26;
    char v44 = 2;
    sub_1D7A3CDFC();
    sub_1D7A9D228();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v14, v4);
}

uint64_t EncryptionParams.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847268);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7, v8, v9, v10, v11, v12, v13);
  char v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D7A3CD00();
  sub_1D7A9D6A8();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v33 = 0;
  sub_1D7A3CE50();
  sub_1D7A9D148();
  int v16 = v27;
  char v33 = 1;
  sub_1D7A3CEA4();
  sub_1D7A9D148();
  int v32 = v16;
  uint64_t v17 = v28;
  uint64_t v18 = v29;
  uint64_t v25 = *((void *)&v28 + 1);
  uint64_t v26 = v27;
  char v33 = 2;
  sub_1D7A3CEF8();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1D7A9D148();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v5);
  uint64_t v19 = v30;
  uint64_t v20 = v31;
  long long v21 = v29;
  *(_OWORD *)(a2 + 48) = v28;
  *(_OWORD *)(a2 + 64) = v21;
  *(unsigned char *)a2 = v32;
  uint64_t v22 = v27;
  *(void *)(a2 + 8) = v26;
  *(void *)(a2 + 16) = v17;
  *(void *)(a2 + 24) = v25;
  *(void *)(a2 + 32) = v18;
  *(void *)(a2 + 40) = v22;
  *(void *)(a2 + 80) = v19;
  *(void *)(a2 + 88) = v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D7A384CC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return EncryptionParams.init(from:)(a1, a2);
}

uint64_t sub_1D7A384E4(void *a1)
{
  return EncryptionParams.encode(to:)(a1);
}

uint64_t EncryptedDataContainerParamsOnly.params.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(v1 + 32);
  uint64_t v6 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 80);
  uint64_t v7 = *(void *)(v1 + 88);
  *(unsigned char *)a1 = *(unsigned char *)v1;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v6;
  long long v9 = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 64) = v9;
  *(void *)(a1 + 80) = v8;
  *(void *)(a1 + 88) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 EncryptedDataContainerParamsOnly.params.setter(char *a1)
{
  char v2 = *a1;
  long long v8 = *(_OWORD *)(a1 + 24);
  long long v9 = *(_OWORD *)(a1 + 8);
  long long v6 = *(_OWORD *)(a1 + 56);
  long long v7 = *(_OWORD *)(a1 + 40);
  __n128 v5 = *(__n128 *)(a1 + 72);
  uint64_t v3 = *((void *)a1 + 11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(unsigned char *)uint64_t v1 = v2;
  *(_OWORD *)(v1 + 8) = v9;
  *(_OWORD *)(v1 + 24) = v8;
  *(_OWORD *)(v1 + 40) = v7;
  *(_OWORD *)(v1 + 56) = v6;
  __n128 result = v5;
  *(__n128 *)(v1 + 72) = v5;
  *(void *)(v1 + 88) = v3;
  return result;
}

uint64_t (*EncryptedDataContainerParamsOnly.params.modify())()
{
  return nullsub_1;
}

uint64_t sub_1D7A3868C()
{
  return 0x736D61726170;
}

uint64_t sub_1D7A386A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x736D61726170 && a2 == 0xE600000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_1D7A9D358();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1D7A38730(uint64_t a1)
{
  unint64_t v2 = sub_1D7A3CF4C();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1D7A3876C(uint64_t a1)
{
  unint64_t v2 = sub_1D7A3CF4C();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t EncryptedDataContainerParamsOnly.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847288);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7, v8, v9, v10, v11, v12, v13);
  char v15 = &v24[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D7A3CF4C();
  sub_1D7A9D6A8();
  if (!v2)
  {
    sub_1D7A3CFA0();
    sub_1D7A9D148();
    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v15, v5);
    long long v16 = v25;
    uint64_t v17 = v26;
    uint64_t v18 = v27;
    uint64_t v19 = v31;
    long long v20 = v28;
    long long v21 = v29;
    long long v22 = v30;
    *(unsigned char *)a2 = v24[0];
    *(_OWORD *)(a2 + 8) = v16;
    *(void *)(a2 + 24) = v17;
    *(void *)(a2 + 32) = v18;
    *(_OWORD *)(a2 + 40) = v20;
    *(_OWORD *)(a2 + 56) = v21;
    *(_OWORD *)(a2 + 72) = v22;
    *(void *)(a2 + 88) = v19;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1D7A38944()
{
  uint64_t v0 = sub_1D7A9D058();
  swift_bridgeObjectRelease();
  if (v0 == 1) {
    unsigned int v1 = 1;
  }
  else {
    unsigned int v1 = 2;
  }
  if (v0) {
    return v1;
  }
  else {
    return 0;
  }
}

uint64_t sub_1D7A38998(char a1)
{
  if (a1) {
    return 0x736D61726170;
  }
  else {
    return 1635017060;
  }
}

uint64_t sub_1D7A389C4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return EncryptedDataContainerParamsOnly.init(from:)(a1, a2);
}

uint64_t sub_1D7A389DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB1C8];
  return MEMORY[0x1F4185BB0](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_1D7A38A50(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4183DE0](a1, a2, WitnessTable, v5);
}

uint64_t sub_1D7A38ABC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4183DF0](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_1D7A38B2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4183DE8](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_1D7A38B9C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1D7A38944();
  *a1 = result;
  return result;
}

uint64_t sub_1D7A38BD8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1D7A38998(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1D7A38C10()
{
  return sub_1D7A38998(*v0);
}

uint64_t sub_1D7A38C24@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1D7A38944();
  *a1 = result;
  return result;
}

uint64_t sub_1D7A38C58(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t sub_1D7A38CAC(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t EncryptedDataContainer.data.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t EncryptedDataContainer.data.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*EncryptedDataContainer.data.modify())()
{
  return nullsub_1;
}

uint64_t EncryptedDataContainer.params.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 40);
  uint64_t v5 = *(void *)(v1 + 48);
  uint64_t v6 = *(void *)(v1 + 56);
  uint64_t v8 = *(void *)(v1 + 96);
  uint64_t v7 = *(void *)(v1 + 104);
  *(unsigned char *)a1 = *(unsigned char *)(v1 + 16);
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v6;
  long long v9 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(a1 + 64) = v9;
  *(void *)(a1 + 80) = v8;
  *(void *)(a1 + 88) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 EncryptedDataContainer.params.setter(char *a1)
{
  char v2 = *a1;
  long long v8 = *(_OWORD *)(a1 + 24);
  long long v9 = *(_OWORD *)(a1 + 8);
  long long v6 = *(_OWORD *)(a1 + 56);
  long long v7 = *(_OWORD *)(a1 + 40);
  __n128 v5 = *(__n128 *)(a1 + 72);
  uint64_t v3 = *((void *)a1 + 11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v1 + 16) = v2;
  *(_OWORD *)(v1 + 24) = v9;
  *(_OWORD *)(v1 + 40) = v8;
  *(_OWORD *)(v1 + 56) = v7;
  *(_OWORD *)(v1 + 72) = v6;
  __n128 result = v5;
  *(__n128 *)(v1 + 88) = v5;
  *(void *)(v1 + 104) = v3;
  return result;
}

uint64_t (*EncryptedDataContainer.params.modify())()
{
  return nullsub_1;
}

__n128 EncryptedDataContainer.init(type:data:params:)@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char *a3@<X3>, uint64_t a4@<X8>)
{
  char v4 = *a3;
  long long v5 = *(_OWORD *)(a3 + 8);
  uint64_t v6 = *((void *)a3 + 3);
  uint64_t v7 = *((void *)a3 + 4);
  uint64_t v8 = *((void *)a3 + 11);
  *(void *)a4 = a1;
  *(void *)(a4 + 8) = a2;
  *(unsigned char *)(a4 + 16) = v4;
  *(_OWORD *)(a4 + 24) = v5;
  *(void *)(a4 + 40) = v6;
  *(void *)(a4 + 48) = v7;
  *(_OWORD *)(a4 + 56) = *(_OWORD *)(a3 + 40);
  *(_OWORD *)(a4 + 72) = *(_OWORD *)(a3 + 56);
  __n128 result = *(__n128 *)(a3 + 72);
  *(__n128 *)(a4 + 88) = result;
  *(void *)(a4 + 104) = v8;
  return result;
}

uint64_t EncryptedDataContainer.init(alg:encryptor:remoteCertificate:senderSigningKey:recipientSigningKey:data:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  unint64_t v39 = a7;
  uint64_t v37 = a6;
  unint64_t v40 = a5;
  uint64_t v38 = a4;
  uint64_t v14 = *(void *)(a10 - 8);
  char v15 = (unsigned __int8 *)MEMORY[0x1F4188790](a1, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned __int8 v18 = *v15;
  SecKeyRef v20 = SecCertificateCopyKey(v19);
  if (v20)
  {
    long long v21 = v20;
    id v35 = a3;
    unsigned __int8 v51 = v18;
    uint64_t v34 = v14 + 8;
    sub_1D7869658(a2, (uint64_t)v41);
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, a8, a10);
    uint64_t v22 = v36;
    EncryptedDataContainer.init(alg:encryptor:remotePublicKey:senderSigningKey:recipientSigningKey:data:)(&v51, v41, v21, v38, v40, v37, v39, (uint64_t)v17, (uint64_t *)&v42, a10);

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a8, a10);
    uint64_t result = __swift_destroy_boxed_opaque_existential_1(a2);
    if (!v22)
    {
      char v24 = v43;
      long long v25 = v44;
      uint64_t v26 = v45;
      uint64_t v27 = v46;
      uint64_t v28 = v50;
      long long v29 = v47;
      long long v30 = v48;
      long long v31 = v49;
      *(_OWORD *)a9 = v42;
      *(unsigned char *)(a9 + 16) = v24;
      *(_OWORD *)(a9 + 24) = v25;
      *(void *)(a9 + 40) = v26;
      *(void *)(a9 + 48) = v27;
      *(_OWORD *)(a9 + 56) = v29;
      *(_OWORD *)(a9 + 72) = v30;
      *(_OWORD *)(a9 + 88) = v31;
      *(void *)(a9 + 104) = v28;
    }
  }
  else
  {
    LOWORD(v42) = 0;
    unint64_t v32 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000003FLL, 0x80000001D7ACA4B0, (__int16 *)&v42, 0, v32, 0xD000000000000062, 0x80000001D7ACA4F0, v33, 0xD000000000000050, 0x80000001D7ACA560, 140);
    swift_willThrow();
    sub_1D78607E8(v37, v39);
    sub_1D78607E8(v38, v40);

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a8, a10);
    return __swift_destroy_boxed_opaque_existential_1(a2);
  }
  return result;
}

uint64_t EncryptedDataContainer.init(alg:encryptor:remotePublicKey:senderSigningKey:recipientSigningKey:data:)@<X0>(unsigned __int8 *a1@<X0>, void *a2@<X1>, __SecKey *a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10)
{
  unint64_t v133 = a9;
  uint64_t v18 = a10;
  error[1] = *(CFErrorRef *)MEMORY[0x1E4F143B8];
  uint64_t v136 = sub_1D7A9B5F8();
  unint64_t v134 = *(void *)(v136 - 8);
  MEMORY[0x1F4188790](v136, v19, v20, v21, v22, v23, v24, v25);
  uint64_t v135 = (uint64_t)&v117 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v137 = *a1;
  error[0] = 0;
  CFDataRef v27 = SecKeyCopyExternalRepresentation(a3, error);
  if (v27)
  {
    CFDataRef v28 = v27;
    uint64_t v139 = a6;
    unint64_t v142 = a7;
    uint64_t v140 = a4;
    unint64_t v141 = a5;
    uint64_t v144 = a10;
    uint64_t v138 = a3;
    uint64_t v29 = sub_1D7A9B028();
    unint64_t v31 = v30;

    unint64_t v32 = (void *)sub_1D7A9AFF8();
    id v33 = DigestSha256(v32);

    if (v33)
    {
      uint64_t v131 = a2;
      uint64_t v34 = sub_1D7A9B028();
      uint64_t v132 = a8;
      uint64_t v35 = v34;
      unint64_t v37 = v36;

      uint64_t v38 = sub_1D7A9B008();
      uint64_t v40 = v39;
      a8 = v132;
      sub_1D78607E8(v35, v37);
      sub_1D7A9AC48();
      swift_allocObject();
      sub_1D7A9AC38();
      unint64_t v41 = v143;
      uint64_t v42 = sub_1D7A9AC28();
      if (!v41)
      {
        uint64_t v47 = v42;
        unint64_t v143 = v43;
        uint64_t v128 = v38;
        uint64_t v130 = v40;
        swift_release();
        id v48 = objc_msgSend(self, sel_standardUserDefaults);
        if (qword_1EBDF9690 != -1) {
          swift_once();
        }
        uint64_t v129 = v47;
        if (byte_1EBDFBE68 == 1)
        {
          long long v49 = (void *)sub_1D7A9BF98();
          unsigned __int8 v50 = objc_msgSend(v48, sel_BOOLForKey_, v49);

          unint64_t v51 = v142;
          unint64_t v52 = v31;
          if (v50)
          {
            if (qword_1EBDF9DC8 != -1) {
              swift_once();
            }
            uint64_t v53 = v136;
            uint64_t v54 = __swift_project_value_buffer(v136, (uint64_t)qword_1EBDFBE70);
            swift_beginAccess();
            unint64_t v55 = v134;
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v134 + 16))(v135, v54, v53);
            uint64_t v56 = v129;
            unint64_t v57 = v143;
            sub_1D7860790(v129, v143);
            sub_1D7860790(v56, v57);
            uint64_t v58 = sub_1D7A9B5D8();
            os_log_type_t v59 = sub_1D7A9C748();
            uint64_t v127 = v58;
            if (os_log_type_enabled(v58, v59))
            {
              long long v60 = (uint8_t *)swift_slowAlloc();
              uint64_t v126 = swift_slowAlloc();
              uint64_t v146 = v126;
              *(_DWORD *)long long v60 = 136315138;
              uint64_t v125 = (uint64_t)(v60 + 4);
              uint64_t v61 = sub_1D7A9B008();
              uint64_t v145 = sub_1D7923300(v61, v62, &v146);
              unint64_t v51 = v142;
              sub_1D7A9C9E8();
              unint64_t v63 = v143;
              swift_bridgeObjectRelease();
              sub_1D78607E8(v56, v63);
              sub_1D78607E8(v56, v63);
              long long v64 = v127;
              _os_log_impl(&dword_1D7853000, v127, v59, "EncryptedDataContainer contains %s", v60, 0xCu);
              uint64_t v65 = v126;
              swift_arrayDestroy();
              MEMORY[0x1D947D740](v65, -1, -1);
              MEMORY[0x1D947D740](v60, -1, -1);
            }
            else
            {
              sub_1D78607E8(v56, v57);
              sub_1D78607E8(v56, v57);
            }
            (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v135, v136);
          }
        }
        else
        {

          unint64_t v51 = v142;
          unint64_t v52 = v31;
        }
        if (v137)
        {
          uint64_t v135 = v29;
          uint64_t v136 = v52;
          uint64_t v66 = v139;
          long long v67 = (void *)sub_1D7A9AFF8();
          id v68 = DigestSha256(v67);

          a2 = v131;
          uint64_t v18 = v144;
          unint64_t v69 = v141;
          uint64_t v70 = v140;
          if (v68)
          {
            uint64_t v71 = sub_1D7A9B028();
            unint64_t v73 = v72;

            uint64_t v74 = (void *)sub_1D7A9AFF8();
            id v75 = DigestSha256(v74);

            if (v75)
            {
              uint64_t v123 = v71;
              unint64_t v124 = v73;
              uint64_t v127 = sub_1D7A9B028();
              unint64_t v134 = v76;

              uint64_t v77 = a2[4];
              uint64_t v126 = a2[3];
              uint64_t v125 = (uint64_t)__swift_project_boxed_opaque_existential_1(a2, v126);
              __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF82C0);
              uint64_t inited = swift_initStackObject();
              *(_OWORD *)(inited + 16) = xmmword_1D7AA0A40;
              *(unsigned char *)(inited + 32) = 0;
              *(void *)(inited + 40) = v70;
              *(void *)(inited + 48) = v69;
              *(unsigned char *)(inited + 56) = 1;
              unint64_t v79 = v142;
              unint64_t v80 = v143;
              *(void *)(inited + 64) = v66;
              *(void *)(inited + 72) = v79;
              unint64_t v81 = sub_1D7861310(inited);
              unint64_t v82 = v142;
              swift_setDeallocating();
              sub_1D7860790(v70, v69);
              sub_1D7860790(v66, v82);
              __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF8680);
              swift_arrayDestroy();
              uint64_t v89 = (*(uint64_t (**)(uint64_t, unint64_t, __SecKey *, unint64_t, uint64_t, uint64_t))(v77 + 16))(v129, v80, v138, v81, v126, v77);
              unint64_t v91 = v90;
              uint64_t v93 = v92;
              uint64_t v126 = v94;
              uint64_t v95 = v127;
              unint64_t v96 = v134;
              swift_bridgeObjectRelease();
              sub_1D78607E8(v89, v91);
              uint64_t v97 = v131[3];
              uint64_t v98 = v131[4];
              __swift_project_boxed_opaque_existential_1(v131, v97);
              uint64_t v99 = (*(uint64_t (**)(uint64_t, uint64_t))(v98 + 40))(v97, v98);
              unint64_t v101 = v100;
              uint64_t v125 = sub_1D7A9B008();
              uint64_t v120 = v102;
              sub_1D78607E8(v99, v101);
              unint64_t v103 = v96;
              uint64_t v122 = sub_1D7A9B008();
              uint64_t v119 = v104;
              uint64_t v105 = v123;
              unint64_t v106 = v124;
              uint64_t v121 = sub_1D7A9B008();
              uint64_t v118 = v107;
              swift_bridgeObjectRetain();
              uint64_t v108 = v130;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              uint64_t v109 = v93;
              unint64_t v110 = v126;
              uint64_t v117 = sub_1D7A9B008();
              uint64_t v112 = v111;
              sub_1D78607E8(v135, v136);
              sub_1D78607E8(v105, v106);
              sub_1D78607E8(v109, v110);
              sub_1D78607E8((uint64_t)v95, v103);
              sub_1D78607E8(v139, v142);
              sub_1D78607E8(v140, v141);

              sub_1D78607E8(v129, v143);
              (*(void (**)(uint64_t))(*(void *)(v144 - 8) + 8))(v132);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease_n();
              uint64_t v113 = v133;
              *unint64_t v133 = v117;
              v113[1] = v112;
              *((unsigned char *)v113 + 16) = v137;
              uint64_t v114 = v120;
              v113[3] = v125;
              v113[4] = v114;
              v113[5] = v128;
              v113[6] = v108;
              uint64_t v115 = v119;
              v113[7] = v122;
              v113[8] = v115;
              uint64_t v116 = v118;
              v113[9] = v121;
              v113[10] = v116;
              v113[12] = 0;
              v113[13] = 0;
              v113[11] = 0;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v131);
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              return swift_bridgeObjectRelease();
            }
            swift_bridgeObjectRelease();
            LOWORD(v146) = 0;
            unint64_t v87 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
            sub_1D7860544();
            swift_allocError();
            DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000030, 0x80000001D7ACA6D0, (__int16 *)&v146, 0, v87, 0xD000000000000062, 0x80000001D7ACA4F0, v88, 0xD00000000000004ELL, 0x80000001D7ACA640, 173);
            swift_willThrow();
            sub_1D78607E8(v135, v136);
            sub_1D78607E8(v71, v73);
            sub_1D78607E8(v66, v142);
            sub_1D78607E8(v70, v69);

            sub_1D78607E8(v129, v143);
            a8 = v132;
            goto LABEL_7;
          }
          swift_bridgeObjectRelease();
          LOWORD(v146) = 0;
          unint64_t v85 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
          sub_1D7860544();
          swift_allocError();
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000033, 0x80000001D7ACA690, (__int16 *)&v146, 0, v85, 0xD000000000000062, 0x80000001D7ACA4F0, v86, 0xD00000000000004ELL, 0x80000001D7ACA640, 170);
          swift_willThrow();
          sub_1D78607E8(v135, v136);
          sub_1D78607E8(v66, v51);
          sub_1D78607E8(v70, v69);

          sub_1D78607E8(v129, v143);
        }
        else
        {
          swift_bridgeObjectRelease();
          LOWORD(v146) = 106;
          unint64_t v83 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
          sub_1D7860544();
          swift_allocError();
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000003BLL, 0x80000001D7ACA710, (__int16 *)&v146, 0, v83, 0xD000000000000062, 0x80000001D7ACA4F0, v84, 0xD00000000000004ELL, 0x80000001D7ACA640, 167);
          swift_willThrow();
          sub_1D78607E8(v29, v52);
          sub_1D78607E8(v139, v51);
          sub_1D78607E8(v140, v141);

          sub_1D78607E8(v129, v143);
          a2 = v131;
          uint64_t v18 = v144;
        }
        a8 = v132;
        goto LABEL_8;
      }
      sub_1D78607E8(v29, v31);
      swift_bridgeObjectRelease();
      swift_release();
      sub_1D78607E8(v139, v142);
      sub_1D78607E8(v140, v141);

      a2 = v131;
    }
    else
    {
      v147[0] = 0;
      unint64_t v44 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000030, 0x80000001D7ACA600, v147, 0, v44, 0xD000000000000062, 0x80000001D7ACA4F0, v45, 0xD00000000000004ELL, 0x80000001D7ACA640, 156);
      swift_willThrow();
      sub_1D78607E8(v29, v31);
      sub_1D78607E8(v139, v142);
      sub_1D78607E8(v140, v141);
    }
LABEL_7:
    uint64_t v18 = v144;
    goto LABEL_8;
  }
  v147[0] = 242;
  errorFromCFError(_:_:_:)(error[0], 0xD000000000000033, 0x80000001D7ACA5C0, v147);
  swift_willThrow();
  sub_1D78607E8(a6, a7);
  sub_1D78607E8(a4, a5);

LABEL_8:
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(a8, v18);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a2);
  return swift_bridgeObjectRelease();
}

void EncryptedDataContainer.getUnencryptedData(alg:decryptor:senderSigningKey:recipientSigningKey:)(unsigned char *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, char *a8@<X8>)
{
  uint64_t v134 = a3;
  unint64_t v135 = a6;
  uint64_t v15 = sub_1D7A9B5F8();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15, v17, v18, v19, v20, v21, v22, v23);
  uint64_t v136 = (uint64_t)&v109 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v133 = a7;
  uint64_t v25 = *(void *)(a7 + 16);
  uint64_t v26 = sub_1D7A9C9A8();
  uint64_t v34 = MEMORY[0x1F4188790](v26, v27, v28, v29, v30, v31, v32, v33);
  uint64_t v42 = MEMORY[0x1F4188790](v34, v35, v36, v37, v38, v39, v40, v41);
  if (!*a1)
  {
    LOWORD(v139[0]) = 106;
    unint64_t v71 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000020, 0x80000001D7ACA880, (__int16 *)v139, 0, v71, 0xD000000000000062, 0x80000001D7ACA4F0, v72, 0xD000000000000047, 0x80000001D7ACA780, 184);
LABEL_11:
    swift_willThrow();
    return;
  }
  unint64_t v127 = a4;
  uint64_t v125 = a5;
  uint64_t v117 = (char *)&v109 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v118 = v46;
  uint64_t v119 = v42;
  uint64_t v123 = v25;
  uint64_t v120 = v45;
  uint64_t v121 = v44;
  uint64_t v122 = a8;
  uint64_t v129 = v16;
  uint64_t v130 = v15;
  unint64_t v131 = *v8;
  unint64_t v126 = v8[1];
  unint64_t v124 = v8[3];
  unint64_t v47 = v8[5];
  unint64_t v128 = v8[4];
  uint64_t v132 = (void *)v8[6];
  unint64_t v48 = v8[8];
  unint64_t v49 = v8[10];
  unint64_t v50 = v8[12];
  unint64_t v51 = v8[13];
  uint64_t v52 = a2[3];
  uint64_t v53 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v52);
  unint64_t v54 = v137;
  uint64_t v55 = (*(uint64_t (**)(uint64_t, uint64_t))(v53 + 40))(v52, v53);
  if (v54) {
    return;
  }
  uint64_t v57 = v55;
  unint64_t v58 = v56;
  unint64_t v137 = v47;
  uint64_t v114 = a2;
  unint64_t v115 = v51;
  uint64_t v110 = 0;
  unint64_t v112 = v50;
  unint64_t v116 = v49;
  unint64_t v113 = v48;
  os_log_type_t v59 = (void *)sub_1D7A9AFF8();
  sub_1D78607E8(v57, v58);
  id v60 = DigestSha256(v59);

  if (!v60)
  {
    LOWORD(v139[0]) = 0;
    unint64_t v73 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000029, 0x80000001D7ACA750, (__int16 *)v139, 0, v73, 0xD000000000000062, 0x80000001D7ACA4F0, v74, 0xD000000000000047, 0x80000001D7ACA780, 187);
    goto LABEL_11;
  }
  uint64_t v61 = sub_1D7A9B028();
  unint64_t v63 = v62;

  uint64_t v111 = v61;
  if (sub_1D7A9B008() == v137 && v64 == v132)
  {
    swift_bridgeObjectRelease();
    unint64_t v67 = v127;
    id v68 = v114;
  }
  else
  {
    char v66 = sub_1D7A9D358();
    swift_bridgeObjectRelease();
    unint64_t v67 = v127;
    id v68 = v114;
    if ((v66 & 1) == 0)
    {
      LOWORD(v139[0]) = 135;
      unint64_t v69 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000004FLL, 0x80000001D7ACA7D0, (__int16 *)v139, 0, v69, 0xD000000000000062, 0x80000001D7ACA4F0, v70, 0xD000000000000047, 0x80000001D7ACA780, 190);
LABEL_29:
      swift_willThrow();
      sub_1D78607E8(v111, v63);
      return;
    }
  }
  unint64_t v75 = v126;
  if (!v126 || (uint64_t v76 = sub_1D7A9AFB8(), v137 = v77, v77 >> 60 == 15))
  {
    if (qword_1EBDF9DC8 != -1) {
      swift_once();
    }
    uint64_t v78 = v130;
    uint64_t v79 = __swift_project_value_buffer(v130, (uint64_t)qword_1EBDFBE70);
    swift_beginAccess();
    uint64_t v80 = v136;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v129 + 16))(v136, v79, v78);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    unint64_t v81 = sub_1D7A9B5D8();
    os_log_type_t v82 = sub_1D7A9C758();
    if (os_log_type_enabled(v81, v82))
    {
      unint64_t v83 = (uint8_t *)swift_slowAlloc();
      unint64_t v137 = swift_slowAlloc();
      unint64_t v140 = v137;
      *(_DWORD *)unint64_t v83 = 136446210;
      if (v75) {
        uint64_t v84 = v131;
      }
      else {
        uint64_t v84 = 7104878;
      }
      if (v75) {
        unint64_t v85 = v75;
      }
      else {
        unint64_t v85 = 0xE300000000000000;
      }
      swift_bridgeObjectRetain();
      uint64_t v138 = sub_1D7923300(v84, v85, (uint64_t *)&v140);
      sub_1D7A9C9E8();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1D7853000, v81, v82, "Failed to base64 decode the encrypted data: %{public}s", v83, 0xCu);
      unint64_t v86 = v137;
      swift_arrayDestroy();
      MEMORY[0x1D947D740](v86, -1, -1);
      MEMORY[0x1D947D740](v83, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v136, v130);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v80, v130);
    }
    LOWORD(v140) = 119;
    unint64_t v87 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000002BLL, 0x80000001D7ACA820, (__int16 *)&v140, 0, v87, 0xD000000000000062, 0x80000001D7ACA4F0, v88, 0xD000000000000047, 0x80000001D7ACA780, 194);
    goto LABEL_29;
  }
  uint64_t v89 = v76;
  unint64_t v131 = v63;
  uint64_t v90 = v68[4];
  uint64_t v136 = v68[3];
  uint64_t v132 = __swift_project_boxed_opaque_existential_1(v68, v136);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF82C0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D7AA0A40;
  *(unsigned char *)(inited + 32) = 0;
  uint64_t v93 = v134;
  unint64_t v92 = v135;
  *(void *)(inited + 40) = v134;
  *(void *)(inited + 48) = v67;
  *(unsigned char *)(inited + 56) = 1;
  uint64_t v94 = v125;
  *(void *)(inited + 64) = v125;
  *(void *)(inited + 72) = v92;
  unint64_t v95 = sub_1D7861310(inited);
  swift_setDeallocating();
  sub_1D7860790(v93, v67);
  sub_1D7860790(v94, v92);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF8680);
  swift_arrayDestroy();
  uint64_t v96 = v110;
  uint64_t v97 = (*(uint64_t (**)(void, unint64_t, uint64_t, unint64_t, unint64_t, unint64_t, unint64_t, uint64_t, uint64_t))(v90 + 32))(0, 0xF000000000000000, v89, v137, v124, v128, v95, v136, v90);
  unint64_t v99 = v98;
  swift_bridgeObjectRelease();
  if (v96)
  {
    sub_1D7871BDC(v89, v137);
    sub_1D78607E8(v111, v131);
    return;
  }
  unint64_t v100 = v131;
  if (v123 == MEMORY[0x1E4F277C0])
  {
    v139[0] = v97;
    v139[1] = v99;
    sub_1D7860790(v97, v99);
    uint64_t v101 = v121;
    char v102 = swift_dynamicCast();
    unint64_t v103 = *(void (**)(uint64_t, uint64_t, uint64_t, void))(v120 + 56);
    if (v102)
    {
      uint64_t v104 = v89;
      uint64_t v105 = MEMORY[0x1E4F277C0];
      uint64_t v106 = v120;
      v103(v101, 0, 1, MEMORY[0x1E4F277C0]);
      sub_1D7871BDC(v104, v137);
      sub_1D78607E8(v111, v100);
      sub_1D78607E8(v97, v99);
      uint64_t v107 = *(void (**)(char *, uint64_t, uint64_t))(v106 + 32);
      uint64_t v108 = v117;
      v107(v117, v101, v105);
      v107(v122, (uint64_t)v108, v105);
      return;
    }
    v103(v101, 1, 1, MEMORY[0x1E4F277C0]);
    (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v101, v119);
  }
  sub_1D7A9ABF8();
  swift_allocObject();
  sub_1D7A9ABE8();
  sub_1D7A9ABD8();
  sub_1D78607E8(v97, v99);
  sub_1D7871BDC(v89, v137);
  sub_1D78607E8(v111, v100);
  swift_release();
}

uint64_t EncryptedDataContainer.encode(to:)(void *a1)
{
  type metadata accessor for EncryptedDataContainer.CodingKeys();
  swift_getWitnessTable();
  uint64_t v3 = sub_1D7A9D238();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v5, v6, v7, v8, v9, v10, v11);
  uint64_t v13 = (char *)&v20 - v12;
  uint64_t v14 = *v1;
  uint64_t v32 = v1[1];
  uint64_t v33 = v14;
  int v47 = *((unsigned __int8 *)v1 + 16);
  uint64_t v15 = v1[3];
  uint64_t v30 = v1[4];
  uint64_t v31 = v15;
  uint64_t v16 = v1[5];
  uint64_t v28 = v1[6];
  uint64_t v29 = v16;
  uint64_t v17 = v1[7];
  uint64_t v26 = v1[8];
  uint64_t v27 = v17;
  uint64_t v25 = v1[9];
  uint64_t v24 = v1[10];
  uint64_t v23 = v1[11];
  uint64_t v22 = v1[12];
  uint64_t v21 = v1[13];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D7A9D6E8();
  char v35 = 0;
  uint64_t v18 = v34;
  sub_1D7A9D188();
  if (!v18)
  {
    char v35 = v47;
    uint64_t v36 = v31;
    uint64_t v37 = v30;
    uint64_t v38 = v29;
    uint64_t v39 = v28;
    uint64_t v40 = v27;
    uint64_t v41 = v26;
    uint64_t v42 = v25;
    uint64_t v43 = v24;
    uint64_t v44 = v23;
    uint64_t v45 = v22;
    uint64_t v46 = v21;
    char v48 = 1;
    sub_1D7A3D00C();
    sub_1D7A9D228();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v13, v3);
}

uint64_t EncryptedDataContainer.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = a2;
  type metadata accessor for EncryptedDataContainer.CodingKeys();
  swift_getWitnessTable();
  uint64_t v4 = sub_1D7A9D168();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6, v7, v8, v9, v10, v11, v12);
  uint64_t v14 = (char *)&v29 - v13;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D7A9D6A8();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    uint64_t v15 = v30;
    char v31 = 0;
    uint64_t v16 = sub_1D7A9D0A8();
    uint64_t v18 = v17;
    char v41 = 1;
    sub_1D7A3CFA0();
    swift_bridgeObjectRetain();
    sub_1D7A9D148();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
    char v20 = v31;
    uint64_t v22 = v32;
    uint64_t v21 = v33;
    uint64_t v23 = v34;
    uint64_t v24 = v35;
    uint64_t v25 = v36;
    uint64_t v27 = v39;
    uint64_t v26 = v40;
    long long v28 = v38;
    *(_OWORD *)(v15 + 64) = v37;
    *(_OWORD *)(v15 + 80) = v28;
    *(void *)uint64_t v15 = v16;
    *(void *)(v15 + 8) = v18;
    *(unsigned char *)(v15 + 16) = v20;
    *(void *)(v15 + 24) = v22;
    *(void *)(v15 + 32) = v21;
    *(void *)(v15 + 40) = v23;
    *(void *)(v15 + 48) = v24;
    *(void *)(v15 + 56) = v25;
    *(void *)(v15 + 96) = v27;
    *(void *)(v15 + 104) = v26;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D7A3B5CC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return EncryptedDataContainer.init(from:)(a1, a2);
}

uint64_t sub_1D7A3B5F0(void *a1)
{
  return EncryptedDataContainer.encode(to:)(a1);
}

void *encryptData<A>(with:to:senderSigningKey:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = *(void **)a2;
  uint64_t v6 = *(void **)(a2 + 8);
  type metadata accessor for DIPECIESSessionV3SecKey();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D7AA0AC0;
  *(void *)(inited + 32) = 0;
  swift_beginAccess();
  uint64_t v8 = *(void *)(inited + 16);
  unint64_t v9 = *(void *)(inited + 24);
  *(_OWORD *)(inited + 16) = xmmword_1D7AA0AC0;
  sub_1D7871BDC(v8, v9);
  swift_beginAccess();
  uint64_t v10 = *(void **)(inited + 32);
  *(void *)(inited + 32) = 0;

  v11.SecCertificateRef value = SecTrustRef.getLeafCertificate()().value;
  if (!v11.value)
  {
    __int16 v43 = 261;
    unint64_t v21 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000002ALL, 0x80000001D7ACA8B0, &v43, 0, v21, 0xD000000000000062, 0x80000001D7ACA4F0, v22, 0xD000000000000026, 0x80000001D7ACA8E0, 225);
    swift_willThrow();
    swift_release();
    return v5;
  }
  SecCertificateRef value = v11.value;
  if (!v6)
  {
LABEL_11:
    __int16 v43 = 261;
    unint64_t v23 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000027, 0x80000001D7ACA910, &v43, 0, v23, 0xD000000000000062, 0x80000001D7ACA4F0, v24, 0xD000000000000026, 0x80000001D7ACA8E0, 228);
    swift_willThrow();
    swift_release();

    return v5;
  }
  id v13 = v6;
  uint64_t v5 = v13;
  v14.SecCertificateRef value = SecTrustRef.getLeafCertificate()().value;
  if (!v14.value)
  {

    goto LABEL_11;
  }
  SecCertificateRef v42 = v14.value;
  uint64_t v15 = SecCertificateCopyKey(v14.value);
  if (v15
    && (uint64_t v16 = v15, v39 = copyPublicKeyDataFromSecKeyPublic(_:)(v15), v18 = v17, v16, v18 >> 60 != 15))
  {
    long long v38 = SecCertificateCopyKey(value);
    if (v38)
    {
      sub_1D7A9AC48();
      swift_allocObject();
      uint64_t v5 = (void *)sub_1D7A9AC38();
      uint64_t v26 = sub_1D7A9AC28();
      if (!v4)
      {
        uint64_t v36 = v26;
        unint64_t v37 = v27;
        swift_release();
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF82C0);
        uint64_t v30 = swift_initStackObject();
        *(_OWORD *)(v30 + 16) = xmmword_1D7AA0A40;
        *(unsigned char *)(v30 + 32) = 0;
        *(void *)(v30 + 40) = a3;
        *(void *)(v30 + 48) = a4;
        *(unsigned char *)(v30 + 56) = 1;
        *(void *)(v30 + 64) = v39;
        *(void *)(v30 + 72) = v18;
        unint64_t v35 = sub_1D7861310(v30);
        swift_setDeallocating();
        sub_1D7860790(a3, a4);
        sub_1D786E9D8(v39, v18);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF8680);
        swift_arrayDestroy();
        uint64_t v31 = sub_1D7A79FE4(v36, v37, v38, v35);
        unint64_t v33 = v32;
        uint64_t v5 = v34;

        sub_1D7871BDC(v39, v18);
        swift_setDeallocating();
        sub_1D7871BDC(*(void *)(inited + 16), *(void *)(inited + 24));

        sub_1D78607E8(v36, v37);
        swift_bridgeObjectRelease();
        sub_1D78607E8(v31, v33);
        return v5;
      }

      swift_release();
      sub_1D7871BDC(v39, v18);
      swift_release();

      goto LABEL_8;
    }
    __int16 v43 = 0;
    uint64_t v5 = v13;
    unint64_t v28 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000003FLL, 0x80000001D7ACA4B0, &v43, 0, v28, 0xD000000000000062, 0x80000001D7ACA4F0, v29, 0xD000000000000026, 0x80000001D7ACA8E0, 235);
    swift_willThrow();
    sub_1D7871BDC(v39, v18);
  }
  else
  {
    __int16 v43 = 242;
    uint64_t v5 = v13;
    unint64_t v19 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000032, 0x80000001D7ACA940, &v43, 0, v19, 0xD000000000000062, 0x80000001D7ACA4F0, v20, 0xD000000000000026, 0x80000001D7ACA8E0, 231);
    swift_willThrow();
  }
  swift_release();

LABEL_8:
  return v5;
}

void createEncryptedDataContainer<A>(with:to:senderSigningKey:encryptor:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v49 = a8;
  uint64_t v50 = a9;
  uint64_t v9 = a6;
  unint64_t v10 = a4;
  uint64_t v11 = a3;
  uint64_t v46 = *(void *)(a6 - 8);
  uint64_t v47 = a1;
  MEMORY[0x1F4188790](a1, a2, a3, a4, a5, a6, a7, a8);
  char v48 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  SecCertificateRef_optional v14 = *(void **)(v13 + 8);
  sub_1D7A3D060(v15, (uint64_t)v54);
  sub_1D7A3D060((uint64_t)v54, (uint64_t)v51);
  uint64_t v16 = v52;
  sub_1D7A3D0C8((uint64_t)v51);
  if (v16)
  {
    v17.SecCertificateRef value = SecTrustRef.getLeafCertificate()().value;
    if (v17.value) {
      goto LABEL_3;
    }
LABEL_9:
    v51[0] = 261;
    unint64_t v37 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000002ALL, 0x80000001D7ACA8B0, v51, 0, v37, 0xD000000000000062, 0x80000001D7ACA4F0, v38, 0xD000000000000041, 0x80000001D7ACA980, 251);
    swift_willThrow();
    goto LABEL_12;
  }
  uint64_t v28 = type metadata accessor for DIPECIESSessionV3SecKey();
  uint64_t v29 = swift_allocObject();
  uint64_t v45 = v9;
  unint64_t v44 = v10;
  uint64_t v30 = v29;
  long long v43 = xmmword_1D7AA0AC0;
  uint64_t v31 = v11;
  *(_OWORD *)(v29 + 16) = xmmword_1D7AA0AC0;
  unint64_t v32 = (uint64_t *)(v29 + 16);
  *(void *)(v29 + 32) = 0;
  unint64_t v33 = (void **)(v29 + 32);
  swift_beginAccess();
  uint64_t v34 = *v32;
  unint64_t v35 = *(void *)(v30 + 24);
  *(_OWORD *)unint64_t v32 = v43;
  uint64_t v11 = v31;
  sub_1D7871BDC(v34, v35);
  swift_beginAccess();
  uint64_t v36 = *v33;
  *unint64_t v33 = 0;

  uint64_t v52 = v28;
  uint64_t v53 = &protocol witness table for DIPECIESSessionV3SecKey;
  *(void *)unint64_t v51 = v30;
  unint64_t v10 = v44;
  uint64_t v9 = v45;
  sub_1D7A3D0C8((uint64_t)v54);
  sub_1D7A3D128((uint64_t)v51, (uint64_t)v54);
  v17.SecCertificateRef value = SecTrustRef.getLeafCertificate()().value;
  if (!v17.value) {
    goto LABEL_9;
  }
LABEL_3:
  SecCertificateRef value = v17.value;
  if (!v14)
  {
LABEL_11:
    v51[0] = 261;
    unint64_t v39 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000027, 0x80000001D7ACA910, v51, 0, v39, 0xD000000000000062, 0x80000001D7ACA4F0, v40, 0xD000000000000041, 0x80000001D7ACA980, 254);
    swift_willThrow();

    goto LABEL_12;
  }
  id v19 = v14;
  v20.SecCertificateRef value = SecTrustRef.getLeafCertificate()().value;
  if (!v20.value)
  {

    goto LABEL_11;
  }
  SecCertificateRef v21 = v20.value;
  uint64_t v45 = v11;
  uint64_t v22 = SecCertificateCopyKey(v20.value);
  if (!v22
    || (unint64_t v23 = v22,
        unint64_t v44 = copyPublicKeyDataFromSecKeyPublic(_:)(v22),
        unint64_t v25 = v24,
        v23,
        *(void *)&long long v43 = v25,
        v25 >> 60 == 15))
  {
    v51[0] = 242;
    unint64_t v26 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000032, 0x80000001D7ACA940, v51, 0, v26, 0xD000000000000062, 0x80000001D7ACA4F0, v27, 0xD000000000000041, 0x80000001D7ACA980, 257);
    swift_willThrow();

LABEL_12:
    sub_1D7A3D0C8((uint64_t)v54);
    return;
  }
  sub_1D7A3D060((uint64_t)v54, (uint64_t)v51);
  if (v52)
  {
    uint64_t v41 = (uint64_t)v48;
    (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v48, v47, v9);
    char v55 = 1;
    uint64_t v42 = v45;
    sub_1D7860790(v45, v10);
    EncryptedDataContainer.init(alg:encryptor:remoteCertificate:senderSigningKey:recipientSigningKey:data:)((uint64_t)&v55, (uint64_t)v51, value, v42, v10, v44, v43, v41, v50, v9);
    sub_1D7A3D0C8((uint64_t)v54);
  }
  else
  {
    __break(1u);
  }
}

uint64_t createSignedEncryptedMessage<A>(with:to:signingKey:encryptor:nonce:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 1216) = v12;
  *(void *)(v8 + 1208) = v11;
  *(void *)(v8 + 1200) = a8;
  *(void *)(v8 + 1192) = a7;
  *(void *)(v8 + 1184) = a6;
  *(void *)(v8 + 1176) = a5;
  *(void *)(v8 + 1168) = a4;
  *(void *)(v8 + 1160) = a2;
  *(void *)(v8 + 1152) = a1;
  uint64_t v9 = *(void *)(a3 + 8);
  *(void *)(v8 + 1224) = *(void *)a3;
  *(void *)(v8 + 1232) = v9;
  *(unsigned char *)(v8 + 1145) = *(unsigned char *)(a3 + 16);
  return MEMORY[0x1F4188298](sub_1D7A3C19C, 0, 0);
}

uint64_t sub_1D7A3C19C()
{
  uint64_t v1 = *(void **)(v0 + 1168);
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 24))(v2, v3);
  *(void *)(v0 + 1240) = v4;
  *(void *)(v0 + 1248) = v5;
  uint64_t v6 = v4;
  char v7 = *(unsigned char *)(v0 + 1145);
  uint64_t v8 = *(void *)(v0 + 1232);
  uint64_t v9 = *(void *)(v0 + 1216);
  uint64_t v10 = *(void *)(v0 + 1208);
  uint64_t v11 = *(void *)(v0 + 1200);
  uint64_t v12 = *(void *)(v0 + 1176);
  uint64_t v13 = *(void *)(v0 + 1160);
  *(void *)(v0 + 1128) = *(void *)(v0 + 1224);
  *(void *)(v0 + 1136) = v8;
  *(unsigned char *)(v0 + 1144) = v7;
  createEncryptedDataContainer<A>(with:to:senderSigningKey:encryptor:)(v13, v0 + 1128, v6, v5, v12, v11, v10, v9, v0 + 1016);
  char v14 = *(unsigned char *)(v0 + 1145);
  unint64_t v33 = *(void **)(v0 + 1168);
  uint64_t v15 = *(void *)(v0 + 1016);
  uint64_t v16 = *(void *)(v0 + 1024);
  char v17 = *(unsigned char *)(v0 + 1032);
  long long v31 = *(_OWORD *)(v0 + 1056);
  long long v32 = *(_OWORD *)(v0 + 1040);
  long long v29 = *(_OWORD *)(v0 + 1088);
  long long v30 = *(_OWORD *)(v0 + 1072);
  long long v28 = *(_OWORD *)(v0 + 1104);
  uint64_t v18 = *(void *)(v0 + 1120);
  uint64_t v19 = sub_1D7A9B008();
  *(unsigned char *)(v0 + 880) = 1;
  *(unsigned char *)(v0 + 881) = v14;
  *(void *)(v0 + 888) = v15;
  *(void *)(v0 + 896) = v16;
  *(unsigned char *)(v0 + 904) = v17;
  *(_OWORD *)(v0 + 912) = v32;
  *(_OWORD *)(v0 + 928) = v31;
  *(_OWORD *)(v0 + 944) = v30;
  *(_OWORD *)(v0 + 960) = v29;
  *(_OWORD *)(v0 + 976) = v28;
  *(void *)(v0 + 992) = v18;
  *(void *)(v0 + 1000) = v19;
  *(void *)(v0 + 1008) = v20;
  uint64_t v21 = type metadata accessor for EncryptedMessage();
  swift_getWitnessTable();
  swift_getWitnessTable();
  JWSSignedJSON.init(payload:)(v0 + 880, v21, v0 + 16);
  uint64_t v22 = type metadata accessor for JWSSignedJSON();
  JWSSignedJSON.setKid(_:)(v33);
  uint64_t v23 = *(void *)(v0 + 1192);
  if (v23)
  {
    uint64_t v24 = *(void *)(v0 + 1184);
    JWSSignedJSON.setNonce(_:)(*(Swift::String *)(&v23 - 1));
  }
  unint64_t v25 = (void *)swift_task_alloc();
  *(void *)(v0 + 1256) = v25;
  *unint64_t v25 = v0;
  v25[1] = sub_1D7A3C4AC;
  uint64_t v26 = *(void *)(v0 + 1168);
  return JWSSignedJSON.sign(_:)(v26, v22);
}

uint64_t sub_1D7A3C4AC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 1264) = v0;
  swift_task_dealloc();
  if (v0)
  {
    memcpy((void *)(v2 + 592), (const void *)(v2 + 16), 0x120uLL);
    sub_1D7A3D1A8(v2 + 592);
    uint64_t v3 = sub_1D7A3C65C;
  }
  else
  {
    uint64_t v3 = sub_1D7A3C5DC;
  }
  return MEMORY[0x1F4188298](v3, 0, 0);
}

uint64_t sub_1D7A3C5DC()
{
  uint64_t v1 = (void *)v0[144];
  sub_1D78607E8(v0[155], v0[156]);
  memcpy(v1, v0 + 2, 0x120uLL);
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_1D7A3C65C()
{
  sub_1D78607E8(v0[155], v0[156]);
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t _s13CoreIDVShared9KDFParamsV2eeoiySbAC_ACtFZ_0(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v6 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v8 = a1[5];
  unint64_t v7 = a1[6];
  uint64_t v9 = a2[1];
  uint64_t v10 = a2[2];
  uint64_t v12 = a2[3];
  uint64_t v11 = a2[4];
  uint64_t v14 = a2[5];
  unint64_t v13 = a2[6];
  if (v3)
  {
    if (!v9) {
      return 0;
    }
    if (*a1 != *a2 || v3 != v9)
    {
      char v15 = sub_1D7A9D358();
      uint64_t result = 0;
      if ((v15 & 1) == 0) {
        return result;
      }
    }
  }
  else if (v9)
  {
    return 0;
  }
  if (v6)
  {
    if (!v12) {
      return 0;
    }
    if (v4 != v10 || v6 != v12)
    {
      char v17 = sub_1D7A9D358();
      uint64_t result = 0;
      if ((v17 & 1) == 0) {
        return result;
      }
    }
  }
  else if (v12)
  {
    return 0;
  }
  if (v8)
  {
    if (v14)
    {
      if (v5 != v11 || v8 != v14)
      {
        char v18 = sub_1D7A9D358();
        uint64_t result = 0;
        if ((v18 & 1) == 0) {
          return result;
        }
      }
      goto LABEL_24;
    }
    return 0;
  }
  if (v14) {
    return 0;
  }
LABEL_24:
  uint64_t result = (v7 | v13) == 0;
  if (v7 && v13)
  {
    return sub_1D7932784((void *)v7, (void *)v13);
  }
  return result;
}

uint64_t _s13CoreIDVShared16EncryptionParamsV2eeoiySbAC_ACtFZ_0(unsigned __int8 *a1, uint64_t a2)
{
  int v2 = *a1;
  uint64_t v3 = *((void *)a1 + 1);
  uint64_t v4 = *((void *)a1 + 2);
  uint64_t v5 = *((void *)a1 + 3);
  uint64_t v31 = *((void *)a1 + 4);
  long long v29 = *(_OWORD *)(a1 + 56);
  long long v30 = *(_OWORD *)(a1 + 40);
  long long v28 = *(_OWORD *)(a1 + 72);
  uint64_t v27 = *((void *)a1 + 11);
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = 0xE500000000000000;
  uint64_t v11 = 0x33765F4345;
  long long v25 = *(_OWORD *)(a2 + 56);
  long long v26 = *(_OWORD *)(a2 + 40);
  if (v2 != 1)
  {
    uint64_t v11 = 0x48535F33765F4345;
    unint64_t v10 = 0xE800000000000000;
  }
  long long v24 = *(_OWORD *)(a2 + 72);
  if (*a1) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0x765F4343455F5645;
  }
  if (v2) {
    unint64_t v13 = v10;
  }
  else {
    unint64_t v13 = 0xEF312E4E53412D31;
  }
  uint64_t v23 = *(void *)(a2 + 88);
  unint64_t v14 = 0xE500000000000000;
  uint64_t v15 = 0x33765F4345;
  if (*(unsigned char *)a2 != 1)
  {
    uint64_t v15 = 0x48535F33765F4345;
    unint64_t v14 = 0xE800000000000000;
  }
  if (*(unsigned char *)a2) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0x765F4343455F5645;
  }
  if (*(unsigned char *)a2) {
    unint64_t v17 = v14;
  }
  else {
    unint64_t v17 = 0xEF312E4E53412D31;
  }
  if (v12 == v16 && v13 == v17)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v18 = sub_1D7A9D358();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v19 = 0;
    if ((v18 & 1) == 0) {
      return v19 & 1;
    }
  }
  if (v3 == v6 && v4 == v7 || (char v20 = sub_1D7A9D358(), v19 = 0, (v20 & 1) != 0))
  {
    if (v5 == v9 && v31 == v8 || (char v21 = sub_1D7A9D358(), v19 = 0, (v21 & 1) != 0))
    {
      v34[0] = v30;
      v34[1] = v29;
      v34[2] = v28;
      uint64_t v35 = v27;
      v32[0] = v26;
      v32[1] = v25;
      v32[2] = v24;
      uint64_t v33 = v23;
      char v19 = _s13CoreIDVShared9KDFParamsV2eeoiySbAC_ACtFZ_0(v34, v32);
    }
  }
  return v19 & 1;
}

uint64_t type metadata accessor for EncryptedMessage.CodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for EncryptedDataContainer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1D7A3CA8C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1D7A3CB20(uint64_t a1)
{
  return a1;
}

uint64_t _s13CoreIDVShared18KeyAgreementParamsV2eeoiySbAC_ACtFZ_0(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = a2[2];
  uint64_t v5 = a2[3];
  BOOL v6 = *a1 == *a2 && a1[1] == a2[1];
  if (v6 || (char v7 = sub_1D7A9D358(), result = 0, (v7 & 1) != 0))
  {
    if (v2 == v4 && v3 == v5)
    {
      return 1;
    }
    else
    {
      return sub_1D7A9D358();
    }
  }
  return result;
}

unint64_t sub_1D7A3CC58()
{
  unint64_t result = qword_1EBDF8008;
  if (!qword_1EBDF8008)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBDF8008);
  }
  return result;
}

unint64_t sub_1D7A3CCAC()
{
  unint64_t result = qword_1EBDF81F8;
  if (!qword_1EBDF81F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBDF81F8);
  }
  return result;
}

unint64_t sub_1D7A3CD00()
{
  unint64_t result = qword_1EBDF7F28;
  if (!qword_1EBDF7F28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBDF7F28);
  }
  return result;
}

unint64_t sub_1D7A3CD54()
{
  unint64_t result = qword_1EBDF81E8;
  if (!qword_1EBDF81E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBDF81E8);
  }
  return result;
}

unint64_t sub_1D7A3CDA8()
{
  unint64_t result = qword_1EBDF8020;
  if (!qword_1EBDF8020)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBDF8020);
  }
  return result;
}

unint64_t sub_1D7A3CDFC()
{
  unint64_t result = qword_1EBDF8210;
  if (!qword_1EBDF8210)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBDF8210);
  }
  return result;
}

unint64_t sub_1D7A3CE50()
{
  unint64_t result = qword_1EA847270;
  if (!qword_1EA847270)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847270);
  }
  return result;
}

unint64_t sub_1D7A3CEA4()
{
  unint64_t result = qword_1EA847278;
  if (!qword_1EA847278)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847278);
  }
  return result;
}

unint64_t sub_1D7A3CEF8()
{
  unint64_t result = qword_1EA847280;
  if (!qword_1EA847280)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847280);
  }
  return result;
}

unint64_t sub_1D7A3CF4C()
{
  unint64_t result = qword_1EA847290;
  if (!qword_1EA847290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847290);
  }
  return result;
}

unint64_t sub_1D7A3CFA0()
{
  unint64_t result = qword_1EA847298;
  if (!qword_1EA847298)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847298);
  }
  return result;
}

uint64_t type metadata accessor for EncryptedDataContainer.CodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t sub_1D7A3D00C()
{
  unint64_t result = qword_1EBDF7F40;
  if (!qword_1EBDF7F40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBDF7F40);
  }
  return result;
}

uint64_t sub_1D7A3D060(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8472A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D7A3D0C8(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8472A0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1D7A3D128(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8472A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for EncryptedMessage()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1D7A3D1A8(uint64_t a1)
{
  return a1;
}

unint64_t sub_1D7A3D2D4()
{
  unint64_t result = qword_1EA8472B0;
  if (!qword_1EA8472B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8472B0);
  }
  return result;
}

unint64_t sub_1D7A3D32C()
{
  unint64_t result = qword_1EA8472B8[0];
  if (!qword_1EA8472B8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1EA8472B8);
  }
  return result;
}

ValueMetadata *type metadata accessor for EncryptionParamsAlgorithmIdentifier()
{
  return &type metadata for EncryptionParamsAlgorithmIdentifier;
}

uint64_t getEnumTagSinglePayload for EncryptedMessageEntity(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF8) {
    goto LABEL_17;
  }
  if (a2 + 8 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 8) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 8;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v8 = v6 - 9;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for EncryptedMessageEntity(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *unint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D7A3D4F0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EncryptedMessageEntity()
{
  return &type metadata for EncryptedMessageEntity;
}

uint64_t initializeBufferWithCopyOfBuffer for RecipientEncryptionCertificate(uint64_t a1, uint64_t a2)
{
  int v3 = *(void **)a2;
  unsigned int v4 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  id v5 = v3;
  id v6 = v4;
  return a1;
}

void destroy for RecipientEncryptionCertificate(uint64_t a1)
{
  int v2 = *(void **)(a1 + 8);
}

uint64_t assignWithCopy for RecipientEncryptionCertificate(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  BOOL v7 = *(void **)(a1 + 8);
  int v8 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v8;
  id v9 = v8;

  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for RecipientEncryptionCertificate(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for RecipientEncryptionCertificate(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RecipientEncryptionCertificate(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RecipientEncryptionCertificate()
{
  return &type metadata for RecipientEncryptionCertificate;
}

uint64_t sub_1D7A3D6E0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D7A3D74C(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v7;
  uint64_t v8 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v8;
  uint64_t v9 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v9;
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1D7A3D814(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy136_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t sub_1D7A3D988(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v8;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v9;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1D7A3DA40(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 136)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1D7A3DA88(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 136) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 136) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyAgreementParams()
{
  return &type metadata for KeyAgreementParams;
}

uint64_t destroy for KDFParams()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for KDFParams(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for KDFParams(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for KDFParams(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for KDFParams(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for KDFParams(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 56) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KDFParams()
{
  return &type metadata for KDFParams;
}

ValueMetadata *type metadata accessor for EncryptionParams()
{
  return &type metadata for EncryptionParams;
}

uint64_t _s13CoreIDVShared16EncryptionParamsVwxx_0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t _s13CoreIDVShared16EncryptionParamsVwcp_0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s13CoreIDVShared16EncryptionParamsVwca_0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s13CoreIDVShared16EncryptionParamsVwta_0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s13CoreIDVShared16EncryptionParamsVwet_0(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1D7A3E06C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EncryptedDataContainerParamsOnly()
{
  return &type metadata for EncryptedDataContainerParamsOnly;
}

uint64_t sub_1D7A3E0D4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D7A3E138(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  uint64_t v8 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v8;
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1D7A3E1E8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy112_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t sub_1D7A3E31C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v8;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1D7A3E3BC(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 112)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1D7A3E404(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 112) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 112) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for EncryptedDataContainerParamsOnly.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *__n128 result = a2;
        return result;
      case 2:
        *(_WORD *)__n128 result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *__n128 result = 0;
      break;
    case 2:
      *(_WORD *)__n128 result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1D7A3E500);
    case 4:
      *(_DWORD *)__n128 result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for EncryptedDataContainerParamsOnly.CodingKeys()
{
  return &type metadata for EncryptedDataContainerParamsOnly.CodingKeys;
}

unsigned char *_s13CoreIDVShared35EncryptionParamsAlgorithmIdentifierOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D7A3E604);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EncryptionParams.CodingKeys()
{
  return &type metadata for EncryptionParams.CodingKeys;
}

ValueMetadata *type metadata accessor for KDFParams.CodingKeys()
{
  return &type metadata for KDFParams.CodingKeys;
}

unsigned char *_s13CoreIDVShared18KeyAgreementParamsV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D7A3E71CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyAgreementParams.CodingKeys()
{
  return &type metadata for KeyAgreementParams.CodingKeys;
}

unsigned char *_s13CoreIDVShared9KDFParamsV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *__n128 result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D7A3E820);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t sub_1D7A3E848()
{
  return swift_getWitnessTable();
}

unint64_t sub_1D7A3E868()
{
  unint64_t result = qword_1EA847340;
  if (!qword_1EA847340)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847340);
  }
  return result;
}

unint64_t sub_1D7A3E8C0()
{
  unint64_t result = qword_1EA847348;
  if (!qword_1EA847348)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847348);
  }
  return result;
}

unint64_t sub_1D7A3E918()
{
  unint64_t result = qword_1EA847350;
  if (!qword_1EA847350)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847350);
  }
  return result;
}

unint64_t sub_1D7A3E970()
{
  unint64_t result = qword_1EA847358;
  if (!qword_1EA847358)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847358);
  }
  return result;
}

uint64_t sub_1D7A3E9C4()
{
  return swift_getWitnessTable();
}

uint64_t sub_1D7A3E9E0()
{
  return swift_getWitnessTable();
}

uint64_t sub_1D7A3E9FC()
{
  return swift_getWitnessTable();
}

unint64_t sub_1D7A3EA1C()
{
  unint64_t result = qword_1EA847360;
  if (!qword_1EA847360)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847360);
  }
  return result;
}

unint64_t sub_1D7A3EA74()
{
  unint64_t result = qword_1EA847368;
  if (!qword_1EA847368)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847368);
  }
  return result;
}

unint64_t sub_1D7A3EACC()
{
  unint64_t result = qword_1EBDF7F38;
  if (!qword_1EBDF7F38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBDF7F38);
  }
  return result;
}

unint64_t sub_1D7A3EB24()
{
  unint64_t result = qword_1EBDF7F30;
  if (!qword_1EBDF7F30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBDF7F30);
  }
  return result;
}

unint64_t sub_1D7A3EB7C()
{
  unint64_t result = qword_1EBDF8208;
  if (!qword_1EBDF8208)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBDF8208);
  }
  return result;
}

unint64_t sub_1D7A3EBD4()
{
  unint64_t result = qword_1EBDF8200;
  if (!qword_1EBDF8200)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBDF8200);
  }
  return result;
}

unint64_t sub_1D7A3EC2C()
{
  unint64_t result = qword_1EBDF8018;
  if (!qword_1EBDF8018)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBDF8018);
  }
  return result;
}

unint64_t sub_1D7A3EC84()
{
  unint64_t result = qword_1EBDF8010;
  if (!qword_1EBDF8010)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBDF8010);
  }
  return result;
}

uint64_t sub_1D7A3ECD8()
{
  return swift_getWitnessTable();
}

uint64_t sub_1D7A3ECF4()
{
  return swift_getWitnessTable();
}

uint64_t sub_1D7A3ED10(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7265646E6573 && a2 == 0xE600000000000000;
  if (v2 || (sub_1D7A9D358() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001D7ACA9F0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_1D7A9D358();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1D7A3EDF8(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD00000000000001BLL && a2 == 0x80000001D7ACAA10 || (sub_1D7A9D358() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD00000000000001ELL && a2 == 0x80000001D7ACAA30 || (sub_1D7A9D358() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001D7ACAA50 || (sub_1D7A9D358() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001D7ACAA70)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v5 = sub_1D7A9D358();
    swift_bridgeObjectRelease();
    if (v5) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_1D7A3EF94(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000013 && a2 == 0x80000001D7AC0930 || (sub_1D7A9D358() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656572674179656BLL && a2 == 0xEC000000746E656DLL || (sub_1D7A9D358() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 6710379 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v5 = sub_1D7A9D358();
    swift_bridgeObjectRelease();
    if (v5) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

unint64_t sub_1D7A3F0F0()
{
  unint64_t result = qword_1EA847370;
  if (!qword_1EA847370)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847370);
  }
  return result;
}

unint64_t sub_1D7A3F144()
{
  unint64_t result = qword_1EBDF81F0;
  if (!qword_1EBDF81F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBDF81F0);
  }
  return result;
}

void static MobileDocumentReaderMilestone.readerIdentifierCalled.getter(void *a1@<X8>)
{
  *a1 = 0x3263316330383734;
  a1[1] = 0xE800000000000000;
  a1[2] = 0xD000000000000030;
  a1[3] = 0x80000001D7ACAA90;
}

void static MobileDocumentReaderMilestone.prepareCalled.getter(void *a1@<X8>)
{
  *a1 = 0x3465343466356666;
  a1[1] = 0xE800000000000000;
  a1[2] = 0xD000000000000027;
  a1[3] = 0x80000001D7ACAAD0;
}

void static MobileDocumentReaderMilestone.merchantCalled.getter(void *a1@<X8>)
{
  *a1 = 0x6430316161326630;
  a1[1] = 0xE800000000000000;
  a1[2] = 0xD00000000000002ELL;
  a1[3] = 0x80000001D7ACAB00;
}

void static MobileDocumentReaderMilestone.readDocumentCalled.getter(void *a1@<X8>)
{
  *a1 = 0x3238363537383936;
  a1[1] = 0xE800000000000000;
  a1[2] = 0xD00000000000002CLL;
  a1[3] = 0x80000001D7ACAB30;
}

void static MobileDocumentReaderMilestone.canRequestDocumentCalled.getter(void *a1@<X8>)
{
  *a1 = 0x3661626533643933;
  a1[1] = 0xE800000000000000;
  a1[2] = 0xD00000000000002FLL;
  a1[3] = 0x80000001D7ACAB60;
}

void static MobileDocumentReaderMilestone.cancelReadCalled.getter(void *a1@<X8>)
{
  *a1 = 0x6331386165316233;
  a1[1] = 0xE800000000000000;
  a1[2] = 0xD00000000000002ALL;
  a1[3] = 0x80000001D7ACAB90;
}

void static MobileDocumentReaderMilestone.readDocumentInProgress.getter(void *a1@<X8>)
{
  *a1 = 0x3133653862306436;
  a1[1] = 0xE800000000000000;
  a1[2] = 0xD000000000000044;
  a1[3] = 0x80000001D7ACABC0;
}

void static MobileDocumentReaderMilestone.noReadInProgressToCancel.getter(void *a1@<X8>)
{
  *a1 = 0x3763396539636537;
  a1[1] = 0xE800000000000000;
  a1[2] = 0xD00000000000004ALL;
  a1[3] = 0x80000001D7ACAC10;
}

void static MobileDocumentReaderMilestone.readDocumentReaderReady.getter(void *a1@<X8>)
{
  *a1 = 0x6134613935316464;
  a1[1] = 0xE800000000000000;
  a1[2] = 0xD000000000000024;
  a1[3] = 0x80000001D7ACAC60;
}

void static MobileDocumentReaderMilestone.readDocumentReaderConnecting.getter(void *a1@<X8>)
{
  *a1 = 0x3731383135623932;
  a1[1] = 0xE800000000000000;
  a1[2] = 0xD00000000000001FLL;
  a1[3] = 0x80000001D7ACAC90;
}

void static MobileDocumentReaderMilestone.readDocumentReaderAwaitingApproval.getter(void *a1@<X8>)
{
  *a1 = 0x3164346634623938;
  a1[1] = 0xE800000000000000;
  a1[2] = 0xD000000000000026;
  a1[3] = 0x80000001D7ACACB0;
}

void static MobileDocumentReaderMilestone.readDocumentResponseReceived.getter(void *a1@<X8>)
{
  *a1 = 0x6430623035333834;
  a1[1] = 0xE800000000000000;
  a1[2] = 0xD00000000000003ELL;
  a1[3] = 0x80000001D7ACACE0;
}

void static MobileDocumentReaderMilestone.readDocumentReturningResponse.getter(void *a1@<X8>)
{
  *a1 = 0x3265353634636239;
  a1[1] = 0xE800000000000000;
  a1[2] = 0xD00000000000002BLL;
  a1[3] = 0x80000001D7ACAD20;
}

void static MobileDocumentReaderMilestone.readRequestBuilt.getter(void *a1@<X8>)
{
  *a1 = 0x6330646664616339;
  a1[1] = 0xE800000000000000;
  a1[2] = 0xD000000000000032;
  a1[3] = 0x80000001D7ACAD50;
}

void static MobileDocumentReaderMilestone.readRequestSigned.getter(void *a1@<X8>)
{
  *a1 = 0x3562316263326233;
  a1[1] = 0xE800000000000000;
  a1[2] = 0xD000000000000032;
  a1[3] = 0x80000001D7ACAD90;
}

void static MobileDocumentReaderMilestone.readerAuthenticationCertificateFetched.getter(void *a1@<X8>)
{
  *a1 = 0x6632396531363235;
  a1[1] = 0xE800000000000000;
  a1[2] = 0xD000000000000029;
  a1[3] = 0x80000001D7ACADD0;
}

void static MobileDocumentReaderMilestone.readerAuthenticationCertificateStored.getter(void *a1@<X8>)
{
  *a1 = 0x3662383539363238;
  a1[1] = 0xE800000000000000;
  a1[2] = 0xD000000000000034;
  a1[3] = 0x80000001D7ACAE00;
}

void static MobileDocumentReaderMilestone.readerAuthenticationCertificateDeleted.getter(void *a1@<X8>)
{
  *a1 = 0x3635353162613039;
  a1[1] = 0xE800000000000000;
  a1[2] = 0xD000000000000029;
  a1[3] = 0x80000001D7ACAE40;
}

void static MobileDocumentReaderMilestone.readerAuthenticationKeyFetched.getter(void *a1@<X8>)
{
  *a1 = 0x3230313136363138;
  a1[1] = 0xE800000000000000;
  a1[2] = 0xD000000000000021;
  a1[3] = 0x80000001D7ACAE70;
}

void static MobileDocumentReaderMilestone.readerAuthenticationKeyCreated.getter(void *a1@<X8>)
{
  *a1 = 0x3064376665376264;
  a1[1] = 0xE800000000000000;
  a1[2] = 0xD000000000000035;
  a1[3] = 0x80000001D7ACAEA0;
}

void static MobileDocumentReaderMilestone.readerAuthenticationKeyDeleted.getter(void *a1@<X8>)
{
  *a1 = 0x6138653438636464;
  a1[1] = 0xE800000000000000;
  a1[2] = 0xD000000000000021;
  a1[3] = 0x80000001D7ACAEE0;
}

void static MobileDocumentReaderMilestone.prepareCertificateFound.getter(void *a1@<X8>)
{
  *a1 = 0x3535623739396634;
  a1[1] = 0xE800000000000000;
  a1[2] = 0xD000000000000033;
  a1[3] = 0x80000001D7ACAF10;
}

void static MobileDocumentReaderMilestone.prepareCertificateNotFound.getter(void *a1@<X8>)
{
  *a1 = 0x3939313732356531;
  a1[1] = 0xE800000000000000;
  a1[2] = 0xD00000000000003CLL;
  a1[3] = 0x80000001D7ACAF50;
}

void static MobileDocumentReaderMilestone.prepareIdentityKeyFound.getter(void *a1@<X8>)
{
  *a1 = 0x3065613565366264;
  a1[1] = 0xE800000000000000;
  a1[2] = 0xD000000000000034;
  a1[3] = 0x80000001D7ACAF90;
}

void static MobileDocumentReaderMilestone.prepareIdentityKeyNotFound.getter(void *a1@<X8>)
{
  *a1 = 0x3733373965383831;
  a1[1] = 0xE800000000000000;
  a1[2] = 0xD00000000000003DLL;
  a1[3] = 0x80000001D7ACAFD0;
}

void static MobileDocumentReaderMilestone.prepareCertificateFetched.getter(void *a1@<X8>)
{
  *a1 = 0x6266636434646163;
  a1[1] = 0xE800000000000000;
  a1[2] = 0xD000000000000029;
  a1[3] = 0x80000001D7ACB010;
}

ValueMetadata *type metadata accessor for MobileDocumentReaderMilestone()
{
  return &type metadata for MobileDocumentReaderMilestone;
}

uint64_t IQComplexSignal.identifier.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  return sub_1D7861414(v2, v3);
}

uint64_t IQComplexSignal.priority.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t IQComplexSignal.signals.getter()
{
  return swift_bridgeObjectRetain();
}

__n128 IQComplexSignal.init(identifier:priority:signals:)@<Q0>(__n128 *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, __n128 *a4@<X8>)
{
  __n128 result = *a1;
  *a4 = *a1;
  a4[1].n128_u64[0] = a2;
  a4[1].n128_u64[1] = a3;
  return result;
}

uint64_t IQComplexSignal.debugDescription.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  sub_1D7A9CC48();
  swift_bridgeObjectRelease();
  strcpy((char *)v3, "identifier: ");
  IQACode.toString.getter();
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  sub_1D7A9D258();
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  sub_1D7A8A190(v1);
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  return v3[0];
}

uint64_t sub_1D7A3F8B4()
{
  uint64_t v1 = 0x797469726F697270;
  if (*v0 != 1) {
    uint64_t v1 = 0x736C616E676973;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x696669746E656469;
  }
}

uint64_t sub_1D7A3F914@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1D7A415FC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D7A3F93C(uint64_t a1)
{
  unint64_t v2 = sub_1D7A3FBB4();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1D7A3F978(uint64_t a1)
{
  unint64_t v2 = sub_1D7A3FBB4();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t IQComplexSignal.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847378);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v5, v6, v7, v8, v9, v10, v11);
  unint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *v1;
  uint64_t v14 = v1[1];
  uint64_t v16 = v1[2];
  uint64_t v21 = v1[3];
  uint64_t v22 = v16;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D7A3FBB4();
  sub_1D7A9D6E8();
  uint64_t v24 = v15;
  uint64_t v25 = v14;
  char v26 = 0;
  sub_1D7A3FC08();
  uint64_t v17 = v23;
  sub_1D7A9D228();
  if (!v17)
  {
    uint64_t v18 = v21;
    LOBYTE(v24) = 1;
    sub_1D7A9D208();
    uint64_t v24 = v18;
    char v26 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847390);
    sub_1D7A3FFC8(&qword_1EA847398, (void (*)(void))sub_1D7A3FC5C);
    sub_1D7A9D228();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v13, v3);
}

unint64_t sub_1D7A3FBB4()
{
  unint64_t result = qword_1EA847380;
  if (!qword_1EA847380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847380);
  }
  return result;
}

unint64_t sub_1D7A3FC08()
{
  unint64_t result = qword_1EA847388;
  if (!qword_1EA847388)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847388);
  }
  return result;
}

unint64_t sub_1D7A3FC5C()
{
  unint64_t result = qword_1EA8473A0;
  if (!qword_1EA8473A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8473A0);
  }
  return result;
}

uint64_t IQComplexSignal.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8473A8);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7, v8, v9, v10, v11, v12, v13);
  uint64_t v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D7A3FBB4();
  sub_1D7A9D6A8();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v24 = 0;
  sub_1D7A3FF74();
  sub_1D7A9D148();
  uint64_t v16 = v22;
  unint64_t v17 = v23;
  LOBYTE(v22) = 1;
  sub_1D7861414(v16, v23);
  uint64_t v21 = sub_1D7A9D128();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847390);
  char v24 = 2;
  sub_1D7A3FFC8(&qword_1EA8473B8, (void (*)(void))sub_1D7A40038);
  sub_1D7A9D148();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v5);
  uint64_t v18 = v22;
  sub_1D7861414(v16, v17);
  swift_bridgeObjectRetain();
  sub_1D78C2774(v16, v17);
  *a2 = v16;
  a2[1] = v17;
  a2[2] = v21;
  a2[3] = v18;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  sub_1D78C2774(v16, v17);
  return swift_bridgeObjectRelease();
}

unint64_t sub_1D7A3FF74()
{
  unint64_t result = qword_1EA8473B0;
  if (!qword_1EA8473B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8473B0);
  }
  return result;
}

uint64_t sub_1D7A3FFC8(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA847390);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1D7A40038()
{
  unint64_t result = qword_1EA8473C0;
  if (!qword_1EA8473C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8473C0);
  }
  return result;
}

uint64_t sub_1D7A4008C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return IQComplexSignal.init(from:)(a1, a2);
}

uint64_t sub_1D7A400A4(void *a1)
{
  return IQComplexSignal.encode(to:)(a1);
}

uint64_t IQSignal.type.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v3;
  unsigned __int8 v4 = *(unsigned char *)(v1 + 16);
  *(unsigned char *)(a1 + 16) = v4;
  return sub_1D7953984(v2, v3, v4);
}

void IQSignal.comparator.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 17);
}

float IQSignal.threshold.getter()
{
  return *(float *)(v0 + 20);
}

uint64_t IQSignal.init(type:comparator:threshold:)@<X0>(uint64_t result@<X0>, char *a2@<X1>, uint64_t a3@<X8>, float a4@<S0>)
{
  char v4 = *(unsigned char *)(result + 16);
  char v5 = *a2;
  *(_OWORD *)a3 = *(_OWORD *)result;
  *(unsigned char *)(a3 + 16) = v4;
  *(unsigned char *)(a3 + 17) = v5;
  *(float *)(a3 + 20) = a4;
  return result;
}

uint64_t IQSignal.debugDescription.getter()
{
  return 0;
}

uint64_t IQComparator.rawValue.getter()
{
  uint64_t result = 0x6C61757165;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6C61757145746F6ELL;
      break;
    case 2:
      uint64_t result = 1936942444;
      break;
    case 3:
      uint64_t result = 0x72657461657267;
      break;
    case 4:
      uint64_t result = 0x617571457373656CLL;
      break;
    case 5:
      uint64_t result = 0x4572657461657267;
      break;
    case 6:
      uint64_t result = 0x6E776F6E6B6E75;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1D7A403B4()
{
  uint64_t v1 = 0x74617261706D6F63;
  if (*v0 != 1) {
    uint64_t v1 = 0x6C6F687365726874;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1701869940;
  }
}

uint64_t sub_1D7A40410@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1D7A41760(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D7A40438(uint64_t a1)
{
  unint64_t v2 = sub_1D7A4068C();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1D7A40474(uint64_t a1)
{
  unint64_t v2 = sub_1D7A4068C();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t IQSignal.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8473C8);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v5, v6, v7, v8, v9, v10, v11);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *v1;
  uint64_t v14 = v1[1];
  char v16 = *((unsigned char *)v1 + 16);
  HIDWORD(v23) = *((unsigned __int8 *)v1 + 17);
  uint64_t v17 = a1[3];
  uint64_t v18 = a1;
  uint64_t v20 = v19;
  __swift_project_boxed_opaque_existential_1(v18, v17);
  sub_1D7A4068C();
  sub_1D7A9D6E8();
  uint64_t v26 = v15;
  uint64_t v27 = v14;
  char v28 = v16;
  char v25 = 0;
  sub_1D7953BE8();
  uint64_t v21 = v24;
  sub_1D7A9D228();
  if (!v21)
  {
    LOBYTE(v26) = BYTE4(v23);
    char v25 = 1;
    sub_1D7A406E0();
    sub_1D7A9D228();
    LOBYTE(v26) = 2;
    sub_1D7A9D1F8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v13, v20);
}

unint64_t sub_1D7A4068C()
{
  unint64_t result = qword_1EA8473D0;
  if (!qword_1EA8473D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8473D0);
  }
  return result;
}

unint64_t sub_1D7A406E0()
{
  unint64_t result = qword_1EA8473D8;
  if (!qword_1EA8473D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8473D8);
  }
  return result;
}

uint64_t IQSignal.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8473E0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7, v8, v9, v10, v11, v12, v13);
  uint64_t v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D7A4068C();
  sub_1D7A9D6A8();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v25 = 0;
  sub_1D7953CFC();
  sub_1D7A9D148();
  uint64_t v24 = a2;
  uint64_t v17 = v26;
  uint64_t v16 = v27;
  unsigned __int8 v18 = v28;
  char v25 = 1;
  sub_1D7953984(v26, v27, v28);
  sub_1D7A409AC();
  sub_1D7A9D148();
  HIDWORD(v23) = v26;
  LOBYTE(v26) = 2;
  sub_1D7A9D118();
  int v20 = v19;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v5);
  uint64_t v22 = v24;
  *uint64_t v24 = v17;
  v22[1] = v16;
  *((unsigned char *)v22 + 16) = v18;
  *((unsigned char *)v22 + 17) = BYTE4(v23);
  *((_DWORD *)v22 + 5) = v20;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_1D795399C(v17, v16, v18);
}

unint64_t sub_1D7A409AC()
{
  unint64_t result = qword_1EA8473E8;
  if (!qword_1EA8473E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8473E8);
  }
  return result;
}

uint64_t sub_1D7A40A00@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return IQSignal.init(from:)(a1, a2);
}

uint64_t sub_1D7A40A18(void *a1)
{
  return IQSignal.encode(to:)(a1);
}

CoreIDVShared::IQComparator_optional __swiftcall IQComparator.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v2 = v1;
  unint64_t v3 = sub_1D7A9D058();
  result.SecCertificateRef value = swift_bridgeObjectRelease();
  char v5 = 7;
  if (v3 < 7) {
    char v5 = v3;
  }
  *uint64_t v2 = v5;
  return result;
}

uint64_t sub_1D7A40A8C(unsigned __int8 *a1, char *a2)
{
  return sub_1D799882C(*a1, *a2);
}

unint64_t sub_1D7A40A9C()
{
  unint64_t result = qword_1EA8473F0;
  if (!qword_1EA8473F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8473F0);
  }
  return result;
}

uint64_t sub_1D7A40AF0()
{
  return sub_1D7A1ED64();
}

uint64_t sub_1D7A40AFC()
{
  sub_1D7A9C0B8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D7A40C14()
{
  return sub_1D7A1ED64();
}

CoreIDVShared::IQComparator_optional sub_1D7A40C1C(Swift::String *a1)
{
  return IQComparator.init(rawValue:)(*a1);
}

void sub_1D7A40C28(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xE500000000000000;
  uint64_t v3 = 0x6C61757165;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE800000000000000;
      uint64_t v3 = 0x6C61757145746F6ELL;
      goto LABEL_3;
    case 2:
      *(void *)a1 = 1936942444;
      *(void *)(a1 + 8) = 0xE400000000000000;
      break;
    case 3:
      *(void *)a1 = 0x72657461657267;
      *(void *)(a1 + 8) = 0xE700000000000000;
      break;
    case 4:
      *(void *)a1 = 0x617571457373656CLL;
      *(void *)(a1 + 8) = 0xE90000000000006CLL;
      break;
    case 5:
      strcpy((char *)a1, "greaterEqual");
      *(unsigned char *)(a1 + 13) = 0;
      *(_WORD *)(a1 + 14) = -5120;
      break;
    case 6:
      *(void *)a1 = 0x6E776F6E6B6E75;
      *(void *)(a1 + 8) = 0xE700000000000000;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

uint64_t sub_1D7A40D24()
{
  return sub_1D7A9C2B8();
}

uint64_t sub_1D7A40D84()
{
  return sub_1D7A9C258();
}

uint64_t destroy for IQComplexSignal(uint64_t a1)
{
  if (*(void *)(a1 + 8) >= 0x30uLL) {
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for IQComplexSignal(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (v4 >= 0x30)
  {
    *a1 = *a2;
    a1[1] = v4;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for IQComplexSignal(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (a1[1] >= 0x30uLL)
  {
    if (v4 >= 0x30)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    sub_1D7A40F28((uint64_t)a1);
    goto LABEL_6;
  }
  if (v4 < 0x30)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
LABEL_8:
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1D7A40F28(uint64_t a1)
{
  return a1;
}

void *assignWithTake for IQComplexSignal(void *a1, void *a2)
{
  if (a1[1] >= 0x30uLL)
  {
    unint64_t v4 = a2[1];
    if (v4 >= 0x30)
    {
      *a1 = *a2;
      a1[1] = v4;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_1D7A40F28((uint64_t)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_6:
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for IQComplexSignal()
{
  return &type metadata for IQComplexSignal;
}

uint64_t sub_1D7A41000(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 16);
  sub_1D7953984(*(void *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return a1;
}

uint64_t assignWithCopy for IQSignal(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 16);
  sub_1D7953984(*(void *)a2, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  unsigned __int8 v9 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v6;
  sub_1D795399C(v7, v8, v9);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return a1;
}

uint64_t assignWithTake for IQSignal(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v7 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v4;
  sub_1D795399C(v5, v6, v7);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return a1;
}

uint64_t getEnumTagSinglePayload for IQSignal(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IQSignal(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IQSignal()
{
  return &type metadata for IQSignal;
}

unsigned char *storeEnumTagSinglePayload for IQComparator(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D7A4129CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IQComparator()
{
  return &type metadata for IQComparator;
}

ValueMetadata *type metadata accessor for IQSignal.CodingKeys()
{
  return &type metadata for IQSignal.CodingKeys;
}

unsigned char *_s13CoreIDVShared8IQSignalV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D7A413B4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IQComplexSignal.CodingKeys()
{
  return &type metadata for IQComplexSignal.CodingKeys;
}

unint64_t sub_1D7A413F0()
{
  unint64_t result = qword_1EA8473F8;
  if (!qword_1EA8473F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8473F8);
  }
  return result;
}

unint64_t sub_1D7A41448()
{
  unint64_t result = qword_1EA847400;
  if (!qword_1EA847400)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847400);
  }
  return result;
}

unint64_t sub_1D7A414A0()
{
  unint64_t result = qword_1EA847408;
  if (!qword_1EA847408)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847408);
  }
  return result;
}

unint64_t sub_1D7A414F8()
{
  unint64_t result = qword_1EA847410;
  if (!qword_1EA847410)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847410);
  }
  return result;
}

unint64_t sub_1D7A41550()
{
  unint64_t result = qword_1EA847418;
  if (!qword_1EA847418)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847418);
  }
  return result;
}

unint64_t sub_1D7A415A8()
{
  unint64_t result = qword_1EA847420;
  if (!qword_1EA847420)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847420);
  }
  return result;
}

uint64_t sub_1D7A415FC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (sub_1D7A9D358() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x797469726F697270 && a2 == 0xE800000000000000 || (sub_1D7A9D358() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x736C616E676973 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = sub_1D7A9D358();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1D7A41760(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701869940 && a2 == 0xE400000000000000;
  if (v2 || (sub_1D7A9D358() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x74617261706D6F63 && a2 == 0xEA0000000000726FLL || (sub_1D7A9D358() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6C6F687365726874 && a2 == 0xE900000000000064)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = sub_1D7A9D358();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

unint64_t sub_1D7A418C0()
{
  unint64_t result = qword_1EA847428;
  if (!qword_1EA847428)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847428);
  }
  return result;
}

uint64_t ISO18013SessionEstablishment.readerKey.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7A41920(v1, a1);
}

uint64_t sub_1D7A41920(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847430);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t ISO18013SessionEstablishment.data.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for ISO18013SessionEstablishment() + 20);
  uint64_t v2 = *(void *)v1;
  sub_1D7860790(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t type metadata accessor for ISO18013SessionEstablishment()
{
  uint64_t result = qword_1EA847468;
  if (!qword_1EA847468) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1D7A41A18(char *a1, char *a2)
{
  return sub_1D7995524(*a1, *a2);
}

uint64_t sub_1D7A41A24()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D7A41AA4()
{
  sub_1D7A9C0B8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D7A41B10()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D7A41B8C@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_1D7A9D058();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

void sub_1D7A41BEC(uint64_t *a1@<X8>)
{
  uint64_t v2 = 1635017060;
  if (!*v1) {
    uint64_t v2 = 0x4B72656461655265;
  }
  unint64_t v3 = 0xEA00000000007965;
  if (*v1) {
    unint64_t v3 = 0xE400000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1D7A41C28()
{
  if (*v0) {
    return 1635017060;
  }
  else {
    return 0x4B72656461655265;
  }
}

uint64_t sub_1D7A41C60@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_1D7A9D058();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

uint64_t sub_1D7A41CC4(uint64_t a1)
{
  unint64_t v2 = sub_1D7A420C8();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1D7A41D00(uint64_t a1)
{
  unint64_t v2 = sub_1D7A420C8();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t ISO18013SessionEstablishment.init(readerKey:data:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_1D7A41D88(a1, a4);
  uint64_t result = type metadata accessor for ISO18013SessionEstablishment();
  uint64_t v8 = (void *)(a4 + *(int *)(result + 20));
  *uint64_t v8 = a2;
  v8[1] = a3;
  return result;
}

uint64_t sub_1D7A41D88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847430);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t ISO18013SessionEstablishment.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v39 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847430);
  MEMORY[0x1F4188790](v4 - 8, v5, v6, v7, v8, v9, v10, v11);
  uint64_t v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847438);
  uint64_t v40 = *(void *)(v14 - 8);
  uint64_t v41 = v14;
  MEMORY[0x1F4188790](v14, v15, v16, v17, v18, v19, v20, v21);
  uint64_t v23 = (char *)&v38 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for ISO18013SessionEstablishment();
  MEMORY[0x1F4188790](v24, v25, v26, v27, v28, v29, v30, v31);
  uint64_t v33 = (char *)&v38 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D7A420C8();
  sub_1D7A9D6A8();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v34 = (uint64_t)v33;
  uint64_t v35 = v40;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847448);
  LOBYTE(v42) = 0;
  sub_1D7A42398(&qword_1EA847450);
  uint64_t v36 = v41;
  sub_1D7A9D0E8();
  sub_1D7A41D88((uint64_t)v13, v34);
  char v43 = 1;
  sub_1D786073C();
  sub_1D7A9D148();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v23, v36);
  *(_OWORD *)(v34 + *(int *)(v24 + 20)) = v42;
  sub_1D7A4211C(v34, v39);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_1D7A42180(v34);
}

unint64_t sub_1D7A420C8()
{
  unint64_t result = qword_1EA847440;
  if (!qword_1EA847440)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847440);
  }
  return result;
}

uint64_t sub_1D7A4211C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ISO18013SessionEstablishment();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D7A42180(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ISO18013SessionEstablishment();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t ISO18013SessionEstablishment.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847458);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7, v8, v9, v10, v11, v12, v13);
  uint64_t v15 = &v17[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D7A420C8();
  sub_1D7A9D6E8();
  LOBYTE(v18) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847448);
  sub_1D7A42398(&qword_1EA847460);
  sub_1D7A9D1C8();
  if (!v2)
  {
    long long v18 = *(_OWORD *)(v3 + *(int *)(type metadata accessor for ISO18013SessionEstablishment() + 20));
    v17[15] = 1;
    sub_1D7871AD8();
    sub_1D7A9D228();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v15, v5);
}

uint64_t sub_1D7A42398(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA847448);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D7A423E0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ISO18013SessionEstablishment.init(from:)(a1, a2);
}

uint64_t sub_1D7A423F8(void *a1)
{
  return ISO18013SessionEstablishment.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for ISO18013SessionEstablishment(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847448);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847430);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      uint64_t v11 = a2[1];
      *a1 = *a2;
      unint64_t v12 = a2[2];
      sub_1D7860790(v11, v12);
      a1[1] = v11;
      a1[2] = v12;
      uint64_t v13 = *(int *)(v7 + 48);
      uint64_t v14 = (char *)a1 + v13;
      uint64_t v15 = (char *)a2 + v13;
      uint64_t v16 = sub_1D7A9B458();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v17 = *(int *)(a3 + 20);
    long long v18 = (uint64_t *)((char *)a1 + v17);
    uint64_t v19 = (uint64_t *)((char *)a2 + v17);
    uint64_t v20 = *v19;
    unint64_t v21 = v19[1];
    sub_1D7860790(*v19, v21);
    *long long v18 = v20;
    v18[1] = v21;
  }
  return a1;
}

uint64_t destroy for ISO18013SessionEstablishment(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847448);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, 1, v4))
  {
    sub_1D78607E8(*(void *)(a1 + 8), *(void *)(a1 + 16));
    uint64_t v5 = a1 + *(int *)(v4 + 48);
    uint64_t v6 = sub_1D7A9B458();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  uint64_t v7 = (uint64_t *)(a1 + *(int *)(a2 + 20));
  uint64_t v8 = *v7;
  unint64_t v9 = v7[1];
  return sub_1D78607E8(v8, v9);
}

void *initializeWithCopy for ISO18013SessionEstablishment(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847448);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847430);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    uint64_t v9 = a2[1];
    *a1 = *a2;
    unint64_t v10 = a2[2];
    sub_1D7860790(v9, v10);
    a1[1] = v9;
    a1[2] = v10;
    uint64_t v11 = *(int *)(v6 + 48);
    unint64_t v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = sub_1D7A9B458();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v15 = *(int *)(a3 + 20);
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  uint64_t v18 = *v17;
  unint64_t v19 = v17[1];
  sub_1D7860790(*v17, v19);
  *uint64_t v16 = v18;
  v16[1] = v19;
  return a1;
}

void *assignWithCopy for ISO18013SessionEstablishment(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847448);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      *a1 = *a2;
      uint64_t v26 = a2[1];
      unint64_t v27 = a2[2];
      sub_1D7860790(v26, v27);
      uint64_t v28 = a1[1];
      unint64_t v29 = a1[2];
      a1[1] = v26;
      a1[2] = v27;
      sub_1D78607E8(v28, v29);
      uint64_t v30 = *(int *)(v6 + 48);
      uint64_t v31 = (char *)a1 + v30;
      uint64_t v32 = (char *)a2 + v30;
      uint64_t v33 = sub_1D7A9B458();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 24))(v31, v32, v33);
      goto LABEL_7;
    }
    sub_1D7871C4C((uint64_t)a1, &qword_1EA847448);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847430);
    memcpy(a1, a2, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  *a1 = *a2;
  uint64_t v11 = a2[1];
  unint64_t v12 = a2[2];
  sub_1D7860790(v11, v12);
  a1[1] = v11;
  a1[2] = v12;
  uint64_t v13 = *(int *)(v6 + 48);
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = sub_1D7A9B458();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  uint64_t v18 = *(int *)(a3 + 20);
  unint64_t v19 = (void *)((char *)a1 + v18);
  uint64_t v20 = (void *)((char *)a2 + v18);
  uint64_t v21 = *v20;
  unint64_t v22 = v20[1];
  sub_1D7860790(*v20, v22);
  uint64_t v23 = *v19;
  unint64_t v24 = v19[1];
  uint64_t *v19 = v21;
  v19[1] = v22;
  sub_1D78607E8(v23, v24);
  return a1;
}

void *initializeWithTake for ISO18013SessionEstablishment(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847448);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847430);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
    uint64_t v9 = *(int *)(v6 + 48);
    int v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = sub_1D7A9B458();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for ISO18013SessionEstablishment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847448);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      uint64_t v20 = *(void *)(a2 + 16);
      uint64_t v21 = *(void *)(a1 + 8);
      unint64_t v22 = *(void *)(a1 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = v20;
      sub_1D78607E8(v21, v22);
      uint64_t v23 = *(int *)(v6 + 48);
      uint64_t v24 = a1 + v23;
      uint64_t v25 = a2 + v23;
      uint64_t v26 = sub_1D7A9B458();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 40))(v24, v25, v26);
      goto LABEL_7;
    }
    sub_1D7871C4C(a1, &qword_1EA847448);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847430);
    memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v11 = *(int *)(v6 + 48);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = sub_1D7A9B458();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  uint64_t v16 = *(int *)(a3 + 20);
  uint64_t v17 = *(void *)(a1 + v16);
  unint64_t v18 = *(void *)(a1 + v16 + 8);
  *(_OWORD *)(a1 + v16) = *(_OWORD *)(a2 + v16);
  sub_1D78607E8(v17, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for ISO18013SessionEstablishment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1D7A42E18);
}

uint64_t sub_1D7A42E18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847430);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
    if (((4 * v10) & 0xC) != 0) {
      return 16 - ((4 * v10) & 0xC | (v10 >> 2));
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for ISO18013SessionEstablishment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1D7A42F04);
}

uint64_t sub_1D7A42F04(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847430);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    uint64_t v11 = (void *)(a1 + *(int *)(a4 + 20));
    *uint64_t v11 = 0;
    v11[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  return result;
}

void sub_1D7A42FD4()
{
  sub_1D7A43068();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_1D7A43068()
{
  if (!qword_1EA847478)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA847448);
    unint64_t v0 = sub_1D7A9C9A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EA847478);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for ISO18013SessionEstablishment.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D7A43190);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ISO18013SessionEstablishment.CodingKeys()
{
  return &type metadata for ISO18013SessionEstablishment.CodingKeys;
}

unint64_t sub_1D7A431CC()
{
  unint64_t result = qword_1EA847480;
  if (!qword_1EA847480)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847480);
  }
  return result;
}

unint64_t sub_1D7A43224()
{
  unint64_t result = qword_1EA847488;
  if (!qword_1EA847488)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847488);
  }
  return result;
}

unint64_t sub_1D7A4327C()
{
  unint64_t result = qword_1EA847490;
  if (!qword_1EA847490)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847490);
  }
  return result;
}

CoreIDVShared::JWSAlgorithm_optional __swiftcall JWSAlgorithm.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v2 = v1;
  unint64_t v3 = sub_1D7A9D058();
  result.SecCertificateRef value = swift_bridgeObjectRelease();
  char v5 = 3;
  if (v3 < 3) {
    char v5 = v3;
  }
  *uint64_t v2 = v5;
  return result;
}

uint64_t JWSAlgorithm.rawValue.getter()
{
  uint64_t v1 = 0x7469573635325345;
  if (*v0 != 1) {
    uint64_t v1 = 0x453635325345;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x3635325345;
  }
}

uint64_t sub_1D7A43388(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1D7998710(*a1, *a2);
}

uint64_t sub_1D7A43394()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D7A43438()
{
  sub_1D7A9C0B8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D7A434C8()
{
  return sub_1D7A9D628();
}

CoreIDVShared::JWSAlgorithm_optional sub_1D7A43568(Swift::String *a1)
{
  return JWSAlgorithm.init(rawValue:)(*a1);
}

void sub_1D7A43574(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE500000000000000;
  unint64_t v4 = 0xEC0000004D415568;
  uint64_t v5 = 0x7469573635325345;
  if (v2 != 1)
  {
    uint64_t v5 = 0x453635325345;
    unint64_t v4 = 0xE600000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x3635325345;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1D7A435D4()
{
  return sub_1D7A9C2B8();
}

uint64_t sub_1D7A43634()
{
  return sub_1D7A9C258();
}

void *static HardwareAttestationType.allCases.getter()
{
  return &unk_1F2F19758;
}

CoreIDVShared::HardwareAttestationType_optional __swiftcall HardwareAttestationType.init(rawValue:)(Swift::String rawValue)
{
  int v2 = v1;
  unint64_t v3 = sub_1D7A9D058();
  result.SecCertificateRef value = swift_bridgeObjectRelease();
  char v5 = 4;
  if (v3 < 4) {
    char v5 = v3;
  }
  *int v2 = v5;
  return result;
}

uint64_t HardwareAttestationType.rawValue.getter()
{
  uint64_t result = 5260627;
  switch(*v0)
  {
    case 1:
      uint64_t result = 17747;
      break;
    case 2:
      uint64_t result = 5653577;
      break;
    case 3:
      uint64_t result = 20559;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1D7A43750(unsigned __int8 *a1, char *a2)
{
  return sub_1D79961D4(*a1, *a2);
}

uint64_t sub_1D7A4375C()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D7A4380C()
{
  sub_1D7A9C0B8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D7A438A4()
{
  return sub_1D7A9D628();
}

CoreIDVShared::HardwareAttestationType_optional sub_1D7A43950(Swift::String *a1)
{
  return HardwareAttestationType.init(rawValue:)(*a1);
}

void sub_1D7A4395C(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE300000000000000;
  uint64_t v3 = 5260627;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE200000000000000;
      uint64_t v3 = 17747;
      goto LABEL_3;
    case 2:
      *a1 = 5653577;
      a1[1] = 0xE300000000000000;
      break;
    case 3:
      *a1 = 20559;
      a1[1] = 0xE200000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t sub_1D7A439CC()
{
  return sub_1D7A9C2B8();
}

uint64_t sub_1D7A43A2C()
{
  return sub_1D7A9C258();
}

void sub_1D7A43A7C(void *a1@<X8>)
{
  *a1 = &unk_1F2F19800;
}

BOOL static DIPKeyAlgorithm.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t DIPKeyAlgorithm.hash(into:)()
{
  return sub_1D7A9D5E8();
}

uint64_t DIPKeyAlgorithm.hashValue.getter()
{
  return sub_1D7A9D628();
}

unint64_t sub_1D7A43B18()
{
  unint64_t result = qword_1EA847498;
  if (!qword_1EA847498)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847498);
  }
  return result;
}

unint64_t sub_1D7A43B70()
{
  unint64_t result = qword_1EA8474A0;
  if (!qword_1EA8474A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8474A0);
  }
  return result;
}

unint64_t sub_1D7A43BC8()
{
  unint64_t result = qword_1EA8474A8;
  if (!qword_1EA8474A8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA8474B0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8474A8);
  }
  return result;
}

unint64_t sub_1D7A43C28()
{
  unint64_t result = qword_1EA8474B8;
  if (!qword_1EA8474B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8474B8);
  }
  return result;
}

ValueMetadata *type metadata accessor for JWSAlgorithm()
{
  return &type metadata for JWSAlgorithm;
}

unsigned char *storeEnumTagSinglePayload for HardwareAttestationType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D7A43D5CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HardwareAttestationType()
{
  return &type metadata for HardwareAttestationType;
}

unsigned char *_s13CoreIDVShared12JWSAlgorithmOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D7A43E60);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DIPKeyAlgorithm()
{
  return &type metadata for DIPKeyAlgorithm;
}

unint64_t sub_1D7A43E98()
{
  unint64_t result = qword_1EBDF8A98;
  if (!qword_1EBDF8A98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBDF8A98);
  }
  return result;
}

unint64_t sub_1D7A43EEC()
{
  unint64_t result = qword_1EBDF7A68;
  if (!qword_1EBDF7A68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBDF7A68);
  }
  return result;
}

Swift::Bool __swiftcall NSUserDefaults.internalBool(forKey:)(Swift::String forKey)
{
  if (qword_1EBDF9690 != -1) {
    swift_once();
  }
  if (byte_1EBDFBE68 != 1) {
    return 0;
  }
  unint64_t v2 = (void *)sub_1D7A9BF98();
  unsigned __int8 v3 = objc_msgSend(v1, sel_BOOLForKey_, v2);

  return v3;
}

uint64_t sub_1D7A43FE4(uint64_t result, unint64_t a2)
{
  uint64_t v3 = HIBYTE(a2) & 0xF;
  uint64_t v4 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = result & 0xFFFFFFFFFFFFLL;
  }
  if (!v5)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0)
    {
      if ((result & 0x1000000000000000) != 0) {
        unsigned int v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        unsigned int v6 = (unsigned __int8 *)sub_1D7A9CD78();
      }
      uint64_t v7 = (uint64_t)sub_1D7A45548(v6, v4, 10);
      char v9 = v8 & 1;
      goto LABEL_37;
    }
    v23[0] = result;
    v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (result == 43)
    {
      if (!v3) {
        goto LABEL_50;
      }
      if (v3 == 1 || (BYTE1(result) - 48) > 9u) {
        goto LABEL_34;
      }
      uint64_t v7 = (BYTE1(result) - 48);
      uint64_t v14 = v3 - 2;
      if (v14)
      {
        uint64_t v15 = (unsigned __int8 *)v23 + 2;
        while (1)
        {
          unsigned int v16 = *v15 - 48;
          if (v16 > 9) {
            goto LABEL_34;
          }
          uint64_t v17 = 10 * v7;
          if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63) {
            goto LABEL_34;
          }
          uint64_t v7 = v17 + v16;
          if (__OFADD__(v17, v16)) {
            goto LABEL_34;
          }
          char v9 = 0;
          ++v15;
          if (!--v14) {
            goto LABEL_37;
          }
        }
      }
    }
    else
    {
      if (result == 45)
      {
        if (v3)
        {
          if (v3 != 1 && (BYTE1(result) - 48) <= 9u)
          {
            uint64_t v7 = -(uint64_t)(BYTE1(result) - 48);
            uint64_t v10 = v3 - 2;
            if (v10)
            {
              uint64_t v11 = (unsigned __int8 *)v23 + 2;
              while (1)
              {
                unsigned int v12 = *v11 - 48;
                if (v12 > 9) {
                  goto LABEL_34;
                }
                uint64_t v13 = 10 * v7;
                if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63) {
                  goto LABEL_34;
                }
                uint64_t v7 = v13 - v12;
                if (__OFSUB__(v13, v12)) {
                  goto LABEL_34;
                }
                char v9 = 0;
                ++v11;
                if (!--v10) {
                  goto LABEL_37;
                }
              }
            }
            goto LABEL_36;
          }
LABEL_34:
          uint64_t v7 = 0;
          char v9 = 1;
          goto LABEL_37;
        }
        __break(1u);
LABEL_50:
        __break(1u);
        return result;
      }
      if (!v3 || (result - 48) > 9u) {
        goto LABEL_34;
      }
      uint64_t v7 = (result - 48);
      uint64_t v18 = v3 - 1;
      if (v18)
      {
        unint64_t v19 = (unsigned __int8 *)v23 + 1;
        while (1)
        {
          unsigned int v20 = *v19 - 48;
          if (v20 > 9) {
            goto LABEL_34;
          }
          uint64_t v21 = 10 * v7;
          if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63) {
            goto LABEL_34;
          }
          uint64_t v7 = v21 + v20;
          if (__OFADD__(v21, v20)) {
            goto LABEL_34;
          }
          char v9 = 0;
          ++v19;
          if (!--v18) {
            goto LABEL_37;
          }
        }
      }
    }
LABEL_36:
    char v9 = 0;
    goto LABEL_37;
  }
  uint64_t v7 = (uint64_t)sub_1D7A45460(result, a2, 10);
  char v9 = v22;
LABEL_37:
  swift_bridgeObjectRelease();
  if (v9) {
    return 0;
  }
  else {
    return v7;
  }
}

Swift::Bool __swiftcall isInternalBuild()()
{
  uint64_t v0 = sub_1D7A9B5F8();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0, v2, v3, v4, v5, v6, v7, v8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v11 = os_variant_allows_internal_security_policies();
  if (v11)
  {
    if (qword_1EBDF9DC8 != -1) {
      swift_once();
    }
    uint64_t v12 = __swift_project_value_buffer(v0, (uint64_t)qword_1EBDFBE70);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v10, v12, v0);
    uint64_t v13 = sub_1D7A9B5D8();
    os_log_type_t v14 = sub_1D7A9C748();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl(&dword_1D7853000, v13, v14, "Internal build detected", v15, 2u);
      MEMORY[0x1D947D740](v15, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v1 + 8))(v10, v0);
  }
  return v11;
}

uint64_t sub_1D7A443FC()
{
  uint64_t v0 = sub_1D7A9B5F8();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0, v2, v3, v4, v5, v6, v7, v8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = os_variant_allows_internal_security_policies();
  char v12 = result;
  if (result)
  {
    if (qword_1EBDF9DC8 != -1) {
      swift_once();
    }
    uint64_t v13 = __swift_project_value_buffer(v0, (uint64_t)qword_1EBDFBE70);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v10, v13, v0);
    os_log_type_t v14 = sub_1D7A9B5D8();
    os_log_type_t v15 = sub_1D7A9C748();
    if (os_log_type_enabled(v14, v15))
    {
      unsigned int v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unsigned int v16 = 0;
      _os_log_impl(&dword_1D7853000, v14, v15, "Internal build detected", v16, 2u);
      MEMORY[0x1D947D740](v16, -1, -1);
    }

    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v10, v0);
  }
  byte_1EBDFBE68 = v12;
  return result;
}

Swift::String_optional __swiftcall experimentalGroup()()
{
  uint64_t v0 = sub_1D7A9B5F8();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0, v2, v3, v4, v5, v6, v7, v8);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = 0;
  char v12 = 0;
  if (os_variant_allows_internal_security_policies())
  {
    if (qword_1EBDF9DC8 != -1) {
      swift_once();
    }
    uint64_t v13 = __swift_project_value_buffer(v0, (uint64_t)qword_1EBDFBE70);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v10, v13, v0);
    os_log_type_t v14 = sub_1D7A9B5D8();
    os_log_type_t v15 = sub_1D7A9C748();
    if (os_log_type_enabled(v14, v15))
    {
      unsigned int v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unsigned int v16 = 0;
      _os_log_impl(&dword_1D7853000, v14, v15, "Internal build detected", v16, 2u);
      MEMORY[0x1D947D740](v16, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v1 + 8))(v10, v0);
    id v17 = objc_allocWithZone(MEMORY[0x1E4F1CB18]);
    uint64_t v18 = (void *)sub_1D7A9BF98();
    id v19 = objc_msgSend(v17, sel_initWithSuiteName_, v18);

    if (v19)
    {
      id v20 = v19;
      uint64_t v21 = (void *)sub_1D7A9BF98();
      id v22 = objc_msgSend(v20, sel_stringForKey_, v21);

      if (v22)
      {
        uint64_t v11 = sub_1D7A9BFC8();
        char v12 = v23;

        goto LABEL_11;
      }
    }
    uint64_t v11 = 0;
    char v12 = 0;
  }
LABEL_11:
  uint64_t v24 = v11;
  uint64_t v25 = v12;
  result.value._object = v25;
  result.value._countAndFlagsBits = v24;
  return result;
}

Swift::String_optional __swiftcall NSUserDefaults.internalString(forKey:)(Swift::String forKey)
{
  if (qword_1EBDF9690 != -1) {
    swift_once();
  }
  if (byte_1EBDFBE68 == 1
    && (uint64_t v2 = (void *)sub_1D7A9BF98(),
        id v3 = objc_msgSend(v1, sel_stringForKey_, v2),
        v2,
        v3))
  {
    uint64_t v4 = sub_1D7A9BFC8();
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v6 = 0;
  }
  uint64_t v7 = v4;
  uint64_t v8 = v6;
  result.value._object = v8;
  result.value._countAndFlagsBits = v7;
  return result;
}

Swift::Int_optional __swiftcall NSUserDefaults.internalInt(forKey:)(Swift::String forKey)
{
  if (qword_1EBDF9690 != -1) {
    swift_once();
  }
  if (byte_1EBDFBE68 == 1)
  {
    uint64_t v2 = (void *)sub_1D7A9BF98();
    id v3 = objc_msgSend(v1, sel_stringForKey_, v2);

    if (v3)
    {
      uint64_t v4 = sub_1D7A9BFC8();
      unint64_t v6 = v5;

      uint64_t v8 = HIBYTE(v6) & 0xF;
      uint64_t v9 = v4 & 0xFFFFFFFFFFFFLL;
      if ((v6 & 0x2000000000000000) != 0) {
        uint64_t v10 = HIBYTE(v6) & 0xF;
      }
      else {
        uint64_t v10 = v4 & 0xFFFFFFFFFFFFLL;
      }
      if (v10)
      {
        if ((v6 & 0x1000000000000000) != 0)
        {
          uint64_t v12 = (uint64_t)sub_1D7A45460(v4, v6, 10);
          LOBYTE(v4) = v27;
LABEL_48:
          swift_bridgeObjectRelease();
          char v23 = v4 & 1;
          if (v4) {
            Swift::Int v7 = 0;
          }
          else {
            Swift::Int v7 = v12;
          }
          goto LABEL_59;
        }
        if ((v6 & 0x2000000000000000) == 0)
        {
          if ((v4 & 0x1000000000000000) != 0) {
            uint64_t v11 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
          }
          else {
            uint64_t v11 = (unsigned __int8 *)sub_1D7A9CD78();
          }
          uint64_t v12 = (uint64_t)sub_1D7A45548(v11, v9, 10);
          LOBYTE(v4) = v13 & 1;
          goto LABEL_48;
        }
        v28[0] = v4;
        v28[1] = v6 & 0xFFFFFFFFFFFFFFLL;
        if (v4 == 43)
        {
          if (!v8) {
            goto LABEL_63;
          }
          if (v8 == 1 || (BYTE1(v4) - 48) > 9u) {
            goto LABEL_35;
          }
          uint64_t v12 = (BYTE1(v4) - 48);
          if (v8 != 2)
          {
            if ((BYTE2(v4) - 48) > 9u) {
              goto LABEL_35;
            }
            uint64_t v12 = 10 * (BYTE1(v4) - 48) + (BYTE2(v4) - 48);
            uint64_t v14 = v8 - 3;
            if (v14)
            {
              os_log_type_t v15 = (unsigned __int8 *)v28 + 3;
              while (1)
              {
                unsigned int v16 = *v15 - 48;
                if (v16 > 9) {
                  goto LABEL_35;
                }
                uint64_t v17 = 10 * v12;
                if ((unsigned __int128)(v12 * (__int128)10) >> 64 != (10 * v12) >> 63) {
                  goto LABEL_35;
                }
                uint64_t v12 = v17 + v16;
                if (__OFADD__(v17, v16)) {
                  goto LABEL_35;
                }
                LOBYTE(v4) = 0;
                ++v15;
                if (!--v14) {
                  goto LABEL_48;
                }
              }
            }
          }
        }
        else
        {
          if (v4 == 45)
          {
            if (v8)
            {
              if (v8 != 1 && (BYTE1(v4) - 48) <= 9u)
              {
                if (v8 == 2)
                {
                  LOBYTE(v4) = 0;
                  uint64_t v12 = -(uint64_t)(BYTE1(v4) - 48);
                  goto LABEL_48;
                }
                if ((BYTE2(v4) - 48) <= 9u)
                {
                  uint64_t v12 = -10 * (BYTE1(v4) - 48) - (BYTE2(v4) - 48);
                  uint64_t v22 = v8 - 3;
                  if (!v22) {
                    goto LABEL_47;
                  }
                  uint64_t v24 = (unsigned __int8 *)v28 + 3;
                  while (1)
                  {
                    unsigned int v25 = *v24 - 48;
                    if (v25 > 9) {
                      break;
                    }
                    uint64_t v26 = 10 * v12;
                    if ((unsigned __int128)(v12 * (__int128)10) >> 64 != (10 * v12) >> 63) {
                      break;
                    }
                    uint64_t v12 = v26 - v25;
                    if (__OFSUB__(v26, v25)) {
                      break;
                    }
                    LOBYTE(v4) = 0;
                    ++v24;
                    if (!--v22) {
                      goto LABEL_48;
                    }
                  }
                }
              }
LABEL_35:
              uint64_t v12 = 0;
              LOBYTE(v4) = 1;
              goto LABEL_48;
            }
            __break(1u);
LABEL_63:
            __break(1u);
            goto LABEL_64;
          }
          if (!v8 || (v4 - 48) > 9u) {
            goto LABEL_35;
          }
          uint64_t v12 = (v4 - 48);
          if (v8 != 1)
          {
            if ((BYTE1(v4) - 48) > 9u) {
              goto LABEL_35;
            }
            uint64_t v12 = 10 * (v4 - 48) + (BYTE1(v4) - 48);
            uint64_t v18 = v8 - 2;
            if (v18)
            {
              id v19 = (unsigned __int8 *)v28 + 2;
              while (1)
              {
                unsigned int v20 = *v19 - 48;
                if (v20 > 9) {
                  goto LABEL_35;
                }
                uint64_t v21 = 10 * v12;
                if ((unsigned __int128)(v12 * (__int128)10) >> 64 != (10 * v12) >> 63) {
                  goto LABEL_35;
                }
                uint64_t v12 = v21 + v20;
                if (__OFADD__(v21, v20)) {
                  goto LABEL_35;
                }
                LOBYTE(v4) = 0;
                ++v19;
                if (!--v18) {
                  goto LABEL_48;
                }
              }
            }
          }
        }
LABEL_47:
        LOBYTE(v4) = 0;
        goto LABEL_48;
      }
      swift_bridgeObjectRelease();
    }
  }
  Swift::Int v7 = 0;
  char v23 = 1;
LABEL_59:
  LOBYTE(v9) = v23;
LABEL_64:
  result.is_nil = v9;
  result.SecCertificateRef value = v7;
  return result;
}

void __swiftcall NSUserDefaults.internalFloat(forKey:)(Swift::Float_optional *__return_ptr retstr, Swift::String forKey)
{
  if (qword_1EBDF9690 != -1) {
    swift_once();
  }
  if (byte_1EBDFBE68 == 1)
  {
    id v3 = (void *)sub_1D7A9BF98();
    id v4 = objc_msgSend(v2, sel_stringForKey_, v3);

    if (v4)
    {
      uint64_t v5 = sub_1D7A9BFC8();
      uint64_t v7 = v6;

      int v32 = 0;
      uint64_t v16 = MEMORY[0x1F4188790](v8, v9, v10, v11, v12, v13, v14, v15);
      v28[2] = &v32;
      if ((v7 & 0x1000000000000000) != 0 || !(v7 & 0x2000000000000000 | v5 & 0x1000000000000000))
      {
        sub_1D7A9CC38();
      }
      else
      {
        MEMORY[0x1F4188790](v16, v28, v17, v18, v19, v20, v21, v22);
        if ((v7 & 0x2000000000000000) != 0)
        {
          uint64_t v29 = v5;
          uint64_t v30 = v7 & 0xFFFFFFFFFFFFFFLL;
          BOOL v27 = (v5 > 0x20u || ((0x100003E01uLL >> v5) & 1) == 0)
             && (uint64_t v26 = (unsigned char *)_swift_stdlib_strtof_clocale()) != 0
             && *v26 == 0;
          char v31 = v27;
          swift_bridgeObjectRelease();
          goto LABEL_19;
        }
        if ((v5 & 0x1000000000000000) != 0)
        {
          uint64_t v23 = (v7 & 0xFFFFFFFFFFFFFFFLL) + 32;
          uint64_t v24 = v5 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          uint64_t v23 = sub_1D7A9CD78();
        }
        char v31 = sub_1D7A45CB0(v23, v24, (void (*)(uint64_t *__return_ptr))sub_1D7A45EE8) & 1;
      }
      swift_bridgeObjectRelease();
LABEL_19:
      char v25 = v31 ^ 1;
      goto LABEL_20;
    }
  }
  char v25 = 1;
LABEL_20:
  LOBYTE(v29) = v25;
}

Swift::OpaquePointer_optional __swiftcall NSUserDefaults.internalStringArray(forKey:)(Swift::String forKey)
{
  if (qword_1EBDF9690 != -1) {
    swift_once();
  }
  if (byte_1EBDFBE68 == 1
    && (uint64_t v2 = (void *)sub_1D7A9BF98(),
        id v3 = objc_msgSend(v1, sel_stringArrayForKey_, v2),
        v2,
        v3))
  {
    uint64_t v4 = sub_1D7A9C318();
  }
  else
  {
    uint64_t v4 = 0;
  }
  forKey._countAndFlagsBits = v4;
  return *(Swift::OpaquePointer_optional *)&forKey._countAndFlagsBits;
}

Swift::Double_optional __swiftcall NSUserDefaults.internalDouble(forKey:)(Swift::String forKey)
{
  if (qword_1EBDF9690 != -1) {
    swift_once();
  }
  if (byte_1EBDFBE68 != 1
    || (uint64_t v2 = (void *)sub_1D7A9BF98(),
        id v3 = objc_msgSend(v1, sel_stringForKey_, v2),
        v2,
        !v3))
  {
    Swift::Bool v24 = 0;
    goto LABEL_24;
  }
  uint64_t v4 = sub_1D7A9BFC8();
  uint64_t v6 = v5;

  BOOL v30 = 0;
  uint64_t v15 = MEMORY[0x1F4188790](v7, v8, v9, v10, v11, v12, v13, v14);
  v28[2] = &v30;
  if ((v6 & 0x1000000000000000) != 0 || !(v6 & 0x2000000000000000 | v4 & 0x1000000000000000))
  {
    sub_1D7A9CC38();
  }
  else
  {
    MEMORY[0x1F4188790](v15, v28, v16, v17, v18, v19, v20, v21);
    if ((v6 & 0x2000000000000000) != 0)
    {
      v28[5] = v4;
      v28[6] = v6 & 0xFFFFFFFFFFFFFFLL;
      BOOL v26 = (v4 > 0x20u || ((0x100003E01uLL >> v4) & 1) == 0)
         && (char v25 = (unsigned char *)_swift_stdlib_strtod_clocale()) != 0
         && *v25 == 0;
      char v29 = v26;
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
    if ((v4 & 0x1000000000000000) != 0)
    {
      uint64_t v22 = (v6 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v23 = v4 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t v22 = sub_1D7A9CD78();
    }
    char v29 = sub_1D7A45CB0(v22, v23, (void (*)(uint64_t *__return_ptr))sub_1D7A45EE8) & 1;
  }
  swift_bridgeObjectRelease();
LABEL_19:
  if (v29) {
    Swift::Bool v24 = v30;
  }
  else {
    Swift::Bool v24 = 0;
  }
LABEL_24:
  result.SecCertificateRef value = v27;
  result.is_nil = v24;
  return result;
}

uint64_t static NSUserDefaults.globalInternalInt(forKey:)(uint64_t a1, uint64_t a2)
{
  if (qword_1EBDF9690 != -1) {
    swift_once();
  }
  if (byte_1EBDFBE68 != 1) {
    return 0;
  }
  id v4 = objc_msgSend(self, sel_standardUserDefaults);
  id v5 = objc_msgSend(v4, sel_persistentDomainForName_, *MEMORY[0x1E4F283E0]);

  if (!v5 || (uint64_t v6 = sub_1D7A9BEB8(), v5, !v6))
  {
    long long v11 = 0u;
    long long v12 = 0u;
    goto LABEL_16;
  }
  if (!*(void *)(v6 + 16))
  {
    long long v11 = 0u;
    long long v12 = 0u;
LABEL_15:
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_1D7A18684(a1, a2);
  if ((v8 & 1) == 0)
  {
    long long v11 = 0u;
    long long v12 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  sub_1D78907D8(*(void *)(v6 + 56) + 32 * v7, (uint64_t)&v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((void *)&v12 + 1))
  {
LABEL_16:
    sub_1D7867598((uint64_t)&v11);
    return 0;
  }
  if (swift_dynamicCast()) {
    return v10;
  }
  else {
    return 0;
  }
}

uint64_t sub_1D7A453CC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = sub_1D7A9C1A8();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = MEMORY[0x1D947AEE0](15, a1 >> 16);
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

unsigned __int8 *sub_1D7A45448(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return sub_1D7A45548(a1, a2, a3);
}

unsigned __int8 *sub_1D7A45460(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_1D7A9C1D8();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = sub_1D7A457C4();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    unint64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    unint64_t v7 = (unsigned __int8 *)sub_1D7A9CD78();
  }
LABEL_7:
  uint64_t v11 = sub_1D7A45548(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

unsigned __int8 *sub_1D7A45548(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            uint64_t v9 = 0;
            for (unint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8) {
                    return 0;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              uint64_t v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
                return 0;
              }
              uint64_t v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12))) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      unsigned __int8 v22 = a3 + 48;
      unsigned __int8 v23 = a3 + 55;
      unsigned __int8 v24 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v22 = 58;
      }
      else
      {
        unsigned __int8 v24 = 97;
        unsigned __int8 v23 = 65;
      }
      if (result)
      {
        uint64_t v25 = 0;
        do
        {
          unsigned int v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24) {
                return 0;
              }
              char v27 = -87;
            }
            else
            {
              char v27 = -55;
            }
          }
          else
          {
            char v27 = -48;
          }
          uint64_t v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63) {
            return 0;
          }
          uint64_t v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27))) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  uint64_t v14 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v15 = a3 + 48;
  unsigned __int8 v16 = a3 + 55;
  unsigned __int8 v17 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v15 = 58;
  }
  else
  {
    unsigned __int8 v17 = 97;
    unsigned __int8 v16 = 65;
  }
  if (!result) {
    return 0;
  }
  uint64_t v9 = 0;
  uint64_t v18 = result + 1;
  do
  {
    unsigned int v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17) {
          return 0;
        }
        char v20 = -87;
      }
      else
      {
        char v20 = -55;
      }
    }
    else
    {
      char v20 = -48;
    }
    uint64_t v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
      return 0;
    }
    uint64_t v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20))) {
      return 0;
    }
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

uint64_t sub_1D7A457C4()
{
  unint64_t v0 = sub_1D7A9C1E8();
  uint64_t v4 = sub_1D7A45844(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1D7A45844(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    unint64_t v9 = sub_1D7A4599C(a1, a2, a3, a4);
    if (v9)
    {
      uint64_t v10 = v9;
      unsigned int v11 = sub_1D7A60F18(v9, 0);
      unint64_t v12 = sub_1D7A45A9C((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
LABEL_11:
        sub_1D7A9CD78();
LABEL_4:
        JUMPOUT(0x1D947AE20);
      }
    }
    else
    {
      unsigned int v11 = (void *)MEMORY[0x1E4FBC860];
    }
    uint64_t v13 = MEMORY[0x1D947AE20](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x1D947AE20]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

unint64_t sub_1D7A4599C(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    Swift::Double_optional result = sub_1D7A453CC(result, a3, a4);
    unint64_t v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    Swift::Double_optional result = sub_1D7A453CC(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v10 < a2 >> 16)
  {
LABEL_17:
    __break(1u);
    return result;
  }
  return sub_1D7A9C178();
}

unint64_t sub_1D7A45A9C(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_33:
    *uint64_t v9 = a4;
    v9[1] = a5;
    uint64_t v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    Swift::Double_optional result = v12;
    if (v17 == v15) {
      Swift::Double_optional result = sub_1D7A453CC(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      Swift::Double_optional result = sub_1D7A9C188();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }
      else
      {
        Swift::Double_optional result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          Swift::Double_optional result = sub_1D7A9CD78();
        }
        char v19 = *(unsigned char *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }
    Swift::Double_optional result = sub_1D7A453CC(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = sub_1D7A9C158();
LABEL_29:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1D7A45CB0(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  if (a1)
  {
    a3(&var2);
    if (!v3) {
      char v4 = var2;
    }
  }
  else
  {
    ((void (*)(uint64_t *__return_ptr, void, void))a3)((uint64_t *)((char *)&var2 + 1), 0, 0);
    if (!v3) {
      char v4 = BYTE1(var2);
    }
  }
  return v4 & 1;
}

uint64_t _sSo14NSUserDefaultsC13CoreIDVSharedE18globalInternalBool6forKeySbSS_tFZ_0(uint64_t a1, uint64_t a2)
{
  if (qword_1EBDF9690 != -1) {
    swift_once();
  }
  if (byte_1EBDFBE68 != 1) {
    return 0;
  }
  id v4 = objc_msgSend(self, sel_standardUserDefaults);
  id v5 = objc_msgSend(v4, sel_persistentDomainForName_, *MEMORY[0x1E4F283E0]);

  if (!v5 || (uint64_t v6 = sub_1D7A9BEB8(), v5, !v6))
  {
    long long v11 = 0u;
    long long v12 = 0u;
    goto LABEL_15;
  }
  if (!*(void *)(v6 + 16))
  {
    long long v11 = 0u;
    long long v12 = 0u;
LABEL_14:
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_1D7A18684(a1, a2);
  if ((v8 & 1) == 0)
  {
    long long v11 = 0u;
    long long v12 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  sub_1D78907D8(*(void *)(v6 + 56) + 32 * v7, (uint64_t)&v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((void *)&v12 + 1))
  {
LABEL_15:
    sub_1D7867598((uint64_t)&v11);
    return 0;
  }
  uint64_t result = swift_dynamicCast();
  if (result) {
    return v10;
  }
  return result;
}

unsigned char *sub_1D7A45EBC@<X0>(unsigned char *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_1D7A45F2C(a1, MEMORY[0x1E4FBC880], a2);
}

void *sub_1D7A45EE8@<X0>(unsigned char *a1@<X8>)
{
  return sub_1D7A45FA4(a1);
}

unsigned char *sub_1D7A45F00@<X0>(unsigned char *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_1D7A45F2C(a1, MEMORY[0x1E4FBC878], a2);
}

unsigned char *sub_1D7A45F2C@<X0>(unsigned char *result@<X0>, uint64_t (*a2)(void)@<X1>, BOOL *a3@<X8>)
{
  unsigned int v4 = *result;
  BOOL v5 = v4 > 0x20;
  uint64_t v6 = (1 << v4) & 0x100003E01;
  BOOL v7 = v5 || v6 == 0;
  BOOL v8 = v7 && (result = (unsigned char *)a2()) != 0 && *result == 0;
  *a3 = v8;
  return result;
}

void *sub_1D7A45FA4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

const char *CoreIDVFeatureFlag.domain.getter()
{
  return "CoreIDV";
}

const char *CoreIDVFeatureFlag.feature.getter()
{
  uint64_t result = "unittesting";
  switch(*v0)
  {
    case 1:
      uint64_t result = "rac";
      break;
    case 2:
      uint64_t result = "bbkc";
      break;
    case 3:
      uint64_t result = "krl";
      break;
    case 4:
      uint64_t result = "livenessRefactor2024";
      break;
    case 5:
      uint64_t result = "digitalPresentmentRegionCheck";
      break;
    case 6:
      uint64_t result = "silenceLegacyWarmup";
      break;
    default:
      return result;
  }
  return result;
}

BOOL static CoreIDVFeatureFlag.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t CoreIDVFeatureFlag.hash(into:)()
{
  return sub_1D7A9D5E8();
}

uint64_t CoreIDVFeatureFlag.hashValue.getter()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D7A46140()
{
  return *(void *)v0;
}

uint64_t sub_1D7A4614C()
{
  return *(void *)(v0 + 24);
}

Swift::Bool __swiftcall FeatureFlagProvider.isEnabled(_:)(CoreIDVShared::CoreIDVFeatureFlag a1)
{
  uint64_t v1 = (unsigned __int8 *)a1;
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v4, v5, v6, v7, v8, v9, v10);
  long long v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *v1;
  uint64_t v14 = "unittesting";
  uint64_t v15 = 11;
  switch(v13)
  {
    case 1:
      uint64_t v14 = "rac";
      uint64_t v15 = 3;
      break;
    case 2:
      uint64_t v14 = "bbkc";
      uint64_t v15 = 4;
      break;
    case 3:
      uint64_t v14 = "krl";
      uint64_t v15 = 3;
      break;
    case 4:
      uint64_t v14 = "livenessRefactor2024";
      uint64_t v15 = 20;
      break;
    case 5:
      uint64_t v14 = "digitalPresentmentRegionCheck";
      uint64_t v15 = 29;
      break;
    case 6:
      uint64_t v14 = "silenceLegacyWarmup";
      uint64_t v15 = 19;
      break;
    default:
      break;
  }
  v33[3] = &type metadata for FeatureFlag;
  v33[4] = sub_1D7A465EC();
  uint64_t v16 = swift_allocObject();
  v33[0] = v16;
  *(void *)(v16 + 16) = "CoreIDV";
  *(void *)(v16 + 24) = 7;
  *(unsigned char *)(v16 + 32) = 2;
  *(void *)(v16 + 40) = v14;
  *(void *)(v16 + 48) = v15;
  *(unsigned char *)(v16 + 56) = 2;
  int v17 = sub_1D7A9B478();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v18 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v12, v18, v2);
  char v19 = sub_1D7A9B5D8();
  os_log_type_t v20 = sub_1D7A9C748();
  if (os_log_type_enabled(v19, v20))
  {
    int v30 = v17;
    uint64_t v21 = swift_slowAlloc();
    uint64_t v29 = swift_slowAlloc();
    uint64_t v32 = v29;
    *(_DWORD *)uint64_t v21 = 136315394;
    uint64_t v22 = sub_1D7A9CC78();
    uint64_t v31 = sub_1D7923300(v22, v23, &v32);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease();
    *(_WORD *)(v21 + 12) = 2080;
    LOBYTE(v17) = v30;
    if (v30) {
      uint64_t v24 = 0x64656C62616E65;
    }
    else {
      uint64_t v24 = 0x62616E6520746F6ELL;
    }
    if (v30) {
      unint64_t v25 = 0xE700000000000000;
    }
    else {
      unint64_t v25 = 0xEB0000000064656CLL;
    }
    uint64_t v31 = sub_1D7923300(v24, v25, &v32);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1D7853000, v19, v20, "Feature flag %s is %s", (uint8_t *)v21, 0x16u);
    uint64_t v26 = v29;
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v26, -1, -1);
    MEMORY[0x1D947D740](v21, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);
  return v17 & 1;
}

BOOL sub_1D7A465D0(CoreIDVShared::CoreIDVFeatureFlag a1)
{
  return FeatureFlagProvider.isEnabled(_:)(a1);
}

unint64_t sub_1D7A465EC()
{
  unint64_t result = qword_1EBDF8428[0];
  if (!qword_1EBDF8428[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1EBDF8428);
  }
  return result;
}

uint64_t sub_1D7A46640()
{
  return MEMORY[0x1F4186498](v0, 64, 7);
}

unint64_t sub_1D7A46654()
{
  unint64_t result = qword_1EA8474C0;
  if (!qword_1EA8474C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8474C0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CoreIDVFeatureFlag(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D7A46774);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CoreIDVFeatureFlag()
{
  return &type metadata for CoreIDVFeatureFlag;
}

uint64_t dispatch thunk of FeatureFlagProviding.isEnabled(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

ValueMetadata *type metadata accessor for FeatureFlagProvider()
{
  return &type metadata for FeatureFlagProvider;
}

uint64_t getEnumTagSinglePayload for FeatureFlag(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for FeatureFlag(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 41) = v3;
  return result;
}

ValueMetadata *type metadata accessor for FeatureFlag()
{
  return &type metadata for FeatureFlag;
}

id sub_1D7A46838()
{
  type metadata accessor for BundleToken();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id result = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  qword_1EA86F340 = (uint64_t)result;
  return result;
}

uint64_t sub_1D7A46890()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for BundleToken()
{
  return self;
}

ValueMetadata *type metadata accessor for ASN1ObjectIdentifier()
{
  return &type metadata for ASN1ObjectIdentifier;
}

uint64_t sub_1D7A468D4(unint64_t a1)
{
  if (a1)
  {
    unint64_t v3 = __clz(a1);
    unsigned int v4 = *v1;
    if (v3 - 57 >= 7)
    {
      uint64_t v5 = (((37 * (70 - v3)) >> 8)
          + (((70 - v3 - ((unsigned __int16)(37 * (70 - v3)) >> 8)) & 0xFE) >> 1)) >> 2;
      uint64_t v6 = 7 * v5 - 7;
      uint64_t v7 = v5;
      while (v7 <= v5)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unsigned int v4 = sub_1D789E0D8(0, *((void *)v4 + 2) + 1, 1, v4);
        }
        unint64_t v9 = *((void *)v4 + 2);
        unint64_t v8 = *((void *)v4 + 3);
        if (v9 >= v8 >> 1) {
          unsigned int v4 = sub_1D789E0D8((char *)(v8 > 1), v9 + 1, 1, v4);
        }
        --v7;
        *((void *)v4 + 2) = v9 + 1;
        v4[v9 + 32] = (a1 >> v6) | 0x80;
        v6 -= 7;
        if (v7 == 1) {
          goto LABEL_17;
        }
      }
      __break(1u);
LABEL_17:
      *uint64_t v1 = v4;
    }
    char v14 = a1 & 0x7F;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1D789E0D8(0, *((void *)v4 + 2) + 1, 1, v4);
      unsigned int v4 = (char *)result;
    }
    unint64_t v12 = *((void *)v4 + 2);
    unint64_t v15 = *((void *)v4 + 3);
    unint64_t v13 = v12 + 1;
    if (v12 >= v15 >> 1)
    {
      uint64_t result = (uint64_t)sub_1D789E0D8((char *)(v15 > 1), v12 + 1, 1, v4);
      unsigned int v4 = (char *)result;
    }
  }
  else
  {
    unsigned int v4 = *v1;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1D789E0D8(0, *((void *)v4 + 2) + 1, 1, v4);
      unsigned int v4 = (char *)result;
    }
    unint64_t v12 = *((void *)v4 + 2);
    unint64_t v11 = *((void *)v4 + 3);
    unint64_t v13 = v12 + 1;
    if (v12 >= v11 >> 1)
    {
      uint64_t result = (uint64_t)sub_1D789E0D8((char *)(v11 > 1), v12 + 1, 1, v4);
      unsigned int v4 = (char *)result;
    }
    char v14 = 0;
  }
  *((void *)v4 + 2) = v13;
  v4[v12 + 32] = v14;
  *uint64_t v1 = v4;
  return result;
}

void sub_1D7A46AC8()
{
  uint64_t v1 = v0[2];
  unint64_t v2 = v0[3];
  uint64_t v3 = v2 >> 1;
  if (v1 == v2 >> 1)
  {
LABEL_2:
    unint64_t v4 = 0x80000001D7ACB160;
    uint64_t v5 = 273;
LABEL_3:
    unint64_t v6 = 0xD000000000000026;
    goto LABEL_4;
  }
  if (v1 >= (uint64_t)(v2 >> 1)) {
    goto LABEL_21;
  }
  uint64_t v9 = v0[1];
  int v10 = *(char *)(v9 + v1);
  uint64_t v11 = v0[2];
  if (v10 < 0)
  {
    uint64_t v11 = v1 + 1;
    if (v1 + 1 == v3) {
      goto LABEL_2;
    }
    uint64_t v5 = 273;
    while (v11 < v3)
    {
      if ((*(char *)(v9 + v11) & 0x80000000) == 0) {
        goto LABEL_7;
      }
      uint64_t v15 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_20;
      }
      ++v11;
      if (v15 == v3)
      {
        unint64_t v4 = 0x80000001D7ACB160;
        goto LABEL_3;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
LABEL_7:
  uint64_t v12 = v11 + 1;
  if (v11 + 1 < v1)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v11 < -1)
  {
LABEL_23:
    __break(1u);
    return;
  }
  unint64_t v6 = 0xD00000000000002DLL;
  unint64_t v4 = 0x80000001D7ACB190;
  uint64_t v5 = 281;
  if (v10 == -128 || v1 == v12)
  {
LABEL_4:
    type metadata accessor for ASN1Error.Backing();
    uint64_t v7 = swift_allocObject();
    *(unsigned char *)(v7 + 16) = 1;
    *(void *)(v7 + 24) = v6;
    *(void *)(v7 + 32) = v4;
    *(void *)(v7 + 40) = 0xD000000000000024;
    *(void *)(v7 + 48) = 0x80000001D7ACB110;
    *(void *)(v7 + 56) = v5;
    sub_1D785D8F0();
    swift_allocError();
    *unint64_t v8 = v7;
    swift_willThrow();
    return;
  }
  unint64_t v13 = v0[3] & 1 | (2 * v12);
  v0[2] = v12;
  uint64_t v14 = swift_unknownObjectRetain();
  sub_1D7A47018(v14, v9, v1, v13);
}

uint64_t sub_1D7A46C68(uint64_t a1, int64_t a2, uint64_t a3)
{
  uint64_t result = sub_1D78D14E0(a1, a2, a3);
  unint64_t v4 = (void *)result;
  unint64_t v5 = *(void *)(result + 16);
  if (v5 < 2) {
    return (uint64_t)v4;
  }
  unint64_t v6 = 0;
  unint64_t v7 = v5 >> 1;
  for (unint64_t i = v5 + 3; ; --i)
  {
    if (v6 == i - 4) {
      goto LABEL_5;
    }
    unint64_t v9 = v4[2];
    if (v6 >= v9) {
      break;
    }
    if (i - 4 >= v9) {
      goto LABEL_12;
    }
    uint64_t v10 = v4[v6 + 4];
    uint64_t v11 = v4[i];
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1D7A2EFD8(v4);
      unint64_t v4 = (void *)result;
    }
    v4[v6 + 4] = v11;
    v4[i] = v10;
LABEL_5:
    if (v7 == ++v6) {
      return (uint64_t)v4;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_1D7A46D28(uint64_t a1)
{
  sub_1D7A9D5D8();
  uint64_t v2 = *(void *)(a1 + 16);
  sub_1D7A9D5E8();
  if (v2)
  {
    uint64_t v3 = a1 + 32;
    do
    {
      v3 += 8;
      sub_1D7A9D5E8();
      --v2;
    }
    while (v2);
  }
  return sub_1D7A9D628();
}

uint64_t sub_1D7A46D98()
{
  return sub_1D7A46D28(*v0);
}

uint64_t sub_1D7A46DA0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 16);
  uint64_t result = sub_1D7A9D5E8();
  if (v2)
  {
    uint64_t v4 = v1 + 32;
    do
    {
      v4 += 8;
      uint64_t result = sub_1D7A9D5E8();
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_1D7A46DF4()
{
  uint64_t v1 = *v0;
  sub_1D7A9D5D8();
  uint64_t v2 = *(void *)(v1 + 16);
  sub_1D7A9D5E8();
  if (v2)
  {
    uint64_t v3 = v1 + 32;
    do
    {
      v3 += 8;
      sub_1D7A9D5E8();
      --v2;
    }
    while (v2);
  }
  return sub_1D7A9D628();
}

BOOL sub_1D7A46E60(void **a1, void **a2)
{
  return sub_1D7932718(*a1, *a2);
}

uint64_t sub_1D7A46E6C(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v11 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    sub_1D78AB4E8(0, v1, 0);
    uint64_t v2 = 0;
    do
    {
      uint64_t v3 = sub_1D7A9D258();
      uint64_t v5 = v4;
      unint64_t v7 = *(void *)(v11 + 16);
      unint64_t v6 = *(void *)(v11 + 24);
      if (v7 >= v6 >> 1) {
        sub_1D78AB4E8(v6 > 1, v7 + 1, 1);
      }
      ++v2;
      *(void *)(v11 + 16) = v7 + 1;
      uint64_t v8 = v11 + 16 * v7;
      *(void *)(v8 + 32) = v3;
      *(void *)(v8 + 40) = v5;
    }
    while (v1 != v2);
    swift_bridgeObjectRelease();
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF7900);
  sub_1D78AC5E4();
  uint64_t v9 = sub_1D7A9BF38();
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_1D7A46FB8()
{
  return sub_1D7A46E6C(*v0);
}

unint64_t sub_1D7A46FC4()
{
  unint64_t result = qword_1EA8474C8;
  if (!qword_1EA8474C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1EA8474C8);
  }
  return result;
}

void sub_1D7A47018(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v7 = 7 * v5;
  if ((unsigned __int128)(v5 * (__int128)7) >> 64 != (7 * v5) >> 63)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (!__OFADD__(v7, 7))
  {
    if (v7 + 7 > 71)
    {
      type metadata accessor for ASN1Error.Backing();
      uint64_t v8 = swift_allocObject();
      *(unsigned char *)(v8 + 16) = 1;
      *(void *)(v8 + 24) = 0xD000000000000021;
      *(void *)(v8 + 32) = 0x80000001D7ACB1C0;
      *(void *)(v8 + 40) = 0xD000000000000024;
      *(void *)(v8 + 48) = 0x80000001D7ACB110;
      *(void *)(v8 + 56) = 296;
      sub_1D785D8F0();
      swift_allocError();
      *uint64_t v9 = v8;
      swift_willThrow();
      swift_unknownObjectRelease();
      return;
    }
    uint64_t v11 = sub_1D7A46C68(0, v7, 7);
    uint64_t v12 = *(void *)(v11 + 16);
    if (!v12)
    {
LABEL_22:
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      return;
    }
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    if (a3 <= v4) {
      uint64_t v15 = v4;
    }
    else {
      uint64_t v15 = a3;
    }
    unint64_t v16 = v15 - a3;
    while (v16 > v12 - 1)
    {
      unint64_t v18 = *(void *)(v11 + 8 * v14 + 32);
      if (v18 - 65 <= 0xFFFFFFFFFFFFFF7ELL)
      {
        unint64_t v17 = 0;
      }
      else
      {
        unint64_t v19 = *(unsigned char *)(a2 + a3 + v14) & 0x7F;
        if ((v18 & 0x8000000000000000) != 0)
        {
          unint64_t v21 = v19 >> -(char)v18;
          if (v18 <= 0xFFFFFFFFFFFFFFC0) {
            unint64_t v17 = 0;
          }
          else {
            unint64_t v17 = v21;
          }
        }
        else
        {
          uint64_t v20 = v19 << v18;
          if (v18 >= 0x40) {
            unint64_t v17 = 0;
          }
          else {
            unint64_t v17 = v20;
          }
        }
      }
      ++v14;
      v13 |= v17;
      if (v12 == v14) {
        goto LABEL_22;
      }
    }
    __break(1u);
    goto LABEL_24;
  }
LABEL_26:
  __break(1u);
}

uint64_t sub_1D7A471E8(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result = *(void *)a1;
  if (result != a2 || *(unsigned __int8 *)(a1 + 8) != a3)
  {
    uint64_t v16 = sub_1D78F7D1C();
    uint64_t v18 = v17;
    type metadata accessor for ASN1Error.Backing();
    uint64_t v19 = swift_allocObject();
    *(unsigned char *)(v19 + 16) = 0;
    *(void *)(v19 + 24) = v16;
    *(void *)(v19 + 32) = v18;
    *(void *)(v19 + 40) = 0xD000000000000024;
    *(void *)(v19 + 48) = 0x80000001D7ACB110;
    *(void *)(v19 + 56) = 38;
    sub_1D785D8F0();
    swift_allocError();
    *uint64_t v20 = v19;
    swift_willThrow();
    return sub_1D785D944(a1);
  }
  if (*(unsigned char *)(a1 + 56) != 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v10 = v4;
  uint64_t v33 = *(void *)(a1 + 32);
  unint64_t v34 = *(void *)(a1 + 40);
  uint64_t v11 = (v34 >> 1) - v33;
  if (__OFSUB__(v34 >> 1, v33)) {
    goto LABEL_25;
  }
  swift_unknownObjectRetain();
  uint64_t v12 = (void *)MEMORY[0x1E4FBC860];
  if (v11 >= 1)
  {
    while (1)
    {
      uint64_t v11 = v10;
      sub_1D7A46AC8();
      if (v10)
      {
        sub_1D785D944(a1);
        goto LABEL_23;
      }
      uint64_t v14 = v13;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v12 = sub_1D789E41C(0, v12[2] + 1, 1, v12);
      }
      unint64_t v5 = v12[2];
      unint64_t v15 = v12[3];
      int64_t v3 = v5 + 1;
      if (v5 >= v15 >> 1) {
        uint64_t v12 = sub_1D789E41C((void *)(v15 > 1), v5 + 1, 1, v12);
      }
      v12[2] = v3;
      v12[v5 + 4] = v14;
      if (__OFSUB__(v34 >> 1, v33)) {
        break;
      }
      if ((uint64_t)((v34 >> 1) - v33) <= 0) {
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  int64_t v3 = *(void *)(MEMORY[0x1E4FBC860] + 16);
LABEL_17:
  unint64_t v21 = sub_1D789E41C(0, v3 + 1, 0, MEMORY[0x1E4FBC860]);
  uint64_t v11 = (uint64_t)v21;
  uint64_t v22 = v12[2];
  if (v22)
  {
    unint64_t v6 = v12[4];
    unint64_t v31 = (2 * v22) | 1;
    uint64_t v32 = (uint64_t)(v12 + 4);
    unint64_t v7 = v6 / 0x28;
    unint64_t v5 = v21[2];
    unint64_t v30 = v21[3];
    int64_t v23 = v30 >> 1;
    int64_t v3 = v5 + 1;
    swift_bridgeObjectRetain();
    if (v30 >> 1 > v5)
    {
LABEL_19:
      uint64_t v24 = v6 - 40 * v7;
      *(void *)(v11 + 16) = v3;
      *(void *)(v11 + 8 * v5 + 32) = v7;
      unint64_t v25 = v5 + 2;
      if (v23 < (uint64_t)(v5 + 2))
      {
        uint64_t v29 = sub_1D789E41C((void *)(v30 > 1), v5 + 2, 1, (void *)v11);
        unint64_t v25 = v5 + 2;
        uint64_t v11 = (uint64_t)v29;
      }
      *(void *)(v11 + 16) = v25;
      *(void *)(v11 + 8 * v3 + 32) = v24;
      uint64_t v26 = swift_bridgeObjectRetain();
      sub_1D78CCCF8(v26, v32, 1, v31);
      swift_bridgeObjectRelease();
      sub_1D785D944(a1);
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease_n();
      return v11;
    }
LABEL_26:
    uint64_t v11 = (uint64_t)sub_1D789E41C((void *)(v30 > 1), v3, 1, (void *)v11);
    unint64_t v30 = *(void *)(v11 + 24);
    int64_t v23 = v30 >> 1;
    goto LABEL_19;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  type metadata accessor for ASN1Error.Backing();
  uint64_t v27 = swift_allocObject();
  *(unsigned char *)(v27 + 16) = 1;
  *(void *)(v27 + 24) = 0xD000000000000016;
  *(void *)(v27 + 32) = 0x80000001D7ACB140;
  *(void *)(v27 + 40) = 0xD000000000000024;
  *(void *)(v27 + 48) = 0x80000001D7ACB110;
  *(void *)(v27 + 56) = 79;
  sub_1D785D8F0();
  swift_allocError();
  *uint64_t v28 = v27;
  swift_willThrow();
  sub_1D785D944(a1);
  swift_bridgeObjectRelease();
LABEL_23:
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t AsyncQueue.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  AsyncQueue.init()();
  return v0;
}

uint64_t AsyncQueue.init()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9978);
  MEMORY[0x1F4188790](v1 - 8, v2, v3, v4, v5, v6, v7, v8);
  unint64_t v73 = (char *)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9B90);
  uint64_t v10 = *(void *)(v75 - 8);
  MEMORY[0x1F4188790](v75, v11, v12, v13, v14, v15, v16, v17);
  uint64_t v19 = (char *)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF9BA8);
  uint64_t v20 = *(void *)(v72 - 8);
  uint64_t v21 = *(void *)(v20 + 64);
  uint64_t v29 = MEMORY[0x1F4188790](v72, v22, v23, v24, v25, v26, v27, v28);
  unint64_t v71 = (char *)&v70 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v29, v30, v31, v32, v33, v34, v35, v36);
  uint64_t v38 = (char *)&v70 - v37;
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9BA0);
  uint64_t v47 = MEMORY[0x1F4188790](v39 - 8, v40, v41, v42, v43, v44, v45, v46);
  uint64_t v49 = (char *)&v70 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v47, v50, v51, v52, v53, v54, v55, v56);
  unint64_t v58 = (char *)&v70 - v57;
  uint64_t v74 = v0;
  swift_defaultActor_initialize();
  uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9B98);
  uint64_t v60 = *(void *)(v59 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v60 + 56))(v58, 1, 1, v59);
  uint64_t v76 = v58;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF99C8);
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v19, *MEMORY[0x1E4FBD028], v75);
  sub_1D7A9C508();
  sub_1D7A47B40((uint64_t)v58, (uint64_t)v49);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v60 + 48))(v49, 1, v59);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v62 = v74;
    (*(void (**)(uint64_t, char *, uint64_t))(v60 + 32))(v74 + OBJC_IVAR____TtC13CoreIDVShared10AsyncQueue__streamContinuation, v49, v59);
    uint64_t v63 = sub_1D7A9C4A8();
    uint64_t v64 = (uint64_t)v73;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v63 - 8) + 56))(v73, 1, 1, v63);
    char v66 = v71;
    uint64_t v65 = v72;
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v71, v38, v72);
    unint64_t v67 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
    uint64_t v68 = swift_allocObject();
    *(void *)(v68 + 16) = 0;
    *(void *)(v68 + 24) = 0;
    (*(void (**)(unint64_t, char *, uint64_t))(v20 + 32))(v68 + v67, v66, v65);
    uint64_t v69 = sub_1D78A2AF8(v64, (uint64_t)&unk_1EA8474D8, v68);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v38, v65);
    *(void *)(v62 + OBJC_IVAR____TtC13CoreIDVShared10AsyncQueue__task) = v69;
    sub_1D7A48308((uint64_t)v58);
    return v62;
  }
  return result;
}

uint64_t sub_1D7A47A5C(uint64_t a1, uint64_t a2)
{
  sub_1D7A48308(a2);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9B98);
  uint64_t v7 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a2, a1, v4);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56);
  return v5(a2, 0, 1, v4);
}

uint64_t sub_1D7A47B38(uint64_t a1)
{
  return sub_1D7A47A5C(a1, *(void *)(v1 + 16));
}

uint64_t sub_1D7A47B40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9BA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D7A47BA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF99B0);
  v4[5] = v5;
  v4[6] = *(void *)(v5 - 8);
  v4[7] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_1D7A47C6C, 0, 0);
}

uint64_t sub_1D7A47C6C()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF9BA8);
  sub_1D7A9C4E8();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1D7A47D3C;
  uint64_t v2 = *(void *)(v0 + 40);
  return MEMORY[0x1F4187D58](v0 + 16, 0, 0, v2);
}

uint64_t sub_1D7A47D3C()
{
  swift_task_dealloc();
  return MEMORY[0x1F4188298](sub_1D7A47E38, 0, 0);
}

uint64_t sub_1D7A47E38()
{
  uint64_t v1 = (int *)v0[2];
  uint64_t v2 = v0[3];
  v0[9] = v1;
  v0[10] = v2;
  if (!v1)
  {
    (*(void (**)(void, void))(v0[6] + 8))(v0[7], v0[5]);
    goto LABEL_5;
  }
  if (sub_1D7A9C528())
  {
    (*(void (**)(void, void))(v0[6] + 8))(v0[7], v0[5]);
    sub_1D78EEA8C((uint64_t)v1);
LABEL_5:
    swift_task_dealloc();
    uint64_t v3 = (uint64_t (*)(void))v0[1];
    return v3();
  }
  uint64_t v6 = (uint64_t (*)(void))((char *)v1 + *v1);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[11] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1D7A47F98;
  return v6();
}

uint64_t sub_1D7A47F98()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 72);
  uint64_t v3 = *v0;
  swift_task_dealloc();
  sub_1D78EEA8C(v2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 64) = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_1D7A47D3C;
  uint64_t v5 = *(void *)(v1 + 40);
  return MEMORY[0x1F4187D58](v1 + 16, 0, 0, v5);
}

uint64_t sub_1D7A48148()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF9BA8);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t sub_1D7A48218(uint64_t a1)
{
  uint64_t v4 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF9BA8) - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_1D7874050;
  return sub_1D7A47BA8(a1, v5, v6, v7);
}

uint64_t sub_1D7A48308(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9BA0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t AsyncQueue.deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + OBJC_IVAR____TtC13CoreIDVShared10AsyncQueue__streamContinuation;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9B98);
  sub_1D7A9C4C8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  swift_release();
  swift_defaultActor_destroy();
  return v1;
}

uint64_t AsyncQueue.__deallocating_deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + OBJC_IVAR____TtC13CoreIDVShared10AsyncQueue__streamContinuation;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9B98);
  sub_1D7A9C4C8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  swift_release();
  swift_defaultActor_destroy();
  return MEMORY[0x1F4188210](v1);
}

uint64_t sub_1D7A484A0()
{
  return MEMORY[0x1F4187D98](*(void *)(v0 + OBJC_IVAR____TtC13CoreIDVShared10AsyncQueue__task), MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC278]);
}

uint64_t sub_1D7A484CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9B88);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6, v7, v8, v9, v10, v11, v12);
  uint64_t v14 = (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a1;
  *(void *)(v15 + 24) = a2;
  v17[0] = &unk_1EA8474E8;
  v17[1] = v15;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9B98);
  sub_1D7A9C4B8();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v14, v4);
}

uint64_t sub_1D7A485F8(uint64_t a1, int *a2)
{
  uint64_t v5 = (uint64_t (*)(void))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_1D7874050;
  return v5();
}

uint64_t sub_1D7A486C4()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D7A486FC(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1D7874050;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1EA8474E0 + dword_1EA8474E0);
  return v6(a1, v4);
}

uint64_t sub_1D7A487B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return MEMORY[0x1F4188298](sub_1D7A487DC, 0, 0);
}

uint64_t sub_1D7A487DC()
{
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  long long v2 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v1 + 32) = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1D7A488CC;
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v5 = *(void *)(v0 + 16);
  return MEMORY[0x1F41880D8](v5, 0, 0, 0x3A5F28636E797361, 0xE900000000000029, sub_1D7A48C08, v1, v4);
}

uint64_t sub_1D7A488CC()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1D7A489DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v35 = a4;
  uint64_t v33 = a3;
  uint64_t v7 = sub_1D7A9C468();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7, v9, v10, v11, v12, v13, v14, v15);
  uint64_t v17 = (char *)&v32 - v16;
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9B88);
  uint64_t v18 = *(void *)(v34 - 8);
  MEMORY[0x1F4188790](v34, v19, v20, v21, v22, v23, v24, v25);
  uint64_t v27 = (char *)&v32 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v17, a1, v7);
  unint64_t v28 = (*(unsigned __int8 *)(v8 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v29 = (char *)swift_allocObject();
  uint64_t v30 = v33;
  *((void *)v29 + 2) = a5;
  *((void *)v29 + 3) = v30;
  *((void *)v29 + 4) = v35;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v29[v28], v17, v7);
  uint64_t v36 = &unk_1EA847528;
  uint64_t v37 = v29;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9B98);
  sub_1D7A9C4B8();
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v27, v34);
}

uint64_t sub_1D7A48C08(uint64_t a1)
{
  return sub_1D7A489DC(a1, v1[3], v1[4], v1[5], v1[2]);
}

uint64_t sub_1D7A48C14(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a4;
  v5[3] = a5;
  v5[4] = *(void *)(a5 - 8);
  v5[5] = swift_task_alloc();
  uint64_t v7 = swift_task_alloc();
  v5[6] = v7;
  uint64_t v10 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v8 = (void *)swift_task_alloc();
  v5[7] = v8;
  *uint64_t v8 = v5;
  v8[1] = sub_1D7A48D5C;
  return v10(v7);
}

uint64_t sub_1D7A48D5C()
{
  swift_task_dealloc();
  return MEMORY[0x1F4188298](sub_1D7A48E58, 0, 0);
}

uint64_t sub_1D7A48E58()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  (*(void (**)(void, uint64_t, uint64_t))(v3 + 16))(v0[5], v1, v2);
  sub_1D7A9C468();
  sub_1D7A9C458();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1D7A48F3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return MEMORY[0x1F4188298](sub_1D7A48F64, 0, 0);
}

uint64_t sub_1D7A48F64()
{
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  long long v2 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v1 + 32) = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1D7A49054;
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v5 = *(void *)(v0 + 16);
  return MEMORY[0x1F4188160](v5, 0, 0, 0x3A5F28636E797361, 0xE900000000000029, sub_1D7A493C8, v1, v4);
}

uint64_t sub_1D7A49054()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](sub_1D79CEC18, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_1D7A49190(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v35 = a3;
  uint64_t v36 = a4;
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1EBDF9740);
  uint64_t v8 = sub_1D7A9C468();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8, v10, v11, v12, v13, v14, v15, v16);
  uint64_t v18 = (char *)v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9B88);
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19, v21, v22, v23, v24, v25, v26, v27);
  uint64_t v29 = (char *)v34 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34[1] = a2 + OBJC_IVAR____TtC13CoreIDVShared10AsyncQueue__streamContinuation;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v18, a1, v8);
  unint64_t v30 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v31 = (char *)swift_allocObject();
  uint64_t v32 = v35;
  *((void *)v31 + 2) = a5;
  *((void *)v31 + 3) = v32;
  *((void *)v31 + 4) = v36;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v31[v30], v18, v8);
  uint64_t v37 = &unk_1EA847518;
  uint64_t v38 = v31;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9B98);
  sub_1D7A9C4B8();
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v29, v19);
}

uint64_t sub_1D7A493C8(uint64_t a1)
{
  return sub_1D7A49190(a1, v1[3], v1[4], v1[5], v1[2]);
}

uint64_t sub_1D7A493D4(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a4;
  v5[4] = a5;
  v5[5] = *(void *)(a5 - 8);
  v5[6] = swift_task_alloc();
  uint64_t v7 = swift_task_alloc();
  v5[7] = v7;
  uint64_t v10 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v8 = (void *)swift_task_alloc();
  v5[8] = v8;
  *uint64_t v8 = v5;
  v8[1] = sub_1D7A4951C;
  return v10(v7);
}

uint64_t sub_1D7A4951C()
{
  *(void *)(*(void *)v1 + 72) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1D7A4971C;
  }
  else {
    uint64_t v2 = sub_1D7A49630;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

uint64_t sub_1D7A49630()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  (*(void (**)(void, uint64_t, uint64_t))(v3 + 16))(v0[6], v1, v2);
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1EBDF9740);
  sub_1D7A9C468();
  sub_1D7A9C458();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1D7A4971C()
{
  v0[2] = v0[9];
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1EBDF9740);
  sub_1D7A9C468();
  sub_1D7A9C448();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t AsyncQueue.unownedExecutor.getter()
{
  return v0;
}

uint64_t sub_1D7A497D8()
{
  return type metadata accessor for AsyncQueue();
}

uint64_t type metadata accessor for AsyncQueue()
{
  uint64_t result = qword_1EBDF9958;
  if (!qword_1EBDF9958) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1D7A4982C()
{
  sub_1D7A49B98();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for AsyncQueue(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AsyncQueue);
}

uint64_t dispatch thunk of AsyncQueue.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of AsyncQueue.cancel()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of AsyncQueue.async(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of AsyncQueue.async<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v4 + 128)
                                                                   + **(int **)(*(void *)v4 + 128));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  void *v10 = v5;
  v10[1] = sub_1D7874050;
  return v12(a1, a2, a3, a4);
}

{
  uint64_t v4;
  uint64_t v5;
  void *v10;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;

  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v4 + 136)
                                                                   + **(int **)(*(void *)v4 + 136));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  void *v10 = v5;
  v10[1] = sub_1D786EC1C;
  return v12(a1, a2, a3, a4);
}

void sub_1D7A49B98()
{
  if (!qword_1EBDF9980)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EBDF99C8);
    unint64_t v0 = sub_1D7A9C4D8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EBDF9980);
    }
  }
}

uint64_t sub_1D7A49BF4()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1EBDF9740);
  uint64_t v1 = sub_1D7A9C468();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t sub_1D7A49CE0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1EBDF9740);
  uint64_t v5 = *(void *)(sub_1D7A9C468() - 8);
  uint64_t v6 = (int *)v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_1D786EC1C;
  return sub_1D7A493D4(a1, v6, v7, v8, v4);
}

uint64_t sub_1D7A49DF8()
{
  uint64_t v1 = sub_1D7A9C468();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t sub_1D7A49ED8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = *(void *)(sub_1D7A9C468() - 8);
  uint64_t v6 = (int *)v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_1D7874050;
  return sub_1D7A48C14(a1, v6, v7, v8, v4);
}

void sub_1D7A49FE8(long long *a1@<X0>, void *a2@<X2>, unsigned char *a3@<X8>)
{
  v303 = a2;
  v297 = a3;
  uint64_t v326 = *MEMORY[0x1E4F143B8];
  unint64_t v306 = sub_1D7A9BA18();
  uint64_t v305 = *(void *)(v306 - 8);
  MEMORY[0x1F4188790](v306, v4, v5, v6, v7, v8, v9, v10);
  uint64_t v307 = (uint64_t)&v279 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v302 = sub_1D7A9BA88();
  uint64_t v301 = *(void *)(v302 - 8);
  MEMORY[0x1F4188790](v302, v12, v13, v14, v15, v16, v17, v18);
  v309 = (char *)&v279 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_1D7A9BAF8();
  uint64_t v308 = *(void *)(v20 - 8);
  uint64_t v28 = MEMORY[0x1F4188790](v20, v21, v22, v23, v24, v25, v26, v27);
  v304 = (char *)&v279 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v28, v30, v31, v32, v33, v34, v35, v36);
  v311 = (char *)&v279 - v37;
  uint64_t v38 = sub_1D7A9B5F8();
  uint64_t v313 = *(void *)(v38 - 8);
  uint64_t v46 = MEMORY[0x1F4188790](v38, v39, v40, v41, v42, v43, v44, v45);
  v300 = (char *)&v279 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v46, v48, v49, v50, v51, v52, v53, v54);
  uint64_t v56 = (char *)&v279 - v55;
  uint64_t v317 = sub_1D7A9BD88();
  unint64_t v315 = *(void *)(v317 - 8);
  uint64_t v64 = MEMORY[0x1F4188790](v317, v57, v58, v59, v60, v61, v62, v63);
  v299 = (char *)&v279 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = MEMORY[0x1F4188790](v64, v66, v67, v68, v69, v70, v71, v72);
  uint64_t v75 = (char *)&v279 - v74;
  MEMORY[0x1F4188790](v73, v76, v77, v78, v79, v80, v81, v82);
  uint64_t v84 = (char *)&v279 - v83;
  unint64_t v310 = sub_1D7A9B838();
  unint64_t v316 = *(void *)(v310 - 8);
  uint64_t v92 = MEMORY[0x1F4188790](v310, v85, v86, v87, v88, v89, v90, v91);
  v298 = (char *)&v279 - ((v93 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v101 = MEMORY[0x1F4188790](v92, v94, v95, v96, v97, v98, v99, v100);
  unint64_t v103 = (char *)&v279 - v102;
  MEMORY[0x1F4188790](v101, v104, v105, v106, v107, v108, v109, v110);
  unint64_t v112 = (char *)&v279 - v111;
  long long v113 = a1[1];
  long long v323 = *a1;
  long long v324 = v113;
  unsigned __int8 v325 = *((unsigned char *)a1 + 32);
  v114.SecCertificateRef value = SecTrustRef.getLeafCertificate()().value;
  if (v114.value)
  {
    SecCertificateRef value = v114.value;
    uint64_t v295 = v38;
    unint64_t v116 = SecCertificateCopyKey(v114.value);
    if (v116
      && (uint64_t v117 = v116,
          uint64_t v296 = copyPublicKeyDataFromSecKeyPublic(_:)(v116),
          unint64_t v119 = v118,
          v117,
          v119 >> 60 != 15))
    {
      uint64_t v292 = sub_1D7885664(&qword_1EA8424A0, MEMORY[0x1E4F25170]);
      sub_1D7A9B828();
      unint64_t v294 = v119;
      SecCertificateRef v293 = value;
      uint64_t v289 = v20;
      v285 = v103;
      switch(v119 >> 62)
      {
        case 1uLL:
          uint64_t v130 = v296;
          if (v130 >> 32 < (int)v130)
          {
            __break(1u);
LABEL_80:
            __break(1u);
LABEL_81:
            __break(1u);
LABEL_82:
            __break(1u);
          }
          unint64_t v129 = v294;
          sub_1D7860790(v296, v294);
          uint64_t v135 = v314;
          sub_1D78D117C((int)v130, v130 >> 32, v129 & 0x3FFFFFFFFFFFFFFFLL, (uint64_t)v84);
          uint64_t v314 = v135;
          goto LABEL_14;
        case 2uLL:
          unint64_t v129 = v294;
          uint64_t v130 = v296;
          uint64_t v131 = *(void *)(v296 + 16);
          uint64_t v132 = *(void *)(v296 + 24);
          sub_1D786E9D8(v296, v294);
          swift_retain();
          swift_retain();
          uint64_t v133 = v314;
          sub_1D78D117C(v131, v132, v129 & 0x3FFFFFFFFFFFFFFFLL, (uint64_t)v84);
          if (v133) {
            goto LABEL_86;
          }
          uint64_t v314 = 0;
          swift_release();
          swift_release();
LABEL_14:
          sub_1D7871BDC(v130, v129);
          uint64_t v134 = v295;
          uint64_t v126 = v317;
          break;
        case 3uLL:
          memset(v322, 0, 14);
          uint64_t v126 = v317;
          sub_1D7A9B808();
          uint64_t v127 = v296;
          unint64_t v128 = v294;
          goto LABEL_11;
        default:
          uint64_t v124 = v296;
          v322[0] = v296;
          unint64_t v125 = v294;
          LODWORD(v322[1]) = v294;
          WORD2(v322[1]) = WORD2(v294);
          uint64_t v126 = v317;
          sub_1D7A9B808();
          uint64_t v127 = v124;
          unint64_t v128 = v125;
LABEL_11:
          sub_1D7871BDC(v127, v128);
          uint64_t v134 = v295;
          break;
      }
      v284 = v75;
      sub_1D7A9B818();
      uint64_t v136 = *(void (**)(uint64_t, uint64_t))(v315 + 8);
      v315 += 8;
      v288 = v136;
      v136((uint64_t)v84, v126);
      uint64_t v137 = sub_1D7885664(&qword_1EA8424A8, MEMORY[0x1E4F24F80]);
      unint64_t v138 = v310;
      uint64_t v286 = v137;
      uint64_t v139 = sub_1D7A9BD78();
      uint64_t v141 = sub_1D78D1370(v139, v140);
      swift_bridgeObjectRelease();
      uint64_t v291 = sub_1D78D1EB0(v141);
      unint64_t v290 = v142;
      swift_release();
      unint64_t v143 = *(void (**)(char *, unint64_t))(v316 + 8);
      v316 += 8;
      v287 = v143;
      v143(v112, v138);
      if (qword_1EBDF9DC8 != -1) {
        swift_once();
      }
      uint64_t v144 = __swift_project_value_buffer(v134, (uint64_t)qword_1EBDFBE70);
      swift_beginAccess();
      uint64_t v145 = v313;
      uint64_t v147 = v313 + 16;
      uint64_t v146 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v313 + 16);
      uint64_t v148 = v146(v56, v144, v134);
      MEMORY[0x1F4188790](v148, v149, v150, v151, v152, v153, v154, v155);
      Logger.cryptoParam(_:)((uint64_t (*)(void))sub_1D7885AD4);
      uint64_t v158 = *(void (**)(uint64_t, uint64_t))(v145 + 8);
      uint64_t v157 = v145 + 8;
      uint64_t v156 = v158;
      v158((uint64_t)v56, v134);
      uint64_t v159 = v296;
      unint64_t v160 = v294;
      *(void *)&long long v321 = v296;
      *((void *)&v321 + 1) = v294;
      sub_1D7860790(v296, v294);
      uint64_t v161 = v311;
      uint64_t v162 = (char *)v314;
      sub_1D7A9BAE8();
      uint64_t v163 = v162;
      if (v162)
      {
        unint64_t v164 = v290;
        uint64_t v165 = v291;
        SecCertificateRef v166 = v293;
LABEL_20:
        LOWORD(v321) = 274;
        long long v175 = v163;
        unint64_t v176 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
        sub_1D7860544();
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v163, 0xD000000000000028, 0x80000001D7ABEA40, (__int16 *)&v321, 0, v176, 0xD000000000000051, 0x80000001D7ABE640, v177, 0xD000000000000024, 0x80000001D7ABE9D0, 622);
        swift_willThrow();

        sub_1D78607E8(v165, v164);
        sub_1D7871BDC(v159, v160);
      }
      else
      {
        uint64_t v314 = v144;
        v282 = v156;
        uint64_t v281 = v147;
        v283 = (void (*)(char *, uint64_t, uint64_t))v146;
        uint64_t v313 = v157;
        (*(void (**)(char *, char *, uint64_t))(v308 + 16))(v304, v161, v289);
        uint64_t v167 = type metadata accessor for HPKESuiteKwV1();
        v168 = v312;
        (*(void (**)(uint64_t, uint64_t, unint64_t))(v305 + 16))(v307, (uint64_t)v312 + *(int *)(v167 + 20), v306);
        v169 = (char *)v168 + *(int *)(v167 + 24);
        sub_1D7860790(*(void *)v169, *((void *)v169 + 1));
        sub_1D7A9BA58();
        unint64_t v306 = v167;
        uint64_t v305 = (uint64_t)v169;
        uint64_t v170 = v303[3];
        uint64_t v171 = v303[4];
        __swift_project_boxed_opaque_existential_1(v303, v170);
        v172 = *(uint64_t (**)(long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v171 + 8);
        unint64_t v173 = sub_1D7A4EC98();
        uint64_t v174 = v172(&v323, &type metadata for DigitalPresentmentResponseTopics, v173, v170, v171);
        uint64_t v179 = v178;
        v304 = 0;
        uint64_t v280 = v174;
        uint64_t v180 = sub_1D7A9BA68();
        uint64_t v182 = v180;
        unint64_t v183 = v181;
        uint64_t v184 = (uint64_t)v299;
        v303 = v179;
        switch(v181 >> 62)
        {
          case 1uLL:
            uint64_t v200 = (v180 >> 32) - (int)v180;
            if (v180 >> 32 < (int)v180) {
              goto LABEL_80;
            }
            uint64_t v201 = sub_1D7A9AC98();
            if (!v201) {
              goto LABEL_41;
            }
            uint64_t v202 = sub_1D7A9ACB8();
            if (__OFSUB__((int)v182, v202)) {
              goto LABEL_84;
            }
            v201 += (int)v182 - v202;
LABEL_41:
            uint64_t v199 = (uint64_t)v284;
            uint64_t v203 = sub_1D7A9ACA8();
            if (v203 >= v200) {
              uint64_t v204 = (v182 >> 32) - (int)v182;
            }
            else {
              uint64_t v204 = v203;
            }
            uint64_t v205 = v201 + v204;
            if (v201) {
              uint64_t v206 = v205;
            }
            else {
              uint64_t v206 = 0;
            }
            uint64_t v307 = sub_1D78D0C88(v201, v206);
            unint64_t v197 = v207;
            sub_1D78607E8(v182, v183);
            goto LABEL_48;
          case 2uLL:
            uint64_t v186 = *(void *)(v180 + 16);
            uint64_t v187 = *(void *)(v180 + 24);
            swift_retain();
            swift_retain();
            uint64_t v188 = sub_1D7A9AC98();
            if (!v188) {
              goto LABEL_26;
            }
            uint64_t v189 = sub_1D7A9ACB8();
            if (__OFSUB__(v186, v189))
            {
              __break(1u);
LABEL_84:
              __break(1u);
LABEL_85:
              __break(1u);
LABEL_86:
              swift_release();
              swift_release();
              __break(1u);
LABEL_87:
              swift_release();
              swift_release();
              __break(1u);
              JUMPOUT(0x1D7A4BB30);
            }
            v188 += v186 - v189;
LABEL_26:
            BOOL v190 = __OFSUB__(v187, v186);
            uint64_t v191 = v187 - v186;
            if (v190) {
              goto LABEL_81;
            }
            uint64_t v192 = sub_1D7A9ACA8();
            if (v192 >= v191) {
              uint64_t v193 = v191;
            }
            else {
              uint64_t v193 = v192;
            }
            uint64_t v194 = v188 + v193;
            if (v188) {
              uint64_t v195 = v194;
            }
            else {
              uint64_t v195 = 0;
            }
            uint64_t v307 = sub_1D78D0C88(v188, v195);
            unint64_t v197 = v196;
            swift_release();
            swift_release();
LABEL_36:
            sub_1D78607E8(v182, v183);
            uint64_t v199 = (uint64_t)v284;
LABEL_48:
            v208 = v285;
            long long v279 = xmmword_1D7AA0AC0;
            long long v321 = xmmword_1D7AA0AC0;
            v209 = (void *)((char *)v312 + *(int *)(v306 + 28));
            unint64_t v210 = v209[1];
            unint64_t v306 = v197;
            v312 = v209;
            if (v210 >> 60 != 15)
            {
              uint64_t v211 = *v209;
              sub_1D7860790(*v209, v210);
              sub_1D7A9B828();
              switch(v210 >> 62)
              {
                case 1uLL:
                  if (v211 >> 32 < (int)v211) {
                    goto LABEL_85;
                  }
                  sub_1D7860790(v211, v210);
                  v217 = v304;
                  sub_1D78D117C((int)v211, v211 >> 32, v210 & 0x3FFFFFFFFFFFFFFFLL, v199);
                  v304 = v217;
                  sub_1D7871BDC(v211, v210);
                  uint64_t v216 = v199;
                  uint64_t v215 = v317;
                  goto LABEL_57;
                case 2uLL:
                  uint64_t v212 = *(void *)(v211 + 16);
                  uint64_t v213 = *(void *)(v211 + 24);
                  sub_1D786E9D8(v211, v210);
                  swift_retain();
                  swift_retain();
                  v214 = v304;
                  sub_1D78D117C(v212, v213, v210 & 0x3FFFFFFFFFFFFFFFLL, v199);
                  v304 = v214;
                  if (v214) {
                    goto LABEL_87;
                  }
                  swift_release();
                  swift_release();
                  sub_1D7871BDC(v211, v210);
                  uint64_t v215 = v317;
                  uint64_t v216 = (uint64_t)v284;
LABEL_57:
                  v208 = v285;
                  break;
                case 3uLL:
                  *(void *)((char *)&v320 + 6) = 0;
                  *(void *)&long long v320 = 0;
                  goto LABEL_54;
                default:
                  *(void *)&long long v320 = v211;
                  WORD4(v320) = v210;
                  BYTE10(v320) = BYTE2(v210);
                  BYTE11(v320) = BYTE3(v210);
                  BYTE12(v320) = BYTE4(v210);
                  BYTE13(v320) = BYTE5(v210);
LABEL_54:
                  uint64_t v216 = v199;
                  uint64_t v215 = v317;
                  sub_1D7A9B808();
                  sub_1D7871BDC(v211, v210);
                  break;
              }
              sub_1D7A9B818();
              v288(v216, v215);
              unint64_t v218 = v310;
              uint64_t v219 = sub_1D7A9BD78();
              uint64_t v221 = sub_1D78D1370(v219, v220);
              swift_bridgeObjectRelease();
              uint64_t v222 = sub_1D78D1EB0(v221);
              uint64_t v224 = v223;
              swift_release();
              v287(v208, v218);
              sub_1D7871BDC(v321, *((unint64_t *)&v321 + 1));
              *(void *)&long long v321 = v222;
              *((void *)&v321 + 1) = v224;
              uint64_t v225 = (uint64_t)v300;
              uint64_t v226 = v295;
              v283(v300, v314, v295);
              sub_1D791EF30(v225, (uint64_t)&v321);
              sub_1D7871BDC(v211, v210);
              v282(v225, v226);
              uint64_t v184 = (uint64_t)v299;
            }
            uint64_t v227 = v307;
            uint64_t v228 = *(void *)v305;
            unint64_t v229 = *(void *)(v305 + 8);
            sub_1D7860790(*(void *)v305, v229);
            sub_1D7A9B828();
            v230 = v283;
            uint64_t v307 = v227;
            switch(v229 >> 62)
            {
              case 1uLL:
                if (v228 >> 32 < (int)v228) {
                  goto LABEL_82;
                }
                sub_1D7860790(v228, v229);
                v235 = v304;
                sub_1D78D117C((int)v228, v228 >> 32, v229 & 0x3FFFFFFFFFFFFFFFLL, v184);
                v304 = v235;
                goto LABEL_67;
              case 2uLL:
                uint64_t v231 = *(void *)(v228 + 16);
                uint64_t v232 = *(void *)(v228 + 24);
                sub_1D7860790(v228, v229);
                swift_retain();
                swift_retain();
                v233 = v304;
                sub_1D78D117C(v231, v232, v229 & 0x3FFFFFFFFFFFFFFFLL, v184);
                v304 = v233;
                if (v233) {
                  goto LABEL_87;
                }
                swift_release();
                swift_release();
LABEL_67:
                sub_1D78607E8(v228, v229);
                uint64_t v234 = v317;
                break;
              case 3uLL:
                *(void *)((char *)&v320 + 6) = 0;
                *(void *)&long long v320 = 0;
                goto LABEL_64;
              default:
                *(void *)&long long v320 = v228;
                WORD4(v320) = v229;
                BYTE10(v320) = BYTE2(v229);
                BYTE11(v320) = BYTE3(v229);
                BYTE12(v320) = BYTE4(v229);
                BYTE13(v320) = BYTE5(v229);
LABEL_64:
                uint64_t v234 = v317;
                sub_1D7A9B808();
                sub_1D78607E8(v228, v229);
                break;
            }
            v236 = v298;
            sub_1D7A9B818();
            v288(v184, v234);
            sub_1D78607E8(v228, v229);
            unint64_t v237 = v310;
            uint64_t v238 = sub_1D7A9BD78();
            uint64_t v240 = sub_1D78D1370(v238, v239);
            swift_bridgeObjectRelease();
            uint64_t v241 = sub_1D78D1EB0(v240);
            unint64_t v243 = v242;
            swift_release();
            v287(v236, v237);
            uint64_t v244 = (uint64_t)v300;
            uint64_t v245 = v295;
            v230(v300, v314, v295);
            sub_1D7860790(v241, v243);
            sub_1D79240F0(v244, v241, v243);
            sub_1D78607E8(v241, v243);
            v282(v244, v245);
            long long v246 = v321;
            *(void *)&long long v320 = v280;
            *((void *)&v320 + 1) = v303;
            uint64_t v247 = *v312;
            unint64_t v248 = v312[1];
            if (v248 >> 60 == 15) {
              uint64_t v249 = 0;
            }
            else {
              uint64_t v249 = *v312;
            }
            unint64_t v250 = 0xC000000000000000;
            if (v248 >> 60 != 15) {
              unint64_t v250 = v312[1];
            }
            uint64_t v317 = v249;
            uint64_t v318 = v249;
            unint64_t v316 = v250;
            unint64_t v319 = v250;
            sub_1D7860790(v241, v243);
            uint64_t v251 = v307;
            unint64_t v252 = v306;
            sub_1D7860790(v307, v306);
            unint64_t v164 = v290;
            sub_1D7860790(v291, v290);
            sub_1D786E9D8(v246, *((unint64_t *)&v246 + 1));
            sub_1D786E9D8(v247, v248);
            sub_1D7885ADC();
            v253 = v309;
            v254 = v304;
            v312 = (void *)sub_1D7A9BA78();
            unint64_t v315 = v255;
            uint64_t v163 = v254;
            if (v254)
            {
              sub_1D78607E8(v251, v252);
              sub_1D78607E8(v291, v164);
              sub_1D7871BDC(0, 0xF000000000000000);
              sub_1D7871BDC(v246, *((unint64_t *)&v246 + 1));
              sub_1D7871BDC(0, 0xF000000000000000);
              sub_1D7871BDC(v241, v243);
              sub_1D78607E8(v241, v243);
              sub_1D78607E8(v251, v252);
              sub_1D78607E8(v317, v316);
              (*(void (**)(char *, uint64_t))(v301 + 8))(v253, v302);
              (*(void (**)(char *, uint64_t))(v308 + 8))(v311, v289);
              sub_1D78607E8(v280, (unint64_t)v303);
              sub_1D7871BDC(v321, *((unint64_t *)&v321 + 1));
              SecCertificateRef v166 = v293;
              uint64_t v159 = v296;
              unint64_t v160 = v294;
              uint64_t v165 = v291;
              goto LABEL_20;
            }
            unint64_t v310 = *((void *)&v246 + 1);
            unint64_t v256 = v243;
            sub_1D78607E8(v317, v316);
            uint64_t v257 = (uint64_t)v300;
            uint64_t v258 = v295;
            v283(v300, v314, v295);
            v259 = v312;
            unint64_t v260 = v315;
            sub_1D7860790((uint64_t)v312, v315);
            sub_1D7924110(v257, (uint64_t)v259, v260);
            sub_1D78607E8((uint64_t)v259, v260);
            v282(v257, v258);
            if (shouldIncludeUnencryptedData()())
            {
              uint64_t v261 = *((void *)&v323 + 1);
              uint64_t v262 = v323;
              uint64_t v264 = *((void *)&v324 + 1);
              unint64_t v263 = v324;
              int v265 = v325;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              uint64_t v262 = 0;
              uint64_t v261 = 0;
              unint64_t v263 = 0;
              uint64_t v264 = 0;
              int v265 = 0;
            }
            uint64_t v266 = v241;
            uint64_t v305 = v261;
            LODWORD(v313) = v265;
            uint64_t v314 = v264;
            unint64_t v316 = v263;
            uint64_t v317 = v262;
            sub_1D7A4E7B4(v262, v261);
            uint64_t v267 = v307;
            unint64_t v268 = v306;
            sub_1D7860790(v307, v306);
            uint64_t v269 = v291;
            unint64_t v270 = v290;
            sub_1D7860790(v291, v290);
            sub_1D786E9D8(0, 0xF000000000000000);
            unint64_t v271 = v310;
            sub_1D786E9D8(v246, v310);
            sub_1D786E9D8(0, 0xF000000000000000);
            sub_1D786E9D8(v266, v256);
            sub_1D78607E8(v280, (unint64_t)v303);

            sub_1D78607E8(v267, v268);
            sub_1D78607E8(v269, v270);
            sub_1D7871BDC(0, 0xF000000000000000);
            sub_1D7871BDC(v246, v271);
            sub_1D7871BDC(0, 0xF000000000000000);
            sub_1D7871BDC(v266, v256);
            sub_1D78607E8(v266, v256);
            sub_1D78607E8(v269, v270);
            sub_1D78607E8(v267, v268);
            sub_1D7871BDC(v296, v294);
            v272 = v297;
            unsigned char *v297 = 0;
            *((void *)v272 + 1) = v267;
            *((void *)v272 + 2) = v268;
            *((void *)v272 + 3) = v269;
            *((void *)v272 + 4) = v270;
            long long v273 = v279;
            *(_OWORD *)(v272 + 40) = v279;
            *((void *)v272 + 7) = v246;
            *((void *)v272 + 8) = v271;
            *(_OWORD *)(v272 + 72) = v273;
            *((void *)v272 + 11) = v266;
            *((void *)v272 + 12) = v256;
            unint64_t v275 = v315;
            unint64_t v274 = v316;
            *((void *)v272 + 13) = v312;
            *((void *)v272 + 14) = v275;
            uint64_t v276 = v317;
            uint64_t v277 = v305;
            *((void *)v272 + 15) = v317;
            *((void *)v272 + 16) = v277;
            uint64_t v278 = v314;
            *((void *)v272 + 17) = v274;
            *((void *)v272 + 18) = v278;
            v272[152] = v313;
            sub_1D7A4E928(v276, v277);
            (*(void (**)(char *, uint64_t))(v301 + 8))(v309, v302);
            (*(void (**)(char *, uint64_t))(v308 + 8))(v311, v289);
            sub_1D7871BDC(v321, *((unint64_t *)&v321 + 1));
            break;
          case 3uLL:
            *(void *)((char *)&v321 + 6) = 0;
            *(void *)&long long v321 = 0;
            unint64_t v185 = &v321;
            goto LABEL_35;
          default:
            *(void *)&long long v321 = v180;
            WORD4(v321) = v181;
            BYTE10(v321) = BYTE2(v181);
            BYTE11(v321) = BYTE3(v181);
            BYTE12(v321) = BYTE4(v181);
            BYTE13(v321) = BYTE5(v181);
            unint64_t v185 = (long long *)((char *)&v322[-1] + BYTE6(v181));
LABEL_35:
            uint64_t v307 = sub_1D78D0C88((uint64_t)&v321, (uint64_t)v185);
            unint64_t v197 = v198;
            goto LABEL_36;
        }
      }
    }
    else
    {
      LOWORD(v322[0]) = 242;
      unint64_t v120 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000035, 0x80000001D7ABEA00, (__int16 *)v322, 0, v120, 0xD000000000000051, 0x80000001D7ABE640, v121, 0xD000000000000024, 0x80000001D7ABE9D0, 580);
      swift_willThrow();
    }
  }
  else
  {
    LOWORD(v322[0]) = 261;
    unint64_t v122 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000029, 0x80000001D7ABE9A0, (__int16 *)v322, 0, v122, 0xD000000000000051, 0x80000001D7ABE640, v123, 0xD000000000000024, 0x80000001D7ABE9D0, 576);
    swift_willThrow();
  }
}

void sub_1D7A4BB70(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *(void *)(a1 + 104);
  unint64_t v7 = *(void *)(a1 + 112);
  long long v8 = *(_OWORD *)(a1 + 56);
  v26[2] = *(_OWORD *)(a1 + 40);
  v26[3] = v8;
  long long v9 = *(_OWORD *)(a1 + 88);
  v26[4] = *(_OWORD *)(a1 + 72);
  v26[5] = v9;
  long long v10 = *(_OWORD *)(a1 + 24);
  v26[0] = *(_OWORD *)(a1 + 8);
  v26[1] = v10;
  long long v11 = *(_OWORD *)(a1 + 56);
  void v25[2] = *(_OWORD *)(a1 + 40);
  v25[3] = v11;
  long long v12 = *(_OWORD *)(a1 + 88);
  v25[4] = *(_OWORD *)(a1 + 72);
  v25[5] = v12;
  long long v13 = *(_OWORD *)(a1 + 24);
  v25[0] = *(_OWORD *)(a1 + 8);
  v25[1] = v13;
  sub_1D7A4E978((uint64_t *)v26, (void (*)(uint64_t, uint64_t))sub_1D7860790, (void (*)(uint64_t, uint64_t))sub_1D786E9D8);
  uint64_t v14 = HPKESuiteKwV1.openMessageHPKEWithoutDecoding(data:params:authenticationContext:)(v6, v7, (uint64_t *)v25, a2);
  if (v3)
  {
    sub_1D7A4E978((uint64_t *)v26, (void (*)(uint64_t, uint64_t))sub_1D78607E8, (void (*)(uint64_t, uint64_t))sub_1D7871BDC);
    LOWORD(v25[0]) = 0;
    id v22 = v3;
    unint64_t v23 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v3, 0, 0xE000000000000000, (__int16 *)v25, 0, v23, 0xD000000000000051, 0x80000001D7ABE640, v24, 0xD000000000000038, 0x80000001D7ABEA70, 639);
    swift_willThrow();
  }
  else
  {
    uint64_t v16 = (uint64_t)v14;
    unint64_t v17 = v15;
    sub_1D7A4E978((uint64_t *)v26, (void (*)(uint64_t, uint64_t))sub_1D78607E8, (void (*)(uint64_t, uint64_t))sub_1D7871BDC);
    uint64_t v18 = a3[3];
    uint64_t v19 = a3[4];
    __swift_project_boxed_opaque_existential_1(a3, v18);
    uint64_t v20 = *(void (**)(ValueMetadata *, uint64_t, unint64_t, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v19 + 8);
    unint64_t v21 = sub_1D7A4EC44();
    v20(&type metadata for DigitalPresentmentResponseTopics, v16, v17, &type metadata for DigitalPresentmentResponseTopics, v21, v18, v19);
    sub_1D78607E8(v16, v17);
  }
}

uint64_t DigitalPresentmentResponseTopics.identity.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  char v5 = *(unsigned char *)(v1 + 32);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v3;
  *(unsigned char *)(a1 + 32) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D7A4BE44()
{
  return 0x797469746E656469;
}

uint64_t sub_1D7A4BE5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x797469746E656469 && a2 == 0xE800000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_1D7A9D358();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1D7A4BEF4(uint64_t a1)
{
  unint64_t v2 = sub_1D7A4C0D8();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1D7A4BF30(uint64_t a1)
{
  unint64_t v2 = sub_1D7A4C0D8();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t DigitalPresentmentResponseTopics.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847530);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v5, v6, v7, v8, v9, v10, v11);
  long long v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v19 = *v1;
  uint64_t v15 = *((void *)v1 + 2);
  uint64_t v14 = *((void *)v1 + 3);
  int v18 = *((unsigned __int8 *)v1 + 32);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D7A4C0D8();
  sub_1D7A9D6E8();
  long long v20 = v19;
  uint64_t v21 = v15;
  uint64_t v22 = v14;
  char v23 = v18;
  sub_1D79845D0();
  sub_1D7A9D228();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v13, v3);
}

unint64_t sub_1D7A4C0D8()
{
  unint64_t result = qword_1EA847538;
  if (!qword_1EA847538)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847538);
  }
  return result;
}

uint64_t DigitalPresentmentResponseTopics.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847540);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7, v8, v9, v10, v11, v12, v13);
  uint64_t v15 = (char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D7A4C0D8();
  sub_1D7A9D6A8();
  if (!v2)
  {
    sub_1D7A4C2A8();
    sub_1D7A9D148();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v5);
    uint64_t v16 = v20[2];
    char v17 = v22;
    long long v18 = v21;
    *(void *)a2 = v20[1];
    *(void *)(a2 + 8) = v16;
    *(_OWORD *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 32) = v17;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

unint64_t sub_1D7A4C2A8()
{
  unint64_t result = qword_1EA847548;
  if (!qword_1EA847548)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847548);
  }
  return result;
}

uint64_t sub_1D7A4C2FC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return DigitalPresentmentResponseTopics.init(from:)(a1, a2);
}

uint64_t sub_1D7A4C314(void *a1)
{
  return DigitalPresentmentResponseTopics.encode(to:)(a1);
}

__n128 DigitalPresentmentResponseCryptor.init(sessionTranscript:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v4;
  *(void *)(a2 + 32) = v2;
  *(void *)(a2 + 40) = v3;
  __n128 result = *(__n128 *)(a1 + 48);
  *(__n128 *)(a2 + 48) = result;
  return result;
}

uint64_t DigitalPresentmentResponseCryptor.encrypt(_:to:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v112 = a2;
  uint64_t v111 = sub_1D7A9BA48();
  uint64_t v109 = *(void *)(v111 - 8);
  MEMORY[0x1F4188790](v111, v4, v5, v6, v7, v8, v9, v10);
  uint64_t v110 = (char *)&v98 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1D7A9BA28();
  uint64_t v106 = *(void *)(v12 - 8);
  uint64_t v107 = v12;
  MEMORY[0x1F4188790](v12, v13, v14, v15, v16, v17, v18, v19);
  uint64_t v108 = (char *)&v98 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_1D7A9BA38();
  uint64_t v102 = *(void *)(v21 - 8);
  uint64_t v103 = v21;
  MEMORY[0x1F4188790](v21, v22, v23, v24, v25, v26, v27, v28);
  uint64_t v104 = (char *)&v98 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v105 = type metadata accessor for HPKESuiteKwV1();
  MEMORY[0x1F4188790](v105, v30, v31, v32, v33, v34, v35, v36);
  uint64_t v123 = (uint64_t *)((char *)&v98 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v125 = sub_1D7A9B5F8();
  uint64_t v152 = *(void *)(v125 - 8);
  MEMORY[0x1F4188790](v125, v38, v39, v40, v41, v42, v43, v44);
  uint64_t v124 = (char *)&v98 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = sub_1D7A9CEA8();
  uint64_t v47 = *(void *)(v46 - 8);
  MEMORY[0x1F4188790](v46, v48, v49, v50, v51, v52, v53, v54);
  uint64_t v56 = (char *)&v98 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = *a1;
  uint64_t v58 = a1[1];
  uint64_t v59 = a1[2];
  uint64_t v60 = a1[3];
  char v61 = *((unsigned char *)a1 + 32);
  uint64_t v62 = *v2;
  unint64_t v120 = v2[1];
  uint64_t v121 = v62;
  uint64_t v63 = (uint64_t)v2[2];
  unint64_t v118 = v2[3];
  uint64_t v119 = v63;
  uint64_t v64 = v2[4];
  unint64_t v116 = v2[5];
  uint64_t v117 = v64;
  uint64_t v65 = v2[6];
  SecCertificateRef_optional v114 = v2[7];
  unint64_t v115 = v65;
  *(void *)&long long v148 = v57;
  *((void *)&v148 + 1) = v58;
  uint64_t v149 = v59;
  uint64_t v150 = v60;
  char v151 = v61;
  uint64_t v101 = sub_1D7A9B3F8();
  swift_allocObject();
  swift_bridgeObjectRetain();
  uint64_t v128 = v58;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v66 = sub_1D7A9B3E8();
  if (qword_1EA841628 != -1) {
    swift_once();
  }
  uint64_t v126 = v60;
  uint64_t v127 = v59;
  uint64_t v67 = __swift_project_value_buffer(v46, (uint64_t)qword_1EA846FA0);
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v56, v67, v46);
  *((void *)&v131 + 1) = &type metadata for ISO18013PresentmentType;
  LOBYTE(v130) = 1;
  uint64_t v68 = v66;
  uint64_t v69 = (void (*)(void *, void))sub_1D7A9B3D8();
  sub_1D7A16528((uint64_t)&v130, (uint64_t)v56);
  v69(v129, 0);
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v70 = v125;
  uint64_t v71 = __swift_project_value_buffer(v125, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  uint64_t v72 = v152;
  uint64_t v73 = (void (*)(uint64_t, uint64_t))(v152 + 16);
  uint64_t v74 = v124;
  uint64_t v99 = *(void (**)(char *, uint64_t, uint64_t))(v152 + 16);
  uint64_t v100 = v71;
  v99(v124, v71, v70);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1D792592C();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v113 = v68;
  uint64_t v77 = *(void (**)(uint64_t, uint64_t))(v72 + 8);
  uint64_t v75 = v72 + 8;
  uint64_t v76 = v77;
  v77((uint64_t)v74, v70);
  uint64_t v78 = v122;
  *(void *)&long long v130 = v121;
  *((void *)&v130 + 1) = v120;
  *(void *)&long long v131 = v119;
  *((void *)&v131 + 1) = v118;
  *(void *)&long long v132 = v117;
  *((void *)&v132 + 1) = v116;
  *(void *)&long long v133 = v115;
  *((void *)&v133 + 1) = v114;
  uint64_t v79 = sub_1D7A4CFE4();
  uint64_t v81 = (uint64_t)v78;
  uint64_t v82 = v123;
  if (v78)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    LOWORD(v130) = 0;
    id v92 = v78;
    unint64_t v93 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v78, 0, 0xE000000000000000, (__int16 *)&v130, 0, v93, 0xD00000000000006ALL, 0x80000001D7ACB230, v94, 0x2874707972636E65, 0xEE00293A6F743A5FLL, 60);
    swift_willThrow();
  }
  else
  {
    unint64_t v120 = v73;
    uint64_t v121 = v76;
    uint64_t v152 = v75;
    *uint64_t v123 = &type metadata for AEADScheme_AES_128_GCM;
    v82[1] = &off_1F2F1ADC8;
    uint64_t v83 = v82;
    uint64_t v84 = (int *)v105;
    unint64_t v122 = (char *)v82 + *(int *)(v105 + 20);
    unint64_t v85 = v80;
    uint64_t v86 = v79;
    (*(void (**)(char *, void, uint64_t))(v102 + 104))(v104, *MEMORY[0x1E4F250A8], v103);
    (*(void (**)(char *, void, uint64_t))(v106 + 104))(v108, *MEMORY[0x1E4F25090], v107);
    (*(void (**)(char *, void, uint64_t))(v109 + 104))(v110, *MEMORY[0x1E4F250B8], v111);
    sub_1D7860790(v86, v85);
    sub_1D7A9BA08();
    *(_OWORD *)((char *)v83 + v84[7]) = xmmword_1D7AA0AC0;
    uint64_t v87 = (char *)v83 + v84[8];
    *(void *)uint64_t v87 = 0;
    *((void *)v87 + 1) = 0;
    v87[16] = -1;
    uint64_t v88 = (void *)((char *)v83 + v84[6]);
    *uint64_t v88 = v86;
    v88[1] = v85;
    v129[3] = v101;
    v129[4] = &protocol witness table for CBOREncoder;
    v129[0] = v113;
    swift_retain();
    sub_1D7A49FE8(&v148, v129, &v130);
    uint64_t v119 = v86;
    unint64_t v122 = (char *)v85;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v129);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v145 = v136;
    long long v146 = v137;
    v147[0] = v138[0];
    *(_OWORD *)((char *)v147 + 9) = *(_OWORD *)((char *)v138 + 9);
    long long v141 = v132;
    long long v142 = v133;
    long long v143 = v134;
    long long v144 = v135;
    long long v139 = v130;
    long long v140 = v131;
    uint64_t v90 = (uint64_t)v124;
    uint64_t v89 = v125;
    uint64_t v91 = (void (*)(uint64_t, uint64_t, uint64_t))v99;
    v99(v124, v100, v125);
    sub_1D7A4E804((uint64_t)&v139, (void (*)(uint64_t, uint64_t))sub_1D7860790, (void (*)(uint64_t, uint64_t))sub_1D786E9D8, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, void))sub_1D7A4E7B4);
    sub_1D7924C98(v90, &v139);
    sub_1D7A4E804((uint64_t)&v139, (void (*)(uint64_t, uint64_t))sub_1D78607E8, (void (*)(uint64_t, uint64_t))sub_1D7871BDC, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, void))sub_1D7A4E928);
    v121(v90, v89);
    long long v136 = v145;
    long long v137 = v146;
    v138[0] = v147[0];
    *(_OWORD *)((char *)v138 + 9) = *(_OWORD *)((char *)v147 + 9);
    long long v132 = v141;
    long long v133 = v142;
    long long v134 = v143;
    long long v135 = v144;
    long long v130 = v139;
    long long v131 = v140;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA843EE0);
    sub_1D7871DDC(&qword_1EA847550, &qword_1EA843EE0);
    uint64_t v81 = sub_1D7A9B3C8();
    unint64_t v97 = v96;
    v91(v90, v100, v89);
    sub_1D7860790(v81, v97);
    sub_1D7924CB8(v90, v81, v97);
    sub_1D78607E8(v81, v97);
    sub_1D7A4E804((uint64_t)&v139, (void (*)(uint64_t, uint64_t))sub_1D78607E8, (void (*)(uint64_t, uint64_t))sub_1D7871BDC, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, void))sub_1D7A4E928);
    swift_release();
    sub_1D78607E8(v119, (unint64_t)v122);
    v121(v90, v89);
    sub_1D7A4E758((uint64_t)v123);
  }
  return v81;
}

uint64_t sub_1D7A4CE1C()
{
  sub_1D7A4EC98();
  uint64_t v0 = sub_1D7A9B3C8();
  unint64_t v2 = v1;
  sub_1D7A9CC48();
  sub_1D7A9C128();
  sub_1D79F1750(v0, v2);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF7900);
  sub_1D7871DDC((unint64_t *)&qword_1EBDF7910, (uint64_t *)&unk_1EBDF7900);
  sub_1D7A9BF38();
  swift_bridgeObjectRelease();
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  sub_1D78607E8(v0, v2);
  return 0;
}

uint64_t sub_1D7A4CFE4()
{
  uint64_t v2 = *v0;
  unint64_t v1 = v0[1];
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  uint64_t v6 = v0[4];
  uint64_t v5 = v0[5];
  uint64_t v7 = v0[6];
  unint64_t v8 = v0[7];
  sub_1D7A9B3F8();
  swift_allocObject();
  sub_1D7A9B3E8();
  v14[0] = v2;
  v14[1] = v1;
  v14[2] = v3;
  void v14[3] = v4;
  v14[4] = v6;
  v14[5] = v5;
  _OWORD v14[6] = v7;
  v14[7] = v8;
  sub_1D7860790(v2, v1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1D7860790(v7, v8);
  sub_1D79ABF9C();
  uint64_t v9 = (void *)v15;
  uint64_t v15 = sub_1D7A9B3C8();
  sub_1D78607E8(v2, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1D78607E8(v7, v8);
  swift_release();
  if (v9)
  {
    LOWORD(v14[0]) = 0;
    id v10 = v9;
    unint64_t v11 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v9, 0, 0xE000000000000000, (__int16 *)v14, 0, v11, 0xD00000000000006ALL, 0x80000001D7ACB230, v12, 0x286F666E49746567, 0xE900000000000029, 119);
    swift_willThrow();
  }
  return v15;
}

uint64_t sub_1D7A4D1D4(uint64_t a1, unint64_t a2)
{
  return sub_1D7A4DBFC(a1, a2);
}

__n128 DigitalPresentmentResponseCryptor.decrypt(_:with:)@<Q0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X8>)
{
  unint64_t v142 = a2;
  uint64_t v127 = a1;
  unint64_t v97 = a4;
  uint64_t v6 = sub_1D7A9BA48();
  uint64_t v106 = *(void *)(v6 - 8);
  uint64_t v107 = v6;
  MEMORY[0x1F4188790](v6, v7, v8, v9, v10, v11, v12, v13);
  uint64_t v108 = (char *)&v96 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_1D7A9BA28();
  uint64_t v104 = *(void *)(v15 - 8);
  uint64_t v105 = v15;
  MEMORY[0x1F4188790](v15, v16, v17, v18, v19, v20, v21, v22);
  uint64_t v112 = (char *)&v96 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_1D7A9BA38();
  uint64_t v102 = *(void *)(v24 - 8);
  uint64_t v103 = v24;
  MEMORY[0x1F4188790](v24, v25, v26, v27, v28, v29, v30, v31);
  uint64_t v110 = (char *)&v96 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = type metadata accessor for HPKESuiteKwV1();
  MEMORY[0x1F4188790](v111, v33, v34, v35, v36, v37, v38, v39);
  uint64_t v109 = (uint64_t *)((char *)&v96 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v41 = sub_1D7A9CEA8();
  uint64_t v42 = *(void *)(v41 - 8);
  MEMORY[0x1F4188790](v41, v43, v44, v45, v46, v47, v48, v49);
  uint64_t v125 = (char *)&v96 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = sub_1D7A9B5F8();
  uint64_t v52 = *(void *)(v51 - 8);
  MEMORY[0x1F4188790](v51, v53, v54, v55, v56, v57, v58, v59);
  char v61 = (char *)&v96 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = *(void **)a3;
  id v100 = *(id *)(a3 + 8);
  uint64_t v101 = v62;
  int v99 = *(unsigned __int8 *)(a3 + 16);
  uint64_t v63 = *v4;
  uint64_t v121 = v4[1];
  uint64_t v122 = v63;
  uint64_t v64 = v4[2];
  uint64_t v119 = v4[3];
  uint64_t v120 = v64;
  uint64_t v65 = v4[4];
  uint64_t v117 = v4[5];
  uint64_t v118 = v65;
  uint64_t v66 = v4[6];
  uint64_t v115 = v4[7];
  uint64_t v116 = v66;
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v67 = __swift_project_value_buffer(v51, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  uint64_t v113 = *(void (**)(void, void, void))(v52 + 16);
  uint64_t v114 = v67;
  v113(v61, v67, v51);
  uint64_t v68 = v127;
  unint64_t v69 = v142;
  sub_1D7860790(v127, v142);
  sub_1D7924CD0((uint64_t)v61, v68, v69);
  sub_1D78607E8(v68, v69);
  uint64_t v70 = *(void (**)(void, void))(v52 + 8);
  uint64_t v123 = v51;
  uint64_t v124 = v52 + 8;
  v70(v61, v51);
  uint64_t v71 = v70;
  uint64_t v98 = sub_1D7A9B378();
  swift_allocObject();
  uint64_t v72 = sub_1D7A9B368();
  if (qword_1EA841628 != -1) {
    swift_once();
  }
  uint64_t v73 = __swift_project_value_buffer(v41, (uint64_t)qword_1EA846FA0);
  uint64_t v74 = (uint64_t)v125;
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v125, v73, v41);
  *((void *)&v132 + 1) = &type metadata for ISO18013PresentmentType;
  LOBYTE(v131) = 1;
  uint64_t v75 = (void (*)(void, void))sub_1D7A9B348();
  sub_1D7A16528((uint64_t)&v131, v74);
  v75(v128, 0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA843EE0);
  sub_1D7871DDC(&qword_1EA847558, &qword_1EA843EE0);
  uint64_t v76 = v126;
  sub_1D7A9B338();
  if (v76)
  {
    swift_release();
    LOWORD(v131) = 0;
    id v78 = v76;
    unint64_t v79 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v76, 0, 0xE000000000000000, (__int16 *)&v131, 0, v79, 0xD00000000000006ALL, 0x80000001D7ACB230, v80, 0xD000000000000010, 0x80000001D7ACB2A0, 83);
    swift_willThrow();
  }
  else
  {
    unint64_t v142 = v72;
    v140[6] = v137;
    v140[7] = v138;
    v141[0] = v139[0];
    *(_OWORD *)((char *)v141 + 9) = *(_OWORD *)((char *)v139 + 9);
    v140[2] = v133;
    v140[3] = v134;
    v140[4] = v135;
    v140[5] = v136;
    v140[0] = v131;
    v140[1] = v132;
    uint64_t v77 = v123;
    v113(v61, v114, v123);
    sub_1D7A4E804((uint64_t)v140, (void (*)(uint64_t, uint64_t))sub_1D7860790, (void (*)(uint64_t, uint64_t))sub_1D786E9D8, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, void))sub_1D7A4E7B4);
    sub_1D7924CE8((uint64_t)v61, v140);
    sub_1D7A4E804((uint64_t)v140, (void (*)(uint64_t, uint64_t))sub_1D78607E8, (void (*)(uint64_t, uint64_t))sub_1D7871BDC, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, void))sub_1D7A4E928);
    v71(v61, v77);
    *(void *)&long long v131 = v122;
    *((void *)&v131 + 1) = v121;
    *(void *)&long long v132 = v120;
    *((void *)&v132 + 1) = v119;
    *(void *)&long long v133 = v118;
    *((void *)&v133 + 1) = v117;
    *(void *)&long long v134 = v116;
    *((void *)&v134 + 1) = v115;
    uint64_t v81 = sub_1D7A4CFE4();
    unint64_t v83 = v82;
    uint64_t v85 = (uint64_t)v109;
    uint64_t v84 = v110;
    *uint64_t v109 = &type metadata for AEADScheme_AES_128_GCM;
    *(void *)(v85 + 8) = &off_1F2F1ADC8;
    uint64_t v127 = v85 + *(int *)(v111 + 20);
    (*(void (**)(char *, void, uint64_t))(v102 + 104))(v84, *MEMORY[0x1E4F250A8], v103);
    (*(void (**)(char *, void, uint64_t))(v104 + 104))(v112, *MEMORY[0x1E4F25090], v105);
    (*(void (**)(char *, void, uint64_t))(v106 + 104))(v108, *MEMORY[0x1E4F250B8], v107);
    id v87 = v100;
    uint64_t v86 = v101;
    char v88 = v99;
    sub_1D7885B48(v101, v100, v99);
    sub_1D7860790(v81, v83);
    sub_1D7A9BA08();
    uint64_t v89 = v111;
    uint64_t v90 = v85 + *(int *)(v111 + 32);
    *(void *)uint64_t v90 = v86;
    *(void *)(v90 + 8) = v87;
    *(unsigned char *)(v90 + 16) = v88;
    *(_OWORD *)(v85 + *(int *)(v89 + 28)) = xmmword_1D7AA0AB0;
    uint64_t v91 = (uint64_t *)(v85 + *(int *)(v89 + 24));
    *uint64_t v91 = v81;
    v91[1] = v83;
    *((void *)&v132 + 1) = v98;
    *(void *)&long long v133 = &protocol witness table for CBORDecoder;
    *(void *)&long long v131 = v142;
    swift_retain();
    sub_1D7A4BB70((uint64_t)v140, 0, &v131);
    sub_1D78607E8(v81, v83);
    swift_release();
    sub_1D7A4E758(v85);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v131);
    sub_1D7A4E804((uint64_t)v140, (void (*)(uint64_t, uint64_t))sub_1D78607E8, (void (*)(uint64_t, uint64_t))sub_1D7871BDC, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, void))sub_1D7A4E928);
    unint64_t v92 = v128[1];
    unsigned __int8 v93 = v130;
    __n128 result = v129;
    uint64_t v95 = v97;
    v97->n128_u64[0] = v128[0];
    v95->n128_u64[1] = v92;
    v95[1] = result;
    v95[2].n128_u8[0] = v93;
  }
  return result;
}

uint64_t sub_1D7A4DBDC(uint64_t a1, unint64_t a2)
{
  return sub_1D7A4DBFC(a1, a2);
}

uint64_t sub_1D7A4DBFC(uint64_t a1, unint64_t a2)
{
  return 0;
}

uint64_t DigitalPresentmentResponseCryptor.decryptWithoutDecoding(_:with:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v144 = a2;
  uint64_t v129 = a1;
  uint64_t v5 = sub_1D7A9BA48();
  uint64_t v108 = *(void *)(v5 - 8);
  uint64_t v109 = v5;
  MEMORY[0x1F4188790](v5, v6, v7, v8, v9, v10, v11, v12);
  uint64_t v110 = &v100[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = sub_1D7A9BA28();
  uint64_t v106 = *(void *)(v14 - 8);
  uint64_t v107 = v14;
  MEMORY[0x1F4188790](v14, v15, v16, v17, v18, v19, v20, v21);
  uint64_t v114 = &v100[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v23 = sub_1D7A9BA38();
  uint64_t v104 = *(void *)(v23 - 8);
  uint64_t v105 = v23;
  MEMORY[0x1F4188790](v23, v24, v25, v26, v27, v28, v29, v30);
  uint64_t v112 = &v100[-((v31 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v113 = type metadata accessor for HPKESuiteKwV1();
  MEMORY[0x1F4188790](v113, v32, v33, v34, v35, v36, v37, v38);
  uint64_t v111 = &v100[-((v39 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v40 = sub_1D7A9CEA8();
  uint64_t v41 = *(void *)(v40 - 8);
  MEMORY[0x1F4188790](v40, v42, v43, v44, v45, v46, v47, v48);
  uint64_t v127 = &v100[-((v49 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v50 = sub_1D7A9B5F8();
  uint64_t v51 = *(void *)(v50 - 8);
  MEMORY[0x1F4188790](v50, v52, v53, v54, v55, v56, v57, v58);
  uint64_t v60 = &v100[-((v59 + 15) & 0xFFFFFFFFFFFFFFF0)];
  char v61 = *(void **)a3;
  id v102 = *(id *)(a3 + 8);
  uint64_t v103 = v61;
  int v101 = *(unsigned __int8 *)(a3 + 16);
  uint64_t v62 = *v3;
  uint64_t v123 = v3[1];
  uint64_t v124 = v62;
  uint64_t v63 = v3[2];
  uint64_t v121 = v3[3];
  uint64_t v122 = v63;
  uint64_t v64 = v3[4];
  uint64_t v119 = v3[5];
  uint64_t v120 = v64;
  uint64_t v65 = v3[6];
  uint64_t v117 = v3[7];
  uint64_t v118 = v65;
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v66 = __swift_project_value_buffer(v50, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  uint64_t v115 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v51 + 16);
  uint64_t v116 = v66;
  v115(v60, v66, v50);
  uint64_t v67 = v129;
  unint64_t v68 = v144;
  sub_1D7860790(v129, v144);
  sub_1D7924CD0((uint64_t)v60, v67, v68);
  sub_1D78607E8(v67, v68);
  unint64_t v69 = *(void (**)(unsigned char *, uint64_t))(v51 + 8);
  uint64_t v125 = v50;
  uint64_t v126 = v51 + 8;
  uint64_t v70 = v50;
  uint64_t v71 = v69;
  v69(v60, v70);
  sub_1D7A9B378();
  swift_allocObject();
  uint64_t v72 = sub_1D7A9B368();
  if (qword_1EA841628 != -1) {
    swift_once();
  }
  uint64_t v73 = __swift_project_value_buffer(v40, (uint64_t)qword_1EA846FA0);
  uint64_t v74 = (uint64_t)v127;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v41 + 16))(v127, v73, v40);
  *((void *)&v131 + 1) = &type metadata for ISO18013PresentmentType;
  LOBYTE(v130) = 1;
  uint64_t v75 = (void (*)(uint64_t *, void))sub_1D7A9B348();
  sub_1D7A16528((uint64_t)&v130, v74);
  v75(&v139, 0);
  uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA843EE0);
  sub_1D7871DDC(&qword_1EA847558, &qword_1EA843EE0);
  uint64_t v77 = v128;
  sub_1D7A9B338();
  if (v77)
  {
    swift_release();
    LOWORD(v130) = 0;
    id v96 = v77;
    unint64_t v97 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v77, 0, 0xE000000000000000, (__int16 *)&v130, 0, v97, 0xD00000000000006ALL, 0x80000001D7ACB230, v98, 0xD00000000000001FLL, 0x80000001D7ACB2C0, 108);
    swift_willThrow();
  }
  else
  {
    unint64_t v144 = v72;
    v140[6] = v136;
    long long v141 = v137;
    v142[0] = v138[0];
    *(_OWORD *)((char *)v142 + 9) = *(_OWORD *)((char *)v138 + 9);
    v140[2] = v132;
    v140[3] = v133;
    v140[4] = v134;
    v140[5] = v135;
    v140[0] = v130;
    v140[1] = v131;
    uint64_t v78 = v125;
    v115(v60, v116, v125);
    sub_1D7A4E804((uint64_t)v140, (void (*)(uint64_t, uint64_t))sub_1D7860790, (void (*)(uint64_t, uint64_t))sub_1D786E9D8, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, void))sub_1D7A4E7B4);
    sub_1D7924CE8((uint64_t)v60, v140);
    sub_1D7A4E804((uint64_t)v140, (void (*)(uint64_t, uint64_t))sub_1D78607E8, (void (*)(uint64_t, uint64_t))sub_1D7871BDC, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, void))sub_1D7A4E928);
    v71(v60, v78);
    *(void *)&long long v130 = v124;
    *((void *)&v130 + 1) = v123;
    *(void *)&long long v131 = v122;
    *((void *)&v131 + 1) = v121;
    *(void *)&long long v132 = v120;
    *((void *)&v132 + 1) = v119;
    *(void *)&long long v133 = v118;
    *((void *)&v133 + 1) = v117;
    uint64_t v79 = sub_1D7A4CFE4();
    unint64_t v81 = v80;
    uint64_t v83 = (uint64_t)v111;
    unint64_t v82 = v112;
    *uint64_t v111 = &type metadata for AEADScheme_AES_128_GCM;
    *(void *)(v83 + 8) = &off_1F2F1ADC8;
    uint64_t v128 = (void *)(v83 + *(int *)(v113 + 20));
    (*(void (**)(unsigned char *, void, uint64_t))(v104 + 104))(v82, *MEMORY[0x1E4F250A8], v105);
    (*(void (**)(unsigned char *, void, uint64_t))(v106 + 104))(v114, *MEMORY[0x1E4F25090], v107);
    uint64_t v84 = *MEMORY[0x1E4F250B8];
    uint64_t v85 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v108 + 104);
    uint64_t v129 = v79;
    v85(v110, v84, v109);
    id v86 = v102;
    id v87 = v103;
    unint64_t v88 = v81;
    LOBYTE(v81) = v101;
    sub_1D7885B48(v103, v102, v101);
    sub_1D7860790(v129, v88);
    uint64_t v89 = v129;
    sub_1D7A9BA08();
    uint64_t v90 = v113;
    uint64_t v91 = v83 + *(int *)(v113 + 32);
    *(void *)uint64_t v91 = v87;
    *(void *)(v91 + 8) = v86;
    *(unsigned char *)(v91 + 16) = v81;
    unint64_t v92 = v88;
    *(_OWORD *)(v83 + *(int *)(v90 + 28)) = xmmword_1D7AA0AB0;
    unsigned __int8 v93 = (uint64_t *)(v83 + *(int *)(v90 + 24));
    *unsigned __int8 v93 = v89;
    v93[1] = v88;
    uint64_t v94 = *((void *)&v140[6] + 1);
    unint64_t v95 = v141;
    v143[2] = *(_OWORD *)((char *)&v140[2] + 8);
    v143[3] = *(_OWORD *)((char *)&v140[3] + 8);
    v143[4] = *(_OWORD *)((char *)&v140[4] + 8);
    v143[5] = *(_OWORD *)((char *)&v140[5] + 8);
    v143[0] = *(_OWORD *)((char *)v140 + 8);
    v143[1] = *(_OWORD *)((char *)&v140[1] + 8);
    long long v132 = *(_OWORD *)((char *)&v140[2] + 8);
    long long v133 = *(_OWORD *)((char *)&v140[3] + 8);
    long long v134 = *(_OWORD *)((char *)&v140[4] + 8);
    long long v135 = *(_OWORD *)((char *)&v140[5] + 8);
    long long v130 = *(_OWORD *)((char *)v140 + 8);
    long long v131 = *(_OWORD *)((char *)&v140[1] + 8);
    sub_1D7A4E978((uint64_t *)v143, (void (*)(uint64_t, uint64_t))sub_1D7860790, (void (*)(uint64_t, uint64_t))sub_1D786E9D8);
    uint64_t v76 = (uint64_t)HPKESuiteKwV1.openMessageHPKEWithoutDecoding(data:params:authenticationContext:)(v94, v95, (uint64_t *)&v130, 0);
    swift_release();
    sub_1D7A4E804((uint64_t)v140, (void (*)(uint64_t, uint64_t))sub_1D78607E8, (void (*)(uint64_t, uint64_t))sub_1D7871BDC, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, void))sub_1D7A4E928);
    sub_1D78607E8(v89, v92);
    sub_1D7A4E978((uint64_t *)v143, (void (*)(uint64_t, uint64_t))sub_1D78607E8, (void (*)(uint64_t, uint64_t))sub_1D7871BDC);
    sub_1D7A4E758(v83);
  }
  return v76;
}

uint64_t sub_1D7A4E758(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for HPKESuiteKwV1();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1D7A4E7B4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1D7A4E804(uint64_t a1, void (*a2)(uint64_t, uint64_t), void (*a3)(uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, void))
{
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v13 = *(void *)(a1 + 64);
  uint64_t v12 = *(void *)(a1 + 72);
  uint64_t v15 = *(void *)(a1 + 80);
  uint64_t v16 = *(void *)(a1 + 96);
  uint64_t v19 = *(void *)(a1 + 104);
  uint64_t v17 = *(void *)(a1 + 88);
  uint64_t v18 = *(void *)(a1 + 112);
  uint64_t v23 = *(void *)(a1 + 128);
  uint64_t v24 = *(void *)(a1 + 120);
  uint64_t v21 = *(void *)(a1 + 144);
  uint64_t v22 = *(void *)(a1 + 136);
  unsigned int v20 = *(unsigned __int8 *)(a1 + 152);
  a2(*(void *)(a1 + 8), *(void *)(a1 + 16));
  a2(v7, v8);
  a3(v9, v10);
  a3(v11, v13);
  a3(v12, v15);
  a3(v17, v16);
  a2(v19, v18);
  a4(v24, v23, v22, v21, v20);
  return a1;
}

uint64_t sub_1D7A4E928(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t *sub_1D7A4E978(uint64_t *a1, void (*a2)(uint64_t, uint64_t), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v6 = a1[2];
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = a1[5];
  uint64_t v10 = a1[6];
  uint64_t v11 = a1[7];
  uint64_t v12 = a1[8];
  uint64_t v16 = a1[10];
  uint64_t v14 = a1[9];
  uint64_t v15 = a1[11];
  a2(*a1, a1[1]);
  a2(v6, v7);
  a3(v8, v9);
  a3(v10, v11);
  a3(v12, v14);
  a3(v16, v15);
  return a1;
}

ValueMetadata *type metadata accessor for DigitalPresentmentResponseTopics()
{
  return &type metadata for DigitalPresentmentResponseTopics;
}

ValueMetadata *type metadata accessor for DigitalPresentmentResponseCryptor()
{
  return &type metadata for DigitalPresentmentResponseCryptor;
}

unsigned char *storeEnumTagSinglePayload for DigitalPresentmentResponseTopics.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1D7A4EB04);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for DigitalPresentmentResponseTopics.CodingKeys()
{
  return &type metadata for DigitalPresentmentResponseTopics.CodingKeys;
}

unint64_t sub_1D7A4EB40()
{
  unint64_t result = qword_1EA847560;
  if (!qword_1EA847560)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847560);
  }
  return result;
}

unint64_t sub_1D7A4EB98()
{
  unint64_t result = qword_1EA847568;
  if (!qword_1EA847568)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847568);
  }
  return result;
}

unint64_t sub_1D7A4EBF0()
{
  unint64_t result = qword_1EA847570;
  if (!qword_1EA847570)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847570);
  }
  return result;
}

unint64_t sub_1D7A4EC44()
{
  unint64_t result = qword_1EA847578;
  if (!qword_1EA847578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847578);
  }
  return result;
}

unint64_t sub_1D7A4EC98()
{
  unint64_t result = qword_1EA847580;
  if (!qword_1EA847580)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847580);
  }
  return result;
}

BOOL IdentityProofingDataSharingUserConsent.init(rawValue:)(uint64_t a1)
{
  return a1 && a1 == 1;
}

void *sub_1D7A4ED10@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2 = *result != 1 && *result != 0;
  *(void *)a2 = *result == 1;
  *(unsigned char *)(a2 + 8) = v2;
  return result;
}

uint64_t IdentityProofingDataSharingUserConsent.debugDescription.getter(uint64_t a1)
{
  if (!a1) {
    return 0x6572616873;
  }
  if (a1 == 1) {
    return 0x68732074276E6F64;
  }
  uint64_t result = sub_1D7A9D4A8();
  __break(1u);
  return result;
}

unint64_t sub_1D7A4EDB8()
{
  unint64_t result = qword_1EA847588;
  if (!qword_1EA847588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847588);
  }
  return result;
}

uint64_t sub_1D7A4EE0C()
{
  if (!*v0) {
    return 0x6572616873;
  }
  if (*v0 == 1) {
    return 0x68732074276E6F64;
  }
  uint64_t result = sub_1D7A9D4A8();
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for IdentityProofingDataSharingUserConsent()
{
  return &type metadata for IdentityProofingDataSharingUserConsent;
}

uint64_t AppleIDVManager.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  AppleIDVManager.init()();
  return v0;
}

uint64_t AppleIDVManager.init()()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v2, v4, v5, v6, v7, v8, v9, v10);
  uint64_t v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11, v14, v15, v16, v17, v18, v19, v20);
  uint64_t v21 = sub_1D7A9C028();
  MEMORY[0x1F4188790](v21 - 8, v22, v23, v24, v25, v26, v27, v28);
  id v29 = objc_msgSend(self, sel_standardUserDefaults);
  if (qword_1EBDF9690 != -1) {
    swift_once();
  }
  if (byte_1EBDFBE68 == 1)
  {
    uint64_t v30 = (void *)sub_1D7A9BF98();
    unsigned __int8 v31 = objc_msgSend(v29, sel_BOOLForKey_, v30);

    if (v31)
    {
      uint64_t v32 = sub_1D7A4FBF8();
      id v34 = v33;
      uint64_t v35 = sub_1D7A9B028();
      unint64_t v37 = v36;

      sub_1D7A9C008();
      uint64_t v38 = sub_1D7A9BFE8();
      unint64_t v40 = v39;
      sub_1D78607E8(v35, v37);
      uint64_t v41 = 0x3E6C696E3CLL;
      if (v40) {
        uint64_t v41 = v38;
      }
      uint64_t v52 = v41;
      if (v40) {
        unint64_t v42 = v40;
      }
      else {
        unint64_t v42 = 0xE500000000000000;
      }
      if (qword_1EBDF9DC8 != -1) {
        swift_once();
      }
      uint64_t v43 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE70);
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v13, v43, v2);
      swift_bridgeObjectRetain();
      uint64_t v44 = sub_1D7A9B5D8();
      os_log_type_t v45 = sub_1D7A9C748();
      if (os_log_type_enabled(v44, v45))
      {
        uint64_t v46 = swift_slowAlloc();
        uint64_t v50 = swift_slowAlloc();
        uint64_t v53 = (uint64_t)v32;
        uint64_t v54 = v50;
        *(_DWORD *)uint64_t v46 = 134349314;
        sub_1D7A9C9E8();
        *(_WORD *)(v46 + 12) = 2082;
        id v51 = v34;
        swift_bridgeObjectRetain();
        uint64_t v53 = sub_1D7923300(v52, v42, &v54);
        sub_1D7A9C9E8();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1D7853000, v44, v45, "AppleIDV status = %{public}ld, version = %{public}s", (uint8_t *)v46, 0x16u);
        uint64_t v47 = v50;
        swift_arrayDestroy();
        MEMORY[0x1D947D740](v47, -1, -1);
        MEMORY[0x1D947D740](v46, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v3 + 8))(v13, v2);
    }
  }
  else
  {
  }
  return v1;
}

Swift::tuple_status_Int_version_NSData __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> AppleIDVManager.getStatus()()
{
  uint64_t v0 = sub_1D7A4FBF8();
  result.version.super.Class isa = v1;
  result.status = (Swift::Int)v0;
  return result;
}

const char *AppleIDVManager.prepareBioBindingUnboundACL()()
{
  return sub_1D7A50130();
}

const char *AppleIDVManager.preparePasscodeBindingUnboundACL()()
{
  return sub_1D7A50658();
}

id AppleIDVManager.persistACLBlob(_:requiresDoublePress:)(uint64_t a1, unint64_t a2, int a3)
{
  id result = sub_1D7A50B80(a1, a2, a3);
  if (v3) {
    return (id)v5;
  }
  return result;
}

unint64_t AppleIDVManager.getUUIDsFromACL(_:)(uint64_t a1, unint64_t a2)
{
  return sub_1D7A514E8(a1, a2);
}

id AppleIDVManager.requireDoublePressOnACL(_:)(uint64_t a1, unint64_t a2)
{
  return sub_1D7A51BB0(a1, a2);
}

id AppleIDVManager.recoverPersistedACLBlob(from:)()
{
  return sub_1D7A52094();
}

uint64_t AppleIDVManager.authorizePresentmentForSignature(aclBlob:externalizedLAContext:seSlot:payloadDigest:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  return sub_1D7A525E8(a1, a2, a3, a4, a5, a6, a7);
}

double AppleIDVManager.generatePrearmTrustKeyforWatchAndCopyPublicKey(nonce:prognitorPublicKey:)@<D0>(_OWORD *a1@<X8>)
{
  return sub_1D7A4F4C8((void (*)(_OWORD *__return_ptr))sub_1D7A52E40, a1);
}

double AppleIDVManager.updatePrearmTrustKeyforWatch(inKeyBlob:prognitorPublicKey:)@<D0>(_OWORD *a1@<X8>)
{
  return sub_1D7A4F4C8((void (*)(_OWORD *__return_ptr))sub_1D7A53410, a1);
}

double sub_1D7A4F4C8@<D0>(void (*a1)(_OWORD *__return_ptr)@<X4>, _OWORD *a2@<X8>)
{
  a1(v8);
  if (!v2)
  {
    double result = *(double *)v8;
    long long v5 = v8[1];
    long long v6 = v8[2];
    long long v7 = v8[3];
    *a2 = v8[0];
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t AppleIDVManager.generatePhoneToken(withNonce:aclBlob:keyBlob:keyAttestation:casdCertificate:)(void (*a1)(unsigned char *, uint64_t), unint64_t a2, uint64_t a3, void *a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10)
{
  return sub_1D7A53A80(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

unint64_t sub_1D7A4F538(uint64_t a1, unint64_t a2)
{
  return 0xD00000000000001FLL;
}

id AppleIDVManager.establishPrearmTrust(baaCertificate:)(uint64_t a1, unint64_t a2)
{
  return sub_1D7A54390(a1, a2);
}

id AppleIDVManager.generateNonceOnWatch()()
{
  return sub_1D7A54B40();
}

uint64_t AppleIDVManager.prearmCredential(withAuthorizationToken:protectedPublicKey:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_1D7A551B0(a1, a2, a3, a4);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> AppleIDVManager.revokeCredentialAuthorizationToken()()
{
}

id AppleIDVManager.persistModifiedACLBlob(_:referenceACLBlob:externalizedLAContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(char *, char *, uint64_t))
{
  id result = sub_1D7A55D58(a1, a2, a3, a4, a5);
  if (v5) {
    return (id)v7;
  }
  return result;
}

uint64_t AppleIDVManager.prepareUnboundACLForWatch(withAccessibilityEnabled:)(char a1)
{
  return sub_1D7A56564(a1);
}

id AppleIDVManager.prepareACL(aclType:aclUsage:bioUUID:)(unsigned int a1, unsigned int a2, uint64_t a3, unint64_t a4)
{
  return sub_1D7A56C10(a1, a2, a3, a4);
}

uint64_t sub_1D7A4F6D0()
{
  uint64_t result = SecAccessControlCreateFromData();
  if (result)
  {
    uint64_t v1 = (void *)result;
    sub_1D7A9CC48();
    sub_1D7A9C128();
    type metadata accessor for SecAccessControl(0);
    sub_1D7A9CE78();

    return 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> AppleIDVManager.credentialAuthenticationTokenStatus()()
{
}

uint64_t AppleIDVManager.deinit()
{
  return v0;
}

uint64_t AppleIDVManager.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

const char *sub_1D7A4F7B8()
{
  return sub_1D7A4FBF8();
}

const char *sub_1D7A4F7D0()
{
  return sub_1D7A50130();
}

const char *sub_1D7A4F7E8()
{
  return sub_1D7A50658();
}

id sub_1D7A4F800(uint64_t a1, unint64_t a2, int a3)
{
  id result = sub_1D7A50B80(a1, a2, a3);
  if (v3) {
    return (id)v5;
  }
  return result;
}

unint64_t sub_1D7A4F828(uint64_t a1, unint64_t a2)
{
  return sub_1D7A514E8(a1, a2);
}

id sub_1D7A4F840(uint64_t a1, unint64_t a2)
{
  return sub_1D7A51BB0(a1, a2);
}

id sub_1D7A4F858()
{
  return sub_1D7A52094();
}

uint64_t sub_1D7A4F870(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  return sub_1D7A525E8(a1, a2, a3, a4, a5, a6, a7);
}

double sub_1D7A4F888@<D0>(_OWORD *a1@<X8>)
{
  return sub_1D7A4F8E0((void (*)(_OWORD *__return_ptr))sub_1D7A52E40, a1);
}

double sub_1D7A4F8B4@<D0>(_OWORD *a1@<X8>)
{
  return sub_1D7A4F8E0((void (*)(_OWORD *__return_ptr))sub_1D7A53410, a1);
}

double sub_1D7A4F8E0@<D0>(void (*a1)(_OWORD *__return_ptr)@<X6>, _OWORD *a2@<X8>)
{
  a1(v8);
  if (!v2)
  {
    double result = *(double *)v8;
    long long v5 = v8[1];
    long long v6 = v8[2];
    long long v7 = v8[3];
    *a2 = v8[0];
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_1D7A4F928(void (*a1)(unsigned char *, uint64_t), unint64_t a2, uint64_t a3, void *a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10)
{
  return sub_1D7A53A80(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

id sub_1D7A4F950(uint64_t a1, unint64_t a2)
{
  return sub_1D7A54390(a1, a2);
}

id sub_1D7A4F968()
{
  return sub_1D7A54B40();
}

uint64_t sub_1D7A4F980(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_1D7A551B0(a1, a2, a3, a4);
}

uint64_t sub_1D7A4F998()
{
  return sub_1D7A5589C();
}

id sub_1D7A4F9B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(char *, char *, uint64_t))
{
  id result = sub_1D7A55D58(a1, a2, a3, a4, a5);
  if (v5) {
    return (id)v7;
  }
  return result;
}

uint64_t sub_1D7A4F9D8(char a1)
{
  return sub_1D7A56564(a1);
}

id sub_1D7A4F9F0(unsigned int a1, unsigned int a2, uint64_t a3, unint64_t a4)
{
  return sub_1D7A56C10(a1, a2, a3, a4);
}

uint64_t sub_1D7A4FA08()
{
  return sub_1D7A578D4();
}

uint64_t AppleIDVACLType.description.getter()
{
  return 0x6E776F6E6B6E55;
}

uint64_t sub_1D7A4FAD4()
{
  return AppleIDVACLType.description.getter();
}

uint64_t AppleIDVACLUseCase.description.getter(int a1)
{
  unint64_t v1 = 0xD000000000000015;
  unint64_t v2 = 0x6E776F6E6B6E55;
  if (a1 == 1) {
    unint64_t v2 = 0xD000000000000013;
  }
  if (a1 != 2) {
    unint64_t v1 = v2;
  }
  if (a1) {
    return v1;
  }
  else {
    return 0x6D746E6573657250;
  }
}

uint64_t sub_1D7A4FB68()
{
  int v1 = *v0;
  unint64_t v2 = 0xD000000000000015;
  unint64_t v3 = 0x6E776F6E6B6E55;
  if (*v0 == 1) {
    unint64_t v3 = 0xD000000000000013;
  }
  if (v1 != 2) {
    unint64_t v2 = v3;
  }
  if (v1) {
    return v2;
  }
  else {
    return 0x6D746E6573657250;
  }
}

const char *sub_1D7A4FBF8()
{
  v49[13] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  MEMORY[0x1F4188790](v0, v1, v2, v3, v4, v5, v6, v7);
  uint64_t v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DIPSignpost(0);
  MEMORY[0x1F4188790](v10 - 8, v11, v12, v13, v14, v15, v16, v17);
  uint64_t v19 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_1D7A9B5F8();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20, v22, v23, v24, v25, v26, v27, v28);
  uint64_t v30 = (char *)&v47 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v31 = __swift_project_value_buffer(v20, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v30, v31, v20);
  uint64_t v32 = sub_1D7A9B5D8();
  os_log_type_t v33 = sub_1D7A9C748();
  if (os_log_type_enabled(v32, v33))
  {
    id v34 = (uint8_t *)swift_slowAlloc();
    uint64_t v47 = v9;
    uint64_t v35 = v34;
    *(_WORD *)id v34 = 0;
    _os_log_impl(&dword_1D7853000, v32, v33, "AppleIDVManager getStatus", v34, 2u);
    uint64_t v9 = v47;
    MEMORY[0x1D947D740](v35, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v21 + 8))(v30, v20);
  if (qword_1EA8414E8 != -1) {
    swift_once();
  }
  uint64_t v36 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA845C10);
  sub_1D78912C4(v36, (uint64_t)v9);
  DIPSignpost.init(_:)(v9, (uint64_t)v19);
  v49[0] = 0;
  unint64_t v37 = self;
  id v48 = 0;
  unsigned int v38 = objc_msgSend(v37, sel_appleIDVGetStatus_andVersion_, v49, &v48);
  id v39 = v48;
  if (v38)
  {
    unsigned int v40 = v38;
    LOWORD(v48) = 301;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF8678);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1D7AA08E0;
    *(unsigned char *)(inited + 32) = 20;
    *(void *)(inited + 64) = MEMORY[0x1E4FBC4C0];
    *(_DWORD *)(inited + 40) = v40;
    id v42 = v39;
    uint64_t v9 = (const char *)sub_1D785EC20(inited);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000001CLL, 0x80000001D7ACBF70, (__int16 *)&v48, 0, (uint64_t)v9, 0xD00000000000005ALL, 0x80000001D7ACB570, v43, 0x7574617453746567, 0xEB00000000292873, 59);
    swift_willThrow();
  }
  else
  {
    if (v48)
    {
      uint64_t v9 = (const char *)v49[0];
      v48;
      DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
      sub_1D78AB48C((uint64_t)v19);
      return v9;
    }
    LOWORD(v48) = 0;
    unint64_t v45 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000003DLL, 0x80000001D7ACBF90, (__int16 *)&v48, 0, v45, 0xD00000000000005ALL, 0x80000001D7ACB570, v46, 0x7574617453746567, 0xEB00000000292873, 62);
    swift_willThrow();
  }
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  sub_1D78AB48C((uint64_t)v19);
  return v9;
}

const char *sub_1D7A50130()
{
  v50[13] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  MEMORY[0x1F4188790](v0, v1, v2, v3, v4, v5, v6, v7);
  uint64_t v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DIPSignpost(0);
  MEMORY[0x1F4188790](v10 - 8, v11, v12, v13, v14, v15, v16, v17);
  uint64_t v19 = (char *)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_1D7A9B5F8();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20, v22, v23, v24, v25, v26, v27, v28);
  uint64_t v30 = (char *)&v48 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v31 = __swift_project_value_buffer(v20, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v30, v31, v20);
  uint64_t v32 = sub_1D7A9B5D8();
  os_log_type_t v33 = sub_1D7A9C748();
  if (os_log_type_enabled(v32, v33))
  {
    id v34 = (uint8_t *)swift_slowAlloc();
    uint64_t v49 = v9;
    uint64_t v35 = v34;
    *(_WORD *)id v34 = 0;
    _os_log_impl(&dword_1D7853000, v32, v33, "AppleIDVManager prepareBioBindingUnboundACL", v34, 2u);
    uint64_t v9 = v49;
    MEMORY[0x1D947D740](v35, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v21 + 8))(v30, v20);
  if (qword_1EA8414F0 != -1) {
    swift_once();
  }
  uint64_t v36 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA845C28);
  sub_1D78912C4(v36, (uint64_t)v9);
  DIPSignpost.init(_:)(v9, (uint64_t)v19);
  unint64_t v37 = self;
  v50[0] = 0;
  unsigned int v38 = objc_msgSend(v37, sel_prepareUnboundACLForBioBinding_, v50);
  id v39 = v50[0];
  if (v38)
  {
    unsigned int v40 = v38;
    LOWORD(v50[0]) = 305;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF8678);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1D7AA08E0;
    *(unsigned char *)(inited + 32) = 20;
    *(void *)(inited + 64) = MEMORY[0x1E4FBC4C0];
    *(_DWORD *)(inited + 40) = v40;
    id v42 = v39;
    uint64_t v9 = (const char *)sub_1D785EC20(inited);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000029, 0x80000001D7ACBED0, (__int16 *)v50, 0, (uint64_t)v9, 0xD00000000000005ALL, 0x80000001D7ACB570, v43, 0xD00000000000001DLL, 0x80000001D7ACBF00, 76);
    swift_willThrow();
  }
  else
  {
    if (v50[0])
    {
      id v44 = v50[0];
      uint64_t v9 = (const char *)sub_1D7A9B028();

      DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
      sub_1D78AB48C((uint64_t)v19);
      return v9;
    }
    LOWORD(v50[0]) = 0;
    unint64_t v46 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000047, 0x80000001D7ACBF20, (__int16 *)v50, 0, v46, 0xD00000000000005ALL, 0x80000001D7ACB570, v47, 0xD00000000000001DLL, 0x80000001D7ACBF00, 79);
    swift_willThrow();
  }
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  sub_1D78AB48C((uint64_t)v19);
  return v9;
}

const char *sub_1D7A50658()
{
  v50[13] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  MEMORY[0x1F4188790](v0, v1, v2, v3, v4, v5, v6, v7);
  uint64_t v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DIPSignpost(0);
  MEMORY[0x1F4188790](v10 - 8, v11, v12, v13, v14, v15, v16, v17);
  uint64_t v19 = (char *)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_1D7A9B5F8();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20, v22, v23, v24, v25, v26, v27, v28);
  uint64_t v30 = (char *)&v48 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v31 = __swift_project_value_buffer(v20, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v30, v31, v20);
  uint64_t v32 = sub_1D7A9B5D8();
  os_log_type_t v33 = sub_1D7A9C748();
  if (os_log_type_enabled(v32, v33))
  {
    id v34 = (uint8_t *)swift_slowAlloc();
    uint64_t v49 = v9;
    uint64_t v35 = v34;
    *(_WORD *)id v34 = 0;
    _os_log_impl(&dword_1D7853000, v32, v33, "AppleIDVManager preparePasscodeBindingUnboundACL", v34, 2u);
    uint64_t v9 = v49;
    MEMORY[0x1D947D740](v35, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v21 + 8))(v30, v20);
  if (qword_1EA8414F8 != -1) {
    swift_once();
  }
  uint64_t v36 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA845C40);
  sub_1D78912C4(v36, (uint64_t)v9);
  DIPSignpost.init(_:)(v9, (uint64_t)v19);
  unint64_t v37 = self;
  v50[0] = 0;
  unsigned int v38 = objc_msgSend(v37, sel_prepareUnboundACLForPasscodeBinding_, v50);
  id v39 = v50[0];
  if (v38)
  {
    unsigned int v40 = v38;
    LOWORD(v50[0]) = 312;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF8678);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1D7AA08E0;
    *(unsigned char *)(inited + 32) = 20;
    *(void *)(inited + 64) = MEMORY[0x1E4FBC4C0];
    *(_DWORD *)(inited + 40) = v40;
    id v42 = v39;
    uint64_t v9 = (const char *)sub_1D785EC20(inited);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000002ELL, 0x80000001D7ACBE20, (__int16 *)v50, 0, (uint64_t)v9, 0xD00000000000005ALL, 0x80000001D7ACB570, v43, 0xD000000000000022, 0x80000001D7ACBE50, 92);
    swift_willThrow();
  }
  else
  {
    if (v50[0])
    {
      id v44 = v50[0];
      uint64_t v9 = (const char *)sub_1D7A9B028();

      DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
      sub_1D78AB48C((uint64_t)v19);
      return v9;
    }
    LOWORD(v50[0]) = 0;
    unint64_t v46 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000004CLL, 0x80000001D7ACBE80, (__int16 *)v50, 0, v46, 0xD00000000000005ALL, 0x80000001D7ACB570, v47, 0xD000000000000022, 0x80000001D7ACBE50, 95);
    swift_willThrow();
  }
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  sub_1D78AB48C((uint64_t)v19);
  return v9;
}

id sub_1D7A50B80(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v4 = v3;
  LODWORD(v102) = a3;
  v107[4] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v7 = sub_1D7A9B1A8();
  uint64_t v104 = *(void *)(v7 - 8);
  uint64_t v105 = v7;
  MEMORY[0x1F4188790](v7, v8, v9, v10, v11, v12, v13, v14);
  uint64_t v103 = (char *)&v93 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v100 = (id)type metadata accessor for DIPSignpost.Config(0);
  MEMORY[0x1F4188790](v100, v16, v17, v18, v19, v20, v21, v22);
  uint64_t v101 = (uint64_t)&v93 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for DIPSignpost(0);
  MEMORY[0x1F4188790](v24 - 8, v25, v26, v27, v28, v29, v30, v31);
  os_log_type_t v33 = (char *)&v93 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = sub_1D7A9B5F8();
  uint64_t v35 = *(void *)(v34 - 8);
  MEMORY[0x1F4188790](v34, v36, v37, v38, v39, v40, v41, v42);
  id v44 = (char *)&v93 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v45 = __swift_project_value_buffer(v34, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v44, v45, v34);
  sub_1D7860790(a1, a2);
  sub_1D7860790(a1, a2);
  uint64_t v46 = v34;
  uint64_t v47 = sub_1D7A9B5D8();
  os_log_type_t v48 = sub_1D7A9C748();
  if (os_log_type_enabled(v47, v48))
  {
    id v96 = (char *)v46;
    uint64_t v49 = (uint8_t *)swift_slowAlloc();
    unint64_t v95 = (void *)swift_slowAlloc();
    v107[0] = v95;
    id v99 = (id)a2;
    uint64_t v94 = v49;
    *(_DWORD *)uint64_t v49 = 136315138;
    unsigned __int8 v93 = v49 + 4;
    uint64_t v50 = (void *)sub_1D79F1750(a1, (unint64_t)v99);
    uint64_t v98 = v33;
    uint64_t v97 = v3;
    id v106 = v50;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF7900);
    sub_1D78AC5E4();
    uint64_t v51 = sub_1D7A9BF38();
    unint64_t v53 = v52;
    os_log_type_t v33 = v98;
    swift_bridgeObjectRelease();
    id v106 = (id)sub_1D7923300(v51, v53, (uint64_t *)v107);
    unint64_t v54 = (unint64_t)v99;
    sub_1D7A9C9E8();
    uint64_t v4 = v97;
    swift_bridgeObjectRelease();
    sub_1D78607E8(a1, v54);
    sub_1D78607E8(a1, v54);
    uint64_t v55 = v94;
    _os_log_impl(&dword_1D7853000, v47, v48, "AppleIDVManager persistACLBlob aclBlob: %s", v94, 0xCu);
    uint64_t v56 = v95;
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v56, -1, -1);
    MEMORY[0x1D947D740](v55, -1, -1);

    (*(void (**)(char *, char *))(v35 + 8))(v44, v96);
  }
  else
  {
    sub_1D78607E8(a1, a2);
    sub_1D78607E8(a1, a2);

    (*(void (**)(char *, uint64_t))(v35 + 8))(v44, v46);
  }
  if (qword_1EA841500 != -1) {
    swift_once();
  }
  uint64_t v57 = __swift_project_value_buffer((uint64_t)v100, (uint64_t)qword_1EA845C58);
  uint64_t v58 = (const char *)v101;
  sub_1D78912C4(v57, v101);
  DIPSignpost.init(_:)(v58, (uint64_t)v33);
  uint64_t v59 = (void *)sub_1D7A9AFF8();
  uint64_t v60 = self;
  v107[0] = 0;
  id v106 = 0;
  unsigned int v61 = objc_msgSend(v60, sel_appleIDVPersistACLBlob_intoBlob_returnBioUUIDs_andRequireDoublePress_, v59, v107, &v106, v102 & 1);

  id v62 = v106;
  id v63 = v107[0];
  if (v61)
  {
    LOWORD(v107[0]) = 302;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF8678);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1D7AA08E0;
    *(unsigned char *)(inited + 32) = 20;
    *(void *)(inited + 64) = MEMORY[0x1E4FBC4C0];
    *(_DWORD *)(inited + 40) = v61;
    id v65 = v62;
    id v66 = v63;
    unint64_t v67 = sub_1D785EC20(inited);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000021, 0x80000001D7ACBD80, (__int16 *)v107, 0, v67, 0xD00000000000005ALL, 0x80000001D7ACB570, v68, 0xD000000000000026, 0x80000001D7ACBDB0, 110);
    swift_willThrow();

LABEL_10:
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    sub_1D78AB48C((uint64_t)v33);
    return v63;
  }
  if (!v107[0])
  {
    LOWORD(v107[0]) = 0;
    id v87 = v106;
    unint64_t v88 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000003FLL, 0x80000001D7ACBDE0, (__int16 *)v107, 0, v88, 0xD00000000000005ALL, 0x80000001D7ACB570, v89, 0xD000000000000026, 0x80000001D7ACBDB0, 113);
    swift_willThrow();
    goto LABEL_10;
  }
  if (v106)
  {
    v107[0] = 0;
    id v69 = v106;
    id v70 = v63;
    id v71 = v69;
    id v72 = v70;
    sub_1D7A9C308();

    uint64_t v73 = (char *)v107[0];
    if (v107[0])
    {
      uint64_t v98 = v33;
      int64_t v74 = *((void *)v107[0] + 2);
      if (v74)
      {
        id v99 = v63;
        id v100 = v62;
        uint64_t v97 = v4;
        v107[0] = (id)MEMORY[0x1E4FBC860];
        sub_1D78AB4E8(0, v74, 0);
        id v102 = *(void (**)(char *, char *, uint64_t))(v104 + 16);
        unint64_t v75 = (*(unsigned __int8 *)(v104 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v104 + 80);
        id v96 = v73;
        uint64_t v76 = &v73[v75];
        uint64_t v101 = *(void *)(v104 + 72);
        v104 += 16;
        uint64_t v77 = (void (**)(char *, uint64_t))(v104 - 8);
        do
        {
          uint64_t v78 = v103;
          uint64_t v79 = v105;
          v102(v103, v76, v105);
          uint64_t v80 = sub_1D7A9B158();
          uint64_t v82 = v81;
          (*v77)(v78, v79);
          uint64_t v83 = v107[0];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1D78AB4E8(0, v83[2] + 1, 1);
            uint64_t v83 = v107[0];
          }
          unint64_t v85 = v83[2];
          unint64_t v84 = v83[3];
          if (v85 >= v84 >> 1)
          {
            sub_1D78AB4E8(v84 > 1, v85 + 1, 1);
            uint64_t v83 = v107[0];
          }
          v83[2] = v85 + 1;
          id v86 = (char *)&v83[2 * v85];
          *((void *)v86 + 4) = v80;
          *((void *)v86 + 5) = v82;
          v76 += v101;
          --v74;
        }
        while (v74);
        swift_bridgeObjectRelease();
        os_log_type_t v33 = v98;
        id v62 = v100;
        id v63 = v99;
      }
      else
      {
        swift_bridgeObjectRelease();
        os_log_type_t v33 = v98;
      }
    }
  }
  else
  {
    id v90 = v107[0];
  }
  id v91 = v63;
  id v63 = (id)sub_1D7A9B028();

  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  sub_1D78AB48C((uint64_t)v33);
  return v63;
}

unint64_t sub_1D7A514E8(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  v71[4] = *MEMORY[0x1E4F143B8];
  uint64_t v69 = sub_1D7A9B1A8();
  uint64_t v67 = *(void *)(v69 - 8);
  MEMORY[0x1F4188790](v69, v6, v7, v8, v9, v10, v11, v12);
  uint64_t v68 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1D7A9B5F8();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14, v16, v17, v18, v19, v20, v21, v22);
  uint64_t v24 = (char *)&v61 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v25 = __swift_project_value_buffer(v14, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v24, v25, v14);
  sub_1D7860790(a1, a2);
  sub_1D7860790(a1, a2);
  uint64_t v26 = sub_1D7A9B5D8();
  os_log_type_t v27 = sub_1D7A9C748();
  int v28 = v27;
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v29 = swift_slowAlloc();
    LODWORD(v63) = v28;
    uint64_t v30 = (uint8_t *)v29;
    uint64_t v64 = swift_slowAlloc();
    v71[0] = v64;
    id v62 = v30;
    *(_DWORD *)uint64_t v30 = 136315138;
    unsigned int v61 = v30 + 4;
    uint64_t v31 = sub_1D79F1750(a1, a2);
    uint64_t v65 = v15;
    uint64_t v66 = v14;
    uint64_t v70 = v31;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF7900);
    sub_1D78AC5E4();
    uint64_t v32 = sub_1D7A9BF38();
    unint64_t v34 = v33;
    swift_bridgeObjectRelease();
    uint64_t v70 = sub_1D7923300(v32, v34, v71);
    sub_1D7A9C9E8();
    uint64_t v3 = v2;
    swift_bridgeObjectRelease();
    sub_1D78607E8(a1, a2);
    sub_1D78607E8(a1, a2);
    uint64_t v35 = v62;
    _os_log_impl(&dword_1D7853000, v26, (os_log_type_t)v63, "AppleIDVManager getUUIDsFromACL aclBlob: %s", v62, 0xCu);
    uint64_t v36 = v64;
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v36, -1, -1);
    MEMORY[0x1D947D740](v35, -1, -1);

    (*(void (**)(char *, uint64_t))(v65 + 8))(v24, v66);
  }
  else
  {
    sub_1D78607E8(a1, a2);
    sub_1D78607E8(a1, a2);

    (*(void (**)(char *, uint64_t))(v15 + 8))(v24, v14);
  }
  uint64_t v37 = self;
  uint64_t v38 = (void *)sub_1D7A9AFF8();
  v71[0] = 0;
  unsigned int v39 = objc_msgSend(v37, sel_getUUIDsFromACL_intoArray_, v38, v71);

  uint64_t v40 = (void *)v71[0];
  if (v39)
  {
    LOWORD(v71[0]) = 318;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF8678);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1D7AA08E0;
    *(unsigned char *)(inited + 32) = 20;
    *(void *)(inited + 64) = MEMORY[0x1E4FBC4C0];
    *(_DWORD *)(inited + 40) = v39;
    id v42 = v40;
    unint64_t v43 = sub_1D785EC20(inited);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000001ALL, 0x80000001D7ACBD40, (__int16 *)v71, 0, v43, 0xD00000000000005ALL, 0x80000001D7ACB570, v44, 0xD000000000000013, 0x80000001D7ACBD60, 128);
    swift_willThrow();
  }
  else
  {
    if (v71[0]
      && (v71[0] = 0, id v45 = v40, sub_1D7A9C308(), v45, (v46 = v71[0]) != 0))
    {
      int64_t v47 = *(void *)(v71[0] + 16);
      if (v47)
      {
        uint64_t v64 = (uint64_t)v40;
        uint64_t v65 = v3;
        v71[0] = MEMORY[0x1E4FBC860];
        sub_1D78AB4E8(0, v47, 0);
        uint64_t v48 = v67 + 16;
        uint64_t v67 = *(void *)(v67 + 16);
        unint64_t v49 = (*(unsigned __int8 *)(v48 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 64);
        uint64_t v63 = v46;
        unint64_t v50 = v46 + v49;
        uint64_t v66 = *(void *)(v48 + 56);
        uint64_t v51 = (void (**)(char *, uint64_t))(v48 - 8);
        do
        {
          unint64_t v52 = v68;
          uint64_t v53 = v69;
          ((void (*)(char *, unint64_t, uint64_t))v67)(v68, v50, v69);
          uint64_t v54 = sub_1D7A9B158();
          uint64_t v56 = v55;
          (*v51)(v52, v53);
          unint64_t v43 = v71[0];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1D78AB4E8(0, *(void *)(v43 + 16) + 1, 1);
            unint64_t v43 = v71[0];
          }
          unint64_t v58 = *(void *)(v43 + 16);
          unint64_t v57 = *(void *)(v43 + 24);
          if (v58 >= v57 >> 1)
          {
            sub_1D78AB4E8(v57 > 1, v58 + 1, 1);
            unint64_t v43 = v71[0];
          }
          *(void *)(v43 + 16) = v58 + 1;
          unint64_t v59 = v43 + 16 * v58;
          *(void *)(v59 + 32) = v54;
          *(void *)(v59 + 40) = v56;
          v50 += v66;
          --v47;
        }
        while (v47);
        swift_bridgeObjectRelease();
        uint64_t v40 = (void *)v64;
      }
      else
      {
        swift_bridgeObjectRelease();
        unint64_t v43 = MEMORY[0x1E4FBC860];
      }
    }
    else
    {
      unint64_t v43 = 0;
    }
  }
  return v43;
}

id sub_1D7A51BB0(uint64_t a1, unint64_t a2)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = sub_1D7A9B5F8();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7, v8, v9, v10, v11, v12, v13);
  uint64_t v15 = (char *)v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v16 = __swift_project_value_buffer(v5, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v15, v16, v5);
  sub_1D7860790(a1, a2);
  sub_1D7860790(a1, a2);
  uint64_t v17 = sub_1D7A9B5D8();
  os_log_type_t v18 = sub_1D7A9C748();
  int v19 = v18;
  if (os_log_type_enabled(v17, v18))
  {
    int v40 = v19;
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v39 = swift_slowAlloc();
    *(void *)&long long v43 = v39;
    uint64_t v41 = v5;
    uint64_t v38 = v20;
    *(_DWORD *)uint64_t v20 = 136315138;
    v37[1] = v20 + 4;
    uint64_t v21 = sub_1D79F1750(a1, a2);
    v37[0] = v2;
    uint64_t v42 = v21;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF7900);
    sub_1D78AC5E4();
    uint64_t v22 = sub_1D7A9BF38();
    unint64_t v24 = v23;
    swift_bridgeObjectRelease();
    uint64_t v42 = sub_1D7923300(v22, v24, (uint64_t *)&v43);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease();
    sub_1D78607E8(a1, a2);
    sub_1D78607E8(a1, a2);
    uint64_t v25 = v38;
    _os_log_impl(&dword_1D7853000, v17, (os_log_type_t)v40, "AppleIDVManager requireDoublePressOnACL aclBlob: %s", v38, 0xCu);
    uint64_t v26 = v39;
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v26, -1, -1);
    MEMORY[0x1D947D740](v25, -1, -1);

    (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v41);
  }
  else
  {
    sub_1D78607E8(a1, a2);
    sub_1D78607E8(a1, a2);

    (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v5);
  }
  os_log_type_t v27 = self;
  int v28 = (void *)sub_1D7A9AFF8();
  *(void *)&long long v43 = 0;
  unsigned int v29 = objc_msgSend(v27, sel_requireDoublePressOnACL_intoACL_, v28, &v43);

  uint64_t v30 = (void *)v43;
  if (v29)
  {
    LOWORD(v43) = 319;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF8678);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1D7AA08E0;
    *(unsigned char *)(inited + 32) = 20;
    *(void *)(inited + 64) = MEMORY[0x1E4FBC4C0];
    *(_DWORD *)(inited + 40) = v29;
    id v32 = v30;
    unint64_t v33 = sub_1D785EC20(inited);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000021, 0x80000001D7ACBCF0, (__int16 *)&v43, 0, v33, 0xD00000000000005ALL, 0x80000001D7ACB570, v34, 0xD00000000000001BLL, 0x80000001D7ACBD20, 141);
    swift_willThrow();
  }
  else if ((void)v43)
  {
    long long v43 = xmmword_1D7AA0AC0;
    id v35 = v30;
    sub_1D7A9B018();

    id v32 = (id)v43;
  }
  else
  {
    return 0;
  }
  return v32;
}

id sub_1D7A52094()
{
  v51[13] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v50 = type metadata accessor for DIPSignpost.Config(0);
  MEMORY[0x1F4188790](v50, v0, v1, v2, v3, v4, v5, v6);
  uint64_t v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DIPSignpost(0);
  MEMORY[0x1F4188790](v9 - 8, v10, v11, v12, v13, v14, v15, v16);
  os_log_type_t v18 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_1D7A9B5F8();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19, v21, v22, v23, v24, v25, v26, v27);
  unsigned int v29 = (char *)&v48 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v30 = __swift_project_value_buffer(v19, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v29, v30, v19);
  uint64_t v31 = sub_1D7A9B5D8();
  os_log_type_t v32 = sub_1D7A9C748();
  if (os_log_type_enabled(v31, v32))
  {
    unint64_t v33 = (uint8_t *)swift_slowAlloc();
    unint64_t v49 = v8;
    uint64_t v34 = v33;
    *(_WORD *)unint64_t v33 = 0;
    _os_log_impl(&dword_1D7853000, v31, v32, "AppleIDVManager recovePersistedACLBlob", v33, 2u);
    uint64_t v8 = v49;
    MEMORY[0x1D947D740](v34, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v20 + 8))(v29, v19);
  if (qword_1EA841508 != -1) {
    swift_once();
  }
  uint64_t v35 = __swift_project_value_buffer(v50, (uint64_t)qword_1EA845C70);
  sub_1D78912C4(v35, (uint64_t)v8);
  DIPSignpost.init(_:)(v8, (uint64_t)v18);
  uint64_t v36 = self;
  uint64_t v37 = (void *)sub_1D7A9AFF8();
  v51[0] = 0;
  id v38 = objc_msgSend(v36, sel_appleIDVRecoverPersistedACLBlob_intoBlob_, v37, v51);

  id v39 = v51[0];
  if (v38)
  {
    LOWORD(v51[0]) = 303;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF8678);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1D7AA08E0;
    *(unsigned char *)(inited + 32) = 20;
    *(void *)(inited + 64) = MEMORY[0x1E4FBC4C0];
    *(_DWORD *)(inited + 40) = v38;
    id v41 = v39;
    unint64_t v42 = sub_1D785EC20(inited);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000027, 0x80000001D7ACBC50, (__int16 *)v51, 0, v42, 0xD00000000000005ALL, 0x80000001D7ACB570, v43, 0xD00000000000001ELL, 0x80000001D7ACBC80, 155);
    swift_willThrow();
  }
  else
  {
    if (v51[0])
    {
      id v44 = v51[0];
      id v38 = (id)sub_1D7A9B028();

      DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
      sub_1D78AB48C((uint64_t)v18);
      return v38;
    }
    LOWORD(v51[0]) = 0;
    unint64_t v46 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000045, 0x80000001D7ACBCA0, (__int16 *)v51, 0, v46, 0xD00000000000005ALL, 0x80000001D7ACB570, v47, 0xD00000000000001ELL, 0x80000001D7ACBC80, 158);
    swift_willThrow();
  }
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  sub_1D78AB48C((uint64_t)v18);
  return v38;
}

uint64_t sub_1D7A525E8(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v91 = a5;
  unint64_t v95 = a2;
  uint64_t v88 = type metadata accessor for DIPSignpost.Config(0);
  MEMORY[0x1F4188790](v88, v12, v13, v14, v15, v16, v17, v18);
  uint64_t v20 = (char *)v80 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DIPSignpost(0);
  MEMORY[0x1F4188790](v21 - 8, v22, v23, v24, v25, v26, v27, v28);
  uint64_t v94 = (uint64_t)v80 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = sub_1D7A9B5F8();
  uint64_t v93 = *(void *)(v30 - 8);
  MEMORY[0x1F4188790](v30, v31, v32, v33, v34, v35, v36, v37);
  unint64_t v92 = (char *)v80 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v39 = __swift_project_value_buffer(v30, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  int v40 = *(void (**)(char *, uint64_t, uint64_t))(v93 + 16);
  uint64_t v87 = v30;
  v40(v92, v39, v30);
  unint64_t v41 = v95;
  sub_1D7860790(a1, v95);
  sub_1D7860790(a3, a4);
  sub_1D7860790(a6, a7);
  sub_1D7860790(a1, v41);
  sub_1D7860790(a3, a4);
  sub_1D7860790(a6, a7);
  unint64_t v42 = sub_1D7A9B5D8();
  os_log_type_t v43 = sub_1D7A9C748();
  int v44 = v43;
  uint64_t v45 = a3;
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v46 = swift_slowAlloc();
    unint64_t v90 = a4;
    uint64_t v47 = v46;
    uint64_t v83 = swift_slowAlloc();
    uint64_t v97 = v83;
    *(_DWORD *)uint64_t v47 = 136315906;
    os_log_t v82 = v42;
    v80[0] = v47 + 4;
    unint64_t v48 = v95;
    uint64_t v49 = v89;
    uint64_t v50 = sub_1D79F1750(a1, v95);
    unint64_t v84 = v20;
    uint64_t v89 = v49;
    uint64_t v96 = v50;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF7900);
    sub_1D78AC5E4();
    unint64_t v86 = a7;
    int v81 = v44;
    uint64_t v51 = sub_1D7A9BF38();
    uint64_t v85 = a6;
    unint64_t v53 = v52;
    swift_bridgeObjectRelease();
    uint64_t v96 = sub_1D7923300(v51, v53, &v97);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease();
    v80[1] = a1;
    sub_1D78607E8(a1, v48);
    sub_1D78607E8(a1, v48);
    *(_WORD *)(v47 + 12) = 2080;
    uint64_t v54 = v89;
    uint64_t v55 = sub_1D79F1750(a3, v90);
    uint64_t v89 = v54;
    uint64_t v96 = v55;
    uint64_t v56 = sub_1D7A9BF38();
    unint64_t v58 = v57;
    swift_bridgeObjectRelease();
    uint64_t v96 = sub_1D7923300(v56, v58, &v97);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease();
    sub_1D78607E8(a3, v90);
    sub_1D78607E8(a3, v90);
    *(_WORD *)(v47 + 22) = 2048;
    uint64_t v96 = v91;
    sub_1D7A9C9E8();
    *(_WORD *)(v47 + 32) = 2080;
    uint64_t v59 = v89;
    uint64_t v60 = sub_1D79F1750(v85, v86);
    uint64_t v89 = v59;
    uint64_t v96 = v60;
    uint64_t v61 = sub_1D7A9BF38();
    unint64_t v63 = v62;
    swift_bridgeObjectRelease();
    uint64_t v96 = sub_1D7923300(v61, v63, &v97);
    uint64_t v64 = v85;
    uint64_t v20 = v84;
    sub_1D7A9C9E8();
    unint64_t v65 = v86;
    swift_bridgeObjectRelease();
    sub_1D78607E8(v64, v65);
    sub_1D78607E8(v64, v65);
    os_log_t v66 = v82;
    _os_log_impl(&dword_1D7853000, v82, (os_log_type_t)v81, "AppleIDVManager authorizePresentmentForSignature aclBlob = %s externalizedLAContext = %s seSlot = %ld payloadDigest = %s", (uint8_t *)v47, 0x2Au);
    uint64_t v67 = v83;
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v67, -1, -1);
    MEMORY[0x1D947D740](v47, -1, -1);
  }
  else
  {
    unint64_t v68 = v95;
    sub_1D78607E8(a1, v95);
    sub_1D78607E8(a1, v68);
    sub_1D78607E8(v45, a4);
    sub_1D78607E8(v45, a4);
    sub_1D78607E8(a6, a7);
    sub_1D78607E8(a6, a7);
  }
  (*(void (**)(char *, uint64_t))(v93 + 8))(v92, v87);
  if (qword_1EA841510 != -1) {
    swift_once();
  }
  uint64_t v69 = __swift_project_value_buffer(v88, (uint64_t)qword_1EA845C88);
  sub_1D78912C4(v69, (uint64_t)v20);
  DIPSignpost.init(_:)(v20, v94);
  uint64_t v70 = self;
  id v71 = (void *)sub_1D7A9AFF8();
  id v72 = (void *)sub_1D7A9AFF8();
  uint64_t v73 = (void *)sub_1D7A9AFF8();
  unsigned int v74 = objc_msgSend(v70, sel_appleIDVAuthorizePresentment_withLAContextData_onSESlot_andPayloadDigest_, v71, v72, v91, v73);

  if (v74)
  {
    LOWORD(v97) = 304;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF8678);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1D7AA08E0;
    *(unsigned char *)(inited + 32) = 20;
    *(void *)(inited + 64) = MEMORY[0x1E4FBC4C0];
    *(_DWORD *)(inited + 40) = v74;
    unint64_t v76 = sub_1D785EC20(inited);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000027, 0x80000001D7ACBBC0, (__int16 *)&v97, 0, v76, 0xD00000000000005ALL, 0x80000001D7ACB570, v77, 0xD000000000000055, 0x80000001D7ACBBF0, 171);
    swift_willThrow();
  }
  uint64_t v78 = v94;
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  return sub_1D78AB48C(v78);
}

uint64_t sub_1D7A52E40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v89 = a3;
  unint64_t v90 = a4;
  uint64_t v87 = a1;
  uint64_t v88 = a2;
  v94[13] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = type metadata accessor for DIPSignpost.Config(0);
  MEMORY[0x1F4188790](v6, v7, v8, v9, v10, v11, v12, v13);
  uint64_t v15 = (char *)v86 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DIPSignpost(0);
  MEMORY[0x1F4188790](v16 - 8, v17, v18, v19, v20, v21, v22, v23);
  uint64_t v25 = (char *)v86 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_1D7A9B5F8();
  uint64_t v27 = *(void *)(v26 - 8);
  MEMORY[0x1F4188790](v26, v28, v29, v30, v31, v32, v33, v34);
  uint64_t v36 = (char *)v86 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v37 = __swift_project_value_buffer(v26, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v36, v37, v26);
  uint64_t v38 = sub_1D7A9B5D8();
  os_log_type_t v39 = sub_1D7A9C748();
  if (os_log_type_enabled(v38, v39))
  {
    int v40 = (uint8_t *)swift_slowAlloc();
    v86[0] = v15;
    uint64_t v41 = v6;
    unint64_t v42 = a5;
    os_log_type_t v43 = v25;
    int v44 = v40;
    *(_WORD *)int v40 = 0;
    _os_log_impl(&dword_1D7853000, v38, v39, "AppleIDVManager generatePrearmTrustKeyforWatchAndCopyPublicKey", v40, 2u);
    uint64_t v45 = v44;
    uint64_t v25 = v43;
    a5 = v42;
    uint64_t v6 = v41;
    uint64_t v15 = (const char *)v86[0];
    MEMORY[0x1D947D740](v45, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v27 + 8))(v36, v26);
  if (qword_1EA841518 != -1) {
    swift_once();
  }
  uint64_t v46 = __swift_project_value_buffer(v6, (uint64_t)qword_1EA845CA0);
  sub_1D78912C4(v46, (uint64_t)v15);
  DIPSignpost.init(_:)(v15, (uint64_t)v25);
  uint64_t v47 = self;
  unint64_t v48 = (void *)sub_1D7A9AFF8();
  uint64_t v49 = (void *)sub_1D7A9AFF8();
  uint64_t v93 = 0;
  v94[0] = 0;
  id v91 = 0;
  unint64_t v92 = 0;
  unsigned int v50 = objc_msgSend(v47, sel_appleIDVGeneratePrearmTrustKeyForWatchAndCopyPrivateKey_progenitorPublicKey_encryptedPrivateKey_attestation_publicKey_keyBlob_, v48, v49, v94, &v93, &v92, &v91);

  id v51 = v91;
  unint64_t v52 = v92;
  unint64_t v53 = v93;
  uint64_t v54 = (void *)v94[0];
  if (!v50 && v94[0] && v93 && v92 && v91)
  {
    id v55 = v91;
    id v56 = v52;
    unint64_t v90 = v25;
    id v57 = v56;
    id v58 = v53;
    id v59 = v54;
    id v60 = v58;
    id v61 = v57;
    id v62 = v55;
    uint64_t v63 = sub_1D7A9B028();
    uint64_t v88 = v64;
    uint64_t v89 = v63;
    id v65 = v60;
    uint64_t v87 = sub_1D7A9B028();
    v86[0] = v66;

    id v67 = v61;
    uint64_t v68 = sub_1D7A9B028();
    uint64_t v70 = v69;

    id v71 = v62;
    uint64_t v72 = sub_1D7A9B028();
    uint64_t v74 = v73;

    uint64_t v75 = (uint64_t)v90;
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    uint64_t result = sub_1D78AB48C(v75);
    uint64_t v77 = v88;
    *a5 = v89;
    a5[1] = v77;
    uint64_t v78 = v86[0];
    a5[2] = v87;
    a5[3] = v78;
    a5[4] = v68;
    a5[5] = v70;
    a5[6] = v72;
    a5[7] = v74;
  }
  else
  {
    LOWORD(v94[0]) = 315;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF8678);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1D7AA08E0;
    *(unsigned char *)(inited + 32) = 20;
    *(void *)(inited + 64) = MEMORY[0x1E4FBC4C0];
    *(_DWORD *)(inited + 40) = v50;
    id v80 = v51;
    id v81 = v52;
    id v82 = v53;
    id v83 = v54;
    unint64_t v84 = sub_1D785EC20(inited);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000039, 0x80000001D7ACBB30, (__int16 *)v94, 0, v84, 0xD00000000000005ALL, 0x80000001D7ACB570, v85, 0xD000000000000049, 0x80000001D7ACBB70, 196);
    swift_willThrow();

    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    return sub_1D78AB48C((uint64_t)v25);
  }
  return result;
}

uint64_t sub_1D7A53410@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v93 = a1;
  uint64_t v94 = a2;
  unint64_t v90 = a5;
  v98[4] = *MEMORY[0x1E4F143B8];
  uint64_t v92 = type metadata accessor for DIPSignpost.Config(0);
  MEMORY[0x1F4188790](v92, v7, v8, v9, v10, v11, v12, v13);
  uint64_t v15 = (char *)&v86 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DIPSignpost(0);
  MEMORY[0x1F4188790](v16 - 8, v17, v18, v19, v20, v21, v22, v23);
  uint64_t v25 = (char *)&v86 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_1D7A9B5F8();
  uint64_t v27 = *(void *)(v26 - 8);
  MEMORY[0x1F4188790](v26, v28, v29, v30, v31, v32, v33, v34);
  uint64_t v36 = (char *)&v86 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v37 = __swift_project_value_buffer(v26, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v36, v37, v26);
  uint64_t v38 = sub_1D7A9B5D8();
  os_log_type_t v39 = sub_1D7A9C748();
  BOOL v40 = os_log_type_enabled(v38, v39);
  id v91 = v25;
  if (v40)
  {
    uint64_t v87 = v15;
    uint64_t v41 = swift_slowAlloc();
    uint64_t v89 = a4;
    unint64_t v42 = (uint8_t *)v41;
    uint64_t v43 = swift_slowAlloc();
    v98[0] = v43;
    uint64_t v88 = a3;
    *(_DWORD *)unint64_t v42 = 136315138;
    uint64_t v97 = sub_1D7923300(0xD00000000000003BLL, 0x80000001D7ACBAA0, v98);
    uint64_t v15 = v87;
    sub_1D7A9C9E8();
    _os_log_impl(&dword_1D7853000, v38, v39, "AppleIDVManager %s", v42, 0xCu);
    swift_arrayDestroy();
    uint64_t v44 = v43;
    uint64_t v25 = v91;
    MEMORY[0x1D947D740](v44, -1, -1);
    MEMORY[0x1D947D740](v42, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v27 + 8))(v36, v26);
  if (qword_1EA841520 != -1) {
    swift_once();
  }
  uint64_t v45 = __swift_project_value_buffer(v92, (uint64_t)qword_1EA845CB8);
  sub_1D78912C4(v45, (uint64_t)v15);
  DIPSignpost.init(_:)(v15, (uint64_t)v25);
  uint64_t v46 = self;
  uint64_t v47 = (void *)sub_1D7A9AFF8();
  unint64_t v48 = (void *)sub_1D7A9AFF8();
  v98[0] = 0;
  uint64_t v96 = 0;
  uint64_t v97 = 0;
  id v95 = 0;
  unsigned int v49 = objc_msgSend(v46, sel_appleIDVUpdatePrearmTrustKeyForWatch_progenitorPublicKey_encryptedPrivateKey_attestation_publicKey_keyBlob_, v47, v48, v98, &v97, &v96, &v95);

  id v50 = v95;
  id v51 = v96;
  unint64_t v52 = (void *)v97;
  unint64_t v53 = (void *)v98[0];
  if (!v49 && v98[0] && v97 && v96 && v95)
  {
    id v54 = v95;
    id v55 = v51;
    id v56 = v52;
    id v57 = v53;
    id v58 = v56;
    id v59 = v55;
    id v60 = v54;
    uint64_t v61 = sub_1D7A9B028();
    uint64_t v93 = v62;
    uint64_t v94 = v61;
    id v63 = v58;
    uint64_t v64 = sub_1D7A9B028();
    uint64_t v92 = v65;

    id v66 = v59;
    uint64_t v67 = sub_1D7A9B028();
    uint64_t v69 = v68;

    id v70 = v60;
    uint64_t v71 = sub_1D7A9B028();
    uint64_t v73 = v72;

    uint64_t v74 = (uint64_t)v91;
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    uint64_t result = sub_1D78AB48C(v74);
    unint64_t v76 = v90;
    uint64_t v77 = v93;
    *unint64_t v90 = v94;
    v76[1] = v77;
    uint64_t v78 = v92;
    v76[2] = v64;
    v76[3] = v78;
    v76[4] = v67;
    v76[5] = v69;
    v76[6] = v71;
    v76[7] = v73;
  }
  else
  {
    LOWORD(v98[0]) = 320;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF8678);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1D7AA08E0;
    *(unsigned char *)(inited + 32) = 20;
    *(void *)(inited + 64) = MEMORY[0x1E4FBC4C0];
    *(_DWORD *)(inited + 40) = v49;
    id v80 = v50;
    id v81 = v51;
    id v82 = v52;
    id v83 = v53;
    unint64_t v84 = sub_1D785EC20(inited);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000046, 0x80000001D7ACBAE0, (__int16 *)v98, 0, v84, 0xD00000000000005ALL, 0x80000001D7ACB570, v85, 0xD00000000000003BLL, 0x80000001D7ACBAA0, 224);
    swift_willThrow();

    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    return sub_1D78AB48C((uint64_t)v25);
  }
  return result;
}

uint64_t sub_1D7A53A80(void (*a1)(unsigned char *, uint64_t), unint64_t a2, uint64_t a3, void *a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10)
{
  unint64_t v103 = a8;
  uint64_t v99 = a7;
  uint64_t v107 = (uint8_t *)a3;
  uint64_t v108 = a4;
  v111[4] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v109 = sub_1D7A9B5F8();
  uint64_t v14 = *(void *)(v109 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v109, v15, v16, v17, v18, v19, v20, v21);
  id v100 = &v93[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v31 = MEMORY[0x1F4188790](v22, v24, v25, v26, v27, v28, v29, v30);
  uint64_t v101 = &v93[-v32];
  MEMORY[0x1F4188790](v31, v33, v34, v35, v36, v37, v38, v39);
  uint64_t v41 = &v93[-v40];
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v42 = v109;
  uint64_t v43 = __swift_project_value_buffer(v109, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  uint64_t v44 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v14 + 16);
  uint64_t v105 = v14 + 16;
  uint64_t v106 = v43;
  uint64_t v104 = v44;
  v44(v41, v43, v42);
  sub_1D7860790((uint64_t)a1, a2);
  uint64_t v46 = (uint64_t)v107;
  unint64_t v45 = (unint64_t)v108;
  sub_1D7860790((uint64_t)v107, (unint64_t)v108);
  sub_1D7860790(a5, a6);
  sub_1D7860790((uint64_t)a1, a2);
  sub_1D7860790(v46, v45);
  sub_1D7860790(a5, a6);
  uint64_t v47 = sub_1D7A9B5D8();
  os_log_type_t v48 = sub_1D7A9C748();
  int v49 = v48;
  if (os_log_type_enabled(v47, v48))
  {
    uint64_t v50 = swift_slowAlloc();
    uint64_t v98 = v14;
    os_log_t v95 = v47;
    uint64_t v51 = v50;
    uint64_t v96 = (void *)swift_slowAlloc();
    v111[0] = v96;
    *(_DWORD *)uint64_t v51 = 136315650;
    int v94 = v49;
    uint64_t v52 = sub_1D7A9B008();
    uint64_t v97 = v41;
    uint64_t v110 = sub_1D7923300(v52, v53, (uint64_t *)v111);
    uint64_t v55 = (uint64_t)v107;
    unint64_t v54 = (unint64_t)v108;
    id v102 = a1;
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease();
    sub_1D78607E8((uint64_t)v102, a2);
    sub_1D78607E8((uint64_t)v102, a2);
    *(_WORD *)(v51 + 12) = 2080;
    uint64_t v56 = sub_1D7A9B008();
    uint64_t v110 = sub_1D7923300(v56, v57, (uint64_t *)v111);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease();
    sub_1D78607E8(v55, v54);
    sub_1D78607E8(v55, v54);
    *(_WORD *)(v51 + 22) = 2080;
    uint64_t v58 = sub_1D7A9B008();
    uint64_t v110 = sub_1D7923300(v58, v59, (uint64_t *)v111);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease();
    sub_1D78607E8(a5, a6);
    sub_1D78607E8(a5, a6);
    os_log_t v60 = v95;
    _os_log_impl(&dword_1D7853000, v95, (os_log_type_t)v94, "AppleIDVManager generatePhoneToken nonce: %s aclBlob: %s, keyBlob: %s", (uint8_t *)v51, 0x20u);
    uint64_t v61 = v96;
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v61, -1, -1);
    MEMORY[0x1D947D740](v51, -1, -1);

    uint64_t v62 = *(void (**)(unsigned char *, uint64_t))(v98 + 8);
    uint64_t v63 = (v98 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v62(v97, v109);
  }
  else
  {
    sub_1D78607E8((uint64_t)a1, a2);
    sub_1D78607E8((uint64_t)a1, a2);
    uint64_t v65 = (uint64_t)v107;
    unint64_t v64 = (unint64_t)v108;
    sub_1D78607E8((uint64_t)v107, (unint64_t)v108);
    sub_1D78607E8(v65, v64);
    sub_1D78607E8(a5, a6);
    sub_1D78607E8(a5, a6);

    uint64_t v62 = *(void (**)(unsigned char *, uint64_t))(v14 + 8);
    uint64_t v63 = (v14 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v62(v41, v109);
  }
  uint64_t v66 = (uint64_t)v101;
  uint64_t v67 = v109;
  v104(v101, v106, v109);
  sub_1D7860790(a5, a6);
  sub_1D7925B80(v66, a5, a6);
  sub_1D78607E8(a5, a6);
  id v102 = v62;
  uint64_t v101 = (unsigned char *)v63;
  v62((unsigned char *)v66, v67);
  uint64_t v68 = (void *)sub_1D7A9AFF8();
  uint64_t v69 = (void *)sub_1D7A9AFF8();
  id v70 = (void *)sub_1D7A9AFF8();
  if (v103 >> 60 == 15) {
    uint64_t v71 = 0;
  }
  else {
    uint64_t v71 = (void *)sub_1D7A9AFF8();
  }
  if (a10 >> 60 == 15) {
    uint64_t v72 = 0;
  }
  else {
    uint64_t v72 = (void *)sub_1D7A9AFF8();
  }
  uint64_t v73 = self;
  v111[0] = 0;
  unsigned int v74 = objc_msgSend(v73, sel_appleIDVGeneratePhoneTokenWithNonce_withReferenceACLBlob_keyBlob_keyAttestation_casdCertificate_phoneToken_, v68, v69, v70, v71, v72, v111);

  id v75 = v111[0];
  unint64_t v76 = v75;
  if (v74 || !v75)
  {
    LOWORD(v111[0]) = 308;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF8678);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1D7AA08E0;
    *(unsigned char *)(inited + 32) = 20;
    *(void *)(inited + 64) = MEMORY[0x1E4FBC4C0];
    *(_DWORD *)(inited + 40) = v74;
    uint64_t v89 = sub_1D785EC20(inited);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000025, 0x80000001D7ACBA00, (__int16 *)v111, 0, v89, 0xD00000000000005ALL, 0x80000001D7ACB570, v90, 0xD00000000000004DLL, 0x80000001D7ACBA30, 241);
    swift_willThrow();
  }
  else
  {
    uint64_t v77 = v100;
    v104(v100, v106, v109);
    id v78 = v76;
    uint64_t v79 = sub_1D7A9B5D8();
    os_log_type_t v80 = sub_1D7A9C748();
    if (os_log_type_enabled(v79, v80))
    {
      id v81 = (uint8_t *)swift_slowAlloc();
      uint64_t v108 = (void *)swift_slowAlloc();
      v111[0] = v108;
      *(_DWORD *)id v81 = 136315138;
      uint64_t v107 = v81 + 4;
      id v82 = objc_msgSend(v78, sel_base64EncodedStringWithOptions_, 0);
      uint64_t v83 = sub_1D7A9BFC8();
      unint64_t v85 = v84;

      uint64_t v110 = sub_1D7923300(v83, v85, (uint64_t *)v111);
      sub_1D7A9C9E8();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1D7853000, v79, v80, "AppleIDVManager generatePhoneToken returned successfully, token: %s", v81, 0xCu);
      uint64_t v86 = v108;
      swift_arrayDestroy();
      MEMORY[0x1D947D740](v86, -1, -1);
      MEMORY[0x1D947D740](v81, -1, -1);

      uint64_t v87 = v100;
    }
    else
    {

      uint64_t v87 = v77;
    }
    v102(v87, v109);
    id v91 = v78;
    uint64_t v89 = sub_1D7A9B028();
  }
  return v89;
}

id sub_1D7A54390(uint64_t a1, unint64_t a2)
{
  v95[4] = *MEMORY[0x1E4F143B8];
  uint64_t v92 = (void (*)(char *, uint64_t))type metadata accessor for DIPSignpost.Config(0);
  MEMORY[0x1F4188790](v92, v5, v6, v7, v8, v9, v10, v11);
  uint64_t v13 = (char *)&v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DIPSignpost(0);
  MEMORY[0x1F4188790](v14 - 8, v15, v16, v17, v18, v19, v20, v21);
  uint64_t v23 = (char *)&v82 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_1D7A9B5F8();
  uint64_t v93 = *(void *)(v24 - 8);
  uint64_t v32 = MEMORY[0x1F4188790](v24, v25, v26, v27, v28, v29, v30, v31);
  id v91 = (char *)&v82 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v32, v34, v35, v36, v37, v38, v39, v40);
  uint64_t v42 = (char *)&v82 - v41;
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v43 = (uint8_t *)__swift_project_value_buffer(v24, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  uint64_t v44 = *(void (**)(char *, uint8_t *, uint64_t))(v93 + 16);
  uint64_t v88 = (uint8_t *)(v93 + 16);
  uint64_t v89 = v43;
  uint64_t v87 = v44;
  v44(v42, v43, v24);
  sub_1D7860790(a1, a2);
  sub_1D7860790(a1, a2);
  unint64_t v45 = sub_1D7A9B5D8();
  os_log_type_t v46 = sub_1D7A9C748();
  BOOL v47 = os_log_type_enabled(v45, v46);
  uint64_t v86 = v2;
  if (v47)
  {
    uint64_t v90 = a2;
    uint64_t v48 = swift_slowAlloc();
    uint64_t v83 = v13;
    uint64_t v49 = a1;
    uint64_t v50 = (uint8_t *)v48;
    uint64_t v51 = swift_slowAlloc();
    uint64_t v85 = v24;
    uint64_t v52 = v51;
    v95[0] = v51;
    *(_DWORD *)uint64_t v50 = 136315138;
    unint64_t v84 = v23;
    uint64_t v53 = sub_1D7A9B008();
    uint64_t v94 = sub_1D7923300(v53, v54, v95);
    uint64_t v23 = v84;
    sub_1D7A9C9E8();
    unint64_t v55 = v90;
    swift_bridgeObjectRelease();
    sub_1D78607E8(v49, v55);
    sub_1D78607E8(v49, v55);
    _os_log_impl(&dword_1D7853000, v45, v46, "AppleIDVManager establishPrearmTrust with baaCertificate: %s", v50, 0xCu);
    swift_arrayDestroy();
    uint64_t v56 = v52;
    uint64_t v24 = v85;
    MEMORY[0x1D947D740](v56, -1, -1);
    uint64_t v13 = v83;
    MEMORY[0x1D947D740](v50, -1, -1);
  }
  else
  {
    sub_1D78607E8(a1, a2);
    sub_1D78607E8(a1, a2);
  }

  unint64_t v57 = *(void (**)(char *, uint64_t))(v93 + 8);
  v57(v42, v24);
  if (qword_1EA841528 != -1) {
    swift_once();
  }
  uint64_t v58 = __swift_project_value_buffer((uint64_t)v92, (uint64_t)qword_1EA845CD0);
  sub_1D78912C4(v58, (uint64_t)v13);
  DIPSignpost.init(_:)(v13, (uint64_t)v23);
  unint64_t v59 = self;
  os_log_t v60 = (void *)sub_1D7A9AFF8();
  v95[0] = 0;
  unsigned int v61 = objc_msgSend(v59, sel_appleIDVEstablishPrearmTrustWithCertificate_protectedPublicKey_, v60, v95);

  uint64_t v62 = (void *)v95[0];
  if (v61 || !v95[0])
  {
    LOWORD(v95[0]) = 311;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF8678);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1D7AA08E0;
    *(unsigned char *)(inited + 32) = 20;
    *(void *)(inited + 64) = MEMORY[0x1E4FBC4C0];
    *(_DWORD *)(inited + 40) = v61;
    id v77 = v62;
    unint64_t v78 = sub_1D785EC20(inited);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000027, 0x80000001D7ACB9A0, (__int16 *)v95, 0, v78, 0xD00000000000005ALL, 0x80000001D7ACB570, v79, 0xD000000000000025, 0x80000001D7ACB9D0, 258);
    swift_willThrow();

    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    sub_1D78AB48C((uint64_t)v23);
  }
  else
  {
    uint64_t v63 = v91;
    v87(v91, v89, v24);
    id v64 = v62;
    uint64_t v65 = sub_1D7A9B5D8();
    os_log_type_t v66 = sub_1D7A9C748();
    if (os_log_type_enabled(v65, v66))
    {
      uint64_t v67 = (uint8_t *)swift_slowAlloc();
      uint64_t v90 = swift_slowAlloc();
      v95[0] = v90;
      uint64_t v85 = v24;
      *(_DWORD *)uint64_t v67 = 136315138;
      uint64_t v88 = v67 + 4;
      uint64_t v89 = v67;
      id v68 = objc_msgSend(v64, sel_base64EncodedStringWithOptions_, 0);
      uint64_t v92 = v57;
      uint64_t v69 = v23;
      id v70 = v68;
      uint64_t v71 = sub_1D7A9BFC8();
      unint64_t v73 = v72;

      uint64_t v23 = v69;
      uint64_t v94 = sub_1D7923300(v71, v73, v95);
      sub_1D7A9C9E8();

      swift_bridgeObjectRelease();
      unsigned int v74 = v89;
      _os_log_impl(&dword_1D7853000, v65, v66, "AppleIDVManager establishPrearmTrust returned successfully, protected public key: %s", v89, 0xCu);
      uint64_t v75 = v90;
      swift_arrayDestroy();
      MEMORY[0x1D947D740](v75, -1, -1);
      MEMORY[0x1D947D740](v74, -1, -1);

      v92(v91, v85);
    }
    else
    {

      v57(v63, v24);
    }
    id v80 = v64;
    id v77 = (id)sub_1D7A9B028();

    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    sub_1D78AB48C((uint64_t)v23);
  }
  return v77;
}

id sub_1D7A54B40()
{
  uint64_t v1 = v0;
  v82[4] = *MEMORY[0x1E4F143B8];
  uint64_t v79 = type metadata accessor for DIPSignpost.Config(0);
  MEMORY[0x1F4188790](v79, v2, v3, v4, v5, v6, v7, v8);
  id v80 = (char *)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DIPSignpost(0);
  MEMORY[0x1F4188790](v10 - 8, v11, v12, v13, v14, v15, v16, v17);
  uint64_t v19 = (char *)&v73 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_1D7A9B5F8();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v29 = MEMORY[0x1F4188790](v20, v22, v23, v24, v25, v26, v27, v28);
  uint64_t v31 = (char *)&v73 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v29, v32, v33, v34, v35, v36, v37, v38);
  uint64_t v40 = (char *)&v73 - v39;
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v41 = __swift_project_value_buffer(v20, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  id v77 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  uint64_t v78 = v41;
  v77(v40, v41, v20);
  uint64_t v42 = sub_1D7A9B5D8();
  os_log_type_t v43 = sub_1D7A9C748();
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v44 = (uint8_t *)swift_slowAlloc();
    uint64_t v75 = v31;
    unint64_t v45 = v44;
    *(_WORD *)uint64_t v44 = 0;
    _os_log_impl(&dword_1D7853000, v42, v43, "AppleIDVManager generateNonceOnWatch", v44, 2u);
    os_log_type_t v46 = v45;
    uint64_t v1 = v0;
    uint64_t v31 = v75;
    MEMORY[0x1D947D740](v46, -1, -1);
  }

  BOOL v47 = *(const char **)(v21 + 8);
  uint64_t v76 = v21 + 8;
  ((void (*)(char *, uint64_t))v47)(v40, v20);
  if (qword_1EA841530 != -1) {
    swift_once();
  }
  uint64_t v48 = __swift_project_value_buffer(v79, (uint64_t)qword_1EA845CE8);
  uint64_t v49 = v80;
  sub_1D78912C4(v48, (uint64_t)v80);
  DIPSignpost.init(_:)(v49, (uint64_t)v19);
  uint64_t v50 = self;
  v82[0] = 0;
  unsigned int v51 = objc_msgSend(v50, sel_appleIDVGenerateNonceOnWatch_, v82);
  uint64_t v52 = (void *)v82[0];
  if (v51 || !v82[0])
  {
    LOWORD(v82[0]) = 307;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF8678);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1D7AA08E0;
    *(unsigned char *)(inited + 32) = 20;
    *(void *)(inited + 64) = MEMORY[0x1E4FBC4C0];
    *(_DWORD *)(inited + 40) = v51;
    id v67 = v52;
    unint64_t v68 = sub_1D785EC20(inited);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000020, 0x80000001D7ACB950, (__int16 *)v82, 0, v68, 0xD00000000000005ALL, 0x80000001D7ACB570, v69, 0xD000000000000016, 0x80000001D7ACB980, 275);
    swift_willThrow();

    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    sub_1D78AB48C((uint64_t)v19);
  }
  else
  {
    id v80 = v47;
    v77(v31, v78, v20);
    uint64_t v53 = v20;
    id v54 = v52;
    unint64_t v55 = sub_1D7A9B5D8();
    os_log_type_t v56 = sub_1D7A9C748();
    BOOL v57 = os_log_type_enabled(v55, v56);
    unsigned int v74 = v19;
    if (v57)
    {
      uint64_t v78 = v53;
      uint64_t v58 = (uint8_t *)swift_slowAlloc();
      id v77 = (void (*)(char *, uint64_t, uint64_t))swift_slowAlloc();
      v82[0] = (uint64_t)v77;
      uint64_t v79 = v1;
      *(_DWORD *)uint64_t v58 = 136315138;
      id v59 = objc_msgSend(v54, sel_base64EncodedStringWithOptions_, 0, v58 + 4);
      uint64_t v60 = sub_1D7A9BFC8();
      uint64_t v75 = v31;
      unint64_t v62 = v61;

      uint64_t v81 = sub_1D7923300(v60, v62, v82);
      sub_1D7A9C9E8();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1D7853000, v55, v56, "AppleIDVManager generateNonceOnWatch returned successfully, nonce: %s", v58, 0xCu);
      uint64_t v63 = v77;
      swift_arrayDestroy();
      MEMORY[0x1D947D740](v63, -1, -1);
      MEMORY[0x1D947D740](v58, -1, -1);

      id v64 = v75;
      uint64_t v65 = v78;
    }
    else
    {

      id v64 = v31;
      uint64_t v65 = v53;
    }
    ((void (*)(char *, uint64_t))v80)(v64, v65);
    id v70 = v54;
    id v67 = (id)sub_1D7A9B028();

    uint64_t v71 = (uint64_t)v74;
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    sub_1D78AB48C(v71);
  }
  return v67;
}

uint64_t sub_1D7A551B0(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v86 = type metadata accessor for DIPSignpost.Config(0);
  MEMORY[0x1F4188790](v86, v8, v9, v10, v11, v12, v13, v14);
  uint64_t v87 = &v76[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v16 = type metadata accessor for DIPSignpost(0);
  MEMORY[0x1F4188790](v16 - 8, v17, v18, v19, v20, v21, v22, v23);
  uint64_t v90 = &v76[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v25 = sub_1D7A9B5F8();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v34 = MEMORY[0x1F4188790](v25, v27, v28, v29, v30, v31, v32, v33);
  uint64_t v83 = &v76[-((v35 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v34, v36, v37, v38, v39, v40, v41, v42);
  uint64_t v44 = &v76[-v43];
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v45 = __swift_project_value_buffer(v25, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  os_log_type_t v46 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v26 + 16);
  uint64_t v82 = v45;
  uint64_t v81 = v26 + 16;
  id v80 = v46;
  v46(v44, v45, v25);
  sub_1D7860790(a1, a2);
  sub_1D7860790(a3, a4);
  sub_1D7860790(a1, a2);
  sub_1D7860790(a3, a4);
  BOOL v47 = sub_1D7A9B5D8();
  os_log_type_t v48 = sub_1D7A9C748();
  uint64_t v49 = v25;
  int v50 = v48;
  uint64_t v85 = v47;
  BOOL v51 = os_log_type_enabled(v47, v48);
  uint64_t v84 = v26;
  unint64_t v88 = a2;
  if (v51)
  {
    uint64_t v52 = swift_slowAlloc();
    uint64_t v78 = swift_slowAlloc();
    uint64_t v92 = v78;
    *(_DWORD *)uint64_t v52 = 136315394;
    int v77 = v50;
    uint64_t v53 = sub_1D7A9B008();
    uint64_t v79 = v49;
    uint64_t v91 = sub_1D7923300(v53, v54, &v92);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease();
    sub_1D78607E8(a1, a2);
    sub_1D78607E8(a1, a2);
    *(_WORD *)(v52 + 12) = 2080;
    uint64_t v55 = sub_1D7A9B008();
    uint64_t v91 = sub_1D7923300(v55, v56, &v92);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease();
    sub_1D78607E8(a3, a4);
    sub_1D78607E8(a3, a4);
    BOOL v57 = v85;
    _os_log_impl(&dword_1D7853000, v85, (os_log_type_t)v77, "AppleIDVManager prearmCredential token: %s, protectedPublicKey: %s ", (uint8_t *)v52, 0x16u);
    uint64_t v58 = v78;
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v58, -1, -1);
    MEMORY[0x1D947D740](v52, -1, -1);

    id v59 = *(void (**)(unsigned char *, uint64_t))(v84 + 8);
    uint64_t v49 = v79;
    v59(v44, v79);
  }
  else
  {
    sub_1D78607E8(a1, a2);
    sub_1D78607E8(a1, a2);
    sub_1D78607E8(a3, a4);
    sub_1D78607E8(a3, a4);

    id v59 = *(void (**)(unsigned char *, uint64_t))(v26 + 8);
    v59(v44, v49);
  }
  if (qword_1EA841540 != -1) {
    swift_once();
  }
  uint64_t v60 = __swift_project_value_buffer(v86, (uint64_t)qword_1EA845D18);
  unint64_t v61 = v87;
  sub_1D78912C4(v60, (uint64_t)v87);
  DIPSignpost.init(_:)(v61, (uint64_t)v90);
  unint64_t v62 = self;
  uint64_t v63 = (void *)sub_1D7A9AFF8();
  id v64 = (void *)sub_1D7A9AFF8();
  unsigned int v65 = objc_msgSend(v62, sel_appleIDVPrearmCredentialWithAuthorizationToken_protectedPublicKey_, v63, v64);

  if (v65)
  {
    LOWORD(v92) = 309;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF8678);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1D7AA08E0;
    *(unsigned char *)(inited + 32) = 20;
    *(void *)(inited + 64) = MEMORY[0x1E4FBC4C0];
    *(_DWORD *)(inited + 40) = v65;
    unint64_t v67 = sub_1D785EC20(inited);
    sub_1D7860544();
    uint64_t v68 = swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000023, 0x80000001D7ACB8E0, (__int16 *)&v92, 0, v67, 0xD00000000000005ALL, 0x80000001D7ACB570, v69, 0xD00000000000003CLL, 0x80000001D7ACB910, 290);
    uint64_t v89 = v68;
    swift_willThrow();
  }
  else
  {
    id v70 = v83;
    v80(v83, v82, v49);
    uint64_t v71 = sub_1D7A9B5D8();
    os_log_type_t v72 = sub_1D7A9C748();
    if (os_log_type_enabled(v71, v72))
    {
      uint64_t v73 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v73 = 0;
      _os_log_impl(&dword_1D7853000, v71, v72, "AppleIDVManager prearmCredential returned successfully", v73, 2u);
      MEMORY[0x1D947D740](v73, -1, -1);
    }

    v59(v70, v49);
  }
  unsigned int v74 = v90;
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  return sub_1D78AB48C((uint64_t)v74);
}

uint64_t sub_1D7A5589C()
{
  uint64_t v60 = type metadata accessor for DIPSignpost.Config(0);
  MEMORY[0x1F4188790](v60, v0, v1, v2, v3, v4, v5, v6);
  unint64_t v61 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DIPSignpost(0);
  MEMORY[0x1F4188790](v8 - 8, v9, v10, v11, v12, v13, v14, v15);
  uint64_t v17 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_1D7A9B5F8();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v27 = MEMORY[0x1F4188790](v18, v20, v21, v22, v23, v24, v25, v26);
  uint64_t v29 = (char *)&v56 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v27, v30, v31, v32, v33, v34, v35, v36);
  uint64_t v38 = (char *)&v56 - v37;
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v39 = __swift_project_value_buffer(v18, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  uint64_t v58 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  uint64_t v59 = v39;
  v58(v38, v39, v18);
  uint64_t v40 = sub_1D7A9B5D8();
  os_log_type_t v41 = sub_1D7A9C748();
  if (os_log_type_enabled(v40, v41))
  {
    uint64_t v42 = (uint8_t *)swift_slowAlloc();
    uint64_t v57 = v18;
    uint64_t v43 = v42;
    *(_WORD *)uint64_t v42 = 0;
    _os_log_impl(&dword_1D7853000, v40, v41, "AppleIDVManager revokeCredentialAuthorizationToken", v42, 2u);
    uint64_t v18 = v57;
    MEMORY[0x1D947D740](v43, -1, -1);
  }

  uint64_t v44 = *(void (**)(char *, uint64_t))(v19 + 8);
  v44(v38, v18);
  if (qword_1EA841548 != -1) {
    swift_once();
  }
  uint64_t v45 = __swift_project_value_buffer(v60, (uint64_t)qword_1EA845D30);
  os_log_type_t v46 = v61;
  sub_1D78912C4(v45, (uint64_t)v61);
  DIPSignpost.init(_:)(v46, (uint64_t)v17);
  unsigned int v47 = objc_msgSend(self, sel_appleIDVRevokeCredentialAuthorizationToken);
  if (v47)
  {
    unsigned int v48 = v47;
    __int16 v62 = 310;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF8678);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1D7AA08E0;
    *(unsigned char *)(inited + 32) = 20;
    *(void *)(inited + 64) = MEMORY[0x1E4FBC4C0];
    *(_DWORD *)(inited + 40) = v48;
    unint64_t v50 = sub_1D785EC20(inited);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000035, 0x80000001D7ACB870, &v62, 0, v50, 0xD00000000000005ALL, 0x80000001D7ACB570, v51, 0xD000000000000024, 0x80000001D7ACB8B0, 304);
    swift_willThrow();
  }
  else
  {
    v58(v29, v59, v18);
    uint64_t v52 = sub_1D7A9B5D8();
    os_log_type_t v53 = sub_1D7A9C748();
    if (os_log_type_enabled(v52, v53))
    {
      unint64_t v54 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v54 = 0;
      _os_log_impl(&dword_1D7853000, v52, v53, "AppleIDVManager revokeCredentialAuthorizationToken returned successfully", v54, 2u);
      MEMORY[0x1D947D740](v54, -1, -1);
    }

    v44(v29, v18);
  }
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  return sub_1D78AB48C((uint64_t)v17);
}

id sub_1D7A55D58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(char *, char *, uint64_t))
{
  uint64_t v90 = a1;
  uint64_t v91 = a5;
  v97[4] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v6 = sub_1D7A9B1A8();
  uint64_t v94 = *(void *)(v6 - 8);
  uint64_t v95 = v6;
  MEMORY[0x1F4188790](v6, v7, v8, v9, v10, v11, v12, v13);
  uint64_t v93 = (char *)v87 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v88 = (id)type metadata accessor for DIPSignpost.Config(0);
  MEMORY[0x1F4188790](v88, v15, v16, v17, v18, v19, v20, v21);
  uint64_t v89 = (char *)v87 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for DIPSignpost(0);
  MEMORY[0x1F4188790](v23 - 8, v24, v25, v26, v27, v28, v29, v30);
  uint64_t v92 = (uint64_t)v87 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = sub_1D7A9B5F8();
  uint64_t v33 = *(void *)(v32 - 8);
  MEMORY[0x1F4188790](v32, v34, v35, v36, v37, v38, v39, v40);
  uint64_t v42 = (char *)v87 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v43 = __swift_project_value_buffer(v32, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v42, v43, v32);
  uint64_t v44 = sub_1D7A9B5D8();
  os_log_type_t v45 = sub_1D7A9C748();
  if (os_log_type_enabled(v44, v45))
  {
    os_log_type_t v46 = (uint8_t *)swift_slowAlloc();
    v87[0] = a2;
    unsigned int v47 = v46;
    *(_WORD *)os_log_type_t v46 = 0;
    _os_log_impl(&dword_1D7853000, v44, v45, "AppleIDVManager persistModifiedACLBlob", v46, 2u);
    MEMORY[0x1D947D740](v47, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v33 + 8))(v42, v32);
  if (qword_1EA841550 != -1) {
    swift_once();
  }
  uint64_t v48 = __swift_project_value_buffer((uint64_t)v88, (uint64_t)qword_1EA845D48);
  uint64_t v49 = v89;
  sub_1D78912C4(v48, (uint64_t)v89);
  uint64_t v50 = v92;
  DIPSignpost.init(_:)(v49, v92);
  uint64_t v51 = self;
  uint64_t v52 = (void *)sub_1D7A9AFF8();
  os_log_type_t v53 = (void *)sub_1D7A9AFF8();
  unint64_t v54 = (void *)sub_1D7A9AFF8();
  v97[0] = 0;
  uint64_t v96 = 0;
  unsigned int v55 = objc_msgSend(v51, sel_appleIDVPersistModifiedACLBlob_withReferenceACLBlob_withLAContextData_intoBlob_returnBioUUIDs_, v52, v53, v54, v97, &v96);

  uint64_t v56 = v96;
  id v57 = v97[0];
  if (v55)
  {
    LOWORD(v97[0]) = 306;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF8678);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1D7AA08E0;
    *(unsigned char *)(inited + 32) = 20;
    *(void *)(inited + 64) = MEMORY[0x1E4FBC4C0];
    *(_DWORD *)(inited + 40) = v55;
    uint64_t v59 = v56;
    id v60 = v57;
    unint64_t v61 = sub_1D785EC20(inited);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000029, 0x80000001D7ACB7A0, (__int16 *)v97, 0, v61, 0xD00000000000005ALL, 0x80000001D7ACB570, v62, 0xD000000000000041, 0x80000001D7ACB7D0, 320);
    swift_willThrow();

LABEL_9:
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    sub_1D78AB48C(v50);
    return v57;
  }
  if (!v97[0])
  {
    LOWORD(v97[0]) = 0;
    uint64_t v81 = v96;
    unint64_t v82 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000047, 0x80000001D7ACB820, (__int16 *)v97, 0, v82, 0xD00000000000005ALL, 0x80000001D7ACB570, v83, 0xD000000000000041, 0x80000001D7ACB7D0, 323);
    swift_willThrow();
    goto LABEL_9;
  }
  if (v96)
  {
    v97[0] = 0;
    uint64_t v63 = v96;
    id v64 = v57;
    unsigned int v65 = v63;
    id v66 = v64;
    sub_1D7A9C308();

    unint64_t v67 = (char *)v97[0];
    if (v97[0])
    {
      int64_t v68 = *((void *)v97[0] + 2);
      if (v68)
      {
        id v88 = v57;
        uint64_t v89 = v56;
        v97[0] = (id)MEMORY[0x1E4FBC860];
        sub_1D78AB4E8(0, v68, 0);
        uint64_t v91 = *(void (**)(char *, char *, uint64_t))(v94 + 16);
        unint64_t v69 = (*(unsigned __int8 *)(v94 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80);
        v87[0] = v67;
        id v70 = &v67[v69];
        uint64_t v90 = *(void *)(v94 + 72);
        v94 += 16;
        uint64_t v71 = (void (**)(char *, uint64_t))(v94 - 8);
        do
        {
          os_log_type_t v72 = v93;
          uint64_t v73 = v95;
          v91(v93, v70, v95);
          uint64_t v74 = sub_1D7A9B158();
          uint64_t v76 = v75;
          (*v71)(v72, v73);
          int v77 = v97[0];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1D78AB4E8(0, v77[2] + 1, 1);
            int v77 = v97[0];
          }
          unint64_t v79 = v77[2];
          unint64_t v78 = v77[3];
          if (v79 >= v78 >> 1)
          {
            sub_1D78AB4E8(v78 > 1, v79 + 1, 1);
            int v77 = v97[0];
          }
          v77[2] = v79 + 1;
          id v80 = (char *)&v77[2 * v79];
          *((void *)v80 + 4) = v74;
          *((void *)v80 + 5) = v76;
          v70 += v90;
          --v68;
        }
        while (v68);
        swift_bridgeObjectRelease();
        uint64_t v50 = v92;
        uint64_t v56 = (char *)v89;
        id v57 = v88;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
  }
  else
  {
    id v84 = v97[0];
  }
  id v85 = v57;
  id v57 = (id)sub_1D7A9B028();

  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  sub_1D78AB48C(v50);
  return v57;
}

uint64_t sub_1D7A56564(char a1)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = type metadata accessor for DIPSignpost.Config(0);
  MEMORY[0x1F4188790](v2, v3, v4, v5, v6, v7, v8, v9);
  uint64_t v11 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DIPSignpost(0);
  MEMORY[0x1F4188790](v12 - 8, v13, v14, v15, v16, v17, v18, v19);
  uint64_t v21 = (char *)&v61 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_1D7A9B5F8();
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22, v24, v25, v26, v27, v28, v29, v30);
  uint64_t v32 = (char *)&v61 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v33 = __swift_project_value_buffer(v22, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v32, v33, v22);
  uint64_t v34 = sub_1D7A9B5D8();
  os_log_type_t v35 = sub_1D7A9C748();
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = (uint8_t *)swift_slowAlloc();
    uint64_t v62 = v11;
    uint64_t v37 = v2;
    uint64_t v38 = v21;
    char v39 = a1;
    uint64_t v40 = v36;
    *(_WORD *)uint64_t v36 = 0;
    _os_log_impl(&dword_1D7853000, v34, v35, "AppleIDVManager prepareUnboundACLForWatch", v36, 2u);
    uint64_t v41 = v40;
    a1 = v39;
    uint64_t v21 = v38;
    uint64_t v2 = v37;
    uint64_t v11 = v62;
    MEMORY[0x1D947D740](v41, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v23 + 8))(v32, v22);
  if (qword_1EA841558 != -1) {
    swift_once();
  }
  uint64_t v42 = __swift_project_value_buffer(v2, (uint64_t)qword_1EA845D60);
  sub_1D78912C4(v42, (uint64_t)v11);
  DIPSignpost.init(_:)(v11, (uint64_t)v21);
  uint64_t v43 = self;
  id v63 = 0;
  unsigned int v44 = objc_msgSend(v43, sel_prepareUnboundACLForWatch_withAccessibilityEnabled_, &v63, a1 & 1);
  id v45 = v63;
  if (v44)
  {
    unsigned int v46 = v44;
    id v63 = 0;
    unint64_t v64 = 0xE000000000000000;
    id v47 = v45;
    sub_1D7A9CC48();
    sub_1D7A9C128();
    if (a1) {
      __int16 v48 = 314;
    }
    else {
      __int16 v48 = 313;
    }
    sub_1D7A9C128();
    swift_bridgeObjectRelease();
    uint64_t v49 = (uint64_t)v63;
    uint64_t v50 = v64;
    LOWORD(v63) = v48;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF8678);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1D7AA08E0;
    *(unsigned char *)(inited + 32) = 20;
    *(void *)(inited + 64) = MEMORY[0x1E4FBC4C0];
    *(_DWORD *)(inited + 40) = v46;
    unint64_t v52 = sub_1D785EC20(inited);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, v49, v50, (__int16 *)&v63, 0, v52, 0xD00000000000005ALL, 0x80000001D7ACB570, v53, 0xD000000000000034, 0x80000001D7ACB700, 342);
    swift_willThrow();
  }
  else
  {
    if (v63)
    {
      id v54 = v63;
      uint64_t v50 = sub_1D7A9B028();

      DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
      sub_1D78AB48C((uint64_t)v21);
      return v50;
    }
    id v63 = 0;
    unint64_t v64 = 0xE000000000000000;
    sub_1D7A9CC48();
    sub_1D7A9C128();
    if (a1) {
      __int16 v56 = 314;
    }
    else {
      __int16 v56 = 313;
    }
    sub_1D7A9C128();
    swift_bridgeObjectRelease();
    uint64_t v57 = (uint64_t)v63;
    uint64_t v50 = v64;
    LOWORD(v63) = v56;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF8678);
    uint64_t v58 = swift_initStackObject();
    *(_OWORD *)(v58 + 16) = xmmword_1D7AA08E0;
    *(unsigned char *)(v58 + 32) = 20;
    *(void *)(v58 + 64) = MEMORY[0x1E4FBC4C0];
    *(_DWORD *)(v58 + 40) = 0;
    unint64_t v59 = sub_1D785EC20(v58);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, v57, v50, (__int16 *)&v63, 0, v59, 0xD00000000000005ALL, 0x80000001D7ACB570, v60, 0xD000000000000034, 0x80000001D7ACB700, 345);
    swift_willThrow();
  }
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  sub_1D78AB48C((uint64_t)v21);
  return v50;
}

id sub_1D7A56C10(unsigned int a1, unsigned int a2, uint64_t a3, unint64_t a4)
{
  unsigned int v102 = a2;
  unsigned int v101 = a1;
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  uint64_t v98 = type metadata accessor for DIPSignpost.Config(0);
  MEMORY[0x1F4188790](v98, v7, v8, v9, v10, v11, v12, v13);
  uint64_t v99 = &v88[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = type metadata accessor for DIPSignpost(0);
  MEMORY[0x1F4188790](v15 - 8, v16, v17, v18, v19, v20, v21, v22);
  uint64_t v24 = &v88[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v25 = sub_1D7A9B5F8();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v34 = MEMORY[0x1F4188790](v25, v27, v28, v29, v30, v31, v32, v33);
  uint64_t v95 = &v88[-((v35 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v34, v36, v37, v38, v39, v40, v41, v42);
  unsigned int v44 = &v88[-v43];
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v96 = v4;
  uint64_t v45 = __swift_project_value_buffer(v25, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  unsigned int v46 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v26 + 16);
  uint64_t v94 = v45;
  uint64_t v93 = v26 + 16;
  uint64_t v92 = v46;
  v46(v44, v45, v25);
  sub_1D786E9D8(a3, a4);
  sub_1D786E9D8(a3, a4);
  id v47 = sub_1D7A9B5D8();
  uint64_t v48 = v25;
  int v49 = sub_1D7A9C748();
  BOOL v50 = os_log_type_enabled(v47, (os_log_type_t)v49);
  unint64_t v100 = a4 >> 60;
  uint64_t v97 = v26;
  if (v50)
  {
    int v89 = v49;
    uint64_t v90 = v48;
    uint64_t v51 = swift_slowAlloc();
    uint64_t v52 = swift_slowAlloc();
    uint64_t v104 = (void *)v52;
    *(_DWORD *)uint64_t v51 = 136446722;
    uint64_t v91 = v24;
    uint64_t v53 = 0x694220656E6F6850;
    unint64_t v54 = 0xEE00797274656D6FLL;
    switch(v101)
    {
      case 0u:
        break;
      case 1u:
        unsigned int v55 = "Phone Accessibility";
        goto LABEL_10;
      case 2u:
        uint64_t v53 = 0x6942206863746157;
        break;
      case 3u:
        unsigned int v55 = "Watch Accessibility";
LABEL_10:
        unint64_t v54 = (unint64_t)(v55 - 32) | 0x8000000000000000;
        uint64_t v53 = 0xD000000000000013;
        break;
      default:
        unint64_t v54 = 0xE700000000000000;
        uint64_t v53 = 0x6E776F6E6B6E55;
        break;
    }
    uint64_t v103 = sub_1D7923300(v53, v54, (uint64_t *)&v104);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease();
    *(_WORD *)(v51 + 12) = 2082;
    unint64_t v58 = 0xD000000000000015;
    unint64_t v59 = 0x80000001D7ACB4D0;
    unint64_t v60 = 0xE700000000000000;
    unint64_t v61 = 0x6E776F6E6B6E55;
    if (v102 == 1)
    {
      unint64_t v61 = 0xD000000000000013;
      unint64_t v60 = 0x80000001D7ACB4F0;
    }
    if (v102 != 2)
    {
      unint64_t v58 = v61;
      unint64_t v59 = v60;
    }
    if (v102) {
      uint64_t v62 = v58;
    }
    else {
      uint64_t v62 = 0x6D746E6573657250;
    }
    if (v102) {
      unint64_t v63 = v59;
    }
    else {
      unint64_t v63 = 0xEB00000000746E65;
    }
    uint64_t v103 = sub_1D7923300(v62, v63, (uint64_t *)&v104);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease();
    *(_WORD *)(v51 + 22) = 2080;
    if (v100 <= 0xE)
    {
      uint64_t v65 = sub_1D7A9AF98();
      unint64_t v64 = v66;
    }
    else
    {
      unint64_t v64 = 0xE500000000000000;
      uint64_t v65 = 0x3E6C696E3CLL;
    }
    uint64_t v103 = sub_1D7923300(v65, v64, (uint64_t *)&v104);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease();
    sub_1D7871BDC(a3, a4);
    sub_1D7871BDC(a3, a4);
    _os_log_impl(&dword_1D7853000, v47, (os_log_type_t)v89, "AppleIDVManager prepareACL, type: %{public}s, usage: %{public}s, bioUUID: %s", (uint8_t *)v51, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v52, -1, -1);
    MEMORY[0x1D947D740](v51, -1, -1);

    __int16 v56 = *(void (**)(unsigned char *, uint64_t))(v97 + 8);
    uint64_t v57 = v90;
    v56(v44, v90);
    uint64_t v24 = v91;
  }
  else
  {
    sub_1D7871BDC(a3, a4);
    sub_1D7871BDC(a3, a4);

    __int16 v56 = *(void (**)(unsigned char *, uint64_t))(v26 + 8);
    v56(v44, v48);
    uint64_t v57 = v48;
  }
  uint64_t v67 = v101;
  if (qword_1EA841560 != -1) {
    swift_once();
  }
  uint64_t v68 = __swift_project_value_buffer(v98, (uint64_t)qword_1EA845D78);
  unint64_t v69 = v99;
  sub_1D78912C4(v68, (uint64_t)v99);
  DIPSignpost.init(_:)(v69, (uint64_t)v24);
  if (v100 <= 0xE) {
    id v70 = (void *)sub_1D7A9AFF8();
  }
  else {
    id v70 = 0;
  }
  uint64_t v71 = self;
  uint64_t v104 = 0;
  unsigned int v72 = objc_msgSend(v71, sel_prepareACL_aclType_forAclUsage_forBioUUID_, &v104, v67, v102, v70);

  uint64_t v73 = v104;
  if (v72)
  {
    uint64_t v104 = 0;
    unint64_t v105 = 0xE000000000000000;
    id v74 = v73;
    sub_1D7A9CC48();
    swift_bridgeObjectRelease();
    uint64_t v104 = (void *)0xD00000000000001DLL;
    unint64_t v105 = 0x80000001D7ACB600;
    sub_1D7A9C128();
    swift_bridgeObjectRelease();
    sub_1D7A9C128();
    sub_1D7A9C128();
    swift_bridgeObjectRelease();
    uint64_t v78 = (uint64_t)v104;
    uint64_t v79 = v105;
    LOWORD(v104) = 316;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF8678);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1D7AA08E0;
    *(unsigned char *)(inited + 32) = 20;
    *(void *)(inited + 64) = MEMORY[0x1E4FBC4C0];
    *(_DWORD *)(inited + 40) = v72;
    unint64_t v81 = sub_1D785EC20(inited);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, v78, v79, (__int16 *)&v104, 0, v81, 0xD00000000000005ALL, 0x80000001D7ACB570, v82, 0xD000000000000025, 0x80000001D7ACB620, 362);
    swift_willThrow();

LABEL_35:
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    sub_1D78AB48C((uint64_t)v24);
    return v74;
  }
  if (!v104)
  {
    uint64_t v104 = 0;
    unint64_t v105 = 0xE000000000000000;
    sub_1D7A9CC48();
    sub_1D7A9C128();
    sub_1D7A9C128();
    swift_bridgeObjectRelease();
    sub_1D7A9C128();
    sub_1D7A9C128();
    swift_bridgeObjectRelease();
    sub_1D7A9C128();
    id v74 = v104;
    uint64_t v84 = v105;
    LOWORD(v104) = 316;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF8678);
    uint64_t v85 = swift_initStackObject();
    *(_OWORD *)(v85 + 16) = xmmword_1D7AA08E0;
    *(unsigned char *)(v85 + 32) = 20;
    *(void *)(v85 + 64) = MEMORY[0x1E4FBC4C0];
    *(_DWORD *)(v85 + 40) = 0;
    unint64_t v86 = sub_1D785EC20(v85);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, (uint64_t)v74, v84, (__int16 *)&v104, 0, v86, 0xD00000000000005ALL, 0x80000001D7ACB570, v87, 0xD000000000000025, 0x80000001D7ACB620, 367);
    swift_willThrow();
    goto LABEL_35;
  }
  uint64_t v75 = v95;
  v92(v95, v94, v57);
  id v76 = v73;
  sub_1D7925DD4();

  v56(v75, v57);
  id v77 = v76;
  id v74 = (id)sub_1D7A9B028();

  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  sub_1D78AB48C((uint64_t)v24);
  return v74;
}

uint64_t sub_1D7A578D4()
{
  uint64_t v60 = type metadata accessor for DIPSignpost.Config(0);
  MEMORY[0x1F4188790](v60, v0, v1, v2, v3, v4, v5, v6);
  unint64_t v61 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DIPSignpost(0);
  MEMORY[0x1F4188790](v8 - 8, v9, v10, v11, v12, v13, v14, v15);
  uint64_t v17 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_1D7A9B5F8();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v27 = MEMORY[0x1F4188790](v18, v20, v21, v22, v23, v24, v25, v26);
  uint64_t v29 = (char *)&v56 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v27, v30, v31, v32, v33, v34, v35, v36);
  uint64_t v38 = (char *)&v56 - v37;
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v39 = __swift_project_value_buffer(v18, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  unint64_t v58 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  uint64_t v59 = v39;
  v58(v38, v39, v18);
  uint64_t v40 = sub_1D7A9B5D8();
  os_log_type_t v41 = sub_1D7A9C748();
  if (os_log_type_enabled(v40, v41))
  {
    uint64_t v42 = (uint8_t *)swift_slowAlloc();
    uint64_t v57 = v18;
    uint64_t v43 = v42;
    *(_WORD *)uint64_t v42 = 0;
    _os_log_impl(&dword_1D7853000, v40, v41, "AppleIDVManager credentialAuthenticationTokenStatus", v42, 2u);
    uint64_t v18 = v57;
    MEMORY[0x1D947D740](v43, -1, -1);
  }

  unsigned int v44 = *(void (**)(char *, uint64_t))(v19 + 8);
  v44(v38, v18);
  if (qword_1EA841568 != -1) {
    swift_once();
  }
  uint64_t v45 = __swift_project_value_buffer(v60, (uint64_t)qword_1EA845D90);
  unsigned int v46 = v61;
  sub_1D78912C4(v45, (uint64_t)v61);
  DIPSignpost.init(_:)(v46, (uint64_t)v17);
  unsigned int v47 = objc_msgSend(self, sel_appleIDVCredentialAuthenticationTokenStatus);
  if (v47)
  {
    unsigned int v48 = v47;
    __int16 v62 = 317;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF8678);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1D7AA08E0;
    *(unsigned char *)(inited + 32) = 20;
    *(void *)(inited + 64) = MEMORY[0x1E4FBC4C0];
    *(_DWORD *)(inited + 40) = v48;
    unint64_t v50 = sub_1D785EC20(inited);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000002ELL, 0x80000001D7ACB540, &v62, 0, v50, 0xD00000000000005ALL, 0x80000001D7ACB570, v51, 0xD000000000000025, 0x80000001D7ACB5D0, 390);
    swift_willThrow();
  }
  else
  {
    v58(v29, v59, v18);
    uint64_t v52 = sub_1D7A9B5D8();
    os_log_type_t v53 = sub_1D7A9C748();
    if (os_log_type_enabled(v52, v53))
    {
      unint64_t v54 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v54 = 0;
      _os_log_impl(&dword_1D7853000, v52, v53, "AppleIDVManager credentialAuthenticationTokenStatus returned successfully", v54, 2u);
      MEMORY[0x1D947D740](v54, -1, -1);
    }

    v44(v29, v18);
  }
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  return sub_1D78AB48C((uint64_t)v17);
}

uint64_t dispatch thunk of AppleIDVManaging.getStatus()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of AppleIDVManaging.prepareBioBindingUnboundACL()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of AppleIDVManaging.preparePasscodeBindingUnboundACL()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of AppleIDVManaging.persistACLBlob(_:requiresDoublePress:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t dispatch thunk of AppleIDVManaging.getUUIDsFromACL(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of AppleIDVManaging.requireDoublePressOnACL(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t dispatch thunk of AppleIDVManaging.recoverPersistedACLBlob(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t dispatch thunk of AppleIDVManaging.authorizePresentmentForSignature(aclBlob:externalizedLAContext:seSlot:payloadDigest:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(uint64_t))(a9 + 64))(a1);
}

uint64_t dispatch thunk of AppleIDVManaging.generatePrearmTrustKeyforWatchAndCopyPublicKey(nonce:prognitorPublicKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 72))();
}

uint64_t dispatch thunk of AppleIDVManaging.updatePrearmTrustKeyforWatch(inKeyBlob:prognitorPublicKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 80))();
}

uint64_t dispatch thunk of AppleIDVManaging.generatePhoneToken(withNonce:aclBlob:keyBlob:keyAttestation:casdCertificate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a12 + 88))(a1, a2, a3, a4);
}

uint64_t dispatch thunk of AppleIDVManaging.establishPrearmTrust(baaCertificate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 96))();
}

uint64_t dispatch thunk of AppleIDVManaging.generateNonceOnWatch()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t dispatch thunk of AppleIDVManaging.prearmCredential(withAuthorizationToken:protectedPublicKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 112))();
}

uint64_t dispatch thunk of AppleIDVManaging.revokeCredentialAuthorizationToken()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 120))();
}

uint64_t dispatch thunk of AppleIDVManaging.persistModifiedACLBlob(_:referenceACLBlob:externalizedLAContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 128))();
}

uint64_t dispatch thunk of AppleIDVManaging.prepareUnboundACLForWatch(withAccessibilityEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 136))();
}

uint64_t dispatch thunk of AppleIDVManaging.prepareACL(aclType:aclUsage:bioUUID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 144))();
}

uint64_t dispatch thunk of AppleIDVManaging.credentialAuthenticationTokenStatus()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 152))();
}

uint64_t type metadata accessor for AppleIDVManager()
{
  return self;
}

uint64_t method lookup function for AppleIDVManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AppleIDVManager);
}

uint64_t dispatch thunk of AppleIDVManager.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

unint64_t sub_1D7A58100()
{
  unint64_t result = qword_1EA847590;
  if (!qword_1EA847590)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847590);
  }
  return result;
}

ValueMetadata *type metadata accessor for ASN1OctetString()
{
  return &type metadata for ASN1OctetString;
}

uint64_t sub_1D7A58164(uint64_t a1)
{
  return sub_1D7A581AC(a1, 0x7265646165524B53, (uint64_t *)&xmmword_1EA847598, (unint64_t *)&xmmword_1EA847598 + 1, &qword_1EA8475A8);
}

uint64_t sub_1D7A58188(uint64_t a1)
{
  return sub_1D7A581AC(a1, 0x6563697665444B53, (uint64_t *)&xmmword_1EA8475B0, (unint64_t *)&xmmword_1EA8475B0 + 1, &qword_1EA8475C0);
}

uint64_t sub_1D7A581AC(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, void *a5)
{
  uint64_t v8 = sub_1D7A9C028();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8, v10, v11, v12, v13, v14, v15, v16);
  uint64_t v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7A9C018();
  uint64_t v19 = sub_1D7A9BFD8();
  unint64_t v21 = v20;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v18, v8);
  if (v21 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    *a3 = v19;
    *a4 = v21;
    *a5 = 32;
  }
  return result;
}

uint64_t sub_1D7A582C8(uint64_t a1)
{
  return sub_1D7A582EC(a1, 0x7265646165524B53, (uint64_t *)&xmmword_1EA8475C8, (unint64_t *)&xmmword_1EA8475C8 + 1, &qword_1EA8475D8);
}

uint64_t sub_1D7A582EC(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, void *a5)
{
  uint64_t v8 = sub_1D7A9C028();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8, v10, v11, v12, v13, v14, v15, v16);
  uint64_t v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7A9C018();
  uint64_t v19 = sub_1D7A9BFD8();
  unint64_t v21 = v20;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v18, v8);
  if (v21 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    *a3 = v19;
    *a4 = v21;
    *a5 = 16;
  }
  return result;
}

uint64_t sub_1D7A58408(uint64_t a1)
{
  return sub_1D7A582EC(a1, 0x6563697665444B53, (uint64_t *)&xmmword_1EA8475E0, (unint64_t *)&xmmword_1EA8475E0 + 1, &qword_1EA8475F0);
}

uint64_t sub_1D7A5842C()
{
  uint64_t result = sub_1D78D1EB0((uint64_t)&unk_1F2F19828);
  qword_1EA8475F8 = result;
  unk_1EA847600 = v1;
  return result;
}

uint64_t sub_1D7A58458()
{
  uint64_t result = sub_1D78D1EB0((uint64_t)&unk_1F2F19850);
  qword_1EA847608 = result;
  unk_1EA847610 = v1;
  return result;
}

BOOL static ISO18013SessionCryptarch.Role.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t ISO18013SessionCryptarch.Role.hash(into:)()
{
  return sub_1D7A9D5E8();
}

uint64_t ISO18013SessionCryptarch.Role.hashValue.getter()
{
  return sub_1D7A9D628();
}

CoreIDVShared::ISO18013SessionCryptarch::Curve_optional __swiftcall ISO18013SessionCryptarch.Curve.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v2 = v1;
  unint64_t v3 = sub_1D7A9D058();
  result.SecCertificateRef value = swift_bridgeObjectRelease();
  char v5 = 5;
  if (v3 < 5) {
    char v5 = v3;
  }
  *uint64_t v2 = v5;
  return result;
}

void *static ISO18013SessionCryptarch.Curve.allCases.getter()
{
  return &unk_1F2F19910;
}

uint64_t ISO18013SessionCryptarch.Curve.rawValue.getter()
{
  uint64_t result = 909455952;
  switch(*v0)
  {
    case 1:
      uint64_t result = 876098384;
      break;
    case 2:
      uint64_t result = 825374032;
      break;
    case 3:
      uint64_t result = 0x393135353258;
      break;
    case 4:
      uint64_t result = 942945368;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1D7A585F4(unsigned __int8 *a1, char *a2)
{
  return sub_1D7995B94(*a1, *a2);
}

uint64_t sub_1D7A58600()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D7A586C8()
{
  sub_1D7A9C0B8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D7A58778()
{
  return sub_1D7A9D628();
}

CoreIDVShared::ISO18013SessionCryptarch::Curve_optional sub_1D7A5883C(Swift::String *a1)
{
  return ISO18013SessionCryptarch.Curve.init(rawValue:)(*a1);
}

void sub_1D7A58848(uint64_t *a1@<X8>)
{
  uint64_t v2 = 909455952;
  switch(*v1)
  {
    case 1:
      uint64_t v2 = 876098384;
      goto LABEL_3;
    case 2:
      *a1 = 825374032;
      a1[1] = 0xE400000000000000;
      break;
    case 3:
      *a1 = 0x393135353258;
      a1[1] = 0xE600000000000000;
      break;
    case 4:
      *a1 = 942945368;
      a1[1] = 0xE400000000000000;
      break;
    default:
LABEL_3:
      *a1 = v2;
      a1[1] = 0xE400000000000000;
      break;
  }
}

void sub_1D7A588D4(void *a1@<X8>)
{
  *a1 = &unk_1F2F19938;
}

BOOL static ISO18013SessionCryptarch.Variant.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t ISO18013SessionCryptarch.Variant.hash(into:)()
{
  return sub_1D7A9D5E8();
}

uint64_t ISO18013SessionCryptarch.Variant.hashValue.getter()
{
  return sub_1D7A9D628();
}

uint64_t ISO18013SessionCryptarch.PublicKey.init(curve:data:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847618);
  MEMORY[0x1F4188790](v8 - 8, v9, v10, v11, v12, v13, v14, v15);
  uint64_t v17 = (char *)&v102 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847620);
  MEMORY[0x1F4188790](v18 - 8, v19, v20, v21, v22, v23, v24, v25);
  uint64_t v27 = (char *)&v102 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847628);
  MEMORY[0x1F4188790](v28 - 8, v29, v30, v31, v32, v33, v34, v35);
  uint64_t v37 = (char *)&v102 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847630);
  MEMORY[0x1F4188790](v38 - 8, v39, v40, v41, v42, v43, v44, v45);
  unsigned int v47 = (char *)&v102 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847638);
  MEMORY[0x1F4188790](v48 - 8, v49, v50, v51, v52, v53, v54, v55);
  uint64_t v57 = (char *)&v102 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = *a1;
  *a4 = v58;
  switch(v58)
  {
    case 1:
      __int16 v62 = (int *)type metadata accessor for ISO18013SessionCryptarch.PublicKey(0);
      uint64_t v65 = &a4[v62[5]];
      uint64_t v66 = sub_1D7A9BAF8();
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v66 - 8) + 56))(v65, 1, 1, v66);
      uint64_t v102 = a2;
      uint64_t v103 = a3;
      uint64_t v67 = v104;
      sub_1D7A9BBE8();
      if (v67)
      {
        int v68 = 0;
        int v69 = 0;
        int v70 = 0;
        goto LABEL_12;
      }
      uint64_t v92 = sub_1D7A9BBF8();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v92 - 8) + 56))(v47, 0, 1, v92);
      sub_1D7871D78((uint64_t)v47, (uint64_t)&a4[v62[6]], &qword_1EA847630);
      goto LABEL_20;
    case 2:
      __int16 v62 = (int *)type metadata accessor for ISO18013SessionCryptarch.PublicKey(0);
      uint64_t v71 = &a4[v62[5]];
      uint64_t v72 = sub_1D7A9BAF8();
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v72 - 8) + 56))(v71, 1, 1, v72);
      uint64_t v73 = &a4[v62[6]];
      uint64_t v74 = sub_1D7A9BBF8();
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v74 - 8) + 56))(v73, 1, 1, v74);
      uint64_t v102 = a2;
      uint64_t v103 = a3;
      uint64_t v75 = v104;
      sub_1D7A9BCB8();
      if (v75)
      {
        int v69 = 0;
        int v70 = 0;
        int v68 = 1;
        goto LABEL_12;
      }
      uint64_t v95 = sub_1D7A9BCC8();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v95 - 8) + 56))(v37, 0, 1, v95);
      sub_1D7871D78((uint64_t)v37, (uint64_t)&a4[v62[7]], &qword_1EA847628);
LABEL_22:
      uint64_t v96 = &a4[v62[8]];
      uint64_t v97 = sub_1D7A9B778();
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v97 - 8) + 56))(v96, 1, 1, v97);
      goto LABEL_24;
    case 3:
      __int16 v62 = (int *)type metadata accessor for ISO18013SessionCryptarch.PublicKey(0);
      id v76 = &a4[v62[5]];
      uint64_t v77 = sub_1D7A9BAF8();
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 56))(v76, 1, 1, v77);
      uint64_t v78 = &a4[v62[6]];
      uint64_t v79 = sub_1D7A9BBF8();
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v79 - 8) + 56))(v78, 1, 1, v79);
      id v80 = &a4[v62[7]];
      uint64_t v81 = sub_1D7A9BCC8();
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v81 - 8) + 56))(v80, 1, 1, v81);
      uint64_t v102 = a2;
      uint64_t v103 = a3;
      uint64_t v82 = v104;
      sub_1D7A9B768();
      if (v82)
      {
        int v70 = 0;
        int v68 = 1;
        int v69 = 1;
        goto LABEL_12;
      }
      uint64_t v98 = sub_1D7A9B778();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v98 - 8) + 56))(v27, 0, 1, v98);
      sub_1D7871D78((uint64_t)v27, (uint64_t)&a4[v62[8]], &qword_1EA847620);
LABEL_24:
      uint64_t v99 = &a4[v62[9]];
      uint64_t v100 = sub_1D7A9BDD8();
      return (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v100 - 8) + 56))(v99, 1, 1, v100);
    case 4:
      __int16 v62 = (int *)type metadata accessor for ISO18013SessionCryptarch.PublicKey(0);
      uint64_t v83 = &a4[v62[5]];
      uint64_t v84 = sub_1D7A9BAF8();
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v84 - 8) + 56))(v83, 1, 1, v84);
      uint64_t v85 = &a4[v62[6]];
      uint64_t v86 = sub_1D7A9BBF8();
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v86 - 8) + 56))(v85, 1, 1, v86);
      uint64_t v87 = &a4[v62[7]];
      uint64_t v88 = sub_1D7A9BCC8();
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v88 - 8) + 56))(v87, 1, 1, v88);
      int v89 = &a4[v62[8]];
      uint64_t v90 = sub_1D7A9B778();
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v90 - 8) + 56))(v89, 1, 1, v90);
      uint64_t v102 = a2;
      uint64_t v103 = a3;
      uint64_t v91 = v104;
      sub_1D7A9BDC8();
      if (v91)
      {
        int v68 = 1;
        int v69 = 1;
        int v70 = 1;
LABEL_12:
        type metadata accessor for ISO18013SessionCryptarch.PublicKey(0);
        uint64_t result = sub_1D7871C4C((uint64_t)&a4[v62[5]], &qword_1EA847638);
        if (v68)
        {
          uint64_t result = sub_1D7871C4C((uint64_t)&a4[v62[6]], &qword_1EA847630);
          if (!v69)
          {
LABEL_14:
            if (!v70) {
              return result;
            }
            return sub_1D7871C4C((uint64_t)&a4[v62[8]], &qword_1EA847620);
          }
        }
        else if (!v69)
        {
          goto LABEL_14;
        }
        uint64_t result = sub_1D7871C4C((uint64_t)&a4[v62[7]], &qword_1EA847628);
        if (!v70) {
          return result;
        }
        return sub_1D7871C4C((uint64_t)&a4[v62[8]], &qword_1EA847620);
      }
      uint64_t v101 = sub_1D7A9BDD8();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v101 - 8) + 56))(v17, 0, 1, v101);
      return sub_1D7871D78((uint64_t)v17, (uint64_t)&a4[v62[9]], &qword_1EA847618);
    default:
      uint64_t v102 = a2;
      uint64_t v103 = a3;
      uint64_t v59 = v104;
      uint64_t result = sub_1D7A9BAD8();
      if (v59) {
        return result;
      }
      uint64_t v61 = sub_1D7A9BAF8();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56))(v57, 0, 1, v61);
      __int16 v62 = (int *)type metadata accessor for ISO18013SessionCryptarch.PublicKey(0);
      sub_1D7871D78((uint64_t)v57, (uint64_t)&a4[v62[5]], &qword_1EA847638);
      unint64_t v63 = &a4[v62[6]];
      uint64_t v64 = sub_1D7A9BBF8();
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v64 - 8) + 56))(v63, 1, 1, v64);
LABEL_20:
      uint64_t v93 = &a4[v62[7]];
      uint64_t v94 = sub_1D7A9BCC8();
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v94 - 8) + 56))(v93, 1, 1, v94);
      goto LABEL_22;
  }
}

uint64_t type metadata accessor for ISO18013SessionCryptarch.PublicKey(uint64_t a1)
{
  return sub_1D786E938(a1, (uint64_t *)&unk_1EA847700);
}

uint64_t ISO18013SessionCryptarch.PublicKey.publicKeyData.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847618);
  MEMORY[0x1F4188790](v1 - 8, v2, v3, v4, v5, v6, v7, v8);
  uint64_t v10 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847620);
  MEMORY[0x1F4188790](v11 - 8, v12, v13, v14, v15, v16, v17, v18);
  uint64_t v20 = (char *)&v68 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847628);
  MEMORY[0x1F4188790](v21 - 8, v22, v23, v24, v25, v26, v27, v28);
  uint64_t v30 = (char *)&v68 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847630);
  MEMORY[0x1F4188790](v31 - 8, v32, v33, v34, v35, v36, v37, v38);
  uint64_t v40 = (char *)&v68 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847638);
  MEMORY[0x1F4188790](v41 - 8, v42, v43, v44, v45, v46, v47, v48);
  uint64_t v50 = (char *)&v68 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  switch(*v0)
  {
    case 1:
      uint64_t v64 = type metadata accessor for ISO18013SessionCryptarch.PublicKey(0);
      sub_1D78614F8((uint64_t)&v0[*(int *)(v64 + 24)], (uint64_t)v40, &qword_1EA847630);
      uint64_t v65 = sub_1D7A9BBF8();
      uint64_t v66 = *(void *)(v65 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v40, 1, v65) == 1) {
        goto LABEL_18;
      }
      uint64_t v54 = sub_1D7A9BAC8();
      (*(void (**)(char *, uint64_t))(v66 + 8))(v40, v65);
      break;
    case 2:
      uint64_t v55 = type metadata accessor for ISO18013SessionCryptarch.PublicKey(0);
      sub_1D78614F8((uint64_t)&v0[*(int *)(v55 + 28)], (uint64_t)v30, &qword_1EA847628);
      uint64_t v56 = sub_1D7A9BCC8();
      uint64_t v57 = *(void *)(v56 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v30, 1, v56) == 1)
      {
        __break(1u);
LABEL_15:
        __break(1u);
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
LABEL_18:
        __break(1u);
        JUMPOUT(0x1D7A59818);
      }
      uint64_t v54 = sub_1D7A9BAC8();
      (*(void (**)(char *, uint64_t))(v57 + 8))(v30, v56);
      break;
    case 3:
      uint64_t v58 = type metadata accessor for ISO18013SessionCryptarch.PublicKey(0);
      sub_1D78614F8((uint64_t)&v0[*(int *)(v58 + 32)], (uint64_t)v20, &qword_1EA847620);
      uint64_t v59 = sub_1D7A9B778();
      uint64_t v60 = *(void *)(v59 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v20, 1, v59) == 1) {
        goto LABEL_15;
      }
      uint64_t v54 = sub_1D7A9B758();
      (*(void (**)(char *, uint64_t))(v60 + 8))(v20, v59);
      break;
    case 4:
      uint64_t v61 = type metadata accessor for ISO18013SessionCryptarch.PublicKey(0);
      sub_1D78614F8((uint64_t)&v0[*(int *)(v61 + 36)], (uint64_t)v10, &qword_1EA847618);
      uint64_t v62 = sub_1D7A9BDD8();
      uint64_t v63 = *(void *)(v62 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v10, 1, v62) == 1) {
        goto LABEL_16;
      }
      uint64_t v54 = sub_1D7A9BDB8();
      (*(void (**)(char *, uint64_t))(v63 + 8))(v10, v62);
      break;
    default:
      uint64_t v51 = type metadata accessor for ISO18013SessionCryptarch.PublicKey(0);
      sub_1D78614F8((uint64_t)&v0[*(int *)(v51 + 20)], (uint64_t)v50, &qword_1EA847638);
      uint64_t v52 = sub_1D7A9BAF8();
      uint64_t v53 = *(void *)(v52 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v50, 1, v52) == 1) {
        goto LABEL_17;
      }
      uint64_t v54 = sub_1D7A9BAC8();
      (*(void (**)(char *, uint64_t))(v53 + 8))(v50, v52);
      break;
  }
  return v54;
}

void ISO18013SessionCryptarch.PrivateKey.curve.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t ISO18013SessionCryptarch.PrivateKey.publicKeyData.getter()
{
  uint64_t v1 = sub_1D7A9BDD8();
  uint64_t v127 = *(void *)(v1 - 8);
  uint64_t v128 = v1;
  MEMORY[0x1F4188790](v1, v2, v3, v4, v5, v6, v7, v8);
  uint64_t v126 = (char *)&v118 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847640);
  MEMORY[0x1F4188790](v10 - 8, v11, v12, v13, v14, v15, v16, v17);
  uint64_t v129 = (uint64_t)&v118 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_1D7A9B778();
  uint64_t v124 = *(void *)(v19 - 8);
  uint64_t v125 = v19;
  MEMORY[0x1F4188790](v19, v20, v21, v22, v23, v24, v25, v26);
  uint64_t v123 = (char *)&v118 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847648);
  MEMORY[0x1F4188790](v28 - 8, v29, v30, v31, v32, v33, v34, v35);
  uint64_t v37 = (char *)&v118 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = sub_1D7A9BCC8();
  uint64_t v121 = *(void *)(v38 - 8);
  uint64_t v122 = v38;
  MEMORY[0x1F4188790](v38, v39, v40, v41, v42, v43, v44, v45);
  uint64_t v47 = (char *)&v118 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847650);
  MEMORY[0x1F4188790](v48 - 8, v49, v50, v51, v52, v53, v54, v55);
  uint64_t v57 = (char *)&v118 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = sub_1D7A9BBF8();
  uint64_t v119 = *(void *)(v58 - 8);
  uint64_t v120 = v58;
  MEMORY[0x1F4188790](v58, v59, v60, v61, v62, v63, v64, v65);
  uint64_t v67 = (char *)&v118 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847658);
  MEMORY[0x1F4188790](v68 - 8, v69, v70, v71, v72, v73, v74, v75);
  uint64_t v77 = (char *)&v118 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = sub_1D7A9BAF8();
  uint64_t v118 = *(void *)(v78 - 8);
  MEMORY[0x1F4188790](v78, v79, v80, v81, v82, v83, v84, v85);
  uint64_t v87 = (char *)&v118 - ((v86 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847660);
  MEMORY[0x1F4188790](v88 - 8, v89, v90, v91, v92, v93, v94, v95);
  uint64_t v97 = (char *)&v118 - ((v96 + 15) & 0xFFFFFFFFFFFFFFF0);
  switch(*v0)
  {
    case 1:
      uint64_t v114 = type metadata accessor for ISO18013SessionCryptarch.PrivateKey(0);
      sub_1D78614F8((uint64_t)&v0[*(int *)(v114 + 24)], (uint64_t)v77, &qword_1EA847658);
      uint64_t v115 = sub_1D7A9BC48();
      uint64_t v116 = *(void *)(v115 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v116 + 48))(v77, 1, v115) == 1) {
        goto LABEL_18;
      }
      sub_1D7A9BC18();
      (*(void (**)(char *, uint64_t))(v116 + 8))(v77, v115);
      uint64_t v101 = sub_1D7A9BAC8();
      uint64_t v109 = v119;
      uint64_t v108 = v120;
      goto LABEL_12;
    case 2:
      uint64_t v102 = type metadata accessor for ISO18013SessionCryptarch.PrivateKey(0);
      sub_1D78614F8((uint64_t)&v0[*(int *)(v102 + 28)], (uint64_t)v57, &qword_1EA847650);
      uint64_t v103 = sub_1D7A9BD18();
      uint64_t v104 = *(void *)(v103 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v104 + 48))(v57, 1, v103) == 1)
      {
        __break(1u);
LABEL_15:
        __break(1u);
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
LABEL_18:
        __break(1u);
        JUMPOUT(0x1D7A5A054);
      }
      sub_1D7A9BCE8();
      (*(void (**)(char *, uint64_t))(v104 + 8))(v57, v103);
      uint64_t v101 = sub_1D7A9BAC8();
      (*(void (**)(char *, uint64_t))(v121 + 8))(v47, v122);
      return v101;
    case 3:
      uint64_t v105 = type metadata accessor for ISO18013SessionCryptarch.PrivateKey(0);
      sub_1D78614F8((uint64_t)&v0[*(int *)(v105 + 32)], (uint64_t)v37, &qword_1EA847648);
      uint64_t v106 = sub_1D7A9B7C8();
      uint64_t v107 = *(void *)(v106 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v107 + 48))(v37, 1, v106) == 1) {
        goto LABEL_15;
      }
      uint64_t v67 = v123;
      sub_1D7A9B798();
      (*(void (**)(char *, uint64_t))(v107 + 8))(v37, v106);
      uint64_t v101 = sub_1D7A9B758();
      uint64_t v109 = v124;
      uint64_t v108 = v125;
      goto LABEL_12;
    case 4:
      uint64_t v110 = (uint64_t)&v0[*(int *)(type metadata accessor for ISO18013SessionCryptarch.PrivateKey(0) + 36)];
      uint64_t v111 = v129;
      sub_1D78614F8(v110, v129, &qword_1EA847640);
      uint64_t v112 = sub_1D7A9BE28();
      uint64_t v113 = *(void *)(v112 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v113 + 48))(v111, 1, v112) == 1) {
        goto LABEL_16;
      }
      uint64_t v67 = v126;
      sub_1D7A9BDF8();
      (*(void (**)(uint64_t, uint64_t))(v113 + 8))(v111, v112);
      uint64_t v101 = sub_1D7A9BDB8();
      uint64_t v109 = v127;
      uint64_t v108 = v128;
LABEL_12:
      (*(void (**)(char *, uint64_t))(v109 + 8))(v67, v108);
      break;
    default:
      uint64_t v98 = type metadata accessor for ISO18013SessionCryptarch.PrivateKey(0);
      sub_1D78614F8((uint64_t)&v0[*(int *)(v98 + 20)], (uint64_t)v97, &qword_1EA847660);
      uint64_t v99 = sub_1D7A9BB58();
      uint64_t v100 = *(void *)(v99 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v100 + 48))(v97, 1, v99) == 1) {
        goto LABEL_17;
      }
      sub_1D7A9BB18();
      (*(void (**)(char *, uint64_t))(v100 + 8))(v97, v99);
      uint64_t v101 = sub_1D7A9BAC8();
      (*(void (**)(char *, uint64_t))(v118 + 8))(v87, v78);
      break;
  }
  return v101;
}

uint64_t type metadata accessor for ISO18013SessionCryptarch.PrivateKey(uint64_t a1)
{
  return sub_1D786E938(a1, (uint64_t *)&unk_1EA847738);
}

uint64_t ISO18013SessionCryptarch.PrivateKey.init(curve:)@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v2 = *a1;
  *a2 = v2;
  switch(v2)
  {
    case 1:
      uint64_t v4 = (int *)type metadata accessor for ISO18013SessionCryptarch.PrivateKey(0);
      uint64_t v9 = &a2[v4[5]];
      uint64_t v10 = sub_1D7A9BB58();
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
      uint64_t v11 = &a2[v4[6]];
      sub_1D7A9BC38();
      uint64_t v12 = sub_1D7A9BC48();
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 0, 1, v12);
      goto LABEL_4;
    case 2:
      uint64_t v4 = (int *)type metadata accessor for ISO18013SessionCryptarch.PrivateKey(0);
      uint64_t v15 = &a2[v4[5]];
      uint64_t v16 = sub_1D7A9BB58();
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
      uint64_t v17 = &a2[v4[6]];
      uint64_t v18 = sub_1D7A9BC48();
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
      uint64_t v19 = &a2[v4[7]];
      sub_1D7A9BD08();
      uint64_t v20 = sub_1D7A9BD18();
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v19, 0, 1, v20);
      goto LABEL_6;
    case 3:
      uint64_t v4 = (int *)type metadata accessor for ISO18013SessionCryptarch.PrivateKey(0);
      uint64_t v23 = &a2[v4[5]];
      uint64_t v24 = sub_1D7A9BB58();
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v23, 1, 1, v24);
      uint64_t v25 = &a2[v4[6]];
      uint64_t v26 = sub_1D7A9BC48();
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v25, 1, 1, v26);
      uint64_t v27 = &a2[v4[7]];
      uint64_t v28 = sub_1D7A9BD18();
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v27, 1, 1, v28);
      uint64_t v29 = &a2[v4[8]];
      sub_1D7A9B7B8();
      uint64_t v30 = sub_1D7A9B7C8();
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v29, 0, 1, v30);
      goto LABEL_8;
    case 4:
      uint64_t v37 = (int *)type metadata accessor for ISO18013SessionCryptarch.PrivateKey(0);
      uint64_t v38 = &a2[v37[5]];
      uint64_t v39 = sub_1D7A9BB58();
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v38, 1, 1, v39);
      uint64_t v40 = &a2[v37[6]];
      uint64_t v41 = sub_1D7A9BC48();
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v40, 1, 1, v41);
      uint64_t v42 = &a2[v37[7]];
      uint64_t v43 = sub_1D7A9BD18();
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v42, 1, 1, v43);
      uint64_t v44 = &a2[v37[8]];
      uint64_t v45 = sub_1D7A9B7C8();
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v44, 1, 1, v45);
      uint64_t v46 = &a2[v37[9]];
      sub_1D7A9BE18();
      uint64_t v47 = sub_1D7A9BE28();
      uint64_t v33 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56);
      uint64_t v34 = v47;
      uint64_t v35 = v46;
      uint64_t v36 = 0;
      goto LABEL_10;
    default:
      uint64_t v4 = (int *)type metadata accessor for ISO18013SessionCryptarch.PrivateKey(0);
      uint64_t v5 = &a2[v4[5]];
      sub_1D7A9BB48();
      uint64_t v6 = sub_1D7A9BB58();
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 0, 1, v6);
      uint64_t v7 = &a2[v4[6]];
      uint64_t v8 = sub_1D7A9BC48();
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
LABEL_4:
      uint64_t v13 = &a2[v4[7]];
      uint64_t v14 = sub_1D7A9BD18();
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
LABEL_6:
      uint64_t v21 = &a2[v4[8]];
      uint64_t v22 = sub_1D7A9B7C8();
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 1, 1, v22);
LABEL_8:
      uint64_t v31 = &a2[v4[9]];
      uint64_t v32 = sub_1D7A9BE28();
      uint64_t v33 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56);
      uint64_t v34 = v32;
      uint64_t v35 = v31;
      uint64_t v36 = 1;
LABEL_10:
      return v33(v35, v36, 1, v34);
  }
}

uint64_t ISO18013SessionCryptarch.PrivateKey.init(curve:data:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847640);
  MEMORY[0x1F4188790](v8 - 8, v9, v10, v11, v12, v13, v14, v15);
  uint64_t v17 = (char *)&v102 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847648);
  MEMORY[0x1F4188790](v18 - 8, v19, v20, v21, v22, v23, v24, v25);
  uint64_t v27 = (char *)&v102 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847650);
  MEMORY[0x1F4188790](v28 - 8, v29, v30, v31, v32, v33, v34, v35);
  uint64_t v37 = (char *)&v102 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847658);
  MEMORY[0x1F4188790](v38 - 8, v39, v40, v41, v42, v43, v44, v45);
  uint64_t v47 = (char *)&v102 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847660);
  MEMORY[0x1F4188790](v48 - 8, v49, v50, v51, v52, v53, v54, v55);
  uint64_t v57 = (char *)&v102 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = *a1;
  *a4 = v58;
  switch(v58)
  {
    case 1:
      uint64_t v62 = (int *)type metadata accessor for ISO18013SessionCryptarch.PrivateKey(0);
      uint64_t v65 = &a4[v62[5]];
      uint64_t v66 = sub_1D7A9BB58();
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v66 - 8) + 56))(v65, 1, 1, v66);
      uint64_t v102 = a2;
      uint64_t v103 = a3;
      uint64_t v67 = v104;
      sub_1D7A9BC28();
      if (v67)
      {
        int v68 = 0;
        int v69 = 0;
        int v70 = 0;
        goto LABEL_12;
      }
      uint64_t v92 = sub_1D7A9BC48();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v92 - 8) + 56))(v47, 0, 1, v92);
      sub_1D7871D78((uint64_t)v47, (uint64_t)&a4[v62[6]], &qword_1EA847658);
      goto LABEL_20;
    case 2:
      uint64_t v62 = (int *)type metadata accessor for ISO18013SessionCryptarch.PrivateKey(0);
      uint64_t v71 = &a4[v62[5]];
      uint64_t v72 = sub_1D7A9BB58();
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v72 - 8) + 56))(v71, 1, 1, v72);
      uint64_t v73 = &a4[v62[6]];
      uint64_t v74 = sub_1D7A9BC48();
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v74 - 8) + 56))(v73, 1, 1, v74);
      uint64_t v102 = a2;
      uint64_t v103 = a3;
      uint64_t v75 = v104;
      sub_1D7A9BCF8();
      if (v75)
      {
        int v69 = 0;
        int v70 = 0;
        int v68 = 1;
        goto LABEL_12;
      }
      uint64_t v95 = sub_1D7A9BD18();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v95 - 8) + 56))(v37, 0, 1, v95);
      sub_1D7871D78((uint64_t)v37, (uint64_t)&a4[v62[7]], &qword_1EA847650);
LABEL_22:
      uint64_t v96 = &a4[v62[8]];
      uint64_t v97 = sub_1D7A9B7C8();
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v97 - 8) + 56))(v96, 1, 1, v97);
      goto LABEL_24;
    case 3:
      uint64_t v62 = (int *)type metadata accessor for ISO18013SessionCryptarch.PrivateKey(0);
      uint64_t v76 = &a4[v62[5]];
      uint64_t v77 = sub_1D7A9BB58();
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 56))(v76, 1, 1, v77);
      uint64_t v78 = &a4[v62[6]];
      uint64_t v79 = sub_1D7A9BC48();
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v79 - 8) + 56))(v78, 1, 1, v79);
      uint64_t v80 = &a4[v62[7]];
      uint64_t v81 = sub_1D7A9BD18();
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v81 - 8) + 56))(v80, 1, 1, v81);
      uint64_t v102 = a2;
      uint64_t v103 = a3;
      uint64_t v82 = v104;
      sub_1D7A9B7A8();
      if (v82)
      {
        int v70 = 0;
        int v68 = 1;
        int v69 = 1;
        goto LABEL_12;
      }
      uint64_t v98 = sub_1D7A9B7C8();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v98 - 8) + 56))(v27, 0, 1, v98);
      sub_1D7871D78((uint64_t)v27, (uint64_t)&a4[v62[8]], &qword_1EA847648);
LABEL_24:
      uint64_t v99 = &a4[v62[9]];
      uint64_t v100 = sub_1D7A9BE28();
      return (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v100 - 8) + 56))(v99, 1, 1, v100);
    case 4:
      uint64_t v62 = (int *)type metadata accessor for ISO18013SessionCryptarch.PrivateKey(0);
      uint64_t v83 = &a4[v62[5]];
      uint64_t v84 = sub_1D7A9BB58();
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v84 - 8) + 56))(v83, 1, 1, v84);
      uint64_t v85 = &a4[v62[6]];
      uint64_t v86 = sub_1D7A9BC48();
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v86 - 8) + 56))(v85, 1, 1, v86);
      uint64_t v87 = &a4[v62[7]];
      uint64_t v88 = sub_1D7A9BD18();
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v88 - 8) + 56))(v87, 1, 1, v88);
      uint64_t v89 = &a4[v62[8]];
      uint64_t v90 = sub_1D7A9B7C8();
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v90 - 8) + 56))(v89, 1, 1, v90);
      uint64_t v102 = a2;
      uint64_t v103 = a3;
      uint64_t v91 = v104;
      sub_1D7A9BE08();
      if (v91)
      {
        int v68 = 1;
        int v69 = 1;
        int v70 = 1;
LABEL_12:
        type metadata accessor for ISO18013SessionCryptarch.PrivateKey(0);
        uint64_t result = sub_1D7871C4C((uint64_t)&a4[v62[5]], &qword_1EA847660);
        if (v68)
        {
          uint64_t result = sub_1D7871C4C((uint64_t)&a4[v62[6]], &qword_1EA847658);
          if (!v69)
          {
LABEL_14:
            if (!v70) {
              return result;
            }
            return sub_1D7871C4C((uint64_t)&a4[v62[8]], &qword_1EA847648);
          }
        }
        else if (!v69)
        {
          goto LABEL_14;
        }
        uint64_t result = sub_1D7871C4C((uint64_t)&a4[v62[7]], &qword_1EA847650);
        if (!v70) {
          return result;
        }
        return sub_1D7871C4C((uint64_t)&a4[v62[8]], &qword_1EA847648);
      }
      uint64_t v101 = sub_1D7A9BE28();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v101 - 8) + 56))(v17, 0, 1, v101);
      return sub_1D7871D78((uint64_t)v17, (uint64_t)&a4[v62[9]], &qword_1EA847640);
    default:
      uint64_t v102 = a2;
      uint64_t v103 = a3;
      uint64_t v59 = v104;
      uint64_t result = sub_1D7A9BB38();
      if (v59) {
        return result;
      }
      uint64_t v61 = sub_1D7A9BB58();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56))(v57, 0, 1, v61);
      uint64_t v62 = (int *)type metadata accessor for ISO18013SessionCryptarch.PrivateKey(0);
      sub_1D7871D78((uint64_t)v57, (uint64_t)&a4[v62[5]], &qword_1EA847660);
      uint64_t v63 = &a4[v62[6]];
      uint64_t v64 = sub_1D7A9BC48();
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v64 - 8) + 56))(v63, 1, 1, v64);
LABEL_20:
      uint64_t v93 = &a4[v62[7]];
      uint64_t v94 = sub_1D7A9BD18();
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v94 - 8) + 56))(v93, 1, 1, v94);
      goto LABEL_22;
  }
}

uint64_t ISO18013SessionCryptarch.PrivateKey.sharedSecretFromKeyAgreement(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v187 = a1;
  uint64_t v186 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847640);
  MEMORY[0x1F4188790](v2 - 8, v3, v4, v5, v6, v7, v8, v9);
  unint64_t v176 = (char *)&v169 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847618);
  MEMORY[0x1F4188790](v11 - 8, v12, v13, v14, v15, v16, v17, v18);
  uint64_t v183 = (uint64_t)&v169 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_1D7A9BDD8();
  uint64_t v184 = *(void *)(v20 - 8);
  uint64_t v185 = v20;
  MEMORY[0x1F4188790](v20, v21, v22, v23, v24, v25, v26, v27);
  long long v175 = (char *)&v169 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847648);
  MEMORY[0x1F4188790](v29 - 8, v30, v31, v32, v33, v34, v35, v36);
  uint64_t v174 = (char *)&v169 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847620);
  MEMORY[0x1F4188790](v38 - 8, v39, v40, v41, v42, v43, v44, v45);
  uint64_t v180 = (uint64_t)&v169 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = sub_1D7A9B778();
  uint64_t v181 = *(void *)(v47 - 8);
  uint64_t v182 = v47;
  MEMORY[0x1F4188790](v47, v48, v49, v50, v51, v52, v53, v54);
  unint64_t v173 = (char *)&v169 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847650);
  MEMORY[0x1F4188790](v56 - 8, v57, v58, v59, v60, v61, v62, v63);
  v172 = (char *)&v169 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847628);
  MEMORY[0x1F4188790](v65 - 8, v66, v67, v68, v69, v70, v71, v72);
  uint64_t v74 = (char *)&v169 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = sub_1D7A9BCC8();
  uint64_t v178 = *(void *)(v75 - 8);
  uint64_t v179 = v75;
  MEMORY[0x1F4188790](v75, v76, v77, v78, v79, v80, v81, v82);
  uint64_t v171 = (char *)&v169 - ((v83 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847658);
  MEMORY[0x1F4188790](v84 - 8, v85, v86, v87, v88, v89, v90, v91);
  uint64_t v170 = (uint64_t)&v169 - ((v92 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847630);
  MEMORY[0x1F4188790](v93 - 8, v94, v95, v96, v97, v98, v99, v100);
  uint64_t v102 = (char *)&v169 - ((v101 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v103 = sub_1D7A9BBF8();
  uint64_t v177 = *(void *)(v103 - 8);
  MEMORY[0x1F4188790](v103, v104, v105, v106, v107, v108, v109, v110);
  uint64_t v112 = (char *)&v169 - ((v111 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v113 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847660);
  MEMORY[0x1F4188790](v113 - 8, v114, v115, v116, v117, v118, v119, v120);
  uint64_t v122 = (char *)&v169 - ((v121 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v123 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847638);
  MEMORY[0x1F4188790](v123 - 8, v124, v125, v126, v127, v128, v129, v130);
  long long v132 = (char *)&v169 - ((v131 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v133 = sub_1D7A9BAF8();
  uint64_t v134 = *(void *)(v133 - 8);
  MEMORY[0x1F4188790](v133, v135, v136, v137, v138, v139, v140, v141);
  long long v143 = (char *)&v169 - ((v142 + 15) & 0xFFFFFFFFFFFFFFF0);
  switch(*v188)
  {
    case 1:
      uint64_t v155 = type metadata accessor for ISO18013SessionCryptarch.PublicKey(0);
      sub_1D78614F8(v187 + *(int *)(v155 + 24), (uint64_t)v102, &qword_1EA847630);
      uint64_t v156 = v177;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v177 + 48))(v102, 1, v103) == 1)
      {
        sub_1D7871C4C((uint64_t)v102, &qword_1EA847630);
        char v190 = 4;
        uint64_t v145 = 0x80000001D7ACC030;
        long long v146 = &v190;
        goto LABEL_12;
      }
      (*(void (**)(char *, char *, uint64_t))(v156 + 32))(v112, v102, v103);
      uint64_t v165 = type metadata accessor for ISO18013SessionCryptarch.PrivateKey(0);
      uint64_t v166 = v170;
      sub_1D78614F8((uint64_t)&v188[*(int *)(v165 + 24)], v170, &qword_1EA847658);
      uint64_t v167 = sub_1D7A9BC48();
      uint64_t v168 = *(void *)(v167 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v168 + 48))(v166, 1, v167) == 1) {
        goto LABEL_31;
      }
      sub_1D7A9BC08();
      (*(void (**)(char *, uint64_t))(v156 + 8))(v112, v103);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v168 + 8))(v166, v167);
    case 2:
      uint64_t v147 = type metadata accessor for ISO18013SessionCryptarch.PublicKey(0);
      sub_1D78614F8(v187 + *(int *)(v147 + 28), (uint64_t)v74, &qword_1EA847628);
      uint64_t v149 = v178;
      uint64_t v148 = v179;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v178 + 48))(v74, 1, v179) == 1)
      {
        sub_1D7871C4C((uint64_t)v74, &qword_1EA847628);
        char v191 = 4;
        uint64_t v145 = 0x80000001D7ACC010;
        long long v146 = &v191;
        goto LABEL_12;
      }
      uint64_t v158 = v171;
      (*(void (**)(char *, char *, uint64_t))(v149 + 32))(v171, v74, v148);
      uint64_t v159 = type metadata accessor for ISO18013SessionCryptarch.PrivateKey(0);
      uint64_t v122 = v172;
      sub_1D78614F8((uint64_t)&v188[*(int *)(v159 + 28)], (uint64_t)v172, &qword_1EA847650);
      uint64_t v160 = sub_1D7A9BD18();
      uint64_t v161 = *(void *)(v160 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v161 + 48))(v122, 1, v160) == 1)
      {
        __break(1u);
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
      sub_1D7A9BCD8();
LABEL_20:
      (*(void (**)(char *, uint64_t))(v149 + 8))(v158, v148);
      return (*(uint64_t (**)(char *, uint64_t))(v161 + 8))(v122, v160);
    case 3:
      uint64_t v150 = type metadata accessor for ISO18013SessionCryptarch.PublicKey(0);
      uint64_t v151 = v180;
      sub_1D78614F8(v187 + *(int *)(v150 + 32), v180, &qword_1EA847620);
      uint64_t v149 = v181;
      uint64_t v148 = v182;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v181 + 48))(v151, 1, v182) == 1)
      {
        sub_1D7871C4C(v151, &qword_1EA847620);
        char v192 = 4;
        uint64_t v152 = 0xD00000000000001FLL;
        uint64_t v145 = 0x80000001D7ACBFF0;
        long long v146 = &v192;
LABEL_13:
        ISO18013SessionError(_:code:fromError:)(v152, v145, v146, 0);
        return swift_willThrow();
      }
      uint64_t v158 = v173;
      (*(void (**)(char *, uint64_t, uint64_t))(v149 + 32))(v173, v151, v148);
      uint64_t v162 = type metadata accessor for ISO18013SessionCryptarch.PrivateKey(0);
      uint64_t v122 = v174;
      sub_1D78614F8((uint64_t)&v188[*(int *)(v162 + 32)], (uint64_t)v174, &qword_1EA847648);
      uint64_t v160 = sub_1D7A9B7C8();
      uint64_t v161 = *(void *)(v160 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v161 + 48))(v122, 1, v160) != 1)
      {
        sub_1D7A9B788();
        goto LABEL_20;
      }
      goto LABEL_28;
    case 4:
      uint64_t v153 = type metadata accessor for ISO18013SessionCryptarch.PublicKey(0);
      uint64_t v154 = v183;
      sub_1D78614F8(v187 + *(int *)(v153 + 36), v183, &qword_1EA847618);
      uint64_t v149 = v184;
      uint64_t v148 = v185;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v184 + 48))(v154, 1, v185) != 1)
      {
        uint64_t v158 = v175;
        (*(void (**)(char *, uint64_t, uint64_t))(v149 + 32))(v175, v154, v148);
        uint64_t v163 = type metadata accessor for ISO18013SessionCryptarch.PrivateKey(0);
        uint64_t v122 = v176;
        sub_1D78614F8((uint64_t)&v188[*(int *)(v163 + 36)], (uint64_t)v176, &qword_1EA847640);
        uint64_t v160 = sub_1D7A9BE28();
        uint64_t v161 = *(void *)(v160 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v161 + 48))(v122, 1, v160) != 1)
        {
          sub_1D7A9BDE8();
          goto LABEL_20;
        }
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
        JUMPOUT(0x1D7A5BCACLL);
      }
      sub_1D7871C4C(v154, &qword_1EA847618);
      char v193 = 4;
      uint64_t v152 = 0xD00000000000001DLL;
      uint64_t v145 = 0x80000001D7ACBFD0;
      long long v146 = &v193;
      goto LABEL_13;
    default:
      uint64_t v144 = type metadata accessor for ISO18013SessionCryptarch.PublicKey(0);
      sub_1D78614F8(v187 + *(int *)(v144 + 20), (uint64_t)v132, &qword_1EA847638);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v134 + 48))(v132, 1, v133) == 1)
      {
        sub_1D7871C4C((uint64_t)v132, &qword_1EA847638);
        char v189 = 4;
        uint64_t v145 = 0x80000001D7ACC050;
        long long v146 = &v189;
LABEL_12:
        uint64_t v152 = 0xD00000000000001CLL;
        goto LABEL_13;
      }
      (*(void (**)(char *, char *, uint64_t))(v134 + 32))(v143, v132, v133);
      uint64_t v164 = type metadata accessor for ISO18013SessionCryptarch.PrivateKey(0);
      sub_1D78614F8((uint64_t)&v188[*(int *)(v164 + 20)], (uint64_t)v122, &qword_1EA847660);
      uint64_t v160 = sub_1D7A9BB58();
      uint64_t v161 = *(void *)(v160 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v161 + 48))(v122, 1, v160) == 1) {
        goto LABEL_30;
      }
      sub_1D7A9BB08();
      (*(void (**)(char *, uint64_t))(v134 + 8))(v143, v133);
      return (*(uint64_t (**)(char *, uint64_t))(v161 + 8))(v122, v160);
  }
}

uint64_t ISO18013SessionCryptarch.localKey.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D78614F8(v1 + OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch_localKey, a1, &qword_1EA847668);
}

void ISO18013SessionCryptarch.remoteKey.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch__remoteKey);
  uint64_t v4 = v3 + *(void *)(*MEMORY[0x1E4FBBAB0] + *(void *)v3 + 16);
  uint64_t v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(void *)v3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  sub_1D7A5BF88(v4, a1);
  os_unfair_lock_unlock(v5);
}

void sub_1D7A5BDA8(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(*a1 + OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch__remoteKey);
  uint64_t v4 = v3 + *(void *)(*MEMORY[0x1E4FBBAB0] + *(void *)v3 + 16);
  uint64_t v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(void *)v3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  sub_1D7A5BF88(v4, a2);
  os_unfair_lock_unlock(v5);
}

uint64_t sub_1D7A5BE64(uint64_t a1, void *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8476A0);
  MEMORY[0x1F4188790](v4 - 8, v5, v6, v7, v8, v9, v10, v11);
  uint64_t v13 = &v18[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1D78614F8(a1, (uint64_t)v13, &qword_1EA8476A0);
  uint64_t v14 = *(void *)(*a2 + OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch__remoteKey);
  uint64_t v19 = v13;
  uint64_t v15 = v14 + *(void *)(*MEMORY[0x1E4FBBAB0] + *(void *)v14 + 16);
  uint64_t v16 = (os_unfair_lock_s *)(v14 + ((*(unsigned int *)(*(void *)v14 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v16);
  sub_1D7A68A6C(v15);
  os_unfair_lock_unlock(v16);
  return sub_1D7871C4C((uint64_t)v13, &qword_1EA8476A0);
}

uint64_t sub_1D7A5BF88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1D78614F8(a1, a2, &qword_1EA8476A0);
}

void ISO18013SessionCryptarch.role.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch_role);
}

void ISO18013SessionCryptarch.variant.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch_variant);
}

void ISO18013SessionCryptarch.readerSymmetricKey.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch__readerSymmetricKey);
  uint64_t v4 = v3 + *(void *)(*MEMORY[0x1E4FBBAB0] + *(void *)v3 + 16);
  uint64_t v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(void *)v3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  sub_1D7A68A8C(v4, a1);
  os_unfair_lock_unlock(v5);
}

void sub_1D7A5C09C(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(*a1 + OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch__readerSymmetricKey);
  uint64_t v4 = v3 + *(void *)(*MEMORY[0x1E4FBBAB0] + *(void *)v3 + 16);
  uint64_t v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(void *)v3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  sub_1D7A68A8C(v4, a2);
  os_unfair_lock_unlock(v5);
}

uint64_t sub_1D7A5C158(uint64_t a1, void *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847698);
  MEMORY[0x1F4188790](v4 - 8, v5, v6, v7, v8, v9, v10, v11);
  uint64_t v13 = &v18[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1D78614F8(a1, (uint64_t)v13, &qword_1EA847698);
  uint64_t v14 = *(void *)(*a2 + OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch__readerSymmetricKey);
  uint64_t v19 = v13;
  uint64_t v15 = v14 + *(void *)(*MEMORY[0x1E4FBBAB0] + *(void *)v14 + 16);
  uint64_t v16 = (os_unfair_lock_s *)(v14 + ((*(unsigned int *)(*(void *)v14 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v16);
  sub_1D7A68A54(v15);
  os_unfair_lock_unlock(v16);
  return sub_1D7871C4C((uint64_t)v13, &qword_1EA847698);
}

void ISO18013SessionCryptarch.deviceSymmetricKey.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch__deviceSymmetricKey);
  uint64_t v4 = v3 + *(void *)(*MEMORY[0x1E4FBBAB0] + *(void *)v3 + 16);
  uint64_t v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(void *)v3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  sub_1D7A5C514(v4, a1);
  os_unfair_lock_unlock(v5);
}

void sub_1D7A5C334(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(*a1 + OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch__deviceSymmetricKey);
  uint64_t v4 = v3 + *(void *)(*MEMORY[0x1E4FBBAB0] + *(void *)v3 + 16);
  uint64_t v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(void *)v3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  sub_1D7A5C514(v4, a2);
  os_unfair_lock_unlock(v5);
}

uint64_t sub_1D7A5C3F0(uint64_t a1, void *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847698);
  MEMORY[0x1F4188790](v4 - 8, v5, v6, v7, v8, v9, v10, v11);
  uint64_t v13 = &v18[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1D78614F8(a1, (uint64_t)v13, &qword_1EA847698);
  uint64_t v14 = *(void *)(*a2 + OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch__deviceSymmetricKey);
  uint64_t v19 = v13;
  uint64_t v15 = v14 + *(void *)(*MEMORY[0x1E4FBBAB0] + *(void *)v14 + 16);
  uint64_t v16 = (os_unfair_lock_s *)(v14 + ((*(unsigned int *)(*(void *)v14 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v16);
  sub_1D7A689A0(v15);
  os_unfair_lock_unlock(v16);
  return sub_1D7871C4C((uint64_t)v13, &qword_1EA847698);
}

uint64_t sub_1D7A5C514@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1D78614F8(a1, a2, &qword_1EA847698);
}

uint64_t ISO18013SessionCryptarch.sentMessageCounter.getter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch__sentMessageCounter);
  uint64_t v2 = v1 + 4;
  uint64_t v3 = v1 + 5;
  os_unfair_lock_lock(v1 + 5);
  sub_1D7A5C690(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

void sub_1D7A5C5B0(void *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(*a1 + OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch__sentMessageCounter);
  uint64_t v4 = v3 + 4;
  unsigned int v5 = v3 + 5;
  os_unfair_lock_lock(v3 + 5);
  sub_1D7A5C690(v4, &v6);
  os_unfair_lock_unlock(v5);
  *a2 = v6;
}

void sub_1D7A5C624(uint64_t a1, void *a2)
{
  uint64_t v2 = *(os_unfair_lock_s **)(*a2 + OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch__sentMessageCounter);
  uint64_t v3 = v2 + 4;
  uint64_t v4 = v2 + 5;
  os_unfair_lock_lock(v2 + 5);
  sub_1D7A68ABC(v3);
  os_unfair_lock_unlock(v4);
}

_DWORD *sub_1D7A5C690@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t ISO18013SessionCryptarch.receivedMessageCounter.getter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch__receivedMessageCounter);
  uint64_t v2 = v1 + 4;
  uint64_t v3 = v1 + 5;
  os_unfair_lock_lock(v1 + 5);
  sub_1D7A68AA4(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

void sub_1D7A5C704(void *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(*a1 + OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch__receivedMessageCounter);
  uint64_t v4 = v3 + 4;
  unsigned int v5 = v3 + 5;
  os_unfair_lock_lock(v3 + 5);
  sub_1D7A68AA4(v4, &v6);
  os_unfair_lock_unlock(v5);
  *a2 = v6;
}

void sub_1D7A5C778(uint64_t a1, void *a2)
{
  uint64_t v2 = *(os_unfair_lock_s **)(*a2 + OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch__receivedMessageCounter);
  uint64_t v3 = v2 + 4;
  uint64_t v4 = v2 + 5;
  os_unfair_lock_lock(v2 + 5);
  sub_1D7A68ABC(v3);
  os_unfair_lock_unlock(v4);
}

BOOL ISO18013SessionCryptarch.isReadyForDecryption.getter()
{
  return sub_1D7A5C954((void (*)(uint64_t))sub_1D7A5C7FC);
}

void sub_1D7A5C7FC(uint64_t a1@<X8>)
{
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch_role))
  {
    uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch__readerSymmetricKey);
    uint64_t v4 = v3 + *(void *)(*MEMORY[0x1E4FBBAB0] + *(void *)v3 + 16);
    unsigned int v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(void *)v3 + 48) + 3) & 0x1FFFFFFFCLL));
    os_unfair_lock_lock(v5);
    sub_1D7A68A8C(v4, a1);
  }
  else
  {
    uint64_t v6 = *(void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch__deviceSymmetricKey);
    uint64_t v7 = v6 + *(void *)(*MEMORY[0x1E4FBBAB0] + *(void *)v6 + 16);
    unsigned int v5 = (os_unfair_lock_s *)(v6 + ((*(unsigned int *)(*(void *)v6 + 48) + 3) & 0x1FFFFFFFCLL));
    os_unfair_lock_lock(v5);
    sub_1D7A5C514(v7, a1);
  }
  os_unfair_lock_unlock(v5);
}

BOOL ISO18013SessionCryptarch.isReadyForEncryption.getter()
{
  return sub_1D7A5C954((void (*)(uint64_t))sub_1D7A5CA2C);
}

BOOL sub_1D7A5C954(void (*a1)(uint64_t))
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847698);
  uint64_t v10 = MEMORY[0x1F4188790](v2 - 8, v3, v4, v5, v6, v7, v8, v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1(v10);
  uint64_t v13 = sub_1D7A9B8C8();
  BOOL v14 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13) != 1;
  sub_1D7871C4C((uint64_t)v12, &qword_1EA847698);
  return v14;
}

void sub_1D7A5CA2C(uint64_t a1@<X8>)
{
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch_role))
  {
    uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch__deviceSymmetricKey);
    uint64_t v4 = v3 + *(void *)(*MEMORY[0x1E4FBBAB0] + *(void *)v3 + 16);
    uint64_t v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(void *)v3 + 48) + 3) & 0x1FFFFFFFCLL));
    os_unfair_lock_lock(v5);
    sub_1D7A5C514(v4, a1);
  }
  else
  {
    uint64_t v6 = *(void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch__readerSymmetricKey);
    uint64_t v7 = v6 + *(void *)(*MEMORY[0x1E4FBBAB0] + *(void *)v6 + 16);
    uint64_t v5 = (os_unfair_lock_s *)(v6 + ((*(unsigned int *)(*(void *)v6 + 48) + 3) & 0x1FFFFFFFCLL));
    os_unfair_lock_lock(v5);
    sub_1D7A68A8C(v7, a1);
  }
  os_unfair_lock_unlock(v5);
}

uint64_t ISO18013SessionCryptarch.publicKey.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847668);
  MEMORY[0x1F4188790](v1 - 8, v2, v3, v4, v5, v6, v7, v8);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D78614F8(v0 + OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch_localKey, (uint64_t)v10, &qword_1EA847668);
  uint64_t v11 = type metadata accessor for ISO18013SessionCryptarch.PrivateKey(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11) == 1)
  {
    sub_1D7871C4C((uint64_t)v10, &qword_1EA847668);
    return 0;
  }
  else
  {
    uint64_t v12 = ISO18013SessionCryptarch.PrivateKey.publicKeyData.getter();
    sub_1D7A63374((uint64_t)v10, type metadata accessor for ISO18013SessionCryptarch.PrivateKey);
  }
  return v12;
}

uint64_t ISO18013SessionCryptarch.__allocating_init(role:curve:variant:localKey:)(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10 = swift_allocObject();
  ISO18013SessionCryptarch.init(role:curve:variant:localKey:)(a1, a2, a3, a4, a5);
  return v10;
}

void *ISO18013SessionCryptarch.init(role:curve:variant:localKey:)(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, unint64_t a5)
{
  uint64_t v67 = a4;
  unint64_t v68 = a5;
  v62[2] = *v5;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847668);
  MEMORY[0x1F4188790](v9 - 8, v10, v11, v12, v13, v14, v15, v16);
  uint64_t v64 = (char *)v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847698);
  MEMORY[0x1F4188790](v18 - 8, v19, v20, v21, v22, v23, v24, v25);
  uint64_t v27 = (char *)v62 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8476A0);
  MEMORY[0x1F4188790](v28 - 8, v29, v30, v31, v32, v33, v34, v35);
  uint64_t v37 = (char *)v62 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v65 = *a1;
  int v63 = *a2;
  int v69 = *a3;
  uint64_t v38 = OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch__remoteKey;
  uint64_t v39 = type metadata accessor for ISO18013SessionCryptarch.PublicKey(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v37, 1, 1, v39);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8476A8);
  uint64_t v40 = swift_allocObject();
  *(_DWORD *)(v40 + ((*(unsigned int *)(*(void *)v40 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  uint64_t v41 = (void *)MEMORY[0x1E4FBBAB0];
  sub_1D78614F8((uint64_t)v37, v40 + *(void *)(*MEMORY[0x1E4FBBAB0] + *(void *)v40 + 16), &qword_1EA8476A0);
  sub_1D7871C4C((uint64_t)v37, &qword_1EA8476A0);
  v62[3] = v38;
  *(void *)((char *)v5 + v38) = v40;
  uint64_t v42 = OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch__readerSymmetricKey;
  uint64_t v43 = sub_1D7A9B8C8();
  uint64_t v44 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56);
  v44(v27, 1, 1, v43);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8476B0);
  uint64_t v45 = swift_allocObject();
  *(_DWORD *)(v45 + ((*(unsigned int *)(*(void *)v45 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  sub_1D78614F8((uint64_t)v27, v45 + *(void *)(*v41 + *(void *)v45 + 16), &qword_1EA847698);
  sub_1D7871C4C((uint64_t)v27, &qword_1EA847698);
  v62[1] = v42;
  *(void *)((char *)v5 + v42) = v45;
  uint64_t v46 = OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch__deviceSymmetricKey;
  v44(v27, 1, 1, v43);
  uint64_t v47 = swift_allocObject();
  *(_DWORD *)(v47 + ((*(unsigned int *)(*(void *)v47 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  sub_1D78614F8((uint64_t)v27, v47 + *(void *)(*MEMORY[0x1E4FBBAB0] + *(void *)v47 + 16), &qword_1EA847698);
  sub_1D7871C4C((uint64_t)v27, &qword_1EA847698);
  *(void *)((char *)v5 + v46) = v47;
  uint64_t v48 = OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch__sentMessageCounter;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8476B8);
  uint64_t v49 = swift_allocObject();
  *(void *)(v49 + 16) = 1;
  *(void *)((char *)v5 + v48) = v49;
  uint64_t v50 = OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch__receivedMessageCounter;
  uint64_t v51 = swift_allocObject();
  *(void *)(v51 + 16) = 1;
  *(void *)((char *)v5 + v50) = v51;
  *((unsigned char *)v5 + OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch_role) = v65;
  int v52 = v69;
  *((unsigned char *)v5 + OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch_variant) = v69;
  if (v52)
  {
    sub_1D78607E8(v67, v68);
    uint64_t v53 = (char *)v5 + OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch_localKey;
    uint64_t v54 = type metadata accessor for ISO18013SessionCryptarch.PrivateKey(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v53, 1, 1, v54);
  }
  else
  {
    unsigned __int8 v71 = v63;
    uint64_t v56 = v67;
    unint64_t v55 = v68;
    sub_1D7860790(v67, v68);
    uint64_t v57 = v64;
    uint64_t v58 = v66;
    ISO18013SessionCryptarch.PrivateKey.init(curve:data:)(&v71, v56, v55, v64);
    if (v58)
    {
      char v70 = 3;
      id v59 = v58;
      ISO18013SessionError(_:code:fromError:)(0xD000000000000024, 0x80000001D7ACC070, &v70, v58);

      swift_willThrow();
      sub_1D78607E8(v56, v55);

      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_deallocPartialClassInstance();
    }
    else
    {
      sub_1D78607E8(v56, v55);
      uint64_t v60 = type metadata accessor for ISO18013SessionCryptarch.PrivateKey(0);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v60 - 8) + 56))(v57, 0, 1, v60);
      sub_1D7871D78((uint64_t)v57, (uint64_t)v5 + OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch_localKey, &qword_1EA847668);
    }
  }
  return v5;
}

uint64_t ISO18013SessionCryptarch.__allocating_init(role:variant:curve:)(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v6 = swift_allocObject();
  ISO18013SessionCryptarch.init(role:variant:curve:)(a1, a2, a3);
  return v6;
}

uint64_t ISO18013SessionCryptarch.init(role:variant:curve:)(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847668);
  MEMORY[0x1F4188790](v7 - 8, v8, v9, v10, v11, v12, v13, v14);
  uint64_t v58 = &v56[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847698);
  MEMORY[0x1F4188790](v16 - 8, v17, v18, v19, v20, v21, v22, v23);
  uint64_t v25 = &v56[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8476A0);
  MEMORY[0x1F4188790](v26 - 8, v27, v28, v29, v30, v31, v32, v33);
  uint64_t v35 = &v56[-((v34 + 15) & 0xFFFFFFFFFFFFFFF0)];
  LODWORD(v34) = *a2;
  int v59 = *a1;
  int v60 = v34;
  int v57 = *a3;
  uint64_t v36 = OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch__remoteKey;
  uint64_t v37 = type metadata accessor for ISO18013SessionCryptarch.PublicKey(0);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v35, 1, 1, v37);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8476A8);
  uint64_t v38 = swift_allocObject();
  *(_DWORD *)(v38 + ((*(unsigned int *)(*(void *)v38 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  uint64_t v39 = (void *)MEMORY[0x1E4FBBAB0];
  sub_1D78614F8((uint64_t)v35, v38 + *(void *)(*MEMORY[0x1E4FBBAB0] + *(void *)v38 + 16), &qword_1EA8476A0);
  sub_1D7871C4C((uint64_t)v35, &qword_1EA8476A0);
  *(void *)(v3 + v36) = v38;
  uint64_t v40 = OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch__readerSymmetricKey;
  uint64_t v41 = sub_1D7A9B8C8();
  uint64_t v42 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56);
  v42(v25, 1, 1, v41);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8476B0);
  uint64_t v43 = swift_allocObject();
  *(_DWORD *)(v43 + ((*(unsigned int *)(*(void *)v43 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  sub_1D78614F8((uint64_t)v25, v43 + *(void *)(*v39 + *(void *)v43 + 16), &qword_1EA847698);
  sub_1D7871C4C((uint64_t)v25, &qword_1EA847698);
  *(void *)(v3 + v40) = v43;
  uint64_t v44 = OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch__deviceSymmetricKey;
  v42(v25, 1, 1, v41);
  uint64_t v45 = swift_allocObject();
  *(_DWORD *)(v45 + ((*(unsigned int *)(*(void *)v45 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  sub_1D78614F8((uint64_t)v25, v45 + *(void *)(*v39 + *(void *)v45 + 16), &qword_1EA847698);
  sub_1D7871C4C((uint64_t)v25, &qword_1EA847698);
  *(void *)(v3 + v44) = v45;
  uint64_t v46 = OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch__sentMessageCounter;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8476B8);
  uint64_t v47 = swift_allocObject();
  *(void *)(v47 + 16) = 1;
  *(void *)(v3 + v46) = v47;
  uint64_t v48 = OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch__receivedMessageCounter;
  uint64_t v49 = swift_allocObject();
  *(void *)(v49 + 16) = 1;
  *(void *)(v3 + v48) = v49;
  *(unsigned char *)(v3 + OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch_role) = v59;
  int v50 = v60;
  *(unsigned char *)(v3 + OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch_variant) = v60;
  if (v50)
  {
    uint64_t v51 = v3 + OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch_localKey;
    uint64_t v52 = type metadata accessor for ISO18013SessionCryptarch.PrivateKey(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56))(v51, 1, 1, v52);
  }
  else
  {
    unsigned __int8 v61 = v57;
    uint64_t v53 = v58;
    ISO18013SessionCryptarch.PrivateKey.init(curve:)(&v61, v58);
    uint64_t v54 = type metadata accessor for ISO18013SessionCryptarch.PrivateKey(0);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v53, 0, 1, v54);
    sub_1D7871D78((uint64_t)v53, v3 + OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch_localKey, &qword_1EA847668);
  }
  return v3;
}

void ISO18013SessionCryptarch.setRemoteKey(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8476A0);
  MEMORY[0x1F4188790](v6 - 8, v7, v8, v9, v10, v11, v12, v13);
  uint64_t v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847668);
  MEMORY[0x1F4188790](v16 - 8, v17, v18, v19, v20, v21, v22, v23);
  uint64_t v25 = (char *)&v52 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for ISO18013SessionCryptarch.PrivateKey(0);
  uint64_t v27 = *(void *)(v26 - 8);
  MEMORY[0x1F4188790](v26, v28, v29, v30, v31, v32, v33, v34);
  uint64_t v36 = (unsigned __int8 *)&v52 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v2 + OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch_variant))
  {
    char v57 = 1;
    ISO18013SessionError(_:code:fromError:)(0xD000000000000021, 0x80000001D7ACC0A0, &v57, 0);
    swift_willThrow();
    return;
  }
  uint64_t v53 = v3;
  sub_1D7860790(a1, a2);
  sub_1D7A61088(a1, a2, 26, (void *)0xD000000000000018, 0x80000001D7ACC580);
  sub_1D78607E8(a1, a2);
  sub_1D78614F8(v2 + OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch_localKey, (uint64_t)v25, &qword_1EA847668);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26) == 1)
  {
    sub_1D7871C4C((uint64_t)v25, &qword_1EA847668);
    char v56 = 4;
    id v37 = ISO18013SessionError(_:code:fromError:)(0xD000000000000023, 0x80000001D7ACC0D0, &v56, 0);
    swift_willThrow();
LABEL_7:
    char v55 = 4;
    id v39 = v37;
    ISO18013SessionError(_:code:fromError:)(0xD000000000000023, 0x80000001D7ACC100, &v55, v37);

    swift_willThrow();
    return;
  }
  sub_1D7A632C0((uint64_t)v25, (uint64_t)v36, type metadata accessor for ISO18013SessionCryptarch.PrivateKey);
  unsigned __int8 v54 = *v36;
  sub_1D7860790(a1, a2);
  uint64_t v38 = v53;
  ISO18013SessionCryptarch.PublicKey.init(curve:data:)(&v54, a1, a2, v15);
  id v37 = v38;
  if (v38)
  {
    sub_1D7A63374((uint64_t)v36, type metadata accessor for ISO18013SessionCryptarch.PrivateKey);
    goto LABEL_7;
  }
  uint64_t v40 = type metadata accessor for ISO18013SessionCryptarch.PublicKey(0);
  uint64_t v41 = (*(uint64_t (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v15, 0, 1, v40);
  MEMORY[0x1F4188790](v41, v42, v43, v44, v45, v46, v47, v48);
  *(&v52 - 2) = (uint64_t)v15;
  uint64_t v50 = v49 + *(void *)(*MEMORY[0x1E4FBBAB0] + *(void *)v49 + 16);
  uint64_t v51 = (os_unfair_lock_s *)(v49 + ((*(unsigned int *)(*(void *)v49 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v51);
  sub_1D7A61034(v50);
  os_unfair_lock_unlock(v51);
  sub_1D7871C4C((uint64_t)v15, &qword_1EA8476A0);
  sub_1D7A63374((uint64_t)v36, type metadata accessor for ISO18013SessionCryptarch.PrivateKey);
}

void ISO18013SessionCryptarch.deriveSessionKeys(sessionTranscript:ikm:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v83 = a4;
  uint64_t v79 = a3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8476A0);
  MEMORY[0x1F4188790](v7 - 8, v8, v9, v10, v11, v12, v13, v14);
  uint64_t v81 = (char *)&v77 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for ISO18013SessionCryptarch.PublicKey(0);
  uint64_t v80 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16, v17, v18, v19, v20, v21, v22, v23);
  uint64_t v25 = (char *)&v77 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847668);
  MEMORY[0x1F4188790](v26 - 8, v27, v28, v29, v30, v31, v32, v33);
  uint64_t v35 = (char *)&v77 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for ISO18013SessionCryptarch.PrivateKey(0);
  uint64_t v37 = *(void *)(v36 - 8);
  MEMORY[0x1F4188790](v36, v38, v39, v40, v41, v42, v43, v44);
  uint64_t v46 = (char *)&v77 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7860790(a1, a2);
  sub_1D7A61088(a1, a2, 22, (void *)0xD000000000000014, 0x80000001D7ACC560);
  unint64_t v77 = a1;
  unint64_t v78 = a2;
  sub_1D78607E8(a1, a2);
  uint64_t v84 = v4;
  if (*(unsigned char *)(v4 + OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch_variant))
  {
    if (*(unsigned char *)(v4 + OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch_variant) == 1)
    {
      unint64_t v47 = v83;
      if (v83 >> 60 == 15)
      {
        char v87 = 2;
        uint64_t v48 = 0xD000000000000022;
        uint64_t v49 = 0x80000001D7ACC150;
        uint64_t v50 = &v87;
LABEL_9:
        ISO18013SessionError(_:code:fromError:)(v48, v49, v50, 0);
        swift_willThrow();
        return;
      }
      uint64_t v55 = v79;
      sub_1D786E9D8(v79, v83);
      sub_1D7A6142C(v55, v47, (void *)0x203A4D4B49, 0xE500000000000000);
      sub_1D7871BDC(v55, v47);
      sub_1D7A5EAEC(v77, v78, v55, v47);
    }
    else
    {
      unint64_t v54 = v83;
      if (v83 >> 60 == 15)
      {
        char v88 = 2;
        uint64_t v48 = 0xD000000000000018;
        uint64_t v49 = 0x80000001D7ACC130;
        uint64_t v50 = &v88;
        goto LABEL_9;
      }
      uint64_t v68 = v79;
      sub_1D786E9D8(v79, v83);
      sub_1D7A6142C(v68, v54, (void *)0x203A4D4B49, 0xE500000000000000);
      sub_1D7871BDC(v68, v54);
      sub_1D7A62A94(v68, v54);
    }
  }
  else
  {
    unint64_t v83 = v16;
    uint64_t v52 = v80;
    uint64_t v51 = (uint64_t)v81;
    uint64_t v53 = v84;
    sub_1D78614F8(v84 + OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch_localKey, (uint64_t)v35, &qword_1EA847668);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36) == 1)
    {
      sub_1D7871C4C((uint64_t)v35, &qword_1EA847668);
      char v86 = 4;
      uint64_t v48 = 0xD000000000000023;
      uint64_t v49 = 0x80000001D7ACC0D0;
      uint64_t v50 = &v86;
      goto LABEL_9;
    }
    uint64_t v56 = sub_1D7A632C0((uint64_t)v35, (uint64_t)v46, type metadata accessor for ISO18013SessionCryptarch.PrivateKey);
    MEMORY[0x1F4188790](v56, v57, v58, v59, v60, v61, v62, v63);
    *(&v77 - 2) = (unint64_t)v46;
    sub_1D7A62340(sub_1D7A63274);
    uint64_t v64 = *(void *)(v53 + OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch__remoteKey);
    uint64_t v65 = v64 + *(void *)(*MEMORY[0x1E4FBBAB0] + *(void *)v64 + 16);
    uint64_t v66 = (os_unfair_lock_s *)(v64 + ((*(unsigned int *)(*(void *)v64 + 48) + 3) & 0x1FFFFFFFCLL));
    os_unfair_lock_lock(v66);
    uint64_t v67 = v82;
    sub_1D7A5BF88(v65, v51);
    if (v67)
    {
      os_unfair_lock_unlock(v66);
      __break(1u);
    }
    else
    {
      os_unfair_lock_unlock(v66);
      if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t))(v52 + 48))(v51, 1, v83) == 1)
      {
        sub_1D7871C4C(v51, &qword_1EA8476A0);
        char v85 = 1;
        ISO18013SessionError(_:code:fromError:)(0xD000000000000038, 0x80000001D7ACC180, &v85, 0);
        swift_willThrow();
      }
      else
      {
        uint64_t v69 = sub_1D7A632C0(v51, (uint64_t)v25, type metadata accessor for ISO18013SessionCryptarch.PublicKey);
        MEMORY[0x1F4188790](v69, v70, v71, v72, v73, v74, v75, v76);
        *(&v77 - 2) = (unint64_t)v25;
        sub_1D7A62340(sub_1D7A63328);
        sub_1D7A5E4F8(v77, v78, (uint64_t)v46, (uint64_t)v25);
        sub_1D7A63374((uint64_t)v25, type metadata accessor for ISO18013SessionCryptarch.PublicKey);
      }
      sub_1D7A63374((uint64_t)v46, type metadata accessor for ISO18013SessionCryptarch.PrivateKey);
    }
  }
}

uint64_t sub_1D7A5E3E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  sub_1D7A9CC48();
  uint64_t v7 = swift_bridgeObjectRelease();
  uint64_t v12 = a3;
  uint64_t v8 = a5(v7);
  unint64_t v10 = v9;
  sub_1D79F1750(v8, v9);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF7900);
  sub_1D7871DDC((unint64_t *)&qword_1EBDF7910, (uint64_t *)&unk_1EBDF7900);
  sub_1D7A9BF38();
  swift_bridgeObjectRelease();
  sub_1D78607E8(v8, v10);
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  return v12;
}

void sub_1D7A5E4F8(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = v4;
  unint64_t v91 = a2;
  uint64_t v86 = *v6;
  unint64_t v87 = a1;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847698);
  uint64_t v16 = MEMORY[0x1F4188790](v8 - 8, v9, v10, v11, v12, v13, v14, v15);
  uint64_t v18 = (char *)&v78 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16, v19, v20, v21, v22, v23, v24, v25);
  uint64_t v27 = (char *)&v78 - v26;
  uint64_t v28 = sub_1D7A9B888();
  uint64_t v29 = *(void *)(v28 - 8);
  MEMORY[0x1F4188790](v28, v30, v31, v32, v33, v34, v35, v36);
  uint64_t v38 = (char *)&v78 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = ISO18013SessionCryptarch.PrivateKey.sharedSecretFromKeyAgreement(with:)(a4, (uint64_t)v38);
  if (v5)
  {
    LOBYTE(v89) = 5;
    id v47 = v5;
    ISO18013SessionError(_:code:fromError:)(0xD000000000000015, 0x80000001D7ACC4E0, (char *)&v89, v5);

    swift_willThrow();
  }
  else
  {
    uint64_t v81 = v27;
    uint64_t v82 = v29;
    uint64_t v84 = v18;
    char v85 = v6;
    uint64_t v83 = v28;
    MEMORY[0x1F4188790](v39, v40, v41, v42, v43, v44, v45, v46);
    sub_1D7A62340(sub_1D7A689F4);
    unint64_t v48 = sub_1D7A626A4(v87, v91);
    unint64_t v50 = v49;
    sub_1D7860790(v48, v49);
    sub_1D7A6142C(v48, v50, (void *)0x203A746C6153, 0xE600000000000000);
    sub_1D78607E8(v48, v50);
    sub_1D7A9BD88();
    unint64_t v91 = v48;
    unint64_t v89 = v48;
    unint64_t v90 = v50;
    unint64_t v87 = v50;
    if (qword_1EA841640 != -1) {
      swift_once();
    }
    long long v88 = xmmword_1EA847598;
    uint64_t v51 = sub_1D7885664(&qword_1EA8424A0, MEMORY[0x1E4F25170]);
    sub_1D7885ADC();
    uint64_t v86 = v51;
    uint64_t v80 = v38;
    uint64_t v52 = (uint64_t)v81;
    sub_1D7A9B878();
    uint64_t v53 = sub_1D7A9B8C8();
    uint64_t v79 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56);
    uint64_t v54 = v79(v52, 0, 1, v53);
    uint64_t v78 = (uint64_t)&v78;
    MEMORY[0x1F4188790](v54, v55, v56, v57, v58, v59, v60, v61);
    uint64_t v63 = v62 + *(void *)(*MEMORY[0x1E4FBBAB0] + *(void *)v62 + 16);
    uint64_t v64 = (os_unfair_lock_s *)(v62 + ((*(unsigned int *)(*(void *)v62 + 48) + 3) & 0x1FFFFFFFCLL));
    os_unfair_lock_lock(v64);
    sub_1D7A68A54(v63);
    os_unfair_lock_unlock(v64);
    sub_1D7871C4C(v52, &qword_1EA847698);
    unint64_t v89 = v91;
    unint64_t v90 = v87;
    if (qword_1EA841648 != -1) {
      swift_once();
    }
    long long v88 = xmmword_1EA8475B0;
    uint64_t v65 = (uint64_t)v84;
    uint64_t v66 = v80;
    sub_1D7A9B878();
    uint64_t v67 = v79(v65, 0, 1, v53);
    MEMORY[0x1F4188790](v67, v68, v69, v70, v71, v72, v73, v74);
    uint64_t v76 = v75 + *(void *)(*MEMORY[0x1E4FBBAB0] + *(void *)v75 + 16);
    unint64_t v77 = (os_unfair_lock_s *)(v75 + ((*(unsigned int *)(*(void *)v75 + 48) + 3) & 0x1FFFFFFFCLL));
    os_unfair_lock_lock(v77);
    sub_1D7A68A54(v76);
    os_unfair_lock_unlock(v77);
    sub_1D7871C4C(v65, &qword_1EA847698);
    sub_1D78607E8(v91, v87);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v66, v83);
  }
}

uint64_t sub_1D7A5EAEC(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v118 = *v4;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847698);
  uint64_t v17 = MEMORY[0x1F4188790](v9 - 8, v10, v11, v12, v13, v14, v15, v16);
  uint64_t v114 = (char *)&v109 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17, v19, v20, v21, v22, v23, v24, v25);
  uint64_t v27 = (char *)&v109 - v26;
  uint64_t v120 = sub_1D7A9B8C8();
  uint64_t v28 = *(void *)(v120 - 8);
  uint64_t v36 = MEMORY[0x1F4188790](v120, v29, v30, v31, v32, v33, v34, v35);
  uint64_t v116 = (char *)&v109 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = MEMORY[0x1F4188790](v36, v38, v39, v40, v41, v42, v43, v44);
  id v47 = (char *)&v109 - v46;
  MEMORY[0x1F4188790](v45, v48, v49, v50, v51, v52, v53, v54);
  uint64_t v56 = (char *)&v109 - v55;
  uint64_t v122 = a3;
  unint64_t v123 = a4;
  sub_1D7860790(a3, a4);
  sub_1D7A9B8A8();
  uint64_t v57 = sub_1D7A626A4(a1, a2);
  unint64_t v59 = v58;
  uint64_t v122 = v57;
  unint64_t v123 = v58;
  if (qword_1EA841650 != -1) {
    swift_once();
  }
  long long v121 = xmmword_1EA8475C8;
  uint64_t v60 = sub_1D7A9BD88();
  uint64_t v61 = sub_1D7885664(&qword_1EA8424A0, MEMORY[0x1E4F25170]);
  sub_1D7885ADC();
  uint64_t v111 = v61;
  uint64_t v112 = v60;
  sub_1D7A9B9F8();
  uint64_t v119 = v56;
  uint64_t v62 = *(void (**)(char *, char *, uint64_t))(v28 + 16);
  uint64_t v115 = v47;
  uint64_t v63 = v120;
  uint64_t v110 = v62;
  v62(v27, v47, v120);
  uint64_t v117 = v28;
  uint64_t v109 = *(uint64_t (**)(char *, void, uint64_t, uint64_t))(v28 + 56);
  uint64_t v64 = v109(v27, 0, 1, v63);
  MEMORY[0x1F4188790](v64, v65, v66, v67, v68, v69, v70, v71);
  uint64_t v73 = v72 + *(void *)(*MEMORY[0x1E4FBBAB0] + *(void *)v72 + 16);
  uint64_t v74 = (os_unfair_lock_s *)(v72 + ((*(unsigned int *)(*(void *)v72 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v74);
  sub_1D7A68A54(v73);
  os_unfair_lock_unlock(v74);
  sub_1D7871C4C((uint64_t)v27, &qword_1EA847698);
  uint64_t v113 = v57;
  uint64_t v122 = v57;
  unint64_t v123 = v59;
  if (qword_1EA841658 != -1) {
    swift_once();
  }
  long long v121 = xmmword_1EA8475E0;
  uint64_t v75 = v116;
  sub_1D7A9B9F8();
  uint64_t v76 = v114;
  uint64_t v77 = v120;
  v110(v114, v75, v120);
  uint64_t v78 = (uint64_t)v76;
  uint64_t v79 = v109(v76, 0, 1, v77);
  MEMORY[0x1F4188790](v79, v80, v81, v82, v83, v84, v85, v86);
  uint64_t v88 = v87 + *(void *)(*MEMORY[0x1E4FBBAB0] + *(void *)v87 + 16);
  unint64_t v89 = (os_unfair_lock_s *)(v87 + ((*(unsigned int *)(*(void *)v87 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v89);
  sub_1D7A68A54(v88);
  os_unfair_lock_unlock(v89);
  uint64_t v90 = sub_1D7871C4C(v78, &qword_1EA847698);
  MEMORY[0x1F4188790](v90, v91, v92, v93, v94, v95, v96, v97);
  uint64_t v98 = v115;
  sub_1D7A62340(sub_1D7A689FC);
  MEMORY[0x1F4188790](v99, v100, v101, v102, v103, v104, v105, v106);
  sub_1D7A62340(sub_1D7A68A28);
  sub_1D78607E8(v113, v59);
  uint64_t v107 = *(void (**)(char *, uint64_t))(v117 + 8);
  v107(v119, v77);
  v107(v75, v77);
  return ((uint64_t (*)(char *, uint64_t))v107)(v98, v77);
}

uint64_t sub_1D7A5F110()
{
  return 0x7320646572616853;
}

uint64_t static ISO18013SessionCryptarch.getSharedSecretData(sharedSecret:)(uint64_t a1)
{
  return sub_1D7A5FE8C(a1, (uint64_t)sub_1D7A60CD0, MEMORY[0x1E4F24FE0]);
}

uint64_t static ISO18013SessionCryptarch.getKeyData(key:)(uint64_t a1)
{
  return sub_1D7A5FE8C(a1, (uint64_t)sub_1D7A60CD0, MEMORY[0x1E4F24FF8]);
}

uint64_t sub_1D7A5F224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

void ISO18013SessionCryptarch.decrypt(data:)(uint64_t a1, unint64_t a2)
{
  uint64_t v97 = *v2;
  uint64_t v5 = sub_1D7A9B9E8();
  uint64_t v95 = *(void *)(v5 - 8);
  uint64_t v96 = v5;
  MEMORY[0x1F4188790](v5, v6, v7, v8, v9, v10, v11, v12);
  uint64_t v99 = (char *)&v90 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1D7A9B9A8();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v100 = v14;
  uint64_t v101 = v15;
  uint64_t v23 = MEMORY[0x1F4188790](v14, v16, v17, v18, v19, v20, v21, v22);
  unint64_t v98 = (unint64_t)&v90 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23, v25, v26, v27, v28, v29, v30, v31);
  uint64_t v33 = (char *)&v90 - v32;
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847698);
  MEMORY[0x1F4188790](v34 - 8, v35, v36, v37, v38, v39, v40, v41);
  uint64_t v43 = (char *)&v90 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = sub_1D7A9B8C8();
  uint64_t v45 = *(void *)(v44 - 8);
  MEMORY[0x1F4188790](v44, v46, v47, v48, v49, v50, v51, v52);
  uint64_t v54 = (char *)&v90 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7A5C7FC((uint64_t)v43);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44) == 1)
  {
    sub_1D7871C4C((uint64_t)v43, &qword_1EA847698);
    LOBYTE(v104[0]) = 1;
    ISO18013SessionError(_:code:fromError:)(0xD00000000000002ALL, 0x80000001D7ACC1C0, (char *)v104, 0);
    swift_willThrow();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v54, v43, v44);
    sub_1D7860790(a1, a2);
    sub_1D7A61FC4(a1, a2, 18, 0xD000000000000010);
    sub_1D78607E8(a1, a2);
    uint64_t v55 = v105;
    sub_1D7A5F9EC();
    if (v55)
    {
      (*(void (**)(char *, uint64_t))(v45 + 8))(v54, v44);
    }
    else
    {
      uint64_t v56 = sub_1D7A633D4(a1, a2);
      unint64_t v58 = v57;
      unint64_t v60 = v59;
      uint64_t v92 = v45;
      uint64_t v93 = v44;
      uint64_t v105 = v54;
      uint64_t v62 = v61;
      uint64_t v63 = swift_retain();
      sub_1D7A61824(v63, (uint64_t (*)(uint64_t))sub_1D7A5FCE0);
      uint64_t v64 = swift_release();
      unint64_t v94 = v60;
      MEMORY[0x1F4188790](v64, v65, v66, v67, v68, v69, v70, v71);
      uint64_t v72 = (uint64_t)v97;
      *(&v90 - 2) = (uint64_t)v33;
      *(&v90 - 1) = v72;
      sub_1D7A62340((uint64_t (*)(void))sub_1D7A635A8);
      unint64_t v73 = v94;
      sub_1D7860790(v56, v58);
      sub_1D7A61FC4(v56, v58, 24, 0xD000000000000016);
      sub_1D78607E8(v56, v58);
      sub_1D7860790(v62, v73);
      sub_1D7A61B88(v62, v73, 0x6974707972636544);
      sub_1D78607E8(v62, v73);
      uint64_t v74 = *(void (**)(unint64_t, char *, uint64_t))(v101 + 16);
      uint64_t v97 = v33;
      uint64_t v75 = v33;
      uint64_t v76 = v100;
      v74(v98, v75, v100);
      v104[0] = v56;
      v104[1] = v58;
      uint64_t v102 = v62;
      unint64_t v103 = v73;
      uint64_t v91 = v56;
      sub_1D7860790(v56, v58);
      uint64_t v90 = v62;
      sub_1D7860790(v62, v73);
      sub_1D7885ADC();
      uint64_t v77 = v99;
      sub_1D7A9B9D8();
      unint64_t v98 = v58;
      sub_1D7A9B938();
      (*(void (**)(char *, uint64_t))(v95 + 8))(v77, v96);
      uint64_t v78 = *(os_unfair_lock_s **)((char *)v2
                                 + OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch__receivedMessageCounter);
      uint64_t v79 = v78 + 4;
      uint64_t v80 = v78 + 5;
      os_unfair_lock_lock(v78 + 5);
      sub_1D7A68AA4(v79, v104);
      os_unfair_lock_unlock(v80);
      if (LODWORD(v104[0]) == -1)
      {
        __break(1u);
        os_unfair_lock_unlock(v80);
        __break(1u);
      }
      else
      {
        MEMORY[0x1F4188790](v81, v82, v83, v84, v85, v86, v87, v88);
        *((_DWORD *)&v90 - 4) = v89;
        os_unfair_lock_lock(v80);
        sub_1D7A68ABC(v79);
        os_unfair_lock_unlock(v80);
        sub_1D78607E8(v90, v94);
        sub_1D78607E8(v91, v98);
        (*(void (**)(char *, uint64_t))(v92 + 8))(v105, v93);
        (*(void (**)(char *, uint64_t))(v101 + 8))(v97, v76);
      }
    }
  }
}

void sub_1D7A5F9EC()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch_role))
  {
    if (qword_1EA841660 != -1) {
      swift_once();
    }
    uint64_t v2 = &qword_1EA8475F8;
  }
  else
  {
    if (qword_1EA841668 != -1) {
      swift_once();
    }
    uint64_t v2 = &qword_1EA847608;
  }
  uint64_t v4 = *v2;
  unint64_t v3 = v2[1];
  uint64_t v5 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch__receivedMessageCounter);
  uint64_t v6 = v5 + 4;
  uint64_t v7 = v5 + 5;
  sub_1D7860790(v4, v3);
  os_unfair_lock_lock(v7);
  sub_1D7A68AA4(v6, &v16);
  if (v1)
  {
    os_unfair_lock_unlock(v7);
    __break(1u);
  }
  else
  {
    os_unfair_lock_unlock(v7);
    if (v16 == -1)
    {
      LOBYTE(v16) = 7;
      ISO18013SessionError(_:code:fromError:)(0xD000000000000026, 0x80000001D7ACC490, (char *)&v16, 0);
      swift_willThrow();
      uint64_t v12 = v4;
      unint64_t v13 = v3;
    }
    else
    {
      os_unfair_lock_lock(v7);
      sub_1D7A68AA4(v6, &v16);
      os_unfair_lock_unlock(v7);
      unsigned int __src = bswap32(v16);
      uint64_t v8 = sub_1D7A7B394(&__src, 4);
      unint64_t v10 = v9;
      long long v16 = xmmword_1D7AA0AB0;
      sub_1D7A9B048();
      sub_1D7A9B048();
      long long v11 = v16;
      long long v15 = v16;
      sub_1D7860790(v16, *((unint64_t *)&v16 + 1));
      sub_1D7885ADC();
      sub_1D7A9B988();
      sub_1D78607E8(v11, *((unint64_t *)&v11 + 1));
      sub_1D78607E8(v4, v3);
      uint64_t v12 = v8;
      unint64_t v13 = v10;
    }
    sub_1D78607E8(v12, v13);
  }
}

unint64_t sub_1D7A5FCE0(uint64_t a1)
{
  sub_1D7A9CC48();
  swift_bridgeObjectRelease();
  unint64_t v7 = 0xD000000000000024;
  unint64_t v8 = 0x80000001D7ACC460;
  uint64_t v2 = *(os_unfair_lock_s **)(a1 + OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch__receivedMessageCounter);
  unint64_t v3 = v2 + 4;
  uint64_t v4 = v2 + 5;
  os_unfair_lock_lock(v2 + 5);
  sub_1D7A68AA4(v3, &v6);
  os_unfair_lock_unlock(v4);
  sub_1D7A9D258();
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  return v7;
}

unint64_t sub_1D7A5FDB8()
{
  return 0xD000000000000011;
}

uint64_t static ISO18013SessionCryptarch.getNonceData(nonce:)(uint64_t a1)
{
  return sub_1D7A5FE8C(a1, (uint64_t)sub_1D7A60CD0, MEMORY[0x1E4F25078]);
}

uint64_t sub_1D7A5FE8C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t, void, void))
{
  a3(&v4, a2, 0, MEMORY[0x1E4FBB1A0]);
  return v4;
}

uint64_t sub_1D7A5FEE4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

void ISO18013SessionCryptarch.encrypt(data:)(char *a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v130 = a1;
  uint64_t v131 = a2;
  uint64_t v128 = (char *)*v2;
  uint64_t v5 = sub_1D7A9B5F8();
  uint64_t v122 = *(void *)(v5 - 8);
  uint64_t v123 = v5;
  MEMORY[0x1F4188790](v5, v6, v7, v8, v9, v10, v11, v12);
  uint64_t v124 = (char *)&v118 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA842B98);
  MEMORY[0x1F4188790](v14 - 8, v15, v16, v17, v18, v19, v20, v21);
  uint64_t v23 = (char *)&v118 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_1D7A9B9E8();
  uint64_t v126 = *(void *)(v24 - 8);
  uint64_t v127 = v24;
  uint64_t v32 = MEMORY[0x1F4188790](v24, v25, v26, v27, v28, v29, v30, v31);
  uint64_t v129 = (uint64_t)&v118 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v32, v34, v35, v36, v37, v38, v39, v40);
  uint64_t v125 = (char *)&v118 - v41;
  uint64_t v132 = sub_1D7A9B9A8();
  uint64_t v134 = *(void *)(v132 - 8);
  MEMORY[0x1F4188790](v132, v42, v43, v44, v45, v46, v47, v48);
  uint64_t v50 = (char *)&v118 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847698);
  MEMORY[0x1F4188790](v51 - 8, v52, v53, v54, v55, v56, v57, v58);
  unint64_t v60 = (char *)&v118 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = sub_1D7A9B8C8();
  uint64_t v62 = *(void *)(v61 - 8);
  MEMORY[0x1F4188790](v61, v63, v64, v65, v66, v67, v68, v69);
  uint64_t v71 = (char *)&v118 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7A5CA2C((uint64_t)v60);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v60, 1, v61) == 1)
  {
    sub_1D7871C4C((uint64_t)v60, &qword_1EA847698);
    LOBYTE(v133[0]) = 1;
    ISO18013SessionError(_:code:fromError:)(0xD00000000000002ALL, 0x80000001D7ACC210, (char *)v133, 0);
    swift_willThrow();
    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v71, v60, v61);
  sub_1D7A60904();
  if (v3)
  {
    (*(void (**)(char *, uint64_t))(v62 + 8))(v71, v61);
    return;
  }
  uint64_t v120 = v62;
  uint64_t v121 = v61;
  uint64_t v72 = swift_retain();
  sub_1D7A61824(v72, (uint64_t (*)(uint64_t))sub_1D7A60BF8);
  uint64_t v73 = swift_release();
  MEMORY[0x1F4188790](v73, v74, v75, v76, v77, v78, v79, v80);
  uint64_t v81 = (uint64_t)v128;
  *(&v118 - 2) = (uint64_t)v50;
  *(&v118 - 1) = v81;
  sub_1D7A62340((uint64_t (*)(void))sub_1D7A635D4);
  uint64_t v82 = v132;
  v133[0] = v130;
  v133[1] = v131;
  uint64_t v83 = v134;
  (*(void (**)(char *, char *, uint64_t))(v134 + 16))(v23, v50, v132);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v83 + 56))(v23, 0, 1, v82);
  sub_1D7885ADC();
  uint64_t v84 = v129;
  sub_1D7A9B968();
  uint64_t v128 = v71;
  uint64_t v130 = v50;
  sub_1D7871C4C((uint64_t)v23, &qword_1EA842B98);
  (*(void (**)(char *, uint64_t, uint64_t))(v126 + 32))(v125, v84, v127);
  uint64_t v85 = sub_1D7A9B9B8();
  uint64_t v131 = 0;
  uint64_t v86 = v85;
  unint64_t v88 = v87;
  uint64_t v89 = sub_1D7A9B9C8();
  unint64_t v91 = v90;
  uint64_t v92 = sub_1D7A6369C(v86, v88, v89, v90);
  unint64_t v94 = v93;
  sub_1D7860790(v86, v88);
  sub_1D7A61FC4(v86, v88, 24, 0xD000000000000016);
  uint64_t v118 = v86;
  unint64_t v119 = v88;
  sub_1D78607E8(v86, v88);
  sub_1D7860790(v89, v91);
  sub_1D7A61B88(v89, v91, 0x6974707972636E45);
  sub_1D78607E8(v89, v91);
  sub_1D7860790(v92, v94);
  sub_1D7A61FC4(v92, v94, 20, 0xD000000000000012);
  uint64_t v129 = v92;
  sub_1D78607E8(v92, v94);
  uint64_t v95 = *(os_unfair_lock_s **)((char *)v4 + OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch__sentMessageCounter);
  uint64_t v96 = v95 + 4;
  uint64_t v97 = v95 + 5;
  os_unfair_lock_lock(v95 + 5);
  uint64_t v98 = v131;
  sub_1D7A5C690(v96, v133);
  if (!v98)
  {
    uint64_t v131 = v89;
    os_unfair_lock_unlock(v97);
    if (LODWORD(v133[0]) == -1)
    {
      __break(1u);
    }
    else
    {
      MEMORY[0x1F4188790](v99, v100, v101, v102, v103, v104, v105, v106);
      *((_DWORD *)&v118 - 4) = v107;
      os_unfair_lock_lock(v97);
      sub_1D7A637E8(v96);
      os_unfair_lock_unlock(v97);
      char v108 = _sSo14NSUserDefaultsC13CoreIDVSharedE18globalInternalBool6forKeySbSS_tFZ_0(0xD00000000000002DLL, 0x80000001D7ABE450);
      uint64_t v96 = (os_unfair_lock_s *)v134;
      if ((v108 & 1) == 0)
      {
        sub_1D78607E8(v118, v119);
        sub_1D78607E8(v131, v91);
LABEL_13:
        uint64_t v116 = v128;
        uint64_t v117 = v120;
        (*(void (**)(char *, uint64_t))(v126 + 8))(v125, v127);
        (*(void (**)(char *, uint64_t))(v117 + 8))(v116, v121);
        (*(void (**)(char *, uint64_t))&v96[2]._os_unfair_lock_opaque)(v130, v132);
        return;
      }
      if (qword_1EBDF9DC8 == -1)
      {
LABEL_9:
        uint64_t v109 = v123;
        uint64_t v110 = __swift_project_value_buffer(v123, (uint64_t)qword_1EBDFBE70);
        swift_beginAccess();
        uint64_t v111 = v122;
        (*(void (**)(char *, uint64_t, uint64_t))(v122 + 16))(v124, v110, v109);
        uint64_t v112 = sub_1D7A9B5D8();
        os_log_type_t v113 = sub_1D7A9C748();
        if (os_log_type_enabled(v112, v113))
        {
          uint64_t v114 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v114 = 0;
          _os_log_impl(&dword_1D7853000, v112, v113, "Returning random data due to user defaults setting: force improperly encrypted mdoc request", v114, 2u);
          uint64_t v115 = v114;
          uint64_t v96 = (os_unfair_lock_s *)v134;
          MEMORY[0x1D947D740](v115, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v111 + 8))(v124, v109);
        randomData(numBytes:)(0x32uLL);
        sub_1D78607E8(v118, v119);
        sub_1D78607E8(v131, v91);
        sub_1D78607E8(v129, v94);
        goto LABEL_13;
      }
    }
    swift_once();
    goto LABEL_9;
  }
  os_unfair_lock_unlock(v97);
  __break(1u);
}

void sub_1D7A60904()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch_role))
  {
    if (qword_1EA841668 != -1) {
      swift_once();
    }
    uint64_t v2 = &qword_1EA847608;
  }
  else
  {
    if (qword_1EA841660 != -1) {
      swift_once();
    }
    uint64_t v2 = &qword_1EA8475F8;
  }
  uint64_t v4 = *v2;
  unint64_t v3 = v2[1];
  uint64_t v5 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch__sentMessageCounter);
  uint64_t v6 = v5 + 4;
  uint64_t v7 = v5 + 5;
  sub_1D7860790(v4, v3);
  os_unfair_lock_lock(v7);
  sub_1D7A5C690(v6, &v16);
  if (v1)
  {
    os_unfair_lock_unlock(v7);
    __break(1u);
  }
  else
  {
    os_unfair_lock_unlock(v7);
    if (v16 == -1)
    {
      LOBYTE(v16) = 6;
      ISO18013SessionError(_:code:fromError:)(0xD000000000000022, 0x80000001D7ACC3C0, (char *)&v16, 0);
      swift_willThrow();
      uint64_t v12 = v4;
      unint64_t v13 = v3;
    }
    else
    {
      os_unfair_lock_lock(v7);
      sub_1D7A5C690(v6, &v16);
      os_unfair_lock_unlock(v7);
      unsigned int __src = bswap32(v16);
      uint64_t v8 = sub_1D7A7B394(&__src, 4);
      unint64_t v10 = v9;
      long long v16 = xmmword_1D7AA0AB0;
      sub_1D7A9B048();
      sub_1D7A9B048();
      long long v11 = v16;
      long long v15 = v16;
      sub_1D7860790(v16, *((unint64_t *)&v16 + 1));
      sub_1D7885ADC();
      sub_1D7A9B988();
      sub_1D78607E8(v11, *((unint64_t *)&v11 + 1));
      sub_1D78607E8(v4, v3);
      uint64_t v12 = v8;
      unint64_t v13 = v10;
    }
    sub_1D78607E8(v12, v13);
  }
}

unint64_t sub_1D7A60BF8(uint64_t a1)
{
  sub_1D7A9CC48();
  swift_bridgeObjectRelease();
  unint64_t v7 = 0xD000000000000020;
  unint64_t v8 = 0x80000001D7ACC390;
  uint64_t v2 = *(os_unfair_lock_s **)(a1 + OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch__sentMessageCounter);
  unint64_t v3 = v2 + 4;
  uint64_t v4 = v2 + 5;
  os_unfair_lock_lock(v2 + 5);
  sub_1D7A5C690(v3, &v6);
  os_unfair_lock_unlock(v4);
  sub_1D7A9D258();
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_1D7A60CD0@<X0>(size_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1D7A60CE8(a1, a2, a3);
}

uint64_t sub_1D7A60CE8@<X0>(size_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  size_t v4 = sub_1D7A60F80(a1, a2);
  uint64_t v5 = sub_1D78D1EB0(v4);
  unint64_t v7 = v6;
  swift_release();
  sub_1D79F1750(v5, v7);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF7900);
  sub_1D7871DDC((unint64_t *)&qword_1EBDF7910, (uint64_t *)&unk_1EBDF7900);
  uint64_t v8 = sub_1D7A9BF38();
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();
  uint64_t result = sub_1D78607E8(v5, v7);
  *a3 = v8;
  a3[1] = v10;
  return result;
}

uint64_t ISO18013SessionCryptarch.deinit()
{
  sub_1D7871C4C(v0 + OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch_localKey, &qword_1EA847668);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t ISO18013SessionCryptarch.__deallocating_deinit()
{
  sub_1D7871C4C(v0 + OBJC_IVAR____TtC13CoreIDVShared24ISO18013SessionCryptarch_localKey, &qword_1EA847668);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

void *sub_1D7A60F18(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF9D80);
  size_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

size_t sub_1D7A60F80(size_t result, unint64_t a2)
{
  if (!result) {
    return MEMORY[0x1E4FBC860];
  }
  unint64_t v3 = (const void *)result;
  int64_t v4 = a2 - result;
  if (a2 == result) {
    return MEMORY[0x1E4FBC860];
  }
  if (v4 < 1)
  {
    size_t v5 = (void *)MEMORY[0x1E4FBC860];
    if (!a2) {
      goto LABEL_13;
    }
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF9D80);
    size_t v5 = (void *)swift_allocObject();
    uint64_t result = _swift_stdlib_malloc_size(v5);
    v5[2] = v4;
    v5[3] = 2 * result - 64;
    if (!a2) {
      goto LABEL_13;
    }
  }
  if ((unint64_t)v3 < a2)
  {
    if ((v4 & 0x8000000000000000) == 0)
    {
      memmove(v5 + 4, v3, v4);
      return (size_t)v5;
    }
    __break(1u);
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_1D7A61034(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  sub_1D7871C4C(a1, &qword_1EA8476A0);
  return sub_1D78614F8(v3, a1, &qword_1EA8476A0);
}

void sub_1D7A61088(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, unint64_t a5)
{
  uint64_t v7 = sub_1D7A9B5F8();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7, v9, v10, v11, v12, v13, v14, v15);
  uint64_t v17 = (char *)v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v18 = objc_msgSend(self, sel_standardUserDefaults);
  if (qword_1EBDF9690 != -1)
  {
    v28[0] = v18;
    swift_once();
    id v18 = v28[0];
  }
  if (byte_1EBDFBE68 == 1)
  {
    v28[0] = v18;
    uint64_t v19 = (void *)sub_1D7A9BF98();
    unsigned __int8 v20 = objc_msgSend(v28[0], sel_BOOLForKey_, v19);

    if (v20)
    {
      uint64_t v30 = 0;
      unint64_t v31 = 0xE000000000000000;
      sub_1D7A9CC48();
      swift_bridgeObjectRelease();
      uint64_t v30 = a4;
      unint64_t v31 = a5;
      sub_1D7A9B008();
      sub_1D7A9C128();
      swift_bridgeObjectRelease();
      uint64_t v22 = v30;
      unint64_t v21 = v31;
      if (qword_1EBDF9DC8 != -1) {
        swift_once();
      }
      uint64_t v23 = __swift_project_value_buffer(v7, (uint64_t)qword_1EBDFBE70);
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v17, v23, v7);
      swift_bridgeObjectRetain();
      uint64_t v24 = sub_1D7A9B5D8();
      os_log_type_t v25 = sub_1D7A9C748();
      if (os_log_type_enabled(v24, v25))
      {
        v28[0] = v22;
        uint64_t v26 = (uint8_t *)swift_slowAlloc();
        uint64_t v27 = swift_slowAlloc();
        uint64_t v29 = v27;
        *(_DWORD *)uint64_t v26 = 136315138;
        swift_bridgeObjectRetain();
        v28[1] = (id)sub_1D7923300((uint64_t)v28[0], v21, &v29);
        sub_1D7A9C9E8();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1D7853000, v24, v25, "ISO18013SessionCryptarch: %s", v26, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1D947D740](v27, -1, -1);
        MEMORY[0x1D947D740](v26, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v8 + 8))(v17, v7);
    }
  }
  else
  {
  }
}

void sub_1D7A6142C(uint64_t a1, unint64_t a2, void *a3, unint64_t a4)
{
  uint64_t v8 = sub_1D7A9B5F8();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8, v10, v11, v12, v13, v14, v15, v16);
  id v18 = (char *)v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v19 = objc_msgSend(self, sel_standardUserDefaults);
  if (qword_1EBDF9690 != -1)
  {
    v29[0] = v19;
    swift_once();
    id v19 = v29[0];
  }
  if (byte_1EBDFBE68 == 1)
  {
    v29[0] = v19;
    unsigned __int8 v20 = (void *)sub_1D7A9BF98();
    unsigned __int8 v21 = objc_msgSend(v29[0], sel_BOOLForKey_, v20);

    if (v21)
    {
      uint64_t v30 = a3;
      unint64_t v31 = a4;
      uint64_t v32 = sub_1D79F1750(a1, a2);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF7900);
      sub_1D7871DDC((unint64_t *)&qword_1EBDF7910, (uint64_t *)&unk_1EBDF7900);
      sub_1D7A9BF38();
      swift_bridgeObjectRelease();
      sub_1D7A9C128();
      swift_bridgeObjectRelease();
      uint64_t v23 = v30;
      unint64_t v22 = v31;
      if (qword_1EBDF9DC8 != -1) {
        swift_once();
      }
      uint64_t v24 = __swift_project_value_buffer(v8, (uint64_t)qword_1EBDFBE70);
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v18, v24, v8);
      swift_bridgeObjectRetain();
      os_log_type_t v25 = sub_1D7A9B5D8();
      os_log_type_t v26 = sub_1D7A9C748();
      if (os_log_type_enabled(v25, v26))
      {
        v29[0] = v23;
        uint64_t v27 = (uint8_t *)swift_slowAlloc();
        uint64_t v28 = swift_slowAlloc();
        uint64_t v32 = v28;
        *(_DWORD *)uint64_t v27 = 136315138;
        swift_bridgeObjectRetain();
        v29[1] = (id)sub_1D7923300((uint64_t)v29[0], v22, &v32);
        sub_1D7A9C9E8();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1D7853000, v25, v26, "ISO18013SessionCryptarch: %s", v27, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1D947D740](v28, -1, -1);
        MEMORY[0x1D947D740](v27, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v9 + 8))(v18, v8);
    }
  }
  else
  {
  }
}

void sub_1D7A61824(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4 = sub_1D7A9B5F8();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6, v7, v8, v9, v10, v11, v12);
  uint64_t v14 = (char *)v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v15 = objc_msgSend(self, sel_standardUserDefaults);
  if (qword_1EBDF9690 != -1)
  {
    v26[0] = v15;
    swift_once();
    id v15 = v26[0];
  }
  if (byte_1EBDFBE68 == 1)
  {
    v26[0] = v15;
    uint64_t v16 = (void *)sub_1D7A9BF98();
    unsigned __int8 v17 = objc_msgSend(v26[0], sel_BOOLForKey_, v16);

    if (v17)
    {
      id v18 = (void *)a2(a1);
      unint64_t v20 = v19;
      if (qword_1EBDF9DC8 != -1) {
        swift_once();
      }
      uint64_t v21 = __swift_project_value_buffer(v4, (uint64_t)qword_1EBDFBE70);
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v14, v21, v4);
      swift_bridgeObjectRetain();
      unint64_t v22 = sub_1D7A9B5D8();
      os_log_type_t v23 = sub_1D7A9C748();
      if (os_log_type_enabled(v22, v23))
      {
        v26[0] = v18;
        uint64_t v24 = (uint8_t *)swift_slowAlloc();
        uint64_t v25 = swift_slowAlloc();
        uint64_t v27 = v25;
        *(_DWORD *)uint64_t v24 = 136315138;
        swift_bridgeObjectRetain();
        v26[1] = (id)sub_1D7923300((uint64_t)v26[0], v20, &v27);
        sub_1D7A9C9E8();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1D7853000, v22, v23, "ISO18013SessionCryptarch: %s", v24, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1D947D740](v25, -1, -1);
        MEMORY[0x1D947D740](v24, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
    }
  }
  else
  {
  }
}

void sub_1D7A61B88(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1D7A9B5F8();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v8, v9, v10, v11, v12, v13, v14);
  uint64_t v16 = (char *)v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v17 = objc_msgSend(self, sel_standardUserDefaults);
  if (qword_1EBDF9690 != -1)
  {
    v28[0] = v17;
    swift_once();
    id v17 = v28[0];
  }
  if (byte_1EBDFBE68 == 1)
  {
    v28[0] = v17;
    id v18 = (void *)sub_1D7A9BF98();
    unsigned __int8 v19 = objc_msgSend(v28[0], sel_BOOLForKey_, v18);

    if (v19)
    {
      uint64_t v29 = 0;
      unint64_t v30 = 0xE000000000000000;
      sub_1D7A9CC48();
      swift_bridgeObjectRelease();
      uint64_t v29 = a3;
      unint64_t v30 = 0xEF20676174206E6FLL;
      uint64_t v31 = sub_1D79F1750(a1, a2);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF7900);
      sub_1D7871DDC((unint64_t *)&qword_1EBDF7910, (uint64_t *)&unk_1EBDF7900);
      sub_1D7A9BF38();
      swift_bridgeObjectRelease();
      sub_1D7A9C128();
      swift_bridgeObjectRelease();
      uint64_t v21 = v29;
      unint64_t v20 = v30;
      if (qword_1EBDF9DC8 != -1) {
        swift_once();
      }
      uint64_t v22 = __swift_project_value_buffer(v6, (uint64_t)qword_1EBDFBE70);
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v16, v22, v6);
      swift_bridgeObjectRetain();
      os_log_type_t v23 = sub_1D7A9B5D8();
      os_log_type_t v24 = sub_1D7A9C748();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = (uint8_t *)swift_slowAlloc();
        uint64_t v26 = swift_slowAlloc();
        v28[0] = (id)v7;
        uint64_t v27 = v26;
        uint64_t v31 = v26;
        *(_DWORD *)uint64_t v25 = 136315138;
        swift_bridgeObjectRetain();
        v28[1] = (id)sub_1D7923300(v21, v20, &v31);
        sub_1D7A9C9E8();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1D7853000, v23, v24, "ISO18013SessionCryptarch: %s", v25, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1D947D740](v27, -1, -1);
        MEMORY[0x1D947D740](v25, -1, -1);

        (*((void (**)(char *, uint64_t))v28[0] + 1))(v16, v6);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v6);
      }
    }
  }
  else
  {
  }
}

void sub_1D7A61FC4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_1D7A9B5F8();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8, v10, v11, v12, v13, v14, v15, v16);
  id v18 = (char *)v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v19 = objc_msgSend(self, sel_standardUserDefaults);
  if (qword_1EBDF9690 != -1)
  {
    v30[0] = v19;
    swift_once();
    id v19 = v30[0];
  }
  if (byte_1EBDFBE68 == 1)
  {
    v30[0] = v19;
    unint64_t v20 = (void *)sub_1D7A9BF98();
    unsigned __int8 v21 = objc_msgSend(v30[0], sel_BOOLForKey_, v20);

    if (v21)
    {
      uint64_t v22 = (void *)sub_1D7A5FEE4(a1, a2, a3, a4);
      unint64_t v24 = v23;
      if (qword_1EBDF9DC8 != -1) {
        swift_once();
      }
      uint64_t v25 = __swift_project_value_buffer(v8, (uint64_t)qword_1EBDFBE70);
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v18, v25, v8);
      swift_bridgeObjectRetain();
      uint64_t v26 = sub_1D7A9B5D8();
      os_log_type_t v27 = sub_1D7A9C748();
      if (os_log_type_enabled(v26, v27))
      {
        v30[0] = v22;
        uint64_t v28 = (uint8_t *)swift_slowAlloc();
        uint64_t v29 = swift_slowAlloc();
        uint64_t v31 = v29;
        *(_DWORD *)uint64_t v28 = 136315138;
        swift_bridgeObjectRetain();
        v30[1] = (id)sub_1D7923300((uint64_t)v30[0], v24, &v31);
        sub_1D7A9C9E8();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1D7853000, v26, v27, "ISO18013SessionCryptarch: %s", v28, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1D947D740](v29, -1, -1);
        MEMORY[0x1D947D740](v28, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v9 + 8))(v18, v8);
    }
  }
  else
  {
  }
}

void sub_1D7A62340(uint64_t (*a1)(void))
{
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v4, v5, v6, v7, v8, v9, v10);
  uint64_t v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = objc_msgSend(self, sel_standardUserDefaults);
  if (qword_1EBDF9690 != -1)
  {
    v24[0] = v13;
    swift_once();
    id v13 = v24[0];
  }
  if (byte_1EBDFBE68 == 1)
  {
    v24[0] = v13;
    uint64_t v14 = (void *)sub_1D7A9BF98();
    unsigned __int8 v15 = objc_msgSend(v24[0], sel_BOOLForKey_, v14);

    if (v15)
    {
      uint64_t v16 = (void *)a1();
      unint64_t v18 = v17;
      if (qword_1EBDF9DC8 != -1) {
        swift_once();
      }
      uint64_t v19 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE70);
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v12, v19, v2);
      swift_bridgeObjectRetain();
      unint64_t v20 = sub_1D7A9B5D8();
      os_log_type_t v21 = sub_1D7A9C748();
      if (os_log_type_enabled(v20, v21))
      {
        v24[0] = v16;
        uint64_t v22 = (uint8_t *)swift_slowAlloc();
        uint64_t v23 = swift_slowAlloc();
        uint64_t v25 = v23;
        *(_DWORD *)uint64_t v22 = 136315138;
        swift_bridgeObjectRetain();
        v24[1] = (id)sub_1D7923300((uint64_t)v24[0], v18, &v25);
        sub_1D7A9C9E8();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1D7853000, v20, v21, "ISO18013SessionCryptarch: %s", v22, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1D947D740](v23, -1, -1);
        MEMORY[0x1D947D740](v22, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);
    }
  }
  else
  {
  }
}

uint64_t sub_1D7A626A4(uint64_t a1, unint64_t a2)
{
  v35[3] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = sub_1D7A9BD88();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6, v7, v8, v9, v10, v11, v12);
  uint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_1D7A9B838();
  uint64_t v34 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15, v16, v17, v18, v19, v20, v21, v22);
  unint64_t v24 = (char *)&v33 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7885664(&qword_1EA8424A0, MEMORY[0x1E4F25170]);
  sub_1D7A9B828();
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      uint64_t v33 = v15;
      sub_1D7860790(a1, a2);
      uint64_t v15 = v33;
      sub_1D78D117C((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, (uint64_t)v14);
      break;
    case 2uLL:
      uint64_t v33 = v15;
      uint64_t v25 = *(void *)(a1 + 16);
      uint64_t v26 = *(void *)(a1 + 24);
      sub_1D7860790(a1, a2);
      swift_retain();
      swift_retain();
      uint64_t v27 = v26;
      uint64_t v15 = v33;
      sub_1D78D117C(v25, v27, a2 & 0x3FFFFFFFFFFFFFFFLL, (uint64_t)v14);
      swift_release();
      swift_release();
      break;
    case 3uLL:
      memset(v35, 0, 14);
      goto LABEL_7;
    default:
      v35[0] = a1;
      LOWORD(v35[1]) = a2;
      BYTE2(v35[1]) = BYTE2(a2);
      BYTE3(v35[1]) = BYTE3(a2);
      BYTE4(v35[1]) = BYTE4(a2);
      BYTE5(v35[1]) = BYTE5(a2);
LABEL_7:
      sub_1D7A9B808();
      break;
  }
  sub_1D78607E8(a1, a2);
  sub_1D7A9B818();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
  sub_1D7885664(&qword_1EA8424A8, MEMORY[0x1E4F24F80]);
  uint64_t v28 = sub_1D7A9BD78();
  uint64_t v30 = sub_1D78D1370(v28, v29);
  swift_bridgeObjectRelease();
  uint64_t v31 = sub_1D78D1EB0(v30);
  swift_release();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v24, v15);
  return v31;
}

uint64_t sub_1D7A62A94(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847698);
  uint64_t v14 = MEMORY[0x1F4188790](v6 - 8, v7, v8, v9, v10, v11, v12, v13);
  uint64_t v16 = (char *)&v113 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14, v17, v18, v19, v20, v21, v22, v23);
  uint64_t v25 = (char *)&v113 - v24;
  uint64_t v26 = sub_1D7A9B8C8();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v35 = MEMORY[0x1F4188790](v26, v28, v29, v30, v31, v32, v33, v34);
  uint64_t v43 = MEMORY[0x1F4188790](v35, v36, v37, v38, v39, v40, v41, v42);
  uint64_t v45 = (char *)&v113 - v44;
  MEMORY[0x1F4188790](v43, v46, v47, v48, v49, v50, v51, v52);
  uint64_t v126 = (char *)&v113 - v54;
  uint64_t v55 = (os_unfair_lock_s *)(a2 >> 62);
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v56) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      uint64_t v56 = (int)v56;
LABEL_6:
      if (v56 == 32)
      {
        uint64_t v118 = v16;
        uint64_t v120 = v53;
        uint64_t v122 = v5;
        *(void *)&long long v125 = a1;
        *((void *)&v125 + 1) = a2;
        sub_1D7860790(a1, a2);
        sub_1D7A9B8A8();
        long long v113 = xmmword_1D7AA0AB0;
        long long v125 = xmmword_1D7AA0AB0;
        if (qword_1EA841640 != -1) {
          swift_once();
        }
        long long v124 = xmmword_1EA847598;
        uint64_t v60 = sub_1D7A9BD88();
        uint64_t v61 = sub_1D7885664(&qword_1EA8424A0, MEMORY[0x1E4F25170]);
        sub_1D7885ADC();
        uint64_t v116 = v61;
        uint64_t v117 = v60;
        sub_1D7A9B9F8();
        uint64_t v62 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 16);
        unint64_t v119 = v45;
        uint64_t v114 = v62;
        v62(v25, (uint64_t)v45, v26);
        uint64_t v121 = v27;
        uint64_t v115 = *(uint64_t (**)(char *, void, uint64_t, uint64_t))(v27 + 56);
        uint64_t v63 = v115(v25, 0, 1, v26);
        MEMORY[0x1F4188790](v63, v64, v65, v66, v67, v68, v69, v70);
        uint64_t v72 = v71 + *(void *)(*MEMORY[0x1E4FBBAB0] + *(void *)v71 + 16);
        uint64_t v55 = (os_unfair_lock_s *)(v71 + ((*(unsigned int *)(*(void *)v71 + 48) + 3) & 0x1FFFFFFFCLL));
        os_unfair_lock_lock(v55);
        uint64_t v73 = v123;
        sub_1D7A68A54(v72);
        if (!v73)
        {
          os_unfair_lock_unlock(v55);
          sub_1D7871C4C((uint64_t)v25, &qword_1EA847698);
          long long v125 = v113;
          if (qword_1EA841658 != -1) {
            swift_once();
          }
          long long v74 = xmmword_1EA8475E0;
          long long v124 = xmmword_1EA8475E0;
          sub_1D7860790(xmmword_1EA8475E0, *((unint64_t *)&xmmword_1EA8475E0 + 1));
          uint64_t v75 = v120;
          if (qword_1EA841648 != -1) {
            swift_once();
          }
          uint64_t v76 = v126;
          sub_1D7A9B9F8();
          sub_1D78607E8(v74, *((unint64_t *)&v74 + 1));
          uint64_t v77 = (uint64_t)v118;
          v114(v118, (uint64_t)v75, v26);
          uint64_t v78 = v77;
          uint64_t v79 = v115((char *)v77, 0, 1, v26);
          MEMORY[0x1F4188790](v79, v80, v81, v82, v83, v84, v85, v86);
          uint64_t v88 = v87 + *(void *)(*MEMORY[0x1E4FBBAB0] + *(void *)v87 + 16);
          uint64_t v89 = (os_unfair_lock_s *)(v87 + ((*(unsigned int *)(*(void *)v87 + 48) + 3) & 0x1FFFFFFFCLL));
          os_unfair_lock_lock(v89);
          sub_1D7A68A54(v88);
          os_unfair_lock_unlock(v89);
          uint64_t v90 = sub_1D7871C4C(v78, &qword_1EA847698);
          MEMORY[0x1F4188790](v90, v91, v92, v93, v94, v95, v96, v97);
          uint64_t v98 = v119;
          sub_1D7A62340(sub_1D7A68A84);
          MEMORY[0x1F4188790](v99, v100, v101, v102, v103, v104, v105, v106);
          sub_1D7A62340(sub_1D7A68A88);
          int v107 = *(void (**)(char *, uint64_t))(v121 + 8);
          v107(v76, v26);
          v107(v75, v26);
          return ((uint64_t (*)(char *, uint64_t))v107)(v98, v26);
        }
LABEL_25:
        os_unfair_lock_unlock(v55);
        __break(1u);
        JUMPOUT(0x1D7A63254);
      }
LABEL_15:
      *(void *)&long long v125 = 0;
      *((void *)&v125 + 1) = 0xE000000000000000;
      sub_1D7A9CC48();
      swift_bridgeObjectRelease();
      *(void *)&long long v125 = 0xD000000000000019;
      *((void *)&v125 + 1) = 0x80000001D7ACC540;
      uint64_t v109 = 0;
      switch((int)v55)
      {
        case 0:
          uint64_t v109 = BYTE6(a2);
          goto LABEL_20;
        case 1:
          LODWORD(v109) = HIDWORD(a1) - a1;
          if (__OFSUB__(HIDWORD(a1), a1)) {
            goto LABEL_23;
          }
          uint64_t v109 = (int)v109;
LABEL_20:
          *(void *)&long long v124 = v109;
          sub_1D7A9D258();
          sub_1D7A9C128();
          swift_bridgeObjectRelease();
          uint64_t v112 = v125;
          LOBYTE(v125) = 5;
          ISO18013SessionError(_:code:fromError:)(v112, *((uint64_t *)&v125 + 1), (char *)&v125, 0);
          swift_bridgeObjectRelease();
          uint64_t result = swift_willThrow();
          break;
        case 2:
          uint64_t v111 = *(void *)(a1 + 16);
          uint64_t v110 = *(void *)(a1 + 24);
          BOOL v59 = __OFSUB__(v110, v111);
          uint64_t v109 = v110 - v111;
          if (!v59) {
            goto LABEL_20;
          }
          goto LABEL_24;
        case 3:
          goto LABEL_20;
        default:
          JUMPOUT(0);
      }
      return result;
    case 2uLL:
      uint64_t v58 = *(void *)(a1 + 16);
      uint64_t v57 = *(void *)(a1 + 24);
      BOOL v59 = __OFSUB__(v57, v58);
      uint64_t v56 = v57 - v58;
      if (!v59) {
        goto LABEL_6;
      }
      goto LABEL_22;
    case 3uLL:
      goto LABEL_15;
    default:
      uint64_t v56 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_1D7A63274()
{
  return sub_1D7A5E3E0(*(void *)(v0 + 16), 20, 0xD000000000000012, 0x80000001D7ACC520, (uint64_t (*)(uint64_t))ISO18013SessionCryptarch.PrivateKey.publicKeyData.getter);
}

uint64_t sub_1D7A632C0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1D7A63328()
{
  return sub_1D7A5E3E0(*(void *)(v0 + 16), 21, 0xD000000000000013, 0x80000001D7ACC500, (uint64_t (*)(uint64_t))ISO18013SessionCryptarch.PublicKey.publicKeyData.getter);
}

uint64_t sub_1D7A63374(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1D7A633D4(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = a2 >> 62;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_29;
      }
      uint64_t v4 = (int)v4;
LABEL_6:
      if (v4 >= 16)
      {
        if (v3)
        {
          if (v3 == 1)
          {
            LODWORD(v8) = HIDWORD(a1) - a1;
            if (__OFSUB__(HIDWORD(a1), a1))
            {
LABEL_31:
              __break(1u);
              goto LABEL_32;
            }
            uint64_t v8 = (int)v8;
          }
          else
          {
            uint64_t v10 = *(void *)(a1 + 16);
            uint64_t v9 = *(void *)(a1 + 24);
            BOOL v7 = __OFSUB__(v9, v10);
            uint64_t v8 = v9 - v10;
            if (v7)
            {
LABEL_32:
              __break(1u);
LABEL_33:
              __break(1u);
              goto LABEL_34;
            }
          }
        }
        else
        {
          uint64_t v8 = BYTE6(a2);
        }
        if (!__OFSUB__(v8, 16))
        {
          if (v8 - 16 < 0) {
            goto LABEL_28;
          }
          if (!v3) {
            goto LABEL_24;
          }
          if (v3 == 1)
          {
            if (!__OFSUB__(HIDWORD(a1), a1)) {
              goto LABEL_24;
            }
            goto LABEL_33;
          }
          uint64_t v12 = *(void *)(a1 + 16);
          uint64_t v11 = *(void *)(a1 + 24);
          uint64_t v13 = v11 - v12;
          if (__OFSUB__(v11, v12))
          {
LABEL_34:
            __break(1u);
            goto LABEL_35;
          }
          if (__OFSUB__(v13, 16))
          {
LABEL_35:
            __break(1u);
            JUMPOUT(0x1D7A63598);
          }
          if (v13 >= v13 - 16)
          {
LABEL_24:
            uint64_t v2 = sub_1D7A9B058();
            sub_1D7A9B058();
            return v2;
          }
          __break(1u);
        }
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
LABEL_7:
      char v15 = 7;
      ISO18013SessionError(_:code:fromError:)(0xD00000000000001ELL, 0x80000001D7ABEC10, &v15, 0);
      swift_willThrow();
      return v2;
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_6;
      }
      goto LABEL_30;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

unint64_t sub_1D7A635A8()
{
  return sub_1D7A5FDB8();
}

unint64_t sub_1D7A635D4()
{
  return sub_1D7A5FDB8();
}

uint64_t sub_1D7A63600(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result < 15)
    {
      return 0;
    }
    else
    {
      sub_1D7A9ACD8();
      swift_allocObject();
      sub_1D7A9ACC8();
      if (v1 >= 0x7FFFFFFF)
      {
        sub_1D7A9AFC8();
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = 0;
        *(void *)(result + 24) = 0;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1D7A6369C(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_14;
      }
      uint64_t v4 = (int)v4;
LABEL_6:
      uint64_t v8 = 0;
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v8) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_16;
          }
          uint64_t v8 = (int)v8;
LABEL_11:
          if (__OFADD__(v4, v8))
          {
            __break(1u);
LABEL_14:
            __break(1u);
LABEL_15:
            __break(1u);
LABEL_16:
            __break(1u);
LABEL_17:
            __break(1u);
            JUMPOUT(0x1D7A637C8);
          }
          uint64_t v12 = sub_1D7A63600(v4 + v8);
          sub_1D7A9B048();
          sub_1D7A9B048();
          return v12;
        case 2uLL:
          uint64_t v10 = *(void *)(a3 + 16);
          uint64_t v9 = *(void *)(a3 + 24);
          BOOL v7 = __OFSUB__(v9, v10);
          uint64_t v8 = v9 - v10;
          if (!v7) {
            goto LABEL_11;
          }
          goto LABEL_17;
        case 3uLL:
          goto LABEL_11;
        default:
          uint64_t v8 = BYTE6(a4);
          goto LABEL_11;
      }
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_6;
      }
      goto LABEL_15;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

_DWORD *sub_1D7A637E8(_DWORD *result)
{
  *uint64_t result = *(_DWORD *)(v1 + 16);
  return result;
}

unint64_t sub_1D7A637F8()
{
  unint64_t result = qword_1EA8476C0;
  if (!qword_1EA8476C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8476C0);
  }
  return result;
}

unint64_t sub_1D7A63850()
{
  unint64_t result = qword_1EA8476C8;
  if (!qword_1EA8476C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8476C8);
  }
  return result;
}

uint64_t sub_1D7A638A4()
{
  return sub_1D7871DDC(&qword_1EA8476D0, &qword_1EA8476D8);
}

unint64_t sub_1D7A638E4()
{
  unint64_t result = qword_1EA8476E0;
  if (!qword_1EA8476E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8476E0);
  }
  return result;
}

uint64_t sub_1D7A63960()
{
  return type metadata accessor for ISO18013SessionCryptarch(0);
}

uint64_t type metadata accessor for ISO18013SessionCryptarch(uint64_t a1)
{
  return sub_1D786E938(a1, (uint64_t *)&unk_1EA8476E8);
}

void sub_1D7A63988()
{
  sub_1D7A66384(319, &qword_1EA8476F8, (void (*)(uint64_t))type metadata accessor for ISO18013SessionCryptarch.PrivateKey);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for ISO18013SessionCryptarch(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ISO18013SessionCryptarch);
}

uint64_t dispatch thunk of ISO18013SessionCryptarch.__allocating_init(role:curve:variant:localKey:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of ISO18013SessionCryptarch.__allocating_init(role:variant:curve:)()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

unsigned char *storeEnumTagSinglePayload for ISO18013SessionCryptarch.Role(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D7A63B7CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ISO18013SessionCryptarch.Role()
{
  return &type metadata for ISO18013SessionCryptarch.Role;
}

unsigned char *storeEnumTagSinglePayload for ISO18013SessionCryptarch.Curve(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D7A63C80);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ISO18013SessionCryptarch.Curve()
{
  return &type metadata for ISO18013SessionCryptarch.Curve;
}

unsigned char *storeEnumTagSinglePayload for ISO18013SessionCryptarch.Variant(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D7A63D84);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ISO18013SessionCryptarch.Variant()
{
  return &type metadata for ISO18013SessionCryptarch.Variant;
}

uint64_t *initializeBufferWithCopyOfBuffer for ISO18013SessionCryptarch.PublicKey(uint64_t *a1, uint64_t *a2, int *a3)
{
  unsigned int v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v7 = a3[5];
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = sub_1D7A9BAF8();
    uint64_t v11 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847638);
      memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    uint64_t v14 = a3[6];
    char v15 = (char *)v4 + v14;
    uint64_t v16 = (char *)a2 + v14;
    uint64_t v17 = sub_1D7A9BBF8();
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847630);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    uint64_t v20 = a3[7];
    uint64_t v21 = (char *)v4 + v20;
    uint64_t v22 = (char *)a2 + v20;
    uint64_t v23 = sub_1D7A9BCC8();
    uint64_t v24 = *(void *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847628);
      memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
    uint64_t v26 = a3[8];
    uint64_t v27 = (char *)v4 + v26;
    uint64_t v28 = (char *)a2 + v26;
    uint64_t v29 = sub_1D7A9B778();
    uint64_t v30 = *(void *)(v29 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
    {
      uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847620);
      memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v27, v28, v29);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
    }
    uint64_t v32 = a3[9];
    uint64_t v33 = (char *)v4 + v32;
    uint64_t v34 = (char *)a2 + v32;
    uint64_t v35 = sub_1D7A9BDD8();
    uint64_t v36 = *(void *)(v35 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
    {
      uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847618);
      memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v33, v34, v35);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
    }
  }
  return v4;
}

uint64_t destroy for ISO18013SessionCryptarch.PublicKey(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = sub_1D7A9BAF8();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v7 = a1 + a2[6];
  uint64_t v8 = sub_1D7A9BBF8();
  uint64_t v9 = *(void *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }
  uint64_t v10 = a1 + a2[7];
  uint64_t v11 = sub_1D7A9BCC8();
  uint64_t v12 = *(void *)(v11 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11)) {
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
  }
  uint64_t v13 = a1 + a2[8];
  uint64_t v14 = sub_1D7A9B778();
  uint64_t v15 = *(void *)(v14 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14)) {
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
  }
  uint64_t v16 = a1 + a2[9];
  uint64_t v17 = sub_1D7A9BDD8();
  uint64_t v20 = *(void *)(v17 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v16, 1, v17);
  if (!result)
  {
    uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t))(v20 + 8);
    return v19(v16, v17);
  }
  return result;
}

unsigned char *initializeWithCopy for ISO18013SessionCryptarch.PublicKey(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = sub_1D7A9BAF8();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847638);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[6];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = sub_1D7A9BBF8();
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847630);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v16 + 16))(v13, v14, v15);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  uint64_t v18 = a3[7];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  uint64_t v21 = sub_1D7A9BCC8();
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847628);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v22 + 16))(v19, v20, v21);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  uint64_t v24 = a3[8];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  uint64_t v27 = sub_1D7A9B778();
  uint64_t v28 = *(void *)(v27 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847620);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v28 + 16))(v25, v26, v27);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  uint64_t v30 = a3[9];
  uint64_t v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  uint64_t v33 = sub_1D7A9BDD8();
  uint64_t v34 = *(void *)(v33 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
  {
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847618);
    memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v34 + 16))(v31, v32, v33);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
  }
  return a1;
}

unsigned char *assignWithCopy for ISO18013SessionCryptarch.PublicKey(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = sub_1D7A9BAF8();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847638);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = a3[6];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v18 = sub_1D7A9BBF8();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v19 + 48);
  int v21 = v20(v16, 1, v18);
  int v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v22)
  {
    (*(void (**)(unsigned char *, uint64_t))(v19 + 8))(v16, v18);
LABEL_12:
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847630);
    memcpy(v16, v17, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v19 + 24))(v16, v17, v18);
LABEL_13:
  uint64_t v24 = a3[7];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  uint64_t v27 = sub_1D7A9BCC8();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v28 + 48);
  int v30 = v29(v25, 1, v27);
  int v31 = v29(v26, 1, v27);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v28 + 16))(v25, v26, v27);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v31)
  {
    (*(void (**)(unsigned char *, uint64_t))(v28 + 8))(v25, v27);
LABEL_18:
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847628);
    memcpy(v25, v26, *(void *)(*(void *)(v32 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v28 + 24))(v25, v26, v27);
LABEL_19:
  uint64_t v33 = a3[8];
  uint64_t v34 = &a1[v33];
  uint64_t v35 = &a2[v33];
  uint64_t v36 = sub_1D7A9B778();
  uint64_t v37 = *(void *)(v36 - 8);
  uint64_t v38 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v37 + 48);
  int v39 = v38(v34, 1, v36);
  int v40 = v38(v35, 1, v36);
  if (v39)
  {
    if (!v40)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v37 + 16))(v34, v35, v36);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v40)
  {
    (*(void (**)(unsigned char *, uint64_t))(v37 + 8))(v34, v36);
LABEL_24:
    uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847620);
    memcpy(v34, v35, *(void *)(*(void *)(v41 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v37 + 24))(v34, v35, v36);
LABEL_25:
  uint64_t v42 = a3[9];
  uint64_t v43 = &a1[v42];
  uint64_t v44 = &a2[v42];
  uint64_t v45 = sub_1D7A9BDD8();
  uint64_t v46 = *(void *)(v45 - 8);
  uint64_t v47 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v46 + 48);
  int v48 = v47(v43, 1, v45);
  int v49 = v47(v44, 1, v45);
  if (!v48)
  {
    if (!v49)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v46 + 24))(v43, v44, v45);
      return a1;
    }
    (*(void (**)(unsigned char *, uint64_t))(v46 + 8))(v43, v45);
    goto LABEL_30;
  }
  if (v49)
  {
LABEL_30:
    uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847618);
    memcpy(v43, v44, *(void *)(*(void *)(v50 - 8) + 64));
    return a1;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v46 + 16))(v43, v44, v45);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
  return a1;
}

unsigned char *initializeWithTake for ISO18013SessionCryptarch.PublicKey(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = sub_1D7A9BAF8();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847638);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[6];
  int v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = sub_1D7A9BBF8();
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847630);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  uint64_t v18 = a3[7];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  uint64_t v21 = sub_1D7A9BCC8();
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847628);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v22 + 32))(v19, v20, v21);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  uint64_t v24 = a3[8];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  uint64_t v27 = sub_1D7A9B778();
  uint64_t v28 = *(void *)(v27 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847620);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v28 + 32))(v25, v26, v27);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  uint64_t v30 = a3[9];
  int v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  uint64_t v33 = sub_1D7A9BDD8();
  uint64_t v34 = *(void *)(v33 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
  {
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847618);
    memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v34 + 32))(v31, v32, v33);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
  }
  return a1;
}

unsigned char *assignWithTake for ISO18013SessionCryptarch.PublicKey(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = sub_1D7A9BAF8();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847638);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = a3[6];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v18 = sub_1D7A9BBF8();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v19 + 48);
  int v21 = v20(v16, 1, v18);
  int v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v19 + 32))(v16, v17, v18);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v22)
  {
    (*(void (**)(unsigned char *, uint64_t))(v19 + 8))(v16, v18);
LABEL_12:
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847630);
    memcpy(v16, v17, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v19 + 40))(v16, v17, v18);
LABEL_13:
  uint64_t v24 = a3[7];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  uint64_t v27 = sub_1D7A9BCC8();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v28 + 48);
  int v30 = v29(v25, 1, v27);
  int v31 = v29(v26, 1, v27);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v28 + 32))(v25, v26, v27);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v31)
  {
    (*(void (**)(unsigned char *, uint64_t))(v28 + 8))(v25, v27);
LABEL_18:
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847628);
    memcpy(v25, v26, *(void *)(*(void *)(v32 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v28 + 40))(v25, v26, v27);
LABEL_19:
  uint64_t v33 = a3[8];
  uint64_t v34 = &a1[v33];
  uint64_t v35 = &a2[v33];
  uint64_t v36 = sub_1D7A9B778();
  uint64_t v37 = *(void *)(v36 - 8);
  uint64_t v38 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v37 + 48);
  int v39 = v38(v34, 1, v36);
  int v40 = v38(v35, 1, v36);
  if (v39)
  {
    if (!v40)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v37 + 32))(v34, v35, v36);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v40)
  {
    (*(void (**)(unsigned char *, uint64_t))(v37 + 8))(v34, v36);
LABEL_24:
    uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847620);
    memcpy(v34, v35, *(void *)(*(void *)(v41 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v37 + 40))(v34, v35, v36);
LABEL_25:
  uint64_t v42 = a3[9];
  uint64_t v43 = &a1[v42];
  uint64_t v44 = &a2[v42];
  uint64_t v45 = sub_1D7A9BDD8();
  uint64_t v46 = *(void *)(v45 - 8);
  uint64_t v47 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v46 + 48);
  int v48 = v47(v43, 1, v45);
  int v49 = v47(v44, 1, v45);
  if (!v48)
  {
    if (!v49)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v46 + 40))(v43, v44, v45);
      return a1;
    }
    (*(void (**)(unsigned char *, uint64_t))(v46 + 8))(v43, v45);
    goto LABEL_30;
  }
  if (v49)
  {
LABEL_30:
    uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847618);
    memcpy(v43, v44, *(void *)(*(void *)(v50 - 8) + 64));
    return a1;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v46 + 32))(v43, v44, v45);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
  return a1;
}

uint64_t getEnumTagSinglePayload for ISO18013SessionCryptarch.PublicKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1D7A65D20);
}

uint64_t sub_1D7A65D20(unsigned __int8 *a1, uint64_t a2, int *a3)
{
  if (a2 == 251)
  {
    unsigned int v4 = *a1;
    if (v4 >= 5) {
      return v4 - 4;
    }
    else {
      return 0;
    }
  }
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847638);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[5];
LABEL_13:
    uint64_t v15 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v10 + 48);
    return v15(&a1[v11], a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847630);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[6];
    goto LABEL_13;
  }
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847628);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a2)
  {
    uint64_t v9 = v13;
    uint64_t v10 = *(void *)(v13 - 8);
    uint64_t v11 = a3[7];
    goto LABEL_13;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847620);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v9 = v14;
    uint64_t v10 = *(void *)(v14 - 8);
    uint64_t v11 = a3[8];
    goto LABEL_13;
  }
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847618);
  uint64_t v17 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48);
  uint64_t v18 = v16;
  uint64_t v19 = &a1[a3[9]];
  return v17(v19, a2, v18);
}

uint64_t storeEnumTagSinglePayload for ISO18013SessionCryptarch.PublicKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1D7A65F50);
}

unsigned char *sub_1D7A65F50(unsigned char *result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 251)
  {
    *uint64_t result = a2 + 4;
    return result;
  }
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847638);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[5];
LABEL_11:
    uint64_t v15 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return (unsigned char *)v15(&v5[v11], a2, a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847630);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[6];
    goto LABEL_11;
  }
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847628);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v9 = v13;
    uint64_t v10 = *(void *)(v13 - 8);
    uint64_t v11 = a4[7];
    goto LABEL_11;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847620);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a3)
  {
    uint64_t v9 = v14;
    uint64_t v10 = *(void *)(v14 - 8);
    uint64_t v11 = a4[8];
    goto LABEL_11;
  }
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847618);
  uint64_t v17 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  uint64_t v18 = v16;
  uint64_t v19 = &v5[a4[9]];
  return (unsigned char *)v17(v19, a2, a2, v18);
}

void sub_1D7A66170()
{
  sub_1D7A66384(319, &qword_1EA847710, MEMORY[0x1E4F250D8]);
  if (v0 <= 0x3F)
  {
    sub_1D7A66384(319, &qword_1EA847718, MEMORY[0x1E4F25118]);
    if (v1 <= 0x3F)
    {
      sub_1D7A66384(319, &qword_1EA847720, MEMORY[0x1E4F25150]);
      if (v2 <= 0x3F)
      {
        sub_1D7A66384(319, &qword_1EA847728, MEMORY[0x1E4F24F38]);
        if (v3 <= 0x3F)
        {
          sub_1D7A66384(319, &qword_1EA847730, MEMORY[0x1E4F251A0]);
          if (v4 <= 0x3F) {
            swift_initStructMetadata();
          }
        }
      }
    }
  }
}

void sub_1D7A66384(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1D7A9C9A8();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for ISO18013SessionCryptarch.PrivateKey(uint64_t *a1, uint64_t *a2, int *a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v7 = a3[5];
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = sub_1D7A9BB58();
    uint64_t v11 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847660);
      memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    uint64_t v14 = a3[6];
    uint64_t v15 = (char *)v4 + v14;
    uint64_t v16 = (char *)a2 + v14;
    uint64_t v17 = sub_1D7A9BC48();
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847658);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    uint64_t v20 = a3[7];
    int v21 = (char *)v4 + v20;
    int v22 = (char *)a2 + v20;
    uint64_t v23 = sub_1D7A9BD18();
    uint64_t v24 = *(void *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847650);
      memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
    uint64_t v26 = a3[8];
    uint64_t v27 = (char *)v4 + v26;
    uint64_t v28 = (char *)a2 + v26;
    uint64_t v29 = sub_1D7A9B7C8();
    uint64_t v30 = *(void *)(v29 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
    {
      uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847648);
      memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v27, v28, v29);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
    }
    uint64_t v32 = a3[9];
    uint64_t v33 = (char *)v4 + v32;
    uint64_t v34 = (char *)a2 + v32;
    uint64_t v35 = sub_1D7A9BE28();
    uint64_t v36 = *(void *)(v35 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
    {
      uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847640);
      memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v33, v34, v35);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
    }
  }
  return v4;
}

uint64_t destroy for ISO18013SessionCryptarch.PrivateKey(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = sub_1D7A9BB58();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v7 = a1 + a2[6];
  uint64_t v8 = sub_1D7A9BC48();
  uint64_t v9 = *(void *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }
  uint64_t v10 = a1 + a2[7];
  uint64_t v11 = sub_1D7A9BD18();
  uint64_t v12 = *(void *)(v11 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11)) {
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
  }
  uint64_t v13 = a1 + a2[8];
  uint64_t v14 = sub_1D7A9B7C8();
  uint64_t v15 = *(void *)(v14 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14)) {
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
  }
  uint64_t v16 = a1 + a2[9];
  uint64_t v17 = sub_1D7A9BE28();
  uint64_t v20 = *(void *)(v17 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v16, 1, v17);
  if (!result)
  {
    uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t))(v20 + 8);
    return v19(v16, v17);
  }
  return result;
}

unsigned char *initializeWithCopy for ISO18013SessionCryptarch.PrivateKey(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = sub_1D7A9BB58();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847660);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[6];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = sub_1D7A9BC48();
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847658);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v16 + 16))(v13, v14, v15);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  uint64_t v18 = a3[7];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  uint64_t v21 = sub_1D7A9BD18();
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847650);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v22 + 16))(v19, v20, v21);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  uint64_t v24 = a3[8];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  uint64_t v27 = sub_1D7A9B7C8();
  uint64_t v28 = *(void *)(v27 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847648);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v28 + 16))(v25, v26, v27);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  uint64_t v30 = a3[9];
  uint64_t v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  uint64_t v33 = sub_1D7A9BE28();
  uint64_t v34 = *(void *)(v33 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
  {
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847640);
    memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v34 + 16))(v31, v32, v33);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
  }
  return a1;
}

unsigned char *assignWithCopy for ISO18013SessionCryptarch.PrivateKey(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = sub_1D7A9BB58();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847660);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = a3[6];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v18 = sub_1D7A9BC48();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v19 + 48);
  int v21 = v20(v16, 1, v18);
  int v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v22)
  {
    (*(void (**)(unsigned char *, uint64_t))(v19 + 8))(v16, v18);
LABEL_12:
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847658);
    memcpy(v16, v17, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v19 + 24))(v16, v17, v18);
LABEL_13:
  uint64_t v24 = a3[7];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  uint64_t v27 = sub_1D7A9BD18();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v28 + 48);
  int v30 = v29(v25, 1, v27);
  int v31 = v29(v26, 1, v27);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v28 + 16))(v25, v26, v27);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v31)
  {
    (*(void (**)(unsigned char *, uint64_t))(v28 + 8))(v25, v27);
LABEL_18:
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847650);
    memcpy(v25, v26, *(void *)(*(void *)(v32 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v28 + 24))(v25, v26, v27);
LABEL_19:
  uint64_t v33 = a3[8];
  uint64_t v34 = &a1[v33];
  uint64_t v35 = &a2[v33];
  uint64_t v36 = sub_1D7A9B7C8();
  uint64_t v37 = *(void *)(v36 - 8);
  uint64_t v38 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v37 + 48);
  int v39 = v38(v34, 1, v36);
  int v40 = v38(v35, 1, v36);
  if (v39)
  {
    if (!v40)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v37 + 16))(v34, v35, v36);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v40)
  {
    (*(void (**)(unsigned char *, uint64_t))(v37 + 8))(v34, v36);
LABEL_24:
    uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847648);
    memcpy(v34, v35, *(void *)(*(void *)(v41 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v37 + 24))(v34, v35, v36);
LABEL_25:
  uint64_t v42 = a3[9];
  uint64_t v43 = &a1[v42];
  uint64_t v44 = &a2[v42];
  uint64_t v45 = sub_1D7A9BE28();
  uint64_t v46 = *(void *)(v45 - 8);
  uint64_t v47 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v46 + 48);
  int v48 = v47(v43, 1, v45);
  int v49 = v47(v44, 1, v45);
  if (!v48)
  {
    if (!v49)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v46 + 24))(v43, v44, v45);
      return a1;
    }
    (*(void (**)(unsigned char *, uint64_t))(v46 + 8))(v43, v45);
    goto LABEL_30;
  }
  if (v49)
  {
LABEL_30:
    uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847640);
    memcpy(v43, v44, *(void *)(*(void *)(v50 - 8) + 64));
    return a1;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v46 + 16))(v43, v44, v45);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
  return a1;
}

unsigned char *initializeWithTake for ISO18013SessionCryptarch.PrivateKey(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = sub_1D7A9BB58();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847660);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[6];
  int v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = sub_1D7A9BC48();
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847658);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  uint64_t v18 = a3[7];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  uint64_t v21 = sub_1D7A9BD18();
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847650);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v22 + 32))(v19, v20, v21);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  uint64_t v24 = a3[8];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  uint64_t v27 = sub_1D7A9B7C8();
  uint64_t v28 = *(void *)(v27 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847648);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v28 + 32))(v25, v26, v27);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  uint64_t v30 = a3[9];
  int v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  uint64_t v33 = sub_1D7A9BE28();
  uint64_t v34 = *(void *)(v33 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
  {
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847640);
    memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v34 + 32))(v31, v32, v33);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
  }
  return a1;
}

unsigned char *assignWithTake for ISO18013SessionCryptarch.PrivateKey(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = sub_1D7A9BB58();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847660);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = a3[6];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v18 = sub_1D7A9BC48();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v19 + 48);
  int v21 = v20(v16, 1, v18);
  int v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v19 + 32))(v16, v17, v18);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v22)
  {
    (*(void (**)(unsigned char *, uint64_t))(v19 + 8))(v16, v18);
LABEL_12:
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847658);
    memcpy(v16, v17, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v19 + 40))(v16, v17, v18);
LABEL_13:
  uint64_t v24 = a3[7];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  uint64_t v27 = sub_1D7A9BD18();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v28 + 48);
  int v30 = v29(v25, 1, v27);
  int v31 = v29(v26, 1, v27);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v28 + 32))(v25, v26, v27);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v31)
  {
    (*(void (**)(unsigned char *, uint64_t))(v28 + 8))(v25, v27);
LABEL_18:
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847650);
    memcpy(v25, v26, *(void *)(*(void *)(v32 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v28 + 40))(v25, v26, v27);
LABEL_19:
  uint64_t v33 = a3[8];
  uint64_t v34 = &a1[v33];
  uint64_t v35 = &a2[v33];
  uint64_t v36 = sub_1D7A9B7C8();
  uint64_t v37 = *(void *)(v36 - 8);
  uint64_t v38 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v37 + 48);
  int v39 = v38(v34, 1, v36);
  int v40 = v38(v35, 1, v36);
  if (v39)
  {
    if (!v40)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v37 + 32))(v34, v35, v36);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v40)
  {
    (*(void (**)(unsigned char *, uint64_t))(v37 + 8))(v34, v36);
LABEL_24:
    uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847648);
    memcpy(v34, v35, *(void *)(*(void *)(v41 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v37 + 40))(v34, v35, v36);
LABEL_25:
  uint64_t v42 = a3[9];
  uint64_t v43 = &a1[v42];
  uint64_t v44 = &a2[v42];
  uint64_t v45 = sub_1D7A9BE28();
  uint64_t v46 = *(void *)(v45 - 8);
  uint64_t v47 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v46 + 48);
  int v48 = v47(v43, 1, v45);
  int v49 = v47(v44, 1, v45);
  if (!v48)
  {
    if (!v49)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v46 + 40))(v43, v44, v45);
      return a1;
    }
    (*(void (**)(unsigned char *, uint64_t))(v46 + 8))(v43, v45);
    goto LABEL_30;
  }
  if (v49)
  {
LABEL_30:
    uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847640);
    memcpy(v43, v44, *(void *)(*(void *)(v50 - 8) + 64));
    return a1;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v46 + 32))(v43, v44, v45);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
  return a1;
}

uint64_t getEnumTagSinglePayload for ISO18013SessionCryptarch.PrivateKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1D7A6833C);
}

uint64_t sub_1D7A6833C(unsigned __int8 *a1, uint64_t a2, int *a3)
{
  if (a2 == 251)
  {
    unsigned int v4 = *a1;
    if (v4 >= 5) {
      return v4 - 4;
    }
    else {
      return 0;
    }
  }
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847660);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[5];
LABEL_13:
    uint64_t v15 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v10 + 48);
    return v15(&a1[v11], a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847658);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[6];
    goto LABEL_13;
  }
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847650);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a2)
  {
    uint64_t v9 = v13;
    uint64_t v10 = *(void *)(v13 - 8);
    uint64_t v11 = a3[7];
    goto LABEL_13;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847648);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v9 = v14;
    uint64_t v10 = *(void *)(v14 - 8);
    uint64_t v11 = a3[8];
    goto LABEL_13;
  }
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847640);
  uint64_t v17 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48);
  uint64_t v18 = v16;
  uint64_t v19 = &a1[a3[9]];
  return v17(v19, a2, v18);
}

uint64_t storeEnumTagSinglePayload for ISO18013SessionCryptarch.PrivateKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1D7A6856C);
}

unsigned char *sub_1D7A6856C(unsigned char *result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 251)
  {
    *uint64_t result = a2 + 4;
    return result;
  }
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847660);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[5];
LABEL_11:
    uint64_t v15 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return (unsigned char *)v15(&v5[v11], a2, a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847658);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[6];
    goto LABEL_11;
  }
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847650);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v9 = v13;
    uint64_t v10 = *(void *)(v13 - 8);
    uint64_t v11 = a4[7];
    goto LABEL_11;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847648);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a3)
  {
    uint64_t v9 = v14;
    uint64_t v10 = *(void *)(v14 - 8);
    uint64_t v11 = a4[8];
    goto LABEL_11;
  }
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847640);
  uint64_t v17 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  uint64_t v18 = v16;
  uint64_t v19 = &v5[a4[9]];
  return (unsigned char *)v17(v19, a2, a2, v18);
}

void sub_1D7A6878C()
{
  sub_1D7A66384(319, &qword_1EA847748, MEMORY[0x1E4F250F0]);
  if (v0 <= 0x3F)
  {
    sub_1D7A66384(319, &qword_1EA847750, MEMORY[0x1E4F25130]);
    if (v1 <= 0x3F)
    {
      sub_1D7A66384(319, &qword_1EA847758, MEMORY[0x1E4F25160]);
      if (v2 <= 0x3F)
      {
        sub_1D7A66384(319, &qword_1EA847760, MEMORY[0x1E4F24F58]);
        if (v3 <= 0x3F)
        {
          sub_1D7A66384(319, &qword_1EA847768, MEMORY[0x1E4F251B0]);
          if (v4 <= 0x3F) {
            swift_initStructMetadata();
          }
        }
      }
    }
  }
}

uint64_t sub_1D7A689A0(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  sub_1D7871C4C(a1, &qword_1EA847698);
  return sub_1D78614F8(v3, a1, &qword_1EA847698);
}

uint64_t sub_1D7A689F4()
{
  return sub_1D7A5F110();
}

uint64_t sub_1D7A689FC()
{
  return sub_1D7A5F224(*(void *)(v0 + 16), *(void *)(v0 + 24), 0x6B20726564616552);
}

uint64_t sub_1D7A68A28()
{
  return sub_1D7A5F224(*(void *)(v0 + 16), *(void *)(v0 + 24), 0x6B20656369766544);
}

uint64_t sub_1D7A68A54(uint64_t a1)
{
  return sub_1D7A689A0(a1);
}

uint64_t sub_1D7A68A6C(uint64_t a1)
{
  return sub_1D7A61034(a1);
}

uint64_t sub_1D7A68A8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1D7A5C514(a1, a2);
}

_DWORD *sub_1D7A68AA4@<X0>(_DWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_1D7A5C690(a1, a2);
}

_DWORD *sub_1D7A68ABC(_DWORD *a1)
{
  return sub_1D7A637E8(a1);
}

uint64_t sub_1D7A68AD8(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result = *(void *)a1;
  if (result != a2 || *(unsigned __int8 *)(a1 + 8) != a3 || *(unsigned char *)(a1 + 56) != 1)
  {
    uint64_t v11 = sub_1D78F7D1C();
    uint64_t v13 = v12;
    type metadata accessor for ASN1Error.Backing();
    uint64_t v14 = swift_allocObject();
    *(unsigned char *)(v14 + 16) = 0;
    *(void *)(v14 + 24) = v11;
    *(void *)(v14 + 32) = v13;
    *(void *)(v14 + 40) = 0xD00000000000001CLL;
    *(void *)(v14 + 48) = 0x80000001D7ACC5A0;
    *(void *)(v14 + 56) = 26;
    sub_1D785D8F0();
    swift_allocError();
    *uint64_t v15 = v14;
    swift_willThrow();
    return sub_1D785D944(a1);
  }
  uint64_t v5 = *(void *)(a1 + 32);
  unint64_t v6 = *(void *)(a1 + 40);
  if (!__OFSUB__(v6 >> 1, v5))
  {
    if (v6 >> 1 != v5)
    {
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v16 = *(void *)(a1 + 24);
      uint64_t v8 = *(void *)(a1 + 48);
      swift_unknownObjectRetain();
      sub_1D7A9CC48();
      swift_bridgeObjectRelease();
      sub_1D7A9D258();
      sub_1D7A9C128();
      swift_bridgeObjectRelease();
      sub_1D7A9C128();
      type metadata accessor for ASN1Error.Backing();
      uint64_t v9 = swift_allocObject();
      *(unsigned char *)(v9 + 16) = 1;
      *(void *)(v9 + 24) = 0xD000000000000021;
      *(void *)(v9 + 32) = 0x80000001D7ACC5C0;
      *(void *)(v9 + 40) = 0xD00000000000001CLL;
      *(void *)(v9 + 48) = 0x80000001D7ACC5A0;
      *(void *)(v9 + 56) = 30;
      sub_1D785D8F0();
      swift_allocError();
      uint64_t *v10 = v9;
      swift_willThrow();
      sub_1D785D944(a1);
      return j__swift_unknownObjectRelease(v7, v16, v5, v6, v8, 1);
    }
    return sub_1D785D944(a1);
  }
  __break(1u);
  return result;
}

uint64_t static IdentityImageQuality.supportsSecureCoding.getter()
{
  return byte_1EA847770;
}

uint64_t static IdentityImageQuality.supportsSecureCoding.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  byte_1EA847770 = a1;
  return result;
}

uint64_t (*static IdentityImageQuality.supportsSecureCoding.modify())()
{
  return j__swift_endAccess;
}

uint64_t IdentityImageQuality.frontScanSettings.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_frontScanSettings);
  sub_1D786E9D8(v1, *(void *)(v0 + OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_frontScanSettings + 8));
  return v1;
}

uint64_t IdentityImageQuality.backScanSettings.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_backScanSettings);
  sub_1D786E9D8(v1, *(void *)(v0 + OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_backScanSettings + 8));
  return v1;
}

uint64_t IdentityImageQuality.frontIDSettings.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_frontIDSettings);
  sub_1D786E9D8(v1, *(void *)(v0 + OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_frontIDSettings + 8));
  return v1;
}

uint64_t IdentityImageQuality.backIDSettings.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_backIDSettings);
  sub_1D786E9D8(v1, *(void *)(v0 + OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_backIDSettings + 8));
  return v1;
}

uint64_t IdentityImageQuality.selfieSettings.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_selfieSettings);
  sub_1D786E9D8(v1, *(void *)(v0 + OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_selfieSettings + 8));
  return v1;
}

uint64_t IdentityImageQuality.livenessSettings.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_livenessSettings);
  sub_1D786E9D8(v1, *(void *)(v0 + OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_livenessSettings + 8));
  return v1;
}

uint64_t IdentityImageQuality.passiveSettings.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_passiveSettings);
  sub_1D786E9D8(v1, *(void *)(v0 + OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_passiveSettings + 8));
  return v1;
}

uint64_t IdentityImageQuality.livenessBlockingCodes.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_livenessBlockingCodes);
  sub_1D786E9D8(v1, *(void *)(v0 + OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_livenessBlockingCodes + 8));
  return v1;
}

uint64_t IdentityImageQuality.exploration.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_exploration);
}

uint64_t IdentityImageQuality.bufferSize.getter()
{
  return *(void *)(v0 + OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_bufferSize);
}

uint64_t IdentityImageQuality.stableWindow.getter()
{
  return *(void *)(v0 + OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_stableWindow);
}

uint64_t IdentityImageQuality.idScanFrameRate.getter()
{
  return *(void *)(v0 + OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_idScanFrameRate);
}

uint64_t IdentityImageQuality.videoFrameRate.getter()
{
  return *(void *)(v0 + OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_videoFrameRate);
}

unint64_t IdentityImageQuality.maxRectTravel.getter()
{
  return *(unsigned int *)(v0 + OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_maxRectTravel) | ((unint64_t)*(unsigned __int8 *)(v0 + OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_maxRectTravel + 4) << 32);
}

void *IdentityImageQuality.resizeDimensions.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_resizeDimensions);
  id v2 = v1;
  return v1;
}

id IdentityImageQuality.__allocating_init(frontScanSettings:backScanSettings:frontIDSettings:backIDSettings:selfieSettings:livenessSettings:passiveSettings:livenessBlockingCodes:exploration:bufferSize:stableWindow:idScanFrameRate:videoFrameRate:maxRectTravel:resizeDimensions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10, long long a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,unint64_t a23,uint64_t a24)
{
  id v25 = objc_allocWithZone(v24);
  unint64_t v28 = a23 | ((HIDWORD(a23) & 1) << 32);
  return IdentityImageQuality.init(frontScanSettings:backScanSettings:frontIDSettings:backIDSettings:selfieSettings:livenessSettings:passiveSettings:livenessBlockingCodes:exploration:bufferSize:stableWindow:idScanFrameRate:videoFrameRate:maxRectTravel:resizeDimensions:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, *((uint64_t *)&a9 + 1), a10, *((uint64_t *)&a10 + 1), a11, *((uint64_t *)&a11 + 1), a12, a13, a14, a15, a16 & 1,
           a17,
           a18 & 1,
           a19,
           a20 & 1,
           a21,
           a22 & 1,
           v27,
           v28,
           SBYTE4(v28),
           a24);
}

id IdentityImageQuality.init(frontScanSettings:backScanSettings:frontIDSettings:backIDSettings:selfieSettings:livenessSettings:passiveSettings:livenessBlockingCodes:exploration:bufferSize:stableWindow:idScanFrameRate:videoFrameRate:maxRectTravel:resizeDimensions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,int a26,int a27,char a28,uint64_t a29)
{
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v36 = &v29[OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_frontScanSettings];
  *uint64_t v36 = a1;
  v36[1] = a2;
  uint64_t v37 = &v29[OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_backScanSettings];
  *uint64_t v37 = a3;
  v37[1] = a4;
  uint64_t v38 = &v29[OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_frontIDSettings];
  void *v38 = a5;
  v38[1] = a6;
  int v39 = &v29[OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_backIDSettings];
  *int v39 = a7;
  v39[1] = a8;
  int v40 = &v29[OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_selfieSettings];
  void *v40 = a9;
  v40[1] = a10;
  uint64_t v41 = &v29[OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_livenessSettings];
  *uint64_t v41 = a11;
  v41[1] = a12;
  uint64_t v42 = &v29[OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_passiveSettings];
  void *v42 = a13;
  v42[1] = a14;
  uint64_t v43 = &v29[OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_livenessBlockingCodes];
  *uint64_t v43 = a15;
  v43[1] = a16;
  v29[OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_exploration] = a17;
  uint64_t v44 = &v29[OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_bufferSize];
  *(void *)uint64_t v44 = a18;
  unsigned __int8 v44[8] = a19 & 1;
  uint64_t v45 = &v29[OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_stableWindow];
  *(void *)uint64_t v45 = a20;
  v45[8] = a21 & 1;
  uint64_t v46 = &v29[OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_idScanFrameRate];
  *(void *)uint64_t v46 = a22;
  v46[8] = a23 & 1;
  uint64_t v47 = &v29[OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_videoFrameRate];
  *(void *)uint64_t v47 = a24;
  v47[8] = a25 & 1;
  int v48 = &v29[OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_maxRectTravel];
  *(_DWORD *)int v48 = a27;
  v48[4] = a28 & 1;
  *(void *)&v29[OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_resizeDimensions] = a29;
  v53.receiver = v29;
  v53.super_class = ObjectType;
  return objc_msgSendSuper2(&v53, sel_init);
}

id IdentityImageQuality.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  id v4 = sub_1D7A69E40(a1);

  return v4;
}

id IdentityImageQuality.init(coder:)(void *a1)
{
  id v2 = sub_1D7A69E40(a1);

  return v2;
}

Swift::Void __swiftcall IdentityImageQuality.encode(with:)(NSCoder with)
{
  if (*(void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_frontScanSettings + 8) >> 60 == 15) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = sub_1D7A9AFF8();
  }
  id v4 = (void *)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeObject:v3 forKey:v4];
  swift_unknownObjectRelease();

  if (*(void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_backScanSettings + 8) >> 60 == 15) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = sub_1D7A9AFF8();
  }
  unint64_t v6 = (void *)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeObject:v5 forKey:v6];
  swift_unknownObjectRelease();

  if (*(void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_frontIDSettings + 8) >> 60 == 15) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = sub_1D7A9AFF8();
  }
  uint64_t v8 = (void *)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeObject:v7 forKey:v8];
  swift_unknownObjectRelease();

  if (*(void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_backIDSettings + 8) >> 60 == 15) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = sub_1D7A9AFF8();
  }
  uint64_t v10 = (void *)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeObject:v9 forKey:v10];
  swift_unknownObjectRelease();

  if (*(void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_selfieSettings + 8) >> 60 == 15) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = sub_1D7A9AFF8();
  }
  uint64_t v12 = (void *)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeObject:v11 forKey:v12];
  swift_unknownObjectRelease();

  if (*(void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_livenessSettings + 8) >> 60 == 15) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = sub_1D7A9AFF8();
  }
  uint64_t v14 = (void *)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeObject:v13 forKey:v14];
  swift_unknownObjectRelease();

  if (*(void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_passiveSettings + 8) >> 60 == 15) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = sub_1D7A9AFF8();
  }
  uint64_t v16 = (void *)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeObject:v15 forKey:v16];
  swift_unknownObjectRelease();

  if (*(void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_livenessBlockingCodes + 8) >> 60 == 15) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = sub_1D7A9AFF8();
  }
  uint64_t v18 = (void *)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeObject:v17 forKey:v18];
  swift_unknownObjectRelease();

  uint64_t v19 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_exploration);
  uint64_t v20 = (void *)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeBool:v19 forKey:v20];

  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_bufferSize + 8)) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = sub_1D7A9C648();
  }
  int v22 = (void *)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeObject:v21 forKey:v22];
  swift_unknownObjectRelease();

  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_stableWindow + 8)) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = sub_1D7A9C648();
  }
  uint64_t v24 = (void *)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeObject:v23 forKey:v24];
  swift_unknownObjectRelease();

  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_idScanFrameRate + 8)) {
    uint64_t v25 = 0;
  }
  else {
    uint64_t v25 = sub_1D7A9C648();
  }
  uint64_t v26 = (void *)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeObject:v25 forKey:v26];
  swift_unknownObjectRelease();

  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_videoFrameRate + 8)) {
    uint64_t v27 = 0;
  }
  else {
    uint64_t v27 = sub_1D7A9C648();
  }
  unint64_t v28 = (void *)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeObject:v27 forKey:v28];
  swift_unknownObjectRelease();

  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_maxRectTravel + 4)) {
    uint64_t v29 = 0;
  }
  else {
    uint64_t v29 = sub_1D7A9C5B8();
  }
  int v30 = (void *)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeObject:v29 forKey:v30];
  swift_unknownObjectRelease();

  uint64_t v31 = *(void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_resizeDimensions);
  id v32 = (id)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeObject:v31 forKey:v32];
}

id IdentityImageQuality.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void IdentityImageQuality.init()()
{
}

id IdentityImageQuality.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id sub_1D7A69E40(void *a1)
{
  objc_super v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  sub_1D78C4AF4();
  uint64_t v5 = v2;
  uint64_t v6 = sub_1D7A9C908();
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    uint64_t v8 = sub_1D7A9B028();
    unint64_t v10 = v9;
  }
  else
  {
    uint64_t v8 = 0;
    unint64_t v10 = 0xF000000000000000;
  }
  uint64_t v11 = (uint64_t *)&v5[OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_frontScanSettings];
  *uint64_t v11 = v8;
  v11[1] = v10;
  uint64_t v12 = sub_1D7A9C908();
  if (v12)
  {
    uint64_t v13 = (void *)v12;
    uint64_t v14 = sub_1D7A9B028();
    unint64_t v16 = v15;
  }
  else
  {
    uint64_t v14 = 0;
    unint64_t v16 = 0xF000000000000000;
  }
  uint64_t v17 = (uint64_t *)&v5[OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_backScanSettings];
  uint64_t *v17 = v14;
  v17[1] = v16;
  uint64_t v18 = sub_1D7A9C908();
  if (v18)
  {
    uint64_t v19 = (void *)v18;
    uint64_t v20 = sub_1D7A9B028();
    unint64_t v22 = v21;
  }
  else
  {
    uint64_t v20 = 0;
    unint64_t v22 = 0xF000000000000000;
  }
  uint64_t v23 = (uint64_t *)&v5[OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_frontIDSettings];
  *uint64_t v23 = v20;
  v23[1] = v22;
  uint64_t v24 = sub_1D7A9C908();
  if (v24)
  {
    uint64_t v25 = (void *)v24;
    uint64_t v26 = sub_1D7A9B028();
    unint64_t v28 = v27;
  }
  else
  {
    uint64_t v26 = 0;
    unint64_t v28 = 0xF000000000000000;
  }
  uint64_t v29 = (uint64_t *)&v5[OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_backIDSettings];
  *uint64_t v29 = v26;
  v29[1] = v28;
  uint64_t v30 = sub_1D7A9C908();
  if (v30)
  {
    uint64_t v31 = (void *)v30;
    uint64_t v32 = sub_1D7A9B028();
    unint64_t v34 = v33;
  }
  else
  {
    uint64_t v32 = 0;
    unint64_t v34 = 0xF000000000000000;
  }
  uint64_t v35 = (uint64_t *)&v5[OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_selfieSettings];
  *uint64_t v35 = v32;
  v35[1] = v34;
  uint64_t v36 = sub_1D7A9C908();
  if (v36)
  {
    uint64_t v37 = (void *)v36;
    uint64_t v38 = sub_1D7A9B028();
    unint64_t v40 = v39;
  }
  else
  {
    uint64_t v38 = 0;
    unint64_t v40 = 0xF000000000000000;
  }
  uint64_t v41 = (uint64_t *)&v5[OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_livenessSettings];
  *uint64_t v41 = v38;
  v41[1] = v40;
  uint64_t v42 = sub_1D7A9C908();
  if (v42)
  {
    uint64_t v43 = (void *)v42;
    uint64_t v44 = sub_1D7A9B028();
    unint64_t v46 = v45;
  }
  else
  {
    uint64_t v44 = 0;
    unint64_t v46 = 0xF000000000000000;
  }
  uint64_t v47 = (uint64_t *)&v5[OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_passiveSettings];
  *uint64_t v47 = v44;
  v47[1] = v46;
  uint64_t v48 = sub_1D7A9C908();
  if (v48)
  {
    int v49 = (void *)v48;
    uint64_t v50 = sub_1D7A9B028();
    unint64_t v52 = v51;
  }
  else
  {
    uint64_t v50 = 0;
    unint64_t v52 = 0xF000000000000000;
  }
  objc_super v53 = (uint64_t *)&v5[OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_livenessBlockingCodes];
  uint64_t *v53 = v50;
  v53[1] = v52;
  uint64_t v54 = (void *)sub_1D7A9BF98();
  unsigned __int8 v55 = objc_msgSend(a1, sel_decodeBoolForKey_, v54);

  v5[OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_exploration] = v55;
  uint64_t v56 = (void *)sub_1D7A9BF98();
  id v57 = objc_msgSend(a1, sel_decodeIntegerForKey_, v56);

  uint64_t v58 = &v5[OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_bufferSize];
  *(void *)uint64_t v58 = v57;
  v58[8] = 0;
  BOOL v59 = (void *)sub_1D7A9BF98();
  id v60 = objc_msgSend(a1, sel_decodeIntegerForKey_, v59);

  uint64_t v61 = &v5[OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_stableWindow];
  *(void *)uint64_t v61 = v60;
  v61[8] = 0;
  uint64_t v62 = (void *)sub_1D7A9BF98();
  id v63 = objc_msgSend(a1, sel_decodeIntegerForKey_, v62);

  uint64_t v64 = &v5[OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_idScanFrameRate];
  *(void *)uint64_t v64 = v63;
  v64[8] = 0;
  uint64_t v65 = (void *)sub_1D7A9BF98();
  id v66 = objc_msgSend(a1, sel_decodeIntegerForKey_, v65);

  uint64_t v67 = &v5[OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_videoFrameRate];
  *(void *)uint64_t v67 = v66;
  v67[8] = 0;
  uint64_t v68 = (void *)sub_1D7A9BF98();
  objc_msgSend(a1, sel_decodeFloatForKey_, v68);
  int v70 = v69;

  uint64_t v71 = &v5[OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_maxRectTravel];
  *(_DWORD *)uint64_t v71 = v70;
  v71[4] = 0;
  type metadata accessor for IdentityProofingImageDimensions();
  *(void *)&v5[OBJC_IVAR____TtC13CoreIDVShared20IdentityImageQuality_resizeDimensions] = sub_1D7A9C908();

  v73.receiver = v5;
  v73.super_class = ObjectType;
  return objc_msgSendSuper2(&v73, sel_init);
}

uint64_t type metadata accessor for IdentityImageQuality()
{
  return self;
}

uint64_t method lookup function for IdentityImageQuality(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for IdentityImageQuality);
}

uint64_t dispatch thunk of IdentityImageQuality.__allocating_init(frontScanSettings:backScanSettings:frontIDSettings:backIDSettings:selfieSettings:livenessSettings:passiveSettings:livenessBlockingCodes:exploration:bufferSize:stableWindow:idScanFrameRate:videoFrameRate:maxRectTravel:resizeDimensions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 200);
  return v20(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

uint64_t dispatch thunk of IdentityImageQuality.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 208))();
}

uint64_t static IdentityProofingLivenessVideoURL.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t IdentityProofingLivenessVideoURL.url.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D78CDC8C(v1 + OBJC_IVAR____TtC13CoreIDVShared32IdentityProofingLivenessVideoURL_url, a1);
}

void *IdentityProofingLivenessVideoURL.fileHandle.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC13CoreIDVShared32IdentityProofingLivenessVideoURL_fileHandle);
  id v2 = v1;
  return v1;
}

uint64_t IdentityProofingLivenessVideoURL.auxiliaryURL.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D78CDC8C(v1 + OBJC_IVAR____TtC13CoreIDVShared32IdentityProofingLivenessVideoURL_auxiliaryURL, a1);
}

void *IdentityProofingLivenessVideoURL.auxiliaryFileHandle.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC13CoreIDVShared32IdentityProofingLivenessVideoURL_auxiliaryFileHandle);
  id v2 = v1;
  return v1;
}

id IdentityProofingLivenessVideoURL.__allocating_init(url:auxiliary:)(void *a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return IdentityProofingLivenessVideoURL.init(url:auxiliary:)(a1, a2);
}

id IdentityProofingLivenessVideoURL.init(url:auxiliary:)(id a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v68 = a2;
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8477F0);
  MEMORY[0x1F4188790](v5 - 8, v6, v7, v8, v9, v10, v11, v12);
  uint64_t v63 = (uint64_t)v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1D7A9AF68();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v23 = MEMORY[0x1F4188790](v14, v16, v17, v18, v19, v20, v21, v22);
  uint64_t v61 = (char *)v60 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = MEMORY[0x1F4188790](v23, v25, v26, v27, v28, v29, v30, v31);
  uint64_t v62 = (char *)v60 - v33;
  MEMORY[0x1F4188790](v32, v34, v35, v36, v37, v38, v39, v40);
  uint64_t v42 = (char *)v60 - v41;
  uint64_t v43 = (uint64_t)&v2[OBJC_IVAR____TtC13CoreIDVShared32IdentityProofingLivenessVideoURL_url];
  uint64_t v44 = *(void (**)(char *, id, uint64_t))(v15 + 16);
  v44(&v2[OBJC_IVAR____TtC13CoreIDVShared32IdentityProofingLivenessVideoURL_url], a1, v14);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v43, 0, 1, v14);
  uint64_t v64 = &v2[OBJC_IVAR____TtC13CoreIDVShared32IdentityProofingLivenessVideoURL_auxiliaryURL];
  sub_1D78CDC8C(v68, (uint64_t)&v2[OBJC_IVAR____TtC13CoreIDVShared32IdentityProofingLivenessVideoURL_auxiliaryURL]);
  uint64_t v45 = sub_1D78C4038(0, (unint64_t *)&unk_1EA8477F8);
  v44(v42, a1, v14);
  unint64_t v46 = v3;
  id v47 = v65;
  id v48 = sub_1D7A6AA0C((uint64_t)v42);
  if (v47)
  {
    sub_1D7891060(v68);
    (*(void (**)(id, uint64_t))(v15 + 8))(a1, v14);
    sub_1D7891060(v43);
    sub_1D7891060((uint64_t)v64);

    swift_deallocPartialClassInstance();
  }
  else
  {
    v60[0] = v43;
    v60[1] = v45;
    int v49 = v62;
    uint64_t v50 = v63;
    id v65 = a1;
    *(void *)&v46[OBJC_IVAR____TtC13CoreIDVShared32IdentityProofingLivenessVideoURL_fileHandle] = v48;
    sub_1D78CDC8C(v68, v50);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v50, 1, v14) == 1)
    {
      uint64_t v51 = v14;
      uint64_t v52 = v15;
      sub_1D7891060(v63);
      id v53 = 0;
    }
    else
    {
      uint64_t v54 = v49;
      (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v49, v63, v14);
      uint64_t v55 = (uint64_t)v61;
      v44(v61, v49, v14);
      id v53 = sub_1D7A6AA0C(v55);
      uint64_t v52 = v15;
      uint64_t v56 = v54;
      uint64_t v51 = v14;
      (*(void (**)(char *, uint64_t))(v15 + 8))(v56, v14);
    }
    id v57 = v65;
    uint64_t v58 = v68;
    *(void *)&v46[OBJC_IVAR____TtC13CoreIDVShared32IdentityProofingLivenessVideoURL_auxiliaryFileHandle] = v53;

    v67.receiver = v46;
    v67.super_class = ObjectType;
    a1 = objc_msgSendSuper2(&v67, sel_init);
    sub_1D7891060(v58);
    (*(void (**)(id, uint64_t))(v52 + 8))(v57, v51);
  }
  return a1;
}

id sub_1D7A6AA0C(uint64_t a1)
{
  v11[1] = *(id *)MEMORY[0x1E4F143B8];
  id v2 = (void *)sub_1D7A9AF08();
  v11[0] = 0;
  id v3 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_fileHandleForUpdatingURL_error_, v2, v11);

  id v4 = v11[0];
  if (v3)
  {
    uint64_t v5 = sub_1D7A9AF68();
    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    id v7 = v4;
    v6(a1, v5);
  }
  else
  {
    id v8 = v11[0];
    sub_1D7A9AE58();

    swift_willThrow();
    uint64_t v9 = sub_1D7A9AF68();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(a1, v9);
  }
  return v3;
}

Swift::Void __swiftcall IdentityProofingLivenessVideoURL.encode(with:)(NSCoder with)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8477F0);
  uint64_t v12 = MEMORY[0x1F4188790](v4 - 8, v5, v6, v7, v8, v9, v10, v11);
  uint64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12, v15, v16, v17, v18, v19, v20, v21);
  uint64_t v23 = (char *)&v37 - v22;
  sub_1D78CDC8C(v2 + OBJC_IVAR____TtC13CoreIDVShared32IdentityProofingLivenessVideoURL_url, (uint64_t)&v37 - v22);
  uint64_t v24 = sub_1D7A9AF68();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
  if (v26(v23, 1, v24) != 1)
  {
    uint64_t v27 = (void *)sub_1D7A9AF08();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v23, v24);
    id v28 = v27;
    uint64_t v29 = (void *)sub_1D7A9BF98();
    [(objc_class *)with.super.isa encodeObject:v28 forKey:v29];
  }
  uint64_t v30 = *(void *)(v2 + OBJC_IVAR____TtC13CoreIDVShared32IdentityProofingLivenessVideoURL_fileHandle);
  uint64_t v31 = (void *)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeObject:v30 forKey:v31];

  sub_1D78CDC8C(v2 + OBJC_IVAR____TtC13CoreIDVShared32IdentityProofingLivenessVideoURL_auxiliaryURL, (uint64_t)v14);
  if (v26(v14, 1, v24) != 1)
  {
    uint64_t v32 = (void *)sub_1D7A9AF08();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v14, v24);
    id v33 = v32;
    uint64_t v34 = (void *)sub_1D7A9BF98();
    [(objc_class *)with.super.isa encodeObject:v33 forKey:v34];
  }
  uint64_t v35 = *(void *)(v2 + OBJC_IVAR____TtC13CoreIDVShared32IdentityProofingLivenessVideoURL_auxiliaryFileHandle);
  uint64_t v36 = (void *)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeObject:v35 forKey:v36];
}

id IdentityProofingLivenessVideoURL.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  id v4 = sub_1D7A6B060();

  return v4;
}

id IdentityProofingLivenessVideoURL.init(coder:)(void *a1)
{
  id v2 = sub_1D7A6B060();

  return v2;
}

id IdentityProofingLivenessVideoURL.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void IdentityProofingLivenessVideoURL.init()()
{
}

id IdentityProofingLivenessVideoURL.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id sub_1D7A6B060()
{
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8477F0);
  uint64_t v10 = MEMORY[0x1F4188790](v2 - 8, v3, v4, v5, v6, v7, v8, v9);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10, v13, v14, v15, v16, v17, v18, v19);
  uint64_t v21 = (char *)&v32 - v20;
  sub_1D78C4038(0, (unint64_t *)&unk_1EA847820);
  uint64_t v22 = v0;
  uint64_t v23 = sub_1D7A9C908();
  if (v23)
  {
    uint64_t v24 = (void *)v23;
    sub_1D7A9AF38();

    uint64_t v25 = sub_1D7A9AF68();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v21, 0, 1, v25);
  }
  else
  {
    uint64_t v26 = sub_1D7A9AF68();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v21, 1, 1, v26);
  }
  sub_1D7A05724((uint64_t)v21, (uint64_t)&v22[OBJC_IVAR____TtC13CoreIDVShared32IdentityProofingLivenessVideoURL_url]);
  sub_1D78C4038(0, (unint64_t *)&unk_1EA8477F8);
  *(void *)&v22[OBJC_IVAR____TtC13CoreIDVShared32IdentityProofingLivenessVideoURL_fileHandle] = sub_1D7A9C908();
  uint64_t v27 = sub_1D7A9C908();
  if (v27)
  {
    id v28 = (void *)v27;
    sub_1D7A9AF38();

    uint64_t v29 = sub_1D7A9AF68();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v12, 0, 1, v29);
  }
  else
  {
    uint64_t v30 = sub_1D7A9AF68();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v12, 1, 1, v30);
  }
  sub_1D7A05724((uint64_t)v12, (uint64_t)&v22[OBJC_IVAR____TtC13CoreIDVShared32IdentityProofingLivenessVideoURL_auxiliaryURL]);
  *(void *)&v22[OBJC_IVAR____TtC13CoreIDVShared32IdentityProofingLivenessVideoURL_auxiliaryFileHandle] = sub_1D7A9C908();

  v32.receiver = v22;
  v32.super_class = ObjectType;
  return objc_msgSendSuper2(&v32, sel_init);
}

uint64_t sub_1D7A6B33C()
{
  return type metadata accessor for IdentityProofingLivenessVideoURL();
}

uint64_t type metadata accessor for IdentityProofingLivenessVideoURL()
{
  uint64_t result = qword_1EA847808;
  if (!qword_1EA847808) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1D7A6B390()
{
  sub_1D7A09568();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for IdentityProofingLivenessVideoURL(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for IdentityProofingLivenessVideoURL);
}

uint64_t dispatch thunk of IdentityProofingLivenessVideoURL.__allocating_init(url:auxiliary:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of IdentityProofingLivenessVideoURL.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

SecCertificateRef_optional __swiftcall SecTrustRef.getLeafCertificate()()
{
  CFArrayRef v1 = SecTrustCopyCertificateChain(v0);
  if (v1)
  {
    CFArrayRef v2 = v1;
    type metadata accessor for SecCertificate(0);
    sub_1D7A9C308();
  }
  return 0;
}

__SecCertificate *Array<A>.base64EncodedStrings()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_bridgeObjectRetain();
  if (MEMORY[0x1D947B150](v4, a2))
  {
    uint64_t v59 = a1;
    uint64_t v61 = a2;
    if (sub_1D7A9C398())
    {
      uint64_t v5 = 0;
      uint64_t v6 = (void *)MEMORY[0x1E4FBC860];
      while (1)
      {
        uint64_t result = (__SecCertificate *)sub_1D7A9C358();
        uint64_t v8 = v5 + 1;
        if (__OFADD__(v5, 1)) {
          break;
        }
        uint64_t v9 = (__SecCertificate *)*(id *)(a1 + 8 * v5 + 32);
        CFDataRef v10 = SecCertificateCopyData(v9);
        uint64_t v11 = sub_1D7A9B028();
        unint64_t v13 = v12;

        uint64_t v14 = sub_1D7A9B008();
        uint64_t v16 = v15;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v6 = sub_1D789E300(0, v6[2] + 1, 1, v6);
        }
        unint64_t v18 = v6[2];
        unint64_t v17 = v6[3];
        if (v18 >= v17 >> 1) {
          uint64_t v6 = sub_1D789E300((void *)(v17 > 1), v18 + 1, 1, v6);
        }
        v6[2] = v18 + 1;
        uint64_t v19 = &v6[2 * v18];
        _OWORD v19[4] = v14;
        v19[5] = v16;

        sub_1D78607E8(v11, v13);
        a1 = v59;
        ++v5;
        if (v8 == MEMORY[0x1D947B150](v59, v61)) {
          goto LABEL_41;
        }
      }
      __break(1u);
    }
    else
    {
      if ((sub_1D7A9C398() & 1) == 0)
      {
        if ((sub_1D7A9C398() & 1) == 0)
        {
          uint64_t v6 = (void *)MEMORY[0x1E4FBC860];
          uint64_t v45 = 4;
          while (1)
          {
            char v46 = sub_1D7A9C398();
            sub_1D7A9C358();
            uint64_t result = (v46 & 1) != 0
                   ? (__SecCertificate *)*(id *)(a1 + 8 * v45)
                   : (__SecCertificate *)sub_1D7A9CC88();
            id v47 = result;
            uint64_t v48 = v45 - 3;
            if (__OFADD__(v45 - 4, 1)) {
              break;
            }
            CFDataRef v49 = SecCertificateCopyData(result);
            uint64_t v50 = sub_1D7A9B028();
            unint64_t v52 = v51;

            uint64_t v53 = sub_1D7A9B008();
            uint64_t v55 = v54;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v6 = sub_1D789E300(0, v6[2] + 1, 1, v6);
            }
            unint64_t v57 = v6[2];
            unint64_t v56 = v6[3];
            if (v57 >= v56 >> 1) {
              uint64_t v6 = sub_1D789E300((void *)(v56 > 1), v57 + 1, 1, v6);
            }
            v6[2] = v57 + 1;
            uint64_t v58 = &v6[2 * v57];
            v58[4] = v53;
            v58[5] = v55;

            sub_1D78607E8(v50, v52);
            a1 = v59;
            ++v45;
            if (v48 == MEMORY[0x1D947B150](v59, v61))
            {
LABEL_41:
              swift_bridgeObjectRelease();
              return (__SecCertificate *)v6;
            }
          }
          goto LABEL_46;
        }
        uint64_t v33 = 0;
        uint64_t v6 = (void *)MEMORY[0x1E4FBC860];
        while (1)
        {
          uint64_t result = (__SecCertificate *)sub_1D7A9C358();
          uint64_t v34 = v33 + 1;
          if (__OFADD__(v33, 1)) {
            break;
          }
          uint64_t v35 = (__SecCertificate *)*(id *)(a1 + 8 * v33 + 32);
          CFDataRef v36 = SecCertificateCopyData(v35);
          uint64_t v37 = sub_1D7A9B028();
          unint64_t v39 = v38;

          uint64_t v40 = sub_1D7A9B008();
          uint64_t v60 = v41;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v6 = sub_1D789E300(0, v6[2] + 1, 1, v6);
          }
          unint64_t v43 = v6[2];
          unint64_t v42 = v6[3];
          if (v43 >= v42 >> 1) {
            uint64_t v6 = sub_1D789E300((void *)(v42 > 1), v43 + 1, 1, v6);
          }
          v6[2] = v43 + 1;
          uint64_t v44 = &v6[2 * v43];
          v44[4] = v40;
          v44[5] = v60;

          sub_1D78607E8(v37, v39);
          ++v33;
          if (v34 == MEMORY[0x1D947B150](a1, v61)) {
            goto LABEL_41;
          }
        }
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
        return result;
      }
      uint64_t v20 = 0;
      uint64_t v6 = (void *)MEMORY[0x1E4FBC860];
      while (1)
      {
        uint64_t result = (__SecCertificate *)sub_1D7A9C358();
        uint64_t v21 = v20 + 1;
        if (__OFADD__(v20, 1)) {
          break;
        }
        uint64_t v22 = (__SecCertificate *)*(id *)(a1 + 8 * v20 + 32);
        CFDataRef v23 = SecCertificateCopyData(v22);
        uint64_t v24 = sub_1D7A9B028();
        unint64_t v26 = v25;

        uint64_t v27 = sub_1D7A9B008();
        uint64_t v29 = v28;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v6 = sub_1D789E300(0, v6[2] + 1, 1, v6);
        }
        unint64_t v31 = v6[2];
        unint64_t v30 = v6[3];
        if (v31 >= v30 >> 1) {
          uint64_t v6 = sub_1D789E300((void *)(v30 > 1), v31 + 1, 1, v6);
        }
        v6[2] = v31 + 1;
        objc_super v32 = &v6[2 * v31];
        v32[4] = v27;
        v32[5] = v29;

        sub_1D78607E8(v24, v26);
        a1 = v59;
        ++v20;
        if (v21 == MEMORY[0x1D947B150](v59, v61)) {
          goto LABEL_41;
        }
      }
    }
    __break(1u);
    goto LABEL_45;
  }
  swift_bridgeObjectRelease();
  return (__SecCertificate *)MEMORY[0x1E4FBC860];
}

Swift::String_optional __swiftcall SecCertificateRef.commonName()()
{
  CFArrayRef v1 = v0;
  commonName[1] = *(CFStringRef *)MEMORY[0x1E4F143B8];
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v4, v5, v6, v7, v8, v9, v10);
  unint64_t v12 = (char *)v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  commonName[0] = 0;
  OSStatus v13 = SecCertificateCopyCommonName(v1, commonName);
  if (v13)
  {
    CFStringRef v14 = SecCopyErrorMessageString(v13, 0);
    if (v14)
    {
      uint64_t v15 = (__CFString *)v14;
      uint64_t v16 = sub_1D7A9BFC8();
      unint64_t v18 = v17;
    }
    else
    {
      unint64_t v18 = 0xE500000000000000;
      uint64_t v16 = 0x3E6C696E3CLL;
    }
    if (qword_1EBDF9DC8 != -1) {
      swift_once();
    }
    uint64_t v23 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE70);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v12, v23, v2);
    swift_bridgeObjectRetain();
    uint64_t v24 = sub_1D7A9B5D8();
    os_log_type_t v25 = sub_1D7A9C758();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = swift_slowAlloc();
      v32[0] = v16;
      uint64_t v27 = (uint8_t *)v26;
      uint64_t v28 = swift_slowAlloc();
      uint64_t v33 = v28;
      *(_DWORD *)uint64_t v27 = 136446210;
      swift_bridgeObjectRetain();
      v32[1] = sub_1D7923300(v32[0], v18, &v33);
      sub_1D7A9C9E8();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1D7853000, v24, v25, "error during SecCertificateCopyCommonName, error: %{public}s", v27, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D947D740](v28, -1, -1);
      MEMORY[0x1D947D740](v27, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);

    goto LABEL_13;
  }
  uint64_t v19 = (__CFString *)commonName[0];
  if (!commonName[0])
  {
LABEL_13:
    uint64_t v20 = 0;
    uint64_t v22 = 0;
    goto LABEL_14;
  }
  uint64_t v20 = sub_1D7A9BFC8();
  uint64_t v22 = v21;

LABEL_14:
  uint64_t v29 = v20;
  unint64_t v30 = v22;
  result.value._object = v30;
  result.value._countAndFlagsBits = v29;
  return result;
}

uint64_t SecCertificateRef.serialNumber.getter()
{
  CFDataRef v1 = SecCertificateCopySerialNumberData(v0, 0);
  if (!v1) {
    return 0;
  }
  CFDataRef v2 = v1;
  uint64_t v3 = sub_1D7A9B028();

  return v3;
}

uint64_t SecAccessControlRef.data.getter()
{
  uint64_t result = SecAccessControlCopyData();
  if (result)
  {
    CFDataRef v1 = (void *)result;
    uint64_t v2 = sub_1D7A9B028();

    return v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id static SecAccessControlRef.fromData(_:)()
{
  return sub_1D7A746CC();
}

uint64_t sub_1D7A6BE30(uint64_t a1, unint64_t a2, uint64_t a3)
{
  __s1[2] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a3 + 16);
  if (!v3) {
    return 0;
  }
  unint64_t v5 = a2;
  uint64_t v7 = (char *)(a2 >> 62);
  unint64_t v75 = HIDWORD(a1);
  BOOL v8 = __OFSUB__(HIDWORD(a1), a1);
  BOOL v78 = v8;
  size_t __n = BYTE6(a2);
  uint64_t v76 = (int)a1;
  size_t v77 = HIDWORD(a1) - (int)a1;
  uint64_t v74 = a1 >> 32;
  uint64_t v70 = (a1 >> 32) - (int)a1;
  swift_bridgeObjectRetain();
  uint64_t v9 = (unint64_t *)(a3 + 40);
  unint64_t v72 = HIDWORD(v5);
  unint64_t v73 = v5 >> 40;
  uint64_t v80 = v7;
  unint64_t v71 = v5;
  int v79 = (int)v7;
  while (2)
  {
    uint64_t v11 = *(v9 - 1);
    unint64_t v10 = *v9;
    unint64_t v12 = *v9 >> 62;
    v9 += 2;
    uint64_t v13 = 0;
    switch(v12)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v11), v11))
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
        }
        uint64_t v13 = HIDWORD(v11) - (int)v11;
LABEL_14:
        sub_1D7860790(v11, v10);
        break;
      case 2uLL:
        uint64_t v15 = *(void *)(v11 + 16);
        uint64_t v14 = *(void *)(v11 + 24);
        uint64_t v13 = v14 - v15;
        if (!__OFSUB__(v14, v15)) {
          goto LABEL_14;
        }
        goto LABEL_121;
      case 3uLL:
        break;
      default:
        uint64_t v13 = BYTE6(v10);
        break;
    }
    size_t v16 = __n;
    switch(v80)
    {
      case 1:
        size_t v16 = v77;
        if (v78) {
          goto LABEL_122;
        }
        goto LABEL_19;
      case 2:
        uint64_t v18 = *(void *)(a1 + 16);
        uint64_t v17 = *(void *)(a1 + 24);
        BOOL v19 = __OFSUB__(v17, v18);
        size_t v16 = v17 - v18;
        if (!v19) {
          goto LABEL_19;
        }
        goto LABEL_123;
      case 3:
        if (v13) {
          goto LABEL_7;
        }
        goto LABEL_118;
      default:
LABEL_19:
        if (v13 != v16)
        {
LABEL_7:
          sub_1D78607E8(v11, v10);
LABEL_8:
          if (!--v3)
          {
            swift_bridgeObjectRelease();
            return 0;
          }
          continue;
        }
        if (v13 >= 1)
        {
          switch((int)v12)
          {
            case 1:
              if ((int)v11 > v11 >> 32) {
                goto LABEL_124;
              }
              uint64_t v24 = sub_1D7A9AC98();
              if (v24)
              {
                uint64_t v25 = v24;
                uint64_t v26 = sub_1D7A9ACB8();
                if (__OFSUB__((int)v11, v26)) {
                  goto LABEL_126;
                }
                uint64_t v27 = (const void *)(v25 + (int)v11 - v26);
              }
              else
              {
                uint64_t v27 = 0;
              }
              sub_1D7A9ACA8();
              LODWORD(v7) = v79;
              if (!v79)
              {
                LOWORD(__s1[0]) = a1;
                BYTE2(__s1[0]) = BYTE2(a1);
                BYTE3(__s1[0]) = BYTE3(a1);
                BYTE4(__s1[0]) = v75;
                BYTE5(__s1[0]) = BYTE5(a1);
                BYTE6(__s1[0]) = BYTE6(a1);
                HIBYTE(__s1[0]) = HIBYTE(a1);
                LOWORD(__s1[1]) = v5;
                BYTE2(__s1[1]) = BYTE2(v5);
                BYTE3(__s1[1]) = BYTE3(v5);
                BYTE4(__s1[1]) = v72;
                BYTE5(__s1[1]) = v73;
                if (!v27) {
                  goto LABEL_154;
                }
                int v34 = memcmp(v27, __s1, __n);
                goto LABEL_101;
              }
              if (v79 == 1)
              {
                if (v74 < v76) {
                  goto LABEL_135;
                }
                swift_retain();
                uint64_t v41 = (char *)sub_1D7A9AC98();
                if (v41)
                {
                  uint64_t v42 = sub_1D7A9ACB8();
                  if (__OFSUB__(v76, v42)) {
                    goto LABEL_142;
                  }
                  v41 += v76 - v42;
                }
                uint64_t v43 = sub_1D7A9ACA8();
                size_t v44 = v70;
                if (v43 < v70) {
                  size_t v44 = v43;
                }
                if (!v27) {
                  goto LABEL_147;
                }
                if (!v41) {
                  goto LABEL_148;
                }
                int v34 = memcmp(v27, v41, v44);
                sub_1D78607E8(a1, v5);
LABEL_101:
                sub_1D78607E8(v11, v10);
LABEL_102:
                if (!v34) {
                  goto LABEL_119;
                }
                goto LABEL_8;
              }
              uint64_t v61 = *(void *)(a1 + 16);
              uint64_t v62 = *(void *)(a1 + 24);
              swift_retain();
              swift_retain();
              uint64_t v63 = (char *)sub_1D7A9AC98();
              if (v63)
              {
                uint64_t v64 = sub_1D7A9ACB8();
                if (__OFSUB__(v61, v64)) {
                  goto LABEL_141;
                }
                v63 += v61 - v64;
              }
              BOOL v19 = __OFSUB__(v62, v61);
              int64_t v65 = v62 - v61;
              if (v19) {
                goto LABEL_136;
              }
              uint64_t v66 = sub_1D7A9ACA8();
              if (v66 >= v65) {
                size_t v67 = v65;
              }
              else {
                size_t v67 = v66;
              }
              if (!v27) {
                goto LABEL_155;
              }
              unint64_t v5 = v71;
              LODWORD(v7) = v79;
              if (!v63) {
                goto LABEL_156;
              }
              int v40 = memcmp(v27, v63, v67);
              swift_release();
              swift_release();
LABEL_114:
              sub_1D78607E8(v11, v10);
              if (!v40) {
                goto LABEL_119;
              }
              break;
            case 2:
              uint64_t v28 = *(void *)(v11 + 16);
              swift_retain();
              swift_retain();
              uint64_t v29 = (char *)sub_1D7A9AC98();
              if (!v29) {
                goto LABEL_36;
              }
              uint64_t v30 = sub_1D7A9ACB8();
              if (__OFSUB__(v28, v30)) {
                goto LABEL_125;
              }
              v29 += v28 - v30;
LABEL_36:
              sub_1D7A9ACA8();
              LODWORD(v7) = v79;
              if (!v79)
              {
                LOWORD(__s1[0]) = a1;
                BYTE2(__s1[0]) = BYTE2(a1);
                BYTE3(__s1[0]) = BYTE3(a1);
                BYTE4(__s1[0]) = v75;
                BYTE5(__s1[0]) = BYTE5(a1);
                BYTE6(__s1[0]) = BYTE6(a1);
                HIBYTE(__s1[0]) = HIBYTE(a1);
                LOWORD(__s1[1]) = v5;
                BYTE2(__s1[1]) = BYTE2(v5);
                BYTE3(__s1[1]) = BYTE3(v5);
                BYTE4(__s1[1]) = v72;
                BYTE5(__s1[1]) = v73;
                if (!v29) {
                  goto LABEL_151;
                }
                int v34 = memcmp(v29, __s1, __n);
                swift_release();
                swift_release();
                goto LABEL_101;
              }
              if (v79 == 1)
              {
                if (v74 < v76) {
                  goto LABEL_129;
                }
                swift_retain();
                uint64_t v7 = (char *)sub_1D7A9AC98();
                if (v7)
                {
                  uint64_t v31 = sub_1D7A9ACB8();
                  if (__OFSUB__(v76, v31)) {
                    goto LABEL_140;
                  }
                  v7 += v76 - v31;
                }
                uint64_t v32 = sub_1D7A9ACA8();
                size_t v33 = v70;
                if (v32 < v70) {
                  size_t v33 = v32;
                }
                if (!v29) {
                  goto LABEL_144;
                }
                if (!v7) {
                  goto LABEL_145;
                }
                int v34 = memcmp(v29, v7, v33);
                sub_1D78607E8(a1, v5);
                swift_release();
                swift_release();
                sub_1D78607E8(v11, v10);
                LODWORD(v7) = v79;
                goto LABEL_102;
              }
              uint64_t v55 = *(void *)(a1 + 16);
              uint64_t v69 = *(void *)(a1 + 24);
              swift_retain();
              swift_retain();
              unint64_t v56 = (char *)sub_1D7A9AC98();
              if (v56)
              {
                uint64_t v57 = sub_1D7A9ACB8();
                if (__OFSUB__(v55, v57)) {
                  goto LABEL_139;
                }
                v56 += v55 - v57;
              }
              BOOL v19 = __OFSUB__(v69, v55);
              int64_t v58 = v69 - v55;
              if (v19) {
                goto LABEL_134;
              }
              uint64_t v59 = sub_1D7A9ACA8();
              if (v59 >= v58) {
                size_t v60 = v58;
              }
              else {
                size_t v60 = v59;
              }
              if (!v29) {
                goto LABEL_152;
              }
              unint64_t v5 = v71;
              if (!v56) {
                goto LABEL_153;
              }
              int v39 = memcmp(v29, v56, v60);
              swift_release();
              swift_release();
              swift_release();
              swift_release();
LABEL_96:
              sub_1D78607E8(v11, v10);
LABEL_97:
              LODWORD(v7) = v79;
              if (!v39) {
                goto LABEL_119;
              }
              goto LABEL_8;
            case 3:
              memset(__s1, 0, 14);
              if (!v7) {
                goto LABEL_56;
              }
              if (v7 == 1)
              {
                if (v74 < v76) {
                  goto LABEL_128;
                }
                sub_1D7860790(a1, v5);
                uint64_t v35 = sub_1D7A9AC98();
                if (!v35) {
                  goto LABEL_146;
                }
                uint64_t v21 = v35;
                uint64_t v36 = sub_1D7A9ACB8();
                uint64_t v23 = v76 - v36;
                if (__OFSUB__(v76, v36)) {
                  goto LABEL_133;
                }
LABEL_52:
                uint64_t v37 = sub_1D7A9ACA8();
                if (v37 >= v70) {
                  size_t v38 = v70;
                }
                else {
                  size_t v38 = v37;
                }
                int v39 = memcmp(__s1, (const void *)(v21 + v23), v38);
                sub_1D78607E8(a1, v5);
                goto LABEL_96;
              }
              uint64_t v51 = *(void *)(a1 + 16);
              uint64_t v52 = *(void *)(a1 + 24);
              swift_retain();
              swift_retain();
              id v47 = (char *)sub_1D7A9AC98();
              if (v47)
              {
                uint64_t v53 = sub_1D7A9ACB8();
                if (__OFSUB__(v51, v53)) {
                  goto LABEL_138;
                }
                v47 += v51 - v53;
              }
              BOOL v19 = __OFSUB__(v52, v51);
              int64_t v49 = v52 - v51;
              if (v19) {
                goto LABEL_131;
              }
              uint64_t v50 = sub_1D7A9ACA8();
              if (!v47) {
                goto LABEL_150;
              }
LABEL_80:
              if (v50 >= v49) {
                size_t v54 = v49;
              }
              else {
                size_t v54 = v50;
              }
              int v39 = memcmp(__s1, v47, v54);
              swift_release();
              swift_release();
              sub_1D78607E8(v11, v10);
              unint64_t v5 = v71;
              goto LABEL_97;
            default:
              __s1[0] = v11;
              LOWORD(__s1[1]) = v10;
              BYTE2(__s1[1]) = BYTE2(v10);
              BYTE3(__s1[1]) = BYTE3(v10);
              BYTE4(__s1[1]) = BYTE4(v10);
              BYTE5(__s1[1]) = BYTE5(v10);
              if (!v7)
              {
LABEL_56:
                __int16 __s2 = a1;
                char v83 = BYTE2(a1);
                char v84 = BYTE3(a1);
                char v85 = v75;
                char v86 = BYTE5(a1);
                char v87 = BYTE6(a1);
                char v88 = HIBYTE(a1);
                __int16 v89 = v5;
                char v90 = BYTE2(v5);
                char v91 = BYTE3(v5);
                char v92 = v72;
                char v93 = v73;
                int v40 = memcmp(__s1, &__s2, __n);
                goto LABEL_114;
              }
              if (v7 == 1)
              {
                if (v74 < v76) {
                  goto LABEL_127;
                }
                sub_1D7860790(a1, v5);
                uint64_t v20 = sub_1D7A9AC98();
                if (!v20)
                {
                  sub_1D7A9ACA8();
                  __break(1u);
LABEL_144:
                  __break(1u);
LABEL_145:
                  __break(1u);
LABEL_146:
                  sub_1D7A9ACA8();
                  __break(1u);
LABEL_147:
                  __break(1u);
LABEL_148:
                  __break(1u);
LABEL_149:
                  __break(1u);
LABEL_150:
                  __break(1u);
LABEL_151:
                  __break(1u);
LABEL_152:
                  __break(1u);
LABEL_153:
                  __break(1u);
LABEL_154:
                  __break(1u);
LABEL_155:
                  __break(1u);
LABEL_156:
                  __break(1u);
                  JUMPOUT(0x1D7A6C780);
                }
                uint64_t v21 = v20;
                uint64_t v22 = sub_1D7A9ACB8();
                uint64_t v23 = v76 - v22;
                if (__OFSUB__(v76, v22)) {
                  goto LABEL_132;
                }
                goto LABEL_52;
              }
              uint64_t v45 = *(void *)(a1 + 16);
              uint64_t v46 = *(void *)(a1 + 24);
              swift_retain();
              swift_retain();
              id v47 = (char *)sub_1D7A9AC98();
              if (v47)
              {
                uint64_t v48 = sub_1D7A9ACB8();
                if (__OFSUB__(v45, v48)) {
                  goto LABEL_137;
                }
                v47 += v45 - v48;
              }
              BOOL v19 = __OFSUB__(v46, v45);
              int64_t v49 = v46 - v45;
              if (v19) {
                goto LABEL_130;
              }
              uint64_t v50 = sub_1D7A9ACA8();
              if (!v47) {
                goto LABEL_149;
              }
              goto LABEL_80;
          }
          goto LABEL_8;
        }
LABEL_118:
        sub_1D78607E8(v11, v10);
LABEL_119:
        swift_bridgeObjectRelease();
        return 1;
    }
  }
}

SecCertificateRef __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> decodeCertificate(fromBase64DER:)(Swift::String fromBase64DER)
{
  Swift::String v12 = fromBase64DER;
  sub_1D791118C();
  sub_1D7A9CA58();
  uint64_t v2 = v1;
  uint64_t v3 = sub_1D7A9AFB8();
  unint64_t v5 = v4;
  swift_bridgeObjectRelease();
  if (v5 >> 60 == 15)
  {
    LOWORD(v12._countAndFlagsBits) = 119;
    unint64_t v6 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000022, 0x80000001D7AC8F50, (__int16 *)&v12, 0, v6, 0xD000000000000056, 0x80000001D7AC8F80, v7, 0xD000000000000021, 0x80000001D7AC8FE0, 200);
    swift_willThrow();
  }
  else
  {
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFDataRef v9 = (const __CFData *)sub_1D7A9AFF8();
    uint64_t v2 = SecCertificateCreateWithData(v8, v9);

    if (v2)
    {
      sub_1D7871BDC(v3, v5);
    }
    else
    {
      LOWORD(v12._countAndFlagsBits) = 152;
      uint64_t v2 = (__SecCertificate *)sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000002ALL, 0x80000001D7AC9010, (__int16 *)&v12, 0, (uint64_t)v2, 0xD000000000000056, 0x80000001D7AC8F80, v10, 0xD000000000000021, 0x80000001D7AC8FE0, 203);
      swift_willThrow();
      sub_1D7871BDC(v3, v5);
    }
  }
  return v2;
}

uint64_t DIPSecTrustEvaluate(_:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return MEMORY[0x1F4188298](sub_1D7A6CA2C, 0, 0);
}

uint64_t sub_1D7A6CA2C()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = swift_task_alloc();
  v0[3] = v2;
  *(void *)(v2 + 16) = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[4] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1D7A6CB28;
  uint64_t v4 = MEMORY[0x1E4FBB390];
  return MEMORY[0x1F4188160](v0 + 6, 0, 0, 0xD000000000000017, 0x80000001D7AC9280, sub_1D7A16014, v2, v4);
}

uint64_t sub_1D7A6CB28()
{
  *(void *)(*(void *)v1 + 40) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1D7A6CC60;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_1D7A6CC44;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

uint64_t sub_1D7A6CC44()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(unsigned __int8 *)(v0 + 48));
}

uint64_t sub_1D7A6CC60()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t decodeCertificateChain(fromBase64DER:)(uint64_t a1)
{
  uint64_t result = MEMORY[0x1E4FBC860];
  uint64_t v21 = MEMORY[0x1E4FBC860];
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    swift_bridgeObjectRetain();
    sub_1D791118C();
    uint64_t v4 = (uint64_t *)(a1 + 40);
    while (1)
    {
      uint64_t v5 = *v4;
      v20[0] = *(v4 - 1);
      v20[1] = v5;
      swift_bridgeObjectRetain();
      sub_1D7A9CA58();
      uint64_t v6 = sub_1D7A9AFB8();
      unint64_t v8 = v7;
      swift_bridgeObjectRelease();
      if (v8 >> 60 == 15)
      {
        LOWORD(v20[0]) = 119;
        unint64_t v15 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
        sub_1D7860544();
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000022, 0x80000001D7AC8F50, (__int16 *)v20, 0, v15, 0xD000000000000056, 0x80000001D7AC8F80, v16, 0xD000000000000021, 0x80000001D7AC8FE0, 200);
        swift_willThrow();
        goto LABEL_11;
      }
      CFDataRef v9 = (const __CFData *)sub_1D7A9AFF8();
      SecCertificateRef v10 = SecCertificateCreateWithData(allocator, v9);

      if (!v10) {
        break;
      }
      sub_1D7871BDC(v6, v8);
      swift_bridgeObjectRelease();
      uint64_t v11 = v10;
      MEMORY[0x1D947B060](v11, v12, v13, v14);
      if (*(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_1D7A9C368();
      }
      v4 += 2;
      sub_1D7A9C3A8();
      sub_1D7A9C338();

      if (!--v3)
      {
        swift_bridgeObjectRelease();
        return v21;
      }
    }
    LOWORD(v20[0]) = 152;
    unint64_t v17 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000002ALL, 0x80000001D7AC9010, (__int16 *)v20, 0, v17, 0xD000000000000056, 0x80000001D7AC8F80, v18, 0xD000000000000021, 0x80000001D7AC8FE0, 203);
    swift_willThrow();
    sub_1D7871BDC(v6, v8);
LABEL_11:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t DIPSecureData.__allocating_init(_:)(void *a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = a1;
  CFDataRef v3 = a1;
  BytePtr = CFDataGetBytePtr(v3);
  size_t Length = CFDataGetLength(v3);
  mlock(BytePtr, Length);

  return v2;
}

uint64_t DIPSecureData.init(_:)(void *a1)
{
  *(void *)(v1 + 16) = a1;
  CFDataRef v2 = a1;
  BytePtr = CFDataGetBytePtr(v2);
  size_t Length = CFDataGetLength(v2);
  mlock(BytePtr, Length);

  return v1;
}

uint64_t DIPSecureData.deinit()
{
  CFDataRef v1 = *(const __CFData **)(v0 + 16);
  BytePtr = (UInt8 *)CFDataGetBytePtr(v1);
  rsize_t Length = CFDataGetLength(v1);
  memset_s(BytePtr, Length, 0, Length);
  munlock(BytePtr, Length);

  return v0;
}

uint64_t DIPSecureData.__deallocating_deinit()
{
  CFDataRef v1 = *(const __CFData **)(v0 + 16);
  BytePtr = (UInt8 *)CFDataGetBytePtr(v1);
  rsize_t Length = CFDataGetLength(v1);
  memset_s(BytePtr, Length, 0, Length);
  munlock(BytePtr, Length);

  return swift_deallocClassInstance();
}

const UInt8 *sub_1D7A6D1B0()
{
  uint64_t result = CFDataGetBytePtr(*(CFDataRef *)(v0 + 16));
  if (!result) {
    __break(1u);
  }
  return result;
}

CFIndex sub_1D7A6D1D4()
{
  return CFDataGetLength(*(CFDataRef *)(v0 + 16));
}

SecKeyRef SecKeyRef.publicKey.getter()
{
  return SecKeyCopyPublicKey(v0);
}

uint64_t SecKeyRef.publicKeyData.getter()
{
  CFDataRef v1 = v0;
  error[1] = *(CFErrorRef *)MEMORY[0x1E4F143B8];
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v4, v5, v6, v7, v8, v9, v10);
  uint64_t v12 = (char *)&v26[-4] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  error[0] = 0;
  uint64_t v13 = SecKeyCopyPublicKey(v1);
  if (v13)
  {
    uint64_t v14 = v13;
    CFDataRef v15 = SecKeyCopyExternalRepresentation(v13, error);
    if (v15)
    {
      CFDataRef v16 = v15;
      uint64_t v17 = sub_1D7A9B028();
      unint64_t v19 = v18;

      CFErrorRef v20 = error[0];
      if (error[0])
      {
LABEL_4:
        v26[0] = 0;
        errorFromCFError(_:_:_:)(v20, 0xD00000000000001DLL, 0x80000001D7ACC820, v26);
        uint64_t v22 = v21;
        if (qword_1EBDF9DC8 != -1) {
          swift_once();
        }
        uint64_t v23 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE70);
        swift_beginAccess();
        (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v12, v23, v2);
        DIPLogError(_:message:log:)(v22, 0, 0xE000000000000000);
        _s13CoreIDVShared9AnalyticsC9sendErroryys0E0_pFZ_0(v22);

        sub_1D7871BDC(v17, v19);
        (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);
        return 0;
      }
    }
    else
    {
      uint64_t v17 = 0;
      unint64_t v19 = 0xF000000000000000;
      CFErrorRef v20 = error[0];
      if (error[0]) {
        goto LABEL_4;
      }
    }

    return v17;
  }
  return 0;
}

uint64_t SecKeyRef.publicKeyIdentifier.getter()
{
  _OWORD v34[3] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = sub_1D7A9BE78();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0, v2, v3, v4, v5, v6, v7, v8);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1D7A9BE68();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11, v13, v14, v15, v16, v17, v18, v19);
  uint64_t v21 = (char *)&v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = SecKeyRef.publicKeyData.getter();
  uint64_t v23 = v22;
  unint64_t v25 = v24;
  if (v24 >> 60 == 15) {
    return v22;
  }
  sub_1D7A74D1C(&qword_1EA844190, MEMORY[0x1E4F251E8]);
  sub_1D7A9B828();
  uint64_t v33 = v12;
  switch(v25 >> 62)
  {
    case 1uLL:
      if (v23 >> 32 < (int)v23) {
        __break(1u);
      }
      unint64_t v32 = v25 & 0x3FFFFFFFFFFFFFFFLL;
      sub_1D7860790(v23, v25);
      sub_1D79328C4((int)v23, v23 >> 32);
      break;
    case 2uLL:
      uint64_t v27 = *(void *)(v23 + 16);
      unint64_t v32 = *(void *)(v23 + 24);
      sub_1D786E9D8(v23, v25);
      swift_retain();
      swift_retain();
      sub_1D79328C4(v27, v32);
      swift_release();
      swift_release();
      break;
    case 3uLL:
      memset(v34, 0, 14);
      goto LABEL_9;
    default:
      v34[0] = v23;
      LOWORD(v34[1]) = v25;
      BYTE2(v34[1]) = BYTE2(v25);
      BYTE3(v34[1]) = BYTE3(v25);
      BYTE4(v34[1]) = BYTE4(v25);
      BYTE5(v34[1]) = BYTE5(v25);
LABEL_9:
      sub_1D7A9B808();
      break;
  }
  sub_1D7871BDC(v23, v25);
  sub_1D7A9B818();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v10, v0);
  sub_1D7A74D1C(&qword_1EA846858, MEMORY[0x1E4F251C8]);
  uint64_t v28 = sub_1D7A9BD78();
  uint64_t v30 = sub_1D78D1370(v28, v29);
  swift_bridgeObjectRelease();
  uint64_t v26 = sub_1D78D1EB0(v30);
  swift_release();
  sub_1D7871BDC(v23, v25);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v21, v11);
  return v26;
}

uint64_t SecKeyRef.KeyClass.init(rawValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  if (sub_1D7A9BFC8() == a1 && v6 == a2)
  {
    char v9 = 1;
LABEL_16:
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  char v8 = sub_1D7A9D358();
  swift_bridgeObjectRelease();
  if (v8)
  {
    char v9 = 1;
LABEL_17:
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  if (sub_1D7A9BFC8() == a1 && v10 == a2)
  {
    char v9 = 0;
    goto LABEL_16;
  }
  char v12 = sub_1D7A9D358();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v12) {
    char v9 = 0;
  }
  else {
    char v9 = 2;
  }
LABEL_18:
  *a3 = v9;
  return result;
}

uint64_t SecKeyRef.KeyClass.rawValue.getter()
{
  return sub_1D7A9BFC8();
}

uint64_t sub_1D7A6D950()
{
  return sub_1D7994498();
}

uint64_t sub_1D7A6D95C()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D7A6D9D8()
{
  sub_1D7A9BFC8();
  sub_1D7A9C0B8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D7A6DA48()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D7A6DAC0@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  return SecKeyRef.KeyClass.init(rawValue:)(*a1, a1[1], a2);
}

uint64_t sub_1D7A6DACC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1D7A9BFC8();
  *a1 = result;
  a1[1] = v3;
  return result;
}

SecKeyRef static SecKeyRef.makeECKey(from:keyClass:)()
{
  error[1] = *(CFErrorRef *)MEMORY[0x1E4F143B8];
  error[0] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847840);
  uint64_t inited = swift_initStackObject();
  uint64_t v1 = (void **)MEMORY[0x1E4F3B718];
  *(_OWORD *)(inited + 16) = xmmword_1D7AA0A40;
  uint64_t v2 = *v1;
  uint64_t v3 = (void *)*MEMORY[0x1E4F3B730];
  *(void *)(inited + 32) = *v1;
  *(void *)(inited + 40) = v3;
  uint64_t v4 = (void *)*MEMORY[0x1E4F3B6D8];
  *(void *)(inited + 48) = *MEMORY[0x1E4F3B6D8];
  sub_1D7A9BFC8();
  id v5 = v2;
  id v6 = v3;
  id v7 = v4;
  uint64_t v8 = sub_1D7A9BF98();
  swift_bridgeObjectRelease();
  *(void *)(inited + 56) = v8;
  sub_1D786012C(inited);
  type metadata accessor for CFString(0);
  sub_1D7A74D1C((unint64_t *)&qword_1EA841FC8, type metadata accessor for CFString);
  CFDictionaryRef v9 = (const __CFDictionary *)sub_1D7A9BE98();
  swift_bridgeObjectRelease();
  CFDataRef v10 = (const __CFData *)sub_1D7A9AFF8();
  SecKeyRef v11 = SecKeyCreateWithData(v10, v9, error);

  if (!v11)
  {
    CFErrorRef v12 = error[0];
    if (error[0])
    {
      type metadata accessor for CFError(0);
      sub_1D7A74D1C((unint64_t *)&qword_1EBDF9578, type metadata accessor for CFError);
      uint64_t v13 = (void *)swift_allocError();
      *uint64_t v14 = v12;
    }
    else
    {
      uint64_t v13 = 0;
    }
    __int16 v19 = 254;
    id v15 = v13;
    unint64_t v16 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v13, 0xD000000000000027, 0x80000001D7ACC840, &v19, 0, v16, 0xD000000000000056, 0x80000001D7AC8F80, v17, 0xD000000000000019, 0x80000001D7ACC870, 121);
    swift_willThrow();
  }
  return v11;
}

char *SecKeyRef.sign(data:algorithm:)(uint64_t a1, uint64_t a2, const __CFString *a3)
{
  id v5 = v3;
  error[1] = *(CFErrorRef *)MEMORY[0x1E4F143B8];
  uint64_t v7 = sub_1D7A9BB98();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7, v9, v10, v11, v12, v13, v14, v15);
  uint64_t v17 = (char *)v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  error[0] = 0;
  if (!SecKeyIsAlgorithmSupported(v5, kSecKeyOperationTypeSign, a3))
  {
    uint64_t v36 = 0;
    unint64_t v37 = 0xE000000000000000;
    sub_1D7A9CC48();
    sub_1D7A9C128();
    v35[1] = a3;
    type metadata accessor for SecKeyAlgorithm(0);
    sub_1D7A9CE78();
    sub_1D7A9C128();
    uint64_t v17 = v36;
    uint64_t v26 = v37;
    LOWORD(v36) = 243;
    unint64_t v27 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, (uint64_t)v17, v26, (__int16 *)&v36, 0, v27, 0xD000000000000056, 0x80000001D7AC8F80, v28, 0xD000000000000015, 0x80000001D7ACC900, 131);
LABEL_7:
    swift_willThrow();
    return v17;
  }
  CFDataRef v18 = (const __CFData *)sub_1D7A9AFF8();
  CFDataRef Signature = SecKeyCreateSignature(v5, a3, v18, error);

  if (!Signature)
  {
    LOWORD(v36) = 245;
    errorFromCFError(_:_:_:)(error[0], 0xD000000000000021, 0x80000001D7ACC890, (__int16 *)&v36);
    goto LABEL_7;
  }
  CFDataRef v20 = Signature;
  uint64_t v21 = sub_1D7A9B028();
  unint64_t v23 = v22;

  uint64_t v36 = (char *)v21;
  unint64_t v37 = v23;
  sub_1D7885ADC();
  sub_1D7A9BB68();
  if (v4)
  {
    LOWORD(v36) = 255;
    id v24 = v4;
    uint64_t v17 = (char *)sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v4, 0xD00000000000003FLL, 0x80000001D7ACC8C0, (__int16 *)&v36, 0, (uint64_t)v17, 0xD000000000000056, 0x80000001D7AC8F80, v25, 0xD000000000000015, 0x80000001D7ACC900, 141);
    swift_willThrow();
  }
  else
  {
    uint64_t v30 = sub_1D7A9BB78();
    unint64_t v32 = v31;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v17, v7);
    switch(v32 >> 62)
    {
      case 1uLL:
        uint64_t v33 = (int)v30;
        uint64_t v34 = v30 >> 32;
        goto LABEL_12;
      case 2uLL:
        uint64_t v33 = *(void *)(v30 + 16);
        uint64_t v34 = *(void *)(v30 + 24);
LABEL_12:
        if (v34 < v33) {
          __break(1u);
        }
        return result;
      default:
        break;
    }
    uint64_t v17 = (char *)sub_1D7A9B058();
    sub_1D78607E8(v30, v32);
  }
  return v17;
}

void SecKeyRef.signSHA256Digest(_:algorithm:)(uint64_t a1, unint64_t a2)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      if ((int)a1 != a1 >> 32) {
        goto LABEL_3;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(a1 + 16) == *(void *)(a1 + 24)) {
        goto LABEL_8;
      }
      goto LABEL_3;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((a2 & 0xFF000000000000) != 0)
      {
LABEL_3:
        CFDictionaryRef v3 = SecKeyCopyAttributes(v2);
        if (v3)
        {
          CFDictionaryRef v4 = v3;
          *(void *)uint64_t v14 = 0;
          sub_1D7A9BEA8();
        }
        v14[0] = 251;
        unint64_t v5 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
        sub_1D7860544();
        uint64_t v7 = (void *)swift_allocError();
        uint64_t v8 = 0xD000000000000026;
        uint64_t v13 = 152;
        uint64_t v9 = "private key attributes are unavailable";
      }
      else
      {
LABEL_8:
        v14[0] = 105;
        unint64_t v5 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
        sub_1D7860544();
        uint64_t v7 = (void *)swift_allocError();
        uint64_t v8 = 0xD000000000000013;
        uint64_t v13 = 149;
        uint64_t v9 = "input data is empty";
      }
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, v8, (unint64_t)(v9 - 32) | 0x8000000000000000, v14, 0, v5, 0xD000000000000056, 0x80000001D7AC8F80, v6, 0xD00000000000001ELL, 0x80000001D7ACC970, v13);
      swift_willThrow();
      v14[0] = 0;
      id v10 = v7;
      unint64_t v11 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v7, 0, 0xE000000000000000, v14, 0, v11, 0xD000000000000056, 0x80000001D7AC8F80, v12, 0xD00000000000001ELL, 0x80000001D7ACC970, 169);
      swift_willThrow();

      return;
  }
}

uint64_t Array<A>.derRepresentation()()
{
  return sub_1D7A9C218();
}

uint64_t SecCertificateRef.derRepresentation()()
{
  CFDataRef v1 = SecCertificateCopyData(v0);
  uint64_t v2 = sub_1D7A9B028();

  return v2;
}

SecCertificateRef decodeCertificate(fromDER:)()
{
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFDataRef v1 = (const __CFData *)sub_1D7A9AFF8();
  SecCertificateRef v2 = SecCertificateCreateWithData(v0, v1);

  if (!v2)
  {
    __int16 v6 = 152;
    unint64_t v3 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000002ALL, 0x80000001D7AC9010, &v6, 0, v3, 0xD000000000000056, 0x80000001D7AC8F80, v4, 0xD00000000000001BLL, 0x80000001D7ACCA40, 211);
    swift_willThrow();
  }
  return v2;
}

uint64_t decodeCertificateChain(fromDER:)(uint64_t a1)
{
  uint64_t result = MEMORY[0x1E4FBC860];
  uint64_t v14 = MEMORY[0x1E4FBC860];
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    swift_bridgeObjectRetain();
    unint64_t v5 = (unint64_t *)(a1 + 40);
    while (1)
    {
      uint64_t v6 = *(v5 - 1);
      unint64_t v7 = *v5;
      sub_1D7860790(v6, *v5);
      CFDataRef v8 = (const __CFData *)sub_1D7A9AFF8();
      SecCertificateRef v9 = SecCertificateCreateWithData(v4, v8);

      if (!v9) {
        break;
      }
      id v10 = v9;
      MEMORY[0x1D947B060]();
      if (*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_1D7A9C368();
      }
      v5 += 2;
      sub_1D7A9C3A8();
      sub_1D7A9C338();

      sub_1D78607E8(v6, v7);
      if (!--v3)
      {
        swift_bridgeObjectRelease();
        return v14;
      }
    }
    __int16 v13 = 152;
    unint64_t v11 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000002ALL, 0x80000001D7AC9010, &v13, 0, v11, 0xD000000000000056, 0x80000001D7AC8F80, v12, 0xD00000000000001BLL, 0x80000001D7ACCA40, 211);
    swift_willThrow();
    sub_1D78607E8(v6, v7);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1D7A6EDB8(uint64_t a1, void *a2)
{
  size_t v67 = a2;
  uint64_t v68 = a1;
  uint64_t v2 = sub_1D7A9B6C8();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v72 = v2;
  uint64_t v73 = v3;
  MEMORY[0x1F4188790](v2, v4, v5, v6, v7, v8, v9, v10);
  unint64_t v71 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF8A30);
  uint64_t v12 = *(void *)(v66 - 8);
  uint64_t v65 = *(void *)(v12 + 64);
  MEMORY[0x1F4188790](v66, v13, v14, v15, v16, v17, v18, v19);
  uint64_t v64 = (char *)&v63 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = sub_1D7A9C7C8();
  uint64_t v21 = *(void *)(v63 - 8);
  MEMORY[0x1F4188790](v63, v22, v23, v24, v25, v26, v27, v28);
  uint64_t v30 = (char *)&v63 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_1D7A9C7B8();
  MEMORY[0x1F4188790](v31, v32, v33, v34, v35, v36, v37, v38);
  uint64_t v39 = sub_1D7A9B708();
  uint64_t v69 = *(void *)(v39 - 8);
  uint64_t v70 = v39;
  MEMORY[0x1F4188790](v39, v40, v41, v42, v43, v44, v45, v46);
  uint64_t v48 = (char *)&v63 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D78C4038(0, (unint64_t *)&qword_1EBDF9DB0);
  sub_1D7A9B6E8();
  aBlock[0] = MEMORY[0x1E4FBC860];
  sub_1D7A74D1C((unint64_t *)&qword_1EBDF9DE0, MEMORY[0x1E4FBCC10]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9DD0);
  sub_1D78650FC((unint64_t *)&qword_1EBDF9DD8, &qword_1EBDF9DD0);
  sub_1D7A9CBA8();
  (*(void (**)(char *, void, uint64_t))(v21 + 104))(v30, *MEMORY[0x1E4FBCC58], v63);
  int64_t v49 = (void *)sub_1D7A9C808();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF8A40);
  uint64_t v50 = swift_allocObject();
  *(_DWORD *)(v50 + 24) = 0;
  uint64_t v52 = v67;
  uint64_t v51 = v68;
  *(void *)(v50 + 16) = v67;
  uint64_t v53 = v64;
  uint64_t v54 = v66;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v64, v51, v66);
  unint64_t v55 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v56 = swift_allocObject();
  *(void *)(v56 + 16) = v50;
  *(void *)(v56 + 24) = v49;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v56 + v55, v53, v54);
  aBlock[4] = sub_1D7A75710;
  aBlock[5] = v56;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1D79899E4;
  aBlock[3] = &block_descriptor_14;
  uint64_t v57 = _Block_copy(aBlock);
  id v58 = v52;
  swift_retain();
  id v59 = v49;
  sub_1D7A9B6E8();
  uint64_t v74 = MEMORY[0x1E4FBC860];
  sub_1D7A74D1C((unint64_t *)&qword_1EBDF9D90, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9D98);
  sub_1D78650FC((unint64_t *)&qword_1EBDF9DA0, &qword_1EBDF9D98);
  size_t v60 = v71;
  uint64_t v61 = v72;
  sub_1D7A9CBA8();
  MEMORY[0x1D947B570](0, v48, v60, v57);
  _Block_release(v57);
  swift_release();

  (*(void (**)(char *, uint64_t))(v73 + 8))(v60, v61);
  (*(void (**)(char *, uint64_t))(v69 + 8))(v48, v70);
  return swift_release();
}

void sub_1D7A6F340(uint64_t a1, NSObject *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF8A30);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](v6, v9, v10, v11, v12, v13, v14, v15);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 24));
  sub_1D79B3188((void **)(a1 + 16), (void **)&aBlock);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 24));
  uint64_t v16 = (__SecTrust *)aBlock;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v6);
  unint64_t v17 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v18 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v18 + v17, (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  uint64_t v34 = sub_1D7A75824;
  uint64_t v35 = v18;
  unint64_t aBlock = MEMORY[0x1E4F143A8];
  *(void *)&long long v32 = 1107296256;
  *((void *)&v32 + 1) = sub_1D7A6F758;
  uint64_t v33 = &block_descriptor_22;
  uint64_t v19 = _Block_copy(&aBlock);
  swift_release();
  OSStatus v20 = SecTrustEvaluateAsyncWithError(v16, a2, v19);
  _Block_release(v19);

  if (v20)
  {
    unint64_t aBlock = 0;
    *(void *)&long long v32 = 0xE000000000000000;
    sub_1D7A9CC48();
    swift_bridgeObjectRelease();
    unint64_t aBlock = 0xD000000000000027;
    *(void *)&long long v32 = 0x80000001D7ACCC50;
    OSStatus v30 = v20;
    uint64_t v21 = MEMORY[0x1E4FBC150];
    sub_1D7A9D258();
    sub_1D7A9C128();
    swift_bridgeObjectRelease();
    int64_t v22 = aBlock;
    uint64_t v23 = v32;
    LOWORD(v30) = 152;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF8678);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1D7AA08E0;
    *(unsigned char *)(inited + 32) = 20;
    *(void *)(inited + 64) = v21;
    *(_DWORD *)(inited + 40) = v20;
    unint64_t v25 = sub_1D785EC20(inited);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, v22, v23, (__int16 *)&v30, 0, v25, 0xD000000000000056, 0x80000001D7AC8F80, (uint64_t)&aBlock, 0xD000000000000017, 0x80000001D7AC9280, 258);
    LOWORD(v22) = aBlock;
    uint64_t v26 = v33;
    sub_1D7860544();
    long long v29 = v32;
    unint64_t v27 = swift_allocError();
    *(_WORD *)uint64_t v28 = v22;
    *(_OWORD *)(v28 + 8) = v29;
    *(void *)(v28 + 24) = v26;
    unint64_t aBlock = v27;
    sub_1D7A9C448();
  }
}

uint64_t sub_1D7A6F684(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3)
  {
    type metadata accessor for CFError(0);
    sub_1D7A74D1C((unint64_t *)&qword_1EBDF9578, type metadata accessor for CFError);
    swift_allocError();
    *uint64_t v4 = a3;
    id v5 = a3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF8A30);
    return sub_1D7A9C448();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF8A30);
    return sub_1D7A9C458();
  }
}

void sub_1D7A6F758(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v7 = *(void (**)(id, uint64_t, void *))(a1 + 32);
  swift_retain();
  id v9 = a2;
  id v8 = a4;
  v7(v9, a3, a4);
  swift_release();
}

uint64_t PublicKeyAlgorithm.description.getter()
{
  uint64_t result = 0x363532505F4345;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x343833505F4345;
      break;
    case 2:
      uint64_t result = 0x313235505F4345;
      break;
    case 3:
      uint64_t result = 0x39313535325F4445;
      break;
    case 4:
      uint64_t result = 0x3834345F4445;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t PublicKeyAlgorithm.rawValue.getter()
{
  uint64_t result = 0x363532505F4345;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x343833505F4345;
      break;
    case 2:
      uint64_t result = 0x313235505F4345;
      break;
    case 3:
      uint64_t result = 0x39313535325F4445;
      break;
    case 4:
      uint64_t result = 0x3834345F4445;
      break;
    default:
      return result;
  }
  return result;
}

CoreIDVShared::PublicKeyAlgorithm_optional __swiftcall PublicKeyAlgorithm.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v2 = v1;
  unint64_t v3 = sub_1D7A9D058();
  result.SecCertificateRef value = swift_bridgeObjectRelease();
  char v5 = 5;
  if (v3 < 5) {
    char v5 = v3;
  }
  *uint64_t v2 = v5;
  return result;
}

uint64_t sub_1D7A6F988(unsigned __int8 *a1, char *a2)
{
  return sub_1D7996AF0(*a1, *a2);
}

uint64_t sub_1D7A6F994()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D7A6FA80()
{
  sub_1D7A9C0B8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D7A6FB54()
{
  return sub_1D7A9D628();
}

CoreIDVShared::PublicKeyAlgorithm_optional sub_1D7A6FC3C(Swift::String *a1)
{
  return PublicKeyAlgorithm.init(rawValue:)(*a1);
}

void sub_1D7A6FC48(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x363532505F4345;
  switch(*v1)
  {
    case 1:
      uint64_t v2 = 0x343833505F4345;
      goto LABEL_3;
    case 2:
      *a1 = 0x313235505F4345;
      a1[1] = 0xE700000000000000;
      break;
    case 3:
      *a1 = 0x39313535325F4445;
      a1[1] = 0xE800000000000000;
      break;
    case 4:
      *a1 = 0x3834345F4445;
      a1[1] = 0xE600000000000000;
      break;
    default:
LABEL_3:
      *a1 = v2;
      a1[1] = 0xE700000000000000;
      break;
  }
}

uint64_t sub_1D7A6FCF8()
{
  uint64_t result = 0x363532505F4345;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x343833505F4345;
      break;
    case 2:
      uint64_t result = 0x313235505F4345;
      break;
    case 3:
      uint64_t result = 0x39313535325F4445;
      break;
    case 4:
      uint64_t result = 0x3834345F4445;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1D7A6FD98()
{
  uint64_t result = sub_1D7A6FDB8();
  qword_1EA847830 = result;
  return result;
}

uint64_t sub_1D7A6FDB8()
{
  uint64_t v0 = sub_1D7A9B5F8();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v0, v2, v3, v4, v5, v6, v7, v8);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9, v12, v13, v14, v15, v16, v17, v18);
  OSStatus v20 = (char *)&v32 - v19;
  uint64_t v21 = SecCertificateCopyAppleExternalRoots();
  if (v21)
  {
    int64_t v22 = (void *)v21;
    uint64_t v33 = 0;
    type metadata accessor for SecCertificate(0);
    sub_1D7A9C308();

    uint64_t result = v33;
    if (v33) {
      return result;
    }
    if (qword_1EBDF9DC8 != -1) {
      swift_once();
    }
    uint64_t v24 = __swift_project_value_buffer(v0, (uint64_t)qword_1EBDFBE70);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v11, v24, v0);
    unint64_t v25 = sub_1D7A9B5D8();
    os_log_type_t v26 = sub_1D7A9C758();
    if (os_log_type_enabled(v25, v26))
    {
      unint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v27 = 0;
      _os_log_impl(&dword_1D7853000, v25, v26, "SecCertificate error casting hardcoded external roots from Security framework", v27, 2u);
      MEMORY[0x1D947D740](v27, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v1 + 8))(v11, v0);
  }
  else
  {
    if (qword_1EBDF9DC8 != -1) {
      swift_once();
    }
    uint64_t v28 = __swift_project_value_buffer(v0, (uint64_t)qword_1EBDFBE70);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v20, v28, v0);
    long long v29 = sub_1D7A9B5D8();
    os_log_type_t v30 = sub_1D7A9C758();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl(&dword_1D7853000, v29, v30, "SecCertificate could not get hardcoded external roots from Security framework", v31, 2u);
      MEMORY[0x1D947D740](v31, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v1 + 8))(v20, v0);
  }
  return MEMORY[0x1E4FBC860];
}

uint64_t static SecCertificateRef.appleExternalRoots.getter()
{
  if (qword_1EA841670 != -1) {
    swift_once();
  }
  return swift_bridgeObjectRetain();
}

void static SecCertificateRef.make(with:in:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8477F0);
  MEMORY[0x1F4188790](v7 - 8, v8, v9, v10, v11, v12, v13, v14);
  uint64_t v16 = (char *)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_1D7A9AF68();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v26 = MEMORY[0x1F4188790](v17, v19, v20, v21, v22, v23, v24, v25);
  uint64_t v28 = (char *)&v62 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26, v29, v30, v31, v32, v33, v34, v35);
  uint64_t v37 = (char *)&v62 - v36;
  uint64_t v63 = v3;
  if (a3)
  {
    id v38 = a3;
  }
  else
  {
    if (qword_1EA841638 != -1) {
      swift_once();
    }
    id v38 = (id)qword_1EA86F340;
  }
  id v39 = a3;
  uint64_t v64 = a2;
  uint64_t v65 = a1;
  uint64_t v40 = (void *)sub_1D7A9BF98();
  uint64_t v41 = (void *)sub_1D7A9BF98();
  id v68 = v38;
  id v42 = objc_msgSend(v38, sel_URLForResource_withExtension_, v40, v41);

  if (!v42)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v16, 1, 1, v17);
    goto LABEL_11;
  }
  sub_1D7A9AF38();

  uint64_t v43 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
  v43(v16, v28, v17);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v16, 0, 1, v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
LABEL_11:
    sub_1D7871C4C((uint64_t)v16, &qword_1EA8477F0);
    unint64_t v66 = 0;
    unint64_t v67 = 0xE000000000000000;
    sub_1D7A9CC48();
    swift_bridgeObjectRelease();
    unint64_t v66 = 0xD00000000000001BLL;
    unint64_t v67 = 0x80000001D7ACCA60;
    sub_1D7A9C128();
    sub_1D7A9C128();
    uint64_t v48 = v66;
    uint64_t v49 = v67;
    LOWORD(v66) = 265;
    unint64_t v50 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    uint64_t v47 = (void *)swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, v48, v49, (__int16 *)&v66, 0, v50, 0xD000000000000056, 0x80000001D7AC8F80, v51, 0x74697728656B616DLL, 0xEE00293A6E693A68, 307);
    swift_willThrow();
    goto LABEL_12;
  }
  v43(v37, v16, v17);
  uint64_t v44 = v63;
  uint64_t v45 = sub_1D7A9AF88();
  if (v44)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v37, v17);
    uint64_t v47 = v44;
LABEL_12:

    unint64_t v66 = 0;
    unint64_t v67 = 0xE000000000000000;
    sub_1D7A9CC48();
    swift_bridgeObjectRelease();
    unint64_t v66 = 0xD00000000000002BLL;
    unint64_t v67 = 0x80000001D7ACCA80;
    sub_1D7A9C128();
    sub_1D7A9C128();
    uint64_t v52 = v66;
    uint64_t v53 = v67;
    LOWORD(v66) = 265;
    id v54 = v47;
    unint64_t v55 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v47, v52, v53, (__int16 *)&v66, 0, v55, 0xD000000000000056, 0x80000001D7AC8F80, v56, 0x74697728656B616DLL, 0xEE00293A6E693A68, 313);
    swift_willThrow();

    return;
  }
  uint64_t v57 = v45;
  unint64_t v58 = v46;
  id v59 = (void *)sub_1D7A9AFF8();
  size_t v60 = (void *)SecCertificateCreateWithPEM();

  if (v60)
  {
    id v61 = v60;
    sub_1D78607E8(v57, v58);

    (*(void (**)(char *, uint64_t))(v18 + 8))(v37, v17);
  }
  else
  {
    __break(1u);
  }
}

uint64_t SecCertificateRef.rawECPublicKeyData()()
{
  SecKeyRef v1 = SecCertificateCopyKey(v0);
  if (v1)
  {
    SecKeyRef v2 = v1;
    uint64_t v3 = SecKeyRef.publicKeyData.getter();
    uint64_t v5 = v3;
    unint64_t v6 = v4;
    if (v4 >> 60 == 15)
    {
LABEL_21:

      return v5;
    }
    unint64_t v7 = v4 >> 62;
    uint64_t v8 = 0;
    switch(v4 >> 62)
    {
      case 1uLL:
        if ((int)v3 != v3 >> 32) {
          goto LABEL_10;
        }
        goto LABEL_15;
      case 2uLL:
        if (*(void *)(v3 + 16) != *(void *)(v3 + 24)) {
          goto LABEL_10;
        }
        goto LABEL_15;
      case 3uLL:
        goto LABEL_20;
      default:
        if ((v4 & 0xFF000000000000) == 0) {
          goto LABEL_15;
        }
LABEL_10:
        if (sub_1D7A9B078() != 4)
        {
LABEL_15:
          uint64_t v8 = 0;
LABEL_20:
          sub_1D7871BDC(v5, v6);
          uint64_t v5 = v8;
          goto LABEL_21;
        }
        if (v7)
        {
          if (v7 == 1)
          {
            if (!__OFSUB__(HIDWORD(v5), v5))
            {
              uint64_t v9 = HIDWORD(v5) - (int)v5;
              goto LABEL_18;
            }
            __break(1u);
LABEL_24:
            __break(1u);
            goto LABEL_25;
          }
          uint64_t v11 = *(void *)(v5 + 16);
          uint64_t v10 = *(void *)(v5 + 24);
          uint64_t v9 = v10 - v11;
          if (__OFSUB__(v10, v11)) {
            goto LABEL_24;
          }
        }
        else
        {
          uint64_t v9 = BYTE6(v6);
        }
LABEL_18:
        if (v9 >= 1)
        {
          uint64_t v8 = sub_1D7A9B058();
          goto LABEL_20;
        }
LABEL_25:
        __break(1u);
        JUMPOUT(0x1D7A707FCLL);
    }
  }
  return 0;
}

Swift::String_optional __swiftcall SecCertificateRef.base64EncodedString()()
{
  CFDataRef v1 = SecCertificateCopyData(v0);
  uint64_t v2 = sub_1D7A9B028();
  unint64_t v4 = v3;

  uint64_t v5 = sub_1D7A9B008();
  unint64_t v7 = v6;
  sub_1D78607E8(v2, v4);
  uint64_t v8 = v5;
  uint64_t v9 = v7;
  result.value._object = v9;
  result.value._countAndFlagsBits = v8;
  return result;
}

Swift::String_optional __swiftcall SecCertificateRef.organization()()
{
  uint64_t v0 = sub_1D7A708A8(MEMORY[0x1E4F3B480]);
  result.value._object = v1;
  result.value._countAndFlagsBits = (uint64_t)v0;
  return result;
}

Swift::String_optional __swiftcall SecCertificateRef.organizationalUnit()()
{
  uint64_t v0 = sub_1D7A708A8(MEMORY[0x1E4F3B488]);
  result.value._object = v1;
  result.value._countAndFlagsBits = (uint64_t)v0;
  return result;
}

void *sub_1D7A708A8(uint64_t (*a1)(uint64_t))
{
  uint64_t v2 = (void *)a1(v1);
  if (v2)
  {
    sub_1D7A9C308();

    return 0;
  }
  return v2;
}

Swift::String_optional __swiftcall SecCertificateRef.uid()()
{
  uint64_t v0 = SecCertificateCopySubjectAttributeValue();
  if (v0)
  {
    uint64_t v1 = (void *)v0;
    uint64_t v2 = sub_1D7A9BFC8();
    unint64_t v4 = v3;
  }
  else
  {
    uint64_t v2 = 0;
    unint64_t v4 = 0;
  }
  uint64_t v5 = v2;
  unint64_t v6 = v4;
  result.value._object = v6;
  result.value._countAndFlagsBits = v5;
  return result;
}

uint64_t SecCertificateRef.stateOrProvinceName.getter()
{
  return sub_1D7A70AA8();
}

uint64_t SecCertificateRef.countryName.getter()
{
  return sub_1D7A70AA8();
}

uint64_t sub_1D7A70AA8()
{
  uint64_t v0 = SecCertificateCopySubjectAttributeValue();
  if (!v0) {
    return 0;
  }
  uint64_t v1 = (void *)v0;
  uint64_t v2 = sub_1D7A9BFC8();

  return v2;
}

uint64_t SecCertificateRef.sha1()()
{
  SHA1Digest = (void *)SecCertificateGetSHA1Digest();
  uint64_t v1 = (uint64_t)SHA1Digest;
  if (SHA1Digest)
  {
    id v2 = SHA1Digest;
    uint64_t v1 = sub_1D7A9B028();
  }
  return v1;
}

uint64_t SecCertificateRef.issuerSHA1()()
{
  uint64_t v0 = SecCertificateCopyIssuerSHA1Digest();
  if (!v0) {
    return 0;
  }
  uint64_t v1 = (void *)v0;
  uint64_t v2 = sub_1D7A9B028();

  return v2;
}

uint64_t SecCertificateRef.publicKeySHA256()()
{
  v38[3] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = sub_1D7A9BD88();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1, v3, v4, v5, v6, v7, v8, v9);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1D7A9B838();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12, v14, v15, v16, v17, v18, v19, v20);
  uint64_t v22 = (char *)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  SecKeyRef v23 = SecCertificateCopyKey(v0);
  if (!v23) {
    return 0;
  }
  SecKeyRef v24 = v23;
  uint64_t v25 = SecKeyRef.publicKeyData.getter();
  unint64_t v27 = v26;
  if (v26 >> 60 == 15)
  {
  }
  else
  {
    uint64_t v36 = sub_1D7A74D1C(&qword_1EA8424A0, MEMORY[0x1E4F25170]);
    sub_1D7A9B828();
    uint64_t v37 = v13;
    switch(v27 >> 62)
    {
      case 1uLL:
        if (v25 >> 32 < (int)v25) {
          __break(1u);
        }
        unint64_t v35 = v27 & 0x3FFFFFFFFFFFFFFFLL;
        sub_1D7860790(v25, v27);
        sub_1D78D117C((int)v25, v25 >> 32, v35, (uint64_t)v11);
        goto LABEL_10;
      case 2uLL:
        uint64_t v28 = *(void *)(v25 + 16);
        unint64_t v35 = *(void *)(v25 + 24);
        sub_1D786E9D8(v25, v27);
        swift_retain();
        swift_retain();
        sub_1D78D117C(v28, v35, v27 & 0x3FFFFFFFFFFFFFFFLL, (uint64_t)v11);
        swift_release();
        swift_release();
LABEL_10:
        sub_1D7871BDC(v25, v27);
        goto LABEL_13;
      case 3uLL:
        memset(v38, 0, 14);
        goto LABEL_12;
      default:
        v38[0] = v25;
        LOWORD(v38[1]) = v27;
        BYTE2(v38[1]) = BYTE2(v27);
        BYTE3(v38[1]) = BYTE3(v27);
        BYTE4(v38[1]) = BYTE4(v27);
        BYTE5(v38[1]) = BYTE5(v27);
LABEL_12:
        sub_1D7A9B808();
        sub_1D7871BDC(v25, v27);
LABEL_13:
        sub_1D7A9B818();
        (*(void (**)(char *, uint64_t))(v2 + 8))(v11, v1);
        sub_1D7A74D1C(&qword_1EA8424A8, MEMORY[0x1E4F24F80]);
        uint64_t v29 = sub_1D7A9BD78();
        uint64_t v31 = sub_1D78D1370(v29, v30);
        swift_bridgeObjectRelease();
        uint64_t v32 = sub_1D78D1EB0(v31);
        swift_release();
        sub_1D7871BDC(v25, v27);

        (*(void (**)(char *, uint64_t))(v37 + 8))(v22, v12);
        uint64_t v25 = v32;
        break;
    }
  }
  return v25;
}

CoreIDVShared::PublicKeyAlgorithm_optional __swiftcall SecCertificateRef.publicKeyAlgorithm()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = sub_1D7A9B5F8();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v4, v6, v7, v8, v9, v10, v11, v12);
  uint64_t v15 = (char *)v98 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x1F4188790](v13, v16, v17, v18, v19, v20, v21, v22);
  uint64_t v25 = (char *)v98 - v24;
  uint64_t v33 = MEMORY[0x1F4188790](v23, v26, v27, v28, v29, v30, v31, v32);
  unint64_t v35 = (char *)v98 - v34;
  uint64_t v43 = MEMORY[0x1F4188790](v33, v36, v37, v38, v39, v40, v41, v42);
  uint64_t v45 = (char *)v98 - v44;
  MEMORY[0x1F4188790](v43, v46, v47, v48, v49, v50, v51, v52);
  id v54 = (char *)v98 - v53;
  unint64_t v55 = SecCertificateCopyKey(v2);
  if (!v55) {
    goto LABEL_23;
  }
  uint64_t v56 = v55;
  uint64_t v101 = v3;
  CFDictionaryRef v57 = SecKeyCopyAttributes(v55);
  if (!v57 || (CFDictionaryRef v58 = v57, *(void *)&v104 = 0, sub_1D7A9BEA8(), v58, (v59 = v104) == 0))
  {
    if (qword_1EBDF9DC8 != -1) {
      swift_once();
    }
    uint64_t v69 = __swift_project_value_buffer(v4, (uint64_t)qword_1EBDFBE70);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v15, v69, v4);
    uint64_t v70 = sub_1D7A9B5D8();
    os_log_type_t v71 = sub_1D7A9C758();
    BOOL v72 = os_log_type_enabled(v70, v71);
    uint64_t v3 = v101;
    if (v72)
    {
      uint64_t v73 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v73 = 0;
      _os_log_impl(&dword_1D7853000, v70, v71, "key attributes are unavailable", v73, 2u);
      MEMORY[0x1D947D740](v73, -1, -1);
    }

    LOBYTE(v55) = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v15, v4);
    goto LABEL_23;
  }
  uint64_t v60 = sub_1D7A9BFC8();
  if (!*(void *)(v59 + 16) || (uint64_t v62 = sub_1D7A18684(v60, v61), (v63 & 1) == 0))
  {
    long long v104 = 0u;
    long long v105 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  sub_1D78907D8(*(void *)(v59 + 56) + 32 * v62, (uint64_t)&v104);
  swift_bridgeObjectRelease();
  if (!*((void *)&v105 + 1))
  {
LABEL_17:
    swift_bridgeObjectRelease();
    sub_1D7871C4C((uint64_t)&v104, (uint64_t *)&unk_1EBDF9680);
LABEL_18:
    uint64_t v3 = v101;
    if (qword_1EBDF9DC8 != -1) {
      swift_once();
    }
    uint64_t v74 = __swift_project_value_buffer(v4, (uint64_t)qword_1EBDFBE70);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v25, v74, v4);
    unint64_t v75 = sub_1D7A9B5D8();
    os_log_type_t v76 = sub_1D7A9C758();
    if (os_log_type_enabled(v75, v76))
    {
      size_t v77 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)size_t v77 = 0;
      _os_log_impl(&dword_1D7853000, v75, v76, "key type is not available", v77, 2u);
      MEMORY[0x1D947D740](v77, -1, -1);
    }

    LOBYTE(v55) = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v25, v4);
    goto LABEL_23;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  unint64_t v64 = v103[1];
  uint64_t v100 = v103[0];
  uint64_t v65 = sub_1D7A9BFC8();
  if (*(void *)(v59 + 16) && (uint64_t v67 = sub_1D7A18684(v65, v66), (v68 & 1) != 0))
  {
    sub_1D78907D8(*(void *)(v59 + 56) + 32 * v67, (uint64_t)&v104);
  }
  else
  {
    long long v104 = 0u;
    long long v105 = 0u;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*((void *)&v105 + 1))
  {
    if (swift_dynamicCast())
    {
      uint64_t v79 = v103[0];
      uint64_t v80 = sub_1D7A9BFC8();
      uint64_t v82 = v100;
      if (v100 == v80 && v64 == v81)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v87 = sub_1D7A9D358();
        swift_bridgeObjectRelease();
        if ((v87 & 1) == 0)
        {
          if (qword_1EBDF9DC8 != -1) {
            swift_once();
          }
          uint64_t v88 = __swift_project_value_buffer(v4, (uint64_t)qword_1EBDFBE70);
          swift_beginAccess();
          (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v45, v88, v4);
          swift_bridgeObjectRetain();
          __int16 v89 = sub_1D7A9B5D8();
          os_log_type_t v90 = sub_1D7A9C758();
          if (os_log_type_enabled(v89, v90))
          {
            char v91 = (uint8_t *)swift_slowAlloc();
            uint64_t v99 = swift_slowAlloc();
            v103[0] = v99;
            *(_DWORD *)char v91 = 136315138;
            v98[1] = v91 + 4;
            swift_bridgeObjectRetain();
            uint64_t v102 = sub_1D7923300(v82, v64, v103);
            sub_1D7A9C9E8();
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_1D7853000, v89, v90, "unknown public key type: %s", v91, 0xCu);
            uint64_t v92 = v99;
            swift_arrayDestroy();
            MEMORY[0x1D947D740](v92, -1, -1);
            MEMORY[0x1D947D740](v91, -1, -1);
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }

          LOBYTE(v55) = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v45, v4);
          goto LABEL_57;
        }
      }
      swift_bridgeObjectRelease();
      switch(v79)
      {
        case 521:

          char v78 = 2;
          uint64_t v3 = v101;
          goto LABEL_24;
        case 384:

          char v78 = 1;
          uint64_t v3 = v101;
          goto LABEL_24;
        case 256:

          char v78 = 0;
          uint64_t v3 = v101;
          goto LABEL_24;
      }
      if (qword_1EBDF9DC8 != -1) {
        swift_once();
      }
      uint64_t v93 = __swift_project_value_buffer(v4, (uint64_t)qword_1EBDFBE70);
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v54, v93, v4);
      uint64_t v94 = sub_1D7A9B5D8();
      os_log_type_t v95 = sub_1D7A9C758();
      if (os_log_type_enabled(v94, v95))
      {
        uint64_t v96 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v96 = 134217984;
        v103[0] = v79;
        sub_1D7A9C9E8();
        _os_log_impl(&dword_1D7853000, v94, v95, "Unknown Ec key size %ld", v96, 0xCu);
        MEMORY[0x1D947D740](v96, -1, -1);
      }

      LOBYTE(v55) = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v54, v4);
LABEL_57:
      char v78 = 5;
      uint64_t v3 = v101;
      goto LABEL_24;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_1D7871C4C((uint64_t)&v104, (uint64_t *)&unk_1EBDF9680);
  }
  uint64_t v3 = v101;
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v83 = __swift_project_value_buffer(v4, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v35, v83, v4);
  char v84 = sub_1D7A9B5D8();
  os_log_type_t v85 = sub_1D7A9C758();
  if (os_log_type_enabled(v84, v85))
  {
    char v86 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v86 = 0;
    _os_log_impl(&dword_1D7853000, v84, v85, "key size in bits is unavailable", v86, 2u);
    MEMORY[0x1D947D740](v86, -1, -1);
  }

  LOBYTE(v55) = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v35, v4);
LABEL_23:
  char v78 = 5;
LABEL_24:
  *uint64_t v3 = v78;
  return (CoreIDVShared::PublicKeyAlgorithm_optional)v55;
}

uint64_t SecCertificateRef.hasOID(oid:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_1D7A9B5F8();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6, v7, v8, v9, v10, v11, v12);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = SecCertificateCopyExtendedKeyUsage();
  if (v15)
  {
    uint64_t v16 = (void *)v15;
    uint64_t v24 = 0;
    sub_1D7A9C308();

    if (v24)
    {
      char v17 = sub_1D7A6BE30(a1, a2, v24);
      swift_bridgeObjectRelease();
      return v17 & 1;
    }
  }
  else
  {
    if (qword_1EBDF9DC8 != -1) {
      swift_once();
    }
    uint64_t v19 = __swift_project_value_buffer(v4, (uint64_t)qword_1EBDFBE70);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v14, v19, v4);
    uint64_t v20 = sub_1D7A9B5D8();
    os_log_type_t v21 = sub_1D7A9C748();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl(&dword_1D7853000, v20, v21, "Could not obtain extended key usage from certificate", v22, 2u);
      MEMORY[0x1D947D740](v22, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
  }
  return 0;
}

void SecCertificateRef.logotype.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_1D7A9B5F8();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v5, v6, v7, v8, v9, v10, v11);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (void *)sub_1D7A9BF98();
  uint64_t v15 = (void *)SecCertificateCopyExtensionValue();

  long long v16 = xmmword_1D7AAC090;
  if (v15)
  {
    long long v29 = xmmword_1D7AAC090;
    uint64_t v17 = sub_1D7A9B028();
    unint64_t v19 = v18;

    sub_1D7860790(v17, v19);
    uint64_t v20 = sub_1D7A74510(v17, v19);
    sub_1D78607E8(v17, v19);
    sub_1D7A2FDA8((uint64_t)v20, (uint64_t)(v20 + 4), 0, (2 * v20[2]) | 1, (uint64_t)v32);
    if (v1)
    {
      swift_release();

      sub_1D7860790(v17, v19);
      os_log_type_t v21 = sub_1D7A74510(v17, v19);
      sub_1D78607E8(v17, v19);
      sub_1D7A2FDA8((uint64_t)v21, (uint64_t)(v21 + 4), 0, (2 * v21[2]) | 1, (uint64_t)v33);
      sub_1D7933FD4((uint64_t)v33, (uint64_t *)&v30);
      swift_release();
      sub_1D78607E8(v17, v19);
      long long v16 = v30;
      uint64_t v22 = v31;
    }
    else
    {
      sub_1D7A68AD8((uint64_t)v32, 5, 0);
      swift_release();
      if (qword_1EBDF9DC8 != -1) {
        swift_once();
      }
      uint64_t v23 = __swift_project_value_buffer(v3, (uint64_t)qword_1EBDFBE70);
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v13, v23, v3);
      uint64_t v24 = sub_1D7A9B5D8();
      os_log_type_t v25 = sub_1D7A9C748();
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v26 = (uint8_t *)swift_slowAlloc();
        uint64_t v27 = v24;
        uint64_t v34 = v24;
        uint64_t v28 = v26;
        *(_WORD *)uint64_t v26 = 0;
        _os_log_impl(&dword_1D7853000, v27, v25, "Received ASN1Null for Logotype OID, returning nil", v26, 2u);
        MEMORY[0x1D947D740](v28, -1, -1);

        sub_1D78607E8(v17, v19);
      }
      else
      {
        sub_1D78607E8(v17, v19);
      }
      (*(void (**)(char *, uint64_t))(v4 + 8))(v13, v3);
      uint64_t v22 = 0;
      long long v16 = v29;
    }
  }
  else
  {
    uint64_t v22 = 0;
  }
  *(_OWORD *)a1 = v16;
  *(void *)(a1 + 16) = v22;
}

uint64_t SecCertificateRef.privacyPolicyURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_1D7A9B5F8();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v5, v6, v7, v8, v9, v10, v11);
  uint64_t v13 = v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0) + 22;
  uint64_t v14 = (void *)sub_1D7A9BF98();
  uint64_t v15 = (void *)SecCertificateCopyExtensionValue();

  if (!v15)
  {
LABEL_12:
    uint64_t v32 = sub_1D7A9AF68();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(a1, 1, 1, v32);
  }
  uint64_t v16 = sub_1D7A9B028();
  unint64_t v18 = v17;

  sub_1D7860790(v16, v18);
  unint64_t v19 = sub_1D7A74510(v16, v18);
  sub_1D78607E8(v16, v18);
  sub_1D7A2FDA8((uint64_t)v19, (uint64_t)(v19 + 4), 0, (2 * v19[2]) | 1, (uint64_t)v34);
  if (!v1)
  {
    sub_1D7A68AD8((uint64_t)v34, 5, 0);
    swift_release();
    if (qword_1EBDF9DC8 != -1) {
      swift_once();
    }
    uint64_t v26 = __swift_project_value_buffer(v3, (uint64_t)qword_1EBDFBE70);
    swift_beginAccess();
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v4 + 16))(v13, v26, v3);
    uint64_t v27 = sub_1D7A9B5D8();
    os_log_type_t v28 = sub_1D7A9C748();
    if (os_log_type_enabled(v27, v28))
    {
      long long v29 = (uint8_t *)swift_slowAlloc();
      uint64_t v36 = a1;
      long long v30 = v29;
      *(_WORD *)long long v29 = 0;
      _os_log_impl(&dword_1D7853000, v27, v28, "Received ASN1Null for privacy policy URL, returning nil", v29, 2u);
      uint64_t v31 = v30;
      a1 = v36;
      MEMORY[0x1D947D740](v31, -1, -1);

      sub_1D78607E8(v16, v18);
    }
    else
    {
      sub_1D78607E8(v16, v18);
    }
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v13, v3);
    goto LABEL_12;
  }
  swift_release();

  sub_1D7860790(v16, v18);
  uint64_t v20 = sub_1D7A74510(v16, v18);
  sub_1D78607E8(v16, v18);
  sub_1D7A2FDA8((uint64_t)v20, (uint64_t)(v20 + 4), 0, (2 * v20[2]) | 1, (uint64_t)v35);
  sub_1D7A890BC((uint64_t)v35, 22, 0);
  uint64_t v22 = v21;
  unint64_t v24 = v23;
  uint64_t result = swift_release();
  if (__OFSUB__(v24 >> 1, v22))
  {
    __break(1u);
  }
  else
  {
    swift_unknownObjectRetain();
    sub_1D7A9C098();
    swift_unknownObjectRelease();
    sub_1D7A9AF58();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    return sub_1D78607E8(v16, v18);
  }
  return result;
}

void SecCertificateRef.merchantCategoryCode.getter()
{
  uint64_t v26 = sub_1D78D1EB0((uint64_t)&unk_1F2F199F8);
  unint64_t v27 = v1;
  id v2 = v0;
  uint64_t v3 = sub_1D7A74E68(&v26, v2);
  unint64_t v5 = v4;

  if (!v5) {
    goto LABEL_45;
  }
  uint64_t v6 = HIBYTE(v5) & 0xF;
  uint64_t v7 = v3 & 0xFFFFFFFFFFFFLL;
  if (!((v5 & 0x2000000000000000) != 0 ? HIBYTE(v5) & 0xF : v3 & 0xFFFFFFFFFFFFLL)) {
    goto LABEL_45;
  }
  if ((v5 & 0x1000000000000000) != 0)
  {
    sub_1D7A45460(v3, v5, 10);
LABEL_45:
    sub_1D78607E8(v26, v27);
    swift_bridgeObjectRelease();
    return;
  }
  if ((v5 & 0x2000000000000000) == 0)
  {
    if ((v3 & 0x1000000000000000) != 0) {
      uint64_t v9 = (unsigned __int8 *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      uint64_t v9 = (unsigned __int8 *)sub_1D7A9CD78();
    }
    sub_1D7A45448(v9, v7, 10);
    goto LABEL_45;
  }
  v25[0] = v3;
  v25[1] = v5 & 0xFFFFFFFFFFFFFFLL;
  if (v3 == 43)
  {
    if (v6)
    {
      if (v6 != 1 && (BYTE1(v3) - 48) <= 9u && v6 != 2 && (BYTE2(v3) - 48) <= 9u)
      {
        uint64_t v10 = 10 * (BYTE1(v3) - 48) + (BYTE2(v3) - 48);
        uint64_t v11 = v6 - 3;
        if (v11)
        {
          uint64_t v12 = (unsigned __int8 *)v25 + 3;
          do
          {
            unsigned int v13 = *v12 - 48;
            if (v13 > 9) {
              break;
            }
            uint64_t v14 = 10 * v10;
            if ((unsigned __int128)(v10 * (__int128)10) >> 64 != (10 * v10) >> 63) {
              break;
            }
            uint64_t v10 = v14 + v13;
            if (__OFADD__(v14, v13)) {
              break;
            }
            ++v12;
            --v11;
          }
          while (v11);
        }
      }
      goto LABEL_45;
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (v6)
      {
        if ((v3 - 48) <= 9u && v6 != 1 && (BYTE1(v3) - 48) <= 9u)
        {
          uint64_t v15 = 10 * (v3 - 48) + (BYTE1(v3) - 48);
          uint64_t v16 = v6 - 2;
          if (v16)
          {
            unint64_t v17 = (unsigned __int8 *)v25 + 2;
            do
            {
              unsigned int v18 = *v17 - 48;
              if (v18 > 9) {
                break;
              }
              uint64_t v19 = 10 * v15;
              if ((unsigned __int128)(v15 * (__int128)10) >> 64 != (10 * v15) >> 63) {
                break;
              }
              uint64_t v15 = v19 + v18;
              if (__OFADD__(v19, v18)) {
                break;
              }
              ++v17;
              --v16;
            }
            while (v16);
          }
        }
      }
      goto LABEL_45;
    }
    if (v6)
    {
      if (v6 != 1 && (BYTE1(v3) - 48) <= 9u && v6 != 2 && (BYTE2(v3) - 48) <= 9u)
      {
        uint64_t v20 = -10 * (BYTE1(v3) - 48) - (BYTE2(v3) - 48);
        uint64_t v21 = v6 - 3;
        if (v21)
        {
          uint64_t v22 = (unsigned __int8 *)v25 + 3;
          do
          {
            unsigned int v23 = *v22 - 48;
            if (v23 > 9) {
              break;
            }
            uint64_t v24 = 10 * v20;
            if ((unsigned __int128)(v20 * (__int128)10) >> 64 != (10 * v20) >> 63) {
              break;
            }
            uint64_t v20 = v24 - v23;
            if (__OFSUB__(v24, v23)) {
              break;
            }
            ++v22;
            --v21;
          }
          while (v21);
        }
      }
      goto LABEL_45;
    }
    __break(1u);
  }
  __break(1u);
}

uint64_t SecCertificateRef.pseudonym.getter()
{
  uint64_t v5 = sub_1D78D1EB0((uint64_t)&unk_1F2F19A20);
  unint64_t v6 = v1;
  id v2 = v0;
  uint64_t v3 = sub_1D7A74E68(&v5, v2);

  sub_1D78607E8(v5, v6);
  return v3;
}

void sub_1D7A726DC(uint64_t a1@<X8>)
{
  uint64_t v3 = (void *)sub_1D7A9BF98();
  unint64_t v4 = (void *)SecCertificateCopyExtensionValue();

  if (v4)
  {
    uint64_t v5 = sub_1D7A9B028();
    unint64_t v7 = v6;

    sub_1D7860790(v5, v7);
    uint64_t v8 = sub_1D7A74510(v5, v7);
    sub_1D78607E8(v5, v7);
    sub_1D7A2FDA8((uint64_t)v8, (uint64_t)(v8 + 4), 0, (2 * v8[2]) | 1, (uint64_t)v10);
    if (v1)
    {
      swift_release();
      sub_1D78607E8(v5, v7);
    }
    else
    {
      sub_1D798F1FC((uint64_t)v10, (uint64_t *)&v9);
      swift_release();
      sub_1D78607E8(v5, v7);
      *(_OWORD *)a1 = v9;
    }
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
  }
}

void SecCertificateRef.allowableElementsForDisplayOnly.getter(uint64_t a1@<X8>)
{
}

void SecCertificateRef.allowableElementsForDataTransfer.getter(uint64_t a1@<X8>)
{
}

uint64_t SecCertificateRef.expirationDate.getter@<X0>(uint64_t a1@<X8>)
{
  SecCertificateNotValidAfter();
  if (v2 == 0.0)
  {
    uint64_t v3 = sub_1D7A9B148();
    unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);
    uint64_t v5 = v3;
    uint64_t v6 = a1;
    uint64_t v7 = 1;
  }
  else
  {
    sub_1D7A9B088();
    uint64_t v8 = sub_1D7A9B148();
    unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);
    uint64_t v5 = v8;
    uint64_t v6 = a1;
    uint64_t v7 = 0;
  }
  return v4(v6, v7, 1, v5);
}

uint64_t SecCertificateRef.validityPeriod.getter@<X0>(uint64_t a1@<X8>)
{
  v49[1] = a1;
  uint64_t v1 = sub_1D7A9B238();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1, v3, v4, v5, v6, v7, v8, v9);
  uint64_t v11 = (char *)v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49[0] = sub_1D7A9B2B8();
  uint64_t v12 = *(void *)(v49[0] - 8);
  MEMORY[0x1F4188790](v49[0], v13, v14, v15, v16, v17, v18, v19);
  uint64_t v21 = (char *)v49 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_1D7A9B148();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v31 = MEMORY[0x1F4188790](v22, v24, v25, v26, v27, v28, v29, v30);
  uint64_t v33 = (char *)v49 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v31, v34, v35, v36, v37, v38, v39, v40);
  uint64_t v42 = (char *)v49 - v41;
  SecCertificateNotValidBefore();
  SecCertificateNotValidAfter();
  sub_1D7A9B088();
  sub_1D7A9B088();
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v11, *MEMORY[0x1E4F27B20], v1);
  sub_1D7A9B248();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v11, v1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8432B0);
  uint64_t v43 = sub_1D7A9B2A8();
  uint64_t v44 = *(void *)(v43 - 8);
  unint64_t v45 = (*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
  uint64_t v46 = swift_allocObject();
  *(_OWORD *)(v46 + 16) = xmmword_1D7AA08E0;
  (*(void (**)(unint64_t, void, uint64_t))(v44 + 104))(v46 + v45, *MEMORY[0x1E4F27BF0], v43);
  sub_1D78CD99C(v46);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_1D7A9B258();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, void))(v12 + 8))(v21, v49[0]);
  uint64_t v47 = *(void (**)(char *, uint64_t))(v23 + 8);
  v47(v33, v22);
  return ((uint64_t (*)(char *, uint64_t))v47)(v42, v22);
}

uint64_t SecCertificateRef.keyUsage.getter()
{
  return MEMORY[0x1F40F6B98](v0);
}

void *static SecAccessControlRef.fromConstraintsData(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = sub_1D7A9B5F8();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v4, v6, v7, v8, v9, v10, v11, v12);
  uint64_t v15 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13, v16, v17, v18, v19, v20, v21, v22);
  uint64_t v24 = (char *)&v60 - v23;
  uint64_t v66 = 0;
  uint64_t v25 = (void *)SecAccessControlCreate();
  uint64_t v26 = v25;
  uint64_t v27 = v66;
  if (v25)
  {
    if (!v66)
    {
      id v28 = v25;
      sub_1D7860790(a1, a2);
      uint64_t v29 = (void *)sub_1D7A9AFF8();
      id v30 = objc_msgSend(self, sel_recordFromData_, v29);
      sub_1D78607E8(a1, a2);

      if (v30)
      {
        id v31 = objc_msgSend(v30, sel_propertyList);

        if (v31)
        {
          self;
          if (swift_dynamicCastObjCClass())
          {
            SecAccessControlSetConstraints();

            swift_unknownObjectRelease();
            return v26;
          }
          swift_unknownObjectRelease();
        }
      }
      v65[0] = 263;
      unint64_t v57 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000002ELL, 0x80000001D7ACCB40, v65, 0, v57, 0xD000000000000056, 0x80000001D7AC8F80, v58, 0xD000000000000017, 0x80000001D7ACCAF0, 673);
      swift_willThrow();

      return v26;
    }
    goto LABEL_8;
  }
  if (v66)
  {
LABEL_8:
    type metadata accessor for CFError(0);
    sub_1D7A74D1C((unint64_t *)&qword_1EBDF9578, type metadata accessor for CFError);
    uint64_t v32 = (void *)swift_allocError();
    *uint64_t v33 = v27;
    id v34 = v32;
    if (qword_1EBDF9DC8 != -1) {
      swift_once();
    }
    uint64_t v35 = __swift_project_value_buffer(v4, (uint64_t)qword_1EBDFBE70);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v24, v35, v4);
    id v36 = v32;
    id v37 = v32;
    uint64_t v38 = sub_1D7A9B5D8();
    uint64_t v39 = v4;
    os_log_type_t v40 = sub_1D7A9C748();
    if (os_log_type_enabled(v38, v40))
    {
      uint64_t v41 = swift_slowAlloc();
      uint64_t v61 = v39;
      uint64_t v42 = (uint8_t *)v41;
      uint64_t v43 = swift_slowAlloc();
      uint64_t v62 = v26;
      uint64_t v44 = v43;
      uint64_t v64 = v43;
      *(_DWORD *)uint64_t v42 = 136315138;
      uint64_t v60 = v42 + 4;
      swift_getErrorValue();
      uint64_t v45 = sub_1D7A9D548();
      uint64_t v63 = sub_1D7923300(v45, v46, &v64);
      sub_1D7A9C9E8();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1D7853000, v38, v40, "Unable to create empty ACL due to error: %s", v42, 0xCu);
      swift_arrayDestroy();
      uint64_t v47 = v44;
      uint64_t v26 = v62;
      MEMORY[0x1D947D740](v47, -1, -1);
      MEMORY[0x1D947D740](v42, -1, -1);

      (*(void (**)(char *, uint64_t))(v5 + 8))(v24, v61);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v5 + 8))(v24, v39);
    }
    LOWORD(v64) = 264;
    id v48 = v32;
    unint64_t v49 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v32, 0xD00000000000001ALL, 0x80000001D7ACCAD0, (__int16 *)&v64, 0, v49, 0xD000000000000056, 0x80000001D7AC8F80, v50, 0xD000000000000017, 0x80000001D7ACCAF0, 666);
    swift_willThrow();

    return v26;
  }
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v51 = __swift_project_value_buffer(v4, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v15, v51, v4);
  uint64_t v52 = sub_1D7A9B5D8();
  os_log_type_t v53 = sub_1D7A9C748();
  if (os_log_type_enabled(v52, v53))
  {
    id v54 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v54 = 0;
    _os_log_impl(&dword_1D7853000, v52, v53, "Unable to create empty ACL.", v54, 2u);
    MEMORY[0x1D947D740](v54, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v15, v4);
  LOWORD(v64) = 264;
  unint64_t v55 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
  sub_1D7860544();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000002FLL, 0x80000001D7ACCB10, (__int16 *)&v64, 0, v55, 0xD000000000000056, 0x80000001D7AC8F80, v56, 0xD000000000000017, 0x80000001D7ACCAF0, 660);
  swift_willThrow();
  return v26;
}

void *SecAccessControlRef.constraintsData.getter()
{
  uint64_t result = (void *)SecAccessControlGetConstraints();
  if (result)
  {
    uint64_t v1 = (objc_class *)MEMORY[0x1E4F25230];
    id v2 = result;
    id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithPropertyList_, v2);
    uint64_t v4 = v3;
    if (v3)
    {
      id v5 = objc_msgSend(v3, sel_data);

      uint64_t v4 = (void *)sub_1D7A9B028();
    }

    return v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t SecAccessControlRef.constraintsDescription.getter()
{
  uint64_t result = SecAccessControlGetConstraints();
  if (result)
  {
    uint64_t v1 = (void *)result;
    sub_1D78C4038(0, (unint64_t *)&qword_1EBDF7920);
    sub_1D7A75218();
    id v2 = v1;
    sub_1D7A9BEB8();

    uint64_t v3 = sub_1D7A9BEC8();
    swift_bridgeObjectRelease();
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t SecAccessControlRef.hasStockholmPolicy.getter()
{
  return sub_1D7A735E0();
}

uint64_t sub_1D7A735E0()
{
  uint64_t result = SecAccessControlGetConstraints();
  if (result)
  {
    uint64_t v1 = (void *)result;
    sub_1D78C4038(0, (unint64_t *)&qword_1EBDF7920);
    sub_1D7A75218();
    id v2 = v1;
    uint64_t v3 = sub_1D7A9BEB8();

    sub_1D78C4038(0, (unint64_t *)&qword_1EBDF8260);
    uint64_t v4 = sub_1D7A9C978();
    id v5 = (void *)v4;
    if ((v3 & 0xC000000000000001) != 0)
    {
      uint64_t v6 = sub_1D7A9CF58();

      swift_bridgeObjectRelease();
      if (!v6) {
        goto LABEL_15;
      }
    }
    else
    {
      if (!*(void *)(v3 + 16) || (sub_1D7A190F8(v4), (v7 & 1) == 0))
      {

        swift_bridgeObjectRelease();
        goto LABEL_15;
      }
      swift_unknownObjectRetain();

      swift_bridgeObjectRelease();
    }
    self;
    uint64_t v8 = swift_dynamicCastObjCClass();
    if (v8
      && (uint64_t v9 = (void *)v8,
          uint64_t v10 = (void *)sub_1D7A9C978(),
          id v11 = objc_msgSend(v9, sel_objectForKeyedSubscript_, v10),
          v10,
          v11))
    {
      sub_1D7A9CB08();
      swift_unknownObjectRelease();
      sub_1D7860E50(v15, v16);
      sub_1D78907D8((uint64_t)v16, (uint64_t)v15);
      if (swift_dynamicCast())
      {
        uint64_t v12 = (void *)sub_1D7A9BF98();
        char v13 = sub_1D7A9C958();

        swift_unknownObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
        return v13 & 1;
      }
      swift_unknownObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    }
    else
    {
      swift_unknownObjectRelease();
    }
LABEL_15:
    char v13 = 0;
    return v13 & 1;
  }
  __break(1u);
  return result;
}

uint64_t SecAccessControlRef.hasIDVPolicy.getter()
{
  return sub_1D7A735E0();
}

uint64_t SecAccessControlRef.isBiometricAuth.getter()
{
  Constraints = (void *)SecAccessControlGetConstraints();
  uint64_t v1 = Constraints;
  if (Constraints)
  {
    id v2 = Constraints;
    sub_1D7A9BEA8();
  }
  memset(v4, 0, sizeof(v4));

  sub_1D7871C4C((uint64_t)v4, (uint64_t *)&unk_1EBDF9680);
  return 0;
}

uint64_t SecAccessControlRef.hasCBTNConstraint.getter()
{
  uint64_t result = SecAccessControlGetConstraints();
  if (result)
  {
    uint64_t v1 = (void *)result;
    sub_1D78C4038(0, (unint64_t *)&qword_1EBDF7920);
    sub_1D7A75218();
    id v2 = v1;
    uint64_t v3 = sub_1D7A9BEB8();

    sub_1D78C4038(0, (unint64_t *)&qword_1EBDF8260);
    uint64_t v4 = sub_1D7A9C978();
    id v5 = (void *)v4;
    if ((v3 & 0xC000000000000001) != 0)
    {
      uint64_t v6 = sub_1D7A9CF58();

      swift_bridgeObjectRelease();
      if (!v6) {
        return 0;
      }
    }
    else
    {
      if (!*(void *)(v3 + 16) || (sub_1D7A190F8(v4), (v7 & 1) == 0))
      {

        swift_bridgeObjectRelease();
        return 0;
      }
      swift_unknownObjectRetain();

      swift_bridgeObjectRelease();
    }
    self;
    uint64_t v8 = swift_dynamicCastObjCClass();
    if (v8)
    {
      uint64_t v9 = (void *)v8;
      uint64_t v10 = (void *)sub_1D7A9C978();
      id v11 = objc_msgSend(v9, sel_objectForKeyedSubscript_, v10);

      if (v11)
      {
        sub_1D7A9CB08();
        swift_unknownObjectRelease();
      }
      else
      {
        memset(v14, 0, sizeof(v14));
      }
      sub_1D7A75280((uint64_t)v14, (uint64_t)v15);
      if (!v16)
      {
        swift_unknownObjectRelease();
        sub_1D7871C4C((uint64_t)v15, (uint64_t *)&unk_1EBDF9680);
        return 0;
      }
      sub_1D78C4038(0, (unint64_t *)&qword_1EBDF93C0);
      if (swift_dynamicCast())
      {
        id v12 = objc_msgSend(v13, sel_BOOLValue);
        swift_unknownObjectRelease();

        return (uint64_t)v12;
      }
    }
    swift_unknownObjectRelease();
    return 0;
  }
  __break(1u);
  return result;
}

uint64_t SecAccessControlRef.osgnParentKey.getter()
{
  uint64_t result = SecAccessControlGetConstraints();
  if (result)
  {
    uint64_t v1 = (void *)result;
    sub_1D78C4038(0, (unint64_t *)&qword_1EBDF7920);
    sub_1D7A75218();
    id v2 = v1;
    uint64_t v3 = sub_1D7A9BEB8();

    sub_1D78C4038(0, (unint64_t *)&qword_1EBDF8260);
    uint64_t v4 = sub_1D7A9C978();
    id v5 = (void *)v4;
    if ((v3 & 0xC000000000000001) != 0)
    {
      uint64_t v6 = sub_1D7A9CF58();

      swift_bridgeObjectRelease();
      if (!v6) {
        return 0;
      }
    }
    else
    {
      if (!*(void *)(v3 + 16) || (sub_1D7A190F8(v4), (v7 & 1) == 0))
      {

        swift_bridgeObjectRelease();
        return 0;
      }
      swift_unknownObjectRetain();

      swift_bridgeObjectRelease();
    }
    self;
    uint64_t v8 = swift_dynamicCastObjCClass();
    if (v8)
    {
      uint64_t v9 = (void *)v8;
      uint64_t v10 = (void *)sub_1D7A9C978();
      id v11 = objc_msgSend(v9, sel_objectForKeyedSubscript_, v10);

      if (v11)
      {
        sub_1D7A9CB08();
        swift_unknownObjectRelease();
      }
      else
      {
        memset(v15, 0, sizeof(v15));
      }
      sub_1D7A75280((uint64_t)v15, (uint64_t)v16);
      if (!v17)
      {
        swift_unknownObjectRelease();
        sub_1D7871C4C((uint64_t)v16, (uint64_t *)&unk_1EBDF9680);
        return 0;
      }
      sub_1D78C4038(0, (unint64_t *)&qword_1EA847920);
      if (swift_dynamicCast())
      {
        id v12 = v14;
        uint64_t v13 = sub_1D7A9B028();
        swift_unknownObjectRelease();

        return v13;
      }
    }
    swift_unknownObjectRelease();
    return 0;
  }
  __break(1u);
  return result;
}

BOOL SecAccessControlRef.isOSGNChild.getter()
{
  uint64_t v0 = SecAccessControlRef.osgnParentKey.getter();
  unint64_t v2 = v1 >> 60;
  if (v1 >> 60 != 15) {
    sub_1D7871BDC(v0, v1);
  }
  return v2 < 0xF;
}

uint64_t SecTrustRef.certificateChain.getter()
{
  CFArrayRef v1 = SecTrustCopyCertificateChain(v0);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    CFArrayRef v3 = v1;
    type metadata accessor for SecCertificate(0);
    sub_1D7A9C308();
  }
  return v2;
}

SecTrustRef static SecTrustRef.newFromUnverifiedCertificate(_:)(const void *a1)
{
  trust[1] = *(SecTrustRef *)MEMORY[0x1E4F143B8];
  trust[0] = 0;
  OSStatus v1 = SecTrustCreateWithCertificates(a1, 0, trust);
  SecTrustRef v2 = trust[0];
  if (v1 || !trust[0])
  {
    uint64_t v14 = 0;
    unint64_t v15 = 0xE000000000000000;
    sub_1D7A9CC48();
    sub_1D7A9C128();
    CFStringRef v3 = SecCopyErrorMessageString(v1, 0);
    if (v3)
    {
      uint64_t v4 = (__CFString *)v3;
      uint64_t v5 = sub_1D7A9BFC8();
      uint64_t v7 = v6;
    }
    else
    {
      uint64_t v5 = 0;
      uint64_t v7 = 0;
    }
    uint64_t v16 = v5;
    uint64_t v17 = v7;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8437D8);
    sub_1D7A9CE78();
    swift_bridgeObjectRelease();
    uint64_t v8 = v14;
    uint64_t v9 = v15;
    LOWORD(v14) = 152;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF8678);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1D7AA08E0;
    *(unsigned char *)(inited + 32) = 20;
    *(void *)(inited + 64) = MEMORY[0x1E4FBC150];
    *(_DWORD *)(inited + 40) = v1;
    unint64_t v11 = sub_1D785EC20(inited);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, v8, v9, (__int16 *)&v14, 0, v11, 0xD000000000000056, 0x80000001D7AC8F80, v12, 0xD000000000000020, 0x80000001D7ACCB80, 827);
    swift_willThrow();
  }
  return v2;
}

void sub_1D7A74224(uint64_t a1@<X8>)
{
}

void sub_1D7A74260(uint64_t a1@<X8>)
{
}

uint64_t sub_1D7A7429C@<X0>(uint64_t __s1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (const void *)__s1;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = (a2 >> 32) - (int)a2;
      if (a2 >> 32 < (int)a2)
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      sub_1D7860790(a2, a3);
      uint64_t v10 = (char *)sub_1D7A9AC98();
      if (!v10) {
        goto LABEL_8;
      }
      uint64_t v11 = sub_1D7A9ACB8();
      if (__OFSUB__((int)a2, v11)) {
LABEL_33:
      }
        __break(1u);
      v10 += (int)a2 - v11;
LABEL_8:
      uint64_t v12 = sub_1D7A9ACA8();
      if (v12 >= v9) {
        size_t v13 = (a2 >> 32) - (int)a2;
      }
      else {
        size_t v13 = v12;
      }
      if (!v7)
      {
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        JUMPOUT(0x1D7A74500);
      }
      if (!v10) {
        goto LABEL_36;
      }
      int v14 = memcmp(v7, v10, v13);
      __s1 = sub_1D78607E8(a2, a3);
      BOOL v8 = v14 == 0;
LABEL_24:
      char v24 = v8;
LABEL_29:
      *a4 = v24;
      return __s1;
    case 2uLL:
      uint64_t v15 = *(void *)(a2 + 16);
      uint64_t v16 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      uint64_t v17 = (char *)sub_1D7A9AC98();
      if (!v17) {
        goto LABEL_17;
      }
      uint64_t v18 = sub_1D7A9ACB8();
      if (__OFSUB__(v15, v18)) {
        goto LABEL_32;
      }
      v17 += v15 - v18;
LABEL_17:
      BOOL v19 = __OFSUB__(v16, v15);
      int64_t v20 = v16 - v15;
      if (v19) {
        goto LABEL_31;
      }
      uint64_t v21 = sub_1D7A9ACA8();
      if (v21 >= v20) {
        size_t v22 = v20;
      }
      else {
        size_t v22 = v21;
      }
      if (!v7) {
        goto LABEL_37;
      }
      if (!v17) {
        goto LABEL_38;
      }
      int v23 = memcmp(v7, v17, v22);
      swift_release();
      __s1 = swift_release();
      BOOL v8 = v23 == 0;
      goto LABEL_24;
    case 3uLL:
      if (!__s1) {
        goto LABEL_39;
      }
      char v24 = 1;
      goto LABEL_29;
    default:
      uint64_t __s2 = a2;
      __int16 v26 = a3;
      char v27 = BYTE2(a3);
      char v28 = BYTE3(a3);
      char v29 = BYTE4(a3);
      char v30 = BYTE5(a3);
      if (__s1)
      {
        __s1 = memcmp((const void *)__s1, &__s2, BYTE6(a3));
        BOOL v8 = __s1 == 0;
        goto LABEL_24;
      }
      __break(1u);
      goto LABEL_35;
  }
}

void *sub_1D7A74510(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_1D7A9B068();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6, v7, v8, v9, v10, v11, v12);
  int v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (void *)MEMORY[0x1E4FBC860];
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_12;
      }
      uint64_t v16 = HIDWORD(a1) - (int)a1;
LABEL_6:
      if (v16)
      {
        if (v16 >= 1)
        {
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF9D80);
          uint64_t v15 = (void *)swift_allocObject();
          size_t v19 = _swift_stdlib_malloc_size(v15);
          _OWORD v15[2] = v16;
          v15[3] = 2 * v19 - 64;
        }
        sub_1D7860790(a1, a2);
        uint64_t v20 = sub_1D7A9AFA8();
        sub_1D78607E8(a1, a2);
        (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
        if (v20 != v16)
        {
          __break(1u);
LABEL_12:
          __break(1u);
LABEL_13:
          __break(1u);
          JUMPOUT(0x1D7A746BCLL);
        }
      }
      return v15;
    case 2uLL:
      uint64_t v18 = *(void *)(a1 + 16);
      uint64_t v17 = *(void *)(a1 + 24);
      uint64_t v16 = v17 - v18;
      if (!__OFSUB__(v17, v18)) {
        goto LABEL_6;
      }
      goto LABEL_13;
    case 3uLL:
      return v15;
    default:
      uint64_t v16 = BYTE6(a2);
      goto LABEL_6;
  }
}

id sub_1D7A746CC()
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = sub_1D7A9B5F8();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v0, v2, v3, v4, v5, v6, v7, v8);
  uint64_t v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9, v12, v13, v14, v15, v16, v17, v18);
  uint64_t v20 = (char *)&v47 - v19;
  uint64_t v52 = 0;
  uint64_t v21 = (void *)sub_1D7A9AFF8();
  uint64_t v22 = (void *)SecAccessControlCreateFromData();

  uint64_t v23 = v52;
  id v49 = v22;
  if (v22)
  {
    if (!v52) {
      return v49;
    }
    goto LABEL_5;
  }
  if (v52)
  {
LABEL_5:
    type metadata accessor for CFError(0);
    sub_1D7A74D1C((unint64_t *)&qword_1EBDF9578, type metadata accessor for CFError);
    char v24 = (void *)swift_allocError();
    *uint64_t v25 = v23;
    id v26 = v24;
    if (qword_1EBDF9DC8 != -1) {
      swift_once();
    }
    uint64_t v27 = __swift_project_value_buffer(v0, (uint64_t)qword_1EBDFBE70);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v20, v27, v0);
    id v28 = v24;
    id v29 = v24;
    char v30 = sub_1D7A9B5D8();
    os_log_type_t v31 = sub_1D7A9C748();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      uint64_t v48 = v0;
      uint64_t v34 = v33;
      uint64_t v51 = v33;
      *(_DWORD *)uint64_t v32 = 136315138;
      uint64_t v47 = v32 + 4;
      swift_getErrorValue();
      uint64_t v35 = sub_1D7A9D548();
      uint64_t v50 = sub_1D7923300(v35, v36, &v51);
      sub_1D7A9C9E8();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1D7853000, v30, v31, "Unable to deserialize ACL due to error: %s", v32, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D947D740](v34, -1, -1);
      MEMORY[0x1D947D740](v32, -1, -1);

      (*(void (**)(char *, uint64_t))(v1 + 8))(v20, v48);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v1 + 8))(v20, v0);
    }
    LOWORD(v51) = 262;
    id v37 = v24;
    unint64_t v38 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v24, 0xD000000000000019, 0x80000001D7ACCC80, (__int16 *)&v51, 0, v38, 0xD000000000000056, 0x80000001D7AC8F80, v39, 0x617461446D6F7266, 0xEC000000293A5F28, 645);
    swift_willThrow();

    return v49;
  }
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v41 = __swift_project_value_buffer(v0, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v11, v41, v0);
  uint64_t v42 = sub_1D7A9B5D8();
  os_log_type_t v43 = sub_1D7A9C748();
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v44 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v44 = 0;
    _os_log_impl(&dword_1D7853000, v42, v43, "Unable to deserialize ACL.", v44, 2u);
    MEMORY[0x1D947D740](v44, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v11, v0);
  LOWORD(v51) = 262;
  unint64_t v45 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
  sub_1D7860544();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000002FLL, 0x80000001D7ACCB10, (__int16 *)&v51, 0, v45, 0xD000000000000056, 0x80000001D7AC8F80, v46, 0x617461446D6F7266, 0xEC000000293A5F28, 639);
  swift_willThrow();
  return v49;
}

uint64_t sub_1D7A74D1C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1D7A74D64(SecCertificateRef *a1@<X0>, uint64_t *a2@<X8>)
{
  CFDataRef v3 = SecCertificateCopyData(*a1);
  uint64_t v4 = sub_1D7A9B028();
  uint64_t v6 = v5;

  *a2 = v4;
  a2[1] = v6;
}

uint64_t sub_1D7A74DBC()
{
  uint64_t v0 = SecCertificateCopySubjectAttributeValue();
  if (!v0) {
    return 0;
  }
  uint64_t v1 = (void *)v0;
  uint64_t v2 = sub_1D7A9BFC8();

  return v2;
}

uint64_t sub_1D7A74E68(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  unint64_t v2 = a1[1];
  switch(v2 >> 62)
  {
    case 1uLL:
      uint64_t v6 = v2 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)a1 = xmmword_1D7AA0AB0;
      id v7 = a2;
      uint64_t v8 = v3 >> 32;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_14;
      }
      if (v8 < (int)v3) {
        goto LABEL_24;
      }
      if (sub_1D7A9AC98() && __OFSUB__((int)v3, sub_1D7A9ACB8())) {
        goto LABEL_25;
      }
      sub_1D7A9ACD8();
      swift_allocObject();
      uint64_t v15 = sub_1D7A9AC78();
      swift_release();
      uint64_t v6 = v15;
LABEL_14:
      if (v8 < (int)v3) {
        goto LABEL_21;
      }
      id v16 = v7;
      if (!sub_1D7A9AC98()) {
        goto LABEL_27;
      }
      if (__OFSUB__((int)v3, sub_1D7A9ACB8())) {
        goto LABEL_23;
      }
      sub_1D7A9ACA8();
      id v17 = v16;
      uint64_t v5 = sub_1D7A74DBC();

      unint64_t v14 = v6 | 0x4000000000000000;
      *a1 = v3;
      goto LABEL_18;
    case 2uLL:
      uint64_t v19 = *a1;
      uint64_t v21 = v2 & 0x3FFFFFFFFFFFFFFFLL;
      id v9 = a2;
      sub_1D7A9AF78();
      uint64_t v10 = *(void *)(v19 + 16);
      uint64_t v11 = *(void *)(v19 + 24);
      id v12 = v9;
      if (!sub_1D7A9AC98())
      {
        __break(1u);
LABEL_27:
        __break(1u);
        JUMPOUT(0x1D7A75208);
      }
      if (__OFSUB__(v10, sub_1D7A9ACB8()))
      {
        __break(1u);
LABEL_21:
        __break(1u);
        goto LABEL_22;
      }
      if (__OFSUB__(v11, v10))
      {
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
      }
      sub_1D7A9ACA8();
      id v13 = v12;
      uint64_t v5 = sub_1D7A74DBC();

      unint64_t v14 = v21 | 0x8000000000000000;
      *a1 = v19;
LABEL_18:
      a1[1] = v14;
      return v5;
    case 3uLL:
      return sub_1D7A74DBC();
    default:
      LOWORD(v20) = a1[1];
      BYTE2(v20) = BYTE2(a1[1]);
      HIBYTE(v20) = BYTE3(a1[1]);
      __int16 v22 = WORD2(a1[1]);
      unsigned __int8 v23 = BYTE6(a1[1]);
      uint64_t v5 = sub_1D7A74DBC();
      *a1 = v3;
      a1[1] = v20 | ((unint64_t)v22 << 32) | ((unint64_t)HIBYTE(v22) << 40) | ((unint64_t)v23 << 48);
      return v5;
  }
}

unint64_t sub_1D7A75218()
{
  unint64_t result = qword_1EA847848;
  if (!qword_1EA847848)
  {
    sub_1D78C4038(255, (unint64_t *)&qword_1EBDF7920);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847848);
  }
  return result;
}

uint64_t sub_1D7A75280(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF9680);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1D7A752EC()
{
  unint64_t result = qword_1EA847850;
  if (!qword_1EA847850)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847850);
  }
  return result;
}

unint64_t sub_1D7A75344()
{
  unint64_t result = qword_1EA847858;
  if (!qword_1EA847858)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847858);
  }
  return result;
}

uint64_t type metadata accessor for DIPSecureData()
{
  return self;
}

uint64_t method lookup function for DIPSecureData(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for DIPSecureData);
}

uint64_t dispatch thunk of DIPSecureData.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of DIPSecureData.bytes()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of DIPSecureData.length()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

unsigned char *_s8KeyClassOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D7A754FCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SecKeyRef.KeyClass()
{
  return &type metadata for SecKeyRef.KeyClass;
}

unsigned char *storeEnumTagSinglePayload for PublicKeyAlgorithm(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D7A75600);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PublicKeyAlgorithm()
{
  return &type metadata for PublicKeyAlgorithm;
}

uint64_t sub_1D7A75638()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF8A30);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x1F4186498](v0, v5, v6);
}

void sub_1D7A75710()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF8A30) - 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(NSObject **)(v0 + 24);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  sub_1D7A6F340(v2, v3, v4);
}

uint64_t block_copy_helper_14(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_14()
{
  return swift_release();
}

uint64_t sub_1D7A75790()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF8A30);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t sub_1D7A75824(uint64_t a1, uint64_t a2, void *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF8A30);
  return sub_1D7A6F684(a1, a2, a3);
}

uint64_t IdentityType.init(rawValue:)()
{
  return 0;
}

void *sub_1D7A758CC@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2 = *result != 0;
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = v2;
  return result;
}

CoreIDVShared::IdentityProofingIDType_optional __swiftcall IdentityProofingIDType.init(rawValue:)(Swift::String rawValue)
{
  BOOL v2 = v1;
  BOOL v3 = rawValue._countAndFlagsBits == 25705 && rawValue._object == (void *)0xE200000000000000;
  if (v3 || (object = rawValue._object, uint64_t countAndFlagsBits = rawValue._countAndFlagsBits, (sub_1D7A9D358() & 1) != 0))
  {
    result.SecCertificateRef value = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else if (countAndFlagsBits == 27748 && object == (void *)0xE200000000000000)
  {
    result.SecCertificateRef value = swift_bridgeObjectRelease();
    char v7 = 1;
  }
  else
  {
    char v8 = sub_1D7A9D358();
    result.SecCertificateRef value = swift_bridgeObjectRelease();
    if (v8) {
      char v7 = 1;
    }
    else {
      char v7 = 2;
    }
  }
  *BOOL v2 = v7;
  return result;
}

uint64_t static IdentityProofingIDType.proofingIDTypeFrom(identityPassType:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  if (result == 0x44496574617473 && a2 == 0xE700000000000000)
  {
    char v7 = 0;
  }
  else
  {
    uint64_t v6 = result;
    CoreIDVShared::IdentityProofingIDType_optional result = sub_1D7A9D358();
    char v7 = 0;
    if ((result & 1) == 0)
    {
      char v7 = 1;
      if (v6 != 27748 || a2 != 0xE200000000000000)
      {
        CoreIDVShared::IdentityProofingIDType_optional result = sub_1D7A9D358();
        if (result) {
          char v7 = 1;
        }
        else {
          char v7 = 2;
        }
      }
    }
  }
  *a3 = v7;
  return result;
}

uint64_t IdentityProofingIDType.rawValue.getter()
{
  uint64_t v1 = 27748;
  if (*v0 != 1) {
    uint64_t v1 = 0x636972656E6567;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x44496574617473;
  }
}

uint64_t sub_1D7A75ACC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1D799630C(*a1, *a2);
}

uint64_t sub_1D7A75AD8()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D7A75B70()
{
  sub_1D7A9C0B8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D7A75BF4()
{
  return sub_1D7A9D628();
}

CoreIDVShared::IdentityProofingIDType_optional sub_1D7A75C88(Swift::String *a1)
{
  return IdentityProofingIDType.init(rawValue:)(*a1);
}

void sub_1D7A75C94(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE700000000000000;
  unint64_t v4 = 0xE200000000000000;
  uint64_t v5 = 27748;
  if (v2 != 1)
  {
    uint64_t v5 = 0x636972656E6567;
    unint64_t v4 = 0xE700000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x44496574617473;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t IdentityProofingTextReplacementProvider.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t IdentityProofingTextReplacementProvider.init()()
{
  return v0;
}

char *sub_1D7A75D00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  CoreIDVShared::IdentityProofingIDType_optional result = (char *)(id)MobileGestalt_get_current_device();
  if (result)
  {
    id v17 = result;
    char wapiCapability = MobileGestalt_get_wapiCapability();

    type metadata accessor for IdentityProofingTextReplacementHelper();
    CoreIDVShared::IdentityProofingIDType_optional result = (char *)swift_allocObject();
    *((void *)result + 2) = 0xD000000000000010;
    *((void *)result + 3) = 0x80000001D7ACCCA0;
    strcpy(result + 32, "id.subregion");
    result[45] = 0;
    *((_WORD *)result + 23) = -5120;
    strcpy(result + 48, "idtype.proper");
    *((_WORD *)result + 31) = -4864;
    strcpy(result + 64, "idtype.lower");
    result[77] = 0;
    *((_WORD *)result + 39) = -5120;
    *((void *)result + 10) = 0x6E2E726575737369;
    *((void *)result + 11) = 0xEB00000000656D61;
    *((void *)result + 12) = 0xD000000000000011;
    *((void *)result + 13) = 0x80000001D7ACCCC0;
    *((void *)result + 14) = a1;
    *((void *)result + 15) = a2;
    *((void *)result + 16) = a3;
    *((void *)result + 17) = a4;
    *((void *)result + 18) = a5;
    *((void *)result + 19) = a6;
    *((void *)result + 20) = a7;
    *((void *)result + 21) = a8;
    result[176] = wapiCapability;
  }
  else
  {
    __break(1u);
  }
  return result;
}

char *IdentityProofingTextReplacementHelper.__allocating_init(attributeMessages:messageReplacements:state:country:idType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CoreIDVShared::IdentityProofingIDType_optional result = (char *)(id)MobileGestalt_get_current_device();
  if (result)
  {
    id v17 = result;
    char wapiCapability = MobileGestalt_get_wapiCapability();

    type metadata accessor for IdentityProofingTextReplacementHelper();
    CoreIDVShared::IdentityProofingIDType_optional result = (char *)swift_allocObject();
    *((void *)result + 2) = 0xD000000000000010;
    *((void *)result + 3) = 0x80000001D7ACCCA0;
    strcpy(result + 32, "id.subregion");
    result[45] = 0;
    *((_WORD *)result + 23) = -5120;
    strcpy(result + 48, "idtype.proper");
    *((_WORD *)result + 31) = -4864;
    strcpy(result + 64, "idtype.lower");
    result[77] = 0;
    *((_WORD *)result + 39) = -5120;
    *((void *)result + 10) = 0x6E2E726575737369;
    *((void *)result + 11) = 0xEB00000000656D61;
    *((void *)result + 12) = 0xD000000000000011;
    *((void *)result + 13) = 0x80000001D7ACCCC0;
    *((void *)result + 14) = a1;
    *((void *)result + 15) = a2;
    *((void *)result + 16) = a3;
    *((void *)result + 17) = a4;
    *((void *)result + 18) = a5;
    *((void *)result + 19) = a6;
    *((void *)result + 20) = a7;
    *((void *)result + 21) = a8;
    result[176] = wapiCapability;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t IdentityProofingTextReplacementProvider.deinit()
{
  return v0;
}

uint64_t IdentityProofingTextReplacementProvider.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t IdentityProofingTextReplacementHelper.__allocating_init(attributeMessages:messageReplacements:state:country:idType:isWapi:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0xD000000000000010;
  *(void *)(result + 24) = 0x80000001D7ACCCA0;
  strcpy((char *)(result + 32), "id.subregion");
  *(unsigned char *)(result + 45) = 0;
  *(_WORD *)(result + 46) = -5120;
  strcpy((char *)(result + 48), "idtype.proper");
  *(_WORD *)(result + 62) = -4864;
  strcpy((char *)(result + 64), "idtype.lower");
  *(unsigned char *)(result + 77) = 0;
  *(_WORD *)(result + 78) = -5120;
  *(void *)(result + 80) = 0x6E2E726575737369;
  *(void *)(result + 88) = 0xEB00000000656D61;
  *(void *)(result + 96) = 0xD000000000000011;
  *(void *)(result + 104) = 0x80000001D7ACCCC0;
  *(void *)(result + 112) = a1;
  *(void *)(result + 120) = a2;
  *(void *)(result + 128) = a3;
  *(void *)(result + 136) = a4;
  *(void *)(result + 144) = a5;
  *(void *)(result + 152) = a6;
  *(void *)(result + 160) = a7;
  *(void *)(result + 168) = a8;
  *(unsigned char *)(result + 176) = a9;
  return result;
}

uint64_t type metadata accessor for IdentityProofingTextReplacementHelper()
{
  return self;
}

uint64_t IdentityProofingTextReplacementHelper.init(attributeMessages:messageReplacements:state:country:idType:isWapi:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  *(void *)(v9 + 16) = 0xD000000000000010;
  *(void *)(v9 + 24) = 0x80000001D7ACCCA0;
  strcpy((char *)(v9 + 32), "id.subregion");
  *(unsigned char *)(v9 + 45) = 0;
  *(_WORD *)(v9 + 46) = -5120;
  strcpy((char *)(v9 + 48), "idtype.proper");
  *(_WORD *)(v9 + 62) = -4864;
  strcpy((char *)(v9 + 64), "idtype.lower");
  *(unsigned char *)(v9 + 77) = 0;
  *(_WORD *)(v9 + 78) = -5120;
  *(void *)(v9 + 80) = 0x6E2E726575737369;
  *(void *)(v9 + 88) = 0xEB00000000656D61;
  *(void *)(v9 + 96) = 0xD000000000000011;
  *(void *)(v9 + 104) = 0x80000001D7ACCCC0;
  *(void *)(v9 + 112) = a1;
  *(void *)(v9 + 120) = a2;
  *(void *)(v9 + 128) = a3;
  *(void *)(v9 + 136) = a4;
  *(void *)(v9 + 144) = a5;
  *(void *)(v9 + 152) = a6;
  *(void *)(v9 + 160) = a7;
  *(void *)(v9 + 168) = a8;
  *(unsigned char *)(v9 + 176) = a9;
  return v9;
}

uint64_t sub_1D7A7622C(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v140 = a1;
  uint64_t v5 = sub_1D7A9B5F8();
  unint64_t v6 = *(void *)(v5 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v5, v7, v8, v9, v10, v11, v12, v13);
  id v16 = (char *)&v120 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x1F4188790](v14, v17, v18, v19, v20, v21, v22, v23);
  id v26 = (char *)&v120 - v25;
  MEMORY[0x1F4188790](v24, v27, v28, v29, v30, v31, v32, v33);
  uint64_t v133 = (char *)&v120 - v34;
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847860);
  uint64_t v136 = *(void *)(v35 - 8);
  MEMORY[0x1F4188790](v35, v36, v37, v38, v39, v40, v41, v42);
  uint64_t v134 = (char *)&v120 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847868);
  uint64_t v52 = MEMORY[0x1F4188790](v44, v45, v46, v47, v48, v49, v50, v51);
  id v54 = (char *)&v120 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = MEMORY[0x1F4188790](v52, v55, v56, v57, v58, v59, v60, v61);
  uint64_t v65 = *(void *)(v2 + 112);
  if (!*(void *)(v65 + 16)) {
    goto LABEL_52;
  }
  uint64_t v122 = (char *)&v120 - v63;
  uint64_t v123 = v62;
  uint64_t v124 = v64;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v66 = sub_1D7A18684(v140, a2);
  if ((v67 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_52:
    if (qword_1EBDF9DC8 != -1) {
      swift_once();
    }
    uint64_t v113 = __swift_project_value_buffer(v5, (uint64_t)qword_1EBDFBE70);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v16, v113, v5);
    swift_bridgeObjectRetain_n();
    uint64_t v114 = sub_1D7A9B5D8();
    os_log_type_t v115 = sub_1D7A9C748();
    if (os_log_type_enabled(v114, v115))
    {
      uint64_t v116 = (uint8_t *)swift_slowAlloc();
      unint64_t v117 = v6;
      uint64_t v118 = swift_slowAlloc();
      *(void *)&unsigned long long v143 = v118;
      *(_DWORD *)uint64_t v116 = 136315138;
      uint64_t v129 = v5;
      swift_bridgeObjectRetain();
      uint64_t v148 = sub_1D7923300(v140, a2, (uint64_t *)&v143);
      sub_1D7A9C9E8();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1D7853000, v114, v115, "Attribute config is always expected to have a value for the messageId %s", v116, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D947D740](v118, -1, -1);
      MEMORY[0x1D947D740](v116, -1, -1);

      (*(void (**)(char *, uint64_t))(v117 + 8))(v16, v129);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v16, v5);
    }
    return 0;
  }
  unint64_t v139 = v6;
  char v68 = (uint64_t *)(*(void *)(v65 + 56) + 16 * v66);
  uint64_t v69 = v68[1];
  uint64_t v127 = *v68;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v140 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847870);
  sub_1D7A9B4D8();
  uint64_t v70 = v123;
  sub_1D7A9B4E8();
  os_log_type_t v71 = *(void (**)(char *, uint64_t))(v124 + 8);
  v124 += 8;
  uint64_t v121 = v71;
  v71(v54, v70);
  *(void *)&unsigned long long v149 = v127;
  *((void *)&v149 + 1) = v69;
  uint64_t v126 = v69;
  sub_1D792A744();
  sub_1D7A7711C();
  uint64_t v72 = sub_1D7A9BF28();
  uint64_t v74 = *(void *)(v72 + 16);
  if (v74)
  {
    uint64_t v131 = *(void (**)(char *))(v136 + 16);
    unint64_t v75 = (*(unsigned __int8 *)(v136 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v136 + 80);
    uint64_t v120 = v72;
    unint64_t v76 = v72 + v75;
    uint64_t v130 = *(void *)(v136 + 72);
    uint64_t v138 = (void (**)(char *, uint64_t, uint64_t))(v139 + 16);
    v136 += 16;
    uint64_t v137 = (void (**)(char *, uint64_t))(v139 + 8);
    uint64_t v132 = (void (**)(char *, uint64_t))(v136 - 8);
    *(void *)&long long v73 = 136315138;
    long long v128 = v73;
    uint64_t v125 = MEMORY[0x1E4FBC840] + 8;
    uint64_t v129 = v5;
    uint64_t v135 = v26;
    size_t v77 = v134;
    do
    {
      unint64_t v139 = v76;
      uint64_t v140 = v74;
      v131(v77);
      swift_getKeyPath();
      sub_1D7A9B4F8();
      swift_release();
      uint64_t v78 = MEMORY[0x1D947AE00](v149, *((void *)&v149 + 1), v150, v151);
      unint64_t v80 = v79;
      swift_bridgeObjectRelease();
      *(void *)&unsigned long long v152 = v78;
      *((void *)&v152 + 1) = v80;
      BOOL v81 = v78 == *(void *)(v3 + 16) && v80 == *(void *)(v3 + 24);
      if (v81 || (sub_1D7A9D358() & 1) != 0)
      {
        *(void *)&unsigned long long v149 = v78;
        *((void *)&v149 + 1) = v80;
        swift_bridgeObjectRetain();
        sub_1D7A9C128();
        swift_bridgeObjectRetain();
        sub_1D7A9C128();
        swift_bridgeObjectRelease();
        sub_1D7A9C128();
        swift_bridgeObjectRetain();
        sub_1D7A9C128();
        swift_bridgeObjectRelease();
        unint64_t v80 = *((void *)&v149 + 1);
        uint64_t v78 = v149;
        int v82 = 1;
        swift_beginAccess();
        unsigned long long v152 = __PAIR128__(v80, v78);
        swift_bridgeObjectRelease();
        uint64_t v83 = *(void *)(v3 + 40);
        if (v78 != *(void *)(v3 + 32)) {
          goto LABEL_17;
        }
      }
      else
      {
        int v82 = 0;
        uint64_t v83 = *(void *)(v3 + 40);
        if (v78 != *(void *)(v3 + 32)) {
          goto LABEL_17;
        }
      }
      if (v80 != v83)
      {
LABEL_17:
        if ((sub_1D7A9D358() & 1) == 0) {
          goto LABEL_19;
        }
      }
      *(void *)&unsigned long long v149 = v78;
      *((void *)&v149 + 1) = v80;
      swift_bridgeObjectRetain();
      sub_1D7A9C128();
      swift_bridgeObjectRetain();
      sub_1D7A9C128();
      swift_bridgeObjectRelease();
      unint64_t v80 = *((void *)&v149 + 1);
      uint64_t v78 = v149;
      int v82 = 1;
      swift_beginAccess();
      unsigned long long v152 = __PAIR128__(v80, v78);
      swift_bridgeObjectRelease();
LABEL_19:
      if (v78 == *(void *)(v3 + 48) && v80 == *(void *)(v3 + 56)
        || (sub_1D7A9D358() & 1) != 0
        || v78 == *(void *)(v3 + 64) && v80 == *(void *)(v3 + 72)
        || (sub_1D7A9D358() & 1) != 0)
      {
        uint64_t v84 = v35;
        *(void *)&unsigned long long v149 = v78;
        *((void *)&v149 + 1) = v80;
        swift_bridgeObjectRetain();
        sub_1D7A9C128();
        sub_1D7A9C048();
        sub_1D7A9C128();
        swift_bridgeObjectRelease();
        unsigned long long v85 = v149;
        swift_beginAccess();
        unsigned long long v152 = v85;
        swift_bridgeObjectRelease();
        if (qword_1EBDF9DC8 != -1) {
          swift_once();
        }
        uint64_t v86 = __swift_project_value_buffer(v5, (uint64_t)qword_1EBDFBE70);
        swift_beginAccess();
        char v87 = v133;
        (*v138)(v133, v86, v5);
        uint64_t v88 = sub_1D7A9B5D8();
        os_log_type_t v89 = sub_1D7A9C748();
        if (os_log_type_enabled(v88, v89))
        {
          uint64_t v90 = swift_slowAlloc();
          uint64_t v91 = swift_slowAlloc();
          *(void *)&unsigned long long v149 = v91;
          *(_DWORD *)uint64_t v90 = v128;
          unint64_t v93 = *((void *)&v152 + 1);
          uint64_t v92 = v152;
          swift_bridgeObjectRetain();
          uint64_t v94 = v92;
          id v26 = v135;
          *(void *)(v90 + 4) = sub_1D7923300(v94, v93, (uint64_t *)&v149);
          uint64_t v5 = v129;
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1D7853000, v88, v89, "attributeID is %s", (uint8_t *)v90, 0xCu);
          int v82 = 1;
          swift_arrayDestroy();
          MEMORY[0x1D947D740](v91, -1, -1);
          MEMORY[0x1D947D740](v90, -1, -1);

          (*v137)(v87, v5);
        }
        else
        {

          (*v137)(v87, v5);
          int v82 = 1;
        }
        uint64_t v35 = v84;
        size_t v77 = v134;
      }
      swift_beginAccess();
      uint64_t v96 = *((void *)&v152 + 1);
      uint64_t v95 = v152;
      if (v152 == *(_OWORD *)(v3 + 80) || (sub_1D7A9D358() & 1) != 0)
      {
        *(void *)&unsigned long long v149 = v95;
        *((void *)&v149 + 1) = v96;
        swift_bridgeObjectRetain();
        sub_1D7A9C128();
        swift_bridgeObjectRetain();
        sub_1D7A9C128();
        swift_bridgeObjectRelease();
        sub_1D7A9C128();
        swift_bridgeObjectRetain();
        sub_1D7A9C128();
        swift_bridgeObjectRelease();
        uint64_t v96 = *((void *)&v149 + 1);
        uint64_t v95 = v149;
        unsigned long long v152 = v149;
        swift_bridgeObjectRelease();
        if (__PAIR128__(v96, v95) == *(_OWORD *)(v3 + 96) || (sub_1D7A9D358() & 1) != 0) {
          goto LABEL_39;
        }
      }
      else
      {
        if (v95 == *(void *)(v3 + 96) && v96 == *(void *)(v3 + 104) || (sub_1D7A9D358() & 1) != 0)
        {
LABEL_39:
          *(void *)&unsigned long long v149 = v95;
          *((void *)&v149 + 1) = v96;
          swift_bridgeObjectRetain();
          sub_1D7A9C128();
          sub_1D7A9C128();
          swift_bridgeObjectRelease();
          unsigned long long v152 = v149;
          swift_bridgeObjectRelease();
          if (qword_1EBDF9DC8 != -1) {
            swift_once();
          }
          uint64_t v97 = __swift_project_value_buffer(v5, (uint64_t)qword_1EBDFBE70);
          swift_beginAccess();
          (*v138)(v26, v97, v5);
          uint64_t v98 = sub_1D7A9B5D8();
          os_log_type_t v99 = sub_1D7A9C748();
          if (os_log_type_enabled(v98, v99))
          {
            uint64_t v100 = swift_slowAlloc();
            uint64_t v101 = swift_slowAlloc();
            *(void *)&unsigned long long v149 = v101;
            *(_DWORD *)uint64_t v100 = v128;
            unint64_t v103 = *((void *)&v152 + 1);
            uint64_t v102 = v152;
            swift_bridgeObjectRetain();
            *(void *)(v100 + 4) = sub_1D7923300(v102, v103, (uint64_t *)&v149);
            uint64_t v5 = v129;
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_1D7853000, v98, v99, "attributeID is %s", (uint8_t *)v100, 0xCu);
            swift_arrayDestroy();
            uint64_t v104 = v101;
            id v26 = v135;
            MEMORY[0x1D947D740](v104, -1, -1);
            MEMORY[0x1D947D740](v100, -1, -1);
          }

          (*v137)(v26, v5);
          goto LABEL_44;
        }
        if (!v82)
        {
          uint64_t v105 = *(void *)(v3 + 112);
          if (!*(void *)(v105 + 16)) {
            goto LABEL_6;
          }
          goto LABEL_46;
        }
      }
LABEL_44:
      uint64_t v105 = *(void *)(v3 + 120);
      if (!*(void *)(v105 + 16)) {
        goto LABEL_6;
      }
      uint64_t v96 = *((void *)&v152 + 1);
      uint64_t v95 = v152;
LABEL_46:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v106 = sub_1D7A18684(v95, v96);
      if (v107)
      {
        char v108 = (uint64_t *)(*(void *)(v105 + 56) + 16 * v106);
        uint64_t v110 = *v108;
        uint64_t v109 = v108[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v146 = v127;
        uint64_t v147 = v126;
        swift_getKeyPath();
        sub_1D7A9B4F8();
        swift_release();
        unsigned long long v143 = v149;
        uint64_t v144 = v150;
        uint64_t v145 = v151;
        uint64_t v141 = v110;
        uint64_t v142 = v109;
        sub_1D791118C();
        sub_1D7A77178();
        uint64_t v111 = sub_1D7A9CA58();
        uint64_t v126 = v112;
        uint64_t v127 = v111;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*v132)(v77, v35);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v26 = v135;
        goto LABEL_7;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_6:
      (*v132)(v77, v35);
      swift_bridgeObjectRelease();
LABEL_7:
      unint64_t v76 = v139 + v130;
      uint64_t v74 = v140 - 1;
    }
    while (v140 != 1);
  }
  swift_bridgeObjectRelease();
  v121(v122, v123);
  return v127;
}

uint64_t IdentityProofingTextReplacementHelper.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t IdentityProofingTextReplacementHelper.__deallocating_deinit()
{
  IdentityProofingTextReplacementHelper.deinit();
  return swift_deallocClassInstance();
}

uint64_t IdentityType.init(from:)()
{
  return 0;
}

unint64_t sub_1D7A7711C()
{
  unint64_t result = qword_1EA847878;
  if (!qword_1EA847878)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA847868);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847878);
  }
  return result;
}

unint64_t sub_1D7A77178()
{
  unint64_t result = qword_1EA847880;
  if (!qword_1EA847880)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847880);
  }
  return result;
}

unint64_t sub_1D7A771D0()
{
  unint64_t result = qword_1EA847888;
  if (!qword_1EA847888)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847888);
  }
  return result;
}

unint64_t sub_1D7A77228()
{
  unint64_t result = qword_1EA847890;
  if (!qword_1EA847890)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847890);
  }
  return result;
}

ValueMetadata *type metadata accessor for IdentityType()
{
  return &type metadata for IdentityType;
}

unsigned char *storeEnumTagSinglePayload for IdentityProofingIDType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D7A77358);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IdentityProofingIDType()
{
  return &type metadata for IdentityProofingIDType;
}

uint64_t type metadata accessor for IdentityProofingTextReplacementProvider()
{
  return self;
}

uint64_t method lookup function for IdentityProofingTextReplacementProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for IdentityProofingTextReplacementProvider);
}

uint64_t dispatch thunk of IdentityProofingTextReplacementProvider.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of IdentityProofingTextReplacementProvider.makeTextReplacementHelper(attributeMessages:messageReplacements:state:country:idType:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t method lookup function for IdentityProofingTextReplacementHelper(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for IdentityProofingTextReplacementHelper);
}

uint64_t dispatch thunk of IdentityProofingTextReplacementHelper.__allocating_init(attributeMessages:messageReplacements:state:country:idType:isWapi:)()
{
  return (*(uint64_t (**)(void))(v0 + 320))();
}

uint64_t dispatch thunk of IdentityProofingTextReplacementHelper.replaceText(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 328))();
}

id ISO18013SessionError(_:code:fromError:)(uint64_t a1, uint64_t a2, char *a3, void *a4)
{
  uint64_t v7 = *a3;
  sub_1D785F2A0(MEMORY[0x1E4FBC860]);
  if (a2)
  {
    uint64_t v8 = sub_1D7A9BFC8();
    uint64_t v10 = v9;
    uint64_t v30 = MEMORY[0x1E4FBB1A0];
    *(void *)&long long v29 = a1;
    *((void *)&v29 + 1) = a2;
    sub_1D7860E50(&v29, v26);
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1D78A095C(v26, v8, v10, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a4)
  {
    uint64_t v12 = sub_1D7A9BFC8();
    uint64_t v14 = v13;
    swift_getErrorValue();
    uint64_t v15 = v27;
    uint64_t v16 = v28;
    uint64_t v30 = v28;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v29);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(boxed_opaque_existential_0, v15, v16);
    sub_1D7860E50(&v29, v26);
    id v18 = a4;
    char v19 = swift_isUniquelyReferenced_nonNull_native();
    sub_1D78A095C(v26, v12, v14, v19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v20 = qword_1D7AB9D20[v7];
  id v21 = objc_allocWithZone(MEMORY[0x1E4F28C58]);
  uint64_t v22 = (void *)sub_1D7A9BF98();
  uint64_t v23 = (void *)sub_1D7A9BE98();
  swift_bridgeObjectRelease();
  id v24 = objc_msgSend(v21, sel_initWithDomain_code_userInfo_, v22, v20, v23);

  return v24;
}

uint64_t iso18013SessionErrorDomain.getter()
{
  return 0x33313038314F5349;
}

CoreIDVShared::ISO18013SessionErrorCode_optional __swiftcall ISO18013SessionErrorCode.init(rawValue:)(Swift::Int rawValue)
{
  if (rawValue > -2002)
  {
    if (rawValue > -1002)
    {
      if (rawValue == -1001)
      {
        *uint64_t v1 = 1;
        return (CoreIDVShared::ISO18013SessionErrorCode_optional)rawValue;
      }
      if (rawValue == -1000)
      {
        *uint64_t v1 = 0;
        return (CoreIDVShared::ISO18013SessionErrorCode_optional)rawValue;
      }
    }
    else
    {
      if (rawValue == -2001)
      {
        *uint64_t v1 = 3;
        return (CoreIDVShared::ISO18013SessionErrorCode_optional)rawValue;
      }
      if (rawValue == -1002)
      {
        *uint64_t v1 = 2;
        return (CoreIDVShared::ISO18013SessionErrorCode_optional)rawValue;
      }
    }
LABEL_20:
    *uint64_t v1 = 8;
    return (CoreIDVShared::ISO18013SessionErrorCode_optional)rawValue;
  }
  if (rawValue > -3001)
  {
    if (rawValue == -3000)
    {
      *uint64_t v1 = 5;
      return (CoreIDVShared::ISO18013SessionErrorCode_optional)rawValue;
    }
    if (rawValue == -2002)
    {
      *uint64_t v1 = 4;
      return (CoreIDVShared::ISO18013SessionErrorCode_optional)rawValue;
    }
    goto LABEL_20;
  }
  if (rawValue == -6000)
  {
    *uint64_t v1 = 7;
    return (CoreIDVShared::ISO18013SessionErrorCode_optional)rawValue;
  }
  if (rawValue != -5000) {
    goto LABEL_20;
  }
  *uint64_t v1 = 6;
  return (CoreIDVShared::ISO18013SessionErrorCode_optional)rawValue;
}

uint64_t ISO18013SessionErrorCode.rawValue.getter()
{
  return qword_1D7AB9D20[*v0];
}

BOOL sub_1D7A77798(char *a1, char *a2)
{
  return qword_1D7AB9D20[*a1] == qword_1D7AB9D20[*a2];
}

uint64_t sub_1D7A777BC()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D7A7780C()
{
  return sub_1D7A9D5E8();
}

uint64_t sub_1D7A77844()
{
  return sub_1D7A9D628();
}

CoreIDVShared::ISO18013SessionErrorCode_optional sub_1D7A77890(Swift::Int *a1)
{
  return ISO18013SessionErrorCode.init(rawValue:)(*a1);
}

void sub_1D7A77898(void *a1@<X8>)
{
  *a1 = qword_1D7AB9D20[*v1];
}

unint64_t sub_1D7A778B4()
{
  unint64_t result = qword_1EA847898;
  if (!qword_1EA847898)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847898);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ISO18013SessionErrorCode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D7A779D4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ISO18013SessionErrorCode()
{
  return &type metadata for ISO18013SessionErrorCode;
}

uint64_t dispatch thunk of ReaderAuthenticationAllowableElementsProviding.allowableElementsForDisplayOnly.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ReaderAuthenticationAllowableElementsProviding.allowableElementsForDataTransfer.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t DIPECIESSessionV3SecKey.__allocating_init(_:)(void *a1)
{
  uint64_t v2 = swift_allocObject();
  DIPECIESSessionV3SecKey.init(_:)(a1);
  return v2;
}

BOOL static ECIESOption.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t ECIESOption.hash(into:)()
{
  return sub_1D7A9D5E8();
}

uint64_t DIPECIESSessionECV1.__allocating_init(_:)(void *a1)
{
  return swift_allocObject();
}

uint64_t DIPECIESSessionECV1.init(_:)(void *a1)
{
  return v1;
}

uint64_t sub_1D7A77B58()
{
  uint64_t result = sub_1D7A7B2B0();
  if (v0) {
    return v2;
  }
  return result;
}

void sub_1D7A77B84(uint64_t a1, uint64_t a2, void *a3)
{
}

uint64_t sub_1D7A77BB0()
{
  return sub_1D7A7B624();
}

uint64_t sub_1D7A77BC8()
{
  return sub_1D7A7B448();
}

uint64_t DIPECIESSessionECV1.deinit()
{
  return v0;
}

uint64_t DIPECIESSessionECV1.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_1D7A77BF8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for DIPECIESSessionECV1();
  uint64_t result = swift_allocObject();
  *a2 = result;
  return result;
}

id DIPECIESSessionECV3.ePrivateKey.getter()
{
  return *(id *)(v0 + 16);
}

id DIPECIESSessionECV3.ePublicKey.getter()
{
  return *(id *)(v0 + 24);
}

uint64_t DIPECIESSessionECV3.ePublicKeyData.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  sub_1D7860790(v1, *(void *)(v0 + 40));
  return v1;
}

uint64_t DIPECIESSessionECV3.__allocating_init(_:)(void *a1)
{
  uint64_t v2 = swift_allocObject();
  DIPECIESSessionECV3.init(_:)(a1);
  return v2;
}

uint64_t DIPECIESSessionECV3.init(_:)(void *a1)
{
  uint64_t v3 = v1;
  error[3] = *(CFErrorRef *)MEMORY[0x1E4F143B8];
  uint64_t v5 = sub_1D7A9B5F8();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7, v8, v9, v10, v11, v12, v13);
  uint64_t v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    *(void *)(v3 + 16) = a1;
    uint64_t v16 = a1;
    uint64_t v17 = SecKeyCopyPublicKey(v16);
    if (!v17)
    {
      LOWORD(error[0]) = 152;
      unint64_t v18 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000001BLL, 0x80000001D7ACCEC0, (__int16 *)error, 0, v18, 0xD000000000000058, 0x80000001D7ACCE30, v19, 0x293A5F2874696E69, 0xE800000000000000, 126);
      swift_willThrow();

      uint64_t v20 = *(void **)(v3 + 16);
LABEL_13:

LABEL_16:
      type metadata accessor for DIPECIESSessionECV3();
      swift_deallocPartialClassInstance();
      return v3;
    }
  }
  else
  {
    LOBYTE(v46[0]) = 0;
    sub_1D7A87E48(v46, 0, 0);
    if (v2)
    {
      if (qword_1EBDF9DC8 != -1) {
        swift_once();
      }
      uint64_t v23 = __swift_project_value_buffer(v5, (uint64_t)qword_1EBDFBE70);
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v15, v23, v5);
      id v24 = v2;
      id v25 = v2;
      id v26 = sub_1D7A9B5D8();
      os_log_type_t v27 = sub_1D7A9C758();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = (uint8_t *)swift_slowAlloc();
        uint64_t v44 = swift_slowAlloc();
        v46[0] = v44;
        uint64_t v43 = v28;
        *(_DWORD *)uint64_t v28 = 136446210;
        uint64_t v42 = v28 + 4;
        swift_getErrorValue();
        uint64_t v29 = sub_1D7A9D548();
        uint64_t v45 = sub_1D7923300(v29, v30, v46);
        sub_1D7A9C9E8();
        swift_bridgeObjectRelease();

        uint64_t v31 = v43;
        _os_log_impl(&dword_1D7853000, v26, v27, "failed to create key pair for ECIES. %{public}s", v43, 0xCu);
        uint64_t v32 = v44;
        swift_arrayDestroy();
        MEMORY[0x1D947D740](v32, -1, -1);
        MEMORY[0x1D947D740](v31, -1, -1);
      }
      else
      {
      }
      (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v5);
      LOWORD(v46[0]) = 0;
      id v38 = v2;
      unint64_t v39 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v2, 0xD000000000000024, 0x80000001D7ACCE00, (__int16 *)v46, 0, v39, 0xD000000000000058, 0x80000001D7ACCE30, v40, 0x293A5F2874696E69, 0xE800000000000000, 136);
      swift_willThrow();

      goto LABEL_16;
    }
    error[0] = v21;
    error[1] = v22;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF8280);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF8290);
    swift_dynamicCast();
    uint64_t v17 = (__SecKey *)v46[1];
    *(void *)(v3 + 16) = v46[0];
  }
  *(void *)(v3 + 24) = v17;
  error[0] = 0;
  CFDataRef v33 = SecKeyCopyExternalRepresentation(v17, error);
  if (!v33)
  {
    LOWORD(v46[0]) = 152;
    errorFromCFError(_:_:_:)(error[0], 0xD000000000000021, 0x80000001D7ACCE90, (__int16 *)v46);
    swift_willThrow();

    uint64_t v20 = *(void **)(v3 + 24);
    goto LABEL_13;
  }
  CFDataRef v34 = v33;
  uint64_t v35 = sub_1D7A9B028();
  uint64_t v37 = v36;

  *(void *)(v3 + 32) = v35;
  *(void *)(v3 + 40) = v37;
  return v3;
}

unint64_t sub_1D7A7824C(uint64_t a1, uint64_t a2, __SecCertificate *a3, uint64_t a4)
{
  return sub_1D7A7AA20(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, SecKeyRef, uint64_t))sub_1D7A78294, 0xD000000000000040, 0x80000001D7ACCEE0, 160);
}

void sub_1D7A78294(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  v53[4] = *MEMORY[0x1E4F143B8];
  if (!a4
    || !*(void *)(a4 + 16)
    || (uint64_t v7 = v4, v11 = sub_1D7A19088(0), (v12 & 1) == 0)
    || !*(void *)(a4 + 16)
    || (uint64_t v13 = (uint64_t *)(*(void *)(a4 + 56) + 16 * v11),
        uint64_t v15 = *v13,
        unint64_t v14 = v13[1],
        unint64_t v16 = sub_1D7A19088(1),
        (v17 & 1) == 0))
  {
    LOWORD(v53[0]) = 105;
    unint64_t v21 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000053, 0x80000001D7ACCF30, (__int16 *)v53, 0, v21, 0xD000000000000058, 0x80000001D7ACCE30, v22, 0x2874707972636E65, 0xEF293A5F3A5F3A5FLL, 179);
    swift_willThrow();
    return;
  }
  unint64_t v18 = (uint64_t *)(*(void *)(a4 + 56) + 16 * v16);
  unint64_t v19 = v18[1];
  uint64_t v50 = *v18;
  unint64_t v51 = v14;
  uint64_t v20 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
      }
      uint64_t v20 = HIDWORD(a1) - (int)a1;
LABEL_12:
      id v25 = objc_allocWithZone(MEMORY[0x1E4F1CA58]);
      sub_1D7860790(v15, v51);
      uint64_t v49 = v15;
      sub_1D7860790(v50, v19);
      id v26 = objc_msgSend(v25, sel_initWithLength_, v20);
      if (!v26)
      {
        LOWORD(v53[0]) = 0;
        unint64_t v32 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
        sub_1D7860544();
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000029, 0x80000001D7ACCF90, (__int16 *)v53, 0, v32, 0xD000000000000058, 0x80000001D7ACCE30, v33, 0x2874707972636E65, 0xEF293A5F3A5F3A5FLL, 182);
        swift_willThrow();
        uint64_t v34 = v50;
LABEL_18:
        sub_1D78607E8(v34, v19);
        uint64_t v30 = v15;
        unint64_t v31 = v51;
        goto LABEL_19;
      }
      os_log_type_t v27 = v26;
      id v28 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1CA58]), sel_initWithLength_, 16);
      if (!v28)
      {
        LOWORD(v53[0]) = 0;
        unint64_t v35 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
        sub_1D7860544();
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000022, 0x80000001D7ACCFC0, (__int16 *)v53, 0, v35, 0xD000000000000058, 0x80000001D7ACCE30, v36, 0x2874707972636E65, 0xEF293A5F3A5F3A5FLL, 185);
        swift_willThrow();

        uint64_t v34 = v50;
        goto LABEL_18;
      }
      uint64_t v48 = v28;
      LOBYTE(v53[0]) = 0;
      uint64_t v29 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, unint64_t, uint64_t, unint64_t))(*(void *)v7 + 152))(v53, a3, v15, v51, v50, v19);
      if (v5)
      {

        sub_1D78607E8(v50, v19);
        uint64_t v30 = v15;
        unint64_t v31 = v51;
LABEL_19:
        sub_1D78607E8(v30, v31);
        return;
      }
      uint64_t v37 = v29;
      switch(a2 >> 62)
      {
        case 0uLL:
          v52[0] = a1;
          LOWORD(v52[1]) = a2;
          BYTE2(v52[1]) = BYTE2(a2);
          BYTE3(v52[1]) = BYTE3(a2);
          BYTE4(v52[1]) = BYTE4(a2);
          BYTE5(v52[1]) = BYTE5(a2);
          swift_retain();
          id v38 = v27;
          sub_1D7A78AA4((uint64_t)v52, (uint64_t)v52 + BYTE6(a2), v37, v38, v48, v53);
          sub_1D78607E8(v15, v51);
          sub_1D78607E8(v50, v19);
          swift_release();

          goto LABEL_28;
        case 1uLL:
          if (a1 >> 32 < (int)a1) {
            goto LABEL_31;
          }
          id v39 = v27;
          id v40 = v48;
          swift_retain();
          id v41 = v39;
          id v42 = v40;
          sub_1D7860790(a1, a2);
          sub_1D7A7AEF4((int)a1, a1 >> 32, v37, v41, v42, v53);
          sub_1D78607E8(a1, a2);
LABEL_26:
          sub_1D78607E8(v49, v51);
          sub_1D78607E8(v50, v19);
LABEL_27:

LABEL_28:
          swift_release();

          break;
        case 2uLL:
          uint64_t v43 = *(void *)(a1 + 16);
          uint64_t v44 = *(void *)(a1 + 24);
          id v45 = v27;
          id v46 = v48;
          swift_retain();
          id v41 = v45;
          id v47 = v46;
          swift_retain();
          swift_retain();
          sub_1D7A7AEF4(v43, v44, v37, v41, v47, v53);
          swift_release();
          swift_release();
          goto LABEL_26;
        case 3uLL:
          memset(v52, 0, 14);
          swift_retain();
          id v41 = v27;
          sub_1D7A78AA4((uint64_t)v52, (uint64_t)v52, v37, v41, v48, v53);
          sub_1D78607E8(v15, v51);
          sub_1D78607E8(v50, v19);
          swift_release();
          goto LABEL_27;
        default:
          JUMPOUT(0);
      }
      return;
    case 2uLL:
      uint64_t v24 = *(void *)(a1 + 16);
      uint64_t v23 = *(void *)(a1 + 24);
      uint64_t v20 = v23 - v24;
      if (!__OFSUB__(v23, v24)) {
        goto LABEL_12;
      }
      goto LABEL_30;
    case 3uLL:
      goto LABEL_12;
    default:
      uint64_t v20 = BYTE6(a2);
      goto LABEL_12;
  }
}

uint64_t sub_1D7A78AA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X4>, uint64_t *a6@<X8>)
{
  CFDataRef v11 = *(const __CFData **)(a3 + 16);
  uint64_t result = (uint64_t)CFDataGetBytePtr(v11);
  if (!result)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t result = (uint64_t)CFDataGetBytePtr(v11);
  if (!result)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (a1) {
    uint64_t v13 = a2 - a1;
  }
  else {
    uint64_t v13 = 0;
  }
  id v14 = a4;
  id v15 = objc_msgSend(v14, sel_mutableBytes);
  id v16 = a5;
  id v29 = objc_msgSend(v16, sel_mutableBytes);
  int v17 = CCCryptorGCMOneshotEncrypt();
  if (v17)
  {
    int v18 = v17;
    sub_1D7A9CC48();
    swift_bridgeObjectRelease();
    v30[0] = 0xD000000000000099;
    v30[1] = 0x80000001D7ACD600;
    int v31 = v18;
    uint64_t v19 = MEMORY[0x1E4FBC150];
    sub_1D7A9D258();
    sub_1D7A9C128();
    swift_bridgeObjectRelease();
    sub_1D7A9C128();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF8678);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1D7AA08E0;
    *(unsigned char *)(inited + 32) = 20;
    *(void *)(inited + 64) = v19;
    *(_DWORD *)(inited + 40) = v18;
    unint64_t v21 = sub_1D785EC20(inited);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000027, 0x80000001D7ACD600, (__int16 *)v30, 0, v21, 0xD000000000000058, 0x80000001D7ACCE30, v22, 0x2874707972636E65, 0xEF293A5F3A5F3A5FLL, 209);
    return swift_willThrow();
  }
  objc_msgSend(v14, sel_appendData_, v16, v13, v15, v29, 16);
  uint64_t result = (uint64_t)CFDataGetBytePtr(v11);
  if (result)
  {
    uint64_t v23 = sub_1D7A7B394((unsigned char *)(result + 16), 16);
    unint64_t v25 = v24;
    *a6 = v23;
    a6[1] = v24;
    sub_1D7860790(v23, v24);
    uint64_t v26 = sub_1D7A9B028();
    uint64_t v28 = v27;
    uint64_t result = sub_1D78607E8(v23, v25);
    a6[2] = v26;
    a6[3] = v28;
    return result;
  }
LABEL_12:
  __break(1u);
  return result;
}

CFDictionaryRef sub_1D7A78D58(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1D7A7BD64(a3, a4, a5, a6, a7);
}

uint64_t sub_1D7A78D84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X3>, uint64_t *a4@<X8>)
{
  if (!a1)
  {
    LOWORD(v18[0]) = 153;
    unint64_t v15 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000003CLL, 0x80000001D7ACD590, (__int16 *)v18, 0, v15, 0xD000000000000058, 0x80000001D7ACCE30, v16, 0xD000000000000011, 0x80000001D7ACD410, 257);
    return swift_willThrow();
  }
  CFDataRef v6 = *(const __CFData **)(a2 + 16);
  uint64_t result = (uint64_t)CFDataGetBytePtr(v6);
  if (!result)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t result = (uint64_t)CFDataGetBytePtr(v6);
  if (!result)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  objc_msgSend(a3, sel_length);
  id v8 = a3;
  objc_msgSend(v8, sel_mutableBytes);
  objc_msgSend(v8, sel_length);
  int v9 = CCCryptorGCMOneshotDecrypt();
  if (v9)
  {
    int v10 = v9;
    sub_1D7A9CC48();
    swift_bridgeObjectRelease();
    v18[0] = 0xD000000000000099;
    v18[1] = 0x80000001D7ACD5D0;
    int v19 = v10;
    uint64_t v11 = MEMORY[0x1E4FBC150];
    sub_1D7A9D258();
    sub_1D7A9C128();
    swift_bridgeObjectRelease();
    sub_1D7A9C128();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF8678);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1D7AA08E0;
    *(unsigned char *)(inited + 32) = 20;
    *(void *)(inited + 64) = v11;
    *(_DWORD *)(inited + 40) = v10;
    unint64_t v13 = sub_1D785EC20(inited);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000027, 0x80000001D7ACD5D0, (__int16 *)v18, 0, v13, 0xD000000000000058, 0x80000001D7ACCE30, v14, 0xD000000000000011, 0x80000001D7ACD410, 268);
    return swift_willThrow();
  }
  uint64_t result = sub_1D7A9B028();
  *a4 = result;
  a4[1] = v17;
  return result;
}

uint64_t sub_1D7A7906C()
{
  uint64_t v1 = *(void *)(v0 + 32);
  sub_1D7860790(v1, *(void *)(v0 + 40));
  return v1;
}

unint64_t sub_1D7A790B0(char *a1, SecKeyRef key, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  char v7 = *a1;
  unint64_t v8 = a4 >> 62;
  int v9 = (void *)v6;
  unsigned __int8 v10 = BYTE6(a6);
  unsigned __int8 v12 = BYTE6(a4);
  switch(a4 >> 62)
  {
    case 1uLL:
      LODWORD(v15) = HIDWORD(a3) - a3;
      if (__OFSUB__(HIDWORD(a3), a3))
      {
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
      }
      uint64_t v15 = (int)v15;
LABEL_6:
      if (v15 == 65)
      {
        unint64_t v19 = a6 >> 62;
        switch(a6 >> 62)
        {
          case 1uLL:
            LODWORD(v20) = HIDWORD(a5) - a5;
            if (__OFSUB__(HIDWORD(a5), a5)) {
              goto LABEL_36;
            }
            uint64_t v20 = (int)v20;
LABEL_18:
            if (v20 != 65)
            {
LABEL_23:
              *(void *)&long long v54 = 0;
              *((void *)&v54 + 1) = 0xE000000000000000;
              sub_1D7A9CC48();
              sub_1D7A9C128();
              uint64_t v43 = 0;
              switch((int)v19)
              {
                case 0:
                  uint64_t v43 = (__CFError *)v10;
                  goto LABEL_28;
                case 1:
                  LODWORD(v43) = HIDWORD(a5) - a5;
                  if (__OFSUB__(HIDWORD(a5), a5)) {
                    goto LABEL_38;
                  }
                  uint64_t v43 = (__CFError *)(int)v43;
LABEL_28:
                  CFErrorRef error = v43;
                  sub_1D7A9D258();
                  sub_1D7A9C128();
                  swift_bridgeObjectRelease();
                  unint64_t v6 = v54;
                  LOWORD(v54) = 105;
                  unint64_t v46 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
                  sub_1D7860544();
                  swift_allocError();
                  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, v6, *((uint64_t *)&v54 + 1), (__int16 *)&v54, 0, v46, 0xD000000000000058, 0x80000001D7ACCE30, v47, 0xD00000000000001CLL, 0x80000001D7ACD340, 286);
                  break;
                case 2:
                  uint64_t v45 = *(void *)(a5 + 16);
                  uint64_t v44 = *(void *)(a5 + 24);
                  BOOL v18 = __OFSUB__(v44, v45);
                  uint64_t v43 = (__CFError *)(v44 - v45);
                  if (!v18) {
                    goto LABEL_28;
                  }
                  goto LABEL_39;
                case 3:
                  goto LABEL_28;
                default:
                  goto LABEL_40;
              }
              goto LABEL_29;
            }
            CFErrorRef error = 0;
            CFDataRef v28 = SecKeyCopyExternalRepresentation(key, &error);
            if (!v28)
            {
              LOWORD(v54) = 152;
              errorFromCFError(_:_:_:)(error, 0xD000000000000029, 0x80000001D7ACD2D0, (__int16 *)&v54);
              goto LABEL_29;
            }
            CFDataRef v29 = v28;
            uint64_t v52 = sub_1D7A9B028();
            unint64_t v31 = v30;

            unint64_t v32 = v31;
            uint64_t v33 = v9[4];
            unint64_t v34 = v9[5];
            uint64_t v35 = v33;
            unint64_t v36 = v34;
            uint64_t v37 = v52;
            unint64_t v38 = v32;
            if ((v7 & 1) == 0)
            {
              uint64_t v35 = v52;
              unint64_t v36 = v32;
              uint64_t v37 = v9[4];
              unint64_t v38 = v9[5];
            }
            unint64_t v49 = v36;
            uint64_t v51 = v35;
            long long v54 = xmmword_1D7AA0AB0;
            unint64_t v39 = v38;
            sub_1D7860790(v33, v34);
            sub_1D7860790(v52, v32);
            unint64_t v50 = v32;
            sub_1D7A9B048();
            sub_1D7A9B048();
            sub_1D7A9B048();
            sub_1D7A9B048();
            id v40 = (__SecKey *)v9[2];
            CFStringRef v41 = (const __CFString *)*MEMORY[0x1E4F3BA10];
            long long v42 = v54;
            sub_1D7860790(v54, *((unint64_t *)&v54 + 1));
            unint64_t v6 = sub_1D7A87AAC(v40, key, v41, 32, v42, *((unint64_t *)&v42 + 1));
            sub_1D78607E8(v42, *((unint64_t *)&v42 + 1));
            sub_1D78607E8(v37, v39);
            sub_1D78607E8(v51, v49);
            sub_1D78607E8(v52, v50);
            sub_1D78607E8(v42, *((unint64_t *)&v42 + 1));
            break;
          case 2uLL:
            uint64_t v27 = *(void *)(a5 + 16);
            uint64_t v26 = *(void *)(a5 + 24);
            BOOL v18 = __OFSUB__(v26, v27);
            uint64_t v20 = v26 - v27;
            if (!v18) {
              goto LABEL_18;
            }
            goto LABEL_37;
          case 3uLL:
            goto LABEL_23;
          default:
            uint64_t v20 = BYTE6(a6);
            goto LABEL_18;
        }
      }
      else
      {
LABEL_9:
        *(void *)&long long v54 = 0;
        *((void *)&v54 + 1) = 0xE000000000000000;
        sub_1D7A9CC48();
        sub_1D7A9C128();
        unint64_t v21 = 0;
        switch((int)v8)
        {
          case 0:
            unint64_t v21 = (__CFError *)v12;
            goto LABEL_14;
          case 1:
            LODWORD(v21) = HIDWORD(a3) - a3;
            if (__OFSUB__(HIDWORD(a3), a3)) {
              goto LABEL_34;
            }
            unint64_t v21 = (__CFError *)(int)v21;
LABEL_14:
            CFErrorRef error = v21;
            sub_1D7A9D258();
            sub_1D7A9C128();
            swift_bridgeObjectRelease();
            unint64_t v6 = v54;
            LOWORD(v54) = 105;
            unint64_t v24 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
            sub_1D7860544();
            swift_allocError();
            DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, v6, *((uint64_t *)&v54 + 1), (__int16 *)&v54, 0, v24, 0xD000000000000058, 0x80000001D7ACCE30, v25, 0xD00000000000001CLL, 0x80000001D7ACD340, 283);
LABEL_29:
            swift_willThrow();
            break;
          case 2:
            uint64_t v23 = *(void *)(a3 + 16);
            uint64_t v22 = *(void *)(a3 + 24);
            BOOL v18 = __OFSUB__(v22, v23);
            unint64_t v21 = (__CFError *)(v22 - v23);
            if (!v18) {
              goto LABEL_14;
            }
            goto LABEL_35;
          case 3:
            goto LABEL_14;
          default:
LABEL_40:
            JUMPOUT(0);
        }
      }
      return v6;
    case 2uLL:
      uint64_t v17 = *(void *)(a3 + 16);
      uint64_t v16 = *(void *)(a3 + 24);
      BOOL v18 = __OFSUB__(v16, v17);
      uint64_t v15 = v16 - v17;
      if (!v18) {
        goto LABEL_6;
      }
      goto LABEL_33;
    case 3uLL:
      goto LABEL_9;
    default:
      uint64_t v15 = BYTE6(a4);
      goto LABEL_6;
  }
}

uint64_t DIPECIESSessionECV3.deinit()
{
  sub_1D78607E8(*(void *)(v0 + 32), *(void *)(v0 + 40));
  return v0;
}

uint64_t DIPECIESSessionECV3.__deallocating_deinit()
{
  sub_1D78607E8(*(void *)(v0 + 32), *(void *)(v0 + 40));
  return swift_deallocClassInstance();
}

uint64_t sub_1D7A796DC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 104))();
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t sub_1D7A79718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1D7A79770(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void))sub_1D7A78294);
}

uint64_t sub_1D7A79744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1D7A79770(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void))sub_1D7A7824C);
}

uint64_t sub_1D7A79770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void))
{
  uint64_t result = a7();
  if (v7) {
    return v9;
  }
  return result;
}

CFDictionaryRef sub_1D7A797AC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1D7A7BD64(a3, a4, a5, a6, a7);
}

uint64_t sub_1D7A797E4()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 32);
  sub_1D7860790(v2, *(void *)(v1 + 40));
  return v2;
}

__SecKey *sub_1D7A7982C(char *a1, SecKeyRef key)
{
  uint64_t v3 = v2;
  uint64_t v4 = key;
  error[1] = *(CFErrorRef *)MEMORY[0x1E4F143B8];
  char v5 = *a1;
  error[0] = 0;
  CFDataRef v6 = SecKeyCopyExternalRepresentation(key, error);
  if (v6)
  {
    CFDataRef v7 = v6;
    uint64_t v8 = sub_1D7A9B028();
    unint64_t v10 = v9;

    uint64_t v11 = v3[4];
    unint64_t v12 = v3[5];
    uint64_t v13 = v11;
    unint64_t v14 = v12;
    uint64_t v15 = v8;
    unint64_t v16 = v10;
    if ((v5 & 1) == 0)
    {
      uint64_t v13 = v8;
      unint64_t v14 = v10;
      uint64_t v15 = v3[4];
      unint64_t v16 = v3[5];
    }
    long long v20 = xmmword_1D7AA0AB0;
    sub_1D7860790(v11, v12);
    sub_1D7860790(v8, v10);
    sub_1D7A9B048();
    sub_1D7A9B048();
    uint64_t v17 = (__SecKey *)v3[2];
    CFStringRef v18 = (const __CFString *)*MEMORY[0x1E4F3BA10];
    sub_1D7860790(0, 0xC000000000000000);
    uint64_t v4 = (__SecKey *)sub_1D7A87AAC(v17, v4, v18, 32, 0, 0xC000000000000000);
    sub_1D78607E8(0, 0xC000000000000000);
    sub_1D78607E8(v15, v16);
    sub_1D78607E8(v13, v14);
    sub_1D78607E8(v8, v10);
    sub_1D78607E8(0, 0xC000000000000000);
  }
  else
  {
    LOWORD(v20) = 152;
    errorFromCFError(_:_:_:)(error[0], 0xD000000000000029, 0x80000001D7ACD2D0, (__int16 *)&v20);
    swift_willThrow();
  }
  return v4;
}

uint64_t DIPECIESSessionECV3SH.__allocating_init(_:)(void *a1)
{
  uint64_t v2 = swift_allocObject();
  DIPECIESSessionECV3.init(_:)(a1);
  return v2;
}

uint64_t DIPECIESSessionECV3SH.init(_:)(void *a1)
{
  DIPECIESSessionECV3.init(_:)(a1);
  return v1;
}

uint64_t DIPECIESSessionECV3SH.deinit()
{
  sub_1D78607E8(*(void *)(v0 + 32), *(void *)(v0 + 40));
  return v0;
}

uint64_t DIPECIESSessionECV3SH.__deallocating_deinit()
{
  sub_1D78607E8(*(void *)(v0 + 32), *(void *)(v0 + 40));
  return swift_deallocClassInstance();
}

uint64_t sub_1D7A79AEC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v4 = *a2;
  swift_beginAccess();
  uint64_t v5 = *(void *)(v4 + 16);
  unint64_t v6 = *(void *)(v4 + 24);
  *(void *)(v4 + 16) = v2;
  *(void *)(v4 + 24) = v3;
  sub_1D786E9D8(v2, v3);
  return sub_1D7871BDC(v5, v6);
}

uint64_t sub_1D7A79B5C()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 16);
  sub_1D786E9D8(v1, *(void *)(v0 + 24));
  return v1;
}

uint64_t sub_1D7A79BAC(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t v5 = *(void *)(v2 + 16);
  unint64_t v6 = *(void *)(v2 + 24);
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return sub_1D7871BDC(v5, v6);
}

uint64_t (*sub_1D7A79C00())()
{
  return j__swift_endAccess;
}

void sub_1D7A79C54(void **a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  uint64_t v4 = *(void **)(v3 + 32);
  *(void *)(v3 + 32) = v2;
  id v5 = v2;
}

void *sub_1D7A79CAC()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 32);
  id v2 = v1;
  return v1;
}

void sub_1D7A79CF0(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void **)(v1 + 32);
  *(void *)(v1 + 32) = a1;
}

uint64_t (*sub_1D7A79D38())()
{
  return j_j__swift_endAccess;
}

uint64_t DIPECIESSessionV3SecKey.init(_:)(void *a1)
{
  error[7] = *(CFErrorRef *)MEMORY[0x1E4F143B8];
  *(_OWORD *)(v1 + 16) = xmmword_1D7AA0AC0;
  *(void *)(v1 + 32) = 0;
  uint64_t v3 = (void **)(v1 + 32);
  swift_beginAccess();
  uint64_t v4 = *(void *)(v1 + 16);
  unint64_t v5 = *(void *)(v1 + 24);
  *(_OWORD *)(v1 + 16) = xmmword_1D7AA0AC0;
  sub_1D7871BDC(v4, v5);
  swift_beginAccess();
  unint64_t v6 = *(void **)(v1 + 32);
  *(void *)(v1 + 32) = 0;

  if (a1)
  {
    CFDataRef v7 = *v3;
    *uint64_t v3 = a1;
    uint64_t v8 = a1;

    error[0] = 0;
    unint64_t v9 = SecKeyCopyPublicKey(v8);
    if (v9)
    {
      unint64_t v10 = v9;
      CFDataRef v11 = SecKeyCopyExternalRepresentation(v9, error);
      if (v11)
      {
        CFDataRef v12 = v11;
        uint64_t v13 = sub_1D7A9B028();
        uint64_t v15 = v14;

        uint64_t v16 = *(void *)(v1 + 16);
        unint64_t v17 = *(void *)(v1 + 24);
        *(void *)(v1 + 16) = v13;
        *(void *)(v1 + 24) = v15;
        sub_1D7871BDC(v16, v17);
        return v1;
      }
      swift_release();
      __int16 v21 = 242;
      errorFromCFError(_:_:_:)(error[0], 0xD00000000000003FLL, 0x80000001D7ACD030, &v21);
      swift_willThrow();
    }
    else
    {
      swift_release();
      __int16 v21 = 242;
      unint64_t v18 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000003BLL, 0x80000001D7ACCFF0, &v21, 0, v18, 0xD000000000000058, 0x80000001D7ACCE30, v19, 0x293A5F2874696E69, 0xE800000000000000, 347);
      swift_willThrow();
    }
  }
  return v1;
}

uint64_t sub_1D7A79FE4(uint64_t a1, uint64_t a2, __SecKey *a3, uint64_t a4)
{
  error[1] = *(CFErrorRef *)MEMORY[0x1E4F143B8];
  if (!a4
    || (uint64_t v5 = v4, !*(void *)(a4 + 16))
    || (unint64_t v8 = sub_1D7A19088(0), (v9 & 1) == 0)
    || !*(void *)(a4 + 16)
    || (unint64_t v10 = (uint64_t *)(*(void *)(a4 + 56) + 16 * v8),
        uint64_t v12 = *v10,
        unint64_t v11 = v10[1],
        unint64_t v13 = sub_1D7A19088(1),
        (v14 & 1) == 0))
  {
    LOWORD(v75) = 105;
    unint64_t v18 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000053, 0x80000001D7ACCF30, (__int16 *)&v75, 0, v18, 0xD000000000000058, 0x80000001D7ACCE30, v19, 0x2874707972636E65, 0xEF293A5F3A5F3A5FLL, 358);
    return swift_willThrow();
  }
  uint64_t v15 = (uint64_t *)(*(void *)(a4 + 56) + 16 * v13);
  unint64_t v16 = v15[1];
  uint64_t v74 = *v15;
  switch(v11 >> 62)
  {
    case 1uLL:
      LODWORD(v17) = HIDWORD(v12) - v12;
      if (__OFSUB__(HIDWORD(v12), v12))
      {
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
      }
      uint64_t v17 = (int)v17;
LABEL_12:
      if (v17 != 65)
      {
LABEL_15:
        sub_1D7860790(v12, v11);
        uint64_t v25 = v74;
        unint64_t v26 = v16;
        sub_1D7860790(v74, v16);
        sub_1D7A9CC48();
        swift_bridgeObjectRelease();
        unint64_t v75 = 0xD00000000000002FLL;
        unint64_t v76 = 0x80000001D7ACD070;
        uint64_t v27 = 0;
        switch(v11 >> 62)
        {
          case 0uLL:
            uint64_t v27 = BYTE6(v11);
            goto LABEL_20;
          case 1uLL:
            LODWORD(v27) = HIDWORD(v12) - v12;
            if (__OFSUB__(HIDWORD(v12), v12)) {
              goto LABEL_54;
            }
            uint64_t v27 = (int)v27;
LABEL_20:
            *(void *)&long long v77 = v27;
            sub_1D7A9D258();
            sub_1D7A9C128();
            swift_bridgeObjectRelease();
            uint64_t v30 = v75;
            uint64_t v31 = v76;
            LOWORD(v75) = 105;
            unint64_t v32 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
            sub_1D7860544();
            swift_allocError();
            uint64_t v34 = 361;
            break;
          case 2uLL:
            uint64_t v29 = *(void *)(v12 + 16);
            uint64_t v28 = *(void *)(v12 + 24);
            BOOL v23 = __OFSUB__(v28, v29);
            uint64_t v27 = v28 - v29;
            if (!v23) {
              goto LABEL_20;
            }
            goto LABEL_55;
          case 3uLL:
            goto LABEL_20;
          default:
LABEL_65:
            JUMPOUT(0);
        }
        goto LABEL_35;
      }
      switch(v16 >> 62)
      {
        case 1uLL:
          LODWORD(v24) = HIDWORD(v74) - v74;
          if (__OFSUB__(HIDWORD(v74), v74)) {
            goto LABEL_56;
          }
          uint64_t v24 = (int)v24;
LABEL_24:
          if (v24 != 65)
          {
LABEL_29:
            unint64_t v75 = 0;
            unint64_t v76 = 0xE000000000000000;
            sub_1D7860790(v12, v11);
            uint64_t v25 = v74;
            unint64_t v26 = v16;
            sub_1D7860790(v74, v16);
            sub_1D7A9CC48();
            sub_1D7A9C128();
            uint64_t v53 = 0;
            switch(v16 >> 62)
            {
              case 0uLL:
                uint64_t v53 = BYTE6(v16);
                goto LABEL_34;
              case 1uLL:
                LODWORD(v53) = HIDWORD(v74) - v74;
                if (__OFSUB__(HIDWORD(v74), v74)) {
                  goto LABEL_58;
                }
                uint64_t v53 = (int)v53;
LABEL_34:
                *(void *)&long long v77 = v53;
                sub_1D7A9D258();
                sub_1D7A9C128();
                swift_bridgeObjectRelease();
                uint64_t v30 = v75;
                uint64_t v31 = v76;
                LOWORD(v75) = 105;
                unint64_t v32 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
                sub_1D7860544();
                swift_allocError();
                uint64_t v34 = 364;
                break;
              case 2uLL:
                uint64_t v55 = *(void *)(v74 + 16);
                uint64_t v54 = *(void *)(v74 + 24);
                BOOL v23 = __OFSUB__(v54, v55);
                uint64_t v53 = v54 - v55;
                if (!v23) {
                  goto LABEL_34;
                }
                goto LABEL_59;
              case 3uLL:
                goto LABEL_34;
              default:
                goto LABEL_65;
            }
LABEL_35:
            DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, v30, v31, (__int16 *)&v75, 0, v32, 0xD000000000000058, 0x80000001D7ACCE30, v33, 0x2874707972636E65, 0xEF293A5F3A5F3A5FLL, v34);
            swift_willThrow();
            sub_1D78607E8(v25, v26);
            uint64_t v56 = v12;
            unint64_t v57 = v11;
            return sub_1D78607E8(v56, v57);
          }
          error[0] = 0;
          sub_1D7860790(v12, v11);
          sub_1D7860790(v74, v16);
          CFDataRef v37 = SecKeyCopyExternalRepresentation(a3, error);
          unint64_t v73 = v16;
          if (!v37)
          {
            LOWORD(v75) = 242;
            errorFromCFError(_:_:_:)(error[0], 0xD000000000000049, 0x80000001D7ACD0E0, (__int16 *)&v75);
            swift_willThrow();
            sub_1D78607E8(v12, v11);
            uint64_t v56 = v74;
            unint64_t v57 = v16;
            return sub_1D78607E8(v56, v57);
          }
          CFDataRef v38 = v37;
          uint64_t v72 = sub_1D7A9B028();
          unint64_t v40 = v39;

          long long v77 = xmmword_1D7AA0AB0;
          sub_1D7A9B048();
          unint64_t v71 = v40;
          sub_1D7A9B048();
          sub_1D7A9B048();
          __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF82D0);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_1D7AA08E0;
          long long v42 = (void *)*MEMORY[0x1E4F3BB50];
          long long v43 = v77;
          *(void *)(inited + 64) = MEMORY[0x1E4F277C0];
          *(void *)(inited + 32) = v42;
          *(_OWORD *)(inited + 40) = v43;
          id v44 = v42;
          sub_1D7860790(v43, *((unint64_t *)&v43 + 1));
          sub_1D785FFD4(inited);
          uint64_t v45 = (void *)sub_1D7A9AFF8();
          sub_1D7A7CB50();
          sub_1D7A7CB90();
          unint64_t v46 = (void *)sub_1D7A9BE98();
          swift_bridgeObjectRelease();
          EncryptedDataWithParameters = (void *)DIPSecKeyCreateEncryptedDataWithParameters();

          if (!EncryptedDataWithParameters)
          {
            LOWORD(v75) = 152;
            errorFromCFError(_:_:_:)(error[0], 0xD00000000000003DLL, 0x80000001D7ACD130, (__int16 *)&v75);
            swift_willThrow();
            sub_1D78607E8(v12, v11);
            sub_1D78607E8(v74, v73);
            sub_1D78607E8(v72, v71);
            unint64_t v57 = *((void *)&v43 + 1);
            uint64_t v56 = v43;
            return sub_1D78607E8(v56, v57);
          }
          uint64_t v48 = sub_1D7A9B028();
          unint64_t v50 = v49;

          unint64_t v51 = v50 >> 62;
          switch(v50 >> 62)
          {
            case 1uLL:
              LODWORD(v52) = HIDWORD(v48) - v48;
              if (__OFSUB__(HIDWORD(v48), v48))
              {
                __break(1u);
LABEL_61:
                __break(1u);
LABEL_62:
                __break(1u);
                goto LABEL_63;
              }
              uint64_t v52 = (int)v52;
LABEL_42:
              if (v52 < 66)
              {
LABEL_47:
                LOWORD(v75) = 152;
                unint64_t v67 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
                sub_1D7860544();
                swift_allocError();
                DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000032, 0x80000001D7ACD170, (__int16 *)&v75, 0, v67, 0xD000000000000058, 0x80000001D7ACCE30, v68, 0x2874707972636E65, 0xEF293A5F3A5F3A5FLL, 384);
                swift_willThrow();
                sub_1D78607E8(v12, v11);
                sub_1D78607E8(v74, v73);
                sub_1D78607E8(v48, v50);
                sub_1D78607E8(v72, v71);
                unint64_t v57 = *((void *)&v77 + 1);
                uint64_t v56 = v77;
                return sub_1D78607E8(v56, v57);
              }
              uint64_t v60 = sub_1D7A9B058();
              uint64_t v62 = v61;
              swift_beginAccess();
              uint64_t v63 = *(void *)(v5 + 16);
              unint64_t v64 = *(void *)(v5 + 24);
              *(void *)(v5 + 16) = v60;
              *(void *)(v5 + 24) = v62;
              sub_1D7871BDC(v63, v64);
              if (v51)
              {
                if (v51 == 1)
                {
                  uint64_t v65 = v74;
                  if (!__OFSUB__(HIDWORD(v48), v48))
                  {
                    uint64_t v66 = HIDWORD(v48) - (int)v48;
                    goto LABEL_50;
                  }
                  goto LABEL_62;
                }
                uint64_t v70 = *(void *)(v48 + 16);
                uint64_t v69 = *(void *)(v48 + 24);
                uint64_t v66 = v69 - v70;
                uint64_t v65 = v74;
                if (__OFSUB__(v69, v70))
                {
LABEL_63:
                  __break(1u);
                  goto LABEL_64;
                }
              }
              else
              {
                uint64_t v66 = BYTE6(v50);
                uint64_t v65 = v74;
              }
LABEL_50:
              if (v66 < 65)
              {
LABEL_64:
                __break(1u);
                JUMPOUT(0x1D7A7A988);
              }
              sub_1D7A9B058();
              sub_1D78607E8(v12, v11);
              sub_1D78607E8(v65, v43);
              sub_1D78607E8(v48, v50);
              sub_1D78607E8(v72, v71);
              sub_1D78607E8(v43, *((unint64_t *)&v43 + 1));
              return 0;
            case 2uLL:
              uint64_t v59 = *(void *)(v48 + 16);
              uint64_t v58 = *(void *)(v48 + 24);
              BOOL v23 = __OFSUB__(v58, v59);
              uint64_t v52 = v58 - v59;
              if (!v23) {
                goto LABEL_42;
              }
              goto LABEL_61;
            case 3uLL:
              goto LABEL_47;
            default:
              uint64_t v52 = BYTE6(v50);
              goto LABEL_42;
          }
        case 2uLL:
          uint64_t v36 = *(void *)(v74 + 16);
          uint64_t v35 = *(void *)(v74 + 24);
          BOOL v23 = __OFSUB__(v35, v36);
          uint64_t v24 = v35 - v36;
          if (!v23) {
            goto LABEL_24;
          }
          goto LABEL_57;
        case 3uLL:
          goto LABEL_29;
        default:
          uint64_t v24 = BYTE6(v16);
          goto LABEL_24;
      }
    case 2uLL:
      uint64_t v22 = *(void *)(v12 + 16);
      uint64_t v21 = *(void *)(v12 + 24);
      BOOL v23 = __OFSUB__(v21, v22);
      uint64_t v17 = v21 - v22;
      if (!v23) {
        goto LABEL_12;
      }
      goto LABEL_53;
    case 3uLL:
      goto LABEL_15;
    default:
      uint64_t v17 = BYTE6(v11);
      goto LABEL_12;
  }
}

unint64_t sub_1D7A7A9D8(uint64_t a1, uint64_t a2, __SecCertificate *a3, uint64_t a4)
{
  return sub_1D7A7AA20(a1, a2, a3, a4, sub_1D7A79FE4, 0xD000000000000032, 0x80000001D7ACD1B0, 392);
}

unint64_t sub_1D7A7AA20(uint64_t a1, uint64_t a2, SecCertificateRef certificate, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, SecKeyRef, uint64_t), uint64_t a6, uint64_t a7, uint64_t a8)
{
  SecKeyRef v14 = SecCertificateCopyKey(certificate);
  if (v14)
  {
    SecKeyRef v15 = v14;
    unint64_t v16 = a5(a1, a2, v14, a4);
  }
  else
  {
    __int16 v20 = 152;
    unint64_t v16 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, a6, a7, &v20, 0, v16, 0xD000000000000058, 0x80000001D7ACCE30, v17, 0x2874707972636E65, 0xEF293A5F3A5F3A5FLL, a8);
    swift_willThrow();
  }
  return v16;
}

id sub_1D7A7AB80(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1D7A7C06C(a3, a4, a5, a6, a7);
}

uint64_t sub_1D7A7ABAC()
{
  uint64_t v1 = sub_1D7A7B518();
  uint64_t v3 = v1;
  if (!v0) {
    sub_1D7860790(v1, v2);
  }
  return v3;
}

uint64_t DIPECIESSessionV3SecKey.deinit()
{
  sub_1D7871BDC(*(void *)(v0 + 16), *(void *)(v0 + 24));

  return v0;
}

uint64_t DIPECIESSessionV3SecKey.__deallocating_deinit()
{
  sub_1D7871BDC(*(void *)(v0 + 16), *(void *)(v0 + 24));

  return swift_deallocClassInstance();
}

uint64_t sub_1D7A7AC64@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for DIPECIESSessionV3SecKey();
  uint64_t v5 = swift_allocObject();
  uint64_t result = DIPECIESSessionV3SecKey.init(_:)(a1);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_1D7A7ACBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1D7A79770(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void))sub_1D7A79FE4);
}

uint64_t sub_1D7A7ACE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1D7A79770(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void))sub_1D7A7A9D8);
}

id sub_1D7A7AD14(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1D7A7C06C(a3, a4, a5, a6, a7);
}

uint64_t sub_1D7A7AD4C()
{
  uint64_t v1 = sub_1D7A7B518();
  uint64_t v3 = v1;
  if (!v0) {
    sub_1D7860790(v1, v2);
  }
  return v3;
}

uint64_t sub_1D7A7ADA0(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1D7A9AC98();
  if (!result || (uint64_t result = sub_1D7A9ACB8(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      sub_1D7A9ACA8();
      return sub_1D7A9AFD8();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1D7A7AE34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, void *a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t result = sub_1D7A9AC98();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = sub_1D7A9ACB8();
    if (__OFSUB__(a1, result)) {
      goto LABEL_7;
    }
    v11 += a1 - result;
  }
  if (!__OFSUB__(a2, a1))
  {
    sub_1D7A9ACA8();
    sub_1D7A78D84(v11, a3, a4, a5);

    return swift_release();
  }
  __break(1u);
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1D7A7AEF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, void *a4@<X4>, void *a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t result = sub_1D7A9AC98();
  uint64_t v13 = result;
  if (result)
  {
    uint64_t result = sub_1D7A9ACB8();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v13 += a1 - result;
  }
  BOOL v14 = __OFSUB__(a2, a1);
  uint64_t v15 = a2 - a1;
  if (v14)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v16 = sub_1D7A9ACA8();
  if (v16 >= v15) {
    uint64_t v17 = v15;
  }
  else {
    uint64_t v17 = v16;
  }
  uint64_t v18 = v13 + v17;
  if (v13) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = 0;
  }
  sub_1D7A78AA4(v13, v19, a3, a4, a5, a6);

  return swift_release();
}

uint64_t sub_1D7A7AFC8(uint64_t a1, unint64_t a2)
{
  v10[5] = *MEMORY[0x1E4F143B8];
  v10[3] = MEMORY[0x1E4F277C0];
  v10[4] = MEMORY[0x1E4F277B0];
  v10[0] = a1;
  v10[1] = a2;
  uint64_t v4 = __swift_project_boxed_opaque_existential_1(v10, MEMORY[0x1E4F277C0]);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  switch(v6 >> 62)
  {
    case 1uLL:
      if (v5 >> 32 < (int)v5) {
        __break(1u);
      }
      sub_1D7860790(a1, a2);
      sub_1D7860790(v5, v6);
      sub_1D7A7ADA0((int)v5, v5 >> 32);
      sub_1D78607E8(v5, v6);
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(v5 + 16);
      uint64_t v8 = *(void *)(v5 + 24);
      sub_1D7860790(a1, a2);
      swift_retain();
      swift_retain();
      sub_1D7A7ADA0(v7, v8);
      swift_release();
      swift_release();
      break;
    default:
      sub_1D7860790(a1, a2);
      sub_1D7A9AFD8();
      break;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
}

uint64_t sub_1D7A7B1EC(unsigned char *__src, unsigned char *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t sub_1D7A7B2B0()
{
  __int16 v3 = 106;
  unint64_t v0 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
  sub_1D7860544();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000003DLL, 0x80000001D7ACD700, &v3, 0, v0, 0xD000000000000058, 0x80000001D7ACCE30, v1, 0x2874707972636E65, 0xEF293A5F3A5F3A5FLL, 74);
  return swift_willThrow();
}

uint64_t sub_1D7A7B394(unsigned char *__src, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 <= 14) {
    return sub_1D7A7B1EC(__src, &__src[a2]);
  }
  sub_1D7A9ACD8();
  swift_allocObject();
  sub_1D7A9AC88();
  if ((unint64_t)a2 < 0x7FFFFFFF) {
    return a2 << 32;
  }
  sub_1D7A9AFC8();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t sub_1D7A7B448()
{
  __int16 v3 = 106;
  unint64_t v0 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
  sub_1D7860544();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000002FLL, 0x80000001D7ACD630, &v3, 0, v0, 0xD000000000000058, 0x80000001D7ACCE30, v1, 0xD000000000000013, 0x80000001D7ACD3D0, 101);
  return swift_willThrow();
}

uint64_t sub_1D7A7B518()
{
  swift_beginAccess();
  if (*(void *)(v0 + 24) >> 60 != 15) {
    return *(void *)(v0 + 16);
  }
  __int16 v4 = 104;
  unint64_t v1 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
  sub_1D7860544();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000020, 0x80000001D7ACD3A0, &v4, 0, v1, 0xD000000000000058, 0x80000001D7ACCE30, v2, 0xD000000000000013, 0x80000001D7ACD3D0, 429);
  return swift_willThrow();
}

uint64_t sub_1D7A7B624()
{
  __int16 v3 = 106;
  unint64_t v0 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
  sub_1D7860544();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000024, 0x80000001D7ACD660, &v3, 0, v0, 0xD000000000000058, 0x80000001D7ACCE30, v1, 0xD000000000000011, 0x80000001D7ACD410, 97);
  return swift_willThrow();
}

void sub_1D7A7B6F4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v46[2] = *MEMORY[0x1E4F143B8];
  if (a4
    && (uint64_t v6 = v4, *(void *)(a4 + 16))
    && (unint64_t v11 = sub_1D7A19088(0), (v12 & 1) != 0)
    && *(void *)(a4 + 16)
    && (uint64_t v13 = (uint64_t *)(*(void *)(a4 + 56) + 16 * v11),
        uint64_t v14 = *v13,
        unint64_t v15 = v13[1],
        unint64_t v16 = sub_1D7A19088(1),
        (v17 & 1) != 0))
  {
    uint64_t v18 = (uint64_t *)(*(void *)(a4 + 56) + 16 * v16);
    uint64_t v19 = *v18;
    unint64_t v43 = v18[1];
    uint64_t v20 = 0;
    switch(a2 >> 62)
    {
      case 1uLL:
        LODWORD(v20) = HIDWORD(a1) - a1;
        if (__OFSUB__(HIDWORD(a1), a1)) {
          goto LABEL_27;
        }
        uint64_t v20 = (int)v20;
LABEL_12:
        uint64_t v44 = v14;
        uint64_t v26 = v20 - 16;
        if (__OFSUB__(v20, 16))
        {
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
        }
        id v27 = objc_allocWithZone(MEMORY[0x1E4F1CA58]);
        sub_1D7860790(v44, v15);
        sub_1D7860790(v19, v43);
        id v28 = objc_msgSend(v27, sel_initWithLength_, v26);
        if (!v28)
        {
          LOWORD(v46[0]) = 0;
          unint64_t v32 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
          sub_1D7860544();
          swift_allocError();
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000029, 0x80000001D7ACD560, (__int16 *)v46, 0, v32, 0xD000000000000058, 0x80000001D7ACCE30, v33, 0xD000000000000011, 0x80000001D7ACD410, 250);
          swift_willThrow();
          sub_1D78607E8(v19, v43);
          uint64_t v31 = v44;
          goto LABEL_17;
        }
        uint64_t v29 = v28;
        LOBYTE(v46[0]) = 1;
        uint64_t v30 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, unint64_t, uint64_t, unint64_t))(*(void *)v6 + 152))(v46, a3, v44, v15, v19, v43);
        if (v5)
        {

          sub_1D78607E8(v19, v43);
          uint64_t v31 = v44;
LABEL_17:
          sub_1D78607E8(v31, v15);
          return;
        }
        uint64_t v42 = v19;
        uint64_t v34 = v30;
        switch(a2 >> 62)
        {
          case 1uLL:
            if (a1 >> 32 < (int)a1) {
              goto LABEL_29;
            }
            swift_retain();
            id v36 = v29;
            sub_1D7860790(a1, a2);
            sub_1D7A7AE34((int)a1, a1 >> 32, v34, v36, v46);
            sub_1D78607E8(a1, a2);
            sub_1D78607E8(v44, v15);
            uint64_t v41 = v19;
LABEL_25:
            sub_1D78607E8(v41, v43);

            swift_release();
            break;
          case 2uLL:
            uint64_t v37 = *(void *)(a1 + 16);
            uint64_t v38 = *(void *)(a1 + 24);
            swift_retain();
            id v36 = v29;
            swift_retain();
            swift_retain();
            sub_1D7A7AE34(v37, v38, v34, v36, v46);
            swift_release();
            swift_release();
            sub_1D78607E8(v44, v15);
            uint64_t v41 = v42;
            goto LABEL_25;
          case 3uLL:
            memset(v45, 0, 14);
            swift_retain();
            id v35 = v29;
            sub_1D7A78D84((uint64_t)v45, v34, v35, v46);
            sub_1D78607E8(v44, v15);
            uint64_t v39 = v19;
            unint64_t v40 = v43;
            goto LABEL_24;
          default:
            v45[0] = a1;
            LOWORD(v45[1]) = a2;
            BYTE2(v45[1]) = BYTE2(a2);
            BYTE3(v45[1]) = BYTE3(a2);
            BYTE4(v45[1]) = BYTE4(a2);
            BYTE5(v45[1]) = BYTE5(a2);
            swift_retain();
            id v35 = v29;
            sub_1D7A78D84((uint64_t)v45, v34, v35, v46);
            sub_1D78607E8(v44, v15);
            uint64_t v39 = v19;
            unint64_t v40 = v43;
LABEL_24:
            sub_1D78607E8(v39, v40);

            swift_release_n();
            break;
        }
        break;
      case 2uLL:
        uint64_t v24 = *(void *)(a1 + 16);
        uint64_t v23 = *(void *)(a1 + 24);
        BOOL v25 = __OFSUB__(v23, v24);
        uint64_t v20 = v23 - v24;
        if (!v25) {
          goto LABEL_12;
        }
        goto LABEL_28;
      case 3uLL:
        goto LABEL_12;
      default:
        uint64_t v20 = BYTE6(a2);
        goto LABEL_12;
    }
  }
  else
  {
    LOWORD(v46[0]) = 105;
    unint64_t v21 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000053, 0x80000001D7ACCF30, (__int16 *)v46, 0, v21, 0xD000000000000058, 0x80000001D7ACCE30, v22, 0xD000000000000011, 0x80000001D7ACD410, 247);
    swift_willThrow();
  }
}

CFDictionaryRef sub_1D7A7BD64(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFDictionaryRef v6 = v5;
  error[1] = *(CFErrorRef *)MEMORY[0x1E4F143B8];
  uint64_t v10 = sub_1D7A9AFB8();
  if (v11 >> 60 == 15)
  {
    LOWORD(error[0]) = 119;
    unint64_t v12 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000030, 0x80000001D7ACD430, (__int16 *)error, 0, v12, 0xD000000000000058, 0x80000001D7ACCE30, v13, 0xD000000000000011, 0x80000001D7ACD410, 231);
    swift_willThrow();
  }
  else
  {
    uint64_t v14 = v10;
    unint64_t v15 = v11;
    unint64_t v35 = a2;
    uint64_t v36 = a5;
    error[0] = 0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF82D0);
    uint64_t inited = swift_initStackObject();
    char v17 = (void **)MEMORY[0x1E4F3B718];
    *(_OWORD *)(inited + 16) = xmmword_1D7AA4E80;
    uint64_t v18 = *v17;
    *(void *)(inited + 32) = *v17;
    uint64_t v19 = (void *)*MEMORY[0x1E4F3B740];
    type metadata accessor for CFString(0);
    uint64_t v20 = (void **)MEMORY[0x1E4F3B708];
    *(void *)(inited + 40) = v19;
    unint64_t v21 = *v20;
    *(void *)(inited + 64) = v22;
    *(void *)(inited + 72) = v21;
    uint64_t v23 = MEMORY[0x1E4FBB550];
    *(void *)(inited + 80) = 256;
    uint64_t v24 = (void *)*MEMORY[0x1E4F3B6D8];
    *(void *)(inited + 104) = v23;
    *(void *)(inited + 112) = v24;
    BOOL v25 = (void *)*MEMORY[0x1E4F3B6F0];
    *(void *)(inited + 144) = v22;
    *(void *)(inited + 120) = v25;
    id v26 = v18;
    id v27 = v19;
    id v28 = v21;
    id v29 = v24;
    id v30 = v25;
    sub_1D785FFD4(inited);
    CFDataRef v31 = (const __CFData *)sub_1D7A9AFF8();
    sub_1D7A7CB50();
    sub_1D7A7CB90();
    CFDictionaryRef v6 = (const __CFDictionary *)sub_1D7A9BE98();
    swift_bridgeObjectRelease();
    SecKeyRef v32 = SecKeyCreateWithData(v31, v6, error);

    if (v32)
    {
      sub_1D7A7B6F4(a1, v35, (uint64_t)v32, v36);
      CFDictionaryRef v6 = v33;
      sub_1D7871BDC(v14, v15);
    }
    else
    {
      __int16 v37 = 152;
      errorFromCFError(_:_:_:)(error[0], 0xD000000000000040, 0x80000001D7ACD510, &v37);
      swift_willThrow();
      sub_1D7871BDC(v14, v15);
    }
  }
  return v6;
}

id sub_1D7A7C06C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  swift_beginAccess();
  uint64_t v10 = (void *)v5[4];
  if (v10)
  {
    id v6 = v10;
    uint64_t v11 = sub_1D7A9AFB8();
    if (v12 >> 60 == 15)
    {
      v52[0] = 119;
      unint64_t v13 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000030, 0x80000001D7ACD430, v52, 0, v13, 0xD000000000000058, 0x80000001D7ACCE30, v14, 0xD000000000000011, 0x80000001D7ACD410, 402);
      swift_willThrow();
LABEL_16:

      return v6;
    }
    uint64_t v17 = v11;
    unint64_t v18 = v12;
    swift_beginAccess();
    unint64_t v19 = v5[3];
    if (v19 >> 60 == 15)
    {
      LOWORD(v51) = 105;
      unint64_t v20 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000058, 0x80000001D7ACD470, (__int16 *)&v51, 0, v20, 0xD000000000000058, 0x80000001D7ACCE30, v21, 0xD000000000000011, 0x80000001D7ACD410, 405);
      swift_willThrow();
      uint64_t v22 = v17;
LABEL_15:
      sub_1D7871BDC(v22, v18);
      goto LABEL_16;
    }
    uint64_t v47 = v17;
    uint64_t v23 = v5[2];
    if (!a5) {
      goto LABEL_14;
    }
    if (!*(void *)(a5 + 16)) {
      goto LABEL_14;
    }
    uint64_t v24 = v5[2];
    unint64_t v25 = sub_1D7A19088(0);
    uint64_t v23 = v24;
    if ((v26 & 1) == 0
      || !*(void *)(a5 + 16)
      || (id v27 = (uint64_t *)(*(void *)(a5 + 56) + 16 * v25),
          uint64_t v44 = *v27,
          unint64_t v45 = v27[1],
          unint64_t v28 = sub_1D7A19088(1),
          uint64_t v23 = v24,
          (v29 & 1) == 0))
    {
LABEL_14:
      LOWORD(v51) = 105;
      uint64_t v39 = v23;
      sub_1D7860790(v23, v19);
      unint64_t v40 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000053, 0x80000001D7ACCF30, (__int16 *)&v51, 0, v40, 0xD000000000000058, 0x80000001D7ACCE30, v41, 0xD000000000000011, 0x80000001D7ACD410, 408);
      swift_willThrow();
      sub_1D7871BDC(v39, v19);
      uint64_t v22 = v47;
      goto LABEL_15;
    }
    id v30 = (uint64_t *)(*(void *)(a5 + 56) + 16 * v28);
    uint64_t v31 = *v30;
    uint64_t v43 = *v30;
    unint64_t v46 = v30[1];
    long long v51 = xmmword_1D7AA0AB0;
    sub_1D786E9D8(v24, v19);
    sub_1D7860790(v44, v45);
    sub_1D7860790(v31, v46);
    sub_1D7A9B048();
    sub_1D7A9B048();
    sub_1D7A9B048();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF82D0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1D7AA08E0;
    CFDictionaryRef v33 = (void *)*MEMORY[0x1E4F3BB50];
    long long v34 = v51;
    *(void *)(inited + 64) = MEMORY[0x1E4F277C0];
    *(void *)(inited + 32) = v33;
    *(_OWORD *)(inited + 40) = v34;
    id v35 = v33;
    sub_1D7860790(v34, *((unint64_t *)&v34 + 1));
    sub_1D785FFD4(inited);
    unint64_t v50 = v18;
    sub_1D786E9D8(v47, v18);
    sub_1D7860790(a1, a2);
    sub_1D7A7AFC8(a1, a2);
    sub_1D78607E8(a1, a2);
    unint64_t v49 = 0;
    id v36 = v6;
    id v6 = (id)sub_1D7A9AFF8();
    sub_1D7A7CB50();
    sub_1D7A7CB90();
    __int16 v37 = (void *)sub_1D7A9BE98();
    swift_bridgeObjectRelease();
    DecryptedDataWithParameters = (void *)SecKeyCreateDecryptedDataWithParameters();

    if (DecryptedDataWithParameters)
    {
      id v6 = (id)sub_1D7A9B028();
      sub_1D78607E8(v44, v45);
      sub_1D78607E8(v47, v18);
      sub_1D78607E8(v43, v46);
      sub_1D7871BDC(v24, v19);
      sub_1D7871BDC(v47, v18);

      sub_1D78607E8(v34, *((unint64_t *)&v34 + 1));
    }
    else
    {
      __int16 v48 = 152;
      errorFromCFError(_:_:_:)(v49, 0xD00000000000003DLL, 0x80000001D7ACD4D0, &v48);
      swift_willThrow();
      sub_1D78607E8(v44, v45);
      sub_1D78607E8(v47, v18);
      sub_1D78607E8(v43, v46);
      sub_1D7871BDC(v24, v19);
      sub_1D7871BDC(v47, v18);

      sub_1D78607E8(v34, *((unint64_t *)&v34 + 1));
    }
  }
  else
  {
    v52[0] = 119;
    unint64_t v15 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000017, 0x80000001D7ACD3F0, v52, 0, v15, 0xD000000000000058, 0x80000001D7ACCE30, v16, 0xD000000000000011, 0x80000001D7ACD410, 399);
    swift_willThrow();
  }
  return v6;
}

void sub_1D7A7C74C(uint64_t a1, uint64_t a2, void *a3)
{
  trust[1] = *(SecTrustRef *)MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)sub_1D7A9BF98();
  CFDictionaryRef v5 = (void *)sub_1D7A9BF98();
  id v6 = (void *)sub_1D7A9BF98();
  ApplePinned = (void *)DIPSecPolicyCreateApplePinned();

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF99C0);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1D7AA97B0;
  *(void *)(v8 + 32) = a3;
  v22[0] = v8;
  sub_1D7A9C338();
  trust[0] = 0;
  type metadata accessor for SecCertificate(0);
  id v9 = a3;
  uint64_t v10 = (void *)sub_1D7A9C2F8();
  swift_bridgeObjectRelease();
  OSStatus v11 = SecTrustCreateWithCertificates(v10, ApplePinned, trust);

  if (v11 || !trust[0])
  {
    v22[0] = 152;
    v22[1] = 0xE000000000000000;
    sub_1D7A9CC48();
    sub_1D7A9C128();
    OSStatus v21 = v11;
    uint64_t v15 = MEMORY[0x1E4FBC150];
    sub_1D7A9D258();
    sub_1D7A9C128();
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF8678);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1D7AA08E0;
    *(unsigned char *)(inited + 32) = 20;
    *(void *)(inited + 64) = v15;
    *(_DWORD *)(inited + 40) = v11;
    unint64_t v17 = sub_1D785EC20(inited);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0, 0xE000000000000000, (__int16 *)v22, 0, v17, 0xD000000000000058, 0x80000001D7ACCE30, v18, 0x2874707972636E65, 0xEF293A5F3A5F3A5FLL, 85);
  }
  else
  {
    v22[0] = 0;
    unint64_t v12 = trust[0];
    unint64_t v13 = (void *)sub_1D7A9AFF8();
    uint64_t v14 = (void *)DIPSecCopyEncryptedToServer();

    if (v14)
    {
      sub_1D7A9B028();

      return;
    }
    LOWORD(v21) = 152;
    unint64_t v19 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000028, 0x80000001D7ACD6D0, (__int16 *)&v21, 0, v19, 0xD000000000000058, 0x80000001D7ACCE30, v20, 0x2874707972636E65, 0xEF293A5F3A5F3A5FLL, 91);
  }
  swift_willThrow();
}

uint64_t type metadata accessor for DIPECIESSessionECV3()
{
  return self;
}

unint64_t sub_1D7A7CB50()
{
  unint64_t result = qword_1EBDF8260;
  if (!qword_1EBDF8260)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EBDF8260);
  }
  return result;
}

unint64_t sub_1D7A7CB90()
{
  unint64_t result = qword_1EBDF8268;
  if (!qword_1EBDF8268)
  {
    sub_1D7A7CB50();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBDF8268);
  }
  return result;
}

unint64_t sub_1D7A7CBEC()
{
  unint64_t result = qword_1EBDF7D10;
  if (!qword_1EBDF7D10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBDF7D10);
  }
  return result;
}

unint64_t sub_1D7A7CC44()
{
  unint64_t result = qword_1EA8478A0;
  if (!qword_1EA8478A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8478A0);
  }
  return result;
}

uint64_t sub_1D7A7CC98@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 16);
  unint64_t v5 = *(void *)(v3 + 24);
  *a2 = v4;
  a2[1] = v5;
  return sub_1D786E9D8(v4, v5);
}

id sub_1D7A7CCE8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  uint64_t v4 = *(void **)(v3 + 32);
  *a2 = v4;
  return v4;
}

ValueMetadata *type metadata accessor for ECIESOption()
{
  return &type metadata for ECIESOption;
}

uint64_t dispatch thunk of DIPECIESSessionProtocol.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of DIPECIESSessionProtocol.encrypt(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 16))();
}

{
  return (*(uint64_t (**)(void))(a6 + 24))();
}

uint64_t dispatch thunk of DIPECIESSessionProtocol.decrypt(_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(uint64_t))(a9 + 32))(a1);
}

uint64_t dispatch thunk of DIPECIESSessionProtocol.getLocalPublicKey()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t type metadata accessor for DIPECIESSessionECV1()
{
  return self;
}

uint64_t method lookup function for DIPECIESSessionECV1(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for DIPECIESSessionECV1);
}

uint64_t dispatch thunk of DIPECIESSessionECV1.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of DIPECIESSessionECV1.encrypt(_:_:_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of DIPECIESSessionECV1.decrypt(_:_:_:_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of DIPECIESSessionECV1.getLocalPublicKey()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t method lookup function for DIPECIESSessionECV3(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for DIPECIESSessionECV3);
}

uint64_t dispatch thunk of DIPECIESSessionECV3.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of DIPECIESSessionECV3.encrypt(_:_:_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of DIPECIESSessionECV3.decrypt(_:_:_:_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of DIPECIESSessionECV3.getLocalPublicKey()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

unsigned char *_s13CoreIDVShared11ECIESOptionOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D7A7D160);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DIPECIESSessionECV3.KDFMode()
{
  return &type metadata for DIPECIESSessionECV3.KDFMode;
}

uint64_t type metadata accessor for DIPECIESSessionECV3SH()
{
  return self;
}

uint64_t type metadata accessor for DIPECIESSessionV3SecKey()
{
  return self;
}

uint64_t method lookup function for DIPECIESSessionV3SecKey(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for DIPECIESSessionV3SecKey);
}

uint64_t dispatch thunk of DIPECIESSessionV3SecKey.ePublicKeyData.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of DIPECIESSessionV3SecKey.ePublicKeyData.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of DIPECIESSessionV3SecKey.ePublicKeyData.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of DIPECIESSessionV3SecKey.ePrivateKey.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of DIPECIESSessionV3SecKey.ePrivateKey.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of DIPECIESSessionV3SecKey.ePrivateKey.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of DIPECIESSessionV3SecKey.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of DIPECIESSessionV3SecKey.encrypt(_:_:_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of DIPECIESSessionV3SecKey.decrypt(_:_:_:_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of DIPECIESSessionV3SecKey.getLocalPublicKey()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t static IdentityProofingFeatureEnablementConfig.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t IdentityProofingFeatureEnablementConfig.isFedStatsOptinEnabled.getter()
{
  return *(unsigned __int8 *)(v0
                            + OBJC_IVAR____TtC13CoreIDVShared39IdentityProofingFeatureEnablementConfig_isFedStatsOptinEnabled);
}

id IdentityProofingFeatureEnablementConfig.__allocating_init(isFedStatsOptinEnabled:)(char a1)
{
  int v3 = objc_allocWithZone(v1);
  v3[OBJC_IVAR____TtC13CoreIDVShared39IdentityProofingFeatureEnablementConfig_isFedStatsOptinEnabled] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, sel_init);
}

id IdentityProofingFeatureEnablementConfig.init(isFedStatsOptinEnabled:)(char a1)
{
  ObjectType = (objc_class *)swift_getObjectType();
  v1[OBJC_IVAR____TtC13CoreIDVShared39IdentityProofingFeatureEnablementConfig_isFedStatsOptinEnabled] = a1;
  v5.receiver = v1;
  v5.super_class = ObjectType;
  return objc_msgSendSuper2(&v5, sel_init);
}

id IdentityProofingFeatureEnablementConfig.__allocating_init(coder:)(void *a1)
{
  int v3 = objc_allocWithZone(v1);
  unsigned int v4 = (void *)sub_1D7A9BF98();
  unsigned __int8 v5 = objc_msgSend(a1, sel_decodeBoolForKey_, v4);

  v3[OBJC_IVAR____TtC13CoreIDVShared39IdentityProofingFeatureEnablementConfig_isFedStatsOptinEnabled] = v5;
  v8.receiver = v3;
  v8.super_class = v1;
  id v6 = objc_msgSendSuper2(&v8, sel_init);

  return v6;
}

id IdentityProofingFeatureEnablementConfig.init(coder:)(void *a1)
{
  ObjectType = (objc_class *)swift_getObjectType();
  unsigned int v4 = v1;
  unsigned __int8 v5 = (void *)sub_1D7A9BF98();
  unsigned __int8 v6 = objc_msgSend(a1, sel_decodeBoolForKey_, v5);

  v4[OBJC_IVAR____TtC13CoreIDVShared39IdentityProofingFeatureEnablementConfig_isFedStatsOptinEnabled] = v6;
  v9.receiver = v4;
  v9.super_class = ObjectType;
  id v7 = objc_msgSendSuper2(&v9, sel_init);

  return v7;
}

Swift::Void __swiftcall IdentityProofingFeatureEnablementConfig.encode(with:)(NSCoder with)
{
  uint64_t v3 = *(unsigned __int8 *)(v1
                          + OBJC_IVAR____TtC13CoreIDVShared39IdentityProofingFeatureEnablementConfig_isFedStatsOptinEnabled);
  id v4 = (id)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeBool:v3 forKey:v4];
}

void IdentityProofingFeatureEnablementConfig.init()()
{
}

uint64_t static IdentityProofingDisplayInfo.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t IdentityProofingDisplayInfo.proofingUI.getter()
{
  return swift_bridgeObjectRetain();
}

void *IdentityProofingDisplayInfo.docScan.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC13CoreIDVShared27IdentityProofingDisplayInfo_docScan);
  id v2 = v1;
  return v1;
}

uint64_t IdentityProofingDisplayInfo.attributeConfig.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC13CoreIDVShared27IdentityProofingDisplayInfo_attributeConfig);
  sub_1D786E9D8(v1, *(void *)(v0 + OBJC_IVAR____TtC13CoreIDVShared27IdentityProofingDisplayInfo_attributeConfig + 8));
  return v1;
}

uint64_t IdentityProofingDisplayInfo.learnMoreURL.getter()
{
  return sub_1D78E28A4(&OBJC_IVAR____TtC13CoreIDVShared27IdentityProofingDisplayInfo_learnMoreURL);
}

uint64_t IdentityProofingDisplayInfo.waitingForWiFiAlertDataThresholdInBytes.getter()
{
  return *(void *)(v0
                   + OBJC_IVAR____TtC13CoreIDVShared27IdentityProofingDisplayInfo_waitingForWiFiAlertDataThresholdInBytes);
}

uint64_t IdentityProofingDisplayInfo.lowDataModeAlertDataThresholdInBytes.getter()
{
  return *(void *)(v0
                   + OBJC_IVAR____TtC13CoreIDVShared27IdentityProofingDisplayInfo_lowDataModeAlertDataThresholdInBytes);
}

uint64_t IdentityProofingDisplayInfo.idType.getter()
{
  return sub_1D78E28A4(&OBJC_IVAR____TtC13CoreIDVShared27IdentityProofingDisplayInfo_idType);
}

void *IdentityProofingDisplayInfo.featureEnablementConfig.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC13CoreIDVShared27IdentityProofingDisplayInfo_featureEnablementConfig);
  id v2 = v1;
  return v1;
}

uint64_t IdentityProofingDisplayInfo.supportedRegions.getter()
{
  return swift_bridgeObjectRetain();
}

void *IdentityProofingDisplayInfo.livenessStepUpConfig.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC13CoreIDVShared27IdentityProofingDisplayInfo_livenessStepUpConfig);
  id v2 = v1;
  return v1;
}

void *IdentityProofingDisplayInfo.livenessStepUpIQSettings.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC13CoreIDVShared27IdentityProofingDisplayInfo_livenessStepUpIQSettings);
  id v2 = v1;
  return v1;
}

uint64_t IdentityProofingDisplayInfo.shouldPreFetchLivenessConfig.getter()
{
  return *(unsigned __int8 *)(v0
                            + OBJC_IVAR____TtC13CoreIDVShared27IdentityProofingDisplayInfo_shouldPreFetchLivenessConfig);
}

id IdentityProofingDisplayInfo.__allocating_init(proofingUI:docScan:attributeConfig:learnMoreURL:waitingForWiFiAlertDataThresholdInBytes:lowDataModeAlertDataThresholdInBytes:idType:featureEnablementConfig:supportedRegions:livenessStepUpConfig:livenessStepUpIQSettings:shouldPreFetchLivenessConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, char a10, long long a11, long long a12, uint64_t a13, uint64_t a14, char a15)
{
  char v19 = a8 & 1;
  id v20 = objc_allocWithZone(v15);
  return IdentityProofingDisplayInfo.init(proofingUI:docScan:attributeConfig:learnMoreURL:waitingForWiFiAlertDataThresholdInBytes:lowDataModeAlertDataThresholdInBytes:idType:featureEnablementConfig:supportedRegions:livenessStepUpConfig:livenessStepUpIQSettings:shouldPreFetchLivenessConfig:)(a1, a2, a3, a4, a5, a6, a7, v19, a9, a10 & 1, a11, *((uint64_t *)&a11 + 1), a12, *((uint64_t *)&a12 + 1), a13, a14, a15);
}

id IdentityProofingDisplayInfo.init(proofingUI:docScan:attributeConfig:learnMoreURL:waitingForWiFiAlertDataThresholdInBytes:lowDataModeAlertDataThresholdInBytes:idType:featureEnablementConfig:supportedRegions:livenessStepUpConfig:livenessStepUpIQSettings:shouldPreFetchLivenessConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v17[OBJC_IVAR____TtC13CoreIDVShared27IdentityProofingDisplayInfo_proofingUI] = a1;
  *(void *)&v17[OBJC_IVAR____TtC13CoreIDVShared27IdentityProofingDisplayInfo_docScan] = a2;
  unint64_t v25 = &v17[OBJC_IVAR____TtC13CoreIDVShared27IdentityProofingDisplayInfo_attributeConfig];
  *unint64_t v25 = a3;
  v25[1] = a4;
  char v26 = &v17[OBJC_IVAR____TtC13CoreIDVShared27IdentityProofingDisplayInfo_learnMoreURL];
  *char v26 = a5;
  v26[1] = a6;
  id v27 = &v17[OBJC_IVAR____TtC13CoreIDVShared27IdentityProofingDisplayInfo_waitingForWiFiAlertDataThresholdInBytes];
  *(void *)id v27 = a7;
  v27[8] = a8 & 1;
  unint64_t v28 = &v17[OBJC_IVAR____TtC13CoreIDVShared27IdentityProofingDisplayInfo_lowDataModeAlertDataThresholdInBytes];
  *(void *)unint64_t v28 = a9;
  void v28[8] = a10 & 1;
  char v29 = &v17[OBJC_IVAR____TtC13CoreIDVShared27IdentityProofingDisplayInfo_idType];
  *char v29 = a11;
  v29[1] = a12;
  *(void *)&v17[OBJC_IVAR____TtC13CoreIDVShared27IdentityProofingDisplayInfo_featureEnablementConfig] = a13;
  *(void *)&v17[OBJC_IVAR____TtC13CoreIDVShared27IdentityProofingDisplayInfo_supportedRegions] = a14;
  *(void *)&v17[OBJC_IVAR____TtC13CoreIDVShared27IdentityProofingDisplayInfo_livenessStepUpConfig] = a15;
  *(void *)&v17[OBJC_IVAR____TtC13CoreIDVShared27IdentityProofingDisplayInfo_livenessStepUpIQSettings] = a16;
  v17[OBJC_IVAR____TtC13CoreIDVShared27IdentityProofingDisplayInfo_shouldPreFetchLivenessConfig] = a17;
  v33.receiver = v17;
  v33.super_class = ObjectType;
  return objc_msgSendSuper2(&v33, sel_init);
}

id IdentityProofingDisplayInfo.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  id v4 = sub_1D7A7E32C(a1);

  return v4;
}

id IdentityProofingDisplayInfo.init(coder:)(void *a1)
{
  id v2 = sub_1D7A7E32C(a1);

  return v2;
}

Swift::Void __swiftcall IdentityProofingDisplayInfo.encode(with:)(NSCoder with)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared27IdentityProofingDisplayInfo_proofingUI);
  if (v3)
  {
    type metadata accessor for IdentityProofingUIConfig();
    uint64_t v3 = sub_1D7A9C2F8();
  }
  id v4 = (void *)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeObject:v3 forKey:v4];
  swift_unknownObjectRelease();

  uint64_t v5 = *(void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared27IdentityProofingDisplayInfo_docScan);
  unsigned __int8 v6 = (void *)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeObject:v5 forKey:v6];

  if (*(void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared27IdentityProofingDisplayInfo_attributeConfig + 8) >> 60 == 15) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = sub_1D7A9AFF8();
  }
  objc_super v8 = (void *)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeObject:v7 forKey:v8];
  swift_unknownObjectRelease();

  if (*(void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared27IdentityProofingDisplayInfo_learnMoreURL + 8)) {
    uint64_t v9 = sub_1D7A9BF98();
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = (void *)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeObject:v9 forKey:v10];
  swift_unknownObjectRelease();

  if ((*(unsigned char *)(v1
                 + OBJC_IVAR____TtC13CoreIDVShared27IdentityProofingDisplayInfo_waitingForWiFiAlertDataThresholdInBytes
                 + 8) & 1) != 0)
    uint64_t v11 = 0;
  else {
    uint64_t v11 = sub_1D7A9C648();
  }
  unint64_t v12 = (void *)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeObject:v11 forKey:v12];
  swift_unknownObjectRelease();

  if ((*(unsigned char *)(v1
                 + OBJC_IVAR____TtC13CoreIDVShared27IdentityProofingDisplayInfo_lowDataModeAlertDataThresholdInBytes
                 + 8) & 1) != 0)
    uint64_t v13 = 0;
  else {
    uint64_t v13 = sub_1D7A9C648();
  }
  uint64_t v14 = (void *)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeObject:v13 forKey:v14];
  swift_unknownObjectRelease();

  if (*(void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared27IdentityProofingDisplayInfo_idType + 8)) {
    uint64_t v15 = sub_1D7A9BF98();
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v16 = (void *)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeObject:v15 forKey:v16];
  swift_unknownObjectRelease();

  uint64_t v17 = *(void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared27IdentityProofingDisplayInfo_featureEnablementConfig);
  uint64_t v18 = (void *)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeObject:v17 forKey:v18];

  char v19 = (void *)sub_1D7A9C2F8();
  id v20 = (void *)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeObject:v19 forKey:v20];

  uint64_t v21 = *(void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared27IdentityProofingDisplayInfo_livenessStepUpConfig);
  uint64_t v22 = (void *)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeObject:v21 forKey:v22];

  uint64_t v23 = *(void *)(v1 + OBJC_IVAR____TtC13CoreIDVShared27IdentityProofingDisplayInfo_livenessStepUpIQSettings);
  uint64_t v24 = (void *)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeObject:v23 forKey:v24];

  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC13CoreIDVShared27IdentityProofingDisplayInfo_shouldPreFetchLivenessConfig) == 2) {
    uint64_t v25 = 0;
  }
  else {
    uint64_t v25 = sub_1D7A9C418();
  }
  id v26 = (id)sub_1D7A9BF98();
  [(objc_class *)with.super.isa encodeObject:v25 forKey:v26];
  swift_unknownObjectRelease();
}

id IdentityProofingDisplayInfo.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void IdentityProofingDisplayInfo.init()()
{
}

id sub_1D7A7E32C(void *a1)
{
  id v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA843600);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1D7AA0A40;
  uint64_t v6 = sub_1D78C4038(0, (unint64_t *)&qword_1EBDF90E0);
  *(void *)(v5 + 32) = v6;
  *(void *)(v5 + 40) = type metadata accessor for IdentityProofingUIConfig();
  uint64_t v7 = v2;
  sub_1D7A9C918();
  swift_bridgeObjectRelease();
  if (v43)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847928);
    int v8 = swift_dynamicCast();
    uint64_t v9 = v40;
    if (!v8) {
      uint64_t v9 = 0;
    }
  }
  else
  {
    sub_1D7867598((uint64_t)v42);
    uint64_t v9 = 0;
  }
  *(void *)&v7[OBJC_IVAR____TtC13CoreIDVShared27IdentityProofingDisplayInfo_proofingUI] = v9;
  type metadata accessor for IdentityDocScanConfig();
  *(void *)&v7[OBJC_IVAR____TtC13CoreIDVShared27IdentityProofingDisplayInfo_docScan] = sub_1D7A9C908();
  sub_1D78C4038(0, (unint64_t *)&qword_1EA847920);
  uint64_t v10 = sub_1D7A9C908();
  if (v10)
  {
    uint64_t v11 = (void *)v10;
    uint64_t v12 = sub_1D7A9B028();
    unint64_t v14 = v13;
  }
  else
  {
    uint64_t v12 = 0;
    unint64_t v14 = 0xF000000000000000;
  }
  uint64_t v15 = (uint64_t *)&v7[OBJC_IVAR____TtC13CoreIDVShared27IdentityProofingDisplayInfo_attributeConfig];
  *uint64_t v15 = v12;
  v15[1] = v14;
  uint64_t v16 = sub_1D78C4038(0, (unint64_t *)&qword_1EBDF8260);
  uint64_t v17 = sub_1D7A9C908();
  if (v17)
  {
    uint64_t v18 = (void *)v17;
    uint64_t v19 = sub_1D7A9BFC8();
    uint64_t v21 = v20;
  }
  else
  {
    uint64_t v19 = 0;
    uint64_t v21 = 0;
  }
  uint64_t v22 = (uint64_t *)&v7[OBJC_IVAR____TtC13CoreIDVShared27IdentityProofingDisplayInfo_learnMoreURL];
  *uint64_t v22 = v19;
  v22[1] = v21;
  uint64_t v23 = (void *)sub_1D7A9BF98();
  id v24 = objc_msgSend(a1, sel_decodeIntegerForKey_, v23);

  uint64_t v25 = &v7[OBJC_IVAR____TtC13CoreIDVShared27IdentityProofingDisplayInfo_waitingForWiFiAlertDataThresholdInBytes];
  *(void *)uint64_t v25 = v24;
  v25[8] = 0;
  id v26 = (void *)sub_1D7A9BF98();
  id v27 = objc_msgSend(a1, sel_decodeIntegerForKey_, v26);

  unint64_t v28 = &v7[OBJC_IVAR____TtC13CoreIDVShared27IdentityProofingDisplayInfo_lowDataModeAlertDataThresholdInBytes];
  *(void *)unint64_t v28 = v27;
  void v28[8] = 0;
  uint64_t v29 = sub_1D7A9C908();
  if (v29)
  {
    id v30 = (void *)v29;
    uint64_t v31 = sub_1D7A9BFC8();
    uint64_t v33 = v32;
  }
  else
  {
    uint64_t v31 = 0;
    uint64_t v33 = 0;
  }
  long long v34 = (uint64_t *)&v7[OBJC_IVAR____TtC13CoreIDVShared27IdentityProofingDisplayInfo_idType];
  uint64_t *v34 = v31;
  v34[1] = v33;
  type metadata accessor for IdentityProofingFeatureEnablementConfig();
  *(void *)&v7[OBJC_IVAR____TtC13CoreIDVShared27IdentityProofingDisplayInfo_featureEnablementConfig] = sub_1D7A9C908();
  uint64_t v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_1D7AA0A40;
  *(void *)(v35 + 32) = v6;
  *(void *)(v35 + 40) = v16;
  sub_1D7A9C918();
  swift_bridgeObjectRelease();
  if (!v43)
  {
    sub_1D7867598((uint64_t)v42);
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF7900);
  if (!swift_dynamicCast())
  {
LABEL_19:
    uint64_t v36 = MEMORY[0x1E4FBC860];
    goto LABEL_20;
  }
  uint64_t v36 = v40;
LABEL_20:
  *(void *)&v7[OBJC_IVAR____TtC13CoreIDVShared27IdentityProofingDisplayInfo_supportedRegions] = v36;
  type metadata accessor for IdentityLivenessConfig();
  *(void *)&v7[OBJC_IVAR____TtC13CoreIDVShared27IdentityProofingDisplayInfo_livenessStepUpConfig] = sub_1D7A9C908();
  type metadata accessor for IdentityImageQuality();
  *(void *)&v7[OBJC_IVAR____TtC13CoreIDVShared27IdentityProofingDisplayInfo_livenessStepUpIQSettings] = sub_1D7A9C908();
  __int16 v37 = (void *)sub_1D7A9BF98();
  unsigned __int8 v38 = objc_msgSend(a1, sel_decodeBoolForKey_, v37);

  v7[OBJC_IVAR____TtC13CoreIDVShared27IdentityProofingDisplayInfo_shouldPreFetchLivenessConfig] = v38;
  v41.receiver = v7;
  v41.super_class = ObjectType;
  return objc_msgSendSuper2(&v41, sel_init);
}

uint64_t type metadata accessor for IdentityProofingFeatureEnablementConfig()
{
  return self;
}

uint64_t method lookup function for IdentityProofingFeatureEnablementConfig(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for IdentityProofingFeatureEnablementConfig);
}

uint64_t dispatch thunk of IdentityProofingFeatureEnablementConfig.__allocating_init(isFedStatsOptinEnabled:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of IdentityProofingFeatureEnablementConfig.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t type metadata accessor for IdentityProofingDisplayInfo()
{
  return self;
}

uint64_t method lookup function for IdentityProofingDisplayInfo(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for IdentityProofingDisplayInfo);
}

uint64_t dispatch thunk of IdentityProofingDisplayInfo.__allocating_init(proofingUI:docScan:attributeConfig:learnMoreURL:waitingForWiFiAlertDataThresholdInBytes:lowDataModeAlertDataThresholdInBytes:idType:featureEnablementConfig:supportedRegions:livenessStepUpConfig:livenessStepUpIQSettings:shouldPreFetchLivenessConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t))(v9 + 176))(a1, a2, a3, a4, a5, a6, a7, a8 & 1, a9);
}

uint64_t dispatch thunk of IdentityProofingDisplayInfo.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t copyPublicKeyDataFromCertificate(_:)(__SecCertificate *a1)
{
  id v1 = SecCertificateCopyKey(a1);
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  uint64_t v3 = copyPublicKeyDataFromSecKeyPublic(_:)(v1);

  return v3;
}

__n128 errorFromCFError(_:_:_:)(void *a1, uint64_t a2, uint64_t a3, __int16 *a4)
{
  __int16 v6 = *a4;
  if (a1)
  {
    sub_1D7A9CC48();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v18 = a2;
    v19.n128_u64[0] = a3;
    sub_1D7A9C128();
    uint64_t v17 = a1;
    type metadata accessor for CFError(0);
    sub_1D7A8875C((unint64_t *)&qword_1EBDF9578, type metadata accessor for CFError);
    sub_1D7A9D548();

    sub_1D7A9C128();
    swift_bridgeObjectRelease();
    sub_1D7A9C128();
    uint64_t v8 = a2;
    uint64_t v9 = a3;
    LOWORD(v17) = v6;
    unint64_t v10 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    uint64_t v11 = 728;
  }
  else
  {
    sub_1D7A9CC48();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v18 = a2;
    v19.n128_u64[0] = a3;
    sub_1D7A9C128();
    uint64_t v8 = a2;
    uint64_t v9 = a3;
    LOWORD(v17) = v6;
    unint64_t v10 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    uint64_t v11 = 725;
  }
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, v8, v9, (__int16 *)&v17, 0, v10, 0xD00000000000005ALL, 0x80000001D7ACD9A0, (uint64_t)&v18, 0xD000000000000018, 0x80000001D7ACDA00, v11);
  __int16 v12 = v18;
  __n128 v16 = v19;
  uint64_t v13 = v20;
  sub_1D7860544();
  swift_allocError();
  *(_WORD *)uint64_t v14 = v12;
  __n128 result = v16;
  *(__n128 *)(v14 + 8) = v16;
  *(void *)(v14 + 24) = v13;
  return result;
}

uint64_t sub_1D7A7EB98(void *a1, uint64_t a2, unint64_t a3, int a4)
{
  return static DIPKeystoreKeychain.storeKeychainCertificate(_:label:failIfDuplicate:)(a1, a2, a3, a4);
}

uint64_t static DIPKeystoreKeychain.storeKeychainCertificate(_:label:failIfDuplicate:)(void *a1, uint64_t a2, unint64_t a3, int a4)
{
  int v106 = a4;
  uint64_t v7 = sub_1D7A9B5F8();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v112 = v7;
  uint64_t v113 = v8;
  uint64_t v16 = MEMORY[0x1F4188790](v7, v9, v10, v11, v12, v13, v14, v15);
  uint64_t v109 = (char *)&v102 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = MEMORY[0x1F4188790](v16, v18, v19, v20, v21, v22, v23, v24);
  id v27 = (char *)&v102 - v26;
  MEMORY[0x1F4188790](v25, v28, v29, v30, v31, v32, v33, v34);
  char v107 = (char *)&v102 - v35;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9400);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D7AA4E90;
  *(void *)(inited + 32) = sub_1D7A9BFC8();
  *(void *)(inited + 40) = v37;
  type metadata accessor for SecCertificate(0);
  *(void *)(inited + 72) = v38;
  *(void *)(inited + 48) = a1;
  *(void *)(inited + 80) = sub_1D7A9BFC8();
  *(void *)(inited + 88) = v39;
  *(void *)(inited + 120) = MEMORY[0x1E4FBB1A0];
  uint64_t v110 = a2;
  *(void *)(inited + 96) = a2;
  *(void *)(inited + 104) = a3;
  *(void *)(inited + 128) = sub_1D7A9BFC8();
  *(void *)(inited + 136) = v40;
  objc_super v41 = (void *)*MEMORY[0x1E4F3B980];
  type metadata accessor for CFString(0);
  *(void *)(inited + 168) = v42;
  *(void *)(inited + 144) = v41;
  *(void *)(inited + 176) = sub_1D7A9BFC8();
  *(void *)(inited + 184) = v43;
  uint64_t v44 = (void *)*MEMORY[0x1E4F3B598];
  *(void *)(inited + 216) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF8238);
  *(void *)(inited + 192) = v44;
  id v45 = v44;
  unint64_t v46 = a1;
  unint64_t v111 = a3;
  swift_bridgeObjectRetain();
  uint64_t v47 = v41;
  sub_1D785F2A0(inited);
  CFDictionaryRef v48 = (const __CFDictionary *)sub_1D7A9BE98();
  swift_bridgeObjectRelease();
  OSStatus v49 = SecItemAdd(v48, 0);

  if (v49 != -25299)
  {
    if (!v49)
    {
      if (qword_1EBDF9DC8 != -1) {
        swift_once();
      }
      uint64_t v50 = v112;
      uint64_t v51 = __swift_project_value_buffer(v112, (uint64_t)qword_1EBDFBE70);
      swift_beginAccess();
      uint64_t v52 = v113;
      uint64_t v53 = v107;
      (*(void (**)(char *, uint64_t, uint64_t))(v113 + 16))(v107, v51, v50);
      unint64_t v54 = v111;
      swift_bridgeObjectRetain_n();
      uint64_t v55 = sub_1D7A9B5D8();
      os_log_type_t v56 = sub_1D7A9C748();
      if (os_log_type_enabled(v55, v56))
      {
        unint64_t v57 = (uint8_t *)swift_slowAlloc();
        uint64_t v58 = swift_slowAlloc();
        uint64_t v114 = v58;
        *(_DWORD *)unint64_t v57 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v116 = sub_1D7923300(v110, v54, &v114);
        sub_1D7A9C9E8();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1D7853000, v55, v56, "certificate %s is stored in the keychain", v57, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1D947D740](v58, -1, -1);
        MEMORY[0x1D947D740](v57, -1, -1);

        return (*(uint64_t (**)(char *, uint64_t))(v113 + 8))(v53, v112);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v53, v50);
      }
    }
    goto LABEL_8;
  }
  SecCertificateRef v105 = v46;
  char v107 = v27;
  if (v106)
  {
LABEL_8:
    if (qword_1EBDF9DC8 != -1) {
      swift_once();
    }
    uint64_t v60 = v112;
    uint64_t v61 = __swift_project_value_buffer(v112, (uint64_t)qword_1EBDFBE70);
    swift_beginAccess();
    uint64_t v62 = v113;
    uint64_t v63 = v109;
    (*(void (**)(char *, uint64_t, uint64_t))(v113 + 16))(v109, v61, v60);
    unint64_t v64 = v111;
    swift_bridgeObjectRetain_n();
    uint64_t v65 = sub_1D7A9B5D8();
    os_log_type_t v66 = sub_1D7A9C758();
    if (os_log_type_enabled(v65, v66))
    {
      uint64_t v67 = swift_slowAlloc();
      uint64_t v108 = swift_slowAlloc();
      uint64_t v114 = v108;
      *(_DWORD *)uint64_t v67 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v116 = sub_1D7923300(v110, v64, &v114);
      sub_1D7A9C9E8();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v67 + 12) = 2082;
      CFStringRef v68 = SecCopyErrorMessageString(v49, 0);
      if (v68)
      {
        uint64_t v69 = (__CFString *)v68;
        uint64_t v70 = sub_1D7A9BFC8();
        unint64_t v72 = v71;
      }
      else
      {
        uint64_t v70 = 0;
        unint64_t v72 = 0xE000000000000000;
      }
      uint64_t v78 = v109;
      uint64_t v116 = sub_1D7923300(v70, v72, &v114);
      sub_1D7A9C9E8();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1D7853000, v65, v66, "failed to add certificate to key chain item: label = %s, CFErrorRef error = %{public}s", (uint8_t *)v67, 0x16u);
      uint64_t v79 = v108;
      swift_arrayDestroy();
      MEMORY[0x1D947D740](v79, -1, -1);
      MEMORY[0x1D947D740](v67, -1, -1);

      (*(void (**)(char *, uint64_t))(v113 + 8))(v78, v112);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v62 + 8))(v63, v60);
    }
    uint64_t v114 = 0;
    unint64_t v115 = 0xE000000000000000;
    sub_1D7A9CC48();
    sub_1D7A9C128();
    sub_1D7A9C128();
    uint64_t v80 = v114;
    uint64_t v81 = v115;
    LOWORD(v114) = 234;
    unint64_t v82 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, v80, v81, (__int16 *)&v114, 0, v82, 0xD00000000000005ALL, 0x80000001D7ACD9A0, v83, 0xD000000000000032, 0x80000001D7ACDA60, 410);
    return swift_willThrow();
  }
  uint64_t v109 = v47;
  CFDataRef v73 = SecCertificateCopySerialNumberData(v105, 0);
  if (v73)
  {
    CFDataRef v74 = v73;
    uint64_t v75 = sub_1D7A9B028();
    unint64_t v77 = v76;
  }
  else
  {
    uint64_t v75 = 0;
    unint64_t v77 = 0xF000000000000000;
  }
  uint64_t v85 = v112;
  uint64_t v84 = v113;
  uint64_t v86 = v107;
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v87 = __swift_project_value_buffer(v85, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v84 + 16))(v86, v87, v85);
  unint64_t v88 = v111;
  swift_bridgeObjectRetain();
  uint64_t v89 = v75;
  sub_1D786E9D8(v75, v77);
  swift_bridgeObjectRetain();
  sub_1D786E9D8(v75, v77);
  uint64_t v90 = sub_1D7A9B5D8();
  int v106 = sub_1D7A9C748();
  if (os_log_type_enabled(v90, (os_log_type_t)v106))
  {
    os_log_t v104 = v90;
    uint64_t v91 = swift_slowAlloc();
    uint64_t v103 = swift_slowAlloc();
    uint64_t v114 = v103;
    *(_DWORD *)uint64_t v91 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v116 = sub_1D7923300(v110, v88, &v114);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v91 + 12) = 2082;
    if (v77 >> 60 == 15)
    {
      unint64_t v92 = 0xEB00000000656C62;
      uint64_t v93 = 0x616C696176616E75;
      uint64_t v89 = v75;
      uint64_t v94 = v108;
    }
    else
    {
      uint64_t v89 = v75;
      uint64_t v95 = v108;
      uint64_t v96 = sub_1D79F1750(v75, v77);
      uint64_t v94 = v95;
      uint64_t v116 = v96;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF7900);
      sub_1D7871DDC((unint64_t *)&qword_1EBDF7910, (uint64_t *)&unk_1EBDF7900);
      uint64_t v93 = sub_1D7A9BF38();
      unint64_t v92 = v97;
      swift_bridgeObjectRelease();
    }
    uint64_t v116 = sub_1D7923300(v93, v92, &v114);
    sub_1D7A9C9E8();
    swift_bridgeObjectRelease();
    sub_1D7871BDC(v89, v77);
    sub_1D7871BDC(v89, v77);
    os_log_t v98 = v104;
    _os_log_impl(&dword_1D7853000, v104, (os_log_type_t)v106, "certificate %s already exists in the keychain, serial# = %{public}s", (uint8_t *)v91, 0x16u);
    uint64_t v99 = v103;
    swift_arrayDestroy();
    MEMORY[0x1D947D740](v99, -1, -1);
    MEMORY[0x1D947D740](v91, -1, -1);

    (*(void (**)(char *, uint64_t))(v113 + 8))(v107, v112);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    sub_1D7871BDC(v75, v77);
    sub_1D7871BDC(v75, v77);

    (*(void (**)(char *, uint64_t))(v84 + 8))(v86, v85);
    uint64_t v94 = v108;
  }
  uint64_t v100 = sub_1D7A9BFC8();
  sub_1D7A86D68(0, 0, v89, v77, v100, v101);
  swift_bridgeObjectRelease();
  if (!v94) {
    static DIPKeystoreKeychain.storeKeychainCertificate(_:label:failIfDuplicate:)(v105, v110, v111, 1);
  }
  return sub_1D7871BDC(v89, v77);
}

void sub_1D7A7F704(void *a1, uint64_t a2, unint64_t a3)
{
}

void static DIPKeystoreKeychain.storeKeychainKey(_:label:)(void *a1, uint64_t a2, unint64_t a3)
{
}

void sub_1D7A7F734(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
}

void static DIPKeystoreKeychain.deleteKeychainItem(label:serialNumber:secClass:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
}

void sub_1D7A7F764(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, CFTypeRef *a5)
{
}

void static DIPKeystoreKeychain.queryKeychainItem(label:secClass:item:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, CFTypeRef *a5)
{
}

unint64_t BAA_INTERMEDIATE_CERT_KEYCHAIN_LABEL.getter()
{
  return 0xD000000000000017;
}

unint64_t IDV_INTERMEDIATE_CERT_KEYCHAIN_LABEL.getter()
{
  return 0xD00000000000001CLL;
}

uint64_t SIGNATURE_ALLOWED_PER_USER_AUTH.getter()
{
  return 7;
}

uint64_t sub_1D7A7F7D4()
{
  __int16 v3 = 106;
  unint64_t v0 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
  sub_1D7860544();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000036, 0x80000001D7ACDAE0, &v3, 0, v0, 0xD00000000000005ALL, 0x80000001D7ACD9A0, v1, 0xD000000000000014, 0x80000001D7ACDB20, 38);
  return swift_willThrow();
}

void sub_1D7A7F8A8(char *a1, __SecAccessControl *a2)
{
  char v2 = *a1;
  sub_1D7A87E48(&v2, a2, 0);
}

void sub_1D7A7F8D8(unsigned char *a1, __SecAccessControl *a2, char a3)
{
}

void *sub_1D7A7F8F0(int a1, int a2, SecKeyRef key, SecKeyAlgorithm algorithm)
{
  error[1] = *(CFErrorRef *)MEMORY[0x1E4F143B8];
  error[0] = 0;
  if (!SecKeyIsAlgorithmSupported(key, kSecKeyOperationTypeSign, algorithm))
  {
    v12[0] = 243;
    v12[1] = 0xE000000000000000;
    sub_1D7A9CC48();
    sub_1D7A9C128();
    type metadata accessor for SecKeyAlgorithm(0);
    sub_1D7A9CE78();
    sub_1D7A9C128();
    CFDataRef Signature = 0;
    unint64_t v9 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0, 0xE000000000000000, (__int16 *)v12, 0, v9, 0xD00000000000005ALL, 0x80000001D7ACD9A0, v10, 0xD00000000000001ALL, 0x80000001D7ACDB40, 90);
LABEL_6:
    swift_willThrow();
    return Signature;
  }
  CFDataRef v6 = (const __CFData *)sub_1D7A9AFF8();
  CFDataRef Signature = SecKeyCreateSignature(key, algorithm, v6, error);

  if (!Signature)
  {
    LOWORD(v12[0]) = 245;
    errorFromCFError(_:_:_:)(error[0], 0xD000000000000021, 0x80000001D7ACC890, (__int16 *)v12);
    goto LABEL_6;
  }
  id v8 = Signature;
  CFDataRef Signature = (void *)sub_1D7A9B028();

  return Signature;
}

void sub_1D7A7FB38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __SecKey *a5, const __CFString *a6)
{
}

uint64_t sub_1D7A7FB50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1D7A7FBC8(a1, a2, a3, a4, 0x80000001D7ACDB60, 0x80000001D7ACDB90, 107);
}

uint64_t sub_1D7A7FB8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1D7A7FBC8(a1, a2, a3, a4, 0x80000001D7ACDBB0, 0x80000001D7ACDBE0, 111);
}

uint64_t sub_1D7A7FBC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  __int16 v13 = 106;
  unint64_t v10 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
  sub_1D7860544();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000002FLL, a5, &v13, 0, v10, 0xD00000000000005ALL, 0x80000001D7ACD9A0, v11, 0xD00000000000001DLL, a6, a7);
  return swift_willThrow();
}

unint64_t sub_1D7A7FC90(__SecKey *a1, __SecKey *a2, const __CFString *a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  return sub_1D7A87AAC(a1, a2, a3, a4, a5, a6);
}

uint64_t DIPCryptoKeychain.deinit()
{
  return v0;
}

uint64_t DIPCryptoKeychain.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

id DIPKeystoreKeychain.laContext.getter()
{
  return *(id *)(v0 + 16);
}

uint64_t DIPKeystoreKeychain.__allocating_init(requireUserAuth:externalizedLAContext:)(char a1, uint64_t a2, uint64_t a3)
{
  swift_allocObject();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_1D7A1531C;
  return DIPKeystoreKeychain.init(requireUserAuth:externalizedLAContext:)(a1, a2, a3);
}

uint64_t DIPKeystoreKeychain.init(requireUserAuth:externalizedLAContext:)(char a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + 48) = a3;
  *(void *)(v4 + 56) = v3;
  *(void *)(v4 + 40) = a2;
  *(unsigned char *)(v4 + 96) = a1;
  uint64_t v5 = sub_1D7A9B5F8();
  *(void *)(v4 + 64) = v5;
  *(void *)(v4 + 72) = *(void *)(v5 - 8);
  *(void *)(v4 + 80) = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_1D7A7FE50, 0, 0);
}

void sub_1D7A7FE50()
{
  unint64_t v1 = *(void *)(v0 + 48);
  unint64_t v2 = v1 >> 60;
  if (v1 >> 60 == 15)
  {
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v4 = *(void *)(v0 + 40);
    sub_1D7860790(v4, *(void *)(v0 + 48));
    uint64_t v3 = (void *)sub_1D7A9AFF8();
    sub_1D7871BDC(v4, v1);
  }
  id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F30B50]), sel_initWithExternalizedContext_, v3);

  if (v5)
  {
    uint64_t v6 = *(void *)(v0 + 56);
    char v7 = *(unsigned char *)(v0 + 96);
    *(void *)(v6 + 16) = v5;
    *(unsigned char *)(v6 + 24) = v7;
    if (v2 <= 0xE)
    {
      sub_1D7871BDC(*(void *)(v0 + 40), *(void *)(v0 + 48));
      swift_task_dealloc();
      uint64_t v9 = *(void (**)(uint64_t))(v0 + 8);
      uint64_t v10 = *(void *)(v0 + 56);
      v9(v10);
    }
    else
    {
      id v8 = (void *)swift_task_alloc();
      *(void *)(v0 + 88) = v8;
      *id v8 = v0;
      v8[1] = sub_1D7A7FFBC;
      sub_1D7A80344();
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1D7A7FFBC(char a1)
{
  *(unsigned char *)(*(void *)v1 + 97) = a1;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](sub_1D7A800BC, 0, 0);
}

uint64_t sub_1D7A800BC()
{
  uint64_t v18 = v0;
  if (*(unsigned char *)(v0 + 97))
  {
    swift_task_dealloc();
    uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
    uint64_t v2 = *(void *)(v0 + 56);
    return v1(v2);
  }
  else
  {
    swift_release();
    if (qword_1EBDF9DC8 != -1) {
      swift_once();
    }
    uint64_t v5 = *(void *)(v0 + 72);
    uint64_t v4 = *(void *)(v0 + 80);
    uint64_t v6 = *(void *)(v0 + 64);
    uint64_t v7 = __swift_project_value_buffer(v6, (uint64_t)qword_1EBDFBE70);
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v7, v6);
    id v8 = sub_1D7A9B5D8();
    os_log_type_t v9 = sub_1D7A9C758();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl(&dword_1D7853000, v8, v9, "coreidvd: DIPCryptoKeychain.init failed to acquire user authentication", v10, 2u);
      MEMORY[0x1D947D740](v10, -1, -1);
    }
    uint64_t v12 = *(void *)(v0 + 72);
    uint64_t v11 = *(void *)(v0 + 80);
    uint64_t v13 = *(void *)(v0 + 64);

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    v17[0] = 248;
    unint64_t v14 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000025, 0x80000001D7ACDC00, v17, 0, v14, 0xD00000000000005ALL, 0x80000001D7ACD9A0, v15, 0xD00000000000002CLL, 0x80000001D7ACDC30, 145);
    swift_willThrow();
    swift_task_dealloc();
    uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
    return v16();
  }
}

uint64_t sub_1D7A80344()
{
  v1[41] = v0;
  uint64_t v2 = sub_1D7A9B5F8();
  v1[42] = v2;
  v1[43] = *(void *)(v2 - 8);
  v1[44] = swift_task_alloc();
  v1[45] = swift_task_alloc();
  v1[46] = swift_task_alloc();
  v1[47] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_1D7A80458, 0, 0);
}

uint64_t sub_1D7A80458()
{
  uint64_t v19 = v0;
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(v0 + 328);
  *(unsigned char *)(v0 + 412) = 0;
  *(void *)(v0 + 320) = 0;
  if (*(unsigned char *)(v1 + 24)) {
    SecAccessControlCreateFlags v2 = 1073741825;
  }
  else {
    SecAccessControlCreateFlags v2 = 0x40000000;
  }
  SecAccessControlRef v3 = SecAccessControlCreateWithFlags((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CFTypeRef)*MEMORY[0x1E4F3B5B8], v2, (CFErrorRef *)(v0 + 320));
  *(void *)(v0 + 384) = v3;
  if (v3)
  {
    uint64_t v4 = *(void **)(*(void *)(v0 + 328) + 16);
    uint64_t v5 = v3;
    sub_1D785FD70(MEMORY[0x1E4FBC860]);
    uint64_t v6 = sub_1D7A9BE98();
    *(void *)(v0 + 392) = v6;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 56) = v0 + 288;
    *(void *)(v0 + 24) = sub_1D7A80794;
    uint64_t v7 = swift_continuation_init();
    *(void *)(v0 + 80) = MEMORY[0x1E4F143A8];
    *(void *)(v0 + 88) = 0x40000000;
    *(void *)(v0 + 96) = sub_1D7A8128C;
    *(void *)(v0 + 104) = &block_descriptor_68;
    *(void *)(v0 + 112) = v7;
    objc_msgSend(v4, sel_evaluateAccessControl_operation_options_reply_, v5, 3, v6, v0 + 80);
    return MEMORY[0x1F41881E8](v0 + 16);
  }
  else
  {
    id v8 = *(void **)(v0 + 320);
    __int16 v17 = 0;
    errorFromCFError(_:_:_:)(v8, 0xD000000000000040, 0x80000001D7ACE310, &v17);
    uint64_t v10 = v9;
    if (qword_1EBDF9DC8 != -1) {
      swift_once();
    }
    uint64_t v11 = *(void *)(v0 + 360);
    uint64_t v12 = *(void *)(v0 + 336);
    uint64_t v13 = *(void *)(v0 + 344);
    uint64_t v14 = __swift_project_value_buffer(v12, (uint64_t)qword_1EBDFBE70);
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v11, v14, v12);
    DIPLogError(_:message:log:)(v10, 0, 0xE000000000000000);
    _s13CoreIDVShared9AnalyticsC9sendErroryys0E0_pFZ_0(v10);

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
    return v15(0);
  }
}

uint64_t sub_1D7A80794()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 400) = v1;
  if (v1) {
    SecAccessControlCreateFlags v2 = sub_1D7A80C2C;
  }
  else {
    SecAccessControlCreateFlags v2 = sub_1D7A808D0;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

uint64_t sub_1D7A808D0()
{
  uint64_t v1 = *(void **)(v0 + 384);
  uint64_t v2 = *(void *)(v0 + 288);

  if (v2)
  {
    swift_bridgeObjectRelease();
    if (qword_1EBDF9DC8 != -1) {
      swift_once();
    }
    uint64_t v3 = *(void *)(v0 + 376);
    uint64_t v4 = *(void *)(v0 + 336);
    uint64_t v5 = *(void *)(v0 + 344);
    uint64_t v6 = __swift_project_value_buffer(v4, (uint64_t)qword_1EBDFBE70);
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v6, v4);
    uint64_t v7 = sub_1D7A9B5D8();
    os_log_type_t v8 = sub_1D7A9C738();
    if (os_log_type_enabled(v7, v8))
    {
      os_log_type_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v9 = 0;
      _os_log_impl(&dword_1D7853000, v7, v8, "coreidvd: acquireUserAuthentication evaluateAccessControl success", v9, 2u);
      MEMORY[0x1D947D740](v9, -1, -1);
    }
    uint64_t v10 = *(void *)(v0 + 376);
    uint64_t v11 = *(void *)(v0 + 336);
    uint64_t v12 = *(void *)(v0 + 344);

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    *(unsigned char *)(v0 + 412) = 1;
  }
  uint64_t v13 = (unsigned __int8 *)(v0 + 412);
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v14 = *(void *)(v0 + 368);
  uint64_t v15 = *(void *)(v0 + 336);
  uint64_t v16 = *(void *)(v0 + 344);
  uint64_t v17 = __swift_project_value_buffer(v15, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v14, v17, v15);
  int v18 = *v13;
  uint64_t v19 = sub_1D7A9B5D8();
  os_log_type_t v20 = sub_1D7A9C738();
  BOOL v21 = os_log_type_enabled(v19, v20);
  uint64_t v22 = *(NSObject **)(v0 + 384);
  if (v21)
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v23 = 67240192;
    *(_DWORD *)(v0 + 408) = v18;
    sub_1D7A9C9E8();
    _os_log_impl(&dword_1D7853000, v19, v20, "coreidvd: acquireUserAuthentication evaluateAccessControl __n128 result = %{BOOL,public}d", v23, 8u);
    MEMORY[0x1D947D740](v23, -1, -1);
    uint64_t v24 = v19;
  }
  else
  {
    uint64_t v24 = *(NSObject **)(v0 + 384);
    uint64_t v22 = v19;
  }

  (*(void (**)(void, void))(*(void *)(v0 + 344) + 8))(*(void *)(v0 + 368), *(void *)(v0 + 336));
  swift_beginAccess();
  uint64_t v25 = *v13;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v26 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v26(v25);
}

uint64_t sub_1D7A80C2C()
{
  uint64_t v56 = v0;
  v55[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)(v0 + 392);
  uint64_t v1 = *(void **)(v0 + 400);
  uint64_t v3 = *(void **)(v0 + 384);
  swift_willThrow();

  *(void *)(v0 + 304) = v1;
  id v4 = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF9740);
  if (swift_dynamicCast())
  {

    v54[0] = 291;
    unint64_t v5 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000021, 0x80000001D7ACE390, v54, 0, v5, 0xD00000000000005ALL, 0x80000001D7ACD9A0, (uint64_t)v55, 0xD00000000000001BLL, 0x80000001D7ACE3C0, 167);
    __int16 v6 = v55[0];
    uint64_t v8 = v55[1];
    uint64_t v7 = v55[2];
    os_log_type_t v9 = (void *)v55[3];
    sub_1D7860544();
    uint64_t v10 = (void *)swift_allocError();
    *(_WORD *)uint64_t v11 = v6;
    *(void *)(v11 + 8) = v8;
    *(void *)(v11 + 16) = v7;
    *(void *)(v11 + 24) = v9;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v12 = v9;
    if (qword_1EBDF9DC8 != -1) {
      swift_once();
    }
    uint64_t v13 = *(void **)(v0 + 384);
    uint64_t v14 = *(void *)(v0 + 360);
    uint64_t v15 = *(void *)(v0 + 336);
    uint64_t v16 = *(void *)(v0 + 344);
    uint64_t v17 = __swift_project_value_buffer(v15, (uint64_t)qword_1EBDFBE70);
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v14, v17, v15);
    DIPLogError(_:message:log:)(v10, 0, 0xE000000000000000);
    _s13CoreIDVShared9AnalyticsC9sendErroryys0E0_pFZ_0(v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
    uint64_t v18 = 0;
  }
  else
  {

    uint64_t v19 = &qword_1EBDF8FF0[2];
    if (qword_1EBDF9DC8 != -1) {
      swift_once();
    }
    os_log_type_t v20 = *(void **)(v0 + 400);
    uint64_t v21 = *(void *)(v0 + 344);
    uint64_t v22 = *(void *)(v0 + 352);
    uint64_t v23 = *(void *)(v0 + 336);
    uint64_t v24 = __swift_project_value_buffer(v23, (uint64_t)qword_1EBDFBE70);
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v22, v24, v23);
    id v25 = v20;
    id v26 = v20;
    id v27 = sub_1D7A9B5D8();
    os_log_type_t v28 = sub_1D7A9C738();
    BOOL v29 = os_log_type_enabled(v27, v28);
    uint64_t v30 = *(void **)(v0 + 400);
    uint64_t v31 = *(void *)(v0 + 344);
    uint64_t v32 = *(void *)(v0 + 352);
    uint64_t v33 = *(void *)(v0 + 336);
    if (v29)
    {
      uint64_t v53 = *(void *)(v0 + 336);
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      v55[0] = v35;
      *(_DWORD *)uint64_t v34 = 136446210;
      swift_getErrorValue();
      uint64_t v36 = sub_1D7A9D548();
      *(void *)(v0 + 312) = sub_1D7923300(v36, v37, v55);
      sub_1D7A9C9E8();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1D7853000, v27, v28, "coreidvd: acquireUserAuthentication evaluateAccessControl fail %{public}s ", v34, 0xCu);
      swift_arrayDestroy();
      uint64_t v38 = v35;
      uint64_t v19 = qword_1EBDF8FF0 + 16;
      MEMORY[0x1D947D740](v38, -1, -1);
      MEMORY[0x1D947D740](v34, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v32, v53);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v32, v33);
    }
    uint64_t v39 = (unsigned __int8 *)(v0 + 412);
    if (v19[441] != -1) {
      swift_once();
    }
    uint64_t v40 = *(void *)(v0 + 368);
    uint64_t v42 = *(void *)(v0 + 336);
    uint64_t v41 = *(void *)(v0 + 344);
    uint64_t v43 = __swift_project_value_buffer(v42, (uint64_t)qword_1EBDFBE70);
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16))(v40, v43, v42);
    int v44 = *v39;
    id v45 = sub_1D7A9B5D8();
    os_log_type_t v46 = sub_1D7A9C738();
    BOOL v47 = os_log_type_enabled(v45, v46);
    CFDictionaryRef v48 = *(NSObject **)(v0 + 384);
    if (v47)
    {
      OSStatus v49 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)OSStatus v49 = 67240192;
      *(_DWORD *)(v0 + 408) = v44;
      sub_1D7A9C9E8();
      _os_log_impl(&dword_1D7853000, v45, v46, "coreidvd: acquireUserAuthentication evaluateAccessControl __n128 result = %{BOOL,public}d", v49, 8u);
      MEMORY[0x1D947D740](v49, -1, -1);
      uint64_t v50 = v45;
    }
    else
    {
      uint64_t v50 = *(NSObject **)(v0 + 384);
      CFDictionaryRef v48 = v45;
    }

    (*(void (**)(void, void))(*(void *)(v0 + 344) + 8))(*(void *)(v0 + 368), *(void *)(v0 + 336));
    swift_beginAccess();
    uint64_t v18 = *v39;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v51 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v51(v18);
}

uint64_t sub_1D7A8128C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF9740);
    swift_allocError();
    *unint64_t v5 = a3;
    id v6 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    if (a2) {
      uint64_t v8 = sub_1D7A9BEB8();
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = v8;
    sub_1D7871D78((uint64_t)&v9, *(void *)(*(void *)(v3 + 64) + 40), &qword_1EA8479E0);
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_1D7A81384(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, unsigned __int8 *a5)
{
  return sub_1D7A855C0(a1, a2, a3, a4, a5);
}

uint64_t sub_1D7A8139C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7)
{
  *(void *)(v8 + 80) = a5;
  *(void *)(v8 + 88) = v7;
  *(unsigned char *)(v8 + 137) = a7;
  *(unsigned char *)(v8 + 136) = a6;
  *(void *)(v8 + 64) = a2;
  *(void *)(v8 + 72) = a3;
  *(void *)(v8 + 56) = a1;
  *(void *)(v8 + 96) = type metadata accessor for DIPSignpost.Config(0);
  *(void *)(v8 + 104) = swift_task_alloc();
  type metadata accessor for DIPSignpost(0);
  *(void *)(v8 + 112) = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_1D7A8146C, 0, 0);
}

uint64_t sub_1D7A8146C()
{
  if (qword_1EA8417F0 != -1) {
    swift_once();
  }
  uint64_t v1 = *(const char **)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v3 = __swift_project_value_buffer(*(void *)(v0 + 96), (uint64_t)qword_1EA847DB0);
  sub_1D78912C4(v3, (uint64_t)v1);
  DIPSignpost.init(_:)(v1, v2);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 120) = v4;
  *(void *)uint64_t v4 = v0;
  *(void *)(v4 + 8) = sub_1D7A81580;
  uint64_t v6 = *(void *)(v0 + 80);
  uint64_t v5 = *(void *)(v0 + 88);
  long long v7 = *(_OWORD *)(v0 + 64);
  *(unsigned char *)(v4 + 144) = *(unsigned char *)(v0 + 136);
  *(void *)(v4 + 96) = v6;
  *(void *)(v4 + 104) = v5;
  *(_OWORD *)(v4 + 80) = v7;
  return MEMORY[0x1F4188298](sub_1D7A818F8, 0, 0);
}

uint64_t sub_1D7A81580()
{
  *(void *)(*(void *)v1 + 128) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1D7A81850;
  }
  else {
    uint64_t v2 = sub_1D7A81694;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

uint64_t sub_1D7A81694()
{
  uint64_t v13 = v0;
  uint64_t v1 = *(void *)(v0 + 128);
  int v2 = *(unsigned __int8 *)(v0 + 137);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v4 = *(void *)(v0 + 64);
  uint64_t v5 = *(void *)(v0 + 72);
  unsigned __int8 v11 = 0;
  sub_1D7A82218(v4, v5, v3, &v11, v2, (uint64_t *)(v0 + 16));
  if (v1) {
    goto LABEL_2;
  }
  if (!*(void *)(v0 + 40))
  {
    sub_1D7871C4C(v0 + 16, &qword_1EA845AC0);
    v12[0] = 104;
    unint64_t v9 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000046, 0x80000001D7ACDC60, v12, 0, v9, 0xD00000000000005ALL, 0x80000001D7ACD9A0, v10, 0xD000000000000049, 0x80000001D7ACDCB0, 211);
    swift_willThrow();
LABEL_2:
    sub_1D78AB48C(*(void *)(v0 + 112));
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_5;
  }
  uint64_t v7 = *(void *)(v0 + 112);
  sub_1D79A0894((long long *)(v0 + 16), *(void *)(v0 + 56));
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  sub_1D78AB48C(v7);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
LABEL_5:
  return v6();
}

uint64_t sub_1D7A81850()
{
  sub_1D78AB48C(*(void *)(v0 + 112));
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1D7A818D0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(unsigned char *)(v5 + 144) = a4;
  *(void *)(v5 + 96) = a3;
  *(void *)(v5 + 104) = v4;
  *(void *)(v5 + 80) = a1;
  *(void *)(v5 + 88) = a2;
  return MEMORY[0x1F4188298](sub_1D7A818F8, 0, 0);
}

uint64_t sub_1D7A818F8()
{
  uint64_t v1 = *(void *)(v0 + 96);
  if (v1 && *(void *)(v1 + 16) && (unint64_t v2 = sub_1D7A18C10(5u), (v3 & 1) != 0))
  {
    uint64_t v4 = (void *)(*(void *)(v1 + 56) + 16 * v2);
    if (*v4 == 1702195828 && v4[1] == 0xE400000000000000) {
      char v6 = 1;
    }
    else {
      char v6 = sub_1D7A9D358();
    }
  }
  else
  {
    char v6 = 0;
  }
  *(unsigned char *)(v0 + 145) = v6 & 1;
  uint64_t v7 = *(void *)(*(void *)(v0 + 104) + 16);
  swift_beginAccess();
  uint64_t v8 = (void (*)(uint64_t))off_1EA843928;
  if (off_1EA843928)
  {
    uint64_t v9 = swift_retain();
    v8(v9);
    sub_1D78EEA8C((uint64_t)v8);
    uint64_t v10 = *(ValueMetadata **)(v0 + 40);
    unsigned __int8 v11 = *(_UNKNOWN ***)(v0 + 48);
  }
  else
  {
    uint64_t v10 = &type metadata for DeviceIdentityCommon;
    unsigned __int8 v11 = &protocol witness table for DeviceIdentityCommon;
    *(void *)(v0 + 40) = &type metadata for DeviceIdentityCommon;
    *(void *)(v0 + 48) = &protocol witness table for DeviceIdentityCommon;
    uint64_t v12 = swift_allocObject();
    *(void *)(v0 + 16) = v12;
    *(void *)(v12 + 40) = &type metadata for DeviceInformationProvider;
    *(void *)(v12 + 48) = &protocol witness table for DeviceInformationProvider;
  }
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), (uint64_t)v10);
  uint64_t v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, ValueMetadata *, _UNKNOWN **))((char *)v11[1] + *(int *)v11[1]);
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v13;
  void *v13 = v0;
  v13[1] = sub_1D7A81B20;
  uint64_t v14 = *(unsigned __int8 *)(v0 + 144);
  uint64_t v15 = *(void *)(v0 + 88);
  uint64_t v16 = *(void *)(v0 + 96);
  uint64_t v17 = *(void *)(v0 + 80);
  return v19(v17, v15, v7, v16, v14, v10, v11);
}

uint64_t sub_1D7A81B20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[15] = a1;
  v4[16] = a2;
  v4[17] = v2;
  swift_task_dealloc();
  if (v2) {
    uint64_t v5 = sub_1D7A820E4;
  }
  else {
    uint64_t v5 = sub_1D7A81C38;
  }
  return MEMORY[0x1F4188298](v5, 0, 0);
}

void sub_1D7A81C38()
{
  uint64_t v35 = v0;
  unint64_t v1 = *(void *)(v0 + 128);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = sub_1D7A9CFB8();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v2 != 2)
  {
    uint64_t v12 = *(void **)(v0 + 120);
    swift_bridgeObjectRelease();
    __int16 v33 = 228;
    unint64_t v17 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    uint64_t v15 = (void *)swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000030, 0x80000001D7ACE220, &v33, 0, v17, 0xD00000000000005ALL, 0x80000001D7ACD9A0, v18, 0xD00000000000003ELL, 0x80000001D7ACE1E0, 227);
    swift_willThrow();
    goto LABEL_10;
  }
  unint64_t v3 = *(void *)(v0 + 88);
  uint64_t v4 = *(void **)(v0 + 136);
  if (*(unsigned char *)(v0 + 145))
  {
LABEL_7:
    uint64_t v8 = *(void *)(v0 + 80);
    uint64_t v9 = sub_1D7A9BFC8();
    sub_1D7A86D68(v8, v3, 0, 0xF000000000000000, v9, v10);
    if (v4) {
      goto LABEL_8;
    }
    uint64_t v23 = *(void **)(v0 + 120);
    uint64_t v25 = *(void *)(v0 + 80);
    unint64_t v24 = *(void *)(v0 + 88);
    swift_bridgeObjectRelease();
    sub_1D7A873DC(v23, v25, v24);
    if ((v1 & 0xC000000000000001) != 0)
    {
      id v26 = (id)MEMORY[0x1D947BA10](0, *(void *)(v0 + 128));
    }
    else
    {
      if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_25;
      }
      id v26 = *(id *)(*(void *)(v0 + 128) + 32);
    }
    id v27 = v26;
    uint64_t v29 = *(void *)(v0 + 80);
    unint64_t v28 = *(void *)(v0 + 88);
    type metadata accessor for DIPKeystoreKeychain();
    static DIPKeystoreKeychain.storeKeychainCertificate(_:label:failIfDuplicate:)(v27, v29, v28, 0);

    if ((v1 & 0xC000000000000001) != 0)
    {
      id v30 = (id)MEMORY[0x1D947BA10](1, *(void *)(v0 + 128));
LABEL_21:
      swift_bridgeObjectRelease();
      static DIPKeystoreKeychain.storeKeychainCertificate(_:label:failIfDuplicate:)(v30, 0xD000000000000017, 0x80000001D7ACDAA0, 0);
      uint64_t v31 = *(void **)(v0 + 120);

      uint64_t v22 = *(void (**)(void))(v0 + 8);
      goto LABEL_11;
    }
    if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
    {
      id v30 = *(id *)(*(void *)(v0 + 128) + 40);
      goto LABEL_21;
    }
LABEL_25:
    __break(1u);
    return;
  }
  uint64_t v5 = *(void *)(v0 + 80);
  uint64_t v6 = sub_1D7A9BFC8();
  sub_1D7A86D68(v5, v3, 0, 0xF000000000000000, v6, v7);
  if (!v4)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
LABEL_8:
  unsigned __int8 v11 = v4;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void **)(v0 + 120);
  v34[0] = 0;
  id v13 = v4;
  unint64_t v14 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
  sub_1D7860544();
  uint64_t v15 = (void *)swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v11, 0xD000000000000021, 0x80000001D7ACE260, v34, 0, v14, 0xD00000000000005ALL, 0x80000001D7ACD9A0, v16, 0xD00000000000003ELL, 0x80000001D7ACE1E0, 243);
  swift_willThrow();

LABEL_10:
  __int16 v32 = 0;
  id v19 = v15;
  unint64_t v20 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
  sub_1D7860544();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v15, 0xD000000000000029, 0x80000001D7ACE1B0, &v32, 0, v20, 0xD00000000000005ALL, 0x80000001D7ACD9A0, v21, 0xD00000000000003ELL, 0x80000001D7ACE1E0, 246);
  swift_willThrow();

  uint64_t v22 = *(void (**)(void))(v0 + 8);
LABEL_11:
  v22();
}

uint64_t sub_1D7A820E4()
{
  uint64_t v8 = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  unint64_t v1 = *(void **)(v0 + 136);
  v7[0] = 0;
  id v2 = v1;
  unint64_t v3 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
  sub_1D7860544();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v1, 0xD000000000000029, 0x80000001D7ACE1B0, v7, 0, v3, 0xD00000000000005ALL, 0x80000001D7ACD9A0, v4, 0xD00000000000003ELL, 0x80000001D7ACE1E0, 246);
  swift_willThrow();

  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_1D7A82218@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 *a4@<X3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  uint64_t v90 = a6;
  int v89 = a5;
  v95[29] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t v11 = type metadata accessor for DIPSignpost.Config(0);
  MEMORY[0x1F4188790](v11, v12, v13, v14, v15, v16, v17, v18);
  unint64_t v20 = (char *)&v86 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DIPSignpost(0);
  MEMORY[0x1F4188790](v21 - 8, v22, v23, v24, v25, v26, v27, v28);
  id v30 = (char *)&v86 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v88 = *a4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9400);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D7AA4E90;
  *(void *)(inited + 32) = sub_1D7A9BFC8();
  *(void *)(inited + 40) = v32;
  *(void *)(inited + 72) = MEMORY[0x1E4FBB1A0];
  uint64_t v91 = a1;
  *(void *)(inited + 48) = a1;
  *(void *)(inited + 56) = a2;
  *(void *)(inited + 80) = sub_1D7A9BFC8();
  *(void *)(inited + 88) = v33;
  uint64_t v34 = *(void **)(v6 + 16);
  *(void *)(inited + 120) = sub_1D78C4038(0, &qword_1EA8479D8);
  *(void *)(inited + 96) = v34;
  *(void *)(inited + 128) = sub_1D7A9BFC8();
  *(void *)(inited + 136) = v35;
  uint64_t v36 = (void *)*MEMORY[0x1E4F3B9A0];
  type metadata accessor for CFString(0);
  *(void *)(inited + 168) = v37;
  *(void *)(inited + 144) = v36;
  *(void *)(inited + 176) = sub_1D7A9BFC8();
  *(void *)(inited + 184) = v38;
  *(void *)(inited + 216) = MEMORY[0x1E4FBB390];
  *(unsigned char *)(inited + 192) = 1;
  swift_bridgeObjectRetain();
  id v87 = v34;
  id v39 = v36;
  sub_1D785F2A0(inited);
  v95[0] = 0;
  if (qword_1EA841818 != -1) {
    swift_once();
  }
  uint64_t v40 = __swift_project_value_buffer(v11, (uint64_t)qword_1EA847E10);
  sub_1D78912C4(v40, (uint64_t)v20);
  DIPSignpost.init(_:)(v20, (uint64_t)v30);
  CFDictionaryRef v41 = (const __CFDictionary *)sub_1D7A9BE98();
  swift_bridgeObjectRelease();
  OSStatus v42 = SecItemCopyMatching(v41, v95);

  CFTypeRef v43 = v95[0];
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  if (v42 != -25300)
  {
    if (v42)
    {
      uint64_t v93 = 0;
      uint64_t v94 = 0xE000000000000000;
      sub_1D7A9CC48();
      sub_1D7A9C128();
      sub_1D7A9C128();
      sub_1D7A9C128();
      OSStatus v92 = v42;
      sub_1D7A9D258();
      sub_1D7A9C128();
      swift_bridgeObjectRelease();
      uint64_t v53 = v93;
      uint64_t v54 = v94;
      LOWORD(v93) = 235;
      unint64_t v55 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      uint64_t v57 = 265;
    }
    else
    {
      if (v43)
      {
        int v44 = (const void *)swift_unknownObjectRetain();
        CFTypeID v45 = CFGetTypeID(v44);
        if (v45 == SecKeyGetTypeID())
        {
          type metadata accessor for SecKey(0);
          swift_unknownObjectRetain();
          os_log_type_t v46 = (void *)swift_dynamicCastUnknownClassUnconditional();
          if (a3 && *(void *)(a3 + 16) && (unint64_t v47 = sub_1D7A18C10(1u), (v48 & 1) != 0))
          {
            OSStatus v49 = (uint64_t *)(*(void *)(a3 + 56) + 16 * v47);
            uint64_t v51 = *v49;
            unint64_t v50 = v49[1];
            swift_bridgeObjectRetain();
          }
          else
          {
            uint64_t v51 = 0;
            unint64_t v50 = 0xE000000000000000;
          }
          uint64_t v59 = HIBYTE(v50) & 0xF;
          uint64_t v60 = v51 & 0xFFFFFFFFFFFFLL;
          if ((v50 & 0x2000000000000000) != 0) {
            uint64_t v61 = HIBYTE(v50) & 0xF;
          }
          else {
            uint64_t v61 = v51 & 0xFFFFFFFFFFFFLL;
          }
          CFTypeRef v86 = v43;
          if (!v61)
          {
            swift_bridgeObjectRelease();
            goto LABEL_53;
          }
          if ((v50 & 0x1000000000000000) != 0)
          {
            uint64_t v63 = (uint64_t)sub_1D7A45460(v51, v50, 10);
            char v85 = v84;
            swift_bridgeObjectRelease();
            if ((v85 & 1) == 0) {
              goto LABEL_54;
            }
            goto LABEL_53;
          }
          if ((v50 & 0x2000000000000000) == 0)
          {
            if ((v51 & 0x1000000000000000) != 0) {
              uint64_t v62 = (unsigned __int8 *)((v50 & 0xFFFFFFFFFFFFFFFLL) + 32);
            }
            else {
              uint64_t v62 = (unsigned __int8 *)sub_1D7A9CD78();
            }
            uint64_t v63 = (uint64_t)sub_1D7A45448(v62, v60, 10);
            char v65 = v64 & 1;
LABEL_52:
            swift_bridgeObjectRelease();
            if ((v65 & 1) == 0)
            {
LABEL_54:
              LOBYTE(v93) = v88;
              uint64_t v70 = type metadata accessor for IdentityKeyWithKeychain();
              uint64_t v71 = swift_allocObject();
              swift_bridgeObjectRetain();
              id v72 = v87;
              id v73 = v87;
              id v74 = v46;
              IdentityKeyWithKeychain.init(label:privateKey:attestationType:laContext:validity:isTemporary:)(v91, a2, v74, (unsigned __int8 *)&v93, v72, (char *)v63, 0, v89 & 1);
              uint64_t v75 = v90;
              v90[3] = v70;
              v75[4] = (uint64_t)&protocol witness table for IdentityKeyWithKeychain;
              swift_unknownObjectRelease();

              *uint64_t v75 = v71;
              goto LABEL_16;
            }
LABEL_53:
            uint64_t v63 = 15;
            goto LABEL_54;
          }
          uint64_t v93 = v51;
          uint64_t v94 = v50 & 0xFFFFFFFFFFFFFFLL;
          if (v51 == 43)
          {
            if (!v59) {
              goto LABEL_77;
            }
            if (v59 != 1 && (BYTE1(v51) - 48) <= 9u)
            {
              uint64_t v63 = (BYTE1(v51) - 48);
              if (v59 == 2) {
                goto LABEL_51;
              }
              if ((BYTE2(v51) - 48) <= 9u)
              {
                uint64_t v63 = 10 * (BYTE1(v51) - 48) + (BYTE2(v51) - 48);
                uint64_t v66 = v59 - 3;
                if (v66)
                {
                  uint64_t v67 = (unsigned __int8 *)&v93 + 3;
                  while (1)
                  {
                    unsigned int v68 = *v67 - 48;
                    if (v68 > 9) {
                      goto LABEL_49;
                    }
                    uint64_t v69 = 10 * v63;
                    if ((unsigned __int128)(v63 * (__int128)10) >> 64 != (10 * v63) >> 63) {
                      goto LABEL_49;
                    }
                    uint64_t v63 = v69 + v68;
                    if (__OFADD__(v69, v68)) {
                      goto LABEL_49;
                    }
                    char v65 = 0;
                    ++v67;
                    if (!--v66) {
                      goto LABEL_52;
                    }
                  }
                }
                goto LABEL_51;
              }
            }
          }
          else
          {
            if (v51 == 45)
            {
              if (v59)
              {
                if (v59 == 1 || (BYTE1(v51) - 48) > 9u) {
                  goto LABEL_49;
                }
                if (v59 == 2)
                {
                  char v65 = 0;
                  uint64_t v63 = -(uint64_t)(BYTE1(v51) - 48);
                  goto LABEL_52;
                }
                if ((BYTE2(v51) - 48) > 9u) {
                  goto LABEL_49;
                }
                uint64_t v63 = -10 * (BYTE1(v51) - 48) - (BYTE2(v51) - 48);
                uint64_t v80 = v59 - 3;
                if (v80)
                {
                  uint64_t v81 = (unsigned __int8 *)&v93 + 3;
                  while (1)
                  {
                    unsigned int v82 = *v81 - 48;
                    if (v82 > 9) {
                      goto LABEL_49;
                    }
                    uint64_t v83 = 10 * v63;
                    if ((unsigned __int128)(v63 * (__int128)10) >> 64 != (10 * v63) >> 63) {
                      goto LABEL_49;
                    }
                    uint64_t v63 = v83 - v82;
                    if (__OFSUB__(v83, v82)) {
                      goto LABEL_49;
                    }
                    char v65 = 0;
                    ++v81;
                    if (!--v80) {
                      goto LABEL_52;
                    }
                  }
                }
LABEL_51:
                char v65 = 0;
                goto LABEL_52;
              }
              __break(1u);
LABEL_77:
              __break(1u);
            }
            if (v59 && (v51 - 48) <= 9u)
            {
              uint64_t v63 = (v51 - 48);
              if (v59 == 1) {
                goto LABEL_51;
              }
              if ((BYTE1(v51) - 48) <= 9u)
              {
                uint64_t v63 = 10 * (v51 - 48) + (BYTE1(v51) - 48);
                uint64_t v76 = v59 - 2;
                if (v76)
                {
                  unint64_t v77 = (unsigned __int8 *)&v93 + 2;
                  while (1)
                  {
                    unsigned int v78 = *v77 - 48;
                    if (v78 > 9) {
                      goto LABEL_49;
                    }
                    uint64_t v79 = 10 * v63;
                    if ((unsigned __int128)(v63 * (__int128)10) >> 64 != (10 * v63) >> 63) {
                      goto LABEL_49;
                    }
                    uint64_t v63 = v79 + v78;
                    if (__OFADD__(v79, v78)) {
                      goto LABEL_49;
                    }
                    char v65 = 0;
                    ++v77;
                    if (!--v76) {
                      goto LABEL_52;
                    }
                  }
                }
                goto LABEL_51;
              }
            }
          }
LABEL_49:
          uint64_t v63 = 0;
          char v65 = 1;
          goto LABEL_52;
        }
        swift_unknownObjectRelease();
      }
      uint64_t v93 = 0;
      uint64_t v94 = 0xE000000000000000;
      sub_1D7A9CC48();
      sub_1D7A9C128();
      sub_1D7A9C128();
      sub_1D7A9C128();
      uint64_t v53 = v93;
      uint64_t v54 = v94;
      LOWORD(v93) = 235;
      unint64_t v55 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      uint64_t v57 = 270;
    }
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, v53, v54, (__int16 *)&v93, 0, v55, 0xD00000000000005ALL, 0x80000001D7ACD9A0, v56, 0xD000000000000041, 0x80000001D7ACE100, v57);
    swift_willThrow();
LABEL_16:
    sub_1D78AB48C((uint64_t)v30);
    return swift_unknownObjectRelease();
  }
  sub_1D78AB48C((uint64_t)v30);
  uint64_t v52 = v90;
  *(_OWORD *)uint64_t v90 = 0u;
  *((_OWORD *)v52 + 1) = 0u;
  v52[4] = 0;
  return swift_unknownObjectRelease();
}

uint64_t IdentityKeyWithKeychain.__allocating_init(label:privateKey:attestationType:laContext:validity:isTemporary:)(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 *a4, void *a5, char *a6, char a7, int a8)
{
  int v15 = a7 & 1;
  uint64_t v16 = swift_allocObject();
  IdentityKeyWithKeychain.init(label:privateKey:attestationType:laContext:validity:isTemporary:)(a1, a2, a3, a4, a5, a6, v15, a8);
  return v16;
}

uint64_t sub_1D7A82BA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 *a4@<X3>, uint64_t *a5@<X8>)
{
  unsigned __int8 v6 = *a4;
  return sub_1D7A82218(a1, a2, a3, &v6, 0, a5);
}

uint64_t sub_1D7A82BD4(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = sub_1D7A9BFC8();
  sub_1D7A86D68(a1, a2, 0, 0xF000000000000000, v5, v6);
  if (!v2)
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = sub_1D7A9BFC8();
    sub_1D7A86D68(a1, a2, 0, 0xF000000000000000, v7, v8);
  }
  return swift_bridgeObjectRelease();
}

unint64_t static DIPKeystoreKeychain.deleteAll()()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF99C0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D7AA9780;
  unint64_t v1 = (void *)*MEMORY[0x1E4F3B988];
  uint64_t v2 = (void *)*MEMORY[0x1E4F3B998];
  unint64_t v3 = (void **)MEMORY[0x1E4F3B980];
  *(void *)(inited + 32) = *MEMORY[0x1E4F3B988];
  *(void *)(inited + 40) = v2;
  uint64_t v4 = *v3;
  uint64_t v5 = (void *)*MEMORY[0x1E4F3B9A0];
  *(void *)(inited + 48) = *v3;
  *(void *)(inited + 56) = v5;
  unint64_t v6 = (void *)*MEMORY[0x1E4F3B990];
  *(void *)(inited + 64) = *MEMORY[0x1E4F3B990];
  uint64_t v29 = inited;
  unint64_t result = sub_1D7A9C338();
  uint64_t v8 = v29;
  if ((v29 & 0xC000000000000001) != 0 || *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 5uLL)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF7C68);
    id v9 = v1;
    id v10 = v2;
    id v11 = v4;
    id v12 = v5;
    id v13 = v6;
    uint64_t v14 = 0;
    while (1)
    {
      id v15 = (v29 & 0xC000000000000001) != 0
          ? (id)MEMORY[0x1D947BA10](v14, v8)
          : *(id *)(v8 + 8 * v14 + 32);
      uint64_t v16 = v15;
      uint64_t v27 = sub_1D7A9BFC8();
      uint64_t v28 = v17;
      uint64_t v18 = (void *)sub_1D7A9CFF8();
      id v19 = v16;
      swift_bridgeObjectRetain();
      id v20 = v16;
      unint64_t result = sub_1D7A18684(v27, v28);
      if (v21) {
        break;
      }
      v18[(result >> 6) + 8] |= 1 << result;
      uint64_t v22 = (uint64_t *)(v18[6] + 16 * result);
      *uint64_t v22 = v27;
      v22[1] = v28;
      *(void *)(v18[7] + 8 * result) = v20;
      uint64_t v23 = v18[2];
      BOOL v24 = __OFADD__(v23, 1);
      uint64_t v25 = v23 + 1;
      if (v24) {
        goto LABEL_12;
      }
      ++v14;
      void v18[2] = v25;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA847960);
      swift_arrayDestroy();
      type metadata accessor for CFString(0);
      CFDictionaryRef v26 = (const __CFDictionary *)sub_1D7A9BE98();
      swift_release();
      SecItemDelete(v26);

      uint64_t v8 = v29;
      if (v14 == 5) {
        return swift_bridgeObjectRelease();
      }
    }
    __break(1u);
LABEL_12:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t DIPKeystoreKeychain.deinit()
{
  return v0;
}

uint64_t DIPKeystoreKeychain.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_1D7A82F38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(**(void **)v7 + 120)
                                                                                              + **(int **)(**(void **)v7 + 120));
  uint64_t v16 = (void *)swift_task_alloc();
  *(void *)(v8 + 16) = v16;
  *uint64_t v16 = v8;
  v16[1] = sub_1D786EC1C;
  return v18(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_1D7A83090@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 *a4@<X3>, uint64_t *a5@<X8>)
{
  unsigned __int8 v6 = *a4;
  return sub_1D7A82218(a1, a2, a3, &v6, 0, a5);
}

uint64_t IdentityKeyWithKeychain.init(label:privateKey:attestationType:laContext:validity:isTemporary:)(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 *a4, void *a5, char *a6, int a7, int a8)
{
  uint64_t v9 = v8;
  LODWORD(v151) = a8;
  LODWORD(v148) = a7;
  unsigned long long v149 = a6;
  id v154 = a5;
  uint64_t v141 = sub_1D7A9B6C8();
  uint64_t v140 = *(void *)(v141 - 8);
  MEMORY[0x1F4188790](v141, v14, v15, v16, v17, v18, v19, v20);
  uint64_t v138 = (char *)&v136 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v139 = sub_1D7A9B708();
  uint64_t v137 = *(void *)(v139 - 8);
  MEMORY[0x1F4188790](v139, v22, v23, v24, v25, v26, v27, v28);
  id v30 = (char *)&v136 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_1D7A9B698();
  uint64_t v144 = *(void *)(v31 - 8);
  uint64_t v39 = MEMORY[0x1F4188790](v31, v32, v33, v34, v35, v36, v37, v38);
  uint64_t v142 = (char *)&v136 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v39, v41, v42, v43, v44, v45, v46, v47);
  unsigned long long v143 = (id *)((char *)&v136 - v48);
  uint64_t v49 = sub_1D7A9B738();
  uint64_t v50 = *(void *)(v49 - 8);
  uint64_t v152 = v49;
  uint64_t v153 = v50;
  uint64_t v58 = MEMORY[0x1F4188790](v49, v51, v52, v53, v54, v55, v56, v57);
  uint64_t v146 = (char *)&v136 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v58, v60, v61, v62, v63, v64, v65, v66);
  uint64_t v145 = (char *)&v136 - v67;
  uint64_t v68 = sub_1D7A9C838();
  uint64_t v147 = *(void *)(v68 - 8);
  MEMORY[0x1F4188790](v68, v69, v70, v71, v72, v73, v74, v75);
  unint64_t v77 = (char *)&v136 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = *a4;
  *(_OWORD *)(v9 + 56) = xmmword_1D7AA0AC0;
  *(unsigned char *)(v9 + 72) = 0;
  *(_WORD *)(v9 + 74) = 0;
  *(unsigned char *)(v9 + 76) = 0;
  *(unsigned char *)(v9 + 88) = 0;
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  *(void *)(v9 + 32) = a3;
  SecKeyRef v150 = a3;
  CFDictionaryRef v79 = SecKeyCopyAttributes(v150);
  if (!v79)
  {
    *(void *)(v9 + 40) = 0;
    uint64_t v92 = *(void *)(v9 + 40);
    if (v92) {
      goto LABEL_24;
    }
LABEL_42:
    long long aBlock = 0u;
    long long v157 = 0u;
    goto LABEL_43;
  }
  CFDictionaryRef v80 = v79;
  *(void *)&long long aBlock = 0;
  sub_1D7A9BEA8();

  uint64_t v81 = aBlock;
  *(void *)(v9 + 40) = aBlock;
  unsigned int v82 = (uint64_t *)(v9 + 40);
  if (!v81 || !*(void *)(v81 + 16) || (uint64_t v83 = sub_1D7A18684(1667457889, 0xE400000000000000), (v84 & 1) == 0))
  {
LABEL_23:
    uint64_t v92 = *v82;
    if (*v82) {
      goto LABEL_24;
    }
    goto LABEL_42;
  }
  sub_1D78907D8(*(void *)(v81 + 56) + 32 * v83, (uint64_t)&v160);
  sub_1D7860E50(&v160, &aBlock);
  sub_1D78907D8((uint64_t)&aBlock, (uint64_t)&v160);
  type metadata accessor for SecAccessControl(0);
  swift_dynamicCast();
  char v85 = v155;
  Constraints = (void *)SecAccessControlGetConstraints();
  if (!Constraints)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&aBlock);

    goto LABEL_23;
  }
  id v136 = v85;
  id v87 = Constraints;
  uint64_t v155 = 0;
  id v88 = v87;
  sub_1D7A9BEA8();

  int v89 = v155;
  if (!v155)
  {
    long long v160 = 0u;
    long long v161 = 0u;
LABEL_20:

    sub_1D7871C4C((uint64_t)&v160, (uint64_t *)&unk_1EBDF9680);
LABEL_22:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&aBlock);
    goto LABEL_23;
  }
  if (v155[2] && (uint64_t v90 = sub_1D7A18684(1852273519, 0xE400000000000000), (v91 & 1) != 0))
  {
    sub_1D78907D8(v89[7] + 32 * v90, (uint64_t)&v160);
  }
  else
  {
    long long v160 = 0u;
    long long v161 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v161 + 1)) {
    goto LABEL_20;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA843A68);
  if ((swift_dynamicCast() & 1) == 0)
  {

    goto LABEL_22;
  }
  uint64_t v93 = v155;
  if (v155[2] && (uint64_t v94 = sub_1D7A18684(1953525616, 0xE400000000000000), (v95 & 1) != 0))
  {
    sub_1D78907D8(v93[7] + 32 * v94, (uint64_t)&v160);
  }
  else
  {
    long long v160 = 0u;
    long long v161 = 0u;
  }

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&aBlock);
  if (*((void *)&v161 + 1))
  {
    if (swift_dynamicCast()) {
      char v103 = (char)v155;
    }
    else {
      char v103 = 0;
    }
  }
  else
  {
    sub_1D7871C4C((uint64_t)&v160, (uint64_t *)&unk_1EBDF9680);
    char v103 = 0;
  }
  *(unsigned char *)(v9 + 74) = v103;
  uint64_t v92 = *v82;
  if (!*v82) {
    goto LABEL_42;
  }
LABEL_24:
  uint64_t v96 = sub_1D7A9BFC8();
  if (*(void *)(v92 + 16) && (uint64_t v98 = sub_1D7A18684(v96, v97), (v99 & 1) != 0))
  {
    sub_1D78907D8(*(void *)(v92 + 56) + 32 * v98, (uint64_t)&aBlock);
  }
  else
  {
    long long aBlock = 0u;
    long long v157 = 0u;
  }
  swift_bridgeObjectRelease();
  if (*((void *)&v157 + 1))
  {
    int v100 = swift_dynamicCast();
    if (v100) {
      uint64_t v101 = v160;
    }
    else {
      uint64_t v101 = 0;
    }
    if (v100) {
      uint64_t v102 = *((void *)&v160 + 1);
    }
    else {
      uint64_t v102 = 0;
    }
    goto LABEL_44;
  }
LABEL_43:
  sub_1D7871C4C((uint64_t)&aBlock, (uint64_t *)&unk_1EBDF9680);
  uint64_t v101 = 0;
  uint64_t v102 = 0;
LABEL_44:
  if (!*MEMORY[0x1E4F3B8A0])
  {
LABEL_75:
    swift_bridgeObjectRelease();
    __break(1u);
    JUMPOUT(0x1D7A83D3CLL);
  }
  uint64_t v104 = sub_1D7A9BFC8();
  if (v102)
  {
    if (v101 == v104 && v102 == v105) {
      char v106 = 1;
    }
    else {
      char v106 = sub_1D7A9D358();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    char v106 = 0;
  }
  swift_bridgeObjectRelease();
  *(unsigned char *)(v9 + 75) = v106 & 1;
  *(void *)(v9 + 48) = v154;
  *(unsigned char *)(v9 + 73) = v151 & 1;
  switch(v78)
  {
    case 1:
    case 2:
    case 3:
      char v108 = sub_1D7A9D358();
      id v109 = v154;
      swift_bridgeObjectRelease();
      if (v108) {
        goto LABEL_59;
      }
      if (v78 == 1)
      {
LABEL_57:
        swift_bridgeObjectRelease();
      }
      else
      {
        char v110 = sub_1D7A9D358();
        swift_bridgeObjectRelease();
        if ((v110 & 1) == 0)
        {

          *(unsigned char *)(v9 + 72) = 2;
          *(void *)(v9 + 80) = 0;
          return v9;
        }
      }
LABEL_59:
      *(unsigned char *)(v9 + 72) = v78;
      sub_1D78C4038(0, &qword_1EA847970);
      *(void *)&long long aBlock = MEMORY[0x1E4FBC860];
      sub_1D7A8875C(&qword_1EA847978, MEMORY[0x1E4FBCC70]);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA847980);
      sub_1D7871DDC(&qword_1EA847988, &qword_1EA847980);
      sub_1D7A9CBA8();
      sub_1D78C4038(0, (unint64_t *)&qword_1EBDF9DB0);
      unint64_t v111 = (void *)sub_1D7A9C7D8();
      uint64_t v112 = sub_1D7A9C848();

      (*(void (**)(char *, uint64_t))(v147 + 8))(v77, v68);
      *(void *)(v9 + 80) = v112;
      uint64_t v113 = 15;
      if ((v148 & 1) == 0) {
        uint64_t v113 = (uint64_t)v149;
      }
      BOOL v114 = __OFSUB__(v113, 1);
      uint64_t v115 = v113 - 1;
      if (v114)
      {
        __break(1u);
LABEL_74:
        __break(1u);
        goto LABEL_75;
      }
      if (v115 <= 1) {
        uint64_t v116 = 1;
      }
      else {
        uint64_t v116 = v115;
      }
      unint64_t v117 = v146;
      sub_1D7A9B728();
      if ((unsigned __int128)(v116 * (__int128)60) >> 64 != (60 * v116) >> 63) {
        goto LABEL_74;
      }
      unsigned long long v149 = v30;
      uint64_t v118 = v143;
      *unsigned long long v143 = 60 * v116;
      uint64_t v119 = v144;
      uint64_t v120 = *(void (**)(void *, void, uint64_t))(v144 + 104);
      v120(v118, *MEMORY[0x1E4FBCAE8], v31);
      uint64_t v121 = v145;
      MEMORY[0x1D947A4C0](v117, v118);
      uint64_t v122 = v117;
      uint64_t v123 = *(void (**)(void *, uint64_t))(v119 + 8);
      v123(v118, v31);
      uint64_t v124 = *(void (**)(char *, uint64_t))(v153 + 8);
      v153 += 8;
      uint64_t v151 = v124;
      v124(v122, v152);
      if (*(void *)(v9 + 80))
      {
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v148 = v9;
        uint64_t v126 = v121;
        uint64_t v127 = v118;
        long long v128 = v142;
        uint64_t v129 = ObjectType;
        v120(v127, *MEMORY[0x1E4FBCAD0], v31);
        *long long v128 = 0;
        v120(v128, *MEMORY[0x1E4FBCAA8], v31);
        MEMORY[0x1D947B650](v126, v127, v128, v129);
        v123(v128, v31);
        uint64_t v130 = v127;
        uint64_t v121 = v126;
        uint64_t v9 = v148;
        v123(v130, v31);
        if (*(void *)(v9 + 80))
        {
          swift_getObjectType();
          uint64_t v131 = swift_allocObject();
          swift_weakInit();
          uint64_t v158 = sub_1D7A887DC;
          uint64_t v159 = v131;
          *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
          *((void *)&aBlock + 1) = 1107296256;
          *(void *)&long long v157 = sub_1D79899E4;
          *((void *)&v157 + 1) = &block_descriptor_15;
          uint64_t v132 = _Block_copy(&aBlock);
          swift_retain();
          uint64_t v133 = v149;
          sub_1D7A9B6E8();
          uint64_t v134 = v138;
          sub_1D7A83DA0();
          sub_1D7A9C858();
          _Block_release(v132);
          (*(void (**)(char *, uint64_t))(v140 + 8))(v134, v141);
          (*(void (**)(char *, uint64_t))(v137 + 8))(v133, v139);
          swift_release();
          swift_release();
          if (*(void *)(v9 + 80))
          {
            swift_getObjectType();
            sub_1D7A9C878();
          }
        }
      }

      v151(v121, v152);
      *(unsigned char *)(v9 + 88) = 1;
      return v9;
    default:
      id v107 = v154;
      goto LABEL_57;
  }
}

uint64_t sub_1D7A83D4C()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    *(unsigned char *)(result + 76) = 1;
    return swift_release();
  }
  return result;
}

uint64_t sub_1D7A83DA0()
{
  return sub_1D7A9CBA8();
}

uint64_t IdentityKeyWithKeychain.deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1D7A9B6C8();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v4, v5, v6, v7, v8, v9, v10);
  id v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1D7A9B708();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13, v15, v16, v17, v18, v19, v20, v21);
  uint64_t v23 = (char *)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v0 + 73) == 1)
  {
    uint64_t v38 = v2;
    uint64_t v39 = v3;
    uint64_t v25 = *(void *)(v0 + 16);
    unint64_t v24 = *(void *)(v0 + 24);
    uint64_t v26 = sub_1D7A9BFC8();
    unint64_t v28 = v27;
    swift_bridgeObjectRetain();
    sub_1D7A86D68(v25, v24, 0, 0xF000000000000000, v26, v28);
    uint64_t v29 = v14;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v31 = *(void *)(v1 + 16);
    unint64_t v30 = *(void *)(v1 + 24);
    uint64_t v32 = sub_1D7A9BFC8();
    unint64_t v34 = v33;
    swift_bridgeObjectRetain();
    sub_1D7A86D68(v31, v30, 0, 0xF000000000000000, v32, v34);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v14 = v29;
    uint64_t v2 = v38;
    uint64_t v3 = v39;
  }
  if (*(unsigned char *)(v1 + 88) == 1)
  {
    if (*(void *)(v1 + 80))
    {
      swift_getObjectType();
      aBlock[4] = nullsub_1;
      aBlock[5] = 0;
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1D79899E4;
      aBlock[3] = &block_descriptor_9_1;
      uint64_t v35 = _Block_copy(aBlock);
      sub_1D7A9B6E8();
      sub_1D7A83DA0();
      sub_1D7A9C858();
      _Block_release(v35);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v23, v13);
      if (*(void *)(v1 + 80))
      {
        swift_getObjectType();
        sub_1D7A9C868();
      }
    }
    *(unsigned char *)(v1 + 88) = 0;
  }
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  sub_1D7871BDC(*(void *)(v1 + 56), *(void *)(v1 + 64));
  swift_unknownObjectRelease();
  return v1;
}

uint64_t IdentityKeyWithKeychain.__deallocating_deinit()
{
  IdentityKeyWithKeychain.deinit();
  return swift_deallocClassInstance();
}

id sub_1D7A841F4()
{
  return *(id *)(v0 + 32);
}

SecKeyRef sub_1D7A84220()
{
  SecKeyRef v1 = SecKeyCopyPublicKey(*(SecKeyRef *)(v0 + 32));
  if (!v1)
  {
    __int16 v5 = 242;
    unint64_t v2 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000002ALL, 0x80000001D7ACDD00, &v5, 0, v2, 0xD00000000000005ALL, 0x80000001D7ACD9A0, v3, 0xD000000000000016, 0x80000001D7ACDD30, 541);
    swift_willThrow();
  }
  return v1;
}

uint64_t sub_1D7A84310()
{
  error[1] = *(CFErrorRef *)MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(v0 + 56);
  unint64_t v1 = *(void *)(v0 + 64);
  uint64_t v3 = v2;
  if (v1 >> 60 != 15) {
    goto LABEL_10;
  }
  error[0] = 0;
  uint64_t v4 = SecKeyCopyPublicKey(*(SecKeyRef *)(v0 + 32));
  if (v4)
  {
    __int16 v5 = v4;
    CFDataRef v6 = SecKeyCopyExternalRepresentation(v4, error);
    if (v6)
    {
      CFDataRef v7 = v6;
      uint64_t v8 = sub_1D7A9B028();
      uint64_t v3 = v9;
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v3 = 0xF000000000000000;
    }
    uint64_t v12 = *(void *)(v0 + 56);
    unint64_t v13 = *(void *)(v0 + 64);
    *(void *)(v0 + 56) = v8;
    *(void *)(v0 + 64) = v3;
    sub_1D7871BDC(v12, v13);
    if (*(void *)(v0 + 64) >> 60 == 15)
    {
      __int16 v15 = 242;
      errorFromCFError(_:_:_:)(error[0], 0xD000000000000041, 0x80000001D7ACDD70, &v15);
      swift_willThrow();

      return v3;
    }
    uint64_t v3 = *(void *)(v0 + 56);
    sub_1D786E9D8(v3, *(void *)(v0 + 64));

LABEL_10:
    sub_1D786E9D8(v2, v1);
    return v3;
  }
  __int16 v15 = 242;
  unint64_t v10 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
  sub_1D7860544();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000002ALL, 0x80000001D7ACDD00, &v15, 0, v10, 0xD00000000000005ALL, 0x80000001D7ACD9A0, v11, 0xD00000000000001ALL, 0x80000001D7ACDD50, 561);
  swift_willThrow();
  return v3;
}

uint64_t sub_1D7A8450C(uint64_t a1, unint64_t a2)
{
  CFDataRef v6 = (id *)MEMORY[0x1E4F3BA70];
  if (!*(unsigned char *)(v2 + 75)) {
    CFDataRef v6 = (id *)MEMORY[0x1E4F3BA38];
  }
  id v7 = *v6;
  SecKeyRef.signSHA256Digest(_:algorithm:)(a1, a2);
  uint64_t v9 = v8;

  if (v3)
  {
    __int16 v14 = 0;
    id v10 = v3;
    unint64_t v11 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v3, 0, 0xE000000000000000, &v14, 0, v11, 0xD00000000000005ALL, 0x80000001D7ACD9A0, v12, 0x293A5F286E676973, 0xE800000000000000, 584);
    swift_willThrow();
  }
  return v9;
}

uint64_t sub_1D7A8465C()
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v0 + 16);
  unint64_t v3 = *(void *)(v0 + 24);
  uint64_t v5 = sub_1D7A9BFC8();
  unint64_t v7 = v6;
  swift_bridgeObjectRetain();
  sub_1D7A86D68(v4, v3, 0, 0xF000000000000000, v5, v7);
  if (v2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(unsigned char *)(v0 + 73) == 1)
    {
      uint64_t v10 = *(void *)(v0 + 16);
      unint64_t v9 = *(void *)(v0 + 24);
      uint64_t v11 = sub_1D7A9BFC8();
      unint64_t v13 = v12;
      swift_bridgeObjectRetain();
      sub_1D7A86D68(v10, v9, 0, 0xF000000000000000, v11, v13);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRetain();
    uint64_t v14 = sub_1D7A847D0();
    uint64_t v16 = v15;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 16) = v14;
    *(void *)(v0 + 24) = v16;
    swift_bridgeObjectRelease();
    unint64_t v18 = *(void *)(v0 + 24);
    uint64_t v17 = *(void **)(v0 + 32);
    uint64_t v19 = *(void *)(v0 + 16);
    swift_bridgeObjectRetain();
    sub_1D7A873DC(v17, v19, v18);
    uint64_t result = swift_bridgeObjectRelease();
    *(_WORD *)(v0 + 72) = 2;
  }
  return result;
}

uint64_t sub_1D7A847D0()
{
  sub_1D791118C();
  sub_1D7A9CA28();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8479C0);
  sub_1D7871DDC((unint64_t *)&unk_1EA8479C8, &qword_1EA8479C0);
  uint64_t v0 = sub_1D7A9BF38();
  swift_bridgeObjectRelease();
  return v0;
}

void sub_1D7A848C0(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 72);
}

uint64_t sub_1D7A848CC()
{
  return *(unsigned __int8 *)(v0 + 74);
}

uint64_t sub_1D7A848D4()
{
  *(void *)(v1 + 136) = v0;
  return MEMORY[0x1F4188298](sub_1D7A848F4, 0, 0);
}

uint64_t sub_1D7A848F4()
{
  uint64_t v8 = v0;
  uint64_t v1 = *(void **)(v0[17] + 48);
  v0[18] = v1;
  if (v1)
  {
    v0[2] = v0;
    v0[7] = v0 + 15;
    v0[3] = sub_1D7A84AEC;
    uint64_t v2 = swift_continuation_init();
    v0[10] = MEMORY[0x1E4F143A8];
    v0[11] = 0x40000000;
    v0[12] = sub_1D7A84DA8;
    v0[13] = &block_descriptor_10;
    v0[14] = v2;
    objc_msgSend(v1, sel_authMethodWithReply_, v0 + 10);
    return MEMORY[0x1F41881E8](v0 + 2);
  }
  else
  {
    v7[0] = 105;
    unint64_t v3 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000028, 0x80000001D7ACDDC0, v7, 0, v3, 0xD00000000000005ALL, 0x80000001D7ACD9A0, v4, 0x6874654D68747561, 0xEC0000002928646FLL, 634);
    swift_willThrow();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
}

uint64_t sub_1D7A84AEC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 152) = v1;
  if (v1) {
    uint64_t v2 = sub_1D7A84C64;
  }
  else {
    uint64_t v2 = sub_1D7A84BFC;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

uint64_t sub_1D7A84BFC()
{
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 128);
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return v3(v1, v2);
}

uint64_t sub_1D7A84C64()
{
  uint64_t v9 = v0;
  uint64_t v2 = (void *)v0[18];
  uint64_t v1 = (void *)v0[19];
  swift_willThrow();
  v8[0] = 249;
  id v3 = v1;
  unint64_t v4 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
  sub_1D7860544();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v1, 0xD000000000000032, 0x80000001D7ACDE10, v8, 0, v4, 0xD00000000000005ALL, 0x80000001D7ACD9A0, v5, 0x6874654D68747561, 0xEC0000002928646FLL, 639);
  swift_willThrow();

  unint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_1D7A84DA8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBDF9740);
    swift_allocError();
    *uint64_t v5 = a3;
    id v6 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    if (a2)
    {
      id v8 = a2;
      uint64_t v9 = sub_1D7A9B028();
      unint64_t v11 = v10;
    }
    else
    {
      uint64_t v9 = 0;
      unint64_t v11 = 0xF000000000000000;
    }
    v12[0] = v9;
    v12[1] = v11;
    sub_1D7871D78((uint64_t)v12, *(void *)(*(void *)(v3 + 64) + 40), &qword_1EA8425F0);
    return swift_continuation_throwingResume();
  }
}

void *sub_1D7A84E9C()
{
  return sub_1D7A86350();
}

void sub_1D7A84EB4(char *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 74)) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (*(unsigned char *)(v1 + 75)) {
    char v3 = v2;
  }
  else {
    char v3 = *(unsigned char *)(v1 + 74);
  }
  *a1 = v3;
}

id sub_1D7A84ED8()
{
  return *(id *)(*(void *)v0 + 32);
}

SecKeyRef sub_1D7A84F08()
{
  return sub_1D7A84220();
}

uint64_t sub_1D7A84F2C()
{
  return sub_1D7A84310();
}

uint64_t sub_1D7A84F50(uint64_t a1, unint64_t a2)
{
  return sub_1D7A8450C(a1, a2);
}

void *sub_1D7A84F74()
{
  return sub_1D7A86350();
}

void sub_1D7A84F98(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(*(void *)v1 + 72);
}

uint64_t sub_1D7A84FA8()
{
  return sub_1D7A8465C();
}

uint64_t sub_1D7A84FCC()
{
  return *(unsigned __int8 *)(*(void *)v0 + 74);
}

uint64_t sub_1D7A84FD8()
{
  uint64_t v2 = *v0;
  char v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *char v3 = v1;
  v3[1] = sub_1D78F4808;
  v3[17] = v2;
  return MEMORY[0x1F4188298](sub_1D7A848F4, 0, 0);
}

void sub_1D7A85084(char *a1@<X8>)
{
}

uint64_t copyPublicKeyDataFromCertificateString(_:)(uint64_t a1, uint64_t a2)
{
  char v3 = createCertificateFromString(_:)(*(Swift::String *)&a1);
  if (!v4)
  {
    uint64_t v5 = v3;
    id v6 = SecCertificateCopyKey(v3);
    if (v6 && (v7 = v6, uint64_t v2 = copyPublicKeyDataFromSecKeyPublic(_:)(v6), v9 = v8, v7, v9 >> 60 != 15))
    {
    }
    else
    {
      __int16 v12 = 0;
      uint64_t v2 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000002ALL, 0x80000001D7ACDE50, &v12, 0, v2, 0xD00000000000005ALL, 0x80000001D7ACD9A0, v10, 0xD00000000000002ALL, 0x80000001D7ACDE80, 735);
      swift_willThrow();
    }
  }
  return v2;
}

SecCertificateRef __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> createCertificateFromString(_:)(Swift::String a1)
{
  uint64_t v2 = sub_1D7A9AFB8();
  if (v3 >> 60 == 15)
  {
    __int16 v13 = 119;
    unint64_t v4 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000023, 0x80000001D7ACDEB0, &v13, 0, v4, 0xD00000000000005ALL, 0x80000001D7ACD9A0, v5, 0xD00000000000001FLL, 0x80000001D7ACDEE0, 742);
    swift_willThrow();
  }
  else
  {
    uint64_t v6 = v2;
    unint64_t v7 = v3;
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFDataRef v9 = (const __CFData *)sub_1D7A9AFF8();
    uint64_t v1 = SecCertificateCreateWithData(v8, v9);

    if (v1)
    {
      sub_1D7871BDC(v6, v7);
    }
    else
    {
      __int16 v12 = 121;
      uint64_t v1 = (__SecCertificate *)sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000027, 0x80000001D7ACDF00, &v12, 0, (uint64_t)v1, 0xD00000000000005ALL, 0x80000001D7ACD9A0, v10, 0xD00000000000001FLL, 0x80000001D7ACDEE0, 745);
      swift_willThrow();
      sub_1D7871BDC(v6, v7);
    }
  }
  return v1;
}

uint64_t copyPublicKeyDataFromSecKeyPublic(_:)(__SecKey *a1)
{
  error[1] = *(CFErrorRef *)MEMORY[0x1E4F143B8];
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v4, v5, v6, v7, v8, v9, v10);
  __int16 v12 = (char *)&v21[-4] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  error[0] = 0;
  CFDataRef v13 = SecKeyCopyExternalRepresentation(a1, error);
  if (v13)
  {
    CFDataRef v14 = v13;
    uint64_t v15 = sub_1D7A9B028();
  }
  else
  {
    v21[0] = 0;
    errorFromCFError(_:_:_:)(error[0], 0xD00000000000002DLL, 0x80000001D7ACDF30, v21);
    uint64_t v17 = v16;
    if (qword_1EBDF9DC8 != -1) {
      swift_once();
    }
    uint64_t v18 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE70);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v12, v18, v2);
    DIPLogError(_:message:log:)(v17, 0, 0xE000000000000000);
    _s13CoreIDVShared9AnalyticsC9sendErroryys0E0_pFZ_0(v17);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);
    return 0;
  }
  return v15;
}

uint64_t sub_1D7A855C0(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, unsigned __int8 *a5)
{
  uint64_t v10 = sub_1D7A9B1A8();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10, v12, v13, v14, v15, v16, v17, v18);
  uint64_t v20 = (char *)v27 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v21 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v21) {
    goto LABEL_9;
  }
  uint64_t v22 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    uint64_t v22 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v22)
  {
    uint64_t v23 = *a5;
    v28[0] = a1;
    v28[1] = a2;
    swift_bridgeObjectRetain();
    sub_1D7A9C128();
    sub_1D7A9C128();
    switch(v23)
    {
      case 1:
        sub_1D7A9C128();
        break;
      case 2:
        sub_1D7A9B198();
        sub_1D7A9B158();
        (*(void (**)(char *, uint64_t))(v11 + 8))(v20, v10);
        v27[0] = 46;
        v27[1] = 0xE100000000000000;
        sub_1D7A9C128();
        swift_bridgeObjectRelease();
        sub_1D7A9C128();
        swift_bridgeObjectRelease();
        break;
      default:
        return v28[0];
    }
    return v28[0];
  }
  else
  {
LABEL_9:
    LOWORD(v28[0]) = 105;
    unint64_t v24 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000041, 0x80000001D7ACE290, (__int16 *)v28, 0, v24, 0xD00000000000005ALL, 0x80000001D7ACD9A0, v25, 0xD000000000000024, 0x80000001D7ACE2E0, 179);
    return swift_willThrow();
  }
}

void sub_1D7A85870(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, CFTypeRef *a5)
{
  uint64_t v10 = sub_1D7A9B5F8();
  uint64_t v51 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10, v11, v12, v13, v14, v15, v16, v17);
  uint64_t v50 = (char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9400);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D7AA4E80;
  *(void *)(inited + 32) = sub_1D7A9BFC8();
  *(void *)(inited + 40) = v20;
  uint64_t v21 = MEMORY[0x1E4FBB1A0];
  *(void *)(inited + 72) = MEMORY[0x1E4FBB1A0];
  uint64_t v52 = a1;
  *(void *)(inited + 48) = a1;
  *(void *)(inited + 56) = a2;
  *(void *)(inited + 80) = sub_1D7A9BFC8();
  *(void *)(inited + 88) = v22;
  *(void *)(inited + 120) = v21;
  *(void *)(inited + 96) = a3;
  *(void *)(inited + 104) = a4;
  *(void *)(inited + 128) = sub_1D7A9BFC8();
  *(void *)(inited + 136) = v23;
  *(void *)(inited + 168) = MEMORY[0x1E4FBB390];
  *(unsigned char *)(inited + 144) = 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1D785F2A0(inited);
  CFDictionaryRef v24 = (const __CFDictionary *)sub_1D7A9BE98();
  swift_bridgeObjectRelease();
  OSStatus v25 = SecItemCopyMatching(v24, a5);

  if (v25 != -25300 && v25)
  {
    if (qword_1EBDF9DC8 != -1) {
      swift_once();
    }
    uint64_t v26 = v10;
    uint64_t v27 = __swift_project_value_buffer(v10, (uint64_t)qword_1EBDFBE70);
    swift_beginAccess();
    uint64_t v28 = v51;
    uint64_t v29 = v50;
    (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v50, v27, v26);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    unint64_t v30 = sub_1D7A9B5D8();
    int v31 = sub_1D7A9C758();
    if (os_log_type_enabled(v30, (os_log_type_t)v31))
    {
      int v46 = v31;
      os_log_t v48 = v30;
      uint64_t v32 = a3;
      uint64_t v33 = swift_slowAlloc();
      uint64_t v47 = swift_slowAlloc();
      uint64_t v53 = v47;
      *(_DWORD *)uint64_t v33 = 136315650;
      swift_bridgeObjectRetain();
      uint64_t v55 = sub_1D7923300(v52, a2, &v53);
      sub_1D7A9C9E8();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v33 + 12) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v49 = v32;
      uint64_t v55 = sub_1D7923300(v32, a4, &v53);
      sub_1D7A9C9E8();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v33 + 22) = 2082;
      CFStringRef v34 = SecCopyErrorMessageString(v25, 0);
      if (v34)
      {
        uint64_t v35 = (__CFString *)v34;
        uint64_t v36 = sub_1D7A9BFC8();
        unint64_t v38 = v37;
      }
      else
      {
        uint64_t v36 = 0;
        unint64_t v38 = 0xE000000000000000;
      }
      uint64_t v55 = sub_1D7923300(v36, v38, &v53);
      sub_1D7A9C9E8();
      swift_bridgeObjectRelease();
      os_log_t v39 = v48;
      _os_log_impl(&dword_1D7853000, v48, (os_log_type_t)v46, "coreidvd: failed to query the key chain item: label = %s, class = %{public}s, CFErrorRef error = %{public}s", (uint8_t *)v33, 0x20u);
      uint64_t v40 = v47;
      swift_arrayDestroy();
      MEMORY[0x1D947D740](v40, -1, -1);
      MEMORY[0x1D947D740](v33, -1, -1);

      (*(void (**)(char *, uint64_t))(v51 + 8))(v50, v26);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v28 + 8))(v29, v26);
    }
    uint64_t v53 = 0;
    unint64_t v54 = 0xE000000000000000;
    sub_1D7A9CC48();
    sub_1D7A9C128();
    sub_1D7A9C128();
    sub_1D7A9C128();
    sub_1D7A9C128();
    uint64_t v41 = v53;
    uint64_t v42 = v54;
    LOWORD(v53) = 235;
    unint64_t v43 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
    sub_1D7860544();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, v41, v42, (__int16 *)&v53, 0, v43, 0xD00000000000005ALL, 0x80000001D7ACD9A0, v44, 0xD000000000000027, 0x80000001D7ACE530, 319);
    swift_willThrow();
  }
}

CFDataRef _s13CoreIDVShared19DIPKeystoreKeychainC20getIssuerCertificateySo03SecG3RefaSgAFFZ_0(__SecCertificate *a1)
{
  v53[29] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v4, v5, v6, v7, v8, v9, v10);
  uint64_t v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  CFDataRef result = SecCertificateCopyNormalizedIssuerSequence(a1);
  if (result)
  {
    CFDataRef v14 = result;
    uint64_t v49 = v3;
    uint64_t v15 = sub_1D7A9B028();
    sub_1D7A2C320(2, v15, v16, v52);
    uint64_t v18 = v52[0];
    unint64_t v17 = v52[1];
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9400);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1D7AA4E90;
    *(void *)(inited + 32) = sub_1D7A9BFC8();
    *(void *)(inited + 40) = v20;
    *(void *)(inited + 72) = MEMORY[0x1E4FBB390];
    *(unsigned char *)(inited + 48) = 1;
    *(void *)(inited + 80) = sub_1D7A9BFC8();
    *(void *)(inited + 88) = v21;
    uint64_t v22 = (void *)*MEMORY[0x1E4F3BB90];
    type metadata accessor for CFString(0);
    uint64_t v24 = v23;
    *(void *)(inited + 120) = v23;
    *(void *)(inited + 96) = v22;
    *(void *)(inited + 128) = sub_1D7A9BFC8();
    *(void *)(inited + 136) = v25;
    uint64_t v26 = (void *)*MEMORY[0x1E4F3B980];
    *(void *)(inited + 168) = v24;
    *(void *)(inited + 144) = v26;
    *(void *)(inited + 176) = sub_1D7A9BFC8();
    *(void *)(inited + 184) = v27;
    *(void *)(inited + 216) = MEMORY[0x1E4F277C0];
    *(void *)(inited + 192) = v18;
    *(void *)(inited + 200) = v17;
    id v28 = v22;
    unint64_t v29 = v17;
    id v30 = v26;
    uint64_t v48 = v18;
    sub_1D7860790(v18, v17);
    sub_1D785F2A0(inited);
    v53[0] = 0;
    CFDictionaryRef v31 = (const __CFDictionary *)sub_1D7A9BE98();
    swift_bridgeObjectRelease();
    OSStatus v32 = SecItemCopyMatching(v31, v53);

    if (!v32 && v53[0])
    {
      uint64_t v33 = (const void *)swift_unknownObjectRetain();
      CFTypeID v34 = CFGetTypeID(v33);
      if (v34 == SecCertificateGetTypeID())
      {

        sub_1D78607E8(v48, v29);
        swift_unknownObjectRelease();
        type metadata accessor for SecCertificate(0);
        return (CFDataRef)swift_dynamicCastUnknownClassUnconditional();
      }
      swift_unknownObjectRelease();
    }
    if (qword_1EBDF9DC8 != -1) {
      swift_once();
    }
    uint64_t v35 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE70);
    swift_beginAccess();
    uint64_t v36 = v49;
    (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v12, v35, v2);
    unint64_t v37 = sub_1D7A9B5D8();
    os_log_type_t v38 = sub_1D7A9C758();
    if (os_log_type_enabled(v37, v38))
    {
      unint64_t v46 = v29;
      uint64_t v47 = v2;
      os_log_t v39 = (uint8_t *)swift_slowAlloc();
      uint64_t v40 = swift_slowAlloc();
      uint64_t v51 = v40;
      *(_DWORD *)os_log_t v39 = 136446210;
      CFStringRef v41 = SecCopyErrorMessageString(v32, 0);
      if (v41)
      {
        uint64_t v42 = (__CFString *)v41;
        uint64_t v43 = sub_1D7A9BFC8();
        unint64_t v45 = v44;
      }
      else
      {
        uint64_t v43 = 0;
        unint64_t v45 = 0xE000000000000000;
      }
      uint64_t v50 = sub_1D7923300(v43, v45, &v51);
      sub_1D7A9C9E8();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1D7853000, v37, v38, "coreidvd: failed to query the key chain item with getting issuer certificate:  CFErrorRef error = %{public}s", v39, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D947D740](v40, -1, -1);
      MEMORY[0x1D947D740](v39, -1, -1);

      sub_1D78607E8(v48, v46);
      (*(void (**)(char *, uint64_t))(v49 + 8))(v12, v47);
    }
    else
    {

      sub_1D78607E8(v48, v29);
      (*(void (**)(char *, uint64_t))(v36 + 8))(v12, v2);
    }
    swift_unknownObjectRelease();
    return 0;
  }
  return result;
}

void *sub_1D7A86350()
{
  uint64_t v2 = v1;
  v100[1] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)sub_1D7A9B5F8();
  uint64_t v11 = MEMORY[0x1F4188790](v3, v4, v5, v6, v7, v8, v9, v10);
  uint64_t v13 = (char *)&v91 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x1F4188790](v11, v14, v15, v16, v17, v18, v19, v20);
  uint64_t v23 = (char *)&v91 - v22;
  MEMORY[0x1F4188790](v21, v24, v25, v26, v27, v28, v29, v30);
  OSStatus v32 = (char *)&v91 - v31;
  uint64_t v33 = *(unsigned __int8 *)(v0 + 72);
  uint64_t v96 = v34;
  switch(v33)
  {
    case 1:
    case 2:
    case 3:
      char v35 = sub_1D7A9D358();
      swift_bridgeObjectRelease();
      if ((v35 & 1) == 0)
      {
        switch(*(unsigned char *)(v0 + 72))
        {
          case 1:
            goto LABEL_4;
          default:
            char v36 = sub_1D7A9D358();
            swift_bridgeObjectRelease();
            if (v36) {
              goto LABEL_6;
            }
            goto LABEL_12;
        }
      }
      break;
    default:
LABEL_4:
      swift_bridgeObjectRelease();
      break;
  }
LABEL_6:
  if (*(unsigned char *)(v0 + 76) == 1)
  {
    if (qword_1EBDF9DC8 != -1) {
      swift_once();
    }
    uint64_t v37 = __swift_project_value_buffer((uint64_t)v3, (uint64_t)qword_1EBDFBE70);
    swift_beginAccess();
    uint64_t v38 = v96;
    (*(void (**)(char *, uint64_t, void *))(v96 + 16))(v32, v37, v3);
    os_log_t v39 = sub_1D7A9B5D8();
    os_log_type_t v40 = sub_1D7A9C748();
    if (os_log_type_enabled(v39, v40))
    {
      CFStringRef v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)CFStringRef v41 = 0;
      _os_log_impl(&dword_1D7853000, v39, v40, "SE/SEP attestation is about to expire; returning no attestations",
        v41,
        2u);
      MEMORY[0x1D947D740](v41, -1, -1);
    }

    (*(void (**)(char *, void *))(v38 + 8))(v32, v3);
    return (void *)MEMORY[0x1E4FBC860];
  }
LABEL_12:
  uint64_t v43 = *(void *)(v0 + 16);
  unint64_t v42 = *(void *)(v0 + 24);
  v100[0] = 0;
  unint64_t v98 = MEMORY[0x1E4FBC860];
  uint64_t v44 = sub_1D7A9BFC8();
  unint64_t v46 = v45;
  swift_bridgeObjectRetain();
  sub_1D7A85870(v43, v42, v44, v46, v100);
  if (v2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    return v3;
  }
  swift_bridgeObjectRelease();
  uint64_t v47 = (uint8_t *)v100[0];
  if (!v100[0])
  {
LABEL_24:
    swift_bridgeObjectRelease();
    if (qword_1EBDF9DC8 != -1) {
      swift_once();
    }
    uint64_t v53 = __swift_project_value_buffer((uint64_t)v3, (uint64_t)qword_1EBDFBE70);
    swift_beginAccess();
    uint64_t v54 = v96;
    (*(void (**)(char *, uint64_t, void *))(v96 + 16))(v13, v53, v3);
    swift_bridgeObjectRetain();
    uint64_t v55 = sub_1D7A9B5D8();
    os_log_type_t v56 = sub_1D7A9C758();
    if (os_log_type_enabled(v55, v56))
    {
      uint64_t v57 = (uint8_t *)swift_slowAlloc();
      uint64_t v95 = swift_slowAlloc();
      uint64_t v99 = v95;
      uint64_t v94 = 0;
      *(_DWORD *)uint64_t v57 = 136315138;
      uint64_t v93 = v57 + 4;
      swift_bridgeObjectRetain();
      uint64_t v97 = sub_1D7923300(v43, v42, &v99);
      sub_1D7A9C9E8();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1D7853000, v55, v56, "coreidvd: no certificate was found for label %s", v57, 0xCu);
      uint64_t v58 = v95;
      swift_arrayDestroy();
      MEMORY[0x1D947D740](v58, -1, -1);
      MEMORY[0x1D947D740](v57, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, void *))(v54 + 8))(v13, v3);
    swift_unknownObjectRelease();
    return (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v48 = (const void *)swift_unknownObjectRetain();
  CFTypeID v49 = CFGetTypeID(v48);
  if (v49 != SecCertificateGetTypeID())
  {
    swift_unknownObjectRelease();
    goto LABEL_24;
  }
  swift_bridgeObjectRelease();
  type metadata accessor for SecCertificate(0);
  swift_unknownObjectRetain();
  id v50 = (id)swift_dynamicCastUnknownClassUnconditional();
  MEMORY[0x1D947B060]();
  if (*(void *)((v98 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v98 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_1D7A9C368();
  }
  sub_1D7A9C3A8();
  sub_1D7A9C338();
  id v92 = v50;
  CFDataRef v51 = _s13CoreIDVShared19DIPKeystoreKeychainC20getIssuerCertificateySo03SecG3RefaSgAFFZ_0((__SecCertificate *)v50);
  uint64_t v52 = v96;
  uint64_t v93 = v47;
  CFDataRef v91 = v51;
  if (!v51)
  {
    if (qword_1EBDF9DC8 == -1) {
      goto LABEL_33;
    }
    goto LABEL_58;
  }
  MEMORY[0x1D947B060](v51);
  uint64_t v3 = *(void **)((v98 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if ((unint64_t)v3 >= *(void *)((v98 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_1D7A9C368();
  }
  sub_1D7A9C3A8();
  sub_1D7A9C338();
  while (1)
  {
    uint64_t v65 = v98;
    uint64_t v94 = 0;
    if (v98 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v66 = sub_1D7A9CFB8();
      uint64_t v95 = v65;
      if (!v66)
      {
LABEL_55:
        uint64_t v3 = (void *)MEMORY[0x1E4FBC860];
        goto LABEL_56;
      }
    }
    else
    {
      uint64_t v66 = *(void *)((v98 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      uint64_t v95 = v65;
      if (!v66) {
        goto LABEL_55;
      }
    }
    if (v66 >= 1) {
      break;
    }
    __break(1u);
LABEL_58:
    swift_once();
LABEL_33:
    uint64_t v60 = __swift_project_value_buffer((uint64_t)v3, (uint64_t)qword_1EBDFBE70);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, void *))(v52 + 16))(v23, v60, v3);
    uint64_t v61 = sub_1D7A9B5D8();
    os_log_type_t v62 = sub_1D7A9C738();
    if (os_log_type_enabled(v61, v62))
    {
      uint64_t v63 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v63 = 0;
      _os_log_impl(&dword_1D7853000, v61, v62, "coreidvd: no certificate was found for intermediate certificate", v63, 2u);
      MEMORY[0x1D947D740](v63, -1, -1);
    }

    uint64_t v64 = *(void (**)(char *, void *))(v52 + 8);
    v52 += 8;
    v64(v23, v3);
  }
  if ((v65 & 0xC000000000000001) != 0)
  {
    uint64_t v67 = 0;
    uint64_t v3 = (void *)MEMORY[0x1E4FBC860];
    uint64_t v96 = v66;
    do
    {
      uint64_t v68 = (__SecCertificate *)MEMORY[0x1D947BA10](v67, v95);
      CFDataRef v69 = SecCertificateCopyData(v68);
      uint64_t v70 = sub_1D7A9B028();
      unint64_t v72 = v71;

      uint64_t v73 = sub_1D7A9B008();
      uint64_t v75 = v74;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v3 = sub_1D789E300(0, v3[2] + 1, 1, v3);
      }
      unint64_t v77 = v3[2];
      unint64_t v76 = v3[3];
      if (v77 >= v76 >> 1) {
        uint64_t v3 = sub_1D789E300((void *)(v76 > 1), v77 + 1, 1, v3);
      }
      ++v67;
      void v3[2] = v77 + 1;
      uint64_t v78 = &v3[2 * v77];
      v78[4] = v73;
      v78[5] = v75;
      swift_unknownObjectRelease();
      sub_1D78607E8(v70, v72);
    }
    while (v96 != v67);
  }
  else
  {
    CFDictionaryRef v79 = (id *)(v65 + 32);
    uint64_t v3 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      uint64_t v96 = v66;
      CFDictionaryRef v80 = (__SecCertificate *)*v79;
      CFDataRef v81 = SecCertificateCopyData(v80);
      uint64_t v82 = sub_1D7A9B028();
      unint64_t v84 = v83;

      uint64_t v85 = sub_1D7A9B008();
      uint64_t v87 = v86;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v3 = sub_1D789E300(0, v3[2] + 1, 1, v3);
      }
      unint64_t v89 = v3[2];
      unint64_t v88 = v3[3];
      if (v89 >= v88 >> 1) {
        uint64_t v3 = sub_1D789E300((void *)(v88 > 1), v89 + 1, 1, v3);
      }
      void v3[2] = v89 + 1;
      uint64_t v90 = &v3[2 * v89];
      v90[4] = v85;
      v90[5] = v87;

      sub_1D78607E8(v82, v84);
      ++v79;
      uint64_t v66 = v96 - 1;
    }
    while (v96 != 1);
  }
LABEL_56:
  swift_bridgeObjectRelease_n();
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  return v3;
}

void sub_1D7A86D68(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v79 = a5;
  uint64_t v61 = a3;
  uint64_t v10 = sub_1D7A9B5F8();
  uint64_t v18 = MEMORY[0x1F4188790](v10, v11, v12, v13, v14, v15, v16, v17);
  uint64_t v20 = (char *)v60 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = MEMORY[0x1F4188790](v18, v21, v22, v23, v24, v25, v26, v27);
  CFDataRef v69 = (char *)v60 - v29;
  uint64_t v75 = (void (**)(char *, uint64_t, uint64_t))(v30 + 16);
  uint64_t v73 = a1;
  uint64_t v74 = (void (**)(char *, uint64_t))(v30 + 8);
  if (a2) {
    uint64_t v31 = a1;
  }
  else {
    uint64_t v31 = 0;
  }
  uint64_t v65 = v31;
  uint64_t v72 = *MEMORY[0x1E4F3B788];
  if (a2) {
    unint64_t v32 = a2;
  }
  else {
    unint64_t v32 = 0xE000000000000000;
  }
  unint64_t v64 = v32;
  uint64_t v77 = *MEMORY[0x1E4F3B978];
  v60[1] = *MEMORY[0x1E4F3B840];
  uint64_t v33 = MEMORY[0x1E4FBC860];
  int v34 = 1;
  unint64_t v62 = a4;
  unint64_t v68 = a4 >> 60;
  uint64_t v35 = MEMORY[0x1E4FBB1A0];
  *((void *)&v36 + 1) = 4;
  long long v76 = xmmword_1D7AA0A40;
  uint64_t v78 = MEMORY[0x1E4FBC840] + 8;
  *(void *)&long long v36 = 136315650;
  long long v63 = v36;
  unint64_t v66 = a2;
  unint64_t v67 = a6;
  uint64_t v70 = v20;
  uint64_t v71 = v28;
  while (1)
  {
    int v80 = v34;
    sub_1D785F2A0(v33);
    if (a2)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9400);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v76;
      *(void *)(inited + 32) = sub_1D7A9BFC8();
      *(void *)(inited + 40) = v38;
      *(void *)(inited + 72) = v35;
      *(void *)(inited + 48) = v73;
      *(void *)(inited + 56) = a2;
LABEL_19:
      *(void *)(inited + 80) = sub_1D7A9BFC8();
      *(void *)(inited + 88) = v47;
      *(void *)(inited + 120) = v35;
      *(void *)(inited + 96) = v79;
      *(void *)(inited + 104) = a6;
      swift_bridgeObjectRetain();
      sub_1D785F2A0(inited);
      goto LABEL_20;
    }
    if (v68 <= 0xE)
    {
      uint64_t v45 = v61;
      unint64_t v44 = v62;
      sub_1D7860790(v61, v62);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9400);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v76;
      *(void *)(inited + 32) = sub_1D7A9BFC8();
      *(void *)(inited + 40) = v46;
      *(void *)(inited + 72) = MEMORY[0x1E4F277C0];
      *(void *)(inited + 48) = v45;
      uint64_t v35 = MEMORY[0x1E4FBB1A0];
      *(void *)(inited + 56) = v44;
      uint64_t v20 = v70;
      uint64_t v10 = v71;
      goto LABEL_19;
    }
    if (qword_1EBDF9DC8 != -1) {
      swift_once();
    }
    uint64_t v39 = __swift_project_value_buffer(v10, (uint64_t)qword_1EBDFBE70);
    swift_beginAccess();
    (*v75)(v69, v39, v10);
    os_log_type_t v40 = sub_1D7A9B5D8();
    os_log_type_t v41 = sub_1D7A9C758();
    if (os_log_type_enabled(v40, v41))
    {
      unint64_t v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v42 = 0;
      _os_log_impl(&dword_1D7853000, v40, v41, "failed to delete key chain item: either label or serialNumber should be non-empty. ignore and continue.", v42, 2u);
      uint64_t v43 = v42;
      a6 = v67;
      MEMORY[0x1D947D740](v43, -1, -1);
    }

    (*v74)(v69, v10);
    uint64_t v33 = MEMORY[0x1E4FBC860];
LABEL_20:
    CFDictionaryRef v48 = (const __CFDictionary *)sub_1D7A9BE98();
    swift_bridgeObjectRelease();
    OSStatus v49 = SecItemDelete(v48);

    int v34 = 0;
    if (v49)
    {
      if (v49 == -25300) {
        break;
      }
      if (qword_1EBDF9DC8 != -1) {
        swift_once();
      }
      uint64_t v50 = __swift_project_value_buffer(v10, (uint64_t)qword_1EBDFBE70);
      swift_beginAccess();
      (*v75)(v20, v50, v10);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      CFDataRef v51 = sub_1D7A9B5D8();
      os_log_type_t v52 = sub_1D7A9C758();
      if (os_log_type_enabled(v51, v52))
      {
        uint64_t v53 = swift_slowAlloc();
        uint64_t v54 = swift_slowAlloc();
        uint64_t v81 = v54;
        *(_DWORD *)uint64_t v53 = v63;
        swift_bridgeObjectRetain();
        *(void *)(v53 + 4) = sub_1D7923300(v65, v64, &v81);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v53 + 12) = 2082;
        swift_bridgeObjectRetain();
        *(void *)(v53 + 14) = sub_1D7923300(v79, a6, &v81);
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v53 + 22) = 2082;
        CFStringRef v55 = SecCopyErrorMessageString(v49, 0);
        if (v55)
        {
          os_log_type_t v56 = (__CFString *)v55;
          uint64_t v57 = sub_1D7A9BFC8();
          unint64_t v59 = v58;
        }
        else
        {
          uint64_t v57 = 0;
          unint64_t v59 = 0xE000000000000000;
        }
        a6 = v67;
        *(void *)(v53 + 24) = sub_1D7923300(v57, v59, &v81);
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1D7853000, v51, v52, "failed to delete the key chain item: label = %s, class = %{public}s, CFErrorRef error = %{public}s", (uint8_t *)v53, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x1D947D740](v54, -1, -1);
        MEMORY[0x1D947D740](v53, -1, -1);

        uint64_t v20 = v70;
        uint64_t v10 = v71;
        (*v74)(v70, v71);
        a2 = v66;
        uint64_t v33 = MEMORY[0x1E4FBC860];
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        (*v74)(v20, v10);
      }
      int v34 = 0;
      uint64_t v35 = MEMORY[0x1E4FBB1A0];
      if (v80) {
        break;
      }
    }
  }
}

void sub_1D7A873DC(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = sub_1D7A9B5F8();
  uint64_t v52 = *(void *)(v6 - 8);
  uint64_t v53 = v6;
  MEMORY[0x1F4188790](v6, v7, v8, v9, v10, v11, v12, v13);
  CFDataRef v51 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9400);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D7AA4E90;
  *(void *)(inited + 32) = sub_1D7A9BFC8();
  *(void *)(inited + 40) = v16;
  type metadata accessor for SecKey(0);
  *(void *)(inited + 72) = v17;
  *(void *)(inited + 48) = a1;
  *(void *)(inited + 80) = sub_1D7A9BFC8();
  *(void *)(inited + 88) = v18;
  *(void *)(inited + 120) = MEMORY[0x1E4FBB1A0];
  *(void *)(inited + 96) = a2;
  *(void *)(inited + 104) = a3;
  *(void *)(inited + 128) = sub_1D7A9BFC8();
  *(void *)(inited + 136) = v19;
  uint64_t v20 = (void *)*MEMORY[0x1E4F3B9A0];
  type metadata accessor for CFString(0);
  *(void *)(inited + 168) = v21;
  *(void *)(inited + 144) = v20;
  *(void *)(inited + 176) = sub_1D7A9BFC8();
  *(void *)(inited + 184) = v22;
  uint64_t v23 = (void *)*MEMORY[0x1E4F3B598];
  *(void *)(inited + 216) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF8238);
  *(void *)(inited + 192) = v23;
  id v24 = v23;
  id v25 = a1;
  swift_bridgeObjectRetain();
  id v26 = v20;
  sub_1D785F2A0(inited);
  CFDictionaryRef v27 = (const __CFDictionary *)sub_1D7A9BE98();
  swift_bridgeObjectRelease();
  OSStatus v28 = SecItemAdd(v27, 0);

  if (v28)
  {
    uint64_t v50 = a2;
    if (qword_1EBDF9DC8 != -1) {
      swift_once();
    }
    uint64_t v29 = v53;
    uint64_t v30 = __swift_project_value_buffer(v53, (uint64_t)qword_1EBDFBE70);
    swift_beginAccess();
    unint64_t v32 = v51;
    uint64_t v31 = v52;
    (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v51, v30, v29);
    swift_bridgeObjectRetain_n();
    uint64_t v33 = sub_1D7A9B5D8();
    os_log_type_t v34 = sub_1D7A9C758();
    if (os_log_type_enabled(v33, v34))
    {
      OSStatus v35 = v28;
      uint64_t v36 = swift_slowAlloc();
      uint64_t v48 = swift_slowAlloc();
      uint64_t v54 = v48;
      *(_DWORD *)uint64_t v36 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v56 = sub_1D7923300(v50, a3, &v54);
      sub_1D7A9C9E8();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v36 + 12) = 2082;
      OSStatus v49 = v35;
      CFStringRef v37 = SecCopyErrorMessageString(v35, 0);
      if (v37)
      {
        uint64_t v38 = (__CFString *)v37;
        uint64_t v39 = sub_1D7A9BFC8();
        unint64_t v41 = v40;
      }
      else
      {
        uint64_t v39 = 0;
        unint64_t v41 = 0xE000000000000000;
      }
      uint64_t v56 = sub_1D7923300(v39, v41, &v54);
      sub_1D7A9C9E8();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1D7853000, v33, v34, "failed to add item to key chain: label = %s, CFErrorRef error = %{public}s", (uint8_t *)v36, 0x16u);
      uint64_t v42 = v48;
      swift_arrayDestroy();
      MEMORY[0x1D947D740](v42, -1, -1);
      MEMORY[0x1D947D740](v36, -1, -1);

      (*(void (**)(char *, uint64_t))(v52 + 8))(v51, v53);
      OSStatus v28 = v49;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v32, v29);
    }
    uint64_t v54 = 0;
    unint64_t v55 = 0xE000000000000000;
    sub_1D7A9CC48();
    if (v28 == -25299)
    {
      sub_1D7A9C128();
      sub_1D7A9C128();
      uint64_t v43 = v54;
      uint64_t v44 = v55;
      LOWORD(v54) = 252;
      unint64_t v45 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      uint64_t v47 = 378;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v54 = 0xD00000000000002BLL;
      unint64_t v55 = 0x80000001D7ACE560;
      sub_1D7A9C128();
      uint64_t v43 = v54;
      uint64_t v44 = v55;
      LOWORD(v54) = 233;
      unint64_t v45 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      uint64_t v47 = 380;
    }
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, v43, v44, (__int16 *)&v54, 0, v45, 0xD00000000000005ALL, 0x80000001D7ACD9A0, v46, 0xD00000000000001ALL, 0x80000001D7ACE590, v47);
    swift_willThrow();
  }
}

void sub_1D7A879B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __SecKey *a5, const __CFString *a6)
{
  error[1] = *(CFErrorRef *)MEMORY[0x1E4F143B8];
  error[0] = 0;
  CFDataRef v8 = (const __CFData *)sub_1D7A9AFF8();
  CFDataRef v9 = (const __CFData *)sub_1D7A9AFF8();
  LODWORD(a6) = SecKeyVerifySignature(a5, a6, v8, v9, error);

  if (!a6)
  {
    __int16 v10 = 246;
    errorFromCFError(_:_:_:)(error[0], 0xD000000000000023, 0x80000001D7ACE4D0, &v10);
    swift_willThrow();
  }
}

unint64_t sub_1D7A87AAC(__SecKey *a1, __SecKey *a2, const __CFString *a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v38 = a4;
  SecKeyAlgorithm v40 = a3;
  SecKeyRef v41 = a2;
  SecKeyRef v39 = a1;
  error[1] = *(CFErrorRef *)MEMORY[0x1E4F143B8];
  uint64_t v8 = sub_1D7A9B5F8();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8, v10, v11, v12, v13, v14, v15, v16);
  uint64_t v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  error[0] = 0;
  if (qword_1EBDF9DC8 != -1) {
    swift_once();
  }
  uint64_t v19 = __swift_project_value_buffer(v8, (uint64_t)qword_1EBDFBE70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v18, v19, v8);
  uint64_t v20 = sub_1D7A9B5D8();
  os_log_type_t v21 = sub_1D7A9C748();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v22 = 0;
    _os_log_impl(&dword_1D7853000, v20, v21, "coreidvd: derive shared secret", v22, 2u);
    MEMORY[0x1D947D740](v22, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v18, v8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF82D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D7AA0A40;
  id v24 = (void *)*MEMORY[0x1E4F3BB48];
  uint64_t v25 = MEMORY[0x1E4FBB550];
  uint64_t v26 = v38;
  *(void *)(inited + 32) = *MEMORY[0x1E4F3BB48];
  *(void *)(inited + 40) = v26;
  CFDictionaryRef v27 = (void *)*MEMORY[0x1E4F3BB50];
  *(void *)(inited + 64) = v25;
  *(void *)(inited + 72) = v27;
  *(void *)(inited + 104) = MEMORY[0x1E4F277C0];
  *(void *)(inited + 80) = a5;
  *(void *)(inited + 88) = a6;
  id v28 = v24;
  id v29 = v27;
  sub_1D7860790(a5, a6);
  unint64_t v30 = sub_1D785FFD4(inited);
  sub_1D78C4038(0, (unint64_t *)&qword_1EBDF8260);
  sub_1D7A7CB90();
  CFDictionaryRef v31 = (const __CFDictionary *)sub_1D7A9BE98();
  swift_bridgeObjectRelease();
  CFDataRef v32 = SecKeyCopyKeyExchangeResult(v39, v40, v41, v31, error);

  if (v32)
  {
    type metadata accessor for DIPSecureData();
    unint64_t v30 = swift_allocObject();
    *(void *)(v30 + 16) = v32;
    CFDataRef v33 = v32;
    BytePtr = CFDataGetBytePtr(v33);
    size_t Length = CFDataGetLength(v33);
    mlock(BytePtr, Length);
  }
  else
  {
    __int16 v42 = 247;
    errorFromCFError(_:_:_:)(error[0], 0xD00000000000001DLL, 0x80000001D7ACE3E0, &v42);
    swift_willThrow();
  }
  return v30;
}

void sub_1D7A87E48(unsigned char *a1, __SecAccessControl *a2, char a3)
{
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = sub_1D7A9B5F8();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v7, v9, v10, v11, v12, v13, v14, v15);
  MEMORY[0x1F4188790](v16, v17, v18, v19, v20, v21, v22, v23);
  uint64_t v26 = (char *)v83 - v25;
  if (*a1)
  {
    if (*a1 == 1)
    {
      if (qword_1EBDF9DC8 != -1) {
        swift_once();
      }
      uint64_t v27 = __swift_project_value_buffer(v7, (uint64_t)qword_1EBDFBE70);
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v26, v27, v7);
      id v28 = sub_1D7A9B5D8();
      os_log_type_t v29 = sub_1D7A9C758();
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v30 = swift_slowAlloc();
        CFDictionaryRef v31 = (__SecAccessControl *)swift_slowAlloc();
        uint64_t v85 = v7;
        unint64_t v89 = v31;
        *(void *)&long long error = v31;
        *(_DWORD *)uint64_t v30 = 136446466;
        uint64_t v32 = sub_1D7A9BFC8();
        uint64_t v86 = v8;
        v90[0] = sub_1D7923300(v32, v33, (uint64_t *)&error);
        sub_1D7A9C9E8();
        swift_bridgeObjectRelease();
        *(_WORD *)(v30 + 12) = 2050;
        v90[0] = 2048;
        sub_1D7A9C9E8();
        _os_log_impl(&dword_1D7853000, v28, v29, "coreidvd: generateKeyAsym key algorithm %{public}s-%{public}ld not supported", (uint8_t *)v30, 0x16u);
        os_log_type_t v34 = v89;
        swift_arrayDestroy();
        MEMORY[0x1D947D740](v34, -1, -1);
        MEMORY[0x1D947D740](v30, -1, -1);

        (*(void (**)(char *, uint64_t))(v86 + 8))(v26, v85);
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v8 + 8))(v26, v7);
      }
      *(void *)&long long error = 0;
      *((void *)&error + 1) = 0xE000000000000000;
      sub_1D7A9CC48();
      swift_bridgeObjectRelease();
      strcpy((char *)&error, "key algorithm ");
      HIBYTE(error) = -18;
      sub_1D7A9BFC8();
      sub_1D7A9C128();
      swift_bridgeObjectRelease();
      sub_1D7A9C128();
      v90[0] = 2048;
      sub_1D7A9D258();
      sub_1D7A9C128();
      swift_bridgeObjectRelease();
      sub_1D7A9C128();
      long long v68 = error;
      LOWORD(error) = 243;
      unint64_t v69 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
      sub_1D7860544();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, v68, *((uint64_t *)&v68 + 1), (__int16 *)&error, 0, v69, 0xD00000000000005ALL, 0x80000001D7ACD9A0, v70, 0xD000000000000026, 0x80000001D7ACE400, 56);
      goto LABEL_26;
    }
    uint64_t v84 = v24;
    uint64_t v86 = v8;
    char v35 = 1;
  }
  else
  {
    uint64_t v84 = v24;
    uint64_t v86 = v8;
    char v35 = 0;
  }
  uint64_t v36 = sub_1D7A9BFC8();
  uint64_t v38 = v37;
  *(void *)&long long error = 0;
  SecAccessControlRef v39 = a2;
  if (!a2)
  {
    SecAccessControlRef v39 = SecAccessControlCreateWithFlags((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CFTypeRef)*MEMORY[0x1E4F3B578], 0x40000000uLL, (CFErrorRef *)&error);
    if (!v39)
    {
      swift_bridgeObjectRelease();
      v92[0] = 244;
      errorFromCFError(_:_:_:)((void *)error, 0xD000000000000036, 0x80000001D7ACE490, v92);
LABEL_26:
      swift_willThrow();
      return;
    }
  }
  SecAccessControlRef v88 = v39;
  unint64_t v89 = a2;
  char v40 = a3;
  v83[1] = v3;
  uint64_t v85 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF82D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D7AA4EB0;
  id v87 = (id)*MEMORY[0x1E4F3B6B0];
  *(void *)(inited + 32) = v87;
  uint64_t v42 = MEMORY[0x1E4FBB390];
  uint64_t v43 = (void **)MEMORY[0x1E4F3B718];
  *(unsigned char *)(inited + 40) = 0;
  uint64_t v44 = *v43;
  *(void *)(inited + 64) = v42;
  *(void *)(inited + 72) = v44;
  *(void *)(inited + 104) = MEMORY[0x1E4FBB1A0];
  *(void *)(inited + 80) = v36;
  *(void *)(inited + 88) = v38;
  unint64_t v45 = (void *)*MEMORY[0x1E4F3BB20];
  if (*MEMORY[0x1E4F3BB20])
  {
    uint64_t v46 = (void *)inited;
    *(void *)(inited + 112) = v45;
    *(unsigned char *)(inited + 120) = v35;
    uint64_t v47 = (void *)*MEMORY[0x1E4F3B708];
    *(void *)(inited + 144) = v42;
    *(void *)(inited + 152) = v47;
    uint64_t v48 = MEMORY[0x1E4FBB550];
    *(void *)(inited + 160) = 256;
    OSStatus v49 = (void *)*MEMORY[0x1E4F3B890];
    uint64_t v50 = (void **)MEMORY[0x1E4F3B898];
    *(void *)(inited + 184) = v48;
    *(void *)(inited + 192) = v49;
    CFDataRef v51 = (void **)MEMORY[0x1E4F3B8A0];
    if ((v40 & 1) == 0) {
      CFDataRef v51 = v50;
    }
    uint64_t v52 = *v51;
    uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF8238);
    v46[25] = v52;
    uint64_t v54 = (void *)*MEMORY[0x1E4F3B548];
    v46[28] = v53;
    v46[29] = v54;
    type metadata accessor for SecAccessControl(0);
    v46[33] = v55;
    SecAccessControlRef v56 = v88;
    v46[30] = v88;
    id v57 = v52;
    unint64_t v58 = v89;
    id v59 = v87;
    id v60 = v44;
    id v61 = v47;
    id v62 = v49;
    id v63 = v54;
    unint64_t v64 = v56;
    id v65 = v45;
    sub_1D785FFD4((uint64_t)v46);
    sub_1D78C4038(0, (unint64_t *)&qword_1EBDF8260);
    sub_1D7A7CB90();
    CFDictionaryRef v66 = (const __CFDictionary *)sub_1D7A9BE98();
    swift_bridgeObjectRelease();
    SecKeyRef RandomKey = SecKeyCreateRandomKey(v66, (CFErrorRef *)&error);

    if (RandomKey)
    {
      if (!SecKeyCopyPublicKey(RandomKey))
      {
        if (qword_1EBDF9DC8 != -1) {
          swift_once();
        }
        uint64_t v71 = v85;
        uint64_t v72 = __swift_project_value_buffer(v85, (uint64_t)qword_1EBDFBE70);
        swift_beginAccess();
        uint64_t v73 = v86;
        uint64_t v74 = v84;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v86 + 16))(v84, v72, v71);
        uint64_t v75 = sub_1D7A9B5D8();
        os_log_type_t v76 = sub_1D7A9C758();
        if (os_log_type_enabled(v75, v76))
        {
          uint64_t v77 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v77 = 0;
          _os_log_impl(&dword_1D7853000, v75, v76, "coreidvd: generateKeyAsym SecKeyCopyPublicKey failed.", v77, 2u);
          MEMORY[0x1D947D740](v77, -1, -1);
        }

        (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v74, v71);
        LOWORD(v90[0]) = 242;
        unint64_t v78 = sub_1D785EAF8(MEMORY[0x1E4FBC860]);
        sub_1D7860544();
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000002ALL, 0x80000001D7ACE460, (__int16 *)v90, 0, v78, 0xD00000000000005ALL, 0x80000001D7ACD9A0, v79, 0xD000000000000026, 0x80000001D7ACE400, 81);
        swift_willThrow();
      }
    }
    else
    {
      v92[0] = 241;
      errorFromCFError(_:_:_:)((void *)error, 0xD00000000000002CLL, 0x80000001D7ACE430, v92);
      swift_willThrow();
    }
  }
  else
  {
    int v80 = v89;
    id v81 = v87;
    id v82 = v44;

    __break(1u);
  }
}

uint64_t sub_1D7A8875C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D7A887A4()
{
  swift_weakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1D7A887DC()
{
  return sub_1D7A83D4C();
}

uint64_t block_copy_helper_15(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_15()
{
  return swift_release();
}

uint64_t type metadata accessor for DIPCryptoKeychain()
{
  return self;
}

uint64_t method lookup function for DIPCryptoKeychain(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for DIPCryptoKeychain);
}

uint64_t dispatch thunk of static DIPCryptoKeychain.generateKeySym(_:_:)()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of static DIPCryptoKeychain.generateKeyAsym(_:_:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of static DIPCryptoKeychain.generateKeyAsym(_:_:useSecureElement:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of static DIPCryptoKeychain.sign(_:withKey:algorithm:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of static DIPCryptoKeychain.verify(_:input:withKey:algorithm:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of static DIPCryptoKeychain.encrypt(_:withKey:algorithm:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of static DIPCryptoKeychain.decrypt(_:withKey:algorithm:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of static DIPCryptoKeychain.dh(privateKey:publicKey:algorithm:keySize:otherInfo:)()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t type metadata accessor for DIPKeystoreKeychain()
{
  return self;
}

uint64_t method lookup function for DIPKeystoreKeychain(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for DIPKeystoreKeychain);
}

uint64_t dispatch thunk of DIPKeystoreKeychain.__allocating_init(requireUserAuth:externalizedLAContext:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 + 96) + **(int **)(v3 + 96));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = sub_1D79B7D7C;
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of DIPKeystoreKeychain.identityKeyLabel(for:userInfo:type:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of DIPKeystoreKeychain.generateIdentityKeyPair(label:algorithm:constraints:enableUAM:temporary:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v7 + 120)
                                                                                              + **(int **)(*(void *)v7 + 120));
  uint64_t v16 = (void *)swift_task_alloc();
  *(void *)(v8 + 16) = v16;
  *uint64_t v16 = v8;
  v16[1] = sub_1D786EC1C;
  return v18(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t dispatch thunk of DIPKeystoreKeychain.retrieveIdentityKey(label:constraints:attestationType:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of DIPKeystoreKeychain.deleteIdentityKey(label:constraints:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t type metadata accessor for IdentityKeyWithKeychain()
{
  return self;
}

uint64_t method lookup function for IdentityKeyWithKeychain(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for IdentityKeyWithKeychain);
}

uint64_t dispatch thunk of IdentityKeyWithKeychain.__allocating_init(label:privateKey:attestationType:laContext:validity:isTemporary:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(v7 + 368))(a1, a2, a3, a4, a5, a6, a7 & 1);
}

uint64_t dispatch thunk of IdentityKeyWithKeychain.getIdentityPrivateKey()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 376))();
}

uint64_t dispatch thunk of IdentityKeyWithKeychain.getIdentityPublicKey()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 384))();
}

uint64_t dispatch thunk of IdentityKeyWithKeychain.getIdentityPublicKeyData()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 392))();
}

uint64_t dispatch thunk of IdentityKeyWithKeychain.sign(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 400))();
}

uint64_t dispatch thunk of IdentityKeyWithKeychain.persist()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 408))();
}

uint64_t dispatch thunk of IdentityKeyWithKeychain.attestationType()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 416))();
}

uint64_t dispatch thunk of IdentityKeyWithKeychain.supportAuthMethod()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 424))();
}

uint64_t dispatch thunk of IdentityKeyWithKeychain.authMethod()()
{
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(*(void *)v0 + 432) + **(int **)(*(void *)v0 + 432));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_1D786EE50;
  return v4();
}

uint64_t dispatch thunk of IdentityKeyWithKeychain.attestation(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 440))();
}

uint64_t dispatch thunk of IdentityKeyWithKeychain.signatureAlgorithm.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 448))();
}

uint64_t sub_1D7A89004()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t sub_1D7A89048@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_1D7923628(*(void *)a1, *(void *)(a1 + 8));
  swift_bridgeObjectRelease();
  unint64_t v4 = (2 * *(void *)(v3 + 16)) | 1;
  uint64_t result = sub_1D7A89470(v3 + 32, 0, v4);
  if (result)
  {
    *a2 = v3;
    a2[1] = v3 + 32;
    a2[2] = 0;
    a2[3] = v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1D7A890BC(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (*(void *)a1 != a2 || *(unsigned __int8 *)(a1 + 8) != a3)
  {
    uint64_t v8 = sub_1D78F7D1C();
    uint64_t v5 = v9;
    type metadata accessor for ASN1Error.Backing();
    uint64_t v10 = swift_allocObject();
    *(unsigned char *)(v10 + 16) = 0;
    *(void *)(v10 + 24) = v8;
    *(void *)(v10 + 32) = v5;
    *(void *)(v10 + 40) = 0xD000000000000023;
    *(void *)(v10 + 48) = 0x80000001D7AC0EE0;
    *(void *)(v10 + 56) = 26;
    sub_1D785D8F0();
    swift_allocError();
    *uint64_t v11 = v10;
    swift_willThrow();
    sub_1D785D944(a1);
    return v5;
  }
  sub_1D785D98C(a1 + 16, (uint64_t)v13);
  uint64_t result = sub_1D785D98C((uint64_t)v13, (uint64_t)&v14);
  if (v18 == 1)
  {
    uint64_t v5 = v14;
    int64_t v6 = v17 >> 1;
    if (v16 != v17 >> 1)
    {
      if (v16 >= (uint64_t)(v17 >> 1))
      {
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
      if (*(char *)(v15 + v16) < 0) {
        goto LABEL_16;
      }
      if (v16 + 1 != v6)
      {
        if (v16 + 1 >= v6)
        {
LABEL_20:
          __break(1u);
          goto LABEL_21;
        }
        if ((*(char *)(v15 + v16 + 1) & 0x80000000) == 0)
        {
          uint64_t v7 = v16 + 2;
          if (v16 + 2 != v6)
          {
            while (v7 < v6)
            {
              if (*(char *)(v15 + v7) < 0) {
                goto LABEL_16;
              }
              if (v6 == ++v7) {
                goto LABEL_14;
              }
            }
            __break(1u);
            goto LABEL_19;
          }
          goto LABEL_14;
        }
LABEL_16:
        type metadata accessor for ASN1Error.Backing();
        uint64_t v5 = swift_allocObject();
        *(unsigned char *)(v5 + 16) = 6;
        *(void *)(v5 + 24) = 0xD00000000000001FLL;
        *(void *)(v5 + 32) = 0x80000001D7ACE5F0;
        *(void *)(v5 + 40) = 0xD00000000000001FLL;
        *(void *)(v5 + 48) = 0x80000001D7ACE610;
        *(void *)(v5 + 56) = 253;
        sub_1D785D8F0();
        swift_allocError();
        *uint64_t v12 = v5;
        sub_1D785DA98((uint64_t)v13, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRetain);
        swift_willThrow();
        sub_1D785D944(a1);
        sub_1D785DA98((uint64_t)v13, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
        return v5;
      }
    }
LABEL_14:
    sub_1D785DA98((uint64_t)v13, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRetain);
    sub_1D785D944(a1);
    return v5;
  }
LABEL_21:
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for ASN1IA5String()
{
  return &type metadata for ASN1IA5String;
}

uint64_t sub_1D7A89344()
{
  return MEMORY[0x1E4FBB228];
}

unint64_t sub_1D7A89354()
{
  unint64_t result = qword_1EA8479E8;
  if (!qword_1EA8479E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8479E8);
  }
  return result;
}

uint64_t sub_1D7A893A8()
{
  return MEMORY[0x1E4FBB230];
}

unint64_t sub_1D7A893B8()
{
  unint64_t result = qword_1EA8479F0;
  if (!qword_1EA8479F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8479F0);
  }
  return result;
}

uint64_t sub_1D7A8940C()
{
  return MEMORY[0x1E4FBB220];
}

unint64_t sub_1D7A8941C()
{
  unint64_t result = qword_1EA8479F8;
  if (!qword_1EA8479F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8479F8);
  }
  return result;
}

uint64_t sub_1D7A89470(uint64_t result, uint64_t a2, unint64_t a3)
{
  int64_t v3 = a3 >> 1;
  if (a3 >> 1 != a2)
  {
    if ((uint64_t)(a3 >> 1) > a2)
    {
      if (*(char *)(result + a2) < 0) {
        return 0;
      }
      if (a2 + 1 == v3) {
        return 1;
      }
      uint64_t v4 = result + 1;
      while (a2 + 1 < v3)
      {
        int v5 = *(char *)(v4 + a2);
        unint64_t result = v5 >= 0;
        if ((v5 & 0x80000000) == 0 && v3 - 2 != a2++) {
          continue;
        }
        return result;
      }
      __break(1u);
    }
    __break(1u);
    return result;
  }
  return 1;
}

unint64_t IQACode.toString.getter()
{
  unint64_t v1 = v0[1];
  unint64_t v2 = 1936941424;
  switch(v1)
  {
    case 0uLL:
      break;
    case 1uLL:
    case 2uLL:
      unint64_t v2 = 0x656E697272756C62;
      break;
    case 3uLL:
      unint64_t v2 = 0x657275736F707865;
      break;
    case 4uLL:
      unint64_t v2 = 0x657275736F707865;
      break;
    case 5uLL:
      unint64_t v2 = 0xD000000000000011;
      break;
    case 6uLL:
      unint64_t v2 = 0xD000000000000012;
      break;
    case 7uLL:
      unint64_t v2 = 0xD000000000000013;
      break;
    case 8uLL:
      unint64_t v2 = 0xD000000000000014;
      break;
    case 9uLL:
      unint64_t v2 = 0xD000000000000014;
      break;
    case 0xAuLL:
    case 0x11uLL:
    case 0x17uLL:
    case 0x19uLL:
    case 0x1BuLL:
      unint64_t v2 = 0xD000000000000015;
      break;
    case 0xBuLL:
    case 0xCuLL:
      unint64_t v2 = 0x6374695064616568;
      break;
    case 0xDuLL:
      unint64_t v2 = 0x6C6C6F5264616568;
      break;
    case 0xEuLL:
      unint64_t v2 = 0x6C6C6F5264616568;
      break;
    case 0xFuLL:
      unint64_t v2 = 0x4C77615964616568;
      break;
    case 0x10uLL:
      unint64_t v2 = 0x4877615964616568;
      break;
    case 0x12uLL:
      unint64_t v2 = 0xD000000000000016;
      break;
    case 0x13uLL:
      unint64_t v2 = 0xD000000000000019;
      break;
    case 0x14uLL:
      unint64_t v2 = 0xD00000000000001ALL;
      break;
    case 0x15uLL:
      unint64_t v2 = 0xD000000000000017;
      break;
    case 0x16uLL:
      unint64_t v2 = 0xD000000000000018;
      break;
    case 0x18uLL:
      unint64_t v2 = 0xD000000000000016;
      break;
    case 0x1AuLL:
      unint64_t v2 = 0xD000000000000016;
      break;
    case 0x1CuLL:
      unint64_t v2 = 0xD000000000000016;
      break;
    case 0x1DuLL:
    case 0x21uLL:
      unint64_t v2 = 0x746E656D75636F64;
      break;
    case 0x1EuLL:
      unint64_t v2 = 0xD000000000000010;
      break;
    case 0x1FuLL:
      unint64_t v2 = 0xD000000000000013;
      break;
    case 0x20uLL:
      unint64_t v2 = 0xD000000000000014;
      break;
    case 0x22uLL:
      unint64_t v2 = 0xD000000000000010;
      break;
    case 0x23uLL:
      unint64_t v2 = 0xD000000000000011;
      break;
    case 0x24uLL:
      unint64_t v2 = 0x6F54746567726174;
      break;
    case 0x25uLL:
      unint64_t v2 = 0xD000000000000010;
      break;
    case 0x26uLL:
      unint64_t v2 = 0x73656361466D756ELL;
      break;
    case 0x27uLL:
      unint64_t v2 = 0x73656361466D756ELL;
      break;
    case 0x28uLL:
      unint64_t v2 = 0x6C6576654C78756CLL;
      break;
    case 0x29uLL:
      unint64_t v2 = 0x6C6576654C78756CLL;
      break;
    case 0x2AuLL:
      unint64_t v2 = 0x6F4E373134666470;
      break;
    case 0x2BuLL:
      unint64_t v2 = 0x6F46373134666470;
      break;
    case 0x2CuLL:
      unint64_t v2 = 0xD000000000000011;
      break;
    case 0x2DuLL:
      unint64_t v2 = 0xD000000000000010;
      break;
    case 0x2EuLL:
      unint64_t v2 = 0x73694D6574617473;
      break;
    case 0x2FuLL:
      unint64_t v2 = 0x756C636E6F636E69;
      break;
    default:
      unint64_t v2 = *v0;
      break;
  }
  sub_1D7861414(*v0, v1);
  return v2;
}

uint64_t IQCType.toMetricsFlags.getter()
{
  if (*(unsigned char *)(v0 + 16) != 2) {
    return 0;
  }
  uint64_t result = 0;
  if (*(void *)v0 <= 0x19uLL)
  {
    type metadata accessor for MetricsFlags();
    return swift_initStaticObject();
  }
  return result;
}

uint64_t sub_1D7A89B00(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = 0;
    int64_t v3 = (uint64_t *)(swift_bridgeObjectRetain() + 56);
    do
    {
      uint64_t v4 = *v3;
      sub_1D7A9CC48();
      swift_bridgeObjectRelease();
      IQACode.toString.getter();
      sub_1D7A9C128();
      swift_bridgeObjectRelease();
      sub_1D7A9C128();
      sub_1D7A9D258();
      sub_1D7A9C128();
      swift_bridgeObjectRelease();
      sub_1D7A9C128();
      sub_1D7A8A190(v4);
      sub_1D7A9C128();
      swift_bridgeObjectRelease();
      sub_1D7A9C128();
      swift_bridgeObjectRelease();
      sub_1D7A9C128();
      sub_1D7A9C128();
      swift_bridgeObjectRelease();
      if (v2 < v1 - 1) {
        sub_1D7A9C128();
      }
      ++v2;
      v3 += 4;
    }
    while (v1 != v2);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  return 91;
}

uint64_t sub_1D7A89D1C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = swift_bridgeObjectRetain() + 48;
    do
    {
      IQCType.toString.getter();
      sub_1D7A9C128();
      swift_bridgeObjectRelease();
      if (v2 < v1 - 1) {
        sub_1D7A9C128();
      }
      ++v2;
      v3 += 24;
    }
    while (v1 != v2);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  sub_1D7A9C128();
  swift_bridgeObjectRelease();
  return 91;
}

uint64_t IQCType.toString.getter()
{
  if (!*(unsigned char *)(v0 + 16))
  {
    uint64_t v1 = 0x2878656C706D6F63;
    goto LABEL_5;
  }
  if (*(unsigned char *)(v0 + 16) == 1)
  {
    uint64_t v1 = 0x286E776F6E6B6E75;
LABEL_5:
    uint64_t v4 = v1;
    sub_1D7A9C128();
    sub_1D7A9C128();
    return v4;
  }
  uint64_t result = 0x656E697272756C62;
  switch(*(void *)v0)
  {
    case 1:
      uint64_t result = 0x657275736F707865;
      break;
    case 2:
      uint64_t result = 0x7473694464726163;
      break;
    case 3:
      uint64_t result = 0xD000000000000010;
      break;
    case 4:
      uint64_t result = 0xD000000000000011;
      break;
    case 5:
      uint64_t result = 0x6374695064616568;
      break;
    case 6:
      uint64_t result = 0x6C6C6F5264616568;
      break;
    case 7:
      uint64_t result = 0x77615964616568;
      break;
    case 8:
    case 0xBLL:
    case 0xCLL:
    case 0xDLL:
      uint64_t result = 0xD000000000000012;
      break;
    case 9:
      uint64_t result = 0xD000000000000016;
      break;
    case 0xALL:
      uint64_t result = 0xD000000000000014;
      break;
    case 0xELL:
    case 0x10:
      uint64_t result = 0x746E656D75636F64;
      break;
    case 0xFLL:
      uint64_t result = 0xD000000000000010;
      break;
    case 0x11:
      unsigned int v3 = 1952867692;
      goto LABEL_24;
    case 0x12:
      uint64_t result = 0x6972447468676972;
      break;
    case 0x13:
      uint64_t result = 0x74666972447075;
      break;
    case 0x14:
      unsigned int v3 = 1853321060;
LABEL_24:
      uint64_t result = v3 | 0x6669724400000000;
      break;
    case 0x15:
      uint64_t result = 0x73656361466D756ELL;
      break;
    case 0x16:
      uint64_t result = 0x6C6576654C78756CLL;
      break;
    case 0x17:
      uint64_t result = 0x6544373134666470;
      break;
    case 0x18:
      uint64_t result = 0xD000000000000010;
      break;
    case 0x19:
      uint64_t result = 0x754E726575737369;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1D7A8A190(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = 0;
  uint64_t v3 = swift_bridgeObjectRetain() + 52;
  do
  {
    uint64_t v4 = v2++;
    sub_1D7A9C128();
    IQCType.toString.getter();
    sub_1D7A9C128();
    swift_bridgeObjectRelease();
    sub_1D7A9C128();
    sub_1D7A9C128();
    swift_bridgeObjectRelease();
    sub_1D7A9C128();
    sub_1D7A9C608();
    sub_1D7A9C128();
    sub_1D7A9C128();
    swift_bridgeObjectRelease();
    if (v4 < v1 - 1) {
      sub_1D7A9C128();
    }
    v3 += 24;
  }
  while (v1 != v2);
  swift_bridgeObjectRelease();
  return 0;
}

id static IdentityManagementInterface.interface()()
{
  return sub_1D7A8A414(&protocolRef__TtP13CoreIDVShared28IdentityManagementUIProtocol_);
}

id static IdentityManagementDaemonToClientUIInterface.interface()()
{
  return sub_1D7A8A414(&protocolRef__TtP13CoreIDVShared40IdentityManagementExportedClientProtocol_);
}

id sub_1D7A8A414(void *a1)
{
  id v1 = objc_msgSend(self, sel_interfaceWithProtocol_, *a1);
  return v1;
}

unint64_t machServiceIdentityManagementUI.getter()
{
  return 0xD00000000000002BLL;
}

uint64_t IdentityManagementInterface.deinit()
{
  return v0;
}

uint64_t IdentityManagementInterface.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t IdentityManagementDaemonToClientUIInterface.deinit()
{
  return v0;
}

uint64_t type metadata accessor for IdentityManagementInterface()
{
  return self;
}

uint64_t method lookup function for IdentityManagementInterface(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for IdentityManagementInterface);
}

uint64_t type metadata accessor for IdentityManagementDaemonToClientUIInterface()
{
  return self;
}

uint64_t method lookup function for IdentityManagementDaemonToClientUIInterface(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for IdentityManagementDaemonToClientUIInterface);
}

uint64_t IDVUIServiceConfigurationIdentifier.init(rawValue:)@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2 = sub_1D7A9D058();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t IDVUIServiceConfigurationIdentifier.rawValue.getter()
{
  return 0x746C7561666564;
}

unint64_t sub_1D7A8A590()
{
  unint64_t result = qword_1EA847A00;
  if (!qword_1EA847A00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA847A00);
  }
  return result;
}

uint64_t sub_1D7A8A5E4()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D7A8A638()
{
  return sub_1D7A9C0B8();
}

uint64_t sub_1D7A8A650()
{
  return sub_1D7A9D628();
}

uint64_t sub_1D7A8A6A0@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2 = sub_1D7A9D058();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_1D7A8A6F4(void *a1@<X8>)
{
  *a1 = 0x746C7561666564;
  a1[1] = 0xE700000000000000;
}

unsigned char *storeEnumTagSinglePayload for IDVUIServiceConfigurationIdentifier(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1D7A8A7ACLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for IDVUIServiceConfigurationIdentifier()
{
  return &type metadata for IDVUIServiceConfigurationIdentifier;
}

uint64_t dispatch thunk of XPCValueContainer.value.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of XPCValueContainer.init(value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t sub_1D7A8A80C(uint64_t a1)
{
  return sub_1D7891138(a1, qword_1EBDFBE38);
}

uint64_t sub_1D7A8A824(uint64_t a1)
{
  return sub_1D7891138(a1, qword_1EBDFBE20);
}

uint64_t sub_1D7A8A844(uint64_t a1)
{
  return sub_1D7891138(a1, qword_1EBDFBE08);
}

uint64_t sub_1D7A8A864(uint64_t a1)
{
  return sub_1D7891138(a1, qword_1EA86F380);
}

uint64_t sub_1D7A8A878()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EBDF94D8);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EBDF94D8);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "configure.total";
  *(void *)(v1 + 8) = 15;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.configureTotal.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EBDF94F8, (uint64_t)qword_1EBDF94D8, a1);
}

uint64_t sub_1D7A8A990()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EBDF9500);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EBDF9500);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "configure.loadConfig";
  *(void *)(v1 + 8) = 20;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static DaemonSignposts.configureLoadConfig.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EBDF9520, (uint64_t)qword_1EBDF9500, a1);
}

uint64_t sub_1D7A8AAA4()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EBDF77F0);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EBDF77F0);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "configure.loadBootstrapConfig";
  *(void *)(v1 + 8) = 29;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static DaemonSignposts.configureLoadBootstrapConfig.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(qword_1EBDF7B38, (uint64_t)qword_1EBDF77F0, a1);
}

uint64_t sub_1D7A8ABB8()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847A08);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847A08);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "configure.loadAttributeConfig";
  *(void *)(v1 + 8) = 29;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static DaemonSignposts.configureLoadAttributeConfig.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841690, (uint64_t)qword_1EA847A08, a1);
}

uint64_t sub_1D7A8ACCC()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847A20);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847A20);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "configure.workflow.fetch";
  *(void *)(v1 + 8) = 24;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static DaemonSignposts.configureFetchWorkflow.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841698, (uint64_t)qword_1EA847A20, a1);
}

uint64_t sub_1D7A8ADE0()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847A38);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847A38);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "configure.workflow.perso";
  *(void *)(v1 + 8) = 24;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static DaemonSignposts.configureDecodePersoWorkflow.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA8416A0, (uint64_t)qword_1EA847A38, a1);
}

uint64_t sub_1D7A8AEF4()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847A50);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847A50);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "configure.loadClaimsAndPrefill";
  *(void *)(v1 + 8) = 30;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static DaemonSignposts.configureLoadClaimsAndPrefill.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(qword_1EA8416A8, (uint64_t)qword_1EA847A50, a1);
}

uint64_t sub_1D7A8B008()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EBDF9528);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EBDF9528);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "configure.verifyAccountStatus";
  *(void *)(v1 + 8) = 29;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static DaemonSignposts.configureVerifyAccountStatus.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EBDF9540, (uint64_t)qword_1EBDF9528, a1);
}

uint64_t sub_1D7A8B11C()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847A68);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847A68);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "configure.loadPregeneratedAssessment";
  *(void *)(v1 + 8) = 36;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static DaemonSignposts.configureLoadPregeneratedAssessment.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA8416B8, (uint64_t)qword_1EA847A68, a1);
}

uint64_t sub_1D7A8B230()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847A80);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847A80);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "performVerification.total";
  *(void *)(v1 + 8) = 25;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.performVerificationTotal.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA8416C0, (uint64_t)qword_1EA847A80, a1);
}

uint64_t sub_1D7A8B348()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847A98);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847A98);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "performVerification.waitForBAA";
  *(void *)(v1 + 8) = 30;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static DaemonSignposts.performVerificationWaitForBAA.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA8416C8, (uint64_t)qword_1EA847A98, a1);
}

uint64_t sub_1D7A8B45C()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847AB0);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847AB0);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "shareVerificationResult.total";
  *(void *)(v1 + 8) = 29;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.shareVerificationResultTotal.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA8416D0, (uint64_t)qword_1EA847AB0, a1);
}

uint64_t sub_1D7A8B574()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847AC8);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847AC8);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "getVerificationResult.total";
  *(void *)(v1 + 8) = 27;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.getVerificationResultTotal.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA8416D8, (uint64_t)qword_1EA847AC8, a1);
}

uint64_t sub_1D7A8B68C()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847AE0);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847AE0);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "getVerificationResult.prepareSharingRequest";
  *(void *)(v1 + 8) = 43;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static DaemonSignposts.getVerificationResultPrepare.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA8416E0, (uint64_t)qword_1EA847AE0, a1);
}

uint64_t sub_1D7A8B7A0()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847AF8);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847AF8);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "getVerificationResult.keysAndCertificates";
  *(void *)(v1 + 8) = 41;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static DaemonSignposts.getVerificationResultKeysAndCertificates.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA8416E8, (uint64_t)qword_1EA847AF8, a1);
}

uint64_t sub_1D7A8B8B4()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847B10);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847B10);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "getVerificationResult.waitForSetup";
  *(void *)(v1 + 8) = 34;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static DaemonSignposts.getVerificationResultWaitForSetup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA8416F0, (uint64_t)qword_1EA847B10, a1);
}

uint64_t sub_1D7A8B9C8()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847B28);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847B28);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "getVerificationResult.waitForBAA";
  *(void *)(v1 + 8) = 32;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static DaemonSignposts.getVerificationResultWaitForBAA.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA8416F8, (uint64_t)qword_1EA847B28, a1);
}

uint64_t sub_1D7A8BADC()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847B40);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847B40);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "getVerificationResult.fetchAssessment";
  *(void *)(v1 + 8) = 37;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static DaemonSignposts.getVerificationResultFetchAssesssment.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841700, (uint64_t)qword_1EA847B40, a1);
}

uint64_t sub_1D7A8BBF0()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847B58);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847B58);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "getVerificationResult.fetchAssessmentProofing";
  *(void *)(v1 + 8) = 45;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static DaemonSignposts.getVerificationResultFetchAssesssmentProofing.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841708, (uint64_t)qword_1EA847B58, a1);
}

uint64_t sub_1D7A8BD04()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847B70);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847B70);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "identityProofing.fetchAssessment";
  *(void *)(v1 + 8) = 32;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static DaemonSignposts.getIdentityProofingAssessment.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841710, (uint64_t)qword_1EA847B70, a1);
}

uint64_t sub_1D7A8BE18()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847B88);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847B88);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "getVerificationResult.sharingRegistration";
  *(void *)(v1 + 8) = 41;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static DaemonSignposts.getVerificationResultSharingRegistration.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841718, (uint64_t)qword_1EA847B88, a1);
}

uint64_t sub_1D7A8BF2C()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847BA0);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847BA0);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "getVerificationResult.buildSharingRequest";
  *(void *)(v1 + 8) = 41;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static DaemonSignposts.getVerificationResultBuildSharingRequest.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841720, (uint64_t)qword_1EA847BA0, a1);
}

uint64_t sub_1D7A8C040()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847BB8);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847BB8);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "concludeVerification.total";
  *(void *)(v1 + 8) = 26;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.concludeVerificationTotal.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(qword_1EA841728, (uint64_t)qword_1EA847BB8, a1);
}

uint64_t sub_1D7A8C158()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EBDF77A8);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EBDF77A8);
  if (qword_1EBDF8920 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE20);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "configuration";
  *(void *)(v1 + 8) = 13;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.configurationRequest.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(qword_1EBDF79A0, (uint64_t)qword_1EBDF77A8, a1);
}

uint64_t sub_1D7A8C270()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847BD0);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847BD0);
  if (qword_1EBDF8920 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE20);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "attributeConfig";
  *(void *)(v1 + 8) = 15;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static DaemonSignposts.attributeConfigRequest.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841738, (uint64_t)qword_1EA847BD0, a1);
}

uint64_t sub_1D7A8C384()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847BE8);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847BE8);
  if (qword_1EBDF8920 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE20);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "workflowRecommendation";
  *(void *)(v1 + 8) = 22;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.workflowRecommendationRequest.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841740, (uint64_t)qword_1EA847BE8, a1);
}

uint64_t sub_1D7A8C49C()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847C00);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847C00);
  if (qword_1EBDF8920 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE20);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "identityProofing";
  *(void *)(v1 + 8) = 16;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.identityProofingRequest.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841748, (uint64_t)qword_1EA847C00, a1);
}

uint64_t sub_1D7A8C5B4()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847C18);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847C18);
  if (qword_1EBDF8920 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE20);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "sharingRegistration";
  *(void *)(v1 + 8) = 19;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.sharingRegistrationRequest.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841750, (uint64_t)qword_1EA847C18, a1);
}

uint64_t sub_1D7A8C6CC()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847C30);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847C30);
  if (qword_1EBDF8920 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE20);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "identitySharing";
  *(void *)(v1 + 8) = 15;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.identitySharingRequest.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841758, (uint64_t)qword_1EA847C30, a1);
}

uint64_t sub_1D7A8C7E4()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847C48);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847C48);
  if (qword_1EBDF8920 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE20);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "identityProofingAndSharing";
  *(void *)(v1 + 8) = 26;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static DaemonSignposts.identityProofingAndRegistrationRequest.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841760, (uint64_t)qword_1EA847C48, a1);
}

uint64_t sub_1D7A8C8F8()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847C60);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847C60);
  if (qword_1EBDF8920 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE20);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "inputValidation";
  *(void *)(v1 + 8) = 15;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.inputValidationRequest.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841768, (uint64_t)qword_1EA847C60, a1);
}

uint64_t sub_1D7A8CA10()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847C78);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847C78);
  if (qword_1EBDF8920 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE20);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "topekaNonce";
  *(void *)(v1 + 8) = 11;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.topekaNonceRequest.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841770, (uint64_t)qword_1EA847C78, a1);
}

uint64_t sub_1D7A8CB28()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847C90);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847C90);
  if (qword_1EBDF8920 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE20);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "spNonce";
  *(void *)(v1 + 8) = 7;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.spNonceRequest.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841778, (uint64_t)qword_1EA847C90, a1);
}

uint64_t sub_1D7A8CC40()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EBDF76E8);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EBDF76E8);
  if (qword_1EBDF8920 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE20);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "ord";
  *(void *)(v1 + 8) = 3;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.ordRequest.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841780, (uint64_t)qword_1EBDF76E8, a1);
}

uint64_t sub_1D7A8CD58()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EBDF7700);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EBDF7700);
  if (qword_1EBDF8920 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE20);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "otd";
  *(void *)(v1 + 8) = 3;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.otdRequest.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841788, (uint64_t)qword_1EBDF7700, a1);
}

uint64_t sub_1D7A8CE70()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847CA8);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847CA8);
  if (qword_1EBDF8920 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE20);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "old";
  *(void *)(v1 + 8) = 3;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.oldRequest.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841790, (uint64_t)qword_1EA847CA8, a1);
}

uint64_t sub_1D7A8CF88()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847CC0);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847CC0);
  if (qword_1EBDF8920 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE20);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "pag";
  *(void *)(v1 + 8) = 3;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static DaemonSignposts.pagRequest.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841798, (uint64_t)qword_1EA847CC0, a1);
}

uint64_t sub_1D7A8D09C()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EBDF7778);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EBDF7778);
  if (qword_1EBDF8920 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE20);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "getProfile";
  *(void *)(v1 + 8) = 10;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static DaemonSignposts.getProfileRequest.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(qword_1EBDF7B10, (uint64_t)qword_1EBDF7778, a1);
}

uint64_t sub_1D7A8D1B0()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EBDF7730);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EBDF7730);
  if (qword_1EBDF8920 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE20);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "getSTS";
  *(void *)(v1 + 8) = 6;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static DaemonSignposts.getSTSRequest.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EBDF7AF8, (uint64_t)qword_1EBDF7730, a1);
}

uint64_t sub_1D7A8D2C4()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EBDF8A70);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EBDF8A70);
  if (qword_1EBDF8920 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE20);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "getStaticWorkflow";
  *(void *)(v1 + 8) = 17;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static DaemonSignposts.getStaticWorkflowRequest.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EBDF8A90, (uint64_t)qword_1EBDF8A70, a1);
}

uint64_t sub_1D7A8D3D8()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EBDF8A48);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EBDF8A48);
  if (qword_1EBDF8920 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE20);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "getStaticAssets";
  *(void *)(v1 + 8) = 15;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static DaemonSignposts.getStaticAssetRequest.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EBDF8A68, (uint64_t)qword_1EBDF8A48, a1);
}

uint64_t sub_1D7A8D4EC()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847CD8);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847CD8);
  if (qword_1EBDF8920 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE20);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "getStaticTC";
  *(void *)(v1 + 8) = 11;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static DaemonSignposts.getStaticTCRequest.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA8417A0, (uint64_t)qword_1EA847CD8, a1);
}

uint64_t sub_1D7A8D600()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847CF0);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847CF0);
  if (qword_1EBDF8920 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE20);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "identityProofingV2";
  *(void *)(v1 + 8) = 18;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static DaemonSignposts.identityProofingRequestV2.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA8417A8, (uint64_t)qword_1EA847CF0, a1);
}

uint64_t sub_1D7A8D714()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847D08);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847D08);
  if (qword_1EBDF8920 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE20);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "identityPendingAction";
  *(void *)(v1 + 8) = 21;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static DaemonSignposts.identityPendingActionRequest.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA8417B0, (uint64_t)qword_1EA847D08, a1);
}

uint64_t sub_1D7A8D828()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847D20);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847D20);
  if (qword_1EBDF8920 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE20);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "identityLivenessConfig";
  *(void *)(v1 + 8) = 22;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static DaemonSignposts.identityLivenessConfigRequest.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA8417B8, (uint64_t)qword_1EA847D20, a1);
}

uint64_t sub_1D7A8D93C()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847D38);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847D38);
  if (qword_1EBDF8920 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE20);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "getRPEncryptionCertificate";
  *(void *)(v1 + 8) = 26;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static DaemonSignposts.getRPEncryptionCertificateRequest.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA8417C0, (uint64_t)qword_1EA847D38, a1);
}

uint64_t sub_1D7A8DA50()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847D50);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847D50);
  if (qword_1EBDF8920 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE20);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "claimValidity";
  *(void *)(v1 + 8) = 13;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static DaemonSignposts.claimValidityRequest.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA8417C8, (uint64_t)qword_1EA847D50, a1);
}

uint64_t sub_1D7A8DB64()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847D68);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847D68);
  if (qword_1EBDF8920 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE20);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "uploadAssets.request";
  *(void *)(v1 + 8) = 20;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.uploadAssetsCloudKitRequest.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA8417D0, (uint64_t)qword_1EA847D68, a1);
}

uint64_t sub_1D7A8DC7C()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847D80);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847D80);
  if (qword_1EBDF8920 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE20);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "identityReportConcern";
  *(void *)(v1 + 8) = 21;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static DaemonSignposts.identityReportConcernRequest.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(qword_1EA8417D8, (uint64_t)qword_1EA847D80, a1);
}

uint64_t sub_1D7A8DD90()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EBDF7718);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EBDF7718);
  if (qword_1EBDF8920 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE20);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "webRequest";
  *(void *)(v1 + 8) = 10;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static DaemonSignposts.webRequest.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(qword_1EBDF7990, (uint64_t)qword_1EBDF7718, a1);
}

uint64_t sub_1D7A8DEA4()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847D98);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847D98);
  if (qword_1EBDF8918 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE08);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "loadInternalBundle";
  *(void *)(v1 + 8) = 18;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.loadInternalBundle.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA8417E8, (uint64_t)qword_1EA847D98, a1);
}

uint64_t sub_1D7A8DFBC()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847DB0);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847DB0);
  if (qword_1EBDF8918 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE08);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "fetchBAACert";
  *(void *)(v1 + 8) = 12;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.fetchBAACert.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA8417F0, (uint64_t)qword_1EA847DB0, a1);
}

uint64_t sub_1D7A8E0D4()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847DC8);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847DC8);
  if (qword_1EBDF8918 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE08);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "fetchSEABAASCert";
  *(void *)(v1 + 8) = 16;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.fetchSEABAASCert.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA8417F8, (uint64_t)qword_1EA847DC8, a1);
}

uint64_t sub_1D7A8E1EC()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EBDF7748);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EBDF7748);
  if (qword_1EBDF8918 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE08);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "fetchAssessment";
  *(void *)(v1 + 8) = 15;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.fetchAssessment.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EBDF7B00, (uint64_t)qword_1EBDF7748, a1);
}

uint64_t sub_1D7A8E304()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EBDF7808);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EBDF7808);
  if (qword_1EBDF8918 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE08);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "odnMypg";
  *(void *)(v1 + 8) = 7;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.odnMypg.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(qword_1EBDF7B48, (uint64_t)qword_1EBDF7808, a1);
}

uint64_t sub_1D7A8E41C()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847DE0);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847DE0);
  if (qword_1EBDF8918 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE08);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "passkitRegistration";
  *(void *)(v1 + 8) = 19;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.passkitRegistration.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841800, (uint64_t)qword_1EA847DE0, a1);
}

uint64_t sub_1D7A8E534()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847DF8);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847DF8);
  if (qword_1EBDF8918 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE08);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "decodeVerifiedClaim";
  *(void *)(v1 + 8) = 19;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static DaemonSignposts.decodeVerifiedClaim.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(qword_1EA841808, (uint64_t)qword_1EA847DF8, a1);
}

uint64_t sub_1D7A8E648()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EBDF76D0);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EBDF76D0);
  if (qword_1EBDF8918 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE08);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "checkTrust";
  *(void *)(v1 + 8) = 10;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static DaemonSignposts.checkTrust.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EBDF7AF0, (uint64_t)qword_1EBDF76D0, a1);
}

uint64_t sub_1D7A8E75C()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EBDF7820);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EBDF7820);
  if (qword_1EBDF8918 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE08);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "checkHSA2";
  *(void *)(v1 + 8) = 9;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static DaemonSignposts.checkHSA2.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EBDF7B58, (uint64_t)qword_1EBDF7820, a1);
}

uint64_t sub_1D7A8E870()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EBDF77D8);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EBDF77D8);
  if (qword_1EBDF8918 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE08);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "checkHSA2.getAuthKitAccount";
  *(void *)(v1 + 8) = 27;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static DaemonSignposts.checkHSA2GetAuthKitAccount.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EBDF7B30, (uint64_t)qword_1EBDF77D8, a1);
}

uint64_t sub_1D7A8E984()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847E10);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847E10);
  if (qword_1EBDF8918 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE08);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "secItemCopyMatching";
  *(void *)(v1 + 8) = 19;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static DaemonSignposts.secItemCopyMatching.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841818, (uint64_t)qword_1EA847E10, a1);
}

uint64_t sub_1D7A8EA98()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847E28);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847E28);
  if (qword_1EBDF8918 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE08);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "createClientGUIDFactory";
  *(void *)(v1 + 8) = 23;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static DaemonSignposts.createClientGUIDFactory.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841820, (uint64_t)qword_1EA847E28, a1);
}

uint64_t sub_1D7A8EBAC()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847E40);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847E40);
  if (qword_1EBDF8918 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE08);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "performVisionRequests";
  *(void *)(v1 + 8) = 21;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static DaemonSignposts.performVisionRequests.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841828, (uint64_t)qword_1EA847E40, a1);
}

uint64_t sub_1D7A8ECC0()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EBDF7790);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EBDF7790);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "warmup.deviceLocked";
  *(void *)(v1 + 8) = 19;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static DaemonSignposts.warmupDeviceLocked.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EBDF7B20, (uint64_t)qword_1EBDF7790, a1);
}

uint64_t sub_1D7A8EDD4()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EBDF77C0);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EBDF77C0);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "warmup.deviceUnlocked";
  *(void *)(v1 + 8) = 21;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static DaemonSignposts.warmupDeviceUnlocked.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EBDF7B28, (uint64_t)qword_1EBDF77C0, a1);
}

uint64_t sub_1D7A8EEE8()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EBDF7CC8);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EBDF7CC8);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "warmup.buddyFlow";
  *(void *)(v1 + 8) = 16;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static DaemonSignposts.warmupBuddyFlow.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EBDF7F20, (uint64_t)qword_1EBDF7CC8, a1);
}

uint64_t sub_1D7A8EFFC()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EBDF7760);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EBDF7760);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "warmup.assessment";
  *(void *)(v1 + 8) = 17;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static DaemonSignposts.warmupAssessment.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EBDF7B08, (uint64_t)qword_1EBDF7760, a1);
}

uint64_t sub_1D7A8F110()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847E58);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847E58);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "warmup.baa";
  *(void *)(v1 + 8) = 10;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static DaemonSignposts.warmupBAA.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(qword_1EA841830, (uint64_t)qword_1EA847E58, a1);
}

uint64_t sub_1D7A8F224()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EBDF9548);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EBDF9548);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "configure.tiberius.beforeConfigure";
  *(void *)(v1 + 8) = 34;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static DaemonSignposts.configureTiberiusBeforeConfigure.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EBDF9568, (uint64_t)qword_1EBDF9548, a1);
}

uint64_t sub_1D7A8F338()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847E70);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847E70);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "configure.tiberius.configure";
  *(void *)(v1 + 8) = 28;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static DaemonSignposts.configureTiberiusCofigure.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841840, (uint64_t)qword_1EA847E70, a1);
}

uint64_t sub_1D7A8F44C()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847E88);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847E88);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "getVerificationResult.tiberius.fetchAssessment";
  *(void *)(v1 + 8) = 46;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static DaemonSignposts.tiberiusGetVerificationResultFetchAssessment.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841848, (uint64_t)qword_1EA847E88, a1);
}

uint64_t sub_1D7A8F560()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847EA0);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847EA0);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "getVerificationResult.tiberius.callTopeka";
  *(void *)(v1 + 8) = 41;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static DaemonSignposts.tiberiusGetVerificationResultCallTopeka.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841850, (uint64_t)qword_1EA847EA0, a1);
}

uint64_t sub_1D7A8F674()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847EB8);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847EB8);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "getVerificationResult.tiberius.topekaTimeout";
  *(void *)(v1 + 8) = 44;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static DaemonSignposts.tiberiusGetVerificationResultTopekaTimeout.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841858, (uint64_t)qword_1EA847EB8, a1);
}

uint64_t sub_1D7A8F788()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847ED0);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847ED0);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "fetchIdentityDynamicWorkflow.total";
  *(void *)(v1 + 8) = 34;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.fetchIdentityDynamicWorkflowTotal.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841860, (uint64_t)qword_1EA847ED0, a1);
}

uint64_t sub_1D7A8F8A0()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847EE8);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847EE8);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "fetchIdentityDynamicWorkflow.request";
  *(void *)(v1 + 8) = 36;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.fetchIdentityDynamicWorkflowRequest.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841868, (uint64_t)qword_1EA847EE8, a1);
}

uint64_t sub_1D7A8F9B8()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847F00);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847F00);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "fetchIdentityStaticWorkflow.total";
  *(void *)(v1 + 8) = 33;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.fetchIdentityStaticWorkflowTotal.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841870, (uint64_t)qword_1EA847F00, a1);
}

uint64_t sub_1D7A8FAD0()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847F18);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847F18);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "fetchIdentityStaticWorkflow.request";
  *(void *)(v1 + 8) = 35;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.fetchIdentityStaticWorkflowRequest.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841878, (uint64_t)qword_1EA847F18, a1);
}

uint64_t sub_1D7A8FBE8()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847F30);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847F30);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "fetchIdentityStaticAsset.total";
  *(void *)(v1 + 8) = 30;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.fetchIdentityStaticAssetTotal.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841880, (uint64_t)qword_1EA847F30, a1);
}

uint64_t sub_1D7A8FD00()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847F48);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847F48);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "fetchIdentityStaticAsset.request";
  *(void *)(v1 + 8) = 32;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.fetchIdentityStaticAssetRequest.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841888, (uint64_t)qword_1EA847F48, a1);
}

uint64_t sub_1D7A8FE18()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847F60);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847F60);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "fetchIdentityStaticTC.total";
  *(void *)(v1 + 8) = 27;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.fetchIdentityStaticTCTotal.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841890, (uint64_t)qword_1EA847F60, a1);
}

uint64_t sub_1D7A8FF30()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847F78);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847F78);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "fetchIdentityStaticTC.request";
  *(void *)(v1 + 8) = 29;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.fetchIdentityStaticTCRequest.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841898, (uint64_t)qword_1EA847F78, a1);
}

uint64_t sub_1D7A90048()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847F90);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847F90);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "canRequestDocument.total";
  *(void *)(v1 + 8) = 24;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.canRequestDocument.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA8418A0, (uint64_t)qword_1EA847F90, a1);
}

uint64_t sub_1D7A90160()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847FA8);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847FA8);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "requestDocument.total";
  *(void *)(v1 + 8) = 21;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.requestDocument.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA8418A8, (uint64_t)qword_1EA847FA8, a1);
}

uint64_t sub_1D7A90278()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847FC0);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847FC0);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "requestDocument.preAuthorization";
  *(void *)(v1 + 8) = 32;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.requestDocumentPreAuthorization.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA8418B0, (uint64_t)qword_1EA847FC0, a1);
}

uint64_t sub_1D7A90390()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847FD8);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847FD8);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "requestDocument.preAuthorization.createProposal";
  *(void *)(v1 + 8) = 47;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.requestDocumentCreateProposal.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA8418B8, (uint64_t)qword_1EA847FD8, a1);
}

uint64_t sub_1D7A904A8()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA847FF0);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA847FF0);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "requestDocument.preAuthorization.initializeLA";
  *(void *)(v1 + 8) = 45;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.requestDocumentLocalAuthentication.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA8418C0, (uint64_t)qword_1EA847FF0, a1);
}

uint64_t sub_1D7A905C0()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA848008);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA848008);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "requestDocument.preAuthorization.buildUIConfiguration";
  *(void *)(v1 + 8) = 53;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.requestDocumentBuildUIConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA8418C8, (uint64_t)qword_1EA848008, a1);
}

uint64_t sub_1D7A906D8()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA848020);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA848020);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "requestDocument.preAuthorization.checkBiometricsStatus";
  *(void *)(v1 + 8) = 54;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.requestDocumentCheckBiometricsStatus.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA8418D0, (uint64_t)qword_1EA848020, a1);
}

uint64_t sub_1D7A907F0()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA848038);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA848038);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "requestDocument.postAuthorization";
  *(void *)(v1 + 8) = 33;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.requestDocumentPostAuthorization.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA8418D8, (uint64_t)qword_1EA848038, a1);
}

uint64_t sub_1D7A90908()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA848050);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA848050);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "requestDocument.postAuthorization.buildResponse";
  *(void *)(v1 + 8) = 47;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.requestDocumentBuildResponse.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA8418E0, (uint64_t)qword_1EA848050, a1);
}

uint64_t sub_1D7A90A20()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA848068);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA848068);
  if (qword_1EA841680 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EA86F380);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "requestDocument.UI";
  *(void *)(v1 + 8) = 18;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.requestDocumentUI.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA8418E8, (uint64_t)qword_1EA848068, a1);
}

uint64_t sub_1D7A90B38()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA848080);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA848080);
  if (qword_1EA841680 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EA86F380);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "requestDocument.sheet";
  *(void *)(v1 + 8) = 21;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.requestDocumentSheet.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA8418F0, (uint64_t)qword_1EA848080, a1);
}

uint64_t sub_1D7A90C50()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA848098);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA848098);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "uploadAssets.total";
  *(void *)(v1 + 8) = 18;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.uploadAssetsAPI.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA8418F8, (uint64_t)qword_1EA848098, a1);
}

uint64_t sub_1D7A90D68()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA8480B0);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA8480B0);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "mobileDocumentReader.identityKey.secureElementStatus";
  *(void *)(v1 + 8) = 52;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.MobileDocumentReader.identityKeySecureElementStatus.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841900, (uint64_t)qword_1EA8480B0, a1);
}

uint64_t sub_1D7A90E80()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA8480C8);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA8480C8);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "mobileDocumentReader.identityKey.status";
  *(void *)(v1 + 8) = 39;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.MobileDocumentReader.identityKeyStatus.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841908, (uint64_t)qword_1EA8480C8, a1);
}

uint64_t sub_1D7A90F98()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA8480E0);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA8480E0);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "mobileDocumentReader.identityKey.generate";
  *(void *)(v1 + 8) = 41;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.MobileDocumentReader.generateIdentityKey.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841910, (uint64_t)qword_1EA8480E0, a1);
}

uint64_t sub_1D7A910B0()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA8480F8);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA8480F8);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "mobileDocumentReader.identityKey.store";
  *(void *)(v1 + 8) = 38;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.MobileDocumentReader.storeIdentityKey.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841918, (uint64_t)qword_1EA8480F8, a1);
}

uint64_t sub_1D7A911C8()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA848110);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA848110);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "mobileDocumentReader.session.status";
  *(void *)(v1 + 8) = 35;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.MobileDocumentReader.sessionStatus.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841920, (uint64_t)qword_1EA848110, a1);
}

uint64_t sub_1D7A912E0()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA848128);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA848128);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "mobileDocumentReader.session.identityKeyStatus";
  *(void *)(v1 + 8) = 46;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.MobileDocumentReader.sessionIdentityKeyStatus.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841928, (uint64_t)qword_1EA848128, a1);
}

uint64_t sub_1D7A913F8()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA848140);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA848140);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "mobileDocumentReader.session.terminalRegistration";
  *(void *)(v1 + 8) = 49;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.MobileDocumentReader.sessionTerminalRegistration.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841930, (uint64_t)qword_1EA848140, a1);
}

uint64_t sub_1D7A91510()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA848158);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA848158);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "mobileDocumentReader.session.fetchLogo";
  *(void *)(v1 + 8) = 38;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.MobileDocumentReader.sessionFetchLogo.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841938, (uint64_t)qword_1EA848158, a1);
}

uint64_t sub_1D7A91628()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA848170);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA848170);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "mobileDocumentReader.session.store";
  *(void *)(v1 + 8) = 34;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.MobileDocumentReader.storeSession.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841940, (uint64_t)qword_1EA848170, a1);
}

uint64_t sub_1D7A91740()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA848188);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA848188);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "mobileDocumentReader.readDocument.canRead";
  *(void *)(v1 + 8) = 41;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.MobileDocumentReader.canReadDocument.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841948, (uint64_t)qword_1EA848188, a1);
}

uint64_t sub_1D7A91858()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA8481A0);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA8481A0);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "mobileDocumentReader.readDocument.start";
  *(void *)(v1 + 8) = 39;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.MobileDocumentReader.startReadDocument.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841950, (uint64_t)qword_1EA8481A0, a1);
}

uint64_t sub_1D7A91970()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA8481B8);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA8481B8);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "mobileDocumentReader.readDocument.buildRequest";
  *(void *)(v1 + 8) = 46;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.MobileDocumentReader.buildRequest.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841958, (uint64_t)qword_1EA8481B8, a1);
}

uint64_t sub_1D7A91A88()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA8481D0);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA8481D0);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "mobileDocumentReader.readDocument.signRequest";
  *(void *)(v1 + 8) = 45;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.MobileDocumentReader.signRequest.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841960, (uint64_t)qword_1EA8481D0, a1);
}

uint64_t sub_1D7A91BA0()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA8481E8);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA8481E8);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "mobileDocumentReader.readDocument.validateResponse";
  *(void *)(v1 + 8) = 50;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.MobileDocumentReader.validateResponse.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841968, (uint64_t)qword_1EA8481E8, a1);
}

uint64_t sub_1D7A91CB8()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA848200);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA848200);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "mobileDocumentReader.readDocument.parseResponse";
  *(void *)(v1 + 8) = 47;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.MobileDocumentReader.parseResponse.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841970, (uint64_t)qword_1EA848200, a1);
}

uint64_t sub_1D7A91DD0()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA848218);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA848218);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "vical.loadDocument";
  *(void *)(v1 + 8) = 18;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.VICAL.loadDocument.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841978, (uint64_t)qword_1EA848218, a1);
}

uint64_t sub_1D7A91EE8()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA848230);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA848230);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "krl.fetch";
  *(void *)(v1 + 8) = 9;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.KRL.fetchRevocationList.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841980, (uint64_t)qword_1EA848230, a1);
}

uint64_t sub_1D7A92000()
{
  uint64_t v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EA848248);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA848248);
  if (qword_1EBDF8928 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D7A9B5F8();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBDFBE38);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(void *)uint64_t v1 = "krl.process";
  *(void *)(v1 + 8) = 11;
  *(unsigned char *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + *(int *)(v0 + 24)) = 1;
  return result;
}

uint64_t static DaemonSignposts.KRL.processResponse.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7894A24(&qword_1EA841988, (uint64_t)qword_1EA848248, a1);
}

ValueMetadata *type metadata accessor for DaemonSignposts()
{
  return &type metadata for DaemonSignposts;
}

ValueMetadata *type metadata accessor for DaemonSignposts.MobileDocumentReader()
{
  return &type metadata for DaemonSignposts.MobileDocumentReader;
}

ValueMetadata *type metadata accessor for DaemonSignposts.VICAL()
{
  return &type metadata for DaemonSignposts.VICAL;
}

ValueMetadata *type metadata accessor for DaemonSignposts.KRL()
{
  return &type metadata for DaemonSignposts.KRL;
}

id StoredBiomeMetadata.__allocating_init(entity:insertInto:)(void *a1, void *a2)
{
  id v5 = objc_msgSend(objc_allocWithZone(v2), sel_initWithEntity_insertIntoManagedObjectContext_, a1, a2);

  return v5;
}

id StoredBiomeMetadata.init(entity:insertInto:)(void *a1, void *a2)
{
  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for StoredBiomeMetadata();
  id v5 = objc_msgSendSuper2(&v7, sel_initWithEntity_insertIntoManagedObjectContext_, a1, a2);

  return v5;
}

uint64_t type metadata accessor for StoredBiomeMetadata()
{
  return self;
}

id StoredBiomeMetadata.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StoredBiomeMetadata();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id static StoredBiomeMetadata.fetchRequest()()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4F1C0D0]);
  uint64_t v1 = (void *)sub_1D7A9BF98();
  id v2 = objc_msgSend(v0, sel_initWithEntityName_, v1);

  return v2;
}

uint64_t sub_1D7A92338()
{
  return MEMORY[0x1E4FBB060];
}

void sub_1D7A92344(id *a1@<X0>, SEL *a2@<X3>, uint64_t *a3@<X8>)
{
  id v4 = [*a1 *a2];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = sub_1D7A9BFC8();
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
  *a3 = v6;
  a3[1] = v8;
}

void sub_1D7A923A8(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  uint64_t v6 = *a2;
  if (*(void *)(a1 + 8)) {
    uint64_t v7 = sub_1D7A9BF98();
  }
  else {
    uint64_t v7 = 0;
  }
  id v8 = (id)v7;
  [v6 *a5];
}

uint64_t sub_1D7A92418@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for StoredBiomeMetadata();
  uint64_t result = sub_1D7A9CC68();
  *a1 = result;
  return result;
}

char *keypath_get_selector_axSettings()
{
  return sel_axSettings;
}

id sub_1D7A92468@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_axSettings);
  *a2 = result;
  return result;
}

id sub_1D7A924A4(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setAxSettings_, *a1);
}

char *keypath_get_selector_deviceLanguage()
{
  return sel_deviceLanguage;
}

void sub_1D7A924C4(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A924E4(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_didStepUp()
{
  return sel_didStepUp;
}

id sub_1D7A92510@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_didStepUp);
  *a2 = (_BYTE)result;
  return result;
}

id sub_1D7A92544(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setDidStepUp_, *a1);
}

char *keypath_get_selector_dob()
{
  return sel_dob;
}

void sub_1D7A92564(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A92584(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_ethnicity()
{
  return sel_ethnicity;
}

void sub_1D7A925B0(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A925D0(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_facePoseVersion()
{
  return sel_facePoseVersion;
}

void sub_1D7A925FC(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A9261C(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_facVersion()
{
  return sel_facVersion;
}

void sub_1D7A92648(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A92668(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_gender()
{
  return sel_gender;
}

void sub_1D7A92694(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A926B4(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_gestureAssessment()
{
  return sel_gestureAssessment;
}

id sub_1D7A926E0@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_gestureAssessment);
  *a2 = result;
  return result;
}

id sub_1D7A92714(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setGestureAssessment_, *a1);
}

char *keypath_get_selector_issuer()
{
  return sel_issuer;
}

void sub_1D7A92734(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A92754(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_livenessAssessment()
{
  return sel_livenessAssessment;
}

id sub_1D7A92780@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_livenessAssessment);
  *a2 = result;
  return result;
}

id sub_1D7A927B4(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setLivenessAssessment_, *a1);
}

char *keypath_get_selector_padtoolVersion()
{
  return sel_padtoolVersion;
}

void sub_1D7A927D4(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A927F4(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_passiveGestureAssessment()
{
  return sel_passiveGestureAssessment;
}

id sub_1D7A92820@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_passiveGestureAssessment);
  *a2 = result;
  return result;
}

id sub_1D7A92854(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setPassiveGestureAssessment_, *a1);
}

char *keypath_get_selector_passiveLivenessAssessment()
{
  return sel_passiveLivenessAssessment;
}

id sub_1D7A92874@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_passiveLivenessAssessment);
  *a2 = result;
  return result;
}

id sub_1D7A928A8(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setPassiveLivenessAssessment_, *a1);
}

char *keypath_get_selector_passiveLivenessFacePoseVersion()
{
  return sel_passiveLivenessFacePoseVersion;
}

void sub_1D7A928C8(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A928E8(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_passiveLivenessFacVersion()
{
  return sel_passiveLivenessFacVersion;
}

void sub_1D7A92914(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A92934(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_passiveLivenessPadtoolVersion()
{
  return sel_passiveLivenessPadtoolVersion;
}

void sub_1D7A92960(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A92980(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_passiveLivenessPrdVersion()
{
  return sel_passiveLivenessPrdVersion;
}

void sub_1D7A929AC(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A929CC(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_prdVersion()
{
  return sel_prdVersion;
}

void sub_1D7A929F8(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A92A18(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_proofingSessionID()
{
  return sel_proofingSessionID;
}

void sub_1D7A92A44(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A92A64(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_shouldDonateProofingDecision()
{
  return sel_shouldDonateProofingDecision;
}

id sub_1D7A92A90@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_shouldDonateProofingDecision);
  *a2 = (_BYTE)result;
  return result;
}

id sub_1D7A92AC4(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setShouldDonateProofingDecision_, *a1);
}

char *keypath_get_selector_skinTone()
{
  return sel_skinTone;
}

id sub_1D7A92AE4@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_skinTone);
  *a2 = result;
  return result;
}

id sub_1D7A92B18(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setSkinTone_, *a1);
}

id StoredAuthACL.__allocating_init(entity:insertInto:)(void *a1, void *a2)
{
  id v5 = objc_msgSend(objc_allocWithZone(v2), sel_initWithEntity_insertIntoManagedObjectContext_, a1, a2);

  return v5;
}

id StoredAuthACL.init(entity:insertInto:)(void *a1, void *a2)
{
  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for StoredAuthACL();
  id v5 = objc_msgSendSuper2(&v7, sel_initWithEntity_insertIntoManagedObjectContext_, a1, a2);

  return v5;
}

uint64_t type metadata accessor for StoredAuthACL()
{
  return self;
}

id StoredAuthACL.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StoredAuthACL();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id static StoredAuthACL.fetchRequest()()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4F1C0D0]);
  uint64_t v1 = (void *)sub_1D7A9BF98();
  id v2 = objc_msgSend(v0, sel_initWithEntityName_, v1);

  return v2;
}

void sub_1D7A92D00(id *a1@<X0>, SEL *a2@<X3>, uint64_t *a3@<X8>)
{
  id v4 = [*a1 *a2];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = sub_1D7A9B028();
    unint64_t v8 = v7;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v8 = 0xF000000000000000;
  }
  *a3 = v6;
  a3[1] = v8;
}

void sub_1D7A92D64(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  uint64_t v6 = *a2;
  if (*(void *)(a1 + 8) >> 60 == 15) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = sub_1D7A9AFF8();
  }
  id v8 = (id)v7;
  [v6 *a5];
}

void sub_1D7A92DDC(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = objc_msgSend(*a1, sel_identifier);
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = sub_1D7A9BFC8();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

void sub_1D7A92E44(uint64_t a1, void **a2)
{
  id v2 = *a2;
  if (*(void *)(a1 + 8)) {
    uint64_t v3 = sub_1D7A9BF98();
  }
  else {
    uint64_t v3 = 0;
  }
  id v4 = (id)v3;
  objc_msgSend(v2, sel_setIdentifier_);
}

uint64_t sub_1D7A92EB4@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for StoredAuthACL();
  uint64_t result = sub_1D7A9CC68();
  *a1 = result;
  return result;
}

char *keypath_get_selector_aclType()
{
  return sel_aclType;
}

id sub_1D7A92F04@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_aclType);
  *a2 = result;
  return result;
}

id sub_1D7A92F38(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setAclType_, *a1);
}

char *keypath_get_selector_credentialUUIDs()
{
  return sel_credentialUUIDs;
}

void sub_1D7A92F58(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A92F78(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_designationStatus()
{
  return sel_designationStatus;
}

id sub_1D7A92FA4@<X0>(id *a1@<X0>, _WORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_designationStatus);
  *a2 = (_WORD)result;
  return result;
}

id sub_1D7A92FD8(__int16 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setDesignationStatus_, *a1);
}

char *keypath_get_selector_encryptedACL()
{
  return sel_encryptedACL;
}

void sub_1D7A92FF8(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A93018(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_identifier()
{
  return sel_identifier;
}

char *keypath_get_selector_version()
{
  return sel_version;
}

id sub_1D7A93058@<X0>(id *a1@<X0>, _WORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_version);
  *a2 = (_WORD)result;
  return result;
}

id sub_1D7A9308C(__int16 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setVersion_, *a1);
}

char *keypath_get_selector_progenitorKey()
{
  return sel_progenitorKey;
}

id sub_1D7A930AC@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_progenitorKey);
  *a2 = result;
  return result;
}

id sub_1D7A930E8(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setProgenitorKey_, *a1);
}

id StoredCredential.__allocating_init(entity:insertInto:)(void *a1, void *a2)
{
  id v5 = objc_msgSend(objc_allocWithZone(v2), sel_initWithEntity_insertIntoManagedObjectContext_, a1, a2);

  return v5;
}

id StoredCredential.init(entity:insertInto:)(void *a1, void *a2)
{
  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for StoredCredential();
  id v5 = objc_msgSendSuper2(&v7, sel_initWithEntity_insertIntoManagedObjectContext_, a1, a2);

  return v5;
}

uint64_t type metadata accessor for StoredCredential()
{
  return self;
}

id StoredCredential.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StoredCredential();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id static StoredCredential.fetchRequest()()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4F1C0D0]);
  uint64_t v1 = (void *)sub_1D7A9BF98();
  id v2 = objc_msgSend(v0, sel_initWithEntityName_, v1);

  return v2;
}

uint64_t sub_1D7A932D4@<X0>(id *a1@<X0>, SEL *a2@<X3>, uint64_t a3@<X8>)
{
  id v4 = [*a1 *a2];
  if (v4)
  {
    id v5 = v4;
    sub_1D7A9B118();

    uint64_t v6 = sub_1D7A9B148();
    objc_super v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
    uint64_t v8 = v6;
    uint64_t v9 = a3;
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v11 = sub_1D7A9B148();
    objc_super v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v8 = v11;
    uint64_t v9 = a3;
    uint64_t v10 = 1;
  }
  return v7(v9, v10, 1, v8);
}

void sub_1D7A93398(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9118);
  MEMORY[0x1F4188790](v8 - 8, v9, v10, v11, v12, v13, v14, v15);
  unint64_t v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7919F20(a1, (uint64_t)v17);
  char v18 = *a2;
  uint64_t v19 = sub_1D7A9B148();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v17, 1, v19) != 1)
  {
    uint64_t v21 = (void *)sub_1D7A9B0C8();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
  }
  objc_msgSend(v18, *a5, v21);
}

uint64_t sub_1D7A934C4@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for StoredCredential();
  uint64_t result = sub_1D7A9CC68();
  *a1 = result;
  return result;
}

char *keypath_get_selector_createdAt()
{
  return sel_createdAt;
}

uint64_t sub_1D7A93514@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1D7A932D4(a1, (SEL *)&selRef_createdAt, a2);
}

void sub_1D7A93534(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_credentialIdentifier()
{
  return sel_credentialIdentifier;
}

void sub_1D7A93560(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A93580(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_partition()
{
  return sel_partition;
}

void sub_1D7A935AC(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A935CC(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_state()
{
  return sel_state;
}

id sub_1D7A935F8@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_state);
  *a2 = result;
  return result;
}

id sub_1D7A9362C(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setState_, *a1);
}

char *keypath_get_selector_updatedAt()
{
  return sel_updatedAt;
}

uint64_t sub_1D7A9364C@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1D7A932D4(a1, (SEL *)&selRef_updatedAt, a2);
}

void sub_1D7A9366C(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_cryptoKeys()
{
  return sel_cryptoKeys;
}

id sub_1D7A93698@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_cryptoKeys);
  *a2 = result;
  return result;
}

id sub_1D7A936D4(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setCryptoKeys_, *a1);
}

char *keypath_get_selector_options()
{
  return sel_options;
}

id sub_1D7A936F4@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_options);
  *a2 = result;
  return result;
}

id sub_1D7A93730(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setOptions_, *a1);
}

char *keypath_get_selector_payloads()
{
  return sel_payloads;
}

id sub_1D7A93750@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_payloads);
  *a2 = result;
  return result;
}

id sub_1D7A9378C(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setPayloads_, *a1);
}

id StoredCredentialOptions.__allocating_init(entity:insertInto:)(void *a1, void *a2)
{
  id v5 = objc_msgSend(objc_allocWithZone(v2), sel_initWithEntity_insertIntoManagedObjectContext_, a1, a2);

  return v5;
}

id StoredCredentialOptions.init(entity:insertInto:)(void *a1, void *a2)
{
  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for StoredCredentialOptions();
  id v5 = objc_msgSendSuper2(&v7, sel_initWithEntity_insertIntoManagedObjectContext_, a1, a2);

  return v5;
}

uint64_t type metadata accessor for StoredCredentialOptions()
{
  return self;
}

id StoredCredentialOptions.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StoredCredentialOptions();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id static StoredCredentialOptions.fetchRequest()()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4F1C0D0]);
  uint64_t v1 = (void *)sub_1D7A9BF98();
  id v2 = objc_msgSend(v0, sel_initWithEntityName_, v1);

  return v2;
}

uint64_t sub_1D7A93978@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for StoredCredentialOptions();
  uint64_t result = sub_1D7A9CC68();
  *a1 = result;
  return result;
}

char *keypath_get_selector_deleteInactiveKeysAfterDays()
{
  return sel_deleteInactiveKeysAfterDays;
}

id sub_1D7A939C8@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_deleteInactiveKeysAfterDays);
  *a2 = result;
  return result;
}

id sub_1D7A939FC(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setDeleteInactiveKeysAfterDays_, *a1);
}

char *keypath_get_selector_deleteIncompleteCredentialAfterDays()
{
  return sel_deleteIncompleteCredentialAfterDays;
}

id sub_1D7A93A1C@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_deleteIncompleteCredentialAfterDays);
  *a2 = result;
  return result;
}

id sub_1D7A93A50(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setDeleteIncompleteCredentialAfterDays_, *a1);
}

char *keypath_get_selector_payloadProtectionPolicy()
{
  return sel_payloadProtectionPolicy;
}

id sub_1D7A93A70@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_payloadProtectionPolicy);
  *a2 = result;
  return result;
}

id sub_1D7A93AA4(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setPayloadProtectionPolicy_, *a1);
}

char *keypath_get_selector_presentmentAuthPolicy()
{
  return sel_presentmentAuthPolicy;
}

id sub_1D7A93AC4@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_presentmentAuthPolicy);
  *a2 = result;
  return result;
}

id sub_1D7A93AF8(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setPresentmentAuthPolicy_, *a1);
}

char *keypath_get_selector_readerAuthenticationPolicy()
{
  return sel_readerAuthenticationPolicy;
}

id sub_1D7A93B18@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_readerAuthenticationPolicy);
  *a2 = result;
  return result;
}

id sub_1D7A93B4C(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setReaderAuthenticationPolicy_, *a1);
}

char *keypath_get_selector_credential()
{
  return sel_credential;
}

id sub_1D7A93B6C@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_credential);
  *a2 = result;
  return result;
}

id sub_1D7A93BA8(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setCredential_, *a1);
}

id StoredCryptoKey.__allocating_init(entity:insertInto:)(void *a1, void *a2)
{
  id v5 = objc_msgSend(objc_allocWithZone(v2), sel_initWithEntity_insertIntoManagedObjectContext_, a1, a2);

  return v5;
}

id StoredCryptoKey.init(entity:insertInto:)(void *a1, void *a2)
{
  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for StoredCryptoKey();
  id v5 = objc_msgSendSuper2(&v7, sel_initWithEntity_insertIntoManagedObjectContext_, a1, a2);

  return v5;
}

uint64_t type metadata accessor for StoredCryptoKey()
{
  return self;
}

id StoredCryptoKey.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StoredCryptoKey();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id static StoredCryptoKey.fetchRequest()()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4F1C0D0]);
  uint64_t v1 = (void *)sub_1D7A9BF98();
  id v2 = objc_msgSend(v0, sel_initWithEntityName_, v1);

  return v2;
}

void sub_1D7A93D94(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9118);
  MEMORY[0x1F4188790](v8 - 8, v9, v10, v11, v12, v13, v14, v15);
  unint64_t v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7919F20(a1, (uint64_t)v17);
  char v18 = *a2;
  uint64_t v19 = sub_1D7A9B148();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v17, 1, v19) != 1)
  {
    uint64_t v21 = (void *)sub_1D7A9B0C8();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
  }
  objc_msgSend(v18, *a5, v21);
}

uint64_t sub_1D7A93EC0@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for StoredCryptoKey();
  uint64_t result = sub_1D7A9CC68();
  *a1 = result;
  return result;
}

char *keypath_get_selector_attestation()
{
  return sel_attestation;
}

void sub_1D7A93F10(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A93F30(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_attestationSignature()
{
  return sel_attestationSignature;
}

void sub_1D7A93F5C(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A93F7C(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_1D7A93F9C@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1D7A932D4(a1, (SEL *)&selRef_createdAt, a2);
}

void sub_1D7A93FBC(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

void sub_1D7A93FDC(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A93FFC(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_keyBlob()
{
  return sel_keyBlob;
}

void sub_1D7A94028(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A94048(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_keySlot()
{
  return sel_keySlot;
}

id sub_1D7A94074@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_keySlot);
  *a2 = result;
  return result;
}

id sub_1D7A940A8(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setKeySlot_, *a1);
}

char *keypath_get_selector_keyType()
{
  return sel_keyType;
}

void sub_1D7A940C8(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A940E8(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_publicKey()
{
  return sel_publicKey;
}

void sub_1D7A94114(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A94134(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_publicKeyIdentifier()
{
  return sel_publicKeyIdentifier;
}

void sub_1D7A94160(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A94180(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_timesUsed()
{
  return sel_timesUsed;
}

id sub_1D7A941AC@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_timesUsed);
  *a2 = result;
  return result;
}

id sub_1D7A941E0(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setTimesUsed_, *a1);
}

uint64_t sub_1D7A941F4@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1D7A932D4(a1, (SEL *)&selRef_updatedAt, a2);
}

void sub_1D7A94214(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_usage()
{
  return sel_usage;
}

void sub_1D7A94240(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A94260(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

id sub_1D7A94280@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_credential);
  *a2 = result;
  return result;
}

id sub_1D7A942BC(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setCredential_, *a1);
}

char *keypath_get_selector_payload()
{
  return sel_payload;
}

id sub_1D7A942DC@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_payload);
  *a2 = result;
  return result;
}

id sub_1D7A94318(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setPayload_, *a1);
}

char *keypath_get_selector_progenitorAuthACL()
{
  return sel_progenitorAuthACL;
}

id sub_1D7A94338@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_progenitorAuthACL);
  *a2 = result;
  return result;
}

id sub_1D7A94374(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setProgenitorAuthACL_, *a1);
}

char *keypath_get_selector_protectedPayload()
{
  return sel_protectedPayload;
}

id sub_1D7A94394@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_protectedPayload);
  *a2 = result;
  return result;
}

id sub_1D7A943D0(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setProtectedPayload_, *a1);
}

char *keypath_get_selector_relyingParties()
{
  return sel_relyingParties;
}

id sub_1D7A943F0@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_relyingParties);
  *a2 = result;
  return result;
}

id sub_1D7A9442C(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setRelyingParties_, *a1);
}

id StoredPayload.__allocating_init(entity:insertInto:)(void *a1, void *a2)
{
  id v5 = objc_msgSend(objc_allocWithZone(v2), sel_initWithEntity_insertIntoManagedObjectContext_, a1, a2);

  return v5;
}

id StoredPayload.init(entity:insertInto:)(void *a1, void *a2)
{
  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for StoredPayload();
  id v5 = objc_msgSendSuper2(&v7, sel_initWithEntity_insertIntoManagedObjectContext_, a1, a2);

  return v5;
}

uint64_t type metadata accessor for StoredPayload()
{
  return self;
}

id StoredPayload.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StoredPayload();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id static StoredPayload.fetchRequest()()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4F1C0D0]);
  uint64_t v1 = (void *)sub_1D7A9BF98();
  id v2 = objc_msgSend(v0, sel_initWithEntityName_, v1);

  return v2;
}

void sub_1D7A94614(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9118);
  MEMORY[0x1F4188790](v8 - 8, v9, v10, v11, v12, v13, v14, v15);
  unint64_t v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7919F20(a1, (uint64_t)v17);
  char v18 = *a2;
  uint64_t v19 = sub_1D7A9B148();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v17, 1, v19) != 1)
  {
    uint64_t v21 = (void *)sub_1D7A9B0C8();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
  }
  objc_msgSend(v18, *a5, v21);
}

uint64_t sub_1D7A94740@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for StoredPayload();
  uint64_t result = sub_1D7A9CC68();
  *a1 = result;
  return result;
}

uint64_t sub_1D7A94784@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1D7A932D4(a1, (SEL *)&selRef_createdAt, a2);
}

void sub_1D7A947A4(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_docType()
{
  return sel_docType;
}

void sub_1D7A947D0(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A947F0(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_elementIdentifiersByNamespace()
{
  return sel_elementIdentifiersByNamespace;
}

void sub_1D7A9481C(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A9483C(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_format()
{
  return sel_format;
}

id sub_1D7A94868@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_format);
  *a2 = result;
  return result;
}

id sub_1D7A9489C(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setFormat_, *a1);
}

char *keypath_get_selector_ingestionHash()
{
  return sel_ingestionHash;
}

void sub_1D7A948BC(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A948DC(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_issuingJurisdiction()
{
  return sel_issuingJurisdiction;
}

void sub_1D7A94908(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A94928(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_payloadData()
{
  return sel_payloadData;
}

void sub_1D7A94954(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A94974(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_protectionType()
{
  return sel_protectionType;
}

id sub_1D7A949A0@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_protectionType);
  *a2 = result;
  return result;
}

id sub_1D7A949D4(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setProtectionType_, *a1);
}

char *keypath_get_selector_region()
{
  return sel_region;
}

void sub_1D7A949F4(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A94A14(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_1D7A94A34@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1D7A932D4(a1, (SEL *)&selRef_updatedAt, a2);
}

void sub_1D7A94A54(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_validFrom()
{
  return sel_validFrom;
}

uint64_t sub_1D7A94A80@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1D7A932D4(a1, (SEL *)&selRef_validFrom, a2);
}

void sub_1D7A94AA0(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_validUntil()
{
  return sel_validUntil;
}

uint64_t sub_1D7A94ACC@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1D7A932D4(a1, (SEL *)&selRef_validUntil, a2);
}

void sub_1D7A94AEC(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

id sub_1D7A94B0C@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_credential);
  *a2 = result;
  return result;
}

id sub_1D7A94B48(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setCredential_, *a1);
}

char *keypath_get_selector_payloadProtectionKey()
{
  return sel_payloadProtectionKey;
}

id sub_1D7A94B68@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_payloadProtectionKey);
  *a2 = result;
  return result;
}

id sub_1D7A94BA4(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setPayloadProtectionKey_, *a1);
}

char *keypath_get_selector_presentmentKey()
{
  return sel_presentmentKey;
}

id sub_1D7A94BC4@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_presentmentKey);
  *a2 = result;
  return result;
}

id sub_1D7A94C00(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setPresentmentKey_, *a1);
}

id StoredTrustKey.__allocating_init(entity:insertInto:)(void *a1, void *a2)
{
  id v5 = objc_msgSend(objc_allocWithZone(v2), sel_initWithEntity_insertIntoManagedObjectContext_, a1, a2);

  return v5;
}

id StoredTrustKey.init(entity:insertInto:)(void *a1, void *a2)
{
  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for StoredTrustKey();
  id v5 = objc_msgSendSuper2(&v7, sel_initWithEntity_insertIntoManagedObjectContext_, a1, a2);

  return v5;
}

uint64_t type metadata accessor for StoredTrustKey()
{
  return self;
}

id StoredTrustKey.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StoredTrustKey();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id static StoredTrustKey.fetchRequest()()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4F1C0D0]);
  uint64_t v1 = (void *)sub_1D7A9BF98();
  id v2 = objc_msgSend(v0, sel_initWithEntityName_, v1);

  return v2;
}

void sub_1D7A94DF4(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = objc_msgSend(*a1, sel_pairingID);
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = sub_1D7A9BFC8();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

void sub_1D7A94E5C(uint64_t a1, void **a2)
{
  id v2 = *a2;
  if (*(void *)(a1 + 8)) {
    uint64_t v3 = sub_1D7A9BF98();
  }
  else {
    uint64_t v3 = 0;
  }
  id v4 = (id)v3;
  objc_msgSend(v2, sel_setPairingID_);
}

void sub_1D7A94ECC(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = objc_msgSend(*a1, sel_protectedPublicKey);
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = sub_1D7A9B028();
    unint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    unint64_t v7 = 0xF000000000000000;
  }
  *a2 = v5;
  a2[1] = v7;
}

void sub_1D7A94F34(uint64_t a1, void **a2)
{
  id v2 = *a2;
  if (*(void *)(a1 + 8) >> 60 == 15) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = sub_1D7A9AFF8();
  }
  id v4 = (id)v3;
  objc_msgSend(v2, sel_setProtectedPublicKey_);
}

uint64_t sub_1D7A94FAC@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for StoredTrustKey();
  uint64_t result = sub_1D7A9CC68();
  *a1 = result;
  return result;
}

char *keypath_get_selector_pairingID()
{
  return sel_pairingID;
}

char *keypath_get_selector_protectedPublicKey()
{
  return sel_protectedPublicKey;
}

id StoredRelyingParty.__allocating_init(entity:insertInto:)(void *a1, void *a2)
{
  id v5 = objc_msgSend(objc_allocWithZone(v2), sel_initWithEntity_insertIntoManagedObjectContext_, a1, a2);

  return v5;
}

id StoredRelyingParty.init(entity:insertInto:)(void *a1, void *a2)
{
  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for StoredRelyingParty();
  id v5 = objc_msgSendSuper2(&v7, sel_initWithEntity_insertIntoManagedObjectContext_, a1, a2);

  return v5;
}

uint64_t type metadata accessor for StoredRelyingParty()
{
  return self;
}

id StoredRelyingParty.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StoredRelyingParty();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id static StoredRelyingParty.fetchRequest()()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4F1C0D0]);
  uint64_t v1 = (void *)sub_1D7A9BF98();
  id v2 = objc_msgSend(v0, sel_initWithEntityName_, v1);

  return v2;
}

void sub_1D7A951F4(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = objc_msgSend(*a1, sel_relyingPartyIdentifier);
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = sub_1D7A9BFC8();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

void sub_1D7A9525C(uint64_t a1, void **a2)
{
  id v2 = *a2;
  if (*(void *)(a1 + 8)) {
    uint64_t v3 = sub_1D7A9BF98();
  }
  else {
    uint64_t v3 = 0;
  }
  id v4 = (id)v3;
  objc_msgSend(v2, sel_setRelyingPartyIdentifier_);
}

uint64_t sub_1D7A952CC@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for StoredRelyingParty();
  uint64_t result = sub_1D7A9CC68();
  *a1 = result;
  return result;
}

char *keypath_get_selector_relyingPartyIdentifier()
{
  return sel_relyingPartyIdentifier;
}

char *keypath_get_selector_presentmentKeys()
{
  return sel_presentmentKeys;
}

id sub_1D7A95330@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_presentmentKeys);
  *a2 = result;
  return result;
}

id sub_1D7A9536C(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setPresentmentKeys_, *a1);
}

id StoredMobileDocumentReaderApplicationInstallation.__allocating_init(entity:insertInto:)(void *a1, void *a2)
{
  id v5 = objc_msgSend(objc_allocWithZone(v2), sel_initWithEntity_insertIntoManagedObjectContext_, a1, a2);

  return v5;
}

id StoredMobileDocumentReaderApplicationInstallation.init(entity:insertInto:)(void *a1, void *a2)
{
  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for StoredMobileDocumentReaderApplicationInstallation();
  id v5 = objc_msgSendSuper2(&v7, sel_initWithEntity_insertIntoManagedObjectContext_, a1, a2);

  return v5;
}

uint64_t type metadata accessor for StoredMobileDocumentReaderApplicationInstallation()
{
  return self;
}

id StoredMobileDocumentReaderApplicationInstallation.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StoredMobileDocumentReaderApplicationInstallation();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id static StoredMobileDocumentReaderApplicationInstallation.fetchRequest()()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4F1C0D0]);
  uint64_t v1 = (void *)sub_1D7A9BF98();
  id v2 = objc_msgSend(v0, sel_initWithEntityName_, v1);

  return v2;
}

void sub_1D7A95558(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = objc_msgSend(*a1, sel_applicationIdentifier);
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = sub_1D7A9BFC8();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

void sub_1D7A955C0(uint64_t a1, void **a2)
{
  id v2 = *a2;
  if (*(void *)(a1 + 8)) {
    uint64_t v3 = sub_1D7A9BF98();
  }
  else {
    uint64_t v3 = 0;
  }
  id v4 = (id)v3;
  objc_msgSend(v2, sel_setApplicationIdentifier_);
}

uint64_t sub_1D7A95630@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = objc_msgSend(*a1, sel_installationIdentifier);
  if (v3)
  {
    id v4 = v3;
    sub_1D7A9B178();

    uint64_t v5 = sub_1D7A9B1A8();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
    uint64_t v7 = v5;
    uint64_t v8 = a2;
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v10 = sub_1D7A9B1A8();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    uint64_t v7 = v10;
    uint64_t v8 = a2;
    uint64_t v9 = 1;
  }
  return v6(v8, v9, 1, v7);
}

void sub_1D7A956F8(uint64_t a1, void **a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA848260);
  MEMORY[0x1F4188790](v4 - 8, v5, v6, v7, v8, v9, v10, v11);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7A959A4(a1, (uint64_t)v13);
  uint64_t v14 = *a2;
  uint64_t v15 = sub_1D7A9B1A8();
  uint64_t v16 = *(void *)(v15 - 8);
  unint64_t v17 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v13, 1, v15) != 1)
  {
    unint64_t v17 = (void *)sub_1D7A9B168();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
  }
  objc_msgSend(v14, sel_setInstallationIdentifier_, v17);
}

uint64_t sub_1D7A95824@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for StoredMobileDocumentReaderApplicationInstallation();
  uint64_t result = sub_1D7A9CC68();
  *a1 = result;
  return result;
}

char *keypath_get_selector_applicationIdentifier()
{
  return sel_applicationIdentifier;
}

char *keypath_get_selector_installationIdentifier()
{
  return sel_installationIdentifier;
}

char *keypath_get_selector_attestationCertificate()
{
  return sel_attestationCertificate;
}

id sub_1D7A9589C@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_attestationCertificate);
  *a2 = result;
  return result;
}

id sub_1D7A958D8(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setAttestationCertificate_, *a1);
}

char *keypath_get_selector_authenticationCertificates()
{
  return sel_authenticationCertificates;
}

id sub_1D7A958F8@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_authenticationCertificates);
  *a2 = result;
  return result;
}

id sub_1D7A95934(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setAuthenticationCertificates_, *a1);
}

char *keypath_get_selector_signingKeys()
{
  return sel_signingKeys;
}

id sub_1D7A95954@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_signingKeys);
  *a2 = result;
  return result;
}

id sub_1D7A95990(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setSigningKeys_, *a1);
}

uint64_t sub_1D7A959A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA848260);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id StoredMobileDocumentReaderAttestationCertificate.__allocating_init(entity:insertInto:)(void *a1, void *a2)
{
  id v5 = objc_msgSend(objc_allocWithZone(v2), sel_initWithEntity_insertIntoManagedObjectContext_, a1, a2);

  return v5;
}

id StoredMobileDocumentReaderAttestationCertificate.init(entity:insertInto:)(void *a1, void *a2)
{
  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for StoredMobileDocumentReaderAttestationCertificate();
  id v5 = objc_msgSendSuper2(&v7, sel_initWithEntity_insertIntoManagedObjectContext_, a1, a2);

  return v5;
}

uint64_t type metadata accessor for StoredMobileDocumentReaderAttestationCertificate()
{
  return self;
}

id StoredMobileDocumentReaderAttestationCertificate.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StoredMobileDocumentReaderAttestationCertificate();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id static StoredMobileDocumentReaderAttestationCertificate.fetchRequest()()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4F1C0D0]);
  uint64_t v1 = (void *)sub_1D7A9BF98();
  id v2 = objc_msgSend(v0, sel_initWithEntityName_, v1);

  return v2;
}

void sub_1D7A95BE4(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = objc_msgSend(*a1, sel_certificateData);
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = sub_1D7A9B028();
    unint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    unint64_t v7 = 0xF000000000000000;
  }
  *a2 = v5;
  a2[1] = v7;
}

void sub_1D7A95C4C(uint64_t a1, void **a2)
{
  id v2 = *a2;
  if (*(void *)(a1 + 8) >> 60 == 15) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = sub_1D7A9AFF8();
  }
  id v4 = (id)v3;
  objc_msgSend(v2, sel_setCertificateData_);
}

uint64_t sub_1D7A95CC4@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for StoredMobileDocumentReaderAttestationCertificate();
  uint64_t result = sub_1D7A9CC68();
  *a1 = result;
  return result;
}

char *keypath_get_selector_certificateData()
{
  return sel_certificateData;
}

char *keypath_get_selector_applicationInstallation()
{
  return sel_applicationInstallation;
}

id sub_1D7A95D28@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_applicationInstallation);
  *a2 = result;
  return result;
}

id sub_1D7A95D64(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setApplicationInstallation_, *a1);
}

char *keypath_get_selector_signingKey()
{
  return sel_signingKey;
}

id sub_1D7A95D84@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_signingKey);
  *a2 = result;
  return result;
}

id sub_1D7A95DC0(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setSigningKey_, *a1);
}

id StoredMobileDocumentReaderAuthenticationCertificate.__allocating_init(entity:insertInto:)(void *a1, void *a2)
{
  id v5 = objc_msgSend(objc_allocWithZone(v2), sel_initWithEntity_insertIntoManagedObjectContext_, a1, a2);

  return v5;
}

id StoredMobileDocumentReaderAuthenticationCertificate.init(entity:insertInto:)(void *a1, void *a2)
{
  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for StoredMobileDocumentReaderAuthenticationCertificate();
  id v5 = objc_msgSendSuper2(&v7, sel_initWithEntity_insertIntoManagedObjectContext_, a1, a2);

  return v5;
}

uint64_t type metadata accessor for StoredMobileDocumentReaderAuthenticationCertificate()
{
  return self;
}

id StoredMobileDocumentReaderAuthenticationCertificate.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StoredMobileDocumentReaderAuthenticationCertificate();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id static StoredMobileDocumentReaderAuthenticationCertificate.fetchRequest()()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4F1C0D0]);
  uint64_t v1 = (void *)sub_1D7A9BF98();
  id v2 = objc_msgSend(v0, sel_initWithEntityName_, v1);

  return v2;
}

void sub_1D7A95FAC(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = objc_msgSend(*a1, sel_merchantLogo);
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = sub_1D7A9B028();
    unint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    unint64_t v7 = 0xF000000000000000;
  }
  *a2 = v5;
  a2[1] = v7;
}

void sub_1D7A96014(uint64_t a1, void **a2)
{
  id v2 = *a2;
  if (*(void *)(a1 + 8) >> 60 == 15) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = sub_1D7A9AFF8();
  }
  id v4 = (id)v3;
  objc_msgSend(v2, sel_setMerchantLogo_);
}

void sub_1D7A9608C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = objc_msgSend(*a1, sel_sessionIdentifier);
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = sub_1D7A9BFC8();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

void sub_1D7A960F4(uint64_t a1, void **a2)
{
  id v2 = *a2;
  if (*(void *)(a1 + 8)) {
    uint64_t v3 = sub_1D7A9BF98();
  }
  else {
    uint64_t v3 = 0;
  }
  id v4 = (id)v3;
  objc_msgSend(v2, sel_setSessionIdentifier_);
}

uint64_t sub_1D7A96164@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for StoredMobileDocumentReaderAuthenticationCertificate();
  uint64_t result = sub_1D7A9CC68();
  *a1 = result;
  return result;
}

char *keypath_get_selector_certificateChain()
{
  return sel_certificateChain;
}

id sub_1D7A961B4@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_certificateChain);
  *a2 = result;
  return result;
}

id sub_1D7A961F0(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setCertificateChain_, *a1);
}

char *keypath_get_selector_merchantLogo()
{
  return sel_merchantLogo;
}

char *keypath_get_selector_sessionIdentifier()
{
  return sel_sessionIdentifier;
}

id sub_1D7A9622C@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_applicationInstallation);
  *a2 = result;
  return result;
}

id sub_1D7A96268(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setApplicationInstallation_, *a1);
}

id sub_1D7A9627C@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_signingKey);
  *a2 = result;
  return result;
}

id sub_1D7A962B8(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setSigningKey_, *a1);
}

id StoredMobileDocumentReaderSigningKey.__allocating_init(entity:insertInto:)(void *a1, void *a2)
{
  id v5 = objc_msgSend(objc_allocWithZone(v2), sel_initWithEntity_insertIntoManagedObjectContext_, a1, a2);

  return v5;
}

id StoredMobileDocumentReaderSigningKey.init(entity:insertInto:)(void *a1, void *a2)
{
  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for StoredMobileDocumentReaderSigningKey();
  id v5 = objc_msgSendSuper2(&v7, sel_initWithEntity_insertIntoManagedObjectContext_, a1, a2);

  return v5;
}

uint64_t type metadata accessor for StoredMobileDocumentReaderSigningKey()
{
  return self;
}

id StoredMobileDocumentReaderSigningKey.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StoredMobileDocumentReaderSigningKey();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id static StoredMobileDocumentReaderSigningKey.fetchRequest()()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4F1C0D0]);
  uint64_t v1 = (void *)sub_1D7A9BF98();
  id v2 = objc_msgSend(v0, sel_initWithEntityName_, v1);

  return v2;
}

void sub_1D7A964A4(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = objc_msgSend(*a1, sel_keyBlob);
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = sub_1D7A9B028();
    unint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    unint64_t v7 = 0xF000000000000000;
  }
  *a2 = v5;
  a2[1] = v7;
}

void sub_1D7A9650C(uint64_t a1, void **a2)
{
  id v2 = *a2;
  if (*(void *)(a1 + 8) >> 60 == 15) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = sub_1D7A9AFF8();
  }
  id v4 = (id)v3;
  objc_msgSend(v2, sel_setKeyBlob_);
}

uint64_t sub_1D7A96584@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for StoredMobileDocumentReaderSigningKey();
  uint64_t result = sub_1D7A9CC68();
  *a1 = result;
  return result;
}

id sub_1D7A965D0@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_applicationInstallation);
  *a2 = result;
  return result;
}

id sub_1D7A9660C(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setApplicationInstallation_, *a1);
}

char *keypath_get_selector_attestationCertificates()
{
  return sel_attestationCertificates;
}

id sub_1D7A9662C@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_attestationCertificates);
  *a2 = result;
  return result;
}

id sub_1D7A96668(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setAttestationCertificates_, *a1);
}

id sub_1D7A9667C@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_authenticationCertificates);
  *a2 = result;
  return result;
}

id sub_1D7A966B8(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setAuthenticationCertificates_, *a1);
}

id StoredPrearmTrust.__allocating_init(entity:insertInto:)(void *a1, void *a2)
{
  id v5 = objc_msgSend(objc_allocWithZone(v2), sel_initWithEntity_insertIntoManagedObjectContext_, a1, a2);

  return v5;
}

id StoredPrearmTrust.init(entity:insertInto:)(void *a1, void *a2)
{
  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for StoredPrearmTrust();
  id v5 = objc_msgSendSuper2(&v7, sel_initWithEntity_insertIntoManagedObjectContext_, a1, a2);

  return v5;
}

uint64_t type metadata accessor for StoredPrearmTrust()
{
  return self;
}

id StoredPrearmTrust.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StoredPrearmTrust();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id static StoredPrearmTrust.fetchRequest()()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4F1C0D0]);
  uint64_t v1 = (void *)sub_1D7A9BF98();
  id v2 = objc_msgSend(v0, sel_initWithEntityName_, v1);

  return v2;
}

uint64_t sub_1D7A968A8@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for StoredPrearmTrust();
  uint64_t result = sub_1D7A9CC68();
  *a1 = result;
  return result;
}

char *keypath_get_selector_baaCertificate()
{
  return sel_baaCertificate;
}

void sub_1D7A968F8(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A96918(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

void sub_1D7A96938(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A96958(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_requiresDeletion()
{
  return sel_requiresDeletion;
}

id sub_1D7A9698C@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_requiresDeletion);
  *a2 = (_BYTE)result;
  return result;
}

id sub_1D7A969C0(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setRequiresDeletion_, *a1);
}

id sub_1D7A969D4@<X0>(id *a1@<X0>, _WORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_version);
  *a2 = (_WORD)result;
  return result;
}

id sub_1D7A96A08(__int16 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setVersion_, *a1);
}

id StoredProofingBiomeData.__allocating_init(entity:insertInto:)(void *a1, void *a2)
{
  id v5 = objc_msgSend(objc_allocWithZone(v2), sel_initWithEntity_insertIntoManagedObjectContext_, a1, a2);

  return v5;
}

id StoredProofingBiomeData.init(entity:insertInto:)(void *a1, void *a2)
{
  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for StoredProofingBiomeData();
  id v5 = objc_msgSendSuper2(&v7, sel_initWithEntity_insertIntoManagedObjectContext_, a1, a2);

  return v5;
}

uint64_t type metadata accessor for StoredProofingBiomeData()
{
  return self;
}

id StoredProofingBiomeData.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StoredProofingBiomeData();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id static StoredProofingBiomeData.fetchRequest()()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4F1C0D0]);
  uint64_t v1 = (void *)sub_1D7A9BF98();
  id v2 = objc_msgSend(v0, sel_initWithEntityName_, v1);

  return v2;
}

uint64_t sub_1D7A96BF4@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = objc_msgSend(*a1, sel_optInDate);
  if (v3)
  {
    id v4 = v3;
    sub_1D7A9B118();

    uint64_t v5 = sub_1D7A9B148();
    unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
    uint64_t v7 = v5;
    uint64_t v8 = a2;
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v10 = sub_1D7A9B148();
    unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    uint64_t v7 = v10;
    uint64_t v8 = a2;
    uint64_t v9 = 1;
  }
  return v6(v8, v9, 1, v7);
}

void sub_1D7A96CBC(uint64_t a1, void **a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9118);
  MEMORY[0x1F4188790](v4 - 8, v5, v6, v7, v8, v9, v10, v11);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7919F20(a1, (uint64_t)v13);
  uint64_t v14 = *a2;
  uint64_t v15 = sub_1D7A9B148();
  uint64_t v16 = *(void *)(v15 - 8);
  unint64_t v17 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v13, 1, v15) != 1)
  {
    unint64_t v17 = (void *)sub_1D7A9B0C8();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
  }
  objc_msgSend(v14, sel_setOptInDate_, v17);
}

uint64_t sub_1D7A96DE8@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for StoredProofingBiomeData();
  uint64_t result = sub_1D7A9CC68();
  *a1 = result;
  return result;
}

void sub_1D7A96E2C(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A96E4C(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_isDonated()
{
  return sel_isDonated;
}

id sub_1D7A96E78@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_isDonated);
  *a2 = (_BYTE)result;
  return result;
}

id sub_1D7A96EAC(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setIsDonated_, *a1);
}

char *keypath_get_selector_optInDate()
{
  return sel_optInDate;
}

char *keypath_get_selector_optInStatus()
{
  return sel_optInStatus;
}

id sub_1D7A96EE0@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_optInStatus);
  *a2 = (_BYTE)result;
  return result;
}

id sub_1D7A96F14(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setOptInStatus_, *a1);
}

char *keypath_get_selector_proofingDecision()
{
  return sel_proofingDecision;
}

void sub_1D7A96F34(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A96F54(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

void sub_1D7A96F74(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A96F94(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

id StoredProofingSession.__allocating_init(entity:insertInto:)(void *a1, void *a2)
{
  id v5 = objc_msgSend(objc_allocWithZone(v2), sel_initWithEntity_insertIntoManagedObjectContext_, a1, a2);

  return v5;
}

id StoredProofingSession.init(entity:insertInto:)(void *a1, void *a2)
{
  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for StoredProofingSession();
  id v5 = objc_msgSendSuper2(&v7, sel_initWithEntity_insertIntoManagedObjectContext_, a1, a2);

  return v5;
}

uint64_t type metadata accessor for StoredProofingSession()
{
  return self;
}

id StoredProofingSession.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StoredProofingSession();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id static StoredProofingSession.fetchRequest()()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4F1C0D0]);
  uint64_t v1 = (void *)sub_1D7A9BF98();
  id v2 = objc_msgSend(v0, sel_initWithEntityName_, v1);

  return v2;
}

void sub_1D7A97194(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9118);
  MEMORY[0x1F4188790](v8 - 8, v9, v10, v11, v12, v13, v14, v15);
  unint64_t v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7919F20(a1, (uint64_t)v17);
  uint64_t v18 = *a2;
  uint64_t v19 = sub_1D7A9B148();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v17, 1, v19) != 1)
  {
    uint64_t v21 = (void *)sub_1D7A9B0C8();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
  }
  objc_msgSend(v18, *a5, v21);
}

uint64_t sub_1D7A972C0@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for StoredProofingSession();
  uint64_t result = sub_1D7A9CC68();
  *a1 = result;
  return result;
}

char *keypath_get_selector_canUploadOnExpensiveNetwork()
{
  return sel_canUploadOnExpensiveNetwork;
}

id sub_1D7A97310@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_canUploadOnExpensiveNetwork);
  *a2 = (_BYTE)result;
  return result;
}

id sub_1D7A97344(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setCanUploadOnExpensiveNetwork_, *a1);
}

char *keypath_get_selector_cloudKitUploadsMaxRetryCount()
{
  return sel_cloudKitUploadsMaxRetryCount;
}

id sub_1D7A97364@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_cloudKitUploadsMaxRetryCount);
  *a2 = result;
  return result;
}

id sub_1D7A97398(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setCloudKitUploadsMaxRetryCount_, *a1);
}

char *keypath_get_selector_connectToWifiReminderInDays()
{
  return sel_connectToWifiReminderInDays;
}

id sub_1D7A973B8@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_connectToWifiReminderInDays);
  *a2 = result;
  return result;
}

id sub_1D7A973EC(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setConnectToWifiReminderInDays_, *a1);
}

char *keypath_get_selector_country()
{
  return sel_country;
}

void sub_1D7A9740C(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A9742C(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_1D7A9744C@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1D7A932D4(a1, (SEL *)&selRef_createdAt, a2);
}

void sub_1D7A9746C(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

void sub_1D7A9748C(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A974AC(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_didAttemptComboProofing()
{
  return sel_didAttemptComboProofing;
}

id sub_1D7A974D8@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_didAttemptComboProofing);
  *a2 = (_BYTE)result;
  return result;
}

id sub_1D7A9750C(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setDidAttemptComboProofing_, *a1);
}

char *keypath_get_selector_didNotifyOnUploadsCompletion()
{
  return sel_didNotifyOnUploadsCompletion;
}

id sub_1D7A9752C@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_didNotifyOnUploadsCompletion);
  *a2 = (_BYTE)result;
  return result;
}

id sub_1D7A97560(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setDidNotifyOnUploadsCompletion_, *a1);
}

char *keypath_get_selector_didShowWifiReminderAlert()
{
  return sel_didShowWifiReminderAlert;
}

id sub_1D7A97580@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_didShowWifiReminderAlert);
  *a2 = (_BYTE)result;
  return result;
}

id sub_1D7A975B4(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setDidShowWifiReminderAlert_, *a1);
}

char *keypath_get_selector_extendedReviewURLString()
{
  return sel_extendedReviewURLString;
}

void sub_1D7A975D4(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A975F4(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_hasUserConsentToShareBiomeData()
{
  return sel_hasUserConsentToShareBiomeData;
}

id sub_1D7A97620@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_hasUserConsentToShareBiomeData);
  *a2 = (_BYTE)result;
  return result;
}

id sub_1D7A97654(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setHasUserConsentToShareBiomeData_, *a1);
}

char *keypath_get_selector_idType()
{
  return sel_idType;
}

void sub_1D7A97674(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A97694(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_issuerCurrentCredentialCapacity()
{
  return sel_issuerCurrentCredentialCapacity;
}

id sub_1D7A976C0@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_issuerCurrentCredentialCapacity);
  *a2 = result;
  return result;
}

id sub_1D7A976F4(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setIssuerCurrentCredentialCapacity_, *a1);
}

char *keypath_get_selector_lastExecutedActionIdentifier()
{
  return sel_lastExecutedActionIdentifier;
}

void sub_1D7A97714(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A97734(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_learnMoreURLString()
{
  return sel_learnMoreURLString;
}

void sub_1D7A97760(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A97780(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_manualCheckInterval()
{
  return sel_manualCheckInterval;
}

id sub_1D7A977AC@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_manualCheckInterval);
  *a2 = result;
  return result;
}

id sub_1D7A977E0(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setManualCheckInterval_, *a1);
}

void sub_1D7A977F4(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A97814(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_partnerSchemeID()
{
  return sel_partnerSchemeID;
}

void sub_1D7A97840(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A97860(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_productIdentifier()
{
  return sel_productIdentifier;
}

void sub_1D7A9788C(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A978AC(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_proofingActionStatus()
{
  return sel_proofingActionStatus;
}

id sub_1D7A978D8@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_proofingActionStatus);
  *a2 = result;
  return result;
}

id sub_1D7A9790C(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setProofingActionStatus_, *a1);
}

void sub_1D7A97920(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A97940(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_provisioningAttemptDate()
{
  return sel_provisioningAttemptDate;
}

uint64_t sub_1D7A9796C@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1D7A932D4(a1, (SEL *)&selRef_provisioningAttemptDate, a2);
}

void sub_1D7A9798C(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_provisioningCredentialID()
{
  return sel_provisioningCredentialID;
}

void sub_1D7A979B8(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A979D8(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_provisioningRetryTimeout()
{
  return sel_provisioningRetryTimeout;
}

id sub_1D7A97A04@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_provisioningRetryTimeout);
  *a2 = result;
  return result;
}

id sub_1D7A97A38(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setProvisioningRetryTimeout_, *a1);
}

char *keypath_get_selector_provisioningTargetInstanceID()
{
  return sel_provisioningTargetInstanceID;
}

void sub_1D7A97A58(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A97A78(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_serverAttestedProvisioningData()
{
  return sel_serverAttestedProvisioningData;
}

void sub_1D7A97AA4(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A97AC4(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_shouldScheduleUploads()
{
  return sel_shouldScheduleUploads;
}

id sub_1D7A97AF0@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_shouldScheduleUploads);
  *a2 = (_BYTE)result;
  return result;
}

id sub_1D7A97B24(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setShouldScheduleUploads_, *a1);
}

char *keypath_get_selector_shouldShowNotificationOnWatch()
{
  return sel_shouldShowNotificationOnWatch;
}

id sub_1D7A97B44@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_shouldShowNotificationOnWatch);
  *a2 = (_BYTE)result;
  return result;
}

id sub_1D7A97B78(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setShouldShowNotificationOnWatch_, *a1);
}

void sub_1D7A97B8C(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A97BAC(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_supplementalProvisioningData()
{
  return sel_supplementalProvisioningData;
}

void sub_1D7A97BD8(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A97BF8(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_target()
{
  return sel_target;
}

id sub_1D7A97C24@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_target);
  *a2 = result;
  return result;
}

id sub_1D7A97C58(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setTarget_, *a1);
}

char *keypath_get_selector_totalUploadAssetsFileSizeInBytes()
{
  return sel_totalUploadAssetsFileSizeInBytes;
}

id sub_1D7A97C78@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_totalUploadAssetsFileSizeInBytes);
  *a2 = result;
  return result;
}

id sub_1D7A97CAC(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setTotalUploadAssetsFileSizeInBytes_, *a1);
}

char *keypath_get_selector_workflowID()
{
  return sel_workflowID;
}

void sub_1D7A97CCC(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A97CEC(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_uploadAssets()
{
  return sel_uploadAssets;
}

id sub_1D7A97D18@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_uploadAssets);
  *a2 = result;
  return result;
}

id sub_1D7A97D54(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setUploadAssets_, *a1);
}

id StoredRACCredential.__allocating_init(entity:insertInto:)(void *a1, void *a2)
{
  id v5 = objc_msgSend(objc_allocWithZone(v2), sel_initWithEntity_insertIntoManagedObjectContext_, a1, a2);

  return v5;
}

id StoredRACCredential.init(entity:insertInto:)(void *a1, void *a2)
{
  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for StoredRACCredential();
  id v5 = objc_msgSendSuper2(&v7, sel_initWithEntity_insertIntoManagedObjectContext_, a1, a2);

  return v5;
}

uint64_t type metadata accessor for StoredRACCredential()
{
  return self;
}

id StoredRACCredential.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StoredRACCredential();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id static StoredRACCredential.fetchRequest()()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4F1C0D0]);
  uint64_t v1 = (void *)sub_1D7A9BF98();
  id v2 = objc_msgSend(v0, sel_initWithEntityName_, v1);

  return v2;
}

uint64_t sub_1D7A97F48@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = objc_msgSend(*a1, sel_lastReportTime);
  if (v3)
  {
    uint64_t v4 = v3;
    sub_1D7A9B118();

    uint64_t v5 = sub_1D7A9B148();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
    uint64_t v7 = v5;
    uint64_t v8 = a2;
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v10 = sub_1D7A9B148();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    uint64_t v7 = v10;
    uint64_t v8 = a2;
    uint64_t v9 = 1;
  }
  return v6(v8, v9, 1, v7);
}

void sub_1D7A98010(uint64_t a1, void **a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9118);
  MEMORY[0x1F4188790](v4 - 8, v5, v6, v7, v8, v9, v10, v11);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7919F20(a1, (uint64_t)v13);
  uint64_t v14 = *a2;
  uint64_t v15 = sub_1D7A9B148();
  uint64_t v16 = *(void *)(v15 - 8);
  unint64_t v17 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v13, 1, v15) != 1)
  {
    unint64_t v17 = (void *)sub_1D7A9B0C8();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
  }
  objc_msgSend(v14, sel_setLastReportTime_, v17);
}

uint64_t sub_1D7A9813C@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for StoredRACCredential();
  uint64_t result = sub_1D7A9CC68();
  *a1 = result;
  return result;
}

char *keypath_get_selector_analyticsID()
{
  return sel_analyticsID;
}

void sub_1D7A9818C(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A981AC(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

void sub_1D7A981CC(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A981EC(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_lastReportTime()
{
  return sel_lastReportTime;
}

char *keypath_get_selector_presentments()
{
  return sel_presentments;
}

id sub_1D7A9822C@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_presentments);
  *a2 = result;
  return result;
}

id sub_1D7A98268(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setPresentments_, *a1);
}

id StoredRACPresentment.__allocating_init(entity:insertInto:)(void *a1, void *a2)
{
  id v5 = objc_msgSend(objc_allocWithZone(v2), sel_initWithEntity_insertIntoManagedObjectContext_, a1, a2);

  return v5;
}

id StoredRACPresentment.init(entity:insertInto:)(void *a1, void *a2)
{
  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for StoredRACPresentment();
  id v5 = objc_msgSendSuper2(&v7, sel_initWithEntity_insertIntoManagedObjectContext_, a1, a2);

  return v5;
}

uint64_t type metadata accessor for StoredRACPresentment()
{
  return self;
}

id StoredRACPresentment.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StoredRACPresentment();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id static StoredRACPresentment.fetchRequest()()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4F1C0D0]);
  uint64_t v1 = (void *)sub_1D7A9BF98();
  id v2 = objc_msgSend(v0, sel_initWithEntityName_, v1);

  return v2;
}

uint64_t sub_1D7A9845C@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for StoredRACPresentment();
  uint64_t result = sub_1D7A9CC68();
  *a1 = result;
  return result;
}

void sub_1D7A984A0(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A984C0(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_presentmentID()
{
  return sel_presentmentID;
}

void sub_1D7A984EC(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A9850C(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

id sub_1D7A9852C@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_credential);
  *a2 = result;
  return result;
}

id sub_1D7A98568(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setCredential_, *a1);
}

id StoredRandomizedBackgroundActivity.__allocating_init(entity:insertInto:)(void *a1, void *a2)
{
  id v5 = objc_msgSend(objc_allocWithZone(v2), sel_initWithEntity_insertIntoManagedObjectContext_, a1, a2);

  return v5;
}

id StoredRandomizedBackgroundActivity.init(entity:insertInto:)(void *a1, void *a2)
{
  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for StoredRandomizedBackgroundActivity();
  id v5 = objc_msgSendSuper2(&v7, sel_initWithEntity_insertIntoManagedObjectContext_, a1, a2);

  return v5;
}

uint64_t type metadata accessor for StoredRandomizedBackgroundActivity()
{
  return self;
}

id StoredRandomizedBackgroundActivity.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StoredRandomizedBackgroundActivity();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id static StoredRandomizedBackgroundActivity.fetchRequest()()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4F1C0D0]);
  uint64_t v1 = (void *)sub_1D7A9BF98();
  id v2 = objc_msgSend(v0, sel_initWithEntityName_, v1);

  return v2;
}

void sub_1D7A98754(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBDF9118);
  MEMORY[0x1F4188790](v8 - 8, v9, v10, v11, v12, v13, v14, v15);
  unint64_t v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7919F20(a1, (uint64_t)v17);
  uint64_t v18 = *a2;
  uint64_t v19 = sub_1D7A9B148();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v17, 1, v19) != 1)
  {
    uint64_t v21 = (void *)sub_1D7A9B0C8();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
  }
  objc_msgSend(v18, *a5, v21);
}

uint64_t sub_1D7A98880@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for StoredRandomizedBackgroundActivity();
  uint64_t result = sub_1D7A9CC68();
  *a1 = result;
  return result;
}

char *keypath_get_selector_lastAttemptAt()
{
  return sel_lastAttemptAt;
}

uint64_t sub_1D7A988D8@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1D7A932D4(a1, (SEL *)&selRef_lastAttemptAt, a2);
}

void sub_1D7A988F8(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_lastSuccessfulAttemptAt()
{
  return sel_lastSuccessfulAttemptAt;
}

uint64_t sub_1D7A98924@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1D7A932D4(a1, (SEL *)&selRef_lastSuccessfulAttemptAt, a2);
}

void sub_1D7A98944(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_nextAttemptAt()
{
  return sel_nextAttemptAt;
}

uint64_t sub_1D7A98970@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1D7A932D4(a1, (SEL *)&selRef_nextAttemptAt, a2);
}

void sub_1D7A98990(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

id StoredUploadAsset.__allocating_init(entity:insertInto:)(void *a1, void *a2)
{
  id v5 = objc_msgSend(objc_allocWithZone(v2), sel_initWithEntity_insertIntoManagedObjectContext_, a1, a2);

  return v5;
}

id StoredUploadAsset.init(entity:insertInto:)(void *a1, void *a2)
{
  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for StoredUploadAsset();
  id v5 = objc_msgSendSuper2(&v7, sel_initWithEntity_insertIntoManagedObjectContext_, a1, a2);

  return v5;
}

uint64_t type metadata accessor for StoredUploadAsset()
{
  return self;
}

id StoredUploadAsset.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StoredUploadAsset();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id static StoredUploadAsset.fetchRequest()()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4F1C0D0]);
  uint64_t v1 = (void *)sub_1D7A9BF98();
  id v2 = objc_msgSend(v0, sel_initWithEntityName_, v1);

  return v2;
}

uint64_t sub_1D7A98B8C@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for StoredUploadAsset();
  uint64_t result = sub_1D7A9CC68();
  *a1 = result;
  return result;
}

char *keypath_get_selector_assetFileURL()
{
  return sel_assetFileURL;
}

void sub_1D7A98BDC(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A98BFC(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_assetType()
{
  return sel_assetType;
}

void sub_1D7A98C28(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A98C48(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_recordUUID()
{
  return sel_recordUUID;
}

void sub_1D7A98C74(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D7A98C94(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_proofingSession()
{
  return sel_proofingSession;
}

id sub_1D7A98CC0@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_proofingSession);
  *a2 = result;
  return result;
}

id sub_1D7A98CFC(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setProofingSession_, *a1);
}

void AuthorizePresentmentFromAppleIDV_cold_1()
{
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2(&dword_1D7853000, v0, v1, "[line %d] kret = %d 0x%lx", v2, v3, v4, v5, v6);
}

void AuthorizePresentmentFromAppleIDV_cold_2(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = [MEMORY[0x1E4F1C9B8] dataWithBytes:a1 length:a2];
  int v5 = 138412290;
  uint8_t v6 = v4;
  _os_log_debug_impl(&dword_1D7853000, a3, OS_LOG_TYPE_DEBUG, "input Buffer: %@", (uint8_t *)&v5, 0xCu);
}

uint64_t sub_1D7A9ABD8()
{
  return MEMORY[0x1F40E3038]();
}

uint64_t sub_1D7A9ABE8()
{
  return MEMORY[0x1F40E3060]();
}

uint64_t sub_1D7A9ABF8()
{
  return MEMORY[0x1F40E3070]();
}

uint64_t sub_1D7A9AC08()
{
  return MEMORY[0x1F40E3110]();
}

uint64_t sub_1D7A9AC18()
{
  return MEMORY[0x1F40E3118]();
}

uint64_t sub_1D7A9AC28()
{
  return MEMORY[0x1F40E3128]();
}

uint64_t sub_1D7A9AC38()
{
  return MEMORY[0x1F40E3150]();
}

uint64_t sub_1D7A9AC48()
{
  return MEMORY[0x1F40E3160]();
}

uint64_t sub_1D7A9AC58()
{
  return MEMORY[0x1F40E3368]();
}

uint64_t sub_1D7A9AC68()
{
  return MEMORY[0x1F40E3420]();
}

uint64_t sub_1D7A9AC78()
{
  return MEMORY[0x1F40E37C0]();
}

uint64_t sub_1D7A9AC88()
{
  return MEMORY[0x1F40E37D0]();
}

uint64_t sub_1D7A9AC98()
{
  return MEMORY[0x1F40E37E0]();
}

uint64_t sub_1D7A9ACA8()
{
  return MEMORY[0x1F40E3800]();
}

uint64_t sub_1D7A9ACB8()
{
  return MEMORY[0x1F40E3818]();
}

uint64_t sub_1D7A9ACC8()
{
  return MEMORY[0x1F40E3820]();
}

uint64_t sub_1D7A9ACD8()
{
  return MEMORY[0x1F40E3830]();
}

uint64_t sub_1D7A9ACE8()
{
  return MEMORY[0x1F40E3938]();
}

uint64_t sub_1D7A9ACF8()
{
  return MEMORY[0x1F40E3970]();
}

uint64_t sub_1D7A9AD08()
{
  return MEMORY[0x1F40E39C8]();
}

uint64_t sub_1D7A9AD18()
{
  return MEMORY[0x1F40E3A10]();
}

uint64_t sub_1D7A9AD28()
{
  return MEMORY[0x1F40E3A58]();
}

uint64_t sub_1D7A9AD38()
{
  return MEMORY[0x1F40E3B70]();
}

uint64_t sub_1D7A9AD48()
{
  return MEMORY[0x1F40E3F60]();
}

uint64_t sub_1D7A9AD58()
{
  return MEMORY[0x1F40E3FB8]();
}

uint64_t sub_1D7A9AD68()
{
  return MEMORY[0x1F40E4000]();
}

uint64_t sub_1D7A9AD78()
{
  return MEMORY[0x1F40E4008]();
}

uint64_t sub_1D7A9AD88()
{
  return MEMORY[0x1F40E40C8]();
}

uint64_t sub_1D7A9AD98()
{
  return MEMORY[0x1F40E40E8]();
}

uint64_t sub_1D7A9ADA8()
{
  return MEMORY[0x1F40E4138]();
}

uint64_t sub_1D7A9ADB8()
{
  return MEMORY[0x1F40E41E0]();
}

uint64_t sub_1D7A9ADC8()
{
  return MEMORY[0x1F40E4210]();
}

uint64_t sub_1D7A9ADD8()
{
  return MEMORY[0x1F40E4220]();
}

uint64_t sub_1D7A9AE48()
{
  return MEMORY[0x1F40E4540]();
}

uint64_t sub_1D7A9AE58()
{
  return MEMORY[0x1F40E4550]();
}

uint64_t sub_1D7A9AE68()
{
  return MEMORY[0x1F40E46B8]();
}

uint64_t sub_1D7A9AE78()
{
  return MEMORY[0x1F40E46D0]();
}

uint64_t sub_1D7A9AE88()
{
  return MEMORY[0x1F40E47E0]();
}

uint64_t sub_1D7A9AE98()
{
  return MEMORY[0x1F40E4810]();
}

uint64_t sub_1D7A9AEA8()
{
  return MEMORY[0x1F40E48F8]();
}

uint64_t sub_1D7A9AEB8()
{
  return MEMORY[0x1F40E4918]();
}

uint64_t sub_1D7A9AEC8()
{
  return MEMORY[0x1F40E4938]();
}

uint64_t sub_1D7A9AED8()
{
  return MEMORY[0x1F40E4960]();
}

uint64_t sub_1D7A9AEE8()
{
  return MEMORY[0x1F40E4970]();
}

uint64_t sub_1D7A9AEF8()
{
  return MEMORY[0x1F40E4978]();
}

uint64_t sub_1D7A9AF08()
{
  return MEMORY[0x1F40E49A0]();
}

uint64_t sub_1D7A9AF18()
{
  return MEMORY[0x1F40E49E0]();
}

uint64_t sub_1D7A9AF28()
{
  return MEMORY[0x1F40E49E8]();
}

uint64_t sub_1D7A9AF38()
{
  return MEMORY[0x1F40E4A70]();
}

uint64_t sub_1D7A9AF48()
{
  return MEMORY[0x1F40E4AC0]();
}

uint64_t sub_1D7A9AF58()
{
  return MEMORY[0x1F40E4B20]();
}

uint64_t sub_1D7A9AF68()
{
  return MEMORY[0x1F40E4B80]();
}

uint64_t sub_1D7A9AF78()
{
  return MEMORY[0x1F40E4BC8]();
}

uint64_t sub_1D7A9AF88()
{
  return MEMORY[0x1F40E4BE0]();
}

uint64_t sub_1D7A9AF98()
{
  return MEMORY[0x1F40E4C30]();
}

uint64_t sub_1D7A9AFA8()
{
  return MEMORY[0x1F40E4C58]();
}

uint64_t sub_1D7A9AFB8()
{
  return MEMORY[0x1F40E4C78]();
}

uint64_t sub_1D7A9AFC8()
{
  return MEMORY[0x1F40E4C80]();
}

uint64_t sub_1D7A9AFD8()
{
  return MEMORY[0x1F40E4CD8]();
}

uint64_t sub_1D7A9AFE8()
{
  return MEMORY[0x1F40E4CF8]();
}

uint64_t sub_1D7A9AFF8()
{
  return MEMORY[0x1F40E4D48]();
}

uint64_t sub_1D7A9B008()
{
  return MEMORY[0x1F40E4D58]();
}

uint64_t sub_1D7A9B018()
{
  return MEMORY[0x1F40E4D90]();
}

uint64_t sub_1D7A9B028()
{
  return MEMORY[0x1F40E4DA8]();
}

uint64_t sub_1D7A9B038()
{
  return MEMORY[0x1F40E4DB8]();
}

uint64_t sub_1D7A9B048()
{
  return MEMORY[0x1F40E4E30]();
}

uint64_t sub_1D7A9B058()
{
  return MEMORY[0x1F40E4E48]();
}

uint64_t sub_1D7A9B068()
{
  return MEMORY[0x1F40E4E60]();
}

uint64_t sub_1D7A9B078()
{
  return MEMORY[0x1F40E4EC8]();
}

uint64_t sub_1D7A9B088()
{
  return MEMORY[0x1F40E4ED0]();
}

uint64_t sub_1D7A9B098()
{
  return MEMORY[0x1F40E4EE0]();
}

uint64_t sub_1D7A9B0A8()
{
  return MEMORY[0x1F40E5088]();
}

uint64_t sub_1D7A9B0B8()
{
  return MEMORY[0x1F40E5158]();
}

uint64_t sub_1D7A9B0C8()
{
  return MEMORY[0x1F40E5188]();
}

uint64_t sub_1D7A9B0D8()
{
  return MEMORY[0x1F40E5198]();
}

uint64_t sub_1D7A9B0E8()
{
  return MEMORY[0x1F40E51A8]();
}

uint64_t sub_1D7A9B0F8()
{
  return MEMORY[0x1F40E52B0]();
}

uint64_t sub_1D7A9B108()
{
  return MEMORY[0x1F40E52C0]();
}

uint64_t sub_1D7A9B118()
{
  return MEMORY[0x1F40E52E0]();
}

uint64_t sub_1D7A9B128()
{
  return MEMORY[0x1F40E52F0]();
}

uint64_t sub_1D7A9B138()
{
  return MEMORY[0x1F40E5378]();
}

uint64_t sub_1D7A9B148()
{
  return MEMORY[0x1F40E5388]();
}

uint64_t sub_1D7A9B158()
{
  return MEMORY[0x1F40E53B0]();
}

uint64_t sub_1D7A9B168()
{
  return MEMORY[0x1F40E53C8]();
}

uint64_t sub_1D7A9B178()
{
  return MEMORY[0x1F40E53F8]();
}

uint64_t sub_1D7A9B188()
{
  return MEMORY[0x1F40E5428]();
}

uint64_t sub_1D7A9B198()
{
  return MEMORY[0x1F40E5438]();
}

uint64_t sub_1D7A9B1A8()
{
  return MEMORY[0x1F40E5448]();
}

uint64_t sub_1D7A9B1B8()
{
  return MEMORY[0x1F40E5500]();
}

uint64_t sub_1D7A9B1C8()
{
  return MEMORY[0x1F40E5648]();
}

uint64_t sub_1D7A9B1D8()
{
  return MEMORY[0x1F40E5658]();
}

uint64_t sub_1D7A9B1E8()
{
  return MEMORY[0x1F40E56B0]();
}

uint64_t sub_1D7A9B1F8()
{
  return MEMORY[0x1F40E56C8]();
}

uint64_t sub_1D7A9B208()
{
  return MEMORY[0x1F40E5718]();
}

uint64_t sub_1D7A9B218()
{
  return MEMORY[0x1F40E5728]();
}

uint64_t sub_1D7A9B228()
{
  return MEMORY[0x1F40E5890]();
}

uint64_t sub_1D7A9B238()
{
  return MEMORY[0x1F40E58A8]();
}

uint64_t sub_1D7A9B248()
{
  return MEMORY[0x1F40E58B0]();
}

uint64_t sub_1D7A9B258()
{
  return MEMORY[0x1F40E5960]();
}

uint64_t sub_1D7A9B268()
{
  return MEMORY[0x1F40E5978]();
}

uint64_t sub_1D7A9B278()
{
  return MEMORY[0x1F40E5A40]();
}

uint64_t sub_1D7A9B288()
{
  return MEMORY[0x1F40E5AB8]();
}

uint64_t sub_1D7A9B298()
{
  return MEMORY[0x1F40E5AE0]();
}

uint64_t sub_1D7A9B2A8()
{
  return MEMORY[0x1F40E5AF0]();
}

uint64_t sub_1D7A9B2B8()
{
  return MEMORY[0x1F40E5B18]();
}

uint64_t sub_1D7A9B2C8()
{
  return MEMORY[0x1F40E5CC0]();
}

uint64_t sub_1D7A9B2D8()
{
  return MEMORY[0x1F40E5CF8]();
}

uint64_t sub_1D7A9B2E8()
{
  return MEMORY[0x1F40E5D28]();
}

uint64_t sub_1D7A9B2F8()
{
  return MEMORY[0x1F40E5D70]();
}

uint64_t sub_1D7A9B308()
{
  return MEMORY[0x1F40E5E48]();
}

uint64_t sub_1D7A9B318()
{
  return MEMORY[0x1F410D140]();
}

uint64_t sub_1D7A9B328()
{
  return MEMORY[0x1F410D148]();
}

uint64_t sub_1D7A9B338()
{
  return MEMORY[0x1F410D158]();
}

uint64_t sub_1D7A9B348()
{
  return MEMORY[0x1F410D160]();
}

uint64_t sub_1D7A9B358()
{
  return MEMORY[0x1F410D168]();
}

uint64_t sub_1D7A9B368()
{
  return MEMORY[0x1F410D170]();
}

uint64_t sub_1D7A9B378()
{
  return MEMORY[0x1F410D180]();
}

uint64_t sub_1D7A9B388()
{
  return MEMORY[0x1F410D190]();
}

uint64_t sub_1D7A9B398()
{
  return MEMORY[0x1F410D198]();
}

uint64_t sub_1D7A9B3A8()
{
  return MEMORY[0x1F410D1A0]();
}

uint64_t sub_1D7A9B3B8()
{
  return MEMORY[0x1F410D1A8]();
}

uint64_t sub_1D7A9B3C8()
{
  return MEMORY[0x1F410D1B0]();
}

uint64_t sub_1D7A9B3D8()
{
  return MEMORY[0x1F410D1C0]();
}

uint64_t sub_1D7A9B3E8()
{
  return MEMORY[0x1F410D1C8]();
}

uint64_t sub_1D7A9B3F8()
{
  return MEMORY[0x1F410D1D8]();
}

uint64_t sub_1D7A9B408()
{
  return MEMORY[0x1F410D1F0]();
}

uint64_t sub_1D7A9B418()
{
  return MEMORY[0x1F410D200]();
}

uint64_t sub_1D7A9B428()
{
  return MEMORY[0x1F410D210]();
}

uint64_t sub_1D7A9B438()
{
  return MEMORY[0x1F410D218]();
}

uint64_t sub_1D7A9B448()
{
  return MEMORY[0x1F410D220]();
}

uint64_t sub_1D7A9B458()
{
  return MEMORY[0x1F410D228]();
}

uint64_t sub_1D7A9B468()
{
  return MEMORY[0x1F410D230]();
}

uint64_t sub_1D7A9B478()
{
  return MEMORY[0x1F4119150]();
}

uint64_t sub_1D7A9B488()
{
  return MEMORY[0x1F4147898]();
}

uint64_t sub_1D7A9B498()
{
  return MEMORY[0x1F4186958]();
}

uint64_t sub_1D7A9B4A8()
{
  return MEMORY[0x1F4186968]();
}

uint64_t sub_1D7A9B4B8()
{
  return MEMORY[0x1F4186978]();
}

uint64_t sub_1D7A9B4C8()
{
  return MEMORY[0x1F4188308]();
}

uint64_t sub_1D7A9B4D8()
{
  return MEMORY[0x1F4188358]();
}

uint64_t sub_1D7A9B4E8()
{
  return MEMORY[0x1F4188378]();
}

uint64_t sub_1D7A9B4F8()
{
  return MEMORY[0x1F41883B8]();
}

uint64_t sub_1D7A9B508()
{
  return MEMORY[0x1F41883C0]();
}

uint64_t sub_1D7A9B518()
{
  return MEMORY[0x1F41883D8]();
}

uint64_t sub_1D7A9B528()
{
  return MEMORY[0x1F4188568]();
}

uint64_t sub_1D7A9B538()
{
  return MEMORY[0x1F4188570]();
}

uint64_t sub_1D7A9B548()
{
  return MEMORY[0x1F4188580]();
}

uint64_t sub_1D7A9B558()
{
  return MEMORY[0x1F4188590]();
}

uint64_t sub_1D7A9B568()
{
  return MEMORY[0x1F41885B0]();
}

uint64_t sub_1D7A9B578()
{
  return MEMORY[0x1F41885D0]();
}

uint64_t sub_1D7A9B588()
{
  return MEMORY[0x1F41885E0]();
}

uint64_t sub_1D7A9B598()
{
  return MEMORY[0x1F4188650]();
}

uint64_t sub_1D7A9B5A8()
{
  return MEMORY[0x1F4188658]();
}

uint64_t sub_1D7A9B5B8()
{
  return MEMORY[0x1F4188660]();
}

uint64_t sub_1D7A9B5C8()
{
  return MEMORY[0x1F4188668]();
}

uint64_t sub_1D7A9B5D8()
{
  return MEMORY[0x1F4188670]();
}

uint64_t sub_1D7A9B5E8()
{
  return MEMORY[0x1F4188680]();
}

uint64_t sub_1D7A9B5F8()
{
  return MEMORY[0x1F41886A0]();
}

uint64_t sub_1D7A9B608()
{
  return MEMORY[0x1F40F1FF0]();
}

uint64_t sub_1D7A9B618()
{
  return MEMORY[0x1F40F2398]();
}

uint64_t sub_1D7A9B628()
{
  return MEMORY[0x1F40F23A0]();
}

uint64_t sub_1D7A9B638()
{
  return MEMORY[0x1F40F23A8]();
}

uint64_t sub_1D7A9B648()
{
  return MEMORY[0x1F40F23C0]();
}

uint64_t sub_1D7A9B658()
{
  return MEMORY[0x1F40F23C8]();
}

uint64_t sub_1D7A9B668()
{
  return MEMORY[0x1F40F2690]();
}

uint64_t sub_1D7A9B678()
{
  return MEMORY[0x1F40F26E0]();
}

uint64_t sub_1D7A9B688()
{
  return MEMORY[0x1F40F2718]();
}

uint64_t sub_1D7A9B698()
{
  return MEMORY[0x1F4186C60]();
}

uint64_t sub_1D7A9B6A8()
{
  return MEMORY[0x1F4186C78]();
}

uint64_t sub_1D7A9B6B8()
{
  return MEMORY[0x1F4186C90]();
}

uint64_t sub_1D7A9B6C8()
{
  return MEMORY[0x1F4186CB0]();
}

uint64_t sub_1D7A9B6D8()
{
  return MEMORY[0x1F4186CE0]();
}

uint64_t sub_1D7A9B6E8()
{
  return MEMORY[0x1F4186CF8]();
}

uint64_t sub_1D7A9B6F8()
{
  return MEMORY[0x1F4186D08]();
}

uint64_t sub_1D7A9B708()
{
  return MEMORY[0x1F4186D60]();
}

uint64_t sub_1D7A9B718()
{
  return MEMORY[0x1F4186E10]();
}

uint64_t sub_1D7A9B728()
{
  return MEMORY[0x1F4186E28]();
}

uint64_t sub_1D7A9B738()
{
  return MEMORY[0x1F4186E60]();
}

uint64_t sub_1D7A9B748()
{
  return MEMORY[0x1F4186F08]();
}

uint64_t sub_1D7A9B758()
{
  return MEMORY[0x1F40DFEA8]();
}

uint64_t sub_1D7A9B768()
{
  return MEMORY[0x1F40DFEB0]();
}

uint64_t sub_1D7A9B778()
{
  return MEMORY[0x1F40DFEB8]();
}

uint64_t sub_1D7A9B788()
{
  return MEMORY[0x1F40DFEC0]();
}

uint64_t sub_1D7A9B798()
{
  return MEMORY[0x1F40DFEC8]();
}

uint64_t sub_1D7A9B7A8()
{
  return MEMORY[0x1F40DFED0]();
}

uint64_t sub_1D7A9B7B8()
{
  return MEMORY[0x1F40DFED8]();
}

uint64_t sub_1D7A9B7C8()
{
  return MEMORY[0x1F40DFEE0]();
}

uint64_t sub_1D7A9B7D8()
{
  return MEMORY[0x1F40DFEF8]();
}

uint64_t sub_1D7A9B7E8()
{
  return MEMORY[0x1F40DFF00]();
}

uint64_t sub_1D7A9B7F8()
{
  return MEMORY[0x1F40DFF08]();
}

uint64_t sub_1D7A9B808()
{
  return MEMORY[0x1F40DFF38]();
}

uint64_t sub_1D7A9B818()
{
  return MEMORY[0x1F40DFF40]();
}

uint64_t sub_1D7A9B828()
{
  return MEMORY[0x1F40DFF58]();
}

uint64_t sub_1D7A9B838()
{
  return MEMORY[0x1F40DFF70]();
}

uint64_t sub_1D7A9B848()
{
  return MEMORY[0x1F40DFF80]();
}

uint64_t sub_1D7A9B858()
{
  return MEMORY[0x1F40DFF90]();
}

uint64_t sub_1D7A9B868()
{
  return MEMORY[0x1F40DFF98]();
}

uint64_t sub_1D7A9B878()
{
  return MEMORY[0x1F40DFFA0]();
}

uint64_t sub_1D7A9B888()
{
  return MEMORY[0x1F40DFFA8]();
}

uint64_t sub_1D7A9B898()
{
  return MEMORY[0x1F40DFFB0]();
}

uint64_t sub_1D7A9B8A8()
{
  return MEMORY[0x1F40DFFC0]();
}

uint64_t sub_1D7A9B8B8()
{
  return MEMORY[0x1F40DFFC8]();
}

uint64_t sub_1D7A9B8C8()
{
  return MEMORY[0x1F40DFFD8]();
}

uint64_t sub_1D7A9B8D8()
{
  return MEMORY[0x1F4116FD8]();
}

uint64_t sub_1D7A9B8E8()
{
  return MEMORY[0x1F40DFFE8]();
}

uint64_t sub_1D7A9B8F8()
{
  return MEMORY[0x1F40DFFF0]();
}

uint64_t sub_1D7A9B908()
{
  return MEMORY[0x1F40DFFF8]();
}

uint64_t sub_1D7A9B918()
{
  return MEMORY[0x1F40E0000]();
}

uint64_t sub_1D7A9B928()
{
  return MEMORY[0x1F40E0010]();
}

uint64_t sub_1D7A9B938()
{
  return MEMORY[0x1F40E0038]();
}

uint64_t sub_1D7A9B948()
{
  return MEMORY[0x1F40E0040]();
}

uint64_t sub_1D7A9B958()
{
  return MEMORY[0x1F40E0048]();
}

uint64_t sub_1D7A9B968()
{
  return MEMORY[0x1F40E0050]();
}

uint64_t sub_1D7A9B978()
{
  return MEMORY[0x1F40E0058]();
}

uint64_t sub_1D7A9B988()
{
  return MEMORY[0x1F40E0060]();
}

uint64_t sub_1D7A9B998()
{
  return MEMORY[0x1F40E0068]();
}

uint64_t sub_1D7A9B9A8()
{
  return MEMORY[0x1F40E0070]();
}

uint64_t sub_1D7A9B9B8()
{
  return MEMORY[0x1F40E0078]();
}

uint64_t sub_1D7A9B9C8()
{
  return MEMORY[0x1F40E0080]();
}

uint64_t sub_1D7A9B9D8()
{
  return MEMORY[0x1F40E0088]();
}

uint64_t sub_1D7A9B9E8()
{
  return MEMORY[0x1F40E00A8]();
}

uint64_t sub_1D7A9B9F8()
{
  return MEMORY[0x1F40E00F8]();
}

uint64_t sub_1D7A9BA08()
{
  return MEMORY[0x1F40E0130]();
}

uint64_t sub_1D7A9BA18()
{
  return MEMORY[0x1F40E0138]();
}

uint64_t sub_1D7A9BA28()
{
  return MEMORY[0x1F40E0140]();
}

uint64_t sub_1D7A9BA38()
{
  return MEMORY[0x1F40E0148]();
}

uint64_t sub_1D7A9BA48()
{
  return MEMORY[0x1F40E0150]();
}

uint64_t sub_1D7A9BA58()
{
  return MEMORY[0x1F40E0160]();
}

uint64_t sub_1D7A9BA68()
{
  return MEMORY[0x1F40E0168]();
}

uint64_t sub_1D7A9BA78()
{
  return MEMORY[0x1F40E0170]();
}

uint64_t sub_1D7A9BA88()
{
  return MEMORY[0x1F40E0178]();
}

uint64_t sub_1D7A9BA98()
{
  return MEMORY[0x1F40E0188]();
}

uint64_t sub_1D7A9BAA8()
{
  return MEMORY[0x1F40E0190]();
}

uint64_t sub_1D7A9BAB8()
{
  return MEMORY[0x1F40E0198]();
}

uint64_t sub_1D7A9BAC8()
{
  return MEMORY[0x1F40E01A0]();
}

uint64_t sub_1D7A9BAD8()
{
  return MEMORY[0x1F40E01A8]();
}

uint64_t sub_1D7A9BAE8()
{
  return MEMORY[0x1F40E01B8]();
}

uint64_t sub_1D7A9BAF8()
{
  return MEMORY[0x1F40E01C0]();
}

uint64_t sub_1D7A9BB08()
{
  return MEMORY[0x1F40E01C8]();
}

uint64_t sub_1D7A9BB18()
{
  return MEMORY[0x1F40E01D0]();
}

uint64_t sub_1D7A9BB28()
{
  return MEMORY[0x1F40E01D8]();
}

uint64_t sub_1D7A9BB38()
{
  return MEMORY[0x1F40E01E0]();
}

uint64_t sub_1D7A9BB48()
{
  return MEMORY[0x1F40E01F0]();
}

uint64_t sub_1D7A9BB58()
{
  return MEMORY[0x1F40E01F8]();
}

uint64_t sub_1D7A9BB68()
{
  return MEMORY[0x1F40E0248]();
}

uint64_t sub_1D7A9BB78()
{
  return MEMORY[0x1F40E0250]();
}

uint64_t sub_1D7A9BB88()
{
  return MEMORY[0x1F40E0258]();
}

uint64_t sub_1D7A9BB98()
{
  return MEMORY[0x1F40E0260]();
}

uint64_t sub_1D7A9BBA8()
{
  return MEMORY[0x1F40E0270]();
}

uint64_t sub_1D7A9BBB8()
{
  return MEMORY[0x1F40E0288]();
}

uint64_t sub_1D7A9BBC8()
{
  return MEMORY[0x1F40E02A0]();
}

uint64_t sub_1D7A9BBD8()
{
  return MEMORY[0x1F40E02A8]();
}

uint64_t sub_1D7A9BBE8()
{
  return MEMORY[0x1F40E02B0]();
}

uint64_t sub_1D7A9BBF8()
{
  return MEMORY[0x1F40E02C8]();
}

uint64_t sub_1D7A9BC08()
{
  return MEMORY[0x1F40E02D0]();
}

uint64_t sub_1D7A9BC18()
{
  return MEMORY[0x1F40E02D8]();
}

uint64_t sub_1D7A9BC28()
{
  return MEMORY[0x1F40E02E0]();
}

uint64_t sub_1D7A9BC38()
{
  return MEMORY[0x1F40E02F0]();
}

uint64_t sub_1D7A9BC48()
{
  return MEMORY[0x1F40E02F8]();
}

uint64_t sub_1D7A9BC58()
{
  return MEMORY[0x1F40E0348]();
}

uint64_t sub_1D7A9BC68()
{
  return MEMORY[0x1F40E0350]();
}

uint64_t sub_1D7A9BC78()
{
  return MEMORY[0x1F40E0360]();
}

uint64_t sub_1D7A9BC88()
{
  return MEMORY[0x1F40E0370]();
}

uint64_t sub_1D7A9BC98()
{
  return MEMORY[0x1F40E0398]();
}

uint64_t sub_1D7A9BCA8()
{
  return MEMORY[0x1F40E03A8]();
}

uint64_t sub_1D7A9BCB8()
{
  return MEMORY[0x1F40E03B0]();
}

uint64_t sub_1D7A9BCC8()
{
  return MEMORY[0x1F40E03B8]();
}

uint64_t sub_1D7A9BCD8()
{
  return MEMORY[0x1F40E03C0]();
}

uint64_t sub_1D7A9BCE8()
{
  return MEMORY[0x1F40E03C8]();
}

uint64_t sub_1D7A9BCF8()
{
  return MEMORY[0x1F40E03D0]();
}

uint64_t sub_1D7A9BD08()
{
  return MEMORY[0x1F40E03E0]();
}

uint64_t sub_1D7A9BD18()
{
  return MEMORY[0x1F40E03E8]();
}

uint64_t sub_1D7A9BD28()
{
  return MEMORY[0x1F40E0428]();
}

uint64_t sub_1D7A9BD38()
{
  return MEMORY[0x1F40E0430]();
}

uint64_t sub_1D7A9BD48()
{
  return MEMORY[0x1F40E0440]();
}

uint64_t sub_1D7A9BD58()
{
  return MEMORY[0x1F40E0450]();
}

uint64_t sub_1D7A9BD68()
{
  return MEMORY[0x1F40E0468]();
}

uint64_t sub_1D7A9BD78()
{
  return MEMORY[0x1F40E0478]();
}

uint64_t sub_1D7A9BD88()
{
  return MEMORY[0x1F40E04A8]();
}

uint64_t sub_1D7A9BD98()
{
  return MEMORY[0x1F40E04B0]();
}

uint64_t sub_1D7A9BDA8()
{
  return MEMORY[0x1F40E04D0]();
}

uint64_t sub_1D7A9BDB8()
{
  return MEMORY[0x1F40E04D8]();
}

uint64_t sub_1D7A9BDC8()
{
  return MEMORY[0x1F40E04E0]();
}

uint64_t sub_1D7A9BDD8()
{
  return MEMORY[0x1F40E04E8]();
}

uint64_t sub_1D7A9BDE8()
{
  return MEMORY[0x1F40E04F0]();
}

uint64_t sub_1D7A9BDF8()
{
  return MEMORY[0x1F40E04F8]();
}

uint64_t sub_1D7A9BE08()
{
  return MEMORY[0x1F40E0500]();
}

uint64_t sub_1D7A9BE18()
{
  return MEMORY[0x1F40E0508]();
}

uint64_t sub_1D7A9BE28()
{
  return MEMORY[0x1F40E0510]();
}

uint64_t sub_1D7A9BE38()
{
  return MEMORY[0x1F40E0518]();
}

uint64_t sub_1D7A9BE48()
{
  return MEMORY[0x1F40E0520]();
}

uint64_t sub_1D7A9BE58()
{
  return MEMORY[0x1F40E0528]();
}

uint64_t sub_1D7A9BE68()
{
  return MEMORY[0x1F40E0538]();
}

uint64_t sub_1D7A9BE78()
{
  return MEMORY[0x1F40E0548]();
}

uint64_t sub_1D7A9BE88()
{
  return MEMORY[0x1F4183280]();
}

uint64_t sub_1D7A9BE98()
{
  return MEMORY[0x1F40E6000]();
}

uint64_t sub_1D7A9BEA8()
{
  return MEMORY[0x1F40E6018]();
}

uint64_t sub_1D7A9BEB8()
{
  return MEMORY[0x1F40E6030]();
}

uint64_t sub_1D7A9BEC8()
{
  return MEMORY[0x1F4183318]();
}

uint64_t sub_1D7A9BED8()
{
  return MEMORY[0x1F41833C0]();
}

uint64_t sub_1D7A9BEE8()
{
  return MEMORY[0x1F41834F8]();
}

uint64_t sub_1D7A9BEF8()
{
  return MEMORY[0x1F41835C0]();
}

uint64_t sub_1D7A9BF08()
{
  return MEMORY[0x1F41835C8]();
}

uint64_t sub_1D7A9BF18()
{
  return MEMORY[0x1F41883F0]();
}

uint64_t sub_1D7A9BF28()
{
  return MEMORY[0x1F4188428]();
}

uint64_t sub_1D7A9BF38()
{
  return MEMORY[0x1F4183730]();
}

uint64_t sub_1D7A9BF48()
{
  return MEMORY[0x1F4183738]();
}

uint64_t sub_1D7A9BF58()
{
  return MEMORY[0x1F4183740]();
}

uint64_t sub_1D7A9BF68()
{
  return MEMORY[0x1F4183748]();
}

uint64_t sub_1D7A9BF78()
{
  return MEMORY[0x1F4183750]();
}

uint64_t sub_1D7A9BF88()
{
  return MEMORY[0x1F4183838]();
}

uint64_t sub_1D7A9BF98()
{
  return MEMORY[0x1F40E6190]();
}

uint64_t sub_1D7A9BFA8()
{
  return MEMORY[0x1F40E61B8]();
}

uint64_t sub_1D7A9BFB8()
{
  return MEMORY[0x1F40E61C8]();
}

uint64_t sub_1D7A9BFC8()
{
  return MEMORY[0x1F40E61D8]();
}

uint64_t sub_1D7A9BFD8()
{
  return MEMORY[0x1F40E61E8]();
}

uint64_t sub_1D7A9BFE8()
{
  return MEMORY[0x1F40E61F8]();
}

uint64_t sub_1D7A9BFF8()
{
  return MEMORY[0x1F40E6238]();
}

uint64_t sub_1D7A9C008()
{
  return MEMORY[0x1F40E6268]();
}

uint64_t sub_1D7A9C018()
{
  return MEMORY[0x1F40E6278]();
}

uint64_t sub_1D7A9C028()
{
  return MEMORY[0x1F40E62A0]();
}

uint64_t sub_1D7A9C038()
{
  return MEMORY[0x1F4183880]();
}

uint64_t sub_1D7A9C048()
{
  return MEMORY[0x1F4183898]();
}

uint64_t sub_1D7A9C058()
{
  return MEMORY[0x1F41838A0]();
}

uint64_t sub_1D7A9C068()
{
  return MEMORY[0x1F41838B0]();
}

uint64_t sub_1D7A9C078()
{
  return MEMORY[0x1F41838B8]();
}

uint64_t sub_1D7A9C088()
{
  return MEMORY[0x1F41838D8]();
}

uint64_t sub_1D7A9C098()
{
  return MEMORY[0x1F4183950]();
}

uint64_t sub_1D7A9C0A8()
{
  return MEMORY[0x1F4183958]();
}

uint64_t sub_1D7A9C0B8()
{
  return MEMORY[0x1F41839B0]();
}

uint64_t sub_1D7A9C0C8()
{
  return MEMORY[0x1F41839C0]();
}

uint64_t sub_1D7A9C0D8()
{
  return MEMORY[0x1F41839F0]();
}

uint64_t sub_1D7A9C0E8()
{
  return MEMORY[0x1F41839F8]();
}

uint64_t sub_1D7A9C0F8()
{
  return MEMORY[0x1F4183A10]();
}

uint64_t sub_1D7A9C108()
{
  return MEMORY[0x1F4183A28]();
}

uint64_t sub_1D7A9C118()
{
  return MEMORY[0x1F4183A30]();
}

uint64_t sub_1D7A9C128()
{
  return MEMORY[0x1F4183A38]();
}

uint64_t sub_1D7A9C138()
{
  return MEMORY[0x1F4183A78]();
}

uint64_t sub_1D7A9C148()
{
  return MEMORY[0x1F4183A80]();
}

uint64_t sub_1D7A9C158()
{
  return MEMORY[0x1F4183A88]();
}

uint64_t sub_1D7A9C168()
{
  return MEMORY[0x1F4183AA0]();
}

uint64_t sub_1D7A9C178()
{
  return MEMORY[0x1F4183AA8]();
}

uint64_t sub_1D7A9C188()
{
  return MEMORY[0x1F4183AB0]();
}

uint64_t sub_1D7A9C198()
{
  return MEMORY[0x1F4183AC8]();
}

uint64_t sub_1D7A9C1A8()
{
  return MEMORY[0x1F4183B10]();
}

uint64_t sub_1D7A9C1B8()
{
  return MEMORY[0x1F4183B30]();
}

uint64_t sub_1D7A9C1C8()
{
  return MEMORY[0x1F4183B48]();
}

uint64_t sub_1D7A9C1D8()
{
  return MEMORY[0x1F4183B90]();
}

uint64_t sub_1D7A9C1E8()
{
  return MEMORY[0x1F4183BA0]();
}

uint64_t sub_1D7A9C1F8()
{
  return MEMORY[0x1F4183BA8]();
}

uint64_t sub_1D7A9C208()
{
  return MEMORY[0x1F4183BB8]();
}

uint64_t sub_1D7A9C218()
{
  return MEMORY[0x1F4183BE8]();
}

uint64_t sub_1D7A9C228()
{
  return MEMORY[0x1F4183BF8]();
}

uint64_t sub_1D7A9C238()
{
  return MEMORY[0x1F4183C18]();
}

uint64_t sub_1D7A9C248()
{
  return MEMORY[0x1F4183C20]();
}

uint64_t sub_1D7A9C258()
{
  return MEMORY[0x1F4183D80]();
}

uint64_t sub_1D7A9C268()
{
  return MEMORY[0x1F4183D98]();
}

uint64_t sub_1D7A9C278()
{
  return MEMORY[0x1F4183DA0]();
}

uint64_t sub_1D7A9C2B8()
{
  return MEMORY[0x1F4183DF8]();
}

uint64_t sub_1D7A9C2C8()
{
  return MEMORY[0x1F4183E10]();
}

uint64_t sub_1D7A9C2D8()
{
  return MEMORY[0x1F4183E18]();
}

uint64_t sub_1D7A9C2E8()
{
  return MEMORY[0x1F4183E80]();
}

uint64_t sub_1D7A9C2F8()
{
  return MEMORY[0x1F40E6338]();
}

uint64_t sub_1D7A9C308()
{
  return MEMORY[0x1F40E6360]();
}

uint64_t sub_1D7A9C318()
{
  return MEMORY[0x1F40E6370]();
}

uint64_t sub_1D7A9C328()
{
  return MEMORY[0x1F4183E90]();
}

uint64_t sub_1D7A9C338()
{
  return MEMORY[0x1F4183E98]();
}

uint64_t sub_1D7A9C348()
{
  return MEMORY[0x1F4183EA0]();
}

uint64_t sub_1D7A9C358()
{
  return MEMORY[0x1F4183EA8]();
}

uint64_t sub_1D7A9C368()
{
  return MEMORY[0x1F4183EC8]();
}

uint64_t sub_1D7A9C378()
{
  return MEMORY[0x1F4183ED0]();
}

uint64_t sub_1D7A9C388()
{
  return MEMORY[0x1F4183F08]();
}

uint64_t sub_1D7A9C398()
{
  return MEMORY[0x1F4183F18]();
}

uint64_t sub_1D7A9C3A8()
{
  return MEMORY[0x1F4183F38]();
}

uint64_t sub_1D7A9C3B8()
{
  return MEMORY[0x1F4183F40]();
}

uint64_t sub_1D7A9C3C8()
{
  return MEMORY[0x1F4183F60]();
}

uint64_t sub_1D7A9C3D8()
{
  return MEMORY[0x1F4183F78]();
}

uint64_t sub_1D7A9C3E8()
{
  return MEMORY[0x1F4183FA8]();
}

uint64_t sub_1D7A9C3F8()
{
  return MEMORY[0x1F4183FD8]();
}

uint64_t sub_1D7A9C408()
{
  return MEMORY[0x1F4183FE0]();
}

uint64_t sub_1D7A9C418()
{
  return MEMORY[0x1F40E6388]();
}

uint64_t sub_1D7A9C428()
{
  return MEMORY[0x1F40E63A8]();
}

uint64_t sub_1D7A9C438()
{
  return MEMORY[0x1F4187BF0]();
}

uint64_t sub_1D7A9C448()
{
  return MEMORY[0x1F4187C00]();
}

uint64_t sub_1D7A9C458()
{
  return MEMORY[0x1F4187C08]();
}

uint64_t sub_1D7A9C468()
{
  return MEMORY[0x1F4187C10]();
}

uint64_t sub_1D7A9C488()
{
  return MEMORY[0x1F4187C68]();
}

uint64_t sub_1D7A9C498()
{
  return MEMORY[0x1F4187CF8]();
}

uint64_t sub_1D7A9C4A8()
{
  return MEMORY[0x1F4187D00]();
}

uint64_t sub_1D7A9C4B8()
{
  return MEMORY[0x1F4187D38]();
}

uint64_t sub_1D7A9C4C8()
{
  return MEMORY[0x1F4187D40]();
}

uint64_t sub_1D7A9C4D8()
{
  return MEMORY[0x1F4187D48]();
}

uint64_t sub_1D7A9C4E8()
{
  return MEMORY[0x1F4187D50]();
}

uint64_t sub_1D7A9C508()
{
  return MEMORY[0x1F4187D78]();
}

uint64_t sub_1D7A9C528()
{
  return MEMORY[0x1F4187DC8]();
}

uint64_t sub_1D7A9C538()
{
  return MEMORY[0x1F4187DD8]();
}

uint64_t sub_1D7A9C558()
{
  return MEMORY[0x1F4187E58]();
}

uint64_t sub_1D7A9C568()
{
  return MEMORY[0x1F4187E60]();
}

uint64_t sub_1D7A9C578()
{
  return MEMORY[0x1F4187F10]();
}

uint64_t sub_1D7A9C588()
{
  return MEMORY[0x1F40E63C8]();
}

uint64_t sub_1D7A9C598()
{
  return MEMORY[0x1F40E63D8]();
}

uint64_t sub_1D7A9C5A8()
{
  return MEMORY[0x1F4184020]();
}

uint64_t sub_1D7A9C5B8()
{
  return MEMORY[0x1F40E63F0]();
}

uint64_t sub_1D7A9C5C8()
{
  return MEMORY[0x1F40E6410]();
}

uint64_t sub_1D7A9C5D8()
{
  return MEMORY[0x1F4184098]();
}

uint64_t sub_1D7A9C5E8()
{
  return MEMORY[0x1F41840A0]();
}

uint64_t sub_1D7A9C5F8()
{
  return MEMORY[0x1F41840A8]();
}

uint64_t sub_1D7A9C608()
{
  return MEMORY[0x1F41840C0]();
}

uint64_t sub_1D7A9C618()
{
  return MEMORY[0x1F40E6430]();
}

uint64_t sub_1D7A9C628()
{
  return MEMORY[0x1F40E6448]();
}

uint64_t sub_1D7A9C638()
{
  return MEMORY[0x1F4184138]();
}

uint64_t sub_1D7A9C648()
{
  return MEMORY[0x1F40E6478]();
}

uint64_t sub_1D7A9C658()
{
  return MEMORY[0x1F40E64A0]();
}

uint64_t sub_1D7A9C668()
{
  return MEMORY[0x1F41842A0]();
}

uint64_t sub_1D7A9C6A8()
{
  return MEMORY[0x1F4184320]();
}

uint64_t sub_1D7A9C6C8()
{
  return MEMORY[0x1F41843D0]();
}

uint64_t sub_1D7A9C6D8()
{
  return MEMORY[0x1F4184430]();
}

uint64_t sub_1D7A9C6E8()
{
  return MEMORY[0x1F4188480]();
}

uint64_t sub_1D7A9C6F8()
{
  return MEMORY[0x1F41845B0]();
}

uint64_t sub_1D7A9C708()
{
  return MEMORY[0x1F40E6528]();
}

uint64_t sub_1D7A9C718()
{
  return MEMORY[0x1F40E6548]();
}

uint64_t sub_1D7A9C728()
{
  return MEMORY[0x1F40E6590]();
}

uint64_t sub_1D7A9C738()
{
  return MEMORY[0x1F41886C0]();
}

uint64_t sub_1D7A9C748()
{
  return MEMORY[0x1F41886D0]();
}

uint64_t sub_1D7A9C758()
{
  return MEMORY[0x1F41886E0]();
}

uint64_t sub_1D7A9C768()
{
  return MEMORY[0x1F41886E8]();
}

uint64_t sub_1D7A9C778()
{
  return MEMORY[0x1F4188700]();
}

uint64_t sub_1D7A9C788()
{
  return MEMORY[0x1F4186FA0]();
}

uint64_t sub_1D7A9C798()
{
  return MEMORY[0x1F4186FB0]();
}

uint64_t sub_1D7A9C7A8()
{
  return MEMORY[0x1F4186FC0]();
}

uint64_t sub_1D7A9C7B8()
{
  return MEMORY[0x1F4186FD8]();
}

uint64_t sub_1D7A9C7C8()
{
  return MEMORY[0x1F41870A0]();
}

uint64_t sub_1D7A9C7D8()
{
  return MEMORY[0x1F41870B8]();
}

uint64_t sub_1D7A9C7E8()
{
  return MEMORY[0x1F41870D8]();
}

uint64_t sub_1D7A9C7F8()
{
  return MEMORY[0x1F41870E0]();
}

uint64_t sub_1D7A9C808()
{
  return MEMORY[0x1F4187100]();
}

uint64_t sub_1D7A9C818()
{
  return MEMORY[0x1F4187110]();
}

uint64_t sub_1D7A9C828()
{
  return MEMORY[0x1F4103620]();
}

uint64_t sub_1D7A9C838()
{
  return MEMORY[0x1F4187130]();
}

uint64_t sub_1D7A9C848()
{
  return MEMORY[0x1F4187168]();
}

uint64_t sub_1D7A9C858()
{
  return MEMORY[0x1F41871D0]();
}

uint64_t sub_1D7A9C868()
{
  return MEMORY[0x1F4187218]();
}

uint64_t sub_1D7A9C878()
{
  return MEMORY[0x1F4187230]();
}

uint64_t sub_1D7A9C888()
{
  return MEMORY[0x1F4188708]();
}

uint64_t sub_1D7A9C898()
{
  return MEMORY[0x1F4188710]();
}

uint64_t sub_1D7A9C8A8()
{
  return MEMORY[0x1F4187268]();
}

uint64_t sub_1D7A9C8B8()
{
  return MEMORY[0x1F4187278]();
}

uint64_t sub_1D7A9C8C8()
{
  return MEMORY[0x1F4187288]();
}

uint64_t sub_1D7A9C8D8()
{
  return MEMORY[0x1F41872D0]();
}

uint64_t sub_1D7A9C8E8()
{
  return MEMORY[0x1F410D238]();
}

uint64_t sub_1D7A9C8F8()
{
  return MEMORY[0x1F40E6840]();
}

uint64_t sub_1D7A9C908()
{
  return MEMORY[0x1F40E6858]();
}

uint64_t sub_1D7A9C918()
{
  return MEMORY[0x1F40E6860]();
}

uint64_t sub_1D7A9C928()
{
  return MEMORY[0x1F40E6880]();
}

uint64_t sub_1D7A9C938()
{
  return MEMORY[0x1F40E68F8]();
}

uint64_t sub_1D7A9C948()
{
  return MEMORY[0x1F41874A8]();
}

uint64_t sub_1D7A9C958()
{
  return MEMORY[0x1F41874C0]();
}

uint64_t sub_1D7A9C968()
{
  return MEMORY[0x1F41874E0]();
}

uint64_t sub_1D7A9C978()
{
  return MEMORY[0x1F40E6928]();
}

uint64_t sub_1D7A9C988()
{
  return MEMORY[0x1F4188720]();
}

uint64_t sub_1D7A9C998()
{
  return MEMORY[0x1F4184628]();
}

uint64_t sub_1D7A9C9A8()
{
  return MEMORY[0x1F4184640]();
}

uint64_t sub_1D7A9C9B8()
{
  return MEMORY[0x1F4184788]();
}

uint64_t sub_1D7A9C9C8()
{
  return MEMORY[0x1F41847A0]();
}

uint64_t sub_1D7A9C9D8()
{
  return MEMORY[0x1F40E6B80]();
}

uint64_t sub_1D7A9C9E8()
{
  return MEMORY[0x1F41847C0]();
}

uint64_t sub_1D7A9C9F8()
{
  return MEMORY[0x1F4184820]();
}

uint64_t sub_1D7A9CA18()
{
  return MEMORY[0x1F4184848]();
}

uint64_t sub_1D7A9CA28()
{
  return MEMORY[0x1F40E6BB0]();
}

uint64_t sub_1D7A9CA38()
{
  return MEMORY[0x1F40E6BF0]();
}

uint64_t sub_1D7A9CA48()
{
  return MEMORY[0x1F40E6C68]();
}

uint64_t sub_1D7A9CA58()
{
  return MEMORY[0x1F40E6C80]();
}

uint64_t sub_1D7A9CA68()
{
  return MEMORY[0x1F40E6D38]();
}

uint64_t sub_1D7A9CA78()
{
  return MEMORY[0x1F40E6D98]();
}

uint64_t sub_1D7A9CA88()
{
  return MEMORY[0x1F41848C0]();
}

uint64_t sub_1D7A9CA98()
{
  return MEMORY[0x1F41848C8]();
}

uint64_t sub_1D7A9CAA8()
{
  return MEMORY[0x1F4184908]();
}

uint64_t sub_1D7A9CAB8()
{
  return MEMORY[0x1F4184938]();
}

uint64_t sub_1D7A9CAC8()
{
  return MEMORY[0x1F4184940]();
}

uint64_t sub_1D7A9CAD8()
{
  return MEMORY[0x1F4184950]();
}

uint64_t sub_1D7A9CAE8()
{
  return MEMORY[0x1F4184958]();
}

uint64_t sub_1D7A9CAF8()
{
  return MEMORY[0x1F4184970]();
}

uint64_t sub_1D7A9CB08()
{
  return MEMORY[0x1F4184978]();
}

uint64_t sub_1D7A9CB18()
{
  return MEMORY[0x1F41849C0]();
}

uint64_t sub_1D7A9CB28()
{
  return MEMORY[0x1F4184A40]();
}

uint64_t sub_1D7A9CB38()
{
  return MEMORY[0x1F4184AD8]();
}

uint64_t sub_1D7A9CB48()
{
  return MEMORY[0x1F4184AE0]();
}

uint64_t sub_1D7A9CB58()
{
  return MEMORY[0x1F4184AE8]();
}

uint64_t sub_1D7A9CB68()
{
  return MEMORY[0x1F4184AF0]();
}

uint64_t sub_1D7A9CB78()
{
  return MEMORY[0x1F4184AF8]();
}

uint64_t sub_1D7A9CB88()
{
  return MEMORY[0x1F4184B00]();
}

uint64_t sub_1D7A9CBA8()
{
  return MEMORY[0x1F4184B18]();
}

uint64_t sub_1D7A9CBB8()
{
  return MEMORY[0x1F4184B20]();
}

uint64_t sub_1D7A9CBC8()
{
  return MEMORY[0x1F4184B28]();
}

uint64_t sub_1D7A9CBD8()
{
  return MEMORY[0x1F4184C18]();
}

uint64_t sub_1D7A9CBE8()
{
  return MEMORY[0x1F4184C20]();
}

uint64_t sub_1D7A9CBF8()
{
  return MEMORY[0x1F4184C38]();
}

uint64_t sub_1D7A9CC08()
{
  return MEMORY[0x1F4184C90]();
}

uint64_t sub_1D7A9CC18()
{
  return MEMORY[0x1F4184C98]();
}

uint64_t sub_1D7A9CC28()
{
  return MEMORY[0x1F4184CA8]();
}

uint64_t sub_1D7A9CC38()
{
  return MEMORY[0x1F4184CC0]();
}

uint64_t sub_1D7A9CC48()
{
  return MEMORY[0x1F4184CE8]();
}

uint64_t sub_1D7A9CC58()
{
  return MEMORY[0x1F4184CF0]();
}

uint64_t sub_1D7A9CC68()
{
  return MEMORY[0x1F4184D10]();
}

uint64_t sub_1D7A9CC78()
{
  return MEMORY[0x1F4184D20]();
}

uint64_t sub_1D7A9CC88()
{
  return MEMORY[0x1F4184D78]();
}

uint64_t sub_1D7A9CC98()
{
  return MEMORY[0x1F4184D80]();
}

uint64_t sub_1D7A9CCA8()
{
  return MEMORY[0x1F4184D88]();
}

uint64_t sub_1D7A9CCB8()
{
  return MEMORY[0x1F4184DD0]();
}

uint64_t sub_1D7A9CCC8()
{
  return MEMORY[0x1F4184DD8]();
}

uint64_t sub_1D7A9CCD8()
{
  return MEMORY[0x1F4184DE0]();
}

uint64_t sub_1D7A9CCE8()
{
  return MEMORY[0x1F4184DE8]();
}

uint64_t sub_1D7A9CCF8()
{
  return MEMORY[0x1F4184DF0]();
}

uint64_t sub_1D7A9CD08()
{
  return MEMORY[0x1F4184DF8]();
}

uint64_t sub_1D7A9CD18()
{
  return MEMORY[0x1F4184E00]();
}

uint64_t sub_1D7A9CD28()
{
  return MEMORY[0x1F4184E08]();
}

uint64_t sub_1D7A9CD38()
{
  return MEMORY[0x1F4184E10]();
}

uint64_t sub_1D7A9CD48()
{
  return MEMORY[0x1F4184E18]();
}

uint64_t sub_1D7A9CD58()
{
  return MEMORY[0x1F4184E28]();
}

uint64_t sub_1D7A9CD68()
{
  return MEMORY[0x1F4184E38]();
}

uint64_t sub_1D7A9CD78()
{
  return MEMORY[0x1F4184E68]();
}

uint64_t sub_1D7A9CD98()
{
  return MEMORY[0x1F4184EC8]();
}

uint64_t sub_1D7A9CDA8()
{
  return MEMORY[0x1F4184ED8]();
}

uint64_t sub_1D7A9CDB8()
{
  return MEMORY[0x1F4184EE8]();
}

uint64_t sub_1D7A9CDC8()
{
  return MEMORY[0x1F4184EF0]();
}

uint64_t sub_1D7A9CDD8()
{
  return MEMORY[0x1F4184F28]();
}

uint64_t sub_1D7A9CDE8()
{
  return MEMORY[0x1F4184F30]();
}

uint64_t sub_1D7A9CDF8()
{
  return MEMORY[0x1F4184F48]();
}

uint64_t sub_1D7A9CE08()
{
  return MEMORY[0x1F4184F68]();
}

uint64_t sub_1D7A9CE18()
{
  return MEMORY[0x1F4184F70]();
}

uint64_t sub_1D7A9CE28()
{
  return MEMORY[0x1F4187F70]();
}

uint64_t sub_1D7A9CE38()
{
  return MEMORY[0x1F4187F78]();
}

uint64_t sub_1D7A9CE48()
{
  return MEMORY[0x1F4187F80]();
}

uint64_t sub_1D7A9CE58()
{
  return MEMORY[0x1F4184F98]();
}

uint64_t sub_1D7A9CE68()
{
  return MEMORY[0x1F4184FC0]();
}

uint64_t sub_1D7A9CE78()
{
  return MEMORY[0x1F4185050]();
}

uint64_t sub_1D7A9CE88()
{
  return MEMORY[0x1F4185068]();
}

uint64_t sub_1D7A9CE98()
{
  return MEMORY[0x1F41850B0]();
}

uint64_t sub_1D7A9CEA8()
{
  return MEMORY[0x1F41850C0]();
}

uint64_t sub_1D7A9CEB8()
{
  return MEMORY[0x1F41850F8]();
}

uint64_t sub_1D7A9CEC8()
{
  return MEMORY[0x1F41851F0]();
}

uint64_t sub_1D7A9CED8()
{
  return MEMORY[0x1F41851F8]();
}

uint64_t sub_1D7A9CEE8()
{
  return MEMORY[0x1F4185208]();
}

uint64_t sub_1D7A9CEF8()
{
  return MEMORY[0x1F4185210]();
}

uint64_t sub_1D7A9CF08()
{
  return MEMORY[0x1F4185228]();
}

uint64_t sub_1D7A9CF18()
{
  return MEMORY[0x1F4185230]();
}

uint64_t sub_1D7A9CF28()
{
  return MEMORY[0x1F4185238]();
}

uint64_t sub_1D7A9CF38()
{
  return MEMORY[0x1F4185240]();
}

uint64_t sub_1D7A9CF48()
{
  return MEMORY[0x1F4185258]();
}

uint64_t sub_1D7A9CF58()
{
  return MEMORY[0x1F4185260]();
}

uint64_t sub_1D7A9CF68()
{
  return MEMORY[0x1F4185270]();
}

uint64_t sub_1D7A9CF78()
{
  return MEMORY[0x1F4185290]();
}

uint64_t sub_1D7A9CF88()
{
  return MEMORY[0x1F4185298]();
}

uint64_t sub_1D7A9CF98()
{
  return MEMORY[0x1F41852A0]();
}

uint64_t sub_1D7A9CFA8()
{
  return MEMORY[0x1F4185320]();
}

uint64_t sub_1D7A9CFB8()
{
  return MEMORY[0x1F4185350]();
}

uint64_t sub_1D7A9CFC8()
{
  return MEMORY[0x1F4185368]();
}

uint64_t sub_1D7A9CFD8()
{
  return MEMORY[0x1F4185370]();
}

uint64_t sub_1D7A9CFE8()
{
  return MEMORY[0x1F4185378]();
}

uint64_t sub_1D7A9CFF8()
{
  return MEMORY[0x1F4185380]();
}

uint64_t sub_1D7A9D008()
{
  return MEMORY[0x1F4185398]();
}

uint64_t sub_1D7A9D018()
{
  return MEMORY[0x1F41853B0]();
}

uint64_t sub_1D7A9D028()
{
  return MEMORY[0x1F41853B8]();
}

uint64_t sub_1D7A9D038()
{
  return MEMORY[0x1F4185408]();
}

uint64_t sub_1D7A9D058()
{
  return MEMORY[0x1F41854C8]();
}

uint64_t sub_1D7A9D078()
{
  return MEMORY[0x1F4188088]();
}

uint64_t sub_1D7A9D088()
{
  return MEMORY[0x1F41854D8]();
}

uint64_t sub_1D7A9D098()
{
  return MEMORY[0x1F41854E0]();
}

uint64_t sub_1D7A9D0A8()
{
  return MEMORY[0x1F41854F8]();
}

uint64_t sub_1D7A9D0B8()
{
  return MEMORY[0x1F4185500]();
}

uint64_t sub_1D7A9D0C8()
{
  return MEMORY[0x1F4185510]();
}

uint64_t sub_1D7A9D0D8()
{
  return MEMORY[0x1F4185518]();
}

uint64_t sub_1D7A9D0E8()
{
  return MEMORY[0x1F4185528]();
}

uint64_t sub_1D7A9D0F8()
{
  return MEMORY[0x1F4185568]();
}

uint64_t sub_1D7A9D108()
{
  return MEMORY[0x1F4185570]();
}

uint64_t sub_1D7A9D118()
{
  return MEMORY[0x1F4185580]();
}

uint64_t sub_1D7A9D128()
{
  return MEMORY[0x1F4185588]();
}

uint64_t sub_1D7A9D138()
{
  return MEMORY[0x1F4185590]();
}

uint64_t sub_1D7A9D148()
{
  return MEMORY[0x1F4185598]();
}

uint64_t sub_1D7A9D158()
{
  return MEMORY[0x1F41855E0]();
}

uint64_t sub_1D7A9D168()
{
  return MEMORY[0x1F41855F0]();
}

uint64_t sub_1D7A9D178()
{
  return MEMORY[0x1F4185608]();
}

uint64_t sub_1D7A9D188()
{
  return MEMORY[0x1F4185628]();
}

uint64_t sub_1D7A9D198()
{
  return MEMORY[0x1F4185630]();
}

uint64_t sub_1D7A9D1A8()
{
  return MEMORY[0x1F4185640]();
}

uint64_t sub_1D7A9D1B8()
{
  return MEMORY[0x1F4185648]();
}

uint64_t sub_1D7A9D1C8()
{
  return MEMORY[0x1F4185658]();
}

uint64_t sub_1D7A9D1D8()
{
  return MEMORY[0x1F4185690]();
}

uint64_t sub_1D7A9D1E8()
{
  return MEMORY[0x1F4185698]();
}

uint64_t sub_1D7A9D1F8()
{
  return MEMORY[0x1F41856A8]();
}

uint64_t sub_1D7A9D208()
{
  return MEMORY[0x1F41856B0]();
}

uint64_t sub_1D7A9D218()
{
  return MEMORY[0x1F41856B8]();
}

uint64_t sub_1D7A9D228()
{
  return MEMORY[0x1F41856C0]();
}

uint64_t sub_1D7A9D238()
{
  return MEMORY[0x1F4185710]();
}

uint64_t sub_1D7A9D248()
{
  return MEMORY[0x1F4185740]();
}

uint64_t sub_1D7A9D258()
{
  return MEMORY[0x1F4185758]();
}

uint64_t sub_1D7A9D268()
{
  return MEMORY[0x1F4185768]();
}

uint64_t sub_1D7A9D288()
{
  return MEMORY[0x1F41857B0]();
}

uint64_t sub_1D7A9D298()
{
  return MEMORY[0x1F41857B8]();
}

uint64_t sub_1D7A9D2A8()
{
  return MEMORY[0x1F41857C0]();
}

uint64_t sub_1D7A9D2B8()
{
  return MEMORY[0x1F41857F0]();
}

uint64_t sub_1D7A9D2C8()
{
  return MEMORY[0x1F4185818]();
}

uint64_t sub_1D7A9D2D8()
{
  return MEMORY[0x1F4185820]();
}

uint64_t sub_1D7A9D2E8()
{
  return MEMORY[0x1F41858B0]();
}

uint64_t sub_1D7A9D2F8()
{
  return MEMORY[0x1F41858D8]();
}

uint64_t sub_1D7A9D308()
{
  return MEMORY[0x1F4185900]();
}

uint64_t sub_1D7A9D318()
{
  return MEMORY[0x1F41859A8]();
}

uint64_t sub_1D7A9D328()
{
  return MEMORY[0x1F41859C8]();
}

uint64_t sub_1D7A9D338()
{
  return MEMORY[0x1F4185A20]();
}

uint64_t sub_1D7A9D348()
{
  return MEMORY[0x1F4185A30]();
}

uint64_t sub_1D7A9D358()
{
  return MEMORY[0x1F4185A40]();
}

uint64_t sub_1D7A9D378()
{
  return MEMORY[0x1F4185A58]();
}

uint64_t sub_1D7A9D388()
{
  return MEMORY[0x1F4185A60]();
}

uint64_t sub_1D7A9D398()
{
  return MEMORY[0x1F4185A68]();
}

uint64_t sub_1D7A9D3A8()
{
  return MEMORY[0x1F4185A70]();
}

uint64_t sub_1D7A9D3B8()
{
  return MEMORY[0x1F4185A78]();
}

uint64_t sub_1D7A9D3C8()
{
  return MEMORY[0x1F4185A80]();
}

uint64_t sub_1D7A9D3D8()
{
  return MEMORY[0x1F4185A88]();
}

uint64_t sub_1D7A9D3E8()
{
  return MEMORY[0x1F4185AC0]();
}

uint64_t sub_1D7A9D3F8()
{
  return MEMORY[0x1F4185AF0]();
}

uint64_t sub_1D7A9D408()
{
  return MEMORY[0x1F4185AF8]();
}

uint64_t sub_1D7A9D418()
{
  return MEMORY[0x1F4185B00]();
}

uint64_t sub_1D7A9D428()
{
  return MEMORY[0x1F4185B08]();
}

uint64_t sub_1D7A9D438()
{
  return MEMORY[0x1F4185B10]();
}

uint64_t sub_1D7A9D448()
{
  return MEMORY[0x1F4185B18]();
}

uint64_t sub_1D7A9D458()
{
  return MEMORY[0x1F4185B20]();
}

uint64_t sub_1D7A9D478()
{
  return MEMORY[0x1F4185D10]();
}

uint64_t sub_1D7A9D498()
{
  return MEMORY[0x1F4185D38]();
}

uint64_t sub_1D7A9D4A8()
{
  return MEMORY[0x1F4185D40]();
}

uint64_t sub_1D7A9D4B8()
{
  return MEMORY[0x1F4185D58]();
}

uint64_t sub_1D7A9D4C8()
{
  return MEMORY[0x1F4185D68]();
}

uint64_t sub_1D7A9D4D8()
{
  return MEMORY[0x1F4185D80]();
}

uint64_t sub_1D7A9D4E8()
{
  return MEMORY[0x1F4185DD8]();
}

uint64_t sub_1D7A9D4F8()
{
  return MEMORY[0x1F4185DE0]();
}

uint64_t sub_1D7A9D508()
{
  return MEMORY[0x1F4188170]();
}

uint64_t sub_1D7A9D548()
{
  return MEMORY[0x1F40E6E30]();
}

uint64_t sub_1D7A9D558()
{
  return MEMORY[0x1F4185DE8]();
}

uint64_t sub_1D7A9D568()
{
  return MEMORY[0x1F4185DF0]();
}

uint64_t sub_1D7A9D578()
{
  return MEMORY[0x1F4185DF8]();
}

uint64_t sub_1D7A9D588()
{
  return MEMORY[0x1F4185E00]();
}

uint64_t sub_1D7A9D598()
{
  return MEMORY[0x1F4185E08]();
}

uint64_t sub_1D7A9D5A8()
{
  return MEMORY[0x1F4185E10]();
}

uint64_t sub_1D7A9D5B8()
{
  return MEMORY[0x1F4185E18]();
}

uint64_t sub_1D7A9D5C8()
{
  return MEMORY[0x1F4185EA8]();
}

uint64_t sub_1D7A9D5D8()
{
  return MEMORY[0x1F4185EB0]();
}

uint64_t sub_1D7A9D5E8()
{
  return MEMORY[0x1F4185EC8]();
}

uint64_t sub_1D7A9D5F8()
{
  return MEMORY[0x1F4185ED0]();
}

uint64_t sub_1D7A9D608()
{
  return MEMORY[0x1F4185EE0]();
}

uint64_t sub_1D7A9D618()
{
  return MEMORY[0x1F4185EE8]();
}

uint64_t sub_1D7A9D628()
{
  return MEMORY[0x1F4185EF8]();
}

uint64_t sub_1D7A9D638()
{
  return MEMORY[0x1F4185F68]();
}

uint64_t sub_1D7A9D648()
{
  return MEMORY[0x1F40E6ED8]();
}

uint64_t sub_1D7A9D658()
{
  return MEMORY[0x1F40E6EE8]();
}

uint64_t sub_1D7A9D668()
{
  return MEMORY[0x1F4185FA8]();
}

uint64_t sub_1D7A9D678()
{
  return MEMORY[0x1F4185FB0]();
}

uint64_t sub_1D7A9D688()
{
  return MEMORY[0x1F4185FB8]();
}

uint64_t sub_1D7A9D698()
{
  return MEMORY[0x1F4185FC0]();
}

uint64_t sub_1D7A9D6A8()
{
  return MEMORY[0x1F4185FC8]();
}

uint64_t sub_1D7A9D6B8()
{
  return MEMORY[0x1F4185FD0]();
}

uint64_t sub_1D7A9D6C8()
{
  return MEMORY[0x1F4185FD8]();
}

uint64_t sub_1D7A9D6D8()
{
  return MEMORY[0x1F4185FE0]();
}

uint64_t sub_1D7A9D6E8()
{
  return MEMORY[0x1F4185FF0]();
}

uint64_t sub_1D7A9D6F8()
{
  return MEMORY[0x1F41861A8]();
}

uint64_t sub_1D7A9D728()
{
  return MEMORY[0x1F41862E0]();
}

uint64_t sub_1D7A9D758()
{
  return MEMORY[0x1F4186318]();
}

uint64_t AnalyticsSendEventLazy()
{
  return MEMORY[0x1F41138B8]();
}

uint64_t AnalyticsSendExplodingEventLazy()
{
  return MEMORY[0x1F41138C0]();
}

CCCryptorStatus CCCryptorCreateWithMode(CCOperation op, CCMode mode, CCAlgorithm alg, CCPadding padding, const void *iv, const void *key, size_t keyLength, const void *tweak, size_t tweakLength, int numRounds, CCModeOptions options, CCCryptorRef *cryptorRef)
{
  return MEMORY[0x1F40C94C0](*(void *)&op, *(void *)&mode, *(void *)&alg, *(void *)&padding, iv, key, keyLength, tweak);
}

uint64_t CCCryptorGCMFinalize()
{
  return MEMORY[0x1F40C94F0]();
}

uint64_t CCCryptorGCMOneshotDecrypt()
{
  return MEMORY[0x1F40C94F8]();
}

uint64_t CCCryptorGCMOneshotEncrypt()
{
  return MEMORY[0x1F40C9500]();
}

CCCryptorStatus CCCryptorRelease(CCCryptorRef cryptorRef)
{
  return MEMORY[0x1F40C9528](cryptorRef);
}

CCCryptorStatus CCCryptorUpdate(CCCryptorRef cryptorRef, const void *dataIn, size_t dataInLength, void *dataOut, size_t dataOutAvailable, size_t *dataOutMoved)
{
  return MEMORY[0x1F40C9538](cryptorRef, dataIn, dataInLength, dataOut, dataOutAvailable, dataOutMoved);
}

unsigned __int8 *__cdecl CC_SHA256(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1F40C9770](data, *(void *)&len, md);
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1F40D71F0](theArray, idx);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1F40D7830](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1F40D7850](theData);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B80](cf);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D8048](cf);
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1F40DB248]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CGFloat CGRectGetHeight(CGRect rect)
{
  MEMORY[0x1F40DB250]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  MEMORY[0x1F40DB268]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  MEMORY[0x1F40DB270]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinX(CGRect rect)
{
  MEMORY[0x1F40DB298]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinY(CGRect rect)
{
  MEMORY[0x1F40DB2A0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetWidth(CGRect rect)
{
  MEMORY[0x1F40DB2A8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGRect CGRectIntersection(CGRect r1, CGRect r2)
{
  MEMORY[0x1F40DB2C8]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

uint64_t DeviceIdentityIssueClientCertificateWithCompletion()
{
  return MEMORY[0x1F4117548]();
}

kern_return_t IOConnectCallStructMethod(mach_port_t connection, uint32_t selector, const void *inputStruct, size_t inputStructCnt, void *outputStruct, size_t *outputStructCnt)
{
  return MEMORY[0x1F40E86D8](*(void *)&connection, *(void *)&selector, inputStruct, inputStructCnt, outputStruct, outputStructCnt);
}

uint64_t IOHIDEventGetIntegerValue()
{
  return MEMORY[0x1F40E8A00]();
}

uint64_t IOHIDEventGetType()
{
  return MEMORY[0x1F40E8A38]();
}

uint64_t IOHIDEventSystemClientActivate()
{
  return MEMORY[0x1F40E8AA0]();
}

uint64_t IOHIDEventSystemClientCancel()
{
  return MEMORY[0x1F40E8AA8]();
}

CFArrayRef IOHIDEventSystemClientCopyServices(IOHIDEventSystemClientRef client)
{
  return (CFArrayRef)MEMORY[0x1F40E8AB8](client);
}

uint64_t IOHIDEventSystemClientCreateWithType()
{
  return MEMORY[0x1F40E8AC8]();
}

uint64_t IOHIDEventSystemClientRegisterEventCallback()
{
  return MEMORY[0x1F40E8AF0]();
}

uint64_t IOHIDEventSystemClientSetDispatchQueue()
{
  return MEMORY[0x1F40E8B30]();
}

uint64_t IOHIDEventSystemClientSetMatching()
{
  return MEMORY[0x1F40E8B38]();
}

uint64_t IOHIDServiceClientCopyEvent()
{
  return MEMORY[0x1F40E8D08]();
}

io_object_t IOIteratorNext(io_iterator_t iterator)
{
  return MEMORY[0x1F40E8ED8](*(void *)&iterator);
}

kern_return_t IOMainPort(mach_port_t bootstrapPort, mach_port_t *mainPort)
{
  return MEMORY[0x1F40E8EF0](*(void *)&bootstrapPort, mainPort);
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return MEMORY[0x1F40E8F60](*(void *)&object);
}

kern_return_t IOServiceClose(io_connect_t connect)
{
  return MEMORY[0x1F40E9240](*(void *)&connect);
}

kern_return_t IOServiceGetMatchingServices(mach_port_t mainPort, CFDictionaryRef matching, io_iterator_t *existing)
{
  return MEMORY[0x1F40E9258](*(void *)&mainPort, matching, existing);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40E9268](name);
}

kern_return_t IOServiceOpen(io_service_t service, task_port_t owningTask, uint32_t type, io_connect_t *connect)
{
  return MEMORY[0x1F40E9280](*(void *)&service, *(void *)&owningTask, *(void *)&type, connect);
}

uint64_t LevenshteinDistance()
{
  return MEMORY[0x1F41165D0]();
}

uint64_t MobileGestalt_get_current_device()
{
  return MEMORY[0x1F417CE98]();
}

uint64_t MobileGestalt_get_deviceClassNumber()
{
  return MEMORY[0x1F417CEA0]();
}

uint64_t MobileGestalt_get_secureElement()
{
  return MEMORY[0x1F417CEF0]();
}

uint64_t MobileGestalt_get_wapiCapability()
{
  return MEMORY[0x1F417CEF8]();
}

uint64_t SESKeyAttestWithSEBAA()
{
  return MEMORY[0x1F4149FB0]();
}

uint64_t SESKeyCreate()
{
  return MEMORY[0x1F4149FB8]();
}

uint64_t SESKeyCreatePTAttestation()
{
  return MEMORY[0x1F4149FC0]();
}

uint64_t SESKeyDelete()
{
  return MEMORY[0x1F4149FD0]();
}

uint64_t SESKeyDesignate()
{
  return MEMORY[0x1F4149FE0]();
}

uint64_t SESKeyGetAccessControlConstraints()
{
  return MEMORY[0x1F4149FF8]();
}

uint64_t SESKeyGetDesignatedKeys()
{
  return MEMORY[0x1F414A000]();
}

uint64_t SESKeyGetPTAttestationCASD()
{
  return MEMORY[0x1F414A008]();
}

uint64_t SESKeyPublicKey()
{
  return MEMORY[0x1F414A010]();
}

uint64_t SESKeyRemoveDesignation()
{
  return MEMORY[0x1F414A018]();
}

uint64_t SESKeySignPrecomputedDigest()
{
  return MEMORY[0x1F414A020]();
}

uint64_t SESKeySignPrecomputedDigestWithListenerEndpoint()
{
  return MEMORY[0x1F414A028]();
}

uint64_t SESKeyUpdateACL()
{
  return MEMORY[0x1F414A030]();
}

uint64_t SecAccessControlCopyData()
{
  return MEMORY[0x1F40F6A00]();
}

uint64_t SecAccessControlCreate()
{
  return MEMORY[0x1F40F6A08]();
}

uint64_t SecAccessControlCreateFromData()
{
  return MEMORY[0x1F40F6A10]();
}

SecAccessControlRef SecAccessControlCreateWithFlags(CFAllocatorRef allocator, CFTypeRef protection, SecAccessControlCreateFlags flags, CFErrorRef *error)
{
  return (SecAccessControlRef)MEMORY[0x1F40F6A18](allocator, protection, flags, error);
}

uint64_t SecAccessControlGetConstraints()
{
  return MEMORY[0x1F40F6A28]();
}

uint64_t SecAccessControlSetConstraints()
{
  return MEMORY[0x1F40F6A58]();
}

uint64_t SecAccessControlSetProtection()
{
  return MEMORY[0x1F40F6A60]();
}

uint64_t SecCertificateCopyAppleExternalRoots()
{
  return MEMORY[0x1F40F6AA8]();
}

OSStatus SecCertificateCopyCommonName(SecCertificateRef certificate, CFStringRef *commonName)
{
  return MEMORY[0x1F40F6AB8](certificate, commonName);
}

CFDataRef SecCertificateCopyData(SecCertificateRef certificate)
{
  return (CFDataRef)MEMORY[0x1F40F6AD0](certificate);
}

uint64_t SecCertificateCopyExtendedKeyUsage()
{
  return MEMORY[0x1F40F6AE8]();
}

uint64_t SecCertificateCopyExtensionValue()
{
  return MEMORY[0x1F40F6AF0]();
}

uint64_t SecCertificateCopyIssuerSHA1Digest()
{
  return MEMORY[0x1F40F6AF8]();
}

SecKeyRef SecCertificateCopyKey(SecCertificateRef certificate)
{
  return (SecKeyRef)MEMORY[0x1F40F6B10](certificate);
}

CFDataRef SecCertificateCopyNormalizedIssuerSequence(SecCertificateRef certificate)
{
  return (CFDataRef)MEMORY[0x1F40F6B18](certificate);
}

CFDataRef SecCertificateCopyNormalizedSubjectSequence(SecCertificateRef certificate)
{
  return (CFDataRef)MEMORY[0x1F40F6B20](certificate);
}

CFDataRef SecCertificateCopySerialNumberData(SecCertificateRef certificate, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1F40F6B48](certificate, error);
}

uint64_t SecCertificateCopySubjectAttributeValue()
{
  return MEMORY[0x1F40F6B50]();
}

SecCertificateRef SecCertificateCreateWithData(CFAllocatorRef allocator, CFDataRef data)
{
  return (SecCertificateRef)MEMORY[0x1F40F6B80](allocator, data);
}

uint64_t SecCertificateCreateWithPEM()
{
  return MEMORY[0x1F40F6B88]();
}

uint64_t SecCertificateGetSHA1Digest()
{
  return MEMORY[0x1F40F6BA8]();
}

CFTypeID SecCertificateGetTypeID(void)
{
  return MEMORY[0x1F40F6BB8]();
}

uint64_t SecCertificateNotValidAfter()
{
  return MEMORY[0x1F40F6BD0]();
}

uint64_t SecCertificateNotValidBefore()
{
  return MEMORY[0x1F40F6BD8]();
}

CFStringRef SecCopyErrorMessageString(OSStatus status, void *reserved)
{
  return (CFStringRef)MEMORY[0x1F40F6D68](*(void *)&status, reserved);
}

OSStatus SecItemAdd(CFDictionaryRef attributes, CFTypeRef *result)
{
  return MEMORY[0x1F40F6DD8](attributes, result);
}

OSStatus SecItemCopyMatching(CFDictionaryRef query, CFTypeRef *result)
{
  return MEMORY[0x1F40F6DE0](query, result);
}

OSStatus SecItemDelete(CFDictionaryRef query)
{
  return MEMORY[0x1F40F6DE8](query);
}

CFDictionaryRef SecKeyCopyAttributes(SecKeyRef key)
{
  return (CFDictionaryRef)MEMORY[0x1F40F6E38](key);
}

CFDataRef SecKeyCopyExternalRepresentation(SecKeyRef key, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1F40F6E40](key, error);
}

CFDataRef SecKeyCopyKeyExchangeResult(SecKeyRef privateKey, SecKeyAlgorithm algorithm, SecKeyRef publicKey, CFDictionaryRef parameters, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1F40F6E50](privateKey, algorithm, publicKey, parameters, error);
}

SecKeyRef SecKeyCopyPublicKey(SecKeyRef key)
{
  return (SecKeyRef)MEMORY[0x1F40F6E70](key);
}

uint64_t SecKeyCreateDecryptedDataWithParameters()
{
  return MEMORY[0x1F40F6EA0]();
}

SecKeyRef SecKeyCreateRandomKey(CFDictionaryRef parameters, CFErrorRef *error)
{
  return (SecKeyRef)MEMORY[0x1F40F6EE0](parameters, error);
}

CFDataRef SecKeyCreateSignature(SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef dataToSign, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1F40F6EF8](key, algorithm, dataToSign, error);
}

SecKeyRef SecKeyCreateWithData(CFDataRef keyData, CFDictionaryRef attributes, CFErrorRef *error)
{
  return (SecKeyRef)MEMORY[0x1F40F6F08](keyData, attributes, error);
}

CFTypeID SecKeyGetTypeID(void)
{
  return MEMORY[0x1F40F6F58]();
}

Boolean SecKeyIsAlgorithmSupported(SecKeyRef key, SecKeyOperationType operation, SecKeyAlgorithm algorithm)
{
  return MEMORY[0x1F40F6F60](key, operation, algorithm);
}

Boolean SecKeyVerifySignature(SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef signedData, CFDataRef signature, CFErrorRef *error)
{
  return MEMORY[0x1F40F6F80](key, algorithm, signedData, signature, error);
}

SecPolicyRef SecPolicyCreateBasicX509(void)
{
  return (SecPolicyRef)MEMORY[0x1F40F7048]();
}

uint64_t SecPolicyCreateMDLTerminalAuth()
{
  return MEMORY[0x1F40F7058]();
}

SecPolicyRef SecPolicyCreateRevocation(CFOptionFlags revocationFlags)
{
  return (SecPolicyRef)MEMORY[0x1F40F7078](revocationFlags);
}

int SecRandomCopyBytes(SecRandomRef rnd, size_t count, void *bytes)
{
  return MEMORY[0x1F40F70F0](rnd, count, bytes);
}

CFArrayRef SecTrustCopyCertificateChain(SecTrustRef trust)
{
  return (CFArrayRef)MEMORY[0x1F40F7190](trust);
}

SecKeyRef SecTrustCopyKey(SecTrustRef trust)
{
  return (SecKeyRef)MEMORY[0x1F40F71B8](trust);
}

OSStatus SecTrustCreateWithCertificates(CFTypeRef certificates, CFTypeRef policies, SecTrustRef *trust)
{
  return MEMORY[0x1F40F71E0](certificates, policies, trust);
}

OSStatus SecTrustEvaluateAsyncWithError(SecTrustRef trust, dispatch_queue_t queue, SecTrustWithErrorCallback result)
{
  return MEMORY[0x1F40F7200](trust, queue, result);
}

BOOL SecTrustEvaluateWithError(SecTrustRef trust, CFErrorRef *error)
{
  return MEMORY[0x1F40F7210](trust, error);
}

OSStatus SecTrustGetTrustResult(SecTrustRef trust, SecTrustResultType *result)
{
  return MEMORY[0x1F40F7230](trust, result);
}

OSStatus SecTrustSetAnchorCertificates(SecTrustRef trust, CFArrayRef anchorCertificates)
{
  return MEMORY[0x1F40F7258](trust, anchorCertificates);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1F40C9A70](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x1F40C9C28]();
}

{
  return MEMORY[0x1F41813D0]();
}

{
  return MEMORY[0x1F41813F0]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x1F4186370]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x1F4186388]();
}

uint64_t _swift_stdlib_strtod_clocale()
{
  return MEMORY[0x1F4186398]();
}

uint64_t _swift_stdlib_strtof_clocale()
{
  return MEMORY[0x1F41863A0]();
}

long double atan2(long double __y, long double __x)
{
  MEMORY[0x1F40CA460](__y, __x);
  return result;
}

void bzero(void *a1, size_t a2)
{
}

uint64_t ccder_decode_constructed_tl()
{
  return MEMORY[0x1F40CA888]();
}

uint64_t ccder_decode_len()
{
  return MEMORY[0x1F40CA890]();
}

uint64_t ccder_decode_tag()
{
  return MEMORY[0x1F40CA8C0]();
}

uint64_t ccder_encode_constructed_tl()
{
  return MEMORY[0x1F40CA8E8]();
}

uint64_t ccder_encode_integer()
{
  return MEMORY[0x1F40CA908]();
}

uint64_t ccder_sizeof()
{
  return MEMORY[0x1F40CA938]();
}

uint64_t ccder_sizeof_integer()
{
  return MEMORY[0x1F40CA950]();
}

uint64_t container_system_group_path_for_identifier()
{
  return MEMORY[0x1F40CB7F8]();
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1F40CBA88]();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBC0](label, attr);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1F40CBC30](value);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

void free(void *a1)
{
}

pid_t getpid(void)
{
  return MEMORY[0x1F40CC4A0]();
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1F40CCB10](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1F40CCB80](ptr);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1F40CCCE8](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD20](__b, *(void *)&__c, __len);
}

errno_t memset_s(void *__s, rsize_t __smax, int __c, rsize_t __n)
{
  return MEMORY[0x1F40CCD40](__s, __smax, *(void *)&__c, __n);
}

int mlock(const void *a1, size_t a2)
{
  return MEMORY[0x1F40CCE38](a1, a2);
}

int munlock(const void *a1, size_t a2)
{
  return MEMORY[0x1F40CCE80](a1, a2);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1F4181640](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1F4181660](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181678](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1F4181688]();
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F4181798](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1F41817B0]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1F41817B8]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1F41817C0]();
}

uint64_t self
{
  return MEMORY[0x1F41817D0]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1F41818B8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C8](a1);
}

void objc_storeStrong(id *location, id obj)
{
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1F40CD360](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1F40CD550](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x1F40CD558](log);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_variant_allows_internal_security_policies()
{
  return MEMORY[0x1F40CD630]();
}

int proc_pid_rusage(int pid, int flavor, rusage_info_t *buffer)
{
  return MEMORY[0x1F40CD890](*(void *)&pid, *(void *)&flavor, buffer);
}

unsigned int sleep(unsigned int a1)
{
  return MEMORY[0x1F40CE078](*(void *)&a1);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2A0](__str, __endptr, *(void *)&__base);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x1F41863D0]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x1F41863E0]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1F41863E8]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x1F41863F0]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x1F4186410]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1F4186418]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x1F4186420]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x1F4186428]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x1F4186430]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1F4186440]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1F4186448]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1F4186450]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x1F4186458]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x1F4186460]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x1F41881F0]();
}

uint64_t swift_continuation_resume()
{
  return MEMORY[0x1F41881F8]();
}

uint64_t swift_continuation_throwingResume()
{
  return MEMORY[0x1F4188200]();
}

uint64_t swift_continuation_throwingResumeWithError()
{
  return MEMORY[0x1F4188208]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x1F4186488]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x1F41864A0]();
}

uint64_t swift_defaultActor_destroy()
{
  return MEMORY[0x1F4188218]();
}

uint64_t swift_defaultActor_initialize()
{
  return MEMORY[0x1F4188220]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1F41864B8]();
}

uint64_t swift_dynamicCastMetatype()
{
  return MEMORY[0x1F41864D0]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x1F41864E0]();
}

uint64_t swift_dynamicCastObjCProtocolConditional()
{
  return MEMORY[0x1F41864F0]();
}

uint64_t swift_dynamicCastUnknownClassUnconditional()
{
  return MEMORY[0x1F4186510]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x1F4186518]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1F4186528]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1F4186530]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x1F4186538]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x1F4186540]();
}

uint64_t swift_getDynamicType()
{
  return MEMORY[0x1F4186568]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x1F4186570]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x1F4186580]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1F41865A8]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x1F41865E0]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x1F41865E8]();
}

uint64_t swift_getMetatypeMetadata()
{
  return MEMORY[0x1F41865F0]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x1F41865F8]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1F4186608]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x1F4186610]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1F4186628]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x1F4186650]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1F4186668]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1F4186670]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1F4186680]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x1F4186688]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x1F4186690]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x1F41866A8]();
}

uint64_t swift_initStaticObject()
{
  return MEMORY[0x1F41866B0]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x1F41866B8]();
}

uint64_t swift_isClassType()
{
  return MEMORY[0x1F41866C0]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x1F41866C8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x1F41866F8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1F4186700]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x1F4186710]();
}

uint64_t swift_once()
{
  return MEMORY[0x1F4186728]();
}

uint64_t swift_release()
{
  return MEMORY[0x1F4186758]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x1F4186760]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1F4186770]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x1F4186778]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x1F4186790]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1F4186798]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1F41867A0]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x1F41867A8]();
}

uint64_t swift_stdlib_random()
{
  return MEMORY[0x1F41867B0]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x1F41867B8]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x1F4188250]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x1F4188258]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x1F4188260]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1F41867E0]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x1F41867E8]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1F41867F0]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x1F41867F8]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x1F4186858]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x1F4186860]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x1F4186868]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x1F4186898]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x1F41868B8]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x1F41868C0]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x1F41868C8]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1F41868E0]();
}

uint64_t swift_willThrowTypedImpl()
{
  return MEMORY[0x1F41868E8]();
}

xpc_activity_state_t xpc_activity_get_state(xpc_activity_t activity)
{
  return MEMORY[0x1F40CE990](activity);
}

void xpc_activity_register(const char *identifier, xpc_object_t criteria, xpc_activity_handler_t handler)
{
}

BOOL xpc_activity_set_state(xpc_activity_t activity, xpc_activity_state_t state)
{
  return MEMORY[0x1F40CE9D0](activity, state);
}

BOOL xpc_activity_should_defer(xpc_activity_t activity)
{
  return MEMORY[0x1F40CE9E8](activity);
}

void xpc_activity_unregister(const char *identifier)
{
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1F40CEE20](keys, values, count);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
}