int64_t CFDictionaryGetInt64Ranged(const __CFDictionary *a1, const void *a2, int64_t a3, int64_t a4, int *a5)
{
  CFStringRef Value;
  uint64_t vars8;

  if (a1 && (Value = (const __CFString *)CFDictionaryGetValue(a1, a2)) != 0)
  {
    return CFGetInt64Ranged(Value, a3, a4, a5);
  }
  else
  {
    if (a5) {
      *a5 = -6727;
    }
    return 0;
  }
}

uint64_t DataBuffer_AppendF(uint64_t (*a1)(const char *, uint64_t), unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v9 = VCPrintF((uint64_t (*)(const char *, uint64_t))__DataBuffer_PrintFCallBack, a1, a2, (uint64_t)&a9, a5, a6, a7, a8);
  return v9 & (v9 >> 31);
}

uint64_t CUXPCDecodeUInt64RangedEx(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t *a5, void *a6)
{
  uint64_t v11 = xpc_dictionary_get_value(a1, a2);
  v12 = (void *)v11;
  if (!v11)
  {
    uint64_t v19 = 2;
    goto LABEL_14;
  }
  uint64_t v13 = MEMORY[0x192FAB6C0](v11);
  if (v13 == MEMORY[0x1E4F145F8])
  {
    uint64_t value = xpc_uint64_get_value(v12);
    goto LABEL_11;
  }
  if (v13 == MEMORY[0x1E4F145C0])
  {
    uint64_t value = xpc_int64_get_value(v12);
LABEL_11:
    if (value >= a3 && value <= a4)
    {
      *a5 = value;
      uint64_t v19 = 6;
      goto LABEL_14;
    }
    if (!a6) {
      goto LABEL_7;
    }
    NSErrorF_safe((void *)*MEMORY[0x1E4F28760], 4294960586, (uint64_t)"XPC out-of-range: '%s', %llu vs min %llu, max %llu", v21, v22, v23, v24, v25, (uint64_t)a2);
    goto LABEL_6;
  }
  if (a6)
  {
    NSErrorF_safe((void *)*MEMORY[0x1E4F28760], 4294960540, (uint64_t)"XPC non-uint64 type: '%s'", v14, v15, v16, v17, v18, (uint64_t)a2);
LABEL_6:
    *a6 = (id)objc_claimAutoreleasedReturnValue();
  }
LABEL_7:
  uint64_t v19 = 5;
LABEL_14:

  return v19;
}

uint64_t DataBuffer_Init(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)result = a2;
  *(void *)(result + 8) = a3;
  *(void *)(result + 16) = a4;
  *(void *)(result + 24) = a2;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = a3;
  *(unsigned char *)(result + 48) = 0;
  *(_DWORD *)(result + 52) = 0;
  return result;
}

void NSAppendPrintF(CFMutableStringRef *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void NSAppendPrintF_safe(CFMutableStringRef *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void NSAppendPrintV(CFMutableStringRef *a1, uint64_t a2, uint64_t a3)
{
  if (!*a1)
  {
    *a1 = [MEMORY[0x1E4F28E78] string];
  }
  cStr = 0;
  VASPrintF((void **)&cStr, a2, a3);
  v6 = cStr;
  if (cStr)
  {
    CFStringAppendCString(*a1, cStr, 0x8000100u);
    free(v6);
  }
}

uint64_t PrintFWriteFlags(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a4;
  if (a2)
  {
    uint64_t v11 = PrintFCore(a1, (uint64_t)"0x%llX ", a3, a4, a5, a6, a7, a8, a4);
    if ((v11 & 0x80000000) != 0) {
      return v11;
    }
  }
  else
  {
    LODWORD(v11) = 0;
  }
  uint64_t v12 = PrintFCore(a1, (uint64_t)"<", a3, a4, a5, a6, a7, a8, v27);
  if ((v12 & 0x80000000) != 0) {
    return v12;
  }
  int v19 = v12 + v11;
  if (v8)
  {
    unint64_t v20 = 0;
    do
    {
      if (((1 << v20) & v8) != 0)
      {
        v8 &= ~(1 << v20);
        for (i = (const char *)a3; ; i += v22 + 2)
        {
          size_t v22 = strlen(i + 1);
          if (!v22) {
            break;
          }
          if (v20 == *(unsigned __int8 *)i)
          {
            uint64_t v23 = PrintFCore(a1, (uint64_t)" %s", v13, v14, v15, v16, v17, v18, (uint64_t)(i + 1));
            uint64_t v11 = v23;
            if ((v23 & 0x80000000) != 0) {
              return v11;
            }
            v19 += v23;
            break;
          }
        }
      }
      if (v20 > 0x3E) {
        break;
      }
      ++v20;
    }
    while (v8);
  }
  int v24 = PrintFCore(a1, (uint64_t)" >", v13, v14, v15, v16, v17, v18, v28);
  if (v24 >= 0) {
    int v25 = v19;
  }
  else {
    int v25 = 0;
  }
  return (v25 + v24);
}

uint64_t PrintFCore(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return PrintFCoreVAList(a1, a2, &a9);
}

uint64_t VCPrintF(uint64_t (*a1)(const char *, uint64_t), uint64_t (*a2)(const char *, uint64_t), unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v11[0] = (uint64_t (*)(const char *, uint64_t))PrintFCallBackUserCallBack;
  memset(&v11[1], 0, 24);
  v11[4] = a1;
  v11[5] = a2;
  uint64_t v8 = PrintFCoreVAList(v11, a3, a4, a4, a5, a6, a7, a8);
  if ((v8 & 0x80000000) == 0)
  {
    int v9 = ((uint64_t (*)(const char *, void, uint64_t (**)(const char *, uint64_t)))v11[0])("", 0, v11);
    if (v9 >= 0) {
      return v8;
    }
    else {
      return v9;
    }
  }
  return v8;
}

uint64_t VASPrintF(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  v7 = PrintFCallBackAllocatedString;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v4 = PrintFCoreVAList(&v7, a2, a3);
  if ((v4 & 0x80000000) == 0)
  {
    uint64_t v5 = v7("", 1, (uint64_t)&v7);
    if ((v5 & 0x80000000) == 0)
    {
      *a1 = v8;
      return v4;
    }
    uint64_t v4 = v5;
  }
  if (v8) {
    free(v8);
  }
  return v4;
}

uint64_t PrintFCoreVAList(uint64_t (**a1)(const char *, uint64_t), unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a2;
  uint64_t v9 = a1;
  uint64_t v10 = 0;
  uint64_t v434 = *MEMORY[0x1E4F143B8];
  v421[1] = a3;
  long long v419 = 0u;
  long long v420 = 0u;
  v421[0] = a3;
  int v11 = (char)*a2;
  v417 = (__CFString *)*MEMORY[0x1E4F1CFD0];
  uint64_t v12 = 42;
  while (1)
  {
    uint64_t v13 = v8 + 1;
    uint64_t v14 = v8;
    if (v11)
    {
      do
      {
        if (v11 == 37) {
          break;
        }
        int v15 = (char)*++v14;
        int v11 = v15;
        ++v13;
      }
      while (v15);
    }
    int v16 = v14 - v8;
    if (v14 != v8)
    {
      uint64_t v17 = ((uint64_t (*)(unsigned __int8 *, void, uint64_t (**)(const char *, uint64_t)))*v9)(v8, v16, v9);
      if ((v17 & 0x80000000) != 0) {
        return v17;
      }
      uint64_t v10 = (v10 + v16);
      uint64_t v12 = 42;
    }
    if (!v11) {
      return v10;
    }
    int v18 = 0;
    int v19 = 0;
    char v20 = 0;
    char v21 = 0;
    unsigned int v22 = 0;
    long long v419 = 0u;
    long long v420 = 0u;
    while (2)
    {
      int v23 = *v13;
      switch(*v13)
      {
        case ' ':
          int v18 = 32;
          BYTE4(v419) = 32;
          goto LABEL_22;
        case '!':
        case '""':
        case '$':
        case '%':
        case '&':
        case '(':
        case ')':
        case ',':
        case '.':
        case '/':
          goto LABEL_23;
        case '#':
          BYTE3(v419) = ++v20;
          goto LABEL_22;
        case '\'':
          BYTE8(v420) = ++v21;
          goto LABEL_22;
        case '*':
          uint64_t v27 = (unsigned int *)v421[0];
          v421[0] += 8;
          uint64_t v25 = *v27;
          if ((v25 & 0x80000000) != 0)
          {
            uint64_t v25 = -(int)v25;
            LOBYTE(v22) = v22 | 1;
            LOBYTE(v419) = v22;
          }
          DWORD2(v419) = v25;
          int v23 = *++v13;
          goto LABEL_31;
        case '+':
          v22 |= 2u;
          goto LABEL_21;
        case '-':
          v22 |= 1u;
          goto LABEL_21;
        case '0':
          v22 |= 4u;
          goto LABEL_21;
        default:
          if (v23 == 63)
          {
            int v24 = (_DWORD *)v421[0];
            v421[0] += 8;
            unsigned int v22 = v22 & 0xFFFFFFEF | (16 * (*v24 == 0));
LABEL_21:
            LOBYTE(v419) = v22;
LABEL_22:
            ++v13;
            continue;
          }
          if (v23 == 126)
          {
            int v19 = 1;
            BYTE11(v420) = 1;
            goto LABEL_22;
          }
LABEL_23:
          if ((v23 - 48) > 9)
          {
            uint64_t v25 = 0;
          }
          else
          {
            LODWORD(v25) = 0;
            do
            {
              uint64_t v25 = 10 * v25 + v23 - 48;
              DWORD2(v419) = v25;
              int v26 = *++v13;
              int v23 = v26;
            }
            while ((v26 - 48) < 0xA);
          }
LABEL_31:
          if (v23 == 46)
          {
            uint64_t v28 = v13 + 1;
            int v23 = v13[1];
            if (v23 == 42)
            {
              v29 = (unsigned int *)v421[0];
              v421[0] += 8;
              size_t v30 = *v29;
              *(void *)&long long v420 = v30;
              int v23 = v13[2];
              uint64_t v28 = v13 + 2;
            }
            else if ((v23 - 48) > 9)
            {
              size_t v30 = 0;
            }
            else
            {
              size_t v30 = 0;
              do
              {
                size_t v30 = v23 - 48 + 10 * v30;
                *(void *)&long long v420 = v30;
                int v31 = *++v28;
                int v23 = v31;
              }
              while ((v31 - 48) < 0xA);
            }
            LOBYTE(v22) = v22 | 8;
            LOBYTE(v419) = v22;
            uint64_t v13 = v28;
            if (v22)
            {
LABEL_42:
              LOBYTE(v22) = v22 & 0xFB;
              LOBYTE(v419) = v22;
            }
          }
          else
          {
            size_t v30 = 0;
            if (v22) {
              goto LABEL_42;
            }
          }
          unsigned __int8 v32 = 0;
          char v33 = 0;
          while (2)
          {
            HIDWORD(v34) = v23;
            LODWORD(v34) = (v23 << 24) - 1744830464;
            switch((v34 >> 25))
            {
              case 0u:
                BYTE1(v419) = ++v32;
                goto LABEL_47;
              case 1u:
              case 6u:
              case 9u:
                if (v32 | v33) {
                  return 0xFFFFFFFFLL;
                }
                unsigned __int8 v32 = 0;
                char v33 = 1;
                BYTE2(v419) = 1;
                char v36 = *++v13;
                LOBYTE(v23) = v36;
                break;
              case 2u:
                BYTE2(v419) = ++v33;
LABEL_47:
                int v35 = *++v13;
                int v23 = v35;
                continue;
              default:
                uint64_t v41 = 0xFFFFFFFFLL;
                if ((char)v32 > 2 || v33 > 2) {
                  return v41;
                }
                if (v32)
                {
                  uint64_t v9 = a1;
                  if (v33) {
                    return 0xFFFFFFFFLL;
                  }
                }
                else
                {
                  uint64_t v9 = a1;
                }
                break;
            }
            break;
          }
          int v37 = (char)v23;
          unsigned int v38 = 10;
          v39 = "0123456789ABCDEF";
          switch((char)v23)
          {
            case '@':
              v53 = (__CFString **)v421[0];
              v421[0] += 8;
              if ((v22 & 0x10) != 0) {
                goto LABEL_770;
              }
              v54 = *v53;
              if (v54) {
                v55 = v54;
              }
              else {
                v55 = @"NULL";
              }
              if (!v21 || (v22 & 8) == 0) {
                goto LABEL_94;
              }
              if (v30 < 2)
              {
                *(void *)&long long v420 = 0;
                BYTE8(v420) = 0;
              }
              else
              {
                *(void *)&long long v420 = v30 - 2;
LABEL_94:
                if (v21 == 2)
                {
                  __int16 v56 = 8738;
                }
                else
                {
                  if (v21 != 1) {
                    goto LABEL_389;
                  }
                  __int16 v56 = 10023;
                }
                *(_WORD *)((char *)&v420 + 9) = v56;
              }
LABEL_389:
              if (v20 == 1)
              {
                CFDataRef Data = CFPropertyListCreateData(0, v55, kCFPropertyListXMLFormat_v1_0, 0, 0);
                if (Data)
                {
                  CFDataRef v200 = Data;
                  BytePtr = (unsigned __int8 *)CFDataGetBytePtr(Data);
                  CFIndex Length = CFDataGetLength(v200);
                  uint64_t v41 = PrintFWriteMultiLineText((uint64_t (**)(unsigned __int8 *, int64_t, void))v9, (uint64_t)&v419, BytePtr, Length);
                  CFRelease(v200);
                  goto LABEL_652;
                }
                uint64_t v209 = PrintFCore((uint64_t)v9, (uint64_t)"<<PLIST NOT XML-ABLE>>", v194, v195, v196, v197, v198, v199, usedBufLen);
                goto LABEL_651;
              }
              while (2)
              {
                int v203 = BYTE3(v419);
                CFTypeID v204 = CFGetTypeID(v55);
                if (v204 == CFBooleanGetTypeID())
                {
                  if (v417 == v55) {
                    uint64_t v222 = 4;
                  }
                  else {
                    uint64_t v222 = 5;
                  }
                  if (v417 == v55) {
                    p_str = "true";
                  }
                  else {
                    p_str = "false";
                  }
                  uint64_t v9 = a1;
                  goto LABEL_649;
                }
                uint64_t v9 = a1;
                if (v204 == CFNumberGetTypeID())
                {
                  if (CFNumberIsFloatType((CFNumberRef)v55))
                  {
                    *(void *)__format = 0;
                    CFNumberGetValue((CFNumberRef)v55, kCFNumberDoubleType, __format);
                    int v231 = SNPrintF((uint64_t)&__str, 300, (uint64_t)"%f", v226, v227, v228, v229, v230, *(uint64_t *)__format);
                  }
                  else
                  {
                    *(void *)__format = 0;
                    CFNumberGetValue((CFNumberRef)v55, kCFNumberSInt64Type, __format);
                    int v231 = SNPrintF((uint64_t)&__str, 300, (uint64_t)"%lld", v315, v316, v317, v318, v319, *(uint64_t *)__format);
                  }
                  uint64_t v222 = v231;
                  goto LABEL_648;
                }
                if (v204 != CFStringGetTypeID())
                {
                  if (v204 == CFNullGetTypeID())
                  {
                    v239 = a1;
                    p_str = "Null";
                    uint64_t v222 = 4;
                    goto LABEL_650;
                  }
                  if (v204 == CFURLGetTypeID())
                  {
                    v55 = (__CFString *)CFURLGetString((CFURLRef)v55);
                    uint64_t v41 = 4294960596;
                    if (!v55) {
                      return v41;
                    }
                    continue;
                  }
                  objc_opt_class();
                  if (objc_opt_isKindOfClass())
                  {
                    memset(__format, 0, sizeof(__format));
                    [(__CFString *)v55 getUUIDBytes:__format];
                    goto LABEL_614;
                  }
                  if (v204 == CFUUIDGetTypeID())
                  {
                    *(CFUUIDBytes *)__format = CFUUIDGetUUIDBytes((CFUUIDRef)v55);
LABEL_614:
                    if (BYTE11(v420)) {
                      v303 = "%~#U";
                    }
                    else {
                      v303 = "%#U";
                    }
                    int v304 = SNPrintF((uint64_t)&__str, 300, (uint64_t)v303, v240, v241, v242, v243, v244, (uint64_t)__format);
                    int v305 = v420;
                    if (v304 < (int)v420) {
                      int v305 = v304;
                    }
                    if ((v419 & 8) != 0) {
                      int v306 = v305;
                    }
                    else {
                      int v306 = v304;
                    }
                    uint64_t v222 = v306;
LABEL_648:
                    p_str = &__str;
LABEL_649:
                    v239 = v9;
LABEL_650:
                    uint64_t v209 = PrintFWriteText((uint64_t (**)(const char *, uint64_t, void))v239, (uint64_t)&v419, p_str, v222);
LABEL_651:
                    uint64_t v41 = v209;
                    goto LABEL_652;
                  }
                  if (v204 != CFDataGetTypeID())
                  {
                    uint64_t v433 = 0;
                    *(void *)__format = a1;
                    *(void *)&__format[8] = &v419;
                    uint64_t v432 = DWORD2(v419);
                    uint64_t v41 = PrintFWriteCFObjectLevel((uint64_t (***)(CFUUIDBytes *))__format, (const __CFArray *)v55, 0);
                    if ((v41 & 0x80000000) != 0
                      || v203 == 2
                      || v204 != CFArrayGetTypeID() && v204 != CFDictionaryGetTypeID() && v204 != CFSetGetTypeID())
                    {
                      goto LABEL_652;
                    }
                    int v358 = ((uint64_t (*)(const char *, uint64_t, uint64_t (**)(const char *, uint64_t)))*a1)("\n", 1, a1);
                    if (v358 <= 0) {
                      int v359 = 0;
                    }
                    else {
                      int v359 = v41;
                    }
LABEL_874:
                    uint64_t v41 = (v359 + v358);
                    goto LABEL_652;
                  }
                  v336 = (unsigned __int8 *)CFDataGetBytePtr((CFDataRef)v55);
                  unint64_t v337 = CFDataGetLength((CFDataRef)v55);
                  unint64_t v338 = v337;
                  unint64_t v339 = v420;
                  if ((v419 & 8) == 0) {
                    unint64_t v339 = v337;
                  }
                  uint64_t v340 = 32;
                  if (v339 < 0x20) {
                    uint64_t v340 = v339;
                  }
                  if (v203 == 2) {
                    unint64_t v339 = v340;
                  }
                  if (BYTE8(v420)) {
                    BOOL v341 = (v419 & 8) == 0;
                  }
                  else {
                    BOOL v341 = 1;
                  }
                  if (v341) {
                    unint64_t v342 = v339;
                  }
                  else {
                    unint64_t v342 = v339 + 2;
                  }
                  if (v337 >= 0x21 && v342 > 0x20)
                  {
                    uint64_t v41 = ((uint64_t (*)(const char *, uint64_t, uint64_t (**)(const char *, uint64_t)))*a1)("\n", 1, a1);
                    if ((v41 & 0x80000000) == 0)
                    {
                      int v344 = PrintFWriteHex(a1, (uint64_t)&v419, 0, (uint64_t)v336, v338, v342, 0, v343);
                      if (v344 >= 0) {
                        int v345 = v41;
                      }
                      else {
                        int v345 = 0;
                      }
                      uint64_t v41 = (v345 + v344);
                      uint64_t v9 = a1;
                      goto LABEL_652;
                    }
                    return v41;
                  }
                  if (BYTE9(v420))
                  {
                    uint64_t v41 = (*a1)((const char *)&v420 + 9, 1);
                    if ((v41 & 0x80000000) != 0) {
                      return v41;
                    }
                  }
                  else
                  {
                    LODWORD(v41) = 0;
                  }
                  if (v338 >= v342) {
                    uint64_t v382 = v342;
                  }
                  else {
                    uint64_t v382 = v338;
                  }
                  uint64_t v17 = PrintFWriteHexByteStream((uint64_t (**)(unsigned char *, uint64_t, void))a1, 0, v336, v382);
                  if ((v17 & 0x80000000) == 0)
                  {
                    int v383 = v17 + v41;
                    if (BYTE10(v420))
                    {
                      uint64_t v9 = a1;
                      int v358 = ((uint64_t (*)(char *, uint64_t, uint64_t (**)(const char *, uint64_t)))*a1)((char *)&v420 + 10, 1, a1);
                      if (v358 >= 0) {
                        int v359 = v383;
                      }
                      else {
                        int v359 = 0;
                      }
                      goto LABEL_874;
                    }
                    uint64_t v10 = (v383 + v10);
                    uint64_t v9 = a1;
LABEL_378:
                    uint64_t v12 = 42;
                    goto LABEL_770;
                  }
                  return v17;
                }
                break;
              }
              CFIndex v232 = CFStringGetLength(v55);
              CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(v232, 0x8000100u);
              v430.time_t tv_sec = MaximumSizeForEncoding;
              if (!MaximumSizeForEncoding)
              {
                v239 = a1;
                p_str = "";
                uint64_t v222 = 0;
                goto LABEL_650;
              }
              CFIndex v234 = MaximumSizeForEncoding;
              v235 = (UInt8 *)malloc_type_malloc(MaximumSizeForEncoding, 0x146251E0uLL);
              if (v235)
              {
                v236 = (char *)v235;
                time_t v422 = 0;
                v435.location = 0;
                v435.length = v232;
                CFStringGetBytes(v55, v435, 0x8000100u, 0x5Eu, 0, v235, v234, &v422);
                time_t tv_sec = v422;
                if (BYTE11(v420))
                {
                  v238 = __format;
                  _PrintFObfuscateString((unint64_t)v236, v422, __format, &v430.tv_sec);
                  time_t tv_sec = v430.tv_sec;
                  time_t v422 = v430.tv_sec;
                }
                else
                {
                  v238 = v236;
                }
                if ((v419 & 8) != 0 && tv_sec > (uint64_t)v420)
                {
                  uint64_t v346 = (int)v420;
                  time_t v422 = (int)v420;
                  time_t tv_sec = (int)v420;
                  if ((uint64_t)((void)v420 << 32) >= 1)
                  {
                    while ((v238[v346] & 0xC0) == 0x80)
                    {
                      time_t tv_sec = v346 - 1;
                      time_t v422 = v346 - 1;
                      BOOL v182 = v346-- < 2;
                      if (v182) {
                        goto LABEL_825;
                      }
                    }
                    time_t tv_sec = v346;
                  }
                }
LABEL_825:
                uint64_t v41 = PrintFWriteText((uint64_t (**)(const char *, uint64_t, void))a1, (uint64_t)&v419, v238, tv_sec);
                free(v236);
              }
              else
              {
                uint64_t v41 = 4294960568;
              }
LABEL_652:
              uint64_t v12 = 42;
              if ((v41 & 0x80000000) == 0)
              {
                uint64_t v10 = (v41 + v10);
                goto LABEL_770;
              }
              return v41;
            case 'A':
            case 'B':
            case 'D':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'O':
            case 'P':
            case 'Q':
            case 'R':
            case 'T':
            case 'W':
            case 'Y':
            case 'Z':
            case '[':
            case '\\':
            case ']':
            case '^':
            case '_':
            case 'h':
            case 'j':
            case 'k':
            case 'l':
            case 'q':
            case 'r':
            case 't':
            case 'w':
            case 'y':
            case 'z':
              goto LABEL_81;
            case 'C':
              v57 = (unsigned int *)v421[0];
              v421[0] += 8;
              if ((v22 & 0x10) != 0) {
                goto LABEL_770;
              }
              unsigned int v58 = *v57;
              if (v21)
              {
                char __str = 39;
                unsigned int v59 = 1;
              }
              else
              {
                unsigned int v59 = 0;
              }
              unsigned int v173 = HIBYTE(v58);
              v50 = &__str;
              v174 = &v427[v59 - 1];
              if (HIBYTE(v58)) {
                char v175 = 94;
              }
              else {
                char v175 = 46;
              }
              if (HIBYTE(v58) - 127 < 0xFFFFFFA1) {
                LOBYTE(v173) = v175;
              }
              unsigned char *v174 = v173;
              char v176 = BYTE2(v58);
              if (BYTE2(v58)) {
                char v177 = 94;
              }
              else {
                char v177 = 46;
              }
              if (BYTE2(v58) - 127 < 0xFFFFFFA1) {
                char v176 = v177;
              }
              v174[1] = v176;
              int v178 = BYTE1(v58);
              if (v178) {
                char v179 = 94;
              }
              else {
                char v179 = 46;
              }
              if ((v178 - 127) < 0xFFFFFFA1) {
                LOBYTE(v178) = v179;
              }
              v174[2] = v178;
              int v180 = v58 << 24;
              if ((_BYTE)v58) {
                char v181 = 94;
              }
              else {
                char v181 = 46;
              }
              BOOL v182 = v180 == 2130706432 || v180 < 520093697;
              if (v182) {
                LOBYTE(v58) = v181;
              }
              v174[3] = v58;
              if (v21)
              {
                LODWORD(v41) = v59 + 5;
                v427[(v59 | 4) - 1] = 39;
                int v37 = 67;
              }
              else
              {
                int v37 = 67;
                LODWORD(v41) = v59 | 4;
              }
              goto LABEL_765;
            case 'E':
            case 'F':
            case 'G':
            case 'e':
            case 'f':
            case 'g':
              __format[0] = 37;
              if ((v22 & 2) != 0)
              {
                __format[1] = 43;
                uint64_t v40 = 2;
              }
              else
              {
                uint64_t v40 = 1;
              }
              if (v20) {
                __format[v40++] = 35;
              }
              if ((v22 & 4) != 0) {
                __format[v40++] = 48;
              }
              uint64_t v42 = v40 + 1;
              __format[v40] = 42;
              if ((v22 & 8) != 0)
              {
                __format[v42] = 46;
                uint64_t v42 = v40 + 3;
                __format[v40 + 2] = 42;
              }
              v43 = &__format[v42];
              char *v43 = v23;
              v43[1] = 0;
              if (v22) {
                uint64_t v44 = -(int)v25;
              }
              else {
                uint64_t v44 = v25;
              }
              v45 = (void *)v421[0];
              v421[0] += 8;
              if ((v22 & 0x10) != 0) {
                goto LABEL_770;
              }
              double v46 = *(double *)v45;
              if ((v22 & 8) != 0) {
                uint64_t v47 = snprintf(&__str, 0x12CuLL, __format, v46, v44, v30, *v45, v405, v406, v407, v408, v409, v410, v411, v412, v413, v414);
              }
              else {
                uint64_t v47 = snprintf(&__str, 0x12CuLL, __format, v46, v44, *v45, v404, v405, v406, v407, v408, v409, v410, v411, v412, v413, v414);
              }
              uint64_t v41 = v47;
              if ((v47 & 0x80000000) == 0) {
                goto LABEL_77;
              }
              return v41;
            case 'H':
              uint64_t v60 = v421[0];
              v421[0] += 8;
              v61 = *(char **)v60;
              v421[0] = v60 + 16;
              size_t v62 = *(int *)(v60 + 8);
              v421[0] = v60 + 24;
              if ((v22 & 0x10) != 0) {
                goto LABEL_691;
              }
              unint64_t v63 = *(int *)(v60 + 16);
              if (!v61 && v62)
              {
                uint64_t v9 = a1;
                uint64_t v64 = PrintFCore((uint64_t)a1, (uint64_t)"<<NULL %zu/%zu>>", 42, a4, a5, a6, a7, a8, v62);
LABEL_376:
                uint64_t v41 = v64;
                if ((v64 & 0x80000000) != 0) {
                  return v41;
                }
                uint64_t v10 = (v64 + v10);
                goto LABEL_378;
              }
              if (v62 == -1) {
                size_t v62 = strlen(v61);
              }
              switch(v30)
              {
                case 0uLL:
                  if (v62 >= v63) {
                    unint64_t v157 = v63;
                  }
                  else {
                    unint64_t v157 = v62;
                  }
                  uint64_t v158 = PrintFWriteHexOneLine((uint64_t (**)(const char *, uint64_t, void))a1, (uint64_t)&v419, (unsigned __int8 *)v61, v157);
                  goto LABEL_689;
                case 1uLL:
                  v247 = a1;
                  uint64_t v248 = v25;
                  goto LABEL_688;
                case 2uLL:
                  if (v62)
                  {
                    if (v62 > 0x10)
                    {
                      uint64_t v17 = PrintFCore((uint64_t)a1, (uint64_t)"\n", v12, a4, a5, a6, a7, a8, usedBufLen);
                      if ((v17 & 0x80000000) != 0) {
                        return v17;
                      }
                      uint64_t v248 = DWORD2(v419);
                      v247 = a1;
                    }
                    else
                    {
                      v247 = a1;
                      uint64_t v248 = 0;
                    }
LABEL_688:
                    uint64_t v158 = PrintFWriteHex(v247, (uint64_t)&v419, v248, (uint64_t)v61, v62, v63, 1, a8);
                  }
                  else
                  {
                    uint64_t v245 = (uint64_t)a1;
                    v246 = "(0 bytes)\n";
LABEL_669:
                    uint64_t v158 = PrintFCore(v245, (uint64_t)v246, v12, a4, a5, a6, a7, a8, usedBufLen);
                  }
LABEL_689:
                  uint64_t v41 = v158;
                  uint64_t v12 = 42;
                  if ((v158 & 0x80000000) != 0) {
                    return v41;
                  }
                  uint64_t v10 = (v158 + v10);
                  break;
                case 3uLL:
                  if (v62 >= v63) {
                    uint64_t v249 = v63;
                  }
                  else {
                    uint64_t v249 = v62;
                  }
                  v250 = a1;
                  int v251 = 0;
                  goto LABEL_483;
                case 4uLL:
                  if (v62 >= v63) {
                    uint64_t v249 = v63;
                  }
                  else {
                    uint64_t v249 = v62;
                  }
                  v250 = a1;
                  int v251 = 1;
LABEL_483:
                  uint64_t v158 = PrintFWriteHexByteStream((uint64_t (**)(unsigned char *, uint64_t, void))v250, v251, (unsigned __int8 *)v61, v249);
                  goto LABEL_689;
                default:
                  uint64_t v245 = (uint64_t)a1;
                  v246 = "<< BAD %%H PRECISION >>";
                  goto LABEL_669;
              }
              goto LABEL_691;
            case 'N':
              if ((v22 & 0x10) != 0) {
                goto LABEL_770;
              }
              v430.time_t tv_sec = 0;
              *(void *)&v430.tv_usec = 0;
              time_t v422 = 0;
              gettimeofday(&v430, 0);
              time_t v422 = v430.tv_sec;
              if (BYTE3(v419) == 2)
              {
                v65 = gmtime(&v422);
                strftime(__format, 0x18uLL, "%Y-%m-%d-%H:%M:%S", v65);
                int v71 = SNPrintF((uint64_t)&__str, 300, (uint64_t)"%s.%06u", v66, v67, v68, v69, v70, (uint64_t)__format);
              }
              else
              {
                v159 = localtime(&v422);
                if (BYTE3(v419)) {
                  v160 = "%Y-%m-%d_%I-%M-%S";
                }
                else {
                  v160 = "%Y-%m-%d %I:%M:%S";
                }
                strftime(__format, 0x18uLL, v160, v159);
                strftime(v429, 8uLL, "%p", v159);
                uint64_t v166 = 32;
                if (BYTE3(v419)) {
                  uint64_t v166 = 45;
                }
                uint64_t v404 = v166;
                unint64_t v405 = (unint64_t)v429;
                int v71 = SNPrintF((uint64_t)&__str, 300, (uint64_t)"%s.%06u%c%s", v161, v162, v163, v164, v165, (uint64_t)__format);
              }
              LODWORD(v41) = v71;
              int v37 = 78;
              goto LABEL_77;
            case 'S':
              v72 = (unsigned __int8 **)v421[0];
              v421[0] += 8;
              if ((v22 & 0x10) != 0) {
                goto LABEL_770;
              }
              v73 = *v72;
              if (v73)
              {
                char v74 = v22 & 8;
                BOOL v75 = (v22 & 8) == 0;
                if (v21 && v74)
                {
                  BOOL v76 = v30 >= 2;
                  v30 -= 2;
                  if (v76)
                  {
                    BOOL v75 = 0;
                    *(void *)&long long v420 = v30;
                  }
                  else
                  {
LABEL_367:
                    BOOL v75 = 0;
                    char v21 = 0;
                    size_t v30 = 0;
                    *(void *)&long long v420 = 0;
                    BYTE8(v420) = 0;
                  }
                }
LABEL_492:
                if (!v75 && !v30) {
                  goto LABEL_501;
                }
                int v256 = *v73;
                if (v256 == 255)
                {
                  if (v73[1] != 254) {
                    goto LABEL_501;
                  }
                  char v20 = 2;
LABEL_500:
                  BYTE3(v419) = v20;
                  --v30;
                  v73 += 2;
                  *(void *)&long long v420 = v30;
                  goto LABEL_502;
                }
                if (v256 == 254 && v73[1] == 255)
                {
                  char v20 = 1;
                  goto LABEL_500;
                }
LABEL_501:
                if ((v20 - 1) < 2)
                {
LABEL_502:
                  int v257 = (int)v30 > 0 || v75;
                  if (v257 == 1)
                  {
                    uint64_t v41 = 0;
                    uint64_t v258 = 300;
                    uint64_t v259 = 2 - v20;
                    do
                    {
                      if (*(_WORD *)&v73[2 * v41]) {
                        BOOL v260 = v258 < 1;
                      }
                      else {
                        BOOL v260 = 1;
                      }
                      if (v260) {
                        break;
                      }
                      int v261 = v73[v259];
                      if (v73[v259]) {
                        char v262 = 94;
                      }
                      else {
                        char v262 = 46;
                      }
                      if ((v261 - 32) >= 0x5F) {
                        LOBYTE(v261) = v262;
                      }
                      v427[v41++ - 1] = v261;
                      BOOL v263 = v41 < (int)v30 || v75;
                      --v258;
                      v259 += 2;
                    }
                    while (v263);
                    goto LABEL_540;
                  }
LABEL_538:
                  LODWORD(v41) = 0;
                  goto LABEL_540;
                }
                if (v20)
                {
                  LODWORD(v41) = SNPrintF((uint64_t)&__str, 300, (uint64_t)"<< ERROR: %%S with too many #'s (%d) >>", a4, a5, a6, a7, a8, v20);
                  char v21 = BYTE8(v420);
                  goto LABEL_540;
                }
                int v264 = (int)v30 > 0 || v75;
                if (v264 != 1) {
                  goto LABEL_538;
                }
                uint64_t v41 = 0;
                uint64_t v265 = 300;
                do
                {
                  int v266 = *(unsigned __int16 *)&v73[2 * v41];
                  if (*(_WORD *)&v73[2 * v41]) {
                    BOOL v267 = v265 < 1;
                  }
                  else {
                    BOOL v267 = 1;
                  }
                  if (v267) {
                    break;
                  }
                  if ((v266 - 32) >= 0x5F) {
                    LOBYTE(v266) = 94;
                  }
                  v427[v41++ - 1] = v266;
                  BOOL v268 = v41 < (int)v30 || v75;
                  --v265;
                }
                while (v268);
LABEL_540:
                if (v21 == 2)
                {
                  __int16 v269 = 8738;
LABEL_544:
                  *(_WORD *)((char *)&v420 + 9) = v269;
                }
                else if (v21 == 1)
                {
                  __int16 v269 = 10023;
                  goto LABEL_544;
                }
                int v37 = 83;
                goto LABEL_77;
              }
              int v37 = 83;
              LODWORD(v41) = 4;
              if ((v22 & 8) != 0 && !v30)
              {
                if (v21) {
                  goto LABEL_367;
                }
                BOOL v75 = 0;
                char v21 = 0;
                size_t v30 = 0;
                goto LABEL_492;
              }
              goto LABEL_371;
            case 'U':
              v77 = (int8x16_t **)v421[0];
              v421[0] += 8;
              if ((v22 & 0x10) != 0) {
                goto LABEL_770;
              }
              p_s = *v77;
              if (!*v77)
              {
                int v37 = 85;
                goto LABEL_370;
              }
              if (v19)
              {
                if (gObfuscateOnce != -1) {
                  dispatch_once_f(&gObfuscateOnce, 0, (dispatch_function_t)_PrintFObfuscateInit);
                }
                if (!v20)
                {
                  *(int8x16_t *)__format = vqtbl1q_s8(*p_s, (int8x16_t)xmmword_18E416F80);
                  p_s = (int8x16_t *)__format;
                }
                int v79 = SipHash(gObfuscateKey, (unsigned __int8 *)p_s, 16);
                __s.i16[0] = 187;
                __s.i8[2] = HIBYTE(v79);
                __s.i8[3] = BYTE2(v79);
                __s.i8[4] = BYTE1(v79);
                __s.i8[5] = v79;
                *(uint64_t *)((char *)__s.i64 + 6) = 0xFBF31F0000800010;
                __s.i16[7] = -8320;
                if (!v20) {
                  int8x16_t __s = vqtbl1q_s8(__s, (int8x16_t)xmmword_18E416F80);
                }
                p_s = &__s;
                char v20 = BYTE3(v419);
              }
              if (v20)
              {
                uint64_t v80 = p_s->u8[0];
                uint64_t v81 = p_s->u8[2];
                v82 = (char *)p_s->u8[3];
                uint64_t v83 = p_s->u8[4];
                uint64_t v84 = p_s->u8[5];
                uint64_t v85 = p_s->u8[6];
                uint64_t v86 = p_s->u8[7];
              }
              else
              {
                uint64_t v80 = p_s->u8[3];
                uint64_t v81 = p_s->u8[1];
                v82 = (char *)p_s->u8[0];
                uint64_t v83 = p_s->u8[5];
                uint64_t v84 = p_s->u8[4];
                uint64_t v85 = p_s->u8[7];
                uint64_t v86 = p_s->u8[6];
              }
              uint64_t v205 = p_s->u8[14];
              uint64_t v416 = p_s->u8[15];
              uint64_t v414 = p_s->u8[12];
              uint64_t v415 = p_s->u8[13];
              uint64_t v412 = p_s->u8[10];
              uint64_t v413 = p_s->u8[11];
              uint64_t v410 = p_s->u8[8];
              uint64_t v411 = p_s->u8[9];
              uint64_t v408 = v85;
              uint64_t v409 = v86;
              uint64_t v406 = v83;
              uint64_t v407 = v84;
              uint64_t v404 = v81;
              unint64_t v405 = (unint64_t)v82;
              v50 = &__str;
              LODWORD(v41) = SNPrintF((uint64_t)&__str, 300, (uint64_t)"%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x", v415, v205, v416, a7, a8, v80);
              int v37 = 85;
              goto LABEL_765;
            case 'V':
              v87 = (uint64_t *)v421[0];
              v421[0] += 8;
              uint64_t v88 = *v87;
              v421[0] = v87 + 2;
              if ((v22 & 0x10) != 0) {
                goto LABEL_770;
              }
              int v37 = 86;
              LODWORD(v41) = 4;
              if (!v88) {
                goto LABEL_371;
              }
              v89 = (void *)v87[1];
              if (!v89) {
                goto LABEL_371;
              }
              uint64_t v64 = PrintFCoreVAList(v9, v88, *v89);
              goto LABEL_376;
            case 'X':
              goto LABEL_176;
            case 'a':
              v90 = (char **)v421[0];
              v421[0] += 8;
              if ((v22 & 0x10) != 0) {
                goto LABEL_770;
              }
              v91 = *v90;
              if (!*v90)
              {
                int v37 = 97;
                goto LABEL_370;
              }
              v92 = (unsigned __int8 *)(v91 + 4);
              if (v20 == 2)
              {
                unsigned int v206 = v91[1];
                if (v206 > 0x11)
                {
                  if (v206 != 18)
                  {
                    if (v206 == 30)
                    {
                      v92 = (unsigned __int8 *)(v91 + 8);
                      if (v19)
                      {
                        _PrintFObfuscateIPv6(v92, (uint64_t)__format);
                        v92 = (unsigned __int8 *)__format;
                      }
                      unsigned int v224 = *((_DWORD *)v91 + 6);
                      unsigned int v225 = bswap32(*((unsigned __int16 *)v91 + 1)) >> 16;
LABEL_736:
                      IPv6AddressToCString(v92, v224, v225, 0xFFFFFFFF, &__str, 0);
LABEL_737:
                      LODWORD(v41) = strlen(&__str);
                      goto LABEL_788;
                    }
                    goto LABEL_645;
                  }
                  v313 = (unsigned __int8 *)&v91[v91[5] + 8];
                  if (v91[6] != 6)
                  {
                    uint64_t v404 = v91[6];
                    int v314 = SNPrintF((uint64_t)&__str, 300, (uint64_t)"<< AF_LINK %H >>", a4, a5, a6, a7, a8, (uint64_t)v313);
                    goto LABEL_787;
                  }
                  if (v19)
                  {
                    _PrintFObfuscateHardwareAddress((unsigned __int8 *)&v91[v91[5] + 8], 6uLL, __format);
                    v313 = (unsigned __int8 *)__format;
                  }
                  uint64_t v406 = v313[4];
                  uint64_t v407 = v313[5];
                  uint64_t v404 = v313[2];
                  unint64_t v405 = v313[3];
                  uint64_t usedBufLen = *v313;
                  goto LABEL_785;
                }
                if (v91[1])
                {
                  if (v206 == 2)
                  {
                    if (v19)
                    {
                      _PrintFObfuscateIPv4(v92, __format);
                      v92 = (unsigned __int8 *)__format;
                    }
                    IPv4AddressToCString(bswap32(*(_DWORD *)v92), bswap32(*((unsigned __int16 *)v91 + 1)) >> 16, &__str);
                    goto LABEL_737;
                  }
LABEL_645:
                  int v314 = SNPrintF((uint64_t)&__str, 300, (uint64_t)"<< ERROR: %%##a used with unknown family: %d >>", a4, a5, a6, a7, a8, v91[1]);
                  goto LABEL_787;
                }
                v312 = "<< AF_UNSPEC >>";
              }
              else
              {
                if (v20 != 1)
                {
                  *((void *)&v207 + 1) = v30;
                  *(void *)&long long v207 = v30 - 2;
                  switch((unint64_t)(v207 >> 1))
                  {
                    case 0uLL:
                      unsigned int v208 = v91[1];
                      uint64_t v404 = v208 >> 4;
                      unint64_t v405 = v208 & 0xF;
                      uint64_t usedBufLen = *v91 >> 4;
                      goto LABEL_779;
                    case 1uLL:
                      if (v19)
                      {
                        _PrintFObfuscateIPv4((unsigned __int8 *)v91, __format);
                        v91 = __format;
                      }
                      uint64_t v273 = *v91;
                      uint64_t v274 = v91[2];
                      unint64_t v275 = v91[3];
                      goto LABEL_778;
                    case 2uLL:
                      if (v19)
                      {
                        _PrintFObfuscateHardwareAddress((unsigned __int8 *)v91, 6uLL, __format);
                        v91 = __format;
                      }
                      uint64_t v320 = *v91;
                      uint64_t v321 = v91[2];
                      unint64_t v322 = v91[3];
                      uint64_t v323 = v91[4];
                      uint64_t v324 = v91[5];
                      goto LABEL_784;
                    case 3uLL:
                      if (v19)
                      {
                        _PrintFObfuscateHardwareAddress((unsigned __int8 *)v91, 8uLL, __format);
                        v91 = __format;
                      }
                      uint64_t v408 = v91[6];
                      uint64_t v409 = v91[7];
                      uint64_t v406 = v91[4];
                      uint64_t v407 = v91[5];
                      uint64_t v404 = v91[2];
                      unint64_t v405 = v91[3];
                      int v314 = SNPrintF((uint64_t)&__str, 300, (uint64_t)"%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X", a4, a5, a6, a7, a8, *v91);
                      goto LABEL_787;
                    case 7uLL:
                      if (v19)
                      {
                        _PrintFObfuscateIPv6((unsigned __int8 *)v91, (uint64_t)__format);
                        v91 = __format;
                      }
                      v92 = (unsigned __int8 *)v91;
                      goto LABEL_735;
                    default:
                      int v314 = SNPrintF((uint64_t)&__str, 300, (uint64_t)"%s", a4, a5, a6, a7, a8, (uint64_t)"<< ERROR: Must specify address size (i.e. %.4a=IPv4, %.6a=Enet, %.8a=Fibre, %.16a=IPv6) >>");
                      goto LABEL_787;
                  }
                }
                if (v30 == 6)
                {
                  if (v19)
                  {
                    if (v91 == __format)
                    {
                      v356 = &__format[5];
                      v355 = &__format[1];
                      do
                      {
                        char v357 = *(v355 - 1);
                        *(v355 - 1) = *v356;
                        *v356-- = v357;
                        BOOL v76 = v355++ >= v356;
                      }
                      while (!v76);
                    }
                    else
                    {
                      v270 = v91 + 6;
                      v271 = __format;
                      do
                      {
                        char v272 = *--v270;
                        *v271++ = v272;
                      }
                      while (v270 > v91);
                    }
                    _PrintFObfuscateHardwareAddress((unsigned __int8 *)__format, 6uLL, __format);
                    uint64_t v320 = __format[0];
                    uint64_t v321 = __format[2];
                    unint64_t v322 = __format[3];
                    uint64_t v323 = __format[4];
                    uint64_t v324 = __format[5];
                  }
                  else
                  {
                    uint64_t v320 = v91[5];
                    uint64_t v321 = v91[3];
                    unint64_t v322 = v91[2];
                    uint64_t v323 = v91[1];
                    uint64_t v324 = *v91;
                  }
LABEL_784:
                  uint64_t v406 = v323;
                  uint64_t v407 = v324;
                  uint64_t v404 = v321;
                  unint64_t v405 = v322;
                  uint64_t usedBufLen = v320;
LABEL_785:
                  v312 = "%02X:%02X:%02X:%02X:%02X:%02X";
                  goto LABEL_786;
                }
                if (v30 == 4)
                {
                  v93 = __format;
                  if (v19)
                  {
                    if (v91 == __format)
                    {
                      v352 = &__format[1];
                      v353 = &__format[3];
                      do
                      {
                        char v354 = *(v352 - 1);
                        *(v352 - 1) = *v353;
                        *v353-- = v354;
                        BOOL v76 = v352++ >= v353;
                      }
                      while (!v76);
                    }
                    else
                    {
                      do
                      {
                        char v94 = *--v92;
                        *v93++ = v94;
                      }
                      while (v92 > (unsigned __int8 *)v91);
                    }
                    _PrintFObfuscateIPv4((unsigned __int8 *)__format, __format);
                    uint64_t v273 = __format[0];
                    uint64_t v274 = __format[2];
                    unint64_t v275 = __format[3];
                  }
                  else
                  {
                    uint64_t v273 = v91[3];
                    uint64_t v274 = v91[1];
                    unint64_t v275 = *v91;
                  }
                }
                else
                {
                  if (*(_DWORD *)v91 == 6)
                  {
                    if (v19)
                    {
                      _PrintFObfuscateIPv6(v92, (uint64_t)__format);
                      v92 = (unsigned __int8 *)__format;
                    }
LABEL_735:
                    unsigned int v224 = 0;
                    unsigned int v225 = 0;
                    goto LABEL_736;
                  }
                  if (*(_DWORD *)v91 != 4)
                  {
                    int v314 = SNPrintF((uint64_t)&__str, 300, (uint64_t)"<< ERROR: %%#a used with unsupported type: %d >>", a4, a5, a6, a7, a8, *(unsigned int *)v91);
                    goto LABEL_787;
                  }
                  if (v19)
                  {
                    _PrintFObfuscateIPv4(v92, __format);
                    v92 = (unsigned __int8 *)__format;
                  }
                  uint64_t v273 = *v92;
                  uint64_t v274 = v92[2];
                  unint64_t v275 = v92[3];
                }
LABEL_778:
                uint64_t v404 = v274;
                unint64_t v405 = v275;
                uint64_t usedBufLen = v273;
LABEL_779:
                v312 = "%u.%u.%u.%u";
              }
LABEL_786:
              int v314 = SNPrintF((uint64_t)&__str, 300, (uint64_t)v312, a4, a5, a6, a7, a8, usedBufLen);
LABEL_787:
              LODWORD(v41) = v314;
LABEL_788:
              int v37 = 97;
LABEL_77:
              v50 = &__str;
              goto LABEL_765;
            case 'b':
              unsigned int v38 = 2;
              goto LABEL_177;
            case 'c':
              v95 = (int *)v421[0];
              v421[0] += 8;
              if ((v22 & 0x10) != 0) {
                goto LABEL_770;
              }
              int v96 = *v95;
              if (!v21)
              {
                char __str = *v95;
                int v37 = 99;
                goto LABEL_373;
              }
              char __str = 39;
              if (v96) {
                char v97 = 94;
              }
              else {
                char v97 = 46;
              }
              if ((v96 - 32) >= 0x5F) {
                char v98 = v97;
              }
              else {
                char v98 = v96;
              }
              v427[0] = v98;
              v427[1] = 39;
              int v37 = 99;
              LODWORD(v41) = 3;
              goto LABEL_77;
            case 'd':
            case 'i':
              if (v33 == 1 || v33 == 2)
              {
                v48 = (unint64_t *)v421[0];
                v421[0] += 8;
                unint64_t v49 = *v48;
              }
              else
              {
                v134 = (int *)v421[0];
                v421[0] += 8;
                unint64_t v49 = *v134;
              }
              if (v32 == 1) {
                unint64_t v49 = (__int16)v49;
              }
              if (v32 == 2) {
                unint64_t v108 = (char)v49;
              }
              else {
                unint64_t v108 = v49;
              }
              if ((v108 & 0x8000000000000000) != 0)
              {
                unint64_t v108 = -(uint64_t)v108;
                unsigned int v38 = 10;
                char v106 = 45;
                int v18 = 45;
              }
              else
              {
                unsigned int v38 = 10;
                if ((v22 & 2) == 0)
                {
                  v39 = "0123456789ABCDEF";
                  if ((v22 & 0x10) != 0) {
                    goto LABEL_691;
                  }
                  goto LABEL_226;
                }
                int v18 = 45;
                char v106 = 43;
              }
LABEL_224:
              v39 = "0123456789ABCDEF";
LABEL_225:
              BYTE4(v419) = v106;
              if ((v22 & 0x10) != 0)
              {
LABEL_691:
                uint64_t v9 = a1;
                goto LABEL_770;
              }
LABEL_226:
              if (v38 == 2 && v20 >= 2)
              {
                *(void *)__format = &__str;
                if ((v22 & 8) == 0)
                {
                  if (v32 == 1)
                  {
                    size_t v30 = 16;
                  }
                  else if (v32 == 2)
                  {
                    size_t v30 = 8;
                  }
                  else if (((v33 - 1) & 0xFE) != 0)
                  {
                    size_t v30 = 32;
                  }
                  else
                  {
                    size_t v30 = 64;
                  }
LABEL_286:
                  *(void *)&long long v420 = v30;
                  goto LABEL_287;
                }
                if (v30 < 0x41)
                {
                  if (!v30)
                  {
                    size_t v30 = 1;
                    goto LABEL_286;
                  }
LABEL_287:
                  if (v20 == 2)
                  {
                    uint64_t v149 = (v30 - 1);
                    do
                    {
                      if ((v108 >> v149))
                      {
                        v150 = "";
                        if (*(char **)__format != &__str) {
                          v150 = " ";
                        }
                        SNPrintF_Add((uint64_t *)__format, (uint64_t)v429, (uint64_t)"%s%d", a4, a5, a6, a7, a8, (uint64_t)v150);
                      }
                      BOOL v182 = v149-- <= 0;
                    }
                    while (!v182);
                  }
                  else
                  {
                    int v151 = 0;
                    do
                    {
                      if ((v108 >> (v30 - 1)))
                      {
                        v152 = "";
                        if (*(char **)__format != &__str) {
                          v152 = " ";
                        }
                        SNPrintF_Add((uint64_t *)__format, (uint64_t)v429, (uint64_t)"%s%d", a4, a5, a6, a7, a8, (uint64_t)v152);
                      }
                      ++v151;
                      --v30;
                    }
                    while (v30);
                  }
                }
                else
                {
                  SNPrintF_Add((uint64_t *)__format, (uint64_t)v429, (uint64_t)"ERROR: << precision must be 0-%d >>", a4, a5, a6, a7, a8, 64);
                }
                v50 = &__str;
                LODWORD(v41) = *(_DWORD *)__format - &__str;
                goto LABEL_303;
              }
              if ((v22 & 8) != 0) {
                goto LABEL_245;
              }
              if ((v22 & 4) != 0)
              {
                unsigned int v135 = 2 * (v38 != 10);
                if (v38 == 8) {
                  unsigned int v135 = 1;
                }
                if (!v20) {
                  unsigned int v135 = 0;
                }
                if (v18) {
                  ++v135;
                }
                BOOL v76 = v25 >= v135;
                unsigned int v136 = v25 - v135;
                if (v76) {
                  size_t v30 = v136;
                }
                else {
                  size_t v30 = 0;
                }
                *(void *)&long long v420 = v30;
              }
              if (v30)
              {
LABEL_245:
                if (v30 < 0x12C) {
                  goto LABEL_259;
                }
                size_t v30 = 299;
              }
              else
              {
                size_t v30 = 1;
              }
              *(void *)&long long v420 = v30;
LABEL_259:
              if (v21)
              {
                int v141 = 0;
                int v142 = -1;
                unsigned int v143 = 1;
                for (i = v429; ; i = v50)
                {
                  if (HIDWORD(v108))
                  {
                    unint64_t v145 = v108 / v38;
                    *(i - 1) = v39[v108 % v38];
                    v50 = i - 1;
                    LODWORD(v41) = v141 + 1;
                  }
                  else
                  {
                    unint64_t v145 = v108 / v38;
                    *(i - 1) = v39[v108 % v38];
                    v50 = i - 1;
                    LODWORD(v41) = v141 + 1;
                    if (v38 > v108)
                    {
                      LODWORD(v30) = v420;
                      goto LABEL_310;
                    }
                  }
                  unint64_t v108 = v145;
                  if (!(v142 + 3 * (v143 / 3)))
                  {
                    *(i - 2) = 44;
                    LODWORD(v41) = v141 + 2;
                    v50 = i - 2;
                  }
                  --v142;
                  ++v143;
                  int v141 = v41;
                }
              }
              if (v108)
              {
                uint64_t v146 = 0;
                do
                {
                  if (HIDWORD(v108)) {
                    int v147 = v108 % v38;
                  }
                  else {
                    int v147 = v108 % v38;
                  }
                  if (HIDWORD(v108)) {
                    v108 /= v38;
                  }
                  else {
                    unint64_t v108 = v108 / v38;
                  }
                  v428[v146-- + 45] = v39[v147];
                }
                while (v108);
                v50 = &v429[v146];
                LODWORD(v41) = -(int)v146;
              }
              else
              {
                LODWORD(v41) = 0;
                v50 = v429;
              }
LABEL_310:
              uint64_t v9 = a1;
              if ((int)v41 < (int)v30)
              {
                do
                {
                  *--v50 = 48;
                  LODWORD(v41) = v41 + 1;
                }
                while ((int)v41 < (int)v420);
              }
              if (!BYTE3(v419)) {
                goto LABEL_318;
              }
              if (v38 == 8)
              {
                int v155 = 1;
                uint64_t v156 = -1;
              }
              else
              {
                if (v38 == 10) {
                  goto LABEL_318;
                }
                *(v50 - 1) = v37;
                int v155 = 2;
                uint64_t v156 = -2;
              }
              v50 += v156;
              char *v50 = 48;
              LODWORD(v41) = v155 + v41;
LABEL_318:
              if (BYTE4(v419))
              {
                *--v50 = BYTE4(v419);
                LODWORD(v41) = v41 + 1;
              }
              goto LABEL_765;
            case 'm':
              v99 = (_DWORD *)v421[0];
              v421[0] += 8;
              if ((v22 & 0x10) != 0) {
                goto LABEL_770;
              }
              uint64_t v100 = *v99;
              if (v20)
              {
                if ((v100 - 0x20000000) >> 24 > 0x5E
                  || BYTE2(v100) - 32 > 0x5E
                  || BYTE1(v100) - 32 > 0x5E
                  || *v99 - 32 > 0x5E)
                {
                  BOOL v101 = v20 == 2;
                  v102 = "%d/0x%X ";
                  v103 = "%-11d    0x%08X    '^^^^'    ";
                }
                else
                {
                  BOOL v101 = v20 == 2;
                  v102 = "%d/0x%X/'%C' ";
                  v103 = "%-11d    0x%08X    '%C'    ";
                }
                if (v101) {
                  uint64_t v153 = (uint64_t)v103;
                }
                else {
                  uint64_t v153 = (uint64_t)v102;
                }
                uint64_t v404 = v100;
                int v154 = SNPrintF((uint64_t)&__str, 300, v153, a4, a5, a6, a7, a8, v100);
              }
              else
              {
                int v154 = 0;
              }
              DebugGetErrorStringEx(0, v100, &v427[v154 - 1], 300 - v154);
              size_t v183 = strlen(&__str);
              uint64_t v64 = PrintFWriteText((uint64_t (**)(const char *, uint64_t, void))v9, (uint64_t)&v419, &__str, v183);
              goto LABEL_376;
            case 'n':
              v104 = (unsigned char **)v421[0];
              v421[0] += 8;
              v105 = *v104;
              if (v32 == 2)
              {
                unsigned char *v105 = v10;
                goto LABEL_770;
              }
              if (v32 == 1)
              {
                *(_WORD *)v105 = v10;
                goto LABEL_770;
              }
              if (v33 == 2)
              {
                uint64_t v148 = (int)v10;
              }
              else
              {
                if (v33 != 1)
                {
                  *(_DWORD *)v105 = v10;
                  goto LABEL_770;
                }
                uint64_t v148 = (int)v10;
              }
              *(void *)v105 = v148;
              goto LABEL_770;
            case 'o':
              unsigned int v38 = 8;
              goto LABEL_177;
            case 'p':
              char v106 = 0;
              int v18 = 0;
              v107 = (unint64_t *)v421[0];
              v421[0] += 8;
              unint64_t v108 = *v107;
              size_t v30 = 16;
              *(void *)&long long v420 = 16;
              LOBYTE(v22) = v22 | 8;
              LOBYTE(v419) = v22;
              char v20 = 1;
              BYTE3(v419) = 1;
              int v37 = 120;
              unsigned int v38 = 16;
              goto LABEL_224;
            case 's':
              v109 = (const char **)v421[0];
              v421[0] += 8;
              if ((v22 & 0x10) != 0) {
                goto LABEL_770;
              }
              v50 = (char *)*v109;
              if (!*v109)
              {
                int v37 = 115;
                LODWORD(v41) = 4;
                if ((v22 & 8) == 0 || v30) {
                  goto LABEL_371;
                }
              }
              if (v19)
              {
                if ((v22 & 8) == 0) {
                  size_t v30 = strlen(*v109);
                }
                _PrintFObfuscateString((unint64_t)v50, v30, &__s, 0);
                char v21 = BYTE8(v420);
                v50 = (char *)&__s;
              }
              if (v21 && (v419 & 8) != 0)
              {
                if ((unint64_t)v420 < 2)
                {
                  *(void *)&long long v420 = 0;
                  BYTE8(v420) = 0;
                }
                else
                {
                  *(void *)&long long v420 = v420 - 2;
                }
              }
              switch(BYTE3(v419))
              {
                case 0:
                  if ((v419 & 8) != 0)
                  {
                    int v252 = v420;
                    if ((int)v420 < 1) {
                      goto LABEL_704;
                    }
                    uint64_t v253 = 0;
                    while (v50[v253])
                    {
                      if (v420 == ++v253) {
                        goto LABEL_694;
                      }
                    }
                    int v252 = v253;
LABEL_694:
                    if (v252)
                    {
                      int v329 = 0;
                      int v330 = v252;
                      uint64_t v331 = (v252 - 1);
                      do
                      {
                        int v332 = v50[v331];
                        if ((v332 & 0x80) == 0) {
                          break;
                        }
                        ++v329;
                        int v333 = v330--;
                        if (v333 < 2) {
                          break;
                        }
                        --v331;
                      }
                      while ((v332 & 0xC0) == 0x80);
                      unsigned int v334 = v329 - 2;
                      if ((((255 << (8 - v329)) | (1 << (7 - v329))) & v332) != (255 << (8 - v329))) {
                        int v329 = 0;
                      }
                      int v335 = v329 + v330;
                      if (v334 <= 4) {
                        LODWORD(v41) = v335;
                      }
                      else {
                        LODWORD(v41) = v330;
                      }
                    }
                    else
                    {
LABEL_704:
                      LODWORD(v41) = 0;
                    }
                  }
                  else
                  {
                    uint64_t v212 = 0;
                    do
                      LODWORD(v41) = v212;
                    while (v50[v212++]);
                  }
                  goto LABEL_751;
                case 1:
                  int v214 = *v50++;
                  LODWORD(v41) = v214;
                  goto LABEL_751;
                case 2:
                  *(void *)__format = &__str;
                  uint64_t v215 = *v50;
                  if (*v50 || (*(void *)__format = v427, __str = 46, uint64_t v215 = *v50, *v50))
                  {
                    while (1)
                    {
                      if (v215 >= 0x40)
                      {
                        SNPrintF_Add((uint64_t *)__format, (uint64_t)v429, (uint64_t)"<<INVALID DNS LABEL LENGTH %u>>", a4, a5, a6, a7, a8, v215);
                        goto LABEL_624;
                      }
                      if (*(void *)__format + (unint64_t)v215 >= (unint64_t)v428) {
                        break;
                      }
                      SNPrintF_Add((uint64_t *)__format, (uint64_t)v429, (uint64_t)"%#s.", a4, a5, a6, a7, a8, (uint64_t)v50);
                      v216 = &v50[*v50];
                      unsigned int v217 = v216[1];
                      v50 = v216 + 1;
                      uint64_t v215 = v217;
                      if (!v217) {
                        goto LABEL_624;
                      }
                    }
                    SNPrintF_Add((uint64_t *)__format, (uint64_t)v429, (uint64_t)"<<DNS NAME TOO LONG>>", a4, a5, a6, a7, a8, usedBufLen);
                  }
LABEL_624:
                  v50 = &__str;
                  LODWORD(v41) = *(_DWORD *)__format - &__str;
                  goto LABEL_751;
                case 3:
                  int v218 = *v50;
                  if (v218 == 43 || v218 == 45)
                  {
                    LODWORD(v219) = v50 + strlen(v50);
                    goto LABEL_750;
                  }
                  v298 = v50 + 1;
                  v299 = v50 + 1;
                  char v300 = *v50;
                  v301 = v50;
                  break;
                default:
                  v50 = &__str;
                  LODWORD(v41) = SNPrintF((uint64_t)&__str, 300, (uint64_t)"<< ERROR: %%s with too many #'s (%d) >>", a4, a5, a6, a7, a8, SBYTE3(v419));
                  goto LABEL_751;
              }
              while (2)
              {
                if (v300 == 32)
                {
                  v301 = v299;
LABEL_610:
                  char v302 = *v299++;
                  char v300 = v302;
                  continue;
                }
                break;
              }
              if (!v300) {
                goto LABEL_677;
              }
              if (v300 != 58) {
                goto LABEL_610;
              }
              v326 = v299 - 1;
              if (v326[1] != 58)
              {
                while (1)
                {
LABEL_677:
                  if (v218 == 32)
                  {
                    v50 = v298;
                  }
                  else if (!(_BYTE)v218 || v218 == 40)
                  {
                    v219 = v298 - 1;
                    goto LABEL_681;
                  }
                  char v327 = *v298++;
                  LOBYTE(v218) = v327;
                }
              }
              v219 = v326 + 2;
              v50 = v301;
LABEL_681:
              while (1)
              {
                int v328 = *v219;
                if (!*v219 || v328 == 32) {
                  break;
                }
                if (v328 == 40)
                {
                  if (v219[1] == 41)
                  {
                    v347 = (unsigned __int8 *)(v219 + 2);
                    int v348 = v219[2];
                    uint64_t v349 = 3;
                    if (v348 != 39) {
                      uint64_t v349 = 0;
                    }
                    v219 += v349;
                    if (v348 == 40) {
                      v219 = (char *)v347;
                    }
                  }
                  break;
                }
                ++v219;
              }
              if (v50 < v219 && *v50 == 42) {
                ++v50;
              }
LABEL_750:
              LODWORD(v41) = v219 - v50;
LABEL_751:
              if ((v419 & 8) != 0 && (int)v41 > (int)v420)
              {
                LODWORD(v41) = v420;
                if ((int)v420 >= 1)
                {
                  uint64_t v41 = v420;
                  while ((v50[v41] & 0xC0) == 0x80)
                  {
                    BOOL v182 = v41-- <= 1;
                    if (v182)
                    {
                      LODWORD(v41) = 0;
                      break;
                    }
                  }
                }
              }
              if (BYTE8(v420) == 2)
              {
                __int16 v350 = 8738;
              }
              else
              {
                if (BYTE8(v420) != 1) {
                  goto LABEL_764;
                }
                __int16 v350 = 10023;
              }
              *(_WORD *)((char *)&v420 + 9) = v350;
LABEL_764:
              int v37 = 115;
              goto LABEL_765;
            case 'u':
              goto LABEL_177;
            case 'v':
              v110 = (unsigned int *)v421[0];
              v421[0] += 8;
              if ((v22 & 0x10) != 0) {
                goto LABEL_770;
              }
              unsigned int v111 = *v110;
              int v112 = HIWORD(*v110) & 0xF;
              *(void *)__format = &__str;
              SNPrintF_Add((uint64_t *)__format, (uint64_t)v429, (uint64_t)"%u", a4, a5, a6, a7, a8, HIBYTE(v111));
              SNPrintF_Add((uint64_t *)__format, (uint64_t)v429, (uint64_t)".%u", v113, v114, v115, v116, v117, (v111 >> 20) & 0xF);
              if (v112) {
                SNPrintF_Add((uint64_t *)__format, (uint64_t)v429, (uint64_t)".%u", v118, v119, v120, v121, v122, HIWORD(v111) & 0xF);
              }
              HIDWORD(v123) = v111 >> 8;
              LODWORD(v123) = ((v111 >> 8) & 0xE0) - 32;
              switch((v123 >> 5))
              {
                case 0u:
                  SNPrintF_Add((uint64_t *)__format, (uint64_t)v429, (uint64_t)"d%u", v118, v119, v120, v121, v122, v111);
                  break;
                case 1u:
                  SNPrintF_Add((uint64_t *)__format, (uint64_t)v429, (uint64_t)"a%u", v118, v119, v120, v121, v122, v111);
                  break;
                case 2u:
                  SNPrintF_Add((uint64_t *)__format, (uint64_t)v429, (uint64_t)"b%u", v118, v119, v120, v121, v122, v111);
                  break;
                case 3u:
                  if ((_BYTE)v111) {
                    SNPrintF_Add((uint64_t *)__format, (uint64_t)v429, (uint64_t)"f%u", v118, v119, v120, v121, v122, v111);
                  }
                  break;
                default:
                  SNPrintF_Add((uint64_t *)__format, (uint64_t)v429, (uint64_t)"<< ERROR: invalid NumVersion stage: 0x%02X >>", v118, v119, v120, v121, v122, v111);
                  break;
              }
              v50 = &__str;
              LODWORD(v41) = *(_DWORD *)__format - &__str;
              int v37 = 118;
              goto LABEL_765;
            case 'x':
              v39 = "0123456789abcdef";
LABEL_176:
              unsigned int v38 = 16;
LABEL_177:
              if (v33 == 2 || v33 == 1)
              {
                v124 = (unint64_t *)v421[0];
                v421[0] += 8;
                unint64_t v125 = *v124;
              }
              else
              {
                v126 = (unsigned int *)v421[0];
                v421[0] += 8;
                unint64_t v125 = *v126;
              }
              unint64_t v127 = v125;
              unint64_t v128 = (unsigned __int16)v125;
              if (v32 != 1) {
                unint64_t v128 = v125;
              }
              char v106 = 0;
              int v18 = 0;
              if (v32 == 2) {
                unint64_t v108 = v127;
              }
              else {
                unint64_t v108 = v128;
              }
              goto LABEL_225;
            case '{':
              v129 = ++v13;
              while (1)
              {
                int v37 = *v13;
                if (!*v13 || v37 == 125) {
                  break;
                }
                ++v13;
              }
              if (!strnicmpx(v129, v13 - v129, "asbd"))
              {
                uint64_t v137 = v421[0];
                v421[0] += 8;
                if ((v419 & 0x10) != 0) {
                  goto LABEL_768;
                }
                v138 = *(_DWORD **)v137;
                uint64_t v139 = *(unsigned int *)(*(void *)v137 + 8);
                if ((int)v139 <= 1634492770)
                {
                  if (v139 == 1633772320)
                  {
                    v140 = "AAC,";
                  }
                  else
                  {
                    v140 = "ELD,";
                    if (v139 != 1633772389) {
                      goto LABEL_425;
                    }
                  }
                }
                else
                {
                  switch(v139)
                  {
                    case 0x616C6163:
                      v140 = "ALAC,";
                      break;
                    case 0x6C70636D:
                      v140 = "PCM,";
                      break;
                    case 0x6F707573:
                      v140 = "Opus,";
                      break;
                    default:
LABEL_425:
                      v140 = __format;
                      SNPrintF((uint64_t)__format, 32, (uint64_t)"%C,", a4, a5, a6, a7, a8, v139);
                      break;
                  }
                }
                uint64_t v41 = PrintFCore((uint64_t)v9, (uint64_t)"%-5s %5u Hz", v130, a4, a5, a6, a7, a8, (uint64_t)v140);
                if ((v41 & 0x80000000) != 0) {
                  return v41;
                }
                if (v138[8])
                {
                  uint64_t v17 = PrintFCore((uint64_t)v9, (uint64_t)", %2u-bit", v276, v277, v278, v279, v280, v281, v138[8]);
                  goto LABEL_566;
                }
                if (v138[2] == 1634492771)
                {
                  unsigned int v282 = v138[3] - 1;
                  v283 = "??-bit";
                  if (v282 <= 3) {
                    v283 = off_1E55BF9B0[v282];
                  }
                  uint64_t v17 = PrintFCore((uint64_t)v9, (uint64_t)", %s", v276, v277, v278, v279, v280, v281, (uint64_t)v283);
LABEL_566:
                  if ((v17 & 0x80000000) != 0) {
                    return v17;
                  }
                  LODWORD(v41) = v17 + v41;
                }
                int v284 = v138[7];
                if (v284 == 1)
                {
                  v285 = "Mono";
                }
                else if (v284 == 2)
                {
                  v285 = "Stereo";
                }
                else
                {
                  v285 = __format;
                  SNPrintF((uint64_t)__format, 32, (uint64_t)"%u ch", v277, v278, v279, v280, v281, v138[7]);
                }
                uint64_t v17 = PrintFCore((uint64_t)v9, (uint64_t)", %s", v276, v277, v278, v279, v280, v281, (uint64_t)v285);
                if ((v17 & 0x80000000) != 0) {
                  return v17;
                }
                int v287 = v17 + v41;
                if ((v138[3] & 0x20) != 0)
                {
                  uint64_t v288 = PrintFCore((uint64_t)v9, (uint64_t)", Non-interleaved", v286, a4, a5, a6, a7, a8, usedBufLen);
                  uint64_t v41 = v288;
                  if ((v288 & 0x80000000) != 0) {
                    return v41;
                  }
                  v287 += v288;
                }
                if (v138[2] == 1819304813)
                {
                  int v289 = v138[3];
                  if ((v289 & 2) != 0)
                  {
                    uint64_t v290 = PrintFCore((uint64_t)v9, (uint64_t)", Swapped", v286, a4, a5, a6, a7, a8, usedBufLen);
                    uint64_t v41 = v290;
                    if ((v290 & 0x80000000) != 0) {
                      return v41;
                    }
                    v287 += v290;
                    int v289 = v138[3];
                  }
                  if (v289)
                  {
                    uint64_t v293 = PrintFCore((uint64_t)v9, (uint64_t)", Float", v286, a4, a5, a6, a7, a8, usedBufLen);
LABEL_587:
                    uint64_t v41 = v293;
                    if ((v293 & 0x80000000) != 0) {
                      return v41;
                    }
                    v287 += v293;
                  }
                  else if ((v289 & 4) != 0)
                  {
                    int v291 = v138[8];
                    if (v291)
                    {
                      unsigned int v292 = v289 & 0x1F80;
                      if (v292)
                      {
                        uint64_t v293 = PrintFCore((uint64_t)v9, (uint64_t)", %u.%u", v286, a4, a5, a6, a7, a8, v291 - (v292 >> 7));
                        goto LABEL_587;
                      }
                    }
                  }
                }
                if (v138[5] <= 1u)
                {
                  uint64_t v10 = (v287 + v10);
                  goto LABEL_768;
                }
                int v294 = PrintFCore((uint64_t)v9, (uint64_t)", %u samples/packet", v286, a4, a5, a6, a7, a8, v138[5]);
                if (v294 >= 0) {
                  int v295 = v287;
                }
                else {
                  int v295 = 0;
                }
                uint64_t v41 = (v295 + v294);
                if (v295 + v294 < 0) {
                  return v41;
                }
LABEL_767:
                uint64_t v10 = (v41 + v10);
                goto LABEL_768;
              }
              if (!strnicmpx(v129, v13 - v129, "cec"))
              {
                v167 = (unsigned __int8 **)v421[0];
                v421[0] += 8;
                v168 = *v167;
                v421[0] = v167 + 2;
                if ((v419 & 0x10) != 0) {
                  goto LABEL_768;
                }
                unsigned int v169 = *((_DWORD *)v167 + 2);
                if ((int)v169 >= 1)
                {
                  unsigned int v170 = *v168;
                  if (v169 == 1)
                  {
                    v171 = "<Poll>";
                    v172 = "";
                    goto LABEL_854;
                  }
                  v220 = v168 + 2;
                  unsigned int v221 = v168[1];
                  if (v221 > 0x7F)
                  {
                    switch(v168[1])
                    {
                      case 0x80u:
                        if (v169 < 6) {
                          goto LABEL_897;
                        }
                        v172 = (const char *)&v430;
                        SNPrintF((uint64_t)&v430, 32, (uint64_t)"%.2a -> %.2a", a4, a5, a6, a7, a8, (uint64_t)(v168 + 2));
                        v171 = "<Routing Change>";
                        break;
                      case 0x82u:
                        if (v169 < 4) {
                          goto LABEL_897;
                        }
                        v172 = (const char *)&v430;
                        SNPrintF((uint64_t)&v430, 32, (uint64_t)"%.2a", a4, a5, a6, a7, a8, (uint64_t)(v168 + 2));
                        v171 = "<Active Source>";
                        break;
                      case 0x83u:
                        v171 = "<Give Physical Address>";
                        goto LABEL_853;
                      case 0x84u:
                        v171 = "<Report Physical Address>";
                        goto LABEL_853;
                      case 0x85u:
                        v171 = "<Request Active Source>";
                        goto LABEL_853;
                      case 0x86u:
                        if (v169 < 4) {
                          goto LABEL_897;
                        }
                        v172 = (const char *)&v430;
                        SNPrintF((uint64_t)&v430, 32, (uint64_t)"%.2a", a4, a5, a6, a7, a8, (uint64_t)(v168 + 2));
                        v171 = "<Set Stream Path>";
                        break;
                      case 0x87u:
                        if (v169 < 5) {
                          goto LABEL_897;
                        }
                        v172 = (const char *)&v430;
                        SNPrintF((uint64_t)&v430, 32, (uint64_t)"%02X-%02X-%02X", a4, a5, a6, a7, a8, v168[2]);
                        v171 = "<Device Vendor ID>";
                        break;
                      case 0x8Cu:
                        v171 = "<Give Device Vendor ID>";
                        goto LABEL_853;
                      case 0x8Du:
                        v171 = "<Menu Request>";
                        goto LABEL_853;
                      case 0x8Eu:
                        v171 = "<Menu Status>";
                        goto LABEL_853;
                      case 0x8Fu:
                        v171 = "<Give Power Status>";
                        goto LABEL_853;
                      case 0x90u:
                        v171 = "<Report Power Status>";
                        goto LABEL_853;
                      case 0x9Du:
                        v171 = "<Inactive Source>";
                        goto LABEL_853;
                      case 0x9Eu:
                        if (v169 < 3) {
                          goto LABEL_897;
                        }
                        if (*v220 - 4 >= 3)
                        {
                          v172 = (const char *)&v430;
                          SNPrintF((uint64_t)&v430, 32, (uint64_t)"Other %H", a4, a5, a6, a7, a8, (uint64_t)(v168 + 2));
                        }
                        else
                        {
                          v172 = off_1E55BF9D0[(*v220 - 4)];
                        }
                        v171 = "<CEC Version>";
                        break;
                      case 0x9Fu:
                        v171 = "<Get CEC Version>";
                        goto LABEL_853;
                      case 0xA0u:
                        v171 = "<Vendor Command with ID>";
                        goto LABEL_853;
                      default:
                        goto LABEL_850;
                    }
                    goto LABEL_854;
                  }
                  if (v168[1] > 0x31u)
                  {
                    switch(v168[1])
                    {
                      case 'D':
                        v171 = "<User Control Pressed>";
                        break;
                      case 'E':
                        v171 = "<User Control Released>";
                        break;
                      case 'F':
                        v171 = "<Get OSD Name>";
                        break;
                      case 'G':
                        v172 = (const char *)&v430;
                        SNPrintF((uint64_t)&v430, 32, (uint64_t)"'%.*s'", a4, a5, a6, a7, a8, v169 - 2);
                        v171 = "<Set OSD Name>";
                        goto LABEL_854;
                      default:
                        if (v221 == 50)
                        {
                          v172 = (const char *)&v430;
                          SNPrintF((uint64_t)&v430, 32, (uint64_t)"'%.*s'", a4, a5, a6, a7, a8, v169 - 2);
                          v171 = "<Set Menu Language>";
                          goto LABEL_854;
                        }
                        if (v221 != 54) {
                          goto LABEL_850;
                        }
                        v171 = "<Standby>";
                        break;
                    }
                  }
                  else if (v168[1] > 0xCu)
                  {
                    if (v221 == 13)
                    {
                      v171 = "<Text View On>";
                    }
                    else
                    {
                      if (v221 != 26) {
                        goto LABEL_850;
                      }
                      v171 = "<Give Deck Status>";
                    }
                  }
                  else if (v168[1])
                  {
                    v171 = "<Image View On>";
                    if (v221 != 4)
                    {
LABEL_850:
                      v171 = __format;
                      SNPrintF((uint64_t)__format, 32, (uint64_t)"<<? 0x%02X>>", a4, a5, a6, a7, a8, v168[1]);
                      v220 = v168 + 2;
                    }
                  }
                  else
                  {
                    v171 = "<Feature Abort>";
                  }
LABEL_853:
                  v172 = (const char *)&v430;
                  SNPrintF((uint64_t)&v430, 32, (uint64_t)"%H", a4, a5, a6, a7, a8, (uint64_t)v220);
LABEL_854:
                  v377 = "TV";
                  if (v170 >= 0x10)
                  {
                    v377 = "Broadcast";
                    if ((v170 >> 4) - 1 <= 0xD) {
                      v377 = off_1E55BF9E8[((v170 >> 4) - 1)];
                    }
                  }
                  uint64_t v404 = (uint64_t)v171;
                  unint64_t v405 = (unint64_t)v172;
                  int v378 = PrintFCore((uint64_t)a1, (uint64_t)"%-9s -> %9s: %s %s", v12, a4, a5, a6, a7, a8, (uint64_t)v377);
                  uint64_t v12 = 42;
                  if ((v378 & 0x80000000) == 0)
                  {
                    uint64_t v10 = (v378 + v10);
                    goto LABEL_769;
                  }
                }
LABEL_897:
                uint64_t v404 = 64;
                uint64_t v255 = PrintFCore((uint64_t)a1, (uint64_t)"<< MALFORMED CEC: %H >>", v12, a4, a5, a6, a7, a8, (uint64_t)v168);
                goto LABEL_766;
              }
              if (!strnicmpx(v129, v13 - v129, "DateCF"))
              {
                v184 = (double *)v421[0];
                v421[0] += 8;
                if ((v419 & 0x10) == 0)
                {
                  long double v185 = *v184;
                  uint64_t v186 = (uint64_t)*v184;
                  LODWORD(v430.tv_sec) = 0;
                  LODWORD(v422) = 0;
                  *(_DWORD *)v429 = 0;
                  uint64_t v424 = 0;
                  unsigned int v423 = 0;
                  SecondsToYMD_HMS(v186 + 0xEB1E31100, (int *)&v430, &v422, v429, (int *)&v424 + 1, (unsigned int *)&v424, &v423);
                  double v187 = modf(v185, (long double *)__format);
                  uint64_t v407 = v423;
                  uint64_t v408 = (int)(fabs(v187) * 1000.0);
                  unint64_t v405 = HIDWORD(v424);
                  uint64_t v406 = v424;
                  uint64_t v404 = *(unsigned int *)v429;
                  v50 = &__str;
                  int v52 = SNPrintF((uint64_t)&__str, 300, (uint64_t)"%04d-%02d-%02d-%02d:%02d:%02d.%03d", v188, v189, v190, v191, v192, LODWORD(v430.tv_sec));
LABEL_85:
                  LODWORD(v41) = v52;
                  goto LABEL_765;
                }
                goto LABEL_768;
              }
              if (!strnicmpx(v129, v13 - v129, "dur"))
              {
                if (BYTE2(v419) == 2 || BYTE2(v419) == 1)
                {
                  v210 = (unint64_t *)v421[0];
                  v421[0] += 8;
                  unint64_t v211 = *v210;
                }
                else
                {
                  v296 = (unsigned int *)v421[0];
                  v421[0] += 8;
                  unint64_t v211 = *v296;
                }
                if (BYTE1(v419) == 1) {
                  unint64_t v211 = (unsigned __int16)v211;
                }
                if (BYTE1(v419) == 2) {
                  unint64_t v297 = v211;
                }
                else {
                  unint64_t v297 = v211;
                }
                if ((v419 & 0x10) == 0)
                {
                  v50 = &__str;
                  int v52 = PrintFWriteTimeDuration(v297, SBYTE3(v419), &__str);
                  goto LABEL_85;
                }
                goto LABEL_768;
              }
              if (strnicmpx(v129, v13 - v129, "end"))
              {
                if (!strnicmpx(v129, v13 - v129, "error"))
                {
                  v254 = (void **)v421[0];
                  v421[0] += 8;
                  if ((v419 & 0x10) != 0) {
                    goto LABEL_768;
                  }
                  uint64_t v255 = PrintFWriteErrorObject((uint64_t)v9, *v254, v131, a4, a5, a6, a7, a8, usedBufLen);
                  goto LABEL_766;
                }
                if (!strnicmpx(v129, v13 - v129, "fill"))
                {
                  v307 = (int *)v421[0];
                  v421[0] += 8;
                  int v308 = *v307;
                  v421[0] = v307 + 4;
                  if ((v419 & 0x10) == 0)
                  {
                    int v309 = v307[2];
                    if (v309)
                    {
                      LODWORD(v41) = 0;
                      unint64_t v310 = v309;
                      while (1)
                      {
                        size_t v311 = v310 >= 0x12C ? 300 : v310;
                        memset(&__str, v308, v311);
                        uint64_t v17 = (*a1)(&__str, v311);
                        if ((v17 & 0x80000000) != 0) {
                          return v17;
                        }
                        uint64_t v41 = (v17 + v41);
                        v310 -= v311;
                        if (!v310) {
                          goto LABEL_638;
                        }
                      }
                    }
                  }
                  goto LABEL_768;
                }
                if (!strnicmpx(v129, v13 - v129, "flags"))
                {
                  if (BYTE2(v419) == 2 || BYTE2(v419) == 1)
                  {
                    v325 = (uint64_t *)v421[0];
                    v421[0] += 8;
                    a4 = *v325;
                  }
                  else
                  {
                    v369 = (unsigned int *)v421[0];
                    v421[0] += 8;
                    a4 = *v369;
                  }
                  if (BYTE1(v419) == 2)
                  {
                    a4 = a4;
                  }
                  else if (BYTE1(v419) == 1)
                  {
                    a4 = (unsigned __int16)a4;
                  }
                  v370 = (void **)v421[0];
                  v421[0] += 8;
                  if ((v419 & 0x10) == 0)
                  {
                    v371 = *v370;
                    if (v371) {
                      v372 = v371;
                    }
                    else {
                      v372 = &unk_18E418B54;
                    }
                    uint64_t v255 = PrintFWriteFlags((uint64_t)v9, SBYTE3(v419), (uint64_t)v372, a4, a5, a6, a7, a8);
LABEL_766:
                    uint64_t v41 = v255;
                    if ((v255 & 0x80000000) != 0) {
                      return v41;
                    }
                    goto LABEL_767;
                  }
LABEL_768:
                  uint64_t v12 = 42;
                  goto LABEL_769;
                }
                if (!strnicmpx(v129, v13 - v129, "mask"))
                {
                  v351 = (const __CFURL **)v421[0];
                  v421[0] += 8;
                  if ((v419 & 0x10) != 0) {
                    goto LABEL_768;
                  }
                  if (*v351)
                  {
                    uint64_t v255 = PrintFWriteMaskObject((uint64_t (**)(unsigned __int8 *, uint64_t, void))v9, *v351);
                    goto LABEL_766;
                  }
LABEL_370:
                  LODWORD(v41) = 4;
LABEL_371:
                  v50 = "NULL";
                  goto LABEL_765;
                }
                if (strnicmpx(v129, v13 - v129, "pid"))
                {
                  if (!strnicmpx(v129, v13 - v129, "ptr"))
                  {
                    v373 = (uint64_t *)v421[0];
                    v421[0] += 8;
                    if ((v419 & 0x10) == 0) {
                      uint64_t v10 = PrintFWriteObfuscatedPtr((uint64_t)v9, *v373, v132, a4, a5, a6, a7, a8)
                    }
                          + v10;
                    goto LABEL_768;
                  }
                  if (!strnicmpx(v129, v13 - v129, "sline"))
                  {
                    uint64_t v374 = v421[0];
                    v421[0] += 8;
                    v375 = *(char **)v374;
                    v421[0] = v374 + 16;
                    if ((v419 & 0x10) != 0) {
                      goto LABEL_768;
                    }
                    size_t v376 = *(void *)(v374 + 8);
                    if (v376 == -1) {
                      size_t v376 = strlen(v375);
                    }
                    uint64_t v255 = PrintFWriteSingleLineText((uint64_t (**)(unsigned __int8 *, int64_t, void))v9, (unsigned __int8 *)v375, v376, SBYTE3(v419));
                    goto LABEL_766;
                  }
                  if (!strnicmpx(v129, v13 - v129, "text"))
                  {
                    uint64_t v379 = v421[0];
                    v421[0] += 8;
                    v380 = *(char **)v379;
                    v421[0] = v379 + 16;
                    if ((v419 & 0x10) != 0) {
                      goto LABEL_768;
                    }
                    size_t v381 = *(void *)(v379 + 8);
                    if (v381 == -1) {
                      size_t v381 = strlen(v380);
                    }
                    uint64_t v255 = PrintFWriteMultiLineText((uint64_t (**)(unsigned __int8 *, int64_t, void))v9, (uint64_t)&v419, (unsigned __int8 *)v380, v381);
                    goto LABEL_766;
                  }
                  if (!strnicmpx(v129, v13 - v129, "tlv8"))
                  {
                    uint64_t v384 = v421[0];
                    v421[0] += 8;
                    v385 = *(const char **)v384;
                    v421[0] = v384 + 16;
                    a4 = *(void *)(v384 + 8);
                    v421[0] = v384 + 24;
                    if ((v419 & 0x10) != 0) {
                      goto LABEL_768;
                    }
                    if (v385) {
                      v386 = v385;
                    }
                    else {
                      v386 = (const char *)&unk_18E418B54;
                    }
                    uint64_t v255 = PrintFWriteTLV8((uint64_t)v9, (uint64_t)&v419, v386, (unsigned __int8 *)a4, *(int *)(v384 + 16));
                    goto LABEL_766;
                  }
                  if (!strnicmpx(v129, v13 - v129, "txt"))
                  {
                    v387 = (uint64_t *)v421[0];
                    v421[0] += 8;
                    a4 = *v387;
                    v421[0] = v387 + 2;
                    if ((v419 & 0x10) != 0) {
                      goto LABEL_768;
                    }
                    uint64_t v255 = PrintFWriteTXTRecord((uint64_t)v9, SBYTE3(v419), DWORD2(v419), (unsigned __int8 *)a4, v387[1], a6, a7, a8);
                    goto LABEL_766;
                  }
                  if (!strnicmpx(v129, v13 - v129, "xml"))
                  {
                    uint64_t v388 = v421[0];
                    v421[0] += 8;
                    v389 = *(char **)v388;
                    v421[0] = v388 + 16;
                    if ((v419 & 0x10) != 0) {
                      goto LABEL_768;
                    }
                    uint64_t v255 = PrintFWriteXMLEscaped((uint64_t (**)(char *, int64_t, void))a1, v389, *(void *)(v388 + 8), a4, a5, a6, a7, a8);
                    goto LABEL_766;
                  }
                  if (strnicmpx(v129, v13 - v129, "xpc"))
                  {
                    pthread_mutex_lock(&gPrintFUtilsLock);
                    v133 = &gExtensionList;
                    do
                    {
                      v133 = (uint64_t *)*v133;
                      if (!v133)
                      {
                        pthread_mutex_unlock(&gPrintFUtilsLock);
                        usedBufLena = (CFIndex *)(v13 - v129);
                        v50 = &__str;
                        int v52 = SNPrintF((uint64_t)&__str, 300, (uint64_t)"<<UNKNOWN PRINTF EXTENSION '%.*s'>>", v396, v397, v398, v399, v400, (uint64_t)usedBufLena);
                        goto LABEL_85;
                      }
                    }
                    while (strnicmpx(v129, v13 - v129, (unsigned char *)v133 + 24));
                    uint64_t v41 = ((uint64_t (*)(uint64_t (**)(const char *, uint64_t), long long *, void *, uint64_t))v133[1])(v9, &v419, v421, v133[2]);
                    pthread_mutex_unlock(&gPrintFUtilsLock);
                    if ((v41 & 0x80000000) != 0) {
                      return v41;
                    }
                    goto LABEL_767;
                  }
                  v390 = (id *)v421[0];
                  v421[0] += 8;
                  id v391 = *v390;
                  v392 = v391;
                  if ((v419 & 0x10) != 0) {
                    goto LABEL_895;
                  }
                  if (v391)
                  {
                    v393 = (const char *)MEMORY[0x192FAB550](v391);
                    if (v393)
                    {
                      v394 = (unsigned __int8 *)v393;
                      size_t v395 = strlen(v393);
                      uint64_t v41 = PrintFWriteMultiLineText((uint64_t (**)(unsigned __int8 *, int64_t, void))a1, (uint64_t)&v419, v394, v395);
                      free(v394);
                      if ((v41 & 0x80000000) != 0)
                      {

                        return v41;
                      }
                      uint64_t v10 = (v41 + v10);
LABEL_895:

                      goto LABEL_768;
                    }
                    LODWORD(v41) = 17;
                    v50 = "<<NULL XPC DESC>>";
                  }
                  else
                  {
                    LODWORD(v41) = 4;
                    v50 = "NULL";
                  }

LABEL_303:
                  uint64_t v9 = a1;
LABEL_765:
                  uint64_t v255 = PrintFWriteText((uint64_t (**)(const char *, uint64_t, void))v9, (uint64_t)&v419, v50, (int)v41);
                  goto LABEL_766;
                }
                v360 = (int *)v421[0];
                v421[0] += 8;
                if ((v419 & 0x10) != 0) {
                  goto LABEL_768;
                }
                int v361 = *v360;
                char __str = 0;
                GetProcessNameByPID(v361, &__str, 0x12CuLL);
                if (__str)
                {
                  if (BYTE3(v419)) {
                    uint64_t v368 = PrintFCore((uint64_t)v9, (uint64_t)"%s:%lld", v362, v363, v364, v365, v366, v367, (uint64_t)&__str);
                  }
                  else {
                    uint64_t v368 = PrintFCore((uint64_t)v9, (uint64_t)"%s", v362, v363, v364, v365, v366, v367, (uint64_t)&__str);
                  }
                }
                else
                {
                  uint64_t v368 = PrintFCore((uint64_t)v9, (uint64_t)"%lld", v362, v363, v364, v365, v366, v367, v361);
                }
                uint64_t v41 = v368;
LABEL_638:
                uint64_t v12 = 42;
                if ((v41 & 0x80000000) != 0) {
                  return v41;
                }
                uint64_t v10 = (v41 + v10);
              }
              else
              {
                uint64_t v41 = v10;
                uint64_t v12 = 42;
                if ((v419 & 0x10) == 0) {
                  return v41;
                }
              }
LABEL_769:
              int v11 = 0;
              uint64_t v8 = v13;
              uint64_t v9 = a1;
              if (v37)
              {
LABEL_770:
                int v11 = (char)v13[1];
                uint64_t v8 = v13 + 1;
              }
              break;
            default:
              if ((char)v23 != 37)
              {
LABEL_81:
                if (((char)v23 - 32) >= 0x5F) {
                  uint64_t v51 = 32;
                }
                else {
                  uint64_t v51 = (char)v23;
                }
                v50 = &__str;
                int v52 = SNPrintF((uint64_t)&__str, 300, (uint64_t)"<<UNKNOWN FORMAT CONVERSION CODE '%%%c'>>", a4, a5, a6, a7, a8, v51);
                goto LABEL_85;
              }
              if ((v22 & 0x10) != 0) {
                goto LABEL_770;
              }
              int v37 = 37;
              char __str = 37;
LABEL_373:
              LODWORD(v41) = 1;
              goto LABEL_77;
          }
          break;
      }
      break;
    }
  }
}

uint64_t PrintFCallBackAllocatedString(const void *a1, size_t a2, uint64_t a3)
{
  size_t v4 = a2;
  uint64_t v6 = *(void *)(a3 + 16);
  unint64_t v7 = v6 + a2;
  if (v6 + a2 <= *(void *)(a3 + 24))
  {
    uint64_t v9 = *(char **)(a3 + 8);
  }
  else
  {
    if (v7 >= 0x100) {
      size_t v8 = (v7 + 1023) & 0xFFFFFC00;
    }
    else {
      size_t v8 = 256;
    }
    uint64_t v9 = (char *)malloc_type_realloc(*(void **)(a3 + 8), v8, 0x7F9BF5A7uLL);
    if (!v9) {
      return 4294960568;
    }
    *(void *)(a3 + 8) = v9;
    *(void *)(a3 + 24) = v8;
    uint64_t v6 = *(void *)(a3 + 16);
  }
  memcpy(&v9[v6], a1, v4);
  *(void *)(a3 + 16) += v4;
  return v4;
}

uint64_t PrintFWriteText(uint64_t (**a1)(const char *, uint64_t, void), uint64_t a2, const char *a3, uint64_t a4)
{
  size_t v8 = (const char *)(a2 + 25);
  if (*(unsigned char *)(a2 + 25)) {
    int v9 = a4 + 1;
  }
  else {
    int v9 = a4;
  }
  uint64_t v10 = (const char *)(a2 + 26);
  if (*(unsigned char *)(a2 + 26)) {
    int v11 = v9 + 1;
  }
  else {
    int v11 = v9;
  }
  if ((*(unsigned char *)a2 & 1) == 0 && v11 < *(_DWORD *)(a2 + 8))
  {
    int v12 = 0;
    while (1)
    {
      uint64_t v13 = (*a1)(" ", 1, a1);
      if ((v13 & 0x80000000) != 0) {
        return v13;
      }
      ++v12;
      int v14 = *(_DWORD *)(a2 + 8) - 1;
      *(_DWORD *)(a2 + 8) = v14;
      if (v11 >= v14)
      {
        if (*v8) {
          goto LABEL_15;
        }
        goto LABEL_17;
      }
    }
  }
  int v12 = 0;
  if (*(unsigned char *)(a2 + 25))
  {
LABEL_15:
    uint64_t v13 = (*a1)(v8, 1, a1);
    if ((v13 & 0x80000000) != 0) {
      return v13;
    }
    ++v12;
  }
LABEL_17:
  uint64_t v13 = (*a1)(a3, a4, a1);
  if ((v13 & 0x80000000) != 0) {
    return v13;
  }
  uint64_t v15 = (v12 + a4);
  if (!*v10) {
    goto LABEL_21;
  }
  uint64_t v13 = (*a1)(v10, 1, a1);
  if ((v13 & 0x80000000) != 0) {
    return v13;
  }
  uint64_t v15 = (v15 + 1);
LABEL_21:
  if (v11 < *(_DWORD *)(a2 + 8))
  {
    while (1)
    {
      uint64_t v13 = (*a1)(" ", 1, a1);
      if ((v13 & 0x80000000) != 0) {
        break;
      }
      uint64_t v15 = (v15 + 1);
      if (++v11 >= *(_DWORD *)(a2 + 8)) {
        return v15;
      }
    }
    return v13;
  }
  return v15;
}

uint64_t PrintFCallBackUserCallBack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(a3 + 32))(a1, a2, *(void *)(a3 + 40));
}

uint64_t strnicmpx(unsigned __int8 *a1, uint64_t a2, unsigned char *a3)
{
  if (a2)
  {
    uint64_t v4 = a2;
    while (1)
    {
      --v4;
      __darwin_ct_rune_t v6 = __tolower(*a1);
      uint64_t result = __tolower(*a3);
      if (v6 < (int)result) {
        return 0xFFFFFFFFLL;
      }
      if (v6 > (int)result) {
        return 1;
      }
      if (!result) {
        return result;
      }
      ++a1;
      ++a3;
      if (!v4) {
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    if (*a3) {
      return 0xFFFFFFFFLL;
    }
    else {
      return 0;
    }
  }
}

uint64_t __DataBuffer_PrintFCallBack(char *__s, size_t a2, uint64_t a3)
{
  unsigned int v3 = a2;
  LODWORD(result) = DataBuffer_Append(a3, __s, a2);
  if (result) {
    return result;
  }
  else {
    return v3;
  }
}

uint64_t DataBuffer_Append(uint64_t a1, char *__s, size_t a3)
{
  size_t v3 = a3;
  if (a3 == -1) {
    size_t v3 = strlen(__s);
  }
  __dst = 0;
  uint64_t v6 = DataBuffer_Resize(a1, *(void *)(a1 + 32) + v3, (unint64_t *)&__dst);
  if (!v6) {
    memcpy(__dst, __s, v3);
  }
  return v6;
}

uint64_t DataBuffer_Resize(uint64_t a1, unint64_t a2, unint64_t *a3)
{
  uint64_t result = *(unsigned int *)(a1 + 52);
  if (!result)
  {
    unint64_t v7 = *(void *)(a1 + 32);
    if (v7 >= a2)
    {
      *(void *)(a1 + 32) = a2;
      if (a3)
      {
        uint64_t result = 0;
        unint64_t v15 = *(void *)(a1 + 24);
        goto LABEL_24;
      }
      return 0;
    }
    if (*(void *)(a1 + 40) < a2)
    {
      if (*(void *)(a1 + 16) < a2)
      {
        uint64_t result = 4294960545;
      }
      else
      {
        uint64_t v8 = 4096;
        if (a2 >> 17) {
          uint64_t v9 = (a2 + 0x1FFFF) & 0xFFFE0000;
        }
        else {
          uint64_t v9 = (a2 + 0x3FFF) & 0xFFFFC000;
        }
        if (a2 >= 0x1000) {
          uint64_t v8 = v9;
        }
        if (a2 >= 0x100) {
          size_t v10 = v8;
        }
        else {
          size_t v10 = 256;
        }
        int v11 = malloc_type_malloc(v10, 0x357B5781uLL);
        if (v11)
        {
          int v12 = v11;
          size_t v13 = *(void *)(a1 + 32);
          if (v13) {
            memcpy(v11, *(const void **)(a1 + 24), v13);
          }
          if (*(unsigned char *)(a1 + 48))
          {
            int v14 = *(void **)(a1 + 24);
            if (v14) {
              free(v14);
            }
          }
          *(void *)(a1 + 40) = v10;
          *(void *)(a1 + 24) = v12;
          *(unsigned char *)(a1 + 48) = 1;
          goto LABEL_20;
        }
        uint64_t result = 4294960568;
      }
      *(_DWORD *)(a1 + 52) = result;
      return result;
    }
LABEL_20:
    *(void *)(a1 + 32) = a2;
    if (a3)
    {
      uint64_t result = 0;
      unint64_t v15 = *(void *)(a1 + 24) + v7;
LABEL_24:
      *a3 = v15;
      return result;
    }
    return 0;
  }
  return result;
}

size_t _LogPrintFCallBack(void *__src, size_t __n, uint64_t a3)
{
  if (!__n && *(unsigned char *)(a3 + 2072))
  {
    size_t v6 = *(void *)(a3 + 2064);
    if (!v6) {
      goto LABEL_5;
    }
LABEL_4:
    _LogPrintFWrite(a3, (const void *)(a3 + 12), v6, 0);
    size_t v6 = 0;
    *(void *)(a3 + 2064) = 0;
    goto LABEL_5;
  }
  size_t v6 = *(void *)(a3 + 2064);
  if (v6 + __n >= 0x801 && v6) {
    goto LABEL_4;
  }
LABEL_5:
  if (__n < 0x801)
  {
    if (__n)
    {
      memcpy((void *)(a3 + v6 + 12), __src, __n);
      *(void *)(a3 + 2064) += __n;
    }
  }
  else
  {
    _LogPrintFWrite(a3, __src, __n, 0);
  }
  return __n;
}

size_t PrintFCallBackFixedString(unsigned char *__src, size_t __n, void *a3)
{
  size_t v4 = __n;
  uint64_t v5 = a3[2];
  size_t v6 = a3[3] - v5;
  if (v6 >= __n)
  {
    if (!__n) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (v6)
  {
    while ((__src[v6] & 0xC0) == 0x80)
    {
      if (!--v6) {
        goto LABEL_5;
      }
    }
    size_t v4 = v6;
LABEL_9:
    memcpy((void *)(a3[1] + v5), __src, v4);
    uint64_t v5 = a3[2];
    goto LABEL_10;
  }
LABEL_5:
  size_t v4 = 0;
LABEL_10:
  a3[2] = v5 + v4;
  return v4;
}

uint64_t SNPrintF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return VSNPrintF(a1, a2, a3, (uint64_t)&a9);
}

uint64_t VSNPrintF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  unint64_t v7 = PrintFCallBackFixedString;
  uint64_t v8 = a1;
  uint64_t v5 = a2 - 1;
  if (!a2) {
    uint64_t v5 = 0;
  }
  uint64_t v9 = 0;
  uint64_t v10 = v5;
  uint64_t result = PrintFCoreVAList(&v7, a3, a4);
  if (a2) {
    *(unsigned char *)(v8 + v9) = 0;
  }
  return result;
}

unint64_t _PrintFObfuscateString(unint64_t __s, uint64_t a2, unsigned char *a3, uint64_t *a4)
{
  size_t v6 = (unsigned __int8 *)__s;
  if (a2 == -1)
  {
    int8x16_t __s = strlen((const char *)__s);
    uint64_t v7 = __s;
    if (__s) {
      goto LABEL_8;
    }
LABEL_15:
    *a3 = 0;
    if (!a4) {
      return __s;
    }
    uint64_t v9 = 0;
    goto LABEL_17;
  }
  if (!a2) {
    goto LABEL_15;
  }
  uint64_t v7 = 0;
  while (*(unsigned char *)(__s + v7))
  {
    if (a2 == ++v7)
    {
      uint64_t v7 = a2;
      break;
    }
  }
  if (!v7) {
    goto LABEL_15;
  }
LABEL_8:
  if (gObfuscateOnce != -1) {
    dispatch_once_f(&gObfuscateOnce, 0, (dispatch_function_t)_PrintFObfuscateInit);
  }
  int8x16_t __s = SipHash(gObfuscateKey, v6, v7);
  *(_WORD *)a3 = 16962;
  for (uint64_t i = 2; i != 8; ++i)
  {
    a3[i] = aAbcdefghijklmn[__s % 0x34];
    __s >>= 8;
  }
  a3[8] = 0;
  if (a4)
  {
    uint64_t v9 = 8;
LABEL_17:
    *a4 = v9;
  }
  return __s;
}

uint64_t SipHash(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = *a1 ^ 0x736F6D6570736575;
  uint64_t v5 = v3 ^ 0x646F72616E646F6DLL;
  uint64_t v6 = *a1 ^ 0x6C7967656E657261;
  uint64_t v7 = v3 ^ 0x7465646279746573;
  if ((a3 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v8 = &a2[a3 & 0xFFFFFFFFFFFFFFF8];
    do
    {
      uint64_t v9 = *(void *)a2;
      a2 += 8;
      uint64_t v10 = v9 ^ v7;
      uint64_t v11 = v5 + v4;
      uint64_t v12 = v11 ^ __ROR8__(v5, 51);
      uint64_t v13 = v10 + v6;
      uint64_t v14 = __ROR8__(v10, 48);
      uint64_t v15 = (v13 ^ v14) + __ROR8__(v11, 32);
      uint64_t v16 = v15 ^ __ROR8__(v13 ^ v14, 43);
      uint64_t v17 = v13 + v12;
      uint64_t v18 = v17 ^ __ROR8__(v12, 47);
      uint64_t v19 = v15 + v18;
      uint64_t v20 = v19 ^ __ROR8__(v18, 51);
      uint64_t v21 = v16 + __ROR8__(v17, 32);
      uint64_t v22 = __ROR8__(v16, 48);
      uint64_t v23 = (v21 ^ v22) + __ROR8__(v19, 32);
      uint64_t v7 = v23 ^ __ROR8__(v21 ^ v22, 43);
      uint64_t v24 = v21 + v20;
      uint64_t v5 = v24 ^ __ROR8__(v20, 47);
      uint64_t v6 = __ROR8__(v24, 32);
      uint64_t v4 = v23 ^ v9;
    }
    while (a2 != v8);
    a2 = v8;
  }
  uint64_t v25 = a3 << 56;
  switch(a3 & 7)
  {
    case 1:
      goto LABEL_12;
    case 2:
      goto LABEL_11;
    case 3:
      goto LABEL_10;
    case 4:
      goto LABEL_9;
    case 5:
      goto LABEL_8;
    case 6:
      goto LABEL_7;
    case 7:
      v25 |= (unint64_t)a2[6] << 48;
LABEL_7:
      v25 |= (unint64_t)a2[5] << 40;
LABEL_8:
      v25 |= (unint64_t)a2[4] << 32;
LABEL_9:
      v25 |= (unint64_t)a2[3] << 24;
LABEL_10:
      v25 |= (unint64_t)a2[2] << 16;
LABEL_11:
      v25 |= (unint64_t)a2[1] << 8;
LABEL_12:
      v25 |= *a2;
      break;
    default:
      break;
  }
  uint64_t v26 = v25 ^ v7;
  uint64_t v27 = v5 + v4;
  uint64_t v28 = v27 ^ __ROR8__(v5, 51);
  uint64_t v29 = v26 + v6;
  uint64_t v30 = __ROR8__(v26, 48);
  uint64_t v31 = (v29 ^ v30) + __ROR8__(v27, 32);
  uint64_t v32 = v31 ^ __ROR8__(v29 ^ v30, 43);
  uint64_t v33 = v29 + v28;
  uint64_t v34 = v33 ^ __ROR8__(v28, 47);
  uint64_t v35 = v31 + v34;
  uint64_t v36 = v35 ^ __ROR8__(v34, 51);
  uint64_t v37 = v32 + __ROR8__(v33, 32);
  uint64_t v38 = __ROR8__(v32, 48);
  uint64_t v39 = (v37 ^ v38) + __ROR8__(v35, 32);
  uint64_t v40 = v39 ^ __ROR8__(v37 ^ v38, 43);
  uint64_t v41 = v37 + v36;
  uint64_t v42 = v41 ^ __ROR8__(v36, 47);
  uint64_t v43 = (v39 ^ v25) + v42;
  uint64_t v44 = v43 ^ __ROR8__(v42, 51);
  uint64_t v45 = (__ROR8__(v41, 32) ^ 0xFFLL) + v40;
  uint64_t v46 = __ROR8__(v40, 48);
  uint64_t v47 = __ROR8__(v43, 32) + (v45 ^ v46);
  uint64_t v48 = v47 ^ __ROR8__(v45 ^ v46, 43);
  uint64_t v49 = v44 + v45;
  uint64_t v50 = __ROR8__(v49, 32);
  uint64_t v51 = v49 ^ __ROR8__(v44, 47);
  uint64_t v52 = v51 + v47;
  uint64_t v53 = (v51 + v47) ^ __ROR8__(v51, 51);
  uint64_t v54 = v50 + v48;
  uint64_t v55 = (v50 + v48) ^ __ROR8__(v48, 48);
  uint64_t v56 = __ROR8__(v52, 32) + v55;
  uint64_t v57 = v56 ^ __ROR8__(v55, 43);
  uint64_t v58 = v53 + v54;
  uint64_t v59 = __ROR8__(v53, 47);
  uint64_t v60 = (v58 ^ v59) + v56;
  uint64_t v61 = v60 ^ __ROR8__(v58 ^ v59, 51);
  uint64_t v62 = __ROR8__(v58, 32) + v57;
  uint64_t v63 = v62 ^ __ROR8__(v57, 48);
  uint64_t v64 = __ROR8__(v60, 32) + v63;
  uint64_t v65 = v64 ^ __ROR8__(v63, 43);
  uint64_t v66 = v61 + v62;
  uint64_t v67 = v66 ^ __ROR8__(v61, 47);
  uint64_t v68 = __ROR8__(v66, 32) + v65;
  uint64_t v69 = (v67 + v64) ^ __ROR8__(v67, 51);
  return __ROR8__(v68 ^ __ROR8__(v65, 48), 43) ^ __ROR8__(v69, 47) ^ __ROR8__(v69 + v68, 32) ^ (v69 + v68);
}

uint64_t _LogPrintFWrite(uint64_t result, const void *a2, size_t a3, int a4)
{
  uint64_t v6 = result;
  uint64_t v7 = *(void *)result;
  if (!a4)
  {
    uint64_t v12 = *(void *)(v7 + 56);
    if (v12)
    {
      int v13 = *(_DWORD *)(v12 + 24);
      BOOL v14 = v13 != -1 && *(_DWORD *)(result + 8) < v13;
      if (!v14 && ((*(_DWORD *)(result + 8) & 0x800000) == 0 || *(_DWORD *)(v12 + 40) == 14))
      {
        uint64_t result = (*(uint64_t (**)(uint64_t))(v12 + 32))(result);
        uint64_t v7 = *(void *)v6;
      }
    }
  }
  uint64_t v8 = *(void *)(v7 + 64);
  if (v8)
  {
    int v9 = *(_DWORD *)(v8 + 24);
    BOOL v10 = v9 != -1 && *(_DWORD *)(v6 + 8) < v9;
    if (!v10 && ((*(_DWORD *)(v6 + 8) & 0x800000) == 0 || *(_DWORD *)(v8 + 40) == 14)) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(v8 + 32))(v6);
    }
  }
  if ((*(_DWORD *)(v6 + 8) & 0x840000) == 0x40000)
  {
    uint64_t result = open("/dev/console", 1, 0);
    if ((result & 0x80000000) == 0)
    {
      int v11 = result;
      write(result, a2, a3);
      close(v11);
      return usleep(0xC8u);
    }
  }
  return result;
}

uint64_t PrintFWriteHexByteStream(uint64_t (**a1)(unsigned char *, uint64_t, void), int a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a2) {
    uint64_t v4 = "0123456789ABCDEF";
  }
  else {
    uint64_t v4 = "0123456789abcdef";
  }
  if (a4 < 1) {
    return 0;
  }
  uint64_t v5 = a3;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  unint64_t v9 = (unint64_t)&a3[a4];
  do
  {
    if (v7 == 64)
    {
      uint64_t v10 = (*a1)(v15, 64, a1);
      if ((v10 & 0x80000000) != 0) {
        return v10;
      }
      uint64_t v7 = 0;
      uint64_t v8 = (v8 + 64);
    }
    int v11 = &v15[v7];
    unsigned int v12 = *v5++;
    *int v11 = v4[(unint64_t)v12 >> 4];
    v7 += 2;
    v11[1] = v4[v12 & 0xF];
  }
  while ((unint64_t)v5 < v9);
  if (v7)
  {
    int v13 = (*a1)(v15, v7, a1);
    if (v13 >= 0) {
      return (v8 + v7);
    }
    else {
      return v13;
    }
  }
  return v8;
}

uint64_t PrintFWriteHexOneLine(uint64_t (**a1)(const char *, uint64_t, void), uint64_t a2, unsigned __int8 *a3, unint64_t a4)
{
  if (!a4) {
    return 0;
  }
  if (*(unsigned char *)(a2 + 3) == 2)
  {
    int v8 = 1;
    uint64_t v9 = (*a1)("|", 1, a1);
    if ((v9 & 0x80000000) == 0)
    {
LABEL_14:
      if (a4 <= 1) {
        uint64_t v16 = 1;
      }
      else {
        uint64_t v16 = a4;
      }
      int v17 = v8 + v16;
      while (1)
      {
        int v19 = *a3++;
        char v18 = v19;
        if ((v19 - 127) < 0xFFFFFFA1) {
          char v18 = 94;
        }
        char v22 = v18;
        uint64_t v9 = (*a1)(&v22, 1, a1);
        if ((v9 & 0x80000000) != 0) {
          break;
        }
        if (!--v16)
        {
          int v20 = (*a1)("|", 1, a1);
          if (v20 >= 0) {
            return (v17 + 1);
          }
          else {
            return v20;
          }
        }
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
    LODWORD(v11) = 0;
    while (1)
    {
      if (v10)
      {
        v23[0] = 32;
        uint64_t v12 = 1;
      }
      else
      {
        uint64_t v12 = 0;
      }
      unint64_t v13 = a3[v10];
      BOOL v14 = &v23[v12];
      *BOOL v14 = a0123456789abcd[v13 >> 4];
      int v15 = v12 | 2;
      v14[1] = a0123456789abcd[v13 & 0xF];
      uint64_t v9 = (*a1)(v23, v12 | 2, a1);
      if ((v9 & 0x80000000) != 0) {
        break;
      }
      uint64_t v11 = (v11 + v15);
      if (a4 == ++v10)
      {
        if (*(char *)(a2 + 3) < 1) {
          return v11;
        }
        uint64_t v9 = (*a1)(" |", 2, a1);
        if ((v9 & 0x80000000) == 0)
        {
          int v8 = v11 + 2;
          goto LABEL_14;
        }
        return v9;
      }
    }
  }
  return v9;
}

const char *GetProcessNameByPID(int a1, char *a2, size_t a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (!a3) {
    return "";
  }
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  long long v10 = 0u;
  memset(buffer, 0, sizeof(buffer));
  if (proc_pidinfo(a1, 3, 0, buffer, 136) == 136)
  {
    if (LOBYTE(v11[0])) {
      uint64_t v6 = (const char *)v11;
    }
    else {
      uint64_t v6 = (const char *)&v10;
    }
    goto LABEL_12;
  }
  *(void *)int v15 = 0xE00000001;
  int v16 = 1;
  int v17 = a1;
  bzero(v13, 0x288uLL);
  size_t v8 = 648;
  if (!sysctl(v15, 4u, v13, &v8, 0, 0) || *__error() && !*__error())
  {
    uint64_t v6 = v14;
LABEL_12:
    strlcpy(a2, v6, a3);
    return a2;
  }
  *a2 = 0;
  return a2;
}

uint64_t PrintFWriteObfuscatedPtr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = a2;
  if (gObfuscateOnce != -1)
  {
    dispatch_once_f(&gObfuscateOnce, 0, (dispatch_function_t)_PrintFObfuscateInit);
    if (a2) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v10 = 0;
    goto LABEL_6;
  }
  if (!a2) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v10 = (unsigned __int16)SipHash(gObfuscateKey, (unsigned __int8 *)&v13, 8);
LABEL_6:
  int v11 = PrintFCore(a1, (uint64_t)"0x%04X", a3, a4, a5, a6, a7, a8, v10);
  return v11 & ~(v11 >> 31);
}

char *IPv6AddressToCString(unsigned char *a1, unsigned int a2, int a3, unsigned int a4, char *a5, char a6)
{
  unsigned int v8 = a3;
  unsigned int v9 = a2;
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  if (a3 > 0 || (uint64_t v10 = a5, a3 == -2))
  {
    *a5 = 91;
    uint64_t v10 = a5 + 1;
  }
  if (*a1 || a1[1] || a1[2] || a1[3]) {
    goto LABEL_28;
  }
  BOOL v11 = !a1[4]
     && !a1[5]
     && !a1[6]
     && !a1[7]
     && !a1[8]
     && !a1[9]
     && a1[10] == 255
     && a1[11] == 255;
  if (a1[4] || a1[5] || a1[6] || a1[7] || a1[8] || a1[9] || a1[10] || a1[11])
  {
    int v12 = 0;
    goto LABEL_25;
  }
  if (a1[12] || a1[13] || a1[14])
  {
    BOOL v48 = 0;
LABEL_101:
    int v12 = !v48;
    goto LABEL_25;
  }
  int v12 = a1[15];
  if (a1[15])
  {
    BOOL v48 = v12 == 1;
    goto LABEL_101;
  }
LABEL_25:
  if ((v11 | v12) != 1)
  {
LABEL_28:
    unint64_t v13 = 0;
    BOOL v14 = v51;
    while (1)
    {
      uint64_t v15 = v13 | 1;
      unint64_t v16 = a1[v13];
      if (v16 >= 0x10)
      {
        *BOOL v14 = a0123456789abcd[v16 >> 4];
        LODWORD(v16) = v16 & 0xF;
        uint64_t v17 = 1;
      }
      else
      {
        if (!a1[v13])
        {
          uint64_t v19 = 0;
          uint64_t v21 = 0;
          v13 += 2;
          unsigned int v20 = a1[v15];
          if (v20 < 0x10) {
            goto LABEL_35;
          }
          goto LABEL_34;
        }
        uint64_t v17 = 0;
      }
      char v18 = a0123456789abcd[v16];
      uint64_t v19 = v17 + 1;
      v14[v17] = v18;
      v13 += 2;
      unsigned int v20 = a1[v15];
LABEL_34:
      uint64_t v21 = v19 + 1;
      v14[v19] = a0123456789abcd[(unint64_t)v20 >> 4];
LABEL_35:
      *(_WORD *)&v14[v21] = a0123456789abcd[v20 & 0xF];
      v14 += 5;
      if (v13 >= 0x10)
      {
        int v22 = 0;
        uint64_t v23 = a1 + 15;
        for (uint64_t i = 28; i != -4; i -= 4)
        {
          if (*(v23 - 1))
          {
            int v22 = 0;
          }
          else if (*v23)
          {
            int v22 = 0;
          }
          else
          {
            ++v22;
          }
          *(_DWORD *)&v50[i + 64] = v22;
          v23 -= 2;
        }
        uint64_t v25 = 0;
        int v26 = 1;
        int v27 = -1;
        do
        {
          if (*(_DWORD *)&v50[4 * v25 + 64] > v26)
          {
            int v26 = *(_DWORD *)&v50[4 * v25 + 64];
            int v27 = v25;
          }
          ++v25;
        }
        while (v25 != 8);
        int v28 = 0;
        while (1)
        {
          if (v28 == v27)
          {
            if (!v27) {
              *v10++ = 58;
            }
            *uint64_t v10 = 58;
            int v28 = v27 - 1 + *(_DWORD *)&v50[4 * v27 + 64];
          }
          else
          {
            char v29 = v51[5 * v28];
            if (v29)
            {
              uint64_t v30 = &v51[5 * v28 + 1];
              do
              {
                *v10++ = v29;
                int v31 = *v30++;
                char v29 = v31;
              }
              while (v31);
            }
            if (v28 == 7) {
              goto LABEL_60;
            }
            *uint64_t v10 = 58;
          }
          ++v10;
          BOOL v32 = v28++ < 7;
          if (!v32) {
            goto LABEL_60;
          }
        }
      }
    }
  }
  *(_WORD *)uint64_t v10 = 14906;
  if (v11)
  {
    *(_DWORD *)(v10 + 2) = 1717986918;
    v10[6] = 58;
    v10 += 7;
  }
  else
  {
    v10 += 2;
  }
  for (uint64_t j = 12; ; ++j)
  {
    unsigned int v45 = a1[j];
    uint64_t v46 = v50;
    do
    {
      *v46++ = (v45 % 0xA) | 0x30;
      BOOL v32 = v45 > 9;
      v45 /= 0xAu;
    }
    while (v32);
    while (v46 > v50)
    {
      char v47 = *--v46;
      *v10++ = v47;
    }
    if (j == 15) {
      break;
    }
    *v10++ = 46;
  }
LABEL_60:
  if (a2)
  {
    *uint64_t v10 = 37;
    if (a6)
    {
      *(_WORD *)(v10 + 1) = 13618;
      v10 += 3;
    }
    else
    {
      ++v10;
    }
    uint64_t v33 = if_indextoname(a2, v50);
    if (v33 && (char v34 = *v33) != 0)
    {
      uint64_t v35 = (unsigned __int8 *)(v33 + 1);
      do
      {
        *v10++ = v34;
        int v36 = *v35++;
        char v34 = v36;
      }
      while (v36);
    }
    else
    {
      uint64_t v39 = v49;
      do
      {
        *v39++ = (v9 % 0xA) | 0x30;
        BOOL v32 = v9 > 9;
        v9 /= 0xAu;
      }
      while (v32);
      while (v39 > v49)
      {
        char v40 = *--v39;
        *v10++ = v40;
      }
    }
  }
  if ((int)v8 < 1)
  {
    if (v8 == -2) {
      *v10++ = 93;
    }
  }
  else
  {
    *(_WORD *)uint64_t v10 = 14941;
    uint64_t v37 = v50;
    do
    {
      *v37++ = (v8 % 0xA) | 0x30;
      BOOL v32 = v8 > 9;
      v8 /= 0xAu;
    }
    while (v32);
    v10 += 2;
    while (v37 > v50)
    {
      char v38 = *--v37;
      *v10++ = v38;
    }
  }
  if ((a4 & 0x80000000) == 0)
  {
    *uint64_t v10 = 47;
    uint64_t v41 = v50;
    do
    {
      *v41++ = (a4 % 0xA) | 0x30;
      BOOL v32 = a4 > 9;
      a4 /= 0xAu;
    }
    while (v32);
    ++v10;
    while (v41 > v50)
    {
      char v42 = *--v41;
      *v10++ = v42;
    }
  }
  *uint64_t v10 = 0;
  return a5;
}

uint64_t PrintFWriteTimeDuration(unint64_t a1, int a2, char *a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = a1 / 0x1E13380;
  unsigned int v4 = a1 % 0x1E13380;
  unsigned int v5 = v4 / 0x15180;
  unsigned int v6 = v4 % 0x15180;
  unsigned int v7 = v4 % 0x15180 / 0xE10;
  unsigned int v8 = v4 % 0x15180 % 0xE10;
  unsigned int v9 = (unsigned __int16)v8 / 0x3Cu;
  uint64_t v10 = a3;
  if ((a1 / 0x1E13380))
  {
    BOOL v11 = v31;
    do
    {
      *v11++ = (v3 % 0xA) | 0x30;
      BOOL v12 = v3 > 9;
      LODWORD(v3) = v3 / 0xA;
    }
    while (v12);
    unint64_t v13 = a3;
    if (v11 > v31)
    {
      unint64_t v13 = a3;
      do
      {
        char v14 = *--v11;
        *v13++ = v14;
      }
      while (v11 > v31);
    }
    *unint64_t v13 = 121;
    uint64_t v10 = v13 + 1;
  }
  if (v4 >= 0x15180)
  {
    uint64_t v15 = a3;
    if (v10 != a3)
    {
      *uint64_t v10 = 32;
      uint64_t v15 = v10 + 1;
    }
    unint64_t v16 = v31;
    do
    {
      *v16++ = (v5 % 0xA) | 0x30;
      BOOL v12 = v5 > 9;
      v5 /= 0xAu;
    }
    while (v12);
    while (v16 > v31)
    {
      char v17 = *--v16;
      *v15++ = v17;
    }
    *uint64_t v15 = 100;
    uint64_t v10 = v15 + 1;
  }
  unsigned int v18 = (unsigned __int16)v8 % 0x3Cu;
  if (v6 >= 0xE10)
  {
    uint64_t v19 = a3;
    if (v10 != a3)
    {
      *uint64_t v10 = 32;
      uint64_t v19 = v10 + 1;
    }
    if (a2 && v6 >> 5 <= 0x464) {
      *v19++ = 48;
    }
    unsigned int v20 = v31;
    do
    {
      *v20++ = (v7 % 0xA) | 0x30;
      BOOL v12 = v7 > 9;
      v7 /= 0xAu;
    }
    while (v12);
    while (v20 > v31)
    {
      char v21 = *--v20;
      *v19++ = v21;
    }
    if (a2) {
      char v22 = 58;
    }
    else {
      char v22 = 104;
    }
    *uint64_t v19 = v22;
    uint64_t v10 = v19 + 1;
  }
  if (a2 || v8 >= 0x3C)
  {
    if (a2 || v10 == a3)
    {
      if (v6 < 0xE10 || !a2 || v8 > 0x257) {
        goto LABEL_40;
      }
      char v23 = 48;
    }
    else
    {
      char v23 = 32;
    }
    *v10++ = v23;
LABEL_40:
    uint64_t v24 = v31;
    do
    {
      *v24++ = (v9 % 0xA) | 0x30;
      BOOL v12 = v9 > 9;
      v9 /= 0xAu;
    }
    while (v12);
    while (v24 > v31)
    {
      char v25 = *--v24;
      *v10++ = v25;
    }
    if (a2) {
      char v26 = 58;
    }
    else {
      char v26 = 109;
    }
    *v10++ = v26;
  }
  if (!((unsigned __int16)v8 % 0x3Cu) && !a2 && v10 != a3) {
    goto LABEL_64;
  }
  if (!a2 && v10 != a3)
  {
    char v27 = 32;
LABEL_57:
    *v10++ = v27;
    goto LABEL_58;
  }
  if (a2 && v18 <= 9)
  {
    char v27 = 48;
    goto LABEL_57;
  }
LABEL_58:
  int v28 = v31;
  do
  {
    *v28++ = (v18 % 0xA) | 0x30;
    BOOL v12 = v18 > 9;
    v18 /= 0xAu;
  }
  while (v12);
  while (v28 > v31)
  {
    char v29 = *--v28;
    *v10++ = v29;
  }
  if (!a2) {
    *v10++ = 115;
  }
LABEL_64:
  *uint64_t v10 = 0;
  return (v10 - a3);
}

void DataBuffer_Free(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    v2 = *(void **)(a1 + 24);
    if (v2) {
      free(v2);
    }
  }
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 24) = *(void *)a1;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = v3;
  *(unsigned char *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = 0;
}

uint64_t CUXPCDecodeNSString(void *a1, const char *a2, void **a3, void *a4)
{
  id v7 = a1;
  string = xpc_dictionary_get_string(v7, a2);
  if (string)
  {
    uint64_t v9 = [[NSString alloc] initWithUTF8String:string];
    uint64_t v10 = *a3;
    *a3 = (void *)v9;
LABEL_5:
    uint64_t v17 = 1;
    goto LABEL_6;
  }
  uint64_t v11 = xpc_dictionary_get_value(v7, a2);
  uint64_t v10 = (void *)v11;
  if (!v11 || MEMORY[0x192FAB6C0](v11) == MEMORY[0x1E4F145F0]) {
    goto LABEL_5;
  }
  if (a4)
  {
    NSErrorF_safe((void *)*MEMORY[0x1E4F28760], 4294960540, (uint64_t)"XPC non-string type: '%s'", v12, v13, v14, v15, v16, (uint64_t)a2);
    uint64_t v17 = 0;
    *a4 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v17 = 0;
  }
LABEL_6:

  return v17;
}

uint64_t CUXPCDecodeSInt64RangedEx(void *a1, const char *a2, int64_t a3, int64_t a4, int64_t *a5, void *a6)
{
  uint64_t v11 = xpc_dictionary_get_value(a1, a2);
  uint64_t v12 = (void *)v11;
  if (!v11)
  {
    uint64_t v19 = 2;
    goto LABEL_14;
  }
  uint64_t v13 = MEMORY[0x192FAB6C0](v11);
  if (v13 == MEMORY[0x1E4F145C0])
  {
    int64_t value = xpc_int64_get_value(v12);
    goto LABEL_11;
  }
  if (v13 == MEMORY[0x1E4F145F8])
  {
    int64_t value = xpc_uint64_get_value(v12);
LABEL_11:
    if (value >= a3 && value <= a4)
    {
      *a5 = value;
      uint64_t v19 = 6;
      goto LABEL_14;
    }
    if (!a6) {
      goto LABEL_7;
    }
    NSErrorF_safe((void *)*MEMORY[0x1E4F28760], 4294960586, (uint64_t)"XPC out-of-range: '%s', %lld vs min %lld, max %lld", v21, v22, v23, v24, v25, (uint64_t)a2);
    goto LABEL_6;
  }
  if (a6)
  {
    NSErrorF_safe((void *)*MEMORY[0x1E4F28760], 4294960540, (uint64_t)"XPC non-int64 type: '%s'", v14, v15, v16, v17, v18, (uint64_t)a2);
LABEL_6:
    *a6 = (id)objc_claimAutoreleasedReturnValue();
  }
LABEL_7:
  uint64_t v19 = 5;
LABEL_14:

  return v19;
}

uint64_t CUXPCDecodeNSData(void *a1, const char *a2, void **a3, void *a4)
{
  id v7 = a1;
  size_t length = 0;
  data = xpc_dictionary_get_data(v7, a2, &length);
  if (data)
  {
    uint64_t v9 = data;
    id v10 = objc_alloc(MEMORY[0x1E4F1C9B8]);
    uint64_t v11 = [v10 initWithBytes:v9 length:length];
    uint64_t v12 = *a3;
    *a3 = (void *)v11;
LABEL_6:
    uint64_t v21 = 1;
    goto LABEL_7;
  }
  uint64_t v13 = xpc_dictionary_get_value(v7, a2);
  uint64_t v12 = (void *)v13;
  if (!v13) {
    goto LABEL_6;
  }
  if (MEMORY[0x192FAB6C0](v13) == MEMORY[0x1E4F14580])
  {
    uint64_t v19 = [MEMORY[0x1E4F1C9B8] data];
    unsigned int v20 = *a3;
    *a3 = (void *)v19;

    goto LABEL_6;
  }
  if (a4)
  {
    NSErrorF_safe((void *)*MEMORY[0x1E4F28760], 4294960540, (uint64_t)"XPC non-data type: '%s'", v14, v15, v16, v17, v18, (uint64_t)a2);
    uint64_t v21 = 0;
    *a4 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v21 = 0;
  }
LABEL_7:

  return v21;
}

uint64_t CUXPCDecodeNSDataOfLength(void *a1, const char *a2, uint64_t a3, void **a4, void *a5)
{
  id v9 = a1;
  size_t length = 0;
  data = xpc_dictionary_get_data(v9, a2, &length);
  if (!data)
  {
    uint64_t v20 = xpc_dictionary_get_value(v9, a2);
    uint64_t v21 = (void *)v20;
    if (!v20)
    {
LABEL_8:

      goto LABEL_9;
    }
    if (MEMORY[0x192FAB6C0](v20) == MEMORY[0x1E4F14580])
    {
      if (!a3)
      {
        uint64_t v27 = [MEMORY[0x1E4F1C9B8] data];
        int v28 = *a4;
        *a4 = (void *)v27;

        goto LABEL_8;
      }
      if (a5)
      {
        NSErrorF_safe((void *)*MEMORY[0x1E4F28760], 4294960553, (uint64_t)"XPC bad size: '%s', 0 vs %zu", v22, v23, v24, v25, v26, (uint64_t)a2);
        goto LABEL_17;
      }
    }
    else if (a5)
    {
      NSErrorF_safe((void *)*MEMORY[0x1E4F28760], 4294960540, (uint64_t)"XPC non-data type: '%s'", v22, v23, v24, v25, v26, (uint64_t)a2);
LABEL_17:
      *a5 = (id)objc_claimAutoreleasedReturnValue();
    }

    goto LABEL_19;
  }
  if (length != a3)
  {
    if (a5)
    {
      NSErrorF_safe((void *)*MEMORY[0x1E4F28760], 4294960553, (uint64_t)"XPC bad size: '%s', %zu vs %zu", v11, v12, v13, v14, v15, (uint64_t)a2);
      uint64_t v29 = 0;
      *a5 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_10;
    }
LABEL_19:
    uint64_t v29 = 0;
    goto LABEL_10;
  }
  uint64_t v16 = data;
  id v17 = objc_alloc(MEMORY[0x1E4F1C9B8]);
  uint64_t v18 = [v17 initWithBytes:v16 length:length];
  uint64_t v19 = *a4;
  *a4 = (void *)v18;

LABEL_9:
  uint64_t v29 = 1;
LABEL_10:

  return v29;
}

uint64_t DataBuffer_Detach(uint64_t a1, void *a2, size_t *a3)
{
  size_t v6 = *(void *)(a1 + 32);
  if (*(unsigned char *)(a1 + 48))
  {
    id v7 = *(void **)(a1 + 24);
LABEL_9:
    uint64_t result = 0;
    uint64_t v11 = *(void *)(a1 + 8);
    *(void *)(a1 + 24) = *(void *)a1;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = v11;
    *(unsigned char *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 52) = 0;
    *a2 = v7;
    *a3 = v6;
    return result;
  }
  if (v6 <= 1) {
    size_t v8 = 1;
  }
  else {
    size_t v8 = *(void *)(a1 + 32);
  }
  id v9 = malloc_type_malloc(v8, 0x35C1CE61uLL);
  if (v9)
  {
    id v7 = v9;
    if (v6) {
      memcpy(v9, *(const void **)(a1 + 24), v6);
    }
    goto LABEL_9;
  }
  return 4294960568;
}

double CFDictionaryGetDouble(const __CFDictionary *a1, const void *a2, _DWORD *a3)
{
  if (a1 && (CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a1, a2)) != 0)
  {
    return CFGetDouble(Value, a3);
  }
  else
  {
    if (a3) {
      *a3 = -6727;
    }
    return 0.0;
  }
}

unint64_t CFDictionaryGetInt64(const __CFDictionary *a1, const void *a2, int *a3)
{
  if (a1 && (CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a1, a2)) != 0)
  {
    return CFGetInt64(Value, a3);
  }
  else
  {
    if (a3) {
      *a3 = -6727;
    }
    return 0;
  }
}

CFDictionaryRef CFDictionaryGetCFDataOfLength(const __CFDictionary *result, const void *a2, uint64_t a3, int *a4)
{
  if (result)
  {
    uint64_t result = (const __CFDictionary *)CFDictionaryGetValue(result, a2);
    if (result)
    {
      CFDataRef v6 = result;
      CFTypeID v7 = CFGetTypeID(result);
      if (v7 == CFDataGetTypeID())
      {
        CFIndex Length = CFDataGetLength(v6);
        BOOL v9 = Length == a3;
        if (Length == a3) {
          uint64_t result = v6;
        }
        else {
          uint64_t result = 0;
        }
        if (v9) {
          int v10 = 0;
        }
        else {
          int v10 = -6743;
        }
      }
      else
      {
        uint64_t result = 0;
        int v10 = -6756;
      }
    }
    else
    {
      int v10 = -6727;
    }
  }
  else
  {
    int v10 = -6705;
  }
  if (a4) {
    *a4 = v10;
  }
  return result;
}

os_log_t _LogCategoryGetOSLogHandle(uint64_t a1, void *a2)
{
  if ((*(unsigned char *)(a1 + 18) & 2) == 0) {
    return 0;
  }
  unsigned int v4 = *(os_log_t **)(a1 + 104);
  if (!v4) {
    return 0;
  }
  os_log_t v2 = *v4;
  if (*v4) {
    goto LABEL_14;
  }
  CFDataRef v6 = *(const char **)(a1 + 96);
  if (!v6) {
    CFDataRef v6 = getprogname();
  }
  CFTypeID v7 = *(char **)(a1 + 24);
  if (!v7) {
    return 0;
  }
  size_t v8 = strchr(v7, 45);
  if (!v8)
  {
    os_log_t v2 = os_log_create(v6, v7);
    *unsigned int v4 = v2;
    if (!a2) {
      return v2;
    }
    goto LABEL_15;
  }
  BOOL v9 = v8;
  os_log_t v10 = v4[1];
  if (v10)
  {
    free(v10);
    v4[1] = 0;
  }
  uint64_t v11 = strdup(v9 + 1);
  v4[1] = (os_log_t)v11;
  if (!v11) {
    return 0;
  }
  uint64_t v12 = strndup(v7, v9 - v7);
  if (!v12) {
    return 0;
  }
  uint64_t v13 = v12;
  os_log_t v2 = os_log_create(v6, v12);
  *unsigned int v4 = v2;
  free(v13);
LABEL_14:
  if (a2) {
LABEL_15:
  }
    *a2 = v4[1];
  return v2;
}

void _LogOutputOSLog_Writer(uint64_t a1, uint64_t a2, char *__s1, size_t __n)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v31 = 0;
  size_t v8 = *(NSObject **)(a2 + 56);
  if (!v8)
  {
    os_log_t OSLogHandle = _LogCategoryGetOSLogHandle(*(void *)a1, &v31);
    if (OSLogHandle) {
      size_t v8 = OSLogHandle;
    }
    else {
      size_t v8 = MEMORY[0x1E4F14500];
    }
  }
  if (*(unsigned char *)(a2 + 64))
  {
    os_log_type_t v10 = *(unsigned char *)(a2 + 65);
    if (!__n) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  unsigned int v26 = *(unsigned __int8 *)(a1 + 8);
  if (v26 > 0xA) {
    char v27 = 1;
  }
  else {
    char v27 = 2;
  }
  if (v26 > 0x14) {
    char v27 = 0;
  }
  if (v26 <= 0x59) {
    char v28 = v27;
  }
  else {
    char v28 = 16;
  }
  if (v26 <= 0x72) {
    os_log_type_t v10 = v28;
  }
  else {
    os_log_type_t v10 = OS_LOG_TYPE_FAULT;
  }
  if (__n)
  {
LABEL_7:
    if (__s1[__n - 1] == 10) {
      --__n;
    }
  }
LABEL_9:
  if (*(unsigned char *)(a2 + 67) || (int v11 = *(_DWORD *)(a1 + 8), (v11 & 0x800000) != 0))
  {
    uint64_t v20 = v31;
    BOOL v21 = os_log_type_enabled(v8, v10);
    if (v20)
    {
      if (!v21) {
        return;
      }
      *(_DWORD *)buf = 136446723;
      *(void *)uint64_t v33 = v20;
      *(_WORD *)&v33[8] = 1040;
      *(_DWORD *)&v33[10] = __n;
      *(_WORD *)&v33[14] = 2081;
      *(void *)&v33[16] = __s1;
      os_log_type_t v22 = v10;
      uint64_t v23 = "%{public}s: %{private}.*s";
      goto LABEL_20;
    }
    if (!v21) {
      return;
    }
    *(_DWORD *)buf = 68157955;
    *(_DWORD *)uint64_t v33 = __n;
    *(_WORD *)&v33[4] = 2081;
    *(void *)&v33[6] = __s1;
    os_log_type_t v22 = v10;
    uint64_t v23 = "%{private}.*s";
    goto LABEL_36;
  }
  if (*(unsigned char *)(a2 + 66) || *(_DWORD *)(*(void *)a1 + 16) & 0x200 | v11 & 0x2000000)
  {
    uint64_t v12 = strndup(__s1, __n);
    if (!v12) {
      return;
    }
    uint64_t v13 = v12;
    uint64_t v14 = v31;
    BOOL v15 = os_log_type_enabled(v8, v10);
    if (v14)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)uint64_t v33 = v14;
        *(_WORD *)&v33[8] = 2082;
        *(void *)&v33[10] = v13;
        os_log_type_t v16 = v10;
        id v17 = "%{public}s: %{public}s";
        uint64_t v18 = v8;
        uint32_t v19 = 22;
LABEL_40:
        _os_log_impl(&dword_18E2F5000, v18, v16, v17, buf, v19);
      }
    }
    else if (v15)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)uint64_t v33 = v13;
      os_log_type_t v16 = v10;
      id v17 = "%{public}s";
      uint64_t v18 = v8;
      uint32_t v19 = 12;
      goto LABEL_40;
    }
    free(v13);
    return;
  }
  uint64_t v29 = v31;
  BOOL v30 = os_log_type_enabled(v8, v10);
  if (!v29)
  {
    if (!v30) {
      return;
    }
    *(_DWORD *)buf = 68157954;
    *(_DWORD *)uint64_t v33 = __n;
    *(_WORD *)&v33[4] = 2080;
    *(void *)&v33[6] = __s1;
    os_log_type_t v22 = v10;
    uint64_t v23 = "%.*s";
LABEL_36:
    uint64_t v24 = v8;
    uint32_t v25 = 18;
    goto LABEL_37;
  }
  if (v30)
  {
    *(_DWORD *)buf = 136446722;
    *(void *)uint64_t v33 = v29;
    *(_WORD *)&v33[8] = 1040;
    *(_DWORD *)&v33[10] = __n;
    *(_WORD *)&v33[14] = 2080;
    *(void *)&v33[16] = __s1;
    os_log_type_t v22 = v10;
    uint64_t v23 = "%{public}s: %.*s";
LABEL_20:
    uint64_t v24 = v8;
    uint32_t v25 = 28;
LABEL_37:
    _os_log_impl(&dword_18E2F5000, v24, v22, v23, buf, v25);
  }
}

char *__cdecl strndup(const char *__s1, size_t __n)
{
  size_t v3 = 0;
  if (__n)
  {
    while (__s1[v3])
    {
      if (__n == ++v3)
      {
        size_t v3 = __n;
        break;
      }
    }
  }
  unsigned int v4 = (char *)malloc_type_malloc(v3 + 1, 0x41CC862DuLL);
  unsigned int v5 = v4;
  if (v4)
  {
    memcpy(v4, __s1, v3);
    v5[v3] = 0;
  }
  return v5;
}

void NSDecodeNSDictionaryOfClassesIfPresent(void *a1, void *a2, uint64_t a3, uint64_t a4, void **a5)
{
  id v8 = a1;
  id v9 = a2;
  uint64_t v26 = 0;
  char v27 = &v26;
  uint64_t v28 = 0x2020000000;
  char v29 = 0;
  if ([v8 containsValueForKey:v9])
  {
    os_log_type_t v10 = objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", objc_opt_class(), a3, a4, 0);
    int v11 = [v8 decodeObjectOfClasses:v10 forKey:v9];
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
    uint64_t v13 = (void *)MEMORY[0x1E4F1C3C8];
    if ((isKindOfClass & 1) == 0)
    {
      uint64_t v14 = (void *)MEMORY[0x1E4F1CA00];
      BOOL v15 = (objc_class *)objc_opt_class();
      os_log_type_t v16 = NSStringFromClass(v15);
      [v14 raise:*MEMORY[0x1E4F1C3C8], @"bad dictionary type for key %@, %@", v9, v16 format];

      uint64_t v13 = (void *)MEMORY[0x1E4F1C3C8];
    }
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = __NSDecodeNSDictionaryOfClassesIfPresent_block_invoke;
    v21[3] = &unk_1E55BF510;
    uint64_t v24 = a3;
    id v17 = v9;
    id v22 = v17;
    uint64_t v23 = &v26;
    uint64_t v25 = a4;
    [v11 enumerateKeysAndObjectsUsingBlock:v21];
    if (*((unsigned char *)v27 + 24)) {
      [MEMORY[0x1E4F1CA00] raise:*v13, @"bad element type for key %@", v17 format];
    }
    uint64_t v18 = *a5;
    *a5 = v11;
    id v19 = v11;
  }
  _Block_object_dispose(&v26, 8);
}

void sub_18E2FCDF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void NSDecodeStandardContainerIfPresent(void *a1, void *a2, uint64_t a3, void **a4)
{
  id v19 = a1;
  id v6 = a2;
  if ([v19 containsValueForKey:v6])
  {
    uint64_t v18 = (void *)MEMORY[0x1E4F1CAD0];
    uint64_t v17 = objc_opt_class();
    uint64_t v7 = objc_opt_class();
    uint64_t v8 = objc_opt_class();
    uint64_t v9 = objc_opt_class();
    uint64_t v10 = objc_opt_class();
    uint64_t v11 = objc_opt_class();
    uint64_t v12 = objc_opt_class();
    uint64_t v13 = objc_msgSend(v18, "setWithObjects:", v17, v7, v8, v9, v10, v11, v12, objc_opt_class(), 0);
    uint64_t v14 = [v19 decodeObjectOfClasses:v13 forKey:v6];
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8], @"bad type for key %@ : %@", v6, v14 format];
    }
    BOOL v15 = *a4;
    *a4 = v14;
    id v16 = v14;
  }
}

void sub_18E2FD03C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

void NSDecodeNSArrayOfClassIfPresent(void *a1, void *a2, uint64_t a3, void **a4)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v6 = a1;
  id v7 = a2;
  uint64_t v25 = v6;
  if ([v6 containsValueForKey:v7])
  {
    uint64_t v8 = objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", objc_opt_class(), a3, 0);
    uint64_t v9 = [v25 decodeObjectOfClasses:v8 forKey:v7];
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
    uint64_t v23 = (void *)v8;
    uint64_t v11 = (uint64_t *)MEMORY[0x1E4F1C3C8];
    if ((isKindOfClass & 1) == 0)
    {
      uint64_t v12 = (void *)MEMORY[0x1E4F1CA00];
      uint64_t v13 = (objc_class *)objc_opt_class();
      uint64_t v14 = NSStringFromClass(v13);
      [v12 raise:*v11, @"bad array type for key %@, class %@", v7, v14 format];
    }
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    id v15 = v9;
    uint64_t v16 = [v15 countByEnumeratingWithState:&v26 objects:v30 count:16];
    if (v16)
    {
      uint64_t v17 = *(void *)v27;
      uint64_t v18 = *v11;
      do
      {
        for (uint64_t i = 0; i != v16; ++i)
        {
          if (*(void *)v27 != v17) {
            objc_enumerationMutation(v15);
          }
          uint64_t v20 = *(void *)(*((void *)&v26 + 1) + 8 * i);
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            [MEMORY[0x1E4F1CA00] raise:v18, @"bad array element type for key %@ : %@", v7, v20 format];
          }
        }
        uint64_t v16 = [v15 countByEnumeratingWithState:&v26 objects:v30 count:16];
      }
      while (v16);
    }

    BOOL v21 = *a4;
    *a4 = v15;
    id v22 = v15;
  }
}

void sub_18E2FD2C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t NSDecodeSInt64RangedIfPresent(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  id v9 = a1;
  id v10 = a2;
  uint64_t v11 = [v9 containsValueForKey:v10];
  if (v11)
  {
    uint64_t v12 = [v9 decodeInt64ForKey:v10];
    uint64_t v13 = v12;
    if (v12 < a3 || v12 > a4) {
      [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8], @"Key '%@', value (%lld) out-of-range (%lld - %lld)", v10, v12, a3, a4 format];
    }
    *a5 = v13;
  }

  return v11;
}

void sub_18E2FD3E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void NSDecodeObjectIfPresent(void *a1, void *a2, uint64_t a3, void **a4)
{
  id v11 = a1;
  id v7 = a2;
  if ([v11 containsValueForKey:v7])
  {
    uint64_t v8 = [v11 decodeObjectOfClass:a3 forKey:v7];
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8], @"bad type for key %@", v7 format];
    }
    id v9 = *a4;
    *a4 = v8;
    id v10 = v8;
  }
}

void sub_18E2FD4DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t IsAppleInternalBuild()
{
  if (IsAppleInternalBuild_sOnce != -1) {
    dispatch_once(&IsAppleInternalBuild_sOnce, &__block_literal_global_116);
  }
  return IsAppleInternalBuild_sIsInternal;
}

void _BonjourBrowser_Start(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *a1;
  id v10 = *(void **)(*a1 + 128);
  if (v10) {
    free(v10);
  }
  *(void *)(v9 + 128) = a1[1];
  id v11 = *(void **)(v9 + 136);
  if (v11) {
    free(v11);
  }
  *(void *)(v9 + 136) = a1[2];
  uint64_t v12 = *(void **)(v9 + 144);
  if (v12) {
    free(v12);
  }
  uint64_t v13 = a1[4];
  *(void *)(v9 + 144) = a1[3];
  *(void *)(v9 + 152) = v13;
  if (!*(unsigned char *)(v9 + 96))
  {
    CFRetain((CFTypeRef)v9);
    *(unsigned char *)(v9 + 96) = 1;
    *(void *)(v9 + 104) = mach_absolute_time();
  }
  _BonjourBrowser_EnsureStarted((DNSServiceRef *)v9, a2, a3, a4, a5, a6, a7, a8);
  free(a1);
  CFRelease((CFTypeRef)v9);
}

void _BonjourBrowser_EnsureStarted(DNSServiceRef *sdRef, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9 = (unint64_t)sdRef[19];
  if ((v9 & 0x80000000000000) != 0)
  {
    _BonjourBrowser_EnsureStoppedDNSSD(sdRef);
    goto LABEL_66;
  }
  sdRefa[0] = 0;
  id v10 = sdRef + 3;
  if (!sdRef[3])
  {
    if (gLogCategory_BonjourBrowser <= 30
      && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x1Eu)))
    {
      LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_EnsureStartedDNSSD(BonjourBrowserRef)", 0x1Eu, (uint64_t)"Creating shared connection to browse for %s\n", a5, a6, a7, a8, (uint64_t)sdRef[16]);
    }
    DNSServiceErrorType Connection = DNSServiceCreateConnection(sdRef + 3);
    if (Connection)
    {
      DNSServiceErrorType v22 = Connection;
      goto LABEL_31;
    }
    DNSServiceSetDispatchQueue(sdRef[3], (dispatch_queue_t)sdRef[2]);
  }
  if (!sdRef[5])
  {
    unsigned int v19 = v9 | 0x2000000;
    if ((v9 & 0x1000000000000000) != 0) {
      unsigned int v19 = v9 & 0xFDEFFFFF | 0x2000000;
    }
    if ((v9 & 0x2000000000000000) != 0) {
      int v20 = v19;
    }
    else {
      int v20 = v9;
    }
    BOOL v21 = (const char *)sdRef[18];
    if (v21)
    {
      if (!strcmp((const char *)sdRef[18], "-1")) {
        LODWORD(v21) = -1;
      }
      else {
        LODWORD(v21) = if_nametoindex(v21);
      }
    }
    sdRefa[0] = *v10;
    if (gLogCategory_BonjourBrowser <= 30
      && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x1Eu)))
    {
      LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_EnsureStartedDNSSD(BonjourBrowserRef)", 0x1Eu, (uint64_t)"Starting browse for %s on if %s, flagsAlt 0x%X, flags %#ll{flags}", a5, a6, a7, a8, (uint64_t)sdRef[16]);
    }
    DNSServiceErrorType v22 = DNSServiceBrowse(sdRefa, v20 | 0x4000, (uint32_t)v21, (const char *)sdRef[16], (const char *)sdRef[17], (DNSServiceBrowseReply)_BonjourBrowser_BrowseHandler, sdRef);
    if (!v22)
    {
      sdRef[5] = sdRefa[0];
      if ((v9 & 0x4000000000000000) == 0) {
        goto LABEL_12;
      }
LABEL_35:
      uint64_t v23 = sdRef[6];
      if (v23)
      {
        if (gLogCategory_BonjourBrowser > 40) {
          goto LABEL_41;
        }
        if (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x28u)) {
          LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_EnsureStartedDNSSD(BonjourBrowserRef)", 0x28u, (uint64_t)"Stopping detail browse for %s, if %s, flags 0x%X\n", a5, a6, a7, a8, (uint64_t)sdRef[16]);
        }
        uint64_t v23 = sdRef[6];
        if (v23)
        {
LABEL_41:
          DNSServiceRefDeallocate(v23);
          sdRef[6] = 0;
        }
        if ((v9 & 0x1000000000000000) != 0 && (v9 & 0x2000000000000000) != 0) {
          _BonjourBrowser_RemoveAWDLServices((uint64_t)sdRef);
        }
      }
      goto LABEL_45;
    }
LABEL_31:
    if (gLogCategory_BonjourBrowser <= 60
      && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x3Cu)))
    {
      LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_EnsureStartedDNSSD(BonjourBrowserRef)", 0x3Cu, (uint64_t)"### Start browse for %s on if %s, flags 0x%llX failed: %#m\n", a5, a6, a7, a8, (uint64_t)sdRef[16]);
    }
    _BonjourBrowser_NANEnsureStopped((uint64_t)sdRef, 1, a3, a4, a5, a6, a7, a8);
    _BonjourBrowser_EnsureStoppedDNSSD(sdRef);
    goto LABEL_65;
  }
  if ((v9 & 0x4000000000000000) != 0) {
    goto LABEL_35;
  }
LABEL_12:
  if ((v9 & 0x2000000000000000) == 0 || sdRef[6])
  {
LABEL_45:
    unsigned int v24 = v9;
    goto LABEL_46;
  }
  uint64_t v18 = (const char *)sdRef[18];
  if (v18)
  {
    if (!strcmp((const char *)sdRef[18], "-1")) {
      LODWORD(v18) = -1;
    }
    else {
      LODWORD(v18) = if_nametoindex(v18);
    }
  }
  unsigned int v24 = v9 & 0xFDFFFFFF;
  sdRefa[0] = *v10;
  if (gLogCategory_BonjourBrowser <= 40
    && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x28u)))
  {
    LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_EnsureStartedDNSSD(BonjourBrowserRef)", 0x28u, (uint64_t)"Starting detail browse for %s, if %s, flags 0x%X\n", a5, a6, a7, a8, (uint64_t)sdRef[16]);
  }
  if (!DNSServiceBrowse(sdRefa, v9 & 0xFDFFBFFF | 0x4000, (uint32_t)v18, (const char *)sdRef[16], (const char *)sdRef[17], (DNSServiceBrowseReply)_BonjourBrowser_IgnoredBrowseHandler, sdRef))sdRef[6] = sdRefa[0]; {
LABEL_46:
  }
  DNSServiceRef v25 = sdRef[4];
  if ((v9 & 0x400000000000000) != 0)
  {
    if (!v25)
    {
      if (gLogCategory_BonjourBrowser <= 40
        && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x28u)))
      {
        LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_EnsureStartedDNSSD(BonjourBrowserRef)", 0x28u, (uint64_t)"Starting AWDL browse for %s, flags 0x%llX\n", a5, a6, a7, a8, (uint64_t)sdRef[16]);
      }
      LODWORD(a3) = *((_DWORD *)sdRef + 30);
      if (a3 || (a3 = if_nametoindex("awdl0"), (*((_DWORD *)sdRef + 30) = a3) != 0))
      {
        sdRefa[0] = sdRef[3];
        if (!DNSServiceBrowse(sdRefa, v24 | 0x4000, a3, (const char *)sdRef[16], (const char *)sdRef[17], (DNSServiceBrowseReply)_BonjourBrowser_BrowseHandler, sdRef))
        {
          DNSServiceErrorType v22 = 0;
          sdRef[4] = sdRefa[0];
          goto LABEL_65;
        }
      }
    }
    goto LABEL_64;
  }
  if (!v25) {
    goto LABEL_64;
  }
  if (gLogCategory_BonjourBrowser <= 40
    && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x28u)))
  {
    LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_EnsureStartedDNSSD(BonjourBrowserRef)", 0x28u, (uint64_t)"Stopping AWDL browse for %s, flags 0x%llX\n", a5, a6, a7, a8, (uint64_t)sdRef[16]);
  }
  _BonjourBrowser_RemoveAWDLServices((uint64_t)sdRef);
  long long v26 = sdRef[4];
  if (!v26)
  {
LABEL_64:
    DNSServiceErrorType v22 = 0;
    goto LABEL_65;
  }
  DNSServiceRefDeallocate(v26);
  DNSServiceErrorType v22 = 0;
  sdRef[4] = 0;
LABEL_65:
  _BonjourBrowser_HandleError((uint64_t)sdRef, v22, a3, a4, a5, a6, a7, a8, v28);
LABEL_66:
  if ((*((unsigned char *)sdRef + 159) & 2) != 0)
  {
    if (!sdRef[8])
    {
      if (gLogCategory_BonjourBrowser <= 30
        && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x1Eu)))
      {
        LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_NANEnsureStarted(BonjourBrowserRef)", 0x1Eu, (uint64_t)"NAN subscriber start: %s\n", v13, v14, v15, v16, (uint64_t)sdRef[16]);
      }
      long long v27 = objc_alloc_init(CUNANSubscriber);
      sdRef[8] = (DNSServiceRef)v27;
      [(CUNANSubscriber *)v27 setChangeFlags:4294967291];
      [(CUNANSubscriber *)v27 setControlFlags:*((unsigned int *)sdRef + 14)];
      [(CUNANSubscriber *)v27 setDispatchQueue:sdRef[2]];
      -[CUNANSubscriber setServiceType:](v27, "setServiceType:", [NSString stringWithUTF8String:sdRef[16]]);
      sdRefa[0] = (DNSServiceRef)MEMORY[0x1E4F143A8];
      sdRefa[1] = (DNSServiceRef)3221225472;
      sdRefa[2] = (DNSServiceRef)___BonjourBrowser_NANEnsureStarted_block_invoke;
      sdRefa[3] = (DNSServiceRef)&unk_1E55BD540;
      sdRefa[4] = (DNSServiceRef)v27;
      sdRefa[5] = (DNSServiceRef)sdRef;
      [(CUNANSubscriber *)v27 setEndpointFoundHandler:sdRefa];
      v31[0] = MEMORY[0x1E4F143A8];
      v31[1] = 3221225472;
      v31[2] = ___BonjourBrowser_NANEnsureStarted_block_invoke_2;
      v31[3] = &unk_1E55BD540;
      v31[4] = v27;
      v31[5] = sdRef;
      [(CUNANSubscriber *)v27 setEndpointLostHandler:v31];
      v30[0] = MEMORY[0x1E4F143A8];
      v30[1] = 3221225472;
      v30[2] = ___BonjourBrowser_NANEnsureStarted_block_invoke_3;
      v30[3] = &unk_1E55BD568;
      v30[4] = v27;
      v30[5] = sdRef;
      [(CUNANSubscriber *)v27 setEndpointChangedHandler:v30];
      v29[0] = MEMORY[0x1E4F143A8];
      v29[1] = 3221225472;
      v29[2] = ___BonjourBrowser_NANEnsureStarted_block_invoke_4;
      v29[3] = &unk_1E55BD590;
      v29[4] = v27;
      v29[5] = sdRef;
      [(CUNANSubscriber *)v27 activateWithCompletion:v29];
    }
  }
  else
  {
    _BonjourBrowser_NANEnsureStopped((uint64_t)sdRef, 0, v11, v12, v13, v14, v15, v16);
  }
}

void _BonjourBrowser_NANEnsureStopped(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 64))
  {
    if (gLogCategory_BonjourBrowser <= 30
      && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x1Eu)))
    {
      LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_NANEnsureStopped(BonjourBrowserRef, Boolean)", 0x1Eu, (uint64_t)"NAN subscriber stop: %s\n", a5, a6, a7, a8, *(void *)(a1 + 128));
    }
    if (!a2)
    {
      long long v17 = 0u;
      long long v18 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      id v10 = (void *)[*(id *)(a1 + 64) discoveredEndpoints];
      uint64_t v11 = [v10 countByEnumeratingWithState:&v15 objects:v19 count:16];
      if (v11)
      {
        uint64_t v12 = v11;
        uint64_t v13 = *(void *)v16;
        do
        {
          for (uint64_t i = 0; i != v12; ++i)
          {
            if (*(void *)v16 != v13) {
              objc_enumerationMutation(v10);
            }
            _BonjourBrowser_NANEndpointLost(a1, *(void **)(*((void *)&v15 + 1) + 8 * i));
          }
          uint64_t v12 = [v10 countByEnumeratingWithState:&v15 objects:v19 count:16];
        }
        while (v12);
      }
    }
    [*(id *)(a1 + 64) invalidate];

    *(void *)(a1 + 64) = 0;
  }
}

void _BonjourBrowser_HandleError(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v10 = *(NSObject **)(a1 + 112);
  if (a2)
  {
    if (!v10) {
      _BonjourBrowser_PostEvent(a1, 4, 0, 0);
    }
    while (1)
    {
      uint64_t v11 = *(void **)(a1 + 80);
      if (!v11) {
        break;
      }
      *(void *)(a1 + 80) = *v11;
      _BonjourBrowser_RemoveService(a1, (uint64_t)v11, 0);
      _BonjourService_Free((uint64_t)v11);
    }
    _BonjourBrowser_NANEnsureStopped(a1, 1, a3, a4, a5, a6, a7, a8);
    _BonjourBrowser_EnsureStoppedDNSSD((void *)a1);
    if (!*(void *)(a1 + 112))
    {
      uint64_t v12 = mach_absolute_time();
      unint64_t v13 = UpTicksToMilliseconds(v12 - *(void *)(a1 + 104));
      if (v13 >= 0x2911) {
        uint64_t v18 = 100;
      }
      else {
        uint64_t v18 = 10513 - v13;
      }
      if (gLogCategory_BonjourBrowser <= 50
        && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x32u)))
      {
        LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_HandleError(BonjourBrowserRef, OSStatus)", 0x32u, (uint64_t)"### Browse for %s failed, retrying in %llu ms: %#m\n", v14, v15, v16, v17, *(void *)(a1 + 128));
      }
      dispatch_source_t v19 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, *(dispatch_queue_t *)(a1 + 16));
      *(void *)(a1 + 112) = v19;
      if (v19)
      {
        CFRetain((CFTypeRef)a1);
        dispatch_set_context(*(dispatch_object_t *)(a1 + 112), (void *)a1);
        dispatch_source_set_event_handler_f(*(dispatch_source_t *)(a1 + 112), (dispatch_function_t)_BonjourBrowser_RetryTimerFired);
        dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(a1 + 112), (dispatch_function_t)_BonjourBrowser_RetryTimerCanceled);
        unsigned int v24 = *(NSObject **)(a1 + 112);
        dispatch_time_t v25 = dispatch_time(0, 1000000 * v18);
        dispatch_source_set_timer(v24, v25, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
        long long v26 = *(NSObject **)(a1 + 112);
        dispatch_resume(v26);
      }
      else if (gLogCategory_BonjourBrowser <= 60 {
             && (gLogCategory_BonjourBrowser != -1
      }
              || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x3Cu)))
      {
        LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_HandleError(BonjourBrowserRef, OSStatus)", 0x3Cu, (uint64_t)"### Bonjour retry timer failed\n", v20, v21, v22, v23, a9);
      }
    }
  }
  else if (v10)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 112));
    dispatch_release(v10);
    *(void *)(a1 + 112) = 0;
  }
}

id CUPrintDuration64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return NSPrintF((uint64_t)"%ll{dur}", a2, a3, a4, a5, a6, a7, a8, a1);
}

CFMutableDataRef OPACKEncoderCreateDataMutable(const __CFString *a1, unsigned int a2, int *a3)
{
  CFMutableDataRef Mutable = CFDataCreateMutable(0, 0);
  if (Mutable)
  {
    int v7 = OPACKEncodeObject(a1, a2, (uint64_t)_OPACKEncoderAppendCallback, (uint64_t)Mutable);
    if (v7)
    {
      CFRelease(Mutable);
      CFMutableDataRef Mutable = 0;
    }
  }
  else
  {
    int v7 = -6728;
  }
  if (a3) {
    *a3 = v7;
  }
  return Mutable;
}

uint64_t OPACKEncodeObject(const __CFString *a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  char v4 = a2;
  v10[0] = a3;
  v10[1] = a4;
  uint64_t v12 = 0;
  CFTypeRef cf = 0;
  uint64_t v13 = a2;
  if (gOPACKInitalizeOnce == -1)
  {
    if ((a2 & 2) != 0) {
      goto LABEL_4;
    }
  }
  else
  {
    dispatch_once_f(&gOPACKInitalizeOnce, 0, (dispatch_function_t)_OPACKInitializeOnce);
    if ((v4 & 2) != 0) {
      goto LABEL_4;
    }
  }
  long long v6 = *(_OWORD *)(MEMORY[0x1E4F1D530] + 32);
  *(_OWORD *)&v9.release = *(_OWORD *)(MEMORY[0x1E4F1D530] + 16);
  *(_OWORD *)&v9.equal = v6;
  *(_OWORD *)&v9.version = *MEMORY[0x1E4F1D530];
  v9.equal = (CFDictionaryEqualCallBack)_OPACKObjectsExactlyEqual;
  CFTypeRef cf = CFDictionaryCreateMutable(0, 0, &v9, 0);
  if (!cf) {
    return 4294960568;
  }
LABEL_4:
  uint64_t v7 = _OPACKEncodeObject((uint64_t)v10, a1);
  if (cf) {
    CFRelease(cf);
  }
  return v7;
}

uint64_t PrintFWriteErrorObject(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  id v10 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    int v19 = 0;
    LODWORD(v20) = 0;
    char v68 = 0;
    uint64_t v21 = *MEMORY[0x1E4F28A50];
    while (1)
    {
      if (v19)
      {
        uint64_t v22 = PrintFCore(a1, (uint64_t)" -> ", v11, v12, v13, v14, v15, v16, v67);
        if ((v22 & 0x80000000) != 0)
        {
          uint64_t v20 = v22;
          uint64_t v23 = v18;
          goto LABEL_34;
        }
        LODWORD(v20) = v22 + v20;
      }
      uint64_t v23 = [v10 userInfo];

      uint64_t v24 = [v23 objectForKeyedSubscript:@"cuErrorDesc"];

      if (v24)
      {
        uint64_t v31 = PrintFCore(a1, (uint64_t)"%@", v25, v26, v27, v28, v29, v30, v24);
        if ((v31 & 0x80000000) != 0)
        {
          uint64_t v20 = v31;
          uint64_t v17 = (void *)v24;
          goto LABEL_34;
        }
        uint64_t v20 = (v31 + v20);
        uint64_t v17 = (void *)v24;
      }
      else
      {
        uint64_t v32 = CUErrorCFErrorToString((__CFError *)v10);
        if (v32)
        {
          uint64_t v39 = PrintFCore(a1, (uint64_t)"%s", v33, v34, v35, v36, v37, v38, (uint64_t)v32);
          if ((v39 & 0x80000000) != 0) {
            goto LABEL_37;
          }
        }
        else
        {
          v69[0] = 0;
          int v40 = NSErrorToOSStatusEx(v10, &v68);
          if (v68) {
            DebugGetErrorStringEx(0, v40, v69, 128);
          }
          if (v69[0])
          {
            uint64_t v39 = PrintFCore(a1, (uint64_t)"%s", v41, v42, v43, v44, v45, v46, (uint64_t)v69);
            if ((v39 & 0x80000000) != 0) {
              goto LABEL_37;
            }
          }
          else
          {
            char v47 = [v10 domain];
            [v10 code];
            uint64_t v39 = PrintFCore(a1, (uint64_t)"%@:%ld", v48, v49, v50, v51, v52, v53, (uint64_t)v47);

            if ((v39 & 0x80000000) != 0)
            {
LABEL_37:
              uint64_t v17 = 0;
              uint64_t v20 = v39;
              goto LABEL_34;
            }
          }
        }
        uint64_t v20 = (v39 + v20);
        CFTypeID TypeID = CFStringGetTypeID();
        uint64_t v17 = CFDictionaryGetTypedValue((const __CFDictionary *)v23, @"cuErrorMsg", TypeID, 0);
        if ([v17 length])
        {
          int v61 = PrintFCore(a1, (uint64_t)" '%@'", v55, v56, v57, v58, v59, v60, (uint64_t)v17);
          uint64_t v20 = (v20 & ~(v61 >> 31)) + v61;
          if (v61 < 0) {
            goto LABEL_34;
          }
        }
      }
      uint64_t v62 = [v23 objectForKeyedSubscript:v21];

      if (!v62)
      {
        id v10 = 0;
        goto LABEL_34;
      }
      id v10 = (id)v62;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        break;
      }
      ++v19;
      uint64_t v18 = v23;
      if (v19 == 4) {
        goto LABEL_34;
      }
    }
    int v65 = PrintFCore(a1, (uint64_t)"-> ?", v11, v12, v13, v14, v15, v16, v67);
    if (v65 >= 0) {
      int v66 = v20;
    }
    else {
      int v66 = 0;
    }
    uint64_t v20 = (v66 + v65);
LABEL_34:

    return v20;
  }
  else if (v10)
  {
    uint64_t v63 = PrintFCore(a1, (uint64_t)"<<non-error>>", v11, v12, v13, v14, v15, v16, v67);

    return v63;
  }
  else
  {
    return PrintFCore(a1, (uint64_t)"kNoErr", v11, v12, v13, v14, v15, v16, a9);
  }
}

CFDictionaryRef CFDictionaryGetTypedValue(const __CFDictionary *result, const void *a2, uint64_t a3, int *a4)
{
  if (result)
  {
    uint64_t result = (const __CFDictionary *)CFDictionaryGetValue(result, a2);
    if (result)
    {
      CFDictionaryRef v6 = result;
      CFTypeID v7 = CFGetTypeID(result);
      BOOL v8 = v7 == a3;
      if (v7 == a3) {
        uint64_t result = v6;
      }
      else {
        uint64_t result = 0;
      }
      if (v8) {
        int v9 = 0;
      }
      else {
        int v9 = -6756;
      }
    }
    else
    {
      int v9 = -6727;
    }
  }
  else
  {
    int v9 = -6705;
  }
  if (a4) {
    *a4 = v9;
  }
  return result;
}

__CFError *CUErrorCFErrorToString(__CFError *result)
{
  if (result)
  {
    v1 = result;
    CFStringRef Domain = CFErrorGetDomain(result);
    int Code = CFErrorGetCode(v1);
    return (__CFError *)CUErrorDomainCodeToString(Domain, Code);
  }
  return result;
}

id NSErrorWithOSStatusF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1)
  {
    id v10 = NSErrorV((void *)*MEMORY[0x1E4F28760], a1, a2, (uint64_t)&a9);
  }
  else
  {
    id v10 = 0;
  }
  return v10;
}

id NSErrorV(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v26[3] = *MEMORY[0x1E4F143B8];
  CFStringRef v7 = a1;
  BOOL v8 = (__CFString *)v7;
  if (a2)
  {
    ErrorString = DebugGetErrorStringEx(v7, a2, 0, 0);
    NSPrintV(a3, a4);
    uint64_t v17 = (__CFString *)objc_claimAutoreleasedReturnValue();
    if (*ErrorString) {
      NSPrintF((uint64_t)"%s (%@)", v10, v11, v12, v13, v14, v15, v16, (uint64_t)ErrorString);
    }
    else {
    int v19 = NSPrintF((uint64_t)"%d (%@)", v10, v11, v12, v13, v14, v15, v16, a2);
    }
    id v20 = objc_alloc(MEMORY[0x1E4F28C58]);
    v25[0] = @"cuErrorDesc";
    v25[1] = @"cuErrorMsg";
    if (v17) {
      uint64_t v21 = v17;
    }
    else {
      uint64_t v21 = &stru_1EDD2ACE8;
    }
    v26[0] = v19;
    v26[1] = v21;
    v25[2] = *MEMORY[0x1E4F28568];
    v26[2] = v19;
    uint64_t v22 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v26 forKeys:v25 count:3];
    if (v8) {
      uint64_t v23 = v8;
    }
    else {
      uint64_t v23 = (__CFString *)*MEMORY[0x1E4F28760];
    }
    uint64_t v18 = (void *)[v20 initWithDomain:v23 code:(int)a2 userInfo:v22];
  }
  else
  {
    uint64_t v18 = 0;
  }

  return v18;
}

void sub_18E2FEDCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CUDescriptionWithLevel(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v11 = [v3 descriptionWithLevel:a2];
    goto LABEL_10;
  }
  if (a2 > 0x14u)
  {
    if a2 >= 0x32u && (objc_opt_respondsToSelector())
    {
      uint64_t v11 = [v3 shortDescription];
      goto LABEL_10;
    }
  }
  else if (objc_opt_respondsToSelector())
  {
    uint64_t v11 = [v3 detailedDescription];
    goto LABEL_10;
  }
  uint64_t v11 = NSPrintF((uint64_t)"%@", v4, v5, v6, v7, v8, v9, v10, (uint64_t)v3);
LABEL_10:
  uint64_t v12 = (void *)v11;

  return v12;
}

void sub_18E2FEEF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CUPrintPID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return NSPrintF((uint64_t)"%#{pid}", a2, a3, a4, a5, a6, a7, a8, a1);
}

id CUPrintFlags32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return NSPrintF((uint64_t)"%#{flags}", a2, a3, a4, a5, a6, a7, a8, a1);
}

__CFString *CUPrintNSDataAddress(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 length];
  uint64_t v10 = @"NULL";
  switch(__ROR8__(v2, 1))
  {
    case 0:
      goto LABEL_10;
    case 1:
      uint64_t v47 = [v1 bytes];
      NSPrintF((uint64_t)"%.2a", v11, v12, v13, v14, v15, v16, v17, v47);
      goto LABEL_9;
    case 2:
      uint64_t v48 = [v1 bytes];
      NSPrintF((uint64_t)"%.4a", v18, v19, v20, v21, v22, v23, v24, v48);
      goto LABEL_9;
    case 3:
      uint64_t v49 = [v1 bytes];
      NSPrintF((uint64_t)"%.6a", v25, v26, v27, v28, v29, v30, v31, v49);
      goto LABEL_9;
    case 4:
      uint64_t v50 = [v1 bytes];
      NSPrintF((uint64_t)"%.8a", v32, v33, v34, v35, v36, v37, v38, v50);
      goto LABEL_9;
    case 8:
      uint64_t v51 = [v1 bytes];
      NSPrintF((uint64_t)"%.16a", v39, v40, v41, v42, v43, v44, v45, v51);
      goto LABEL_9;
    default:
      if (v1)
      {
        NSPrintF((uint64_t)"<< ERROR: Bad Address Size: %zu >>", v3, v4, v5, v6, v7, v8, v9, v2);
LABEL_9:
        uint64_t v10 = (__CFString *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        uint64_t v10 = @"NULL";
      }
LABEL_10:

      return v10;
  }
}

id CUPrintNSDataHex(void *a1, uint64_t a2, int a3)
{
  id v4 = a1;
  uint64_t v5 = [v4 bytes];
  [v4 length];

  if (a3) {
    uint64_t v13 = "%H";
  }
  else {
    uint64_t v13 = "%.3H";
  }
  uint64_t v14 = NSPrintF((uint64_t)v13, v6, v7, v8, v9, v10, v11, v12, v5);
  return v14;
}

id CUPrintFlags64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return NSPrintF((uint64_t)"%#ll{flags}", a2, a3, a4, a5, a6, a7, a8, a1);
}

id NSPrintF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = NSPrintV(a1, (uint64_t)&a9);
  return v9;
}

__CFString *NSPrintV(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = 0;
  VASPrintF(&v5, a1, a2);
  uint64_t v2 = v5;
  if (v5)
  {
    uint64_t v3 = [NSString stringWithUTF8String:v5];
    free(v2);
  }
  else
  {
    uint64_t v3 = &stru_1EDD2ACE8;
  }
  return v3;
}

const char *DebugGetErrorStringEx(const __CFString *a1, int a2, char *a3, uint64_t a4)
{
  if (a1)
  {
    uint64_t v7 = (const char *)CUErrorDomainCodeToString(a1, a2);
    if (v7) {
      goto LABEL_22;
    }
  }
  if (a2 == 999 || (a2 - 100) <= 0x1F3)
  {
    if (a2 == 102)
    {
      uint64_t v7 = "EOPNOTSUPP / kA11AuthFatalErr / HTTP Processing";
      goto LABEL_22;
    }
    int v8 = a2;
    goto LABEL_12;
  }
  if (a2 == 200999 || (a2 - 200100) <= 0x1F3)
  {
    int v8 = a2 - 200000;
LABEL_12:
    uint64_t v7 = HTTPGetReasonPhrase(v8);
    if (*v7) {
      goto LABEL_22;
    }
    goto LABEL_13;
  }
  uint64_t v7 = 0;
LABEL_13:
  if (MEMORY[0x1E4F5E2B0])
  {
    uint64_t v9 = CUErrorCodesTableGet();
    uint64_t v7 = *(const char **)(v9 + 8);
    if (v7)
    {
      if (*(_DWORD *)v9 == a2) {
        goto LABEL_22;
      }
      uint64_t v10 = (const char **)(v9 + 24);
      while (1)
      {
        uint64_t v7 = *v10;
        if (!*v10) {
          break;
        }
        int v11 = *((_DWORD *)v10 - 2);
        v10 += 2;
        if (v11 == a2) {
          goto LABEL_22;
        }
      }
    }
  }
  if (!v7) {
    uint64_t v7 = "";
  }
LABEL_22:
  if (!a3 || !a4) {
    return v7;
  }
  uint64_t v12 = a4 - 1;
  uint64_t v13 = a3;
  if (a4 - 1 >= 1)
  {
    uint64_t v13 = a3;
    do
    {
      char v14 = *v7;
      if (!*v7) {
        break;
      }
      ++v7;
      *v13++ = v14;
      --v12;
    }
    while (v12 > 0);
  }
  *uint64_t v13 = 0;
  return a3;
}

uint64_t CUErrorDomainCodeToString(const __CFString *a1, int a2)
{
  int v11 = 0;
  uint64_t v12 = 0;
  CFStringGetOrCopyCStringUTF8(a1, &v12, (UInt8 **)&v11, 0);
  uint64_t v3 = v12;
  if (!v12) {
    return 0;
  }
  if (MEMORY[0x1E4F5E2B8] && (uint64_t v4 = CUErrorDomainTableGet(), (v5 = *(const char **)v4) != 0))
  {
    while (1)
    {
      if (!strcasecmp(v5, v3))
      {
        uint64_t v6 = *(void *)(v4 + 8);
        uint64_t v7 = *(void *)(v6 + 8);
        if (v7)
        {
          uint64_t v8 = 0;
          do
          {
            if (*(_DWORD *)v6 == a2) {
              uint64_t v8 = v7;
            }
            uint64_t v7 = *(void *)(v6 + 24);
            v6 += 16;
          }
          while (v7);
          if (v8) {
            break;
          }
        }
      }
      uint64_t v9 = *(const char **)(v4 + 16);
      v4 += 16;
      uint64_t v5 = v9;
      if (!v9) {
        goto LABEL_12;
      }
    }
  }
  else
  {
LABEL_12:
    uint64_t v8 = 0;
  }
  if (v11) {
    free(v11);
  }
  return v8;
}

uint64_t _OPACKEncodeDictionaryApplier(uint64_t result, uint64_t a2, void *a3)
{
  if (!*((_DWORD *)a3 + 4))
  {
    uint64_t result = _OPACKEncodeObject(*a3, result);
    if (result || (uint64_t result = _OPACKEncodeObject(*a3, a2), result)) {
      *((_DWORD *)a3 + 4) = result;
    }
  }
  return result;
}

uint64_t _OPACKEncodeObject(uint64_t a1, const __CFString *a2)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  CFTypeID v4 = CFGetTypeID(a2);
  if (v4 == gCFStringType_12224)
  {
    uint64_t v40 = 0;
    valuePtr = 0;
    size_t v39 = 0;
    if (!*(void *)(a1 + 16) || CFStringGetLength(a2) < 1) {
      goto LABEL_6;
    }
    LOBYTE(context) = 0;
    uint64_t v5 = _OPACKEncodeUID(a1, a2, &context);
    if (!v5)
    {
      if (!(_BYTE)context)
      {
LABEL_6:
        uint64_t v6 = CFStringGetOrCopyCStringUTF8(a2, &valuePtr, (UInt8 **)&v40, &v39);
        if (!v6)
        {
          if (v39 > 0x20)
          {
            if (v39 > 0xFF)
            {
              if (v39 >> 16)
              {
                if (HIDWORD(v39))
                {
                  LOBYTE(context) = 100;
                  *(void *)((char *)&context + 1) = v39;
                  uint64_t v7 = 9;
                }
                else
                {
                  LOBYTE(context) = 99;
                  *(_DWORD *)((char *)&context + 1) = v39;
                  uint64_t v7 = 5;
                }
              }
              else
              {
                LOBYTE(context) = 98;
                *(_WORD *)((char *)&context + 1) = v39;
                uint64_t v7 = 3;
              }
            }
            else
            {
              LOBYTE(context) = 97;
              BYTE1(context) = v39;
              uint64_t v7 = 2;
            }
          }
          else
          {
            LOBYTE(context) = v39 + 64;
            uint64_t v7 = 1;
          }
          uint64_t v6 = (*(uint64_t (**)(long long *, uint64_t, void, void))a1)(&context, v7, 0, *(void *)(a1 + 8));
          if (!v6)
          {
            if (v39) {
              uint64_t v6 = (*(uint64_t (**)(const char *, size_t, void, void))a1)(valuePtr, v39, 0, *(void *)(a1 + 8));
            }
            else {
              uint64_t v6 = 0;
            }
          }
        }
        if (v40) {
          free(v40);
        }
        return v6;
      }
      return 0;
    }
    return v5;
  }
  CFTypeID v8 = v4;
  if (v4 == gCFNumberType_12218)
  {
    if (CFNumberIsFloatType((CFNumberRef)a2))
    {
      if (!*(void *)(a1 + 16)) {
        goto LABEL_14;
      }
      LOBYTE(context) = 0;
      uint64_t v5 = _OPACKEncodeUID(a1, a2, &context);
      if (v5) {
        return v5;
      }
      if (!(_BYTE)context)
      {
LABEL_14:
        if (CFNumberGetByteSize((CFNumberRef)a2) > 4)
        {
          valuePtr = 0;
          CFNumberGetValue((CFNumberRef)a2, kCFNumberFloat64Type, &valuePtr);
          LOBYTE(context) = 54;
          *(void *)((char *)&context + 1) = valuePtr;
          uint64_t v9 = 9;
        }
        else
        {
          LODWORD(valuePtr) = 0;
          uint64_t v9 = 5;
          CFNumberGetValue((CFNumberRef)a2, kCFNumberFloat32Type, &valuePtr);
          LOBYTE(context) = 53;
          *(_DWORD *)((char *)&context + 1) = valuePtr;
        }
        return (*(uint64_t (**)(long long *, uint64_t, void, void))a1)(&context, v9, 0, *(void *)(a1 + 8));
      }
      return 0;
    }
    if ((*(unsigned char *)(a1 + 32) & 0x10) == 0)
    {
      valuePtr = 0;
      CFNumberGetValue((CFNumberRef)a2, kCFNumberSInt64Type, &valuePtr);
      uint64_t v17 = valuePtr;
      if (*(void *)(a1 + 16) && (unint64_t)(valuePtr - 40) <= 0xFFFFFFFFFFFFFFD6)
      {
        LOBYTE(context) = 0;
        uint64_t v6 = _OPACKEncodeUID(a1, a2, &context);
        if (v6 || (_BYTE)context) {
          return v6;
        }
        uint64_t v17 = valuePtr;
      }
      if (v17 == (const char *)(char)v17)
      {
        if (((_BYTE)v17 + 1) > 0x28u)
        {
          LOBYTE(context) = 48;
          BYTE1(context) = (_BYTE)v17;
          uint64_t v9 = 2;
        }
        else
        {
          LOBYTE(context) = (_BYTE)v17 + 8;
          uint64_t v9 = 1;
        }
      }
      else if (v17 == (const char *)(int)v17)
      {
        LOBYTE(context) = 50;
        *(_WORD *)((char *)&context + 1) = (_WORD)v17;
        BYTE3(context) = BYTE2(v17);
        uint64_t v9 = 5;
        BYTE4(context) = BYTE3(v17);
      }
      else
      {
        LOBYTE(context) = 51;
        *(void *)((char *)&context + 1) = v17;
        uint64_t v9 = 9;
      }
      return (*(uint64_t (**)(long long *, uint64_t, void, void))a1)(&context, v9, 0, *(void *)(a1 + 8));
    }
    valuePtr = 0;
    unint64_t v42 = 0;
    CFNumberGetValue((CFNumberRef)a2, kCFNumberMaxType|kCFNumberSInt8Type, &valuePtr);
    unint64_t v27 = (unint64_t)valuePtr;
    unint64_t v26 = v42;
    if (*(void *)(a1 + 16)
      && __PAIR128__(-1, -42) >= __PAIR128__((unint64_t)&valuePtr[(v42 >= 0x28) - 1], v42 - 40))
    {
      LOBYTE(context) = 0;
      uint64_t v5 = _OPACKEncodeUID(a1, a2, &context);
      if (v5) {
        return v5;
      }
      if ((_BYTE)context) {
        return 0;
      }
    }
    else if (v42 + 1 <= 0x28)
    {
      LOBYTE(context) = v42 + 8;
      uint64_t v14 = 1;
LABEL_112:
      uint64_t v12 = *(uint64_t (**)(const char **, uint64_t, void, uint64_t))a1;
      uint64_t v11 = *(void *)(a1 + 8);
      p_long long context = (const char **)&context;
      return v12(p_context, v14, 0, v11);
    }
    if (v26 + 128 > 0xFF)
    {
      if (v26 < 0xFFFFFFFFFFFF8000) {
        unint64_t v32 = v27;
      }
      else {
        unint64_t v32 = v27 + 1;
      }
      if (v32 | ((v26 + 0x8000) >> 16))
      {
        if (v26 < 0xFFFFFFFF80000000) {
          unint64_t v33 = v27;
        }
        else {
          unint64_t v33 = v27 + 1;
        }
        if (v33 | ((v26 + 0x80000000) >> 32))
        {
          if (v26 < 0x8000000000000000) {
            uint64_t v34 = (const char *)v27;
          }
          else {
            uint64_t v34 = (const char *)(v27 + 1);
          }
          if (v34)
          {
            LOBYTE(context) = 52;
            *(void *)((char *)&context + 1) = v26;
            BYTE9(context) = v27;
            unint64_t v35 = HIDWORD(v27);
            unint64_t v36 = v27 >> 24;
            unint64_t v37 = v27 >> 16;
            unint64_t v38 = v27 >> 8;
            *(_DWORD *)((char *)&context + 10) = vmovn_s16((int16x8_t)vqtbl4q_s8(*(int8x16x4_t *)(&v22 - 1), (int8x16_t)xmmword_18E416F50)).u32[0];
            BYTE14(context) = BYTE5(v27);
            HIBYTE(context) = BYTE6(v27);
            LOBYTE(v44) = HIBYTE(v27);
            uint64_t v14 = 17;
          }
          else
          {
            LOBYTE(context) = 51;
            *(void *)((char *)&context + 1) = v26;
            uint64_t v14 = 9;
          }
        }
        else
        {
          LOBYTE(context) = 50;
          *(_WORD *)((char *)&context + 1) = v26;
          BYTE3(context) = BYTE2(v26);
          uint64_t v14 = 5;
          BYTE4(context) = BYTE3(v26);
        }
      }
      else
      {
        LOBYTE(context) = 49;
        *(_WORD *)((char *)&context + 1) = v26;
        uint64_t v14 = 3;
      }
    }
    else
    {
      LOBYTE(context) = 48;
      BYTE1(context) = v26;
      uint64_t v14 = 2;
    }
    goto LABEL_112;
  }
  if (v4 == gCFBooleanType_12220)
  {
    if ((const __CFString *)*MEMORY[0x1E4F1CFD0] == a2) {
      char v10 = 1;
    }
    else {
      char v10 = 2;
    }
    goto LABEL_20;
  }
  if (v4 == gCFDictionaryType_12223)
  {
    CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)a2);
    char v16 = Count - 32;
    if (Count >= 15) {
      char v16 = -17;
    }
    LOBYTE(valuePtr) = v16;
    uint64_t v5 = (*(uint64_t (**)(const char **, uint64_t, void, void))a1)(&valuePtr, 1, 0, *(void *)(a1 + 8));
    if (v5) {
      return v5;
    }
    if (Count >= 1)
    {
      uint64_t v44 = 0;
      long long context = (unint64_t)a1;
      CFDictionaryApplyFunction((CFDictionaryRef)a2, (CFDictionaryApplierFunction)_OPACKEncodeDictionaryApplier, &context);
      uint64_t v6 = v44;
      if (v44) {
        return v6;
      }
    }
    if (valuePtr != 239) {
      return 0;
    }
    LOBYTE(valuePtr) = 3;
    uint64_t v12 = *(uint64_t (**)(const char **, uint64_t, void, uint64_t))a1;
    uint64_t v11 = *(void *)(a1 + 8);
    p_long long context = &valuePtr;
    goto LABEL_21;
  }
  if (v4 == gCFArrayType_12219)
  {
    CFIndex v18 = CFArrayGetCount((CFArrayRef)a2);
    char v19 = v18 - 48;
    if (v18 >= 15) {
      char v19 = -33;
    }
    LOBYTE(context) = v19;
    uint64_t v5 = (*(uint64_t (**)(long long *, uint64_t, void, void))a1)(&context, 1, 0, *(void *)(a1 + 8));
    if (v5) {
      return v5;
    }
    if (v18 >= 1)
    {
      CFIndex v20 = 0;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a2, v20);
        uint64_t v5 = _OPACKEncodeObject(a1, ValueAtIndex);
        if (v5) {
          return v5;
        }
      }
      while (v18 != ++v20);
    }
    if (context != 223) {
      return 0;
    }
    char v10 = 3;
    goto LABEL_20;
  }
  if (v4 == gCFDataType_12221)
  {
    return _OPACKEncodeData(a1, (CFDataRef)a2);
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v29 = a1;
    CFUUIDRef v30 = (const __CFUUID *)a2;
    int v31 = 1;
LABEL_75:
    return _OPACKEncodeUUID(v29, v30, v31);
  }
  if (v8 == gCFUUIDType)
  {
    uint64_t v29 = a1;
    CFUUIDRef v30 = (const __CFUUID *)a2;
    int v31 = 0;
    goto LABEL_75;
  }
  if ((const __CFString *)*MEMORY[0x1E4F1D260] == a2)
  {
    char v10 = 4;
LABEL_20:
    LOBYTE(context) = v10;
    uint64_t v12 = *(uint64_t (**)(const char **, uint64_t, void, uint64_t))a1;
    uint64_t v11 = *(void *)(a1 + 8);
    p_long long context = (const char **)&context;
LABEL_21:
    uint64_t v14 = 1;
    return v12(p_context, v14, 0, v11);
  }
  if (v8 != gCFDateType_12222) {
    return 4294960561;
  }
  return _OPACKEncodeDate(a1, a2);
}

uint64_t _OPACKEncoderAppendCallback(UInt8 *bytes, CFIndex length, int a3, CFMutableDataRef theData)
{
  return 0;
}

uint64_t _OPACKEncodeUID(uint64_t a1, const void *a2, unsigned char *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  CFStringRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), a2);
  if (!Value)
  {
    CFTypeID v8 = *(__CFDictionary **)(a1 + 16);
    uint64_t v9 = (const void *)(*(void *)(a1 + 24) + 1);
    *(void *)(a1 + 24) = v9;
    CFDictionaryAddValue(v8, a2, v9);
    uint64_t result = 0;
    *a3 = 0;
    return result;
  }
  if ((unint64_t)Value > 0x21)
  {
    if ((unint64_t)Value > 0x100)
    {
      if ((unint64_t)Value > 0x10000)
      {
        if ((unint64_t)Value >= 0x1000001)
        {
          if ((unint64_t)Value > 0x100000000) {
            return 4294960586;
          }
          char v11 = -60;
          int v12 = Value - 1;
          uint64_t v7 = 5;
        }
        else
        {
          char v11 = -61;
          LOWORD(v12) = (_WORD)Value - 1;
          BYTE2(v12) = (Value - 1) >> 16;
          uint64_t v7 = 4;
        }
      }
      else
      {
        char v11 = -62;
        LOWORD(v12) = (_WORD)Value - 1;
        uint64_t v7 = 3;
      }
    }
    else
    {
      char v11 = -63;
      LOBYTE(v12) = (_BYTE)Value - 1;
      uint64_t v7 = 2;
    }
  }
  else
  {
    char v11 = (_BYTE)Value - 97;
    uint64_t v7 = 1;
  }
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, void, void))a1)(&v11, v7, 0, *(void *)(a1 + 8));
  if (!result) {
    *a3 = 1;
  }
  return result;
}

uint64_t CFStringGetOrCopyCStringUTF8(const __CFString *a1, const char **a2, UInt8 **a3, size_t *a4)
{
  CStringPtr = CFStringGetCStringPtr(a1, 0x8000100u);
  if (CStringPtr)
  {
    uint64_t v9 = CStringPtr;
    if (!a4)
    {
      char v11 = 0;
      goto LABEL_9;
    }
    size_t v10 = strlen(CStringPtr);
    char v11 = 0;
    goto LABEL_7;
  }
  CFIndex Length = CFStringGetLength(a1);
  CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  CFIndex usedBufLen = MaximumSizeForEncoding;
  uint64_t v14 = (UInt8 *)malloc_type_malloc(MaximumSizeForEncoding + 1, 0xCF0805A1uLL);
  if (!v14) {
    return 4294960568;
  }
  char v11 = v14;
  v17.location = 0;
  v17.size_t length = Length;
  if (CFStringGetBytes(a1, v17, 0x8000100u, 0, 0, v14, MaximumSizeForEncoding, &usedBufLen) != Length)
  {
    free(v11);
    return 4294960596;
  }
  size_t v10 = usedBufLen;
  v11[usedBufLen] = 0;
  uint64_t v9 = (const char *)v11;
  if (a4) {
LABEL_7:
  }
    *a4 = v10;
LABEL_9:
  uint64_t result = 0;
  *a2 = v9;
  *a3 = v11;
  return result;
}

uint64_t LogPrintF_safe(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return LogPrintV(a1, a2, a3, a4, (uint64_t)&a9);
}

uint64_t LogPrintF(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return LogPrintV(a1, a2, a3, a4, (uint64_t)&a9);
}

uint64_t LogPrintV(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  uint64_t v80 = a5;
  memset(v82, 0, 512);
  int8x16_t __s = 0;
  uint64_t v79 = 0;
  int v8 = a3 & 0x4200000;
  if ((a3 & 0x4200000) != 0)
  {
    uint64_t v79 = v80;
    VASPrintF((void **)&__s, a4, v80);
  }
  LogUtils_EnsureInitialized();
  pthread_mutex_lock(&gLogUtilsLock);
  int v14 = 0;
  *(void *)&v82[0] = a1;
  DWORD2(v82[0]) = a3;
  BYTE12(v82[0]) = 0;
  uint64_t v83 = 0;
  char v84 = 0;
  if ((a3 & 0x80000) == 0)
  {
    int v15 = *(_DWORD *)(a1 + 16);
    if ((a3 & 0x400000) == 0 && *(_DWORD *)(a1 + 88))
    {
      if (!*(void *)(a1 + 80)) {
        *(void *)(a1 + 80) = *(void *)(a1 + 72) + mach_absolute_time();
      }
      if (mach_absolute_time() >= *(void *)(a1 + 80))
      {
        unsigned int v16 = 0;
        *(void *)(a1 + 80) = 0;
        *(_DWORD *)(a1 + 92) = 0;
      }
      else
      {
        unsigned int v16 = *(_DWORD *)(a1 + 92);
      }
      if (v16 >= *(_DWORD *)(a1 + 88))
      {
        pthread_mutex_unlock(&gLogUtilsLock);
        uint64_t v53 = 0;
        uint64_t v54 = __s;
        goto LABEL_81;
      }
      *(_DWORD *)(a1 + 92) = v16 + 1;
    }
    if (v15)
    {
      int v17 = SNPrintF((uint64_t)v81, 64, (uint64_t)"%N ", v9, v10, v11, v12, v13, v76);
      if (v17 >= 1) {
        _LogPrintFWrite((uint64_t)v82, v81, v17, 1);
      }
    }
    if ((a3 >> 14) & 0x40 | (a3 >> 17) & 0x80 | v15 & 0xFE)
    {
      int v18 = CPrintF((uint64_t)_LogPrintFCallBack, (uint64_t)v82, (uint64_t)"[", v9, v10, v11, v12, v13, v76);
      int v25 = v18 & ~(v18 >> 31);
      int v26 = v25;
      if ((v15 & 4) != 0)
      {
        unint64_t v27 = getprogname();
        int v33 = CPrintF((uint64_t)_LogPrintFCallBack, (uint64_t)v82, (uint64_t)"%s", v28, v29, v30, v31, v32, (uint64_t)v27);
        int v26 = (v33 & ~(v33 >> 31)) + v25;
      }
      if ((v15 & 2) != 0)
      {
        if (v25 == v26) {
          uint64_t v34 = "";
        }
        else {
          uint64_t v34 = ":";
        }
        getpid();
        int v40 = CPrintF((uint64_t)_LogPrintFCallBack, (uint64_t)v82, (uint64_t)"%s%llu", v35, v36, v37, v38, v39, (uint64_t)v34);
        v26 += v40 & ~(v40 >> 31);
      }
      if ((v15 & 8) != 0)
      {
        uint64_t v55 = "";
        if (v25 != v26) {
          uint64_t v55 = ",";
        }
        uint64_t v56 = "%s%s";
      }
      else
      {
        if ((v15 & 0x20) == 0)
        {
          if (!((a3 >> 14) & 0x40 | v15 & 0x40)) {
            goto LABEL_27;
          }
          goto LABEL_51;
        }
        uint64_t v55 = "";
        if (v25 != v26) {
          uint64_t v55 = ",";
        }
        uint64_t v56 = "%s%.*s";
      }
      int v57 = CPrintF((uint64_t)_LogPrintFCallBack, (uint64_t)v82, (uint64_t)v56, v20, v21, v22, v23, v24, (uint64_t)v55);
      v26 += v57 & ~(v57 >> 31);
      if (!((a3 >> 14) & 0x40 | v15 & 0x40))
      {
LABEL_27:
        if (!((a3 >> 17) & 0x80 | v15 & 0x80)) {
          goto LABEL_28;
        }
        goto LABEL_54;
      }
LABEL_51:
      uint64_t v58 = "";
      if (v25 != v26) {
        uint64_t v58 = ",";
      }
      int v59 = CPrintF((uint64_t)_LogPrintFCallBack, (uint64_t)v82, (uint64_t)"%s%s", v20, v21, v22, v23, v24, (uint64_t)v58);
      v26 += v59 & ~(v59 >> 31);
      if (!((a3 >> 17) & 0x80 | v15 & 0x80))
      {
LABEL_28:
        if ((v15 & 0x10) == 0)
        {
LABEL_33:
          int v48 = CPrintF((uint64_t)_LogPrintFCallBack, (uint64_t)v82, (uint64_t)"] ", v20, v21, v22, v23, v24, v77);
          int v14 = (v48 & ~(v48 >> 31)) + v26;
          goto LABEL_35;
        }
LABEL_29:
        if (v25 == v26) {
          uint64_t v41 = "";
        }
        else {
          uint64_t v41 = "@";
        }
        _LULevelToString(a3, (uint64_t)v81, v19, v20, v21, v22, v23, v24);
        int v47 = CPrintF((uint64_t)_LogPrintFCallBack, (uint64_t)v82, (uint64_t)"%s%s", v42, v43, v44, v45, v46, (uint64_t)v41);
        v26 += v47 & ~(v47 >> 31);
        goto LABEL_33;
      }
LABEL_54:
      uint64_t v60 = pthread_self();
      pthread_getname_np(v60, v81, 0x40uLL);
      if (!v81[0]) {
        dispatch_queue_get_label(0);
      }
      int v66 = "";
      if (v25 != v26) {
        int v66 = ",";
      }
      int v67 = CPrintF((uint64_t)_LogPrintFCallBack, (uint64_t)v82, (uint64_t)"%s%s", v61, v62, v63, v64, v65, (uint64_t)v66);
      v26 += v67 & ~(v67 >> 31);
      if ((v15 & 0x10) == 0) {
        goto LABEL_33;
      }
      goto LABEL_29;
    }
    int v14 = 0;
  }
LABEL_35:
  int v49 = VCPrintF(_LogPrintFCallBack, v82, a4, v80);
  int v50 = v49 & ~(v49 >> 31);
  char v84 = 1;
  int v51 = _LogPrintFCallBack("", 0, (uint64_t)v82);
  int v52 = v14 + (v51 & ~(v51 >> 31));
  pthread_mutex_unlock(&gLogUtilsLock);
  if ((a3 & 0x10000) != 0
    && gLogCategory_DebugServicesStackTrace <= 254
    && (gLogCategory_DebugServicesStackTrace != -1
     || _LogCategory_Initialize((uint64_t)&gLogCategory_DebugServicesStackTrace, 0xFEu))
    && gLogCategory_DebugServicesLogging <= 90
    && (gLogCategory_DebugServicesLogging != -1
     || _LogCategory_Initialize((uint64_t)&gLogCategory_DebugServicesLogging, 0x5Au)))
  {
    LogPrintF(&gLogCategory_DebugServicesLogging, "OSStatus DebugStackTrace(LogLevel)", 90, "### stack tracing not supported on this platform\n");
  }
  uint64_t v53 = (v50 + v52);
  if ((a3 & 0x20000) != 0 && DebugIsDebuggerPresent()) {
    __debugbreak();
  }
  uint64_t v54 = __s;
  if (v8 && __s)
  {
    char v68 = &__s[strlen(__s)];
    do
    {
      uint64_t v69 = v68;
      if (v68 <= __s) {
        break;
      }
      --v68;
    }
    while (*(v69 - 1) == 10);
    *uint64_t v69 = 0;
    if (ReportCriticalError_sInitOnce != -1) {
      dispatch_once(&ReportCriticalError_sInitOnce, &__block_literal_global_256_10735);
    }
    CFStringRef v70 = CFStringCreateWithCString(0, v54, 0x8000100u);
    if (v70)
    {
      if ((a3 & 0x200000) == 0) {
        goto LABEL_73;
      }
    }
    else
    {
      CFStringRef v70 = @"<< No memory for reason >>";
      CFRetain(@"<< No memory for reason >>");
      if ((a3 & 0x200000) == 0)
      {
LABEL_73:
        int v71 = (void (*)(CFStringRef, void, uint64_t))ReportCriticalError_sWriteStackShot_f;
        if (ReportCriticalError_sWriteStackShot_f)
        {
          uint64_t v72 = getpid();
          v71(v70, 0, v72);
        }
        else
        {
          syslog(5, "### WriteStackShot() missing: %s");
        }
LABEL_80:
        CFRelease(v70);
        goto LABEL_81;
      }
    }
    v73 = (void (*)(uint64_t, void, CFStringRef))ReportCriticalError_sSimulateCrash_f;
    if (ReportCriticalError_sSimulateCrash_f)
    {
      uint64_t v74 = getpid();
      v73(v74, 0, v70);
    }
    else
    {
      syslog(5, "### SimulateCrash() missing: %s");
    }
    goto LABEL_80;
  }
LABEL_81:
  if (v54) {
    free(v54);
  }
  return v53;
}

void LogUtils_EnsureInitialized()
{
  if ((gLogCFInitialized & 1) == 0 && (gLogUtilsInitializing & 1) == 0)
  {
    pthread_mutex_lock(&gLogUtilsLock);
    gLogUtilsInitializing = 1;
    if ((gLogCFInitialized & 1) == 0)
    {
      gLogCFInitialized = 1;
      notify_register_dispatch("com.apple.managedconfiguration.defaultsdidchange", (int *)&gLogUtilsMCDefaultsChangedToken, MEMORY[0x1E4F14428], &__block_literal_global_11486);
      _LogUtils_ReadCFPreferences(0);
    }
    gLogUtilsInitializing = 0;
    pthread_mutex_unlock(&gLogUtilsLock);
  }
}

void _LogUtils_ReadCFPreferences(int a1)
{
  if (gLogCFPrefsAppID) {
    CFStringRef v2 = (const __CFString *)gLogCFPrefsAppID;
  }
  else {
    CFStringRef v2 = (const __CFString *)*MEMORY[0x1E4F1D3D8];
  }
  CFPreferencesAppSynchronize(v2);
  CFStringRef v3 = (const __CFString *)CFPreferencesCopyAppValue(@"logconfig", v2);
  if (v3)
  {
    CFStringRef v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFStringGetTypeID()
      && ((a1 & 4) != 0
       || v4 != (const __CFString *)gLogCFLastControlPref
       && (!gLogCFLastControlPref || !CFEqual(v4, (CFTypeRef)gLogCFLastControlPref))))
    {
      _LogControlLockedCF(v4, a1 | 2);
      uint64_t v6 = (const void *)gLogCFLastControlPref;
      CFRetain(v4);
      gLogCFLastControlPref = (uint64_t)v4;
      if (v6) {
        CFRelease(v6);
      }
    }
    CFRelease(v4);
  }
}

uint64_t CUXPCEncodeObject(void *a1, const char *a2, void *a3)
{
  if (a3)
  {
    id v5 = a3;
    id v6 = a1;
    xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
    [v5 encodeWithXPCObject:v7];

    xpc_dictionary_set_value(v6, a2, v7);
  }
  return 1;
}

uint64_t GestaltGetDeviceClass()
{
  if (GestaltGetDeviceClass_sOnce != -1) {
    dispatch_once(&GestaltGetDeviceClass_sOnce, &__block_literal_global_13498);
  }
  return GestaltGetDeviceClass_deviceClass;
}

uint64_t NormalizeUUIDString(char *a1, size_t a2, long long *a3, char a4, char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t result = StringToUUIDEx(a1, a2, a4 & 1, a3, &v13, a6, a7, a8);
  unsigned int v12 = result;
  if (!result)
  {
    UUIDtoCStringFlags(&v13, 16, a3, a4, a5, (int *)&v12);
    return v12;
  }
  return result;
}

char *UUIDtoCStringFlags(unsigned char *a1, uint64_t a2, long long *a3, char a4, char *__str, int *a6)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (a2 == 1 && a3)
  {
    int v8 = 0;
    long long v20 = *a3;
    if (a4) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = 3;
    }
    uint64_t v10 = (unsigned __int8 *)&v20;
    *(unsigned char *)((unint64_t)&v20 | v9) = *a1;
    goto LABEL_24;
  }
  if (a2 == 2 && a3)
  {
    long long v20 = *a3;
    int v8 = 0;
    if (a4)
    {
      LOBYTE(v20) = a1[1];
      BYTE1(v20) = *a1;
      goto LABEL_23;
    }
    __int16 v11 = *(_WORD *)a1;
LABEL_15:
    WORD1(v20) = v11;
LABEL_23:
    uint64_t v10 = (unsigned __int8 *)&v20;
    goto LABEL_24;
  }
  if (a2 == 4 && a3)
  {
    long long v20 = *a3;
    int v8 = 0;
    if (a4)
    {
      BYTE3(v20) = *a1;
      BYTE2(v20) = a1[1];
      BYTE1(v20) = a1[2];
      LOBYTE(v20) = a1[3];
      goto LABEL_23;
    }
    LOWORD(v20) = *(_WORD *)a1;
    __int16 v11 = *((_WORD *)a1 + 1);
    goto LABEL_15;
  }
  uint64_t v10 = (unsigned __int8 *)&unk_18E418DAA;
  if (a2 == 16)
  {
    uint64_t v10 = a1;
    int v8 = 0;
  }
  else
  {
    int v8 = -6743;
  }
  if (!a3) {
    goto LABEL_29;
  }
LABEL_24:
  if ((a4 & 2) == 0
    || (*(void *)(v10 + 4) == *(void *)((char *)a3 + 4)
      ? (BOOL v12 = *((unsigned int *)v10 + 3) == (unint64_t)*((unsigned int *)a3 + 3))
      : (BOOL v12 = 0),
        !v12))
  {
LABEL_29:
    if (a4)
    {
      uint64_t v13 = v10[3];
      uint64_t v14 = v10[2];
      uint64_t v15 = v10[1];
      uint64_t v16 = *v10;
      uint64_t v17 = v10[5];
      uint64_t v18 = v10[4];
    }
    else
    {
      uint64_t v13 = *v10;
      uint64_t v14 = v10[1];
      uint64_t v15 = v10[2];
      uint64_t v16 = v10[3];
      uint64_t v17 = v10[4];
      uint64_t v18 = v10[5];
    }
    snprintf(__str, 0x25uLL, "%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x", v13, v14, v15, v16, v17, v18);
    goto LABEL_33;
  }
  snprintf(__str, 0x25uLL, "%x");
LABEL_33:
  if (a6) {
    *a6 = v8;
  }
  return __str;
}

uint64_t StringToUUIDEx(char *__s, size_t a2, int a3, _OWORD *a4, _OWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v11 = a2;
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (a2 == -1) {
    size_t v11 = strlen(__s);
  }
  unint64_t v23 = 0;
  uint64_t v24 = 0;
  if (a3) {
    int v13 = SNScanF(__s, v11, "%2hhx%2hhx%2hhx%2hhx-%2hhx%2hhx-%2hhx%2hhx-%2hhx%2hhx-%2hhx%2hhx%2hhx%2hhx%2hhx%2hhx%n", (uint64_t)&v25 + 4, (uint64_t)&v25 + 7, (uint64_t)&v25 + 6, (uint64_t)&v24 + 4, a8, (int)&v25 + 3);
  }
  else {
    int v13 = SNScanF(__s, v11, "%2hhx%2hhx%2hhx%2hhx-%2hhx%2hhx-%2hhx%2hhx-%2hhx%2hhx-%2hhx%2hhx%2hhx%2hhx%2hhx%2hhx%n", (uint64_t)&v25 + 5, (uint64_t)&v25 + 6, (uint64_t)&v25 + 7, (uint64_t)&v24 + 4, a8, (int)&v25);
  }
  int v19 = v13;
  if (!a4 || v13 == 16)
  {
    uint64_t result = 4294960554;
    if (v19 != 16 || HIDWORD(v24) != 36) {
      return result;
    }
    if (a5)
    {
      uint64_t result = 0;
      *a5 = v25;
      return result;
    }
    return 0;
  }
  int v20 = SNScanF(__s, v11, "%llx%n", v14, v15, v16, v17, v18, (int)&v23);
  uint64_t result = 4294960554;
  if (v20 != 1) {
    return result;
  }
  unsigned int v22 = v23;
  if (HIDWORD(v23) || v24 != v11) {
    return result;
  }
  if (!a5) {
    return 0;
  }
  *a5 = *a4;
  uint64_t result = 0;
  if (!a3) {
    unsigned int v22 = bswap32(v22);
  }
  *(_DWORD *)a5 = v22;
  return result;
}

uint64_t SNScanF(char *a1, size_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  return VSNScanF(a1, a2, a3, &a9);
}

uint64_t VSNScanF(char *__s, size_t a2, unsigned __int8 *a3, int *a4)
{
  id v5 = __s;
  uint64_t v127 = *MEMORY[0x1E4F143B8];
  unint64_t v125 = a4;
  if (a2 == -1) {
    a2 = strlen(__s);
  }
  unsigned int v121 = 0;
  unint64_t v123 = &v5[a2];
  uint64_t v6 = MEMORY[0x1E4F14390];
  double v124 = 0.0;
  int v120 = (int)v5;
LABEL_4:
  while (2)
  {
    while (2)
    {
      uint64_t v7 = *a3;
      if ((char)*a3 < 0) {
        int v8 = __maskrune(v7, 0x4000uLL);
      }
      else {
        int v8 = *(_DWORD *)(v6 + 4 * v7 + 60) & 0x4000;
      }
      if (v8)
      {
        do
        {
          while (1)
          {
            int v9 = (char)*++a3;
            uint64_t v10 = v9;
            if (v9 < 0) {
              break;
            }
            if ((*(_DWORD *)(v6 + 4 * v10 + 60) & 0x4000) == 0) {
              goto LABEL_12;
            }
          }
        }
        while (__maskrune(v10, 0x4000uLL));
LABEL_12:
        if (v5 < v123)
        {
          int64_t v11 = v123 - v5;
          do
          {
            uint64_t v12 = *v5;
            if (*v5 < 0)
            {
              if (!__maskrune(v12, 0x4000uLL)) {
                goto LABEL_20;
              }
            }
            else if ((*(_DWORD *)(v6 + 4 * v12 + 60) & 0x4000) == 0)
            {
              goto LABEL_20;
            }
            ++v5;
            --v11;
          }
          while (v11);
          id v5 = v123;
        }
      }
LABEL_20:
      int v13 = v5;
      int v14 = *a3;
      if (v14 != 37)
      {
        if (*a3)
        {
          if (v5 < v123)
          {
            ++a3;
            int v15 = *v5++;
            if (v14 == v15) {
              continue;
            }
          }
        }
        return v121;
      }
      break;
    }
    int v16 = 0;
    uint64_t v17 = 0;
    char v18 = 1;
    int v19 = a3;
    while (1)
    {
      while (1)
      {
        do
        {
          int v20 = v19;
          uint64_t v21 = v17;
          int v23 = *++v19;
          int v22 = v23;
          uint64_t v17 = 1;
        }
        while (v23 == 42);
        if (v22 != 38) {
          break;
        }
        char v18 = 0;
        uint64_t v17 = v21;
      }
      if (v22 != 35) {
        break;
      }
      ++v16;
      uint64_t v17 = v21;
    }
    if ((v22 - 48) > 9)
    {
      if (v22 == 46)
      {
        unint64_t v27 = v125;
        v125 += 2;
        int v24 = *v27;
        if (*v27 < 0) {
          return v121;
        }
        int v22 = v20[2];
        int v19 = v20 + 2;
      }
      else
      {
        int v24 = 0x7FFFFFFF;
      }
    }
    else
    {
      int v24 = 0;
      do
      {
        int v25 = v22 + 10 * v24;
        int v26 = *++v19;
        int v22 = v26;
        int v24 = v25 - 48;
      }
      while ((v26 - 48) < 0xA);
      if (v24 < 0) {
        return v121;
      }
    }
    int v28 = 0;
    HIDWORD(v29) = v22;
    LODWORD(v29) = v22 - 104;
    switch((v29 >> 1))
    {
      case 0u:
        int v30 = *++v19;
        BOOL v31 = v30 == 104;
        int v22 = 104;
        int v32 = 72;
        goto LABEL_44;
      case 1u:
      case 6u:
      case 9u:
        ++v19;
        goto LABEL_46;
      case 2u:
        int v33 = *++v19;
        BOOL v31 = v33 == 108;
        int v22 = 108;
        int v32 = 76;
LABEL_44:
        if (v31)
        {
          int v22 = v32;
          ++v19;
        }
LABEL_46:
        int v28 = v22;
        int v22 = *v19;
        break;
      default:
        break;
    }
    int v122 = v28;
    if (!v22) {
      return v121;
    }
    a3 = v19 + 1;
    int v34 = 0;
    int v35 = 0;
    int v36 = 0;
    uint64_t v37 = 10;
    switch(v22)
    {
      case '[':
        if (v28) {
          return v121;
        }
        int v38 = v19[1];
        uint64_t v39 = v19 + 2;
        if (v38 == 94) {
          uint64_t v40 = 2;
        }
        else {
          uint64_t v40 = 1;
        }
        if (v38 == 94) {
          uint64_t v41 = v19 + 2;
        }
        else {
          uint64_t v41 = v19 + 1;
        }
        int v42 = v19[v40];
        uint64_t v43 = v42 == 93;
        if (v42 == 93) {
          uint64_t v44 = v41 + 1;
        }
        else {
          uint64_t v44 = v41;
        }
        while (2)
        {
          if (!*v44) {
            return v121;
          }
          if (*v44 != 93)
          {
            ++v44;
            ++v43;
            continue;
          }
          break;
        }
        id v5 = v13;
        if (v38 == 94)
        {
          if (v13 >= v123) {
            goto LABEL_284;
          }
          id v5 = v13;
          while (*v5)
          {
            BOOL v63 = __OFSUB__(v24--, 1);
            if (v24 < 0 != v63) {
              break;
            }
            if (v39 < v44)
            {
              uint64_t v76 = 0;
              do
              {
                if (v41[v76] == *v5) {
                  goto LABEL_284;
                }
                ++v76;
              }
              while (v43 != v76);
            }
            if (++v5 == v123)
            {
              id v5 = v123;
              break;
            }
          }
        }
        else
        {
          if (v13 >= v123) {
            goto LABEL_284;
          }
          id v5 = v13;
          while (*v5)
          {
            BOOL v63 = __OFSUB__(v24, 1);
            if (--v24 < 0 != v63) {
              break;
            }
            uint64_t v91 = v43;
            v92 = v41;
            if (a3 >= v44) {
              break;
            }
            while (*v92 != *v5)
            {
              ++v92;
              if (!--v91) {
                goto LABEL_284;
              }
            }
            if (++v5 == v123)
            {
              id v5 = v123;
              break;
            }
          }
        }
LABEL_284:
        if (v13 == v5 && !v16) {
          return v121;
        }
        a3 = v44 + 1;
        if (v21) {
          continue;
        }
        v93 = v125;
        v125 += 2;
        char v94 = *(unsigned char **)v93;
        if (v18)
        {
          if (!v94) {
            return v121;
          }
          if (v13 < v5)
          {
            int64_t v95 = v5 - v13;
            do
            {
              char v96 = *v13++;
              *v94++ = v96;
              --v95;
            }
            while (v95);
          }
          *char v94 = 0;
          unsigned int v97 = v121;
        }
        else
        {
          if (v94) {
            *(void *)char v94 = v13;
          }
          uint64_t v117 = v125;
          v125 += 2;
          uint64_t v118 = *(void **)v117;
          unsigned int v97 = v121;
          if (v118) {
            *uint64_t v118 = v5 - v13;
          }
        }
        unsigned int v121 = v97 + 1;
        continue;
      case '\\':
      case ']':
      case '^':
      case '_':
      case 'a':
      case 'e':
      case 'g':
      case 'h':
      case 'j':
      case 'k':
      case 'l':
      case 'm':
      case 'q':
      case 'r':
      case 't':
      case 'v':
      case 'w':
        return v121;
      case 'b':
        int v34 = 0;
        int v35 = 0;
        int v36 = 1;
        uint64_t v37 = 2;
        goto LABEL_106;
      case 'c':
        if (v28) {
          return v121;
        }
        if (v18)
        {
          if (v24 == 0x7FFFFFFF) {
            uint64_t v45 = 1;
          }
          else {
            uint64_t v45 = v24;
          }
          if (v123 - v13 < v45) {
            return v121;
          }
          if (v21)
          {
            id v5 = &v13[v45];
            continue;
          }
          int v112 = v125;
          v125 += 2;
          uint64_t v113 = *(unsigned char **)v112;
          if (!v113) {
            return v121;
          }
          if (v45)
          {
            unsigned int v114 = v45 + 1;
            unsigned int v102 = v121;
            do
            {
              char v115 = *v13++;
              *v113++ = v115;
              --v114;
            }
            while (v114 > 1);
          }
          else
          {
            unsigned int v102 = v121;
          }
        }
        else
        {
          int64_t v77 = v123 - v13;
          if (v123 - v13 >= (unint64_t)v24) {
            int64_t v77 = v24;
          }
          if (v21)
          {
            id v5 = &v13[v77];
            continue;
          }
          char v98 = (char ***)v125;
          v125 += 2;
          v99 = *v98;
          if (v99) {
            _DWORD *v99 = v13;
          }
          uint64_t v100 = v125;
          v125 += 2;
          BOOL v101 = *(int64_t **)v100;
          unsigned int v102 = v121;
          if (v101) {
            *BOOL v101 = v77;
          }
          v13 += v77;
        }
        unsigned int v121 = v102 + 1;
        id v5 = v13;
        continue;
      case 'd':
      case 'u':
        goto LABEL_106;
      case 'f':
        if (v13 >= v123) {
          goto LABEL_82;
        }
        int64_t v46 = v123 - v13;
        do
        {
          uint64_t v47 = *v13;
          if (*v13 < 0)
          {
            if (!__maskrune(v47, 0x4000uLL)) {
              goto LABEL_82;
            }
          }
          else if ((*(_DWORD *)(v6 + 4 * v47 + 60) & 0x4000) == 0)
          {
            goto LABEL_82;
          }
          ++v13;
          --v46;
        }
        while (v46);
        int v13 = v123;
LABEL_82:
        if (v123 - v13 <= v24) {
          int v48 = v123;
        }
        else {
          int v48 = &v13[v24];
        }
        id v5 = v13;
        if (v13 < v48)
        {
          if (*v13 == 45) {
            id v5 = v13 + 1;
          }
          else {
            id v5 = v13;
          }
        }
        if (v5 < v48)
        {
          int64_t v49 = v48 - v5;
          while (1)
          {
            int v50 = *v5;
            if ((v50 - 48) > 9) {
              break;
            }
            ++v5;
            if (!--v49)
            {
              id v5 = v48;
              goto LABEL_233;
            }
          }
          if (v50 == 46) {
            ++v5;
          }
        }
LABEL_233:
        if (v5 < v48)
        {
          int64_t v78 = v48 - v5;
          while (1)
          {
            __darwin_ct_rune_t v79 = *v5;
            if ((v79 - 48) > 9) {
              break;
            }
            ++v5;
            if (!--v78)
            {
              id v5 = v48;
              goto LABEL_240;
            }
          }
          if (__tolower(v79) == 101) {
            ++v5;
          }
        }
LABEL_240:
        if (v5 < v48)
        {
          int v80 = *v5;
          if (v80 == 45 || v80 == 43) {
            ++v5;
          }
        }
        if (v5 < v48)
        {
          int64_t v81 = v48 - v5;
          while (*v5 - 48 <= 9)
          {
            ++v5;
            if (!--v81)
            {
              id v5 = v48;
              break;
            }
          }
        }
        if ((unint64_t)(v5 - v13) > 0x3F) {
          return v121;
        }
        __memcpy_chk();
        v126[v5 - v13] = 0;
        if (sscanf(v126, "%lf", &v124) != 1) {
          return v121;
        }
        if (v21) {
          continue;
        }
        v82 = (double **)v125;
        v125 += 2;
        uint64_t v83 = *v82;
        if (!v83) {
          return v121;
        }
        if (v122)
        {
          if (v122 != 108) {
            return v121;
          }
          *uint64_t v83 = v124;
        }
        else
        {
          float v116 = v124;
          *(float *)uint64_t v83 = v116;
        }
        goto LABEL_211;
      case 'i':
        int v35 = 0;
        int v36 = 0;
        uint64_t v37 = 0;
        int v34 = 1;
        goto LABEL_106;
      case 'n':
        if (v28 || v24 != 0x7FFFFFFF || v21) {
          return v121;
        }
        int v51 = (char ***)v125;
        v125 += 2;
        int v52 = *v51;
        if (v16)
        {
          if (v52)
          {
            *int v52 = v13;
            id v5 = v13;
            continue;
          }
        }
        else if (v52)
        {
          *(_DWORD *)int v52 = v13 - v120;
          id v5 = v13;
          continue;
        }
        return v121;
      case 'o':
        int v34 = 0;
        int v35 = 0;
        int v36 = 0;
        uint64_t v37 = 8;
        goto LABEL_106;
      case 'p':
        int v53 = v28;
        if (!v28) {
          int v53 = 112;
        }
        int v122 = v53;
        goto LABEL_105;
      case 's':
        if (v28) {
          return v121;
        }
        if (v13 >= v123) {
          goto LABEL_184;
        }
        char v69 = v18;
        int64_t v70 = v123 - v13;
        id v5 = v13;
        do
        {
          uint64_t v71 = *v5;
          if (*v5 < 0)
          {
            if (!__maskrune(v71, 0x4000uLL))
            {
LABEL_257:
              if (!v16)
              {
                char v18 = v69;
                if (*v5) {
                  goto LABEL_185;
                }
                return v121;
              }
              char v18 = v69;
              if (v21) {
                goto LABEL_186;
              }
              goto LABEL_259;
            }
          }
          else if ((*(_DWORD *)(v6 + 4 * v71 + 60) & 0x4000) == 0)
          {
            goto LABEL_257;
          }
          ++v5;
          --v70;
        }
        while (v70);
        int v13 = v123;
        char v18 = v69;
LABEL_184:
        id v5 = v13;
        if (!v16) {
          return v121;
        }
LABEL_185:
        if (v21)
        {
LABEL_186:
          if (v5 < v123)
          {
            int64_t v72 = v123 - v5;
            while (1)
            {
              uint64_t v73 = *v5;
              if (!*v5) {
                break;
              }
              int v74 = (v73 & 0x80) != 0 ? __maskrune(v73, 0x4000uLL) : *(_DWORD *)(v6 + 4 * v73 + 60) & 0x4000;
              if (v74 || v24 < 1) {
                break;
              }
              --v24;
              ++v5;
              if (!--v72)
              {
                id v5 = v123;
                goto LABEL_4;
              }
            }
          }
          continue;
        }
LABEL_259:
        if (v18)
        {
          char v84 = (char **)v125;
          v125 += 2;
          uint64_t v85 = *v84;
          if (*v84)
          {
            if (v5 < v123)
            {
              int64_t v86 = v123 - v5;
              while (1)
              {
                uint64_t v87 = *v5;
                if (!*v5) {
                  break;
                }
                char v88 = *v5;
                int v89 = (char)v87 < 0 ? __maskrune(v87, 0x4000uLL) : *(_DWORD *)(v6 + 4 * v87 + 60) & 0x4000;
                if (v89 || v24 < 1) {
                  break;
                }
                --v24;
                ++v5;
                *v85++ = v88;
                if (!--v86)
                {
                  id v5 = v123;
                  break;
                }
              }
            }
            *uint64_t v85 = 0;
            goto LABEL_211;
          }
          return v121;
        }
        v103 = v5;
        if (v5 < v123)
        {
          int64_t v104 = v123 - v5;
          v103 = v5;
          while (1)
          {
            uint64_t v105 = *v103;
            if (!*v103) {
              break;
            }
            int v106 = (v105 & 0x80) != 0 ? __maskrune(v105, 0x4000uLL) : *(_DWORD *)(v6 + 4 * v105 + 60) & 0x4000;
            if (v106 || v24 < 1) {
              break;
            }
            --v24;
            ++v103;
            if (!--v104)
            {
              v103 = v123;
              break;
            }
          }
        }
        unint64_t v108 = (char ***)v125;
        v125 += 2;
        v109 = *v108;
        if (v109) {
          *v109 = v5;
        }
        v110 = v125;
        v125 += 2;
        unsigned int v111 = *(void **)v110;
        if (v111) {
          *unsigned int v111 = v103 - v5;
        }
        ++v121;
        id v5 = v103;
        continue;
      case 'x':
        goto LABEL_105;
      default:
        if (v22 == 37)
        {
          if (!v28 && v24 == 0x7FFFFFFF && !v21 && v13 < v123)
          {
            id v5 = v13 + 1;
            if (*v13 == 37) {
              continue;
            }
          }
          return v121;
        }
        if (v22 != 88) {
          return v121;
        }
LABEL_105:
        int v34 = 0;
        int v36 = 0;
        int v35 = 1;
        uint64_t v37 = 16;
LABEL_106:
        if (v13 < v123)
        {
          int64_t v54 = v123 - v13;
          do
          {
            uint64_t v55 = *v13;
            if (*v13 < 0)
            {
              if (!__maskrune(v55, 0x4000uLL)) {
                goto LABEL_114;
              }
            }
            else if ((*(_DWORD *)(v6 + 4 * v55 + 60) & 0x4000) == 0)
            {
              goto LABEL_114;
            }
            ++v13;
            --v54;
          }
          while (v54);
          int v13 = v123;
        }
LABEL_114:
        int v56 = 1;
        if (v123 - v13 < 2 || v24 < 1) {
          goto LABEL_120;
        }
        int v57 = *v13;
        if (v57 == 43) {
          goto LABEL_119;
        }
        if (v57 == 45)
        {
          int v56 = 0;
LABEL_119:
          ++v13;
          --v24;
        }
LABEL_120:
        if (!v34)
        {
          if (v35 && v123 - v13 >= 2 && v24 >= 2 && *v13 == 48 && __tolower(v13[1]) == 120)
          {
            id v5 = v13 + 2;
            v24 -= 2;
            uint64_t v37 = 16;
          }
          else
          {
            if (v36)
            {
              unint64_t v58 = (unint64_t)v123;
              if (v123 - v13 < 2 || (int v59 = v24 - 2, v24 < 2) || *v13 != 48 || __tolower(v13[1]) != 98)
              {
                uint64_t v37 = 2;
                goto LABEL_155;
              }
              id v5 = v13 + 2;
LABEL_150:
              int v24 = v59;
              uint64_t v37 = 2;
              goto LABEL_156;
            }
            id v5 = v13;
          }
          unint64_t v58 = (unint64_t)v123;
          goto LABEL_156;
        }
        unint64_t v58 = (unint64_t)v123;
        if (v123 - v13 > 2)
        {
          int v59 = v24 - 2;
          if (v24 >= 2 && *v13 == 48)
          {
            if (__tolower(v13[1]) == 120)
            {
              id v5 = v13 + 2;
              if ((*(_DWORD *)(v6 + 4 * v13[2] + 60) & 0x10000) != 0)
              {
                v24 -= 2;
                uint64_t v37 = 16;
                goto LABEL_156;
              }
            }
            if (*v13 == 48 && __tolower(v13[1]) == 98)
            {
              id v5 = v13 + 2;
              if ((v13[2] & 0xFE) == 0x30) {
                goto LABEL_150;
              }
            }
          }
        }
        if (v123 - v13 < 2 || v24 < 1 || *v13 != 48)
        {
          uint64_t v37 = 10;
LABEL_155:
          id v5 = v13;
          goto LABEL_156;
        }
        int v60 = v13[1] & 0xF8;
        if (v60 == 48)
        {
          --v24;
          uint64_t v37 = 8;
        }
        else
        {
          uint64_t v37 = 10;
        }
        if (v60 == 48) {
          id v5 = v13 + 1;
        }
        else {
          id v5 = v13;
        }
LABEL_156:
        if ((unint64_t)v5 >= v58)
        {
          uint64_t v61 = 0;
        }
        else
        {
          uint64_t v61 = 0;
          unint64_t v62 = v58 - (void)v5;
          while (1)
          {
            BOOL v63 = __OFSUB__(v24, 1);
            if (--v24 < 0 != v63) {
              break;
            }
            __darwin_ct_rune_t v64 = *v5;
            int v65 = v64 - 48;
            if ((v64 - 48) >= 0xA)
            {
              if ((*(_DWORD *)(v6 + 4 * *v5 + 60) & 0x10000) == 0) {
                break;
              }
              int v65 = __tolower(v64) - 87;
            }
            if (v65 >= (int)v37) {
              break;
            }
            uint64_t v61 = v61 * v37 + v65;
            ++v5;
            if (!--v62)
            {
              id v5 = v123;
              break;
            }
          }
        }
        if (v5 != v13)
        {
          if (v21) {
            continue;
          }
          uint64_t v66 = v56 ? v61 : -v61;
          int v67 = v125;
          v125 += 2;
          char v68 = *(unsigned char **)v67;
          if (v68)
          {
            if (v122 <= 103)
            {
              if (v122)
              {
                if (v122 == 72)
                {
                  *char v68 = v66;
                }
                else
                {
                  if (v122 != 76) {
                    return v121;
                  }
LABEL_210:
                  *(void *)char v68 = v66;
                }
              }
              else
              {
                *(_DWORD *)char v68 = v66;
              }
LABEL_211:
              ++v121;
              continue;
            }
            switch(v122)
            {
              case 'h':
                *(_WORD *)char v68 = v66;
                goto LABEL_211;
              case 'i':
              case 'k':
              case 'm':
              case 'n':
              case 'o':
                return v121;
              case 'j':
              case 'l':
              case 'p':
                goto LABEL_210;
              default:
                if (v122 == 116 || v122 == 122) {
                  goto LABEL_210;
                }
                break;
            }
          }
        }
        return v121;
    }
  }
}

BOOL _OPACKObjectsExactlyEqual(const void *a1, const __CFNumber *a2)
{
  CFTypeID v4 = CFGetTypeID(a1);
  BOOL result = 0;
  if (v4 == CFGetTypeID(a2))
  {
    if (CFEqual(a1, a2))
    {
      if (v4 != gCFNumberType_12218) {
        return 1;
      }
      int IsFloatType = CFNumberIsFloatType((CFNumberRef)a1);
      if (IsFloatType == CFNumberIsFloatType(a2)) {
        return 1;
      }
    }
  }
  return result;
}

uint64_t CUXPCDecodeBool(void *a1, const char *a2, BOOL *a3, void *a4)
{
  id v7 = a1;
  BOOL v8 = xpc_dictionary_get_BOOL(v7, a2);
  BOOL v9 = v8;
  if (v8)
  {
    *a3 = v8;
LABEL_7:
    uint64_t v17 = 1;
    goto LABEL_8;
  }
  uint64_t v10 = xpc_dictionary_get_value(v7, a2);
  int64_t v11 = (void *)v10;
  if (!v10)
  {
LABEL_6:

    goto LABEL_7;
  }
  if (MEMORY[0x192FAB6C0](v10) == MEMORY[0x1E4F14570])
  {
    *a3 = v9;
    goto LABEL_6;
  }
  if (a4)
  {
    NSErrorF_safe((void *)*MEMORY[0x1E4F28760], 4294960540, (uint64_t)"XPC non-BOOL type: '%s'", v12, v13, v14, v15, v16, (uint64_t)a2);
    *a4 = (id)objc_claimAutoreleasedReturnValue();
  }

  uint64_t v17 = 0;
LABEL_8:

  return v17;
}

uint64_t CUXPCDecodeDouble(void *a1, const char *a2, double *a3)
{
  id v5 = a1;
  *a3 = xpc_dictionary_get_double(v5, a2);

  return 1;
}

BOOL CUXPCDecodeObject(void *a1, const char *a2, objc_class *a3, id *a4, void *a5)
{
  uint64_t v9 = xpc_dictionary_get_value(a1, a2);
  uint64_t v10 = (void *)v9;
  if (v9)
  {
    if (MEMORY[0x192FAB6C0](v9) == MEMORY[0x1E4F14590])
    {
      uint64_t v16 = (void *)[[a3 alloc] initWithXPCObject:v10 error:a5];
      BOOL v17 = v16 != 0;
      if (v16) {
        objc_storeStrong(a4, v16);
      }
    }
    else if (a5)
    {
      NSErrorF_safe((void *)*MEMORY[0x1E4F28760], 4294960540, (uint64_t)"XPC non-dict type: '%s'", v11, v12, v13, v14, v15, (uint64_t)a2);
      BOOL v17 = 0;
      *a5 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      BOOL v17 = 0;
    }
  }
  else
  {
    BOOL v17 = 1;
  }

  return v17;
}

void CUXPCEncodeNSArrayOfObjects(void *a1, const char *a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a3;
  if (v6)
  {
    xpc_object_t v7 = xpc_array_create(0, 0);
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    id v8 = v6;
    uint64_t v9 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = *(void *)v16;
      do
      {
        uint64_t v12 = 0;
        do
        {
          if (*(void *)v16 != v11) {
            objc_enumerationMutation(v8);
          }
          uint64_t v13 = *(void **)(*((void *)&v15 + 1) + 8 * v12);
          xpc_object_t v14 = xpc_dictionary_create(0, 0, 0);
          objc_msgSend(v13, "encodeWithXPCObject:", v14, (void)v15);
          xpc_array_append_value(v7, v14);

          ++v12;
        }
        while (v10 != v12);
        uint64_t v10 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
      }
      while (v10);
    }

    xpc_dictionary_set_value(v5, a2, v7);
  }
}

void CUXPCEncodeNSArrayOfNSData(void *a1, const char *a2, void *a3, size_t a4, size_t a5)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v9 = a1;
  id v10 = a3;
  if (v10)
  {
    uint64_t v21 = a2;
    int v22 = v9;
    xpc_object_t v11 = xpc_array_create(0, 0);
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    id v12 = v10;
    uint64_t v13 = [v12 countByEnumeratingWithState:&v23 objects:v27 count:16];
    if (v13)
    {
      uint64_t v14 = v13;
      uint64_t v15 = *(void *)v24;
      do
      {
        for (uint64_t i = 0; i != v14; ++i)
        {
          if (*(void *)v24 != v15) {
            objc_enumerationMutation(v12);
          }
          long long v17 = *(void **)(*((void *)&v23 + 1) + 8 * i);
          size_t v18 = objc_msgSend(v17, "length", v21, v22, (void)v23);
          if (v18 >= a4 && v18 <= a5)
          {
            xpc_object_t v20 = xpc_data_create((const void *)[v17 bytes], v18);
            xpc_array_append_value(v11, v20);
          }
        }
        uint64_t v14 = [v12 countByEnumeratingWithState:&v23 objects:v27 count:16];
      }
      while (v14);
    }

    id v9 = v22;
    xpc_dictionary_set_value(v22, v21, v11);
  }
}

__CFString *_OPACKDecodeBytes(uint64_t a1, UInt8 *a2, uint64_t a3, unsigned int a4, _DWORD *a5)
{
  if (gOPACKInitalizeOnce != -1) {
    dispatch_once_f(&gOPACKInitalizeOnce, 0, (dispatch_function_t)_OPACKInitializeOnce);
  }
  int v19 = 0;
  cf[1] = 0;
  uint64_t v18 = 0;
  v16[0] = a1;
  v16[1] = a4;
  v16[2] = a2;
  cf[0] = 0;
  if ((a4 & 2) == 0)
  {
    long long v10 = *(_OWORD *)(MEMORY[0x1E4F1D540] + 16);
    *(_OWORD *)&valueCallBacks.version = *MEMORY[0x1E4F1D540];
    *(_OWORD *)&valueCallBacks.release = v10;
    valueCallBacks.equal = (CFDictionaryEqualCallBack)_OPACKObjectsExactlyEqual;
    cf[0] = CFDictionaryCreateMutable(0, 0, 0, &valueCallBacks);
    if (!cf[0])
    {
      id v12 = 0;
      int v19 = -6728;
      if (!a5) {
        return v12;
      }
      goto LABEL_11;
    }
  }
  xpc_object_t v11 = _OPACKDecodeObject((uint64_t)v16, a2, (unint64_t)&a2[a3], &v14, &v19);
  id v12 = v11;
  if (!v19 && !v11) {
    int v19 = -6742;
  }
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (a5) {
LABEL_11:
  }
    *a5 = v19;
  return v12;
}

__CFArray *_OPACKDecodeArray(uint64_t a1, UInt8 *a2, uint64_t a3, int a4, UInt8 **a5, int *a6)
{
  CFMutableDataRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
    int v15 = -6728;
    goto LABEL_8;
  }
  if ((a4 + 48) >= 0xFu)
  {
    while (1)
    {
      int v17 = *(_DWORD *)(a1 + 40);
      if (v17 > 31) {
        break;
      }
      *(_DWORD *)(a1 + 40) = v17 + 1;
      uint64_t v18 = (const void *)_OPACKDecodeObject(a1, a2);
      int v19 = v18;
      --*(_DWORD *)(a1 + 40);
      if (!v18) {
        goto LABEL_7;
      }
      CFArrayAppendValue(Mutable, v18);
      CFRelease(v19);
    }
  }
  else
  {
    uint64_t v11 = (a4 - 208);
    if (a4 == 208)
    {
LABEL_7:
      int v15 = 0;
      goto LABEL_8;
    }
    while (1)
    {
      int v12 = *(_DWORD *)(a1 + 40);
      if (v12 >= 32) {
        break;
      }
      *(_DWORD *)(a1 + 40) = v12 + 1;
      uint64_t v13 = (const void *)_OPACKDecodeObject(a1, a2);
      uint64_t v14 = v13;
      --*(_DWORD *)(a1 + 40);
      if (!v13)
      {
        int v20 = -6742;
        goto LABEL_14;
      }
      CFArrayAppendValue(Mutable, v13);
      CFRelease(v14);
      if (!--v11) {
        goto LABEL_7;
      }
    }
  }
  int v20 = -6751;
LABEL_14:
  int v21 = v20;
  CFRelease(Mutable);
  CFMutableDataRef Mutable = 0;
  int v15 = v21;
LABEL_8:
  *a5 = a2;
  *a6 = v15;
  return Mutable;
}

__CFDictionary *_OPACKDecodeDictionary(uint64_t a1, UInt8 *a2, uint64_t a3, int a4, UInt8 **a5, int *a6)
{
  CFMutableDataRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    int v17 = -6728;
    goto LABEL_9;
  }
  if ((a4 + 32) >= 0xFu)
  {
    while (1)
    {
      int v19 = *(_DWORD *)(a1 + 40);
      if (v19 > 31) {
        break;
      }
      *(_DWORD *)(a1 + 40) = v19 + 1;
      uint64_t v13 = (const void *)_OPACKDecodeObject(a1, a2);
      int v20 = *(_DWORD *)(a1 + 40);
      *(_DWORD *)(a1 + 40) = v20 - 1;
      if (!v13) {
        goto LABEL_8;
      }
      *(_DWORD *)(a1 + 40) = v20;
      int v21 = (const void *)_OPACKDecodeObject(a1, a2);
      int v22 = v21;
      --*(_DWORD *)(a1 + 40);
      if (!v21)
      {
LABEL_15:
        int v24 = -6742;
        CFRelease(v13);
        goto LABEL_18;
      }
      CFDictionaryAddValue(Mutable, v13, v21);
      CFRelease(v13);
      CFRelease(v22);
    }
  }
  else
  {
    uint64_t v11 = (a4 - 224);
    if (a4 == 224)
    {
LABEL_8:
      int v17 = 0;
      goto LABEL_9;
    }
    while (1)
    {
      int v12 = *(_DWORD *)(a1 + 40);
      if (v12 >= 32) {
        break;
      }
      *(_DWORD *)(a1 + 40) = v12 + 1;
      uint64_t v13 = (const void *)_OPACKDecodeObject(a1, a2);
      int v14 = *(_DWORD *)(a1 + 40);
      *(_DWORD *)(a1 + 40) = v14 - 1;
      if (!v13)
      {
        int v23 = -6742;
        goto LABEL_17;
      }
      *(_DWORD *)(a1 + 40) = v14;
      int v15 = (const void *)_OPACKDecodeObject(a1, a2);
      long long v16 = v15;
      --*(_DWORD *)(a1 + 40);
      if (!v15) {
        goto LABEL_15;
      }
      CFDictionaryAddValue(Mutable, v13, v15);
      CFRelease(v13);
      CFRelease(v16);
      if (!--v11) {
        goto LABEL_8;
      }
    }
  }
  int v23 = -6751;
LABEL_17:
  int v24 = v23;
LABEL_18:
  CFRelease(Mutable);
  CFMutableDataRef Mutable = 0;
  int v17 = v24;
LABEL_9:
  *a5 = a2;
  *a6 = v17;
  return Mutable;
}

__CFString *_OPACKDecodeObject(uint64_t a1, UInt8 *bytes, unint64_t a3, void *a4, int *a5)
{
  if ((uint64_t)(a3 - (void)bytes) < 1) {
    goto LABEL_98;
  }
  long long v10 = bytes + 1;
  int v9 = *bytes;
  uint64_t v37 = bytes + 1;
  if ((v9 - 64) <= 0x20)
  {
    unint64_t v11 = (v9 - 64);
    if (v9 == 64)
    {
      int v12 = &stru_1EDD2ACE8;
LABEL_17:
      uint64_t v37 = v10;
      goto LABEL_18;
    }
    if (a3 - (unint64_t)v10 >= v11)
    {
      int v12 = (__CFString *)CFStringCreateWithBytes(0, bytes + 1, (v9 - 64), 0x8000100u, 0);
      if (v12)
      {
        v10 += v11;
LABEL_7:
        uint64_t v13 = *(__CFDictionary **)(a1 + 24);
        if (v13)
        {
          int v14 = *(char **)(a1 + 32);
          *(void *)(a1 + 32) = v14 + 1;
          CFDictionaryAddValue(v13, v14, v12);
        }
        goto LABEL_17;
      }
      goto LABEL_106;
    }
LABEL_98:
    int v12 = 0;
    int v18 = -6750;
    goto LABEL_19;
  }
  int v15 = v9 - 7;
  if ((v9 - 7) > 0x28)
  {
    if ((v9 - 97) <= 0xE)
    {
      switch(v9)
      {
        case 'a':
          if ((uint64_t)(a3 - (void)v10) < 1) {
            goto LABEL_98;
          }
          uint64_t v16 = 0;
          unint64_t v17 = bytes[1];
          long long v10 = bytes + 2;
          goto LABEL_73;
        case 'b':
          if ((uint64_t)(a3 - (void)v10) < 2) {
            goto LABEL_98;
          }
          uint64_t v16 = 0;
          unint64_t v17 = *(unsigned __int16 *)(bytes + 1);
          long long v10 = bytes + 3;
          goto LABEL_73;
        case 'c':
          if ((uint64_t)(a3 - (void)v10) < 4) {
            goto LABEL_98;
          }
          uint64_t v16 = 0;
          unint64_t v17 = *(unsigned int *)(bytes + 1);
          long long v10 = bytes + 5;
          goto LABEL_73;
        case 'd':
          if ((uint64_t)(a3 - (void)v10) < 8) {
            goto LABEL_98;
          }
          unint64_t v17 = *(void *)(bytes + 1);
          if ((v17 & 0x8000000000000000) != 0) {
            goto LABEL_77;
          }
          uint64_t v16 = 0;
          long long v10 = bytes + 9;
          goto LABEL_73;
        default:
          if (v9 != 111)
          {
            int v12 = 0;
            goto LABEL_42;
          }
          if ((unint64_t)v10 >= a3) {
            goto LABEL_98;
          }
          unint64_t v24 = a3 - (void)v10;
          long long v25 = bytes + 1;
          int v12 = 0;
          while (*v25)
          {
            ++v25;
            int v18 = -6750;
            if (!--v24) {
              goto LABEL_19;
            }
          }
          unint64_t v17 = v25 - v10;
          if (v25 - v10 < 0)
          {
LABEL_77:
            int v12 = 0;
            int v18 = -6743;
            goto LABEL_19;
          }
          uint64_t v16 = 1;
LABEL_73:
          if (a3 - (unint64_t)v10 < v17) {
            goto LABEL_98;
          }
          int v12 = (__CFString *)CFStringCreateWithBytes(0, v10, v17, 0x8000100u, 0);
          if (!v12) {
            goto LABEL_106;
          }
          v10 += v16 + v17;
          if (!v17) {
            goto LABEL_17;
          }
          goto LABEL_7;
      }
    }
    if ((v9 - 48) <= 6)
    {
      uint64_t v39 = 0;
      uint64_t valuePtr = 0;
      unint64_t v38 = 0;
      switch(v9)
      {
        case '0':
          if ((uint64_t)(a3 - (void)v10) < 1) {
            goto LABEL_107;
          }
          long long v10 = bytes + 2;
          LOBYTE(valuePtr) = bytes[1];
          BOOL v20 = (valuePtr + 1) < 0x29u;
          p_uint64_t valuePtr = &valuePtr;
          CFNumberType v22 = kCFNumberSInt8Type;
          goto LABEL_64;
        case '1':
          if ((uint64_t)(a3 - (void)v10) < 2) {
            goto LABEL_107;
          }
          LOWORD(valuePtr) = *(_WORD *)(bytes + 1);
          long long v10 = bytes + 3;
          BOOL v20 = (unsigned __int16)(valuePtr + 1) < 0x29u;
          p_uint64_t valuePtr = &valuePtr;
          CFNumberType v22 = kCFNumberSInt16Type;
          goto LABEL_64;
        case '2':
          if ((uint64_t)(a3 - (void)v10) < 4) {
            goto LABEL_107;
          }
          LODWORD(valuePtr) = *(_DWORD *)(bytes + 1);
          long long v10 = bytes + 5;
          BOOL v20 = (valuePtr + 1) < 0x29;
          p_uint64_t valuePtr = &valuePtr;
          CFNumberType v22 = kCFNumberSInt32Type;
          goto LABEL_64;
        case '3':
          if ((uint64_t)(a3 - (void)v10) < 8) {
            goto LABEL_107;
          }
          uint64_t valuePtr = *(void *)(bytes + 1);
          long long v10 = bytes + 9;
          BOOL v20 = (unint64_t)(valuePtr + 1) < 0x29;
          p_uint64_t valuePtr = &valuePtr;
          CFNumberType v22 = kCFNumberSInt64Type;
          goto LABEL_64;
        case '4':
          if ((uint64_t)(a3 - (void)v10) < 16) {
            goto LABEL_107;
          }
          uint64_t v27 = *(void *)(bytes + 1);
          unint64_t v28 = *(void *)(bytes + 9);
          long long v10 = bytes + 17;
          unint64_t v38 = v28;
          uint64_t v39 = v27;
          BOOL v29 = __CFADD__(v27, 1);
          unint64_t v30 = v27 + 1;
          if (v29) {
            ++v28;
          }
          BOOL v20 = __PAIR128__(v28, v30) < 0x29;
          p_uint64_t valuePtr = (uint64_t *)&v38;
          CFNumberType v22 = kCFNumberMaxType|kCFNumberSInt8Type;
          goto LABEL_64;
        case '5':
          if ((uint64_t)(a3 - (void)v10) < 4) {
            goto LABEL_107;
          }
          BOOL v20 = 0;
          LODWORD(valuePtr) = *(_DWORD *)(bytes + 1);
          long long v10 = bytes + 5;
          p_uint64_t valuePtr = &valuePtr;
          CFNumberType v22 = kCFNumberFloat32Type;
          goto LABEL_64;
        case '6':
          if ((uint64_t)(a3 - (void)v10) < 8)
          {
LABEL_107:
            int v18 = -6750;
LABEL_49:
            int v12 = 0;
            goto LABEL_19;
          }
          BOOL v20 = 0;
          uint64_t valuePtr = *(void *)(bytes + 1);
          long long v10 = bytes + 9;
          p_uint64_t valuePtr = &valuePtr;
          CFNumberType v22 = kCFNumberFloat64Type;
LABEL_64:
          CFNumberRef v31 = CFNumberCreate(0, v22, p_valuePtr);
          int v12 = (__CFString *)v31;
          if (v31 && !v20) {
            goto LABEL_7;
          }
          uint64_t v37 = v10;
          if (v31) {
            goto LABEL_18;
          }
          break;
        default:
          int v18 = -6762;
          goto LABEL_49;
      }
LABEL_106:
      int v18 = -6728;
      goto LABEL_19;
    }
    int v12 = 0;
    switch(v9)
    {
      case 1:
        int v23 = (__CFString **)MEMORY[0x1E4F1CFD0];
        goto LABEL_47;
      case 2:
        int v23 = (__CFString **)MEMORY[0x1E4F1CFC8];
        goto LABEL_47;
      case 3:
        goto LABEL_18;
      case 4:
        int v23 = (__CFString **)MEMORY[0x1E4F1D260];
LABEL_47:
        int v12 = *v23;
        goto LABEL_18;
      default:
        LODWORD(v38) = 0;
        if ((v9 + 96) <= 0x24u)
        {
          long long v26 = (__CFString *)_OPACKDecodeUID(a1, bytes + 1, a3, v9, &v37, (int *)&v38);
          goto LABEL_90;
        }
        if ((v9 & 0xF0) == 0xD0)
        {
          long long v26 = (__CFString *)_OPACKDecodeArray(a1, bytes + 1, a3, v9, &v37, (int *)&v38);
        }
        else
        {
          if ((v9 & 0xF0) == 0xE0)
          {
            long long v26 = (__CFString *)_OPACKDecodeDictionary(a1, bytes + 1, a3, v9, &v37, (int *)&v38);
            goto LABEL_90;
          }
          unsigned __int8 v32 = v9 - 112;
          if ((v9 - 112) <= 0x20)
          {
            if (a3 - (unint64_t)v10 < v32) {
              goto LABEL_98;
            }
            int v12 = (__CFString *)CFDataCreate(0, bytes + 1, (v9 - 112));
            if (!v12) {
              goto LABEL_106;
            }
            uint64_t v37 = &v10[v32];
            if (v32 < 2u) {
              goto LABEL_18;
            }
            goto LABEL_104;
          }
          if ((v9 + 111) > 3u)
          {
            switch(v9)
            {
              case 5:
                if ((uint64_t)(a3 - (void)v10) < 16) {
                  goto LABEL_98;
                }
                if ((*(unsigned char *)(a1 + 8) & 8) != 0)
                {
                  CFUUIDRef v33 = (CFUUIDRef)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDBytes:v10];
                }
                else
                {
                  *(void *)&v41.byte0 = *(void *)(bytes + 1);
                  *(void *)&v41.byte8 = *(void *)(bytes + 9);
                  CFUUIDRef v33 = CFUUIDCreateFromUUIDBytes(0, v41);
                }
                int v12 = (__CFString *)v33;
                if (!v33) {
                  goto LABEL_106;
                }
                int v34 = bytes + 17;
                break;
              case 6:
                if ((uint64_t)(a3 - (void)v10) < 8) {
                  goto LABEL_98;
                }
                int v12 = (__CFString *)CFDateCreate(0, *(CFAbsoluteTime *)v10);
                if (!v12) {
                  goto LABEL_106;
                }
                int v34 = bytes + 9;
                break;
              case 159:
                long long v26 = (__CFString *)_OPACKDecodeDataChunks(a1, (char *)bytes + 1, a3, (char **)&v37, (int *)&v38);
                goto LABEL_90;
              default:
                int v12 = 0;
                int v18 = -6735;
                goto LABEL_19;
            }
            uint64_t v37 = v34;
LABEL_104:
            int v35 = *(__CFDictionary **)(a1 + 24);
            if (v35)
            {
              int v36 = *(char **)(a1 + 32);
              *(void *)(a1 + 32) = v36 + 1;
              CFDictionaryAddValue(v35, v36, v12);
            }
            goto LABEL_18;
          }
          long long v26 = (__CFString *)_OPACKDecodeData(a1, bytes + 1, a3, v9, (const UInt8 **)&v37, (int *)&v38);
        }
LABEL_90:
        int v12 = v26;
        int v18 = v38;
        if (!v38) {
          goto LABEL_18;
        }
        goto LABEL_19;
    }
  }
  int v12 = (__CFString *)gCFNumbers[v15];
  if (v12)
  {
    CFRetain((CFTypeRef)gCFNumbers[v15]);
LABEL_18:
    int v18 = 0;
    *a4 = v37;
    goto LABEL_19;
  }
LABEL_42:
  int v18 = -6762;
LABEL_19:
  if (a5) {
    *a5 = v18;
  }
  return v12;
}

const void *_OPACKDecodeUID(uint64_t a1, unsigned __int8 *a2, uint64_t a3, int a4, unsigned __int8 **a5, int *a6)
{
  id v8 = a2;
  if ((a4 + 96) > 0x20u)
  {
    switch(a4)
    {
      case 193:
        if (a3 - (uint64_t)a2 < 1) {
          goto LABEL_19;
        }
        id v8 = a2 + 1;
        unint64_t v9 = *a2;
        goto LABEL_3;
      case 194:
        if (a3 - (uint64_t)a2 < 2) {
          goto LABEL_19;
        }
        id v8 = a2 + 2;
        unint64_t v9 = *(unsigned __int16 *)a2;
        goto LABEL_3;
      case 195:
        if (a3 - (uint64_t)a2 < 3) {
          goto LABEL_19;
        }
        unint64_t v9 = *(unsigned __int16 *)a2 | ((unint64_t)a2[2] << 16);
        v8 += 3;
        goto LABEL_3;
      case 196:
        if (a3 - (uint64_t)a2 >= 4)
        {
          id v8 = a2 + 4;
          unint64_t v9 = *(unsigned int *)a2;
          goto LABEL_3;
        }
LABEL_19:
        int v12 = 0;
        int v13 = -6750;
        break;
      default:
        int v12 = 0;
        int v13 = -6762;
        break;
    }
  }
  else
  {
    unint64_t v9 = (a4 - 160);
LABEL_3:
    CFDictionaryRef v10 = *(const __CFDictionary **)(a1 + 24);
    if (v10)
    {
      CFStringRef Value = CFDictionaryGetValue(v10, (const void *)v9);
      int v12 = Value;
      if (Value)
      {
        CFRetain(Value);
        int v13 = 0;
      }
      else
      {
        int v13 = -6708;
      }
    }
    else
    {
      int v12 = 0;
      int v13 = -6732;
    }
  }
  *a5 = v8;
  *a6 = v13;
  return v12;
}

uint64_t CUXPCDecodeNSArrayOfClass(void *a1, const char *a2, uint64_t a3, id *a4, void *a5)
{
  id v9 = a1;
  uint64_t v10 = xpc_dictionary_get_value(v9, a2);
  unint64_t v11 = (void *)v10;
  if (!v10) {
    goto LABEL_9;
  }
  if (MEMORY[0x192FAB6C0](v10) == MEMORY[0x1E4F14568])
  {
    uint64_t v22 = 0;
    int v23 = &v22;
    uint64_t v24 = 0x3032000000;
    long long v25 = __Block_byref_object_copy__10393;
    long long v26 = __Block_byref_object_dispose__10394;
    id v27 = 0;
    id v18 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 3221225472;
    applier[2] = __CUXPCDecodeNSArrayOfClass_block_invoke;
    applier[3] = &unk_1E55BF198;
    applier[6] = a2;
    applier[7] = a3;
    applier[4] = v18;
    applier[5] = &v22;
    xpc_array_apply(v11, applier);
    int v19 = (void *)v23[5];
    if (v19)
    {
      if (a5) {
        *a5 = v19;
      }
    }
    else
    {
      objc_storeStrong(a4, v18);
    }

    _Block_object_dispose(&v22, 8);
    if (v19) {
      goto LABEL_8;
    }
LABEL_9:
    uint64_t v17 = 1;
    goto LABEL_10;
  }
  if (!a5)
  {
LABEL_8:
    uint64_t v17 = 0;
    goto LABEL_10;
  }
  NSErrorF_safe((void *)*MEMORY[0x1E4F28760], 4294960540, (uint64_t)"XPC non-array type: '%s'", v12, v13, v14, v15, v16, (uint64_t)a2);
  uint64_t v17 = 0;
  *a5 = (id)objc_claimAutoreleasedReturnValue();
LABEL_10:

  return v17;
}

void sub_18E303E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CUXPCDecodeNSArrayOfNSData(void *a1, const char *a2, uint64_t a3, uint64_t a4, id *a5, void *a6)
{
  id v11 = a1;
  uint64_t v12 = xpc_dictionary_get_value(v11, a2);
  uint64_t v13 = (void *)v12;
  if (!v12) {
    goto LABEL_9;
  }
  if (MEMORY[0x192FAB6C0](v12) == MEMORY[0x1E4F14568])
  {
    uint64_t v24 = 0;
    long long v25 = &v24;
    uint64_t v26 = 0x3032000000;
    id v27 = __Block_byref_object_copy__10393;
    unint64_t v28 = __Block_byref_object_dispose__10394;
    id v29 = 0;
    id v20 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 3221225472;
    applier[2] = __CUXPCDecodeNSArrayOfNSData_block_invoke;
    applier[3] = &unk_1E55BF1C0;
    applier[6] = a2;
    applier[7] = a3;
    void applier[8] = a4;
    applier[4] = v20;
    applier[5] = &v24;
    xpc_array_apply(v13, applier);
    int v21 = (void *)v25[5];
    if (v21)
    {
      if (a6) {
        *a6 = v21;
      }
    }
    else
    {
      objc_storeStrong(a5, v20);
    }

    _Block_object_dispose(&v24, 8);
    if (v21) {
      goto LABEL_8;
    }
LABEL_9:
    uint64_t v19 = 1;
    goto LABEL_10;
  }
  if (!a6)
  {
LABEL_8:
    uint64_t v19 = 0;
    goto LABEL_10;
  }
  NSErrorF_safe((void *)*MEMORY[0x1E4F28760], 4294960540, (uint64_t)"XPC non-array type: '%s'", v14, v15, v16, v17, v18, (uint64_t)a2);
  uint64_t v19 = 0;
  *a6 = (id)objc_claimAutoreleasedReturnValue();
LABEL_10:

  return v19;
}

void sub_18E303FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void PrintFWriteCFObjectApplier(uint64_t a1, void *a2, uint64_t a3)
{
  if (*(_DWORD *)(a3 + 24))
  {
    CFStringRef v3 = 0;
    goto LABEL_47;
  }
  int v6 = *(unsigned __int8 *)(*(void *)(a3 + 8) + 3);
  int v7 = PrintFWriteCFObjectLevel(a3, a1, 0);
  if (v7 < 0)
  {
    CFStringRef v3 = 0;
LABEL_46:
    *(_DWORD *)(a3 + 24) = v7;
    goto LABEL_47;
  }
  int v8 = (**(uint64_t (***)(const char *, uint64_t))a3)(" : ", 3);
  if (v8 < 0)
  {
    CFStringRef v3 = 0;
    int v7 = v8;
    goto LABEL_46;
  }
  CFTypeID v9 = CFGetTypeID(a2);
  if (v9 == CFSetGetTypeID())
  {
    CFStringRef v3 = [a2 allObjects];
    if (!v3) {
      goto LABEL_47;
    }
    a2 = v3;
    CFTypeID v9 = CFGetTypeID(v3);
    id v30 = a2;
  }
  else
  {
    id v30 = 0;
  }
  int v10 = v8 + v7;
  if (v9 == CFArrayGetTypeID())
  {
    if (CFArrayGetCount((CFArrayRef)a2) >= 1)
    {
      if (v6 == 2)
      {
        uint64_t v11 = a3;
        uint64_t v12 = a2;
        uint64_t v13 = 1;
        goto LABEL_17;
      }
      int v7 = (**(uint64_t (***)(const char *, uint64_t))a3)("\n", 1);
      if ((v7 & 0x80000000) == 0)
      {
        uint64_t v20 = a3;
        int v21 = a2;
        uint64_t v22 = 1;
LABEL_37:
        int v26 = PrintFWriteCFObjectLevel(v20, v21, v22);
        if ((v26 & 0x80000000) == 0)
        {
          v10 += v7 + v26;
          uint64_t v15 = **(uint64_t (***)(const char *, uint64_t))a3;
          uint64_t v16 = ",\n";
          goto LABEL_39;
        }
        int v7 = v26;
        goto LABEL_53;
      }
      goto LABEL_53;
    }
    uint64_t v15 = **(uint64_t (***)(const char *, uint64_t))a3;
    uint64_t v18 = "[],\n";
    uint64_t v19 = "[], ";
  }
  else
  {
    if (v9 != CFDictionaryGetTypeID())
    {
      if (v9 == CFDataGetTypeID())
      {
        int v17 = PrintFWriteCFObjectLevel(a3, a2, 0);
        int v7 = v17;
        if (v17 < 0) {
          goto LABEL_53;
        }
        v10 += v17;
      }
      else
      {
        int v23 = *(_DWORD *)(a3 + 16);
        *(_DWORD *)(a3 + 16) = 0;
        int v24 = PrintFWriteCFObjectLevel(a3, a2, 0);
        int v7 = v24;
        if (v24 < 0) {
          goto LABEL_53;
        }
        v10 += v24;
        *(_DWORD *)(a3 + 16) = v23;
      }
      uint64_t v15 = **(uint64_t (***)(const char *, uint64_t))a3;
      if (v6 == 2) {
        uint64_t v16 = ", ";
      }
      else {
        uint64_t v16 = ",\n";
      }
      goto LABEL_39;
    }
    if (CFDictionaryGetCount((CFDictionaryRef)a2) >= 1)
    {
      if (v6 == 2)
      {
        uint64_t v11 = a3;
        uint64_t v12 = a2;
        uint64_t v13 = 0;
LABEL_17:
        int v14 = PrintFWriteCFObjectLevel(v11, v12, v13);
        int v7 = v14;
        if ((v14 & 0x80000000) == 0)
        {
          v10 += v14;
          uint64_t v15 = **(uint64_t (***)(const char *, uint64_t))a3;
          uint64_t v16 = ", ";
LABEL_39:
          uint64_t v25 = 2;
          goto LABEL_40;
        }
        goto LABEL_53;
      }
      int v7 = (**(uint64_t (***)(const char *, uint64_t))a3)("\n", 1);
      if ((v7 & 0x80000000) == 0)
      {
        uint64_t v20 = a3;
        int v21 = a2;
        uint64_t v22 = 0;
        goto LABEL_37;
      }
LABEL_53:
      CFStringRef v3 = v30;
      goto LABEL_46;
    }
    uint64_t v15 = **(uint64_t (***)(const char *, uint64_t))a3;
    uint64_t v18 = "{},\n";
    uint64_t v19 = "{}, ";
  }
  if (v6 == 2) {
    uint64_t v16 = v19;
  }
  else {
    uint64_t v16 = v18;
  }
  uint64_t v25 = 4;
LABEL_40:
  int v27 = v15(v16, v25);
  int v7 = v27;
  if (v27 >= 0) {
    int v28 = v10;
  }
  else {
    int v28 = 0;
  }
  int v29 = v28 + v27;
  CFStringRef v3 = v30;
  if (v29 >= 1) {
    *(_DWORD *)(a3 + 20) += v29;
  }
  if (v7 < 0) {
    goto LABEL_46;
  }
LABEL_47:
}

uint64_t PrintFWriteCFObjectLevel(uint64_t (***a1)(CFUUIDBytes *), const __CFArray *a2, uint64_t a3)
{
  while (1)
  {
    uint64_t v3 = a3;
    CFArrayRef v4 = a2;
    id v5 = a1;
    uint64_t v168 = *MEMORY[0x1E4F143B8];
    uint64_t v6 = (uint64_t)a1[1];
    int v7 = *(unsigned __int8 *)(v6 + 3);
    CFIndex v163 = 0;
    CFTypeID v8 = CFGetTypeID(a2);
    if (v8 == CFArrayGetTypeID())
    {
      if (v7 == 2)
      {
        CFIndex Count = CFArrayGetCount(v4);
        if (Count > 0)
        {
          CFIndex v16 = Count;
          uint64_t v17 = ((uint64_t (*)(const char *, uint64_t))**v5)("[ ", 2);
          LODWORD(v18) = 0;
LABEL_11:
          if ((v17 & 0x80000000) != 0) {
            return v17;
          }
          CFIndex v26 = 0;
          int v27 = v17 + v18;
          while (1)
          {
            ++*((_DWORD *)v5 + 4);
            ValueAtIndex = CFArrayGetValueAtIndex(v4, v26);
            uint64_t v18 = PrintFWriteCFObjectLevel(v5, ValueAtIndex, 1);
            --*((_DWORD *)v5 + 4);
            if ((v18 & 0x80000000) != 0) {
              return v18;
            }
            if (++v26 >= v16) {
              break;
            }
            context.byte0 = 44;
            if (v7 != 2)
            {
              uint64_t v30 = 1;
LABEL_20:
              uint64_t v29 = v30 + 1;
              *(&context.byte0 + v30) = 10;
              goto LABEL_21;
            }
            context.byte1 = 32;
            uint64_t v29 = 2;
LABEL_21:
            uint64_t v17 = ((uint64_t (*)(CFUUIDBytes *, uint64_t))**v5)(&context, v29);
            if ((v17 & 0x80000000) != 0) {
              return v17;
            }
            v27 += v18 + v17;
            if (v16 == v26)
            {
              int v36 = (uint64_t (**)(const char *, uint64_t))*v5;
              if (v7 == 2)
              {
                int v37 = (*v36)(" ]", 2);
              }
              else
              {
                uint64_t v45 = PrintFCore((uint64_t)v36, (uint64_t)"%*s", (uint64_t)v36, v31, v32, v33, v34, v35, (4 * *((_DWORD *)v5 + 4)));
                uint64_t v18 = v45;
                if ((v45 & 0x80000000) != 0) {
                  return v18;
                }
                v27 += v45;
                int v37 = ((uint64_t (*)(const char *, uint64_t))**v5)("]", 1);
              }
              if (v37 >= 0) {
                int v46 = v27;
              }
              else {
                int v46 = 0;
              }
              return (v46 + v37);
            }
          }
          uint64_t v30 = 0;
          uint64_t v29 = 0;
          if (v7 == 2) {
            goto LABEL_21;
          }
          goto LABEL_20;
        }
        LODWORD(v18) = 0;
      }
      else
      {
        uint64_t v18 = PrintFCore((uint64_t)*v5, (uint64_t)"%*s", v9, v10, v11, v12, v13, v14, (4 * *((_DWORD *)v5 + 4)));
        if ((v18 & 0x80000000) != 0) {
          return v18;
        }
        CFIndex v25 = CFArrayGetCount(v4);
        if (v25 > 0)
        {
          CFIndex v16 = v25;
          uint64_t v17 = ((uint64_t (*)(const char *, uint64_t))**v5)("[\n", 2);
          goto LABEL_11;
        }
      }
      int v37 = ((uint64_t (*)(const char *, uint64_t))**v5)("[]", 2);
LABEL_59:
      if (v37 >= 0) {
        int v46 = v18;
      }
      else {
        int v46 = 0;
      }
      return (v46 + v37);
    }
    if (v8 == CFBooleanGetTypeID())
    {
      if (v7 == 2)
      {
        LODWORD(v18) = 0;
      }
      else
      {
        uint64_t v18 = PrintFCore((uint64_t)*v5, (uint64_t)"%*s", v19, v20, v21, v22, v23, v24, (4 * *((_DWORD *)v5 + 4)));
        if ((v18 & 0x80000000) != 0) {
          return v18;
        }
      }
      if ((const __CFArray *)*MEMORY[0x1E4F1CFD0] == v4) {
        uint64_t v47 = 4;
      }
      else {
        uint64_t v47 = 5;
      }
      if ((const __CFArray *)*MEMORY[0x1E4F1CFD0] == v4) {
        int v48 = "true";
      }
      else {
        int v48 = "false";
      }
      uint64_t v17 = ((uint64_t (*)(const char *, uint64_t))**v5)(v48, v47);
      if ((v17 & 0x80000000) != 0) {
        return v17;
      }
      return (v17 + v18);
    }
    if (v8 == CFDataGetTypeID()) {
      break;
    }
    if (v8 == CFDateGetTypeID())
    {
      LODWORD(v18) = 0;
      *(_DWORD *)&context.byte0 = 0;
      LODWORD(usedBufLen) = 0;
      uint64_t v161 = 0;
      uint64_t v162 = 0;
      int v160 = 0;
      if (v7 != 2)
      {
        uint64_t v18 = PrintFCore((uint64_t)*v5, (uint64_t)"%*s", v49, v50, v51, v52, v53, v54, (4 * *((_DWORD *)v5 + 4)));
        if ((v18 & 0x80000000) != 0) {
          return v18;
        }
      }
      CFDateGetComponents((uint64_t)v4, &context, &usedBufLen, (_DWORD *)&v162 + 1, &v162, (_DWORD *)&v161 + 1, &v161, &v160);
      int v61 = PrintFCore((uint64_t)*v5, (uint64_t)"%04d-%02d-%02d %02d:%02d:%02d.%03d", v55, v56, v57, v58, v59, v60, *(unsigned int *)&context.byte0);
      goto LABEL_56;
    }
    if (v8 == CFDictionaryGetTypeID())
    {
      if (v7 == 2)
      {
        LODWORD(v18) = 0;
      }
      else
      {
        uint64_t v18 = PrintFCore((uint64_t)*v5, (uint64_t)"%*s", v66, v67, v68, v69, v70, v71, (4 * *((_DWORD *)v5 + 4)));
        if ((v18 & 0x80000000) != 0) {
          return v18;
        }
      }
      if (CFDictionaryGetCount(v4) < 1)
      {
        int v37 = ((uint64_t (*)(const char *, uint64_t))**v5)("{}", 2);
        goto LABEL_59;
      }
      uint64_t v167 = 0;
      if (v7 == 2) {
        int64_t v78 = "{ ";
      }
      else {
        int64_t v78 = "{\n";
      }
      uint64_t v79 = ((uint64_t (*)(const char *, uint64_t))**v5)(v78, 2);
      int v80 = v79;
      if ((v79 & 0x80000000) != 0) {
        return v79;
      }
      *(void *)&context.byte0 = *v5;
      *(void *)&context.byte8 = v6;
      int v81 = *((_DWORD *)v5 + 4) + 1;
      int v166 = 0;
      LODWORD(v167) = 0;
      int v165 = v81;
      CFDictionaryApplyFunction(v4, (CFDictionaryApplierFunction)PrintFWriteCFObjectApplier, &context);
      if ((v167 & 0x80000000) != 0) {
        return v167;
      }
      int v88 = v80 + v18 + v166;
      if (v7 != 2)
      {
        uint64_t v89 = PrintFCore((uint64_t)*v5, (uint64_t)"%*s", v82, v83, v84, v85, v86, v87, (4 * *((_DWORD *)v5 + 4)));
        uint64_t v18 = v89;
        if ((v89 & 0x80000000) != 0) {
          return v18;
        }
        v88 += v89;
      }
      int v61 = ((uint64_t (*)(const char *, uint64_t))**v5)("}", 1);
      unsigned int v62 = v61 + v88;
      goto LABEL_86;
    }
    if (v8 == CFNumberGetTypeID())
    {
      if (v7 == 2)
      {
        LODWORD(v18) = 0;
      }
      else
      {
        uint64_t v18 = PrintFCore((uint64_t)*v5, (uint64_t)"%*s", v72, v73, v74, v75, v76, v77, (4 * *((_DWORD *)v5 + 4)));
        if ((v18 & 0x80000000) != 0) {
          return v18;
        }
      }
      *(void *)&context.byte0 = 0;
      if (CFNumberIsFloatType(v4))
      {
        CFNumberGetValue(v4, kCFNumberDoubleType, &context);
        int v37 = PrintFCore((uint64_t)*v5, (uint64_t)"%f", v96, v97, v98, v99, v100, v101, *(uint64_t *)&context.byte0);
      }
      else
      {
        CFNumberGetValue(v4, kCFNumberSInt64Type, &context);
        int v37 = PrintFCore((uint64_t)*v5, (uint64_t)"%lld", v108, v109, v110, v111, v112, v113, *(uint64_t *)&context.byte0);
      }
      goto LABEL_59;
    }
    if (v8 == CFStringGetTypeID())
    {
      if (v7 == 2)
      {
        LODWORD(v18) = 0;
      }
      else
      {
        uint64_t v18 = PrintFCore((uint64_t)*v5, (uint64_t)"%*s", v90, v91, v92, v93, v94, v95, (4 * *((_DWORD *)v5 + 4)));
        if ((v18 & 0x80000000) != 0) {
          return v18;
        }
      }
      uint64_t v17 = ((uint64_t (*)(const char *, uint64_t))**v5)("\"", 1);
      if ((v17 & 0x80000000) != 0) {
        return v17;
      }
      LODWORD(v18) = v17 + v18;
      CFIndex Length = CFStringGetLength((CFStringRef)v4);
      size_t MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
      CFIndex v163 = MaximumSizeForEncoding;
      if (MaximumSizeForEncoding)
      {
        CFIndex v116 = MaximumSizeForEncoding;
        uint64_t v117 = (UInt8 *)malloc_type_malloc(MaximumSizeForEncoding, 0x66A5B184uLL);
        if (!v117) {
          return 4294960568;
        }
        uint64_t v118 = (CFUUIDBytes *)v117;
        CFIndex usedBufLen = 0;
        v170.location = 0;
        v170.size_t length = Length;
        CFStringGetBytes((CFStringRef)v4, v170, 0x8000100u, 0x5Eu, 0, v117, v116, &usedBufLen);
        if (*(unsigned char *)(v6 + 27))
        {
          p_CFUUIDBytes context = &context;
          _PrintFObfuscateString((unint64_t)v118, usedBufLen, &context, &v163);
          CFIndex usedBufLen = v163;
        }
        else
        {
          p_CFUUIDBytes context = v118;
        }
        int v127 = (**v5)(p_context);
        free(v118);
        uint64_t v18 = (v18 & ~(v127 >> 31)) + v127;
        if (v127 < 0) {
          return v18;
        }
      }
      int v61 = ((uint64_t (*)(const char *, uint64_t))**v5)("\"", 1);
LABEL_56:
      unsigned int v62 = v61 + v18;
LABEL_86:
      if (v61 >= 0) {
        return v62;
      }
      else {
        return v61;
      }
    }
    if (v8 == CFNullGetTypeID())
    {
      if (v7 == 2)
      {
        LODWORD(v18) = 0;
      }
      else
      {
        uint64_t v18 = PrintFCore((uint64_t)*v5, (uint64_t)"%*s", v102, v103, v104, v105, v106, v107, (4 * *((_DWORD *)v5 + 4)));
        if ((v18 & 0x80000000) != 0) {
          return v18;
        }
      }
      int v61 = ((uint64_t (*)(const char *, uint64_t))**v5)("Null", 4);
      goto LABEL_56;
    }
    if (v8 != CFURLGetTypeID())
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        *(void *)&context.byte0 = 0;
        *(void *)&context.byte8 = 0;
        if (v7 == 2)
        {
          LODWORD(v18) = 0;
LABEL_127:
          [(__CFArray *)v4 getUUIDBytes:&context];
          uint64_t v140 = (uint64_t)*v5;
          if (*(unsigned char *)(v6 + 27)) {
            int v141 = "%~#U";
          }
          else {
            int v141 = "%#U";
          }
LABEL_138:
          uint64_t v17 = PrintFCore(v140, (uint64_t)v141, v134, v135, v136, v137, v138, v139, (uint64_t)&context);
          if ((v17 & 0x80000000) != 0) {
            return v17;
          }
          return (v17 + v18);
        }
        else
        {
          uint64_t v18 = PrintFCore((uint64_t)*v5, (uint64_t)"%*s", v121, v122, v123, v124, v125, v126, (4 * *((_DWORD *)v5 + 4)));
          if ((v18 & 0x80000000) == 0) {
            goto LABEL_127;
          }
        }
        return v18;
      }
      if (v8 == CFUUIDGetTypeID())
      {
        if (v7 == 2)
        {
          LODWORD(v18) = 0;
        }
        else
        {
          uint64_t v18 = PrintFCore((uint64_t)*v5, (uint64_t)"%*s", v128, v129, v130, v131, v132, v133, (4 * *((_DWORD *)v5 + 4)));
          if ((v18 & 0x80000000) != 0) {
            return v18;
          }
        }
        CFUUIDBytes context = CFUUIDGetUUIDBytes(v4);
        uint64_t v140 = (uint64_t)*v5;
        if (*(unsigned char *)(v6 + 27)) {
          int v141 = "%~#U";
        }
        else {
          int v141 = "%#U";
        }
        goto LABEL_138;
      }
      if (v8 == CFSetGetTypeID())
      {
        uint64_t v148 = [(__CFArray *)v4 allObjects];
        if (v148) {
          uint64_t v18 = PrintFWriteCFObjectLevel(v5, v148, v3);
        }
        else {
          uint64_t v18 = 4294960568;
        }

        return v18;
      }
      if (v7 == 2)
      {
        LODWORD(v18) = 0;
      }
      else
      {
        uint64_t v18 = PrintFCore((uint64_t)*v5, (uint64_t)"%*s", v142, v143, v144, v145, v146, v147, (4 * *((_DWORD *)v5 + 4)));
        if ((v18 & 0x80000000) != 0) {
          return v18;
        }
      }
      CFStringRef v155 = CFCopyDescription(v4);
      uint64_t v156 = (uint64_t)*v5;
      if (v155)
      {
        int v157 = PrintFCore(v156, (uint64_t)"%@", v149, v150, v151, v152, v153, v154, (uint64_t)v155);
        CFRelease(v155);
        if (v157 >= 0) {
          int v158 = v18;
        }
        else {
          int v158 = 0;
        }
        return (v158 + v157);
      }
      int v37 = PrintFCore(v156, (uint64_t)"<<UNKNOWN CF OBJECT TYPE: %d>>", v149, v150, v151, v152, v153, v154, v8);
      goto LABEL_59;
    }
    CFStringRef v120 = CFURLGetString(v4);
    if (!v120) {
      return 4294960596;
    }
    a2 = (const __CFArray *)v120;
    a1 = v5;
    a3 = v3;
  }
  BytePtr = (unsigned __int8 *)CFDataGetBytePtr(v4);
  unint64_t v39 = CFDataGetLength(v4);
  unint64_t v41 = v39;
  unint64_t v42 = v39;
  if ((*(unsigned char *)v6 & 8) != 0) {
    unint64_t v42 = *(void *)(v6 + 16);
  }
  if (v7 == 2)
  {
    if (v42 >= v39) {
      unint64_t v43 = v39;
    }
    else {
      unint64_t v43 = v42;
    }
    if (v43 >= 0x40) {
      unint64_t v44 = 64;
    }
    else {
      unint64_t v44 = v43;
    }
    uint64_t v18 = PrintFWriteHexByteStream((uint64_t (**)(unsigned char *, uint64_t, void))*v5, 0, BytePtr, v44);
    if ((v18 & 0x80000000) == 0 && v44 < v41)
    {
      int v37 = ((uint64_t (*)(const char *, uint64_t))**v5)("...", 3);
      goto LABEL_59;
    }
  }
  else
  {
    int v64 = *((_DWORD *)v5 + 4);
    if (v3 || v39 >= 0x11)
    {
      if (v3)
      {
        LODWORD(v18) = 0;
      }
      else
      {
        uint64_t v18 = ((uint64_t (*)(const char *, uint64_t))**v5)("\n", 1);
        if ((v18 & 0x80000000) != 0) {
          return v18;
        }
      }
      uint64_t v65 = (v64 + 1);
    }
    else
    {
      uint64_t v65 = 0;
      LODWORD(v18) = 0;
    }
    *((_DWORD *)v5 + 4) = v65;
    uint64_t v17 = PrintFWriteHex((uint64_t (**)(const char *, uint64_t))*v5, v6, v65, (uint64_t)BytePtr, v41, v42, 0, v40);
    if ((v17 & 0x80000000) != 0) {
      return v17;
    }
    uint64_t v18 = (v17 + v18);
    *((_DWORD *)v5 + 4) = v64;
  }
  return v18;
}

uint64_t CFDateGetComponents(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7, _DWORD *a8)
{
  CFCalendarRef v16 = CFCalendarCopyCurrent();
  if (v16)
  {
    uint64_t v17 = v16;
    CFTimeZoneRef v18 = CFTimeZoneCreateWithName(0, @"GMT", 0);
    if (v18)
    {
      CFTimeZoneRef v19 = v18;
      CFCalendarSetTimeZone(v17, v18);
      CFRelease(v19);
      double v20 = MEMORY[0x192FA8D70](a1);
      if (CFCalendarDecomposeAbsoluteTime(v17, v20, "yMdHms", a2, a3, a4, a5, a6, a7))
      {
        if (a8) {
          *a8 = (int)(modf(v20, &__y) * 1000000.0);
        }
        CFRelease(v17);
        return 0;
      }
    }
    CFRelease(v17);
  }
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  *a7 = 0;
  if (a8) {
    *a8 = 0;
  }
  return 4294960596;
}

BOOL GestaltGetBoolean(const void *a1, uint64_t a2, int *a3)
{
  CFStringRef v4 = (const __CFString *)GestaltCopyAnswer(a1, a2, a3);
  if (!v4) {
    return 0;
  }
  CFStringRef v5 = v4;
  BOOL v6 = CFGetInt64(v4, a3) != 0;
  CFRelease(v5);
  return v6;
}

int64_t CFGetInt64Ranged(const __CFString *a1, int64_t a2, int64_t a3, int *a4)
{
  int v9 = 0;
  int64_t result = CFGetInt64(a1, &v9);
  int v8 = v9;
  if (v9)
  {
LABEL_5:
    if (!a4) {
      return result;
    }
    goto LABEL_6;
  }
  if (result >= a2 && result <= a3)
  {
    int v8 = 0;
    goto LABEL_5;
  }
  int v8 = -6710;
  if (!a4) {
    return result;
  }
LABEL_6:
  *a4 = v8;
  return result;
}

unint64_t CFGetInt64(const __CFString *a1, int *a2)
{
  valuePtr[16] = *(double *)MEMORY[0x1E4F143B8];
  unint64_t v20 = 0;
  if (!a1)
  {
    int v12 = -6705;
    goto LABEL_39;
  }
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 == CFNumberGetTypeID())
  {
    if (CFNumberIsFloatType((CFNumberRef)a1))
    {
      valuePtr[0] = 0.0;
      CFNumberGetValue((CFNumberRef)a1, kCFNumberDoubleType, valuePtr);
      double v5 = valuePtr[0];
      if (valuePtr[0] < -9.22337204e18)
      {
        unint64_t v6 = 0x8000000000000000;
LABEL_26:
        unint64_t v20 = v6;
        int v12 = -6710;
        goto LABEL_39;
      }
      if (valuePtr[0] >= 9.22337204e18)
      {
        unint64_t v6 = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_26;
      }
      goto LABEL_36;
    }
    CFNumberGetValue((CFNumberRef)a1, kCFNumberSInt64Type, &v20);
LABEL_38:
    int v12 = 0;
    goto LABEL_39;
  }
  if ((const __CFString *)*MEMORY[0x1E4F1CFD0] == a1) {
    goto LABEL_22;
  }
  if ((const __CFString *)*MEMORY[0x1E4F1CFC8] == a1)
  {
LABEL_27:
    unint64_t v20 = 0;
    goto LABEL_38;
  }
  if (v4 == CFStringGetTypeID())
  {
    if (CFStringGetCString(a1, (char *)valuePtr, 128, 0x600u))
    {
      if (strnicmpx((unsigned __int8 *)valuePtr, -1, "true")
        && strnicmpx((unsigned __int8 *)valuePtr, -1, "yes")
        && strnicmpx((unsigned __int8 *)valuePtr, -1, "y")
        && strnicmpx((unsigned __int8 *)valuePtr, -1, "on")
        && strnicmpx((unsigned __int8 *)valuePtr, -1, "1"))
      {
        if (strnicmpx((unsigned __int8 *)valuePtr, -1, "false")
          && strnicmpx((unsigned __int8 *)valuePtr, -1, "no")
          && strnicmpx((unsigned __int8 *)valuePtr, -1, "n")
          && strnicmpx((unsigned __int8 *)valuePtr, -1, "off")
          && strnicmpx((unsigned __int8 *)valuePtr, -1, "0"))
        {
          if (SNScanF((char *)valuePtr, 0xFFFFFFFFFFFFFFFFLL, "%lli", v7, v8, v9, v10, v11, (int)&v20) != 1)
          {
            int v12 = -6717;
            goto LABEL_39;
          }
          goto LABEL_38;
        }
        goto LABEL_27;
      }
LABEL_22:
      uint64_t v13 = 1;
LABEL_37:
      unint64_t v20 = v13;
      goto LABEL_38;
    }
    goto LABEL_45;
  }
  if (v4 == CFDataGetTypeID())
  {
    BytePtr = CFDataGetBytePtr((CFDataRef)a1);
    CFIndex Length = CFDataGetLength((CFDataRef)a1);
    if (Length <= 8)
    {
      if (Length >= 1)
      {
        unint64_t v16 = 0;
        uint64_t v17 = &BytePtr[Length];
        do
        {
          unsigned int v18 = *BytePtr++;
          unint64_t v16 = v18 | (v16 << 8);
          unint64_t v20 = v16;
        }
        while (BytePtr < v17);
      }
      goto LABEL_38;
    }
LABEL_45:
    int v12 = -6743;
    goto LABEL_39;
  }
  if (v4 == CFDateGetTypeID())
  {
    double v5 = MEMORY[0x192FA8D70](a1);
LABEL_36:
    uint64_t v13 = (uint64_t)v5;
    goto LABEL_37;
  }
  if (v4 == CFNullGetTypeID()) {
    goto LABEL_38;
  }
  int v12 = -6756;
LABEL_39:
  if (a2) {
    *a2 = v12;
  }
  return v20;
}

uint64_t GestaltCopyAnswer(CFTypeRef cf1, uint64_t a2, int *a3)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (!gGestaltHook_f || (uint64_t result = gGestaltHook_f(cf1, a2, a3, gGestaltHook_ctx)) == 0)
  {
    if (CFEqual(cf1, @"NANCapability"))
    {
      int v6 = gGestaltCacheNANCapability;
      if (!gGestaltCacheNANCapability)
      {
        if (if_nametoindex("nan0")) {
          int v6 = 6;
        }
        else {
          int v6 = 5;
        }
        gGestaltCacheNANCapability = v6;
      }
      goto LABEL_21;
    }
    if (!CFEqual(cf1, @"R1Capability"))
    {
      if (CFEqual(cf1, @"systemUUID"))
      {
        uint64_t v36 = 0;
        pthread_mutex_lock(&gGestaltLock);
        if (gGestaltDomain) {
          CFStringRef v17 = (const __CFString *)gGestaltDomain;
        }
        else {
          CFStringRef v17 = (const __CFString *)*MEMORY[0x1E4F1D3D8];
        }
        __s[0] = 0;
        CFPrefs_GetCString(v17, @"systemUUID", __s, 0x80uLL, 0);
        unsigned int v18 = strchr(__s, 58);
        if (v18
          && (uint64_t v22 = v18, !StringToUUIDEx(__s, v18 - __s, 0, 0, &bytes, v19, v20, v21))
          && sscanf(v22 + 1, "%lf", &v36) == 1)
        {
          if (gLogCategory_Gestalt <= 20
            && (gLogCategory_Gestalt != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_Gestalt, 0x14u)))
          {
            LogPrintF((uint64_t)&gLogCategory_Gestalt, (uint64_t)"void GetSystemUUID(int, uint8_t *)", 0x14u, (uint64_t)"Reused system UUID %s\n", v23, v24, v25, v26, (uint64_t)__s);
          }
        }
        else
        {
          RandomBytes(&bytes, 0x10uLL);
          BYTE6(bytes) = BYTE6(bytes) & 0xF | 0x40;
          BYTE8(bytes) = BYTE8(bytes) & 0x3F | 0x80;
          CFAbsoluteTimeGetCurrent();
          SNPrintF((uint64_t)__s, 128, (uint64_t)"%#U:%f", v27, v28, v29, v30, v31, (uint64_t)&bytes);
          CFPrefs_SetCString(v17, @"systemUUID", __s, -1);
          CFPreferencesAppSynchronize(v17);
          if (gLogCategory_Gestalt <= 40
            && (gLogCategory_Gestalt != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_Gestalt, 0x28u)))
          {
            LogPrintF((uint64_t)&gLogCategory_Gestalt, (uint64_t)"void GetSystemUUID(int, uint8_t *)", 0x28u, (uint64_t)"Generated system UUID %s\n", v32, v33, v34, v35, (uint64_t)__s);
          }
        }
        pthread_mutex_unlock(&gGestaltLock);
        uint64_t result = (uint64_t)CFDataCreate(0, (const UInt8 *)&bytes, 16);
        if (result) {
          goto LABEL_25;
        }
        int v16 = -6728;
      }
      else
      {
        uint64_t result = MGCopyAnswer();
        if (result)
        {
LABEL_25:
          int v16 = 0;
          goto LABEL_26;
        }
        int v16 = -6727;
      }
LABEL_26:
      if (a3) {
        *a3 = v16;
      }
      return result;
    }
    int v6 = gGestaltCacheR1Capability;
    if (gGestaltCacheR1Capability)
    {
LABEL_21:
      if (v6 == 6) {
        uint64_t v15 = (uint64_t *)MEMORY[0x1E4F1CFD0];
      }
      else {
        uint64_t v15 = (uint64_t *)MEMORY[0x1E4F1CFC8];
      }
      uint64_t result = *v15;
      goto LABEL_25;
    }
    mach_port_t v7 = *MEMORY[0x1E4F2EEF0];
    CFDictionaryRef v8 = IOServiceNameMatching("rose");
    io_service_t MatchingService = IOServiceGetMatchingService(v7, v8);
    if (MatchingService)
    {
      io_registry_entry_t v10 = MatchingService;
      CFStringRef CFProperty = (const __CFString *)IORegistryEntryCreateCFProperty(MatchingService, @"ChipID", 0, 0);
      unint64_t v12 = CFGetInt64(CFProperty, 0);
      if (CFProperty) {
        CFRelease(CFProperty);
      }
      if (v12)
      {
        CFStringRef v13 = (const __CFString *)IORegistryEntryCreateCFProperty(v10, @"ECID", 0, 0);
        unint64_t v14 = CFGetInt64(v13, 0);
        if (v13) {
          CFRelease(v13);
        }
        IOObjectRelease(v10);
        if (v14) {
          int v6 = 6;
        }
        else {
          int v6 = 5;
        }
        goto LABEL_20;
      }
      IOObjectRelease(v10);
    }
    int v6 = 5;
LABEL_20:
    gGestaltCacheR1Capability = v6;
    goto LABEL_21;
  }
  return result;
}

void CUDispatchTimerSet(NSObject *a1, double a2, double a3, double a4)
{
}

void sub_18E3057FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CUXPCDictionaryCreateReply(void *a1)
{
  id v1 = a1;
  CFStringRef v2 = objc_getAssociatedObject(v1, &sCUXPCResponseHandlerKey);
  if (v2)
  {
    xpc_object_t reply = xpc_dictionary_create(0, 0, 0);
    objc_setAssociatedObject(reply, &sCUXPCResponseHandlerKey, v2, (void *)0x301);
  }
  else
  {
    xpc_object_t reply = xpc_dictionary_create_reply(v1);
  }

  return reply;
}

uint64_t CUMainQueue()
{
  if (CUMainQueue_sOnce != -1) {
    dispatch_once(&CUMainQueue_sOnce, &__block_literal_global_18);
  }
  return CUMainQueue_sQueue;
}

uint64_t NSErrorToOSStatus(void *a1)
{
  return NSErrorToOSStatusEx(a1, 0);
}

id CUXPCDecodeNSErrorIfNeeded(void *a1)
{
  id v1 = a1;
  if (MEMORY[0x192FAB6C0]() == MEMORY[0x1E4F14590])
  {
    id v16 = 0;
    id v17 = 0;
    CUXPCDecodeNSError(v1, "errO", "errC", "errD", "errM", "errO", &v17, &v16);
    id v10 = v17;
    id v11 = v16;
    unint64_t v12 = v11;
    if (v10) {
      CFStringRef v13 = v10;
    }
    else {
      CFStringRef v13 = v11;
    }
    id v14 = v13;
  }
  else
  {
    if (v1 == (id)MEMORY[0x1E4F14520])
    {
      mach_port_t v7 = (void *)*MEMORY[0x1E4F28760];
      uint64_t v9 = 4294896154;
      CFDictionaryRef v8 = "XPC connection interrupted";
    }
    else
    {
      mach_port_t v7 = (void *)*MEMORY[0x1E4F28760];
      if (v1 == (id)MEMORY[0x1E4F14528])
      {
        CFDictionaryRef v8 = "XPC connection invalidated";
        uint64_t v9 = 4294896148;
      }
      else
      {
        CFDictionaryRef v8 = "XPC unknown type";
        uint64_t v9 = 4294960540;
      }
    }
    NSErrorF_safe(v7, v9, (uint64_t)v8, v2, v3, v4, v5, v6, (uint64_t)v16);
    id v14 = (id)objc_claimAutoreleasedReturnValue();
  }

  return v14;
}

uint64_t CUXPCDecodeNSError(void *a1, const char *a2, const char *a3, const char *a4, const char *a5, const char *a6, void *a7, void *a8)
{
  uint64_t v14 = xpc_dictionary_get_value(a1, a2);
  uint64_t v15 = (void *)v14;
  if (v14)
  {
    if (MEMORY[0x192FAB6C0](v14) == MEMORY[0x1E4F14590])
    {
      uint64_t v21 = _CUXPCDecodeNSError(v15, a3, a4, a5, a6, 1u, 0, a7, a8);
    }
    else if (a8)
    {
      NSErrorF_safe((void *)*MEMORY[0x1E4F28760], 4294960540, (uint64_t)"XPC non-dictionary error object", v16, v17, v18, v19, v20, v23);
      uint64_t v21 = 0;
      *a8 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      uint64_t v21 = 0;
    }
  }
  else
  {
    uint64_t v21 = 1;
  }

  return v21;
}

id FMFSessionFunction()
{
  return (id)classFMFSession;
}

void sub_18E305EF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ASPrintF(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return VASPrintF(a1, a2, (uint64_t)&a9);
}

uint64_t HexToData(char *__s, int64_t a2, char a3, uint64_t a4, unint64_t a5, unint64_t *a6, void *a7, char **a8)
{
  unint64_t v12 = __s;
  if (a2 == -1) {
    a2 = strlen(__s);
  }
  CFStringRef v13 = (unsigned __int8 *)&v12[a2];
  uint64_t v14 = MEMORY[0x1E4F14390];
  int64_t v30 = a2;
  uint64_t v15 = v12;
  if (a2 >= 1)
  {
    do
    {
      uint64_t v16 = *v15;
      if (*v15 < 0)
      {
        if (!__maskrune(v16, 0x4000uLL)) {
          break;
        }
      }
      else if ((*(_DWORD *)(v14 + 4 * v16 + 60) & 0x4000) == 0)
      {
        break;
      }
      ++v15;
    }
    while (v15 < (char *)v13);
  }
  if (v13 - (unsigned __int8 *)v15 > 1 && *v15 == 48 && (v15[1] | 0x20) == 0x78) {
    v15 += 2;
  }
  if (v15 >= (char *)v13)
  {
    unint64_t v20 = 0;
    uint64_t v19 = 0;
    if (a4) {
      goto LABEL_56;
    }
    goto LABEL_59;
  }
  uint64_t v28 = a8;
  uint64_t v29 = a7;
  uint64_t v27 = v12;
  char v17 = 0;
  int v18 = 0;
  uint64_t v19 = 0;
  unint64_t v20 = 0;
  while (1)
  {
    uint64_t v21 = *v15;
    if (v13 - (unsigned __int8 *)v15 >= 2 && (a3 & 0x10) != 0 && !v18 && v21 == 48)
    {
      if ((v15[1] | 0x20) == 0x78)
      {
        int v18 = 0;
        ++v15;
        goto LABEL_31;
      }
      char v22 = 0;
LABEL_30:
      char v17 = 16 * v22;
      int v18 = 1;
      goto LABEL_31;
    }
    char v22 = v21 - 48;
    if ((v21 - 48) < 0xAu) {
      goto LABEL_24;
    }
    if ((v21 - 65) <= 5u)
    {
      char v22 = v21 - 55;
LABEL_24:
      if (v18) {
        goto LABEL_25;
      }
      goto LABEL_30;
    }
    if ((v21 - 97) <= 5u)
    {
      char v22 = v21 - 87;
      if (v18)
      {
LABEL_25:
        v17 |= v22;
        if (a4 && v20 < a5) {
          *(unsigned char *)(a4 + v20++) = v17;
        }
        int v18 = 0;
        ++v19;
        goto LABEL_31;
      }
      goto LABEL_30;
    }
    if ((a3 & 2) == 0) {
      goto LABEL_41;
    }
    if ((v21 & 0x80) != 0) {
      break;
    }
    if ((*(_DWORD *)(v14 + 4 * v21 + 60) & 0x4000) == 0) {
      goto LABEL_41;
    }
LABEL_31:
    if (++v15 >= (char *)v13) {
      goto LABEL_44;
    }
  }
  if (__maskrune(*v15, 0x4000uLL)) {
    goto LABEL_31;
  }
LABEL_41:
  if ((a3 & 4) != 0
    && (v21 - 44) <= 0x33
    && ((1 << (v21 - 44)) & 0x8000000004003) != 0)
  {
    goto LABEL_31;
  }
LABEL_44:
  if ((a3 & 8) != 0 || !v18)
  {
    unint64_t v12 = v27;
    a8 = v28;
    a7 = v29;
    if (a4) {
      goto LABEL_56;
    }
  }
  else
  {
    if (a4)
    {
      a7 = v29;
      if (v20 < a5) {
        *(unsigned char *)(a4 + v20++) = v17;
      }
      unint64_t v12 = v27;
      a8 = v28;
    }
    else
    {
      unint64_t v12 = v27;
      a8 = v28;
      a7 = v29;
    }
    ++v19;
    if (a4)
    {
LABEL_56:
      if ((a3 & 1) != 0 && a5 > v20) {
        bzero((void *)(a4 + v20), a5 - v20);
      }
    }
  }
LABEL_59:
  if (a6) {
    *a6 = v20;
  }
  if (a7) {
    *a7 = v19;
  }
  if (a8) {
    *a8 = v15;
  }
  if (v15 < (char *)v13)
  {
    uint64_t v23 = &v12[v30];
    int64_t v24 = &v12[v30] - v15;
    do
    {
      uint64_t v25 = *v15;
      if (*v15 < 0)
      {
        if (!__maskrune(v25, 0x4000uLL)) {
          goto LABEL_73;
        }
      }
      else if ((*(_DWORD *)(v14 + 4 * v25 + 60) & 0x4000) == 0)
      {
        goto LABEL_73;
      }
      ++v15;
      --v24;
    }
    while (v24);
    uint64_t v15 = v23;
  }
LABEL_73:
  if (v15 == (char *)v13) {
    return 0;
  }
  if ((*(_DWORD *)(v14 + 4 * *v15 + 60) & 0x10000) != 0)
  {
    if (a5 <= v20) {
      return 4294960545;
    }
    else {
      return 4294960579;
    }
  }
  else if (v19)
  {
    return 0;
  }
  else
  {
    return 4294960554;
  }
}

uint64_t CUXPCGetNextClientID()
{
  if (CUXPCGetNextClientID_sOnce != -1) {
    dispatch_once(&CUXPCGetNextClientID_sOnce, &__block_literal_global_10426);
  }
  return atomic_fetch_add((atomic_uint *volatile)&CUXPCGetNextClientID_sNext, 1u) + 1;
}

uint64_t TLV8GetNext(unsigned char *a1, unsigned char *a2, unsigned char *a3, void *a4, void *a5, void *a6)
{
  if (a1 == a2) {
    return 4294960569;
  }
  if (a1 >= a2) {
    return 4294960591;
  }
  if ((unint64_t)(a2 - a1) < 2) {
    return 4294960569;
  }
  uint64_t v6 = a1[1];
  mach_port_t v7 = &a1[v6 + 2];
  if (v7 > a2) {
    return 4294960546;
  }
  *a3 = *a1;
  *a4 = a1 + 2;
  *a5 = v6;
  uint64_t result = 0;
  if (a6) {
    *a6 = v7;
  }
  return result;
}

__CFString *OPACKDecodeData(const __CFData *a1, unsigned int a2, _DWORD *a3)
{
  BytePtr = (UInt8 *)CFDataGetBytePtr(a1);
  CFIndex Length = CFDataGetLength(a1);
  return _OPACKDecodeBytes((uint64_t)a1, BytePtr, Length, a2, a3);
}

double CFGetDouble(const __CFString *a1, _DWORD *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  double valuePtr = 0.0;
  int v14 = 0;
  if (!a1)
  {
    int v12 = -6705;
LABEL_31:
    int v14 = v12;
    goto LABEL_24;
  }
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 == CFNumberGetTypeID())
  {
    CFNumberGetValue((CFNumberRef)a1, kCFNumberDoubleType, &valuePtr);
    goto LABEL_23;
  }
  if (v4 == CFStringGetTypeID())
  {
    uint64_t v13 = 0;
    if (CFStringGetCString(a1, buffer, 128, 0x600u))
    {
      if (!strnicmpx((unsigned __int8 *)buffer, -1, "true")
        || !strnicmpx((unsigned __int8 *)buffer, -1, "yes")
        || !strnicmpx((unsigned __int8 *)buffer, -1, "y")
        || !strnicmpx((unsigned __int8 *)buffer, -1, "on")
        || !strnicmpx((unsigned __int8 *)buffer, -1, "1"))
      {
        double valuePtr = 1.0;
        goto LABEL_23;
      }
      if (!strnicmpx((unsigned __int8 *)buffer, -1, "false")
        || !strnicmpx((unsigned __int8 *)buffer, -1, "no")
        || !strnicmpx((unsigned __int8 *)buffer, -1, "n")
        || !strnicmpx((unsigned __int8 *)buffer, -1, "off")
        || !strnicmpx((unsigned __int8 *)buffer, -1, "0"))
      {
        double valuePtr = 0.0;
        goto LABEL_23;
      }
      if (sscanf(buffer, "%lf", &valuePtr) == 1)
      {
LABEL_23:
        int v14 = 0;
        goto LABEL_24;
      }
      if (SNScanF(buffer, 0xFFFFFFFFFFFFFFFFLL, "%lli", v5, v6, v7, v8, v9, (int)&v13) == 1)
      {
        double v10 = (double)v13;
LABEL_21:
        double valuePtr = v10;
        goto LABEL_23;
      }
      int v12 = -6717;
    }
    else
    {
      int v12 = -6743;
    }
    goto LABEL_31;
  }
  if (v4 == CFDateGetTypeID())
  {
    double v10 = MEMORY[0x192FA8D70](a1);
    goto LABEL_21;
  }
  double valuePtr = (double)(uint64_t)CFGetInt64(a1, &v14);
LABEL_24:
  if (a2) {
    *a2 = v14;
  }
  return valuePtr;
}

uint64_t BonjourBrowser_Start(dispatch_queue_t *a1, const char *a2, const char *a3, const char *a4, uint64_t a5)
{
  double v10 = malloc_type_calloc(1uLL, 0x28uLL, 0x1030040D16A4755uLL);
  if (v10)
  {
    id v11 = v10;
    *double v10 = a1;
    v10[4] = a5;
    int v12 = strdup(a2);
    v11[1] = v12;
    if (v12)
    {
      uint64_t v13 = v12;
      if (a3) {
        int v14 = a3;
      }
      else {
        int v14 = "";
      }
      uint64_t v15 = strdup(v14);
      v11[2] = v15;
      if (v15)
      {
        if (!a4 || !*a4 || (uint64_t v16 = strdup(a4), (v11[3] = v16) != 0))
        {
          CFRetain(a1);
          dispatch_async_f(a1[2], v11, (dispatch_function_t)_BonjourBrowser_Start);
          return 0;
        }
      }
      free(v13);
    }
    else
    {
      uint64_t v15 = (char *)v11[2];
    }
    if (v15) {
      free(v15);
    }
    int v18 = (void *)v11[3];
    if (v18) {
      free(v18);
    }
    free(v11);
  }
  return 4294960568;
}

void CFDictionaryApplyBlock(const __CFDictionary *a1, void *context)
{
}

uint64_t __IsAppleInternalBuild_block_invoke()
{
  uint64_t result = os_variant_allows_internal_security_policies();
  if (result) {
    uint64_t result = os_variant_has_internal_content();
  }
  IsAppleInternalBuild_sIsInternal = result;
  return result;
}

uint64_t TextToHardwareAddress(char *__s, size_t a2, uint64_t a3, unsigned char *a4)
{
  if (__s)
  {
    uint64_t v5 = a3;
    uint64_t v6 = __s;
    if (a2 == -1)
    {
      a2 = strlen(__s);
      if (!v5) {
        return 0;
      }
    }
    else if (!a3)
    {
      return 0;
    }
    uint64_t v7 = &v6[a2];
    uint64_t v8 = MEMORY[0x1E4F14390];
    while (1)
    {
      if (v6 >= v7) {
        return 4294960554;
      }
      int v9 = 0;
      int v10 = 0;
      --v5;
      id v11 = v6;
      while (1)
      {
        unsigned int v13 = *v6++;
        unsigned int v12 = v13;
        int v14 = (char)v13;
        if (v13 - 48 > 9) {
          break;
        }
        int v9 = v14 + 16 * v9 - 48;
LABEL_17:
        ++v10;
LABEL_18:
        if (v10 <= 1)
        {
          id v11 = v6;
          if (v6 < v7) {
            continue;
          }
        }
        if (!v10) {
          return 4294960554;
        }
        if (a4) {
          goto LABEL_22;
        }
        goto LABEL_23;
      }
      if ((*(_DWORD *)(v8 + 4 * v14 + 60) & 0x10000) != 0) {
        break;
      }
      if (!v10)
      {
        if (v12 > 0x3A || ((1 << v12) & 0x400200100000000) == 0) {
          return 4294960554;
        }
        int v10 = 0;
        goto LABEL_18;
      }
      uint64_t v6 = v11 + 1;
      if (a4) {
LABEL_22:
      }
        *a4++ = v9;
LABEL_23:
      if (!v5) {
        return 0;
      }
    }
    int v9 = __tolower(v12) + 16 * v9 - 87;
    goto LABEL_17;
  }
  return 4294960591;
}

uint64_t __CUXPCGetNextClientID_block_invoke()
{
  uint64_t result = RandomBytes(&CUXPCGetNextClientID_sNext, 4uLL);
  CUXPCGetNextClientID_sNext = (unsigned __int16)word_1E91CF042 << 16;
  return result;
}

uint64_t RandomBytes(void *bytes, size_t count)
{
  while (1)
  {
    uint64_t result = CCRandomGenerateBytes(bytes, count);
    if (!result) {
      break;
    }
    if (gLogCategory_RandomNumberUtils <= 60)
    {
      uint64_t v9 = result;
      if (gLogCategory_RandomNumberUtils != -1
        || _LogCategory_Initialize((uint64_t)&gLogCategory_RandomNumberUtils, 0x3Cu))
      {
        LogPrintF((uint64_t)&gLogCategory_RandomNumberUtils, (uint64_t)"OSStatus RandomBytes(void *, size_t)", 0x3Cu, (uint64_t)"### CCRandomGenerateBytes failed: %#m\n", v5, v6, v7, v8, v9);
      }
    }
    sleep(1u);
  }
  return result;
}

unint64_t UpTicksToSeconds(unint64_t a1)
{
  if (sUpTicksToSecondsOnce != -1) {
    dispatch_once_f(&sUpTicksToSecondsOnce, &sUpTicksToSecondsMultiplier, (dispatch_function_t)_UpTicksToSecondsInit);
  }
  return (unint64_t)(*(double *)&sUpTicksToSecondsMultiplier * (double)a1);
}

void CUXPCEncodeNSArrayOfNSString(void *a1, const char *a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a3;
  if (v6)
  {
    xpc_object_t v7 = xpc_array_create(0, 0);
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    id v8 = v6;
    uint64_t v9 = [v8 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = *(void *)v15;
      do
      {
        uint64_t v12 = 0;
        do
        {
          if (*(void *)v15 != v11) {
            objc_enumerationMutation(v8);
          }
          id v13 = *(id *)(*((void *)&v14 + 1) + 8 * v12);
          xpc_array_set_string(v7, 0xFFFFFFFFFFFFFFFFLL, (const char *)objc_msgSend(v13, "UTF8String", (void)v14));
          ++v12;
        }
        while (v10 != v12);
        uint64_t v10 = [v8 countByEnumeratingWithState:&v14 objects:v18 count:16];
      }
      while (v10);
    }

    xpc_dictionary_set_value(v5, a2, v7);
  }
}

BOOL _LogCategory_Initialize(uint64_t a1, unsigned __int8 a2)
{
  if (gLogUtilsInitializing) {
    return 0;
  }
  LogUtils_EnsureInitialized();
  pthread_mutex_lock(&gLogUtilsLock);
  if (*(_DWORD *)a1 == -1)
  {
    *(_DWORD *)a1 = *(_DWORD *)(a1 + 4);
    id v5 = &gLogCategoryList;
    uint64_t v6 = gLogCategoryList;
    if (gLogCategoryList)
    {
      while ((int)strnicmpx(*(unsigned __int8 **)(v6 + 24), -1, *(unsigned char **)(a1 + 24)) < 1)
      {
        uint64_t v7 = *(void *)(v6 + 48);
        id v5 = (uint64_t *)(v6 + 48);
        uint64_t v6 = v7;
        if (!v7) {
          goto LABEL_10;
        }
      }
      uint64_t v7 = *v5;
    }
    else
    {
      uint64_t v7 = 0;
    }
LABEL_10:
    *(void *)(a1 + 48) = v7;
    *id v5 = a1;
    if ((*(unsigned char *)(a1 + 18) & 2) != 0) {
      *(void *)(a1 + 104) = malloc_type_calloc(1uLL, 0x10uLL, 0x90040C859B4A5uLL);
    }
    id v8 = *(unsigned __int8 **)(a1 + 8);
    if (v8) {
      _LogControlLocked(v8, 0);
    }
    _LogCategory_ApplyActions(a1);
    uint64_t v9 = a1 + 56;
    if (!*(void *)(a1 + 56))
    {
      _LogOutputCreate("console", (uint64_t **)(a1 + 56));
      if (*(void *)v9) {
        ++*(_DWORD *)(*(void *)v9 + 8);
      }
      _LogCategory_ApplyActions(a1);
    }
  }
  int v10 = *(_DWORD *)a1;
  pthread_mutex_unlock(&gLogUtilsLock);
  return v10 <= a2;
}

void _LogOutputDeleteUnused()
{
  uint64_t v0 = gLogOutputList;
  if (gLogOutputList)
  {
    id v1 = &gLogOutputList;
    do
    {
      uint64_t v2 = v1;
      id v1 = (uint64_t *)v0;
      while (1)
      {
        uint64_t v0 = *v1;
        if (*((_DWORD *)v1 + 2)) {
          break;
        }
        uint64_t *v2 = v0;
        _LogOutputDelete(v1);
        id v1 = (uint64_t *)*v2;
        if (!*v2) {
          return;
        }
      }
    }
    while (v0);
  }
}

void _LogCategory_ApplyActions(uint64_t a1)
{
  uint64_t v1 = gLogActionList;
  if (gLogActionList)
  {
    do
    {
      if (!strnicmpx(*(unsigned __int8 **)(v1 + 16), -1, "level"))
      {
        int v3 = LUStringToLevel(*(char **)(v1 + 24));
        if (v3 != -1)
        {
          uint64_t v4 = gLogCategoryList;
          if (gLogCategoryList)
          {
            int v5 = v3;
            do
            {
              if ((!a1 || v4 == a1) && _LogCategoryMatch(*(_DWORD *)(v4 + 16), *(char **)(v4 + 24), *(char **)(v1 + 8))) {
                *(_DWORD *)uint64_t v4 = v5;
              }
              uint64_t v4 = *(void *)(v4 + 48);
            }
            while (v4);
          }
        }
      }
      uint64_t v1 = *(void *)v1;
    }
    while (v1);
    uint64_t v6 = gLogActionList;
    if (gLogActionList)
    {
      do
      {
        if (!strnicmpx(*(unsigned __int8 **)(v6 + 16), -1, "flags"))
        {
          uint64_t v7 = *(const char **)(v6 + 24);
          int v8 = 0;
          uint64_t v9 = &v7[strlen(v7)];
LABEL_17:
          int v10 = (unsigned __int8 *)v7;
          while (v10 < (unsigned __int8 *)v9)
          {
            if (*v10 == 59)
            {
              BOOL v11 = 1;
              uint64_t v12 = v10;
            }
            else
            {
              size_t v13 = v9 - 1 - (const char *)v10;
              uint64_t v12 = v10;
              while (v13)
              {
                int v14 = *++v12;
                --v13;
                if (v14 == 59) {
                  goto LABEL_26;
                }
              }
              uint64_t v12 = (unsigned __int8 *)v9;
LABEL_26:
              BOOL v11 = v12 < (unsigned __int8 *)v9;
            }
            uint64_t v15 = v12 - v10;
            uint64_t v7 = (const char *)&v12[v11];
            if (!strnicmpx(v10, v12 - v10, "none"))
            {
              int v8 = 0;
              goto LABEL_17;
            }
            if (!strnicmpx(v10, v15, "time"))
            {
              v8 |= 1u;
              goto LABEL_17;
            }
            if (!strnicmpx(v10, v15, "pid"))
            {
              v8 |= 2u;
              goto LABEL_17;
            }
            if (!strnicmpx(v10, v15, "program"))
            {
              v8 |= 4u;
              goto LABEL_17;
            }
            if (!strnicmpx(v10, v15, "category"))
            {
              v8 |= 8u;
              goto LABEL_17;
            }
            if (!strnicmpx(v10, v15, "level"))
            {
              v8 |= 0x10u;
              goto LABEL_17;
            }
            if (!strnicmpx(v10, v15, "prefix"))
            {
              v8 |= 0x20u;
              goto LABEL_17;
            }
            if (!strnicmpx(v10, v15, "function"))
            {
              v8 |= 0x40u;
              goto LABEL_17;
            }
            if (!strnicmpx(v10, v15, "thread"))
            {
              v8 |= 0x80u;
              goto LABEL_17;
            }
            int v16 = strnicmpx(v10, v15, "public");
            int v10 = (unsigned __int8 *)v7;
            if (!v16)
            {
              v8 |= 0x200u;
              goto LABEL_17;
            }
          }
          for (uint64_t i = gLogCategoryList; i; uint64_t i = *(void *)(i + 48))
          {
            if ((!a1 || i == a1) && _LogCategoryMatch(*(_DWORD *)(i + 16), *(char **)(i + 24), *(char **)(v6 + 8)))
            {
              if ((v8 & 0x20) != 0)
              {
                int v18 = *(char **)(i + 24);
                uint64_t v19 = strchr(v18, 95);
                if (!v19) {
                  LODWORD(v19) = v18 + strlen(v18);
                }
                *(void *)(i + 32) = v18;
                *(_DWORD *)(i + 40) = v19 - v18;
              }
              *(_DWORD *)(i + 16) = *(_DWORD *)(i + 16) & 0x70000 | v8;
            }
          }
        }
        uint64_t v6 = *(void *)v6;
      }
      while (v6);
      uint64_t v20 = gLogActionList;
      if (gLogActionList)
      {
        do
        {
          if (!strnicmpx(*(unsigned __int8 **)(v20 + 16), -1, "rate"))
          {
            uint64_t v21 = *(const char **)(v20 + 24);
            int64_t v22 = strlen(v21);
            uint64_t v23 = &v21[v22];
            if (v22 < 1)
            {
              unsigned int v24 = 0;
LABEL_66:
              uint64_t v26 = 0;
            }
            else
            {
              unsigned int v24 = 0;
              while (1)
              {
                unsigned int v25 = *(unsigned __int8 *)v21 - 48;
                if (v25 > 9) {
                  break;
                }
                unsigned int v24 = v25 + 10 * v24;
                if (++v21 >= v23) {
                  goto LABEL_66;
                }
              }
              uint64_t v26 = 1;
            }
            uint64_t v27 = &v21[v26];
            if (v27 >= v23)
            {
              uint64_t v28 = 0;
            }
            else
            {
              uint64_t v28 = 0;
              do
              {
                uint64_t v29 = *(unsigned __int8 *)v27;
                if ((v29 - 48) > 9) {
                  break;
                }
                uint64_t v28 = v29 + 10 * v28 - 48;
                ++v27;
              }
              while (v27 < v23);
            }
            if (UpTicksPerSecond_sOnce != -1) {
              dispatch_once_f(&UpTicksPerSecond_sOnce, &UpTicksPerSecond_sTicksPerSecond, (dispatch_function_t)_UpTicksPerSecondInit);
            }
            uint64_t v30 = gLogCategoryList;
            if (gLogCategoryList)
            {
              unint64_t v31 = UpTicksPerSecond_sTicksPerSecond * v28 / 0x3E8uLL;
              do
              {
                if ((!a1 || v30 == a1)
                  && _LogCategoryMatch(*(_DWORD *)(v30 + 16), *(char **)(v30 + 24), *(char **)(v20 + 8)))
                {
                  *(void *)(v30 + 72) = v31;
                  *(_DWORD *)(v30 + 88) = v24;
                }
                uint64_t v30 = *(void *)(v30 + 48);
              }
              while (v30);
            }
          }
          uint64_t v20 = *(void *)v20;
        }
        while (v20);
        uint64_t v32 = gLogActionList;
        if (gLogActionList)
        {
          do
          {
            int v33 = strnicmpx(*(unsigned __int8 **)(v32 + 16), -1, "output");
            if (!v33 || !strnicmpx(*(unsigned __int8 **)(v32 + 16), -1, "output2"))
            {
              for (uint64_t j = gLogCategoryList; j; uint64_t j = *(void *)(j + 48))
              {
                if ((!a1 || j == a1) && _LogCategoryMatch(*(_DWORD *)(j + 16), *(char **)(j + 24), *(char **)(v32 + 8)))
                {
                  uint64_t v35 = *(char **)(v32 + 24);
                  if (!*v35)
                  {
                    uint64_t v36 = 0;
LABEL_95:
                    if (v33) {
                      uint64_t v37 = 64;
                    }
                    else {
                      uint64_t v37 = 56;
                    }
                    uint64_t v38 = *(void *)(j + v37);
                    if ((uint64_t *)v38 != v36)
                    {
                      if (v38) {
                        --*(_DWORD *)(v38 + 8);
                      }
                      if (v36) {
                        ++*((_DWORD *)v36 + 2);
                      }
                      *(void *)(j + v37) = v36;
                    }
                    continue;
                  }
                  int v46 = 0;
                  if (!_LogOutputCreate(v35, &v46))
                  {
                    uint64_t v36 = v46;
                    goto LABEL_95;
                  }
                }
              }
            }
            uint64_t v32 = *(void *)v32;
          }
          while (v32);
          uint64_t v39 = gLogActionList;
          if (gLogActionList)
          {
            while (strnicmpx(*(unsigned __int8 **)(v39 + 16), -1, "o1l"))
            {
              if (!strnicmpx(*(unsigned __int8 **)(v39 + 16), -1, "o2l")) {
                goto LABEL_111;
              }
              if (!strnicmpx(*(unsigned __int8 **)(v39 + 16), -1, "output1Level")) {
                break;
              }
              if (!strnicmpx(*(unsigned __int8 **)(v39 + 16), -1, "output2Level"))
              {
LABEL_111:
                int v40 = 0;
                goto LABEL_113;
              }
LABEL_124:
              uint64_t v39 = *(void *)v39;
              if (!v39) {
                goto LABEL_125;
              }
            }
            int v40 = 1;
LABEL_113:
            int v41 = LUStringToLevel(*(char **)(v39 + 24));
            uint64_t v42 = gLogCategoryList;
            if (gLogCategoryList)
            {
              int v43 = v41;
              do
              {
                if ((!a1 || v42 == a1)
                  && _LogCategoryMatch(*(_DWORD *)(v42 + 16), *(char **)(v42 + 24), *(char **)(v39 + 8)))
                {
                  uint64_t v44 = v40 ? 56 : 64;
                  uint64_t v45 = *(void *)(v42 + v44);
                  if (v45) {
                    *(_DWORD *)(v45 + 24) = v43;
                  }
                }
                uint64_t v42 = *(void *)(v42 + 48);
              }
              while (v42);
            }
            goto LABEL_124;
          }
        }
      }
    }
  }
LABEL_125:
  _LogOutputDeleteUnused();
}

uint64_t _LogOutputCreate(char *a1, uint64_t **a2)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = &gLogOutputList;
  while (1)
  {
    uint64_t v4 = (uint64_t *)*v4;
    if (!v4) {
      break;
    }
    if (!strnicmpx((unsigned __int8 *)v4[2], -1, a1))
    {
      uint64_t v5 = 0;
LABEL_149:
      *a2 = v4;
      return v5;
    }
  }
  uint64_t v6 = (uint64_t *)malloc_type_calloc(1uLL, 0x68uLL, 0x10B2040D471ABDAuLL);
  if (!v6) {
    return 4294960568;
  }
  uint64_t v4 = v6;
  *((_DWORD *)v6 + 2) = 0;
  uint64_t v7 = strdup(a1);
  v4[2] = (uint64_t)v7;
  if (!v7)
  {
LABEL_152:
    uint64_t v5 = 4294960568;
    goto LABEL_142;
  }
  *((_DWORD *)v4 + 6) = -1;
  for (uint64_t i = (unsigned __int8 *)a1; *i && *i != 59; ++i)
    ;
  uint64_t v9 = i - (unsigned __int8 *)a1;
  if (i == (unsigned __int8 *)a1)
  {
    uint64_t v5 = 4294960540;
    goto LABEL_142;
  }
  if (*i) {
    int v10 = i + 1;
  }
  else {
    int v10 = i;
  }
  if (strnicmpx((unsigned __int8 *)a1, i - (unsigned __int8 *)a1, "callback"))
  {
    if (!strnicmpx((unsigned __int8 *)a1, v9, "console"))
    {
      if (!_LogOutputOSLog_Setup((uint64_t)v4, v10)) {
        goto LABEL_148;
      }
      goto LABEL_44;
    }
    if (strnicmpx((unsigned __int8 *)a1, v9, "file"))
    {
      if (!strnicmpx((unsigned __int8 *)a1, v9, "oslog"))
      {
        uint64_t v18 = _LogOutputOSLog_Setup((uint64_t)v4, v10);
        if (v18)
        {
LABEL_144:
          uint64_t v5 = v18;
          goto LABEL_142;
        }
LABEL_148:
        uint64_t v5 = 0;
        *uint64_t v4 = gLogOutputList;
        gLogOutputList = (uint64_t)v4;
        goto LABEL_149;
      }
      if (strnicmpx((unsigned __int8 *)a1, v9, "syslog"))
      {
LABEL_20:
        uint64_t v5 = 4294960591;
        goto LABEL_142;
      }
LABEL_44:
      uint64_t v18 = _LogOutputSysLog_Setup((uint64_t)v4, v10);
      if (v18) {
        goto LABEL_144;
      }
      goto LABEL_148;
    }
    v4[4] = (uint64_t)_LogOutputFile_Writer;
    *((_DWORD *)v4 + 10) = 2;
    uint64_t v19 = (FILE *)v4[7];
    if (v19)
    {
      if (v19 != (FILE *)*MEMORY[0x1E4F143C8] && v19 != (FILE *)*MEMORY[0x1E4F143D8]) {
        fclose(v19);
      }
    }
    v4[7] = 0;
    if (*v10 && strnicmpx(v10, -1, "stderr"))
    {
      if (strnicmpx(v10, -1, "stdout"))
      {
        int v21 = *v10;
        if (*v10)
        {
          while (1)
          {
            int64_t v22 = v10;
            if (!v21) {
              goto LABEL_141;
            }
            while (v21 != 61)
            {
              int v23 = *++v22;
              int v21 = v23;
              if (!v23) {
                goto LABEL_141;
              }
            }
            unsigned int v24 = v22 + 1;
            uint64_t v25 = -1;
            for (size_t j = 1; v22[j] && v22[j] != 59; ++j)
              ++v25;
            uint64_t v27 = &v22[j];
            size_t v28 = j - 1;
            uint64_t v29 = (uint64_t)(v22[j] ? v27 + 1 : &v22[j]);
            uint64_t v59 = (unsigned __int8 *)v29;
            if (strnicmpx(v10, v22 - v10, "path")) {
              break;
            }
            if (j == 1) {
              goto LABEL_156;
            }
            uint64_t v32 = (char *)malloc_type_malloc(j, 0x4BEBB36AuLL);
            if (!v32) {
              goto LABEL_152;
            }
            int v33 = v32;
            memcpy(v32, v22 + 1, j - 1);
            v33[v28] = 0;
            uint64_t v34 = (void *)v4[6];
            if (v34) {
              free(v34);
            }
            v4[6] = (uint64_t)v33;
            uint64_t v35 = strrchr(v33, 47);
            if (v35)
            {
              int64_t v36 = v35 - v33;
              if ((unint64_t)(v35 - v33) > 0x400)
              {
LABEL_156:
                uint64_t v5 = 4294960592;
                goto LABEL_142;
              }
              __memcpy_chk();
              v61[v36] = 0;
              mkpath(v61, 0x1F8u, 504);
              int v33 = (char *)v4[6];
            }
            uint64_t v37 = fopen(v33, "a");
            v4[7] = (uint64_t)v37;
            if (!v37)
            {
              uint64_t v5 = 4294960541;
              goto LABEL_142;
            }
            fseeko(v37, 0, 2);
            v4[8] = ftello((FILE *)v4[7]);
LABEL_138:
            int v10 = v59;
            int v21 = *v59;
            if (!*v59) {
              goto LABEL_139;
            }
          }
          if (!strnicmpx(v10, v22 - v10, "roll"))
          {
            if (j < 2)
            {
              uint64_t v38 = 0;
            }
            else
            {
              uint64_t v38 = 0;
              while (1)
              {
                int v39 = *v24;
                int v40 = (char)v39;
                if ((v39 - 48) > 9) {
                  break;
                }
                uint64_t v38 = (char)v39 + 10 * v38 - 48;
                if (++v24 >= v27) {
                  goto LABEL_105;
                }
              }
              uint64_t v41 = v38 << 20;
              if (v39 == 66) {
                uint64_t v42 = v24 + 1;
              }
              else {
                uint64_t v42 = v24;
              }
              BOOL v43 = v39 == 75;
              if (v39 == 75) {
                uint64_t v44 = v24 + 1;
              }
              else {
                uint64_t v44 = v42;
              }
              if (v43) {
                v38 <<= 10;
              }
              if (v40 == 77) {
                ++v24;
              }
              else {
                unsigned int v24 = v44;
              }
              if (v40 == 77) {
                uint64_t v38 = v41;
              }
            }
LABEL_105:
            if (v24 != v27 && *v24 != 35) {
              goto LABEL_20;
            }
            v4[9] = v38;
            uint64_t v45 = v24 >= v27 ? v24 : v24 + 1;
            if (v45 >= v27)
            {
              int v46 = 0;
            }
            else
            {
              int v46 = 0;
              do
              {
                int v47 = *v45;
                if ((v47 - 48) > 9) {
                  break;
                }
                int v46 = (char)v47 + 10 * v46 - 48;
                ++v45;
              }
              while (v45 < v27);
            }
            if (v45 != v27) {
              goto LABEL_20;
            }
            *((_DWORD *)v4 + 20) = v46;
            goto LABEL_138;
          }
          if (strnicmpx(v10, v22 - v10, "backup")) {
            goto LABEL_138;
          }
          if (j < 2)
          {
            LODWORD(v25) = 0;
            size_t v30 = 1;
            unint64_t v31 = v22 + 1;
          }
          else
          {
            if (*v24 != 35)
            {
              uint64_t v48 = 2;
              while (1)
              {
                size_t v30 = v48;
                if (!v25) {
                  break;
                }
                unint64_t v31 = &v22[v48];
                int v49 = v22[v48++];
                --v25;
                if (v49 == 35)
                {
                  LODWORD(v25) = v30 < j;
                  goto LABEL_89;
                }
              }
              unint64_t v31 = &v22[v48];
              goto LABEL_123;
            }
            size_t v30 = 1;
            unint64_t v31 = v22 + 1;
            LODWORD(v25) = 1;
          }
LABEL_89:
          if (v30 != j)
          {
            if (*v31 != 35) {
              goto LABEL_20;
            }
            size_t v28 = v30 - 1;
            goto LABEL_124;
          }
LABEL_123:
          size_t v30 = j;
LABEL_124:
          if (v30 == 1)
          {
            uint64_t v50 = 0;
          }
          else
          {
            uint64_t v51 = malloc_type_malloc(v30, 0x12B12331uLL);
            if (!v51) {
              goto LABEL_152;
            }
            uint64_t v50 = v51;
            memcpy(v51, v22 + 1, v28);
            v50[v28] = 0;
          }
          uint64_t v52 = (void *)v4[11];
          if (v52) {
            free(v52);
          }
          v4[11] = (uint64_t)v50;
          uint64_t v53 = &v31[v25];
          if (v53 >= v27)
          {
            int v54 = 0;
          }
          else
          {
            int v54 = 0;
            do
            {
              int v55 = *v53;
              if ((v55 - 48) > 9) {
                break;
              }
              int v54 = (char)v55 + 10 * v54 - 48;
              ++v53;
            }
            while (v53 < v27);
          }
          if (v53 != v27) {
            goto LABEL_20;
          }
          *((_DWORD *)v4 + 24) = v54;
          goto LABEL_138;
        }
LABEL_139:
        uint64_t v56 = (FILE *)v4[7];
        if (!v56) {
          goto LABEL_20;
        }
LABEL_147:
        setvbuf(v56, 0, 2, 0);
        goto LABEL_148;
      }
      uint64_t v57 = (FILE **)MEMORY[0x1E4F143D8];
    }
    else
    {
      uint64_t v57 = (FILE **)MEMORY[0x1E4F143C8];
    }
    uint64_t v56 = *v57;
    v4[7] = (uint64_t)*v57;
    goto LABEL_147;
  }
  uint64_t v60 = 0;
  v4[6] = 0;
  v4[7] = 0;
  int v11 = *v10;
  if (!*v10)
  {
LABEL_42:
    v4[4] = (uint64_t)_LogOutputCallBack_Writer;
    *((_DWORD *)v4 + 10) = 11;
    goto LABEL_148;
  }
  while (1)
  {
    uint64_t v12 = v10;
    if (!v11)
    {
LABEL_141:
      uint64_t v5 = 4294960554;
      goto LABEL_142;
    }
    while (v11 != 61)
    {
      int v13 = *++v12;
      int v11 = v13;
      if (!v13) {
        goto LABEL_141;
      }
    }
    uint64_t v14 = v12 - v10;
    for (k = v12 + 1; *k && *k != 59; ++k)
      ;
    unint64_t v16 = k - (v12 + 1);
    long long v17 = *k ? k + 1 : k;
    if (!strnicmpx(v10, v14, "func")) {
      break;
    }
    if (!strnicmpx(v10, v14, "arg"))
    {
      if (v16 > 0x3F) {
        goto LABEL_155;
      }
      __memcpy_chk();
      v61[v16] = 0;
      if (sscanf(v61, "%p", v4 + 7) != 1) {
        goto LABEL_141;
      }
    }
LABEL_41:
    int v11 = *v17;
    int v10 = v17;
    if (!*v17) {
      goto LABEL_42;
    }
  }
  if (v16 <= 0x3F)
  {
    __memcpy_chk();
    v61[v16] = 0;
    if (sscanf(v61, "%p", &v60) != 1) {
      goto LABEL_141;
    }
    v4[6] = v60;
    goto LABEL_41;
  }
LABEL_155:
  uint64_t v5 = 4294960553;
LABEL_142:
  _LogOutputDelete(v4);
  return v5;
}

BOOL _LogCategoryMatch(__int16 a1, char *a2, char *a3)
{
  if ((a1 & 0x100) != 0) {
    return strcasecmp(a2, a3) == 0;
  }
  else {
    return RegexMatch((unsigned __int8 *)a3, a2) != 0;
  }
}

uint64_t RegexMatch(unsigned __int8 *a1, unsigned char *a2)
{
  uint64_t v2 = a2;
  if (*a1 == 94)
  {
    uint64_t v4 = a1 + 1;
    return RegexMatchHere(v4, a2);
  }
  else
  {
    while (!RegexMatchHere(a1, v2))
    {
      if (!*v2++) {
        return 0;
      }
    }
    return 1;
  }
}

uint64_t RegexMatchHere(unsigned __int8 *a1, unsigned char *a2)
{
  __darwin_ct_rune_t v2 = *a1;
  if (*a1)
  {
    uint64_t v4 = a1;
    while (1)
    {
      __darwin_ct_rune_t v6 = *++v4;
      __darwin_ct_rune_t v5 = v6;
      if (v6 == 42) {
        break;
      }
      __darwin_ct_rune_t v7 = *a2;
      if (v2 == 36 && !v5) {
        return v7 == 0;
      }
      if (!*a2) {
        return 0;
      }
      if (v2 != 46)
      {
        __darwin_ct_rune_t v8 = __tolower(v2);
        if (v8 != __tolower(v7)) {
          return 0;
        }
        __darwin_ct_rune_t v5 = *v4;
      }
      ++a2;
      __darwin_ct_rune_t v2 = v5;
      a1 = v4;
      if (!v5) {
        return 1;
      }
    }
    int v10 = a1 + 2;
    while (!RegexMatchHere(v10, a2))
    {
      uint64_t result = *a2;
      if (!*a2) {
        return result;
      }
      ++a2;
      __darwin_ct_rune_t v11 = __tolower(result);
      __darwin_ct_rune_t v12 = __tolower(v2);
      if (v2 != 46 && v11 != v12) {
        return 0;
      }
    }
  }
  return 1;
}

uint64_t LUStringToLevel(char *__s1)
{
  uint64_t v2 = MEMORY[0x1E4F14390];
  int v3 = __s1;
  do
  {
    uint64_t v4 = v3;
    int v5 = *v3;
    if (*v3 < 0) {
      int v6 = __maskrune(*v3, 0x100uLL);
    }
    else {
      int v6 = *(_DWORD *)(v2 + 4 * *v3 + 60) & 0x100;
    }
    ++v3;
  }
  while (v6);
  size_t v7 = v4 - __s1;
  if (v4 == __s1)
  {
    int v10 = *__s1;
    if ((v10 - 48) > 9)
    {
      unsigned int v11 = 0;
    }
    else
    {
      unsigned int v11 = 0;
      __darwin_ct_rune_t v12 = __s1 + 1;
      do
      {
        unsigned int v11 = 10 * v11 + (char)v10 - 48;
        int v13 = *v12++;
        int v10 = v13;
      }
      while ((v13 - 48) < 0xA);
    }
    if (v10) {
      return 0xFFFFFFFFLL;
    }
    else {
      return v11;
    }
  }
  else
  {
    uint64_t v8 = 0;
    for (uint64_t i = (const char **)&off_1E55BF558; strncmp(__s1, *i, v7); i += 2)
    {
      if (++v8 == 18) {
        return 0xFFFFFFFFLL;
      }
    }
    uint64_t result = kLogLevelToStringTable[4 * v8];
    if (v5 && result != -1)
    {
      int v15 = *v3;
      if ((v15 - 48) > 9)
      {
        int v16 = 0;
      }
      else
      {
        int v16 = 0;
        uint64_t v17 = 1;
        do
        {
          int v16 = 10 * v16 + (char)v15 - 48;
          int v15 = v3[v17++];
        }
        while ((v15 - 48) < 0xA);
      }
      if (v15) {
        return 0xFFFFFFFFLL;
      }
      if (v5 != 45)
      {
        if (v5 == 43) {
          return (v16 + result);
        }
        return 0xFFFFFFFFLL;
      }
      return (result - v16);
    }
  }
  return result;
}

uint64_t _LogOutputOSLog_Setup(uint64_t a1, unsigned __int8 *a2)
{
  *(void *)(a1 + 32) = _LogOutputOSLog_Writer;
  *(_DWORD *)(a1 + 40) = 14;
  uint64_t v4 = *(void **)(a1 + 48);
  if (v4)
  {
    free(v4);
    *(void *)(a1 + 48) = 0;
  }
  int v5 = *(void **)(a1 + 56);
  if (v5)
  {

    *(void *)(a1 + 56) = 0;
  }
  *(_DWORD *)(a1 + 64) = 0;
  int v6 = *(void **)(a1 + 72);
  if (v6)
  {
    free(v6);
    *(void *)(a1 + 72) = 0;
  }
  int v7 = *a2;
  if (!*a2) {
    return 0;
  }
  do
  {
    uint64_t v8 = a2;
    if (!v7) {
      return 4294960554;
    }
    while (v7 != 61)
    {
      int v9 = *++v8;
      int v7 = v9;
      if (!v9) {
        return 4294960554;
      }
    }
    uint64_t v10 = v8 - a2;
    unsigned int v11 = v8 + 1;
    for (uint64_t i = v8 + 1; *i && *i != 59; ++i)
      ;
    size_t v13 = i - v11;
    if (*i) {
      uint64_t v14 = i + 1;
    }
    else {
      uint64_t v14 = i;
    }
    if (strnicmpx(a2, v10, "category"))
    {
      if (strnicmpx(a2, v10, "public"))
      {
        if (strnicmpx(a2, v10, "sensitive"))
        {
          if (strnicmpx(a2, v10, "subsystem"))
          {
            if (strnicmpx(a2, v10, "type")) {
              goto LABEL_57;
            }
            if (strnicmpx(v11, v13, "debug"))
            {
              if (strnicmpx(v11, v13, "default"))
              {
                if (strnicmpx(v11, v13, "error"))
                {
                  if (strnicmpx(v11, v13, "fault"))
                  {
                    if (strnicmpx(v11, v13, "info")) {
                      goto LABEL_57;
                    }
                    char v15 = 1;
                  }
                  else
                  {
                    char v15 = 17;
                  }
                }
                else
                {
                  char v15 = 16;
                }
              }
              else
              {
                char v15 = 0;
              }
            }
            else
            {
              char v15 = 2;
            }
            *(unsigned char *)(a1 + 64) = 1;
            *(unsigned char *)(a1 + 65) = v15;
          }
          else
          {
            int v21 = malloc_type_malloc(v13 + 1, 0x85B137EDuLL);
            if (!v21) {
              return 4294960568;
            }
            int64_t v22 = v21;
            memcpy(v21, v11, v13);
            v22[v13] = 0;
            int v23 = *(void **)(a1 + 72);
            if (v23) {
              free(v23);
            }
            *(void *)(a1 + 72) = v22;
          }
        }
        else
        {
          BOOL v20 = !strnicmpx(v11, v13, "true")
             || !strnicmpx(v11, v13, "yes")
             || !strnicmpx(v11, v13, "y")
             || !strnicmpx(v11, v13, "on")
             || strnicmpx(v11, v13, "1") == 0;
          *(unsigned char *)(a1 + 67) = v20;
        }
      }
      else
      {
        BOOL v19 = !strnicmpx(v11, v13, "true")
           || !strnicmpx(v11, v13, "yes")
           || !strnicmpx(v11, v13, "y")
           || !strnicmpx(v11, v13, "on")
           || strnicmpx(v11, v13, "1") == 0;
        *(unsigned char *)(a1 + 66) = v19;
      }
    }
    else
    {
      int v16 = malloc_type_malloc(v13 + 1, 0xDEC0AEE0uLL);
      if (!v16) {
        return 4294960568;
      }
      uint64_t v17 = v16;
      memcpy(v16, v11, v13);
      v17[v13] = 0;
      uint64_t v18 = *(void **)(a1 + 48);
      if (v18) {
        free(v18);
      }
      *(void *)(a1 + 48) = v17;
    }
LABEL_57:
    int v7 = *v14;
    a2 = v14;
  }
  while (*v14);
  unsigned int v24 = *(const char **)(a1 + 72);
  if (v24)
  {
    uint64_t v25 = *(const char **)(a1 + 48);
    if (v25)
    {
      os_log_t v26 = os_log_create(v24, v25);
      *(void *)(a1 + 56) = v26;
      if (!v26) {
        return 4294960568;
      }
    }
  }
  return 0;
}

void CUDispatchTimerSetEx(NSObject *a1, int a2, double a3, double a4, double a5)
{
  unint64_t v8 = (unint64_t)(a3 * 1000000000.0);
  dispatch_time_t v9 = dispatch_time((unint64_t)(a2 != 0) << 63, v8);
  if (a5 <= -10.0)
  {
    uint64_t v10 = v8 / 0xA;
  }
  else if (a5 <= -4.0)
  {
    uint64_t v10 = v8 >> 2;
  }
  else
  {
    uint64_t v10 = (unint64_t)(a5 * 1000000000.0);
  }
  if (a4 < 0.0) {
    uint64_t v11 = -1;
  }
  else {
    uint64_t v11 = (unint64_t)(a4 * 1000000000.0);
  }
  dispatch_source_set_timer(a1, v9, v11, v10);
}

uint64_t IsAppleTV()
{
  if (IsAppleTV_sOnce != -1) {
    dispatch_once(&IsAppleTV_sOnce, &__block_literal_global_119);
  }
  return IsAppleTV_sIsAppleTV;
}

CFNumberRef _OPACKInitializeOnce()
{
  gCFArrayType_12219 = CFArrayGetTypeID();
  gCFBooleanType_12220 = CFBooleanGetTypeID();
  gCFDataType_12221 = CFDataGetTypeID();
  gCFDateType_12222 = CFDateGetTypeID();
  gCFDictionaryType_12223 = CFDictionaryGetTypeID();
  gCFNumberType_12218 = CFNumberGetTypeID();
  gCFStringType_12224 = CFStringGetTypeID();
  uint64_t v0 = 0;
  gCFUUIDType = CFUUIDGetTypeID();
  do
  {
    char valuePtr = v0 - 1;
    CFNumberRef result = CFNumberCreate(0, kCFNumberSInt8Type, &valuePtr);
    gCFNumbers[v0] = result;
    if (!result) {
      FatalErrorF((uint64_t)"Create small number %d failed", v2, v3, v4, v5, v6, v7, v8, valuePtr);
    }
    ++v0;
  }
  while (v0 != 41);
  return result;
}

uint64_t CUXPCDecodeNSArrayOfNSString(void *a1, const char *a2, id *a3, void *a4)
{
  id v7 = a1;
  uint64_t v8 = xpc_dictionary_get_value(v7, a2);
  dispatch_time_t v9 = (void *)v8;
  if (!v8) {
    goto LABEL_9;
  }
  if (MEMORY[0x192FAB6C0](v8) == MEMORY[0x1E4F14568])
  {
    uint64_t v20 = 0;
    int v21 = &v20;
    uint64_t v22 = 0x3032000000;
    int v23 = __Block_byref_object_copy__10393;
    unsigned int v24 = __Block_byref_object_dispose__10394;
    id v25 = 0;
    id v16 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 3221225472;
    applier[2] = __CUXPCDecodeNSArrayOfNSString_block_invoke;
    applier[3] = &unk_1E55BF1E8;
    applier[5] = &v20;
    applier[6] = a2;
    applier[4] = v16;
    xpc_array_apply(v9, applier);
    uint64_t v17 = (void *)v21[5];
    if (v17)
    {
      if (a4) {
        *a4 = v17;
      }
    }
    else
    {
      objc_storeStrong(a3, v16);
    }

    _Block_object_dispose(&v20, 8);
    if (v17) {
      goto LABEL_8;
    }
LABEL_9:
    uint64_t v15 = 1;
    goto LABEL_10;
  }
  if (!a4)
  {
LABEL_8:
    uint64_t v15 = 0;
    goto LABEL_10;
  }
  NSErrorF_safe((void *)*MEMORY[0x1E4F28760], 4294960540, (uint64_t)"XPC non-array type: '%s'", v10, v11, v12, v13, v14, (uint64_t)a2);
  uint64_t v15 = 0;
  *a4 = (id)objc_claimAutoreleasedReturnValue();
LABEL_10:

  return v15;
}

void sub_18E308F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

const void *CFPrefs_CopyTypedValue(const __CFString *a1, CFStringRef key, uint64_t a3, int *a4)
{
  if (a1) {
    CFStringRef v7 = a1;
  }
  else {
    CFStringRef v7 = (const __CFString *)*MEMORY[0x1E4F1D3D8];
  }
  CFPropertyListRef v8 = CFPreferencesCopyAppValue(key, v7);
  dispatch_time_t v9 = v8;
  if (!v8)
  {
    int v10 = -6727;
    if (!a4) {
      return v9;
    }
    goto LABEL_10;
  }
  if (!a3 || CFGetTypeID(v8) == a3)
  {
    int v10 = 0;
    if (!a4) {
      return v9;
    }
    goto LABEL_10;
  }
  CFRelease(v9);
  dispatch_time_t v9 = 0;
  int v10 = -6756;
  if (a4) {
LABEL_10:
  }
    *a4 = v10;
  return v9;
}

CFStringRef CFStringCreateF(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return CFStringCreateV(a1, a2, (uint64_t)&a9);
}

CFStringRef CFStringCreateV(int *a1, uint64_t a2, uint64_t a3)
{
  cStr = 0;
  if ((VASPrintF((void **)&cStr, a2, a3) & 0x80000000) != 0)
  {
    CFStringRef v5 = 0;
    int v6 = -6700;
    if (!a1) {
      return v5;
    }
    goto LABEL_6;
  }
  uint64_t v4 = cStr;
  CFStringRef v5 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  free(v4);
  if (v5) {
    int v6 = 0;
  }
  else {
    int v6 = -6728;
  }
  if (a1) {
LABEL_6:
  }
    *a1 = v6;
  return v5;
}

CFArrayRef CFDictionaryCopyKeys(const __CFDictionary *a1, int *a2)
{
  uint64_t Count = CFDictionaryGetCount(a1);
  CFIndex v5 = Count;
  if (Count <= 0)
  {
    CFArrayRef v8 = CFArrayCreate(0, 0, Count, MEMORY[0x1E4F1D510]);
  }
  else
  {
    int v6 = (const void **)malloc_type_malloc(8 * Count, 0xC0040B8AA526DuLL);
    if (!v6)
    {
      CFArrayRef v8 = 0;
      int v9 = -6728;
      if (!a2) {
        return v8;
      }
      goto LABEL_9;
    }
    CFStringRef v7 = v6;
    CFDictionaryGetKeysAndValues(a1, v6, 0);
    CFArrayRef v8 = CFArrayCreate(0, v7, v5, MEMORY[0x1E4F1D510]);
    free(v7);
  }
  if (v8) {
    int v9 = 0;
  }
  else {
    int v9 = -6728;
  }
  if (a2) {
LABEL_9:
  }
    *a2 = v9;
  return v8;
}

uint64_t CFDictionarySetCString(__CFDictionary *a1, const void *a2, const char *a3, CFIndex numBytes)
{
  if (a3) {
    int v6 = a3;
  }
  else {
    int v6 = "";
  }
  if (numBytes == -1) {
    CFStringRef v7 = CFStringCreateWithCString(0, v6, 0x8000100u);
  }
  else {
    CFStringRef v7 = CFStringCreateWithBytes(0, (const UInt8 *)v6, numBytes, 0x8000100u, 0);
  }
  CFStringRef v8 = v7;
  if (!v7) {
    return 4294960596;
  }
  CFDictionarySetValue(a1, a2, v7);
  CFRelease(v8);
  return 0;
}

_DWORD *LogCategoryCreateEx(const char *a1, const char *a2, int a3, int a4, const char *a5, int *a6)
{
  uint64_t v12 = malloc_type_calloc(1uLL, 0x88uLL, 0x107004000997796uLL);
  if (!v12)
  {
LABEL_14:
    int v20 = -6728;
    goto LABEL_17;
  }
  if (a1 && (uint64_t v13 = strdup(a1), (*((void *)v12 + 14) = v13) == 0)
    || (uint64_t v14 = strdup(a2), (*((void *)v12 + 15) = v14) == 0))
  {
LABEL_7:
    uint64_t v17 = (void *)*((void *)v12 + 14);
    if (v17) {
      free(v17);
    }
    uint64_t v18 = (void *)*((void *)v12 + 15);
    if (v18) {
      free(v18);
    }
    BOOL v19 = (void *)*((void *)v12 + 16);
    if (v19) {
      free(v19);
    }
    free(v12);
    uint64_t v12 = 0;
    goto LABEL_14;
  }
  uint64_t v15 = v14;
  if (a5)
  {
    id v16 = strdup(a5);
    *((void *)v12 + 16) = v16;
    if (!v16) {
      goto LABEL_7;
    }
  }
  else
  {
    id v16 = (char *)*((void *)v12 + 16);
  }
  _DWORD *v12 = -1;
  v12[1] = a3;
  *((void *)v12 + 1) = v16;
  v12[4] = a4 | 0x70000;
  *((void *)v12 + 3) = v15;
  *((void *)v12 + 4) = v15;
  int v21 = strlen(v15);
  int v20 = 0;
  v12[10] = v21;
  *((void *)v12 + 12) = *((void *)v12 + 14);
LABEL_17:
  if (a6) {
    *a6 = v20;
  }
  return v12;
}

uint64_t NSErrorToOSStatusEx(void *a1, char *a2)
{
  id v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    uint64_t v15 = 0;
    goto LABEL_23;
  }
  CFIndex v5 = [v3 domain];
  if ([v5 isEqualToString:*MEMORY[0x1E4F28760]]) {
    goto LABEL_21;
  }
  int v6 = [v4 domain];
  if ([v6 isEqualToString:*MEMORY[0x1E4F28798]])
  {
LABEL_20:

LABEL_21:
LABEL_22:
    uint64_t v15 = [v4 code];
LABEL_23:
    char v16 = 1;
    goto LABEL_24;
  }
  CFStringRef v7 = [v4 domain];
  if ([v7 isEqualToString:*MEMORY[0x1E4F285A8]])
  {
LABEL_19:

    goto LABEL_20;
  }
  CFStringRef v8 = [v4 domain];
  if ([v8 isEqualToString:@"AKAnisetteError"])
  {
LABEL_18:

    goto LABEL_19;
  }
  int v9 = [v4 domain];
  if ([v9 isEqualToString:@"AKAuthenticationError"])
  {
LABEL_17:

    goto LABEL_18;
  }
  int v10 = [v4 domain];
  if ([v10 isEqualToString:@"AVFoundationErrorDomain"])
  {
LABEL_16:

    goto LABEL_17;
  }
  uint64_t v11 = [v4 domain];
  if ([v11 isEqualToString:@"com.apple.accounts.keychain"])
  {
LABEL_15:

    goto LABEL_16;
  }
  uint64_t v12 = [v4 domain];
  if ([v12 isEqualToString:@"com.apple.wifi.apple80211API.error"])
  {
LABEL_14:

    goto LABEL_15;
  }
  uint64_t v86 = v12;
  uint64_t v13 = [v4 domain];
  if ([v13 isEqualToString:@"CDPStateError"])
  {
LABEL_13:

    uint64_t v12 = v86;
    goto LABEL_14;
  }
  uint64_t v85 = v13;
  uint64_t v14 = [v4 domain];
  if ([v14 isEqualToString:@"NSCocoaErrorDomain"])
  {

    uint64_t v13 = v85;
    goto LABEL_13;
  }
  uint64_t v84 = v14;
  uint64_t v83 = [v4 domain];
  if ([v83 isEqualToString:@"NSURLErrorDomain"])
  {
    char v18 = 1;
  }
  else
  {
    uint64_t v82 = [v4 domain];
    if ([v82 isEqualToString:@"RPErrorDomain"])
    {
      char v18 = 1;
    }
    else
    {
      int v81 = [v4 domain];
      if ([v81 isEqualToString:@"SFAppleIDErrorDomain"])
      {
        char v18 = 1;
      }
      else
      {
        int v80 = [v4 domain];
        if ([v80 isEqualToString:@"UserErrorDomain"])
        {
          char v18 = 1;
        }
        else
        {
          uint64_t v79 = [v4 domain];
          if ([v79 isEqualToString:@"WCErrorDomain"])
          {
            char v18 = 1;
          }
          else
          {
            int64_t v78 = [v4 domain];
            char v18 = [v78 isEqualToString:@"WCInternalErrorDomain"];
          }
        }
      }
    }
  }
  if (v18) {
    goto LABEL_22;
  }
  BOOL v19 = [v4 domain];
  int v20 = [v19 isEqualToString:@"com.apple.accounts"];

  if (v20)
  {
    uint64_t v15 = [v4 code] + 312200;
    goto LABEL_23;
  }
  int v21 = [v4 domain];
  int v22 = [v21 isEqualToString:@"com.apple.AppleIDAuthSupport"];

  if (v22)
  {
    uint64_t v15 = [v4 code] + 312250;
    goto LABEL_23;
  }
  int v23 = [v4 domain];
  if ([v23 isEqualToString:@"AppleKeyStore"])
  {

LABEL_51:
    uint64_t v15 = 300940 - [v4 code];
    goto LABEL_23;
  }
  unsigned int v24 = [v4 domain];
  int v25 = [v24 isEqualToString:@"AKS"];

  if (v25) {
    goto LABEL_51;
  }
  os_log_t v26 = [v4 domain];
  int v27 = [v26 isEqualToString:@"CBErrorDomain"];

  if (v27)
  {
    uint64_t v28 = [v4 code];
    if (v28 >= 0x49444) {
      uint64_t v15 = v28;
    }
    else {
      uint64_t v15 = [v4 code] + 300100;
    }
    goto LABEL_23;
  }
  uint64_t v29 = [v4 domain];
  int v30 = [v29 isEqualToString:@"CBATTErrorDomain"];

  if (v30)
  {
    int v31 = [v4 code];
    if (v31 <= 0x11)
    {
      uint64_t v15 = (v31 + 300120);
      goto LABEL_23;
    }
    unsigned int v35 = v31 + 311000;
    BOOL v36 = v31 < 300100;
LABEL_70:
    if (v36) {
      uint64_t v15 = v35;
    }
    else {
      uint64_t v15 = v31;
    }
    goto LABEL_23;
  }
  uint64_t v32 = [v4 domain];
  int v33 = [v32 isEqualToString:@"CBInternalErrorDomain"];

  if (v33)
  {
    uint64_t v34 = [v4 code];
    if (v34 == 12)
    {
      uint64_t v15 = 300112;
    }
    else
    {
      uint64_t v15 = v34;
      if (v34 == 13)
      {
        uint64_t v15 = 300113;
      }
      else if ((int)v34 < 300100)
      {
        uint64_t v15 = [v4 code] + 312800;
      }
    }
    goto LABEL_23;
  }
  uint64_t v37 = [v4 domain];
  int v38 = [v37 isEqualToString:@"kCFErrorDomainCFNetwork"];

  if (v38)
  {
    uint64_t v39 = [v4 code];
    uint64_t v15 = v39;
    char v16 = 1;
    if ((int)v39 > 199)
    {
      switch((int)v39)
      {
        case 300:
          uint64_t v15 = 300155;
          goto LABEL_23;
        case 301:
          uint64_t v15 = 300156;
          goto LABEL_23;
        case 302:
          int v40 = 57;
          goto LABEL_116;
        case 303:
          int v40 = 58;
          goto LABEL_116;
        case 304:
          int v40 = 59;
          goto LABEL_116;
        case 305:
          uint64_t v15 = 300160;
          goto LABEL_23;
        case 306:
          uint64_t v15 = 300161;
          goto LABEL_23;
        case 307:
          uint64_t v15 = 300162;
          goto LABEL_23;
        case 308:
          uint64_t v15 = 300163;
          goto LABEL_23;
        case 309:
          uint64_t v15 = 300164;
          goto LABEL_23;
        case 310:
          uint64_t v15 = 300165;
          goto LABEL_23;
        case 311:
          uint64_t v15 = 300166;
          goto LABEL_23;
        default:
          if (v39 != 200) {
            goto LABEL_24;
          }
          uint64_t v15 = 300154;
          break;
      }
    }
    else
    {
      switch((int)v39)
      {
        case 'd':
          int v40 = 43;
          break;
        case 'e':
          uint64_t v15 = 300144;
          goto LABEL_23;
        case 'f':
        case 'g':
        case 'h':
        case 'i':
        case 'j':
        case 'k':
        case 'l':
        case 'm':
        case 'r':
        case 's':
        case 't':
        case 'u':
        case 'v':
        case 'w':
          goto LABEL_24;
        case 'n':
          uint64_t v15 = 300145;
          goto LABEL_23;
        case 'o':
          uint64_t v15 = 300146;
          goto LABEL_23;
        case 'p':
          uint64_t v15 = 300147;
          goto LABEL_23;
        case 'q':
          uint64_t v15 = 300148;
          goto LABEL_23;
        case 'x':
          int v40 = 49;
          break;
        case 'y':
          int v40 = 50;
          break;
        case 'z':
          int v40 = 51;
          break;
        case '{':
          uint64_t v15 = 300152;
          goto LABEL_23;
        case '|':
          uint64_t v15 = 300153;
          goto LABEL_23;
        default:
          if (v39 == 1)
          {
            int v40 = 41;
          }
          else
          {
            if (v39 != 2) {
              goto LABEL_24;
            }
            int v40 = 42;
          }
          break;
      }
LABEL_116:
      uint64_t v15 = v40 | 0x49444u;
    }
    goto LABEL_23;
  }
  uint64_t v41 = [v4 domain];
  int v42 = [v41 isEqualToString:@"CSIdentityErrorDomain"];

  if (v42)
  {
    int v31 = [v4 code];
    unsigned int v35 = v31 + 312115;
    BOOL v36 = v31 < 0;
    goto LABEL_70;
  }
  BOOL v43 = [v4 domain];
  int v44 = [v43 isEqualToString:@"HMErrorDomain"];

  if (v44)
  {
    uint64_t v15 = [v4 code] + 300200;
    goto LABEL_23;
  }
  uint64_t v45 = [v4 domain];
  int v46 = [v45 isEqualToString:@"HMFErrorDomain"];

  if (v46)
  {
    uint64_t v15 = [v4 code] + 312600;
    goto LABEL_23;
  }
  int v47 = [v4 domain];
  int v48 = [v47 isEqualToString:@"com.apple.identityservices.error"];

  if (v48)
  {
    int v49 = [v4 code];
    if (v49 == 200) {
      uint64_t v15 = 300800;
    }
    else {
      uint64_t v15 = (v49 + 300400);
    }
    goto LABEL_23;
  }
  uint64_t v50 = [v4 domain];
  int v51 = [v50 isEqualToString:@"IDSLocalPairingErrorDomain"];

  if (v51
    || ([v4 domain],
        uint64_t v52 = objc_claimAutoreleasedReturnValue(),
        int v53 = [v52 isEqualToString:@"IDSAccountRegistrationErrorDomain"],
        v52,
        v53))
  {
    uint64_t v15 = [v4 code] + 300500;
    goto LABEL_23;
  }
  int v54 = [v4 domain];
  int v55 = [v54 isEqualToString:@"com.apple.ids.idssenderrordomain"];

  if (v55)
  {
    uint64_t v15 = [v4 code] + 300700;
    goto LABEL_23;
  }
  uint64_t v56 = [v4 domain];
  int v57 = [v56 isEqualToString:@"com.apple.ids.idssessionerrorDomain"];

  if (v57)
  {
    unsigned int v58 = [v4 code];
    if (v58 >= 3) {
      uint64_t v15 = v58;
    }
    else {
      uint64_t v15 = v58 + 300801;
    }
    goto LABEL_23;
  }
  uint64_t v59 = [v4 domain];
  int v60 = [v59 isEqualToString:@"signal"];

  if (v60)
  {
    uint64_t v15 = [v4 code] + 312700;
    goto LABEL_23;
  }
  int v61 = [v4 domain];
  if ([v61 isEqualToString:@"kAFAssistantErrorDomain"]) {
    goto LABEL_130;
  }
  uint64_t v62 = [v4 domain];
  if ([v62 isEqualToString:@"SiriAceErrorDomain"])
  {
LABEL_129:

LABEL_130:
LABEL_131:
    uint64_t v15 = [v4 code] + 320000;
    goto LABEL_23;
  }
  BOOL v63 = [v4 domain];
  if ([v63 isEqualToString:@"SiriSpeechErrorDomain"])
  {

    goto LABEL_129;
  }
  int v64 = [v4 domain];
  char v65 = [v64 isEqualToString:@"SiriStructuredDictationErrorDomain"];

  if (v65) {
    goto LABEL_131;
  }
  uint64_t v66 = [v4 domain];
  int v67 = [v66 isEqualToString:@"SBSRemoteAlertHandleInvalidationErrorDomain"];

  if (v67)
  {
    uint64_t v15 = [v4 code] + 300180;
    goto LABEL_23;
  }
  uint64_t v68 = [v4 domain];
  int v69 = [v68 isEqualToString:@"SSErrorDomain"];

  if (v69)
  {
    uint64_t v15 = [v4 code] + 312300;
    goto LABEL_23;
  }
  uint64_t v70 = [v4 domain];
  if ([v70 isEqualToString:@"TRNearbyDeviceErrorDomain"])
  {
  }
  else
  {
    uint64_t v71 = [v4 domain];
    int v72 = [v71 isEqualToString:@"TouchRemote"];

    if (!v72)
    {
      uint64_t v74 = [v4 domain];
      int v75 = [v74 isEqualToString:@"WPErrorDomain"];

      unsigned int v76 = [v4 code];
      if (v75)
      {
        uint64_t v15 = v76 + 300900;
        goto LABEL_23;
      }
      char v16 = 0;
      if (v76) {
        uint64_t v15 = v76;
      }
      else {
        uint64_t v15 = 4294960596;
      }
      goto LABEL_24;
    }
  }
  uint64_t v73 = [v4 code];
  if (v73 <= -9105)
  {
    if (v73 <= -9402)
    {
      if (v73 > -10002)
      {
        switch(v73)
        {
          case -10001:
            uint64_t v15 = 300985;
            goto LABEL_23;
          case -10000:
            uint64_t v15 = 300984;
            goto LABEL_23;
          case -9500:
            uint64_t v15 = 300983;
            goto LABEL_23;
        }
      }
      else
      {
        switch(v73)
        {
          case -11001:
            uint64_t v15 = 300988;
            goto LABEL_23;
          case -11000:
            uint64_t v15 = 300987;
            goto LABEL_23;
          case -10002:
            uint64_t v15 = 300986;
            goto LABEL_23;
        }
      }
    }
    else if (v73 <= -9301)
    {
      switch(v73)
      {
        case -9401:
          uint64_t v15 = 300982;
          goto LABEL_23;
        case -9400:
          uint64_t v15 = 300981;
          goto LABEL_23;
        case -9301:
          uint64_t v15 = 300980;
          goto LABEL_23;
      }
    }
    else if (v73 > -9202)
    {
      if (v73 == -9201)
      {
        uint64_t v15 = 300977;
        goto LABEL_23;
      }
      if (v73 == -9200)
      {
        uint64_t v15 = 300976;
        goto LABEL_23;
      }
    }
    else
    {
      if (v73 == -9300)
      {
        uint64_t v15 = 300979;
        goto LABEL_23;
      }
      if (v73 == -9202)
      {
        uint64_t v15 = 300978;
        goto LABEL_23;
      }
    }
LABEL_195:
    unsigned int v77 = [v4 code];
    if (v77) {
      uint64_t v15 = v77;
    }
    else {
      uint64_t v15 = 300960;
    }
    goto LABEL_23;
  }
  if (v73 <= -8008)
  {
    switch(v73)
    {
      case -9104:
        uint64_t v15 = 300975;
        break;
      case -9103:
        uint64_t v15 = 300974;
        break;
      case -9102:
        uint64_t v15 = 300973;
        break;
      case -9101:
        uint64_t v15 = 300972;
        break;
      case -9100:
        uint64_t v15 = 300971;
        break;
      default:
        if (v73 == -9001)
        {
          uint64_t v15 = 300970;
        }
        else
        {
          if (v73 != -9000) {
            goto LABEL_195;
          }
          uint64_t v15 = 300969;
        }
        break;
    }
    goto LABEL_23;
  }
  uint64_t v15 = 300961;
  char v16 = 1;
  switch(v73)
  {
    case -8007:
      uint64_t v15 = 300968;
      break;
    case -8006:
      uint64_t v15 = 300967;
      break;
    case -8005:
      uint64_t v15 = 300966;
      break;
    case -8004:
      uint64_t v15 = 300965;
      break;
    case -8003:
      uint64_t v15 = 300964;
      break;
    case -8002:
      uint64_t v15 = 300963;
      break;
    case -8001:
      uint64_t v15 = 300962;
      break;
    case -8000:
      break;
    default:
      goto LABEL_195;
  }
LABEL_24:
  if (a2) {
    *a2 = v16;
  }

  return v15;
}

uint64_t LogCategory_Remove(void *a1)
{
  LogUtils_EnsureInitialized();
  pthread_mutex_lock(&gLogUtilsLock);
  uint64_t v2 = gLogCategoryList;
  if (gLogCategoryList)
  {
    if ((void *)gLogCategoryList == a1)
    {
      uint64_t v4 = &gLogCategoryList;
LABEL_7:
      uint64_t v5 = *((void *)a1 + 7);
      if (v5) {
        --*(_DWORD *)(v5 + 8);
      }
      uint64_t v6 = *((void *)a1 + 8);
      if (v6) {
        --*(_DWORD *)(v6 + 8);
      }
      *uint64_t v4 = *((void *)a1 + 6);
      *(_DWORD *)a1 = -1;
      *((void *)a1 + 7) = 0;
      *((void *)a1 + 8) = 0;
      _LogOutputDeleteUnused();
    }
    else
    {
      while (1)
      {
        uint64_t v3 = v2;
        uint64_t v2 = *(void *)(v2 + 48);
        if (!v2) {
          break;
        }
        if ((void *)v2 == a1)
        {
          uint64_t v4 = (uint64_t *)(v3 + 48);
          goto LABEL_7;
        }
      }
    }
  }
  int v7 = *((_DWORD *)a1 + 4);
  if ((v7 & 0x20000) != 0)
  {
    CFStringRef v8 = (id *)*((void *)a1 + 13);
    if (v8)
    {
      if (*v8)
      {

        CFStringRef v8 = (id *)*((void *)a1 + 13);
        *CFStringRef v8 = 0;
      }
      if (v8[1])
      {
        free(v8[1]);
        CFStringRef v8 = (id *)*((void *)a1 + 13);
        v8[1] = 0;
      }
      free(v8);
      *((void *)a1 + 13) = 0;
      int v7 = *((_DWORD *)a1 + 4);
    }
  }
  if ((v7 & 0x10000) != 0)
  {
    int v9 = (void *)*((void *)a1 + 14);
    if (v9) {
      free(v9);
    }
    int v10 = (void *)*((void *)a1 + 15);
    if (v10) {
      free(v10);
    }
    uint64_t v11 = (void *)*((void *)a1 + 16);
    if (v11) {
      free(v11);
    }
    free(a1);
  }
  return pthread_mutex_unlock(&gLogUtilsLock);
}

__n128 AES_CTR_Init(CCCryptorRef *cryptorRef, void *key, __n128 *a3)
{
  *cryptorRef = 0;
  if (!CCCryptorCreate(0, 0, 2u, key, 0x10uLL, 0, cryptorRef))
  {
    __n128 result = *a3;
    *(__n128 *)(cryptorRef + 1) = *a3;
    cryptorRef[5] = 0;
  }
  return result;
}

uint64_t AES_CTR_Update(uint64_t a1, char *a2, unint64_t a3, unsigned char *a4)
{
  unint64_t v5 = a3;
  CFStringRef v8 = (unsigned char *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 40);
  if (a3 && v9)
  {
    do
    {
      char v10 = *a2++;
      *a4++ = v8[v9] ^ v10;
      uint64_t v9 = ((int)v9 + 1) & 0xFLL;
      --v5;
    }
    while (v5 && v9);
  }
  size_t dataOutMoved = 0;
  *(void *)(a1 + 40) = v9;
  if (v5 < 0x10)
  {
LABEL_14:
    if (v5)
    {
      uint64_t result = CCCryptorUpdate(*(CCCryptorRef *)a1, (const void *)(a1 + 8), 0x10uLL, v8, 0x10uLL, &dataOutMoved);
      if (!result)
      {
        if (dataOutMoved == 16)
        {
          uint64_t v15 = 23;
          do
          {
            if (v15 == 7) {
              break;
            }
            __int16 v16 = (*(unsigned char *)(a1 + v15--))++ + 1;
          }
          while ((v16 & 0x100) != 0);
          uint64_t v17 = 0;
          size_t dataOutMoved = 0;
          if (v5 <= 1) {
            uint64_t v18 = 1;
          }
          else {
            uint64_t v18 = v5;
          }
          do
          {
            a4[v17] = *(unsigned char *)(v9 + a1 + 24 + v17) ^ a2[v17];
            size_t dataOutMoved = ++v17;
          }
          while (v18 != v17);
          uint64_t result = 0;
          *(void *)(a1 + 40) = v9 + v17;
        }
        else
        {
          return 4294960553;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      uint64_t result = CCCryptorUpdate(*(CCCryptorRef *)a1, (const void *)(a1 + 8), 0x10uLL, v8, 0x10uLL, &dataOutMoved);
      if (result) {
        break;
      }
      if (dataOutMoved != 16) {
        return 4294960553;
      }
      uint64_t v12 = 23;
      do
      {
        if (v12 == 7) {
          break;
        }
        __int16 v13 = (*(unsigned char *)(a1 + v12--))++ + 1;
      }
      while ((v13 & 0x100) != 0);
      uint64_t v14 = 0;
      size_t dataOutMoved = 0;
      do
      {
        a4[v14] = v8[v14] ^ a2[v14];
        size_t dataOutMoved = ++v14;
      }
      while (v14 != 16);
      a2 += 16;
      a4 += 16;
      v5 -= 16;
      if (v5 <= 0xF) {
        goto LABEL_14;
      }
    }
  }
  return result;
}

uint64_t AES_CTR_Final(_CCCryptor **__s)
{
  uint64_t v2 = *__s;
  if (v2) {
    CCCryptorRelease(v2);
  }
  return memset_s(__s, 0x30uLL, 0, 0x30uLL);
}

__n128 AES_CBCFrame_Init(CCCryptorRef *cryptorRef, void *key, __n128 *a3, int a4)
{
  *cryptorRef = 0;
  if (!CCCryptorCreate(a4 == 0, 0, 0, key, 0x10uLL, 0, cryptorRef))
  {
    __n128 result = *a3;
    *(__n128 *)(cryptorRef + 1) = *a3;
  }
  return result;
}

uint64_t AES_CBCFrame_Update(CCCryptorRef *a1, char *a2, uint64_t a3, unsigned char *a4)
{
  size_t v7 = a3 & 0xFFFFFFFFFFFFFFF0;
  size_t dataOutMoved = a3 & 0xFFFFFFFFFFFFFFF0;
  if ((a3 & 0xFFFFFFFFFFFFFFF0) != 0)
  {
    uint64_t result = CCCryptorReset(*a1, a1 + 1);
    if (result) {
      return result;
    }
    uint64_t result = CCCryptorUpdate(*a1, a2, v7, a4, v7, &dataOutMoved);
    if (result) {
      return result;
    }
    char v10 = &a2[dataOutMoved];
    a4 += dataOutMoved;
  }
  else
  {
    char v10 = a2;
  }
  while (v10 != &a2[a3])
  {
    char v11 = *v10++;
    *a4++ = v11;
  }
  return 0;
}

uint64_t AES_CBCFrame_Final(_CCCryptor **__s)
{
  uint64_t v2 = *__s;
  if (v2) {
    CCCryptorRelease(v2);
  }
  return memset_s(__s, 0x18uLL, 0, 0x18uLL);
}

double AES_GCM_Init(CCCryptorRef *a1, void *key, __n128 *a3)
{
  *(void *)&double result = AES_GCM_InitEx(a1, 0, key, a3).n128_u64[0];
  return result;
}

__n128 AES_GCM_InitEx(CCCryptorRef *cryptorRef, CCOperation op, void *key, __n128 *a4)
{
  CCCryptorStatus v6 = CCCryptorCreateWithMode(op, 0xBu, 0, 0, 0, key, 0x10uLL, 0, 0, 0, 0, cryptorRef);
  if (a4)
  {
    if (!v6)
    {
      __n128 result = *a4;
      *(__n128 *)(cryptorRef + 1) = *a4;
    }
  }
  return result;
}

uint64_t AES_GCM_InitEx2(CCCryptorRef *cryptorRef, CCOperation op, void *key, size_t keyLength)
{
  return CCCryptorCreateWithMode(op, 0xBu, 0, 0, 0, key, keyLength, 0, 0, 0, 0, cryptorRef);
}

uint64_t AES_GCM_Final(_CCCryptor **__s)
{
  uint64_t v2 = *__s;
  if (v2) {
    CCCryptorRelease(v2);
  }
  return memset_s(__s, 0x18uLL, 0, 0x18uLL);
}

uint64_t AES_GCM_InitMessage(void *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t result = CCCryptorGCMReset();
  if (!result)
  {
    if (!a2)
    {
      a2 = a1 + 1;
      uint64_t v6 = 23;
      do
      {
        if (v6 == 7) {
          break;
        }
        __int16 v7 = (*((unsigned char *)a1 + v6--))++ + 1;
      }
      while ((v7 & 0x100) != 0);
    }
    return MEMORY[0x1F40C9510](v4, a2, 16);
  }
  return result;
}

uint64_t AES_GCM_InitMessageEx(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  uint64_t result = CCCryptorGCMReset();
  if (!result)
  {
    return MEMORY[0x1F40C9510](v5, a2, a3);
  }
  return result;
}

uint64_t AES_GCM_FinalizeMessage()
{
  return CCCryptorGCMFinalize();
}

uint64_t AES_GCM_VerifyMessage()
{
  return CCCryptorGCMFinalize();
}

uint64_t AES_GCM_AddAAD()
{
  return CCCryptorGCMAddAAD();
}

void AES_GCM_Encrypt()
{
}

void AES_GCM_Decrypt()
{
}

uint64_t SimpleArrayAppendItem(void **a1, uint64_t *a2, size_t a3, const void *a4)
{
  uint64_t v4 = *a2;
  size_t v5 = *a2 * a3;
  if (__CFADD__(v5, a3)) {
    return 4294960553;
  }
  char v10 = *a1;
  char v11 = (char *)malloc_type_malloc(v5 + a3, 0x874EB8AuLL);
  if (!v11) {
    return 4294960568;
  }
  uint64_t v12 = v11;
  if (v4) {
    memcpy(v11, v10, v5);
  }
  memcpy(&v12[v5], a4, a3);
  if (v10) {
    free(v10);
  }
  uint64_t result = 0;
  *a1 = v12;
  *a2 = v4 + 1;
  return result;
}

uint64_t SimpleArrayRemoveItemAtIndex(void **a1, unint64_t *a2, unint64_t a3, unint64_t a4, int a5)
{
  unint64_t v5 = *a2;
  if (*a2 <= a4) {
    return 4294960586;
  }
  char v10 = (char *)*a1;
  if (a5)
  {
    if (v5 < 2)
    {
      free(*a1);
      uint64_t result = 0;
      *a1 = 0;
      *a2 = 0;
    }
    else
    {
      unint64_t v11 = v5 - 1;
      BOOL v12 = !is_mul_ok(a3, v5 - 1);
      uint64_t result = 4294960553;
      if (a3 && !v12)
      {
        uint64_t v14 = (char *)malloc_type_malloc(a3 * v11, 0x70026AE6uLL);
        if (v14)
        {
          uint64_t v15 = v14;
          if (a4)
          {
            memcpy(v14, v10, a4 * a3);
            uint64_t v14 = &v15[a4 * a3];
          }
          unint64_t v16 = a3 + a3 * a4;
          if (v16 != v5 * a3) {
            memcpy(v14, &v10[v16], v5 * a3 - v16);
          }
          *a1 = v15;
          *a2 = v11;
          free(v10);
          return 0;
        }
        else
        {
          return 4294960568;
        }
      }
    }
  }
  else
  {
    if (v5 - 1 > a4) {
      memcpy(&v10[a4 * a3], &v10[a3 + a4 * a3], v5 * a3 - (a3 + a4 * a3));
    }
    uint64_t result = 0;
    *a2 = v5 - 1;
  }
  return result;
}

uint64_t AsyncConnection_Connect(void *a1, uint64_t a2, int a3, int a4, uint64_t a5, int a6, int a7, uint64_t a8, long long a9, uint64_t a10, uint64_t a11)
{
  uint64_t v28 = 0;
  long long v27 = 0u;
  long long v26 = 0u;
  uint64_t v23 = 0;
  long long v25 = 0u;
  uint64_t v24 = 152;
  uint64_t v12 = a2;
  int v13 = a3;
  int v14 = a4;
  uint64_t v15 = a5;
  int v16 = a6;
  int v17 = a7;
  uint64_t v18 = a8;
  long long v19 = a9;
  uint64_t v20 = a10;
  uint64_t v21 = a11;
  uint64_t v22 = 0;
  return AsyncConnection_ConnectEx(a1, (uint64_t)&v12);
}

uint64_t AsyncConnection_ConnectEx(void *a1, uint64_t a2)
{
  uint64_t v4 = malloc_type_calloc(1uLL, 0xB8uLL, 0x10F0040E01D48F7uLL);
  if (!v4) {
    return 4294960568;
  }
  unint64_t v5 = v4;
  *uint64_t v4 = 1;
  if (*(void *)a2)
  {
    uint64_t v6 = strdup(*(const char **)a2);
    *((void *)v5 + 1) = v6;
    if (!v6)
    {
      _AsyncConnection_Release(v5);
      return 4294960568;
    }
  }
  *((void *)v5 + 2) = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  if (!v7) {
    uint64_t v7 = -1;
  }
  *((void *)v5 + 6) = v7;
  *((void *)v5 + 3) = *(void *)(a2 + 80);
  double Current = CFAbsoluteTimeGetCurrent();
  *(_OWORD *)(v5 + 22) = *(_OWORD *)(a2 + 32);
  uint64_t v10 = *(void *)(a2 + 64);
  uint64_t v9 = *(int **)(a2 + 72);
  if (!v9) {
    uint64_t v9 = &gLogCategory_AsyncCnx;
  }
  *((void *)v5 + 18) = v9;
  *((void *)v5 + 7) = *(void *)(a2 + 24);
  *((double *)v5 + 8) = Current;
  *((void *)v5 + 13) = v10;
  *((_OWORD *)v5 + 7) = *(_OWORD *)(a2 + 48);
  if ((*(unsigned char *)(a2 + 13) & 4) != 0)
  {
    unint64_t v11 = *(void *)(a2 + 88);
    if (v11 >= 0x68)
    {
      if (*(void *)(a2 + 96))
      {
        *((void *)v5 + 17) = strdup(*(const char **)(a2 + 96));
        uint64_t v24 = &gLogCategory_AsyncCnx;
        LogCategoryReplaceF((uint64_t *)&v24, (uint64_t)"%s-%s", v12, v13, v14, v15, v16, v17, (uint64_t)off_1E91CBB48);
        uint64_t v18 = v24;
        if (v24)
        {
          *((void *)v5 + 18) = v24;
          *((void *)v5 + 19) = v18;
        }
        unint64_t v11 = *(void *)(a2 + 88);
      }
      if (v11 >= 0x70)
      {
        *((void *)v5 + 16) = *(void *)(a2 + 104);
        if (v11 >= 0x78)
        {
          long long v19 = *(const void **)(a2 + 112);
          if (v19)
          {
            CFRetain(v19);
            uint64_t v20 = *(void *)(a2 + 112);
            unint64_t v11 = *(void *)(a2 + 88);
          }
          else
          {
            uint64_t v20 = 0;
          }
          *((void *)v5 + 20) = v20;
          if (v11 >= 0x7C)
          {
            v5[42] = *(_DWORD *)(a2 + 120);
            if (v11 >= 0x84)
            {
              int v21 = *(_DWORD *)(a2 + 124);
              int v22 = *(_DWORD *)(a2 + 128);
              if (!v21) {
                int v21 = 1000;
              }
              v5[43] = v21;
              v5[44] = v22;
              if (v11 >= 0x90)
              {
                *((void *)v5 + 4) = *(void *)(a2 + 136);
                if (v11 >= 0x94) {
                  v5[45] = *(_DWORD *)(a2 + 144);
                }
              }
            }
          }
        }
      }
    }
  }
  dispatch_retain(*(dispatch_object_t *)(a2 + 64));
  dispatch_async_f(*(dispatch_queue_t *)(a2 + 64), v5, (dispatch_function_t)_AsyncConnection_Connect);
  uint64_t result = 0;
  *a1 = v5;
  return result;
}

void _AsyncConnection_Release(void *a1)
{
  if ((*(_DWORD *)a1)-- == 1)
  {
    _AsyncConnection_Complete((uint64_t)a1, 0, 0xFFFFFFFFLL, 4294960573);
    uint64_t v3 = a1[13];
    if (v3)
    {
      dispatch_release(v3);
      a1[13] = 0;
    }
    uint64_t v4 = (void *)a1[1];
    if (v4)
    {
      free(v4);
      a1[1] = 0;
    }
    unint64_t v5 = (void *)a1[17];
    if (v5)
    {
      free(v5);
      a1[17] = 0;
    }
    uint64_t v6 = (unsigned char *)a1[19];
    if (v6 && (v6[18] & 4) != 0)
    {
      LogCategory_Remove(v6);
      a1[19] = 0;
    }
    uint64_t v7 = (const void *)a1[20];
    if (v7) {
      CFRelease(v7);
    }
    free(a1);
  }
}

uint64_t _AsyncConnection_Complete(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = *(void (**)(uint64_t *))(a1 + 128);
  *(void *)(a1 + 128) = 0;
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, void))(a1 + 112);
  *(void *)(a1 + 112) = 0;
  if (v5)
  {
    uint64_t v10 = 32;
    int v11 = a3;
    int v12 = a4;
    uint64_t v13 = *(void *)(a1 + 120);
    uint64_t v14 = 0;
    if (a2)
    {
      uint64_t v14 = *(void *)(a2 + 104);
      v5(&v10);
      *(void *)(a2 + 104) = v14;
    }
    else
    {
      v5(&v10);
    }
  }
  else if (v6)
  {
    v6(a3, a4, *(void *)(a1 + 120));
  }
  CFStringRef v8 = *(NSObject **)(a1 + 72);
  if (v8)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 72));
    dispatch_release(v8);
    *(void *)(a1 + 72) = 0;
  }
  while (1)
  {
    uint64_t result = *(void *)(a1 + 80);
    if (!result) {
      break;
    }
    *(void *)(a1 + 80) = *(void *)(result + 8);
    _AsyncConnection_ReleaseOperation((_DWORD *)result);
  }
  return result;
}

void _AsyncConnection_ReleaseOperation(_DWORD *a1)
{
  uint64_t v2 = (const __SCNetworkReachability *)*((void *)a1 + 12);
  if (v2)
  {
    SCNetworkReachabilitySetCallback(v2, 0, 0);
    SCNetworkReachabilitySetDispatchQueue(*((SCNetworkReachabilityRef *)a1 + 12), 0);
    CFRelease(*((CFTypeRef *)a1 + 12));
    *((void *)a1 + 12) = 0;
  }
  uint64_t v3 = *((void *)a1 + 9);
  if (v3)
  {
    dispatch_source_cancel(*((dispatch_source_t *)a1 + 9));
    dispatch_release(v3);
    *((void *)a1 + 9) = 0;
  }
  uint64_t v4 = *((void *)a1 + 10);
  if (v4)
  {
    dispatch_source_cancel(*((dispatch_source_t *)a1 + 10));
    dispatch_release(v4);
    *((void *)a1 + 10) = 0;
  }
  unint64_t v5 = *((void *)a1 + 11);
  if (v5)
  {
    dispatch_source_cancel(*((dispatch_source_t *)a1 + 11));
    dispatch_release(v5);
    *((void *)a1 + 11) = 0;
  }
  uint64_t v6 = (_DNSServiceRef_t *)*((void *)a1 + 8);
  if (v6)
  {
    DNSServiceRefDeallocate(v6);
    *((void *)a1 + 8) = 0;
  }
  if ((*a1)-- == 1)
  {
    int v8 = a1[15];
    if ((v8 & 0x80000000) == 0)
    {
      if (close(v8) && *__error()) {
        __error();
      }
      a1[15] = -1;
    }
    uint64_t v9 = (void *)*((void *)a1 + 13);
    if (v9)
    {
      [*((id *)a1 + 13) invalidate];

      *((void *)a1 + 13) = 0;
    }
    _AsyncConnection_Release(*((void *)a1 + 2));
    free(a1);
  }
}

void _AsyncConnection_Connect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFArrayRef v9 = *(const __CFArray **)(a1 + 160);
  if (v9)
  {
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 160));
    if (Count >= 1)
    {
      CFIndex v11 = Count;
      CFIndex v12 = 0;
      uint64_t v13 = 4294960591;
      while (1)
      {
        CFTypeID TypeID = CFDictionaryGetTypeID();
        CFDictionaryRef TypedValueAtIndex = CFArrayGetTypedValueAtIndex(v9, v12, TypeID, 0);
        if (TypedValueAtIndex) {
          break;
        }
LABEL_22:
        if (v11 == ++v12) {
          goto LABEL_37;
        }
      }
      CFDictionaryRef v16 = TypedValueAtIndex;
      CFStringRef Value = CFDictionaryGetValue(TypedValueAtIndex, @"nanEP");
      if (!Value)
      {
        uint64_t v24 = CFDictionaryCopyCString(v16, @"dnsName", 0);
        if (v24)
        {
          long long v25 = v24;
          if (!*(void *)(a1 + 8)) {
            *(void *)(a1 + 8) = v24;
          }
          uint64_t v26 = _AsyncConnection_ConnectOne(a1, v24);
          if (v25 != *(char **)(a1 + 8)) {
            free(v25);
          }
          if (v26 != -6757)
          {
            if (v26) {
              goto LABEL_30;
            }
            uint64_t v13 = 0;
          }
        }
        goto LABEL_22;
      }
      uint64_t v22 = (uint64_t)Value;
      uint64_t v23 = *(int **)(a1 + 144);
      if (*v23 <= 50)
      {
        if (*v23 != -1)
        {
LABEL_8:
          LogPrintF((uint64_t)v23, (uint64_t)"OSStatus _AsyncConnection_StartNANDataSession(AsyncConnectionRef, CFTypeRef)", 0x32u, (uint64_t)"NAN data session start: %@\n", v18, v19, v20, v21, v22);
          goto LABEL_18;
        }
        if (_LogCategory_Initialize((uint64_t)v23, 0x32u))
        {
          uint64_t v23 = *(int **)(a1 + 144);
          goto LABEL_8;
        }
      }
LABEL_18:
      long long v27 = (char *)malloc_type_calloc(1uLL, 0xB8uLL, 0x10E0040D7525972uLL);
      if (v27)
      {
        uint64_t v28 = v27;
        ++*(_DWORD *)a1;
        *(_DWORD *)long long v27 = 1;
        *((void *)v27 + 2) = a1;
        *((_DWORD *)v27 + 15) = -1;
        uint64_t v29 = objc_alloc_init(CUNANDataSession);
        *((void *)v28 + 13) = v29;
        [(CUNANDataSession *)v29 setDispatchQueue:*(void *)(a1 + 104)];
        if (*(void *)(a1 + 136)) {
          -[CUNANDataSession setLabel:](v29, "setLabel:", objc_msgSend(NSString, "stringWithUTF8String:"));
        }
        [(CUNANDataSession *)v29 setPeerEndpoint:v22];
        [(CUNANDataSession *)v29 setTrafficFlags:*(unsigned int *)(a1 + 168)];
        ++*(_DWORD *)v28;
        __stringp[0] = (char *)MEMORY[0x1E4F143A8];
        __stringp[1] = (char *)3221225472;
        __stringp[2] = (char *)___AsyncConnection_StartNANDataSession_block_invoke;
        __stringp[3] = (char *)&unk_1E55BD470;
        __stringp[4] = (char *)v29;
        __stringp[5] = (char *)a1;
        __stringp[6] = v28;
        [(CUNANDataSession *)v29 activateWithCompletion:__stringp];
        uint64_t v13 = 0;
        *((void *)v28 + 1) = *(void *)(a1 + 80);
        *(void *)(a1 + 80) = v28;
      }
      else
      {
        uint64_t v13 = 4294960568;
      }
      goto LABEL_22;
    }
    uint64_t v26 = 4294960591;
    goto LABEL_30;
  }
  int v30 = *(int **)(a1 + 144);
  if (*v30 <= 50)
  {
    if (*v30 != -1)
    {
LABEL_28:
      LogPrintF((uint64_t)v30, (uint64_t)"OSStatus _AsyncConnection_ConnectStrings(AsyncConnectionRef)", 0x32u, (uint64_t)"Connect start: '%s'\n", a5, a6, a7, a8, *(void *)(a1 + 8));
      goto LABEL_32;
    }
    if (_LogCategory_Initialize((uint64_t)v30, 0x32u))
    {
      int v30 = *(int **)(a1 + 144);
      goto LABEL_28;
    }
  }
LABEL_32:
  __stringp[0] = *(char **)(a1 + 8);
  uint64_t v13 = 4294960591;
  while (__stringp[0])
  {
    int v31 = strsep(__stringp, "\x1E");
    if (!v31) {
      break;
    }
    uint64_t v32 = _AsyncConnection_ConnectOne(a1, v31);
    if (v32 != -6757)
    {
      uint64_t v13 = v32;
      if (v32) {
        break;
      }
    }
  }
LABEL_37:
  uint64_t v26 = v13;
  if (v13) {
    goto LABEL_30;
  }
  if (*(void *)(a1 + 48) == -1) {
    return;
  }
  int v33 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, *(dispatch_queue_t *)(a1 + 104));
  *(void *)(a1 + 72) = v33;
  if (!v33)
  {
    uint64_t v26 = 4294960596;
LABEL_30:
    _AsyncConnection_Complete(a1, 0, 0xFFFFFFFFLL, v26);
    return;
  }
  dispatch_set_context(v33, (void *)a1);
  dispatch_source_set_event_handler_f(*(dispatch_source_t *)(a1 + 72), (dispatch_function_t)_AsyncConnection_TimeoutHandler);
  uint64_t v34 = *(NSObject **)(a1 + 72);
  dispatch_time_t v35 = dispatch_time(0, *(void *)(a1 + 48));
  dispatch_source_set_timer(v34, v35, 0xFFFFFFFFFFFFFFFFLL, 0x5F5E100uLL);
  dispatch_resume(*(dispatch_object_t *)(a1 + 72));
}

uint64_t _AsyncConnection_ConnectOne(uint64_t a1, char *__s)
{
  uint64_t v2 = __s;
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = strchr(__s, 58);
  if (!v4) {
    goto LABEL_9;
  }
  if (v4[1] != 47) {
    goto LABEL_9;
  }
  if (v4[2] != 47) {
    goto LABEL_9;
  }
  long long v69 = 0u;
  long long v70 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  *(_OWORD *)fullname = 0u;
  long long v62 = 0u;
  URLParseComponents(v2, 0, (char **)fullname, 0);
  size_t v5 = *((void *)&v64 + 1);
  uint64_t v2 = (char *)v64;
  *(unsigned char *)(v64 + *((void *)&v64 + 1)) = 0;
  if (strnicmpx(*(unsigned __int8 **)fullname, *(uint64_t *)&fullname[8], "wake")
    || (*(unsigned char *)(a1 + 21) & 0x10) != 0)
  {
LABEL_9:
    if (!*v2) {
      return 4294960539;
    }
    memset(v57, 0, sizeof(v57));
    int v58 = 0;
    if (!StringToSockAddr((unsigned __int8 *)v2, (uint64_t)v57, 0x1CuLL, 0))
    {
      uint64_t v25 = *(unsigned int *)(a1 + 16);
      if ((*(unsigned char *)(a1 + 20) & 4) != 0)
      {
        if (!_AsyncConnection_ReachabilityStart(a1, 0, (uint64_t)v57, 0, v25)) {
          return 0;
        }
        uint64_t v25 = *(unsigned int *)(a1 + 16);
      }
      return _AsyncConnection_StartConnect(a1, 0, (uint64_t)v57, 0, v25, v11, v12, v13);
    }
    if (!stristr(v2, "._tcp.") && !stristr(v2, "._udp."))
    {
      int v26 = *(_DWORD *)(a1 + 16);
      return _AsyncConnection_StartDNSResolve(a1, 0, v2, v26);
    }
    int v14 = *(_DWORD *)(a1 + 16);
    uint64_t v15 = (DNSServiceRef *)malloc_type_calloc(1uLL, 0xB8uLL, 0x10E0040D7525972uLL);
    if (!v15) {
      return 4294960568;
    }
    CFDictionaryRef v16 = v15;
    *(_DWORD *)name = 0;
    ++*(_DWORD *)a1;
    *(_DWORD *)uint64_t v15 = 1;
    int v15[2] = (DNSServiceRef)a1;
    *((_DWORD *)v15 + 15) = -1;
    *((CFAbsoluteTime *)v15 + 16) = CFAbsoluteTimeGetCurrent();
    LODWORD(v71) = 0;
    uint64_t Record = ParseDestination(v2, fullname, (unsigned int *)name, &v71);
    if (Record)
    {
LABEL_34:
      _AsyncConnection_ReleaseOperation(v16);
      return Record;
    }
    int v22 = v71;
    if (v71) {
      BOOL v23 = v14 < 0;
    }
    else {
      BOOL v23 = 1;
    }
    if (v23) {
      int v22 = v14;
    }
    *((_DWORD *)v16 + 14) = v22;
    uint64_t v24 = *(int **)(a1 + 144);
    if (*v24 <= 30)
    {
      if (*v24 != -1)
      {
LABEL_22:
        LogPrintF((uint64_t)v24, (uint64_t)"OSStatus _AsyncConnection_StartSRVQuery(AsyncConnectionRef, const char *, int)", 0x1Eu, (uint64_t)"Querying SRV %s\n", v17, v18, v19, v20, (uint64_t)v2);
        goto LABEL_31;
      }
      if (_LogCategory_Initialize((uint64_t)v24, 0x1Eu))
      {
        uint64_t v24 = *(int **)(a1 + 144);
        goto LABEL_22;
      }
    }
LABEL_31:
    uint64_t v28 = *(void (**)(uint64_t, char *, void))(a1 + 88);
    if (v28) {
      v28(1, v2, *(void *)(a1 + 96));
    }
    uint64_t Record = DNSServiceQueryRecord(v16 + 8, 0x400000u, *(uint32_t *)name, fullname, 0x21u, 1u, (DNSServiceQueryRecordReply)_AsyncConnection_SRVCallBack, v16);
    if (!Record)
    {
      DNSServiceSetDispatchQueue(v16[8], *(dispatch_queue_t *)(a1 + 104));
      v16[1] = *(DNSServiceRef *)(a1 + 80);
      *(void *)(a1 + 80) = v16;
      return Record;
    }
    goto LABEL_34;
  }
  uint64_t v10 = *(int **)(a1 + 144);
  if (*v10 > 50) {
    goto LABEL_38;
  }
  if (*v10 != -1) {
    goto LABEL_8;
  }
  if (_LogCategory_Initialize((uint64_t)v10, 0x32u))
  {
    uint64_t v10 = *(int **)(a1 + 144);
LABEL_8:
    LogPrintF((uint64_t)v10, (uint64_t)"OSStatus _AsyncConnection_StartWakeAll(AsyncConnectionRef, const char *, size_t)", 0x32u, (uint64_t)"WakeDevice start: %.*s\n", v6, v7, v8, v9, v5);
  }
LABEL_38:
  if (TextToHardwareAddress(v2, v5, 6, v60))
  {
    uint64_t v34 = *(int **)(a1 + 144);
    if (*v34 > 90) {
      return 0;
    }
    if (*v34 == -1)
    {
      if (!_LogCategory_Initialize((uint64_t)v34, 0x5Au)) {
        return 0;
      }
      uint64_t v34 = *(int **)(a1 + 144);
    }
    LogPrintF((uint64_t)v34, (uint64_t)"OSStatus _AsyncConnection_StartWakeAll(AsyncConnectionRef, const char *, size_t)", 0x5Au, (uint64_t)"### WakeDevice failed: %.*s\n", v30, v31, v32, v33, v5);
    return 0;
  }
  SNPrintF((uint64_t)name, 32, (uint64_t)"%.6a@0.0.0.0", v29, v30, v31, v32, v33, (uint64_t)v60);
  int v39 = socket(2, 2, 0);
  if ((v39 & 0x80000000) == 0) {
    goto LABEL_49;
  }
  int v40 = *(int **)(a1 + 144);
  if (*v40 > 90) {
    goto LABEL_49;
  }
  if (*v40 == -1)
  {
    if (!_LogCategory_Initialize((uint64_t)v40, 0x5Au)) {
      goto LABEL_49;
    }
    int v40 = *(int **)(a1 + 144);
  }
  LogPrintF((uint64_t)v40, (uint64_t)"OSStatus _AsyncConnection_StartWakeAll(AsyncConnectionRef, const char *, size_t)", 0x5Au, (uint64_t)"### WakeDevice: create temp socket failed\n", v35, v36, v37, v38, v56);
LABEL_49:
  uint64_t v59 = 0;
  getifaddrs(&v59);
  uint64_t v45 = v59;
  if (!v59) {
    goto LABEL_78;
  }
  int v46 = 0;
  do
  {
    if ((v45->ifa_flags & 9) != 1) {
      goto LABEL_70;
    }
    ifa_dstaddr = v45->ifa_dstaddr;
    if (!ifa_dstaddr) {
      goto LABEL_70;
    }
    if (ifa_dstaddr->sa_family != 2) {
      goto LABEL_70;
    }
    ifa_name = v45->ifa_name;
    if (!ifa_name) {
      goto LABEL_70;
    }
    unsigned int v49 = if_nametoindex(ifa_name);
    if (!v49) {
      goto LABEL_70;
    }
    uint32_t v50 = v49;
    if (v39 < 0 || (long long v71 = 0u, v72 = 0u, __strlcpy_chk(), ioctl(v39, 0xC020699FuLL, &v71), DWORD1(v72) == 2))
    {
      int v51 = *(int **)(a1 + 144);
      if (*v51 <= 50)
      {
        if (*v51 == -1)
        {
          if (!_LogCategory_Initialize((uint64_t)v51, 0x32u)) {
            goto LABEL_65;
          }
          int v51 = *(int **)(a1 + 144);
        }
        LogPrintF((uint64_t)v51, (uint64_t)"OSStatus _AsyncConnection_StartWakeInterface(AsyncConnectionRef, const char *, uint32_t)", 0x32u, (uint64_t)"WakeDevice interface: %s, %u\n", v41, v42, v43, v44, (uint64_t)name);
      }
LABEL_65:
      int v53 = (DNSServiceRef *)malloc_type_calloc(1uLL, 0xB8uLL, 0x10E0040D7525972uLL);
      if (v53)
      {
        int v54 = v53;
        ++*(_DWORD *)a1;
        *(_DWORD *)int v53 = 1;
        v53[2] = (DNSServiceRef)a1;
        *((_DWORD *)v53 + 15) = -1;
        if (DNSServiceResolve(v53 + 8, 0x40000u, v50, name, "_wake._tcp", "local.", (DNSServiceResolveReply)_AsyncConnection_WakeResolveCallback, v53))
        {
          _AsyncConnection_ReleaseOperation(v54);
        }
        else
        {
          DNSServiceSetDispatchQueue(v54[8], *(dispatch_queue_t *)(a1 + 104));
          v54[1] = *(DNSServiceRef *)(a1 + 80);
          *(void *)(a1 + 80) = v54;
        }
      }
      ++v46;
      goto LABEL_70;
    }
    uint64_t v52 = *(int **)(a1 + 144);
    if (*v52 > 30) {
      goto LABEL_70;
    }
    if (*v52 != -1) {
      goto LABEL_63;
    }
    if (_LogCategory_Initialize((uint64_t)v52, 0x1Eu))
    {
      uint64_t v52 = *(int **)(a1 + 144);
LABEL_63:
      LogPrintF((uint64_t)v52, (uint64_t)"OSStatus _AsyncConnection_StartWakeAll(AsyncConnectionRef, const char *, size_t)", 0x1Eu, (uint64_t)"WakeDevice: skiping non-Ethernet-style: %s\n", v41, v42, v43, v44, (uint64_t)v45->ifa_name);
    }
LABEL_70:
    uint64_t v45 = v45->ifa_next;
  }
  while (v45);
  if (v59) {
    MEMORY[0x192FAA4D0]();
  }
  if (!v46)
  {
LABEL_78:
    int v55 = *(int **)(a1 + 144);
    if (*v55 <= 90)
    {
      if (*v55 != -1) {
        goto LABEL_80;
      }
      if (_LogCategory_Initialize((uint64_t)v55, 0x5Au))
      {
        int v55 = *(int **)(a1 + 144);
LABEL_80:
        LogPrintF((uint64_t)v55, (uint64_t)"OSStatus _AsyncConnection_StartWakeAll(AsyncConnectionRef, const char *, size_t)", 0x5Au, (uint64_t)"### WakeDevice with no interfaces: %.*s\n", v41, v42, v43, v44, v5);
      }
    }
  }
  if ((v39 & 0x80000000) == 0 && close(v39))
  {
    if (*__error()) {
      __error();
    }
  }
  return 0;
}

uint64_t _AsyncConnection_TimeoutHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(int **)(a1 + 144);
  if (*v9 <= 50)
  {
    if (*v9 != -1)
    {
LABEL_3:
      LogPrintF((uint64_t)v9, (uint64_t)"void _AsyncConnection_TimeoutHandler(void *)", 0x32u, (uint64_t)"### Connect timed out: %s\n", a5, a6, a7, a8, *(void *)(a1 + 8));
      goto LABEL_5;
    }
    if (_LogCategory_Initialize((uint64_t)v9, 0x32u))
    {
      uint64_t v9 = *(int **)(a1 + 144);
      goto LABEL_3;
    }
  }
LABEL_5:
  return _AsyncConnection_Complete(a1, 0, 0xFFFFFFFFLL, 4294960574);
}

uint64_t _AsyncConnection_ReachabilityStart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  memset(&context, 0, sizeof(context));
  uint64_t v10 = (char *)malloc_type_calloc(1uLL, 0xB8uLL, 0x10E0040D7525972uLL);
  if (!v10) {
    return 4294960568;
  }
  uint64_t v11 = v10;
  ++*(_DWORD *)a1;
  *(_DWORD *)uint64_t v10 = 1;
  *((void *)v10 + 2) = a1;
  *((_DWORD *)v10 + 15) = -1;
  int v12 = *(unsigned __int8 *)(a3 + 1);
  if (*(unsigned char *)(a3 + 1))
  {
    if (v12 == 30)
    {
      long long v13 = *(_OWORD *)a3;
      uint64_t v14 = *(void *)(a3 + 16);
      *((_DWORD *)v10 + 12) = *(_DWORD *)(a3 + 24);
      *((void *)v10 + 5) = v14;
    }
    else
    {
      if (v12 != 2) {
        goto LABEL_9;
      }
      long long v13 = *(_OWORD *)a3;
    }
    *(_OWORD *)(v10 + 24) = v13;
  }
  else
  {
    v10[25] = 0;
  }
LABEL_9:
  *((_DWORD *)v10 + 13) = a4;
  *((_DWORD *)v10 + 14) = a5;
  *((CFAbsoluteTime *)v10 + 14) = CFAbsoluteTimeGetCurrent();
  if (a2)
  {
    *((void *)v11 + 17) = *(void *)(a2 + 136);
    *((void *)v11 + 19) = *(void *)(a2 + 152);
  }
  memset(bytes, 0, 28);
  SCNetworkReachabilityFlags flags = 0;
  int v15 = *(unsigned __int8 *)(a3 + 1);
  if (v15 == 30)
  {
    *(_OWORD *)long long bytes = *(_OWORD *)a3;
    *(_OWORD *)&bytes[12] = *(_OWORD *)(a3 + 12);
    if ((a5 & 0x80000000) == 0) {
      goto LABEL_15;
    }
  }
  else
  {
    if (v15 == 2) {
      *(_OWORD *)long long bytes = *(_OWORD *)a3;
    }
    if ((a5 & 0x80000000) == 0)
    {
LABEL_15:
      int v16 = bytes[1];
      if (bytes[1] != 30 && bytes[1] != 2) {
        goto LABEL_24;
      }
      unsigned int v17 = a5;
      if (*(_WORD *)&bytes[2]) {
        goto LABEL_24;
      }
      goto LABEL_21;
    }
  }
  unsigned int v17 = -(int)a5;
  int v16 = bytes[1];
LABEL_21:
  if (v16 == 30 || v16 == 2) {
    *(_WORD *)&bytes[2] = bswap32(v17) >> 16;
  }
LABEL_24:
  CFMutableDataRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    uint64_t v33 = 4294960568;
    goto LABEL_51;
  }
  uint64_t v19 = Mutable;
  uint64_t v20 = 28;
  if (v16 != 30) {
    uint64_t v20 = 0;
  }
  if (v16 == 2) {
    CFIndex v21 = 16;
  }
  else {
    CFIndex v21 = v20;
  }
  CFDictionarySetData(Mutable, @"remote-address", bytes, v21);
  if (a4 && ((*(unsigned char *)(a1 + 20) & 8) != 0 || bytes[1] == 2 && bytes[4] == 169 && bytes[5] == 254))
  {
    v39[0] = 0;
    if_indextoname(a4, v39);
    if (v39[0]) {
      CFDictionarySetCString(v19, @"interface", v39, -1);
    }
  }
  *((void *)v11 + 12) = SCNetworkReachabilityCreateWithOptions();
  CFRelease(v19);
  int v22 = (const __SCNetworkReachability *)*((void *)v11 + 12);
  if (!v22
    || (context.info = v11,
        !SCNetworkReachabilitySetCallback(v22, (SCNetworkReachabilityCallBack)_AsyncConnection_ReachabilityHandler, &context))|| !SCNetworkReachabilitySetDispatchQueue(*((SCNetworkReachabilityRef *)v11 + 12), *(dispatch_queue_t *)(a1 + 104)))
  {
    uint64_t v33 = 4294960596;
    goto LABEL_51;
  }
  SCNetworkReachabilityFlags flags = 0;
  if (!SCNetworkReachabilityGetFlags(*((SCNetworkReachabilityRef *)v11 + 12), &flags) || (flags & 2) == 0) {
    goto LABEL_53;
  }
  *((CFAbsoluteTime *)v11 + 15) = CFAbsoluteTimeGetCurrent() - *((double *)v11 + 14);
  uint64_t v31 = *(int **)(a1 + 144);
  if (*v31 <= 30)
  {
    if (*v31 == -1)
    {
      if (!_LogCategory_Initialize((uint64_t)v31, 0x1Eu)) {
        goto LABEL_46;
      }
      uint64_t v31 = *(int **)(a1 + 144);
    }
    LogPrintF((uint64_t)v31, (uint64_t)"OSStatus _AsyncConnection_ReachabilityStart(AsyncConnectionRef, AsyncConnectionOperationRef, const void *, uint32_t, int)", 0x1Eu, (uint64_t)"Reachability of %##a default port %d OK, Flags 0x%X\n", v27, v28, v29, v30, a3);
  }
LABEL_46:
  if (_AsyncConnection_StartConnect(a1, 0, a3, a4, a5, v28, v29, v30))
  {
    uint64_t v32 = *(int **)(a1 + 144);
    if (*v32 > 90) {
      goto LABEL_53;
    }
    if (*v32 != -1) {
      goto LABEL_49;
    }
    if (_LogCategory_Initialize((uint64_t)v32, 0x5Au))
    {
      uint64_t v32 = *(int **)(a1 + 144);
LABEL_49:
      LogPrintF((uint64_t)v32, (uint64_t)"OSStatus _AsyncConnection_ReachabilityStart(AsyncConnectionRef, AsyncConnectionOperationRef, const void *, uint32_t, int)", 0x5Au, (uint64_t)"### Connect %##a default port %d failed after reachability said OK\n", v23, v24, v25, v26, a3);
    }
LABEL_53:
    uint64_t v34 = *(int **)(a1 + 144);
    if (*v34 <= 30)
    {
      if (*v34 == -1)
      {
        if (!_LogCategory_Initialize((uint64_t)v34, 0x1Eu)) {
          goto LABEL_57;
        }
        uint64_t v34 = *(int **)(a1 + 144);
      }
      LogPrintF((uint64_t)v34, (uint64_t)"OSStatus _AsyncConnection_ReachabilityStart(AsyncConnectionRef, AsyncConnectionOperationRef, const void *, uint32_t, int)", 0x1Eu, (uint64_t)"Monitoring reachability of %##a default port %d\n", v23, v24, v25, v26, a3);
    }
LABEL_57:
    uint64_t v33 = 0;
    *((void *)v11 + 1) = *(void *)(a1 + 80);
    *(void *)(a1 + 80) = v11;
    return v33;
  }
  uint64_t v33 = 0;
LABEL_51:
  _AsyncConnection_ReleaseOperation(v11);
  return v33;
}

uint64_t _AsyncConnection_StartConnect(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v13 = *(_DWORD *)(a1 + 20);
  int v14 = *(unsigned __int8 *)(a3 + 1);
  if ((v13 & 0x80) != 0)
  {
    if (v14 == 30)
    {
      if (*(unsigned __int8 *)(a3 + 8) == 254 && (*(unsigned char *)(a3 + 9) & 0xC0) == 0x80) {
        return 0;
      }
      int v14 = 30;
    }
    else if (v14 == 2)
    {
      if (*(unsigned __int8 *)(a3 + 4) == 169 && *(unsigned __int8 *)(a3 + 5) == 254) {
        return 0;
      }
      int v14 = 2;
    }
  }
  if ((v13 & 0x800) != 0)
  {
    if (v14 != 30) {
      goto LABEL_20;
    }
    if (*(unsigned __int8 *)(a3 + 8) == 254 && (*(unsigned char *)(a3 + 9) & 0xC0) == 0x80) {
      return 0;
    }
  }
  else if (v14 != 30)
  {
LABEL_20:
    if ((v13 & 0x40) == 0) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  if ((v13 & 0x200) != 0)
  {
    int v16 = *(int **)(a1 + 144);
    if (*v16 <= 30)
    {
      if (*v16 == -1)
      {
        if (!_LogCategory_Initialize((uint64_t)v16, 0x1Eu)) {
          return 0;
        }
        int v16 = *(int **)(a1 + 144);
      }
      LogPrintF((uint64_t)v16, (uint64_t)"OSStatus _AsyncConnection_StartConnect(AsyncConnectionRef, AsyncConnectionOperationRef, const void *, uint32_t, int)", 0x1Eu, (uint64_t)"Skipping IPv6 address with NoIPv6: %##a\n", a5, a6, a7, a8, a3);
    }
    return 0;
  }
  if ((v13 & 0x40) == 0)
  {
    unint64_t v15 = *(void *)(a1 + 32);
    if (!v15) {
      goto LABEL_31;
    }
    goto LABEL_24;
  }
  if (*(unsigned __int8 *)(a3 + 8) != 254) {
    goto LABEL_21;
  }
  if ((*(unsigned char *)(a3 + 9) & 0xC0) != 0x80) {
    goto LABEL_21;
  }
  if (!*(_DWORD *)(a3 + 24)) {
    goto LABEL_21;
  }
  if (if_nametoindex("awdl0") != *(_DWORD *)(a3 + 24)) {
    goto LABEL_21;
  }
  char v30 = *(unsigned char *)(a3 + 16) ^ 2;
  __int16 v31 = *(_WORD *)(a3 + 17);
  char v32 = *(unsigned char *)(a3 + 21);
  __int16 v33 = *(_WORD *)(a3 + 22);
  uint64_t v22 = AWDLTrafficRegister((uint64_t)&v30, 1, 1);
  if (!v22) {
    goto LABEL_21;
  }
  uint64_t v21 = v22;
  uint64_t v26 = *(int **)(a1 + 144);
  if (*v26 <= 90)
  {
    if (*v26 == -1)
    {
      if (!_LogCategory_Initialize((uint64_t)v26, 0x5Au)) {
        goto LABEL_52;
      }
      uint64_t v26 = *(int **)(a1 + 144);
    }
    LogPrintF((uint64_t)v26, (uint64_t)"OSStatus _AsyncConnection_StartConnect(AsyncConnectionRef, AsyncConnectionOperationRef, const void *, uint32_t, int)", 0x5Au, (uint64_t)"AWDLTrafficRegister failed: %#m\n", v23, v24, v25, a8, v21);
  }
LABEL_52:
  if ((*(unsigned char *)(a1 + 21) & 1) == 0 || v21 != 13 && v21 != 35)
  {
    uint64_t v28 = *(int **)(a1 + 144);
    if (*v28 <= 50)
    {
      if (*v28 == -1)
      {
        if (!_LogCategory_Initialize((uint64_t)v28, 0x32u)) {
          goto LABEL_59;
        }
        uint64_t v28 = *(int **)(a1 + 144);
      }
      LogPrintF((uint64_t)v28, (uint64_t)"OSStatus _AsyncConnection_StartConnect(AsyncConnectionRef, AsyncConnectionOperationRef, const void *, uint32_t, int)", 0x32u, (uint64_t)"Skipping %##a (MAC %.6a) due to AWDLTrafficRegister reject: %#m\n", v23, v24, v25, a8, a3);
    }
LABEL_59:
    _AsyncConnection_Complete(a1, 0, 0xFFFFFFFFLL, v21);
    return v21;
  }
LABEL_21:
  int v14 = *(unsigned __int8 *)(a3 + 1);
LABEL_22:
  unint64_t v15 = *(void *)(a1 + 32);
  if (v15)
  {
    if (v14 == 30)
    {
LABEL_24:
      if (*(unsigned __int8 *)(a3 + 8) == 254 && (*(unsigned char *)(a3 + 9) & 0xC0) == 0x80) {
        return _AsyncConnection_StartConnectDelayed(a1, a2, 0, a3, a4, a5, v15, a8);
      }
LABEL_31:
      unint64_t v15 = *(void *)(a1 + 24);
      if (v15) {
        return _AsyncConnection_StartConnectDelayed(a1, a2, 0, a3, a4, a5, v15, a8);
      }
    }
  }
  else if (v14 == 30)
  {
    goto LABEL_31;
  }
  uint64_t v17 = mach_absolute_time();
  uint64_t v18 = *(void *)(a1 + 40);
  if (!v18) {
    goto LABEL_38;
  }
  if (NanosecondsToUpTicks_sOnce != -1)
  {
    uint64_t v29 = *(void *)(a1 + 40);
    dispatch_once_f(&NanosecondsToUpTicks_sOnce, &NanosecondsToUpTicks_sMultiplier, (dispatch_function_t)_NanosecondsToUpTicksInit);
    uint64_t v18 = v29;
  }
  uint64_t v19 = v18 + (unint64_t)(*(double *)&NanosecondsToUpTicks_sMultiplier * 100000000.0);
  if (v19 <= v17)
  {
LABEL_38:
    *(void *)(a1 + 40) = v17;
    return _AsyncConnection_StartConnectNow(a1, (uint64_t)a2, a3, a4, a5);
  }
  *(void *)(a1 + 40) = v19;
  unint64_t v15 = UpTicksToNanoseconds(v19 - v17);
  return _AsyncConnection_StartConnectDelayed(a1, a2, 0, a3, a4, a5, v15, a8);
}

uint64_t ParseDestination(char *a1, void *a2, unsigned int *a3, _DWORD *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  int v19 = 0;
  uint64_t v8 = strchr(a1, 37);
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = v8 + 1;
    uint64_t v11 = strchr(v8 + 1, 58);
    if (v11)
    {
      int v12 = v11;
      if (sscanf(v11 + 1, "%d", &v19) != 1) {
        return 4294960554;
      }
      int v13 = 1;
    }
    else
    {
      int v13 = 0;
      int v12 = &v10[strlen(v9)];
    }
    unint64_t v17 = v12 - v10;
    if (v17 <= 0x10)
    {
      __memcpy_chk();
      v21[v17] = 0;
      unsigned int v20 = if_nametoindex(v21);
      if (v20 || sscanf(v21, "%u", &v20) == 1)
      {
        size_t v16 = v9 - a1;
        goto LABEL_15;
      }
    }
    return 4294960554;
  }
  int v14 = strchr(a1, 58);
  if (v14)
  {
    unint64_t v15 = v14;
    if (sscanf(v14 + 1, "%d", &v19) != 1) {
      return 4294960554;
    }
    size_t v16 = v15 - a1;
    int v13 = 1;
  }
  else
  {
    size_t v16 = strlen(a1);
    int v13 = 0;
  }
  unsigned int v20 = 0;
LABEL_15:
  if (v16 > 0x3F0) {
    return 4294960553;
  }
  memcpy(a2, a1, v16);
  *((unsigned char *)a2 + v16) = 0;
  *a3 = v20;
  uint64_t result = 0;
  if (v13) {
    *a4 = v19;
  }
  return result;
}

uint64_t _AsyncConnection_StartDNSResolve(uint64_t a1, uint64_t a2, char *a3, int a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = malloc_type_calloc(1uLL, 0xB8uLL, 0x10E0040D7525972uLL);
  if (!v8) {
    return 4294960568;
  }
  uint64_t v9 = v8;
  ++*(_DWORD *)a1;
  *(_DWORD *)uint64_t v8 = 1;
  v8[2] = a1;
  *((_DWORD *)v8 + 15) = -1;
  *((CFAbsoluteTime *)v8 + 18) = CFAbsoluteTimeGetCurrent();
  if (a2)
  {
    *((void *)v9 + 15) = *(void *)(a2 + 120);
    *((void *)v9 + 17) = *(void *)(a2 + 136);
  }
  int v20 = 0;
  uint32_t interfaceIndex = 0;
  uint64_t AddrInfo = ParseDestination(a3, hostname, &interfaceIndex, &v20);
  if (AddrInfo) {
    goto LABEL_17;
  }
  int v15 = v20;
  if (v20) {
    BOOL v16 = a4 < 0;
  }
  else {
    BOOL v16 = 1;
  }
  if (v16) {
    int v15 = a4;
  }
  v9[14] = v15;
  unint64_t v17 = *(int **)(a1 + 144);
  if (*v17 <= 30)
  {
    if (*v17 != -1)
    {
LABEL_12:
      LogPrintF((uint64_t)v17, (uint64_t)"OSStatus _AsyncConnection_StartDNSResolve(AsyncConnectionRef, AsyncConnectionOperationRef, const char *, int)", 0x1Eu, (uint64_t)"Resolving DNS %s\n", v10, v11, v12, v13, (uint64_t)a3);
      goto LABEL_14;
    }
    if (_LogCategory_Initialize((uint64_t)v17, 0x1Eu))
    {
      unint64_t v17 = *(int **)(a1 + 144);
      goto LABEL_12;
    }
  }
LABEL_14:
  uint64_t v18 = *(void (**)(uint64_t, char *, void))(a1 + 88);
  if (v18) {
    v18(2, a3, *(void *)(a1 + 96));
  }
  uint64_t AddrInfo = DNSServiceGetAddrInfo((DNSServiceRef *)v9 + 8, (*(_DWORD *)(a1 + 20) << 14) & 0x8000, interfaceIndex, 0, hostname, (DNSServiceGetAddrInfoReply)_AsyncConnection_DNSCallBack, v9);
  if (!AddrInfo)
  {
    DNSServiceSetDispatchQueue(*((DNSServiceRef *)v9 + 8), *(dispatch_queue_t *)(a1 + 104));
    *((void *)v9 + 1) = *(void *)(a1 + 80);
    *(void *)(a1 + 80) = v9;
    return AddrInfo;
  }
LABEL_17:
  _AsyncConnection_ReleaseOperation(v9);
  return AddrInfo;
}

void _AsyncConnection_DNSCallBack(uint64_t a1, char a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((a2 & 2) == 0 || a4) {
    return;
  }
  uint64_t v12 = *(void *)(a8 + 16);
  *(CFAbsoluteTime *)(a8 + 152) = CFAbsoluteTimeGetCurrent() - *(double *)(a8 + 144);
  unint64_t v17 = *(int **)(v12 + 144);
  if (*v17 <= 30)
  {
    if (*v17 == -1)
    {
      if (!_LogCategory_Initialize((uint64_t)v17, 0x1Eu)) {
        goto LABEL_7;
      }
      unint64_t v17 = *(int **)(v12 + 144);
    }
    LogPrintF((uint64_t)v17, (uint64_t)"void _AsyncConnection_DNSCallBack(DNSServiceRef, DNSServiceFlags, uint32_t, DNSServiceErrorType, const char *, const struct sockaddr *, uint32_t, void *)", 0x1Eu, (uint64_t)"Resolved DNS %s -> %##a, Flags 0x%X, If %u, TTL %u\n", v13, v14, v15, v16, a5);
  }
LABEL_7:
  if ((*(unsigned char *)(v12 + 20) & 4) == 0
    || _AsyncConnection_ReachabilityStart(v12, a8, a6, a3, *(unsigned int *)(a8 + 56)))
  {
    uint64_t v18 = *(unsigned int *)(a8 + 56);
    _AsyncConnection_StartConnect(v12, (void *)a8, a6, a3, v18, v14, v15, v16);
  }
}

void _AsyncConnection_SRVCallBack(uint64_t a1, char a2, int a3, uint64_t started, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v35[134] = *MEMORY[0x1E4F143B8];
  if (started) {
    goto LABEL_32;
  }
  if ((a2 & 2) != 0)
  {
    if (a8 < 7)
    {
      started = 4294960554;
      goto LABEL_32;
    }
    uint64_t v14 = a9 + 6;
    unsigned int v13 = *(unsigned __int8 *)(a9 + 6);
    unsigned int v15 = *(unsigned __int16 *)(a9 + 4);
    if (!*(unsigned char *)(a9 + 6))
    {
      unint64_t v17 = (char *)v35;
      __s[0] = 46;
      goto LABEL_20;
    }
    uint64_t v16 = 0;
    unint64_t v17 = __s;
    uint64_t v18 = a9 + 6;
LABEL_6:
    if (v16 + 1 + (unint64_t)v13 <= 0xFE && v13 <= 0x3F)
    {
      unint64_t v19 = v13 + v18 + 1;
      int v20 = (unsigned __int8 *)(v18 + 1);
      while (1)
      {
        unsigned int v22 = *v20++;
        unsigned int v21 = v22;
        if (v22 == 92 || v21 == 46)
        {
          *v17++ = 92;
        }
        else if (v21 <= 0x20)
        {
          *(_WORD *)unint64_t v17 = 12380;
          unsigned int v24 = (205 * v21) >> 11;
          uint64_t v23 = v17 + 3;
          v17[2] = v24 | 0x30;
          LOBYTE(v21) = (v21 - 10 * v24) | 0x30;
          goto LABEL_13;
        }
        uint64_t v23 = v17;
LABEL_13:
        *uint64_t v23 = v21;
        unint64_t v17 = v23 + 1;
        if ((unint64_t)v20 >= v19)
        {
          v23[1] = 0;
          v16 += 1 + *(unsigned __int8 *)(v14 + v16);
          unint64_t v17 = v23 + 2;
          v23[1] = 46;
          uint64_t v18 = v14 + v16;
          unsigned int v13 = *(unsigned __int8 *)(v14 + v16);
          if (!*(unsigned char *)(v14 + v16))
          {
LABEL_20:
            *unint64_t v17 = 0;
            break;
          }
          goto LABEL_6;
        }
      }
    }
    unsigned int v25 = __rev16(v15);
    *(CFAbsoluteTime *)(a11 + 136) = CFAbsoluteTimeGetCurrent() - *(double *)(a11 + 128);
    char v30 = *(int **)(*(void *)(a11 + 16) + 144);
    if (*v30 <= 30)
    {
      if (*v30 != -1) {
        goto LABEL_23;
      }
      if (_LogCategory_Initialize((uint64_t)v30, 0x1Eu))
      {
        char v30 = *(int **)(*(void *)(a11 + 16) + 144);
LABEL_23:
        LogPrintF((uint64_t)v30, (uint64_t)"void _AsyncConnection_SRVCallBack(DNSServiceRef, DNSServiceFlags, uint32_t, DNSServiceErrorType, const char *, uint16_t, uint16_t, uint16_t, const void *, uint32_t, void *)", 0x1Eu, (uint64_t)"SRV resolved %s -> %s port %d, If %u, Flags 0x%X, TTL %u\n", v26, v27, v28, v29, a5);
      }
    }
    size_t v31 = strlen(__s);
    snprintf(&__s[v31], 1073 - v31, "%%%u", a3);
    BOOL v32 = *(int *)(a11 + 56) < 0 || v25 == 0;
    int v33 = v32 ? *(_DWORD *)(a11 + 56) : v25;
    started = _AsyncConnection_StartDNSResolve(*(void *)(a11 + 16), a11, __s, v33);
    if (started) {
LABEL_32:
    }
      _AsyncConnection_ErrorHandler(a11, started);
  }
}

void _AsyncConnection_ErrorHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v3 + 80);
  if (v4)
  {
    size_t v5 = (void *)(v3 + 80);
    if (v4 == a1)
    {
LABEL_6:
      *size_t v5 = *(void *)(a1 + 8);
      if (!*(void *)(v3 + 80)) {
        _AsyncConnection_Complete(v3, 0, 0xFFFFFFFFLL, a2);
      }
      _AsyncConnection_ReleaseOperation((_DWORD *)a1);
    }
    else
    {
      while (1)
      {
        uint64_t v6 = v4;
        uint64_t v4 = *(void *)(v4 + 8);
        if (!v4) {
          break;
        }
        if (v4 == a1)
        {
          size_t v5 = (void *)(v6 + 8);
          goto LABEL_6;
        }
      }
    }
  }
  else
  {
    _AsyncConnection_Complete(v3, 0, 0xFFFFFFFFLL, a2);
  }
}

uint64_t _AsyncConnection_StartConnectDelayed(uint64_t a1, void *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  unsigned int v9 = a6;
  int v10 = a5;
  unsigned int v15 = *(int **)(a1 + 144);
  int v16 = *v15;
  if (!a3)
  {
    if (v16 > 30) {
      goto LABEL_11;
    }
    if (v16 == -1)
    {
      if (!_LogCategory_Initialize((uint64_t)v15, 0x1Eu)) {
        goto LABEL_11;
      }
      unsigned int v15 = *(int **)(a1 + 144);
    }
    LogPrintF((uint64_t)v15, (uint64_t)"OSStatus _AsyncConnection_StartConnectDelayed(AsyncConnectionRef, AsyncConnectionOperationRef, uint32_t, const void *, uint32_t, int, uint64_t)", 0x1Eu, (uint64_t)"Delaying connect to %##a, interface %u by %llu ms\n", a5, a6, a7, a8, a4);
    goto LABEL_11;
  }
  if (v16 > 30) {
    goto LABEL_11;
  }
  if (v16 != -1) {
    goto LABEL_4;
  }
  if (_LogCategory_Initialize((uint64_t)v15, 0x1Eu))
  {
    unsigned int v15 = *(int **)(a1 + 144);
LABEL_4:
    LogPrintF((uint64_t)v15, (uint64_t)"OSStatus _AsyncConnection_StartConnectDelayed(AsyncConnectionRef, AsyncConnectionOperationRef, uint32_t, const void *, uint32_t, int, uint64_t)", 0x1Eu, (uint64_t)"Retrying connect to %##a, interface %u, delay %llu ms, %u of %u\n", a5, a6, a7, a8, a4);
  }
LABEL_11:
  unint64_t v17 = (char *)malloc_type_calloc(1uLL, 0xB8uLL, 0x10E0040D7525972uLL);
  if (!v17) {
    return 4294960568;
  }
  uint64_t v18 = v17;
  ++*(_DWORD *)a1;
  *(_DWORD *)unint64_t v17 = 1;
  *((void *)v17 + 2) = a1;
  int v19 = *(unsigned __int8 *)(a4 + 1);
  if (*(unsigned char *)(a4 + 1))
  {
    if (v19 == 30)
    {
      long long v20 = *(_OWORD *)a4;
      uint64_t v21 = *(void *)(a4 + 16);
      *((_DWORD *)v17 + 12) = *(_DWORD *)(a4 + 24);
      *((void *)v17 + 5) = v21;
    }
    else
    {
      if (v19 != 2) {
        goto LABEL_19;
      }
      long long v20 = *(_OWORD *)a4;
    }
    *(_OWORD *)(v17 + 24) = v20;
  }
  else
  {
    v17[25] = 0;
  }
LABEL_19:
  *((_DWORD *)v17 + 13) = v10;
  if ((v9 & 0x80000000) != 0)
  {
    unsigned int v23 = -v9;
    int v22 = v17[25];
    goto LABEL_25;
  }
  int v22 = v17[25];
  if ((v22 == 30 || v22 == 2) && !*((_WORD *)v17 + 13))
  {
    unsigned int v23 = v9;
LABEL_25:
    if (v22 == 30 || v22 == 2) {
      *((_WORD *)v17 + 13) = bswap32(v23) >> 16;
    }
  }
  *((_DWORD *)v17 + 14) = v9;
  *((_DWORD *)v17 + 15) = -1;
  *((CFAbsoluteTime *)v17 + 20) = CFAbsoluteTimeGetCurrent();
  v18[45] = a3;
  if (a2)
  {
    *((void *)v18 + 15) = a2[15];
    *((void *)v18 + 17) = a2[17];
    *((void *)v18 + 19) = a2[19];
  }
  unsigned int v24 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, *(dispatch_queue_t *)(a1 + 104));
  *((void *)v18 + 9) = v24;
  if (v24)
  {
    dispatch_set_context(v24, v18);
    dispatch_source_set_event_handler_f(*((dispatch_source_t *)v18 + 9), (dispatch_function_t)_AsyncConnection_ConnectDelayedHandler);
    unsigned int v25 = *((void *)v18 + 9);
    dispatch_time_t v26 = dispatch_time(0, a7);
    dispatch_source_set_timer(v25, v26, 0xFFFFFFFFFFFFFFFFLL, a7 >> 2);
    dispatch_resume(*((dispatch_object_t *)v18 + 9));
    uint64_t result = 0;
    *((void *)v18 + 1) = *(void *)(a1 + 80);
    *(void *)(a1 + 80) = v18;
  }
  else
  {
    _AsyncConnection_ReleaseOperation(v18);
    return 4294960596;
  }
  return result;
}

uint64_t _AsyncConnection_StartConnectNow(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5)
{
  int v10 = (char *)malloc_type_calloc(1uLL, 0xB8uLL, 0x10E0040D7525972uLL);
  if (!v10) {
    return 4294960568;
  }
  uint64_t v11 = v10;
  ++*(_DWORD *)a1;
  *(_DWORD *)int v10 = 1;
  *((void *)v10 + 2) = a1;
  uint64_t v12 = (sockaddr *)(v10 + 24);
  int v13 = *(unsigned __int8 *)(a3 + 1);
  if (*(unsigned char *)(a3 + 1))
  {
    if (v13 == 30)
    {
      sockaddr v14 = *(sockaddr *)a3;
      uint64_t v18 = *(void *)(a3 + 16);
      *((_DWORD *)v10 + 12) = *(_DWORD *)(a3 + 24);
      *((void *)v10 + 5) = v18;
LABEL_16:
      sockaddr *v12 = v14;
      if ((a5 & 0x80000000) != 0) {
        goto LABEL_17;
      }
      goto LABEL_8;
    }
    if (v13 == 2)
    {
      sockaddr v14 = *(sockaddr *)a3;
      goto LABEL_16;
    }
  }
  else
  {
    v10[25] = 0;
  }
  if ((a5 & 0x80000000) != 0)
  {
LABEL_17:
    unsigned int v17 = -a5;
    int v15 = v10[25];
    goto LABEL_18;
  }
LABEL_8:
  int v15 = v10[25];
  BOOL v16 = v15 == 30 || v15 == 2;
  if (!v16 || *((_WORD *)v10 + 13)) {
    goto LABEL_24;
  }
  unsigned int v17 = a5;
LABEL_18:
  if (v15 == 30 || v15 == 2) {
    *((_WORD *)v10 + 13) = bswap32(v17) >> 16;
  }
LABEL_24:
  *((_DWORD *)v10 + 14) = a5;
  *((CFAbsoluteTime *)v10 + 20) = CFAbsoluteTimeGetCurrent();
  if (a2)
  {
    *((void *)v11 + 13) = *(void *)(a2 + 104);
    *(void *)(a2 + 104) = 0;
    *((void *)v11 + 15) = *(void *)(a2 + 120);
    *((void *)v11 + 17) = *(void *)(a2 + 136);
    *((void *)v11 + 19) = *(void *)(a2 + 152);
    v11[45] = *(_DWORD *)(a2 + 180);
  }
  int v50 = 0;
  if ((*(unsigned char *)(a1 + 21) & 0x20) != 0)
  {
    v11[15] = -1;
LABEL_37:
    _AsyncConnection_ConnectHandler((uint64_t)v11);
    uint64_t v21 = 0;
    goto LABEL_38;
  }
  int v20 = socket(*((unsigned __int8 *)v11 + 25), 1, 6);
  v11[15] = v20;
  if (v20 < 0)
  {
    if (!*__error())
    {
LABEL_71:
      uint64_t v21 = 4294960596;
      goto LABEL_38;
    }
    uint64_t v21 = *__error();
    if (v21) {
      goto LABEL_38;
    }
    int v20 = v11[15];
  }
  uint64_t v21 = SocketSetNonBlocking(v20, 1);
  if (!v21)
  {
    unsigned int v22 = *(_DWORD *)(a1 + 20);
    if (v22)
    {
      SocketSetP2P(v11[15], 1);
      unsigned int v22 = *(_DWORD *)(a1 + 20);
    }
    if ((v22 & 0x30) != 0)
    {
      unsigned int v49 = (v22 >> 2) & 0xC;
      if (setsockopt(v11[15], 0xFFFF, 4225, &v49, 4u))
      {
        uint64_t v27 = *(int **)(a1 + 144);
        if (*v27 <= 90)
        {
          if (*v27 != -1)
          {
LABEL_35:
            LogPrintF((uint64_t)v27, (uint64_t)"OSStatus _AsyncConnection_StartConnectNow(AsyncConnectionRef, AsyncConnectionOperationRef, const void *, uint32_t, int)", 0x5Au, (uint64_t)"## SO_RESTRICTIONS failed: 0x%X, %#m", v23, v24, v25, v26, v49);
            goto LABEL_44;
          }
          if (_LogCategory_Initialize((uint64_t)v27, 0x5Au))
          {
            uint64_t v27 = *(int **)(a1 + 144);
            goto LABEL_35;
          }
        }
      }
    }
LABEL_44:
    int v29 = v11[15];
    int v48 = 1;
    setsockopt(v29, 0xFFFF, 4130, &v48, 4u);
    if (*(_DWORD *)(a1 + 180)) {
      a4 = *(_DWORD *)(a1 + 180);
    }
    if (a4)
    {
      int v30 = *((unsigned __int8 *)v11 + 25);
      if ((*(unsigned char *)(a1 + 20) & 8) != 0
        || v30 == 2 && *((unsigned __int8 *)v11 + 28) == 169 && *((unsigned __int8 *)v11 + 29) == 254)
      {
        SocketSetBoundInterface(v11[15], v30, a4);
      }
    }
    int v50 = 1;
    setsockopt(v11[15], 6, 1, &v50, 4u);
    SocketSetBufferSize(v11[15], 4097, *(_DWORD *)(a1 + 56));
    SocketSetBufferSize(v11[15], 4098, *(_DWORD *)(a1 + 60));
    uint64_t v35 = *(int **)(a1 + 144);
    if (*v35 <= 50)
    {
      if (*v35 != -1)
      {
LABEL_54:
        LogPrintF((uint64_t)v35, (uint64_t)"OSStatus _AsyncConnection_StartConnectNow(AsyncConnectionRef, AsyncConnectionOperationRef, const void *, uint32_t, int)", 0x32u, (uint64_t)"Connecting to %##a, interface %d\n", v31, v32, v33, v34, (uint64_t)v12);
        goto LABEL_56;
      }
      if (_LogCategory_Initialize((uint64_t)v35, 0x32u))
      {
        uint64_t v35 = *(int **)(a1 + 144);
        goto LABEL_54;
      }
    }
LABEL_56:
    uint64_t v36 = *(void (**)(uint64_t, sockaddr *, void))(a1 + 88);
    if (v36) {
      v36(3, v12, *(void *)(a1 + 96));
    }
    int v37 = *((unsigned __int8 *)v11 + 25);
    if (v37 == 30) {
      int v38 = 28;
    }
    else {
      int v38 = 0;
    }
    if (v37 == 2) {
      socklen_t v39 = 16;
    }
    else {
      socklen_t v39 = v38;
    }
    if (connect(v11[15], v12, v39))
    {
      if (!*__error())
      {
        int v44 = -6700;
        goto LABEL_73;
      }
      int v44 = *__error();
      if (v44)
      {
        if ((v44 - 37) > 0xFFFFFFFD)
        {
          uint64_t v45 = dispatch_source_create(MEMORY[0x1E4F14478], (int)v11[15], 0, *(dispatch_queue_t *)(a1 + 104));
          *((void *)v11 + 10) = v45;
          if (v45)
          {
            dispatch_set_context(v45, v11);
            dispatch_source_set_event_handler_f(*((dispatch_source_t *)v11 + 10), (dispatch_function_t)_AsyncConnection_EventHandler);
            dispatch_source_set_cancel_handler_f(*((dispatch_source_t *)v11 + 10), (dispatch_function_t)_AsyncConnection_CancelHandler);
            dispatch_resume(*((dispatch_object_t *)v11 + 10));
            ++*v11;
            int v46 = dispatch_source_create(MEMORY[0x1E4F144B0], (int)v11[15], 0, *(dispatch_queue_t *)(a1 + 104));
            *((void *)v11 + 11) = v46;
            if (v46)
            {
              dispatch_set_context(v46, v11);
              dispatch_source_set_event_handler_f(*((dispatch_source_t *)v11 + 11), (dispatch_function_t)_AsyncConnection_EventHandler);
              dispatch_source_set_cancel_handler_f(*((dispatch_source_t *)v11 + 11), (dispatch_function_t)_AsyncConnection_CancelHandler);
              dispatch_resume(*((dispatch_object_t *)v11 + 11));
              uint64_t v21 = 0;
              ++*v11;
              *((void *)v11 + 1) = *(void *)(a1 + 80);
              *(void *)(a1 + 80) = v11;
              return v21;
            }
          }
          goto LABEL_71;
        }
LABEL_73:
        int v47 = *(int **)(a1 + 144);
        if (*v47 <= 50)
        {
          if (*v47 == -1)
          {
            if (!_LogCategory_Initialize((uint64_t)v47, 0x32u)) {
              goto LABEL_77;
            }
            int v47 = *(int **)(a1 + 144);
          }
          LogPrintF((uint64_t)v47, (uint64_t)"OSStatus _AsyncConnection_StartConnectNow(AsyncConnectionRef, AsyncConnectionOperationRef, const void *, uint32_t, int)", 0x32u, (uint64_t)"### Connect failed immediate: %##a, %#m\n", v40, v41, v42, v43, (uint64_t)v12);
        }
LABEL_77:
        v11[44] = v44;
        dispatch_async_f(*(dispatch_queue_t *)(a1 + 104), v11, (dispatch_function_t)_AsyncConnection_StartConnectFailed);
        return 0;
      }
    }
    goto LABEL_37;
  }
LABEL_38:
  _AsyncConnection_ReleaseOperation(v11);
  return v21;
}

void _AsyncConnection_ConnectHandler(uint64_t a1)
{
  double Current = CFAbsoluteTimeGetCurrent();
  double v7 = Current - *(double *)(a1 + 160);
  *(double *)(a1 + 168) = v7;
  uint64_t v25 = 4;
  uint64_t v8 = *(unsigned int *)(a1 + 60);
  if ((v8 & 0x80000000) == 0)
  {
    if (!getsockopt(*(_DWORD *)(a1 + 60), 0xFFFF, 4103, (char *)&v25 + 4, (socklen_t *)&v25)) {
      goto LABEL_5;
    }
    if (!*__error())
    {
      uint64_t v9 = 4294960596;
      goto LABEL_15;
    }
    uint64_t v9 = *__error();
    if (!v9)
    {
LABEL_5:
      uint64_t v9 = HIDWORD(v25);
      if (!HIDWORD(v25))
      {
        double v7 = *(double *)(a1 + 168);
        goto LABEL_7;
      }
    }
LABEL_15:
    _AsyncConnection_ErrorHandler(a1, v9);
    return;
  }
LABEL_7:
  int v19 = 0;
  *(_OWORD *)&v18[12] = *(_OWORD *)(a1 + 36);
  *(_OWORD *)uint64_t v18 = *(_OWORD *)(a1 + 24);
  uint64_t v10 = *(void *)(a1 + 136);
  uint64_t v20 = *(void *)(a1 + 120);
  uint64_t v21 = v10;
  uint64_t v22 = *(void *)(a1 + 152);
  double v23 = v7;
  uint64_t v11 = *(void *)(a1 + 16);
  double v24 = Current - *(double *)(v11 + 64);
  uint64_t v12 = *(int **)(v11 + 144);
  int v13 = *v12;
  if ((*(unsigned char *)(v11 + 21) & 0x20) != 0)
  {
    if (v13 <= 50)
    {
      if (v13 == -1)
      {
        if (!_LogCategory_Initialize((uint64_t)v12, 0x32u)) {
          goto LABEL_19;
        }
        uint64_t v12 = *(int **)(*(void *)(a1 + 16) + 144);
      }
      LogPrintF((uint64_t)v12, (uint64_t)"void _AsyncConnection_ConnectHandler(AsyncConnectionOperationRef)", 0x32u, (uint64_t)"NoConnect to %##a (Reach=%.2f ms, SRV=%.2f ms, DNS=%.2f ms, Total=%.2f ms)\n", v2, v3, v4, v5, (uint64_t)v18);
    }
  }
  else if (v13 <= 50)
  {
    if (v13 == -1)
    {
      if (!_LogCategory_Initialize((uint64_t)v12, 0x32u)) {
        goto LABEL_19;
      }
      uint64_t v12 = *(int **)(*(void *)(a1 + 16) + 144);
    }
    LogPrintF((uint64_t)v12, (uint64_t)"void _AsyncConnection_ConnectHandler(AsyncConnectionOperationRef)", 0x32u, (uint64_t)"Connected to %##a (Reach=%.2f ms, SRV=%.2f ms, DNS=%.2f ms, Connect=%.2f ms, Total=%.2f ms)\n", v2, v3, v4, v5, (uint64_t)v18);
  }
LABEL_19:
  uint64_t v14 = *(void *)(a1 + 16);
  int v15 = *(void (**)(uint64_t, unsigned char *, void))(v14 + 88);
  if (v15) {
    v15(4, v18, *(void *)(v14 + 96));
  }
  *(_DWORD *)(a1 + 60) = -1;
  BOOL v16 = *(NSObject **)(a1 + 80);
  if (v16)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 80));
    dispatch_release(v16);
    *(void *)(a1 + 80) = 0;
  }
  unsigned int v17 = *(NSObject **)(a1 + 88);
  if (v17)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 88));
    dispatch_release(v17);
    *(void *)(a1 + 88) = 0;
  }
  _AsyncConnection_Complete(*(void *)(a1 + 16), a1, v8, 0);
}

void _AsyncConnection_EventHandler(uint64_t a1)
{
  *(void *)double v23 = 0;
  uint64_t v2 = *(_DNSServiceRef_t **)(a1 + 64);
  if (v2)
  {
    uint64_t v3 = DNSServiceProcessResult(v2);
    if (!v3) {
      return;
    }
    uint64_t v8 = v3;
    uint64_t v9 = *(int **)(*(void *)(a1 + 16) + 144);
    if (*v9 > 90) {
      goto LABEL_21;
    }
    if (*v9 == -1)
    {
      if (!_LogCategory_Initialize((uint64_t)v9, 0x5Au)) {
        goto LABEL_21;
      }
      uint64_t v9 = *(int **)(*(void *)(a1 + 16) + 144);
    }
    LogPrintF((uint64_t)v9, (uint64_t)"void _AsyncConnection_EventHandler(void *)", 0x5Au, (uint64_t)"DNSServiceProcessResult failed: %#m...Bonjour crashed\n", v4, v5, v6, v7, v8);
LABEL_21:
    _AsyncConnection_ErrorHandler(a1, v8);
    return;
  }
  int v10 = *(unsigned __int8 *)(a1 + 25);
  if (v10 == 30) {
    int v11 = 28;
  }
  else {
    int v11 = 0;
  }
  if (v10 == 2) {
    socklen_t v12 = 16;
  }
  else {
    socklen_t v12 = v11;
  }
  if (!connect(*(_DWORD *)(a1 + 60), (const sockaddr *)(a1 + 24), v12)) {
    goto LABEL_17;
  }
  if (!*__error()) {
    goto LABEL_31;
  }
  uint64_t v17 = *__error();
  switch(v17)
  {
    case 0x38:
LABEL_17:
      _AsyncConnection_ConnectHandler(a1);
      return;
    case 0x16:
      v23[0] = 4;
      v23[1] = 0;
      if (!getsockopt(*(_DWORD *)(a1 + 60), 0xFFFF, 4103, &v23[1], v23))
      {
LABEL_27:
        unsigned int v18 = v23[1];
LABEL_28:
        if (v18) {
          uint64_t v17 = v18;
        }
        else {
          uint64_t v17 = 22;
        }
        break;
      }
      if (*__error())
      {
        unsigned int v18 = *__error();
        if (v18) {
          goto LABEL_28;
        }
        goto LABEL_27;
      }
LABEL_31:
      uint64_t v17 = 4294960596;
      break;
    case 0:
      goto LABEL_17;
  }
  uint64_t v19 = *(void *)(a1 + 16);
  uint64_t v20 = *(int **)(v19 + 144);
  if (*v20 <= 50)
  {
    if (*v20 == -1)
    {
      if (!_LogCategory_Initialize((uint64_t)v20, 0x32u)) {
        goto LABEL_36;
      }
      uint64_t v20 = *(int **)(v19 + 144);
    }
    LogPrintF((uint64_t)v20, (uint64_t)"void _AsyncConnection_EventHandler(void *)", 0x32u, (uint64_t)"### Connect failed: %##a, %#m\n", v13, v14, v15, v16, a1 + 24);
  }
LABEL_36:
  unsigned int v21 = *(_DWORD *)(a1 + 180);
  if (v21 < *(_DWORD *)(v19 + 176))
  {
    unsigned int started = _AsyncConnection_StartConnectDelayed(v19, (void *)a1, v21 + 1, a1 + 24, *(unsigned int *)(a1 + 52), *(unsigned int *)(a1 + 56), 1000000 * *(unsigned int *)(v19 + 172), v16);
    if (started) {
      uint64_t v17 = started;
    }
    else {
      uint64_t v17 = v17;
    }
  }
  _AsyncConnection_ErrorHandler(a1, v17);
}

void _AsyncConnection_StartConnectFailed(_DWORD *a1)
{
  _AsyncConnection_ErrorHandler((uint64_t)a1, a1[44]);
  _AsyncConnection_ReleaseOperation(a1);
}

void _AsyncConnection_ConnectDelayedHandler(uint64_t a1)
{
  uint64_t started = _AsyncConnection_StartConnectNow(*(void *)(a1 + 16), a1, a1 + 24, *(unsigned int *)(a1 + 52), *(unsigned int *)(a1 + 56));
  if (started)
  {
    _AsyncConnection_ErrorHandler(a1, started);
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 16);
    uint64_t v6 = *(void *)(v3 + 80);
    uint64_t v5 = (void *)(v3 + 80);
    uint64_t v4 = v6;
    if (v6)
    {
      if (v4 == a1)
      {
LABEL_10:
        *uint64_t v5 = *(void *)(a1 + 8);
        _AsyncConnection_ReleaseOperation((_DWORD *)a1);
      }
      else
      {
        while (1)
        {
          uint64_t v7 = v4;
          uint64_t v4 = *(void *)(v4 + 8);
          if (!v4) {
            break;
          }
          if (v4 == a1)
          {
            uint64_t v5 = (void *)(v7 + 8);
            goto LABEL_10;
          }
        }
      }
    }
  }
}

void _AsyncConnection_ReachabilityHandler(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10 = *(int **)(*(void *)(a3 + 16) + 144);
  if (*v10 <= 30)
  {
    if (*v10 == -1)
    {
      if (!_LogCategory_Initialize((uint64_t)v10, 0x1Eu)) {
        goto LABEL_5;
      }
      int v10 = *(int **)(*(void *)(a3 + 16) + 144);
    }
    LogPrintF((uint64_t)v10, (uint64_t)"void _AsyncConnection_ReachabilityHandler(SCNetworkReachabilityRef, SCNetworkReachabilityFlags, void *)", 0x1Eu, (uint64_t)"Reachability of %##a, port %d changed: 0x%X\n", a5, a6, a7, a8, a3 + 24);
  }
LABEL_5:
  if ((a2 & 2) != 0)
  {
    *(CFAbsoluteTime *)(a3 + 120) = CFAbsoluteTimeGetCurrent() - *(double *)(a3 + 112);
    if (!_AsyncConnection_StartConnect(*(void *)(a3 + 16), (void *)a3, a3 + 24, *(unsigned int *)(a3 + 52), *(unsigned int *)(a3 + 56), v11, v12, v13))
    {
      uint64_t v14 = *(void *)(a3 + 16);
      uint64_t v17 = *(void *)(v14 + 80);
      uint64_t v16 = (void *)(v14 + 80);
      uint64_t v15 = v17;
      if (v17)
      {
        if (v15 == a3)
        {
LABEL_13:
          *uint64_t v16 = *(void *)(a3 + 8);
        }
        else
        {
          while (1)
          {
            uint64_t v18 = v15;
            uint64_t v15 = *(void *)(v15 + 8);
            if (!v15) {
              break;
            }
            if (v15 == a3)
            {
              uint64_t v16 = (void *)(v18 + 8);
              goto LABEL_13;
            }
          }
        }
      }
      _AsyncConnection_ReleaseOperation((_DWORD *)a3);
    }
  }
}

void _AsyncConnection_WakeResolveCallback(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a4
    && gLogCategory_AsyncCnx <= 90
    && (gLogCategory_AsyncCnx != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_AsyncCnx, 0x5Au)))
  {
    LogPrintF((uint64_t)&gLogCategory_AsyncCnx, (uint64_t)"void _AsyncConnection_WakeResolveCallback(DNSServiceRef, DNSServiceFlags, uint32_t, DNSServiceErrorType, const char *, const char *, uint16_t, uint16_t, const unsigned char *, void *)", 0x5Au, (uint64_t)"### WakeResolve failed: '%s', ifindex %u, %#m\n", a5, a6, a7, a8, a5);
  }
}

void AsyncConnection_Release(dispatch_queue_t *context)
{
}

void _AsyncConnection_UserRelease(void *a1)
{
  _AsyncConnection_Complete((uint64_t)a1, 0, 0xFFFFFFFFLL, 4294960573);
  _AsyncConnection_Release(a1);
}

uint64_t AsyncConnection_ConnectSync(const char *a1, int a2, int a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
  return AsyncConnection_ConnectSyncEx(a1, a2, a3, a4, a5, a6, a7, a8, 0, 0, a9);
}

uint64_t AsyncConnection_ConnectSyncEx(const char *a1, int a2, int a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t), uint64_t a10, _DWORD *a11)
{
  dispatch_semaphore_t dsema = 0;
  if (!*a1) {
    return 4294960591;
  }
  uint64_t v36 = 0;
  uint64_t v19 = dispatch_queue_create(a1, 0);
  dispatch_object_t object = v19;
  if (!v19)
  {
    uint64_t v21 = 4294960596;
LABEL_22:
    if (dsema) {
      dispatch_release(dsema);
    }
    goto LABEL_24;
  }
  uint64_t v20 = v19;
  dispatch_semaphore_t dsema = dispatch_semaphore_create(0);
  if (dsema)
  {
    uint64_t v33 = 0;
    uint64_t v36 = -6700;
    uint64_t v54 = 0;
    long long v53 = 0u;
    long long v52 = 0u;
    uint64_t v49 = 0;
    long long v51 = 0u;
    uint64_t v50 = 152;
    int v37 = a1;
    int v38 = a2;
    int v39 = a3;
    uint64_t v40 = a4;
    int v41 = a5;
    int v42 = a6;
    uint64_t v43 = a7;
    uint64_t v44 = a8;
    uint64_t v45 = _AsyncConnection_ConnectSyncHandler;
    p_dispatch_object_t object = &object;
    int v47 = v20;
    uint64_t v48 = 0;
    uint64_t v21 = AsyncConnection_ConnectEx(&v33, (uint64_t)&v37);
    if (!v21)
    {
      if (a9)
      {
        char v22 = 1;
        uint64_t v23 = v33;
        while (1)
        {
          while (1)
          {
            char v24 = v22;
            dispatch_time_t v25 = dispatch_time(0, 250000000);
            if (!dispatch_semaphore_wait(dsema, v25))
            {
              if ((v24 & 1) == 0) {
                goto LABEL_20;
              }
              goto LABEL_19;
            }
            char v22 = 0;
            if (v24)
            {
              int v26 = a9(a10);
              char v22 = 1;
              if (v26) {
                break;
              }
            }
          }
          uint64_t v31 = *(int **)(v23 + 144);
          if (*v31 <= 50)
          {
            if (*v31 != -1) {
              goto LABEL_12;
            }
            if (_LogCategory_Initialize((uint64_t)v31, 0x32u)) {
              break;
            }
          }
LABEL_14:
          dispatch_async_f(*(dispatch_queue_t *)(v23 + 104), (void *)v23, (dispatch_function_t)_AsyncConnection_UserRelease);
          char v22 = 0;
        }
        uint64_t v31 = *(int **)(v23 + 144);
LABEL_12:
        LogPrintF((uint64_t)v31, (uint64_t)"OSStatus AsyncConnection_ConnectSyncEx(const char *, int, AsyncConnectionFlags, uint64_t, int, int, AsyncConnectionProgressFunc, void *, AsyncConnectionWaitFunc, void *, SocketRef *)", 0x32u, (uint64_t)"### Canceling connect to %s\n", v27, v28, v29, v30, (uint64_t)a1);
        goto LABEL_14;
      }
      dispatch_semaphore_wait(dsema, 0xFFFFFFFFFFFFFFFFLL);
      uint64_t v23 = v33;
LABEL_19:
      dispatch_async_f(*(dispatch_queue_t *)(v23 + 104), (void *)v23, (dispatch_function_t)_AsyncConnection_UserRelease);
LABEL_20:
      uint64_t v21 = v36;
      if (!v36) {
        *a11 = HIDWORD(v36);
      }
    }
    goto LABEL_22;
  }
  uint64_t v21 = 4294960596;
LABEL_24:
  if (object) {
    dispatch_release(object);
  }
  return v21;
}

intptr_t _AsyncConnection_ConnectSyncHandler(int a1, int a2, uint64_t a3)
{
  *(_DWORD *)(a3 + 16) = a2;
  if (!a2) {
    *(_DWORD *)(a3 + 20) = a1;
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a3 + 8));
}

uint64_t SineTable_Create(void *a1, int a2, int a3)
{
  uint64_t v6 = malloc_type_malloc(2 * a2 + 12, 0xBB4DB1F7uLL);
  if (!v6) {
    return 4294960568;
  }
  uint64_t v7 = v6;
  _DWORD *v6 = a2;
  v6[1] = a3;
  v6[2] = 0;
  if (a2 >= 1)
  {
    unint64_t v8 = 0;
    double v16 = 6.28318531 / (double)a2;
    uint64x2_t v15 = (uint64x2_t)vdupq_n_s64((unint64_t)a2 - 1);
    uint64x2_t v9 = (uint64x2_t)xmmword_18E416E30;
    int64x2_t v14 = vdupq_n_s64(2uLL);
    uint64_t v10 = (a2 + 1) & 0x1FFFFFFFELL;
    do
    {
      int64x2_t v20 = (int64x2_t)v9;
      int32x2_t v19 = vmovn_s64((int64x2_t)vcgeq_u64(v15, v9));
      v11.i64[0] = (int)v8;
      v11.i64[1] = (int)v8 + 1;
      float64x2_t __x = vmulq_n_f64(vcvtq_f64_s64(v11), v16);
      long double v18 = sin(__x.f64[1]);
      v12.f64[0] = sin(__x.f64[0]);
      v12.f64[1] = v18;
      if (v19.i8[0]) {
        LOWORD(v7[v8 / 2 + 3]) = (int)(32767.0 * v12.f64[0]);
      }
      if (v19.i8[4]) {
        HIWORD(v7[v8 / 2 + 3]) = (int)vmuld_lane_f64(32767.0, v12, 1);
      }
      v8 += 2;
      uint64x2_t v9 = (uint64x2_t)vaddq_s64(v20, v14);
    }
    while (v10 != v8);
  }
  uint64_t result = 0;
  *a1 = v7;
  return result;
}

_DWORD *SineTable_GetSamples(_DWORD *result, int a2, int a3, _WORD *a4)
{
  int v4 = result[2];
  if (a3 >= 1)
  {
    int v5 = *result;
    int v6 = result[1];
    uint64_t v7 = &a4[2 * a3];
    do
    {
      __int16 v8 = *((_WORD *)result + v4 + 6);
      int v9 = v4 + v6;
      if (v9 <= v5) {
        int v10 = 0;
      }
      else {
        int v10 = v5;
      }
      int v4 = v9 - v10;
      if (a2 >= 1) {
        __int16 v11 = 0;
      }
      else {
        __int16 v11 = v8;
      }
      if (a2 < 0) {
        __int16 v8 = 0;
      }
      *a4 = v11;
      a4[1] = v8;
      a4 += 2;
    }
    while (a4 < v7);
  }
  result[2] = v4;
  return result;
}

uint64_t AudioStreamGetTypeID()
{
  if (gAudioStreamInitOnce != -1) {
    dispatch_once_f(&gAudioStreamInitOnce, 0, (dispatch_function_t)_AudioStreamGetTypeID);
  }
  return gAudioStreamTypeID;
}

uint64_t _AudioStreamGetTypeID()
{
  uint64_t result = _CFRuntimeRegisterClass();
  gAudioStreamCFTypeID TypeID = result;
  return result;
}

void _AudioStreamFinalize(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 176);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 176) = 0;
  }
}

uint64_t AudioStreamCreate(uint64_t *a1)
{
  if (gAudioStreamInitOnce != -1) {
    dispatch_once_f(&gAudioStreamInitOnce, 0, (dispatch_function_t)_AudioStreamGetTypeID);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance) {
    return 4294960568;
  }
  uint64_t v3 = Instance;
  uint64_t result = 0;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_DWORD *)(v3 + 132) = 1065353216;
  *(void *)(v3 + 224) = 0;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *a1 = v3;
  return result;
}

uint64_t AudioStreamSetInputCallback(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 144) = a2;
  *(void *)(result + 152) = a3;
  return result;
}

uint64_t AudioStreamSetOutputCallback(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 160) = a2;
  *(void *)(result + 168) = a3;
  return result;
}

CFNumberRef _AudioStreamCopyProperty(uint64_t a1, CFTypeRef cf1, int *a3)
{
  if (CFEqual(cf1, @"audioType"))
  {
    CFNumberRef v6 = *(CFNumberRef *)(a1 + 176);
    if (v6)
    {
LABEL_3:
      CFRetain(v6);
LABEL_7:
      int v8 = 0;
      goto LABEL_8;
    }
    int v8 = -6727;
    goto LABEL_8;
  }
  if (CFEqual(cf1, @"format"))
  {
    CFDataRef Int64 = CFDataCreate(0, (const UInt8 *)(a1 + 184), 40);
LABEL_6:
    CFNumberRef v6 = Int64;
    if (Int64) {
      goto LABEL_7;
    }
    int v8 = -6728;
    goto LABEL_8;
  }
  if (CFEqual(cf1, @"input"))
  {
    int v10 = (CFNumberRef *)MEMORY[0x1E4F1CFD0];
    int v11 = *(unsigned __int8 *)(a1 + 97);
LABEL_13:
    if (!v11) {
      int v10 = (CFNumberRef *)MEMORY[0x1E4F1CFC8];
    }
    CFNumberRef v6 = *v10;
    goto LABEL_3;
  }
  if (CFEqual(cf1, @"latency"))
  {
    uint64_t v12 = *(void *)(a1 + 24);
    if (!v12)
    {
      CFNumberRef v6 = 0;
      int v8 = -6745;
      goto LABEL_8;
    }
    uint64_t v38 = 0;
    valuePtr[0] = 0;
    valuePtr[1] = 0;
    int v37 = 0;
    memset(size, 0, sizeof(size));
    double v33 = 0.0;
    double v34 = 0.0;
    HIDWORD(v32) = 0;
    unsigned int v13 = 0;
    if (!((unsigned int (*)(uint64_t, uint64_t))softLinkAUGraphGetNodeCount[0])(v12, (uint64_t)&v38 + 4)
      && HIDWORD(v38))
    {
      uint64_t v14 = 0;
      unsigned int v13 = 0;
      p_vtable = &OBJC_METACLASS___CUBluetoothDevice.vtable;
      double v16 = &OBJC_METACLASS___CUBluetoothDevice.vtable;
      do
      {
        if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t))softLinkAUGraphGetIndNode[0])(*(void *)(a1 + 24), v14, (uint64_t)&v38)&& !((unsigned int (*)(uint64_t, uint64_t, uint64_t, uint64_t))p_vtable[276])(*(void *)(a1 + 24), v38, (uint64_t)valuePtr, (uint64_t)&size[1]))
        {
          size[0] = 8;
          if (((unsigned int (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v16[286])(*(uint64_t *)&size[1], 2, 0, 0, (uint64_t)&v34, (uint64_t)size)|| v34 <= 0.0)
          {
            double v34 = 44100.0;
          }
          size[0] = 8;
          int v17 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v16[286])(*(uint64_t *)&size[1], 12, 0, 0, (uint64_t)&v33, (uint64_t)size);
          unsigned int v18 = (v33 * 1000000.0);
          if (v17) {
            unsigned int v18 = 0;
          }
          v13 += v18;
          if (LODWORD(valuePtr[0]) == 1635086197)
          {
            HIDWORD(v32) = 0;
            size[0] = 4;
            if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v16[286])(*(uint64_t *)&size[1], 1819569763, 2, 0, (uint64_t)&v32 + 4, (uint64_t)size))
            {
              LODWORD(v19) = HIDWORD(v32);
              v13 += ((double)v19 * 1000000.0 / v34);
            }
            HIDWORD(v32) = 0;
            size[0] = 4;
            if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v16[286])(*(uint64_t *)&size[1], 1935763060, 2, 0, (uint64_t)&v32 + 4, (uint64_t)size))
            {
              LODWORD(v20) = HIDWORD(v32);
              v13 += ((double)v20 * 1000000.0 / v34);
            }
            size[0] = 0;
            unsigned int v21 = 0;
            if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAudioUnitGetPropertyInfo[0])(*(uint64_t *)&size[1], 1937009955, 2, 0, (uint64_t)size, 0)&& size[0] >= 4u)
            {
              char v22 = (unsigned int *)malloc_type_malloc(size[0], 0x267E9B6FuLL);
              if (v22)
              {
                uint64_t v23 = v22;
                unsigned int v21 = 0;
                if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAudioUnitGetProperty[0])(*(uint64_t *)&size[1], 1937009955, 2, 0, (uint64_t)v22, (uint64_t)size)&& size[0] >= 4u)
                {
                  unsigned int v21 = 0;
                  unint64_t v24 = (unint64_t)size[0] >> 2;
                  dispatch_time_t v25 = v23;
                  do
                  {
                    uint64_t v31 = *(void *)"cntlbolg";
                    uint64_t v32 = 0;
                    size[0] = 4;
                    unsigned int v26 = *v25++;
                    if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAudioObjectGetPropertyData[0])(v26, (uint64_t)&v31, 0, 0, (uint64_t)size, (uint64_t)&v32 + 4))
                    {
                      LODWORD(v27) = HIDWORD(v32);
                      if (v21 <= ((double)v27 * 1000000.0 / v34)) {
                        unsigned int v21 = ((double)v27 * 1000000.0 / v34);
                      }
                    }
                    --v24;
                  }
                  while (v24);
                }
                free(v23);
                p_vtable = (void **)(&OBJC_METACLASS___CUBluetoothDevice + 24);
              }
              else
              {
                unsigned int v21 = 0;
              }
              double v16 = (void **)(&OBJC_METACLASS___CUBluetoothDevice + 24);
            }
            v13 += v21;
          }
        }
        uint64_t v14 = (v14 + 1);
      }
      while (v14 < HIDWORD(v38));
    }
    uint64_t v28 = v13;
    goto LABEL_51;
  }
  if (CFEqual(cf1, @"preferredLatency"))
  {
    uint64_t v28 = *(unsigned int *)(a1 + 224);
LABEL_51:
    CFDataRef Int64 = CFNumberCreateInt64(v28);
    goto LABEL_6;
  }
  if (CFEqual(cf1, @"varispeedEnabled"))
  {
    int v10 = (CFNumberRef *)MEMORY[0x1E4F1CFD0];
    int v11 = *(unsigned __int8 *)(a1 + 64);
    goto LABEL_13;
  }
  if (CFEqual(cf1, @"volume"))
  {
    LODWORD(v31) = 1065353216;
    uint64_t v29 = *(void *)(a1 + 56);
    if (v29)
    {
      int v8 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAudioUnitGetParameter[0])(v29, 0, 2, 0, (uint64_t)&v31);
      if (v8)
      {
        CFNumberRef v6 = 0;
        goto LABEL_8;
      }
      double v30 = *(float *)&v31;
    }
    else
    {
      double v30 = 1.0;
    }
    *(double *)char valuePtr = v30;
    CFNumberRef v6 = CFNumberCreate(0, kCFNumberDoubleType, valuePtr);
    if (v6) {
      goto LABEL_7;
    }
    int v8 = -6700;
  }
  else
  {
    CFNumberRef v6 = 0;
    int v8 = -6714;
  }
LABEL_8:
  if (a3) {
    *a3 = v8;
  }
  return v6;
}

uint64_t initAudioUnitGetParameter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (AudioToolboxLibrary_sOnce != -1) {
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  }
  int v10 = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib, "AudioUnitGetParameter");
  softLinkAudioUnitGetParameter[0] = v10;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v10)(a1, a2, a3, a4, a5);
}

void *__AudioToolboxLibrary_block_invoke()
{
  uint64_t result = dlopen("/System/Library/Frameworks/AudioToolbox.framework/AudioToolbox", 2);
  AudioToolboxLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t initAudioObjectGetPropertyData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (CoreAudioLibrary_sOnce != -1) {
    dispatch_once(&CoreAudioLibrary_sOnce, &__block_literal_global_47);
  }
  uint64_t v12 = (uint64_t (*)())dlsym((void *)CoreAudioLibrary_sLib, "AudioObjectGetPropertyData");
  softLinkAudioObjectGetPropertyData[0] = v12;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v12)(a1, a2, a3, a4, a5, a6);
}

void *__CoreAudioLibrary_block_invoke()
{
  uint64_t result = dlopen("/System/Library/Frameworks/CoreAudio.framework/CoreAudio", 2);
  CoreAudioLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t initAudioUnitGetPropertyInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (AudioToolboxLibrary_sOnce != -1) {
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  }
  uint64_t v12 = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib, "AudioUnitGetPropertyInfo");
  softLinkAudioUnitGetPropertyInfo[0] = v12;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v12)(a1, a2, a3, a4, a5, a6);
}

uint64_t initAudioUnitGetProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (AudioToolboxLibrary_sOnce != -1) {
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  }
  uint64_t v12 = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib, "AudioUnitGetProperty");
  softLinkAudioUnitGetProperty[0] = v12;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v12)(a1, a2, a3, a4, a5, a6);
}

uint64_t initAUGraphNodeInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (AudioToolboxLibrary_sOnce != -1) {
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  }
  int v8 = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib, "AUGraphNodeInfo");
  softLinkAUGraphNodeInfo[0] = v8;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v8)(a1, a2, a3, a4);
}

uint64_t initAUGraphGetIndNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (AudioToolboxLibrary_sOnce != -1) {
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  }
  CFNumberRef v6 = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib, "AUGraphGetIndNode");
  softLinkAUGraphGetIndNode[0] = v6;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(a1, a2, a3);
}

uint64_t initAUGraphGetNodeCount(uint64_t a1, uint64_t a2)
{
  if (AudioToolboxLibrary_sOnce != -1) {
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  }
  int v4 = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib, "AUGraphGetNodeCount");
  softLinkAUGraphGetNodeCount[0] = v4;
  return ((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2);
}

uint64_t _AudioStreamSetProperty(uint64_t a1, CFTypeRef cf1, __CFString *a3)
{
  if (CFEqual(cf1, @"audioType"))
  {
    if (!a3) {
      return 4294960540;
    }
    CFTypeID v6 = CFGetTypeID(a3);
    if (v6 != CFStringGetTypeID()) {
      return 4294960540;
    }
    uint64_t v7 = *(const void **)(a1 + 176);
    CFRetain(a3);
    *(void *)(a1 + 176) = a3;
    if (v7) {
      CFRelease(v7);
    }
    return 0;
  }
  unsigned int v15 = 0;
  if (!CFEqual(cf1, @"format"))
  {
    if (CFEqual(cf1, @"input"))
    {
      *(unsigned char *)(a1 + 97) = CFGetInt64(a3, 0) != 0;
      return 0;
    }
    if (CFEqual(cf1, @"preferredLatency"))
    {
      unsigned int v16 = 0;
      unint64_t v9 = CFGetInt64(a3, (int *)&v16);
      uint64_t result = v16;
      if (!v16)
      {
        if (!HIDWORD(v9))
        {
          *(_DWORD *)(a1 + 224) = v9;
          return 0;
        }
        uint64_t result = 4294960586;
      }
      *(_DWORD *)(a1 + 224) = v9;
      return result;
    }
    if (CFEqual(cf1, @"threadName") || CFEqual(cf1, @"threadPriority")) {
      return 0;
    }
    if (CFEqual(cf1, @"varispeedEnabled"))
    {
      *(unsigned char *)(a1 + 64) = CFGetInt64(a3, 0) != 0;
      return 0;
    }
    if (CFEqual(cf1, @"varispeedRate"))
    {
      if (!*(void *)(a1 + 72)) {
        return 4294960551;
      }
      double v10 = CFGetDouble(a3, &v15);
      uint64_t result = v15;
      if (v15) {
        return result;
      }
      float v11 = v10 / *(double *)(a1 + 184);
      uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))softLinkAudioUnitSetParameter[0])(*(void *)(a1 + 72), 0, 0, 0, 0, v11);
    }
    else
    {
      if (CFEqual(cf1, @"voice"))
      {
        *(unsigned char *)(a1 + 80) = CFGetInt64(a3, 0) != 0;
        return 0;
      }
      if (!CFEqual(cf1, @"volume")) {
        return 4294960582;
      }
      double v12 = CFGetDouble(a3, &v15);
      uint64_t result = v15;
      if (v15) {
        return result;
      }
      float v13 = v12;
      *(float *)(a1 + 132) = v13;
      uint64_t v14 = *(void *)(a1 + 56);
      if (!v14) {
        return 0;
      }
      uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))softLinkAudioUnitSetParameter[0])(v14, 0, 2, 0, 0, v13);
    }
    if (result) {
      return result;
    }
    return 0;
  }
  CFGetData(a3, (const char *)(a1 + 184), 0x28uLL, 0, (int *)&v15);
  uint64_t result = v15;
  if (!v15) {
    return 0;
  }
  return result;
}

uint64_t initAudioUnitSetParameter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float a6)
{
  if (AudioToolboxLibrary_sOnce != -1) {
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  }
  double v12 = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib, "AudioUnitSetParameter");
  softLinkAudioUnitSetParameter[0] = v12;
  v13.n128_f32[0] = a6;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))v12)(a1, a2, a3, a4, a5, v13);
}

uint64_t AudioStreamRampVolume(uint64_t a1, NSObject *a2, double a3, double a4)
{
  int v8 = (NSObject **)(a1 + 136);
  unint64_t v9 = *(NSObject **)(a1 + 136);
  if (v9)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 136));
    dispatch_release(v9);
    *int v8 = 0;
  }
  uint64_t v10 = *(void *)(a1 + 56);
  float v11 = a3;
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 0x40000000;
  v13[2] = __AudioStreamRampVolume_block_invoke;
  v13[3] = &__block_descriptor_tmp;
  v13[4] = a1;
  CoreAudioRampParameterStart(v8, v10, 0, 1, 0, 16, a2, (uint64_t)v13, v11, a4);
  return 0;
}

void __AudioStreamRampVolume_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 136);
  if (v2)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(v1 + 136));
    dispatch_release(v2);
    *(void *)(*(void *)(a1 + 32) + 136) = 0;
  }
}

uint64_t AudioStreamPrepare(uint64_t a1)
{
  long long v28 = 0uLL;
  int v29 = 0;
  unsigned int v26 = 0;
  uint64_t v27 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  memset(v23, 0, sizeof(v23));
  uint64_t v2 = (uint64_t *)(a1 + 24);
  uint64_t v7 = ((uint64_t (*)(uint64_t))softLinkNewAUGraph[0])(a1 + 24);
  if (v7) {
    goto LABEL_15;
  }
  uint64_t v7 = ((uint64_t (*)(uint64_t))softLinkAUGraphOpen[0])(*v2);
  if (v7) {
    goto LABEL_15;
  }
  *(unsigned char *)(a1 + 32) = 1;
  int v8 = *(unsigned char *)(a1 + 80) ? 1987078511 : 1919512419;
  LODWORD(v28) = 1635086197;
  DWORD1(v28) = v8;
  *((void *)&v28 + 1) = 1634758764;
  int v29 = 0;
  uint64_t v7 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkAUGraphAddNode[0])(*(void *)(a1 + 24), (uint64_t)&v28, a1 + 84);
  if (v7) {
    goto LABEL_15;
  }
  uint64_t v7 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkAUGraphNodeInfo[0])(*(void *)(a1 + 24), *(unsigned int *)(a1 + 84), 0, a1 + 88);
  if (v7) {
    goto LABEL_15;
  }
  long long v28 = xmmword_18E416E40;
  int v29 = 0;
  unint64_t v9 = (unsigned int *)(a1 + 48);
  uint64_t v7 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkAUGraphAddNode[0])(*(void *)(a1 + 24), (uint64_t)&v28, a1 + 48);
  if (v7) {
    goto LABEL_15;
  }
  uint64_t v10 = (uint64_t *)(a1 + 56);
  uint64_t v7 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkAUGraphNodeInfo[0])(*(void *)(a1 + 24), *(unsigned int *)(a1 + 48), 0, a1 + 56);
  if (v7) {
    goto LABEL_15;
  }
  HIDWORD(v25) = 1;
  uint64_t v7 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAudioUnitSetProperty[0])(*v10, 11, 1, 0, (uint64_t)&v25 + 4, 4);
  if (v7) {
    goto LABEL_15;
  }
  *(void *)&v23[0] = 0x40E7700000000000;
  *(_OWORD *)((char *)v23 + 8) = xmmword_18E416E50;
  int v11 = *(_DWORD *)(a1 + 212);
  DWORD2(v23[1]) = 4;
  HIDWORD(v23[1]) = v11;
  uint64_t v24 = 32;
  uint64_t v7 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAudioUnitSetProperty[0])(*(void *)(a1 + 56), 8, 2, 0, (uint64_t)v23, 40);
  if (v7) {
    goto LABEL_15;
  }
  uint64_t v7 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))softLinkAudioUnitSetParameter[0])(*v10, 0, 1, 0, 0, 1.0);
  if (v7) {
    goto LABEL_15;
  }
  uint64_t v7 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))softLinkAudioUnitSetParameter[0])(*(void *)(a1 + 56), 0, 2, 0, 0, *(float *)(a1 + 132));
  if (v7) {
    goto LABEL_15;
  }
  uint64_t v7 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAUGraphConnectNodeInput[0])(*v2, *v9, 0, *(unsigned int *)(a1 + 84), 0);
  if (v7) {
    goto LABEL_15;
  }
  if (*(unsigned char *)(a1 + 64))
  {
    long long v28 = xmmword_18E416E60;
    int v29 = 0;
    uint64_t v7 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkAUGraphAddNode[0])(*(void *)(a1 + 24), (uint64_t)&v28, a1 + 68);
    if (v7) {
      goto LABEL_15;
    }
    uint64_t v7 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkAUGraphNodeInfo[0])(*(void *)(a1 + 24), *(unsigned int *)(a1 + 68), 0, a1 + 72);
    if (v7) {
      goto LABEL_15;
    }
    *(void *)&v23[0] = 0x40E7700000000000;
    *(_OWORD *)((char *)v23 + 8) = xmmword_18E416E50;
    int v13 = *(_DWORD *)(a1 + 212);
    DWORD2(v23[1]) = 4;
    HIDWORD(v23[1]) = v13;
    uint64_t v24 = 32;
    uint64_t v7 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAudioUnitSetProperty[0])(*(void *)(a1 + 72), 8, 2, 0, (uint64_t)v23, 40);
    if (v7) {
      goto LABEL_15;
    }
    HIDWORD(v25) = 127;
    uint64_t v7 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAudioUnitSetProperty[0])(*(void *)(a1 + 72), 26, 0, 0, (uint64_t)&v25 + 4, 4);
    if (v7) {
      goto LABEL_15;
    }
    uint64_t v7 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAUGraphConnectNodeInput[0])(*v2, *(unsigned int *)(a1 + 68), 0, *v9, 0);
    if (v7) {
      goto LABEL_15;
    }
  }
  long long v28 = xmmword_18E416E70;
  int v29 = 0;
  uint64_t v7 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkAUGraphAddNode[0])(*(void *)(a1 + 24), (uint64_t)&v28, a1 + 36);
  if (v7) {
    goto LABEL_15;
  }
  uint64_t v14 = (uint64_t *)(a1 + 40);
  uint64_t v7 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkAUGraphNodeInfo[0])(*(void *)(a1 + 24), *(unsigned int *)(a1 + 36), 0, a1 + 40);
  if (v7) {
    goto LABEL_15;
  }
  uint64_t v7 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAudioUnitSetProperty[0])(*v14, 8, 1, 0, a1 + 184, 40);
  if (v7) {
    goto LABEL_15;
  }
  *(void *)&v23[0] = 0x40E7700000000000;
  *(_OWORD *)((char *)v23 + 8) = xmmword_18E416E50;
  int v15 = *(_DWORD *)(a1 + 212);
  DWORD2(v23[1]) = 4;
  HIDWORD(v23[1]) = v15;
  uint64_t v24 = 32;
  if (*(unsigned char *)(a1 + 64)) {
    *(void *)&v23[0] = *(void *)(a1 + 184);
  }
  uint64_t v7 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAudioUnitSetProperty[0])(*v14, 8, 2, 0, (uint64_t)v23, 40);
  if (v7) {
    goto LABEL_15;
  }
  unsigned int v26 = _AudioStreamOutputCallBack;
  uint64_t v27 = a1;
  uint64_t v7 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkAUGraphSetNodeInputCallback[0])(*(void *)(a1 + 24), *(unsigned int *)(a1 + 36), 0, (uint64_t)&v26);
  if (v7) {
    goto LABEL_15;
  }
  uint64_t v16 = *(unsigned int *)(a1 + 68);
  if (!v16) {
    uint64_t v16 = *v9;
  }
  uint64_t v7 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAUGraphConnectNodeInput[0])(*(void *)(a1 + 24), *(unsigned int *)(a1 + 36), 0, v16, 0);
  if (v7) {
    goto LABEL_15;
  }
  if (*(unsigned char *)(a1 + 97))
  {
    uint64_t v17 = *(void *)(a1 + 88);
    *(void *)(a1 + 104) = v17;
    HIDWORD(v25) = 1;
    uint64_t v7 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAudioUnitSetProperty[0])(v17, 2003, 1, 1, (uint64_t)&v25 + 4, 4);
    if (v7) {
      goto LABEL_15;
    }
    uint64_t v7 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAudioUnitSetProperty[0])(*(void *)(a1 + 104), 8, 2, 1, a1 + 184, 40);
    if (v7) {
      goto LABEL_15;
    }
    uint64_t v25 = 4;
    int v18 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAudioUnitGetProperty[0])(*(void *)(a1 + 104), 14, 0, 0, (uint64_t)&v25 + 4, (uint64_t)&v25);
    int v19 = HIDWORD(v25);
    if (HIDWORD(v25) < 0x1000 || v18 != 0) {
      int v19 = 4096;
    }
    size_t v21 = (v19 * DWORD2(v23[1]));
    HIDWORD(v25) = v19 * DWORD2(v23[1]);
    *(void *)(a1 + 120) = v21;
    char v22 = malloc_type_malloc(v21, 0x2853C0C0uLL);
    *(void *)(a1 + 112) = v22;
    if (!v22)
    {
      uint64_t v7 = 4294960568;
      goto LABEL_15;
    }
    unsigned int v26 = _AudioStreamInputCallBack;
    uint64_t v27 = a1;
    uint64_t v7 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAudioUnitSetProperty[0])(*(void *)(a1 + 104), 2005, 0, 0, (uint64_t)&v26, 16);
    if (v7) {
      goto LABEL_15;
    }
  }
  uint64_t v7 = ((uint64_t (*)(uint64_t))softLinkAUGraphInitialize[0])(*v2);
  if (!v7)
  {
    *(unsigned char *)(a1 + 33) = 1;
    return v7;
  }
LABEL_15:
  if (gLogCategory_AudioUtils <= 50
    && (gLogCategory_AudioUtils != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_AudioUtils, 0x32u)))
  {
    LogPrintF((uint64_t)&gLogCategory_AudioUtils, (uint64_t)"OSStatus AudioStreamPrepare(AudioStreamRef)", 0x32u, (uint64_t)"### Audio stream prepare failed: %#m\n", v3, v4, v5, v6, v7);
  }
  AudioStreamStop(a1);
  return v7;
}

void AudioStreamStop(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 136);
  if (v2)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 136));
    dispatch_release(v2);
    *(void *)(a1 + 136) = 0;
  }
  if (*(unsigned char *)(a1 + 34))
  {
    ((void (*)(uint64_t))softLinkAUGraphStop[0])(*(void *)(a1 + 24));
    *(unsigned char *)(a1 + 34) = 0;
  }
  if (*(unsigned char *)(a1 + 33))
  {
    ((void (*)(uint64_t))softLinkAUGraphUninitialize[0])(*(void *)(a1 + 24));
    *(unsigned char *)(a1 + 33) = 0;
  }
  if (*(unsigned char *)(a1 + 32))
  {
    ((void (*)(uint64_t))softLinkAUGraphClose[0])(*(void *)(a1 + 24));
    *(unsigned char *)(a1 + 32) = 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3)
  {
    ((void (*)(uint64_t))softLinkDisposeAUGraph[0])(v3);
    *(void *)(a1 + 24) = 0;
  }
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 68) = 0;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 84) = 0;
  *(void *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 44) = 0;
  *(void *)(a1 + 36) = 0;
  uint64_t v4 = *(void **)(a1 + 112);
  if (v4)
  {
    free(v4);
    *(void *)(a1 + 112) = 0;
  }
  *(unsigned char *)(a1 + 128) = 0;
}

uint64_t initDisposeAUGraph(uint64_t a1)
{
  if (AudioToolboxLibrary_sOnce != -1) {
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  }
  uint64_t v2 = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib, "DisposeAUGraph");
  softLinkDisposeAUGraph[0] = v2;
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

uint64_t initAUGraphClose(uint64_t a1)
{
  if (AudioToolboxLibrary_sOnce != -1) {
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  }
  uint64_t v2 = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib, "AUGraphClose");
  softLinkAUGraphClose[0] = v2;
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

uint64_t initAUGraphUninitialize(uint64_t a1)
{
  if (AudioToolboxLibrary_sOnce != -1) {
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  }
  uint64_t v2 = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib, "AUGraphUninitialize");
  softLinkAUGraphUninitialize[0] = v2;
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

uint64_t initAUGraphStop(uint64_t a1)
{
  if (AudioToolboxLibrary_sOnce != -1) {
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  }
  uint64_t v2 = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib, "AUGraphStop");
  softLinkAUGraphStop[0] = v2;
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

uint64_t initAUGraphInitialize(uint64_t a1)
{
  if (AudioToolboxLibrary_sOnce != -1) {
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  }
  uint64_t v2 = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib, "AUGraphInitialize");
  softLinkAUGraphInitialize[0] = v2;
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

uint64_t _AudioStreamInputCallBack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = (*(_DWORD *)(a1 + 208) * a5);
  if (*(void *)(a1 + 120) < v5) {
    return 4294960545;
  }
  uint64_t v12 = 1;
  int v13 = *(_DWORD *)(a1 + 212);
  int v14 = v5;
  uint64_t v9 = a1 + 104;
  uint64_t v8 = *(void *)(a1 + 104);
  uint64_t v15 = *(void *)(v9 + 8);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAudioUnitRender[0])(v8, a2, a3, a4, a5, (uint64_t)&v12);
  if (!result)
  {
    long double v11 = fmod(*(long double *)a3, 4294967300.0);
    (*(void (**)(void, void, void, unint64_t, void))(a1 + 144))(v11, *(void *)(a3 + 8), *(void *)(a1 + 112), v5, *(void *)(a1 + 152));
    return 0;
  }
  return result;
}

uint64_t initAudioUnitRender(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (AudioToolboxLibrary_sOnce != -1) {
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  }
  uint64_t v12 = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib, "AudioUnitRender");
  softLinkAudioUnitRender[0] = v12;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v12)(a1, a2, a3, a4, a5, a6);
}

uint64_t initAUGraphSetNodeInputCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (AudioToolboxLibrary_sOnce != -1) {
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  }
  uint64_t v8 = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib, "AUGraphSetNodeInputCallback");
  softLinkAUGraphSetNodeInputCallback[0] = v8;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v8)(a1, a2, a3, a4);
}

uint64_t _AudioStreamOutputCallBack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  long double v10 = fmod(*(long double *)a3, 4294967300.0);
  (*(void (**)(void, void, void, void, void))(a1 + 160))(v10, *(void *)(a3 + 8), *(void *)(a6 + 16), (*(_DWORD *)(a1 + 208) * a5), *(void *)(a1 + 168));
  return 0;
}

uint64_t initAUGraphConnectNodeInput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (AudioToolboxLibrary_sOnce != -1) {
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  }
  long double v10 = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib, "AUGraphConnectNodeInput");
  softLinkAUGraphConnectNodeInput[0] = v10;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v10)(a1, a2, a3, a4, a5);
}

uint64_t initAudioUnitSetProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (AudioToolboxLibrary_sOnce != -1) {
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  }
  uint64_t v12 = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib, "AudioUnitSetProperty");
  softLinkAudioUnitSetProperty[0] = v12;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v12)(a1, a2, a3, a4, a5, a6);
}

uint64_t initAUGraphAddNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (AudioToolboxLibrary_sOnce != -1) {
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  }
  uint64_t v6 = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib, "AUGraphAddNode");
  softLinkAUGraphAddNode[0] = v6;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(a1, a2, a3);
}

uint64_t initAUGraphOpen(uint64_t a1)
{
  if (AudioToolboxLibrary_sOnce != -1) {
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  }
  uint64_t v2 = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib, "AUGraphOpen");
  softLinkAUGraphOpen[0] = v2;
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

uint64_t initNewAUGraph(uint64_t a1)
{
  if (AudioToolboxLibrary_sOnce != -1) {
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  }
  uint64_t v2 = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib, "NewAUGraph");
  softLinkNewAUGraph[0] = v2;
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

uint64_t AudioStreamStart(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2)
  {
    uint64_t result = AudioStreamPrepare(a1);
    if (result) {
      return result;
    }
    uint64_t v2 = *(void *)(a1 + 24);
    if (!v2) {
      goto LABEL_6;
    }
  }
  if (*(unsigned char *)(a1 + 96))
  {
    ((void (*)(uint64_t))softLinkAUGraphStop[0])(v2);
    uint64_t v2 = *(void *)(a1 + 24);
  }
  uint64_t result = ((uint64_t (*)(uint64_t))softLinkAUGraphStart[0])(v2);
  if (!result)
  {
    *(unsigned char *)(a1 + 96) = 1;
LABEL_6:
    uint64_t result = 0;
    *(unsigned char *)(a1 + 128) = 1;
  }
  return result;
}

uint64_t initAUGraphStart(uint64_t a1)
{
  if (AudioToolboxLibrary_sOnce != -1) {
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  }
  uint64_t v2 = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib, "AUGraphStart");
  softLinkAUGraphStart[0] = v2;
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

uint64_t AudioStreamTest(int a1)
{
  long double v10 = 0;
  long double v11 = 0;
  memset(bytes, 0, 40);
  uint64_t v8 = 0;
  uint64_t v2 = SineTable_Create(&v11, 44100, 800);
  if (!v2)
  {
    uint64_t v3 = AudioStreamCreate((uint64_t *)&v10);
    uint64_t v4 = v10;
    if (v3)
    {
      uint64_t v2 = v3;
      if (!v10) {
        goto LABEL_14;
      }
    }
    else
    {
      if (a1)
      {
        v10[18] = _AudioStreamTestInput;
        v4[19] = &v8;
        _AudioStreamSetProperty((uint64_t)v4, @"input", (__CFString *)*MEMORY[0x1E4F1CFD0]);
      }
      unint64_t v5 = v11;
      v4[20] = _AudioStreamTestOutput;
      v4[21] = v5;
      *(void *)long long bytes = 0x40E5888000000000;
      *(_OWORD *)&bytes[8] = xmmword_18E416E80;
      *(_OWORD *)&bytes[24] = xmmword_18E416E90;
      uint64_t v2 = CFObjectSetBytes((uint64_t)v4, (uint64_t (*)(uint64_t, uint64_t, CFDataRef))_AudioStreamSetProperty, @"format", bytes, 40);
      if (!v2)
      {
        uint64_t v2 = CFObjectSetInt64((uint64_t)v4, (uint64_t (*)(uint64_t, uint64_t, CFNumberRef))_AudioStreamSetProperty, @"preferredLatency", 100000);
        if (!v2)
        {
          uint64_t v2 = AudioStreamStart((uint64_t)v4);
          if (!v2)
          {
            sleep(5u);
            if (a1)
            {
              if (!v8) {
                uint64_t v2 = 4294960550;
              }
            }
          }
        }
      }
    }
    AudioStreamStop((uint64_t)v4);
    CFRelease(v4);
  }
LABEL_14:
  if (v11) {
    free(v11);
  }
  uint64_t v6 = "FAILED";
  if (!v2) {
    uint64_t v6 = "PASSED";
  }
  printf("AudioStreamTest: %s\n", v6);
  return v2;
}

void _AudioStreamTestOutput(uint64_t a1, uint64_t a2, _WORD *a3, unint64_t a4, _DWORD *a5)
{
  int v5 = a5[2];
  if ((int)(a4 >> 2) >= 1)
  {
    int v6 = *a5;
    int v7 = a5[1];
    uint64_t v8 = &a3[(int)(2 * (a4 >> 2))];
    do
    {
      __int16 v9 = *((_WORD *)a5 + v5 + 6);
      int v10 = v5 + v7;
      if (v10 <= v6) {
        int v11 = 0;
      }
      else {
        int v11 = v6;
      }
      int v5 = v10 - v11;
      *a3 = v9;
      a3[1] = v9;
      a3 += 2;
    }
    while (a3 < v8);
  }
  a5[2] = v5;
}

void _AudioStreamTestInput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  *a5 += a4;
}

uint64_t Base64EncodeEx(char *__s, int64_t a2, char a3, unsigned char *a4, unint64_t a5, void *a6)
{
  int v10 = __s;
  if (a2 == -1) {
    a2 = strlen(__s);
  }
  int v11 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  if ((a3 & 2) != 0) {
    int v11 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";
  }
  unint64_t v12 = (2 * (((unint64_t)(a2 + 2) * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64)) & 0xFFFFFFFFFFFFFFFCLL;
  if (v12 < a2)
  {
    uint64_t result = 4294960553;
    goto LABEL_25;
  }
  if (v12 > a5)
  {
    uint64_t result = 4294960545;
LABEL_25:
    int v13 = a4;
    if (!a6) {
      return result;
    }
    goto LABEL_21;
  }
  int v13 = a4;
  if (a2 >= 3)
  {
    do
    {
      *int v13 = v11[(unint64_t)*v10 >> 2];
      v13[1] = v11[((unint64_t)v10[1] >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16 * (*v10 & 3))];
      v13[2] = v11[((unint64_t)v10[2] >> 6) & 0xFFFFFFFFFFFFFFC3 | (4 * (v10[1] & 0xF))];
      v13[3] = v11[v10[2] & 0x3F];
      v10 += 3;
      v13 += 4;
      a2 -= 3;
    }
    while (a2 > 2);
  }
  if (a2 == 2)
  {
    *int v13 = v11[(unint64_t)*v10 >> 2];
    v13[1] = v11[((unint64_t)v10[1] >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16 * (*v10 & 3))];
    v13[2] = v11[4 * (v10[1] & 0xF)];
    if (a3)
    {
      uint64_t result = 0;
      v13 += 3;
      if (!a6) {
        return result;
      }
      goto LABEL_21;
    }
  }
  else
  {
    if (a2 != 1)
    {
      uint64_t result = 0;
      if (!a6) {
        return result;
      }
      goto LABEL_21;
    }
    *int v13 = v11[(unint64_t)*v10 >> 2];
    v13[1] = v11[16 * (*v10 & 3)];
    if (a3)
    {
      uint64_t result = 0;
      v13 += 2;
      if (!a6) {
        return result;
      }
      goto LABEL_21;
    }
    v13[2] = 61;
  }
  uint64_t result = 0;
  v13[3] = 61;
  v13 += 4;
  if (!a6) {
    return result;
  }
LABEL_21:
  *a6 = v13 - a4;
  return result;
}

uint64_t Base64EncodeCopyEx(char *__s, size_t a2, char a3, void *a4, unint64_t *a5)
{
  size_t v8 = a2;
  if (a2 == -1) {
    size_t v8 = strlen(__s);
  }
  unint64_t v10 = (2 * (((v8 + 2) * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64)) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v17 = v10;
  if (v10 < v8) {
    return 4294960553;
  }
  int v11 = malloc_type_malloc(v10 | 1, 0x43744E7AuLL);
  if (!v11) {
    return 4294960568;
  }
  unint64_t v12 = v11;
  uint64_t v13 = Base64EncodeEx(__s, v8, a3, v11, v10, &v17);
  if (v13)
  {
    uint64_t v14 = v13;
    free(v12);
  }
  else
  {
    unint64_t v15 = v17;
    *((unsigned char *)v12 + v17) = 0;
    *a4 = v12;
    uint64_t v14 = 0;
    if (a5) {
      *a5 = v15;
    }
  }
  return v14;
}

uint64_t Base64EncodeLinesCopyEx(char *__s, int64_t a2, size_t a3, unsigned char *a4, char a5, char **a6, void *a7)
{
  int64_t v12 = a2;
  uint64_t v13 = __s;
  if (a2 == -1) {
    int64_t v12 = strlen(__s);
  }
  uint64_t v14 = a4 - 1;
  unint64_t v15 = a4 - 1;
  while (*++v15)
    ;
  unint64_t v17 = (2 * (((unint64_t)(v12 + 2) * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64)) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v18 = v17 / 0x48;
  if (v17 % 0x48) {
    ++v18;
  }
  unint64_t v19 = v17 + (void)&v15[a3 - (void)a4] * v18;
  if (v19 < v12 || v19 == -1) {
    return 4294960553;
  }
  int v46 = a6;
  size_t v21 = (char *)malloc_type_malloc(v19 + 1, 0xD1C047FDuLL);
  if (!v21) {
    return 4294960568;
  }
  char v22 = v21;
  if (v12 == -1) {
    int64_t v12 = strlen(v13);
  }
  uint64_t v45 = a7;
  while (*++v14)
    ;
  if ((a5 & 2) != 0) {
    uint64_t v24 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";
  }
  else {
    uint64_t v24 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  }
  unint64_t v25 = (2 * (((unint64_t)(v12 + 2) * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64)) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v26 = v25 / 0x48;
  if (v25 % 0x48) {
    ++v26;
  }
  unint64_t v27 = v25 + (void)&v14[a3 - (void)a4] * v26;
  if (v27 < v12)
  {
    uint64_t v43 = 4294960553;
LABEL_64:
    free(v22);
    return v43;
  }
  if (v27 > v19)
  {
    uint64_t v43 = 4294960545;
    goto LABEL_64;
  }
  long long v28 = v22;
  if (a3)
  {
    memset(v22, 9, a3);
    long long v28 = &v22[a3];
  }
  if (v12 >= 3)
  {
    unint64_t v29 = 0;
    double v30 = &v13[v12];
    do
    {
      if (v29 < 0x48)
      {
        unint64_t v34 = v29;
      }
      else
      {
        char v31 = *a4;
        uint64_t v32 = a4 + 1;
        if (*a4)
        {
          do
          {
            *v28++ = v31;
            int v33 = *v32++;
            char v31 = v33;
          }
          while (v33);
        }
        if (a3)
        {
          memset(v28, 9, a3);
          unint64_t v34 = 0;
          v28 += a3;
        }
        else
        {
          unint64_t v34 = 0;
        }
      }
      *long long v28 = v24[(unint64_t)*v13 >> 2];
      v28[1] = v24[((unint64_t)v13[1] >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16 * (*v13 & 3))];
      v28[2] = v24[((unint64_t)v13[2] >> 6) & 0xFFFFFFFFFFFFFFC3 | (4 * (v13[1] & 0xF))];
      v28[3] = v24[v13[2] & 0x3F];
      v13 += 3;
      v28 += 4;
      unint64_t v29 = v34 + 4;
      int64_t v12 = v30 - v13;
    }
    while (v30 - v13 > 2);
    if (v12 >= 1 && v34 >= 0x44)
    {
      char v35 = *a4;
      if (*a4)
      {
        uint64_t v36 = a4 + 1;
        do
        {
          *v28++ = v35;
          int v37 = *v36++;
          char v35 = v37;
        }
        while (v37);
      }
      if (a3)
      {
        memset(v28, 9, a3);
        v28 += a3;
      }
    }
  }
  if (v12 == 2)
  {
    *long long v28 = v24[(unint64_t)*v13 >> 2];
    v28[1] = v24[((unint64_t)v13[1] >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16 * (*v13 & 3))];
    v28[2] = v24[4 * (v13[1] & 0xF)];
    uint64_t v38 = v45;
    if (a5)
    {
      v28 += 3;
      goto LABEL_51;
    }
    goto LABEL_47;
  }
  if (v12 != 1)
  {
LABEL_49:
    uint64_t v38 = v45;
    goto LABEL_51;
  }
  *long long v28 = v24[(unint64_t)*v13 >> 2];
  v28[1] = v24[16 * (*v13 & 3)];
  if (a5)
  {
    v28 += 2;
    goto LABEL_49;
  }
  v28[2] = 61;
  uint64_t v38 = v45;
LABEL_47:
  v28[3] = 61;
  v28 += 4;
LABEL_51:
  int v39 = v22;
  if (v28 != v22)
  {
    char v40 = *a4;
    if (*a4)
    {
      int v41 = a4 + 1;
      int v39 = v28;
      do
      {
        *v39++ = v40;
        int v42 = *v41++;
        char v40 = v42;
      }
      while (v42);
    }
    else
    {
      int v39 = v28;
    }
  }
  char *v39 = 0;
  *int v46 = v22;
  uint64_t v43 = 0;
  if (v38) {
    *uint64_t v38 = v39 - v22;
  }
  return v43;
}

uint64_t Base64Decode(char *__s, size_t a2, unsigned char *a3, uint64_t a4, void *a5)
{
  size_t v8 = __s;
  if (a2 == -1) {
    a2 = strlen(__s);
  }
  int v9 = 0;
  int v10 = 0;
  int v11 = 0;
  int64_t v12 = &v8[a2];
  uint64_t v13 = &a3[a4];
  uint64_t v14 = a3;
LABEL_4:
  unsigned int v15 = 0;
  while (v8 < v12)
  {
    unsigned int v17 = *v8++;
    unsigned int v16 = v17;
    unsigned int v18 = kBase64DecodeTable[v17];
    if (v18 != 128)
    {
      if (v18 == 255)
      {
        uint64_t result = 4294960563;
        goto LABEL_24;
      }
      if (v16 == 61) {
        break;
      }
      if (v15)
      {
        if (v15 == 1)
        {
          int v10 = 16 * v18;
          unsigned int v15 = 2;
          v11 |= v18 >> 4;
        }
        else
        {
          if (v15 != 2)
          {
            if (v13 - v14 >= 3)
            {
              v9 |= v18;
              *uint64_t v14 = v11;
              v14[1] = v10;
              v14[2] = v9;
              v14 += 3;
              goto LABEL_4;
            }
            goto LABEL_28;
          }
          int v9 = v18 << 6;
          unsigned int v15 = 3;
          v10 |= v18 >> 2;
        }
      }
      else
      {
        int v11 = 4 * v18;
        unsigned int v15 = 1;
      }
    }
  }
  if (v15 < 2)
  {
    uint64_t result = 0;
    goto LABEL_24;
  }
  if (v15 == 3)
  {
    if (v13 - v14 >= 2)
    {
      uint64_t result = 0;
      *uint64_t v14 = v11;
      v14[1] = v10;
      v14 += 2;
      goto LABEL_24;
    }
  }
  else if (v13 - v14 >= 1)
  {
    uint64_t result = 0;
    *v14++ = v11;
    goto LABEL_24;
  }
LABEL_28:
  uint64_t result = 4294960545;
LABEL_24:
  if (a5) {
    *a5 = v14 - a3;
  }
  return result;
}

uint64_t Base64DecodeCopy(char *__s, size_t a2, void *a3, unint64_t *a4)
{
  size_t v6 = a2;
  if (a2 == -1) {
    size_t v6 = strlen(__s);
  }
  if (v6 > 0xFFFFFFFFFFFFFFFCLL) {
    return 4294960553;
  }
  unint64_t v14 = 3 * ((v6 + 3) >> 2);
  size_t v8 = malloc_type_malloc(v14 + 1, 0x19CA1A60uLL);
  if (!v8) {
    return 4294960568;
  }
  int v9 = v8;
  uint64_t v10 = Base64Decode(__s, v6, v8, 3 * ((v6 + 3) >> 2), &v14);
  if (v10)
  {
    uint64_t v11 = v10;
    free(v9);
  }
  else
  {
    unint64_t v12 = v14;
    *((unsigned char *)v9 + v14) = 0;
    *a3 = v9;
    uint64_t v11 = 0;
    if (a4) {
      *a4 = v12;
    }
  }
  return v11;
}

uint64_t _BonjourAdvertiserGetTypeID()
{
  uint64_t result = _CFRuntimeRegisterClass();
  gBonjourAdvertiserCFTypeID TypeID = result;
  return result;
}

unsigned char *_BonjourAdvertiserFinalize(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 24);
  if (v2)
  {
    dispatch_release(v2);
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v3 = *(const void **)(a1 + 48);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 48) = 0;
  }
  uint64_t v4 = *(const void **)(a1 + 56);
  if (v4)
  {
    _Block_release(v4);
    *(void *)(a1 + 56) = 0;
  }

  *(void *)(a1 + 64) = 0;
  int v5 = *(void **)(a1 + 96);
  if (v5)
  {
    free(v5);
    *(void *)(a1 + 96) = 0;
  }
  size_t v6 = *(void **)(a1 + 136);
  if (v6)
  {
    free(v6);
    *(void *)(a1 + 136) = 0;
  }
  int v7 = *(void **)(a1 + 152);
  if (v7)
  {
    free(v7);
    *(void *)(a1 + 152) = 0;
  }
  size_t v8 = *(void **)(a1 + 160);
  if (v8)
  {
    free(v8);
    *(void *)(a1 + 160) = 0;
  }
  uint64_t result = *(unsigned char **)(a1 + 16);
  if (result)
  {
    if ((result[18] & 4) != 0)
    {
      uint64_t result = (unsigned char *)LogCategory_Remove(result);
      *(void *)(a1 + 16) = 0;
    }
  }
  return result;
}

uint64_t BonjourAdvertiserCreate(void *a1)
{
  if (gBonjourAdvertiserInitOnce != -1) {
    dispatch_once_f(&gBonjourAdvertiserInitOnce, 0, (dispatch_function_t)_BonjourAdvertiserGetTypeID);
  }
  uint64_t Instance = (_OWORD *)_CFRuntimeCreateInstance();
  if (!Instance) {
    return 4294960568;
  }
  uint64_t v3 = Instance;
  Instance[9] = 0u;
  Instance[10] = 0u;
  Instance[7] = 0u;
  Instance[8] = 0u;
  Instance[5] = 0u;
  Instance[6] = 0u;
  Instance[3] = 0u;
  Instance[4] = 0u;
  Instance[1] = 0u;
  Instance[2] = 0u;
  dispatch_queue_t v4 = dispatch_queue_create("BonjourAdvertiser", 0);
  v3[3] = v4;
  if (v4)
  {
    uint64_t result = 0;
    v3[2] = &gLogCategory_BonjourAdvertiser;
    *a1 = v3;
  }
  else
  {
    CFRelease(v3);
    return 4294960596;
  }
  return result;
}

void BonjourAdvertiserGenerateStatisticsNAN(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(NSObject **)(a1 + 24);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __BonjourAdvertiserGenerateStatisticsNAN_block_invoke;
  v3[3] = &unk_1E55BD780;
  v3[4] = a2;
  v3[5] = a1;
  dispatch_async(v2, v3);
}

uint64_t __BonjourAdvertiserGenerateStatisticsNAN_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 32);
  int v9 = *(void **)(*(void *)(a1 + 40) + 64);
  if (v9)
  {
    return [v9 generateStatisticsReportWithCompletionHandler:v8];
  }
  else
  {
    id v11 = NSErrorF_safe((void *)*MEMORY[0x1E4F28760], 4294960591, (uint64_t)"No NAN publisher", a4, a5, a6, a7, a8, v13);
    unint64_t v12 = *(uint64_t (**)(uint64_t, void, id))(v8 + 16);
    return v12(v8, 0, v11);
  }
}

void BonjourAdvertiserReportNANIssue(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(NSObject **)(a1 + 24);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __BonjourAdvertiserReportNANIssue_block_invoke;
  v3[3] = &unk_1E55BE748;
  v3[4] = a2;
  v3[5] = a1;
  dispatch_async(v2, v3);
}

uint64_t __BonjourAdvertiserReportNANIssue_block_invoke(uint64_t result)
{
  if (*(void *)(*(void *)(result + 40) + 64)) {
    return [*(id *)(*(void *)(result + 40) + 64) reportIssue:*(void *)(result + 32)];
  }
  return result;
}

void BonjourAdvertiserSetNANControlFlags(uint64_t a1, int a2)
{
  uint64_t v2 = *(NSObject **)(a1 + 24);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __BonjourAdvertiserSetNANControlFlags_block_invoke;
  v3[3] = &__block_descriptor_44_e5_v8__0l;
  v3[4] = a1;
  int v4 = a2;
  dispatch_async(v2, v3);
}

uint64_t __BonjourAdvertiserSetNANControlFlags_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(_DWORD *)(v1 + 40) = *(_DWORD *)(a1 + 40);
  return [*(id *)(v1 + 64) setControlFlags:*(unsigned int *)(a1 + 40)];
}

void BonjourAdvertiserSetNANCustomData(uint64_t a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  int v4 = *(NSObject **)(a1 + 24);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = __BonjourAdvertiserSetNANCustomData_block_invoke;
  v5[3] = &__block_descriptor_48_e5_v8__0l;
  v5[4] = a1;
  v5[5] = cf;
  dispatch_async(v4, v5);
}

uint64_t __BonjourAdvertiserSetNANCustomData_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(const void **)(v2 + 48);
  if (v3)
  {
    CFRelease(v3);
    uint64_t v2 = *(void *)(a1 + 32);
  }
  *(void *)(v2 + 48) = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 40);
  int v5 = *(void **)(*(void *)(a1 + 32) + 64);
  return [v5 setCustomData:v4];
}

void BonjourAdvertiserSetNANInterruptionHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(NSObject **)(a1 + 24);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __BonjourAdvertiserSetNANInterruptionHandler_block_invoke;
  v3[3] = &unk_1E55BD780;
  v3[4] = a2;
  void v3[5] = a1;
  dispatch_async(v2, v3);
}

uint64_t __BonjourAdvertiserSetNANInterruptionHandler_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2) {
    uint64_t v3 = _Block_copy(v2);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(void *)(a1 + 40);
  int v5 = *(const void **)(v4 + 56);
  if (v5)
  {
    _Block_release(v5);
    uint64_t v4 = *(void *)(a1 + 40);
  }
  *(void *)(v4 + 56) = v3;
  size_t v6 = *(void **)(v4 + 64);
  return [v6 setInterruptionHandler:v3];
}

void BonjourAdvertiserUpdateLinkStatusNAN(uint64_t a1, int a2)
{
  uint64_t v2 = *(NSObject **)(a1 + 24);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __BonjourAdvertiserUpdateLinkStatusNAN_block_invoke;
  v3[3] = &__block_descriptor_44_e5_v8__0l;
  v3[4] = a1;
  int v4 = a2;
  dispatch_async(v2, v3);
}

uint64_t __BonjourAdvertiserUpdateLinkStatusNAN_block_invoke(uint64_t result)
{
  if (*(void *)(*(void *)(result + 32) + 64)) {
    return [*(id *)(*(void *)(result + 32) + 64) updateLinkStatus:*(unsigned int *)(result + 40)];
  }
  return result;
}

void BonjourAdvertiserSetDispatchQueue(uint64_t a1, NSObject *a2)
{
  if (a2) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = MEMORY[0x1E4F14428];
  }
  dispatch_retain(v3);
  int v4 = *(NSObject **)(a1 + 24);
  if (v4) {
    dispatch_release(v4);
  }
  *(void *)(a1 + 24) = v3;
}

uint64_t BonjourAdvertiserSetFlags(uint64_t result, uint64_t a2)
{
  *(void *)(result + 104) = a2;
  return result;
}

uint64_t BonjourAdvertiserSetInterfaceIndex(uint64_t result, int a2)
{
  *(_DWORD *)(result + 112) = a2;
  return result;
}

uint64_t BonjourAdvertiserSetInterfaceName()
{
  return __strlcpy_chk();
}

uint64_t BonjourAdvertiserSetLabel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return LogCategoryReplaceF((uint64_t *)(a1 + 16), (uint64_t)"%s-%s", a3, a4, a5, a6, a7, a8, qword_1E91CC088);
}

uint64_t BonjourAdvertiserSetName(uint64_t a1, char *a2)
{
  return ReplaceDifferentString((void **)(a1 + 136), a2);
}

uint64_t BonjourAdvertiserSetServiceType(uint64_t a1, char *a2)
{
  return ReplaceDifferentString((void **)(a1 + 152), a2);
}

uint64_t BonjourAdvertiserSetDomain(uint64_t a1, char *a2)
{
  return ReplaceDifferentString((void **)(a1 + 96), a2);
}

uint64_t BonjourAdvertiserSetP2P(uint64_t result, char a2)
{
  *(unsigned char *)(result + 144) = a2;
  return result;
}

uint64_t BonjourAdvertiserSetPort(uint64_t result, int a2)
{
  *(_DWORD *)(result + 148) = a2;
  return result;
}

uint64_t BonjourAdvertiserSetTXTRecord(uint64_t a1, const void *a2, size_t size)
{
  if (size)
  {
    size_t v6 = malloc_type_malloc(size, 0x37DD5EA4uLL);
    if (!v6) {
      return 4294960568;
    }
    int v7 = v6;
    memcpy(v6, a2, size);
  }
  else
  {
    int v7 = 0;
  }
  uint64_t v8 = *(void **)(a1 + 160);
  if (v8) {
    free(v8);
  }
  uint64_t result = 0;
  *(void *)(a1 + 160) = v7;
  *(_WORD *)(a1 + 168) = size;
  *(unsigned char *)(a1 + 170) = 1;
  return result;
}

uint64_t BonjourAdvertiserSetTrafficFlags(uint64_t result, int a2)
{
  *(_DWORD *)(result + 172) = a2;
  return result;
}

uint64_t BonjourAdvertiserStart(dispatch_queue_t *a1)
{
  return 0;
}

void _BonjourAdvertiserStart(unsigned char *cf)
{
  if (!cf[88])
  {
    cf[88] = 1;
    CFRetain(cf);
  }
  *((void *)cf + 10) = mach_absolute_time();
  _BonjourAdvertiserUpdateDirect((uint64_t)cf);
  CFRelease(cf);
}

void _BonjourAdvertiserUpdateDirect(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 88))
  {
    uint64_t v3 = a1 + 32;
    uint64_t v2 = *(_DNSServiceRef_t **)(a1 + 32);
    if ((*(unsigned char *)(v3 + 78) & 0x80) != 0)
    {
      if (v2)
      {
        DNSServiceRefDeallocate(v2);
        int v8 = 0;
        *(void *)uint64_t v3 = 0;
        goto LABEL_27;
      }
      goto LABEL_26;
    }
    if (!v2)
    {
LABEL_14:
      if (*(unsigned char *)(a1 + 144)) {
        DNSServiceFlags v10 = *(_DWORD *)(a1 + 104) | 0x100000;
      }
      else {
        DNSServiceFlags v10 = *(_DWORD *)(a1 + 104);
      }
      if (*(unsigned char *)(a1 + 116))
      {
        uint32_t v11 = if_nametoindex((const char *)(a1 + 116));
        if (!v11)
        {
          int v8 = -6727;
          goto LABEL_27;
        }
      }
      else
      {
        uint32_t v11 = *(_DWORD *)(a1 + 112);
      }
      DNSServiceErrorType v12 = DNSServiceRegister((DNSServiceRef *)v3, v10, v11, *(const char **)(a1 + 136), *(const char **)(a1 + 152), *(const char **)(a1 + 96), 0, bswap32(*(unsigned __int16 *)(a1 + 148)) >> 16, *(_WORD *)(a1 + 168), *(const void **)(a1 + 160), (DNSServiceRegisterReply)_BonjourAdvertiserRegistrationHandler, (void *)a1);
      if (v12)
      {
        int v8 = v12;
LABEL_27:
        uint64_t v18 = *(void *)(a1 + 64);
        if ((*(unsigned char *)(a1 + 111) & 2) == 0)
        {
          [*(id *)(a1 + 64) invalidate];

          int v19 = 0;
          *(void *)(a1 + 64) = 0;
          if (!v8) {
            goto LABEL_42;
          }
LABEL_43:
          if (!*(void *)(a1 + 72))
          {
            uint64_t v25 = mach_absolute_time();
            unint64_t v26 = UpTicksToMilliseconds(v25 - *(void *)(a1 + 80));
            if (v26 >= 0x2B69) {
              uint64_t v31 = 1;
            }
            else {
              uint64_t v31 = 11113 - v26;
            }
            uint64_t v32 = *(int **)(a1 + 16);
            if (*v32 > 50) {
              goto LABEL_51;
            }
            if (*v32 == -1)
            {
              if (!_LogCategory_Initialize((uint64_t)v32, 0x32u))
              {
LABEL_51:
                int v33 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, *(dispatch_queue_t *)(a1 + 24));
                *(void *)(a1 + 72) = v33;
                if (v33)
                {
                  dispatch_set_context(v33, (void *)a1);
                  dispatch_source_set_event_handler_f(*(dispatch_source_t *)(a1 + 72), (dispatch_function_t)_BonjourAdvertiserRetryTimer);
                  unint64_t v34 = *(NSObject **)(a1 + 72);
                  dispatch_time_t v35 = dispatch_time(0, 1000000 * v31);
                  dispatch_source_set_timer(v34, v35, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
                  dispatch_resume(*(dispatch_object_t *)(a1 + 72));
                }
                goto LABEL_53;
              }
              uint64_t v32 = *(int **)(a1 + 16);
            }
            LogPrintF((uint64_t)v32, (uint64_t)"void _BonjourAdvertiserHandleError(BonjourAdvertiserRef, OSStatus)", 0x32u, (uint64_t)"### Bonjour register for %s failed, retrying in %llu ms: %#m\n", v27, v28, v29, v30, *(void *)(a1 + 152));
            goto LABEL_51;
          }
LABEL_53:
          *(unsigned char *)(a1 + 170) = 0;
          return;
        }
        unint64_t v20 = *(CUNANPublisher **)(a1 + 64);
        if (!v18)
        {
          unint64_t v20 = objc_alloc_init(CUNANPublisher);
          [(CUNANPublisher *)v20 setControlFlags:*(unsigned int *)(a1 + 40)];
          [(CUNANPublisher *)v20 setCustomData:*(void *)(a1 + 48)];
          [(CUNANPublisher *)v20 setDispatchQueue:*(void *)(a1 + 24)];
          [(CUNANPublisher *)v20 setInterruptionHandler:*(void *)(a1 + 56)];
          uint64_t v21 = *(void *)(a1 + 152);
          if (v21) {
            uint64_t v21 = objc_msgSend(NSString, "stringWithUTF8String:");
          }
          [(CUNANPublisher *)v20 setServiceType:v21];
          [(CUNANPublisher *)v20 setTrafficFlags:*(unsigned int *)(a1 + 172)];
          *(void *)(a1 + 64) = v20;
        }
        uint64_t v22 = *(void *)(a1 + 136);
        if (v22)
        {
          uint64_t v22 = objc_msgSend(NSString, "stringWithUTF8String:");
          unint64_t v20 = *(CUNANPublisher **)(a1 + 64);
        }
        int v36 = 0;
        [(CUNANPublisher *)v20 setName:v22];
        [*(id *)(a1 + 64) setPort:*(unsigned int *)(a1 + 148)];
        if (*(unsigned char *)(a1 + 170))
        {
          uint64_t v23 = CFDictionaryCreateWithTXTRecordBytes(*(const char **)(a1 + 160), *(unsigned __int16 *)(a1 + 168), &v36);
          if (!v23)
          {
            int v19 = v36;
            if (v8) {
              goto LABEL_43;
            }
            goto LABEL_42;
          }
          uint64_t v24 = v23;
          [*(id *)(a1 + 64) setTextInfo:v23];
          CFRelease(v24);
        }
        if (!v18) {
          [*(id *)(a1 + 64) activateWithCompletion:0];
        }
        int v19 = 0;
        if (v8) {
          goto LABEL_43;
        }
LABEL_42:
        if (!v19) {
          goto LABEL_53;
        }
        goto LABEL_43;
      }
      DNSServiceSetDispatchQueue(*(DNSServiceRef *)(a1 + 32), *(dispatch_queue_t *)(a1 + 24));
      unsigned int v17 = *(int **)(a1 + 16);
      if (*v17 <= 50)
      {
        if (*v17 == -1)
        {
          if (!_LogCategory_Initialize((uint64_t)v17, 0x32u)) {
            goto LABEL_26;
          }
          unsigned int v17 = *(int **)(a1 + 16);
        }
        LogPrintF((uint64_t)v17, (uint64_t)"OSStatus _BonjourAdvertiserUpdateDNSService(BonjourAdvertiserRef)", 0x32u, (uint64_t)"Registering Bonjour %s port %d\n", v13, v14, v15, v16, *(void *)(a1 + 152));
      }
LABEL_26:
      int v8 = 0;
      goto LABEL_27;
    }
    if (DNSServiceUpdateRecord(v2, 0, 0, *(_WORD *)(a1 + 168), *(const void **)(a1 + 160), 0))
    {
      if (*(void *)v3)
      {
        DNSServiceRefDeallocate(*(DNSServiceRef *)v3);
        *(void *)uint64_t v3 = 0;
      }
      goto LABEL_14;
    }
    int v9 = *(int **)(a1 + 16);
    if (*v9 <= 50)
    {
      if (*v9 != -1)
      {
LABEL_11:
        LogPrintF((uint64_t)v9, (uint64_t)"OSStatus _BonjourAdvertiserUpdateDNSService(BonjourAdvertiserRef)", 0x32u, (uint64_t)"Updated Bonjour TXT for %s\n", v4, v5, v6, v7, *(void *)(a1 + 152));
        goto LABEL_13;
      }
      if (_LogCategory_Initialize((uint64_t)v9, 0x32u))
      {
        int v9 = *(int **)(a1 + 16);
        goto LABEL_11;
      }
    }
LABEL_13:
    if (*(void *)v3) {
      goto LABEL_26;
    }
    goto LABEL_14;
  }
}

uint64_t _BonjourAdvertiserRetryTimer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = *(int **)(a1 + 16);
  if (*v9 <= 50)
  {
    if (*v9 != -1)
    {
LABEL_3:
      LogPrintF((uint64_t)v9, (uint64_t)"void _BonjourAdvertiserRetryTimer(void *)", 0x32u, (uint64_t)"Retrying Bonjour register for %s after failure\n", a5, a6, a7, a8, *(void *)(a1 + 152));
      goto LABEL_5;
    }
    if (_LogCategory_Initialize((uint64_t)v9, 0x32u))
    {
      int v9 = *(int **)(a1 + 16);
      goto LABEL_3;
    }
  }
LABEL_5:
  DNSServiceFlags v10 = *(NSObject **)(a1 + 72);
  if (v10)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 72));
    dispatch_release(v10);
    *(void *)(a1 + 72) = 0;
  }
  *(void *)(a1 + 80) = mach_absolute_time();
  return _BonjourAdvertiserUpdateDirect(a1);
}

void _BonjourAdvertiserRegistrationHandler(int a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, void *cf, uint64_t a8)
{
  if (!a3)
  {
    DNSServiceFlags v10 = (int *)cf[2];
    if (*v10 > 50) {
      return;
    }
    if (*v10 == -1)
    {
      if (!_LogCategory_Initialize((uint64_t)v10, 0x32u)) {
        return;
      }
      DNSServiceFlags v10 = (int *)cf[2];
    }
    LogPrintF((uint64_t)v10, (uint64_t)"void _BonjourAdvertiserRegistrationHandler(DNSServiceRef, DNSServiceFlags, DNSServiceErrorType, const char *, const char *, const char *, void *)", 0x32u, (uint64_t)"Registered Bonjour %s.%s%s\n", a5, a6, (uint64_t)cf, a8, a4);
    return;
  }
  if (a3 != -65563)
  {
    DNSServiceErrorType v12 = (int *)cf[2];
    if (*v12 > 50) {
      return;
    }
    if (*v12 == -1)
    {
      if (!_LogCategory_Initialize((uint64_t)v12, 0x32u)) {
        return;
      }
      DNSServiceErrorType v12 = (int *)cf[2];
    }
    LogPrintF((uint64_t)v12, (uint64_t)"void _BonjourAdvertiserRegistrationHandler(DNSServiceRef, DNSServiceFlags, DNSServiceErrorType, const char *, const char *, const char *, void *)", 0x32u, (uint64_t)"### Bonjour registration error for %s: %#m\n", a5, a6, (uint64_t)cf, a8, cf[19]);
    return;
  }
  int v9 = (int *)cf[2];
  if (*v9 <= 50)
  {
    if (*v9 == -1)
    {
      if (!_LogCategory_Initialize((uint64_t)v9, 0x32u)) {
        goto LABEL_13;
      }
      int v9 = (int *)cf[2];
    }
    LogPrintF((uint64_t)v9, (uint64_t)"void _BonjourAdvertiserRegistrationHandler(DNSServiceRef, DNSServiceFlags, DNSServiceErrorType, const char *, const char *, const char *, void *)", 0x32u, (uint64_t)"### Bonjour server crashed for %s\n", a5, a6, (uint64_t)cf, a8, cf[19]);
  }
LABEL_13:
  uint64_t v13 = (_DNSServiceRef_t *)cf[4];
  if (v13)
  {
    DNSServiceRefDeallocate(v13);
    cf[4] = 0;
  }
  CFRetain(cf);
  uint64_t v14 = cf[3];
  dispatch_async_f(v14, cf, (dispatch_function_t)_BonjourAdvertiserUpdate);
}

void _BonjourAdvertiserUpdate(const void *a1)
{
  _BonjourAdvertiserUpdateDirect(a1);
  CFRelease(a1);
}

void BonjourAdvertiserStop(void *a1)
{
  CFRetain(a1);
  uint64_t v2 = a1[3];
  dispatch_async_f(v2, a1, (dispatch_function_t)_BonjourAdvertiserStop);
}

void _BonjourAdvertiserStop(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 72);
  if (v2)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 72));
    dispatch_release(v2);
    *(void *)(a1 + 72) = 0;
  }
  uint64_t v3 = *(_DNSServiceRef_t **)(a1 + 32);
  if (v3)
  {
    DNSServiceRefDeallocate(v3);
    *(void *)(a1 + 32) = 0;
  }
  [*(id *)(a1 + 64) invalidate];

  *(void *)(a1 + 64) = 0;
  if (*(unsigned char *)(a1 + 88))
  {
    int v8 = *(int **)(a1 + 16);
    if (*v8 <= 50)
    {
      if (*v8 == -1)
      {
        if (!_LogCategory_Initialize((uint64_t)v8, 0x32u)) {
          goto LABEL_10;
        }
        int v8 = *(int **)(a1 + 16);
      }
      LogPrintF((uint64_t)v8, (uint64_t)"void _BonjourAdvertiserStop(void *)", 0x32u, (uint64_t)"Deregistered Bonjour %s\n", v4, v5, v6, v7, *(void *)(a1 + 152));
    }
LABEL_10:
    CFRelease((CFTypeRef)a1);
  }
  *(unsigned char *)(a1 + 88) = 0;
  CFRelease((CFTypeRef)a1);
}

uint64_t BonjourAdvertiserUpdate(dispatch_queue_t *a1)
{
  return 0;
}

uint64_t _BonjourBrowserGetTypeID()
{
  uint64_t result = _CFRuntimeRegisterClass();
  gBonjourBrowserCFTypeID TypeID = result;
  return result;
}

void _BonjourBrowser_Finalize(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DNSServiceFlags v10 = a1[2];
  if (v10)
  {
    dispatch_release(v10);
    a1[2] = 0;
  }
  uint32_t v11 = a1[20];
  if (v11)
  {
    dispatch_release(v11);
    a1[20] = 0;
  }
  DNSServiceErrorType v12 = (const void *)a1[23];
  if (v12)
  {
    _Block_release(v12);
    a1[23] = 0;
  }
  if (gLogCategory_BonjourBrowser <= 20
    && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x14u)))
  {
    LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_Finalize(CFTypeRef)", 0x14u, (uint64_t)"Finalized browser\n", a5, a6, a7, a8, a9);
  }
}

uint64_t BonjourBrowser_Create(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return BonjourBrowser_CreateEx(a1, a2, 0, a4, a5, a6, a7, a8);
}

uint64_t BonjourBrowser_CreateEx(void *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (gLogCategory_BonjourBrowser <= 30
    && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x1Eu)))
  {
    LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"OSStatus BonjourBrowser_CreateEx(BonjourBrowserRef *, const char *, CUBonjourBrowserFlags)", 0x1Eu, (uint64_t)"Create '%s', %#{flags}\n", a5, a6, a7, a8, a2);
  }
  if (gBonjourBrowserInitOnce != -1) {
    dispatch_once_f(&gBonjourBrowserInitOnce, 0, (dispatch_function_t)_BonjourBrowserGetTypeID);
  }
  uint64_t Instance = (_OWORD *)_CFRuntimeCreateInstance();
  if (!Instance) {
    return 4294960568;
  }
  DNSServiceErrorType v12 = Instance;
  Instance[1] = 0u;
  uint64_t v13 = (dispatch_queue_t *)(Instance + 1);
  Instance[10] = 0u;
  Instance[11] = 0u;
  Instance[8] = 0u;
  Instance[9] = 0u;
  Instance[6] = 0u;
  Instance[7] = 0u;
  Instance[4] = 0u;
  Instance[5] = 0u;
  Instance[2] = 0u;
  Instance[3] = 0u;
  if ((a3 & 2) != 0)
  {
    dispatch_qos_class_t v16 = QOS_CLASS_USER_INITIATED;
  }
  else
  {
    if ((a3 & 1) == 0)
    {
      if (a2) {
        uint64_t v14 = (const char *)a2;
      }
      else {
        uint64_t v14 = "BonjourBrowser";
      }
      uint64_t v15 = 0;
      goto LABEL_19;
    }
    dispatch_qos_class_t v16 = QOS_CLASS_UTILITY;
  }
  uint64_t v15 = dispatch_queue_attr_make_with_qos_class(0, v16, 0);
  if (a2) {
    uint64_t v14 = (const char *)a2;
  }
  else {
    uint64_t v14 = "BonjourBrowser";
  }
LABEL_19:
  dispatch_queue_t v17 = dispatch_queue_create(v14, v15);
  *uint64_t v13 = v17;
  if (v17)
  {
    uint64_t v18 = MEMORY[0x1E4F14428];
    v12[20] = MEMORY[0x1E4F14428];
    dispatch_retain(v18);
    uint64_t result = 0;
    *a1 = v12;
  }
  else
  {
    CFRelease(v12);
    return 4294960596;
  }
  return result;
}

void BonjourBrowser_SetDispatchQueue(uint64_t a1, NSObject *a2)
{
  if (a2) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = MEMORY[0x1E4F14428];
  }
  dispatch_retain(v3);
  uint64_t v4 = *(NSObject **)(a1 + 160);
  if (v4) {
    dispatch_release(v4);
  }
  *(void *)(a1 + 160) = v3;
}

uint64_t BonjourBrowser_SetEventHandler(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 168) = a2;
  *(void *)(result + 176) = a3;
  return result;
}

void BonjourBrowser_SetEventHandlerBlock(uint64_t a1, void *aBlock)
{
  if (aBlock) {
    uint64_t v3 = _Block_copy(aBlock);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(const void **)(a1 + 184);
  if (v4) {
    _Block_release(v4);
  }
  *(void *)(a1 + 184) = v3;
}

uint64_t BonjourBrowser_SetNANControlFlags(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 56) = a2;
  return [*(id *)(a1 + 64) setControlFlags:a2];
}

void _BonjourBrowser_RemoveAWDLServices(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 120))
  {
    uint64_t v3 = a1 + 80;
    uint64_t v2 = *(void *)(a1 + 80);
    while (v2)
    {
      uint64_t v4 = (uint64_t *)v3;
      uint64_t v3 = v2;
      while (1)
      {
        uint64_t v2 = *(void *)v3;
        if (*(_DWORD *)(v3 + 48) != *(_DWORD *)(a1 + 120)) {
          break;
        }
        *uint64_t v4 = v2;
        _BonjourBrowser_RemoveService(a1, v3, 1);
        _BonjourService_Free(v3);
        uint64_t v3 = *v4;
        if (!*v4) {
          return;
        }
      }
    }
  }
}

void *_BonjourBrowser_EnsureStoppedDNSSD(void *a1)
{
  uint64_t v2 = (_DNSServiceRef_t *)a1[3];
  if (v2)
  {
    DNSServiceRefDeallocate(v2);
    a1[3] = 0;
  }
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = 0;
  while (1)
  {
    uint64_t v3 = (void *)a1[11];
    if (!v3) {
      break;
    }
    a1[11] = *v3;
    _BonjourDevice_Free(v3);
  }
  while (1)
  {
    uint64_t result = (void *)a1[10];
    if (!result) {
      break;
    }
    a1[10] = *result;
    result[11] = 0;
    _BonjourService_Free((uint64_t)result);
  }
  return result;
}

void _BonjourBrowser_NANEndpointFound(uint64_t a1, void *a2)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  unsigned int v47 = 0;
  uint64_t v4 = objc_msgSend((id)objc_msgSend(a2, "serviceType"), "UTF8String");
  if (v4)
  {
    int v9 = (const char *)v4;
    uint64_t v10 = objc_msgSend((id)objc_msgSend(a2, "name"), "UTF8String");
    if (v10) {
      uint64_t v15 = (const char *)v10;
    }
    else {
      uint64_t v15 = "";
    }
    unsigned int v16 = *(_DWORD *)(a1 + 72);
    if (!v16)
    {
      unsigned int v16 = if_nametoindex("nan0");
      *(_DWORD *)(a1 + 72) = v16;
    }
    if (gLogCategory_BonjourBrowser <= 20
      && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x14u)))
    {
      LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_NANEndpointFound(BonjourBrowserRef, CUNANEndpoint *)", 0x14u, (uint64_t)"Bonjour NAN found: %s.%s%s on %u\n", v11, v12, v13, v14, (uint64_t)v15);
    }
    uint64_t v18 = a1 + 80;
    uint64_t v17 = *(void *)(a1 + 80);
    if (v17)
    {
      while (1)
      {
        uint64_t v18 = v17;
        if (*(_DWORD *)(v17 + 48) == v16
          && !strcasecmp(*(const char **)(v17 + 24), v15)
          && !strcasecmp(*(const char **)(v18 + 32), v9)
          && !strcasecmp(*(const char **)(v18 + 40), "local."))
        {
          break;
        }
        uint64_t v17 = *(void *)v18;
        if (!*(void *)v18) {
          goto LABEL_17;
        }
      }
      uint64_t v46 = v18;
    }
    else
    {
LABEL_17:
      uint64_t v46 = 0;
      uint64_t v19 = _BonjourService_Create(a1, v15, v9, "local.", v16, 0, 0, &v46);
      unsigned int v47 = v19;
      if (v19)
      {
        if (gLogCategory_BonjourBrowser > 90) {
          return;
        }
        uint64_t v43 = v19;
        if (gLogCategory_BonjourBrowser == -1 && !_LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x5Au)) {
          goto LABEL_42;
        }
        uint64_t v44 = v43;
        int v42 = "### BonjourService_Create failed: %#m";
        goto LABEL_63;
      }
      uint64_t v20 = v46;
      *(unsigned char *)(v46 + 80) = 1;
      *(_DWORD *)(v20 + 84) = 128;
      *(void *)uint64_t v18 = v20;
      uint64_t v18 = v46;
    }
    uint64_t v21 = *(void **)(v18 + 72);
    id v22 = a2;
    *(void *)(v18 + 72) = a2;

    CFDictionaryRef v23 = (const __CFDictionary *)[a2 textInfo];
    if (!v23) {
      CFDictionaryRef v23 = (const __CFDictionary *)MEMORY[0x1E4F1CC08];
    }
    size_t __n = 0;
    uint64_t v24 = TXTRecordCreateWithDictionary(v23, &__n, &v47);
    if (v24)
    {
      uint64_t v25 = v24;
      unint64_t v26 = malloc_type_calloc(1uLL, __n + 16, 0x6D1C11AAuLL);
      if (!v26)
      {
LABEL_50:
        unsigned int v47 = -6728;
        goto LABEL_41;
      }
      uint64_t v27 = v26;
      size_t v28 = __n;
      v26[1] = __n;
      memcpy(v26 + 2, v25, v28);
      uint64_t v29 = *(void **)(v18 + 96);
      if (v29) {
        free(v29);
      }
      *(void *)(v18 + 96) = v27;
      uint64_t DeviceID = _BonjourService_GetDeviceID(v18, v48);
      unsigned int v47 = DeviceID;
      if (DeviceID)
      {
        if (gLogCategory_BonjourBrowser <= 90)
        {
          if (gLogCategory_BonjourBrowser == -1)
          {
            if (!_LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x5Au)) {
              goto LABEL_41;
            }
            uint64_t DeviceID = v47;
          }
          LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_NANEndpointFound(BonjourBrowserRef, CUNANEndpoint *)", 0x5Au, (uint64_t)"### GetDeviceID failed: %#m", v31, v32, v33, v34, DeviceID);
        }
LABEL_41:
        free(v25);
LABEL_42:
        if (!v47) {
          return;
        }
        int v41 = gLogCategory_BonjourBrowser;
        goto LABEL_44;
      }
      uint64_t v35 = *(void *)(v18 + 104);
      if (v35)
      {
        if (!strcasecmp((const char *)(v35 + 16), v48))
        {
LABEL_40:
          _BonjourDevice_UpdateTXTQueries(v35);
          _BonjourBrowser_PostEvent(a1, 1, v35, 0);
          goto LABEL_41;
        }
        if (gLogCategory_BonjourIssues <= 40
          && (gLogCategory_BonjourIssues != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourIssues, 0x28u)))
        {
          LogPrintF((uint64_t)&gLogCategory_BonjourIssues, (uint64_t)"void _BonjourBrowser_NANEndpointFound(BonjourBrowserRef, CUNANEndpoint *)", 0x28u, (uint64_t)"Removing and re-adding %s.%s%s for NAN device ID update (%s -> %s)\n", v36, v37, v38, v39, *(void *)(v18 + 24));
        }
        _BonjourBrowser_RemoveService(a1, v18, 1);
        *(void *)(v18 + 104) = 0;
      }
      uint64_t v35 = a1 + 88;
      while (1)
      {
        uint64_t v35 = *(void *)v35;
        if (!v35) {
          break;
        }
        if (!strcasecmp((const char *)(v35 + 16), v48)) {
          goto LABEL_39;
        }
      }
      char v40 = malloc_type_calloc(1uLL, 0x68uLL, 0x1060040FDB03D26uLL);
      if (!v40) {
        goto LABEL_50;
      }
      uint64_t v35 = (uint64_t)v40;
      v40[1] = a1;
      __strlcpy_chk();
      *(void *)uint64_t v35 = *(void *)(a1 + 88);
      *(void *)(a1 + 88) = v35;
LABEL_39:
      *(void *)(v18 + 104) = v35;
      *(void *)(v18 + 8) = *(void *)(v35 + 88);
      *(void *)(v35 + 88) = v18;
      goto LABEL_40;
    }
    if (gLogCategory_BonjourBrowser > 90
      || gLogCategory_BonjourBrowser == -1 && !_LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x5Au))
    {
      goto LABEL_42;
    }
    uint64_t v44 = v47;
    int v42 = "### TXTRecordCreate failed: %#m";
LABEL_63:
    LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_NANEndpointFound(BonjourBrowserRef, CUNANEndpoint *)", 0x5Au, (uint64_t)v42, v5, v6, v7, v8, v44);
    goto LABEL_42;
  }
  unsigned int v47 = -6700;
  int v41 = gLogCategory_BonjourBrowser;
  if (gLogCategory_BonjourBrowser <= 60)
  {
    if (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x3Cu)) {
      LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_NANEndpointFound(BonjourBrowserRef, CUNANEndpoint *)", 0x3Cu, (uint64_t)"### Bonjour NAN found without service type: %@\n", v5, v6, v7, v8, (uint64_t)a2);
    }
    goto LABEL_42;
  }
LABEL_44:
  if (v41 <= 90 && (v41 != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x5Au))) {
    LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_NANEndpointFound(BonjourBrowserRef, CUNANEndpoint *)", 0x5Au, (uint64_t)"### Bonjour NAN found failed: %@, %#m\n", v5, v6, v7, v8, (uint64_t)a2);
  }
}

uint64_t _BonjourService_Create(uint64_t a1, const char *a2, const char *a3, const char *a4, unsigned int a5, unsigned char *a6, int a7, uint64_t *a8)
{
  int v9 = a7;
  int v22 = a7;
  unsigned int v16 = malloc_type_calloc(1uLL, 0x70uLL, 0x10B0040FB0F965DuLL);
  if (!v16) {
    return 4294960568;
  }
  uint64_t v17 = (uint64_t)v16;
  v16[2] = a1;
  uint64_t v18 = strdup(a2);
  *(void *)(v17 + 24) = v18;
  if (v18)
  {
    uint64_t v19 = strdup(a3);
    *(void *)(v17 + 32) = v19;
    if (v19)
    {
      uint64_t v20 = strdup(a4);
      *(void *)(v17 + 40) = v20;
      if (v20)
      {
        *(_DWORD *)(v17 + 48) = a5;
        if (a6 && *a6)
        {
          __strlcpy_chk();
          if (v9) {
            goto LABEL_11;
          }
        }
        else
        {
          if_indextoname(a5, (char *)(v17 + 52));
          if (v9) {
            goto LABEL_11;
          }
        }
        SocketGetInterfaceInfo(-1, (char *)(v17 + 52), 0, 0, 0, 0, 0, 0, 0, (uint64_t)&v22);
        int v9 = v22;
LABEL_11:
        *(_DWORD *)(v17 + 84) = v9;
        if (v9 > 63)
        {
          if (v9 != 128 && v9 != 64) {
            goto LABEL_19;
          }
        }
        else
        {
          if (v9 == 2)
          {
LABEL_18:
            *(unsigned char *)(v17 + 70) = 1;
LABEL_19:
            uint64_t result = 0;
            *a8 = v17;
            return result;
          }
          if (v9 != 4) {
            goto LABEL_19;
          }
        }
        *(unsigned char *)(v17 + 69) = 1;
        goto LABEL_18;
      }
    }
  }
  _BonjourService_Free(v17);
  return 4294901757;
}

uint64_t _BonjourService_GetDeviceID(uint64_t a1, void *a2)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  uint8_t valueLen = 0;
  uint64_t v3 = *(void *)(a1 + 96);
  uint64_t v4 = *(void *)(v3 + 8);
  uint64_t v5 = *(void *)(*(void *)(a1 + 16) + 152);
  if ((v5 & 0x800000000000) != 0
    || (uint64_t v7 = *(const char **)(a1 + 32), !strcasecmp(v7, "_airplay._tcp."))
    || !strcasecmp(v7, "_airplay-alt._tcp.")
    || !strcasecmp(v7, "_mfi-config._tcp."))
  {
    ValuePtr = (char *)TXTRecordGetValuePtr(v4, (const void *)(v3 + 16), "deviceid", &valueLen);
    if (ValuePtr)
    {
      uint64_t result = TextToHardwareAddress(ValuePtr, valueLen, 6, v63);
      if (result) {
        return result;
      }
      uint64_t v19 = 0;
      uint64_t v13 = __s;
      do
      {
        if (v13 == __s)
        {
          uint64_t v20 = __s;
        }
        else
        {
          *uint64_t v13 = 58;
          uint64_t v20 = v13 + 1;
        }
        unint64_t v21 = v63[v19];
        uint64_t v22 = v19 + 1;
        *uint64_t v20 = a0123456789abcd_0[v21 >> 4];
        char v23 = a0123456789abcd_0[v21 & 0xF];
        uint64_t v13 = v20 + 2;
        v20[1] = v23;
        uint64_t v19 = v22;
      }
      while (v22 != 6);
      goto LABEL_28;
    }
    return 4294960569;
  }
  if ((v5 & 0x800000000000000) != 0 || !strcasecmp(v7, "_hap._tcp."))
  {
    unint64_t v26 = (char *)TXTRecordGetValuePtr(v4, (const void *)(v3 + 16), "id", &valueLen);
    if (!v26) {
      return 4294960569;
    }
    uint64_t result = TextToHardwareAddress(v26, valueLen, 6, v63);
    if (!result)
    {
      uint64_t v27 = 0;
      uint64_t v13 = __s;
      do
      {
        if (v13 == __s)
        {
          size_t v28 = __s;
        }
        else
        {
          *uint64_t v13 = 58;
          size_t v28 = v13 + 1;
        }
        unint64_t v29 = v63[v27];
        uint64_t v30 = v27 + 1;
        *size_t v28 = a0123456789abcd_0[v29 >> 4];
        char v31 = a0123456789abcd_0[v29 & 0xF];
        uint64_t v13 = v28 + 2;
        v28[1] = v31;
        uint64_t v27 = v30;
      }
      while (v30 != 6);
      goto LABEL_28;
    }
  }
  else
  {
    if (!strcasecmp(v7, "_airport._tcp."))
    {
      uint64_t v60 = 0;
      uint64_t v61 = 0;
      if (!(_WORD)v4) {
        return 4294960553;
      }
      uint8_t valueLen = 0;
      long long v62 = (unsigned __int8 *)(v3 + 17);
      while (!ParseCommaSeparatedNameValuePair(v62, v3 + 17 + (unsigned __int16)v4 - 1, v65, 8, &v61, __s, &v60, &v62))
      {
        if (!strnicmpx(v65, v61, "waMA"))
        {
          uint8_t valueLen = v60;
          uint64_t result = TextToHardwareAddress(__s, v60, 6, v63);
          if (result) {
            return result;
          }
          uint64_t v39 = 0;
          uint64_t v13 = __s;
          do
          {
            if (v13 == __s)
            {
              char v40 = __s;
            }
            else
            {
              *uint64_t v13 = 58;
              char v40 = v13 + 1;
            }
            unint64_t v41 = v63[v39];
            uint64_t v42 = v39 + 1;
            *char v40 = a0123456789abcd_0[v41 >> 4];
            char v43 = a0123456789abcd_0[v41 & 0xF];
            uint64_t v13 = v40 + 2;
            v40[1] = v43;
            uint64_t v39 = v42;
          }
          while (v42 != 6);
          goto LABEL_28;
        }
      }
      return 4294960569;
    }
    if (!strcasecmp(v7, "_raop._tcp.") || !strcasecmp(v7, "_airplay-p2p._tcp."))
    {
      uint64_t v32 = *(char **)(a1 + 24);
      uint64_t v33 = strchr(v32, 64);
      if (!v33) {
        return 4294960554;
      }
      uint8_t valueLen = (_BYTE)v33 - (_BYTE)v32;
      uint64_t result = TextToHardwareAddress(v32, ((_BYTE)v33 - (_BYTE)v32), 6, v63);
      if (!result)
      {
        uint64_t v34 = 0;
        uint64_t v13 = __s;
        do
        {
          if (v13 == __s)
          {
            uint64_t v35 = __s;
          }
          else
          {
            *uint64_t v13 = 58;
            uint64_t v35 = v13 + 1;
          }
          unint64_t v36 = v63[v34];
          uint64_t v37 = v34 + 1;
          *uint64_t v35 = a0123456789abcd_0[v36 >> 4];
          char v38 = a0123456789abcd_0[v36 & 0xF];
          uint64_t v13 = v35 + 2;
          v35[1] = v38;
          uint64_t v34 = v37;
        }
        while (v37 != 6);
        goto LABEL_28;
      }
    }
    else
    {
      if (strcasecmp(v7, "_airdrop._tcp."))
      {
        if (!strcasecmp(v7, "_googlecast._tcp."))
        {
          uint64_t v49 = (unsigned __int8 *)TXTRecordGetValuePtr(v4, (const void *)(v3 + 16), "id", &valueLen);
          if (v49)
          {
            uint64_t v50 = SipHash(qword_18E417473, v49, valueLen);
            uint64_t v51 = 0;
            LOBYTE(v62) = BYTE5(v50);
            BYTE1(v62) = BYTE4(v50);
            BYTE2(v62) = BYTE3(v50);
            BYTE3(v62) = BYTE2(v50);
            BYTE4(v62) = BYTE1(v50);
            BYTE5(v62) = v50;
            long long v52 = __s;
            do
            {
              if (v52 == __s)
              {
                long long v53 = __s;
              }
              else
              {
                *long long v52 = 58;
                long long v53 = v52 + 1;
              }
              unint64_t v54 = v63[v51 - 7];
              uint64_t v55 = v51 + 1;
              *long long v53 = a0123456789abcd_0[v54 >> 4];
              char v56 = a0123456789abcd_0[v54 & 0xF];
              long long v52 = v53 + 2;
              v53[1] = v56;
              uint64_t v51 = v55;
            }
            while (v55 != 6);
            *long long v52 = 0;
LABEL_29:
            unsigned __int8 v24 = strlen(__s);
            if ((v24 & 0xC0) == 0)
            {
              uint64_t v25 = v24;
              memcpy(a2, __s, v24);
              uint64_t result = 0;
              *((unsigned char *)a2 + v25) = 0;
              return result;
            }
            return 4294960553;
          }
        }
        else
        {
          uint64_t v8 = (char *)TXTRecordGetValuePtr(v4, (const void *)(v3 + 16), "rpBA", &valueLen);
          if (v8)
          {
            int v9 = v8;
            uint8_t v10 = valueLen;
LABEL_14:
            uint64_t result = TextToHardwareAddress(v9, v10, 6, v63);
            if (result) {
              return result;
            }
            uint64_t v12 = 0;
            uint64_t v13 = __s;
            do
            {
              if (v13 == __s)
              {
                uint64_t v14 = __s;
              }
              else
              {
                *uint64_t v13 = 58;
                uint64_t v14 = v13 + 1;
              }
              unint64_t v15 = v63[v12];
              uint64_t v16 = v12 + 1;
              *uint64_t v14 = a0123456789abcd_0[v15 >> 4];
              char v17 = a0123456789abcd_0[v15 & 0xF];
              uint64_t v13 = v14 + 2;
              v14[1] = v17;
              uint64_t v12 = v16;
            }
            while (v16 != 6);
            goto LABEL_28;
          }
          int v57 = *(void **)(a1 + 72);
          if (v57)
          {
            int v58 = (const char *)objc_msgSend((id)objc_msgSend(v57, "identifier"), "UTF8String");
            if (v58)
            {
              int v9 = (char *)v58;
              size_t v59 = strlen(v58);
              uint8_t v10 = TruncatedUTF8Length(v9, v59, 0xFFuLL);
              uint8_t valueLen = v10;
              goto LABEL_14;
            }
          }
        }
        return 4294960569;
      }
      uint64_t result = TextToHardwareAddress(*(char **)(a1 + 24), 0xFFFFFFFFFFFFFFFFLL, 6, v63);
      if (!result)
      {
        uint64_t v44 = 0;
        uint64_t v13 = __s;
        do
        {
          if (v13 == __s)
          {
            uint64_t v45 = __s;
          }
          else
          {
            *uint64_t v13 = 58;
            uint64_t v45 = v13 + 1;
          }
          unint64_t v46 = v63[v44];
          uint64_t v47 = v44 + 1;
          char *v45 = a0123456789abcd_0[v46 >> 4];
          char v48 = a0123456789abcd_0[v46 & 0xF];
          uint64_t v13 = v45 + 2;
          v45[1] = v48;
          uint64_t v44 = v47;
        }
        while (v47 != 6);
LABEL_28:
        *uint64_t v13 = 0;
        goto LABEL_29;
      }
    }
  }
  return result;
}

void _BonjourBrowser_RemoveService(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(void **)(a2 + 104);
  if (!v3) {
    return;
  }
  uint64_t v4 = v3[11];
  if (v4)
  {
    uint64_t v6 = v3 + 11;
    if (v4 != a2)
    {
      while (1)
      {
        uint64_t v7 = v4;
        uint64_t v4 = *(void *)(v4 + 8);
        if (!v4) {
          goto LABEL_8;
        }
        if (v4 == a2)
        {
          uint64_t v6 = (void *)(v7 + 8);
          break;
        }
      }
    }
    void *v6 = *(void *)(a2 + 8);
    if (v3[11])
    {
LABEL_8:
      _BonjourBrowser_PostEvent(a1, 1, (uint64_t)v3, a2);
      if (a3)
      {
        _BonjourDevice_UpdateTXTQueries((uint64_t)v3);
      }
      return;
    }
  }
  uint64_t v8 = (void *)(a1 + 88);
  while (1)
  {
    int v9 = v8;
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      break;
    }
    if (v8 == v3)
    {
      *int v9 = *v3;
      break;
    }
  }
  _BonjourBrowser_PostEvent(a1, 2, (uint64_t)v3, a2);
  _BonjourDevice_Free(v3);
}

void _BonjourDevice_UpdateTXTQueries(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 88);
  uint64_t BestService = _BonjourDevice_GetBestService(v2);
  if (BestService)
  {
    uint64_t v4 = BestService;
    if ((*(_DWORD *)(a1 + 96) & 0x80000000) != 0)
    {
      uint64_t v5 = *(void *)(BestService + 96);
      if (v5)
      {
        BOOL v6 = 0;
        if (!strcasecmp(*(const char **)(BestService + 32), "_raop._tcp."))
        {
          if ((uint8_t valueLen = 0,
                uint64_t v17 = 0,
                uint64_t v8 = (const void *)(v5 + 16),
                uint16_t v9 = *(_WORD *)(v5 + 8),
                (ValuePtr = (char *)TXTRecordGetValuePtr(v9, v8, "ft", &valueLen)) != 0)
            && SNScanF(ValuePtr, valueLen, "%llx", v11, v12, v13, v14, v15, (int)&v17) == 1
            && (v17 & 0x40000000) != 0
            || (uint64_t v16 = (unsigned __int8 *)TXTRecordGetValuePtr(v9, v8, "am", &valueLen)) != 0
            && !strnicmp_prefix(v16, valueLen, "AppleTV"))
          {
            BOOL v6 = 1;
          }
        }
        *(_DWORD *)(a1 + 96) = v6;
        uint64_t v2 = *(void *)(a1 + 88);
      }
    }
    for (; v2; uint64_t v2 = *(void *)(v2 + 8))
    {
      if (v2 != v4 || *(int *)(a1 + 96) >= 1)
      {
        uint64_t v7 = *(_DNSServiceRef_t **)(v2 + 88);
        if (v7)
        {
          DNSServiceRefDeallocate(v7);
          *(void *)(v2 + 88) = 0;
        }
      }
    }
    if (!*(unsigned char *)(v4 + 80) && *(int *)(a1 + 96) <= 0 && !*(void *)(v4 + 88)) {
      _BonjourService_StartTXTQuery(v4);
    }
  }
}

void _BonjourBrowser_PostEvent(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  CFMutableDictionaryRef MutableCopy = (CFMutableDictionaryRef)a3;
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 168) || *(void *)(a1 + 184))
  {
    unsigned int v25 = 0;
    if (!a3)
    {
      CFDictionaryRef v13 = 0;
      goto LABEL_14;
    }
    uint64_t v8 = _BonjourDevice_CreateDictionary(a3, &v25);
    if (v8)
    {
      CFDictionaryRef v13 = v8;
      uint64_t v14 = (const void *)*((void *)MutableCopy + 10);
      if (v14) {
        CFRelease(v14);
      }
      *((void *)MutableCopy + 10) = v13;
      if (a4)
      {
        CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v13);
        if (!MutableCopy) {
          goto LABEL_28;
        }
        Dictionary = _BonjourService_CreateDictionary(a4, (int *)&v25);
        if (!Dictionary) {
          goto LABEL_25;
        }
        uint64_t v16 = Dictionary;
        values[0] = Dictionary;
        CFArrayRef v17 = CFArrayCreate(0, (const void **)values, 1, MEMORY[0x1E4F1D510]);
        CFRelease(v16);
        if (!v17) {
          goto LABEL_28;
        }
        CFDictionarySetValue(MutableCopy, @"removedServices", v17);
        CFRelease(v17);
        CFDictionaryRef v13 = MutableCopy;
      }
      else
      {
        CFMutableDictionaryRef MutableCopy = 0;
      }
LABEL_14:
      uint64_t v18 = *(const void **)(a1 + 184);
      if (v18)
      {
        uint64_t v19 = _Block_copy(v18);
        if (!v19)
        {
          unsigned int v24 = -6700;
          goto LABEL_24;
        }
        uint64_t v20 = v19;
        if (v13) {
          CFRetain(v13);
        }
        unint64_t v21 = *(NSObject **)(a1 + 160);
        values[0] = (void *)MEMORY[0x1E4F143A8];
        values[1] = (void *)3221225472;
        values[2] = ___BonjourBrowser_PostEventEx_block_invoke;
        values[3] = &unk_1E55BD518;
        int v27 = a2;
        values[4] = v20;
        values[5] = v13;
        dispatch_async(v21, values);
        goto LABEL_23;
      }
      uint64_t v22 = malloc_type_calloc(1uLL, 0x20uLL, 0x10E0040718843B5uLL);
      if (v22)
      {
        char v23 = v22;
        *((_DWORD *)v22 + 4) = a2;
        *uint64_t v22 = *(_OWORD *)(a1 + 168);
        *((void *)v22 + 3) = v13;
        if (v13) {
          CFRetain(v13);
        }
        dispatch_async_f(*(dispatch_queue_t *)(a1 + 160), v23, (dispatch_function_t)_BonjourBrowser_PostEventOnEventQueue);
LABEL_23:
        unsigned int v24 = 0;
LABEL_24:
        unsigned int v25 = v24;
LABEL_25:
        if (MutableCopy) {
          CFRelease(MutableCopy);
        }
        return;
      }
LABEL_28:
      unsigned int v24 = -6728;
      goto LABEL_24;
    }
    if (gLogCategory_BonjourBrowser <= 90
      && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x5Au)))
    {
      LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"OSStatus _BonjourBrowser_PostEvent(BonjourBrowserRef, BonjourBrowserEventType, BonjourDeviceRef, BonjourServiceRef)", 0x5Au, (uint64_t)"### CreateDictionary failed: %#m", v9, v10, v11, v12, v25);
    }
  }
}

__CFDictionary *_BonjourDevice_CreateDictionary(uint64_t a1, _DWORD *a2)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  int v38 = 0;
  uint64_t BestService = _BonjourDevice_GetBestService(*(void *)(a1 + 88));
  if (!BestService || (uint64_t v5 = BestService, (v6 = *(void *)(BestService + 96)) == 0))
  {
    CFDictionaryRef v14 = *(const __CFDictionary **)(a1 + 80);
    if (!v14)
    {
      CFMutableDataRef Mutable = 0;
      int v34 = -6745;
      goto LABEL_49;
    }
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v14);
    CFMutableDataRef Mutable = MutableCopy;
    if (MutableCopy)
    {
      CFDictionaryRemoveValue(MutableCopy, @"services");
      goto LABEL_35;
    }
LABEL_47:
    int v34 = -6728;
LABEL_49:
    int v38 = v34;
    goto LABEL_36;
  }
  CFIndex v7 = *(void *)(v6 + 8);
  CFMutableDataRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    goto LABEL_47;
  }
  uint64_t v9 = *(const char **)(v5 + 32);
  if (!strcasecmp(v9, "_raop._tcp.") || !strcasecmp(v9, "_airplay-p2p._tcp."))
  {
    uint64_t v11 = *(char **)(v5 + 24);
    uint64_t v16 = strchr(v11, 64);
    if (v16) {
      uint64_t v11 = v16 + 1;
    }
  }
  else
  {
    int v10 = strcasecmp(v9, "_airplay._tcp.");
    uint64_t v11 = *(char **)(v5 + 24);
    if (!v10)
    {
      uint64_t v12 = strchr(*(char **)(v5 + 24), 64);
      if (v12)
      {
        CFDictionaryRef v13 = v12;
        if (TextToHardwareAddress(v11, ((_BYTE)v12 - (_BYTE)v11), 6, __s)) {
          uint64_t v11 = *(char **)(v5 + 24);
        }
        else {
          uint64_t v11 = v13 + 1;
        }
      }
    }
  }
  size_t v17 = strlen(v11);
  CFDictionarySetCString(Mutable, @"name", v11, v17);
  CFDictionarySetCString(Mutable, @"deviceID", (const char *)(a1 + 16), -1);
  int v38 = DNSServiceConstructFullNameEx(__s, *(void *)(v5 + 24), *(char **)(v5 + 32), *(unsigned __int8 **)(v5 + 40));
  if (!v38)
  {
    size_t v18 = strlen(__s);
    snprintf(&__s[v18], 1073 - v18, "%%%u", *(_DWORD *)(v5 + 48));
    CFDictionarySetCString(Mutable, @"dnsName", __s, -1);
  }
  double Current = CFAbsoluteTimeGetCurrent();
  CFDictionarySetDouble(Mutable, @"lastSeen", Current);
  CFDictionarySetCString(Mutable, @"serviceType", *(const char **)(v5 + 32), -1);
  if (strcasecmp(*(const char **)(v5 + 32), "_airport._tcp."))
  {
    CFDictionarySetData(Mutable, @"txt", (UInt8 *)(v6 + 16), v7);
LABEL_24:
    uint64_t v24 = *(void *)(a1 + 88);
    if (v24)
    {
      unsigned int v25 = 0;
      CFMutableArrayRef v26 = 0;
      char v27 = 1;
      uint64_t v28 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
      do
      {
        if (!*(unsigned char *)(v24 + 69)) {
          char v27 = 0;
        }
        int v29 = *(_DWORD *)(v24 + 84);
        if (!v26)
        {
          CFMutableArrayRef v26 = CFArrayCreateMutable(0, 0, v28);
          if (!v26)
          {
            int v33 = -6728;
            goto LABEL_45;
          }
        }
        uint64_t v30 = _BonjourService_CreateDictionary(v24, &v38);
        if (!v30)
        {
          CFRelease(v26);
          goto LABEL_46;
        }
        char v31 = v30;
        v25 |= v29;
        CFArrayAppendValue(v26, v30);
        CFRelease(v31);
        uint64_t v24 = *(void *)(v24 + 8);
      }
      while (v24);
      CFDictionarySetValue(Mutable, @"services", v26);
      CFRelease(v26);
      if (v27) {
        goto LABEL_40;
      }
      if (!v25) {
        goto LABEL_35;
      }
    }
    else
    {
      unsigned int v25 = 0;
LABEL_40:
      CFDictionarySetValue(Mutable, @"p2pOnly", (const void *)*MEMORY[0x1E4F1CFD0]);
      if (!v25) {
        goto LABEL_35;
      }
    }
    CFDictionarySetInt64(Mutable, @"TrTy", v25);
LABEL_35:
    int v38 = 0;
    goto LABEL_36;
  }
  txtuint64_t Record = 0uLL;
  *(void *)valueSize = 0;
  uint64_t v36 = 0;
  if (v7)
  {
    TXTRecordCreate(&txtRecord, 0x100u, buffer);
    uint64_t v20 = (unsigned __int8 *)(v6 + 17);
    uint64_t v37 = (unsigned __int8 *)(v6 + 17);
    unint64_t v21 = v6 + v7 + 16;
    while (!ParseCommaSeparatedNameValuePair(v20, v21, key, 7, &v36, value, valueSize, &v37))
    {
      key[v36] = 0;
      TXTRecordSetValue(&txtRecord, key, valueSize[0], value);
      uint64_t v20 = v37;
    }
    BytesPtr = (UInt8 *)TXTRecordGetBytesPtr(&txtRecord);
    unsigned int Length = TXTRecordGetLength(&txtRecord);
    CFDictionarySetData(Mutable, @"txt", BytesPtr, Length);
    TXTRecordDeallocate(&txtRecord);
    goto LABEL_24;
  }
  int v33 = -6743;
LABEL_45:
  int v38 = v33;
LABEL_46:
  CFRelease(Mutable);
  CFMutableDataRef Mutable = 0;
LABEL_36:
  if (a2) {
    *a2 = v38;
  }
  return Mutable;
}

__CFDictionary *_BonjourService_CreateDictionary(uint64_t a1, int *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  CFMutableDataRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    int v8 = -6728;
    if (!a2) {
      return Mutable;
    }
    goto LABEL_11;
  }
  if (!DNSServiceConstructFullNameEx(__s, *(void *)(a1 + 24), *(char **)(a1 + 32), *(unsigned __int8 **)(a1 + 40)))
  {
    size_t v5 = strlen(__s);
    snprintf(&__s[v5], 1073 - v5, "%%%u", *(_DWORD *)(a1 + 48));
    CFDictionarySetCString(Mutable, @"dnsName", __s, -1);
  }
  CFDictionarySetCString(Mutable, @"domain", *(const char **)(a1 + 40), -1);
  CFDictionarySetInt64(Mutable, @"ifindex", *(unsigned int *)(a1 + 48));
  CFDictionarySetCString(Mutable, @"ifname", (const char *)(a1 + 52), -1);
  uint64_t v6 = *(const void **)(a1 + 72);
  if (v6) {
    CFDictionarySetValue(Mutable, @"nanEP", v6);
  }
  CFIndex v7 = (const void **)MEMORY[0x1E4F1CFD0];
  if (*(unsigned char *)(a1 + 69)) {
    CFDictionarySetValue(Mutable, @"p2p", (const void *)*MEMORY[0x1E4F1CFD0]);
  }
  CFDictionarySetCString(Mutable, @"rawName", *(const char **)(a1 + 24), -1);
  CFDictionarySetInt64(Mutable, @"transportType", *(unsigned int *)(a1 + 84));
  int v8 = *(unsigned __int8 *)(a1 + 70);
  if (*(unsigned char *)(a1 + 70))
  {
    CFDictionarySetValue(Mutable, @"wifi", *v7);
    int v8 = 0;
  }
  if (a2) {
LABEL_11:
  }
    *a2 = v8;
  return Mutable;
}

void _BonjourBrowser_PostEventOnEventQueue(void *a1)
{
  ((void (*)(void, void, void))*a1)(*((unsigned int *)a1 + 4), a1[3], a1[1]);
  uint64_t v2 = (const void *)a1[3];
  if (v2) {
    CFRelease(v2);
  }
  free(a1);
}

uint64_t _BonjourDevice_GetBestService(uint64_t a1)
{
  if (!a1) {
    return a1;
  }
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  uint64_t v4 = a1;
  do
  {
    if (!strcmp(*(const char **)(v4 + 40), "local."))
    {
      if (!*(unsigned char *)(v4 + 70)) {
        return v4;
      }
      if (!v3)
      {
        if (*(unsigned char *)(v4 + 69)) {
          uint64_t v3 = 0;
        }
        else {
          uint64_t v3 = v4;
        }
      }
      if (!v2) {
        uint64_t v2 = v4;
      }
    }
    uint64_t v4 = *(void *)(v4 + 8);
  }
  while (v4);
  if (!v3)
  {
    uint64_t v3 = v2;
    if (!v2) {
      return a1;
    }
  }
  return v3;
}

uint64_t _BonjourService_StartTXTQuery(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint64_t result = DNSServiceConstructFullName(fullName, *(const char *const *)(a1 + 24), *(const char *const *)(a1 + 32), *(const char *const *)(a1 + 40));
  if (!result)
  {
    DNSServiceRef sdRef = *(DNSServiceRef *)(*(void *)(a1 + 16) + 24);
    uint64_t result = DNSServiceQueryRecord(&sdRef, 0x404000u, *(_DWORD *)(a1 + 48), fullName, 0x10u, 1u, (DNSServiceQueryRecordReply)_BonjourService_TXTHandler, (void *)a1);
    if (!result) {
      *(void *)(a1 + 88) = sdRef;
    }
  }
  return result;
}

void _BonjourService_TXTHandler(int a1, unsigned __int8 a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t __n, void *__s1, uint64_t a10, void *a11)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = a11[2];
  if (a4)
  {
    if (gLogCategory_BonjourBrowser <= 60
      && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x3Cu)))
    {
      LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourService_TXTHandler(DNSServiceRef, DNSServiceFlags, uint32_t, DNSServiceErrorType, const char *, uint16_t, uint16_t, uint16_t, const void *, uint32_t, void *)", 0x3Cu, (uint64_t)"### Browser for %s TXT error: %#m\n", a5, a6, a7, __n, *(void *)(v11 + 128));
    }
  }
  else
  {
    if (*(unsigned char *)(v11 + 96))
    {
      unsigned int v12 = __n;
      unsigned int v13 = a2;
      if (gLogCategory_BonjourBrowser <= 20
        && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x14u)))
      {
        CFDictionaryRef v14 = "Add";
        if (((v13 >> 1) & 1) == 0) {
          CFDictionaryRef v14 = "Rmv";
        }
        LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourService_TXTHandler(DNSServiceRef, DNSServiceFlags, uint32_t, DNSServiceErrorType, const char *, uint16_t, uint16_t, uint16_t, const void *, uint32_t, void *)", 0x14u, (uint64_t)"Bonjour TXT %s %s on %u\n", a5, a6, a7, __n, (uint64_t)v14);
      }
      uint64_t v16 = (void **)(a11 + 12);
      uint64_t v15 = (void *)a11[12];
      if ((v13 & 2) == 0)
      {
        if (v15)
        {
          size_t v17 = a11 + 12;
          while (1)
          {
            size_t v18 = v15;
            if (v15[1] == v12 && !memcmp(__s1, v15 + 2, v12)) {
              break;
            }
            uint64_t v15 = (void *)*v15;
            size_t v17 = v18;
            if (!*v18) {
              goto LABEL_15;
            }
          }
          *size_t v17 = *v15;
          free(v15);
        }
        else
        {
LABEL_15:
          if (gLogCategory_BonjourBrowser <= 40
            && (gLogCategory_BonjourBrowser != -1
             || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x28u)))
          {
            LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourService_RemoveRData(BonjourServiceRef, const void *, size_t)", 0x28u, (uint64_t)"Removed RData missing for %s.%s%s %%%u\n%1.1H\n", a5, a6, a7, __n, a11[3]);
          }
        }
        goto LABEL_25;
      }
      if (!v15) {
        goto LABEL_42;
      }
      int v19 = gLogCategory_BonjourIssues;
      if (gLogCategory_BonjourIssues > 40)
      {
LABEL_39:
        while (v15[1] != v12 || memcmp(__s1, v15 + 2, v12))
        {
          uint64_t v15 = (void *)*v15;
          if (!v15) {
            goto LABEL_42;
          }
        }
        goto LABEL_25;
      }
      if (gLogCategory_BonjourIssues != -1) {
        goto LABEL_75;
      }
      if (!_LogCategory_Initialize((uint64_t)&gLogCategory_BonjourIssues, 0x28u)) {
        goto LABEL_38;
      }
      int v19 = gLogCategory_BonjourIssues;
      if (gLogCategory_BonjourIssues <= 40)
      {
LABEL_75:
        if (v19 != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourIssues, 0x28u)) {
          LogPrintF((uint64_t)&gLogCategory_BonjourIssues, (uint64_t)"OSStatus _BonjourService_AddRData(BonjourServiceRef, const void *, size_t)", 0x28u, (uint64_t)"Add without remove new:   %s.%s%s%%%u: %#{txt}\n", a5, a6, a7, __n, a11[3]);
        }
      }
      uint64_t v20 = *v16;
      if (!*v16) {
        goto LABEL_42;
      }
      uint64_t v21 = 1;
      do
      {
        if (gLogCategory_BonjourIssues <= 40
          && (gLogCategory_BonjourIssues != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourIssues, 0x28u)))
        {
          LogPrintF((uint64_t)&gLogCategory_BonjourIssues, (uint64_t)"OSStatus _BonjourService_AddRData(BonjourServiceRef, const void *, size_t)", 0x28u, (uint64_t)"Add without remove old %d: %s.%s%s%%%u: %#{txt}\n", a5, a6, a7, __n, v21);
        }
        uint64_t v21 = (v21 + 1);
        uint64_t v20 = (void *)*v20;
      }
      while (v20);
LABEL_38:
      uint64_t v15 = *v16;
      if (*v16) {
        goto LABEL_39;
      }
LABEL_42:
      uint64_t v22 = malloc_type_calloc(1uLL, v12 + 16, 0x592042F3uLL);
      if (v22)
      {
        char v23 = v22;
        *uint64_t v22 = *v16;
        v22[1] = v12;
        memcpy(v22 + 2, __s1, v12);
        *uint64_t v16 = v23;
        goto LABEL_44;
      }
LABEL_25:
      if (!*v16) {
        return;
      }
LABEL_44:
      if (_BonjourService_GetDeviceID((uint64_t)a11, v30)) {
        return;
      }
      uint64_t v24 = a11[13];
      if (v24)
      {
        if (!strcasecmp((const char *)(v24 + 16), v30))
        {
LABEL_59:
          _BonjourDevice_UpdateTXTQueries(v24);
          _BonjourBrowser_PostEvent(v11, 1, v24, 0);
          return;
        }
        if (gLogCategory_BonjourIssues <= 40
          && (gLogCategory_BonjourIssues != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourIssues, 0x28u)))
        {
          LogPrintF((uint64_t)&gLogCategory_BonjourIssues, (uint64_t)"void _BonjourService_TXTHandler(DNSServiceRef, DNSServiceFlags, uint32_t, DNSServiceErrorType, const char *, uint16_t, uint16_t, uint16_t, const void *, uint32_t, void *)", 0x28u, (uint64_t)"Removing and re-adding %s.%s%s for TXT device ID update (%s -> %s)\n", v25, v26, v27, v28, a11[3]);
        }
        _BonjourBrowser_RemoveService(v11, a11, 1);
        a11[13] = 0;
      }
      uint64_t v24 = v11 + 88;
      while (1)
      {
        uint64_t v24 = *(void *)v24;
        if (!v24) {
          break;
        }
        if (!strcasecmp((const char *)(v24 + 16), v30)) {
          goto LABEL_58;
        }
      }
      int v29 = malloc_type_calloc(1uLL, 0x68uLL, 0x1060040FDB03D26uLL);
      if (!v29) {
        return;
      }
      uint64_t v24 = (uint64_t)v29;
      v29[24] = -1;
      *((void *)v29 + 1) = v11;
      __strlcpy_chk();
      *(void *)uint64_t v24 = *(void *)(v11 + 88);
      *(void *)(v11 + 88) = v24;
LABEL_58:
      a11[13] = v24;
      a11[1] = *(void *)(v24 + 88);
      *(void *)(v24 + 88) = a11;
      goto LABEL_59;
    }
    if (gLogCategory_BonjourBrowser <= 60
      && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x3Cu)))
    {
      LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourService_TXTHandler(DNSServiceRef, DNSServiceFlags, uint32_t, DNSServiceErrorType, const char *, uint16_t, uint16_t, uint16_t, const void *, uint32_t, void *)", 0x3Cu, (uint64_t)"### TXT response after stop\n", a5, a6, a7, __n, (uint64_t)__s1);
    }
  }
}

void _BonjourDevice_Free(void *a1)
{
  uint64_t v2 = (const void *)a1[10];
  if (v2) {
    CFRelease(v2);
  }
  free(a1);
}

void _BonjourService_Free(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    free(v2);
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v3 = *(void **)(a1 + 32);
  if (v3)
  {
    free(v3);
    *(void *)(a1 + 32) = 0;
  }
  uint64_t v4 = *(void **)(a1 + 40);
  if (v4)
  {
    free(v4);
    *(void *)(a1 + 40) = 0;
  }

  *(void *)(a1 + 72) = 0;
  uint64_t v5 = *(_DNSServiceRef_t **)(a1 + 88);
  if (v5)
  {
    DNSServiceRefDeallocate(v5);
    *(void *)(a1 + 88) = 0;
  }
  while (1)
  {
    uint64_t v6 = *(void **)(a1 + 96);
    if (!v6) {
      break;
    }
    *(void *)(a1 + 96) = *v6;
    free(v6);
  }
  free((void *)a1);
}

void _BonjourBrowser_NANEndpointLost(uint64_t a1, void *a2)
{
  uint64_t v4 = objc_msgSend((id)objc_msgSend(a2, "serviceType"), "UTF8String");
  if (v4)
  {
    uint64_t v9 = (const char *)v4;
    uint64_t v10 = objc_msgSend((id)objc_msgSend(a2, "name"), "UTF8String");
    if (v10) {
      uint64_t v15 = (const char *)v10;
    }
    else {
      uint64_t v15 = "";
    }
    int v16 = *(_DWORD *)(a1 + 72);
    if (gLogCategory_BonjourBrowser <= 20
      && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x14u)))
    {
      LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_NANEndpointLost(BonjourBrowserRef, CUNANEndpoint *)", 0x14u, (uint64_t)"Bonjour NAN lost: %s.%s%s on %u\n", v11, v12, v13, v14, (uint64_t)v15);
    }
    uint64_t v18 = a1 + 80;
    uint64_t v17 = *(void *)(a1 + 80);
    if (v17)
    {
      while (1)
      {
        int v19 = (void *)v18;
        uint64_t v18 = v17;
        if (*(_DWORD *)(v17 + 48) == v16
          && !strcasecmp(*(const char **)(v17 + 24), v15)
          && !strcasecmp(*(const char **)(v18 + 32), v9)
          && !strcasecmp(*(const char **)(v18 + 40), "local."))
        {
          break;
        }
        uint64_t v17 = *(void *)v18;
        if (!*(void *)v18) {
          return;
        }
      }
      *int v19 = *(void *)v18;
      _BonjourBrowser_RemoveService(a1, v18, 1);
      _BonjourService_Free(v18);
    }
  }
  else if (gLogCategory_BonjourBrowser <= 60 {
         && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x3Cu)))
  }
  {
    LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_NANEndpointLost(BonjourBrowserRef, CUNANEndpoint *)", 0x3Cu, (uint64_t)"### Bonjour NAN lost without service type: %@\n", v5, v6, v7, v8, (uint64_t)a2);
  }
}

uint64_t _BonjourBrowser_RetryTimerFired(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (gLogCategory_BonjourBrowser <= 50
    && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x32u)))
  {
    LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_RetryTimerFired(void *)", 0x32u, (uint64_t)"Retrying Bonjour start for %s after failure\n", a5, a6, a7, a8, *(void *)(a1 + 128));
  }
  uint64_t v9 = *(NSObject **)(a1 + 112);
  if (v9)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 112));
    dispatch_release(v9);
    *(void *)(a1 + 112) = 0;
  }
  *(void *)(a1 + 104) = mach_absolute_time();
  return _BonjourBrowser_EnsureStarted((DNSServiceRef *)a1);
}

void _BonjourBrowser_IgnoredBrowseHandler(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, char *a5, const char *a6, const char *a7, uint64_t a8, uint64_t a9)
{
  if ((~*(void *)(a8 + 152) & 0x3000000000000000) == 0)
  {
    unsigned int v16 = *(_DWORD *)(a8 + 120);
    if (!v16)
    {
      unsigned int v16 = if_nametoindex("awdl0");
      *(_DWORD *)(a8 + 120) = v16;
    }
    if (a3 && v16 == a3)
    {
      _BonjourBrowser_BrowseHandler(v16, a2, a3, a4, a5, a6, a7, a8, a9);
    }
  }
}

void _BonjourBrowser_BrowseHandler(int a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, char *a5, const char *a6, const char *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    if (a4 == -65563)
    {
      if (gLogCategory_BonjourBrowser <= 60
        && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x3Cu)))
      {
        LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_BrowseHandler(DNSServiceRef, DNSServiceFlags, uint32_t, DNSServiceErrorType, const char *, const char *, const char *, void *)", 0x3Cu, (uint64_t)"### Browser for %s server crashed\n", (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8, *(void *)(a8 + 128));
      }
      _BonjourBrowser_HandleError(a8, -65563, a3, a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8, a9);
    }
    else if (gLogCategory_BonjourBrowser <= 60 {
           && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x3Cu)))
    }
    {
      LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_BrowseHandler(DNSServiceRef, DNSServiceFlags, uint32_t, DNSServiceErrorType, const char *, const char *, const char *, void *)", 0x3Cu, (uint64_t)"### Browser for %s browse error: %#m\n", (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8, *(void *)(a8 + 128));
    }
    return;
  }
  if (*(unsigned char *)(a8 + 96))
  {
    unsigned int v13 = a3;
    unsigned int v14 = a2;
    if (gLogCategory_BonjourBrowser <= 20
      && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x14u)))
    {
      uint64_t v15 = "Add";
      if (((v14 >> 1) & 1) == 0) {
        uint64_t v15 = "Rmv";
      }
      LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_BrowseHandler(DNSServiceRef, DNSServiceFlags, uint32_t, DNSServiceErrorType, const char *, const char *, const char *, void *)", 0x14u, (uint64_t)"Bonjour PTR %s %s.%s%s on %u\n", (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8, (uint64_t)v15);
    }
    cStr[0] = 0;
    int v31 = 0;
    if ((v14 & 2) != 0 && (*(unsigned char *)(a8 + 158) & 0x7B) != 0)
    {
      if_indextoname(v13, cStr);
      SocketGetInterfaceInfo(-1, cStr, 0, 0, 0, 0, 0, 0, 0, (uint64_t)&v31);
      uint64_t v20 = *(void *)(a8 + 152);
      if ((v20 & 0x8000000000000) != 0 && (v31 & 3) != 0
        || (v20 & 0x20000000000000) != 0 && v31 == 2
        || (v20 & 0x10000000000000) != 0 && v31 == 4
        || (v20 & 0x40000000000000) != 0 && v31 == 8
        || (v20 & 0x1000000000000) != 0 && v31 == 16)
      {
LABEL_34:
        if (gLogCategory_BonjourBrowser <= 20
          && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x14u)))
        {
          LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_BrowseHandler(DNSServiceRef, DNSServiceFlags, uint32_t, DNSServiceErrorType, const char *, const char *, const char *, void *)", 0x14u, (uint64_t)"Ignoring interface: Nm '%s', ST '%s', IFI %u (%s), %#ll{flags}\n", v16, v17, v18, v19, (uint64_t)a5);
        }
        return;
      }
      if ((v20 & 0x2000000000000) != 0)
      {
        CFStringRef v21 = CFStringCreateWithCString(0, cStr, 0x8000100u);
        if (v21)
        {
          CFStringRef v22 = v21;
          uint64_t v23 = _SCNetworkInterfaceCreateWithBSDName();
          if (v23)
          {
            uint64_t v24 = (const void *)v23;
            int IsThunderbolt = _SCNetworkInterfaceIsThunderbolt();
            CFRelease(v24);
            CFRelease(v22);
            if (IsThunderbolt) {
              goto LABEL_34;
            }
          }
          else
          {
            CFRelease(v22);
          }
        }
      }
    }
    uint64_t v27 = a8 + 80;
    uint64_t v26 = *(void *)(a8 + 80);
    if (!v26)
    {
LABEL_51:
      uint64_t v32 = 0;
      if ((v14 & 2) == 0 || _BonjourService_Create(a8, a5, a6, a7, v13, cStr, v31, &v32)) {
        return;
      }
      uint64_t v29 = v32;
      if (!_BonjourService_StartTXTQuery(v32))
      {
        *(void *)uint64_t v27 = v29;
        return;
      }
      uint64_t v30 = v29;
LABEL_55:
      _BonjourService_Free(v30);
      return;
    }
    while (1)
    {
      uint64_t v28 = (void *)v27;
      uint64_t v27 = v26;
      if (*(_DWORD *)(v26 + 48) == v13
        && !strcasecmp(*(const char **)(v26 + 24), a5)
        && !strcasecmp(*(const char **)(v27 + 32), a6)
        && !strcasecmp(*(const char **)(v27 + 40), a7))
      {
        break;
      }
      uint64_t v26 = *(void *)v27;
      if (!*(void *)v27) {
        goto LABEL_51;
      }
    }
    if ((v14 & 2) == 0)
    {
      *uint64_t v28 = *(void *)v27;
      _BonjourBrowser_RemoveService(a8, v27, 1);
      uint64_t v30 = v27;
      goto LABEL_55;
    }
  }
  else if (gLogCategory_BonjourBrowser <= 60 {
         && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x3Cu)))
  }
  {
    LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_BrowseHandler(DNSServiceRef, DNSServiceFlags, uint32_t, DNSServiceErrorType, const char *, const char *, const char *, void *)", 0x3Cu, (uint64_t)"### Browse response after stop\n", (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8, a9);
  }
}

void BonjourBrowser_Stop(void *a1)
{
  CFRetain(a1);
  uint64_t v2 = a1[2];
  dispatch_async_f(v2, a1, (dispatch_function_t)_BonjourBrowser_Stop);
}

void _BonjourBrowser_Stop(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = *(unsigned __int8 *)(a1 + 96);
  *(unsigned char *)(a1 + 96) = 0;
  if (v9
    && gLogCategory_BonjourBrowser <= 30
    && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x1Eu)))
  {
    LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_Stop(void *)", 0x1Eu, (uint64_t)"Stopping browse for %s\n", a5, a6, a7, a8, *(void *)(a1 + 128));
  }
  uint64_t v10 = *(NSObject **)(a1 + 112);
  if (v10)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 112));
    dispatch_release(v10);
    *(void *)(a1 + 112) = 0;
  }
  _BonjourBrowser_NANEnsureStopped(a1, 1, a3, a4, a5, a6, a7, a8);
  _BonjourBrowser_EnsureStoppedDNSSD((void *)a1);
  if (v9)
  {
    _BonjourBrowser_PostEvent(a1, 3, 0, 0);
    if (gLogCategory_BonjourBrowser <= 30
      && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x1Eu)))
    {
      LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_Stop(void *)", 0x1Eu, (uint64_t)"Stopped browse for %s\n", v11, v12, v13, v14, *(void *)(a1 + 128));
    }
    CFRelease((CFTypeRef)a1);
  }
  uint64_t v15 = *(void **)(a1 + 128);
  if (v15)
  {
    free(v15);
    *(void *)(a1 + 128) = 0;
  }
  uint64_t v16 = *(void **)(a1 + 136);
  if (v16)
  {
    free(v16);
    *(void *)(a1 + 136) = 0;
  }
  uint64_t v17 = *(void **)(a1 + 144);
  if (v17)
  {
    free(v17);
    *(void *)(a1 + 144) = 0;
  }
  CFRelease((CFTypeRef)a1);
}

uint64_t BonjourBrowser_CopyDevices(uint64_t a1, _DWORD *a2)
{
  uint64_t v5 = 0;
  uint64_t v6 = 1;
  uint64_t context = a1;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), &context, (dispatch_function_t)_BonjourBrowser_CopyDevices);
  if (a2) {
    *a2 = v6;
  }
  return v5;
}

void _BonjourBrowser_CopyDevices(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    uint64_t v3 = Mutable;
    uint64_t v4 = *(void **)(*(void *)a1 + 88);
    if (v4)
    {
      int v8 = 0;
      do
      {
        uint64_t v5 = _BonjourDevice_CreateDictionary((uint64_t)v4, &v8);
        if (v5)
        {
          uint64_t v6 = v5;
          CFArrayAppendValue(v3, v5);
          CFRelease(v6);
        }
        uint64_t v4 = (void *)*v4;
      }
      while (v4);
    }
    int v7 = 0;
    *(void *)(a1 + 8) = v3;
  }
  else
  {
    int v7 = -6728;
  }
  *(_DWORD *)(a1 + 16) = v7;
}

void BonjourBrowser_ReconfirmDevice(void *a1, const void *a2)
{
}

void BonjourBrowser_ReconfirmDeviceEx(void *a1, const void *a2, const char *a3)
{
  uint64_t v6 = malloc_type_malloc(0x18uLL, 0x70040A71FDFA8uLL);
  if (v6)
  {
    int v7 = v6;
    void *v6 = a1;
    v6[1] = a2;
    if (a3) {
      int v8 = strdup(a3);
    }
    else {
      int v8 = 0;
    }
    v7[2] = v8;
    CFRetain(a2);
    CFRetain(a1);
    int v9 = a1[2];
    dispatch_async_f(v9, v7, (dispatch_function_t)_BonjourBrowser_ReconfirmDevice);
  }
}

void _BonjourBrowser_ReconfirmDevice(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  v15[0] = 0;
  CFDictionaryRef v2 = *(const __CFDictionary **)a1;
  CFDictionaryGetCString(*((const __CFDictionary **)a1 + 1), @"deviceID", v15, 0x40uLL, 0);
  if (v15[0])
  {
    uint64_t v3 = (char *)v2 + 88;
    while (1)
    {
      uint64_t v3 = *(char **)v3;
      if (!v3) {
        break;
      }
      if (!strcasecmp(v3 + 16, v15))
      {
        for (uint64_t i = *((void *)v3 + 11); i; uint64_t i = *(void *)(i + 8))
        {
          uint64_t v5 = (const char *)*((void *)a1 + 2);
          if ((!v5 || !strcasecmp(v5, (const char *)(i + 52)))
            && !DNSServiceConstructFullName(fullName, *(const char *const *)(i + 24), *(const char *const *)(i + 32), *(const char *const *)(i + 40)))
          {
            DomainNameFromDNSNameString = MakeDomainNameFromDNSNameString(rdata, fullName);
            if (DomainNameFromDNSNameString)
            {
              __int16 v7 = (__int16)DomainNameFromDNSNameString;
              snprintf(fullName, 0x3F1uLL, "%s%s", *(const char **)(i + 32), *(const char **)(i + 40));
              if (gLogCategory_BonjourBrowser <= 50
                && (gLogCategory_BonjourBrowser != -1
                 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x32u)))
              {
                LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"void _BonjourBrowser_ReconfirmDevice(void *)", 0x32u, (uint64_t)"Reconfirming PTR for %s.%s%s on %s\n", v8, v9, v10, v11, *(void *)(i + 24));
              }
              DNSServiceReconfirmRecord(0, *(_DWORD *)(i + 48), fullName, 0xCu, 1u, v7 - (unsigned __int16)rdata, rdata);
            }
          }
        }
        break;
      }
    }
  }
  uint64_t v12 = (void *)*((void *)a1 + 2);
  if (v12) {
    free(v12);
  }
  CFRelease(*((CFTypeRef *)a1 + 1));
  free(a1);
  CFRelease(v2);
}

uint64_t BonjourDevice_Reconfirm(const __CFDictionary *a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  regtype[0] = 0;
  CFDictionaryGetCString(a1, @"serviceType", regtype, 0x80uLL, 0);
  CFTypeID TypeID = CFArrayGetTypeID();
  TypedCFStringRef Value = CFDictionaryGetTypedValue(a1, @"services", TypeID, 0);
  if (!TypedValue) {
    return 0;
  }
  CFArrayRef v4 = TypedValue;
  CFIndex Count = CFArrayGetCount(TypedValue);
  if (Count < 1) {
    return 0;
  }
  CFIndex v6 = Count;
  CFIndex v7 = 0;
  uint64_t v8 = 0;
  do
  {
    CFTypeID v9 = CFDictionaryGetTypeID();
    CFDictionaryRef TypedValueAtIndex = CFArrayGetTypedValueAtIndex(v4, v7, v9, 0);
    if (TypedValueAtIndex)
    {
      CFDictionaryRef v11 = TypedValueAtIndex;
      service[0] = 0;
      CFStringRef Value = (const __CFString *)CFDictionaryGetValue(TypedValueAtIndex, @"rawName");
      if (Value)
      {
        CFGetCString(Value, service, 0x80uLL);
        domain[0] = 0;
        CFStringRef v13 = (const __CFString *)CFDictionaryGetValue(v11, @"domain");
        if (v13) {
          CFGetCString(v13, domain, 0x3F1uLL);
        }
        else {
          domain[0] = 0;
        }
        CFStringRef v14 = (const __CFString *)CFDictionaryGetValue(v11, @"ifindex");
        if (v14) {
          uint32_t v15 = CFGetInt64(v14, 0);
        }
        else {
          uint32_t v15 = 0;
        }
        if (!DNSServiceConstructFullName(fullName, service, regtype, domain))
        {
          DomainNameFromDNSNameString = MakeDomainNameFromDNSNameString(rdata, fullName);
          if (DomainNameFromDNSNameString)
          {
            __int16 v17 = (__int16)DomainNameFromDNSNameString;
            snprintf(fullName, 0x3F1uLL, "%s%s", regtype, domain);
            unsigned int v18 = DNSServiceReconfirmRecord(0, v15, fullName, 0xCu, 1u, v17 - (unsigned __int16)rdata, rdata);
            if (v8) {
              BOOL v23 = 1;
            }
            else {
              BOOL v23 = v18 == 0;
            }
            if (v23) {
              uint64_t v8 = v8;
            }
            else {
              uint64_t v8 = v18;
            }
            if (gLogCategory_BonjourBrowser <= 50
              && (gLogCategory_BonjourBrowser != -1
               || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x32u)))
            {
              LogPrintF((uint64_t)&gLogCategory_BonjourBrowser, (uint64_t)"OSStatus BonjourDevice_Reconfirm(CFDictionaryRef)", 0x32u, (uint64_t)"Reconfirm PTR for %s.%s%s%%%u: %#m\n", v19, v20, v21, v22, (uint64_t)service);
            }
          }
        }
      }
      else
      {
        service[0] = 0;
      }
    }
    ++v7;
  }
  while (v6 != v7);
  return v8;
}

CFDataRef BonjourDevice_CopyCFString(const __CFDictionary *a1, const char *a2, int *a3)
{
  CFDataRef result = (const __CFData *)CFDictionaryGetValue(a1, @"txt");
  if (result)
  {
    CFDataRef v6 = result;
    uint8_t valueLen = 0;
    BytePtr = CFDataGetBytePtr(result);
    uint16_t Length = CFDataGetLength(v6);
    CFDataRef result = (const __CFData *)TXTRecordGetValuePtr(Length, BytePtr, a2, &valueLen);
    if (result)
    {
      if (valueLen)
      {
        uint64_t v9 = 0;
        while (*((unsigned char *)result + v9))
        {
          if (valueLen == ++v9)
          {
            LOBYTE(v9) = valueLen;
            break;
          }
        }
      }
      else
      {
        LOBYTE(v9) = 0;
      }
      uint8_t valueLen = v9;
      CFDataRef result = (const __CFData *)CFStringCreateWithBytes(0, (const UInt8 *)result, v9, 0x8000100u, 0);
      if (result) {
        int v10 = 0;
      }
      else {
        int v10 = -6742;
      }
    }
    else
    {
      int v10 = -6727;
    }
  }
  else
  {
    int v10 = -6762;
  }
  if (a3) {
    *a3 = v10;
  }
  return result;
}

uint64_t BonjourDevice_GetBitListValue(const __CFDictionary *a1, const char *a2, int *a3)
{
  unsigned int v13 = 0;
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue(a1, @"txt");
  if (Value)
  {
    CFDataRef v6 = Value;
    uint8_t valueLen = 0;
    BytePtr = CFDataGetBytePtr(Value);
    uint16_t Length = CFDataGetLength(v6);
    ValuePtr = (char *)TXTRecordGetValuePtr(Length, BytePtr, a2, &valueLen);
    if (ValuePtr) {
      int v10 = BitListString_Parse(ValuePtr, valueLen, &v13);
    }
    else {
      int v10 = -6727;
    }
  }
  else
  {
    int v10 = -6762;
  }
  if (a3) {
    *a3 = v10;
  }
  return v13;
}

unint64_t BonjourDevice_GetDeviceID(const __CFDictionary *a1, char *a2, int *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a1, @"deviceID");
  if (Value)
  {
    if (CFStringGetCString(Value, buffer, 64, 0x600u))
    {
      if (!a2) {
        a2 = &v9;
      }
      int v6 = TextToHardwareAddress(buffer, 0xFFFFFFFFFFFFFFFFLL, 6, a2);
      if (v6) {
        unint64_t v7 = 0;
      }
      else {
        unint64_t v7 = ((unint64_t)*a2 << 40) | ((unint64_t)a2[1] << 32) | ((unint64_t)a2[2] << 24) | ((unint64_t)a2[3] << 16) | ((unint64_t)a2[4] << 8) | a2[5];
      }
    }
    else
    {
      unint64_t v7 = 0;
      int v6 = -6742;
    }
  }
  else
  {
    unint64_t v7 = 0;
    int v6 = -6762;
  }
  if (a3) {
    *a3 = v6;
  }
  return v7;
}

__CFArray *BonjourDevice_CopyConnectionInfo(const __CFDictionary *a1, uint64_t a2, const void *a3, int *a4)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t context = a2;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
    int v38 = -6728;
    if (!a4) {
      return Mutable;
    }
    goto LABEL_24;
  }
  CFTypeID TypeID = CFArrayGetTypeID();
  TypedCFStringRef Value = CFDictionaryGetTypedValue(a1, @"wakeArray", TypeID, 0);
  if (TypedValue)
  {
    CFArrayRef v10 = TypedValue;
    CFIndex Count = CFArrayGetCount(TypedValue);
    if (Count >= 1)
    {
      CFIndex v12 = Count;
      CFIndex v13 = 0;
      CFStringRef v14 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
      uint32_t v15 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
      do
      {
        CFTypeID v16 = CFDataGetTypeID();
        CFArrayRef TypedValueAtIndex = CFArrayGetTypedValueAtIndex(v10, v13, v16, 0);
        if (TypedValueAtIndex)
        {
          CFDataRef v18 = TypedValueAtIndex;
          if (CFDataGetLength(TypedValueAtIndex) == 6)
          {
            BytePtr = CFDataGetBytePtr(v18);
            SNPrintF((uint64_t)v41, 32, (uint64_t)"wake://%02X-%02X-%02X-%02X-%02X-%02X", v20, v21, v22, v23, v24, *BytePtr);
            uint64_t v25 = CFDictionaryCreateMutable(0, 0, v14, v15);
            if (!v25)
            {
              int v38 = -6728;
              uint64_t v30 = Mutable;
              CFMutableArrayRef Mutable = 0;
              goto LABEL_21;
            }
            uint64_t v26 = v25;
            CFDictionarySetCString(v25, @"dnsName", v41, -1);
            CFArrayAppendValue(Mutable, v26);
            CFRelease(v26);
          }
        }
        ++v13;
      }
      while (v12 != v13);
    }
  }
  CFTypeID v27 = CFArrayGetTypeID();
  CFDictionaryRef v28 = CFDictionaryGetTypedValue(a1, @"services", v27, 0);
  if (!v28)
  {
    int v38 = 0;
    if (!a4) {
      return Mutable;
    }
LABEL_24:
    *a4 = v38;
    return Mutable;
  }
  CFArrayRef MutableCopy = CFArrayCreateMutableCopy(0, 0, v28);
  if (MutableCopy)
  {
    uint64_t v30 = MutableCopy;
    v43.size_t length = CFArrayGetCount(MutableCopy);
    v43.location = 0;
    CFArraySortValues(v30, v43, (CFComparatorFunction)_BonjourService_Comparator, &context);
    CFIndex v31 = CFArrayGetCount(v30);
    if (v31 >= 1)
    {
      CFIndex v32 = v31;
      for (CFIndex i = 0; i != v32; ++i)
      {
        CFTypeID v34 = CFDictionaryGetTypeID();
        CFDictionaryRef v35 = CFArrayGetTypedValueAtIndex(v30, i, v34, 0);
        if (v35)
        {
          CFDictionaryRef v36 = v35;
          if (!a3 || (CFStringRef Value = CFDictionaryGetValue(v35, @"ifname")) != 0 && CFEqual(Value, a3)) {
            CFArrayAppendValue(Mutable, v36);
          }
        }
      }
    }
    int v38 = 0;
  }
  else
  {
    int v38 = -6728;
    uint64_t v30 = Mutable;
    CFMutableArrayRef Mutable = 0;
  }
LABEL_21:
  CFRelease(v30);
  if (a4) {
    goto LABEL_24;
  }
  return Mutable;
}

unint64_t _BonjourService_Comparator(const __CFDictionary *a1, const __CFDictionary *a2, unint64_t *a3)
{
  unint64_t v5 = *a3;
  CFTypeID TypeID = CFStringGetTypeID();
  TypedCFStringRef Value = CFDictionaryGetTypedValue(a1, @"domain", TypeID, 0);
  if (TypedValue)
  {
    if (CFEqual(TypedValue, @"local.")) {
      uint64_t v8 = -1;
    }
    else {
      uint64_t v8 = 0;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  CFTypeID v9 = CFStringGetTypeID();
  CFDictionaryRef v10 = CFDictionaryGetTypedValue(a2, @"domain", v9, 0);
  if (v10) {
    BOOL v11 = CFEqual(v10, @"local.") != 0;
  }
  else {
    BOOL v11 = 0;
  }
  unint64_t v12 = v11 + v8;
  if (!v12)
  {
    int Int64 = CFDictionaryGetInt64(a1, @"transportType", 0);
    unsigned int v14 = CFDictionaryGetInt64(a2, @"transportType", 0);
    LODWORD(v12) = ((v14 >> 4) & 1) + (Int64 << 27 >> 31);
    if (v12) {
      return (int)v12;
    }
    LODWORD(v12) = ((v14 >> 3) & 1) + (Int64 << 28 >> 31);
    if (v12)
    {
      return (int)v12;
    }
    else
    {
      uint64_t v15 = 1;
      if (Int64 != 4 && Int64 != 64) {
        uint64_t v15 = Int64 == 128;
      }
      BOOL v16 = 1;
      if (v14 != 4 && v14 != 64) {
        BOOL v16 = v14 == 128;
      }
      uint64_t v17 = v15 << 63 >> 63;
      if ((v5 & 0x8000000000000000) == 0 || (unint64_t v12 = v17 + v16) == 0)
      {
        BOOL v18 = 1;
        if (v14 != 1 && v14 != 8) {
          BOOL v18 = v14 == 16;
        }
        uint64_t v19 = -1;
        if (Int64 != 1 && Int64 != 8)
        {
          if (Int64 == 16) {
            uint64_t v19 = -1;
          }
          else {
            uint64_t v19 = 0;
          }
        }
        unint64_t v12 = v19 + v18;
        if (!v12 && ((v5 & 0x8000000000000000) != 0 || (unint64_t v12 = !v16 - (unint64_t)((v17 & 1) == 0)) == 0))
        {
          if (((v5 >> 50) & v17 & v16) == 1) {
            return (v14 == 128) - (unint64_t)(Int64 == 128);
          }
          else {
            return 0;
          }
        }
      }
    }
  }
  return v12;
}

void *BonjourDevice_CopyDNSNames(const __CFDictionary *a1, uint64_t a2, int *a3)
{
  unint64_t v46 = 0;
  uint64_t context = a2;
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a1, @"services");
  if (Value) {
    CFMutableArrayRef MutableCopy = CFArrayCreateMutableCopy(0, 0, Value);
  }
  else {
    CFMutableArrayRef MutableCopy = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  }
  CFArrayRef v7 = MutableCopy;
  if (MutableCopy)
  {
    CFTypeID TypeID = CFArrayGetTypeID();
    TypedCFArrayRef Value = CFDictionaryGetTypedValue(a1, @"wakeArray", TypeID, 0);
    if (TypedValue && (v10 = TypedValue, CFIndex v11 = CFArrayGetCount(TypedValue), v11 >= 1))
    {
      CFIndex v12 = v11;
      CFIndex v13 = 0;
      while (1)
      {
        CFTypeID v14 = CFDataGetTypeID();
        CFArrayRef TypedValueAtIndex = CFArrayGetTypedValueAtIndex(v10, v13, v14, 0);
        if (TypedValueAtIndex)
        {
          CFDataRef v16 = TypedValueAtIndex;
          if (CFDataGetLength(TypedValueAtIndex) == 6)
          {
            CFDataGetBytePtr(v16);
            uint64_t v23 = v46 ? "\x1E" : "";
            if ((int)AppendPrintF(&v46, (uint64_t)"%swake://%02X-%02X-%02X-%02X-%02X-%02X", v17, v18, v19, v20, v21, v22, (uint64_t)v23) < 1)break; {
          }
            }
        }
        if (v12 == ++v13)
        {
          if (v46) {
            goto LABEL_18;
          }
          goto LABEL_16;
        }
      }
    }
    else
    {
LABEL_16:
      CFDataOfuint16_t Length = CFDictionaryGetCFDataOfLength(a1, @"wakeAddr", 6, 0);
      if (!CFDataOfLength
        || (CFDataGetBytePtr(CFDataOfLength),
            (int)AppendPrintF(&v46, (uint64_t)"%swake://%02X-%02X-%02X-%02X-%02X-%02X", v25, v26, v27, v28, v29, v30, (uint64_t)"") >= 1))
      {
LABEL_18:
        v48.size_t length = CFArrayGetCount(v7);
        v48.location = 0;
        CFArraySortValues(v7, v48, (CFComparatorFunction)_BonjourService_Comparator, &context);
        CFIndex Count = CFArrayGetCount(v7);
        if (Count < 1)
        {
LABEL_26:
          CFRange v43 = v46;
          if (v46) {
            int v44 = 0;
          }
          else {
            int v44 = -6727;
          }
          if (!v7) {
            goto LABEL_31;
          }
          goto LABEL_30;
        }
        CFIndex v32 = Count;
        CFIndex v33 = 0;
        while (1)
        {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v7, v33);
          CFTypeID v35 = CFStringGetTypeID();
          if (CFDictionaryGetTypedValue(ValueAtIndex, @"dnsName", v35, 0))
          {
            uint64_t v42 = v46 ? "\x1E" : "";
            if ((int)AppendPrintF(&v46, (uint64_t)"%s%@", v36, v37, v38, v39, v40, v41, (uint64_t)v42) < 1) {
              break;
            }
          }
          if (v32 == ++v33) {
            goto LABEL_26;
          }
        }
      }
    }
    int v44 = -6700;
  }
  else
  {
    int v44 = -6728;
  }
  if (v46) {
    free(v46);
  }
  CFRange v43 = 0;
  if (v7) {
LABEL_30:
  }
    CFRelease(v7);
LABEL_31:
  if (a3) {
    *a3 = v44;
  }
  return v43;
}

uint64_t BonjourDevice_GetDNSName(const __CFDictionary *a1, unint64_t a2, char *a3, size_t a4)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  unsigned int v58 = 0;
  if (a3)
  {
    CFTypeID TypeID = CFArrayGetTypeID();
    TypedCFArrayRef Value = CFDictionaryGetTypedValue(a1, @"wakeArray", TypeID, 0);
    uint64_t v55 = a3;
    if (!TypedValue) {
      goto LABEL_59;
    }
    CFArrayRef v10 = TypedValue;
    CFIndex Count = CFArrayGetCount(TypedValue);
    if (Count < 1) {
      goto LABEL_59;
    }
    CFIndex v12 = Count;
    CFIndex v13 = 0;
    char v14 = 1;
    do
    {
      while (1)
      {
        CFTypeID v15 = CFDataGetTypeID();
        CFArrayRef TypedValueAtIndex = CFArrayGetTypedValueAtIndex(v10, v13, v15, 0);
        if (!TypedValueAtIndex) {
          break;
        }
        CFDataRef v17 = TypedValueAtIndex;
        if (CFDataGetLength(TypedValueAtIndex) != 6) {
          break;
        }
        BytePtr = CFDataGetBytePtr(v17);
        int v24 = SNPrintF((uint64_t)v55, a4, (uint64_t)"wake://%02X-%02X-%02X-%02X-%02X-%02X%s", v19, v20, v21, v22, v23, *BytePtr);
        if (v24 < 1) {
          return 4294960596;
        }
        char v14 = 0;
        v55 += v24;
        a4 -= v24;
        if (++v13 == v12) {
          goto LABEL_17;
        }
      }
      ++v13;
    }
    while (v12 != v13);
    if (v14)
    {
LABEL_59:
      CFDataOfuint16_t Length = CFDictionaryGetCFDataOfLength(a1, @"wakeAddr", 6, 0);
      if (CFDataOfLength)
      {
        uint64_t v26 = CFDataGetBytePtr(CFDataOfLength);
        int v32 = SNPrintF((uint64_t)v55, a4, (uint64_t)"wake://%02X-%02X-%02X-%02X-%02X-%02X%s", v27, v28, v29, v30, v31, *v26);
        if (v32 < 1) {
          return 4294960596;
        }
        v55 += v32;
        a4 -= v32;
      }
    }
  }
  else
  {
    uint64_t v55 = 0;
  }
LABEL_17:
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a1, @"services");
  if (!Value || (CFArrayRef v34 = Value, v35 = CFArrayGetCount(Value), v35 < 1))
  {
    CFDictionaryRef v38 = 0;
    CFDictionaryRef v37 = 0;
    goto LABEL_47;
  }
  CFIndex v36 = v35;
  size_t v54 = a4;
  CFDictionaryRef v37 = 0;
  CFDictionaryRef v38 = 0;
  CFDictionaryRef v56 = 0;
  CFDictionaryRef v57 = 0;
  CFIndex v39 = 0;
  unint64_t v40 = a2 >> 63;
  uint64_t v41 = @"p2p";
  uint64_t v42 = @"domain";
  do
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v34, v39);
    if ((CFDictionaryGetInt64(ValueAtIndex, v41, 0) != 0) == v40)
    {
      v59[0] = 0;
      CFDictionaryGetCString(ValueAtIndex, v42, v59, 0x100uLL, 0);
      if (*(_DWORD *)v59 == 1633906540 && *(_DWORD *)&v59[3] == 3042401)
      {
        uint64_t v45 = v41;
        unint64_t v46 = v42;
        unint64_t Int64 = CFDictionaryGetInt64(ValueAtIndex, @"transportType", 0);
        unint64_t v48 = Int64;
        if (!v57 && Int64 != 32)
        {
          if (CFDictionaryGetInt64(ValueAtIndex, @"wifi", 0)) {
            CFDictionaryRef v49 = 0;
          }
          else {
            CFDictionaryRef v49 = ValueAtIndex;
          }
          CFDictionaryRef v57 = v49;
        }
        CFDictionaryRef v50 = v56;
        if (v48 == 32 && v56 == 0) {
          CFDictionaryRef v50 = ValueAtIndex;
        }
        CFDictionaryRef v56 = v50;
        if (!v38) {
          CFDictionaryRef v38 = ValueAtIndex;
        }
        uint64_t v42 = v46;
        uint64_t v41 = v45;
      }
      if (!v37) {
        CFDictionaryRef v37 = ValueAtIndex;
      }
    }
    ++v39;
  }
  while (v36 != v39);
  a4 = v54;
  if (!v57)
  {
    CFDictionaryRef v57 = v56;
    if (!v56)
    {
LABEL_47:
      if (v38) {
        CFDictionaryRef v52 = v38;
      }
      else {
        CFDictionaryRef v52 = v37;
      }
      CFDictionaryRef v57 = v52;
      if (!v52) {
        return 4294960569;
      }
    }
  }
  if (!v55) {
    return 0;
  }
  CFDictionaryGetCString(v57, @"dnsName", v55, a4, (int *)&v58);
  uint64_t result = v58;
  if (!v58) {
    return 0;
  }
  return result;
}

uint64_t BonjourDevice_GetInt64(const __CFDictionary *a1, const char *a2, int a3, int *a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v35 = 0;
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue(a1, @"txt");
  if (!Value)
  {
    int v30 = -6762;
    goto LABEL_36;
  }
  CFDataRef v8 = Value;
  uint8_t valueLen = 0;
  BytePtr = CFDataGetBytePtr(Value);
  uint16_t Length = CFDataGetLength(v8);
  ValuePtr = (char *)TXTRecordGetValuePtr(Length, BytePtr, a2, &valueLen);
  if (!ValuePtr)
  {
    int v30 = -6727;
    goto LABEL_36;
  }
  uint64_t v12 = valueLen;
  if (valueLen > 0x3FuLL)
  {
    int v30 = -6743;
    goto LABEL_36;
  }
  CFIndex v13 = ValuePtr;
  __memcpy_chk();
  __s[v12] = 0;
  if (strnicmpx((unsigned __int8 *)v13, v12, "true")
    && strnicmpx((unsigned __int8 *)v13, valueLen, "yes")
    && strnicmpx((unsigned __int8 *)v13, valueLen, "y")
    && strnicmpx((unsigned __int8 *)v13, valueLen, "on")
    && strnicmpx((unsigned __int8 *)v13, valueLen, "1"))
  {
    if (strnicmpx((unsigned __int8 *)v13, valueLen, "false")
      && strnicmpx((unsigned __int8 *)v13, valueLen, "no")
      && strnicmpx((unsigned __int8 *)v13, valueLen, "n")
      && strnicmpx((unsigned __int8 *)v13, valueLen, "off")
      && strnicmpx((unsigned __int8 *)v13, valueLen, "0"))
    {
      HIDWORD(v20) = a3;
      LODWORD(v20) = a3;
      unsigned int v19 = v20 >> 1;
      if (v19 > 8 || ((0x131u >> v19) & 1) == 0) {
        goto LABEL_32;
      }
      if (SNScanF(v13, valueLen, (unsigned __int8 *)off_1E55BD5B0[v19], v14, v15, v16, v17, v18, (int)&v35) != 1)goto LABEL_46; {
    }
      }
    else
    {
      uint64_t v35 = 0;
    }
  }
  else
  {
    uint64_t v35 = 1;
  }
  uint64_t v21 = strchr(__s, 44);
  if (!v21)
  {
    int v30 = 0;
    goto LABEL_36;
  }
  uint64_t v34 = 0;
  uint64_t v22 = (unsigned __int8 *)(v21 + 1);
  if (!strnicmpx((unsigned __int8 *)v21 + 1, -1, "true")
    || !strnicmpx(v22, -1, "yes")
    || !strnicmpx(v22, -1, "y")
    || !strnicmpx(v22, -1, "on")
    || !strnicmpx(v22, -1, "1"))
  {
    uint64_t v31 = 0x100000000;
LABEL_34:
    int v30 = 0;
    v35 |= v31;
    goto LABEL_36;
  }
  if (!strnicmpx(v22, -1, "false")
    || !strnicmpx(v22, -1, "no")
    || !strnicmpx(v22, -1, "n")
    || !strnicmpx(v22, -1, "off")
    || !strnicmpx(v22, -1, "0"))
  {
    uint64_t v31 = 0;
    goto LABEL_34;
  }
  HIDWORD(v29) = a3;
  LODWORD(v29) = a3;
  unsigned int v28 = v29 >> 1;
  if (v28 > 8 || ((0x131u >> v28) & 1) == 0)
  {
LABEL_32:
    int v30 = -6705;
    goto LABEL_36;
  }
  if (SNScanF((char *)v22, 0xFFFFFFFFFFFFFFFFLL, (unsigned __int8 *)off_1E55BD5B0[v28], v23, v24, v25, v26, v27, (int)&v34) == 1)
  {
    uint64_t v31 = v34 << 32;
    goto LABEL_34;
  }
LABEL_46:
  int v30 = -6742;
LABEL_36:
  if (a4) {
    *a4 = v30;
  }
  return v35;
}

uint64_t BonjourDevice_MergeInfo(uint64_t *a1, CFTypeRef cf)
{
  uint64_t v4 = *a1;
  if (!*a1)
  {
    CFRetain(cf);
    *a1 = (uint64_t)cf;
    return v4;
  }
  CFTypeID TypeID = CFArrayGetTypeID();
  TypedCFDataRef Value = CFDictionaryGetTypedValue((const __CFDictionary *)v4, @"services", TypeID, 0);
  CFArrayRef v7 = TypedValue;
  if (TypedValue) {
    CFRetain(TypedValue);
  }
  CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, (CFDictionaryRef)v4);
  if (!MutableCopy)
  {
    uint64_t v4 = 4294960568;
    if (!v7) {
      return v4;
    }
    goto LABEL_56;
  }
  CFTypeID v9 = MutableCopy;
  CFDictionaryApplyFunction((CFDictionaryRef)cf, (CFDictionaryApplierFunction)_CFDictionaryMergeDictionaryApplier, MutableCopy);
  CFDictionaryRemoveValue(v9, @"removedServices");
  CFTypeID v10 = CFArrayGetTypeID();
  CFDictionaryRef v11 = CFDictionaryGetTypedValue((const __CFDictionary *)cf, @"services", v10, 0);
  if (v11)
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutableCopy(0, 0, v11);
    if (Mutable) {
      goto LABEL_7;
    }
LABEL_11:
    uint64_t v4 = 4294960568;
    uint64_t v17 = v9;
    goto LABEL_55;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  if (!Mutable) {
    goto LABEL_11;
  }
LABEL_7:
  theArray = Mutable;
  CFTypeID v13 = CFArrayGetTypeID();
  CFDictionaryRef v14 = CFDictionaryGetTypedValue((const __CFDictionary *)cf, @"removedServices", v13, 0);
  CFArrayRef v15 = v14;
  if (v14) {
    CFIndex Count = CFArrayGetCount(v14);
  }
  else {
    CFIndex Count = 0;
  }
  CFTypeRef cfa = (CFTypeRef)v4;
  int v44 = a1;
  uint64_t v42 = v9;
  if (v11)
  {
    CFIndex v18 = CFArrayGetCount(v11);
    if (!v7) {
      goto LABEL_46;
    }
LABEL_17:
    CFIndex v47 = CFArrayGetCount(v7);
    if (v47 >= 1)
    {
      CFIndex v19 = 0;
      CFArrayRef v46 = v7;
      do
      {
        CFTypeID v20 = CFDictionaryGetTypeID();
        CFDictionaryRef theDict = CFArrayGetTypedValueAtIndex(v7, v19, v20, 0);
        if (theDict)
        {
          CFDataRef Value = CFDictionaryGetValue(theDict, @"domain");
          uint64_t v22 = CFDictionaryGetValue(theDict, @"ifname");
          if (v18 < 1)
          {
LABEL_32:
            if (Count < 1)
            {
LABEL_44:
              CFArrayAppendValue(theArray, theDict);
            }
            else
            {
              CFIndex v29 = 0;
              while (1)
              {
                CFTypeID v30 = CFDictionaryGetTypeID();
                CFDictionaryRef TypedValueAtIndex = CFArrayGetTypedValueAtIndex(v15, v29, v30, 0);
                if (TypedValueAtIndex)
                {
                  CFDictionaryRef v32 = TypedValueAtIndex;
                  CFIndex v33 = CFDictionaryGetValue(TypedValueAtIndex, @"domain");
                  uint64_t v34 = CFDictionaryGetValue(v32, @"ifname");
                  if ((Value == v33 || Value && v33 && CFEqual(Value, v33))
                    && (v22 == v34 || v22 && v34 && CFEqual(v22, v34)))
                  {
                    break;
                  }
                }
                if (Count == ++v29) {
                  goto LABEL_44;
                }
              }
            }
          }
          else
          {
            CFIndex v23 = 0;
            while (1)
            {
              CFTypeID v24 = CFDictionaryGetTypeID();
              CFDictionaryRef v25 = CFArrayGetTypedValueAtIndex(v11, v23, v24, 0);
              if (v25)
              {
                CFDictionaryRef v26 = v25;
                uint64_t v27 = CFDictionaryGetValue(v25, @"domain");
                unsigned int v28 = CFDictionaryGetValue(v26, @"ifname");
                if ((Value == v27 || Value && v27 && CFEqual(Value, v27))
                  && (v22 == v28 || v22 && v28 && CFEqual(v22, v28)))
                {
                  break;
                }
              }
              if (v18 == ++v23) {
                goto LABEL_32;
              }
            }
          }
        }
        ++v19;
        CFArrayRef v7 = v46;
      }
      while (v19 != v47);
    }
    goto LABEL_46;
  }
  CFIndex v18 = 0;
  if (v7) {
    goto LABEL_17;
  }
LABEL_46:
  uint64_t v17 = theArray;
  CFDictionarySetValue(v42, @"services", theArray);
  CFIndex v35 = CFArrayGetCount(theArray);
  if (v35 >= 1)
  {
    CFIndex v36 = v35;
    CFIndex v37 = 0;
    while (1)
    {
      CFTypeID v38 = CFDictionaryGetTypeID();
      CFDictionaryRef v39 = CFArrayGetTypedValueAtIndex(theArray, v37, v38, 0);
      if (v39)
      {
        CFStringRef v40 = (const __CFString *)CFDictionaryGetValue(v39, @"p2p");
        if (!v40 || !CFGetInt64(v40, 0)) {
          break;
        }
      }
      if (v36 == ++v37)
      {
        CFDictionarySetValue(v42, @"p2pOnly", (const void *)*MEMORY[0x1E4F1CFD0]);
        goto LABEL_54;
      }
    }
  }
  CFDictionaryRemoveValue(v42, @"p2pOnly");
LABEL_54:
  CFRelease(cfa);
  uint64_t v4 = 0;
  *int v44 = v42;
LABEL_55:
  CFRelease(v17);
  if (v7) {
LABEL_56:
  }
    CFRelease(v7);
  return v4;
}

CFDictionaryRef BonjourDevice_RemoveInterfaceInfo(CFDictionaryRef *a1, const char *a2, int a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v3 = *a1;
  if (*a1)
  {
    CFTypeID TypeID = CFArrayGetTypeID();
    CFDictionaryRef result = CFDictionaryGetTypedValue(v3, @"services", TypeID, 0);
    if (!result) {
      return result;
    }
    CFArrayRef v9 = result;
    CFIndex Count = CFArrayGetCount(result);
    if (Count >= 1)
    {
      CFIndex v11 = Count;
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, *a1);
      if (MutableCopy)
      {
        CFTypeID v13 = MutableCopy;
        CFMutableArrayRef v14 = CFArrayCreateMutableCopy(0, 0, v9);
        if (v14)
        {
          CFArrayRef v15 = v14;
          unint64_t v16 = v11 + 1;
          do
          {
            CFTypeID v17 = CFDictionaryGetTypeID();
            CFDictionaryRef TypedValueAtIndex = CFArrayGetTypedValueAtIndex(v15, v16 - 2, v17, 0);
            if (TypedValueAtIndex)
            {
              __s1[0] = 0;
              CFStringRef Value = (const __CFString *)CFDictionaryGetValue(TypedValueAtIndex, @"ifname");
              if (Value) {
                CFGetCString(Value, __s1, 0x11uLL);
              }
              else {
                __s1[0] = 0;
              }
              if ((a3 == 0) != (strcmp(__s1, a2) != 0)) {
                CFArrayRemoveValueAtIndex(v15, v16 - 2);
              }
            }
            --v16;
          }
          while (v16 > 1);
          if (CFArrayGetCount(v15) < 1) {
            CFDictionaryRemoveValue(v13, @"services");
          }
          else {
            CFDictionarySetValue(v13, @"services", v15);
          }
          CFRelease(*a1);
          *a1 = v13;
          CFRelease(v15);
          return 0;
        }
        CFRelease(v13);
      }
      return (const __CFDictionary *)4294960568;
    }
  }
  return 0;
}

void FadeInLayerThruBlack(void *a1, void *a2, void *a3, double a4, double a5, double a6)
{
}

void _FadeLayerThruBlack(void *a1, char a2, void *a3, void *a4, double a5, double a6, double a7)
{
  id v13 = a1;
  id v14 = a3;
  id v15 = a4;
  unint64_t v16 = (void *)MEMORY[0x192FAA9B0]();
  if (!v14 && v15)
  {
    id v14 = (id)MEMORY[0x1E4F14428];
    id v17 = MEMORY[0x1E4F14428];
  }
  CFIndex v18 = [(Class)getCALayerClass[0]() layer];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___FadeLayerThruBlack_block_invoke;
  block[3] = &unk_1E55BD600;
  id v19 = v18;
  id v35 = v19;
  id v20 = v13;
  id v36 = v20;
  char v38 = a2;
  double v37 = a5;
  uint64_t v21 = MEMORY[0x1E4F14428];
  dispatch_async(MEMORY[0x1E4F14428], block);
  dispatch_time_t v22 = dispatch_time(0, (uint64_t)(a6 * 1000000000.0));
  v27[0] = MEMORY[0x1E4F143A8];
  v27[1] = 3221225472;
  v27[2] = ___FadeLayerThruBlack_block_invoke_2;
  v27[3] = &unk_1E55BD650;
  char v33 = a2;
  id v23 = v20;
  id v28 = v23;
  id v29 = v19;
  double v32 = a7;
  id v24 = v15;
  id v31 = v24;
  id v25 = v14;
  id v30 = v25;
  id v26 = v19;
  dispatch_after(v22, v21, v27);
}

id initValkCAMediaTimingFunctionEaseIn()
{
  if (QuartzCoreLibrary_sOnce != -1) {
    dispatch_once(&QuartzCoreLibrary_sOnce, &__block_literal_global_205);
  }
  uint64_t v0 = (id *)dlsym((void *)QuartzCoreLibrary_sLib, "kCAMediaTimingFunctionEaseIn");
  if (v0) {
    objc_storeStrong((id *)&constantValkCAMediaTimingFunctionEaseIn, *v0);
  }
  getkCAMediaTimingFunctionEaseIn[0] = (uint64_t (*)())kCAMediaTimingFunctionEaseInFunction;
  uint64_t v1 = (void *)constantValkCAMediaTimingFunctionEaseIn;
  return v1;
}

id kCAMediaTimingFunctionEaseInFunction()
{
  return (id)constantValkCAMediaTimingFunctionEaseIn;
}

void *__QuartzCoreLibrary_block_invoke()
{
  CFDictionaryRef result = dlopen("/System/Library/Frameworks/QuartzCore.framework/QuartzCore", 2);
  QuartzCoreLibrary_sLib = (uint64_t)result;
  return result;
}

Class initCAMediaTimingFunction()
{
  if (QuartzCoreLibrary_sOnce != -1) {
    dispatch_once(&QuartzCoreLibrary_sOnce, &__block_literal_global_205);
  }
  Class result = objc_getClass("CAMediaTimingFunction");
  classCAMediaTimingFunction = (uint64_t)result;
  getCAMediaTimingFunctionClass[0] = (uint64_t (*)())CAMediaTimingFunctionFunction;
  return result;
}

id CAMediaTimingFunctionFunction()
{
  return (id)classCAMediaTimingFunction;
}

Class initCABasicAnimation()
{
  if (QuartzCoreLibrary_sOnce != -1) {
    dispatch_once(&QuartzCoreLibrary_sOnce, &__block_literal_global_205);
  }
  Class result = objc_getClass("CABasicAnimation");
  classCABasicAnimation = (uint64_t)result;
  getCABasicAnimationClass[0] = (uint64_t (*)())CABasicAnimationFunction;
  return result;
}

id CABasicAnimationFunction()
{
  return (id)classCABasicAnimation;
}

Class initCATransaction()
{
  if (QuartzCoreLibrary_sOnce != -1) {
    dispatch_once(&QuartzCoreLibrary_sOnce, &__block_literal_global_205);
  }
  Class result = objc_getClass("CATransaction");
  classCATransaction = (uint64_t)result;
  getCATransactionClass[0] = (uint64_t (*)())CATransactionFunction;
  return result;
}

id CATransactionFunction()
{
  return (id)classCATransaction;
}

id initValkCAMediaTimingFunctionEaseOut()
{
  if (QuartzCoreLibrary_sOnce != -1) {
    dispatch_once(&QuartzCoreLibrary_sOnce, &__block_literal_global_205);
  }
  uint64_t v0 = (id *)dlsym((void *)QuartzCoreLibrary_sLib, "kCAMediaTimingFunctionEaseOut");
  if (v0) {
    objc_storeStrong((id *)&constantValkCAMediaTimingFunctionEaseOut, *v0);
  }
  getkCAMediaTimingFunctionEaseOut[0] = (uint64_t (*)())kCAMediaTimingFunctionEaseOutFunction;
  uint64_t v1 = (void *)constantValkCAMediaTimingFunctionEaseOut;
  return v1;
}

id kCAMediaTimingFunctionEaseOutFunction()
{
  return (id)constantValkCAMediaTimingFunctionEaseOut;
}

Class initCALayer()
{
  if (QuartzCoreLibrary_sOnce != -1) {
    dispatch_once(&QuartzCoreLibrary_sOnce, &__block_literal_global_205);
  }
  Class result = objc_getClass("CALayer");
  classCALayer = (uint64_t)result;
  getCALayerClass[0] = (uint64_t (*)())CALayerFunction;
  return result;
}

id CALayerFunction()
{
  return (id)classCALayer;
}

void FadeOutLayerThruBlack(void *a1, void *a2, void *a3, double a4, double a5, double a6)
{
}

void *CreateCAContextForRemoteHosting()
{
  uint64_t v0 = (void *)MEMORY[0x192FAA9B0]();
  [(Class)getCATransactionClass[0]() begin];
  [(Class)getCATransactionClass[0]() setDisableActions:1];
  CFUUIDRef v1 = CFUUIDCreate(0);
  CFStringRef v2 = CFUUIDCreateString(0, v1);
  CFRelease(v1);
  CFDictionaryRef v3 = [NSString stringWithFormat:@"%s-%@", getprogname(), v2];
  CFRelease(v2);
  uint64_t v4 = (void *)MEMORY[0x1E4F1C9E8];
  unint64_t v5 = getkCAContextDisplayName[0]();
  uint64_t v6 = *MEMORY[0x1E4F1CFD0];
  CFArrayRef v7 = getkCAContextIgnoresHitTest[0]();
  CFDataRef v8 = objc_msgSend(v4, "dictionaryWithObjectsAndKeys:", v3, v5, v6, v7, 0);

  CFArrayRef v9 = [(Class)getCAContextClass[0]() remoteContextWithOptions:v8];
  CFTypeID v10 = [(Class)getCALayerClass[0]() layer];
  [v10 setGeometryFlipped:1];
  [v9 setLayer:v10];
  [(Class)getCATransactionClass[0]() commit];

  return v9;
}

Class initCAContext()
{
  if (QuartzCoreLibrary_sOnce != -1) {
    dispatch_once(&QuartzCoreLibrary_sOnce, &__block_literal_global_205);
  }
  Class result = objc_getClass("CAContext");
  classCAContext = (uint64_t)result;
  getCAContextClass[0] = (uint64_t (*)())CAContextFunction;
  return result;
}

id CAContextFunction()
{
  return (id)classCAContext;
}

id initValkCAContextIgnoresHitTest()
{
  if (QuartzCoreLibrary_sOnce != -1) {
    dispatch_once(&QuartzCoreLibrary_sOnce, &__block_literal_global_205);
  }
  uint64_t v0 = (id *)dlsym((void *)QuartzCoreLibrary_sLib, "kCAContextIgnoresHitTest");
  if (v0) {
    objc_storeStrong((id *)&constantValkCAContextIgnoresHitTest, *v0);
  }
  getkCAContextIgnoresHitTest[0] = (uint64_t (*)())kCAContextIgnoresHitTestFunction;
  CFUUIDRef v1 = (void *)constantValkCAContextIgnoresHitTest;
  return v1;
}

id kCAContextIgnoresHitTestFunction()
{
  return (id)constantValkCAContextIgnoresHitTest;
}

id initValkCAContextDisplayName()
{
  if (QuartzCoreLibrary_sOnce != -1) {
    dispatch_once(&QuartzCoreLibrary_sOnce, &__block_literal_global_205);
  }
  uint64_t v0 = (id *)dlsym((void *)QuartzCoreLibrary_sLib, "kCAContextDisplayName");
  if (v0) {
    objc_storeStrong((id *)&constantValkCAContextDisplayName, *v0);
  }
  getkCAContextDisplayName[0] = (uint64_t (*)())kCAContextDisplayNameFunction;
  CFUUIDRef v1 = (void *)constantValkCAContextDisplayName;
  return v1;
}

id kCAContextDisplayNameFunction()
{
  return (id)constantValkCAContextDisplayName;
}

id CreateCALayerForRemoteDrawing(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)MEMORY[0x192FAA9B0]();
  [(Class)getCATransactionClass[0]() begin];
  [(Class)getCATransactionClass[0]() setDisableActions:1];
  id v5 = objc_alloc_init((Class)getCALayerHostClass[0]());
  [v5 setContextId:a1];
  [v3 frame];
  objc_msgSend(v5, "setFrame:");
  [v3 addSublayer:v5];
  [(Class)getCATransactionClass[0]() commit];

  return v5;
}

Class initCALayerHost()
{
  if (QuartzCoreLibrary_sOnce != -1) {
    dispatch_once(&QuartzCoreLibrary_sOnce, &__block_literal_global_205);
  }
  Class result = objc_getClass("CALayerHost");
  classCALayerHost = (uint64_t)result;
  getCALayerHostClass[0] = (uint64_t (*)())CALayerHostFunction;
  return result;
}

id CALayerHostFunction()
{
  return (id)classCALayerHost;
}

void CAGetStats(_DWORD *a1)
{
  int v17 = 0;
  if (a1)
  {
    *(void *)&long long v2 = -1;
    *((void *)&v2 + 1) = -1;
    *((_OWORD *)a1 + 1) = v2;
    id v3 = a1 + 4;
    *(_OWORD *)a1 = v2;
    uint64_t v4 = a1 + 7;
    a1[8] = -1;
    id v5 = a1 + 8;
    if (CAGetStats_sInitialized)
    {
      uint64_t v6 = CAGetStats_sServerPort;
      if (!CAGetStats_sServerPort) {
        return;
      }
    }
    else
    {
      uint64_t v6 = ((uint64_t (*)(uint64_t))softLinkCARenderServerGetServerPort[0])(0);
      CAGetStats_sServerPort = v6;
      CAGetStats_sInitialized = 1;
      if (!v6) {
        return;
      }
    }
    CFArrayRef v7 = (char *)((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkCARenderServerGetInfo[0])(v6, 1, 0);
    if (v7)
    {
      id v15 = v3;
      unint64_t v16 = 0;
      CFDataRef v8 = 0;
      CFArrayRef v9 = 0;
      id v14 = v7;
      __lasts = v7;
      while (1)
      {
        CFTypeID v10 = strtok_r(__lasts, "\n", &__lasts);
        if (!v10) {
          break;
        }
        CFIndex v11 = v10;
        if (strstr(v10, "LCD display:"))
        {
          CFDataRef v8 = a1;
          CFArrayRef v9 = a1 + 1;
          unint64_t v16 = a1 + 2;
        }
        else if (strstr(v11, "TVOut display:"))
        {
          CFDataRef v8 = a1 + 3;
          CFArrayRef v9 = v15;
          unint64_t v16 = a1 + 5;
        }
        else
        {
          uint64_t v12 = strstr(v11, "Wireless display:");
          if (v12 || !v8)
          {
            if (v12) {
              CFDataRef v8 = a1 + 6;
            }
            else {
              CFDataRef v8 = 0;
            }
            if (v12) {
              CFArrayRef v9 = v4;
            }
            id v13 = v16;
            if (v12) {
              id v13 = v5;
            }
            unint64_t v16 = v13;
          }
          else if (sscanf(v11, " Total Frames: %d", &v17) == 1)
          {
            *CFDataRef v8 = 0;
          }
          else if (sscanf(v11, " Total Cloned Frames: %d", &v17) == 1)
          {
            *CFArrayRef v9 = 0;
          }
          else if (sscanf(v11, " Skipped Cloned Frames: %d", &v17) == 1)
          {
            *unint64_t v16 = 0;
          }
        }
      }
      free(v14);
    }
  }
  else
  {
    if (CAGetStats_sServerPort)
    {
      mach_port_deallocate(*MEMORY[0x1E4F14960], CAGetStats_sServerPort);
      CAGetStats_sServerPort = 0;
    }
    CAGetStats_sInitialized = 0;
  }
}

uint64_t initCARenderServerGetInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (QuartzCoreLibrary_sOnce != -1) {
    dispatch_once(&QuartzCoreLibrary_sOnce, &__block_literal_global_205);
  }
  uint64_t v6 = (uint64_t (*)())dlsym((void *)QuartzCoreLibrary_sLib, "CARenderServerGetInfo");
  softLinkCARenderServerGetInfo[0] = v6;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(a1, a2, a3);
}

uint64_t initCARenderServerGetServerPort(uint64_t a1)
{
  if (QuartzCoreLibrary_sOnce != -1) {
    dispatch_once(&QuartzCoreLibrary_sOnce, &__block_literal_global_205);
  }
  long long v2 = (uint64_t (*)())dlsym((void *)QuartzCoreLibrary_sLib, "CARenderServerGetServerPort");
  softLinkCARenderServerGetServerPort[0] = v2;
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

int32x4_t CADiffStats(int32x4_t *a1, int32x4_t *a2, int32x4_t *a3)
{
  *a1 = vsubq_s32(*a3, *a2);
  int32x4_t result = vsubq_s32(a3[1], a2[1]);
  a1[1] = result;
  a1[2].i32[0] = a3[2].i32[0] - a2[2].i32[0];
  return result;
}

uint64_t SaveScreenshot(char *a1)
{
  long long v2 = (void *)MEMORY[0x192FAA9B0]();
  id v3 = [(Class)getCADisplayClass[0]() mainDisplay];
  uint64_t v4 = v3;
  if (!v3)
  {
    uint64_t v37 = 4294960596;
    goto LABEL_11;
  }
  int8x16_t __s = a1;
  CFDictionaryRef v50 = v2;
  [v3 bounds];
  double v6 = v5;
  double v8 = v7;
  unint64_t v11 = (unint64_t)v10;
  uint64_t v12 = (4 * (unint64_t)v9 + 63) & 0xFFFFFFC0;
  uint64_t v13 = (v12 * (unint64_t)v10 + 4095) & 0xFFFFF000;
  unint64_t v48 = (void *)MEMORY[0x1E4F1C9E8];
  unint64_t v42 = (unint64_t)v9;
  CFIndex v47 = objc_msgSend(NSNumber, "numberWithInt:");
  uint64_t v46 = getkIOSurfaceWidth[0]();
  int v41 = v11;
  uint64_t v45 = [NSNumber numberWithInt:v11];
  uint64_t v44 = getkIOSurfaceHeight[0]();
  id v14 = [NSNumber numberWithInt:1111970369];
  CFDictionaryRef v49 = v4;
  uint64_t v15 = getkIOSurfacePixelFormat[0]();
  unint64_t v16 = [NSNumber numberWithInt:4];
  uint64_t v17 = getkIOSurfaceBytesPerElement[0]();
  int v40 = v12;
  CFIndex v18 = [NSNumber numberWithInt:v12];
  uint64_t v19 = getkIOSurfaceBytesPerRow[0]();
  uint64_t v43 = v13;
  id v20 = [NSNumber numberWithInt:v13];
  uint64_t v21 = getkIOSurfaceAllocSize[0]();
  dispatch_time_t v22 = [NSNumber numberWithBool:1];
  uint64_t v23 = getkIOSurfaceIsGlobal[0]();
  uint64_t v24 = objc_msgSend(v48, "dictionaryWithObjectsAndKeys:", v47, v46, v45, v44, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, @"PurpleGfxMem", getkIOSurfaceMemoryRegion[0](), 0);
  uint64_t v25 = ((uint64_t (*)(uint64_t))softLinkIOSurfaceCreate[0])(v24);

  if (!v25)
  {
    uint64_t v37 = 4294960596;
    uint64_t v4 = v49;
    long long v2 = v50;
    goto LABEL_11;
  }
  uint64_t v4 = v49;
  uint64_t v26 = [v49 name];
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkCARenderServerRenderDisplay[0])(0, v26, v25, (int)v6, (int)v8);
  ((void (*)(uint64_t, uint64_t, uint64_t))softLinkIOSurfaceLock[0])(v25, 1, 0);
  uint64_t v27 = ((uint64_t (*)(uint64_t))softLinkIOSurfaceGetBaseAddress[0])(v25);
  uint64_t v28 = softLinkCGDataProviderCreateWithData(v25, v27, v43, (uint64_t)_SaveScreenshotReleaseSurfaceData);
  if (v28)
  {
    id v29 = (const void *)v28;
    uint64_t v30 = softLinkCGColorSpaceCreateDeviceRGB[0]();
    if (v30)
    {
      id v31 = (const void *)v30;
      double v32 = (const void *)softLinkCGImageCreate(v42, v41, 8, 32, v40, v30, 8194, (int)v29, 0, 1, 0);
      CFRelease(v31);
      if (v32)
      {
        size_t v33 = strlen(__s);
        CFURLRef v34 = CFURLCreateFromFileSystemRepresentation(0, (const UInt8 *)__s, v33, 0);
        if (v34
          && (CFURLRef v35 = v34,
              id v36 = (const void *)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkCGImageDestinationCreateWithURL[0])((uint64_t)v34, @"public.png", 1, 0), CFRelease(v35), v36))
        {
          ((void (*)(uint64_t, uint64_t, uint64_t))softLinkCGImageDestinationAddImage[0])((uint64_t)v36, (uint64_t)v32, 0);
          ((void (*)(uint64_t))softLinkCGImageDestinationFinalize[0])((uint64_t)v36);
          CFRelease(v36);
          uint64_t v37 = 0;
        }
        else
        {
          uint64_t v37 = 4294960596;
        }
        long long v2 = v50;
        CFRelease(v32);
        goto LABEL_10;
      }
    }
    uint64_t v37 = 4294960596;
  }
  else
  {
    uint64_t v37 = 4294960596;
    id v29 = (const void *)v25;
  }
  long long v2 = v50;
LABEL_10:
  CFRelease(v29);
LABEL_11:

  return v37;
}

uint64_t initCGImageDestinationFinalize(uint64_t a1)
{
  if (ImageIOLibrary_sOnce != -1) {
    dispatch_once(&ImageIOLibrary_sOnce, &__block_literal_global_133);
  }
  long long v2 = (uint64_t (*)())dlsym((void *)ImageIOLibrary_sLib, "CGImageDestinationFinalize");
  softLinkCGImageDestinationFinalize[0] = v2;
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

void *__ImageIOLibrary_block_invoke()
{
  int32x4_t result = dlopen("/System/Library/Frameworks/ImageIO.framework/ImageIO", 2);
  ImageIOLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t initCGImageDestinationAddImage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (ImageIOLibrary_sOnce != -1) {
    dispatch_once(&ImageIOLibrary_sOnce, &__block_literal_global_133);
  }
  double v6 = (uint64_t (*)())dlsym((void *)ImageIOLibrary_sLib, "CGImageDestinationAddImage");
  softLinkCGImageDestinationAddImage[0] = v6;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(a1, a2, a3);
}

uint64_t initCGImageDestinationCreateWithURL(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (ImageIOLibrary_sOnce != -1) {
    dispatch_once(&ImageIOLibrary_sOnce, &__block_literal_global_133);
  }
  double v8 = (uint64_t (*)())dlsym((void *)ImageIOLibrary_sLib, "CGImageDestinationCreateWithURL");
  softLinkCGImageDestinationCreateWithURL[0] = v8;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v8)(a1, a2, a3, a4);
}

uint64_t initCGImageCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (CoreGraphicsLibrary_sOnce != -1) {
    dispatch_once(&CoreGraphicsLibrary_sOnce, &__block_literal_global_126);
  }
  uint64_t v17 = (uint64_t (*)(int, int, int, int, int, int, int, int, uint64_t, char, int))dlsym((void *)CoreGraphicsLibrary_sLib, "CGImageCreate");
  softLinkCGImageCreate = v17;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v17)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void *__CoreGraphicsLibrary_block_invoke()
{
  int32x4_t result = dlopen("/System/Library/Frameworks/CoreGraphics.framework/CoreGraphics", 2);
  CoreGraphicsLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t initCGColorSpaceCreateDeviceRGB()
{
  if (CoreGraphicsLibrary_sOnce != -1) {
    dispatch_once(&CoreGraphicsLibrary_sOnce, &__block_literal_global_126);
  }
  uint64_t v0 = (uint64_t (*)())dlsym((void *)CoreGraphicsLibrary_sLib, "CGColorSpaceCreateDeviceRGB");
  softLinkCGColorSpaceCreateDeviceRGB[0] = v0;
  return v0();
}

uint64_t initCGDataProviderCreateWithData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (CoreGraphicsLibrary_sOnce != -1) {
    dispatch_once(&CoreGraphicsLibrary_sOnce, &__block_literal_global_126);
  }
  double v8 = (uint64_t (*)())dlsym((void *)CoreGraphicsLibrary_sLib, "CGDataProviderCreateWithData");
  softLinkCGDataProviderCreateWithCFDataRef Data = v8;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v8)(a1, a2, a3, a4);
}

void _SaveScreenshotReleaseSurfaceData(const void *a1)
{
  ((void (*)(uint64_t, uint64_t, uint64_t))softLinkIOSurfaceUnlock[0])((uint64_t)a1, 1, 0);
  CFRelease(a1);
}

uint64_t initIOSurfaceUnlock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (IOSurfaceLibrary_sOnce != -1) {
    dispatch_once(&IOSurfaceLibrary_sOnce, &__block_literal_global_112);
  }
  double v6 = (uint64_t (*)())dlsym((void *)IOSurfaceLibrary_sLib, "IOSurfaceUnlock");
  softLinkIOSurfaceUnlock[0] = v6;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(a1, a2, a3);
}

void *__IOSurfaceLibrary_block_invoke()
{
  int32x4_t result = dlopen("/System/Library/PrivateFrameworks/IOSurface.framework/IOSurface", 2);
  IOSurfaceLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t initIOSurfaceGetBaseAddress(uint64_t a1)
{
  if (IOSurfaceLibrary_sOnce != -1) {
    dispatch_once(&IOSurfaceLibrary_sOnce, &__block_literal_global_112);
  }
  long long v2 = (uint64_t (*)())dlsym((void *)IOSurfaceLibrary_sLib, "IOSurfaceGetBaseAddress");
  softLinkIOSurfaceGetBaseAddress[0] = v2;
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

uint64_t initIOSurfaceLock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (IOSurfaceLibrary_sOnce != -1) {
    dispatch_once(&IOSurfaceLibrary_sOnce, &__block_literal_global_112);
  }
  double v6 = (uint64_t (*)())dlsym((void *)IOSurfaceLibrary_sLib, "IOSurfaceLock");
  softLinkIOSurfaceLock[0] = v6;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(a1, a2, a3);
}

uint64_t initCARenderServerRenderDisplay(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (QuartzCoreLibrary_sOnce != -1) {
    dispatch_once(&QuartzCoreLibrary_sOnce, &__block_literal_global_205);
  }
  double v10 = (uint64_t (*)())dlsym((void *)QuartzCoreLibrary_sLib, "CARenderServerRenderDisplay");
  softLinkCARenderServerRenderDisplay[0] = v10;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v10)(a1, a2, a3, a4, a5);
}

uint64_t initIOSurfaceCreate(uint64_t a1)
{
  if (IOSurfaceLibrary_sOnce != -1) {
    dispatch_once(&IOSurfaceLibrary_sOnce, &__block_literal_global_112);
  }
  long long v2 = (uint64_t (*)())dlsym((void *)IOSurfaceLibrary_sLib, "IOSurfaceCreate");
  softLinkIOSurfaceCreate[0] = v2;
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

uint64_t initValkIOSurfaceMemoryRegion()
{
  if (IOSurfaceLibrary_sOnce != -1) {
    dispatch_once(&IOSurfaceLibrary_sOnce, &__block_literal_global_112);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)IOSurfaceLibrary_sLib, "kIOSurfaceMemoryRegion");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkIOSurfaceMemoryRegion = result;
  }
  else
  {
    uint64_t result = constantValkIOSurfaceMemoryRegion;
  }
  getkIOSurfaceMemoryRegion[0] = kIOSurfaceMemoryRegionFunction;
  return result;
}

uint64_t kIOSurfaceMemoryRegionFunction()
{
  return constantValkIOSurfaceMemoryRegion;
}

uint64_t initValkIOSurfaceIsGlobal()
{
  if (IOSurfaceLibrary_sOnce != -1) {
    dispatch_once(&IOSurfaceLibrary_sOnce, &__block_literal_global_112);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)IOSurfaceLibrary_sLib, "kIOSurfaceIsGlobal");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkIOSurfaceIsGlobal = result;
  }
  else
  {
    uint64_t result = constantValkIOSurfaceIsGlobal;
  }
  getkIOSurfaceIsGlobal[0] = kIOSurfaceIsGlobalFunction;
  return result;
}

uint64_t kIOSurfaceIsGlobalFunction()
{
  return constantValkIOSurfaceIsGlobal;
}

uint64_t initValkIOSurfaceAllocSize()
{
  if (IOSurfaceLibrary_sOnce != -1) {
    dispatch_once(&IOSurfaceLibrary_sOnce, &__block_literal_global_112);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)IOSurfaceLibrary_sLib, "kIOSurfaceAllocSize");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkIOSurfaceAllocSize = result;
  }
  else
  {
    uint64_t result = constantValkIOSurfaceAllocSize;
  }
  getkIOSurfaceAllocSize[0] = kIOSurfaceAllocSizeFunction;
  return result;
}

uint64_t kIOSurfaceAllocSizeFunction()
{
  return constantValkIOSurfaceAllocSize;
}

uint64_t initValkIOSurfaceBytesPerRow()
{
  if (IOSurfaceLibrary_sOnce != -1) {
    dispatch_once(&IOSurfaceLibrary_sOnce, &__block_literal_global_112);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)IOSurfaceLibrary_sLib, "kIOSurfaceBytesPerRow");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkIOSurfaceBytesPerRow = result;
  }
  else
  {
    uint64_t result = constantValkIOSurfaceBytesPerRow;
  }
  getkIOSurfaceBytesPerRow[0] = kIOSurfaceBytesPerRowFunction;
  return result;
}

uint64_t kIOSurfaceBytesPerRowFunction()
{
  return constantValkIOSurfaceBytesPerRow;
}

uint64_t initValkIOSurfaceBytesPerElement()
{
  if (IOSurfaceLibrary_sOnce != -1) {
    dispatch_once(&IOSurfaceLibrary_sOnce, &__block_literal_global_112);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)IOSurfaceLibrary_sLib, "kIOSurfaceBytesPerElement");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkIOSurfaceBytesPerElement = result;
  }
  else
  {
    uint64_t result = constantValkIOSurfaceBytesPerElement;
  }
  getkIOSurfaceBytesPerElement[0] = kIOSurfaceBytesPerElementFunction;
  return result;
}

uint64_t kIOSurfaceBytesPerElementFunction()
{
  return constantValkIOSurfaceBytesPerElement;
}

uint64_t initValkIOSurfacePixelFormat()
{
  if (IOSurfaceLibrary_sOnce != -1) {
    dispatch_once(&IOSurfaceLibrary_sOnce, &__block_literal_global_112);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)IOSurfaceLibrary_sLib, "kIOSurfacePixelFormat");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkIOSurfacePixelFormat = result;
  }
  else
  {
    uint64_t result = constantValkIOSurfacePixelFormat;
  }
  getkIOSurfacePixelFormat[0] = kIOSurfacePixelFormatFunction;
  return result;
}

uint64_t kIOSurfacePixelFormatFunction()
{
  return constantValkIOSurfacePixelFormat;
}

uint64_t initValkIOSurfaceHeight()
{
  if (IOSurfaceLibrary_sOnce != -1) {
    dispatch_once(&IOSurfaceLibrary_sOnce, &__block_literal_global_112);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)IOSurfaceLibrary_sLib, "kIOSurfaceHeight");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkIOSurfaceHeight = result;
  }
  else
  {
    uint64_t result = constantValkIOSurfaceHeight;
  }
  getkIOSurfaceHeight[0] = kIOSurfaceHeightFunction;
  return result;
}

uint64_t kIOSurfaceHeightFunction()
{
  return constantValkIOSurfaceHeight;
}

uint64_t initValkIOSurfaceWidth()
{
  if (IOSurfaceLibrary_sOnce != -1) {
    dispatch_once(&IOSurfaceLibrary_sOnce, &__block_literal_global_112);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)IOSurfaceLibrary_sLib, "kIOSurfaceWidth");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkIOSurfaceWidth = result;
  }
  else
  {
    uint64_t result = constantValkIOSurfaceWidth;
  }
  getkIOSurfaceWidth[0] = kIOSurfaceWidthFunction;
  return result;
}

uint64_t kIOSurfaceWidthFunction()
{
  return constantValkIOSurfaceWidth;
}

Class initCADisplay()
{
  if (QuartzCoreLibrary_sOnce != -1) {
    dispatch_once(&QuartzCoreLibrary_sOnce, &__block_literal_global_205);
  }
  Class result = objc_getClass("CADisplay");
  classCADisplay = (uint64_t)result;
  getCADisplayClass[0] = (uint64_t (*)())CADisplayFunction;
  return result;
}

id CADisplayFunction()
{
  return (id)classCADisplay;
}

uint64_t cdb_read(uint64_t a1, char *__dst, size_t __n, unsigned int a4)
{
  unsigned int v4 = __n;
  double v5 = __dst;
  if (*(void *)a1)
  {
    unsigned int v7 = *(_DWORD *)(a1 + 12);
    BOOL v9 = v7 >= a4;
    unsigned int v8 = v7 - a4;
    BOOL v9 = v9 && v8 >= __n;
    if (!v9)
    {
LABEL_6:
      *__error() = 100;
      return 0xFFFFFFFFLL;
    }
    memcpy(__dst, (const void *)(*(void *)a1 + a4), __n);
  }
  else
  {
    if (lseek(*(_DWORD *)(a1 + 8), a4, 0) == -1) {
      return 0xFFFFFFFFLL;
    }
    if (v4)
    {
      while (1)
      {
        while (1)
        {
          ssize_t v10 = read(*(_DWORD *)(a1 + 8), v5, v4);
          if (v10 != -1) {
            break;
          }
          if (*__error() != 4) {
            return 0xFFFFFFFFLL;
          }
        }
        ssize_t v11 = v10;
        if (!v10) {
          break;
        }
        uint64_t result = 0;
        v5 += v11;
        v4 -= v11;
        if (!v4) {
          return result;
        }
      }
      goto LABEL_6;
    }
  }
  return 0;
}

uint64_t cdb_findnext(_DWORD *a1, unsigned __int8 *a2, int a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  unsigned int v6 = a1[4];
  if (v6)
  {
    unsigned int v7 = a1[8];
  }
  else
  {
    unsigned int v17 = 5381;
    if (a3)
    {
      int v18 = a3;
      uint64_t v19 = a2;
      do
      {
        int v20 = *v19++;
        unsigned int v17 = (33 * v17) ^ v20;
        --v18;
      }
      while (v18);
    }
    uint64_t result = cdb_read((uint64_t)a1, (char *)&v23, 8uLL, 8 * v17);
    if (result == -1) {
      return result;
    }
    unsigned int v7 = __dst;
    a1[8] = __dst;
    if (!v7) {
      return 0;
    }
    int v21 = v23;
    a1[7] = v23;
    a1[5] = v17;
    a1[6] = v21 + 8 * ((v17 >> 8) % v7);
    unsigned int v6 = a1[4];
  }
  if (v6 >= v7) {
    return 0;
  }
  while (1)
  {
    uint64_t result = cdb_read((uint64_t)a1, (char *)&v23, 8uLL, a1[6]);
    if (result == -1) {
      return result;
    }
    unsigned int v9 = __dst;
    if (!__dst) {
      return 0;
    }
    int v10 = a1[5];
    ++a1[4];
    int v11 = a1[6] + 8;
    if (v11 == a1[7] + 8 * a1[8]) {
      int v11 = a1[7];
    }
    a1[6] = v11;
    if (v23 == v10)
    {
      uint64_t result = cdb_read((uint64_t)a1, (char *)&v23, 8uLL, v9);
      if (result == -1) {
        return result;
      }
      if (v23 == a3)
      {
        unsigned int v12 = v9 + 8;
        if (a3)
        {
          unsigned int v13 = v9 + 8;
          int v14 = a3;
          uint64_t v15 = (char *)a2;
          while (1)
          {
            size_t v16 = v14 >= 32 ? 32 : v14;
            uint64_t result = cdb_read((uint64_t)a1, __dst_4, v16, v13);
            if (result == -1) {
              break;
            }
            if (memcmp(__dst_4, v15, v16)) {
              goto LABEL_20;
            }
            v13 += v16;
            v15 += (int)v16;
            v14 -= v16;
            if (!v14) {
              goto LABEL_30;
            }
          }
        }
        else
        {
LABEL_30:
          unsigned int v22 = __dst;
          a1[9] = v12 + a3;
          a1[10] = v22;
          return 1;
        }
        return result;
      }
    }
LABEL_20:
    if (a1[4] >= a1[8]) {
      return 0;
    }
  }
}

uint64_t cdb_make_addend(uint64_t a1, int a2, int a3, int a4)
{
  unsigned int v8 = *(_DWORD **)(a1 + 12288);
  if (!v8 || (int v9 = v8[2002], v9 >= 1000))
  {
    unsigned int v8 = malloc_type_malloc(0x1F50uLL, 0x10200405A375028uLL);
    if (!v8) {
      return 0xFFFFFFFFLL;
    }
    int v9 = 0;
    v8[2002] = 0;
    *((void *)v8 + 1000) = *(void *)(a1 + 12288);
    *(void *)(a1 + 12288) = v8;
  }
  int v10 = &v8[2 * v9];
  unsigned int v11 = *(_DWORD *)(a1 + 12352);
  *int v10 = a4;
  v10[1] = v11;
  v8[2002] = v9 + 1;
  ++*(_DWORD *)(a1 + 12312);
  if (v11 < 0xFFFFFFF8)
  {
    *(_DWORD *)(a1 + 12352) = v11 + 8;
    int v12 = v11 + 8 + a2;
    if (!__CFADD__(v11 + 8, a2))
    {
      *(_DWORD *)(a1 + 12352) = v12;
      BOOL v13 = __CFADD__(v12, a3);
      int v14 = v12 + a3;
      if (!v13)
      {
        uint64_t result = 0;
        *(_DWORD *)(a1 + 12352) = v14;
        return result;
      }
    }
  }
  *__error() = 12;
  return 0xFFFFFFFFLL;
}

uint64_t buffer_putalign(uint64_t a1, char *__src, size_t __n)
{
  unsigned int v3 = __n;
  while (1)
  {
    uint64_t v6 = *(unsigned int *)(a1 + 8);
    unsigned int v7 = *(_DWORD *)(a1 + 12) - v6;
    unsigned int v8 = (void *)(*(void *)a1 + v6);
    if (v3 <= v7) {
      break;
    }
    memcpy(v8, __src, (*(_DWORD *)(a1 + 12) - v6));
    *(_DWORD *)(a1 + 8) += v7;
    __src += v7;
    uint64_t result = buffer_flush((uint64_t *)a1);
    v3 -= v7;
    if (result == -1) {
      return result;
    }
  }
  memcpy(v8, __src, v3);
  uint64_t result = 0;
  *(_DWORD *)(a1 + 8) += v3;
  return result;
}

uint64_t buffer_flush(uint64_t *a1)
{
  unsigned int v1 = *((_DWORD *)a1 + 2);
  if (v1)
  {
    *((_DWORD *)a1 + 2) = 0;
    long long v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))a1[3];
    uint64_t v3 = *((unsigned int *)a1 + 4);
    uint64_t v4 = *a1;
    do
    {
      uint64_t v5 = v1;
      while (1)
      {
        uint64_t v6 = v2(v3, v4, v5);
        if (v6 != -1) {
          break;
        }
        if (*__error() != 4) {
          return 0xFFFFFFFFLL;
        }
      }
      v4 += v6;
      unsigned int v1 = v5 - v6;
    }
    while (v5 != v6);
  }
  return 0;
}

uint64_t buffer_putflush(uint64_t a1, uint64_t a2)
{
  uint64_t result = buffer_flush((uint64_t *)a1);
  if (result != -1)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 24);
    uint64_t v6 = *(unsigned int *)(a1 + 16);
    uint64_t v7 = 2048;
    do
    {
      while (1)
      {
        uint64_t v8 = v5(v6, a2, v7);
        if (v8 != -1) {
          break;
        }
        if (*__error() != 4) {
          return 0xFFFFFFFFLL;
        }
      }
      a2 += v8;
      uint64_t v7 = (v7 - v8);
    }
    while (v7);
    return 0;
  }
  return result;
}

CFTypeRef CFBinaryPlistStreamedCreateData(const __CFString *a1, int *a2)
{
  return CFBinaryPlistStreamedCreateDataEx(a1, 31, a2);
}

CFTypeRef CFBinaryPlistStreamedCreateDataEx(const __CFString *a1, int a2, int *a3)
{
  uint64_t v30 = 0;
  long long v32 = 0u;
  uint64_t v28 = 0;
  long long v25 = 0u;
  long long v24 = 0u;
  long long v23 = 0u;
  long long v22 = 0u;
  long long v21 = 0u;
  long long v20 = 0u;
  long long v19 = 0u;
  long long v18 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  _GlobalEnsureInitialized();
  uint64_t v29 = 0;
  long long v26 = 0u;
  long long v27 = 0u;
  uint64_t v31 = 0;
  *(void *)&long long v32 = 0;
  DWORD2(v32) = 0;
  CFTypeRef cf = CFDataCreateMutable(0, 0);
  if (!cf)
  {
    CFTypeRef v7 = 0;
    int v6 = -6728;
    goto LABEL_8;
  }
  LODWORD(v30) = a2;
  int v6 = _WriteStreamed((uint64_t)&cf, a1);
  CFTypeRef v7 = cf;
  if (v6)
  {
    if (!cf) {
      goto LABEL_6;
    }
    CFRelease(cf);
    CFTypeRef v7 = 0;
  }
  CFTypeRef cf = 0;
LABEL_6:
  if ((void)v26)
  {
    CFRelease((CFTypeRef)v26);
    *(void *)&long long v26 = 0;
  }
LABEL_8:
  if (*((void *)&v26 + 1)) {
    CFRelease(*((CFTypeRef *)&v26 + 1));
  }
  if (a3) {
    *a3 = v6;
  }
  return v7;
}

void _GlobalEnsureInitialized()
{
  if (gCFStringType == -1)
  {
    gCFArrayType = CFArrayGetTypeID();
    gCFBooleanType = CFBooleanGetTypeID();
    gCFDataType = CFDataGetTypeID();
    gCFDateType = CFDateGetTypeID();
    gCFDictionaryType = CFDictionaryGetTypeID();
    gCFNumberType = CFNumberGetTypeID();
    gCFStringType = CFStringGetTypeID();
  }
}

uint64_t _WriteStreamed(uint64_t a1, const __CFString *a2)
{
  int v4 = *(_DWORD *)(a1 + 312);
  if ((v4 & 0x40) != 0)
  {
    long long v5 = *(_OWORD *)(MEMORY[0x1E4F1D530] + 32);
    long long v6 = *MEMORY[0x1E4F1D530];
    v9.copyDescription = *(CFDictionaryCopyDescriptionCallBack *)(MEMORY[0x1E4F1D530] + 24);
    v9.hash = (CFDictionaryHashCallBack)*((void *)&v5 + 1);
    *(_OWORD *)&v9.version = (unint64_t)v6;
    v9.equal = (CFDictionaryEqualCallBack)_ObjectsExactlyEqual;
    v9.release = 0;
    CFMutableDictionaryRef v7 = CFDictionaryCreateMutable(0, 0, &v9, 0);
    *(void *)(a1 + 272) = v7;
    if (!v7) {
      return 4294960568;
    }
  }
  if ((v4 & 1) == 0 || (uint64_t result = _WriteBytes(a1, (const UInt8 *)"CFB1", 4), !result))
  {
    if ((v4 & 0x1C) == 0 || (uint64_t result = _WriteStreamedObject(a1, a2), !result))
    {
      if ((v4 & 2) == 0) {
        return 0;
      }
      uint64_t result = _WriteBytes(a1, (const UInt8 *)"END!", 4);
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t _WriteBytes(uint64_t a1, const UInt8 *a2, CFIndex length)
{
  long long v5 = *(__CFData **)a1;
  if (v5)
  {
    CFDataAppendBytes(v5, a2, length);
LABEL_5:
    uint64_t result = 0;
    *(void *)(a1 + 288) += length;
    return result;
  }
  long long v6 = *(uint64_t (**)(const UInt8 *, CFIndex, void))(a1 + 320);
  if (!v6) {
    return 4294960551;
  }
  uint64_t result = v6(a2, length, *(void *)(a1 + 328));
  if (!result) {
    goto LABEL_5;
  }
  return result;
}

uint64_t _WriteStreamedObject(uint64_t a1, const __CFString *a2)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  int v4 = *(_DWORD *)(a1 + 312);
  CFTypeID v5 = CFGetTypeID(a2);
  UInt8 v30 = 0;
  CFIndex length = 0;
  char v28 = 0;
  if (v5 != gCFStringType)
  {
    if (v5 == gCFNumberType)
    {
      uint64_t result = _WriteNumber(a1, (CFNumberRef)a2, 1, 1);
      if (result) {
        return result;
      }
      return 0;
    }
    if (v5 == gCFBooleanType)
    {
      if ((const __CFString *)*MEMORY[0x1E4F1CFD0] == a2) {
        UInt8 v12 = 9;
      }
      else {
        UInt8 v12 = 8;
      }
      UInt8 v30 = v12;
    }
    else
    {
      if (v5 == gCFDataType)
      {
        CFIndex v13 = CFDataGetLength((CFDataRef)a2);
        if (v13 < 2
          || !*(void *)(a1 + 272)
          || (uint64_t result = _WriteStreamedUpdateUID(a1, a2, &v28), !result) && !v28)
        {
          UInt8 v14 = v13 | 0x40;
          if (v13 >= 15) {
            UInt8 v14 = 79;
          }
          UInt8 v30 = v14;
          uint64_t result = _WriteBytes(a1, &v30, 1);
          if (!result)
          {
            if (v13 < 15 || (uint64_t result = _WriteInteger(a1, v13, 1, 1), !result))
            {
              BytePtr = CFDataGetBytePtr((CFDataRef)a2);
              uint64_t v10 = a1;
              CFIndex v9 = v13;
              goto LABEL_42;
            }
          }
        }
        return result;
      }
      if (v5 == gCFDateType)
      {
        if (!*(void *)(a1 + 272) || (uint64_t result = _WriteStreamedUpdateUID(a1, a2, &v28), !result) && !v28)
        {
          LOBYTE(keys[0]) = 51;
          *(void **)((char *)keys + 1) = COERCE_VOID_(MEMORY[0x192FA8D70](a2));
          BytePtr = (const UInt8 *)keys;
          uint64_t v10 = a1;
          CFIndex v9 = 9;
          goto LABEL_42;
        }
        return result;
      }
      if (v5 == gCFDictionaryType)
      {
        if ((v4 & 4) != 0)
        {
          UInt8 v30 = -48;
          uint64_t result = _WriteBytes(a1, &v30, 1);
          if (result) {
            return result;
          }
        }
        if ((v4 & 0x10) != 0)
        {
          CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)a2);
          if (Count > 16)
          {
            keys[1] = (void *)a2;
            *(void *)&long long v40 = 0;
            keys[0] = (void *)a1;
            CFDictionaryApplyFunction((CFDictionaryRef)a2, (CFDictionaryApplierFunction)_WriteStreamedDictionaryApplier, keys);
            uint64_t result = v40;
            if (v40) {
              return result;
            }
          }
          else
          {
            uint64_t v22 = Count;
            long long v45 = 0u;
            long long v46 = 0u;
            long long v43 = 0u;
            long long v44 = 0u;
            long long v41 = 0u;
            long long v42 = 0u;
            *(_OWORD *)keys = 0u;
            long long v40 = 0u;
            long long v38 = 0u;
            long long v36 = 0u;
            long long v37 = 0u;
            long long v34 = 0u;
            long long v35 = 0u;
            long long v32 = 0u;
            long long v33 = 0u;
            *(_OWORD *)values = 0u;
            CFDictionaryGetKeysAndValues((CFDictionaryRef)a2, (const void **)keys, (const void **)values);
            if (v22 >= 1)
            {
              uint64_t v23 = 0;
              do
              {
                uint64_t result = _WriteStreamedObject(a1, keys[v23]);
                if (result) {
                  return result;
                }
                uint64_t result = _WriteStreamedObject(a1, values[v23]);
                if (result) {
                  return result;
                }
              }
              while (v22 != ++v23);
            }
          }
        }
      }
      else
      {
        if (v5 != gCFArrayType)
        {
          if ((const __CFString *)*MEMORY[0x1E4F1D260] != a2) {
            return 4294960561;
          }
          UInt8 v30 = 0;
          goto LABEL_17;
        }
        if ((v4 & 4) != 0)
        {
          UInt8 v30 = -96;
          uint64_t result = _WriteBytes(a1, &v30, 1);
          if (result) {
            return result;
          }
        }
        if ((v4 & 0x10) != 0)
        {
          CFIndex v24 = CFArrayGetCount((CFArrayRef)a2);
          if (v24 >= 1)
          {
            CFIndex v25 = v24;
            CFIndex v26 = 0;
            do
            {
              CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a2, v26);
              uint64_t result = _WriteStreamedObject(a1, ValueAtIndex);
              if (result) {
                return result;
              }
            }
            while (v25 != ++v26);
          }
        }
      }
      if ((v4 & 8) == 0) {
        return 0;
      }
      UInt8 v30 = 1;
    }
LABEL_17:
    BytePtr = &v30;
LABEL_41:
    uint64_t v10 = a1;
    CFIndex v9 = 1;
LABEL_42:
    uint64_t result = _WriteBytes(v10, BytePtr, v9);
    if (result) {
      return result;
    }
    return 0;
  }
  if (!*(void *)(a1 + 272)
    || CFStringGetLength(a2) < 1
    || (uint64_t result = _WriteStreamedUpdateUID(a1, a2, &v28), !result) && !v28)
  {
    UInt8 v30 = 112;
    uint64_t result = _WriteBytes(a1, &v30, 1);
    if (!result)
    {
      CStringPtr = CFStringGetCStringPtr(a2, 0x8000100u);
      if (CStringPtr)
      {
        uint64_t v8 = CStringPtr;
        CFIndex v9 = strlen(CStringPtr) + 1;
        uint64_t v10 = a1;
        BytePtr = (const UInt8 *)v8;
        goto LABEL_42;
      }
      CFIndex v15 = CFStringGetLength(a2);
      if (v15 >= 1)
      {
        CFIndex v16 = v15;
        CFIndex v17 = 0;
        do
        {
          v48.location = v17;
          v48.CFIndex length = v16;
          CFIndex Bytes = CFStringGetBytes(a2, v48, 0x8000100u, 0, 0, (UInt8 *)(a1 + 8), 256, &length);
          if (Bytes < 1) {
            return 4294960561;
          }
          CFIndex v19 = Bytes;
          uint64_t result = _WriteBytes(a1, (const UInt8 *)(a1 + 8), length);
          if (result) {
            return result;
          }
          v17 += v19;
          BOOL v20 = v16 <= v19;
          v16 -= v19;
        }
        while (!v20);
      }
      BytePtr = (const UInt8 *)"";
      goto LABEL_41;
    }
  }
  return result;
}

uint64_t _WriteStreamedUpdateUID(uint64_t a1, const void *a2, char *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  CFStringRef Value = (char *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 272), a2);
  if (!Value)
  {
    uint64_t v10 = *(__CFDictionary **)(a1 + 272);
    long long v11 = (const void *)(*(void *)(a1 + 280) + 1);
    *(void *)(a1 + 280) = v11;
    CFDictionaryAddValue(v10, a2, v11);
    char v12 = 0;
LABEL_13:
    uint64_t result = 0;
    *a3 = v12;
    return result;
  }
  unint64_t v7 = (unint64_t)(Value - 1);
  if ((unint64_t)Value > 0x100)
  {
    if ((unint64_t)Value > 0x10000)
    {
      if ((unint64_t)Value >= 0x1000001)
      {
        if ((unint64_t)Value > 0x100000000) {
          return 4294960586;
        }
        UInt8 v14 = -125;
        __int16 v15 = (_WORD)Value - 1;
        char v16 = (Value - 1) >> 16;
        v7 >>= 24;
        CFIndex v8 = 5;
        uint64_t v9 = 4;
      }
      else
      {
        UInt8 v14 = -126;
        __int16 v15 = (_WORD)Value - 1;
        v7 >>= 16;
        CFIndex v8 = 4;
        uint64_t v9 = 3;
      }
    }
    else
    {
      UInt8 v14 = -127;
      LOBYTE(v15) = (_BYTE)Value - 1;
      v7 >>= 8;
      CFIndex v8 = 3;
      uint64_t v9 = 2;
    }
  }
  else
  {
    UInt8 v14 = 0x80;
    CFIndex v8 = 2;
    uint64_t v9 = 1;
  }
  *(&v14 + v9) = v7;
  uint64_t result = _WriteBytes(a1, &v14, v8);
  if (!result)
  {
    char v12 = 1;
    goto LABEL_13;
  }
  return result;
}

uint64_t _WriteNumber(uint64_t a1, CFNumberRef number, int a3, int a4)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  unint64_t valuePtr = 0;
  char v23 = 0;
  if (CFNumberIsFloatType(number))
  {
    if ((*(unsigned char *)(a1 + 312) & 0x40) == 0
      || (uint64_t result = _WriteStreamedUpdateUID(a1, number, &v23), !result) && !v23)
    {
      if (CFNumberGetByteSize(number) > 4)
      {
        CFNumberGetValue(number, kCFNumberFloat64Type, &valuePtr);
        UInt8 v25 = 35;
        unint64_t v18 = valuePtr;
        if (!a4) {
          unint64_t v18 = bswap64(valuePtr);
        }
        unint64_t v26 = v18;
        CFIndex v10 = 9;
      }
      else
      {
        CFNumberGetValue(number, kCFNumberFloat32Type, &valuePtr);
        UInt8 v25 = 34;
        unsigned int v9 = valuePtr;
        if (!a4) {
          unsigned int v9 = bswap32(valuePtr);
        }
        LODWORD(v26) = v9;
        CFIndex v10 = 5;
      }
      uint64_t v19 = a1;
      return _WriteBytes(v19, &v25, v10);
    }
  }
  else
  {
    if (CFNumberGetType(number) != (kCFNumberMaxType|kCFNumberSInt8Type))
    {
      CFNumberGetValue(number, kCFNumberSInt64Type, &valuePtr);
      unint64_t v20 = valuePtr;
      if ((*(unsigned char *)(a1 + 312) & 0x40) != 0 && valuePtr >= 0x100)
      {
        uint64_t result = _WriteStreamedUpdateUID(a1, number, &v23);
        if (result || v23) {
          return result;
        }
        unint64_t v20 = valuePtr;
      }
      return _WriteInteger(a1, v20, a3, a4);
    }
    unint64_t v21 = 0;
    unint64_t v22 = 0;
    if ((*(unsigned char *)(a1 + 312) & 0x40) == 0
      || (uint64_t result = _WriteStreamedUpdateUID(a1, number, &v23), !result) && !v23)
    {
      CFNumberGetValue(number, kCFNumberMaxType|kCFNumberSInt8Type, &v21);
      UInt8 v25 = 20;
      if (a4)
      {
        unint64_t v11 = v22 >> 8;
        unint64_t v26 = v21;
        unint64_t v12 = v22 >> 16;
        char v27 = v22;
        unint64_t v13 = v22 >> 24;
        unint64_t v14 = HIDWORD(v22);
        unint64_t v15 = v22 >> 40;
        unint64_t v16 = HIWORD(v22);
        unint64_t v17 = HIBYTE(v22);
      }
      else
      {
        LOBYTE(v17) = v22;
        unint64_t v26 = bswap64(v21);
        unint64_t v11 = HIWORD(v22);
        char v27 = HIBYTE(v22);
        unint64_t v12 = v22 >> 40;
        unint64_t v13 = HIDWORD(v22);
        unint64_t v14 = v22 >> 24;
        unint64_t v15 = v22 >> 16;
        unint64_t v16 = v22 >> 8;
      }
      char v28 = v11;
      char v29 = v12;
      char v30 = v13;
      char v31 = v14;
      char v32 = v15;
      char v33 = v16;
      char v34 = v17;
      uint64_t v19 = a1;
      CFIndex v10 = 17;
      return _WriteBytes(v19, &v25, v10);
    }
  }
  return result;
}

uint64_t _WriteInteger(uint64_t a1, unint64_t a2, int a3, int a4)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (a2 <= 0xF && a3)
  {
    UInt8 v6 = a2 | 0x90;
    CFIndex v4 = 1;
  }
  else if (a2 > 0xFF)
  {
    if (a2 >> 16)
    {
      if (HIDWORD(a2))
      {
        UInt8 v6 = 19;
        if (a4) {
          unint64_t v7 = a2;
        }
        else {
          unint64_t v7 = bswap64(a2);
        }
        CFIndex v4 = 9;
      }
      else
      {
        UInt8 v6 = 18;
        if (a4) {
          LODWORD(v7) = a2;
        }
        else {
          LODWORD(v7) = bswap32(a2);
        }
        CFIndex v4 = 5;
      }
    }
    else
    {
      UInt8 v6 = 17;
      if (a4) {
        LOWORD(v7) = a2;
      }
      else {
        LOWORD(v7) = bswap32(a2) >> 16;
      }
      CFIndex v4 = 3;
    }
  }
  else
  {
    UInt8 v6 = 16;
    LOBYTE(v7) = a2;
    CFIndex v4 = 2;
  }
  return _WriteBytes(a1, &v6, v4);
}

uint64_t _WriteStreamedDictionaryApplier(uint64_t result, uint64_t a2, void *a3)
{
  if (!*((_DWORD *)a3 + 4))
  {
    uint64_t result = _WriteStreamedObject(*a3, result);
    if (result || (uint64_t result = _WriteStreamedObject(*a3, a2), result)) {
      *((_DWORD *)a3 + 4) = result;
    }
  }
  return result;
}

BOOL _ObjectsExactlyEqual(const void *a1, const __CFNumber *a2)
{
  CFTypeID v4 = CFGetTypeID(a1);
  BOOL result = 0;
  if (v4 == CFGetTypeID(a2))
  {
    if (CFEqual(a1, a2))
    {
      if (v4 != gCFNumberType) {
        return 1;
      }
      int IsFloatType = CFNumberIsFloatType((CFNumberRef)a1);
      if (IsFloatType == CFNumberIsFloatType(a2)) {
        return 1;
      }
    }
  }
  return result;
}

uint64_t CFBinaryPlistStreamedWriteBytes(const UInt8 *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v33 = 0;
  long long v35 = 0u;
  uint64_t v31 = 0;
  long long v28 = 0u;
  long long v27 = 0u;
  long long v26 = 0u;
  long long v25 = 0u;
  long long v24 = 0u;
  long long v23 = 0u;
  long long v22 = 0u;
  long long v21 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  _GlobalEnsureInitialized();
  CFTypeRef cf = 0;
  uint64_t v32 = 0;
  long long v29 = 0u;
  long long v30 = 0u;
  DWORD2(v35) = 0;
  UInt8 v8 = a2 | 0x40;
  uint64_t v34 = a3;
  *(void *)&long long v35 = a4;
  if (a2 >= 0xF) {
    UInt8 v8 = 79;
  }
  UInt8 v11 = v8;
  uint64_t v9 = _WriteBytes((uint64_t)&cf, &v11, 1);
  if (!v9)
  {
    if (a2 < 0xF || (uint64_t v9 = _WriteInteger((uint64_t)&cf, a2, 1, 1), !v9)) {
      uint64_t v9 = _WriteBytes((uint64_t)&cf, a1, a2);
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  if ((void)v29) {
    CFRelease((CFTypeRef)v29);
  }
  if (*((void *)&v29 + 1)) {
    CFRelease(*((CFTypeRef *)&v29 + 1));
  }
  return v9;
}

uint64_t CFBinaryPlistStreamedWriteObject(const __CFString *a1, int a2, uint64_t a3, uint64_t a4)
{
  int v32 = 0;
  long long v34 = 0u;
  uint64_t v29 = 0;
  long long v26 = 0u;
  long long v25 = 0u;
  long long v24 = 0u;
  long long v23 = 0u;
  long long v22 = 0u;
  long long v21 = 0u;
  long long v20 = 0u;
  long long v19 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  _GlobalEnsureInitialized();
  CFTypeRef cf = 0;
  uint64_t v30 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  DWORD2(v34) = 0;
  int v31 = a2;
  uint64_t v33 = a3;
  *(void *)&long long v34 = a4;
  uint64_t v8 = _WriteStreamed((uint64_t)&cf, a1);
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if ((void)v27)
  {
    CFRelease((CFTypeRef)v27);
    *(void *)&long long v27 = 0;
  }
  if (*((void *)&v27 + 1)) {
    CFRelease(*((CFTypeRef *)&v27 + 1));
  }
  return v8;
}

CFTypeRef CFBinaryPlistStreamedCreateWithBytes(unsigned __int8 *a1, uint64_t a2, int *a3)
{
  v4[0] = 0u;
  LODWORD(v4[0]) = 19;
  v4[1] = (unint64_t)a1;
  v4[2] = 0uLL;
  return _ReadStreamed((uint64_t)v4, a1, (unint64_t)&a1[a2], 0, a3);
}

CFTypeRef _ReadStreamed(uint64_t a1, unsigned __int8 *a2, unint64_t a3, void *a4, int *a5)
{
  CFTypeRef cf = 0;
  long long v20 = a2;
  _GlobalEnsureInitialized();
  int v10 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 0x40) != 0)
  {
    long long v11 = *(_OWORD *)(MEMORY[0x1E4F1D540] + 16);
    *(_OWORD *)&v18.version = (unint64_t)*MEMORY[0x1E4F1D540];
    v18.copyDescription = (CFDictionaryCopyDescriptionCallBack)*((void *)&v11 + 1);
    v18.equal = (CFDictionaryEqualCallBack)_ObjectsExactlyEqual;
    v18.release = 0;
    CFMutableDictionaryRef v12 = CFDictionaryCreateMutable(0, 0, 0, &v18);
    *(void *)(a1 + 24) = v12;
    if (!v12)
    {
      CFTypeRef v13 = 0;
      int v14 = -6728;
      goto LABEL_18;
    }
    int v10 = *(_DWORD *)a1;
  }
  if (v10)
  {
    if ((uint64_t)(a3 - (void)a2) < 4)
    {
      CFTypeRef v13 = 0;
      int v14 = -6743;
      goto LABEL_18;
    }
    if (*(_DWORD *)a2 != 826426947)
    {
      CFTypeRef v13 = 0;
      int v14 = -6716;
      goto LABEL_18;
    }
    long long v20 = a2 + 4;
  }
  if ((v10 & 0x10) == 0)
  {
    CFTypeRef v13 = 0;
    if ((v10 & 2) == 0)
    {
LABEL_10:
      int v14 = 0;
      goto LABEL_18;
    }
LABEL_14:
    if ((uint64_t)(a3 - (void)v20) < 4)
    {
      int v14 = -6743;
    }
    else
    {
      if (*(_DWORD *)v20 == 558124613)
      {
        int v14 = 0;
        v20 += 4;
        goto LABEL_18;
      }
      int v14 = -6716;
    }
    goto LABEL_31;
  }
  int v15 = _ReadStreamedObject(a1, &v20, a3, &cf);
  CFTypeRef v13 = cf;
  if (!v15)
  {
    if (!cf)
    {
      int v14 = -6742;
      goto LABEL_18;
    }
    if ((*(_DWORD *)a1 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_14;
  }
  int v14 = v15;
LABEL_31:
  if (v13)
  {
    CFRelease(v13);
    CFTypeRef v13 = 0;
  }
LABEL_18:
  long long v16 = *(const void **)(a1 + 24);
  if (v16)
  {
    CFRelease(v16);
    *(void *)(a1 + 24) = 0;
  }
  if (a4) {
    *a4 = v20;
  }
  if (a5) {
    *a5 = v14;
  }
  return v13;
}

uint64_t _ReadStreamedObject(uint64_t a1, unsigned __int8 **a2, unint64_t a3, void *a4)
{
  unsigned int v59 = 0;
  CFDictionaryRef v56 = 0;
  unint64_t valuePtr = 0;
  int64_t value = 0;
  CFTypeID v4 = *a2;
  if ((unint64_t)*a2 < a3)
  {
    UInt8 v6 = (CFAbsoluteTime *)(v4 + 1);
    unsigned int v5 = *v4;
    unsigned int v58 = v4 + 1;
    switch(v5 >> 4)
    {
      case 0u:
        switch(v5)
        {
          case 0u:
            long long v11 = (void *)MEMORY[0x1E4F1D260];
            break;
          case 1u:
            *a4 = 0;
            goto LABEL_94;
          case 8u:
            long long v11 = (void *)MEMORY[0x1E4F1CFC8];
            break;
          case 9u:
            long long v11 = (void *)MEMORY[0x1E4F1CFD0];
            break;
          default:
            goto LABEL_72;
        }
        *a4 = *v11;
        goto LABEL_94;
      case 1u:
        unsigned int v12 = v5 & 0xF;
        if (v12 > 3)
        {
          if (v12 != 4)
          {
            long long v23 = 0;
            CFMutableArrayRef Mutable = 0;
            unsigned int v25 = -6764;
            goto LABEL_79;
          }
          if ((uint64_t)(a3 - (void)v6) < 16)
          {
LABEL_114:
            unsigned int v25 = -6743;
          }
          else
          {
            long long v54 = *(_OWORD *)(v4 + 1);
            unsigned int v58 = v4 + 17;
            CFNumberRef v40 = CFNumberCreate(0, kCFNumberMaxType|kCFNumberSInt8Type, &v54);
            if (v40)
            {
              CFNumberRef v18 = v40;
              *a4 = v40;
              goto LABEL_92;
            }
            unsigned int v25 = -6728;
          }
          goto LABEL_78;
        }
        uint64_t v13 = 1 << v12;
        if (a3 - (unint64_t)v6 < 1 << v12)
        {
          unsigned int v14 = -6743;
LABEL_119:
          long long v23 = 0;
          CFMutableArrayRef Mutable = 0;
          unsigned int v59 = v14;
          goto LABEL_95;
        }
        unsigned int v14 = -6764;
        switch((int)v13)
        {
          case 1:
            unint64_t v15 = *(unsigned __int8 *)v6;
            break;
          case 2:
            unint64_t v15 = *(unsigned __int16 *)(v4 + 1);
            break;
          case 4:
            unint64_t v15 = *(unsigned int *)v6;
            break;
          case 8:
            unint64_t v15 = *(void *)v6;
            break;
          default:
            goto LABEL_119;
        }
        unint64_t valuePtr = v15;
        unsigned int v58 = (unsigned __int8 *)v6 + v13;
        CFNumberRef v50 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
        if (!v50) {
          goto LABEL_111;
        }
        CFNumberRef v18 = v50;
        *a4 = v50;
        if (!v12) {
          goto LABEL_94;
        }
        goto LABEL_92;
      case 2u:
        int v16 = v5 & 0xF;
        if (v16 == 3)
        {
          if ((uint64_t)(a3 - (void)v6) <= 7) {
            goto LABEL_61;
          }
          unint64_t valuePtr = *(void *)v6;
          CFNumberRef v41 = CFNumberCreate(0, kCFNumberFloat64Type, &valuePtr);
          if (v41)
          {
            CFNumberRef v18 = v41;
            uint64_t v17 = 9;
LABEL_59:
            long long v20 = &v4[v17];
            goto LABEL_60;
          }
LABEL_111:
          long long v23 = 0;
LABEL_112:
          CFMutableArrayRef Mutable = 0;
LABEL_113:
          unsigned int v25 = -6728;
        }
        else
        {
          if (v16 == 2 && (uint64_t)(a3 - (void)v6) > 3)
          {
            LODWORD(valuePtr) = *(_DWORD *)v6;
            uint64_t v17 = 5;
            CFNumberRef v18 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
            if (!v18) {
              goto LABEL_111;
            }
            goto LABEL_59;
          }
LABEL_61:
          long long v23 = 0;
          CFMutableArrayRef Mutable = 0;
          unsigned int v25 = -6743;
        }
        goto LABEL_79;
      case 3u:
        if (v5 != 51)
        {
LABEL_72:
          long long v23 = 0;
          CFMutableArrayRef Mutable = 0;
          unsigned int v25 = -6756;
          goto LABEL_79;
        }
        if ((uint64_t)(a3 - (void)v6) <= 7) {
          goto LABEL_61;
        }
        CFDateRef v19 = CFDateCreate(0, *v6);
        if (!v19) {
          goto LABEL_111;
        }
        CFNumberRef v18 = v19;
        long long v20 = v4 + 9;
LABEL_60:
        unsigned int v58 = v20;
        *a4 = v18;
        goto LABEL_92;
      case 4u:
        uint64_t v21 = v5 & 0xF;
        unint64_t valuePtr = v21;
        if ((v5 & 0xF) != 0xF) {
          goto LABEL_22;
        }
        unsigned int v59 = _ReadInteger(&v58, a3, &valuePtr, 1, 1);
        if (v59) {
          goto LABEL_86;
        }
        uint64_t v21 = valuePtr;
        if (valuePtr >> 31)
        {
          long long v23 = 0;
          CFMutableArrayRef Mutable = 0;
          unsigned int v25 = -6710;
          goto LABEL_79;
        }
        UInt8 v6 = (CFAbsoluteTime *)v58;
LABEL_22:
        if (v21 > (uint64_t)(a3 - (void)v6)) {
          break;
        }
        uint64_t v22 = *(void *)(a1 + 8);
        if (v22 && (*(unsigned char *)a1 & 0x20) != 0)
        {
          SubdataWithRangeNoCopy = CFDataCreateSubdataWithRangeNoCopy(v22, (uint64_t)v6 - *(void *)(a1 + 16), v21, (int *)&v59);
          if (!SubdataWithRangeNoCopy)
          {
LABEL_86:
            long long v23 = 0;
            goto LABEL_110;
          }
          CFNumberRef v18 = (CFNumberRef)SubdataWithRangeNoCopy;
          uint64_t v21 = valuePtr;
        }
        else
        {
          CFNumberRef v18 = CFDataCreate(0, (const UInt8 *)v6, v21);
          if (!v18) {
            goto LABEL_111;
          }
        }
        unsigned int v58 = (unsigned __int8 *)v6 + v21;
        *a4 = v18;
        if ((unint64_t)v21 >= 2)
        {
LABEL_92:
          uint64_t v51 = *(__CFDictionary **)(a1 + 24);
          if (v51)
          {
            CFDictionaryRef v52 = *(char **)(a1 + 32);
            *(void *)(a1 + 32) = v52 + 1;
            CFDictionaryAddValue(v51, v52, v18);
          }
        }
        goto LABEL_94;
      case 7u:
        if ((unint64_t)v6 >= a3) {
          break;
        }
        unint64_t v26 = ~(unint64_t)v4 + a3;
        long long v27 = v4 + 1;
        while (*v27)
        {
          ++v27;
          if (!--v26) {
            goto LABEL_32;
          }
        }
        CFStringRef v43 = CFStringCreateWithCString(0, (const char *)v6, 0x8000100u);
        if (!v43)
        {
          long long v23 = 0;
          CFMutableArrayRef Mutable = 0;
          unsigned int v25 = -6742;
          goto LABEL_79;
        }
        CFStringRef v44 = v43;
        *a4 = v43;
        if (*(unsigned char *)v6)
        {
          long long v45 = *(__CFDictionary **)(a1 + 24);
          if (v45)
          {
            long long v46 = *(char **)(a1 + 32);
            *(void *)(a1 + 32) = v46 + 1;
            CFDictionaryAddValue(v45, v46, v44);
          }
        }
        unsigned int v58 = v27 + 1;
        goto LABEL_94;
      case 8u:
        int64_t v28 = v5 & 0xF;
        if ((uint64_t)(a3 - (void)v6) < v28) {
          goto LABEL_114;
        }
        switch((int)v28)
        {
          case 0:
            unint64_t v29 = *(unsigned __int8 *)v6;
            uint64_t v30 = 1;
            break;
          case 1:
            unint64_t v29 = *(unsigned __int16 *)(v4 + 1);
            uint64_t v30 = 2;
            break;
          case 2:
            unint64_t v29 = *(unsigned __int16 *)(v4 + 1) | ((unint64_t)v4[3] << 16);
            uint64_t v30 = 3;
            break;
          case 3:
            unint64_t v29 = *(unsigned int *)v6;
            uint64_t v30 = 4;
            break;
          default:
            unsigned int v25 = -6710;
            goto LABEL_78;
        }
        CFDictionaryRef v47 = *(const __CFDictionary **)(a1 + 24);
        if (v47)
        {
          CFRange v48 = CFDictionaryGetValue(v47, (const void *)v29);
          if (v48)
          {
            CFDictionaryRef v49 = v48;
            CFRetain(v48);
            unsigned int v58 = (unsigned __int8 *)v6 + v30;
            *a4 = v49;
            unsigned int v59 = 0;
LABEL_94:
            long long v23 = 0;
            CFMutableArrayRef Mutable = 0;
            *a2 = v58;
            unsigned int v59 = 0;
            goto LABEL_95;
          }
          unsigned int v25 = -6708;
        }
        else
        {
          unsigned int v25 = -6732;
        }
LABEL_78:
        long long v23 = 0;
        CFMutableArrayRef Mutable = 0;
        goto LABEL_79;
      case 9u:
        LOBYTE(valuePtr) = v5 & 0xF;
        CFNumberRef v31 = CFNumberCreate(0, kCFNumberSInt8Type, &valuePtr);
        if (!v31) {
          goto LABEL_111;
        }
        *a4 = v31;
        goto LABEL_94;
      case 0xAu:
        CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
        if (!Mutable)
        {
          long long v23 = 0;
          goto LABEL_113;
        }
        while (1)
        {
          int v32 = *(_DWORD *)(a1 + 40);
          if (v32 > 31)
          {
            long long v23 = 0;
            goto LABEL_105;
          }
          *(_DWORD *)(a1 + 40) = v32 + 1;
          unsigned int v33 = _ReadStreamedObject(a1, &v58, a3, &value);
          unsigned int v59 = v33;
          --*(_DWORD *)(a1 + 40);
          if (v33) {
            break;
          }
          long long v34 = value;
          if (!value)
          {
            *a4 = Mutable;
            goto LABEL_94;
          }
          CFArrayAppendValue(Mutable, value);
          CFRelease(v34);
          int64_t value = 0;
        }
        long long v23 = 0;
        goto LABEL_95;
      case 0xDu:
        long long v23 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (!v23) {
          goto LABEL_112;
        }
        while (2)
        {
          int v35 = *(_DWORD *)(a1 + 40);
          if (v35 > 31)
          {
            CFMutableArrayRef Mutable = 0;
LABEL_105:
            unsigned int v25 = -6751;
            goto LABEL_79;
          }
          *(_DWORD *)(a1 + 40) = v35 + 1;
          unsigned int v36 = _ReadStreamedObject(a1, &v58, a3, &v56);
          unsigned int v59 = v36;
          int v37 = *(_DWORD *)(a1 + 40);
          *(_DWORD *)(a1 + 40) = v37 - 1;
          CFMutableArrayRef Mutable = v56;
          if (v36)
          {
            if (!v56) {
              goto LABEL_95;
            }
          }
          else
          {
            if (!v56)
            {
              *a4 = v23;
              goto LABEL_94;
            }
            *(_DWORD *)(a1 + 40) = v37;
            unsigned int v38 = _ReadStreamedObject(a1, &v58, a3, &value);
            unsigned int v59 = v38;
            --*(_DWORD *)(a1 + 40);
            if (!v38)
            {
              CFDictionaryRef v39 = value;
              if (value)
              {
                CFDictionarySetValue(v23, Mutable, value);
                CFRelease(Mutable);
                CFDictionaryRef v56 = 0;
                CFRelease(v39);
                int64_t value = 0;
                continue;
              }
              unsigned int v59 = -6750;
            }
          }
          break;
        }
        CFRelease(Mutable);
LABEL_110:
        CFMutableArrayRef Mutable = 0;
        goto LABEL_95;
      default:
        long long v23 = 0;
        CFMutableArrayRef Mutable = 0;
        unsigned int v25 = -6735;
        goto LABEL_79;
    }
  }
LABEL_32:
  long long v23 = 0;
  CFMutableArrayRef Mutable = 0;
  unsigned int v25 = -6750;
LABEL_79:
  unsigned int v59 = v25;
LABEL_95:
  if (value) {
    CFRelease(value);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v23) {
    CFRelease(v23);
  }
  return v59;
}

uint64_t _ReadInteger(unsigned __int8 **a1, unint64_t a2, unint64_t *a3, int a4, int a5)
{
  unsigned int v5 = *a1;
  if ((unint64_t)*a1 >= a2) {
    return 4294960546;
  }
  unsigned __int8 v9 = *v5;
  unint64_t v7 = v5 + 1;
  unsigned __int8 v8 = v9;
  unsigned int v12 = v7;
  int v10 = v9 & 0xF0;
  if (a4 && v10 == 144)
  {
    *a3 = v8 & 0xF;
LABEL_8:
    uint64_t result = 0;
    *a1 = v7;
    return result;
  }
  if (v10 != 16) {
    return 4294960540;
  }
  uint64_t result = _ReadSizedInteger(&v12, a2, 1 << (v8 & 0xF), a3, a5);
  if (!result)
  {
    unint64_t v7 = v12;
    goto LABEL_8;
  }
  return result;
}

uint64_t _ReadSizedInteger(unsigned __int8 **a1, uint64_t a2, unint64_t a3, unint64_t *a4, int a5)
{
  unsigned int v5 = *a1;
  if (a2 - (uint64_t)*a1 < a3) {
    return 4294960553;
  }
  uint64_t v6 = 4294960532;
  switch(a3)
  {
    case 1uLL:
      unint64_t v7 = *v5;
      goto LABEL_13;
    case 2uLL:
      uint64_t v8 = *v5;
      if (a5) {
        unint64_t v7 = v8 | ((unint64_t)v5[1] << 8);
      }
      else {
        unint64_t v7 = v5[1] | (unint64_t)(v8 << 8);
      }
      goto LABEL_13;
    case 4uLL:
      if (a5) {
        unint64_t v7 = *(unsigned int *)v5;
      }
      else {
        unint64_t v7 = bswap32(*(_DWORD *)v5);
      }
      goto LABEL_13;
    case 8uLL:
      if (a5) {
        unint64_t v7 = *(void *)v5;
      }
      else {
        unint64_t v7 = bswap64(*(void *)v5);
      }
LABEL_13:
      uint64_t v6 = 0;
      *a4 = v7;
      *a1 = &v5[a3];
      break;
    default:
      return v6;
  }
  return v6;
}

CFTypeRef CFBinaryPlistStreamedCreateWithBytesEx(unsigned __int8 *a1, uint64_t a2, int a3, int *a4)
{
  v5[0] = 0u;
  LODWORD(v5[0]) = a3;
  v5[1] = (unint64_t)a1;
  v5[2] = 0uLL;
  return _ReadStreamed((uint64_t)v5, a1, (unint64_t)&a1[a2], 0, a4);
}

CFTypeRef CFBinaryPlistStreamedCreateWithBytesEx2(unsigned __int8 *a1, uint64_t a2, int a3, void *a4, int *a5)
{
  v6[0] = 0u;
  LODWORD(v6[0]) = a3;
  v6[1] = (unint64_t)a1;
  v6[2] = 0uLL;
  return _ReadStreamed((uint64_t)v6, a1, (unint64_t)&a1[a2], a4, a5);
}

CFTypeRef CFBinaryPlistStreamedCreateWithData(const __CFData *a1, unsigned int a2, int *a3)
{
  long long v10 = 0u;
  v8[0] = a2;
  v8[1] = a1;
  BytePtr = (unsigned __int8 *)CFDataGetBytePtr(a1);
  *(void *)&long long v10 = 0;
  long long v9 = (unint64_t)BytePtr;
  DWORD2(v10) = 0;
  CFIndex Length = CFDataGetLength(a1);
  return _ReadStreamed((uint64_t)v8, BytePtr, (unint64_t)&BytePtr[Length], 0, a3);
}

CFMutableDataRef CFBinaryPlistV0CreateData(const void *a1, int *a2)
{
  return CFBinaryPlistV0CreateDataEx(a1, 0, a2);
}

CFMutableDataRef CFBinaryPlistV0CreateDataEx(const void *a1, int a2, int *a3)
{
  usedBufLen[1] = *MEMORY[0x1E4F143B8];
  int v67 = 0;
  long long v69 = 0u;
  uint64_t v64 = 0;
  memset(v61, 0, sizeof(v61));
  long long v58 = 0u;
  memset(&keyCallBacks, 0, sizeof(keyCallBacks));
  long long v57 = 0u;
  _GlobalEnsureInitialized();
  uint64_t v65 = 0;
  long long theArray = 0u;
  long long v63 = 0u;
  uint64_t v68 = 0;
  *(void *)&long long v69 = 0;
  DWORD2(v69) = 0;
  int v66 = a2;
  CFMutableDataRef context = CFDataCreateMutable(0, 0);
  if (!context)
  {
    CFMutableDataRef v9 = 0;
    int v8 = -6728;
    goto LABEL_115;
  }
  *(void *)&long long theArray = CFArrayCreateMutable(0, 0, 0);
  if ((void)theArray)
  {
    long long v6 = *(_OWORD *)(MEMORY[0x1E4F1D530] + 32);
    *(_OWORD *)&keyCallBacks.release = *(_OWORD *)(MEMORY[0x1E4F1D530] + 16);
    *(_OWORD *)&keyCallBacks.equal = v6;
    keyCallBacks.version = *MEMORY[0x1E4F1D530];
    keyCallBacks.equal = (CFDictionaryEqualCallBack)_ObjectsExactlyEqual;
    keyCallBacks.retain = 0;
    keyCallBacks.release = 0;
    *((void *)&theArray + 1) = CFDictionaryCreateMutable(0, 0, &keyCallBacks, 0);
    if (*((void *)&theArray + 1))
    {
      _FlattenPlist((uint64_t)&context, a1);
      int v7 = _WriteBytes((uint64_t)&context, (const UInt8 *)"bplist00", 8);
      if (v7)
      {
        int v8 = v7;
        CFMutableDataRef v9 = 0;
        goto LABEL_113;
      }
      *(void *)&long long v57 = 0;
      long long v58 = 0u;
      *((void *)&v57 + 1) = bswap64(v63);
      if (DWORD1(v63))
      {
        char v10 = 8;
      }
      else if ((v63 & 0xFFFF0000) != 0)
      {
        char v10 = 4;
      }
      else
      {
        char v10 = (v63 & 0xFF00) != 0 ? 2 : 1;
      }
      BYTE7(v57) = v10;
      LOBYTE(v64) = v10;
      long long v11 = malloc_type_malloc(8 * v63, 0x100004000313F17uLL);
      if (v11)
      {
        unsigned int v12 = v11;
        CFDictionaryRef v56 = a3;
        uint64_t v13 = v63;
        if ((uint64_t)v63 < 1)
        {
LABEL_95:
          *((void *)&v58 + 1) = bswap64(*((unint64_t *)&v63 + 1));
          if ((WORD4(v63) & 0xFF00) != 0) {
            char v48 = 2;
          }
          else {
            char v48 = 1;
          }
          if ((DWORD2(v63) & 0xFFFF0000) != 0) {
            unsigned __int8 v49 = 4;
          }
          else {
            unsigned __int8 v49 = v48;
          }
          if (HIDWORD(*((void *)&v63 + 1))) {
            unsigned __int8 v49 = 8;
          }
          BYTE6(v57) = v49;
          if (v13 < 1)
          {
LABEL_107:
            int v8 = _WriteBytes((uint64_t)&context, (const UInt8 *)&v57, 32);
            a3 = v56;
            if (v8)
            {
              CFMutableDataRef v9 = 0;
            }
            else
            {
              CFMutableDataRef v9 = context;
              CFMutableDataRef context = 0;
            }
          }
          else
          {
            uint64_t v50 = 0;
            CFIndex v51 = v49;
            CFDictionaryRef v52 = (const UInt8 *)&usedBufLen[1] - v49;
            while (1)
            {
              usedBufLen[0] = bswap64(v12[v50]);
              int v31 = _WriteBytes((uint64_t)&context, v52, v51);
              if (v31) {
                break;
              }
              if (++v50 >= (uint64_t)v63) {
                goto LABEL_107;
              }
            }
LABEL_109:
            int v8 = v31;
LABEL_110:
            CFMutableDataRef v9 = 0;
            a3 = v56;
          }
          free(v12);
          goto LABEL_113;
        }
        CFIndex v14 = 0;
        CFStringRef v54 = (const __CFString *)*MEMORY[0x1E4F1D260];
        CFStringRef v55 = (const __CFString *)*MEMORY[0x1E4F1CFD0];
        while (1)
        {
          v12[v14] = *((void *)&v63 + 1);
          CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)theArray, v14);
          UInt8 v71 = 0;
          unint64_t v70 = 0;
          CFTypeID v16 = CFGetTypeID(ValueAtIndex);
          if (v16 == gCFStringType) {
            break;
          }
          if (v16 == gCFNumberType)
          {
            int v21 = _WriteNumber((uint64_t)&context, (CFNumberRef)ValueAtIndex, 0, 0);
            goto LABEL_37;
          }
          if (v16 == gCFBooleanType)
          {
            if (v55 == ValueAtIndex) {
              UInt8 v22 = 9;
            }
            else {
              UInt8 v22 = 8;
            }
            UInt8 v71 = v22;
            goto LABEL_26;
          }
          if (v16 == gCFDataType)
          {
            CFIndex Length = CFDataGetLength((CFDataRef)ValueAtIndex);
            int64_t v29 = Length;
            char v30 = 15;
            if (Length < 15) {
              char v30 = Length;
            }
            UInt8 v71 = v30 | 0x40;
            int v31 = _WriteBytes((uint64_t)&context, &v71, 1);
            if (v31) {
              goto LABEL_109;
            }
            if (v29 >= 15)
            {
              int v31 = _WriteInteger((uint64_t)&context, v29, 0, 0);
              if (v31) {
                goto LABEL_109;
              }
            }
            BytePtr = (UInt8 *)CFDataGetBytePtr((CFDataRef)ValueAtIndex);
            CFIndex v24 = v29;
LABEL_36:
            int v21 = _WriteBytes((uint64_t)&context, BytePtr, v24);
LABEL_37:
            int v8 = v21;
            if (v21) {
              goto LABEL_110;
            }
            goto LABEL_66;
          }
          if (v16 == gCFDictionaryType)
          {
            CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)ValueAtIndex);
            int64_t v42 = Count;
            char v43 = 15;
            if (Count < 15) {
              char v43 = Count;
            }
            UInt8 v71 = v43 | 0xD0;
            int v31 = _WriteBytes((uint64_t)&context, &v71, 1);
            if (v31) {
              goto LABEL_109;
            }
            if (v42 >= 15)
            {
              int v31 = _WriteInteger((uint64_t)&context, v42, 0, 0);
              if (v31) {
                goto LABEL_109;
              }
            }
            CFDictionaryApplyFunction((CFDictionaryRef)ValueAtIndex, (CFDictionaryApplierFunction)_WriteV0DictionaryKey, &context);
            CFDictionaryApplyFunction((CFDictionaryRef)ValueAtIndex, (CFDictionaryApplierFunction)_WriteV0DictionaryValue, &context);
          }
          else
          {
            if (v16 != gCFArrayType)
            {
              if (v16 == gCFDateType)
              {
                UInt8 v71 = 51;
                int v31 = _WriteBytes((uint64_t)&context, &v71, 1);
                if (v31) {
                  goto LABEL_109;
                }
                unint64_t v70 = bswap64(COERCE_UNSIGNED_INT64(MEMORY[0x192FA8D70](ValueAtIndex)));
                BytePtr = (UInt8 *)&v70;
                CFIndex v24 = 8;
                goto LABEL_36;
              }
              if (v54 != ValueAtIndex)
              {
                int v8 = -6732;
                goto LABEL_110;
              }
              UInt8 v71 = 0;
LABEL_26:
              BytePtr = &v71;
              CFIndex v24 = 1;
              goto LABEL_36;
            }
            CFIndex v45 = CFArrayGetCount((CFArrayRef)ValueAtIndex);
            uint64_t v46 = v45;
            char v47 = 15;
            if (v45 < 15) {
              char v47 = v45;
            }
            UInt8 v71 = v47 | 0xA0;
            int v31 = _WriteBytes((uint64_t)&context, &v71, 1);
            if (v31) {
              goto LABEL_109;
            }
            if (v46 >= 15)
            {
              int v31 = _WriteInteger((uint64_t)&context, v46, 0, 0);
              if (v31) {
                goto LABEL_109;
              }
            }
            v76.location = 0;
            v76.CFIndex length = v46;
            CFArrayApplyFunction((CFArrayRef)ValueAtIndex, v76, (CFArrayApplierFunction)_WriteV0ArrayValue, &context);
          }
LABEL_66:
          ++v14;
          uint64_t v13 = v63;
          if (v14 >= (uint64_t)v63) {
            goto LABEL_95;
          }
        }
        UInt8 v72 = 0;
        usedBufLen[0] = 0;
        CStringPtr = CFStringGetCStringPtr(ValueAtIndex, 0x8000100u);
        if (CStringPtr)
        {
          CFNumberRef v18 = (UInt8 *)CStringPtr;
          size_t v19 = strlen(CStringPtr);
          long long v20 = 0;
        }
        else
        {
          CFIndex v25 = CFStringGetLength(ValueAtIndex);
          CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(v25, 0x8000100u);
          CFIndex v27 = MaximumSizeForEncoding;
          usedBufLen[0] = MaximumSizeForEncoding;
          if (MaximumSizeForEncoding >= 256)
          {
            long long v20 = (UInt8 *)malloc_type_malloc(MaximumSizeForEncoding + 1, 0x6A741D23uLL);
            CFNumberRef v18 = v20;
            if (!v20) {
              goto LABEL_93;
            }
          }
          else
          {
            long long v20 = 0;
            CFNumberRef v18 = (UInt8 *)v61;
          }
          v74.location = 0;
          v74.CFIndex length = v25;
          if (CFStringGetBytes(ValueAtIndex, v74, 0x8000100u, 0, 0, v18, v27, usedBufLen) != v25)
          {
            unsigned int v33 = 0;
            int v8 = -6700;
            if (v20) {
LABEL_62:
            }
              free(v20);
LABEL_63:
            if (v33) {
              free(v33);
            }
            if (v8) {
              goto LABEL_110;
            }
            goto LABEL_66;
          }
          v18[usedBufLen[0]] = 0;
          size_t v19 = usedBufLen[0];
        }
        uint64_t v32 = 0;
        if (v19)
        {
          while (((char)v18[v32] & 0x80000000) == 0)
          {
            if (v19 == ++v32) {
              goto LABEL_47;
            }
          }
        }
        if (v32 == v19)
        {
LABEL_47:
          unsigned int v33 = 0;
          char v34 = 80;
        }
        else
        {
          if ((v66 & 1) == 0)
          {
            if (v20) {
              free(v20);
            }
            CFIndex v35 = CFStringGetLength(ValueAtIndex);
            int64_t v36 = CFStringGetMaximumSizeForEncoding(v35, 0x10000100u);
            CFIndex v37 = v36;
            usedBufLen[0] = v36;
            if (v36 >= 257)
            {
              CFStringRef v44 = malloc_type_malloc(v36, 0xC5DCBB94uLL);
              if (!v44)
              {
LABEL_93:
                int v8 = -6728;
                goto LABEL_110;
              }
              unsigned int v33 = v44;
              CFIndex v37 = usedBufLen[0];
              CFNumberRef v18 = (UInt8 *)v44;
            }
            else
            {
              unsigned int v33 = 0;
              CFNumberRef v18 = (UInt8 *)v61;
            }
            v75.location = 0;
            v75.CFIndex length = v35;
            if (CFStringGetBytes(ValueAtIndex, v75, 0x10000100u, 0, 0, v18, v37, usedBufLen) != v35)
            {
              int v8 = -6700;
              goto LABEL_63;
            }
            long long v20 = 0;
            CFIndex v38 = usedBufLen[0];
            size_t v19 = (unint64_t)usedBufLen[0] >> 1;
            char v34 = 96;
            goto LABEL_55;
          }
          unsigned int v33 = 0;
          char v34 = 112;
        }
        CFIndex v38 = v19;
LABEL_55:
        char v39 = 15;
        if (v19 < 0xF) {
          char v39 = v19;
        }
        UInt8 v72 = v34 | v39;
        int v40 = _WriteBytes((uint64_t)&context, &v72, 1);
        if (!v40 && (v19 < 0xF || (int v40 = _WriteInteger((uint64_t)&context, v19, 0, 0)) == 0)) {
          int v40 = _WriteBytes((uint64_t)&context, v18, v38);
        }
        int v8 = v40;
        if (v20) {
          goto LABEL_62;
        }
        goto LABEL_63;
      }
    }
  }
  CFMutableDataRef v9 = 0;
  int v8 = -6728;
LABEL_113:
  if (context)
  {
    CFRelease(context);
    CFMutableDataRef context = 0;
  }
LABEL_115:
  if ((void)theArray)
  {
    CFRelease((CFTypeRef)theArray);
    *(void *)&long long theArray = 0;
  }
  if (*((void *)&theArray + 1)) {
    CFRelease(*((CFTypeRef *)&theArray + 1));
  }
  if (a3) {
    *a3 = v8;
  }
  return v9;
}

void _FlattenPlist(uint64_t a1, const void *a2)
{
  CFIndex Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 272));
  CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 272), a2, *(const void **)(a1 + 280));
  CFTypeID v5 = CFGetTypeID(a2);
  CFTypeID v6 = v5;
  BOOL v10 = v5 == gCFStringType || v5 == gCFNumberType || v5 == gCFBooleanType || v5 == gCFDataType || v5 == gCFDateType;
  if (!v10 || CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 272)) != Count)
  {
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 264), a2);
    ++*(void *)(a1 + 280);
    if (v6 == gCFDictionaryType)
    {
      CFDictionaryApplyFunction((CFDictionaryRef)a2, (CFDictionaryApplierFunction)_FlattenDictionaryKey, (void *)a1);
      CFDictionaryApplyFunction((CFDictionaryRef)a2, (CFDictionaryApplierFunction)_FlattenDictionaryValue, (void *)a1);
    }
    else if (v6 == gCFArrayType)
    {
      v11.CFIndex length = CFArrayGetCount((CFArrayRef)a2);
      v11.location = 0;
      CFArrayApplyFunction((CFArrayRef)a2, v11, (CFArrayApplierFunction)_FlattenArray, (void *)a1);
    }
  }
}

uint64_t _WriteV0ArrayValue(void *key, uint64_t a2)
{
  unsigned int v4 = bswap32(CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 272), key));
  return _WriteBytes(a2, (const UInt8 *)&v4 - *(unsigned __int8 *)(a2 + 296) + 4, *(unsigned __int8 *)(a2 + 296));
}

uint64_t _WriteV0DictionaryValue(uint64_t a1, const void *a2, uint64_t a3)
{
  unsigned int v5 = bswap32(CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 272), a2));
  return _WriteBytes(a3, (const UInt8 *)&v5 - *(unsigned __int8 *)(a3 + 296) + 4, *(unsigned __int8 *)(a3 + 296));
}

uint64_t _WriteV0DictionaryKey(void *key, uint64_t a2, uint64_t a3)
{
  unsigned int v5 = bswap32(CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 272), key));
  return _WriteBytes(a3, (const UInt8 *)&v5 - *(unsigned __int8 *)(a3 + 296) + 4, *(unsigned __int8 *)(a3 + 296));
}

uint64_t _FlattenArray(uint64_t a1, uint64_t a2)
{
  return _FlattenPlist(a2, a1);
}

uint64_t _FlattenDictionaryValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _FlattenPlist(a3, a2);
}

uint64_t _FlattenDictionaryKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _FlattenPlist(a3, a1);
}

__CFDictionary *CFBinaryPlistV0CreateWithData(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v44 = 0;
  int v48 = 0;
  uint64_t v41 = 0;
  long long v38 = 0u;
  long long v37 = 0u;
  long long v36 = 0u;
  long long v35 = 0u;
  long long v34 = 0u;
  long long v33 = 0u;
  long long v32 = 0u;
  long long v31 = 0u;
  long long v30 = 0u;
  long long v29 = 0u;
  long long v28 = 0u;
  long long v27 = 0u;
  long long v26 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v23 = 0u;
  memset(&valueCallBacks, 0, sizeof(valueCallBacks));
  CFTypeRef cf = 0;
  unint64_t v42 = 0;
  int v43 = 0;
  long long v39 = 0u;
  long long v40 = 0u;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  int v47 = 0;
  if (a2 <= 0)
  {
    unint64_t v15 = 0;
    int SizedInteger = -6743;
    goto LABEL_22;
  }
  if ((unint64_t)a2 <= 0x28)
  {
    unint64_t v15 = 0;
    int v16 = -6743;
    goto LABEL_19;
  }
  if (*(void *)a1 != 0x30307473696C7062)
  {
    unint64_t v15 = 0;
    int v16 = -6717;
    goto LABEL_19;
  }
  unsigned int v5 = (char *)(a1 + a2);
  unint64_t v6 = *(unsigned __int8 *)(a1 + a2 - 26);
  if (v6 > 8) {
    goto LABEL_18;
  }
  if (((1 << v6) & 0x116) == 0) {
    goto LABEL_18;
  }
  unsigned int v7 = *(v5 - 25);
  if (v7 > 8 || ((1 << v7) & 0x116) == 0) {
    goto LABEL_18;
  }
  unint64_t v8 = *((void *)v5 - 3);
  if (!v8)
  {
LABEL_27:
    unint64_t v15 = 0;
    int v16 = -6764;
    goto LABEL_19;
  }
  unint64_t v9 = bswap64(v8);
  unint64_t v10 = bswap64(*((void *)v5 - 2));
  if (v10 >= v9)
  {
LABEL_28:
    unint64_t v15 = 0;
    int v16 = -6710;
    goto LABEL_19;
  }
  unint64_t v11 = bswap64(*((void *)v5 - 1));
  if (v11 <= 8 || v11 >= a2 - 32)
  {
LABEL_18:
    unint64_t v15 = 0;
    int v16 = -6742;
LABEL_19:
    int SizedInteger = v16;
    goto LABEL_20;
  }
  unint64_t v12 = (unint64_t)(v5 - 32);
  if (v9 > (a2 - 32 - v11) / v6) {
    goto LABEL_27;
  }
  uint64_t v13 = (char *)(v11 + v10 * v6);
  size_t v19 = v13;
  if ((unint64_t)v13 >= v12 - a1) {
    goto LABEL_28;
  }
  CFNumberRef v18 = &v13[a1];
  int SizedInteger = _ReadSizedInteger((unsigned __int8 **)&v18, v12, v6, (unint64_t *)&v19, 0);
  if (!SizedInteger)
  {
    _GlobalEnsureInitialized();
    *(void *)&long long v40 = v9;
    BYTE1(v41) = v6;
    LOBYTE(v41) = v7;
    unint64_t v42 = v11;
    long long v14 = *(_OWORD *)(MEMORY[0x1E4F1D540] + 16);
    *(_OWORD *)&valueCallBacks.version = *MEMORY[0x1E4F1D540];
    *(_OWORD *)&valueCallBacks.release = v14;
    valueCallBacks.equal = (CFDictionaryEqualCallBack)_ObjectsExactlyEqual;
    *((void *)&v39 + 1) = CFDictionaryCreateMutable(0, 0, 0, &valueCallBacks);
    if (*((void *)&v39 + 1))
    {
      unint64_t v15 = _ReadV0Object((uint64_t)&cf, a1, v12, v19, &SizedInteger);
      if (cf)
      {
        CFRelease(cf);
        CFTypeRef cf = 0;
      }
      goto LABEL_20;
    }
    unint64_t v15 = 0;
    int v16 = -6728;
    goto LABEL_19;
  }
  unint64_t v15 = 0;
LABEL_20:
  if ((void)v39)
  {
    CFRelease((CFTypeRef)v39);
    *(void *)&long long v39 = 0;
  }
LABEL_22:
  if (*((void *)&v39 + 1)) {
    CFRelease(*((CFTypeRef *)&v39 + 1));
  }
  if (a3) {
    *a3 = SizedInteger;
  }
  return v15;
}

__CFDictionary *_ReadV0Object(uint64_t a1, uint64_t a2, unint64_t a3, char *a4, int *a5)
{
  int RefOffset = 0;
  int v43 = 0;
  key = 0;
  unint64_t v42 = 0;
  if (a3 - a2 <= (unint64_t)a4)
  {
    unint64_t v11 = 0;
    int v28 = -6710;
LABEL_81:
    int RefOffset = v28;
    goto LABEL_77;
  }
  CFStringRef Value = (__CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 272), a4);
  if (!Value)
  {
    unint64_t valuePtr = 0;
    unint64_t v48 = 0;
    unint64_t v45 = 0;
    unint64_t v46 = 0;
    unint64_t v12 = &a4[a2];
    long long v14 = (unsigned __int8 *)&a4[a2 + 1];
    unsigned int v13 = a4[a2];
    unsigned __int8 v49 = v14;
    switch(v13 >> 4)
    {
      case 0u:
        if (v13 == 9)
        {
          CFNumberRef v18 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
        }
        else if (v13 == 8)
        {
          CFNumberRef v18 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
        }
        else
        {
          if (v13) {
            goto LABEL_32;
          }
          CFNumberRef v18 = (CFTypeRef *)MEMORY[0x1E4F1D260];
        }
        unint64_t v11 = (__CFDictionary *)CFRetain(*v18);
        goto LABEL_76;
      case 1u:
        unsigned int v19 = v13 & 0xF;
        if (v19 >= 5) {
          goto LABEL_99;
        }
        uint64_t v20 = 1 << v19;
        if (a3 - (unint64_t)v14 < 1 << v19) {
          goto LABEL_80;
        }
        if (v19 <= 3)
        {
          unint64_t v38 = 0;
          do
          {
            unsigned int v39 = *v14++;
            unint64_t v38 = v39 | (v38 << 8);
            LODWORD(v20) = v20 - 1;
          }
          while (v20);
          unint64_t valuePtr = v38;
          p_unint64_t valuePtr = &valuePtr;
          CFNumberType v26 = kCFNumberSInt64Type;
        }
        else
        {
          unint64_t v21 = 0;
          do
          {
            unsigned int v22 = *v14++;
            unint64_t v21 = v22 | (v21 << 8);
            LODWORD(v20) = v20 - 1;
          }
          while (v20 > 8);
          uint64_t v23 = 0;
          unint64_t v24 = 0;
          unint64_t v45 = v21;
          unsigned __int8 v49 = v14;
          do
            unint64_t v24 = v14[v23++] | (v24 << 8);
          while (v23 != 8);
          unint64_t v46 = v24;
          p_unint64_t valuePtr = &v45;
          CFNumberType v26 = kCFNumberMaxType|kCFNumberSInt8Type;
        }
        goto LABEL_73;
      case 2u:
        if ((v13 & 0xF) == 3)
        {
          if ((uint64_t)(a3 - (void)v14) > 7)
          {
            unint64_t valuePtr = bswap64(*(void *)(v12 + 1));
            p_unint64_t valuePtr = &valuePtr;
            CFNumberType v26 = kCFNumberFloat64Type;
LABEL_73:
            long long v27 = CFNumberCreate(0, v26, p_valuePtr);
LABEL_74:
            unint64_t v11 = v27;
            if (v27)
            {
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 272), a4, v27);
              goto LABEL_76;
            }
LABEL_101:
            int v28 = -6728;
            goto LABEL_81;
          }
        }
        else if ((v13 & 0xF) == 2 && (uint64_t)(a3 - (void)v14) > 3)
        {
          LODWORD(valuePtr) = bswap32(*(_DWORD *)(v12 + 1));
          p_unint64_t valuePtr = &valuePtr;
          CFNumberType v26 = kCFNumberFloat32Type;
          goto LABEL_73;
        }
LABEL_80:
        unint64_t v11 = 0;
        int v28 = -6743;
        goto LABEL_81;
      case 3u:
        if (v13 != 51) {
          goto LABEL_32;
        }
        if ((uint64_t)(a3 - (void)v14) <= 7) {
          goto LABEL_80;
        }
        long long v27 = CFDateCreate(0, COERCE_CFABSOLUTETIME(bswap64(*(void *)(v12 + 1))));
        goto LABEL_74;
      case 4u:
        unint64_t v29 = v13 & 0xF;
        unint64_t v48 = v29;
        if ((v13 & 0xF) != 0xF) {
          goto LABEL_36;
        }
        int RefOffset = _ReadInteger(&v49, a3, &v48, 0, 0);
        if (RefOffset) {
          goto LABEL_98;
        }
        unint64_t v29 = v48;
        long long v14 = v49;
LABEL_36:
        if (v29 > a3 - (unint64_t)v14) {
          goto LABEL_80;
        }
        long long v27 = CFDataCreate(0, v14, v29);
        goto LABEL_74;
      case 5u:
      case 7u:
        unint64_t v15 = v13 & 0xF;
        unint64_t v48 = v15;
        if ((v13 & 0xF) != 0xF) {
          goto LABEL_8;
        }
        int RefOffset = _ReadInteger(&v49, a3, &v48, 0, 0);
        if (RefOffset) {
          goto LABEL_98;
        }
        unint64_t v15 = v48;
        long long v14 = v49;
LABEL_8:
        if (v15 > a3 - (unint64_t)v14) {
          goto LABEL_80;
        }
        if ((v13 & 0xF0) == 0x50) {
          CFStringEncoding v16 = 1536;
        }
        else {
          CFStringEncoding v16 = 134217984;
        }
        uint64_t v17 = v14;
        goto LABEL_43;
      case 6u:
        unint64_t v30 = v13 & 0xF;
        unint64_t v48 = v30;
        if ((v13 & 0xF) != 0xF) {
          goto LABEL_41;
        }
        int RefOffset = _ReadInteger(&v49, a3, &v48, 0, 0);
        if (RefOffset) {
          goto LABEL_98;
        }
        unint64_t v30 = v48;
        long long v14 = v49;
LABEL_41:
        unint64_t v15 = 2 * v30;
        if (2 * v30 > a3 - (unint64_t)v14) {
          goto LABEL_80;
        }
        uint64_t v17 = v14;
        CFStringEncoding v16 = 268435712;
LABEL_43:
        long long v27 = (__CFDictionary *)CFStringCreateWithBytes(0, v17, v15, v16, 0);
        goto LABEL_74;
      case 0xAu:
        unint64_t v48 = v13 & 0xF;
        if ((v13 & 0xF) == 0xF)
        {
          int RefOffset = _ReadInteger(&v49, a3, &v48, 0, 0);
          if (RefOffset) {
            goto LABEL_98;
          }
        }
        CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
        if (Mutable)
        {
          long long v32 = Mutable;
          if (!v48)
          {
LABEL_53:
            unint64_t v11 = v32;
            goto LABEL_76;
          }
          unint64_t v33 = v48 - 1;
          while (1)
          {
            int RefOffset = _ReadRefOffset(a1, a2, a3, (unsigned int **)&v49, (unint64_t *)&key);
            if (RefOffset) {
              break;
            }
            int v34 = *(_DWORD *)(a1 + 336);
            if (v34 >= 32)
            {
              long long v35 = 0;
              unint64_t v48 = v33;
              int RefOffset = -6751;
LABEL_92:
              CFRelease(v32);
              goto LABEL_93;
            }
            *(_DWORD *)(a1 + 336) = v34 + 1;
            long long v35 = (void *)_ReadV0Object(a1, a2, a3, key, &RefOffset);
            --*(_DWORD *)(a1 + 336);
            if (RefOffset) {
              goto LABEL_90;
            }
            CFArrayAppendValue(v32, v35);
            CFRelease(v35);
            if (--v33 == -1) {
              goto LABEL_53;
            }
          }
          long long v35 = 0;
LABEL_90:
          unint64_t v48 = v33;
          goto LABEL_92;
        }
        unint64_t v11 = 0;
        goto LABEL_101;
      case 0xDu:
        unint64_t v36 = v13 & 0xF;
        unint64_t v48 = v36;
        if ((v13 & 0xF) != 0xF) {
          goto LABEL_57;
        }
        int RefOffset = _ReadInteger(&v49, a3, &v48, 0, 0);
        if (RefOffset) {
          goto LABEL_98;
        }
        unint64_t v36 = v48;
        long long v14 = v49;
LABEL_57:
        if (v36 > (a3 - (unint64_t)v14) / *(unsigned __int8 *)(a1 + 296))
        {
LABEL_99:
          unint64_t v11 = 0;
          int v28 = -6764;
          goto LABEL_81;
        }
        unint64_t v11 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (!v11) {
          goto LABEL_101;
        }
        unint64_t v42 = &v14[v36 * *(unsigned __int8 *)(a1 + 296)];
        int v43 = v14;
        if (!v36) {
          goto LABEL_76;
        }
        unint64_t v37 = v36 - 1;
        while (2)
        {
          if (*(int *)(a1 + 336) >= 32)
          {
            int RefOffset = -6751;
LABEL_96:
            uint64_t v41 = v11;
            goto LABEL_97;
          }
          int RefOffset = _ReadRefOffset(a1, a2, a3, (unsigned int **)&v43, (unint64_t *)&key);
          if (RefOffset) {
            goto LABEL_96;
          }
          ++*(_DWORD *)(a1 + 336);
          long long v32 = (__CFDictionary *)_ReadV0Object(a1, a2, a3, key, &RefOffset);
          --*(_DWORD *)(a1 + 336);
          if (RefOffset
            || (int RefOffset = _ReadRefOffset(a1, a2, a3, (unsigned int **)&v42, (unint64_t *)&key)) != 0)
          {
            long long v35 = 0;
          }
          else
          {
            ++*(_DWORD *)(a1 + 336);
            long long v35 = (void *)_ReadV0Object(a1, a2, a3, key, &RefOffset);
            --*(_DWORD *)(a1 + 336);
            if (!RefOffset)
            {
              CFDictionarySetValue(v11, v32, v35);
              CFRelease(v32);
              CFRelease(v35);
              if (--v37 == -1) {
                goto LABEL_76;
              }
              continue;
            }
          }
          break;
        }
        unint64_t v48 = v37;
        CFRelease(v11);
        if (v32) {
          goto LABEL_92;
        }
LABEL_93:
        if (v35)
        {
          uint64_t v41 = (__CFDictionary *)v35;
LABEL_97:
          CFRelease(v41);
        }
LABEL_98:
        unint64_t v11 = 0;
        goto LABEL_77;
      default:
LABEL_32:
        unint64_t v11 = 0;
        int v28 = -6756;
        goto LABEL_81;
    }
  }
  unint64_t v11 = Value;
  CFRetain(Value);
LABEL_76:
  int RefOffset = 0;
LABEL_77:
  if (a5) {
    *a5 = RefOffset;
  }
  return v11;
}

uint64_t _ReadRefOffset(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int **a4, unint64_t *a5)
{
  unsigned int v5 = *a4;
  unint64_t v6 = *(unsigned __int8 *)(a1 + 296);
  if (a3 - (uint64_t)*a4 <= v6) {
    return 4294960546;
  }
  uint64_t v7 = 4294960534;
  switch(*(unsigned char *)(a1 + 296))
  {
    case 1:
      unint64_t v8 = *(unsigned __int8 *)v5;
      goto LABEL_7;
    case 2:
      unint64_t v8 = __rev16(*(unsigned __int16 *)v5);
      goto LABEL_7;
    case 4:
      unint64_t v8 = bswap32(*v5);
      goto LABEL_7;
    case 8:
      unint64_t v8 = bswap64(*(void *)v5);
LABEL_7:
      *a4 = (unsigned int *)((char *)v5 + v6);
      if (v8 >= *(void *)(a1 + 280))
      {
        uint64_t v7 = 4294960586;
      }
      else
      {
        uint64_t v9 = *(unsigned __int8 *)(a1 + 297);
        uint64_t v7 = 4294960534;
        int v10 = v9 - 1;
        unint64_t v11 = (unsigned int *)(a2 + *(void *)(a1 + 304) + v8 * v9);
        switch(v10)
        {
          case 0:
            unint64_t v12 = *(unsigned __int8 *)v11;
            goto LABEL_13;
          case 1:
            unint64_t v12 = __rev16(*(unsigned __int16 *)v11);
            goto LABEL_13;
          case 3:
            unint64_t v12 = bswap32(*v11);
            goto LABEL_13;
          case 7:
            unint64_t v12 = bswap64(*(void *)v11);
LABEL_13:
            uint64_t v7 = 0;
            *a5 = v12;
            break;
          default:
            return v7;
        }
      }
      break;
    default:
      return v7;
  }
  return v7;
}

CFArrayRef CFPrefs_CopyKeys(const __CFString *a1, int *a2)
{
  if (!a1) {
    a1 = (const __CFString *)*MEMORY[0x1E4F1D3D8];
  }
  CFArrayRef result = CFPreferencesCopyKeyList(a1, (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
  if (result)
  {
    if (!a2) {
      return result;
    }
  }
  else
  {
    CFArrayRef result = CFArrayCreate(0, 0, 0, MEMORY[0x1E4F1D510]);
    if (!a2) {
      return result;
    }
  }
  if (result) {
    int v4 = 0;
  }
  else {
    int v4 = -6700;
  }
  *a2 = v4;
  return result;
}

uint64_t CFPrefs_RemoveValue(const __CFString *a1, CFStringRef key)
{
  if (a1) {
    CFStringRef v2 = a1;
  }
  else {
    CFStringRef v2 = (const __CFString *)*MEMORY[0x1E4F1D3D8];
  }
  CFPreferencesSetAppValue(key, 0, v2);
  return 0;
}

uint64_t CFPrefs_SetValue(const __CFString *a1, CFStringRef key, CFPropertyListRef value)
{
  if (a1) {
    CFStringRef v4 = a1;
  }
  else {
    CFStringRef v4 = (const __CFString *)*MEMORY[0x1E4F1D3D8];
  }
  CFPreferencesSetAppValue(key, value, v4);
  return 0;
}

const char *CFPrefs_GetCString(const __CFString *a1, CFStringRef key, char *a3, size_t a4, int *a5)
{
  if (a1) {
    CFStringRef v9 = a1;
  }
  else {
    CFStringRef v9 = (const __CFString *)*MEMORY[0x1E4F1D3D8];
  }
  CFStringRef v10 = (const __CFString *)CFPreferencesCopyAppValue(key, v9);
  CFStringRef v11 = v10;
  if (a5)
  {
    if (v10) {
      int v12 = 0;
    }
    else {
      int v12 = -6727;
    }
    *a5 = v12;
  }
  if (v10)
  {
    a3 = (char *)CFGetCString(v10, a3, a4);
    CFRelease(v11);
  }
  else if (a4)
  {
    *a3 = 0;
  }
  else
  {
    return "";
  }
  return a3;
}

uint64_t CFPrefs_SetCString(const __CFString *a1, const __CFString *a2, char *cStr, CFIndex numBytes)
{
  if (numBytes == -1) {
    CFStringRef v6 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  }
  else {
    CFStringRef v6 = CFStringCreateWithBytes(0, (const UInt8 *)cStr, numBytes, 0x8000100u, 0);
  }
  CFStringRef v7 = v6;
  if (!v6) {
    return 4294960579;
  }
  if (a1) {
    CFStringRef v8 = a1;
  }
  else {
    CFStringRef v8 = (const __CFString *)*MEMORY[0x1E4F1D3D8];
  }
  CFPreferencesSetAppValue(a2, v6, v8);
  CFRelease(v7);
  return 0;
}

const char *CFPrefs_GetData(const __CFString *a1, CFStringRef key, const char *a3, unint64_t a4, void *a5, int *a6)
{
  if (a1) {
    CFStringRef v11 = a1;
  }
  else {
    CFStringRef v11 = (const __CFString *)*MEMORY[0x1E4F1D3D8];
  }
  int v12 = (__CFString *)CFPreferencesCopyAppValue(key, v11);
  unsigned int v13 = v12;
  if (a6)
  {
    if (v12) {
      int v14 = 0;
    }
    else {
      int v14 = -6727;
    }
    *a6 = v14;
  }
  if (v12)
  {
    unint64_t v15 = CFGetData(v12, a3, a4, a5, a6);
    CFRelease(v13);
    return v15;
  }
  else
  {
    if (a5) {
      *a5 = 0;
    }
    return a3;
  }
}

void CFPrefs_GetDouble(const __CFString *a1, CFStringRef key, int *a3)
{
  if (a1) {
    CFStringRef v5 = a1;
  }
  else {
    CFStringRef v5 = (const __CFString *)*MEMORY[0x1E4F1D3D8];
  }
  CFStringRef v6 = (const __CFString *)CFPreferencesCopyAppValue(key, v5);
  CFStringRef v7 = v6;
  if (a3)
  {
    if (v6) {
      int v8 = 0;
    }
    else {
      int v8 = -6727;
    }
    *a3 = v8;
  }
  if (v6)
  {
    CFGetDouble(v6, a3);
    CFRelease(v7);
  }
}

uint64_t CFPrefs_SetDouble(const __CFString *a1, const __CFString *a2, double a3)
{
  double valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  if (!v5) {
    return 4294960596;
  }
  CFNumberRef v6 = v5;
  if (a1) {
    CFStringRef v7 = a1;
  }
  else {
    CFStringRef v7 = (const __CFString *)*MEMORY[0x1E4F1D3D8];
  }
  CFPreferencesSetAppValue(a2, v5, v7);
  CFRelease(v6);
  return 0;
}

unint64_t CFPrefs_GetInt64(const __CFString *a1, CFStringRef key, int *a3)
{
  if (a1) {
    CFStringRef v5 = a1;
  }
  else {
    CFStringRef v5 = (const __CFString *)*MEMORY[0x1E4F1D3D8];
  }
  CFStringRef v6 = (const __CFString *)CFPreferencesCopyAppValue(key, v5);
  CFStringRef v7 = v6;
  if (a3)
  {
    if (v6) {
      int v8 = 0;
    }
    else {
      int v8 = -6727;
    }
    *a3 = v8;
  }
  if (!v6) {
    return 0;
  }
  unint64_t v9 = CFGetInt64(v6, a3);
  CFRelease(v7);
  return v9;
}

uint64_t CFPrefs_SetInt64(const __CFString *a1, const __CFString *a2, uint64_t a3)
{
  CFNumberRef Int64 = CFNumberCreateInt64(a3);
  if (!Int64) {
    return 4294960596;
  }
  CFNumberRef v6 = Int64;
  if (a1) {
    CFStringRef v7 = a1;
  }
  else {
    CFStringRef v7 = (const __CFString *)*MEMORY[0x1E4F1D3D8];
  }
  CFPreferencesSetAppValue(a2, Int64, v7);
  CFRelease(v6);
  return 0;
}

uint64_t CFRuntimeCreateObject(uint64_t a1, unint64_t a2, int *a3)
{
  size_t v4 = a2 - 16;
  if (a2 < 0x10)
  {
    uint64_t v6 = 0;
    int v7 = -6743;
  }
  else
  {
    uint64_t Instance = _CFRuntimeCreateInstance();
    uint64_t v6 = Instance;
    if (Instance)
    {
      bzero((void *)(Instance + 16), v4);
      int v7 = 0;
    }
    else
    {
      int v7 = -6728;
    }
  }
  if (a3) {
    *a3 = v7;
  }
  return v6;
}

CFTypeRef CFCreateF(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CFTypeRef v12 = 0;
  int v10 = CFPropertyListBuildFormatted(0, 0, &v12, a2, (uint64_t)&a9, a6, a7, a8);
  if (a1) {
    *a1 = v10;
  }
  return v12;
}

uint64_t CFPropertyListBuildFormatted(const __CFAllocator *TypeID, void *cf, CFTypeRef *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  CFTypeRef cfa = 0;
  uint64_t v100 = (unsigned int *)a5;
  uint64_t valuePtr = 0;
  CFTypeRef v98 = 0;
  if (!a4)
  {
    int v14 = 0;
LABEL_208:
    uint64_t v22 = 4294960591;
    goto LABEL_192;
  }
  int v8 = (const UInt8 *)a4;
  CFAllocatorRef v11 = TypeID;
  if (cf)
  {
    CFTypeID v12 = CFGetTypeID(cf);
    CFTypeID TypeID = (const __CFAllocator *)CFArrayGetTypeID();
    if ((const __CFAllocator *)v12 == TypeID)
    {
      uint64_t v95 = a3;
      unsigned int v13 = 0;
      int v14 = (__CFArray *)cf;
    }
    else
    {
      CFTypeID TypeID = (const __CFAllocator *)CFDictionaryGetTypeID();
      int v14 = 0;
      if ((const __CFAllocator *)v12 != TypeID)
      {
LABEL_191:
        uint64_t v22 = 4294960540;
        goto LABEL_192;
      }
      uint64_t v95 = a3;
      unsigned int v13 = (__CFDictionary *)cf;
    }
  }
  else
  {
    uint64_t v95 = a3;
    int v14 = 0;
    unsigned int v13 = 0;
  }
  uint64_t v94 = (const void *)*MEMORY[0x1E4F1CFD0];
  uint64_t v93 = (const void *)*MEMORY[0x1E4F1CFC8];
  unint64_t v15 = v14;
  int v14 = 0;
  while (1)
  {
    unsigned int v16 = *v8;
    if (v16 <= 0x5C) {
      break;
    }
    if (v16 == 93) {
      goto LABEL_13;
    }
    if (v16 == 123)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v11, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (!Mutable) {
        goto LABEL_201;
      }
      CFMutableDictionaryRef v20 = Mutable;
      uint64_t v22 = _CFPropertyListAssociateObject(v15, v13, &cfa, Mutable, &v98);
      CFRelease(v20);
      if (v22) {
        goto LABEL_192;
      }
      CFTypeID TypeID = (const __CFAllocator *)malloc_type_calloc(1uLL, 0x18uLL, 0x20040960023A9uLL);
      if (!TypeID) {
        goto LABEL_201;
      }
      unsigned int v19 = 0;
      goto LABEL_25;
    }
    uint64_t v17 = v8;
    if (v16 == 125)
    {
LABEL_13:
      if (v14)
      {
        CFNumberRef v18 = *(__CFArray **)v14;
        unsigned int v19 = (__CFArray *)*((void *)v14 + 1);
        CFMutableDictionaryRef v20 = (CFMutableDictionaryRef)*((void *)v14 + 2);
        free(v14);
        int v14 = v18;
        goto LABEL_183;
      }
      uint64_t v22 = 4294960554;
      goto LABEL_192;
    }
LABEL_35:
    if (*v8)
    {
      while (1)
      {
        if (v16 == 59) {
          goto LABEL_39;
        }
        if (v16 == 61) {
          break;
        }
        unsigned int v30 = *++v17;
        unsigned int v16 = v30;
        if (!v30) {
          goto LABEL_39;
        }
      }
      CFTypeRef v35 = cfa;
      uint64_t v22 = 4294960554;
      if (cfa || !v13) {
        goto LABEL_193;
      }
      CFTypeID TypeID = (const __CFAllocator *)CFStringCreateWithBytes(v11, v8, v17 - v8, 0x8000100u, 0);
      CFTypeRef cfa = TypeID;
      if (!TypeID) {
        goto LABEL_204;
      }
    }
    else
    {
LABEL_39:
      CFStringRef v31 = CFStringCreateWithBytes(v11, v8, v17 - v8, 0x8000100u, 0);
      if (!v31) {
        goto LABEL_201;
      }
      CFStringRef v32 = v31;
      uint64_t v22 = _CFPropertyListAssociateObject(v15, v13, &cfa, v31, &v98);
      CFRelease(v32);
      if (v22) {
        goto LABEL_192;
      }
      if (!v16)
      {
LABEL_189:
        uint64_t v22 = 0;
        if (v95)
        {
          CFTypeRef *v95 = v98;
          CFTypeRef v98 = 0;
        }
        goto LABEL_192;
      }
    }
    unsigned int v19 = v15;
    CFMutableDictionaryRef v20 = v13;
    int v8 = v17;
LABEL_183:
    ++v8;
    unint64_t v15 = v19;
    unsigned int v13 = v20;
  }
  if (v16 != 37)
  {
    if (v16 == 91)
    {
      CFMutableArrayRef v21 = CFArrayCreateMutable(v11, 0, MEMORY[0x1E4F1D510]);
      if (!v21) {
        goto LABEL_201;
      }
      unsigned int v19 = v21;
      uint64_t v22 = _CFPropertyListAssociateObject(v15, v13, &cfa, v21, &v98);
      CFRelease(v19);
      if (v22) {
        goto LABEL_192;
      }
      CFTypeID TypeID = (const __CFAllocator *)malloc_type_calloc(1uLL, 0x18uLL, 0x20040960023A9uLL);
      if (!TypeID) {
        goto LABEL_201;
      }
      CFMutableDictionaryRef v20 = 0;
LABEL_25:
      *(void *)CFTypeID TypeID = v14;
      *((void *)TypeID + 1) = v15;
      int v14 = TypeID;
      *((void *)TypeID + 2) = v13;
      goto LABEL_183;
    }
    uint64_t v17 = v8;
    if (!*v8) {
      goto LABEL_189;
    }
    goto LABEL_35;
  }
  BOOL v24 = 0;
  int v25 = 0;
  int v26 = 0;
  while (1)
  {
    while (1)
    {
      int v28 = (unsigned __int8 *)v8++;
      int v27 = *v8;
      if (v27 != 35) {
        break;
      }
      ++v26;
    }
    if (v27 == 46) {
      break;
    }
    if (v27 == 63)
    {
      unint64_t v29 = v100;
      v100 += 2;
      BOOL v24 = *v29 == 0;
    }
    else
    {
      if (v27 != 108)
      {
        uint64_t v34 = 0xFFFFFFFFLL;
        goto LABEL_57;
      }
      ++v25;
    }
  }
  ++v8;
  int v27 = v28[2];
  if (v27 == 42)
  {
    unint64_t v33 = v100;
    v100 += 2;
    uint64_t v34 = *v33;
    if ((v34 & 0x80000000) == 0)
    {
      int v27 = v28[3];
      int v8 = v28 + 3;
      goto LABEL_57;
    }
LABEL_203:
    uint64_t v22 = 4294960553;
    goto LABEL_192;
  }
  int v36 = v27 - 48;
  if ((v27 - 48) > 9)
  {
    uint64_t v34 = 0;
  }
  else
  {
    LODWORD(v34) = 0;
    do
    {
      uint64_t v34 = (v36 + 10 * v34);
      int v37 = *++v8;
      int v27 = v37;
      int v36 = v37 - 48;
    }
    while ((v37 - 48) < 0xA);
    if ((v34 & 0x80000000) != 0) {
      goto LABEL_203;
    }
  }
LABEL_57:
  uint64_t v22 = 4294960579;
  if (v27 <= 83)
  {
    if (v27 <= 67)
    {
      if (v27 == 64)
      {
        if (v34 != -1) {
          goto LABEL_192;
        }
        CFDictionaryRef v56 = v100;
        v100 += 2;
        long long v57 = *(__CFArray ***)v56;
        if (!v57) {
          goto LABEL_208;
        }
        if (v15) {
          long long v58 = v15;
        }
        else {
          long long v58 = v13;
        }
        void *v57 = v58;
        goto LABEL_182;
      }
      if (v27 != 67 || v34 != -1) {
        goto LABEL_192;
      }
      unint64_t v42 = v100;
      v100 += 2;
      if (v24) {
        goto LABEL_150;
      }
      *(_DWORD *)long long bytes = bswap32(*v42);
      CFAllocatorRef v43 = v11;
      CFIndex v44 = 4;
      CFStringEncoding v45 = 0;
LABEL_169:
      CFDataRef DeepCopy = (const __CFData *)CFStringCreateWithBytes(v43, bytes, v44, v45, 0);
      if (!DeepCopy) {
        goto LABEL_201;
      }
      goto LABEL_170;
    }
    if (v27 == 68)
    {
LABEL_84:
      if (v34 != -1) {
        goto LABEL_192;
      }
      uint64_t v50 = (const UInt8 **)v100;
      v100 += 2;
      CFIndex v51 = *v50;
      if (!v26)
      {
        unsigned int v59 = v100;
        v100 += 2;
        if (!v24)
        {
          unsigned int v60 = *v59;
          if (!v51 && v60) {
            goto LABEL_208;
          }
          CFDataRef v55 = CFDataCreate(v11, v51, (int)v60);
LABEL_180:
          CFDataRef Data = v55;
          if (!v55)
          {
LABEL_201:
            uint64_t v22 = 4294960568;
            goto LABEL_192;
          }
          goto LABEL_181;
        }
LABEL_150:
        CFTypeID TypeID = (const __CFAllocator *)cfa;
        if (cfa)
        {
          CFRelease(cfa);
          CFTypeRef cfa = 0;
        }
        goto LABEL_182;
      }
      if (!v51 || v24) {
        goto LABEL_150;
      }
      CFDataRef Data = CFPropertyListCreateData(0, v51, kCFPropertyListBinaryFormat_v1_0, 0, 0);
      if (Data)
      {
LABEL_181:
        uint64_t v22 = _CFPropertyListAssociateObject(v15, v13, &cfa, Data, &v98);
        CFRelease(Data);
        if (v22) {
          goto LABEL_192;
        }
        goto LABEL_182;
      }
      uint64_t v22 = 4294960564;
    }
    else
    {
      if (v27 != 79) {
        goto LABEL_192;
      }
LABEL_74:
      if (v34 != -1) {
        goto LABEL_192;
      }
      unint64_t v46 = (CFTypeRef *)v100;
      v100 += 2;
      CFDictionaryRef v47 = (const __CFDictionary *)*v46;
      if (*v46) {
        BOOL v48 = !v24;
      }
      else {
        BOOL v48 = 0;
      }
      if (!v48) {
        goto LABEL_150;
      }
      if (v26 == 2)
      {
        CFTypeRef v35 = cfa;
        uint64_t v22 = 4294960591;
        if (cfa || !v13) {
          goto LABEL_193;
        }
        CFTypeID v83 = CFGetTypeID(*v46);
        if (v83 != CFDictionaryGetTypeID()) {
          goto LABEL_191;
        }
        CFDictionaryApplyFunction(v47, (CFDictionaryApplierFunction)_CFDictionaryMergeDictionaryApplier, v13);
        goto LABEL_182;
      }
      if (v26 == 1)
      {
        CFDataRef DeepCopy = (const __CFData *)CFPropertyListCreateDeepCopy(v11, *v46, 2uLL);
        if (!DeepCopy) {
          goto LABEL_201;
        }
LABEL_170:
        CFDataRef Data = DeepCopy;
        goto LABEL_181;
      }
      long long v63 = v15;
      uint64_t v64 = v13;
      CFTypeRef v62 = *v46;
LABEL_157:
      CFTypeID TypeID = (const __CFAllocator *)_CFPropertyListAssociateObject(v63, v64, &cfa, v62, &v98);
      if (!TypeID) {
        goto LABEL_182;
      }
      uint64_t v22 = (uint64_t)TypeID;
    }
LABEL_192:
    CFTypeRef v35 = cfa;
LABEL_193:
    if (v35) {
      CFRelease(v35);
    }
    if (cf) {
      goto LABEL_198;
    }
LABEL_196:
    if (v98) {
      CFRelease(v98);
    }
    goto LABEL_198;
  }
  switch(v27)
  {
    case 'a':
      unint64_t v38 = (uint64_t *)v100;
      v100 += 2;
      uint64_t v39 = *v38;
      if (v39) {
        BOOL v40 = !v24;
      }
      else {
        BOOL v40 = 0;
      }
      if (!v40) {
        goto LABEL_150;
      }
      if (v26 == 2) {
        int v41 = SNPrintF((uint64_t)bytes, 64, (uint64_t)"%##a", a4, a5, a6, a7, a8, v39);
      }
      else {
        int v41 = SNPrintF((uint64_t)bytes, 64, (uint64_t)"%.*a", a4, a5, a6, a7, a8, v34);
      }
      if (v41 >= 1)
      {
        CFIndex v44 = v41;
        CFAllocatorRef v43 = v11;
        CFStringEncoding v45 = 134217984;
        goto LABEL_169;
      }
      uint64_t v22 = 4294960596;
      goto LABEL_192;
    case 'b':
      if (v34 != -1) {
        goto LABEL_192;
      }
      uint64_t v61 = v100;
      v100 += 2;
      if (v24) {
        goto LABEL_150;
      }
      if (*v61) {
        CFTypeRef v62 = v94;
      }
      else {
        CFTypeRef v62 = v93;
      }
      long long v63 = v15;
      uint64_t v64 = v13;
      goto LABEL_157;
    case 'c':
    case 'e':
    case 'g':
    case 'h':
    case 'j':
    case 'l':
    case 'm':
    case 'n':
    case 'p':
    case 'q':
    case 'r':
      goto LABEL_192;
    case 'd':
      goto LABEL_84;
    case 'f':
      if (v34 != -1) {
        goto LABEL_192;
      }
      uint64_t v65 = v100;
      v100 += 2;
      uint64_t valuePtr = *(void *)v65;
      if (v24) {
        goto LABEL_150;
      }
      CFDataRef DeepCopy = CFNumberCreate(v11, kCFNumberDoubleType, &valuePtr);
      if (!DeepCopy) {
        goto LABEL_201;
      }
      goto LABEL_170;
    case 'i':
      if (v34 != -1) {
        goto LABEL_192;
      }
      if (v25 == 2)
      {
        int v66 = (uint64_t *)v100;
        v100 += 2;
        uint64_t v67 = *v66;
        if (v24) {
          goto LABEL_150;
        }
      }
      else
      {
        uint64_t v82 = v100;
        v100 += 2;
        uint64_t v67 = (int)*v82;
        if (v24) {
          goto LABEL_150;
        }
      }
      CFDataRef DeepCopy = CFNumberCreateInt64(v67);
      if (!DeepCopy) {
        goto LABEL_201;
      }
      goto LABEL_170;
    case 'k':
      CFTypeRef v35 = cfa;
      uint64_t v22 = 4294960554;
      if (cfa || !v13) {
        goto LABEL_193;
      }
      if (v24)
      {
        uint64_t v22 = 4294960561;
        goto LABEL_192;
      }
      unsigned int v68 = v8[1];
      uint64_t v22 = 4294960579;
      if (v68 <= 0x54)
      {
        if (v68 == 67)
        {
          if (v34 != -1) {
            goto LABEL_192;
          }
          int v88 = v100;
          v100 += 2;
          *(_DWORD *)long long bytes = bswap32(*v88);
          unint64_t v70 = bytes;
          CFAllocatorRef v73 = v11;
          CFIndex v72 = 4;
          CFStringEncoding v74 = 0;
          goto LABEL_176;
        }
        if (v68 != 79) {
          goto LABEL_192;
        }
      }
      else
      {
        if (v68 == 85)
        {
          if (v34 != -1) {
            goto LABEL_192;
          }
          uint64_t v86 = v100;
          v100 += 2;
          if (!*(void *)v86) {
            goto LABEL_208;
          }
          UUIDtoCStringFlags(*(unsigned char **)v86, 16, 0, 0, (char *)bytes, 0);
          unint64_t v70 = bytes;
          CFAllocatorRef v87 = 0;
          goto LABEL_185;
        }
        if (v68 != 111)
        {
          if (v68 != 115) {
            goto LABEL_192;
          }
          long long v69 = (UInt8 **)v100;
          v100 += 2;
          unint64_t v70 = *v69;
          if (!*v69) {
            goto LABEL_208;
          }
          if ((v34 & 0x80000000) == 0)
          {
            uint64_t v71 = 0;
            if (v34)
            {
              while (v70[v71])
              {
                if (v34 == ++v71)
                {
                  LODWORD(v71) = v34;
                  break;
                }
              }
            }
            CFIndex v72 = (int)v71;
            CFAllocatorRef v73 = v11;
            CFStringEncoding v74 = 134217984;
LABEL_176:
            CFTypeID TypeID = (const __CFAllocator *)CFStringCreateWithBytes(v73, v70, v72, v74, 0);
            goto LABEL_186;
          }
          CFAllocatorRef v87 = v11;
LABEL_185:
          CFTypeID TypeID = (const __CFAllocator *)CFStringCreateWithCString(v87, (const char *)v70, 0x8000100u);
LABEL_186:
          CFTypeRef cfa = TypeID;
          if (!TypeID)
          {
LABEL_204:
            uint64_t v22 = 4294960568;
            goto LABEL_205;
          }
LABEL_187:
          int v90 = v8[2];
          v8 += 2;
          if (v90 != 61)
          {
            uint64_t v22 = 4294960579;
            goto LABEL_192;
          }
LABEL_182:
          unsigned int v19 = v15;
          CFMutableDictionaryRef v20 = v13;
          goto LABEL_183;
        }
      }
      if (v34 != -1) {
        goto LABEL_192;
      }
      uint64_t v84 = (const void **)v100;
      v100 += 2;
      uint64_t v85 = *v84;
      CFTypeRef cfa = v85;
      if (v85)
      {
        CFTypeID TypeID = (const __CFAllocator *)CFRetain(v85);
        goto LABEL_187;
      }
      uint64_t v22 = 4294960591;
LABEL_205:
      if (!cf) {
        goto LABEL_196;
      }
LABEL_198:
      if (v14)
      {
        do
        {
          uint64_t v91 = *(__CFArray **)v14;
          free(v14);
          int v14 = v91;
        }
        while (v91);
      }
      return v22;
    case 'o':
      goto LABEL_74;
    case 's':
      CFRange v75 = (UInt8 **)v100;
      v100 += 2;
      CFRange v76 = *v75;
      if (*v75) {
        BOOL v77 = !v24;
      }
      else {
        BOOL v77 = 0;
      }
      if (!v77) {
        goto LABEL_150;
      }
      if ((v34 & 0x80000000) == 0)
      {
        uint64_t v78 = 0;
        if (v34)
        {
          do
          {
            if (!v76[v78]) {
              goto LABEL_144;
            }
            ++v78;
          }
          while (v34 != v78);
          LODWORD(v78) = v34;
        }
LABEL_144:
        CFDataRef v55 = (const __CFData *)CFStringCreateWithBytes(v11, v76, (int)v78, 0x8000100u, 0);
        goto LABEL_180;
      }
      CFAllocatorRef v89 = v11;
      goto LABEL_179;
    default:
      if (v27 != 84)
      {
        if (v27 != 85) {
          goto LABEL_192;
        }
        long long v53 = (CFUUIDBytes **)v100;
        v100 += 2;
        CFStringRef v54 = *v53;
        if (*v53 && !v24)
        {
          if (v26)
          {
            CFDataRef v55 = CFUUIDCreateFromUUIDBytes(0, *v54);
          }
          else
          {
            UUIDtoCStringFlags(v54, 16, 0, 0, (char *)bytes, 0);
            CFRange v76 = bytes;
            CFAllocatorRef v89 = 0;
LABEL_179:
            CFDataRef v55 = (const __CFData *)CFStringCreateWithCString(v89, (const char *)v76, 0x8000100u);
          }
          goto LABEL_180;
        }
        goto LABEL_150;
      }
      if (v34 != -1) {
        goto LABEL_192;
      }
      uint64_t v79 = v100;
      v100 += 2;
      uint64_t v80 = *v79;
      uint64_t v100 = v79 + 4;
      uint64_t v81 = v79[2];
      uint64_t v100 = v79 + 6;
      a4 = v79[4];
      uint64_t v100 = v79 + 8;
      a5 = v79[6];
      uint64_t v100 = v79 + 10;
      a6 = v79[8];
      uint64_t v100 = v79 + 12;
      if (v24) {
        goto LABEL_150;
      }
      CFDataRef DeepCopy = CFDateCreateWithComponents((uint64_t)TypeID, v80, v81, a4, a5, a6, v79[10]);
      if (!DeepCopy) {
        goto LABEL_201;
      }
      break;
  }
  goto LABEL_170;
}

uint64_t _CFPropertyListAssociateObject(__CFArray *a1, CFMutableDictionaryRef theDict, const void **a3, CFTypeRef cf, void *a5)
{
  if (a1)
  {
    CFArrayAppendValue(a1, cf);
  }
  else if (theDict)
  {
    if (!*a3) {
      return 4294960554;
    }
    CFDictionarySetValue(theDict, *a3, cf);
    CFRelease(*a3);
    *a3 = 0;
  }
  else
  {
    CFRetain(cf);
  }
  uint64_t result = 0;
  if (!*a5) {
    *a5 = cf;
  }
  return result;
}

CFNumberRef CFNumberCreateInt64(uint64_t a1)
{
  uint64_t valuePtr = a1;
  char v6 = 0;
  __int16 v5 = 0;
  int v4 = 0;
  if (a1 == (char)a1)
  {
    char v6 = a1;
    p_uint64_t valuePtr = (uint64_t *)&v6;
    CFNumberType v2 = kCFNumberSInt8Type;
  }
  else
  {
    p_uint64_t valuePtr = &valuePtr;
    CFNumberType v2 = kCFNumberSInt64Type;
  }
  return CFNumberCreate(0, v2, p_valuePtr);
}

CFDateRef CFDateCreateWithComponents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  CFCalendarRef v13 = CFCalendarCopyCurrent();
  if (!v13) {
    return 0;
  }
  int v14 = v13;
  CFAbsoluteTime at = 0.0;
  CFTimeZoneRef v15 = CFTimeZoneCreateWithName(0, @"GMT", 0);
  if (v15
    && (CFTimeZoneRef v16 = v15,
        CFCalendarSetTimeZone(v14, v15),
        CFRelease(v16),
        CFCalendarComposeAbsoluteTime(v14, &at, "yMdHms", a2, a3, a4, a5, a6, a7)))
  {
    CFDateRef v17 = CFDateCreate(0, at);
  }
  else
  {
    CFDateRef v17 = 0;
  }
  CFRelease(v14);
  return v17;
}

void _CFDictionaryMergeDictionaryApplier(void *key, void *value, CFMutableDictionaryRef theDict)
{
}

CFTypeRef CFCreateV(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef v11 = 0;
  int v9 = CFPropertyListBuildFormatted(0, 0, &v11, a2, a3, a6, a7, a8);
  if (a1) {
    *a1 = v9;
  }
  return v11;
}

uint64_t CFPropertyListCreateFormatted(const __CFAllocator *a1, CFTypeRef *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return CFPropertyListBuildFormatted(a1, 0, a2, a3, (uint64_t)&a9, a6, a7, a8);
}

uint64_t CFPropertyListCreateFormattedVAList(const __CFAllocator *a1, CFTypeRef *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return CFPropertyListBuildFormatted(a1, 0, a2, a3, a4, a6, a7, a8);
}

uint64_t CFPropertyListAppendFormatted(const __CFAllocator *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return CFPropertyListBuildFormatted(a1, a2, 0, a3, (uint64_t)&a9, a6, a7, a8);
}

uint64_t CFDictionaryMergeDictionary(void *context, CFDictionaryRef theDict)
{
  return 0;
}

uint64_t CFPropertyListExtractFormatted(const __CFString *cf, uint64_t a2, UInt8 *bytes, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v159 = *MEMORY[0x1E4F143B8];
  CFIndex maxBufLen = 0;
  CFStringRef v155 = &a9;
  unsigned int v154 = 0;
  unsigned int v9 = *bytes;
  if (!*bytes) {
    return 4294960569;
  }
  int v10 = bytes;
  CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  while (1)
  {
    unsigned int v13 = v9;
    int v14 = v10;
    while (v13 > 0x3A || ((1 << v13) & 0x400400000000001) == 0)
    {
      unsigned int v15 = *++v14;
      unsigned int v13 = v15;
    }
    CFTimeZoneRef v16 = v14;
    if (v13)
    {
      do
      {
        if (v13 == 46) {
          break;
        }
        unsigned int v17 = *++v16;
        unsigned int v13 = v17;
      }
      while (v17);
    }
    if (v9 == 91)
    {
      int v20 = v10[1];
      if (v20 == 42)
      {
        if (v10[2] != 93) {
          return 4294960579;
        }
        CFMutableArrayRef v21 = v155++;
        uint64_t v22 = *(unsigned int *)v21;
        if ((v22 & 0x80000000) != 0) {
          return 4294960586;
        }
        int v14 = v10 + 3;
      }
      else
      {
        unsigned int v24 = v20 - 48;
        if (v24 > 9) {
          return 4294960579;
        }
        uint64_t v22 = 0;
        do
        {
          uint64_t v22 = 10 * v22 + v24;
          int v25 = v10[2];
          unsigned int v24 = v25 - 48;
          ++v10;
        }
        while ((v25 - 48) < 0xA);
        if (v22 < 0) {
          return 4294960586;
        }
        if (v25 != 93) {
          return 4294960579;
        }
        int v14 = v10 + 2;
      }
      CFTypeID v26 = CFGetTypeID(cf);
      if (v26 != CFArrayGetTypeID()) {
        return 4294960540;
      }
      if (v22 >= CFArrayGetCount((CFArrayRef)cf)) {
        return 4294960586;
      }
      CFTypeRef cf = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)cf, v22);
      goto LABEL_54;
    }
    if (v9 != 37)
    {
      if (v10 >= v14)
      {
        int v14 = v10;
        goto LABEL_54;
      }
      CFStringRef v23 = CFStringCreateWithBytes(v12, v10, v14 - v10, 0x8000100u, 0);
      if (!v23) {
        return 4294960568;
      }
      goto LABEL_52;
    }
    if (v10[1] != 107) {
      return 4294960579;
    }
    unsigned int v18 = v10[2];
    uint64_t result = 4294960579;
    if (v18 > 0x68)
    {
      if (v10[2] > 0x72u)
      {
        if (v18 == 116)
        {
          unint64_t v38 = (UInt8 **)v155++;
          int v28 = *v38;
          if (!*v38) {
            return 4294960591;
          }
          uint64_t v39 = v155++;
          CFIndex v30 = *(int *)v39;
          CFAllocatorRef v29 = v12;
          CFStringEncoding v31 = 134217984;
          goto LABEL_49;
        }
        if (v18 != 115) {
          return result;
        }
        CFStringRef v32 = (char **)v155++;
        unint64_t v33 = *v32;
        if (!*v32) {
          return 4294960591;
        }
        CFAllocatorRef v34 = v12;
      }
      else
      {
        if (v18 != 105)
        {
          if (v18 != 111) {
            return result;
          }
          goto LABEL_43;
        }
        int v36 = v155++;
        SNPrintF((uint64_t)cStr, 64, (uint64_t)"%llu", a4, a5, a6, a7, a8, *v36);
        unint64_t v33 = (char *)cStr;
        CFAllocatorRef v34 = 0;
      }
      CFStringRef v37 = CFStringCreateWithCString(v34, v33, 0x8000100u);
      goto LABEL_50;
    }
    if (v18 == 67) {
      goto LABEL_38;
    }
    if (v18 != 79)
    {
      if (v18 != 99) {
        return result;
      }
LABEL_38:
      int v27 = (unsigned int *)v155++;
      *(_DWORD *)int v158 = bswap32(*v27);
      int v28 = v158;
      CFAllocatorRef v29 = v12;
      CFIndex v30 = 4;
      CFStringEncoding v31 = 0;
LABEL_49:
      CFStringRef v37 = CFStringCreateWithBytes(v29, v28, v30, v31, 0);
LABEL_50:
      CFStringRef v23 = v37;
      if (!v37) {
        return 4294960568;
      }
      goto LABEL_51;
    }
LABEL_43:
    CFTypeRef v35 = (CFTypeRef *)v155++;
    CFStringRef v23 = (CFStringRef)*v35;
    if (!*v35) {
      return 4294960591;
    }
    CFRetain(*v35);
LABEL_51:
    int v14 = v10 + 3;
LABEL_52:
    CFTypeID v40 = CFGetTypeID(cf);
    if (v40 != CFDictionaryGetTypeID())
    {
      CFRelease(v23);
      return 4294960540;
    }
    CFTypeRef cf = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, v23);
    CFRelease(v23);
    if (!cf) {
      return 4294960569;
    }
LABEL_54:
    if (*v14 == 58) {
      break;
    }
    if (*v16) {
      int v10 = v16 + 1;
    }
    else {
      int v10 = v16;
    }
    unsigned int v9 = *v10;
    if (!*v10)
    {
      if (!cf) {
        return 4294960569;
      }
LABEL_60:
      if (a2) {
LABEL_61:
      }
        *(void *)a2 = cf;
      return 0;
    }
  }
  int v41 = v14 + 1;
  for (CFIndex i = v14 + 1; *i; ++i)
  {
    if (*i == 46) {
      return 4294960579;
    }
  }
  if (!cf) {
    return 4294960569;
  }
  if (!strcmp((const char *)v14 + 1, "err") || !strcmp((const char *)v14 + 1, "int"))
  {
    LODWORD(v48) = CFGetInt64(cf, (int *)&v154);
    uint64_t result = v154;
    if (!v154)
    {
      if (a2) {
LABEL_97:
      }
        *(_DWORD *)a2 = v48;
      return 0;
    }
    return result;
  }
  if (!strcmp((const char *)v14 + 1, "int8"))
  {
    LOBYTE(v48) = CFGetInt64(cf, (int *)&v154);
    uint64_t result = v154;
    if (!v154)
    {
      if (a2) {
LABEL_100:
      }
        *(unsigned char *)a2 = v48;
      return 0;
    }
    return result;
  }
  if (!strcmp((const char *)v14 + 1, "int16"))
  {
    LOWORD(v48) = CFGetInt64(cf, (int *)&v154);
    uint64_t result = v154;
    if (!v154)
    {
      if (a2) {
LABEL_103:
      }
        *(_WORD *)a2 = v48;
      return 0;
    }
    return result;
  }
  if (!strcmp((const char *)v14 + 1, "int64"))
  {
    unint64_t v48 = CFGetInt64(cf, (int *)&v154);
    uint64_t result = v154;
    if (!v154)
    {
      if (a2) {
LABEL_106:
      }
        *(void *)a2 = v48;
      return 0;
    }
    return result;
  }
  if (!strcmp((const char *)v14 + 1, "int*"))
  {
    unint64_t v48 = CFGetInt64(cf, (int *)&v154);
    uint64_t result = v154;
    if (!v154)
    {
      unsigned __int8 v49 = v155++;
      uint64_t result = 4294960553;
      switch(*v49)
      {
        case 1:
          goto LABEL_100;
        case 2:
          goto LABEL_103;
        case 4:
          goto LABEL_97;
        case 8:
          goto LABEL_106;
        default:
          return result;
      }
    }
    return result;
  }
  if (!strcmp((const char *)v14 + 1, "utf8"))
  {
    CFTypeID v50 = CFGetTypeID(cf);
    if (v50 != CFStringGetTypeID()) {
      return 4294960540;
    }
    CFIndex Length = CFStringGetLength(cf);
    CFIndex maxBufLen = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
    CFDictionaryRef v52 = (UInt8 *)malloc_type_malloc(maxBufLen + 1, 0x7B59936FuLL);
    if (!v52) {
      return 4294960568;
    }
    long long v53 = v52;
    v160.location = 0;
    v160.CFIndex length = Length;
    if (CFStringGetBytes(cf, v160, 0x8000100u, 0, 0, v52, maxBufLen, &maxBufLen) == Length)
    {
      v53[maxBufLen] = 0;
      if (a2) {
        *(void *)a2 = v53;
      }
      else {
        free(v53);
      }
      return 0;
    }
    free(v53);
    return 4294960560;
  }
  if (!strcmp((const char *)v14 + 1, "*utf8"))
  {
    CFTypeID v54 = CFGetTypeID(cf);
    if (v54 == CFStringGetTypeID())
    {
      CFDataRef v55 = v155++;
      if (CFStringGetCString(cf, (char *)a2, *v55, 0x8000100u)) {
        return 0;
      }
      return 4294960553;
    }
    return 4294960540;
  }
  if (!strcmp((const char *)v14 + 1, "obj"))
  {
    if (a2)
    {
      CFRetain(cf);
      goto LABEL_61;
    }
    return 0;
  }
  if (!strcmp((const char *)v14 + 1, "BOOL"))
  {
    CFTypeID v56 = CFGetTypeID(cf);
    if (v56 == CFBooleanGetTypeID())
    {
      if (a2) {
        *(unsigned char *)a2 = CFBooleanGetValue((CFBooleanRef)cf);
      }
      return 0;
    }
    return 4294960540;
  }
  if (!strcmp((const char *)v14 + 1, "mac"))
  {
    CFTypeID v57 = CFGetTypeID(cf);
    if (v57 == CFDataGetTypeID())
    {
      if (CFDataGetLength((CFDataRef)cf) == 6)
      {
        if (a2)
        {
          BytePtr = CFDataGetBytePtr((CFDataRef)cf);
          __int16 v59 = *((_WORD *)BytePtr + 2);
          *(_DWORD *)a2 = *(_DWORD *)BytePtr;
          *(_WORD *)(a2 + 4) = v59;
        }
        return 0;
      }
      return 4294960553;
    }
    CFTypeID v68 = CFGetTypeID(cf);
    if (v68 != CFStringGetTypeID()) {
      return 4294960540;
    }
    if (!CFStringGetCString(cf, (char *)cStr, 64, 0x8000100u)) {
      return 4294960553;
    }
    uint64_t result = TextToHardwareAddress((char *)cStr, 0xFFFFFFFFFFFFFFFFLL, 6, (unsigned char *)a2);
    if (!result) {
      return 0;
    }
    return result;
  }
  if (!strcmp((const char *)v14 + 1, "macStr"))
  {
    CFTypeID v60 = CFGetTypeID(cf);
    if (v60 == CFDataGetTypeID())
    {
      if (CFDataGetLength((CFDataRef)cf) != 6) {
        return 4294960553;
      }
      uint64_t v61 = CFDataGetBytePtr((CFDataRef)cf);
      uint64_t v62 = 0;
      long long v63 = (unsigned char *)a2;
      do
      {
        uint64_t v64 = (unsigned char *)a2;
        if (v63 != (unsigned char *)a2)
        {
          *long long v63 = 58;
          uint64_t v64 = v63 + 1;
        }
        unint64_t v65 = v61[v62];
        uint64_t v66 = v62 + 1;
        *uint64_t v64 = a0123456789abcd_0[v65 >> 4];
        char v67 = a0123456789abcd_0[v65 & 0xF];
        long long v63 = v64 + 2;
        v64[1] = v67;
        uint64_t v62 = v66;
      }
      while (v66 != 6);
    }
    else
    {
      CFTypeID v74 = CFGetTypeID(cf);
      if (v74 != CFStringGetTypeID()) {
        return 4294960540;
      }
      if (!CFStringGetCString(cf, (char *)cStr, 64, 0x8000100u)) {
        return 4294960553;
      }
      uint64_t result = TextToHardwareAddress((char *)cStr, 0xFFFFFFFFFFFFFFFFLL, 6, v158);
      unsigned int v154 = result;
      if (result) {
        return result;
      }
      uint64_t v75 = 0;
      long long v63 = (unsigned char *)a2;
      do
      {
        CFRange v76 = (unsigned char *)a2;
        if (v63 != (unsigned char *)a2)
        {
          *long long v63 = 58;
          CFRange v76 = v63 + 1;
        }
        unint64_t v77 = v158[v75];
        uint64_t v78 = v75 + 1;
        *CFRange v76 = a0123456789abcd_0[v77 >> 4];
        char v79 = a0123456789abcd_0[v77 & 0xF];
        long long v63 = v76 + 2;
        v76[1] = v79;
        uint64_t v75 = v78;
      }
      while (v78 != 6);
    }
    *long long v63 = 0;
    return 0;
  }
  if (!strcmp((const char *)v14 + 1, "code"))
  {
    *(_DWORD *)uint64_t valuePtr = 0;
    CFTypeID v69 = CFGetTypeID(cf);
    if (v69 == CFStringGetTypeID())
    {
      if (CFStringGetLength(cf) != 4) {
        return 4294960553;
      }
      CFIndex maxBufLen = 0;
      v161.location = 0;
      v161.CFIndex length = 4;
      CFStringGetBytes(cf, v161, 0x8000100u, 0, 0, v158, 4, &maxBufLen);
      if (maxBufLen != 4) {
        return 4294960579;
      }
      int v70 = v158[0] << 8;
      if (!v158[0]) {
        int v70 = 0x2000;
      }
      int v71 = v158[1];
      if (!v158[1]) {
        int v71 = 32;
      }
      if (v158[2]) {
        int v72 = v158[2] << 8;
      }
      else {
        int v72 = 0x2000;
      }
      if (v158[3]) {
        int v73 = v158[3];
      }
      else {
        int v73 = 32;
      }
      *(_DWORD *)uint64_t valuePtr = v72 | v73 | ((v70 | v71) << 16);
    }
    else
    {
      CFTypeID v81 = CFGetTypeID(cf);
      if (v81 != CFNumberGetTypeID()) {
        return 4294960540;
      }
      CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt32Type, valuePtr);
    }
    uint64_t v82 = (int *)a2;
    if (!a2) {
      return 0;
    }
    int v83 = *(_DWORD *)valuePtr;
LABEL_286:
    int *v82 = v83;
    return 0;
  }
  if (!strcmp((const char *)v14 + 1, "ipv4"))
  {
    CFTypeID v80 = CFGetTypeID(cf);
    if (v80 != CFStringGetTypeID()) {
      return 4294960540;
    }
    if (!CFStringGetCString(cf, (char *)cStr, 64, 0x8000100u)) {
      return 4294960545;
    }
    uint64_t result = StringToIPv4Address(cStr, (_DWORD *)a2, 0);
    if (!result) {
      return 0;
    }
    return result;
  }
  if (!strcmp((const char *)v14 + 1, "vers"))
  {
    CFTypeID v84 = CFGetTypeID(cf);
    if (v84 != CFStringGetTypeID()) {
      return 4294960540;
    }
    v162.CFIndex length = CFStringGetLength(cf);
    CFIndex maxBufLen = 0;
    uint64_t v85 = (char *)cStr;
    v162.location = 0;
    CFStringGetBytes(cf, v162, 0x8000100u, 0, 0, cStr, 63, &maxBufLen);
    uint64_t v86 = maxBufLen;
    if (maxBufLen == -1) {
      uint64_t v86 = strlen((const char *)cStr);
    }
    CFAllocatorRef v87 = (char *)&cStr[v86];
    if (v86 >= 1)
    {
      uint64_t v85 = (char *)cStr;
      uint64_t v88 = MEMORY[0x1E4F14390];
      do
      {
        uint64_t v89 = *v85;
        if (*v85 < 0) {
          int v90 = __maskrune(v89, 0x4000uLL);
        }
        else {
          int v90 = *(_DWORD *)(v88 + 4 * v89 + 60) & 0x4000;
        }
        if (!v90) {
          break;
        }
        ++v85;
      }
      while (v85 < v87);
    }
    if (v85 >= v87)
    {
      BOOL v96 = 0;
    }
    else
    {
      if (*v85 - 48 <= 9)
      {
        uint64_t v91 = (char *)&cStr[v86 + ~(unint64_t)v85];
        uint64_t v92 = v85;
        while (v91)
        {
          int v93 = *++v92;
          --v91;
          if ((v93 - 48) > 9) {
            goto LABEL_212;
          }
        }
        uint64_t v92 = (char *)&cStr[v86];
LABEL_212:
        BOOL v96 = v92 < v87;
LABEL_213:
        if (v85 == v92) {
          return 4294960554;
        }
        unsigned int v108 = TextToInt32(v85, v92 - v85, 10);
        if (v108 <= 0xFF)
        {
          unsigned int v109 = v108;
          uint64_t v110 = &v92[v96];
          if (v110 >= v87)
          {
            BOOL v113 = 1;
            uint64_t v111 = &v92[v96];
          }
          else
          {
            uint64_t v111 = &v92[v96];
            while (1)
            {
              unsigned int v112 = *v111 - 48;
              BOOL v113 = v112 < 0xA;
              if (v112 > 9) {
                break;
              }
              if (++v111 >= v87)
              {
                BOOL v113 = 1;
                uint64_t v111 = (char *)&cStr[v86];
                break;
              }
            }
          }
          unsigned int v114 = TextToInt32(v110, v111 - v110, 10);
          if (v114 <= 0xF)
          {
            unsigned int v115 = v114;
            char v116 = v110 == v111 || v113;
            if (v116)
            {
              unsigned int v117 = 0;
              unsigned int v118 = 0;
              int v119 = 0x8000;
LABEL_284:
              if (!a2) {
                return 0;
              }
              int v83 = (v115 << 20) | (v109 << 24) | (v117 << 16) | v119 | v118;
              uint64_t v82 = (int *)a2;
              goto LABEL_286;
            }
            CFStringRef v120 = v111 + 1;
            __darwin_ct_rune_t v121 = __tolower(*v111);
            if (v121 != 46)
            {
              unsigned int v117 = 0;
              uint64_t v122 = v111 + 1;
              goto LABEL_256;
            }
            if (v120 >= v87)
            {
              uint64_t v123 = 1;
              uint64_t v122 = v111 + 1;
              BOOL v127 = 1;
            }
            else if (v111[1] - 48 > 9)
            {
              BOOL v127 = 0;
              uint64_t v123 = 1;
              uint64_t v122 = v120;
            }
            else
            {
              uint64_t v122 = (char *)&cStr[v86];
              uint64_t v123 = &cStr[v86] - (UInt8 *)v111;
              uint64_t v124 = 2;
              while (v123 != v124)
              {
                uint64_t v125 = v124;
                unsigned int v126 = v111[v124++] - 48;
                if (v126 > 9)
                {
                  uint64_t v122 = &v111[v125];
                  uint64_t v123 = v125;
                  break;
                }
              }
              BOOL v127 = v122 >= v87;
            }
            unsigned int v133 = TextToInt32(v120, v123 - 1, 10);
            if (v133 <= 0xF)
            {
              unsigned int v117 = v133;
              char v134 = v123 == 1 || v127;
              if (v134)
              {
                int v135 = 0x8000;
LABEL_264:
                uint64_t v138 = v122;
                if (v122 < v87)
                {
                  uint64_t v139 = (char *)(&cStr[v86] - (UInt8 *)v122);
                  uint64_t v138 = v122;
                  while (*v138 - 48 <= 9)
                  {
                    ++v138;
                    if (!--v139)
                    {
                      uint64_t v138 = (char *)&cStr[v86];
                      break;
                    }
                  }
                }
                if (v122 >= v138) {
                  unsigned int v140 = 0;
                }
                else {
                  unsigned int v140 = TextToInt32(v122, v138 - v122, 10);
                }
                BOOL v142 = v122 == v138 || v140 > 0xFF;
                BOOL v143 = !v142;
                if (v142) {
                  int v119 = 0x8000;
                }
                else {
                  int v119 = v135;
                }
                if (v143) {
                  unsigned int v118 = v140;
                }
                else {
                  unsigned int v118 = 0;
                }
                goto LABEL_284;
              }
              __darwin_ct_rune_t v136 = *v122++;
              __darwin_ct_rune_t v121 = __tolower(v136);
LABEL_256:
              if (v121 == 100) {
                int v137 = 0x2000;
              }
              else {
                int v137 = 0x8000;
              }
              if (v121 == 98) {
                int v137 = 24576;
              }
              if (v121 == 97) {
                int v135 = 0x4000;
              }
              else {
                int v135 = v137;
              }
              goto LABEL_264;
            }
          }
        }
        return 4294960586;
      }
      BOOL v96 = 1;
    }
    uint64_t v92 = v85;
    goto LABEL_213;
  }
  if (!strcmp((const char *)v14 + 1, "svers"))
  {
    CFTypeID v94 = CFGetTypeID(cf);
    if (v94 != CFStringGetTypeID()) {
      return 4294960540;
    }
    v163.CFIndex length = CFStringGetLength(cf);
    CFIndex maxBufLen = 0;
    v163.location = 0;
    CFStringGetBytes(cf, v163, 0x8000100u, 0, 0, cStr, 63, &maxBufLen);
    int v95 = TextToSourceVersion((char *)cStr, maxBufLen);
    if (v95)
    {
      *(_DWORD *)a2 = v95;
      return 0;
    }
    return 4294960554;
  }
  if (!strcmp((const char *)v14 + 1, "uuid"))
  {
    CFTypeID v97 = CFGetTypeID(cf);
    if (v97 == CFDataGetTypeID())
    {
      if (CFDataGetLength((CFDataRef)cf) == 16)
      {
        if (a2) {
          *(_OWORD *)a2 = *(_OWORD *)CFDataGetBytePtr((CFDataRef)cf);
        }
        return 0;
      }
      return 4294960553;
    }
    CFTypeID v102 = CFGetTypeID(cf);
    if (v102 != CFStringGetTypeID()) {
      return 4294960540;
    }
    if (!CFStringGetCString(cf, valuePtr, 64, 0x8000100u)) {
      return 4294960553;
    }
    uint64_t result = StringToUUIDEx(valuePtr, 0xFFFFFFFFFFFFFFFFLL, 0, 0, (_OWORD *)a2, v103, v104, v105);
    if (!result) {
      return 0;
    }
  }
  else
  {
    if (strcmp((const char *)v14 + 1, "CFStringUUID"))
    {
      if (!strncmp((const char *)v14 + 1, "CF", 2uLL))
      {
        uint64_t v106 = strchr((char *)v14 + 1, 33);
        if (v106) {
          size_t v107 = v106 - v41;
        }
        else {
          size_t v107 = strlen((const char *)v14 + 1);
        }
        uint64_t v144 = 0;
        while (v107 != v144)
        {
          if (v41[v144] != aCfarray[v144]) {
            goto LABEL_294;
          }
          if (++v144 == 8) {
            goto LABEL_299;
          }
        }
        if (!aCfarray[v107])
        {
LABEL_299:
          CFTypeID TypeID = CFArrayGetTypeID();
          goto LABEL_338;
        }
LABEL_294:
        uint64_t v145 = 0;
        while (v107 != v145)
        {
          if (v41[v145] != aCfBOOLean[v145]) {
            goto LABEL_301;
          }
          if (++v145 == 10) {
            goto LABEL_306;
          }
        }
        if (!aCfBOOLean[v107])
        {
LABEL_306:
          CFTypeID TypeID = CFBooleanGetTypeID();
          goto LABEL_338;
        }
LABEL_301:
        uint64_t v147 = 0;
        while (v107 != v147)
        {
          if (v41[v147] != aCfdata[v147]) {
            goto LABEL_308;
          }
          if (++v147 == 7) {
            goto LABEL_313;
          }
        }
        if (!aCfdata[v107])
        {
LABEL_313:
          CFTypeID TypeID = CFDataGetTypeID();
          goto LABEL_338;
        }
LABEL_308:
        uint64_t v148 = 0;
        while (v107 != v148)
        {
          if (v41[v148] != aCfdate[v148]) {
            goto LABEL_315;
          }
          if (++v148 == 7) {
            goto LABEL_320;
          }
        }
        if (!aCfdate[v107])
        {
LABEL_320:
          CFTypeID TypeID = CFDateGetTypeID();
          goto LABEL_338;
        }
LABEL_315:
        uint64_t v149 = 0;
        while (v107 != v149)
        {
          if (v41[v149] != aCfdictionary[v149]) {
            goto LABEL_322;
          }
          if (++v149 == 13) {
            goto LABEL_327;
          }
        }
        if (!aCfdictionary[v107])
        {
LABEL_327:
          CFTypeID TypeID = CFDictionaryGetTypeID();
          goto LABEL_338;
        }
LABEL_322:
        uint64_t v150 = 0;
        while (v107 != v150)
        {
          if (v41[v150] != aCfnumber[v150]) {
            goto LABEL_329;
          }
          if (++v150 == 9) {
            goto LABEL_334;
          }
        }
        if (!aCfnumber[v107])
        {
LABEL_334:
          CFTypeID TypeID = CFNumberGetTypeID();
          goto LABEL_338;
        }
LABEL_329:
        uint64_t v151 = 0;
        while (v107 != v151)
        {
          if (v41[v151] != aCfstring[v151]) {
            return 4294960561;
          }
          if (++v151 == 9) {
            goto LABEL_337;
          }
        }
        if (aCfstring[v107]) {
          return 4294960561;
        }
LABEL_337:
        CFTypeID TypeID = CFStringGetTypeID();
LABEL_338:
        if (CFGetTypeID(cf) == TypeID) {
          goto LABEL_60;
        }
        return 4294960540;
      }
      if (!strcmp((const char *)v14 + 1, "data*"))
      {
        CFTypeID v128 = CFGetTypeID(cf);
        if (v128 == CFDataGetTypeID())
        {
          uint64_t v129 = v155++;
          uint64_t v130 = *v129;
          if (CFDataGetLength((CFDataRef)cf) == v130)
          {
            if (a2) {
              *(void *)a2 = CFDataGetBytePtr((CFDataRef)cf);
            }
            return 0;
          }
        }
        return 4294960553;
      }
      unsigned int v43 = *v41 - 48;
      if (v43 > 9)
      {
        if (!*v41)
        {
          size_t v44 = 0;
          goto LABEL_243;
        }
      }
      else
      {
        size_t v44 = 0;
        CFStringEncoding v45 = v14 + 2;
        do
        {
          size_t v44 = 10 * v44 + v43;
          int v47 = *v45++;
          int v46 = v47;
          unsigned int v43 = v47 - 48;
        }
        while ((v47 - 48) < 0xA);
        if (!v46)
        {
          if ((v44 & 0x8000000000000000) != 0) {
            return 4294960586;
          }
LABEL_243:
          CFTypeID v131 = CFGetTypeID(cf);
          if (v131 == CFDataGetTypeID())
          {
            if (CFDataGetLength((CFDataRef)cf) == v44)
            {
              if (a2)
              {
                uint64_t v132 = CFDataGetBytePtr((CFDataRef)cf);
                memcpy((void *)a2, v132, v44);
              }
              return 0;
            }
            return 4294960553;
          }
          return 4294960540;
        }
      }
      return 4294960560;
    }
    CFTypeID v98 = CFGetTypeID(cf);
    if (v98 != CFStringGetTypeID()) {
      return 4294960540;
    }
    if (!CFStringGetCString(cf, (char *)cStr, 64, 0x8000100u)) {
      return 4294960553;
    }
    uint64_t result = StringToUUIDEx((char *)cStr, 0xFFFFFFFFFFFFFFFFLL, 0, 0, 0, v99, v100, v101);
    if (!result) {
      goto LABEL_60;
    }
  }
  return result;
}

CFPropertyListRef CFCreateWithPlistBytes(UInt8 *bytes, CFIndex length, unsigned int a3, uint64_t a4, int *a5)
{
  if (!length)
  {
    int v12 = a3 & 3;
    if (CFDictionaryGetTypeID() == a4)
    {
      if (v12) {
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      }
      else {
        CFMutableDictionaryRef Mutable = CFDictionaryCreate(0, 0, 0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      }
    }
    else
    {
      if (CFArrayGetTypeID() != a4)
      {
        CFPropertyListRef v10 = 0;
        int v11 = -6732;
        goto LABEL_18;
      }
      if (v12) {
        CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
      }
      else {
        CFMutableDictionaryRef Mutable = CFArrayCreate(0, 0, 0, MEMORY[0x1E4F1D510]);
      }
    }
    CFPropertyListRef v10 = Mutable;
    if (Mutable) {
      goto LABEL_17;
    }
    goto LABEL_22;
  }
  CFDataRef v8 = CFDataCreate(0, bytes, length);
  if (!v8)
  {
    CFPropertyListRef v10 = 0;
LABEL_22:
    int v11 = -6728;
    goto LABEL_18;
  }
  CFDataRef v9 = v8;
  CFPropertyListRef v10 = CFPropertyListCreateWithData(0, v8, a3, 0, 0);
  CFRelease(v9);
  if (v10)
  {
    if (a4 && CFGetTypeID(v10) != a4)
    {
      CFRelease(v10);
      CFPropertyListRef v10 = 0;
      int v11 = -6756;
      goto LABEL_18;
    }
LABEL_17:
    int v11 = 0;
    goto LABEL_18;
  }
  int v11 = -6717;
LABEL_18:
  if (a5) {
    *a5 = v11;
  }
  return v10;
}

uint64_t CFCreateObjectFromString(char *a1, void *a2)
{
  if (!strcasecmp(a1, "true") || !strcasecmp(a1, "yes") || !strcasecmp(a1, "y") || !strcasecmp(a1, "on"))
  {
    int v12 = (void **)MEMORY[0x1E4F1CFD0];
LABEL_14:
    CFNumberRef Int64 = *v12;
    goto LABEL_15;
  }
  if (!strcasecmp(a1, "false") || !strcasecmp(a1, "no") || !strcasecmp(a1, "n") || !strcasecmp(a1, "off"))
  {
    int v12 = (void **)MEMORY[0x1E4F1CFC8];
    goto LABEL_14;
  }
  uint64_t v15 = 0;
  size_t v4 = strlen(a1);
  int v5 = v4;
  if (SNScanF(a1, v4, "%lli %n", v6, v7, v8, v9, v10, (int)&v15) == 1 && v5 == -1)
  {
    CFNumberRef Int64 = CFNumberCreateInt64(v15);
    if (!Int64) {
      return 4294960596;
    }
  }
  else if (!strcmp(a1, "[]"))
  {
    CFNumberRef Int64 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    if (!Int64) {
      return 4294960596;
    }
  }
  else if (!strcmp(a1, "{}"))
  {
    CFNumberRef Int64 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!Int64) {
      return 4294960596;
    }
  }
  else
  {
    CFNumberRef Int64 = (void *)CFStringCreateWithCString(0, a1, 0x8000100u);
    if (!Int64) {
      return 4294960596;
    }
  }
LABEL_15:
  uint64_t v13 = 0;
  *a2 = Int64;
  return v13;
}

CFDictionaryRef CFDictionaryCreateWithINIBytes(const UInt8 *a1, uint64_t a2, char a3, const void *a4, int *a5)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    CFDictionaryRef v80 = 0;
    int v79 = -6728;
    goto LABEL_165;
  }
  int v83 = a4;
  uint64_t v85 = a5;
  CFDictionaryRef theDict = Mutable;
  CFMutableDictionaryRef cf = 0;
  unint64_t v11 = (unint64_t)&a1[a2];
  uint64_t v12 = MEMORY[0x1E4F14390];
  uint64_t v13 = &a1[a2];
  int v84 = a3 & 1;
  uint64_t v88 = &a1[a2];
  do
  {
    while (1)
    {
      do
      {
        if ((unint64_t)a1 < v11)
        {
          int64_t v14 = v13 - a1;
          do
          {
            uint64_t v15 = *a1;
            if (*(char *)a1 < 0)
            {
              if (!__maskrune(v15, 0x4000uLL)) {
                goto LABEL_11;
              }
            }
            else if ((*(_DWORD *)(v12 + 4 * v15 + 60) & 0x4000) == 0)
            {
              goto LABEL_11;
            }
            ++a1;
            --v14;
          }
          while (v14);
          a1 = (const UInt8 *)v11;
        }
LABEL_11:
        CFTimeZoneRef v16 = a1;
        unsigned int v17 = a1;
        if (a1 == (const UInt8 *)v11)
        {
          int v79 = 0;
          CFDictionaryRef v80 = theDict;
          CFMutableDictionaryRef v62 = cf;
          CFDictionaryRef v81 = 0;
          goto LABEL_161;
        }
        unsigned int v18 = (unsigned __int8 *)a1;
        if ((unint64_t)a1 < v11)
        {
          a1 = (const UInt8 *)v11;
          int64_t v19 = v13 - v16;
          unsigned int v18 = (unsigned __int8 *)v17;
          while (1)
          {
            int v20 = *v18;
            if (v20 == 10 || v20 == 13) {
              break;
            }
            ++v18;
            if (!--v19)
            {
              unsigned int v18 = (unsigned __int8 *)(&v17[v11] - v16);
              goto LABEL_23;
            }
          }
          if (v20 == 13) {
            a1 = v18 + 1;
          }
          else {
            a1 = v18;
          }
        }
LABEL_23:
        if ((unint64_t)a1 < v11 && *a1 == 10) {
          ++a1;
        }
        int v22 = *v17;
      }
      while (v22 == 35 || v22 == 59);
      if (v22 != 91) {
        break;
      }
      CFStringRef v23 = v17 + 1;
      do
      {
        unsigned int v24 = v23;
        if (v23 >= v18)
        {
          int v27 = v23;
          goto LABEL_58;
        }
        uint64_t v25 = *v23;
        if (*(char *)v23 < 0) {
          int v26 = __maskrune(v25, 0x4000uLL);
        }
        else {
          int v26 = *(_DWORD *)(v12 + 4 * v25 + 60) & 0x4000;
        }
        CFStringRef v23 = v24 + 1;
      }
      while (v26);
      int v27 = v24;
      do
      {
        uint64_t v28 = *v27;
        if (v28 == 93) {
          break;
        }
        if ((v28 & 0x80) != 0)
        {
          if (__maskrune(v28, 0x4000uLL)) {
            break;
          }
        }
        else if ((*(_DWORD *)(v12 + 4 * v28 + 60) & 0x4000) != 0)
        {
          break;
        }
        ++v27;
      }
      while (v27 < v18);
LABEL_58:
      if (v27 != v18)
      {
        CFAllocatorRef v34 = (unsigned __int8 *)v27;
        if (v27 < v18)
        {
          int64_t v35 = v18 - v27;
          CFAllocatorRef v34 = (unsigned __int8 *)v27;
          do
          {
            uint64_t v36 = *v34;
            if ((char)*v34 < 0)
            {
              if (!__maskrune(v36, 0x4000uLL)) {
                goto LABEL_67;
              }
            }
            else if ((*(_DWORD *)(v12 + 4 * v36 + 60) & 0x4000) == 0)
            {
              goto LABEL_67;
            }
            ++v34;
            --v35;
          }
          while (v35);
          CFAllocatorRef v34 = v18;
        }
LABEL_67:
        if (v34 != v18)
        {
          int v37 = *v34;
          if (v37 == 34)
          {
            unint64_t v38 = (const char *)(v34 + 1);
            uint64_t v39 = v34 + 1;
            if (v34 + 1 < v18)
            {
              uint64_t v54 = v18 - v34 - 1;
              uint64_t v39 = v34 + 1;
              while (*v39 != 34)
              {
                ++v39;
                if (!--v54)
                {
                  uint64_t v39 = v18;
                  break;
                }
              }
            }
            if (v39 != v18)
            {
              CFDataRef v55 = v39 + 1;
              do
              {
                CFTypeID v56 = v55;
                if (v55 >= v18) {
                  break;
                }
                uint64_t v57 = *v55;
                int v58 = (char)*v55 < 0 ? __maskrune(v57, 0x4000uLL) : *(_DWORD *)(v12 + 4 * v57 + 60) & 0x4000;
                CFDataRef v55 = v56 + 1;
              }
              while (v58);
              if (v56 != v18 && *v56 == 93)
              {
LABEL_111:
                if (cf) {
                  CFRelease(cf);
                }
                CFMutableDictionaryRef cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                if (!cf)
                {
LABEL_170:
                  CFDictionaryRef v80 = 0;
                  int v79 = -6728;
                  a5 = v85;
                  CFDictionaryRef v81 = theDict;
                  goto LABEL_164;
                }
                CFIndex v59 = v39 - (unsigned __int8 *)v38;
                if (v38)
                {
                  if ((unint64_t)v83 + 2 >= 3) {
                    CFDictionarySetCString(cf, v83, v38, v59);
                  }
                  if (v83 == (const void *)-1)
                  {
                    CFStringRef v61 = CFStringCreateWithFormat(0, 0, @"%.*s.%.*s", v27 - v24, v24, v59, v38);
                    CFMutableDictionaryRef v62 = cf;
                    if (!v61)
                    {
                      CFDictionaryRef v80 = 0;
                      int v79 = -6700;
                      a5 = v85;
                      CFDictionaryRef v81 = theDict;
                      goto LABEL_162;
                    }
LABEL_156:
                    CFTypeID v74 = theDict;
                    CFStringRef v75 = v61;
                    CFMutableDictionaryRef v76 = v62;
LABEL_157:
                    CFDictionarySetValue(v74, v75, v76);
                    goto LABEL_134;
                  }
                }
                CFStringRef v60 = CFStringCreateWithBytes(0, v24, v27 - v24, 0x8000100u, 0);
                if (!v60) {
                  goto LABEL_171;
                }
                CFStringRef v61 = v60;
                CFMutableDictionaryRef v62 = cf;
                if (v83 == (const void *)-2)
                {
                  CFStringRef Value = (void *)CFDictionaryGetValue(theDict, v60);
                  if (!Value)
                  {
                    CFMutableDictionaryRef v72 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                    if (!v72) {
                      goto LABEL_174;
                    }
                    CFStringRef Value = v72;
                    CFDictionarySetValue(theDict, v61, v72);
                    CFRelease(Value);
                  }
                  CFRelease(v61);
                  CFStringRef v73 = CFStringCreateWithBytes(0, (const UInt8 *)v38, v59, 0x8000100u, 0);
                  if (!v73)
                  {
LABEL_171:
                    CFDictionaryRef v80 = 0;
                    int v79 = -6700;
LABEL_172:
                    a5 = v85;
                    CFDictionaryRef v81 = theDict;
                    CFMutableDictionaryRef v62 = cf;
                    goto LABEL_162;
                  }
                  CFStringRef v61 = v73;
                  CFTypeID v74 = (__CFDictionary *)Value;
                  CFStringRef v75 = v61;
                  CFMutableDictionaryRef v76 = cf;
                  goto LABEL_157;
                }
                if (v83 == (const void *)-1) {
                  goto LABEL_156;
                }
                long long v63 = (__CFArray *)CFDictionaryGetValue(theDict, v60);
                if (v63)
                {
                  CFArrayAppendValue(v63, cf);
                }
                else
                {
                  unint64_t v77 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
                  if (!v77)
                  {
LABEL_174:
                    CFRelease(v61);
                    CFDictionaryRef v80 = 0;
                    int v79 = -6728;
                    goto LABEL_172;
                  }
                  uint64_t v78 = v77;
                  CFArrayAppendValue(v77, cf);
                  CFDictionarySetValue(theDict, v61, v78);
                  CFRelease(v78);
                }
LABEL_134:
                CFRelease(v61);
              }
            }
          }
          else if (v37 == 93)
          {
            unint64_t v38 = 0;
            uint64_t v39 = 0;
            goto LABEL_111;
          }
        }
      }
    }
    if (v17 >= v18)
    {
      unint64_t v33 = v17;
    }
    else
    {
      int64_t v29 = v18 - v16;
      CFIndex v30 = &v17[v18 - v16];
      CFTimeZoneRef v16 = v17;
      while (1)
      {
        uint64_t v31 = *v16;
        if (v31 <= 0x3D && ((1 << v31) & 0x2800000800000000) != 0) {
          break;
        }
        if ((v31 & 0x80) != 0)
        {
          if (__maskrune(v31, 0x4000uLL)) {
            break;
          }
        }
        else if ((*(_DWORD *)(v12 + 4 * v31 + 60) & 0x4000) != 0)
        {
          break;
        }
        ++v16;
        if (!--v29)
        {
          CFTimeZoneRef v16 = v30;
          break;
        }
      }
      unint64_t v33 = v16;
    }
    CFTypeID v40 = v33;
    if (v33 < v18)
    {
      int64_t v41 = v18 - v16;
      CFTypeID v40 = v33;
      do
      {
        uint64_t v42 = *v40;
        if (*(char *)v40 < 0)
        {
          if (!__maskrune(v42, 0x4000uLL)) {
            goto LABEL_80;
          }
        }
        else if ((*(_DWORD *)(v12 + 4 * v42 + 60) & 0x4000) == 0)
        {
          goto LABEL_80;
        }
        ++v40;
        --v41;
      }
      while (v41);
      CFTypeID v40 = &v33[v18 - v16];
LABEL_80:
      uint64_t v13 = v88;
    }
    if (v40 == v18)
    {
      unsigned int v43 = 0;
      CFStringEncoding v45 = 0;
      goto LABEL_125;
    }
    unsigned int v43 = 0;
    int v44 = *v40;
    CFStringEncoding v45 = 0;
    if (v44 == 35 || v44 == 59) {
      goto LABEL_125;
    }
  }
  while (v44 != 61);
  int v46 = (const char *)(v40 + 1);
  uint64_t v47 = v18 - v40 - 2;
  do
  {
    unsigned int v43 = v46;
    if (v46 >= (const char *)v18) {
      goto LABEL_124;
    }
    uint64_t v48 = v47;
    unsigned __int8 v49 = (unsigned __int8 *)v40;
    uint64_t v50 = *(unsigned __int8 *)v46;
    if (*v46 < 0) {
      int v51 = __maskrune(v50, 0x4000uLL);
    }
    else {
      int v51 = *(_DWORD *)(v12 + 4 * v50 + 60) & 0x4000;
    }
    int v46 = v43 + 1;
    uint64_t v47 = v48 - 1;
    ++v40;
  }
  while (v51);
  CFDictionaryRef v52 = v43 - 1;
  int v53 = *(unsigned __int8 *)v43;
  if (v53 == 34)
  {
    ++v43;
    if (v52 + 2 >= (const char *)v18)
    {
LABEL_124:
      CFStringEncoding v45 = v43;
      uint64_t v13 = v88;
      goto LABEL_125;
    }
    CFStringEncoding v45 = v52 + 2;
    uint64_t v13 = v88;
    while (*v45 != 34)
    {
      if (++v45 >= (const char *)v18)
      {
        CFStringEncoding v45 = (const char *)v18;
        break;
      }
    }
  }
  else
  {
    uint64_t v67 = 0;
    uint64_t v68 = v18 - (unsigned __int8 *)v52;
    while (v53 != 35 && v53 != 59)
    {
      if (!v48) {
        goto LABEL_141;
      }
      int v53 = v46[v67++];
      --v48;
    }
    uint64_t v68 = v67 + 1;
LABEL_141:
    uint64_t v13 = v88;
    if (v68 < 2)
    {
      CFStringEncoding v45 = &v52[v68];
    }
    else
    {
      CFStringEncoding v45 = (const char *)&v49[v68];
      uint64_t v69 = v68 + 1;
      do
      {
        uint64_t v70 = *((unsigned __int8 *)v45 - 1);
        if (*(v45 - 1) < 0)
        {
          if (!__maskrune(v70, 0x4000uLL)) {
            break;
          }
        }
        else if ((*(_DWORD *)(v12 + 4 * v70 + 60) & 0x4000) == 0)
        {
          break;
        }
        --v45;
        --v69;
      }
      while (v69 >= 3);
    }
  }
LABEL_125:
  CFMutableDictionaryRef v62 = cf;
  if (!cf && !v84)
  {
    CFMutableDictionaryRef v64 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!v64) {
      goto LABEL_170;
    }
    CFMutableDictionaryRef v62 = v64;
    CFDictionarySetValue(theDict, &stru_1EDD2ACE8, v64);
  }
  CFStringRef v65 = CFStringCreateWithBytes(0, v17, v33 - v17, 0x8000100u, 0);
  if (v65)
  {
    CFStringRef v61 = v65;
    CFMutableDictionaryRef cf = v62;
    if (v62) {
      uint64_t v66 = v62;
    }
    else {
      uint64_t v66 = theDict;
    }
    CFDictionarySetCString(v66, v61, v43, v45 - v43);
    goto LABEL_134;
  }
  CFDictionaryRef v80 = 0;
  int v79 = -6700;
  CFDictionaryRef v81 = theDict;
LABEL_161:
  a5 = v85;
  if (!v62) {
    goto LABEL_163;
  }
LABEL_162:
  CFRelease(v62);
LABEL_163:
  if (!v81) {
    goto LABEL_165;
  }
LABEL_164:
  CFRelease(v81);
LABEL_165:
  if (a5) {
    *a5 = v79;
  }
  return v80;
}

uint64_t CFPropertyListCreateBytes(CFPropertyListRef propertyList, CFPropertyListFormat format, void *a3, size_t *a4)
{
  CFDataRef Data = CFPropertyListCreateData(0, propertyList, format, 0, 0);
  if (!Data) {
    return 4294960596;
  }
  CFDataRef v7 = Data;
  size_t Length = CFDataGetLength(Data);
  uint64_t v9 = malloc_type_malloc(Length, 0xB17AC261uLL);
  if (v9)
  {
    uint64_t v10 = v9;
    BytePtr = CFDataGetBytePtr(v7);
    memcpy(v10, BytePtr, Length);
    uint64_t v12 = 0;
    *a3 = v10;
    *a4 = Length;
  }
  else
  {
    uint64_t v12 = 4294960596;
  }
  CFRelease(v7);
  return v12;
}

CFMutableDataRef CFDataCreateWithANSIFile(FILE *a1, int *a2)
{
  CFMutableDataRef Mutable = CFDataCreateMutable(0, 0);
  if (!Mutable)
  {
LABEL_10:
    int v8 = -6728;
    if (!a2) {
      return Mutable;
    }
    goto LABEL_7;
  }
  int v5 = (UInt8 *)malloc_type_malloc(0x20000uLL, 0xE5AE55E1uLL);
  if (!v5)
  {
    CFRelease(Mutable);
    CFMutableDataRef Mutable = 0;
    goto LABEL_10;
  }
  for (CFIndex i = v5; ; CFDataAppendBytes(Mutable, i, v7))
  {
    size_t v7 = fread(i, 1uLL, 0x20000uLL, a1);
    if (!v7) {
      break;
    }
  }
  free(i);
  int v8 = 0;
  if (a2) {
LABEL_7:
  }
    *a2 = v8;
  return Mutable;
}

CFPropertyListRef CFPropertyListCreateFromFilePath(const char *a1, CFOptionFlags a2, int *a3)
{
  int v9 = 0;
  CFDataRef v5 = CFDataCreateWithFilePath(a1, &v9);
  if (v5)
  {
    CFDataRef v6 = v5;
    CFPropertyListRef v7 = CFPropertyListCreateWithData(0, v5, a2, 0, 0);
    CFRelease(v6);
    if (!v7) {
      int v9 = -6717;
    }
  }
  else
  {
    CFPropertyListRef v7 = 0;
  }
  if (a3) {
    *a3 = v9;
  }
  return v7;
}

CFMutableDataRef CFDataCreateWithFilePath(const char *a1, _DWORD *a2)
{
  int v7 = 0;
  uint64_t v3 = fopen(a1, "rb");
  if (v3)
  {
    size_t v4 = v3;
    int v7 = 0;
    CFMutableDataRef v5 = CFDataCreateWithANSIFile(v3, &v7);
    fclose(v4);
    if (!a2) {
      return v5;
    }
    goto LABEL_9;
  }
  if (*__error())
  {
    int v7 = *__error();
    if (v7)
    {
      CFMutableDataRef v5 = 0;
      if (!a2) {
        return v5;
      }
    }
    else
    {
      CFMutableDataRef v5 = CFDataCreateWithANSIFile(0, &v7);
      if (!a2) {
        return v5;
      }
    }
    goto LABEL_9;
  }
  CFMutableDataRef v5 = 0;
  int v7 = -6700;
  if (a2) {
LABEL_9:
  }
    *a2 = v7;
  return v5;
}

uint64_t CFPropertyListWriteToFilePath(const __CFString *cf, char *__s1, FILE *a3)
{
  size_t v4 = __s1;
  uint64_t v6 = 0;
  unsigned int v22 = 0;
  int v20 = 0;
  __ptr = 0;
  size_t __nitems = 0;
  while (v6 != 4)
  {
    int v7 = aRaw[v6];
    int v8 = __s1[v6++];
    if (v8 != v7) {
      goto LABEL_14;
    }
  }
  CFTypeID v9 = CFGetTypeID(cf);
  if (v9 != CFStringGetTypeID())
  {
    if (v9 == CFDataGetTypeID())
    {
      if (a3)
      {
        a3 = fopen((const char *)a3, "wb");
        if (!a3)
        {
          if (!*__error())
          {
LABEL_42:
            a3 = 0;
            CFDataRef Data = 0;
            goto LABEL_43;
          }
          a3 = 0;
          CFDataRef Data = 0;
          unsigned int v22 = *__error();
          if (v22) {
            goto LABEL_47;
          }
        }
        size_t Length = CFDataGetLength((CFDataRef)cf);
        BytePtr = CFDataGetBytePtr((CFDataRef)cf);
        if (fwrite(BytePtr, 1uLL, Length, a3) != Length) {
          goto LABEL_28;
        }
        goto LABEL_12;
      }
      goto LABEL_54;
    }
    v4 += 4;
LABEL_14:
    if (!strcmp(v4, "streamed"))
    {
      CFDataRef Data = (const __CFData *)CFBinaryPlistStreamedCreateDataEx(cf, 31, (int *)&v22);
      if (v22)
      {
        a3 = 0;
        goto LABEL_47;
      }
    }
    else
    {
      if (strcmp(v4, "binary1"))
      {
        a3 = 0;
        CFDataRef Data = 0;
        int v13 = -6735;
        goto LABEL_46;
      }
      CFDataRef Data = CFPropertyListCreateData(0, cf, kCFPropertyListBinaryFormat_v1_0, 0, 0);
      if (!Data) {
        goto LABEL_41;
      }
    }
    if (!a3)
    {
LABEL_55:
      int v13 = -6704;
      goto LABEL_46;
    }
    int64_t v14 = fopen((const char *)a3, "wb");
    if (v14)
    {
      a3 = v14;
      unsigned int v22 = 0;
      goto LABEL_23;
    }
    if (*__error())
    {
      a3 = 0;
      unsigned int v22 = *__error();
      if (v22) {
        goto LABEL_47;
      }
LABEL_23:
      size_t v15 = CFDataGetLength(Data);
      CFTimeZoneRef v16 = CFDataGetBytePtr(Data);
      if (fwrite(v16, 1uLL, v15, a3) == v15)
      {
        int v13 = 0;
        goto LABEL_46;
      }
      if (*__error())
      {
        int v13 = *__error();
        goto LABEL_46;
      }
      goto LABEL_43;
    }
LABEL_41:
    a3 = 0;
LABEL_43:
    int v13 = -6700;
    goto LABEL_46;
  }
  unsigned int v22 = CFStringGetOrCopyCStringUTF8(cf, (const char **)&__ptr, (UInt8 **)&v20, &__nitems);
  if (v22)
  {
    a3 = 0;
    CFDataRef Data = 0;
    goto LABEL_47;
  }
  if (!a3)
  {
LABEL_54:
    CFDataRef Data = 0;
    goto LABEL_55;
  }
  a3 = fopen((const char *)a3, "wb");
  if (a3) {
    goto LABEL_27;
  }
  if (!*__error()) {
    goto LABEL_42;
  }
  a3 = 0;
  CFDataRef Data = 0;
  unsigned int v22 = *__error();
  if (v22) {
    goto LABEL_47;
  }
LABEL_27:
  size_t v17 = fwrite(__ptr, 1uLL, __nitems, a3);
  if (v17 != __nitems)
  {
LABEL_28:
    if (*__error()) {
      int v13 = *__error();
    }
    else {
      int v13 = -6700;
    }
    goto LABEL_45;
  }
LABEL_12:
  int v13 = 0;
LABEL_45:
  CFDataRef Data = 0;
LABEL_46:
  unsigned int v22 = v13;
LABEL_47:
  if (v20) {
    free(v20);
  }
  if (Data) {
    CFRelease(Data);
  }
  if (a3) {
    fclose(a3);
  }
  return v22;
}

uint64_t CFObjectControlAsync(const void *a1, NSObject *a2, uint64_t a3, int a4, const void *a5, const void *a6, const void *a7, NSObject *a8, uint64_t a9, uint64_t a10)
{
  unsigned int v18 = malloc_type_malloc(0x58uLL, 0x10E0040D6740AE0uLL);
  if (!v18) {
    return 4294960568;
  }
  int64_t v19 = v18;
  CFRetain(a1);
  *int64_t v19 = a1;
  v19[1] = a3;
  *((_DWORD *)v19 + 4) = a4;
  CFRetain(a5);
  v19[3] = a5;
  if (a6) {
    CFRetain(a6);
  }
  v19[4] = a6;
  if (a7) {
    CFRetain(a7);
  }
  v19[5] = a7;
  v19[7] = 0;
  if (a8) {
    dispatch_retain(a8);
  }
  v19[8] = a8;
  v19[9] = a9;
  v19[10] = a10;
  dispatch_async_f(a2, v19, (dispatch_function_t)_CFObjectControlAsync);
  return 0;
}

void _CFObjectControlAsync(uint64_t a1)
{
  CFNumberType v2 = (CFTypeRef *)(a1 + 56);
  *(_DWORD *)(a1 + 48) = (*(uint64_t (**)(void, void, void, void, void, uint64_t))(a1 + 8))(*(void *)a1, *(unsigned int *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), a1 + 56);
  CFRelease(*(CFTypeRef *)a1);
  CFRelease(*(CFTypeRef *)(a1 + 24));
  uint64_t v3 = *(const void **)(a1 + 32);
  if (v3) {
    CFRelease(v3);
  }
  size_t v4 = *(const void **)(a1 + 40);
  if (v4) {
    CFRelease(v4);
  }
  CFMutableDataRef v5 = *(void (**)(void, void, void))(a1 + 72);
  if (v5)
  {
    uint64_t v6 = *(NSObject **)(a1 + 64);
    if (v6)
    {
      dispatch_async_f(v6, (void *)a1, (dispatch_function_t)_CFObjectControlResponse);
      return;
    }
    v5(*(unsigned int *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 80));
  }
  if (*v2) {
    CFRelease(*v2);
  }
  int v7 = *(NSObject **)(a1 + 64);
  if (v7) {
    dispatch_release(v7);
  }
  free((void *)a1);
}

void _CFObjectControlResponse(uint64_t a1)
{
  (*(void (**)(void, void, void))(a1 + 72))(*(unsigned int *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 80));
  CFNumberType v2 = *(const void **)(a1 + 56);
  if (v2) {
    CFRelease(v2);
  }
  dispatch_release(*(dispatch_object_t *)(a1 + 64));
  free((void *)a1);
}

uint64_t CFObjectControlAsyncF(const void *a1, NSObject *a2, uint64_t a3, int a4, const void *a5, const void *a6, NSObject *a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  CFTypeRef cf = 0;
  uint64_t v18 = CFPropertyListBuildFormatted(0, 0, &cf, a10, (uint64_t)va, (uint64_t)a6, (uint64_t)a7, a8);
  if (!v18)
  {
    uint64_t v18 = CFObjectControlAsync(a1, a2, a3, a4, a5, a6, cf, a7, a8, a9);
    if (cf) {
      CFRelease(cf);
    }
  }
  return v18;
}

uint64_t CFObjectControlSync(uint64_t a1, dispatch_queue_t queue, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a4)
  {
    return a3(a1, a4, a5, a6, a7, a8);
  }
  else
  {
    v10[0] = a1;
    v10[1] = a3;
    void v10[2] = a4;
    v10[3] = a5;
    v10[4] = a6;
    v10[5] = a7;
    v10[6] = a8;
    uint64_t v11 = 4294960596;
    dispatch_sync_f(queue, v10, (dispatch_function_t)_CFObjectControlSync);
    return v11;
  }
}

uint64_t _CFObjectControlSync(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void, void, void, void, void))(a1 + 8))(*(void *)a1, *(unsigned int *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48));
  *(_DWORD *)(a1 + 56) = result;
  return result;
}

uint64_t CFObjectControlSyncF(uint64_t a1, NSObject *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CFTypeRef cf = 0;
  uint64_t v16 = CFPropertyListBuildFormatted(0, 0, &cf, a8, (uint64_t)&a9, a6, a7, a8);
  if (!v16)
  {
    uint64_t v16 = CFObjectControlSync(a1, a2, a3, a4, a5, a6, (uint64_t)cf, a7);
    CFRelease(cf);
  }
  return v16;
}

uint64_t CFObjectCopyProperty(uint64_t a1, dispatch_queue_t queue, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a4)
  {
    return a3(a1, a4, a5, a6, a7);
  }
  else
  {
    context[0] = a1;
    context[1] = a3;
    context[3] = a5;
    context[2] = a4;
    context[4] = a6;
    uint64_t v10 = 0;
    uint64_t v11 = a7;
    dispatch_sync_f(queue, context, (dispatch_function_t)_CFObjectCopyProperty);
    return v10;
  }
}

uint64_t _CFObjectCopyProperty(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void, void, void, void))(a1 + 8))(*(void *)a1, *(unsigned int *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 48));
  *(void *)(a1 + 40) = result;
  return result;
}

CFStringRef CFObjectGetPropertyCStringSync(uint64_t a1, NSObject *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, char *a7, size_t a8, uint64_t a9)
{
  CFStringRef result = (const __CFString *)CFObjectCopyProperty(a1, a2, a3, a4, a5, a6, a9);
  if (result)
  {
    CFStringRef v12 = result;
    int v13 = CFGetCString(result, a7, a8);
    CFRelease(v12);
    return (const __CFString *)v13;
  }
  return result;
}

const char *CFGetCString(const __CFString *cf, char *a2, size_t a3)
{
  if (!a3) {
    return "";
  }
  if (!cf)
  {
LABEL_29:
    *a2 = 0;
    return a2;
  }
  CFTypeID v6 = CFGetTypeID(cf);
  if (v6 == CFStringGetTypeID())
  {
    *a2 = 0;
    CFStringGetCString(cf, a2, a3, 0x8000100u);
    return a2;
  }
  if (v6 == CFNumberGetTypeID())
  {
    if (CFNumberIsFloatType((CFNumberRef)cf))
    {
      uint64_t valuePtr = 0;
      CFNumberGetValue((CFNumberRef)cf, kCFNumberDoubleType, &valuePtr);
      snprintf(a2, a3, "%f");
    }
    else
    {
      *(void *)&v25[4] = 0;
      CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt64Type, &v25[4]);
      SNPrintF((uint64_t)a2, a3, (uint64_t)"%lld", v16, v17, v18, v19, v20, *(uint64_t *)&v25[4]);
    }
    return a2;
  }
  if ((const __CFString *)*MEMORY[0x1E4F1CFD0] == cf)
  {
    CFMutableArrayRef v21 = "true";
LABEL_22:
    strlcpy(a2, v21, a3);
    return a2;
  }
  if ((const __CFString *)*MEMORY[0x1E4F1CFC8] == cf)
  {
    CFMutableArrayRef v21 = "false";
    goto LABEL_22;
  }
  if (v6 != CFDataGetTypeID())
  {
    if (v6 == CFDateGetTypeID())
    {
      LODWORD(valuePtr) = 0;
      *(void *)uint64_t v25 = 0;
      uint64_t v24 = 0;
      uint64_t v23 = 0;
      CFDateGetComponents((uint64_t)cf, &valuePtr, &v25[4], v25, (_DWORD *)&v24 + 1, &v24, (_DWORD *)&v23 + 1, &v23);
      snprintf(a2, a3, "%04d-%02d-%02d %02d:%02d:%02d.%06d %s", valuePtr, *(unsigned int *)&v25[4]);
      return a2;
    }
    if (v6 == CFDictionaryGetTypeID())
    {
      snprintf(a2, a3, "{}");
      return a2;
    }
    if (v6 == CFArrayGetTypeID())
    {
      snprintf(a2, a3, "[]");
      return a2;
    }
    goto LABEL_29;
  }
  BytePtr = CFDataGetBytePtr((CFDataRef)cf);
  CFIndex Length = CFDataGetLength((CFDataRef)cf);
  CFTypeID v9 = a2;
  if (Length >= 1)
  {
    CFTypeID v9 = a2;
    if ((uint64_t)(a3 - 1) >= 2)
    {
      uint64_t v10 = a3 - 3;
      uint64_t v11 = BytePtr + 1;
      CFStringRef v12 = a2;
      do
      {
        unint64_t v13 = *(v11 - 1);
        char *v12 = a0123456789abcd[v13 >> 4];
        char v14 = a0123456789abcd[v13 & 0xF];
        CFTypeID v9 = v12 + 2;
        v12[1] = v14;
        if (v11 >= &BytePtr[Length]) {
          break;
        }
        ++v11;
        v12 += 2;
        BOOL v15 = v10 <= 1;
        v10 -= 2;
      }
      while (!v15);
    }
  }
  *CFTypeID v9 = 0;
  return a2;
}

void CFObjectGetPropertyDoubleSync(uint64_t a1, NSObject *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, _DWORD *a7)
{
  CFStringRef v8 = (const __CFString *)CFObjectCopyProperty(a1, a2, a3, a4, a5, a6, (uint64_t)a7);
  if (v8)
  {
    CFStringRef v9 = v8;
    CFGetDouble(v8, a7);
    CFRelease(v9);
  }
}

CFStringRef CFObjectGetPropertyInt64Sync(uint64_t a1, NSObject *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  CFStringRef result = (const __CFString *)CFObjectCopyProperty(a1, a2, a3, a4, a5, a6, (uint64_t)a7);
  if (result)
  {
    CFStringRef v9 = result;
    unint64_t v10 = CFGetInt64(result, a7);
    CFRelease(v9);
    return (const __CFString *)v10;
  }
  return result;
}

uint64_t CFObjectSetProperty(const void *a1, dispatch_queue_t queue, uint64_t (*a3)(const void *, uint64_t, const void *, const void *, const void *), uint64_t a4, const void *a5, const void *a6, const void *a7)
{
  int v10 = a4;
  if (a4)
  {
    return a3(a1, a4, a5, a6, a7);
  }
  else if ((a4 & 8) != 0)
  {
    char v14 = malloc_type_malloc(0x38uLL, 0x10E0040A36414A6uLL);
    if (v14)
    {
      BOOL v15 = v14;
      CFRetain(a1);
      *BOOL v15 = a1;
      v15[1] = a3;
      *((_DWORD *)v15 + 4) = v10;
      CFRetain(a5);
      v15[3] = a5;
      if (a6) {
        CFRetain(a6);
      }
      v15[4] = a6;
      if (a7) {
        CFRetain(a7);
      }
      v15[5] = a7;
      dispatch_async_f(queue, v15, (dispatch_function_t)_CFObjectSetProperty);
      return 0;
    }
    else
    {
      return 4294960568;
    }
  }
  else
  {
    context[0] = a1;
    context[1] = a3;
    context[2] = a4;
    context[3] = a5;
    context[4] = a6;
    void context[5] = a7;
    uint64_t v18 = 4294960596;
    dispatch_sync_f(queue, context, (dispatch_function_t)_CFObjectSetProperty);
    return v18;
  }
}

void _CFObjectSetProperty(uint64_t a1)
{
  *(_DWORD *)(a1 + 48) = (*(uint64_t (**)(void, void, void, void, void))(a1 + 8))(*(void *)a1, *(unsigned int *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40));
  if ((*(unsigned char *)(a1 + 16) & 8) != 0)
  {
    CFRelease(*(CFTypeRef *)a1);
    CFRelease(*(CFTypeRef *)(a1 + 24));
    CFNumberType v2 = *(const void **)(a1 + 32);
    if (v2) {
      CFRelease(v2);
    }
    uint64_t v3 = *(const void **)(a1 + 40);
    if (v3) {
      CFRelease(v3);
    }
    free((void *)a1);
  }
}

uint64_t CFObjectSetPropertyF(const void *a1, NSObject *a2, uint64_t (*a3)(const void *, uint64_t, const void *, const void *, const void *), uint64_t a4, const void *a5, const void *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CFTypeRef cf = 0;
  uint64_t v15 = CFPropertyListBuildFormatted(0, 0, &cf, a7, (uint64_t)&a9, (uint64_t)a6, a7, a8);
  if (!v15)
  {
    uint64_t v15 = CFObjectSetProperty(a1, a2, a3, a4, a5, a6, cf);
    if (cf) {
      CFRelease(cf);
    }
  }
  return v15;
}

uint64_t CFObjectSetPropertyCString(const void *a1, NSObject *a2, uint64_t (*a3)(const void *, uint64_t, const void *, const void *, const void *), uint64_t a4, const void *a5, const void *a6, char *cStr, CFIndex numBytes)
{
  if (numBytes == -1) {
    CFStringRef v14 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  }
  else {
    CFStringRef v14 = CFStringCreateWithBytes(0, (const UInt8 *)cStr, numBytes, 0x8000100u, 0);
  }
  CFStringRef v15 = v14;
  if (!v14) {
    return 4294960596;
  }
  uint64_t v16 = CFObjectSetProperty(a1, a2, a3, a4, a5, a6, v14);
  CFRelease(v15);
  return v16;
}

uint64_t CFObjectSetPropertyData(const void *a1, NSObject *a2, uint64_t (*a3)(const void *, uint64_t, const void *, const void *, const void *), uint64_t a4, const void *a5, const void *a6, UInt8 *bytes, CFIndex length)
{
  CFDataRef v14 = CFDataCreate(0, bytes, length);
  if (!v14) {
    return 4294960596;
  }
  CFDataRef v15 = v14;
  uint64_t v16 = CFObjectSetProperty(a1, a2, a3, a4, a5, a6, v14);
  CFRelease(v15);
  return v16;
}

uint64_t CFObjectSetPropertyDouble(const void *a1, NSObject *a2, uint64_t (*a3)(const void *, uint64_t, const void *, const void *, const void *), uint64_t a4, const void *a5, const void *a6, double a7)
{
  double valuePtr = a7;
  CFNumberRef v13 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  if (!v13) {
    return 4294960568;
  }
  CFNumberRef v14 = v13;
  uint64_t v15 = CFObjectSetProperty(a1, a2, a3, a4, a5, a6, v13);
  CFRelease(v14);
  return v15;
}

uint64_t CFObjectSetPropertyInt64(const void *a1, NSObject *a2, uint64_t (*a3)(const void *, uint64_t, const void *, const void *, const void *), uint64_t a4, const void *a5, const void *a6, uint64_t a7)
{
  CFNumberRef Int64 = CFNumberCreateInt64(a7);
  if (!Int64) {
    return 4294960568;
  }
  CFNumberRef v14 = Int64;
  uint64_t v15 = CFObjectSetProperty(a1, a2, a3, a4, a5, a6, Int64);
  CFRelease(v14);
  return v15;
}

const void *CFObjectCopyTypedValue(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, int *), uint64_t a3, uint64_t a4, int *a5)
{
  int v10 = 0;
  uint64_t v7 = (const void *)a2(a1, a3, &v10);
  CFStringRef v8 = v7;
  if (a4 && !v10 && CFGetTypeID(v7) != a4)
  {
    CFRelease(v8);
    CFStringRef v8 = 0;
    int v10 = -6756;
  }
  if (a5) {
    *a5 = v10;
  }
  return v8;
}

uint64_t CFObjectSetValue(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  return a2(a1, a3, a4);
}

void *CFObjectCopyBytes(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, int *), uint64_t a3, size_t *a4, int *a5)
{
  int v12 = 0;
  CFDataRef v7 = (const __CFData *)a2(a1, a3, &v12);
  int v11 = v12;
  if (v7)
  {
    CFDataRef v8 = v7;
    CFStringRef v9 = CFCopyData(v7, a4, &v11);
    CFRelease(v8);
    if (a5) {
LABEL_3:
    }
      *a5 = v11;
  }
  else
  {
    if (a4) {
      *a4 = 0;
    }
    CFStringRef v9 = 0;
    int v11 = -6727;
    if (a5) {
      goto LABEL_3;
    }
  }
  return v9;
}

void *CFCopyData(const __CFData *a1, size_t *a2, _DWORD *a3)
{
  CFDataRef v5 = a1;
  size_t v19 = 0;
  uint64_t v20 = 0;
  CFTypeID v6 = CFGetTypeID(a1);
  if (v6 == CFDataGetTypeID())
  {
    BytePtr = CFDataGetBytePtr(v5);
    size_t Length = CFDataGetLength(v5);
    CFDataRef v5 = (const __CFData *)Length;
    size_t v19 = Length;
    if (Length <= 1) {
      size_t Length = 1;
    }
    CFStringRef v9 = malloc_type_malloc(Length, 0xB1CED34BuLL);
    uint64_t v20 = v9;
    if (v9)
    {
      if (v5)
      {
        memcpy(v9, BytePtr, (size_t)v5);
        goto LABEL_7;
      }
LABEL_28:
      if (!a2) {
        goto LABEL_30;
      }
      goto LABEL_29;
    }
    goto LABEL_33;
  }
  if (v6 == CFStringGetTypeID())
  {
    uint64_t v17 = 0;
    int64_t v18 = 0;
    uint64_t v16 = 0;
    int v10 = CFStringGetOrCopyCStringUTF8((const __CFString *)v5, (const char **)&v17, (UInt8 **)&v16, (size_t *)&v18);
    if (v10)
    {
      LODWORD(v5) = v10;
      if (a2) {
        goto LABEL_29;
      }
    }
    else
    {
      LODWORD(v5) = HexToDataCopy(v17, v18, 22, &v20, &v19, 0);
      if (!v16) {
        goto LABEL_28;
      }
      free(v16);
      if (a2) {
        goto LABEL_29;
      }
    }
    goto LABEL_30;
  }
  if (v6 == CFNullGetTypeID())
  {
    uint64_t v20 = malloc_type_malloc(1uLL, 0x63FC2D25uLL);
    if (v20)
    {
      LODWORD(v5) = 0;
      size_t v19 = 0;
      if (a2) {
        goto LABEL_29;
      }
      goto LABEL_30;
    }
LABEL_33:
    LODWORD(v5) = -6728;
    if (a2) {
      goto LABEL_29;
    }
    goto LABEL_30;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    size_t v19 = 16;
    int v11 = malloc_type_malloc(0x10uLL, 0xF3364FB2uLL);
    uint64_t v20 = v11;
    if (v11)
    {
      [(__CFData *)v5 getUUIDBytes:v11];
LABEL_7:
      LODWORD(v5) = 0;
      if (!a2) {
        goto LABEL_30;
      }
LABEL_29:
      *a2 = v19;
      goto LABEL_30;
    }
    goto LABEL_33;
  }
  if (v6 != CFUUIDGetTypeID())
  {
    LODWORD(v5) = -6735;
    goto LABEL_28;
  }
  size_t v19 = 16;
  int v12 = (CFUUIDBytes *)malloc_type_malloc(0x10uLL, 0x2190380DuLL);
  uint64_t v20 = v12;
  if (!v12) {
    goto LABEL_33;
  }
  CFNumberRef v13 = v12;
  CFUUIDBytes v14 = CFUUIDGetUUIDBytes(v5);
  LODWORD(v5) = 0;
  *CFNumberRef v13 = v14;
  if (a2) {
    goto LABEL_29;
  }
LABEL_30:
  if (a3) {
    *a3 = v5;
  }
  return v20;
}

const char *CFObjectGetBytes(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, int *), uint64_t a3, const char *a4, unint64_t a5, void *a6, int *a7)
{
  int v14 = 0;
  int v11 = (__CFString *)a2(a1, a3, &v14);
  int v12 = v11;
  if (a7) {
    *a7 = v14;
  }
  if (v11)
  {
    a4 = CFGetData(v11, a4, a5, a6, a7);
    CFRelease(v12);
  }
  else if (a6)
  {
    *a6 = 0;
  }
  return a4;
}

const char *CFGetData(__CFString *a1, const char *a2, unint64_t a3, void *a4, int *a5)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  unint64_t v20 = 0;
  if (a1)
  {
    CFTypeID v10 = CFGetTypeID(a1);
    if (v10 == CFDataGetTypeID())
    {
      BytePtr = CFDataGetBytePtr((CFDataRef)a1);
      unint64_t Length = CFDataGetLength((CFDataRef)a1);
      unint64_t v20 = Length;
      if (a2)
      {
        size_t v13 = Length;
        if (Length > a3)
        {
          unint64_t v20 = a3;
          size_t v13 = a3;
        }
        if (!v13) {
          goto LABEL_9;
        }
        int v14 = (char *)a2;
        p_s = (CFUUIDBytes *)BytePtr;
        goto LABEL_8;
      }
      int v16 = 0;
      a2 = (const char *)BytePtr;
    }
    else
    {
      int64_t v19 = 0;
      if (v10 != CFStringGetTypeID())
      {
        if (v10 == CFNullGetTypeID())
        {
          int v16 = 0;
          unint64_t v20 = 0;
          a2 = "";
          goto LABEL_17;
        }
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          *(void *)&__s.byte0 = 0;
          *(void *)&__s.byte8 = 0;
          [(__CFString *)a1 getUUIDBytes:&__s];
        }
        else
        {
          if (v10 != CFUUIDGetTypeID())
          {
            int v16 = -6735;
            goto LABEL_17;
          }
          CFUUIDBytes __s = CFUUIDGetUUIDBytes((CFUUIDRef)a1);
        }
        unint64_t v20 = 16;
        if (!a2)
        {
          a2 = "";
          goto LABEL_9;
        }
        if (a3 > 0xF)
        {
          a3 = 16;
        }
        else
        {
          unint64_t v20 = a3;
          if (!a3) {
            goto LABEL_9;
          }
        }
        p_s = &__s;
        int v14 = (char *)a2;
        size_t v13 = a3;
LABEL_8:
        memcpy(v14, p_s, v13);
LABEL_9:
        int v16 = 0;
        goto LABEL_17;
      }
      *(void *)&__s.byte0 = 0;
      int64_t v18 = 0;
      int v16 = CFStringGetOrCopyCStringUTF8(a1, (const char **)&__s, (UInt8 **)&v18, (size_t *)&v19);
      if (!v16)
      {
        HexToData(*(char **)&__s.byte0, v19, 22, (uint64_t)a2, a3, &v20, 0, 0);
        if (v18) {
          free(v18);
        }
        goto LABEL_9;
      }
    }
  }
  else
  {
    int v16 = -6705;
  }
LABEL_17:
  if (a4) {
    *a4 = v20;
  }
  if (a5) {
    *a5 = v16;
  }
  return a2;
}

uint64_t CFObjectSetBytes(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, CFDataRef), uint64_t a3, UInt8 *bytes, CFIndex length)
{
  CFDataRef v8 = CFDataCreate(0, bytes, length);
  if (!v8) {
    return 4294960596;
  }
  CFDataRef v9 = v8;
  uint64_t v10 = a2(a1, a3, v8);
  CFRelease(v9);
  return v10;
}

char *CFObjectCopyCString(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, int *), uint64_t a3, _DWORD *a4)
{
  int v10 = 0;
  CFStringRef v5 = (const __CFString *)a2(a1, a3, &v10);
  int v9 = v10;
  if (!v5)
  {
    CFDataRef v7 = 0;
    int v9 = -6727;
    if (!a4) {
      return v7;
    }
    goto LABEL_3;
  }
  CFStringRef v6 = v5;
  CFDataRef v7 = CFCopyCString(v5, &v9);
  CFRelease(v6);
  if (a4) {
LABEL_3:
  }
    *a4 = v9;
  return v7;
}

char *CFCopyCString(const __CFString *a1, int *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int v9 = 0;
  if (a1)
  {
    CFTypeID v4 = CFGetTypeID(a1);
    if (v4 == CFStringGetTypeID())
    {
      int v5 = CFStringCopyUTF8CString(a1, &v9);
      if (v5) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
    if (v4 == CFDataGetTypeID())
    {
      size_t v6 = (2 * CFDataGetLength((CFDataRef)a1)) | 1;
      CFDataRef v7 = (char *)malloc_type_malloc(v6, 0x9096367FuLL);
      int v9 = v7;
      if (v7)
      {
        CFGetCString(a1, v7, v6);
LABEL_9:
        int v5 = 0;
        goto LABEL_10;
      }
    }
    else
    {
      CFGetCString(a1, __s1, 0x40uLL);
      int v9 = strdup(__s1);
      if (v9) {
        goto LABEL_9;
      }
    }
    int v5 = -6728;
  }
  else
  {
    int v5 = -6705;
  }
LABEL_10:
  if (a2) {
    *a2 = v5;
  }
  return v9;
}

uint64_t CFStringCopyUTF8CString(const __CFString *a1, char **a2)
{
  CStringPtr = CFStringGetCStringPtr(a1, 0x8000100u);
  if (CStringPtr)
  {
    int v5 = strdup(CStringPtr);
    if (!v5) {
      return 4294960568;
    }
LABEL_7:
    uint64_t result = 0;
    *a2 = v5;
    return result;
  }
  CFIndex Length = CFStringGetLength(a1);
  CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  CFIndex usedBufLen = MaximumSizeForEncoding;
  CFDataRef v8 = (UInt8 *)malloc_type_malloc(MaximumSizeForEncoding + 1, 0xA12CFD3CuLL);
  if (!v8) {
    return 4294960568;
  }
  int v5 = (char *)v8;
  v11.location = 0;
  v11.CFIndex length = Length;
  if (CFStringGetBytes(a1, v11, 0x8000100u, 0, 0, v8, MaximumSizeForEncoding, &usedBufLen) == Length)
  {
    v5[usedBufLen] = 0;
    goto LABEL_7;
  }
  free(v5);
  return 4294960596;
}

const char *CFObjectGetCString(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, int *), uint64_t a3, char *a4, size_t a5, _DWORD *a6)
{
  int v12 = 0;
  CFStringRef v9 = (const __CFString *)a2(a1, a3, &v12);
  CFStringRef v10 = v9;
  if (a6) {
    *a6 = v12;
  }
  if (v9)
  {
    a4 = (char *)CFGetCString(v9, a4, a5);
    CFRelease(v10);
  }
  else if (a5)
  {
    *a4 = 0;
  }
  else
  {
    return "";
  }
  return a4;
}

uint64_t CFObjectSetCString(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, CFStringRef), uint64_t a3, char *cStr, CFIndex numBytes)
{
  if (numBytes == -1) {
    CFStringRef v8 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  }
  else {
    CFStringRef v8 = CFStringCreateWithBytes(0, (const UInt8 *)cStr, numBytes, 0x8000100u, 0);
  }
  CFStringRef v9 = v8;
  if (!v8) {
    return 4294960579;
  }
  uint64_t v10 = a2(a1, a3, v8);
  CFRelease(v9);
  return v10;
}

double CFObjectGetDouble(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, int *), uint64_t a3, _DWORD *a4)
{
  int v9 = 0;
  CFStringRef v5 = (const __CFString *)a2(a1, a3, &v9);
  CFStringRef v6 = v5;
  if (a4) {
    *a4 = v9;
  }
  if (!v5) {
    return 0.0;
  }
  double v7 = CFGetDouble(v5, a4);
  CFRelease(v6);
  return v7;
}

uint64_t CFObjectSetDouble(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, CFNumberRef), uint64_t a3, double a4)
{
  double valuePtr = a4;
  CFNumberRef v7 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  if (!v7) {
    return 4294960596;
  }
  CFNumberRef v8 = v7;
  uint64_t v9 = a2(a1, a3, v7);
  CFRelease(v8);
  return v9;
}

unint64_t CFObjectGetHardwareAddress(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, int *), uint64_t a3, char *a4, size_t a5, int *a6)
{
  int v13 = 0;
  CFStringRef v9 = (const __CFString *)a2(a1, a3, &v13);
  CFStringRef v10 = v9;
  if (a6) {
    *a6 = v13;
  }
  if (v9)
  {
    unint64_t v11 = CFGetHardwareAddress(v9, a4, a5, a6);
    CFRelease(v10);
  }
  else
  {
    if (a4) {
      bzero(a4, a5);
    }
    unint64_t v11 = 0;
    if (a6) {
      *a6 = -6727;
    }
  }
  return v11;
}

unint64_t CFGetHardwareAddress(const __CFString *a1, char *a2, size_t a3, int *a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  unint64_t valuePtr = 0;
  if (!a1)
  {
    int v10 = -6705;
    goto LABEL_30;
  }
  CFTypeID v8 = CFGetTypeID(a1);
  if (v8 == CFStringGetTypeID())
  {
    if (CFStringGetCString(a1, buffer, 64, 0x600u))
    {
      if (!a2)
      {
        if (a3 > 8)
        {
          int v10 = -6743;
          if (!a4) {
            return valuePtr;
          }
          goto LABEL_38;
        }
        a2 = &v18;
      }
      int v9 = TextToHardwareAddress(buffer, 0xFFFFFFFFFFFFFFFFLL, a3, a2);
      if (!v9)
      {
        if (a3 != 8)
        {
          if (a3 == 6)
          {
            int v10 = 0;
            unint64_t v11 = ((unint64_t)*a2 << 40) | ((unint64_t)a2[1] << 32) | ((unint64_t)a2[2] << 24) | ((unint64_t)a2[3] << 16) | ((unint64_t)a2[4] << 8);
            uint64_t v12 = a2[5];
            goto LABEL_24;
          }
          goto LABEL_26;
        }
        int v10 = 0;
        unint64_t v15 = *(void *)a2;
        goto LABEL_36;
      }
      int v10 = v9;
LABEL_31:
      bzero(a2, a3);
      if (!a4) {
        return valuePtr;
      }
      goto LABEL_38;
    }
LABEL_41:
    int v10 = -6743;
LABEL_30:
    if (!a2) {
      goto LABEL_37;
    }
    goto LABEL_31;
  }
  if (v8 == CFNumberGetTypeID())
  {
    CFNumberGetValue((CFNumberRef)a1, kCFNumberSInt64Type, &valuePtr);
    if (a2)
    {
      if (a3 == 8)
      {
        int v10 = 0;
        *(void *)a2 = bswap64(valuePtr);
        if (!a4) {
          return valuePtr;
        }
        goto LABEL_38;
      }
      if (a3 == 6)
      {
        int v10 = 0;
        unint64_t v13 = valuePtr;
        *a2 = BYTE5(valuePtr);
        a2[1] = BYTE4(v13);
        a2[2] = BYTE3(v13);
        a2[3] = BYTE2(v13);
        a2[4] = BYTE1(v13);
        a2[5] = v13;
        if (!a4) {
          return valuePtr;
        }
        goto LABEL_38;
      }
    }
LABEL_26:
    int v10 = 0;
    if (!a4) {
      return valuePtr;
    }
    goto LABEL_38;
  }
  if (v8 != CFDataGetTypeID())
  {
    int v10 = -6756;
    goto LABEL_30;
  }
  if (CFDataGetLength((CFDataRef)a1) != a3) {
    goto LABEL_41;
  }
  BytePtr = CFDataGetBytePtr((CFDataRef)a1);
  if (a2) {
    memcpy(a2, BytePtr, a3);
  }
  if (a3 != 8)
  {
    if (a3 == 6)
    {
      int v10 = 0;
      unint64_t v11 = ((unint64_t)*BytePtr << 40) | ((unint64_t)BytePtr[1] << 32) | ((unint64_t)BytePtr[2] << 24) | ((unint64_t)BytePtr[3] << 16) | ((unint64_t)BytePtr[4] << 8);
      uint64_t v12 = BytePtr[5];
LABEL_24:
      unint64_t valuePtr = v11 | v12;
      if (!a4) {
        return valuePtr;
      }
      goto LABEL_38;
    }
    goto LABEL_26;
  }
  int v10 = 0;
  unint64_t v15 = *(void *)BytePtr;
LABEL_36:
  unint64_t valuePtr = bswap64(v15);
LABEL_37:
  if (a4) {
LABEL_38:
  }
    *a4 = v10;
  return valuePtr;
}

uint64_t CFObjectSetHardwareAddress(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, CFStringRef), uint64_t a3, unsigned __int8 *a4, uint64_t a5)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a5 != 8 && a5 != 6) {
    return 4294960553;
  }
  CFStringRef v5 = &a4[a5];
  CFStringRef v6 = cStr;
  do
  {
    if (v6 == cStr)
    {
      CFNumberRef v7 = cStr;
    }
    else
    {
      char *v6 = 58;
      CFNumberRef v7 = v6 + 1;
    }
    unsigned int v8 = *a4++;
    *CFNumberRef v7 = a0123456789abcd_0[(unint64_t)v8 >> 4];
    CFStringRef v6 = v7 + 2;
    v7[1] = a0123456789abcd_0[v8 & 0xF];
  }
  while (a4 < v5);
  char *v6 = 0;
  return CFObjectSetCString(a1, a2, a3, cStr, -1);
}

unint64_t CFObjectGetInt64(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, int *), uint64_t a3, int *a4)
{
  int v9 = 0;
  CFStringRef v5 = (const __CFString *)a2(a1, a3, &v9);
  CFStringRef v6 = v5;
  if (a4) {
    *a4 = v9;
  }
  if (!v5) {
    return 0;
  }
  unint64_t v7 = CFGetInt64(v5, a4);
  CFRelease(v6);
  return v7;
}

int64_t CFObjectGetInt64Ranged(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, int *), uint64_t a3, int64_t a4, int64_t a5, int *a6)
{
  int v13 = 0;
  CFStringRef v9 = (const __CFString *)a2(a1, a3, &v13);
  CFStringRef v10 = v9;
  if (a6) {
    *a6 = v13;
  }
  if (!v9) {
    return 0;
  }
  int64_t v11 = CFGetInt64Ranged(v9, a4, a5, a6);
  CFRelease(v10);
  return v11;
}

uint64_t CFObjectSetInt64(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, CFNumberRef), uint64_t a3, uint64_t a4)
{
  CFNumberRef Int64 = CFNumberCreateInt64(a4);
  if (!Int64) {
    return 4294960596;
  }
  CFNumberRef v8 = Int64;
  uint64_t v9 = a2(a1, a3, Int64);
  CFRelease(v8);
  return v9;
}

uint64_t CFObjectGetUUID(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, unsigned int *), uint64_t a3, _OWORD *a4, uint64_t a5)
{
  unsigned int v11 = 0;
  unint64_t v7 = (__CFString *)a2(a1, a3, &v11);
  uint64_t v8 = v11;
  if (!v11)
  {
    uint64_t v9 = v7;
    uint64_t v8 = CFGetUUIDEx(v7, a4, a5);
    CFRelease(v9);
  }
  return v8;
}

uint64_t CFGetUUIDEx(__CFString *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 4294960591;
  }
  unint64_t v17 = 0;
  CFTypeID v6 = CFGetTypeID(a1);
  if (v6 != CFStringGetTypeID())
  {
    if (v6 != CFDataGetTypeID())
    {
      if (a2 && v6 == CFNumberGetTypeID())
      {
        CFNumberGetValue((CFNumberRef)a1, kCFNumberSInt64Type, &v17);
        unsigned int v12 = v17;
        if (HIDWORD(v17)) {
          return 4294960586;
        }
        if (a3)
        {
          *(_OWORD *)a3 = *a2;
          *(_DWORD *)a3 = bswap32(v12);
        }
      }
      else
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          if (a3) {
            [(__CFString *)a1 getUUIDBytes:a3];
          }
        }
        else
        {
          if (v6 != CFUUIDGetTypeID()) {
            return 4294960540;
          }
          if (a3) {
            *(CFUUIDBytes *)a3 = CFUUIDGetUUIDBytes((CFUUIDRef)a1);
          }
        }
      }
      return 0;
    }
    CFIndex Length = CFDataGetLength((CFDataRef)a1);
    if (Length == 16)
    {
      if (a3) {
        *(_OWORD *)a3 = *(_OWORD *)CFDataGetBytePtr((CFDataRef)a1);
      }
      return 0;
    }
    CFIndex v13 = Length;
    if (a2 && Length == 1)
    {
      if (a3)
      {
        *(_OWORD *)a3 = *a2;
        v20.location = 0;
        v20.CFIndex length = 1;
        CFDataGetBytes((CFDataRef)a1, v20, (UInt8 *)(a3 + 3));
      }
      return 0;
    }
    if (a2 && Length == 2)
    {
      if (a3)
      {
        BytePtr = CFDataGetBytePtr((CFDataRef)a1);
        *(_OWORD *)a3 = *a2;
        *(unsigned char *)(a3 + 2) = *BytePtr;
        UInt8 v15 = BytePtr[1];
LABEL_35:
        *(unsigned char *)(a3 + 3) = v15;
      }
    }
    else
    {
      uint64_t result = 4294960553;
      if (!a2 || v13 != 4) {
        return result;
      }
      if (a3)
      {
        int v16 = CFDataGetBytePtr((CFDataRef)a1);
        *(_OWORD *)a3 = *a2;
        *(unsigned char *)a3 = *v16;
        *(unsigned char *)(a3 + 1) = v16[1];
        *(unsigned char *)(a3 + 2) = v16[2];
        UInt8 v15 = v16[3];
        goto LABEL_35;
      }
    }
    return 0;
  }
  if (!CFStringGetCString(a1, buffer, 64, 0x600u)) {
    return 4294960553;
  }
  uint64_t result = StringToUUIDEx(buffer, 0xFFFFFFFFFFFFFFFFLL, 0, a2, (_OWORD *)a3, v7, v8, v9);
  if (!result) {
    return 0;
  }
  return result;
}

uint64_t CFObjectSetUUID(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, CFUUIDRef), uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  if (a4)
  {
    switch(a6)
    {
      case 4:
        uint64_t v9 = *a4;
        LOBYTE(v13) = *(unsigned char *)a5;
        LOBYTE(v10) = *((unsigned char *)a5 + 1);
        LOBYTE(v11) = *((unsigned char *)a5 + 2);
        LOBYTE(v12) = *((unsigned char *)a5 + 3);
        break;
      case 2:
        uint64_t v9 = *a4;
        unint64_t v10 = (unint64_t)*a4 >> 8;
        LOBYTE(v11) = *(unsigned char *)a5;
        LOBYTE(v12) = *((unsigned char *)a5 + 1);
        uint64_t v13 = *a4;
        break;
      case 1:
        uint64_t v9 = *a4;
        unint64_t v10 = (unint64_t)*a4 >> 8;
        unint64_t v11 = (unint64_t)*a4 >> 16;
        LOBYTE(v12) = *(unsigned char *)a5;
        uint64_t v13 = *a4;
        break;
      default:
        return 4294960553;
    }
  }
  else
  {
    if (a6 != 16) {
      return 4294960553;
    }
    uint64_t v9 = *a5;
    unint64_t v10 = (unint64_t)*a5 >> 8;
    unint64_t v11 = (unint64_t)*a5 >> 16;
    unint64_t v12 = (unint64_t)*a5 >> 24;
    uint64_t v13 = *a5;
    a4 = a5;
  }
  *(void *)&v18.byte8 = a4[1];
  *(void *)&v18.byte0 = v9 & 0xFFFFFFFF00000000 | ((unint64_t)v12 << 24) | ((unint64_t)v11 << 16) | ((unint64_t)v10 << 8) | v13;
  CFUUIDRef v15 = CFUUIDCreateFromUUIDBytes(0, v18);
  if (!v15) {
    return 4294960568;
  }
  CFUUIDRef v16 = v15;
  uint64_t v17 = a2(a1, a3, v15);
  CFRelease(v16);
  return v17;
}

uint64_t CFObjectSetUUIDString(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, CFStringRef), uint64_t a3, unsigned char *a4, uint64_t a5, long long *a6, char a7)
{
  unsigned int v13 = 0;
  CFStringRef v10 = CFCreateUUIDString(a4, a5, a6, a7, &v13);
  if (v10)
  {
    CFStringRef v11 = v10;
    unsigned int v13 = a2(a1, a3, v10);
    CFRelease(v11);
  }
  return v13;
}

CFStringRef CFCreateUUIDString(unsigned char *a1, uint64_t a2, long long *a3, char a4, _DWORD *a5)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  int v7 = 0;
  UUIDtoCStringFlags(a1, a2, a3, a4, cStr, &v7);
  if (v7)
  {
    CFStringRef result = 0;
    if (!a5) {
      return result;
    }
  }
  else
  {
    CFStringRef result = CFStringCreateWithCString(0, cStr, 0x8000100u);
    if (result)
    {
      if (!a5) {
        return result;
      }
    }
    else
    {
      int v7 = -6700;
      if (!a5) {
        return result;
      }
    }
  }
  *a5 = v7;
  return result;
}

const void *CFGetTypedObject(const void *result, uint64_t a2, int *a3)
{
  if (!result)
  {
    int v8 = -6705;
    if (!a3) {
      return result;
    }
    goto LABEL_9;
  }
  CFStringRef v5 = result;
  CFTypeID v6 = CFGetTypeID(result);
  BOOL v7 = v6 == a2;
  if (v6 == a2) {
    CFStringRef result = v5;
  }
  else {
    CFStringRef result = 0;
  }
  if (v7) {
    int v8 = 0;
  }
  else {
    int v8 = -6756;
  }
  if (a3) {
LABEL_9:
  }
    *a3 = v8;
  return result;
}

uint64_t CFSetObjectAtPath(void *cf, unsigned char *a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11 = -1;
  unint64_t v12 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  unsigned int v13 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  while (1)
  {
    for (CFIndex i = a2; *i && *i != 46; ++i)
      ;
    CFIndex v15 = i - a2;
    if (!*i) {
      break;
    }
    CFUUIDRef v16 = i + 1;
    if (*a2 == 91)
    {
      LODWORD(idx) = 0;
      if (SNScanF(a2 + 1, v15 - 1, "%i]", a4, a5, a6, a7, a8, (int)&idx) != 1) {
        return 4294960579;
      }
      CFTypeID v17 = CFGetTypeID(cf);
      if (v17 != CFArrayGetTypeID()) {
        return 4294960540;
      }
      CFIndex v18 = idx;
      if ((idx & 0x80000000) != 0 || CFArrayGetCount((CFArrayRef)cf) <= v18) {
        return 4294960586;
      }
      CFTypeRef cf = (void *)CFArrayGetValueAtIndex((CFArrayRef)cf, (int)idx);
      unsigned int v11 = idx;
      a2 = v16;
    }
    else
    {
      CFTypeID v19 = CFGetTypeID(cf);
      if (v19 != CFDictionaryGetTypeID()) {
        return 4294960540;
      }
      CFStringRef v20 = CFStringCreateWithBytes(0, a2, v15, 0x8000100u, 0);
      if (!v20) {
        return 4294960596;
      }
      CFStringRef v21 = v20;
      CFStringRef Value = CFDictionaryGetValue((CFDictionaryRef)cf, v20);
      if (!Value)
      {
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, v12, v13);
        if (!Mutable)
        {
          CFRelease(v21);
          return 4294960568;
        }
        CFStringRef Value = Mutable;
        CFDictionarySetValue((CFMutableDictionaryRef)cf, v21, Mutable);
        CFRelease(Value);
      }
      CFRelease(v21);
      unsigned int v11 = -1;
      a2 = v16;
      CFTypeRef cf = (void *)Value;
    }
  }
  CFTypeID v24 = CFGetTypeID(cf);
  if (v24 != CFDictionaryGetTypeID())
  {
    CFTypeID v27 = CFGetTypeID(cf);
    if (v27 != CFArrayGetTypeID()) {
      return 4294960540;
    }
    if (i != a2) {
      return 4294960579;
    }
    if (a3)
    {
      CFArrayAppendValue((CFMutableArrayRef)cf, a3);
    }
    else
    {
      if ((v11 & 0x80000000) != 0) {
        return 4294960579;
      }
      CFArrayRemoveValueAtIndex((CFMutableArrayRef)cf, v11);
    }
    return 0;
  }
  if (i == a2) {
    return 4294960579;
  }
  CFStringRef v25 = CFStringCreateWithBytes(0, a2, i - a2, 0x8000100u, 0);
  if (v25)
  {
    CFStringRef v26 = v25;
    if (a3) {
      CFDictionarySetValue((CFMutableDictionaryRef)cf, v25, a3);
    }
    else {
      CFDictionaryRemoveValue((CFMutableDictionaryRef)cf, v25);
    }
    CFRelease(v26);
    return 0;
  }
  return 4294960596;
}

void CFArrayApplyBlock(const __CFArray *a1, CFRange a2, void *context)
{
}

uint64_t _CFArrayApplyBlockApplier(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

uint64_t CFArrayAppendInt64(__CFArray *a1, uint64_t a2)
{
  CFNumberRef Int64 = CFNumberCreateInt64(a2);
  if (!Int64) {
    return 4294960568;
  }
  CFNumberRef v4 = Int64;
  CFArrayAppendValue(a1, Int64);
  CFRelease(v4);
  return 0;
}

uint64_t CFArrayAppendBytes(__CFArray *a1, const UInt8 *a2, CFIndex a3)
{
  CFDataRef v4 = CFDataCreate(0, a2, a3);
  if (!v4) {
    return 4294960568;
  }
  CFDataRef v5 = v4;
  CFArrayAppendValue(a1, v4);
  CFRelease(v5);
  return 0;
}

CFComparisonResult CFSortCompareKeyPath(const __CFString *a1, const __CFString *a2, UInt8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFStringRef v23 = 0;
  if (CFPropertyListExtractFormatted(a1, (uint64_t)&v23, a3, a4, a5, a6, a7, a8, v19)) {
    return -1;
  }
  CFStringRef v15 = v23;
  if (CFPropertyListExtractFormatted(a2, (uint64_t)&v23, a3, v10, v11, v12, v13, v14, v20)) {
    return -1;
  }
  CFStringRef v17 = v23;
  CFTypeID v18 = CFGetTypeID(v15);
  if (v18 != CFGetTypeID(v17)) {
    return -1;
  }
  if (v18 != CFNumberGetTypeID())
  {
    if (v18 == CFStringGetTypeID()) {
      return CFStringCompare(v15, v17, 0x361uLL);
    }
    if (v18 == CFDateGetTypeID()) {
      return CFDateCompare((CFDateRef)v15, (CFDateRef)v17, 0);
    }
    return -1;
  }
  uint64_t v21 = 0;
  uint64_t valuePtr = 0;
  CFNumberGetValue((CFNumberRef)v15, kCFNumberSInt64Type, &valuePtr);
  CFNumberGetValue((CFNumberRef)v17, kCFNumberSInt64Type, &v21);
  if (valuePtr < v21) {
    return -1;
  }
  else {
    return (unint64_t)(valuePtr > v21);
  }
}

uint64_t CFArrayEnsureCreatedAndAppend(__CFArray **a1, void *value)
{
  CFMutableDictionaryRef Mutable = *a1;
  if (Mutable) {
    goto LABEL_4;
  }
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    *a1 = Mutable;
LABEL_4:
    CFArrayAppendValue(Mutable, value);
    return 0;
  }
  return 4294960568;
}

uint64_t CFArrayEnsureCreatedAndAppendCString(__CFArray **a1, const char *a2, CFIndex a3)
{
  if (a3 == -1) {
    CFDataRef v4 = (__CFString *)CFStringCreateWithCString(0, a2, 0x8000100u);
  }
  else {
    CFDataRef v4 = (__CFString *)CFStringCreateWithBytes(0, (const UInt8 *)a2, a3, 0x8000100u, 0);
  }
  CFDataRef v5 = v4;
  if (!v4) {
    return 4294960596;
  }
  uint64_t v6 = CFArrayEnsureCreatedAndAppend(a1, v4);
  CFRelease(v5);
  return v6;
}

CFArrayRef CFArrayGetTypedValueAtIndex(const __CFArray *result, CFIndex a2, uint64_t a3, int *a4)
{
  if (result)
  {
    CFStringRef result = (const __CFArray *)CFArrayGetValueAtIndex(result, a2);
    if (result)
    {
      CFArrayRef v6 = result;
      CFTypeID v7 = CFGetTypeID(result);
      BOOL v8 = v7 == a3;
      if (v7 == a3) {
        CFStringRef result = v6;
      }
      else {
        CFStringRef result = 0;
      }
      if (v8) {
        int v9 = 0;
      }
      else {
        int v9 = -6756;
      }
    }
    else
    {
      int v9 = -6727;
    }
  }
  else
  {
    int v9 = -6705;
  }
  if (a4) {
    *a4 = v9;
  }
  return result;
}

uint64_t CFDataGetEmpty()
{
  if (gCFDataGetEmptyOnce != -1) {
    dispatch_once_f(&gCFDataGetEmptyOnce, 0, (dispatch_function_t)_CFDataGetEmptyOnce);
  }
  return gCFDataEmpty;
}

CFDataRef _CFDataGetEmptyOnce()
{
  CFDataRef result = CFDataCreate(0, (const UInt8 *)"", 0);
  gCFDataEmpty = (uint64_t)result;
  return result;
}

uint64_t _CFDictionaryApplyBlockApplier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a3, a1, a2);
}

uint64_t CFDictionaryCreateFromNameTypeValueArgList(CFMutableDictionaryRef *a1, int a2, int a3, uint64_t a4)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return 4294960568;
  }
  CFMutableDictionaryRef v9 = Mutable;
  if (a2 >= a3)
  {
LABEL_118:
    uint64_t v73 = 0;
    *a1 = v9;
    return v73;
  }
  uint64_t v10 = a2;
  CFUUIDBytes __s = 0;
  int v77 = 0;
  while (1)
  {
    uint64_t v11 = *(void *)(a4 + 8 * v10);
    if (!v11)
    {
      uint64_t v73 = 4294960591;
      goto LABEL_117;
    }
    uint64_t v12 = strchr(*(char **)(a4 + 8 * v10), 58);
    if (!v12 || (uint64_t v13 = v12, v14 = v12 + 1, (v15 = strchr(v12 + 1, 58)) == 0))
    {
      uint64_t v73 = 4294960554;
      goto LABEL_117;
    }
    uint64_t v21 = v15;
    uint64_t v22 = 0;
    ++v10;
    CFStringRef v23 = v15 + 1;
    CFUUIDBytes __s = v23;
    int64_t v24 = v21 - v14;
    while (v24 != v22)
    {
      if (v14[v22] != aB[v22]) {
        goto LABEL_13;
      }
      if (++v22 == 2) {
        goto LABEL_18;
      }
    }
    if (!aB[v24])
    {
LABEL_18:
      if (strnicmpx((unsigned __int8 *)v23, -1, "true")
        && strnicmpx((unsigned __int8 *)__s, -1, "yes")
        && strnicmpx((unsigned __int8 *)__s, -1, "y")
        && strnicmpx((unsigned __int8 *)__s, -1, "on")
        && strnicmpx((unsigned __int8 *)__s, -1, "1"))
      {
        if (strnicmpx((unsigned __int8 *)__s, -1, "false")
          && strnicmpx((unsigned __int8 *)__s, -1, "no")
          && strnicmpx((unsigned __int8 *)__s, -1, "n")
          && strnicmpx((unsigned __int8 *)__s, -1, "off")
          && strnicmpx((unsigned __int8 *)__s, -1, "0"))
        {
LABEL_123:
          uint64_t v73 = 4294960559;
          goto LABEL_117;
        }
        int v31 = 0;
      }
      else
      {
        int v31 = 1;
      }
      int v77 = v31;
      uint64_t appended = CFPropertyListAppendFormatted(v7, v9, (uint64_t)"%.*ks=%b", v26, v27, v28, v29, v30, (uint64_t)&v13[-v11]);
      goto LABEL_79;
    }
LABEL_13:
    uint64_t v25 = 0;
    while (v24 != v25)
    {
      if (v14[v25] != aF[v25]) {
        goto LABEL_32;
      }
      if (++v25 == 2) {
        goto LABEL_37;
      }
    }
    if (!aF[v24])
    {
LABEL_37:
      *(void *)&v79[0] = 0;
      if (sscanf(v23, "%lf", v79) != 1) {
        goto LABEL_123;
      }
      uint64_t appended = CFPropertyListAppendFormatted(v7, v9, (uint64_t)"%.*ks=%f", v34, v35, v36, v37, v38, (uint64_t)&v13[-v11]);
      goto LABEL_79;
    }
LABEL_32:
    uint64_t v33 = 0;
    while (v24 != v33)
    {
      if (v14[v33] != aI_1[v33]) {
        goto LABEL_40;
      }
      if (++v33 == 2) {
        goto LABEL_45;
      }
    }
    if (!aI_1[v24])
    {
LABEL_45:
      if (sscanf(v23, "%i", &v77) != 1) {
        goto LABEL_123;
      }
      uint64_t appended = CFPropertyListAppendFormatted(v7, v9, (uint64_t)"%.*ks=%i", v40, v41, v42, v43, v44, (uint64_t)&v13[-v11]);
      goto LABEL_79;
    }
LABEL_40:
    uint64_t v39 = 0;
    while (v24 != v39)
    {
      if (v14[v39] != aM[v39]) {
        goto LABEL_48;
      }
      if (++v39 == 2) {
        goto LABEL_53;
      }
    }
    if (!aM[v24])
    {
LABEL_53:
      uint64_t appended = TextToHardwareAddress(v23, 0xFFFFFFFFFFFFFFFFLL, 6, v79);
      if (appended) {
        goto LABEL_116;
      }
      uint64_t v51 = (uint64_t)&v13[-v11];
LABEL_78:
      uint64_t appended = CFPropertyListAppendFormatted(v7, v9, (uint64_t)"%.*ks=%D", v46, v47, v48, v49, v50, v51);
      goto LABEL_79;
    }
LABEL_48:
    uint64_t v45 = 0;
    while (v24 != v45)
    {
      if (v14[v45] != aS_1[v45]) {
        goto LABEL_56;
      }
      if (++v45 == 2) {
        goto LABEL_61;
      }
    }
    if (!aS_1[v24])
    {
LABEL_61:
      uint64_t appended = CFPropertyListAppendFormatted(v7, v9, (uint64_t)"%.*ks=%s", v16, v17, v18, v19, v20, (uint64_t)&v13[-v11]);
      goto LABEL_79;
    }
LABEL_56:
    uint64_t v52 = 0;
    while (v24 != v52)
    {
      if (v14[v52] != aU_0[v52]) {
        goto LABEL_63;
      }
      if (++v52 == 2) {
        goto LABEL_68;
      }
    }
    if (!aU_0[v24])
    {
LABEL_68:
      uint64_t appended = StringToUUIDEx(v23, 0xFFFFFFFFFFFFFFFFLL, 0, 0, v79, v18, v19, v20);
      if (appended) {
        goto LABEL_116;
      }
      uint64_t v51 = (uint64_t)&v13[-v11];
      goto LABEL_78;
    }
LABEL_63:
    uint64_t v53 = 0;
    while (v24 != v53)
    {
      if (v14[v53] != aH[v53]) {
        goto LABEL_71;
      }
      if (++v53 == 2) {
        goto LABEL_76;
      }
    }
    if (!aH[v24])
    {
LABEL_76:
      uint64_t v76 = 0;
      uint64_t appended = HexToData(v23, -1, 22, (uint64_t)v79, 0x100uLL, 0, &v76, 0);
      if (appended) {
        goto LABEL_116;
      }
      uint64_t v51 = (uint64_t)&v13[-v11];
      goto LABEL_78;
    }
LABEL_71:
    uint64_t v54 = 0;
    while (v24 != v54)
    {
      if (v14[v54] != asc_18E4237E1[v54]) {
        goto LABEL_83;
      }
      if (++v54 == 3) {
        goto LABEL_88;
      }
    }
    if (!asc_18E4237E1[v24])
    {
LABEL_88:
      *(void *)&v79[0] = 0;
      uint64_t appended = CFPropertyListAppendFormatted(v7, v9, (uint64_t)"%.*ks={%@}", v16, v17, v18, v19, v20, (uint64_t)&v13[-v11]);
      if (appended) {
        goto LABEL_116;
      }
      CFTypeID v56 = &__s[strlen(__s)];
      while (!ParseCommaSeparatedNameValuePair((unsigned __int8 *)__s, (unint64_t)v56, v81, 256, 0, v80, 0, &__s))
      {
        uint64_t appended = CFPropertyListAppendFormatted(0, *(void **)&v79[0], (uint64_t)"%ks=%s", v57, v58, v59, v60, v61, (uint64_t)v81);
        if (appended) {
          goto LABEL_116;
        }
      }
      goto LABEL_80;
    }
LABEL_83:
    uint64_t v55 = 0;
    while (v24 != v55)
    {
      if (v14[v55] != asc_18E43B5BD[v55]) {
        goto LABEL_94;
      }
      if (++v55 == 3) {
        goto LABEL_99;
      }
    }
    if (asc_18E43B5BD[v24]) {
      break;
    }
LABEL_99:
    uint64_t appended = CFPropertyListAppendFormatted(v7, v9, (uint64_t)"%.*ks=[]", v16, v17, v18, v19, v20, (uint64_t)&v13[-v11]);
LABEL_79:
    if (appended) {
      goto LABEL_116;
    }
LABEL_80:
    if (v10 == a3) {
      goto LABEL_118;
    }
  }
LABEL_94:
  uint64_t v62 = 0;
  while (v24 != v62)
  {
    if (v14[v62] != aS_2[v62]) {
      goto LABEL_120;
    }
    if (++v62 == 4) {
      goto LABEL_101;
    }
  }
  if (aS_2[v24])
  {
LABEL_120:
    uint64_t v73 = 4294960540;
    goto LABEL_117;
  }
LABEL_101:
  *(void *)&v79[0] = 0;
  uint64_t appended = CFPropertyListAppendFormatted(0, v9, (uint64_t)"%.*ks=[%@]", v16, v17, v18, v19, v20, (uint64_t)&v13[-v11]);
  if (appended) {
    goto LABEL_116;
  }
  uint64_t v68 = &__s[strlen(__s)];
  while (2)
  {
    uint64_t v69 = __s;
    if (__s >= v68) {
      goto LABEL_80;
    }
    uint64_t v70 = 0;
    while (1)
    {
      int v71 = *v69;
      if (v71 == 92)
      {
        if (v69 + 1 >= v68)
        {
          CFUUIDBytes __s = v69 + 1;
          uint64_t v73 = 4294960546;
          goto LABEL_117;
        }
        LOBYTE(v71) = v69[1];
        v69 += 2;
        goto LABEL_110;
      }
      if (v71 == 44) {
        break;
      }
      ++v69;
LABEL_110:
      if (v70 <= 254) {
        v80[v70++] = v71;
      }
      if (v69 >= v68)
      {
        CFMutableDictionaryRef v72 = &v80[v70];
        goto LABEL_115;
      }
    }
    CFMutableDictionaryRef v72 = &v80[v70];
    ++v69;
LABEL_115:
    *CFMutableDictionaryRef v72 = 0;
    CFUUIDBytes __s = v69;
    uint64_t appended = CFPropertyListAppendFormatted(0, *(void **)&v79[0], (uint64_t)"%s", v63, v64, v65, v66, v67, (uint64_t)v80);
    if (!appended) {
      continue;
    }
    break;
  }
LABEL_116:
  uint64_t v73 = appended;
LABEL_117:
  CFRelease(v9);
  return v73;
}

uint64_t CFDictionaryGetEmpty()
{
  if (gCFDictionaryGetEmptyOnce != -1) {
    dispatch_once_f(&gCFDictionaryGetEmptyOnce, 0, (dispatch_function_t)_CFDictionaryGetEmptyOnce);
  }
  return gCFDictionaryEmpty;
}

CFDictionaryRef _CFDictionaryGetEmptyOnce()
{
  CFDictionaryRef result = CFDictionaryCreate(0, 0, 0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  gCFDictionaryEmpty = (uint64_t)result;
  return result;
}

const UInt8 *CFDictionaryGetOrCopyBytes(const __CFDictionary *a1, const void *a2, CFIndex *a3, UInt8 **a4, int *a5)
{
  CFIndex v18 = 0;
  if (a1 && (CFDataRef Value = (const __CFData *)CFDictionaryGetValue(a1, a2)) != 0)
  {
    CFDataRef v9 = Value;
    CFTypeID v10 = CFGetTypeID(Value);
    if (v10 == CFDataGetTypeID())
    {
      BytePtr = CFDataGetBytePtr(v9);
      CFIndex Length = CFDataGetLength(v9);
      uint64_t v13 = 0;
      CFIndex v18 = Length;
LABEL_5:
      int v14 = 0;
      goto LABEL_10;
    }
    if (v10 == CFStringGetTypeID())
    {
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      int v14 = CFStringGetOrCopyCStringUTF8((const __CFString *)v9, (const char **)&v17, &v16, (size_t *)&v18);
      if (!v14)
      {
        uint64_t v13 = v16;
        BytePtr = v17;
        goto LABEL_5;
      }
      BytePtr = 0;
      uint64_t v13 = 0;
    }
    else
    {
      BytePtr = 0;
      uint64_t v13 = 0;
      int v14 = -6732;
    }
  }
  else
  {
    BytePtr = 0;
    uint64_t v13 = 0;
    int v14 = -6727;
  }
LABEL_10:
  *a3 = v18;
  *a4 = v13;
  if (a5) {
    *a5 = v14;
  }
  return BytePtr;
}

char *CFDictionaryCopyCString(const __CFDictionary *a1, const void *a2, _DWORD *a3)
{
  int v6 = 0;
  if (!a1 || (CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a1, a2)) == 0)
  {
    CFDictionaryRef result = 0;
    int v6 = -6727;
    if (!a3) {
      return result;
    }
    goto LABEL_6;
  }
  CFDictionaryRef result = CFCopyCString(Value, &v6);
  if (a3) {
LABEL_6:
  }
    *a3 = v6;
  return result;
}

char *CFDictionaryGetCString(const __CFDictionary *a1, const void *a2, char *a3, size_t a4, int *a5)
{
  if (a1)
  {
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a1, a2);
    if (Value)
    {
      a3 = (char *)CFGetCString(Value, a3, a4);
      int v9 = 0;
      if (!a5) {
        return a3;
      }
      goto LABEL_9;
    }
  }
  if (a4) {
    *a3 = 0;
  }
  else {
    a3 = "";
  }
  int v9 = -6727;
  if (a5) {
LABEL_9:
  }
    *a5 = v9;
  return a3;
}

const char *CFDictionaryGetData(const __CFDictionary *a1, const void *a2, const char *a3, unint64_t a4, void *a5, int *a6)
{
  if (a1 && (CFStringRef Value = (__CFString *)CFDictionaryGetValue(a1, a2)) != 0)
  {
    return CFGetData(Value, a3, a4, a5, a6);
  }
  else
  {
    if (a5) {
      *a5 = 0;
    }
    if (a6) {
      *a6 = -6727;
    }
    return a3;
  }
}

uint64_t CFDictionarySetData(__CFDictionary *a1, const void *a2, UInt8 *bytes, CFIndex length)
{
  CFDataRef v6 = CFDataCreate(0, bytes, length);
  if (!v6) {
    return 4294960596;
  }
  CFDataRef v7 = v6;
  CFDictionarySetValue(a1, a2, v6);
  CFRelease(v7);
  return 0;
}

uint64_t CFDictionarySetDouble(__CFDictionary *a1, const void *a2, double a3)
{
  double valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  if (!v5) {
    return 4294960568;
  }
  CFNumberRef v6 = v5;
  CFDictionarySetValue(a1, a2, v5);
  CFRelease(v6);
  return 0;
}

unint64_t CFDictionaryGetHardwareAddress(const __CFDictionary *a1, const void *a2, char *a3, size_t a4, int *a5)
{
  if (a1 && (CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a1, a2)) != 0)
  {
    return CFGetHardwareAddress(Value, a3, a4, a5);
  }
  else
  {
    if (a3) {
      bzero(a3, a4);
    }
    if (a5) {
      *a5 = -6727;
    }
    return 0;
  }
}

uint64_t CFDictionarySetHardwareAddress(__CFDictionary *a1, const void *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (a4 != 8 && a4 != 6) {
    return 4294960553;
  }
  CFDataRef v4 = &a3[a4];
  CFNumberRef v5 = v9;
  do
  {
    if (v5 == v9)
    {
      CFNumberRef v6 = v9;
    }
    else
    {
      *CFNumberRef v5 = 58;
      CFNumberRef v6 = v5 + 1;
    }
    unsigned int v7 = *a3++;
    char *v6 = a0123456789abcd_0[(unint64_t)v7 >> 4];
    CFNumberRef v5 = v6 + 2;
    v6[1] = a0123456789abcd_0[v7 & 0xF];
  }
  while (a3 < v4);
  *CFNumberRef v5 = 0;
  return CFDictionarySetCString(a1, a2, v9, -1);
}

uint64_t CFDictionarySetInt64(__CFDictionary *a1, const void *a2, uint64_t a3)
{
  CFNumberRef Int64 = CFNumberCreateInt64(a3);
  if (!Int64) {
    return 4294960568;
  }
  CFNumberRef v6 = Int64;
  CFDictionarySetValue(a1, a2, Int64);
  CFRelease(v6);
  return 0;
}

uint64_t CFDictionarySetNumber(__CFDictionary *a1, const void *a2, CFNumberType theType, void *valuePtr)
{
  CFNumberRef v6 = CFNumberCreate(0, theType, valuePtr);
  if (!v6) {
    return 4294960596;
  }
  CFNumberRef v7 = v6;
  CFDictionarySetValue(a1, a2, v6);
  CFRelease(v7);
  return 0;
}

uint64_t CFDictionaryGetUUIDEx(const __CFDictionary *a1, const void *a2, _OWORD *a3, uint64_t a4)
{
  if (!a1) {
    return 4294960591;
  }
  CFStringRef Value = (__CFString *)CFDictionaryGetValue(a1, a2);
  if (!Value) {
    return 4294960569;
  }
  return CFGetUUIDEx(Value, a3, a4);
}

uint64_t CFDictionarySetUUIDString(__CFDictionary *a1, const void *a2, unsigned char *a3, uint64_t a4, long long *a5, char a6)
{
  unsigned int v11 = 0;
  CFStringRef v8 = CFCreateUUIDString(a3, a4, a5, a6, &v11);
  if (v8)
  {
    CFStringRef v9 = v8;
    CFDictionarySetValue(a1, a2, v8);
    CFRelease(v9);
  }
  return v11;
}

CFNumberRef CFNumberGetObject(unsigned int a1)
{
  if (a1 > 0x1F) {
    return 0;
  }
  pthread_mutex_lock(&gCFNumberGetObjectLock);
  CFNumberRef v2 = (CFNumberRef)gCFNumberArray[a1];
  if (!v2)
  {
    CFNumberRef Int64 = CFNumberCreateInt64(a1);
    CFNumberRef v2 = Int64;
    if (Int64) {
      gCFNumberArray[a1] = Int64;
    }
  }
  pthread_mutex_unlock(&gCFNumberGetObjectLock);
  return v2;
}

void CFSetApplyBlock(const __CFSet *a1, void *context)
{
}

uint64_t _CFSetApplyBlockApplier(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

uint64_t CFStringAppendF(__CFString *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return CFStringAppendV(a1, a2, (uint64_t)&a9);
}

uint64_t CFStringAppendV(__CFString *a1, uint64_t a2, uint64_t a3)
{
  cStr = 0;
  if ((VASPrintF((void **)&cStr, a2, a3) & 0x80000000) != 0) {
    return 4294960596;
  }
  CFDataRef v4 = cStr;
  CFStringAppendCString(a1, cStr, 0x8000100u);
  free(v4);
  return 0;
}

uint64_t CFRunLoopRunEx(CFTimeInterval a1)
{
  double Current = CFRunLoopGetCurrent();
  memset(&v7, 0, sizeof(v7));
  uint64_t v3 = CFRunLoopSourceCreate(0, 0, &v7);
  CFDataRef v4 = (CFRunLoopMode *)MEMORY[0x1E4F1D410];
  if (v3) {
    CFRunLoopAddSource(Current, v3, (CFRunLoopMode)*MEMORY[0x1E4F1D410]);
  }
  if (a1 < 0.0)
  {
    CFRunLoopRun();
    uint64_t v5 = 2;
    if (!v3) {
      return v5;
    }
    goto LABEL_7;
  }
  uint64_t v5 = CFRunLoopRunFor(a1);
  if (v3)
  {
LABEL_7:
    CFRunLoopRemoveSource(Current, v3, *v4);
    CFRelease(v3);
  }
  return v5;
}

uint64_t CFRunLoopRunFor(CFTimeInterval a1)
{
  double Current = CFAbsoluteTimeGetCurrent();
  CFStringRef v3 = (const __CFString *)*MEMORY[0x1E4F1D418];
  uint64_t result = CFRunLoopRunInMode((CFRunLoopMode)*MEMORY[0x1E4F1D418], a1, 0);
  if (result == 1)
  {
    double v5 = Current + a1;
    while (1)
    {
      double v6 = v5 - CFAbsoluteTimeGetCurrent();
      if (v6 < 0.0) {
        break;
      }
      usleep(0x4E20u);
      uint64_t result = CFRunLoopRunInMode(v3, v6, 0);
      if (result != 1) {
        return result;
      }
    }
    return 3;
  }
  return result;
}

CFComparisonResult CFSortLocalizedStandardCompare(const __CFString *a1, const __CFString *a2)
{
  return CFStringCompare(a1, a2, 0x361uLL);
}

uint64_t MapCFStringToValue(CFTypeRef cf1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v16 = (const void **)&a9;
  while (1)
  {
    unsigned int v11 = v16;
    uint64_t v17 = (unsigned int *)(v16 + 1);
    uint64_t v12 = *v11;
    if (!*v11) {
      break;
    }
    uint64_t v13 = v17;
    uint64_t v16 = (const void **)(v17 + 2);
    uint64_t v14 = *v13;
    if (CFEqual(cf1, v12)) {
      return v14;
    }
  }
  return a2;
}

void *NSArrayGetNSNumberAtIndex(void *result, uint64_t a2, int *a3)
{
  if (result)
  {
    uint64_t result = (void *)[result objectAtIndexedSubscript:a2];
    if (result)
    {
      CFDataRef v4 = result;
      objc_opt_class();
      char isKindOfClass = objc_opt_isKindOfClass();
      BOOL v6 = (isKindOfClass & 1) == 0;
      if (isKindOfClass) {
        uint64_t result = v4;
      }
      else {
        uint64_t result = 0;
      }
      if (v6) {
        int v7 = -6756;
      }
      else {
        int v7 = 0;
      }
    }
    else
    {
      int v7 = -6727;
    }
  }
  else
  {
    int v7 = -6705;
  }
  if (a3) {
    *a3 = v7;
  }
  return result;
}

void *NSDictionaryGetNSNumber(void *result, uint64_t a2, int *a3)
{
  if (result)
  {
    uint64_t result = (void *)[result objectForKeyedSubscript:a2];
    if (result)
    {
      CFDataRef v4 = result;
      objc_opt_class();
      char isKindOfClass = objc_opt_isKindOfClass();
      BOOL v6 = (isKindOfClass & 1) == 0;
      if (isKindOfClass) {
        uint64_t result = v4;
      }
      else {
        uint64_t result = 0;
      }
      if (v6) {
        int v7 = -6756;
      }
      else {
        int v7 = 0;
      }
    }
    else
    {
      int v7 = -6727;
    }
  }
  else
  {
    int v7 = -6705;
  }
  if (a3) {
    *a3 = v7;
  }
  return result;
}

uint64_t NSGetNSNumber(uint64_t result, int *a2)
{
  if (!result)
  {
    int v6 = -6705;
    if (!a2) {
      return result;
    }
    goto LABEL_9;
  }
  uint64_t v3 = result;
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  BOOL v5 = (isKindOfClass & 1) == 0;
  if (isKindOfClass) {
    uint64_t result = v3;
  }
  else {
    uint64_t result = 0;
  }
  if (v5) {
    int v6 = -6756;
  }
  else {
    int v6 = 0;
  }
  if (a2) {
LABEL_9:
  }
    *a2 = v6;
  return result;
}

double CFDictionaryGetCGSize(const __CFDictionary *a1, const void *a2, int *a3)
{
  v12[0] = ((double (__cdecl *)())getCGSizeZero[0])();
  v12[1] = v6;
  CFStringRef Value = CFDictionaryGetValue(a1, a2);
  if (Value)
  {
    uint64_t v8 = (uint64_t)Value;
    CFTypeID v9 = CFGetTypeID(Value);
    if (v9 == CFDictionaryGetTypeID())
    {
      if (softLinkCGSizeMakeWithDictionaryRepresentation(v8, (uint64_t)v12)) {
        int v10 = 0;
      }
      else {
        int v10 = -6700;
      }
    }
    else
    {
      int v10 = -6756;
    }
  }
  else
  {
    int v10 = -6727;
  }
  if (a3) {
    *a3 = v10;
  }
  return *(double *)v12;
}

uint64_t initCGSizeMakeWithDictionaryRepresentation(uint64_t a1, uint64_t a2)
{
  if (CoreGraphicsLibrary_sOnce_398 != -1) {
    dispatch_once(&CoreGraphicsLibrary_sOnce_398, &__block_literal_global_399);
  }
  CFDataRef v4 = (uint64_t (*)())dlsym((void *)CoreGraphicsLibrary_sLib_400, "CGSizeMakeWithDictionaryRepresentation");
  softLinkCGSizeMakeWithDictionaryRepresentation = v4;
  return ((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2);
}

void *__CoreGraphicsLibrary_block_invoke_406()
{
  uint64_t result = dlopen("/System/Library/Frameworks/CoreGraphics.framework/CoreGraphics", 2);
  CoreGraphicsLibrary_sLib_400 = (uint64_t)result;
  return result;
}

double initValCGSizeZero()
{
  if (CoreGraphicsLibrary_sOnce_398 != -1) {
    dispatch_once(&CoreGraphicsLibrary_sOnce_398, &__block_literal_global_399);
  }
  uint64_t v0 = (long long *)dlsym((void *)CoreGraphicsLibrary_sLib_400, "CGSizeZero");
  if (v0) {
    constantValCGSizeZero = *v0;
  }
  getCGSizeZero[0] = (uint64_t (*)())CGSizeZeroFunction;
  return *(double *)&constantValCGSizeZero;
}

double CGSizeZeroFunction()
{
  return *(double *)&constantValCGSizeZero;
}

uint64_t CFDictionarySetCGSize(__CFDictionary *a1, const void *a2, double a3, double a4)
{
  uint64_t v6 = (const void *)((uint64_t (*)(double, double))softLinkCGSizeCreateDictionaryRepresentation[0])(a3, a4);
  if (!v6) {
    return 4294960596;
  }
  int v7 = v6;
  CFDictionarySetValue(a1, a2, v6);
  CFRelease(v7);
  return 0;
}

uint64_t initCGSizeCreateDictionaryRepresentation(double a1, double a2)
{
  if (CoreGraphicsLibrary_sOnce_398 != -1) {
    dispatch_once(&CoreGraphicsLibrary_sOnce_398, &__block_literal_global_399);
  }
  CFDataRef v4 = (uint64_t (*)())dlsym((void *)CoreGraphicsLibrary_sLib_400, "CGSizeCreateDictionaryRepresentation");
  softLinkCGSizeCreateDictionaryRepresentation[0] = v4;
  v5.n128_f64[0] = a1;
  v6.n128_f64[0] = a2;
  return ((uint64_t (*)(__n128, __n128))v4)(v5, v6);
}

double CFDictionaryGetCGRect(const __CFDictionary *a1, const void *a2, int *a3)
{
  v14[0] = ((double (__cdecl *)())getCGRectZero[0])();
  v14[1] = v6;
  v14[2] = v7;
  v14[3] = v8;
  CFStringRef Value = CFDictionaryGetValue(a1, a2);
  if (Value)
  {
    uint64_t v10 = (uint64_t)Value;
    CFTypeID v11 = CFGetTypeID(Value);
    if (v11 == CFDictionaryGetTypeID())
    {
      if (((unsigned int (*)(uint64_t, uint64_t))softLinkCGRectMakeWithDictionaryRepresentation[0])(v10, (uint64_t)v14))
      {
        int v12 = 0;
      }
      else
      {
        int v12 = -6700;
      }
    }
    else
    {
      int v12 = -6756;
    }
  }
  else
  {
    int v12 = -6727;
  }
  if (a3) {
    *a3 = v12;
  }
  return *(double *)v14;
}

uint64_t initCGRectMakeWithDictionaryRepresentation(uint64_t a1, uint64_t a2)
{
  if (CoreGraphicsLibrary_sOnce_398 != -1) {
    dispatch_once(&CoreGraphicsLibrary_sOnce_398, &__block_literal_global_399);
  }
  CFDataRef v4 = (uint64_t (*)())dlsym((void *)CoreGraphicsLibrary_sLib_400, "CGRectMakeWithDictionaryRepresentation");
  softLinkCGRectMakeWithDictionaryRepresentation[0] = v4;
  return ((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2);
}

double initValCGRectZero()
{
  if (CoreGraphicsLibrary_sOnce_398 != -1) {
    dispatch_once(&CoreGraphicsLibrary_sOnce_398, &__block_literal_global_399);
  }
  uint64_t v0 = (long long *)dlsym((void *)CoreGraphicsLibrary_sLib_400, "CGRectZero");
  if (v0)
  {
    long long v1 = v0[1];
    constantValCGRectZero = *v0;
    *(_OWORD *)&qword_1E91CF2C8 = v1;
  }
  getCGRectZero[0] = (uint64_t (*)())CGRectZeroFunction;
  return *(double *)&constantValCGRectZero;
}

double CGRectZeroFunction()
{
  return *(double *)&constantValCGRectZero;
}

uint64_t CFDictionarySetCGRect(__CFDictionary *a1, const void *a2, double a3, double a4, double a5, double a6)
{
  uint64_t v8 = (const void *)((uint64_t (*)(double, double, double, double))softLinkCGRectCreateDictionaryRepresentation[0])(a3, a4, a5, a6);
  if (!v8) {
    return 4294960596;
  }
  CFTypeID v9 = v8;
  CFDictionarySetValue(a1, a2, v8);
  CFRelease(v9);
  return 0;
}

uint64_t initCGRectCreateDictionaryRepresentation(double a1, double a2, double a3, double a4)
{
  if (CoreGraphicsLibrary_sOnce_398 != -1) {
    dispatch_once(&CoreGraphicsLibrary_sOnce_398, &__block_literal_global_399);
  }
  uint64_t v8 = (uint64_t (*)())dlsym((void *)CoreGraphicsLibrary_sLib_400, "CGRectCreateDictionaryRepresentation");
  softLinkCGRectCreateDictionaryRepresentation[0] = v8;
  v9.n128_f64[0] = a1;
  v10.n128_f64[0] = a2;
  v11.n128_f64[0] = a3;
  v12.n128_f64[0] = a4;
  return ((uint64_t (*)(__n128, __n128, __n128, __n128))v8)(v9, v10, v11, v12);
}

uint64_t CGColorSpaceGetGray()
{
  if (CGColorSpaceGetGray_sOnce != -1) {
    dispatch_once_f(&CGColorSpaceGetGray_sOnce, &CGColorSpaceGetGray_sColorSpace, (dispatch_function_t)_CGColorSpaceGetGray);
  }
  return CGColorSpaceGetGray_sColorSpace;
}

uint64_t _CGColorSpaceGetGray(uint64_t *a1)
{
  uint64_t result = softLinkCGColorSpaceCreateDeviceGray[0]();
  *a1 = result;
  return result;
}

uint64_t initCGColorSpaceCreateDeviceGray()
{
  if (CoreGraphicsLibrary_sOnce_398 != -1) {
    dispatch_once(&CoreGraphicsLibrary_sOnce_398, &__block_literal_global_399);
  }
  uint64_t v0 = (uint64_t (*)())dlsym((void *)CoreGraphicsLibrary_sLib_400, "CGColorSpaceCreateDeviceGray");
  softLinkCGColorSpaceCreateDeviceGray[0] = v0;
  return v0();
}

uint64_t CGColorSpaceGetRGB()
{
  if (CGColorSpaceGetRGB_sOnce != -1) {
    dispatch_once_f(&CGColorSpaceGetRGB_sOnce, &CGColorSpaceGetRGB_sColorSpace, (dispatch_function_t)_CGColorSpaceGetRGB);
  }
  return CGColorSpaceGetRGB_sColorSpace;
}

uint64_t _CGColorSpaceGetRGB(uint64_t *a1)
{
  uint64_t result = softLinkCGColorSpaceCreateDeviceRGB_414[0]();
  *a1 = result;
  return result;
}

uint64_t initCGColorSpaceCreateDeviceRGB_416()
{
  if (CoreGraphicsLibrary_sOnce_398 != -1) {
    dispatch_once(&CoreGraphicsLibrary_sOnce_398, &__block_literal_global_399);
  }
  uint64_t v0 = (uint64_t (*)())dlsym((void *)CoreGraphicsLibrary_sLib_400, "CGColorSpaceCreateDeviceRGB");
  softLinkCGColorSpaceCreateDeviceRGB_414[0] = v0;
  return v0();
}

uint64_t CGColorCreateWithRGB(float a1, float a2, float a3, float a4)
{
  v5[4] = *(double *)MEMORY[0x1E4F143B8];
  v5[0] = a1;
  v5[1] = a2;
  v5[2] = a3;
  _OWORD v5[3] = a4;
  if (CGColorSpaceGetRGB_sOnce != -1) {
    dispatch_once_f(&CGColorSpaceGetRGB_sOnce, &CGColorSpaceGetRGB_sColorSpace, (dispatch_function_t)_CGColorSpaceGetRGB);
  }
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkCGColorCreate[0])(CGColorSpaceGetRGB_sColorSpace, (uint64_t)v5);
}

uint64_t initCGColorCreate(uint64_t a1, uint64_t a2)
{
  if (CoreGraphicsLibrary_sOnce_398 != -1) {
    dispatch_once(&CoreGraphicsLibrary_sOnce_398, &__block_literal_global_399);
  }
  CFDataRef v4 = (uint64_t (*)())dlsym((void *)CoreGraphicsLibrary_sLib_400, "CGColorCreate");
  softLinkCGColorCreate[0] = v4;
  return ((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2);
}

uint64_t _CGColorCreateWithRGB(uint64_t a1)
{
  uint64_t result = CGColorCreateWithRGB(*(float *)a1, *(float *)(a1 + 4), *(float *)(a1 + 8), *(float *)(a1 + 12));
  **(void **)(a1 + 16) = result;
  return result;
}

uint64_t CGColorGetBlack()
{
  if (CGColorGetBlack_sOnce != -1) {
    dispatch_once_f(&CGColorGetBlack_sOnce, &CGColorGetBlack_sContext, (dispatch_function_t)_CGColorCreateWithRGB);
  }
  return CGColorGetBlack_sColor;
}

uint64_t initCGBitmapContextCreateImage(uint64_t a1)
{
  if (CoreGraphicsLibrary_sOnce_398 != -1) {
    dispatch_once(&CoreGraphicsLibrary_sOnce_398, &__block_literal_global_399);
  }
  CFNumberRef v2 = (uint64_t (*)())dlsym((void *)CoreGraphicsLibrary_sLib_400, "CGBitmapContextCreateImage");
  softLinkCGBitmapContextCreateImage[0] = v2;
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

uint64_t initCGContextDrawImage(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  if (CoreGraphicsLibrary_sOnce_398 != -1) {
    dispatch_once(&CoreGraphicsLibrary_sOnce_398, &__block_literal_global_399);
  }
  __n128 v12 = (uint64_t (*)())dlsym((void *)CoreGraphicsLibrary_sLib_400, "CGContextDrawImage");
  softLinkCGContextDrawImage[0] = v12;
  v13.n128_f64[0] = a3;
  v14.n128_f64[0] = a4;
  v15.n128_f64[0] = a5;
  v16.n128_f64[0] = a6;
  return ((uint64_t (*)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))v12)(a1, a2, v13, v14, v15, v16);
}

uint64_t initCGBitmapContextCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (CoreGraphicsLibrary_sOnce_398 != -1) {
    dispatch_once(&CoreGraphicsLibrary_sOnce_398, &__block_literal_global_399);
  }
  __n128 v14 = (uint64_t (*)())dlsym((void *)CoreGraphicsLibrary_sLib_400, "CGBitmapContextCreate");
  softLinkCGBitmapContextCreate[0] = v14;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v14)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t initCGImageGetBitmapInfo(uint64_t a1)
{
  if (CoreGraphicsLibrary_sOnce_398 != -1) {
    dispatch_once(&CoreGraphicsLibrary_sOnce_398, &__block_literal_global_399);
  }
  CFNumberRef v2 = (uint64_t (*)())dlsym((void *)CoreGraphicsLibrary_sLib_400, "CGImageGetBitmapInfo");
  softLinkCGImageGetBitmapInfo[0] = v2;
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

uint64_t initCGImageGetColorSpace(uint64_t a1)
{
  if (CoreGraphicsLibrary_sOnce_398 != -1) {
    dispatch_once(&CoreGraphicsLibrary_sOnce_398, &__block_literal_global_399);
  }
  CFNumberRef v2 = (uint64_t (*)())dlsym((void *)CoreGraphicsLibrary_sLib_400, "CGImageGetColorSpace");
  softLinkCGImageGetColorSpace[0] = v2;
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

uint64_t initCGImageGetBitsPerComponent(uint64_t a1)
{
  if (CoreGraphicsLibrary_sOnce_398 != -1) {
    dispatch_once(&CoreGraphicsLibrary_sOnce_398, &__block_literal_global_399);
  }
  CFNumberRef v2 = (uint64_t (*)())dlsym((void *)CoreGraphicsLibrary_sLib_400, "CGImageGetBitsPerComponent");
  softLinkCGImageGetBitsPerComponent[0] = v2;
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

uint64_t initCGBitmapGetAlignedBytesPerRow(uint64_t a1)
{
  if (CoreGraphicsLibrary_sOnce_398 != -1) {
    dispatch_once(&CoreGraphicsLibrary_sOnce_398, &__block_literal_global_399);
  }
  CFNumberRef v2 = (uint64_t (*)())dlsym((void *)CoreGraphicsLibrary_sLib_400, "CGBitmapGetAlignedBytesPerRow");
  softLinkCGBitmapGetAlignedBytesPerRow[0] = v2;
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

uint64_t initCGImageGetBitsPerPixel(uint64_t a1)
{
  if (CoreGraphicsLibrary_sOnce_398 != -1) {
    dispatch_once(&CoreGraphicsLibrary_sOnce_398, &__block_literal_global_399);
  }
  CFNumberRef v2 = (uint64_t (*)())dlsym((void *)CoreGraphicsLibrary_sLib_400, "CGImageGetBitsPerPixel");
  softLinkCGImageGetBitsPerPixel[0] = v2;
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

CFMutableDataRef CGImageCreateData(uint64_t a1, uint64_t a2, int *a3)
{
  CFMutableDataRef Mutable = CFDataCreateMutable(0, 0);
  CFMutableDataRef v7 = Mutable;
  if (Mutable)
  {
    uint64_t v8 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkCGImageDestinationCreateWithData[0])((uint64_t)Mutable, a2, 1, 0);
    if (v8)
    {
      __n128 v9 = (const void *)v8;
      ((void (*)(uint64_t, uint64_t, uint64_t))softLinkCGImageDestinationAddImage_429[0])(v8, a1, 0);
      char v10 = ((uint64_t (*)(uint64_t))softLinkCGImageDestinationFinalize_430[0])((uint64_t)v9);
      CFRelease(v9);
      if (v10)
      {
        int v11 = 0;
        goto LABEL_5;
      }
      int v11 = -6747;
    }
    else
    {
      int v11 = -6732;
    }
    CFRelease(v7);
    CFMutableDataRef v7 = 0;
  }
  else
  {
    int v11 = -6728;
  }
LABEL_5:
  if (a3) {
    *a3 = v11;
  }
  return v7;
}

uint64_t initCGImageDestinationFinalize_432(uint64_t a1)
{
  if (ImageIOLibrary_sOnce_433 != -1) {
    dispatch_once(&ImageIOLibrary_sOnce_433, &__block_literal_global_29);
  }
  CFNumberRef v2 = (uint64_t (*)())dlsym((void *)ImageIOLibrary_sLib_434, "CGImageDestinationFinalize");
  softLinkCGImageDestinationFinalize_430[0] = v2;
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

void *__ImageIOLibrary_block_invoke_437()
{
  uint64_t result = dlopen("/System/Library/Frameworks/ImageIO.framework/ImageIO", 2);
  ImageIOLibrary_sLib_434 = (uint64_t)result;
  return result;
}

uint64_t initCGImageDestinationAddImage_440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (ImageIOLibrary_sOnce_433 != -1) {
    dispatch_once(&ImageIOLibrary_sOnce_433, &__block_literal_global_29);
  }
  uint64_t v6 = (uint64_t (*)())dlsym((void *)ImageIOLibrary_sLib_434, "CGImageDestinationAddImage");
  softLinkCGImageDestinationAddImage_429[0] = v6;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(a1, a2, a3);
}

uint64_t initCGImageDestinationCreateWithData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (ImageIOLibrary_sOnce_433 != -1) {
    dispatch_once(&ImageIOLibrary_sOnce_433, &__block_literal_global_29);
  }
  uint64_t v8 = (uint64_t (*)())dlsym((void *)ImageIOLibrary_sLib_434, "CGImageDestinationCreateWithData");
  softLinkCGImageDestinationCreateWithData[0] = v8;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v8)(a1, a2, a3, a4);
}

uint64_t CGImageCreateWithData(uint64_t a1, int *a2)
{
  uint64_t v3 = ((uint64_t (*)(uint64_t, uint64_t))softLinkCGImageSourceCreateWithData[0])(a1, 0);
  if (!v3)
  {
    uint64_t v5 = 0;
    int v6 = -6700;
    if (!a2) {
      return v5;
    }
    goto LABEL_7;
  }
  CFDataRef v4 = (const void *)v3;
  if (((uint64_t (*)(uint64_t))softLinkCGImageSourceGetCount[0])(v3))
  {
    uint64_t v5 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkCGImageSourceCreateImageAtIndex[0])((uint64_t)v4, 0, 0);
    if (v5) {
      int v6 = 0;
    }
    else {
      int v6 = -6700;
    }
  }
  else
  {
    uint64_t v5 = 0;
    int v6 = -6764;
  }
  CFRelease(v4);
  if (a2) {
LABEL_7:
  }
    *a2 = v6;
  return v5;
}

uint64_t initCGImageSourceCreateImageAtIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (ImageIOLibrary_sOnce_433 != -1) {
    dispatch_once(&ImageIOLibrary_sOnce_433, &__block_literal_global_29);
  }
  int v6 = (uint64_t (*)())dlsym((void *)ImageIOLibrary_sLib_434, "CGImageSourceCreateImageAtIndex");
  softLinkCGImageSourceCreateImageAtIndex[0] = v6;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(a1, a2, a3);
}

uint64_t initCGImageSourceGetCount(uint64_t a1)
{
  if (ImageIOLibrary_sOnce_433 != -1) {
    dispatch_once(&ImageIOLibrary_sOnce_433, &__block_literal_global_29);
  }
  CFNumberRef v2 = (uint64_t (*)())dlsym((void *)ImageIOLibrary_sLib_434, "CGImageSourceGetCount");
  softLinkCGImageSourceGetCount[0] = v2;
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

uint64_t initCGImageSourceCreateWithData(uint64_t a1, uint64_t a2)
{
  if (ImageIOLibrary_sOnce_433 != -1) {
    dispatch_once(&ImageIOLibrary_sOnce_433, &__block_literal_global_29);
  }
  CFDataRef v4 = (uint64_t (*)())dlsym((void *)ImageIOLibrary_sLib_434, "CGImageSourceCreateWithData");
  softLinkCGImageSourceCreateWithData[0] = v4;
  return ((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2);
}

CFDictionaryRef CreateScaledImageDataWithData(const void *a1, int *a2, double a3, double a4)
{
  keys[1] = *(void **)MEMORY[0x1E4F143B8];
  CFTypeRef v38 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v36 = 0;
  CFTypeRef v37 = 0;
  memset(length, 0, sizeof(length));
  keys[0] = (void *)getkFigJPEGHighSpeedDecode[0]();
  values = (void *)*MEMORY[0x1E4F1CFD0];
  CFDictionaryRef Data = CFDictionaryCreate(0, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Data)
  {
LABEL_51:
    int IOSurfaceFromJPEG = -6728;
    goto LABEL_18;
  }
  int IOSurfaceFromJPEG = softLinkFigCreateIOSurfaceFromJPEG((uint64_t)a1, (uint64_t)Data, (uint64_t)&cf);
  CFRelease(Data);
  if (IOSurfaceFromJPEG) {
    goto LABEL_16;
  }
  double v10 = (double)(unint64_t)((uint64_t (*)(uint64_t))softLinkIOSurfaceGetWidth[0])((uint64_t)cf);
  double v11 = (double)(unint64_t)((uint64_t (*)(uint64_t))softLinkIOSurfaceGetHeight[0])((uint64_t)cf);
  double v12 = v11;
  double v13 = v10;
  if (a3 < v10)
  {
    double v13 = a3;
    double v12 = a3 * v11 / v10;
  }
  if (v12 > a4)
  {
    double v12 = a4;
    double v13 = a4 * v10 / v11;
  }
  if (v13 == v10 && v12 == v11)
  {
    CFRelease(cf);
    CFRetain(a1);
    int IOSurfaceFromJPEG = 0;
    CFDictionaryRef Data = (CFDictionaryRef)a1;
    goto LABEL_18;
  }
  int IOSurfaceFromJPEG = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkCVPixelBufferCreateWithIOSurface[0])(0, (uint64_t)cf, 0, (uint64_t)&v38);
  CFRelease(cf);
  if (IOSurfaceFromJPEG)
  {
LABEL_16:
    CFDictionaryRef Data = 0;
    goto LABEL_18;
  }
  int v15 = ((uint64_t (*)(uint64_t, uint64_t))softLinkVTPixelTransferSessionCreate[0])(0, (uint64_t)&v36);
  if (v15
    || (int v15 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkFigCreateIOSurfaceBackedCVPixelBuffer[0])((int)v13, (int)v12, 2037741158, (uint64_t)&v37)) != 0|| (int v15 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkVTPixelTransferSessionTransferImage[0])((uint64_t)v36, (uint64_t)v38, (uint64_t)v37)) != 0)
  {
    int IOSurfaceFromJPEG = v15;
    goto LABEL_16;
  }
  CFRelease(v38);
  CFTypeRef v38 = 0;
  CFRelease(v36);
  CFTypeRef v36 = 0;
  CFDictionaryRef v33 = (const __CFDictionary *)((uint64_t (*)(uint64_t))softLinkCVPixelBufferGetIOSurface[0])((uint64_t)v37);
  CFDictionaryRef Data = v33;
  if (v33)
  {
    CFRetain(v33);
    CFRelease(v37);
    CFTypeRef v37 = 0;
    memset(length, 0, sizeof(length));
    int IOSurfaceFromJPEG = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkFigAspenCreateJPEGFromIOSurface[0])((uint64_t)Data, 0, (uint64_t)&length[1], (uint64_t)length);
    CFRelease(Data);
    if (IOSurfaceFromJPEG) {
      goto LABEL_16;
    }
    ((void (*)(uint64_t, uint64_t, uint64_t))softLinkIOSurfaceLock_446[0])(*(uint64_t *)&length[1], 1, 0);
    uint64_t v34 = (const UInt8 *)((uint64_t (*)(uint64_t))softLinkIOSurfaceGetBaseAddress_447[0])(*(uint64_t *)&length[1]);
    CFDictionaryRef Data = CFDataCreate(0, v34, length[0]);
    ((void (*)(uint64_t, uint64_t, uint64_t))softLinkIOSurfaceUnlock_448[0])(*(uint64_t *)&length[1], 1, 0);
    CFRelease(*(CFTypeRef *)&length[1]);
    if (Data)
    {
      int IOSurfaceFromJPEG = 0;
      goto LABEL_18;
    }
    goto LABEL_51;
  }
  int IOSurfaceFromJPEG = -6700;
LABEL_18:
  if (v37) {
    CFRelease(v37);
  }
  if (v36) {
    CFRelease(v36);
  }
  if (v38) {
    CFRelease(v38);
  }
  if (a2) {
    *a2 = IOSurfaceFromJPEG;
  }
  if (!Data)
  {
    LODWORD(cf) = 0;
    uint64_t v16 = CGImageCreateWithData((uint64_t)a1, (int *)&cf);
    CFDictionaryRef Data = (CFDictionaryRef)v16;
    if (v16)
    {
      double v17 = (double)(unint64_t)((uint64_t (*)(uint64_t))softLinkCGImageGetWidth[0])(v16);
      double v18 = (double)(unint64_t)((uint64_t (*)(uint64_t))softLinkCGImageGetHeight[0])((uint64_t)Data);
      double v19 = v18;
      double v20 = v17;
      if (a3 < v17)
      {
        double v20 = a3;
        double v19 = a3 * v18 / v17;
      }
      if (v19 > a4)
      {
        double v19 = a4;
        double v20 = a4 * v17 / v18;
      }
      if (v20 != v17 || v19 != v18)
      {
        unint64_t v22 = ((uint64_t (*)(uint64_t))softLinkCGImageGetBitsPerPixel[0])((uint64_t)Data);
        uint64_t v23 = ((uint64_t (*)(uint64_t))softLinkCGBitmapGetAlignedBytesPerRow[0])((unint64_t)((v20 * (double)v22 + 7.0) * 0.125));
        uint64_t v24 = ((uint64_t (*)(uint64_t))softLinkCGImageGetBitsPerComponent[0])((uint64_t)Data);
        uint64_t v25 = ((uint64_t (*)(uint64_t))softLinkCGImageGetColorSpace[0])((uint64_t)Data);
        uint64_t v26 = ((uint64_t (*)(uint64_t))softLinkCGImageGetBitmapInfo[0])((uint64_t)Data);
        uint64_t v27 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkCGBitmapContextCreate[0])(0, (unint64_t)v20, (unint64_t)v19, v24, v23, v25, v26);
        if (v27)
        {
          uint64_t v28 = (const void *)v27;
          ((void (*)(uint64_t, uint64_t, double, double, double, double))softLinkCGContextDrawImage[0])(v27, (uint64_t)Data, 0.0, 0.0, v20, v19);
          uint64_t v29 = (const void *)((uint64_t (*)(uint64_t))softLinkCGBitmapContextCreateImage[0])((uint64_t)v28);
          CFRelease(v28);
          if (v29) {
            int v30 = 0;
          }
          else {
            int v30 = -6700;
          }
          LODWORD(cf) = v30;
          CFRelease(Data);
          if (v29)
          {
            uint64_t v31 = getkUTTypeJPEG[0]();
            CFDictionaryRef Data = CGImageCreateData((uint64_t)v29, v31, (int *)&cf);
            CFRelease(v29);
            if (!a2) {
              return Data;
            }
            goto LABEL_45;
          }
        }
        else
        {
          LODWORD(cf) = -6700;
          CFRelease(Data);
        }
        CFDictionaryRef Data = 0;
        if (!a2) {
          return Data;
        }
LABEL_45:
        *a2 = (int)cf;
        return Data;
      }
      CFRelease(Data);
      CFRetain(a1);
      LODWORD(cf) = 0;
      CFDictionaryRef Data = (CFDictionaryRef)a1;
    }
    if (a2) {
      goto LABEL_45;
    }
  }
  return Data;
}

uint64_t initValkUTTypeJPEG()
{
  if (MobileCoreServicesLibrary_sOnce != -1) {
    dispatch_once(&MobileCoreServicesLibrary_sOnce, &__block_literal_global_41);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)MobileCoreServicesLibrary_sLib, "kUTTypeJPEG");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkUTTypeJPEG = result;
  }
  else
  {
    uint64_t result = constantValkUTTypeJPEG;
  }
  getkUTTypeJPEG[0] = kUTTypeJPEGFunction;
  return result;
}

uint64_t kUTTypeJPEGFunction()
{
  return constantValkUTTypeJPEG;
}

void *__MobileCoreServicesLibrary_block_invoke()
{
  uint64_t result = dlopen("/System/Library/Frameworks/MobileCoreServices.framework/MobileCoreServices", 2);
  MobileCoreServicesLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t initCGImageGetHeight(uint64_t a1)
{
  if (CoreGraphicsLibrary_sOnce_398 != -1) {
    dispatch_once(&CoreGraphicsLibrary_sOnce_398, &__block_literal_global_399);
  }
  CFNumberRef v2 = (uint64_t (*)())dlsym((void *)CoreGraphicsLibrary_sLib_400, "CGImageGetHeight");
  softLinkCGImageGetHeight[0] = v2;
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

uint64_t initCGImageGetWidth(uint64_t a1)
{
  if (CoreGraphicsLibrary_sOnce_398 != -1) {
    dispatch_once(&CoreGraphicsLibrary_sOnce_398, &__block_literal_global_399);
  }
  CFNumberRef v2 = (uint64_t (*)())dlsym((void *)CoreGraphicsLibrary_sLib_400, "CGImageGetWidth");
  softLinkCGImageGetWidth[0] = v2;
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

uint64_t initIOSurfaceUnlock_454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (IOSurfaceLibrary_sOnce_455 != -1) {
    dispatch_once(&IOSurfaceLibrary_sOnce_455, &__block_literal_global_52);
  }
  int v6 = (uint64_t (*)())dlsym((void *)IOSurfaceLibrary_sLib_456, "IOSurfaceUnlock");
  softLinkIOSurfaceUnlock_448[0] = v6;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(a1, a2, a3);
}

void *__IOSurfaceLibrary_block_invoke_459()
{
  uint64_t result = dlopen("/System/Library/PrivateFrameworks/IOSurface.framework/IOSurface", 2);
  IOSurfaceLibrary_sLib_456 = (uint64_t)result;
  return result;
}

uint64_t initIOSurfaceGetBaseAddress_462(uint64_t a1)
{
  if (IOSurfaceLibrary_sOnce_455 != -1) {
    dispatch_once(&IOSurfaceLibrary_sOnce_455, &__block_literal_global_52);
  }
  CFNumberRef v2 = (uint64_t (*)())dlsym((void *)IOSurfaceLibrary_sLib_456, "IOSurfaceGetBaseAddress");
  softLinkIOSurfaceGetBaseAddress_447[0] = v2;
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

uint64_t initIOSurfaceLock_465(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (IOSurfaceLibrary_sOnce_455 != -1) {
    dispatch_once(&IOSurfaceLibrary_sOnce_455, &__block_literal_global_52);
  }
  int v6 = (uint64_t (*)())dlsym((void *)IOSurfaceLibrary_sLib_456, "IOSurfaceLock");
  softLinkIOSurfaceLock_446[0] = v6;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(a1, a2, a3);
}

uint64_t initFigAspenCreateJPEGFromIOSurface(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (CelestialLibrary_sOnce != -1) {
    dispatch_once(&CelestialLibrary_sOnce, &__block_literal_global_46);
  }
  uint64_t v8 = (uint64_t (*)())dlsym((void *)CelestialLibrary_sLib, "FigAspenCreateJPEGFromIOSurface");
  softLinkFigAspenCreateJPEGFromIOSurface[0] = v8;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v8)(a1, a2, a3, a4);
}

void *__CelestialLibrary_block_invoke()
{
  uint64_t result = dlopen("/System/Library/PrivateFrameworks/Celestial.framework/Celestial", 2);
  CelestialLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t initCVPixelBufferGetIOSurface(uint64_t a1)
{
  if (CoreVideoLibrary_sOnce != -1) {
    dispatch_once(&CoreVideoLibrary_sOnce, &__block_literal_global_58);
  }
  CFNumberRef v2 = (uint64_t (*)())dlsym((void *)CoreVideoLibrary_sLib, "CVPixelBufferGetIOSurface");
  softLinkCVPixelBufferGetIOSurface[0] = v2;
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

void *__CoreVideoLibrary_block_invoke()
{
  uint64_t result = dlopen("/System/Library/Frameworks/CoreVideo.framework/CoreVideo", 2);
  CoreVideoLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t initVTPixelTransferSessionTransferImage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (VideoToolboxLibrary_sOnce != -1) {
    dispatch_once(&VideoToolboxLibrary_sOnce, &__block_literal_global_63);
  }
  int v6 = (uint64_t (*)())dlsym((void *)VideoToolboxLibrary_sLib, "VTPixelTransferSessionTransferImage");
  softLinkVTPixelTransferSessionTransferImage[0] = v6;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(a1, a2, a3);
}

void *__VideoToolboxLibrary_block_invoke()
{
  uint64_t result = dlopen("/System/Library/Frameworks/VideoToolbox.framework/VideoToolbox", 2);
  VideoToolboxLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t initFigCreateIOSurfaceBackedCVPixelBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (VideoToolboxLibrary_sOnce != -1) {
    dispatch_once(&VideoToolboxLibrary_sOnce, &__block_literal_global_63);
  }
  uint64_t v8 = (uint64_t (*)())dlsym((void *)VideoToolboxLibrary_sLib, "FigCreateIOSurfaceBackedCVPixelBuffer");
  softLinkFigCreateIOSurfaceBackedCVPixelBuffer[0] = v8;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v8)(a1, a2, a3, a4);
}

uint64_t initVTPixelTransferSessionCreate(uint64_t a1, uint64_t a2)
{
  if (VideoToolboxLibrary_sOnce != -1) {
    dispatch_once(&VideoToolboxLibrary_sOnce, &__block_literal_global_63);
  }
  CFDataRef v4 = (uint64_t (*)())dlsym((void *)VideoToolboxLibrary_sLib, "VTPixelTransferSessionCreate");
  softLinkVTPixelTransferSessionCreate[0] = v4;
  return ((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2);
}

uint64_t initCVPixelBufferCreateWithIOSurface(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (CoreVideoLibrary_sOnce != -1) {
    dispatch_once(&CoreVideoLibrary_sOnce, &__block_literal_global_58);
  }
  uint64_t v8 = (uint64_t (*)())dlsym((void *)CoreVideoLibrary_sLib, "CVPixelBufferCreateWithIOSurface");
  softLinkCVPixelBufferCreateWithIOSurface[0] = v8;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v8)(a1, a2, a3, a4);
}

uint64_t initIOSurfaceGetHeight(uint64_t a1)
{
  if (IOSurfaceLibrary_sOnce_455 != -1) {
    dispatch_once(&IOSurfaceLibrary_sOnce_455, &__block_literal_global_52);
  }
  CFNumberRef v2 = (uint64_t (*)())dlsym((void *)IOSurfaceLibrary_sLib_456, "IOSurfaceGetHeight");
  softLinkIOSurfaceGetHeight[0] = v2;
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

uint64_t initIOSurfaceGetWidth(uint64_t a1)
{
  if (IOSurfaceLibrary_sOnce_455 != -1) {
    dispatch_once(&IOSurfaceLibrary_sOnce_455, &__block_literal_global_52);
  }
  CFNumberRef v2 = (uint64_t (*)())dlsym((void *)IOSurfaceLibrary_sLib_456, "IOSurfaceGetWidth");
  softLinkIOSurfaceGetWidth[0] = v2;
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

uint64_t initFigCreateIOSurfaceFromJPEG(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (CelestialLibrary_sOnce != -1) {
    dispatch_once(&CelestialLibrary_sOnce, &__block_literal_global_46);
  }
  int v6 = (uint64_t (*)())dlsym((void *)CelestialLibrary_sLib, "FigCreateIOSurfaceFromJPEG");
  softLinkFigCreateint IOSurfaceFromJPEG = v6;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(a1, a2, a3);
}

uint64_t initValkFigJPEGHighSpeedDecode()
{
  if (CelestialLibrary_sOnce != -1) {
    dispatch_once(&CelestialLibrary_sOnce, &__block_literal_global_46);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)CelestialLibrary_sLib, "kFigJPEGHighSpeedDecode");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkFigJPEGHighSpeedDecode = result;
  }
  else
  {
    uint64_t result = constantValkFigJPEGHighSpeedDecode;
  }
  getkFigJPEGHighSpeedDecode[0] = kFigJPEGHighSpeedDecodeFunction;
  return result;
}

uint64_t kFigJPEGHighSpeedDecodeFunction()
{
  return constantValkFigJPEGHighSpeedDecode;
}

uint64_t chacha20_all_64x64(int32x4_t *a1, uint64_t *a2, uint64_t a3, int8x16_t *a4, unint64_t a5, int8x16_t *a6)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  int32x4_t v6 = *a1;
  int32x4_t v7 = a1[1];
  v10[0] = (int32x4_t)xmmword_18E416EA0;
  v10[1] = v6;
  void v10[2] = v7;
  uint64_t v11 = a3;
  if (a2) {
    uint64_t v8 = *a2;
  }
  else {
    uint64_t v8 = 0;
  }
  long long v15 = 0uLL;
  long long v16 = 0uLL;
  long long v13 = 0uLL;
  long long v14 = 0uLL;
  uint64_t v12 = v8;
  uint64_t v17 = 0;
  _chacha20_xor(v10, a6, a4, a5);
  return memset_s(v10, 0x88uLL, 0, 0x88uLL);
}

int32x4_t *_chacha20_xor(int32x4_t *result, int8x16_t *a2, int8x16_t *a3, unint64_t a4)
{
  uint64_t v201 = *MEMORY[0x1E4F143B8];
  int32x4_t v5 = result[1];
  int32x4_t v4 = result[2];
  int32x4_t v6 = result[3];
  if (a4 >= 0xC0)
  {
    uint64_t v7 = 0;
    unint64_t v8 = a4 / 0xC0;
    do
    {
      int32x4_t v9 = vaddq_s32(v6, (int32x4_t)xmmword_18E416EB0);
      __int32 v11 = result[1].i32[0];
      __int32 v10 = result[1].i32[1];
      __int32 v12 = result[1].i32[2];
      __int32 v13 = result[1].i32[3];
      __int32 v14 = result[2].i32[0];
      __int32 v15 = result[2].i32[1];
      __int32 v16 = result[2].i32[2];
      __int32 v17 = result[2].i32[3];
      int v18 = 3 * v7 + 2;
      __int32 v19 = result[3].i32[1];
      int v20 = result[3].i32[0] + v18;
      uint64_t v21 = -10;
      int v22 = 1634760805;
      int v23 = 857760878;
      int v24 = 2036477234;
      int v25 = 1797285236;
      int32x4_t v26 = (int32x4_t)xmmword_18E416EA0;
      int32x4_t v27 = v5;
      int32x4_t v28 = v4;
      int32x4_t v29 = v6;
      int32x4_t v30 = (int32x4_t)xmmword_18E416EA0;
      int32x4_t v31 = v5;
      int32x4_t v32 = v4;
      int32x4_t v33 = v9;
      __int32 v35 = result[3].i32[2];
      __int32 v34 = result[3].i32[3];
      do
      {
        int32x4_t v36 = vaddq_s32(v26, v27);
        int32x4_t v37 = (int32x4_t)vrev32q_s16((int16x8_t)veorq_s8((int8x16_t)v36, (int8x16_t)v29));
        int32x4_t v38 = vaddq_s32(v28, v37);
        int32x4_t v39 = (int32x4_t)veorq_s8((int8x16_t)v38, (int8x16_t)v27);
        int32x4_t v40 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v39, 0xCuLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v39, 0x14uLL));
        int32x4_t v41 = vaddq_s32(v40, v36);
        int32x4_t v42 = (int32x4_t)veorq_s8((int8x16_t)v41, (int8x16_t)v37);
        int32x4_t v43 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v42, 8uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v42, 0x18uLL));
        int8x16_t v44 = (int8x16_t)vaddq_s32(v43, v38);
        int32x4_t v45 = (int32x4_t)veorq_s8(v44, (int8x16_t)v40);
        int8x16_t v46 = vorrq_s8((int8x16_t)vshlq_n_s32(v45, 7uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v45, 0x19uLL));
        int32x4_t v47 = (int32x4_t)vextq_s8(v46, v46, 4uLL);
        int32x4_t v48 = vaddq_s32(v47, v41);
        int32x4_t v49 = (int32x4_t)vrev32q_s16((int16x8_t)veorq_s8((int8x16_t)v48, vextq_s8((int8x16_t)v43, (int8x16_t)v43, 0xCuLL)));
        int32x4_t v50 = vaddq_s32((int32x4_t)vextq_s8(v44, v44, 8uLL), v49);
        int32x4_t v51 = (int32x4_t)veorq_s8((int8x16_t)v50, (int8x16_t)v47);
        int32x4_t v52 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v51, 0xCuLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v51, 0x14uLL));
        int32x4_t v26 = vaddq_s32(v52, v48);
        int32x4_t v53 = (int32x4_t)veorq_s8((int8x16_t)v26, (int8x16_t)v49);
        int32x4_t v54 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v53, 8uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v53, 0x18uLL));
        int8x16_t v55 = (int8x16_t)vaddq_s32(v54, v50);
        int32x4_t v56 = (int32x4_t)veorq_s8(v55, (int8x16_t)v52);
        int8x16_t v57 = vorrq_s8((int8x16_t)vshlq_n_s32(v56, 7uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v56, 0x19uLL));
        int32x4_t v27 = (int32x4_t)vextq_s8(v57, v57, 0xCuLL);
        int32x4_t v28 = (int32x4_t)vextq_s8(v55, v55, 8uLL);
        int32x4_t v29 = (int32x4_t)vextq_s8((int8x16_t)v54, (int8x16_t)v54, 4uLL);
        int32x4_t v58 = vaddq_s32(v30, v31);
        int32x4_t v59 = (int32x4_t)vrev32q_s16((int16x8_t)veorq_s8((int8x16_t)v58, (int8x16_t)v33));
        int32x4_t v60 = vaddq_s32(v32, v59);
        __int32 v61 = v22 + v11;
        int v62 = (v22 + v11) ^ v20;
        HIDWORD(v63) = v62;
        LODWORD(v63) = v62;
        int v64 = (v63 >> 16) + v14;
        int v65 = v64 ^ v11;
        HIDWORD(v63) = v65;
        LODWORD(v63) = v65;
        int32x4_t v66 = (int32x4_t)veorq_s8((int8x16_t)v60, (int8x16_t)v31);
        int v67 = (v63 >> 20) + v61;
        LODWORD(v63) = v67 ^ __ROR4__(v62, 16);
        int v68 = v63;
        HIDWORD(v63) = v63;
        int v69 = (v63 >> 24) + v64;
        LODWORD(v63) = v69 ^ __ROR4__(v65, 20);
        int v70 = v63;
        HIDWORD(v63) = v63;
        int v71 = v63 >> 25;
        __int32 v72 = v23 + v10;
        int v73 = (v23 + v10) ^ v19;
        HIDWORD(v63) = v73;
        LODWORD(v63) = v73;
        int32x4_t v74 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v66, 0xCuLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v66, 0x14uLL));
        int v75 = (v63 >> 16) + v15;
        int v76 = v75 ^ v10;
        HIDWORD(v63) = v76;
        LODWORD(v63) = v76;
        int32x4_t v77 = vaddq_s32(v74, v58);
        int v78 = (v63 >> 20) + v72;
        LODWORD(v63) = v78 ^ __ROR4__(v73, 16);
        int v79 = v63;
        HIDWORD(v63) = v63;
        int32x4_t v80 = (int32x4_t)veorq_s8((int8x16_t)v77, (int8x16_t)v59);
        int v81 = (v63 >> 24) + v75;
        LODWORD(v63) = v81 ^ __ROR4__(v76, 20);
        int v82 = v63;
        HIDWORD(v63) = v63;
        int v83 = v63 >> 25;
        __int32 v84 = v24 + v12;
        int v85 = (v24 + v12) ^ v35;
        HIDWORD(v63) = v85;
        LODWORD(v63) = v85;
        int v86 = (v63 >> 16) + v16;
        int v87 = v86 ^ v12;
        HIDWORD(v63) = v87;
        LODWORD(v63) = v87;
        int32x4_t v88 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v80, 8uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v80, 0x18uLL));
        int v89 = (v63 >> 20) + v84;
        LODWORD(v63) = v89 ^ __ROR4__(v85, 16);
        int v90 = v63;
        HIDWORD(v63) = v63;
        int8x16_t v91 = (int8x16_t)vaddq_s32(v88, v60);
        int v92 = (v63 >> 24) + v86;
        LODWORD(v63) = v92 ^ __ROR4__(v87, 20);
        int v93 = v63;
        HIDWORD(v63) = v63;
        int v94 = v63 >> 25;
        int32x4_t v95 = (int32x4_t)veorq_s8(v91, (int8x16_t)v74);
        __int32 v96 = v25 + v13;
        int v97 = v96 ^ v34;
        HIDWORD(v63) = v97;
        LODWORD(v63) = v97;
        int8x16_t v98 = vorrq_s8((int8x16_t)vshlq_n_s32(v95, 7uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v95, 0x19uLL));
        int v99 = (v63 >> 16) + v17;
        int v100 = v99 ^ v13;
        HIDWORD(v63) = v99 ^ v13;
        LODWORD(v63) = v99 ^ v13;
        int32x4_t v101 = (int32x4_t)vextq_s8(v98, v98, 4uLL);
        int v102 = (v63 >> 20) + v96;
        int32x4_t v104 = vaddq_s32(v101, v77);
        int32x4_t v105 = (int32x4_t)vrev32q_s16((int16x8_t)veorq_s8((int8x16_t)v104, vextq_s8((int8x16_t)v88, (int8x16_t)v88, 0xCuLL)));
        LODWORD(v63) = v102 ^ __ROR4__(v97, 16);
        int v103 = v63;
        HIDWORD(v63) = v63;
        int32x4_t v106 = vaddq_s32((int32x4_t)vextq_s8(v91, v91, 8uLL), v105);
        int32x4_t v107 = (int32x4_t)veorq_s8((int8x16_t)v106, (int8x16_t)v101);
        int v108 = (v63 >> 24) + v99;
        int32x4_t v110 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v107, 0xCuLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v107, 0x14uLL));
        LODWORD(v63) = v108 ^ __ROR4__(v100, 20);
        int v109 = v63;
        HIDWORD(v63) = v63;
        int v111 = v63 >> 25;
        int32x4_t v30 = vaddq_s32(v110, v104);
        int32x4_t v112 = (int32x4_t)veorq_s8((int8x16_t)v30, (int8x16_t)v105);
        int v113 = v83 + v67;
        int32x4_t v115 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v112, 8uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v112, 0x18uLL));
        int8x16_t v116 = (int8x16_t)vaddq_s32(v115, v106);
        int32x4_t v117 = (int32x4_t)veorq_s8(v116, (int8x16_t)v110);
        LODWORD(v63) = v113 ^ __ROR4__(v103, 24);
        int v114 = v63;
        HIDWORD(v63) = v63;
        int8x16_t v118 = vorrq_s8((int8x16_t)vshlq_n_s32(v117, 7uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v117, 0x19uLL));
        int v119 = (v63 >> 16) + v92;
        int32x4_t v31 = (int32x4_t)vextq_s8(v118, v118, 0xCuLL);
        int32x4_t v32 = (int32x4_t)vextq_s8(v116, v116, 8uLL);
        LODWORD(v63) = v119 ^ __ROR4__(v82, 25);
        int v120 = v63;
        HIDWORD(v63) = v63;
        int v22 = (v63 >> 20) + v113;
        LODWORD(v63) = v22 ^ __ROR4__(v114, 16);
        HIDWORD(v63) = v63;
        __int32 v34 = v63 >> 24;
        __int32 v16 = v34 + v119;
        LODWORD(v63) = v16 ^ __ROR4__(v120, 20);
        HIDWORD(v63) = v63;
        __int32 v10 = v63 >> 25;
        LODWORD(v63) = (v94 + v78) ^ __ROR4__(v68, 24);
        int v121 = v63;
        HIDWORD(v63) = v63;
        int v122 = (v63 >> 16) + v108;
        LODWORD(v63) = v122 ^ __ROR4__(v93, 25);
        int v123 = v63;
        HIDWORD(v63) = v63;
        int v23 = (v63 >> 20) + v94 + v78;
        LODWORD(v63) = v23 ^ __ROR4__(v121, 16);
        HIDWORD(v63) = v63;
        int v20 = v63 >> 24;
        __int32 v17 = v20 + v122;
        LODWORD(v63) = (v20 + v122) ^ __ROR4__(v123, 20);
        HIDWORD(v63) = v63;
        __int32 v12 = v63 >> 25;
        int v124 = v111 + v89;
        LODWORD(v63) = (v111 + v89) ^ __ROR4__(v79, 24);
        int v125 = v63;
        HIDWORD(v63) = v63;
        int v126 = (v63 >> 16) + v69;
        LODWORD(v63) = v126 ^ __ROR4__(v109, 25);
        int v127 = v63;
        HIDWORD(v63) = v63;
        int v24 = (v63 >> 20) + v124;
        LODWORD(v63) = v24 ^ __ROR4__(v125, 16);
        HIDWORD(v63) = v63;
        __int32 v19 = v63 >> 24;
        __int32 v14 = v19 + v126;
        LODWORD(v63) = (v19 + v126) ^ __ROR4__(v127, 20);
        HIDWORD(v63) = v63;
        __int32 v13 = v63 >> 25;
        int v128 = v71 + v102;
        LODWORD(v63) = v128 ^ __ROR4__(v90, 24);
        int v129 = v63;
        HIDWORD(v63) = v63;
        int v130 = (v63 >> 16) + v81;
        LODWORD(v63) = v130 ^ __ROR4__(v70, 25);
        int v131 = v63;
        HIDWORD(v63) = v63;
        int v25 = (v63 >> 20) + v128;
        LODWORD(v63) = v25 ^ __ROR4__(v129, 16);
        HIDWORD(v63) = v63;
        __int32 v35 = v63 >> 24;
        int32x4_t v33 = (int32x4_t)vextq_s8((int8x16_t)v115, (int8x16_t)v115, 4uLL);
        __int32 v15 = v35 + v130;
        LODWORD(v63) = (v35 + v130) ^ __ROR4__(v131, 20);
        HIDWORD(v63) = v63;
        __int32 v11 = v63 >> 25;
        BOOL v132 = __CFADD__(v21++, 1);
      }
      while (!v132);
      *a2 = veorq_s8(*a3, (int8x16_t)vaddq_s32(v26, (int32x4_t)xmmword_18E416EA0));
      a2[1] = veorq_s8(a3[1], (int8x16_t)vaddq_s32(v27, v5));
      a2[2] = veorq_s8(a3[2], (int8x16_t)vaddq_s32(v28, v4));
      a2[3] = veorq_s8(a3[3], (int8x16_t)vaddq_s32(v29, v6));
      a2[4] = veorq_s8(a3[4], (int8x16_t)vaddq_s32(v30, (int32x4_t)xmmword_18E416EA0));
      a2[5] = veorq_s8(a3[5], (int8x16_t)vaddq_s32(v31, v5));
      a2[6] = veorq_s8(a3[6], (int8x16_t)vaddq_s32(v32, v4));
      a2[7] = veorq_s8(a3[7], (int8x16_t)vaddq_s32(v33, v9));
      a2[8].i32[0] = a3[8].i32[0] ^ (v22 + 1634760805);
      a2[8].i32[1] = a3[8].i32[1] ^ (v23 + 857760878);
      a2[8].i32[2] = a3[8].i32[2] ^ (v24 + 2036477234);
      a2[8].i32[3] = a3[8].i32[3] ^ (v25 + 1797285236);
      a2[9].i32[0] = (result[1].i32[0] + v11) ^ a3[9].i32[0];
      a2[9].i32[1] = (result[1].i32[1] + v10) ^ a3[9].i32[1];
      a2[9].i32[2] = (result[1].i32[2] + v12) ^ a3[9].i32[2];
      a2[9].i32[3] = (result[1].i32[3] + v13) ^ a3[9].i32[3];
      a2[10].i32[0] = (result[2].i32[0] + v14) ^ a3[10].i32[0];
      a2[10].i32[1] = (result[2].i32[1] + v15) ^ a3[10].i32[1];
      a2[10].i32[2] = (result[2].i32[2] + v16) ^ a3[10].i32[2];
      a2[10].i32[3] = (result[2].i32[3] + v17) ^ a3[10].i32[3];
      a2[11].i32[0] = (v20 + v18 + result[3].i32[0]) ^ a3[11].i32[0];
      a2[11].i32[1] = (result[3].i32[1] + v19) ^ a3[11].i32[1];
      a2[11].i32[2] = (result[3].i32[2] + v35) ^ a3[11].i32[2];
      a2[11].i32[3] = (result[3].i32[3] + v34) ^ a3[11].i32[3];
      int32x4_t v6 = vaddq_s32(v6, (int32x4_t)xmmword_18E416EC0);
      a3 += 12;
      a2 += 12;
      ++v7;
    }
    while (v7 != v8);
  }
  if (a4 % 0xC0 >= 0x40)
  {
    unint64_t v134 = ((a4 % 0xC0) >> 6) - 1;
    unsigned int v133 = (int32x4_t *)&off_18E416000;
    do
    {
      unint64_t v135 = v134;
      uint64_t v136 = -10;
      int32x4_t v137 = (int32x4_t)xmmword_18E416EA0;
      int32x4_t v138 = v5;
      int32x4_t v139 = v4;
      int32x4_t v140 = v6;
      do
      {
        int32x4_t v141 = vaddq_s32(v137, v138);
        int32x4_t v142 = (int32x4_t)vrev32q_s16((int16x8_t)veorq_s8((int8x16_t)v141, (int8x16_t)v140));
        int32x4_t v143 = vaddq_s32(v139, v142);
        int32x4_t v144 = (int32x4_t)veorq_s8((int8x16_t)v143, (int8x16_t)v138);
        int32x4_t v145 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v144, 0xCuLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v144, 0x14uLL));
        int32x4_t v146 = vaddq_s32(v145, v141);
        int32x4_t v147 = (int32x4_t)veorq_s8((int8x16_t)v146, (int8x16_t)v142);
        int32x4_t v148 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v147, 8uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v147, 0x18uLL));
        int8x16_t v149 = (int8x16_t)vaddq_s32(v148, v143);
        int32x4_t v150 = (int32x4_t)veorq_s8(v149, (int8x16_t)v145);
        int8x16_t v151 = vorrq_s8((int8x16_t)vshlq_n_s32(v150, 7uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v150, 0x19uLL));
        int32x4_t v152 = (int32x4_t)vextq_s8(v151, v151, 4uLL);
        int32x4_t v153 = vaddq_s32(v152, v146);
        int32x4_t v154 = (int32x4_t)vrev32q_s16((int16x8_t)veorq_s8((int8x16_t)v153, vextq_s8((int8x16_t)v148, (int8x16_t)v148, 0xCuLL)));
        int32x4_t v155 = vaddq_s32((int32x4_t)vextq_s8(v149, v149, 8uLL), v154);
        int32x4_t v156 = (int32x4_t)veorq_s8((int8x16_t)v155, (int8x16_t)v152);
        int32x4_t v157 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v156, 0xCuLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v156, 0x14uLL));
        int32x4_t v137 = vaddq_s32(v157, v153);
        int32x4_t v158 = (int32x4_t)veorq_s8((int8x16_t)v137, (int8x16_t)v154);
        int32x4_t v159 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v158, 8uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v158, 0x18uLL));
        int8x16_t v160 = (int8x16_t)vaddq_s32(v159, v155);
        int32x4_t v161 = (int32x4_t)veorq_s8(v160, (int8x16_t)v157);
        int8x16_t v162 = vorrq_s8((int8x16_t)vshlq_n_s32(v161, 7uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v161, 0x19uLL));
        int32x4_t v138 = (int32x4_t)vextq_s8(v162, v162, 0xCuLL);
        int32x4_t v139 = (int32x4_t)vextq_s8(v160, v160, 8uLL);
        int32x4_t v140 = (int32x4_t)vextq_s8((int8x16_t)v159, (int8x16_t)v159, 4uLL);
        BOOL v132 = __CFADD__(v136++, 1);
      }
      while (!v132);
      unint64_t v134 = 0;
      *a2 = veorq_s8(*a3, (int8x16_t)vaddq_s32(v137, (int32x4_t)xmmword_18E416EA0));
      a2[1] = veorq_s8(a3[1], (int8x16_t)vaddq_s32(v138, v5));
      a2[2] = veorq_s8(a3[2], (int8x16_t)vaddq_s32(v139, v4));
      a2[3] = veorq_s8(a3[3], (int8x16_t)vaddq_s32(v140, v6));
      int32x4_t v6 = vaddq_s32(v6, (int32x4_t)xmmword_18E416EB0);
      a3 += 4;
      a2 += 4;
    }
    while (v135);
  }
  else
  {
    unsigned int v133 = (int32x4_t *)&off_18E416000;
  }
  unint64_t v163 = a4 & 0x3F;
  if ((a4 & 0x3F) != 0)
  {
    int32x4_t v164 = v133[234];
    uint64_t v165 = -10;
    int32x4_t v166 = v5;
    int32x4_t v167 = v4;
    int32x4_t v168 = v6;
    do
    {
      int32x4_t v169 = vaddq_s32(v164, v166);
      int32x4_t v170 = (int32x4_t)vrev32q_s16((int16x8_t)veorq_s8((int8x16_t)v169, (int8x16_t)v168));
      int32x4_t v171 = vaddq_s32(v167, v170);
      int32x4_t v172 = (int32x4_t)veorq_s8((int8x16_t)v171, (int8x16_t)v166);
      int32x4_t v173 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v172, 0xCuLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v172, 0x14uLL));
      int32x4_t v174 = vaddq_s32(v173, v169);
      int32x4_t v175 = (int32x4_t)veorq_s8((int8x16_t)v174, (int8x16_t)v170);
      int32x4_t v176 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v175, 8uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v175, 0x18uLL));
      int8x16_t v177 = (int8x16_t)vaddq_s32(v176, v171);
      int32x4_t v178 = (int32x4_t)veorq_s8(v177, (int8x16_t)v173);
      int8x16_t v179 = vorrq_s8((int8x16_t)vshlq_n_s32(v178, 7uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v178, 0x19uLL));
      int32x4_t v180 = (int32x4_t)vextq_s8(v179, v179, 4uLL);
      int32x4_t v181 = vaddq_s32(v180, v174);
      int32x4_t v182 = (int32x4_t)vrev32q_s16((int16x8_t)veorq_s8((int8x16_t)v181, vextq_s8((int8x16_t)v176, (int8x16_t)v176, 0xCuLL)));
      int32x4_t v183 = vaddq_s32((int32x4_t)vextq_s8(v177, v177, 8uLL), v182);
      int32x4_t v184 = (int32x4_t)veorq_s8((int8x16_t)v183, (int8x16_t)v180);
      int32x4_t v185 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v184, 0xCuLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v184, 0x14uLL));
      int32x4_t v164 = vaddq_s32(v185, v181);
      int32x4_t v186 = (int32x4_t)veorq_s8((int8x16_t)v164, (int8x16_t)v182);
      int32x4_t v187 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v186, 8uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v186, 0x18uLL));
      int8x16_t v188 = (int8x16_t)vaddq_s32(v187, v183);
      int32x4_t v189 = (int32x4_t)veorq_s8(v188, (int8x16_t)v185);
      int8x16_t v190 = vorrq_s8((int8x16_t)vshlq_n_s32(v189, 7uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v189, 0x19uLL));
      int32x4_t v166 = (int32x4_t)vextq_s8(v190, v190, 0xCuLL);
      int32x4_t v167 = (int32x4_t)vextq_s8(v188, v188, 8uLL);
      int32x4_t v168 = (int32x4_t)vextq_s8((int8x16_t)v187, (int8x16_t)v187, 4uLL);
      BOOL v132 = __CFADD__(v165++, 1);
    }
    while (!v132);
    if (v163 < 0x10)
    {
      v200[0] = vaddq_s32(v164, v133[234]);
    }
    else
    {
      *a2 = veorq_s8(*a3, (int8x16_t)vaddq_s32(v164, v133[234]));
      if (v163 < 0x20)
      {
        v200[1] = vaddq_s32(v166, v5);
      }
      else
      {
        a2[1] = veorq_s8(a3[1], (int8x16_t)vaddq_s32(v166, v5));
        if (v163 < 0x30)
        {
          v200[2] = vaddq_s32(v167, v4);
        }
        else
        {
          a2[2] = veorq_s8(a3[2], (int8x16_t)vaddq_s32(v167, v4));
          v200[3] = vaddq_s32(v168, v6);
        }
      }
    }
    unint64_t v191 = a4 & 0x30;
    unint64_t v192 = v163 - v191;
    if (v163 > v191)
    {
      v193 = &a2->i8[v191];
      uint64_t v194 = (char *)v200 + v191;
      uint64_t v195 = &a3->i8[v191];
      do
      {
        char v197 = *v195++;
        char v196 = v197;
        char v198 = *v194++;
        *v193++ = v198 ^ v196;
        --v192;
      }
      while (v192);
    }
  }
  result[3].i64[0] = v6.i64[0];
  return result;
}

uint64_t chacha20_init_64x64(uint64_t result, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  *(_OWORD *)uint64_t result = xmmword_18E416EA0;
  *(_DWORD *)(result + 16) = *a2;
  *(_DWORD *)(result + 20) = a2[1];
  *(_DWORD *)(result + 24) = a2[2];
  *(_DWORD *)(result + 28) = a2[3];
  *(_DWORD *)(result + 32) = a2[4];
  *(_DWORD *)(result + 36) = a2[5];
  *(_DWORD *)(result + 40) = a2[6];
  *(_DWORD *)(result + 44) = a2[7];
  *(void *)(result + 48) = a4;
  if (a3)
  {
    *(_DWORD *)(result + 56) = *a3;
    int v4 = a3[1];
  }
  else
  {
    int v4 = 0;
    *(_DWORD *)(result + 56) = 0;
  }
  *(_DWORD *)(result + 60) = v4;
  *(void *)(result + 128) = 0;
  return result;
}

uint64_t chacha20_all_96x32(int32x4_t *a1, uint64_t *a2, int a3, int8x16_t *a4, unint64_t a5, int8x16_t *a6)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  int32x4_t v6 = *a1;
  int32x4_t v7 = a1[1];
  v11[0] = (int32x4_t)xmmword_18E416EA0;
  v11[1] = v6;
  v11[2] = v7;
  int v12 = a3;
  if (a2)
  {
    uint64_t v8 = *a2;
    int v9 = *((_DWORD *)a2 + 2);
  }
  else
  {
    int v9 = 0;
    uint64_t v8 = 0;
  }
  long long v17 = 0uLL;
  long long v18 = 0uLL;
  long long v15 = 0uLL;
  long long v16 = 0uLL;
  uint64_t v13 = v8;
  int v14 = v9;
  uint64_t v19 = 0;
  _chacha20_xor(v11, a6, a4, a5);
  return memset_s(v11, 0x88uLL, 0, 0x88uLL);
}

int64_t chacha20_update(uint64_t a1, int8x16_t *a2, unint64_t a3, int8x16_t *a4)
{
  unint64_t v5 = a3;
  int32x4_t v6 = a2;
  uint64_t v8 = *(void *)(a1 + 128);
  if (v8)
  {
    if (64 - v8 >= a3) {
      unint64_t v9 = a3;
    }
    else {
      unint64_t v9 = 64 - v8;
    }
    if (v9)
    {
      __int32 v10 = a2;
      unint64_t v11 = v9;
      do
      {
        __int8 v12 = v10->i8[0];
        __int32 v10 = (int8x16_t *)((char *)v10 + 1);
        uint64_t v13 = v8 + 1;
        *(unsigned char *)(a1 + 64 + v8++) = v12;
        --v11;
      }
      while (v11);
    }
    else
    {
      uint64_t v13 = *(void *)(a1 + 128);
    }
    int32x4_t v6 = (int8x16_t *)((char *)a2 + v9);
    unint64_t v5 = a3 - v9;
    int v14 = a4;
    if (v13 == 64)
    {
      _chacha20_xor((int32x4_t *)a1, a4, (int8x16_t *)(a1 + 64), 0x40uLL);
      uint64_t v13 = 0;
      int v14 = a4 + 4;
    }
    *(void *)(a1 + 128) = v13;
  }
  else
  {
    int v14 = a4;
  }
  if (v5 >= 0x40)
  {
    _chacha20_xor((int32x4_t *)a1, v14, v6, v5 & 0xFFFFFFFFFFFFFFC0);
    int32x4_t v6 = (int8x16_t *)((char *)v6 + (v5 & 0xFFFFFFFFFFFFFFC0));
    int v14 = (int8x16_t *)((char *)v14 + (v5 & 0xFFFFFFFFFFFFFFC0));
    v5 &= 0x3Fu;
  }
  if (v5)
  {
    for (uint64_t i = 0; i != v5; ++i)
      *(unsigned char *)(a1 + 64 + i) = v6->i8[i];
    *(void *)(a1 + 128) = v5;
  }
  return (char *)v14 - (char *)a4;
}

uint64_t chacha20_final(void *__s, int8x16_t *a2)
{
  uint64_t v3 = *((void *)__s + 16);
  if (v3) {
    _chacha20_xor((int32x4_t *)__s, a2, (int8x16_t *)__s + 4, *((void *)__s + 16));
  }
  memset_s(__s, 0x88uLL, 0, 0x88uLL);
  return v3;
}

uint64_t poly1305_init(uint64_t result, unsigned __int16 *a2)
{
  uint64_t v2 = 0;
  int v3 = *((unsigned __int8 *)a2 + 3);
  int v4 = v3 << 24;
  int v5 = (*((unsigned __int8 *)a2 + 6) << 16) | (*((unsigned __int8 *)a2 + 7) << 24);
  int v6 = *((unsigned __int8 *)a2 + 8) | (*((unsigned __int8 *)a2 + 9) << 8);
  int v7 = (*((unsigned __int8 *)a2 + 11) << 24) | (*((unsigned __int8 *)a2 + 10) << 16) | (*((unsigned __int8 *)a2 + 9) << 8);
  unsigned int v8 = *((unsigned __int8 *)a2 + 12);
  int v9 = *((unsigned __int8 *)a2 + 13);
  int v10 = *((unsigned __int8 *)a2 + 14) << 8;
  unsigned int v11 = (*a2 | (*((unsigned __int8 *)a2 + 2) << 16)) & 0xFCFFFFFF | ((v3 & 3) << 24);
  LOBYTE(v3) = *((unsigned char *)a2 + 15);
  HIDWORD(v12) = a2[2] | (*((unsigned __int8 *)a2 + 6) << 16);
  LODWORD(v12) = v4;
  int v13 = (v12 >> 26) & 0x3FFFF03;
  *(_DWORD *)uint64_t result = v11;
  *(_DWORD *)(result + 4) = v13;
  int v14 = (__PAIR64__(v6, v5) >> 20) & 0x3FFC0FF;
  unint64_t v15 = (__PAIR64__(v8, v7) >> 14) & 0x3F03FFF;
  *(_DWORD *)(result + 8) = v14;
  *(_DWORD *)(result + 12) = v15;
  unsigned int v16 = v10 & 0xFFF0FFFF | ((v3 & 0xF) << 16);
  *(_DWORD *)(result + 16) = v16 | v9;
  *(_DWORD *)(result + 20) = 5 * v13;
  *(_DWORD *)(result + 24) = 5 * v14;
  *(_DWORD *)(result + 28) = 5 * v15;
  *(_DWORD *)(result + 32) = 5 * (v16 | v9);
  *(void *)(result + 72) = 0;
  *(void *)(result + 44) = 0;
  *(void *)(result + 36) = 0;
  *(_DWORD *)(result + 52) = 0;
  do
  {
    *(unsigned char *)(result + 80 + v2) = *((unsigned char *)a2 + v2 + 16);
    ++v2;
  }
  while (v2 != 16);
  return result;
}

unsigned int *poly1305_update(unsigned int *result, unsigned int *a2, unint64_t a3)
{
  unint64_t v3 = a3;
  int v4 = a2;
  int v5 = result;
  uint64_t v6 = *((void *)result + 9);
  if (v6)
  {
    unint64_t v7 = 16 - v6;
    if (16 - v6 >= a3) {
      unint64_t v7 = a3;
    }
    if (v7)
    {
      unsigned int v8 = result + 14;
      int v9 = a2;
      unint64_t v10 = v7;
      do
      {
        char v11 = *(unsigned char *)v9;
        int v9 = (unsigned int *)((char *)v9 + 1);
        *((unsigned char *)v8 + *((void *)result + 9)) = v11;
        unsigned int v8 = (unsigned int *)((char *)v8 + 1);
        --v10;
      }
      while (v10);
      uint64_t v6 = *((void *)result + 9);
    }
    uint64_t v12 = v6 + v7;
    *((void *)result + 9) = v12;
    unint64_t v3 = a3 - v7;
    int v4 = (unsigned int *)((char *)a2 + v7);
    if (v12 == 16)
    {
      uint64_t result = _poly1305_update(result, result + 14, 0x10uLL);
      *((void *)v5 + 9) = 0;
    }
  }
  if (v3 >= 0x10)
  {
    uint64_t result = _poly1305_update(v5, v4, v3 & 0xFFFFFFFFFFFFFFF0);
    int v4 = (unsigned int *)((char *)v4 + (v3 & 0xFFFFFFFFFFFFFFF0));
    v3 &= 0xFu;
  }
  if (v3)
  {
    for (uint64_t i = 0; i != v3; ++i)
      *((unsigned char *)v5 + i + 56) = *((unsigned char *)v4 + i);
    *((void *)v5 + 9) = v3;
  }
  return result;
}

unsigned int *_poly1305_update(unsigned int *result, unsigned int *a2, unint64_t a3)
{
  int v4 = result;
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (a3 < 0x10) {
    goto LABEL_5;
  }
  unsigned int v5 = result[9];
  unsigned int v6 = result[10];
  unsigned int v7 = result[11];
LABEL_3:
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  unint64_t v10 = *((unsigned __int16 *)a2 + 4) | ((unint64_t)*((unsigned __int8 *)a2 + 10) << 16);
  unint64_t v11 = v10 | ((unint64_t)*((unsigned __int8 *)a2 + 11) << 24);
  uint64_t v12 = a2[3];
  a2 += 4;
  a3 -= 16;
  unsigned int v13 = v5 + (v8 & 0x3FFFFFF);
  unsigned int v14 = v6 + (((v8 | (unint64_t)(v9 << 32)) >> 26) & 0x3FFFFFF);
  v4[9] = v13;
  v4[10] = v14;
  unsigned int v15 = v7 + (((v9 | (v10 << 32)) >> 20) & 0x3FFFFFF);
  unsigned int v16 = v4[13];
  unsigned int v17 = (((v11 | (v12 << 32)) >> 14) & 0x3FFFFFF) + v4[12];
  v4[11] = v15;
  v4[12] = v17;
  unsigned int v18 = v16 + (v12 >> 8) + 0x1000000;
  for (v4[13] = v18; ; unsigned int v18 = v4[13] + (v43 >> 8))
  {
    unsigned int v19 = v4[1];
    unsigned int v21 = v4[7];
    unsigned int v20 = v4[8];
    unsigned int v22 = v4[6];
    unsigned int v24 = v4[3];
    unsigned int v23 = v4[4];
    unint64_t v25 = *v4 * (unint64_t)v13
        + v20 * (unint64_t)v14
        + v21 * (unint64_t)v15
        + v22 * (unint64_t)v17
        + v4[5] * (unint64_t)v18;
    unsigned int v26 = v4[2];
    unint64_t v27 = *v4 * (unint64_t)v18;
    int v28 = v25 & 0x3FFFFFF;
    unint64_t v29 = *v4 * (unint64_t)v14
        + v20 * (unint64_t)v15
        + v21 * (unint64_t)v17
        + v22 * (unint64_t)v18
        + v19 * (unint64_t)v13
        + (v25 >> 26);
    unsigned int v6 = v29 & 0x3FFFFFF;
    uint64_t result = (unsigned int *)(*v4 * (unint64_t)v15 + v20 * (unint64_t)v17);
    unint64_t v30 = (unint64_t)result
        + v21 * (unint64_t)v18
        + v19 * (unint64_t)v14
        + v26 * (unint64_t)v13
        + (v29 >> 26);
    unsigned int v7 = v30 & 0x3FFFFFF;
    unint64_t v31 = *v4 * (unint64_t)v17
        + v20 * (unint64_t)v18
        + v19 * (unint64_t)v15
        + v26 * (unint64_t)v14
        + v24 * (unint64_t)v13
        + (v30 >> 26);
    v4[11] = v30 & 0x3FFFFFF;
    v4[12] = v31 & 0x3FFFFFF;
    unint64_t v32 = v27
        + v19 * (unint64_t)v17
        + v26 * (unint64_t)v15
        + v24 * (unint64_t)v14
        + v23 * (unint64_t)v13
        + (v31 >> 26);
    v4[13] = v32 & 0x3FFFFFF;
    unsigned int v5 = 5 * (v32 >> 26) + v28;
    v4[9] = v5;
    v4[10] = v6;
    if (a3 > 0xF) {
      goto LABEL_3;
    }
LABEL_5:
    if (!a3) {
      break;
    }
    for (unint64_t i = 0; i != a3; ++i)
    {
      unint64_t v34 = i;
      *((unsigned char *)&v38 + i) = *((unsigned char *)a2 + i);
    }
    *((unsigned char *)&v38 + a3) = 1;
    if (v34 <= 0xD)
    {
      __int32 v35 = (char *)&v38 + v34 + 2;
      unint64_t v36 = 14 - a3;
      if (a3 > 0xE) {
        unint64_t v36 = 0;
      }
      bzero(v35, v36 + 1);
    }
    a3 = 0;
    unint64_t v37 = v40 | ((unint64_t)v41 << 16);
    unsigned int v13 = v4[9] + (v38 & 0x3FFFFFF);
    unsigned int v14 = v4[10] + (((v38 | ((unint64_t)v39 << 32)) >> 26) & 0x3FFFFFF);
    unsigned int v15 = v4[11] + (((v39 | (v37 << 32)) >> 20) & 0x3FFFFFF);
    unsigned int v17 = (((v37 | ((unint64_t)v42 << 24) | ((unint64_t)v43 << 32)) >> 14) & 0x3FFFFFF) + v4[12];
  }
  return result;
}

uint64_t poly1305_final(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 72);
  if (v4) {
    _poly1305_update((unsigned int *)a1, (unsigned int *)(a1 + 56), v4);
  }
  unsigned int v5 = *(_DWORD *)(a1 + 36);
  int v6 = v5 & 0x3FFFFFF;
  unsigned int v7 = *(_DWORD *)(a1 + 40) + (v5 >> 26);
  int v8 = v7 & 0x3FFFFFF;
  unsigned int v9 = *(_DWORD *)(a1 + 44) + (v7 >> 26);
  int v10 = v9 & 0x3FFFFFF;
  unsigned int v11 = *(_DWORD *)(a1 + 48) + (v9 >> 26);
  int v12 = v11 & 0x3FFFFFF;
  unsigned int v13 = *(_DWORD *)(a1 + 52) + (v11 >> 26);
  unsigned int v14 = 5 * (v13 >> 26) + v6;
  unsigned int v15 = v8 + ((v14 + 5) >> 26);
  unsigned int v16 = v10 + (v15 >> 26);
  unsigned int v17 = v12 + (v16 >> 26);
  signed int v18 = (v13 | 0xFC000000) + (v17 >> 26);
  uint64_t result = (v18 >> 31) - 1;
  int v20 = v14 & (v18 >> 31) | result & 0x3FFFFFF & (v14 + 5);
  unsigned int v21 = v8 & (v18 >> 31) | result & 0x3FFFFFF & v15;
  *(_DWORD *)(a1 + 36) = v20;
  *(_DWORD *)(a1 + 40) = v21;
  unsigned int v22 = v10 & (v18 >> 31) | result & 0x3FFFFFF & v16;
  unsigned int v23 = v12 & (v18 >> 31) | result & 0x3FFFFFF & v17;
  *(_DWORD *)(a1 + 44) = v22;
  *(_DWORD *)(a1 + 48) = v23;
  int v24 = result & v18 | v13 & (v18 >> 31) & 0x3FFFFFF;
  *(_DWORD *)(a1 + 52) = v24;
  int v25 = v20 | (v21 << 26);
  int v26 = *(_DWORD *)(a1 + 80);
  uint64_t v27 = *(unsigned int *)(a1 + 84);
  uint64_t v28 = (v21 >> 6) | (v22 << 20);
  unint64_t v29 = ((v22 >> 12) | (v23 << 14)) + (unint64_t)*(unsigned int *)(a1 + 88);
  unint64_t v30 = ((v23 >> 18) | (v24 << 8)) + (unint64_t)*(unsigned int *)(a1 + 92);
  *(_DWORD *)a2 = v25 + v26;
  unint64_t v31 = v27 + __CFADD__(v25, v26) + v28;
  *(_WORD *)(a2 + 4) = v31;
  *(unsigned char *)(a2 + 6) = BYTE2(v31);
  *(unsigned char *)(a2 + 7) = BYTE3(v31);
  unint64_t v32 = v29 + HIDWORD(v31);
  *(_WORD *)(a2 + 8) = v32;
  *(unsigned char *)(a2 + 10) = BYTE2(v32);
  *(unsigned char *)(a2 + 11) = BYTE3(v32);
  unint64_t v33 = v30 + HIDWORD(v32);
  *(_WORD *)(a2 + 12) = v33;
  *(unsigned char *)(a2 + 14) = BYTE2(v33);
  *(unsigned char *)(a2 + 15) = BYTE3(v33);
  return result;
}

uint64_t poly1305(uint64_t a1, unsigned int *a2, unint64_t a3, unsigned __int16 *a4)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  memset(v8, 0, sizeof(v8));
  poly1305_init((uint64_t)v8, a4);
  poly1305_update((unsigned int *)v8, a2, a3);
  return poly1305_final((uint64_t)v8, a1);
}

uint64_t chacha20_poly1305_init_64x64(int32x4_t *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  chacha20_init_64x64((uint64_t)a1, a2, a3, 0);
  _chacha20_xor(a1, v5, kZero64, 0x40uLL);
  uint64_t result = poly1305_init((uint64_t)&a1[8].i64[1], (unsigned __int16 *)v5);
  a1[14].i64[1] = 0;
  a1[15].i64[0] = 0;
  a1[15].i8[8] = 0;
  return result;
}

uint64_t chacha20_poly1305_init_96x32(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)a1 = xmmword_18E416EA0;
  *(_DWORD *)(a1 + 16) = *a2;
  *(_DWORD *)(a1 + 20) = a2[1];
  *(_DWORD *)(a1 + 24) = a2[2];
  *(_DWORD *)(a1 + 28) = a2[3];
  *(_DWORD *)(a1 + 32) = a2[4];
  *(_DWORD *)(a1 + 36) = a2[5];
  *(_DWORD *)(a1 + 40) = a2[6];
  *(void *)(a1 + 44) = a2[7];
  if (a3)
  {
    *(_DWORD *)(a1 + 52) = *a3;
    *(_DWORD *)(a1 + 56) = a3[1];
    int v4 = a3[2];
  }
  else
  {
    int v4 = 0;
    *(_DWORD *)(a1 + 52) = 0;
    *(_DWORD *)(a1 + 56) = 0;
  }
  *(_DWORD *)(a1 + 60) = v4;
  *(void *)(a1 + 128) = 0;
  _chacha20_xor((int32x4_t *)a1, v6, kZero64, 0x40uLL);
  uint64_t result = poly1305_init(a1 + 136, (unsigned __int16 *)v6);
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(unsigned char *)(a1 + 248) = 0;
  return result;
}

unsigned int *chacha20_poly1305_add_aad(uint64_t a1, unsigned int *a2, unint64_t a3)
{
  uint64_t result = poly1305_update((unsigned int *)(a1 + 136), a2, a3);
  *(void *)(a1 + 232) += a3;
  return result;
}

unint64_t chacha20_poly1305_encrypt(uint64_t a1, int8x16_t *a2, unint64_t a3, int8x16_t *a4)
{
  if (!*(unsigned char *)(a1 + 248))
  {
    if ((*(void *)(a1 + 232) & 0xFLL) != 0) {
      poly1305_update((unsigned int *)(a1 + 136), (unsigned int *)kZero64, 16 - (*(void *)(a1 + 232) & 0xFLL));
    }
    *(unsigned char *)(a1 + 248) = 1;
  }
  unint64_t v8 = chacha20_update(a1, a2, a3, a4);
  if (v8)
  {
    poly1305_update((unsigned int *)(a1 + 136), (unsigned int *)a4, v8);
    *(void *)(a1 + 240) += v8;
  }
  return v8;
}

int64_t chacha20_poly1305_decrypt(uint64_t a1, int8x16_t *a2, unint64_t a3, int8x16_t *a4)
{
  if (!*(unsigned char *)(a1 + 248))
  {
    if ((*(void *)(a1 + 232) & 0xFLL) != 0) {
      poly1305_update((unsigned int *)(a1 + 136), (unsigned int *)kZero64, 16 - (*(void *)(a1 + 232) & 0xFLL));
    }
    *(unsigned char *)(a1 + 248) = 1;
  }
  poly1305_update((unsigned int *)(a1 + 136), (unsigned int *)a2, a3);
  int64_t result = chacha20_update(a1, a2, a3, a4);
  *(void *)(a1 + 240) += result;
  return result;
}

unint64_t chacha20_poly1305_final(unsigned int *__s, int8x16_t *a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)__s + 248) && (*((void *)__s + 29) & 0xFLL) != 0) {
    poly1305_update(__s + 34, (unsigned int *)kZero64, 16 - (*((void *)__s + 29) & 0xFLL));
  }
  unint64_t v6 = chacha20_final(__s, a2);
  if (v6)
  {
    poly1305_update(__s + 34, (unsigned int *)a2, v6);
    unint64_t v7 = *((void *)__s + 30) + v6;
    *((void *)__s + 30) = v7;
  }
  else
  {
    unint64_t v7 = *((void *)__s + 30);
  }
  if ((v7 & 0xF) != 0)
  {
    poly1305_update(__s + 34, (unsigned int *)kZero64, 16 - (v7 & 0xF));
    unint64_t v7 = *((void *)__s + 30);
  }
  uint64_t v8 = *((void *)__s + 29);
  LOWORD(v11) = v8;
  BYTE2(v11) = BYTE2(v8);
  HIBYTE(v11) = BYTE3(v8);
  char v12 = BYTE4(v8);
  char v13 = BYTE5(v8);
  char v14 = BYTE6(v8);
  char v15 = HIBYTE(v8);
  unint64_t v16 = v7;
  uint64_t v9 = __s + 34;
  poly1305_update(v9, &v11, 0x10uLL);
  poly1305_final((uint64_t)v9, a3);
  return v6;
}

uint64_t chacha20_poly1305_verify(unsigned int *__s, int8x16_t *a2, int8x16_t *a3, int *a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)__s + 248) && (*((void *)__s + 29) & 0xFLL) != 0) {
    poly1305_update(__s + 34, (unsigned int *)kZero64, 16 - (*((void *)__s + 29) & 0xFLL));
  }
  uint64_t v8 = chacha20_final(__s, a2);
  uint64_t v9 = v8;
  uint64_t v10 = *((void *)__s + 30);
  if (v8)
  {
    v10 += v8;
    *((void *)__s + 30) = v10;
  }
  if ((v10 & 0xF) != 0)
  {
    poly1305_update(__s + 34, (unsigned int *)kZero64, 16 - (v10 & 0xF));
    uint64_t v10 = *((void *)__s + 30);
  }
  uint64_t v11 = *((void *)__s + 29);
  v16.i64[0] = v11;
  v16.i64[1] = v10;
  char v12 = __s + 34;
  poly1305_update(v12, (unsigned int *)&v16, 0x10uLL);
  poly1305_final((uint64_t)v12, (uint64_t)&v16);
  int8x16_t v13 = veorq_s8(*a3, v16);
  if (vorr_s8(*(int8x8_t *)v13.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL))) {
    int v14 = -6754;
  }
  else {
    int v14 = 0;
  }
  *a4 = v14;
  return v9;
}

uint64_t chacha20_poly1305_encrypt_all_64x64(_DWORD *a1, _DWORD *a2, unsigned int *a3, unint64_t a4, int8x16_t *a5, unint64_t a6, int8x16_t *a7, uint64_t a8)
{
  return _chacha20_poly1305_encrypt_all(a1, a2, 8, a3, a4, a5, a6, a7, a8);
}

uint64_t _chacha20_poly1305_encrypt_all(_DWORD *a1, _DWORD *a2, uint64_t a3, unsigned int *a4, unint64_t a5, int8x16_t *a6, unint64_t a7, int8x16_t *a8, uint64_t a9)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  memset(__s, 0, sizeof(__s));
  if (a3 == 12)
  {
    chacha20_poly1305_init_96x32((uint64_t)__s, a1, a2);
  }
  else
  {
    if (a3 != 8) {
      FatalErrorF((uint64_t)"Bad nonce (%zu). Must be 8 or 12.", (uint64_t)a1, a3, (uint64_t)a4, a5, (uint64_t)a6, a7, (uint64_t)a8, a3);
    }
    chacha20_poly1305_init_64x64(__s, a1, a2);
  }
  int64_t v14 = chacha20_update((uint64_t)__s, a6, a7, a8);
  chacha20_final(__s, (int8x16_t *)((char *)a8 + v14));
  if (a5)
  {
    poly1305_update(&__s[8].u32[2], a4, a5);
    if ((a5 & 0xF) != 0) {
      poly1305_update(&__s[8].u32[2], (unsigned int *)kZero64, 16 - (a5 & 0xF));
    }
  }
  if (a7)
  {
    poly1305_update(&__s[8].u32[2], (unsigned int *)a8, a7);
    if ((a7 & 0xF) != 0) {
      poly1305_update(&__s[8].u32[2], (unsigned int *)kZero64, 16 - (a7 & 0xF));
    }
  }
  LOWORD(v16) = a5;
  BYTE2(v16) = BYTE2(a5);
  HIBYTE(v16) = BYTE3(a5);
  char v17 = BYTE4(a5);
  char v18 = BYTE5(a5);
  char v19 = BYTE6(a5);
  char v20 = HIBYTE(a5);
  unint64_t v21 = a7;
  poly1305_update(&__s[8].u32[2], &v16, 0x10uLL);
  return poly1305_final((uint64_t)&__s[8].i64[1], a9);
}

uint64_t chacha20_poly1305_encrypt_all_96x32(_DWORD *a1, _DWORD *a2, unsigned int *a3, unint64_t a4, int8x16_t *a5, unint64_t a6, int8x16_t *a7, uint64_t a8)
{
  return _chacha20_poly1305_encrypt_all(a1, a2, 12, a3, a4, a5, a6, a7, a8);
}

uint64_t chacha20_poly1305_decrypt_all_64x64(_DWORD *a1, _DWORD *a2, unsigned int *a3, unint64_t a4, int8x16_t *a5, unint64_t a6, int8x16_t *a7, uint64_t a8)
{
  return _chacha20_poly1305_decrypt_all(a1, a2, 8, a3, a4, a5, a6, a7, a8, 16);
}

uint64_t _chacha20_poly1305_decrypt_all(_DWORD *a1, _DWORD *a2, uint64_t a3, unsigned int *a4, unint64_t a5, int8x16_t *a6, unint64_t a7, int8x16_t *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  memset(__s, 0, sizeof(__s));
  if (a3 == 12)
  {
    chacha20_poly1305_init_96x32((uint64_t)__s, a1, a2);
  }
  else
  {
    if (a3 != 8) {
      FatalErrorF((uint64_t)"Bad nonce (%zu). Must be 8 or 12.", (uint64_t)a1, a3, (uint64_t)a4, a5, (uint64_t)a6, a7, (uint64_t)a8, a3);
    }
    chacha20_poly1305_init_64x64(__s, a1, a2);
  }
  if ((unint64_t)(a10 - 17) <= 0xFFFFFFFFFFFFFFEFLL) {
    FatalErrorF((uint64_t)"Auth tag len (%zu) must be 1-16 bytes", v15, v16, v17, v18, v19, v20, v21, a10);
  }
  if (a5)
  {
    poly1305_update(&__s[8].u32[2], a4, a5);
    if ((a5 & 0xF) != 0) {
      poly1305_update(&__s[8].u32[2], (unsigned int *)kZero64, 16 - (a5 & 0xF));
    }
  }
  if (a7)
  {
    poly1305_update(&__s[8].u32[2], (unsigned int *)a6, a7);
    if ((a7 & 0xF) != 0) {
      poly1305_update(&__s[8].u32[2], (unsigned int *)kZero64, 16 - (a7 & 0xF));
    }
  }
  LOWORD(v26) = a5;
  BYTE2(v26) = BYTE2(a5);
  HIBYTE(v26) = BYTE3(a5);
  char v27 = BYTE4(a5);
  char v28 = BYTE5(a5);
  char v29 = BYTE6(a5);
  char v30 = HIBYTE(a5);
  unint64_t v31 = a7;
  poly1305_update(&__s[8].u32[2], &v26, 0x10uLL);
  poly1305_final((uint64_t)&__s[8].i64[1], (uint64_t)&v26);
  uint64_t v22 = 0;
  int v23 = 0;
  do
  {
    v23 |= *(unsigned __int8 *)(a9 + v22) ^ *((unsigned __int8 *)&v26 + v22);
    ++v22;
  }
  while (a10 != v22);
  if (v23) {
    return 4294960542;
  }
  int64_t v24 = chacha20_update((uint64_t)__s, a6, a7, a8);
  chacha20_final(__s, (int8x16_t *)((char *)a8 + v24));
  return 0;
}

uint64_t chacha20_poly1305_decrypt_all_64x64_ex(_DWORD *a1, _DWORD *a2, unsigned int *a3, unint64_t a4, int8x16_t *a5, unint64_t a6, int8x16_t *a7, uint64_t a8, uint64_t a9)
{
  return _chacha20_poly1305_decrypt_all(a1, a2, 8, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t chacha20_poly1305_decrypt_all_96x32(_DWORD *a1, _DWORD *a2, unsigned int *a3, unint64_t a4, int8x16_t *a5, unint64_t a6, int8x16_t *a7, uint64_t a8)
{
  return _chacha20_poly1305_decrypt_all(a1, a2, 12, a3, a4, a5, a6, a7, a8, 16);
}

uint64_t chacha20_poly1305_decrypt_all_96x32_ex(_DWORD *a1, _DWORD *a2, unsigned int *a3, unint64_t a4, int8x16_t *a5, unint64_t a6, int8x16_t *a7, uint64_t a8, uint64_t a9)
{
  return _chacha20_poly1305_decrypt_all(a1, a2, 12, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t CRC16_CCITT(uint64_t result, unsigned __int8 *a2, uint64_t a3)
{
  for (; a3; --a3)
  {
    unsigned int v3 = bswap32(result);
    int v4 = *a2++;
    int v5 = ((v4 ^ BYTE2(v3)) >> 4) ^ v4 ^ HIWORD(v3);
    LODWORD(result) = (32 * v5) ^ (v5 << 12) ^ v5;
  }
  return (unsigned __int16)result;
}

uint64_t Parity32(unsigned int a1)
{
  unsigned int v1 = a1 ^ (a1 >> 1) ^ ((a1 ^ (a1 >> 1)) >> 2);
  unsigned int v2 = v1 ^ (v1 >> 4) ^ ((v1 ^ (v1 >> 4)) >> 8);
  return (v2 ^ HIWORD(v2)) & 1;
}

uint64_t CocoaTextViewAppendUTF8String(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  id v7 = a1;
  if (CocoaTextViewAppendUTF8String_sOnce != -1) {
    dispatch_once(&CocoaTextViewAppendUTF8String_sOnce, &__block_literal_global_538);
  }
  id v8 = [NSString alloc];
  if (a3 == -1) {
    uint64_t v9 = [v8 initWithUTF8String:a2];
  }
  else {
    uint64_t v9 = [v8 initWithBytes:a2 length:a3 encoding:4];
  }
  uint64_t v10 = (void *)v9;
  if (v9
    && (id v11 = objc_alloc(MEMORY[0x1E4F28B18]),
        (uint64_t v12 = [v11 initWithString:v10 attributes:CocoaTextViewAppendUTF8String_sAttributes]) != 0))
  {
    int8x16_t v13 = (void *)v12;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __CocoaTextViewAppendUTF8String_block_invoke_2;
    block[3] = &unk_1E55BD758;
    int v20 = a4;
    id v18 = v7;
    id v19 = v13;
    id v14 = v13;
    dispatch_async(MEMORY[0x1E4F14428], block);

    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = 4294960596;
  }

  return v15;
}

void __CocoaTextViewAppendUTF8String_block_invoke_2(uint64_t a1)
{
  [*(id *)(a1 + 32) contentSize];
  double v3 = v2;
  [*(id *)(a1 + 32) contentInset];
  double v5 = v4;
  [*(id *)(a1 + 32) bounds];
  int v7 = *(_DWORD *)(a1 + 48);
  if ((v7 & 2) != 0 || (v7 & 1) != 0 && (double v8 = v3 + v5 - v6, [*(id *)(a1 + 32) contentOffset], v9 >= v8))
  {
    uint64_t v10 = [*(id *)(a1 + 32) textStorage];
    [v10 appendAttributedString:*(void *)(a1 + 40)];

    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __CocoaTextViewAppendUTF8String_block_invoke_3;
    block[3] = &unk_1E55BFC18;
    id v13 = *(id *)(a1 + 32);
    dispatch_async(MEMORY[0x1E4F14428], block);
  }
  else
  {
    id v11 = [*(id *)(a1 + 32) textStorage];
    [v11 appendAttributedString:*(void *)(a1 + 40)];
  }
}

uint64_t __CocoaTextViewAppendUTF8String_block_invoke_3(uint64_t a1)
{
  [*(id *)(a1 + 32) contentSize];
  double v3 = v2;
  uint64_t result = [*(id *)(a1 + 32) bounds];
  if (v3 > v5)
  {
    [*(id *)(a1 + 32) contentSize];
    double v7 = v6;
    [*(id *)(a1 + 32) contentInset];
    double v9 = v7 + v8;
    [*(id *)(a1 + 32) bounds];
    id v11 = *(void **)(a1 + 32);
    return objc_msgSend(v11, "setContentOffset:animated:", 0, 0.0, v9 - v10);
  }
  return result;
}

void __CocoaTextViewAppendUTF8String_block_invoke()
{
  v5[1] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = getNSFontAttributeName[0]();
  double v4 = v0;
  unsigned int v1 = [(Class)getUIFontClass[0]() systemFontOfSize:10.0];
  v5[0] = v1;
  uint64_t v2 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v5 forKeys:&v4 count:1];
  double v3 = (void *)CocoaTextViewAppendUTF8String_sAttributes;
  CocoaTextViewAppendUTF8String_sAttributes = v2;
}

Class initUIFont()
{
  if (UIKitLibrary_sOnce != -1) {
    dispatch_once(&UIKitLibrary_sOnce, &__block_literal_global_5);
  }
  Class result = objc_getClass("UIFont");
  classUIFont = (uint64_t)result;
  getUIFontClass[0] = (uint64_t (*)())UIFontFunction;
  return result;
}

id UIFontFunction()
{
  return (id)classUIFont;
}

void *__UIKitLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/Frameworks/UIKit.framework/UIKit", 2);
  UIKitLibrary_sLib = (uint64_t)result;
  return result;
}

id initValNSFontAttributeName()
{
  if (UIKitLibrary_sOnce != -1) {
    dispatch_once(&UIKitLibrary_sOnce, &__block_literal_global_5);
  }
  uint64_t v0 = (id *)dlsym((void *)UIKitLibrary_sLib, "NSFontAttributeName");
  if (v0) {
    objc_storeStrong((id *)&constantValNSFontAttributeName, *v0);
  }
  getNSFontAttributeName[0] = (uint64_t (*)())NSFontAttributeNameFunction;
  unsigned int v1 = (void *)constantValNSFontAttributeName;
  return v1;
}

id NSFontAttributeNameFunction()
{
  return (id)constantValNSFontAttributeName;
}

char *CLIInit(int a1, char **a2)
{
  gArgI = 0;
  gArgC = a1;
  gArgV = (uint64_t)a2;
  if (a1 < 1)
  {
    uint64_t v2 = "?";
  }
  else
  {
    gArgI = 1;
    uint64_t v2 = *a2;
  }
  gProgramPath = (uint64_t)v2;
  Class result = strrchr(v2, 47);
  if (result) {
    uint64_t v4 = (uint64_t)(result + 1);
  }
  else {
    uint64_t v4 = (uint64_t)v2;
  }
  gProgramName = v4;
  return result;
}

uint64_t CLIParse(uint64_t a1, int a2)
{
  int v2 = a2;
  uint64_t v3 = a1;
  uint64_t v118 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = &sUpTicksToSecondsOnce;
  uint64_t v5 = gRootOptions;
  double v6 = &sUpTicksToSecondsOnce;
  double v7 = &sUpTicksToSecondsOnce;
  if (gRootOptions) {
    goto LABEL_22;
  }
  gRootFlags = a2;
  double v8 = (const char *)gProgramName;
  for (uint64_t i = a1; *(_DWORD *)i != 3; i += 104)
  {
    if (!*(_DWORD *)i) {
      goto LABEL_21;
    }
LABEL_8:
    ;
  }
  if ((*(unsigned char *)(i + 48) & 0x80) == 0 || strcasecmp(*(const char **)(i + 8), v8)) {
    goto LABEL_8;
  }
  double v10 = malloc_type_malloc(8 * gArgC + 16, 0x50040EE9192B6uLL);
  if (v10)
  {
    uint64_t v11 = (uint64_t)v10;
    uint64_t v12 = gArgC;
    if (gArgC < 1)
    {
      unsigned int v13 = 0;
    }
    else
    {
      *double v10 = *(void *)gArgV;
      unsigned int v13 = 1;
    }
    v10[v13] = gProgramName;
    if ((int)v13 >= (int)v12)
    {
      unsigned int v16 = v13 + 1;
    }
    else
    {
      uint64_t v14 = v13;
      do
      {
        uint64_t v15 = v14++;
        v10[v15 + 1] = *(void *)(gArgV + 8 * v15);
      }
      while (v12 != v14);
      unsigned int v16 = v15 + 2;
    }
    v10[v16] = 0;
    gArgI = (int)v12 > 0;
    gArgC = v16;
    gArgV = (uint64_t)v10;
    if (gArgVAlt) {
      free((void *)gArgVAlt);
    }
    gArgVAlt = v11;
  }
LABEL_21:
  gRootOptions = v3;
LABEL_22:
  gOptionPtr = 0;
  uint64_t v17 = &sUpTicksToSecondsOnce;
  if ((gEndedOptions & 1) == 0)
  {
    int v18 = gArgI;
    while (v18 < *((_DWORD *)v6 + 845))
    {
      id v19 = *(unsigned char **)(gArgV + 8 * v18);
      if (*v19 == 45
        && ((v20 = v19 + 1, int v21 = v19[1], v19[1]) ? (v22 = (v21 - 48) > 9) : (v22 = 0),
            v22))
      {
        if (v21 == 45)
        {
          int64_t v24 = v19 + 2;
          if (!v19[2])
          {
            *((_DWORD *)v7 + 844) = v18 + 1;
            *((unsigned char *)v17 + 984) = 1;
            break;
          }
          int v112 = v2;
          int v25 = strchr(v19 + 2, 61);
          if (!v25) {
            int v25 = (char *)&v24[strlen(v19 + 2)];
          }
          uint64_t v113 = v5;
          uint64_t v114 = v3;
          size_t v26 = v25 - v24;
          if ((unint64_t)(v25 - v24) < 3)
          {
            char v111 = 0;
            char v28 = v19 + 2;
          }
          else
          {
            int v27 = strncasecmp(v19 + 2, "no-", 3uLL);
            if (v27) {
              char v28 = v19 + 2;
            }
            else {
              char v28 = v19 + 5;
            }
            if (v27)
            {
              char v29 = 0;
            }
            else
            {
              size_t v26 = v25 - v24 - 3;
              char v29 = 2;
            }
            char v111 = v29;
          }
          BOOL v37 = 0;
          uint64_t v38 = gRootOptions;
          uint64_t v39 = v114;
          while (1)
          {
            int v40 = *(_DWORD *)v39;
            if (*(_DWORD *)v39) {
              break;
            }
LABEL_71:
            if (v37)
            {
              fprintf((FILE *)*MEMORY[0x1E4F143C8], "error: unknown option '%s'.\n", v24);
              uint64_t v45 = 129;
              double v6 = &sUpTicksToSecondsOnce;
              double v7 = &sUpTicksToSecondsOnce;
              uint64_t v5 = v113;
              goto LABEL_113;
            }
            uint64_t v44 = *(void *)(v39 + 80);
            BOOL v37 = v44 == 0;
            if (v44) {
              uint64_t v39 = *(void *)(v39 + 80);
            }
            else {
              uint64_t v39 = v38;
            }
          }
          uint64_t v41 = v39;
          while (1)
          {
            if ((v40 - 6) <= 9)
            {
              uint64_t v42 = *(void *)(v41 + 8);
              if (v42)
              {
                if (!strncasecmp(*(const char **)(v41 + 8), v28, v26) && !*(unsigned char *)(v42 + v26)) {
                  break;
                }
              }
            }
            int v43 = *(_DWORD *)(v41 + 104);
            v41 += 104;
            int v40 = v43;
            if (!v43) {
              goto LABEL_71;
            }
          }
          if (*v25) {
            gOptionPtr = (uint64_t)(v25 + 1);
          }
          uint64_t v23 = _CLIGetValue(v41, v111);
          double v6 = &sUpTicksToSecondsOnce;
          double v7 = &sUpTicksToSecondsOnce;
          uint64_t v5 = v113;
          uint64_t v3 = v114;
          int v2 = v112;
          uint64_t v4 = &sUpTicksToSecondsOnce;
          uint64_t v17 = &sUpTicksToSecondsOnce;
          if (v23) {
            goto LABEL_106;
          }
        }
        else
        {
          gOptionPtr = (uint64_t)(v19 + 1);
          while (2)
          {
            BOOL v30 = 0;
            uint64_t v31 = v3;
            while (1)
            {
              int v32 = *(_DWORD *)v31;
              if (*(_DWORD *)v31) {
                break;
              }
LABEL_53:
              if (v30)
              {
                fprintf((FILE *)*MEMORY[0x1E4F143C8], "error: unknown option '%c'.\n", *v20);
                goto LABEL_80;
              }
              uint64_t v31 = *(void *)(v31 + 80);
              BOOL v30 = v31 == 0;
              if (!v31) {
                uint64_t v31 = v4[120];
              }
            }
            uint64_t v33 = v31;
            while ((v32 - 6) > 9 || *(_DWORD *)(v33 + 4) != *v20)
            {
              int v34 = *(_DWORD *)(v33 + 104);
              v33 += 104;
              int v32 = v34;
              if (!v34) {
                goto LABEL_53;
              }
            }
            int v36 = v20[1];
            uint64_t v35 = (uint64_t)(v20 + 1);
            if (!v36) {
              uint64_t v35 = 0;
            }
            gOptionPtr = v35;
            uint64_t v23 = _CLIGetValue(v33, 1);
            if (v23) {
              goto LABEL_106;
            }
            int v20 = (char *)gOptionPtr;
            if (gOptionPtr) {
              continue;
            }
            break;
          }
        }
      }
      else
      {
        if ((v2 & 1) == 0) {
          break;
        }
        uint64_t v23 = _CLIReorderArg(*(void *)(gArgV + 8 * v18));
        if (v23) {
          goto LABEL_106;
        }
      }
      int v18 = *((_DWORD *)v7 + 844) + 1;
      *((_DWORD *)v7 + 844) = v18;
      if (v17[123]) {
        break;
      }
    }
  }
  _CLIReorderArg(0);
  if ((v2 & 2) != 0) {
    goto LABEL_112;
  }
  uint64_t v46 = *((int *)v7 + 844);
  if ((int)v46 >= *((_DWORD *)v6 + 845))
  {
    if (_CLIFindOption((unsigned __int8 **)v3, 3, 0, 0))
    {
      uint64_t v64 = *(void *)(v3 + 80);
      if (v64)
      {
        if (!*(void *)(v64 + 64))
        {
          _CLIHelp_PrintCommand(v64, 0, 0);
          goto LABEL_80;
        }
      }
      else if (!gCLIInteractiveMode)
      {
        _CLIHelp_PrintSummary(0);
        goto LABEL_80;
      }
    }
LABEL_112:
    uint64_t v45 = 0;
    goto LABEL_113;
  }
  int32x4_t v47 = *(char **)(gArgV + 8 * v46);
  int32x4_t v48 = _CLIFindOption((unsigned __int8 **)v3, 3, 0, v47);
  if (!v48)
  {
    if (_CLIFindOption((unsigned __int8 **)v3, 3, 0, 0))
    {
      _CLIPrintCommandNotFound((uint64_t)v47, *(void *)(v3 + 80));
      goto LABEL_80;
    }
    goto LABEL_112;
  }
  uint64_t v49 = (uint64_t)v48;
  gCLICurrentCommand = (uint64_t)v48;
  v48[10] = *(const char **)(v3 + 80);
  ++*((_DWORD *)v7 + 844);
  int32x4_t v50 = (unsigned __int8 **)v48[9];
  if (!v50) {
    goto LABEL_89;
  }
  int32x4_t v51 = _CLIFindOption(v50, 3, 0, 0);
  *(void *)(*(void *)(v49 + 72) + 80) = v49;
  uint64_t v23 = ((uint64_t (*)(void))CLIParse)();
  if (v23) {
    goto LABEL_106;
  }
  if (v51)
  {
LABEL_90:
    int32x4_t v58 = *(_DWORD **)(v49 + 72);
    if (!v58 || !*v58)
    {
LABEL_108:
      gCLICurrentOption = v49;
      int v65 = *(void (**)(void))(v49 + 64);
      if (v65) {
        v65();
      }
      uint64_t v45 = 133;
      goto LABEL_113;
    }
    int v59 = 0;
    char v60 = 1;
    do
    {
      while ((v58[12] & 0x30) == 0x10)
      {
        int v62 = _CLIHelp_PrintOptionName((uint64_t)v58, 0, v52, v53, v54, v55, v56, v57);
        char v60 = 0;
        if (v62 > v59) {
          int v59 = v62;
        }
        int v63 = v58[26];
        v58 += 26;
        if (!v63) {
          goto LABEL_161;
        }
      }
      int v61 = v58[26];
      v58 += 26;
    }
    while (v61);
    if (v60) {
      goto LABEL_108;
    }
LABEL_161:
    int32x4_t v101 = *(_DWORD **)(v49 + 72);
    if (v101 && *v101)
    {
      int v102 = (FILE **)MEMORY[0x1E4F143C8];
      uint64_t v45 = 129;
      do
      {
        if ((v101[12] & 0x30) == 0x10)
        {
          fwrite("error: ", 7uLL, 1uLL, *v102);
          int v109 = _CLIHelp_PrintOptionName((uint64_t)v101, (uint64_t (*)(const char *, uint64_t))*v102, v103, v104, v105, v106, v107, v108);
          fprintf(*v102, "%*s not specified\n", v59 - v109, "");
        }
        int v110 = v101[26];
        v101 += 26;
      }
      while (v110);
      goto LABEL_113;
    }
LABEL_80:
    uint64_t v45 = 129;
    goto LABEL_113;
  }
LABEL_89:
  uint64_t v23 = CLIParse(v3, v2 | 3u);
  if (!v23) {
    goto LABEL_90;
  }
LABEL_106:
  uint64_t v45 = v23;
LABEL_113:
  if (!v5)
  {
    if (v45 == 133) {
      unsigned int v67 = 0;
    }
    else {
      unsigned int v67 = v45;
    }
    if (!v67)
    {
      int v68 = *((_DWORD *)v7 + 844);
      if (v68 < *((_DWORD *)v6 + 845))
      {
        int v69 = (FILE **)MEMORY[0x1E4F143C8];
        do
        {
          fprintf(*v69, "warning: unused argument '%s'.\n", *(const char **)(gArgV + 8 * v68));
          int v68 = *((_DWORD *)v7 + 844) + 1;
          *((_DWORD *)v7 + 844) = v68;
        }
        while (v68 < *((_DWORD *)v6 + 845));
      }
    }
    uint64_t v45 = v67 == -6752 ? 0 : v67;
    if (!v45)
    {
      if (gCLIInteractivePending)
      {
        uint64_t v45 = 0;
        gCLIInteractivePending = 0;
        if (!gCLIInteractiveInputSource)
        {
          int v70 = signal(2, (void (__cdecl *)(int))1);
          uint64_t v71 = gProgramName;
          *(void *)var_rl_readline_name[0]() = v71;
          *(void *)var_rl_attempted_completion_function[0]() = _CLIInteractiveCompleter;
          __dst[0] = 0;
          __int32 v72 = getenv("HOME");
          if (v72)
          {
            int v73 = v72;
            goto LABEL_130;
          }
          memset(&v116, 0, sizeof(v116));
          uint64_t v74 = sysconf(71);
          if (v74 >= 1) {
            size_t v75 = v74;
          }
          else {
            size_t v75 = 4096;
          }
          int v76 = (char *)malloc_type_malloc(v75, 0x96F5E23uLL);
          if (v76)
          {
            int32x4_t v77 = v76;
            int32x4_t v115 = 0;
            uid_t v78 = getuid();
            if (getpwuid_r(v78, &v116, v77, v75, &v115) || !v115 || (pw_dir = v115->pw_dir) == 0)
            {
              if (getuid()) {
                pw_dir = ".";
              }
              else {
                pw_dir = "/root";
              }
            }
            strlcpy(__dst, pw_dir, 0x400uLL);
            free(v77);
          }
          else
          {
            if (getuid()) {
              int v73 = ".";
            }
            else {
              int v73 = "/root";
            }
LABEL_130:
            strlcpy(__dst, v73, 0x400uLL);
          }
          size_t v80 = strlen(__dst);
          snprintf(&__dst[v80], 1024 - v80, "/.%s_history", (const char *)gProgramName);
          ((void (*)(uint64_t))softLinkread_history[0])((uint64_t)__dst);
          int v81 = MEMORY[0x1E4F14428];
          id v82 = MEMORY[0x1E4F14428];
          int v83 = (FILE **)var_rl_instream[0]();
          int v84 = fileno(*v83);
          dispatch_source_t v85 = dispatch_source_create(MEMORY[0x1E4F14478], v84, 0, v81);
          int v86 = (void *)gCLIInteractiveInputSource;
          gCLIInteractiveInputSource = (uint64_t)v85;

          if (gCLIInteractiveInputSource
            && (dispatch_source_set_event_handler_f((dispatch_source_t)gCLIInteractiveInputSource, (dispatch_function_t)_CLIInteractiveHandleInput), dispatch_resume((dispatch_object_t)gCLIInteractiveInputSource), v87 = dispatch_source_create(MEMORY[0x1E4F14480], 2uLL, 0, MEMORY[0x1E4F14428]), int32x4_t v88 = (void *)gCLIInteractiveSigIntSignalSource, gCLIInteractiveSigIntSignalSource = (uint64_t)v87, v88, gCLIInteractiveSigIntSignalSource))
          {
            dispatch_source_set_event_handler_f((dispatch_source_t)gCLIInteractiveSigIntSignalSource, (dispatch_function_t)_CLIInteractiveHandleSigIntDirect);
            dispatch_resume((dispatch_object_t)gCLIInteractiveSigIntSignalSource);
            uint64_t v45 = _CLIInteractiveReset();
            if (!v45)
            {
              int v89 = (void *)MEMORY[0x192FAA9B0]();
              int v90 = [MEMORY[0x1E4F1CAC0] currentRunLoop];
              gCLIInteractiveMode = 1;
              uint64_t v91 = *MEMORY[0x1E4F1C3A0];
              do
              {
                int v92 = [MEMORY[0x1E4F1C9C8] distantFuture];
                int v93 = [v90 runMode:v91 beforeDate:v92];

                if (v93) {
                  BOOL v94 = gCLIInteractiveMode == 0;
                }
                else {
                  BOOL v94 = 1;
                }
              }
              while (!v94);

              softLinkrl_callback_handler_remove[0]();
              softLinkwrite_history((uint64_t)__dst);
              ((void (*)(uint64_t, uint64_t))softLinkhistory_truncate_file[0])((uint64_t)__dst, 512);
              uint64_t v45 = 0;
            }
          }
          else
          {
            uint64_t v45 = 4294960596;
          }
          if (v70 != (void (__cdecl *)(int))-1) {
            signal(2, v70);
          }
          if (gCLIInteractiveInputSource)
          {
            int32x4_t v95 = (id)gCLIInteractiveInputSource;
            dispatch_source_cancel(v95);
            __int32 v96 = (void *)gCLIInteractiveInputSource;
            gCLIInteractiveInputSource = 0;
          }
          if (gCLIInteractiveSigIntSignalSource)
          {
            int v97 = (id)gCLIInteractiveSigIntSignalSource;
            dispatch_source_cancel(v97);
            int8x16_t v98 = (void *)gCLIInteractiveSigIntSignalSource;
            gCLIInteractiveSigIntSignalSource = 0;
          }
          if (gCLIInteractiveSigIntTimerSource)
          {
            int v99 = (id)gCLIInteractiveSigIntTimerSource;
            dispatch_source_cancel(v99);
            int v100 = (void *)gCLIInteractiveSigIntTimerSource;
            gCLIInteractiveSigIntTimerSource = 0;
          }
        }
      }
    }
  }
  return v45;
}

uint64_t _CLIReorderArg(uint64_t a1)
{
  if (a1)
  {
    int v2 = (void *)gMutableArgV;
    if (gMutableArgV
      || (int v2 = malloc_type_malloc(8 * gArgC + 8, 0x50040EE9192B6uLL), (gMutableArgV = (uint64_t)v2) != 0))
    {
      uint64_t result = 0;
      uint64_t v4 = gMutableArgC++;
      v2[v4] = a1;
    }
    else
    {
      return 130;
    }
  }
  else
  {
    uint64_t v5 = gMutableArgC;
    if (gMutableArgC < 1)
    {
      return 0;
    }
    else
    {
      uint64_t v6 = gArgC;
      uint64_t v7 = gArgI;
      uint64_t v8 = gMutableArgV;
      if (gArgI < gArgC)
      {
        do
          *(void *)(v8 + 8 * v5++) = *(void *)(gArgV + 8 * v7++);
        while (v6 != v7);
      }
      uint64_t result = 0;
      *(void *)(v8 + 8 * (int)v5) = 0;
      gArgI = 0;
      gArgC = v5;
      gArgV = v8;
      gMutableArgC = 0;
    }
  }
  return result;
}

uint64_t _CLIGetValue(uint64_t a1, char a2)
{
  uint64_t v3 = a1;
  unsigned int v4 = *(_DWORD *)(a1 + 48);
  if ((a2 & 2) != 0)
  {
    if ((v4 & 4) != 0)
    {
      char v12 = a2 & 0xFD;
      uint64_t v11 = "can't be negated";
LABEL_22:
      _CLIOptionError(a1, v11, v12);
      return 129;
    }
    char v5 = gOptionPtr;
    if (gOptionPtr)
    {
LABEL_19:
      uint64_t v11 = "doesn't take a value";
LABEL_20:
      a1 = v3;
      char v12 = a2;
      goto LABEL_22;
    }
  }
  else
  {
    char v5 = gOptionPtr != 0;
    if (a2 & 1) == 0 && gOptionPtr && (*(_DWORD *)(a1 + 48)) {
      goto LABEL_19;
    }
  }
  unsigned int v39 = 0;
  cStr = 0;
  __endptr = 0;
  int v7 = *(_DWORD *)a1;
  switch(*(_DWORD *)a1)
  {
    case 6:
      unsigned int v13 = *(int **)(a1 + 16);
      if ((a2 & 2) != 0)
      {
        int v14 = 0;
      }
      else if (*v13 >= 1)
      {
        int v14 = *v13 + 1;
      }
      else
      {
        int v14 = 1;
      }
      *unsigned int v13 = v14;
      goto LABEL_118;
    case 7:
      if ((a2 & 2) != 0) {
        goto LABEL_86;
      }
      if ((v4 >> 1)) {
        char v15 = v5;
      }
      else {
        char v15 = 1;
      }
      if (v15)
      {
        uint64_t result = _CLIGetArg(a1, a2, *(void **)(a1 + 16));
        goto LABEL_117;
      }
      **(void **)(a1 + 16) = *(void *)(a1 + 32);
      goto LABEL_118;
    case 8:
      unsigned int v16 = *(CFTypeRef **)(a1 + 16);
      if ((a2 & 2) != 0)
      {
        if (*v16)
        {
          CFRelease(*v16);
          *unsigned int v16 = 0;
        }
        goto LABEL_108;
      }
      if ((v4 >> 1)) {
        char v17 = v5;
      }
      else {
        char v17 = 1;
      }
      if ((v17 & 1) == 0)
      {
        CFTypeRef v35 = *v16;
        int v36 = *(const void **)(a1 + 32);
        if (v36) {
          CFRetain(*(CFTypeRef *)(a1 + 32));
        }
        *unsigned int v16 = v36;
        if (v35) {
          CFRelease(v35);
        }
LABEL_108:
        unsigned int v39 = 0;
        goto LABEL_116;
      }
      uint64_t result = _CLIGetArg(a1, a2, &cStr);
      unsigned int v39 = result;
      if (result) {
        return result;
      }
      CFStringRef v18 = CFStringCreateWithCString(0, cStr, 0x8000100u);
      if (!v18) {
        return 130;
      }
      CFStringRef v19 = v18;
      if (*v16) {
        CFRelease(*v16);
      }
      *unsigned int v16 = v19;
LABEL_116:
      uint64_t result = v39;
LABEL_117:
      if (!result)
      {
LABEL_118:
        uint64_t result = 0;
        *(_DWORD *)(v3 + 48) |= 0x20u;
      }
      return result;
    case 9:
      if ((a2 & 2) != 0)
      {
        StringArray_Free(**(void ****)(a1 + 16), **(void **)(a1 + 24));
        int v34 = *(void **)(v3 + 24);
        goto LABEL_97;
      }
      if ((v4 >> 1)) {
        char v20 = v5;
      }
      else {
        char v20 = 1;
      }
      if (v20)
      {
        uint64_t result = _CLIGetArg(a1, a2, &cStr);
        if (result) {
          return result;
        }
        int v21 = *(const void ***)(v3 + 16);
        BOOL v22 = *(uint64_t **)(v3 + 24);
        uint64_t v23 = cStr;
      }
      else
      {
        int v21 = *(const void ***)(a1 + 16);
        BOOL v22 = *(uint64_t **)(v3 + 24);
        uint64_t v23 = *(char **)(v3 + 32);
      }
      if (StringArray_Append(v21, v22, v23)) {
        return 130;
      }
      goto LABEL_118;
    case 0xA:
      if ((a2 & 2) != 0)
      {
        **(_DWORD **)(a1 + 16) = 0;
        goto LABEL_118;
      }
      if ((v4 >> 1)) {
        char v24 = v5;
      }
      else {
        char v24 = 1;
      }
      if ((v24 & 1) == 0)
      {
        **(_DWORD **)(a1 + 16) = *(void *)(a1 + 32);
        goto LABEL_118;
      }
      uint64_t result = _CLIGetArg(a1, a2, &cStr);
      unsigned int v39 = result;
      if (result) {
        return result;
      }
      **(_DWORD **)(v3 + 16) = strtol(cStr, &__endptr, 0);
      if (*__endptr)
      {
        uint64_t v11 = "expects an integer value";
        goto LABEL_20;
      }
      goto LABEL_116;
    case 0xB:
      gCLICurrentOption = a1;
      if ((a2 & 2) != 0)
      {
        size_t v26 = *(uint64_t (**)(void))(a1 + 56);
      }
      else if ((v4 & 1) != 0 || (((v4 >> 1) & 1) == 0 ? (char v25 = 1) : (char v25 = v5), (v25 & 1) == 0))
      {
        size_t v26 = *(uint64_t (**)(void))(a1 + 56);
      }
      else
      {
        uint64_t result = _CLIGetArg(a1, a2, &cStr);
        if (result) {
          return result;
        }
        size_t v26 = *(uint64_t (**)(void))(v3 + 56);
      }
      uint64_t result = v26();
      goto LABEL_117;
    case 0xC:
      if ((a2 & 2) != 0)
      {
LABEL_86:
        int v34 = *(void **)(a1 + 16);
LABEL_97:
        *int v34 = 0;
        goto LABEL_118;
      }
      if ((v4 >> 1)) {
        char v27 = v5;
      }
      else {
        char v27 = 1;
      }
      if ((v27 & 1) == 0)
      {
        **(double **)(a1 + 16) = (double)*(uint64_t *)(a1 + 32);
        goto LABEL_118;
      }
      uint64_t result = _CLIGetArg(a1, a2, &cStr);
      unsigned int v39 = result;
      if (result) {
        return result;
      }
      **(double **)(v3 + 16) = strtod(cStr, &__endptr);
      if (*__endptr)
      {
        uint64_t v11 = "expects a numeric value";
        goto LABEL_20;
      }
      goto LABEL_116;
    case 0xD:
    case 0xE:
      if ((a2 & 2) != 0)
      {
        unint64_t v10 = 0;
        if (v7 == 13) {
          goto LABEL_90;
        }
      }
      else
      {
        if ((v4 >> 1)) {
          char v8 = v5;
        }
        else {
          char v8 = 1;
        }
        if (v8)
        {
          uint64_t result = _CLIGetArg(a1, a2, &cStr);
          unsigned int v39 = result;
          if (result) {
            return result;
          }
          unint64_t v10 = CLIFlagsToValueEx(0, cStr, *(const char **)(v3 + 24), (int *)&v39);
          if (v39) {
            return 129;
          }
          int v7 = *(_DWORD *)v3;
        }
        else
        {
          unint64_t v10 = *(void *)(a1 + 32);
        }
        if (v7 == 13)
        {
          if (HIDWORD(v10))
          {
            fprintf((FILE *)*MEMORY[0x1E4F143C8], "error: flags out-of-range: 0x%llx\n", v10);
            return 129;
          }
LABEL_90:
          **(_DWORD **)(v3 + 16) = v10;
          goto LABEL_116;
        }
      }
      **(void **)(v3 + 16) = v10;
      goto LABEL_116;
    case 0xF:
      if ((a2 & 2) != 0)
      {
        int v33 = 0;
      }
      else
      {
        if ((v4 >> 1)) {
          char v28 = v5;
        }
        else {
          char v28 = 1;
        }
        if (v28)
        {
          uint64_t result = _CLIGetArg(a1, a2, &cStr);
          unsigned int v39 = result;
          if (result) {
            return result;
          }
          int v33 = CLIArgNameValueParse(*(void *)(v3 + 40), cStr, (int *)&v39, *(const char ***)(v3 + 24), v29, v30, v31, v32);
          if (v39) {
            return 129;
          }
        }
        else
        {
          int v33 = *(_DWORD *)(a1 + 32);
        }
      }
      **(_DWORD **)(v3 + 16) = v33;
      goto LABEL_116;
    default:
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "BUG: unknown option type %d\n", *(_DWORD *)a1);
      return 128;
  }
}

const char **_CLIFindOption(unsigned __int8 **a1, int a2, char a3, char *a4)
{
  if (!a1) {
    return 0;
  }
  unsigned int v4 = a1;
  int v5 = *(_DWORD *)a1;
  if (!*(_DWORD *)a1) {
    return 0;
  }
  int v9 = *(_DWORD *)a1;
  unint64_t v10 = (const char **)a1;
  while (v9 != a2 && (a2 != 5 || (v9 - 6) > 9)
       || (a3 & 1) != 0 && ((_BYTE)v10[6] & 0x40) != 0
       || a4 && strcasecmp(v10[1], a4))
  {
    int v11 = *((_DWORD *)v10 + 26);
    v10 += 13;
    int v9 = v11;
    if (!v11)
    {
      if ((gRootFlags & 4) == 0)
      {
        int v12 = 0;
        unint64_t v10 = 0;
        do
        {
          if (v5 != a2 && (a2 != 5 || (v5 - 6) > 9)
            || (a3 & 1) != 0 && ((_BYTE)v4[6] & 0x40) != 0
            || a4 && stricmp_prefix(v4[1], (unsigned __int8 *)a4))
          {
            unsigned int v13 = v10;
          }
          else
          {
            ++v12;
            unsigned int v13 = (const char **)v4;
            if (v10) {
              break;
            }
          }
          int v14 = *((_DWORD *)v4 + 26);
          v4 += 13;
          int v5 = v14;
          unint64_t v10 = v13;
        }
        while (v14);
        if (v12 == 1) {
          return v10;
        }
      }
      return 0;
    }
  }
  return v10;
}

const char **_CLIHelp_PrintCommand(uint64_t a1, int a2, int a3)
{
  uint64_t v4 = a1;
  if (!a2) {
    goto LABEL_6;
  }
  int v5 = *(const char ***)(a1 + 72);
  if (!v5) {
    goto LABEL_7;
  }
  uint64_t v6 = gArgI;
  if (gArgI >= gArgC)
  {
LABEL_6:
    int v5 = 0;
    goto LABEL_7;
  }
  ++gArgI;
  int v5 = _CLIFindOption((unsigned __int8 **)v5, 3, 0, *(char **)(gArgV + 8 * v6));
  if (!v5) {
    return (const char **)fprintf((FILE *)*MEMORY[0x1E4F143C8], "error: unknown %s sub-command '%s'.\n");
  }
  v5[10] = (const char *)v4;
LABEL_7:
  if (v5) {
    uint64_t v4 = (uint64_t)v5;
  }
  int v7 = (FILE **)MEMORY[0x1E4F143D8];
  fprintf((FILE *)*MEMORY[0x1E4F143D8], "\n%s\n", *(const char **)(v4 + 88));
  _CLIHelp_PrintUsageLine(v4);
  fputc(10, *v7);
  if (_CLIFindOption((unsigned __int8 **)gRootOptions, 5, 1, 0)) {
    _CLIHelp_PrintOptions((int *)gRootOptions, "Global options:", a3 | 3u, v8, v9, v10, v11, v12);
  }
  uint64_t v13 = *(void *)(v4 + 80);
  if (v13)
  {
    int v14 = *(int **)(v13 + 72);
    if (v14) {
      _CLIHelp_PrintOptions(v14, "Parent options:", a3 | 1u, v8, v9, v10, v11, v12);
    }
  }
  uint64_t result = *(const char ***)(v4 + 72);
  if (result)
  {
    _CLIHelp_PrintOptions((int *)result, "Options:", a3 | 1u, v8, v9, v10, v11, v12);
    int v16 = 0;
    uint64_t v17 = *(void *)(v4 + 72);
    for (uint64_t i = (const char **)(v17 + 8); ; i += 13)
    {
      int v19 = *((_DWORD *)i - 2);
      if (v19 == 3)
      {
        int v20 = strlen(*i);
        if (v16 <= v20) {
          int v16 = v20;
        }
      }
      else if (!v19)
      {
        while (1)
        {
          if (*(_DWORD *)v17 == 3)
          {
            if (!v19) {
              fwrite("Commands:\n", 0xAuLL, 1uLL, *v7);
            }
            fprintf(*v7, "%*s%-*s    %s\n", 4, "", v16, *(const char **)(v17 + 8), *(const char **)(v17 + 88));
            ++v19;
          }
          else if (!*(_DWORD *)v17)
          {
            for (size_t j = *(unsigned __int8 ***)(v4 + 72); ; size_t j = (unsigned __int8 **)(v22 + 13))
            {
              uint64_t result = _CLIFindOption(j, 1, 0, 0);
              if (!result) {
                break;
              }
              BOOL v22 = result;
              fprintf(*v7, "%s\n", result[11]);
              FPrintF((uint64_t (*)(const char *, uint64_t))*v7, "%1{text}", v23, v24, v25, v26, v27, v28, (uint64_t)v22[12]);
              fputc(10, *v7);
            }
            if (v19) {
              uint64_t result = (const char **)fprintf(*v7, "\nSee '%s help %s <command>' for more info about a command.\n\n", (const char *)gProgramName, *(const char **)(v4 + 8));
            }
            goto LABEL_33;
          }
          v17 += 104;
        }
      }
    }
  }
LABEL_33:
  if (*(void *)(v4 + 96)) {
    return (const char **)fprintf(*v7, "%s\n");
  }
  return result;
}

size_t _CLIHelp_PrintSummary(int a1)
{
  BOOL v2 = a1 == 0;
  _CLIHelp_PrintUsageLine(gRootOptions);
  uint64_t v3 = (FILE **)MEMORY[0x1E4F143D8];
  fputc(10, (FILE *)*MEMORY[0x1E4F143D8]);
  size_t result = _CLIHelp_PrintOptions((int *)gRootOptions, "Global options:", (4 * v2), v4, v5, v6, v7, v8);
  int v10 = result;
  int v11 = 0;
  for (uint64_t i = gRootOptions; *(_DWORD *)i == 3; i += 104)
  {
    if (a1 || (*(unsigned char *)(i + 49) & 1) == 0)
    {
      size_t result = strlen(*(const char **)(i + 8));
      if (v11 <= (int)result) {
        int v11 = result;
      }
    }
LABEL_9:
    ;
  }
  if (*(_DWORD *)i) {
    goto LABEL_9;
  }
  int v13 = *(_DWORD *)gRootOptions;
  int v24 = v10;
  if (*(_DWORD *)gRootOptions)
  {
    int v14 = (_DWORD *)(gRootOptions + 104);
    int v15 = *(_DWORD *)gRootOptions;
    while (a1 || v15 != 3 || (*((unsigned char *)v14 - 55) & 1) == 0)
    {
      int v16 = *v14;
      v14 += 26;
      int v15 = v16;
      if (!v16) {
        goto LABEL_16;
      }
    }
    int v17 = 0;
  }
  else
  {
LABEL_16:
    int v17 = 1;
  }
  int v18 = 0;
  int v23 = v17;
  if (a1) {
    int v17 = 1;
  }
  if (v17) {
    int v19 = "Commands";
  }
  else {
    int v19 = "Commonly used commands";
  }
  int v20 = (const char **)(gRootOptions + 104);
  while (2)
  {
    if (v13 == 3)
    {
      if (a1 || (*((unsigned char *)v20 - 55) & 1) == 0)
      {
        if (!v18) {
          fprintf(*v3, "%s:\n", v19);
        }
        size_t result = fprintf(*v3, "%*s%-*s    %s\n", 4, "", v11, *(v20 - 12), *(v20 - 2));
        ++v18;
      }
      goto LABEL_32;
    }
    if (v13)
    {
LABEL_32:
      int v21 = *(_DWORD *)v20;
      v20 += 13;
      int v13 = v21;
      continue;
    }
    break;
  }
  if (v24 | v18) {
    size_t result = fputc(10, *v3);
  }
  if (v23)
  {
    if (!v18) {
      return result;
    }
    return fprintf(*v3, "See '%s help <command>' for more info about a command.\n\n", (const char *)gProgramName);
  }
  fprintf(*v3, "See '%s help' for a full list of commands.\n", (const char *)gProgramName);
  if (v18) {
    return fprintf(*v3, "See '%s help <command>' for more info about a command.\n\n", (const char *)gProgramName);
  }
  BOOL v22 = *v3;
  return fputc(10, v22);
}

uint64_t _CLIHelp_PrintOptionName(uint64_t a1, uint64_t (*a2)(const char *, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_DWORD *)(a1 + 4))
  {
    uint64_t v10 = FPrintF(a2, "-%c", a3, a4, a5, a6, a7, a8, *(unsigned int *)(a1 + 4));
    if (*(void *)(a1 + 8)) {
      uint64_t v10 = FPrintF(a2, ", ", a3, a4, a5, a6, a7, a8, v21) + v10;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  if (*(_DWORD *)a1 == 4)
  {
    uint64_t v11 = 91;
    if ((*(_DWORD *)(a1 + 48) & 2) == 0) {
      uint64_t v11 = 60;
    }
    int v12 = FPrintF(a2, "%c%s%c", a3, a4, a5, a6, a7, a8, v11);
    return (v12 + v10);
  }
  if (*(void *)(a1 + 8)) {
    uint64_t v10 = FPrintF(a2, "--%s", a3, a4, a5, a6, a7, a8, *(void *)(a1 + 8)) + v10;
  }
  int v13 = *(_DWORD *)(a1 + 48);
  if ((v13 & 1) == 0)
  {
    if ((v13 & 8) != 0)
    {
      BOOL v14 = 1;
      if ((v13 & 2) != 0) {
        goto LABEL_14;
      }
    }
    else
    {
      BOOL v14 = *(void *)(a1 + 40) == 0;
      if ((v13 & 2) != 0)
      {
LABEL_14:
        int v15 = "[<%s>]";
        BOOL v16 = !v14;
        int v17 = "[=<%s>]";
        if (!v16)
        {
          int v15 = "[%s]";
          int v17 = "[=%s]";
        }
        if (*(void *)(a1 + 8)) {
          int v18 = (char *)v17;
        }
        else {
          int v18 = (char *)v15;
        }
        goto LABEL_23;
      }
    }
    if (v14) {
      int v18 = " %s";
    }
    else {
      int v18 = " <%s>";
    }
LABEL_23:
    int v19 = *(const char **)(a1 + 40);
    if (!v19) {
      int v19 = "...";
    }
    int v12 = FPrintF(a2, (unsigned __int8 *)v18, a3, a4, a5, a6, a7, a8, (uint64_t)v19);
    return (v12 + v10);
  }
  return v10;
}

uint64_t _CLIPrintCommandNotFound(uint64_t a1, uint64_t a2)
{
  BOOL v2 = (FILE *)*MEMORY[0x1E4F143C8];
  if (a2) {
    return fprintf(v2, "error: unknown %s command '%s'. See '%s help %s' for a list of commands.\n");
  }
  else {
    return fprintf(v2, "error: unknown command '%s'. See '%s help' for a list of commands.\n");
  }
}

uint64_t _CLIInteractiveReset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  FPrintF((uint64_t (*)(const char *, uint64_t))*MEMORY[0x1E4F143D8], "\r", a3, a4, a5, a6, a7, a8, v16);
  if (gCLIInteractivePrompt)
  {
    softLinkrl_callback_handler_remove[0]();
    ((void (*)(uint64_t, uint64_t))softLinkrl_callback_handler_install[0])(gCLIInteractivePrompt, (uint64_t)_CLIInteractiveHandleLine);
  }
  else
  {
    int v17 = 0;
    ASPrintF(&v17, (uint64_t)"%s> ", v8, v9, v10, v11, v12, v13, gProgramName);
    BOOL v14 = v17;
    if (!v17)
    {
      gCLIInteractiveMode = 0;
      return 4294960568;
    }
    softLinkrl_callback_handler_remove[0]();
    ((void (*)(uint64_t, uint64_t))softLinkrl_callback_handler_install[0])((uint64_t)v14, (uint64_t)_CLIInteractiveHandleLine);
    free(v14);
  }
  return 0;
}

uint64_t inithistory_truncate_file(uint64_t a1, uint64_t a2)
{
  if (editLibrary_sOnce != -1) {
    dispatch_once(&editLibrary_sOnce, &__block_literal_global_558);
  }
  uint64_t v4 = (uint64_t (*)())dlsym((void *)editLibrary_sLib, "history_truncate_file");
  softLinkhistory_truncate_file[0] = v4;
  return ((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2);
}

void *__editLibrary_block_invoke()
{
  size_t result = dlopen("/usr/lib/libedit.dylib", 2);
  editLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t initwrite_history(uint64_t a1)
{
  if (editLibrary_sOnce != -1) {
    dispatch_once(&editLibrary_sOnce, &__block_literal_global_558);
  }
  BOOL v2 = (uint64_t (*)())dlsym((void *)editLibrary_sLib, "write_history");
  softLinkwrite_history = v2;
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

uint64_t initrl_callback_handler_remove()
{
  if (editLibrary_sOnce != -1) {
    dispatch_once(&editLibrary_sOnce, &__block_literal_global_558);
  }
  uint64_t v0 = (uint64_t (*)())dlsym((void *)editLibrary_sLib, "rl_callback_handler_remove");
  softLinkrl_callback_handler_remove[0] = v0;
  return v0();
}

uint64_t initrl_callback_handler_install(uint64_t a1, uint64_t a2)
{
  if (editLibrary_sOnce != -1) {
    dispatch_once(&editLibrary_sOnce, &__block_literal_global_558);
  }
  uint64_t v4 = (uint64_t (*)())dlsym((void *)editLibrary_sLib, "rl_callback_handler_install");
  softLinkrl_callback_handler_install[0] = v4;
  return ((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2);
}

void _CLIInteractiveHandleLine(void *a1)
{
  __s2 = 0;
  int v16 = 0;
  int v15 = 0;
  if (!a1) {
    goto LABEL_20;
  }
  int v2 = 0;
  if (!_CLIInteractiveLineHook((uint64_t)a1, 0))
  {
    int v4 = ((uint64_t (*)(uint64_t, uint64_t))softLinkhistory_expand[0])((uint64_t)a1, (uint64_t)&__s2);
    if (v4 && *__s2) {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s\n", __s2);
    }
    int v2 = 0;
    if ((v4 & 0x80000000) == 0 && v4 != 2)
    {
      uint64_t v3 = __s2;
      if (!__s2)
      {
        int v2 = 0;
        goto LABEL_23;
      }
      if (!strcasecmp(__s2, "q"))
      {
        int v2 = -6752;
LABEL_22:
        free(v3);
        if (!a1) {
          goto LABEL_5;
        }
LABEL_23:
        free(a1);
        if (!v2) {
          goto LABEL_24;
        }
LABEL_27:
        gCLIInteractiveMode = 0;
        return;
      }
      if (strcasecmp(v3, "quit") && strcasecmp(v3, "exit"))
      {
        int v2 = strcasecmp(v3, "history");
        if (v2)
        {
          if (!strcasecmp(v3, "?"))
          {
            free(v3);
            __s2 = strdup("help");
            if (!__s2)
            {
              int v2 = -6728;
              goto LABEL_23;
            }
          }
        }
        else if (*(int *)var_history_length[0]() >= 1)
        {
          int v5 = 0;
          uint64_t v6 = (FILE **)MEMORY[0x1E4F143C8];
          do
          {
            uint64_t v7 = (_DWORD *)var_history_base[0]();
            uint64_t v8 = (const char **)((uint64_t (*)(uint64_t))softLinkhistory_get[0])((*v7 + v5++));
            if (v8) {
              fprintf(*v6, "%d: %s\n", v5, *v8);
            }
          }
          while (v5 < *(_DWORD *)var_history_length[0]());
        }
        if (*(int *)var_history_length[0]() <= 0)
        {
          uint64_t v12 = __s2;
        }
        else
        {
          int v9 = *(_DWORD *)var_history_base[0]();
          uint64_t v10 = (_DWORD *)var_history_length[0]();
          uint64_t v11 = (const char **)((uint64_t (*)(uint64_t))softLinkhistory_get[0])((v9 + *v10 - 1));
          uint64_t v12 = __s2;
          if (v11 && !strcmp(*v11, __s2))
          {
LABEL_40:
            if (v2)
            {
              int v2 = ParseCommandLineIntoArgV(__s2, (unsigned int *)&v16, &v15);
              if (!v2)
              {
                gArgC = 0;
                if (gArgVAlt)
                {
                  free((void *)gArgVAlt);
                  gArgVAlt = 0;
                }
                gMutableArgC = 0;
                if (gMutableArgV)
                {
                  free((void *)gMutableArgV);
                  gMutableArgV = 0;
                }
                if (gCLIInteractivePrompt)
                {
                  free((void *)gCLIInteractivePrompt);
                  gCLIInteractivePrompt = 0;
                }
                gArgI = 0;
                gArgC = v16;
                uint64_t v13 = (void **)v15;
                gArgV = (uint64_t)v15;
                int v14 = gRootOptions;
                if (gRootOptions) {
                  int v14 = CLIParse(gRootOptions, 0);
                }
                FreeCommandLineArgV(v14, v13);
                int v2 = 0;
              }
            }
            goto LABEL_3;
          }
        }
        ((void (*)(uint64_t))softLinkadd_history[0])((uint64_t)v12);
        goto LABEL_40;
      }
LABEL_20:
      int v2 = -6752;
    }
  }
LABEL_3:
  uint64_t v3 = __s2;
  if (__s2) {
    goto LABEL_22;
  }
  if (a1) {
    goto LABEL_23;
  }
LABEL_5:
  if (v2) {
    goto LABEL_27;
  }
LABEL_24:
  if (gCLIInteractiveBeginning == 1)
  {
    gCLIInteractiveBeginning = 0;
    return;
  }
  if (_CLIInteractiveReset()) {
    goto LABEL_27;
  }
}

uint64_t _CLIInteractiveLineHook(uint64_t a1, uint64_t a2)
{
  int v4 = (void (*)(uint64_t, uint64_t, uint64_t))gCLIInteractiveLineHandler_f;
  if (gCLIInteractiveLineHandler_f)
  {
    uint64_t v5 = gCLIInteractiveLineHandler_ctx;
    gCLIInteractiveLineHandler_f = 0;
    gCLIInteractiveLineHandler_ctx = 0;
    if (gCLIInteractivePrompt)
    {
      free((void *)gCLIInteractivePrompt);
      gCLIInteractivePrompt = 0;
    }
    v4(a1, a2, v5);
  }
  else
  {
    uint64_t result = gCLIInteractiveLineHandler_b;
    if (!gCLIInteractiveLineHandler_b) {
      return result;
    }
    uint64_t v7 = (void (**)(void *, uint64_t, uint64_t))_Block_copy((const void *)gCLIInteractiveLineHandler_b);
    uint64_t v8 = (void *)gCLIInteractiveLineHandler_b;
    gCLIInteractiveLineHandler_b = 0;

    if (gCLIInteractivePrompt)
    {
      free((void *)gCLIInteractivePrompt);
      gCLIInteractivePrompt = 0;
    }
    v7[2](v7, a1, a2);
  }
  return 1;
}

uint64_t initadd_history(uint64_t a1)
{
  if (editLibrary_sOnce != -1) {
    dispatch_once(&editLibrary_sOnce, &__block_literal_global_558);
  }
  int v2 = (uint64_t (*)())dlsym((void *)editLibrary_sLib, "add_history");
  softLinkadd_history[0] = v2;
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

uint64_t inithistory_get(uint64_t a1)
{
  if (editLibrary_sOnce != -1) {
    dispatch_once(&editLibrary_sOnce, &__block_literal_global_558);
  }
  int v2 = (uint64_t (*)())dlsym((void *)editLibrary_sLib, "history_get");
  softLinkhistory_get[0] = v2;
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

void *initValhistory_base()
{
  if (editLibrary_sOnce != -1) {
    dispatch_once(&editLibrary_sOnce, &__block_literal_global_558);
  }
  uint64_t result = dlsym((void *)editLibrary_sLib, "history_base");
  variableValhistory_base = (uint64_t)result;
  var_history_base[0] = history_baseFunction;
  return result;
}

uint64_t history_baseFunction()
{
  return variableValhistory_base;
}

void *initValhistory_length()
{
  if (editLibrary_sOnce != -1) {
    dispatch_once(&editLibrary_sOnce, &__block_literal_global_558);
  }
  uint64_t result = dlsym((void *)editLibrary_sLib, "history_length");
  variableValhistory_CFIndex length = (uint64_t)result;
  var_history_length[0] = history_lengthFunction;
  return result;
}

uint64_t history_lengthFunction()
{
  return variableValhistory_length;
}

uint64_t inithistory_expand(uint64_t a1, uint64_t a2)
{
  if (editLibrary_sOnce != -1) {
    dispatch_once(&editLibrary_sOnce, &__block_literal_global_558);
  }
  int v4 = (uint64_t (*)())dlsym((void *)editLibrary_sLib, "history_expand");
  softLinkhistory_expand[0] = v4;
  return ((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2);
}

void _CLIInteractiveHandleSigIntDirect()
{
  if (!gCLIInteractiveSigIntTimerSource)
  {
    dispatch_source_t v0 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, MEMORY[0x1E4F14428]);
    unsigned int v1 = (void *)gCLIInteractiveSigIntTimerSource;
    gCLIInteractiveSigIntTimerSource = (uint64_t)v0;

    if (gCLIInteractiveSigIntTimerSource)
    {
      dispatch_source_set_event_handler_f((dispatch_source_t)gCLIInteractiveSigIntTimerSource, (dispatch_function_t)_CLIInteractiveHandleSigIntDeferred);
      int v2 = gCLIInteractiveSigIntTimerSource;
      dispatch_time_t v3 = dispatch_time(0, 50000000);
      dispatch_source_set_timer(v2, v3, 0xFFFFFFFFFFFFFFFFLL, 0x989680uLL);
      int v4 = gCLIInteractiveSigIntTimerSource;
      dispatch_resume(v4);
    }
    else
    {
      _CLIInteractiveHandleSigIntDeferred();
    }
  }
}

uint64_t _CLIInteractiveHandleSigIntDeferred()
{
  if (gCLIInteractiveSigIntTimerSource)
  {
    dispatch_source_t v0 = (id)gCLIInteractiveSigIntTimerSource;
    dispatch_source_cancel(v0);
    unsigned int v1 = (void *)gCLIInteractiveSigIntTimerSource;
    gCLIInteractiveSigIntTimerSource = 0;
  }
  int v2 = (FILE **)MEMORY[0x1E4F143C8];
  fputc(10, (FILE *)*MEMORY[0x1E4F143C8]);
  if (!_CLIInteractiveLineHook(0, 1))
  {
    int v3 = gCLIInteractiveSigIntCount++;
    if (v3 >= 1)
    {
      fwrite("Enter 'q', 'quit', or 'exit' to exit interactive mode.\n", 0x37uLL, 1uLL, *v2);
      gCLIInteractiveSigIntCFIndex Count = 0;
    }
  }
  **(unsigned char **)var_rl_line_buffer[0]() = 0;
  return _CLIInteractiveReset();
}

void *initValrl_line_buffer()
{
  if (editLibrary_sOnce != -1) {
    dispatch_once(&editLibrary_sOnce, &__block_literal_global_558);
  }
  uint64_t result = dlsym((void *)editLibrary_sLib, "rl_line_buffer");
  variableValrl_line_buffer = (uint64_t)result;
  var_rl_line_buffer[0] = rl_line_bufferFunction;
  return result;
}

uint64_t rl_line_bufferFunction()
{
  return variableValrl_line_buffer;
}

uint64_t _CLIInteractiveHandleInput()
{
  gCLIInteractiveSigIntCFIndex Count = 0;
  return softLinkrl_callback_read_char[0]();
}

uint64_t initrl_callback_read_char()
{
  if (editLibrary_sOnce != -1) {
    dispatch_once(&editLibrary_sOnce, &__block_literal_global_558);
  }
  dispatch_source_t v0 = (uint64_t (*)())dlsym((void *)editLibrary_sLib, "rl_callback_read_char");
  softLinkrl_callback_read_char[0] = v0;
  return v0();
}

void *initValrl_instream()
{
  if (editLibrary_sOnce != -1) {
    dispatch_once(&editLibrary_sOnce, &__block_literal_global_558);
  }
  uint64_t result = dlsym((void *)editLibrary_sLib, "rl_instream");
  variableValrl_instream = (uint64_t)result;
  var_rl_instream[0] = rl_instreamFunction;
  return result;
}

uint64_t rl_instreamFunction()
{
  return variableValrl_instream;
}

uint64_t initread_history(uint64_t a1)
{
  if (editLibrary_sOnce != -1) {
    dispatch_once(&editLibrary_sOnce, &__block_literal_global_558);
  }
  int v2 = (uint64_t (*)())dlsym((void *)editLibrary_sLib, "read_history");
  softLinkread_history[0] = v2;
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

uint64_t _CLIInteractiveCompleter(uint64_t a1, int a2)
{
  if (a2) {
    return 0;
  }
  else {
    return ((uint64_t (*)(uint64_t, uint64_t))softLinkrl_completion_matches[0])(a1, (uint64_t)_CLIInteractiveGenerator);
  }
}

uint64_t initrl_completion_matches(uint64_t a1, uint64_t a2)
{
  if (editLibrary_sOnce != -1) {
    dispatch_once(&editLibrary_sOnce, &__block_literal_global_558);
  }
  int v4 = (uint64_t (*)())dlsym((void *)editLibrary_sLib, "rl_completion_matches");
  softLinkrl_completion_matches[0] = v4;
  return ((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2);
}

char *_CLIInteractiveGenerator(const char *a1, int a2)
{
  size_t v4 = strlen(a1);
  uint64_t v5 = &gRootOptions;
  if (a2) {
    uint64_t v5 = &gCLIInteractiveNextCommand;
  }
  uint64_t v6 = (_DWORD *)*v5;
  int v7 = *(_DWORD *)*v5;
  if (!v7) {
    return 0;
  }
  size_t v8 = v4;
  for (uint64_t i = v6 + 26; ; i += 26)
  {
    gCLIInteractiveNextCommand = (uint64_t)i;
    if (v7 == 3)
    {
      uint64_t v10 = (const char *)*((void *)i - 12);
      if (!strncasecmp(v10, a1, v8)) {
        break;
      }
    }
    int v11 = *i;
    int v7 = v11;
    if (!v11) {
      return 0;
    }
  }
  return strdup(v10);
}

void *initValrl_attempted_completion_function()
{
  if (editLibrary_sOnce != -1) {
    dispatch_once(&editLibrary_sOnce, &__block_literal_global_558);
  }
  uint64_t result = dlsym((void *)editLibrary_sLib, "rl_attempted_completion_function");
  variableValrl_attempted_completion_function = (uint64_t)result;
  var_rl_attempted_completion_function[0] = rl_attempted_completion_functionFunction;
  return result;
}

uint64_t rl_attempted_completion_functionFunction()
{
  return variableValrl_attempted_completion_function;
}

void *initValrl_readline_name()
{
  if (editLibrary_sOnce != -1) {
    dispatch_once(&editLibrary_sOnce, &__block_literal_global_558);
  }
  uint64_t result = dlsym((void *)editLibrary_sLib, "rl_readline_name");
  variableValrl_readline_name = (uint64_t)result;
  var_rl_readline_name[0] = rl_readline_nameFunction;
  return result;
}

uint64_t rl_readline_nameFunction()
{
  return variableValrl_readline_name;
}

uint64_t _CLIHelp_PrintUsageLine(uint64_t a1)
{
  uint64_t v2 = gRootOptions;
  char v3 = gRootOptions != a1;
  size_t v4 = (FILE **)MEMORY[0x1E4F143D8];
  fprintf((FILE *)*MEMORY[0x1E4F143D8], "%s%*s%s", "\nUsage: ", 0, "", (const char *)gProgramName);
  if (_CLIFindOption((unsigned __int8 **)gRootOptions, 5, v3, 0)) {
    fwrite(" [global options]", 0x11uLL, 1uLL, *v4);
  }
  if (v2 == a1)
  {
    if (!_CLIFindOption((unsigned __int8 **)gRootOptions, 3, 0, 0)) {
      goto LABEL_14;
    }
    size_t v8 = *v4;
    int v9 = " <command> [options] [args]";
    size_t v10 = 27;
    goto LABEL_13;
  }
  uint64_t v5 = *(void *)(a1 + 80);
  if (v5)
  {
    fprintf(*v4, " %s", *(const char **)(v5 + 8));
    uint64_t v6 = *(unsigned __int8 ***)(*(void *)(a1 + 80) + 72);
    if (v6)
    {
      if (_CLIFindOption(v6, 5, 0, 0)) {
        fwrite(" [parent options]", 0x11uLL, 1uLL, *v4);
      }
    }
  }
  fprintf(*v4, " %s", *(const char **)(a1 + 8));
  int v7 = *(unsigned __int8 ***)(a1 + 72);
  if (v7)
  {
    if (!_CLIFindOption(v7, 3, 0, 0))
    {
      if (_CLIFindOption(*(unsigned __int8 ***)(a1 + 72), 5, 0, 0)) {
        fwrite(" [options]", 0xAuLL, 1uLL, *v4);
      }
      for (uint64_t i = *(void *)(a1 + 72); ; i += 104)
      {
        if (*(_DWORD *)i == 4)
        {
          if ((*(_DWORD *)(i + 48) & 2) != 0) {
            uint64_t v14 = 93;
          }
          else {
            uint64_t v14 = 62;
          }
          uint64_t v16 = v14;
          if ((*(_DWORD *)(i + 48) & 2) != 0) {
            uint64_t v15 = 91;
          }
          else {
            uint64_t v15 = 60;
          }
          fprintf(*v4, " %c%s%c", v15, *(const char **)(i + 8), v16);
        }
        else if (!*(_DWORD *)i)
        {
          goto LABEL_14;
        }
      }
    }
    size_t v8 = *v4;
    int v9 = " [options] <command> [sub-options] [args]";
    size_t v10 = 41;
LABEL_13:
    fwrite(v9, v10, 1uLL, v8);
  }
LABEL_14:
  int v11 = *v4;
  return fputc(10, v11);
}

uint64_t _CLIHelp_PrintOptions(int *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = *a1;
  if (!*a1) {
    return 0;
  }
  char v9 = a3;
  uint64_t v11 = (uint64_t)a1;
  int v12 = 0;
  int v13 = 0;
  uint64_t v14 = (FILE **)MEMORY[0x1E4F143D8];
  uint64_t v15 = (uint64_t)a1;
  do
  {
    if ((v8 == 4 || (v8 - 6) <= 9)
      && ((v9 & 2) == 0 || (*(unsigned char *)(v15 + 48) & 0x40) == 0)
      && ((v9 & 4) == 0 || (*(unsigned char *)(v15 + 49) & 1) == 0))
    {
      if (a2 && !v12)
      {
        fputs(a2, *v14);
        int v12 = 1;
      }
      int v16 = _CLIHelp_PrintOptionName(v15, 0, a3, a4, a5, a6, a7, a8);
      if (v16 > v13) {
        int v13 = v16;
      }
    }
    int v17 = *(_DWORD *)(v15 + 104);
    v15 += 104;
    int v8 = v17;
  }
  while (v17);
  int v18 = *(_DWORD *)v11;
  if (!*(_DWORD *)v11)
  {
    uint64_t v19 = 0;
    if (v12) {
      goto LABEL_52;
    }
    return v19;
  }
  uint64_t v19 = 0;
  do
  {
    if (((v9 & 2) == 0 || (*(unsigned char *)(v11 + 48) & 0x40) == 0) && ((v9 & 4) == 0 || (*(unsigned char *)(v11 + 49) & 1) == 0))
    {
      if (v18 == 2)
      {
        fputc(10, *v14);
        int v20 = *(const char **)(v11 + 88);
        if (*v20) {
          fprintf(*v14, "%*s%s\n", 4, "", v20);
        }
        goto LABEL_46;
      }
      if (v18 == 4 || (v18 - 6) <= 9)
      {
        if (!v19) {
          fputc(10, *v14);
        }
        fprintf(*v14, "%*s", 4, "");
        int v27 = _CLIHelp_PrintOptionName(v11, (uint64_t (*)(const char *, uint64_t))*v14, v21, v22, v23, v24, v25, v26);
        if ((*(_DWORD *)v11 - 13) >= 2)
        {
          if (*(_DWORD *)v11 == 15)
          {
            fprintf(*v14, "%*s    %s: ", v13 - v27, "", *(const char **)(v11 + 88));
            if ((v9 & 8) == 0)
            {
              uint64_t v41 = *v14;
              uint64_t v42 = "Use help <command> to see all values.\n";
              size_t v43 = 38;
              goto LABEL_39;
            }
            _CLIPrintNameValueDescriptors(*(void **)(v11 + 24), (uint64_t (*)(const char *, uint64_t))*v14, v35, v36, v37, v38, v39, v40, v53);
            if ((v9 & 1) == 0)
            {
LABEL_46:
              uint64_t v19 = (v19 + 1);
              goto LABEL_47;
            }
          }
          else
          {
            fprintf(*v14, "%*s    %s\n", v13 - v27, "", *(const char **)(v11 + 88));
            if ((v9 & 1) == 0) {
              goto LABEL_46;
            }
          }
        }
        else
        {
          uint64_t v28 = *v14;
          if (*(void *)(v11 + 88)) {
            fprintf(v28, "%*s    %s: ");
          }
          else {
            fprintf(v28, "%*s    ");
          }
          if ((v9 & 8) != 0)
          {
            _CLIPrintFlagDescriptors(*(void *)(v11 + 24), (uint64_t (*)(const char *, uint64_t))*v14, v29, v30, v31, v32, v33, v34, v52);
            if ((v9 & 1) == 0) {
              goto LABEL_46;
            }
          }
          else
          {
            uint64_t v41 = *v14;
            uint64_t v42 = "Use help <command> to see all flags.\n";
            size_t v43 = 37;
LABEL_39:
            fwrite(v42, v43, 1uLL, v41);
            if ((v9 & 1) == 0) {
              goto LABEL_46;
            }
          }
        }
        if (*(void *)(v11 + 96)) {
          FPrintF((uint64_t (*)(const char *, uint64_t))*v14, "%*{text}", v44, v45, v46, v47, v48, v49, 2);
        }
        goto LABEL_46;
      }
    }
LABEL_47:
    int v50 = *(_DWORD *)(v11 + 104);
    v11 += 104;
    int v18 = v50;
  }
  while (v50);
  if (!v12) {
    return v19;
  }
LABEL_52:
  fputc(10, *v14);
  return v19;
}

uint64_t _CLIPrintFlagDescriptors(uint64_t a1, uint64_t (*a2)(const char *, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  for (uint64_t i = a1; ; i += v19 + 1 + 1)
  {
    size_t v12 = strlen((const char *)(i + 1));
    if (!v12) {
      break;
    }
    size_t v19 = v12;
    if (i == a1) {
      int v20 = "all, ";
    }
    else {
      int v20 = ", ";
    }
    FPrintF(a2, "%s%s", v13, v14, v15, v16, v17, v18, (uint64_t)v20);
  }
  return FPrintF(a2, ".\n", v13, v14, v15, v16, v17, v18, a9);
}

uint64_t _CLIPrintNameValueDescriptors(void *a1, uint64_t (*a2)(const char *, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*a1)
  {
    size_t v10 = a1 + 2;
    unsigned int v11 = -1;
    do
    {
      uint64_t v12 = *v10;
      v10 += 2;
      ++v11;
    }
    while (v12);
    int v13 = 0;
    uint64_t v14 = a1 + 2;
    do
    {
      int v15 = v13 + 1;
      if (v11 == v13) {
        uint64_t v16 = ", or ";
      }
      else {
        uint64_t v16 = ", ";
      }
      if (v11 < 2) {
        uint64_t v16 = " or ";
      }
      if (v13) {
        uint64_t v17 = v16;
      }
      else {
        uint64_t v17 = "";
      }
      FPrintF(a2, "%s%s", a3, a4, a5, a6, a7, a8, (uint64_t)v17);
      uint64_t v18 = *v14;
      v14 += 2;
      int v13 = v15;
    }
    while (v18);
  }
  return FPrintF(a2, ".\n", a3, a4, a5, a6, a7, a8, a9);
}

uint64_t _CLIOptionError(uint64_t a1, const char *a2, char a3)
{
  uint64_t v5 = (FILE **)MEMORY[0x1E4F143C8];
  fwrite("error: option ", 0xEuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
  if (a3)
  {
    fprintf(*v5, "'%c' ");
  }
  else
  {
    uint64_t v6 = *v5;
    if ((a3 & 2) != 0) {
      fprintf(v6, "'no-%s' ");
    }
    else {
      fprintf(v6, "'%s' ");
    }
  }
  return fprintf(*v5, "%s.\n", a2);
}

uint64_t _CLIGetArg(uint64_t a1, char a2, void *a3)
{
  if (gOptionPtr)
  {
    uint64_t result = 0;
    *a3 = gOptionPtr;
    gOptionPtr = 0;
  }
  else
  {
    uint64_t v4 = gArgI + 1;
    if ((int)v4 >= gArgC)
    {
      _CLIOptionError(a1, "requires a value", a2);
      return 129;
    }
    else
    {
      uint64_t result = 0;
      ++gArgI;
      *a3 = *(void *)(gArgV + 8 * v4);
    }
  }
  return result;
}

uint64_t CLIFlagsToValueEx(uint64_t a1, char *__s, const char *a3, int *a4)
{
  uint64_t v4 = a3;
  uint64_t v5 = __s;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  uint64_t v57 = 0;
  uint64_t v6 = &__s[strlen(__s)];
  while (2)
  {
    int v7 = (unsigned __int8 *)v5;
    do
    {
      if (v7 < (unsigned __int8 *)v6)
      {
        int v8 = v7;
        while (2)
        {
          uint64_t v9 = 0;
          unsigned __int8 v10 = 44;
          do
          {
            if (*v8 == v10)
            {
              uint64_t v5 = (char *)(v8 + 1);
              goto LABEL_12;
            }
            unsigned __int8 v10 = asc_18E4353F3[++v9];
          }
          while (v9 != 2);
          if (++v8 != (unsigned __int8 *)v6) {
            continue;
          }
          break;
        }
      }
      int v8 = (unsigned __int8 *)v6;
      uint64_t v5 = v6;
      if (v7 == (unsigned __int8 *)v6)
      {
        uint64_t v40 = a1;
        if (v53) {
          uint64_t v40 = v53;
        }
        uint64_t result = (v40 | v54) & ~v57;
        uint64_t v42 = a4;
        if (a4)
        {
          int v43 = 0;
          goto LABEL_53;
        }
        return result;
      }
LABEL_12:
      uint64_t v11 = v8 - v7;
      int v18 = strnicmp_prefix(v7, v8 - v7, "+");
      if (v18)
      {
        int v19 = strnicmp_prefix(v7, v11, "-");
        if (v19) {
          int v20 = v7;
        }
        else {
          int v20 = v7 + 1;
        }
        if (v19) {
          uint64_t v21 = v11;
        }
        else {
          uint64_t v21 = v11 - 1;
        }
        BOOL v22 = v19 == 0;
      }
      else
      {
        BOOL v22 = 0;
        int v20 = v7 + 1;
        uint64_t v21 = v11 - 1;
      }
      int v7 = (unsigned __int8 *)v5;
    }
    while (!v21);
    uint64_t v23 = *(unsigned __int8 *)v4;
    if (v23 > 0x3F) {
      goto LABEL_55;
    }
    BOOL v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = v4;
LABEL_24:
    BOOL v59 = v24;
    char v60 = v23;
    int v27 = (unsigned __int8 *)(v26 + 1);
    size_t v61 = strlen(v26 + 1);
    if (v61)
    {
      int v34 = strnicmpx(v20, v21, "all");
      BOOL v24 = v34 == 0;
      if (!v34)
      {
        v25 |= 1 << v60;
        goto LABEL_40;
      }
      uint64_t v58 = v25;
      uint64_t v35 = &v27[v61];
      uint64_t v36 = v27;
      while (1)
      {
        uint64_t v37 = v36;
        if (v36 >= v35)
        {
LABEL_31:
          uint64_t v39 = &v27[v61];
          uint64_t v36 = &v27[v61];
          if (v37 == v35)
          {
            uint64_t v4 = a3;
            uint64_t v25 = v58;
            BOOL v24 = 0;
            if (v59) {
              goto LABEL_42;
            }
LABEL_40:
            uint64_t v26 = (const char *)&v27[v61 + 1];
            uint64_t v23 = *(unsigned __int8 *)v26;
            if (*(unsigned __int8 *)v26 > 0x3Fu)
            {
LABEL_55:
              FPrintF((uint64_t (*)(const char *, uint64_t))*MEMORY[0x1E4F143C8], "error: Flag bit out-of-range: %u\n", v12, v13, v14, v15, v16, v17, v23);
              uint64_t result = 0;
              uint64_t v42 = a4;
              if (a4)
              {
                int v43 = -6710;
                goto LABEL_53;
              }
              return result;
            }
            goto LABEL_24;
          }
        }
        else
        {
          int64_t v38 = v35 - v36;
          uint64_t v39 = v36;
          while (*v39 != 47)
          {
            ++v39;
            if (!--v38) {
              goto LABEL_31;
            }
          }
          uint64_t v36 = v39 + 1;
        }
        if (v39 - v37 == v21 && !memicmp(v37, v20, v21))
        {
          uint64_t v25 = (1 << v60) | v58;
          uint64_t v4 = a3;
          goto LABEL_42;
        }
      }
    }
    if (v59)
    {
LABEL_42:
      if (v18)
      {
        if (v22) {
          v57 |= v25;
        }
        else {
          v53 |= v25;
        }
      }
      else
      {
        v54 |= v25;
      }
      continue;
    }
    break;
  }
  uint64_t v44 = (uint64_t (**)(const char *, uint64_t))MEMORY[0x1E4F143C8];
  FPrintF((uint64_t (*)(const char *, uint64_t))*MEMORY[0x1E4F143C8], "error: Unknown flag '%.*s'. Valid flags: ", v28, v29, v30, v31, v32, v33, v21);
  _CLIPrintFlagDescriptors((uint64_t)v4, *v44, v45, v46, v47, v48, v49, v50, v51);
  uint64_t result = 0;
  uint64_t v42 = a4;
  if (a4)
  {
    int v43 = -6735;
LABEL_53:
    *uint64_t v42 = v43;
  }
  return result;
}

uint64_t CLIArgNameValueParse(uint64_t a1, char *a2, int *a3, const char **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v10 = a2;
  if (!a2)
  {
    uint64_t v12 = gArgI;
    if (gArgI >= gArgC || (++gArgI, (unsigned __int8 v10 = *(const char **)(gArgV + 8 * v12)) == 0))
    {
      FPrintF((uint64_t (*)(const char *, uint64_t))*MEMORY[0x1E4F143C8], "error: No %s specified. Valid values: ", (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, a1);
      goto LABEL_12;
    }
  }
  uint64_t v13 = *a4;
  if (!*a4)
  {
LABEL_8:
    FPrintF((uint64_t (*)(const char *, uint64_t))*MEMORY[0x1E4F143C8], "error: Bad %s: '%s'. Valid values: ", (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, a1);
LABEL_12:
    _CLIPrintNameValueDescriptors(a4, (uint64_t (*)(const char *, uint64_t))*MEMORY[0x1E4F143C8], v16, v17, v18, v19, v20, v21, v24);
    uint64_t result = 0;
    if (!a3) {
      return result;
    }
    int v23 = -6705;
    goto LABEL_14;
  }
  uint64_t v14 = a4;
  while (strcasecmp(v10, v13))
  {
    uint64_t v15 = v14[2];
    v14 += 2;
    uint64_t v13 = v15;
    if (!v15) {
      goto LABEL_8;
    }
  }
  uint64_t result = *((unsigned int *)v14 + 2);
  if (a3)
  {
    int v23 = 0;
LABEL_14:
    *a3 = v23;
  }
  return result;
}

const char **CLIHelpCommand(char *a1)
{
  if (a1)
  {
    uint64_t v2 = _CLIFindOption((unsigned __int8 **)gRootOptions, 3, 0, a1);
    if (v2)
    {
      return _CLIHelp_PrintCommand((uint64_t)v2, 1, 8);
    }
    else
    {
      uint64_t v4 = *(void *)(gRootOptions + 80);
      return (const char **)_CLIPrintCommandNotFound((uint64_t)a1, v4);
    }
  }
  else
  {
    return (const char **)_CLIHelp_PrintSummary(1);
  }
}

const char **_CLIHelpCommand()
{
  uint64_t v0 = gArgI;
  if (gArgI >= gArgC) {
    return CLIHelpCommand(0);
  }
  ++gArgI;
  return CLIHelpCommand(*(char **)(gArgV + 8 * v0));
}

uint64_t _CLIHelpOption(int a1, char *a2)
{
  uint64_t v2 = a2;
  if (a2 || (uint64_t v4 = gArgI + 1, (int)v4 < gArgC) && (++gArgI, (v2 = *(char **)(gArgV + 8 * v4)) != 0))
  {
    char v3 = _CLIFindOption((unsigned __int8 **)gRootOptions, 3, 0, v2);
    if (!v3)
    {
      _CLIPrintCommandNotFound((uint64_t)v2, *(void *)(gRootOptions + 80));
      return 4294960544;
    }
  }
  else
  {
    char v3 = (const char **)gCLICurrentCommand;
    if (!gCLICurrentCommand || *(const char **(**)())(gCLICurrentCommand + 64) == _CLIHelpCommand)
    {
      _CLIHelp_PrintSummary(1);
      return 4294960544;
    }
  }
  _CLIHelp_PrintCommand((uint64_t)v3, 0, 0);
  return 4294960544;
}

uint64_t _CLIVersionOption(uint64_t a1)
{
  unsigned int v1 = *(const char **)(a1 + 24);
  if (*(void *)(a1 + 16)) {
    BOOL v2 = v1 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2 && !strcmp(*(const char **)(a1 + 16), v1)) {
    fprintf((FILE *)*MEMORY[0x1E4F143D8], "%s version %s\n");
  }
  else {
    fprintf((FILE *)*MEMORY[0x1E4F143D8], "%s version %s (%s)\n");
  }
  return 4294960544;
}

uint64_t _CLIVersionCommand()
{
  return _CLIVersionOption(gCLICurrentOption);
}

uint64_t _CLIInteractiveOption()
{
  if (!gCLIInteractiveMode)
  {
    gCLIInteractiveMode = 1;
    gCLIInteractivePending = 1;
  }
  return 0;
}

uint64_t CLIInteractiveReadLine(const char *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    unsigned __int8 v10 = strdup(a1);
    if (!v10) {
      return 4294960568;
    }
    uint64_t v11 = (uint64_t)v10;
    a1 = (const char *)gCLIInteractivePrompt;
    if (gCLIInteractivePrompt) {
      free((void *)gCLIInteractivePrompt);
    }
    gCLIInteractivePrompt = v11;
  }
  gCLIInteractiveLineHandler_f = a3;
  gCLIInteractiveLineHandler_ctx = a4;
  return _CLIInteractiveReset((uint64_t)a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
}

uint64_t CLIInteractiveReadLine_b(const char *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (a1)
  {
    uint64_t v5 = strdup(a1);
    if (!v5)
    {
      uint64_t v17 = 4294960568;
      goto LABEL_7;
    }
    uint64_t v6 = (uint64_t)v5;
    if (gCLIInteractivePrompt) {
      free((void *)gCLIInteractivePrompt);
    }
    gCLIInteractivePrompt = v6;
  }
  int v7 = _Block_copy(v4);
  int v8 = (void *)gCLIInteractiveLineHandler_b;
  gCLIInteractiveLineHandler_b = (uint64_t)v7;

  uint64_t v17 = _CLIInteractiveReset(v9, v10, v11, v12, v13, v14, v15, v16);
LABEL_7:

  return v17;
}

uint64_t CLIArgToValue(uint64_t a1, unsigned __int8 *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, uint64_t a10)
{
  uint64_t v10 = a2;
  uint64_t v44 = 0;
  unsigned int v43 = 0;
  if (!a2)
  {
    uint64_t v11 = gArgI;
    if (gArgI >= gArgC || (++gArgI, (uint64_t v10 = *(unsigned __int8 **)(gArgV + 8 * v11)) == 0))
    {
      FPrintF((uint64_t (*)(const char *, uint64_t))*MEMORY[0x1E4F143C8], "error: no %s specified. Valid values: ", (uint64_t)a3, a4, a5, a6, a7, a8, a1);
      goto LABEL_31;
    }
  }
  uint64_t v44 = (const char **)&a10;
  uint64_t v12 = a9;
  if (!a9)
  {
LABEL_24:
    FPrintF((uint64_t (*)(const char *, uint64_t))*MEMORY[0x1E4F143C8], "error: bad %s: '%s'. Valid values: ", (uint64_t)a3, a4, a5, a6, a7, a8, a1);
LABEL_31:
    uint64_t v44 = (const char **)&a10;
    unsigned int v27 = 0;
    uint64_t v28 = a9;
    if (a9)
    {
      uint64_t v29 = a9;
      do
      {
        if (strcasecmp(v29, "<any-true-ish>") && strcasecmp(v29, "<any-false-ish>") && strcasecmp(v29, "<any-int>")) {
          ++v44;
        }
        ++v27;
        uint64_t v30 = v44++;
        uint64_t v29 = *v30;
      }
      while (*v30);
    }
    uint64_t v44 = (const char **)&a10;
    if (a9)
    {
      int v31 = 0;
      do
      {
        if (strcasecmp(v28, "<any-true-ish>") && strcasecmp(v28, "<any-false-ish>") && strcasecmp(v28, "<any-int>")) {
          ++v44;
        }
        if (v27 - 1 == v31) {
          int64_t v38 = ", or ";
        }
        else {
          int64_t v38 = ", ";
        }
        if (v27 < 3) {
          int64_t v38 = " or ";
        }
        if (!v31) {
          int64_t v38 = "";
        }
        FPrintF((uint64_t (*)(const char *, uint64_t))*MEMORY[0x1E4F143C8], "%s%s", v32, v33, v34, v35, v36, v37, (uint64_t)v38);
        uint64_t v39 = v44++;
        uint64_t v28 = *v39;
        ++v31;
      }
      while (*v39);
    }
    FPrintF((uint64_t (*)(const char *, uint64_t))*MEMORY[0x1E4F143C8], "\n", v20, v21, v22, v23, v24, v25, v40);
    uint64_t result = 0;
    if (a3) {
      *a3 = -6705;
    }
    return result;
  }
  while (!strcasecmp(v12, "<any-true-ish>"))
  {
    if (!strnicmpx(v10, -1, "true")
      || !strnicmpx(v10, -1, "yes")
      || !strnicmpx(v10, -1, "y")
      || !strnicmpx(v10, -1, "on")
      || !strnicmpx(v10, -1, "1"))
    {
      unsigned int v43 = 1;
      goto LABEL_27;
    }
LABEL_23:
    uint64_t v19 = v44++;
    uint64_t v12 = *v19;
    if (!*v19) {
      goto LABEL_24;
    }
  }
  if (strcasecmp(v12, "<any-false-ish>"))
  {
    if (!strcasecmp(v12, "<any-int>"))
    {
      if (SNScanF((char *)v10, 0xFFFFFFFFFFFFFFFFLL, "%i", v13, v14, v15, v16, v17, (int)&v43) == 1) {
        goto LABEL_27;
      }
    }
    else
    {
      uint64_t v18 = (unsigned int *)v44++;
      unsigned int v43 = *v18;
      if (!strcasecmp((const char *)v10, v12)) {
        goto LABEL_27;
      }
    }
    goto LABEL_23;
  }
  if (strnicmpx(v10, -1, "false")
    && strnicmpx(v10, -1, "no")
    && strnicmpx(v10, -1, "n")
    && strnicmpx(v10, -1, "off")
    && strnicmpx(v10, -1, "0"))
  {
    goto LABEL_23;
  }
  unsigned int v43 = 0;
LABEL_27:
  if (a3) {
    *a3 = 0;
  }
  return v43;
}

uint64_t CLIFlagsToValue(char *__s, const char *a2, int *a3)
{
  return CLIFlagsToValueEx(0, __s, a2, a3);
}

void CLIOutputBegin()
{
  if (gCLIInteractiveMode) {
    gCLIInteractiveBeginning = 1;
  }
}

uint64_t CLIOutputEnd(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  gCLIInteractiveBeginning = 0;
  if (gCLIInteractiveMode) {
    return _CLIInteractiveReset(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t CLIProgressClear(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (gCLIProgressMax >= 1)
  {
    uint64_t result = FPrintF((uint64_t (*)(const char *, uint64_t))*MEMORY[0x1E4F143C8], "\r%*s\r", a3, a4, a5, a6, a7, a8, gCLIProgressMax);
    gCLIProgressMax = 0;
  }
  return result;
}

uint64_t CLIProgressUpdate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = (uint64_t (**)(const char *, uint64_t))MEMORY[0x1E4F143C8];
  FPrintF((uint64_t (*)(const char *, uint64_t))*MEMORY[0x1E4F143C8], "\r", a3, a4, a5, a6, a7, a8, v25);
  int v22 = FPrintF(*v9, "%V", v10, v11, v12, v13, v14, v15, a1);
  uint64_t v23 = *v9;
  if (gCLIProgressMax <= v22) {
    uint64_t result = FPrintF(v23, "\r", v16, v17, v18, v19, v20, v21, v26);
  }
  else {
    uint64_t result = FPrintF(v23, "%*s\r", v16, v17, v18, v19, v20, v21, (gCLIProgressMax - v22));
  }
  gCLIProgressMax = v22;
  return result;
}

void CLIPromptForPIN(int a1, int a2, void *a3)
{
  id v11 = a3;
  uint64_t v12 = (uint64_t (**)(const char *, uint64_t))MEMORY[0x1E4F143C8];
  if ((a1 & 0x10000) != 0) {
    FPrintF((uint64_t (*)(const char *, uint64_t))*MEMORY[0x1E4F143C8], "### PIN incorrect.\n", v5, v6, v7, v8, v9, v10, v24);
  }
  if (a2 >= 1)
  {
    uint64_t v13 = mach_absolute_time();
    if (SecondsToUpTicks_sOnce != -1) {
      dispatch_once_f(&SecondsToUpTicks_sOnce, &SecondsToUpTicks_sMultiplier, (dispatch_function_t)_SecondsToUpTicksInit);
    }
    uint64_t v14 = v13 + SecondsToUpTicks_sMultiplier * a2;
    if (gCLIPINTimer)
    {
      uint64_t v15 = (id)gCLIPINTimer;
      dispatch_source_cancel(v15);
      uint64_t v16 = (void *)gCLIPINTimer;
      gCLIPINTimer = 0;
    }
    dispatch_source_t v17 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, MEMORY[0x1E4F14428]);
    uint64_t v18 = (void *)gCLIPINTimer;
    gCLIPINTimer = (uint64_t)v17;

    uint64_t v19 = gCLIPINTimer;
    handler[0] = MEMORY[0x1E4F143A8];
    handler[1] = 3221225472;
    handler[2] = __CLIPromptForPIN_block_invoke;
    handler[3] = &unk_1E55BD780;
    uint64_t v29 = v14;
    id v28 = v11;
    dispatch_source_set_event_handler(v19, handler);
    uint64_t v20 = gCLIPINTimer;
    dispatch_time_t v21 = dispatch_time(0, 1000000000);
    dispatch_source_set_timer(v20, v21, 0x3B9ACA00uLL, 0x5F5E100uLL);
    dispatch_resume((dispatch_object_t)gCLIPINTimer);
  }
  if (gCLIProgressMax >= 1)
  {
    FPrintF(*v12, "\r%*s\r", v5, v6, v7, v8, v9, v10, gCLIProgressMax);
    gCLIProgressMax = 0;
  }
  v25[0] = MEMORY[0x1E4F143A8];
  v25[1] = 3221225472;
  v25[2] = __CLIPromptForPIN_block_invoke_2;
  void v25[3] = &unk_1E55BD7A8;
  id v26 = v11;
  id v22 = v11;
  CLIInteractiveReadLine_b("Enter PIN: ", v23, v25);
}

uint64_t __CLIPromptForPIN_block_invoke(uint64_t a1)
{
  uint64_t v2 = mach_absolute_time();
  uint64_t v3 = *(void *)(a1 + 40);
  BOOL v4 = v3 >= v2;
  unint64_t v5 = v3 - v2;
  if (v5 != 0 && v4)
  {
    UpTicksToSeconds(v5);
    return CLIProgressUpdate((uint64_t)"Throttling for %llu seconds...", v6, v7, v8, v9, v10, v11, v12);
  }
  else
  {
    if (gCLIPINTimer)
    {
      uint64_t v14 = (id)gCLIPINTimer;
      dispatch_source_cancel(v14);
      uint64_t v15 = (void *)gCLIPINTimer;
      gCLIPINTimer = 0;
    }
    uint64_t v16 = *(void *)(a1 + 32);
    return CLIPromptForPIN(0, 0xFFFFFFFFLL, v16);
  }
}

void __CLIPromptForPIN_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a2 || (a3 & 1) != 0)
  {
    FPrintF((uint64_t (*)(const char *, uint64_t))*MEMORY[0x1E4F143C8], "User canceled\n", a3, a4, a5, a6, a7, a8, v13);
    if (gCLIPINTimer)
    {
      uint64_t v10 = (id)gCLIPINTimer;
      dispatch_source_cancel(v10);
      uint64_t v11 = (void *)gCLIPINTimer;
      gCLIPINTimer = 0;
    }
    uint64_t v12 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
    v12();
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 32);
    id v14 = [NSString stringWithUTF8String:a2];
    (*(void (**)(uint64_t, id))(v9 + 16))(v9, v14);
  }
}

uint64_t CLIScheduleExit(uint64_t result)
{
  if (!gCLIInteractiveMode) {
    exit(result);
  }
  gExitint Code = result;
  gCLIInteractiveMode = 0;
  return result;
}

void CUCLIPrefs(void *a1, const char *a2, void *a3)
{
  uint64_t v213 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = a1;
  id v6 = a3;
  SwitchToMobileUser();
  int v7 = gArgI;
  int v8 = gArgC;
  if (gArgI >= gArgC)
  {
    uint64_t v10 = "";
  }
  else
  {
    uint64_t v9 = gArgI;
    int v7 = ++gArgI;
    uint64_t v10 = *(const char **)(gArgV + 8 * v9);
  }
  if (!*v10 || !strcasecmp(v10, "read") || !strcasecmp(v10, "get"))
  {
    if (gCUCLIFilePath)
    {
      uint64_t v23 = (__CFString *)CFPropertyListCreateFromFilePath((const char *)gCUCLIFilePath, 1uLL, 0);
      uint64_t v24 = &sUpTicksToSecondsOnce;
      if (v23)
      {
        uint64_t v25 = v23;
        objc_opt_class();
        int32x4_t v189 = v25;
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          FPrintF((uint64_t (*)(const char *, uint64_t))*MEMORY[0x1E4F143C8], "error: Prefs file is not a dictionary\n", v26, v27, v28, v29, v30, v31, v183);
          obsize_t j = 0;
          uint64_t v32 = 0;
          uint64_t v33 = v25;
LABEL_108:
          id v36 = 0;
          gExitint Code = 1;
          goto LABEL_81;
        }
      }
      else
      {
        int32x4_t v189 = [MEMORY[0x1E4F1CA60] dictionary];
      }
    }
    else
    {
      int32x4_t v189 = 0;
      uint64_t v24 = &sUpTicksToSecondsOnce;
    }
    int v34 = fileno((FILE *)*MEMORY[0x1E4F143D8]);
    int v35 = isatty(v34);
    int32x4_t v187 = v5;
    if (*((_DWORD *)v24 + 844) >= gArgC)
    {
      int v37 = v35;
      if (v189)
      {
        int64_t v38 = [(__CFString *)v189 allKeys];
      }
      else
      {
        int64_t v38 = CFPrefs_CopyKeys(v5, 0);
      }
      uint64_t v54 = v38;
      uint64_t v55 = [v38 sortedArrayUsingSelector:sel_localizedCaseInsensitiveCompare_];

      long long v207 = 0u;
      long long v208 = 0u;
      long long v205 = 0u;
      long long v206 = 0u;
      id v56 = v55;
      uint64_t v57 = [v56 countByEnumeratingWithState:&v205 objects:v212 count:16];
      if (v57)
      {
        uint64_t v58 = v57;
        id v59 = v6;
        id v60 = 0;
        LODWORD(v61) = 0;
        uint64_t v62 = *(void *)v206;
        do
        {
          uint64_t v63 = 0;
          uint64_t v64 = v60;
          do
          {
            if (*(void *)v206 != v62) {
              objc_enumerationMutation(v56);
            }
            id v60 = *(id *)(*((void *)&v205 + 1) + 8 * v63);

            int v65 = [v60 length];
            if ((int)v61 <= v65) {
              uint64_t v61 = v65;
            }
            else {
              uint64_t v61 = v61;
            }
            ++v63;
            uint64_t v64 = v60;
          }
          while (v58 != v63);
          uint64_t v58 = [v56 countByEnumeratingWithState:&v205 objects:v212 count:16];
        }
        while (v58);

        id v6 = v59;
        uint64_t v24 = &sUpTicksToSecondsOnce;
      }
      else
      {
        uint64_t v61 = 0;
      }

      long long v203 = 0u;
      long long v204 = 0u;
      long long v201 = 0u;
      long long v202 = 0u;
      obsize_t j = v56;
      uint64_t v66 = [obj countByEnumeratingWithState:&v201 objects:v211 count:16];
      if (v66)
      {
        uint64_t v67 = v66;
        int v68 = 0;
        id v36 = 0;
        uint64_t v192 = *(void *)v202;
        if (v37) {
          int v69 = "\x1B[0m";
        }
        else {
          int v69 = "";
        }
        CFStringRef v70 = (const __CFString *)*MEMORY[0x1E4F1D3D8];
        uint64_t v33 = v189;
        if (v187) {
          CFStringRef v70 = v187;
        }
        CFStringRef applicationID = v70;
        do
        {
          uint64_t v71 = 0;
          __int32 v72 = v68;
          int v73 = v36;
          do
          {
            if (*(void *)v202 != v192) {
              objc_enumerationMutation(obj);
            }
            int v68 = (__CFString *)*(id *)(*((void *)&v201 + 1) + 8 * v71);

            if (v33)
            {
              uint64_t v74 = [(__CFString *)v33 objectForKeyedSubscript:v68];
            }
            else
            {
              uint64_t v74 = (uint64_t)CFPreferencesCopyAppValue(v68, applicationID);
            }
            id v36 = (id)v74;
            size_t v75 = (uint64_t (**)(const char *, uint64_t))MEMORY[0x1E4F143D8];

            FPrintF(*v75, "%-*@ : %s", v76, v77, v78, v79, v80, v81, v61);
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0 && (unint64_t)[v36 length] <= 0x80)
            {
              int32x4_t v88 = *v75;
              id v89 = v36;
              uint64_t v90 = [v89 bytes];
              uint64_t v91 = v89;
              size_t v75 = (uint64_t (**)(const char *, uint64_t))MEMORY[0x1E4F143D8];
              [v91 length];
              int v92 = v88;
              uint64_t v33 = v189;
              FPrintF(v92, "%.3H", v93, v94, v95, v96, v97, v98, v90);
            }
            else
            {
              FPrintF(*v75, "%@", v82, v83, v84, v85, v86, v87, (uint64_t)v36);
            }
            FPrintF(*v75, "%s\n", v99, v100, v101, v102, v103, v104, (uint64_t)v69);
            ++v71;
            __int32 v72 = v68;
            int v73 = v36;
          }
          while (v67 != v71);
          uint64_t v67 = [obj countByEnumeratingWithState:&v201 objects:v211 count:16];
        }
        while (v67);

        uint64_t v24 = &sUpTicksToSecondsOnce;
      }
      else
      {
        id v36 = 0;
        uint64_t v33 = v189;
      }

      unint64_t v5 = v187;
      if (![obj count]) {
        FPrintF((uint64_t (*)(const char *, uint64_t))*MEMORY[0x1E4F143C8], "No prefs found\n", v105, v106, v107, v108, v109, v110, v183);
      }
    }
    else
    {
      obsize_t j = 0;
      id v36 = 0;
      uint64_t v33 = v189;
    }
    int v111 = *((_DWORD *)v24 + 844);
    if (v111 >= gArgC)
    {
      uint64_t v32 = 0;
    }
    else
    {
      id v185 = v6;
      if (v5) {
        CFStringRef v112 = v5;
      }
      else {
        CFStringRef v112 = (const __CFString *)*MEMORY[0x1E4F1D3D8];
      }
      do
      {
        uint64_t v113 = gArgV;
        *((_DWORD *)v24 + 844) = v111 + 1;
        uint64_t v114 = *(void *)(v113 + 8 * v111);
        int32x4_t v115 = [NSString stringWithUTF8String:v114];
        if (v189)
        {
          uint64_t v116 = [(__CFString *)v189 objectForKeyedSubscript:v115];
        }
        else
        {
          uint64_t v116 = (uint64_t)CFPreferencesCopyAppValue(v115, v112);
        }
        int32x4_t v117 = (void *)v116;

        id v36 = v117;
        if (v117)
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0 && (unint64_t)[v117 length] <= 0x80)
          {
            int v130 = (uint64_t (*)(const char *, uint64_t))*MEMORY[0x1E4F143D8];
            id v36 = v36;
            uint64_t v131 = [v36 bytes];
            [v36 length];
            uint64_t v184 = v131;
            uint64_t v24 = &sUpTicksToSecondsOnce;
            FPrintF(v130, "%.3H\n", v132, v133, v134, v135, v136, v137, v184);
          }
          else
          {
            FPrintF((uint64_t (*)(const char *, uint64_t))*MEMORY[0x1E4F143D8], "%@\n", v124, v125, v126, v127, v128, v129, (uint64_t)v117);
          }
        }
        else
        {
          FPrintF((uint64_t (*)(const char *, uint64_t))*MEMORY[0x1E4F143C8], "error: Key '%s' does not exist.\n", v118, v119, v120, v121, v122, v123, v114);
          id v36 = 0;
        }

        int v111 = *((_DWORD *)v24 + 844);
      }
      while (v111 < gArgC);
      uint64_t v32 = 0;
      id v6 = v185;
      unint64_t v5 = v187;
      uint64_t v33 = v189;
    }
    goto LABEL_81;
  }
  if (!strcasecmp(v10, "write") || !strcasecmp(v10, "set"))
  {
    if (v7 >= v8)
    {
      FPrintF((uint64_t (*)(const char *, uint64_t))*MEMORY[0x1E4F143C8], "error: No key specified\n", v11, v12, v13, v14, v15, v16, v183);
      obsize_t j = 0;
      uint64_t v32 = 0;
    }
    else
    {
      gArgI = v7 + 1;
      uint64_t v32 = [NSString stringWithUTF8String:*(void *)(gArgV + 8 * v7)];
      uint64_t v45 = gArgI;
      if (gArgI < gArgC)
      {
        ++gArgI;
        uint64_t v46 = *(void *)(gArgV + 8 * v45);
        if (!gCUCLIFilePath)
        {
          int32x4_t v144 = (const void *)[NSString stringWithUTF8String:v46];
          if (v5) {
            CFStringRef v145 = v5;
          }
          else {
            CFStringRef v145 = (const __CFString *)*MEMORY[0x1E4F1D3D8];
          }
          CFPreferencesSetAppValue(v32, v144, v145);
          CFPreferencesAppSynchronize(v5);
          notify_post(a2);
          obsize_t j = 0;
LABEL_123:
          id v36 = 0;
          uint64_t v33 = 0;
          goto LABEL_81;
        }
        uint64_t v47 = (__CFString *)CFPropertyListCreateFromFilePath((const char *)gCUCLIFilePath, 1uLL, 0);
        if (v47)
        {
          uint64_t v33 = v47;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            FPrintF((uint64_t (*)(const char *, uint64_t))*MEMORY[0x1E4F143C8], "error: Prefs file is not a dictionary\n", v48, v49, v50, v51, v52, v53, v183);
            obsize_t j = 0;
            goto LABEL_108;
          }
        }
        else
        {
          uint64_t v33 = [MEMORY[0x1E4F1CA60] dictionary];
        }
        int32x4_t v146 = [NSString stringWithUTF8String:v46];
        [(__CFString *)v33 setObject:v146 forKeyedSubscript:v32];

        uint64_t v147 = CFPropertyListWriteToFilePath(v33, "binary1", (FILE *)gCUCLIFilePath);
        obsize_t j = 0;
        goto LABEL_106;
      }
      FPrintF((uint64_t (*)(const char *, uint64_t))*MEMORY[0x1E4F143C8], "error: No value specified\n", v39, v40, v41, v42, v43, v44, v183);
      obsize_t j = 0;
    }
    uint64_t v33 = 0;
    goto LABEL_108;
  }
  if (strcasecmp(v10, "delete") && strcasecmp(v10, "remove"))
  {
    if (!strcasecmp(v10, "keys"))
    {
      int32x4_t v157 = (uint64_t (**)(const char *, uint64_t))MEMORY[0x1E4F143D8];
      int v158 = fileno((FILE *)*MEMORY[0x1E4F143D8]);
      int v159 = isatty(v158);
      long long v193 = 0u;
      long long v194 = 0u;
      long long v195 = 0u;
      long long v196 = 0u;
      id v160 = v6;
      uint64_t v161 = [v160 countByEnumeratingWithState:&v193 objects:v209 count:16];
      if (v161)
      {
        uint64_t v162 = v161;
        int8x16_t v188 = v5;
        id v163 = 0;
        uint64_t v164 = *(void *)v194;
        if (v159) {
          uint64_t v165 = "\x1B[35m";
        }
        else {
          uint64_t v165 = "";
        }
        do
        {
          uint64_t v166 = 0;
          int32x4_t v167 = v163;
          do
          {
            if (*(void *)v194 != v164) {
              objc_enumerationMutation(v160);
            }
            id v163 = *(id *)(*((void *)&v193 + 1) + 8 * v166);

            FPrintF(*v157, "%s%@%s\n", v168, v169, v170, v171, v172, v173, (uint64_t)v165);
            ++v166;
            int32x4_t v167 = v163;
          }
          while (v162 != v166);
          uint64_t v162 = [v160 countByEnumeratingWithState:&v193 objects:v209 count:16];
        }
        while (v162);

        unint64_t v5 = v188;
      }
    }
    else
    {
      FPrintF((uint64_t (*)(const char *, uint64_t))*MEMORY[0x1E4F143C8], "error: Bad command '%s'. Must be 'read', 'write', 'delete', or 'keys'.\n", v17, v18, v19, v20, v21, v22, (uint64_t)v10);
    }
    obsize_t j = 0;
    uint64_t v32 = 0;
    goto LABEL_123;
  }
  if (gCUCLIFilePath)
  {
    uint64_t v33 = (__CFString *)CFPropertyListCreateFromFilePath((const char *)gCUCLIFilePath, 1uLL, 0);
    if (!v33)
    {
      obsize_t j = 0;
      goto LABEL_110;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      FPrintF((uint64_t (*)(const char *, uint64_t))*MEMORY[0x1E4F143C8], "error: Prefs file is not a dictionary\n", v138, v139, v140, v141, v142, v143, v183);
      obsize_t j = 0;
      uint64_t v32 = 0;
      goto LABEL_108;
    }
    int v7 = gArgI;
    int v8 = gArgC;
  }
  else
  {
    uint64_t v33 = 0;
  }
  if (v7 < v8 && !strcasecmp(*(const char **)(gArgV + 8 * v7), "*"))
  {
    gArgI = v7 + 1;
    if (v33)
    {
      int32x4_t v174 = [(__CFString *)v33 allKeys];
    }
    else
    {
      int32x4_t v174 = CFPrefs_CopyKeys(v5, 0);
    }
    long long v199 = 0u;
    long long v200 = 0u;
    long long v197 = 0u;
    long long v198 = 0u;
    obsize_t j = v174;
    uint64_t v175 = [obj countByEnumeratingWithState:&v197 objects:v210 count:16];
    if (v175)
    {
      uint64_t v176 = v175;
      id v186 = v6;
      int8x16_t v177 = 0;
      uint64_t v178 = *(void *)v198;
      int8x16_t v179 = v5;
      if (v5) {
        CFStringRef v180 = v5;
      }
      else {
        CFStringRef v180 = (const __CFString *)*MEMORY[0x1E4F1D3D8];
      }
      do
      {
        uint64_t v181 = 0;
        int32x4_t v182 = v177;
        do
        {
          if (*(void *)v198 != v178) {
            objc_enumerationMutation(obj);
          }
          int8x16_t v177 = (__CFString *)*(id *)(*((void *)&v197 + 1) + 8 * v181);

          if (v33) {
            [(__CFString *)v33 removeObjectForKey:v177];
          }
          else {
            CFPreferencesSetAppValue(v177, 0, v180);
          }
          ++v181;
          int32x4_t v182 = v177;
        }
        while (v176 != v181);
        uint64_t v176 = [obj countByEnumeratingWithState:&v197 objects:v210 count:16];
      }
      while (v176);

      unint64_t v5 = v179;
      id v6 = v186;
    }

    int v7 = gArgI;
    int v8 = gArgC;
  }
  else
  {
    obsize_t j = 0;
  }
  if (v7 < v8)
  {
    if (v5) {
      CFStringRef v154 = v5;
    }
    else {
      CFStringRef v154 = (const __CFString *)*MEMORY[0x1E4F1D3D8];
    }
    do
    {
      gArgI = v7 + 1;
      CFStringRef v155 = [NSString stringWithUTF8String:*(void *)(gArgV + 8 * v7)];
      int32x4_t v156 = (__CFString *)v155;
      if (v33) {
        [(__CFString *)v33 setObject:0 forKeyedSubscript:v155];
      }
      else {
        CFPreferencesSetAppValue(v155, 0, v154);
      }

      int v7 = gArgI;
    }
    while (gArgI < gArgC);
  }
  if (!gCUCLIFilePath)
  {
    CFPreferencesAppSynchronize(v5);
    notify_post(a2);
LABEL_110:
    uint64_t v32 = 0;
    id v36 = 0;
    goto LABEL_81;
  }
  uint64_t v147 = CFPropertyListWriteToFilePath(v33, "binary1", (FILE *)gCUCLIFilePath);
  uint64_t v32 = 0;
LABEL_106:
  id v36 = 0;
  if (v147)
  {
    FPrintF((uint64_t (*)(const char *, uint64_t))*MEMORY[0x1E4F143C8], "error: %#m\n", v148, v149, v150, v151, v152, v153, v147);
    goto LABEL_108;
  }
LABEL_81:
}

void ErrQuit(int a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t CoreAudioCopyDataSourceName(uint64_t a1, int a2, uint64_t a3)
{
  int v7 = 0;
  int v8 = a2;
  uint64_t v6 = 0x6F7574706C73636ELL;
  v5[0] = &v8;
  v5[1] = 4;
  void v5[2] = a3;
  _OWORD v5[3] = 8;
  int v4 = 32;
  return softLinkAudioObjectGetPropertyData_706(a1, &v6, 0, 0, &v4, v5);
}

uint64_t initAudioObjectGetPropertyData_708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (CoreAudioLibrary_sOnce_709 != -1) {
    dispatch_once(&CoreAudioLibrary_sOnce_709, &__block_literal_global_710);
  }
  uint64_t v12 = dlsym((void *)CoreAudioLibrary_sLib_711, "AudioObjectGetPropertyData");
  softLinkAudioObjectGetPropertyData_706 = (uint64_t (*)(void, void, void, void, void, void))v12;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v12)(a1, a2, a3, a4, a5, a6);
}

void *__CoreAudioLibrary_block_invoke_716()
{
  uint64_t result = dlopen("/System/Library/Frameworks/CoreAudio.framework/CoreAudio", 2);
  CoreAudioLibrary_sLib_711 = (uint64_t)result;
  return result;
}

uint64_t CoreAudioCopyPropertyData(uint64_t a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  uint64_t v13 = 0;
  size_4[0] = a2;
  size_4[1] = a3;
  size_4[2] = a4;
  unsigned int size = 0;
  int v14 = 100;
  while (1)
  {
    uint64_t v15 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAudioObjectGetPropertyDataSize[0])(a1, (uint64_t)size_4, a6, a5, (uint64_t)&size);
    if (v15)
    {
      uint64_t v18 = v15;
      goto LABEL_14;
    }
    if (!size)
    {
      if (v13)
      {
        free(v13);
        uint64_t v13 = 0;
      }
LABEL_10:
      uint64_t v18 = 0;
      *a7 = v13;
      *a8 = size;
      return v18;
    }
    uint64_t v16 = malloc_type_realloc(v13, size, 0xC2AF1A96uLL);
    if (!v16) {
      break;
    }
    uint64_t v13 = v16;
    uint64_t PropertyData_706 = softLinkAudioObjectGetPropertyData_706(a1, size_4, a6, a5, &size, v16);
    if (!PropertyData_706) {
      goto LABEL_10;
    }
    uint64_t v18 = PropertyData_706;
    if (!--v14) {
      goto LABEL_7;
    }
  }
  uint64_t v18 = 4294960568;
LABEL_14:
  if (v13) {
LABEL_7:
  }
    free(v13);
  return v18;
}

uint64_t initAudioObjectGetPropertyDataSize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (CoreAudioLibrary_sOnce_709 != -1) {
    dispatch_once(&CoreAudioLibrary_sOnce_709, &__block_literal_global_710);
  }
  uint64_t v10 = (uint64_t (*)())dlsym((void *)CoreAudioLibrary_sLib_711, "AudioObjectGetPropertyDataSize");
  softLinkAudioObjectGetPropertyDataSize[0] = v10;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v10)(a1, a2, a3, a4, a5);
}

uint64_t CoreAudioGetPropertyData(uint64_t a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, void *a9)
{
  v12[0] = a2;
  v12[1] = a3;
  void v12[2] = a4;
  unsigned int v11 = a8;
  uint64_t result = softLinkAudioObjectGetPropertyData_706(a1, v12, a6, a5, &v11, a7);
  if (a9) {
    BOOL v10 = result == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10) {
    *a9 = v11;
  }
  return result;
}

uint64_t CoreAudioSetPropertyData(uint64_t a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v9[0] = a2;
  v9[1] = a3;
  v9[2] = a4;
  return softLinkAudioObjectSetPropertyData(a1, v9, a6, a5, a8, a7);
}

uint64_t initAudioObjectSetPropertyData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (CoreAudioLibrary_sOnce_709 != -1) {
    dispatch_once(&CoreAudioLibrary_sOnce_709, &__block_literal_global_710);
  }
  uint64_t v12 = dlsym((void *)CoreAudioLibrary_sLib_711, "AudioObjectSetPropertyData");
  softLinkAudioObjectSetPropertyCFDictionaryRef Data = (uint64_t (*)(void, void, void, void, void, void))v12;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v12)(a1, a2, a3, a4, a5, a6);
}

uint64_t CoreAudioFindDeviceByUID(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a1;
  uint64_t v4 = 0x676C6F6272756964;
  int v5 = 0;
  int v3 = 4;
  return softLinkAudioObjectGetPropertyData_706(1, &v4, 8, &v6, &v3, a2);
}

uint64_t CoreAudioGetDefaultAudioDevice(uint64_t a1)
{
  uint64_t v3 = 0x676C6F62644F7574;
  int v4 = 0;
  int v2 = 4;
  return softLinkAudioObjectGetPropertyData_706(1, &v3, 0, 0, &v2, a1);
}

uint64_t CoreAudioSetDefaultAudioDevice(int a1, int a2, _DWORD *a3)
{
  int v12 = a1;
  int v8 = 0;
  uint64_t v10 = 0x676C6F62644F7574;
  int v11 = 0;
  if (a3)
  {
    int v9 = 4;
    if (softLinkAudioObjectGetPropertyData_706(1, &v10, 0, 0, &v9, a3)) {
      *a3 = 0;
    }
  }
  if (a2)
  {
    int v8 = 1;
    uint64_t v5 = 4;
    uint64_t v6 = &v8;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  int v9 = 4;
  return softLinkAudioObjectSetPropertyData(1, &v10, v5, v6, 4, &v12);
}

uint64_t CoreAudioRampParameterStart(NSObject **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, NSObject *a7, uint64_t a8, float a9, double a10)
{
  int v13 = a5;
  int v14 = a4;
  int v15 = a3;
  uint64_t v37 = 0;
  int64_t v38 = (float *)&v37;
  uint64_t v39 = 0x2000000000;
  int v40 = 0;
  v35[0] = 0;
  v35[1] = v35;
  v35[2] = 0x2000000000;
  int v36 = 0;
  uint64_t v20 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAudioUnitGetParameter_722[0])(a2, a3, a4, a5, (uint64_t)&v40);
  if (!v20)
  {
    float v21 = v38[6];
    if (a7) {
      uint64_t v22 = a7;
    }
    else {
      uint64_t v22 = MEMORY[0x1E4F14428];
    }
    uint64_t v23 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, v22);
    if (v23)
    {
      uint64_t v24 = v23;
      unint64_t v25 = (unint64_t)(a10 * 1000000000.0 / (double)a6);
      handler[0] = MEMORY[0x1E4F143A8];
      handler[1] = 0x40000000;
      handler[2] = __CoreAudioRampParameterStart_block_invoke;
      handler[3] = &unk_1E55BD7D0;
      float v29 = (float)(a9 - v21) / (float)a6;
      int v30 = v15;
      int v31 = v14;
      handler[6] = v35;
      handler[7] = a2;
      int v32 = v13;
      int v33 = a6;
      float v34 = a9;
      void handler[4] = a8;
      handler[5] = &v37;
      handler[8] = v23;
      handler[9] = a1;
      dispatch_source_set_event_handler(v23, handler);
      dispatch_time_t v26 = dispatch_time(0, v25);
      dispatch_source_set_timer(v24, v26, v25, 0x4C4B40uLL);
      if (a1) {
        *a1 = v24;
      }
      dispatch_resume(v24);
      uint64_t v20 = 0;
    }
    else
    {
      uint64_t v20 = 4294960596;
    }
  }
  _Block_object_dispose(v35, 8);
  _Block_object_dispose(&v37, 8);
  return v20;
}

void __CoreAudioRampParameterStart_block_invoke(uint64_t a1)
{
  *(float *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = *(float *)(a1 + 80)
                                                             + *(float *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))softLinkAudioUnitSetParameter_724[0])(*(void *)(a1 + 56), *(unsigned int *)(a1 + 84), *(unsigned int *)(a1 + 88), *(unsigned int *)(a1 + 92), 0, *(float *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
  uint64_t v2 = *(void *)(*(void *)(a1 + 48) + 8);
  int v3 = *(_DWORD *)(v2 + 24) + 1;
  *(_DWORD *)(v2 + 24) = v3;
  if (v3 >= *(_DWORD *)(a1 + 96) || *(float *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) == *(float *)(a1 + 100))
  {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 64));
    float v4 = *(float *)(a1 + 100);
    if (*(float *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) != v4) {
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))softLinkAudioUnitSetParameter_724[0])(*(void *)(a1 + 56), *(unsigned int *)(a1 + 84), *(unsigned int *)(a1 + 88), *(unsigned int *)(a1 + 92), 0, v4);
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5) {
      (*(void (**)(void))(v5 + 16))();
    }
    if (!*(void *)(a1 + 72))
    {
      uint64_t v6 = *(NSObject **)(a1 + 64);
      dispatch_release(v6);
    }
  }
}

uint64_t initAudioUnitSetParameter_726(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float a6)
{
  if (AudioToolboxLibrary_sOnce_727 != -1) {
    dispatch_once(&AudioToolboxLibrary_sOnce_727, &__block_literal_global_9);
  }
  int v12 = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib_728, "AudioUnitSetParameter");
  softLinkAudioUnitSetParameter_724[0] = v12;
  v13.n128_f32[0] = a6;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))v12)(a1, a2, a3, a4, a5, v13);
}

void *__AudioToolboxLibrary_block_invoke_731()
{
  uint64_t result = dlopen("/System/Library/Frameworks/AudioToolbox.framework/AudioToolbox", 2);
  AudioToolboxLibrary_sLib_728 = (uint64_t)result;
  return result;
}

uint64_t initAudioUnitGetParameter_734(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (AudioToolboxLibrary_sOnce_727 != -1) {
    dispatch_once(&AudioToolboxLibrary_sOnce_727, &__block_literal_global_9);
  }
  uint64_t v10 = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib_728, "AudioUnitGetParameter");
  softLinkAudioUnitGetParameter_722[0] = v10;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v10)(a1, a2, a3, a4, a5);
}

uint64_t _AESGCMCoreCryptoDecryptMessageOneShot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t result = 4294960591;
  if (a3 == 32 && a5 == 12 && a12 == 16)
  {
    ccaes_gcm_decrypt_mode();
    return ccgcm_one_shot();
  }
  return result;
}

uint64_t _AESGCMCoreCryptoEncryptMessageOneShot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a3 != 32 || a5 != 12 || a12 != 16) {
    return 4294960591;
  }
  ccaes_gcm_encrypt_mode();
  return ccgcm_one_shot();
}

uint64_t _AESGCMCoreCryptoDecryptMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result = 4294960591;
  if (a3 == 12 && a10 == 16)
  {
    uint64_t result = ccgcm_reset();
    if (!result)
    {
      uint64_t result = ccgcm_set_iv();
      if (!result)
      {
        if (!a5 || (uint64_t result = ccgcm_aad(), !result))
        {
          if (!a7) {
            return ccgcm_finalize();
          }
          uint64_t result = ccgcm_update();
          if (!result) {
            return ccgcm_finalize();
          }
        }
      }
    }
  }
  return result;
}

uint64_t _AESGCMCoreCryptoEncryptMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result = 4294960591;
  if (a3 == 12 && a10 == 16)
  {
    uint64_t result = ccgcm_reset();
    if (!result)
    {
      uint64_t result = ccgcm_set_iv();
      if (!result)
      {
        if (!a5 || (uint64_t result = ccgcm_aad(), !result))
        {
          if (!a7 || (uint64_t result = ccgcm_update(), !result))
          {
            return ccgcm_finalize();
          }
        }
      }
    }
  }
  return result;
}

void _AESGCMCoreCryptoFinalize(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 32);
  unsigned int v1 = *(void **)(a1 + 32);
  int v3 = (rsize_t **)(v2 - 1);
  if (!v1)
  {
    --v2;
LABEL_8:
    char *v2 = 0;
    return;
  }
  if (!*v3)
  {
    *int v3 = 0;
    goto LABEL_7;
  }
  memset_s(v1, **v3, 0, **v3);
  unsigned int v1 = *v2;
  *int v3 = 0;
  if (v1)
  {
LABEL_7:
    free(v1);
    goto LABEL_8;
  }
}

uint64_t _AESGCMCoreCryptoInitialize(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (a4 != 32) {
    goto LABEL_5;
  }
  if (a2 != 2)
  {
    if (a2 == 1)
    {
      uint64_t v5 = (size_t *)ccaes_gcm_encrypt_mode();
      goto LABEL_7;
    }
LABEL_5:
    uint64_t v6 = 4294960591;
    goto LABEL_10;
  }
  uint64_t v5 = (size_t *)ccaes_gcm_decrypt_mode();
LABEL_7:
  *(void *)(a1 + 24) = v5;
  if (!*v5)
  {
    uint64_t v6 = 4294960553;
    goto LABEL_10;
  }
  int v7 = malloc_type_calloc(1uLL, *v5, 0xD29341B8uLL);
  *(void *)(a1 + 32) = v7;
  if (!v7)
  {
    uint64_t v6 = 4294960568;
    goto LABEL_10;
  }
  uint64_t v6 = ccgcm_init();
  if (v6) {
LABEL_10:
  }
    _AESGCMCoreCryptoFinalize(a1);
  return v6;
}

uint64_t _ChaCha20Poly1305DecryptMessageOneShot(uint64_t a1, _DWORD *a2, uint64_t a3, _DWORD *a4, uint64_t a5, unsigned int *a6, unint64_t a7, int8x16_t *a8, unint64_t a9, int8x16_t *a10, uint64_t a11, uint64_t a12)
{
  if (a3 == 32 && a5 == 12 && a12 == 16) {
    return _chacha20_poly1305_decrypt_all(a2, a4, 12, a6, a7, a8, a9, a10, a11, 16);
  }
  else {
    return 4294960591;
  }
}

uint64_t _ChaCha20Poly1305EncryptMessageOneShot(uint64_t a1, _DWORD *a2, uint64_t a3, _DWORD *a4, uint64_t a5, unsigned int *a6, unint64_t a7, int8x16_t *a8, unint64_t a9, int8x16_t *a10, uint64_t a11, uint64_t a12)
{
  uint64_t result = 4294960591;
  if (a3 == 32 && a5 == 12 && a12 == 16)
  {
    _chacha20_poly1305_encrypt_all(a2, a4, 12, a6, a7, a8, a9, a10, a11);
    return 0;
  }
  return result;
}

uint64_t _ChaCha20Poly1305DecryptMessage(uint64_t a1, _DWORD *a2, uint64_t a3, unsigned int *a4, unint64_t a5, int8x16_t *a6, unint64_t a7, int8x16_t *a8, uint64_t a9, uint64_t a10)
{
  if (a3 == 12 && a10 == 16) {
    return _chacha20_poly1305_decrypt_all((_DWORD *)(a1 + 24), a2, 12, a4, a5, a6, a7, a8, a9, 16);
  }
  else {
    return 4294960591;
  }
}

uint64_t _ChaCha20Poly1305EncryptMessage(uint64_t a1, _DWORD *a2, uint64_t a3, unsigned int *a4, unint64_t a5, int8x16_t *a6, unint64_t a7, int8x16_t *a8, uint64_t a9, uint64_t a10)
{
  uint64_t result = 4294960591;
  if (a3 == 12 && a10 == 16)
  {
    _chacha20_poly1305_encrypt_all((_DWORD *)(a1 + 24), a2, 12, a4, a5, a6, a7, a8, a9);
    return 0;
  }
  return result;
}

uint64_t _ChaCha20Poly1305Finalize(uint64_t a1)
{
  return memset_s((void *)(a1 + 24), 0x20uLL, 0, 0x20uLL);
}

uint64_t _ChaCha20Poly1305Initialize(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4)
{
  if (a4 != 32) {
    return 4294960591;
  }
  uint64_t result = 0;
  long long v6 = *a3;
  *(_OWORD *)(a1 + 40) = a3[1];
  *(_OWORD *)(a1 + 24) = v6;
  return result;
}

const void *CryptoAEADCreate(uint64_t (**a1)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  if (gCryptoAEADInitOnce != -1) {
    dispatch_once_f(&gCryptoAEADInitOnce, 0, (dispatch_function_t)_CryptoAEADGetTypeID);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  int v11 = (const void *)Instance;
  if (!Instance)
  {
    int v12 = -6728;
    if (!a5) {
      return v11;
    }
    goto LABEL_7;
  }
  *(_OWORD *)(Instance + 248) = 0u;
  *(_OWORD *)(Instance + 232) = 0u;
  *(_OWORD *)(Instance + 216) = 0u;
  *(_OWORD *)(Instance + 200) = 0u;
  *(_OWORD *)(Instance + 184) = 0u;
  *(_OWORD *)(Instance + 168) = 0u;
  *(_OWORD *)(Instance + 152) = 0u;
  *(_OWORD *)(Instance + 136) = 0u;
  *(_OWORD *)(Instance + 120) = 0u;
  *(_OWORD *)(Instance + 104) = 0u;
  *(_OWORD *)(Instance + 88) = 0u;
  *(_OWORD *)(Instance + 72) = 0u;
  *(_OWORD *)(Instance + 56) = 0u;
  *(_OWORD *)(Instance + 24) = 0u;
  *(_OWORD *)(Instance + 40) = 0u;
  *(_OWORD *)(Instance + 280) = 0u;
  *(_OWORD *)(Instance + 296) = 0u;
  *(_OWORD *)(Instance + 264) = 0u;
  *(void *)(Instance + 16) = a1;
  int v12 = (*a1)(Instance, a2, a3, a4);
  if (v12)
  {
    CFRelease(v11);
    int v11 = 0;
  }
  if (a5) {
LABEL_7:
  }
    *a5 = v12;
  return v11;
}

uint64_t _CryptoAEADGetTypeID()
{
  uint64_t result = _CFRuntimeRegisterClass();
  gCryptoAEADCFTypeID TypeID = result;
  return result;
}

uint64_t _CryptoAEADFinalize(uint64_t result)
{
  unsigned int v1 = *(uint64_t (**)(void))(*(void *)(result + 16) + 8);
  if (v1) {
    return v1();
  }
  return result;
}

uint64_t CryptoAEADEncryptMessage(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 16))();
}

uint64_t CryptoAEADDecryptMessage(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 24))();
}

uint64_t CryptoAEADEncryptMessageOneShot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v17 = *(uint64_t (**)(void))(a1 + 32);
  if (!v17)
  {
    unsigned int v20 = 0;
    uint64_t v19 = CryptoAEADCreate((uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))a1, 1, a2, a3, (int *)&v20);
    uint64_t result = v20;
    if (v20)
    {
      if (!v19) {
        return result;
      }
    }
    else
    {
      if (!v19) {
        return 4294960534;
      }
      unsigned int v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v19[2] + 16))(v19, a4, a5, a6, a7, a8, a9, a10, a11, a12);
    }
    CFRelease(v19);
    return v20;
  }
  return v17();
}

uint64_t CryptoAEADDecryptMessageOneShot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v17 = *(uint64_t (**)(void))(a1 + 40);
  if (!v17)
  {
    unsigned int v20 = 0;
    uint64_t v19 = CryptoAEADCreate((uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))a1, 2, a2, a3, (int *)&v20);
    uint64_t result = v20;
    if (v20)
    {
      if (!v19) {
        return result;
      }
    }
    else
    {
      if (!v19) {
        return 4294960534;
      }
      unsigned int v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v19[2] + 24))(v19, a4, a5, a6, a7, a8, a9, a10, a11, a12);
    }
    CFRelease(v19);
    return v20;
  }
  return v17();
}

uint64_t _MD5Final(uint64_t a1, unsigned __int8 *md)
{
  return CC_MD5_Final(md, (CC_MD5_CTX *)(a1 + 8));
}

uint64_t _MD5Update(uint64_t a1, const void *a2, CC_LONG a3)
{
  return CC_MD5_Update((CC_MD5_CTX *)(a1 + 8), a2, a3);
}

uint64_t _MD5Init(uint64_t a1)
{
  return CC_MD5_Init((CC_MD5_CTX *)(a1 + 8));
}

uint64_t _SHA1Final(uint64_t a1, unsigned __int8 *md)
{
  return CC_SHA1_Final(md, (CC_SHA1_CTX *)(a1 + 8));
}

uint64_t _SHA1Update(uint64_t a1, const void *a2, CC_LONG a3)
{
  return CC_SHA1_Update((CC_SHA1_CTX *)(a1 + 8), a2, a3);
}

uint64_t _SHA1Init(uint64_t a1)
{
  return CC_SHA1_Init((CC_SHA1_CTX *)(a1 + 8));
}

uint64_t _SHA256Final(uint64_t a1, unsigned __int8 *md)
{
  return CC_SHA256_Final(md, (CC_SHA256_CTX *)(a1 + 8));
}

uint64_t _SHA256Update(uint64_t a1, const void *a2, CC_LONG a3)
{
  return CC_SHA256_Update((CC_SHA256_CTX *)(a1 + 8), a2, a3);
}

uint64_t _SHA256Init(uint64_t a1)
{
  return CC_SHA256_Init((CC_SHA256_CTX *)(a1 + 8));
}

uint64_t _SHA512Final(uint64_t a1, unsigned __int8 *md)
{
  return CC_SHA512_Final(md, (CC_SHA512_CTX *)(a1 + 8));
}

uint64_t _SHA512Update(uint64_t a1, const void *a2, CC_LONG a3)
{
  return CC_SHA512_Update((CC_SHA512_CTX *)(a1 + 8), a2, a3);
}

uint64_t _SHA512Init(uint64_t a1)
{
  return CC_SHA512_Init((CC_SHA512_CTX *)(a1 + 8));
}

uint64_t _SHA3Final(uint64_t a1, uint64_t a2)
{
  float v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = (void *)(a1 + 216);
  uint64_t v6 = *(void *)(a1 + 208);
  *(void *)(a1 + 208) = v6 + 1;
  *(unsigned char *)(a1 + 216 + v6) = 6;
  bzero((void *)(a1 + 216 + *(void *)(a1 + 208)), 72 - *(void *)(a1 + 208));
  *(unsigned char *)(a1 + 287) |= 0x80u;
  _SHA3_Block(v4, v5);
  unint64_t v7 = 0;
  do
    *(void *)(a2 + v7 * 8) = v4[v7];
  while (v7++ < 7);
  return memset_s(v4, 0x118uLL, 0, 0x118uLL);
}

uint64_t *_SHA3Update(uint64_t *result, void *__src, size_t __n)
{
  size_t v3 = __n;
  float v4 = __src;
  uint64_t v5 = result;
  uint64_t v6 = result + 1;
  uint64_t v7 = result[26];
  if (v7)
  {
    if (72 - v7 >= __n) {
      size_t v8 = __n;
    }
    else {
      size_t v8 = 72 - v7;
    }
    uint64_t result = (uint64_t *)memcpy((char *)result + v7 + 216, __src, v8);
    unint64_t v9 = v5[26] + v8;
    v5[26] = v9;
    if (v9 < 0x48) {
      return result;
    }
    float v4 = (void *)((char *)v4 + v8);
    v3 -= v8;
    uint64_t result = (uint64_t *)_SHA3_Block(v6, v5 + 27);
  }
  if (v3 >= 0x48)
  {
    do
    {
      uint64_t result = (uint64_t *)_SHA3_Block(v6, v4);
      v4 += 9;
      v3 -= 72;
    }
    while (v3 > 0x47);
  }
  v5[26] = v3;
  if (v3)
  {
    return (uint64_t *)memcpy(v5 + 27, v4, v3);
  }
  return result;
}

uint64_t _SHA3Init(uint64_t a1)
{
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t result = a1 + 8;
  *(void *)(result + 272) = 0;
  *(_OWORD *)(result + 240) = 0u;
  *(_OWORD *)(result + 256) = 0u;
  *(_OWORD *)(result + 208) = 0u;
  *(_OWORD *)(result + 224) = 0u;
  *(_OWORD *)(result + 176) = 0u;
  *(_OWORD *)(result + 192) = 0u;
  *(_OWORD *)(result + 144) = 0u;
  *(_OWORD *)(result + 160) = 0u;
  *(_OWORD *)(result + 112) = 0u;
  *(_OWORD *)(result + 128) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  return result;
}

uint64_t CryptoHashDescriptorGetDigestSize(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t CryptoHashInit(uint64_t (***a1)(void), uint64_t (**a2)(void))
{
  *a1 = a2;
  return (*a2)();
}

uint64_t CryptoHashUpdate(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

uint64_t CryptoHashFinal(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
}

uint64_t CryptoHashOneShot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  long long v26 = 0u;
  uint64_t v27 = 0;
  long long v25 = 0u;
  long long v24 = 0u;
  long long v23 = 0u;
  long long v22 = 0u;
  long long v21 = 0u;
  long long v20 = 0u;
  long long v19 = 0u;
  long long v18 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  uint64_t v9 = a1;
  (*(void (**)(uint64_t *))a1)(&v9);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(a1 + 8))(&v9, a2, a3);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(a1 + 16))(&v9, a4);
}

uint64_t CryptoHMACInit(unsigned char *a1, uint64_t a2, char *a3, unint64_t a4)
{
  unint64_t v4 = a4;
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a2 + 32) < a4)
  {
    *(void *)a1 = a2;
    (*(void (**)(unsigned char *))a2)(a1);
    (*(void (**)(unsigned char *, char *, unint64_t))(*(void *)a1 + 8))(a1, a3, v4);
    a3 = v13;
    (*(void (**)(unsigned char *, unsigned char *))(*(void *)a1 + 16))(a1, v13);
    unint64_t v4 = *(void *)(a2 + 24);
  }
  if (v4)
  {
    size_t v8 = a1 + 288;
    uint64_t v9 = v14;
    unint64_t v10 = v4;
    do
    {
      char v11 = *a3++;
      *v9++ = v11 ^ 0x36;
      *v8++ = v11 ^ 0x5C;
      --v10;
    }
    while (v10);
  }
  for (; v4 < *(void *)(a2 + 32); ++v4)
  {
    v14[v4] = 54;
    a1[v4 + 288] = 92;
  }
  *(void *)a1 = a2;
  (*(void (**)(unsigned char *))a2)(a1);
  return (*(uint64_t (**)(unsigned char *, unsigned char *, void))(*(void *)a1 + 8))(a1, v14, *(void *)(a2 + 32));
}

uint64_t CryptoHMACUpdate(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

uint64_t CryptoHMACFinal(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  (*(void (**)(uint64_t *))(*a1 + 16))(a1);
  *a1 = v4;
  (*(void (**)(uint64_t *))v4)(a1);
  (*(void (**)(uint64_t *, uint64_t *, void))(*a1 + 8))(a1, a1 + 36, *(void *)(v4 + 32));
  (*(void (**)(uint64_t *, uint64_t, void))(*a1 + 8))(a1, a2, *(void *)(v4 + 24));
  uint64_t v5 = *(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 16);
  return v5(a1, a2);
}

uint64_t CryptoHMACOneShot(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  memset(v10, 0, sizeof(v10));
  CryptoHMACInit(v10, a1, a2, a3);
  (*(void (**)(_OWORD *, uint64_t, uint64_t))(*(void *)&v10[0] + 8))(v10, a4, a5);
  return CryptoHMACFinal((uint64_t *)v10, a6);
}

uint64_t CryptoHKDF(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, unint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9)
{
  unint64_t v12 = a5;
  __src[53] = *MEMORY[0x1E4F143B8];
  if (!a5)
  {
    unint64_t v12 = *(void *)(a1 + 24);
    a4 = &v27;
    __memset_chk();
  }
  memset(v25, 0, sizeof(v25));
  char v24 = 0;
  memset(__src, 0, 416);
  CryptoHMACInit(__src, a1, a4, v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(__src[0] + 8))(__src, a2, a3);
  uint64_t result = CryptoHMACFinal(__src, (uint64_t)v26);
  unint64_t v18 = *(void *)(a1 + 24);
  if (a8 / v18 * v18 == a8) {
    unint64_t v19 = a8 / v18;
  }
  else {
    unint64_t v19 = a8 / v18 + 1;
  }
  if (v19)
  {
    unint64_t v20 = 0;
    uint64_t v21 = 0;
    for (unint64_t i = 1; i <= v19; ++i)
    {
      CryptoHMACInit(v25, a1, v26, v18);
      (*(void (**)(_OWORD *, uint64_t *, unint64_t))(*(void *)&v25[0] + 8))(v25, __src, v20);
      (*(void (**)(_OWORD *, uint64_t, uint64_t))(*(void *)&v25[0] + 8))(v25, a6, a7);
      char v24 = i;
      (*(void (**)(_OWORD *, char *, uint64_t))(*(void *)&v25[0] + 8))(v25, &v24, 1);
      CryptoHMACFinal((uint64_t *)v25, (uint64_t)__src);
      if (v19 == i) {
        size_t v23 = a8 - v21;
      }
      else {
        size_t v23 = *(void *)(a1 + 24);
      }
      uint64_t result = (uint64_t)memcpy((void *)(a9 + v21), __src, v23);
      unint64_t v18 = *(void *)(a1 + 24);
      v21 += v18;
      unint64_t v20 = v18;
    }
  }
  return result;
}

void *Cmalloc(size_t a1)
{
  return malloc_type_malloc(a1, 0x150033ACuLL);
}

uint64_t cstr_new()
{
  uint64_t v0 = (uint64_t (**)())default_alloc;
  if (!default_alloc)
  {
    uint64_t v0 = malloc_allocator;
    default_alloc = (uint64_t)malloc_allocator;
  }
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t (*)()))*v0)(32, v0[2]);
  if (result)
  {
    *(void *)uint64_t result = &cstr_empty_string;
    *(void *)(result + 8) = 0;
    *(_DWORD *)(result + 16) = 1;
    *(void *)(result + 24) = v0;
  }
  return result;
}

uint64_t cstr_setn(uint64_t a1, const void *a2, int a3)
{
  uint64_t result = cstr_alloc(a1, a3 + 1);
  if ((result & 0x80000000) == 0)
  {
    *(unsigned char *)(*(void *)a1 + a3) = 0;
    if (a2)
    {
      if (a3 >= 1) {
        uint64_t result = (uint64_t)memmove(*(void **)a1, a2, a3);
      }
    }
    *(_DWORD *)(a1 + 8) = a3;
  }
  return result;
}

uint64_t cstr_alloc(uint64_t a1, int a2)
{
  int v2 = *(_DWORD *)(a1 + 12);
  if (v2 >= a2) {
    return 0;
  }
  int v4 = 2 * v2;
  if (v4 <= a2) {
    int v4 = a2;
  }
  if (v4 <= 4) {
    uint64_t v5 = 4;
  }
  else {
    uint64_t v5 = v4;
  }
  uint64_t v6 = (unsigned char *)(**(uint64_t (***)(uint64_t, void))(a1 + 24))(v5, *(void *)(*(void *)(a1 + 24) + 16));
  if (!v6) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = v6;
  if (*(void *)a1)
  {
    v6[*(int *)(a1 + 8)] = 0;
    if (*(int *)(a1 + 12) >= 1)
    {
      size_t v8 = *(unsigned int *)(a1 + 8);
      if ((int)v8 >= 1) {
        memcpy(v6, *(const void **)a1, v8);
      }
      free(*(void **)a1);
    }
  }
  *(void *)a1 = v7;
  *(_DWORD *)(a1 + 12) = v5;
  return 1;
}

uint64_t cstr_clear_free(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 16) - 1;
  *(_DWORD *)(result + 16) = v1;
  if (!v1)
  {
    int v2 = (void *)result;
    size_t v3 = *(unsigned int *)(result + 12);
    if ((int)v3 >= 1)
    {
      bzero(*(void **)result, v3);
      (*(void (**)(void, void))(v2[3] + 8))(*v2, *(void *)(v2[3] + 16));
    }
    uint64_t v4 = v2[3];
    uint64_t v6 = *(uint64_t (**)(void *, uint64_t))(v4 + 8);
    uint64_t v5 = *(void *)(v4 + 16);
    return v6(v2, v5);
  }
  return result;
}

uint64_t cstr_free(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 16) - 1;
  *(_DWORD *)(result + 16) = v1;
  if (!v1)
  {
    uint64_t v2 = result;
    if (*(int *)(result + 12) >= 1) {
      (*(void (**)(void, void))(*(void *)(result + 24) + 8))(*(void *)result, *(void *)(*(void *)(result + 24) + 16));
    }
    uint64_t v3 = *(void *)(v2 + 24);
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
    uint64_t v4 = *(void *)(v3 + 16);
    return v5(v2, v4);
  }
  return result;
}

uint64_t cstr_set_length(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)(a1 + 8);
  if (v4 > a2)
  {
    *(unsigned char *)(*(void *)a1 + a2) = 0;
LABEL_7:
    *(_DWORD *)(a1 + 8) = a2;
    return 1;
  }
  if (v4 >= a2) {
    return 0;
  }
  int v5 = a2 + 1;
  if ((cstr_alloc(a1, a2 + 1) & 0x80000000) == 0)
  {
    bzero((void *)(*(void *)a1 + *(int *)(a1 + 8)), v5 - *(_DWORD *)(a1 + 8));
    goto LABEL_7;
  }
  return 0xFFFFFFFFLL;
}

Class initAKAccountManager()
{
  if (AuthKitLibrary_sOnce != -1) {
    dispatch_once(&AuthKitLibrary_sOnce, &__block_literal_global_169);
  }
  Class result = objc_getClass("AKAccountManager");
  classAKAccountManager = (uint64_t)result;
  getAKAccountManagerClass[0] = (uint64_t (*)())AKAccountManagerFunction;
  return result;
}

id AKAccountManagerFunction()
{
  return (id)classAKAccountManager;
}

void *__AuthKitLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/AuthKit.framework/AuthKit", 2);
  AuthKitLibrary_sLib = (uint64_t)result;
  return result;
}

Class initACAccountStore()
{
  if (AccountsLibrary_sOnce != -1) {
    dispatch_once(&AccountsLibrary_sOnce, &__block_literal_global_159);
  }
  Class result = objc_getClass("ACAccountStore");
  classACAccountStore = (uint64_t)result;
  getACAccountStoreClass = (uint64_t (*)())ACAccountStoreFunction;
  return result;
}

id ACAccountStoreFunction()
{
  return (id)classACAccountStore;
}

void *__AccountsLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/Frameworks/Accounts.framework/Accounts", 2);
  AccountsLibrary_sLib = (uint64_t)result;
  return result;
}

void *__AppleAccountLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/AppleAccount.framework/AppleAccount", 2);
  AppleAccountLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t init_AppleIDAuthenticationCopyCertificateInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (MobileCoreServicesLibrary_sOnce_903 != -1) {
    dispatch_once(&MobileCoreServicesLibrary_sOnce_903, &__block_literal_global_163);
  }
  size_t v8 = (uint64_t (*)())dlsym((void *)MobileCoreServicesLibrary_sLib_904, "_AppleIDAuthenticationCopyCertificateInfo");
  softLink_AppleIDAuthenticationCopyCertificateInfo[0] = v8;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v8)(a1, a2, a3, a4);
}

void *__MobileCoreServicesLibrary_block_invoke_907()
{
  Class result = dlopen("/System/Library/Frameworks/MobileCoreServices.framework/MobileCoreServices", 2);
  MobileCoreServicesLibrary_sLib_904 = (uint64_t)result;
  return result;
}

uint64_t initValkAppleIDValidatedItemsRecordDataCertificateType()
{
  if (MobileCoreServicesLibrary_sOnce_903 != -1) {
    dispatch_once(&MobileCoreServicesLibrary_sOnce_903, &__block_literal_global_163);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)MobileCoreServicesLibrary_sLib_904, "kAppleIDValidatedItemsRecordDataCertificateType");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkAppleIDValidatedItemsRecordDataCertificateType = result;
  }
  else
  {
    uint64_t result = constantValkAppleIDValidatedItemsRecordDataCertificateType;
  }
  getkAppleIDValidatedItemsRecordDataCertificateType[0] = kAppleIDValidatedItemsRecordDataCertificateTypeFunction;
  return result;
}

uint64_t kAppleIDValidatedItemsRecordDataCertificateTypeFunction()
{
  return constantValkAppleIDValidatedItemsRecordDataCertificateType;
}

uint64_t init_AppleIDCopySecIdentityForAppleIDAccount(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MobileCoreServicesLibrary_sOnce_903 != -1) {
    dispatch_once(&MobileCoreServicesLibrary_sOnce_903, &__block_literal_global_163);
  }
  uint64_t v6 = (uint64_t (*)())dlsym((void *)MobileCoreServicesLibrary_sLib_904, "_AppleIDCopySecIdentityForAppleIDAccount");
  softLink_AppleIDCopySecIdentityForAppleIDAccount[0] = v6;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(a1, a2, a3);
}

void sub_18E3310B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void initSFAppleIDParseValidationRecordData(void *a1, void *a2, void *a3)
{
  uint64_t v5 = SharingLibrary_sOnce;
  id v6 = a3;
  id v7 = a2;
  id v8 = a1;
  if (v5 != -1) {
    dispatch_once(&SharingLibrary_sOnce, &__block_literal_global_944);
  }
  softLinkSFAppleIDParseValidationRecordData[0] = (uint64_t (*)())dlsym((void *)SharingLibrary_sLib, "SFAppleIDParseValidationRecordData");
  ((void (*)(id, id, id))softLinkSFAppleIDParseValidationRecordData[0])(v8, v7, v6);
}

void *__SharingLibrary_block_invoke()
{
  uint64_t result = dlopen("/System/Library/PrivateFrameworks/Sharing.framework/Sharing", 2);
  SharingLibrary_sLib = (uint64_t)result;
  return result;
}

id CUAltDSIDPrimary()
{
  if (AppleAccountLibrary_sOnce != -1) {
    dispatch_once(&AppleAccountLibrary_sOnce, &__block_literal_global_155);
  }
  id v0 = objc_alloc_init(getACAccountStoreClass());
  int v1 = objc_msgSend(v0, "aa_primaryAppleAccount");
  uint64_t v2 = objc_msgSend(v1, "aa_altDSID");

  return v2;
}

Class initAVAudioPlayer()
{
  if (AVFoundationLibrary_sOnce != -1) {
    dispatch_once(&AVFoundationLibrary_sOnce, &__block_literal_global_996);
  }
  Class result = objc_getClass("AVAudioPlayer");
  classAVAudioPlayer = (uint64_t)result;
  getAVAudioPlayerClass[0] = (uint64_t (*)())AVAudioPlayerFunction;
  return result;
}

id AVAudioPlayerFunction()
{
  return (id)classAVAudioPlayer;
}

void *__AVFoundationLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/Frameworks/AVFoundation.framework/AVFoundation", 2);
  AVFoundationLibrary_sLib = (uint64_t)result;
  return result;
}

id initValAVAudioSessionInterruptionNotification()
{
  if (AVFoundationLibrary_sOnce != -1) {
    dispatch_once(&AVFoundationLibrary_sOnce, &__block_literal_global_996);
  }
  id v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib, "AVAudioSessionInterruptionNotification");
  if (v0) {
    objc_storeStrong((id *)&constantValAVAudioSessionInterruptionNotification, *v0);
  }
  getAVAudioSessionInterruptionNotification[0] = (uint64_t (*)())AVAudioSessionInterruptionNotificationFunction;
  int v1 = (void *)constantValAVAudioSessionInterruptionNotification;
  return v1;
}

id AVAudioSessionInterruptionNotificationFunction()
{
  return (id)constantValAVAudioSessionInterruptionNotification;
}

id initValAVAudioSessionCategoryAmbient()
{
  if (AVFoundationLibrary_sOnce != -1) {
    dispatch_once(&AVFoundationLibrary_sOnce, &__block_literal_global_996);
  }
  id v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib, "AVAudioSessionCategoryAmbient");
  if (v0) {
    objc_storeStrong((id *)&constantValAVAudioSessionCategoryAmbient, *v0);
  }
  getAVAudioSessionCategoryAmbient[0] = (uint64_t (*)())AVAudioSessionCategoryAmbientFunction;
  int v1 = (void *)constantValAVAudioSessionCategoryAmbient;
  return v1;
}

id AVAudioSessionCategoryAmbientFunction()
{
  return (id)constantValAVAudioSessionCategoryAmbient;
}

Class initAVAudioSession()
{
  if (AVFoundationLibrary_sOnce != -1) {
    dispatch_once(&AVFoundationLibrary_sOnce, &__block_literal_global_996);
  }
  Class result = objc_getClass("AVAudioSession");
  classAVAudioSession = (uint64_t)result;
  getAVAudioSessionClass[0] = (uint64_t (*)())AVAudioSessionFunction;
  return result;
}

id AVAudioSessionFunction()
{
  return (id)classAVAudioSession;
}

id initValCBAdvertisementDataIsConnectable()
{
  if (CoreBluetoothLibrary_sOnce != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce, &__block_literal_global_1124);
  }
  id v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib, "CBAdvertisementDataIsConnectable");
  if (v0) {
    objc_storeStrong((id *)&constantValCBAdvertisementDataIsConnectable, *v0);
  }
  getCBAdvertisementDataIsConnectable[0] = (uint64_t (*)())CBAdvertisementDataIsConnectableFunction;
  int v1 = (void *)constantValCBAdvertisementDataIsConnectable;
  return v1;
}

id CBAdvertisementDataIsConnectableFunction()
{
  return (id)constantValCBAdvertisementDataIsConnectable;
}

void *__CoreBluetoothLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth", 2);
  CoreBluetoothLibrary_sLib = (uint64_t)result;
  return result;
}

id initValCBAdvertisementDataAppleMfgData()
{
  if (CoreBluetoothLibrary_sOnce != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce, &__block_literal_global_1124);
  }
  id v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib, "CBAdvertisementDataAppleMfgData");
  if (v0) {
    objc_storeStrong((id *)&constantValCBAdvertisementDataAppleMfgData, *v0);
  }
  getCBAdvertisementDataAppleMfgData[0] = (uint64_t (*)())CBAdvertisementDataAppleMfgDataFunction;
  int v1 = (void *)constantValCBAdvertisementDataAppleMfgData;
  return v1;
}

id CBAdvertisementDataAppleMfgDataFunction()
{
  return (id)constantValCBAdvertisementDataAppleMfgData;
}

void sub_18E3344EC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id initValCBManagerIsPrivilegedDaemonKey()
{
  if (CoreBluetoothLibrary_sOnce != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce, &__block_literal_global_1124);
  }
  id v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib, "CBManagerIsPrivilegedDaemonKey");
  if (v0) {
    objc_storeStrong((id *)&constantValCBManagerIsPrivilegedDaemonKey, *v0);
  }
  getCBManagerIsPrivilegedDaemonKey[0] = (uint64_t (*)())CBManagerIsPrivilegedDaemonKeyFunction;
  int v1 = (void *)constantValCBManagerIsPrivilegedDaemonKey;
  return v1;
}

id CBManagerIsPrivilegedDaemonKeyFunction()
{
  return (id)constantValCBManagerIsPrivilegedDaemonKey;
}

Class initCBPeripheralManager()
{
  if (CoreBluetoothLibrary_sOnce != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce, &__block_literal_global_1124);
  }
  Class result = objc_getClass("CBPeripheralManager");
  classCBPeripheralManager = (uint64_t)result;
  getCBPeripheralManagerClass[0] = (uint64_t (*)())CBPeripheralManagerFunction;
  return result;
}

id CBPeripheralManagerFunction()
{
  return (id)classCBPeripheralManager;
}

void sub_18E334F5C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18E3350C8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18E3352B0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id initValCBConnectPeripheralOptionConnectionUseCase()
{
  if (CoreBluetoothLibrary_sOnce_1258 != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce_1258, &__block_literal_global_1259);
  }
  id v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_1260, "CBConnectPeripheralOptionConnectionUseCase");
  if (v0) {
    objc_storeStrong((id *)&constantValCBConnectPeripheralOptionConnectionUseCase, *v0);
  }
  getCBConnectPeripheralOptionConnectionUseCase[0] = (uint64_t (*)())CBConnectPeripheralOptionConnectionUseCaseFunction;
  int v1 = (void *)constantValCBConnectPeripheralOptionConnectionUseCase;
  return v1;
}

id CBConnectPeripheralOptionConnectionUseCaseFunction()
{
  return (id)constantValCBConnectPeripheralOptionConnectionUseCase;
}

void *__CoreBluetoothLibrary_block_invoke_1263()
{
  Class result = dlopen("/System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth", 2);
  CoreBluetoothLibrary_sLib_1260 = (uint64_t)result;
  return result;
}

id initValCBConnectPeripheralOptionClientBundleID()
{
  if (CoreBluetoothLibrary_sOnce_1258 != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce_1258, &__block_literal_global_1259);
  }
  id v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_1260, "CBConnectPeripheralOptionClientBundleID");
  if (v0) {
    objc_storeStrong((id *)&constantValCBConnectPeripheralOptionClientBundleID, *v0);
  }
  getCBConnectPeripheralOptionClientBundleID[0] = (uint64_t (*)())CBConnectPeripheralOptionClientBundleIDFunction;
  int v1 = (void *)constantValCBConnectPeripheralOptionClientBundleID;
  return v1;
}

id CBConnectPeripheralOptionClientBundleIDFunction()
{
  return (id)constantValCBConnectPeripheralOptionClientBundleID;
}

id initValCBManagerNeedsRestrictedStateOperation()
{
  if (CoreBluetoothLibrary_sOnce_1258 != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce_1258, &__block_literal_global_1259);
  }
  id v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_1260, "CBManagerNeedsRestrictedStateOperation");
  if (v0) {
    objc_storeStrong((id *)&constantValCBManagerNeedsRestrictedStateOperation, *v0);
  }
  getCBManagerNeedsRestrictedStateOperation[0] = (uint64_t (*)())CBManagerNeedsRestrictedStateOperationFunction;
  int v1 = (void *)constantValCBManagerNeedsRestrictedStateOperation;
  return v1;
}

id CBManagerNeedsRestrictedStateOperationFunction()
{
  return (id)constantValCBManagerNeedsRestrictedStateOperation;
}

Class initCBCentralManager()
{
  if (CoreBluetoothLibrary_sOnce_1258 != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce_1258, &__block_literal_global_1259);
  }
  Class result = objc_getClass("CBCentralManager");
  classCBCentralManager = (uint64_t)result;
  getCBCentralManagerClass[0] = (uint64_t (*)())CBCentralManagerFunction;
  return result;
}

id CBCentralManagerFunction()
{
  return (id)classCBCentralManager;
}

id initValCBAdvertisementDataManufacturerDataKey()
{
  if (CoreBluetoothLibrary_sOnce_1436 != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce_1436, &__block_literal_global_1437);
  }
  id v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_1438, "CBAdvertisementDataManufacturerDataKey");
  if (v0) {
    objc_storeStrong((id *)&constantValCBAdvertisementDataManufacturerDataKey, *v0);
  }
  getCBAdvertisementDataManufacturerDataKey[0] = (uint64_t (*)())CBAdvertisementDataManufacturerDataKeyFunction;
  int v1 = (void *)constantValCBAdvertisementDataManufacturerDataKey;
  return v1;
}

id CBAdvertisementDataManufacturerDataKeyFunction()
{
  return (id)constantValCBAdvertisementDataManufacturerDataKey;
}

void *__CoreBluetoothLibrary_block_invoke_1441()
{
  Class result = dlopen("/System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth", 2);
  CoreBluetoothLibrary_sLib_1438 = (uint64_t)result;
  return result;
}

id initValCBAdvertisementDataDeviceAddress()
{
  if (CoreBluetoothLibrary_sOnce_1436 != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce_1436, &__block_literal_global_1437);
  }
  id v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_1438, "CBAdvertisementDataDeviceAddress");
  if (v0) {
    objc_storeStrong((id *)&constantValCBAdvertisementDataDeviceAddress, *v0);
  }
  getCBAdvertisementDataDeviceAddress[0] = (uint64_t (*)())CBAdvertisementDataDeviceAddressFunction;
  int v1 = (void *)constantValCBAdvertisementDataDeviceAddress;
  return v1;
}

id CBAdvertisementDataDeviceAddressFunction()
{
  return (id)constantValCBAdvertisementDataDeviceAddress;
}

id initValCBCentralManagerScanOptionMatchingRuleMaskKey()
{
  if (CoreBluetoothLibrary_sOnce_1436 != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce_1436, &__block_literal_global_1437);
  }
  id v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_1438, "CBCentralManagerScanOptionMatchingRuleMaskKey");
  if (v0) {
    objc_storeStrong((id *)&constantValCBCentralManagerScanOptionMatchingRuleMaskKey, *v0);
  }
  getCBCentralManagerScanOptionMatchingRuleMaskKey[0] = (uint64_t (*)())CBCentralManagerScanOptionMatchingRuleMaskKeyFunction;
  int v1 = (void *)constantValCBCentralManagerScanOptionMatchingRuleMaskKey;
  return v1;
}

id CBCentralManagerScanOptionMatchingRuleMaskKeyFunction()
{
  return (id)constantValCBCentralManagerScanOptionMatchingRuleMaskKey;
}

id initValCBCentralManagerScanOptionMatchingRulePayloadKey()
{
  if (CoreBluetoothLibrary_sOnce_1436 != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce_1436, &__block_literal_global_1437);
  }
  id v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_1438, "CBCentralManagerScanOptionMatchingRulePayloadKey");
  if (v0) {
    objc_storeStrong((id *)&constantValCBCentralManagerScanOptionMatchingRulePayloadKey, *v0);
  }
  getCBCentralManagerScanOptionMatchingRulePayloadKey[0] = (uint64_t (*)())CBCentralManagerScanOptionMatchingRulePayloadKeyFunction;
  int v1 = (void *)constantValCBCentralManagerScanOptionMatchingRulePayloadKey;
  return v1;
}

id CBCentralManagerScanOptionMatchingRulePayloadKeyFunction()
{
  return (id)constantValCBCentralManagerScanOptionMatchingRulePayloadKey;
}

id initValCBCentralManagerScanOptionMatchingRuleRSSIKey()
{
  if (CoreBluetoothLibrary_sOnce_1436 != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce_1436, &__block_literal_global_1437);
  }
  id v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_1438, "CBCentralManagerScanOptionMatchingRuleRSSIKey");
  if (v0) {
    objc_storeStrong((id *)&constantValCBCentralManagerScanOptionMatchingRuleRSSIKey, *v0);
  }
  getCBCentralManagerScanOptionMatchingRuleRSSIKey[0] = (uint64_t (*)())CBCentralManagerScanOptionMatchingRuleRSSIKeyFunction;
  int v1 = (void *)constantValCBCentralManagerScanOptionMatchingRuleRSSIKey;
  return v1;
}

id CBCentralManagerScanOptionMatchingRuleRSSIKeyFunction()
{
  return (id)constantValCBCentralManagerScanOptionMatchingRuleRSSIKey;
}

id initValCBCentralManagerScanOptionMatchingRuleTypeKey()
{
  if (CoreBluetoothLibrary_sOnce_1436 != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce_1436, &__block_literal_global_1437);
  }
  id v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_1438, "CBCentralManagerScanOptionMatchingRuleTypeKey");
  if (v0) {
    objc_storeStrong((id *)&constantValCBCentralManagerScanOptionMatchingRuleTypeKey, *v0);
  }
  getCBCentralManagerScanOptionMatchingRuleTypeKey[0] = (uint64_t (*)())CBCentralManagerScanOptionMatchingRuleTypeKeyFunction;
  int v1 = (void *)constantValCBCentralManagerScanOptionMatchingRuleTypeKey;
  return v1;
}

id CBCentralManagerScanOptionMatchingRuleTypeKeyFunction()
{
  return (id)constantValCBCentralManagerScanOptionMatchingRuleTypeKey;
}

id initValCBCentralManagerScanOptionAllowDuplicatesKey()
{
  if (CoreBluetoothLibrary_sOnce_1436 != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce_1436, &__block_literal_global_1437);
  }
  id v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_1438, "CBCentralManagerScanOptionAllowDuplicatesKey");
  if (v0) {
    objc_storeStrong((id *)&constantValCBCentralManagerScanOptionAllowDuplicatesKey, *v0);
  }
  getCBCentralManagerScanOptionAllowDuplicatesKey[0] = (uint64_t (*)())CBCentralManagerScanOptionAllowDuplicatesKeyFunction;
  int v1 = (void *)constantValCBCentralManagerScanOptionAllowDuplicatesKey;
  return v1;
}

id CBCentralManagerScanOptionAllowDuplicatesKeyFunction()
{
  return (id)constantValCBCentralManagerScanOptionAllowDuplicatesKey;
}

id initValCBCentralManagerScanOptionMatchingRuleKey()
{
  if (CoreBluetoothLibrary_sOnce_1436 != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce_1436, &__block_literal_global_1437);
  }
  id v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_1438, "CBCentralManagerScanOptionMatchingRuleKey");
  if (v0) {
    objc_storeStrong((id *)&constantValCBCentralManagerScanOptionMatchingRuleKey, *v0);
  }
  getCBCentralManagerScanOptionMatchingRuleKey[0] = (uint64_t (*)())CBCentralManagerScanOptionMatchingRuleKeyFunction;
  int v1 = (void *)constantValCBCentralManagerScanOptionMatchingRuleKey;
  return v1;
}

id CBCentralManagerScanOptionMatchingRuleKeyFunction()
{
  return (id)constantValCBCentralManagerScanOptionMatchingRuleKey;
}

id initValCBCentralManagerScanOptionScanWindow()
{
  if (CoreBluetoothLibrary_sOnce_1436 != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce_1436, &__block_literal_global_1437);
  }
  id v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_1438, "CBCentralManagerScanOptionScanWindow");
  if (v0) {
    objc_storeStrong((id *)&constantValCBCentralManagerScanOptionScanWindow, *v0);
  }
  getCBCentralManagerScanOptionScanWindow[0] = (uint64_t (*)())CBCentralManagerScanOptionScanWindowFunction;
  int v1 = (void *)constantValCBCentralManagerScanOptionScanWindow;
  return v1;
}

id CBCentralManagerScanOptionScanWindowFunction()
{
  return (id)constantValCBCentralManagerScanOptionScanWindow;
}

id initValCBCentralManagerScanOptionScanInterval()
{
  if (CoreBluetoothLibrary_sOnce_1436 != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce_1436, &__block_literal_global_1437);
  }
  id v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_1438, "CBCentralManagerScanOptionScanInterval");
  if (v0) {
    objc_storeStrong((id *)&constantValCBCentralManagerScanOptionScanInterval, *v0);
  }
  getCBCentralManagerScanOptionScanInterval[0] = (uint64_t (*)())CBCentralManagerScanOptionScanIntervalFunction;
  int v1 = (void *)constantValCBCentralManagerScanOptionScanInterval;
  return v1;
}

id CBCentralManagerScanOptionScanIntervalFunction()
{
  return (id)constantValCBCentralManagerScanOptionScanInterval;
}

id initValCBManagerIsPrivilegedDaemonKey_1458()
{
  if (CoreBluetoothLibrary_sOnce_1436 != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce_1436, &__block_literal_global_1437);
  }
  id v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_1438, "CBManagerIsPrivilegedDaemonKey");
  if (v0) {
    objc_storeStrong((id *)&constantValCBManagerIsPrivilegedDaemonKey_1459, *v0);
  }
  getCBManagerIsPrivilegedDaemonKey_1456[0] = (uint64_t (*)())CBManagerIsPrivilegedDaemonKeyFunction_1461;
  int v1 = (void *)constantValCBManagerIsPrivilegedDaemonKey_1459;
  return v1;
}

id CBManagerIsPrivilegedDaemonKeyFunction_1461()
{
  return (id)constantValCBManagerIsPrivilegedDaemonKey_1459;
}

id initValCBCentralManagerScanOptionActive()
{
  if (CoreBluetoothLibrary_sOnce_1436 != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce_1436, &__block_literal_global_1437);
  }
  id v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_1438, "CBCentralManagerScanOptionActive");
  if (v0) {
    objc_storeStrong((id *)&constantValCBCentralManagerScanOptionActive, *v0);
  }
  getCBCentralManagerScanOptionActive[0] = (uint64_t (*)())CBCentralManagerScanOptionActiveFunction;
  int v1 = (void *)constantValCBCentralManagerScanOptionActive;
  return v1;
}

id CBCentralManagerScanOptionActiveFunction()
{
  return (id)constantValCBCentralManagerScanOptionActive;
}

id initValCBManagerNeedsRestrictedStateOperation_1472()
{
  if (CoreBluetoothLibrary_sOnce_1436 != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce_1436, &__block_literal_global_1437);
  }
  id v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_1438, "CBManagerNeedsRestrictedStateOperation");
  if (v0) {
    objc_storeStrong((id *)&constantValCBManagerNeedsRestrictedStateOperation_1473, *v0);
  }
  getCBManagerNeedsRestrictedStateOperation_1463[0] = (uint64_t (*)())CBManagerNeedsRestrictedStateOperationFunction_1475;
  int v1 = (void *)constantValCBManagerNeedsRestrictedStateOperation_1473;
  return v1;
}

id CBManagerNeedsRestrictedStateOperationFunction_1475()
{
  return (id)constantValCBManagerNeedsRestrictedStateOperation_1473;
}

Class initCBCentralManager_1477()
{
  if (CoreBluetoothLibrary_sOnce_1436 != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce_1436, &__block_literal_global_1437);
  }
  Class result = objc_getClass("CBCentralManager");
  classCBCentralManager_1478 = (uint64_t)result;
  getCBCentralManagerClass_1462[0] = (uint64_t (*)())CBCentralManagerFunction_1480;
  return result;
}

id CBCentralManagerFunction_1480()
{
  return (id)classCBCentralManager_1478;
}

void sub_18E33B9E0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

Class initCBPeripheralManager_1635()
{
  if (CoreBluetoothLibrary_sOnce_1636 != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce_1636, &__block_literal_global_1637);
  }
  Class result = objc_getClass("CBPeripheralManager");
  classCBPeripheralManager_1639 = (uint64_t)result;
  getCBPeripheralManagerClass_1631[0] = (uint64_t (*)())CBPeripheralManagerFunction_1641;
  return result;
}

id CBPeripheralManagerFunction_1641()
{
  return (id)classCBPeripheralManager_1639;
}

void *__CoreBluetoothLibrary_block_invoke_1644()
{
  Class result = dlopen("/System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth", 2);
  CoreBluetoothLibrary_sLib_1646 = (uint64_t)result;
  return result;
}

uint64_t initBTSessionDetachWithQueue(uint64_t a1)
{
  if (MobileBluetoothLibrary_sOnce != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce, &__block_literal_global_1848);
  }
  uint64_t v2 = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib, "BTSessionDetachWithQueue");
  softLinkBTSessionDetachWithQueue[0] = v2;
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

void *__MobileBluetoothLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/MobileBluetooth.framework/MobileBluetooth", 2);
  MobileBluetoothLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t initBTServiceRemoveCallbacks(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce, &__block_literal_global_1848);
  }
  int v4 = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib, "BTServiceRemoveCallbacks");
  softLinkBTServiceRemoveCallbacks[0] = v4;
  return ((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2);
}

void _btServiceEventHandler(uint64_t a1, uint64_t a2, int a3, int a4, int a5, void *a6)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = (void *)MEMORY[0x192FAA9B0]();
  id v13 = a6;
  dispatch_assert_queue_V2(*((dispatch_queue_t *)v13 + 23));
  if (!*((unsigned char *)v13 + 67)) {
    goto LABEL_32;
  }
  if (a3)
  {
    uint64_t v14 = (int *)*((void *)v13 + 19);
    if (*v14 <= 30)
    {
      if (*v14 != -1)
      {
LABEL_5:
        BTServiceSpecificEventToString(a4);
        uint64_t v42 = (char *)a2;
        unint64_t v19 = "BTService event type: %#{flags}, %d, %d %s, %#m\n";
        unint64_t v20 = v14;
LABEL_6:
        LogPrintF((uint64_t)v20, (uint64_t)"void _btServiceEventHandler(BTDevice _Nonnull, BTServiceID, BTServiceEventType, BTServiceSpecificEvent, BTResult, void * _Nonnull)", 0x1Eu, (uint64_t)v19, v15, v16, v17, v18, (uint64_t)v42);
        goto LABEL_32;
      }
      if (_LogCategory_Initialize(*((void *)v13 + 19), 0x1Eu))
      {
        uint64_t v14 = (int *)*((void *)v13 + 19);
        goto LABEL_5;
      }
    }
    goto LABEL_32;
  }
  if (a5) {
    uint64_t v21 = (a5 + 310000);
  }
  else {
    uint64_t v21 = 0;
  }
  long long v22 = (int *)*((void *)v13 + 19);
  if (*v22 <= 30)
  {
    if (*v22 != -1)
    {
LABEL_13:
      BTServiceSpecificEventToString(a4);
      LogPrintF((uint64_t)v22, (uint64_t)"void _btServiceEventHandler(BTDevice _Nonnull, BTServiceID, BTServiceEventType, BTServiceSpecificEvent, BTResult, void * _Nonnull)", 0x1Eu, (uint64_t)"BTService connect: %#{flags}, %d %s, %#m\n", v23, v24, v25, v26, a2);
      goto LABEL_17;
    }
    if (_LogCategory_Initialize(*((void *)v13 + 19), 0x1Eu))
    {
      long long v22 = (int *)*((void *)v13 + 19);
      goto LABEL_13;
    }
  }
LABEL_17:
  if (a4 != 11) {
    goto LABEL_32;
  }
  __s1[0] = 0;
  int v27 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkBTDeviceGetAddressString[0])(a1, (uint64_t)__s1, 32);
  if (v27)
  {
    uint64_t v32 = (v27 + 310000);
    if (v27 != -310000)
    {
      int v40 = (int *)*((void *)v13 + 19);
      if (*v40 <= 90)
      {
        if (*v40 == -1)
        {
          if (!_LogCategory_Initialize((uint64_t)v40, 0x5Au)) {
            goto LABEL_32;
          }
          int v40 = (int *)*((void *)v13 + 19);
        }
        LogPrintF((uint64_t)v40, (uint64_t)"void _btServiceEventHandler(BTDevice _Nonnull, BTServiceID, BTServiceEventType, BTServiceSpecificEvent, BTResult, void * _Nonnull)", 0x5Au, (uint64_t)"### BTDeviceGetAddressString failed: %#m\n", v28, v29, v30, v31, v32);
      }
      goto LABEL_32;
    }
  }
  if (strcmp(__s1, (const char *)v13 + 17))
  {
    unint64_t v20 = (int *)*((void *)v13 + 19);
    if (*v20 <= 30)
    {
      if (*v20 == -1)
      {
        if (!_LogCategory_Initialize((uint64_t)v20, 0x1Eu)) {
          goto LABEL_32;
        }
        unint64_t v20 = (int *)*((void *)v13 + 19);
      }
      uint64_t v42 = __s1;
      unint64_t v19 = "BTService connect, ignoring device: %s vs %s\n";
      goto LABEL_6;
    }
    goto LABEL_32;
  }
  if (v21)
  {
    float v34 = NSErrorF_safe((void *)*MEMORY[0x1E4F28760], v21, (uint64_t)"BTService connect failed", v33, v15, v16, v17, v18, v41);
    [v13 _reportError:v34];

    goto LABEL_32;
  }
  if (!*((_DWORD *)v13 + 41))
  {
LABEL_31:
    *((unsigned char *)v13 + 16) = 1;
    [v13 _run];
    goto LABEL_32;
  }
  int v43 = 0;
  int v35 = ((uint64_t (*)(uint64_t, uint64_t))softLinkBTDeviceGetConnectedServices[0])(a1, (uint64_t)&v43);
  if (v35)
  {
    uint64_t v36 = (v35 + 310000);
    if (v35 != -310000)
    {
      uint64_t v37 = (int *)*((void *)v13 + 19);
      if (*v37 <= 90)
      {
        if (*v37 == -1)
        {
          if (!_LogCategory_Initialize((uint64_t)v37, 0x5Au)) {
            goto LABEL_30;
          }
          uint64_t v37 = (int *)*((void *)v13 + 19);
        }
        LogPrintF((uint64_t)v37, (uint64_t)"void _btServiceEventHandler(BTDevice _Nonnull, BTServiceID, BTServiceEventType, BTServiceSpecificEvent, BTResult, void * _Nonnull)", 0x5Au, (uint64_t)"### BTDeviceGetConnectedServices failed: %#m\n", v15, v16, v17, v18, v36);
      }
    }
  }
LABEL_30:
  int v38 = v43;
  int v39 = *((_DWORD *)v13 + 41);
  if ((v39 & ~v43) == 0) {
    goto LABEL_31;
  }
  unint64_t v20 = (int *)*((void *)v13 + 19);
  if (*v20 <= 30)
  {
    if (*v20 == -1)
    {
      if (!_LogCategory_Initialize((uint64_t)v20, 0x1Eu)) {
        goto LABEL_32;
      }
      unint64_t v20 = (int *)*((void *)v13 + 19);
      int v39 = *((_DWORD *)v13 + 41);
      int v38 = v43;
    }
    uint64_t v42 = (char *)(v39 & ~v38);
    unint64_t v19 = "BTService connect waiting for more services: %#{flags}\n";
    goto LABEL_6;
  }
LABEL_32:
}

const char *BTServiceSpecificEventToString(int a1)
{
  if (a1 > 500)
  {
    if (a1 <= 600)
    {
      switch(a1)
      {
        case 501:
          Class result = "BT_SERVICE_REMOTE_PLAY";
          break;
        case 502:
          Class result = "BT_SERVICE_REMOTE_PAUSE";
          break;
        case 503:
          Class result = "BT_SERVICE_REMOTE_STOP";
          break;
        case 504:
          Class result = "BT_SERVICE_REMOTE_PREVIOUS";
          break;
        case 505:
          Class result = "BT_SERVICE_REMOTE_NEXT";
          break;
        case 506:
          Class result = "BT_SERVICE_REMOTE_VOL_UP";
          break;
        case 507:
          Class result = "BT_SERVICE_REMOTE_VOL_DOWN";
          break;
        case 508:
          Class result = "BT_SERVICE_REMOTE_MUTE";
          break;
        case 509:
          Class result = "BT_SERVICE_REMOTE_FASTFORWARD_START";
          break;
        case 510:
          Class result = "BT_SERVICE_REMOTE_FASTFORWARD_STOP";
          break;
        case 511:
          Class result = "BT_SERVICE_REMOTE_REWIND_START";
          break;
        case 512:
          Class result = "BT_SERVICE_REMOTE_REWIND_STOP";
          break;
        default:
          return "?";
      }
      return result;
    }
    if (a1 <= 702)
    {
      switch(a1)
      {
        case 601:
          return "BT_SERVICE_SENSOR_RSSI";
        case 701:
          return "BT_SERVICE_LMP_NAME_CHANGED";
        case 702:
          return "BT_SERVICE_HIGH_POWER_ENABLED";
      }
    }
    else if (a1 > 801)
    {
      if (a1 == 802) {
        return "BT_SERVICE_LEA_AUDIO_DISCONNECTED";
      }
      if (a1 == 901) {
        return "BT_UI_INITIATED_CONNECTION_REQUEST";
      }
    }
    else
    {
      if (a1 == 703) {
        return "BT_SERVICE_HIGH_POWER_DISABLED";
      }
      if (a1 == 801) {
        return "BT_SERVICE_LEA_AUDIO_CONNECTED";
      }
    }
    return "?";
  }
  if (a1 <= 100)
  {
    if (a1 <= 1)
    {
      if (!a1) {
        return "BT_SERVICE_SDP";
      }
      if (a1 == 1) {
        return "BT_SERVICE_CONNECTION_ATTEMPT";
      }
    }
    else
    {
      switch(a1)
      {
        case 2:
          return "BT_SERVICE_DISCONNECTION_ATTEMPT";
        case 11:
          return "BT_SERVICE_CONNECTION_RESULT";
        case 12:
          return "BT_SERVICE_DISCONNECTION_RESULT";
      }
    }
    return "?";
  }
  if (a1 > 201)
  {
    if (a1 > 301)
    {
      if (a1 == 302) {
        return "BT_SERVICE_PHONE_BOOK_SEND_COMPLETE";
      }
      if (a1 == 303) {
        return "BT_SERVICE_PHONE_BOOK_SYNC_SUPPORTED";
      }
    }
    else
    {
      if (a1 == 202) {
        return "BT_SERVICE_A2DP_AUDIO_DISCONNECTED";
      }
      if (a1 == 301) {
        return "BT_SERVICE_PHONE_BOOK_SEND_INITIATED";
      }
    }
    return "?";
  }
  switch(a1)
  {
    case 'e':
      Class result = "BT_SERVICE_HANDSFREE_AUDIO_CONNECTED";
      break;
    case 'f':
      Class result = "BT_SERVICE_HANDSFREE_AUDIO_DISCONNECTED";
      break;
    case 'g':
      Class result = "BT_SERVICE_HANDSFREE_START_VOICE_COMMAND";
      break;
    case 'h':
      Class result = "BT_SERVICE_HANDSFREE_END_VOICE_COMMAND";
      break;
    default:
      if (a1 != 201) {
        return "?";
      }
      Class result = "BT_SERVICE_A2DP_AUDIO_CONNECTED";
      break;
  }
  return result;
}

uint64_t initBTDeviceGetConnectedServices(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce, &__block_literal_global_1848);
  }
  int v4 = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib, "BTDeviceGetConnectedServices");
  softLinkBTDeviceGetConnectedServices[0] = v4;
  return ((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2);
}

uint64_t initBTDeviceGetAddressString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MobileBluetoothLibrary_sOnce != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce, &__block_literal_global_1848);
  }
  id v6 = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib, "BTDeviceGetAddressString");
  softLinkBTDeviceGetAddressString[0] = v6;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(a1, a2, a3);
}

uint64_t initBTDeviceFromAddress(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MobileBluetoothLibrary_sOnce != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce, &__block_literal_global_1848);
  }
  id v6 = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib, "BTDeviceFromAddress");
  softLinkBTDeviceFromAddress[0] = v6;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(a1, a2, a3);
}

uint64_t initBTDeviceFromIdentifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MobileBluetoothLibrary_sOnce != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce, &__block_literal_global_1848);
  }
  id v6 = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib, "BTDeviceFromIdentifier");
  softLinkBTDeviceFromIdentifier[0] = v6;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(a1, a2, a3);
}

uint64_t initBTDeviceConnectServices(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce, &__block_literal_global_1848);
  }
  int v4 = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib, "BTDeviceConnectServices");
  softLinkBTDeviceConnectServices[0] = v4;
  return ((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2);
}

uint64_t initBTDeviceConnectServicesWithParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (MobileBluetoothLibrary_sOnce != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce, &__block_literal_global_1848);
  }
  id v8 = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib, "BTDeviceConnectServicesWithParameters");
  softLinkBTDeviceConnectServicesWithParameters[0] = v8;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v8)(a1, a2, a3, a4);
}

uint64_t initBTServiceAddCallbacks(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MobileBluetoothLibrary_sOnce != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce, &__block_literal_global_1848);
  }
  id v6 = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib, "BTServiceAddCallbacks");
  softLinkBTServiceAddCallbacks[0] = v6;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(a1, a2, a3);
}

uint64_t initBTSessionAttachWithQueue(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = MobileBluetoothLibrary_sOnce;
  id v8 = a4;
  if (v7 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce, &__block_literal_global_1848);
  }
  softLinkBTSessionAttachWithQueue[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib, "BTSessionAttachWithQueue");
  uint64_t v9 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, id))softLinkBTSessionAttachWithQueue[0])(a1, a2, a3, v8);

  return v9;
}

void _btSessionEventCallback(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v8 = (void *)MEMORY[0x192FAA9B0]();
  id v9 = a4;
  dispatch_assert_queue_V2(*((dispatch_queue_t *)v9 + 23));
  if (a3) {
    uint64_t v17 = (a3 + 310000);
  }
  else {
    uint64_t v17 = 0;
  }
  if (a2 == 2)
  {
    *((void *)v9 + 7) = 0;
    *((unsigned char *)v9 + 64) = 0;
    [v9 _btEnsureStopped];
    CFRelease(v9);
    unint64_t v19 = (void *)*MEMORY[0x1E4F28760];
    int v27 = NSPrintF((uint64_t)"%#m", v20, v21, v22, v23, v24, v25, v26, v17);
    NSErrorF_safe(v19, 4294960560, (uint64_t)"BTSession crashed: %@", v28, v29, v30, v31, v32, (uint64_t)v27);
    goto LABEL_19;
  }
  if (a2 == 1)
  {
    *((void *)v9 + 7) = 0;
    *((unsigned char *)v9 + 64) = 0;
    [v9 _btEnsureStopped];
    CFRelease(v9);
    if (*((unsigned char *)v9 + 68))
    {
      int v40 = (int *)*((void *)v9 + 19);
      if (*v40 <= 30)
      {
        if (*v40 == -1)
        {
          if (!_LogCategory_Initialize((uint64_t)v40, 0x1Eu)) {
            goto LABEL_27;
          }
          int v40 = (int *)*((void *)v9 + 19);
        }
        LogPrintF((uint64_t)v40, (uint64_t)"void _btSessionEventCallback(BTSession _Nonnull, BTSessionEvent, BTResult, void * _Nonnull)", 0x1Eu, (uint64_t)"BTSession detached: %#m\n", v36, v37, v38, v39, v17);
      }
LABEL_27:
      [v9 _invalidated];
      goto LABEL_28;
    }
    uint64_t v46 = (void *)*MEMORY[0x1E4F28760];
    int v27 = NSPrintF((uint64_t)"%#m", v33, v34, v35, v36, v37, v38, v39, v17);
    NSErrorF_safe(v46, 4294960560, (uint64_t)"BTSession detached: %@", v47, v48, v49, v50, v51, (uint64_t)v27);
    uint64_t v52 = LABEL_19:;
    [v9 _reportError:v52];

    goto LABEL_28;
  }
  if (a2)
  {
    uint64_t v41 = (int *)*((void *)v9 + 19);
    if (*v41 > 40) {
      goto LABEL_28;
    }
    if (*v41 == -1)
    {
      if (!_LogCategory_Initialize(*((void *)v9 + 19), 0x28u)) {
        goto LABEL_28;
      }
      uint64_t v41 = (int *)*((void *)v9 + 19);
    }
    uint64_t v53 = NSPrintF((uint64_t)"%#m", v10, v11, v12, v13, v14, v15, v16, v17);
    LogPrintF((uint64_t)v41, (uint64_t)"void _btSessionEventCallback(BTSession _Nonnull, BTSessionEvent, BTResult, void * _Nonnull)", 0x28u, (uint64_t)"BTSession unknown event %d, result %@", v42, v43, v44, v45, a2);

    goto LABEL_28;
  }
  uint64_t v18 = (int *)*((void *)v9 + 19);
  if (*v18 > 30) {
    goto LABEL_21;
  }
  if (*v18 == -1)
  {
    if (!_LogCategory_Initialize((uint64_t)v18, 0x1Eu)) {
      goto LABEL_21;
    }
    uint64_t v18 = (int *)*((void *)v9 + 19);
  }
  LogPrintF((uint64_t)v18, (uint64_t)"void _btSessionEventCallback(BTSession _Nonnull, BTSessionEvent, BTResult, void * _Nonnull)", 0x1Eu, (uint64_t)"BTSession attached: %#m\n", v13, v14, v15, v16, v17);
LABEL_21:
  *((void *)v9 + 7) = a1;
  *((unsigned char *)v9 + 64) = 0;
  if (!*((unsigned char *)v9 + 66)) {
    [v9 _btEnsureStopped];
  }
  [v9 _run];
LABEL_28:
}

uint64_t initBTDeviceIsWirelessSplitterSupported(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce_2045 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_2045, &__block_literal_global_636);
  }
  int v4 = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_2046, "BTDeviceIsWirelessSplitterSupported");
  softLinkBTDeviceIsWirelessSplitterSupported = v4;
  return ((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2);
}

void *__MobileBluetoothLibrary_block_invoke_2049()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/MobileBluetooth.framework/MobileBluetooth", 2);
  MobileBluetoothLibrary_sLib_2046 = (uint64_t)result;
  return result;
}

uint64_t initBTDeviceIsTemporaryPaired(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce_2045 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_2045, &__block_literal_global_636);
  }
  int v4 = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_2046, "BTDeviceIsTemporaryPaired");
  softLinkBTDeviceIsTemporaryPaired = v4;
  return ((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2);
}

uint64_t initBTDeviceGetSupportedServices(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce_2045 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_2045, &__block_literal_global_636);
  }
  int v4 = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_2046, "BTDeviceGetSupportedServices");
  softLinkBTDeviceGetSupportedServices = v4;
  return ((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2);
}

uint64_t initBTDeviceGetDeviceId(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (MobileBluetoothLibrary_sOnce_2045 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_2045, &__block_literal_global_636);
  }
  uint64_t v10 = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_2046, "BTDeviceGetDeviceId");
  softLinkBTDeviceGetDeviceId = v10;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v10)(a1, a2, a3, a4, a5);
}

uint64_t initBTAccessoryManagerGetInEarStatus(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (MobileBluetoothLibrary_sOnce_2045 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_2045, &__block_literal_global_636);
  }
  id v8 = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_2046, "BTAccessoryManagerGetInEarStatus");
  softLinkBTAccessoryManagerGetInEarStatus[0] = v8;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v8)(a1, a2, a3, a4);
}

uint64_t initBTAccessoryManagerGetInEarDetectionEnable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MobileBluetoothLibrary_sOnce_2045 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_2045, &__block_literal_global_636);
  }
  id v6 = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_2046, "BTAccessoryManagerGetInEarDetectionEnable");
  softLinkBTAccessoryManagerGetInEarDetectionEnable = v6;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(a1, a2, a3);
}

uint64_t initBTDeviceGetName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MobileBluetoothLibrary_sOnce_2045 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_2045, &__block_literal_global_636);
  }
  id v6 = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_2046, "BTDeviceGetName");
  softLinkBTDeviceGetName = v6;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(a1, a2, a3);
}

uint64_t initBTDeviceGetMagicPairingStatus(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce_2045 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_2045, &__block_literal_global_636);
  }
  int v4 = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_2046, "BTDeviceGetMagicPairingStatus");
  softLinkBTDeviceGetMagicPairingStatus = v4;
  return ((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2);
}

uint64_t initBTAccessoryManagerGetFeatureCapability(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (MobileBluetoothLibrary_sOnce_2045 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_2045, &__block_literal_global_636);
  }
  id v8 = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_2046, "BTAccessoryManagerGetFeatureCapability");
  softLinkBTAccessoryManagerGetFeatureCapability[0] = v8;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v8)(a1, a2, a3, a4);
}

uint64_t initBTDeviceGetDeviceType(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce_2045 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_2045, &__block_literal_global_636);
  }
  int v4 = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_2046, "BTDeviceGetDeviceType");
  softLinkBTDeviceGetDeviceType = v4;
  return ((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2);
}

uint64_t initBTAccessoryManagerGetDeviceColor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MobileBluetoothLibrary_sOnce_2045 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_2045, &__block_literal_global_636);
  }
  id v6 = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_2046, "BTAccessoryManagerGetDeviceColor");
  softLinkBTAccessoryManagerGetDeviceColor[0] = v6;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(a1, a2, a3);
}

uint64_t initBTDeviceGetConnectedServices_2051(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce_2045 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_2045, &__block_literal_global_636);
  }
  int v4 = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_2046, "BTDeviceGetConnectedServices");
  softLinkBTDeviceGetConnectedServices_2035[0] = v4;
  return ((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2);
}

uint64_t initBTAccessoryManagerGetAccessoryInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (MobileBluetoothLibrary_sOnce_2045 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_2045, &__block_literal_global_636);
  }
  uint64_t v10 = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_2046, "BTAccessoryManagerGetAccessoryInfo");
  softLinkBTAccessoryManagerGetAccessoryInfo[0] = v10;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v10)(a1, a2, a3, a4, a5);
}

uint64_t initBTAccessoryManagerReadDeviceVersionInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (MobileBluetoothLibrary_sOnce_2045 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_2045, &__block_literal_global_636);
  }
  uint64_t v18 = (uint64_t (*)(int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))dlsym((void *)MobileBluetoothLibrary_sLib_2046, "BTAccessoryManagerReadDeviceVersionInfo");
  softLinkBTAccessoryManagerReadDeviceVersionInfo = v18;
  return v18(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

uint64_t initBTAccessoryManagerGetDefault(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce_2045 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_2045, &__block_literal_global_636);
  }
  int v4 = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_2046, "BTAccessoryManagerGetDefault");
  softLinkBTAccessoryManagerGetDefault = v4;
  return ((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2);
}

uint64_t initBTDeviceAddressFromString(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce_2045 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_2045, &__block_literal_global_636);
  }
  int v4 = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_2046, "BTDeviceAddressFromString");
  softLinkBTDeviceAddressFromString = v4;
  return ((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2);
}

uint64_t initBTDeviceGetAddressString_2092(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MobileBluetoothLibrary_sOnce_2045 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_2045, &__block_literal_global_636);
  }
  id v6 = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_2046, "BTDeviceGetAddressString");
  softLinkBTDeviceGetAddressString_2062[0] = v6;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(a1, a2, a3);
}

uint64_t initBTLocalDeviceGetPairedDevices(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (MobileBluetoothLibrary_sOnce_2045 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_2045, &__block_literal_global_636);
  }
  id v8 = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_2046, "BTLocalDeviceGetPairedDevices");
  softLinkBTLocalDeviceGetPairedDevices = v8;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v8)(a1, a2, a3, a4);
}

const char *BTServiceSpecificEventToString_2094(int a1)
{
  if (a1 > 500)
  {
    if (a1 <= 600)
    {
      switch(a1)
      {
        case 501:
          Class result = "BT_SERVICE_REMOTE_PLAY";
          break;
        case 502:
          Class result = "BT_SERVICE_REMOTE_PAUSE";
          break;
        case 503:
          Class result = "BT_SERVICE_REMOTE_STOP";
          break;
        case 504:
          Class result = "BT_SERVICE_REMOTE_PREVIOUS";
          break;
        case 505:
          Class result = "BT_SERVICE_REMOTE_NEXT";
          break;
        case 506:
          Class result = "BT_SERVICE_REMOTE_VOL_UP";
          break;
        case 507:
          Class result = "BT_SERVICE_REMOTE_VOL_DOWN";
          break;
        case 508:
          Class result = "BT_SERVICE_REMOTE_MUTE";
          break;
        case 509:
          Class result = "BT_SERVICE_REMOTE_FASTFORWARD_START";
          break;
        case 510:
          Class result = "BT_SERVICE_REMOTE_FASTFORWARD_STOP";
          break;
        case 511:
          Class result = "BT_SERVICE_REMOTE_REWIND_START";
          break;
        case 512:
          Class result = "BT_SERVICE_REMOTE_REWIND_STOP";
          break;
        default:
          return "?";
      }
      return result;
    }
    if (a1 <= 702)
    {
      switch(a1)
      {
        case 601:
          return "BT_SERVICE_SENSOR_RSSI";
        case 701:
          return "BT_SERVICE_LMP_NAME_CHANGED";
        case 702:
          return "BT_SERVICE_HIGH_POWER_ENABLED";
      }
    }
    else if (a1 > 801)
    {
      if (a1 == 802) {
        return "BT_SERVICE_LEA_AUDIO_DISCONNECTED";
      }
      if (a1 == 901) {
        return "BT_UI_INITIATED_CONNECTION_REQUEST";
      }
    }
    else
    {
      if (a1 == 703) {
        return "BT_SERVICE_HIGH_POWER_DISABLED";
      }
      if (a1 == 801) {
        return "BT_SERVICE_LEA_AUDIO_CONNECTED";
      }
    }
    return "?";
  }
  if (a1 <= 100)
  {
    if (a1 <= 1)
    {
      if (!a1) {
        return "BT_SERVICE_SDP";
      }
      if (a1 == 1) {
        return "BT_SERVICE_CONNECTION_ATTEMPT";
      }
    }
    else
    {
      switch(a1)
      {
        case 2:
          return "BT_SERVICE_DISCONNECTION_ATTEMPT";
        case 11:
          return "BT_SERVICE_CONNECTION_RESULT";
        case 12:
          return "BT_SERVICE_DISCONNECTION_RESULT";
      }
    }
    return "?";
  }
  if (a1 > 201)
  {
    if (a1 > 301)
    {
      if (a1 == 302) {
        return "BT_SERVICE_PHONE_BOOK_SEND_COMPLETE";
      }
      if (a1 == 303) {
        return "BT_SERVICE_PHONE_BOOK_SYNC_SUPPORTED";
      }
    }
    else
    {
      if (a1 == 202) {
        return "BT_SERVICE_A2DP_AUDIO_DISCONNECTED";
      }
      if (a1 == 301) {
        return "BT_SERVICE_PHONE_BOOK_SEND_INITIATED";
      }
    }
    return "?";
  }
  switch(a1)
  {
    case 'e':
      Class result = "BT_SERVICE_HANDSFREE_AUDIO_CONNECTED";
      break;
    case 'f':
      Class result = "BT_SERVICE_HANDSFREE_AUDIO_DISCONNECTED";
      break;
    case 'g':
      Class result = "BT_SERVICE_HANDSFREE_START_VOICE_COMMAND";
      break;
    case 'h':
      Class result = "BT_SERVICE_HANDSFREE_END_VOICE_COMMAND";
      break;
    default:
      if (a1 != 201) {
        return "?";
      }
      Class result = "BT_SERVICE_A2DP_AUDIO_CONNECTED";
      break;
  }
  return result;
}

uint64_t initBTLocalDeviceGetConnectedDevices(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (MobileBluetoothLibrary_sOnce_2045 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_2045, &__block_literal_global_636);
  }
  id v8 = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_2046, "BTLocalDeviceGetConnectedDevices");
  softLinkBTLocalDeviceGetConnectedDevices = v8;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v8)(a1, a2, a3, a4);
}

uint64_t initBTDeviceFromAddress_2116(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MobileBluetoothLibrary_sOnce_2045 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_2045, &__block_literal_global_636);
  }
  id v6 = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_2046, "BTDeviceFromAddress");
  softLinkBTDeviceFromAddress_2113[0] = v6;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(a1, a2, a3);
}

uint64_t initBTDeviceFromIdentifier_2118(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MobileBluetoothLibrary_sOnce_2045 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_2045, &__block_literal_global_636);
  }
  id v6 = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_2046, "BTDeviceFromIdentifier");
  softLinkBTDeviceFromIdentifier_2110[0] = v6;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(a1, a2, a3);
}

uint64_t initBTSessionDetachWithQueue_2145(uint64_t a1)
{
  if (MobileBluetoothLibrary_sOnce_2045 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_2045, &__block_literal_global_636);
  }
  uint64_t v2 = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_2046, "BTSessionDetachWithQueue");
  softLinkBTSessionDetachWithQueue_2142[0] = v2;
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

uint64_t initBTServiceRemoveCallbacks_2147(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce_2045 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_2045, &__block_literal_global_636);
  }
  int v4 = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_2046, "BTServiceRemoveCallbacks");
  softLinkBTServiceRemoveCallbacks_2140[0] = v4;
  return ((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2);
}

void _btServiceEventHandler_2148(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, void *a6)
{
  uint64_t v12 = (void *)MEMORY[0x192FAA9B0]();
  uint64_t v13 = a6;
  uint64_t v18 = v13;
  if (*((unsigned char *)v13 + 216)) {
    goto LABEL_2;
  }
  if (a3 == 3)
  {
    uint64_t v24 = v13[28];
    if (*v24 <= 10)
    {
      if (*v24 == -1)
      {
        if (!_LogCategory_Initialize((uint64_t)v13[28], 0xAu)) {
          goto LABEL_23;
        }
        uint64_t v24 = v18[28];
      }
      BTServiceSpecificEventToString_2094(a4);
      LogPrintF((uint64_t)v24, (uint64_t)"void _btServiceEventHandler(BTDevice _Nonnull, BTServiceID, BTServiceEventType, BTServiceSpecificEvent, BTResult, void * _Nonnull)", 0xAu, (uint64_t)"BTService independent event: %#{flags}, %d %s, %#m\n", v25, v26, v27, v28, a2);
    }
LABEL_23:
    [v18 _handleDeviceEvent:a4 device:a1];
    goto LABEL_2;
  }
  if (a3 == 1)
  {
    uint64_t v29 = v13[28];
    if (*v29 <= 10)
    {
      if (*v29 == -1)
      {
        if (!_LogCategory_Initialize((uint64_t)v13[28], 0xAu)) {
          goto LABEL_25;
        }
        uint64_t v29 = v18[28];
      }
      BTServiceSpecificEventToString_2094(a4);
      LogPrintF((uint64_t)v29, (uint64_t)"void _btServiceEventHandler(BTDevice _Nonnull, BTServiceID, BTServiceEventType, BTServiceSpecificEvent, BTResult, void * _Nonnull)", 0xAu, (uint64_t)"BTService disconnect: %#{flags}, %d %s, %#m\n", v30, v31, v32, v33, a2);
    }
LABEL_25:
    if (a5) {
      uint64_t v35 = (a5 + 310000);
    }
    else {
      uint64_t v35 = 0;
    }
    [v18 _handleDeviceDisconnected:a1 reason:v35];
    goto LABEL_2;
  }
  if (a3) {
    goto LABEL_2;
  }
  unint64_t v19 = v13[28];
  if (*v19 <= 10)
  {
    if (*v19 != -1)
    {
LABEL_8:
      BTServiceSpecificEventToString_2094(a4);
      LogPrintF((uint64_t)v19, (uint64_t)"void _btServiceEventHandler(BTDevice _Nonnull, BTServiceID, BTServiceEventType, BTServiceSpecificEvent, BTResult, void * _Nonnull)", 0xAu, (uint64_t)"BTService connect: %#{flags}, %d %s, %#m\n", v20, v21, v22, v23, a2);
      goto LABEL_16;
    }
    if (_LogCategory_Initialize((uint64_t)v13[28], 0xAu))
    {
      unint64_t v19 = v18[28];
      goto LABEL_8;
    }
  }
LABEL_16:
  if (a4 != 11) {
    goto LABEL_2;
  }
  if (!a5)
  {
    if (!*((_DWORD *)v18 + 60)) {
      goto LABEL_39;
    }
    int v46 = 0;
    int v36 = ((uint64_t (*)(uint64_t, uint64_t))softLinkBTDeviceGetConnectedServices_2035[0])(a1, (uint64_t)&v46);
    if (v36)
    {
      uint64_t v41 = (v36 + 310000);
      if (v36 != -310000)
      {
        uint64_t v42 = v18[28];
        if (*v42 <= 90)
        {
          if (*v42 != -1)
          {
LABEL_34:
            LogPrintF((uint64_t)v42, (uint64_t)"void _btServiceEventHandler(BTDevice _Nonnull, BTServiceID, BTServiceEventType, BTServiceSpecificEvent, BTResult, void * _Nonnull)", 0x5Au, (uint64_t)"### BTDeviceGetConnectedServices failed: %#m\n", v37, v38, v39, v40, v41);
            goto LABEL_38;
          }
          if (_LogCategory_Initialize((uint64_t)v42, 0x5Au))
          {
            uint64_t v42 = v18[28];
            goto LABEL_34;
          }
        }
      }
    }
LABEL_38:
    int v43 = v46;
    int v44 = *((_DWORD *)v18 + 60);
    if ((v44 & ~v46) != 0)
    {
      uint64_t v45 = v18[28];
      if (*v45 <= 30)
      {
        if (*v45 == -1)
        {
          if (!_LogCategory_Initialize((uint64_t)v45, 0x1Eu)) {
            goto LABEL_2;
          }
          uint64_t v45 = v18[28];
          int v44 = *((_DWORD *)v18 + 60);
          int v43 = v46;
        }
        LogPrintF((uint64_t)v45, (uint64_t)"void _btServiceEventHandler(BTDevice _Nonnull, BTServiceID, BTServiceEventType, BTServiceSpecificEvent, BTResult, void * _Nonnull)", 0x1Eu, (uint64_t)"BTService connect waiting for more services: %#{flags}\n", v37, v38, v39, v40, v44 & ~v43);
      }
      goto LABEL_2;
    }
LABEL_39:
    [v18 _handleDeviceConnected:a1];
    goto LABEL_2;
  }
  uint64_t v34 = v18[28];
  if (*v34 <= 60)
  {
    if (*v34 == -1)
    {
      if (!_LogCategory_Initialize((uint64_t)v34, 0x3Cu)) {
        goto LABEL_2;
      }
      uint64_t v34 = v18[28];
    }
    LogPrintF((uint64_t)v34, (uint64_t)"void _btServiceEventHandler(BTDevice _Nonnull, BTServiceID, BTServiceEventType, BTServiceSpecificEvent, BTResult, void * _Nonnull)", 0x3Cu, (uint64_t)"### BTService connect failed: %#m\n", v14, v15, v16, v17, (a5 + 310000));
  }
LABEL_2:
}

uint64_t initBTPairingAgentDestroy(uint64_t a1)
{
  if (MobileBluetoothLibrary_sOnce_2045 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_2045, &__block_literal_global_636);
  }
  uint64_t v2 = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_2046, "BTPairingAgentDestroy");
  softLinkBTPairingAgentDestroy[0] = v2;
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

uint64_t initBTPairingAgentStop(uint64_t a1)
{
  if (MobileBluetoothLibrary_sOnce_2045 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_2045, &__block_literal_global_636);
  }
  uint64_t v2 = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_2046, "BTPairingAgentStop");
  softLinkBTPairingAgentStop[0] = v2;
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

uint64_t initBTLocalDeviceRemoveCallbacks(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce_2045 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_2045, &__block_literal_global_636);
  }
  int v4 = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_2046, "BTLocalDeviceRemoveCallbacks");
  softLinkBTLocalDeviceRemoveCallbacks[0] = v4;
  return ((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2);
}

uint64_t initBTAccessoryManagerRemoveCallbacks(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce_2045 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_2045, &__block_literal_global_636);
  }
  int v4 = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_2046, "BTAccessoryManagerRemoveCallbacks");
  softLinkBTAccessoryManagerRemoveCallbacks[0] = v4;
  return ((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2);
}

uint64_t initBTAccessoryManagerAddCallbacks(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MobileBluetoothLibrary_sOnce_2045 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_2045, &__block_literal_global_636);
  }
  id v6 = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_2046, "BTAccessoryManagerAddCallbacks");
  softLinkBTAccessoryManagerAddCallbacks = v6;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(a1, a2, a3);
}

void _btAccessoryEventCallback(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9 = (void *)MEMORY[0x192FAA9B0]();
  id v10 = a5;
  uint64_t v11 = v10;
  switch(a2)
  {
    case 4:
      [v10 _btAccessoryNameChanged:a3];
      break;
    case 6:
    case 12:
      [v10 _btAccessoryPlacementChanged:a1 device:a3];
      break;
    case 9:
      uint64_t v12 = 1;
      goto LABEL_7;
    case 10:
      uint64_t v12 = 2;
      goto LABEL_7;
    case 11:
      uint64_t v12 = 3;
LABEL_7:
      [v10 _btAccessoryStreamStateChanged:v12 device:a3];
      break;
    default:
      break;
  }
}

uint64_t initBTPairingAgentStart(uint64_t a1)
{
  if (MobileBluetoothLibrary_sOnce_2045 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_2045, &__block_literal_global_636);
  }
  uint64_t v2 = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_2046, "BTPairingAgentStart");
  softLinkBTPairingAgentStart[0] = v2;
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

uint64_t initBTPairingAgentCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (MobileBluetoothLibrary_sOnce_2045 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_2045, &__block_literal_global_636);
  }
  id v8 = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_2046, "BTPairingAgentCreate");
  softLinkBTPairingAgentCreate[0] = v8;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v8)(a1, a2, a3, a4);
}

void _btPairingAgentStatusCallback(uint64_t a1, uint64_t a2, uint64_t a3, int a4, void *a5)
{
  id v8 = (void *)MEMORY[0x192FAA9B0]();
  id v9 = a5;
  uint64_t v14 = v9;
  switch((int)a2)
  {
    case 0:
      uint64_t v15 = v9[28];
      if (*v15 > 30) {
        goto LABEL_19;
      }
      if (*v15 != -1) {
        goto LABEL_4;
      }
      if (_LogCategory_Initialize((uint64_t)v15, 0x1Eu))
      {
        uint64_t v15 = v14[28];
LABEL_4:
        LogPrintF((uint64_t)v15, (uint64_t)"void _btPairingAgentStatusCallback(BTPairingAgent _Nonnull, BTPairingEvent, BTDevice _Nonnull, BTResult, void * _Nonnull)", 0x1Eu, (uint64_t)"BTPairingAgent started: %#m\n", v10, v11, v12, v13, (a4 + 310000));
      }
LABEL_19:
      if (*((unsigned char *)v14 + 107))
      {
        *((unsigned char *)v14 + 177) = 1;
        [v14 _btEnsureStarted];
      }
      break;
    case 1:
      uint64_t v17 = v9[28];
      if (*v17 > 30) {
        break;
      }
      if (*v17 != -1) {
        goto LABEL_10;
      }
      if (_LogCategory_Initialize((uint64_t)v17, 0x1Eu))
      {
        uint64_t v17 = v14[28];
LABEL_10:
        LogPrintF((uint64_t)v17, (uint64_t)"void _btPairingAgentStatusCallback(BTPairingAgent _Nonnull, BTPairingEvent, BTDevice _Nonnull, BTResult, void * _Nonnull)", 0x1Eu, (uint64_t)"BTPairingAgent stopped: %#m\n", v10, v11, v12, v13, (a4 + 310000));
        break;
      }
      break;
    case 2:
      uint64_t v18 = v9[28];
      if (*v18 > 30) {
        break;
      }
      if (*v18 != -1) {
        goto LABEL_13;
      }
      if (_LogCategory_Initialize((uint64_t)v18, 0x1Eu))
      {
        uint64_t v18 = v14[28];
LABEL_13:
        LogPrintF((uint64_t)v18, (uint64_t)"void _btPairingAgentStatusCallback(BTPairingAgent _Nonnull, BTPairingEvent, BTDevice _Nonnull, BTResult, void * _Nonnull)", 0x1Eu, (uint64_t)"BTPairingAgent attempt started: %#m\n", v10, v11, v12, v13, (a4 + 310000));
      }
      break;
    case 3:
      unint64_t v19 = v9[28];
      if (*v19 > 30) {
        break;
      }
      if (*v19 != -1) {
        goto LABEL_16;
      }
      if (_LogCategory_Initialize((uint64_t)v19, 0x1Eu))
      {
        unint64_t v19 = v14[28];
LABEL_16:
        LogPrintF((uint64_t)v19, (uint64_t)"void _btPairingAgentStatusCallback(BTPairingAgent _Nonnull, BTPairingEvent, BTDevice _Nonnull, BTResult, void * _Nonnull)", 0x1Eu, (uint64_t)"BTPairingAgent attempt complete: %#m\n", v10, v11, v12, v13, (a4 + 310000));
      }
      break;
    default:
      uint64_t v16 = v9[28];
      if (*v16 > 30) {
        break;
      }
      if (*v16 != -1) {
        goto LABEL_7;
      }
      if (_LogCategory_Initialize((uint64_t)v16, 0x1Eu))
      {
        uint64_t v16 = v14[28];
LABEL_7:
        LogPrintF((uint64_t)v16, (uint64_t)"void _btPairingAgentStatusCallback(BTPairingAgent _Nonnull, BTPairingEvent, BTDevice _Nonnull, BTResult, void * _Nonnull)", 0x1Eu, (uint64_t)"BTPairingAgent unknown event: %d, %#m\n", v10, v11, v12, v13, a2);
        break;
      }
      break;
  }
}

uint64_t initBTLocalDeviceAddCallbacks(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MobileBluetoothLibrary_sOnce_2045 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_2045, &__block_literal_global_636);
  }
  id v6 = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_2046, "BTLocalDeviceAddCallbacks");
  softLinkBTLocalDeviceAddCallbacks = v6;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(a1, a2, a3);
}

void _btLocalDeviceStatusCallback(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  id v6 = (void *)MEMORY[0x192FAA9B0]();
  uint64_t v7 = a4;
  uint64_t v12 = v7;
  if (a2 == 11)
  {
    uint64_t v13 = (int *)v7[28];
    if (*v13 <= 30)
    {
      if (*v13 == -1)
      {
        if (!_LogCategory_Initialize((uint64_t)v13, 0x1Eu)) {
          goto LABEL_13;
        }
        uint64_t v13 = (int *)v12[28];
      }
      uint64_t v14 = "Bluetooth first unlock completed";
LABEL_9:
      LogPrintF((uint64_t)v13, (uint64_t)"void _btLocalDeviceStatusCallback(BTLocalDevice _Nonnull, BTLocalDeviceEvent, BTResult, void * _Nonnull)", 0x1Eu, (uint64_t)v14, v8, v9, v10, v11, v15);
    }
  }
  else
  {
    if (a2 != 4) {
      goto LABEL_14;
    }
    uint64_t v13 = (int *)v7[28];
    if (*v13 <= 30)
    {
      if (*v13 == -1)
      {
        if (!_LogCategory_Initialize((uint64_t)v13, 0x1Eu)) {
          goto LABEL_13;
        }
        uint64_t v13 = (int *)v12[28];
      }
      uint64_t v14 = "Pairing status changed\n";
      goto LABEL_9;
    }
  }
LABEL_13:
  [v12 _handlePairingStatusChanged];
LABEL_14:
}

uint64_t initBTLocalDeviceGetAddressString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MobileBluetoothLibrary_sOnce_2045 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_2045, &__block_literal_global_636);
  }
  id v6 = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_2046, "BTLocalDeviceGetAddressString");
  softLinkBTLocalDeviceGetAddressString[0] = v6;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(a1, a2, a3);
}

uint64_t initBTLocalDeviceGetDefault(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce_2045 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_2045, &__block_literal_global_636);
  }
  int v4 = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_2046, "BTLocalDeviceGetDefault");
  softLinkBTLocalDeviceGetDefault = v4;
  return ((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2);
}

uint64_t initBTServiceAddCallbacks_2175(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MobileBluetoothLibrary_sOnce_2045 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_2045, &__block_literal_global_636);
  }
  id v6 = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_2046, "BTServiceAddCallbacks");
  softLinkBTServiceAddCallbacks_2160[0] = v6;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(a1, a2, a3);
}

uint64_t initBTSessionAttachWithQueue_2177(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = MobileBluetoothLibrary_sOnce_2045;
  id v8 = a4;
  if (v7 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_2045, &__block_literal_global_636);
  }
  softLinkBTSessionAttachWithQueue_2157[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_2046, "BTSessionAttachWithQueue");
  uint64_t v9 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, id))softLinkBTSessionAttachWithQueue_2157[0])(a1, a2, a3, v8);

  return v9;
}

void _btSessionEventCallback_2179(int *a1, uint64_t a2, int a3, void *a4)
{
  id v8 = (void *)MEMORY[0x192FAA9B0]();
  uint64_t v9 = a4;
  uint64_t v14 = v9;
  switch((int)a2)
  {
    case 0:
      uint64_t v15 = v9[28];
      if (*v15 > 30) {
        goto LABEL_19;
      }
      if (*v15 != -1) {
        goto LABEL_4;
      }
      if (_LogCategory_Initialize((uint64_t)v15, 0x1Eu))
      {
        uint64_t v15 = v14[28];
LABEL_4:
        LogPrintF((uint64_t)v15, (uint64_t)"void _btSessionEventCallback(BTSession _Nonnull, BTSessionEvent, BTResult, void * _Nonnull)", 0x1Eu, (uint64_t)"BTSession attached: %#m\n", v10, v11, v12, v13, (a3 + 310000));
      }
LABEL_19:
      v14[12] = a1;
      *((unsigned char *)v14 + 105) = 0;
      if (*((unsigned char *)v14 + 107)) {
        [v14 _btEnsureStarted];
      }
      else {
        [v14 _btEnsureStopped];
      }
      break;
    case 1:
      uint64_t v17 = v9[28];
      if (*v17 > 30) {
        goto LABEL_25;
      }
      if (*v17 != -1) {
        goto LABEL_10;
      }
      if (_LogCategory_Initialize((uint64_t)v17, 0x1Eu))
      {
        uint64_t v17 = v14[28];
LABEL_10:
        LogPrintF((uint64_t)v17, (uint64_t)"void _btSessionEventCallback(BTSession _Nonnull, BTSessionEvent, BTResult, void * _Nonnull)", 0x1Eu, (uint64_t)"BTSession detached: %#m\n", v10, v11, v12, v13, (a3 + 310000));
      }
LABEL_25:
      v14[12] = 0;
      *((unsigned char *)v14 + 105) = 0;
      [v14 _btEnsureStopped];
      goto LABEL_29;
    case 2:
      uint64_t v18 = v9[28];
      if (*v18 > 60) {
        goto LABEL_27;
      }
      if (*v18 != -1) {
        goto LABEL_13;
      }
      if (_LogCategory_Initialize((uint64_t)v18, 0x3Cu))
      {
        uint64_t v18 = v14[28];
LABEL_13:
        LogPrintF((uint64_t)v18, (uint64_t)"void _btSessionEventCallback(BTSession _Nonnull, BTSessionEvent, BTResult, void * _Nonnull)", 0x3Cu, (uint64_t)"### BTSession terminated (bluetoothd crash)...re-attaching\n", v10, v11, v12, v13, v21);
      }
LABEL_27:
      v14[12] = 0;
      *((unsigned char *)v14 + 105) = 0;
      int v20 = *((unsigned __int8 *)v14 + 107);
      [v14 _btEnsureStopped];
      if (v20) {
        [v14 _btEnsureStarted];
      }
LABEL_29:
      CFRelease(v14);
      break;
    case 3:
      unint64_t v19 = v9[28];
      if (*v19 > 60) {
        break;
      }
      if (*v19 != -1) {
        goto LABEL_16;
      }
      if (_LogCategory_Initialize((uint64_t)v19, 0x3Cu))
      {
        unint64_t v19 = v14[28];
LABEL_16:
        LogPrintF((uint64_t)v19, (uint64_t)"void _btSessionEventCallback(BTSession _Nonnull, BTSessionEvent, BTResult, void * _Nonnull)", 0x3Cu, (uint64_t)"### BTSession failed: %#m\n", v10, v11, v12, v13, (a3 + 310000));
      }
      break;
    default:
      uint64_t v16 = v9[28];
      if (*v16 > 40) {
        break;
      }
      if (*v16 != -1) {
        goto LABEL_7;
      }
      if (_LogCategory_Initialize((uint64_t)v16, 0x28u))
      {
        uint64_t v16 = v14[28];
LABEL_7:
        LogPrintF((uint64_t)v16, (uint64_t)"void _btSessionEventCallback(BTSession _Nonnull, BTSessionEvent, BTResult, void * _Nonnull)", 0x28u, (uint64_t)"BTSession unknown event %d, result %#m\n", v10, v11, v12, v13, a2);
      }
      break;
  }
}

Class initCBPeripheralManager_2182()
{
  if (CoreBluetoothLibrary_sOnce_2183 != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce_2183, &__block_literal_global_539);
  }
  Class result = objc_getClass("CBPeripheralManager");
  classCBPeripheralManager_2184 = (uint64_t)result;
  getCBPeripheralManagerClass_2154[0] = (uint64_t (*)())CBPeripheralManagerFunction_2186;
  return result;
}

id CBPeripheralManagerFunction_2186()
{
  return (id)classCBPeripheralManager_2184;
}

void *__CoreBluetoothLibrary_block_invoke_2188()
{
  Class result = dlopen("/System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth", 2);
  CoreBluetoothLibrary_sLib_2189 = (uint64_t)result;
  return result;
}

id initValCBPeripheralManagerOptionShowPowerAlertKey()
{
  if (CoreBluetoothLibrary_sOnce_2183 != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce_2183, &__block_literal_global_539);
  }
  id v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_2189, "CBPeripheralManagerOptionShowPowerAlertKey");
  if (v0) {
    objc_storeStrong((id *)&constantValCBPeripheralManagerOptionShowPowerAlertKey, *v0);
  }
  getCBPeripheralManagerOptionShowPowerAlertKey[0] = (uint64_t (*)())CBPeripheralManagerOptionShowPowerAlertKeyFunction;
  int v1 = (void *)constantValCBPeripheralManagerOptionShowPowerAlertKey;
  return v1;
}

id CBPeripheralManagerOptionShowPowerAlertKeyFunction()
{
  return (id)constantValCBPeripheralManagerOptionShowPowerAlertKey;
}

Class initCBCentralManager_2191()
{
  if (CoreBluetoothLibrary_sOnce_2183 != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce_2183, &__block_literal_global_539);
  }
  Class result = objc_getClass("CBCentralManager");
  classCBCentralManager_2192 = (uint64_t)result;
  getCBCentralManagerClass_2152[0] = (uint64_t (*)())CBCentralManagerFunction_2194;
  return result;
}

id CBCentralManagerFunction_2194()
{
  return (id)classCBCentralManager_2192;
}

id initValCBCentralManagerOptionShowPowerAlertKey()
{
  if (CoreBluetoothLibrary_sOnce_2183 != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce_2183, &__block_literal_global_539);
  }
  id v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_2189, "CBCentralManagerOptionShowPowerAlertKey");
  if (v0) {
    objc_storeStrong((id *)&constantValCBCentralManagerOptionShowPowerAlertKey, *v0);
  }
  getCBCentralManagerOptionShowPowerAlertKey[0] = (uint64_t (*)())CBCentralManagerOptionShowPowerAlertKeyFunction;
  int v1 = (void *)constantValCBCentralManagerOptionShowPowerAlertKey;
  return v1;
}

id CBCentralManagerOptionShowPowerAlertKeyFunction()
{
  return (id)constantValCBCentralManagerOptionShowPowerAlertKey;
}

id initValCBScalablePipeOptionTransport()
{
  if (CoreBluetoothLibrary_sOnce_2436 != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce_2436, &__block_literal_global_2437);
  }
  id v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_2438, "CBScalablePipeOptionTransport");
  if (v0) {
    objc_storeStrong((id *)&constantValCBScalablePipeOptionTransport, *v0);
  }
  getCBScalablePipeOptionTransport[0] = (uint64_t (*)())CBScalablePipeOptionTransportFunction;
  int v1 = (void *)constantValCBScalablePipeOptionTransport;
  return v1;
}

id CBScalablePipeOptionTransportFunction()
{
  return (id)constantValCBScalablePipeOptionTransport;
}

void *__CoreBluetoothLibrary_block_invoke_2441()
{
  Class result = dlopen("/System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth", 2);
  CoreBluetoothLibrary_sLib_2438 = (uint64_t)result;
  return result;
}

Class initCBScalablePipeManager()
{
  if (CoreBluetoothLibrary_sOnce_2436 != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce_2436, &__block_literal_global_2437);
  }
  Class result = objc_getClass("CBScalablePipeManager");
  classCBScalablePipeManager = (uint64_t)result;
  getCBScalablePipeManagerClass[0] = (uint64_t (*)())CBScalablePipeManagerFunction;
  return result;
}

id CBScalablePipeManagerFunction()
{
  return (id)classCBScalablePipeManager;
}

void sub_18E34C5B8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 88), 8);
  _Unwind_Resume(a1);
}

void sub_18E34CD28(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18E34CDA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_18E34D010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_18E34DFE0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18E34E384(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18E34F00C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_18E34F140(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18E34F5C8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18E34F83C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18E34FBA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2815(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2816(uint64_t a1)
{
}

uint64_t CUBonjourDeviceReconfirm(void *a1)
{
  CFDictionaryRef v1 = [a1 deviceInfo];
  CFDictionaryRef v2 = v1;
  if (v1)
  {
    BonjourDevice_Reconfirm(v1);
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = 4294960554;
  }

  return v3;
}

void CUMetricsLog(void *a1, void *a2)
{
}

void CUMetricsLogEx(int *a1, void *a2, void *a3)
{
  id v10 = a2;
  id v9 = a3;
  if (*a1 <= 50 && (*a1 != -1 || _LogCategory_Initialize((uint64_t)a1, 0x32u))) {
    LogPrintF((uint64_t)a1, (uint64_t)"void CUMetricsLogEx(LogCategory * _Nonnull, NSString * _Nonnull __strong, NSDictionary<NSString *,NSObject *> * _Nonnull __strong)", 0x32u, (uint64_t)"MetricLog '%@' : %##@\n", v5, v6, v7, v8, (uint64_t)v10);
  }
  ((void (*)(void *, void *))softLinkAnalyticsSendEvent[0])(v10, v9);
}

void initAnalyticsSendEvent(void *a1, void *a2)
{
  uint64_t v3 = CoreAnalyticsLibrary_sOnce;
  id v4 = a2;
  id v5 = a1;
  if (v3 != -1) {
    dispatch_once(&CoreAnalyticsLibrary_sOnce, &__block_literal_global_2910);
  }
  softLinkAnalyticsSendEvent[0] = (uint64_t (*)())dlsym((void *)CoreAnalyticsLibrary_sLib, "AnalyticsSendEvent");
  ((void (*)(id, id))softLinkAnalyticsSendEvent[0])(v5, v4);
}

void *__CoreAnalyticsLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/CoreAnalytics.framework/CoreAnalytics", 2);
  CoreAnalyticsLibrary_sLib = (uint64_t)result;
  return result;
}

void sub_18E350474(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18E3504FC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18E351498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  (*(void (**)(uint64_t))(v9 + 16))(v9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3068(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3069(uint64_t a1)
{
}

Class initRPCompanionLinkDevice()
{
  if (RapportLibrary_sOnce != -1) {
    dispatch_once(&RapportLibrary_sOnce, &__block_literal_global_3082);
  }
  Class result = objc_getClass("RPCompanionLinkDevice");
  classRPCompanionLinkDevice = (uint64_t)result;
  getRPCompanionLinkDeviceClass[0] = (uint64_t (*)())RPCompanionLinkDeviceFunction;
  return result;
}

id RPCompanionLinkDeviceFunction()
{
  return (id)classRPCompanionLinkDevice;
}

void *__RapportLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/Rapport.framework/Rapport", 2);
  RapportLibrary_sLib = (uint64_t)result;
  return result;
}

Class initRPCompanionLinkClient()
{
  if (RapportLibrary_sOnce != -1) {
    dispatch_once(&RapportLibrary_sOnce, &__block_literal_global_3082);
  }
  Class result = objc_getClass("RPCompanionLinkClient");
  classRPCompanionLinkClient = (uint64_t)result;
  getRPCompanionLinkClientClass[0] = (uint64_t (*)())RPCompanionLinkClientFunction;
  return result;
}

id RPCompanionLinkClientFunction()
{
  return (id)classRPCompanionLinkClient;
}

id initValRPOptionTimeoutSeconds()
{
  if (RapportLibrary_sOnce != -1) {
    dispatch_once(&RapportLibrary_sOnce, &__block_literal_global_3082);
  }
  id v0 = (id *)dlsym((void *)RapportLibrary_sLib, "RPOptionTimeoutSeconds");
  if (v0) {
    objc_storeStrong((id *)&constantValRPOptionTimeoutSeconds, *v0);
  }
  getRPOptionTimeoutSeconds[0] = (uint64_t (*)())RPOptionTimeoutSecondsFunction;
  CFDictionaryRef v1 = (void *)constantValRPOptionTimeoutSeconds;
  return v1;
}

id RPOptionTimeoutSecondsFunction()
{
  return (id)constantValRPOptionTimeoutSeconds;
}

void sub_18E352D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18E3533E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  (*(void (**)(uint64_t))(v9 + 16))(v9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18E353B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  (*(void (**)(void))(a14 + 16))();
  _Block_object_dispose((const void *)(v14 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_18E3541C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  (*(void (**)(void))(a11 + 16))();
  _Block_object_dispose((const void *)(v11 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_18E35474C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18E354ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  (*(void (**)(uint64_t))(v9 + 16))(v9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18E3559D4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Block_object_dispose((const void *)(v2 - 128), 8);
  _Unwind_Resume(a1);
}

Class initHAPSystemKeychainStore()
{
  if (CoreHAPLibrary_sOnce != -1) {
    dispatch_once(&CoreHAPLibrary_sOnce, &__block_literal_global_765);
  }
  Class result = objc_getClass("HAPSystemKeychainStore");
  classHAPSystemKeychainStore = (uint64_t)result;
  getHAPSystemKeychainStoreClass[0] = (uint64_t (*)())HAPSystemKeychainStoreFunction;
  return result;
}

id HAPSystemKeychainStoreFunction()
{
  return (id)classHAPSystemKeychainStore;
}

void *__CoreHAPLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP", 2);
  CoreHAPLibrary_sLib = (uint64_t)result;
  return result;
}

Class initHMHomeManager()
{
  if (HomeKitLibrary_sOnce != -1) {
    dispatch_once(&HomeKitLibrary_sOnce, &__block_literal_global_749);
  }
  Class result = objc_getClass("HMHomeManager");
  classHMHomeManager = (uint64_t)result;
  getHMHomeManagerClass[0] = (uint64_t (*)())HMHomeManagerFunction;
  return result;
}

id HMHomeManagerFunction()
{
  return (id)classHMHomeManager;
}

void *__HomeKitLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/Frameworks/HomeKit.framework/HomeKit", 2);
  HomeKitLibrary_sLib = (uint64_t)result;
  return result;
}

Class initHMHomeManagerConfiguration()
{
  if (HomeKitLibrary_sOnce != -1) {
    dispatch_once(&HomeKitLibrary_sOnce, &__block_literal_global_749);
  }
  Class result = objc_getClass("HMHomeManagerConfiguration");
  classHMHomeManagerConfiguration = (uint64_t)result;
  getHMHomeManagerConfigurationClass[0] = (uint64_t (*)())HMHomeManagerConfigurationFunction;
  return result;
}

id HMHomeManagerConfigurationFunction()
{
  return (id)classHMHomeManagerConfiguration;
}

Class initHMClientConnection()
{
  if (HomeKitLibrary_sOnce != -1) {
    dispatch_once(&HomeKitLibrary_sOnce, &__block_literal_global_749);
  }
  Class result = objc_getClass("HMClientConnection");
  classHMClientDNSServiceErrorType Connection = (uint64_t)result;
  getHMClientConnectionClass[0] = (uint64_t (*)())HMClientConnectionFunction;
  return result;
}

id HMClientConnectionFunction()
{
  return (id)classHMClientConnection;
}

uint64_t initValHMHomeManagerPreferencesChangedNotification()
{
  if (HomeKitLibrary_sOnce != -1) {
    dispatch_once(&HomeKitLibrary_sOnce, &__block_literal_global_749);
  }
  id v0 = (uint64_t *)dlsym((void *)HomeKitLibrary_sLib, "HMHomeManagerPreferencesChangedNotification");
  if (v0)
  {
    uint64_t result = *v0;
    constantValHMHomeManagerPreferencesChangedNotification = result;
  }
  else
  {
    uint64_t result = constantValHMHomeManagerPreferencesChangedNotification;
  }
  getHMHomeManagerPreferencesChangedNotification[0] = HMHomeManagerPreferencesChangedNotificationFunction;
  return result;
}

uint64_t HMHomeManagerPreferencesChangedNotificationFunction()
{
  return constantValHMHomeManagerPreferencesChangedNotification;
}

Class initWiFiAwareInternetSharingConfiguration()
{
  if (WiFiPeerToPeerLibrary_sOnce != -1) {
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce, &__block_literal_global_4709);
  }
  Class result = objc_getClass("WiFiAwareInternetSharingConfiguration");
  classWiFiAwareInternetSharingConfiguration = (uint64_t)result;
  getWiFiAwareInternetSharingConfigurationClass[0] = (uint64_t (*)())WiFiAwareInternetSharingConfigurationFunction;
  return result;
}

id WiFiAwareInternetSharingConfigurationFunction()
{
  return (id)classWiFiAwareInternetSharingConfiguration;
}

void *__WiFiPeerToPeerLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/WiFiPeerToPeer.framework/WiFiPeerToPeer", 2);
  WiFiPeerToPeerLibrary_sLib = (uint64_t)result;
  return result;
}

Class initWiFiAwareDataSession()
{
  if (WiFiPeerToPeerLibrary_sOnce != -1) {
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce, &__block_literal_global_4709);
  }
  Class result = objc_getClass("WiFiAwareDataSession");
  classWiFiAwareDataSession = (uint64_t)result;
  getWiFiAwareDataSessionClass[0] = (uint64_t (*)())WiFiAwareDataSessionFunction;
  return result;
}

id WiFiAwareDataSessionFunction()
{
  return (id)classWiFiAwareDataSession;
}

void CUNANMockRemovePublisher(void *a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  os_unfair_lock_lock((os_unfair_lock_t)&gCUNANMockLock);
  id v5 = [(id)gCUNANMockPublishers objectForKeyedSubscript:v3];
  if ([v5 containsObject:v4])
  {
    [v5 removeObject:v4];
    if (![v5 count]) {
      [(id)gCUNANMockPublishers setObject:0 forKeyedSubscript:v3];
    }
    uint64_t v6 = [v4 mockEndpoint];
    if (v6)
    {
      long long v14 = 0u;
      long long v15 = 0u;
      long long v12 = 0u;
      long long v13 = 0u;
      uint64_t v7 = objc_msgSend((id)gCUNANMockSubscribers, "objectForKeyedSubscript:", v3, 0);
      uint64_t v8 = [v7 countByEnumeratingWithState:&v12 objects:v16 count:16];
      if (v8)
      {
        uint64_t v9 = v8;
        uint64_t v10 = *(void *)v13;
        do
        {
          uint64_t v11 = 0;
          do
          {
            if (*(void *)v13 != v10) {
              objc_enumerationMutation(v7);
            }
            [*(id *)(*((void *)&v12 + 1) + 8 * v11++) reportMockEndpointLost:v6];
          }
          while (v9 != v11);
          uint64_t v9 = [v7 countByEnumeratingWithState:&v12 objects:v16 count:16];
        }
        while (v9);
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&gCUNANMockLock);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)&gCUNANMockLock);
  }
}

void CUNANMockRemoveSubscriber(void *a1, void *a2)
{
  id v5 = a1;
  id v3 = a2;
  os_unfair_lock_lock((os_unfair_lock_t)&gCUNANMockLock);
  id v4 = [(id)gCUNANMockSubscribers objectForKeyedSubscript:v5];
  [v4 removeObject:v3];

  if (![v4 count]) {
    [(id)gCUNANMockSubscribers setObject:0 forKeyedSubscript:v5];
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&gCUNANMockLock);
}

id _WiFiAwareCreateEndpointIdentifier(void *a1)
{
  id v1 = a1;
  if ([v1 length] == 6)
  {
    uint64_t v2 = [v1 bytes];
    uint64_t v10 = NSPrintF((uint64_t)"%.6a-%u", v3, v4, v5, v6, v7, v8, v9, v2);
  }
  else
  {
    uint64_t v10 = 0;
  }

  return v10;
}

void sub_18E369EFC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18E36A1BC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

Class initWiFiAwarePublishServiceSpecificInfo()
{
  if (WiFiPeerToPeerLibrary_sOnce_4940 != -1) {
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce_4940, &__block_literal_global_253);
  }
  Class result = objc_getClass("WiFiAwarePublishServiceSpecificInfo");
  classWiFiAwarePublishServiceSpecificInfo = (uint64_t)result;
  getWiFiAwarePublishServiceSpecificInfoClass[0] = (uint64_t (*)())WiFiAwarePublishServiceSpecificInfoFunction;
  return result;
}

id WiFiAwarePublishServiceSpecificInfoFunction()
{
  return (id)classWiFiAwarePublishServiceSpecificInfo;
}

void *__WiFiPeerToPeerLibrary_block_invoke_4943()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/WiFiPeerToPeer.framework/WiFiPeerToPeer", 2);
  WiFiPeerToPeerLibrary_sLib_4945 = (uint64_t)result;
  return result;
}

void sub_18E36B390(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Block_object_dispose((const void *)(v2 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4947(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4948(uint64_t a1)
{
}

Class initWiFiAwarePublisher()
{
  if (WiFiPeerToPeerLibrary_sOnce_4940 != -1) {
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce_4940, &__block_literal_global_253);
  }
  Class result = objc_getClass("WiFiAwarePublisher");
  classWiFiAwarePublisher = (uint64_t)result;
  getWiFiAwarePublisherClass[0] = (uint64_t (*)())WiFiAwarePublisherFunction;
  return result;
}

id WiFiAwarePublisherFunction()
{
  return (id)classWiFiAwarePublisher;
}

Class initWiFiAwarePublishDatapathServiceSpecificInfo()
{
  if (WiFiPeerToPeerLibrary_sOnce_4940 != -1) {
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce_4940, &__block_literal_global_253);
  }
  Class result = objc_getClass("WiFiAwarePublishDatapathServiceSpecificInfo");
  classWiFiAwarePublishDatapathServiceSpecificInfo = (uint64_t)result;
  getWiFiAwarePublishDatapathServiceSpecificInfoClass[0] = (uint64_t (*)())WiFiAwarePublishDatapathServiceSpecificInfoFunction;
  return result;
}

id WiFiAwarePublishDatapathServiceSpecificInfoFunction()
{
  return (id)classWiFiAwarePublishDatapathServiceSpecificInfo;
}

Class initWiFiAwarePublishDatapathConfiguration()
{
  if (WiFiPeerToPeerLibrary_sOnce_4940 != -1) {
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce_4940, &__block_literal_global_253);
  }
  Class result = objc_getClass("WiFiAwarePublishDatapathConfiguration");
  classWiFiAwarePublishDatapathConfiguration = (uint64_t)result;
  getWiFiAwarePublishDatapathConfigurationClass[0] = (uint64_t (*)())WiFiAwarePublishDatapathConfigurationFunction;
  return result;
}

id WiFiAwarePublishDatapathConfigurationFunction()
{
  return (id)classWiFiAwarePublishDatapathConfiguration;
}

Class initWiFiAwareInternetSharingConfiguration_4981()
{
  if (WiFiPeerToPeerLibrary_sOnce_4940 != -1) {
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce_4940, &__block_literal_global_253);
  }
  Class result = objc_getClass("WiFiAwareInternetSharingConfiguration");
  classWiFiAwareInternetSharingConfiguration_4983 = (uint64_t)result;
  getWiFiAwareInternetSharingConfigurationClass_4971 = (uint64_t (*)())WiFiAwareInternetSharingConfigurationFunction_4985;
  return result;
}

id WiFiAwareInternetSharingConfigurationFunction_4985()
{
  return (id)classWiFiAwareInternetSharingConfiguration_4983;
}

Class initWiFiAwarePublishConfiguration()
{
  if (WiFiPeerToPeerLibrary_sOnce_4940 != -1) {
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce_4940, &__block_literal_global_253);
  }
  Class result = objc_getClass("WiFiAwarePublishConfiguration");
  classWiFiAwarePublishConfiguration = (uint64_t)result;
  getWiFiAwarePublishConfigurationClass[0] = (uint64_t (*)())WiFiAwarePublishConfigurationFunction;
  return result;
}

id WiFiAwarePublishConfigurationFunction()
{
  return (id)classWiFiAwarePublishConfiguration;
}

void sub_18E36CAC4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

Class initWiFiMACAddress()
{
  if (WiFiPeerToPeerLibrary_sOnce_5249 != -1) {
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce_5249, &__block_literal_global_5250);
  }
  Class result = objc_getClass("WiFiMACAddress");
  classWiFiMACAddress = (uint64_t)result;
  getWiFiMACAddressClass[0] = (uint64_t (*)())WiFiMACAddressFunction;
  return result;
}

id WiFiMACAddressFunction()
{
  return (id)classWiFiMACAddress;
}

void *__WiFiPeerToPeerLibrary_block_invoke_5254()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/WiFiPeerToPeer.framework/WiFiPeerToPeer", 2);
  WiFiPeerToPeerLibrary_sLib_5255 = (uint64_t)result;
  return result;
}

void sub_18E36EA3C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Block_object_dispose((const void *)(v2 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5275(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5276(uint64_t a1)
{
}

Class initWiFiAwareSubscriber()
{
  if (WiFiPeerToPeerLibrary_sOnce_5249 != -1) {
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce_5249, &__block_literal_global_5250);
  }
  Class result = objc_getClass("WiFiAwareSubscriber");
  classWiFiAwareSubscriber = (uint64_t)result;
  getWiFiAwareSubscriberClass[0] = (uint64_t (*)())WiFiAwareSubscriberFunction;
  return result;
}

id WiFiAwareSubscriberFunction()
{
  return (id)classWiFiAwareSubscriber;
}

Class initWiFiAwareSubscribeConfiguration()
{
  if (WiFiPeerToPeerLibrary_sOnce_5249 != -1) {
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce_5249, &__block_literal_global_5250);
  }
  Class result = objc_getClass("WiFiAwareSubscribeConfiguration");
  classWiFiAwareSubscribeConfiguration = (uint64_t)result;
  getWiFiAwareSubscribeConfigurationClass[0] = (uint64_t (*)())WiFiAwareSubscribeConfigurationFunction;
  return result;
}

id WiFiAwareSubscribeConfigurationFunction()
{
  return (id)classWiFiAwareSubscribeConfiguration;
}

void sub_18E36FCF8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_18E370E7C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(v2 + 16))(v2);
  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void sub_18E371208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void _networkInterfacesChanged(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (*((void *)v4 + 3))
  {
    uint64_t v10 = v4;
    dispatch_assert_queue_V2(*((dispatch_queue_t *)v4 + 6));
    uint64_t v9 = (int *)v10[4];
    if (*v9 <= 10)
    {
      if (*v9 == -1)
      {
        if (!_LogCategory_Initialize((uint64_t)v9, 0xAu)) {
          goto LABEL_6;
        }
        uint64_t v9 = (int *)v10[4];
      }
      LogPrintF((uint64_t)v9, (uint64_t)"void _networkInterfacesChanged(SCDynamicStoreRef, CFArrayRef, void *)", 0xAu, (uint64_t)"Network interfaces changed: %##@\n", v5, v6, v7, v8, a2);
    }
LABEL_6:
    [v10 _networkInterfacesChanged:0];
    [v10 _primaryIPChanged:0];
    id v4 = v10;
  }
}

void sub_18E374278(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18E3742F8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18E374EBC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18E374F3C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18E375820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5786(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5787(uint64_t a1)
{
}

void sub_18E375AE8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18E37645C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18E376CE0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18E37774C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18E378000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

Class initHAPSystemKeychainStore_5821()
{
  if (CoreHAPLibrary_sOnce_5822 != -1) {
    dispatch_once(&CoreHAPLibrary_sOnce_5822, &__block_literal_global_374);
  }
  Class result = objc_getClass("HAPSystemKeychainStore");
  classHAPSystemKeychainStore_5823 = (uint64_t)result;
  getHAPSystemKeychainStoreClass_5819 = (uint64_t (*)())HAPSystemKeychainStoreFunction_5825;
  return result;
}

id HAPSystemKeychainStoreFunction_5825()
{
  return (id)classHAPSystemKeychainStore_5823;
}

void *__CoreHAPLibrary_block_invoke_5827()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP", 2);
  CoreHAPLibrary_sLib_5828 = (uint64_t)result;
  return result;
}

void sub_18E3786A0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18E378770(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

Class initRPClient()
{
  if (RapportLibrary_sOnce_5838 != -1) {
    dispatch_once(&RapportLibrary_sOnce_5838, &__block_literal_global_5839);
  }
  Class result = objc_getClass("RPClient");
  classRPClient = (uint64_t)result;
  getRPClientClass[0] = (uint64_t (*)())RPClientFunction;
  return result;
}

id RPClientFunction()
{
  return (id)classRPClient;
}

void *__RapportLibrary_block_invoke_5842()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/Rapport.framework/Rapport", 2);
  RapportLibrary_sLib_5843 = (uint64_t)result;
  return result;
}

void sub_18E37C250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

uint64_t __Block_byref_object_copy__6114(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__6115(uint64_t a1)
{
}

void _hidePIN(void *a1)
{
  uint64_t v8 = a1;
  dispatch_assert_queue_V2(v8[14]);
  uint64_t v5 = (int *)v8[3];
  if (*v5 <= 30)
  {
    if (*v5 != -1)
    {
LABEL_3:
      LogPrintF((uint64_t)v5, (uint64_t)"void _hidePIN(void * _Nonnull)", 0x1Eu, (uint64_t)"Hide PIN\n", v1, v2, v3, v4, v7);
      goto LABEL_5;
    }
    if (_LogCategory_Initialize((uint64_t)v5, 0x1Eu))
    {
      uint64_t v5 = (int *)v8[3];
      goto LABEL_3;
    }
  }
LABEL_5:
  dispatch_queue_t v6 = v8[32];
  if (v6) {
    ((void (*)(void))v6[2].isa)();
  }
}

uint64_t _showPIN(uint64_t a1, unsigned char *a2, unint64_t a3, void *a4)
{
  id v7 = a4;
  dispatch_assert_queue_V2(*((dispatch_queue_t *)v7 + 14));
  unsigned int v12 = *((_DWORD *)v7 + 11);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 2;
  }
  switch((int)v13)
  {
    case 1:
      if (a3 < 5) {
        goto LABEL_46;
      }
      uint64_t v14 = 4;
      uint64_t v15 = 4;
      goto LABEL_22;
    case 2:
      if (a3 < 7) {
        goto LABEL_46;
      }
      uint64_t v14 = 6;
      uint64_t v15 = 6;
      goto LABEL_22;
    case 3:
      if (a3 < 9) {
        goto LABEL_46;
      }
      uint64_t v14 = 8;
      uint64_t v15 = 8;
      goto LABEL_22;
    case 6:
      if (a3 < 8)
      {
LABEL_46:
        uint64_t v30 = 4294960553;
        goto LABEL_43;
      }
      RandomString((uint64_t)"123456789", 9uLL, 1, 1, a2);
      uint64_t v17 = a2 + 1;
      uint64_t v14 = 6;
      uint64_t v15 = 6;
LABEL_23:
      RandomString((uint64_t)"0123456789", 0xAuLL, v14, v15, v17);
      *((_DWORD *)v7 + 12) = v13;
      uint64_t v24 = (int *)*((void *)v7 + 3);
      if (*v24 > 30) {
        goto LABEL_32;
      }
      if (*v24 != -1) {
        goto LABEL_25;
      }
      if (_LogCategory_Initialize((uint64_t)v24, 0x1Eu))
      {
        uint64_t v24 = (int *)*((void *)v7 + 3);
LABEL_25:
        if (IsAppleInternalBuild_sOnce != -1)
        {
          uint64_t v34 = v24;
          dispatch_once(&IsAppleInternalBuild_sOnce, &__block_literal_global_116);
          uint64_t v24 = v34;
        }
        if (IsAppleInternalBuild_sIsInternal) {
          uint64_t v25 = a2;
        }
        else {
          uint64_t v25 = "*";
        }
        LogPrintF((uint64_t)v24, (uint64_t)"OSStatus _showPIN(PairingFlags, char * _Nonnull, size_t, void * _Nonnull)", 0x1Eu, (uint64_t)"Show PIN '%s'\n", v20, v21, v22, v23, (uint64_t)v25);
      }
LABEL_32:
      uint64_t v26 = *((void *)v7 + 30);
      if (v26)
      {
        uint64_t v27 = [NSString stringWithUTF8String:a2];
        uint64_t v28 = (void *)v27;
        if (v27) {
          uint64_t v29 = (__CFString *)v27;
        }
        else {
          uint64_t v29 = @"?";
        }
        (*(void (**)(uint64_t, uint64_t, __CFString *))(v26 + 16))(v26, a1, v29);
      }
      else
      {
        uint64_t v30 = *((void *)v7 + 31);
        if (!v30) {
          goto LABEL_43;
        }
        uint64_t v31 = [NSString stringWithUTF8String:a2];
        uint64_t v28 = (void *)v31;
        if (v31) {
          uint64_t v32 = (__CFString *)v31;
        }
        else {
          uint64_t v32 = @"?";
        }
        (*(void (**)(uint64_t, __CFString *))(v30 + 16))(v30, v32);
      }

      uint64_t v30 = 0;
LABEL_43:

      return v30;
    case 7:
      BOOL v18 = a3 >= 6;
      uint64_t v19 = 6;
      goto LABEL_18;
    case 8:
      BOOL v18 = a3 >= 0x10;
      uint64_t v19 = 16;
LABEL_18:
      if (v18) {
        uint64_t v14 = v19;
      }
      else {
        uint64_t v14 = a3;
      }
      uint64_t v15 = v14;
LABEL_22:
      uint64_t v17 = a2;
      goto LABEL_23;
    default:
      uint64_t v16 = (int *)*((void *)v7 + 3);
      if (*v16 > 90) {
        goto LABEL_45;
      }
      if (*v16 != -1) {
        goto LABEL_13;
      }
      if (_LogCategory_Initialize((uint64_t)v16, 0x5Au))
      {
        uint64_t v16 = (int *)*((void *)v7 + 3);
LABEL_13:
        LogPrintF((uint64_t)v16, (uint64_t)"OSStatus _showPIN(PairingFlags, char * _Nonnull, size_t, void * _Nonnull)", 0x5Au, (uint64_t)"### Unsupported PIN type %u\n", v8, v9, v10, v11, v13);
      }
LABEL_45:
      uint64_t v30 = 4294960564;
      goto LABEL_43;
  }
}

uint64_t _promptForPIN(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  dispatch_assert_queue_V2(*((dispatch_queue_t *)v5 + 14));
  CFStringRef v6 = (const __CFString *)PairingSessionCopyProperty(*((void *)v5 + 1), @"setupCodeType", 0);
  int v17 = 0;
  int v7 = CFGetInt64(v6, &v17);
  if (v7) {
    int v12 = v7;
  }
  else {
    int v12 = 2;
  }
  *((_DWORD *)v5 + 12) = v12;
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v13 = (int *)*((void *)v5 + 3);
  if (*v13 <= 30)
  {
    if (*v13 == -1)
    {
      if (!_LogCategory_Initialize((uint64_t)v13, 0x1Eu)) {
        goto LABEL_11;
      }
      uint64_t v13 = (int *)*((void *)v5 + 3);
    }
    LogPrintF((uint64_t)v13, (uint64_t)"OSStatus _promptForPIN(PairingFlags, int32_t, void * _Nonnull)", 0x1Eu, (uint64_t)"Prompt for PIN: %#{flags}, Type %s, %d throttle seconds\n", v8, v9, v10, v11, a1);
  }
LABEL_11:
  uint64_t v14 = _Block_copy(*((const void **)v5 + 29));
  uint64_t v15 = v14;
  if (v14) {
    (*((void (**)(void *, uint64_t, uint64_t))v14 + 2))(v14, a1, a2);
  }

  return 0;
}

void sub_18E38538C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_18E385A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id obj)
{
}

void sub_18E389C18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id obj)
{
}

Class initPRTrustedContact()
{
  if (ProximityLibrary_sOnce != -1) {
    dispatch_once(&ProximityLibrary_sOnce, &__block_literal_global_7336);
  }
  Class result = objc_getClass("PRTrustedContact");
  classPRTrustedContact = (uint64_t)result;
  getPRTrustedContactClass[0] = (uint64_t (*)())PRTrustedContactFunction;
  return result;
}

id PRTrustedContactFunction()
{
  return (id)classPRTrustedContact;
}

void *__ProximityLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/Proximity.framework/Proximity", 2);
  ProximityLibrary_sLib = (uint64_t)result;
  return result;
}

Class initPRContactAllowlist()
{
  if (ProximityLibrary_sOnce != -1) {
    dispatch_once(&ProximityLibrary_sOnce, &__block_literal_global_7336);
  }
  Class result = objc_getClass("PRContactAllowlist");
  classPRContactAllowlist = (uint64_t)result;
  getPRContactAllowlistClass[0] = (uint64_t (*)())PRContactAllowlistFunction;
  return result;
}

id PRContactAllowlistFunction()
{
  return (id)classPRContactAllowlist;
}

Class initPRSharingSession()
{
  if (ProximityLibrary_sOnce != -1) {
    dispatch_once(&ProximityLibrary_sOnce, &__block_literal_global_7336);
  }
  Class result = objc_getClass("PRSharingSession");
  classPRSharingSession = (uint64_t)result;
  getPRSharingSessionClass[0] = (uint64_t (*)())PRSharingSessionFunction;
  return result;
}

id PRSharingSessionFunction()
{
  return (id)classPRSharingSession;
}

void sub_18E38AAF8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id logger()
{
  if (sCUOSLogCreateOnce_logger != -1) {
    dispatch_once(&sCUOSLogCreateOnce_logger, &__block_literal_global_7542);
  }
  id v0 = (void *)sCUOSLogHandle_logger;
  return v0;
}

uint64_t __logger_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.CoreUtils", "CUReachability");
  uint64_t v1 = sCUOSLogHandle_logger;
  sCUOSLogHandle_logger = (uint64_t)v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

void sub_18E38B6C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18E38BCCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18E38C8B8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18E38CB14(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18E38CBDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_18E38CD84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

int8x8_t curve25519_donna(uint64_t a1, long long *a2, void *a3)
{
  uint64_t v3 = 0;
  v1398[5] = *MEMORY[0x1E4F143B8];
  long long v4 = a2[1];
  long long v1378 = *a2;
  long long v1379 = v4;
  id v5 = &kCurve25519BasePoint;
  if (a3) {
    id v5 = a3;
  }
  LOBYTE(v1378) = v1378 & 0xF8;
  HIBYTE(v1379) = HIBYTE(v1379) & 0x3F | 0x40;
  uint64_t v6 = *v5 & 0x7FFFFFFFFFFFFLL;
  uint64_t v7 = (*(void *)((char *)v5 + 6) >> 3) & 0x7FFFFFFFFFFFFLL;
  uint64_t v8 = (*(void *)((char *)v5 + 12) >> 6) & 0x7FFFFFFFFFFFFLL;
  uint64_t v9 = (*(void *)((char *)v5 + 19) >> 1) & 0x7FFFFFFFFFFFFLL;
  uint64_t v10 = (v5[3] >> 12) & 0x7FFFFFFFFFFFFLL;
  long long v1397 = 0u;
  long long v1396 = 0u;
  uint64_t v1395 = 1;
  long long v1393 = 0u;
  long long v1394 = 0u;
  uint64_t v1392 = 1;
  uint64_t v1391 = 0;
  memset(v1390, 0, sizeof(v1390));
  uint64_t v1389 = 0;
  memset(v1388, 0, sizeof(v1388));
  long long v1387 = 0u;
  long long v1386 = 0u;
  uint64_t v1385 = 1;
  uint64_t v1384 = 0;
  memset(v1383, 0, sizeof(v1383));
  uint64_t v1221 = 19 * v7;
  uint64_t v1222 = 19 * v10;
  long long v1382 = 0u;
  uint64_t v1219 = 19 * v9;
  uint64_t v1220 = 19 * v8;
  uint64_t v11 = &v1395;
  long long v1381 = 0u;
  int v12 = &v1392;
  uint64_t v13 = (uint64_t *)v1390;
  uint64_t v1380 = 1;
  uint64_t v14 = (uint64_t *)v1388;
  uint64_t v15 = &v1385;
  uint64_t v16 = (uint64_t *)v1383;
  int v17 = &v1380;
  uint64_t v1226 = v7;
  uint64_t v1227 = v6;
  v1398[0] = v6;
  v1398[1] = v7;
  BOOL v18 = v1398;
  uint64_t v1224 = v9;
  uint64_t v1225 = v8;
  v1398[2] = v8;
  v1398[3] = v9;
  int8x16_t v19 = (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFuLL);
  uint64_t v1223 = v10;
  v1398[4] = v10;
  do
  {
    int v20 = 0;
    uint64_t v1218 = v3;
    int v21 = ((unsigned __int8 *)&v1378 - v3)[31];
    uint64_t v22 = v18;
    uint64_t v23 = v17;
    uint64_t v24 = v16;
    uint64_t v25 = v15;
    do
    {
      int v1309 = v20;
      uint64_t v26 = 0;
      uint64_t v27 = v12;
      int v17 = v13;
      v1374 = v14;
      uint64_t v28 = v25;
      uint64_t v29 = v24;
      uint64_t v30 = v23;
      uint64_t v31 = v22;
      uint64_t v32 = (uint64_t)(char)v21 >> 7;
      do
      {
        uint64_t v33 = v12[v26];
        uint64_t v34 = v31[v26];
        uint64_t v35 = (v34 ^ v33) & v32;
        v12[v26] = v35 ^ v33;
        v31[v26++] = v35 ^ v34;
      }
      while (v26 != 5);
      int v1307 = v21;
      v1325 = v28;
      v1330 = v30;
      v1335 = v29;
      for (uint64_t i = 0; i != 5; ++i)
      {
        uint64_t v37 = v13[i];
        uint64_t v38 = v11[i];
        uint64_t v39 = (v38 ^ v37) & v32;
        v13[i] = v39 ^ v37;
        v11[i] = v39 ^ v38;
      }
      uint64_t v40 = 0;
      uint64_t v41 = v12[1];
      uint64_t v42 = *v13;
      uint64_t v43 = v13[1];
      uint64_t v44 = *v12 + 0x3FFFFFFFFFFF68 - *v13;
      uint64_t v45 = v31[1];
      uint64_t v1273 = *v31;
      uint64_t v46 = v11[1];
      uint64_t v47 = *v11 + *v31;
      unint64_t v48 = v46 + v45;
      uint64_t v1363 = *v11;
      uint64_t v1369 = ((unint64_t)(v46 + v45) * (unsigned __int128)(unint64_t)v44) >> 64;
      uint64_t v1346 = (v46 + v45) * v44;
      uint64_t v49 = v12[3];
      uint64_t v50 = v12[4];
      uint64_t v51 = v13[4];
      uint64_t v52 = v50 - v51 + 0x3FFFFFFFFFFFF8;
      uint64_t v1304 = v32;
      uint64_t v53 = 19 * v52;
      uint64_t v54 = v12[2];
      uint64_t v55 = v42 + *v12;
      uint64_t v1240 = v43 + v41;
      uint64_t v56 = v41 - v43 + 0x3FFFFFFFFFFFF8;
      uint64_t v58 = v17[2];
      uint64_t v57 = v17[3];
      uint64_t v1358 = v58 + v54;
      uint64_t v59 = v57 + v49;
      uint64_t v60 = v51 + v50;
      uint64_t v61 = v54 - v58 + 0x3FFFFFFFFFFFF8;
      uint64_t v62 = v49 - v57 + 0x3FFFFFFFFFFFF8;
      uint64_t v63 = v31[2];
      uint64_t v64 = v31[3];
      uint64_t v65 = v31[4];
      uint64_t v67 = v11[2];
      uint64_t v66 = v11[3];
      unint64_t v68 = v67 + v63;
      uint64_t v1339 = v45 - v46;
      unint64_t v69 = v66 + v64;
      uint64_t v70 = v63 - v67;
      uint64_t v1261 = v70;
      uint64_t v71 = v11[4];
      uint64_t v72 = v64 - v66;
      unint64_t v73 = v71 + v65;
      uint64_t v1269 = v65 - v71;
      *uint64_t v31 = v47;
      v31[1] = v48;
      v31[2] = v68;
      v31[3] = v69;
      v1320 = v31;
      v31[4] = v71 + v65;
      uint64_t v74 = v48 * 19 * v52 + v47 * v44 + v68 * 19 * v62 + v69 * 19 * v61;
      uint64_t v75 = (v71 + v65) * 19 * v56;
      BOOL v76 = __CFADD__(v74, v75);
      uint64_t v1253 = v74 + v75;
      uint64_t v77 = v56;
      uint64_t v1298 = 19 * v52;
      uint64_t v1300 = v61;
      unsigned long long v79 = __PAIR128__((((unint64_t)v47 * (unsigned __int128)(unint64_t)v56) >> 64)+ __CFADD__(v1346, v47 * v77)+ v1369, v1346 + v47 * v77)+ v68 * (unsigned __int128)(unint64_t)(19 * v52)+ v69 * (unsigned __int128)(unint64_t)(19 * v62)+ (unint64_t)(v71 + v65) * (unsigned __int128)(unint64_t)(19 * v61);
      uint64_t v78 = *((void *)&v79 + 1);
      *((void *)&v81 + 1) = (((unint64_t)(v71 + v65) * (unsigned __int128)(unint64_t)(19 * v56)) >> 64)
                            + v76
                            + ((v48 * (unsigned __int128)(unint64_t)(19 * v52)
                              + (unint64_t)v47 * (unsigned __int128)(unint64_t)v44
                              + v68 * (unsigned __int128)(unint64_t)(19 * v62)
                              + v69 * (unsigned __int128)(unint64_t)(19 * v61)) >> 64);
      *(void *)&long long v81 = v1253;
      uint64_t v80 = v81 >> 51;
      uint64_t v1248 = v79 + v80;
      if (__CFADD__((void)v79, v80)) {
        uint64_t v78 = *((void *)&v79 + 1) + 1;
      }
      uint64_t v1302 = 19 * v62;
      unsigned long long v82 = v48 * (unsigned __int128)(unint64_t)v77
          + (unint64_t)v47 * (unsigned __int128)(unint64_t)v61
          + v68 * (unsigned __int128)(unint64_t)v44
          + v69 * (unsigned __int128)(unint64_t)v53
          + v73 * (unsigned __int128)(unint64_t)(19 * v62);
      *((void *)&v84 + 1) = v78;
      *(void *)&long long v84 = v79 + v80;
      uint64_t v83 = v84 >> 51;
      uint64_t v1370 = v82 + v83;
      if (__CFADD__((void)v82, v83)) {
        uint64_t v85 = *((void *)&v82 + 1) + 1;
      }
      else {
        uint64_t v85 = (v48 * (unsigned __int128)(unint64_t)v77
      }
             + (unint64_t)v47 * (unsigned __int128)(unint64_t)v61
             + v68 * (unsigned __int128)(unint64_t)v44
             + v69 * (unsigned __int128)(unint64_t)v53
             + v73 * (unsigned __int128)(unint64_t)(19 * v62)) >> 64;
      unsigned long long v86 = v48 * (unsigned __int128)(unint64_t)v61
          + (unint64_t)v47 * (unsigned __int128)(unint64_t)v62
          + v68 * (unsigned __int128)(unint64_t)v77
          + v69 * (unsigned __int128)(unint64_t)v44
          + v73 * (unsigned __int128)(unint64_t)v53;
      uint64_t v1287 = v52;
      uint64_t v1292 = v62;
      uint64_t v87 = v47 * v52;
      *((void *)&v89 + 1) = v85;
      *(void *)&long long v89 = v82 + v83;
      uint64_t v88 = v89 >> 51;
      uint64_t v90 = v86 + v88;
      uint64_t v1347 = v86 + v88;
      uint64_t v91 = v48 * v62;
      if (__CFADD__((void)v86, v88)) {
        uint64_t v92 = *((void *)&v86 + 1) + 1;
      }
      else {
        uint64_t v92 = *((void *)&v86 + 1);
      }
      BOOL v76 = __CFADD__(v91, v87);
      uint64_t v93 = v91 + v87;
      uint64_t v94 = v1273 + 0x3FFFFFFFFFFF68 - v1363;
      unint64_t v95 = (((unint64_t)v47 * (unsigned __int128)(unint64_t)v52) >> 64)
          + v76
          + ((v48 * (unsigned __int128)(unint64_t)v62) >> 64);
      uint64_t v96 = v1339 + 0x3FFFFFFFFFFFF8;
      uint64_t v1281 = v44;
      uint64_t v1283 = v77;
      uint64_t v97 = v70 + 0x3FFFFFFFFFFFF8;
      *((void *)&v99 + 1) = v92;
      *(void *)&long long v99 = v90;
      uint64_t v98 = v99 >> 51;
      unsigned long long v101 = __PAIR128__(v95, v93)
           + v68 * (unsigned __int128)(unint64_t)v61
           + v69 * (unsigned __int128)(unint64_t)v77
           + v73 * (unsigned __int128)(unint64_t)v44;
      uint64_t v100 = *((void *)&v101 + 1);
      uint64_t v102 = v101 + v98;
      if (__CFADD__((void)v101, v98)) {
        uint64_t v100 = *((void *)&v101 + 1) + 1;
      }
      uint64_t v1265 = v100;
      uint64_t v103 = v72;
      uint64_t v104 = v72 + 0x3FFFFFFFFFFFF8;
      uint64_t v105 = 19 * (v72 + 0x3FFFFFFFFFFFF8);
      uint64_t v106 = v1269 + 0x3FFFFFFFFFFFF8;
      uint64_t v107 = 19 * (v1269 + 0x3FFFFFFFFFFFF8);
      signed long long v108 = (unint64_t)(19 * v96) * (unsigned __int128)(unint64_t)v60
           + (unint64_t)v94 * (unsigned __int128)(unint64_t)v55
           + (unint64_t)(19 * v97) * (unsigned __int128)(unint64_t)v59
           + (unint64_t)v105 * (unsigned __int128)(unint64_t)v1358
           + (unint64_t)v107 * (unsigned __int128)(unint64_t)v1240;
      unsigned long long v109 = (unint64_t)v96 * (unsigned __int128)(unint64_t)v55
           + (unint64_t)v94 * (unsigned __int128)(unint64_t)v1240
           + (unint64_t)(19 * v97) * (unsigned __int128)(unint64_t)v60
           + (unint64_t)v105 * (unsigned __int128)(unint64_t)v59
           + (unint64_t)v107 * (unsigned __int128)(unint64_t)v1358;
      uint64_t v110 = v108 >> 51;
      if (__CFADD__((void)v109, v110)) {
        uint64_t v111 = *((void *)&v109 + 1) + 1;
      }
      else {
        uint64_t v111 = ((unint64_t)v96 * (unsigned __int128)(unint64_t)v55
      }
              + (unint64_t)v94 * (unsigned __int128)(unint64_t)v1240
              + (unint64_t)(19 * v97) * (unsigned __int128)(unint64_t)v60
              + (unint64_t)v105 * (unsigned __int128)(unint64_t)v59
              + (unint64_t)v107 * (unsigned __int128)(unint64_t)v1358) >> 64;
      unsigned long long v112 = (unint64_t)v96 * (unsigned __int128)(unint64_t)v1240
           + (unint64_t)v94 * (unsigned __int128)(unint64_t)v1358
           + (unint64_t)v97 * (unsigned __int128)(unint64_t)v55
           + (unint64_t)v105 * (unsigned __int128)(unint64_t)v60
           + (unint64_t)v107 * (unsigned __int128)(unint64_t)v59;
      *((void *)&v113 + 1) = v111;
      *(void *)&long long v113 = v109 + v110;
      uint64_t v1278 = v113 >> 51;
      if (__CFADD__((void)v112, v1278)) {
        uint64_t v114 = *((void *)&v112 + 1) + 1;
      }
      else {
        uint64_t v114 = ((unint64_t)v96 * (unsigned __int128)(unint64_t)v1240
      }
              + (unint64_t)v94 * (unsigned __int128)(unint64_t)v1358
              + (unint64_t)v97 * (unsigned __int128)(unint64_t)v55
              + (unint64_t)v105 * (unsigned __int128)(unint64_t)v60
              + (unint64_t)v107 * (unsigned __int128)(unint64_t)v59) >> 64;
      *((void *)&v116 + 1) = v114;
      *(void *)&long long v116 = v112 + v1278;
      uint64_t v115 = v116 >> 51;
      uint64_t v118 = ((unint64_t)v96 * (unsigned __int128)(unint64_t)v1358
            + (unint64_t)v94 * (unsigned __int128)(unint64_t)v59
            + (unint64_t)v97 * (unsigned __int128)(unint64_t)v1240
            + (unint64_t)v104 * (unsigned __int128)(unint64_t)v55
            + (unint64_t)v107 * (unsigned __int128)(unint64_t)v60) >> 64;
      uint64_t v117 = v96 * v1358 + v94 * v59 + v97 * v1240 + v104 * v55 + v107 * v60;
      BOOL v76 = __CFADD__(v117, v115);
      uint64_t v119 = v117 + v115;
      if (v76) {
        ++v118;
      }
      *uint64_t v11 = v94;
      v11[1] = v96;
      v11[2] = v97;
      int32x4_t v11[3] = v104;
      v1316 = v11;
      _OWORD v11[4] = v106;
      uint64_t v120 = v55;
      unsigned long long v122 = (unint64_t)v96 * (unsigned __int128)(unint64_t)v59
           + (unint64_t)v94 * (unsigned __int128)(unint64_t)v60
           + (unint64_t)v97 * (unsigned __int128)(unint64_t)v1358
           + (unint64_t)v104 * (unsigned __int128)(unint64_t)v1240
           + (unint64_t)v106 * (unsigned __int128)(unint64_t)v55;
      uint64_t v121 = *((void *)&v122 + 1);
      *((void *)&v124 + 1) = v1265;
      *(void *)&long long v124 = v102;
      uint64_t v123 = v124 >> 51;
      *((void *)&v124 + 1) = v118;
      *(void *)&long long v124 = v119;
      uint64_t v125 = v124 >> 51;
      uint64_t v126 = v122 + v125;
      uint64_t v127 = v103 + 0x7FFFFFFFFFFF8;
      uint64_t v128 = v1269 + 0x7FFFFFFFFFFF8;
      uint64_t v129 = v1261 + 0x7FFFFFFFFFFF8;
      uint64_t v130 = v1273 - v1363 + 0x7FFFFFFFFFF68;
      uint64_t v1364 = v130 * v60
            + (v1339 + 0x7FFFFFFFFFFF8) * v59
            + (v1261 + 0x7FFFFFFFFFFF8) * v1358
            + (v103 + 0x7FFFFFFFFFFF8) * v1240
            + (v1269 + 0x7FFFFFFFFFFF8) * v120
            + v125;
      uint64_t v131 = v1339 + 0x7FFFFFFFFFFF8;
      v123 *= 19;
      unint64_t v132 = v123 + (v1253 & 0x7FFFFFFFFFFFFLL);
      uint64_t v133 = v123 + v1253;
      uint64_t v134 = v108 & 0x7FFFFFFFFFFFFLL;
      if (__CFADD__((void)v122, v125)) {
        uint64_t v121 = *((void *)&v122 + 1) + 1;
      }
      *((void *)&v135 + 1) = v121;
      *(void *)&long long v135 = v122 + v125;
      uint64_t v136 = 19 * (v135 >> 51);
      unint64_t v137 = v136 + v134;
      uint64_t v1245 = v136
            + v130 * v120
            + 19
            * ((v1339 + 0x7FFFFFFFFFFF8) * v60
             + (v1261 + 0x7FFFFFFFFFFF8) * v59
             + (v103 + 0x7FFFFFFFFFFF8) * v1358
             + (v1269 + 0x7FFFFFFFFFFF8) * v1240);
      uint64_t v1257 = v130;
      uint64_t v1262 = v1339 + 0x7FFFFFFFFFFF8;
      uint64_t v1266 = v103 + 0x7FFFFFFFFFFF8;
      uint64_t v1274 = v129;
      uint64_t v1340 = 19 * v60;
      uint64_t v1243 = v130 * v59 + v131 * v1358 + v129 * v1240 + v127 * v120 + 19 * v60 * v128 + v115;
      unint64_t v138 = (v1248 & 0x7FFFFFFFFFFFFLL) + (v132 >> 51);
      unint64_t v1254 = ((v109 + v110) & 0x7FFFFFFFFFFFFLL) + ((unint64_t)(v136 + v134) >> 51);
      uint64_t v1234 = v119 & 0x7FFFFFFFFFFFFLL;
      uint64_t v1237 = v126 & 0x7FFFFFFFFFFFFLL;
      uint64_t v1232 = ((v112 + v1278) & 0x7FFFFFFFFFFFFLL) + (v1254 >> 51);
      uint64_t v1229 = (v1370 & 0x7FFFFFFFFFFFFLL) + (v138 >> 51);
      uint64_t v139 = (v1254 & 0x7FFFFFFFFFFFFLL) + (v138 & 0x7FFFFFFFFFFFFLL);
      uint64_t v140 = v1232 + v1229;
      uint64_t v141 = (v119 & 0x7FFFFFFFFFFFFLL) + (v1347 & 0x7FFFFFFFFFFFFLL);
      uint64_t v142 = (v126 & 0x7FFFFFFFFFFFFLL) + (v102 & 0x7FFFFFFFFFFFFLL);
      uint64_t v143 = v1248 + (v132 >> 51);
      uint64_t v1228 = v132 & 0x7FFFFFFFFFFFFLL;
      uint64_t v144 = v130 * v1240 + v131 * v120 + 19 * (v129 * v60 + v127 * v59 + v128 * v1358) + v110 + (v137 >> 51);
      uint64_t v145 = (v137 & 0x7FFFFFFFFFFFFLL) + (v132 & 0x7FFFFFFFFFFFFLL);
      uint64_t v146 = (__int128)(((unint64_t)(v1232 + v1229) * (unsigned __int128)(unint64_t)v141
                       + (unint64_t)v139 * (unsigned __int128)(unint64_t)v142)
                      * 0x26
                      + (unint64_t)v145 * (unsigned __int128)(unint64_t)v145) >> 51;
      uint64_t v147 = (__int128)((unint64_t)(2 * v145) * (unsigned __int128)(unint64_t)v139
                      + (unint64_t)v141 * (unsigned __int128)(unint64_t)v141 * 0x13
                      + (unint64_t)(38 * v142) * (unsigned __int128)(unint64_t)(v1232 + v1229)
                      + ((((unint64_t)(v1232 + v1229) * (unsigned __int128)(unint64_t)v141
                         + (unint64_t)v139 * (unsigned __int128)(unint64_t)v142)
                        * 0x26
                        + (unint64_t)v145 * (unsigned __int128)(unint64_t)v145) >> 51)) >> 51;
      signed long long v148 = (unint64_t)v139 * (unsigned __int128)(unint64_t)v139
           + (unint64_t)(38 * v142) * (unsigned __int128)(unint64_t)v141
           + (unint64_t)(2 * v145) * (unsigned __int128)(unint64_t)(v1232 + v1229)
           + (((unint64_t)(2 * v145) * (unsigned __int128)(unint64_t)v139
             + (unint64_t)v141 * (unsigned __int128)(unint64_t)v141 * 0x13
             + (unint64_t)(38 * v142) * (unsigned __int128)(unint64_t)(v1232 + v1229)
             + ((((unint64_t)(v1232 + v1229) * (unsigned __int128)(unint64_t)v141
                + (unint64_t)v139 * (unsigned __int128)(unint64_t)v142)
               * 0x26
               + (unint64_t)v145 * (unsigned __int128)(unint64_t)v145) >> 51)) >> 51);
      uint64_t v149 = v143;
      signed long long v150 = (unint64_t)v142 * (unsigned __int128)(unint64_t)v142 * 0x13
           + ((unint64_t)(v1232 + v1229) * (unsigned __int128)(unint64_t)v139
            + (unint64_t)v145 * (unsigned __int128)(unint64_t)v141)
           * 2
           + ((unsigned __int128)v148 >> 51);
      unsigned long long v151 = (unint64_t)v139 * (unsigned __int128)(unint64_t)v141
           + (unint64_t)v145 * (unsigned __int128)(unint64_t)v142;
      uint64_t v152 = v140 * v140 + 2 * ((v1245 + v133) * (v1364 + v102) + (v144 + v143) * (v1243 + v1347));
      uint64_t v153 = 2 * (v1245 + v133);
      uint64_t v154 = 19 * (v1243 + v1347) * (v1243 + v1347) + (v144 + v143) * v153 + 38 * (v1364 + v102) * (v1232 + v1229);
      uint64_t v155 = (v1245 + v133) * (v1245 + v133) + 38 * ((v144 + v143) * (v1364 + v102) + (v1243 + v1347) * (v1232 + v1229));
      uint64_t v156 = 19
           * ((__int128)((unint64_t)v140 * (unsigned __int128)(unint64_t)v140
                       + v151 * 2
                       + ((unsigned __int128)v150 >> 51)) >> 51);
      uint64_t v157 = v156 + v155;
      unint64_t v158 = v156 + (v155 & 0x7FFFFFFFFFFFFLL);
      uint64_t v159 = v154 + v146 + (v158 >> 51);
      unint64_t v160 = ((v154 + v146) & 0x7FFFFFFFFFFFFLL) + (v158 >> 51);
      unint64_t v161 = v1228 + 0x3FFFFFFFFFFF68 - (v137 & 0x7FFFFFFFFFFFFLL);
      uint64_t v162 = (v1347 & 0x7FFFFFFFFFFFFLL) - v1234;
      uint64_t *v1374 = v157 & 0x7FFFFFFFFFFFFLL;
      v1374[1] = v159 & 0x7FFFFFFFFFFFFLL;
      v1374[2] = ((38 * (v1364 + v102) * (v1243 + v1347) + (v144 + v143) * (v144 + v143) + v153 * (v1232 + v1229) + v147) & 0x7FFFFFFFFFFFFLL)
               + (v160 >> 51);
      v1374[3] = (19 * (v1364 + v102) * (v1364 + v102)
                + 2 * ((v1245 + v133) * (v1243 + v1347) + (v144 + v143) * (v1232 + v1229))
                + (v148 >> 51)) & 0x7FFFFFFFFFFFFLL;
      v1374[4] = (v152 + (v150 >> 51)) & 0x7FFFFFFFFFFFFLL;
      uint64_t v163 = (v138 & 0x7FFFFFFFFFFFFLL) - (v1254 & 0x7FFFFFFFFFFFFLL) + 0x3FFFFFFFFFFFF8;
      uint64_t v164 = v1229 - v1232 + 0x3FFFFFFFFFFFF8;
      uint64_t v165 = (v102 & 0x7FFFFFFFFFFFFLL) - v1237 + 0x3FFFFFFFFFFFF8;
      uint64_t v166 = (__int128)(((unint64_t)v164 * (unsigned __int128)(unint64_t)(v162 + 0x3FFFFFFFFFFFF8)
                       + (unint64_t)v163 * (unsigned __int128)(unint64_t)v165)
                      * 0x26
                      + v161 * (unsigned __int128)v161) >> 51;
      *((void *)&v135 + 1) = (__PAIR128__(v161 >> 63, 2 * v161) * (unint64_t)v163
                              + (unint64_t)(v162 + 0x3FFFFFFFFFFFF8)
                              * (unsigned __int128)(unint64_t)(v162 + 0x3FFFFFFFFFFFF8)
                              * 0x13
                              + (unint64_t)v165 * (unsigned __int128)0x26uLL * (unint64_t)v164
                              + ((((unint64_t)v164
                                 * (unsigned __int128)(unint64_t)(v162 + 0x3FFFFFFFFFFFF8)
                                 + (unint64_t)v163 * (unsigned __int128)(unint64_t)v165)
                                * 0x26
                                + v161 * (unsigned __int128)v161) >> 51)) >> 64;
      *(void *)&long long v135 = 2 * v161 * v163
                       + 19 * (v162 + 0x3FFFFFFFFFFFF8) * (v162 + 0x3FFFFFFFFFFFF8)
                       + 38 * v165 * v164
                       + v166;
      uint64_t v167 = v135 >> 51;
      *((void *)&v135 + 1) = ((unint64_t)v163 * (unsigned __int128)(unint64_t)v163
                              + (unint64_t)v165
                              * (unsigned __int128)0x26uLL
                              * (unint64_t)(v162 + 0x3FFFFFFFFFFFF8)
                              + __PAIR128__(v161 >> 63, 2 * v161) * (unint64_t)v164
                              + ((unsigned __int128)v135 >> 51)) >> 64;
      *(void *)&long long v135 = v163 * v163 + 38 * v165 * (v162 + 0x3FFFFFFFFFFFF8) + 2 * v161 * v164 + v167;
      unint64_t v168 = ((unint64_t)v165 * (unsigned __int128)(unint64_t)v165 * 0x13
            + ((unint64_t)v164 * (unsigned __int128)(unint64_t)v163
             + v161 * (unsigned __int128)(unint64_t)(v162 + 0x3FFFFFFFFFFFF8))
            * 2
            + ((unsigned __int128)v135 >> 51)) >> 64;
      uint64_t v169 = 19 * v165 * v165 + 2 * (v164 * v163 + v161 * (v162 + 0x3FFFFFFFFFFFF8)) + ((unsigned __int128)v135 >> 51);
      uint64_t v170 = v60;
      *uint64_t v27 = v120;
      v27[1] = v1240;
      v27[2] = v1358;
      v27[3] = v59;
      void v27[4] = v60;
      *((void *)&v135 + 1) = ((unint64_t)v164 * (unsigned __int128)(unint64_t)v164
                              + ((unint64_t)v163
                               * (unsigned __int128)(unint64_t)(v162 + 0x3FFFFFFFFFFFF8)
                               + v161 * (unsigned __int128)(unint64_t)v165)
                              * 2
                              + (((unint64_t)v165 * (unsigned __int128)(unint64_t)v165 * 0x13
                                + ((unint64_t)v164 * (unsigned __int128)(unint64_t)v163
                                 + v161 * (unsigned __int128)(unint64_t)(v162 + 0x3FFFFFFFFFFFF8))
                                * 2
                                + ((unsigned __int128)v135 >> 51)) >> 51)) >> 64;
      *(void *)&long long v135 = v164 * v164
                       + 2 * (v163 * (v162 + 0x3FFFFFFFFFFFF8) + v161 * v165)
                       + ((__int128)__PAIR128__(v168, v169) >> 51);
      uint64_t v171 = v149 - v144 + 0x7FFFFFFFFFFF8;
      uint64_t v172 = v102 - v1364 + 0x7FFFFFFFFFFF8;
      uint64_t v173 = 0x7FFFFFFFFFFEDLL * (v1266 * v60 + (v1269 + 0x7FFFFFFFFFFF8) * v59)
           - (v1257 * v1358
            + v1262 * v1240
            + v1274 * v120
            + v1278)
           + v1370
           + (v138 >> 51)
           - (v1254 >> 51)
           + 0x7FFFFFFFFFFF8;
      uint64_t v174 = v1347 - v1243 + 0x7FFFFFFFFFFF8;
      uint64_t v175 = v133 - v1245 + 0x7FFFFFFFFFF68;
      uint64_t v176 = v175 * v175 + 38 * (v171 * v172 + v173 * v174);
      uint64_t v177 = 19 * (v135 >> 51);
      uint64_t v178 = v177 + v176;
      v172 *= 38;
      v175 *= 2;
      uint64_t v179 = 19 * v174 * v174 + v171 * v175 + v172 * v173 + v166;
      unint64_t v180 = v177 + (v176 & 0x7FFFFFFFFFFFFLL);
      uint64_t v181 = v179 + (v180 >> 51);
      unint64_t v182 = ((v172 * v174 + v171 * v171 + v173 * v175 + v167) & 0x7FFFFFFFFFFFFLL)
           + (((v179 & 0x7FFFFFFFFFFFFLL) + (v180 >> 51)) >> 51);
      uint64_t v183 = v178 & 0x7FFFFFFFFFFFFLL;
      uint64_t v184 = v181 & 0x7FFFFFFFFFFFFLL;
      uint64_t v185 = v169 & 0x7FFFFFFFFFFFFLL;
      uint64_t v186 = v135 & 0x7FFFFFFFFFFFFLL;
      signed long long v187 = (v135 & 0x7FFFFFFFFFFFFLL) * (unint64_t)v1221
           + (v169 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1220
           + (v178 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1227
           + (v181 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1222
           + v182 * (unsigned __int128)(unint64_t)v1219;
      uint64_t v190 = v187 >> 51;
      uint64_t v189 = ((v135 & 0x7FFFFFFFFFFFFLL) * (unint64_t)v1220
            + (v169 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1219
            + (v178 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1226
            + (v181 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1227
            + v182 * (unsigned __int128)(unint64_t)v1222) >> 64;
      uint64_t v188 = (v135 & 0x7FFFFFFFFFFFFLL) * v1220
           + (v169 & 0x7FFFFFFFFFFFFLL) * v1219
           + (v178 & 0x7FFFFFFFFFFFFLL) * v1226
           + (v181 & 0x7FFFFFFFFFFFFLL) * v1227
           + v182 * v1222;
      BOOL v76 = __CFADD__(v188, v190);
      uint64_t v191 = v188 + v190;
      if (v76) {
        ++v189;
      }
      uint64_t v192 = ((unint64_t)v186 * (unsigned __int128)(unint64_t)v1219
            + (unint64_t)v185 * (unsigned __int128)(unint64_t)v1222
            + (v178 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1225
            + (unint64_t)v184 * (unsigned __int128)(unint64_t)v1226
            + v182 * (unsigned __int128)(unint64_t)v1227) >> 64;
      unint64_t v193 = v186 * v1219 + v185 * v1222 + v183 * v1225 + v184 * v1226 + v182 * v1227;
      *((void *)&v195 + 1) = v189;
      *(void *)&long long v195 = v191;
      uint64_t v194 = v195 >> 51;
      BOOL v76 = __CFADD__(v193, v194);
      uint64_t v196 = v193 + v194;
      if (v76) {
        ++v192;
      }
      BOOL v18 = v1374;
      uint64_t v197 = v191 & 0x7FFFFFFFFFFFFLL;
      *((void *)&v199 + 1) = v192;
      *(void *)&long long v199 = v196;
      uint64_t v198 = v199 >> 51;
      uint64_t v200 = v196 & 0x7FFFFFFFFFFFFLL;
      unsigned long long v201 = (unint64_t)v186 * (unsigned __int128)(unint64_t)v1222
           + (unint64_t)v185 * (unsigned __int128)(unint64_t)v1227
           + (unint64_t)v183 * (unsigned __int128)(unint64_t)v1224
           + (unint64_t)v184 * (unsigned __int128)(unint64_t)v1225
           + v182 * (unsigned __int128)(unint64_t)v1226;
      unsigned long long v203 = (unint64_t)v186 * (unsigned __int128)(unint64_t)v1227
           + (unint64_t)v185 * (unsigned __int128)(unint64_t)v1226
           + (unint64_t)v183 * (unsigned __int128)(unint64_t)v1223
           + (unint64_t)v184 * (unsigned __int128)(unint64_t)v1224
           + v182 * (unsigned __int128)(unint64_t)v1225;
      uint64_t v202 = *((void *)&v203 + 1);
      if (__CFADD__((void)v201, v198)) {
        uint64_t v204 = *((void *)&v201 + 1) + 1;
      }
      else {
        uint64_t v204 = *((void *)&v201 + 1);
      }
      *((void *)&v206 + 1) = v204;
      *(void *)&long long v206 = v201 + v198;
      uint64_t v205 = v206 >> 51;
      v207.i64[0] = v201 + v198;
      v207.i64[1] = v203 + v205;
      if (__CFADD__((void)v203, v205)) {
        uint64_t v202 = *((void *)&v203 + 1) + 1;
      }
      *((void *)&v208 + 1) = v202;
      *(void *)&long long v208 = v203 + v205;
      unint64_t v209 = (v187 & 0x7FFFFFFFFFFFFLL) + 19 * (v208 >> 51);
      uint64_t v210 = v209 & 0x7FFFFFFFFFFFFLL;
      unint64_t v211 = v197 + (v209 >> 51);
      uint64_t v11 = v1325;
      uint64_t *v1325 = v210;
      v1325[1] = v211 & 0x7FFFFFFFFFFFFLL;
      v1325[2] = v200 + (v211 >> 51);
      uint64_t v212 = 2 * v120;
      uint64_t v213 = 38 * v170;
      uint64_t v214 = (__int128)((unint64_t)v59 * (unsigned __int128)(unint64_t)(38 * v1358)
                      + (unint64_t)v120 * (unsigned __int128)(unint64_t)v120
                      + (unint64_t)(38 * v170) * (unsigned __int128)(unint64_t)v1240) >> 51;
      unsigned long long v215 = (unint64_t)(19 * v59) * (unsigned __int128)(unint64_t)v59
           + (unint64_t)v1240 * (unsigned __int128)(unint64_t)(2 * v120);
      uint64_t v216 = 38 * v170 * v1358;
      uint64_t v217 = (v215 + (unint64_t)(38 * v170) * (unsigned __int128)(unint64_t)v1358) >> 64;
      if (__CFADD__(v215 + v216, v214)) {
        ++v217;
      }
      *((void *)&v219 + 1) = v217;
      *(void *)&long long v219 = v215 + v216 + v214;
      uint64_t v218 = v219 >> 51;
      uint64_t v220 = v1358 * v212;
      unint64_t v221 = ((unint64_t)v213 * (unsigned __int128)(unint64_t)v59) >> 64;
      uint64_t v222 = v213 * v59;
      uint64_t v223 = ((unint64_t)v1358 * (unsigned __int128)(unint64_t)(2 * v120)
            + (unint64_t)v1240 * (unsigned __int128)(unint64_t)v1240
            + __PAIR128__(v221, v222)) >> 64;
      if (__CFADD__(v1358 * v212 + v1240 * v1240 + v222, v218)) {
        ++v223;
      }
      *((void *)&v225 + 1) = v223;
      *(void *)&long long v225 = v1358 * v212 + v1240 * v1240 + v222 + v218;
      uint64_t v224 = v225 >> 51;
      unsigned long long v226 = (unint64_t)v59 * (unsigned __int128)(unint64_t)(2 * v120)
           + (unint64_t)v1358 * (unsigned __int128)(unint64_t)(2 * v1240)
           + (unint64_t)v1340 * (unsigned __int128)(unint64_t)v170;
      uint64_t v1279 = v226 + v224;
      if (__CFADD__((void)v226, v224)) {
        uint64_t v227 = *((void *)&v226 + 1) + 1;
      }
      else {
        uint64_t v227 = ((unint64_t)v59 * (unsigned __int128)(unint64_t)(2 * v120)
      }
              + (unint64_t)v1358 * (unsigned __int128)(unint64_t)(2 * v1240)
              + (unint64_t)v1340 * (unsigned __int128)(unint64_t)v170) >> 64;
      uint64_t v1371 = v1340 * v170 + 2 * (v1358 * v1240 + v59 * v120) + v224;
      unsigned long long v228 = (unint64_t)v59 * (unsigned __int128)(unint64_t)(2 * v1240)
           + (unint64_t)v1358 * (unsigned __int128)(unint64_t)v1358
           + (unint64_t)v170 * (unsigned __int128)(unint64_t)v212;
      *((void *)&v230 + 1) = v227;
      *(void *)&long long v230 = v226 + v224;
      uint64_t v229 = v230 >> 51;
      if (__CFADD__((void)v228, v229)) {
        uint64_t v231 = *((void *)&v228 + 1) + 1;
      }
      else {
        uint64_t v231 = ((unint64_t)v59 * (unsigned __int128)(unint64_t)(2 * v1240)
      }
              + (unint64_t)v1358 * (unsigned __int128)(unint64_t)v1358
              + (unint64_t)v170 * (unsigned __int128)(unint64_t)v212) >> 64;
      uint64_t v1341 = v228 + v229;
      uint64_t v1348 = v1358 * v1358 + 2 * (v59 * v1240 + v170 * v120) + v229;
      *((void *)&v232 + 1) = v231;
      *(void *)&long long v232 = v228 + v229;
      uint64_t v233 = 19 * (v232 >> 51);
      uint64_t v234 = v120 * v120 + 38 * (v59 * v1358 + v170 * v1240);
      uint64_t v1270 = v233 + v234;
      unint64_t v235 = v233 + (v234 & 0x7FFFFFFFFFFFFLL);
      uint64_t v236 = 19 * v59 * v59 + v1240 * 2 * v120 + v216 + v214;
      uint64_t v1359 = v236 + (v235 >> 51);
      unint64_t v1275 = (v236 & 0x7FFFFFFFFFFFFLL) + (v235 >> 51);
      uint64_t v237 = v220 + v1240 * v1240 + v222 + v218;
      uint64_t v238 = 2 * v1281;
      uint64_t v239 = 38 * v1287;
      uint64_t v240 = (__int128)((unint64_t)v1292 * (unsigned __int128)(unint64_t)(38 * v61)
                      + (unint64_t)v1281 * (unsigned __int128)(unint64_t)v1281
                      + (unint64_t)(38 * v1287) * (unsigned __int128)(unint64_t)v1283) >> 51;
      uint64_t v242 = ((unint64_t)v1302 * (unsigned __int128)(unint64_t)v1292
            + (unint64_t)v1283 * (unsigned __int128)(unint64_t)(2 * v1281)
            + (unint64_t)(38 * v1287) * (unsigned __int128)(unint64_t)v61) >> 64;
      uint64_t v241 = v1302 * v1292 + v1283 * 2 * v1281 + 38 * v1287 * v61;
      BOOL v76 = __CFADD__(v241, v240);
      uint64_t v243 = v241 + v240;
      if (v76) {
        ++v242;
      }
      *((void *)&v245 + 1) = v242;
      *(void *)&long long v245 = v243;
      uint64_t v244 = v245 >> 51;
      uint64_t v246 = v61 * v238;
      unint64_t v247 = ((unint64_t)v239 * (unsigned __int128)(unint64_t)v1292) >> 64;
      uint64_t v248 = v239 * v1292;
      uint64_t v249 = ((unint64_t)v61 * (unsigned __int128)(unint64_t)(2 * v1281)
            + (unint64_t)v1283 * (unsigned __int128)(unint64_t)v1283
            + __PAIR128__(v247, v248)) >> 64;
      uint64_t v250 = v61 * 2 * v1281 + v1283 * v1283 + v248;
      BOOL v76 = __CFADD__(v250, v244);
      uint64_t v251 = v250 + v244;
      if (v76) {
        ++v249;
      }
      *((void *)&v253 + 1) = v249;
      *(void *)&long long v253 = v251;
      uint64_t v252 = v253 >> 51;
      uint64_t v255 = ((unint64_t)v1292 * (unsigned __int128)(unint64_t)(2 * v1281)
            + (unint64_t)v61 * (unsigned __int128)(unint64_t)(2 * v1283)
            + (unint64_t)v1298 * (unsigned __int128)(unint64_t)v1287) >> 64;
      uint64_t v254 = v1292 * 2 * v1281 + v61 * 2 * v1283 + v1298 * v1287;
      uint64_t v256 = v254 + v252;
      if (__CFADD__(v254, v252)) {
        ++v255;
      }
      uint64_t v257 = v1298 * v1287 + 2 * (v1300 * v1283 + v1292 * v1281) + v252;
      uint64_t v259 = ((unint64_t)v1292 * (unsigned __int128)(unint64_t)(2 * v1283)
            + (unint64_t)v1300 * (unsigned __int128)(unint64_t)v1300
            + (unint64_t)v1287 * (unsigned __int128)(unint64_t)v238) >> 64;
      uint64_t v258 = v1292 * 2 * v1283 + v1300 * v1300 + v1287 * v238;
      *((void *)&v261 + 1) = v255;
      *(void *)&long long v261 = v256;
      uint64_t v260 = v261 >> 51;
      BOOL v76 = __CFADD__(v258, v260);
      uint64_t v262 = v258 + v260;
      uint64_t v263 = v1300 * v1300 + 2 * (v1292 * v1283 + v1287 * v1281) + v260;
      v17[2] = v1300;
      v17[3] = v1292;
      *int v17 = v1281;
      v17[1] = v1283;
      if (v76) {
        ++v259;
      }
      *((void *)&v264 + 1) = v259;
      *(void *)&long long v264 = v262;
      uint64_t v265 = 19 * (v264 >> 51);
      uint64_t v266 = v1281 * v1281 + 38 * (v1292 * v1300 + v1287 * v1283);
      uint64_t v267 = v265 + v266;
      unint64_t v268 = v265 + (v266 & 0x7FFFFFFFFFFFFLL);
      v17[4] = v1287;
      uint64_t v269 = v1302 * v1292 + v1283 * 2 * v1281 + v1287 * 38 * v1300 + v240;
      uint64_t v270 = (v246 + v1283 * v1283 + v248 + v244) & 0x7FFFFFFFFFFFFLL;
      uint64_t v271 = (v237 & 0x7FFFFFFFFFFFFLL) + (v1275 >> 51);
      uint64_t v272 = v257 & 0x7FFFFFFFFFFFFLL;
      uint64_t v273 = v263 & 0x7FFFFFFFFFFFFLL;
      uint64_t v274 = v267 & 0x7FFFFFFFFFFFFLL;
      uint64_t v275 = (v269 + (v268 >> 51)) & 0x7FFFFFFFFFFFFLL;
      unint64_t v276 = v270 + (((v269 & 0x7FFFFFFFFFFFFLL) + (v268 >> 51)) >> 51);
      uint64_t v277 = (v1359 & 0x7FFFFFFFFFFFFLL) * 19 * (v263 & 0x7FFFFFFFFFFFFLL)
           + v274 * (v1270 & 0x7FFFFFFFFFFFFLL)
           + v271 * 19 * (v257 & 0x7FFFFFFFFFFFFLL)
           + (v1341 & 0x7FFFFFFFFFFFFLL) * 19 * v275
           + (v1279 & 0x7FFFFFFFFFFFFLL) * 19 * v276;
      unsigned long long v280 = (v1359 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v274
           + (v1279 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(19 * (v257 & 0x7FFFFFFFFFFFFuLL))
           + (unint64_t)v275 * (unsigned __int128)(v1270 & 0x7FFFFFFFFFFFFLL)
           + (unint64_t)v271 * (unsigned __int128)(19 * (v263 & 0x7FFFFFFFFFFFFuLL))
           + (v1341 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(19 * v276)
           + (((v1359 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(19 * (v263 & 0x7FFFFFFFFFFFFuLL))
             + (unint64_t)v274 * (unsigned __int128)(v1270 & 0x7FFFFFFFFFFFFLL)
             + (unint64_t)v271 * (unsigned __int128)(19 * (v257 & 0x7FFFFFFFFFFFFuLL))
             + (v1341 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)(19 * v275)
             + (v1279 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(19 * v276)) >> 51);
      unint64_t v278 = v280 >> 64;
      unint64_t v279 = v280;
      unsigned long long v281 = (v1279 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)(19 * v273)
           + (v1341 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(19 * (v257 & 0x7FFFFFFFFFFFFuLL))
           + (unint64_t)v275 * (unsigned __int128)(v1359 & 0x7FFFFFFFFFFFFLL);
      uint64_t v282 = v256 & 0x7FFFFFFFFFFFFLL;
      unsigned long long v283 = v281
           + (unint64_t)v271 * (unsigned __int128)(unint64_t)v274
           + v276 * (unsigned __int128)(v1270 & 0x7FFFFFFFFFFFFLL)
           + (__PAIR128__(v278, v279) >> 51);
      unsigned long long v284 = (unint64_t)v282 * (unsigned __int128)(v1270 & 0x7FFFFFFFFFFFFLL)
           + (v1341 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)(19 * v273)
           + (v1279 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v274
           + (unint64_t)v271 * (unsigned __int128)(unint64_t)v275
           + v276 * (unsigned __int128)(v1359 & 0x7FFFFFFFFFFFFLL);
      unsigned long long v285 = (v1341 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v274
           + (v262 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(v1270 & 0x7FFFFFFFFFFFFLL)
           + (unint64_t)v282 * (unsigned __int128)(v1359 & 0x7FFFFFFFFFFFFLL);
      uint64_t v286 = v1371 & 0x7FFFFFFFFFFFFLL;
      unsigned long long v287 = v284 + (v283 >> 51);
      v288.i64[0] = v284 + (v283 >> 51);
      v288.i64[1] = v285 + (v1279 & 0x7FFFFFFFFFFFFLL) * v275 + v276 * v271 + (v287 >> 51);
      unint64_t v289 = (v277 & 0x7FFFFFFFFFFFFLL)
           + 19
           * ((__int128)(v285
                       + (v1279 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v275
                       + v276 * (unsigned __int128)(unint64_t)v271
                       + (v287 >> 51)) >> 51);
      uint64_t v290 = v289 & 0x7FFFFFFFFFFFFLL;
      unint64_t v291 = (v279 & 0x7FFFFFFFFFFFFLL) + (v289 >> 51);
      uint64_t v292 = v291 & 0x7FFFFFFFFFFFFLL;
      uint64_t v293 = (v283 & 0x7FFFFFFFFFFFFLL) + (v291 >> 51);
      int v12 = v1335;
      uint64_t *v1335 = v290;
      v1335[1] = v292;
      uint64_t v294 = (v1270 & 0x7FFFFFFFFFFFFLL) + 0x3FFFFFFFFFFF68 - v274;
      uint64_t v295 = (v1359 & 0x7FFFFFFFFFFFFLL) - v275 + 0x3FFFFFFFFFFFF8;
      uint64_t v296 = v271 - v276 + 0x3FFFFFFFFFFFF8;
      uint64_t v297 = (v1371 & 0x7FFFFFFFFFFFFLL) - v272 + 0x3FFFFFFFFFFFF8;
      uint64_t v298 = (v1348 & 0x7FFFFFFFFFFFFLL) - v273 + 0x3FFFFFFFFFFFF8;
      uint64_t v299 = (__int128)((unint64_t)v294 * (unsigned __int128)0x1DB41uLL) >> 51;
      BOOL v76 = __CFADD__(121665 * v295, v299);
      uint64_t v300 = 121665 * v295 + v299;
      if (v76) {
        uint64_t v301 = (((unint64_t)v295 * (unsigned __int128)0x1DB41uLL) >> 64) + 1;
      }
      else {
        uint64_t v301 = ((unint64_t)v295 * (unsigned __int128)0x1DB41uLL) >> 64;
      }
      *((void *)&v303 + 1) = v301;
      *(void *)&long long v303 = v300;
      uint64_t v302 = v303 >> 51;
      BOOL v76 = __CFADD__(v302, 121665 * v296);
      uint64_t v304 = v302 + 121665 * v296;
      if (v76) {
        uint64_t v305 = (((unint64_t)v296 * (unsigned __int128)0x1DB41uLL) >> 64) + 1;
      }
      else {
        uint64_t v305 = ((unint64_t)v296 * (unsigned __int128)0x1DB41uLL) >> 64;
      }
      *((void *)&v307 + 1) = v305;
      *(void *)&long long v307 = v304;
      uint64_t v306 = v307 >> 51;
      BOOL v76 = __CFADD__(v306, 121665 * v297);
      uint64_t v308 = v306 + 121665 * v297;
      if (v76) {
        uint64_t v309 = (((unint64_t)v297 * (unsigned __int128)0x1DB41uLL) >> 64) + 1;
      }
      else {
        uint64_t v309 = ((unint64_t)v297 * (unsigned __int128)0x1DB41uLL) >> 64;
      }
      uint64_t v310 = v308 & 0x7FFFFFFFFFFFFLL;
      *((void *)&v312 + 1) = v309;
      *(void *)&long long v312 = v308;
      uint64_t v311 = v312 >> 51;
      BOOL v76 = __CFADD__(v311, 121665 * v298);
      uint64_t v313 = v311 + 121665 * v298;
      if (v76) {
        uint64_t v314 = (((unint64_t)v298 * (unsigned __int128)0x1DB41uLL) >> 64) + 1;
      }
      else {
        uint64_t v314 = ((unint64_t)v298 * (unsigned __int128)0x1DB41uLL) >> 64;
      }
      *((void *)&v315 + 1) = v314;
      *(void *)&long long v315 = v313;
      unint64_t v316 = ((121665 * v294) & 0x7FFFFFFFFFFFFLL) + (v1270 & 0x7FFFFFFFFFFFFLL) + 19 * (v315 >> 51);
      uint64_t v317 = *((void *)&v283 + 1) + (v1359 & 0x7FFFFFFFFFFFFLL);
      uint64_t v318 = (v313 & 0x7FFFFFFFFFFFFLL) + (v1348 & 0x7FFFFFFFFFFFFLL);
      unsigned long long v321 = (unint64_t)(19 * (*((void *)&v281 + 1) + v271)) * (unsigned __int128)(unint64_t)v298
           + (unint64_t)v317 * (unsigned __int128)(unint64_t)v294
           + (unint64_t)(19 * (v310 + v286)) * (unsigned __int128)(unint64_t)v297
           + (unint64_t)(19 * v318) * (unsigned __int128)(unint64_t)v296
           + v316 * (unsigned __int128)(unint64_t)v295
           + (((unint64_t)(19 * (*((void *)&v281 + 1) + v271)) * (unsigned __int128)(unint64_t)v297
             + (unint64_t)(19 * v317) * (unsigned __int128)(unint64_t)v298
             + (unint64_t)(19 * (v310 + v286)) * (unsigned __int128)(unint64_t)v296
             + (unint64_t)(19 * v318) * (unsigned __int128)(unint64_t)v295
             + v316 * (unsigned __int128)(unint64_t)v294) >> 51);
      unint64_t v320 = v321 >> 64;
      unint64_t v319 = v321;
      unsigned long long v324 = (unint64_t)(*((void *)&v281 + 1) + v271) * (unsigned __int128)(unint64_t)v294
           + (unint64_t)v317 * (unsigned __int128)(unint64_t)v295
           + (unint64_t)(19 * (v310 + v286)) * (unsigned __int128)(unint64_t)v298
           + (unint64_t)(19 * v318) * (unsigned __int128)(unint64_t)v297
           + v316 * (unsigned __int128)(unint64_t)v296
           + (__PAIR128__(v320, v319) >> 51);
      unint64_t v323 = v324 >> 64;
      unint64_t v322 = v324;
      unsigned long long v325 = (unint64_t)(*((void *)&v281 + 1) + v271) * (unsigned __int128)(unint64_t)v295
           + (unint64_t)v317 * (unsigned __int128)(unint64_t)v296
           + (unint64_t)(v310 + v286) * (unsigned __int128)(unint64_t)v294
           + (unint64_t)(19 * v318) * (unsigned __int128)(unint64_t)v298
           + v316 * (unsigned __int128)(unint64_t)v297;
      *((void *)&v315 + 1) = (v325 + (__PAIR128__(v323, v322) >> 51)) >> 64;
      *(void *)&long long v315 = v325 + ((__int128)__PAIR128__(v323, v322) >> 51);
      v326.i64[0] = v315;
      v326.i64[1] = (*((void *)&v281 + 1) + v271) * v296
                  + v317 * v297
                  + (v310 + v286) * v295
                  + v318 * v294
                  + v316 * v298
                  + ((unsigned __int128)v315 >> 51);
      v1335[2] = v293;
      unint64_t v327 = ((19 * (*((void *)&v281 + 1) + v271) * v297
             + 19 * v317 * v298
             + 19 * (v310 + v286) * v296
             + 19 * v318 * v295
             + v316 * v294) & 0x7FFFFFFFFFFFFLL)
           + 19
           * ((__int128)((unint64_t)(*((void *)&v281 + 1) + v271) * (unsigned __int128)(unint64_t)v296
                       + (unint64_t)v317 * (unsigned __int128)(unint64_t)v297
                       + (unint64_t)(v310 + v286) * (unsigned __int128)(unint64_t)v295
                       + (unint64_t)v318 * (unsigned __int128)(unint64_t)v294
                       + v316 * (unsigned __int128)(unint64_t)v298
                       + ((unsigned __int128)v315 >> 51)) >> 51);
      unint64_t v328 = (v319 & 0x7FFFFFFFFFFFFLL) + (v327 >> 51);
      uint64_t v13 = v1330;
      uint64_t *v1330 = v327 & 0x7FFFFFFFFFFFFLL;
      v1330[1] = v328 & 0x7FFFFFFFFFFFFLL;
      v1330[2] = (v322 & 0x7FFFFFFFFFFFFLL) + (v328 >> 51);
      *(int8x16_t *)(v1325 + 3) = vandq_s8(v207, v19);
      *(int8x16_t *)(v1335 + 3) = vandq_s8((int8x16_t)v288, v19);
      *(int8x16_t *)(v1330 + 3) = vandq_s8(v326, v19);
      do
      {
        uint64_t v329 = v1335[v40];
        uint64_t v330 = v1374[v40];
        uint64_t v331 = (v330 ^ v329) & v1304;
        v1335[v40] = v331 ^ v329;
        v1374[v40++] = v331 ^ v330;
      }
      while (v40 != 5);
      for (uint64_t j = 0; j != 5; ++j)
      {
        uint64_t v333 = v1330[j];
        uint64_t v334 = v1325[j];
        uint64_t v335 = (v334 ^ v333) & v1304;
        v1330[j] = v335 ^ v333;
        v1325[j] = v335 ^ v334;
      }
      int v21 = 2 * v1307;
      int v20 = v1309 + 1;
      uint64_t v22 = v1374;
      uint64_t v23 = v17;
      uint64_t v16 = v27;
      uint64_t v24 = v27;
      uint64_t v15 = v1316;
      uint64_t v14 = v1320;
      uint64_t v25 = v1316;
    }
    while (v1309 != 7);
    uint64_t v3 = v1218 + 1;
  }
  while (v1218 != 31);
  unint64_t v337 = v1330[3];
  unint64_t v336 = v1330[4];
  uint64_t v338 = 19 * v336;
  uint64_t v340 = *v1330;
  unint64_t v339 = v1330[1];
  unint64_t v341 = v1330[2];
  uint64_t v342 = 2 * *v1330;
  uint64_t v1305 = *v1335;
  unint64_t v1308 = v1335[1];
  uint64_t v343 = v339 * v339;
  uint64_t v344 = 38 * v336;
  uint64_t v345 = (__int128)(v337 * (unsigned __int128)(38 * v341)
                  + (unint64_t)v340 * (unsigned __int128)(unint64_t)v340
                  + 38 * v336 * (unsigned __int128)v339) >> 51;
  uint64_t v1260 = 19 * v337;
  uint64_t v346 = v342 * v339;
  uint64_t v347 = (19 * v337 * (unsigned __int128)v337
        + v339 * (unsigned __int128)(unint64_t)v342
        + 38 * v336 * (unsigned __int128)v341) >> 64;
  uint64_t v348 = 19 * v337 * v337 + v339 * v342 + 38 * v336 * v341;
  if (__CFADD__(v348, v345)) {
    ++v347;
  }
  *((void *)&v350 + 1) = v347;
  *(void *)&long long v350 = v348 + v345;
  uint64_t v349 = v350 >> 51;
  uint64_t v351 = v342 * v341;
  unint64_t v352 = ((unint64_t)v344 * (unsigned __int128)v337) >> 64;
  uint64_t v353 = v344 * v337;
  uint64_t v354 = (v341 * (unsigned __int128)(unint64_t)v342 + v339 * (unsigned __int128)v339 + __PAIR128__(v352, v353)) >> 64;
  if (__CFADD__(v342 * v341 + v343 + v353, v349)) {
    ++v354;
  }
  *((void *)&v356 + 1) = v354;
  *(void *)&long long v356 = v341 * v342 + v339 * v339 + v353 + v349;
  uint64_t v355 = v356 >> 51;
  unsigned long long v357 = v337 * (unsigned __int128)(unint64_t)v342 + v341 * (unsigned __int128)(2 * v339);
  uint64_t v1310 = 19 * v336;
  unsigned long long v360 = v357 + 19 * v336 * (unsigned __int128)v336;
  uint64_t v358 = v360 >> 64;
  uint64_t v359 = v360;
  if (__CFADD__(v357 + v338 * v336, v355)) {
    ++v358;
  }
  unint64_t v1301 = v1335[2];
  unint64_t v1303 = v1335[3];
  *((void *)&v364 + 1) = v358;
  *(void *)&long long v364 = v359 + v355;
  uint64_t v363 = v364 >> 51;
  unsigned long long v362 = v337 * (unsigned __int128)(2 * v339)
       + v341 * (unsigned __int128)v341
       + v336 * (unsigned __int128)(unint64_t)v342;
  uint64_t v361 = *((void *)&v362 + 1);
  if (__CFADD__((void)v362, v363)) {
    uint64_t v361 = *((void *)&v362 + 1) + 1;
  }
  uint64_t v1271 = v362 + v363;
  uint64_t v1276 = v357 + v338 * v336 + v355;
  *((void *)&v365 + 1) = v361;
  *(void *)&long long v365 = v362 + v363;
  uint64_t v366 = v340 * v340 + 38 * (v337 * v341 + v336 * v339);
  uint64_t v367 = 19 * (v365 >> 51);
  uint64_t v368 = v367 + v366;
  unint64_t v369 = v367 + (v366 & 0x7FFFFFFFFFFFFLL);
  uint64_t v1349 = *v1330;
  unint64_t v1360 = v1330[2];
  uint64_t v1280 = v341 * v339 + v337 * v340;
  uint64_t v1288 = v355;
  unint64_t v1321 = v1330[1];
  unint64_t v1326 = v1330[4];
  unint64_t v1331 = v1330[3];
  uint64_t v1263 = v363;
  uint64_t v1267 = v341 * v341;
  uint64_t v1255 = v337 * v339 + v336 * v340;
  uint64_t v370 = 19 * v337 * v337 + v346 + 38 * v336 * v341 + v345;
  uint64_t v1249 = v351 + v343 + v353 + v349;
  unint64_t v1251 = (v370 & 0x7FFFFFFFFFFFFLL) + (v369 >> 51);
  uint64_t v1282 = v341 * v341 + 2 * v1255 + v363;
  uint64_t v1284 = v338 * v336 + 2 * v1280 + v355;
  uint64_t v371 = v1282 & 0x7FFFFFFFFFFFFLL;
  uint64_t v372 = v368 & 0x7FFFFFFFFFFFFLL;
  uint64_t v373 = (v370 + (v369 >> 51)) & 0x7FFFFFFFFFFFFLL;
  uint64_t v374 = (v1249 & 0x7FFFFFFFFFFFFLL) + (v1251 >> 51);
  uint64_t v375 = -2;
  uint64_t v1293 = v373;
  unint64_t v1299 = v1335[4];
  uint64_t v1336 = v1284 & 0x7FFFFFFFFFFFFLL;
  uint64_t v1342 = v368 & 0x7FFFFFFFFFFFFLL;
  uint64_t v1317 = v374;
  uint64_t v376 = v1284 & 0x7FFFFFFFFFFFFLL;
  uint64_t v1258 = v1282 & 0x7FFFFFFFFFFFFLL;
  do
  {
    uint64_t v377 = v371;
    uint64_t v378 = v376;
    uint64_t v379 = v374;
    uint64_t v380 = v373;
    unint64_t v381 = v372;
    uint64_t v382 = 2 * v372;
    uint64_t v383 = 2 * v373;
    uint64_t v384 = 38 * v374;
    uint64_t v385 = 38 * v371;
    uint64_t v386 = v372 * v372;
    unsigned long long v387 = (unint64_t)(38 * v374) * (unsigned __int128)(unint64_t)v376
         + (unint64_t)v372 * (unsigned __int128)(unint64_t)v372;
    uint64_t v1375 = 38 * v374 * v376 + v372 * v372;
    unint64_t v389 = (v387 + (unint64_t)(38 * v371) * (unsigned __int128)(unint64_t)v373) >> 64;
    unint64_t v388 = v387 + 38 * v371 * v373;
    uint64_t v390 = ((unint64_t)v382 * (unsigned __int128)(unint64_t)v373) >> 64;
    uint64_t v391 = 38 * v371 * v374;
    uint64_t v392 = 19 * v376;
    uint64_t v393 = ((unint64_t)v373 * (unsigned __int128)(unint64_t)v373) >> 64;
    uint64_t v394 = v373 * v373;
    unsigned long long v397 = (unint64_t)v374 * (unsigned __int128)(unint64_t)v382
         + (unint64_t)v373 * (unsigned __int128)(unint64_t)v373
         + (unint64_t)(38 * v371) * (unsigned __int128)(unint64_t)v376;
    uint64_t v396 = v397 >> 64;
    uint64_t v395 = v397;
    uint64_t v398 = 2 * v373 * v379;
    uint64_t v399 = ((unint64_t)v376 * (unsigned __int128)(unint64_t)v382
          + (unint64_t)(2 * v373) * (unsigned __int128)(unint64_t)v379
          + (unint64_t)(19 * v371) * (unsigned __int128)(unint64_t)v371) >> 64;
    uint64_t v400 = v376 * v382 + v398 + 19 * v371 * v371;
    uint64_t v1365 = v382 * v373;
    unsigned long long v403 = (unint64_t)(19 * v376) * (unsigned __int128)(unint64_t)v376
         + (unint64_t)v382 * (unsigned __int128)(unint64_t)v373
         + __PAIR128__(((unint64_t)v385 * (unsigned __int128)(unint64_t)v379) >> 64, v391);
    uint64_t v402 = v403 >> 64;
    uint64_t v401 = v403;
    uint64_t v404 = (__int128)__PAIR128__(v389, v388) >> 51;
    BOOL v76 = __CFADD__(v401, v404);
    uint64_t v405 = v401 + v404;
    if (v76) {
      ++v402;
    }
    *((void *)&v407 + 1) = v402;
    *(void *)&long long v407 = v405;
    uint64_t v406 = v407 >> 51;
    BOOL v76 = __CFADD__(v395, v406);
    uint64_t v408 = v395 + v406;
    if (v76) {
      ++v396;
    }
    *((void *)&v410 + 1) = v396;
    *(void *)&long long v410 = v408;
    uint64_t v409 = v410 >> 51;
    BOOL v76 = __CFADD__(v400, v409);
    uint64_t v411 = v400 + v409;
    if (v76) {
      ++v399;
    }
    uint64_t v415 = v405 & 0x7FFFFFFFFFFFFLL;
    uint64_t v416 = v408 & 0x7FFFFFFFFFFFFLL;
    *((void *)&v418 + 1) = v399;
    *(void *)&long long v418 = v411;
    uint64_t v417 = v418 >> 51;
    uint64_t v376 = v411 & 0x7FFFFFFFFFFFFLL;
    unsigned long long v414 = (unint64_t)v378 * (unsigned __int128)(unint64_t)v383
         + (unint64_t)v379 * (unsigned __int128)(unint64_t)v379
         + (unint64_t)v377 * (unsigned __int128)(unint64_t)v382;
    uint64_t v413 = v414 >> 64;
    uint64_t v412 = v414;
    if (__CFADD__(v412, v417)) {
      ++v413;
    }
    uint64_t v371 = (v412 + v417) & 0x7FFFFFFFFFFFFLL;
    *((void *)&v420 + 1) = v413;
    *(void *)&long long v420 = v412 + v417;
    uint64_t v419 = v420 >> 51;
    unint64_t v421 = 19 * v419 + (v388 & 0x7FFFFFFFFFFFFLL);
    unint64_t v422 = v415 + (v421 >> 51);
    uint64_t v372 = v421 & 0x7FFFFFFFFFFFFLL;
    uint64_t v374 = v416 + (v422 >> 51);
    uint64_t v373 = v422 & 0x7FFFFFFFFFFFFLL;
    BOOL v76 = __CFADD__(v375++, 1);
  }
  while (!v76);
  uint64_t v1242 = v379 * v379 + v383 * v378;
  uint64_t v1268 = v1267 + 2 * v1255 + v1263;
  uint64_t v1256 = v386 + v384 * v378;
  uint64_t v1264 = v1249 + (v1251 >> 51);
  unsigned long long v423 = (unint64_t)v371 * (unsigned __int128)(19 * v1321)
       + (unint64_t)v376 * (unsigned __int128)(19 * v1360)
       + (unint64_t)v372 * (unsigned __int128)(unint64_t)v1349
       + (unint64_t)v373 * (unsigned __int128)(unint64_t)v1310;
  uint64_t v1247 = 19 * v1360;
  unsigned long long v424 = (unint64_t)v371 * (unsigned __int128)(19 * v1360)
       + (unint64_t)v376 * (unsigned __int128)(unint64_t)v1260
       + (unint64_t)v372 * (unsigned __int128)v1321
       + (unint64_t)v373 * (unsigned __int128)(unint64_t)v1349
       + (unint64_t)v374 * (unsigned __int128)(unint64_t)v1310;
  uint64_t v1252 = (__int128)(v423 + (unint64_t)v374 * (unsigned __int128)(unint64_t)v1260) >> 51;
  if (__CFADD__((void)v424, v1252)) {
    uint64_t v425 = *((void *)&v424 + 1) + 1;
  }
  else {
    uint64_t v425 = ((unint64_t)v371 * (unsigned __int128)(19 * v1360)
  }
          + (unint64_t)v376 * (unsigned __int128)(unint64_t)v1260
          + (unint64_t)v372 * (unsigned __int128)v1321
          + (unint64_t)v373 * (unsigned __int128)(unint64_t)v1349
          + (unint64_t)v374 * (unsigned __int128)(unint64_t)v1310) >> 64;
  unsigned long long v426 = (unint64_t)v371 * (unsigned __int128)(unint64_t)v1260
       + (unint64_t)v376 * (unsigned __int128)(unint64_t)v1310
       + (unint64_t)v372 * (unsigned __int128)v1360
       + (unint64_t)v373 * (unsigned __int128)v1321
       + (unint64_t)v374 * (unsigned __int128)(unint64_t)v1349;
  *((void *)&v427 + 1) = v425;
  *(void *)&long long v427 = v424 + v1252;
  uint64_t v1250 = v427 >> 51;
  if (__CFADD__((void)v426, v1250)) {
    uint64_t v428 = *((void *)&v426 + 1) + 1;
  }
  else {
    uint64_t v428 = ((unint64_t)v371 * (unsigned __int128)(unint64_t)v1260
  }
          + (unint64_t)v376 * (unsigned __int128)(unint64_t)v1310
          + (unint64_t)v372 * (unsigned __int128)v1360
          + (unint64_t)v373 * (unsigned __int128)v1321
          + (unint64_t)v374 * (unsigned __int128)(unint64_t)v1349) >> 64;
  unsigned long long v429 = (unint64_t)v371 * (unsigned __int128)(unint64_t)v1310
       + (unint64_t)v376 * (unsigned __int128)(unint64_t)v1349
       + (unint64_t)v372 * (unsigned __int128)v1331
       + (unint64_t)v373 * (unsigned __int128)v1360
       + (unint64_t)v374 * (unsigned __int128)v1321;
  *((void *)&v430 + 1) = v428;
  *(void *)&long long v430 = v426 + v1250;
  uint64_t v1244 = v430 >> 51;
  uint64_t v431 = v429 + v1244;
  if (__CFADD__((void)v429, v1244)) {
    uint64_t v432 = *((void *)&v429 + 1) + 1;
  }
  else {
    uint64_t v432 = ((unint64_t)v371 * (unsigned __int128)(unint64_t)v1310
  }
          + (unint64_t)v376 * (unsigned __int128)(unint64_t)v1349
          + (unint64_t)v372 * (unsigned __int128)v1331
          + (unint64_t)v373 * (unsigned __int128)v1360
          + (unint64_t)v374 * (unsigned __int128)v1321) >> 64;
  unsigned long long v433 = (unint64_t)v371 * (unsigned __int128)(unint64_t)v1349
       + (unint64_t)v376 * (unsigned __int128)v1321
       + (unint64_t)v372 * (unsigned __int128)v1326
       + (unint64_t)v373 * (unsigned __int128)v1331
       + (unint64_t)v374 * (unsigned __int128)v1360;
  *((void *)&v434 + 1) = v432;
  *(void *)&long long v434 = v429 + v1244;
  uint64_t v1241 = v434 >> 51;
  uint64_t v435 = v433 + v1241;
  if (__CFADD__((void)v433, v1241)) {
    uint64_t v436 = *((void *)&v433 + 1) + 1;
  }
  else {
    uint64_t v436 = ((unint64_t)v371 * (unsigned __int128)(unint64_t)v1349
  }
          + (unint64_t)v376 * (unsigned __int128)v1321
          + (unint64_t)v372 * (unsigned __int128)v1326
          + (unint64_t)v373 * (unsigned __int128)v1331
          + (unint64_t)v374 * (unsigned __int128)v1360) >> 64;
  *((void *)&v437 + 1) = v436;
  *(void *)&long long v437 = v433 + v1241;
  uint64_t v1235 = v437 >> 51;
  uint64_t v438 = v435 & 0x7FFFFFFFFFFFFLL;
  uint64_t v1311 = v431 & 0x7FFFFFFFFFFFFLL;
  unint64_t v439 = ((v423 + v374 * v1260) & 0x7FFFFFFFFFFFFLL) + 19 * v1235;
  uint64_t v440 = v439 & 0x7FFFFFFFFFFFFLL;
  unint64_t v1238 = ((v424 + v1252) & 0x7FFFFFFFFFFFFLL) + (v439 >> 51);
  unint64_t v1239 = v439;
  uint64_t v441 = 19 * v1258;
  uint64_t v442 = v1238 & 0x7FFFFFFFFFFFFLL;
  unsigned long long v443 = (v435 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)(19 * v1293)
       + (v431 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)(19 * v1317)
       + (v439 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1342
       + (v1238 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)(19 * v1258);
  uint64_t v444 = ((v426 + v1250) & 0x7FFFFFFFFFFFFLL) + (v1238 >> 51);
  uint64_t v1233 = v443 + v444 * 19 * v1336;
  unsigned long long v445 = (v435 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)(19 * v1317)
       + (unint64_t)v1311 * (unsigned __int128)(unint64_t)(19 * v1336)
       + (v439 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1293
       + (v1238 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1342
       + (unint64_t)v444 * (unsigned __int128)(unint64_t)(19 * v1258);
  uint64_t v1236 = (__int128)(v443 + (unint64_t)v444 * (unsigned __int128)(unint64_t)(19 * v1336)) >> 51;
  if (__CFADD__((void)v445, v1236)) {
    uint64_t v446 = *((void *)&v445 + 1) + 1;
  }
  else {
    uint64_t v446 = ((v435 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)(19 * v1317)
  }
          + (unint64_t)v1311 * (unsigned __int128)(unint64_t)(19 * v1336)
          + (v439 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1293
          + (v1238 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1342
          + (unint64_t)v444 * (unsigned __int128)(unint64_t)(19 * v1258)) >> 64;
  uint64_t v447 = ((v426 + v1250) & 0x7FFFFFFFFFFFFLL) + (v1238 >> 51);
  unsigned long long v448 = (unint64_t)v438 * (unsigned __int128)(unint64_t)(19 * v1336)
       + (unint64_t)v1311 * (unsigned __int128)(unint64_t)v441
       + (unint64_t)v440 * (unsigned __int128)(unint64_t)v1317
       + (unint64_t)v442 * (unsigned __int128)(unint64_t)v1293
       + (unint64_t)v444 * (unsigned __int128)(unint64_t)v1342;
  *((void *)&v449 + 1) = v446;
  *(void *)&long long v449 = v445 + v1236;
  uint64_t v1246 = v449 >> 51;
  if (__CFADD__((void)v448, v1246)) {
    uint64_t v450 = *((void *)&v448 + 1) + 1;
  }
  else {
    uint64_t v450 = ((unint64_t)v438 * (unsigned __int128)(unint64_t)(19 * v1336)
  }
          + (unint64_t)v1311 * (unsigned __int128)(unint64_t)v441
          + (unint64_t)v440 * (unsigned __int128)(unint64_t)v1317
          + (unint64_t)v442 * (unsigned __int128)(unint64_t)v1293
          + (unint64_t)v444 * (unsigned __int128)(unint64_t)v1342) >> 64;
  uint64_t v451 = v1276 & 0x7FFFFFFFFFFFFLL;
  unsigned long long v452 = (unint64_t)v438 * (unsigned __int128)(unint64_t)v441
       + (unint64_t)v1311 * (unsigned __int128)(unint64_t)v1342
       + (v1276 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v440;
  *((void *)&v455 + 1) = v450;
  *(void *)&long long v455 = v448 + v1246;
  uint64_t v1277 = v455 >> 51;
  uint64_t v453 = (v452
        + (unint64_t)v442 * (unsigned __int128)(unint64_t)v1317
        + (unint64_t)v447 * (unsigned __int128)(unint64_t)v1293) >> 64;
  uint64_t v454 = v452 + v442 * v1317 + v447 * v1293;
  uint64_t v1337 = v454 + v1277;
  if (__CFADD__(v454, v1277)) {
    ++v453;
  }
  uint64_t v1230 = v453;
  uint64_t v1231 = v439 & 0x7FFFFFFFFFFFFLL;
  uint64_t v1259 = v1238 & 0x7FFFFFFFFFFFFLL;
  unsigned long long v456 = (unint64_t)v438 * (unsigned __int128)(unint64_t)v1342
       + (unint64_t)v1311 * (unsigned __int128)(unint64_t)v1293
       + (v1271 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v440
       + (unint64_t)v451 * (unsigned __int128)(unint64_t)v442
       + (unint64_t)v447 * (unsigned __int128)(unint64_t)v1317;
  uint64_t v457 = v1242 + v382 * v377 + v417;
  uint64_t v458 = v378 * v378;
  unint64_t v1318 = ((unint64_t)v378 * (unsigned __int128)(unint64_t)v378 * 0x13) >> 64;
  unint64_t v459 = v381 >> 63;
  uint64_t v460 = (__PAIR128__(v459, v382) * (unint64_t)v379) >> 64;
  unint64_t v461 = v390 + v459 * v380;
  unint64_t v1272 = ((unint64_t)v377 * (unsigned __int128)0x26uLL * (unint64_t)v378) >> 64;
  unint64_t v462 = ((unint64_t)v377 * (unsigned __int128)0x26uLL * (unint64_t)v379) >> 64;
  uint64_t v463 = ((unint64_t)v377 * (unsigned __int128)0x26uLL * (unint64_t)v380) >> 64;
  uint64_t v464 = v1256 + v385 * v380;
  uint64_t v465 = v1365 + v392 * v378 + v385 * v379;
  uint64_t v466 = v394 + v379 * v382 + v385 * v378;
  uint64_t v467 = v398 + v382 * v378;
  uint64_t v468 = 38 * v377 * v378;
  uint64_t v469 = v382 * v379;
  uint64_t v470 = 38 * v377 * v379;
  uint64_t v471 = 38 * v377 * v380;
  *((void *)&v473 + 1) = v1230;
  *(void *)&long long v473 = v1337;
  uint64_t v472 = v473 >> 51;
  if (__CFADD__((void)v456, v472)) {
    uint64_t v474 = *((void *)&v456 + 1) + 1;
  }
  else {
    uint64_t v474 = *((void *)&v456 + 1);
  }
  *((void *)&v476 + 1) = v463 + __CFADD__(v1375, v471) + *((void *)&v387 + 1);
  *(void *)&long long v476 = v1375 + v471;
  uint64_t v475 = v476 >> 51;
  uint64_t v478 = 19 * v458 + v1365 + v470;
  uint64_t v477 = (__PAIR128__(v1318, 19 * v458) + __PAIR128__(v461, v1365) + __PAIR128__(v462, v470)) >> 64;
  if (__CFADD__(v478, v475)) {
    ++v477;
  }
  *((void *)&v480 + 1) = v477;
  *(void *)&long long v480 = v478 + v475;
  uint64_t v479 = v480 >> 51;
  uint64_t v482 = v469 + v394 + v468;
  uint64_t v481 = (__PAIR128__(v393 + (unint64_t)__CFADD__(v469, v394) + v460, v469 + v394) + __PAIR128__(v1272, v468)) >> 64;
  if (__CFADD__(v482, v479)) {
    ++v481;
  }
  *((void *)&v483 + 1) = v481;
  *(void *)&long long v483 = v482 + v479;
  uint64_t v484 = v467 + 19 * v377 * v377 + (v483 >> 51);
  unint64_t v485 = 19 * v419 + (v464 & 0x7FFFFFFFFFFFFLL);
  uint64_t v486 = v465 + v475;
  unint64_t v487 = v466 + v479 + (((v486 & 0x7FFFFFFFFFFFFLL) + (v485 >> 51)) >> 51);
  uint64_t v488 = v486 + (v485 >> 51);
  uint64_t v489 = v464 + 19 * v419;
  uint64_t v490 = v484 * v1247 + v489 * v1349 + v488 * 19 * v1326 + v487 * 19 * v1331 + 19 * (v1235 + v457 * v1321);
  uint64_t v491 = v484 * 19 * v1331 + v457 * v1247 + v489 * v1321 + v488 * v1349;
  uint64_t v492 = v484 * 19 * v1326 + v457 * 19 * v1331 + v489 * v1360 + v488 * v1321 + v487 * v1349;
  uint64_t v493 = v484 * v1349;
  uint64_t v494 = v484 * v1321 + v457 * v1349 + v489 * v1326 + v488 * v1331;
  uint64_t v495 = v493 + v457 * 19 * v1326 + v489 * v1331 + v488 * v1360 + v487 * v1321;
  unint64_t v496 = v494 + v487 * v1360;
  unint64_t v497 = v491 + v487 * 19 * v1326;
  uint64_t v498 = 19 * v1326 * v1326 + 2 * v1280 + v1288;
  unint64_t v499 = v497 + v1252 + (v1239 >> 51);
  unint64_t v500 = v492 + v1250 + (v1238 >> 51);
  uint64_t v1372 = v456 + v472;
  *((void *)&v483 + 1) = v474;
  *(void *)&long long v483 = v456 + v472;
  uint64_t v501 = v483 >> 51;
  unint64_t v502 = (v1233 & 0x7FFFFFFFFFFFFLL) + 19 * v501;
  unint64_t v503 = ((v445 + v1236) & 0x7FFFFFFFFFFFFLL) + (v502 >> 51);
  uint64_t v504 = ((v448 + v1246) & 0x7FFFFFFFFFFFFLL) + (v503 >> 51);
  uint64_t v505 = v496 + v1241;
  uint64_t v1350 = (v495 + v1244) * v1293 + v505 * v1342 + v490 * v1268 + v499 * v498 + v500 * v1264 + v472;
  uint64_t v506 = (v495 + v1244) * v1342 + v505 * 19 * v1282 + v490 * v498 + v499 * v1264 + v500 * v1293 + v1277;
  uint64_t v507 = (v495 + v1244) * 19 * v1264 + v490 * v1342 + v499 * 19 * v1282 + v500 * 19 * v1284 + 19 * (v501 + v505 * v1293);
  unint64_t v1361 = v502;
  uint64_t v508 = (v495 + v1244) * 19 * v1284
       + v505 * 19 * v1264
       + v490 * v1293
       + v499 * v1342
       + v500 * 19 * v1282
       + v1236
       + (v502 >> 51);
  uint64_t v509 = 38 * (v1350 & 0x7FFFFFFFFFFFFLL);
  signed long long v510 = (unint64_t)v509 * (unsigned __int128)(v508 & 0x7FFFFFFFFFFFFLL)
       + (v507 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(v507 & 0x7FFFFFFFFFFFFLL)
       + (v506 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v504 * 0x26;
  uint64_t v511 = 2 * (v507 & 0x7FFFFFFFFFFFFLL);
  uint64_t v512 = v510 >> 51;
  unsigned long long v513 = (v508 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(v508 & 0x7FFFFFFFFFFFFLL)
       + (unint64_t)v509 * (unsigned __int128)(v506 & 0x7FFFFFFFFFFFFLL)
       + (unint64_t)v511 * (unsigned __int128)(unint64_t)v504;
  *((void *)&v483 + 1) = ((unint64_t)v511 * (unsigned __int128)(v508 & 0x7FFFFFFFFFFFFLL)
                          + (v506 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(v506 & 0x7FFFFFFFFFFFFLL) * 0x13
                          + (unint64_t)v509 * (unsigned __int128)(unint64_t)v504
                          + ((unsigned __int128)v510 >> 51)) >> 64;
  *(void *)&long long v483 = v511 * (v508 & 0x7FFFFFFFFFFFFLL)
                   + 19 * (v506 & 0x7FFFFFFFFFFFFLL) * (v506 & 0x7FFFFFFFFFFFFLL)
                   + v509 * v504
                   + v512;
  uint64_t v514 = v483 >> 51;
  uint64_t v515 = 2 * (v506 & 0x7FFFFFFFFFFFFLL);
  *((void *)&v483 + 1) = (v513 + ((unsigned __int128)v483 >> 51)) >> 64;
  *(void *)&long long v483 = v513 + v514;
  signed long long v516 = (unint64_t)v515 * (unsigned __int128)(v507 & 0x7FFFFFFFFFFFFLL)
       + (v1350 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(v1350 & 0x7FFFFFFFFFFFFLL) * 0x13
       + (v508 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v504 * 2
       + ((unsigned __int128)v483 >> 51);
  signed long long v517 = (v1350 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(v507 & 0x7FFFFFFFFFFFFLL);
  uint64_t v1376 = v504;
  *((void *)&v517 + 1) = ((unint64_t)v515 * (unsigned __int128)(v508 & 0x7FFFFFFFFFFFFLL)
                          + v517 * 2
                          + (unint64_t)v504 * (unsigned __int128)(unint64_t)v504
                          + ((unsigned __int128)v516 >> 51)) >> 64;
  *(void *)&signed long long v517 = v515 * (v508 & 0x7FFFFFFFFFFFFLL) + 2 * v517 + v504 * v504 + (v516 >> 51);
  unint64_t v1366 = v503;
  uint64_t v518 = (v495 + v1244) * 19 * v1282
       + v505 * 19 * v1284
       + v490 * v1264
       + v499 * v1293
       + v500 * v1342
       + v1246
       + (v503 >> 51);
  uint64_t v519 = v507 * v507 + v508 * 38 * v1350 + 38 * v506 * v518;
  uint64_t v520 = 19 * (v517 >> 51);
  uint64_t v521 = v520 + v519;
  uint64_t v522 = 19 * v506 * v506 + v508 * 2 * v507 + v518 * 38 * v1350 + v512;
  unint64_t v523 = v520 + (v519 & 0x7FFFFFFFFFFFFLL);
  uint64_t v524 = v522 + (v523 >> 51);
  unint64_t v525 = ((38 * v1350 * v506 + v508 * v508 + v518 * 2 * v507 + v514) & 0x7FFFFFFFFFFFFLL)
       + (((v522 & 0x7FFFFFFFFFFFFLL) + (v523 >> 51)) >> 51);
  unsigned long long v526 = (v517 & 0x7FFFFFFFFFFFFLL) * (unint64_t)(19 * v1259)
       + (v516 & 0x7FFFFFFFFFFFFLL) * (unint64_t)(19 * v447)
       + (v521 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1231
       + (v524 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)(19 * v438)
       + v525 * (unsigned __int128)(unint64_t)(19 * v1311);
  unsigned long long v527 = (v517 & 0x7FFFFFFFFFFFFLL) * (unint64_t)(19 * v447)
       + (v516 & 0x7FFFFFFFFFFFFLL) * (unint64_t)(19 * v1311)
       + (v521 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1259
       + (v524 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1231
       + v525 * (unsigned __int128)(unint64_t)(19 * v438);
  unsigned long long v528 = (v517 & 0x7FFFFFFFFFFFFLL) * (unint64_t)(19 * v1311)
       + (v516 & 0x7FFFFFFFFFFFFLL) * (unint64_t)(19 * v438)
       + (v521 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v447
       + (v524 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1259
       + v525 * (unsigned __int128)(unint64_t)v1231
       + ((v527 + (v526 >> 51)) >> 51);
  unsigned long long v529 = (v517 & 0x7FFFFFFFFFFFFLL) * (unint64_t)(19 * v438)
       + (v516 & 0x7FFFFFFFFFFFFLL) * (unint64_t)v1231
       + (unint64_t)v1311 * (unsigned __int128)(v521 & 0x7FFFFFFFFFFFFLL)
       + (v524 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v447
       + v525 * (unsigned __int128)(unint64_t)v1259
       + (v528 >> 51);
  signed long long v530 = (v517 & 0x7FFFFFFFFFFFFLL) * (unint64_t)v1231
       + (v516 & 0x7FFFFFFFFFFFFLL) * (unint64_t)v1259
       + (unint64_t)v438 * (unsigned __int128)(v521 & 0x7FFFFFFFFFFFFLL)
       + (unint64_t)v1311 * (unsigned __int128)(v524 & 0x7FFFFFFFFFFFFLL)
       + v525 * (unsigned __int128)(unint64_t)v447
       + (v529 >> 51);
  uint64_t v531 = v530 & 0x7FFFFFFFFFFFFLL;
  unint64_t v532 = (v526 & 0x7FFFFFFFFFFFFLL) + 19 * (v530 >> 51);
  uint64_t v533 = v532 & 0x7FFFFFFFFFFFFLL;
  unint64_t v534 = ((v527 + (v526 >> 51)) & 0x7FFFFFFFFFFFFLL) + (v532 >> 51);
  uint64_t v535 = v534 & 0x7FFFFFFFFFFFFLL;
  uint64_t v536 = (v528 & 0x7FFFFFFFFFFFFLL) + (v534 >> 51);
  uint64_t v537 = -5;
  uint64_t v538 = v533;
  uint64_t v539 = v535;
  uint64_t v540 = v536;
  uint64_t v1351 = v529 & 0x7FFFFFFFFFFFFLL;
  uint64_t v541 = v529 & 0x7FFFFFFFFFFFFLL;
  uint64_t v542 = v530 & 0x7FFFFFFFFFFFFLL;
  do
  {
    signed long long v543 = (unint64_t)(38 * v540) * (unsigned __int128)(unint64_t)v541
         + (unint64_t)v538 * (unsigned __int128)(unint64_t)v538
         + (unint64_t)(38 * v542) * (unsigned __int128)(unint64_t)v539;
    uint64_t v544 = ((unint64_t)(2 * v538) * (unsigned __int128)(unint64_t)v539) >> 64;
    uint64_t v545 = 2 * v538 * v539;
    unint64_t v546 = ((unint64_t)(38 * v542) * (unsigned __int128)(unint64_t)v540) >> 64;
    uint64_t v547 = 38 * v542 * v540;
    uint64_t v548 = ((unint64_t)(19 * v541) * (unsigned __int128)(unint64_t)v541) >> 64;
    uint64_t v549 = 19 * v541 * v541;
    unsigned long long v550 = (unint64_t)v540 * (unsigned __int128)(unint64_t)(2 * v538)
         + (unint64_t)v539 * (unsigned __int128)(unint64_t)v539
         + (unint64_t)(38 * v542) * (unsigned __int128)(unint64_t)v541;
    uint64_t v551 = ((unint64_t)v541 * (unsigned __int128)(unint64_t)(2 * v538)
          + (unint64_t)(2 * v539) * (unsigned __int128)(unint64_t)v540
          + (unint64_t)(19 * v542) * (unsigned __int128)(unint64_t)v542) >> 64;
    uint64_t v552 = v541 * 2 * v538 + 2 * v539 * v540 + 19 * v542 * v542;
    unint64_t v553 = ((unint64_t)v542 * (unsigned __int128)(unint64_t)(2 * v538)) >> 64;
    uint64_t v554 = v542 * 2 * v538;
    unint64_t v555 = ((unint64_t)v541 * (unsigned __int128)(unint64_t)(2 * v539)) >> 64;
    uint64_t v556 = v541 * 2 * v539;
    uint64_t v557 = v543 >> 51;
    unint64_t v558 = ((unint64_t)v540 * (unsigned __int128)(unint64_t)v540) >> 64;
    uint64_t v560 = v549 + v545 + v547;
    uint64_t v559 = (__PAIR128__(v544 + (unint64_t)__CFADD__(v549, v545) + v548, v549 + v545) + __PAIR128__(v546, v547)) >> 64;
    uint64_t v561 = v540 * v540;
    BOOL v76 = __CFADD__(v560, v557);
    uint64_t v562 = v560 + v557;
    if (v76) {
      ++v559;
    }
    uint64_t v563 = v562 & 0x7FFFFFFFFFFFFLL;
    *((void *)&v565 + 1) = v559;
    *(void *)&long long v565 = v562;
    uint64_t v564 = v565 >> 51;
    BOOL v76 = __CFADD__((void)v550, v564);
    uint64_t v566 = v550 + v564;
    if (v76) {
      uint64_t v567 = *((void *)&v550 + 1) + 1;
    }
    else {
      uint64_t v567 = *((void *)&v550 + 1);
    }
    uint64_t v568 = v566 & 0x7FFFFFFFFFFFFLL;
    *((void *)&v570 + 1) = v567;
    *(void *)&long long v570 = v566;
    uint64_t v569 = v570 >> 51;
    BOOL v76 = __CFADD__(v552, v569);
    uint64_t v571 = v552 + v569;
    if (v76) {
      ++v551;
    }
    uint64_t v541 = v571 & 0x7FFFFFFFFFFFFLL;
    *((void *)&v573 + 1) = v551;
    *(void *)&long long v573 = v571;
    uint64_t v572 = v573 >> 51;
    uint64_t v575 = v556 + v561 + v554;
    uint64_t v574 = (__PAIR128__(v555, v556) + __PAIR128__(v558, v561) + __PAIR128__(v553, v554)) >> 64;
    if (__CFADD__(v575, v572)) {
      ++v574;
    }
    uint64_t v542 = (v575 + v572) & 0x7FFFFFFFFFFFFLL;
    *((void *)&v576 + 1) = v574;
    *(void *)&long long v576 = v575 + v572;
    unint64_t v577 = (v543 & 0x7FFFFFFFFFFFFLL) + 19 * (v576 >> 51);
    uint64_t v538 = v577 & 0x7FFFFFFFFFFFFLL;
    unint64_t v578 = v563 + (v577 >> 51);
    uint64_t v539 = v578 & 0x7FFFFFFFFFFFFLL;
    uint64_t v540 = v568 + (v578 >> 51);
    BOOL v76 = __CFADD__(v537++, 1);
  }
  while (!v76);
  uint64_t v579 = 19 * v531;
  uint64_t v581 = ((unint64_t)v542 * (unsigned __int128)(unint64_t)(19 * v536)
        + (unint64_t)v541 * (unsigned __int128)(unint64_t)(19 * v1351)
        + (unint64_t)v538 * (unsigned __int128)(unint64_t)v535
        + (unint64_t)v539 * (unsigned __int128)(unint64_t)v533
        + (unint64_t)v540 * (unsigned __int128)(unint64_t)(19 * v531)) >> 64;
  uint64_t v580 = v542 * 19 * v536 + v541 * 19 * v1351 + v538 * v535 + v539 * v533 + v540 * 19 * v531;
  uint64_t v582 = (__int128)((unint64_t)v542 * (unsigned __int128)(unint64_t)(19 * v535)
                  + (unint64_t)v541 * (unsigned __int128)(unint64_t)(19 * v536)
                  + (unint64_t)v538 * (unsigned __int128)(unint64_t)v533
                  + (unint64_t)v539 * (unsigned __int128)(unint64_t)(19 * v531)
                  + (unint64_t)v540 * (unsigned __int128)(unint64_t)(19 * v1351)) >> 51;
  BOOL v76 = __CFADD__(v580, v582);
  uint64_t v583 = v580 + v582;
  if (v76) {
    ++v581;
  }
  uint64_t v584 = ((unint64_t)v542 * (unsigned __int128)(unint64_t)(19 * v1351)
        + (unint64_t)v541 * (unsigned __int128)(unint64_t)v579
        + (unint64_t)v538 * (unsigned __int128)(unint64_t)v536
        + (unint64_t)v539 * (unsigned __int128)(unint64_t)v535
        + (unint64_t)v540 * (unsigned __int128)(unint64_t)v533) >> 64;
  uint64_t v585 = v542 * 19 * v1351 + v541 * v579 + v538 * v536 + v539 * v535 + v540 * v533;
  *((void *)&v587 + 1) = v581;
  *(void *)&long long v587 = v583;
  uint64_t v586 = v587 >> 51;
  BOOL v76 = __CFADD__(v585, v586);
  uint64_t v588 = v585 + v586;
  if (v76) {
    ++v584;
  }
  *((void *)&v590 + 1) = v584;
  *(void *)&long long v590 = v588;
  uint64_t v589 = v590 >> 51;
  unsigned long long v591 = (unint64_t)v542 * (unsigned __int128)(unint64_t)v579
       + (unint64_t)v541 * (unsigned __int128)(unint64_t)v533
       + (v529 & 0x7FFFFFFFFFFFFLL) * (unint64_t)v538
       + (unint64_t)v539 * (unsigned __int128)(unint64_t)v536
       + (unint64_t)v540 * (unsigned __int128)(unint64_t)v535;
  uint64_t v592 = v591 + v589;
  if (__CFADD__((void)v591, v589)) {
    uint64_t v593 = *((void *)&v591 + 1) + 1;
  }
  else {
    uint64_t v593 = ((unint64_t)v542 * (unsigned __int128)(unint64_t)v579
  }
          + (unint64_t)v541 * (unsigned __int128)(unint64_t)v533
          + (v529 & 0x7FFFFFFFFFFFFLL) * (unint64_t)v538
          + (unint64_t)v539 * (unsigned __int128)(unint64_t)v536
          + (unint64_t)v540 * (unsigned __int128)(unint64_t)v535) >> 64;
  uint64_t v594 = (v542 * 19 * v535 + v541 * 19 * v536 + v538 * v533 + v539 * 19 * v531 + v540 * 19 * v1351) & 0x7FFFFFFFFFFFFLL;
  uint64_t v595 = v583 & 0x7FFFFFFFFFFFFLL;
  uint64_t v596 = v588 & 0x7FFFFFFFFFFFFLL;
  *((void *)&v599 + 1) = v593;
  *(void *)&long long v599 = v591 + v589;
  uint64_t v598 = v599 >> 51;
  unsigned long long v597 = (unint64_t)v542 * (unsigned __int128)(unint64_t)v533
       + (unint64_t)v541 * (unsigned __int128)(unint64_t)v535
       + (v530 & 0x7FFFFFFFFFFFFLL) * (unint64_t)v538;
  unsigned long long v601 = v597
       + (v529 & 0x7FFFFFFFFFFFFLL) * (unint64_t)v539
       + (unint64_t)v540 * (unsigned __int128)(unint64_t)v536;
  uint64_t v600 = *((void *)&v601 + 1);
  uint64_t v602 = v601 + v598;
  if (__CFADD__((void)v601, v598)) {
    uint64_t v600 = *((void *)&v601 + 1) + 1;
  }
  *((void *)&v603 + 1) = v600;
  *(void *)&long long v603 = v601 + v598;
  unint64_t v604 = v594 + 19 * (v603 >> 51);
  uint64_t v605 = v604 & 0x7FFFFFFFFFFFFLL;
  unint64_t v606 = v595 + (v604 >> 51);
  uint64_t v607 = v606 & 0x7FFFFFFFFFFFFLL;
  uint64_t v608 = v596 + (v606 >> 51);
  uint64_t v609 = -10;
  uint64_t v610 = v605;
  uint64_t v611 = v606 & 0x7FFFFFFFFFFFFLL;
  uint64_t v612 = v608;
  uint64_t v1352 = v592 & 0x7FFFFFFFFFFFFLL;
  uint64_t v613 = v592 & 0x7FFFFFFFFFFFFLL;
  uint64_t v614 = v602 & 0x7FFFFFFFFFFFFLL;
  do
  {
    signed long long v615 = (unint64_t)(38 * v612) * (unsigned __int128)(unint64_t)v613
         + (unint64_t)v610 * (unsigned __int128)(unint64_t)v610
         + (unint64_t)(38 * v614) * (unsigned __int128)(unint64_t)v611;
    unint64_t v616 = ((unint64_t)(38 * v614) * (unsigned __int128)(unint64_t)v612) >> 64;
    uint64_t v617 = 38 * v614 * v612;
    uint64_t v618 = ((unint64_t)(19 * v613) * (unsigned __int128)(unint64_t)v613) >> 64;
    uint64_t v619 = 19 * v613 * v613;
    unsigned long long v620 = (unint64_t)v612 * (unsigned __int128)(unint64_t)(2 * v610)
         + (unint64_t)v611 * (unsigned __int128)(unint64_t)v611
         + (unint64_t)(38 * v614) * (unsigned __int128)(unint64_t)v613;
    uint64_t v621 = ((unint64_t)v613 * (unsigned __int128)(unint64_t)(2 * v610)
          + (unint64_t)(2 * v611) * (unsigned __int128)(unint64_t)v612
          + (unint64_t)(19 * v614) * (unsigned __int128)(unint64_t)v614) >> 64;
    uint64_t v622 = v613 * 2 * v610 + 2 * v611 * v612 + 19 * v614 * v614;
    unint64_t v623 = ((unint64_t)v614 * (unsigned __int128)(unint64_t)(2 * v610)) >> 64;
    uint64_t v624 = v614 * 2 * v610;
    unint64_t v625 = ((unint64_t)v613 * (unsigned __int128)(unint64_t)(2 * v611)) >> 64;
    uint64_t v626 = v613 * 2 * v611;
    uint64_t v627 = v615 >> 51;
    unint64_t v628 = ((unint64_t)v612 * (unsigned __int128)(unint64_t)v612) >> 64;
    uint64_t v630 = v619 + 2 * v610 * v611 + v617;
    uint64_t v629 = (__PAIR128__((((unint64_t)(2 * v610) * (unsigned __int128)(unint64_t)v611) >> 64)+ __CFADD__(v619, 2 * v610 * v611)+ v618, v619 + 2 * v610 * v611)+ __PAIR128__(v616, v617)) >> 64;
    uint64_t v631 = v612 * v612;
    BOOL v76 = __CFADD__(v630, v627);
    uint64_t v632 = v630 + v627;
    if (v76) {
      ++v629;
    }
    uint64_t v633 = v632 & 0x7FFFFFFFFFFFFLL;
    *((void *)&v635 + 1) = v629;
    *(void *)&long long v635 = v632;
    uint64_t v634 = v635 >> 51;
    BOOL v76 = __CFADD__((void)v620, v634);
    uint64_t v636 = v620 + v634;
    if (v76) {
      uint64_t v637 = *((void *)&v620 + 1) + 1;
    }
    else {
      uint64_t v637 = *((void *)&v620 + 1);
    }
    uint64_t v638 = v636 & 0x7FFFFFFFFFFFFLL;
    *((void *)&v640 + 1) = v637;
    *(void *)&long long v640 = v636;
    uint64_t v639 = v640 >> 51;
    BOOL v76 = __CFADD__(v622, v639);
    uint64_t v641 = v622 + v639;
    if (v76) {
      ++v621;
    }
    uint64_t v613 = v641 & 0x7FFFFFFFFFFFFLL;
    *((void *)&v643 + 1) = v621;
    *(void *)&long long v643 = v641;
    uint64_t v642 = v643 >> 51;
    unsigned long long v644 = __PAIR128__(v625, v626) + __PAIR128__(v628, v631) + __PAIR128__(v623, v624);
    if (__CFADD__((void)v644, v642)) {
      uint64_t v645 = *((void *)&v644 + 1) + 1;
    }
    else {
      uint64_t v645 = (__PAIR128__(v625, v626) + __PAIR128__(v628, v631) + __PAIR128__(v623, v624)) >> 64;
    }
    uint64_t v614 = (v644 + v642) & 0x7FFFFFFFFFFFFLL;
    *((void *)&v646 + 1) = v645;
    *(void *)&long long v646 = v644 + v642;
    unint64_t v647 = (v615 & 0x7FFFFFFFFFFFFLL) + 19 * (v646 >> 51);
    uint64_t v610 = v647 & 0x7FFFFFFFFFFFFLL;
    unint64_t v648 = v633 + (v647 >> 51);
    uint64_t v611 = v648 & 0x7FFFFFFFFFFFFLL;
    uint64_t v612 = v638 + (v648 >> 51);
    BOOL v76 = __CFADD__(v609++, 1);
  }
  while (!v76);
  uint64_t v649 = 19 * (v602 & 0x7FFFFFFFFFFFFLL);
  uint64_t v1327 = 19 * v608;
  uint64_t v650 = ((unint64_t)v597 * (unsigned __int128)(unint64_t)(19 * v608)
        + (unint64_t)v613 * (unsigned __int128)(unint64_t)(19 * v1352)
        + (unint64_t)v610 * (unsigned __int128)(unint64_t)v607
        + (unint64_t)v611 * (unsigned __int128)(unint64_t)v605
        + (unint64_t)v612 * (unsigned __int128)(unint64_t)v649) >> 64;
  uint64_t v651 = v597 * 19 * v608 + v613 * 19 * v1352 + v610 * v607 + v611 * v605 + v612 * v649;
  uint64_t v652 = (__int128)((unint64_t)v597 * (unsigned __int128)(unint64_t)(19 * v607)
                  + (unint64_t)v613 * (unsigned __int128)(unint64_t)(19 * v608)
                  + (unint64_t)v610 * (unsigned __int128)(unint64_t)v605
                  + (unint64_t)v611 * (unsigned __int128)(unint64_t)v649
                  + (unint64_t)v612 * (unsigned __int128)(unint64_t)(19 * v1352)) >> 51;
  BOOL v76 = __CFADD__(v651, v652);
  uint64_t v653 = v651 + v652;
  if (v76) {
    ++v650;
  }
  uint64_t v1343 = 19 * v1352;
  uint64_t v654 = v613 * v605;
  uint64_t v655 = v592 & 0x7FFFFFFFFFFFFLL;
  uint64_t v656 = ((v592 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v610) >> 64;
  unsigned long long v657 = (unint64_t)v614 * (unsigned __int128)(unint64_t)(19 * v1352)
       + (unint64_t)v613 * (unsigned __int128)(unint64_t)v649
       + (unint64_t)v610 * (unsigned __int128)(unint64_t)v608
       + (unint64_t)v611 * (unsigned __int128)(unint64_t)v607
       + (unint64_t)v612 * (unsigned __int128)(unint64_t)v605;
  uint64_t v658 = (v592 & 0x7FFFFFFFFFFFFLL) * v610;
  *((void *)&v660 + 1) = v650;
  *(void *)&long long v660 = v653;
  uint64_t v659 = v660 >> 51;
  BOOL v76 = __CFADD__((void)v657, v659);
  uint64_t v661 = v657 + v659;
  uint64_t v662 = v614 * v649;
  if (v76) {
    uint64_t v663 = *((void *)&v657 + 1) + 1;
  }
  else {
    uint64_t v663 = ((unint64_t)v614 * (unsigned __int128)(unint64_t)(19 * v1352)
  }
          + (unint64_t)v613 * (unsigned __int128)(unint64_t)v649
          + (unint64_t)v610 * (unsigned __int128)(unint64_t)v608
          + (unint64_t)v611 * (unsigned __int128)(unint64_t)v607
          + (unint64_t)v612 * (unsigned __int128)(unint64_t)v605) >> 64;
  BOOL v76 = __CFADD__(v662, v654);
  uint64_t v664 = v662 + v654;
  uint64_t v665 = v602 & 0x7FFFFFFFFFFFFLL;
  uint64_t v666 = (v597 * 19 * v607 + v613 * 19 * v608 + v610 * v605 + v611 * v649 + v612 * 19 * v1352) & 0x7FFFFFFFFFFFFLL;
  unint64_t v667 = v664 + v658;
  uint64_t v668 = v653 & 0x7FFFFFFFFFFFFLL;
  unint64_t v669 = v656
       + __CFADD__(v664, v658)
       + (((unint64_t)v613 * (unsigned __int128)(unint64_t)v605) >> 64)
       + v76
       + (((unint64_t)v597 * (unsigned __int128)(unint64_t)v649) >> 64);
  *((void *)&v671 + 1) = v663;
  *(void *)&long long v671 = v661;
  uint64_t v670 = v671 >> 51;
  uint64_t v672 = v661 & 0x7FFFFFFFFFFFFLL;
  unsigned long long v673 = __PAIR128__(v669, v667)
       + (unint64_t)v611 * (unsigned __int128)(unint64_t)v608
       + (unint64_t)v612 * (unsigned __int128)(unint64_t)v607;
  uint64_t v674 = v673 + v670;
  if (__CFADD__((void)v673, v670)) {
    uint64_t v675 = *((void *)&v673 + 1) + 1;
  }
  else {
    uint64_t v675 = *((void *)&v673 + 1);
  }
  uint64_t v1294 = v673 + v670;
  *((void *)&v677 + 1) = v675;
  *(void *)&long long v677 = v673 + v670;
  uint64_t v676 = v677 >> 51;
  uint64_t v1322 = v665;
  uint64_t v1332 = v655;
  uint64_t v1353 = v608;
  unsigned long long v679 = (unint64_t)v614 * (unsigned __int128)(unint64_t)v605
       + (unint64_t)v613 * (unsigned __int128)(unint64_t)v607
       + (unint64_t)v665 * (unsigned __int128)(unint64_t)v610
       + (unint64_t)v655 * (unsigned __int128)(unint64_t)v611
       + (unint64_t)v612 * (unsigned __int128)(unint64_t)v608;
  uint64_t v678 = *((void *)&v679 + 1);
  BOOL v76 = __CFADD__((void)v679, v676);
  uint64_t v680 = v679 + v676;
  if (v76) {
    uint64_t v678 = *((void *)&v679 + 1) + 1;
  }
  uint64_t v681 = v680 & 0x7FFFFFFFFFFFFLL;
  uint64_t v1312 = v680;
  *((void *)&v682 + 1) = v678;
  *(void *)&long long v682 = v680;
  unint64_t v683 = v666 + 19 * (v682 >> 51);
  uint64_t v684 = v683 & 0x7FFFFFFFFFFFFLL;
  unint64_t v685 = v668 + (v683 >> 51);
  uint64_t v686 = v685 & 0x7FFFFFFFFFFFFLL;
  uint64_t v687 = v672 + (v685 >> 51);
  uint64_t v688 = -20;
  uint64_t v689 = v684;
  uint64_t v690 = v686;
  uint64_t v691 = v687;
  uint64_t v1285 = v680 & 0x7FFFFFFFFFFFFLL;
  uint64_t v1289 = v674 & 0x7FFFFFFFFFFFFLL;
  uint64_t v692 = v674 & 0x7FFFFFFFFFFFFLL;
  do
  {
    uint64_t v693 = 2 * v689;
    signed long long v694 = (unint64_t)(38 * v691) * (unsigned __int128)(unint64_t)v692
         + (unint64_t)v689 * (unsigned __int128)(unint64_t)v689
         + (unint64_t)(38 * v681) * (unsigned __int128)(unint64_t)v690;
    unint64_t v695 = ((unint64_t)(2 * v689) * (unsigned __int128)(unint64_t)v690) >> 64;
    uint64_t v696 = 2 * v689 * v690;
    unint64_t v697 = ((unint64_t)(38 * v681) * (unsigned __int128)(unint64_t)v691) >> 64;
    uint64_t v698 = 38 * v681 * v691;
    unsigned long long v699 = (unint64_t)v691 * (unsigned __int128)(unint64_t)v693
         + (unint64_t)v690 * (unsigned __int128)(unint64_t)v690
         + (unint64_t)(38 * v681) * (unsigned __int128)(unint64_t)v692;
    unsigned long long v700 = (unint64_t)v692 * (unsigned __int128)(unint64_t)v693
         + (unint64_t)(2 * v690) * (unsigned __int128)(unint64_t)v691
         + (unint64_t)(19 * v681) * (unsigned __int128)(unint64_t)v681;
    unint64_t v701 = ((unint64_t)v681 * (unsigned __int128)(unint64_t)v693) >> 64;
    uint64_t v702 = v681 * v693;
    unint64_t v703 = ((unint64_t)v692 * (unsigned __int128)(unint64_t)(2 * v690)) >> 64;
    uint64_t v704 = v692 * 2 * v690;
    uint64_t v705 = v694 >> 51;
    uint64_t v707 = ((unint64_t)(19 * v692) * (unsigned __int128)(unint64_t)v692
          + __PAIR128__(v695, v696)
          + __PAIR128__(v697, v698)) >> 64;
    uint64_t v706 = 19 * v692 * v692 + v696 + v698;
    BOOL v76 = __CFADD__(v706, v705);
    uint64_t v708 = v706 + v705;
    if (v76) {
      ++v707;
    }
    uint64_t v709 = v708 & 0x7FFFFFFFFFFFFLL;
    *((void *)&v711 + 1) = v707;
    *(void *)&long long v711 = v708;
    uint64_t v710 = v711 >> 51;
    BOOL v76 = __CFADD__((void)v699, v710);
    uint64_t v712 = v699 + v710;
    if (v76) {
      uint64_t v713 = *((void *)&v699 + 1) + 1;
    }
    else {
      uint64_t v713 = *((void *)&v699 + 1);
    }
    uint64_t v714 = v712 & 0x7FFFFFFFFFFFFLL;
    *((void *)&v716 + 1) = v713;
    *(void *)&long long v716 = v712;
    uint64_t v715 = v716 >> 51;
    BOOL v76 = __CFADD__((void)v700, v715);
    uint64_t v717 = v700 + v715;
    if (v76) {
      uint64_t v718 = *((void *)&v700 + 1) + 1;
    }
    else {
      uint64_t v718 = *((void *)&v700 + 1);
    }
    uint64_t v692 = v717 & 0x7FFFFFFFFFFFFLL;
    *((void *)&v720 + 1) = v718;
    *(void *)&long long v720 = v717;
    uint64_t v719 = v720 >> 51;
    unsigned long long v721 = __PAIR128__(v703, v704)
         + (unint64_t)v691 * (unsigned __int128)(unint64_t)v691
         + __PAIR128__(v701, v702);
    BOOL v76 = __CFADD__((void)v721, v719);
    uint64_t v722 = v721 + v719;
    if (v76) {
      uint64_t v723 = *((void *)&v721 + 1) + 1;
    }
    else {
      uint64_t v723 = (__PAIR128__(v703, v704)
    }
            + (unint64_t)v691 * (unsigned __int128)(unint64_t)v691
            + __PAIR128__(v701, v702)) >> 64;
    uint64_t v681 = v722 & 0x7FFFFFFFFFFFFLL;
    *((void *)&v724 + 1) = v723;
    *(void *)&long long v724 = v722;
    unint64_t v725 = (v694 & 0x7FFFFFFFFFFFFLL) + 19 * (v724 >> 51);
    uint64_t v689 = v725 & 0x7FFFFFFFFFFFFLL;
    unint64_t v726 = v709 + (v725 >> 51);
    uint64_t v690 = v726 & 0x7FFFFFFFFFFFFLL;
    uint64_t v691 = v714 + (v726 >> 51);
    BOOL v76 = __CFADD__(v688++, 1);
  }
  while (!v76);
  uint64_t v727 = v681 * 19 * v686 + v692 * 19 * v687 + v689 * v684 + v690 * 19 * v1285 + v691 * 19 * v1289;
  uint64_t v728 = ((unint64_t)v681 * (unsigned __int128)(unint64_t)(19 * v687)
        + (unint64_t)v692 * (unsigned __int128)(unint64_t)(19 * v1289)
        + (unint64_t)v689 * (unsigned __int128)(unint64_t)v686
        + (unint64_t)v690 * (unsigned __int128)(unint64_t)v684
        + (unint64_t)v691 * (unsigned __int128)(unint64_t)(19 * v1285)) >> 64;
  uint64_t v729 = v681 * 19 * v687 + v692 * 19 * v1289 + v689 * v686 + v690 * v684 + v691 * 19 * v1285;
  uint64_t v730 = (__int128)((unint64_t)v681 * (unsigned __int128)(unint64_t)(19 * v686)
                  + (unint64_t)v692 * (unsigned __int128)(unint64_t)(19 * v687)
                  + (unint64_t)v689 * (unsigned __int128)(unint64_t)v684
                  + (unint64_t)v690 * (unsigned __int128)(unint64_t)(19 * v1285)
                  + (unint64_t)v691 * (unsigned __int128)(unint64_t)(19 * v1289)) >> 51;
  BOOL v76 = __CFADD__(v729, v730);
  uint64_t v731 = v729 + v730;
  if (v76) {
    ++v728;
  }
  *((void *)&v733 + 1) = v728;
  *(void *)&long long v733 = v731;
  uint64_t v732 = v733 >> 51;
  uint64_t v735 = ((unint64_t)v681 * (unsigned __int128)(unint64_t)(19 * v1289)
        + (unint64_t)v692 * (unsigned __int128)(unint64_t)(19 * v1285)
        + (unint64_t)v689 * (unsigned __int128)(unint64_t)v687
        + (unint64_t)v690 * (unsigned __int128)(unint64_t)v686
        + (unint64_t)v691 * (unsigned __int128)(unint64_t)v684) >> 64;
  uint64_t v734 = v681 * 19 * v1289 + v692 * 19 * v1285 + v689 * v687 + v690 * v686 + v691 * v684;
  BOOL v76 = __CFADD__(v734, v732);
  uint64_t v736 = v734 + v732;
  if (v76) {
    ++v735;
  }
  unsigned long long v737 = (unint64_t)v681 * (unsigned __int128)(unint64_t)(19 * v1285)
       + (unint64_t)v692 * (unsigned __int128)(unint64_t)v684
       + (v1294 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v689
       + (unint64_t)v690 * (unsigned __int128)(unint64_t)v687
       + (unint64_t)v691 * (unsigned __int128)(unint64_t)v686;
  *((void *)&v739 + 1) = v735;
  *(void *)&long long v739 = v736;
  uint64_t v738 = v739 >> 51;
  uint64_t v740 = v737 + v738;
  if (__CFADD__((void)v737, v738)) {
    uint64_t v741 = *((void *)&v737 + 1) + 1;
  }
  else {
    uint64_t v741 = ((unint64_t)v681 * (unsigned __int128)(unint64_t)(19 * v1285)
  }
          + (unint64_t)v692 * (unsigned __int128)(unint64_t)v684
          + (v1294 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v689
          + (unint64_t)v690 * (unsigned __int128)(unint64_t)v687
          + (unint64_t)v691 * (unsigned __int128)(unint64_t)v686) >> 64;
  unsigned long long v743 = (unint64_t)v681 * (unsigned __int128)(unint64_t)v684
       + (unint64_t)v692 * (unsigned __int128)(unint64_t)v686
       + (v1312 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v689
       + (v1294 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v690
       + (unint64_t)v691 * (unsigned __int128)(unint64_t)v687;
  uint64_t v742 = *((void *)&v743 + 1);
  uint64_t v744 = v731 & 0x7FFFFFFFFFFFFLL;
  *((void *)&v746 + 1) = v741;
  *(void *)&long long v746 = v740;
  uint64_t v745 = v746 >> 51;
  uint64_t v747 = v736 & 0x7FFFFFFFFFFFFLL;
  uint64_t v748 = v743 + v745;
  if (__CFADD__((void)v743, v745)) {
    uint64_t v742 = *((void *)&v743 + 1) + 1;
  }
  *((void *)&v749 + 1) = v742;
  *(void *)&long long v749 = v743 + v745;
  unint64_t v750 = (v727 & 0x7FFFFFFFFFFFFLL) + 19 * (v749 >> 51);
  uint64_t v751 = v750 & 0x7FFFFFFFFFFFFLL;
  unint64_t v752 = v744 + (v750 >> 51);
  uint64_t v753 = v752 & 0x7FFFFFFFFFFFFLL;
  uint64_t v754 = v747 + (v752 >> 51);
  uint64_t v755 = -10;
  do
  {
    uint64_t v756 = v748 & 0x7FFFFFFFFFFFFLL;
    uint64_t v757 = v740 & 0x7FFFFFFFFFFFFLL;
    uint64_t v758 = 19 * (v748 & 0x7FFFFFFFFFFFFLL);
    uint64_t v759 = 38 * (v748 & 0x7FFFFFFFFFFFFLL);
    signed long long v760 = (v740 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)(38 * v754)
         + (unint64_t)v751 * (unsigned __int128)(unint64_t)v751
         + (unint64_t)v759 * (unsigned __int128)(unint64_t)v753;
    uint64_t v761 = ((unint64_t)(2 * v751) * (unsigned __int128)(unint64_t)v753) >> 64;
    uint64_t v762 = 2 * v751 * v753;
    unint64_t v763 = ((unint64_t)v759 * (unsigned __int128)(unint64_t)v754) >> 64;
    uint64_t v764 = v759 * v754;
    uint64_t v765 = 19 * (v740 & 0x7FFFFFFFFFFFFLL);
    uint64_t v766 = ((unint64_t)v765 * (unsigned __int128)(v740 & 0x7FFFFFFFFFFFFLL)) >> 64;
    uint64_t v767 = v765 * v757;
    unsigned long long v768 = (unint64_t)v754 * (unsigned __int128)(unint64_t)(2 * v751)
         + (unint64_t)v753 * (unsigned __int128)(unint64_t)v753
         + (unint64_t)v759 * (unsigned __int128)(unint64_t)v757;
    unsigned long long v769 = (unint64_t)v757 * (unsigned __int128)(unint64_t)(2 * v751)
         + (unint64_t)(2 * v753) * (unsigned __int128)(unint64_t)v754
         + (unint64_t)v758 * (unsigned __int128)(unint64_t)v756;
    unint64_t v770 = ((unint64_t)v756 * (unsigned __int128)(unint64_t)(2 * v751)) >> 64;
    uint64_t v771 = v756 * 2 * v751;
    unint64_t v772 = ((unint64_t)v757 * (unsigned __int128)(unint64_t)(2 * v753)) >> 64;
    uint64_t v773 = v757 * 2 * v753;
    unint64_t v774 = ((unint64_t)v754 * (unsigned __int128)(unint64_t)v754) >> 64;
    uint64_t v775 = v760 >> 51;
    uint64_t v776 = v754 * v754;
    BOOL v76 = __CFADD__(v767 + v762 + v764, v775);
    uint64_t v777 = v767 + v762 + v764 + v775;
    if (v76) {
      uint64_t v778 = ((__PAIR128__(v761 + (unint64_t)__CFADD__(v767, v762) + v766, v767 + v762) + __PAIR128__(v763, v764)) >> 64)
    }
           + 1;
    else {
      uint64_t v778 = (__PAIR128__(v761 + (unint64_t)__CFADD__(v767, v762) + v766, v767 + v762) + __PAIR128__(v763, v764)) >> 64;
    }
    *((void *)&v780 + 1) = v778;
    *(void *)&long long v780 = v777;
    uint64_t v779 = v780 >> 51;
    uint64_t v781 = v777 & 0x7FFFFFFFFFFFFLL;
    uint64_t v782 = v768 + v779;
    if (__CFADD__((void)v768, v779)) {
      uint64_t v783 = *((void *)&v768 + 1) + 1;
    }
    else {
      uint64_t v783 = *((void *)&v768 + 1);
    }
    uint64_t v784 = v782 & 0x7FFFFFFFFFFFFLL;
    *((void *)&v786 + 1) = v783;
    *(void *)&long long v786 = v782;
    uint64_t v785 = v786 >> 51;
    uint64_t v740 = v769 + v785;
    if (__CFADD__((void)v769, v785)) {
      uint64_t v787 = *((void *)&v769 + 1) + 1;
    }
    else {
      uint64_t v787 = *((void *)&v769 + 1);
    }
    *((void *)&v789 + 1) = v787;
    *(void *)&long long v789 = v740;
    uint64_t v788 = v789 >> 51;
    unsigned long long v790 = __PAIR128__(v772, v773) + __PAIR128__(v774, v776) + __PAIR128__(v770, v771);
    uint64_t v748 = v790 + v788;
    if (__CFADD__((void)v790, v788)) {
      uint64_t v791 = *((void *)&v790 + 1) + 1;
    }
    else {
      uint64_t v791 = (__PAIR128__(v772, v773) + __PAIR128__(v774, v776) + __PAIR128__(v770, v771)) >> 64;
    }
    *((void *)&v792 + 1) = v791;
    *(void *)&long long v792 = v790 + v788;
    unint64_t v793 = (v760 & 0x7FFFFFFFFFFFFLL) + 19 * (v792 >> 51);
    uint64_t v751 = v793 & 0x7FFFFFFFFFFFFLL;
    unint64_t v794 = v781 + (v793 >> 51);
    uint64_t v753 = v794 & 0x7FFFFFFFFFFFFLL;
    uint64_t v754 = v784 + (v794 >> 51);
    BOOL v76 = __CFADD__(v755++, 1);
  }
  while (!v76);
  uint64_t v795 = v740 & 0x7FFFFFFFFFFFFLL;
  uint64_t v796 = v748 & 0x7FFFFFFFFFFFFLL;
  signed long long v797 = (v748 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)(19 * v607)
       + (v740 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1327
       + (unint64_t)v751 * (unsigned __int128)(unint64_t)v605
       + (unint64_t)v753 * (unsigned __int128)(unint64_t)v649
       + (unint64_t)v754 * (unsigned __int128)(unint64_t)v1343;
  uint64_t v798 = ((v748 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1327
        + (v740 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1343
        + (unint64_t)v751 * (unsigned __int128)(unint64_t)v607
        + (unint64_t)v753 * (unsigned __int128)(unint64_t)v605
        + (unint64_t)v754 * (unsigned __int128)(unint64_t)v649) >> 64;
  uint64_t v799 = (v748 & 0x7FFFFFFFFFFFFLL) * v1327
       + (v740 & 0x7FFFFFFFFFFFFLL) * v1343
       + v751 * v607
       + v753 * v605
       + v754 * v649;
  uint64_t v800 = v797 >> 51;
  BOOL v76 = __CFADD__(v799, v800);
  uint64_t v801 = v799 + v800;
  if (v76) {
    ++v798;
  }
  *((void *)&v803 + 1) = v798;
  *(void *)&long long v803 = v801;
  uint64_t v802 = v803 >> 51;
  uint64_t v805 = (__PAIR128__((((unint64_t)v795 * (unsigned __int128)(unint64_t)v649) >> 64)+ __CFADD__((v748 & 0x7FFFFFFFFFFFFLL) * v1343, (v740 & 0x7FFFFFFFFFFFFLL) * v649)+ (((unint64_t)v796 * (unsigned __int128)(unint64_t)v1343) >> 64), (v748 & 0x7FFFFFFFFFFFFLL) * v1343 + (v740 & 0x7FFFFFFFFFFFFuLL) * v649)+ (unint64_t)v751 * (unsigned __int128)(unint64_t)v1353+ (unint64_t)v753 * (unsigned __int128)(unint64_t)v607+ (unint64_t)v754 * (unsigned __int128)(unint64_t)v605) >> 64;
  uint64_t v804 = (v748 & 0x7FFFFFFFFFFFFLL) * v1343
       + (v740 & 0x7FFFFFFFFFFFFLL) * v649
       + v751 * v1353
       + v753 * v607
       + v754 * v605;
  BOOL v76 = __CFADD__(v804, v802);
  uint64_t v806 = v804 + v802;
  if (v76) {
    ++v805;
  }
  *((void *)&v808 + 1) = v805;
  *(void *)&long long v808 = v806;
  uint64_t v807 = v808 >> 51;
  uint64_t v809 = v796 * v649 + v795 * v605 + v1332 * v751 + v753 * v1353 + v754 * v607;
  BOOL v76 = __CFADD__(v809, v807);
  uint64_t v810 = v809 + v807;
  if (v76) {
    uint64_t v811 = (((unint64_t)v796 * (unsigned __int128)(unint64_t)v649
  }
           + (unint64_t)v795 * (unsigned __int128)(unint64_t)v605
           + (unint64_t)v1332 * (unsigned __int128)(unint64_t)v751
           + (unint64_t)v753 * (unsigned __int128)(unint64_t)v1353
           + (unint64_t)v754 * (unsigned __int128)(unint64_t)v607) >> 64)
         + 1;
  else {
    uint64_t v811 = ((unint64_t)v796 * (unsigned __int128)(unint64_t)v649
  }
          + (unint64_t)v795 * (unsigned __int128)(unint64_t)v605
          + (unint64_t)v1332 * (unsigned __int128)(unint64_t)v751
          + (unint64_t)v753 * (unsigned __int128)(unint64_t)v1353
          + (unint64_t)v754 * (unsigned __int128)(unint64_t)v607) >> 64;
  uint64_t v812 = v801 & 0x7FFFFFFFFFFFFLL;
  uint64_t v813 = v806 & 0x7FFFFFFFFFFFFLL;
  *((void *)&v815 + 1) = v811;
  *(void *)&long long v815 = v810;
  uint64_t v814 = v815 >> 51;
  unsigned long long v817 = (unint64_t)v796 * (unsigned __int128)(unint64_t)v605
       + (unint64_t)v795 * (unsigned __int128)(unint64_t)v607
       + (unint64_t)v1322 * (unsigned __int128)(unint64_t)v751
       + (unint64_t)v1332 * (unsigned __int128)(unint64_t)v753
       + (unint64_t)v754 * (unsigned __int128)(unint64_t)v1353;
  uint64_t v816 = *((void *)&v817 + 1);
  uint64_t v818 = v817 + v814;
  if (__CFADD__((void)v817, v814)) {
    uint64_t v816 = *((void *)&v817 + 1) + 1;
  }
  *((void *)&v819 + 1) = v816;
  *(void *)&long long v819 = v817 + v814;
  unint64_t v820 = (v797 & 0x7FFFFFFFFFFFFLL) + 19 * (v819 >> 51);
  uint64_t v821 = v820 & 0x7FFFFFFFFFFFFLL;
  unint64_t v822 = v812 + (v820 >> 51);
  uint64_t v823 = v822 & 0x7FFFFFFFFFFFFLL;
  uint64_t v824 = v813 + (v822 >> 51);
  uint64_t v825 = -50;
  uint64_t v826 = v821;
  uint64_t v827 = v822 & 0x7FFFFFFFFFFFFLL;
  uint64_t v828 = v824;
  uint64_t v1354 = v810 & 0x7FFFFFFFFFFFFLL;
  uint64_t v829 = v810 & 0x7FFFFFFFFFFFFLL;
  uint64_t v830 = v818 & 0x7FFFFFFFFFFFFLL;
  do
  {
    signed long long v831 = (unint64_t)(38 * v828) * (unsigned __int128)(unint64_t)v829
         + (unint64_t)v826 * (unsigned __int128)(unint64_t)v826
         + (unint64_t)(38 * v830) * (unsigned __int128)(unint64_t)v827;
    unint64_t v832 = ((unint64_t)(38 * v830) * (unsigned __int128)(unint64_t)v828) >> 64;
    uint64_t v833 = 38 * v830 * v828;
    uint64_t v834 = ((unint64_t)(19 * v829) * (unsigned __int128)(unint64_t)v829) >> 64;
    uint64_t v835 = 19 * v829 * v829;
    unsigned long long v836 = (unint64_t)v828 * (unsigned __int128)(unint64_t)(2 * v826)
         + (unint64_t)v827 * (unsigned __int128)(unint64_t)v827
         + (unint64_t)(38 * v830) * (unsigned __int128)(unint64_t)v829;
    uint64_t v837 = ((unint64_t)v829 * (unsigned __int128)(unint64_t)(2 * v826)
          + (unint64_t)(2 * v827) * (unsigned __int128)(unint64_t)v828
          + (unint64_t)(19 * v830) * (unsigned __int128)(unint64_t)v830) >> 64;
    uint64_t v838 = v829 * 2 * v826 + 2 * v827 * v828 + 19 * v830 * v830;
    unint64_t v839 = ((unint64_t)v830 * (unsigned __int128)(unint64_t)(2 * v826)) >> 64;
    uint64_t v840 = v830 * 2 * v826;
    unint64_t v841 = ((unint64_t)v829 * (unsigned __int128)(unint64_t)(2 * v827)) >> 64;
    uint64_t v842 = v829 * 2 * v827;
    uint64_t v843 = v831 >> 51;
    unint64_t v844 = ((unint64_t)v828 * (unsigned __int128)(unint64_t)v828) >> 64;
    uint64_t v846 = v835 + 2 * v826 * v827 + v833;
    uint64_t v845 = (__PAIR128__((((unint64_t)(2 * v826) * (unsigned __int128)(unint64_t)v827) >> 64)+ __CFADD__(v835, 2 * v826 * v827)+ v834, v835 + 2 * v826 * v827)+ __PAIR128__(v832, v833)) >> 64;
    uint64_t v847 = v828 * v828;
    BOOL v76 = __CFADD__(v846, v843);
    uint64_t v848 = v846 + v843;
    if (v76) {
      ++v845;
    }
    uint64_t v849 = v848 & 0x7FFFFFFFFFFFFLL;
    *((void *)&v851 + 1) = v845;
    *(void *)&long long v851 = v848;
    uint64_t v850 = v851 >> 51;
    BOOL v76 = __CFADD__((void)v836, v850);
    uint64_t v852 = v836 + v850;
    if (v76) {
      uint64_t v853 = *((void *)&v836 + 1) + 1;
    }
    else {
      uint64_t v853 = *((void *)&v836 + 1);
    }
    uint64_t v854 = v852 & 0x7FFFFFFFFFFFFLL;
    *((void *)&v856 + 1) = v853;
    *(void *)&long long v856 = v852;
    uint64_t v855 = v856 >> 51;
    BOOL v76 = __CFADD__(v838, v855);
    uint64_t v857 = v838 + v855;
    if (v76) {
      ++v837;
    }
    uint64_t v829 = v857 & 0x7FFFFFFFFFFFFLL;
    *((void *)&v859 + 1) = v837;
    *(void *)&long long v859 = v857;
    uint64_t v858 = v859 >> 51;
    unsigned long long v860 = __PAIR128__(v841, v842) + __PAIR128__(v844, v847) + __PAIR128__(v839, v840);
    if (__CFADD__((void)v860, v858)) {
      uint64_t v861 = *((void *)&v860 + 1) + 1;
    }
    else {
      uint64_t v861 = (__PAIR128__(v841, v842) + __PAIR128__(v844, v847) + __PAIR128__(v839, v840)) >> 64;
    }
    uint64_t v830 = (v860 + v858) & 0x7FFFFFFFFFFFFLL;
    *((void *)&v862 + 1) = v861;
    *(void *)&long long v862 = v860 + v858;
    unint64_t v863 = (v831 & 0x7FFFFFFFFFFFFLL) + 19 * (v862 >> 51);
    uint64_t v826 = v863 & 0x7FFFFFFFFFFFFLL;
    unint64_t v864 = v849 + (v863 >> 51);
    uint64_t v827 = v864 & 0x7FFFFFFFFFFFFLL;
    uint64_t v828 = v854 + (v864 >> 51);
    BOOL v76 = __CFADD__(v825++, 1);
  }
  while (!v76);
  uint64_t v865 = 19 * (v818 & 0x7FFFFFFFFFFFFLL);
  uint64_t v1328 = 19 * v824;
  uint64_t v866 = ((unint64_t)v830 * (unsigned __int128)(unint64_t)(19 * v824)
        + (unint64_t)v829 * (unsigned __int128)(unint64_t)(19 * v1354)
        + (unint64_t)v826 * (unsigned __int128)(unint64_t)v823
        + (unint64_t)v827 * (unsigned __int128)(unint64_t)v821
        + (unint64_t)v828 * (unsigned __int128)(unint64_t)v865) >> 64;
  uint64_t v867 = v830 * 19 * v824 + v829 * 19 * v1354 + v826 * v823 + v827 * v821 + v828 * v865;
  uint64_t v868 = (__int128)((unint64_t)v830 * (unsigned __int128)(unint64_t)(19 * v823)
                  + (unint64_t)v829 * (unsigned __int128)(unint64_t)(19 * v824)
                  + (unint64_t)v826 * (unsigned __int128)(unint64_t)v821
                  + (unint64_t)v827 * (unsigned __int128)(unint64_t)v865
                  + (unint64_t)v828 * (unsigned __int128)(unint64_t)(19 * v1354)) >> 51;
  BOOL v76 = __CFADD__(v867, v868);
  uint64_t v869 = v867 + v868;
  if (v76) {
    ++v866;
  }
  uint64_t v1344 = 19 * v1354;
  uint64_t v870 = v829 * v821;
  uint64_t v871 = v810 & 0x7FFFFFFFFFFFFLL;
  uint64_t v872 = ((v810 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v826) >> 64;
  unsigned long long v873 = (unint64_t)v830 * (unsigned __int128)(unint64_t)(19 * v1354)
       + (unint64_t)v829 * (unsigned __int128)(unint64_t)v865
       + (unint64_t)v826 * (unsigned __int128)(unint64_t)v824
       + (unint64_t)v827 * (unsigned __int128)(unint64_t)v823
       + (unint64_t)v828 * (unsigned __int128)(unint64_t)v821;
  uint64_t v874 = (v810 & 0x7FFFFFFFFFFFFLL) * v826;
  *((void *)&v876 + 1) = v866;
  *(void *)&long long v876 = v869;
  uint64_t v875 = v876 >> 51;
  BOOL v76 = __CFADD__((void)v873, v875);
  uint64_t v877 = v873 + v875;
  uint64_t v878 = v830 * v865;
  if (v76) {
    uint64_t v879 = *((void *)&v873 + 1) + 1;
  }
  else {
    uint64_t v879 = ((unint64_t)v830 * (unsigned __int128)(unint64_t)(19 * v1354)
  }
          + (unint64_t)v829 * (unsigned __int128)(unint64_t)v865
          + (unint64_t)v826 * (unsigned __int128)(unint64_t)v824
          + (unint64_t)v827 * (unsigned __int128)(unint64_t)v823
          + (unint64_t)v828 * (unsigned __int128)(unint64_t)v821) >> 64;
  BOOL v76 = __CFADD__(v878, v870);
  uint64_t v880 = v878 + v870;
  uint64_t v881 = v818 & 0x7FFFFFFFFFFFFLL;
  uint64_t v882 = (v830 * 19 * v823 + v829 * 19 * v824 + v826 * v821 + v827 * v865 + v828 * 19 * v1354) & 0x7FFFFFFFFFFFFLL;
  unint64_t v883 = v880 + v874;
  uint64_t v884 = v869 & 0x7FFFFFFFFFFFFLL;
  unint64_t v885 = v872
       + __CFADD__(v880, v874)
       + (((unint64_t)v829 * (unsigned __int128)(unint64_t)v821) >> 64)
       + v76
       + (((unint64_t)v830 * (unsigned __int128)(unint64_t)v865) >> 64);
  *((void *)&v887 + 1) = v879;
  *(void *)&long long v887 = v877;
  uint64_t v886 = v887 >> 51;
  uint64_t v888 = v877 & 0x7FFFFFFFFFFFFLL;
  unsigned long long v889 = __PAIR128__(v885, v883)
       + (unint64_t)v827 * (unsigned __int128)(unint64_t)v824
       + (unint64_t)v828 * (unsigned __int128)(unint64_t)v823;
  uint64_t v890 = v889 + v886;
  if (__CFADD__((void)v889, v886)) {
    uint64_t v891 = *((void *)&v889 + 1) + 1;
  }
  else {
    uint64_t v891 = *((void *)&v889 + 1);
  }
  uint64_t v1295 = v889 + v886;
  *((void *)&v893 + 1) = v891;
  *(void *)&long long v893 = v889 + v886;
  uint64_t v892 = v893 >> 51;
  uint64_t v1323 = v881;
  uint64_t v1333 = v871;
  uint64_t v1355 = v824;
  unsigned long long v895 = (unint64_t)v830 * (unsigned __int128)(unint64_t)v821
       + (unint64_t)v829 * (unsigned __int128)(unint64_t)v823
       + (unint64_t)v881 * (unsigned __int128)(unint64_t)v826
       + (unint64_t)v871 * (unsigned __int128)(unint64_t)v827
       + (unint64_t)v828 * (unsigned __int128)(unint64_t)v824;
  uint64_t v894 = *((void *)&v895 + 1);
  BOOL v76 = __CFADD__((void)v895, v892);
  uint64_t v896 = v895 + v892;
  if (v76) {
    uint64_t v894 = *((void *)&v895 + 1) + 1;
  }
  uint64_t v897 = v896 & 0x7FFFFFFFFFFFFLL;
  uint64_t v1313 = v896;
  *((void *)&v898 + 1) = v894;
  *(void *)&long long v898 = v896;
  unint64_t v899 = v882 + 19 * (v898 >> 51);
  uint64_t v900 = v899 & 0x7FFFFFFFFFFFFLL;
  unint64_t v901 = v884 + (v899 >> 51);
  uint64_t v902 = v901 & 0x7FFFFFFFFFFFFLL;
  uint64_t v903 = v888 + (v901 >> 51);
  uint64_t v904 = -100;
  uint64_t v905 = v900;
  uint64_t v906 = v902;
  uint64_t v907 = v903;
  uint64_t v1286 = v896 & 0x7FFFFFFFFFFFFLL;
  uint64_t v1290 = v890 & 0x7FFFFFFFFFFFFLL;
  uint64_t v908 = v890 & 0x7FFFFFFFFFFFFLL;
  do
  {
    uint64_t v909 = 2 * v905;
    signed long long v910 = (unint64_t)(38 * v907) * (unsigned __int128)(unint64_t)v908
         + (unint64_t)v905 * (unsigned __int128)(unint64_t)v905
         + (unint64_t)(38 * v897) * (unsigned __int128)(unint64_t)v906;
    unint64_t v911 = ((unint64_t)(2 * v905) * (unsigned __int128)(unint64_t)v906) >> 64;
    uint64_t v912 = 2 * v905 * v906;
    unint64_t v913 = ((unint64_t)(38 * v897) * (unsigned __int128)(unint64_t)v907) >> 64;
    uint64_t v914 = 38 * v897 * v907;
    unsigned long long v915 = (unint64_t)v907 * (unsigned __int128)(unint64_t)v909
         + (unint64_t)v906 * (unsigned __int128)(unint64_t)v906
         + (unint64_t)(38 * v897) * (unsigned __int128)(unint64_t)v908;
    unsigned long long v916 = (unint64_t)v908 * (unsigned __int128)(unint64_t)v909
         + (unint64_t)(2 * v906) * (unsigned __int128)(unint64_t)v907
         + (unint64_t)(19 * v897) * (unsigned __int128)(unint64_t)v897;
    unint64_t v917 = ((unint64_t)v897 * (unsigned __int128)(unint64_t)v909) >> 64;
    uint64_t v918 = v897 * v909;
    unint64_t v919 = ((unint64_t)v908 * (unsigned __int128)(unint64_t)(2 * v906)) >> 64;
    uint64_t v920 = v908 * 2 * v906;
    uint64_t v921 = v910 >> 51;
    uint64_t v923 = ((unint64_t)(19 * v908) * (unsigned __int128)(unint64_t)v908
          + __PAIR128__(v911, v912)
          + __PAIR128__(v913, v914)) >> 64;
    uint64_t v922 = 19 * v908 * v908 + v912 + v914;
    BOOL v76 = __CFADD__(v922, v921);
    uint64_t v924 = v922 + v921;
    if (v76) {
      ++v923;
    }
    uint64_t v925 = v924 & 0x7FFFFFFFFFFFFLL;
    *((void *)&v927 + 1) = v923;
    *(void *)&long long v927 = v924;
    uint64_t v926 = v927 >> 51;
    BOOL v76 = __CFADD__((void)v915, v926);
    uint64_t v928 = v915 + v926;
    if (v76) {
      uint64_t v929 = *((void *)&v915 + 1) + 1;
    }
    else {
      uint64_t v929 = *((void *)&v915 + 1);
    }
    uint64_t v930 = v928 & 0x7FFFFFFFFFFFFLL;
    *((void *)&v932 + 1) = v929;
    *(void *)&long long v932 = v928;
    uint64_t v931 = v932 >> 51;
    BOOL v76 = __CFADD__((void)v916, v931);
    uint64_t v933 = v916 + v931;
    if (v76) {
      uint64_t v934 = *((void *)&v916 + 1) + 1;
    }
    else {
      uint64_t v934 = *((void *)&v916 + 1);
    }
    uint64_t v908 = v933 & 0x7FFFFFFFFFFFFLL;
    *((void *)&v936 + 1) = v934;
    *(void *)&long long v936 = v933;
    uint64_t v935 = v936 >> 51;
    unsigned long long v937 = __PAIR128__(v919, v920)
         + (unint64_t)v907 * (unsigned __int128)(unint64_t)v907
         + __PAIR128__(v917, v918);
    BOOL v76 = __CFADD__((void)v937, v935);
    uint64_t v938 = v937 + v935;
    if (v76) {
      uint64_t v939 = *((void *)&v937 + 1) + 1;
    }
    else {
      uint64_t v939 = (__PAIR128__(v919, v920)
    }
            + (unint64_t)v907 * (unsigned __int128)(unint64_t)v907
            + __PAIR128__(v917, v918)) >> 64;
    uint64_t v897 = v938 & 0x7FFFFFFFFFFFFLL;
    *((void *)&v940 + 1) = v939;
    *(void *)&long long v940 = v938;
    unint64_t v941 = (v910 & 0x7FFFFFFFFFFFFLL) + 19 * (v940 >> 51);
    uint64_t v905 = v941 & 0x7FFFFFFFFFFFFLL;
    unint64_t v942 = v925 + (v941 >> 51);
    uint64_t v906 = v942 & 0x7FFFFFFFFFFFFLL;
    uint64_t v907 = v930 + (v942 >> 51);
    BOOL v76 = __CFADD__(v904++, 1);
  }
  while (!v76);
  uint64_t v943 = v897 * 19 * v902 + v908 * 19 * v903 + v905 * v900 + v906 * 19 * v1286 + v907 * 19 * v1290;
  uint64_t v944 = ((unint64_t)v897 * (unsigned __int128)(unint64_t)(19 * v903)
        + (unint64_t)v908 * (unsigned __int128)(unint64_t)(19 * v1290)
        + (unint64_t)v905 * (unsigned __int128)(unint64_t)v902
        + (unint64_t)v906 * (unsigned __int128)(unint64_t)v900
        + (unint64_t)v907 * (unsigned __int128)(unint64_t)(19 * v1286)) >> 64;
  uint64_t v945 = v897 * 19 * v903 + v908 * 19 * v1290 + v905 * v902 + v906 * v900 + v907 * 19 * v1286;
  uint64_t v946 = (__int128)((unint64_t)v897 * (unsigned __int128)(unint64_t)(19 * v902)
                  + (unint64_t)v908 * (unsigned __int128)(unint64_t)(19 * v903)
                  + (unint64_t)v905 * (unsigned __int128)(unint64_t)v900
                  + (unint64_t)v906 * (unsigned __int128)(unint64_t)(19 * v1286)
                  + (unint64_t)v907 * (unsigned __int128)(unint64_t)(19 * v1290)) >> 51;
  BOOL v76 = __CFADD__(v945, v946);
  uint64_t v947 = v945 + v946;
  if (v76) {
    ++v944;
  }
  *((void *)&v949 + 1) = v944;
  *(void *)&long long v949 = v947;
  uint64_t v948 = v949 >> 51;
  uint64_t v951 = ((unint64_t)v897 * (unsigned __int128)(unint64_t)(19 * v1290)
        + (unint64_t)v908 * (unsigned __int128)(unint64_t)(19 * v1286)
        + (unint64_t)v905 * (unsigned __int128)(unint64_t)v903
        + (unint64_t)v906 * (unsigned __int128)(unint64_t)v902
        + (unint64_t)v907 * (unsigned __int128)(unint64_t)v900) >> 64;
  uint64_t v950 = v897 * 19 * v1290 + v908 * 19 * v1286 + v905 * v903 + v906 * v902 + v907 * v900;
  BOOL v76 = __CFADD__(v950, v948);
  uint64_t v952 = v950 + v948;
  if (v76) {
    ++v951;
  }
  unsigned long long v953 = (unint64_t)v897 * (unsigned __int128)(unint64_t)(19 * v1286)
       + (unint64_t)v908 * (unsigned __int128)(unint64_t)v900
       + (v1295 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v905
       + (unint64_t)v906 * (unsigned __int128)(unint64_t)v903
       + (unint64_t)v907 * (unsigned __int128)(unint64_t)v902;
  *((void *)&v955 + 1) = v951;
  *(void *)&long long v955 = v952;
  uint64_t v954 = v955 >> 51;
  uint64_t v956 = v953 + v954;
  if (__CFADD__((void)v953, v954)) {
    uint64_t v957 = *((void *)&v953 + 1) + 1;
  }
  else {
    uint64_t v957 = ((unint64_t)v897 * (unsigned __int128)(unint64_t)(19 * v1286)
  }
          + (unint64_t)v908 * (unsigned __int128)(unint64_t)v900
          + (v1295 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v905
          + (unint64_t)v906 * (unsigned __int128)(unint64_t)v903
          + (unint64_t)v907 * (unsigned __int128)(unint64_t)v902) >> 64;
  unsigned long long v958 = (unint64_t)v897 * (unsigned __int128)(unint64_t)v900
       + (unint64_t)v908 * (unsigned __int128)(unint64_t)v902
       + (v1313 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v905
       + (v1295 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v906
       + (unint64_t)v907 * (unsigned __int128)(unint64_t)v903;
  uint64_t v959 = v947 & 0x7FFFFFFFFFFFFLL;
  *((void *)&v961 + 1) = v957;
  *(void *)&long long v961 = v956;
  uint64_t v960 = v961 >> 51;
  uint64_t v962 = v952 & 0x7FFFFFFFFFFFFLL;
  uint64_t v963 = v958 + v960;
  if (__CFADD__((void)v958, v960)) {
    uint64_t v964 = *((void *)&v958 + 1) + 1;
  }
  else {
    uint64_t v964 = *((void *)&v958 + 1);
  }
  *((void *)&v965 + 1) = v964;
  *(void *)&long long v965 = v958 + v960;
  unint64_t v966 = (v943 & 0x7FFFFFFFFFFFFLL) + 19 * (v965 >> 51);
  uint64_t v967 = v966 & 0x7FFFFFFFFFFFFLL;
  unint64_t v968 = v959 + (v966 >> 51);
  uint64_t v969 = v968 & 0x7FFFFFFFFFFFFLL;
  uint64_t v970 = v962 + (v968 >> 51);
  uint64_t v971 = -50;
  do
  {
    uint64_t v972 = v963 & 0x7FFFFFFFFFFFFLL;
    uint64_t v973 = v956 & 0x7FFFFFFFFFFFFLL;
    uint64_t v974 = 19 * (v963 & 0x7FFFFFFFFFFFFLL);
    uint64_t v975 = 38 * (v963 & 0x7FFFFFFFFFFFFLL);
    signed long long v976 = (v956 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)(38 * v970)
         + (unint64_t)v967 * (unsigned __int128)(unint64_t)v967
         + (unint64_t)v975 * (unsigned __int128)(unint64_t)v969;
    uint64_t v977 = ((unint64_t)(2 * v967) * (unsigned __int128)(unint64_t)v969) >> 64;
    uint64_t v978 = 2 * v967 * v969;
    unint64_t v979 = ((unint64_t)v975 * (unsigned __int128)(unint64_t)v970) >> 64;
    uint64_t v980 = v975 * v970;
    uint64_t v981 = 19 * (v956 & 0x7FFFFFFFFFFFFLL);
    uint64_t v982 = ((unint64_t)v981 * (unsigned __int128)(v956 & 0x7FFFFFFFFFFFFLL)) >> 64;
    uint64_t v983 = v981 * v973;
    unsigned long long v984 = (unint64_t)v970 * (unsigned __int128)(unint64_t)(2 * v967)
         + (unint64_t)v969 * (unsigned __int128)(unint64_t)v969
         + (unint64_t)v975 * (unsigned __int128)(unint64_t)v973;
    unsigned long long v985 = (unint64_t)v973 * (unsigned __int128)(unint64_t)(2 * v967)
         + (unint64_t)(2 * v969) * (unsigned __int128)(unint64_t)v970
         + (unint64_t)v974 * (unsigned __int128)(unint64_t)v972;
    unint64_t v986 = ((unint64_t)v972 * (unsigned __int128)(unint64_t)(2 * v967)) >> 64;
    uint64_t v987 = v972 * 2 * v967;
    unint64_t v988 = ((unint64_t)v973 * (unsigned __int128)(unint64_t)(2 * v969)) >> 64;
    uint64_t v989 = v973 * 2 * v969;
    unint64_t v990 = ((unint64_t)v970 * (unsigned __int128)(unint64_t)v970) >> 64;
    uint64_t v991 = v976 >> 51;
    uint64_t v992 = v970 * v970;
    BOOL v76 = __CFADD__(v983 + v978 + v980, v991);
    uint64_t v993 = v983 + v978 + v980 + v991;
    if (v76) {
      uint64_t v994 = ((__PAIR128__(v977 + (unint64_t)__CFADD__(v983, v978) + v982, v983 + v978) + __PAIR128__(v979, v980)) >> 64)
    }
           + 1;
    else {
      uint64_t v994 = (__PAIR128__(v977 + (unint64_t)__CFADD__(v983, v978) + v982, v983 + v978) + __PAIR128__(v979, v980)) >> 64;
    }
    *((void *)&v996 + 1) = v994;
    *(void *)&long long v996 = v993;
    uint64_t v995 = v996 >> 51;
    uint64_t v997 = v993 & 0x7FFFFFFFFFFFFLL;
    uint64_t v998 = v984 + v995;
    if (__CFADD__((void)v984, v995)) {
      uint64_t v999 = *((void *)&v984 + 1) + 1;
    }
    else {
      uint64_t v999 = *((void *)&v984 + 1);
    }
    uint64_t v1000 = v998 & 0x7FFFFFFFFFFFFLL;
    *((void *)&v1002 + 1) = v999;
    *(void *)&long long v1002 = v998;
    uint64_t v1001 = v1002 >> 51;
    uint64_t v956 = v985 + v1001;
    if (__CFADD__((void)v985, v1001)) {
      uint64_t v1003 = *((void *)&v985 + 1) + 1;
    }
    else {
      uint64_t v1003 = *((void *)&v985 + 1);
    }
    *((void *)&v1005 + 1) = v1003;
    *(void *)&long long v1005 = v956;
    uint64_t v1004 = v1005 >> 51;
    unsigned long long v1006 = __PAIR128__(v988, v989) + __PAIR128__(v990, v992) + __PAIR128__(v986, v987);
    uint64_t v963 = v1006 + v1004;
    if (__CFADD__((void)v1006, v1004)) {
      uint64_t v1007 = *((void *)&v1006 + 1) + 1;
    }
    else {
      uint64_t v1007 = (__PAIR128__(v988, v989) + __PAIR128__(v990, v992) + __PAIR128__(v986, v987)) >> 64;
    }
    *((void *)&v1008 + 1) = v1007;
    *(void *)&long long v1008 = v1006 + v1004;
    unint64_t v1009 = (v976 & 0x7FFFFFFFFFFFFLL) + 19 * (v1008 >> 51);
    uint64_t v967 = v1009 & 0x7FFFFFFFFFFFFLL;
    unint64_t v1010 = v997 + (v1009 >> 51);
    uint64_t v969 = v1010 & 0x7FFFFFFFFFFFFLL;
    uint64_t v970 = v1000 + (v1010 >> 51);
    BOOL v76 = __CFADD__(v971++, 1);
  }
  while (!v76);
  uint64_t v1011 = v956 & 0x7FFFFFFFFFFFFLL;
  uint64_t v1012 = v963 & 0x7FFFFFFFFFFFFLL;
  uint64_t v1013 = (v963 & 0x7FFFFFFFFFFFFLL) * 19 * v823
        + (v956 & 0x7FFFFFFFFFFFFLL) * v1328
        + v967 * v821
        + v969 * v865
        + v970 * v1344;
  uint64_t v1014 = ((v963 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1328
         + (v956 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1344
         + (unint64_t)v967 * (unsigned __int128)(unint64_t)v823
         + (unint64_t)v969 * (unsigned __int128)(unint64_t)v821
         + (unint64_t)v970 * (unsigned __int128)(unint64_t)v865) >> 64;
  uint64_t v1015 = (v963 & 0x7FFFFFFFFFFFFLL) * v1328
        + (v956 & 0x7FFFFFFFFFFFFLL) * v1344
        + v967 * v823
        + v969 * v821
        + v970 * v865;
  uint64_t v1016 = (__int128)((v963 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)(19 * v823)
                   + (v956 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1328
                   + (unint64_t)v967 * (unsigned __int128)(unint64_t)v821
                   + (unint64_t)v969 * (unsigned __int128)(unint64_t)v865
                   + (unint64_t)v970 * (unsigned __int128)(unint64_t)v1344) >> 51;
  BOOL v76 = __CFADD__(v1015, v1016);
  uint64_t v1017 = v1015 + v1016;
  if (v76) {
    ++v1014;
  }
  uint64_t v1019 = (__PAIR128__((((unint64_t)v1011 * (unsigned __int128)(unint64_t)v865) >> 64)+ __CFADD__((v963 & 0x7FFFFFFFFFFFFLL) * v1344, (v956 & 0x7FFFFFFFFFFFFLL) * v865)+ (((unint64_t)v1012 * (unsigned __int128)(unint64_t)v1344) >> 64), (v963 & 0x7FFFFFFFFFFFFLL) * v1344 + (v956 & 0x7FFFFFFFFFFFFuLL) * v865)+ (unint64_t)v967 * (unsigned __int128)(unint64_t)v1355+ (unint64_t)v969 * (unsigned __int128)(unint64_t)v823+ (unint64_t)v970 * (unsigned __int128)(unint64_t)v821) >> 64;
  uint64_t v1018 = (v963 & 0x7FFFFFFFFFFFFLL) * v1344
        + (v956 & 0x7FFFFFFFFFFFFLL) * v865
        + v967 * v1355
        + v969 * v823
        + v970 * v821;
  *((void *)&v1021 + 1) = v1014;
  *(void *)&long long v1021 = v1017;
  uint64_t v1020 = v1021 >> 51;
  BOOL v76 = __CFADD__(v1018, v1020);
  uint64_t v1022 = v1018 + v1020;
  if (v76) {
    ++v1019;
  }
  unsigned long long v1023 = (unint64_t)v1012 * (unsigned __int128)(unint64_t)v865
        + (unint64_t)v1011 * (unsigned __int128)(unint64_t)v821
        + (unint64_t)v1333 * (unsigned __int128)(unint64_t)v967
        + (unint64_t)v969 * (unsigned __int128)(unint64_t)v1355
        + (unint64_t)v970 * (unsigned __int128)(unint64_t)v823;
  *((void *)&v1025 + 1) = v1019;
  *(void *)&long long v1025 = v1022;
  uint64_t v1024 = v1025 >> 51;
  uint64_t v1026 = v1023 + v1024;
  if (__CFADD__((void)v1023, v1024)) {
    uint64_t v1027 = *((void *)&v1023 + 1) + 1;
  }
  else {
    uint64_t v1027 = *((void *)&v1023 + 1);
  }
  unsigned long long v1028 = (unint64_t)v1012 * (unsigned __int128)(unint64_t)v821
        + (unint64_t)v1011 * (unsigned __int128)(unint64_t)v823
        + (unint64_t)v1323 * (unsigned __int128)(unint64_t)v967
        + (unint64_t)v1333 * (unsigned __int128)(unint64_t)v969;
  uint64_t v1032 = v1013 & 0x7FFFFFFFFFFFFLL;
  *((void *)&v1034 + 1) = v1027;
  *(void *)&long long v1034 = v1026;
  uint64_t v1033 = v1034 >> 51;
  unsigned long long v1031 = v1028 + (unint64_t)v970 * (unsigned __int128)(unint64_t)v1355;
  uint64_t v1029 = v1031 >> 64;
  uint64_t v1030 = v1031;
  uint64_t v1035 = v1030 + v1033;
  if (__CFADD__(v1030, v1033)) {
    ++v1029;
  }
  *((void *)&v1036 + 1) = v1029;
  *(void *)&long long v1036 = v1030 + v1033;
  unint64_t v1037 = v1032 + 19 * (v1036 >> 51);
  uint64_t v1038 = v1037 & 0x7FFFFFFFFFFFFLL;
  unint64_t v1039 = (v1017 & 0x7FFFFFFFFFFFFLL) + (v1037 >> 51);
  uint64_t v1040 = v1039 & 0x7FFFFFFFFFFFFLL;
  uint64_t v1041 = (v1022 & 0x7FFFFFFFFFFFFLL) + (v1039 >> 51);
  uint64_t v1042 = -5;
  do
  {
    uint64_t v1043 = v1026 & 0x7FFFFFFFFFFFFLL;
    signed long long v1044 = (v1026 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)(38 * v1041)
          + (unint64_t)v1038 * (unsigned __int128)(unint64_t)v1038
          + 38 * (v1035 & 0x7FFFFFFFFFFFFuLL) * (unsigned __int128)(unint64_t)v1040;
    uint64_t v1045 = ((unint64_t)(2 * v1038) * (unsigned __int128)(unint64_t)v1040) >> 64;
    uint64_t v1046 = 2 * v1038 * v1040;
    unint64_t v1047 = (38 * (v1035 & 0x7FFFFFFFFFFFFuLL) * (unsigned __int128)(unint64_t)v1041) >> 64;
    uint64_t v1048 = 38 * (v1035 & 0x7FFFFFFFFFFFFLL) * v1041;
    uint64_t v1049 = ((unint64_t)(19 * v1043) * (unsigned __int128)(unint64_t)v1043) >> 64;
    uint64_t v1050 = 19 * v1043 * v1043;
    unsigned long long v1051 = (unint64_t)v1041 * (unsigned __int128)(unint64_t)(2 * v1038)
          + (unint64_t)v1040 * (unsigned __int128)(unint64_t)v1040
          + 38 * (v1035 & 0x7FFFFFFFFFFFFuLL) * (unsigned __int128)(unint64_t)v1043;
    unsigned long long v1052 = (unint64_t)v1043 * (unsigned __int128)(unint64_t)(2 * v1038)
          + (unint64_t)(2 * v1040) * (unsigned __int128)(unint64_t)v1041
          + 19 * (v1035 & 0x7FFFFFFFFFFFFuLL) * (unsigned __int128)(v1035 & 0x7FFFFFFFFFFFFLL);
    unint64_t v1053 = ((v1035 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)(2 * v1038)) >> 64;
    uint64_t v1054 = (v1035 & 0x7FFFFFFFFFFFFLL) * 2 * v1038;
    unint64_t v1055 = ((unint64_t)v1043 * (unsigned __int128)(unint64_t)(2 * v1040)) >> 64;
    uint64_t v1056 = v1043 * 2 * v1040;
    unint64_t v1057 = ((unint64_t)v1041 * (unsigned __int128)(unint64_t)v1041) >> 64;
    uint64_t v1058 = v1044 >> 51;
    uint64_t v1059 = v1041 * v1041;
    BOOL v76 = __CFADD__(v1050 + v1046 + v1048, v1058);
    uint64_t v1060 = v1050 + v1046 + v1048 + v1058;
    if (v76) {
      uint64_t v1061 = ((__PAIR128__(v1045 + (unint64_t)__CFADD__(v1050, v1046) + v1049, v1050 + v1046)
    }
              + __PAIR128__(v1047, v1048)) >> 64)
            + 1;
    else {
      uint64_t v1061 = (__PAIR128__(v1045 + (unint64_t)__CFADD__(v1050, v1046) + v1049, v1050 + v1046)
    }
             + __PAIR128__(v1047, v1048)) >> 64;
    *((void *)&v1063 + 1) = v1061;
    *(void *)&long long v1063 = v1060;
    uint64_t v1062 = v1063 >> 51;
    uint64_t v1064 = v1060 & 0x7FFFFFFFFFFFFLL;
    if (__CFADD__((void)v1051, v1062)) {
      uint64_t v1065 = *((void *)&v1051 + 1) + 1;
    }
    else {
      uint64_t v1065 = *((void *)&v1051 + 1);
    }
    uint64_t v1066 = (v1051 + v1062) & 0x7FFFFFFFFFFFFLL;
    *((void *)&v1068 + 1) = v1065;
    *(void *)&long long v1068 = v1051 + v1062;
    uint64_t v1067 = v1068 >> 51;
    uint64_t v1026 = v1052 + v1067;
    if (__CFADD__((void)v1052, v1067)) {
      uint64_t v1069 = *((void *)&v1052 + 1) + 1;
    }
    else {
      uint64_t v1069 = *((void *)&v1052 + 1);
    }
    *((void *)&v1071 + 1) = v1069;
    *(void *)&long long v1071 = v1026;
    uint64_t v1070 = v1071 >> 51;
    unsigned long long v1072 = __PAIR128__(v1055, v1056) + __PAIR128__(v1057, v1059) + __PAIR128__(v1053, v1054);
    uint64_t v1035 = v1072 + v1070;
    if (__CFADD__((void)v1072, v1070)) {
      uint64_t v1073 = *((void *)&v1072 + 1) + 1;
    }
    else {
      uint64_t v1073 = (__PAIR128__(v1055, v1056) + __PAIR128__(v1057, v1059) + __PAIR128__(v1053, v1054)) >> 64;
    }
    *((void *)&v1074 + 1) = v1073;
    *(void *)&long long v1074 = v1072 + v1070;
    unint64_t v1075 = (v1044 & 0x7FFFFFFFFFFFFLL) + 19 * (v1074 >> 51);
    uint64_t v1038 = v1075 & 0x7FFFFFFFFFFFFLL;
    unint64_t v1076 = v1064 + (v1075 >> 51);
    uint64_t v1040 = v1076 & 0x7FFFFFFFFFFFFLL;
    uint64_t v1041 = v1066 + (v1076 >> 51);
    BOOL v76 = __CFADD__(v1042++, 1);
  }
  while (!v76);
  uint64_t v1077 = v1372 & 0x7FFFFFFFFFFFFLL;
  uint64_t v1078 = v1361 & 0x7FFFFFFFFFFFFLL;
  uint64_t v1079 = v1337 & 0x7FFFFFFFFFFFFLL;
  uint64_t v1080 = v1366 & 0x7FFFFFFFFFFFFLL;
  uint64_t v1081 = ((unint64_t)v1038 * (unsigned __int128)(v1361 & 0x7FFFFFFFFFFFFLL)) >> 64;
  uint64_t v1082 = v1038 * (v1361 & 0x7FFFFFFFFFFFFLL);
  unsigned long long v1338 = (unint64_t)v1040 * (unsigned __int128)(v1361 & 0x7FFFFFFFFFFFFLL);
  unsigned long long v1329 = (unint64_t)v1038 * (unsigned __int128)(v1366 & 0x7FFFFFFFFFFFFLL);
  unsigned long long v1356 = (unint64_t)v1038 * (unsigned __int128)(unint64_t)v1376;
  uint64_t v1083 = v1026 & 0x7FFFFFFFFFFFFLL;
  unsigned long long v1367 = (unint64_t)v1079 * (unsigned __int128)(unint64_t)v1038;
  uint64_t v1084 = v1035 & 0x7FFFFFFFFFFFFLL;
  uint64_t v1085 = 19 * v1376;
  unsigned long long v1086 = (v1035 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)(19 * v1080)
        + (unint64_t)v1083 * (unsigned __int128)(unint64_t)(19 * v1376);
  unsigned long long v1319 = (unint64_t)v1077 * (unsigned __int128)(unint64_t)v1038;
  v1077 *= 19;
  uint64_t v1087 = 19 * v1079;
  signed long long v1088 = __PAIR128__(v1081 + (unint64_t)__CFADD__((void)v1086, v1082) + *((void *)&v1086 + 1), (uint64_t)v1086 + v1082)+ (unint64_t)v1040 * (unsigned __int128)(unint64_t)v1077+ (unint64_t)v1041 * (unsigned __int128)(unint64_t)(19 * v1079);
  unint64_t v1314 = ((unint64_t)v1079 * (unsigned __int128)(unint64_t)v1040) >> 64;
  uint64_t v1089 = v1079 * v1040;
  unint64_t v1090 = ((unint64_t)v1040 * (unsigned __int128)(unint64_t)v1080) >> 64;
  uint64_t v1091 = v1040 * v1080;
  unint64_t v1092 = ((unint64_t)v1040 * (unsigned __int128)(unint64_t)v1376) >> 64;
  uint64_t v1093 = v1040 * v1376;
  unint64_t v1094 = ((unint64_t)v1041 * (unsigned __int128)(unint64_t)v1078) >> 64;
  uint64_t v1095 = v1041 * v1078;
  unint64_t v1096 = ((unint64_t)v1083 * (unsigned __int128)(unint64_t)v1078) >> 64;
  uint64_t v1097 = v1083 * v1078;
  unint64_t v1098 = ((unint64_t)v1084 * (unsigned __int128)(unint64_t)v1078) >> 64;
  uint64_t v1099 = v1084 * v1078;
  unint64_t v1100 = ((unint64_t)v1041 * (unsigned __int128)(unint64_t)v1080) >> 64;
  uint64_t v1101 = v1041 * v1080;
  unint64_t v1102 = ((unint64_t)v1083 * (unsigned __int128)(unint64_t)v1080) >> 64;
  uint64_t v1103 = v1083 * v1080;
  unint64_t v1291 = ((unint64_t)v1041 * (unsigned __int128)(unint64_t)v1376) >> 64;
  uint64_t v1296 = v1089;
  uint64_t v1377 = v1041 * v1376;
  unint64_t v1104 = ((unint64_t)v1041 * (unsigned __int128)(unint64_t)v1077) >> 64;
  uint64_t v1105 = v1041 * v1077;
  uint64_t v1106 = ((unint64_t)v1083 * (unsigned __int128)(unint64_t)v1087) >> 64;
  uint64_t v1107 = v1083 * v1087;
  unint64_t v1108 = ((unint64_t)v1083 * (unsigned __int128)(unint64_t)v1077) >> 64;
  uint64_t v1109 = v1083 * v1077;
  unint64_t v1110 = ((unint64_t)v1084 * (unsigned __int128)(unint64_t)v1087) >> 64;
  uint64_t v1111 = v1084 * v1087;
  unint64_t v1112 = ((unint64_t)v1084 * (unsigned __int128)(unint64_t)v1077) >> 64;
  uint64_t v1113 = v1084 * v1077;
  unsigned long long v1115 = __PAIR128__(v1106+ __CFADD__(v1084 * v1085, v1107)+ (((unint64_t)v1084 * (unsigned __int128)(unint64_t)v1085) >> 64), v1084 * v1085 + v1107)+ v1329+ v1338+ __PAIR128__(v1104, v1105);
  uint64_t v1114 = *((void *)&v1115 + 1);
  uint64_t v1116 = v1088 >> 51;
  uint64_t v1117 = v1115 + v1116;
  if (__CFADD__((void)v1115, v1116)) {
    uint64_t v1114 = *((void *)&v1115 + 1) + 1;
  }
  uint64_t v1119 = (__PAIR128__(v1110, v1111)
         + __PAIR128__(v1108, v1109)
         + v1356
         + __PAIR128__(v1090, v1091)
         + __PAIR128__(v1094, v1095)) >> 64;
  uint64_t v1118 = v1111 + v1109 + v1356 + v1091 + v1095;
  *((void *)&v1121 + 1) = v1114;
  *(void *)&long long v1121 = v1117;
  uint64_t v1120 = v1121 >> 51;
  BOOL v76 = __CFADD__(v1118, v1120);
  uint64_t v1122 = v1118 + v1120;
  uint64_t v1123 = v1117 & 0x7FFFFFFFFFFFFLL;
  if (v76) {
    ++v1119;
  }
  *((void *)&v1125 + 1) = v1119;
  *(void *)&long long v1125 = v1122;
  uint64_t v1124 = v1125 >> 51;
  uint64_t v1126 = v1122 & 0x7FFFFFFFFFFFFLL;
  unsigned long long v1127 = __PAIR128__(v1112, v1113)
        + __PAIR128__(v1096, v1097)
        + v1367
        + __PAIR128__(v1092, v1093)
        + __PAIR128__(v1100, v1101);
  BOOL v76 = __CFADD__((void)v1127, v1124);
  uint64_t v1128 = v1127 + v1124;
  if (v76) {
    uint64_t v1129 = *((void *)&v1127 + 1) + 1;
  }
  else {
    uint64_t v1129 = (__PAIR128__(v1112, v1113)
  }
           + __PAIR128__(v1096, v1097)
           + v1367
           + __PAIR128__(v1092, v1093)
           + __PAIR128__(v1100, v1101)) >> 64;
  *((void *)&v1131 + 1) = v1129;
  *(void *)&long long v1131 = v1128;
  uint64_t v1130 = v1131 >> 51;
  uint64_t v1132 = v1128 & 0x7FFFFFFFFFFFFLL;
  unsigned long long v1133 = __PAIR128__(v1098, v1099)
        + __PAIR128__(v1102, v1103)
        + v1319
        + __PAIR128__(v1314, v1296)
        + __PAIR128__(v1291, v1377);
  uint64_t v1134 = v1133 + v1130;
  if (__CFADD__((void)v1133, v1130)) {
    uint64_t v1135 = *((void *)&v1133 + 1) + 1;
  }
  else {
    uint64_t v1135 = (__PAIR128__(v1098, v1099)
  }
           + __PAIR128__(v1102, v1103)
           + v1319
           + __PAIR128__(v1314, v1296)
           + __PAIR128__(v1291, v1377)) >> 64;
  *((void *)&v1136 + 1) = v1135;
  *(void *)&long long v1136 = v1134;
  unint64_t v1137 = (v1088 & 0x7FFFFFFFFFFFFLL) + 19 * (v1136 >> 51);
  unint64_t v1138 = v1123 + (v1137 >> 51);
  uint64_t v1139 = v1126 + (v1138 >> 51);
  unsigned long long v1315 = v1308 * (unsigned __int128)(v1137 & 0x7FFFFFFFFFFFFLL);
  unint64_t v1297 = ((unint64_t)v1305 * (unsigned __int128)(v1138 & 0x7FFFFFFFFFFFFLL)) >> 64;
  uint64_t v1140 = v1305 * (v1138 & 0x7FFFFFFFFFFFFLL);
  unint64_t v1362 = (v1301 * (unsigned __int128)(v1137 & 0x7FFFFFFFFFFFFLL)) >> 64;
  uint64_t v1345 = v1301 * (v1137 & 0x7FFFFFFFFFFFFLL);
  unsigned long long v1334 = (unint64_t)v1305 * (unsigned __int128)(unint64_t)v1139;
  unsigned long long v1324 = v1308 * (unsigned __int128)(v1138 & 0x7FFFFFFFFFFFFLL);
  uint64_t v1368 = ((unint64_t)v1132 * (unsigned __int128)(unint64_t)v1305) >> 64;
  uint64_t v1357 = v1132 * v1305;
  unsigned long long v1373 = (v1134 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1305;
  uint64_t v1141 = 19 * (v1134 & 0x7FFFFFFFFFFFFLL);
  uint64_t v1142 = 19 * v1139;
  uint64_t v1143 = 19 * v1132;
  uint64_t v1147 = (v1308 * (unsigned __int128)(unint64_t)v1139) >> 64;
  unsigned long long v1146 = v1308 * (unsigned __int128)(unint64_t)v1141
        + (unint64_t)v1305 * (unsigned __int128)(v1137 & 0x7FFFFFFFFFFFFLL)
        + v1301 * (unsigned __int128)(unint64_t)(19 * v1132)
        + v1303 * (unsigned __int128)(unint64_t)(19 * v1139)
        + v1299 * (unsigned __int128)(19 * (v1138 & 0x7FFFFFFFFFFFFLL));
  unint64_t v1145 = v1146 >> 64;
  unint64_t v1144 = v1146;
  unint64_t v1148 = ((unint64_t)v1132 * (unsigned __int128)v1308) >> 64;
  uint64_t v1149 = v1132 * v1308;
  uint64_t v1150 = v1308 * v1139;
  unint64_t v1151 = (v1303 * (unsigned __int128)(v1137 & 0x7FFFFFFFFFFFFLL)) >> 64;
  uint64_t v1152 = v1303 * (v1137 & 0x7FFFFFFFFFFFFLL);
  unsigned long long v1306 = v1299 * (unsigned __int128)(v1137 & 0x7FFFFFFFFFFFFLL);
  unint64_t v1153 = (v1301 * (unsigned __int128)(v1138 & 0x7FFFFFFFFFFFFLL)) >> 64;
  uint64_t v1154 = v1301 * (v1138 & 0x7FFFFFFFFFFFFLL);
  unint64_t v1155 = (v1303 * (unsigned __int128)(v1138 & 0x7FFFFFFFFFFFFLL)) >> 64;
  uint64_t v1156 = v1303 * (v1138 & 0x7FFFFFFFFFFFFLL);
  unint64_t v1157 = (v1301 * (unsigned __int128)(unint64_t)v1139) >> 64;
  uint64_t v1158 = v1301 * v1139;
  unint64_t v1159 = (v1301 * (unsigned __int128)(unint64_t)v1141) >> 64;
  uint64_t v1160 = v1301 * v1141;
  unint64_t v1161 = (v1303 * (unsigned __int128)(unint64_t)(19 * v1132)) >> 64;
  uint64_t v1162 = v1303 * 19 * v1132;
  unint64_t v1163 = (v1303 * (unsigned __int128)(unint64_t)v1141) >> 64;
  uint64_t v1164 = v1303 * v1141;
  unint64_t v1165 = (v1299 * (unsigned __int128)(unint64_t)(19 * v1132)) >> 64;
  uint64_t v1166 = v1299 * v1143;
  unint64_t v1167 = (v1299 * (unsigned __int128)(unint64_t)v1141) >> 64;
  uint64_t v1168 = v1299 * v1141;
  unint64_t v1169 = (v1315 + __PAIR128__(v1297, v1140) + __PAIR128__(v1159, v1160) + __PAIR128__(v1161, v1162)) >> 64;
  unint64_t v1170 = v1315 + v1140 + v1160 + v1162;
  uint64_t v1171 = (__int128)__PAIR128__(v1145, v1144) >> 51;
  unsigned long long v1173 = __PAIR128__(v1169, v1170) + v1299 * (unsigned __int128)(unint64_t)v1142;
  uint64_t v1172 = *((void *)&v1173 + 1);
  uint64_t v1174 = v1173 + v1171;
  if (__CFADD__((void)v1173, v1171)) {
    uint64_t v1172 = *((void *)&v1173 + 1) + 1;
  }
  *((void *)&v1176 + 1) = v1172;
  *(void *)&long long v1176 = v1173 + v1171;
  uint64_t v1175 = v1176 >> 51;
  unsigned long long v1177 = v1324 + v1334 + __PAIR128__(v1362, v1345) + __PAIR128__(v1163, v1164) + __PAIR128__(v1165, v1166);
  BOOL v76 = __CFADD__((void)v1177, v1175);
  uint64_t v1178 = v1177 + v1175;
  if (v76) {
    uint64_t v1179 = *((void *)&v1177 + 1) + 1;
  }
  else {
    uint64_t v1179 = (v1324 + v1334 + __PAIR128__(v1362, v1345) + __PAIR128__(v1163, v1164) + __PAIR128__(v1165, v1166)) >> 64;
  }
  *((void *)&v1181 + 1) = v1179;
  *(void *)&long long v1181 = v1178;
  uint64_t v1180 = v1181 >> 51;
  unsigned long long v1182 = __PAIR128__(v1368 + (unint64_t)__CFADD__(v1150, v1357) + v1147, v1150 + v1357)
        + __PAIR128__(v1153, v1154)
        + __PAIR128__(v1151, v1152)
        + __PAIR128__(v1167, v1168);
  BOOL v76 = __CFADD__((void)v1182, v1180);
  uint64_t v1183 = v1182 + v1180;
  if (v76) {
    uint64_t v1184 = *((void *)&v1182 + 1) + 1;
  }
  else {
    uint64_t v1184 = (__PAIR128__(v1368 + (unint64_t)__CFADD__(v1150, v1357) + v1147, v1150 + v1357)
  }
           + __PAIR128__(v1153, v1154)
           + __PAIR128__(v1151, v1152)
           + __PAIR128__(v1167, v1168)) >> 64;
  *((void *)&v1186 + 1) = v1184;
  *(void *)&long long v1186 = v1183;
  uint64_t v1185 = v1186 >> 51;
  uint64_t v1188 = (__PAIR128__(v1148, v1149) + v1373 + __PAIR128__(v1157, v1158) + __PAIR128__(v1155, v1156) + v1306) >> 64;
  uint64_t v1187 = v1149 + v1373 + v1158 + v1156 + v1306;
  BOOL v76 = __CFADD__(v1187, v1185);
  uint64_t v1189 = v1187 + v1185;
  uint64_t v1190 = v1174 & 0x7FFFFFFFFFFFFLL;
  uint64_t v1191 = v1178 & 0x7FFFFFFFFFFFFLL;
  if (v76) {
    ++v1188;
  }
  *((void *)&v1192 + 1) = v1188;
  *(void *)&long long v1192 = v1189;
  unint64_t v1193 = (v1144 & 0x7FFFFFFFFFFFFLL) + 19 * (v1192 >> 51);
  uint64_t v1194 = v1193 & 0x7FFFFFFFFFFFFLL;
  unint64_t v1195 = v1190 + (v1193 >> 51);
  uint64_t v1196 = v1195 & 0x7FFFFFFFFFFFFLL;
  unint64_t v1197 = v1191 + (v1195 >> 51);
  uint64_t v1198 = (v1183 & 0x7FFFFFFFFFFFFLL) + (v1197 >> 51);
  unint64_t v1199 = ((__int128)(unint64_t)v1198 >> 51) + (v1189 & 0x7FFFFFFFFFFFFLL);
  unint64_t v1200 = v1194 + 19 * ((__int128)v1199 >> 51);
  unint64_t v1201 = ((__int128)v1200 >> 51) + v1196;
  unint64_t v1202 = ((__int128)v1201 >> 51) + (v1197 & 0x7FFFFFFFFFFFFLL);
  unint64_t v1203 = ((__int128)v1202 >> 51) + (v1198 & 0x7FFFFFFFFFFFFLL);
  unint64_t v1204 = ((__int128)v1203 >> 51) + (v1199 & 0x7FFFFFFFFFFFFLL);
  unint64_t v1205 = (v1200 & 0x7FFFFFFFFFFFFLL) + 19 * ((__int128)v1204 >> 51) + 19;
  unint64_t v1206 = ((__int128)v1205 >> 51) + (v1201 & 0x7FFFFFFFFFFFFLL);
  unint64_t v1207 = ((__int128)v1206 >> 51) + (v1202 & 0x7FFFFFFFFFFFFLL);
  unint64_t v1208 = ((__int128)v1207 >> 51) + (v1203 & 0x7FFFFFFFFFFFFLL);
  unint64_t v1209 = ((__int128)v1208 >> 51) + (v1204 & 0x7FFFFFFFFFFFFLL);
  unint64_t v1210 = (v1205 & 0x7FFFFFFFFFFFFLL) + 19 * ((__int128)v1209 >> 51) + 0x7FFFFFFFFFFEDLL;
  unint64_t v1211 = (v1206 & 0x7FFFFFFFFFFFFLL) + 0x7FFFFFFFFFFFFLL + ((__int128)v1210 >> 51);
  unint64_t v1212 = (v1207 & 0x7FFFFFFFFFFFFLL) + 0x7FFFFFFFFFFFFLL + ((__int128)v1211 >> 51);
  *(void *)&long long v1192 = (v1208 & 0x7FFFFFFFFFFFFLL) + 0x7FFFFFFFFFFFFLL + ((__int128)v1212 >> 51);
  unint64_t v1213 = v1209 + 0x7FFFFFFFFFFFFLL + ((__int128)(unint64_t)v1192 >> 51);
  LOWORD(v1214) = v1210;
  BYTE2(v1214) = BYTE2(v1210);
  BYTE3(v1214) = BYTE3(v1210);
  BYTE4(v1214) = BYTE4(v1210);
  BYTE5(v1214) = BYTE5(v1210);
  BYTE6(v1214) = (v1210 & 0x7000000000000 | (v1211 << 51)) >> 48;
  BYTE7(v1214) = v1211 >> 5;
  BYTE8(v1214) = v1211 >> 13;
  BYTE9(v1214) = v1211 >> 21;
  BYTE10(v1214) = v1211 >> 29;
  BYTE11(v1214) = v1211 >> 37;
  BYTE12(v1214) = ((v1211 >> 13) & 0x3FFFFFFFFFLL | (v1212 << 38)) >> 32;
  BYTE13(v1214) = v1212 >> 2;
  BYTE14(v1214) = v1212 >> 10;
  HIBYTE(v1214) = v1212 >> 18;
  LOBYTE(v1215) = v1212 >> 26;
  BYTE1(v1215) = v1212 >> 34;
  BYTE2(v1215) = v1212 >> 42;
  BYTE3(v1215) = ((v1212 >> 26) & 0x1FFFFFF | ((v1208 - 1 + ((__int128)v1212 >> 51)) << 25)) >> 24;
  BYTE4(v1215) = (unint64_t)v1192 >> 7;
  BYTE5(v1215) = (unint64_t)v1192 >> 15;
  BYTE6(v1215) = (unint64_t)v1192 >> 23;
  HIBYTE(v1215) = (unint64_t)v1192 >> 31;
  v288.i16[0] = ((unint64_t)v1192 >> 39) & 0xFFF;
  v288.i16[1] = (((unint64_t)v1192 >> 39) & 0xFFF | ((v1209
                                                           - 1
                                                           + ((__int128)(unint64_t)v1192 >> 51)) << 12)) >> 8;
  v288.i16[2] = (v1209 - 1 + ((__int128)(unint64_t)v1192 >> 51)) >> 4;
  v288.i16[3] = (v1209 - 1 + ((__int128)(unint64_t)v1192 >> 51)) >> 12;
  *(unsigned char *)(a1 + 28) = (v1209 - 1 + ((__int128)(unint64_t)v1192 >> 51)) >> 20;
  *(unsigned char *)(a1 + 29) = v1213 >> 28;
  *(unsigned char *)(a1 + 30) = v1213 >> 36;
  *(_OWORD *)a1 = v1214;
  *(void *)(a1 + 16) = v1215;
  int8x8_t result = vmovn_s16(v288);
  *(_DWORD *)(a1 + 24) = result.i32[0];
  *(unsigned char *)(a1 + 31) = (v1213 >> 44) & 0x7F;
  return result;
}

uint64_t _sleepWakeCallback(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return [a1 _sleepWakeHandlerForService:a2 type:a3 arg:a4];
}

Class initFBSDisplayLayoutMonitor()
{
  if (FrontBoardServicesLibrary_sOnce != -1) {
    dispatch_once(&FrontBoardServicesLibrary_sOnce, &__block_literal_global_1267);
  }
  Class result = objc_getClass("FBSDisplayLayoutMonitor");
  classFBSDisplayLayoutMonitor = (uint64_t)result;
  getFBSDisplayLayoutMonitorClass[0] = (uint64_t (*)())FBSDisplayLayoutMonitorFunction;
  return result;
}

id FBSDisplayLayoutMonitorFunction()
{
  return (id)classFBSDisplayLayoutMonitor;
}

void *__FrontBoardServicesLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices", 2);
  FrontBoardServicesLibrary_sLib = (uint64_t)result;
  return result;
}

Class initFBSDisplayLayoutMonitorConfiguration()
{
  if (FrontBoardServicesLibrary_sOnce != -1) {
    dispatch_once(&FrontBoardServicesLibrary_sOnce, &__block_literal_global_1267);
  }
  Class result = objc_getClass("FBSDisplayLayoutMonitorConfiguration");
  classFBSDisplayLayoutMonitorConfiguration = (uint64_t)result;
  getFBSDisplayLayoutMonitorConfigurationClass[0] = (uint64_t (*)())FBSDisplayLayoutMonitorConfigurationFunction;
  return result;
}

id FBSDisplayLayoutMonitorConfigurationFunction()
{
  return (id)classFBSDisplayLayoutMonitorConfiguration;
}

id initValSBSDisplayLayoutElementTodayViewIdentifier()
{
  if (SpringBoardServicesLibrary_sOnce != -1) {
    dispatch_once(&SpringBoardServicesLibrary_sOnce, &__block_literal_global_1263);
  }
  os_log_t v0 = (id *)dlsym((void *)SpringBoardServicesLibrary_sLib, "SBSDisplayLayoutElementTodayViewIdentifier");
  if (v0) {
    objc_storeStrong((id *)&constantValSBSDisplayLayoutElementTodayViewIdentifier, *v0);
  }
  getSBSDisplayLayoutElementTodayViewIdentifier[0] = (uint64_t (*)())SBSDisplayLayoutElementTodayViewIdentifierFunction;
  uint64_t v1 = (void *)constantValSBSDisplayLayoutElementTodayViewIdentifier;
  return v1;
}

id SBSDisplayLayoutElementTodayViewIdentifierFunction()
{
  return (id)constantValSBSDisplayLayoutElementTodayViewIdentifier;
}

void *__SpringBoardServicesLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices", 2);
  SpringBoardServicesLibrary_sLib = (uint64_t)result;
  return result;
}

id initValSBSDisplayLayoutElementSpotlightIdentifier()
{
  if (SpringBoardServicesLibrary_sOnce != -1) {
    dispatch_once(&SpringBoardServicesLibrary_sOnce, &__block_literal_global_1263);
  }
  os_log_t v0 = (id *)dlsym((void *)SpringBoardServicesLibrary_sLib, "SBSDisplayLayoutElementSpotlightIdentifier");
  if (v0) {
    objc_storeStrong((id *)&constantValSBSDisplayLayoutElementSpotlightIdentifier, *v0);
  }
  getSBSDisplayLayoutElementSpotlightIdentifier[0] = (uint64_t (*)())SBSDisplayLayoutElementSpotlightIdentifierFunction;
  uint64_t v1 = (void *)constantValSBSDisplayLayoutElementSpotlightIdentifier;
  return v1;
}

id SBSDisplayLayoutElementSpotlightIdentifierFunction()
{
  return (id)constantValSBSDisplayLayoutElementSpotlightIdentifier;
}

id initValSBSDisplayLayoutElementPasscodeIdentifier()
{
  if (SpringBoardServicesLibrary_sOnce != -1) {
    dispatch_once(&SpringBoardServicesLibrary_sOnce, &__block_literal_global_1263);
  }
  os_log_t v0 = (id *)dlsym((void *)SpringBoardServicesLibrary_sLib, "SBSDisplayLayoutElementPasscodeIdentifier");
  if (v0) {
    objc_storeStrong((id *)&constantValSBSDisplayLayoutElementPasscodeIdentifier, *v0);
  }
  getSBSDisplayLayoutElementPasscodeIdentifier[0] = (uint64_t (*)())SBSDisplayLayoutElementPasscodeIdentifierFunction;
  uint64_t v1 = (void *)constantValSBSDisplayLayoutElementPasscodeIdentifier;
  return v1;
}

id SBSDisplayLayoutElementPasscodeIdentifierFunction()
{
  return (id)constantValSBSDisplayLayoutElementPasscodeIdentifier;
}

id initValSBSDisplayLayoutElementNowPlayingIdentifier()
{
  if (SpringBoardServicesLibrary_sOnce != -1) {
    dispatch_once(&SpringBoardServicesLibrary_sOnce, &__block_literal_global_1263);
  }
  os_log_t v0 = (id *)dlsym((void *)SpringBoardServicesLibrary_sLib, "SBSDisplayLayoutElementNowPlayingIdentifier");
  if (v0) {
    objc_storeStrong((id *)&constantValSBSDisplayLayoutElementNowPlayingIdentifier, *v0);
  }
  getSBSDisplayLayoutElementNowPlayingIdentifier[0] = (uint64_t (*)())SBSDisplayLayoutElementNowPlayingIdentifierFunction;
  uint64_t v1 = (void *)constantValSBSDisplayLayoutElementNowPlayingIdentifier;
  return v1;
}

id SBSDisplayLayoutElementNowPlayingIdentifierFunction()
{
  return (id)constantValSBSDisplayLayoutElementNowPlayingIdentifier;
}

id initValSBSDisplayLayoutElementLoginIdentifier()
{
  if (SpringBoardServicesLibrary_sOnce != -1) {
    dispatch_once(&SpringBoardServicesLibrary_sOnce, &__block_literal_global_1263);
  }
  os_log_t v0 = (id *)dlsym((void *)SpringBoardServicesLibrary_sLib, "SBSDisplayLayoutElementLoginIdentifier");
  if (v0) {
    objc_storeStrong((id *)&constantValSBSDisplayLayoutElementLoginIdentifier, *v0);
  }
  getSBSDisplayLayoutElementLoginIdentifier[0] = (uint64_t (*)())SBSDisplayLayoutElementLoginIdentifierFunction;
  uint64_t v1 = (void *)constantValSBSDisplayLayoutElementLoginIdentifier;
  return v1;
}

id SBSDisplayLayoutElementLoginIdentifierFunction()
{
  return (id)constantValSBSDisplayLayoutElementLoginIdentifier;
}

id initValSBSDisplayLayoutElementLockScreenNavigationIdentifier()
{
  if (SpringBoardServicesLibrary_sOnce != -1) {
    dispatch_once(&SpringBoardServicesLibrary_sOnce, &__block_literal_global_1263);
  }
  os_log_t v0 = (id *)dlsym((void *)SpringBoardServicesLibrary_sLib, "SBSDisplayLayoutElementLockScreenNavigationIdentifier");
  if (v0) {
    objc_storeStrong((id *)&constantValSBSDisplayLayoutElementLockScreenNavigationIdentifier, *v0);
  }
  getSBSDisplayLayoutElementLockScreenNavigationIdentifier[0] = (uint64_t (*)())SBSDisplayLayoutElementLockScreenNavigationIdentifierFunction;
  uint64_t v1 = (void *)constantValSBSDisplayLayoutElementLockScreenNavigationIdentifier;
  return v1;
}

id SBSDisplayLayoutElementLockScreenNavigationIdentifierFunction()
{
  return (id)constantValSBSDisplayLayoutElementLockScreenNavigationIdentifier;
}

id initValSBSDisplayLayoutElementHomeScreenIdentifier()
{
  if (SpringBoardServicesLibrary_sOnce != -1) {
    dispatch_once(&SpringBoardServicesLibrary_sOnce, &__block_literal_global_1263);
  }
  os_log_t v0 = (id *)dlsym((void *)SpringBoardServicesLibrary_sLib, "SBSDisplayLayoutElementHomeScreenIdentifier");
  if (v0) {
    objc_storeStrong((id *)&constantValSBSDisplayLayoutElementHomeScreenIdentifier, *v0);
  }
  getSBSDisplayLayoutElementHomeScreenIdentifier[0] = (uint64_t (*)())SBSDisplayLayoutElementHomeScreenIdentifierFunction;
  uint64_t v1 = (void *)constantValSBSDisplayLayoutElementHomeScreenIdentifier;
  return v1;
}

id SBSDisplayLayoutElementHomeScreenIdentifierFunction()
{
  return (id)constantValSBSDisplayLayoutElementHomeScreenIdentifier;
}

id initValSBSDisplayLayoutElementCarPlayOEMIdentifier()
{
  if (SpringBoardServicesLibrary_sOnce != -1) {
    dispatch_once(&SpringBoardServicesLibrary_sOnce, &__block_literal_global_1263);
  }
  os_log_t v0 = (id *)dlsym((void *)SpringBoardServicesLibrary_sLib, "SBSDisplayLayoutElementCarPlayOEMIdentifier");
  if (v0) {
    objc_storeStrong((id *)&constantValSBSDisplayLayoutElementCarPlayOEMIdentifier, *v0);
  }
  getSBSDisplayLayoutElementCarPlayOEMIdentifier[0] = (uint64_t (*)())SBSDisplayLayoutElementCarPlayOEMIdentifierFunction;
  uint64_t v1 = (void *)constantValSBSDisplayLayoutElementCarPlayOEMIdentifier;
  return v1;
}

id SBSDisplayLayoutElementCarPlayOEMIdentifierFunction()
{
  return (id)constantValSBSDisplayLayoutElementCarPlayOEMIdentifier;
}

id initValSBSDisplayLayoutElementAppSwitcherIdentifier()
{
  if (SpringBoardServicesLibrary_sOnce != -1) {
    dispatch_once(&SpringBoardServicesLibrary_sOnce, &__block_literal_global_1263);
  }
  os_log_t v0 = (id *)dlsym((void *)SpringBoardServicesLibrary_sLib, "SBSDisplayLayoutElementAppSwitcherIdentifier");
  if (v0) {
    objc_storeStrong((id *)&constantValSBSDisplayLayoutElementAppSwitcherIdentifier, *v0);
  }
  getSBSDisplayLayoutElementAppSwitcherIdentifier[0] = (uint64_t (*)())SBSDisplayLayoutElementAppSwitcherIdentifierFunction;
  uint64_t v1 = (void *)constantValSBSDisplayLayoutElementAppSwitcherIdentifier;
  return v1;
}

id SBSDisplayLayoutElementAppSwitcherIdentifierFunction()
{
  return (id)constantValSBSDisplayLayoutElementAppSwitcherIdentifier;
}

id initValFBSDisplayLayoutElementSiriIdentifier()
{
  if (FrontBoardServicesLibrary_sOnce != -1) {
    dispatch_once(&FrontBoardServicesLibrary_sOnce, &__block_literal_global_1267);
  }
  os_log_t v0 = (id *)dlsym((void *)FrontBoardServicesLibrary_sLib, "FBSDisplayLayoutElementSiriIdentifier");
  if (v0) {
    objc_storeStrong((id *)&constantValFBSDisplayLayoutElementSiriIdentifier, *v0);
  }
  getFBSDisplayLayoutElementSiriIdentifier[0] = (uint64_t (*)())FBSDisplayLayoutElementSiriIdentifierFunction;
  uint64_t v1 = (void *)constantValFBSDisplayLayoutElementSiriIdentifier;
  return v1;
}

id FBSDisplayLayoutElementSiriIdentifierFunction()
{
  return (id)constantValFBSDisplayLayoutElementSiriIdentifier;
}

id initValFBSDisplayLayoutElementNotificationCenterIdentifier()
{
  if (FrontBoardServicesLibrary_sOnce != -1) {
    dispatch_once(&FrontBoardServicesLibrary_sOnce, &__block_literal_global_1267);
  }
  os_log_t v0 = (id *)dlsym((void *)FrontBoardServicesLibrary_sLib, "FBSDisplayLayoutElementNotificationCenterIdentifier");
  if (v0) {
    objc_storeStrong((id *)&constantValFBSDisplayLayoutElementNotificationCenterIdentifier, *v0);
  }
  getFBSDisplayLayoutElementNotificationCenterIdentifier[0] = (uint64_t (*)())FBSDisplayLayoutElementNotificationCenterIdentifierFunction;
  uint64_t v1 = (void *)constantValFBSDisplayLayoutElementNotificationCenterIdentifier;
  return v1;
}

id FBSDisplayLayoutElementNotificationCenterIdentifierFunction()
{
  return (id)constantValFBSDisplayLayoutElementNotificationCenterIdentifier;
}

id initValFBSDisplayLayoutElementLockScreenIdentifier()
{
  if (FrontBoardServicesLibrary_sOnce != -1) {
    dispatch_once(&FrontBoardServicesLibrary_sOnce, &__block_literal_global_1267);
  }
  os_log_t v0 = (id *)dlsym((void *)FrontBoardServicesLibrary_sLib, "FBSDisplayLayoutElementLockScreenIdentifier");
  if (v0) {
    objc_storeStrong((id *)&constantValFBSDisplayLayoutElementLockScreenIdentifier, *v0);
  }
  getFBSDisplayLayoutElementLockScreenIdentifier[0] = (uint64_t (*)())FBSDisplayLayoutElementLockScreenIdentifierFunction;
  uint64_t v1 = (void *)constantValFBSDisplayLayoutElementLockScreenIdentifier;
  return v1;
}

id FBSDisplayLayoutElementLockScreenIdentifierFunction()
{
  return (id)constantValFBSDisplayLayoutElementLockScreenIdentifier;
}

id initValFBSDisplayLayoutElementControlCenterIdentifier()
{
  if (FrontBoardServicesLibrary_sOnce != -1) {
    dispatch_once(&FrontBoardServicesLibrary_sOnce, &__block_literal_global_1267);
  }
  os_log_t v0 = (id *)dlsym((void *)FrontBoardServicesLibrary_sLib, "FBSDisplayLayoutElementControlCenterIdentifier");
  if (v0) {
    objc_storeStrong((id *)&constantValFBSDisplayLayoutElementControlCenterIdentifier, *v0);
  }
  getFBSDisplayLayoutElementControlCenterIdentifier[0] = (uint64_t (*)())FBSDisplayLayoutElementControlCenterIdentifierFunction;
  uint64_t v1 = (void *)constantValFBSDisplayLayoutElementControlCenterIdentifier;
  return v1;
}

id FBSDisplayLayoutElementControlCenterIdentifierFunction()
{
  return (id)constantValFBSDisplayLayoutElementControlCenterIdentifier;
}

uint64_t _systemConfigChanged(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3[65]) {
    return [a3 _systemConfigChanged:a2 initial:0];
  }
  return result;
}

uint64_t initSBSGetScreenLockStatus(uint64_t a1)
{
  if (SpringBoardServicesLibrary_sOnce != -1) {
    dispatch_once(&SpringBoardServicesLibrary_sOnce, &__block_literal_global_1263);
  }
  uint64_t v2 = (uint64_t (*)())dlsym((void *)SpringBoardServicesLibrary_sLib, "SBSGetScreenLockStatus");
  softLinkSBSGetScreenLockStatus = v2;
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

uint64_t initValkCTCellMonitorMCC()
{
  if (CoreCDPLibrary_sOnce != -1) {
    dispatch_once(&CoreCDPLibrary_sOnce, &__block_literal_global_1208);
  }
  os_log_t v0 = (uint64_t *)dlsym((void *)CoreCDPLibrary_sLib, "kCTCellMonitorMCC");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkCTCellMonitorMCC = result;
  }
  else
  {
    uint64_t result = constantValkCTCellMonitorMCC;
  }
  getkCTCellMonitorMCC[0] = kCTCellMonitorMCCFunction;
  return result;
}

uint64_t kCTCellMonitorMCCFunction()
{
  return constantValkCTCellMonitorMCC;
}

void *__CoreCDPLibrary_block_invoke()
{
  uint64_t result = dlopen("/System/Library/PrivateFrameworks/CoreCDP.framework/CoreCDP", 2);
  CoreCDPLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t init_CTServerConnectionCopyISOForMCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (CoreTelephonyLibrary_sOnce != -1) {
    dispatch_once(&CoreTelephonyLibrary_sOnce, &__block_literal_global_1253);
  }
  uint64_t v6 = (uint64_t (*)())dlsym((void *)CoreTelephonyLibrary_sLib, "_CTServerConnectionCopyISOForMCC");
  softLink_CTServerConnectionCopyISOForMCC[0] = v6;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(a1, a2, a3);
}

void *__CoreTelephonyLibrary_block_invoke()
{
  uint64_t result = dlopen("/System/Library/Frameworks/CoreTelephony.framework/CoreTelephony", 2);
  CoreTelephonyLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t init_CTServerConnectionCreateOnTargetQueue(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v7 = CoreTelephonyLibrary_sOnce;
  id v8 = a4;
  id v9 = a3;
  if (v7 != -1) {
    dispatch_once(&CoreTelephonyLibrary_sOnce, &__block_literal_global_1253);
  }
  softLink_CTServerConnectionCreateOnTargetQueue[0] = (uint64_t (*)())dlsym((void *)CoreTelephonyLibrary_sLib, "_CTServerConnectionCreateOnTargetQueue");
  uint64_t v10 = ((uint64_t (*)(uint64_t, uint64_t, id, id))softLink_CTServerConnectionCreateOnTargetQueue[0])(a1, a2, v9, v8);

  return v10;
}

Class initRTRoutineManager()
{
  if (CoreRoutineLibrary_sOnce != -1) {
    dispatch_once(&CoreRoutineLibrary_sOnce, &__block_literal_global_1257);
  }
  Class result = objc_getClass("RTRoutineManager");
  classRTRoutineManager = (uint64_t)result;
  getRTRoutineManagerClass[0] = (uint64_t (*)())RTRoutineManagerFunction;
  return result;
}

id RTRoutineManagerFunction()
{
  return (id)classRTRoutineManager;
}

void *__CoreRoutineLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/CoreRoutine.framework/CoreRoutine", 2);
  CoreRoutineLibrary_sLib = (uint64_t)result;
  return result;
}

Class initCoreTelephonyClient()
{
  if (CoreTelephonyLibrary_sOnce != -1) {
    dispatch_once(&CoreTelephonyLibrary_sOnce, &__block_literal_global_1253);
  }
  Class result = objc_getClass("CoreTelephonyClient");
  classCoreTelephonyClient = (uint64_t)result;
  getCoreTelephonyClientClass[0] = (uint64_t (*)())CoreTelephonyClientFunction;
  return result;
}

id CoreTelephonyClientFunction()
{
  return (id)classCoreTelephonyClient;
}

Class initAKAccountManager_8215()
{
  if (AuthKitLibrary_sOnce_8216 != -1) {
    dispatch_once(&AuthKitLibrary_sOnce_8216, &__block_literal_global_1249);
  }
  Class result = objc_getClass("AKAccountManager");
  classAKAccountManager_8217 = (uint64_t)result;
  getAKAccountManagerClass_8207 = (uint64_t (*)())AKAccountManagerFunction_8219;
  return result;
}

id AKAccountManagerFunction_8219()
{
  return (id)classAKAccountManager_8217;
}

void *__AuthKitLibrary_block_invoke_8221()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/AuthKit.framework/AuthKit", 2);
  AuthKitLibrary_sLib_8222 = (uint64_t)result;
  return result;
}

Class initACAccountStore_8226()
{
  if (AccountsLibrary_sOnce_8227 != -1) {
    dispatch_once(&AccountsLibrary_sOnce_8227, &__block_literal_global_1245);
  }
  Class result = objc_getClass("ACAccountStore");
  classACAccountStore_8228 = (uint64_t)result;
  getACAccountStoreClass_8224 = (uint64_t (*)())ACAccountStoreFunction_8230;
  return result;
}

id ACAccountStoreFunction_8230()
{
  return (id)classACAccountStore_8228;
}

void *__AccountsLibrary_block_invoke_8232()
{
  Class result = dlopen("/System/Library/Frameworks/Accounts.framework/Accounts", 2);
  AccountsLibrary_sLib_8233 = (uint64_t)result;
  return result;
}

void *__AppleAccountLibrary_block_invoke_8235()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/AppleAccount.framework/AppleAccount", 2);
  AppleAccountLibrary_sLib_8236 = (uint64_t)result;
  return result;
}

id logger_8247()
{
  if (sCUOSLogCreateOnce_logger_8248 != -1) {
    dispatch_once(&sCUOSLogCreateOnce_logger_8248, &__block_literal_global_1239);
  }
  os_log_t v0 = (void *)sCUOSLogHandle_logger_8249;
  return v0;
}

uint64_t __logger_block_invoke_8251()
{
  os_log_t v0 = os_log_create("com.apple.CoreUtils", "CUSystemMonitor");
  uint64_t v1 = sCUOSLogHandle_logger_8249;
  sCUOSLogHandle_logger_8249 = (uint64_t)v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

Class initCMDeviceOrientationManager()
{
  if (CoreMotionLibrary_sOnce != -1) {
    dispatch_once(&CoreMotionLibrary_sOnce, &__block_literal_global_1226);
  }
  Class result = objc_getClass("CMDeviceOrientationManager");
  classCMDeviceOrientationManager = (uint64_t)result;
  getCMDeviceOrientationManagerClass[0] = (uint64_t (*)())CMDeviceOrientationManagerFunction;
  return result;
}

id CMDeviceOrientationManagerFunction()
{
  return (id)classCMDeviceOrientationManager;
}

void *__CoreMotionLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/Frameworks/CoreMotion.framework/CoreMotion", 2);
  CoreMotionLibrary_sLib = (uint64_t)result;
  return result;
}

Class initCMMotionActivityManager()
{
  if (CoreMotionLibrary_sOnce != -1) {
    dispatch_once(&CoreMotionLibrary_sOnce, &__block_literal_global_1226);
  }
  Class result = objc_getClass("CMMotionActivityManager");
  classCMMotionActivityManager = (uint64_t)result;
  getCMMotionActivityManagerClass[0] = (uint64_t (*)())CMMotionActivityManagerFunction;
  return result;
}

id CMMotionActivityManagerFunction()
{
  return (id)classCMMotionActivityManager;
}

Class initFMFSession()
{
  if (FMFLibrary_sOnce != -1) {
    dispatch_once(&FMFLibrary_sOnce, &__block_literal_global_1220);
  }
  Class result = objc_getClass("FMFSession");
  classFMFSession = (uint64_t)result;
  getFMFSessionClass = (uint64_t (*)())FMFSessionFunction;
  return result;
}

void *__FMFLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/FMF.framework/FMF", 2);
  FMFLibrary_sLib = (uint64_t)result;
  return result;
}

id initValFMFDevicesChangedNotification()
{
  if (FMFLibrary_sOnce != -1) {
    dispatch_once(&FMFLibrary_sOnce, &__block_literal_global_1220);
  }
  os_log_t v0 = (id *)dlsym((void *)FMFLibrary_sLib, "FMFDevicesChangedNotification");
  if (v0) {
    objc_storeStrong((id *)&constantValFMFDevicesChangedNotification, *v0);
  }
  getFMFDevicesChangedNotification = (uint64_t (*)())FMFDevicesChangedNotificationFunction;
  uint64_t v1 = (void *)constantValFMFDevicesChangedNotification;
  return v1;
}

id FMFDevicesChangedNotificationFunction()
{
  return (id)constantValFMFDevicesChangedNotification;
}

id initValFMFMeDeviceChangedNotification()
{
  if (FMFLibrary_sOnce != -1) {
    dispatch_once(&FMFLibrary_sOnce, &__block_literal_global_1220);
  }
  os_log_t v0 = (id *)dlsym((void *)FMFLibrary_sLib, "FMFMeDeviceChangedNotification");
  if (v0) {
    objc_storeStrong((id *)&constantValFMFMeDeviceChangedNotification, *v0);
  }
  getFMFMeDeviceChangedNotification = (uint64_t (*)())FMFMeDeviceChangedNotificationFunction;
  uint64_t v1 = (void *)constantValFMFMeDeviceChangedNotification;
  return v1;
}

id FMFMeDeviceChangedNotificationFunction()
{
  return (id)constantValFMFMeDeviceChangedNotification;
}

Class initCUFindMyLocateMeDeviceMonitor()
{
  if (CoreUtilsUILibrary_sOnce != -1) {
    dispatch_once(&CoreUtilsUILibrary_sOnce, &__block_literal_global_1216);
  }
  Class result = objc_getClass("CUFindMyLocateMeDeviceMonitor");
  classCUFindMyLocateMeDeviceMonitor = (uint64_t)result;
  getCUFindMyLocateMeDeviceMonitorClass[0] = (uint64_t (*)())CUFindMyLocateMeDeviceMonitorFunction;
  return result;
}

id CUFindMyLocateMeDeviceMonitorFunction()
{
  return (id)classCUFindMyLocateMeDeviceMonitor;
}

void *__CoreUtilsUILibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/CoreUtilsUI.framework/CoreUtilsUI", 2);
  CoreUtilsUILibrary_sLib = (uint64_t)result;
  return result;
}

void sub_18E39CCC4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

Class initCDPContext()
{
  if (CoreCDPLibrary_sOnce != -1) {
    dispatch_once(&CoreCDPLibrary_sOnce, &__block_literal_global_1208);
  }
  Class result = objc_getClass("CDPContext");
  classCDPContext = (uint64_t)result;
  getCDPContextClass = (uint64_t (*)())CDPContextFunction;
  return result;
}

id CDPContextFunction()
{
  return (id)classCDPContext;
}

Class initCDPStateController()
{
  if (CoreCDPLibrary_sOnce != -1) {
    dispatch_once(&CoreCDPLibrary_sOnce, &__block_literal_global_1208);
  }
  Class result = objc_getClass("CDPStateController");
  classCDPStateController = (uint64_t)result;
  getCDPStateControllerClass = (uint64_t (*)())CDPStateControllerFunction;
  return result;
}

id CDPStateControllerFunction()
{
  return (id)classCDPStateController;
}

uint64_t initValCDPManateeAvailabilityNotification()
{
  if (CoreCDPLibrary_sOnce != -1) {
    dispatch_once(&CoreCDPLibrary_sOnce, &__block_literal_global_1208);
  }
  os_log_t v0 = (uint64_t *)dlsym((void *)CoreCDPLibrary_sLib, "CDPManateeAvailabilityNotification");
  if (v0)
  {
    uint64_t result = *v0;
    constantValCDPManateeAvailabilityNotification = result;
  }
  else
  {
    uint64_t result = constantValCDPManateeAvailabilityNotification;
  }
  getCDPManateeAvailabilityNotification = CDPManateeAvailabilityNotificationFunction;
  return result;
}

uint64_t CDPManateeAvailabilityNotificationFunction()
{
  return constantValCDPManateeAvailabilityNotification;
}

Class initCLLocationManager()
{
  if (CoreLocationLibrary_sOnce != -1) {
    dispatch_once(&CoreLocationLibrary_sOnce, &__block_literal_global_1197);
  }
  Class result = objc_getClass("CLLocationManager");
  classCLLocationManager = (uint64_t)result;
  getCLLocationManagerClass[0] = (uint64_t (*)())CLLocationManagerFunction;
  return result;
}

id CLLocationManagerFunction()
{
  return (id)classCLLocationManager;
}

void *__CoreLocationLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/Frameworks/CoreLocation.framework/CoreLocation", 2);
  CoreLocationLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t *initValkCLLocationAccuracyHundredMeters()
{
  if (CoreLocationLibrary_sOnce != -1) {
    dispatch_once(&CoreLocationLibrary_sOnce, &__block_literal_global_1197);
  }
  Class result = (uint64_t *)dlsym((void *)CoreLocationLibrary_sLib, "kCLLocationAccuracyHundredMeters");
  if (result) {
    constantValkCLLocationAccuracyHundredMeters = *result;
  }
  getkCLLocationAccuracyHundredMeters[0] = (uint64_t (*)())kCLLocationAccuracyHundredMetersFunction;
  return result;
}

double kCLLocationAccuracyHundredMetersFunction()
{
  return *(double *)&constantValkCLLocationAccuracyHundredMeters;
}

Class initFAFamilyMember()
{
  if (FamilyCircleLibrary_sOnce != -1) {
    dispatch_once(&FamilyCircleLibrary_sOnce, &__block_literal_global_1192);
  }
  Class result = objc_getClass("FAFamilyMember");
  classFAFamilyMember = (uint64_t)result;
  getFAFamilyMemberClass[0] = (uint64_t (*)())FAFamilyMemberFunction;
  return result;
}

id FAFamilyMemberFunction()
{
  return (id)classFAFamilyMember;
}

void *__FamilyCircleLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/FamilyCircle.framework/FamilyCircle", 2);
  FamilyCircleLibrary_sLib = (uint64_t)result;
  return result;
}

Class initFAFetchFamilyCircleRequest()
{
  if (FamilyCircleLibrary_sOnce != -1) {
    dispatch_once(&FamilyCircleLibrary_sOnce, &__block_literal_global_1192);
  }
  Class result = objc_getClass("FAFetchFamilyCircleRequest");
  classFAFetchFamilyCircleRequest = (uint64_t)result;
  getFAFetchFamilyCircleRequestClass[0] = (uint64_t (*)())FAFetchFamilyCircleRequestFunction;
  return result;
}

id FAFetchFamilyCircleRequestFunction()
{
  return (id)classFAFetchFamilyCircleRequest;
}

uint64_t initBYSetupAssistantNeedsToRun()
{
  if (SetupAssistantLibrary_sOnce != -1) {
    dispatch_once(&SetupAssistantLibrary_sOnce, &__block_literal_global_1188);
  }
  os_log_t v0 = (uint64_t (*)())dlsym((void *)SetupAssistantLibrary_sLib, "BYSetupAssistantNeedsToRun");
  softLinkBYSetupAssistantNeedsToRun[0] = v0;
  return v0();
}

void *__SetupAssistantLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/SetupAssistant.framework/SetupAssistant", 2);
  SetupAssistantLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t initValBYSetupAssistantFinishedDarwinNotification()
{
  if (SetupAssistantLibrary_sOnce != -1) {
    dispatch_once(&SetupAssistantLibrary_sOnce, &__block_literal_global_1188);
  }
  os_log_t v0 = (uint64_t *)dlsym((void *)SetupAssistantLibrary_sLib, "BYSetupAssistantFinishedDarwinNotification");
  if (v0)
  {
    uint64_t result = *v0;
    constantValBYSetupAssistantFinishedDarwinNotification = result;
  }
  else
  {
    uint64_t result = constantValBYSetupAssistantFinishedDarwinNotification;
  }
  getBYSetupAssistantFinishedDarwinNotification[0] = BYSetupAssistantFinishedDarwinNotificationFunction;
  return result;
}

uint64_t BYSetupAssistantFinishedDarwinNotificationFunction()
{
  return constantValBYSetupAssistantFinishedDarwinNotification;
}

id initValTUCallCenterVideoCallStatusChangedNotification()
{
  if (TelephonyUtilitiesLibrary_sOnce != -1) {
    dispatch_once(&TelephonyUtilitiesLibrary_sOnce, &__block_literal_global_1177);
  }
  os_log_t v0 = (id *)dlsym((void *)TelephonyUtilitiesLibrary_sLib, "TUCallCenterVideoCallStatusChangedNotification");
  if (v0) {
    objc_storeStrong((id *)&constantValTUCallCenterVideoCallStatusChangedNotification, *v0);
  }
  getTUCallCenterVideoCallStatusChangedNotification[0] = (uint64_t (*)())TUCallCenterVideoCallStatusChangedNotificationFunction;
  uint64_t v1 = (void *)constantValTUCallCenterVideoCallStatusChangedNotification;
  return v1;
}

id TUCallCenterVideoCallStatusChangedNotificationFunction()
{
  return (id)constantValTUCallCenterVideoCallStatusChangedNotification;
}

void *__TelephonyUtilitiesLibrary_block_invoke()
{
  uint64_t result = dlopen("/System/Library/PrivateFrameworks/TelephonyUtilities.framework/TelephonyUtilities", 2);
  TelephonyUtilitiesLibrary_sLib = (uint64_t)result;
  return result;
}

id initValTUCallCenterCallConnectedNotification()
{
  if (TelephonyUtilitiesLibrary_sOnce != -1) {
    dispatch_once(&TelephonyUtilitiesLibrary_sOnce, &__block_literal_global_1177);
  }
  os_log_t v0 = (id *)dlsym((void *)TelephonyUtilitiesLibrary_sLib, "TUCallCenterCallConnectedNotification");
  if (v0) {
    objc_storeStrong((id *)&constantValTUCallCenterCallConnectedNotification, *v0);
  }
  getTUCallCenterCallConnectedNotification[0] = (uint64_t (*)())TUCallCenterCallConnectedNotificationFunction;
  uint64_t v1 = (void *)constantValTUCallCenterCallConnectedNotification;
  return v1;
}

id TUCallCenterCallConnectedNotificationFunction()
{
  return (id)constantValTUCallCenterCallConnectedNotification;
}

id initValTUCallCenterCallStatusChangedNotification()
{
  if (TelephonyUtilitiesLibrary_sOnce != -1) {
    dispatch_once(&TelephonyUtilitiesLibrary_sOnce, &__block_literal_global_1177);
  }
  os_log_t v0 = (id *)dlsym((void *)TelephonyUtilitiesLibrary_sLib, "TUCallCenterCallStatusChangedNotification");
  if (v0) {
    objc_storeStrong((id *)&constantValTUCallCenterCallStatusChangedNotification, *v0);
  }
  getTUCallCenterCallStatusChangedNotification[0] = (uint64_t (*)())TUCallCenterCallStatusChangedNotificationFunction;
  uint64_t v1 = (void *)constantValTUCallCenterCallStatusChangedNotification;
  return v1;
}

id TUCallCenterCallStatusChangedNotificationFunction()
{
  return (id)constantValTUCallCenterCallStatusChangedNotification;
}

Class initCXCallObserver()
{
  if (CallKitLibrary_sOnce != -1) {
    dispatch_once(&CallKitLibrary_sOnce, &__block_literal_global_1184);
  }
  Class result = objc_getClass("CXCallObserver");
  classCXCallObserver = (uint64_t)result;
  getCXCallObserverClass[0] = (uint64_t (*)())CXCallObserverFunction;
  return result;
}

id CXCallObserverFunction()
{
  return (id)classCXCallObserver;
}

void *__CallKitLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/Frameworks/CallKit.framework/CallKit", 2);
  CallKitLibrary_sLib = (uint64_t)result;
  return result;
}

Class initTUCallCenter()
{
  if (TelephonyUtilitiesLibrary_sOnce != -1) {
    dispatch_once(&TelephonyUtilitiesLibrary_sOnce, &__block_literal_global_1177);
  }
  Class result = objc_getClass("TUCallCenter");
  classTUCallCenter = (uint64_t)result;
  getTUCallCenterClass[0] = (uint64_t (*)())TUCallCenterFunction;
  return result;
}

id TUCallCenterFunction()
{
  return (id)classTUCallCenter;
}

void initAnalyticsSendEvent_8658(void *a1, void *a2)
{
  uint64_t v3 = CoreAnalyticsLibrary_sOnce_8643;
  id v4 = a2;
  id v5 = a1;
  if (v3 != -1) {
    dispatch_once(&CoreAnalyticsLibrary_sOnce_8643, &__block_literal_global_8644);
  }
  softLinkAnalyticsSendEvent_8656 = (uint64_t (*)())dlsym((void *)CoreAnalyticsLibrary_sLib_8645, "AnalyticsSendEvent");
  ((void (*)(id, id))softLinkAnalyticsSendEvent_8656)(v5, v4);
}

void *__CoreAnalyticsLibrary_block_invoke_8677()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/CoreAnalytics.framework/CoreAnalytics", 2);
  CoreAnalyticsLibrary_sLib_8645 = (uint64_t)result;
  return result;
}

void _connectHandler(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*(unsigned char *)(a3 + 112))
  {
    uint64_t v11 = *(dispatch_queue_t **)(a3 + 8);
    if (!v11) {
      goto LABEL_5;
    }
    dispatch_async_f(v11[13], v11, (dispatch_function_t)_AsyncConnection_UserRelease);
  }
  *(void *)(a3 + 8) = 0;
LABEL_5:
  if (!a2)
  {
    if (*(unsigned char *)(a3 + 112))
    {
      NSErrorWithOSStatusF(4294960573, (uint64_t)"Invalidated (C)", a3, a4, a5, a6, a7, a8, v27);
      id v12 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      *(_DWORD *)(a3 + 304) = a1;
      id v29 = 0;
      [(id)a3 _setupIOAndReturnError:&v29];
      id v12 = v29;
      a1 = -1;
    }
    goto LABEL_8;
  }
  NSErrorWithOSStatusF(a2, (uint64_t)"Connect failed", a3, a4, a5, a6, a7, a8, v27);
  id v12 = (id)objc_claimAutoreleasedReturnValue();
  if (!*(unsigned char *)(a3 + 112) && *(void *)(a3 + 328))
  {
    int8x16_t v19 = *(int **)(a3 + 216);
    if (*v19 <= 30)
    {
      if (*v19 == -1)
      {
        if (!_LogCategory_Initialize((uint64_t)v19, 0x1Eu)) {
          goto LABEL_26;
        }
        int8x16_t v19 = *(int **)(a3 + 216);
      }
      LogPrintF((uint64_t)v19, (uint64_t)"void _connectHandler(SocketRef, OSStatus, void * _Nonnull)", 0x1Eu, (uint64_t)"Connect failed. Reconfirming with Bonjour\n", v15, v16, v17, v18, v28);
    }
LABEL_26:
    uint64_t v20 = CUBonjourDeviceReconfirm(*(void **)(a3 + 328));
    if (v20)
    {
      uint64_t v25 = v20;
      uint64_t v26 = *(int **)(a3 + 216);
      if (*v26 <= 60)
      {
        if (*v26 == -1)
        {
          if (!_LogCategory_Initialize((uint64_t)v26, 0x3Cu)) {
            goto LABEL_8;
          }
          uint64_t v26 = *(int **)(a3 + 216);
        }
        LogPrintF((uint64_t)v26, (uint64_t)"void _connectHandler(SocketRef, OSStatus, void * _Nonnull)", 0x3Cu, (uint64_t)"### Reconfirming with Bonjour failed: %#m\n", v21, v22, v23, v24, v25);
      }
    }
  }
LABEL_8:
  uint64_t v13 = *(void *)(a3 + 88);
  if (v13)
  {
    (*(void (**)(uint64_t, id))(v13 + 16))(v13, v12);
    uint64_t v14 = *(void **)(a3 + 88);
    *(void *)(a3 + 88) = 0;
  }
  if (!v12)
  {
    [(id)a3 _processReads:0];
    [(id)a3 _processWrites:0];
  }
  if (*(unsigned char *)(a3 + 112)) {
    [(id)a3 _invalidated];
  }
  if ((a1 & 0x80000000) == 0 && close(a1) && *__error()) {
    __error();
  }
}

void _connectCompletion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)(a1 + 16);
  if (*(unsigned char *)(v9 + 112))
  {
    *(void *)(v9 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 12);
    if (v10)
    {
LABEL_3:
      uint64_t v11 = "Connect failed";
      goto LABEL_23;
    }
LABEL_22:
    uint64_t v11 = "Invalidated (C)";
    uint64_t v10 = 4294960573;
LABEL_23:
    NSErrorWithOSStatusF(v10, (uint64_t)v11, a3, a4, a5, a6, a7, a8, v23);
    id v19 = (id)objc_claimAutoreleasedReturnValue();
    if (v19) {
      goto LABEL_26;
    }
    goto LABEL_24;
  }
  id v12 = *(dispatch_queue_t **)(v9 + 8);
  if (v12)
  {
    dispatch_async_f(v12[13], v12, (dispatch_function_t)_AsyncConnection_UserRelease);
    *(void *)(v9 + 8) = 0;
    int v13 = *(unsigned __int8 *)(v9 + 112);
    uint64_t v14 = (unsigned int *)(a1 + 12);
    uint64_t v10 = *(unsigned int *)(a1 + 12);
    if (!v10) {
      goto LABEL_21;
    }
    if (*(unsigned char *)(v9 + 112)) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v14 = (unsigned int *)(a1 + 12);
    uint64_t v10 = *(unsigned int *)(a1 + 12);
    if (!v10) {
      goto LABEL_24;
    }
  }
  if (!*(void *)(v9 + 328)) {
    goto LABEL_19;
  }
  uint64_t v15 = *(int **)(v9 + 216);
  if (*v15 <= 30)
  {
    if (*v15 != -1)
    {
LABEL_12:
      LogPrintF((uint64_t)v15, (uint64_t)"void _connectCompletion(AsyncConnectionCompletionInfo * _Nonnull)", 0x1Eu, (uint64_t)"Connect failed. Reconfirming with Bonjour: %#m\n", a5, a6, a7, a8, v10);
      goto LABEL_14;
    }
    if (_LogCategory_Initialize(*(void *)(v9 + 216), 0x1Eu))
    {
      uint64_t v15 = *(int **)(v9 + 216);
      uint64_t v10 = *v14;
      goto LABEL_12;
    }
  }
LABEL_14:
  uint64_t v16 = CUBonjourDeviceReconfirm(*(void **)(v9 + 328));
  if (!v16) {
    goto LABEL_19;
  }
  uint64_t v17 = v16;
  uint64_t v18 = *(int **)(v9 + 216);
  if (*v18 > 60) {
    goto LABEL_19;
  }
  if (*v18 == -1)
  {
    if (!_LogCategory_Initialize((uint64_t)v18, 0x3Cu)) {
      goto LABEL_19;
    }
    uint64_t v18 = *(int **)(v9 + 216);
  }
  LogPrintF((uint64_t)v18, (uint64_t)"void _connectCompletion(AsyncConnectionCompletionInfo * _Nonnull)", 0x3Cu, (uint64_t)"### Reconfirming with Bonjour failed: %#m\n", a5, a6, a7, a8, v17);
LABEL_19:
  uint64_t v10 = *v14;
  if (v10) {
    goto LABEL_3;
  }
  int v13 = *(unsigned __int8 *)(v9 + 112);
LABEL_21:
  if (v13) {
    goto LABEL_22;
  }
LABEL_24:
  *(_DWORD *)(v9 + 304) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = -1;
  objc_storeStrong((id *)(v9 + 392), *(id *)(a1 + 24));
  *(void *)(a1 + 24) = 0;
  id v24 = 0;
  [(id)v9 _setupIOAndReturnError:&v24];
  id v19 = v24;
  if (!v19)
  {
    [(id)v9 _processReads:0];
    [(id)v9 _processWrites:0];
  }
LABEL_26:
  uint64_t v20 = *(void *)(v9 + 88);
  if (v20)
  {
    (*(void (**)(uint64_t, id))(v20 + 16))(v20, v19);
    uint64_t v21 = *(void **)(v9 + 88);
    *(void *)(v9 + 88) = 0;
  }
  if (*(unsigned char *)(v9 + 112)) {
    [(id)v9 _invalidated];
  }
  int v22 = *(_DWORD *)(a1 + 8);
  if ((v22 & 0x80000000) == 0)
  {
    if (close(v22) && *__error()) {
      __error();
    }
    *(_DWORD *)(a1 + 8) = -1;
  }
}

void sub_18E3A8B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  (*(void (**)(uint64_t))(v11 + 16))(v11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__8988(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__8989(uint64_t a1)
{
}

void _responseCallback(uint64_t a1, uint64_t a2)
{
  pthread_mutex_lock(&gCUUserAlertMutex);
  id v4 = (void *)gCUUserAlertMap;
  id v5 = [NSNumber numberWithLong:a1];
  id v6 = [v4 objectForKeyedSubscript:v5];

  pthread_mutex_unlock(&gCUUserAlertMutex);
  [v6 _responseCallback:a1 responseFlags:a2];
}

id initValUNNotificationDismissActionIdentifier()
{
  if (UserNotificationsLibrary_sOnce != -1) {
    dispatch_once(&UserNotificationsLibrary_sOnce, &__block_literal_global_9241);
  }
  os_log_t v0 = (id *)dlsym((void *)UserNotificationsLibrary_sLib, "UNNotificationDismissActionIdentifier");
  if (v0) {
    objc_storeStrong((id *)&constantValUNNotificationDismissActionIdentifier, *v0);
  }
  getUNNotificationDismissActionIdentifier[0] = (uint64_t (*)())UNNotificationDismissActionIdentifierFunction;
  uint64_t v1 = (void *)constantValUNNotificationDismissActionIdentifier;
  return v1;
}

id UNNotificationDismissActionIdentifierFunction()
{
  return (id)constantValUNNotificationDismissActionIdentifier;
}

void *__UserNotificationsLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/Frameworks/UserNotifications.framework/UserNotifications", 2);
  UserNotificationsLibrary_sLib = (uint64_t)result;
  return result;
}

id initValUNNotificationDefaultActionIdentifier()
{
  if (UserNotificationsLibrary_sOnce != -1) {
    dispatch_once(&UserNotificationsLibrary_sOnce, &__block_literal_global_9241);
  }
  os_log_t v0 = (id *)dlsym((void *)UserNotificationsLibrary_sLib, "UNNotificationDefaultActionIdentifier");
  if (v0) {
    objc_storeStrong((id *)&constantValUNNotificationDefaultActionIdentifier, *v0);
  }
  getUNNotificationDefaultActionIdentifier[0] = (uint64_t (*)())UNNotificationDefaultActionIdentifierFunction;
  uint64_t v1 = (void *)constantValUNNotificationDefaultActionIdentifier;
  return v1;
}

id UNNotificationDefaultActionIdentifierFunction()
{
  return (id)constantValUNNotificationDefaultActionIdentifier;
}

Class initUNNotificationRequest()
{
  if (UserNotificationsLibrary_sOnce != -1) {
    dispatch_once(&UserNotificationsLibrary_sOnce, &__block_literal_global_9241);
  }
  Class result = objc_getClass("UNNotificationRequest");
  classUNNotificationRequest = (uint64_t)result;
  getUNNotificationRequestClass[0] = (uint64_t (*)())UNNotificationRequestFunction;
  return result;
}

id UNNotificationRequestFunction()
{
  return (id)classUNNotificationRequest;
}

Class initUNNotificationSound()
{
  if (UserNotificationsLibrary_sOnce != -1) {
    dispatch_once(&UserNotificationsLibrary_sOnce, &__block_literal_global_9241);
  }
  Class result = objc_getClass("UNNotificationSound");
  classUNNotificationSound = (uint64_t)result;
  getUNNotificationSoundClass[0] = (uint64_t (*)())UNNotificationSoundFunction;
  return result;
}

id UNNotificationSoundFunction()
{
  return (id)classUNNotificationSound;
}

Class initUNNotificationIcon()
{
  if (UserNotificationsLibrary_sOnce != -1) {
    dispatch_once(&UserNotificationsLibrary_sOnce, &__block_literal_global_9241);
  }
  Class result = objc_getClass("UNNotificationIcon");
  classUNNotificationIcon = (uint64_t)result;
  getUNNotificationIconClass[0] = (uint64_t (*)())UNNotificationIconFunction;
  return result;
}

id UNNotificationIconFunction()
{
  return (id)classUNNotificationIcon;
}

Class initUNMutableNotificationContent()
{
  if (UserNotificationsLibrary_sOnce != -1) {
    dispatch_once(&UserNotificationsLibrary_sOnce, &__block_literal_global_9241);
  }
  Class result = objc_getClass("UNMutableNotificationContent");
  classUNMutableNotificationContent = (uint64_t)result;
  getUNMutableNotificationContentClass[0] = (uint64_t (*)())UNMutableNotificationContentFunction;
  return result;
}

id UNMutableNotificationContentFunction()
{
  return (id)classUNMutableNotificationContent;
}

Class initUNUserNotificationCenter()
{
  if (UserNotificationsLibrary_sOnce != -1) {
    dispatch_once(&UserNotificationsLibrary_sOnce, &__block_literal_global_9241);
  }
  Class result = objc_getClass("UNUserNotificationCenter");
  classUNUserNotificationCenter = (uint64_t)result;
  getUNUserNotificationCenterClass[0] = (uint64_t (*)())UNUserNotificationCenterFunction;
  return result;
}

id UNUserNotificationCenterFunction()
{
  return (id)classUNUserNotificationCenter;
}

Class initUNNotificationCategory()
{
  if (UserNotificationsLibrary_sOnce != -1) {
    dispatch_once(&UserNotificationsLibrary_sOnce, &__block_literal_global_9241);
  }
  Class result = objc_getClass("UNNotificationCategory");
  classUNNotificationCategory = (uint64_t)result;
  getUNNotificationCategoryClass[0] = (uint64_t (*)())UNNotificationCategoryFunction;
  return result;
}

id UNNotificationCategoryFunction()
{
  return (id)classUNNotificationCategory;
}

Class initUNNotificationAction()
{
  if (UserNotificationsLibrary_sOnce != -1) {
    dispatch_once(&UserNotificationsLibrary_sOnce, &__block_literal_global_9241);
  }
  Class result = objc_getClass("UNNotificationAction");
  classUNNotificationAction = (uint64_t)result;
  getUNNotificationActionClass[0] = (uint64_t (*)())UNNotificationActionFunction;
  return result;
}

id UNNotificationActionFunction()
{
  return (id)classUNNotificationAction;
}

Class initAVAudioSession_9448()
{
  if (AVFoundationLibrary_sOnce_9449 != -1) {
    dispatch_once(&AVFoundationLibrary_sOnce_9449, &__block_literal_global_128);
  }
  Class result = objc_getClass("AVAudioSession");
  classAVAudioSession_9451 = (uint64_t)result;
  getAVAudioSessionClass_9438 = (uint64_t (*)())AVAudioSessionFunction_9453;
  return result;
}

id AVAudioSessionFunction_9453()
{
  return (id)classAVAudioSession_9451;
}

void *__AVFoundationLibrary_block_invoke_9455()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/AVFoundation.framework/AVFoundation", 2);
  AVFoundationLibrary_sLib_9457 = (uint64_t)result;
  return result;
}

Class initSiriTTSSpeechRequest()
{
  if (SiriTTSServiceLibrary_sOnce != -1) {
    dispatch_once(&SiriTTSServiceLibrary_sOnce, &__block_literal_global_9466);
  }
  Class result = objc_getClass("SiriTTSSpeechRequest");
  classSiriTTSSpeechRequest = (uint64_t)result;
  getSiriTTSSpeechRequestClass[0] = (uint64_t (*)())SiriTTSSpeechRequestFunction;
  return result;
}

id SiriTTSSpeechRequestFunction()
{
  return (id)classSiriTTSSpeechRequest;
}

void *__SiriTTSServiceLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/SiriTTSService.framework/SiriTTSService", 2);
  SiriTTSServiceLibrary_sLib = (uint64_t)result;
  return result;
}

Class initSiriTTSSynthesisVoice()
{
  if (SiriTTSServiceLibrary_sOnce != -1) {
    dispatch_once(&SiriTTSServiceLibrary_sOnce, &__block_literal_global_9466);
  }
  Class result = objc_getClass("SiriTTSSynthesisVoice");
  classSiriTTSSynthesisVoice = (uint64_t)result;
  getSiriTTSSynthesisVoiceClass[0] = (uint64_t (*)())SiriTTSSynthesisVoiceFunction;
  return result;
}

id SiriTTSSynthesisVoiceFunction()
{
  return (id)classSiriTTSSynthesisVoice;
}

uint64_t initVSPreferencesCopyDefaultOutputLanguageIdentifierForUserPreferences()
{
  if (VoiceServicesLibrary_sOnce != -1) {
    dispatch_once(&VoiceServicesLibrary_sOnce, &__block_literal_global_122_9473);
  }
  os_log_t v0 = (uint64_t (*)())dlsym((void *)VoiceServicesLibrary_sLib, "VSPreferencesCopyDefaultOutputLanguageIdentifierForUserPreferences");
  softLinkVSPreferencesCopyDefaultOutputLanguageIdentifierForUserPreferences[0] = v0;
  return v0();
}

void *__VoiceServicesLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/VoiceServices.framework/VoiceServices", 2);
  VoiceServicesLibrary_sLib = (uint64_t)result;
  return result;
}

Class initSiriTTSDaemonSession()
{
  if (SiriTTSServiceLibrary_sOnce != -1) {
    dispatch_once(&SiriTTSServiceLibrary_sOnce, &__block_literal_global_9466);
  }
  Class result = objc_getClass("SiriTTSDaemonSession");
  classSiriTTSDaemonSession = (uint64_t)result;
  getSiriTTSDaemonSessionClass[0] = (uint64_t (*)())SiriTTSDaemonSessionFunction;
  return result;
}

id SiriTTSDaemonSessionFunction()
{
  return (id)classSiriTTSDaemonSession;
}

id initValEasyConfigKey_ReasonError()
{
  if (EasyConfigLibrary_sOnce != -1) {
    dispatch_once(&EasyConfigLibrary_sOnce, &__block_literal_global_9604);
  }
  os_log_t v0 = (id *)dlsym((void *)EasyConfigLibrary_sLib, "EasyConfigKey_ReasonError");
  if (v0) {
    objc_storeStrong((id *)&constantValEasyConfigKey_ReasonError, *v0);
  }
  getEasyConfigKey_ReasonError[0] = (uint64_t (*)())EasyConfigKey_ReasonErrorFunction;
  uint64_t v1 = (void *)constantValEasyConfigKey_ReasonError;
  return v1;
}

id EasyConfigKey_ReasonErrorFunction()
{
  return (id)constantValEasyConfigKey_ReasonError;
}

void *__EasyConfigLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/EasyConfig.framework/EasyConfig", 2);
  EasyConfigLibrary_sLib = (uint64_t)result;
  return result;
}

Class initEasyConfigDevice()
{
  if (EasyConfigLibrary_sOnce != -1) {
    dispatch_once(&EasyConfigLibrary_sOnce, &__block_literal_global_9604);
  }
  Class result = objc_getClass("EasyConfigDevice");
  classEasyConfigDevice = (uint64_t)result;
  getEasyConfigDeviceClass[0] = (uint64_t (*)())EasyConfigDeviceFunction;
  return result;
}

id EasyConfigDeviceFunction()
{
  return (id)classEasyConfigDevice;
}

id initValEasyConfigKey_Flags()
{
  if (EasyConfigLibrary_sOnce != -1) {
    dispatch_once(&EasyConfigLibrary_sOnce, &__block_literal_global_9604);
  }
  os_log_t v0 = (id *)dlsym((void *)EasyConfigLibrary_sLib, "EasyConfigKey_Flags");
  if (v0) {
    objc_storeStrong((id *)&constantValEasyConfigKey_Flags, *v0);
  }
  getEasyConfigKey_Flags[0] = (uint64_t (*)())EasyConfigKey_FlagsFunction;
  uint64_t v1 = (void *)constantValEasyConfigKey_Flags;
  return v1;
}

id EasyConfigKey_FlagsFunction()
{
  return (id)constantValEasyConfigKey_Flags;
}

id initValEasyConfigKey_DeviceID()
{
  if (EasyConfigLibrary_sOnce != -1) {
    dispatch_once(&EasyConfigLibrary_sOnce, &__block_literal_global_9604);
  }
  os_log_t v0 = (id *)dlsym((void *)EasyConfigLibrary_sLib, "EasyConfigKey_DeviceID");
  if (v0) {
    objc_storeStrong((id *)&constantValEasyConfigKey_DeviceID, *v0);
  }
  getEasyConfigKey_DeviceID[0] = (uint64_t (*)())EasyConfigKey_DeviceIDFunction;
  uint64_t v1 = (void *)constantValEasyConfigKey_DeviceID;
  return v1;
}

id EasyConfigKey_DeviceIDFunction()
{
  return (id)constantValEasyConfigKey_DeviceID;
}

void _wifiPowerCallback(uint64_t a1, void *a2)
{
  char Power = WiFiDeviceClientGetPower();
  id v4 = a2[19];
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = ___wifiPowerCallback_block_invoke;
  _OWORD v6[3] = &unk_1E55BF0B0;
  int8x16_t v6[4] = a2;
  char v7 = Power;
  id v5 = a2;
  dispatch_async(v4, v6);
}

uint64_t ___wifiPowerCallback_block_invoke(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(result + 32);
  if (*(unsigned char *)(v8 + 10)) {
    return result;
  }
  uint64_t v9 = result;
  uint64_t v10 = *(int **)(v8 + 16);
  if (*v10 <= 30)
  {
    if (*v10 != -1)
    {
LABEL_4:
      if (*(unsigned char *)(v9 + 40)) {
        uint64_t v11 = "yes";
      }
      else {
        uint64_t v11 = "no";
      }
      LogPrintF((uint64_t)v10, (uint64_t)"void _wifiPowerCallback(WiFiDeviceClientRef, void *)_block_invoke", 0x1Eu, (uint64_t)"WiFi power changed: %s", a5, a6, a7, a8, (uint64_t)v11);
      uint64_t v8 = *(void *)(v9 + 32);
      goto LABEL_9;
    }
    BOOL v12 = _LogCategory_Initialize((uint64_t)v10, 0x1Eu);
    uint64_t v8 = *(void *)(v9 + 32);
    if (v12)
    {
      uint64_t v10 = *(int **)(v8 + 16);
      goto LABEL_4;
    }
  }
LABEL_9:
  return [(id)v8 _wifiStateChanged];
}

void _wifiHostAPStateChangedCallback(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3[19];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = ___wifiHostAPStateChangedCallback_block_invoke;
  v7[3] = &unk_1E55BF170;
  v7[4] = a3;
  v7[5] = a2;
  id v5 = a2;
  id v6 = a3;
  dispatch_async(v4, v7);
}

uint64_t ___wifiHostAPStateChangedCallback_block_invoke(uint64_t result)
{
  if (!*(void *)(*(void *)(result + 32) + 48)) {
    return result;
  }
  uint64_t v1 = result;
  unint64_t Int64 = CFDictionaryGetInt64(*(const __CFDictionary **)(result + 40), @"HostApEnabled", 0);
  char v7 = *(void **)(v1 + 32);
  uint64_t v8 = (int *)v7[2];
  if (*v8 <= 30)
  {
    if (*v8 != -1)
    {
LABEL_4:
      uint64_t v9 = "yes";
      if (!Int64) {
        uint64_t v9 = "no";
      }
      LogPrintF((uint64_t)v8, (uint64_t)"void _wifiHostAPStateChangedCallback(WiFiDeviceClientRef, CFDictionaryRef, void *)_block_invoke", 0x1Eu, (uint64_t)"WiFi HostAP state changed: HostAP %s\n", v2, v3, v4, v5, (uint64_t)v9);
      char v7 = *(void **)(v1 + 32);
      goto LABEL_9;
    }
    BOOL v10 = _LogCategory_Initialize((uint64_t)v8, 0x1Eu);
    char v7 = *(void **)(v1 + 32);
    if (v10)
    {
      uint64_t v8 = (int *)v7[2];
      goto LABEL_4;
    }
  }
LABEL_9:
  return [v7 _update];
}

void _wifiAutoJoinNotification(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = a3;
  id v5 = a2;
  id v6 = v4[19];
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = ___wifiAutoJoinNotification_block_invoke;
  _DWORD v9[3] = &unk_1E55BF170;
  id v10 = v4;
  id v11 = v5;
  id v7 = v5;
  uint64_t v8 = v4;
  dispatch_async(v6, v9);
}

unsigned char *___wifiAutoJoinNotification_block_invoke(uint64_t a1)
{
  Class result = *(unsigned char **)(a1 + 32);
  if (!result[10]) {
    return (unsigned char *)[result _wifiAutoJoinNotification:*(void *)(a1 + 40)];
  }
  return result;
}

void _wifiDeviceDetached(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = v2[19];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___wifiDeviceDetached_block_invoke;
  block[3] = &unk_1E55BFC18;
  id v6 = v2;
  uint64_t v4 = v2;
  dispatch_async(v3, block);
}

uint64_t ___wifiDeviceDetached_block_invoke(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(result + 32);
  if (*(unsigned char *)(v8 + 10)) {
    return result;
  }
  uint64_t v9 = result;
  id v10 = *(int **)(v8 + 16);
  if (*v10 <= 30)
  {
    if (*v10 == -1)
    {
      BOOL v11 = _LogCategory_Initialize((uint64_t)v10, 0x1Eu);
      uint64_t v8 = *(void *)(v9 + 32);
      if (!v11) {
        goto LABEL_6;
      }
      id v10 = *(int **)(v8 + 16);
    }
    LogPrintF((uint64_t)v10, (uint64_t)"void _wifiDeviceDetached(WiFiDeviceClientRef, void *)_block_invoke", 0x1Eu, (uint64_t)"WiFi Device Detached\n", a5, a6, a7, a8, v13);
    uint64_t v8 = *(void *)(v9 + 32);
  }
LABEL_6:
  *(unsigned char *)(v8 + 96) = 0;
  *(unsigned char *)(*(void *)(v9 + 32) + 72) = 0;
  *(void *)(*(void *)(v9 + 32) + 64) = 0;
  BOOL v12 = *(void **)(v9 + 32);
  return [v12 _update];
}

void _wifiRestartedCallback(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[19];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___wifiRestartedCallback_block_invoke;
  block[3] = &unk_1E55BFC18;
  void block[4] = a2;
  uint64_t v3 = a2;
  dispatch_async(v2, block);
}

uint64_t ___wifiRestartedCallback_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = *(void *)(a1 + 32);
  if (!*(void *)(result + 48)) {
    return result;
  }
  id v10 = *(int **)(result + 16);
  if (*v10 <= 60)
  {
    if (*v10 == -1)
    {
      BOOL v11 = _LogCategory_Initialize(*(void *)(result + 16), 0x3Cu);
      uint64_t result = *(void *)(a1 + 32);
      if (!v11) {
        goto LABEL_6;
      }
      id v10 = *(int **)(result + 16);
    }
    LogPrintF((uint64_t)v10, (uint64_t)"void _wifiRestartedCallback(WiFiManagerClientRef, void *)_block_invoke", 0x3Cu, (uint64_t)"### WiFi crashed...retrying\n", a5, a6, a7, a8, v14);
    uint64_t result = *(void *)(a1 + 32);
  }
LABEL_6:
  if (*(unsigned char *)(result + 128))
  {
    *(unsigned char *)(result + 125) = 1;
    uint64_t result = *(void *)(a1 + 32);
  }
  if (*(unsigned char *)(result + 130))
  {
    *(unsigned char *)(result + 127) = 1;
    uint64_t result = *(void *)(a1 + 32);
  }
  if (*(void *)(result + 184))
  {
    BOOL v12 = *(void **)(result + 32);
    *(void *)(result + 32) = 0;

    *(unsigned char *)(*(void *)(a1 + 32) + 126) = 1;
    uint64_t result = *(void *)(a1 + 32);
  }
  [(id)result _update];
  uint64_t result = *(void *)(*(void *)(a1 + 32) + 160);
  if (result)
  {
    uint64_t v13 = *(uint64_t (**)(void))(result + 16);
    return v13();
  }
  return result;
}

void _wifiDeviceAttached(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = v3[19];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___wifiDeviceAttached_block_invoke;
  block[3] = &unk_1E55BFC18;
  id v7 = v3;
  id v5 = v3;
  dispatch_async(v4, block);
}

uint64_t ___wifiDeviceAttached_block_invoke(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(result + 32);
  if (*(unsigned char *)(v8 + 10)) {
    return result;
  }
  uint64_t v9 = result;
  id v10 = *(int **)(v8 + 16);
  if (*v10 <= 30)
  {
    if (*v10 == -1)
    {
      BOOL v11 = _LogCategory_Initialize((uint64_t)v10, 0x1Eu);
      uint64_t v8 = *(void *)(v9 + 32);
      if (!v11) {
        goto LABEL_6;
      }
      id v10 = *(int **)(v8 + 16);
    }
    LogPrintF((uint64_t)v10, (uint64_t)"void _wifiDeviceAttached(WiFiManagerClientRef, WiFiDeviceClientRef, void *)_block_invoke", 0x1Eu, (uint64_t)"WiFi Device Attached\n", a5, a6, a7, a8, v12);
    uint64_t v8 = *(void *)(v9 + 32);
  }
LABEL_6:
  return [(id)v8 _update];
}

void _wifiCriticalCallback(uint64_t a1, char a2, void *a3)
{
  uint64_t v4 = a3;
  id v5 = v4[19];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = ___wifiCriticalCallback_block_invoke;
  v7[3] = &unk_1E55BF0B0;
  id v8 = v4;
  char v9 = a2;
  id v6 = v4;
  dispatch_async(v5, v7);
}

uint64_t ___wifiCriticalCallback_block_invoke(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(result + 32);
  if (*(unsigned char *)(v8 + 10)) {
    return result;
  }
  uint64_t v9 = result;
  id v10 = *(int **)(v8 + 16);
  if (*v10 <= 30)
  {
    if (*v10 != -1)
    {
LABEL_4:
      if (*(unsigned char *)(v8 + 42)) {
        BOOL v11 = "yes";
      }
      else {
        BOOL v11 = "no";
      }
      LogPrintF((uint64_t)v10, (uint64_t)"void _wifiCriticalCallback(WiFiDeviceClientRef, _Bool, void *)_block_invoke", 0x1Eu, (uint64_t)"WiFi critical changed: %s -> %s\n", a5, a6, a7, a8, (uint64_t)v11);
      uint64_t v8 = *(void *)(v9 + 32);
      goto LABEL_9;
    }
    BOOL v12 = _LogCategory_Initialize((uint64_t)v10, 0x1Eu);
    uint64_t v8 = *(void *)(v9 + 32);
    if (v12)
    {
      id v10 = *(int **)(v8 + 16);
      goto LABEL_4;
    }
  }
LABEL_9:
  *(unsigned char *)(v8 + 42) = *(unsigned char *)(v9 + 40);
  uint64_t v13 = *(void **)(v9 + 32);
  return [v13 _wifiStateChanged];
}

id initValAWDLTrafficRegistrationServiceRemoteScreen()
{
  if (WiFiPeerToPeerLibrary_sOnce_9853 != -1) {
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce_9853, &__block_literal_global_9854);
  }
  os_log_t v0 = (id *)dlsym((void *)WiFiPeerToPeerLibrary_sLib_9855, "AWDLTrafficRegistrationServiceRemoteScreen");
  if (v0) {
    objc_storeStrong((id *)&constantValAWDLTrafficRegistrationServiceRemoteScreen, *v0);
  }
  getAWDLTrafficRegistrationServiceRemoteScreen[0] = (uint64_t (*)())AWDLTrafficRegistrationServiceRemoteScreenFunction;
  uint64_t v1 = (void *)constantValAWDLTrafficRegistrationServiceRemoteScreen;
  return v1;
}

id AWDLTrafficRegistrationServiceRemoteScreenFunction()
{
  return (id)constantValAWDLTrafficRegistrationServiceRemoteScreen;
}

void *__WiFiPeerToPeerLibrary_block_invoke_9859()
{
  uint64_t result = dlopen("/System/Library/PrivateFrameworks/WiFiPeerToPeer.framework/WiFiPeerToPeer", 2);
  WiFiPeerToPeerLibrary_sLib_9855 = (uint64_t)result;
  return result;
}

id initValAWDLTrafficRegistrationServiceTVRemoteCamera()
{
  if (WiFiPeerToPeerLibrary_sOnce_9853 != -1) {
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce_9853, &__block_literal_global_9854);
  }
  os_log_t v0 = (id *)dlsym((void *)WiFiPeerToPeerLibrary_sLib_9855, "AWDLTrafficRegistrationServiceTVRemoteCamera");
  if (v0) {
    objc_storeStrong((id *)&constantValAWDLTrafficRegistrationServiceTVRemoteCamera, *v0);
  }
  getAWDLTrafficRegistrationServiceTVRemoteCamera[0] = (uint64_t (*)())AWDLTrafficRegistrationServiceTVRemoteCameraFunction;
  uint64_t v1 = (void *)constantValAWDLTrafficRegistrationServiceTVRemoteCamera;
  return v1;
}

id AWDLTrafficRegistrationServiceTVRemoteCameraFunction()
{
  return (id)constantValAWDLTrafficRegistrationServiceTVRemoteCamera;
}

id initValAWDLTrafficRegistrationServiceRemoteCamera()
{
  if (WiFiPeerToPeerLibrary_sOnce_9853 != -1) {
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce_9853, &__block_literal_global_9854);
  }
  os_log_t v0 = (id *)dlsym((void *)WiFiPeerToPeerLibrary_sLib_9855, "AWDLTrafficRegistrationServiceRemoteCamera");
  if (v0) {
    objc_storeStrong((id *)&constantValAWDLTrafficRegistrationServiceRemoteCamera, *v0);
  }
  getAWDLTrafficRegistrationServiceRemoteCamera[0] = (uint64_t (*)())AWDLTrafficRegistrationServiceRemoteCameraFunction;
  uint64_t v1 = (void *)constantValAWDLTrafficRegistrationServiceRemoteCamera;
  return v1;
}

id AWDLTrafficRegistrationServiceRemoteCameraFunction()
{
  return (id)constantValAWDLTrafficRegistrationServiceRemoteCamera;
}

id initValAWDLTrafficRegistrationServiceMPRemoteCamera()
{
  if (WiFiPeerToPeerLibrary_sOnce_9853 != -1) {
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce_9853, &__block_literal_global_9854);
  }
  os_log_t v0 = (id *)dlsym((void *)WiFiPeerToPeerLibrary_sLib_9855, "AWDLTrafficRegistrationServiceMPRemoteCamera");
  if (v0) {
    objc_storeStrong((id *)&constantValAWDLTrafficRegistrationServiceMPRemoteCamera, *v0);
  }
  getAWDLTrafficRegistrationServiceMPRemoteCamera[0] = (uint64_t (*)())AWDLTrafficRegistrationServiceMPRemoteCameraFunction;
  uint64_t v1 = (void *)constantValAWDLTrafficRegistrationServiceMPRemoteCamera;
  return v1;
}

id AWDLTrafficRegistrationServiceMPRemoteCameraFunction()
{
  return (id)constantValAWDLTrafficRegistrationServiceMPRemoteCamera;
}

id initValAWDLTrafficRegistrationServiceUniversalControl()
{
  if (WiFiPeerToPeerLibrary_sOnce_9853 != -1) {
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce_9853, &__block_literal_global_9854);
  }
  os_log_t v0 = (id *)dlsym((void *)WiFiPeerToPeerLibrary_sLib_9855, "AWDLTrafficRegistrationServiceUniversalControl");
  if (v0) {
    objc_storeStrong((id *)&constantValAWDLTrafficRegistrationServiceUniversalControl, *v0);
  }
  getAWDLTrafficRegistrationServiceUniversalControl[0] = (uint64_t (*)())AWDLTrafficRegistrationServiceUniversalControlFunction;
  uint64_t v1 = (void *)constantValAWDLTrafficRegistrationServiceUniversalControl;
  return v1;
}

id AWDLTrafficRegistrationServiceUniversalControlFunction()
{
  return (id)constantValAWDLTrafficRegistrationServiceUniversalControl;
}

id initValAWDLTrafficRegistrationServiceDeviceToDeviceMigration()
{
  if (WiFiPeerToPeerLibrary_sOnce_9853 != -1) {
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce_9853, &__block_literal_global_9854);
  }
  os_log_t v0 = (id *)dlsym((void *)WiFiPeerToPeerLibrary_sLib_9855, "AWDLTrafficRegistrationServiceDeviceToDeviceMigration");
  if (v0) {
    objc_storeStrong((id *)&constantValAWDLTrafficRegistrationServiceDeviceToDeviceMigration, *v0);
  }
  getAWDLTrafficRegistrationServiceDeviceToDeviceMigration[0] = (uint64_t (*)())AWDLTrafficRegistrationServiceDeviceToDeviceMigrationFunction;
  uint64_t v1 = (void *)constantValAWDLTrafficRegistrationServiceDeviceToDeviceMigration;
  return v1;
}

id AWDLTrafficRegistrationServiceDeviceToDeviceMigrationFunction()
{
  return (id)constantValAWDLTrafficRegistrationServiceDeviceToDeviceMigration;
}

id initValAWDLTrafficRegistrationServiceSidecar()
{
  if (WiFiPeerToPeerLibrary_sOnce_9853 != -1) {
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce_9853, &__block_literal_global_9854);
  }
  os_log_t v0 = (id *)dlsym((void *)WiFiPeerToPeerLibrary_sLib_9855, "AWDLTrafficRegistrationServiceSidecar");
  if (v0) {
    objc_storeStrong((id *)&constantValAWDLTrafficRegistrationServiceSidecar, *v0);
  }
  getAWDLTrafficRegistrationServiceSidecar[0] = (uint64_t (*)())AWDLTrafficRegistrationServiceSidecarFunction;
  uint64_t v1 = (void *)constantValAWDLTrafficRegistrationServiceSidecar;
  return v1;
}

id AWDLTrafficRegistrationServiceSidecarFunction()
{
  return (id)constantValAWDLTrafficRegistrationServiceSidecar;
}

id initValAWDLTrafficRegistrationServiceAirPlay()
{
  if (WiFiPeerToPeerLibrary_sOnce_9853 != -1) {
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce_9853, &__block_literal_global_9854);
  }
  os_log_t v0 = (id *)dlsym((void *)WiFiPeerToPeerLibrary_sLib_9855, "AWDLTrafficRegistrationServiceAirPlay");
  if (v0) {
    objc_storeStrong((id *)&constantValAWDLTrafficRegistrationServiceAirPlay, *v0);
  }
  getAWDLTrafficRegistrationServiceAirPlay[0] = (uint64_t (*)())AWDLTrafficRegistrationServiceAirPlayFunction;
  uint64_t v1 = (void *)constantValAWDLTrafficRegistrationServiceAirPlay;
  return v1;
}

id AWDLTrafficRegistrationServiceAirPlayFunction()
{
  return (id)constantValAWDLTrafficRegistrationServiceAirPlay;
}

void sub_18E3B2998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

Class initWiFiP2PAWDLStateMonitor()
{
  if (WiFiPeerToPeerLibrary_sOnce_9853 != -1) {
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce_9853, &__block_literal_global_9854);
  }
  Class result = objc_getClass("WiFiP2PAWDLStateMonitor");
  classWiFiP2PAWDLStateMonitor = (uint64_t)result;
  getWiFiP2PAWDLStateMonitorClass[0] = (uint64_t (*)())WiFiP2PAWDLStateMonitorFunction;
  return result;
}

id WiFiP2PAWDLStateMonitorFunction()
{
  return (id)classWiFiP2PAWDLStateMonitor;
}

void sub_18E3B356C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_18E3B3A18(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL CUXPCDecodeSInt64Ranged(void *a1, const char *a2, int64_t a3, int64_t a4, int64_t *a5, void *a6)
{
  return CUXPCDecodeSInt64RangedEx(a1, a2, a3, a4, a5, a6) != 5;
}

BOOL CUXPCDecodeUInt64Ranged(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t *a5, void *a6)
{
  return CUXPCDecodeUInt64RangedEx(a1, a2, a3, a4, a5, a6) != 5;
}

uint64_t __Block_byref_object_copy__10393(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__10394(uint64_t a1)
{
}

BOOL __CUXPCDecodeNSArrayOfClass_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (MEMORY[0x192FAB6C0]() == MEMORY[0x1E4F14590])
  {
    id v10 = objc_alloc(*(Class *)(a1 + 56));
    uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8);
    obuint64_t j = *(id *)(v11 + 40);
    BOOL v12 = (void *)[v10 initWithXPCObject:v4 error:&obj];
    objc_storeStrong((id *)(v11 + 40), obj);
    BOOL v13 = v12 != 0;
    if (v12) {
      [*(id *)(a1 + 32) addObject:v12];
    }
  }
  else
  {
    uint64_t v15 = NSErrorF_safe((void *)*MEMORY[0x1E4F28760], 4294960540, (uint64_t)"XPC array non-dictionary value: '%s'", v5, v6, v7, v8, v9, *(void *)(a1 + 48));
    uint64_t v16 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v17 = *(void **)(v16 + 40);
    *(void *)(v16 + 40) = v15;

    BOOL v13 = 0;
  }

  return v13;
}

uint64_t __CUXPCDecodeNSArrayOfNSData_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (MEMORY[0x192FAB6C0]() != MEMORY[0x1E4F14580])
  {
    NSErrorF_safe((void *)*MEMORY[0x1E4F28760], 4294960540, (uint64_t)"XPC array non-data value: '%s'", v5, v6, v7, v8, v9, *(void *)(a1 + 48));
    uint64_t v19 = LABEL_8:;
    uint64_t v17 = 0;
    uint64_t v20 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v16 = *(void **)(v20 + 40);
    *(void *)(v20 + 40) = v19;
    goto LABEL_5;
  }
  size_t length = xpc_data_get_length(v4);
  if (length < *(void *)(a1 + 56) || length > *(void *)(a1 + 64))
  {
    NSErrorF_safe((void *)*MEMORY[0x1E4F28760], 4294960553, (uint64_t)"XPC array bad data length: '%s', %zu bytes", v11, v12, v13, v14, v15, *(void *)(a1 + 48));
    goto LABEL_8;
  }
  uint64_t v16 = (void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:xpc_data_get_bytes_ptr(v4) length:length];
  [*(id *)(a1 + 32) addObject:v16];
  uint64_t v17 = 1;
LABEL_5:

  return v17;
}

uint64_t __CUXPCDecodeNSArrayOfNSString_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (MEMORY[0x192FAB6C0]() != MEMORY[0x1E4F145F0])
  {
    NSErrorF_safe((void *)*MEMORY[0x1E4F28760], 4294960540, (uint64_t)"XPC array non-string value: '%s'", v5, v6, v7, v8, v9, *(void *)(a1 + 48));
    uint64_t v24 = LABEL_8:;
    uint64_t v22 = 0;
    uint64_t v25 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v21 = *(void **)(v25 + 40);
    *(void *)(v25 + 40) = v24;
    goto LABEL_5;
  }
  string_ptr = xpc_string_get_string_ptr(v4);
  if (!string_ptr)
  {
    NSErrorF_safe((void *)*MEMORY[0x1E4F28760], 4294960540, (uint64_t)"XPC array null string value: '%s'", v11, v12, v13, v14, v15, *(void *)(a1 + 48));
    goto LABEL_8;
  }
  uint64_t v21 = (void *)[[NSString alloc] initWithUTF8String:string_ptr];
  if (v21)
  {
    [*(id *)(a1 + 32) addObject:v21];
    uint64_t v22 = 1;
  }
  else
  {
    uint64_t v26 = NSErrorF_safe((void *)*MEMORY[0x1E4F28760], 4294960540, (uint64_t)"XPC array bad string value: '%s'", v16, v17, v18, v19, v20, *(void *)(a1 + 48));
    uint64_t v27 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v28 = *(void **)(v27 + 40);
    *(void *)(v27 + 40) = v26;

    uint64_t v22 = 0;
  }
LABEL_5:

  return v22;
}

uint64_t CUXPCDecodeNSArrayOfInteger(void *a1, const char *a2, uint64_t a3, uint64_t a4, id *a5, void *a6)
{
  id v11 = a1;
  uint64_t v12 = xpc_dictionary_get_value(v11, a2);
  uint64_t v13 = (void *)v12;
  if (!v12) {
    goto LABEL_9;
  }
  if (MEMORY[0x192FAB6C0](v12) == MEMORY[0x1E4F14568])
  {
    uint64_t v24 = 0;
    uint64_t v25 = &v24;
    uint64_t v26 = 0x3032000000;
    uint64_t v27 = __Block_byref_object_copy__10393;
    uint64_t v28 = __Block_byref_object_dispose__10394;
    id v29 = 0;
    id v20 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 3221225472;
    applier[2] = __CUXPCDecodeNSArrayOfInteger_block_invoke;
    applier[3] = &unk_1E55BF1C0;
    applier[6] = a2;
    void applier[7] = a3;
    void applier[8] = a4;
    applier[4] = v20;
    applier[5] = &v24;
    xpc_array_apply(v13, applier);
    uint64_t v21 = (void *)v25[5];
    if (v21)
    {
      if (a6) {
        *a6 = v21;
      }
    }
    else
    {
      objc_storeStrong(a5, v20);
    }

    _Block_object_dispose(&v24, 8);
    if (v21) {
      goto LABEL_8;
    }
LABEL_9:
    uint64_t v19 = 1;
    goto LABEL_10;
  }
  if (!a6)
  {
LABEL_8:
    uint64_t v19 = 0;
    goto LABEL_10;
  }
  NSErrorF_safe((void *)*MEMORY[0x1E4F28760], 4294960540, (uint64_t)"XPC non-array type: '%s'", v14, v15, v16, v17, v18, (uint64_t)a2);
  uint64_t v19 = 0;
  *a6 = (id)objc_claimAutoreleasedReturnValue();
LABEL_10:

  return v19;
}

void sub_18E3B7670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __CUXPCDecodeNSArrayOfInteger_block_invoke(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = MEMORY[0x192FAB6C0]();
  if (v5 == MEMORY[0x1E4F145C0])
  {
    int64_t value = xpc_int64_get_value(v4);
  }
  else
  {
    if (v5 != MEMORY[0x1E4F145F8])
    {
      NSErrorF_safe((void *)*MEMORY[0x1E4F28760], 4294960540, (uint64_t)"XPC array non-int value: '%s'", v6, v7, v8, v9, v10, a1[6]);
      goto LABEL_4;
    }
    int64_t value = xpc_uint64_get_value(v4);
  }
  if (value >= a1[7] && value <= a1[8])
  {
    uint64_t v22 = (void *)a1[4];
    uint64_t v14 = [NSNumber numberWithLongLong:value];
    [v22 addObject:v14];
    uint64_t v12 = 1;
    goto LABEL_13;
  }
  NSErrorF_safe((void *)*MEMORY[0x1E4F28760], 4294960586, (uint64_t)"XPC array int out-of-range: '%s', %lld, min %lld, max %lld", v16, v17, v18, v19, v20, a1[6]);
  uint64_t v11 = LABEL_4:;
  uint64_t v12 = 0;
  uint64_t v13 = *(void *)(a1[5] + 8);
  uint64_t v14 = *(void **)(v13 + 40);
  *(void *)(v13 + 40) = v11;
LABEL_13:

  return v12;
}

uint64_t CUXPCDecodeNSUUID(void *a1, const char *a2, void **a3, void *a4)
{
  id v7 = a1;
  uuid = xpc_dictionary_get_uuid(v7, a2);
  if (uuid)
  {
    uint64_t v9 = [objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDBytes:uuid];
    uint64_t v10 = *a3;
    *a3 = (void *)v9;
LABEL_5:
    uint64_t v17 = 1;
    goto LABEL_6;
  }
  uint64_t v11 = xpc_dictionary_get_value(v7, a2);
  uint64_t v10 = (void *)v11;
  if (!v11 || MEMORY[0x192FAB6C0](v11) == MEMORY[0x1E4F14600]) {
    goto LABEL_5;
  }
  if (a4)
  {
    NSErrorF_safe((void *)*MEMORY[0x1E4F28760], 4294960540, (uint64_t)"XPC non-UUID type: '%s'", v12, v13, v14, v15, v16, (uint64_t)a2);
    uint64_t v17 = 0;
    *a4 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v17 = 0;
  }
LABEL_6:

  return v17;
}

void CUXPCEncodeNSArrayOfNSNumber(void *a1, const char *a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a3;
  if (v6)
  {
    xpc_object_t v7 = xpc_array_create(0, 0);
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    id v8 = v6;
    uint64_t v9 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = *(void *)v16;
      do
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          if (*(void *)v16 != v11) {
            objc_enumerationMutation(v8);
          }
          uint64_t v13 = *(void **)(*((void *)&v15 + 1) + 8 * i);
          if (CFNumberIsFloatType((CFNumberRef)v13))
          {
            [v13 doubleValue];
            xpc_array_set_double(v7, 0xFFFFFFFFFFFFFFFFLL, v14);
          }
          else
          {
            xpc_array_set_int64(v7, 0xFFFFFFFFFFFFFFFFLL, objc_msgSend(v13, "longLongValue", (void)v15));
          }
        }
        uint64_t v10 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
      }
      while (v10);
    }

    xpc_dictionary_set_value(v5, a2, v7);
  }
}

void CUXPCEncodeNSError(void *a1, void *a2, const char *a3, const char *a4, const char *a5, const char *a6, const char *a7)
{
  if (a1)
  {
    id v13 = a2;
    _CUXPCEncodeNSError(a1, a4, a5, a6, a7, 1u);
    id v14 = (id)objc_claimAutoreleasedReturnValue();
    xpc_dictionary_set_value(v13, a3, v14);
  }
}

id _CUXPCEncodeNSError(void *a1, const char *a2, const char *a3, const char *a4, const char *a5, unsigned int a6)
{
  id v11 = a1;
  xpc_object_t v12 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_int64(v12, a2, [v11 code]);
  id v13 = [v11 domain];
  id v14 = v13;
  if (v13)
  {
    if (([v13 isEqual:*MEMORY[0x1E4F28760]] & 1) == 0)
    {
      long long v15 = (const char *)[v14 UTF8String];
      if (v15) {
        xpc_dictionary_set_string(v12, a3, v15);
      }
    }
  }
  CFDictionaryRef v16 = [v11 userInfo];
  CFTypeID TypeID = CFStringGetTypeID();
  long long v18 = CFDictionaryGetTypedValue(v16, @"cuErrorMsg", TypeID, 0);
  if ([v18 length])
  {
    uint64_t v19 = (const char *)[v18 UTF8String];
    if (v19) {
      xpc_dictionary_set_string(v12, a4, v19);
    }
  }
  if (a6 <= 3)
  {
    uint64_t v26 = a5;
    uint64_t v20 = (const void *)*MEMORY[0x1E4F28A50];
    CFTypeID v21 = CFErrorGetTypeID();
    uint64_t v22 = CFDictionaryGetTypedValue(v16, v20, v21, 0);
    uint64_t v23 = (void *)v22;
    if (v22)
    {
      uint64_t v24 = _CUXPCEncodeNSError(v22, a2, a3, a4, v26, a6 + 1);
      if (v24) {
        xpc_dictionary_set_value(v12, v26, v24);
      }
    }
  }

  return v12;
}

uint64_t _CUXPCDecodeNSError(void *a1, const char *a2, const char *a3, const char *a4, const char *a5, unsigned int a6, int a7, void *a8, void *a9)
{
  id v15 = a1;
  int64_t int64 = xpc_dictionary_get_int64(v15, a2);
  if (!int64)
  {
    uint64_t v17 = xpc_dictionary_get_value(v15, a2);
    uint64_t v23 = (void *)v17;
    if (v17)
    {
      if (MEMORY[0x192FAB6C0](v17) == MEMORY[0x1E4F145C0])
      {

        goto LABEL_5;
      }
      if (a9)
      {
        uint64_t v49 = (void *)*MEMORY[0x1E4F28760];
        uint64_t v50 = "XPC non-integer error code type";
        uint64_t v51 = 4294960540;
        goto LABEL_31;
      }
    }
    else
    {
      if (!a7)
      {
        uint64_t v31 = 1;
        goto LABEL_39;
      }
      if (a9)
      {
        uint64_t v49 = (void *)*MEMORY[0x1E4F28760];
        uint64_t v50 = "XPC error object missing error code";
        uint64_t v51 = 4294960569;
LABEL_31:
        NSErrorF_safe(v49, v51, (uint64_t)v50, v18, v19, v20, v21, v22, v52);
        uint64_t v31 = 0;
        *a9 = (id)objc_claimAutoreleasedReturnValue();
LABEL_39:

        goto LABEL_27;
      }
    }
    uint64_t v31 = 0;
    goto LABEL_39;
  }
LABEL_5:
  string = xpc_dictionary_get_string(v15, a3);
  if (!string)
  {
    id v30 = (id)*MEMORY[0x1E4F28760];
LABEL_10:
    uint64_t v32 = xpc_dictionary_get_string(v15, a4);
    if (v32)
    {
      uint64_t v33 = [[NSString alloc] initWithUTF8String:v32];
      if (!v33)
      {
        if (a9)
        {
          NSErrorF_safe((void *)*MEMORY[0x1E4F28760], 4294960554, (uint64_t)"XPC error message bad-UTF-8", v34, v35, v36, v37, v38, v52);
          uint64_t v31 = 0;
          *a9 = (id)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          uint64_t v31 = 0;
        }
        goto LABEL_26;
      }
      uint64_t v39 = (void *)v33;
      id v40 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      [v40 setObject:v39 forKeyedSubscript:@"cuErrorMsg"];
    }
    else
    {
      id v40 = 0;
    }
    uint64_t v41 = xpc_dictionary_get_value(v15, a5);
    uint64_t v42 = (void *)v41;
    if (v41 && (uint64_t v43 = MEMORY[0x192FAB6C0](v41), a6 <= 3) && v43 == MEMORY[0x1E4F14590])
    {
      id v54 = 0;
      int v44 = _CUXPCDecodeNSError(v42, a2, a3, a4, a5, a6 + 1, 1, &v54, a9);
      id v45 = v54;
      if (!v44)
      {
        uint64_t v31 = 0;
LABEL_25:

LABEL_26:
        goto LABEL_27;
      }
      uint64_t v46 = a8;
      if (!v40) {
        id v40 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      }
      [v40 setObject:v45 forKeyedSubscript:*MEMORY[0x1E4F28A50]];
    }
    else
    {
      uint64_t v46 = a8;
    }
    uint64_t v47 = (void *)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:v30 code:int64 userInfo:v40];
    id v45 = v47;
    if (v46)
    {
      id v45 = v47;
      *uint64_t v46 = v45;
    }
    uint64_t v31 = 1;
    goto LABEL_25;
  }
  id v30 = (id)[[NSString alloc] initWithUTF8String:string];
  if (v30) {
    goto LABEL_10;
  }
  if (a9)
  {
    NSErrorF_safe((void *)*MEMORY[0x1E4F28760], 4294960554, (uint64_t)"XPC error domain bad-UTF-8", v25, v26, v27, v28, v29, v52);
    uint64_t v31 = 0;
    *a9 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v31 = 0;
  }
LABEL_27:

  return v31;
}

id CUXPCObjectGetResponseHandler(void *a1)
{
  return objc_getAssociatedObject(a1, &sCUXPCResponseHandlerKey);
}

void CUXPCObjectSetResponseHandler(void *a1, id value)
{
}

BOOL CUXPCDictionaryExpectsReply(void *a1)
{
  id v1 = a1;
  if (xpc_dictionary_expects_reply())
  {
    BOOL v2 = 1;
  }
  else
  {
    uint64_t v3 = objc_getAssociatedObject(v1, &sCUXPCResponseHandlerKey);
    BOOL v2 = v3 != 0;
  }
  return v2;
}

CFDictionaryRef CUXPCCreateCFObjectFromXPCObject(void *a1)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = MEMORY[0x192FAB6C0]();
  if (v2 == MEMORY[0x1E4F145D8])
  {
    xpc_object_t v7 = (CFTypeRef *)MEMORY[0x1E4F1D260];
LABEL_18:
    CFDictionaryRef v9 = (const __CFDictionary *)CFRetain(*v7);
    goto LABEL_19;
  }
  if (v2 == MEMORY[0x1E4F14570])
  {
    BOOL value = xpc_BOOL_get_value(v1);
    xpc_object_t v7 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
    if (!value) {
      xpc_object_t v7 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
    }
    goto LABEL_18;
  }
  if (v2 == MEMORY[0x1E4F145F0])
  {
    string_ptr = xpc_string_get_string_ptr(v1);
    CFDictionaryRef v9 = (const __CFDictionary *)CFStringCreateWithCString(0, string_ptr, 0x8000100u);
  }
  else if (v2 == MEMORY[0x1E4F14580])
  {
    size_t length = xpc_data_get_length(v1);
    if ((length & 0x8000000000000000) != 0) {
      goto LABEL_46;
    }
    CFIndex v14 = length;
    bytes_ptr = (const UInt8 *)xpc_data_get_bytes_ptr(v1);
    CFDictionaryRef v9 = CFDataCreate(0, bytes_ptr, v14);
  }
  else if (v2 == MEMORY[0x1E4F145C0])
  {
    *(void *)&long long valuePtr = xpc_int64_get_value(v1);
    CFDictionaryRef v9 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
  }
  else if (v2 == MEMORY[0x1E4F145F8])
  {
    *(void *)&long long valuePtr = xpc_uint64_get_value(v1);
    CFDictionaryRef v9 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
  }
  else if (v2 == MEMORY[0x1E4F14598])
  {
    *(void *)&long long valuePtr = xpc_double_get_value(v1);
    CFDictionaryRef v9 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  }
  else if (v2 == MEMORY[0x1E4F14588])
  {
    int64_t v16 = xpc_date_get_value(v1);
    CFDictionaryRef v9 = CFDateCreate(0, (double)v16 / 1000000000.0 - *MEMORY[0x1E4F1CF78]);
  }
  else
  {
    if (v2 != MEMORY[0x1E4F14600])
    {
      if (v2 != MEMORY[0x1E4F14568])
      {
        if (v2 == MEMORY[0x1E4F14590])
        {
          size_t count = xpc_dictionary_get_count(v1);
          if (!(count >> 62))
          {
            CFIndex v4 = count;
            unint64_t v5 = 2 * count;
            long long v63 = 0u;
            long long v64 = 0u;
            long long v61 = 0u;
            long long v62 = 0u;
            long long v59 = 0u;
            long long v60 = 0u;
            long long v57 = 0u;
            long long v58 = 0u;
            long long v55 = 0u;
            long long v56 = 0u;
            long long v53 = 0u;
            long long v54 = 0u;
            long long v51 = 0u;
            long long v52 = 0u;
            long long v49 = 0u;
            long long v50 = 0u;
            long long v47 = 0u;
            long long v48 = 0u;
            long long v45 = 0u;
            long long v46 = 0u;
            long long v43 = 0u;
            long long v44 = 0u;
            long long v41 = 0u;
            long long v42 = 0u;
            long long v39 = 0u;
            long long v40 = 0u;
            long long v37 = 0u;
            long long v38 = 0u;
            long long v35 = 0u;
            long long v36 = 0u;
            long long valuePtr = 0u;
            long long v34 = 0u;
            if (count < 0x81)
            {
              p_long long valuePtr = (const void **)&valuePtr;
LABEL_44:
              uint64_t v29 = 0;
              id v30 = &v29;
              uint64_t v31 = 0x2020000000;
              uint64_t v32 = 0;
              v27[0] = MEMORY[0x1E4F143A8];
              v27[1] = 3221225472;
              v27[2] = __CUXPCCreateCFObjectFromXPCObject_block_invoke_2;
              v27[3] = &unk_1E55BF238;
              void v27[4] = &v29;
              v27[5] = p_valuePtr;
              v27[6] = v4;
              xpc_dictionary_apply(v1, v27);
              if (v30[3] == v4) {
                CFDictionaryRef v10 = CFDictionaryCreate(0, p_valuePtr, &p_valuePtr[v4], v4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              }
              else {
                CFDictionaryRef v10 = 0;
              }
              if (v4)
              {
                if (v5 <= 1) {
                  uint64_t v25 = 1;
                }
                else {
                  uint64_t v25 = v5;
                }
                uint64_t v26 = p_valuePtr;
                do
                {
                  if (*v26) {
                    CFRelease(*v26);
                  }
                  ++v26;
                  --v25;
                }
                while (v25);
              }
              if (p_valuePtr == (const void **)&valuePtr) {
                goto LABEL_59;
              }
              uint64_t v24 = p_valuePtr;
LABEL_58:
              free(v24);
LABEL_59:
              _Block_object_dispose(&v29, 8);
              goto LABEL_20;
            }
            p_long long valuePtr = (const void **)malloc_type_calloc(2 * count, 8uLL, 0xC0040B8AA526DuLL);
            if (p_valuePtr) {
              goto LABEL_44;
            }
          }
        }
        goto LABEL_46;
      }
      size_t v17 = xpc_array_get_count(v1);
      if ((v17 & 0x8000000000000000) == 0)
      {
        CFIndex v18 = v17;
        long long v63 = 0u;
        long long v64 = 0u;
        long long v61 = 0u;
        long long v62 = 0u;
        long long v59 = 0u;
        long long v60 = 0u;
        long long v57 = 0u;
        long long v58 = 0u;
        long long v55 = 0u;
        long long v56 = 0u;
        long long v53 = 0u;
        long long v54 = 0u;
        long long v51 = 0u;
        long long v52 = 0u;
        long long v49 = 0u;
        long long v50 = 0u;
        long long v47 = 0u;
        long long v48 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long valuePtr = 0u;
        long long v34 = 0u;
        if (v17 < 0x101)
        {
          uint64_t v19 = (const void **)&valuePtr;
LABEL_33:
          uint64_t v29 = 0;
          id v30 = &v29;
          uint64_t v31 = 0x2020000000;
          uint64_t v32 = 0;
          applier[0] = MEMORY[0x1E4F143A8];
          applier[1] = 3221225472;
          applier[2] = __CUXPCCreateCFObjectFromXPCObject_block_invoke;
          applier[3] = &unk_1E55BF210;
          applier[4] = &v29;
          applier[5] = v19;
          xpc_array_apply(v1, applier);
          uint64_t v20 = v30;
          uint64_t v21 = v30[3];
          if (v21 == v18)
          {
            CFDictionaryRef v10 = CFArrayCreate(0, v19, v18, MEMORY[0x1E4F1D510]);
            uint64_t v20 = v30;
            uint64_t v21 = v30[3];
          }
          else
          {
            CFDictionaryRef v10 = 0;
          }
          if (v21)
          {
            unint64_t v22 = 0;
            do
            {
              uint64_t v23 = v19[v22];
              if (v23)
              {
                CFRelease(v23);
                uint64_t v20 = v30;
              }
              ++v22;
            }
            while (v22 < v20[3]);
          }
          if (v19 == (const void **)&valuePtr) {
            goto LABEL_59;
          }
          uint64_t v24 = v19;
          goto LABEL_58;
        }
        uint64_t v19 = (const void **)malloc_type_calloc(v17, 8uLL, 0xC0040B8AA526DuLL);
        if (v19) {
          goto LABEL_33;
        }
      }
LABEL_46:
      CFDictionaryRef v10 = 0;
      goto LABEL_20;
    }
    CFUUIDBytes v66 = *(CFUUIDBytes *)xpc_uuid_get_bytes(v1);
    CFDictionaryRef v9 = CFUUIDCreateFromUUIDBytes(0, v66);
  }
LABEL_19:
  CFDictionaryRef v10 = v9;
LABEL_20:

  return v10;
}

void sub_18E3B85C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL __CUXPCCreateCFObjectFromXPCObject_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = CUXPCCreateCFObjectFromXPCObject(a3);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v7 = *(void *)(v6 + 24);
    *(void *)(v6 + 24) = v7 + 1;
    *(void *)(v5 + 8 * v7) = v4;
  }
  return v4 != 0;
}

uint64_t __CUXPCCreateCFObjectFromXPCObject_block_invoke_2(void *a1, const char *a2, uint64_t a3)
{
  uint64_t result = CUXPCCreateCFObjectFromXPCObject(a3);
  if (result)
  {
    uint64_t v6 = (const void *)result;
    CFStringRef v7 = CFStringCreateWithCString(0, a2, 0x8000100u);
    if (v7)
    {
      *(void *)(a1[5] + 8 * *(void *)(*(void *)(a1[4] + 8) + 24)) = v7;
      uint64_t v9 = a1[5];
      uint64_t v8 = a1[6];
      uint64_t v10 = *(void *)(a1[4] + 8);
      uint64_t v11 = *(void *)(v10 + 24);
      *(void *)(v10 + 24) = v11 + 1;
      *(void *)(v9 + 8 * (v11 + v8)) = v6;
      return 1;
    }
    else
    {
      CFRelease(v6);
      return 0;
    }
  }
  return result;
}

uint8_t *CUXPCObjectGetUUID(void *a1, const char *a2)
{
  uuid = (uint8_t *)xpc_dictionary_get_uuid(a1, a2);
  if (uuid) {
    uuid = (uint8_t *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDBytes:uuid];
  }
  return uuid;
}

void CUXPCObjectSetUUID(void *a1, const char *a2, void *a3)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  [a3 getUUIDBytes:uuid];
  xpc_dictionary_set_uuid(v5, a2, uuid);
}

uint64_t DACPServer_Create(void *a1, void *a2)
{
  uint64_t v17 = 0;
  if (!*a2) {
    return 4294960591;
  }
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  *(void *)id v13 = 0;
  *(_OWORD *)&v13[12] = 0u;
  long long v12 = 0u;
  int v14 = -524288;
  long long v8 = xmmword_18E416F10;
  uint64_t v9 = __DACPServer_ServerFree;
  uint64_t v10 = __DACPServer_ServerStart;
  uint64_t v11 = __DACPServer_ServerStop;
  *(void *)&v13[8] = __DACPServer_ProcessRequest;
  uint64_t v4 = HTTPServer_Create(&v17, &v8);
  uint64_t v5 = v17;
  if (v4)
  {
    uint64_t v6 = v4;
    if (!v17) {
      return v6;
    }
  }
  else
  {
    *(_OWORD *)(v17 + 224) = *(_OWORD *)a2;
    RandomBytes((void *)(v5 + 240), 8uLL);
    *(void *)(v5 + 320) = 0;
    *(void *)(v5 + 328) = 0;
    uint64_t v6 = pthread_mutex_init((pthread_mutex_t *)(v5 + 248), 0);
    if (!v6)
    {
      *(void *)(v5 + 312) = v5 + 248;
      *a1 = v5;
      return v6;
    }
  }
  HTTPServer_Delete((void *)v5);
  return v6;
}

uint64_t __DACPServer_ProcessRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)(a1 + 8);
  unsigned int v31 = 0;
  size_t v29 = 0;
  id v30 = 0;
  unsigned int v28 = 0;
  if (HTTPServer_GetNextURLSegment((uint64_t *)a1, (unint64_t *)&v30, &v29, &v31, a5, a6, a7, a8))
  {
    uint64_t v11 = v29;
    uint64_t v10 = (unsigned __int8 *)v30;
    if (strnicmpx((unsigned __int8 *)v30, v29, "ctrl-int"))
    {
      if (!strnicmpx(v10, v11, "server-info"))
      {
LABEL_15:
        uint64_t v23 = 404;
        return HTTPServer_SendStatusResponse(a1, v23, v16, v17, v18, v19, v20, v21);
      }
LABEL_7:
      if (gLogCategory_DACPServer <= 60
        && (gLogCategory_DACPServer != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_DACPServer, 0x3Cu)))
      {
        LogPrintF((uint64_t)&gLogCategory_DACPServer, (uint64_t)"OSStatus __DACPServer_ProcessRequest(HTTPServerConnectionRef)", 0x3Cu, (uint64_t)"### Bad URL: '%.*s'\n", v18, v19, v20, v21, *(void *)(a1 + 8408));
      }
      goto LABEL_15;
    }
    if (HTTPServer_GetNextURLSegment((uint64_t *)a1, (unint64_t *)&v30, &v29, &v31, v12, v13, v14, v15))
    {
      if (strnicmpx((unsigned __int8 *)v30, v29, "1")) {
        goto LABEL_7;
      }
      unsigned int v31 = HTTPGetHeaderField((char *)(a1 + 160), *(void *)(a1 + 8352), "Active-Remote", 0, 0, (const char **)&v30, &v29, 0);
      if (v31)
      {
        if (gLogCategory_DACPServer > 60
          || gLogCategory_DACPServer == -1 && !_LogCategory_Initialize((uint64_t)&gLogCategory_DACPServer, 0x3Cu))
        {
          goto LABEL_40;
        }
        unint64_t v22 = "### No Active-Remote in headers\n";
      }
      else
      {
        if (SNScanF(v30, v29, "%u", v17, v18, v19, v20, v21, (int)&v28) == 1)
        {
          pthread_mutex_lock(*(pthread_mutex_t **)(v9 + 312));
          uint64_t v25 = *(void *)(v9 + 328);
          if (v25)
          {
            unint64_t v26 = 0;
            while (*(_DWORD *)(*(void *)(v9 + 320) + 4 * v26) != v28)
            {
              if (v25 == ++v26)
              {
                unint64_t v26 = *(void *)(v9 + 328);
                break;
              }
            }
          }
          else
          {
            unint64_t v26 = 0;
          }
          pthread_mutex_unlock(*(pthread_mutex_t **)(v9 + 312));
          if (v26 >= *(void *)(v9 + 328))
          {
            if (gLogCategory_DACPServer <= 50
              && (gLogCategory_DACPServer != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_DACPServer, 0x32u)))
            {
              LogPrintF((uint64_t)&gLogCategory_DACPServer, (uint64_t)"OSStatus __DACPServer_ProcessRequest(HTTPServerConnectionRef)", 0x32u, (uint64_t)"### Remote ID %u not authorized\n", v18, v19, v20, v21, v28);
            }
            uint64_t v23 = 403;
          }
          else
          {
            if (!HTTPServer_GetNextURLSegment((uint64_t *)a1, (unint64_t *)&v30, &v29, &v31, v18, v19, v20, v21))return v31; {
            size_t v29 = *(void *)(a1 + 8400) - (void)v30 + *(void *)(a1 + 8408);
            }
            if ((*(unsigned int (**)(uint64_t))(v9 + 224))(v9)) {
              uint64_t v23 = 400;
            }
            else {
              uint64_t v23 = 200;
            }
          }
          return HTTPServer_SendStatusResponse(a1, v23, v16, v17, v18, v19, v20, v21);
        }
        if (gLogCategory_DACPServer > 60
          || gLogCategory_DACPServer == -1 && !_LogCategory_Initialize((uint64_t)&gLogCategory_DACPServer, 0x3Cu))
        {
          goto LABEL_40;
        }
        uint64_t v27 = v29;
        unint64_t v22 = "### Bad Active-Remote '%.*s\n";
      }
      LogPrintF((uint64_t)&gLogCategory_DACPServer, (uint64_t)"OSStatus __DACPServer_ProcessRequest(HTTPServerConnectionRef)", 0x3Cu, (uint64_t)v22, v18, v19, v20, v21, v27);
LABEL_40:
      uint64_t v23 = 400;
      return HTTPServer_SendStatusResponse(a1, v23, v16, v17, v18, v19, v20, v21);
    }
  }
  return v31;
}

void __DACPServer_ServerStop(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = *(_DNSServiceRef_t **)(a1 + 336);
  if (v10)
  {
    DNSServiceRefDeallocate(v10);
    *(void *)(a1 + 336) = 0;
  }
  if (gLogCategory_DACPServer <= 40
    && (gLogCategory_DACPServer != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_DACPServer, 0x28u)))
  {
    LogPrintF((uint64_t)&gLogCategory_DACPServer, (uint64_t)"void __DACPServer_ServerStop(HTTPServerOldRef)", 0x28u, (uint64_t)"Stopped\n", a5, a6, a7, a8, a9);
  }
}

uint64_t __DACPServer_ServerStart(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  snprintf(__str, 0x40uLL, "%s%016llX", "iTunes_Ctrl_", *(void *)(a1 + 240));
  uint64_t v6 = DNSServiceRegister((DNSServiceRef *)(a1 + 336), 0, 0, __str, "_dacp._tcp", "local.", 0, bswap32(*(_DWORD *)(a1 + 128)) >> 16, 0, 0, 0, 0);
  if (!v6
    && gLogCategory_DACPServer <= 40
    && (gLogCategory_DACPServer != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_DACPServer, 0x28u)))
  {
    LogPrintF((uint64_t)&gLogCategory_DACPServer, (uint64_t)"OSStatus __DACPServer_ServerStart(HTTPServerOldRef)", 0x28u, (uint64_t)"Registered %s.%s port %d\n", v2, v3, v4, v5, (uint64_t)__str);
  }
  return v6;
}

uint64_t __DACPServer_ServerFree(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = (_DNSServiceRef_t *)a1[42];
  if (v10)
  {
    DNSServiceRefDeallocate(v10);
    a1[42] = 0;
  }
  uint64_t v11 = (void *)a1[40];
  if (v11)
  {
    free(v11);
    a1[40] = 0;
  }
  a1[41] = 0;
  uint64_t result = a1[39];
  if (result)
  {
    uint64_t result = pthread_mutex_destroy((pthread_mutex_t *)result);
    a1[39] = 0;
  }
  if (gLogCategory_DACPServer <= 40)
  {
    if (gLogCategory_DACPServer != -1
      || (uint64_t result = _LogCategory_Initialize((uint64_t)&gLogCategory_DACPServer, 0x28u), result))
    {
      return LogPrintF((uint64_t)&gLogCategory_DACPServer, (uint64_t)"void __DACPServer_ServerFree(HTTPServerOldRef)", 0x28u, (uint64_t)"Deleted\n", a5, a6, a7, a8, a9);
    }
  }
  return result;
}

uint64_t DACPServer_GetRemoteCount(uint64_t a1)
{
  return *(void *)(a1 + 328);
}

uint64_t DACPServer_AddRemote(uint64_t a1, int a2, unsigned int *a3)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 312));
  if (a2)
  {
    uint64_t v6 = *(void **)(a1 + 320);
    if (v6)
    {
      free(v6);
      *(void *)(a1 + 320) = 0;
    }
    *(void *)(a1 + 328) = 0;
  }
  unsigned int bytes = 0;
  uint64_t v7 = (uint64_t *)(a1 + 328);
  while (1)
  {
    RandomBytes(&bytes, 4uLL);
    uint64_t v8 = *v7;
    if (!*v7) {
      break;
    }
    uint64_t v9 = *(int **)(a1 + 320);
    while (1)
    {
      int v10 = *v9++;
      if (v10 == bytes) {
        break;
      }
      if (!--v8) {
        goto LABEL_10;
      }
    }
  }
LABEL_10:
  uint64_t appended = SimpleArrayAppendItem((void **)(a1 + 320), (uint64_t *)(a1 + 328), 4uLL, &bytes);
  if (!appended)
  {
    if (gLogCategory_DACPServer <= 40
      && (gLogCategory_DACPServer != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_DACPServer, 0x28u)))
    {
      LogPrintF((uint64_t)&gLogCategory_DACPServer, (uint64_t)"OSStatus DACPServer_AddRemote(DACPServerRef, Boolean, uint32_t *)", 0x28u, (uint64_t)"Added remote %u\n", v11, v12, v13, v14, bytes);
    }
    uint64_t appended = 0;
    *a3 = bytes;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 312));
  return appended;
}

uint64_t DACPServer_RemoveRemote(uint64_t a1, uint64_t a2)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 312));
  unint64_t v8 = *(void *)(a1 + 328);
  if (v8)
  {
    unint64_t v9 = 0;
    uint64_t v10 = *(void *)(a1 + 320);
    while (*(_DWORD *)(v10 + 4 * v9) != a2)
    {
      if (v8 == ++v9) {
        goto LABEL_5;
      }
    }
    if (v8 > v9)
    {
      unint64_t v12 = v8 - 1;
      if (v8 - 1 > v9) {
        memcpy((void *)(v10 + 4 * v9), (const void *)(v10 + 4 * v9 + 4), 4 * v8 - (4 * v9 + 4));
      }
      *(void *)(a1 + 328) = v12;
    }
    if (gLogCategory_DACPServer <= 40
      && (gLogCategory_DACPServer != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_DACPServer, 0x28u)))
    {
      LogPrintF((uint64_t)&gLogCategory_DACPServer, (uint64_t)"OSStatus DACPServer_RemoveRemote(DACPServerRef, uint32_t)", 0x28u, (uint64_t)"Removed remote %u\n", v4, v5, v6, v7, a2);
    }
    uint64_t v11 = 0;
  }
  else
  {
LABEL_5:
    uint64_t v11 = 4294960569;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 312));
  return v11;
}

uint64_t DataBuffer_Commit(uint64_t a1, void *a2, void *a3)
{
  uint64_t result = *(unsigned int *)(a1 + 52);
  if (!result)
  {
    *(_DWORD *)(a1 + 52) = -6721;
    if (a2) {
      *a2 = *(void *)(a1 + 24);
    }
    if (a3) {
      *a3 = *(void *)(a1 + 32);
    }
  }
  return result;
}

uint64_t DataBuffer_AppendANSIFile(uint64_t a1, FILE *a2)
{
  uint64_t v4 = malloc_type_malloc(0x8000uLL, 0xC4456E9FuLL);
  if (!v4) {
    return 4294960568;
  }
  uint64_t v5 = v4;
  while (1)
  {
    size_t v6 = fread(v5, 1uLL, 0x8000uLL, a2);
    if (!v6) {
      break;
    }
    uint64_t v7 = DataBuffer_Append(a1, (char *)v5, v6);
    if (v7)
    {
      uint64_t v8 = v7;
      goto LABEL_7;
    }
  }
  uint64_t v8 = 0;
LABEL_7:
  free(v5);
  return v8;
}

uint64_t DataBuffer_AppendFile(uint64_t a1, char *__filename)
{
  uint64_t v3 = fopen(__filename, "rb");
  if (v3)
  {
    uint64_t v4 = a1;
    uint64_t v5 = v3;
LABEL_6:
    uint64_t appended = DataBuffer_AppendANSIFile(v4, v5);
    fclose(v3);
    return appended;
  }
  if (!*__error()) {
    return 4294960596;
  }
  uint64_t appended = *__error();
  if (!appended)
  {
    uint64_t v4 = a1;
    uint64_t v5 = 0;
    goto LABEL_6;
  }
  return appended;
}

uint64_t DataBuffer_RunProcessAndAppendOutput(uint64_t a1, char *a2)
{
  uint64_t v3 = popen(a2, "r");
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t appended = DataBuffer_AppendANSIFile(a1, v3);
    pclose(v4);
    return appended;
  }
  else if (*__error())
  {
    uint64_t result = *__error();
    if (!result)
    {
      return DataBuffer_AppendANSIFile(a1, 0);
    }
  }
  else
  {
    return 4294960596;
  }
  return result;
}

uint64_t IPCAgent_Create(void *a1)
{
  uint64_t v2 = (char *)malloc_type_calloc(1uLL, 0x70uLL, 0x10A0040688857C7uLL);
  if (v2)
  {
    uint64_t v3 = v2;
    *((_DWORD *)v2 + 8) = -1;
    RandomBytes(v2 + 16, 0x10uLL);
    v3[22] = v3[22] & 0xF | 0x40;
    v3[24] = v3[24] & 0x3F | 0x80;
    uint64_t v4 = dispatch_queue_create("IPCAgent", 0);
    *(void *)uint64_t v3 = v4;
    if (v4)
    {
      dispatch_set_context(v4, v3);
      dispatch_set_finalizer_f(*(dispatch_object_t *)v3, (dispatch_function_t)_IPCAgent_Finalize);
      uint64_t result = 0;
      *a1 = v3;
      return result;
    }
    _IPCAgent_Finalize(v3);
  }
  return 4294960568;
}

void _IPCAgent_Finalize(void *a1)
{
  *a1 = 0;
  uint64_t v2 = a1[1];
  if (v2) {
    dispatch_semaphore_signal(v2);
  }
  free(a1);
}

void _IPCAgent_Delete(uint64_t a1)
{
  *(void *)(a1 + 96) = 0;
  uint64_t v2 = *(NSObject **)(a1 + 40);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(a1 + 40));
  }
  else
  {
    int v3 = *(_DWORD *)(a1 + 32);
    if ((v3 & 0x80000000) == 0)
    {
      if (close(v3) && *__error()) {
        __error();
      }
      *(_DWORD *)(a1 + 32) = -1;
    }
  }
  while (1)
  {
    uint64_t v4 = *(void **)(a1 + 56);
    if (!v4) {
      break;
    }
    *(void *)(a1 + 56) = *v4;
    _IPCAgent_FreeMessage(v4);
  }
  uint64_t v5 = *(NSObject **)a1;
  dispatch_release(v5);
}

void _IPCAgent_FreeMessage(void *a1)
{
  for (uint64_t i = (void *)a1[2]; i; uint64_t i = (void *)a1[2])
  {
    a1[2] = *i;
    free(i);
  }
  free(a1);
}

void IPCAgent_DeleteSync(uint64_t a1)
{
  uint64_t v2 = dispatch_semaphore_create(0);
  *(void *)(a1 + 8) = v2;
  dispatch_async_f(*(dispatch_queue_t *)a1, (void *)a1, (dispatch_function_t)_IPCAgent_Delete);
  if (v2)
  {
    dispatch_semaphore_wait(v2, 0xFFFFFFFFFFFFFFFFLL);
    dispatch_release(v2);
  }
}

void _IPCAgent_Start(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int v8 = -1;
  int v2 = ServerSocketOpenEx2(2, 2, 17, 0, 0, 3721, 0, -1, 0, &v8);
  int v3 = v8;
  if (!v2)
  {
    *(_DWORD *)unsigned int __dst = 1;
    if (!setsockopt(v8, 0, 20, __dst, 4u) || *__error() && !*__error())
    {
      unint64_t v9 = 0;
      if (!getifaddrs(&v9))
      {
        if (v9)
        {
          uint64_t v4 = v9;
          while (1)
          {
            ifa_name = v4->ifa_name;
            if (ifa_name)
            {
              if ((v4->ifa_flags & 8) != 0) {
                break;
              }
            }
            uint64_t v4 = v4->ifa_next;
            if (!v4) {
              goto LABEL_16;
            }
          }
          strlcpy(__dst, ifa_name, 0x11uLL);
          *(_DWORD *)(a1 + 48) = if_nametoindex(v4->ifa_name);
          MEMORY[0x192FAA4D0](v9);
          if (!SocketSetMulticastInterface(v3, __dst, *(_DWORD *)(a1 + 48))
            && !SocketSetMulticastLoop(v3))
          {
            *(void *)(a1 + 68) = 0x490F05E8890E0210;
            *(void *)(a1 + 76) = 0;
            if (!_SocketJoinOrLeaveMulticast(v3, a1 + 68, __dst, *(_DWORD *)(a1 + 48), 1))
            {
              size_t v6 = dispatch_source_create(MEMORY[0x1E4F14478], v3, 0, *(dispatch_queue_t *)a1);
              if (v6)
              {
                uint64_t v7 = v6;
                dispatch_set_context(v6, (void *)a1);
                dispatch_source_set_event_handler_f(v7, (dispatch_function_t)_IPCAgent_ReadHandler);
                dispatch_source_set_cancel_handler_f(v7, (dispatch_function_t)_IPCAgent_CancelHandler);
                dispatch_resume(v7);
                *(_DWORD *)(a1 + 32) = v3;
                *(void *)(a1 + 40) = v7;
                return;
              }
            }
          }
        }
        else
        {
LABEL_16:
          MEMORY[0x192FAA4D0]();
        }
      }
    }
  }
  if ((v3 & 0x80000000) == 0 && close(v3))
  {
    if (*__error()) {
      __error();
    }
  }
}

int *_IPCAgent_CancelHandler(uint64_t a1)
{
  uint64_t result = (int *)*(unsigned int *)(a1 + 32);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = (int *)close((int)result);
    if (result)
    {
      uint64_t result = __error();
      if (*result) {
        uint64_t result = __error();
      }
    }
    *(_DWORD *)(a1 + 32) = -1;
  }
  *(void *)(a1 + 40) = 0;
  return result;
}

void _IPCAgent_ReadHandler(uint64_t a1)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = mach_absolute_time();
  if (UpTicksPerSecond_sOnce != -1) {
    dispatch_once_f(&UpTicksPerSecond_sOnce, &UpTicksPerSecond_sTicksPerSecond, (dispatch_function_t)_UpTicksPerSecondInit);
  }
  long long v47 = 0;
  uint64_t v48 = 0;
  memset(&v46, 0, sizeof(v46));
  memset(v44, 0, sizeof(v44));
  int v45 = 0;
  uint64_t v4 = (uint64_t *)(a1 + 56);
  int v3 = *(void **)(a1 + 56);
  if (v3)
  {
    unint64_t v5 = 5 * UpTicksPerSecond_sTicksPerSecond;
    size_t v6 = (void *)(a1 + 56);
    do
    {
      uint64_t v7 = v6;
      size_t v6 = v3;
      while (v2 - v6[1] > v5)
      {
        --*(_DWORD *)(a1 + 64);
        *uint64_t v7 = *v6;
        _IPCAgent_FreeMessage(v6);
        size_t v6 = (void *)*v7;
        if (!*v7) {
          goto LABEL_10;
        }
      }
      int v3 = (void *)*v6;
    }
    while (*v6);
  }
LABEL_10:
  int v8 = malloc_type_malloc(0x5D0uLL, 0x1020040D6206B1BuLL);
  if (v8)
  {
    unint64_t v9 = (unsigned __int8 *)v8;
    uint64_t v10 = v8 + 2;
    long long v47 = (char *)(v8 + 2);
    uint64_t v48 = 1472;
    v46.msg_name = v44;
    v46.msg_namelen = 28;
    v46.msg_iov = (iovec *)&v47;
    v46.msg_iovlen = 1;
    v46.msg_control = &v51;
    *(void *)&v46.msg_controllen = 256;
    while (1)
    {
      unint64_t v11 = recvmsg(*(_DWORD *)(a1 + 32), &v46, 0);
      if ((v11 & 0x8000000000000000) == 0) {
        break;
      }
      if (!*__error()) {
        goto LABEL_16;
      }
      int v12 = *__error();
      if (v12 != 4)
      {
        if (v12)
        {
LABEL_16:
          int v13 = *(_DWORD *)(a1 + 32);
          socklen_t v49 = 4;
          int v50 = 0;
          if (getsockopt(v13, 0xFFFF, 4353, &v50, &v49) && *__error()) {
            __error();
          }
          if (v50)
          {
            uint64_t v14 = *(NSObject **)(a1 + 40);
            if (v14)
            {
              dispatch_source_cancel(v14);
              dispatch_release(*(dispatch_object_t *)(a1 + 40));
            }
            else
            {
              int v18 = *(_DWORD *)(a1 + 32);
              if ((v18 & 0x80000000) == 0)
              {
                if (close(v18))
                {
                  if (*__error()) {
                    __error();
                  }
                }
                *(_DWORD *)(a1 + 32) = -1;
              }
            }
          }
        }
        goto LABEL_53;
      }
    }
    CFIndex v15 = v11 - 38;
    if (v11 >= 0x26 && v46.msg_controllen >= 0xC)
    {
      msg_control = (unsigned int *)v46.msg_control;
      if (v46.msg_control)
      {
        while (msg_control[1] || msg_control[2] != 20)
        {
          msg_control = (unsigned int *)((char *)msg_control + ((*msg_control + 3) & 0x1FFFFFFFCLL));
          if ((char *)(msg_control + 3) > (char *)v46.msg_control + v46.msg_controllen)
          {
            LODWORD(msg_control) = 0;
            goto LABEL_38;
          }
        }
        LODWORD(msg_control) = *((unsigned __int16 *)msg_control + 7);
      }
LABEL_38:
      if (msg_control == *(_DWORD *)(a1 + 48) && *v10 == 828600425)
      {
        unsigned int v19 = v9[44];
        unsigned int v20 = v9[45];
        if (v19 < v20 && v20 != 255)
        {
          *((void *)v9 + 185) = v15;
          if (*(void *)(v9 + 28) != *(void *)(a1 + 16) || *(void *)(v9 + 36) != *(void *)(a1 + 24))
          {
            if (v20 == 1)
            {
              CFDataRef v22 = CFDataCreate(0, v9 + 46, v15);
              if (v22)
              {
                CFDataRef v23 = v22;
                CFPropertyListRef v24 = CFPropertyListCreateWithData(0, v22, 0, 0, 0);
                CFRelease(v23);
                if (v24)
                {
                  CFTypeID v25 = CFGetTypeID(v24);
                  if (v25 == CFDictionaryGetTypeID())
                  {
                    unint64_t v26 = *(void (**)(CFPropertyListRef, void))(a1 + 96);
                    if (v26) {
                      v26(v24, *(void *)(a1 + 104));
                    }
                  }
                  CFRelease(v24);
                }
              }
              goto LABEL_53;
            }
            while (1)
            {
              uint64_t v27 = v4;
              uint64_t v4 = (uint64_t *)*v4;
              if (!v4) {
                goto LABEL_64;
              }
              unsigned int v28 = (uint64_t *)v4[2];
              unint64_t v29 = bswap64(*(uint64_t *)((char *)v28 + 12));
              unint64_t v30 = bswap64(*(void *)(v9 + 12));
              if (v29 == v30)
              {
                unint64_t v29 = bswap64(*(uint64_t *)((char *)v28 + 20));
                unint64_t v30 = bswap64(*(void *)(v9 + 20));
                if (v29 == v30) {
                  break;
                }
              }
              if (v29 < v30) {
                int v31 = -1;
              }
              else {
                int v31 = 1;
              }
              if ((v31 & 0x80000000) == 0) {
                goto LABEL_63;
              }
            }
            int v31 = 0;
LABEL_63:
            if (!v31)
            {
              if (v20 != *((unsigned __int8 *)v28 + 45)) {
                goto LABEL_53;
              }
              long long v34 = (const UInt8 **)(v4 + 2);
              unsigned int v35 = *((unsigned __int8 *)v28 + 44);
              if (v35 >= v19)
              {
                long long v36 = v4 + 2;
LABEL_73:
                if (v35 == v19) {
                  goto LABEL_53;
                }
              }
              else
              {
                while (1)
                {
                  long long v36 = v28;
                  unsigned int v28 = (uint64_t *)*v28;
                  if (!v28) {
                    break;
                  }
                  unsigned int v35 = *((unsigned __int8 *)v28 + 44);
                  if (v35 >= v19) {
                    goto LABEL_73;
                  }
                }
              }
              *(void *)unint64_t v9 = v28;
              *long long v36 = v9;
              int v37 = *((_DWORD *)v4 + 6) + 1;
              *((_DWORD *)v4 + 6) = v37;
              if (v37 == v20)
              {
                --*(_DWORD *)(a1 + 64);
                *uint64_t v27 = *v4;
                CFMutableDataRef Mutable = CFDataCreateMutable(0, 0);
                if (Mutable)
                {
                  long long v39 = Mutable;
                  for (uint64_t i = *v34; i; uint64_t i = *(const UInt8 **)i)
                    CFDataAppendBytes(v39, i + 46, *((void *)i + 185));
                  CFPropertyListRef v41 = CFPropertyListCreateWithData(0, v39, 0, 0, 0);
                  CFRelease(v39);
                  if (v41)
                  {
                    CFTypeID v42 = CFGetTypeID(v41);
                    if (v42 == CFDictionaryGetTypeID())
                    {
                      long long v43 = *(void (**)(CFPropertyListRef, void))(a1 + 96);
                      if (v43) {
                        v43(v41, *(void *)(a1 + 104));
                      }
                    }
                    CFRelease(v41);
                  }
                }
                _IPCAgent_FreeMessage(v4);
              }
              return;
            }
LABEL_64:
            if (*(int *)(a1 + 64) <= 19)
            {
              uint64_t v32 = malloc_type_malloc(0x20uLL, 0x10200402CFBC8ADuLL);
              if (v32)
              {
                uint64_t v33 = v32;
                *(void *)unint64_t v9 = 0;
                v32[1] = mach_absolute_time();
                v33[2] = v9;
                *((_DWORD *)v33 + 6) = 1;
                *uint64_t v33 = *v27;
                *uint64_t v27 = v33;
                ++*(_DWORD *)(a1 + 64);
                return;
              }
            }
          }
        }
      }
    }
LABEL_53:
    free(v9);
  }
}

uint64_t IPCAgent_SendMessage(dispatch_queue_t *a1, const void *a2)
{
  uint64_t v4 = malloc_type_malloc(0x10uLL, 0x60040FAFB2B2FuLL);
  if (!v4) {
    return 4294960568;
  }
  unint64_t v5 = v4;
  *uint64_t v4 = a1;
  v4[1] = a2;
  CFRetain(a2);
  dispatch_async_f(*a1, v5, (dispatch_function_t)_IPCAgent_SendMessage);
  return 0;
}

void _IPCAgent_SendMessage(CFPropertyListRef *a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  memset(v8, 0, 512);
  uint64_t v2 = (char *)*a1;
  CFDataRef Data = CFPropertyListCreateData(0, a1[1], kCFPropertyListBinaryFormat_v1_0, 0, 0);
  if (Data)
  {
    CFDataRef v4 = Data;
    BytePtr = CFDataGetBytePtr(Data);
    unint64_t Length = CFDataGetLength(v4);
    LODWORD(v8[0]) = 828600425;
    RandomBytes((char *)v8 + 4, 0x10uLL);
    BYTE10(v8[0]) = BYTE10(v8[0]) & 0xF | 0x40;
    BYTE12(v8[0]) = BYTE12(v8[0]) & 0x3F | 0x80;
    *(_OWORD *)((char *)&v8[1] + 4) = *((_OWORD *)v2 + 1);
    BYTE4(v8[2]) = 0;
    BYTE5(v8[2]) = (Length + 1433) / 0x59A;
    do
    {
      if (Length >= 0x59A) {
        uint64_t v7 = 1434;
      }
      else {
        uint64_t v7 = Length;
      }
      __memcpy_chk();
      if (sendto(*((_DWORD *)v2 + 8), v8, v7 + 38, 0, (const sockaddr *)(v2 + 68), 0x10u) != v7 + 38
        && (!*__error() || *__error()))
      {
        break;
      }
      BytePtr += v7;
      Length -= v7;
      ++BYTE4(v8[2]);
    }
    while (BYTE5(v8[2]) > BYTE4(v8[2]));
    CFRelease(v4);
  }
  CFRelease(a1[1]);
  free(a1);
}

intptr_t _IPCAgent_PerformHandler(const void *a1, uint64_t a2)
{
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a2 + 8), 0xFFFFFFFFFFFFFFFFLL);
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a2 + 24));
  CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 24), a1);
  intptr_t result = dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a2 + 8));
  if (!Count)
  {
    size_t v6 = *(NSObject **)(a2 + 16);
    return dispatch_semaphore_signal(v6);
  }
  return result;
}

uint64_t DebugIPC_EnsureInitialized(uint64_t (*a1)(void, void, void), uint64_t a2)
{
  gDebugIPCHandlerFunc = a1;
  gDebugIPCHandlerContext = a2;
  if (gDebugIPCAgent) {
    return 0;
  }
  uint64_t result = IPCAgent_Create(&gDebugIPCAgent);
  if (!result)
  {
    uint64_t v3 = gDebugIPCAgent;
    *(void *)(gDebugIPCAgent + 96) = _DebugIPC_MessageHandler;
    *(void *)(v3 + 104) = v3;
    dispatch_async_f(*(dispatch_queue_t *)v3, (void *)v3, (dispatch_function_t)_IPCAgent_Start);
    return 0;
  }
  return result;
}

void _DebugIPC_MessageHandler(CFDictionaryRef theDict, dispatch_queue_t *a2)
{
  uint64_t v17 = 0;
  CFMutableDictionaryRef theDicta = 0;
  CFTypeRef cf = 0;
  if (!gDebugIPCHandlerFunc) {
    goto LABEL_4;
  }
  int v4 = gDebugIPCHandlerFunc(theDict, &cf, gDebugIPCHandlerContext);
  if (!v4)
  {
LABEL_7:
    if (!cf) {
      return;
    }
    IPCAgent_SendMessage(a2, cf);
    goto LABEL_9;
  }
  if (v4 == -6714)
  {
LABEL_4:
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(theDict, @"command");
    if (Value)
    {
      CFStringRef v6 = Value;
      CFTypeID v7 = CFGetTypeID(Value);
      if (v7 == CFStringGetTypeID())
      {
        if (CFStringCompare(v6, @"logging", 0)) {
          goto LABEL_7;
        }
        CFStringRef v8 = (const __CFString *)CFDictionaryGetValue(theDict, @"value");
        if (!v8 || (CFStringRef v9 = v8, v10 = CFGetTypeID(v8), v10 == CFStringGetTypeID()) && !LogControlCF(v9))
        {
          uint64_t v17 = 0;
          if (!LogShow(&v17))
          {
            int Formatted = CFPropertyListCreateFormatted(0, (CFTypeRef *)&theDicta, (uint64_t)"{%kO=%s}", v11, v12, v13, v14, v15, @"value");
            free(v17);
            if (!Formatted)
            {
              CFTypeRef cf = theDicta;
              if (!theDicta) {
                return;
              }
              CFDictionarySetValue(theDicta, @"responseType", v6);
              goto LABEL_7;
            }
          }
        }
      }
    }
  }
LABEL_9:
  if (cf) {
    CFRelease(cf);
  }
}

void DebugIPC_EnsureFinalized()
{
  if (gDebugIPCAgent)
  {
    IPCAgent_DeleteSync(gDebugIPCAgent);
    gDebugIPCAgent = 0;
  }
}

uint64_t DebugIPC_LogControl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return DebugIPC_PerformF(_DebugIPC_ShowHandler, 0, (uint64_t)"{%kO=%O%kO=%s}", a4, a5, a6, a7, a8, @"command");
}

uint64_t DebugIPC_PerformF(uint64_t (*a1)(const __CFDictionary *a1), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CFTypeRef cf = 0;
  uint64_t v11 = CFPropertyListBuildFormatted(0, 0, &cf, a3, (uint64_t)&a9, a6, a7, a8);
  if (!v11)
  {
    if (a1) {
      uint64_t v12 = a1;
    }
    else {
      uint64_t v12 = _DebugIPC_ShowHandler;
    }
    CFTypeRef v13 = cf;
    *(_OWORD *)CFMutableDataRef context = 0u;
    *(_OWORD *)long long theArray = 0u;
    context[1] = dispatch_semaphore_create(1);
    if (context[1] && (theArray[0] = (CFArrayRef)dispatch_semaphore_create(0)) != 0)
    {
      theArray[1] = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
      if (theArray[1])
      {
        uint64_t v11 = IPCAgent_Create(context);
        if (!v11)
        {
          uint64_t v14 = (dispatch_queue_t *)context[0];
          *((void *)context[0] + 12) = _IPCAgent_PerformHandler;
          v14[13] = (dispatch_queue_t)context;
          dispatch_async_f(*v14, v14, (dispatch_function_t)_IPCAgent_Start);
          uint64_t v11 = IPCAgent_SendMessage((dispatch_queue_t *)context[0], v13);
          if (!v11)
          {
            while (1)
            {
              uint64_t v16 = theArray[0];
              dispatch_time_t v17 = dispatch_time(0, 300000000);
              if (dispatch_semaphore_wait(v16, v17)) {
                break;
              }
              while (1)
              {
                dispatch_semaphore_wait((dispatch_semaphore_t)context[1], 0xFFFFFFFFFFFFFFFFLL);
                if (!CFArrayGetCount(theArray[1])) {
                  break;
                }
                CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(theArray[1], 0);
                CFRetain(ValueAtIndex);
                CFArrayRemoveValueAtIndex(theArray[1], 0);
                dispatch_semaphore_signal((dispatch_semaphore_t)context[1]);
                ((void (*)(const void *, uint64_t))v12)(ValueAtIndex, a2);
                CFRelease(ValueAtIndex);
              }
              dispatch_semaphore_signal((dispatch_semaphore_t)context[1]);
            }
            uint64_t v11 = 0;
          }
        }
      }
      else
      {
        uint64_t v11 = 4294960568;
      }
    }
    else
    {
      uint64_t v11 = 4294960596;
    }
    if (context[0]) {
      IPCAgent_DeleteSync((uint64_t)context[0]);
    }
    if (context[1]) {
      dispatch_release((dispatch_object_t)context[1]);
    }
    if (theArray[0]) {
      dispatch_release((dispatch_object_t)theArray[0]);
    }
    if (theArray[1]) {
      CFRelease(theArray[1]);
    }
    CFRelease(cf);
  }
  return v11;
}

uint64_t _DebugIPC_ShowHandler(const __CFDictionary *a1)
{
  id v1 = (uint64_t (*)(const char *, uint64_t))*MEMORY[0x1E4F143D8];
  CFStringRef Value = CFDictionaryGetValue(a1, @"value");
  return FPrintF(v1, "%@\n", v3, v4, v5, v6, v7, v8, (uint64_t)Value);
}

uint64_t DebugPrintAssert(uint64_t result, int a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (gLogCategory_DebugServicesAssert > 70) {
    return result;
  }
  char v10 = result;
  if (gLogCategory_DebugServicesAssert == -1)
  {
    uint64_t result = _LogCategory_Initialize((uint64_t)&gLogCategory_DebugServicesAssert, 0x46u);
    if (!result) {
      return result;
    }
  }
  if (a4)
  {
    for (uint64_t i = a4 + 1; ; ++i)
    {
      int v12 = *((unsigned __int8 *)i - 1);
      if (v12 == 47 || v12 == 92)
      {
        a4 = i;
      }
      else if (!*(i - 1))
      {
        break;
      }
    }
  }
  if (!a4) {
    a4 = "";
  }
  if (a2)
  {
    if (gLogCategory_DebugServicesLogging <= 70)
    {
      if (gLogCategory_DebugServicesLogging != -1
        || (uint64_t result = _LogCategory_Initialize((uint64_t)&gLogCategory_DebugServicesLogging, 0x46u), result))
      {
        uint64_t result = LogPrintF((uint64_t)&gLogCategory_DebugServicesLogging, (uint64_t)"void DebugPrintAssert(DebugAssertFlags, OSStatus, const char *, const char *, long, const char *, const char *, ...)", 0x46u, (uint64_t)"### [ASSERT] %s:%ld \"%###s\", %#m %V\n%s", a5, a6, a7, a8, (uint64_t)a4);
      }
    }
  }
  else if (gLogCategory_DebugServicesLogging <= 70)
  {
    if (gLogCategory_DebugServicesLogging != -1
      || (uint64_t result = _LogCategory_Initialize((uint64_t)&gLogCategory_DebugServicesLogging, 0x46u), result))
    {
      uint64_t result = LogPrintF((uint64_t)&gLogCategory_DebugServicesLogging, (uint64_t)"void DebugPrintAssert(DebugAssertFlags, OSStatus, const char *, const char *, long, const char *, const char *, ...)", 0x46u, (uint64_t)"### [ASSERT] %s:%ld \"%###s\", \"%s\" %V\n%s", a5, a6, a7, a8, (uint64_t)a4);
    }
  }
  if (v10)
  {
    if (!DebugIsDebuggerPresent())
    {
      while (1)
        ;
    }
LABEL_33:
    __debugbreak();
    JUMPOUT(0x18E3BA5F8);
  }
  if (gLogCategory_DebugServicesBreak <= 70)
  {
    if (gLogCategory_DebugServicesBreak != -1
      || (uint64_t result = _LogCategory_Initialize((uint64_t)&gLogCategory_DebugServicesBreak, 0x46u), result))
    {
      uint64_t result = DebugIsDebuggerPresent();
      if (result)
      {
        uint64_t result = (uint64_t)getenv("USERBREAK");
        if (result)
        {
          if (*(unsigned char *)result == 49) {
            goto LABEL_33;
          }
        }
      }
    }
  }
  return result;
}

uint64_t DebugIsDebuggerPresent()
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v5 = 0u;
  long long v6 = 0u;
  long long v3 = 0u;
  long long v4 = 0u;
  memset(v2, 0, sizeof(v2));
  *(void *)uint64_t v33 = 0xE00000001;
  int v34 = 1;
  pid_t v35 = getpid();
  size_t v1 = 648;
  LODWORD(v3) = 0;
  sysctl(v33, 4u, v2, &v1, 0, 0);
  return (v3 >> 11) & 1;
}

const char *DebugGetErrorString(int a1, char *a2, uint64_t a3)
{
  return DebugGetErrorStringEx(0, a1, a2, a3);
}

const char *HTTPGetReasonPhrase(int a1)
{
  if (a1 <= 299)
  {
    switch(a1)
    {
      case 200:
        uint64_t result = "OK";
        break;
      case 201:
        uint64_t result = "Created";
        break;
      case 202:
        uint64_t result = "Accepted";
        break;
      case 203:
        uint64_t result = "Non-Authoritative Information";
        break;
      case 204:
        uint64_t result = "No Content";
        break;
      case 205:
        uint64_t result = "Reset Content";
        break;
      case 206:
        uint64_t result = "Partial Content";
        break;
      case 207:
        uint64_t result = "Multi-Status";
        break;
      case 208:
        uint64_t result = "Already Reported";
        break;
      case 209:
      case 211:
      case 212:
      case 213:
      case 214:
      case 215:
      case 216:
      case 217:
      case 218:
      case 219:
      case 220:
      case 221:
      case 222:
      case 223:
      case 224:
      case 225:
        return "";
      case 210:
        uint64_t result = "Content Different";
        break;
      case 226:
        uint64_t result = "IM Used";
        break;
      default:
        int v2 = a1 - 100;
        uint64_t result = "Continue";
        switch(v2)
        {
          case 0:
            return result;
          case 1:
            uint64_t result = "Switching Protocols";
            break;
          case 2:
            uint64_t result = "Processing";
            break;
          case 3:
            uint64_t result = "Checkpoint";
            break;
          default:
            if ("Continue" != 250) {
              return "";
            }
            uint64_t result = "Low on Storage Space";
            break;
        }
        break;
    }
  }
  else if (a1 > 550)
  {
    if (a1 <= 597)
    {
      if (a1 == 551) {
        return "Option Not Supported";
      }
      if (a1 == 553) {
        return "Proxy Unavailable";
      }
    }
    else
    {
      switch(a1)
      {
        case 598:
          return "Network Read Timeout";
        case 599:
          return "Network Connect Timeout";
        case 999:
          return "Request Denied";
      }
    }
    return "";
  }
  else
  {
    switch(a1)
    {
      case 300:
        uint64_t result = "Multiple Choices";
        break;
      case 301:
        uint64_t result = "Moved Permanently";
        break;
      case 302:
        uint64_t result = "Found";
        break;
      case 303:
        uint64_t result = "See Other";
        break;
      case 304:
        uint64_t result = "Not Modified";
        break;
      case 305:
        uint64_t result = "Use Proxy";
        break;
      case 306:
        uint64_t result = "Switch Proxy";
        break;
      case 307:
        uint64_t result = "Temporary Redirect";
        break;
      case 308:
        uint64_t result = "Permanent Redirect";
        break;
      case 330:
        uint64_t result = "Moved Location";
        break;
      case 350:
        uint64_t result = "Going Away";
        break;
      case 351:
        uint64_t result = "Load Balancing";
        break;
      case 400:
        uint64_t result = "Bad Request";
        break;
      case 401:
        uint64_t result = "Unauthorized";
        break;
      case 402:
        uint64_t result = "Payment Required";
        break;
      case 403:
        uint64_t result = "Forbidden";
        break;
      case 404:
        uint64_t result = "Not Found";
        break;
      case 405:
        uint64_t result = "Method Not Allowed";
        break;
      case 406:
        uint64_t result = "Not Acceptable";
        break;
      case 407:
        uint64_t result = "Proxy Authentication Required";
        break;
      case 408:
        uint64_t result = "Request Timeout";
        break;
      case 409:
        uint64_t result = "Conflict";
        break;
      case 410:
        uint64_t result = "Gone";
        break;
      case 411:
        uint64_t result = "Length Required";
        break;
      case 412:
        uint64_t result = "Precondition Failed";
        break;
      case 413:
        uint64_t result = "Request Entity Too Large";
        break;
      case 414:
        uint64_t result = "Request URI Too Long";
        break;
      case 415:
        uint64_t result = "Unsupported Media Type";
        break;
      case 416:
        uint64_t result = "Requested Range Not Satisfiable";
        break;
      case 417:
      case 423:
        uint64_t result = "Expectation Failed";
        break;
      case 418:
        uint64_t result = "I'm a teapot";
        break;
      case 419:
        uint64_t result = "Authentication Timeout";
        break;
      case 420:
        uint64_t result = "Enhance Your Calm";
        break;
      case 421:
        uint64_t result = "Not Authoritative";
        break;
      case 422:
        uint64_t result = "Unprocessable Entity";
        break;
      case 424:
        uint64_t result = "Failed Dependency";
        break;
      case 425:
        uint64_t result = "Unordered Collection";
        break;
      case 426:
        uint64_t result = "Upgrade Required";
        break;
      case 428:
        uint64_t result = "Precondition Required";
        break;
      case 429:
        uint64_t result = "Too Many Requests";
        break;
      case 431:
        uint64_t result = "Request Header Fields Too Large";
        break;
      case 440:
        uint64_t result = "Login Timeout";
        break;
      case 444:
        uint64_t result = "No Response";
        break;
      case 449:
        uint64_t result = "Retry With";
        break;
      case 450:
        uint64_t result = "Blocked by Parental Controls";
        break;
      case 451:
        uint64_t result = "Parameter Not Understood";
        break;
      case 452:
        uint64_t result = "Conference Not Found";
        break;
      case 453:
        uint64_t result = "Not Enough Bandwidth";
        break;
      case 454:
        uint64_t result = "Session Not Found";
        break;
      case 455:
        uint64_t result = "Method Not Valid In This State";
        break;
      case 456:
        uint64_t result = "Header Field Not Valid";
        break;
      case 457:
        uint64_t result = "Invalid Range";
        break;
      case 458:
        uint64_t result = "Parameter Is Read-Only";
        break;
      case 459:
        uint64_t result = "Aggregate Operation Not Allowed";
        break;
      case 460:
        uint64_t result = "Only Aggregate Operation Allowed";
        break;
      case 461:
        uint64_t result = "Unsupported Transport";
        break;
      case 462:
        uint64_t result = "Destination Unreachable";
        break;
      case 463:
        uint64_t result = "Destination Prohibited";
        break;
      case 464:
        uint64_t result = "Data Transport Not Ready Yet";
        break;
      case 465:
        uint64_t result = "Notification Reason Unknown";
        break;
      case 466:
        uint64_t result = "Key Management Error";
        break;
      case 470:
        uint64_t result = "Connection Authorization Required";
        break;
      case 471:
        uint64_t result = "Connection Credentials not accepted";
        break;
      case 472:
        uint64_t result = "Failure to establish secure connection";
        break;
      case 475:
        uint64_t result = "Invalid collblob";
        break;
      case 494:
        uint64_t result = "Request Header Too Large";
        break;
      case 495:
        uint64_t result = "Cert Error";
        break;
      case 496:
        uint64_t result = "No Cert";
        break;
      case 497:
        uint64_t result = "HTTP to HTTPS";
        break;
      case 498:
        uint64_t result = "Token expired/invalid";
        break;
      case 499:
        uint64_t result = "Client Closed Request";
        break;
      case 500:
        uint64_t result = "Internal Server Error";
        break;
      case 501:
        uint64_t result = "Not Implemented";
        break;
      case 502:
        uint64_t result = "Bad Gateway";
        break;
      case 503:
        uint64_t result = "Service Unavailable";
        break;
      case 504:
        uint64_t result = "Gateway Timeout";
        break;
      case 505:
        uint64_t result = "Version Not Supported";
        break;
      case 506:
        uint64_t result = "Variant Also Negotiates";
        break;
      case 507:
        uint64_t result = "Insufficient Storage";
        break;
      case 508:
        uint64_t result = "Loop Detected";
        break;
      case 509:
        uint64_t result = "Bandwidth Limit Exceeded";
        break;
      case 510:
        uint64_t result = "Not Extended";
        break;
      case 511:
        uint64_t result = "Network Authentication Required";
        break;
      case 520:
        uint64_t result = "Origin Error";
        break;
      case 521:
        uint64_t result = "Web Server Is Down";
        break;
      case 522:
        uint64_t result = "Connection timed out";
        break;
      case 523:
        uint64_t result = "Proxy Declined Request";
        break;
      case 524:
        uint64_t result = "Timeout occurred";
        break;
      case 525:
        uint64_t result = "SSL Handshake Failed";
        break;
      case 526:
        uint64_t result = "Invalid SSL Certificate";
        break;
      default:
        return "";
    }
  }
  return result;
}

BOOL DebugIsCurrentDispatchQueue(void *a1)
{
  int v2 = dispatch_get_current_queue();
  BOOL v3 = v2 == a1;

  return v3;
}

void CUFatalErrorF(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void CUFatalErrorV(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  uint64_t v9 = 0;
  VASPrintF((void **)&v9, a2, a3);
  if (v9) {
    uint64_t v3 = v9;
  }
  if (*a1 <= 90 && (*a1 != -1 || _LogCategory_Initialize((uint64_t)a1, 0x5Au))) {
    LogPrintF((uint64_t)a1, (uint64_t)"void CUFatalErrorV(LogCategory *, const char *, va_list)", 0x5Au, (uint64_t)"### Fatal Error: %s", v5, v6, v7, v8, v3);
  }
  _os_crash();
  __break(1u);
}

void FatalErrorF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void FatalErrorV(uint64_t a1, uint64_t a2)
{
  int v2 = (const char *)a1;
  uint64_t v3 = 0;
  VASPrintF((void **)&v3, a1, a2);
  if (v3) {
    int v2 = v3;
  }
  syslog(3, "### Fatal error: %s", v2);
  fprintf((FILE *)*MEMORY[0x1E4F143C8], "### Fatal error: %s\n", v2);
  _os_crash();
  __break(1u);
  JUMPOUT(0x18E3BB2A8);
}

void *__ReportCriticalError_block_invoke()
{
  uint64_t result = dlopen("/System/Library/PrivateFrameworks/CrashReporterSupport.framework/CrashReporterSupport", 5);
  ReportCriticalError_sCrashReporterLib = (uint64_t)result;
  if (result)
  {
    ReportCriticalError_sSimulateCrash_f = dlsym(result, "SimulateCrash");
    uint64_t result = dlsym((void *)ReportCriticalError_sCrashReporterLib, "WriteStackshotReportWithPID");
    ReportCriticalError_sWriteStackShot_f = result;
  }
  return result;
}

const char *DMAPFindEntryByContentCode(int a1)
{
  uint64_t result = "hsac";
  int v3 = 1667330920;
  while (v3 != a1)
  {
    int v4 = *((_DWORD *)result + 6);
    result += 24;
    int v3 = v4;
    if (!v4) {
      return 0;
    }
  }
  return result;
}

uint64_t DMAPContentBlock_Init(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)uint64_t result = a2;
  *(void *)(result + 8) = a3;
  *(void *)(result + 16) = a2;
  *(void *)(result + 24) = a3;
  *(void *)(result + 32) = 0;
  *(unsigned char *)(result + 40) = 0;
  *(void *)(result + 176) = 0;
  return result;
}

void DMAPContentBlock_Free(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40)) {
    free(*(void **)(a1 + 16));
  }
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 16) = *(void *)a1;
  *(void *)(a1 + 24) = v2;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  *(void *)(a1 + 176) = 0;
}

uint64_t DMAPContentBlock_Commit(uint64_t a1, void *a2, void *a3)
{
  uint64_t result = *(unsigned int *)(a1 + 180);
  if (!result)
  {
    if (*(_DWORD *)(a1 + 176))
    {
      return 4294960587;
    }
    else
    {
      uint64_t result = 0;
      *(_DWORD *)(a1 + 180) = -6721;
      *a2 = *(void *)(a1 + 16);
      *a3 = *(void *)(a1 + 32);
    }
  }
  return result;
}

uint64_t DMAPContentBlock_OpenContainer(uint64_t a1, int a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 176) > 0xFu) {
    return 4294960567;
  }
  v6[0] = HIBYTE(a2);
  v6[1] = BYTE2(a2);
  v6[2] = BYTE1(a2);
  _OWORD v6[3] = a2;
  int v7 = 0;
  uint64_t result = DMAPContentBlock_AddData(a1, v6, 8uLL);
  if (!result)
  {
    uint64_t v4 = *(void *)(a1 + 32) - 4;
    uint64_t v5 = *(unsigned int *)(a1 + 176);
    *(_DWORD *)(a1 + 176) = v5 + 1;
    *(void *)(a1 + 8 * v5 + 48) = v4;
  }
  return result;
}

uint64_t DMAPContentBlock_AddData(uint64_t a1, void *__src, size_t __n)
{
  uint64_t result = *(unsigned int *)(a1 + 180);
  if (result) {
    return result;
  }
  uint64_t v7 = *(void *)(a1 + 32);
  unint64_t v8 = v7 + __n;
  if (v7 + __n <= *(void *)(a1 + 24)) {
    goto LABEL_12;
  }
  if (v8 >= 0x800) {
    size_t v9 = 2 * v8;
  }
  else {
    size_t v9 = 4096;
  }
  long long v10 = malloc_type_malloc(v9, 0x4827B7DEuLL);
  if (v10)
  {
    long long v11 = v10;
    size_t v12 = *(void *)(a1 + 32);
    if (v12) {
      memcpy(v10, *(const void **)(a1 + 16), v12);
    }
    if (*(unsigned char *)(a1 + 40)) {
      free(*(void **)(a1 + 16));
    }
    *(void *)(a1 + 16) = v11;
    *(void *)(a1 + 24) = v9;
    *(unsigned char *)(a1 + 40) = 1;
    uint64_t v7 = *(void *)(a1 + 32);
LABEL_12:
    if (__src)
    {
      memcpy((void *)(*(void *)(a1 + 16) + v7), __src, __n);
      uint64_t v7 = *(void *)(a1 + 32);
    }
    uint64_t result = 0;
    *(void *)(a1 + 32) = v7 + __n;
    return result;
  }
  uint64_t result = 4294960568;
  if (!*(_DWORD *)(a1 + 180)) {
    *(_DWORD *)(a1 + 180) = -6728;
  }
  return result;
}

uint64_t DMAPContentBlock_CloseContainer(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 176);
  if (!v1) {
    return 4294960576;
  }
  unsigned int v3 = v1 - 1;
  *(_DWORD *)(a1 + 176) = v3;
  uint64_t v4 = *(void *)(a1 + 8 * v3 + 48);
  unint64_t v5 = *(void *)(a1 + 32);
  if (v5 < v4 + 4) {
    return 4294960534;
  }
  uint64_t result = 0;
  *(_DWORD *)(*(void *)(a1 + 16) + v4) = bswap32(v5 - (v4 + 4));
  return result;
}

uint64_t DMAPContentBlock_AddInt8(uint64_t a1, int a2, char a3)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  __src[0] = HIBYTE(a2);
  __src[1] = BYTE2(a2);
  __src[2] = BYTE1(a2);
  __src[3] = a2;
  int v5 = 0x1000000;
  char v6 = a3;
  return DMAPContentBlock_AddData(a1, __src, 9uLL);
}

uint64_t DMAPContentBlock_AddInt32(uint64_t a1, int a2, int a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  __src[0] = HIBYTE(a2);
  __src[1] = BYTE2(a2);
  __src[2] = BYTE1(a2);
  __src[3] = a2;
  int v5 = 0x4000000;
  char v6 = HIBYTE(a3);
  char v7 = BYTE2(a3);
  char v8 = BYTE1(a3);
  char v9 = a3;
  return DMAPContentBlock_AddData(a1, __src, 0xCuLL);
}

uint64_t DMAPContentBlock_AddCFObjectByKey(uint64_t a1, unsigned int a2, int a3, CFDictionaryRef theDict, void *key)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t result = (uint64_t)CFDictionaryGetValue(theDict, key);
  if (result)
  {
    uint64_t v9 = result;
    if (!a3)
    {
      uint64_t v10 = "hsac";
      int v11 = 1667330920;
      while (v11 != a2)
      {
        int v12 = *((_DWORD *)v10 + 6);
        v10 += 24;
        int v11 = v12;
        if (!v12) {
          return 4294960540;
        }
      }
      a3 = *((unsigned __int8 *)v10 + 16);
    }
    unsigned int v25 = 0;
    switch(a3)
    {
      case 1:
      case 2:
        char v13 = CFGetInt64((const __CFString *)result, (int *)&v25);
        uint64_t result = v25;
        if (!v25)
        {
          LOBYTE(__src) = HIBYTE(a2);
          BYTE1(__src) = BYTE2(a2);
          BYTE2(__src) = BYTE1(a2);
          HIBYTE(__src) = a2;
          unsigned int v27 = 0x1000000;
          char v28 = v13;
          uint64_t v14 = a1;
          size_t v15 = 9;
          goto LABEL_17;
        }
        break;
      case 3:
      case 4:
        __int16 v16 = CFGetInt64((const __CFString *)result, (int *)&v25);
        uint64_t result = v25;
        if (!v25)
        {
          LOBYTE(__src) = HIBYTE(a2);
          BYTE1(__src) = BYTE2(a2);
          BYTE2(__src) = BYTE1(a2);
          HIBYTE(__src) = a2;
          unsigned int v27 = 0x2000000;
          char v28 = HIBYTE(v16);
          char v29 = v16;
          uint64_t v14 = a1;
          size_t v15 = 10;
          goto LABEL_17;
        }
        break;
      case 5:
      case 6:
        int v17 = CFGetInt64((const __CFString *)result, (int *)&v25);
        uint64_t result = v25;
        if (!v25) {
          uint64_t result = DMAPContentBlock_AddInt32(a1, a2, v17);
        }
        break;
      case 7:
      case 8:
        unint64_t v18 = CFGetInt64((const __CFString *)result, (int *)&v25);
        uint64_t result = v25;
        if (!v25)
        {
          LOBYTE(__src) = HIBYTE(a2);
          BYTE1(__src) = BYTE2(a2);
          BYTE2(__src) = BYTE1(a2);
          HIBYTE(__src) = a2;
          unsigned int v27 = 0x8000000;
          char v28 = HIBYTE(v18);
          char v29 = BYTE6(v18);
          char v30 = BYTE5(v18);
          char v31 = BYTE4(v18);
          char v32 = BYTE3(v18);
          char v33 = BYTE2(v18);
          char v34 = BYTE1(v18);
          char v35 = v18;
          uint64_t v14 = a1;
          size_t v15 = 16;
LABEL_17:
          uint64_t result = DMAPContentBlock_AddData(v14, &__src, v15);
        }
        break;
      case 9:
        long long v19 = CFCopyCString((const __CFString *)result, (int *)&v25);
        uint64_t result = v25;
        if (!v25)
        {
          unsigned int __src = bswap32(a2);
          size_t v20 = strlen(v19);
          unsigned int v27 = bswap32(v20);
          unsigned int v21 = DMAPContentBlock_AddData(a1, &__src, 8uLL);
          if (!v21) {
            unsigned int v21 = DMAPContentBlock_AddData(a1, v19, v20);
          }
          unsigned int v25 = v21;
          free(v19);
          uint64_t result = v25;
        }
        break;
      case 10:
        CFTypeID v22 = CFGetTypeID((CFTypeRef)result);
        if (v22 != CFDateGetTypeID()) {
          return 4294960540;
        }
        MEMORY[0x192FA8D70](v9);
        int v24 = (*MEMORY[0x1E4F1CF78] + v23);
        uint64_t result = DMAPContentBlock_AddInt32(a1, a2, v24);
        break;
      default:
        uint64_t result = 4294960561;
        break;
    }
  }
  return result;
}

uint64_t DMAPContentBlock_GetNextChunk(unsigned int *a1, unint64_t a2, _DWORD *a3, unint64_t *a4, unsigned int **a5, void *a6)
{
  if ((unint64_t)a1 >= a2) {
    return 4294960569;
  }
  if ((uint64_t)(a2 - (void)a1) < 8) {
    return 4294960546;
  }
  unint64_t v6 = bswap32(a1[1]);
  char v7 = a1 + 2;
  if (a2 - (unint64_t)(a1 + 2) < v6) {
    return 4294960546;
  }
  *a3 = bswap32(*a1);
  *a4 = v6;
  *a5 = v7;
  uint64_t result = 0;
  if (a6) {
    *a6 = (char *)v7 + v6;
  }
  return result;
}

uint64_t GetFairPlayHWInfo(_DWORD *a1)
{
  return GetFairPlayHWInfoEx(a1, 0, 0);
}

uint64_t GetFairPlayHWInfoEx(_DWORD *a1, char *a2, size_t a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  CFStringRef v6 = (const __CFString *)MGCopyAnswer();
  if (!v6) {
    return 4294960569;
  }
  CFStringRef v7 = v6;
  CFTypeID v8 = CFGetTypeID(v6);
  if (v8 == CFStringGetTypeID())
  {
    if (CFStringGetCString(v7, buffer, 64, 0x600u))
    {
      LODWORD(v9) = a1 + 4;
      if (buffer[0])
      {
        uint64_t v10 = buffer;
        unint64_t v9 = (unint64_t)(a1 + 1);
        while (v10[1])
        {
          if (v9 >= (unint64_t)(a1 + 6))
          {
            uint64_t v12 = 4294960553;
            goto LABEL_13;
          }
          if (sscanf(v10, "%2hhx", v9) != 1)
          {
            uint64_t v12 = 4294960554;
            goto LABEL_13;
          }
          ++v9;
          int v11 = v10[2];
          v10 += 2;
          if (!v11) {
            break;
          }
        }
      }
      *a1 = v9 - (a1 + 4);
      if (a2) {
        strlcpy(a2, buffer, a3);
      }
      uint64_t v12 = 0;
    }
    else
    {
      uint64_t v12 = 4294960596;
    }
  }
  else
  {
    uint64_t v12 = 4294960540;
  }
LABEL_13:
  CFRelease(v7);
  return v12;
}

void sub_18E3BBF74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18E3BBFDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18E3BC094(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18E3BC184(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18E3BC26C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18E3BC32C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18E3BC3EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18E3BC604(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18E3BC860(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18E3BCB80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18E3BCC84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18E3BCDD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CUAddSuffixForCurrentDeviceClass(void *a1)
{
  id v1 = a1;
  if (GestaltGetDeviceClass_sOnce != -1) {
    dispatch_once(&GestaltGetDeviceClass_sOnce, &__block_literal_global_13498);
  }
  uint64_t v2 = CUAddSuffixForDeviceClass(v1, GestaltGetDeviceClass_deviceClass);

  return v2;
}

void sub_18E3BCE64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CUAddSuffixForDeviceClass(void *a1, int a2)
{
  id v3 = a1;
  uint64_t v4 = v3;
  int v5 = @"_APPLETV";
  switch(a2)
  {
    case 1:
    case 5:
      goto LABEL_5;
    case 2:
      int v5 = @"_IPOD";
      break;
    case 3:
      int v5 = @"_IPAD";
      break;
    case 4:
      break;
    case 6:
      int v5 = @"_WATCH";
      break;
    case 7:
      int v5 = @"_HOMEPOD";
      break;
    default:
      if (a2 == 100) {
        int v5 = @"_MAC";
      }
      else {
LABEL_5:
      }
        int v5 = @"_IPHONE";
      break;
  }
  CFStringRef v6 = [v3 stringByAppendingString:v5];

  return v6;
}

void sub_18E3BCF44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CoreUtilsNSSubrangeData *CFDataCreateSubdataWithRangeNoCopy(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  int v5 = -[CoreUtilsNSSubrangeData initWithData:range:]([CoreUtilsNSSubrangeData alloc], "initWithData:range:", a1, a2, a3);
  CFStringRef v6 = v5;
  if (!v5)
  {
    int v8 = -6728;
    if (!a4) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  CFStringRef v7 = v5;
  int v8 = 0;
  if (a4) {
LABEL_3:
  }
    *a4 = v8;
LABEL_4:

  return v6;
}

void CUEncodeNSErrorDictionary(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a1;
  id v31 = a2;
  id v12 = a3;
  id v29 = a4;
  id v30 = a5;
  id v13 = a6;
  if (v11)
  {
    uint64_t v14 = *MEMORY[0x1E4F28760];
    uint64_t v15 = (const void *)*MEMORY[0x1E4F28A50];
    for (int i = 3; ; --i)
    {
      int v17 = NSNumber;
      uint64_t v18 = [v11 code];
      if (v18) {
        uint64_t v19 = v18;
      }
      else {
        uint64_t v19 = -6700;
      }
      size_t v20 = [v17 numberWithInteger:v19];
      [v31 setObject:v20 forKeyedSubscript:v12];

      unsigned int v21 = [v11 domain];
      CFTypeID v22 = v21;
      if (v21 && ([v21 isEqual:v14] & 1) == 0) {
        [v31 setObject:v22 forKeyedSubscript:v29];
      }
      CFDictionaryRef v23 = [v11 userInfo];
      CFTypeID TypeID = CFStringGetTypeID();
      unsigned int v25 = CFDictionaryGetTypedValue(v23, @"cuErrorMsg", TypeID, 0);
      if ([v25 length]) {
        [v31 setObject:v25 forKeyedSubscript:v30];
      }
      if (!i) {
        break;
      }
      CFTypeID v26 = CFErrorGetTypeID();
      uint64_t v27 = CFDictionaryGetTypedValue(v23, v15, v26, 0);

      if (!v27)
      {
        id v11 = 0;
        break;
      }
      id v28 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      [v31 setObject:v28 forKeyedSubscript:v13];

      id v31 = v28;
      id v11 = (id)v27;
    }
  }
}

void sub_18E3BD200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, id a12)
{
  _Unwind_Resume(a1);
}

id CUDecodeNSErrorDictionary(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  v62[1] = *(id *)MEMORY[0x1E4F143B8];
  CFDictionaryRef v9 = a1;
  id v10 = a2;
  id v47 = a3;
  id v46 = a4;
  id v11 = a5;
  int v51 = 0;
  CFDictionaryRef v41 = v9;
  key = v10;
  CFDictionaryGetInt64Ranged(v9, v10, 0xFFFFFFFF80000000, 0x7FFFFFFFLL, &v51);
  if (v51)
  {
    id v12 = 0;
  }
  else
  {
    long long v40 = v11;
    CFDictionaryRef v60 = 0;
    CFDictionaryRef v61 = 0;
    v62[0] = 0;
    CFDictionaryRef v59 = v9;
    CFDictionaryRef v13 = v59;
    if (v59)
    {
      CFTypeID TypeID = CFDictionaryGetTypeID();
      TypedCFStringRef Value = CFDictionaryGetTypedValue(v13, v40, TypeID, 0);
    }
    else
    {
      TypedCFStringRef Value = 0;
    }
    objc_storeStrong((id *)&v60, TypedValue);
    CFDictionaryRef v16 = v60;
    if (v60)
    {
      CFTypeID v17 = CFDictionaryGetTypeID();
      CFDictionaryRef v18 = CFDictionaryGetTypedValue(v16, v40, v17, 0);
    }
    else
    {
      CFDictionaryRef v18 = 0;
    }
    objc_storeStrong((id *)&v61, v18);
    CFDictionaryRef v19 = v61;
    if (v61)
    {
      CFTypeID v20 = CFDictionaryGetTypeID();
      CFDictionaryRef v21 = CFDictionaryGetTypedValue(v19, v40, v20, 0);
    }
    else
    {
      CFDictionaryRef v21 = 0;
    }
    objc_storeStrong(v62, v21);
    id v12 = 0;
    int v45 = (void *)*MEMORY[0x1E4F28760];
    uint64_t v42 = *MEMORY[0x1E4F28A50];
    for (uint64_t i = 24; i != -8; i -= 8)
    {
      CFDictionaryRef v23 = *(const __CFDictionary **)((char *)&v59 + i);
      CFDictionaryRef v24 = v23;
      if (v23)
      {
        int v50 = v12;
        CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v23, key);
        if (Value)
        {
          int v52 = 0;
          int v26 = CFGetInt64(Value, &v52);
        }
        else
        {
          int v26 = 0;
        }
        CFTypeID v27 = CFStringGetTypeID();
        id v28 = CFDictionaryGetTypedValue(v24, v47, v27, 0);
        CFTypeID v29 = CFStringGetTypeID();
        id v30 = CFDictionaryGetTypedValue(v24, v46, v29, 0);
        id v31 = objc_alloc(MEMORY[0x1E4F28C58]);
        if (v28) {
          char v32 = v28;
        }
        else {
          char v32 = v45;
        }
        if (v12)
        {
          if ([v30 length])
          {
            v57[0] = v42;
            v57[1] = @"cuErrorMsg";
            v58[0] = v12;
            v58[1] = v30;
            socklen_t v49 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v58 forKeys:v57 count:2];
            int v33 = 0;
            int v34 = 0;
            int v35 = 1;
            uint64_t v36 = v49;
          }
          else
          {
            uint64_t v55 = v42;
            long long v56 = v12;
            int v33 = 1;
            [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v56 forKeys:&v55 count:1];
            int v35 = 0;
            v43 = int v34 = 0;
            uint64_t v36 = v43;
          }
        }
        else if ([v30 length])
        {
          long long v53 = @"cuErrorMsg";
          long long v54 = v30;
          int v34 = 1;
          long long v44 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v54 forKeys:&v53 count:1];
          int v35 = 0;
          int v33 = 0;
          uint64_t v36 = v44;
        }
        else
        {
          int v35 = 0;
          int v33 = 0;
          int v34 = 0;
          uint64_t v36 = 0;
        }
        uint64_t v37 = objc_msgSend(v31, "initWithDomain:code:userInfo:", v32, v26, v36, v40);

        if (v34) {
        if (v33)
        }

        if (v35) {
        id v12 = (void *)v37;
        }
      }
    }
    for (uint64_t j = 24; j != -8; j -= 8)

    id v11 = (id)v40;
  }

  return v12;
}

void sub_18E3BD68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

id CULocalizedStringEx(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (CUIsGreenTeaDevice_sOnce != -1) {
    dispatch_once(&CUIsGreenTeaDevice_sOnce, &__block_literal_global_82);
  }
  if (!CUIsGreenTeaDevice_sResult) {
    goto LABEL_6;
  }
  int v8 = [v7 stringByAppendingString:@"_GT"];
  CFDictionaryRef v9 = [v5 localizedStringForKey:v8 value:@"_GT" table:v6];

  if ([v9 isEqual:@"_GT"])
  {

LABEL_6:
    id v10 = 0;
    goto LABEL_8;
  }
  id v10 = v9;
LABEL_8:
  if (![v10 length])
  {
    uint64_t v11 = [v5 localizedStringForKey:v7 value:&stru_1EDD2ACE8 table:v6];

    id v10 = (void *)v11;
  }
  if (v10) {
    id v12 = v10;
  }
  else {
    id v12 = v7;
  }
  id v13 = v12;

  return v13;
}

void sub_18E3BD8AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CUNormalizeEmailAddress(void *a1, int a2)
{
  id v3 = [a1 lowercaseString];
  uint64_t v4 = v3;
  if (a2
    && (([v3 hasSuffix:@"@me.com"] & 1) != 0
     || [v4 hasSuffix:@"@mac.com"]))
  {
    id v5 = [v4 componentsSeparatedByString:@"@"];
    if ([v5 count])
    {
      id v6 = NSString;
      id v7 = [v5 objectAtIndexedSubscript:0];
      id v8 = [v6 stringWithFormat:@"%@@icloud.com", v7];
    }
    else
    {
      id v8 = v4;
    }
  }
  else
  {
    id v8 = v4;
  }

  return v8;
}

void sub_18E3BD9C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CUNormalizePhoneNumber(void *a1)
{
  id v1 = a1;
  uint64_t v2 = (void *)softLinkCPPhoneNumberCopyActiveCountryCode[0]();
  id v3 = (void *)((uint64_t (*)(uint64_t, uint64_t))softLinkPNCopyBestGuessNormalizedNumberForCountry[0])((uint64_t)v1, (uint64_t)v2);
  if (!v3) {
    goto LABEL_9;
  }
  uint64_t v4 = [NSString stringWithUTF8String:v3];
  id v5 = (void *)((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkCFPhoneNumberCreate[0])(0, v4, (uint64_t)v2);
  free(v3);
  if (!v5) {
    goto LABEL_5;
  }
  id v6 = (void *)((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkCFPhoneNumberCreateString[0])(0, (uint64_t)v5, 2);
  CFRelease(v5);
  if (v6)
  {
    id v7 = [MEMORY[0x1E4F28B88] characterSetWithCharactersInString:@"+"];
    id v5 = [v6 stringByTrimmingCharactersInSet:v7];
  }
  else
  {
LABEL_9:
    id v5 = 0;
  }
LABEL_5:
  if (v5) {
    id v8 = v5;
  }
  else {
    id v8 = v1;
  }
  id v9 = v8;

  return v9;
}

void sub_18E3BDB24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t initCFPhoneNumberCreateString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (CorePhoneNumbersLibrary_sOnce != -1) {
    dispatch_once(&CorePhoneNumbersLibrary_sOnce, &__block_literal_global_260);
  }
  id v6 = (uint64_t (*)())dlsym((void *)CorePhoneNumbersLibrary_sLib, "CFPhoneNumberCreateString");
  softLinkCFPhoneNumberCreateString[0] = v6;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(a1, a2, a3);
}

void *__CorePhoneNumbersLibrary_block_invoke()
{
  uint64_t result = dlopen("/System/Library/PrivateFrameworks/CorePhoneNumbers.framework/CorePhoneNumbers", 2);
  CorePhoneNumbersLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t initCFPhoneNumberCreate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (CorePhoneNumbersLibrary_sOnce != -1) {
    dispatch_once(&CorePhoneNumbersLibrary_sOnce, &__block_literal_global_260);
  }
  id v6 = (uint64_t (*)())dlsym((void *)CorePhoneNumbersLibrary_sLib, "CFPhoneNumberCreate");
  softLinkCFPhoneNumberCreate[0] = v6;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(a1, a2, a3);
}

uint64_t initPNCopyBestGuessNormalizedNumberForCountry(uint64_t a1, uint64_t a2)
{
  if (CorePhoneNumbersLibrary_sOnce != -1) {
    dispatch_once(&CorePhoneNumbersLibrary_sOnce, &__block_literal_global_260);
  }
  uint64_t v4 = (uint64_t (*)())dlsym((void *)CorePhoneNumbersLibrary_sLib, "PNCopyBestGuessNormalizedNumberForCountry");
  softLinkPNCopyBestGuessNormalizedNumberForCountry[0] = v4;
  return ((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2);
}

uint64_t initCPPhoneNumberCopyActiveCountryCode()
{
  if (AppSupportLibrary_sOnce != -1) {
    dispatch_once(&AppSupportLibrary_sOnce, &__block_literal_global_256_10929);
  }
  os_log_t v0 = (uint64_t (*)())dlsym((void *)AppSupportLibrary_sLib, "CPPhoneNumberCopyActiveCountryCode");
  softLinkCPPhoneNumberCopyActiveCountryCode[0] = v0;
  return v0();
}

void *__AppSupportLibrary_block_invoke()
{
  uint64_t result = dlopen("/System/Library/PrivateFrameworks/AppSupport.framework/AppSupport", 2);
  AppSupportLibrary_sLib = (uint64_t)result;
  return result;
}

id CURandomString()
{
  v7[1] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = MEMORY[0x1F4188790]();
  uint64_t v2 = (char *)v7 - ((v1 + 16) & 0xFFFFFFFFFFFFFFF0);
  char *v2 = 0;
  RandomString(v0, v3, v4, v1, v2);
  id v5 = (void *)[[NSString alloc] initWithUTF8String:v2];
  return v5;
}

CFMutableStringRef CUStateDumpWithObject(uint64_t a1, void *a2, int *a3)
{
  id v11 = a2;
  if (a3 && *a3 <= 50 && (*a3 != -1 || _LogCategory_Initialize((uint64_t)a3, 0x32u))) {
    LogPrintF((uint64_t)a3, (uint64_t)"struct os_state_data_s *CUStateDumpWithObject(const char *, __strong id, LogCategory *)", 0x32u, (uint64_t)"State dump: %s\n", v7, v8, v9, v10, a1);
  }
  CFMutableStringRef v52 = 0;
  NSAppendPrintF(&v52, (uint64_t)"\n", v5, v6, v7, v8, v9, v10, v47);
  id v12 = v52;
  uint64_t v13 = CUDescriptionWithLevel(v11, 0);
  CFTypeID v20 = (void *)v13;
  if (v13)
  {
    CFMutableStringRef v51 = v12;
    NSAppendPrintF(&v51, (uint64_t)"%@\n", v14, v15, v16, v17, v18, v19, v13);
    CFMutableStringRef v21 = v51;

    if (!v21) {
      goto LABEL_21;
    }
  }
  else
  {
    CFMutableStringRef v21 = v12;
    if (!v12) {
      goto LABEL_21;
    }
  }
  unint64_t v28 = [(__CFString *)v21 length];
  if (v28 >= 0x7C19)
  {
    if (a3 && *a3 <= 90 && (*a3 != -1 || _LogCategory_Initialize((uint64_t)a3, 0x5Au))) {
      LogPrintF((uint64_t)a3, (uint64_t)"struct os_state_data_s *CUStateDumpWithObject(const char *, __strong id, LogCategory *)", 0x5Au, (uint64_t)"### Statedump truncate: %s, %zu -> %zu\n", v24, v25, v26, v27, a1);
    }
    v53.size_t length = v28 - 31768;
    v53.location = 31768;
    CFStringDelete(v21, v53);
    CFMutableStringRef v50 = v21;
    NSAppendPrintF(&v50, (uint64_t)"\n...\n", v29, v30, v31, v32, v33, v34, v48);
    int v35 = v50;

    CFMutableStringRef v21 = v35;
  }
  CFMutableStringRef v49 = v21;
  NSAppendPrintF(&v49, (uint64_t)"%s State End\n", v22, v23, v24, v25, v26, v27, a1);
  uint64_t v36 = v49;

  uint64_t v37 = [MEMORY[0x1E4F28F98] dataWithPropertyList:v36 format:100 options:0 error:0];
  long long v38 = v37;
  if (v37)
  {
    size_t v39 = [v37 length];
    long long v40 = (__CFString *)malloc_type_calloc(1uLL, v39 + 200, 0x9BA45303uLL);
    CFMutableStringRef v21 = v40;
    if (v40)
    {
      LODWORD(v40->isa) = 1;
      HIDWORD(v40->isa) = v39;
      SNPrintF((uint64_t)&v40[4].info, 64, (uint64_t)"%s State", v41, v42, v43, v44, v45, a1);
      memcpy(&v21[6].info, (const void *)[v38 bytes], v39);
    }
  }
  else
  {
    CFMutableStringRef v21 = 0;
  }

LABEL_21:
  return v21;
}

void sub_18E3BE0F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CUTXTDataCreateWithDictionary(void *a1, uint64_t a2, void *a3)
{
  id v4 = a1;
  id v5 = objc_alloc_init(MEMORY[0x1E4F1CA58]);
  uint64_t v10 = 0;
  id v11 = &v10;
  uint64_t v12 = 0x3032000000;
  uint64_t v13 = __Block_byref_object_copy__10944;
  uint64_t v14 = __Block_byref_object_dispose__10945;
  id v15 = 0;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __CUTXTDataCreateWithDictionary_block_invoke;
  _DWORD v9[3] = &unk_1E55BF4E8;
  void v9[4] = v5;
  v9[5] = &v10;
  [v4 enumerateKeysAndObjectsUsingBlock:v9];
  uint64_t v6 = (void *)v11[5];
  if (a3 && v6)
  {
    *a3 = v6;
    uint64_t v6 = (void *)v11[5];
  }
  if (v6) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = [v5 copy];
  }
  _Block_object_dispose(&v10, 8);

  return v7;
}

void sub_18E3BE270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__10944(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__10945(uint64_t a1)
{
}

void __CUTXTDataCreateWithDictionary_block_invoke(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = *(void **)(a1 + 32);
  uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v13 = *(void **)(v10 + 40);
  id v11 = (id *)(v10 + 40);
  id v12 = v13;
  id v14 = v7;
  id v15 = v8;
  id v16 = v9;
  unsigned __int8 v59 = 0;
  [v16 appendBytes:&v59 length:1];
  uint64_t v23 = [v16 length];
  if (!v23)
  {
    long long v57 = NSErrorWithOSStatusF(4294960568, (uint64_t)"Append TXT item header failed", v17, v18, v19, v20, v21, v22, v58);
LABEL_19:
    id v12 = v57;
    goto LABEL_12;
  }
  uint64_t v24 = (const char *)[v14 UTF8String];
  size_t v25 = strlen(v24);
  char v32 = v25;
  if (v25 > (v59 ^ 0xFFuLL))
  {
    long long v57 = NSErrorWithOSStatusF(4294960553, (uint64_t)"Append TXT key exceeds max len: (%d - %u) < %zu", v26, v27, v28, v29, v30, v31, 255);
    goto LABEL_19;
  }
  [v16 appendBytes:v24 length:v25];
  v59 += v32;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    if (v59 == 255)
    {
      long long v57 = NSErrorWithOSStatusF(4294960553, (uint64_t)"Append TXT value '=' exceeds max len: (%d - %u) < 1", v33, v34, v35, v36, v37, v38, 255);
    }
    else
    {
      [v16 appendBytes:"=" length:1];
      ++v59;
      size_t v39 = (const char *)[v15 UTF8String];
      size_t v40 = strlen(v39);
      char v47 = v40;
      if (v40 <= (v59 ^ 0xFFuLL))
      {
        [v16 appendBytes:v39 length:v40];
        unsigned __int8 v48 = v59 + v47;
        unsigned __int8 v59 = v48;
LABEL_10:
        *(unsigned char *)([v16 mutableBytes] + v23 - 1) = v48;
        goto LABEL_12;
      }
      long long v57 = NSErrorWithOSStatusF(4294960553, (uint64_t)"Append TXT value exceeds max len: (%d - %u) < %zu", v41, v42, v43, v44, v45, v46, 255);
    }
    goto LABEL_19;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && [v15 BOOLValue])
  {
    unsigned __int8 v48 = v59;
    goto LABEL_10;
  }
  CFMutableStringRef v49 = (objc_class *)objc_opt_class();
  CFMutableStringRef v50 = NSStringFromClass(v49);
  NSErrorWithOSStatusF(4294960540, (uint64_t)"Append TXT value with unsupported type (%@)", v51, v52, v53, v54, v55, v56, (uint64_t)v50);
  id v12 = (id)objc_claimAutoreleasedReturnValue();

LABEL_12:
  objc_storeStrong(v11, v12);
  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)) {
    *a4 = 1;
  }
}

void sub_18E3BE570(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CUTXTDictionaryCreateWithTXTData(void *a1, uint64_t a2, void *a3)
{
  id v4 = a1;
  id v5 = (unsigned char *)[v4 bytes];
  uint64_t v6 = [v4 length];
  id v13 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  if (v6)
  {
    id v14 = &v5[v6];
    uint64_t v15 = MEMORY[0x1E4F1CC38];
    while (1)
    {
      uint64_t v17 = v5 + 1;
      uint64_t v16 = *v5;
      if (v14 - (v5 + 1) < v16) {
        break;
      }
      uint64_t v18 = (uint64_t)&v5[v16 + 1];
      if (*v5)
      {
        ++v5;
        while (1)
        {
          int v19 = *v5;
          BOOL v20 = v19 != 61;
          if (v19 == 61) {
            break;
          }
          ++v5;
          if (!--v16)
          {
            BOOL v20 = 1;
            id v5 = (unsigned char *)v18;
            break;
          }
        }
      }
      else
      {
        BOOL v20 = 1;
        ++v5;
      }
      uint64_t v27 = (void *)[[NSString alloc] initWithBytes:v17 length:v5 - v17 encoding:4];
      if (!v27)
      {
        if (a3)
        {
          uint64_t v37 = NSErrorWithOSStatusF(4294960554, (uint64_t)"Invalid UTF-8 TXT key", v21, v22, v23, v24, v25, v26, v38);
          uint64_t v27 = 0;
          goto LABEL_24;
        }
        uint64_t v27 = 0;
LABEL_26:

        goto LABEL_27;
      }
      if (v20)
      {
        [v13 setObject:v15 forKeyedSubscript:v27];
      }
      else
      {
        uint64_t v34 = (void *)[[NSString alloc] initWithBytes:v5 + 1 length:v18 - (void)(v5 + 1) encoding:4];
        if (!v34)
        {
          if (a3)
          {
            uint64_t v37 = NSErrorWithOSStatusF(4294960554, (uint64_t)"Invalid UTF-8 TXT value", v28, v29, v30, v31, v32, v33, v38);
LABEL_24:
            *a3 = v37;
          }
          goto LABEL_26;
        }
        [v13 setObject:v34 forKeyedSubscript:v27];

        id v5 = (unsigned char *)v18;
      }

      if (v5 == v14) {
        goto LABEL_16;
      }
    }
    if (a3)
    {
      NSErrorWithOSStatusF(4294960546, (uint64_t)"TXT item truncated", v7, v8, v9, v10, v11, v12, v38);
      uint64_t v35 = 0;
      *a3 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_17;
    }
LABEL_27:
    uint64_t v35 = 0;
  }
  else
  {
LABEL_16:
    uint64_t v35 = [v13 copy];
  }
LABEL_17:

  return v35;
}

void sub_18E3BE7A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id NSArrayGetNSUUIDAtIndex(void *a1, uint64_t a2, int *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  uint64_t v6 = v5;
  if (v5)
  {
    id v7 = [v5 objectAtIndexedSubscript:a2];
    if (v7)
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v7 = v7;
        int v8 = 0;
        uint64_t v9 = v7;
      }
      else
      {
        CFTypeID v10 = CFGetTypeID(v7);
        if (v10 == CFUUIDGetTypeID())
        {
          CFUUIDBytes v12 = CFUUIDGetUUIDBytes((CFUUIDRef)v7);
          uint64_t v9 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDBytes:&v12];
          int v8 = 0;
        }
        else
        {
          uint64_t v9 = 0;
          int v8 = -6756;
        }
      }
    }
    else
    {
      uint64_t v9 = 0;
      int v8 = -6727;
    }
  }
  else
  {
    id v7 = 0;
    uint64_t v9 = 0;
    int v8 = -6705;
  }
  if (a3) {
    *a3 = v8;
  }

  return v9;
}

void sub_18E3BE958(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id NSArrayGetValueAtIndexOfClass(void *a1, uint64_t a2, uint64_t a3, int *a4)
{
  id v6 = a1;
  id v7 = v6;
  if (v6)
  {
    id v8 = [v6 objectAtIndexedSubscript:a2];
    if (v8)
    {
      if (objc_opt_isKindOfClass())
      {
        id v8 = v8;
        int v9 = 0;
        CFTypeID v10 = v8;
      }
      else
      {
        CFTypeID v10 = 0;
        int v9 = -6756;
      }
    }
    else
    {
      CFTypeID v10 = 0;
      int v9 = -6727;
    }
  }
  else
  {
    id v8 = 0;
    CFTypeID v10 = 0;
    int v9 = -6705;
  }
  if (a4) {
    *a4 = v9;
  }

  return v10;
}

void sub_18E3BEA54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t NSArrayValidateClasses(void *a1, int a2, void *a3, void *a4)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v25 = a3;
  id v8 = a4;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  id v9 = v7;
  uint64_t v10 = [v9 countByEnumeratingWithState:&v30 objects:v35 count:16];
  if (v10)
  {
    int v24 = a2;
    uint64_t v11 = *(void *)v31;
    while (1)
    {
      uint64_t v12 = 0;
LABEL_4:
      if (*(void *)v31 != v11) {
        objc_enumerationMutation(v9);
      }
      long long v26 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      id v13 = v8;
      uint64_t v14 = [v13 countByEnumeratingWithState:&v26 objects:v34 count:16];
      if (!v14) {
        break;
      }
      uint64_t v15 = *(void *)v27;
LABEL_8:
      uint64_t v16 = 0;
      while (1)
      {
        if (*(void *)v27 != v15) {
          objc_enumerationMutation(v13);
        }
        if (objc_opt_isKindOfClass()) {
          break;
        }
        if (v14 == ++v16)
        {
          uint64_t v14 = [v13 countByEnumeratingWithState:&v26 objects:v34 count:16];
          if (v14) {
            goto LABEL_8;
          }
          goto LABEL_18;
        }
      }

      if (++v12 != v10) {
        goto LABEL_4;
      }
      uint64_t v10 = [v9 countByEnumeratingWithState:&v30 objects:v35 count:16];
      uint64_t v17 = 1;
      if (!v10) {
        goto LABEL_22;
      }
    }
LABEL_18:

    if (v24)
    {
      uint64_t v18 = (void *)MEMORY[0x1E4F1CA00];
      int v19 = (objc_class *)objc_opt_class();
      BOOL v20 = NSStringFromClass(v19);
      uint64_t v21 = [v13 allObjects];
      uint64_t v22 = [v21 componentsJoinedByString:@", "];
      [v18 raise:*MEMORY[0x1E4F1C3C8], @"'%@' array contained unexpected type %@, allowed types: %@", v25, v20, v22 format];
    }
    uint64_t v17 = 0;
  }
  else
  {
    uint64_t v17 = 1;
  }
LABEL_22:

  return v17;
}

void sub_18E3BECC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

id NSDataCompress(void *a1, char a2, void *a3)
{
  id v5 = a1;
  uint64_t v6 = [v5 length];
  uInt v7 = v6;
  if (v6)
  {
    id v8 = (void *)[objc_alloc(MEMORY[0x1E4F1CA58]) initWithLength:0x4000];
    memset(&v27.avail_in, 0, 104);
    v27.avail_in = v7;
    v27.avail_out = v7;
    v27.next_in = (Bytef *)[v5 bytes];
    id v9 = v8;
    v27.next_out = (Bytef *)[v9 mutableBytes];
    if ((a2 & 2) != 0) {
      int v10 = 9;
    }
    else {
      int v10 = -1;
    }
    if (a2) {
      int v11 = 15;
    }
    else {
      int v11 = 31;
    }
    uint64_t v12 = deflateInit2_(&v27, v10, 8, v11, 8, 0, "1.2.12", 112);
    if (v12)
    {
      long long v26 = NSErrorWithOSStatusF(v12, (uint64_t)"deflateInit2 failed", v13, v14, v15, v16, v17, v18, (uint64_t)v27.next_in);
      id v24 = v26;
      id v23 = 0;
      if (a3 && v26)
      {
        id v24 = v26;
        id v23 = 0;
        *a3 = v24;
      }
    }
    else
    {
      do
      {
        uLong total_out = v27.total_out;
        if (total_out >= objc_msgSend(v9, "length", v27.next_in, *(_OWORD *)&v27.avail_in, *(_OWORD *)&v27.next_out)) {
          [v9 increaseLengthBy:0x4000];
        }
        id v20 = v9;
        uint64_t v21 = [v20 mutableBytes];
        v27.next_out = (Bytef *)(v21 + v27.total_out);
        int v22 = [v20 length];
        v27.avail_out = v22 - LODWORD(v27.total_out);
        deflate(&v27, 4);
      }
      while (!v27.avail_out);
      deflateEnd(&v27);
      [v20 setLength:v27.total_out];
      id v23 = (id)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithData:v20];
      id v24 = 0;
      id v9 = v20;
    }
  }
  else
  {
    id v9 = 0;
    id v23 = objc_alloc_init(MEMORY[0x1E4F1C9B8]);
    id v24 = 0;
  }

  return v23;
}

void sub_18E3BEF4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id NSDataDecompress(void *a1, uint64_t a2, void *a3)
{
  id v4 = a1;
  unint64_t v5 = [v4 length];
  if (v5)
  {
    if (v5 >= 0x8000) {
      uint64_t v6 = 0x4000;
    }
    else {
      uint64_t v6 = v5 >> 1;
    }
    uInt v7 = (void *)[objc_alloc(MEMORY[0x1E4F1CA58]) initWithLength:v5];
    memset(&v25.avail_in, 0, 104);
    id v8 = v4;
    v25.next_in = (Bytef *)[v8 bytes];
    v25.avail_in = [v8 length];
    uint64_t v9 = inflateInit2_(&v25, 47, "1.2.12", 112);
    if (v9)
    {
      id v20 = "inflateInit2 failed";
    }
    else
    {
      while (1)
      {
        uLong total_out = v25.total_out;
        if (total_out >= [v7 length]) {
          [v7 increaseLengthBy:v6];
        }
        id v17 = v7;
        uint64_t v18 = [v17 mutableBytes];
        v25.next_out = (Bytef *)(v18 + v25.total_out);
        int v19 = [v17 length];
        v25.avail_out = v19 - LODWORD(v25.total_out);
        uint64_t v9 = inflate(&v25, 2);
        if (v9 == 1) {
          break;
        }
        if (v9)
        {
          id v20 = "inflate failed";
          goto LABEL_19;
        }
      }
      uint64_t v9 = inflateEnd(&v25);
      if (!v9)
      {
        [v17 setLength:v25.total_out];
        id v21 = (id)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithData:v17];
        id v22 = 0;
        goto LABEL_14;
      }
      id v20 = "inflateEnd failed";
    }
LABEL_19:
    id v24 = NSErrorWithOSStatusF(v9, (uint64_t)v20, v10, v11, v12, v13, v14, v15, (uint64_t)v25.next_in);
    id v22 = v24;
    id v21 = 0;
    if (a3 && v24)
    {
      id v22 = v24;
      id v21 = 0;
      *a3 = v22;
    }
    id v17 = v7;
  }
  else
  {
    id v17 = 0;
    id v21 = objc_alloc_init(MEMORY[0x1E4F1C9B8]);
    id v22 = 0;
  }
LABEL_14:

  return v21;
}

void sub_18E3BF188(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id NSDataWithHex(char *a1, int64_t a2, char a3, char **a4, int *a5)
{
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  int v6 = HexToDataCopy(a1, a2, a3, &v12, &v11, a4);
  if (v6)
  {
    int v9 = v6;
    uInt v7 = v12;
  }
  else
  {
    uInt v7 = v12;
    id v8 = [MEMORY[0x1E4F1C9B8] dataWithBytesNoCopy:v12 length:v11];
    if (v8)
    {
      int v9 = 0;
      if (!a5) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
    int v9 = -6728;
  }
  if (v7) {
    free(v7);
  }
  id v8 = 0;
  if (a5) {
LABEL_4:
  }
    *a5 = v9;
LABEL_5:
  return v8;
}

void __NSDecodeNSDictionaryOfClassesIfPresent_block_invoke(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  id v8 = a2;
  id v7 = a3;
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8], @"bad key element type for key %@ : %@", *(void *)(a1 + 32), v8 format];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    *a4 = 1;
  }
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8], @"bad value element type for key %@ : %@ -> %@", *(void *)(a1 + 32), v8, v7 format];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    *a4 = 1;
  }
}

void sub_18E3BF354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void NSDecodeNSSetOfClassIfPresent(void *a1, void *a2, uint64_t a3, void **a4)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v6 = a1;
  id v7 = a2;
  z_stream v25 = v6;
  if ([v6 containsValueForKey:v7])
  {
    uint64_t v8 = objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", objc_opt_class(), a3, 0);
    int v9 = [v25 decodeObjectOfClasses:v8 forKey:v7];
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
    id v23 = (void *)v8;
    unint64_t v11 = (uint64_t *)MEMORY[0x1E4F1C3C8];
    if ((isKindOfClass & 1) == 0)
    {
      uint64_t v12 = (void *)MEMORY[0x1E4F1CA00];
      uint64_t v13 = (objc_class *)objc_opt_class();
      uint64_t v14 = NSStringFromClass(v13);
      [v12 raise:*v11, @"bad set type for key %@, %@", v7, v14 format];
    }
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    id v15 = v9;
    uint64_t v16 = [v15 countByEnumeratingWithState:&v26 objects:v30 count:16];
    if (v16)
    {
      uint64_t v17 = *(void *)v27;
      uint64_t v18 = *v11;
      do
      {
        for (uint64_t i = 0; i != v16; ++i)
        {
          if (*(void *)v27 != v17) {
            objc_enumerationMutation(v15);
          }
          uint64_t v20 = *(void *)(*((void *)&v26 + 1) + 8 * i);
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            [MEMORY[0x1E4F1CA00] raise:v18, @"bad set element type for key %@ : %@", v7, v20 format];
          }
        }
        uint64_t v16 = [v15 countByEnumeratingWithState:&v26 objects:v30 count:16];
      }
      while (v16);
    }

    id v21 = *a4;
    *a4 = v15;
    id v22 = v15;
  }
}

void sub_18E3BF5D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

id NSDictionaryGetNSArrayOfClass(void *a1, void *a2, uint64_t a3, int *a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v6 = a1;
  id v7 = a2;
  uint64_t v8 = [v6 objectForKeyedSubscript:v7];
  if (!v8)
  {
    id v13 = 0;
    int v14 = -6727;
    if (!a4) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
LABEL_14:
    id v13 = 0;
    int v14 = -6756;
    if (!a4) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v9 = v8;
  uint64_t v10 = [v9 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v10)
  {
    uint64_t v11 = *(void *)v17;
    while (2)
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v17 != v11) {
          objc_enumerationMutation(v9);
        }
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {

          goto LABEL_14;
        }
      }
      uint64_t v10 = [v9 countByEnumeratingWithState:&v16 objects:v20 count:16];
      if (v10) {
        continue;
      }
      break;
    }
  }

  id v13 = v9;
  int v14 = 0;
  if (a4) {
LABEL_15:
  }
    *a4 = v14;
LABEL_16:

  return v13;
}

void sub_18E3BF7D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id NSDictionaryGetNSUUID(void *a1, void *a2, int *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  if (v5)
  {
    id v7 = [v5 objectForKeyedSubscript:v6];
    if (v7)
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v7 = v7;
        int v8 = 0;
        id v9 = v7;
      }
      else
      {
        CFTypeID v10 = CFGetTypeID(v7);
        if (v10 == CFUUIDGetTypeID())
        {
          CFUUIDBytes v12 = CFUUIDGetUUIDBytes((CFUUIDRef)v7);
          id v9 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDBytes:&v12];
          int v8 = 0;
        }
        else
        {
          id v9 = 0;
          int v8 = -6756;
        }
      }
    }
    else
    {
      id v9 = 0;
      int v8 = -6727;
    }
  }
  else
  {
    id v7 = 0;
    id v9 = 0;
    int v8 = -6705;
  }
  if (a3) {
    *a3 = v8;
  }

  return v9;
}

void sub_18E3BF978(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id NSDictionaryGetValueOfClass(void *a1, void *a2, uint64_t a3, int *a4)
{
  id v6 = a1;
  id v7 = a2;
  if (v6)
  {
    id v8 = [v6 objectForKeyedSubscript:v7];
    if (v8)
    {
      if (objc_opt_isKindOfClass())
      {
        id v8 = v8;
        int v9 = 0;
        CFTypeID v10 = v8;
      }
      else
      {
        CFTypeID v10 = 0;
        int v9 = -6756;
      }
    }
    else
    {
      CFTypeID v10 = 0;
      int v9 = -6727;
    }
  }
  else
  {
    id v8 = 0;
    CFTypeID v10 = 0;
    int v9 = -6705;
  }
  if (a4) {
    *a4 = v9;
  }

  return v10;
}

void sub_18E3BFA84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t NSDictionaryValidateClasses(void *a1, int a2, void *a3, void *a4, void *a5)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  id v9 = a1;
  id v35 = a3;
  id v10 = a4;
  id v36 = a5;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  id v11 = v9;
  uint64_t v12 = [v11 countByEnumeratingWithState:&v45 objects:v51 count:16];
  if (!v12)
  {
    uint64_t v25 = 1;
    goto LABEL_35;
  }
  int v34 = a2;
  uint64_t v13 = *(void *)v46;
  while (2)
  {
    uint64_t v14 = 0;
    while (2)
    {
      if (*(void *)v46 != v13) {
        objc_enumerationMutation(v11);
      }
      uint64_t v15 = *(void *)(*((void *)&v45 + 1) + 8 * v14);
      long long v41 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      id v16 = v10;
      uint64_t v17 = [v16 countByEnumeratingWithState:&v41 objects:v50 count:16];
      if (!v17)
      {
LABEL_28:

        if (!v34)
        {
          uint64_t v20 = 0;
          goto LABEL_34;
        }
        long long v26 = (void *)MEMORY[0x1E4F1CA00];
        long long v27 = (objc_class *)objc_opt_class();
        long long v28 = NSStringFromClass(v27);
        long long v29 = [v16 allObjects];
        long long v30 = [v29 componentsJoinedByString:@", "];
        [v26 raise:*MEMORY[0x1E4F1C3C8], @"'%@' dictionary contained unexpected key type %@, allowed types: %@", v35, v28, v30 format];
        uint64_t v20 = 0;
LABEL_32:

LABEL_34:
        uint64_t v25 = 0;
        goto LABEL_35;
      }
      uint64_t v18 = *(void *)v42;
LABEL_8:
      uint64_t v19 = 0;
      while (1)
      {
        if (*(void *)v42 != v18) {
          objc_enumerationMutation(v16);
        }
        if (objc_opt_isKindOfClass()) {
          break;
        }
        if (v17 == ++v19)
        {
          uint64_t v17 = [v16 countByEnumeratingWithState:&v41 objects:v50 count:16];
          if (v17) {
            goto LABEL_8;
          }
          goto LABEL_28;
        }
      }

      uint64_t v20 = [v11 objectForKeyedSubscript:v15];
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      id v21 = v36;
      uint64_t v22 = [v21 countByEnumeratingWithState:&v37 objects:v49 count:16];
      if (!v22)
      {
LABEL_30:

        if (!v34) {
          goto LABEL_34;
        }
        uint64_t v31 = (void *)MEMORY[0x1E4F1CA00];
        long long v32 = (objc_class *)objc_opt_class();
        long long v28 = NSStringFromClass(v32);
        long long v29 = [v21 allObjects];
        long long v30 = [v29 componentsJoinedByString:@", "];
        [v31 raise:*MEMORY[0x1E4F1C3C8], @"'%@' dictionary contained unexpected value type %@, allowed types: %@", v35, v28, v30 format];
        goto LABEL_32;
      }
      uint64_t v23 = *(void *)v38;
LABEL_17:
      uint64_t v24 = 0;
      while (1)
      {
        if (*(void *)v38 != v23) {
          objc_enumerationMutation(v21);
        }
        if (objc_opt_isKindOfClass()) {
          break;
        }
        if (v22 == ++v24)
        {
          uint64_t v22 = [v21 countByEnumeratingWithState:&v37 objects:v49 count:16];
          if (v22) {
            goto LABEL_17;
          }
          goto LABEL_30;
        }
      }

      if (++v14 != v12) {
        continue;
      }
      break;
    }
    uint64_t v12 = [v11 countByEnumeratingWithState:&v45 objects:v51 count:16];
    uint64_t v25 = 1;
    if (v12) {
      continue;
    }
    break;
  }
LABEL_35:

  return v25;
}

void sub_18E3BFE48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

id NSErrorF(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v11 = a1;
  uint64_t v12 = v11;
  if (a2)
  {
    uint64_t v13 = NSErrorV(v11, a2, a3, (uint64_t)&a9);
  }
  else
  {
    uint64_t v13 = 0;
  }

  return v13;
}

void sub_18E3BFF8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id NSErrorF_safe(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v11 = a1;
  uint64_t v12 = v11;
  if (a2)
  {
    uint64_t v13 = NSErrorV(v11, a2, a3, (uint64_t)&a9);
  }
  else
  {
    uint64_t v13 = 0;
  }

  return v13;
}

void sub_18E3C0020(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id NSErrorV_safe(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v4 = NSErrorV(a1, a2, a3, a4);
  return v4;
}

id NSErrorNestedF(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v12 = a1;
  id v13 = a3;
  if (a2)
  {
    uint64_t v14 = NSErrorNestedV(v12, a2, v13, a4, (uint64_t)&a9);
  }
  else
  {
    uint64_t v14 = 0;
  }

  return v14;
}

void sub_18E3C00F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id NSErrorNestedV(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  v32[4] = *MEMORY[0x1E4F143B8];
  id v9 = a1;
  id v10 = a3;
  if (a2)
  {
    ErrorString = DebugGetErrorStringEx(v9, a2, 0, 0);
    NSPrintV(a4, a5);
    uint64_t v19 = (__CFString *)objc_claimAutoreleasedReturnValue();
    if (*ErrorString) {
      NSPrintF((uint64_t)"%s (%@)", v12, v13, v14, v15, v16, v17, v18, (uint64_t)ErrorString);
    }
    else {
    id v21 = NSPrintF((uint64_t)"%d (%@)", v12, v13, v14, v15, v16, v17, v18, a2);
    }
    id v22 = objc_alloc(MEMORY[0x1E4F28C58]);
    if (v9) {
      uint64_t v23 = v9;
    }
    else {
      uint64_t v23 = (__CFString *)*MEMORY[0x1E4F28760];
    }
    uint64_t v24 = &stru_1EDD2ACE8;
    if (v19) {
      uint64_t v24 = v19;
    }
    if (v10)
    {
      v31[0] = @"cuErrorDesc";
      v31[1] = @"cuErrorMsg";
      v32[0] = v21;
      v32[1] = v24;
      uint64_t v25 = *MEMORY[0x1E4F28A50];
      v31[2] = *MEMORY[0x1E4F28568];
      v31[3] = v25;
      v32[2] = v21;
      v32[3] = v10;
      uint64_t v26 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v32 forKeys:v31 count:4];
    }
    else
    {
      v29[0] = @"cuErrorDesc";
      v29[1] = @"cuErrorMsg";
      v30[0] = v21;
      v30[1] = v24;
      v29[2] = *MEMORY[0x1E4F28568];
      v30[2] = v21;
      uint64_t v26 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v30 forKeys:v29 count:3];
    }
    long long v27 = (void *)v26;
    uint64_t v20 = (void *)[v22 initWithDomain:v23 code:(int)a2 userInfo:v26];
  }
  else
  {
    uint64_t v20 = 0;
  }

  return v20;
}

void sub_18E3C0310(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id NSErrorNestedF_safe(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v12 = a1;
  id v13 = a3;
  if (a2)
  {
    uint64_t v14 = NSErrorNestedV(v12, a2, v13, a4, (uint64_t)&a9);
  }
  else
  {
    uint64_t v14 = 0;
  }

  return v14;
}

void sub_18E3C040C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id NSErrorNestedV_safe(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v5 = NSErrorNestedV(a1, a2, a3, a4, a5);
  return v5;
}

uint64_t NSPredicateMatches(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (v7) {
    uint64_t v8 = [v5 evaluateWithObject:v6 substitutionVariables:v7];
  }
  else {
    uint64_t v8 = [v5 evaluateWithObject:v6];
  }
  uint64_t v9 = v8;

  return v9;
}

id NSRandomData(size_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    id v22 = "Requested 0 random bytes";
LABEL_10:
    NSErrorWithOSStatusF(4294960553, (uint64_t)v22, a3, a4, a5, a6, a7, a8, v23);
    id v20 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_12;
  }
  id v10 = malloc_type_malloc(a1, 0x9E8F4FC0uLL);
  if (!v10)
  {
    uint64_t v23 = a1;
    id v22 = "malloc %zu bytes failed";
    goto LABEL_10;
  }
  id v11 = v10;
  RandomBytes(v10, a1);
  uint64_t v12 = [MEMORY[0x1E4F1C9B8] _newZeroingDataWithBytesNoCopy:v11 length:a1 deallocator:*MEMORY[0x1E4F28208]];
  if (v12)
  {
    uint64_t v19 = (void *)v12;
    id v20 = 0;
    goto LABEL_5;
  }
  NSErrorWithOSStatusF(4294960553, (uint64_t)"Alloc NSData %zu bytes failed", v13, v14, v15, v16, v17, v18, a1);
  id v20 = (id)objc_claimAutoreleasedReturnValue();
  free(v11);
LABEL_12:
  uint64_t v19 = 0;
  if (a2 && v20)
  {
    id v20 = v20;
    uint64_t v19 = 0;
    *a2 = v20;
  }
LABEL_5:

  return v19;
}

id NSStringWithMACAddress(uint64_t a1)
{
  uint64_t v1 = 0;
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = v9;
  do
  {
    if (v2 == v9)
    {
      unint64_t v3 = v9;
    }
    else
    {
      unsigned char *v2 = 58;
      unint64_t v3 = v2 + 1;
    }
    unint64_t v4 = *(unsigned __int8 *)(a1 + v1);
    uint64_t v5 = v1 + 1;
    *unint64_t v3 = a0123456789abcd_0[v4 >> 4];
    char v6 = a0123456789abcd_0[v4 & 0xF];
    uint64_t v2 = v3 + 2;
    v3[1] = v6;
    uint64_t v1 = v5;
  }
  while (v5 != 6);
  unsigned char *v2 = 0;
  id v7 = (void *)[[NSString alloc] initWithCString:v9 encoding:1];
  return v7;
}

uint64_t HIDButtonsCreateDescriptor(void *a1, void *a2)
{
  unint64_t v4 = malloc_type_malloc(0x28uLL, 0x5237CC68uLL);
  if (!v4) {
    return 4294960568;
  }
  uint64_t v5 = v4;
  uint64_t result = 0;
  *uint64_t v5 = HIDButtonsCreateDescriptor_kDescriptorTemplate;
  v5[1] = unk_18E417E17;
  *((void *)v5 + 4) = 0xC000810195087500;
  *a1 = v5;
  *a2 = 40;
  return result;
}

uint64_t HIDDPadCreateDescriptor(void *a1, void *a2)
{
  unint64_t v4 = (char *)malloc_type_malloc(0x27uLL, 0xAD6ECC2EuLL);
  if (!v4) {
    return 4294960568;
  }
  uint64_t v5 = v4;
  uint64_t result = 0;
  *(_OWORD *)uint64_t v5 = HIDDPadCreateDescriptor_kDescriptorTemplate;
  *((_OWORD *)v5 + 1) = unk_18E417E3F;
  *(void *)(v5 + 31) = 0xC001810195028107;
  *a1 = v5;
  *a2 = 39;
  return result;
}

unsigned char *HIDDPadFillReport(unsigned char *result, char a2, char a3, char a4, char a5, char a6, char a7, char a8, char a9)
{
  *uint64_t result = a7 | (2 * a9);
  result[1] = (8 * a3) | (4 * a2) | (16 * a4) | (32 * a5) | (2 * a6) | a8 | (a9 << 6);
  return result;
}

uint64_t HIDKnobCreateDescriptor(void *a1, void *a2)
{
  unint64_t v4 = (char *)malloc_type_malloc(0x46uLL, 0x687F54E7uLL);
  if (!v4) {
    return 4294960568;
  }
  uint64_t v5 = v4;
  uint64_t result = 0;
  *((_OWORD *)v5 + 2) = xmmword_18E417E76;
  *((_OWORD *)v5 + 3) = unk_18E417E86;
  *(void *)(v5 + 62) = 0xC00681019508757FLL;
  *(_OWORD *)uint64_t v5 = HIDKnobCreateDescriptor_kDescriptorTemplate;
  *((_OWORD *)v5 + 1) = unk_18E417E66;
  *a1 = v5;
  *a2 = 70;
  return result;
}

unsigned char *HIDKnobFillReport(unsigned char *result, char a2, char a3, char a4, char a5, char a6, char a7)
{
  *uint64_t result = a2 | (2 * a3) | (4 * a4);
  result[1] = a5;
  result[2] = a6;
  result[3] = a7;
  return result;
}

uint64_t HIDPointingCreateDescriptor(void *a1, void *a2)
{
  unint64_t v4 = malloc_type_malloc(0x3EuLL, 0xA7805EE9uLL);
  if (!v4) {
    return 4294960568;
  }
  uint64_t v5 = v4;
  uint64_t result = 0;
  *uint64_t v5 = HIDPointingCreateDescriptor_kDescriptorTemplate;
  v5[1] = unk_18E417EAC;
  void v5[2] = xmmword_18E417EBC;
  *(_OWORD *)((char *)v5 + 46) = *(long long *)((char *)&xmmword_18E417EBC + 14);
  *a1 = v5;
  *a2 = 62;
  return result;
}

double HIDPointingFillReport(uint64_t a1, char a2, double a3, double a4)
{
  int v4 = (int)(a3 * 32767.0 + 0.0);
  double result = a4 * 32767.0 + 0.0;
  *(unsigned char *)a1 = a2;
  *(_WORD *)(a1 + 1) = v4;
  *(_WORD *)(a1 + 3) = (int)result;
  return result;
}

uint64_t HIDSimpleFillReport(char *a1, int a2, int a3, int a4)
{
  uint64_t v4 = 4294960591;
  if (a2 == 12)
  {
    switch(a3)
    {
      case 176:
        goto LABEL_16;
      case 177:
        goto LABEL_14;
      case 178:
      case 179:
      case 180:
        return v4;
      case 181:
LABEL_7:
        char v5 = 5;
        goto LABEL_27;
      case 182:
LABEL_15:
        char v5 = 6;
        goto LABEL_27;
      default:
        if (a3 == 205)
        {
LABEL_17:
          char v5 = 4;
          goto LABEL_27;
        }
        if (a3 == 547) {
          goto LABEL_18;
        }
        break;
    }
  }
  else if (a2 == 11)
  {
    if (a3 <= 175)
    {
      switch(a3)
      {
        case ' ':
LABEL_18:
          char v5 = 1;
          break;
        case '!':
LABEL_16:
          char v5 = 2;
          break;
        case '&':
LABEL_14:
          char v5 = 3;
          break;
        default:
          return v4;
      }
LABEL_27:
      uint64_t v4 = 0;
      if (!a4) {
        char v5 = 0;
      }
      *a1 = v5;
    }
    else
    {
      switch(a3)
      {
        case 176:
          goto LABEL_17;
        case 177:
          goto LABEL_7;
        case 178:
          goto LABEL_15;
        case 179:
          char v5 = 7;
          goto LABEL_27;
        case 180:
          char v5 = 8;
          goto LABEL_27;
        case 181:
          char v5 = 9;
          goto LABEL_27;
        case 182:
          char v5 = 10;
          goto LABEL_27;
        case 183:
          char v5 = 11;
          goto LABEL_27;
        case 184:
          char v5 = 12;
          goto LABEL_27;
        case 185:
          char v5 = 13;
          goto LABEL_27;
        case 186:
          char v5 = 14;
          goto LABEL_27;
        case 187:
          char v5 = 15;
          goto LABEL_27;
        default:
          return v4;
      }
    }
  }
  return v4;
}

uint64_t HIDTelephonyCreateDescriptor(void *a1, void *a2)
{
  uint64_t v4 = (char *)malloc_type_malloc(0x33uLL, 0xB0491513uLL);
  if (!v4) {
    return 4294960568;
  }
  char v5 = v4;
  uint64_t result = 0;
  *(_DWORD *)(v5 + 47) = -1073708799;
  *(_OWORD *)char v5 = HIDTelephonyCreateDescriptor_kDescriptorTemplate;
  *((_OWORD *)v5 + 1) = unk_18E417EEA;
  *((_OWORD *)v5 + 2) = xmmword_18E417EFA;
  *a1 = v5;
  *a2 = 51;
  return result;
}

uint64_t HIDTrackpadCreateDescriptor(void *a1, void *a2)
{
  uint64_t v4 = malloc_type_malloc(0x8EuLL, 0x135490F4uLL);
  if (!v4) {
    return 4294960568;
  }
  char v5 = v4;
  uint64_t result = 0;
  void v5[6] = xmmword_18E417F6D;
  v5[7] = unk_18E417F7D;
  *(_OWORD *)((char *)v5 + 126) = unk_18E417F8B;
  void v5[2] = xmmword_18E417F2D;
  _OWORD v5[3] = unk_18E417F3D;
  void v5[4] = xmmword_18E417F4D;
  double v5[5] = unk_18E417F5D;
  *char v5 = HIDTrackpadCreateDescriptor_kDescriptorTemplate;
  v5[1] = unk_18E417F1D;
  *a1 = v5;
  *a2 = 142;
  return result;
}

void HIDTrackpadFillReport(uint64_t a1, size_t __n, void *__src, char a4, unsigned int a5, const void *a6, char a7, char a8, __int16 a9, __int16 a10)
{
  int v14 = __n;
  *(unsigned char *)a1 = a8;
  *(_WORD *)(a1 + 1) = a9;
  *(_WORD *)(a1 + 3) = a10;
  memcpy((void *)(a1 + 5), __src, __n);
  bzero((void *)(a1 + (v14 + 5)), 4 - v14);
  *(unsigned char *)(a1 + 9) = 1;
  *(unsigned char *)(a1 + 10) = v14;
  *(unsigned char *)(a1 + 11) = a4;
  memcpy((void *)(a1 + 12), a6, a5);
  bzero((void *)(a1 + a5 + 12), (int)(4 - a5));
  *(unsigned char *)(a1 + 16) = 1;
  *(unsigned char *)(a1 + 17) = a5;
  *(unsigned char *)(a1 + 18) = a7;
}

uint64_t HIDRegisterOverrideDescriptor(unsigned __int16 *a1, const UInt8 *a2, CFIndex a3)
{
  pthread_mutex_lock(&gHIDOverrideLock);
  if ((gHIDOverrides || (gHIDOverrides = (uint64_t)CFDictionaryCreateMutable(0, 0, 0, MEMORY[0x1E4F1D540])) != 0)
    && (v6 = *a1, v7 = a1[1], (CFDataRef v8 = CFDataCreate(0, a2, a3)) != 0))
  {
    CFDataRef v9 = v8;
    CFDictionarySetValue((CFMutableDictionaryRef)gHIDOverrides, (const void *)((v6 << 16) | v7), v8);
    CFRelease(v9);
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = 4294960568;
  }
  pthread_mutex_unlock(&gHIDOverrideLock);
  return v10;
}

uint64_t HIDDeregisterOverrideDescriptor(unsigned __int16 *a1)
{
  if (gHIDOverrides) {
    CFDictionaryRemoveValue((CFMutableDictionaryRef)gHIDOverrides, (const void *)((*a1 << 16) | (unint64_t)a1[1]));
  }
  pthread_mutex_unlock(&gHIDOverrideLock);
  return 0;
}

uint64_t HIDCopyOverrideDescriptor(unsigned __int16 *a1, void *a2, void *a3)
{
  unsigned int v10 = 0;
  size_t v9 = 0;
  pthread_mutex_lock(&gHIDOverrideLock);
  if (!gHIDOverrides)
  {
    unint64_t v7 = 0;
    goto LABEL_5;
  }
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)gHIDOverrides, (const void *)((*a1 << 16) | (unint64_t)a1[1]));
  if (!Value)
  {
    unint64_t v7 = 0;
    size_t v9 = 0;
LABEL_5:
    unsigned int v10 = -6727;
    goto LABEL_6;
  }
  unint64_t v7 = CFCopyData(Value, &v9, &v10);
LABEL_6:
  pthread_mutex_unlock(&gHIDOverrideLock);
  *a2 = v7;
  *a3 = v9;
  return v10;
}

uint64_t _HIDBrowserGetTypeID()
{
  uint64_t result = _CFRuntimeRegisterClass();
  gHIDBrowserCFTypeID TypeID = result;
  return result;
}

void _HIDBrowserFinalize(uint64_t a1)
{
  uint64_t v2 = *(pthread_mutex_t **)(a1 + 96);
  if (v2)
  {
    pthread_mutex_destroy(v2);
    *(void *)(a1 + 96) = 0;
  }
  unint64_t v3 = *(NSObject **)(a1 + 16);
  if (v3)
  {
    dispatch_release(v3);
    *(void *)(a1 + 16) = 0;
  }
}

uint64_t HIDBrowserCreate(uint64_t *a1)
{
  if (gHIDBrowserInitOnce != -1) {
    dispatch_once_f(&gHIDBrowserInitOnce, 0, (dispatch_function_t)_HIDBrowserGetTypeID);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance) {
    return 4294960568;
  }
  uint64_t v3 = Instance;
  *(void *)(Instance + 136) = 0;
  *(_OWORD *)(Instance + 120) = 0u;
  *(_OWORD *)(Instance + 104) = 0u;
  *(_OWORD *)(Instance + 88) = 0u;
  *(_OWORD *)(Instance + 72) = 0u;
  *(_OWORD *)(Instance + 56) = 0u;
  *(_OWORD *)(Instance + 40) = 0u;
  *(_OWORD *)(Instance + 24) = 0u;
  uint64_t v4 = MEMORY[0x1E4F14428];
  *(void *)(v3 + 16) = MEMORY[0x1E4F14428];
  dispatch_retain(v4);
  uint64_t v5 = pthread_mutex_init((pthread_mutex_t *)(v3 + 32), 0);
  if (v5)
  {
    CFRelease((CFTypeRef)v3);
  }
  else
  {
    *(void *)(v3 + 96) = v3 + 32;
    *(unsigned char *)(v3 + 104) = 1;
    *a1 = v3;
  }
  return v5;
}

void *HIDBrowserCopyProperty(uint64_t a1, CFTypeRef cf1, uint64_t a3, int *a4)
{
  if (!CFEqual(cf1, @"devices"))
  {
    if (!CFEqual(cf1, @"hidRaw"))
    {
      Copy = 0;
      int v10 = -6727;
      goto LABEL_11;
    }
    size_t v9 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
    if (!*(unsigned char *)(a1 + 104)) {
      size_t v9 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
    }
    Copy = (void *)*v9;
    CFRetain(*v9);
    goto LABEL_10;
  }
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 96));
  CFArrayRef v7 = *(const __CFArray **)(a1 + 24);
  if (v7)
  {
    Copy = CFArrayCreateCopy(0, v7);
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 96));
    if (!Copy) {
      goto LABEL_15;
    }
LABEL_10:
    int v10 = 0;
    goto LABEL_11;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 96));
  Copy = CFArrayCreate(0, 0, 0, MEMORY[0x1E4F1D510]);
  if (Copy) {
    goto LABEL_10;
  }
LABEL_15:
  int v10 = -6728;
LABEL_11:
  if (a4) {
    *a4 = v10;
  }
  return Copy;
}

uint64_t HIDBrowserSetProperty(uint64_t a1, CFTypeRef cf1, uint64_t a3, const __CFString *a4)
{
  if (!CFEqual(cf1, @"hidRaw")) {
    return 4294960582;
  }
  unsigned int v8 = 0;
  unint64_t v6 = CFGetInt64(a4, (int *)&v8);
  uint64_t result = v8;
  if (!v8) {
    *(unsigned char *)(a1 + 104) = v6 != 0;
  }
  return result;
}

void HIDBrowserSetDispatchQueue(uint64_t a1, NSObject *a2)
{
  if (a2) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = MEMORY[0x1E4F14428];
  }
  dispatch_retain(v3);
  uint64_t v4 = *(NSObject **)(a1 + 16);
  if (v4) {
    dispatch_release(v4);
  }
  *(void *)(a1 + 16) = v3;
}

uint64_t HIDBrowserSetEventHandler(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 128) = a2;
  *(void *)(result + 136) = a3;
  return result;
}

uint64_t HIDBrowserStart(dispatch_queue_t *a1)
{
  return 0;
}

void _HIDBrowserStart(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 104))
  {
    uint64_t v2 = IONotificationPortCreate(*MEMORY[0x1E4F2EEF0]);
    *(void *)(a1 + 112) = v2;
    if (!v2)
    {
      uint64_t v9 = 4294960596;
      goto LABEL_4;
    }
    IONotificationPortSetDispatchQueue(v2, *(dispatch_queue_t *)(a1 + 16));
    CFArrayRef v7 = *(IONotificationPort **)(a1 + 112);
    CFDictionaryRef v8 = IOServiceMatching("IOHIDDevice");
    uint64_t v9 = IOServiceAddMatchingNotification(v7, "IOServiceFirstMatch", v8, (IOServiceMatchingCallback)_HIDBrowserAttachHandler, (void *)a1, (io_iterator_t *)(a1 + 120));
    if (v9) {
      goto LABEL_4;
    }
  }
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 96));
  int v10 = *(const void **)(a1 + 24);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(a1 + 24) = 0;
  }
  *(void *)(a1 + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 96));
  if (!*(void *)(a1 + 24))
  {
    uint64_t v9 = 4294960568;
LABEL_4:
    if (gLogCategory_HIDUtils <= 50
      && (gLogCategory_HIDUtils != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_HIDUtils, 0x32u)))
    {
      LogPrintF((uint64_t)&gLogCategory_HIDUtils, (uint64_t)"void _HIDBrowserStart(void *)", 0x32u, (uint64_t)"### HID browser start failed: %#m\n", v3, v4, v5, v6, v9);
    }
    _HIDBrowserStop(a1);
    return;
  }
  pthread_mutex_lock(&gVirtualHIDLock);
  if (gVirtualHIDDevices)
  {
    CFIndex Count = CFArrayGetCount((CFArrayRef)gVirtualHIDDevices);
    if (Count >= 1)
    {
      CFIndex v12 = Count;
      for (CFIndex i = 0; i != v12; ++i)
      {
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)gVirtualHIDDevices, i);
        pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 96));
        CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 24), ValueAtIndex);
        pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 96));
      }
    }
  }
  pthread_mutex_unlock(&gVirtualHIDLock);
  if (*(void *)(a1 + 128))
  {
    CFIndex v15 = CFArrayGetCount(*(CFArrayRef *)(a1 + 24));
    if (v15 >= 1)
    {
      CFIndex v16 = v15;
      for (CFIndex j = 0; j != v16; ++j)
      {
        uint64_t v18 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), j);
        (*(void (**)(uint64_t, const void *, void))(a1 + 128))(2, v18, *(void *)(a1 + 136));
      }
    }
  }
  io_iterator_t v19 = *(_DWORD *)(a1 + 120);
  if (v19) {
    _HIDBrowserAttachHandler(a1, v19);
  }
  id v20 = *(void (**)(uint64_t, void, void))(a1 + 128);
  if (v20) {
    v20(4, 0, *(void *)(a1 + 136));
  }
  CFRelease((CFTypeRef)a1);
}

uint64_t _HIDBrowserAttachHandler(uint64_t a1, io_iterator_t iterator)
{
  CFStringRef runLoopMode = (const __CFString *)*MEMORY[0x1E4F1D410];
  uint64_t v4 = MEMORY[0x1E4F14428];
  while (1)
  {
    uint64_t result = IOIteratorNext(iterator);
    if (!result) {
      return result;
    }
    io_service_t v6 = result;
    if (gHIDDeviceInitOnce != -1) {
      dispatch_once_f(&gHIDDeviceInitOnce, 0, (dispatch_function_t)_HIDDeviceGetTypeID);
    }
    uint64_t Instance = _CFRuntimeCreateInstance();
    uint64_t v12 = Instance;
    if (!Instance)
    {
LABEL_33:
      uint64_t v14 = 4294960568;
      goto LABEL_10;
    }
    *(void *)(Instance + 152) = 0;
    *(_OWORD *)(Instance + 136) = 0u;
    *(_OWORD *)(Instance + 120) = 0u;
    *(_OWORD *)(Instance + 104) = 0u;
    *(_OWORD *)(Instance + 88) = 0u;
    *(_OWORD *)(Instance + 72) = 0u;
    *(_OWORD *)(Instance + 56) = 0u;
    *(_OWORD *)(Instance + 40) = 0u;
    *(_OWORD *)(Instance + 24) = 0u;
    *(void *)(Instance + 16) = v4;
    dispatch_retain(v4);
    if (a1) {
      CFRetain((CFTypeRef)a1);
    }
    *(void *)(v12 + 24) = a1;
    uint64_t v13 = IOHIDDeviceCreate(0, v6);
    *(void *)(v12 + 32) = v13;
    if (!v13)
    {
      uint64_t v14 = 4294960596;
      goto LABEL_10;
    }
    uint64_t v14 = IOHIDDeviceOpen(v13, 0);
    if (v14)
    {
LABEL_10:
      if (gLogCategory_HIDUtils <= 50
        && (gLogCategory_HIDUtils != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_HIDUtils, 0x32u)))
      {
        LogPrintF((uint64_t)&gLogCategory_HIDUtils, (uint64_t)"OSStatus _HIDDeviceCreateWithService(HIDDeviceRef *, HIDBrowserRef, io_object_t)", 0x32u, (uint64_t)"### Add HID device failed: %#m\n", v8, v9, v10, v11, v14);
      }
      CFRelease((CFTypeRef)v12);
      IOObjectRelease(v6);
    }
    else
    {
      *(unsigned char *)(v12 + 40) = 1;
      Property = (__CFString *)IOHIDDeviceGetProperty(*(IOHIDDeviceRef *)(v12 + 32), @"Product");
      if (!Property) {
        Property = @"?";
      }
      *(void *)(v12 + 104) = Property;
      CFRetain(Property);
      CFStringRef v16 = (const __CFString *)IOHIDDeviceGetProperty(*(IOHIDDeviceRef *)(v12 + 32), @"MaxInputReportSize");
      if (v16)
      {
        int64_t v17 = CFGetInt64(v16, 0);
        *(void *)(v12 + 56) = v17;
      }
      else
      {
        int64_t v17 = *(void *)(v12 + 56);
      }
      if (v17 <= 0)
      {
        *(void *)(v12 + 56) = 32;
        int64_t v17 = 32;
      }
      uint64_t v18 = malloc_type_malloc(v17, 0x52488B57uLL);
      *(void *)(v12 + 48) = v18;
      if (!v18) {
        goto LABEL_33;
      }
      CFTypeRef v19 = IOHIDDeviceGetProperty(*(IOHIDDeviceRef *)(v12 + 32), @"ReportDescriptor");
      if (!v19)
      {
        uint64_t v14 = 4294960551;
        goto LABEL_10;
      }
      CFTypeRef v20 = v19;
      CFRetain(v19);
      *(void *)(v12 + 120) = v20;
      RandomBytes((void *)(v12 + 136), 0x10uLL);
      *(unsigned char *)(v12 + 142) = *(unsigned char *)(v12 + 142) & 0xF | 0x40;
      *(unsigned char *)(v12 + 144) = *(unsigned char *)(v12 + 144) & 0x3F | 0x80;
      id v21 = *(__IOHIDDevice **)(v12 + 32);
      Main = CFRunLoopGetMain();
      IOHIDDeviceScheduleWithRunLoop(v21, Main, runLoopMode);
      if (a1) {
        IOHIDDeviceRegisterRemovalCallback(*(IOHIDDeviceRef *)(v12 + 32), (IOHIDCallback)_HIDBrowserDetachHandler, (void *)v12);
      }
      IOObjectRelease(v6);
      if (gLogCategory_HIDUtils <= 30
        && (gLogCategory_HIDUtils != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_HIDUtils, 0x1Eu)))
      {
        LogPrintF((uint64_t)&gLogCategory_HIDUtils, (uint64_t)"void _HIDBrowserAttachHandler(void *, io_iterator_t)", 0x1Eu, (uint64_t)"Attached HID device %#U (%-3d byte reports): %@\n", v23, v24, v25, v26, v12 + 136);
      }
      pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 96));
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 24), (const void *)v12);
      pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 96));
      long long v27 = *(void (**)(uint64_t, uint64_t, void))(a1 + 128);
      if (v27) {
        v27(2, v12, *(void *)(a1 + 136));
      }
      CFRelease((CFTypeRef)v12);
    }
  }
}

void _HIDBrowserStop(uint64_t a1)
{
  io_object_t v2 = *(_DWORD *)(a1 + 120);
  if (v2)
  {
    IOObjectRelease(v2);
    *(_DWORD *)(a1 + 120) = 0;
  }
  uint64_t v3 = *(IONotificationPort **)(a1 + 112);
  if (v3)
  {
    IONotificationPortDestroy(v3);
    *(void *)(a1 + 112) = 0;
  }
  uint64_t v4 = *(void (**)(uint64_t, void, void))(a1 + 128);
  if (v4) {
    v4(1, 0, *(void *)(a1 + 136));
  }
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 96));
  uint64_t v5 = *(const void **)(a1 + 24);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 24) = 0;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 96));
  CFRelease((CFTypeRef)a1);
}

CFIndex _HIDBrowserDetachHandler(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = a1[3];
  if (gLogCategory_HIDUtils <= 30
    && (gLogCategory_HIDUtils != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_HIDUtils, 0x1Eu)))
  {
    LogPrintF((uint64_t)&gLogCategory_HIDUtils, (uint64_t)"void _HIDBrowserDetachHandler(void *, IOReturn, void *)", 0x1Eu, (uint64_t)"Detached HID device %#U: %@\n", a5, a6, a7, a8, (uint64_t)(a1 + 17));
  }
  uint64_t v10 = *(void (**)(uint64_t, void *, void))(v9 + 128);
  if (v10) {
    v10(3, a1, *(void *)(v9 + 136));
  }
  CFArrayRef v11 = *(const __CFArray **)(v9 + 24);
  v16.size_t length = CFArrayGetCount(v11);
  v16.location = 0;
  CFIndex result = CFArrayGetFirstIndexOfValue(v11, v16, a1);
  if ((result & 0x8000000000000000) == 0)
  {
    CFIndex v13 = result;
    pthread_mutex_lock(*(pthread_mutex_t **)(v9 + 96));
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v9 + 24), v13);
    uint64_t v14 = *(pthread_mutex_t **)(v9 + 96);
    return pthread_mutex_unlock(v14);
  }
  return result;
}

uint64_t _HIDDeviceGetTypeID()
{
  uint64_t result = _CFRuntimeRegisterClass();
  gHIDDeviceCFTypeID TypeID = result;
  return result;
}

void _HIDDeviceFinalize(uint64_t a1)
{
  io_object_t v2 = *(const void **)(a1 + 24);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 24) = 0;
  }
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v3 = *(__IOHIDDevice **)(a1 + 32);
    Main = CFRunLoopGetMain();
    IOHIDDeviceUnscheduleFromRunLoop(v3, Main, (CFStringRef)*MEMORY[0x1E4F1D410]);
    IOHIDDeviceRegisterRemovalCallback(*(IOHIDDeviceRef *)(a1 + 32), 0, (void *)a1);
    IOHIDDeviceClose(*(IOHIDDeviceRef *)(a1 + 32), 0);
    *(unsigned char *)(a1 + 40) = 0;
  }
  uint64_t v5 = *(const void **)(a1 + 32);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 32) = 0;
  }
  io_service_t v6 = *(void **)(a1 + 48);
  if (v6)
  {
    free(v6);
    *(void *)(a1 + 48) = 0;
  }
  *(void *)(a1 + 56) = 0;
  CFArrayRef v7 = *(const void **)(a1 + 88);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(a1 + 88) = 0;
  }
  uint64_t v8 = *(const void **)(a1 + 96);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 96) = 0;
  }
  uint64_t v9 = *(const void **)(a1 + 104);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(a1 + 104) = 0;
  }
  uint64_t v10 = *(const void **)(a1 + 112);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(a1 + 112) = 0;
  }
  CFArrayRef v11 = *(const void **)(a1 + 120);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(a1 + 120) = 0;
  }
  uint64_t v12 = *(const void **)(a1 + 128);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(a1 + 128) = 0;
  }
  CFIndex v13 = *(const void **)(a1 + 152);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(a1 + 152) = 0;
  }
  uint64_t v14 = *(NSObject **)(a1 + 16);
  if (v14)
  {
    dispatch_release(v14);
    *(void *)(a1 + 16) = 0;
  }
}

void HIDBrowserStop(void *a1)
{
  CFRetain(a1);
  io_object_t v2 = a1[2];
  dispatch_async_f(v2, a1, (dispatch_function_t)_HIDBrowserStop);
}

void HIDBrowserStopDevices(void *a1)
{
  CFRetain(a1);
  io_object_t v2 = a1[2];
  dispatch_async_f(v2, a1, (dispatch_function_t)_HIDBrowserStopDevices);
}

void _HIDBrowserStopDevices(CFTypeRef cf)
{
  CFArrayRef v2 = (const __CFArray *)*((void *)cf + 3);
  if (v2)
  {
    CFIndex Count = CFArrayGetCount(v2);
    if (Count >= 1)
    {
      CFIndex v4 = Count;
      for (CFIndex i = 0; i != v4; ++i)
      {
        CFStringRef ValueAtIndex = (dispatch_queue_t *)CFArrayGetValueAtIndex(*((CFArrayRef *)cf + 3), i);
        CFRetain(ValueAtIndex);
        dispatch_async_f(ValueAtIndex[2], ValueAtIndex, (dispatch_function_t)_HIDDeviceStop);
      }
    }
  }
  CFRelease(cf);
}

void _HIDDeviceStop(void *context)
{
  if (*((unsigned char *)context + 64))
  {
    *((unsigned char *)context + 64) = 0;
    CFArrayRef v2 = (__IOHIDDevice *)*((void *)context + 4);
    if (v2) {
      IOHIDDeviceRegisterInputReportCallback(v2, *((uint8_t **)context + 6), *((void *)context + 7), 0, context);
    }
    uint64_t v3 = (void (*)(void, uint64_t, void, void, void, void))*((void *)context + 9);
    if (v3) {
      v3(0, 1, 0, 0, 0, *((void *)context + 10));
    }
    CFRelease(context);
  }
  CFRelease(context);
}

uint64_t HIDDeviceCreateVirtual(void *a1, const __CFDictionary *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (gHIDDeviceInitOnce != -1) {
    dispatch_once_f(&gHIDDeviceInitOnce, 0, (dispatch_function_t)_HIDDeviceGetTypeID);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance) {
    return 4294960568;
  }
  uint64_t v5 = (void *)Instance;
  *(_OWORD *)(Instance + 136) = 0u;
  io_service_t v6 = (unsigned char *)(Instance + 136);
  *(void *)(Instance + 152) = 0;
  *(_OWORD *)(Instance + 104) = 0u;
  *(_OWORD *)(Instance + 120) = 0u;
  *(_OWORD *)(Instance + 72) = 0u;
  *(_OWORD *)(Instance + 88) = 0u;
  *(_OWORD *)(Instance + 40) = 0u;
  *(_OWORD *)(Instance + 56) = 0u;
  *(_OWORD *)(Instance + 24) = 0u;
  CFArrayRef v7 = MEMORY[0x1E4F14428];
  *((void *)v6 - 15) = MEMORY[0x1E4F14428];
  dispatch_retain(v7);
  RandomBytes(v6, 0x10uLL);
  v6[6] = v6[6] & 0xF | 0x40;
  v6[8] = v6[8] & 0x3F | 0x80;
  if (!a2)
  {
LABEL_24:
    uint64_t result = 0;
    *a1 = v5;
    return result;
  }
  unsigned int v24 = 0;
  unint64_t Int64 = CFDictionaryGetInt64(a2, @"countryCode", (int *)&v24);
  if (!v24) {
    v5[11] = CFNumberCreateInt64(Int64);
  }
  CFDataRef Value = (__CFString *)CFDictionaryGetValue(a2, @"displayUUID");
  if (!Value)
  {
    unsigned int v24 = -6727;
    goto LABEL_10;
  }
  unsigned int v24 = CFGetUUIDEx(Value, 0, (uint64_t)v28);
  if (v24
    || (snprintf(__str, 0x25uLL, "%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x", v28[0], v28[1], v28[2], v28[3], v28[4], v28[5], v28[6], v28[7], v28[8], v28[9], v28[10], v28[11], v28[12], v28[13], v28[14], v28[15]),
        CFStringRef v10 = CFStringCreateWithCString(0, __str, 0x8000100u),
        (v5[12] = v10) != 0))
  {
LABEL_10:
    CFTypeID TypeID = CFStringGetTypeID();
    TypedCFDataRef Value = CFDictionaryGetTypedValue(a2, @"name", TypeID, 0);
    if (TypedValue)
    {
      CFDictionaryRef v13 = TypedValue;
      CFRetain(TypedValue);
      v5[13] = v13;
    }
    unint64_t v14 = CFDictionaryGetInt64(a2, @"productID", (int *)&v24);
    if (!v24) {
      v5[14] = CFNumberCreateInt64(v14);
    }
    CFDataRef v15 = (const __CFData *)CFDictionaryGetValue(a2, @"hidDescriptor");
    if (v15)
    {
      int v26 = 0;
      CFIndex length = 0;
      CFRange v16 = (const UInt8 *)CFCopyData(v15, (size_t *)&length, &v26);
      if (!v26)
      {
        int64_t v17 = (UInt8 *)v16;
        CFDataRef v18 = CFDataCreate(0, v16, length);
        free(v17);
        if (v18) {
          v5[15] = v18;
        }
      }
    }
    unint64_t v19 = CFDictionaryGetInt64(a2, @"sampleRate", (int *)&v24);
    if (v24 || (CFNumberRef v20 = CFNumberCreateInt64(v19), (v5[16] = v20) != 0))
    {
      id v21 = (__CFString *)CFDictionaryGetValue(a2, @"uuid");
      if (v21) {
        CFGetUUIDEx(v21, 0, (uint64_t)v6);
      }
      unint64_t v22 = CFDictionaryGetInt64(a2, @"vendorID", (int *)&v24);
      if (!v24) {
        v5[19] = CFNumberCreateInt64(v22);
      }
      goto LABEL_24;
    }
  }
  unsigned int v24 = -6700;
  CFRelease(v5);
  return v24;
}

void HIDDeviceSetDispatchQueue(uint64_t a1, NSObject *a2)
{
  if (a2) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = MEMORY[0x1E4F14428];
  }
  dispatch_retain(v3);
  CFIndex v4 = *(NSObject **)(a1 + 16);
  if (v4) {
    dispatch_release(v4);
  }
  *(void *)(a1 + 16) = v3;
}

uint64_t HIDDeviceSetEventHandler(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 72) = a2;
  *(void *)(result + 80) = a3;
  return result;
}

CFStringRef HIDDeviceCopyProperty(uint64_t a1, CFTypeRef cf1, uint64_t a3, int *a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (CFEqual(cf1, @"countryCode"))
  {
    CFStringRef v7 = *(CFStringRef *)(a1 + 88);
    if (!v7) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (CFEqual(cf1, @"displayUUID"))
  {
    CFStringRef v7 = *(CFStringRef *)(a1 + 96);
    if (!v7) {
      goto LABEL_30;
    }
    goto LABEL_9;
  }
  if (CFEqual(cf1, @"name"))
  {
    CFStringRef v7 = *(CFStringRef *)(a1 + 104);
    goto LABEL_9;
  }
  if (CFEqual(cf1, @"productID"))
  {
    CFStringRef v7 = *(CFStringRef *)(a1 + 112);
    if (!v7) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (CFEqual(cf1, @"hidDescriptor"))
  {
    CFStringRef v7 = *(CFStringRef *)(a1 + 120);
    if (!v7) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (CFEqual(cf1, @"sampleRate"))
  {
    CFStringRef v7 = *(CFStringRef *)(a1 + 128);
    if (!v7) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (!CFEqual(cf1, @"uuid"))
  {
    if (!CFEqual(cf1, @"vendorID"))
    {
      CFStringRef v7 = 0;
LABEL_30:
      int v8 = -6727;
      goto LABEL_11;
    }
    CFStringRef v7 = *(CFStringRef *)(a1 + 152);
    if (!v7) {
      goto LABEL_10;
    }
LABEL_9:
    CFRetain(v7);
LABEL_10:
    int v8 = 0;
    goto LABEL_11;
  }
  UUIDtoCStringFlags((unsigned char *)(a1 + 136), 16, 0, 0, cStr, 0);
  CFStringRef v7 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  if (v7) {
    goto LABEL_10;
  }
  int v8 = -6728;
LABEL_11:
  if (a4) {
    *a4 = v8;
  }
  return v7;
}

uint64_t HIDDeviceSetProperty(void *a1, CFTypeRef cf1, uint64_t a3, const __CFString *a4)
{
  unsigned int v30 = 0;
  if (CFEqual(cf1, @"countryCode"))
  {
    unint64_t v7 = CFGetInt64(a4, (int *)&v30);
    uint64_t result = v30;
    if (v30) {
      return result;
    }
    CFNumberRef Int64 = CFNumberCreateInt64(v7);
    if (Int64)
    {
      CFNumberRef v10 = Int64;
      uint64_t v11 = (const void *)a1[11];
      if (v11) {
        CFRelease(v11);
      }
      uint64_t result = 0;
      a1[11] = v10;
      return result;
    }
    return 4294960596;
  }
  if (CFEqual(cf1, @"displayUUID"))
  {
    if (!a4)
    {
LABEL_11:
      CFDictionaryRef v13 = (const void *)a1[12];
      if (v13) {
        CFRelease(v13);
      }
      uint64_t result = 0;
      a1[12] = a4;
      return result;
    }
    CFTypeID v12 = CFGetTypeID(a4);
    if (v12 == CFStringGetTypeID())
    {
      CFRetain(a4);
      goto LABEL_11;
    }
    return 4294960540;
  }
  if (CFEqual(cf1, @"name"))
  {
    if (a4)
    {
      CFTypeID v14 = CFGetTypeID(a4);
      if (v14 != CFStringGetTypeID()) {
        return 4294960540;
      }
      CFRetain(a4);
    }
    CFDataRef v15 = (const void *)a1[13];
    if (v15) {
      CFRelease(v15);
    }
    uint64_t result = 0;
    a1[13] = a4;
  }
  else if (CFEqual(cf1, @"productID"))
  {
    unint64_t v16 = CFGetInt64(a4, (int *)&v30);
    uint64_t result = v30;
    if (v30) {
      return result;
    }
    CFNumberRef v17 = CFNumberCreateInt64(v16);
    if (!v17) {
      return 4294960596;
    }
    CFNumberRef v18 = v17;
    unint64_t v19 = (const void *)a1[14];
    if (v19) {
      CFRelease(v19);
    }
    uint64_t result = 0;
    a1[14] = v18;
  }
  else if (CFEqual(cf1, @"hidDescriptor"))
  {
    if (a4)
    {
      CFTypeID v20 = CFGetTypeID(a4);
      if (v20 != CFDataGetTypeID()) {
        return 4294960540;
      }
      CFRetain(a4);
    }
    id v21 = (const void *)a1[15];
    if (v21) {
      CFRelease(v21);
    }
    uint64_t result = 0;
    a1[15] = a4;
  }
  else if (CFEqual(cf1, @"sampleRate"))
  {
    unint64_t v22 = CFGetInt64(a4, (int *)&v30);
    uint64_t result = v30;
    if (v30) {
      return result;
    }
    CFNumberRef v23 = CFNumberCreateInt64(v22);
    if (!v23) {
      return 4294960596;
    }
    CFNumberRef v24 = v23;
    uint64_t v25 = (const void *)a1[16];
    if (v25) {
      CFRelease(v25);
    }
    uint64_t result = 0;
    a1[16] = v24;
  }
  else
  {
    if (!CFEqual(cf1, @"vendorID")) {
      return 4294960582;
    }
    unint64_t v26 = CFGetInt64(a4, (int *)&v30);
    uint64_t result = v30;
    if (!v30)
    {
      CFNumberRef v27 = CFNumberCreateInt64(v26);
      if (!v27) {
        return 4294960596;
      }
      CFNumberRef v28 = v27;
      uint64_t v29 = (const void *)a1[19];
      if (v29) {
        CFRelease(v29);
      }
      uint64_t result = 0;
      a1[19] = v28;
    }
  }
  return result;
}

uint64_t HIDDevicePostReport(dispatch_queue_t *a1, const void *a2, size_t a3)
{
  io_service_t v6 = (dispatch_queue_t **)malloc_type_malloc(a3 + 16, 0x5DC08097uLL);
  if (!v6) {
    return 4294960568;
  }
  unint64_t v7 = v6;
  CFRetain(a1);
  *unint64_t v7 = a1;
  v7[1] = (dispatch_queue_t *)a3;
  memcpy(v7 + 2, a2, a3);
  dispatch_async_f(a1[2], v7, (dispatch_function_t)_HIDDevicePostReport);
  return 0;
}

void _HIDDevicePostReport(void *a1)
{
  CFArrayRef v2 = (void *)*a1;
  uint64_t v3 = *(void (**)(void, uint64_t, void, void *, void, void))(*a1 + 72);
  if (v3) {
    v3(*a1, 2, 0, a1 + 2, a1[1], v2[10]);
  }
  CFRelease(v2);
  free(a1);
}

uint64_t HIDDeviceStart(dispatch_queue_t *a1)
{
  return 0;
}

void _HIDDeviceStart(void *context)
{
  if (*((unsigned char *)context + 40)) {
    IOHIDDeviceRegisterInputReportCallback(*((IOHIDDeviceRef *)context + 4), *((uint8_t **)context + 6), *((void *)context + 7), (IOHIDReportCallback)_HIDDeviceHandleReport, context);
  }
  *((unsigned char *)context + 64) = 1;
}

uint64_t _HIDDeviceHandleReport(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = result;
  if (gLogCategory_HIDUtils <= 9)
  {
    if (gLogCategory_HIDUtils != -1
      || (uint64_t result = _LogCategory_Initialize((uint64_t)&gLogCategory_HIDUtils, 9u), result))
    {
      uint64_t result = LogPrintF((uint64_t)&gLogCategory_HIDUtils, (uint64_t)"void _HIDDeviceHandleReport(void *, IOReturn, void *, IOHIDReportType, uint32_t, uint8_t *, CFIndex)", 9u, (uint64_t)"HID report for %#U: %.3H\n", a5, a6, a7, a8, v11 + 136);
    }
  }
  CFTypeID v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 72);
  if (v12)
  {
    uint64_t v13 = *(void *)(v11 + 80);
    return v12(v11, 2, a2, a6, a7, v13);
  }
  return result;
}

void HIDDeviceStop(void *a1)
{
  CFRetain(a1);
  CFArrayRef v2 = a1[2];
  dispatch_async_f(v2, a1, (dispatch_function_t)_HIDDeviceStop);
}

uint64_t HIDRegisterDevice(uint64_t *a1)
{
  pthread_mutex_lock(&gVirtualHIDLock);
  CFMutableDataRef Mutable = (__CFArray *)gVirtualHIDDevices;
  if (gVirtualHIDDevices
    || (CFMutableDataRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]), (gVirtualHIDDevices = (uint64_t)Mutable) != 0))
  {
    CFArrayAppendValue(Mutable, a1);
    if (gLogCategory_HIDUtils <= 50
      && (gLogCategory_HIDUtils != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_HIDUtils, 0x32u)))
    {
      LogPrintF((uint64_t)&gLogCategory_HIDUtils, (uint64_t)"OSStatus HIDRegisterDevice(HIDDeviceRef)", 0x32u, (uint64_t)"Registered HID %''@, %#U\n", v3, v4, v5, v6, a1[13]);
    }
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 4294960568;
  }
  pthread_mutex_unlock(&gVirtualHIDLock);
  return v7;
}

uint64_t HIDDeregisterDevice(uint64_t *a1)
{
  pthread_mutex_lock(&gVirtualHIDLock);
  if (!gVirtualHIDDevices) {
    goto LABEL_12;
  }
  CFIndex Count = CFArrayGetCount((CFArrayRef)gVirtualHIDDevices);
  if (Count >= 1)
  {
    for (CFIndex i = 0; i < Count; ++i)
    {
      if (CFArrayGetValueAtIndex((CFArrayRef)gVirtualHIDDevices, i) == a1)
      {
        if (gLogCategory_HIDUtils <= 50
          && (gLogCategory_HIDUtils != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_HIDUtils, 0x32u)))
        {
          LogPrintF((uint64_t)&gLogCategory_HIDUtils, (uint64_t)"OSStatus HIDDeregisterDevice(HIDDeviceRef)", 0x32u, (uint64_t)"Deregistered HID %''@, %#U\n", v4, v5, v6, v7, a1[13]);
        }
        CFArrayRemoveValueAtIndex((CFMutableArrayRef)gVirtualHIDDevices, i--);
        --Count;
      }
    }
  }
  if (!Count)
  {
LABEL_12:
    if (gVirtualHIDDevices)
    {
      CFRelease((CFTypeRef)gVirtualHIDDevices);
      gVirtualHIDDevices = 0;
    }
  }
  pthread_mutex_unlock(&gVirtualHIDLock);
  return 0;
}

uint64_t HIDPostReport(__CFString *a1, const void *a2, size_t a3)
{
  v16[2] = *MEMORY[0x1E4F143B8];
  uint64_t result = CFGetUUIDEx(a1, 0, (uint64_t)v16);
  if (!result)
  {
    pthread_mutex_lock(&gVirtualHIDLock);
    if (gVirtualHIDDevices && (CFIndex Count = CFArrayGetCount((CFArrayRef)gVirtualHIDDevices), Count >= 1))
    {
      CFIndex v8 = Count;
      CFIndex v9 = 0;
      while (1)
      {
        CFStringRef ValueAtIndex = (dispatch_queue_t *)CFArrayGetValueAtIndex((CFArrayRef)gVirtualHIDDevices, v9);
        if ((dispatch_queue_t)v16[0] == ValueAtIndex[17] && v16[1] == (void)ValueAtIndex[18]) {
          break;
        }
        if (v8 == ++v9) {
          goto LABEL_10;
        }
      }
      HIDDevicePostReport(ValueAtIndex, a2, a3);
      pthread_mutex_unlock(&gVirtualHIDLock);
      return 0;
    }
    else
    {
LABEL_10:
      pthread_mutex_unlock(&gVirtualHIDLock);
      if (gLogCategory_HIDUtils <= 50
        && (gLogCategory_HIDUtils != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_HIDUtils, 0x32u)))
      {
        LogPrintF((uint64_t)&gLogCategory_HIDUtils, (uint64_t)"OSStatus HIDPostReport(CFStringRef, const void *, size_t)", 0x32u, (uint64_t)"### Post HID report for %@ not found\n", v12, v13, v14, v15, (uint64_t)a1);
      }
      return 4294960569;
    }
  }
  return result;
}

uint64_t _HTTPClientGetTypeID()
{
  uint64_t result = _CFRuntimeRegisterClass();
  gHTTPClientCFTypeID TypeID = result;
  return result;
}

void _HTTPClientFinalize(uint64_t a1)
{
  CFArrayRef v2 = *(NSObject **)(a1 + 16);
  if (v2)
  {
    dispatch_release(v2);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v3 = *(void **)(a1 + 72);
  if (v3)
  {
    free(v3);
    *(void *)(a1 + 72) = 0;
  }
  uint64_t v4 = *(void **)(a1 + 128);
  if (v4)
  {
    free(v4);
    *(void *)(a1 + 128) = 0;
  }
  uint64_t v5 = *(void **)(a1 + 152);
  if (v5)
  {
    free(v5);
    *(void *)(a1 + 152) = 0;
  }
  uint64_t v6 = *(void (**)(void))(a1 + 472);
  if (v6) {
    v6(*(void *)(a1 + 456));
  }
  int v7 = *(_DWORD *)(a1 + 176);
  if ((v7 & 0x80000000) == 0)
  {
    if (close(v7) && *__error()) {
      __error();
    }
    *(_DWORD *)(a1 + 176) = -1;
  }
  CFIndex v8 = *(void **)(a1 + 232);
  if (v8)
  {
    free(v8);
    *(void *)(a1 + 232) = 0;
  }
  HTTPClientAuthorization_Free((void *)(a1 + 248));
}

uint64_t HTTPClientCreate(uint64_t *a1)
{
  if (gHTTPClientInitOnce != -1) {
    dispatch_once_f(&gHTTPClientInitOnce, 0, (dispatch_function_t)_HTTPClientGetTypeID);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance) {
    return 4294960568;
  }
  uint64_t v3 = Instance;
  bzero((void *)(Instance + 24), 0x210uLL);
  *(_DWORD *)(v3 + 176) = -1;
  uint64_t v4 = MEMORY[0x1E4F14428];
  *(void *)(v3 + 16) = MEMORY[0x1E4F14428];
  dispatch_retain(v4);
  RandomBytes((void *)(v3 + 160), 4uLL);
  uint64_t result = 0;
  *(_DWORD *)(v3 + 160) = *(unsigned __int16 *)(v3 + 162) << 16;
  *(unsigned char *)(v3 + 136) = 1;
  *(void *)(v3 + 96) = &gLogCategory_HTTPClientCore;
  *(void *)(v3 + 480) = SocketTransportRead;
  *(void *)(v3 + 488) = SocketTransportWriteV;
  *(void *)(v3 + 544) = v3 + 536;
  *(_DWORD *)(v3 + 248) = 0;
  *(unsigned char *)(v3 + 252) = 0;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_OWORD *)(v3 + 272) = 0u;
  *(_OWORD *)(v3 + 288) = 0u;
  *(_OWORD *)(v3 + 304) = 0u;
  *(_OWORD *)(v3 + 320) = 0u;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_OWORD *)(v3 + 368) = 0u;
  *(_OWORD *)(v3 + 384) = 0u;
  *(_OWORD *)(v3 + 400) = 0u;
  *(_DWORD *)(v3 + 416) = 0;
  *a1 = v3;
  return result;
}

uint64_t HTTPClientCreateWithSocket(uint64_t *a1, int a2)
{
  uint64_t v6 = 0;
  uint64_t result = HTTPClientCreate(&v6);
  if (!result)
  {
    uint64_t v5 = v6;
    *(_DWORD *)(v6 + 176) = a2;
    *a1 = v5;
  }
  return result;
}

void HTTPClientInvalidate(void *a1)
{
  CFRetain(a1);
  CFArrayRef v2 = a1[2];
  dispatch_async_f(v2, a1, (dispatch_function_t)_HTTPClientInvalidate);
}

void _HTTPClientInvalidate(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _HTTPClientErrorHandler((uint64_t)a1, 4294960573, a3, a4, a5, a6, a7, a8);
  CFRelease(a1);
}

void _HTTPClientErrorHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_DWORD *)(a1 + 164) != 9)
  {
    CFNumberRef v10 = *(int **)(a1 + 96);
    if (*v10 <= 90)
    {
      if (*v10 != -1)
      {
LABEL_4:
        LogPrintF((uint64_t)v10, (uint64_t)"void _HTTPClientErrorHandler(HTTPClientRef, OSStatus)", 0x5Au, (uint64_t)"### Error: CID 0x%08X, Peer %s, %#m\n", a5, a6, a7, a8, *(unsigned int *)(a1 + 160));
        goto LABEL_6;
      }
      if (_LogCategory_Initialize((uint64_t)v10, 0x5Au))
      {
        CFNumberRef v10 = *(int **)(a1 + 96);
        goto LABEL_4;
      }
    }
  }
LABEL_6:
  *(_DWORD *)(a1 + 164) = 9;
  uint64_t v11 = *(dispatch_queue_t **)(a1 + 168);
  if (v11)
  {
    dispatch_async_f(v11[13], v11, (dispatch_function_t)_AsyncConnection_UserRelease);
    *(void *)(a1 + 168) = 0;
  }
  uint64_t v12 = *(NSObject **)(a1 + 184);
  if (v12)
  {
    dispatch_source_cancel(v12);
    if (*(unsigned char *)(a1 + 192))
    {
      dispatch_resume(*(dispatch_object_t *)(a1 + 184));
      *(unsigned char *)(a1 + 192) = 0;
    }
    dispatch_release(*(dispatch_object_t *)(a1 + 184));
    *(void *)(a1 + 184) = 0;
  }
  uint64_t v13 = *(NSObject **)(a1 + 200);
  if (v13)
  {
    dispatch_source_cancel(v13);
    if (*(unsigned char *)(a1 + 208))
    {
      dispatch_resume(*(dispatch_object_t *)(a1 + 200));
      *(unsigned char *)(a1 + 208) = 0;
    }
    dispatch_release(*(dispatch_object_t *)(a1 + 200));
    *(void *)(a1 + 200) = 0;
  }
  uint64_t v14 = *(NSObject **)(a1 + 216);
  if (v14)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 216));
    dispatch_release(v14);
    *(void *)(a1 + 216) = 0;
  }
  uint64_t v15 = *(NSObject **)(a1 + 224);
  if (v15)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 224));
    dispatch_release(v15);
    *(void *)(a1 + 224) = 0;
  }
  unint64_t v16 = *(const void **)(a1 + 424);
  if (v16)
  {
    CFRelease(v16);
    *(void *)(a1 + 424) = 0;
  }
  uint64_t v17 = *(void *)(a1 + 536);
  if (v17)
  {
    CFNumberRef v18 = (uint64_t *)(a1 + 536);
    do
    {
      uint64_t v19 = *(void *)(v17 + 16);
      *CFNumberRef v18 = v19;
      if (!v19) {
        *(void *)(a1 + 544) = v18;
      }
      *(_DWORD *)(v17 + 9648) = a2;
      CFTypeID v20 = *(void (**)(uint64_t))(v17 + 9712);
      if (v20) {
        v20(v17);
      }
      CFRelease((CFTypeRef)v17);
      uint64_t v17 = *v18;
    }
    while (*v18);
  }
  id v21 = *(void (**)(uint64_t, uint64_t))(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v21)
  {
    uint64_t v22 = *(void *)(a1 + 32);
    v21(a2, v22);
  }
}

uint64_t HTTPClientGetClientID(uint64_t a1)
{
  return *(unsigned int *)(a1 + 160);
}

uint64_t HTTPClientGetPeerAddress(uint64_t a1, sockaddr *a2, socklen_t a3, void *a4)
{
  socklen_t v6 = a3;
  if (getpeername(*(_DWORD *)(a1 + 176), a2, &v6))
  {
    if (!*__error()) {
      return 4294960596;
    }
    uint64_t result = *__error();
    if (result) {
      return result;
    }
  }
  uint64_t result = 0;
  if (a4) {
    *a4 = v6;
  }
  return result;
}

uint64_t HTTPClientGetSelfAddress(uint64_t a1, sockaddr *a2, socklen_t a3, void *a4)
{
  socklen_t v6 = a3;
  if (getsockname(*(_DWORD *)(a1 + 176), a2, &v6))
  {
    if (!*__error()) {
      return 4294960596;
    }
    uint64_t result = *__error();
    if (result) {
      return result;
    }
  }
  uint64_t result = 0;
  if (a4) {
    *a4 = v6;
  }
  return result;
}

__n128 HTTPClientSetDebugDelegate(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[28].n128_u64[0] = a2[1].n128_u64[0];
  a1[27] = result;
  return result;
}

uint64_t HTTPClientGetDelegateContext(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

__n128 HTTPClientSetDelegate(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 64) = *(void *)(a2 + 32);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v3;
  return result;
}

uint64_t HTTPClientSetDestination(uint64_t a1, char *__s1, int a3)
{
  uint64_t v5 = strdup(__s1);
  if (!v5) {
    return 4294960568;
  }
  socklen_t v6 = v5;
  int v7 = *(void **)(a1 + 72);
  if (v7) {
    free(v7);
  }
  uint64_t result = 0;
  *(void *)(a1 + 72) = v6;
  *(_DWORD *)(a1 + 80) = a3;
  return result;
}

void HTTPClientSetDispatchQueue(uint64_t a1, NSObject *a2)
{
  if (a2) {
    long long v3 = a2;
  }
  else {
    long long v3 = MEMORY[0x1E4F14428];
  }
  dispatch_retain(v3);
  uint64_t v4 = *(NSObject **)(a1 + 16);
  if (v4) {
    dispatch_release(v4);
  }
  *(void *)(a1 + 16) = v3;
}

uint64_t HTTPClientSetFlags(uint64_t result, int a2, int a3)
{
  *(_DWORD *)(result + 84) = *(_DWORD *)(result + 84) & ~a3 | a3 & a2;
  return result;
}

_DWORD *HTTPClientSetKeepAlive(_DWORD *result, int a2, int a3)
{
  result[28] = a2;
  result[29] = a2;
  result[30] = a3;
  return result;
}

_DWORD *HTTPClientSetKeepAliveEx(_DWORD *result, int a2, int a3, int a4)
{
  result[28] = a2;
  result[29] = a3;
  result[30] = a4;
  return result;
}

uint64_t HTTPClientSetConnectionLogging(uint64_t result, uint64_t a2)
{
  *(void *)(result + 104) = a2;
  return result;
}

uint64_t HTTPClientSetLogging(uint64_t result, uint64_t a2)
{
  *(void *)(result + 96) = a2;
  return result;
}

uint64_t _HTTPClientSetProperty(uint64_t a1, CFTypeRef cf1, const __CFString *a3)
{
  if (CFEqual(cf1, @"allowedAuthSchemes"))
  {
    int v6 = CFGetInt64(a3, 0);
    uint64_t result = 0;
    *(_DWORD *)(a1 + 24) = v6;
    return result;
  }
  if (CFEqual(cf1, @"ipv6DelayNanos"))
  {
    unint64_t v8 = CFGetInt64(a3, 0);
    uint64_t result = 0;
    *(void *)(a1 + 88) = v8;
    return result;
  }
  if (CFEqual(cf1, @"password"))
  {
    if (!a3)
    {
      uint64_t v14 = 0;
LABEL_14:
      uint64_t v11 = *(void **)(a1 + 128);
      if (v11) {
        free(v11);
      }
      uint64_t result = 0;
      *(void *)(a1 + 128) = v14;
      return result;
    }
    CFTypeID v9 = CFGetTypeID(a3);
    if (v9 == CFStringGetTypeID())
    {
      uint64_t v14 = 0;
      if (CFStringGetLength(a3) >= 1)
      {
        uint64_t result = CFStringCopyUTF8CString(a3, &v14);
        if (result) {
          return result;
        }
      }
      goto LABEL_14;
    }
    return 4294960540;
  }
  if (CFEqual(cf1, @"rfc2617DigestAuth"))
  {
    unint64_t v10 = CFGetInt64(a3, 0);
    uint64_t result = 0;
    *(unsigned char *)(a1 + 136) = v10 != 0;
    return result;
  }
  if (!CFEqual(cf1, @"username")) {
    return 4294960582;
  }
  if (a3)
  {
    CFTypeID v12 = CFGetTypeID(a3);
    if (v12 != CFStringGetTypeID()) {
      return 4294960540;
    }
    uint64_t v14 = 0;
    if (CFStringGetLength(a3) >= 1)
    {
      uint64_t result = CFStringCopyUTF8CString(a3, &v14);
      if (result) {
        return result;
      }
    }
  }
  else
  {
    uint64_t v14 = 0;
  }
  uint64_t v13 = *(void **)(a1 + 152);
  if (v13) {
    free(v13);
  }
  uint64_t result = 0;
  *(void *)(a1 + 152) = v14;
  return result;
}

uint64_t HTTPClientSetQoS(uint64_t result, int a2)
{
  *(_DWORD *)(result + 140) = a2;
  return result;
}

uint64_t HTTPClientSetTimeout(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 144) = a2;
  uint64_t result = *(unsigned int *)(a1 + 176);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = SocketSetTCPTimeout(result, a2);
    if (result)
    {
      uint64_t result = *(void *)(a1 + 96);
      if (*(int *)result <= 60)
      {
        if (*(_DWORD *)result != -1) {
          return LogPrintF(result, (uint64_t)"void HTTPClientSetTimeout(HTTPClientRef, int)", 0x3Cu, (uint64_t)"### Set TCP timeout to %d seconds failed: %#m\n", v5, v6, v7, v8, a2);
        }
        uint64_t result = _LogCategory_Initialize(result, 0x3Cu);
        if (result)
        {
          uint64_t result = *(void *)(a1 + 96);
          return LogPrintF(result, (uint64_t)"void HTTPClientSetTimeout(HTTPClientRef, int)", 0x3Cu, (uint64_t)"### Set TCP timeout to %d seconds failed: %#m\n", v5, v6, v7, v8, a2);
        }
      }
    }
  }
  return result;
}

uint64_t HTTPClientSetTransportDelegate(uint64_t a1, long long *a2)
{
  uint64_t v4 = a1 + 456;
  uint64_t v5 = *(void (**)(void))(a1 + 472);
  if (v5) {
    v5(*(void *)v4);
  }
  long long v6 = *a2;
  long long v7 = a2[1];
  *(void *)(v4 + 32) = *((void *)a2 + 4);
  *(_OWORD *)uint64_t v4 = v6;
  *(_OWORD *)(v4 + 16) = v7;
  *(unsigned char *)(a1 + 496) = 1;
  ++*(_DWORD *)(a1 + 500);
  uint64_t result = *(unsigned int *)(a1 + 176);
  if ((result & 0x80000000) == 0)
  {
    CFTypeID v9 = *(uint64_t (**)(void))(a1 + 464);
    if (v9)
    {
      return v9();
    }
  }
  return result;
}

uint64_t HTTPClientDetach(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1[63]) {
    return 4294960575;
  }
  a1[63] = a2;
  a1[64] = a3;
  a1[65] = a4;
  a1[66] = a5;
  CFTypeID v9 = (int *)a1[12];
  if (*v9 > 30) {
    return 0;
  }
  if (*v9 != -1)
  {
LABEL_4:
    LogPrintF((uint64_t)v9, (uint64_t)"OSStatus HTTPClientDetach(HTTPClientRef, HTTPClientDetachHandler_f, void *, void *, void *)", 0x1Eu, (uint64_t)"Detaching client for %s\n", a5, a6, a7, a8, a1[9]);
    return 0;
  }
  uint64_t result = _LogCategory_Initialize((uint64_t)v9, 0x1Eu);
  if (result)
  {
    CFTypeID v9 = (int *)a1[12];
    goto LABEL_4;
  }
  return result;
}

uint64_t HTTPClientSendBinaryBytes(dispatch_queue_t *a1, char a2, char a3, const void *a4, size_t a5, uint64_t a6, uint64_t a7)
{
  CFTypeRef cf = 0;
  if (a5 >> 16) {
    return 4294960553;
  }
  uint64_t v20 = HTTPMessageCreate((uint64_t *)&cf);
  CFTypeRef v21 = cf;
  if (v20) {
    goto LABEL_3;
  }
  if (a2)
  {
    *((void *)cf + 1065) = a4;
    *((void *)v21 + 1066) = a5;
  }
  else
  {
    uint64_t v20 = HTTPMessageSetBodyLength(cf, a5);
    if (v20)
    {
LABEL_3:
      if (!v21) {
        return v20;
      }
      goto LABEL_13;
    }
    if (a5) {
      memmove(*((void **)v21 + 1065), a4, a5);
    }
  }
  *((unsigned char *)v21 + 24) = 36;
  *((unsigned char *)v21 + 25) = a3;
  *((unsigned char *)v21 + 26) = BYTE1(a5);
  *((unsigned char *)v21 + 27) = a5;
  *((void *)v21 + 1027) = 4;
  if (a6)
  {
    *((void *)v21 + 1213) = a6;
    *((void *)v21 + 1209) = a7;
    *((void *)v21 + 1214) = _HTTPClientSendBinaryCompletion;
  }
  uint64_t v20 = HTTPClientSendMessage(a1, (uint64_t)v21, v14, v15, v16, v17, v18, v19);
LABEL_13:
  CFRelease(v21);
  return v20;
}

uint64_t HTTPClientSendMessage(dispatch_queue_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*(void *)(a2 + 8216))
  {
    *(_DWORD *)(a2 + 9624) = 0;
LABEL_9:
    CFRetain((CFTypeRef)a2);
    CFRetain(a1);
    *(void *)(a2 + 9656) = a1;
    dispatch_async_f(a1[2], (void *)a2, (dispatch_function_t)_HTTPClientSendMessage);
    return 0;
  }
  uint64_t v10 = a2 + 24;
  if (*(unsigned char *)(a2 + 8512)) {
    HTTPHeader_SetField((char *)(a2 + 24), "Connection", (uint64_t)"close", a4, a5, a6, a7, a8, v13);
  }
  uint64_t result = HTTPHeader_Commit(a2 + 24);
  if (!result)
  {
    *(void *)(a2 + 9584) = v10;
    *(void *)(a2 + 9592) = *(void *)(a2 + 8216);
    *(_DWORD *)(a2 + 9624) = 1;
    uint64_t v12 = *(void *)(a2 + 8528);
    if (v12)
    {
      *(void *)(a2 + 9600) = *(void *)(a2 + 8520);
      *(void *)(a2 + 9608) = v12;
      *(_DWORD *)(a2 + 9624) = 2;
    }
    *(void *)(a2 + 9616) = a2 + 9584;
    goto LABEL_9;
  }
  return result;
}

void _HTTPClientSendMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 9656);
  *(void *)(a1 + 16) = 0;
  **(void **)(v8 + 544) = a1;
  *(void *)(v8 + 544) = a1 + 16;
  _HTTPClientRunStateMachine((char *)v8, a2, a3, a4, a5, a6, a7, a8);
  CFRelease((CFTypeRef)v8);
}

void _HTTPClientRunStateMachine(char *cf, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeID v9 = (uint64_t *)(cf + 536);
  uint64_t v10 = (uint64_t *)(cf + 424);
  uint64_t v11 = cf + 248;
  uint64_t v135 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = cf + 168;
LABEL_2:
  while (2)
  {
    for (int i = *((_DWORD *)cf + 41); ; int i = 0)
    {
      if (i != 2)
      {
        switch(i)
        {
          case 0:
            uint64_t v18 = *v9;
            if (!*v9)
            {
              if (*((void *)cf + 63))
              {
                uint64_t v23 = 4294960573;
                goto LABEL_205;
              }
              if ((cf[84] & 0x10) != 0)
              {
                if (*((void *)cf + 30))
                {
                  int v19 = 7;
                  goto LABEL_153;
                }
                if (cf[192])
                {
                  cf[192] = 0;
                  dispatch_resume(*((dispatch_object_t *)cf + 23));
                }
              }
              return;
            }
            if ((*((_DWORD *)cf + 44) & 0x80000000) == 0)
            {
              if (*((void *)cf + 23))
              {
                int v19 = 2;
                goto LABEL_153;
              }
              CFRetain(cf);
              _HTTPClientConnectHandler(*((unsigned int *)cf + 44), 0, (uint64_t)cf, v105, v106, v107, v108, v109);
              return;
            }
            uint64_t v103 = *(void *)(v18 + 9632);
            if (v103 == -1)
            {
              int v104 = *(_DWORD *)(v18 + 9640);
              if (v104 < 1)
              {
                int v110 = *((_DWORD *)cf + 36);
                BOOL v111 = v110 < 1;
                uint64_t v112 = 1000000000 * v110;
                if (v111) {
                  uint64_t v103 = -1;
                }
                else {
                  uint64_t v103 = v112;
                }
              }
              else
              {
                uint64_t v103 = 1000000000 * v104;
              }
            }
            unsigned int v113 = *((_DWORD *)cf + 21) & 0xF | (16 * ((*((_DWORD *)cf + 21) >> 5) & 0x1F)) & 0xFFFFE7FF | (((*((_DWORD *)cf + 21) >> 10) & 3) << 11);
            uint64_t v114 = (int *)*((void *)cf + 12);
            if (*v114 > 50) {
              goto LABEL_224;
            }
            if (*v114 != -1) {
              goto LABEL_222;
            }
            if (_LogCategory_Initialize((uint64_t)v114, 0x32u))
            {
              uint64_t v114 = (int *)*((void *)cf + 12);
LABEL_222:
              LogPrintF((uint64_t)v114, (uint64_t)"void _HTTPClientRunStateMachine(HTTPClientRef)", 0x32u, (uint64_t)"Connect start: CID 0x%08X, Peer %s, Flags 0x%X, TimeoutNs %llu\n", a5, a6, a7, a8, *((unsigned int *)cf + 40));
            }
LABEL_224:
            uint64_t v134 = 0;
            long long v133 = 0u;
            long long v132 = 0u;
            long long v131 = 0u;
            uint64_t v130 = 152;
            uint64_t v118 = *((void *)cf + 9);
            int v119 = *((_DWORD *)cf + 20);
            unsigned int v120 = v113;
            uint64_t v121 = v103;
            uint64_t v122 = -1;
            uint64_t v123 = 0;
            uint64_t v124 = 0;
            uint64_t v125 = _HTTPClientConnectHandler;
            uint64_t v126 = cf;
            uint64_t v115 = *((void *)cf + 13);
            uint64_t v127 = *((void *)cf + 2);
            uint64_t v128 = v115;
            uint64_t v129 = *((void *)cf + 11);
            uint64_t v30 = AsyncConnection_ConnectEx(v12, (uint64_t)&v118);
            if (v30) {
              goto LABEL_225;
            }
            CFRetain(cf);
            *((_DWORD *)cf + 41) = 1;
            return;
          case 1:
            return;
          case 3:
            uint64_t v20 = *v9;
            if (!*v9) {
              goto LABEL_204;
            }
            uint64_t v21 = HTTPMessageWriteMessage(*v9, *((uint64_t (**)(uint64_t, uint64_t))cf + 61), *((void *)cf + 57));
            uint64_t v22 = _HTTPClientHandleIOError((uint64_t)cf, v21, 0);
            if (v22 == 35) {
              return;
            }
            uint64_t v23 = v22;
            if (v22) {
              goto LABEL_205;
            }
            LogHTTP(*((void *)cf + 12), *((int **)cf + 12), (unsigned __int8 *)(v20 + 24), *(void *)(v20 + 8216), *(void *)(v20 + 8520), *(void *)(v20 + 8528), a7, a8);
            CFNumberRef v28 = (int *)*((void *)cf + 12);
            if (*v28 > 50) {
              goto LABEL_109;
            }
            if (*v28 != -1) {
              goto LABEL_23;
            }
            if (_LogCategory_Initialize((uint64_t)v28, 0x32u))
            {
              CFNumberRef v28 = (int *)*((void *)cf + 12);
LABEL_23:
              LogPrintF((uint64_t)v28, (uint64_t)"void _HTTPClientRunStateMachine(HTTPClientRef)", 0x32u, (uint64_t)"Request written: CID 0x%08X, Header %zu bytes, Body %zu bytes\n", v24, v25, v26, v27, *((unsigned int *)cf + 40));
            }
LABEL_109:
            uint64_t v67 = (void (*)(uint64_t, void, void, void, void))*((void *)cf + 55);
            if (v67) {
              v67(v20 + 24, *(void *)(v20 + 8216), *(void *)(v20 + 8520), *(void *)(v20 + 8528), *((void *)cf + 54));
            }
            size_t v68 = *(void *)(v20 + 8216);
            if (v68 == 4)
            {
              if (*(unsigned char *)(v20 + 24) == 36) {
                int v69 = 6;
              }
              else {
                int v69 = 4;
              }
            }
            else
            {
              int v69 = 4;
            }
            *((_DWORD *)cf + 41) = v69;
            if (!*((_DWORD *)cf + 6) || !*((void *)cf + 19) || !*((void *)cf + 16)) {
              goto LABEL_167;
            }
            uint64_t v70 = *(void **)(v20 + 9560);
            if (v70) {
              goto LABEL_122;
            }
            uint64_t v70 = malloc_type_calloc(1uLL, 0x2120uLL, 0x10500401E8B2D2AuLL);
            *(void *)(v20 + 9560) = v70;
            if (!v70) {
              goto LABEL_231;
            }
            size_t v68 = *(void *)(v20 + 8216);
LABEL_122:
            memcpy(v70, (const void *)(v20 + 24), v68);
            *(void *)(*(void *)(v20 + 9560) + 0x2000) = *(void *)(v20 + 8216);
            uint64_t v71 = *(void **)(v20 + 9568);
            if (v71)
            {
              free(v71);
              *(void *)(v20 + 9568) = 0;
            }
            *(void *)(v20 + 9576) = 0;
            size_t v72 = *(void *)(v20 + 8528);
            if (!v72) {
              goto LABEL_167;
            }
            uint64_t v73 = *(void *)(v20 + 8520);
            if (v73 == *(void *)(v20 + 9552))
            {
              *(void *)(v20 + 9568) = v73;
              *(void *)(v20 + 8520) = 0;
              *(void *)(v20 + 9552) = 0;
            }
            else
            {
              uint64_t v74 = malloc_type_malloc(v72, 0xE6DFFD42uLL);
              *(void *)(v20 + 9568) = v74;
              if (!v74)
              {
LABEL_231:
                uint64_t v23 = 4294960568;
                goto LABEL_205;
              }
              memcpy(v74, *(const void **)(v20 + 8520), *(void *)(v20 + 8528));
              size_t v72 = *(void *)(v20 + 8528);
            }
            *(void *)(v20 + 9576) = v72;
            goto LABEL_167;
          case 4:
            uint64_t v20 = *v9;
            if (!*v9) {
              goto LABEL_204;
            }
            *(void *)(v20 + 8224) = *((void *)cf + 29);
            *(void *)(v20 + 8232) = *((void *)cf + 30);
            uint64_t Message = HTTPMessageReadMessageEx(v20, *((uint64_t (**)(void *, size_t, unint64_t *, uint64_t))cf + 60), *((void *)cf + 57));
            uint64_t v30 = _HTTPUpdateExtraData((uint64_t)cf, *(void **)(v20 + 8224), *(void *)(v20 + 8232));
            if (v30) {
              goto LABEL_225;
            }
            *(void *)(v20 + 8232) = 0;
            uint64_t v31 = _HTTPClientHandleIOError((uint64_t)cf, Message, 1);
            if (v31 == 35) {
              return;
            }
            uint64_t v23 = v31;
            if (v31) {
              goto LABEL_205;
            }
            long long v32 = (unsigned char *)(v20 + 24);
            LogHTTP(*((void *)cf + 12), *((int **)cf + 12), (unsigned __int8 *)(v20 + 24), *(void *)(v20 + 8216), *(void *)(v20 + 8520), *(void *)(v20 + 8528), a7, a8);
            long long v33 = (void (*)(uint64_t, void, void, void, void))*((void *)cf + 56);
            if (v33) {
              v33(v20 + 24, *(void *)(v20 + 8216), *(void *)(v20 + 8520), *(void *)(v20 + 8528), *((void *)cf + 54));
            }
            if (*(void *)(v20 + 8216) == 4 && *v32 == 36)
            {
              int v34 = (int *)*((void *)cf + 12);
              if (*v34 > 50) {
                goto LABEL_159;
              }
              if (*v34 == -1)
              {
                if (!_LogCategory_Initialize((uint64_t)v34, 0x32u))
                {
LABEL_159:
                  uint64_t v90 = (void (*)(void, void, void, void))*((void *)cf + 6);
                  if (v90) {
                    v90(*(unsigned __int8 *)(v20 + 8480), *(void *)(v20 + 8520), *(void *)(v20 + 8528), *((void *)cf + 4));
                  }
LABEL_167:
                  HTTPMessageReset(v20);
                  goto LABEL_2;
                }
                int v34 = (int *)*((void *)cf + 12);
              }
              LogPrintF((uint64_t)v34, (uint64_t)"void _HTTPClientRunStateMachine(HTTPClientRef)", 0x32u, (uint64_t)"Binary received 1: CID 0x%08X, Header %zu bytes, Body %zu bytes\n", a5, a6, a7, a8, *((unsigned int *)cf + 40));
              goto LABEL_159;
            }
            if ((cf[84] & 0x10) != 0)
            {
              uint64_t v59 = 0;
              uint64_t v60 = *(void *)(v20 + 8448);
              while (v60 != v59)
              {
                if (*(unsigned __int8 *)(*(void *)(v20 + 8440) + v59) != aEvent10[v59]) {
                  goto LABEL_74;
                }
                if (++v59 == 10) {
                  goto LABEL_136;
                }
              }
              if (!aEvent10[v60])
              {
LABEL_136:
                long long v84 = (int *)*((void *)cf + 12);
                if (*v84 <= 50)
                {
                  if (*v84 != -1) {
                    goto LABEL_138;
                  }
                  if (_LogCategory_Initialize((uint64_t)v84, 0x32u))
                  {
                    long long v84 = (int *)*((void *)cf + 12);
LABEL_138:
                    LogPrintF((uint64_t)v84, (uint64_t)"void _HTTPClientRunStateMachine(HTTPClientRef)", 0x32u, (uint64_t)"Event received 1: CID 0x%08X, Header %zu bytes, Body %zu bytes\n", a5, a6, a7, a8, *((unsigned int *)cf + 40));
                  }
                }
                uint64_t v92 = (void (*)(uint64_t, void))*((void *)cf + 7);
                if (v92) {
                  v92(v20, *((void *)cf + 4));
                }
                goto LABEL_167;
              }
            }
LABEL_74:
            uint64_t v53 = (int *)*((void *)cf + 12);
            if (*v53 > 50) {
              goto LABEL_144;
            }
            if (*v53 != -1) {
              goto LABEL_76;
            }
            if (_LogCategory_Initialize((uint64_t)v53, 0x32u))
            {
              uint64_t v53 = (int *)*((void *)cf + 12);
LABEL_76:
              LogPrintF((uint64_t)v53, (uint64_t)"void _HTTPClientRunStateMachine(HTTPClientRef)", 0x32u, (uint64_t)"Response received: CID 0x%08X, Header %zu bytes, Body %zu bytes, Status %d\n", a5, a6, a7, a8, *((unsigned int *)cf + 40));
            }
LABEL_144:
            if (*(_DWORD *)(v20 + 8456) != 401) {
              goto LABEL_152;
            }
            if (!*((_DWORD *)cf + 6)) {
              goto LABEL_152;
            }
            if (!*((void *)cf + 19)) {
              goto LABEL_152;
            }
            if (!*((void *)cf + 16)) {
              goto LABEL_152;
            }
            uint64_t v86 = *(void *)(v20 + 9560);
            if (!v86) {
              goto LABEL_152;
            }
            if (HTTPHeader_Parse(v86)) {
              goto LABEL_152;
            }
            uint64_t v88 = *(void *)(v20 + 9560);
            *(_DWORD *)(v88 + 8476) = -6721;
            *((_DWORD *)cf + 62) = *((_DWORD *)cf + 6);
            *((void *)cf + 34) = v88;
            *((void *)cf + 35) = v32;
            cf[252] = cf[136] == 0;
            uint64_t v89 = *((void *)cf + 16);
            *((void *)cf + 32) = *((void *)cf + 19);
            *((void *)cf + 33) = v89;
            if (HTTPClientAuthorization_Apply((uint64_t)v11, v87, a3, a4, a5, a6, a7, a8)
              || HTTPHeader_Commit(*(void *)(v20 + 9560)))
            {
LABEL_152:
              int v19 = 6;
              goto LABEL_153;
            }
            memcpy((void *)(v20 + 24), *(const void **)(v20 + 9560), *(void *)(*(void *)(v20 + 9560) + 0x2000));
            uint64_t v95 = *(void *)(*(void *)(v20 + 9560) + 0x2000);
            *(void *)(v20 + 8216) = v95;
            uint64_t v96 = *(void **)(v20 + 9552);
            if (v96)
            {
              free(v96);
              uint64_t v95 = *(void *)(v20 + 8216);
            }
            uint64_t v97 = *(void *)(v20 + 9568);
            *(void *)(v20 + 9552) = v97;
            *(void *)(v20 + 8520) = v97;
            uint64_t v98 = *(void *)(v20 + 9576);
            *(void *)(v20 + 8528) = v98;
            *(_OWORD *)(v20 + 9568) = 0u;
            *(void *)(v20 + 9584) = v32;
            *(void *)(v20 + 9592) = v95;
            *(_DWORD *)(v20 + 9624) = 1;
            if (v98)
            {
              *(void *)(v20 + 9600) = v97;
              *(void *)(v20 + 9608) = v98;
              *(_DWORD *)(v20 + 9624) = 2;
            }
            *(void *)(v20 + 9616) = v20 + 9584;
            *((_DWORD *)cf + 41) = 2;
            break;
          case 5:
            uint64_t v117 = 0;
            uint64_t v35 = (*((uint64_t (**)(uint64_t *, uint64_t, uint64_t *, void))cf + 60))(&v118, 16, &v117, *((void *)cf + 57));
            uint64_t v36 = _HTTPClientHandleIOError((uint64_t)cf, v35, 1);
            if (v36 == 35) {
              return;
            }
            uint64_t v37 = v36;
            uint64_t v38 = v117;
            if (!v117) {
              goto LABEL_104;
            }
            long long v39 = (int *)*((void *)cf + 12);
            if (*v39 > 50) {
              goto LABEL_104;
            }
            if (*v39 != -1) {
              goto LABEL_39;
            }
            if (_LogCategory_Initialize((uint64_t)v39, 0x32u))
            {
              long long v39 = (int *)*((void *)cf + 12);
              uint64_t v38 = v117;
LABEL_39:
              LogPrintF((uint64_t)v39, (uint64_t)"void _HTTPClientRunStateMachine(HTTPClientRef)", 0x32u, (uint64_t)"### Read %zu bytes after connection close\n", a5, a6, a7, a8, v38);
            }
LABEL_104:
            if (v37 == -6753) {
              goto LABEL_129;
            }
            CFUUIDBytes v66 = (int *)*((void *)cf + 12);
            if (*v66 > 50) {
              goto LABEL_129;
            }
            if (*v66 != -1) {
              goto LABEL_107;
            }
            if (_LogCategory_Initialize((uint64_t)v66, 0x32u))
            {
              CFUUIDBytes v66 = (int *)*((void *)cf + 12);
LABEL_107:
              LogPrintF((uint64_t)v66, (uint64_t)"void _HTTPClientRunStateMachine(HTTPClientRef)", 0x32u, (uint64_t)"### Error on wait for close: %#m\n", a5, a6, a7, a8, v37);
            }
LABEL_129:
            uint64_t v75 = *v9;
            if (!*v9) {
              goto LABEL_204;
            }
            uint64_t v76 = *(void *)(v75 + 16);
            *CFTypeID v9 = v76;
            if (!v76) {
              *((void *)cf + 68) = v9;
            }
            *(_DWORD *)(v75 + 9648) = 0;
            uint64_t v77 = *(void (**)(uint64_t))(v75 + 9712);
            if (v77) {
              v77(v75);
            }
            CFRelease((CFTypeRef)v75);
            _HTTPClientErrorHandler((uint64_t)cf, 4294960544, v78, v79, v80, v81, v82, v83);
            goto LABEL_175;
          case 6:
            uint64_t v40 = *v9;
            if (!*v9) {
              goto LABEL_204;
            }
            if (*(unsigned char *)(v40 + 8512))
            {
              shutdown(*((_DWORD *)cf + 44), 1);
              int v19 = 5;
              goto LABEL_153;
            }
            uint64_t v51 = *(void *)(v40 + 16);
            *CFTypeID v9 = v51;
            if (!v51) {
              *((void *)cf + 68) = v9;
            }
            *(_DWORD *)(v40 + 9648) = 0;
            uint64_t v52 = *(void (**)(uint64_t))(v40 + 9712);
            if (v52) {
              v52(v40);
            }
            CFRelease((CFTypeRef)v40);
            goto LABEL_173;
          case 7:
            uint64_t v41 = (*((_DWORD *)cf + 40) + 1);
            *((_DWORD *)cf + 40) = v41;
            long long v42 = (int *)*((void *)cf + 12);
            if (*v42 > 50) {
              goto LABEL_82;
            }
            if (*v42 != -1) {
              goto LABEL_45;
            }
            if (_LogCategory_Initialize((uint64_t)v42, 0x32u))
            {
              long long v42 = (int *)*((void *)cf + 12);
              uint64_t v41 = *((unsigned int *)cf + 40);
LABEL_45:
              LogPrintF((uint64_t)v42, (uint64_t)"void _HTTPClientRunStateMachine(HTTPClientRef)", 0x32u, (uint64_t)"Event start: CID 0x%08X, Peer %s\n", a5, a6, a7, a8, v41);
            }
LABEL_82:
            uint64_t v55 = *((void *)cf + 28);
            if (v55)
            {
              dispatch_source_cancel(*((dispatch_source_t *)cf + 28));
              dispatch_release(v55);
              *((void *)cf + 28) = 0;
            }
            if (*((int *)cf + 36) < 1) {
              goto LABEL_87;
            }
            dispatch_source_t v56 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, *((dispatch_queue_t *)cf + 2));
            *((void *)cf + 28) = v56;
            if (!v56) {
              goto LABEL_227;
            }
            CFRetain(cf);
            dispatch_set_context(*((dispatch_object_t *)cf + 28), cf);
            dispatch_source_set_event_handler_f(*((dispatch_source_t *)cf + 28), (dispatch_function_t)_HTTPClientTimerFiredHandler);
            dispatch_source_set_cancel_handler_f(*((dispatch_source_t *)cf + 28), (dispatch_function_t)_HTTPClientTimerCanceledHandler);
            long long v57 = *((void *)cf + 28);
            dispatch_time_t v58 = dispatch_time(0, 1000000000 * *((int *)cf + 36));
            dispatch_source_set_timer(v57, v58, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
            dispatch_resume(*((dispatch_object_t *)cf + 28));
LABEL_87:
            int v19 = 8;
            goto LABEL_153;
          case 8:
            uint64_t v43 = *v10;
            if (*v10) {
              goto LABEL_49;
            }
            uint64_t v30 = HTTPMessageCreate(v10);
            if (v30) {
              goto LABEL_225;
            }
            uint64_t v43 = *((void *)cf + 53);
            *(_DWORD *)(v43 + 9768) = *((_DWORD *)cf + 125);
LABEL_49:
            *(void *)(v43 + 8224) = *((void *)cf + 29);
            *(void *)(v43 + 8232) = *((void *)cf + 30);
            uint64_t v44 = HTTPMessageReadMessageEx(v43, *((uint64_t (**)(void *, size_t, unint64_t *, uint64_t))cf + 60), *((void *)cf + 57));
            uint64_t v30 = _HTTPUpdateExtraData((uint64_t)cf, *(void **)(v43 + 8224), *(void *)(v43 + 8232));
            if (v30)
            {
LABEL_225:
              uint64_t v23 = v30;
              goto LABEL_205;
            }
            *(void *)(v43 + 8232) = 0;
            uint64_t v45 = _HTTPClientHandleIOError((uint64_t)cf, v44, 1);
            if (v45 == 35)
            {
              if (*(void *)(v43 + 8216)) {
                return;
              }
              unsigned long long v101 = (int *)*((void *)cf + 12);
              if (*v101 <= 40)
              {
                if (*v101 != -1) {
                  goto LABEL_200;
                }
                if (_LogCategory_Initialize((uint64_t)v101, 0x28u))
                {
                  unsigned long long v101 = (int *)*((void *)cf + 12);
LABEL_200:
                  LogPrintF((uint64_t)v101, (uint64_t)"void _HTTPClientRunStateMachine(HTTPClientRef)", 0x28u, (uint64_t)"### Ignoring spurious readability notification\n", a5, a6, a7, a8, v116);
                }
              }
              uint64_t v102 = *((void *)cf + 28);
              if (v102)
              {
                dispatch_source_cancel(*((dispatch_source_t *)cf + 28));
                dispatch_release(v102);
                *((void *)cf + 28) = 0;
              }
              *((_DWORD *)cf + 41) = 0;
              return;
            }
            uint64_t v23 = v45;
            if (v45) {
              goto LABEL_205;
            }
            LogHTTP(*((void *)cf + 12), *((int **)cf + 12), (unsigned __int8 *)(v43 + 24), *(void *)(v43 + 8216), *(void *)(v43 + 8520), *(void *)(v43 + 8528), a7, a8);
            long long v46 = (void (*)(uint64_t, void, void, void, void))*((void *)cf + 56);
            if (v46) {
              v46(v43 + 24, *(void *)(v43 + 8216), *(void *)(v43 + 8520), *(void *)(v43 + 8528), *((void *)cf + 54));
            }
            if (*(void *)(v43 + 8216) == 4 && *(unsigned char *)(v43 + 24) == 36)
            {
              long long v47 = (int *)*((void *)cf + 12);
              if (*v47 <= 50)
              {
                if (*v47 != -1) {
                  goto LABEL_58;
                }
                if (_LogCategory_Initialize((uint64_t)v47, 0x32u))
                {
                  long long v47 = (int *)*((void *)cf + 12);
LABEL_58:
                  LogPrintF((uint64_t)v47, (uint64_t)"void _HTTPClientRunStateMachine(HTTPClientRef)", 0x32u, (uint64_t)"Binary received 2: CID 0x%08X, Header %zu bytes, Body %zu bytes\n", a5, a6, a7, a8, *((unsigned int *)cf + 40));
                }
              }
              uint64_t v91 = (void (*)(void, void, void, void))*((void *)cf + 6);
              if (v91) {
                v91(*(unsigned __int8 *)(v43 + 8480), *(void *)(v43 + 8520), *(void *)(v43 + 8528), *((void *)cf + 4));
              }
              goto LABEL_171;
            }
            if ((cf[84] & 0x10) != 0)
            {
              uint64_t v61 = 0;
              uint64_t v62 = *(void *)(v43 + 8448);
              while (v62 != v61)
              {
                if (*(unsigned __int8 *)(*(void *)(v43 + 8440) + v61) != aEvent10[v61]) {
                  goto LABEL_78;
                }
                if (++v61 == 10) {
                  goto LABEL_140;
                }
              }
              if (aEvent10[v62]) {
                goto LABEL_78;
              }
LABEL_140:
              uint64_t v85 = (int *)*((void *)cf + 12);
              if (*v85 <= 50)
              {
                if (*v85 != -1) {
                  goto LABEL_142;
                }
                if (_LogCategory_Initialize((uint64_t)v85, 0x32u))
                {
                  uint64_t v85 = (int *)*((void *)cf + 12);
LABEL_142:
                  LogPrintF((uint64_t)v85, (uint64_t)"void _HTTPClientRunStateMachine(HTTPClientRef)", 0x32u, (uint64_t)"Event received 2: CID 0x%08X, Header %zu bytes, Body %zu bytes\n", a5, a6, a7, a8, *((unsigned int *)cf + 40));
                }
              }
              uint64_t v93 = (void (*)(uint64_t, void))*((void *)cf + 7);
              if (v93) {
                v93(v43, *((void *)cf + 4));
              }
              goto LABEL_171;
            }
LABEL_78:
            uint64_t v54 = (int *)*((void *)cf + 12);
            if (*v54 > 50) {
              goto LABEL_171;
            }
            if (*v54 != -1) {
              goto LABEL_80;
            }
            if (_LogCategory_Initialize((uint64_t)v54, 0x32u))
            {
              uint64_t v54 = (int *)*((void *)cf + 12);
LABEL_80:
              LogPrintF((uint64_t)v54, (uint64_t)"void _HTTPClientRunStateMachine(HTTPClientRef)", 0x32u, (uint64_t)"Event received 3: CID 0x%08X, Header %zu bytes, Body %zu bytes, ignored\n", a5, a6, a7, a8, *((unsigned int *)cf + 40));
            }
LABEL_171:
            if (*v10)
            {
              CFRelease((CFTypeRef)*v10);
              *uint64_t v10 = 0;
            }
LABEL_173:
            uint64_t v94 = *((void *)cf + 28);
            if (v94)
            {
              dispatch_source_cancel(*((dispatch_source_t *)cf + 28));
              dispatch_release(v94);
              *((void *)cf + 28) = 0;
            }
LABEL_175:
            *((_DWORD *)cf + 41) = 0;
            goto LABEL_2;
          case 9:
            long long v99 = (int *)*((void *)cf + 12);
            if (*v99 > 90) {
              goto LABEL_202;
            }
            if (*v99 != -1) {
              goto LABEL_193;
            }
            if (_LogCategory_Initialize((uint64_t)v99, 0x5Au))
            {
              long long v99 = (int *)*((void *)cf + 12);
LABEL_193:
              LogPrintF((uint64_t)v99, (uint64_t)"void _HTTPClientRunStateMachine(HTTPClientRef)", 0x5Au, (uint64_t)"### Error state: CID 0x%08X\n", a5, a6, a7, a8, *((unsigned int *)cf + 40));
            }
LABEL_202:
            uint64_t v23 = 4294960587;
            goto LABEL_205;
          default:
            uint64_t v100 = (int *)*((void *)cf + 12);
            if (*v100 > 90) {
              goto LABEL_204;
            }
            if (*v100 != -1) {
              goto LABEL_196;
            }
            if (_LogCategory_Initialize((uint64_t)v100, 0x5Au))
            {
              uint64_t v100 = (int *)*((void *)cf + 12);
LABEL_196:
              LogPrintF((uint64_t)v100, (uint64_t)"void _HTTPClientRunStateMachine(HTTPClientRef)", 0x5Au, (uint64_t)"### Bad state: CID 0x%08X, State %d\n", a5, a6, a7, a8, *((unsigned int *)cf + 40));
            }
            goto LABEL_204;
        }
        goto LABEL_2;
      }
      uint64_t v14 = *((void *)cf + 28);
      if (v14)
      {
        dispatch_source_cancel(*((dispatch_source_t *)cf + 28));
        dispatch_release(v14);
        *((void *)cf + 28) = 0;
      }
      uint64_t v15 = *v9;
      if (!*v9)
      {
LABEL_204:
        uint64_t v23 = 4294960534;
        goto LABEL_205;
      }
      if (*(_DWORD *)(v15 + 9624)) {
        break;
      }
      *(_DWORD *)(v15 + 8456) = 200;
      uint64_t v16 = *(void *)(v15 + 16);
      *CFTypeID v9 = v16;
      if (!v16) {
        *((void *)cf + 68) = v9;
      }
      *(_DWORD *)(v15 + 9648) = 0;
      uint64_t v17 = *(void (**)(uint64_t))(v15 + 9712);
      if (v17) {
        v17(v15);
      }
      CFRelease((CFTypeRef)v15);
      *((_DWORD *)cf + 41) = 0;
    }
    *(_DWORD *)(v15 + 9768) = *((_DWORD *)cf + 125);
    int v48 = *(_DWORD *)(v15 + 9644);
    if (v48 <= 0) {
      int v48 = *((_DWORD *)cf + 36);
    }
    uint64_t v49 = (*((_DWORD *)cf + 40) + 1);
    *((_DWORD *)cf + 40) = v49;
    CFMutableStringRef v50 = (int *)*((void *)cf + 12);
    if (*v50 <= 50)
    {
      if (*v50 != -1) {
        goto LABEL_63;
      }
      if (_LogCategory_Initialize((uint64_t)v50, 0x32u))
      {
        CFMutableStringRef v50 = (int *)*((void *)cf + 12);
        uint64_t v49 = *((unsigned int *)cf + 40);
LABEL_63:
        LogPrintF((uint64_t)v50, (uint64_t)"void _HTTPClientRunStateMachine(HTTPClientRef)", 0x32u, (uint64_t)"Request start: CID 0x%08X, Peer %s, TimeoutSecs %d\n", a5, a6, a7, a8, v49);
      }
    }
    if (v48 < 1)
    {
LABEL_102:
      int v19 = 3;
LABEL_153:
      *((_DWORD *)cf + 41) = v19;
      continue;
    }
    break;
  }
  dispatch_source_t v63 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, *((dispatch_queue_t *)cf + 2));
  *((void *)cf + 28) = v63;
  if (v63)
  {
    CFRetain(cf);
    dispatch_set_context(*((dispatch_object_t *)cf + 28), cf);
    dispatch_source_set_event_handler_f(*((dispatch_source_t *)cf + 28), (dispatch_function_t)_HTTPClientTimerFiredHandler);
    dispatch_source_set_cancel_handler_f(*((dispatch_source_t *)cf + 28), (dispatch_function_t)_HTTPClientTimerCanceledHandler);
    long long v64 = *((void *)cf + 28);
    dispatch_time_t v65 = dispatch_time(0, 1000000000 * v48);
    dispatch_source_set_timer(v64, v65, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    dispatch_resume(*((dispatch_object_t *)cf + 28));
    goto LABEL_102;
  }
LABEL_227:
  uint64_t v23 = 4294960596;
LABEL_205:
  _HTTPClientErrorHandler((uint64_t)cf, v23, a3, a4, a5, a6, a7, a8);
}

void _HTTPClientConnectHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = a2;
  int v10 = a1;
  if (!a2)
  {
    if (*(void *)(a3 + 536))
    {
      uint64_t v11 = *(uint64_t (**)(uint64_t, void))(a3 + 464);
      if (v11)
      {
        uint64_t v9 = v11(a1, *(void *)(a3 + 456));
        if (v9) {
          goto LABEL_5;
        }
      }
      else if (!*(unsigned char *)(a3 + 496))
      {
        *(void *)(a3 + 456) = (int)a1;
      }
      int v13 = *(_DWORD *)(a3 + 112);
      if (v13 >= 1)
      {
        int v14 = *(_DWORD *)(a3 + 120);
        if (v14 >= 1) {
          SocketSetKeepAliveEx(v10, v13, *(_DWORD *)(a3 + 116), v14);
        }
      }
      int v15 = *(_DWORD *)(a3 + 140);
      if (v15) {
        SocketSetQoS(v10, v15);
      }
      int v16 = *(_DWORD *)(a3 + 144);
      if (v16 < 1) {
        goto LABEL_28;
      }
      if (!SocketSetTCPTimeout(v10, v16)) {
        goto LABEL_28;
      }
      uint64_t v21 = *(int **)(a3 + 96);
      if (*v21 > 60) {
        goto LABEL_28;
      }
      if (*v21 == -1)
      {
        if (!_LogCategory_Initialize((uint64_t)v21, 0x3Cu))
        {
LABEL_28:
          if ((*(unsigned char *)(a3 + 85) & 0x10) != 0)
          {
            int v38 = 1;
            if (setsockopt(v10, 0xFFFF, 4131, &v38, 4u))
            {
              if (*__error())
              {
                uint64_t v26 = *__error();
                if (!v26) {
                  goto LABEL_38;
                }
              }
              else
              {
                uint64_t v26 = 4294960596;
              }
              uint64_t v27 = *(int **)(a3 + 96);
              if (*v27 <= 60)
              {
                if (*v27 == -1)
                {
                  if (!_LogCategory_Initialize((uint64_t)v27, 0x3Cu)) {
                    goto LABEL_38;
                  }
                  uint64_t v27 = *(int **)(a3 + 96);
                }
                LogPrintF((uint64_t)v27, (uint64_t)"void _HTTPClientConnectHandler(SocketRef, OSStatus, void *)", 0x3Cu, (uint64_t)"### Set SO_NOADDRERR failed: %#m", v22, v23, v24, v25, v26);
              }
            }
          }
LABEL_38:
          dispatch_source_t v28 = dispatch_source_create(MEMORY[0x1E4F14478], v10, 0, *(dispatch_queue_t *)(a3 + 16));
          *(void *)(a3 + 184) = v28;
          if (!v28) {
            goto LABEL_53;
          }
          ++*(_DWORD *)(a3 + 180);
          CFRetain((CFTypeRef)a3);
          dispatch_set_context(*(dispatch_object_t *)(a3 + 184), (void *)a3);
          dispatch_source_set_event_handler_f(*(dispatch_source_t *)(a3 + 184), (dispatch_function_t)_HTTPClientReadHandler);
          dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(a3 + 184), (dispatch_function_t)_HTTPClientCancelHandler);
          dispatch_resume(*(dispatch_object_t *)(a3 + 184));
          dispatch_source_t v29 = dispatch_source_create(MEMORY[0x1E4F144B0], v10, 0, *(dispatch_queue_t *)(a3 + 16));
          *(void *)(a3 + 200) = v29;
          if (!v29)
          {
LABEL_53:
            uint64_t v9 = 4294960596;
            goto LABEL_5;
          }
          ++*(_DWORD *)(a3 + 180);
          CFRetain((CFTypeRef)a3);
          dispatch_set_context(*(dispatch_object_t *)(a3 + 200), (void *)a3);
          dispatch_source_set_event_handler_f(*(dispatch_source_t *)(a3 + 200), (dispatch_function_t)_HTTPClientWriteHandler);
          dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(a3 + 200), (dispatch_function_t)_HTTPClientCancelHandler);
          *(unsigned char *)(a3 + 208) = 1;
          uintptr_t v34 = (*(_DWORD *)(a3 + 84) >> 5) & 0x100 | (((*(_DWORD *)(a3 + 84) >> 14) & 1u) << 15);
          if (!v34) {
            goto LABEL_47;
          }
          uint64_t v35 = *(int **)(a3 + 96);
          if (*v35 <= 50)
          {
            if (*v35 != -1)
            {
LABEL_43:
              LogPrintF((uint64_t)v35, (uint64_t)"void _HTTPClientConnectHandler(SocketRef, OSStatus, void *)", 0x32u, (uint64_t)"Configure socket events: CID 0x%08X, events 0x%X", v30, v31, v32, v33, *(unsigned int *)(a3 + 160));
              goto LABEL_45;
            }
            if (_LogCategory_Initialize((uint64_t)v35, 0x32u))
            {
              uint64_t v35 = *(int **)(a3 + 96);
              goto LABEL_43;
            }
          }
LABEL_45:
          dispatch_source_t v36 = dispatch_source_create(MEMORY[0x1E4F14488], v10, v34, *(dispatch_queue_t *)(a3 + 16));
          *(void *)(a3 + 216) = v36;
          if (v36)
          {
            ++*(_DWORD *)(a3 + 180);
            CFRetain((CFTypeRef)a3);
            dispatch_set_context(*(dispatch_object_t *)(a3 + 216), (void *)a3);
            dispatch_source_set_event_handler_f(*(dispatch_source_t *)(a3 + 216), (dispatch_function_t)_HTTPClientSocketEventsHandler);
            dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(a3 + 216), (dispatch_function_t)_HTTPClientCancelHandler);
            dispatch_activate(*(dispatch_object_t *)(a3 + 216));
LABEL_47:
            uint64_t v37 = *(int **)(a3 + 96);
            if (*v37 <= 50)
            {
              if (*v37 == -1)
              {
                if (!_LogCategory_Initialize((uint64_t)v37, 0x32u)) {
                  goto LABEL_51;
                }
                uint64_t v37 = *(int **)(a3 + 96);
              }
              LogPrintF((uint64_t)v37, (uint64_t)"void _HTTPClientConnectHandler(SocketRef, OSStatus, void *)", 0x32u, (uint64_t)"Connect success: CID 0x%08X, Peer %s\n", v30, v31, v32, v33, *(unsigned int *)(a3 + 160));
            }
LABEL_51:
            *(_DWORD *)(a3 + 176) = v10;
            *(_DWORD *)(a3 + 164) = 2;
            _HTTPClientRunStateMachine((CFTypeRef)a3);
            goto LABEL_52;
          }
          goto LABEL_53;
        }
        uint64_t v21 = *(int **)(a3 + 96);
      }
      LogPrintF((uint64_t)v21, (uint64_t)"void _HTTPClientConnectHandler(SocketRef, OSStatus, void *)", 0x3Cu, (uint64_t)"### Set TCP timeout to %d seconds failed: %#m\n", v17, v18, v19, v20, *(unsigned int *)(a3 + 144));
      goto LABEL_28;
    }
    uint64_t v9 = 4294960572;
  }
LABEL_5:
  uint64_t v12 = *(int **)(a3 + 96);
  if (*v12 > 90) {
    goto LABEL_21;
  }
  if (*v12 != -1) {
    goto LABEL_7;
  }
  if (_LogCategory_Initialize((uint64_t)v12, 0x5Au))
  {
    uint64_t v12 = *(int **)(a3 + 96);
LABEL_7:
    LogPrintF((uint64_t)v12, (uint64_t)"void _HTTPClientConnectHandler(SocketRef, OSStatus, void *)", 0x5Au, (uint64_t)"Connect failed: CID 0x%08X, Peer %s, %#m\n", a5, a6, a7, a8, *(unsigned int *)(a3 + 160));
  }
LABEL_21:
  if ((v10 & 0x80000000) == 0 && !*(_DWORD *)(a3 + 180) && close(v10) && *__error()) {
    __error();
  }
  _HTTPClientErrorHandler(a3, v9, a3, a4, a5, a6, a7, a8);
LABEL_52:
  CFRelease((CFTypeRef)a3);
}

uint64_t _HTTPClientHandleIOError(uint64_t a1, uint64_t a2, int a3)
{
  if ((int)a2 <= -6767)
  {
    if (a2 != -6775)
    {
      if (a2 != -6774) {
        return a2;
      }
LABEL_8:
      if (*(unsigned char *)(a1 + 192))
      {
        *(unsigned char *)(a1 + 192) = 0;
        uint64_t v4 = (dispatch_object_t *)(a1 + 184);
LABEL_14:
        dispatch_resume(*v4);
        return 35;
      }
      return 35;
    }
LABEL_12:
    if (*(unsigned char *)(a1 + 208))
    {
      *(unsigned char *)(a1 + 208) = 0;
      uint64_t v4 = (dispatch_object_t *)(a1 + 200);
      goto LABEL_14;
    }
    return 35;
  }
  if (a2 == -6766)
  {
    if (*(unsigned char *)(a1 + 192))
    {
      *(unsigned char *)(a1 + 192) = 0;
      dispatch_resume(*(dispatch_object_t *)(a1 + 184));
    }
    goto LABEL_12;
  }
  if (a2 == 35)
  {
    if (a3) {
      goto LABEL_8;
    }
    goto LABEL_12;
  }
  return a2;
}

uint64_t _HTTPUpdateExtraData(uint64_t a1, void *__src, size_t __len)
{
  if (__len)
  {
    long long v6 = *(void **)(a1 + 232);
    if (*(void *)(a1 + 240) == __len)
    {
LABEL_5:
      memmove(v6, __src, __len);
      uint64_t result = 0;
      *(void *)(a1 + 240) = __len;
      return result;
    }
    long long v6 = malloc_type_realloc(v6, __len, 0xB11B9485uLL);
    if (v6)
    {
      *(void *)(a1 + 232) = v6;
      goto LABEL_5;
    }
    return 4294960568;
  }
  else
  {
    uint64_t v8 = *(void **)(a1 + 232);
    if (v8)
    {
      free(v8);
      *(void *)(a1 + 232) = 0;
    }
    uint64_t result = 0;
    *(void *)(a1 + 240) = 0;
  }
  return result;
}

void _HTTPClientTimerFiredHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t _HTTPClientSocketEventsHandler(void *a1)
{
  uint64_t result = a1[27];
  if (!result) {
    return result;
  }
  uintptr_t data = dispatch_source_get_data((dispatch_source_t)result);
  uint64_t result = a1[12];
  if (*(int *)result <= 50)
  {
    if (*(_DWORD *)result == -1)
    {
      uint64_t result = _LogCategory_Initialize(result, 0x32u);
      if (!result) {
        goto LABEL_6;
      }
      uint64_t result = a1[12];
    }
    uint64_t result = LogPrintF(result, (uint64_t)"void _HTTPClientSocketEventsHandler(void *)", 0x32u, (uint64_t)"Socket events: raw 0x%llX, flags %#{flags}", v3, v4, v5, v6, data);
  }
LABEL_6:
  if ((data >> 4) & 0x800 | (((data >> 8) & 1) << 10))
  {
    uint64_t v8 = (uint64_t (*)(void, uint64_t))a1[8];
    if (v8)
    {
      uint64_t v9 = a1[4];
      return v8((data >> 4) & 0x800 | (((data >> 8) & 1) << 10), v9);
    }
  }
  return result;
}

uint64_t _HTTPClientWriteHandler(uint64_t a1)
{
  dispatch_suspend(*(dispatch_object_t *)(a1 + 200));
  *(unsigned char *)(a1 + 208) = 1;
  uint64_t v2 = *(void *)(a1 + 536);
  if (v2)
  {
    int v3 = *(_DWORD *)(v2 + 9644);
    if (v3 >= 1)
    {
      uint64_t v4 = *(NSObject **)(a1 + 224);
      if (v4)
      {
        dispatch_time_t v5 = dispatch_time(0, 1000000000 * v3);
        dispatch_source_set_timer(v4, v5, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
      }
    }
  }
  return _HTTPClientRunStateMachine((CFTypeRef)a1);
}

void _HTTPClientCancelHandler(_DWORD *cf)
{
  int v2 = cf[45] - 1;
  cf[45] = v2;
  if (!v2)
  {
    int v3 = (void (*)(uint64_t, void, void, void))*((void *)cf + 63);
    uint64_t v4 = cf[44];
    if (v3)
    {
      v3(v4, *((void *)cf + 64), *((void *)cf + 65), *((void *)cf + 66));
LABEL_4:
      cf[44] = -1;
      goto LABEL_5;
    }
    if ((v4 & 0x80000000) == 0)
    {
      if (close(v4) && *__error()) {
        __error();
      }
      goto LABEL_4;
    }
  }
LABEL_5:
  CFRelease(cf);
}

uint64_t _HTTPClientReadHandler(uint64_t a1)
{
  dispatch_suspend(*(dispatch_object_t *)(a1 + 184));
  *(unsigned char *)(a1 + 192) = 1;
  uint64_t v2 = *(void *)(a1 + 536);
  if (v2)
  {
    int v3 = *(_DWORD *)(v2 + 9644);
    if (v3 >= 1)
    {
      uint64_t v4 = *(NSObject **)(a1 + 224);
      if (v4)
      {
        dispatch_time_t v5 = dispatch_time(0, 1000000000 * v3);
        dispatch_source_set_timer(v4, v5, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
      }
    }
  }
  if ((*(unsigned char *)(a1 + 84) & 0x10) != 0 && !v2 && !*(_DWORD *)(a1 + 164)) {
    *(_DWORD *)(a1 + 164) = 7;
  }
  return _HTTPClientRunStateMachine((CFTypeRef)a1);
}

uint64_t _HTTPClientSendBinaryCompletion(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(a1 + 9704))(*(unsigned int *)(a1 + 9648), *(void *)(a1 + 9672));
}

uint64_t HTTPClientSendMessageSync(dispatch_queue_t *a1, uint64_t a2)
{
  dispatch_semaphore_t v4 = dispatch_semaphore_create(0);
  if (!v4) {
    return 4294960568;
  }
  uint64_t v11 = v4;
  *(void *)(a2 + 9664) = v4;
  *(void *)(a2 + 9712) = _HTTPClientSendMessageSyncCompletion;
  uint64_t v12 = HTTPClientSendMessage(a1, a2, v5, v6, v7, v8, v9, v10);
  if (!v12)
  {
    dispatch_semaphore_wait(v11, 0xFFFFFFFFFFFFFFFFLL);
    uint64_t v12 = *(unsigned int *)(a2 + 9648);
    if (!v12)
    {
      int v13 = *(_DWORD *)(a2 + 8456);
      unsigned int v14 = v13 - 200;
      unsigned int v15 = v13 + 200000;
      if (v14 >= 0x64) {
        uint64_t v12 = v15;
      }
      else {
        uint64_t v12 = 0;
      }
    }
  }
  dispatch_release(v11);
  return v12;
}

intptr_t _HTTPClientSendMessageSyncCompletion(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 9664));
}

uint64_t _HTTPMessageGetTypeID()
{
  uint64_t result = _CFRuntimeRegisterClass();
  gHTTPMessageCFTypeID TypeID = result;
  return result;
}

void _HTTPMessageFinalize(void *a1)
{
  HTTPMessageReset((uint64_t)a1);
  uint64_t v2 = (void *)a1[1195];
  if (v2)
  {
    free(v2);
    a1[1195] = 0;
  }
  int v3 = (void *)a1[1196];
  if (v3)
  {
    free(v3);
    a1[1196] = 0;
  }
  a1[1197] = 0;
  dispatch_semaphore_t v4 = (const void *)a1[1215];
  if (v4)
  {
    _Block_release(v4);
    a1[1215] = 0;
  }
  uint64_t v5 = (void *)a1[1218];
  if (v5)
  {
    free(v5);
    a1[1218] = 0;
  }
}

int *HTTPMessageReset(uint64_t a1)
{
  uint64_t v2 = a1 + 8504;
  *(void *)(a1 + 8216) = 0;
  *(unsigned char *)(a1 + 8504) = 0;
  *(_DWORD *)(a1 + 8508) = 0;
  *(void *)(a1 + 8520) = a1 + 8552;
  *(void *)(a1 + 8528) = 0;
  *(void *)(a1 + 8544) = 0;
  int v3 = *(void **)(a1 + 9552);
  if (v3)
  {
    free(v3);
    *(void *)(a1 + 9552) = 0;
  }
  *(void *)(a1 + 9632) = -1;
  if (*(unsigned char *)(v2 + 1228))
  {
    int v4 = *(_DWORD *)(a1 + 9728);
    if ((v4 & 0x80000000) == 0 && close(v4) && *__error()) {
      __error();
    }
  }
  *(_DWORD *)(a1 + 9728) = -1;
  *(unsigned char *)(v2 + 1228) = 0;
  uint64_t result = (int *)*(unsigned int *)(a1 + 9752);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = (int *)close((int)result);
    if (result)
    {
      uint64_t result = __error();
      if (*result) {
        uint64_t result = __error();
      }
    }
    *(_DWORD *)(a1 + 9752) = -1;
  }
  return result;
}

uint64_t HTTPMessageCreate(uint64_t *a1)
{
  if (gHTTPMessageInitOnce != -1) {
    dispatch_once_f(&gHTTPMessageInitOnce, 0, (dispatch_function_t)_HTTPMessageGetTypeID);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance) {
    return 4294960568;
  }
  uint64_t v3 = Instance;
  bzero((void *)(Instance + 16), 0x2620uLL);
  *(_DWORD *)(v3 + 9728) = -1;
  *(_DWORD *)(v3 + 9752) = -1;
  *(void *)(v3 + 8536) = 16000000;
  HTTPMessageReset(v3);
  uint64_t result = 0;
  *a1 = v3;
  return result;
}

void *HTTPMessageCopy(uint64_t a1, _DWORD *a2)
{
  CFTypeRef cf = 0;
  int v4 = HTTPMessageCreate((uint64_t *)&cf);
  uint64_t v5 = cf;
  if (!v4)
  {
    memcpy((char *)cf + 24, (const void *)(a1 + 24), *(void *)(a1 + 8216));
    v5[1027] = *(void *)(a1 + 8216);
    int v6 = HTTPHeader_Parse((uint64_t)(v5 + 3));
    if (!v6)
    {
      int v6 = HTTPMessageSetBodyLength(v5, *(void *)(a1 + 8528));
      if (!v6)
      {
        memcpy((void *)v5[1065], *(const void **)(a1 + 8520), *(void *)(a1 + 8528));
        if (!a2) {
          return v5;
        }
        goto LABEL_8;
      }
    }
    goto LABEL_6;
  }
  int v6 = v4;
  if (cf)
  {
LABEL_6:
    CFRelease(v5);
    uint64_t v5 = 0;
  }
  if (a2) {
LABEL_8:
  }
    *a2 = v6;
  return v5;
}

uint64_t HTTPMessageSetBodyLength(void *a1, size_t size)
{
  int v4 = (void *)a1[1194];
  if (v4)
  {
    free(v4);
    a1[1194] = 0;
  }
  if (size <= 0x3E8)
  {
    uint64_t v5 = a1 + 1069;
LABEL_6:
    uint64_t result = 0;
    a1[1065] = v5;
    a1[1066] = size;
    return result;
  }
  uint64_t v5 = malloc_type_malloc(size, 0xB77DEE7BuLL);
  a1[1194] = v5;
  if (v5) {
    goto LABEL_6;
  }
  return 4294960568;
}

uint64_t HTTPMessageInitRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return HTTPHeader_InitRequestV(a1 + 24, a2, a3, a4, (uint64_t)&a9, a6, a7, a8);
}

uint64_t HTTPMessageInitResponse(uint64_t a1, const char *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return HTTPHeader_InitResponseEx(a1 + 24, a2, a3, 0, a4, a6, a7, a8);
}

uint64_t HTTPMessageGetHeaderField(uint64_t a1, char *a2, const char **a3, size_t *a4, const char **a5, void *a6)
{
  return HTTPGetHeaderField((char *)(a1 + 24), *(void *)(a1 + 8216), a2, a3, a4, a5, a6, 0);
}

uint64_t HTTPMessageSetHeaderField(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return HTTPHeader_SetFieldV((char *)(a1 + 24), a2, a3, &a9);
}

uint64_t HTTPMessageSetHeaderField_safe(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return HTTPHeader_SetFieldV((char *)(a1 + 24), a2, a3, &a9);
}

uint64_t HTTPMessageReadMessageEx(uint64_t a1, uint64_t (*a2)(void *, size_t, unint64_t *, uint64_t), uint64_t a3)
{
  int v6 = (char *)(a1 + 24);
  size_t v63 = 0;
  uint64_t v7 = (unsigned char *)(a1 + 8504);
  if (*(unsigned char *)(a1 + 8504)) {
    goto LABEL_2;
  }
  uint64_t result = HTTPReadHeader(a1 + 24, a2, a3);
  if (result) {
    return result;
  }
  *uint64_t v7 = 1;
  if (*(void *)(a1 + 9744))
  {
    int v36 = *(_DWORD *)(a1 + 9752);
    if ((v36 & 0x80000000) == 0)
    {
      if (close(v36) && *__error()) {
        __error();
      }
      *(_DWORD *)(a1 + 9752) = -1;
    }
    while (1)
    {
      int v37 = open(*(const char **)(a1 + 9744), 1538, 384);
      *(_DWORD *)(a1 + 9752) = v37;
      if ((v37 & 0x80000000) == 0) {
        break;
      }
      if (!*__error()) {
        return 4294960596;
      }
      uint64_t result = *__error();
      if (result != 4)
      {
        if (result) {
          return result;
        }
        break;
      }
    }
  }
  size_t v38 = *(void *)(a1 + 8216);
  if (v38 == -1) {
    size_t v38 = strlen(v6);
  }
  int64_t v66 = 0;
  uint64_t v67 = 0;
  LOBYTE(__nbyte) = 0;
  int v39 = HTTPGetHeaderField(v6, v38, "Transfer-Encoding", 0, 0, (const char **)&v67, &v66, 0);
  if (v39)
  {
LABEL_115:
    *(_DWORD *)(a1 + 8508) = v39 == 0;
    size_t v52 = *(void *)(a1 + 8488);
    if ((*(_DWORD *)(a1 + 9752) & 0x80000000) != 0)
    {
      if (v52 > *(void *)(a1 + 8536)) {
        return 4294960553;
      }
      size_t v63 = *(void *)(a1 + 8488);
    }
    else
    {
      *(void *)(a1 + 9760) = v52;
      if (v52 >= 0x100000) {
        size_t v52 = 0x100000;
      }
      size_t v63 = v52;
      *(void *)(a1 + 8536) = v52;
    }
    uint64_t result = HTTPMessageSetBodyLength((void *)a1, v52);
    if (!result) {
      goto LABEL_2;
    }
    return result;
  }
  if (v66 < 1) {
    goto LABEL_114;
  }
  uint64_t v40 = v67;
  uint64_t v41 = &v67[v66];
  long long v42 = &v67[v66];
  uint64_t v43 = MEMORY[0x1E4F14390];
  while (2)
  {
    if (v40 >= v41) {
      goto LABEL_85;
    }
    int64_t v44 = v42 - v40;
    uint64_t v45 = v40 + 1;
    while (1)
    {
      uint64_t v46 = *(v45 - 1);
      if (*(v45 - 1) < 0) {
        break;
      }
      if ((*(_DWORD *)(v43 + 4 * v46 + 60) & 0x4000) == 0) {
        goto LABEL_84;
      }
LABEL_82:
      uint64_t v67 = v45++;
      if (!--v44)
      {
        uint64_t v40 = v42;
        goto LABEL_85;
      }
    }
    if (__maskrune(v46, 0x4000uLL)) {
      goto LABEL_82;
    }
LABEL_84:
    uint64_t v40 = v67;
LABEL_85:
    long long v47 = v40;
    if (v40 < v41)
    {
      long long v47 = v40;
      do
      {
        LOBYTE(__nbyte) = *v47;
        if (__nbyte == 44 || __nbyte == 59) {
          break;
        }
        if ((__nbyte & 0x80) != 0)
        {
          int v48 = __maskrune(__nbyte, 0x4000uLL);
          long long v47 = v67;
          if (v48) {
            break;
          }
        }
        else if ((*(_DWORD *)(v43 + 4 * __nbyte + 60) & 0x4000) != 0)
        {
          break;
        }
        uint64_t v67 = ++v47;
      }
      while (v47 < v41);
    }
    if (strnicmpx((unsigned __int8 *)v40, v47 - v40, "chunked"))
    {
      uint64_t v40 = v67;
      if (v67 < v41)
      {
        uint64_t v49 = v42 - v67;
        CFMutableStringRef v50 = v67 + 1;
        while (1)
        {
          uint64_t v51 = *(v50 - 1);
          if (*(v50 - 1) < 0)
          {
            if (!__maskrune(v51, 0x4000uLL))
            {
LABEL_103:
              uint64_t v40 = v67;
              break;
            }
          }
          else if ((*(_DWORD *)(v43 + 4 * v51 + 60) & 0x4000) == 0)
          {
            goto LABEL_103;
          }
          uint64_t v67 = v50++;
          if (!--v49)
          {
            uint64_t v40 = v42;
            break;
          }
        }
      }
      if (v40 < v41 && *v40 == 59)
      {
        uint64_t v67 = v40 + 1;
        while (!HTTPParseParameter(v67, v41, 0, 0, 0, 0, (char *)&__nbyte, &v67)
             && __nbyte == 59)
          ;
        uint64_t v40 = v67;
      }
      if (v40 < v41 && *v40 == 44) {
        uint64_t v67 = ++v40;
      }
      if (v40 >= v41)
      {
LABEL_114:
        int v39 = -6727;
        goto LABEL_115;
      }
      continue;
    }
    break;
  }
  *(_DWORD *)(a1 + 8508) = 1;
LABEL_2:
  int v8 = *(_DWORD *)(a1 + 8508);
  if (v8)
  {
    int64_t v66 = 0;
    uint64_t v67 = 0;
    size_t __nbyte = 0;
    while (1)
    {
      switch(v8)
      {
        case 1:
          unint64_t v64 = 0;
          uint64_t result = HTTPReadLine(v6, (uint64_t (*)(void))a2, a3, &v67, &v66);
          if (result) {
            return result;
          }
          if (SNScanF(v67, v66, "%llx", v10, v11, v12, v13, v14, (int)&v64) != 1) {
            return 4294960554;
          }
          unint64_t v15 = v64;
          if (v64)
          {
            if ((*(_DWORD *)(a1 + 9752) & 0x80000000) != 0)
            {
              unint64_t v31 = *(void *)(a1 + 8528);
              size_t v32 = v31 + v64;
              if (v31 + v64 <= v31) {
                return 4294960553;
              }
              uint64_t v33 = (void *)(a1 + 8552);
              if (v32 >= 0x3E9)
              {
                uintptr_t v34 = malloc_type_realloc(*(void **)(a1 + 9552), v32, 0x97B3A75AuLL);
                if (!v34) {
                  return 4294960568;
                }
                uint64_t v33 = v34;
                if (!*(void *)(a1 + 9552))
                {
                  size_t v35 = *(void *)(a1 + 8544);
                  if (v35) {
                    memmove(v34, *(const void **)(a1 + 8520), v35);
                  }
                }
                *(void *)(a1 + 9552) = v33;
              }
              *(void *)(a1 + 8520) = v33;
              *(void *)(a1 + 8528) = v32;
            }
            else
            {
              if (v64 >= 0x100000) {
                size_t v16 = 0x100000;
              }
              else {
                size_t v16 = v64;
              }
              if (v16 > *(void *)(a1 + 8536))
              {
                uint64_t result = HTTPMessageSetBodyLength((void *)a1, v16);
                if (result) {
                  return result;
                }
                *(void *)(a1 + 8536) = v16;
              }
              *(void *)(a1 + 9760) = v15;
            }
            int v17 = 2;
          }
          else
          {
            int v17 = 4;
          }
LABEL_58:
          *(_DWORD *)(a1 + 8508) = v17;
LABEL_59:
          int v8 = *(_DWORD *)(a1 + 8508);
          break;
        case 2:
          int v18 = *(_DWORD *)(a1 + 9752);
          size_t v19 = *(void *)(a1 + 8232);
          if (v18 < 0)
          {
            size_t v26 = *(void *)(a1 + 8544);
            unint64_t v27 = *(void *)(a1 + 8528);
            if (v19)
            {
              size_t v28 = v27 - v26;
              if (v28 >= v19) {
                size_t v29 = *(void *)(a1 + 8232);
              }
              else {
                size_t v29 = v28;
              }
              size_t __nbyte = v29;
              memmove((void *)(*(void *)(a1 + 8520) + v26), *(const void **)(a1 + 8224), v29);
              size_t v30 = __nbyte;
              *(void *)(a1 + 8224) += __nbyte;
              *(void *)(a1 + 8232) -= v30;
              size_t v26 = *(void *)(a1 + 8544) + v30;
              *(void *)(a1 + 8544) = v26;
              unint64_t v27 = *(void *)(a1 + 8528);
            }
            size_t __nbyte = v26;
            if (v27 > v26)
            {
              uint64_t result = a2((void *)(*(void *)(a1 + 8520) + v26), v27 - v26, &__nbyte, a3);
              if (result) {
                return result;
              }
              size_t v26 = *(void *)(a1 + 8544) + __nbyte;
              *(void *)(a1 + 8544) = v26;
              unint64_t v27 = *(void *)(a1 + 8528);
            }
            if (v26 == v27) {
              goto LABEL_47;
            }
          }
          else
          {
            size_t v20 = *(void *)(a1 + 9760);
            if (v19)
            {
              if (!v20) {
                goto LABEL_47;
              }
              if (v19 >= v20) {
                size_t v21 = *(void *)(a1 + 9760);
              }
              else {
                size_t v21 = *(void *)(a1 + 8232);
              }
              size_t __nbyte = v21;
              uint64_t result = FDWriteAll(v18, *(char **)(a1 + 8224), v21);
              if (result) {
                return result;
              }
              size_t v22 = __nbyte;
              *(void *)(a1 + 8224) += __nbyte;
              *(void *)(a1 + 8232) -= v22;
              size_t v20 = *(void *)(a1 + 9760) - v22;
              *(void *)(a1 + 9760) = v20;
            }
            if (!v20) {
              goto LABEL_47;
            }
            if (*(void *)(a1 + 8536) >= v20) {
              size_t v23 = v20;
            }
            else {
              size_t v23 = *(void *)(a1 + 8536);
            }
            size_t __nbyte = v23;
            uint64_t result = ((uint64_t (*)(void))a2)(*(void *)(a1 + 8520));
            if (result) {
              return result;
            }
            uint64_t result = FDWriteAll(*(_DWORD *)(a1 + 9752), *(char **)(a1 + 8520), __nbyte);
            if (result) {
              return result;
            }
            uint64_t v24 = *(void *)(a1 + 9760);
            BOOL v25 = v24 == __nbyte;
            *(void *)(a1 + 9760) = v24 - __nbyte;
            if (v25)
            {
LABEL_47:
              *(_DWORD *)(a1 + 8508) = 3;
              goto LABEL_59;
            }
          }
          goto LABEL_59;
        case 3:
          uint64_t result = HTTPReadLine(v6, (uint64_t (*)(void))a2, a3, &v67, &v66);
          if (result) {
            return result;
          }
          if (v66) {
            return 4294960554;
          }
          *(_DWORD *)(a1 + 8508) = 1;
          goto LABEL_59;
        case 4:
          uint64_t result = HTTPReadLine(v6, (uint64_t (*)(void))a2, a3, &v67, &v66);
          if (result) {
            return result;
          }
          if (v66) {
            goto LABEL_59;
          }
          int v17 = 5;
          goto LABEL_58;
        case 5:
          goto LABEL_135;
        default:
          return 4294960587;
      }
    }
  }
  int v53 = *(_DWORD *)(a1 + 9752);
  size_t v54 = *(void *)(a1 + 8232);
  if (v53 < 0)
  {
    if (v54)
    {
      if (v54 >= *(void *)(a1 + 8528)) {
        size_t v60 = *(void *)(a1 + 8528);
      }
      else {
        size_t v60 = *(void *)(a1 + 8232);
      }
      memmove(*(void **)(a1 + 8520), *(const void **)(a1 + 8224), v60);
      *(void *)(a1 + 8224) += v60;
      *(void *)(a1 + 8232) -= v60;
      size_t v61 = *(void *)(a1 + 8544) + v60;
      *(void *)(a1 + 8544) = v61;
    }
    else
    {
      size_t v61 = *(void *)(a1 + 8544);
    }
    size_t v63 = v61;
    unint64_t v62 = *(void *)(a1 + 8528);
    if (v62 > v61)
    {
      uint64_t result = a2((void *)(*(void *)(a1 + 8520) + v61), v62 - v61, &v63, a3);
      if (result) {
        return result;
      }
      size_t v61 = *(void *)(a1 + 8544) + v63;
      *(void *)(a1 + 8544) = v61;
      unint64_t v62 = *(void *)(a1 + 8528);
    }
    if (v61 == v62) {
      return 0;
    }
    else {
      return 35;
    }
  }
  else
  {
    size_t v55 = *(void *)(a1 + 9760);
    if (!v54) {
      goto LABEL_127;
    }
    if (!v55) {
      goto LABEL_135;
    }
    if (v54 >= v55) {
      size_t v56 = *(void *)(a1 + 9760);
    }
    else {
      size_t v56 = *(void *)(a1 + 8232);
    }
    size_t v63 = v56;
    uint64_t result = FDWriteAll(v53, *(char **)(a1 + 8224), v56);
    if (result) {
      return result;
    }
    *(void *)(a1 + 8224) += v56;
    *(void *)(a1 + 8232) -= v56;
    size_t v55 = *(void *)(a1 + 9760) - v56;
    *(void *)(a1 + 9760) = v55;
LABEL_127:
    if (v55)
    {
      if (*(void *)(a1 + 8536) >= v55) {
        size_t v57 = v55;
      }
      else {
        size_t v57 = *(void *)(a1 + 8536);
      }
      size_t v63 = v57;
      uint64_t result = ((uint64_t (*)(void))a2)(*(void *)(a1 + 8520));
      if (!result)
      {
        uint64_t result = FDWriteAll(*(_DWORD *)(a1 + 9752), *(char **)(a1 + 8520), v63);
        if (!result)
        {
          uint64_t v58 = *(void *)(a1 + 9760);
          BOOL v25 = v58 == v63;
          *(void *)(a1 + 9760) = v58 - v63;
          if (!v25) {
            return 35;
          }
          goto LABEL_135;
        }
      }
    }
    else
    {
LABEL_135:
      int v59 = *(_DWORD *)(a1 + 9752);
      if (v59 < 0)
      {
        return 0;
      }
      else
      {
        if (close(v59) && *__error()) {
          __error();
        }
        uint64_t result = 0;
        *(_DWORD *)(a1 + 9752) = -1;
      }
    }
  }
  return result;
}

uint64_t HTTPMessageWriteMessage(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6 = a1 + 9616;
  uint64_t v7 = a1 + 9624;
  uint64_t result = a2(a1 + 9616, a1 + 9624);
  if (result) {
    return result;
  }
  if ((*(_DWORD *)(a1 + 9728) & 0x80000000) != 0) {
    return 0;
  }
  while (2)
  {
    uint64_t v9 = *(void *)(a1 + 9736);
    if (v9 < 1) {
      return 0;
    }
    if (v9 >= *(void *)(a1 + 8536)) {
      size_t v10 = *(void *)(a1 + 8536);
    }
    else {
      size_t v10 = *(void *)(a1 + 9736);
    }
    while (1)
    {
      ssize_t v11 = read(*(_DWORD *)(a1 + 9728), *(void **)(a1 + 8520), v10);
      if (v11 > 0) {
        break;
      }
      if (!*__error()) {
        return 4294960596;
      }
      uint64_t result = *__error();
      if (result != 4)
      {
        if (result) {
          return result;
        }
        break;
      }
    }
    *(void *)(a1 + 9736) -= v11;
    *(void *)(a1 + 9584) = *(void *)(a1 + 8520);
    *(void *)(a1 + 9592) = v11;
    *(_DWORD *)(a1 + 9624) = 1;
    *(void *)(a1 + 9616) = a1 + 9584;
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))a2)(v6, v7, a3);
    if (!result) {
      continue;
    }
    break;
  }
  return result;
}

uint64_t HTTPMessageSetBody(uint64_t a1, uint64_t a2, const void *a3, size_t size)
{
  uint64_t result = *(unsigned int *)(a1 + 8500);
  if (!result)
  {
    uint64_t result = HTTPMessageSetBodyLength((void *)a1, size);
    if (result)
    {
      if (!*(_DWORD *)(a1 + 8500)) {
        *(_DWORD *)(a1 + 8500) = result;
      }
    }
    else
    {
      if (a3)
      {
        uint64_t v14 = *(void **)(a1 + 8520);
        if (v14 != a3) {
          memmove(v14, a3, size);
        }
      }
      HTTPHeader_SetField((char *)(a1 + 24), "Content-Length", (uint64_t)"%zu", v9, v10, v11, v12, v13, size);
      if (a2) {
        HTTPHeader_SetField((char *)(a1 + 24), "Content-Type", (uint64_t)"%s", v15, v16, v17, v18, v19, a2);
      }
      return 0;
    }
  }
  return result;
}

uint64_t HTTPMessageSetBodyFileDescriptor(uint64_t a1, int a2, unint64_t a3, uint64_t a4, char a5)
{
  memset(&v23, 0, sizeof(v23));
  if (fstat(a2, &v23))
  {
    if (!*__error()) {
      return 4294960596;
    }
    uint64_t result = *__error();
    if (result) {
      return result;
    }
  }
  if (a3 || (v23.st_mode & 0xF000) == 0x8000)
  {
    off_t v16 = lseek(a2, a3, (a3 >> 62) & 2);
    if (v16 == -1)
    {
      if (!*__error()) {
        return 4294960596;
      }
      uint64_t result = *__error();
      if (result) {
        return result;
      }
      off_t v16 = -1;
    }
  }
  else
  {
    off_t v16 = 0;
  }
  if (a4 >= 0) {
    uint64_t v17 = a4;
  }
  else {
    uint64_t v17 = v23.st_size - v16;
  }
  HTTPHeader_SetField((char *)(a1 + 24), "Content-Length", (uint64_t)"%lld", v10, v11, v12, v13, v14, v17);
  if (v17 >= 0x100000) {
    size_t v18 = 0x100000;
  }
  else {
    size_t v18 = v17;
  }
  if (v18 > 0x3E8)
  {
    size_t v20 = malloc_type_realloc(*(void **)(a1 + 9552), v18, 0xA0A49243uLL);
    if (!v20) {
      return 4294960568;
    }
    uint64_t v19 = v20;
    *(void *)(a1 + 9552) = v20;
  }
  else
  {
    uint64_t v19 = (void *)(a1 + 8552);
  }
  *(void *)(a1 + 8520) = v19;
  *(void *)(a1 + 8536) = v18;
  if (v18)
  {
    ssize_t v21 = read(a2, v19, v18);
    if (v21 > 0)
    {
LABEL_25:
      *(void *)(a1 + 8528) = v21;
      v17 -= v21;
      goto LABEL_28;
    }
    if (*__error())
    {
      uint64_t result = *__error();
      if (result) {
        return result;
      }
      goto LABEL_25;
    }
    return 4294960596;
  }
  *(void *)(a1 + 8528) = 0;
LABEL_28:
  if (*(unsigned char *)(a1 + 9732))
  {
    int v22 = *(_DWORD *)(a1 + 9728);
    if ((v22 & 0x80000000) == 0)
    {
      if (close(v22))
      {
        if (*__error()) {
          __error();
        }
      }
    }
  }
  uint64_t result = 0;
  *(_DWORD *)(a1 + 9728) = a2;
  *(unsigned char *)(a1 + 9732) = a5;
  *(void *)(a1 + 9736) = v17;
  return result;
}

uint64_t HTTPMessageSetBodyFilePath(uint64_t a1, char *a2, unint64_t a3, uint64_t a4)
{
  do
  {
    int v8 = open(a2, 0);
    if ((v8 & 0x80000000) == 0)
    {
      uint64_t v9 = HTTPMessageSetBodyFileDescriptor(a1, v8, a3, a4, 1);
      if (v9 && close(v8) && *__error()) {
        __error();
      }
      return v9;
    }
    if (!*__error()) {
      return 4294960596;
    }
    uint64_t v9 = *__error();
  }
  while (v9 == 4);
  if (v9) {
    return v9;
  }
  return HTTPMessageSetBodyFileDescriptor(a1, v8, a3, a4, 1);
}

void HTTPMessageSetCompletionBlock(uint64_t a1, void *aBlock)
{
  if (aBlock) {
    int v4 = _Block_copy(aBlock);
  }
  else {
    int v4 = 0;
  }
  uint64_t v5 = *(const void **)(a1 + 9720);
  if (v5) {
    _Block_release(v5);
  }
  *(void *)(a1 + 9720) = v4;
  if (aBlock) {
    uint64_t v6 = _HTTPMessageCompletionHandler;
  }
  else {
    uint64_t v6 = 0;
  }
  *(void *)(a1 + 9712) = v6;
}

void _HTTPMessageCompletionHandler(uint64_t a1)
{
  uint64_t v1 = *(void (***)(void, void))(a1 + 9720);
  *(void *)(a1 + 9720) = 0;
  v1[2](v1, a1);
  _Block_release(v1);
}

uint64_t HTTPMessageSetReceiveFilePath(uint64_t a1, char *__s1)
{
  uint64_t v3 = strdup(__s1);
  if (!v3) {
    return 4294960568;
  }
  int v4 = v3;
  uint64_t v5 = *(void **)(a1 + 9744);
  if (v5) {
    free(v5);
  }
  *(void *)(a1 + 9744) = v4;
  int v6 = *(_DWORD *)(a1 + 9752);
  if (v6 < 0) {
    return 0;
  }
  if (close(v6))
  {
    if (*__error()) {
      __error();
    }
  }
  uint64_t result = 0;
  *(_DWORD *)(a1 + 9752) = -1;
  return result;
}

CFMutableDictionaryRef HTTPMessageCreateDictionary(uint64_t a1, char a2, int *a3)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    if ((a2 & 2) != 0)
    {
      CFIndex v15 = 0;
      off_t v16 = 0;
      CFIndex v13 = 0;
      uint64_t v14 = 0;
      uint64_t v9 = (char *)(a1 + 24);
      uint64_t v17 = (char *)(a1 + 24);
      uint64_t v10 = a1 + 24 + *(void *)(a1 + 8216);
      while (!HTTPGetHeaderField(v9, v10 - (void)v9, 0, (const char **)&v16, (size_t *)&v15, &v14, &v13, &v17))
      {
        CFStringRef v11 = CFStringCreateWithBytes(0, v16, v15, 0x8000100u, 0);
        if (!v11)
        {
          CFRelease(Mutable);
          CFMutableDictionaryRef Mutable = 0;
          int v7 = -6742;
          goto LABEL_4;
        }
        CFStringRef v12 = v11;
        CFDictionarySetCString(Mutable, v11, v14, v13);
        CFRelease(v12);
        uint64_t v9 = v17;
      }
    }
    int v7 = 0;
  }
  else
  {
    int v7 = -6728;
  }
LABEL_4:
  if (a3) {
    *a3 = v7;
  }
  return Mutable;
}

uint64_t HTTPMessageGetOrCopyFormVariable(unint64_t *a1, unsigned __int8 *a2, void *a3, void *a4, char **a5)
{
  uint64_t result = URLGetOrCopyVariable(a1[1045], (unsigned char *)(a1[1045] + a1[1046]), a2, a3, a4, a5, 0);
  if (result)
  {
    unint64_t v11 = a1[1065];
    CFStringRef v12 = (unsigned char *)(v11 + a1[1066]);
    return URLGetOrCopyVariable(v11, v12, a2, a3, a4, a5, 0);
  }
  return result;
}

uint64_t _HTTPServerGetTypeID()
{
  uint64_t result = _CFRuntimeRegisterClass();
  gHTTPServerCFTypeID TypeID = result;
  return result;
}

void _HTTPServerFinalize(void *a1)
{
  uint64_t v2 = (void (*)(void *, void))a1[17];
  if (v2) {
    v2(a1, a1[15]);
  }
  uint64_t v3 = a1[2];
  if (v3)
  {
    dispatch_release(v3);
    a1[2] = 0;
  }
  int v4 = (void *)a1[10];
  if (v4)
  {
    free(v4);
    a1[10] = 0;
  }
  uint64_t v5 = (void *)a1[11];
  if (v5)
  {
    free(v5);
    a1[11] = 0;
  }
}

uint64_t HTTPServerCreate(void *a1, _OWORD *a2)
{
  if (gHTTPServerInitOnce != -1) {
    dispatch_once_f(&gHTTPServerInitOnce, 0, (dispatch_function_t)_HTTPServerGetTypeID);
  }
  uint64_t Instance = (_OWORD *)_CFRuntimeCreateInstance();
  if (!Instance) {
    return 4294960568;
  }
  uint64_t v5 = Instance;
  Instance[14] = 0u;
  Instance[15] = 0u;
  Instance[12] = 0u;
  Instance[13] = 0u;
  Instance[10] = 0u;
  Instance[11] = 0u;
  Instance[8] = 0u;
  Instance[9] = 0u;
  Instance[6] = 0u;
  Instance[7] = 0u;
  Instance[4] = 0u;
  Instance[5] = 0u;
  Instance[2] = 0u;
  Instance[3] = 0u;
  Instance[1] = 0u;
  HTTPServerSetDispatchQueue((uint64_t)Instance, 0);
  *((void *)v5 + 3) = &gLogCategory_HTTPServerCore;
  long long v7 = a2[1];
  long long v6 = a2[2];
  *(_OWORD *)((char *)v5 + 120) = *a2;
  *(_OWORD *)((char *)v5 + 152) = v6;
  *(_OWORD *)((char *)v5 + 136) = v7;
  long long v8 = a2[3];
  long long v9 = a2[4];
  long long v10 = a2[5];
  *(_OWORD *)((char *)v5 + 216) = a2[6];
  *(_OWORD *)((char *)v5 + 200) = v10;
  *(_OWORD *)((char *)v5 + 184) = v9;
  *(_OWORD *)((char *)v5 + 168) = v8;
  unint64_t v11 = (uint64_t (*)(_OWORD *, void))*((void *)v5 + 16);
  if (v11 && (uint64_t v12 = v11(v5, *((void *)v5 + 15)), v12))
  {
    uint64_t v13 = v12;
    CFRelease(v5);
  }
  else
  {
    uint64_t v13 = 0;
    *a1 = v5;
  }
  return v13;
}

void HTTPServerSetDispatchQueue(uint64_t a1, NSObject *a2)
{
  if (a2) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = MEMORY[0x1E4F14428];
  }
  dispatch_retain(v3);
  int v4 = *(NSObject **)(a1 + 16);
  if (v4) {
    dispatch_release(v4);
  }
  *(void *)(a1 + 16) = v3;
}

uint64_t HTTPServerSetLogging(uint64_t result, uint64_t a2)
{
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t _HTTPServerControl(uint64_t a1, uint64_t a2, CFTypeRef cf1, uint64_t a4, uint64_t a5)
{
  if (CFEqual(cf1, @"startServer"))
  {
    *(void *)((char *)&v30 + 4) = -1;
    if (*(unsigned char *)(a1 + 240))
    {
      LODWORD(v30) = 16777343;
      uint64_t v10 = ServerSocketOpenEx2(2, 1, 6, &v30, 0, *(_DWORD *)(a1 + 236), (unsigned int *)(a1 + 48), -1, 0, (int *)&v30 + 2);
    }
    else
    {
      uint64_t v10 = ServerSocketPairOpen(1, 6, *(_DWORD *)(a1 + 236), (int *)(a1 + 48), -1, (int *)&v30 + 2, (int *)&v30 + 1);
    }
    uint64_t v11 = v10;
    if (v10) {
      goto LABEL_8;
    }
    int v13 = DWORD2(v30);
    if ((DWORD2(v30) & 0x80000000) == 0)
    {
      if (*(_DWORD *)(a1 + 232)) {
        SocketSetP2P(SDWORD2(v30), 1);
      }
      uint64_t v14 = malloc_type_calloc(1uLL, 0x18uLL, 0x102004093CA8EA1uLL);
      if (!v14) {
        goto LABEL_44;
      }
      CFIndex v15 = v14;
      dispatch_source_t v16 = dispatch_source_create(MEMORY[0x1E4F14478], v13, 0, *(dispatch_queue_t *)(a1 + 16));
      if (!v16) {
        goto LABEL_40;
      }
      uint64_t v17 = v16;
      CFRetain((CFTypeRef)a1);
      *(void *)CFIndex v15 = v17;
      int v15[2] = v13;
      *((void *)v15 + 2) = a1;
      *(void *)(a1 + 32) = v15;
      dispatch_set_context(v17, v15);
      dispatch_source_set_event_handler_f(v17, (dispatch_function_t)_HTTPServerAcceptConnection);
      dispatch_source_set_cancel_handler_f(v17, (dispatch_function_t)_HTTPServerListenerCanceled);
      dispatch_resume(v17);
      DWORD2(v30) = -1;
    }
    int v18 = DWORD1(v30);
    if ((DWORD1(v30) & 0x80000000) != 0)
    {
LABEL_31:
      int v22 = *(uint64_t (**)(uint64_t, void, __CFString *, void, void, void))(a1 + 144);
      if (v22)
      {
        uint64_t v11 = v22(a1, 0, @"startServer", 0, 0, *(void *)(a1 + 120));
        if (v11) {
          goto LABEL_8;
        }
      }
      CFRetain((CFTypeRef)a1);
      *(unsigned char *)(a1 + 64) = 1;
      unint64_t v27 = *(int **)(a1 + 24);
      if (*v27 > 40) {
        goto LABEL_43;
      }
      if (*v27 == -1)
      {
        if (!_LogCategory_Initialize((uint64_t)v27, 0x28u)) {
          goto LABEL_43;
        }
        unint64_t v27 = *(int **)(a1 + 24);
      }
      LogPrintF((uint64_t)v27, (uint64_t)"OSStatus _HTTPServerStart(HTTPServerRef)", 0x28u, (uint64_t)"Listening on port %d\n", v23, v24, v25, v26, *(unsigned int *)(a1 + 48));
LABEL_43:
      uint64_t v11 = 0;
      goto LABEL_8;
    }
    if (*(_DWORD *)(a1 + 232)) {
      SocketSetP2P(SDWORD1(v30), 1);
    }
    uint64_t v19 = malloc_type_calloc(1uLL, 0x18uLL, 0x102004093CA8EA1uLL);
    if (v19)
    {
      CFIndex v15 = v19;
      dispatch_source_t v20 = dispatch_source_create(MEMORY[0x1E4F14478], v18, 0, *(dispatch_queue_t *)(a1 + 16));
      if (v20)
      {
        ssize_t v21 = v20;
        CFRetain((CFTypeRef)a1);
        *(void *)CFIndex v15 = v21;
        int v15[2] = v18;
        *((void *)v15 + 2) = a1;
        *(void *)(a1 + 40) = v15;
        dispatch_set_context(v21, v15);
        dispatch_source_set_event_handler_f(v21, (dispatch_function_t)_HTTPServerAcceptConnection);
        dispatch_source_set_cancel_handler_f(v21, (dispatch_function_t)_HTTPServerListenerCanceled);
        dispatch_resume(v21);
        DWORD1(v30) = -1;
        goto LABEL_31;
      }
LABEL_40:
      free(v15);
      uint64_t v11 = 4294960596;
      goto LABEL_8;
    }
LABEL_44:
    uint64_t v11 = 4294960568;
LABEL_8:
    if ((DWORD2(v30) & 0x80000000) == 0 && close(SDWORD2(v30)) && *__error()) {
      __error();
    }
    if ((DWORD1(v30) & 0x80000000) == 0 && close(SDWORD1(v30)) && *__error()) {
      __error();
    }
    if (v11) {
      _HTTPServerStop((CFTypeRef)a1);
    }
    return v11;
  }
  if (CFEqual(cf1, @"stopServer"))
  {
    _HTTPServerStop((CFTypeRef)a1);
    return 0;
  }
  size_t v28 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef, uint64_t, uint64_t, uint64_t))(a1 + 144);
  if (!v28) {
    return 4294960582;
  }
  uint64_t v29 = *(void *)(a1 + 120);
  return v28(a1, a2, cf1, a4, a5, v29);
}

void _HTTPServerStop(CFTypeRef cf)
{
  uint64_t v2 = *((void *)cf + 9);
  if (v2)
  {
    dispatch_source_cancel(*((dispatch_source_t *)cf + 9));
    dispatch_release(v2);
    *((void *)cf + 9) = 0;
  }
  uint64_t v3 = (dispatch_source_t *)*((void *)cf + 4);
  if (v3)
  {
    int v4 = *v3;
    if (*v3)
    {
      dispatch_source_cancel(*v3);
      dispatch_release(v4);
      **((void **)cf + 4) = 0;
    }
    *((void *)cf + 4) = 0;
  }
  uint64_t v5 = (dispatch_source_t *)*((void *)cf + 5);
  if (v5)
  {
    long long v6 = *v5;
    if (*v5)
    {
      dispatch_source_cancel(*v5);
      dispatch_release(v6);
      **((void **)cf + 5) = 0;
    }
    *((void *)cf + 5) = 0;
  }
  while (1)
  {
    uint64_t v7 = *((void *)cf + 7);
    if (!v7) {
      break;
    }
    _HTTPServerCloseConnection(v7);
  }
  if (*((unsigned char *)cf + 64))
  {
    long long v8 = (void (*)(CFTypeRef, void, __CFString *, void, void, void))*((void *)cf + 18);
    if (v8) {
      v8(cf, 0, @"stopServer", 0, 0, *((void *)cf + 15));
    }
    *((unsigned char *)cf + 64) = 0;
    CFRelease(cf);
  }
}

void _HTTPServerCloseConnection(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  int v4 = (void *)(v2 + 56);
  uint64_t v3 = *(void *)(v2 + 56);
  if (v3)
  {
    if (v3 == a1)
    {
LABEL_6:
      *int v4 = *(void *)(a1 + 16);
    }
    else
    {
      while (1)
      {
        uint64_t v5 = v3;
        uint64_t v3 = *(void *)(v3 + 16);
        if (!v3) {
          break;
        }
        if (v3 == a1)
        {
          int v4 = (void *)(v5 + 16);
          goto LABEL_6;
        }
      }
    }
  }
  HTTPConnectionStop(a1);
  if (*(unsigned char *)(a1 + 229))
  {
    if (!*(void *)(a1 + 376))
    {
      uint64_t v10 = *(int **)(v2 + 24);
      if (*v10 <= 30)
      {
        if (*v10 != -1)
        {
LABEL_11:
          LogPrintF((uint64_t)v10, (uint64_t)"void _HTTPServerCloseConnection(HTTPConnectionRef, void *)", 0x1Eu, (uint64_t)"Closing  connection from %##a to %##a\n", v6, v7, v8, v9, a1 + 256);
          goto LABEL_13;
        }
        if (_LogCategory_Initialize((uint64_t)v10, 0x1Eu))
        {
          uint64_t v10 = *(int **)(v2 + 24);
          goto LABEL_11;
        }
      }
    }
  }
LABEL_13:
  _HTTPServerUpdateTimeoutTimer(v2);
  CFRelease((CFTypeRef)a1);
}

void HTTPConnectionStop(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 200);
  if (v2) {
    BOOL v3 = *(void *)(a1 + 216) != 0;
  }
  else {
    BOOL v3 = 0;
  }
  if ((*(_DWORD *)(a1 + 136) & 0x80000000) != 0 || *(void *)(a1 + 376))
  {
    if (!v2) {
      goto LABEL_10;
    }
  }
  else
  {
    shutdown(*(_DWORD *)(a1 + 136), 1);
    uint64_t v2 = *(NSObject **)(a1 + 200);
    if (!v2) {
      goto LABEL_10;
    }
  }
  dispatch_source_cancel(v2);
  if (*(unsigned char *)(a1 + 208))
  {
    dispatch_resume(*(dispatch_object_t *)(a1 + 200));
    *(unsigned char *)(a1 + 208) = 0;
  }
  dispatch_release(*(dispatch_object_t *)(a1 + 200));
  *(void *)(a1 + 200) = 0;
LABEL_10:
  int v4 = *(NSObject **)(a1 + 216);
  if (v4)
  {
    dispatch_source_cancel(v4);
    if (*(unsigned char *)(a1 + 224))
    {
      dispatch_resume(*(dispatch_object_t *)(a1 + 216));
      *(unsigned char *)(a1 + 224) = 0;
    }
    dispatch_release(*(dispatch_object_t *)(a1 + 216));
    *(void *)(a1 + 216) = 0;
  }
  if (v3)
  {
    uint64_t v5 = *(void (**)(uint64_t, uint64_t))(a1 + 72);
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 40);
      v5(a1, v6);
    }
  }
}

void _HTTPServerUpdateTimeoutTimer(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 244) && *(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 72))
    {
      dispatch_source_t v2 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, *(dispatch_queue_t *)(a1 + 16));
      *(void *)(a1 + 72) = v2;
      if (v2)
      {
        CFRetain((CFTypeRef)a1);
        dispatch_set_context(*(dispatch_object_t *)(a1 + 72), (void *)a1);
        dispatch_source_set_event_handler_f(*(dispatch_source_t *)(a1 + 72), (dispatch_function_t)_HTTPServerTimeoutHandler);
        dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(a1 + 72), (dispatch_function_t)_HTTPServerTimeoutCanceled);
        unsigned int v3 = *(_DWORD *)(a1 + 244);
        int v4 = *(NSObject **)(a1 + 72);
        dispatch_time_t v5 = dispatch_time(0, 1000000000 * v3);
        dispatch_source_set_timer(v4, v5, 1000000000 * v3, 250000000 * v3);
        uint64_t v6 = *(NSObject **)(a1 + 72);
        dispatch_resume(v6);
      }
    }
  }
  else
  {
    uint64_t v7 = *(NSObject **)(a1 + 72);
    if (v7)
    {
      dispatch_source_cancel(*(dispatch_source_t *)(a1 + 72));
      dispatch_release(v7);
      *(void *)(a1 + 72) = 0;
    }
  }
}

uint64_t _HTTPServerTimeoutHandler(void *a1)
{
  uint64_t result = mach_absolute_time();
  uint64_t v7 = a1[7];
  if (v7)
  {
    uint64_t v8 = result;
    while (1)
    {
      uint64_t v9 = *(void *)(v7 + 16);
      if (v8 - *(void *)(v7 + 408) >= a1[31]) {
        break;
      }
LABEL_9:
      uint64_t v7 = v9;
      if (!v9) {
        return result;
      }
    }
    uint64_t v10 = (int *)a1[3];
    if (*v10 <= 50)
    {
      if (*v10 == -1)
      {
        if (!_LogCategory_Initialize((uint64_t)v10, 0x32u)) {
          goto LABEL_8;
        }
        uint64_t v10 = (int *)a1[3];
      }
      LogPrintF((uint64_t)v10, (uint64_t)"void _HTTPServerTimeoutHandler(void *)", 0x32u, (uint64_t)"Timing out connection %##a -> %##a\n", v3, v4, v5, v6, v7 + 256);
    }
LABEL_8:
    uint64_t result = _HTTPServerCloseConnection(v7);
    goto LABEL_9;
  }
  return result;
}

void _HTTPServerListenerCanceled(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  if ((v2 & 0x80000000) == 0)
  {
    if (close(v2) && *__error()) {
      __error();
    }
    *(_DWORD *)(a1 + 8) = -1;
  }
  CFRelease(*(CFTypeRef *)(a1 + 16));
  free((void *)a1);
}

void _HTTPServerAcceptConnection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v22 = 0;
  uint64_t v10 = *(int **)(v9 + 24);
  if (*v10 <= 30)
  {
    if (*v10 != -1)
    {
LABEL_3:
      LogPrintF((uint64_t)v10, (uint64_t)"void _HTTPServerAcceptConnection(void *)", 0x1Eu, (uint64_t)"Accepting connection: socket=%d", a5, a6, a7, a8, *(unsigned int *)(a1 + 8));
      goto LABEL_5;
    }
    if (_LogCategory_Initialize((uint64_t)v10, 0x1Eu))
    {
      uint64_t v10 = *(int **)(v9 + 24);
      goto LABEL_3;
    }
  }
LABEL_5:
  int v11 = accept(*(_DWORD *)(a1 + 8), 0, 0);
  if (v11 < 0)
  {
    if (!*__error())
    {
      uint64_t v18 = 4294960596;
      goto LABEL_19;
    }
    uint64_t v18 = *__error();
    if (v18) {
      goto LABEL_19;
    }
  }
  *(_OWORD *)&v26[16] = 0u;
  *(_OWORD *)uint64_t v26 = 0u;
  uint64_t v12 = *(void *)(v9 + 120);
  v23[0] = *(void *)(v9 + 176);
  v23[1] = v12;
  long long v24 = *(_OWORD *)(v9 + 184);
  uint64_t v25 = *(void *)(v9 + 200);
  *(_OWORD *)&v26[8] = *(_OWORD *)(v9 + 208);
  *(void *)&v26[24] = *(void *)(v9 + 224);
  uint64_t v27 = 0;
  uint64_t v13 = HTTPConnectionCreate(&v22, (uint64_t)v23, v11, (void *)v9);
  if (!v13)
  {
    uint64_t v19 = v22;
    *(void *)(v22 + 112) = _HTTPServerCloseConnection;
    HTTPConnectionSetDispatchQueue(v19, *(NSObject **)(v9 + 16));
    *(void *)(v19 + 16) = *(void *)(v9 + 56);
    *(void *)(v9 + 56) = v19;
    uint64_t v18 = HTTPConnectionStart(v19);
    if (v18) {
      goto LABEL_19;
    }
    dispatch_source_t v20 = *(int **)(v9 + 24);
    if (*v20 <= 30)
    {
      if (*v20 == -1)
      {
        if (!_LogCategory_Initialize((uint64_t)v20, 0x1Eu)) {
          goto LABEL_27;
        }
        dispatch_source_t v20 = *(int **)(v9 + 24);
      }
      LogPrintF((uint64_t)v20, (uint64_t)"void _HTTPServerAcceptConnection(void *)", 0x1Eu, (uint64_t)"Accepted connection from %##a to %##a\n", v14, v15, v16, v17, v19 + 256);
    }
LABEL_27:
    _HTTPServerUpdateTimeoutTimer(v9);
    return;
  }
  uint64_t v18 = v13;
  if ((v11 & 0x80000000) == 0 && close(v11) && *__error()) {
    __error();
  }
LABEL_19:
  if (v22) {
    _HTTPServerCloseConnection(v22);
  }
  ssize_t v21 = *(int **)(v9 + 24);
  if (*v21 <= 60)
  {
    if (*v21 != -1)
    {
LABEL_23:
      LogPrintF((uint64_t)v21, (uint64_t)"void _HTTPServerAcceptConnection(void *)", 0x3Cu, (uint64_t)"### Accept connection failed: %#m\n", v14, v15, v16, v17, v18);
      return;
    }
    if (_LogCategory_Initialize((uint64_t)v21, 0x3Cu))
    {
      ssize_t v21 = *(int **)(v9 + 24);
      goto LABEL_23;
    }
  }
}

uint64_t HTTPConnectionCreate(uint64_t *a1, uint64_t a2, int a3, void *a4)
{
  size_t v8 = *(void *)a2 + 400;
  if (gHTTPConnectionInitOnce != -1) {
    dispatch_once_f(&gHTTPConnectionInitOnce, 0, (dispatch_function_t)_HTTPConnectionGetTypeID);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance) {
    return 4294960568;
  }
  uint64_t v10 = Instance;
  bzero((void *)(Instance + 16), v8);
  long long v11 = *(_OWORD *)(a2 + 48);
  long long v12 = *(_OWORD *)(a2 + 64);
  long long v13 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v10 + 48) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v10 + 32) = *(_OWORD *)a2;
  *(_OWORD *)(v10 + 80) = v11;
  *(_OWORD *)(v10 + 96) = v12;
  *(_OWORD *)(v10 + 64) = v13;
  if (!*(void *)(v10 + 48)) {
    *(void *)(v10 + 48) = "HTTP/1.1";
  }
  *(void *)(v10 + 408) = mach_absolute_time();
  if (a4)
  {
    uint64_t v14 = a4[3];
    *(_DWORD *)(v10 + 136) = -1;
    uint64_t v15 = (_DWORD *)(v10 + 136);
    *(void *)(v10 + 128) = v14;
    *(void *)(v10 + 352) = SocketTransportRead;
    *(void *)(v10 + 360) = SocketTransportWriteV;
    CFRetain(a4);
    *(void *)(v10 + 24) = a4;
  }
  else
  {
    *(_DWORD *)(v10 + 136) = -1;
    uint64_t v15 = (_DWORD *)(v10 + 136);
    *(void *)(v10 + 128) = &gLogCategory_HTTPServerCore;
    *(void *)(v10 + 352) = SocketTransportRead;
    *(void *)(v10 + 360) = SocketTransportWriteV;
  }
  uint64_t v16 = HTTPMessageCreate((uint64_t *)(v10 + 296));
  if (!v16)
  {
    uint64_t v16 = HTTPMessageCreate((uint64_t *)(v10 + 304));
    if (!v16)
    {
      *(void *)(v10 + 320) = v10 + 312;
      *(_DWORD *)(v10 + 136) = a3;
      if (a4)
      {
        uint64_t v18 = (void (*)(void *, uint64_t, uint64_t, void))a4[21];
        if (v18)
        {
          if (*(void *)(v10 + 32)) {
            uint64_t v19 = v10 + 416;
          }
          else {
            uint64_t v19 = 0;
          }
          v18(a4, v10, v19, a4[15]);
        }
      }
      dispatch_source_t v20 = *(uint64_t (**)(uint64_t, void))(v10 + 56);
      if (!v20 || (uint64_t v21 = v20(v10, *(void *)(v10 + 40)), !v21))
      {
        uint64_t v16 = 0;
        *a1 = v10;
        return v16;
      }
      uint64_t v16 = v21;
      *uint64_t v15 = -1;
    }
  }
  CFRelease((CFTypeRef)v10);
  return v16;
}

void HTTPConnectionSetDispatchQueue(uint64_t a1, NSObject *a2)
{
  if (a2) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = MEMORY[0x1E4F14428];
  }
  dispatch_retain(v3);
  uint64_t v4 = *(NSObject **)(a1 + 120);
  if (v4) {
    dispatch_release(v4);
  }
  *(void *)(a1 + 120) = v3;
}

uint64_t HTTPConnectionStart(uint64_t a1)
{
  if (!*(void *)(a1 + 120)) {
    HTTPConnectionSetDispatchQueue(a1, MEMORY[0x1E4F14428]);
  }
  int v2 = *(_DWORD *)(a1 + 136);
  int v15 = 1;
  int v16 = 0;
  setsockopt(v2, 0xFFFF, 4130, &v15, 4u);
  SocketSetNonBlocking(*(_DWORD *)(a1 + 136), 1);
  socklen_t v17 = 28;
  if (getsockname(*(_DWORD *)(a1 + 136), (sockaddr *)(a1 + 228), &v17) && *__error()) {
    __error();
  }
  socklen_t v17 = 28;
  if (getpeername(*(_DWORD *)(a1 + 136), (sockaddr *)(a1 + 256), &v17) && *__error()) {
    __error();
  }
  SocketGetInterfaceInfo(*(_DWORD *)(a1 + 136), 0, (char *)(a1 + 140), (unsigned int *)(a1 + 160), a1 + 164, (_DWORD *)(a1 + 172), (int *)(a1 + 176), (void *)(a1 + 184), 0, a1 + 192);
  int v3 = *(_DWORD *)(a1 + 192);
  if (v3 != 4 && v3 != 64 && v3 != 128) {
    SocketSetP2P(*(_DWORD *)(a1 + 136), 0);
  }
  int v16 = 1;
  if (setsockopt(*(_DWORD *)(a1 + 136), 6, 1, &v16, 4u))
  {
    if (*__error()) {
      uint64_t v4 = *__error();
    }
    else {
      uint64_t v4 = 4294960596;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(uint64_t (**)(void, void))(a1 + 336);
  if (v5)
  {
    uint64_t v4 = v5(*(unsigned int *)(a1 + 136), *(void *)(a1 + 328));
    if (v4) {
      goto LABEL_26;
    }
    int v10 = *(_DWORD *)(a1 + 136);
  }
  else
  {
    int v10 = *(_DWORD *)(a1 + 136);
    if (!*(unsigned char *)(a1 + 368)) {
      *(void *)(a1 + 328) = v10;
    }
  }
  dispatch_source_t v11 = dispatch_source_create(MEMORY[0x1E4F14478], v10, 0, *(dispatch_queue_t *)(a1 + 120));
  *(void *)(a1 + 200) = v11;
  if (!v11
    || (CFRetain((CFTypeRef)a1),
        dispatch_set_context(*(dispatch_object_t *)(a1 + 200), (void *)a1),
        dispatch_source_set_event_handler_f(*(dispatch_source_t *)(a1 + 200), (dispatch_function_t)_HTTPConnectionReadHandler), dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(a1 + 200), (dispatch_function_t)_HTTPConnectionCancelHandler), dispatch_resume(*(dispatch_object_t *)(a1 + 200)), dispatch_source_t v12 = dispatch_source_create(MEMORY[0x1E4F144B0], *(int *)(a1 + 136), 0, *(dispatch_queue_t *)(a1 + 120)), (*(void *)(a1 + 216) = v12) == 0))
  {
    uint64_t v4 = 4294960596;
    goto LABEL_26;
  }
  CFRetain((CFTypeRef)a1);
  dispatch_set_context(*(dispatch_object_t *)(a1 + 216), (void *)a1);
  dispatch_source_set_event_handler_f(*(dispatch_source_t *)(a1 + 216), (dispatch_function_t)_HTTPConnectionWriteHandler);
  dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(a1 + 216), (dispatch_function_t)_HTTPConnectionCancelHandler);
  *(unsigned char *)(a1 + 224) = 1;
  if (v4)
  {
LABEL_26:
    long long v13 = *(int **)(a1 + 128);
    if (!v13 || *v13 > 90) {
      goto LABEL_31;
    }
    if (*v13 == -1)
    {
      if (!_LogCategory_Initialize((uint64_t)v13, 0x5Au)) {
        goto LABEL_31;
      }
      long long v13 = *(int **)(a1 + 128);
    }
    LogPrintF((uint64_t)v13, (uint64_t)"OSStatus HTTPConnectionStart(HTTPConnectionRef)", 0x5Au, (uint64_t)"### HTTP connection start failed: %#m\n", v6, v7, v8, v9, v4);
LABEL_31:
    HTTPConnectionStop(a1);
  }
  return v4;
}

void _HTTPConnectionWriteHandler(uint64_t a1)
{
  dispatch_suspend(*(dispatch_object_t *)(a1 + 216));
  *(unsigned char *)(a1 + 224) = 1;
  _HTTPConnectionRunStateMachine(a1, v2, v3, v4, v5, v6, v7, v8);
}

void _HTTPConnectionRunStateMachine(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = a1 + 312;
  while (2)
  {
    switch(*(_DWORD *)(a1 + 288))
    {
      case 0:
        uint64_t v10 = *(void *)(a1 + 296);
        uint64_t Message = HTTPMessageReadMessageEx(v10, *(uint64_t (**)(void *, size_t, unint64_t *, uint64_t))(a1 + 352), *(void *)(a1 + 328));
        uint64_t v12 = _HTTPConnectionHandleIOError(a1, Message, 1);
        if (v12 == 35) {
          return;
        }
        uint64_t v13 = v12;
        if (v12) {
          goto LABEL_33;
        }
        *(void *)(a1 + 408) = mach_absolute_time();
        LogHTTP(*(void *)(a1 + 128), *(int **)(a1 + 128), (unsigned __int8 *)(v10 + 24), *(void *)(v10 + 8216), *(void *)(v10 + 8520), *(void *)(v10 + 8528), v14, v15);
        if (*(void *)(v10 + 8216) == 4
          && *(unsigned char *)(v10 + 24) == 36
          && (int v16 = *(uint64_t (**)(uint64_t, void, void, void, void))(a1 + 104)) != 0)
        {
          uint64_t v17 = v16(a1, *(unsigned __int8 *)(v10 + 8480), *(void *)(v10 + 8520), *(void *)(v10 + 8528), *(void *)(a1 + 40));
          if (v17) {
            goto LABEL_44;
          }
          HTTPMessageReset(*(void *)(a1 + 296));
        }
        else
        {
          uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, void))(a1 + 88))(a1, v10, *(void *)(a1 + 40));
          if (v17)
          {
LABEL_44:
            uint64_t v13 = v17;
            goto LABEL_33;
          }
          if (!*(_DWORD *)(a1 + 288))
          {
            *(_DWORD *)(a1 + 288) = 1;
            return;
          }
        }
        continue;
      case 1:
        return;
      case 2:
        uint64_t v18 = HTTPMessageWriteMessage(*(void *)(a1 + 304), *(uint64_t (**)(uint64_t, uint64_t))(a1 + 360), *(void *)(a1 + 328));
        uint64_t v19 = _HTTPConnectionHandleIOError(a1, v18, 0);
        if (v19 == 35) {
          return;
        }
        uint64_t v13 = v19;
        if (v19) {
          goto LABEL_33;
        }
        *(void *)(a1 + 408) = mach_absolute_time();
        dispatch_source_t v20 = *(void (**)(void))(*(void *)(a1 + 304) + 9712);
        if (v20)
        {
          v20();
          *(void *)(*(void *)(a1 + 304) + 9712) = 0;
        }
        uint64_t v21 = *(void *)(a1 + 296);
        if (*(unsigned char *)(v21 + 8496) && !*(void *)(a1 + 376))
        {
          HTTPMessageReset(v21);
          HTTPMessageReset(*(void *)(a1 + 304));
          *(_DWORD *)(a1 + 288) = 3;
          continue;
        }
        uint64_t v13 = 4294960544;
LABEL_33:
        size_t v28 = *(int **)(a1 + 128);
        if (v28 && *v28 <= 50)
        {
          if (*v28 != -1) {
            goto LABEL_36;
          }
          if (_LogCategory_Initialize((uint64_t)v28, 0x32u))
          {
            size_t v28 = *(int **)(a1 + 128);
LABEL_36:
            LogPrintF((uint64_t)v28, (uint64_t)"void _HTTPConnectionRunStateMachine(HTTPConnectionRef)", 0x32u, (uint64_t)"HTTP connection closing: %#m\n", a5, a6, a7, a8, v13);
          }
        }
        HTTPConnectionStop(a1);
        uint64_t v29 = *(void (**)(uint64_t, uint64_t))(a1 + 112);
        if (v29)
        {
          uint64_t v30 = *(void *)(a1 + 40);
          v29(a1, v30);
        }
        return;
      case 3:
        if (*(void *)v9)
        {
          LogHTTP(*(void *)(a1 + 128), *(int **)(a1 + 128), (unsigned __int8 *)(*(void *)v9 + 24), *(void *)(*(void *)v9 + 8216), *(void *)(*(void *)v9 + 8520), *(void *)(*(void *)v9 + 8528), a7, a8);
          *(_DWORD *)(a1 + 288) = 4;
        }
        else
        {
          *(_DWORD *)(a1 + 288) = 0;
        }
        continue;
      case 4:
        uint64_t v22 = *(void **)(a1 + 312);
        uint64_t v23 = HTTPMessageWriteMessage((uint64_t)v22, *(uint64_t (**)(uint64_t, uint64_t))(a1 + 360), *(void *)(a1 + 328));
        uint64_t v24 = _HTTPConnectionHandleIOError(a1, v23, 0);
        if (v24 == 35) {
          return;
        }
        uint64_t v13 = v24;
        if (v24) {
          goto LABEL_33;
        }
        *(void *)(a1 + 408) = mach_absolute_time();
        uint64_t v25 = v22[2];
        *(void *)(a1 + 312) = v25;
        if (!v25) {
          *(void *)(a1 + 320) = v9;
        }
        uint64_t v26 = v22[1215];
        if (v26)
        {
          (*(void (**)(uint64_t, void *))(v26 + 16))(v26, v22);
        }
        else
        {
          uint64_t v27 = (void (*)(void *))v22[1214];
          if (v27) {
            v27(v22);
          }
        }
        HTTPMessageReset((uint64_t)v22);
        CFRelease(v22);
        *(_DWORD *)(a1 + 288) = 3;
        continue;
      default:
        uint64_t v13 = 4294960534;
        goto LABEL_33;
    }
  }
}

uint64_t _HTTPConnectionHandleIOError(uint64_t a1, uint64_t a2, int a3)
{
  if ((int)a2 <= -6767)
  {
    if (a2 != -6775)
    {
      if (a2 != -6774) {
        return a2;
      }
LABEL_8:
      if (*(unsigned char *)(a1 + 208))
      {
        *(unsigned char *)(a1 + 208) = 0;
        uint64_t v4 = (dispatch_object_t *)(a1 + 200);
LABEL_14:
        dispatch_resume(*v4);
        return 35;
      }
      return 35;
    }
LABEL_12:
    if (*(unsigned char *)(a1 + 224))
    {
      *(unsigned char *)(a1 + 224) = 0;
      uint64_t v4 = (dispatch_object_t *)(a1 + 216);
      goto LABEL_14;
    }
    return 35;
  }
  if (a2 == -6766)
  {
    if (*(unsigned char *)(a1 + 208))
    {
      *(unsigned char *)(a1 + 208) = 0;
      dispatch_resume(*(dispatch_object_t *)(a1 + 200));
    }
    goto LABEL_12;
  }
  if (a2 == 35)
  {
    if (a3) {
      goto LABEL_8;
    }
    goto LABEL_12;
  }
  return a2;
}

void _HTTPConnectionReadHandler(uint64_t a1)
{
  dispatch_suspend(*(dispatch_object_t *)(a1 + 200));
  *(unsigned char *)(a1 + 208) = 1;
  _HTTPConnectionRunStateMachine(a1, v2, v3, v4, v5, v6, v7, v8);
}

uint64_t _HTTPConnectionGetTypeID()
{
  uint64_t result = _CFRuntimeRegisterClass();
  gHTTPConnectionCFTypeID TypeID = result;
  return result;
}

int *_HTTPConnectionFinalize(uint64_t a1)
{
  uint64_t v2 = *(void (**)(uint64_t, void))(a1 + 64);
  if (v2) {
    v2(a1, *(void *)(a1 + 40));
  }
  uint64_t v3 = *(const void **)(a1 + 24);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v4 = *(NSObject **)(a1 + 120);
  if (v4)
  {
    dispatch_release(v4);
    *(void *)(a1 + 120) = 0;
  }
  uint64_t v5 = *(const void **)(a1 + 296);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 296) = 0;
  }
  uint64_t v6 = *(const void **)(a1 + 304);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 304) = 0;
  }
  while (1)
  {
    uint64_t v7 = *(void **)(a1 + 312);
    if (!v7) {
      break;
    }
    *(void *)(a1 + 312) = v7[2];
    CFRelease(v7);
  }
  uint64_t v8 = *(void (**)(void))(a1 + 344);
  if (v8) {
    v8(*(void *)(a1 + 328));
  }
  uint64_t v9 = *(uint64_t (**)(int *, void, void, void))(a1 + 376);
  uint64_t result = (int *)*(unsigned int *)(a1 + 136);
  if (v9)
  {
    uint64_t result = (int *)v9(result, *(void *)(a1 + 384), *(void *)(a1 + 392), *(void *)(a1 + 400));
LABEL_17:
    *(_DWORD *)(a1 + 136) = -1;
    return result;
  }
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = (int *)close((int)result);
    if (result)
    {
      uint64_t result = __error();
      if (*result) {
        uint64_t result = __error();
      }
    }
    goto LABEL_17;
  }
  return result;
}

uint64_t _HTTPServerSetProperty(uint64_t a1, uint64_t a2, CFTypeRef cf1, uint64_t a4, const __CFString *a5)
{
  if (CFEqual(cf1, @"loopbackOnly"))
  {
    unint64_t v10 = CFGetInt64(a5, 0);
    uint64_t result = 0;
    *(unsigned char *)(a1 + 240) = v10 != 0;
    return result;
  }
  if (CFEqual(cf1, @"p2p"))
  {
    BOOL v12 = CFGetInt64(a5, 0) != 0;
    *(_DWORD *)(a1 + 232) = v12;
    uint64_t v13 = *(void *)(a1 + 32);
    if (v13)
    {
      int v14 = *(_DWORD *)(v13 + 8);
      if ((v14 & 0x80000000) == 0) {
        SocketSetP2P(v14, v12);
      }
    }
    uint64_t v15 = *(void *)(a1 + 40);
    if (v15)
    {
      int v16 = *(_DWORD *)(v15 + 8);
      if ((v16 & 0x80000000) == 0) {
        SocketSetP2P(v16, *(_DWORD *)(a1 + 232));
      }
    }
    return 0;
  }
  if (CFEqual(cf1, @"password"))
  {
    if (!a5)
    {
      uint64_t v25 = 0;
LABEL_24:
      uint64_t v19 = *(void **)(a1 + 80);
      if (v19) {
        free(v19);
      }
      uint64_t result = 0;
      *(void *)(a1 + 80) = v25;
      return result;
    }
    CFTypeID v17 = CFGetTypeID(a5);
    if (v17 == CFStringGetTypeID())
    {
      uint64_t v25 = 0;
      if (CFStringGetLength(a5) >= 1)
      {
        uint64_t result = CFStringCopyUTF8CString(a5, &v25);
        if (result) {
          return result;
        }
      }
      goto LABEL_24;
    }
    return 4294960540;
  }
  if (CFEqual(cf1, @"realm"))
  {
    if (a5)
    {
      CFTypeID v18 = CFGetTypeID(a5);
      if (v18 != CFStringGetTypeID()) {
        return 4294960540;
      }
      uint64_t v25 = 0;
      if (CFStringGetLength(a5) >= 1)
      {
        uint64_t result = CFStringCopyUTF8CString(a5, &v25);
        if (result) {
          return result;
        }
      }
    }
    else
    {
      uint64_t v25 = 0;
    }
    uint64_t v22 = *(void **)(a1 + 88);
    if (v22) {
      free(v22);
    }
    uint64_t result = 0;
    *(void *)(a1 + 88) = v25;
  }
  else if (CFEqual(cf1, @"timeoutSecs"))
  {
    int v26 = 0;
    unsigned int v20 = CFGetInt64(a5, &v26);
    *(_DWORD *)(a1 + 244) = v20;
    uint64_t v21 = v20;
    if (SecondsToUpTicks_sOnce != -1) {
      dispatch_once_f(&SecondsToUpTicks_sOnce, &SecondsToUpTicks_sMultiplier, (dispatch_function_t)_SecondsToUpTicksInit);
    }
    uint64_t result = 0;
    *(void *)(a1 + 248) = SecondsToUpTicks_sMultiplier * v21;
  }
  else
  {
    uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef, uint64_t, const __CFString *, uint64_t))(a1 + 160);
    if (v23)
    {
      uint64_t v24 = *(void *)(a1 + 120);
      return v23(a1, a2, cf1, a4, a5, v24);
    }
    else
    {
      return 4294960582;
    }
  }
  return result;
}

_OWORD *HTTPConnectionSetDelegate(_OWORD *result, _OWORD *a2)
{
  long long v2 = a2[3];
  long long v3 = a2[4];
  long long v4 = a2[2];
  result[3] = a2[1];
  result[2] = *a2;
  result[5] = v2;
  result[6] = v3;
  result[4] = v4;
  if (!*((void *)result + 6)) {
    *((void *)result + 6) = "HTTP/1.1";
  }
  return result;
}

uint64_t HTTPConnectionSetTimeout(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(unsigned int *)(a1 + 136);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = SocketSetTCPTimeout(result, a2);
    if (result)
    {
      uint64_t result = *(void *)(a1 + 128);
      if (*(int *)result <= 60)
      {
        if (*(_DWORD *)result != -1) {
          return LogPrintF(result, (uint64_t)"void HTTPConnectionSetTimeout(HTTPConnectionRef, int)", 0x3Cu, (uint64_t)"### Set TCP timeout to %d seconds failed: %#m\n", v5, v6, v7, v8, a2);
        }
        uint64_t result = _LogCategory_Initialize(result, 0x3Cu);
        if (result)
        {
          uint64_t result = *(void *)(a1 + 128);
          return LogPrintF(result, (uint64_t)"void HTTPConnectionSetTimeout(HTTPConnectionRef, int)", 0x3Cu, (uint64_t)"### Set TCP timeout to %d seconds failed: %#m\n", v5, v6, v7, v8, a2);
        }
      }
    }
  }
  return result;
}

void HTTPConnectionStopAsync(void *a1)
{
  CFRetain(a1);
  long long v2 = a1[15];
  dispatch_async_f(v2, a1, (dispatch_function_t)_HTTPConnectionStopAsync);
}

void _HTTPConnectionStopAsync(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = (int *)a1[16];
  if (v9 && *v9 <= 30)
  {
    if (*v9 != -1)
    {
LABEL_4:
      LogPrintF((uint64_t)v9, (uint64_t)"void _HTTPConnectionStopAsync(void *)", 0x1Eu, (uint64_t)"HTTP connection stop async\n", a5, a6, a7, a8, v10);
      goto LABEL_6;
    }
    if (_LogCategory_Initialize((uint64_t)v9, 0x1Eu))
    {
      uint64_t v9 = (int *)a1[16];
      goto LABEL_4;
    }
  }
LABEL_6:
  HTTPConnectionStop((uint64_t)a1);
  CFRelease(a1);
}

uint64_t HTTPConnectionDetach(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1[47]) {
    return 4294960575;
  }
  a1[47] = a2;
  a1[48] = a3;
  a1[49] = a4;
  a1[50] = a5;
  uint64_t v9 = *(int **)(a1[3] + 24);
  if (*v9 > 30) {
    return 0;
  }
  if (*v9 != -1)
  {
LABEL_4:
    LogPrintF((uint64_t)v9, (uint64_t)"OSStatus HTTPConnectionDetach(HTTPConnectionRef, HTTPConnectionDetachHandler_f, void *, void *, void *)", 0x1Eu, (uint64_t)"Detaching connection %##a -> %##a\n", a5, a6, a7, a8, (uint64_t)(a1 + 32));
    return 0;
  }
  uint64_t result = _LogCategory_Initialize((uint64_t)v9, 0x1Eu);
  if (result)
  {
    uint64_t v9 = *(int **)(a1[3] + 24);
    goto LABEL_4;
  }
  return result;
}

uint64_t HTTPConnectionSetTransportDelegate(uint64_t a1, long long *a2)
{
  uint64_t v4 = a1 + 328;
  uint64_t v5 = *(void (**)(void))(a1 + 344);
  if (v5) {
    v5(*(void *)v4);
  }
  long long v6 = *a2;
  long long v7 = a2[1];
  *(void *)(v4 + 32) = *((void *)a2 + 4);
  *(_OWORD *)uint64_t v4 = v6;
  *(_OWORD *)(v4 + 16) = v7;
  *(unsigned char *)(a1 + 368) = 1;
  uint64_t result = *(unsigned int *)(a1 + 136);
  if ((result & 0x80000000) == 0)
  {
    uint64_t v9 = *(uint64_t (**)(void))(a1 + 336);
    if (v9)
    {
      return v9();
    }
  }
  return result;
}

uint64_t HTTPConnectionGetNextURLSegmentEx(uint64_t a1, uint64_t *a2, int a3, unint64_t *a4, void *a5, _DWORD *a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11 = a2[1049];
  unint64_t v12 = a2[1050];
  if (v11 < v12 && *(unsigned char *)v11 != 47)
  {
    uint64_t v13 = 0;
    int v14 = (unsigned char *)a2[1050];
    while (~v11 + v12 != v13)
    {
      int v15 = *(unsigned __int8 *)(v11 + v13++ + 1);
      if (v15 == 47)
      {
        int v14 = (unsigned char *)(v11 + v13);
        break;
      }
    }
    if (v14 != (unsigned char *)v11)
    {
      *a4 = v11;
      *a5 = &v14[-v11];
      if ((unint64_t)v14 >= v12) {
        uint64_t v16 = (uint64_t)v14;
      }
      else {
        uint64_t v16 = (uint64_t)(v14 + 1);
      }
      a2[1049] = v16;
      uint64_t v17 = 1;
      goto LABEL_14;
    }
  }
  if (!a3)
  {
    uint64_t v21 = *(int **)(a1 + 128);
    if (*v21 > 60) {
      goto LABEL_20;
    }
    if (*v21 == -1)
    {
      if (!_LogCategory_Initialize((uint64_t)v21, 0x3Cu))
      {
LABEL_20:
        int v18 = HTTPConnectionSendSimpleResponseEx2(a1, 400, 4294960592, 0, 0, 0, a7, a8);
        uint64_t v17 = 0;
        uint64_t v19 = 0;
        if (v18) {
          goto LABEL_15;
        }
        goto LABEL_14;
      }
      uint64_t v21 = *(int **)(a1 + 128);
    }
    LogPrintF((uint64_t)v21, (uint64_t)"Boolean HTTPConnectionGetNextURLSegmentEx(HTTPConnectionRef, HTTPMessageRef, Boolean, const char **, size_t *, OSStatus *)", 0x3Cu, (uint64_t)"### Bad URL segment: '%.*s'\n", (uint64_t)a5, (uint64_t)a6, a7, a8, a2[1034]);
    goto LABEL_20;
  }
  uint64_t v17 = 0;
LABEL_14:
  int v18 = 0;
  uint64_t v19 = v17;
LABEL_15:
  *a6 = v18;
  return v19;
}

uint64_t HTTPConnectionSendSimpleResponseEx2(uint64_t a1, int a2, uint64_t a3, uint64_t a4, const void *a5, size_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t inited = HTTPConnectionInitResponseEx(a1, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
  if (inited
    || (uint64_t inited = HTTPMessageSetBody(*(void *)(a1 + 304), a4, a5, a6), inited)
    || (uint64_t inited = HTTPConnectionSendResponse(a1), inited))
  {
    uint64_t v17 = *(int **)(a1 + 128);
    if (*v17 <= 60)
    {
      if (*v17 == -1)
      {
        if (!_LogCategory_Initialize((uint64_t)v17, 0x3Cu)) {
          return inited;
        }
        uint64_t v17 = *(int **)(a1 + 128);
      }
      LogPrintF((uint64_t)v17, (uint64_t)"OSStatus HTTPConnectionSendSimpleResponseEx2(HTTPConnectionRef, const char *, HTTPStatus, OSStatus, const char *, const void *, size_t)", 0x3Cu, (uint64_t)"### Response failed: %#m\n", v12, v13, v14, v15, inited);
    }
  }
  return inited;
}

uint64_t HTTPConnectionInitResponseEx(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  HTTPHeader_InitResponseEx(*(void *)(a1 + 304) + 24, *(const char **)(a1 + 48), a2, 0, a3, a6, a7, a8);
  time_t v9 = time(0);
  uint64_t v10 = HTTPMakeDateString(v9, v18, 0x40uLL);
  if (*v10) {
    HTTPHeader_SetField((char *)(*(void *)(a1 + 304) + 24), "Date", (uint64_t)"%s", v11, v12, v13, v14, v15, (char)v10);
  }
  uint64_t v16 = *(uint64_t (**)(uint64_t, void, void))(a1 + 96);
  if (!v16 || (uint64_t result = v16(a1, *(void *)(a1 + 304), *(void *)(a1 + 40)), !result))
  {
    uint64_t result = 0;
    *(void *)(*(void *)(a1 + 304) + 8528) = 0;
  }
  return result;
}

uint64_t HTTPConnectionSendResponse(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 304);
  uint64_t v5 = HTTPHeader_Commit(v2 + 24);
  if (!v5)
  {
    LogHTTP(*(void *)(a1 + 128), *(int **)(a1 + 128), (unsigned __int8 *)(v2 + 24), *(void *)(v2 + 8216), *(void *)(v2 + 8520), *(void *)(v2 + 8528), v3, v4);
    *(void *)(v2 + 9584) = v2 + 24;
    *(void *)(v2 + 9592) = *(void *)(v2 + 8216);
    *(_DWORD *)(v2 + 9624) = 1;
    uint64_t v13 = *(void *)(v2 + 8528);
    if (v13)
    {
      *(void *)(v2 + 9600) = *(void *)(v2 + 8520);
      *(void *)(v2 + 9608) = v13;
      *(_DWORD *)(v2 + 9624) = 2;
    }
    *(void *)(v2 + 9616) = v2 + 9584;
    int v14 = *(_DWORD *)(a1 + 288);
    *(_DWORD *)(a1 + 288) = 2;
    if (v14 == 1) {
      _HTTPConnectionRunStateMachine(a1, v6, v7, v8, v9, v10, v11, v12);
    }
  }
  return v5;
}

uint64_t HTTPConnectionSendBinaryBytes(dispatch_queue_t *a1, char a2, char a3, const void *a4, size_t a5, uint64_t a6, uint64_t a7)
{
  CFTypeRef cf = 0;
  if (a5 >> 16) {
    return 4294960553;
  }
  uint64_t v14 = HTTPMessageCreate((uint64_t *)&cf);
  uint64_t v15 = cf;
  if (v14) {
    goto LABEL_3;
  }
  if (a2)
  {
    *((void *)cf + 1065) = a4;
    v15[1066] = a5;
  }
  else
  {
    uint64_t v14 = HTTPMessageSetBodyLength(cf, a5);
    if (v14)
    {
LABEL_3:
      if (!v15) {
        return v14;
      }
      goto LABEL_13;
    }
    if (a5) {
      memmove((void *)v15[1065], a4, a5);
    }
  }
  *((unsigned char *)v15 + 24) = 36;
  *((unsigned char *)v15 + 25) = a3;
  *((unsigned char *)v15 + 26) = BYTE1(a5);
  *((unsigned char *)v15 + 27) = a5;
  v15[1027] = 4;
  if (a6)
  {
    v15[1213] = a6;
    v15[1209] = a7;
    v15[1214] = _HTTPConnectionSendBinaryCompletion;
  }
  uint64_t v14 = HTTPConnectionSendEvent(a1, v15);
LABEL_13:
  CFRelease(v15);
  return v14;
}

uint64_t HTTPConnectionSendEvent(dispatch_queue_t *a1, void *a2)
{
  uint64_t v4 = HTTPHeader_Commit((uint64_t)(a2 + 3));
  if (!v4)
  {
    a2[1207] = a1;
    CFRetain(a1);
    CFRetain(a2);
    dispatch_async_f(a1[15], a2, (dispatch_function_t)_HTTPConnectionSendEvent);
  }
  return v4;
}

void _HTTPConnectionSendEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(a1 + 16) = 0;
  uint64_t v8 = *(void *)(a1 + 9656);
  *(void *)(a1 + 9584) = a1 + 24;
  *(void *)(a1 + 9592) = *(void *)(a1 + 8216);
  *(_DWORD *)(a1 + 9624) = 1;
  uint64_t v9 = *(void *)(a1 + 8528);
  if (v9)
  {
    *(void *)(a1 + 9600) = *(void *)(a1 + 8520);
    *(void *)(a1 + 9608) = v9;
    *(_DWORD *)(a1 + 9624) = 2;
  }
  *(void *)(a1 + 9616) = a1 + 9584;
  **(void **)(v8 + 320) = a1;
  *(void *)(v8 + 320) = a1 + 16;
  if (!*(_DWORD *)(v8 + 288))
  {
    *(_DWORD *)(v8 + 288) = 3;
    _HTTPConnectionRunStateMachine(v8, a2, a3, a4, a5, a6, a7, a8);
  }
  CFRelease((CFTypeRef)v8);
}

uint64_t _HTTPConnectionSendBinaryCompletion(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(a1 + 9704))(*(unsigned int *)(a1 + 9648), *(void *)(a1 + 9672));
}

uint64_t HTTPServer_Create(void *a1, long long *a2)
{
  size_t v3 = *(void *)a2;
  if (v3 < 0xE0 || *((void *)a2 + 1) >> 8 < 0x443uLL) {
    return 4294960553;
  }
  if (!*((void *)a2 + 8)) {
    return 4294960591;
  }
  uint64_t v5 = malloc_type_calloc(1uLL, v3, 0x5D44B60EuLL);
  if (!v5) {
    return 4294960568;
  }
  uint64_t v6 = v5;
  uint64_t result = 0;
  long long v8 = *a2;
  long long v9 = a2[2];
  v6[1] = a2[1];
  v6[2] = v9;
  _OWORD *v6 = v8;
  long long v10 = a2[3];
  long long v11 = a2[4];
  long long v12 = a2[5];
  *((void *)v6 + 12) = *((void *)a2 + 12);
  *((_DWORD *)v6 + 36) = -1;
  *((_DWORD *)v6 + 42) = -1;
  *((void *)v6 + 27) = &gLogCategory_HTTPServerConnections;
  unsigned char v6[4] = v11;
  void v6[5] = v12;
  _OWORD v6[3] = v10;
  *a1 = v6;
  return result;
}

void HTTPServer_Delete(void *a1)
{
  HTTPServer_Stop((uint64_t)a1);
  uint64_t v2 = (void (*)(void *))a1[2];
  if (v2) {
    v2(a1);
  }
  free(a1);
}

uint64_t HTTPServer_Stop(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 136);
  if (v2)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 136));
    dispatch_release(v2);
    *(void *)(a1 + 136) = 0;
  }
  size_t v3 = *(NSObject **)(a1 + 160);
  if (v3)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 160));
    dispatch_release(v3);
    *(void *)(a1 + 160) = 0;
  }
  if (*(void *)(a1 + 112))
  {
    *(void *)(a1 + 120) = dispatch_semaphore_create(0);
    dispatch_async_f(*(dispatch_queue_t *)(a1 + 112), (void *)a1, (dispatch_function_t)__HTTPServer_StopAllConnections);
    dispatch_release(*(dispatch_object_t *)(a1 + 112));
    uint64_t v4 = *(NSObject **)(a1 + 120);
    if (v4)
    {
      dispatch_semaphore_wait(v4, 0xFFFFFFFFFFFFFFFFLL);
      dispatch_release(*(dispatch_object_t *)(a1 + 120));
      *(void *)(a1 + 120) = 0;
    }
    *(void *)(a1 + 112) = 0;
  }
  uint64_t v5 = *(void (**)(uint64_t))(a1 + 32);
  if (v5) {
    v5(a1);
  }
  return 0;
}

void __HTTPServer_StopAllConnections(uint64_t a1)
{
  for (int i = *(uint64_t ***)(a1 + 184); i; int i = (uint64_t **)*i)
  {
    NetSocket_Cancel((uint64_t)i[3]);
    dispatch_source_cancel((dispatch_source_t)i[19]);
  }
}

uint64_t HTTPServer_Start(uint64_t a1)
{
  handle[0] = -1;
  uint64_t v2 = dispatch_queue_create("HTTPServer", 0);
  *(void *)(a1 + 112) = v2;
  if (!v2)
  {
    uint64_t v12 = 4294960568;
LABEL_31:
    HTTPServer_Stop(a1);
    return v12;
  }
  dispatch_set_context(v2, (void *)a1);
  dispatch_set_finalizer_f(*(dispatch_object_t *)(a1 + 112), (dispatch_function_t)__HTTPServer_Finalizer);
  int v3 = *(_DWORD *)(a1 + 128);
  if (*(int *)(a1 + 80) >= 0 || v3 <= 0) {
    int v5 = *(_DWORD *)(a1 + 80);
  }
  else {
    int v5 = -v3;
  }
  uint64_t v6 = ServerSocketPairOpen(1, 6, v5, (int *)(a1 + 128), *(_DWORD *)(a1 + 84), (int *)handle + 1, (int *)handle);
  int v11 = HIDWORD(handle[0]);
  if (v6)
  {
    uint64_t v12 = v6;
    if ((handle[0] & 0x8000000000000000) != 0) {
      goto LABEL_26;
    }
    goto LABEL_13;
  }
  if ((handle[0] & 0x8000000000000000) == 0)
  {
    uint64_t v12 = __HTTPServer_SetupListener(a1, HIDWORD(handle[0]), (_DWORD *)(a1 + 136));
    if (v12)
    {
LABEL_13:
      if (close(v11) && *__error()) {
        __error();
      }
      goto LABEL_26;
    }
  }
  if ((handle[0] & 0x80000000) == 0)
  {
    uint64_t v12 = __HTTPServer_SetupListener(a1, LODWORD(handle[0]), (_DWORD *)(a1 + 160));
    if (v12) {
      goto LABEL_26;
    }
    LODWORD(handle[0]) = -1;
  }
  if (gLogCategory_HTTPServer <= 40
    && (gLogCategory_HTTPServer != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_HTTPServer, 0x28u)))
  {
    LogPrintF((uint64_t)&gLogCategory_HTTPServer, (uint64_t)"OSStatus HTTPServer_Start(HTTPServerOldRef)", 0x28u, (uint64_t)"Listening on port %d\n", v7, v8, v9, v10, *(unsigned int *)(a1 + 128));
  }
  uint64_t v13 = *(uint64_t (**)(uint64_t))(a1 + 24);
  if (v13) {
    uint64_t v12 = v13(a1);
  }
  else {
    uint64_t v12 = 0;
  }
LABEL_26:
  if ((handle[0] & 0x80000000) == 0 && close(handle[0]) && *__error()) {
    __error();
  }
  if (v12) {
    goto LABEL_31;
  }
  return v12;
}

uint64_t __HTTPServer_SetupListener(uint64_t a1, uintptr_t handle, _DWORD *a3)
{
  unsigned int v4 = handle;
  int v6 = *(_DWORD *)(a1 + 88);
  if (v6) {
    SocketSetQoS(v4, v6);
  }
  if (*(unsigned char *)(a1 + 104)) {
    SocketSetP2P(v4, 1);
  }
  uint64_t v7 = dispatch_source_create(MEMORY[0x1E4F14478], v4, 0, *(dispatch_queue_t *)(a1 + 112));
  *(void *)a3 = v7;
  if (!v7) {
    return 4294960596;
  }
  a3[2] = v4;
  *((void *)a3 + 2) = a1;
  dispatch_set_context(v7, a3);
  dispatch_set_finalizer_f(*(dispatch_object_t *)a3, (dispatch_function_t)__HTTPServer_ListenerFinalizer);
  dispatch_source_set_event_handler_f(*(dispatch_source_t *)a3, (dispatch_function_t)__HTTPServer_AcceptConnection);
  dispatch_resume(*(dispatch_object_t *)a3);
  return 0;
}

void __HTTPServer_AcceptConnection(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  int v3 = malloc_type_calloc(1uLL, *(void *)(v2 + 8), 0x478BE47uLL);
  if (v3)
  {
    unsigned int v4 = v3;
    int v5 = (char *)(v3 + 34910);
    v3[1] = v2;
    int v6 = *(_DWORD *)(v2 + 192);
    *(_DWORD *)(v2 + 192) = v6 + 1;
    *((_DWORD *)v3 + 4) = v6 + 1;
    if (v6 == -1) {
      *(_DWORD *)(v2 + 192) = 1;
    }
    int v33 = 0;
    dispatch_retain(*(dispatch_object_t *)(v2 + 112));
    *(_OWORD *)int v5 = *(_OWORD *)(v2 + 200);
    socklen_t v34 = 28;
    uint64_t v7 = accept(*(_DWORD *)(a1 + 8), (sockaddr *)((char *)v4 + 60), &v34);
    if ((v7 & 0x80000000) != 0 && (!*__error() || *__error())) {
      goto LABEL_32;
    }
    int v32 = 1;
    setsockopt(v7, 0xFFFF, 4130, &v32, 4u);
    SocketSetNonBlocking(v7, 1);
    int v8 = *(_DWORD *)(v2 + 88);
    if (v8) {
      SocketSetQoS(v7, v8);
    }
    if ((v7 & 0x80000000) != 0 || (uint64_t v35 = 0, NetSocket_Create(&v35)))
    {
      close(v7);
LABEL_32:
      __HTTPServer_RemoveConnection(v4, v9, v10, v11, v12, v13, v14, v15);
      return;
    }
    uint64_t v16 = v35;
    *(_DWORD *)(v35 + 4) = v7;
    _OWORD v4[3] = v16;
    *(void *)(v16 + 112) = *((void *)v5 + 1);
    socklen_t v34 = 28;
    if (getsockname(v7, (sockaddr *)v4 + 2, &v34) && (!*__error() || *__error())) {
      goto LABEL_32;
    }
    SocketGetInterfaceInfo(v7, 0, (char *)v4 + 88, (unsigned int *)v4 + 27, (uint64_t)v4 + 116, (_DWORD *)v4 + 28, (int *)v4 + 31, v4 + 16, 0, (uint64_t)(v4 + 17));
    int v17 = *((_DWORD *)v4 + 34);
    if (v17 != 4 && v17 != 64 && v17 != 128) {
      SocketSetP2P(v7, 0);
    }
    int v18 = (void *)(v2 + 184);
    do
    {
      uint64_t v19 = v18;
      int v18 = (void *)*v18;
    }
    while (v18);
    *uint64_t v19 = v4;
    int v33 = 1;
    if (setsockopt(v7, 6, 1, &v33, 4u)
      && (!*__error() || *__error())
      && gLogCategory_HTTPServer <= 60
      && (gLogCategory_HTTPServer != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_HTTPServer, 0x3Cu)))
    {
      LogPrintF((uint64_t)&gLogCategory_HTTPServer, (uint64_t)"void __HTTPServer_AcceptConnection(void *)", 0x3Cu, (uint64_t)"### set TCP_NODELAY failed on sock %d: %#m\n", v20, v21, v22, v23, v7);
    }
    uint64_t v24 = dispatch_queue_create("HTTPServerConnection", 0);
    v4[18] = v24;
    if (!v24) {
      goto LABEL_32;
    }
    dispatch_set_context(v24, v4);
    dispatch_set_finalizer_f((dispatch_object_t)v4[18], (dispatch_function_t)__HTTPServer_FinalizeConnection);
    uint64_t v25 = *(unsigned int (**)(void *))(v2 + 40);
    if (v25)
    {
      if (v25(v4)) {
        goto LABEL_32;
      }
    }
    *((unsigned char *)v4 + 20) = 1;
    int v26 = dispatch_source_create(MEMORY[0x1E4F14478], (int)v7, 0, (dispatch_queue_t)v4[18]);
    v4[19] = v26;
    if (!v26) {
      goto LABEL_32;
    }
    dispatch_set_context(v26, v4);
    dispatch_source_set_event_handler_f((dispatch_source_t)v4[19], (dispatch_function_t)__HTTPServer_ReadHandler);
    dispatch_source_set_cancel_handler_f((dispatch_source_t)v4[19], (dispatch_function_t)__HTTPServer_CancelHandler);
    dispatch_resume((dispatch_object_t)v4[19]);
    unint64_t v31 = *(int **)(v2 + 216);
    if (*v31 <= 40)
    {
      if (*v31 != -1)
      {
LABEL_37:
        LogPrintF((uint64_t)v31, (uint64_t)"void __HTTPServer_AcceptConnection(void *)", 0x28u, (uint64_t)"Accepted connection from %##a to %##a \n", v27, v28, v29, v30, (uint64_t)v4 + 60);
        return;
      }
      if (_LogCategory_Initialize((uint64_t)v31, 0x28u))
      {
        unint64_t v31 = *(int **)(v2 + 216);
        goto LABEL_37;
      }
    }
  }
}

void __HTTPServer_RemoveConnection(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = (void *)(a1[1] + 184);
  while (1)
  {
    uint64_t v10 = v9;
    uint64_t v9 = (void *)*v9;
    if (!v9) {
      break;
    }
    if (v9 == a1)
    {
      *uint64_t v10 = *a1;
      break;
    }
  }
  uint64_t v11 = a1[18];
  if (v11)
  {
    dispatch_release(v11);
    uint64_t v12 = a1[19];
    if (v12)
    {
      dispatch_source_cancel(v12);
      uint64_t v13 = a1[19];
      dispatch_release(v13);
    }
  }
  else
  {
    __HTTPServer_FinalizeConnection((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

void __HTTPServer_FinalizeConnection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)(a1 + 8);
  if (*(unsigned char *)(a1 + 33))
  {
    uint64_t v10 = *(int **)(v9 + 216);
    if (*v10 <= 40)
    {
      if (*v10 != -1)
      {
LABEL_4:
        LogPrintF((uint64_t)v10, (uint64_t)"void __HTTPServer_FinalizeConnection(void *)", 0x28u, (uint64_t)"Closing  connection from %##a to %##a\n", a5, a6, a7, a8, a1 + 60);
        goto LABEL_6;
      }
      if (_LogCategory_Initialize((uint64_t)v10, 0x28u))
      {
        uint64_t v10 = *(int **)(v9 + 216);
        goto LABEL_4;
      }
    }
  }
LABEL_6:
  uint64_t v11 = *(void **)(a1 + 24);
  if (v11)
  {
    NetSocket_Delete(v11);
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v12 = *(void (**)(uint64_t))(v9 + 48);
  if (v12 && *(unsigned char *)(a1 + 20)) {
    v12(a1);
  }
  dispatch_release(*(dispatch_object_t *)(v9 + 112));
  free((void *)a1);
}

void __HTTPServer_CancelHandler(void *context)
{
  uint64_t v2 = context[1];
  int v3 = *(void (**)(void *))(v2 + 56);
  if (v3)
  {
    v3(context);
    uint64_t v2 = context[1];
  }
  unsigned int v4 = *(NSObject **)(v2 + 112);
  dispatch_async_f(v4, context, (dispatch_function_t)__HTTPServer_RemoveConnection);
}

void __HTTPServer_ReadHandler(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 21))
  {
    *(void *)&v13.tv_usec = 0;
    uint64_t v2 = *(_DWORD **)(a1 + 24);
    if (v2 && *v2 == 1853058915) {
      int v3 = v2[1];
    }
    else {
      int v3 = -1;
    }
    memset(&v14, 0, sizeof(v14));
    if (__darwin_check_fd_set_overflow(v3, &v14, 0)) {
      *(__int32_t *)((char *)v14.fds_bits + (((unint64_t)v3 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << v3;
    }
    v13.time_t tv_sec = 0;
    int v4 = v3 + 1;
    while (1)
    {
      int v5 = select(v4, &v14, 0, 0, &v13);
      if (v5 > 0) {
        break;
      }
      if (!v5) {
        return;
      }
      if (!*__error())
      {
        uint64_t v10 = 4294960596;
        goto LABEL_21;
      }
      uint64_t v10 = *__error();
      if (v10 != 4)
      {
        if (v10 == -6722) {
          return;
        }
        if (v10) {
          goto LABEL_21;
        }
        break;
      }
    }
  }
  uint64_t v10 = NetSocket_HTTPReadHeader(*(void *)(a1 + 24), a1 + 160, 0xFFFFFFFFLL);
  if (!v10)
  {
    LogHTTP(*(void *)(a1 + 279280), *(int **)(a1 + 279288), (unsigned __int8 *)(a1 + 160), *(void *)(a1 + 8352), 0, 0, v8, v9);
    int v11 = *(unsigned __int8 *)(a1 + 8632);
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 8) + 64))(a1);
    if (!v10)
    {
      if (!v11)
      {
LABEL_19:
        NetSocket_Disconnect(*(void *)(a1 + 24), 3u);
        goto LABEL_25;
      }
      uint64_t v10 = HTTPHeader_Parse(a1 + 139720);
      if (!v10)
      {
        if (*(unsigned char *)(a1 + 148192)) {
          return;
        }
        goto LABEL_19;
      }
    }
  }
LABEL_21:
  uint64_t v12 = *(int **)(*(void *)(a1 + 8) + 216);
  if (*v12 <= 20)
  {
    if (*v12 == -1)
    {
      if (!_LogCategory_Initialize((uint64_t)v12, 0x14u)) {
        goto LABEL_25;
      }
      uint64_t v12 = *(int **)(*(void *)(a1 + 8) + 216);
    }
    LogPrintF((uint64_t)v12, (uint64_t)"void __HTTPServer_ReadHandler(void *)", 0x14u, (uint64_t)"### Connection read error: %#m\n", v6, v7, v8, v9, v10);
  }
LABEL_25:
  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 152));
}

int *__HTTPServer_ListenerFinalizer(uint64_t a1)
{
  uint64_t result = (int *)*(unsigned int *)(a1 + 8);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = (int *)close((int)result);
    if (result)
    {
      uint64_t result = __error();
      if (*result) {
        uint64_t result = __error();
      }
    }
    *(_DWORD *)(a1 + 8) = -1;
  }
  return result;
}

NSObject *__HTTPServer_Finalizer(uint64_t a1)
{
  uint64_t result = *(NSObject **)(a1 + 120);
  if (result) {
    return dispatch_semaphore_signal(result);
  }
  return result;
}

uint64_t HTTPServer_GetNextURLSegment(uint64_t *a1, unint64_t *a2, void *a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10 = a1[1066];
  unint64_t v11 = a1[1067];
  if (v10 >= v11 || *(unsigned char *)v10 == 47) {
    goto LABEL_26;
  }
  uint64_t v12 = 0;
  timeval v13 = (unsigned char *)a1[1067];
  while (~v10 + v11 != v12)
  {
    int v14 = *(unsigned __int8 *)(v10 + v12++ + 1);
    if (v14 == 47)
    {
      timeval v13 = (unsigned char *)(v10 + v12);
      break;
    }
  }
  if (v13 == (unsigned char *)v10)
  {
LABEL_26:
    if (a1[1051])
    {
      if (gLogCategory_HTTPServer <= 50
        && (gLogCategory_HTTPServer != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_HTTPServer, 0x32u)))
      {
        LogPrintF((uint64_t)&gLogCategory_HTTPServer, (uint64_t)"Boolean HTTPServer_GetNextURLSegment(HTTPServerConnectionRef, const char **, size_t *, OSStatus *)", 0x32u, (uint64_t)"### HTTP URL segment not found: '%.*s %.*s'\n", a5, a6, a7, a8, a1[1048]);
      }
    }
    else if (gLogCategory_HTTPServer <= 60 {
           && (gLogCategory_HTTPServer != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_HTTPServer, 0x3Cu)))
    }
    {
      LogPrintF((uint64_t)&gLogCategory_HTTPServer, (uint64_t)"Boolean HTTPServer_GetNextURLSegment(HTTPServerConnectionRef, const char **, size_t *, OSStatus *)", 0x3Cu, (uint64_t)"### Corrupt HTTP request:\n%.*s\n", a5, a6, a7, a8, a1[1044]);
    }
    int v15 = HTTPServer_SendStatusResponse((uint64_t)a1, 400, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    uint64_t v17 = 0;
  }
  else
  {
    int v15 = 0;
    *a2 = v10;
    *a3 = &v13[-v10];
    if ((unint64_t)v13 >= v11) {
      uint64_t v16 = (uint64_t)v13;
    }
    else {
      uint64_t v16 = (uint64_t)(v13 + 1);
    }
    a1[1066] = v16;
    uint64_t v17 = 1;
  }
  *a4 = v15;
  return v17;
}

uint64_t HTTPServer_SendStatusResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = HTTPServer_InitResponse(a1, a2, a3, a4, a5, a6, a7, a8);
  if (!result)
  {
    HTTPHeader_SetField((char *)(a1 + 139720), "Content-Length", (uint64_t)"0", v10, v11, v12, v13, v14, v18);
    uint64_t result = HTTPHeader_Commit(a1 + 139720);
    if (!result)
    {
      LogHTTP(*(void *)(a1 + 279280), *(int **)(a1 + 279288), (unsigned __int8 *)(a1 + 139720), *(void *)(a1 + 147912), 0, 0, v15, v16);
      uint64_t v17 = *(uint64_t (**)(void))(*(void *)(a1 + 24) + 32);
      return v17();
    }
  }
  return result;
}

uint64_t HTTPServer_InitResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = (char *)(a1 + 139720);
  HTTPHeader_InitResponseEx(a1 + 139720, "HTTP/1.1", a2, 0, 0, a6, a7, a8);
  time_t v11 = time(0);
  uint64_t v12 = HTTPMakeDateString(v11, v20, 0x40uLL);
  if (*v12) {
    HTTPHeader_SetField(v10, "Date", (uint64_t)"%s", v13, v14, v15, v16, v17, (char)v12);
  }
  char v18 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 8) + 72);
  if (!v18) {
    return 0;
  }
  uint64_t result = v18(a1, a2);
  if (!result) {
    return 0;
  }
  return result;
}

uint64_t HTTPServer_GetOrCopyFormVariable(unint64_t *a1, unsigned __int8 *a2, void *a3, void *a4, char **a5)
{
  uint64_t result = URLGetOrCopyVariable(a1[1062], (unsigned char *)(a1[1062] + a1[1063]), a2, a3, a4, a5, 0);
  if (result)
  {
    time_t v11 = (char *)a1 + a1[17464] + 8640;
    return URLGetOrCopyVariable((unint64_t)(a1 + 1080), v11, a2, a3, a4, a5, 0);
  }
  return result;
}

uint64_t HTTPServer_SendSimpleResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = HTTPServer_InitResponse(a1, a2, a3, a4, a5, a6, a7, a8);
  if (!result)
  {
    if (a3) {
      HTTPHeader_SetField((char *)(a1 + 139720), "Content-Type", (uint64_t)"%s", v13, v14, v15, v16, v17, a3);
    }
    HTTPHeader_SetField((char *)(a1 + 139720), "Content-Length", (uint64_t)"%zu", v13, v14, v15, v16, v17, a5);
    uint64_t result = HTTPHeader_Commit(a1 + 139720);
    if (!result)
    {
      LogHTTP(*(void *)(a1 + 279280), *(int **)(a1 + 279288), (unsigned __int8 *)(a1 + 139720), *(void *)(a1 + 147912), a4, a5, v18, v19);
      return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 40))();
    }
  }
  return result;
}

uint64_t HTTPServer_SendUnauthorizedResponse(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = HTTPServer_InitResponse(a1, 401, a3, a4, a5, a6, a7, a8);
  if (!result)
  {
    HTTPHeader_SetField((char *)(a1 + 139720), "Content-Length", (uint64_t)"0", v11, v12, v13, v14, v15, v24);
    HTTPHeader_SetField((char *)(a1 + 139720), "WWW-Authenticate", (uint64_t)"Digest realm=\"%s\", nonce=\"%s\"%s", v16, v17, v18, v19, v20, a2);
    uint64_t result = HTTPHeader_Commit(a1 + 139720);
    if (!result)
    {
      LogHTTP(*(void *)(a1 + 279280), *(int **)(a1 + 279288), (unsigned __int8 *)(a1 + 139720), *(void *)(a1 + 147912), 0, 0, v21, v22);
      uint64_t v23 = *(uint64_t (**)(void))(*(void *)(a1 + 24) + 32);
      return v23();
    }
  }
  return result;
}

uint64_t HTTPHeader_InitRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return HTTPHeader_InitRequestF(a1, a4, a2, (uint64_t)"%s", a5, a6, a7, a8, a3);
}

uint64_t HTTPHeader_InitRequestF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return HTTPHeader_InitRequestV(a1, a2, a3, a4, (uint64_t)&a9, a6, a7, a8);
}

uint64_t HTTPHeader_InitRequestV(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = SNPrintF(a1, 0x2000, (uint64_t)"%s%n %n%V%n %s\r\n", a4, a5, a6, a7, a8, a3);
  if (v9 - 0x2000 < 0xFFFFE001)
  {
    uint64_t result = 4294960545;
  }
  else
  {
    unsigned int v10 = v9;
    uint64_t result = 0;
    *(void *)(a1 + 8216) = a1;
    *(void *)(a1 + 8224) = 0;
    *(void *)(a1 + 8240) = a1;
    *(void *)(a1 + 8248) = 0;
    *(void *)(a1 + 0x2000) = v10;
  }
  *(_DWORD *)(a1 + 8476) = result;
  return result;
}

uint64_t HTTPHeader_InitResponse(uint64_t a1, const char *a2, int a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return HTTPHeader_InitResponseEx(a1, a2, a3, a4, 0, a6, a7, a8);
}

uint64_t HTTPHeader_InitResponseEx(uint64_t a1, const char *a2, int a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a5;
  if (a2) {
    unsigned int v10 = a2;
  }
  else {
    unsigned int v10 = "HTTP/1.1";
  }
  if (a4)
  {
    if (a5)
    {
LABEL_6:
      unsigned int v11 = SNPrintF(a1, 0x2000, (uint64_t)"%s %u %s (%d)\r\n", (uint64_t)a4, a5, a6, a7, a8, (uint64_t)v10);
      goto LABEL_9;
    }
  }
  else
  {
    a4 = HTTPGetReasonPhrase(a3);
    if (v8) {
      goto LABEL_6;
    }
  }
  unsigned int v11 = SNPrintF(a1, 0x2000, (uint64_t)"%s %u %s\r\n", (uint64_t)a4, a5, a6, a7, a8, (uint64_t)v10);
LABEL_9:
  if (v11 - 0x2000 < 0xFFFFE001)
  {
    uint64_t v12 = 4294960545;
  }
  else
  {
    uint64_t v12 = 0;
    *(void *)(a1 + 0x2000) = v11;
  }
  *(_DWORD *)(a1 + 8476) = v12;
  return v12;
}

uint64_t HTTPHeader_Commit(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8476);
  if (!v1)
  {
    uint64_t v2 = *(void *)(a1 + 0x2000);
    if (v2 == 4)
    {
      if (*(unsigned char *)a1 == 36)
      {
LABEL_8:
        uint64_t v1 = 0;
        *(_DWORD *)(a1 + 8476) = -6721;
        return v1;
      }
    }
    else
    {
      if (!v2) {
        return 4294960551;
      }
      if ((unint64_t)(v2 - 8190) < 0xFFFFFFFFFFFFE000) {
        return 4294960545;
      }
    }
    *(_WORD *)(a1 + v2) = 2573;
    uint64_t v3 = v2 + 2;
    *(unsigned char *)(a1 + v3) = 0;
    *(void *)(a1 + 0x2000) = v3;
    goto LABEL_8;
  }
  return v1;
}

uint64_t HTTPHeader_Uncommit(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 8476) != -6721) {
    return 4294960587;
  }
  uint64_t v1 = *(void *)(a1 + 0x2000);
  if ((unint64_t)(v1 - 0x2000) < 0xFFFFFFFFFFFFE005) {
    return 4294960553;
  }
  if (*(unsigned char *)(v1 + a1 - 4) != 13) {
    return 4294960554;
  }
  if (*(unsigned char *)(v1 + a1 - 3) != 10) {
    return 4294960554;
  }
  uint64_t v2 = v1 - 2;
  if (*(unsigned char *)(a1 + v1 - 2) != 13 || *(unsigned char *)(v1 + a1 - 1) != 10) {
    return 4294960554;
  }
  uint64_t v3 = 0;
  *(void *)(a1 + 0x2000) = v2;
  *(_DWORD *)(a1 + 8476) = 0;
  return v3;
}

uint64_t HTTPHeader_SetField(char *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return HTTPHeader_SetFieldV(a1, a2, a3, &a9);
}

uint64_t HTTPHeader_SetFieldV(char *__s, char *a2, uint64_t a3, const char *a4)
{
  v26[1] = a4;
  uint64_t result = *((unsigned int *)__s + 2119);
  if (!result)
  {
    int64_t v6 = *((void *)__s + 1024);
    if ((unint64_t)(v6 - 0x2000) < 0xFFFFFFFFFFFFE003)
    {
      uint64_t result = 4294960551;
      goto LABEL_19;
    }
    uint64_t v25 = 0;
    v26[0] = 0;
    if (HTTPGetHeaderField(__s, v6, a2, v26, 0, 0, 0, &v25))
    {
      int v13 = SNPrintF((uint64_t)&__s[v6], 0x2000 - v6, (uint64_t)"%s: %V\r\n", v8, v9, v10, v11, v12, (uint64_t)a2);
      if (v13 >= 1 && v13 < 0x2000 - (int)v6)
      {
        unsigned int v15 = v13;
        uint64_t result = 0;
        *((void *)__s + 1024) += v15;
        return result;
      }
      goto LABEL_17;
    }
    unsigned int v16 = MemPrintF(0, 0, "%s: %V\r\n", v8, v9, v10, v11, v12, (uint64_t)a2);
    if ((int)v16 < 1)
    {
      uint64_t result = 4294960579;
LABEL_19:
      if (!*((_DWORD *)__s + 2119)) {
        *((_DWORD *)__s + 2119) = result;
      }
      return result;
    }
    unint64_t v22 = v6 - (v25 - v26[0]) + v16;
    if (v22 >> 13)
    {
LABEL_17:
      uint64_t result = 4294960545;
      goto LABEL_19;
    }
    uint64_t v23 = (uint64_t (*)(const char *, uint64_t))v16;
    int64_t v24 = v26[0] - (const char *)__s;
    if ((char *)(v25 - v26[0]) != (char *)v16) {
      memmove((void *)&v26[0][v16], v25, v6 - (v25 - __s) + 1);
    }
    MemPrintF((uint64_t (*)(const char *, uint64_t))&__s[v24], v23, "%s: %V\r\n", v17, v18, v19, v20, v21, (uint64_t)a2);
    uint64_t result = 0;
    *((void *)__s + 1024) = v22;
  }
  return result;
}

uint64_t HTTPGetHeaderField(char *__s, int64_t a2, char *a3, const char **a4, size_t *a5, const char **a6, void *a7, char **a8)
{
  int64_t v14 = a2;
  unsigned int v15 = __s;
  if (a2 == -1)
  {
    int64_t v14 = strlen(__s);
    if (a3) {
      goto LABEL_3;
    }
LABEL_5:
    size_t v16 = 0;
    goto LABEL_6;
  }
  if (!a3) {
    goto LABEL_5;
  }
LABEL_3:
  size_t v16 = strlen(a3);
LABEL_6:
  if (v14 < 1) {
    return 4294960569;
  }
  int v33 = a8;
  uint64_t v17 = &v15[v14];
  while (1)
  {
    uint64_t v18 = 0;
    uint64_t v19 = v15;
    uint64_t v20 = v15;
    while (1)
    {
      int v21 = *v20;
      if (v21 == 10 || v21 == 13) {
        break;
      }
      ++v20;
      ++v18;
      if (v20 >= v17) {
        return 4294960569;
      }
    }
    if (v21 == 13) {
      unsigned int v15 = v20 + 1;
    }
    else {
      unsigned int v15 = v20;
    }
    if (v15 < v17 && *v15 == 10) {
      ++v15;
    }
    if (!a3) {
      break;
    }
    if (v20 - v19 > v16 && v19[v16] == 58 && !strncasecmp(v19, a3, v16)) {
      goto LABEL_34;
    }
LABEL_30:
    if (v15 >= v17) {
      return 4294960569;
    }
  }
  if (v19 >= v20) {
    goto LABEL_30;
  }
  uint64_t v23 = v19;
  while (*v23 != 58)
  {
    ++v23;
    if (!--v18) {
      goto LABEL_30;
    }
  }
  size_t v16 = v23 - v19;
LABEL_34:
  uint64_t v25 = &v19[v16 + 1];
  if (v25 < v20)
  {
    while (1)
    {
      int v26 = *(unsigned __int8 *)v25;
      if (v26 != 32 && v26 != 9) {
        break;
      }
      if (++v25 >= v20)
      {
        uint64_t v25 = v20;
        break;
      }
    }
  }
  while (v15 < v17)
  {
    int v28 = *v15;
    if (v28 != 32 && v28 != 9) {
      break;
    }
    uint64_t v30 = v15 + 1;
    do
    {
      uint64_t v20 = v30;
      if (v30 >= v17)
      {
        unsigned int v15 = v30;
        goto LABEL_58;
      }
      int v31 = *v30++;
    }
    while (v31 != 13 && v31 != 10);
    if (v31 == 13) {
      unsigned int v15 = v20 + 1;
    }
    else {
      unsigned int v15 = v20;
    }
LABEL_58:
    if (v15 < v17 && *v15 == 10) {
      ++v15;
    }
  }
  if (a4) {
    *a4 = v19;
  }
  if (a5) {
    *a5 = v16;
  }
  if (a6) {
    *a6 = v25;
  }
  if (a7) {
    *a7 = v20 - v25;
  }
  uint64_t result = 0;
  if (v33) {
    *int v33 = v15;
  }
  return result;
}

uint64_t HTTPHeader_SetField_safe(char *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return HTTPHeader_SetFieldV(a1, a2, a3, &a9);
}

uint64_t HTTPHeader_Parse(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 0x2000);
  if (v1 >> 13) {
    return 4294960591;
  }
  *(void *)(a1 + 8216) = "";
  *(void *)(a1 + 8224) = 0;
  uint64_t v3 = (unsigned char *)(a1 + 8456);
  *(_DWORD *)(a1 + 8232) = 0;
  *(void *)(a1 + 8240) = "";
  int v4 = (void *)(a1 + 8248);
  *(void *)(a1 + 8408) = 0;
  *(_OWORD *)(a1 + 8248) = 0u;
  *(_OWORD *)(a1 + 8264) = 0u;
  *(_OWORD *)(a1 + 8280) = 0u;
  *(_OWORD *)(a1 + 8296) = 0u;
  *(_OWORD *)(a1 + 8312) = 0u;
  *(_OWORD *)(a1 + 8328) = 0u;
  *(_OWORD *)(a1 + 8344) = 0u;
  *(_OWORD *)(a1 + 8360) = 0u;
  *(_OWORD *)(a1 + 8376) = 0u;
  *(_OWORD *)(a1 + 8392) = 0u;
  *(void *)(a1 + 8416) = "";
  *(void *)(a1 + 8424) = 0;
  *(_DWORD *)(a1 + 8432) = -1;
  *(void *)(a1 + 8440) = "";
  *(void *)(a1 + 8448) = 0;
  *(unsigned char *)(a1 + 8456) = 0;
  *(void *)(a1 + 8464) = 0;
  *(unsigned char *)(a1 + 8472) = 0;
  if (!v1) {
    return 4294960554;
  }
  if (v1 == 4 && *(unsigned char *)a1 == 36)
  {
    uint64_t result = 0;
    *uint64_t v3 = *(unsigned char *)(a1 + 1);
    *(void *)(a1 + 8464) = __rev16(*(unsigned __int16 *)(a1 + 2));
    *(void *)(a1 + 8216) = a1;
    *(void *)(a1 + 8224) = 1;
    return result;
  }
  uint64_t v6 = 0;
  uint64_t v7 = (void *)(a1 + 8424);
  size_t v38 = 0;
  uint64_t v39 = 0;
  int v8 = a1 + 8464;
  unint64_t v9 = a1 + v1;
  unint64_t v10 = v1 - 1;
  while (1)
  {
    int v11 = *(unsigned __int8 *)(a1 + v6);
    if (v11 == 32) {
      break;
    }
    if (v11 == 47)
    {
      *(void *)(a1 + 8416) = a1;
      int64_t v14 = (unsigned __int8 *)(a1 + v6 + 2);
      do
      {
        if ((unint64_t)(v14 - 1) >= v9)
        {
          *(void *)(a1 + 8424) = &v14[-a1 - 1];
          return 4294960554;
        }
        size_t v16 = v14 - 1;
        int v15 = *(v14++ - 1);
      }
      while (v15 != 32);
      *(void *)(a1 + 8424) = &v16[-a1];
      uint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >= v9)
      {
        *(_DWORD *)(a1 + 8432) = 0;
      }
      else
      {
        unsigned __int8 v18 = *v17;
        if ((*v17 - 48) <= 9u)
        {
          int v19 = 0;
          while (1)
          {
            int v19 = 10 * v19 + v18 - 48;
            if ((unint64_t)v14 >= v9) {
              break;
            }
            unsigned __int8 v20 = *v14++;
            unsigned __int8 v18 = v20;
            if ((v20 - 48) > 9u)
            {
              size_t v16 = v14 - 2;
              uint64_t v17 = v14 - 1;
              goto LABEL_49;
            }
          }
          *(_DWORD *)(a1 + 8432) = v19;
          *(void *)(a1 + 8440) = v9;
          uint64_t v17 = (unsigned __int8 *)(a1 + v1);
          int v26 = (unsigned __int8 *)(a1 + v1);
          goto LABEL_66;
        }
        int v19 = 0;
LABEL_49:
        *(_DWORD *)(a1 + 8432) = v19;
        if (v18 == 32) {
          uint64_t v17 = v16 + 2;
        }
      }
      *(void *)(a1 + 8440) = v17;
      int v26 = v17;
      if ((unint64_t)v17 >= v9)
      {
LABEL_66:
        *(void *)(a1 + 8448) = v26 - v17;
        return 4294960554;
      }
      int v26 = (unsigned __int8 *)(v1 + a1);
      uint64_t v27 = v1 + a1 - (void)v17;
      uint64_t v23 = v17;
      while (1)
      {
        int v28 = *v23;
        if (v28 == 10 || v28 == 13) {
          break;
        }
        ++v23;
        if (!--v27) {
          goto LABEL_66;
        }
      }
      uint64_t v7 = (void *)(a1 + 8448);
      goto LABEL_60;
    }
    ++v6;
    if (a1 + v6 >= v9) {
      return 4294960554;
    }
  }
  int v37 = a1 + 8464;
  *(void *)(a1 + 8216) = a1;
  uint64_t v39 = v6;
  *(void *)(a1 + 8224) = v6;
  uint64_t v12 = (char *)(a1 + v6 + 1);
  if (strnicmpx((unsigned __int8 *)a1, v6, "GET"))
  {
    if (strnicmpx((unsigned __int8 *)a1, v6, "POST"))
    {
      if (strnicmpx((unsigned __int8 *)a1, v6, "PUT"))
      {
        if (strnicmpx((unsigned __int8 *)a1, v6, "DELETE")) {
          goto LABEL_31;
        }
        int v13 = 4;
      }
      else
      {
        int v13 = 3;
      }
    }
    else
    {
      int v13 = 2;
    }
  }
  else
  {
    int v13 = 1;
  }
  *(_DWORD *)(a1 + 8232) = v13;
LABEL_31:
  *(void *)(a1 + 8240) = v12;
  if ((unint64_t)v12 >= v9)
  {
    unint64_t v9 = (unint64_t)v12;
LABEL_37:
    *int v4 = v9 - (void)v12;
    return 4294960554;
  }
  unint64_t v21 = v10 - v6;
  unint64_t v22 = v12;
  while (*v22 != 32)
  {
    ++v22;
    if (!--v21) {
      goto LABEL_37;
    }
  }
  *(void *)(a1 + 8248) = v22 - v12;
  uint64_t v17 = (unsigned __int8 *)(v22 + 1);
  URLParseComponents(v12, v22, (char **)(a1 + 8256), 0);
  *(void *)(a1 + 8416) = v17;
  if ((unint64_t)v17 >= v9)
  {
    unint64_t v9 = (unint64_t)v17;
LABEL_47:
    *uint64_t v7 = v9 - (void)v17;
    return 4294960554;
  }
  uint64_t v23 = v17;
  int v8 = v37;
  while (1)
  {
    int v24 = *v23;
    if (v24 == 10 || v24 == 13) {
      break;
    }
    if ((unint64_t)++v23 >= v9) {
      goto LABEL_47;
    }
  }
LABEL_60:
  *uint64_t v7 = v23 - v17;
  if ((unint64_t)(v23 + 1) >= v9) {
    return 4294960554;
  }
  if (HTTPGetHeaderField((char *)a1, *(void *)(a1 + 0x2000), "Connection", 0, 0, (const char **)&v38, &v39, 0))
  {
    uint64_t v30 = *(unsigned __int8 **)(a1 + 8416);
    uint64_t v31 = *(void *)(a1 + 8424);
    int v32 = "HTTP/1.0";
  }
  else
  {
    uint64_t v30 = (unsigned __int8 *)v38;
    uint64_t v31 = v39;
    int v32 = "close";
  }
  v3[16] = strnicmpx(v30, v31, v32) != 0;
  HTTPScanFHeaderValue((char *)a1, *(void *)(a1 + 0x2000), "Content-Length", "%llu", v33, v34, v35, v36, v8);
  return 0;
}

uint64_t HTTPScanFHeaderValue(char *a1, int64_t a2, char *a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  size_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t result = HTTPGetHeaderField(a1, a2, a3, 0, 0, (const char **)&v12, &v11, 0);
  if (!result) {
    return VSNScanF(v12, v11, a4, &a9);
  }
  return result;
}

uint64_t HTTPParseParameter(char *a1, char *a2, char **a3, void *a4, char **a5, void *a6, char *a7, char **a8)
{
  if (a1 >= a2) {
    return 4294960544;
  }
  size_t v11 = a1;
  int64_t v12 = a2 - a1;
  uint64_t v13 = MEMORY[0x1E4F14390];
  do
  {
    uint64_t v14 = *v11;
    if (*v11 < 0)
    {
      if (!__maskrune(v14, 0x4000uLL))
      {
LABEL_9:
        int v15 = v11;
        while (1)
        {
          int v16 = *v15;
          if ((v16 - 127) < 0xFFFFFFA1 || memchr("()<>@,;:\\\"[]?={} \t", v16, 0x13uLL)) {
            goto LABEL_14;
          }
          ++v15;
          if (!--v12) {
            goto LABEL_13;
          }
        }
      }
    }
    else if ((*(_DWORD *)(v13 + 4 * v14 + 60) & 0x4000) == 0)
    {
      goto LABEL_9;
    }
    ++v11;
    --v12;
  }
  while (v12);
  size_t v11 = a2;
LABEL_13:
  int v15 = a2;
LABEL_14:
  if (v15 >= a2)
  {
    unsigned __int8 v20 = 0;
    uint64_t v17 = 0;
    unsigned __int8 v18 = v15;
    goto LABEL_55;
  }
  uint64_t v17 = (char *)(a2 - v15);
  unsigned __int8 v18 = v15;
  while (1)
  {
    uint64_t v19 = *v18;
    if ((*v18 & 0x80000000) == 0)
    {
      if ((*(_DWORD *)(v13 + 4 * v19 + 60) & 0x4000) == 0) {
        break;
      }
      goto LABEL_20;
    }
    if (!__maskrune(v19, 0x4000uLL)) {
      break;
    }
LABEL_20:
    ++v18;
    if (!--v17)
    {
      unsigned __int8 v20 = 0;
LABEL_22:
      unsigned __int8 v18 = a2;
      goto LABEL_55;
    }
  }
  unint64_t v21 = v18 + 1;
  if (*v18 == 61)
  {
    do
    {
      unsigned __int8 v20 = v21;
      if (v21 >= a2)
      {
        unsigned __int8 v18 = v21;
        uint64_t v17 = v21;
        goto LABEL_47;
      }
      uint64_t v22 = *v21;
      if (*v21 < 0) {
        int v23 = __maskrune(v22, 0x4000uLL);
      }
      else {
        int v23 = *(_DWORD *)(v13 + 4 * v22 + 60) & 0x4000;
      }
      --v17;
      unint64_t v21 = v20 + 1;
    }
    while (v23);
    if (*v20 == 34)
    {
      if (++v20 >= a2) {
        return 4294960554;
      }
      uint64_t v17 = v20;
      uint64_t result = 4294960554;
      while (*v17 != 34 || *(v17 - 1) == 92)
      {
        if (++v17 >= a2) {
          return result;
        }
      }
      unsigned __int8 v18 = v17 + 1;
    }
    else
    {
      unsigned __int8 v18 = v20;
      while (1)
      {
        int v25 = *v18;
        if ((v25 - 127) < 0xFFFFFFA1 || memchr("()<>@,;:\\\"[]?={} \t", v25, 0x13uLL)) {
          break;
        }
        ++v18;
        if (!--v17)
        {
          unsigned __int8 v18 = a2;
          uint64_t v17 = a2;
          goto LABEL_47;
        }
      }
      uint64_t v17 = v18;
    }
LABEL_47:
    if (v18 < a2)
    {
      int64_t v26 = a2 - v18;
      do
      {
        uint64_t v27 = *v18;
        if (*v18 < 0)
        {
          if (!__maskrune(v27, 0x4000uLL)) {
            goto LABEL_55;
          }
        }
        else if ((*(_DWORD *)(v13 + 4 * v27 + 60) & 0x4000) == 0)
        {
          goto LABEL_55;
        }
        ++v18;
        --v26;
      }
      while (v26);
      goto LABEL_22;
    }
  }
  else
  {
    unsigned __int8 v20 = 0;
    uint64_t v17 = 0;
  }
LABEL_55:
  if (v18 < a2 && (char v28 = *v18, memchr("()<>@,;:\\\"[]?={} \t", *v18, 0x13uLL)))
  {
    uint64_t v29 = v18 + 1;
    do
    {
      unsigned __int8 v18 = v29;
      if (v29 >= a2) {
        break;
      }
      uint64_t v30 = *v29;
      int v31 = *v29 < 0 ? __maskrune(v30, 0x4000uLL) : *(_DWORD *)(v13 + 4 * v30 + 60) & 0x4000;
      uint64_t v29 = v18 + 1;
    }
    while (v31);
  }
  else
  {
    char v28 = 0;
  }
  if (a3) {
    *a3 = v11;
  }
  if (a4) {
    *a4 = v15 - v11;
  }
  if (a5) {
    *a5 = v20;
  }
  if (a6) {
    *a6 = v17 - v20;
  }
  if (a7) {
    *a7 = v28;
  }
  uint64_t result = 0;
  if (a8) {
    *a8 = v18;
  }
  return result;
}

const char *HTTPMakeDateString(time_t a1, char *a2, size_t a3)
{
  time_t v8 = a1;
  memset(&v7, 0, sizeof(v7));
  int v5 = gmtime_r(&v8, &v7);
  if (!v5) {
    return "";
  }
  *a2 = 0;
  strftime(a2, a3, "%a, %d %b %Y %H:%M:%S GMT", v5);
  return a2;
}

uint64_t HTTPParseByteRangeRequest(char *__s, int64_t a2, uint64_t *a3, uint64_t *a4)
{
  if (a2 == -1) {
    a2 = strlen(__s);
  }
  if ((unint64_t)a2 < 6) {
    return 4294960546;
  }
  if (*(_DWORD *)__s != 1702132066 || *((_WORD *)__s + 2) != 15731) {
    return 4294960540;
  }
  if (a2 < 7) {
    return 4294960546;
  }
  if (__s[6] == 45)
  {
    if ((unint64_t)a2 >= 8)
    {
      uint64_t v8 = 0;
      unint64_t v9 = 7;
      while (1)
      {
        int v10 = __s[v9];
        if ((v10 - 48) > 9) {
          break;
        }
        uint64_t v8 = (v10 - 48) + 10 * v8;
        if (a2 == ++v9)
        {
          unint64_t v9 = a2;
          break;
        }
      }
      if (v9 >= 8)
      {
        uint64_t v11 = -v8;
LABEL_32:
        uint64_t v17 = -1;
        goto LABEL_33;
      }
    }
    return 4294960559;
  }
  uint64_t v11 = 0;
  unint64_t v12 = 6;
  while (1)
  {
    int v13 = __s[v12];
    if ((v13 - 48) > 9) {
      break;
    }
    uint64_t v11 = (v13 - 48) + 10 * v11;
    if (a2 == ++v12)
    {
      unint64_t v12 = a2;
      break;
    }
  }
  if (v12 < 7) {
    return 4294960559;
  }
  if (v13 != 45) {
    return 4294960554;
  }
  unint64_t v14 = v12 + 1;
  if ((uint64_t)(v12 + 1) >= a2) {
    goto LABEL_32;
  }
  uint64_t v15 = 0;
  while (1)
  {
    int v16 = __s[v14];
    if ((v16 - 48) > 9) {
      break;
    }
    uint64_t v15 = (v16 - 48) + 10 * v15;
    if (a2 == ++v14)
    {
      unint64_t v14 = a2;
      break;
    }
  }
  if (v14 < 7) {
    return 4294960559;
  }
  if (v11 <= v15)
  {
    uint64_t v17 = v15 + 1;
LABEL_33:
    uint64_t result = 0;
    *a3 = v11;
    *a4 = v17;
    return result;
  }
  return 4294960586;
}

uint64_t HTTPParseCacheControlHeader(char *__s, size_t a2, uint64_t a3)
{
  __sa = __s;
  if (a2 == -1) {
    a2 = strlen(__s);
  }
  int v5 = &__s[a2];
  size_t v7 = 0;
  uint64_t v8 = 0;
  while (!HTTPGetHeaderField(__sa, v5 - __sa, "Cache-Control", 0, 0, (const char **)&v8, &v7, &__sa))
  {
    uint64_t result = HTTPParseCacheControlValue(v8, v7, a3);
    if (result) {
      return result;
    }
  }
  return 0;
}

uint64_t HTTPParseCacheControlValue(char *__s, size_t a2, uint64_t a3)
{
  int v4 = __s;
  uint64_t v22 = __s;
  if (a2 == -1) {
    a2 = strlen(__s);
  }
  int v5 = &v4[a2];
  uint64_t v20 = 0;
  unint64_t v21 = 0;
  size_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v17 = 0;
  while (1)
  {
    if (HTTPParseParameter(v4, v5, &v21, &v20, &v19, &v18, 0, &v22)) {
      return 0;
    }
    if (!strnicmpx((unsigned __int8 *)v21, v20, "no-cache"))
    {
      *(unsigned char *)a3 = 1;
      goto LABEL_13;
    }
    if (!strnicmpx((unsigned __int8 *)v21, v20, "max-age")) {
      break;
    }
    if (!strnicmpx((unsigned __int8 *)v21, v20, "s-maxage"))
    {
      if (SNScanF(v19, v18, "%lld", v11, v12, v13, v14, v15, (int)&v17) != 1) {
        return 4294960559;
      }
      *(void *)(a3 + 16) = v17;
    }
LABEL_13:
    int v4 = v22;
  }
  if (SNScanF(v19, v18, "%lld", v6, v7, v8, v9, v10, (int)&v17) == 1)
  {
    *(void *)(a3 + 8) = v17;
    goto LABEL_13;
  }
  return 4294960559;
}

uint64_t HTTPParseRTPInfo(char *a1, int64_t a2, _WORD *a3, _DWORD *a4)
{
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  size_t v24 = 0;
  int v25 = 0;
  int v23 = 0;
  uint64_t result = HTTPGetHeaderField(a1, a2, "RTP-Info", 0, 0, (const char **)&v29, &v28, 0);
  if (!result)
  {
    char v7 = 0;
    char v8 = 0;
    __int16 v9 = 0;
    int v10 = 0;
    uint64_t v11 = v29;
    uint64_t v12 = &v29[v28];
    while (!HTTPParseParameter(v11, v12, &v27, &v26, &v25, &v24, 0, &v29))
    {
      if (strnicmpx((unsigned __int8 *)v27, v26, "seq"))
      {
        if (!strnicmpx((unsigned __int8 *)v27, v26, "rtptime"))
        {
          if (SNScanF(v25, v24, "%u", v18, v19, v20, v21, v22, (int)&v23) != 1) {
            return 4294960554;
          }
          char v8 = 1;
          int v10 = v23;
        }
      }
      else
      {
        if (SNScanF(v25, v24, "%u", v13, v14, v15, v16, v17, (int)&v23) != 1) {
          return 4294960554;
        }
        __int16 v9 = v23;
        char v7 = 1;
      }
      uint64_t v11 = v29;
    }
    if (a3)
    {
      if ((v7 & 1) == 0) {
        return 4294960569;
      }
      *a3 = v9;
    }
    if (a4) {
      uint64_t result = 4294960569;
    }
    else {
      uint64_t result = 0;
    }
    if (((a4 != 0) & v8) == 1)
    {
      uint64_t result = 0;
      *a4 = v10;
    }
  }
  return result;
}

uint64_t HTTPMakeTimedNonce(const void *a1, CC_LONG a2, const void *a3, CC_LONG a4, unsigned char *a5, unint64_t a6, void *a7)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (!a6) {
    return 4294960591;
  }
  memset(&c, 0, sizeof(c));
  uint64_t v24 = 0;
  time_t v14 = time(0);
  CC_LONG v20 = SNPrintF((uint64_t)data, 64, (uint64_t)"%u", v15, v16, v17, v18, v19, v14);
  CC_MD5_Init(&c);
  CC_MD5_Update(&c, data, v20);
  CC_MD5_Update(&c, ":", 1u);
  CC_MD5_Update(&c, a1, a2);
  CC_MD5_Update(&c, ":", 1u);
  CC_MD5_Update(&c, a3, a4);
  uint64_t v21 = &data[v20];
  *uint64_t v21 = 32;
  CC_MD5_Final((unsigned __int8 *)v21 + 1, &c);
  uint64_t result = Base64EncodeEx(data, (int)(v20 + 17), 0, a5, a6, &v24);
  if (!result)
  {
    uint64_t v23 = v24;
    a5[v24] = 0;
    uint64_t result = 0;
    if (a7) {
      *a7 = v23;
    }
  }
  return result;
}

uint64_t HTTPVerifyTimedNonce(char *a1, size_t a2, unsigned int a3, const void *a4, CC_LONG a5, const void *a6, CC_LONG a7)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v22 = 0;
  memset(&v21, 0, sizeof(v21));
  uint64_t result = Base64Decode(a1, a2, data, 64, &v22);
  if (!result)
  {
    int v13 = time(0);
    if (v22 < 1) {
      return 4294960554;
    }
    int v14 = 0;
    uint64_t v15 = &data[v22];
    uint64_t v16 = data;
    while (1)
    {
      int v17 = *v16;
      if ((v17 - 48) > 9) {
        break;
      }
      int v14 = v17 - 48 + 10 * v14;
      if (++v16 >= v15) {
        return 4294960554;
      }
    }
    if (v17 == 32)
    {
      if (v13 - v14 > a3)
      {
        return 4294960574;
      }
      else
      {
        uint64_t v18 = v16 + 1;
        uint64_t v22 = v15 - (v16 + 1);
        if (v22 == 16)
        {
          uint64_t v19 = v16 - data;
          CC_MD5_Init(&v21);
          CC_MD5_Update(&v21, data, v19);
          CC_MD5_Update(&v21, ":", 1u);
          CC_MD5_Update(&v21, a4, a5);
          CC_MD5_Update(&v21, ":", 1u);
          CC_MD5_Update(&v21, a6, a7);
          CC_MD5_Final(md, &v21);
          if (*(void *)md == *v18 && v24 == v18[1]) {
            return 0;
          }
          else {
            return 4294960563;
          }
        }
        else
        {
          return 4294960553;
        }
      }
    }
    else
    {
      return 4294960554;
    }
  }
  return result;
}

double HTTPClientAuthorization_Init(uint64_t a1)
{
  *(_DWORD *)a1 = 0;
  *(unsigned char *)(a1 + 4) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 168) = 0;
  return result;
}

void HTTPClientAuthorization_Free(void *a1)
{
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    free(v2);
    a1[5] = 0;
  }
  a1[6] = 0;
  uint64_t v3 = (void *)a1[7];
  if (v3)
  {
    free(v3);
    a1[7] = 0;
  }
  a1[8] = 0;
  int v4 = (void *)a1[9];
  if (v4)
  {
    free(v4);
    a1[9] = 0;
  }
  a1[10] = 0;
  int v5 = (void *)a1[11];
  if (v5)
  {
    free(v5);
    a1[11] = 0;
  }
  a1[12] = 0;
  uint64_t v6 = (void *)a1[13];
  if (v6)
  {
    free(v6);
    a1[13] = 0;
  }
  a1[14] = 0;
  char v7 = (void *)a1[15];
  if (v7)
  {
    free(v7);
    a1[15] = 0;
  }
  a1[16] = 0;
  char v8 = (void *)a1[17];
  if (v8)
  {
    free(v8);
    a1[17] = 0;
  }
  a1[18] = 0;
  __int16 v9 = (void *)a1[19];
  if (v9)
  {
    free(v9);
    a1[19] = 0;
  }
  a1[20] = 0;
}

uint64_t HTTPClientAuthorization_Apply(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 24);
  if (!v8) {
    return 4294960591;
  }
  uint64_t v10 = *(void *)(a1 + 32);
  if (!v10 || !*(void *)(v8 + 8224) || !*(void *)(v8 + 8248)) {
    return 4294960591;
  }
  if (*(_DWORD *)(v10 + 8432) != 401)
  {
    uint64_t result = *(unsigned int *)(a1 + 168);
    switch(result)
    {
      case 0:
        return result;
      case 1:
        return _HTTPAddBasicAuth(a1, a2, a3, a4, a5, a6, a7, a8);
      case 2:
        return _HTTPAddDigestAuth(a1);
    }
    return 4294960591;
  }
  int64_t v37 = 0;
  size_t v38 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  HTTPClientAuthorization_Free((void *)a1);
  if (HTTPGetHeaderField(*(char **)(a1 + 32), *(void *)(*(void *)(a1 + 32) + 0x2000), "WWW-Authenticate", 0, 0, (const char **)&v38, &v37, 0))return 4294960554; {
  int64_t v13 = v37;
  }
  uint64_t v12 = v38;
  int v14 = &v38[v37];
  uint64_t v15 = v38;
  if (v37 >= 1)
  {
    uint64_t v15 = v38;
    while (1)
    {
      int v16 = *v15;
      if ((v16 - 127) < 0xFFFFFFA1 || memchr("()<>@,;:\\\"[]?={} \t", v16, 0x13uLL)) {
        break;
      }
      ++v15;
      if (!--v13)
      {
        uint64_t v15 = v14;
        break;
      }
    }
  }
  uint64_t v36 = v15;
  int v17 = strndup(v12, v15 - v12);
  if (!v17) {
    return 4294960568;
  }
  *(void *)(a1 + 56) = v17;
  *(void *)(a1 + 64) = v15 - v12;
  while (!HTTPParseParameter(v15, v14, &v35, &v34, &v38, &v37, 0, &v36))
  {
    uint64_t v18 = strndup(v38, v37);
    if (!v18) {
      return 4294960568;
    }
    uint64_t v19 = v18;
    if (strnicmpx((unsigned __int8 *)v35, v34, "realm"))
    {
      if (strnicmpx((unsigned __int8 *)v35, v34, "nonce"))
      {
        if (strnicmpx((unsigned __int8 *)v35, v34, "qop"))
        {
          if (strnicmpx((unsigned __int8 *)v35, v34, "algorithm"))
          {
            if (strnicmpx((unsigned __int8 *)v35, v34, "domain"))
            {
              if (strnicmpx((unsigned __int8 *)v35, v34, "opaque"))
              {
                if (strnicmpx((unsigned __int8 *)v35, v34, "stale"))
                {
                  free(v19);
                }
                else
                {
                  int64_t v26 = v37;
                  *(void *)(a1 + 152) = v19;
                  *(void *)(a1 + 160) = v26;
                }
              }
              else
              {
                int64_t v25 = v37;
                *(void *)(a1 + 104) = v19;
                *(void *)(a1 + 112) = v25;
              }
            }
            else
            {
              int64_t v24 = v37;
              *(void *)(a1 + 72) = v19;
              *(void *)(a1 + 80) = v24;
            }
          }
          else
          {
            int64_t v23 = v37;
            *(void *)(a1 + 40) = v19;
            *(void *)(a1 + 48) = v23;
          }
        }
        else
        {
          int64_t v22 = v37;
          *(void *)(a1 + 136) = v19;
          *(void *)(a1 + 144) = v22;
        }
      }
      else
      {
        int64_t v21 = v37;
        *(void *)(a1 + 88) = v19;
        *(void *)(a1 + 96) = v21;
      }
    }
    else
    {
      int64_t v20 = v37;
      *(void *)(a1 + 120) = v19;
      *(void *)(a1 + 128) = v20;
    }
    uint64_t v15 = v36;
  }
  if (!strnicmpx(*(unsigned __int8 **)(a1 + 56), *(void *)(a1 + 64), "Basic")) {
    return _HTTPAddBasicAuth(a1, v27, v28, v29, v30, v31, v32, v33);
  }
  if (strnicmpx(*(unsigned __int8 **)(a1 + 56), *(void *)(a1 + 64), "Digest")) {
    return 4294960561;
  }
  return _HTTPAddDigestAuth(a1);
}

uint64_t _HTTPAddDigestAuth(uint64_t a1)
{
  unsigned char v14[5] = *(const char **)MEMORY[0x1E4F143B8];
  if ((*(unsigned char *)a1 & 2) == 0) {
    return 4294960561;
  }
  uint64_t v2 = *(const char **)(a1 + 8);
  if (!v2) {
    return 4294960542;
  }
  uint64_t v3 = *(const char **)(a1 + 16);
  if (!v3) {
    return 4294960542;
  }
  if (*(_DWORD *)(*(void *)(a1 + 32) + 8432) != 401) {
    goto LABEL_10;
  }
  uint64_t v13 = 0;
  v14[0] = 0;
  HTTPGetHeaderField(*(char **)(a1 + 24), *(void *)(*(void *)(a1 + 24) + 0x2000), "Authorization", 0, 0, v14, &v13, 0);
  if (v13 && strnicmpx(*(unsigned __int8 **)(a1 + 152), *(void *)(a1 + 160), "true")) {
    return 4294960542;
  }
  uint64_t result = HTTPHeader_Uncommit(*(void *)(a1 + 24));
  if (!result)
  {
    uint64_t v2 = *(const char **)(a1 + 8);
    uint64_t v3 = *(const char **)(a1 + 16);
LABEL_10:
    CC_LONG v5 = strlen(v2);
    CC_LONG v6 = strlen(v3);
    if (*(unsigned char *)(a1 + 4)) {
      char v7 = "0123456789ABCDEF";
    }
    else {
      char v7 = "0123456789abcdef";
    }
    _HTTPMakeAuthDigest(v2, v5, v3, v6, *(const void **)(*(void *)(a1 + 24) + 8216), *(void *)(*(void *)(a1 + 24) + 8224), *(const void **)(*(void *)(a1 + 24) + 8240), *(void *)(*(void *)(a1 + 24) + 8248), *(const void **)(a1 + 120), *(void *)(a1 + 128), *(const void **)(a1 + 88), *(void *)(a1 + 96), (uint64_t)v7, v14);
    uint64_t result = HTTPHeader_SetField(*(char **)(a1 + 24), "Authorization", (uint64_t)"Digest username=\"%s\", realm=\"%.*s\", nonce=\"%.*s\", uri=\"%.*s\", response=\"%s\"", v8, v9, v10, v11, v12, *(void *)(a1 + 8));
    if (!result) {
      *(_DWORD *)(a1 + 168) = 2;
    }
  }
  return result;
}

uint64_t _HTTPAddBasicAuth(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((*(unsigned char *)a1 & 1) == 0) {
    return 4294960561;
  }
  uint64_t v9 = *(void *)(a1 + 8);
  if (!v9 || !*(void *)(a1 + 16)) {
    return 4294960542;
  }
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  ASPrintF((void **)&v32, (uint64_t)"%s:%s", a3, a4, a5, a6, a7, a8, v9);
  uint64_t v10 = v32;
  if (!v32) {
    return 4294960568;
  }
  uint64_t v11 = Base64EncodeCopyEx(v32, 0xFFFFFFFFFFFFFFFFLL, 0, &v31, 0);
  free(v10);
  if (v11) {
    return v11;
  }
  uint64_t v30 = 0;
  uint64_t v19 = v31;
  ASPrintF((void **)&v30, (uint64_t)"Basic %s", v12, v13, v14, v15, v16, v17, (uint64_t)v31);
  free(v19);
  int64_t v25 = v30;
  if (!v30) {
    return 4294960568;
  }
  if (*(_DWORD *)(*(void *)(a1 + 32) + 8432) == 401)
  {
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    HTTPGetHeaderField(*(char **)(a1 + 24), *(void *)(*(void *)(a1 + 24) + 0x2000), "Authorization", 0, 0, &v29, &v28, 0);
    uint64_t v26 = 0;
    while (v28 != v26)
    {
      int v27 = v25[v26];
      if (v29[v26] != v27) {
        goto LABEL_15;
      }
      ++v26;
      if (!v27) {
        goto LABEL_18;
      }
    }
    if (!v25[v28])
    {
LABEL_18:
      uint64_t v11 = 4294960542;
      goto LABEL_19;
    }
LABEL_15:
    uint64_t v11 = HTTPHeader_Uncommit(*(void *)(a1 + 24));
    if (!v11) {
      goto LABEL_16;
    }
LABEL_19:
    free(v25);
  }
  else
  {
LABEL_16:
    uint64_t v11 = HTTPHeader_SetField(*(char **)(a1 + 24), "Authorization", (uint64_t)"%s", v20, v21, v22, v23, v24, (char)v25);
    free(v25);
    if (!v11) {
      *(_DWORD *)(a1 + 168) = 1;
    }
  }
  return v11;
}

uint64_t _HTTPMakeAuthDigest(const void *a1, CC_LONG a2, const void *a3, CC_LONG a4, const void *a5, CC_LONG a6, const void *a7, CC_LONG a8, const void *a9, CC_LONG a10, const void *a11, CC_LONG a12, uint64_t a13, unsigned char *a14)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  memset(&c, 0, sizeof(c));
  CC_MD5_Init(&c);
  CC_MD5_Update(&c, a1, a2);
  CC_MD5_Update(&c, ":", 1u);
  CC_MD5_Update(&c, a9, a10);
  CC_MD5_Update(&c, ":", 1u);
  CC_MD5_Update(&c, a3, a4);
  CC_MD5_Final(md, &c);
  uint64_t v21 = 0;
  uint64_t v22 = __s;
  do
  {
    unint64_t v23 = md[v21];
    *uint64_t v22 = *(unsigned char *)(a13 + (v23 >> 4));
    v22[1] = *(unsigned char *)(a13 + (v23 & 0xF));
    v22 += 2;
    ++v21;
  }
  while (v21 != 16);
  *uint64_t v22 = 0;
  CC_MD5_Init(&c);
  CC_MD5_Update(&c, a5, a6);
  CC_MD5_Update(&c, ":", 1u);
  CC_MD5_Update(&c, a7, a8);
  CC_MD5_Final(md, &c);
  uint64_t v24 = 0;
  int64_t v25 = data;
  do
  {
    unint64_t v26 = md[v24];
    *int64_t v25 = *(unsigned char *)(a13 + (v26 >> 4));
    v25[1] = *(unsigned char *)(a13 + (v26 & 0xF));
    v25 += 2;
    ++v24;
  }
  while (v24 != 16);
  *int64_t v25 = 0;
  CC_MD5_Init(&c);
  CC_LONG v27 = strlen(__s);
  CC_MD5_Update(&c, __s, v27);
  CC_MD5_Update(&c, ":", 1u);
  CC_MD5_Update(&c, a11, a12);
  CC_MD5_Update(&c, ":", 1u);
  CC_LONG v28 = strlen(data);
  CC_MD5_Update(&c, data, v28);
  uint64_t result = CC_MD5_Final(md, &c);
  for (uint64_t i = 0; i != 16; ++i)
  {
    unint64_t v31 = md[i];
    *a14 = *(unsigned char *)(a13 + (v31 >> 4));
    a14[1] = *(unsigned char *)(a13 + (v31 & 0xF));
    a14 += 2;
  }
  *a14 = 0;
  return result;
}

uint64_t HTTPVerifyAuthorization(uint64_t a1)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  CFUUIDBytes __s = 0;
  if (!*(_DWORD *)a1) {
    return 200;
  }
  uint64_t v47 = 0;
  int v48 = 0;
  uint64_t v46 = 0;
  int64_t v44 = 0;
  if (HTTPGetHeaderField(*(char **)(a1 + 64), *(void *)(a1 + 72), "Authorization", 0, 0, (const char **)&v48, &v47, 0))return 401; {
  uint64_t v3 = v47;
  }
  uint64_t v2 = (unsigned __int8 *)v48;
  int v4 = &v48[v47];
  CC_LONG v5 = v48;
  if (v47 >= 1)
  {
    CC_LONG v5 = v48;
    while (1)
    {
      int v6 = *v5;
      if ((v6 - 127) < 0xFFFFFFA1 || memchr("()<>@,;:\\\"[]?={} \t", v6, 0x13uLL)) {
        break;
      }
      ++v5;
      if (!--v3)
      {
        CC_LONG v5 = v4;
        break;
      }
    }
  }
  uint64_t v46 = v5;
  if (strnicmpx(v2, v5 - (char *)v2, "Basic"))
  {
    if (strnicmpx(v2, v5 - (char *)v2, "Digest")) {
      return 400;
    }
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    if ((*(unsigned char *)a1 & 2) != 0)
    {
      *(void *)(a1 + 112) = 0;
      *(void *)(a1 + 120) = 0;
      *(_OWORD *)(a1 + 144) = 0u;
      *(_OWORD *)(a1 + 160) = 0u;
      *(_OWORD *)(a1 + 176) = 0u;
      *(_OWORD *)(a1 + 192) = 0u;
      *(_OWORD *)(a1 + 208) = 0u;
      *(_OWORD *)(a1 + 224) = 0u;
      *(_OWORD *)(a1 + 240) = 0u;
      *(_OWORD *)(a1 + 256) = 0u;
      *(_OWORD *)(a1 + 272) = 0u;
      while (!HTTPParseParameter(v46, v4, &v43, &v42, &v48, &v47, 0, &v46))
      {
        if (strnicmpx((unsigned __int8 *)v43, v42, "username"))
        {
          if (strnicmpx((unsigned __int8 *)v43, v42, "realm"))
          {
            if (strnicmpx((unsigned __int8 *)v43, v42, "nonce"))
            {
              if (strnicmpx((unsigned __int8 *)v43, v42, "uri"))
              {
                if (strnicmpx((unsigned __int8 *)v43, v42, "response"))
                {
                  if (strnicmpx((unsigned __int8 *)v43, v42, "algorithm"))
                  {
                    if (strnicmpx((unsigned __int8 *)v43, v42, "cnonce"))
                    {
                      if (strnicmpx((unsigned __int8 *)v43, v42, "opaque"))
                      {
                        if (strnicmpx((unsigned __int8 *)v43, v42, "qop"))
                        {
                          if (!strnicmpx((unsigned __int8 *)v43, v42, "nc"))
                          {
                            uint64_t v10 = v47;
                            *(void *)(a1 + 272) = v48;
                            *(void *)(a1 + 280) = v10;
                          }
                        }
                        else
                        {
                          uint64_t v19 = v47;
                          *(void *)(a1 + 256) = v48;
                          *(void *)(a1 + 264) = v19;
                        }
                      }
                      else
                      {
                        uint64_t v18 = v47;
                        *(void *)(a1 + 240) = v48;
                        *(void *)(a1 + 248) = v18;
                      }
                    }
                    else
                    {
                      uint64_t v17 = v47;
                      *(void *)(a1 + 224) = v48;
                      *(void *)(a1 + 232) = v17;
                    }
                  }
                  else
                  {
                    uint64_t v16 = v47;
                    *(void *)(a1 + 208) = v48;
                    *(void *)(a1 + 216) = v16;
                  }
                }
                else
                {
                  uint64_t v15 = v47;
                  *(void *)(a1 + 192) = v48;
                  *(void *)(a1 + 200) = v15;
                }
              }
              else
              {
                uint64_t v14 = v47;
                *(void *)(a1 + 176) = v48;
                *(void *)(a1 + 184) = v14;
              }
            }
            else
            {
              uint64_t v13 = v47;
              *(void *)(a1 + 160) = v48;
              *(void *)(a1 + 168) = v13;
            }
          }
          else
          {
            uint64_t v12 = v47;
            *(void *)(a1 + 144) = v48;
            *(void *)(a1 + 152) = v12;
          }
        }
        else
        {
          uint64_t v11 = v47;
          *(void *)(a1 + 112) = v48;
          *(void *)(a1 + 120) = v11;
        }
      }
      size_t v20 = *(void *)(a1 + 168);
      if (!v20) {
        return 400;
      }
      uint64_t v21 = *(unsigned int (**)(uint64_t))(a1 + 48);
      if (v21)
      {
        if (!v21(a1)) {
          return 401;
        }
      }
      else
      {
        CC_LONG v28 = *(const void **)(a1 + 16);
        if (!v28) {
          return 500;
        }
        uint64_t v29 = *(void *)(a1 + 24);
        if (!v29) {
          return 500;
        }
        int v30 = HTTPVerifyTimedNonce(*(char **)(a1 + 160), v20, 0x78u, "YjM5ODQ4MDE0MmI3YTI4ZmQ1MzdjNGIxMDVmNzYxMDg=", 0x2Cu, v28, v29);
        if (v30)
        {
          if (v30 == -6722) {
            *(unsigned char *)(a1 + 288) = 1;
          }
          return 401;
        }
      }
      int64_t v44 = 0;
      unint64_t v31 = *(const char **)(a1 + 8);
      if (v31) {
        goto LABEL_54;
      }
      uint64_t v32 = *(uint64_t (**)(uint64_t, void **))(a1 + 32);
      if (v32)
      {
        uint64_t v33 = v32(a1, &v44);
        if (v33 != 200) {
          return v33;
        }
        unint64_t v31 = (const char *)v44;
LABEL_54:
        CC_LONG v34 = strlen(v31);
        _HTTPMakeAuthDigest(*(const void **)(a1 + 112), *(void *)(a1 + 120), v31, v34, *(const void **)(a1 + 80), *(void *)(a1 + 88), *(const void **)(a1 + 96), *(void *)(a1 + 104), *(const void **)(a1 + 144), *(void *)(a1 + 152), *(const void **)(a1 + 160), *(void *)(a1 + 168), (uint64_t)"0123456789abcdef", v49);
        if (v44) {
          free(v44);
        }
        if (strnicmpx(*(unsigned __int8 **)(a1 + 192), *(void *)(a1 + 200), v49))
        {
          *(unsigned char *)(a1 + 289) = 1;
          return 401;
        }
        return 200;
      }
      return 500;
    }
    return 401;
  }
  if ((*(unsigned char *)a1 & 1) == 0) {
    return 401;
  }
  int v8 = Base64DecodeCopy(v46, v4 - v5, &__s, 0);
  uint64_t v9 = __s;
  if (v8 || (uint64_t v22 = strchr(__s, 58)) == 0)
  {
    uint64_t v7 = 400;
  }
  else
  {
    *uint64_t v22 = 0;
    unint64_t v23 = (unsigned __int8 *)(v22 + 1);
    *(void *)(a1 + 112) = v9;
    *(void *)(a1 + 120) = v22 + 1 - v9;
    *(void *)(a1 + 128) = v22 + 1;
    size_t v24 = strlen(v22 + 1);
    *(void *)(a1 + 136) = v24;
    int64_t v44 = 0;
    int64_t v25 = *(unsigned __int8 **)(a1 + 8);
    if (v25)
    {
      size_t v26 = v24;
      CC_LONG v27 = 0;
      goto LABEL_62;
    }
    uint64_t v35 = *(uint64_t (**)(uint64_t, void **))(a1 + 32);
    if (v35)
    {
      uint64_t v36 = v35(a1, &v44);
      if (v36 == 200)
      {
        CC_LONG v27 = v44;
        unint64_t v23 = *(unsigned __int8 **)(a1 + 128);
        size_t v26 = *(void *)(a1 + 136);
        int64_t v25 = (unsigned __int8 *)v44;
LABEL_62:
        size_t v37 = v26;
        uint64_t v38 = v25;
        while (1)
        {
          if (!v37)
          {
            BOOL v40 = v25[v26] == 0;
            goto LABEL_69;
          }
          int v39 = *v38;
          if (*v23 != v39) {
            break;
          }
          ++v38;
          ++v23;
          --v37;
          if (!v39)
          {
            BOOL v40 = 1;
            goto LABEL_69;
          }
        }
        BOOL v40 = 0;
LABEL_69:
        if (v27) {
          free(v27);
        }
        if (v40)
        {
          uint64_t v7 = 200;
        }
        else
        {
          *(unsigned char *)(a1 + 289) = 1;
          uint64_t v7 = 401;
        }
        goto LABEL_74;
      }
      uint64_t v7 = v36;
    }
    else
    {
      uint64_t v7 = 500;
    }
  }
LABEL_74:
  if (v9) {
    free(v9);
  }
  return v7;
}

uint64_t HTTPReadHeader(uint64_t a1, uint64_t (*a2)(void *, size_t, unint64_t *, uint64_t), uint64_t a3)
{
  unint64_t v6 = *(void *)(a1 + 0x2000);
  uint64_t v7 = (unsigned char *)a1;
  do
  {
    while (1)
    {
LABEL_2:
      int v8 = (void *)(a1 + v6);
      size_t v9 = *(void *)(a1 + 8208);
      unint64_t v16 = v9;
      size_t v10 = 0x2000 - v6;
      if (v9)
      {
        if (v9 > v10) {
          return 4294960591;
        }
        memmove(v8, *(const void **)(a1 + 8200), v9);
        *(void *)(a1 + 8208) = 0;
      }
      else
      {
        unint64_t v16 = 0x2000 - v6;
        if (v6 == 0x2000) {
          return 4294960533;
        }
        uint64_t result = a2(v8, v10, &v16, a3);
        if (result) {
          return result;
        }
        size_t v9 = v16;
      }
      *(void *)(a1 + 0x2000) += v9;
      v6 += v9;
      unint64_t v16 = v6;
      if (v6)
      {
        if (*(unsigned char *)a1 == 36) {
          break;
        }
      }
      unint64_t v14 = a1 + v6;
LABEL_13:
      if ((unint64_t)v7 < v14)
      {
        while (1)
        {
          if (*v7 != 10)
          {
            ++v7;
            goto LABEL_13;
          }
          unint64_t v16 = v14 - (void)v7;
          if (v14 - (unint64_t)v7 < 3) {
            break;
          }
          uint64_t v12 = v7 + 1;
          int v13 = v7[1];
          if (v13 == 13)
          {
            if (v7[2] == 10)
            {
              uint64_t v15 = v7 + 3;
              goto LABEL_26;
            }
          }
          else if (v13 == 10)
          {
            goto LABEL_29;
          }
          ++v7;
          if ((unint64_t)v12 >= v14)
          {
            uint64_t v7 = v12;
            goto LABEL_2;
          }
        }
        if (v14 - (void)v7 == 2 && v7[1] == 10)
        {
LABEL_29:
          uint64_t v15 = v7 + 2;
          goto LABEL_26;
        }
      }
    }
  }
  while (v6 < 4);
  unint64_t v14 = a1 + v6;
  uint64_t v15 = (unsigned char *)(a1 + 4);
LABEL_26:
  *(void *)(a1 + 0x2000) = &v15[-a1];
  uint64_t result = HTTPHeader_Parse(a1);
  if (!result)
  {
    *(void *)(a1 + 8200) = v15;
    *(void *)(a1 + 8208) = v14 - (void)v15;
  }
  return result;
}

uint64_t HTTPReadLine(void *a1, uint64_t (*a2)(void), uint64_t a3, void *a4, void *a5)
{
  size_t v9 = (char *)(a1 + 1024);
  for (int64_t i = a1[1026]; ; a1[1026] = i)
  {
    uint64_t v11 = (char *)a1[1025];
    if (i >= 1) {
      break;
    }
LABEL_6:
    uint64_t v14 = a1[1024];
    if (i > (unint64_t)(0x2000 - v14)) {
      return 4294960553;
    }
    uint64_t v15 = (char *)a1 + v14;
    if ((char *)a1 + v14 != v11)
    {
      memmove((char *)a1 + v14, v11, i);
      a1[1025] = v15;
      int64_t i = a1[1026];
    }
    int64_t v19 = v9 - &v15[i];
    if (v9 == &v15[i]) {
      return 4294960533;
    }
    uint64_t result = a2();
    if (result) {
      return result;
    }
    int64_t i = a1[1026] + v19;
  }
  uint64_t v12 = &v11[i];
  int v13 = (char *)a1[1025];
  while (*v13 != 10)
  {
    if (++v13 >= v12) {
      goto LABEL_6;
    }
  }
  if (v13 <= v11 || (uint64_t v17 = v13 - 1, *(v13 - 1) != 13)) {
    uint64_t v17 = v13;
  }
  uint64_t result = 0;
  *a4 = v11;
  *a5 = v17 - v11;
  uint64_t v18 = v13 + 1;
  a1[1025] = v18;
  a1[1026] = v12 - v18;
  return result;
}

uint64_t NetSocket_HTTPReadHeader(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v14 = 0x2000;
  uint64_t v7 = 0x2000;
  int v8 = (unsigned char *)a2;
LABEL_2:
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, void, uint64_t))(a1 + 24))(a1, 1, v7, a2 + v6, &v14, 0, a3);
  if (result) {
    return result;
  }
  v6 += v14;
  unint64_t v10 = a2 + v6;
  if (*(unsigned char *)a2 != 36 || v6 <= 3)
  {
    while (1)
    {
      if ((unint64_t)v8 >= v10)
      {
LABEL_18:
        uint64_t v7 = 0x2000 - v6;
        uint64_t v14 = 0x2000 - v6;
        if (v6 != 0x2000) {
          goto LABEL_2;
        }
        return 4294960533;
      }
      if (*v8 == 10)
      {
        if (v10 - (unint64_t)v8 < 3)
        {
          if (v10 - (void)v8 != 2) {
            goto LABEL_18;
          }
          int v12 = v8[1];
        }
        else
        {
          int v12 = v8[1];
          if (v12 == 13)
          {
            if (v8[2] == 10)
            {
              int v13 = v8 + 3;
              goto LABEL_21;
            }
            goto LABEL_17;
          }
        }
        if (v12 == 10)
        {
          int v13 = v8 + 2;
          goto LABEL_21;
        }
      }
LABEL_17:
      ++v8;
    }
  }
  int v13 = (unsigned char *)(a2 + 4);
LABEL_21:
  *(void *)(a2 + 0x2000) = &v13[-a2];
  uint64_t result = HTTPHeader_Parse(a2);
  if (!result)
  {
    *(void *)(a1 + 64) = v13;
    *(void *)(a1 + 72) = v10;
  }
  return result;
}

uint64_t LogHTTP(uint64_t result, int *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result) {
    int v12 = (int *)result;
  }
  else {
    int v12 = (int *)&gLogCategory_HTTPRequests;
  }
  if (a2) {
    int v13 = a2;
  }
  else {
    int v13 = (int *)&gLogCategory_HTTPResponses;
  }
  if (*v12 > 40 || *v12 == -1 && (uint64_t result = _LogCategory_Initialize((uint64_t)v12, 0x28u), !result))
  {
    if (*v13 > 40) {
      return result;
    }
    if (*v13 == -1)
    {
      uint64_t result = _LogCategory_Initialize((uint64_t)v13, 0x28u);
      if (!result) {
        return result;
      }
    }
  }
  if (a4 < 1)
  {
    int v19 = 0;
    uint64_t v15 = a3;
  }
  else
  {
    unint64_t v14 = (unint64_t)&a3[a4];
    uint64_t v15 = a3;
    do
    {
      int v16 = *v15;
      if (v16 == 10 || v16 == 13) {
        break;
      }
      ++v15;
    }
    while ((unint64_t)v15 < v14);
    uint64_t v18 = a3;
    do
    {
      int v19 = *v18;
      if (v19 == 32) {
        break;
      }
      ++v18;
    }
    while (v19 != 47 && (unint64_t)v18 < v14);
  }
  if (v19 == 32) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v13;
  }
  int v22 = *v21;
  if (*v21 > 20) {
    goto LABEL_50;
  }
  if (v22 == -1)
  {
    uint64_t result = _LogCategory_Initialize((uint64_t)v21, 0x14u);
    if (!result)
    {
      int v22 = *v21;
LABEL_50:
      if (v22 <= 40)
      {
        if (v22 != -1 || (uint64_t result = _LogCategory_Initialize((uint64_t)v21, 0x28u), result))
        {
          if (a3)
          {
            if (v19 == 32)
            {
              if (*v12 <= 50)
              {
                if (*v12 != -1) {
                  return LogPrintF((uint64_t)v12, (uint64_t)"void LogHTTP(LogCategory *, LogCategory *, const void *, size_t, const void *, size_t)", 0x32u, (uint64_t)"HTTP Request:  %.*s\n", a5, a6, a7, a8, v15 - a3);
                }
                uint64_t result = _LogCategory_Initialize((uint64_t)v12, 0x32u);
                if (result) {
                  return LogPrintF((uint64_t)v12, (uint64_t)"void LogHTTP(LogCategory *, LogCategory *, const void *, size_t, const void *, size_t)", 0x32u, (uint64_t)"HTTP Request:  %.*s\n", a5, a6, a7, a8, v15 - a3);
                }
              }
            }
            else if (*v13 <= 50)
            {
              if (*v13 != -1) {
                return LogPrintF((uint64_t)v13, (uint64_t)"void LogHTTP(LogCategory *, LogCategory *, const void *, size_t, const void *, size_t)", 0x32u, (uint64_t)"HTTP Response: %.*s\n\n", a5, a6, a7, a8, v15 - a3);
              }
              uint64_t result = _LogCategory_Initialize((uint64_t)v13, 0x32u);
              if (result) {
                return LogPrintF((uint64_t)v13, (uint64_t)"void LogHTTP(LogCategory *, LogCategory *, const void *, size_t, const void *, size_t)", 0x32u, (uint64_t)"HTTP Response: %.*s\n\n", a5, a6, a7, a8, v15 - a3);
              }
            }
          }
        }
      }
      return result;
    }
  }
  unint64_t v23 = "-------------------- HTTP RESPONSE --------------------\n";
  if (v19 == 32) {
    unint64_t v23 = "==================== HTTP REQUEST  ====================\n";
  }
  if (a3) {
    size_t v24 = v23;
  }
  else {
    size_t v24 = "";
  }
  if (a6 <= 0)
  {
LABEL_43:
    if (*v21 > 50) {
      return result;
    }
    if (*v21 == -1)
    {
      uint64_t result = _LogCategory_Initialize((uint64_t)v21, 0x32u);
      if (!result) {
        return result;
      }
    }
    uint64_t v28 = (uint64_t)v24;
    CC_LONG v27 = "%s%{text}%{text}%s";
    return LogPrintF((uint64_t)v21, (uint64_t)"void LogHTTP(LogCategory *, LogCategory *, const void *, size_t, const void *, size_t)", 0x32u, (uint64_t)v27, a5, a6, a7, a8, v28);
  }
  int64_t v25 = (unsigned __int8 *)a5;
  while (1)
  {
    int v26 = *v25;
    if ((v26 - 9) >= 5 && (v26 - 32) >= 0x5F) {
      break;
    }
    if ((unint64_t)++v25 >= a5 + a6) {
      goto LABEL_43;
    }
  }
  if (*v21 <= 50)
  {
    if (*v21 != -1 || (uint64_t result = _LogCategory_Initialize((uint64_t)v21, 0x32u), result))
    {
      uint64_t v28 = (uint64_t)v24;
      CC_LONG v27 = "%s%{text}<< BINARY DATA >>\n%.1H\n";
      return LogPrintF((uint64_t)v21, (uint64_t)"void LogHTTP(LogCategory *, LogCategory *, const void *, size_t, const void *, size_t)", 0x32u, (uint64_t)v27, a5, a6, a7, a8, v28);
    }
  }
  return result;
}

uint64_t IEGetNext(unsigned char *a1, unsigned char *a2, unsigned char *a3, void *a4, void *a5, void *a6)
{
  if (a1 == a2) {
    return 4294960569;
  }
  if (a1 >= a2) {
    return 4294960591;
  }
  if ((unint64_t)(a2 - a1) < 2) {
    return 4294960569;
  }
  uint64_t v6 = a1[1];
  uint64_t v7 = &a1[v6 + 2];
  if (v7 > a2) {
    return 4294960546;
  }
  *a3 = *a1;
  *a4 = a1 + 2;
  *a5 = v6;
  uint64_t result = 0;
  if (a6) {
    *a6 = v7;
  }
  return result;
}

uint64_t IEGetVendorSpecific(unsigned __int8 *a1, unint64_t a2, int a3, void *a4, void *a5, void *a6)
{
  if ((uint64_t)(a2 - (void)a1) < 2) {
    return 4294960569;
  }
  uint64_t v6 = a1;
  while (1)
  {
    uint64_t v7 = v6;
    int v8 = *v6;
    uint64_t v9 = v6[1];
    v6 += v9 + 2;
    if (v8 == 221)
    {
      if (v6 < a1 || (unint64_t)v6 > a2) {
        return 4294960553;
      }
      if (v9 >= 4 && bswap32(*(_DWORD *)(v7 + 2)) == a3) {
        break;
      }
    }
    if ((uint64_t)(a2 - (void)v6) <= 1) {
      return 4294960569;
    }
  }
  *a4 = v7 + 6;
  *a5 = v9 - 4;
  uint64_t result = 0;
  if (a6) {
    *a6 = v6;
  }
  return result;
}

uint64_t IEGetAppleGeneral(unsigned __int8 *a1, unint64_t a2, unsigned char *a3, _WORD *a4)
{
  unint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t result = IEGetVendorSpecific(a1, a2, 234241, &v9, &v8, 0);
  if (!result)
  {
    if (v8 >= 3)
    {
      uint64_t result = 0;
      uint64_t v7 = v9;
      *a3 = *v9;
      *a4 = bswap32(*(unsigned __int16 *)(v7 + 1)) >> 16;
    }
    else
    {
      return 4294960553;
    }
  }
  return result;
}

uint64_t IEBufferAppendIE(uint64_t a1, char a2, char *__s, size_t a4)
{
  uint64_t result = *(unsigned int *)(a1 + 264);
  if (!result)
  {
    uint64_t v6 = __s;
    if (a4 == -1) {
      a4 = strlen(__s);
    }
    if (a4 > 0xFF || (uint64_t v8 = *(void *)(a1 + 256), a4 + v8 + 2 > 0xFF))
    {
      uint64_t result = 4294960553;
    }
    else
    {
      *(void *)(a1 + 256) = v8 + 1;
      *(unsigned char *)(a1 + v8) = a2;
      uint64_t v9 = *(void *)(a1 + 256);
      *(void *)(a1 + 256) = v9 + 1;
      *(unsigned char *)(a1 + v9) = a4;
      if (a4)
      {
        unint64_t v10 = &v6[a4];
        do
        {
          char v11 = *v6++;
          uint64_t v12 = *(void *)(a1 + 256);
          *(void *)(a1 + 256) = v12 + 1;
          *(unsigned char *)(a1 + v12) = v11;
        }
        while (v6 < v10);
      }
      uint64_t result = 0;
    }
    if (!*(_DWORD *)(a1 + 264)) {
      *(_DWORD *)(a1 + 264) = result;
    }
  }
  return result;
}

uint64_t IEBufferStartVendorIE(uint64_t a1, int a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 264);
  if (!v2)
  {
    uint64_t v3 = *(void *)(a1 + 256);
    if ((unint64_t)(v3 - 250) < 0xFFFFFFFFFFFFFF00)
    {
      uint64_t v4 = 4294960553;
      goto LABEL_4;
    }
    uint64_t v4 = 0;
    uint64_t v2 = 0;
    *(void *)(a1 + 256) = v3 + 1;
    *(unsigned char *)(a1 + v3) = -35;
    uint64_t v5 = *(void *)(a1 + 256);
    *(void *)(a1 + 272) = v5;
    *(void *)(a1 + 256) = v5 + 1;
    *(unsigned char *)(a1 + v5) = 0;
    uint64_t v6 = *(void *)(a1 + 256);
    *(void *)(a1 + 256) = v6 + 1;
    *(unsigned char *)(a1 + v6) = HIBYTE(a2);
    uint64_t v7 = *(void *)(a1 + 256);
    *(void *)(a1 + 256) = v7 + 1;
    *(unsigned char *)(a1 + v7) = BYTE2(a2);
    uint64_t v8 = *(void *)(a1 + 256);
    *(void *)(a1 + 256) = v8 + 1;
    *(unsigned char *)(a1 + v8) = BYTE1(a2);
    uint64_t v9 = *(void *)(a1 + 256);
    *(void *)(a1 + 256) = v9 + 1;
    *(unsigned char *)(a1 + v9) = a2;
    if (!*(_DWORD *)(a1 + 264))
    {
LABEL_4:
      *(_DWORD *)(a1 + 264) = v4;
      return v4;
    }
  }
  return v2;
}

uint64_t IEBufferEndVendorIE(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 264);
  if (!v1)
  {
    uint64_t v2 = *(void *)(a1 + 272);
    if (!v2)
    {
      uint64_t v3 = 4294960551;
      goto LABEL_4;
    }
    uint64_t v3 = 0;
    uint64_t v1 = 0;
    *(unsigned char *)(a1 + v2) = *(unsigned char *)(a1 + 256) + ~(_BYTE)v2;
    *(void *)(a1 + 272) = 0;
    if (!*(_DWORD *)(a1 + 264))
    {
LABEL_4:
      *(_DWORD *)(a1 + 264) = v3;
      return v3;
    }
  }
  return v1;
}

uint64_t DataBuffer_AppendIE(uint64_t a1, char a2, char *__s, size_t a4)
{
  size_t v4 = a4;
  uint64_t v5 = __s;
  if (a4 == -1) {
    size_t v4 = strlen(__s);
  }
  if (v4 > 0xFF)
  {
    uint64_t result = 4294960553;
  }
  else
  {
    unint64_t v14 = 0;
    uint64_t result = DataBuffer_Resize(a1, v4 + *(void *)(a1 + 32) + 2, (unint64_t *)&v14);
    if (!result)
    {
      uint64_t v9 = v14++;
      *uint64_t v9 = a2;
      unint64_t v10 = v14++;
      *unint64_t v10 = v4;
      if (v4)
      {
        char v11 = &v5[v4];
        do
        {
          char v12 = *v5++;
          int v13 = v14++;
          *int v13 = v12;
        }
        while (v5 < v11);
      }
      uint64_t result = 0;
    }
  }
  if (!*(_DWORD *)(a1 + 52)) {
    *(_DWORD *)(a1 + 52) = result;
  }
  return result;
}

const void *CFCreateWithJSONBytes(char *__s, size_t a2, char a3, uint64_t a4, int *a5)
{
  size_t v8 = a2;
  if (a2 != -1)
  {
    if (a2) {
      goto LABEL_3;
    }
LABEL_12:
    if (CFDictionaryGetTypeID() == a4)
    {
      if ((a3 & 3) != 0) {
        CFDictionaryRef Mutable = CFDictionaryCreate(0, 0, 0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      }
      else {
        CFDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      }
    }
    else
    {
      if (CFArrayGetTypeID() != a4)
      {
        unint64_t v10 = 0;
        int v13 = 0;
        int v14 = -6732;
        goto LABEL_23;
      }
      if ((a3 & 3) != 0) {
        CFDictionaryRef Mutable = CFArrayCreate(0, 0, 0, MEMORY[0x1E4F1D510]);
      }
      else {
        CFDictionaryRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
      }
    }
    int v13 = Mutable;
    unint64_t v10 = 0;
    if (Mutable) {
      goto LABEL_22;
    }
    int v14 = -6728;
    int v13 = 0;
    goto LABEL_23;
  }
  size_t v8 = strlen(__s);
  if (!v8) {
    goto LABEL_12;
  }
LABEL_3:
  unint64_t v10 = (void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:__s length:v8];
  if (v10)
  {
    char v11 = (void *)MEMORY[0x192FAA9B0]();
    if ((a3 & 2) != 0) {
      uint64_t v12 = 7;
    }
    else {
      uint64_t v12 = a3 & 1 | 4;
    }
    int v13 = [MEMORY[0x1E4F28D90] JSONObjectWithData:v10 options:v12 error:0];
    if (v13)
    {
      if (a4 && CFGetTypeID(v13) != a4)
      {
        CFRelease(v13);
        int v13 = 0;
        int v14 = -6756;
        goto LABEL_23;
      }
LABEL_22:
      int v14 = 0;
      goto LABEL_23;
    }
    int v14 = -6717;
  }
  else
  {
    int v13 = 0;
    int v14 = -6728;
  }
LABEL_23:
  if (a5) {
    *a5 = v14;
  }

  return v13;
}

uint64_t CFCreateJSONData(uint64_t a1, char a2, int *a3)
{
  uint64_t v6 = (void *)MEMORY[0x192FAA9B0]();
  if (a2) {
    uint64_t v7 = 4;
  }
  else {
    uint64_t v7 = 5;
  }
  uint64_t v8 = [MEMORY[0x1E4F28D90] dataWithJSONObject:a1 options:v7 error:0];
  if (a3)
  {
    if (v8) {
      int v9 = 0;
    }
    else {
      int v9 = -6732;
    }
    *a3 = v9;
  }
  return v8;
}

uint64_t KeychainAddFormatted(CFTypeRef *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CFDictionaryRef attributes = 0;
  uint64_t v10 = CFPropertyListBuildFormatted(0, 0, (CFTypeRef *)&attributes, a2, (uint64_t)&a9, a6, a7, a8);
  if (!v10)
  {
    uint64_t v10 = SecItemAdd(attributes, a1);
    CFRelease(attributes);
  }
  return v10;
}

CFTypeRef KeychainCopyMatchingFormatted(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CFDictionaryRef query = 0;
  CFTypeRef result = 0;
  int v10 = CFPropertyListBuildFormatted(0, 0, (CFTypeRef *)&query, a2, (uint64_t)&a9, a6, a7, a8);
  if (!v10)
  {
    int v10 = SecItemCopyMatching(query, &result);
    CFRelease(query);
    if (!a1) {
      return result;
    }
    goto LABEL_3;
  }
  if (a1) {
LABEL_3:
  }
    *a1 = v10;
  return result;
}

uint64_t KeychainDeleteFormatted(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CFDictionaryRef query = 0;
  uint64_t v9 = CFPropertyListBuildFormatted(0, 0, (CFTypeRef *)&query, a1, (uint64_t)&a9, a6, a7, a8);
  if (!v9)
  {
    uint64_t v9 = SecItemDelete(query);
    CFRelease(query);
  }
  return v9;
}

uint64_t KeychainDeleteItemByPersistentRef(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return KeychainDeleteFormatted((uint64_t)"{%kO=%O}", a2, a3, a4, a5, a6, a7, a8, *MEMORY[0x1E4F3BD40]);
}

uint64_t KeychainUpdateFormatted(const __CFDictionary *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CFDictionaryRef attributesToUpdate = 0;
  uint64_t v10 = CFPropertyListBuildFormatted(0, 0, (CFTypeRef *)&attributesToUpdate, a2, (uint64_t)&a9, a6, a7, a8);
  if (!v10)
  {
    uint64_t v10 = SecItemUpdate(a1, attributesToUpdate);
    CFRelease(attributesToUpdate);
  }
  return v10;
}

uint64_t _LogControlLockedCF(const __CFString *a1, int a2)
{
  CFIndex Length = CFStringGetLength(a1);
  CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  CFIndex usedBufLen = MaximumSizeForEncoding;
  uint64_t v6 = (UInt8 *)malloc_type_malloc(MaximumSizeForEncoding + 1, 0x757C1AEEuLL);
  if (!v6) {
    return 4294960568;
  }
  uint64_t v7 = v6;
  v11.location = 0;
  v11.CFIndex length = Length;
  if (CFStringGetBytes(a1, v11, 0x8000100u, 0, 0, v6, MaximumSizeForEncoding, &usedBufLen) == Length)
  {
    if (usedBufLen < 1)
    {
      uint64_t v8 = 0;
    }
    else
    {
      v7[usedBufLen] = 0;
      uint64_t v8 = _LogControlLocked(v7, a2);
    }
  }
  else
  {
    uint64_t v8 = 4294960596;
  }
  free(v7);
  return v8;
}

uint64_t _LogControlLocked(unsigned __int8 *a1, int a2)
{
  if (a1)
  {
    uint64_t v2 = a1 + 1;
    int v3 = *a1;
    BOOL v4 = (a2 & 2) == 0;
    if (v3 != 63) {
      uint64_t v2 = a1;
    }
    int v5 = *v2;
    BOOL v6 = v3 == 63 && (a2 & 2) == 0;
    if (v5 == 43) {
      ++v2;
    }
    int v7 = *v2;
    BOOL v8 = v5 == 43 && (a2 & 2) == 0;
    if (v7 != 126) {
      BOOL v4 = 0;
    }
    if (v6 && v5 == 43)
    {
      if (gLogCFPrefsAppID) {
        CFStringRef v9 = (const __CFString *)gLogCFPrefsAppID;
      }
      else {
        CFStringRef v9 = (const __CFString *)*MEMORY[0x1E4F1D3D8];
      }
      CFPreferencesSetAppValue(@"logconfig", 0, v9);
      return 0;
    }
    if (v7 == 126) {
      uint64_t v10 = v2 + 1;
    }
    else {
      uint64_t v10 = v2;
    }
    int v11 = *v10;
    if (*v10)
    {
      unint64_t v12 = 0x1EB3B2000uLL;
      int v13 = &gLogActionList;
      BOOL v47 = v4;
      while (1)
      {
        int v14 = v10;
        if (!v4) {
          break;
        }
        if (v11)
        {
          do
          {
            if (v11 == 58) {
              break;
            }
            int v15 = *++v14;
            int v11 = v15;
          }
          while (v15);
        }
        uint64_t v16 = v14 - v10;
        if (v11) {
          uint64_t v17 = v14 + 1;
        }
        else {
          uint64_t v17 = v14;
        }
        for (int64_t i = v17; ; ++i)
        {
          unsigned int v19 = *i;
          if (v19 <= 0x3D && ((1 << v19) & 0x2000100000000001) != 0) {
            break;
          }
        }
        if (*i) {
          int v22 = i + 1;
        }
        else {
          int v22 = i;
        }
        do
        {
          int v23 = *v22;
          if (!*v22) {
            break;
          }
          ++v22;
        }
        while (v23 != 44);
        size_t v24 = *(uint64_t **)(v12 + 3432);
        if (v24)
        {
          BOOL v25 = v8;
          do
          {
            int v26 = v13;
            int v13 = v24;
            while (!strnicmpx(v10, v16, (unsigned char *)v13[1])
                 && (i == v17 || !strnicmpx(v17, i - v17, (unsigned char *)v13[2])))
            {
              *int v26 = *v13;
              _LogUtils_FreeAction(v13);
              int v13 = (uint64_t *)*v26;
              if (!*v26) {
                goto LABEL_57;
              }
            }
            size_t v24 = (uint64_t *)*v13;
          }
          while (*v13);
LABEL_57:
          BOOL v8 = v25;
          BOOL v4 = v47;
          unint64_t v12 = 0x1EB3B2000;
LABEL_58:
          int v13 = &gLogActionList;
        }
LABEL_59:
        int v11 = *v22;
        uint64_t v10 = v22;
        if (!*v22)
        {
          _LogCategory_ApplyActions(0);
          if ((a2 & 2) == 0)
          {
            if (v6)
            {
              _LogUtils_ReadCFPreferences(a2 | 4u);
            }
            else if (v8)
            {
              _LogUtils_WriteCFPreferences();
            }
          }
          return 0;
        }
      }
      while (v11)
      {
        if (v11 == 58)
        {
          size_t v27 = v14 - v10;
          uint64_t v28 = v14 + 1;
          for (CFIndex j = v14 + 1; *j; ++j)
          {
            if (*j == 61)
            {
              size_t v45 = j - v28;
              int v30 = j + 1;
              for (k = j + 1; ; ++k)
              {
                int v32 = *k;
                if (!*k || v32 == 44) {
                  break;
                }
              }
              uint64_t v33 = k - v30;
              if (v32 == 44) {
                int v22 = k + 1;
              }
              else {
                int v22 = k;
              }
              if ((a2 & 1) == 0
                && (!strnicmpx(v28, v45, "output") || !strnicmpx(v28, v45, "output2"))
                && !strnicmp_prefix(v30, v33, "callback"))
              {
                BOOL v4 = v47;
                goto LABEL_59;
              }
              size_t v43 = v33;
              int64_t v44 = (char *)v30;
              uint64_t v34 = gLogActionList;
              if (gLogActionList)
              {
                uint64_t v35 = &gLogActionList;
                while (1)
                {
                  uint64_t v36 = (uint64_t *)v34;
                  if (!strnicmpx(v10, v27, *(unsigned char **)(v34 + 8))
                    && !strnicmpx(v28, v45, (unsigned char *)v36[2]))
                  {
                    break;
                  }
                  uint64_t v34 = *v36;
                  uint64_t v35 = v36;
                  if (!*v36) {
                    goto LABEL_83;
                  }
                }
                size_t v37 = 0;
              }
              else
              {
                uint64_t v36 = &gLogActionList;
LABEL_83:
                size_t v37 = (uint64_t *)malloc_type_calloc(1uLL, 0x20uLL, 0x30040E3C0B0CCuLL);
                uint64_t v35 = v36;
                uint64_t v36 = v37;
                if (!v37) {
                  return 4294960568;
                }
              }
              uint64_t v38 = ReplaceString((void **)v36 + 1, 0, (char *)v10, v27);
              if (!v38)
              {
                uint64_t v38 = ReplaceString((void **)v36 + 2, 0, (char *)v28, v45);
                if (!v38)
                {
                  uint64_t v38 = ReplaceString((void **)v36 + 3, 0, v44, v43);
                  if (!v38)
                  {
                    BOOL v4 = v47;
                    if (v37) {
                      *uint64_t v35 = (uint64_t)v37;
                    }
                    goto LABEL_58;
                  }
                }
              }
              uint64_t v40 = v38;
              if (v37) {
                _LogUtils_FreeAction(v37);
              }
              return v40;
            }
          }
          return 4294960554;
        }
        int v21 = *++v14;
        int v11 = v21;
      }
      return 4294960554;
    }
  }
  else
  {
    LODWORD(v8) = 0;
    BOOL v6 = 0;
  }
  while (1)
  {
    int v39 = (void *)gLogActionList;
    if (!gLogActionList) {
      break;
    }
    gLogActionList = *(void *)gLogActionList;
    _LogUtils_FreeAction(v39);
  }
  uint64_t v40 = 0;
  if (v8 && !v6)
  {
    if (gLogCFPrefsAppID) {
      CFStringRef v41 = (const __CFString *)gLogCFPrefsAppID;
    }
    else {
      CFStringRef v41 = (const __CFString *)*MEMORY[0x1E4F1D3D8];
    }
    CFPreferencesSetAppValue(@"logconfig", 0, v41);
    CFPreferencesAppSynchronize(v41);
    return 0;
  }
  return v40;
}

void _LogUtils_FreeAction(void *a1)
{
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    free(v2);
    a1[1] = 0;
  }
  int v3 = (void *)a1[2];
  if (v3)
  {
    free(v3);
    a1[2] = 0;
  }
  BOOL v4 = (void *)a1[3];
  if (v4) {
    free(v4);
  }
  free(a1);
}

void _LogUtils_WriteCFPreferences()
{
  cStr = 0;
  uint64_t v0 = gLogActionList;
  if (gLogActionList)
  {
    do
    {
      uint64_t v1 = *(const char **)(v0 + 16);
      if (strcasecmp(v1, "output") && strcasecmp(v1, "output2")
        || stricmp_prefix(*(unsigned __int8 **)(v0 + 24), "callback"))
      {
        if (v0 == gLogActionList) {
          BOOL v8 = "";
        }
        else {
          BOOL v8 = ",";
        }
        AppendPrintF((void **)&cStr, (uint64_t)"%s%s:%s=%s", v2, v3, v4, v5, v6, v7, (uint64_t)v8);
      }
      uint64_t v0 = *(void *)v0;
    }
    while (v0);
    CFStringRef v9 = cStr;
    if (cStr)
    {
      CFStringRef v10 = CFStringCreateWithCString(0, cStr, 0x8000100u);
      if (v10)
      {
        CFStringRef v11 = v10;
        if (gLogCFPrefsAppID) {
          CFStringRef v12 = (const __CFString *)gLogCFPrefsAppID;
        }
        else {
          CFStringRef v12 = (const __CFString *)*MEMORY[0x1E4F1D3D8];
        }
        CFPreferencesSetAppValue(@"logconfig", v10, v12);
        CFPreferencesAppSynchronize(v12);
        int v13 = (const void *)gLogCFLastControlPref;
        CFRetain(v11);
        gLogCFLastControlPref = (uint64_t)v11;
        if (v13) {
          CFRelease(v13);
        }
        CFRelease(v11);
      }
      free(v9);
    }
  }
}

void _LogOutputDelete(_DWORD *a1)
{
  int v2 = a1[10];
  if (v2 == 2)
  {
    uint64_t v3 = (void *)*((void *)a1 + 6);
    if (v3)
    {
      free(v3);
      *((void *)a1 + 6) = 0;
    }
    uint64_t v4 = (FILE *)*((void *)a1 + 7);
    if (v4)
    {
      if (v4 != (FILE *)*MEMORY[0x1E4F143C8] && v4 != (FILE *)*MEMORY[0x1E4F143D8]) {
        fclose(v4);
      }
      *((void *)a1 + 7) = 0;
    }
    uint64_t v6 = (void *)*((void *)a1 + 11);
    if (v6)
    {
      free(v6);
      *((void *)a1 + 11) = 0;
    }
    int v2 = a1[10];
  }
  if (v2 == 14)
  {
    uint64_t v7 = (void *)*((void *)a1 + 9);
    if (v7)
    {
      free(v7);
      *((void *)a1 + 9) = 0;
    }
    BOOL v8 = (void *)*((void *)a1 + 6);
    if (v8)
    {
      free(v8);
      *((void *)a1 + 6) = 0;
    }
    CFStringRef v9 = (void *)*((void *)a1 + 7);
    if (v9)
    {

      *((void *)a1 + 7) = 0;
    }
  }
  CFStringRef v10 = (void *)*((void *)a1 + 2);
  if (v10) {
    free(v10);
  }
  free(a1);
}

uint64_t _LogOutputSysLog_Setup(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)(a1 + 48) = 5;
  int v3 = *a2;
  if (*a2)
  {
    while (1)
    {
      uint64_t v4 = a2;
      if (!v3) {
        return 4294960554;
      }
      while (v3 != 61)
      {
        int v5 = *++v4;
        int v3 = v5;
        if (!v5) {
          return 4294960554;
        }
      }
      uint64_t v6 = v4 + 1;
      for (int64_t i = v4 + 1; *i && *i != 59; ++i)
        ;
      if (*i) {
        BOOL v8 = i + 1;
      }
      else {
        BOOL v8 = i;
      }
      if (!strnicmpx(a2, v4 - a2, "level"))
      {
        uint64_t v9 = (unint64_t)(i - v6) >= 0x1F ? 31 : i - v6;
        __memcpy_chk();
        __s1[v9] = 0;
        int v10 = LUStringToLevel(__s1);
        if (v10 != -1)
        {
          if (v10 <= 119)
          {
            if (v10 <= 109)
            {
              if (v10 <= 99)
              {
                if (v10 <= 89)
                {
                  if (v10 <= 59)
                  {
                    if (v10 <= 49)
                    {
                      if (v10 > 39) {
                        int v11 = 6;
                      }
                      else {
                        int v11 = 7;
                      }
                    }
                    else
                    {
                      int v11 = 5;
                    }
                  }
                  else
                  {
                    int v11 = 4;
                  }
                }
                else
                {
                  int v11 = 3;
                }
              }
              else
              {
                int v11 = 2;
              }
            }
            else
            {
              int v11 = 1;
            }
          }
          else
          {
            int v11 = 0;
          }
          *(_DWORD *)(a1 + 48) = v11;
        }
      }
      int v3 = *v8;
      a2 = v8;
      if (!*v8) {
        goto LABEL_35;
      }
    }
  }
  else
  {
LABEL_35:
    uint64_t result = 0;
    *(void *)(a1 + 32) = _LogOutputSysLog_Writer;
    *(_DWORD *)(a1 + 40) = 6;
  }
  return result;
}

void _LogOutputFile_Writer(int a1, uint64_t a2, void *__ptr, size_t __nitems, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  int v11 = (FILE **)(a2 + 56);
  int v10 = *(FILE **)(a2 + 56);
  if (v10 != (FILE *)*MEMORY[0x1E4F143C8] && v10 != (FILE *)*MEMORY[0x1E4F143D8])
  {
    uint64_t v14 = *(void *)(a2 + 72);
    uint64_t v15 = *(void *)(a2 + 64) + __nitems;
    *(void *)(a2 + 64) = v15;
    if (v14 >= 1 && v15 > v14)
    {
      if (*(void *)(a2 + 88) && *(int *)(a2 + 96) >= 1)
      {
        SNPrintF((uint64_t)&__p, 1025, (uint64_t)"%s.%d", (uint64_t)v10, a5, a6, a7, a8, *(void *)(a2 + 88));
        remove(&__p, v17);
        int v23 = *(_DWORD *)(a2 + 96);
        if (v23 >= 3)
        {
          int v24 = v23 - 2;
          do
          {
            SNPrintF((uint64_t)&__p, 1025, (uint64_t)"%s.%d", v18, v19, v20, v21, v22, *(void *)(a2 + 88));
            SNPrintF((uint64_t)&__to, 1025, (uint64_t)"%s.%d", v25, v26, v27, v28, v29, *(void *)(a2 + 88));
            rename(&__p, &__to, v30);
            BOOL v31 = v24-- != 0;
          }
          while (v24 != 0 && v31);
        }
        SNPrintF((uint64_t)&__to, 1025, (uint64_t)"%s.1", v18, v19, v20, v21, v22, *(void *)(a2 + 88));
        rename(*(const std::__fs::filesystem::path **)(a2 + 88), &__to, v32);
        SNPrintF((uint64_t)&__to, 1025, (uint64_t)"%s", v33, v34, v35, v36, v37, *(void *)(a2 + 88));
        uint64_t v38 = *(const char **)(a2 + 48);
        int v39 = malloc_type_malloc(0x1000uLL, 0x145B9E32uLL);
        if (v39)
        {
          uint64_t v40 = v39;
          CFStringRef v41 = fopen(v38, "r");
          if (v41 || *__error() && !*__error())
          {
            uint64_t v42 = fopen((const char *)&__to, "w");
            if (v42 || *__error() && !*__error())
            {
              do
                size_t v43 = fread(v40, 1uLL, 0x1000uLL, v41);
              while (v43 && (fwrite(v40, 1uLL, v43, v42) == v43 || *__error() && !*__error()));
            }
            if (v41) {
              fclose(v41);
            }
            if (v42) {
              fclose(v42);
            }
          }
          free(v40);
        }
      }
      RollLogFiles(v11, "\nLOG ENDED, CONTINUES IN NEXT LOG FILE\n", *(const std::__fs::filesystem::path **)(a2 + 48), *(_DWORD *)(a2 + 80));
      *(void *)(a2 + 64) = __nitems;
      int v10 = *(FILE **)(a2 + 56);
    }
  }
  if (v10)
  {
    fwrite(__ptr, 1uLL, __nitems, v10);
    fflush(*v11);
  }
}

void _LogOutputSysLog_Writer(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4)
{
  if (a4)
  {
    int v4 = a4 - 1;
    if (a3[a4 - 1] != 10) {
      int v4 = a4;
    }
  }
  else
  {
    int v4 = 0;
  }
  syslog(*(_DWORD *)(a2 + 48), "%.*s", v4, a3);
}

uint64_t _LogOutputCallBack_Writer(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(a2 + 48);
  if (v4) {
    return v4(result, a3, a4, *(void *)(a2 + 56));
  }
  return result;
}

uint64_t LogControl(char *a1)
{
  if (a1)
  {
    if (!strcmp(a1, "?:output=syslog")) {
      return 0;
    }
    LogUtils_EnsureInitialized();
    pthread_mutex_lock(&gLogUtilsLock);
    uint64_t v2 = _LogControlLocked((unsigned __int8 *)a1, 0);
  }
  else
  {
    LogUtils_EnsureInitialized();
    pthread_mutex_lock(&gLogUtilsLock);
    while (1)
    {
      int v3 = (void *)gLogActionList;
      if (!gLogActionList) {
        break;
      }
      gLogActionList = *(void *)gLogActionList;
      _LogUtils_FreeAction(v3);
    }
    uint64_t v2 = 0;
  }
  pthread_mutex_unlock(&gLogUtilsLock);
  return v2;
}

uint64_t LogControlCF(const __CFString *a1)
{
  LogUtils_EnsureInitialized();
  pthread_mutex_lock(&gLogUtilsLock);
  uint64_t locked = _LogControlLockedCF(a1, 0);
  pthread_mutex_unlock(&gLogUtilsLock);
  return locked;
}

uint64_t LogSetAppID(CFTypeRef cf1)
{
  if (cf1)
  {
    uint64_t result = CFEqual(cf1, @"com.apple.CoreRC");
    if (result) {
      return result;
    }
    pthread_mutex_lock(&gLogUtilsLock);
    int v3 = (const void *)gLogCFPrefsAppID;
    CFRetain(cf1);
  }
  else
  {
    pthread_mutex_lock(&gLogUtilsLock);
    int v3 = (const void *)gLogCFPrefsAppID;
  }
  gLogCFPrefsAppID = (uint64_t)cf1;
  if (v3) {
    CFRelease(v3);
  }
  return pthread_mutex_unlock(&gLogUtilsLock);
}

uint64_t LogSetOutputCallback(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFStringRef v12 = 0;
  BOOL v8 = ".*";
  if (a1) {
    BOOL v8 = a1;
  }
  ASPrintF((void **)&v12, (uint64_t)"%s:output%?d=callback;func=%p;arg=%p", a3, a4, a5, a6, a7, a8, (uint64_t)v8);
  uint64_t v9 = v12;
  if (!v12) {
    return 4294960568;
  }
  LogUtils_EnsureInitialized();
  pthread_mutex_lock(&gLogUtilsLock);
  uint64_t v10 = _LogControlLocked(v9, 1);
  pthread_mutex_unlock(&gLogUtilsLock);
  free(v9);
  return v10;
}

uint64_t LogShow(void **a1)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  pthread_mutex_lock(&gLogUtilsLock);
  size_t v68 = 0;
  uint64_t v2 = getprogname();
  getpid();
  if ((int)ASPrintF(&v68, (uint64_t)"=== LogUtils (%s, PID %llu) ===\n", v3, v4, v5, v6, v7, v8, (uint64_t)v2) < 1)
  {
    uint64_t v51 = 4294960568;
  }
  else
  {
    uint64_t v9 = gLogCategoryList;
    if (!gLogCategoryList) {
      goto LABEL_32;
    }
    size_t v10 = 0;
    unint64_t v11 = 0;
    do
    {
      size_t v12 = strlen(*(const char **)(v9 + 24));
      if (v12 > v11) {
        unint64_t v11 = v12;
      }
      _LULevelToString(*(_DWORD *)v9, (uint64_t)__s, v13, v14, v15, v16, v17, v18);
      size_t v19 = strlen(__s);
      if (v19 > v10) {
        size_t v10 = v19;
      }
      uint64_t v9 = *(void *)(v9 + 48);
    }
    while (v9);
    uint64_t v26 = gLogCategoryList;
    if (gLogCategoryList)
    {
      uint64_t v67 = a1;
      do
      {
        v70[0] = 0;
        uint64_t v27 = *(void *)(v26 + 56);
        if (v27)
        {
          uint64_t v28 = *(unsigned __int8 **)(v27 + 16);
          int v29 = *(_DWORD *)(v27 + 24);
          if (v29 != -1) {
            _LULevelToString(v29, (uint64_t)v70, v20, v21, v22, v23, v24, v25);
          }
        }
        else
        {
          uint64_t v28 = 0;
        }
        if (!v28) {
          uint64_t v28 = "";
        }
        stricmp_prefix(v28, "callback");
        v69[0] = 0;
        uint64_t v36 = *(void *)(v26 + 64);
        if (v36)
        {
          uint64_t v37 = *(unsigned __int8 **)(v36 + 16);
          int v38 = *(_DWORD *)(v36 + 24);
          if (v38 != -1) {
            _LULevelToString(v38, (uint64_t)v69, v30, v31, v32, v33, v34, v35);
          }
        }
        else
        {
          uint64_t v37 = 0;
        }
        if (!v37) {
          uint64_t v37 = "";
        }
        stricmp_prefix(v37, "callback");
        _LULevelToString(*(_DWORD *)v26, (uint64_t)__s, v39, v40, v41, v42, v43, v44);
        UpTicksToMilliseconds(*(void *)(v26 + 72));
        if ((int)AppendPrintF(&v68, (uint64_t)"  %-*s  L=%-*s  R=%u/%-5llu  O1=%s  O1L=%s  O2=%s  O2L=%s\n", v45, v46, v47, v48, v49, v50, v11) <= 0)
        {
          uint64_t v51 = 4294960568;
          a1 = v67;
          goto LABEL_43;
        }
        uint64_t v26 = *(void *)(v26 + 48);
      }
      while (v26);
      uint64_t v51 = 0;
      uint64_t v52 = gLogActionList;
      if (gLogCategoryList)
      {
        a1 = v67;
        if (!gLogActionList) {
          goto LABEL_33;
        }
        if ((int)AppendPrintF(&v68, (uint64_t)"\n", v20, v21, v22, v23, v24, v25, v66) <= 0) {
          uint64_t v51 = 4294960568;
        }
        else {
          uint64_t v51 = 0;
        }
        uint64_t v52 = gLogActionList;
        if (gLogActionList) {
          goto LABEL_34;
        }
      }
      else
      {
        a1 = v67;
        if (gLogActionList) {
          goto LABEL_34;
        }
      }
    }
    else
    {
LABEL_32:
      uint64_t v51 = 0;
      uint64_t v52 = gLogActionList;
LABEL_33:
      if (v52)
      {
LABEL_34:
        while (1)
        {
          if ((int v53 = *(const char **)(v52 + 16), strcasecmp(v53, "output")) && strcasecmp(v53, "output2")
            || stricmp_prefix(*(unsigned __int8 **)(v52 + 24), "callback"))
          {
            if ((int)AppendPrintF(&v68, (uint64_t)"  Action: %s:%s=%s\n", v54, v55, v56, v57, v58, v59, *(void *)(v52 + 8)) < 1)break; {
          }
            }
          uint64_t v52 = *(void *)v52;
          if (!v52) {
            goto LABEL_43;
          }
        }
        uint64_t v51 = 4294960568;
      }
    }
  }
LABEL_43:
  pthread_mutex_unlock(&gLogUtilsLock);
  unint64_t v64 = v68;
  if (v68)
  {
    if (a1)
    {
      *a1 = v68;
    }
    else
    {
      if (gLogCategory_LogUtils <= 254
        && (gLogCategory_LogUtils != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_LogUtils, 0xFEu)))
      {
        LogPrintF((uint64_t)&gLogCategory_LogUtils, (uint64_t)"OSStatus LogShow(char **)", 0xFEu, (uint64_t)"%s", v60, v61, v62, v63, (uint64_t)v64);
      }
      free(v64);
    }
  }
  else if (!a1 {
         && gLogCategory_LogUtils <= 90
  }
         && (gLogCategory_LogUtils != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_LogUtils, 0x5Au)))
  {
    LogPrintF((uint64_t)&gLogCategory_LogUtils, (uint64_t)"OSStatus LogShow(char **)", 0x5Au, (uint64_t)"### ERROR: %#m\n", v60, v61, v62, v63, v51);
  }
  return v51;
}

uint64_t _LULevelToString(unsigned __int8 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = 0;
  int v10 = 0;
  int v11 = 0x7FFFFFFF;
  size_t v12 = kLogLevelToStringTable;
  do
  {
    int v13 = *v12;
    v12 += 4;
    int v14 = a1 - v13;
    if (v14 < 0) {
      int v14 = -v14;
    }
    if (v14 < v11)
    {
      int v11 = v14;
      int v10 = v9;
    }
    ++v9;
  }
  while (v9 != 18);
  uint64_t v15 = &kLogLevelToStringTable[4 * v10];
  int v16 = a1 - *v15;
  if (v16 < 1)
  {
    if (v16 < 0) {
      SNPrintF(a2, 64, (uint64_t)"%s-%u", a4, a5, a6, a7, a8, *((void *)v15 + 1));
    }
    else {
      SNPrintF(a2, 64, (uint64_t)"%s", a4, a5, a6, a7, a8, *((void *)v15 + 1));
    }
  }
  else
  {
    SNPrintF(a2, 64, (uint64_t)"%s+%u", a4, a5, a6, a7, a8, *((void *)v15 + 1));
  }
  return a2;
}

_DWORD *LogCategoryCreate(const char *a1, int a2, int a3, const char *a4, int *a5)
{
  return LogCategoryCreateEx(0, a1, a2, a3, a4, a5);
}

uint64_t LogCategoryReplaceF(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return LogCategoryReplaceV(a1, a2, (uint64_t)&a9);
}

uint64_t LogCategoryReplaceV(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  unsigned int v10 = 0;
  uint64_t v9 = 0;
  if (!v3) {
    return -6705;
  }
  VASPrintF((void **)&v9, a2, a3);
  uint64_t v5 = (char *)v9;
  if (!v9) {
    return -6700;
  }
  uint64_t v6 = LogCategoryCreateEx(*(const char **)(v3 + 96), v9, *(_DWORD *)(v3 + 4), *(_DWORD *)(v3 + 16), *(const char **)(v3 + 8), (int *)&v10);
  free(v5);
  if (v6)
  {
    if ((*(unsigned char *)(v3 + 18) & 4) != 0) {
      LogCategory_Remove((void *)v3);
    }
    *a1 = (uint64_t)v6;
  }
  return v10;
}

os_log_t LogCategoryCopyOSLogHandle(uint64_t a1)
{
  LogUtils_EnsureInitialized();
  pthread_mutex_lock(&gLogUtilsLock);
  os_log_t OSLogHandle = _LogCategoryGetOSLogHandle(a1, 0);
  os_log_t v3 = OSLogHandle;
  if (OSLogHandle) {
    uint64_t v4 = OSLogHandle;
  }
  pthread_mutex_unlock(&gLogUtilsLock);
  return v3;
}

BOOL CUFloatsNearlyEqualWithinTolerance(float a1, float a2, float a3)
{
  return vabds_f32(a1, a2) < (float)((float)(fmaxf(fmaxf(fabsf(a1), fabsf(a2)), 1.1755e-38) * a3) + 0.00000011921);
}

BOOL CUDoublesNearlyEqualWithinTolerance(double a1, double a2, double a3)
{
  return vabdd_f64(a1, a2) < fmax(fmax(fabs(a1), fabs(a2)), 2.22507386e-308) * a3 + 2.22044605e-16;
}

BOOL CUFloatsNearlyEqualWithinULPs(int a1, float a2, float a3)
{
  unsigned int v3 = LODWORD(a2);
  if (a2 < 0.0) {
    unsigned int v3 = 0x80000000 - LODWORD(a2);
  }
  unsigned int v4 = 0x80000000 - LODWORD(a3);
  if (a3 >= 0.0) {
    unsigned int v4 = LODWORD(a3);
  }
  int v5 = v3 - v4;
  if (v5 < 0) {
    int v5 = -v5;
  }
  return v5 <= a1;
}

uint64_t iceil2(int a1)
{
  unsigned int v1 = (a1 - 1) | ((a1 - 1) >> 1) | (((a1 - 1) | ((a1 - 1) >> 1)) >> 2);
  unsigned int v2 = v1 | (v1 >> 4) | ((v1 | (v1 >> 4)) >> 8);
  return (v2 | HIWORD(v2)) + 1;
}

unint64_t ifloor2_64(unint64_t a1)
{
  unint64_t v1 = a1 | (a1 >> 1) | ((a1 | (a1 >> 1)) >> 2);
  unint64_t v2 = v1 | (v1 >> 4) | ((v1 | (v1 >> 4)) >> 8);
  unint64_t v3 = v2 | (v2 >> 16) | ((v2 | (v2 >> 16)) >> 32);
  return v3 - (v3 >> 1);
}

uint64_t ilog2_64(unint64_t a1)
{
  if (HIDWORD(a1))
  {
    LOBYTE(v1) = 0;
    do
    {
      LOBYTE(v1) = v1 + 1;
      BOOL v2 = a1 > 3;
      a1 >>= 1;
    }
    while (v2);
  }
  else
  {
    return (__clz(a1 | 1) ^ 0x1F);
  }
  return v1;
}

uint64_t CUFibonacci32(uint64_t result)
{
  if (result)
  {
    if (result <= 0x2E)
    {
      if (result >= 2)
      {
        int v1 = 0;
        int v2 = result - 1;
        LODWORD(result) = 1;
        do
        {
          int v3 = result;
          uint64_t result = (result + v1);
          int v1 = v3;
          --v2;
        }
        while (v2);
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 2971215073;
    }
  }
  return result;
}

double TranslateValue(double a1, double a2, double a3, double a4, double a5)
{
  return a4 + (a1 - a2) / (a3 - a2) * (a5 - a4);
}

uint64_t ValueSmootherInit(uint64_t a1, int a2, unsigned int a3)
{
  *(void *)a1 = malloc_type_calloc(a3 * a2, 8uLL, 0x100004000313F17uLL);
  uint64_t v6 = malloc_type_calloc(a3, 8uLL, 0x100004000313F17uLL);
  *(void *)(a1 + 8) = v6;
  if (*(void *)a1) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    ValueSmootherFree(a1);
    return 4294960568;
  }
  else
  {
    uint64_t result = 0;
    *(_DWORD *)(a1 + 16) = a2;
    *(_DWORD *)(a1 + 20) = a3;
    *(_DWORD *)(a1 + 24) = 0;
    *(unsigned char *)(a1 + 28) = 0;
  }
  return result;
}

void ValueSmootherFree(uint64_t a1)
{
  int v2 = *(void **)a1;
  if (v2)
  {
    free(v2);
    *(void *)a1 = 0;
  }
  int v3 = *(void **)(a1 + 8);
  if (v3)
  {
    free(v3);
    *(void *)(a1 + 8) = 0;
  }
}

double ValueSmootherGet(uint64_t a1)
{
  return *(double *)(*(void *)(a1 + 8) + 8 * (*(_DWORD *)(a1 + 20) - 1));
}

double ValueSmootherUpdate(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 28))
  {
    uint64_t v3 = *(unsigned int *)(a1 + 20);
    int v2 = *(_DWORD *)(a1 + 24);
    unsigned int v4 = *(_DWORD *)(a1 + 16);
    if (v2 + 1 < v4) {
      int v5 = v2 + 1;
    }
    else {
      int v5 = 0;
    }
    *(_DWORD *)(a1 + 24) = v5;
    if (v3)
    {
      uint64_t v6 = 0;
      BOOL v7 = *(double **)a1;
      uint64_t v8 = *(void *)(a1 + 8);
      do
      {
        *(double *)(v8 + 8 * v6) = a2 / (double)v4 + *(double *)(v8 + 8 * v6) - v7[v2] / (double)v4;
        v7[v2] = a2;
        v2 += v4;
        a2 = *(double *)(v8 + 8 * v6++);
      }
      while (v3 != v6);
      LODWORD(v9) = v3;
    }
    else
    {
      LODWORD(v9) = 0;
    }
  }
  else
  {
    uint64_t v9 = *(unsigned int *)(a1 + 20);
    uint64_t v10 = (v9 * *(_DWORD *)(a1 + 16));
    if (v10)
    {
      int v11 = *(double **)a1;
      do
      {
        *v11++ = a2;
        --v10;
      }
      while (v10);
    }
    if (v9)
    {
      size_t v12 = *(double **)(a1 + 8);
      uint64_t v13 = v9;
      do
      {
        *v12++ = a2;
        --v13;
      }
      while (v13);
    }
    *(unsigned char *)(a1 + 28) = 1;
  }
  return *(double *)(*(void *)(a1 + 8) + 8 * (v9 - 1));
}

uint64_t MFiPlatform_VerifySignature(const UInt8 *a1, uint64_t a2, const UInt8 *a3, CFIndex a4, const UInt8 *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return MFiPlatform_VerifySignatureEx(a1, a2, a3, a4, a5, a6, 0, a8);
}

uint64_t MFiPlatform_VerifySignatureEx(const UInt8 *a1, uint64_t a2, const UInt8 *a3, CFIndex a4, const UInt8 *a5, uint64_t a6, CFDictionaryRef theDict, uint64_t a8)
{
  error[4] = *(CFErrorRef *)MEMORY[0x1E4F143B8];
  SecTrustRef v142 = 0;
  if (gLogCategory_MFiClientCore <= 30)
  {
    if (gLogCategory_MFiClientCore != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 0x1Eu)) {
      LogPrintF((uint64_t)&gLogCategory_MFiClientCore, (uint64_t)"OSStatus MFiPlatform_VerifySignatureEx(const void *, size_t, const void *, size_t, const void *, size_t, CFDictionaryRef)", 0x1Eu, (uint64_t)"MFi verify signature: %zu data bytes, %zu sig bytes, %zu cert bytes, extraInfo %s\n", (uint64_t)a5, a6, (uint64_t)theDict, a8, a2);
    }
    if (gLogCategory_MFiClientCore <= 9)
    {
      if (gLogCategory_MFiClientCore != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 9u)) {
        LogPrintF((uint64_t)&gLogCategory_MFiClientCore, (uint64_t)"OSStatus MFiPlatform_VerifySignatureEx(const void *, size_t, const void *, size_t, const void *, size_t, CFDictionaryRef)", 9u, (uint64_t)"MFi challenge:\n%1.2H\n", (uint64_t)a5, a6, (uint64_t)theDict, a8, (uint64_t)a1);
      }
      if (gLogCategory_MFiClientCore <= 9)
      {
        if (gLogCategory_MFiClientCore != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 9u)) {
          LogPrintF((uint64_t)&gLogCategory_MFiClientCore, (uint64_t)"OSStatus MFiPlatform_VerifySignatureEx(const void *, size_t, const void *, size_t, const void *, size_t, CFDictionaryRef)", 9u, (uint64_t)"MFi certificate:\n%1.2H\n", (uint64_t)a5, a6, (uint64_t)theDict, a8, (uint64_t)a5);
        }
        if (gLogCategory_MFiClientCore <= 9)
        {
          if (gLogCategory_MFiClientCore != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 9u)) {
            LogPrintF((uint64_t)&gLogCategory_MFiClientCore, (uint64_t)"OSStatus MFiPlatform_VerifySignatureEx(const void *, size_t, const void *, size_t, const void *, size_t, CFDictionaryRef)", 9u, (uint64_t)"MFi signature:\n%1.2H\n", (uint64_t)a5, a6, (uint64_t)theDict, a8, (uint64_t)a3);
          }
          if (gLogCategory_MFiClientCore <= 9
            && (gLogCategory_MFiClientCore != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 9u)))
          {
            LogPrintF((uint64_t)&gLogCategory_MFiClientCore, (uint64_t)"OSStatus MFiPlatform_VerifySignatureEx(const void *, size_t, const void *, size_t, const void *, size_t, CFDictionaryRef)", 9u, (uint64_t)"MFi extra info: %##@", (uint64_t)a5, a6, (uint64_t)theDict, a8, (uint64_t)theDict);
          }
        }
      }
    }
  }
  if (theDict && CFDictionaryGetValue(theDict, @"baIC"))
  {
    unsigned int v144 = 0;
    SecTrustRef trust = 0;
    error[0] = 0;
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    if (!Mutable)
    {
      CFDataRef v22 = 0;
      CFDataRef v16 = 0;
      unsigned int v144 = -6728;
LABEL_43:
      if (error[0]) {
        CFRelease(error[0]);
      }
      if (v22) {
        CFRelease(v22);
      }
      if (v16) {
        CFRelease(v16);
      }
      if (Mutable) {
        CFRelease(Mutable);
      }
      return v144;
    }
    CFDataRef v16 = CFDataCreate(0, a5, a6);
    if (!v16) {
      goto LABEL_170;
    }
    SecCertificateRef v17 = SecCertificateCreateWithData(0, v16);
    CFRelease(v16);
    if (!v17)
    {
      unsigned int v144 = -6742;
      if (gLogCategory_MFiClientCore <= 90
        && (gLogCategory_MFiClientCore != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 0x5Au)))
      {
        LogPrintF((uint64_t)&gLogCategory_MFiClientCore, (uint64_t)"OSStatus _MFiPlatform_VerifySignatureBAA(const void *, size_t, const void *, size_t, const void *, size_t, CFDictionaryRef)", 0x5Au, (uint64_t)"### Decode BAA intermediate cert failed", v18, v19, v20, v21, v138);
      }
      CFDataRef v16 = 0;
      CFDataRef v22 = 0;
      goto LABEL_41;
    }
    CFArrayAppendValue(Mutable, v17);
    CFRelease(v17);
    CFDataRef v16 = CFDataCreate(0, a1, a2);
    if (!v16)
    {
LABEL_170:
      CFDataRef v22 = 0;
      goto LABEL_171;
    }
    CFDataRef v22 = CFDataCreate(0, a3, a4);
    if (v22)
    {
      uint64_t v23 = SecCertificateCopyKey(v17);
      if (v23)
      {
        uint64_t v28 = v23;
        int v29 = SecKeyVerifySignature(v23, (SecKeyAlgorithm)*MEMORY[0x1E4F3BA70], v16, v22, error);
        CFRelease(v28);
        CFErrorRef v34 = error[0];
        if (!v29 || error[0])
        {
          unsigned int v144 = -6716;
          if (gLogCategory_MFiClientCore > 90) {
            goto LABEL_41;
          }
          if (gLogCategory_MFiClientCore == -1)
          {
            if (!_LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 0x5Au)) {
              goto LABEL_41;
            }
            CFErrorRef v34 = error[0];
          }
          LogPrintF((uint64_t)&gLogCategory_MFiClientCore, (uint64_t)"OSStatus _MFiPlatform_VerifySignatureBAA(const void *, size_t, const void *, size_t, const void *, size_t, CFDictionaryRef)", 0x5Au, (uint64_t)"### Verify BAA signature failed: %@", v30, v31, v32, v33, (uint64_t)v34);
          goto LABEL_41;
        }
        CFTypeID TypeID = CFDataGetTypeID();
        TypedCFDataRef Value = CFDictionaryGetTypedValue(theDict, @"baIC", TypeID, (int *)&v144);
        if (TypedValue)
        {
          SecCertificateRef v37 = SecCertificateCreateWithData(0, TypedValue);
          if (v37)
          {
            SecCertificateRef v38 = v37;
            CFArrayAppendValue(Mutable, v37);
            CFRelease(v38);
            AppleBasicAttestationUser = (const void *)SecPolicyCreateAppleBasicAttestationUser();
            if (AppleBasicAttestationUser)
            {
              uint64_t v40 = AppleBasicAttestationUser;
              unsigned int v144 = SecTrustCreateWithCertificates(Mutable, AppleBasicAttestationUser, &trust);
              CFRelease(v40);
              uint64_t v45 = v144;
              if (v144)
              {
                if (gLogCategory_MFiClientCore > 90) {
                  goto LABEL_41;
                }
                if (gLogCategory_MFiClientCore == -1)
                {
                  if (!_LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 0x5Au)) {
                    goto LABEL_41;
                  }
                  uint64_t v45 = v144;
                }
                LogPrintF((uint64_t)&gLogCategory_MFiClientCore, (uint64_t)"OSStatus _MFiPlatform_VerifySignatureBAA(const void *, size_t, const void *, size_t, const void *, size_t, CFDictionaryRef)", 0x5Au, (uint64_t)"### Create BAA trust failed: %#m", v41, v42, v43, v44, v45);
                goto LABEL_41;
              }
              CFDataRef v46 = CFDataCreateWithBytesNoCopy(0, BAARootCert, 542, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
              if (!v46) {
                goto LABEL_171;
              }
              CFDataRef v47 = v46;
              values = SecCertificateCreateWithData(0, v46);
              CFRelease(v47);
              if (values)
              {
                CFArrayRef v48 = CFArrayCreate(0, (const void **)&values, 1, MEMORY[0x1E4F1D510]);
                CFRelease(values);
                if (v48)
                {
                  unsigned int v144 = SecTrustSetAnchorCertificates(trust, v48);
                  CFRelease(v48);
                  uint64_t v53 = v144;
                  if (v144)
                  {
                    if (gLogCategory_MFiClientCore > 90) {
                      goto LABEL_41;
                    }
                    if (gLogCategory_MFiClientCore == -1)
                    {
                      if (!_LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 0x5Au)) {
                        goto LABEL_41;
                      }
                      uint64_t v53 = v144;
                    }
                    LogPrintF((uint64_t)&gLogCategory_MFiClientCore, (uint64_t)"OSStatus _MFiPlatform_VerifySignatureBAA(const void *, size_t, const void *, size_t, const void *, size_t, CFDictionaryRef)", 0x5Au, (uint64_t)"### Set BAA anchors failed: %#m", v49, v50, v51, v52, v53);
                    goto LABEL_41;
                  }
                  BOOL v54 = SecTrustEvaluateWithError(trust, error);
                  CFErrorRef v55 = error[0];
                  if (!v54 || error[0])
                  {
                    unsigned int v144 = -71164;
                    if (gLogCategory_MFiClientCore <= 90)
                    {
                      if (gLogCategory_MFiClientCore != -1)
                      {
LABEL_211:
                        uint64_t v138 = (uint64_t)v55;
                        unint64_t v137 = "### Verify BAA trust failed: %@";
                        goto LABEL_212;
                      }
                      if (_LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 0x5Au))
                      {
                        CFErrorRef v55 = error[0];
                        goto LABEL_211;
                      }
                    }
                  }
LABEL_41:
                  if (trust) {
                    CFRelease(trust);
                  }
                  goto LABEL_43;
                }
                goto LABEL_171;
              }
              if (gLogCategory_MFiClientCore > 90
                || gLogCategory_MFiClientCore == -1
                && !_LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 0x5Au))
              {
                goto LABEL_41;
              }
              unint64_t v137 = "### Create BAA root cert failed";
            }
            else
            {
              unsigned int v144 = -6700;
              if (gLogCategory_MFiClientCore > 90
                || gLogCategory_MFiClientCore == -1
                && !_LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 0x5Au))
              {
                goto LABEL_41;
              }
              unint64_t v137 = "### Get BAA policy failed";
            }
          }
          else
          {
            unsigned int v144 = -6742;
            if (gLogCategory_MFiClientCore > 90
              || gLogCategory_MFiClientCore == -1
              && !_LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 0x5Au))
            {
              goto LABEL_41;
            }
            unint64_t v137 = "### Bad BAA intermediate cert";
          }
        }
        else
        {
          if (gLogCategory_MFiClientCore > 90
            || gLogCategory_MFiClientCore == -1 && !_LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 0x5Au))
          {
            goto LABEL_41;
          }
          unint64_t v137 = "### No BAA intermediate cert";
        }
      }
      else
      {
        unsigned int v144 = -71155;
        if (gLogCategory_MFiClientCore > 90
          || gLogCategory_MFiClientCore == -1 && !_LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 0x5Au))
        {
          goto LABEL_41;
        }
        unint64_t v137 = "### No BAA leaf public key";
      }
LABEL_212:
      LogPrintF((uint64_t)&gLogCategory_MFiClientCore, (uint64_t)"OSStatus _MFiPlatform_VerifySignatureBAA(const void *, size_t, const void *, size_t, const void *, size_t, CFDictionaryRef)", 0x5Au, (uint64_t)v137, v24, v25, v26, v27, v138);
      goto LABEL_41;
    }
LABEL_171:
    unsigned int v144 = -6728;
    goto LABEL_41;
  }
  uint64_t v57 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  if (!v57)
  {
    CFDataRef v58 = 0;
    goto LABEL_173;
  }
  CFDataRef v58 = CFDataCreate(0, a5, a6);
  if (!v58)
  {
LABEL_173:
    CFArrayRef v79 = 0;
    CFArrayRef v60 = 0;
    uint64_t v80 = 0;
    uint64_t v56 = 4294960568;
    goto LABEL_130;
  }
  CFArrayRef v59 = (const __CFArray *)SecCMSCertificatesOnlyMessageCopyCertificates();
  CFArrayRef v60 = v59;
  if (v59)
  {
    if (CFArrayGetCount(v59) < 1)
    {
      CFArrayRef v79 = 0;
      uint64_t v80 = 0;
      uint64_t v56 = 4294960532;
      goto LABEL_130;
    }
    CFStringRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(v60, 0);
    CFTypeID v62 = CFGetTypeID(ValueAtIndex);
    if (v62 != SecCertificateGetTypeID())
    {
      CFArrayRef v79 = 0;
      uint64_t v80 = 0;
      uint64_t v56 = 4294960540;
      goto LABEL_130;
    }
    CFArrayAppendValue(v57, ValueAtIndex);
    uint64_t v63 = (const void *)SecPolicyCreateiAP();
    uint64_t v139 = 0;
    if (v63) {
      goto LABEL_58;
    }
    goto LABEL_68;
  }
  SecCertificateRef v78 = SecCertificateCreateWithData(0, v58);
  if (v78)
  {
    CFStringRef ValueAtIndex = v78;
    CFArrayAppendValue(v57, v78);
    uint64_t v63 = (const void *)SecPolicyCreateiAPSWAuth();
    uint64_t v139 = ValueAtIndex;
    if (v63)
    {
LABEL_58:
      uint64_t v56 = SecTrustCreateWithCertificates(v57, v63, &v142);
      CFRelease(v63);
      if (!v56)
      {
        if (a4 == 128) {
          uint64_t v68 = 1;
        }
        else {
          uint64_t v68 = 6;
        }
        CFArrayRef theArray = (const __CFArray *)((uint64_t (*)(uint64_t))softLinkmfaa_certificateManager_copyAnchorCertificates[0])(v68);
        if (theArray)
        {
          if (gLogCategory_MFiClientCore <= 30
            && (gLogCategory_MFiClientCore != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 0x1Eu)))
          {
            CFIndex Count = CFArrayGetCount(theArray);
            LogPrintF((uint64_t)&gLogCategory_MFiClientCore, (uint64_t)"OSStatus MFiPlatform_VerifySignatureEx(const void *, size_t, const void *, size_t, const void *, size_t, CFDictionaryRef)", 0x1Eu, (uint64_t)"MFi verify signature: %d anchor certs\n", v74, v75, v76, v77, Count);
          }
          uint64_t v81 = SecTrustSetAnchorCertificates(v142, theArray);
          if (v81)
          {
            uint64_t v56 = v81;
            if (gLogCategory_MFiClientCore <= 90
              && (gLogCategory_MFiClientCore != -1
               || _LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 0x5Au)))
            {
              LogPrintF((uint64_t)&gLogCategory_MFiClientCore, (uint64_t)"OSStatus MFiPlatform_VerifySignatureEx(const void *, size_t, const void *, size_t, const void *, size_t, CFDictionaryRef)", 0x5Au, (uint64_t)"### MFi set anchor certs failed: %#m\n", v82, v83, v84, v85, v56);
            }
            goto LABEL_129;
          }
          uint64_t v86 = SecTrustSetAnchorCertificatesOnly(v142, 1u);
          if (v86)
          {
            uint64_t v56 = v86;
            if (gLogCategory_MFiClientCore <= 90
              && (gLogCategory_MFiClientCore != -1
               || _LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 0x5Au)))
            {
              LogPrintF((uint64_t)&gLogCategory_MFiClientCore, (uint64_t)"OSStatus MFiPlatform_VerifySignatureEx(const void *, size_t, const void *, size_t, const void *, size_t, CFDictionaryRef)", 0x5Au, (uint64_t)"### MFi set anchor certs only failed: %#m\n", v87, v88, v89, v90, v56);
            }
            goto LABEL_129;
          }
        }
        else if (gLogCategory_MFiClientCore <= 90 {
               && (gLogCategory_MFiClientCore != -1
        }
                || _LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 0x5Au)))
        {
          LogPrintF((uint64_t)&gLogCategory_MFiClientCore, (uint64_t)"OSStatus MFiPlatform_VerifySignatureEx(const void *, size_t, const void *, size_t, const void *, size_t, CFDictionaryRef)", 0x5Au, (uint64_t)"### MFi no certificates from MFA\n", v69, v70, v71, v72, v138);
        }
        CFErrorRef err = 0;
        BOOL v95 = SecTrustEvaluateWithError(v142, &err);
        if (v95) {
          uint64_t v56 = 0;
        }
        else {
          uint64_t v56 = 4294960563;
        }
        CFErrorRef v96 = err;
        if (!v95 && err)
        {
          unsigned int Code = CFErrorGetCode(err);
          if (Code) {
            uint64_t v56 = Code;
          }
          else {
            uint64_t v56 = 4294960563;
          }
          CFErrorRef v96 = err;
        }
        if (v96) {
          CFRelease(v96);
        }
        if (v56)
        {
          uint64_t v80 = v139;
          CFArrayRef v79 = theArray;
          if (gLogCategory_MFiClientCore <= 90
            && (gLogCategory_MFiClientCore != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 0x5Au)))
          {
            LogPrintF((uint64_t)&gLogCategory_MFiClientCore, (uint64_t)"OSStatus MFiPlatform_VerifySignatureEx(const void *, size_t, const void *, size_t, const void *, size_t, CFDictionaryRef)", 0x5Au, (uint64_t)"### MFi SecTrustEvaluate failed: %#m\n", v91, v92, v93, v94, v56);
          }
          goto LABEL_130;
        }
        uint64_t v98 = MEMORY[0x192FA98E0](v142);
        if (!v98)
        {
          uint64_t v56 = 4294960596;
          goto LABEL_129;
        }
        long long v99 = (void *)v98;
        SecTrustRef trust = 0;
        if (a4 == 128)
        {
          CC_SHA1(a1, a2, (unsigned __int8 *)error);
          CFDataRef v100 = CFDataCreate(0, (const UInt8 *)error, 20);
          if (v100)
          {
            SecTrustRef v101 = v100;
            uint64_t v102 = (const __CFString **)MEMORY[0x1E4F3BAC8];
            goto LABEL_94;
          }
        }
        else
        {
          CC_SHA256(a1, a2, (unsigned __int8 *)error);
          CFDataRef v103 = CFDataCreate(0, (const UInt8 *)error, 32);
          if (v103)
          {
            SecTrustRef v101 = v103;
            uint64_t v102 = (const __CFString **)MEMORY[0x1E4F3BA18];
LABEL_94:
            CFStringRef v104 = *v102;
            CFDataRef v105 = CFDataCreate(0, a3, a4);
            if (!v105)
            {
              uint64_t v56 = 4294960568;
LABEL_109:
              CFRelease(v101);
LABEL_110:
              CFRelease(v99);
              if (!v56)
              {
                if (MFAAuthenticationLibrary_sOnce != -1) {
                  dispatch_once(&MFAAuthenticationLibrary_sOnce, &__block_literal_global_11639);
                }
                if (MFAAuthenticationLibrary_sLib
                  && dlsym((void *)MFAAuthenticationLibrary_sLib, "mfaa_certificateManager_validateCertificate"))
                {
                  uint64_t v115 = ((uint64_t (*)(uint64_t, uint64_t))softLinkmfaa_certificateManager_validateCertificate[0])((uint64_t)v58, 0);
                  if (v115 != 1)
                  {
                    uint64_t v56 = 4294896132;
                    uint64_t v80 = v139;
                    CFArrayRef v79 = theArray;
                    if (gLogCategory_MFiClientCore <= 60)
                    {
                      uint64_t v120 = v115;
                      if (gLogCategory_MFiClientCore != -1
                        || _LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 0x3Cu))
                      {
                        LogPrintF((uint64_t)&gLogCategory_MFiClientCore, (uint64_t)"OSStatus MFiPlatform_VerifySignatureEx(const void *, size_t, const void *, size_t, const void *, size_t, CFDictionaryRef)", 0x3Cu, (uint64_t)"### MFi cert rejected (%d)\n", v116, v117, v118, v119, v120);
                      }
                    }
                    goto LABEL_130;
                  }
                  goto LABEL_128;
                }
                if (gLogCategory_MFiClientCore <= 60
                  && (gLogCategory_MFiClientCore != -1
                   || _LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 0x3Cu)))
                {
                  LogPrintF((uint64_t)&gLogCategory_MFiClientCore, (uint64_t)"OSStatus MFiPlatform_VerifySignatureEx(const void *, size_t, const void *, size_t, const void *, size_t, CFDictionaryRef)", 0x3Cu, (uint64_t)"### MFi cert manager not available\n", v111, v112, v113, v114, v138);
                }
                if (a4 != 128
                  || (CFDataRef v121 = SecCertificateCopySerialNumberData((SecCertificateRef)ValueAtIndex, 0)) == 0)
                {
LABEL_128:
                  uint64_t v56 = 0;
                  goto LABEL_129;
                }
                CFDataRef v122 = v121;
                BytePtr = CFDataGetBytePtr(v121);
                CFIndex Length = CFDataGetLength(v122);
                if (gLogCategory_MFiClientCore <= 40
                  && (gLogCategory_MFiClientCore != -1
                   || _LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 0x28u)))
                {
                  LogPrintF((uint64_t)&gLogCategory_MFiClientCore, (uint64_t)"OSStatus _VerifySerialNumber(const uint8_t *, size_t)", 0x28u, (uint64_t)"MFi certificate serial number: %.3H\n", v124, v125, v126, v127, (uint64_t)BytePtr);
                }
                if (Length == 15
                  && (*(void *)BytePtr == 0x7AA191212AA3333
                    ? (BOOL v130 = *(void *)(BytePtr + 7) == 0x10000AA0600AA07)
                    : (BOOL v130 = 0),
                      v130))
                {
                  if (gLogCategory_MFiClientCore > 40)
                  {
                    uint64_t v56 = 0;
LABEL_156:
                    uint64_t v80 = v139;
                    CFArrayRef v79 = theArray;
LABEL_169:
                    CFRelease(v122);
                    goto LABEL_130;
                  }
                  uint64_t v80 = v139;
                  CFArrayRef v79 = theArray;
                  if (gLogCategory_MFiClientCore != -1
                    || _LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 0x28u))
                  {
                    uint64_t v135 = "Allowing MFi test certificate serial number\n";
                    unsigned int v136 = 40;
                    goto LABEL_163;
                  }
                }
                else
                {
                  if (IAPAuthenticationLibrary_sOnce != -1) {
                    dispatch_once(&IAPAuthenticationLibrary_sOnce, &__block_literal_global_42);
                  }
                  if (IAPAuthenticationLibrary_sLib
                    && dlsym((void *)IAPAuthenticationLibrary_sLib, "MFiVerifyCertificateSerialNumber"))
                  {
                    uint64_t v56 = ((uint64_t (*)(uint64_t, uint64_t))softLinkMFiVerifyCertificateSerialNumber[0])((uint64_t)BytePtr, Length);
                    if (v56
                      && gLogCategory_MFiClientCore <= 60
                      && (gLogCategory_MFiClientCore != -1
                       || _LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 0x3Cu)))
                    {
                      LogPrintF((uint64_t)&gLogCategory_MFiClientCore, (uint64_t)"OSStatus _VerifySerialNumber(const uint8_t *, size_t)", 0x3Cu, (uint64_t)"### Bad MFi certificate SN <%.3H>: %#m\n", v131, v132, v133, v134, (uint64_t)BytePtr);
                    }
                    goto LABEL_156;
                  }
                  uint64_t v80 = v139;
                  CFArrayRef v79 = theArray;
                  if (gLogCategory_MFiClientCore <= 90
                    && (gLogCategory_MFiClientCore != -1
                     || _LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 0x5Au)))
                  {
                    uint64_t v135 = "Skipping MFi certificate serial number check (no func)\n";
                    unsigned int v136 = 90;
LABEL_163:
                    LogPrintF((uint64_t)&gLogCategory_MFiClientCore, (uint64_t)"OSStatus _VerifySerialNumber(const uint8_t *, size_t)", v136, (uint64_t)v135, v124, v125, v126, v127, v138);
                  }
                }
                uint64_t v56 = 0;
                goto LABEL_169;
              }
LABEL_129:
              uint64_t v80 = v139;
              CFArrayRef v79 = theArray;
              goto LABEL_130;
            }
            CFDataRef v106 = v105;
            if (SecKeyVerifySignature((SecKeyRef)v99, v104, v101, v105, &trust))
            {
              uint64_t v56 = 0;
              goto LABEL_108;
            }
            if (trust)
            {
              uint64_t v56 = CFErrorGetCode(trust);
              if (!v56) {
                goto LABEL_108;
              }
            }
            else
            {
              uint64_t v56 = 4294960596;
            }
            if (gLogCategory_MFiClientCore <= 90
              && (gLogCategory_MFiClientCore != -1
               || _LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 0x5Au)))
            {
              LogPrintF((uint64_t)&gLogCategory_MFiClientCore, (uint64_t)"OSStatus _SecKeyVerifySignature(SecKeyRef, const uint8_t *, size_t, const uint8_t *, size_t)", 0x5Au, (uint64_t)"### MFi SecKeyVerifySignature failed: %#m, %@\n", v107, v108, v109, v110, v56);
            }
LABEL_108:
            CFRelease(v101);
            CFRelease(v106);
            SecTrustRef v101 = trust;
            if (!trust) {
              goto LABEL_110;
            }
            goto LABEL_109;
          }
        }
        CFRelease(v99);
        uint64_t v56 = 4294960568;
        goto LABEL_129;
      }
      if (gLogCategory_MFiClientCore <= 90)
      {
        uint64_t v80 = v139;
        if (gLogCategory_MFiClientCore != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 0x5Au)) {
          LogPrintF((uint64_t)&gLogCategory_MFiClientCore, (uint64_t)"OSStatus MFiPlatform_VerifySignatureEx(const void *, size_t, const void *, size_t, const void *, size_t, CFDictionaryRef)", 0x5Au, (uint64_t)"### MFi create trust failed: %#m\n", v64, v65, v66, v67, v56);
        }
        CFArrayRef v79 = 0;
        goto LABEL_130;
      }
      CFArrayRef v79 = 0;
LABEL_223:
      uint64_t v80 = v139;
      goto LABEL_130;
    }
LABEL_68:
    CFArrayRef v79 = 0;
    uint64_t v56 = 4294960596;
    goto LABEL_223;
  }
  CFArrayRef v79 = 0;
  CFArrayRef v60 = 0;
  uint64_t v80 = 0;
  uint64_t v56 = 4294960554;
LABEL_130:
  if (v142) {
    CFRelease(v142);
  }
  if (v60) {
    CFRelease(v60);
  }
  if (v79) {
    CFRelease(v79);
  }
  if (v57) {
    CFRelease(v57);
  }
  if (v80) {
    CFRelease(v80);
  }
  if (v58) {
    CFRelease(v58);
  }
  return v56;
}

uint64_t initMFiVerifyCertificateSerialNumber(uint64_t a1, uint64_t a2)
{
  if (IAPAuthenticationLibrary_sOnce != -1) {
    dispatch_once(&IAPAuthenticationLibrary_sOnce, &__block_literal_global_42);
  }
  unsigned int v4 = (uint64_t (*)())dlsym((void *)IAPAuthenticationLibrary_sLib, "MFiVerifyCertificateSerialNumber");
  softLinkMFiVerifyCertificateSerialNumber[0] = v4;
  return ((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2);
}

void *__IAPAuthenticationLibrary_block_invoke()
{
  uint64_t result = dlopen("/System/Library/PrivateFrameworks/IAPAuthentication.framework/IAPAuthentication", 2);
  IAPAuthenticationLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t initmfaa_certificateManager_validateCertificate(uint64_t a1, uint64_t a2)
{
  if (MFAAuthenticationLibrary_sOnce != -1) {
    dispatch_once(&MFAAuthenticationLibrary_sOnce, &__block_literal_global_11639);
  }
  unsigned int v4 = (uint64_t (*)())dlsym((void *)MFAAuthenticationLibrary_sLib, "mfaa_certificateManager_validateCertificate");
  softLinkmfaa_certificateManager_validateCertificate[0] = v4;
  return ((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2);
}

void *__MFAAuthenticationLibrary_block_invoke()
{
  uint64_t result = dlopen("/System/Library/PrivateFrameworks/MFAAuthentication.framework/MFAAuthentication", 2);
  MFAAuthenticationLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t initmfaa_certificateManager_copyAnchorCertificates(uint64_t a1)
{
  if (MFAAuthenticationLibrary_sOnce != -1) {
    dispatch_once(&MFAAuthenticationLibrary_sOnce, &__block_literal_global_11639);
  }
  int v2 = (uint64_t (*)())dlsym((void *)MFAAuthenticationLibrary_sLib, "mfaa_certificateManager_copyAnchorCertificates");
  softLinkmfaa_certificateManager_copyAnchorCertificates[0] = v2;
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

uint64_t MFiSAP_Create(void *a1, int a2)
{
  if (a2 != 1) {
    return 4294960581;
  }
  uint64_t v3 = malloc_type_calloc(1uLL, 0xB8uLL, 0x1070040EAFE2D55uLL);
  if (!v3) {
    return 4294960568;
  }
  unsigned int v4 = v3;
  uint64_t result = 0;
  *unsigned int v4 = 257;
  *a1 = v4;
  return result;
}

void MFiSAP_Delete(_CCCryptor **__s)
{
  if (*((unsigned char *)__s + 168))
  {
    AES_CTR_Final(__s + 15);
    *((unsigned char *)__s + 168) = 0;
  }
  int v2 = __s[13];
  if (v2)
  {
    free(v2);
    __s[13] = 0;
  }
  __s[14] = 0;
  uint64_t v3 = __s[22];
  if (v3)
  {
    CFRelease(v3);
    __s[22] = 0;
  }
  memset_s(__s, 0xB8uLL, 0, 0xB8uLL);
  free(__s);
}

uint64_t MFiSAP_CopyCertificate(uint64_t a1, void *a2, void *a3)
{
  if (*(unsigned char *)a1 != 4) {
    return 4294960587;
  }
  if (!*(void *)(a1 + 104)) {
    return 4294960569;
  }
  size_t v4 = *(void *)(a1 + 112);
  if (!v4) {
    return 4294960553;
  }
  BOOL v7 = malloc_type_malloc(v4, 0x3AF98461uLL);
  if (!v7) {
    return 4294960568;
  }
  uint64_t v8 = v7;
  memcpy(v7, *(const void **)(a1 + 104), *(void *)(a1 + 112));
  uint64_t result = 0;
  *a2 = v8;
  *a3 = *(void *)(a1 + 112);
  return result;
}

uint64_t MFiSAP_CopyCertificateSerialNumber(uint64_t a1, void *a2, void *a3)
{
  if (*(unsigned char *)a1 != 4) {
    return 4294960587;
  }
  size_t v4 = *(const UInt8 **)(a1 + 104);
  if (!v4) {
    return 4294960569;
  }
  CFIndex v6 = *(void *)(a1 + 112);
  if (!v6) {
    return 4294960553;
  }
  CFDataRef v7 = CFDataCreate(0, v4, v6);
  if (!v7) {
    return 4294960568;
  }
  CFDataRef v8 = v7;
  CFArrayRef v9 = (const __CFArray *)SecCMSCertificatesOnlyMessageCopyCertificates();
  CFRelease(v8);
  if (v9)
  {
    unsigned int v18 = 0;
    size_t v17 = 0;
    if (CFArrayGetCount(v9) <= 0)
    {
      int v16 = -6764;
    }
    else
    {
      CFStringRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(v9, 0);
      CFTypeID v11 = CFGetTypeID(ValueAtIndex);
      if (v11 == SecCertificateGetTypeID())
      {
        CFDataRef v12 = SecCertificateCopySerialNumberData((SecCertificateRef)ValueAtIndex, 0);
        if (v12)
        {
          CFDataRef v13 = v12;
          int v14 = CFCopyData(v12, &v17, &v18);
          CFRelease(v13);
          if (!v18)
          {
            if (v17 >= 8 && v17 != 16)
            {
              if (IsAppleInternalBuild_sOnce != -1) {
                dispatch_once(&IsAppleInternalBuild_sOnce, &__block_literal_global_116);
              }
              if (IsAppleInternalBuild_sIsInternal) {
                v14[7] &= ~0x80u;
              }
            }
            *a2 = v14;
            *a3 = v17;
            unsigned int v18 = 0;
          }
          goto LABEL_12;
        }
        int v16 = -6727;
      }
      else
      {
        int v16 = -6756;
      }
    }
    unsigned int v18 = v16;
LABEL_12:
    CFRelease(v9);
    return v18;
  }
  return 4294960554;
}

uint64_t MFiSAP_Exchange(unsigned __int8 *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, char *a6)
{
  CFIndex v6 = a6;
  CFDataRef v7 = a5;
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  int v11 = *a1;
  if (v11 == 1)
  {
    if (a2) {
      int v11 = 5;
    }
    else {
      int v11 = 2;
    }
    *a1 = v11;
  }
  if (v11 == 3)
  {
    unsigned int v46 = 0;
    if (a3 >= 36)
    {
      unint64_t v15 = bswap32(*(_DWORD *)(a2 + 32));
      uint64_t result = 4294960553;
      if (!v15) {
        goto LABEL_36;
      }
      if (a3 - 36 < v15) {
        goto LABEL_36;
      }
      size_t v17 = (unsigned int *)(a2 + a3);
      unsigned int __src = (const UInt8 *)(a2 + 36);
      unsigned int v18 = (unsigned int *)(a2 + 36 + v15);
      if ((uint64_t)(a3 - (v15 + 36)) < 4) {
        goto LABEL_36;
      }
      unsigned int v20 = *v18;
      uint64_t v19 = (char *)(v18 + 1);
      size_t v21 = bswap32(v20);
      if (!v21 || (char *)v17 - v19 < v21) {
        goto LABEL_36;
      }
      memset(&c, 0, sizeof(c));
      uint64_t v23 = (unsigned int *)&v19[v21];
      if ((char *)v17 - &v19[v21] >= 4)
      {
        unint64_t v41 = v15;
        unsigned int v25 = *v23;
        uint64_t v24 = (UInt8 *)(v23 + 1);
        unint64_t v26 = bswap32(v25);
        if ((char *)v17 - (char *)v24 < v26) {
          goto LABEL_36;
        }
        uint64_t v28 = _OPACKDecodeBytes(0, v24, v26, 0, &v46);
        if (!v28)
        {
          if (v46) {
            uint64_t result = v46;
          }
          else {
            uint64_t result = 4294960554;
          }
          goto LABEL_36;
        }
        int v29 = v28;
        CFTypeID v30 = CFGetTypeID(v28);
        if (v30 != CFDictionaryGetTypeID())
        {
          unsigned int v46 = -6756;
          CFRelease(v29);
          CFIndex v6 = a6;
LABEL_32:
          uint64_t result = v46;
          if (!v46)
          {
            char v13 = 1;
            goto LABEL_34;
          }
          goto LABEL_36;
        }
        uint64_t v23 = (unsigned int *)&v24[v26];
        uint64_t v31 = (const void *)*((void *)a1 + 22);
        CFIndex v6 = a6;
        if (v31) {
          CFRelease(v31);
        }
        *((void *)a1 + 22) = v29;
        unint64_t v15 = v41;
        CFDataRef v7 = a5;
      }
      if (v23 == v17)
      {
        cccurve25519();
        int8x16_t v32 = vorrq_s8(*(int8x16_t *)(a1 + 82), *(int8x16_t *)(a1 + 66));
        if (!*(void *)&vorr_s8(*(int8x8_t *)v32.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL)))
        {
          uint64_t result = 4294960554;
          goto LABEL_36;
        }
        CC_SHA1_Init(&c);
        CC_SHA1_Update(&c, "AES-KEY", 7u);
        CC_SHA1_Update(&c, a1 + 66, 0x20u);
        CC_SHA1_Final(md, &c);
        CC_SHA1_Init(&c);
        CC_SHA1_Update(&c, "AES-IV", 6u);
        CC_SHA1_Update(&c, a1 + 66, 0x20u);
        CC_SHA1_Final(v48, &c);
        uint64_t v33 = (UInt8 *)malloc_type_malloc(v21, 0xF553D6B5uLL);
        if (!v33) {
          goto LABEL_46;
        }
        CFErrorRef v34 = v33;
        memcpy(v33, v19, v21);
        *((void *)a1 + 15) = 0;
        CCCryptorStatus v35 = CCCryptorCreate(0, 0, 2u, md, 0x10uLL, 0, (CCCryptorRef *)a1 + 15);
        if (v35)
        {
          unsigned int v46 = v35;
        }
        else
        {
          *((_OWORD *)a1 + 8) = *(_OWORD *)v48;
          *((void *)a1 + 20) = 0;
          unsigned int v46 = 0;
          unsigned int v46 = AES_CTR_Update((uint64_t)(a1 + 120), v19, v21, v34);
          if (!v46 || (AES_CTR_Final((_CCCryptor **)a1 + 15), !v46))
          {
            a1[168] = 1;
            long long v37 = *(_OWORD *)(a2 + 16);
            v47[0] = *(_OWORD *)a2;
            v47[1] = v37;
            long long v38 = *(_OWORD *)(a1 + 50);
            v47[2] = *(_OWORD *)(a1 + 34);
            v47[3] = v38;
            unsigned int v46 = MFiPlatform_VerifySignatureEx((const UInt8 *)v47, 64, v34, v21, __src, v15, *((CFDictionaryRef *)a1 + 22), v36);
            if (!v46)
            {
              uint64_t v39 = (void *)*((void *)a1 + 13);
              if (v39)
              {
                free(v39);
                *((void *)a1 + 13) = 0;
              }
              *((void *)a1 + 14) = 0;
              uint64_t v40 = malloc_type_malloc(v15, 0x7D19E9FBuLL);
              *((void *)a1 + 13) = v40;
              if (v40)
              {
                memcpy(v40, __src, v15);
                *((void *)a1 + 14) = v15;
              }
              *a4 = 0;
              *CFDataRef v7 = 0;
            }
          }
        }
        free(v34);
        goto LABEL_32;
      }
    }
    uint64_t result = 4294960553;
    goto LABEL_36;
  }
  if (v11 == 2)
  {
    RandomBytes(a1 + 2, 0x20uLL);
    CryptoHKDF((uint64_t)_kCryptoHashDescriptor_SHA512, (uint64_t)(a1 + 2), 32, "MFiSAP-ECDH-Salt", 0x10uLL, (uint64_t)"MFiSAP-ECDH-Info", 16, 0x20uLL, (uint64_t)(a1 + 2));
    cccurve25519_make_pub();
    CFDataRef v12 = (char *)malloc_type_malloc(0x21uLL, 0x498033D0uLL);
    if (v12)
    {
      char v13 = 0;
      char *v12 = a1[1];
      long long v14 = *(_OWORD *)(a1 + 34);
      *(_OWORD *)(v12 + 17) = *(_OWORD *)(a1 + 50);
      *(_OWORD *)(v12 + 1) = v14;
      *a4 = v12;
      *CFDataRef v7 = 33;
LABEL_34:
      uint64_t result = 0;
      ++*a1;
      char *v6 = v13;
      return result;
    }
LABEL_46:
    uint64_t result = 4294960568;
    goto LABEL_36;
  }
  uint64_t result = 4294960587;
LABEL_36:
  *a1 = 0;
  return result;
}

uint64_t MFiSAP_Encrypt(unsigned char *a1, char *a2, unint64_t a3, unsigned char *a4)
{
  if ((*a1 & 0xFD) == 4) {
    return AES_CTR_Update((uint64_t)(a1 + 120), a2, a3, a4);
  }
  else {
    return 4294960587;
  }
}

uint64_t MFiSAP_Decrypt(unsigned char *a1, char *a2, unint64_t a3, unsigned char *a4)
{
  if ((*a1 & 0xFD) == 4) {
    return AES_CTR_Update((uint64_t)(a1 + 120), a2, a3, a4);
  }
  else {
    return 4294960587;
  }
}

uint64_t MFiPlatform_Initialize()
{
  return 0;
}

uint64_t MFiPlatform_CreateSignature(unsigned __int8 *a1, size_t a2, void *a3, size_t *a4)
{
  return MFiPlatform_CreateSignatureEx(1, a1, a2, a3, a4);
}

uint64_t MFiPlatform_CreateSignatureEx(char a1, unsigned __int8 *data, size_t len, void *a4, size_t *a5)
{
  __src[32] = *MEMORY[0x1E4F143B8];
  if (IsAppleInternalBuild_sOnce != -1) {
    dispatch_once(&IsAppleInternalBuild_sOnce, &__block_literal_global_116);
  }
  if (!IsAppleInternalBuild_sIsInternal) {
    return 4294960561;
  }
  unsigned int v31 = 0;
  if ((a1 & 1) == 0)
  {
    CC_SHA1(data, len, md);
    len = 20;
    uintptr_t data = md;
  }
  int64_t v30 = 0;
  uint64_t v10 = _CopyKey(&v30, &v31);
  if (v10)
  {
    int v11 = (void *)v10;
    CFTypeRef cf = 0;
    int v12 = CCRSACryptorImport();
    if (!v12)
    {
      size_t size = 256;
      int v12 = CCRSACryptorSign();
      MEMORY[0x192FA8A80](cf);
      if (!v12)
      {
        if (size)
        {
          char v13 = malloc_type_malloc(size, 0x7FE2A769uLL);
          if (v13)
          {
            long long v14 = v13;
            memcpy(v13, __src, size);
            int v12 = 0;
            *a4 = v14;
            *a5 = size;
          }
          else
          {
            int v12 = -6728;
          }
        }
        else
        {
          int v12 = -6762;
        }
      }
    }
    unsigned int v31 = v12;
    free(v11);
    return v31;
  }
  else
  {
    __src[0] = 0;
    CFTypeRef cf = 0;
    uint64_t v16 = HTTPClientCreate(__src);
    size_t v17 = (dispatch_queue_t *)__src[0];
    if (v16 || (uint64_t v16 = HTTPClientSetDestination(__src[0], "spc.corp.apple.com", 14000), v16))
    {
      uint64_t v15 = v16;
      unsigned int v18 = 0;
    }
    else
    {
      HTTPClientSetTimeout((uint64_t)v17, 30);
      unsigned int v18 = dispatch_queue_create("MFiProxy", 0);
      if (v18)
      {
        HTTPClientSetDispatchQueue((uint64_t)v17, v18);
        uint64_t v20 = HTTPMessageCreate((uint64_t *)&cf);
        if (v20
          || (CFTypeRef v25 = cf,
              HTTPHeader_InitRequestF((uint64_t)cf + 24, (uint64_t)"HTTP/1.1", (uint64_t)"POST", (uint64_t)"%s", v21, v22, v23, v24, (uint64_t)"/mfi-create-signature"), uint64_t v20 = HTTPMessageSetBody((uint64_t)v25, (uint64_t)"application/octet-stream", data, len), v20))
        {
          uint64_t v15 = v20;
        }
        else
        {
          uint64_t v26 = HTTPClientSendMessageSync(v17, (uint64_t)v25);
          if (!v26 || (uint64_t v15 = v26, (v26 - 200100) <= 0x1F3))
          {
            size_t v27 = *((void *)v25 + 1066);
            if (v27)
            {
              uint64_t v28 = malloc_type_malloc(v27, 0xAE629488uLL);
              if (v28)
              {
                int v29 = v28;
                memcpy(v28, *((const void **)v25 + 1065), *((void *)v25 + 1066));
                uint64_t v15 = 0;
                *a4 = v29;
                *a5 = *((void *)v25 + 1066);
              }
              else
              {
                uint64_t v15 = 4294960568;
              }
            }
            else
            {
              uint64_t v15 = 4294960553;
            }
          }
        }
      }
      else
      {
        uint64_t v15 = 4294960596;
      }
    }
    if (v17)
    {
      CFRetain(v17);
      dispatch_async_f(v17[2], v17, (dispatch_function_t)_HTTPClientInvalidate);
      CFRelease(v17);
      __src[0] = 0;
    }
    if (cf) {
      CFRelease(cf);
    }
  }
  return v15;
}

uint64_t _CopyKey(int64_t *a1, _DWORD *a2)
{
  int v11 = 0;
  int64_t v9 = 0;
  size_t v4 = getenv("MFI_KEY_PATH");
  if (!v4) {
    size_t v4 = "mfi-key.txt";
  }
  int v5 = CopyFileDataByPath(v4, &v11, (unint64_t *)&v9);
  if (v5)
  {
    int v7 = v5;
  }
  else
  {
    uint64_t v10 = 0;
    CFIndex v6 = v11;
    int v7 = HexToDataCopy(v11, v9, 22, &v10, (unint64_t *)&v9, 0);
    free(v6);
    if (!v7)
    {
      uint64_t result = v10;
      *a1 = v9;
      if (!a2) {
        return result;
      }
      goto LABEL_6;
    }
  }
  uint64_t result = 0;
  if (!a2) {
    return result;
  }
LABEL_6:
  *a2 = v7;
  return result;
}

uint64_t MFiPlatform_CopyCertificate(void *a1, void *a2)
{
  if (IsAppleInternalBuild_sOnce != -1) {
    dispatch_once(&IsAppleInternalBuild_sOnce, &__block_literal_global_116);
  }
  if (!IsAppleInternalBuild_sIsInternal) {
    return 4294960561;
  }
  unsigned int v25 = 0;
  uint64_t v4 = _CopyKey(&v24, &v25);
  if (v4)
  {
    int v5 = (void *)v4;
    if (a1)
    {
      CFIndex v6 = malloc_type_malloc(0x3B1uLL, 0x1000040AA8296CDuLL);
      if (!v6)
      {
        int v8 = -6728;
LABEL_10:
        unsigned int v25 = v8;
        free(v5);
        return v25;
      }
      int v7 = v6;
      memcpy(v6, &kPublicCertificate, 0x3B1uLL);
      *a1 = v7;
    }
    int v8 = 0;
    if (a2) {
      *a2 = 945;
    }
    goto LABEL_10;
  }
  CFTypeRef v26 = 0;
  CFTypeRef cf = 0;
  uint64_t v10 = HTTPClientCreate((uint64_t *)&cf);
  int v11 = (dispatch_queue_t *)cf;
  if (v10 || (uint64_t v10 = HTTPClientSetDestination((uint64_t)cf, "spc.corp.apple.com", 14000), v10))
  {
    uint64_t v9 = v10;
    int v12 = 0;
  }
  else
  {
    HTTPClientSetTimeout((uint64_t)v11, 30);
    int v12 = dispatch_queue_create("MFiProxy", 0);
    if (v12)
    {
      HTTPClientSetDispatchQueue((uint64_t)v11, v12);
      uint64_t v14 = HTTPMessageCreate((uint64_t *)&v26);
      if (v14)
      {
        uint64_t v9 = v14;
      }
      else
      {
        CFTypeRef v19 = v26;
        HTTPHeader_InitRequestF((uint64_t)v26 + 24, (uint64_t)"HTTP/1.1", (uint64_t)"GET", (uint64_t)"%s", v15, v16, v17, v18, (uint64_t)"/mfi-certificate");
        uint64_t v20 = HTTPClientSendMessageSync(v11, (uint64_t)v19);
        if (!v20 || (uint64_t v9 = v20, (v20 - 200100) <= 0x1F3))
        {
          size_t v21 = *((void *)v19 + 1066);
          if (v21)
          {
            uint64_t v22 = malloc_type_malloc(v21, 0x4DCF8111uLL);
            if (v22)
            {
              uint64_t v23 = v22;
              memcpy(v22, *((const void **)v19 + 1065), *((void *)v19 + 1066));
              uint64_t v9 = 0;
              *a1 = v23;
              *a2 = *((void *)v19 + 1066);
            }
            else
            {
              uint64_t v9 = 4294960568;
            }
          }
          else
          {
            uint64_t v9 = 4294960553;
          }
        }
      }
    }
    else
    {
      uint64_t v9 = 4294960596;
    }
  }
  if (v11)
  {
    CFRetain(v11);
    dispatch_async_f(v11[2], v11, (dispatch_function_t)_HTTPClientInvalidate);
    CFRelease(v11);
    CFTypeRef cf = 0;
  }
  if (v26) {
    CFRelease(v26);
  }

  return v9;
}

uint64_t CUNextID32()
{
  if (CUNextID32_sOnce != -1) {
    dispatch_once(&CUNextID32_sOnce, &__block_literal_global_11698);
  }
  do
  {
    unsigned int add = atomic_fetch_add(&CUNextID32_sNextID, 1u);
    uint64_t result = add + 1;
  }
  while (add == -1);
  return result;
}

uint64_t __CUNextID32_block_invoke()
{
  uint64_t result = arc4random();
  CUNextID32_sNextID = result & 0xFFFF0000;
  return result;
}

unint64_t CUNextID64()
{
  if (CUNextID64_sOnce != -1) {
    dispatch_once(&CUNextID64_sOnce, &__block_literal_global_5_11704);
  }
  do
  {
    unint64_t add = atomic_fetch_add(&CUNextID64_sNextID, 1uLL);
    unint64_t result = add + 1;
  }
  while (add == -1);
  return result;
}

uint64_t __CUNextID64_block_invoke()
{
  uint64_t result = arc4random();
  CUNextID64_sNextID = result << 32;
  return result;
}

unsigned __int16 *Swap16Mem(unsigned __int16 *result, unint64_t a2, _WORD *a3)
{
  if (a2 >= 2)
  {
    uint64_t v3 = (unsigned __int16 *)((char *)result + (a2 & 0xFFFFFFFFFFFFFFFELL));
    do
    {
      unsigned int v4 = *result++;
      *a3++ = bswap32(v4) >> 16;
    }
    while (result != v3);
  }
  return result;
}

unint64_t VarIntEncode64(unint64_t result, unsigned char *a2, void *a3)
{
  if (result < 0x80)
  {
    LOBYTE(v4) = result;
    uint64_t v3 = a2;
  }
  else
  {
    uint64_t v3 = a2;
    do
    {
      *v3++ = result | 0x80;
      unint64_t v4 = result >> 7;
      unint64_t v5 = result >> 14;
      result >>= 7;
    }
    while (v5);
  }
  *uint64_t v3 = v4;
  *a3 = v3 - a2 + 1;
  return result;
}

uint64_t VarIntDecode64(unsigned char *a1, uint64_t a2, void *a3, int *a4)
{
  LOBYTE(v5) = 0;
  uint64_t result = 0;
  int v7 = a1 + 10;
  while (1)
  {
    if (a2-- < 1)
    {
      uint64_t result = 0;
      int v12 = -6750;
      goto LABEL_9;
    }
    char v9 = *a1;
    unint64_t v10 = (unint64_t)(*a1 & 0x7F) << v5;
    if (v10 >> v5 != (*a1 & 0x7F)) {
      break;
    }
    ++a1;
    BOOL v11 = __CFADD__(v10, result);
    result += v10;
    if (v11)
    {
      uint64_t result = 0;
      int v12 = -6710;
      goto LABEL_9;
    }
    if ((v9 & 0x80000000) == 0)
    {
      int v12 = 0;
LABEL_9:
      int v7 = a1;
      if (!a3) {
        goto LABEL_11;
      }
LABEL_10:
      *a3 = v7;
      goto LABEL_11;
    }
    unint64_t v5 = (v5 + 7);
    if (v5 > 0x3F)
    {
      uint64_t result = 0;
      goto LABEL_16;
    }
  }
  uint64_t result = 0;
  int v7 = a1 + 1;
LABEL_16:
  int v12 = -6710;
  if (a3) {
    goto LABEL_10;
  }
LABEL_11:
  if (a4) {
    *a4 = v12;
  }
  return result;
}

uint64_t CopyFileDataByFile(FILE *__stream, void *a2, unint64_t *a3)
{
  unint64_t v5 = 0;
  unint64_t v6 = 0;
  unint64_t v7 = 0;
  do
  {
    unint64_t v8 = v7;
    if (v7 >= v6)
    {
      uint64_t v10 = 160000;
      if (v6 >= 0x27100)
      {
        if (v6 >= 0x3D0900)
        {
          if (v6 > 0xFFFFFFFFFFC2F6FELL)
          {
            uint64_t v13 = 4294960553;
            goto LABEL_16;
          }
          uint64_t v10 = v6 + 4000000;
        }
        else
        {
          uint64_t v10 = 2 * v6;
        }
      }
      char v9 = (char *)malloc_type_realloc(v5, v10 + 1, 0x80904352uLL);
      unint64_t v6 = v10;
      if (!v9)
      {
        uint64_t v13 = 4294960568;
        goto LABEL_16;
      }
    }
    else
    {
      char v9 = v5;
    }
    size_t v11 = fread(&v9[v8], 1uLL, v6 - v8, __stream);
    unint64_t v7 = v11 + v8;
    unint64_t v5 = v9;
  }
  while (v11);
  int v12 = malloc_type_realloc(v9, v8 + 1, 0x75B5152DuLL);
  if (v12)
  {
    v12[v8] = 0;
    *a2 = v12;
    uint64_t v13 = 0;
    if (a3) {
      *a3 = v8;
    }
    return v13;
  }
  uint64_t v13 = 4294960568;
  unint64_t v5 = v9;
LABEL_16:
  if (v5) {
    free(v5);
  }
  return v13;
}

uint64_t CopyFileDataByPath(const char *a1, void *a2, unint64_t *a3)
{
  unint64_t v5 = fopen(a1, "rb");
  unint64_t v6 = v5;
  if (v5) {
    goto LABEL_5;
  }
  if (!*__error()) {
    return 4294960596;
  }
  uint64_t v7 = *__error();
  if (!v7)
  {
    unint64_t v5 = 0;
LABEL_5:
    uint64_t v7 = CopyFileDataByFile(v5, a2, a3);
    fclose(v6);
  }
  return v7;
}

uint64_t CUSystem(char *a1)
{
  __argv[4] = *(char **)MEMORY[0x1E4F143B8];
  pid_t v10 = 0;
  __argv[0] = "/bin/sh";
  __argv[1] = "-c";
  __argv[2] = a1;
  __argv[3] = 0;
  int v1 = _NSGetEnviron();
  uint64_t result = posix_spawn(&v10, "/bin/sh", 0, 0, __argv, *v1);
  if (!result)
  {
    unsigned int v9 = 0;
    while (1)
    {
      pid_t v3 = waitpid(v10, (int *)&v9, 0);
      if (v3 != -1) {
        break;
      }
      if (*__error() != 4) {
        return *__error();
      }
    }
    if (v3)
    {
      int v4 = v9 & 0x7F;
      int v5 = (int)v9 >> 8;
      if (v9 >> 8 == 19) {
        int v6 = 312719;
      }
      else {
        int v6 = -6700;
      }
      if (v5 == 19) {
        unsigned int v7 = v6;
      }
      else {
        unsigned int v7 = v5 + 312700;
      }
      unsigned int v8 = BYTE1(v9);
      if ((v9 & 0x7F) != 0) {
        unsigned int v8 = v4 + 312700;
      }
      if (v4 == 127) {
        return v7;
      }
      else {
        return v8;
      }
    }
    else
    {
      return 4294960560;
    }
  }
  return result;
}

uint64_t ReadANSIFile(FILE *__stream, char *__ptr, size_t __nitems, void *a4)
{
  int v6 = __ptr;
  if (__nitems)
  {
    size_t v7 = __nitems;
    int v6 = __ptr;
    do
    {
      size_t v9 = fread(v6, 1uLL, v7, __stream);
      if (!v9) {
        break;
      }
      v6 += v9;
      v7 -= v9;
    }
    while (v7);
  }
  if (a4) {
    *a4 = v6 - __ptr;
  }
  return 0;
}

uint64_t WriteANSIFile(FILE *__stream, char *__ptr, size_t __nitems)
{
  if (__nitems)
  {
    size_t v3 = __nitems;
    do
    {
      size_t v6 = fwrite(__ptr, 1uLL, v3, __stream);
      if (!v6) {
        break;
      }
      __ptr += v6;
      v3 -= v6;
    }
    while (v3);
  }
  return 0;
}

__CFDictionary *CFDictionaryCreateWithTXTRecordBytes(const char *a1, uint64_t a2, int *a3)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    size_t v7 = (unsigned __int8 *)&a1[a2];
    while (1)
    {
      if (v7 - (unsigned __int8 *)a1 < 1
        || (v8 = (const UInt8 *)(a1 + 1), unint64_t v9 = *(unsigned __int8 *)a1, v7 - (unsigned __int8 *)(a1 + 1) < v9))
      {
        int v14 = 0;
        goto LABEL_16;
      }
      a1 += v9 + 1;
      pid_t v10 = (const char *)v8;
      if (v9)
      {
        while (*v10 != 61)
        {
          ++v10;
          if (!--v9)
          {
            pid_t v10 = a1;
            break;
          }
        }
      }
      CFStringRef v11 = CFStringCreateWithBytes(0, v8, v10 - (const char *)v8, 0x8000100u, 0);
      if (!v11) {
        break;
      }
      CFStringRef v12 = v11;
      if (v10 >= a1) {
        uint64_t v13 = v10;
      }
      else {
        uint64_t v13 = v10 + 1;
      }
      int v14 = CFDictionarySetCString(Mutable, v11, v13, a1 - v13);
      CFRelease(v12);
      if (v14) {
        goto LABEL_20;
      }
    }
    int v14 = -6728;
LABEL_20:
    CFRelease(Mutable);
    CFMutableArrayRef Mutable = 0;
  }
  else
  {
    int v14 = -6728;
  }
LABEL_16:
  if (a3) {
    *a3 = v14;
  }
  return Mutable;
}

uint64_t TXTRecordGetNextItem(unsigned char *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, unint64_t *a7)
{
  if (a2 - (uint64_t)a1 < 1) {
    return 0;
  }
  size_t v7 = a1 + 1;
  unint64_t v8 = *a1;
  if (a2 - (uint64_t)(a1 + 1) < v8) {
    return 0;
  }
  unint64_t v10 = (unint64_t)&a1[v8 + 1];
  CFStringRef v11 = a1 + 1;
  if (*a1)
  {
    while (*v11 != 61)
    {
      ++v11;
      if (!--v8)
      {
        CFStringRef v11 = (unsigned char *)v10;
        break;
      }
    }
  }
  *a3 = v7;
  if ((unint64_t)v11 >= v10) {
    CFStringRef v12 = v11;
  }
  else {
    CFStringRef v12 = v11 + 1;
  }
  *a4 = v11 - v7;
  *a6 = v10 - (void)v12;
  *a5 = v12;
  *a7 = v10;
  return 1;
}

uint64_t CreateTXTRecordWithCString(const char *a1, void *a2, size_t *a3)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v46 = 0;
  unsigned int __dst = 0;
  v43[0] = 0;
  uint64_t v44 = 0;
  unint64_t v45 = 0;
  v43[1] = 0;
  v43[2] = -1;
  uint64_t v47 = 0;
  size_t v6 = &a1[strlen(a1)];
  uint64_t v7 = MEMORY[0x1E4F14390];
  unint64_t v8 = a1;
LABEL_2:
  unint64_t v9 = (unsigned __int8 *)v6;
  if (!a1) {
    unint64_t v9 = (unsigned __int8 *)&v8[strlen(v8)];
  }
  int64_t v10 = v9 - (unsigned __int8 *)v8;
  if (v9 > (unsigned __int8 *)v8)
  {
    do
    {
      uint64_t v11 = *(unsigned __int8 *)v8;
      if (*v8 < 0)
      {
        if (!__maskrune(v11, 0x4000uLL))
        {
LABEL_11:
          int64_t v12 = 0;
          uint64_t v13 = 0;
          int v14 = 0;
          uint64_t v15 = v8;
          while (2)
          {
            while (2)
            {
              unint64_t v8 = v15;
              uint64_t v16 = v13;
              while (1)
              {
                if (v8 >= (const char *)v9) {
                  goto LABEL_95;
                }
                uint64_t v13 = v16;
                uint64_t v15 = v8 + 1;
                unsigned int v17 = *(unsigned __int8 *)v8;
                if (!v16) {
                  break;
                }
                uint64_t v16 = 0;
                ++v8;
                if (v17 != 39) {
                  goto LABEL_64;
                }
              }
              if (!v14)
              {
                if ((v17 & 0xFFFFFFDF) == 0)
                {
                  ++v8;
LABEL_95:
                  uint64_t v34 = DataBuffer_Resize((uint64_t)v43, v45 + v12 + 1, (unint64_t *)&__dst);
                  if (!v34)
                  {
                    CCCryptorStatus v35 = __dst;
                    unsigned int __dst = (char *)__dst + 1;
                    *CCCryptorStatus v35 = v12;
                    memcpy(__dst, __src, v12);
                    goto LABEL_2;
                  }
                  uint64_t v40 = v34;
                  if ((_BYTE)v47 && v44) {
                    free(v44);
                  }
                  return v40;
                }
                if (v17 == 34)
                {
                  uint64_t v13 = 0;
LABEL_29:
                  int v14 = 1;
                  continue;
                }
                int v14 = 0;
                uint64_t v13 = 1;
                if (v17 == 39) {
                  continue;
                }
                if (v17 != 92)
                {
                  uint64_t v13 = 0;
                  goto LABEL_64;
                }
                if (v15 < (const char *)v9)
                {
                  unsigned int v17 = *(unsigned __int8 *)v15;
                  if (v17 == 10)
                  {
                    uint64_t v13 = 0;
                    int v14 = 0;
                    uint64_t v15 = v8 + 2;
                    continue;
                  }
                  if ((v17 & 0xFFFFFFDF) == 0x58)
                  {
                    uint64_t v15 = v8 + 2;
                    if (v9 - (unsigned __int8 *)(v8 + 2) < 2
                      || (uint64_t v18 = *(unsigned __int8 *)v15, (*(_DWORD *)(v7 + 4 * v18 + 60) & 0x10000) == 0)
                      || (uint64_t v19 = *((unsigned __int8 *)v8 + 3), (*(_DWORD *)(v7 + 4 * v19 + 60) & 0x10000) == 0))
                    {
                      uint64_t v13 = 0;
                      int v14 = 0;
                      goto LABEL_64;
                    }
                    char v26 = v18 - 48;
                    if ((v18 - 48) >= 0xA)
                    {
                      if ((v18 - 65) > 5)
                      {
                        if ((v18 - 97) >= 6) {
                          char v26 = 0;
                        }
                        else {
                          char v26 = v18 - 87;
                        }
                      }
                      else
                      {
                        char v26 = v18 - 55;
                      }
                    }
                    char v28 = v19 - 48;
                    if ((v19 - 48) >= 0xA)
                    {
                      if ((v19 - 65) > 5)
                      {
                        unsigned int v29 = v19 - 97;
                        char v30 = v19 - 87;
                        if (v29 >= 6) {
                          char v28 = 0;
                        }
                        else {
                          char v28 = v30;
                        }
                      }
                      else
                      {
                        char v28 = v19 - 55;
                      }
                    }
                    uint64_t v13 = 0;
                    int v14 = 0;
                    LOBYTE(v17) = v28 | (16 * v26);
LABEL_82:
                    uint64_t v15 = v8 + 4;
                  }
                  else
                  {
                    if ((v17 & 0xF8) == 0x30 && v9 - (unsigned __int8 *)v15 >= 3 && v17 <= 0x33)
                    {
                      unsigned __int8 v20 = v8[2];
                      if ((v20 & 0xF8) == 0x30)
                      {
                        unsigned __int8 v21 = v8[3];
                        if ((v21 & 0xF8) == 0x30)
                        {
                          uint64_t v13 = 0;
                          int v14 = 0;
                          LOBYTE(v17) = (8 * v20) ^ 0x80 | ((_BYTE)v17 << 6) | (v21 - 48);
                          goto LABEL_82;
                        }
                      }
                    }
                    uint64_t v13 = 0;
                    int v14 = 0;
                    uint64_t v15 = v8 + 2;
                  }
LABEL_64:
                  if (v12 <= 255) {
                    __src[v12++] = v17;
                  }
                  continue;
                }
                uint64_t v13 = 0;
                int v14 = 0;
LABEL_37:
                LOBYTE(v17) = 92;
                goto LABEL_64;
              }
              break;
            }
            if (v17 != 92)
            {
              uint64_t v13 = 0;
              int v14 = 0;
              if (v17 == 34) {
                continue;
              }
              goto LABEL_63;
            }
            break;
          }
          if (v15 < (const char *)v9)
          {
            unsigned int v17 = *(unsigned __int8 *)v15;
            if (v17 == 10)
            {
              uint64_t v13 = 0;
              uint64_t v15 = v8 + 2;
              goto LABEL_29;
            }
            if (v17 == 92 || v17 == 34)
            {
              uint64_t v13 = 0;
              uint64_t v15 = v8 + 2;
LABEL_63:
              int v14 = 1;
              goto LABEL_64;
            }
            if ((v17 & 0xFFFFFFDF) == 0x58)
            {
              uint64_t v15 = v8 + 2;
              if (v9 - (unsigned __int8 *)(v8 + 2) < 2
                || (uint64_t v22 = *(unsigned __int8 *)v15, (*(_DWORD *)(v7 + 4 * v22 + 60) & 0x10000) == 0)
                || (uint64_t v23 = *((unsigned __int8 *)v8 + 3), (*(_DWORD *)(v7 + 4 * v23 + 60) & 0x10000) == 0))
              {
                uint64_t v13 = 0;
                goto LABEL_63;
              }
              char v27 = v22 - 48;
              if ((v22 - 48) >= 0xA)
              {
                if ((v22 - 65) > 5)
                {
                  if ((v22 - 97) >= 6) {
                    char v27 = 0;
                  }
                  else {
                    char v27 = v22 - 87;
                  }
                }
                else
                {
                  char v27 = v22 - 55;
                }
              }
              char v31 = v23 - 48;
              if ((v23 - 48) >= 0xA)
              {
                if ((v23 - 65) > 5)
                {
                  unsigned int v32 = v23 - 97;
                  char v33 = v23 - 87;
                  if (v32 >= 6) {
                    char v31 = 0;
                  }
                  else {
                    char v31 = v33;
                  }
                }
                else
                {
                  char v31 = v23 - 55;
                }
              }
              uint64_t v13 = 0;
              LOBYTE(v17) = v31 | (16 * v27);
LABEL_93:
              uint64_t v15 = v8 + 4;
              goto LABEL_63;
            }
            uint64_t v13 = 0;
            int v14 = 1;
            if (v17 > 0x33 || (v17 & 0xF8) != 0x30 || v9 - (unsigned __int8 *)v15 < 3) {
              goto LABEL_37;
            }
            unsigned __int8 v24 = v8[2];
            if ((v24 & 0xF8) == 0x30)
            {
              unsigned __int8 v25 = v8[3];
              if ((v25 & 0xF8) == 0x30)
              {
                uint64_t v13 = 0;
                LOBYTE(v17) = (8 * v24) ^ 0x80 | ((_BYTE)v17 << 6) | (v25 - 48);
                goto LABEL_93;
              }
            }
          }
          uint64_t v13 = 0;
          LOBYTE(v17) = 92;
          goto LABEL_63;
        }
      }
      else if ((*(_DWORD *)(v7 + 4 * v11 + 60) & 0x4000) == 0)
      {
        goto LABEL_11;
      }
      ++v8;
      --v10;
    }
    while (v10);
  }
  size_t v36 = v45;
  if ((_BYTE)v47)
  {
    long long v37 = v44;
  }
  else
  {
    if (v45 <= 1) {
      size_t v38 = 1;
    }
    else {
      size_t v38 = v45;
    }
    uint64_t v39 = malloc_type_malloc(v38, 0x35C1CE61uLL);
    if (!v39) {
      return 4294960568;
    }
    long long v37 = v39;
    if (v36) {
      memcpy(v39, v44, v36);
    }
  }
  uint64_t v40 = 0;
  uint64_t v44 = (void *)v43[0];
  *a2 = v37;
  *a3 = v36;
  return v40;
}

void *TXTRecordCreateWithDictionary(const __CFDictionary *a1, size_t *a2, _DWORD *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  txtuint64_t Record = 0uLL;
  uint64_t v14 = 0;
  TXTRecordCreate(&txtRecord, 0x100u, &v12);
  LODWORD(v14) = 0;
  CFDictionaryApplyFunction(a1, (CFDictionaryApplierFunction)_TXTRecordCreateWithDictionaryApplier, &txtRecord);
  LODWORD(v6) = TXTRecordGetLength(&txtRecord);
  size_t v7 = v6;
  if (v6) {
    size_t v6 = v6;
  }
  else {
    size_t v6 = 1;
  }
  unint64_t v8 = malloc_type_malloc(v6, 0xF4DD382uLL);
  if (v8)
  {
    if (v7)
    {
      BytesPtr = TXTRecordGetBytesPtr(&txtRecord);
      memcpy(v8, BytesPtr, v7);
    }
  }
  else
  {
    LODWORD(v14) = -6728;
  }
  TXTRecordDeallocate(&txtRecord);
  if (a2)
  {
    if (v14) {
      size_t v10 = 0;
    }
    else {
      size_t v10 = v7;
    }
    *a2 = v10;
  }
  if (a3) {
    *a3 = v14;
  }
  return v8;
}

void _TXTRecordCreateWithDictionaryApplier(const __CFString *a1, const __CFString *a2, uint64_t a3)
{
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  if (*(_DWORD *)(a3 + 16)) {
    return;
  }
  uint64_t v19 = 0;
  unsigned int v17 = 0;
  size_t v15 = 0;
  CFTypeID v6 = CFGetTypeID(a1);
  if (v6 != CFStringGetTypeID()) {
    goto LABEL_20;
  }
  int v7 = CFStringGetOrCopyCStringUTF8(a1, &v19, (UInt8 **)&v18, 0);
  unint64_t v8 = v19;
  if (!v19) {
    goto LABEL_12;
  }
  CFTypeID v9 = CFGetTypeID(a2);
  if (v9 != CFStringGetTypeID())
  {
    if ((const __CFString *)*MEMORY[0x1E4F1CFD0] == a2 || v9 == CFNullGetTypeID())
    {
      uint64_t v12 = (TXTRecordRef *)a3;
      uint64_t v13 = v8;
      uint8_t v11 = 0;
      size_t v10 = 0;
LABEL_11:
      int v7 = TXTRecordSetValue(v12, v13, v11, v10);
      goto LABEL_12;
    }
LABEL_20:
    int v14 = -6756;
    goto LABEL_13;
  }
  int v7 = CFStringGetOrCopyCStringUTF8(a2, &v17, (UInt8 **)&v16, &v15);
  size_t v10 = v17;
  if (v17)
  {
    if (v15 > 0xFF)
    {
      int v14 = -6743;
      goto LABEL_13;
    }
    uint8_t v11 = v15;
    uint64_t v12 = (TXTRecordRef *)a3;
    uint64_t v13 = v8;
    goto LABEL_11;
  }
LABEL_12:
  int v14 = v7;
LABEL_13:
  if (v18) {
    free(v18);
  }
  if (v16) {
    free(v16);
  }
  if (v14) {
    *(_DWORD *)(a3 + 16) = v14;
  }
}

uint64_t fcopyline(FILE *a1, unint64_t *a2, void *a3)
{
  if (feof(a1)) {
    return 4294960544;
  }
  CFTypeID v6 = malloc_type_malloc(0x80uLL, 0x70EE8C9AuLL);
  if (!v6) {
    return 4294960568;
  }
  unint64_t v7 = (unint64_t)v6;
  unint64_t v8 = 0;
  for (uint64_t i = 128; ; i *= 2)
  {
    memset(&v8[v7], 10, i - (void)v8);
    if (!fgets(&v8[v7], (int)i - (int)v8, a1))
    {
      if (!feof(a1))
      {
        if (*__error()) {
          uint64_t v12 = *__error();
        }
        else {
          uint64_t v12 = 4294960596;
        }
        goto LABEL_20;
      }
      if (!v8)
      {
        uint64_t v12 = 4294960544;
LABEL_20:
        free((void *)v7);
        return v12;
      }
      goto LABEL_15;
    }
    size_t v10 = memchr(&v8[v7], 10, i - (void)v8);
    if (v10) {
      break;
    }
    if (i < 0)
    {
      uint64_t v12 = 4294960553;
      goto LABEL_20;
    }
    uint8_t v11 = malloc_type_realloc((void *)v7, 2 * i, 0xA45B605CuLL);
    if (!v11)
    {
      uint64_t v12 = 4294960568;
      goto LABEL_20;
    }
    unint64_t v8 = (unsigned char *)(i - 1);
    unint64_t v7 = (unint64_t)v11;
  }
  if ((unint64_t)(v10 + 1) >= v7 + i || v10[1])
  {
    unint64_t v8 = &v10[~v7];
LABEL_15:
    if (!a2) {
      goto LABEL_17;
    }
LABEL_16:
    *a2 = v7;
    unint64_t v7 = 0;
    goto LABEL_17;
  }
  unint64_t v8 = &v10[-v7];
  *size_t v10 = 0;
  if (a2) {
    goto LABEL_16;
  }
LABEL_17:
  if (a3) {
    *a3 = v8;
  }
  uint64_t v12 = 0;
  if (v7) {
    goto LABEL_20;
  }
  return v12;
}

uint64_t FDWriteAll(int __fd, char *__buf, size_t __nbyte)
{
  if (!__nbyte) {
    return 0;
  }
  size_t v3 = __nbyte;
  while (1)
  {
    ssize_t v6 = write(__fd, __buf, v3);
    if (v6 <= 0) {
      break;
    }
LABEL_6:
    __buf += v6;
    v3 -= v6;
    if (!v3) {
      return 0;
    }
  }
  if (*__error())
  {
    uint64_t result = *__error();
    if (result) {
      return result;
    }
    goto LABEL_6;
  }
  return 4294960596;
}

uint64_t IOKitCopyParentOfClass(io_registry_entry_t entry, const char *a2, kern_return_t *a3)
{
  kern_return_t ParentEntry;
  io_registry_entry_t parent;

  parent = 0;
  LODWORD(v6) = entry;
  while (1)
  {
    ParentEntry = IORegistryEntryGetParentEntry(v6, "IOService", &parent);
    if (v6 != entry) {
      IOObjectRelease(v6);
    }
    if (ParentEntry) {
      break;
    }
    uint64_t v6 = parent;
    if (IOObjectConformsTo(parent, a2))
    {
      ParentEntry = 0;
      if (!a3) {
        return v6;
      }
      goto LABEL_9;
    }
  }
  uint64_t v6 = 0;
  if (!a3) {
    return v6;
  }
LABEL_9:
  *a3 = ParentEntry;
  return v6;
}

dispatch_queue_t __CUMainQueue_block_invoke()
{
  dispatch_queue_t result = dispatch_queue_create_with_target_V2("CUMainQueue", 0, MEMORY[0x1E4F14428]);
  CUMainQueue_sQueue = (uint64_t)result;
  if (!result) {
    FatalErrorF((uint64_t)"Create wrapper main queue failed", v1, v2, v3, v4, v5, v6, v7, vars0);
  }
  return result;
}

uint64_t mkparent(const char *a1, unsigned int a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = &a1[strlen(a1)];
  do
  {
    if (v4 <= a1)
    {
      int64_t v6 = 0;
      goto LABEL_8;
    }
    int v5 = *(unsigned __int8 *)--v4;
  }
  while (v5 != 47);
  int64_t v6 = v4 - a1;
  if ((unint64_t)(v4 - a1) > 0x3FF) {
    return 4294960553;
  }
  if (v6) {
    memcpy(__dst, a1, v4 - a1);
  }
LABEL_8:
  uint64_t result = 0;
  __dst[v6] = 0;
  if (__dst[0]) {
    return mkpath(__dst, a2, a2);
  }
  return result;
}

uint64_t mkpath(const char *a1, unsigned int a2, __int16 a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  memset(&v15, 0, sizeof(v15));
  size_t v5 = strlen(a1);
  if (v5 >= 0x3FF) {
    uint64_t v6 = 1023;
  }
  else {
    uint64_t v6 = v5;
  }
  uint64_t v7 = v16;
  __memcpy_chk();
  v16[v6] = 0;
  while (1)
  {
    unint64_t v8 = &v7[strspn(v7, "/")];
    uint64_t v7 = (char *)&v8[strcspn(v8, "/")];
    int v9 = *v7;
    *uint64_t v7 = 0;
    mode_t v10 = v9 ? a3 : a2;
    if ((mkdir(v16, v10) & 0x80000000) == 0 || *__error() == 17) {
      break;
    }
    unsigned int v11 = *__error();
    if (stat(v16, &v15) < 0)
    {
      if (v11) {
        return v11;
      }
      else {
        return 0xFFFFFFFFLL;
      }
    }
    int v12 = v15.st_mode & 0xF000;
    if (!v9 || v12 != 0x4000)
    {
      if (v12 == 0x4000) {
        return 0;
      }
      else {
        return 20;
      }
    }
LABEL_13:
    *uint64_t v7 = 47;
  }
  if (a2 < 0x200 || v9)
  {
    if (!v9) {
      return 0;
    }
    goto LABEL_13;
  }
  if (chmod(v16, a2) != -1) {
    return 0;
  }
  unsigned int v14 = *__error();
  if (v14) {
    return v14;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

const char *NormalizePath(char *__s, int64_t a2, char *a3, size_t a4, char a5)
{
  unint64_t v8 = __s;
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (a2 == -1) {
    a2 = strlen(__s);
  }
  unint64_t v9 = 0;
  mode_t v10 = &v8[a2];
  memset(&v32, 0, sizeof(v32));
  char v31 = 0;
  if ((a5 & 1) != 0 || a2 < 1)
  {
    stat v15 = 0;
    goto LABEL_35;
  }
  if (*v8 != 126) {
    goto LABEL_15;
  }
  uint64_t v11 = 1;
  while (a2 != v11)
  {
    int64_t v12 = v11;
    int v13 = v8[v11++];
    if (v13 == 47)
    {
      unsigned int v14 = &v8[v12];
      a2 = v12;
      goto LABEL_12;
    }
  }
  unsigned int v14 = &v8[a2];
LABEL_12:
  if (a2 == 1)
  {
    uint64_t v16 = getenv("HOME");
    if (v16)
    {
      pw_dir = v16;
      size_t v18 = strlen(v16);
      stat v15 = 0;
      goto LABEL_27;
    }
LABEL_15:
    unint64_t v9 = 0;
    stat v15 = 0;
    goto LABEL_35;
  }
  if ((unint64_t)(a2 - 1) >= 0x3FF) {
    uint64_t v19 = 1023;
  }
  else {
    uint64_t v19 = a2 - 1;
  }
  __memcpy_chk();
  v33[v19] = 0;
  uint64_t v20 = sysconf(71);
  if (v20 >= 1) {
    size_t v21 = v20;
  }
  else {
    size_t v21 = 4096;
  }
  stat v15 = (char *)malloc_type_calloc(1uLL, v21, 0x6BEE4151uLL);
  if (!v15) {
    goto LABEL_32;
  }
  int v22 = getpwnam_r(v33, &v32, v15, v21, &v31);
  unint64_t v9 = 0;
  if (v22 || !v31) {
    goto LABEL_35;
  }
  pw_dir = v31->pw_dir;
  if (!pw_dir)
  {
LABEL_32:
    unint64_t v9 = 0;
    goto LABEL_35;
  }
  size_t v18 = strlen(v31->pw_dir);
LABEL_27:
  if (pw_dir >= &pw_dir[v18])
  {
    unint64_t v9 = 0;
  }
  else
  {
    unint64_t v9 = 0;
    do
    {
      unint64_t v23 = v9;
      unint64_t v24 = (unint64_t)&pw_dir[v9 + 1];
      v34[v9] = pw_dir[v9];
      ++v9;
    }
    while (v23 <= 0x3FD && v24 < (unint64_t)&pw_dir[v18]);
  }
  unint64_t v8 = v14;
LABEL_35:
  unsigned __int8 v25 = &v34[v9];
  if (v9 <= 0x3FE && v8 < v10)
  {
    char v26 = v8 + 1;
    do
    {
      unint64_t v27 = v9 + 1;
      v34[v9] = *(v26 - 1);
      if (v9 > 0x3FD) {
        break;
      }
      ++v9;
    }
    while (v26++ < v10);
    unsigned __int8 v25 = &v34[v27];
  }
  *unsigned __int8 v25 = 0;
  if ((a5 & 2) != 0)
  {
    unsigned int v29 = v34;
  }
  else
  {
    unsigned int v29 = v34;
    if (a4 < 0x400)
    {
      if (realpath_DARWIN_EXTSN(v34, v33)) {
        unsigned int v29 = v33;
      }
    }
    else if (realpath_DARWIN_EXTSN(v34, a3))
    {
      if (!v15) {
        goto LABEL_47;
      }
      goto LABEL_46;
    }
  }
  strlcpy(a3, v29, a4);
  if (v15) {
LABEL_46:
  }
    free(v15);
LABEL_47:
  if (a4) {
    return a3;
  }
  else {
    return "";
  }
}

uint64_t RemovePath(const std::__fs::filesystem::path *a1)
{
  uint64_t result = nftw((const char *)a1, (int (__cdecl *)(const char *, const stat *, int, FTW *))_RemovePathCallBack, 64, 15);
  if (result)
  {
    if (!*__error()) {
      return 4294960596;
    }
    uint64_t result = *__error();
    if (result == 20)
    {
      uint64_t result = remove(a1, v3);
      if (result)
      {
        if (*__error()) {
          return *__error();
        }
        return 4294960596;
      }
    }
  }
  return result;
}

uint64_t _RemovePathCallBack(const std::__fs::filesystem::path *a1, std::error_code *a2)
{
  uint64_t result = remove(a1, a2);
  if (result)
  {
    if (*__error()) {
      return *__error();
    }
    else {
      return 4294960596;
    }
  }
  return result;
}

uint64_t RollLogFiles(FILE **a1, char *a2, const std::__fs::filesystem::path *a3, int a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v7 = *a1;
    if (*a1)
    {
      if (a2)
      {
        fputs(a2, *a1);
        uint64_t v7 = *a1;
      }
      fclose(v7);
      *a1 = 0;
    }
  }
  snprintf((char *)__str, 0x401uLL, "%s.%d", (const char *)a3, a4 - 1);
  remove(__str, v8);
  int v9 = a4 - 2;
  if (a4 > 2)
  {
    do
    {
      snprintf((char *)__str, 0x401uLL, "%s.%d", (const char *)a3, v9);
      snprintf((char *)&__to, 0x401uLL, "%s.%d", (const char *)a3, v9 + 1);
      rename(__str, &__to, v10);
      BOOL v11 = v9-- != 0;
    }
    while (v9 != 0 && v11);
  }
  if (a4 >= 2)
  {
    snprintf((char *)&__to, 0x401uLL, "%s.%d", (const char *)a3, 1);
    rename(a3, &__to, v12);
  }
  if (!a1) {
    return 0;
  }
  int v13 = fopen((const char *)a3, "w");
  *a1 = v13;
  if (v13) {
    return 0;
  }
  if (!*__error()) {
    return 4294960596;
  }
  uint64_t result = *__error();
  if (!result) {
    return 0;
  }
  return result;
}

uint64_t RunProcessAndCaptureOutput(char *a1, void **a2)
{
  return RunProcessAndCaptureOutputEx(a1, a2, 0);
}

uint64_t RunProcessAndCaptureOutputEx(char *a1, void **a2, void *a3)
{
  long long v8 = 0u;
  v9[0] = (void *)-1;
  v9[1] = 0;
  long long v10 = 0uLL;
  uint64_t v11 = 0;
  uint64_t appended = DataBuffer_RunProcessAndAppendOutput((uint64_t)&v8, a1);
  if (appended
    || (int64_t v12 = 0, appended = DataBuffer_Resize((uint64_t)&v8, v10 + 1, (unint64_t *)&v12), appended))
  {
    uint64_t v6 = appended;
  }
  else
  {
    unsigned char *v12 = 0;
    *a2 = v9[1];
    if (a3) {
      *a3 = v10;
    }
    uint64_t v6 = 0;
    v9[1] = 0;
  }
  if ((_BYTE)v11 && v9[1]) {
    free(v9[1]);
  }
  return v6;
}

uint64_t SwitchToMobileUser()
{
  uint64_t v0 = getpwnam("mobile");
  if (!v0)
  {
    uint64_t v11 = (uint64_t (*)(const char *, uint64_t))*MEMORY[0x1E4F143C8];
    uint64_t v18 = *__error();
    return FPrintF(v11, "error: lookup mobile user failed: %#m\n", v12, v13, v14, v15, v16, v17, v18);
  }
  uint64_t v1 = v0;
  uid_t v2 = getuid();
  uint64_t result = v1->pw_uid;
  if (v2 != result)
  {
    uint64_t result = setuid(result);
    if (result)
    {
      if (*__error())
      {
        uint64_t result = (uint64_t)__error();
        uint64_t v10 = *(unsigned int *)result;
        if (!v10) {
          return result;
        }
      }
      else
      {
        uint64_t v10 = 4294960596;
      }
      return FPrintF((uint64_t (*)(const char *, uint64_t))*MEMORY[0x1E4F143C8], "error: setuid failed: %#m\n", v4, v5, v6, v7, v8, v9, v10);
    }
  }
  return result;
}

void *sysctl_copy(int *a1, size_t *a2, int *a3)
{
  int v6 = 10;
  while (1)
  {
    size_t v11 = 0;
    if (sysctl(a1, 6u, 0, &v11, 0, 0))
    {
      if (!*__error()) {
        goto LABEL_14;
      }
      int v7 = *__error();
      if (v7)
      {
        uint64_t v9 = 0;
        goto LABEL_17;
      }
    }
    if (v11 <= 1) {
      size_t v8 = 1;
    }
    else {
      size_t v8 = v11;
    }
    uint64_t v9 = malloc_type_malloc(v8, 0xE46C97E8uLL);
    if (!v9)
    {
      int v7 = -6728;
      goto LABEL_17;
    }
    if (!v11 || !sysctl(a1, 6u, v9, &v11, 0, 0) || *__error() && !*__error()) {
      break;
    }
    free(v9);
    if (!--v6)
    {
LABEL_14:
      uint64_t v9 = 0;
      int v7 = -6700;
      goto LABEL_17;
    }
  }
  int v7 = 0;
  if (a2) {
    *a2 = v11;
  }
LABEL_17:
  if (a3) {
    *a3 = v7;
  }
  return v9;
}

uint64_t systemf(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  v21[0] = 0;
  *(_OWORD *)__argv = xmmword_1E55BF720;
  long long v23 = *(_OWORD *)algn_1E55BF730;
  *(void *)uint64_t v20 = 0;
  v21[1] = &a9;
  VASPrintF(v21, a2, (uint64_t)&a9);
  uint64_t v10 = v21[0];
  if (!v21[0]) {
    return 4294960596;
  }
  if (a1) {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s%s\n", a1, (const char *)v21[0]);
  }
  *(void *)&long long v23 = v10;
  size_t v11 = _NSGetEnviron();
  uint64_t v12 = posix_spawn(&v20[1], "/bin/sh", 0, 0, __argv, *v11);
  free(v10);
  if (!v12)
  {
    do
    {
      pid_t v13 = waitpid(v20[1], v20, 0);
      if (v13 != -1)
      {
        if (!v13) {
          return 4294960560;
        }
        int v14 = v20[0] & 0x7F;
        pid_t v15 = v20[0] >> 8;
        if (v20[0] >> 8 == 19) {
          int v16 = 312719;
        }
        else {
          int v16 = -6700;
        }
        if (v15 == 19) {
          unsigned int v17 = v16;
        }
        else {
          unsigned int v17 = v15 + 312700;
        }
        unsigned int v18 = BYTE1(v20[0]);
        if ((v20[0] & 0x7F) != 0) {
          unsigned int v18 = v14 + 312700;
        }
        if (v14 == 127) {
          return v17;
        }
        else {
          return v18;
        }
      }
    }
    while (*__error() == 4);
    if (!*__error()) {
      return 4294960596;
    }
    return *__error();
  }
  return v12;
}

__CFDictionary *CopyEDIDbyUUID(const void *a1, kern_return_t *a2)
{
  kern_return_t MatchingServices;
  io_object_t v8;
  io_object_t v9;
  CFTypeID v10;
  io_iterator_t existing;

  CFStringRef CFProperty = IOServiceMatching("IOAVService");
  if (CFProperty)
  {
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      int v6 = Mutable;
      existing = 0;
      CFDictionarySetValue(Mutable, @"EDID UUID", a1);
      CFDictionarySetValue(CFProperty, @"IOPropertyMatch", v6);
      CFRelease(v6);
      MatchingServices = IOServiceGetMatchingServices(*MEMORY[0x1E4F2EEF0], CFProperty, &existing);
      if (MatchingServices)
      {
        CFStringRef CFProperty = 0;
      }
      else
      {
        while (1)
        {
          size_t v8 = IOIteratorNext(existing);
          if (!v8) {
            break;
          }
          uint64_t v9 = v8;
          CFStringRef CFProperty = (__CFDictionary *)IORegistryEntryCreateCFProperty(v8, @"EDID", 0, 0);
          IOObjectRelease(v9);
          if (!CFProperty) {
            goto LABEL_10;
          }
          uint64_t v10 = CFGetTypeID(CFProperty);
          if (v10 == CFDataGetTypeID()) {
            goto LABEL_10;
          }
          CFRelease(CFProperty);
        }
        CFStringRef CFProperty = 0;
LABEL_10:
        IOObjectRelease(existing);
        if (CFProperty) {
          MatchingServices = 0;
        }
        else {
          MatchingServices = -6727;
        }
      }
    }
    else
    {
      CFRelease(CFProperty);
      CFStringRef CFProperty = 0;
      MatchingServices = -6728;
    }
  }
  else
  {
    MatchingServices = -6700;
  }
  if (a2) {
    *a2 = MatchingServices;
  }
  return CFProperty;
}

uint64_t H264ConvertAVCCtoAnnexBHeader(unsigned char *a1, uint64_t a2, char *a3, uint64_t a4, void *a5, void *a6, char **a7)
{
  if (a2 < 6) {
    return 4294960553;
  }
  uint64_t v10 = &a1[a2];
  size_t v11 = &a3[a4];
  char v26 = a1[4];
  uint64_t v12 = a1 + 6;
  pid_t v13 = a3;
  int v14 = a1[5] & 0x1F;
  if ((a1[5] & 0x1F) != 0)
  {
    while (v10 - v12 >= 2)
    {
      unsigned int v16 = *(unsigned __int16 *)v12;
      pid_t v15 = v12 + 2;
      int64_t v17 = __rev16(v16);
      if (v10 - v15 < v17) {
        break;
      }
      if (a3)
      {
        int64_t v18 = v17 + 4;
        if (v11 - v13 < v17 + 4) {
          return 4294960545;
        }
        *(_DWORD *)pid_t v13 = 0x1000000;
        memcpy(v13 + 4, v15, v17);
      }
      else
      {
        int64_t v18 = v17 + 4;
      }
      uint64_t v12 = &v15[v17];
      v13 += v18;
      if (!--v14) {
        goto LABEL_10;
      }
    }
    return 4294960546;
  }
LABEL_10:
  if (v10 - v12 >= 1)
  {
    int v20 = *v12++;
    int v19 = v20;
    if (v20)
    {
      while (v10 - v12 >= 2)
      {
        unsigned int v22 = *(unsigned __int16 *)v12;
        size_t v21 = v12 + 2;
        int64_t v23 = __rev16(v22);
        if (v10 - v21 < v23) {
          break;
        }
        if (a3)
        {
          int64_t v24 = v23 + 4;
          if (v11 - v13 < v23 + 4) {
            return 4294960545;
          }
          *(_DWORD *)pid_t v13 = 0x1000000;
          memcpy(v13 + 4, v21, v23);
        }
        else
        {
          int64_t v24 = v23 + 4;
        }
        uint64_t v12 = &v21[v23];
        v13 += v24;
        if (!--v19) {
          goto LABEL_19;
        }
      }
      return 4294960546;
    }
  }
LABEL_19:
  if (a5) {
    *a5 = v13 - a3;
  }
  if (a6) {
    *a6 = (v26 & 3) + 1;
  }
  uint64_t result = 0;
  if (a7) {
    *a7 = v12;
  }
  return result;
}

BOOL H264EscapeEmulationPrevention(unsigned char *a1, unsigned char *a2, void *a3, void *a4, const char **a5, uint64_t *a6, void *a7)
{
  if (a2 - a1 < 3)
  {
LABEL_9:
    *a3 = a1;
    *a4 = a2 - a1;
    if (a1 == a2 || *(a2 - 1))
    {
      uint64_t v10 = 0;
      uint64_t v11 = 0;
    }
    else
    {
      uint64_t v10 = "\x03";
      uint64_t v11 = 1;
    }
    *a5 = v10;
    BOOL result = a1 != a2;
    *a6 = v11;
    *a7 = a2;
    return result;
  }
  unint64_t v7 = a2 - a1;
  size_t v8 = a1;
  while (1)
  {
    if (*v8 || v8[1]) {
      goto LABEL_8;
    }
    unsigned int v9 = v8[2];
    if (v9 <= 2) {
      break;
    }
    if (v7 >= 4 && v9 == 3)
    {
      *a3 = a1;
      pid_t v15 = v8 + 3;
      *a4 = v15 - a1;
      *a5 = "\x03";
      BOOL result = 1;
      *a6 = 1;
      *a7 = v15;
      return result;
    }
LABEL_8:
    ++v8;
    if ((uint64_t)--v7 <= 2) {
      goto LABEL_9;
    }
  }
  *a3 = a1;
  *a4 = v8 + 2 - a1;
  pid_t v13 = "\x03\x02";
  if (v8[2] == 1) {
    pid_t v13 = "\x03\x01";
  }
  if (v8[2]) {
    int v14 = v13;
  }
  else {
    int v14 = (const char *)&unk_18E4185F0;
  }
  *a5 = v14;
  *a6 = 2;
  *a7 = v8 + 3;
  return 1;
}

uint64_t H264GetNextNALUnit(unsigned int *a1, unsigned int *a2, unint64_t a3, unsigned int **a4, unint64_t *a5, void *a6)
{
  if (a1 == a2) {
    return 4294960544;
  }
  if ((char *)a2 - (char *)a1 < a3) {
    return 4294960546;
  }
  switch(a3)
  {
    case 4uLL:
      unsigned int v9 = *a1;
      int v6 = a1 + 1;
      unint64_t v7 = bswap32(v9);
      break;
    case 2uLL:
      unsigned int v10 = *(unsigned __int16 *)a1;
      int v6 = (unsigned int *)((char *)a1 + 2);
      unint64_t v7 = __rev16(v10);
      break;
    case 1uLL:
      unsigned int v8 = *(unsigned __int8 *)a1;
      int v6 = (unsigned int *)((char *)a1 + 1);
      unint64_t v7 = v8;
      break;
    default:
      return 4294960591;
  }
  if ((char *)a2 - (char *)v6 < v7) {
    return 4294960546;
  }
  uint64_t v11 = 0;
  *a4 = v6;
  *a5 = v7;
  *a6 = (char *)v6 + v7;
  return v11;
}

uint64_t MirroredRingBufferInit(uint64_t a1, uint64_t a2, int a3)
{
  vm_map_t v4 = *MEMORY[0x1E4F14960];
  mach_vm_address_t address = 0;
  uint64_t v5 = ~*MEMORY[0x1E4F14AF0];
  mach_vm_size_t v6 = v5 & (*MEMORY[0x1E4F14AF0] + a2);
  if (a3)
  {
    unsigned int v7 = (v6 - 1) | ((v6 - 1) >> 1) | (((v6 - 1) | ((v6 - 1) >> 1)) >> 2);
    unsigned int v8 = v7 | (v7 >> 4) | ((v7 | (v7 >> 4)) >> 8);
    mach_vm_size_t v6 = (v8 | HIWORD(v8)) + 1;
  }
  if (v6 != (v5 & (*MEMORY[0x1E4F14AF0] + v6))) {
    return 4294960534;
  }
  *(void *)cur_protection = 0;
  mach_vm_address_t target_address = 0;
  uint64_t v9 = mach_vm_allocate(v4, &address, 2 * v6, 1);
  mach_vm_address_t v10 = address;
  if (v9)
  {
    uint64_t v11 = v9;
  }
  else
  {
    mach_vm_address_t target_address = address + v6;
    uint64_t v11 = mach_vm_remap(v4, &target_address, v6, 0, 0x4000, v4, address, 0, &cur_protection[1], cur_protection, 1u);
    mach_vm_address_t v10 = address;
    if (!v11)
    {
      *(void *)a1 = address;
      *(void *)(a1 + 8) = v10 + v6;
      *(_DWORD *)(a1 + 16) = v6;
      *(_DWORD *)(a1 + 20) = v6 - 1;
      *(void *)(a1 + 24) = 0;
      return v11;
    }
  }
  if (v10) {
    mach_vm_deallocate(v4, v10, 2 * v6);
  }
  return v11;
}

double MirroredRingBufferFree(uint64_t a1)
{
  if (*(void *)a1) {
    mach_vm_deallocate(*MEMORY[0x1E4F14960], *(void *)a1, (2 * *(_DWORD *)(a1 + 16)));
  }
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t MorseCode(uint64_t result, int a2, unsigned int a3, uint64_t (*a4)(uint64_t, unint64_t), unint64_t a5)
{
  char v7 = a3;
  unsigned int v8 = (unsigned __int8 *)result;
  v21[0] = a3;
  v21[1] = a4;
  long long v22 = a5;
  if (a2) {
    int v9 = a2;
  }
  else {
    int v9 = 10;
  }
  unsigned int v10 = 0x5B8D80u / -v9;
  BOOL v11 = v9 < 1;
  unsigned int v12 = 0x124F80u / v9;
  if (v11) {
    unsigned int v13 = v10;
  }
  else {
    unsigned int v13 = v12;
  }
  DWORD2(v22) = v13;
  if ((a3 & 1) == 0)
  {
    a4(0, a5);
    double result = usleep(7 * v13);
  }
  unsigned __int8 v14 = *v8;
  if (*v8)
  {
    pid_t v15 = v8 + 1;
    uint64_t v16 = MEMORY[0x1E4F14390];
    do
    {
      __darwin_ct_rune_t v17 = (char)v14;
      unsigned int v18 = v14;
      if ((v14 & 0x80) != 0)
      {
        if (__maskrune(v14, 0x100uLL))
        {
LABEL_13:
          int v19 = (unsigned __int8 *)&kMorseCodeAlpha + 8 * __toupper(v17) - 520;
LABEL_17:
          double result = _MorseCodeDoChar((uint64_t)v21, v19);
          goto LABEL_18;
        }
      }
      else if ((*(_DWORD *)(v16 + 4 * v14 + 60) & 0x100) != 0)
      {
        goto LABEL_13;
      }
      if (v18 - 48 <= 9)
      {
        int v19 = (unsigned __int8 *)&kMorseCodeDigit + 8 * (char)v18 - 384;
        goto LABEL_17;
      }
      switch((char)v17)
      {
        case '!':
          int v19 = (unsigned __int8 *)&unk_18E41876B;
          goto LABEL_17;
        case '""':
          int v19 = (unsigned __int8 *)&kMorseCodePunct;
          goto LABEL_17;
        case '#':
        case '%':
        case '*':
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        case '<':
        case '>':
          goto LABEL_32;
        case '$':
          int v19 = (unsigned __int8 *)&unk_18E41879B;
          goto LABEL_17;
        case '&':
          int v19 = (unsigned __int8 *)&unk_18E418773;
          goto LABEL_17;
        case '\'':
          int v19 = (unsigned __int8 *)&unk_18E41871B;
          goto LABEL_17;
        case '(':
          int v19 = (unsigned __int8 *)&unk_18E418723;
          goto LABEL_17;
        case ')':
          int v19 = (unsigned __int8 *)&unk_18E41872B;
          goto LABEL_17;
        case '+':
          int v19 = (unsigned __int8 *)&unk_18E41878B;
          goto LABEL_17;
        case ',':
          int v19 = (unsigned __int8 *)&unk_18E418733;
          goto LABEL_17;
        case '-':
          int v19 = (unsigned __int8 *)&unk_18E41873B;
          goto LABEL_17;
        case '.':
          int v19 = (unsigned __int8 *)&unk_18E418743;
          goto LABEL_17;
        case '/':
          int v19 = (unsigned __int8 *)&unk_18E41874B;
          goto LABEL_17;
        case ':':
          int v19 = (unsigned __int8 *)&unk_18E418753;
          goto LABEL_17;
        case ';':
          int v19 = (unsigned __int8 *)&unk_18E41877B;
          goto LABEL_17;
        case '=':
          int v19 = (unsigned __int8 *)&unk_18E418783;
          goto LABEL_17;
        case '?':
          int v19 = (unsigned __int8 *)&unk_18E41875B;
          goto LABEL_17;
        case '@':
          int v19 = (unsigned __int8 *)&unk_18E418763;
          goto LABEL_17;
        default:
          if (v17 == 95)
          {
            int v19 = (unsigned __int8 *)&unk_18E418793;
            goto LABEL_17;
          }
LABEL_32:
          if (v17 < 0)
          {
            double result = __maskrune(v18, 0x4000uLL);
            if (!result) {
              break;
            }
          }
          else
          {
            double result = *(_DWORD *)(v16 + 4 * v18 + 60) & 0x4000;
            if (!result) {
              break;
            }
          }
          if (v7) {
            double result = a4(6, a5);
          }
          else {
            double result = usleep(7 * v13);
          }
          break;
      }
LABEL_18:
      if (!*v15) {
        return result;
      }
      if ((v18 & 0x80) != 0)
      {
        double result = __maskrune(v18, 0x4000uLL);
        if (!result)
        {
LABEL_23:
          if (v7) {
            double result = a4(5, a5);
          }
          else {
            double result = usleep(3 * v13);
          }
        }
      }
      else
      {
        double result = *(_DWORD *)(v16 + 4 * v17 + 60) & 0x4000;
        if (!result) {
          goto LABEL_23;
        }
      }
      int v20 = *v15++;
      unsigned __int8 v14 = v20;
    }
    while (v20);
  }
  return result;
}

uint64_t _MorseCodeDoChar(uint64_t result, unsigned __int8 *a2)
{
  unsigned __int8 v2 = *a2;
  if (*a2)
  {
    uint64_t v3 = result;
    vm_map_t v4 = a2 + 1;
    do
    {
      if (*(unsigned char *)v3)
      {
        double result = (*(uint64_t (**)(void, void))(v3 + 8))(v2, *(void *)(v3 + 16));
      }
      else
      {
        switch(v2)
        {
          case 1u:
            double result = (*(uint64_t (**)(uint64_t, void))(v3 + 8))(1, *(void *)(v3 + 16));
            break;
          case 2u:
            (*(void (**)(uint64_t, void))(v3 + 8))(1, *(void *)(v3 + 16));
            useconds_t v5 = *(_DWORD *)(v3 + 24);
            goto LABEL_9;
          case 3u:
            (*(void (**)(uint64_t, void))(v3 + 8))(1, *(void *)(v3 + 16));
            useconds_t v5 = 3 * *(_DWORD *)(v3 + 24);
LABEL_9:
            usleep(v5);
            double result = (*(uint64_t (**)(void, void))(v3 + 8))(0, *(void *)(v3 + 16));
            break;
          case 4u:
            useconds_t v6 = *(_DWORD *)(v3 + 24);
            goto LABEL_14;
          case 5u:
            useconds_t v6 = 3 * *(_DWORD *)(v3 + 24);
            goto LABEL_14;
          case 6u:
            useconds_t v6 = 7 * *(_DWORD *)(v3 + 24);
LABEL_14:
            double result = usleep(v6);
            break;
          default:
            break;
        }
      }
      if (!*v4) {
        break;
      }
      double result = (*(unsigned char *)v3 & 1) != 0
             ? (*(uint64_t (**)(uint64_t, void))(v3 + 8))(4, *(void *)(v3 + 16))
             : usleep(*(_DWORD *)(v3 + 24));
      int v7 = *v4++;
      unsigned __int8 v2 = v7;
    }
    while (v7);
  }
  return result;
}

uint64_t PIDInit(uint64_t result, double a2, double a3, double a4, double a5, double a6, double a7)
{
  *(void *)(result + 8) = 0;
  *(double *)(result + 16) = a6;
  *(double *)(result + 24) = a7;
  *(double *)(result + 32) = a3;
  *(void *)(result + 40) = 0;
  *(double *)(result + 48) = 1.0 - a5;
  *(double *)(result + 56) = (1.0 - a5) * a4;
  *(double *)double result = a2;
  return result;
}

double PIDUpdate(double *a1, double a2)
{
  double v2 = *a1 * a2;
  double v3 = a1[3];
  double v4 = a1[1] + a1[4] * a2;
  a1[1] = v4;
  double v5 = v2 + v4;
  if (v5 > v3 || (double v3 = a1[2], v5 < v3))
  {
    a1[1] = v3 - v2;
    double v5 = v3;
  }
  double v6 = a1[5];
  double v7 = a2 - v6;
  a1[5] = v6 + a1[6] * v7;
  return v5 + v7 * a1[7];
}

uint64_t cced25519_make_key_pair_compat(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = ccsha512_di();
  uint64_t v5 = ccrng();
  return MEMORY[0x1F40CAC20](v4, v5, a1, a2);
}

uint64_t cced25519_sign_compat()
{
  ccsha512_di();
  return cced25519_sign();
}

uint64_t cced25519_verify_compat()
{
  ccsha512_di();
  return cced25519_verify();
}

uint64_t Curve25519MakeKeyPair(int a1, void *bytes)
{
  RandomBytes(bytes, 0x20uLL);
  CryptoHKDF((uint64_t)_kCryptoHashDescriptor_SHA512, (uint64_t)bytes, 32, "Salt", 4uLL, (uint64_t)"Info", 4, 0x20uLL, (uint64_t)bytes);
  return cccurve25519_make_pub();
}

uint64_t TDSBloomFilterAddHash(uint64_t result, uint64_t a2, unint64_t a3)
{
  unsigned int v3 = 0;
  unint64_t v4 = 8 * a2;
  do
  {
    *(unsigned char *)(result + ((a3 % v4) >> 3)) |= 1 << (~(_BYTE)a3 & 7);
    a3 /= v4;
  }
  while (v3++ < 3);
  return result;
}

unint64_t TDSBloomFilterAddString(uint64_t a1, uint64_t a2, char *__s, size_t a4)
{
  if (a4 == -1) {
    a4 = strlen(__s);
  }
  unint64_t result = SipHash(qword_18E4187EE, (unsigned __int8 *)__s, a4);
  unsigned int v8 = 0;
  unint64_t v9 = 8 * a2;
  do
  {
    *(unsigned char *)(a1 + ((result % v9) >> 3)) |= 1 << (~(_BYTE)result & 7);
    result /= v9;
  }
  while (v8++ < 3);
  return result;
}

BOOL TDSBloomFilterContainsHash(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unsigned int v3 = 0;
  unint64_t v4 = 8 * a2;
  do
  {
    int v5 = (1 << (~(_BYTE)a3 & 7)) & *(unsigned __int8 *)(a1 + ((a3 % v4) >> 3));
    if (v5) {
      BOOL v6 = v3 >= 3;
    }
    else {
      BOOL v6 = 1;
    }
    ++v3;
    a3 /= v4;
  }
  while (!v6);
  return v5 != 0;
}

BOOL TDSBloomFilterContainsString(uint64_t a1, uint64_t a2, char *__s, size_t a4)
{
  if (a4 == -1) {
    a4 = strlen(__s);
  }
  unint64_t v7 = SipHash(qword_18E4187EE, (unsigned __int8 *)__s, a4);
  unsigned int v8 = 0;
  unint64_t v9 = 8 * a2;
  do
  {
    int v10 = (1 << (~(_BYTE)v7 & 7)) & *(unsigned __int8 *)(a1 + ((v7 % v9) >> 3));
    if (v10) {
      BOOL v11 = v8 >= 3;
    }
    else {
      BOOL v11 = 1;
    }
    ++v8;
    v7 /= v9;
  }
  while (!v11);
  return v10 != 0;
}

uint64_t _NetPerfGetTypeID()
{
  uint64_t result = _CFRuntimeRegisterClass();
  gNetPerfCFTypeID TypeID = result;
  return result;
}

void _NetPerfFinalize(void *a1)
{
  double v2 = a1[2];
  if (v2)
  {
    dispatch_release(v2);
    a1[2] = 0;
  }
  unsigned int v3 = a1[5];
  if (v3)
  {
    dispatch_release(v3);
    a1[5] = 0;
  }
  unint64_t v4 = (const void *)a1[6];
  if (v4)
  {
    CFRelease(v4);
    a1[6] = 0;
  }
}

uint64_t NetPerfCreate(void *a1)
{
  if (gNetPerfInitOnce != -1) {
    dispatch_once_f(&gNetPerfInitOnce, 0, (dispatch_function_t)_NetPerfGetTypeID);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance) {
    return 4294960568;
  }
  unsigned int v3 = (void *)Instance;
  *(_OWORD *)(Instance + 144) = 0u;
  *(_OWORD *)(Instance + 160) = 0u;
  *(_OWORD *)(Instance + 224) = 0u;
  *(_OWORD *)(Instance + 240) = 0u;
  *(_OWORD *)(Instance + 192) = 0u;
  *(_OWORD *)(Instance + 208) = 0u;
  *(_OWORD *)(Instance + 176) = 0u;
  *(_OWORD *)(Instance + 112) = 0u;
  *(_OWORD *)(Instance + 128) = 0u;
  *(_OWORD *)(Instance + 80) = 0u;
  *(_OWORD *)(Instance + 96) = 0u;
  *(_OWORD *)(Instance + 48) = 0u;
  *(_OWORD *)(Instance + 64) = 0u;
  *(_OWORD *)(Instance + 16) = 0u;
  *(_OWORD *)(Instance + 32) = 0u;
  *(void *)(Instance + 84) = -1;
  *(void *)(Instance + 152) = -1;
  *(_DWORD *)(Instance + 160) = -1;
  dispatch_queue_t v4 = dispatch_queue_create("NetPerfControl", 0);
  v3[2] = v4;
  if (!v4)
  {
    CFRelease(v3);
    return 4294960568;
  }
  uint64_t v5 = MEMORY[0x1E4F14428];
  dispatch_retain(MEMORY[0x1E4F14428]);
  BOOL v6 = v3[5];
  if (v6) {
    dispatch_release(v6);
  }
  uint64_t result = 0;
  void v3[5] = v5;
  *a1 = v3;
  return result;
}

void NetPerfSetEventHandler(void *a1, uint64_t a2, uint64_t a3, NSObject *a4)
{
  a1[3] = a2;
  a1[4] = a3;
  if (a4) {
    uint64_t v5 = a4;
  }
  else {
    uint64_t v5 = MEMORY[0x1E4F14428];
  }
  dispatch_retain(v5);
  BOOL v6 = a1[5];
  if (v6) {
    dispatch_release(v6);
  }
  a1[5] = v5;
}

uint64_t _NetPerfControl(unint64_t a1, int a2, CFStringRef theString1, uint64_t a4, const __CFDictionary *a5, __CFDictionary **a6)
{
  if (CFEqual(theString1, @"startClientSession"))
  {
    if (*(_DWORD *)(a1 + 80)) {
      return 4294960575;
    }
    if (a5)
    {
      *(_OWORD *)(a1 + 232) = xmmword_18E416F20;
      *(void *)(a1 + 248) = 0xBFF0000000000000;
      *(void *)(a1 + 216) = 0;
      *(void *)(a1 + 192) = 0;
      if (SecondsToUpTicks_sOnce != -1) {
        dispatch_once_f(&SecondsToUpTicks_sOnce, &SecondsToUpTicks_sMultiplier, (dispatch_function_t)_SecondsToUpTicksInit);
      }
      *(void *)(a1 + 224) = SecondsToUpTicks_sMultiplier;
      *(void *)(a1 + 176) = 1500;
      BOOL v11 = malloc_type_calloc(1uLL, 0x5DCuLL, 0x6D70E0A7uLL);
      *(void *)(a1 + 168) = v11;
      if (v11)
      {
        unsigned int v22 = HTTPClientCreate((uint64_t *)(a1 + 56));
        if (!v22)
        {
          HTTPClientSetDispatchQueue(*(void *)(a1 + 56), *(NSObject **)(a1 + 16));
          *(_DWORD *)(*(void *)(a1 + 56) + 84) |= 0x81u;
          unsigned int v12 = CFDictionaryCopyCString(a5, @"destination", &v22);
          if (!v22)
          {
            unsigned int v13 = v12;
            unsigned int v22 = HTTPClientSetDestination(*(void *)(a1 + 56), v12, 5000);
            free(v13);
            if (!v22)
            {
              unsigned int v22 = HTTPMessageCreate((uint64_t *)(a1 + 64));
              if (!v22)
              {
                uint64_t v20 = *(void *)(a1 + 64);
                *(void *)(v20 + 9672) = a1;
                *(void *)(v20 + 9712) = _NetPerfClientHandleControlCompletion;
                CFRetain((CFTypeRef)a1);
                *(_DWORD *)(a1 + 80) = 1;
                _NetPerfClientRunStateMachine(a1);
                return 0;
              }
            }
          }
        }
        goto LABEL_16;
      }
      int v21 = -6728;
    }
    else
    {
      int v21 = -6705;
    }
    unsigned int v22 = v21;
LABEL_16:
    _NetPerfClientStop((char *)a1);
    uint64_t v10 = v22;
    if (v22) {
      return v10;
    }
    return 0;
  }
  if (CFEqual(theString1, @"stopClientSession"))
  {
    _NetPerfClientStop((char *)a1);
    return 0;
  }
  if (CFEqual(theString1, @"setUpServerSession"))
  {
    int v23 = 0;
    if (*(unsigned char *)(a1 + 128))
    {
      uint64_t v10 = 4294960577;
    }
    else
    {
      *(_DWORD *)(a1 + 184) = 0;
      *(void *)(a1 + 192) = 0;
      *(void *)(a1 + 200) = 0;
      *(_DWORD *)(a1 + 208) = 0;
      *(void *)(a1 + 176) = 1500;
      unsigned __int8 v14 = malloc_type_calloc(1uLL, 0x5DCuLL, 0xFCB3032AuLL);
      *(void *)(a1 + 168) = v14;
      if (v14)
      {
        pid_t v15 = (int *)(a1 + 156);
        uint64_t v16 = (int *)(a1 + 160);
        uint64_t v10 = ServerSocketPairOpen(2, 17, 0, &v23, -1, (int *)(a1 + 156), (int *)(a1 + 160));
        if (v10) {
          goto LABEL_28;
        }
        if ((*v15 & 0x80000000) == 0)
        {
          SocketSetP2P(*v15, 1);
          SocketSetPacketTimestamps(*v15, 1);
        }
        if ((*v16 & 0x80000000) == 0)
        {
          SocketSetP2P(*v16, 1);
          SocketSetPacketTimestamps(*v16, 1);
        }
        uint64_t v10 = OpenSelfConnectedLoopbackSocket((int *)(a1 + 152));
        if (v10) {
          goto LABEL_28;
        }
        uint64_t v10 = pthread_create((pthread_t *)(a1 + 136), 0, (void *(__cdecl *)(void *))_NetPerfServerDataThread, (void *)a1);
        if (v10) {
          goto LABEL_28;
        }
        *(void *)(a1 + 144) = a1 + 136;
        CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (Mutable)
        {
          int v19 = Mutable;
          CFDictionarySetInt64(Mutable, @"port", v23);
          *(unsigned char *)(a1 + 128) = 1;
          CFRetain((CFTypeRef)a1);
          *a6 = v19;
          return 0;
        }
      }
      uint64_t v10 = 4294960568;
    }
LABEL_28:
    _NetPerfServerSessionTearDown((CFTypeRef)a1);
    return v10;
  }
  if (CFEqual(theString1, @"tearDownServerSession"))
  {
    _NetPerfServerSessionTearDown((CFTypeRef)a1);
    return 0;
  }
  if (CFEqual(theString1, @"startServerSession"))
  {
    if (!*(unsigned char *)(a1 + 128)) {
      return 4294960551;
    }
    if (!*(unsigned char *)(a1 + 129))
    {
      *(unsigned char *)(a1 + 129) = 1;
      return 0;
    }
    return 4294960575;
  }
  return 4294960582;
}

unint64_t _NetPerfClientRunStateMachine(unint64_t result)
{
  uint64_t v1 = result;
  double v2 = (int *)(result + 84);
  unsigned int v3 = (pthread_t *)(result + 112);
  dispatch_queue_t v4 = (pthread_t *)(result + 96);
  for (int i = *(_DWORD *)(result + 80); i == 3; int i = 4)
  {
    uint64_t result = OpenSelfConnectedLoopbackSocket(v2);
    if (result) {
      return result;
    }
    uint64_t result = pthread_create(v3, 0, (void *(__cdecl *)(void *))_NetPerfClientReceiveThread, (void *)v1);
    if (result) {
      return result;
    }
    *(void *)(v1 + 120) = v3;
    uint64_t result = pthread_create(v4, 0, (void *(__cdecl *)(void *))_NetPerfClientSendThread, (void *)v1);
    if (result) {
      return result;
    }
    *(void *)(v1 + 104) = v4;
    *(_DWORD *)(v1 + 80) = 4;
  }
  if (i == 2)
  {
    CFDictionaryRef v7 = *(const __CFDictionary **)(v1 + 72);
    *(void *)&v10.sa_len = 0;
    *(void *)&v10.sa_data[6] = 0;
    int v12 = 0;
    uint64_t v11 = 0;
    *(void *)unint64_t v9 = 0;
    uint64_t result = HTTPClientGetPeerAddress(*(void *)(v1 + 56), &v10, 0x1Cu, v9);
    if (!result)
    {
      unsigned int v8 = (int *)(v1 + 88);
      uint64_t result = ServerSocketOpenEx2(v10.sa_family, 2, 17, 0, 0, -6100, 0, -1, 0, (int *)(v1 + 88));
      int v13 = result;
      if (!result)
      {
        SocketSetP2P(*v8, 1);
        uint64_t result = SocketSetPacketTimestamps(*v8, 1);
        if (v7)
        {
          uint64_t result = CFDictionaryGetInt64(v7, @"port", &v13);
          if (!v13)
          {
            if (v10.sa_family == 30 || v10.sa_family == 2) {
              *(_WORD *)v10.sa_uintptr_t data = bswap32(result) >> 16;
            }
            int v13 = connect(*v8, &v10, v9[0]);
            if (!v13
              || (uint64_t result = (unint64_t)__error(), *(_DWORD *)result)
              && (uint64_t result = (unint64_t)__error(), !*(_DWORD *)result))
            {
              uint64_t result = _NetPerfClientSendControlMessage(v1, @"startServerSession");
              if (!result)
              {
                int v6 = 3;
                goto LABEL_11;
              }
            }
          }
        }
      }
    }
  }
  else if (i == 1)
  {
    uint64_t result = _NetPerfClientSendControlMessage(v1, @"setUpServerSession");
    if (!result)
    {
      int v6 = 2;
LABEL_11:
      *(_DWORD *)(v1 + 80) = v6;
    }
  }
  return result;
}

void _NetPerfClientStop(char *cf)
{
  if (*((void *)cf + 13))
  {
    SendSelfConnectedLoopbackMessage(*((_DWORD *)cf + 21), "q", 1uLL);
    pthread_join(*((pthread_t *)cf + 12), 0);
    *((void *)cf + 13) = 0;
  }
  if (*((void *)cf + 15))
  {
    SendSelfConnectedLoopbackMessage(*((_DWORD *)cf + 21), "q", 1uLL);
    pthread_join(*((pthread_t *)cf + 14), 0);
    *((void *)cf + 15) = 0;
  }
  double v2 = (dispatch_queue_t *)*((void *)cf + 7);
  if (v2)
  {
    CFRetain(*((CFTypeRef *)cf + 7));
    dispatch_async_f(v2[2], v2, (dispatch_function_t)_HTTPClientInvalidate);
    CFRelease(*((CFTypeRef *)cf + 7));
    *((void *)cf + 7) = 0;
  }
  unsigned int v3 = (const void *)*((void *)cf + 8);
  if (v3)
  {
    CFRelease(v3);
    *((void *)cf + 8) = 0;
  }
  dispatch_queue_t v4 = (const void *)*((void *)cf + 9);
  if (v4)
  {
    CFRelease(v4);
    *((void *)cf + 9) = 0;
  }
  int v5 = *((_DWORD *)cf + 21);
  if ((v5 & 0x80000000) == 0)
  {
    if (close(v5) && *__error()) {
      __error();
    }
    *((_DWORD *)cf + 21) = -1;
  }
  int v6 = *((_DWORD *)cf + 22);
  if ((v6 & 0x80000000) == 0)
  {
    if (close(v6) && *__error()) {
      __error();
    }
    *((_DWORD *)cf + 22) = -1;
  }
  CFDictionaryRef v7 = (void *)*((void *)cf + 21);
  if (v7)
  {
    free(v7);
    *((void *)cf + 21) = 0;
  }
  if (*((_DWORD *)cf + 20))
  {
    if (*((void *)cf + 3))
    {
      unsigned int v8 = malloc_type_malloc(0x20uLL, 0x10E0040E15455BBuLL);
      if (v8)
      {
        *(_DWORD *)unsigned int v8 = 4;
        v8[1] = 0;
        *((_OWORD *)v8 + 1) = *(_OWORD *)(cf + 24);
        dispatch_async_f(*((dispatch_queue_t *)cf + 5), v8, (dispatch_function_t)_PostEventOnEventQueue);
      }
    }
    *((_DWORD *)cf + 20) = 0;
    CFRelease(cf);
  }
}

void _NetPerfServerSessionTearDown(CFTypeRef cf)
{
  if (*((void *)cf + 18))
  {
    SendSelfConnectedLoopbackMessage(*((_DWORD *)cf + 38), "q", 1uLL);
    pthread_join(*((pthread_t *)cf + 17), 0);
    *((void *)cf + 18) = 0;
  }
  int v2 = *((_DWORD *)cf + 38);
  if ((v2 & 0x80000000) == 0)
  {
    if (close(v2) && *__error()) {
      __error();
    }
    *((_DWORD *)cf + 38) = -1;
  }
  int v3 = *((_DWORD *)cf + 39);
  if ((v3 & 0x80000000) == 0)
  {
    if (close(v3) && *__error()) {
      __error();
    }
    *((_DWORD *)cf + 39) = -1;
  }
  int v4 = *((_DWORD *)cf + 40);
  if ((v4 & 0x80000000) == 0)
  {
    if (close(v4) && *__error()) {
      __error();
    }
    *((_DWORD *)cf + 40) = -1;
  }
  int v5 = (void *)*((void *)cf + 21);
  if (v5)
  {
    free(v5);
    *((void *)cf + 21) = 0;
  }
  if (*((unsigned char *)cf + 128))
  {
    *((unsigned char *)cf + 128) = 0;
    CFRelease(cf);
  }
}

uint64_t _NetPerfServerDataThread(_DWORD *a1)
{
  unint64_t v2 = a1[39];
  unint64_t v1 = a1[40];
  int v3 = a1[38];
  SetCurrentThreadPriority(62);
  memset(&v16, 0, sizeof(v16));
  if ((int)v2 <= (int)v1) {
    int v4 = v1;
  }
  else {
    int v4 = v2;
  }
  int v15 = 1 << v2;
  if (v4 <= v3) {
    int v4 = v3;
  }
  unint64_t v5 = v2 >> 5;
  int v6 = 1 << v1;
  unint64_t v7 = v1 >> 5;
  if (v4 < 0) {
    int v4 = -1;
  }
  int v8 = v4 + 1;
  int v9 = 1 << v3;
  unint64_t v10 = (unint64_t)v3 >> 5;
  do
  {
    while (1)
    {
      if ((v2 & 0x80000000) == 0 && __darwin_check_fd_set_overflow(v2, &v16, 0)) {
        v16.fds_bits[v5] |= v15;
      }
      if ((v1 & 0x80000000) == 0 && __darwin_check_fd_set_overflow(v1, &v16, 0)) {
        v16.fds_bits[v7] |= v6;
      }
      if (__darwin_check_fd_set_overflow(v3, &v16, 0)) {
        v16.fds_bits[v10] |= v9;
      }
      int v11 = select(v8, &v16, 0, 0, 0);
      if (v11 > 0) {
        break;
      }
      if (v11 && *__error())
      {
        int v12 = *__error();
        if (!v12) {
          break;
        }
        if (v12 == 4) {
          continue;
        }
      }
      sleep(1u);
    }
    if ((v2 & 0x80000000) == 0 && __darwin_check_fd_set_overflow(v2, &v16, 0) && (v16.fds_bits[v5] & v15) != 0) {
      _NetPerfServerDataHandler((uint64_t)a1, v2);
    }
    if ((v1 & 0x80000000) == 0 && __darwin_check_fd_set_overflow(v1, &v16, 0) && (v16.fds_bits[v7] & v6) != 0) {
      _NetPerfServerDataHandler((uint64_t)a1, v1);
    }
  }
  while (!__darwin_check_fd_set_overflow(v3, &v16, 0) || (v16.fds_bits[v10] & v9) == 0);
  return 0;
}

int *_NetPerfServerDataHandler(uint64_t a1, int a2)
{
  ssize_t v16 = 0;
  *(void *)&v13.sa_len = 0;
  *(void *)&v13.sa_data[6] = 0;
  int v15 = 0;
  uint64_t v14 = 0;
  uint64_t v11 = 0;
  *(void *)int v12 = 0;
  int v4 = *(int32x2_t **)(a1 + 168);
  uint64_t result = (int *)SocketRecvFrom(a2, (uint64_t)v4, *(void *)(a1 + 176), &v16, &v13, 0x1Cu, v12, &v11, 0, 0);
  if (result) {
    return result;
  }
  unint64_t v6 = UpTicksToNTP(v11);
  unsigned int v7 = bswap32(v4->i32[0]);
  int v8 = *(_DWORD *)(a1 + 184);
  int v9 = v7 - (v8 + 1);
  if (v7 == v8 + 1) {
    goto LABEL_5;
  }
  if (v9 >= 1)
  {
    *(_DWORD *)(a1 + 204) += v9;
LABEL_5:
    *(_DWORD *)(a1 + 184) = v7;
    goto LABEL_6;
  }
  if (v7 == v8) {
    ++*(_DWORD *)(a1 + 208);
  }
  else {
    ++*(_DWORD *)(a1 + 200);
  }
LABEL_6:
  ++*(void *)(a1 + 192);
  v4[1] = v4[3];
  v4[2] = (int32x2_t)bswap64(v6);
  uint64_t v10 = mach_absolute_time();
  _OWORD v4[3] = (int32x2_t)bswap64(UpTicksToNTP(v10));
  v4[4] = vrev64_s32((int32x2_t)vrev32_s8(*(int8x8_t *)(a1 + 200)));
  v4[5].i32[0] = bswap32(*(_DWORD *)(a1 + 208));
  uint64_t result = (int *)sendto(a2, v4, 0x30uLL, 0, &v13, v12[0]);
  if (result != (int *)48)
  {
    uint64_t result = __error();
    if (*result) {
      return __error();
    }
  }
  return result;
}

void _PostEventOnEventQueue(unsigned int *a1)
{
  (*((void (**)(void, void, void))a1 + 2))(*a1, *((void *)a1 + 1), *((void *)a1 + 3));
  unint64_t v2 = (const void *)*((void *)a1 + 1);
  if (v2) {
    CFRelease(v2);
  }
  free(a1);
}

uint64_t _NetPerfClientSendControlMessage(uint64_t a1, const void *a2)
{
  uint64_t v4 = *(void *)(a1 + 64);
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return 4294960568;
  }
  unint64_t v6 = Mutable;
  CFDictionarySetValue(Mutable, @"controlCommand", a2);
  CFDataRef Data = CFPropertyListCreateData(0, v6, kCFPropertyListBinaryFormat_v1_0, 0, 0);
  CFRelease(v6);
  if (!Data) {
    return 4294960596;
  }
  HTTPHeader_InitRequestF(v4 + 24, (uint64_t)"HTTP/1.1", (uint64_t)"POST", (uint64_t)"%s", v8, v9, v10, v11, (uint64_t)"/perf");
  BytePtr = CFDataGetBytePtr(Data);
  size_t Length = CFDataGetLength(Data);
  uint64_t v14 = HTTPMessageSetBody(v4, (uint64_t)"application/x-apple-binary-plist", BytePtr, Length);
  CFRelease(Data);
  if (v14) {
    return v14;
  }
  unsigned int v22 = *(dispatch_queue_t **)(a1 + 56);
  return HTTPClientSendMessage(v22, v4, v15, v16, v17, v18, v19, v20);
}

uint64_t _NetPerfClientSendThread(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 88);
  SetCurrentThreadPriority(62);
  uint64_t v2 = mach_absolute_time();
  if (UpTicksPerSecond_sOnce != -1) {
    dispatch_once_f(&UpTicksPerSecond_sOnce, &UpTicksPerSecond_sTicksPerSecond, (dispatch_function_t)_UpTicksPerSecondInit);
  }
  unint64_t v3 = UpTicksPerSecond_sTicksPerSecond / 0x3CuLL;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  unint64_t v12 = 0;
  uint64_t v4 = v2 + UpTicksPerSecond_sTicksPerSecond / 0x3CuLL;
  for (unsigned int i = 1; ; ++i)
  {
    unsigned int v8 = bswap32(i);
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    int v11 = 0;
    uint64_t v6 = mach_absolute_time();
    unint64_t v12 = bswap64(UpTicksToNTP(v6));
    if (send(v1, &v8, 0x30uLL, 0) != 48 && (!*__error() || *__error())) {
      break;
    }
    SleepUntilUpTicks(v4);
    v4 += v3;
  }
  return 0;
}

uint64_t _NetPerfClientReceiveThread(uint64_t a1)
{
  int v3 = *(_DWORD *)(a1 + 84);
  int v2 = *(_DWORD *)(a1 + 88);
  SetCurrentThreadPriority(62);
  memset(&v24, 0, 32);
  if (v2 <= v3) {
    int v4 = v3;
  }
  else {
    int v4 = v2;
  }
  if (v4 < 0) {
    int v4 = -1;
  }
  memset(&v24.fds_bits[8], 0, 96);
  int v5 = v4 + 1;
  int v6 = 1 << v2;
  unint64_t v7 = (unint64_t)v2 >> 5;
  int v8 = 1 << v3;
  unint64_t v9 = (unint64_t)v3 >> 5;
  int v23 = v4 + 1;
  do
  {
    while (1)
    {
      if (__darwin_check_fd_set_overflow(v2, &v24, 0)) {
        v24.fds_bits[v7] |= v6;
      }
      if (__darwin_check_fd_set_overflow(v3, &v24, 0)) {
        v24.fds_bits[v9] |= v8;
      }
      int v10 = select(v5, &v24, 0, 0, 0);
      if (v10 > 0) {
        break;
      }
      if (v10 && *__error())
      {
        int v21 = *__error();
        if (!v21) {
          break;
        }
        if (v21 == 4) {
          continue;
        }
      }
      sleep(1u);
    }
    if (__darwin_check_fd_set_overflow(v2, &v24, 0))
    {
      if ((v24.fds_bits[v7] & v6) != 0)
      {
        uint64_t v25 = 0;
        v26[0] = 0;
        uint64_t v11 = *(void *)(a1 + 168);
        if (!SocketRecvFrom(v2, v11, *(void *)(a1 + 176), v26, 0, 0, 0, &v25, 0, 0))
        {
          ++*(void *)(a1 + 192);
          unint64_t v12 = bswap64(*(void *)(v11 + 8));
          unint64_t v13 = bswap64(*(void *)(v11 + 16));
          unint64_t v14 = bswap64(*(void *)(v11 + 24));
          unint64_t v15 = UpTicksToNTP(v25);
          double v16 = (double)(uint64_t)(v15 - v12) * 2.32830644e-10 - (double)(uint64_t)(v14 - v13) * 2.32830644e-10;
          double v17 = *(double *)(a1 + 232);
          if (v16 < v17)
          {
            *(double *)(a1 + 232) = v16;
            double v17 = (double)(uint64_t)(v15 - v12) * 2.32830644e-10 - (double)(uint64_t)(v14 - v13) * 2.32830644e-10;
          }
          double v18 = *(double *)(a1 + 240);
          if (v16 > v18)
          {
            *(double *)(a1 + 240) = v16;
            double v18 = (double)(uint64_t)(v15 - v12) * 2.32830644e-10 - (double)(uint64_t)(v14 - v13) * 2.32830644e-10;
          }
          double v19 = *(double *)(a1 + 248);
          if (v19 >= 0.0) {
            double v20 = v16 * 0.1 + v19 * 0.9;
          }
          else {
            double v20 = (double)(uint64_t)(v15 - v12) * 2.32830644e-10 - (double)(uint64_t)(v14 - v13) * 2.32830644e-10;
          }
          *(double *)(a1 + 248) = v20;
          int v6 = 1 << v2;
          int v5 = v23;
          int v8 = 1 << v3;
          if (v16 <= v20 * 3.0)
          {
            if (v25 >= *(void *)(a1 + 216))
            {
              fprintf((FILE *)*MEMORY[0x1E4F143D8], "%4llu: Min RTT %10f ms, Max RTT %10f, Avg RTT %10f, Recent RTT %10f Lost %u%s\n", *(void *)(a1 + 192), v17 * 1000.0, v18 * 1000.0, v20 * 1000.0, v16 * 1000.0, bswap32(*(_DWORD *)(v11 + 32)), "");
              *(void *)(a1 + 216) = *(void *)(a1 + 224) + v25;
            }
          }
          else
          {
            fprintf((FILE *)*MEMORY[0x1E4F143D8], "%4llu: Min RTT %10f ms, Max RTT %10f, Avg RTT %10f, Recent RTT %10f Lost %u%s\n", *(void *)(a1 + 192), v17 * 1000.0, v18 * 1000.0, v20 * 1000.0, v16 * 1000.0, bswap32(*(_DWORD *)(v11 + 32)), " (bad)");
          }
        }
      }
    }
  }
  while (!__darwin_check_fd_set_overflow(v3, &v24, 0) || (v24.fds_bits[v9] & v8) == 0);
  return 0;
}

unint64_t _NetPerfClientHandleControlCompletion(unint64_t result)
{
  if (!*(_DWORD *)(result + 9648))
  {
    unint64_t v1 = result;
    unint64_t v2 = *(void *)(result + 9672);
    int v3 = *(const void **)(v2 + 72);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(v2 + 72) = 0;
    }
    CFIndex v4 = *(void *)(v1 + 8528);
    if (!v4
      || (uint64_t result = (unint64_t)CFDataCreate(0, *(const UInt8 **)(v1 + 8520), v4)) != 0
      && (int v5 = (const void *)result,
          *(void *)(v2 + 72) = CFPropertyListCreateWithData(0, (CFDataRef)result, 0, 0, 0),
          CFRelease(v5),
          (uint64_t result = *(void *)(v2 + 72)) != 0)
      && (CFTypeID v6 = CFGetTypeID((CFTypeRef)result), result = CFDictionaryGetTypeID(), v6 == result))
    {
      return _NetPerfClientRunStateMachine(v2);
    }
  }
  return result;
}

uint64_t NetSocketChaCha20Poly1305Configure(void *a1, _OWORD *a2, void *a3, _OWORD *a4, void *a5)
{
  int v10 = (_OWORD *)a1[12];
  if (!v10)
  {
    int v10 = malloc_type_calloc(1uLL, 0x8278uLL, 0x10100408667D46EuLL);
    if (!v10) {
      return 4294960568;
    }
    a1[12] = v10;
  }
  long long v11 = a2[1];
  v10[16] = *a2;
  v10[17] = v11;
  if (a3) {
    *((void *)v10 + 36) = *a3;
  }
  long long v12 = a4[1];
  *(_OWORD *)((char *)v10 + 16936) = *a4;
  *(_OWORD *)((char *)v10 + 16952) = v12;
  if (a5) {
    *((void *)v10 + 2121) = *a5;
  }
  uint64_t result = 0;
  a1[3] = _NetSocketTransportRead;
  a1[4] = _NetSocketTransportWrite;
  a1[5] = _NetSocketTransportWriteV;
  a1[6] = NetSocket_WriteFileSlow;
  a1[7] = _NetSocketTransportFree;
  return result;
}

void _NetSocketTransportFree(uint64_t a1)
{
  unint64_t v1 = *(void **)(a1 + 96);
  if (v1)
  {
    memset_s(*(void **)(a1 + 96), 0x8278uLL, 0, 0x8278uLL);
    free(v1);
    *(void *)(a1 + 96) = 0;
  }
}

uint64_t _NetSocketTransportWriteV(uint64_t a1, unint64_t *a2, int a3, unsigned int a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)a1 != 1853058915) {
    return 4294960556;
  }
  if (*(unsigned char *)(a1 + 8)) {
    return 4294960573;
  }
  if ((*(_DWORD *)(a1 + 4) & 0x80000000) != 0) {
    return 4294960551;
  }
  CFIndex v4 = a2;
  uint64_t v5 = *(void *)(a1 + 96);
  CFTypeID v6 = (unsigned int *)(v5 + 16976);
  unint64_t v7 = (int8x16_t *)(v5 + 16978);
  unint64_t v8 = v5 + 33362;
  unint64_t v9 = (unint64_t)&a2[2 * a3];
  int v10 = (int32x4_t *)(v5 + 16680);
  char v33 = (_DWORD *)(v5 + 16936);
  uint64_t v34 = (int8x16_t *)(v5 + 16978);
  long long v11 = (_DWORD *)(v5 + 16968);
  uint64_t v35 = v5;
  passwd v32 = (unsigned int *)(v5 + 16816);
  unsigned int v29 = (char *)(v5 + 16976);
  while (1)
  {
    if ((unint64_t)v4 >= v9) {
      return 0;
    }
    uint64_t v12 = 0;
    unint64_t v13 = v7;
    unint64_t v14 = (unint64_t)v4;
    while (1)
    {
      unint64_t v15 = *(void *)(v14 + 8);
      if (v8 - (unint64_t)v13 < v15) {
        break;
      }
      v12 += v15;
      unint64_t v13 = (int8x16_t *)((char *)v13 + v15);
      v14 += 16;
      if (v14 >= v9)
      {
        if (!v12) {
          return 0;
        }
        goto LABEL_12;
      }
    }
    v12 += v8 - (void)v13;
    if (!v12) {
      return 0;
    }
LABEL_12:
    chacha20_poly1305_init_64x64(v10, v33, v11);
    *(_WORD *)CFTypeID v6 = v12;
    poly1305_update(v32, v6, 2uLL);
    *(void *)(v35 + 16912) += 2;
    double v16 = v4 + 1;
    double v17 = v7;
    while (1)
    {
      CFIndex v4 = v16 - 1;
      double v18 = (int8x16_t *)*(v16 - 1);
      unint64_t v19 = v8 - (void)v17;
      if (v8 - (unint64_t)v17 < *v16) {
        break;
      }
      unint64_t v20 = chacha20_poly1305_encrypt((uint64_t)v10, v18, *v16, v7);
      int v21 = v16 + 2;
      double v17 = (int8x16_t *)((char *)v17 + *v16);
      unint64_t v7 = (int8x16_t *)((char *)v7 + v20);
      BOOL v22 = (unint64_t)(v16 + 1) >= v9;
      v16 += 2;
      if (v22)
      {
        CFIndex v4 = v21 - 1;
        goto LABEL_18;
      }
    }
    unint64_t v23 = chacha20_poly1305_encrypt((uint64_t)v10, v18, v8 - (void)v17, v7);
    *(v16 - 1) += v19;
    *v16 -= v19;
    unint64_t v7 = (int8x16_t *)((char *)v7 + v23);
LABEL_18:
    fd_set v24 = &v7->i8[chacha20_poly1305_final((unsigned int *)v10, v7, (uint64_t)&v36)];
    unint64_t v7 = v34;
    if (v24 != &v34->i8[v12] || (unint64_t)v24 > v8) {
      return 4294960534;
    }
    unint64_t v26 = 0;
    *(_OWORD *)fd_set v24 = v36;
    do
    {
      __int16 v27 = (*((unsigned char *)v11 + v26))++ + 1;
      if ((v27 & 0x100) == 0) {
        break;
      }
      BOOL v22 = v26++ >= 7;
    }
    while (!v22);
    CFTypeID v6 = (unsigned int *)v29;
    uint64_t result = NetSocket_WriteInternal(a1, v29, v24 - v29 + 16, a4);
    if (result) {
      return result;
    }
  }
}

uint64_t _NetSocketTransportWrite(uint64_t a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  void v5[2] = *MEMORY[0x1E4F143B8];
  v5[0] = a2;
  v5[1] = a3;
  return _NetSocketTransportWriteV(a1, v5, 1, a4);
}

uint64_t _NetSocketTransportRead(uint64_t a1, size_t a2, size_t a3, char *__dst, size_t *a5, uint64_t a6, unsigned int a7)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)a1 != 1853058915)
  {
    size_t v15 = 0;
    uint64_t v32 = 4294960556;
    goto LABEL_42;
  }
  if (*(unsigned char *)(a1 + 8))
  {
    size_t v15 = 0;
    uint64_t v32 = 4294960573;
    goto LABEL_42;
  }
  if ((*(_DWORD *)(a1 + 4) & 0x80000000) != 0)
  {
    size_t v15 = 0;
    uint64_t v32 = 4294960551;
    goto LABEL_42;
  }
  unint64_t v9 = __dst;
  size_t v10 = a3;
  uint64_t v11 = *(void *)(a1 + 96);
  uint64_t v12 = *(const void **)(a1 + 64);
  size_t v13 = *(void *)(a1 + 72) - (void)v12;
  if (v13)
  {
    if (v13 >= a3) {
      size_t v14 = a3;
    }
    else {
      size_t v14 = *(void *)(a1 + 72) - (void)v12;
    }
    memcpy(__dst, v12, v14);
    size_t v15 = v14;
    *(void *)(a1 + 64) += v14;
    v10 -= v14;
    if (v14 >= a2 || v10 == 0) {
      goto LABEL_40;
    }
    v9 += v14;
  }
  else
  {
    size_t v15 = 0;
  }
  double v17 = *(const void **)(v11 + 33384);
  size_t v18 = *(void *)(v11 + 33392) - (void)v17;
  if (v18)
  {
    if (v18 >= v10) {
      size_t v19 = v10;
    }
    else {
      size_t v19 = *(void *)(v11 + 33392) - (void)v17;
    }
    size_t v20 = v15;
    memcpy(v9, v17, v19);
    *(void *)(v11 + 33384) += v19;
    size_t v15 = v19 + v20;
    v10 -= v19;
    if (v10) {
      BOOL v21 = v15 >= a2;
    }
    else {
      BOOL v21 = 1;
    }
    if (!v21)
    {
      size_t v38 = (void *)(v11 + 33384);
      unsigned int v22 = a7;
      v9 += v19;
      goto LABEL_25;
    }
LABEL_40:
    uint64_t v32 = 0;
    goto LABEL_42;
  }
  if (!v10) {
    goto LABEL_40;
  }
  size_t v38 = (void *)(v11 + 33384);
  unsigned int v22 = a7;
LABEL_25:
  uint64_t v23 = v11 + 288;
  while (1)
  {
    size_t v41 = v15;
    uint64_t Internal = NetSocket_ReadInternal(a1, 2uLL, 2, (char *)&__dsta, 0, 0, v22);
    if (Internal)
    {
LABEL_45:
      uint64_t v32 = Internal;
      goto LABEL_57;
    }
    unint64_t v25 = __dsta;
    if (__dsta > 0x4000u)
    {
      uint64_t v32 = 4294960553;
      goto LABEL_57;
    }
    uint64_t Internal = NetSocket_ReadInternal(a1, __dsta, __dsta, (char *)(v11 + 296), 0, 0, v22);
    if (Internal) {
      goto LABEL_45;
    }
    uint64_t Internal = NetSocket_ReadInternal(a1, 0x10uLL, 16, v44.i8, 0, 0, v22);
    unsigned int v43 = Internal;
    if (Internal) {
      goto LABEL_45;
    }
    chacha20_poly1305_init_64x64((int32x4_t *)v11, (_DWORD *)(v11 + 256), (_DWORD *)(v11 + 288));
    poly1305_update((unsigned int *)(v11 + 136), (unsigned int *)&__dsta, 2uLL);
    *(void *)(v11 + 232) += 2;
    int64_t v26 = chacha20_poly1305_decrypt(v11, (int8x16_t *)(v11 + 296), v25, (int8x16_t *)(v11 + 296));
    uint64_t v27 = chacha20_poly1305_verify((unsigned int *)v11, (int8x16_t *)(v11 + v26 + 296), &v44, (int *)&v43);
    uint64_t v32 = v43;
    if (v43) {
      break;
    }
    uint64_t v33 = v27 + v26;
    if (v33 != v25)
    {
      if (gLogCategory_NetSocketChaCha20Poly1305 <= 60
        && (gLogCategory_NetSocketChaCha20Poly1305 != -1
         || _LogCategory_Initialize((uint64_t)&gLogCategory_NetSocketChaCha20Poly1305, 0x3Cu)))
      {
        LogPrintF((uint64_t)&gLogCategory_NetSocketChaCha20Poly1305, (uint64_t)"OSStatus _NetSocketTransportRead(NetSocketRef, size_t, size_t, void *, size_t *, int, int32_t)", 0x3Cu, (uint64_t)"### NSTCP verify len failed: %zu vs %zu\n", v28, v29, v30, v31, v33);
      }
      uint64_t v32 = 4294960534;
      goto LABEL_57;
    }
    unint64_t v34 = 0;
    do
    {
      __int16 v35 = (*(unsigned char *)(v23 + v34))++ + 1;
      if ((v35 & 0x100) == 0) {
        break;
      }
      BOOL v21 = v34++ >= 7;
    }
    while (!v21);
    size_t v36 = v10 - v25;
    if (v10 < v25)
    {
      memcpy(v9, (const void *)(v11 + 296), v10);
      uint64_t v32 = 0;
      *size_t v38 = v11 + 296 + v10;
      v38[1] = v11 + 296 + v25;
      size_t v15 = v10 + v41;
      goto LABEL_42;
    }
    memcpy(v9, (const void *)(v11 + 296), v25);
    uint64_t v32 = 0;
    size_t v15 = v41 + v25;
    if (v41 + v25 < a2)
    {
      v9 += v25;
      v10 -= v25;
      if (v36) {
        continue;
      }
    }
    goto LABEL_42;
  }
  if (gLogCategory_NetSocketChaCha20Poly1305 <= 60
    && (gLogCategory_NetSocketChaCha20Poly1305 != -1
     || _LogCategory_Initialize((uint64_t)&gLogCategory_NetSocketChaCha20Poly1305, 0x3Cu)))
  {
    LogPrintF((uint64_t)&gLogCategory_NetSocketChaCha20Poly1305, (uint64_t)"OSStatus _NetSocketTransportRead(NetSocketRef, size_t, size_t, void *, size_t *, int, int32_t)", 0x3Cu, (uint64_t)"### NSTCP verify failed: %#m\n", v28, v29, v30, v31, v32);
  }
LABEL_57:
  size_t v15 = v41;
LABEL_42:
  if (a5) {
    *a5 = v15;
  }
  return v32;
}

void NetSocketGCM_Configure(void *a1, void *a2, __n128 *a3, void *a4, __n128 *a5)
{
  size_t v10 = (_CCCryptor **)a1[12];
  if (!v10)
  {
    uint64_t v11 = (_CCCryptor **)malloc_type_calloc(1uLL, 0x40040uLL, 0x1030040D575C2F1uLL);
    if (!v11) {
      return;
    }
    size_t v10 = v11;
    a1[12] = v11;
  }
  AES_GCM_Final(v10);
  AES_GCM_InitEx(v10, 1u, a2, a3);
  if (!v12)
  {
    AES_GCM_Final(v10 + 3);
    AES_GCM_InitEx(v10 + 3, 0, a4, a5);
    if (!v13)
    {
      a1[3] = _NetSocketGCM_Read;
      a1[4] = _NetSocketGCM_Write;
      a1[5] = _NetSocketGCM_WriteV;
      a1[6] = NetSocket_WriteFileSlow;
      a1[7] = _NetSocketGCM_Free;
    }
  }
}

void _NetSocketGCM_Free(uint64_t a1)
{
  unint64_t v1 = *(_CCCryptor ***)(a1 + 96);
  if (v1)
  {
    AES_GCM_Final(*(_CCCryptor ***)(a1 + 96));
    AES_GCM_Final(v1 + 3);
    free(v1);
    *(void *)(a1 + 96) = 0;
  }
}

uint64_t _NetSocketGCM_WriteV(uint64_t a1, void *a2, int a3, unsigned int a4)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 96);
  unsigned int v24 = 0;
  if (*(_DWORD *)a1 != 1853058915) {
    return 4294960556;
  }
  if (*(unsigned char *)(a1 + 8)) {
    return 4294960573;
  }
  if ((*(_DWORD *)(a1 + 4) & 0x80000000) != 0) {
    return 4294960551;
  }
  unint64_t v7 = a2;
  uint64_t v8 = v4 + 48;
  uint64_t v9 = v4 + 262192;
  size_t v10 = (uint64_t *)(v4 + 24);
  unint64_t v11 = (unint64_t)&a2[2 * a3];
  while ((unint64_t)v7 < v11)
  {
    unsigned int v12 = 0;
    uint64_t v13 = v8;
    unint64_t v14 = (unint64_t)v7;
    while (1)
    {
      unint64_t v15 = *(void *)(v14 + 8);
      if (v9 - v13 < v15) {
        break;
      }
      v12 += v15;
      v13 += v15;
      v14 += 16;
      if (v14 >= v11) {
        goto LABEL_11;
      }
    }
    v12 += v9 - v13;
LABEL_11:
    uint64_t result = AES_GCM_InitMessage(v10, 0);
    if (!result)
    {
      unsigned int v24 = bswap32(v12);
      uint64_t result = CCCryptorGCMAddAAD();
      if (!result)
      {
        double v17 = v7 + 1;
        uint64_t v18 = v8;
        while (1)
        {
          unint64_t v7 = v17 - 1;
          uint64_t v19 = *(v17 - 1);
          uint64_t v20 = v9 - v18;
          uint64_t v21 = *v10;
          if ((unint64_t)(v9 - v18) < *v17) {
            break;
          }
          uint64_t result = MEMORY[0x192FA8A00](v21, v19);
          if (result) {
            return result;
          }
          unsigned int v22 = v17 + 2;
          v18 += *v17;
          BOOL v23 = (unint64_t)(v17 + 1) >= v11;
          v17 += 2;
          if (v23)
          {
            unint64_t v7 = v22 - 1;
            goto LABEL_21;
          }
        }
        uint64_t result = MEMORY[0x192FA8A00](v21, v19, v9 - v18, v18);
        if (result) {
          return result;
        }
        *(v17 - 1) += v20;
        *v17 -= v20;
        uint64_t v18 = v9;
LABEL_21:
        uint64_t result = CCCryptorGCMFinalize();
        if (!result)
        {
          v26.iov_base = &v24;
          v26.iov_len = 4;
          uint64_t v27 = v8;
          uint64_t v28 = v18 - v8;
          uint64_t v29 = &v25;
          uint64_t v30 = 16;
          uint64_t result = NetSocket_WriteVInternal(a1, &v26, 3, a4);
          if (!result) {
            continue;
          }
        }
      }
    }
    return result;
  }
  return 0;
}

uint64_t _NetSocketGCM_Write(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  void v5[2] = *MEMORY[0x1E4F143B8];
  v5[0] = a2;
  v5[1] = a3;
  return _NetSocketGCM_WriteV(a1, v5, 1, a4);
}

uint64_t _NetSocketGCM_Read(uint64_t a1, size_t a2, size_t a3, char *__dst, size_t *a5, uint64_t a6, unsigned int a7)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)a1 != 1853058915)
  {
    size_t v14 = 0;
    uint64_t result = 4294960556;
    goto LABEL_42;
  }
  if (*(unsigned char *)(a1 + 8))
  {
    size_t v14 = 0;
    uint64_t result = 4294960573;
    goto LABEL_42;
  }
  if ((*(_DWORD *)(a1 + 4) & 0x80000000) != 0)
  {
    size_t v14 = 0;
    uint64_t result = 4294960551;
    goto LABEL_42;
  }
  uint64_t v9 = __dst;
  size_t v10 = a3;
  unint64_t v11 = *(void **)(a1 + 96);
  unsigned int v12 = *(const void **)(a1 + 64);
  size_t v13 = *(void *)(a1 + 72) - (void)v12;
  if (v13)
  {
    if (v13 >= a3) {
      size_t v14 = a3;
    }
    else {
      size_t v14 = *(void *)(a1 + 72) - (void)v12;
    }
    memcpy(__dst, v12, v14);
    *(void *)(a1 + 64) += v14;
    v10 -= v14;
    if (v14 >= a2 || v10 == 0) {
      goto LABEL_41;
    }
    v9 += v14;
  }
  else
  {
    size_t v14 = 0;
  }
  double v16 = v11 + 32774;
  double v17 = (const void *)v11[32774];
  size_t v18 = v11[32775] - (void)v17;
  if (v18)
  {
    if (v18 >= v10) {
      size_t v19 = v10;
    }
    else {
      size_t v19 = v11[32775] - (void)v17;
    }
    memcpy(v9, v17, v19);
    *v16 += v19;
    v14 += v19;
    v10 -= v19;
    if (v10) {
      BOOL v20 = v14 >= a2;
    }
    else {
      BOOL v20 = 1;
    }
    if (!v20)
    {
      v9 += v19;
      goto LABEL_24;
    }
LABEL_41:
    uint64_t result = 0;
    goto LABEL_42;
  }
  if (!v10) {
    goto LABEL_41;
  }
LABEL_24:
  unsigned int __dsta = 0;
  uint64_t v21 = v11 + 6;
  while (1)
  {
    uint64_t result = NetSocket_ReadInternal(a1, 4uLL, 4, (char *)&__dsta, 0, 0, a7);
    if (result) {
      break;
    }
    size_t v23 = bswap32(__dsta);
    if (v23 > 0x40000)
    {
      uint64_t result = 4294960553;
      break;
    }
    uint64_t result = NetSocket_ReadInternal(a1, v23, v23, (char *)v11 + 48, 0, 0, a7);
    if (result) {
      break;
    }
    uint64_t result = NetSocket_ReadInternal(a1, 0x10uLL, 16, v30, 0, 0, a7);
    if (result) {
      break;
    }
    uint64_t result = AES_GCM_InitMessage(v11, 0);
    if (result) {
      break;
    }
    uint64_t result = CCCryptorGCMAddAAD();
    if (result) {
      break;
    }
    uint64_t v24 = *v11;
    char v25 = v11 + 6;
    size_t v26 = v10 - v23;
    if (v10 >= v23)
    {
      uint64_t result = MEMORY[0x192FA89F0](v24, v25, v23, v9);
      if (result) {
        break;
      }
      v14 += v23;
    }
    else
    {
      uint64_t result = MEMORY[0x192FA89F0](v24, v25, v10, v9);
      if (result) {
        break;
      }
      uint64_t result = MEMORY[0x192FA89F0](*v11, (char *)v21 + v10, v23 - v10, (char *)v21 + v10);
      if (result)
      {
        v14 += v10;
        break;
      }
      size_t v26 = 0;
      *double v16 = (char *)v21 + v10;
      v11[32775] = (char *)v21 + v23;
      size_t v23 = v10;
      v14 += v10;
    }
    uint64_t result = CCCryptorGCMFinalize();
    if (!result && v14 < a2)
    {
      v9 += v23;
      size_t v10 = v26;
      if (v26) {
        continue;
      }
    }
    break;
  }
LABEL_42:
  if (a5) {
    *a5 = v14;
  }
  return result;
}

uint64_t NetSocketTLS_Configure(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v6 = (CFTypeRef *)a1[12];
  if (!v6)
  {
    unint64_t v7 = (CFTypeRef *)malloc_type_calloc(1uLL, 0x10uLL, 0x10200405F07FB98uLL);
    if (!v7)
    {
      uint64_t v13 = 4294960568;
      goto LABEL_11;
    }
    CFTypeID v6 = v7;
    a1[12] = v7;
  }
  if (*v6) {
    CFRelease(*v6);
  }
  unsigned int v12 = SSLCreateContext(0, (SSLProtocolSide)(a4 == 0), kSSLStreamType);
  CFTypeRef *v6 = v12;
  if (v12)
  {
    uint64_t v13 = SSLSetConnection(v12, a1);
    if (!v13)
    {
      uint64_t v13 = SSLSetIOFuncs((SSLContextRef)*v6, (SSLReadFunc)_TLSRead, (SSLWriteFunc)_TLSWrite);
      if (!v13)
      {
        uint64_t v13 = SSLSetProtocolVersionMin((SSLContextRef)*v6, kTLSProtocol12);
        if (!v13)
        {
          uint64_t v13 = SSLSetPSKSharedSecret();
          if (!v13)
          {
            if (!a4 || (uint64_t v13 = SSLSetPSKIdentity(), !v13))
            {
              unint64_t v15 = (SSLContext *)*v6;
              *(_DWORD *)ciphers = 11403432;
              uint64_t v13 = SSLSetEnabledCiphers(v15, ciphers, 2uLL);
              if (!v13)
              {
                a1[3] = _NetSocketTLSRead;
                a1[4] = _NetSocketTLSWrite;
                a1[5] = NetSocket_WriteVSlow;
                a1[6] = NetSocket_WriteFileSlow;
                a1[7] = _NetSocketTLSFree;
                return v13;
              }
            }
          }
        }
      }
    }
  }
  else
  {
    uint64_t v13 = 4294960596;
  }
LABEL_11:
  if (gLogCategory_NetSocketTLS <= 60
    && (gLogCategory_NetSocketTLS != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_NetSocketTLS, 0x3Cu)))
  {
    LogPrintF((uint64_t)&gLogCategory_NetSocketTLS, (uint64_t)"OSStatus NetSocketTLS_Configure(NetSocketRef, const void *, size_t, const void *, size_t)", 0x3Cu, (uint64_t)"### Configure TLS failed: %#m\n", v8, v9, v10, v11, v13);
  }
  _NetSocketTLSFree((uint64_t)a1);
  return v13;
}

void _NetSocketTLSFree(uint64_t a1)
{
  unint64_t v1 = *(CFTypeRef **)(a1 + 96);
  if (v1)
  {
    if (*v1) {
      CFRelease(*v1);
    }
    free(v1);
    *(void *)(a1 + 96) = 0;
  }
}

uint64_t _NetSocketTLSWrite(uint64_t a1, void *data, size_t dataLength, int a4)
{
  if (*(_DWORD *)a1 != 1853058915) {
    return 4294960556;
  }
  uint64_t v4 = *(void *)(a1 + 96);
  if (!v4) {
    return 4294960551;
  }
  if (*(unsigned char *)(a1 + 8)) {
    return 4294960573;
  }
  if ((*(_DWORD *)(a1 + 4) & 0x80000000) != 0) {
    return 4294960551;
  }
  size_t processed = 0;
  *(_DWORD *)(a1 + 104) = a4;
  if (!*(unsigned char *)(v4 + 8))
  {
    uint64_t result = SSLHandshake(*(SSLContextRef *)v4);
    if (result) {
      return result;
    }
    *(unsigned char *)(v4 + 8) = 1;
    if (gLogCategory_NetSocketTLS <= 20
      && (gLogCategory_NetSocketTLS != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_NetSocketTLS, 0x14u)))
    {
      LogPrintF((uint64_t)&gLogCategory_NetSocketTLS, (uint64_t)"OSStatus _NetSocketTLSWrite(NetSocketRef, const void *, size_t, int32_t)", 0x14u, (uint64_t)"TLS handshake completed for write\n", v8, v9, v10, v11, v16);
    }
  }
  uint64_t result = SSLWrite(*(SSLContextRef *)v4, data, dataLength, &processed);
  if (!result)
  {
    if (gLogCategory_NetSocketTLS > 9) {
      return 0;
    }
    if (gLogCategory_NetSocketTLS != -1
      || (uint64_t result = _LogCategory_Initialize((uint64_t)&gLogCategory_NetSocketTLS, 9u), result))
    {
      LogPrintF((uint64_t)&gLogCategory_NetSocketTLS, (uint64_t)"OSStatus _NetSocketTLSWrite(NetSocketRef, const void *, size_t, int32_t)", 9u, (uint64_t)"TLS wrote %zu bytes\n", v12, v13, v14, v15, processed);
      return 0;
    }
  }
  return result;
}

uint64_t _NetSocketTLSRead(uint64_t a1, int a2, size_t dataLength, void *data, size_t *processed, uint64_t a6, int a7)
{
  if (*(_DWORD *)a1 != 1853058915) {
    return 4294960556;
  }
  uint64_t v7 = *(void *)(a1 + 96);
  if (!v7) {
    return 4294960551;
  }
  if (*(unsigned char *)(a1 + 8)) {
    return 4294960573;
  }
  if ((*(_DWORD *)(a1 + 4) & 0x80000000) != 0) {
    return 4294960551;
  }
  *(_DWORD *)(a1 + 104) = a7;
  if (!*(unsigned char *)(v7 + 8))
  {
    uint64_t result = SSLHandshake(*(SSLContextRef *)v7);
    if (result) {
      return result;
    }
    *(unsigned char *)(v7 + 8) = 1;
    if (gLogCategory_NetSocketTLS <= 20
      && (gLogCategory_NetSocketTLS != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_NetSocketTLS, 0x14u)))
    {
      LogPrintF((uint64_t)&gLogCategory_NetSocketTLS, (uint64_t)"OSStatus _NetSocketTLSRead(NetSocketRef, size_t, size_t, void *, size_t *, int, int32_t)", 0x14u, (uint64_t)"TLS handshake completed for read\n", v12, v13, v14, v15, v20);
    }
  }
  uint64_t result = SSLRead(*(SSLContextRef *)v7, data, dataLength, processed);
  if (!result)
  {
    if (gLogCategory_NetSocketTLS > 9) {
      return 0;
    }
    if (gLogCategory_NetSocketTLS != -1
      || (uint64_t result = _LogCategory_Initialize((uint64_t)&gLogCategory_NetSocketTLS, 9u), result))
    {
      LogPrintF((uint64_t)&gLogCategory_NetSocketTLS, (uint64_t)"OSStatus _NetSocketTLSRead(NetSocketRef, size_t, size_t, void *, size_t *, int, int32_t)", 9u, (uint64_t)"TLS read %zu bytes\n", v16, v17, v18, v19, *processed);
      return 0;
    }
  }
  return result;
}

uint64_t _TLSWrite(uint64_t a1, char *a2, size_t *a3)
{
  LODWORD(result) = NetSocket_WriteInternal(a1, a2, *a3, *(_DWORD *)(a1 + 104));
  if (result == 35) {
    return 4294957493;
  }
  else {
    return result;
  }
}

uint64_t _TLSRead(uint64_t a1, char *__dst, uint64_t *a3)
{
  LODWORD(result) = NetSocket_ReadInternal(a1, 1uLL, *a3, __dst, (size_t *)a3, 0, *(_DWORD *)(a1 + 104));
  if (result == 35) {
    return 4294957493;
  }
  else {
    return result;
  }
}

uint64_t NetTransportChaCha20Poly1305Configure(void *a1, int *a2, long long *a3, void *a4, long long *a5, void *a6)
{
  uint64_t v12 = malloc_type_calloc(1uLL, 0x46C8uLL, 0x103004090BEDF2EuLL);
  if (!v12) {
    return 4294960568;
  }
  *(_DWORD *)uint64_t v12 = -1;
  uint64_t v13 = &gLogCategory_NetTransportChaCha20Poly1305;
  if (a2) {
    uint64_t v13 = a2;
  }
  v12[1] = v13;
  *((_DWORD *)v12 + 4) = 1;
  long long v14 = *a3;
  *((_OWORD *)v12 + 1046) = a3[1];
  *((_OWORD *)v12 + 1045) = v14;
  if (a4) {
    v12[2094] = *a4;
  }
  long long v15 = *a5;
  *((_OWORD *)v12 + 1131) = a5[1];
  *((_OWORD *)v12 + 1130) = v15;
  if (a6) {
    v12[2264] = *a6;
  }
  uint64_t v16 = 0;
  *a1 = v12;
  a1[1] = _NetTransportInitialize;
  a1[2] = _NetTransportFinalize;
  a1[3] = _NetTransportRead;
  a1[4] = _NetTransportWriteV;
  return v16;
}

uint64_t _NetTransportWriteV(const iovec **a1, int *a2, int32x4_t *a3)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = &a3[1047].u32[2];
  uint64_t v5 = (int8x16_t *)((char *)&a3[1047].u64[1] + 2);
  unint64_t v6 = (unint64_t)&a3[1111].u64[1] + 2;
  int v41 = 0;
  uint64_t v7 = *a1;
  unint64_t v8 = (unint64_t)&(*a1)[*a2];
  CFUUIDBytes __s = a3 + 1114;
  uint64_t v9 = a3 + 1130;
  uint64_t v10 = a3 + 1132;
  uint64_t v11 = (unsigned int *)a3[1113].i64[0];
  uint64_t v37 = &a3[1047].u32[2];
  size_t v38 = &a3[1122].u32[2];
  __int16 v35 = a3 + 1130;
  size_t v36 = (int8x16_t *)((char *)&a3[1047].u64[1] + 2);
  while (1)
  {
    while (1)
    {
      uint64_t v12 = (unsigned int *)a3[1113].i64[1];
      int64_t v13 = (char *)v12 - (char *)v11;
      if (v12 == v11) {
        break;
      }
      unsigned int v43 = v11;
      int64_t v44 = (char *)v12 - (char *)v11;
      uint64_t v40 = (const iovec *)&v43;
      int v41 = 1;
      uint64_t result = SocketWriteData(a3->i32[0], &v40, &v41);
      uint64_t v11 = (unsigned int *)(a3[1113].i64[0] + v13 - v44);
      a3[1113].i64[0] = (uint64_t)v11;
      if (result) {
        goto LABEL_33;
      }
    }
    if ((unint64_t)v7 >= v8)
    {
      uint64_t v15 = 0;
      uint64_t v17 = v7;
LABEL_11:
      uint64_t v40 = v17;
      if (!v15)
      {
LABEL_32:
        uint64_t result = 0;
        goto LABEL_33;
      }
    }
    else
    {
      uint64_t v15 = 0;
      uint64_t v16 = v5;
      uint64_t v17 = v7;
      while (1)
      {
        size_t iov_len = v17->iov_len;
        if (v6 - (unint64_t)v16 < iov_len) {
          break;
        }
        v15 += iov_len;
        uint64_t v16 = (int8x16_t *)((char *)v16 + iov_len);
        if ((unint64_t)++v17 >= v8) {
          goto LABEL_11;
        }
      }
      uint64_t v40 = v17;
      v15 += v6 - (void)v16;
      if (!v15) {
        goto LABEL_32;
      }
    }
    chacha20_poly1305_init_64x64(__s, v9, v10);
    *(_WORD *)uint64_t v4 = v15;
    poly1305_update(v38, v4, 2uLL);
    a3[1128].i64[1] += 2;
    if ((unint64_t)v7 >= v8)
    {
      uint64_t v21 = v5;
    }
    else
    {
      unint64_t v19 = v6;
      p_size_t iov_len = &v7->iov_len;
      uint64_t v21 = v5;
      while (1)
      {
        unint64_t v22 = v8;
        uint64_t v7 = (const iovec *)(p_iov_len - 1);
        size_t v23 = (int8x16_t *)*(p_iov_len - 1);
        unint64_t v24 = v19 - (void)v5;
        if (v19 - (unint64_t)v5 < *p_iov_len) {
          break;
        }
        unint64_t v25 = chacha20_poly1305_encrypt((uint64_t)__s, v23, *p_iov_len, v21);
        size_t v26 = p_iov_len + 2;
        uint64_t v5 = (int8x16_t *)((char *)v5 + *p_iov_len);
        uint64_t v21 = (int8x16_t *)((char *)v21 + v25);
        unint64_t v8 = v22;
        BOOL v27 = (unint64_t)(p_iov_len + 1) >= v22;
        p_iov_len += 2;
        if (v27)
        {
          uint64_t v7 = (const iovec *)(v26 - 1);
          goto LABEL_22;
        }
      }
      unint64_t v28 = chacha20_poly1305_encrypt((uint64_t)__s, v23, v19 - (void)v5, v21);
      *(p_iov_len - 1) += v24;
      *p_iov_len -= v24;
      uint64_t v21 = (int8x16_t *)((char *)v21 + v28);
      unint64_t v8 = v22;
LABEL_22:
      uint64_t v5 = v36;
      uint64_t v4 = v37;
      unint64_t v6 = v19;
      uint64_t v9 = v35;
    }
    uint64_t v29 = &v21->i8[chacha20_poly1305_final((unsigned int *)__s, v21, (uint64_t)&v42)];
    if (v29 != &v5->i8[v15] || (unint64_t)v29 > v6) {
      break;
    }
    unint64_t v31 = 0;
    *(_OWORD *)uint64_t v29 = v42;
    do
    {
      __int16 v32 = v10->i8[v31]++ + 1;
      if ((v32 & 0x100) == 0) {
        break;
      }
      BOOL v27 = v31++ >= 7;
    }
    while (!v27);
    a3[1113].i64[0] = (uint64_t)v4;
    a3[1113].i64[1] = (uint64_t)(v29 + 16);
    uint64_t v11 = v4;
  }
  uint64_t result = 4294960534;
LABEL_33:
  *a1 = v7;
  *a2 = (v8 - (unint64_t)v7) >> 4;
  return result;
}

uint64_t _NetTransportRead(char *__dst, size_t a2, void *a3, uint64_t a4)
{
  unint64_t v6 = __dst;
  uint64_t v7 = (uint64_t *)(a4 + 32);
  unint64_t v8 = (int8x16_t *)(a4 + 42);
  uint64_t v9 = (int8x16_t *)(a4 + 16426);
  uint64_t v10 = (int32x4_t *)(a4 + 16464);
  uint64_t v39 = (_DWORD *)(a4 + 16720);
  uint64_t v40 = (unsigned int *)(a4 + 40);
  uint64_t v11 = (_DWORD *)(a4 + 16752);
  uint64_t v12 = *(int8x16_t **)(a4 + 16448);
  size_t v38 = (unsigned int *)(a4 + 16600);
  while (1)
  {
    while (1)
    {
      size_t v13 = *(void *)(a4 + 16456) - (void)v12;
      if (v13)
      {
        if (v13 >= a2) {
          size_t v14 = a2;
        }
        else {
          size_t v14 = *(void *)(a4 + 16456) - (void)v12;
        }
        memcpy(v6, v12, v14);
        uint64_t v12 = (int8x16_t *)(*(void *)(a4 + 16448) + v14);
        *(void *)(a4 + 16448) = v12;
        v6 += v14;
        a2 -= v14;
      }
      if (!a2)
      {
        LODWORD(v28) = 0;
        goto LABEL_26;
      }
      int v15 = *(_DWORD *)(a4 + 16);
      if (v15 == 1)
      {
        unsigned int Data = SocketReadData(*(_DWORD *)a4, (uint64_t)v40, 2uLL, v7);
        if (Data) {
          goto LABEL_37;
        }
        unint64_t v16 = *(unsigned __int16 *)(a4 + 40);
        *(void *)(a4 + 24) = v16;
        if (v16 <= 0x4000)
        {
          *(void *)(a4 + 32) = 0;
          *(_DWORD *)(a4 + 16) = 2;
          goto LABEL_15;
        }
        if (gLogCategory_NetTransportChaCha20Poly1305 <= 60)
        {
          if (gLogCategory_NetTransportChaCha20Poly1305 == -1)
          {
            if (!_LogCategory_Initialize((uint64_t)&gLogCategory_NetTransportChaCha20Poly1305, 0x3Cu)) {
              goto LABEL_52;
            }
            unint64_t v16 = *(void *)(a4 + 24);
          }
          LogPrintF((uint64_t)&gLogCategory_NetTransportChaCha20Poly1305, (uint64_t)"OSStatus _NetTransportRead(void *, size_t, size_t *, void *)", 0x3Cu, (uint64_t)"### NTCP bad size: %zu / %H\n", v18, v19, v20, v21, v16);
        }
LABEL_52:
        LODWORD(v28) = -6743;
        goto LABEL_26;
      }
      if (v15 == 3) {
        break;
      }
      if (v15 == 2)
      {
        unint64_t v16 = *(void *)(a4 + 24);
LABEL_15:
        unsigned int Data = SocketReadData(*(_DWORD *)a4, (uint64_t)v8, v16, v7);
        if (Data) {
          goto LABEL_37;
        }
        *(void *)(a4 + 32) = 0;
        *(_DWORD *)(a4 + 16) = 3;
        break;
      }
    }
    unsigned int Data = SocketReadData(*(_DWORD *)a4, (uint64_t)v9, 0x10uLL, v7);
    unsigned int v41 = Data;
    if (Data)
    {
LABEL_37:
      LODWORD(v28) = Data;
      goto LABEL_26;
    }
    chacha20_poly1305_init_64x64(v10, v39, v11);
    poly1305_update(v38, v40, 2uLL);
    *(void *)(a4 + 16696) += 2;
    int64_t v22 = chacha20_poly1305_decrypt((uint64_t)v10, v8, *(void *)(a4 + 24), v8);
    uint64_t v23 = chacha20_poly1305_verify((unsigned int *)v10, (int8x16_t *)(a4 + v22 + 42), v9, (int *)&v41);
    uint64_t v28 = v41;
    if (v41) {
      break;
    }
    uint64_t v29 = v23 + v22;
    if (v23 + v22 != *(void *)(a4 + 24))
    {
      if (gLogCategory_NetTransportChaCha20Poly1305 <= 60
        && (gLogCategory_NetTransportChaCha20Poly1305 != -1
         || _LogCategory_Initialize((uint64_t)&gLogCategory_NetTransportChaCha20Poly1305, 0x3Cu)))
      {
        LogPrintF((uint64_t)&gLogCategory_NetTransportChaCha20Poly1305, (uint64_t)"OSStatus _NetTransportRead(void *, size_t, size_t *, void *)", 0x3Cu, (uint64_t)"### NTCP verify len failed: %zu vs %zu\n", v24, v25, v26, v27, v29);
      }
      LODWORD(v28) = -6762;
      goto LABEL_26;
    }
    unint64_t v30 = 0;
    do
    {
      __int16 v31 = (*((unsigned char *)v11 + v30))++ + 1;
      if ((v31 & 0x100) == 0) {
        break;
      }
    }
    while (v30++ < 7);
    *(void *)(a4 + 16448) = v8;
    *(void *)(a4 + 16456) = (char *)v8 + v29;
    *(void *)(a4 + 32) = 0;
    *(_DWORD *)(a4 + 16) = 1;
    uint64_t v12 = v8;
  }
  if (gLogCategory_NetTransportChaCha20Poly1305 <= 60
    && (gLogCategory_NetTransportChaCha20Poly1305 != -1
     || _LogCategory_Initialize((uint64_t)&gLogCategory_NetTransportChaCha20Poly1305, 0x3Cu)))
  {
    LogPrintF((uint64_t)&gLogCategory_NetTransportChaCha20Poly1305, (uint64_t)"OSStatus _NetTransportRead(void *, size_t, size_t *, void *)", 0x3Cu, (uint64_t)"### NTCP verify failed: %#m\n", v24, v25, v26, v27, v28);
  }
LABEL_26:
  if (a3) {
    *a3 = v6 - __dst;
  }
  if (v28 != -6753 && v28 != 35 || v6 == __dst) {
    return v28;
  }
  else {
    return 0;
  }
}

void _NetTransportFinalize(void *a1)
{
  if (a1)
  {
    memset_s(a1, 0x46C8uLL, 0, 0x46C8uLL);
    free(a1);
  }
}

uint64_t _NetTransportInitialize(int a1, _DWORD *a2)
{
  *a2 = a1;
  return 0;
}

uint64_t NetTransportGCMConfigure(_CCCryptor ***a1, int *a2, void *a3, __n128 *a4, void *a5, __n128 *a6)
{
  uint64_t v12 = (_CCCryptor **)malloc_type_calloc(1uLL, 0x800A8uLL, 0x1030040F23A3433uLL);
  if (!v12) {
    return 4294960568;
  }
  size_t v13 = v12;
  *(_DWORD *)uint64_t v12 = -1;
  size_t v14 = &gLogCategory_NetTransportGCM;
  if (a2) {
    size_t v14 = a2;
  }
  v12[1] = (_CCCryptor *)v14;
  *((_DWORD *)v12 + 4) = 1;
  int v15 = v12 + 32778;
  AES_GCM_InitEx(v12 + 32778, 1u, a3, a4);
  uint64_t v17 = v16;
  if (v16 || (AES_GCM_InitEx(v13 + 65554, 0, a5, a6), uint64_t v17 = v18, v18))
  {
    AES_GCM_Final(v15);
    AES_GCM_Final(v13 + 65554);
    free(v13);
  }
  else
  {
    *a1 = v13;
    a1[1] = (_CCCryptor **)_NetTransportInitialize_11958;
    a1[2] = (_CCCryptor **)_NetTransportFinalize_11957;
    a1[3] = (_CCCryptor **)_NetTransportRead_11954;
    a1[4] = (_CCCryptor **)_NetTransportWriteV_11953;
  }
  return v17;
}

uint64_t _NetTransportWriteV_11953(const iovec **a1, int *a2, uint64_t a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (char **)(a3 + 524416);
  uint64_t v5 = a3 + 262252;
  uint64_t v6 = a3 + 524396;
  int v30 = 0;
  uint64_t v7 = *a1;
  unint64_t v8 = (unint64_t)&(*a1)[*a2];
  uint64_t v27 = (char *)(a3 + 262248);
  uint64_t v28 = (uint64_t *)(a3 + 524432);
  uint64_t v9 = *(char **)(a3 + 524416);
  uint64_t v26 = a3 + 262252;
  while (1)
  {
    while (1)
    {
      uint64_t v10 = v4[1];
      int64_t v11 = v10 - v9;
      if (v10 == v9) {
        break;
      }
      __int16 v31 = v9;
      int64_t v32 = v10 - v9;
      uint64_t v29 = (const iovec *)&v31;
      int v30 = 1;
      uint64_t result = SocketWriteData(*(_DWORD *)a3, &v29, &v30);
      uint64_t v9 = &(*v4)[v11 - v32];
      *uint64_t v4 = v9;
      if (result) {
        goto LABEL_30;
      }
    }
    if ((unint64_t)v7 >= v8)
    {
      uint64_t v13 = 0;
      int v15 = v7;
LABEL_11:
      uint64_t v29 = v15;
      if (!v13)
      {
LABEL_31:
        uint64_t result = 0;
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = v5;
      int v15 = v7;
      while (1)
      {
        size_t iov_len = v15->iov_len;
        if (v6 - v14 < iov_len) {
          break;
        }
        v13 += iov_len;
        v14 += iov_len;
        if ((unint64_t)++v15 >= v8) {
          goto LABEL_11;
        }
      }
      uint64_t v29 = v15;
      v13 += v6 - v14;
      if (!v13) {
        goto LABEL_31;
      }
    }
    uint64_t result = AES_GCM_InitMessage(v28, 0);
    if (result) {
      goto LABEL_30;
    }
    *(_DWORD *)uint64_t v27 = bswap32(v13);
    uint64_t result = CCCryptorGCMAddAAD();
    if (result) {
      goto LABEL_30;
    }
    if ((unint64_t)v7 < v8) {
      break;
    }
    uint64_t v18 = v5;
LABEL_27:
    uint64_t result = CCCryptorGCMFinalize();
    if (result) {
      goto LABEL_30;
    }
    *uint64_t v4 = v27;
    v4[1] = (char *)(v18 + 16);
    uint64_t v9 = v27;
  }
  p_size_t iov_len = &v7->iov_len;
  uint64_t v18 = v5;
  while (1)
  {
    uint64_t v7 = (const iovec *)(p_iov_len - 1);
    uint64_t v19 = *(p_iov_len - 1);
    uint64_t v20 = v6 - v18;
    uint64_t v21 = *v28;
    if (v6 - v18 < *p_iov_len)
    {
      uint64_t result = MEMORY[0x192FA8A00](v21, v19, v6 - v18, v18);
      if (result) {
        goto LABEL_30;
      }
      *(p_iov_len - 1) += v20;
      *p_iov_len -= v20;
      uint64_t v18 = v6;
      goto LABEL_26;
    }
    uint64_t result = MEMORY[0x192FA8A00](v21, v19);
    if (result) {
      break;
    }
    int64_t v22 = p_iov_len + 2;
    v18 += *p_iov_len;
    BOOL v23 = (unint64_t)(p_iov_len + 1) >= v8;
    p_iov_len += 2;
    if (v23)
    {
      uint64_t v7 = (const iovec *)(v22 - 1);
LABEL_26:
      uint64_t v5 = v26;
      goto LABEL_27;
    }
  }
  uint64_t v7 = (const iovec *)(p_iov_len - 1);
LABEL_30:
  *a1 = v7;
  *a2 = (v8 - (unint64_t)v7) >> 4;
  return result;
}

uint64_t _NetTransportRead_11954(char *__dst, size_t a2, void *a3, uint64_t a4)
{
  uint64_t v6 = __dst;
  uint64_t v7 = (uint64_t *)(a4 + 262208);
  uint64_t v8 = a4 + 40;
  uint64_t v9 = (uint64_t *)(a4 + 32);
  uint64_t v10 = a4 + 44;
  uint64_t v11 = a4 + 262188;
  uint64_t v12 = (void *)(a4 + 262224);
  for (unsigned int i = *(const void **)(a4 + 262208); ; unsigned int i = (const void *)v10)
  {
    do
    {
      size_t v14 = v7[1] - (void)i;
      if (v14)
      {
        if (v14 >= a2) {
          size_t v15 = a2;
        }
        else {
          size_t v15 = v7[1] - (void)i;
        }
        memcpy(v6, i, v15);
        unsigned int i = (const void *)(*v7 + v15);
        *uint64_t v7 = (uint64_t)i;
        v6 += v15;
        a2 -= v15;
      }
      if (!a2)
      {
        LODWORD(v25) = 0;
        goto LABEL_25;
      }
      int v16 = *(_DWORD *)(a4 + 16);
      if (v16 == 1)
      {
        int Data = SocketReadData(*(_DWORD *)a4, v8, 4uLL, v9);
        if (Data) {
          goto LABEL_23;
        }
        unint64_t v17 = bswap32(*(_DWORD *)(a4 + 40));
        *(void *)(a4 + 24) = v17;
        if (v17 > 0x40000)
        {
          LODWORD(v25) = -6743;
          goto LABEL_25;
        }
        *(void *)(a4 + 32) = 0;
        *(_DWORD *)(a4 + 16) = 2;
        goto LABEL_15;
      }
      if (v16 == 3) {
        goto LABEL_17;
      }
    }
    while (v16 != 2);
    unint64_t v17 = *(void *)(a4 + 24);
LABEL_15:
    int Data = SocketReadData(*(_DWORD *)a4, v10, v17, v9);
    if (Data) {
      goto LABEL_23;
    }
    *(void *)(a4 + 32) = 0;
    *(_DWORD *)(a4 + 16) = 3;
LABEL_17:
    int Data = SocketReadData(*(_DWORD *)a4, v11, 0x10uLL, v9);
    if (Data
      || (int Data = AES_GCM_InitMessage(v12, 0)) != 0
      || (int Data = CCCryptorGCMAddAAD()) != 0
      || (int Data = MEMORY[0x192FA89F0](*v12, v10, *(void *)(a4 + 24), v10)) != 0)
    {
LABEL_23:
      LODWORD(v25) = Data;
LABEL_25:
      uint64_t v27 = a3;
      uint64_t v26 = __dst;
      goto LABEL_26;
    }
    uint64_t v19 = CCCryptorGCMFinalize();
    if (v19) {
      break;
    }
    uint64_t v24 = v10 + *(void *)(a4 + 24);
    *uint64_t v7 = v10;
    v7[1] = v24;
    *(void *)(a4 + 32) = 0;
    *(_DWORD *)(a4 + 16) = 1;
  }
  uint64_t v25 = v19;
  uint64_t v27 = a3;
  uint64_t v26 = __dst;
  if (gLogCategory_NetTransportGCM <= 60
    && (gLogCategory_NetTransportGCM != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_NetTransportGCM, 0x3Cu)))
  {
    LogPrintF((uint64_t)&gLogCategory_NetTransportGCM, (uint64_t)"OSStatus _NetTransportRead(void *, size_t, size_t *, void *)", 0x3Cu, (uint64_t)"### GCM verify failed: %#m\n", v20, v21, v22, v23, v25);
  }
LABEL_26:
  if (v27) {
    *uint64_t v27 = v6 - v26;
  }
  if (v25 != -6753 && v25 != 35 || v6 == v26) {
    return v25;
  }
  else {
    return 0;
  }
}

void _NetTransportFinalize_11957(_CCCryptor **a1)
{
  if (a1)
  {
    AES_GCM_Final(a1 + 32778);
    AES_GCM_Final(a1 + 65554);
    free(a1);
  }
}

uint64_t _NetTransportInitialize_11958(int a1, _DWORD *a2)
{
  *a2 = a1;
  return 0;
}

uint64_t NetTransportTLSConfigure(SSLContext ***a1, int a2)
{
  uint64_t v4 = (SSLContext **)malloc_type_calloc(1uLL, 0x60uLL, 0x10F004024CDB9A6uLL);
  if (!v4) {
    return 4294960568;
  }
  uint64_t v5 = v4;
  uint64_t v6 = SSLCreateContext(0, (SSLProtocolSide)(a2 != 0), kSSLStreamType);
  *uint64_t v5 = v6;
  if (v6)
  {
    uint64_t v7 = SSLSetConnection(v6, v5);
    if (!v7)
    {
      uint64_t v7 = SSLSetIOFuncs(*v5, (SSLReadFunc)_SecureTransportRead, (SSLWriteFunc)_SecureTransportWrite);
      if (!v7)
      {
        uint64_t v7 = SSLSetProtocolVersionMin(*v5, kTLSProtocol12);
        if (!v7)
        {
          *a1 = v5;
          a1[1] = (SSLContext **)_NetTransportInitialize_11968;
          a1[2] = (SSLContext **)_NetTransportFinalize_11965;
          a1[3] = (SSLContext **)_NetTransportRead_11967;
          a1[4] = (SSLContext **)_NetTransportWriteV_11966;
          return v7;
        }
      }
    }
  }
  else
  {
    uint64_t v7 = 4294960596;
  }
  _NetTransportFinalize_11965((CFTypeRef *)v5);
  return v7;
}

void _NetTransportFinalize_11965(CFTypeRef *a1)
{
  if (a1)
  {
    unint64_t v2 = (void (*)(CFTypeRef))a1[5];
    if (v2) {
      v2(a1[3]);
    }
    CFTypeRef v3 = a1[4];
    if (v3)
    {
      CFRelease(v3);
      a1[4] = 0;
    }
    if (*a1) {
      CFRelease(*a1);
    }
    free(a1);
  }
}

uint64_t _NetTransportWriteV_11966(const void ***a1, int *a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 12))
  {
    while (1)
    {
LABEL_8:
      if (*a2 < 1) {
        return 0;
      }
      size_t processed = 0;
      LODWORD(result) = SSLWrite(*(SSLContextRef *)a3, **a1, (size_t)(*a1)[1], &processed);
      if (processed) {
        uint64_t result = 0;
      }
      else {
        uint64_t result = result;
      }
      if ((result + 9806) < 2) {
        return 4294960543;
      }
      if (result) {
        break;
      }
      uint64_t result = UpdateIOVec((uint64_t **)a1, a2, processed);
      if (!result) {
        return result;
      }
    }
    if (result != -9803) {
      return result;
    }
  }
  else
  {
    while (1)
    {
      uint64_t result = SSLHandshake(*(SSLContextRef *)a3);
      if (!result)
      {
        *(unsigned char *)(a3 + 12) = 1;
        goto LABEL_8;
      }
      if (result == -9803) {
        break;
      }
      if (result == -9841)
      {
        uint64_t result = _HandlePeerAuth(a3);
        if (!result) {
          continue;
        }
      }
      return result;
    }
  }
  int v7 = *(unsigned __int8 *)(a3 + 14);
  if (*(unsigned char *)(a3 + 13))
  {
    *(unsigned char *)(a3 + 13) = 0;
    if (v7)
    {
      uint64_t result = 4294960530;
LABEL_23:
      *(unsigned char *)(a3 + 14) = 0;
      return result;
    }
    return 4294960522;
  }
  else
  {
    if (*(unsigned char *)(a3 + 14))
    {
      uint64_t result = 4294960521;
      goto LABEL_23;
    }
    return 35;
  }
}

uint64_t _HandlePeerAuth(uint64_t a1)
{
  unint64_t v2 = *(uint64_t (**)(SecTrustRef, void))(a1 + 80);
  if (!v2)
  {
    if (!*(unsigned char *)(a1 + 56)) {
      return 0;
    }
    unint64_t v2 = *(uint64_t (**)(SecTrustRef, void))(a1 + 48);
    if (!v2) {
      return 0;
    }
  }
  SecTrustRef trust = 0;
  uint64_t v3 = SSLCopyPeerTrust(*(SSLContextRef *)a1, &trust);
  if (!v3)
  {
    uint64_t v3 = v2(trust, *(void *)(a1 + 24));
    CFRelease(trust);
    if (!v3) {
      return 0;
    }
  }
  return v3;
}

uint64_t _NetTransportRead_11967(void *data, size_t dataLength, size_t *a3, uint64_t a4)
{
  size_t processed = 0;
  if (!*(unsigned char *)(a4 + 12))
  {
    while (1)
    {
      uint64_t result = SSLHandshake(*(SSLContextRef *)a4);
      if (!result)
      {
        *(unsigned char *)(a4 + 12) = 1;
        goto LABEL_11;
      }
      if (result == -9803) {
        break;
      }
      if (result != -9841)
      {
        size_t v9 = 0;
        goto LABEL_33;
      }
      uint64_t result = _HandlePeerAuth(a4);
      size_t v9 = 0;
      if (result) {
        goto LABEL_33;
      }
    }
    int v10 = *(unsigned __int8 *)(a4 + 14);
    if (*(unsigned char *)(a4 + 13))
    {
      *(unsigned char *)(a4 + 13) = 0;
      if (v10)
      {
        uint64_t result = 4294960530;
LABEL_27:
        size_t v9 = 0;
        goto LABEL_28;
      }
      size_t v9 = 0;
      goto LABEL_30;
    }
    if (*(unsigned char *)(a4 + 14))
    {
      uint64_t result = 4294960521;
      goto LABEL_27;
    }
    size_t v9 = 0;
LABEL_32:
    uint64_t result = 35;
    goto LABEL_33;
  }
LABEL_11:
  OSStatus v11 = SSLRead(*(SSLContextRef *)a4, data, dataLength, &processed);
  size_t v9 = processed;
  if (processed) {
    unsigned int v12 = 0;
  }
  else {
    unsigned int v12 = v11;
  }
  switch(v12)
  {
    case 0xFFFFD9B3:
      uint64_t result = 4294960543;
      break;
    case 0xFFFFD9B5:
      int v13 = *(unsigned __int8 *)(a4 + 14);
      if (*(unsigned char *)(a4 + 13))
      {
        *(unsigned char *)(a4 + 13) = 0;
        if (!v13)
        {
LABEL_30:
          uint64_t result = 4294960522;
          break;
        }
        uint64_t result = 4294960530;
      }
      else
      {
        if (!*(unsigned char *)(a4 + 14)) {
          goto LABEL_32;
        }
        uint64_t result = 4294960521;
      }
LABEL_28:
      *(unsigned char *)(a4 + 14) = 0;
      break;
    case 0xFFFFD9B2:
      uint64_t result = 4294960543;
      break;
    default:
      uint64_t result = v12;
      break;
  }
LABEL_33:
  *a3 = v9;
  return result;
}

uint64_t _NetTransportInitialize_11968(int a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 8) = a1;
  return 0;
}

size_t _SecureTransportWrite(uint64_t a1, void *__buf, size_t *a3)
{
  size_t v4 = *a3;
  if (*a3)
  {
    while (1)
    {
      unint64_t v7 = write(*(_DWORD *)(a1 + 8), __buf, *a3);
      if ((v7 & 0x8000000000000000) == 0) {
        break;
      }
      if (!*__error())
      {
        unint64_t v7 = 0;
        size_t v4 = 4294960596;
        goto LABEL_14;
      }
      size_t v4 = *__error();
      if (v4 != 4)
      {
        if (v4 != 35) {
          goto LABEL_11;
        }
        unint64_t v7 = 0;
        goto LABEL_9;
      }
    }
    if (v7)
    {
      if (v7 < *a3)
      {
LABEL_9:
        *(unsigned char *)(a1 + 14) = 1;
        size_t v4 = 4294957493;
        goto LABEL_14;
      }
      size_t v4 = 0;
    }
    else
    {
      size_t v4 = 4294957491;
    }
  }
  else
  {
LABEL_11:
    unint64_t v7 = 0;
  }
LABEL_14:
  *a3 = v7;
  return v4;
}

uint64_t _SecureTransportRead(uint64_t a1, void *a2, size_t *a3)
{
  do
  {
    unint64_t v6 = read(*(_DWORD *)(a1 + 8), a2, *a3);
    if ((v6 & 0x8000000000000000) == 0)
    {
      if (v6)
      {
        if (v6 < *a3) {
          goto LABEL_8;
        }
        uint64_t v7 = 0;
      }
      else
      {
        uint64_t v7 = 4294957491;
      }
      goto LABEL_13;
    }
    if (!*__error())
    {
      unint64_t v6 = 0;
      uint64_t v7 = 4294960596;
      goto LABEL_13;
    }
    uint64_t v7 = *__error();
  }
  while (v7 == 4);
  if (v7 == 35)
  {
    unint64_t v6 = 0;
LABEL_8:
    *(unsigned char *)(a1 + 13) = 1;
    uint64_t v7 = 4294957493;
    goto LABEL_13;
  }
  unint64_t v6 = 0;
LABEL_13:
  *a3 = v6;
  return v7;
}

uint64_t NetTransportTLSConfigureEx(void *a1, void *a2)
{
  if (*a2 > 0x50uLL) {
    return 4294960553;
  }
  uint64_t v3 = malloc_type_calloc(1uLL, 0x60uLL, 0x10F004024CDB9A6uLL);
  if (!v3) {
    return 4294960568;
  }
  size_t v4 = v3;
  __memcpy_chk();
  uint64_t v5 = SSLCreateContext(0, (SSLProtocolSide)(*((unsigned char *)v4 + 56) != 0), kSSLStreamType);
  *(void *)size_t v4 = v5;
  if (!v5)
  {
    uint64_t v6 = 4294960596;
    goto LABEL_5;
  }
  uint64_t v6 = SSLSetConnection(v5, v4);
  if (v6) {
    goto LABEL_5;
  }
  CFArrayRef v8 = (const __CFArray *)*((void *)v4 + 11);
  if (v8)
  {
    uint64_t v6 = SSLSetCertificate(*(SSLContextRef *)v4, v8);
    if (v6) {
      goto LABEL_5;
    }
  }
  uint64_t v6 = SSLSetIOFuncs(*(SSLContextRef *)v4, (SSLReadFunc)_SecureTransportRead, (SSLWriteFunc)_SecureTransportWrite);
  if (v6) {
    goto LABEL_5;
  }
  SSLProtocol v9 = *((_DWORD *)v4 + 15);
  if (v9)
  {
    uint64_t v6 = SSLSetProtocolVersionMin(*(SSLContextRef *)v4, v9);
    if (v6) {
      goto LABEL_5;
    }
  }
  int v10 = (const char *)*((void *)v4 + 8);
  if (v10)
  {
    size_t v11 = *((void *)v4 + 9);
    if (v11 == -1) {
      size_t v11 = strlen(*((const char **)v4 + 8));
    }
    uint64_t v6 = SSLSetPeerDomainName(*(SSLContextRef *)v4, v10, v11);
    if (v6) {
      goto LABEL_5;
    }
  }
  if (!*((unsigned char *)v4 + 56)) {
    goto LABEL_31;
  }
  if (!*((void *)v4 + 6) && !*((void *)v4 + 10)) {
    goto LABEL_23;
  }
  uint64_t v6 = SSLSetSessionOption(*(SSLContextRef *)v4, kSSLSessionOptionBreakOnServerAuth, 1u);
  if (v6) {
    goto LABEL_5;
  }
  if (!*((unsigned char *)v4 + 56))
  {
LABEL_31:
    if (!*((void *)v4 + 10)) {
      goto LABEL_23;
    }
    uint64_t v6 = SSLSetSessionOption(*(SSLContextRef *)v4, kSSLSessionOptionBreakOnClientAuth, 1u);
    if (!v6) {
      goto LABEL_23;
    }
LABEL_5:
    _NetTransportFinalize_11965((CFTypeRef *)v4);
    return v6;
  }
LABEL_23:
  *a1 = v4;
  a1[1] = _NetTransportInitialize_11968;
  a1[2] = _NetTransportFinalize_11965;
  a1[3] = _NetTransportRead_11967;
  a1[4] = _NetTransportWriteV_11966;
  unsigned int v12 = (const void *)*((void *)v4 + 4);
  if (v12) {
    CFRetain(v12);
  }
  uint64_t v6 = 0;
  *((void *)v4 + 8) = 0;
  *((void *)v4 + 9) = 0;
  return v6;
}

uint64_t NetTransportTLSPSKConfigure(SSLContext ***a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  SSLProtocol v9 = (SSLContext **)malloc_type_calloc(1uLL, 0x60uLL, 0x10F004024CDB9A6uLL);
  if (!v9) {
    return 4294960568;
  }
  int v10 = v9;
  size_t v11 = SSLCreateContext(0, (SSLProtocolSide)(a6 != 0), kSSLStreamType);
  *int v10 = v11;
  if (v11)
  {
    uint64_t v12 = SSLSetConnection(v11, v10);
    if (!v12)
    {
      uint64_t v12 = SSLSetIOFuncs(*v10, (SSLReadFunc)_SecureTransportRead, (SSLWriteFunc)_SecureTransportWrite);
      if (!v12)
      {
        uint64_t v12 = SSLSetProtocolVersionMin(*v10, kTLSProtocol12);
        if (!v12)
        {
          uint64_t v12 = SSLSetPSKSharedSecret();
          if (!v12)
          {
            if (!a4 || (uint64_t v12 = SSLSetPSKIdentity(), !v12))
            {
              size_t v14 = *v10;
              *(_DWORD *)ciphers = 11403432;
              uint64_t v12 = SSLSetEnabledCiphers(v14, ciphers, 2uLL);
              if (!v12)
              {
                *a1 = v10;
                a1[1] = (SSLContext **)_NetTransportInitialize_11968;
                a1[2] = (SSLContext **)_NetTransportFinalize_11965;
                a1[3] = (SSLContext **)_NetTransportRead_11967;
                a1[4] = (SSLContext **)_NetTransportWriteV_11966;
                return v12;
              }
            }
          }
        }
      }
    }
  }
  else
  {
    uint64_t v12 = 4294960596;
  }
  _NetTransportFinalize_11965((CFTypeRef *)v10);
  return v12;
}

uint64_t CreateUsableInterfaceList(const char *a1, int a2, void *a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  int v6 = socket(30, 2, 0);
  if (v6 < 0 && *__error()) {
    __error();
  }
  if (getifaddrs(&v26))
  {
    if (!*__error())
    {
      uint64_t v7 = 4294960596;
      goto LABEL_56;
    }
    uint64_t v7 = *__error();
    if (v7) {
      goto LABEL_56;
    }
  }
  CFArrayRef v8 = v26;
  if (v26)
  {
    SSLProtocol v9 = &v25;
    while (1)
    {
      if (v8->ifa_flags)
      {
        ifa_addr = v8->ifa_addr;
        if (ifa_addr)
        {
          ifa_name = v8->ifa_name;
          if (ifa_name)
          {
            int sa_family = ifa_addr->sa_family;
            BOOL v13 = sa_family == 30 || sa_family == 2;
            if (v13
              && (!a2 || sa_family == a2)
              && (sa_family != 2 || *(_DWORD *)&ifa_addr->sa_data[2])
              && (!a1 || !strcmp(ifa_name, a1)))
            {
              if (v6 < 0 || sa_family != 30)
              {
LABEL_33:
                if (a3)
                {
                  unint64_t v17 = malloc_type_calloc(1uLL, 0x38uLL, 0x10B0040815C8216uLL);
                  if (!v17) {
                    goto LABEL_53;
                  }
                  uint64_t v18 = v17;
                  *SSLProtocol v9 = v17;
                  uint64_t v19 = strdup(v8->ifa_name);
                  v18[1] = v19;
                  if (!v19) {
                    goto LABEL_53;
                  }
                  *((_DWORD *)v18 + 4) = v8->ifa_flags;
                  size_t v20 = sa_family == 2 ? 16 : 28;
                  uint64_t v21 = malloc_type_malloc(v20, 0x2E575C6CuLL);
                  v18[3] = v21;
                  if (!v21)
                  {
LABEL_53:
                    uint64_t v7 = 4294960568;
                    uint64_t v23 = v25;
                    goto LABEL_54;
                  }
                  memcpy(v21, v8->ifa_addr, v20);
                  if (sa_family == 30)
                  {
                    uint64_t v22 = v18[3];
                    if (*(unsigned __int8 *)(v22 + 8) == 254 && (*(unsigned char *)(v22 + 9) & 0xC0) == 0x80)
                    {
                      if (!*(_DWORD *)(v22 + 24)) {
                        *(_DWORD *)(v22 + 24) = __rev16(*(unsigned __int16 *)(v22 + 10));
                      }
                      *(_WORD *)(v22 + 10) = 0;
                    }
                  }
                  SSLProtocol v9 = (void **)v18;
                }
              }
              else
              {
                for (int i = 49; ; --i)
                {
                  memset(v27, 0, sizeof(v27));
                  __strlcpy_chk();
                  size_t v15 = v8->ifa_addr;
                  long long v16 = *(_OWORD *)&v15->sa_data[10];
                  v27[1] = *v15;
                  *(_OWORD *)((char *)&v27[1] + 12) = v16;
                  if (ioctl(v6, 0xC1206949uLL, v27) == -1 && (!*__error() || *__error())) {
                    break;
                  }
                  if ((v27[1] & 0x9C) != 0) {
                    break;
                  }
                  if ((v27[1] & 2) == 0) {
                    goto LABEL_33;
                  }
                  if (!i) {
                    break;
                  }
                  usleep(0x186A0u);
                }
              }
            }
          }
        }
      }
      CFArrayRef v8 = v8->ifa_next;
      if (!v8)
      {
        uint64_t v23 = v25;
        goto LABEL_51;
      }
    }
  }
  uint64_t v23 = 0;
LABEL_51:
  uint64_t v7 = 0;
  if (a3)
  {
    *a3 = v23;
  }
  else
  {
LABEL_54:
    if (v23) {
      ReleaseUsableInterfaceList(v23);
    }
  }
LABEL_56:
  if (v26) {
    MEMORY[0x192FAA4D0]();
  }
  if ((v6 & 0x80000000) == 0) {
    close(v6);
  }
  return v7;
}

void ReleaseUsableInterfaceList(void *a1)
{
  if (a1)
  {
    unint64_t v1 = a1;
    do
    {
      uint64_t v3 = (void *)*v1;
      unint64_t v2 = (void *)v1[1];
      if (v2)
      {
        free(v2);
        v1[1] = 0;
      }
      size_t v4 = (void *)v1[3];
      if (v4)
      {
        free(v4);
        v1[3] = 0;
      }
      uint64_t v5 = (void *)v1[4];
      if (v5)
      {
        free(v5);
        v1[4] = 0;
      }
      int v6 = (void *)v1[5];
      if (v6)
      {
        free(v6);
        v1[5] = 0;
      }
      uint64_t v7 = (void *)v1[6];
      if (v7) {
        free(v7);
      }
      free(v1);
      unint64_t v1 = v3;
    }
    while (v3);
  }
}

_DWORD *CUDispatchSocketAllocate(int *a1)
{
  uint64_t result = malloc_type_calloc(1uLL, 0x38uLL, 0x10E00406CD77940uLL);
  if (result)
  {
    int v3 = 0;
    *uint64_t result = -1;
    if (!a1) {
      return result;
    }
  }
  else
  {
    int v3 = -6728;
    if (!a1) {
      return result;
    }
  }
  *a1 = v3;
  return result;
}

void CUDispatchSocketCancelAll(void *a1)
{
  if (a1)
  {
    unint64_t v2 = a1[1];
    if (v2)
    {
      dispatch_source_cancel(v2);
      if (*((unsigned char *)a1 + 16))
      {
        *((unsigned char *)a1 + 16) = 0;
        dispatch_resume((dispatch_object_t)a1[1]);
      }
    }
    int v3 = a1[3];
    if (v3)
    {
      dispatch_source_cancel(v3);
      if (*((unsigned char *)a1 + 32))
      {
        *((unsigned char *)a1 + 32) = 0;
        dispatch_resume((dispatch_object_t)a1[3]);
      }
    }
    _CUDispatchSocketCleanupIfDone(a1);
  }
}

void _CUDispatchSocketCleanupIfDone(void *a1)
{
  if (!a1[1] && !a1[3])
  {
    int v2 = *(_DWORD *)a1;
    if ((v2 & 0x80000000) == 0)
    {
      if (close(v2) && *__error()) {
        __error();
      }
      *(_DWORD *)a1 = -1;
    }
    int v3 = (void (*)(void *))a1[6];
    if (v3) {
      v3(a1);
    }
    a1[6] = 0;
    size_t v4 = (const void *)a1[5];
    if (v4) {
      CFRelease(v4);
    }
    free(a1);
  }
}

void CUDispatchSocketReadCanceled(void *a1)
{
  if (a1)
  {
    int v2 = a1[1];
    if (v2)
    {
      dispatch_release(v2);
      a1[1] = 0;
    }
    _CUDispatchSocketCleanupIfDone(a1);
  }
}

void CUDispatchSocketWriteCanceled(void *a1)
{
  if (a1)
  {
    int v2 = a1[3];
    if (v2)
    {
      dispatch_release(v2);
      a1[3] = 0;
    }
    _CUDispatchSocketCleanupIfDone(a1);
  }
}

__CFArray *CUCopyMACAddresses(uint64_t a1, int *a2)
{
  SSLProtocol v9 = 0;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
    int v4 = -6728;
    if (!a2) {
      return Mutable;
    }
    goto LABEL_20;
  }
  if (!getifaddrs(&v9)) {
    goto LABEL_5;
  }
  if (!*__error())
  {
    int v4 = -6700;
    goto LABEL_14;
  }
  int v4 = *__error();
  if (!v4)
  {
LABEL_5:
    uint64_t v5 = v9;
    if (!v9)
    {
      int v4 = 0;
      goto LABEL_19;
    }
    while (1)
    {
      if (v5->ifa_flags)
      {
        ifa_addr = v5->ifa_addr;
        if (ifa_addr)
        {
          if (ifa_addr->sa_family == 18 && ifa_addr->sa_data[4] == 6)
          {
            int appended = CFArrayAppendBytes(Mutable, (const UInt8 *)&ifa_addr->sa_data[ifa_addr->sa_data[3] + 6], 6);
            if (appended) {
              break;
            }
          }
        }
      }
      uint64_t v5 = v5->ifa_next;
      if (!v5)
      {
        int v4 = 0;
        goto LABEL_15;
      }
    }
    int v4 = appended;
  }
LABEL_14:
  CFRelease(Mutable);
  CFMutableArrayRef Mutable = 0;
LABEL_15:
  if (v9)
  {
    MEMORY[0x192FAA4D0]();
    if (!a2) {
      return Mutable;
    }
    goto LABEL_20;
  }
LABEL_19:
  if (a2) {
LABEL_20:
  }
    *a2 = v4;
  return Mutable;
}

uint64_t CUGetInterfaceAddresses(char a1, const char *a2, sockaddr *a3, uint64_t a4, uint64_t a5)
{
  BOOL v10 = a3 != 0;
  BOOL v11 = a4 != 0;
  BOOL v12 = a5 != 0;
  uint64_t v23 = 0;
  if (getifaddrs(&v23))
  {
    if (!*__error())
    {
      uint64_t v13 = 4294960596;
      goto LABEL_43;
    }
    uint64_t v13 = *__error();
    if (v13) {
      goto LABEL_43;
    }
  }
  for (int i = v23; i; int i = i->ifa_next)
  {
    if ((i->ifa_flags & 1) == 0) {
      continue;
    }
    ifa_addr = i->ifa_addr;
    if (!ifa_addr) {
      continue;
    }
    ifa_name = i->ifa_name;
    if (!ifa_name || strcmp(ifa_name, a2)) {
      continue;
    }
    int sa_family = ifa_addr->sa_family;
    switch(sa_family)
    {
      case 30:
        if (!v11)
        {
          BOOL v11 = 0;
          continue;
        }
        if ((a1 & 1) != 0 && (ifa_addr->sa_data[6] != 254 || (ifa_addr->sa_data[7] & 0xC0) != 0x80))
        {
          BOOL v11 = 1;
          continue;
        }
        BOOL v11 = 0;
        sockaddr v18 = *ifa_addr;
        uint64_t v19 = *(void *)&ifa_addr[1].sa_len;
        *(_DWORD *)(a4 + 24) = *(_DWORD *)&ifa_addr[1].sa_data[6];
        *(void *)(a4 + 16) = v19;
        *(sockaddr *)a4 = v18;
        break;
      case 18:
        if (!v12)
        {
          BOOL v12 = 0;
          continue;
        }
        if (ifa_addr->sa_data[4] != 6)
        {
          BOOL v12 = 1;
          continue;
        }
        BOOL v12 = 0;
        size_t v20 = &ifa_addr->sa_len + ifa_addr->sa_data[3];
        int v21 = *((_DWORD *)v20 + 2);
        *(_WORD *)(a5 + 4) = *((_WORD *)v20 + 6);
        *(_DWORD *)a5 = v21;
        break;
      case 2:
        if (!v10)
        {
          BOOL v10 = 0;
          continue;
        }
        if ((a1 & 2) != 0
          && ifa_addr->sa_data[2] == 169
          && ifa_addr->sa_data[3] == 254)
        {
          BOOL v10 = 1;
          continue;
        }
        BOOL v10 = 0;
        *a3 = *ifa_addr;
        break;
    }
    if (!v10 && !v11 && !v12)
    {
      BOOL v12 = 0;
      BOOL v11 = 0;
LABEL_40:
      if (v11 || v12) {
        uint64_t v13 = 4294960569;
      }
      else {
        uint64_t v13 = 0;
      }
      goto LABEL_43;
    }
  }
  if (!v10) {
    goto LABEL_40;
  }
  uint64_t v13 = 4294960569;
LABEL_43:
  if (v23) {
    MEMORY[0x192FAA4D0]();
  }
  return v13;
}

long long *SockAddrCopy(long long *result, uint64_t a2)
{
  int v2 = *((unsigned __int8 *)result + 1);
  if (*((unsigned char *)result + 1))
  {
    if (v2 == 30)
    {
      long long v3 = *result;
      uint64_t v4 = *((void *)result + 2);
      *(_DWORD *)(a2 + 24) = *((_DWORD *)result + 6);
      *(void *)(a2 + 16) = v4;
      goto LABEL_8;
    }
    if (v2 == 2)
    {
      long long v3 = *result;
LABEL_8:
      *(_OWORD *)a2 = v3;
    }
  }
  else
  {
    *(unsigned char *)(a2 + 1) = 0;
  }
  return result;
}

uint64_t DrainUDPSocket(int a1, int a2, _DWORD *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  v14.time_t tv_sec = 0;
  *(void *)&v14.tv_useCC_SHA1_CTX c = 0;
  *(void *)&v11.sa_len = 0;
  *(void *)&v11.sa_data[6] = 0;
  int v13 = 0;
  uint64_t v12 = 0;
  socklen_t v10 = 0;
  uint64_t v5 = mach_absolute_time();
  int v6 = 0;
  uint64_t v7 = MillisecondsToUpTicks(a2) + v5;
  memset(&v15, 0, sizeof(v15));
  while (1)
  {
    if (__darwin_check_fd_set_overflow(a1, &v15, 0)) {
      v15.fds_bits[(unint64_t)a1 >> 5] |= 1 << a1;
    }
    v14.time_t tv_sec = a2 / 1000;
    v14.tv_useCC_SHA1_CTX c = 1000 * (a2 % 1000);
    uint64_t result = select(a1 + 1, &v15, 0, 0, &v14);
    if (result == 1) {
      goto LABEL_8;
    }
    if (!result) {
      goto LABEL_14;
    }
    if (!*__error()) {
      break;
    }
    uint64_t result = *__error();
    if (result) {
      goto LABEL_14;
    }
LABEL_8:
    socklen_t v10 = 28;
    if (recvfrom(a1, v16, 0x20uLL, 0, &v11, &v10) < 0)
    {
      if (!*__error()) {
        break;
      }
      uint64_t result = *__error();
      if (result) {
        goto LABEL_14;
      }
    }
    ++v6;
    if (mach_absolute_time() >= v7)
    {
      uint64_t result = 0;
      goto LABEL_14;
    }
  }
  uint64_t result = 4294960596;
LABEL_14:
  if (a3) {
    *a3 = v6;
  }
  return result;
}

uint64_t GetPrimaryMACAddress(char *a1, int *a2)
{
  if (a1) {
    long long v3 = a1;
  }
  else {
    long long v3 = &v12;
  }
  *((_WORD *)v3 + 2) = 0;
  *(_DWORD *)long long v3 = 0;
  int v13 = 0;
  GestaltGetData(@"EthernetMacAddress", 0, v3, 6uLL, 0, &v13);
  int v4 = v13;
  if (v13)
  {
    GestaltGetData(@"WifiAddressData", 0, v3, 6uLL, 0, &v13);
    int v4 = v13;
    if (v13)
    {
      GestaltGetData(@"WifiAddress", 0, v3, 6uLL, 0, &v13);
      int v4 = v13;
    }
  }
  uint64_t v5 = *v3;
  uint64_t v6 = v3[1];
  uint64_t v7 = v3[2];
  uint64_t v8 = v3[3];
  uint64_t v9 = v3[4];
  uint64_t v10 = v3[5];
  if (a2) {
    *a2 = v4;
  }
  return (v5 << 40) | (v6 << 32) | (v7 << 24) | (v8 << 16) | (v9 << 8) | v10;
}

uint64_t OpenSelfConnectedLoopbackSocket(int *a1)
{
  int v8 = 0;
  uint64_t v7 = 0;
  socklen_t v5 = 0;
  int v2 = socket(2, 2, 17);
  if ((v2 & 0x80000000) == 0) {
    goto LABEL_2;
  }
  if (!*__error()) {
    return 4294960596;
  }
  uint64_t v3 = *__error();
  if (!v3)
  {
LABEL_2:
    *(_DWORD *)&v6.sa_len = 512;
    *(void *)&v6.sa_data[6] = 0;
    *(_DWORD *)&v6.sa_data[2] = 16777343;
    if (bind(v2, &v6, 0x10u))
    {
      if (!*__error()) {
        goto LABEL_15;
      }
      uint64_t v3 = *__error();
      if (v3) {
        goto LABEL_16;
      }
    }
    socklen_t v5 = 28;
    if (!getsockname(v2, &v6, &v5)) {
      goto LABEL_8;
    }
    if (*__error())
    {
      uint64_t v3 = *__error();
      if (!v3)
      {
LABEL_8:
        if (!connect(v2, &v6, v5))
        {
LABEL_11:
          uint64_t v3 = 0;
          *a1 = v2;
          return v3;
        }
        if (*__error())
        {
          uint64_t v3 = *__error();
          if (!v3) {
            goto LABEL_11;
          }
          goto LABEL_16;
        }
        goto LABEL_15;
      }
LABEL_16:
      if ((v2 & 0x80000000) == 0 && close(v2) && *__error()) {
        __error();
      }
      return v3;
    }
LABEL_15:
    uint64_t v3 = 4294960596;
    goto LABEL_16;
  }
  return v3;
}

uint64_t SendSelfConnectedLoopbackMessage(int a1, const void *a2, size_t a3)
{
  *(void *)&v10.sa_len = 0;
  *(void *)&v10.sa_data[6] = 0;
  int v12 = 0;
  uint64_t v11 = 0;
  socklen_t v9 = 28;
  if (getsockname(a1, &v10, &v9))
  {
    if (!*__error()) {
      return 4294960596;
    }
    uint64_t result = *__error();
    if (result) {
      return result;
    }
  }
  ssize_t v7 = sendto(a1, a2, a3, 0, &v10, 0x10u);
  uint64_t result = 0;
  if (v7 == a3) {
    return result;
  }
  if (!*__error()) {
    return 4294960596;
  }
  uint64_t result = *__error();
  if (result == 56)
  {
    ssize_t v8 = send(a1, a2, a3, 0);
    uint64_t result = 0;
    if (v8 != a3)
    {
      if (*__error()) {
        return *__error();
      }
      return 4294960596;
    }
  }
  return result;
}

uint64_t ServerSocketPairOpen(int a1, int a2, int a3, int *a4, int a5, int *a6, int *a7)
{
  int v17 = -1;
  int v18 = a3;
  int v16 = -1;
  uint64_t v13 = ServerSocketOpenEx2(2, a1, a2, 0, 0, a3, (unsigned int *)&v18, a5, 0, &v17);
  int v14 = ServerSocketOpenEx2(30, a1, a2, 0, 0, v18, (unsigned int *)&v18, a5, 0, &v16);
  if (v13 && v14)
  {
    if ((v17 & 0x80000000) == 0 && close(v17) && *__error()) {
      __error();
    }
    if ((v16 & 0x80000000) == 0 && close(v16) && *__error()) {
      __error();
    }
  }
  else
  {
    if (a4) {
      *a4 = v18;
    }
    uint64_t v13 = 0;
    *a6 = v17;
    *a7 = v16;
  }
  return v13;
}

uint64_t ServerSocketOpenEx2(int a1, int a2, int a3, long long *a4, int a5, int a6, unsigned int *a7, int a8, char a9, int *a10)
{
  uint64_t v31 = 0;
  memset(v30, 0, sizeof(v30));
  socklen_t v29 = 0;
  if (a6 >= 0) {
    unsigned int v17 = a6;
  }
  else {
    unsigned int v17 = -a6;
  }
  int v18 = socket(a1, a2, a3);
  if ((v18 & 0x80000000) == 0) {
    goto LABEL_7;
  }
  if (!*__error()) {
    return 4294960596;
  }
  uint64_t v19 = *__error();
  if (!v19)
  {
LABEL_7:
    int v28 = 1;
    setsockopt(v18, 0xFFFF, 4130, &v28, 4u);
    uint64_t v19 = SocketSetNonBlocking(v18, 1);
    if (v19)
    {
LABEL_8:
      if ((v18 & 0x80000000) == 0 && close(v18) && *__error()) {
        __error();
      }
      return v19;
    }
    SocketSetBufferSize(v18, 4098, a8);
    HIDWORD(v31) = 1;
    if (a2 == 2) {
      int v20 = 512;
    }
    else {
      int v20 = 4;
    }
    if (setsockopt(v18, 0xFFFF, v20, (char *)&v31 + 4, 4u))
    {
      if (!*__error()) {
        goto LABEL_66;
      }
      uint64_t v19 = *__error();
      if (v19) {
        goto LABEL_8;
      }
    }
    if (a1 == 30)
    {
      if ((a9 & 2) == 0)
      {
        HIDWORD(v31) = 1;
        if (setsockopt(v18, 41, 27, (char *)&v31 + 4, 4u))
        {
          if (!*__error()) {
            goto LABEL_66;
          }
          uint64_t v19 = *__error();
          if (v19) {
            goto LABEL_8;
          }
        }
      }
      *(void *)&v30[12] = 0;
      *(_WORD *)&v30[10] = 0;
      *(_DWORD *)&v30[20] = 0;
      *(_WORD *)int v30 = 7708;
      *(void *)&v30[2] = bswap32(v17) >> 16;
      if (a4) {
        long long v22 = *a4;
      }
      else {
        long long v22 = *MEMORY[0x1E4F148B8];
      }
      *(_OWORD *)&v30[8] = v22;
      LODWORD(v31) = a5;
      if (!bind(v18, (const sockaddr *)v30, 0x1Cu)) {
        goto LABEL_50;
      }
      if (*__error()) {
        uint64_t v19 = *__error();
      }
      else {
        uint64_t v19 = 4294960596;
      }
      if ((a6 & 0x80000000) == 0 || !v19) {
        goto LABEL_49;
      }
      *(_WORD *)&v30[2] = 0;
      int v23 = v18;
      socklen_t v24 = 28;
    }
    else
    {
      if (a1 != 2)
      {
        uint64_t v19 = 4294960561;
        goto LABEL_8;
      }
      *(void *)&v30[8] = 0;
      *(_WORD *)int v30 = 528;
      *(_WORD *)&v30[2] = bswap32(v17) >> 16;
      if (a4) {
        int v21 = *(_DWORD *)a4;
      }
      else {
        int v21 = 0;
      }
      *(_DWORD *)&v30[4] = v21;
      if (!bind(v18, (const sockaddr *)v30, 0x10u)) {
        goto LABEL_50;
      }
      if (*__error()) {
        uint64_t v19 = *__error();
      }
      else {
        uint64_t v19 = 4294960596;
      }
      if ((a6 & 0x80000000) == 0 || !v19) {
        goto LABEL_49;
      }
      *(_WORD *)&v30[2] = 0;
      int v23 = v18;
      socklen_t v24 = 16;
    }
    if (!bind(v23, (const sockaddr *)v30, v24))
    {
LABEL_50:
      if (a2 == 1 && listen(v18, 128) && (!*__error() || *__error()) && listen(v18, 5))
      {
        if (!*__error()) {
          goto LABEL_66;
        }
        uint64_t v19 = *__error();
        if (v19) {
          goto LABEL_8;
        }
      }
      if (a9) {
        SocketSetP2P(v18, 1);
      }
      if (!a7) {
        goto LABEL_70;
      }
      socklen_t v29 = 28;
      if (!getsockname(v18, (sockaddr *)v30, &v29))
      {
LABEL_63:
        if (v30[1] == 30)
        {
          uint64_t v25 = a7;
        }
        else
        {
          uint64_t v25 = a7;
          if (v30[1] != 2)
          {
            unsigned int v26 = -1;
LABEL_69:
            *uint64_t v25 = v26;
LABEL_70:
            uint64_t v19 = 0;
            *a10 = v18;
            return v19;
          }
        }
        unsigned int v26 = bswap32(*(unsigned __int16 *)&v30[2]) >> 16;
        goto LABEL_69;
      }
      if (*__error())
      {
        uint64_t v19 = *__error();
        if (v19) {
          goto LABEL_8;
        }
        goto LABEL_63;
      }
LABEL_66:
      uint64_t v19 = 4294960596;
      goto LABEL_8;
    }
    if (!*__error()) {
      goto LABEL_66;
    }
    uint64_t v19 = *__error();
LABEL_49:
    if (v19) {
      goto LABEL_8;
    }
    goto LABEL_50;
  }
  return v19;
}

uint64_t SocketSetNonBlocking(int a1, int a2)
{
  BOOL v3 = a2 != 0;
  int v4 = fcntl(a1, 3, 0);
  if (fcntl(a1, 4, v4 & 0xFFFFFFFB | (4 * v3)) != -1) {
    return 0;
  }
  if (*__error()) {
    return *__error();
  }
  return 4294960596;
}

uint64_t SocketSetBufferSize(int a1, int a2, int a3)
{
  int v13 = a3;
  uint64_t result = 4294960591;
  if ((a1 & 0x80000000) == 0 && (a2 - 4099) >= 0xFFFFFFFE)
  {
    int v12 = 0;
    if (a3 < 1)
    {
      if (a3 == -1)
      {
        return 0;
      }
      else
      {
        int v7 = -a3;
        size_t v11 = 4;
        if (sysctlbyname("kern.ipc.maxsockbuf", &v12, &v11, 0, 0) && (!*__error() || *__error())) {
          int v12 = 0x40000;
        }
        signed int v8 = (85 * v12 / 100 + 4095) & 0xFFFFF000;
        if (v8 > v7 && a3 < 0) {
          signed int v8 = v7;
        }
        int v12 = v8;
        do
        {
          uint64_t result = setsockopt(a1, 0xFFFF, a2, &v12, 4u);
          if (!result) {
            break;
          }
          if (*__error())
          {
            uint64_t result = *__error();
            if (!result) {
              return result;
            }
          }
          else
          {
            uint64_t result = 4294960596;
          }
          int v10 = v12;
          v12 -= 1024;
        }
        while (v10 > 33791);
      }
    }
    else
    {
      uint64_t result = setsockopt(a1, 0xFFFF, a2, &v13, 4u);
      if (result)
      {
        if (*__error()) {
          return *__error();
        }
        else {
          return 4294960596;
        }
      }
    }
  }
  return result;
}

uint64_t SocketSetP2P(int a1, int a2)
{
  int v3 = a2;
  uint64_t result = setsockopt(a1, 0xFFFF, 4356, &v3, 4u);
  if (result)
  {
    if (*__error()) {
      return *__error();
    }
    else {
      return 4294960596;
    }
  }
  return result;
}

uint64_t ServerSocketOpen(int a1, int a2, int a3, int a4, unsigned int *a5, int a6, int *a7)
{
  return ServerSocketOpenEx2(a1, a2, a3, 0, 0, a4, a5, a6, 0, a7);
}

uint64_t ServerSocketOpenEx(int a1, int a2, int a3, long long *a4, int a5, unsigned int *a6, int a7, int *a8)
{
  return ServerSocketOpenEx2(a1, a2, a3, a4, 0, a5, a6, a7, 0, a8);
}

uint64_t SockAddrGetPort(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 1);
  if (v1 == 30 || v1 == 2) {
    return bswap32(*(unsigned __int16 *)(a1 + 2)) >> 16;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t UDPClientSocketOpen(int a1, long long *a2, signed int a3, int a4, unsigned int *a5, int *a6)
{
  int sa_family = a1;
  *(void *)&v25.sa_len = 0;
  *(void *)&v25.sa_data[6] = 0;
  int v27 = 0;
  uint64_t v26 = 0;
  if (a2)
  {
    uint64_t v11 = SockAddrSimplify(a2, (uint64_t)&v25);
    if (v11) {
      return v11;
    }
    if (!sa_family) {
      int sa_family = v25.sa_family;
    }
    int v12 = &v25;
  }
  else
  {
    if (!a1) {
      return 4294960591;
    }
    int v12 = 0;
  }
  memset(v23, 0, sizeof(v23));
  int v24 = 0;
  socklen_t v22 = 0;
  int v13 = socket(sa_family, 2, 17);
  if ((v13 & 0x80000000) == 0) {
    goto LABEL_9;
  }
  if (!*__error()) {
    return 4294960596;
  }
  uint64_t v11 = *__error();
  if (!v11)
  {
LABEL_9:
    int v21 = 1;
    setsockopt(v13, 0xFFFF, 4130, &v21, 4u);
    SocketSetNonBlocking(v13, 1);
    if (a4 == -1)
    {
      if (!v12) {
        goto LABEL_56;
      }
      goto LABEL_21;
    }
    if (a4 >= 0) {
      unsigned int v14 = a4;
    }
    else {
      unsigned int v14 = -a4;
    }
    if (sa_family == 30)
    {
      *(_WORD *)int v23 = 7708;
      *(_WORD *)&void v23[2] = bswap32(v14) >> 16;
      *(_DWORD *)&v23[4] = 0;
      *(_OWORD *)&v23[8] = *MEMORY[0x1E4F148B8];
      fd_set v15 = &v24;
      socklen_t v16 = 28;
    }
    else
    {
      if (sa_family != 2)
      {
        uint64_t v11 = 4294960561;
        goto LABEL_64;
      }
      *(void *)&v23[8] = 0;
      *(_WORD *)int v23 = 528;
      *(_WORD *)&void v23[2] = bswap32(v14) >> 16;
      fd_set v15 = (int *)&v23[4];
      socklen_t v16 = 16;
    }
    *fd_set v15 = 0;
    socklen_t v22 = v16;
    if (bind(v13, (const sockaddr *)v23, v16))
    {
      if (*__error())
      {
        uint64_t v11 = *__error();
        if ((a4 & 0x80000000) == 0)
        {
LABEL_43:
          if (v11) {
            goto LABEL_64;
          }
          goto LABEL_44;
        }
      }
      else
      {
        uint64_t v11 = 4294960596;
        if ((a4 & 0x80000000) == 0) {
          goto LABEL_43;
        }
      }
      if (!v11) {
        goto LABEL_43;
      }
      if (v23[1] == 30 || v23[1] == 2) {
        *(_WORD *)&void v23[2] = 0;
      }
      if (bind(v13, (const sockaddr *)v23, v16))
      {
        if (!*__error()) {
          goto LABEL_63;
        }
        uint64_t v11 = *__error();
        goto LABEL_43;
      }
    }
LABEL_44:
    if (!v12) {
      goto LABEL_56;
    }
    int v18 = v12->sa_family;
    if (v18 == 30)
    {
      if (v12->sa_data[6] == 255) {
        goto LABEL_56;
      }
    }
    else if (v18 == 2 && (v12->sa_data[2] & 0xF0) == 0xE0)
    {
      goto LABEL_56;
    }
LABEL_21:
    if (a3 < 1)
    {
      if (v25.sa_family == 30) {
        socklen_t v17 = 28;
      }
      else {
        socklen_t v17 = 16 * (v25.sa_family == 2);
      }
    }
    else if (v25.sa_family == 30)
    {
      *(_WORD *)v25.sa_uintptr_t data = bswap32(a3) >> 16;
      socklen_t v17 = 28;
    }
    else if (v25.sa_family == 2)
    {
      *(_WORD *)v25.sa_uintptr_t data = bswap32(a3) >> 16;
      socklen_t v17 = 16;
    }
    else
    {
      socklen_t v17 = 0;
    }
    if (!connect(v13, &v25, v17))
    {
LABEL_56:
      if (!a5)
      {
LABEL_70:
        uint64_t v11 = 0;
        *a6 = v13;
        return v11;
      }
      socklen_t v22 = 28;
      if (!getsockname(v13, (sockaddr *)v23, &v22))
      {
LABEL_60:
        if (v23[1] == 30 || v23[1] == 2) {
          unsigned int v19 = bswap32(*(unsigned __int16 *)&v23[2]) >> 16;
        }
        else {
          unsigned int v19 = -1;
        }
        *a5 = v19;
        goto LABEL_70;
      }
      if (*__error())
      {
        uint64_t v11 = *__error();
        if (!v11) {
          goto LABEL_60;
        }
        goto LABEL_64;
      }
      goto LABEL_63;
    }
    if (*__error())
    {
      uint64_t v11 = *__error();
      if (!v11) {
        goto LABEL_56;
      }
LABEL_64:
      if ((v13 & 0x80000000) == 0 && close(v13) && *__error()) {
        __error();
      }
      return v11;
    }
LABEL_63:
    uint64_t v11 = 4294960596;
    goto LABEL_64;
  }
  return v11;
}

uint64_t SockAddrSimplify(long long *a1, uint64_t a2)
{
  int v2 = *((unsigned __int8 *)a1 + 1);
  if (v2 == 30)
  {
    unsigned int v5 = *((_DWORD *)a1 + 2);
    if (v5)
    {
      if ((*((_DWORD *)a1 + 2) & 0xC0FF) == 0x80FE)
      {
        uint64_t v3 = 0;
        uint64_t v6 = *(void *)((char *)a1 + 12);
        int v7 = (v5 >> 8) & 0xFF00 | HIBYTE(v5);
        int v8 = *((_DWORD *)a1 + 5);
        if (*((_DWORD *)a1 + 6)) {
          int v7 = *((_DWORD *)a1 + 6);
        }
        unsigned __int16 v9 = *((_WORD *)a1 + 4);
        *(void *)a2 = *(void *)a1;
        *(_DWORD *)(a2 + 8) = v9;
        *(void *)(a2 + 12) = v6;
        *(_DWORD *)(a2 + 20) = v8;
        *(_DWORD *)(a2 + 24) = v7;
        return v3;
      }
LABEL_12:
      if (a1 != (long long *)a2)
      {
        uint64_t v3 = 0;
        long long v4 = *a1;
        uint64_t v10 = *((void *)a1 + 2);
        *(_DWORD *)(a2 + 24) = *((_DWORD *)a1 + 6);
        *(void *)(a2 + 16) = v10;
        goto LABEL_14;
      }
      return 0;
    }
    if (*((_DWORD *)a1 + 3)) {
      goto LABEL_12;
    }
    int v12 = *((_DWORD *)a1 + 4);
    if (v12)
    {
      if (v12 != -65536) {
        goto LABEL_12;
      }
      int v13 = *((_DWORD *)a1 + 5);
    }
    else
    {
      int v13 = *((_DWORD *)a1 + 5);
      if ((v13 | 0x1000000) == 0x1000000) {
        goto LABEL_12;
      }
    }
    uint64_t v3 = 0;
    __int16 v14 = *((_WORD *)a1 + 1);
    *(void *)(a2 + 8) = 0;
    *(_WORD *)a2 = 528;
    *(_WORD *)(a2 + 2) = v14;
    *(_DWORD *)(a2 + 4) = v13;
    return v3;
  }
  if (v2 == 2)
  {
    if (a1 != (long long *)a2)
    {
      uint64_t v3 = 0;
      long long v4 = *a1;
LABEL_14:
      *(_OWORD *)a2 = v4;
      return v3;
    }
    return 0;
  }
  return 4294960561;
}

uint64_t SockAddrSetPort(uint64_t result, unsigned int a2)
{
  int v2 = *(unsigned __int8 *)(result + 1);
  if (v2 == 30 || v2 == 2) {
    *(_WORD *)(result + 2) = bswap32(a2) >> 16;
  }
  return result;
}

uint64_t SockAddrGetSize(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 1);
  if (v1 == 30) {
    unsigned int v2 = 28;
  }
  else {
    unsigned int v2 = 0;
  }
  if (v1 == 2) {
    return 16;
  }
  else {
    return v2;
  }
}

uint64_t UpdateIOVec(uint64_t **a1, int *a2, unint64_t a3)
{
  uint64_t v3 = *a2;
  if ((int)v3 < 1) {
    return 0;
  }
  unint64_t v4 = (unint64_t)&(*a1)[2 * v3];
  for (int i = *a1 + 1; ; i += 2)
  {
    uint64_t v6 = i - 1;
    uint64_t v7 = *(i - 1);
    uint64_t v8 = *i;
    unint64_t v9 = a3 - *i;
    if (a3 < *i) {
      break;
    }
    *(i - 1) = v7 + v8;
    uint64_t *i = 0;
    uint64_t v10 = i + 1;
    a3 = v9;
    if ((unint64_t)v10 >= v4) {
      return 0;
    }
  }
  *(i - 1) = v7 + a3;
  uint64_t *i = (v8 - a3);
  *a1 = v6;
  *a2 = (v4 - (unint64_t)v6) >> 4;
  return 35;
}

uint64_t NetSocket_Create(void *a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = malloc_type_calloc(1uLL, 0x78uLL, 0x10B0040AF8E8938uLL);
  if (!v2) {
    return 4294960568;
  }
  uint64_t v3 = v2;
  void *v2 = -2441908381;
  *(void *)((char *)v2 + 12) = -1;
  if (!pipe(&v8)) {
    goto LABEL_5;
  }
  if (!*__error())
  {
    uint64_t v4 = 4294960596;
    goto LABEL_7;
  }
  uint64_t v4 = *__error();
  if (v4)
  {
LABEL_7:
    NetSocket_Delete(v3);
    return v4;
  }
LABEL_5:
  int v6 = v8;
  int v5 = v9;
  *((_DWORD *)v3 + 3) = v9;
  *((_DWORD *)v3 + 4) = v6;
  SocketSetNonBlocking(v5, 1);
  SocketSetNonBlocking(*((_DWORD *)v3 + 4), 1);
  uint64_t v4 = 0;
  v3[3] = NetSocket_ReadInternal;
  v3[4] = NetSocket_WriteInternal;
  void v3[5] = NetSocket_WriteVInternal;
  void v3[6] = NetSocket_WriteFileSlow;
  *a1 = v3;
  return v4;
}

uint64_t NetSocket_Delete(void *a1)
{
  if (!a1) {
    return 4294960556;
  }
  if (*(_DWORD *)a1 != 1853058915) {
    return 4294960556;
  }
  unsigned int v2 = (void (*)(void *))a1[7];
  if (v2) {
    v2(a1);
  }
  int v3 = *((_DWORD *)a1 + 1);
  if ((v3 & 0x80000000) == 0)
  {
    if (close(v3) && *__error()) {
      __error();
    }
    *((_DWORD *)a1 + 1) = -1;
  }
  int v4 = *((_DWORD *)a1 + 3);
  if ((v4 & 0x80000000) == 0)
  {
    if (close(v4) && *__error()) {
      __error();
    }
    *((_DWORD *)a1 + 3) = -1;
  }
  int v5 = *((_DWORD *)a1 + 4);
  if ((v5 & 0x80000000) == 0)
  {
    if (close(v5) && *__error()) {
      __error();
    }
    *((_DWORD *)a1 + 4) = -1;
  }
  int v6 = (void *)a1[10];
  if (v6) {
    free(v6);
  }
  free(a1);
  return 0;
}

uint64_t NetSocket_WriteFileSlow(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6, off_t a7, uint64_t a8, unsigned int a9)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 112)) {
    socklen_t v16 = *(int **)(a1 + 112);
  }
  else {
    socklen_t v16 = (int *)&gLogCategory_NetSocket;
  }
  mach_absolute_time();
  if (SecondsToUpTicks_sOnce != -1) {
    dispatch_once_f(&SecondsToUpTicks_sOnce, &SecondsToUpTicks_sMultiplier, (dispatch_function_t)_SecondsToUpTicksInit);
  }
  uint64_t v46 = SecondsToUpTicks_sMultiplier;
  if (UpTicksPerSecond_sOnce != -1) {
    dispatch_once_f(&UpTicksPerSecond_sOnce, &UpTicksPerSecond_sTicksPerSecond, (dispatch_function_t)_UpTicksPerSecondInit);
  }
  if (*(_DWORD *)a1 != 1853058915)
  {
    uint64_t v19 = 0;
    uint64_t v35 = 4294960556;
    goto LABEL_52;
  }
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v19 = 0;
    uint64_t v35 = 4294960573;
    goto LABEL_52;
  }
  if ((*(_DWORD *)(a1 + 4) & 0x80000000) != 0)
  {
    uint64_t v19 = 0;
    uint64_t v35 = 4294960551;
    goto LABEL_52;
  }
  if (lseek(a6, a7, 0) == -1)
  {
    if (!*__error())
    {
      uint64_t v19 = 0;
      uint64_t v35 = 4294960596;
      goto LABEL_52;
    }
    uint64_t v35 = *__error();
    if (v35) {
      goto LABEL_40;
    }
  }
  if (a8 >= 1)
  {
    uint64_t v43 = a4;
    socklen_t v17 = malloc_type_malloc(0x100000uLL, 0xC71F94CuLL);
    if (!v17)
    {
      uint64_t v19 = 0;
      uint64_t v35 = 4294960568;
      goto LABEL_52;
    }
    int v18 = v17;
    unsigned int v42 = a5;
    uint64_t v45 = v16;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    char v21 = 1;
    while (1)
    {
      size_t v22 = a8 >= 0x100000 ? 0x100000 : a8;
      ssize_t v23 = read(a6, v18, v22);
      ssize_t v24 = v23;
      if (v23 < 1) {
        break;
      }
      if (v21)
      {
        if ((int)a3 < 1)
        {
          int v25 = 0;
        }
        else
        {
          memcpy(__dst, a2, 16 * a3);
          int v25 = a3;
        }
        int v27 = &__dst[v25];
        *int v27 = v18;
        v27[1] = v24;
        uint64_t v26 = (*(uint64_t (**)(uint64_t, _OWORD *, void, void))(a1 + 40))(a1, __dst, (v25 + 1), a9);
        if (v26)
        {
LABEL_44:
          uint64_t v35 = v26;
LABEL_50:
          socklen_t v16 = v45;
          goto LABEL_51;
        }
      }
      else
      {
        uint64_t v26 = (*(uint64_t (**)(uint64_t, void *, ssize_t, void))(a1 + 32))(a1, v18, v23, a9);
        if (v26) {
          goto LABEL_44;
        }
      }
      v19 += v24;
      uint64_t v28 = mach_absolute_time();
      if (v28 >= v20)
      {
        uint64_t v33 = v28;
        if (*v45 <= 40 && (*v45 != -1 || _LogCategory_Initialize((uint64_t)v45, 0x28u))) {
          LogPrintF((uint64_t)v45, (uint64_t)"OSStatus NetSocket_WriteFileSlow(NetSocketRef, iovec_t *, int, iovec_t *, int, FDRef, int64_t, int64_t, int32_t)", 0x28u, (uint64_t)"Wrote %10lld of %10lld, %6.2f%%, %6.2f Mbit/sec\n", v29, v30, v31, v32, v19);
        }
        uint64_t v20 = v33 + v46;
      }
      char v21 = 0;
      BOOL v34 = a8 <= v24;
      a8 -= v24;
      if (v34)
      {
        socklen_t v16 = v45;
        goto LABEL_47;
      }
    }
    if (!v23)
    {
      uint64_t v35 = 4294960546;
      goto LABEL_50;
    }
    socklen_t v16 = v45;
    if (*__error()) {
      uint64_t v35 = *__error();
    }
    else {
      uint64_t v35 = 4294960596;
    }
    goto LABEL_51;
  }
  uint64_t v36 = (*(uint64_t (**)(uint64_t, const void *, uint64_t, void))(a1 + 40))(a1, a2, a3, a9);
  if (v36)
  {
    uint64_t v35 = v36;
LABEL_40:
    uint64_t v19 = 0;
    goto LABEL_52;
  }
  uint64_t v43 = a4;
  unsigned int v42 = a5;
  int v18 = 0;
  uint64_t v19 = 0;
LABEL_47:
  uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t, void, void))(a1 + 40))(a1, v43, v42, a9);
  if (v18) {
LABEL_51:
  }
    free(v18);
LABEL_52:
  mach_absolute_time();
  if (*v16 <= 40 && (*v16 != -1 || _LogCategory_Initialize((uint64_t)v16, 0x28u))) {
    LogPrintF((uint64_t)v16, (uint64_t)"OSStatus NetSocket_WriteFileSlow(NetSocketRef, iovec_t *, int, iovec_t *, int, FDRef, int64_t, int64_t, int32_t)", 0x28u, (uint64_t)"Wrote %lld of %lld, %6.2f Mbit/sec: %#m\n", v37, v38, v39, v40, v19);
  }
  return v35;
}

uint64_t NetSocket_WriteVInternal(uint64_t a1, iovec *a2, int a3, unsigned int a4)
{
  if (!a1) {
    return 4294960556;
  }
  if (*(_DWORD *)a1 != 1853058915) {
    return 4294960556;
  }
  if (*(unsigned char *)(a1 + 8)) {
    return 4294960573;
  }
  if ((*(_DWORD *)(a1 + 4) & 0x80000000) != 0) {
    return 4294960551;
  }
  int v5 = a3;
  if (!a3) {
    return 0;
  }
  while (1)
  {
    while (1)
    {
      ssize_t v8 = writev(*(_DWORD *)(a1 + 4), a2, v5);
      if (v8 < 1) {
        break;
      }
      if (v5 < 1)
      {
        if (!v5) {
          return 0;
        }
        int64_t iov_len = a2->iov_len;
      }
      else
      {
        while (1)
        {
          int64_t iov_len = a2->iov_len;
          if (v8 < iov_len) {
            break;
          }
          ++a2;
          v8 -= iov_len;
          BOOL v11 = __OFSUB__(v5--, 1);
          if ((v5 < 0) ^ v11 | (v5 == 0)) {
            return 0;
          }
        }
      }
      a2->iov_base = (char *)a2->iov_base + v8;
      a2->int64_t iov_len = iov_len - v8;
    }
    if (!v8) {
      return 4294960591;
    }
    if (!*__error()) {
      break;
    }
    uint64_t result = *__error();
    if (result != 4)
    {
      if (result != 35) {
        return result;
      }
      uint64_t result = NetSocket_Wait(a1, *(_DWORD *)(a1 + 4), 1, a4);
      if (result) {
        return result;
      }
    }
  }
  return 4294960596;
}

uint64_t NetSocket_Wait(uint64_t a1, unsigned int a2, int a3, unsigned int a4)
{
  if (!a1) {
    return 4294960556;
  }
  if (*(_DWORD *)a1 != 1853058915) {
    return 4294960556;
  }
  if (*(unsigned char *)(a1 + 8)) {
    return 4294960573;
  }
  if ((a2 & 0x80000000) != 0) {
    return 4294960551;
  }
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  memset(&v27, 0, sizeof(v27));
  int v8 = *(_DWORD *)(a1 + 16);
  if (__darwin_check_fd_set_overflow(v8, &v27, 0)) {
    *(__int32_t *)((char *)v27.fds_bits + (((unint64_t)v8 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << v8;
  }
  if (a3 == 2)
  {
    if (__darwin_check_fd_set_overflow(a2, &v27, 0)) {
      v27.fds_bits[a2 >> 5] |= 1 << a2;
    }
  }
  else if (a3 != 1)
  {
    if (a3) {
      return 4294960591;
    }
    int v9 = &v27;
    uint64_t v10 = 0;
    if (!__darwin_check_fd_set_overflow(a2, &v27, 0)) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  int v9 = (fd_set *)&v19;
  uint64_t v10 = (fd_set *)&v19;
  if (__darwin_check_fd_set_overflow(a2, &v19, 0)) {
LABEL_15:
  }
    v9->fds_bits[a2 >> 5] |= 1 << a2;
LABEL_16:
  if ((a4 & 0x80000000) != 0)
  {
    BOOL v11 = 0;
  }
  else
  {
    uint64_t v17 = a4;
    LODWORD(v18) = 0;
    BOOL v11 = (timeval *)&v17;
  }
  signed int v12 = *(_DWORD *)(a1 + 16);
  if (v12 <= (int)a2) {
    signed int v12 = a2;
  }
  int v13 = v12 + 1;
  while (1)
  {
    int v14 = select(v13, &v27, v10, 0, v11);
    if ((v14 & 0x80000000) == 0) {
      break;
    }
    if (!*__error()) {
      return 4294960596;
    }
    uint64_t result = *__error();
    if (result != 4) {
      return result;
    }
  }
  if (!v14) {
    return 4294960574;
  }
  int v16 = *(_DWORD *)(a1 + 16);
  if (__darwin_check_fd_set_overflow(v16, &v27, 0)
    && ((*(unsigned int *)((char *)v27.fds_bits + (((unint64_t)v16 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> v16) & 1) != 0)
  {
    return 4294960573;
  }
  return 0;
}

uint64_t NetSocket_WriteInternal(uint64_t a1, char *__buf, size_t __nbyte, unsigned int a4)
{
  if (!a1) {
    return 4294960556;
  }
  if (*(_DWORD *)a1 != 1853058915) {
    return 4294960556;
  }
  if (*(unsigned char *)(a1 + 8)) {
    return 4294960573;
  }
  if ((*(_DWORD *)(a1 + 4) & 0x80000000) != 0) {
    return 4294960551;
  }
  size_t v5 = __nbyte;
  while (v5)
  {
    ssize_t v8 = write(*(_DWORD *)(a1 + 4), __buf, v5);
    if (v8 < 1)
    {
      if (!*__error()) {
        return 4294960596;
      }
      uint64_t result = *__error();
      if (result != 4)
      {
        if (result != 35) {
          return result;
        }
        uint64_t result = NetSocket_Wait(a1, *(_DWORD *)(a1 + 4), 1, a4);
        if (result) {
          return result;
        }
      }
    }
    else
    {
      __buf += v8;
      v5 -= v8;
    }
  }
  return 0;
}

uint64_t NetSocket_ReadInternal(uint64_t a1, size_t a2, uint64_t a3, char *__dst, size_t *a5, int a6, unsigned int a7)
{
  if (a1 && *(_DWORD *)a1 == 1853058915)
  {
    if (*(unsigned char *)(a1 + 8))
    {
      size_t v16 = 0;
      uint64_t result = 4294960573;
    }
    else if ((*(_DWORD *)(a1 + 4) & 0x80000000) != 0)
    {
      size_t v16 = 0;
      uint64_t result = 4294960551;
    }
    else
    {
      BOOL v11 = __dst;
      int64_t v12 = a3;
      int v14 = *(const void **)(a1 + 64);
      uint64_t v15 = *(void *)(a1 + 72) - (void)v14;
      if (v15 < 1)
      {
        size_t v16 = 0;
      }
      else
      {
        if (v15 >= a3) {
          size_t v16 = a3;
        }
        else {
          size_t v16 = *(void *)(a1 + 72) - (void)v14;
        }
        memcpy(__dst, v14, v16);
        *(void *)(a1 + 64) += v16;
        v11 += v16;
        v12 -= v16;
      }
      if (v12 >= 1)
      {
        while (1)
        {
          ssize_t v17 = recv(*(_DWORD *)(a1 + 4), v11, v12, a6);
          if (v17 >= 1) {
            break;
          }
          if (!v17)
          {
            if (v16 >= a2) {
              uint64_t result = 0;
            }
            else {
              uint64_t result = 4294960543;
            }
            goto LABEL_28;
          }
          if (!*__error())
          {
            uint64_t result = 4294960596;
            goto LABEL_28;
          }
          uint64_t result = *__error();
          if (result != 4)
          {
            if (result != 35) {
              goto LABEL_28;
            }
            if (v16 >= a2) {
              goto LABEL_23;
            }
            uint64_t result = NetSocket_Wait(a1, *(_DWORD *)(a1 + 4), 0, a7);
            if (result) {
              goto LABEL_28;
            }
LABEL_21:
            uint64_t result = 0;
            if (v12 <= 0) {
              goto LABEL_28;
            }
          }
        }
        v11 += v17;
        v12 -= v17;
        v16 += v17;
        goto LABEL_21;
      }
LABEL_23:
      uint64_t result = 0;
    }
  }
  else
  {
    size_t v16 = 0;
    uint64_t result = 4294960556;
  }
LABEL_28:
  if (a5) {
    *a5 = v16;
  }
  return result;
}

uint64_t NetSocket_CreateWithNative(void *a1, int a2)
{
  if (a2 < 0) {
    return 4294960591;
  }
  uint64_t v6 = 0;
  uint64_t result = NetSocket_Create(&v6);
  if (!result)
  {
    uint64_t v5 = v6;
    *(_DWORD *)(v6 + 4) = a2;
    *a1 = v5;
  }
  return result;
}

uint64_t NetSocket_GetNative(_DWORD *a1)
{
  if (a1 && *a1 == 1853058915) {
    return a1[1];
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t NetSocket_Cancel(uint64_t a1)
{
  if (!a1) {
    return 4294960556;
  }
  if (*(_DWORD *)a1 != 1853058915) {
    return 4294960556;
  }
  if (*(unsigned char *)(a1 + 8)) {
    return 0;
  }
  *(unsigned char *)(a1 + 8) = 1;
  if (write(*(_DWORD *)(a1 + 12), "Q", 1uLL) == 1) {
    return 0;
  }
  if (*__error()) {
    return *__error();
  }
  return 4294960596;
}

uint64_t NetSocket_Reset(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (!a1 || *(_DWORD *)a1 != 1853058915) {
    return 4294960556;
  }
  uint64_t v2 = 99;
  while (read(*(_DWORD *)(a1 + 16), v5, 0x10uLL) >= 1 && v2-- != 0)
    ;
  uint64_t result = 0;
  *(unsigned char *)(a1 + 8) = 0;
  return result;
}

uint64_t NetSocket_TCPConnect(uint64_t a1, unsigned char *a2, unsigned int a3, unsigned int a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (!a1 || *(_DWORD *)a1 != 1853058915) {
    return 4294960556;
  }
  if (*(unsigned char *)(a1 + 8)) {
    return 4294960573;
  }
  uint64_t v5 = a2;
  if (!*a2) {
    return 4294960543;
  }
  unsigned int v18 = bswap32(a3) >> 16;
  int v8 = -1;
  while (1)
  {
    *(void *)&v22.sa_len = 0;
    *(void *)&v22.sa_data[6] = 0;
    int v24 = 0;
    uint64_t v23 = 0;
    int v9 = v5;
    uint64_t v21 = 0;
    while (*v9 && *v9 != 44)
      ++v9;
    if ((unint64_t)(v9 - v5) > 0x10F) {
      return 4294960553;
    }
    __memcpy_chk();
    v26[v9 - v5] = 0;
    if (*v9) {
      uint64_t v5 = v9 + 1;
    }
    else {
      uint64_t v5 = v9;
    }
    if (!StringToSockAddr((unsigned __int8 *)v26, (uint64_t)&v22, 0x1CuLL, &v21))
    {
      int v8 = socket(v22.sa_family, 1, 6);
      if ((v8 & 0x80000000) == 0)
      {
        if ((v22.sa_family == 30 || v22.sa_family == 2)
          && !*(_WORD *)v22.sa_data
          && (v22.sa_family == 30 || v22.sa_family == 2))
        {
          *(_WORD *)v22.sa_uintptr_t data = v18;
        }
        int v11 = _NetSocket_Connect(a1, v8, &v22, a4);
        if (!v11) {
          return 0;
        }
        int v12 = v11;
        close(v8);
        uint64_t result = 4294960573;
        if (v12 == -6723) {
          return result;
        }
        int v8 = -1;
      }
      goto LABEL_40;
    }
    for (int i = v26; *i; ++i)
    {
      if (*i == 58)
      {
        char *i = 0;
        int v14 = strtoul(i + 1, 0, 10);
        if (v14) {
          goto LABEL_31;
        }
        break;
      }
    }
    int v14 = a3;
LABEL_31:
    if (v14 >= 1)
    {
      memset(&v20, 0, sizeof(v20));
      long long v19 = 0;
      snprintf(__str, 0x20uLL, "%u", v14);
      memset(&v20, 0, sizeof(v20));
      v20.ai_socktype = 1;
      if (!getaddrinfo(v26, __str, &v20, &v19))
      {
        uint64_t v15 = v19;
        if (v19) {
          break;
        }
      }
    }
LABEL_40:
    if (!*v5)
    {
      if ((v8 & 0x80000000) == 0) {
        return 0;
      }
      return 4294960543;
    }
  }
  while (1)
  {
    int v8 = socket(v15->ai_family, v15->ai_socktype, v15->ai_protocol);
    if ((v8 & 0x80000000) == 0) {
      break;
    }
LABEL_38:
    uint64_t v15 = v15->ai_next;
    if (!v15)
    {
      freeaddrinfo(v19);
      goto LABEL_40;
    }
  }
  int v16 = _NetSocket_Connect(a1, v8, v15->ai_addr, a4);
  if (!v16)
  {
    freeaddrinfo(v19);
    return 0;
  }
  int v17 = v16;
  close(v8);
  if (v17 != -6723)
  {
    int v8 = -1;
    goto LABEL_38;
  }
  freeaddrinfo(v19);
  return 4294960573;
}

uint64_t StringToSockAddr(unsigned __int8 *a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t v55 = 0;
  if (!StringToIPv4Address(a1, (_DWORD *)&v55 + 1, (int *)&v55))
  {
    if (a3 >= 0x10)
    {
      *(void *)(a2 + 8) = 0;
      *(_WORD *)a2 = 528;
      *(_WORD *)(a2 + 2) = bswap32((unsigned __int16)v55) >> 16;
      *(_DWORD *)(a2 + 4) = bswap32(HIDWORD(v55));
      uint64_t result = 0;
      if (a4) {
        *a4 = 16;
      }
      return result;
    }
    return 4294960553;
  }
  if (a3 < 0x1C) {
    return 4294960553;
  }
  if (!a1) {
    return 4294960591;
  }
  if (*a1 == 91) {
    int v8 = a1 + 1;
  }
  else {
    int v8 = a1;
  }
  *(void *)uint64_t v57 = v8;
  long long v56 = 0uLL;
  if (*v8 == 58)
  {
    int v9 = *++v8;
    *(void *)uint64_t v57 = v8;
    if (v9 != 58) {
      return 4294960554;
    }
  }
  unint64_t v10 = 0;
  int v11 = 0;
LABEL_10:
  unsigned int v12 = 0;
  int v13 = v8;
  int v14 = v11;
  while (2)
  {
    int v11 = v14;
    int v8 = v13 + 1;
    char v15 = 1;
    while (1)
    {
      int v16 = *(v8 - 1);
      if ((v16 - 37) <= 0x38 && ((1 << (v16 - 37)) & 0x100000000000401) != 0
        || v16 == 0)
      {
        *(void *)uint64_t v57 = v8;
        goto LABEL_35;
      }
      int v16 = (char)v16;
      if (((char)v16 - 97) < 6) {
        int v16 = (char)v16 - 32;
      }
      uint64_t v19 = v16 - 48;
      if (v19 >= 0xA && (v16 - 65) > 5) {
        break;
      }
      char v15 = 0;
      ++v8;
      int v21 = ParseIPv6Address_kASCIItoHexTable[v19];
      int v22 = (unsigned __int16)(v12 >> 12);
      unsigned int v12 = v21 | (16 * v12);
      if (v22) {
        return 4294960586;
      }
    }
    if (v16 == 58)
    {
      if (v15)
      {
        int v13 = v8;
        int v14 = &v57[v10 - 16];
        if (!v11) {
          continue;
        }
        return 4294960554;
      }
      *(void *)uint64_t v57 = v8;
      if (*v8)
      {
        if (v10 <= 0xE)
        {
          uint64_t v23 = v10 | 1;
          v57[v10 - 16] = BYTE1(v12);
          v10 += 2;
          v57[v23 - 16] = v12;
          goto LABEL_10;
        }
        return 4294960545;
      }
      return 4294960546;
    }
    break;
  }
  *(void *)uint64_t v57 = v8;
  if (v16 == 46 && v10 <= 0xC)
  {
    uint64_t result = ParseIPv4Address(v13, &v57[v10 - 16], (unsigned __int8 **)v57);
    if (result) {
      return result;
    }
    v10 += 4;
    int v8 = (unsigned __int8 *)++*(void *)v57;
    if (!v11) {
      goto LABEL_53;
    }
LABEL_39:
    if ((uint64_t)v10 <= 15)
    {
      long long v25 = (char *)(&v57[v10 - 16] - v11);
      if ((int)(&v57[v10 - 16] - v11) >= 1)
      {
        uint64_t v26 = (v25 + 1) - 1;
        uint64_t v27 = (char *)&v56 + 15;
        uint64_t v28 = &v11[(int)v25 - 1];
        do
        {
          *v27-- = *v28;
          *v28-- = 0;
          --v26;
        }
        while (v26);
        int v8 = *(unsigned __int8 **)v57;
      }
      goto LABEL_54;
    }
    return 4294960545;
  }
LABEL_35:
  if ((v15 & 1) == 0)
  {
    if (v10 > 0xE) {
      return 4294960545;
    }
    uint64_t v24 = v10 | 1;
    v57[v10 - 16] = BYTE1(v12);
    v10 += 2;
    v57[v24 - 16] = v12;
  }
  if (v11) {
    goto LABEL_39;
  }
LABEL_53:
  if (v10 != 16) {
    return 4294960546;
  }
LABEL_54:
  BOOL v54 = a4;
  unsigned int v31 = 0;
  int v32 = 0;
  int v33 = 0;
  int v34 = 0;
  int v35 = 0;
  unsigned int v36 = 0;
  int v37 = 0;
  uint64_t v38 = v8 - 1;
LABEL_55:
  while (2)
  {
    int v39 = (char)*v38;
    while (1)
    {
      while (v39 == 47)
      {
        if (v35) {
          return 4294960554;
        }
        int v40 = (char)*++v38;
        int v39 = v40;
        if ((v40 - 48) <= 9)
        {
          do
          {
            unsigned int v36 = v39 + 10 * v36 - 48;
            int v41 = (char)*++v38;
            int v39 = v41;
          }
          while ((v41 - 48) < 0xA);
        }
        int v35 = 1;
        if (v36 > 0x80) {
          return 4294960586;
        }
      }
      if (v39 == 93)
      {
        if (v37) {
          return 4294960554;
        }
        ++v38;
        int v37 = 1;
        goto LABEL_55;
      }
      if (v39 != 58) {
        break;
      }
      if (v33) {
        return 4294960554;
      }
      int v42 = (char)*++v38;
      int v39 = v42;
      if ((v42 - 48) <= 9)
      {
        do
        {
          int v34 = v39 + 10 * v34 - 48;
          int v43 = (char)*++v38;
          int v39 = v43;
        }
        while ((v43 - 48) < 0xA);
      }
      int v33 = 1;
      if (v34 >= 0x10000) {
        return 4294960586;
      }
    }
    if (v39 == 37)
    {
      if (!v32)
      {
        for (uint64_t i = 0; ; ++i)
        {
          int v45 = v38[i + 1];
          BOOL v46 = (v45 - 47) > 0x2E || ((1 << (v45 - 47)) & 0x400000000801) == 0;
          BOOL v47 = !v46 || v45 == 0;
          if (v47 || i == 63) {
            break;
          }
          v57[i] = v45;
        }
        v38 += i + 1;
        v57[i] = 0;
        unsigned int v31 = if_nametoindex(v57);
        if (v31) {
          goto LABEL_92;
        }
        int v48 = v57[0];
        if (v57[0] - 48 > 9)
        {
          unsigned int v31 = 0;
          uint64_t v49 = v57;
        }
        else
        {
          unsigned int v31 = 0;
          uint64_t v49 = v57;
          do
          {
            unsigned int v31 = v48 + 10 * v31 - 48;
            int v50 = *++v49;
            int v48 = v50;
          }
          while ((v50 - 48) < 0xA);
        }
        if (!v48 && v49 != v57 && (int)(v49 - v57) < 11)
        {
LABEL_92:
          int v32 = 1;
          continue;
        }
      }
      return 4294960554;
    }
    break;
  }
  long long v51 = v56;
  *(_OWORD *)uint64_t v57 = v56;
  if (v32) {
    unsigned int v52 = v31;
  }
  else {
    unsigned int v52 = 0;
  }
  unsigned int v53 = (unsigned __int16)v55;
  *(_DWORD *)(a2 + 4) = 0;
  *(_WORD *)a2 = 7708;
  if (v33) {
    unsigned int v53 = v34;
  }
  *(_WORD *)(a2 + 2) = bswap32(v53) >> 16;
  *(_OWORD *)(a2 + 8) = v51;
  *(_DWORD *)(a2 + 24) = v52;
  if (!v54) {
    return 0;
  }
  uint64_t result = 0;
  void *v54 = 28;
  return result;
}

uint64_t _NetSocket_Connect(uint64_t a1, unsigned int a2, const sockaddr *a3, unsigned int a4)
{
  if (*(_DWORD *)a1 != 1853058915) {
    return 4294960556;
  }
  if (*(unsigned char *)(a1 + 8)) {
    return 4294960573;
  }
  if ((*(_DWORD *)(a1 + 4) & 0x80000000) == 0) {
    return 4294960575;
  }
  uint64_t result = SocketSetNonBlocking(a2, 1);
  if (!result)
  {
    *(void *)int v13 = 0;
    int sa_family = a3->sa_family;
    int v10 = sa_family == 30 ? 28 : 0;
    socklen_t v11 = sa_family == 2 ? 16 : v10;
    if (!connect(a2, a3, v11)
      || (uint64_t result = NetSocket_Wait(a1, a2, 2, a4), !result)
      && ((v13[0] = 4, v13[1] = 0, LODWORD(result) = getsockopt(a2, 0xFFFF, 4103, &v13[1], v13), result)
        ? (uint64_t result = result)
        : (uint64_t result = v13[1]),
          !result))
    {
      int v12 = 1;
      setsockopt(a2, 0xFFFF, 4130, &v12, 4u);
      v13[1] = 1;
      setsockopt(a2, 6, 1, &v13[1], 4u);
      uint64_t result = 0;
      *(_DWORD *)(a1 + 4) = a2;
    }
  }
  return result;
}

uint64_t NetSocket_Disconnect(uint64_t a1, unsigned int a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (!a1 || *(_DWORD *)a1 != 1853058915) {
    return 4294960556;
  }
  if ((a2 & 0x80000000) != 0)
  {
    uint64_t v5 = 4294960591;
    goto LABEL_21;
  }
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v5 = 4294960573;
    goto LABEL_21;
  }
  int v4 = *(_DWORD *)(a1 + 4);
  if (v4 < 0)
  {
    uint64_t v5 = 4294960551;
    goto LABEL_21;
  }
  if (!shutdown(v4, 1)) {
    goto LABEL_9;
  }
  if (*__error())
  {
    uint64_t v5 = *__error();
    if (!v5)
    {
LABEL_9:
      uint64_t v6 = mach_absolute_time();
      unint64_t v7 = UpTicksToMicroseconds(v6) + 1000000 * a2;
      while (1)
      {
        ssize_t v8 = recv(*(_DWORD *)(a1 + 4), v13, 0x20uLL, 0);
        if (v8 > 0) {
          goto LABEL_16;
        }
        if (!v8)
        {
          uint64_t v5 = 0;
          break;
        }
        if (!*__error()) {
          goto LABEL_18;
        }
        uint64_t v5 = *__error();
        if (v5 != 4)
        {
          if (v5 != 35) {
            break;
          }
          uint64_t v9 = NetSocket_Wait(a1, *(_DWORD *)(a1 + 4), 0, a2);
          if (v9)
          {
            uint64_t v5 = v9;
            break;
          }
LABEL_16:
          uint64_t v10 = mach_absolute_time();
          if (UpTicksToMicroseconds(v10) > v7)
          {
            uint64_t v5 = 4294960574;
            break;
          }
        }
      }
    }
  }
  else
  {
LABEL_18:
    uint64_t v5 = 4294960596;
  }
LABEL_21:
  int v11 = *(_DWORD *)(a1 + 4);
  if ((v11 & 0x80000000) == 0)
  {
    if (close(v11) && *__error()) {
      __error();
    }
    *(_DWORD *)(a1 + 4) = -1;
  }
  return v5;
}

uint64_t NetSocket_WriteVSlow(uint64_t a1, void *a2, int a3, uint64_t a4)
{
  if (!a1) {
    return 4294960556;
  }
  if (*(_DWORD *)a1 != 1853058915) {
    return 4294960556;
  }
  if (a3 < 1) {
    return 0;
  }
  uint64_t v6 = a2;
  unint64_t v7 = (unint64_t)&a2[2 * a3];
  while (1)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, void, void, uint64_t))(a1 + 32))(a1, *v6, v6[1], a4);
    if (result) {
      break;
    }
    v6 += 2;
    if ((unint64_t)v6 >= v7) {
      return 0;
    }
  }
  return result;
}

uint64_t NetSocket_ReadFile(uint64_t a1, uint64_t a2, int a3, off_t a4, uint64_t a5)
{
  uint64_t v8 = a2;
  if (a2 >= 0x400000) {
    size_t v10 = 0x400000;
  }
  else {
    size_t v10 = a2;
  }
  size_t __nbyte = v10;
  if (v10 > *(void *)(a1 + 88))
  {
    int v11 = *(void **)(a1 + 80);
    if (v11)
    {
      free(v11);
      *(void *)(a1 + 80) = 0;
    }
    int v12 = malloc_type_malloc(v10, 0x83FC56EEuLL);
    *(void *)(a1 + 80) = v12;
    if (!v12)
    {
      uint64_t v20 = 4294960568;
      goto LABEL_27;
    }
    *(void *)(a1 + 88) = v10;
  }
  if (lseek(a3, a4, 0) != -1) {
    goto LABEL_10;
  }
  if (*__error())
  {
    uint64_t v20 = *__error();
    if (!v20)
    {
      while (1)
      {
LABEL_10:
        if (v8 < 1)
        {
          uint64_t v20 = 0;
          goto LABEL_27;
        }
        uint64_t v13 = *(void *)(a1 + 80);
        if (v8 >= *(void *)(a1 + 88)) {
          size_t v14 = *(void *)(a1 + 88);
        }
        else {
          size_t v14 = v8;
        }
        size_t __nbyte = v14;
        uint64_t v15 = (*(uint64_t (**)(uint64_t, size_t, size_t, uint64_t, size_t *, void, uint64_t))(a1 + 24))(a1, v14, v14, v13, &__nbyte, 0, a5);
        if (v15)
        {
          uint64_t v20 = v15;
          goto LABEL_27;
        }
        size_t v16 = __nbyte;
        if (__nbyte) {
          break;
        }
LABEL_21:
        v8 -= v16;
      }
      int v17 = *(char **)(a1 + 80);
      size_t v18 = __nbyte;
      while (1)
      {
        ssize_t v19 = write(a3, v17, v18);
        if (v19 <= 0)
        {
          if (!*__error()) {
            goto LABEL_25;
          }
          uint64_t v20 = *__error();
          if (v20) {
            break;
          }
        }
        v17 += v19;
        size_t v18 = __nbyte - v19;
        __nbyte -= v19;
        if (!__nbyte) {
          goto LABEL_21;
        }
      }
    }
  }
  else
  {
LABEL_25:
    uint64_t v20 = 4294960596;
  }
LABEL_27:
  if (*(void *)(a1 + 88) > 0x100000uLL)
  {
    int v21 = *(void **)(a1 + 80);
    if (v21)
    {
      free(v21);
      *(void *)(a1 + 80) = 0;
    }
    *(void *)(a1 + 88) = 0;
  }
  return v20;
}

uint64_t TCPConnect(unsigned char *a1, char *__str, int a3, int *a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (__str) {
    unsigned int v7 = strtoul(__str, 0, 10);
  }
  else {
    unsigned int v7 = 0;
  }
  if (!*a1) {
    return 4294960543;
  }
  unsigned int v8 = bswap32(v7) >> 16;
  while (1)
  {
    *(void *)&v20.sa_len = 0;
    *(void *)&v20.sa_data[6] = 0;
    int v22 = 0;
    uint64_t v21 = 0;
    uint64_t v9 = a1;
    uint64_t v19 = 0;
    while (*v9 && *v9 != 44)
      ++v9;
    if ((unint64_t)(v9 - a1) >= 0x110) {
      return 4294960553;
    }
    __memcpy_chk();
    v24[v9 - a1] = 0;
    if (*v9) {
      a1 = v9 + 1;
    }
    else {
      a1 = v9;
    }
    if (StringToSockAddr((unsigned __int8 *)v24, (uint64_t)&v20, 0x1CuLL, &v19))
    {
      for (uint64_t i = v24; *i; ++i)
      {
        if (*i == 58)
        {
          char *i = 0;
          int v13 = strtoul(i + 1, 0, 10);
          if (v13) {
            goto LABEL_30;
          }
          break;
        }
      }
      int v13 = v7;
LABEL_30:
      if (v13 >= 1)
      {
        memset(&v18, 0, sizeof(v18));
        int v17 = 0;
        snprintf(__stra, 0x20uLL, "%u", v13);
        memset(&v18, 0, sizeof(v18));
        v18.ai_socktype = 1;
        if (!getaddrinfo(v24, __stra, &v18, &v17))
        {
          size_t v14 = v17;
          if (v17)
          {
            while (1)
            {
              int v15 = socket(v14->ai_family, v14->ai_socktype, v14->ai_protocol);
              if ((v15 & 0x80000000) == 0)
              {
                int v12 = v15;
                if (!SocketConnect(v15, v14->ai_addr, a3))
                {
                  freeaddrinfo(v17);
                  goto LABEL_41;
                }
                close(v12);
              }
              size_t v14 = v14->ai_next;
              if (!v14)
              {
                freeaddrinfo(v17);
                break;
              }
            }
          }
        }
      }
    }
    else
    {
      int v11 = socket(v20.sa_family, 1, 6);
      if ((v11 & 0x80000000) == 0)
      {
        int v12 = v11;
        if ((v20.sa_family == 30 || v20.sa_family == 2)
          && !*(_WORD *)v20.sa_data
          && (v20.sa_family == 30 || v20.sa_family == 2))
        {
          *(_WORD *)v20.sa_uintptr_t data = v8;
        }
        if (!SocketConnect(v11, &v20, a3))
        {
LABEL_41:
          uint64_t result = 0;
          *a4 = v12;
          return result;
        }
        close(v12);
      }
    }
    if (!*a1) {
      return 4294960543;
    }
  }
}

uint64_t SocketConnect(int a1, const sockaddr *a2, int a3)
{
  uint64_t result = SocketSetNonBlocking(a1, 1);
  if (result) {
    return result;
  }
  *(void *)&v14.tv_useCC_SHA1_CTX c = 0;
  int v11 = 1;
  setsockopt(a1, 0xFFFF, 4130, &v11, 4u);
  unsigned int v13 = 1;
  setsockopt(a1, 6, 1, &v13, 4u);
  int sa_family = a2->sa_family;
  int v8 = sa_family == 30 ? 28 : 0;
  socklen_t v9 = sa_family == 2 ? 16 : v8;
  uint64_t result = connect(a1, a2, v9);
  if (!result) {
    return result;
  }
  memset(&v16, 0, sizeof(v16));
  memset(&v15, 0, sizeof(v15));
  if (__darwin_check_fd_set_overflow(a1, &v16, 0)) {
    *(__int32_t *)((char *)v16.fds_bits + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << a1;
  }
  if (__darwin_check_fd_set_overflow(a1, &v15, 0)) {
    *(__int32_t *)((char *)v15.fds_bits + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << a1;
  }
  v14.time_t tv_sec = a3;
  int v10 = select(a1 + 1, &v16, &v15, 0, &v14);
  if (v10 <= 0)
  {
    if (!v10) {
      return 4294960574;
    }
    if (!*__error()) {
      return 4294960596;
    }
    uint64_t result = *__error();
    if (result) {
      return result;
    }
  }
  if ((!__darwin_check_fd_set_overflow(a1, &v16, 0)
     || ((*(unsigned int *)((char *)v16.fds_bits + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> a1) & 1) == 0)
    && (!__darwin_check_fd_set_overflow(a1, &v15, 0)
     || ((*(unsigned int *)((char *)v15.fds_bits + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> a1) & 1) == 0))
  {
    return 4294960596;
  }
  socklen_t v12 = 4;
  unsigned int v13 = 0;
  if (!getsockopt(a1, 0xFFFF, 4103, &v13, &v12)) {
    return v13;
  }
  if (!*__error()) {
    return 4294960596;
  }
  uint64_t result = *__error();
  if (!result) {
    return v13;
  }
  return result;
}

uint64_t SocketAccept(int a1, unsigned int a2, int *a3, sockaddr *a4)
{
  uint64_t v7 = a2;
  SocketSetNonBlocking(a1, 1);
  if ((a2 & 0x80000000) != 0)
  {
    unint64_t v9 = -1;
  }
  else
  {
    uint64_t v8 = mach_absolute_time();
    if (SecondsToUpTicks_sOnce != -1) {
      dispatch_once_f(&SecondsToUpTicks_sOnce, &SecondsToUpTicks_sMultiplier, (dispatch_function_t)_SecondsToUpTicksInit);
    }
    unint64_t v9 = v8 + SecondsToUpTicks_sMultiplier * v7;
  }
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  int v20 = 0;
  memset(&v23, 0, sizeof(v23));
  while (1)
  {
    if (__darwin_check_fd_set_overflow(a1, &v23, 0)) {
      v23.fds_bits[(unint64_t)a1 >> 5] |= 1 << a1;
    }
    if ((v7 & 0x80000000) != 0)
    {
      int v10 = 0;
    }
    else
    {
      uint64_t v21 = v7;
      LODWORD(v22) = 0;
      int v10 = (timeval *)&v21;
    }
    int v11 = select(a1 + 1, &v23, 0, 0, v10);
    if (v11 > 0) {
      goto LABEL_16;
    }
    if (!v11) {
      return 4294960574;
    }
    if (!*__error()) {
      return 4294960596;
    }
    uint64_t result = *__error();
    if (result) {
      return result;
    }
LABEL_16:
    if (a4)
    {
      int v20 = 28;
      unsigned int v13 = (socklen_t *)&v20;
    }
    else
    {
      unsigned int v13 = 0;
    }
    int v14 = accept(a1, a4, v13);
    if ((v14 & 0x80000000) == 0 || *__error() && !*__error())
    {
      int v18 = 1;
      setsockopt(v14, 0xFFFF, 4130, &v18, 4u);
      SocketSetNonBlocking(v14, 1);
      int v19 = 1;
      setsockopt(v14, 6, 1, &v19, 4u);
      uint64_t result = 0;
      *a3 = v14;
      return result;
    }
    if ((v7 & 0x80000000) == 0)
    {
      uint64_t v15 = mach_absolute_time();
      uint64_t v7 = 0;
      unint64_t v16 = v9 - v15;
      if (v9 > v15)
      {
        if (UpTicksPerSecond_sOnce != -1) {
          dispatch_once_f(&UpTicksPerSecond_sOnce, &UpTicksPerSecond_sTicksPerSecond, (dispatch_function_t)_UpTicksPerSecondInit);
        }
        uint64_t v7 = (v16 / UpTicksPerSecond_sTicksPerSecond);
      }
    }
  }
}

uint64_t SocketCloseGracefully(int a1, int a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  v14.time_t tv_sec = 0;
  *(void *)&v14.tv_useCC_SHA1_CTX c = 0;
  uint64_t v4 = mach_absolute_time();
  memset(&v13, 0, sizeof(v13));
  unint64_t v5 = UpTicksToMicroseconds(v4) + 1000000 * a2;
  shutdown(a1, 1);
  do
  {
    uint64_t v6 = mach_absolute_time();
    unint64_t v7 = UpTicksToMicroseconds(v6);
    unint64_t v8 = v5 - v7;
    if (v5 <= v7)
    {
      __darwin_time_t v9 = 0;
      __darwin_suseconds_t v10 = 0;
    }
    else
    {
      __darwin_time_t v9 = (int)(v8 / 0xF4240);
      __darwin_suseconds_t v10 = v8 % 0xF4240;
    }
    v14.time_t tv_sec = v9;
    v14.tv_useCC_SHA1_CTX c = v10;
    if (__darwin_check_fd_set_overflow(a1, &v13, 0)) {
      v13.fds_bits[(unint64_t)a1 >> 5] |= 1 << a1;
    }
    int v11 = select(a1 + 1, &v13, 0, 0, &v14);
    if (!v11) {
      break;
    }
    if (v11 < 0)
    {
      if (*__error()) {
        __error();
      }
      break;
    }
  }
  while (recv(a1, v15, 0x20uLL, 0) > 0);
  uint64_t result = close(a1);
  if (result)
  {
    if (*__error()) {
      return *__error();
    }
    else {
      return 4294960596;
    }
  }
  return result;
}

uint64_t SocketRecvFrom(int a1, uint64_t a2, uint64_t a3, ssize_t *a4, void *a5, socklen_t a6, void *a7, uint64_t *a8, _DWORD *a9, void *a10)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  *(&v17.msg_iovlen + 1) = 0;
  v18[0] = a2;
  v18[1] = a3;
  v17.msg_name = a5;
  *(&v17.msg_namelen + 1) = 0;
  v17.msg_namelen = a6;
  v17.msg_iov = (iovec *)v18;
  v17.msg_iovlen = 1;
  v17.msg_control = &v19;
  *(void *)&v17.msg_controllen = 256;
  while (1)
  {
    ssize_t v14 = recvmsg(a1, &v17, 0);
    if ((v14 & 0x8000000000000000) == 0) {
      break;
    }
    if (!*__error()) {
      return 4294960596;
    }
    uint64_t result = *__error();
    if (result != 4)
    {
      if (result) {
        return result;
      }
      break;
    }
  }
  if (a4) {
    *a4 = v14;
  }
  if (a7) {
    *a7 = v17.msg_namelen;
  }
  if (a8) {
    *a8 = SocketGetPacketUpTicks((unsigned int *)v17.msg_control, v17.msg_controllen);
  }
  if (a9)
  {
    int PacketReceiveInterface = SocketGetPacketReceiveInterface((unsigned int *)v17.msg_control, v17.msg_controllen, a10);
    uint64_t result = 0;
    *a9 = PacketReceiveInterface;
  }
  else
  {
    if (a10) {
      SocketGetPacketReceiveInterface((unsigned int *)v17.msg_control, v17.msg_controllen, a10);
    }
    return 0;
  }
  return result;
}

uint64_t SocketGetPacketUpTicks(unsigned int *a1, unsigned int a2)
{
  if (a2 < 0xC || (uint64_t v2 = a1) == 0)
  {
LABEL_7:
    return mach_absolute_time();
  }
  while (1)
  {
    if (v2[1] != 0xFFFF) {
      goto LABEL_6;
    }
    unsigned int v3 = v2[2];
    if (v3 == 2) {
      break;
    }
    if (v3 == 4) {
      return *(void *)(v2 + 3);
    }
LABEL_6:
    uint64_t v2 = (unsigned int *)((char *)v2 + ((*v2 + 3) & 0x1FFFFFFFCLL));
    if (v2 + 3 > (unsigned int *)((char *)a1 + a2)) {
      goto LABEL_7;
    }
  }
  unsigned long long v11 = 0uLL;
  gettimeofday((timeval *)&v11, 0);
  uint64_t v5 = mach_absolute_time();
  __darwin_time_t v6 = v11;
  if (SecondsToUpTicks_sOnce != -1) {
    dispatch_once_f(&SecondsToUpTicks_sOnce, &SecondsToUpTicks_sMultiplier, (dispatch_function_t)_SecondsToUpTicksInit);
  }
  uint64_t v7 = SecondsToUpTicks_sMultiplier * v6;
  unint64_t v8 = MicrosecondsToUpTicks(DWORD2(v11));
  unsigned long long v11 = *(_OWORD *)(v2 + 3);
  __darwin_time_t v9 = v11;
  if (SecondsToUpTicks_sOnce != -1) {
    dispatch_once_f(&SecondsToUpTicks_sOnce, &SecondsToUpTicks_sMultiplier, (dispatch_function_t)_SecondsToUpTicksInit);
  }
  uint64_t v10 = SecondsToUpTicks_sMultiplier;
  return v5 - (v7 + v8) + v10 * v9 + MicrosecondsToUpTicks(DWORD2(v11));
}

uint64_t SocketGetPacketReceiveInterface(unsigned int *a1, unsigned int a2, void *__dst)
{
  uint64_t result = 0;
  if (a2 >= 0xC && a1)
  {
    unint64_t v6 = (unint64_t)a1 + a2;
    while (a1[1] || a1[2] != 20)
    {
      a1 = (unsigned int *)((char *)a1 + ((*a1 + 3) & 0x1FFFFFFFCLL));
      if ((unint64_t)(a1 + 3) > v6) {
        return 0;
      }
    }
    if (__dst)
    {
      size_t v7 = *((unsigned __int8 *)a1 + 17);
      if (v7 <= 0xF)
      {
        memcpy(__dst, a1 + 5, v7);
        *((unsigned char *)__dst + *((unsigned __int8 *)a1 + 17)) = 0;
      }
    }
    return *((unsigned __int16 *)a1 + 7);
  }
  return result;
}

uint64_t SocketReadAll(int a1, char *a2, uint64_t a3)
{
  if (a3 < 1) {
    return 0;
  }
  uint64_t v16 = v3;
  uint64_t v17 = v4;
  size_t v5 = a3;
  unint64_t v6 = a2;
  unint64_t v8 = &a2[a3];
  int v9 = 1 << a1;
  unint64_t v10 = (unint64_t)a1 >> 5;
  int v11 = a1 + 1;
  while (1)
  {
    do
    {
      ssize_t v12 = recv(a1, v6, v5, 0);
      if (v12 >= 1)
      {
        v6 += v12;
        goto LABEL_16;
      }
      if (!v12) {
        return 4294960543;
      }
      if (!*__error()) {
        return 4294960596;
      }
      uint64_t result = *__error();
    }
    while (result == 4);
    if (result != 35) {
      return result;
    }
    memset(&v15, 0, sizeof(v15));
    if (__darwin_check_fd_set_overflow(a1, &v15, 0)) {
      v15.fds_bits[v10] |= v9;
    }
    int v14 = select(v11, &v15, 0, 0, 0);
    if (!v14) {
      return 4294960574;
    }
    if (v14 <= 0)
    {
      if (!*__error()) {
        return 4294960596;
      }
      uint64_t result = *__error();
      if (result) {
        return result;
      }
    }
LABEL_16:
    size_t v5 = v8 - v6;
    if (v8 <= v6) {
      return 0;
    }
  }
}

uint64_t SocketWriteAll(int a1, char *a2, uint64_t a3, int a4)
{
  v15.time_t tv_sec = 0;
  *(void *)&v15.tv_useCC_SHA1_CTX c = 0;
  memset(&v16, 0, sizeof(v16));
  if (a3 < 1) {
    return 0;
  }
  size_t v4 = a3;
  size_t v5 = a2;
  unint64_t v7 = (unint64_t)&a2[a3];
  int v8 = 1 << a1;
  unint64_t v9 = (unint64_t)a1 >> 5;
  __darwin_time_t v10 = a4;
  int v11 = a1 + 1;
  while (1)
  {
    if (__darwin_check_fd_set_overflow(a1, &v16, 0)) {
      v16.fds_bits[v9] |= v8;
    }
    v15.time_t tv_sec = v10;
    v15.tv_useCC_SHA1_CTX c = 0;
    int v12 = select(v11, 0, &v16, 0, &v15);
    if (!v12) {
      return 4294960574;
    }
    if (v12 <= 0)
    {
      if (!*__error()) {
        return 4294960596;
      }
      uint64_t result = *__error();
      if (result) {
        return result;
      }
    }
    ssize_t v14 = write(a1, v5, v4);
    if (v14 < 0)
    {
      if (!*__error()) {
        return 4294960596;
      }
      uint64_t result = *__error();
      if (result != 4)
      {
        if (result) {
          return result;
        }
        goto LABEL_13;
      }
    }
    else
    {
LABEL_13:
      uint64_t result = 0;
      v5 += v14;
      size_t v4 = v7 - (void)v5;
      if (v7 <= (unint64_t)v5) {
        return result;
      }
    }
  }
}

uint64_t SocketReadData(int a1, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  size_t v5 = a3 - *a4;
  if (a3 == *a4) {
    return 0;
  }
  if (a3 <= *a4) {
    return 4294960533;
  }
  unint64_t v9 = (void *)(a2 + v4);
  while (1)
  {
    ssize_t v10 = read(a1, v9, v5);
    if ((v10 & 0x8000000000000000) == 0) {
      break;
    }
    if (!*__error()) {
      return 4294960596;
    }
    uint64_t result = *__error();
    if (result != 4) {
      return result;
    }
  }
  if (!v10) {
    return 4294960543;
  }
  *a4 = v10 + v4;
  if (v10 + v4 == a3) {
    return 0;
  }
  else {
    return 35;
  }
}

uint64_t SocketReadDataEx(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t *a5)
{
  uint64_t v5 = *a5;
  size_t v6 = a4 - *a5;
  if (a4 == *a5) {
    return 0;
  }
  if (a4 <= *a5) {
    return 4294960533;
  }
  ssize_t v10 = (void *)(a2 + v5);
  do
  {
    ssize_t v11 = read(a1, v10, v6);
    if ((v11 & 0x8000000000000000) == 0)
    {
      if (!v11) {
        return 4294960543;
      }
      *a5 = v11 + v5;
      if (v11 + v5 >= a3) {
        return 0;
      }
      else {
        return 35;
      }
    }
    if (!*__error())
    {
      uint64_t v17 = 4294960596;
      goto LABEL_15;
    }
    uint64_t v17 = *__error();
  }
  while (v17 == 4);
  if (v17 == 35) {
    return v17;
  }
LABEL_15:
  if (gLogCategory_NetUtils <= 60
    && (gLogCategory_NetUtils != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_NetUtils, 0x3Cu)))
  {
    LogPrintF((uint64_t)&gLogCategory_NetUtils, (uint64_t)"OSStatus SocketReadDataEx(SocketRef, void *, size_t, size_t, size_t *)", 0x3Cu, (uint64_t)"SocketReadDataEx, fd %d, min %zu, failed: %#m\n", v12, v13, v14, v15, a1);
  }
  return v17;
}

uint64_t SocketWriteData(int a1, const iovec **a2, int *a3)
{
  if (!*a3) {
    return 0;
  }
  while (1)
  {
    ssize_t v6 = writev(a1, *a2, *a3);
    if ((v6 & 0x8000000000000000) == 0) {
      break;
    }
    if (!*__error()) {
      return 4294960596;
    }
    uint64_t result = *__error();
    if (result != 4) {
      return result;
    }
  }
  if (!v6) {
    return 0;
  }
  return UpdateIOVec((uint64_t **)a2, a3, v6);
}

uint64_t SocketTransportRead(void *a1, size_t a2, ssize_t *a3, int a4)
{
  while (1)
  {
    ssize_t v8 = read(a4, a1, a2);
    if ((v8 & 0x8000000000000000) == 0) {
      break;
    }
    if (!*__error()) {
      return 4294960596;
    }
    uint64_t result = *__error();
    if (result != 4) {
      return result;
    }
  }
  ssize_t v10 = v8;
  if (!v8) {
    return 4294960543;
  }
  uint64_t result = 0;
  *a3 = v10;
  return result;
}

uint64_t SocketTransportWriteV(const iovec **a1, int *a2, int a3)
{
  return SocketWriteData(a3, a1, a2);
}

uint64_t SocketSetBoundInterface(int a1, int a2, int a3)
{
  int v6 = a3;
  if (a2 == 2)
  {
    int v3 = 0;
    int v4 = 25;
  }
  else
  {
    if (a2 != 30) {
      return 4294960561;
    }
    int v3 = 41;
    int v4 = 125;
  }
  uint64_t result = setsockopt(a1, v3, v4, &v6, 4u);
  if (result)
  {
    if (*__error()) {
      return *__error();
    }
    else {
      return 4294960596;
    }
  }
  return result;
}

uint64_t SocketGetFamily(int a1)
{
  *(void *)&v3.sa_len = 0;
  *(void *)&v3.sa_data[6] = 0;
  int v5 = 0;
  uint64_t v4 = 0;
  socklen_t v2 = 28;
  if (getsockname(a1, &v3, &v2) && (!*__error() || *__error())) {
    return 0;
  }
  else {
    return v3.sa_family;
  }
}

uint64_t SocketGetInterfaceInfo(int a1, char *ifa_name, char *a3, unsigned int *a4, uint64_t a5, _DWORD *a6, int *a7, void *a8, BOOL *a9, uint64_t a10)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  *(void *)&v39.sa_len = 0;
  *(void *)&v39.sa_data[6] = 0;
  int v41 = 0;
  uint64_t v40 = 0;
  socklen_t v38 = 0;
  int v37 = 0;
  long long v43 = 0u;
  long long v44 = 0u;
  if (a1 < 0)
  {
    int v20 = socket(2, 2, 0);
    if (v20 < 0)
    {
      int v17 = v20;
      if (!*__error())
      {
        uint64_t v25 = 4294960596;
        int v19 = v17;
        goto LABEL_64;
      }
      int v18 = a8;
      uint64_t v25 = *__error();
      int v19 = v17;
      if (v25) {
        goto LABEL_64;
      }
    }
    else
    {
      int v18 = a8;
      int v17 = v20;
      int v19 = v20;
    }
  }
  else
  {
    int v17 = a1;
    int v18 = a8;
    int v19 = -1;
  }
  if (ifa_name)
  {
    int v36 = v19;
    if (a5)
    {
      *(_WORD *)(a5 + 4) = 0;
      *(_DWORD *)a5 = 0;
      GetInterfaceMACAddress(ifa_name, a5);
    }
    uint64_t v21 = 0;
    unint64_t v22 = (unint64_t)v18;
  }
  else
  {
    socklen_t v38 = 28;
    if (getsockname(v17, &v39, &v38))
    {
      if (!*__error())
      {
        uint64_t v25 = 4294960596;
        goto LABEL_64;
      }
      uint64_t v25 = *__error();
      if (v25) {
        goto LABEL_64;
      }
    }
    uint64_t v26 = SockAddrSimplify((long long *)&v39, (uint64_t)&v39);
    if (v26 || (uint64_t v26 = getifaddrs(&v37), v26))
    {
      uint64_t v25 = v26;
      goto LABEL_64;
    }
    int v36 = v19;
    uint64_t v21 = v37;
    if (!v37)
    {
      uint64_t v25 = 4294960569;
      int v19 = v36;
      if (v36 < 0) {
        return v25;
      }
      goto LABEL_67;
    }
    uint64_t v25 = 4294960569;
    while (1)
    {
      ifa_addr = v21->ifa_addr;
      if (ifa_addr)
      {
        if (!SockAddrCompareAddrEx(ifa_addr, (uint64_t)&v39, 1)) {
          break;
        }
      }
      uint64_t v21 = v21->ifa_next;
      if (!v21) {
        goto LABEL_59;
      }
    }
    ifa_name = v21->ifa_name;
    if (a3) {
      strlcpy(a3, v21->ifa_name, 0x11uLL);
    }
    if (!ifa_name)
    {
      uint64_t v25 = 4294960569;
      goto LABEL_59;
    }
    unint64_t v22 = (unint64_t)v18;
    if (a5)
    {
      *(_WORD *)(a5 + 4) = 0;
      *(_DWORD *)a5 = 0;
      uint64_t v21 = v37;
      if (v37)
      {
        while (1)
        {
          int v32 = v21->ifa_addr;
          if (v32)
          {
            if (v32->sa_family == 18)
            {
              int v33 = v21->ifa_name;
              if (v33)
              {
                if (!strcmp(v33, ifa_name) && v32->sa_data[4] == 6) {
                  break;
                }
              }
            }
          }
          uint64_t v21 = v21->ifa_next;
          if (!v21) {
            goto LABEL_9;
          }
        }
        int v34 = &v32->sa_len + v32->sa_data[3];
        int v35 = *((_DWORD *)v34 + 2);
        *(_WORD *)(a5 + 4) = *((_WORD *)v34 + 6);
        *(_DWORD *)a5 = v35;
      }
    }
  }
LABEL_9:
  if (a4) {
    *a4 = if_nametoindex(ifa_name);
  }
  if (a6 || a9 || a10)
  {
    memset(v42, 0, 44);
    __strlcpy_chk();
    if (ioctl(v17, 0xC02C6938uLL, v42) && (!*__error() || *__error()))
    {
      int v23 = 0;
      if (!a6)
      {
LABEL_29:
        BOOL v24 = (BYTE8(v42[1]) & 3) == 1;
        if (!a7) {
          goto LABEL_42;
        }
LABEL_30:
        if (v21)
        {
          ifa_SCNetworkReachabilityFlags flags = v21->ifa_flags;
LABEL_41:
          *a7 = ifa_flags;
          goto LABEL_42;
        }
        long long v43 = 0u;
        long long v44 = 0u;
        __strlcpy_chk();
        if (ioctl(v17, 0xC0206911uLL, &v43))
        {
          ifa_SCNetworkReachabilityFlags flags = *__error();
          if (!ifa_flags) {
            goto LABEL_41;
          }
          if (*__error())
          {
            ifa_SCNetworkReachabilityFlags flags = 0;
            goto LABEL_41;
          }
        }
        ifa_SCNetworkReachabilityFlags flags = (__int16)v44;
        goto LABEL_41;
      }
    }
    else
    {
      int v23 = v42[1];
      if (!a6) {
        goto LABEL_29;
      }
    }
    *a6 = v23;
    goto LABEL_29;
  }
  LOBYTE(v23) = 0;
  BOOL v24 = 0;
  if (a7) {
    goto LABEL_30;
  }
LABEL_42:
  if (!(v22 | a10))
  {
    LODWORD(v28) = 0;
    goto LABEL_51;
  }
  long long v43 = 0u;
  long long v44 = 0u;
  __strlcpy_chk();
  if (!ioctl(v17, 0xC020698EuLL, &v43) || *__error() && !*__error())
  {
    uint64_t v28 = v44;
    if (!v22) {
      goto LABEL_51;
    }
    goto LABEL_50;
  }
  uint64_t v28 = 0;
  if (v22) {
LABEL_50:
  }
    *(void *)unint64_t v22 = v28;
LABEL_51:
  if (a9) {
    *a9 = v24;
  }
  if (!a10)
  {
    uint64_t v25 = 0;
LABEL_59:
    int v19 = v36;
    goto LABEL_64;
  }
  if (!stricmp_prefix((unsigned __int8 *)ifa_name, "nan"))
  {
    int v29 = 128;
    goto LABEL_62;
  }
  if ((v28 & 0x100000) != 0)
  {
    int v29 = 4;
    goto LABEL_62;
  }
  if ((v23 & 0xE0) == 0x80)
  {
    int v29 = 2;
LABEL_62:
    int v19 = v36;
LABEL_63:
    uint64_t v25 = 0;
    *(_DWORD *)a10 = v29;
    goto LABEL_64;
  }
  if ((v28 & 0x20000000) != 0)
  {
    int v29 = 16;
    goto LABEL_62;
  }
  *(_DWORD *)a10 = 1;
  long long v43 = 0u;
  long long v44 = 0u;
  __strlcpy_chk();
  ioctl(v17, 0xC020699FuLL, &v43);
  if (DWORD1(v44) == 18)
  {
    int v19 = v36;
    if (DWORD2(v44) == 2)
    {
      int v29 = 256;
      goto LABEL_63;
    }
    if (DWORD2(v44) == 3)
    {
      int v29 = 512;
      goto LABEL_63;
    }
  }
  else
  {
    int v19 = v36;
    if (DWORD2(v44) == 1)
    {
      int v29 = 8;
      goto LABEL_63;
    }
  }
  uint64_t v25 = 0;
LABEL_64:
  if (v37) {
    MEMORY[0x192FAA4D0]();
  }
  if ((v19 & 0x80000000) == 0)
  {
LABEL_67:
    if (close(v19) && *__error()) {
      __error();
    }
  }
  return v25;
}

uint64_t SockAddrCompareAddrEx(void *a1, uint64_t a2, int a3)
{
  uint64_t v3 = *((unsigned __int8 *)a1 + 1);
  if (v3 != *(unsigned __int8 *)(a2 + 1)) {
    return v3 - *(unsigned __int8 *)(a2 + 1);
  }
  if (*((unsigned char *)a1 + 1))
  {
    int v5 = (long long *)a2;
    if (v3 == 30)
    {
      memset(v17, 0, sizeof(v17));
      int v18 = 0;
      memset(v15, 0, sizeof(v15));
      int v16 = 0;
      if (*((unsigned __int8 *)a1 + 8) == 254
        && (*((unsigned char *)a1 + 9) & 0xC0) == 0x80
        && *(unsigned __int8 *)(a2 + 8) == 254
        && (*(unsigned char *)(a2 + 9) & 0xC0) == 0x80)
      {
        SockAddrSimplify((long long *)a1, (uint64_t)v17);
        SockAddrSimplify(v5, (uint64_t)v15);
        if (a3)
        {
          LODWORD(v3) = v18 - v16;
          int v5 = (long long *)v15;
          a1 = v17;
        }
        else
        {
          LODWORD(v3) = 0;
          a1 = v17;
          int v5 = (long long *)v15;
        }
      }
      else
      {
        LODWORD(v3) = 0;
      }
      unint64_t v12 = bswap64(a1[1]);
      unint64_t v13 = bswap64(*((void *)v5 + 1));
      if (v12 == v13 && (v12 = bswap64(a1[2]), unint64_t v13 = bswap64(*((void *)v5 + 2)), v12 == v13))
      {
        unsigned int v14 = 0;
      }
      else if (v12 < v13)
      {
        unsigned int v14 = -1;
      }
      else
      {
        unsigned int v14 = 1;
      }
      if (v14) {
        return v14;
      }
      else {
        return v3;
      }
    }
    else if (v3 == 2)
    {
      unsigned int v6 = bswap32(*((_DWORD *)a1 + 1));
      unsigned int v7 = bswap32(*(_DWORD *)(a2 + 4));
      BOOL v8 = v6 >= v7;
      BOOL v9 = v6 > v7;
      int v10 = !v8;
      return (v9 - v10);
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return v3;
}

uint64_t GetInterfaceMACAddress(const char *a1, uint64_t a2)
{
  ssize_t v11 = 0;
  if (getifaddrs(&v11))
  {
    if (*__error())
    {
      uint64_t v4 = *__error();
      int v5 = v11;
      if (!v4)
      {
        if (v11) {
          goto LABEL_5;
        }
        return 4294960569;
      }
    }
    else
    {
      uint64_t v4 = 4294960596;
      int v5 = v11;
    }
    if (v5) {
LABEL_16:
    }
      MEMORY[0x192FAA4D0](v5);
    return v4;
  }
  int v5 = v11;
  if (!v11) {
    return 4294960569;
  }
LABEL_5:
  unsigned int v6 = v5;
  while (1)
  {
    ifa_addr = v6->ifa_addr;
    if (ifa_addr->sa_family == 18 && !strcmp(v6->ifa_name, a1) && ifa_addr->sa_data[4] == 6) {
      break;
    }
    unsigned int v6 = v6->ifa_next;
    if (!v6)
    {
      uint64_t v4 = 4294960569;
      if (v5) {
        goto LABEL_16;
      }
      return v4;
    }
  }
  uint64_t v4 = 0;
  BOOL v9 = &ifa_addr->sa_len + ifa_addr->sa_data[3];
  int v10 = *((_DWORD *)v9 + 2);
  *(_WORD *)(a2 + 4) = *((_WORD *)v9 + 6);
  *(_DWORD *)a2 = v10;
  if (v5) {
    goto LABEL_16;
  }
  return v4;
}

uint64_t SocketSetKeepAlive(int a1, int a2, int a3)
{
  return SocketSetKeepAliveEx(a1, a2, a2, a3);
}

uint64_t SocketSetKeepAliveEx(int a1, int a2, int a3, int a4)
{
  BOOL v9 = a2 > 0 && a4 > 0;
  int v14 = v9;
  if (setsockopt(a1, 0xFFFF, 8, &v14, 4u))
  {
    if (!*__error()) {
      return 4294960596;
    }
    uint64_t result = *__error();
    if (result) {
      return result;
    }
  }
  if (!v14) {
    return 0;
  }
  if (a2 <= 1) {
    int v11 = 1;
  }
  else {
    int v11 = a2;
  }
  int v14 = v11;
  if (setsockopt(a1, 6, 16, &v14, 4u) && *__error()) {
    __error();
  }
  if (a3 <= 1) {
    int v12 = 1;
  }
  else {
    int v12 = a3;
  }
  int v14 = v12;
  if (setsockopt(a1, 6, 257, &v14, 4u) && *__error()) {
    __error();
  }
  if (a4 <= 1) {
    int v13 = 1;
  }
  else {
    int v13 = a4;
  }
  int v14 = v13;
  uint64_t result = setsockopt(a1, 6, 258, &v14, 4u);
  if (result)
  {
    if (*__error()) {
      __error();
    }
    return 0;
  }
  return result;
}

uint64_t SocketSetNotSentLowWatermark(int a1, unint64_t a2)
{
  if (a2 >> 31) {
    return 4294960586;
  }
  int v3 = a2;
  uint64_t result = setsockopt(a1, 6, 513, &v3, 4u);
  if (result)
  {
    if (*__error()) {
      return *__error();
    }
    else {
      return 4294960596;
    }
  }
  return result;
}

uint64_t SocketSetPacketTimestamps(int a1, int a2)
{
  int v3 = a2;
  uint64_t result = setsockopt(a1, 0xFFFF, 2048, &v3, 4u);
  if (result)
  {
    if (*__error()) {
      return *__error();
    }
    else {
      return 4294960596;
    }
  }
  return result;
}

uint64_t SocketSetQoS(int a1, int a2)
{
  if (a2)
  {
    uint64_t result = 4294960591;
    switch(a2)
    {
      case 1:
        int v5 = 32;
        goto LABEL_8;
      case 2:
      case 10:
      case 12:
        int v5 = 128;
        goto LABEL_8;
      case 3:
      case 11:
        goto LABEL_6;
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
        return result;
      default:
        if (a2 != 20) {
          return result;
        }
LABEL_6:
        int v5 = 192;
LABEL_8:
        int v12 = v5;
        break;
    }
  }
  else
  {
    int v12 = 0;
  }
  int Family = SocketGetFamily(a1);
  if (Family == 30)
  {
    int v7 = a1;
    int v8 = 41;
    int v9 = 36;
    goto LABEL_13;
  }
  if (Family == 2)
  {
    int v7 = a1;
    int v8 = 0;
    int v9 = 3;
LABEL_13:
    if (setsockopt(v7, v8, v9, &v12, 4u) && *__error()) {
      __error();
    }
  }
  if (a2)
  {
    switch(a2)
    {
      case 1:
        int v10 = 200;
        goto LABEL_26;
      case 2:
      case 12:
        int v10 = 700;
        goto LABEL_26;
      case 3:
      case 11:
        int v10 = 800;
        goto LABEL_26;
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
        return 4294960591;
      case 10:
        int v10 = 500;
        goto LABEL_26;
      default:
        if (a2 != 20) {
          return 4294960591;
        }
        int v10 = 900;
LABEL_26:
        int v11 = v10;
        break;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (setsockopt(a1, 0xFFFF, 4230, &v11, 4u))
  {
    if (*__error()) {
      __error();
    }
  }
  return 0;
}

uint64_t SocketSetTCPTimeout(int a1, int a2)
{
  int v4 = a2;
  if (setsockopt(a1, 6, 533, &v4, 4u) && *__error()) {
    __error();
  }
  uint64_t result = setsockopt(a1, 6, 128, &v4, 4u);
  if (result)
  {
    if (*__error()) {
      return *__error();
    }
    else {
      return 4294960596;
    }
  }
  return result;
}

uint64_t SocketJoinMulticast(int a1, uint64_t a2, char *a3, unsigned int a4)
{
  return _SocketJoinOrLeaveMulticast(a1, a2, a3, a4, 1);
}

uint64_t _SocketJoinOrLeaveMulticast(int a1, uint64_t a2, char *a3, unsigned int a4, int a5)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  int v7 = *(unsigned __int8 *)(a2 + 1);
  if (v7 != 30)
  {
    if (v7 != 2) {
      return 4294960561;
    }
    uint64_t v13 = 0;
    LODWORD(v13) = *(_DWORD *)(a2 + 4);
    if (a3)
    {
      *(_OWORD *)int v14 = 0u;
      long long v15 = 0u;
      __strlcpy_chk();
      goto LABEL_15;
    }
    if (!a4)
    {
      HIDWORD(v13) = 0;
      goto LABEL_20;
    }
    *(_OWORD *)int v14 = 0u;
    long long v15 = 0u;
    if (if_indextoname(a4, v14))
    {
LABEL_15:
      if (ioctl(a1, 0xC0206921uLL, v14, v13))
      {
        if (!*__error()) {
          return 4294960596;
        }
        uint64_t result = *__error();
        if (result) {
          return result;
        }
      }
      HIDWORD(v13) = DWORD1(v15);
LABEL_20:
      uint64_t result = setsockopt(a1, 0, 13, &v13, 8u);
      if (a5)
      {
        int v9 = (char *)&v13;
        int v10 = a1;
        int v11 = 0;
        socklen_t v12 = 8;
        goto LABEL_22;
      }
      goto LABEL_23;
    }
    return 4294960552;
  }
  *(_OWORD *)int v14 = *(_OWORD *)(a2 + 8);
  if (!a3 || a4)
  {
    LODWORD(v15) = a4;
  }
  else
  {
    LODWORD(v15) = if_nametoindex(a3);
    if (!v15) {
      return 4294960552;
    }
  }
  uint64_t result = setsockopt(a1, 41, 13, v14, 0x14u);
  if (a5)
  {
    int v9 = v14;
    int v10 = a1;
    int v11 = 41;
    socklen_t v12 = 20;
LABEL_22:
    uint64_t result = setsockopt(v10, v11, 12, v9, v12);
  }
LABEL_23:
  if (!result) {
    return result;
  }
  if (*__error()) {
    return *__error();
  }
  return 4294960596;
}

uint64_t SocketLeaveMulticast(int a1, uint64_t a2, char *a3, unsigned int a4)
{
  return _SocketJoinOrLeaveMulticast(a1, a2, a3, a4, 0);
}

uint64_t SocketSetMulticastInterface(int a1, const char *a2, int a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  HIDWORD(v11) = a3;
  int Family = SocketGetFamily(a1);
  if (Family != 30)
  {
    if (Family != 2) {
      return 4294960561;
    }
    *(_OWORD *)socklen_t v12 = 0u;
    long long v13 = 0u;
    LODWORD(v11) = 0;
    if (!a2 || a3 || (HIDWORD(v11) = if_nametoindex(a2)) != 0)
    {
      uint64_t result = setsockopt(a1, 0, 66, (char *)&v11 + 4, 4u);
      if (!result) {
        return result;
      }
      if (*__error() && !*__error()) {
        return 0;
      }
      if (a2)
      {
        *(_OWORD *)socklen_t v12 = 0u;
        long long v13 = 0u;
        __strlcpy_chk();
        if (ioctl(a1, 0xC0206921uLL, v12))
        {
          if (!*__error()) {
            return 4294960596;
          }
          uint64_t result = *__error();
          if (result) {
            return result;
          }
        }
        int v8 = (char *)&v13 + 4;
        goto LABEL_27;
      }
      if (!HIDWORD(v11))
      {
        LODWORD(v11) = 0;
        int v8 = (char *)&v11;
LABEL_27:
        int v9 = a1;
        int v10 = 0;
        goto LABEL_28;
      }
      *(_OWORD *)socklen_t v12 = 0u;
      long long v13 = 0u;
      if (if_indextoname(HIDWORD(v11), v12))
      {
        if (ioctl(a1, 0xC0206921uLL, v12, v11))
        {
          if (!*__error()) {
            return 4294960596;
          }
          uint64_t result = *__error();
          if (result) {
            return result;
          }
        }
        int v8 = (char *)&v13 + 4;
        goto LABEL_27;
      }
    }
    return 4294960552;
  }
  if (a2)
  {
    if (!a3)
    {
      HIDWORD(v11) = if_nametoindex(a2);
      if (!HIDWORD(v11)) {
        return 4294960552;
      }
    }
  }
  int v8 = (char *)&v11 + 4;
  int v9 = a1;
  int v10 = 41;
LABEL_28:
  uint64_t result = setsockopt(v9, v10, 9, v8, 4u);
  if (!result) {
    return result;
  }
  if (*__error()) {
    return *__error();
  }
  return 4294960596;
}

uint64_t SocketSetMulticastLoop(int a1)
{
  int Family = SocketGetFamily(a1);
  if (Family == 30)
  {
    int v8 = 1;
    int v3 = (char *)&v8;
    int v4 = a1;
    int v5 = 41;
    socklen_t v6 = 4;
  }
  else
  {
    if (Family != 2) {
      return 4294960561;
    }
    char v9 = 1;
    int v3 = &v9;
    int v4 = a1;
    int v5 = 0;
    socklen_t v6 = 1;
  }
  uint64_t result = setsockopt(v4, v5, 11, v3, v6);
  if (result)
  {
    if (*__error()) {
      return *__error();
    }
    else {
      return 4294960596;
    }
  }
  return result;
}

uint64_t SockAddrToString(uint64_t a1, char a2, char *a3)
{
  int v4 = *(unsigned __int8 *)(a1 + 1);
  if (v4 == 30)
  {
    if (a2) {
      signed int v6 = -1;
    }
    else {
      signed int v6 = bswap32(*(unsigned __int16 *)(a1 + 2)) >> 16;
    }
    if (v6 > 0 || (a2 & 4) == 0) {
      int v9 = v6;
    }
    else {
      int v9 = -2;
    }
    if ((a2 & 2) != 0) {
      unsigned int v10 = 0;
    }
    else {
      unsigned int v10 = *(_DWORD *)(a1 + 24);
    }
    IPv6AddressToCString((unsigned char *)(a1 + 8), v10, v9, 0xFFFFFFFF, a3, (a2 & 8) != 0);
  }
  else
  {
    if (v4 != 2) {
      return 4294960561;
    }
    if (a2) {
      unsigned int v5 = 0;
    }
    else {
      unsigned int v5 = bswap32(*(unsigned __int16 *)(a1 + 2)) >> 16;
    }
    IPv4AddressToCString(bswap32(*(_DWORD *)(a1 + 4)), v5, a3);
  }
  return 0;
}

uint64_t SockAddrCompareAddr(void *a1, uint64_t a2)
{
  return SockAddrCompareAddrEx(a1, a2, 0);
}

uint64_t SockAddrConvertToIPv6(long long *a1, uint64_t a2)
{
  int v3 = *((unsigned __int8 *)a1 + 1);
  if (v3 == 30)
  {
    if (a1 == (long long *)a2)
    {
      return 0;
    }
    else
    {
      uint64_t result = 0;
      long long v7 = *a1;
      uint64_t v8 = *((void *)a1 + 2);
      *(_DWORD *)(a2 + 24) = *((_DWORD *)a1 + 6);
      *(void *)(a2 + 16) = v8;
      *(_OWORD *)a2 = v7;
    }
  }
  else if (v3 == 2)
  {
    uint64_t result = 0;
    unsigned int v5 = *((_DWORD *)a1 + 1);
    __int16 v6 = *((_WORD *)a1 + 1);
    *(void *)(a2 + 8) = 0;
    *(_WORD *)a2 = 7708;
    *(_WORD *)(a2 + 2) = v6;
    *(_DWORD *)(a2 + 4) = 0;
    *(_DWORD *)(a2 + 16) = -65536;
    *(void *)(a2 + 20) = v5;
  }
  else
  {
    return 4294960561;
  }
  return result;
}

unint64_t SockAddrToDeviceID(long long *a1)
{
  v2[0] = 0;
  v2[1] = 0;
  int v4 = 0;
  uint64_t v3 = 0;
  SockAddrSimplify(a1, (uint64_t)v2);
  if (BYTE1(v2[0]) == 30) {
    return ((unint64_t)BYTE2(v3) << 40) | ((unint64_t)BYTE1(v3) << 48) | ((unint64_t)BYTE3(v3) << 32) | ((unint64_t)BYTE4(v3) << 24) | ((unint64_t)BYTE5(v3) << 16) | ((unint64_t)BYTE6(v3) << 8) | HIBYTE(v3) | 0x600000000000000;
  }
  unint64_t result = 0;
  if (BYTE1(v2[0]) == 2) {
    return bswap32(HIDWORD(v2[0])) | 0x400000000000000;
  }
  return result;
}

uint64_t IsIPv4MartianAddress(int a1)
{
  int v3 = a1;
  int v1 = (unsigned __int8 *)&IsIPv4MartianAddress_kMartianRules;
  while (!_EqualBits((unsigned __int8 *)&v3, v1, v1[4]))
  {
    v1 += 5;
    if (v1 >= (unsigned __int8 *)qword_18E4187EE) {
      return 0;
    }
  }
  return 1;
}

BOOL _EqualBits(unsigned __int8 *a1, unsigned __int8 *a2, unsigned int a3)
{
  if (a3 >= 8)
  {
    uint64_t v3 = ((a3 - 8) >> 3) + 1;
    int v4 = &a2[v3];
    unsigned int v5 = &a1[v3];
    while (*a1 == *a2)
    {
      ++a2;
      ++a1;
      LOBYTE(a3) = a3 - 8;
      if (a3 <= 7u)
      {
        a1 = v5;
        a2 = v4;
        return !(_BYTE)a3 || ((-256 >> a3) & (*a2 ^ *a1)) == 0;
      }
    }
    return 0;
  }
  return !(_BYTE)a3 || ((-256 >> a3) & (*a2 ^ *a1)) == 0;
}

BOOL IsIPv6MartianAddress(unsigned __int8 *a1)
{
  return IsIPv6MartianAddressEx(a1, 0);
}

BOOL IsIPv6MartianAddressEx(unsigned __int8 *a1, char a2)
{
  uint64_t v4 = 0;
  for (uint64_t i = &byte_1E55BF748; !_EqualBits(a1, *((unsigned __int8 **)i - 1), *i); i += 16)
  {
    if (++v4 == 23) {
      return 0;
    }
  }
  if ((a2 & 1) != 0 && !v4 || (a2 & 2) != 0 && v4 == 20) {
    return 0;
  }
  return (a2 & 4) == 0 || v4 != 19;
}

BOOL IsGlobalIPv4Address(unsigned int a1)
{
  unsigned int v1 = bswap32(a1);
  unsigned int v2 = v1 & 0xFF000000;
  if ((v1 & 0xFFFF0000) == 0xC0A80000 || v2 == 167772160 || (v1 & 0xFFF00000) == -1408237568) {
    return 0;
  }
  BOOL v6 = v2 != 2130706432 && v2 >> 29 != 7;
  if ((v1 & 0xFFFF0000) == 0xA9FE0000) {
    BOOL v6 = 0;
  }
  return v1 >= 0x10000 && v6;
}

BOOL IsPrivateIPv4Address(unsigned int a1)
{
  unsigned int v1 = bswap32(a1);
  BOOL v2 = HIBYTE(v1) == 10 || v1 >> 20 == 2753;
  unsigned int v3 = HIWORD(v1);
  return v2 || v3 == 49320;
}

BOOL IsRoutableIPv4Address(unsigned int a1)
{
  unsigned int v1 = bswap32(a1) >> 16;
  if (v1) {
    BOOL v2 = v1 == 43518;
  }
  else {
    BOOL v2 = 1;
  }
  return !v2;
}

uint64_t CompareMACAddresses(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = bswap32(*(_DWORD *)a1);
  unsigned int v3 = bswap32(*(_DWORD *)a2);
  if (v2 == v3)
  {
    unsigned int v2 = bswap32(*(unsigned __int16 *)(a1 + 4)) >> 16;
    unsigned int v4 = bswap32(*(unsigned __int16 *)(a2 + 4));
    if (v2 == HIWORD(v4)) {
      return 0;
    }
    unsigned int v3 = HIWORD(v4);
  }
  if (v2 < v3) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 1;
  }
}

BOOL IsWiFiNetworkInterface(char *a1)
{
  int v3 = 0;
  SocketGetInterfaceInfo(-1, a1, 0, 0, 0, 0, 0, 0, 0, (uint64_t)&v3);
  BOOL result = 1;
  if ((v3 - 2) > 0x3E || ((1 << (v3 - 2)) & 0x4000000000000005) == 0) {
    return v3 == 128;
  }
  return result;
}

uint64_t GetPrimaryIPAddress(uint64_t a1, uint64_t a2)
{
  return GetPrimaryIPAddressEx(0, a1, a2);
}

uint64_t GetPrimaryIPAddressEx(const __SCDynamicStore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    unsigned int v5 = a1;
LABEL_3:
    BOOL v6 = 0;
    goto LABEL_5;
  }
  unsigned int v5 = SCDynamicStoreCreate(0, @"NetUtils:GetPrimaryIPAddress", 0, 0);
  BOOL v6 = v5;
  if (!v5)
  {
    if (!SCError()) {
      return 4294960596;
    }
    uint64_t result = SCError();
    if (result) {
      return result;
    }
    unsigned int v5 = 0;
    goto LABEL_3;
  }
LABEL_5:
  CFStringRef v7 = (const __CFString *)*MEMORY[0x1E4F41AC8];
  CFStringRef v8 = (const __CFString *)*MEMORY[0x1E4F41B10];
  CFStringRef NetworkGlobalEntity = SCDynamicStoreKeyCreateNetworkGlobalEntity(0, (CFStringRef)*MEMORY[0x1E4F41AC8], (CFStringRef)*MEMORY[0x1E4F41B10]);
  unsigned int v10 = (CFStringRef *)MEMORY[0x1E4F41B18];
  if (NetworkGlobalEntity)
  {
    CFStringRef v11 = NetworkGlobalEntity;
    CFDictionaryRef v12 = (const __CFDictionary *)SCDynamicStoreCopyValue(v5, NetworkGlobalEntity);
    if (v12)
    {
      CFDictionaryRef v13 = v12;
      CFTypeID v14 = CFGetTypeID(v12);
      if (v14 == CFDictionaryGetTypeID())
      {
        long long v15 = (const void *)*MEMORY[0x1E4F41AD8];
        CFTypeID TypeID = CFStringGetTypeID();
        TypedCFDataRef Value = CFDictionaryGetTypedValue(v13, v15, TypeID, 0);
        CFStringRef v18 = (const __CFString *)TypedValue;
        if (TypedValue) {
          CFRetain(TypedValue);
        }
      }
      else
      {
        CFStringRef v18 = 0;
      }
      CFRelease(v13);
      CFRelease(v11);
      if (v18) {
        goto LABEL_25;
      }
    }
    else
    {
      CFRelease(v11);
    }
  }
  CFStringRef v19 = SCDynamicStoreKeyCreateNetworkGlobalEntity(0, v7, *v10);
  if (v19)
  {
    CFStringRef v20 = v19;
    CFDictionaryRef v21 = (const __CFDictionary *)SCDynamicStoreCopyValue(v5, v19);
    if (v21)
    {
      CFDictionaryRef v22 = v21;
      CFTypeID v23 = CFGetTypeID(v21);
      if (v23 == CFDictionaryGetTypeID())
      {
        BOOL v24 = (const void *)*MEMORY[0x1E4F41AD8];
        CFTypeID v25 = CFStringGetTypeID();
        CFDictionaryRef v26 = CFDictionaryGetTypedValue(v22, v24, v25, 0);
        CFStringRef v18 = (const __CFString *)v26;
        if (v26) {
          CFRetain(v26);
        }
      }
      else
      {
        CFStringRef v18 = 0;
      }
      CFRelease(v22);
      CFRelease(v20);
      if (v18) {
        goto LABEL_25;
      }
    }
    else
    {
      CFRelease(v20);
    }
  }
  CFStringRef v18 = @"en0";
  CFRetain(@"en0");
LABEL_25:
  if (a2)
  {
    *(unsigned char *)(a2 + 1) = 0;
    CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, v7, v18, v8);
    if (NetworkInterfaceEntity)
    {
      CFStringRef v29 = NetworkInterfaceEntity;
      CFDictionaryRef v30 = (const __CFDictionary *)SCDynamicStoreCopyValue(v5, NetworkInterfaceEntity);
      if (v30)
      {
        CFDictionaryRef v31 = v30;
        CFTypeID v32 = CFGetTypeID(v30);
        if (v32 == CFDictionaryGetTypeID())
        {
          int v33 = (const void *)*MEMORY[0x1E4F41C60];
          CFTypeID v34 = CFArrayGetTypeID();
          CFDictionaryRef v35 = CFDictionaryGetTypedValue(v31, v33, v34, 0);
          if (v35)
          {
            CFArrayRef v36 = v35;
            if (CFArrayGetCount(v35) >= 1)
            {
              CFTypeID v37 = CFStringGetTypeID();
              CFStringRef TypedValueAtIndex = (const __CFString *)CFArrayGetTypedValueAtIndex(v36, 0, v37, 0);
              if (TypedValueAtIndex)
              {
                buffer[0] = 0;
                CFStringGetCString(TypedValueAtIndex, buffer, 128, 0x8000100u);
                StringToSockAddr((unsigned __int8 *)buffer, a2, 0x1CuLL, 0);
                if (*(unsigned char *)(a2 + 1) != 2) {
                  *(unsigned char *)(a2 + 1) = 0;
                }
              }
            }
          }
        }
        CFRelease(v31);
      }
      CFRelease(v29);
    }
  }
  if (a3)
  {
    *(unsigned char *)(a3 + 1) = 0;
    CFStringRef v39 = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, v7, v18, *v10);
    if (v39)
    {
      CFStringRef v40 = v39;
      CFDictionaryRef v41 = (const __CFDictionary *)SCDynamicStoreCopyValue(v5, v39);
      if (v41)
      {
        CFDictionaryRef v42 = v41;
        CFTypeID v43 = CFGetTypeID(v41);
        if (v43 == CFDictionaryGetTypeID())
        {
          long long v44 = (const void *)*MEMORY[0x1E4F41CC0];
          CFTypeID v45 = CFArrayGetTypeID();
          CFDictionaryRef v46 = CFDictionaryGetTypedValue(v42, v44, v45, 0);
          if (v46)
          {
            CFArrayRef v47 = v46;
            if (CFArrayGetCount(v46) >= 1)
            {
              CFTypeID v48 = CFStringGetTypeID();
              CFStringRef v49 = (const __CFString *)CFArrayGetTypedValueAtIndex(v47, 0, v48, 0);
              if (v49)
              {
                buffer[0] = 0;
                CFStringGetCString(v49, buffer, 128, 0x8000100u);
                StringToSockAddr((unsigned __int8 *)buffer, a3, 0x1CuLL, 0);
                if (*(unsigned char *)(a3 + 1) == 30)
                {
                  if (*(unsigned __int8 *)(a3 + 8) == 254 && (*(unsigned char *)(a3 + 9) & 0xC0) == 0x80)
                  {
                    buffer[0] = 0;
                    CFStringGetCString(v18, buffer, 128, 0x8000100u);
                    *(_DWORD *)(a3 + 24) = if_nametoindex(buffer);
                  }
                }
                else
                {
                  *(unsigned char *)(a3 + 1) = 0;
                }
              }
            }
          }
        }
        CFRelease(v42);
      }
      CFRelease(v40);
    }
  }
  if (v18) {
    CFRelease(v18);
  }
  if (v6) {
    CFRelease(v6);
  }
  return 0;
}

uint64_t GetLocalHostName(char *a1, size_t a2)
{
  CFStringRef v4 = SCDynamicStoreCopyLocalHostName(0);
  if (!v4) {
    return 4294960596;
  }
  CFStringRef v5 = v4;
  int CString = CFStringGetCString(v4, a1, a2, 0x8000100u);
  CFRelease(v5);
  if (!CString) {
    return 4294960596;
  }
  if (strlcat(a1, ".local", a2) >= a2) {
    return 4294960553;
  }
  return 0;
}

uint64_t GetPeerMACAddress(uint64_t a1, void *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  size_t size = 0;
  int v4 = 100;
  while (1)
  {
    *(void *)CFStringRef v18 = 0x1100000004;
    int v5 = *(unsigned __int8 *)(a1 + 1);
    int v19 = 0;
    int v20 = v5;
    uint64_t v21 = 0x40000000002;
    if (sysctl(v18, 6u, 0, &size, 0, 0))
    {
      if (!*__error()) {
        return 4294960596;
      }
      uint64_t v6 = *__error();
      if (v6) {
        return v6;
      }
    }
    if (!size) {
      return 4294960569;
    }
    CFStringRef v7 = (unsigned __int16 *)malloc_type_malloc(size, 0xA1BE9854uLL);
    if (!v7) {
      return 4294960568;
    }
    CFStringRef v8 = v7;
    if (!sysctl(v18, 6u, v7, &size, 0, 0)) {
      break;
    }
    if (*__error())
    {
      uint64_t v6 = *__error();
      if (!v6) {
        break;
      }
    }
    else
    {
      uint64_t v6 = 4294960596;
    }
    free(v8);
    if (!--v4) {
      return v6;
    }
  }
  if ((uint64_t)size < 1)
  {
LABEL_27:
    uint64_t v6 = 4294960569;
  }
  else
  {
    unint64_t v9 = (unint64_t)v8 + size;
    unsigned int v10 = v8;
    while (1)
    {
      CFStringRef v11 = v10 + 46;
      uint64_t v12 = *((unsigned __int8 *)v10 + 92);
      uint64_t v13 = (v12 & 3) != 0 ? (v12 | 3) + 1 : *((unsigned __int8 *)v10 + 92);
      uint64_t v14 = *((unsigned char *)v10 + 92) ? v13 : 4;
      long long v15 = (char *)v11 + v14;
      if (*((unsigned char *)v11 + v14 + 1) == 18
        && v15[6] == 6
        && *((_WORD *)v15 + 1)
        && !SockAddrCompareAddrEx(v11, a1, 0))
      {
        break;
      }
      unsigned int v10 = (unsigned __int16 *)((char *)v10 + *v10);
      if ((unint64_t)v10 >= v9) {
        goto LABEL_27;
      }
    }
    memcpy(a2, &v15[v15[5] + 8], v15[6]);
    uint64_t v6 = 0;
  }
  free(v8);
  return v6;
}

uint64_t _NTPClockGetTypeID()
{
  uint64_t result = _CFRuntimeRegisterClass();
  gNTPClockCFTypeID TypeID = result;
  return result;
}

void _NTPClockFinalize(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 80);
  if (v2)
  {
    free(v2);
    *(void *)(a1 + 80) = 0;
  }
}

uint64_t NTPClockCreate(uint64_t *a1)
{
  if (gNTPClockInitOnce != -1) {
    dispatch_once_f(&gNTPClockInitOnce, 0, (dispatch_function_t)_NTPClockGetTypeID);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance) {
    return 4294960568;
  }
  uint64_t v3 = Instance;
  bzero((void *)(Instance + 16), 0xED0uLL);
  *(void *)(v3 + 56) = &gLogCategory_NTPClockCore;
  if (UpTicksPerSecond_sOnce != -1) {
    dispatch_once_f(&UpTicksPerSecond_sOnce, &UpTicksPerSecond_sTicksPerSecond, (dispatch_function_t)_UpTicksPerSecondInit);
  }
  unint64_t v4 = UpTicksPerSecond_sTicksPerSecond;
  *(void *)(v3 + 96) = UpTicksPerSecond_sTicksPerSecond;
  if (HIDWORD(v4))
  {
    char v6 = -1;
    do
    {
      ++v6;
      BOOL v7 = v4 > 3;
      v4 >>= 1;
    }
    while (v7);
    LOBYTE(v5) = ~v6;
  }
  else
  {
    unsigned int v5 = __clz(v4 | 1) - 31;
  }
  uint64_t result = 0;
  *(unsigned char *)(v3 + 76) = v5;
  *(void *)(v3 + 224) = -1;
  *(void *)(v3 + 232) = -1;
  *a1 = v3;
  return result;
}

uint64_t NTPClockStop(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)(a1 + 216);
  int v10 = *(_DWORD *)(a1 + 228);
  if (v9)
  {
    SendSelfConnectedLoopbackMessage(*(_DWORD *)(a1 + 224), "q", 1uLL);
    pthread_join(*(pthread_t *)(a1 + 208), 0);
    *(void *)(a1 + 216) = 0;
  }
  int v11 = *(_DWORD *)(a1 + 224);
  if ((v11 & 0x80000000) == 0)
  {
    if (close(v11) && *__error()) {
      __error();
    }
    *(_DWORD *)(a1 + 224) = -1;
  }
  int v12 = *(_DWORD *)(a1 + 228);
  if ((v12 & 0x80000000) == 0)
  {
    if (close(v12) && *__error()) {
      __error();
    }
    *(_DWORD *)(a1 + 228) = -1;
  }
  int v13 = *(_DWORD *)(a1 + 232);
  if ((v13 & 0x80000000) == 0)
  {
    if (close(v13) && *__error()) {
      __error();
    }
    *(_DWORD *)(a1 + 232) = -1;
  }
  int v14 = *(_DWORD *)(a1 + 236);
  if ((v14 & 0x80000000) == 0)
  {
    if (close(v14) && *__error()) {
      __error();
    }
    *(_DWORD *)(a1 + 236) = -1;
  }
  uint64_t result = *(void *)(a1 + 200);
  if (result)
  {
    uint64_t result = pthread_mutex_destroy((pthread_mutex_t *)result);
    *(void *)(a1 + 200) = 0;
  }
  *(_DWORD *)(a1 + 52) = 0;
  if (v9)
  {
    uint64_t result = *(void *)(a1 + 56);
    if (*(int *)result <= 30)
    {
      if (*(_DWORD *)result == -1)
      {
        uint64_t result = _LogCategory_Initialize(result, 0x1Eu);
        if (!result) {
          return result;
        }
        uint64_t result = *(void *)(a1 + 56);
      }
      uint64_t v16 = "server";
      if (v10 >= 0) {
        uint64_t v16 = "client";
      }
      return LogPrintF(result, (uint64_t)"void NTPClockStop(NTPClockRef)", 0x1Eu, (uint64_t)"NTP %s stopped\n", a5, a6, a7, a8, (uint64_t)v16);
    }
  }
  return result;
}

uint64_t NTPClockSetEpoch(uint64_t result, int a2)
{
  *(_DWORD *)(result + 16) = a2;
  return result;
}

uint64_t NTPClockSetLogging(uint64_t result, uint64_t a2)
{
  *(void *)(result + 56) = a2;
  return result;
}

uint64_t NTPClockSetP2P(uint64_t result, char a2)
{
  *(unsigned char *)(result + 64) = a2;
  return result;
}

uint64_t NTPClockSetPeer(uint64_t result, long long *a2, signed int a3)
{
  int v3 = *((unsigned __int8 *)a2 + 1);
  if (*((unsigned char *)a2 + 1))
  {
    if (v3 == 30)
    {
      long long v4 = *a2;
      uint64_t v5 = *((void *)a2 + 2);
      *(_DWORD *)(result + 44) = *((_DWORD *)a2 + 6);
      *(void *)(result + 36) = v5;
      goto LABEL_7;
    }
    if (v3 == 2)
    {
      long long v4 = *a2;
LABEL_7:
      *(_OWORD *)(result + 20) = v4;
    }
  }
  else
  {
    *(unsigned char *)(result + 21) = 0;
  }
  if (a3 >= 1)
  {
    int v6 = *((unsigned __int8 *)a2 + 1);
    if ((v6 == 30 || v6 == 2) && !*((_WORD *)a2 + 1))
    {
      int v7 = *(unsigned __int8 *)(result + 21);
      if (v7 == 30 || v7 == 2) {
        *(_WORD *)(result + 22) = bswap32(a3) >> 16;
      }
    }
  }
  return result;
}

uint64_t NTPClockGetListenPort(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t NTPClockSetListenPort(uint64_t result, int a2)
{
  *(_DWORD *)(result + 48) = a2;
  return result;
}

uint64_t NTPClockSetQoSDisabled(uint64_t result, char a2)
{
  *(unsigned char *)(result + 77) = a2;
  return result;
}

uint64_t NTPClockSetRTCP(uint64_t result, char a2)
{
  *(unsigned char *)(result + 78) = a2;
  return result;
}

uint64_t NTPClockSetThreadName(uint64_t a1, char *__s1)
{
  if (__s1)
  {
    int v3 = strdup(__s1);
    if (!v3) {
      return 4294960568;
    }
  }
  else
  {
    int v3 = 0;
  }
  uint64_t v5 = *(void **)(a1 + 80);
  if (v5) {
    free(v5);
  }
  uint64_t result = 0;
  *(void *)(a1 + 80) = v3;
  return result;
}

uint64_t NTPClockSetThreadPriority(uint64_t result, int a2)
{
  *(_DWORD *)(result + 88) = a2;
  *(unsigned char *)(result + 92) = 1;
  return result;
}

uint64_t NTPClockSetUpTicksConvertHandler(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 104) = a2;
  *(void *)(result + 112) = a3;
  return result;
}

uint64_t NTPClockSetUpTicksPerSecondHandler(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 120) = a2;
  *(void *)(result + 128) = a3;
  return result;
}

uint64_t NTPClockStartClient(uint64_t a1)
{
  uint64_t v2 = a1 + 136;
  uint64_t v10 = pthread_mutex_init((pthread_mutex_t *)(a1 + 136), 0);
  if (v10) {
    goto LABEL_56;
  }
  *(void *)(a1 + 200) = v2;
  if (*(unsigned char *)(a1 + 78))
  {
    *(unsigned char *)(a1 + 241) = -46;
    *(_WORD *)(a1 + 242) = 1792;
    uint64_t v11 = a1 + 264;
    uint64_t v12 = a1 + 268;
    char v13 = 0x80;
    uint64_t v14 = 32;
  }
  else
  {
    uint64_t v11 = a1 + 280;
    uint64_t v12 = a1 + 284;
    char v13 = 35;
    uint64_t v14 = 48;
  }
  *(unsigned char *)(a1 + 240) = v13;
  *(void *)(a1 + 288) = v11;
  *(void *)(a1 + 296) = v12;
  *(void *)(a1 + 304) = v14;
  *(_DWORD *)(a1 + 376) = 0;
  *(void *)(a1 + 1024) = 0;
  *(void *)(a1 + 3592) = 0;
  *(void *)(a1 + 68) = 0x44C000003E8;
  *(void *)(a1 + 3624) = 0;
  *(_OWORD *)(a1 + 3600) = 0u;
  *(unsigned char *)(a1 + 3616) = 0;
  *(_OWORD *)(a1 + 3632) = xmmword_18E416F20;
  *(_OWORD *)(a1 + 3648) = 0u;
  *(_OWORD *)(a1 + 3664) = xmmword_18E416F20;
  *(void *)(a1 + 3680) = 0;
  *(_DWORD *)(a1 + 3688) = 0;
  *(_OWORD *)(a1 + 3696) = xmmword_18E416F30;
  *(void *)(a1 + 3712) = 0x10000000000000;
  *(void *)(a1 + 3736) = 0;
  *(_OWORD *)(a1 + 3720) = 0u;
  *(void *)(a1 + 3744) = mach_absolute_time();
  unint64_t v15 = *(void *)(a1 + 96);
  *(void *)(a1 + 3752) = 0xFFFFFFFFFFFFFFFFLL / v15;
  *(void *)(a1 + 3760) = v15;
  *(_OWORD *)(a1 + 3768) = 0u;
  *(void *)(a1 + 3784) = 0xFFFFFFFFFFFFFFFFLL / v15;
  *(_OWORD *)(a1 + 3792) = 0u;
  int v16 = *(unsigned __int8 *)(a1 + 21);
  if ((v16 == 30 || v16 == 2) && !*(_WORD *)(a1 + 22)) {
    *(_WORD *)(a1 + 22) = 25115;
  }
  int v45 = 0;
  uint64_t v10 = UDPClientSocketOpen(0, (long long *)(a1 + 20), 0, *(_DWORD *)(a1 + 48), (unsigned int *)(a1 + 52), &v45);
  if (v10) {
    goto LABEL_56;
  }
  int v17 = v45;
  *(_DWORD *)(a1 + 228) = v45;
  if (*(unsigned char *)(a1 + 64)) {
    SocketSetP2P(v17, 1);
  }
  if (!*(unsigned char *)(a1 + 77)) {
    SocketSetQoS(v17, 20);
  }
  SocketSetPacketTimestamps(v17, 1);
  v46.time_t tv_sec = 0;
  *(void *)&v46.tv_useCC_SHA1_CTX c = 0;
  uint64_t v22 = *(int **)(a1 + 56);
  if (*v22 > 30) {
    goto LABEL_18;
  }
  if (*v22 == -1)
  {
    if (!_LogCategory_Initialize((uint64_t)v22, 0x1Eu)) {
      goto LABEL_18;
    }
    uint64_t v22 = *(int **)(a1 + 56);
  }
  LogPrintF((uint64_t)v22, (uint64_t)"OSStatus _NTPClockClientNegotiate(NTPClockRef)", 0x1Eu, (uint64_t)"NTP client negotiating with %##a\n", v18, v19, v20, v21, a1 + 20);
LABEL_18:
  uint64_t v23 = mach_absolute_time();
  memset(&v47, 0, sizeof(v47));
  if (SecondsToUpTicks_sOnce != -1) {
    dispatch_once_f(&SecondsToUpTicks_sOnce, &SecondsToUpTicks_sMultiplier, (dispatch_function_t)_SecondsToUpTicksInit);
  }
  unsigned int v24 = 0;
  LODWORD(v10) = 0;
  uint64_t v25 = v23 + 10 * SecondsToUpTicks_sMultiplier;
  do
  {
    while (1)
    {
LABEL_21:
      if (mach_absolute_time() >= v25)
      {
        uint64_t v10 = 4294960574;
        goto LABEL_44;
      }
      if (v10 == -6757) {
        break;
      }
      int v26 = _NTPClockClientSendRequest(a1);
      if (!v26) {
        break;
      }
      LODWORD(v10) = v26;
      usleep(0x186A0u);
    }
    do
    {
      int v27 = *(_DWORD *)(a1 + 228);
      if (__darwin_check_fd_set_overflow(v27, &v47, 0)) {
        *(__int32_t *)((char *)v47.fds_bits + (((unint64_t)v27 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << v27;
      }
      v46.time_t tv_sec = 0;
      v46.tv_useCC_SHA1_CTX c = 200000;
      int v28 = select(*(_DWORD *)(a1 + 228) + 1, &v47, 0, 0, &v46);
      if (v28 > 0) {
        goto LABEL_32;
      }
      if (!v28)
      {
        LODWORD(v10) = -6722;
        goto LABEL_38;
      }
      if (!*__error())
      {
        LODWORD(v10) = -6700;
LABEL_38:
        ++*(_DWORD *)(a1 + 3800);
        int v33 = *(int **)(a1 + 56);
        if (*v33 > 50) {
          goto LABEL_21;
        }
        if (*v33 != -1) {
          goto LABEL_40;
        }
        if (_LogCategory_Initialize((uint64_t)v33, 0x32u))
        {
          int v33 = *(int **)(a1 + 56);
LABEL_40:
          LogPrintF((uint64_t)v33, (uint64_t)"OSStatus _NTPClockClientNegotiate(NTPClockRef)", 0x32u, (uint64_t)"### NTP client negotiate wait for %##a failed (%u total): %#m\n", v29, v30, v31, v32, a1 + 20);
          goto LABEL_21;
        }
        goto LABEL_21;
      }
      LODWORD(v10) = *__error();
    }
    while (v10 == 4);
    if (v10) {
      goto LABEL_38;
    }
LABEL_32:
    uint64_t v10 = _NTPClockClientProcessResponse(a1);
    if (!v10) {
      ++v24;
    }
  }
  while (v24 < 4);
LABEL_44:
  if (v10) {
    signed int v34 = 60;
  }
  else {
    signed int v34 = 30;
  }
  CFDictionaryRef v35 = *(signed int **)(a1 + 56);
  if (v34 >= *v35)
  {
    if (*v35 != -1) {
      goto LABEL_49;
    }
    if (_LogCategory_Initialize(*(void *)(a1 + 56), v34))
    {
      CFDictionaryRef v35 = *(signed int **)(a1 + 56);
LABEL_49:
      uint64_t v36 = mach_absolute_time();
      UpTicksToMilliseconds(v36 - v23);
      CFDictionaryRef v41 = "### ";
      if (!v10) {
        CFDictionaryRef v41 = "";
      }
      LogPrintF((uint64_t)v35, (uint64_t)"OSStatus _NTPClockClientNegotiate(NTPClockRef)", v34, (uint64_t)"%sNTP client negotiation with %##a %s: Good=%d, Serr=%u, Tout=%u, Rerr=%u Dur=%llu ms%s%?#m\n", v37, v38, v39, v40, (uint64_t)v41);
    }
  }
  if (!v10)
  {
    uint64_t v10 = OpenSelfConnectedLoopbackSocket((int *)(a1 + 224));
    if (!v10)
    {
      uint64_t v10 = pthread_create((pthread_t *)(a1 + 208), 0, (void *(__cdecl *)(void *))_NTPClockClientThread, (void *)a1);
      if (!v10)
      {
        *(void *)(a1 + 216) = a1 + 208;
        long long v44 = *(int **)(a1 + 56);
        if (*v44 <= 30)
        {
          if (*v44 == -1)
          {
            if (!_LogCategory_Initialize((uint64_t)v44, 0x1Eu)) {
              return 0;
            }
            long long v44 = *(int **)(a1 + 56);
          }
          LogPrintF((uint64_t)v44, (uint64_t)"OSStatus NTPClockStartClient(NTPClockRef)", 0x1Eu, (uint64_t)"NTP client started with %##a on port %d\n", v6, v7, v8, v9, a1 + 20);
        }
        return 0;
      }
    }
  }
LABEL_56:
  CFDictionaryRef v42 = *(int **)(a1 + 56);
  if (*v42 <= 60)
  {
    if (*v42 != -1) {
      goto LABEL_58;
    }
    if (_LogCategory_Initialize((uint64_t)v42, 0x3Cu))
    {
      CFDictionaryRef v42 = *(int **)(a1 + 56);
LABEL_58:
      LogPrintF((uint64_t)v42, (uint64_t)"OSStatus NTPClockStartClient(NTPClockRef)", 0x3Cu, (uint64_t)"### NTP client start failed: %#m\n", v6, v7, v8, v9, v10);
    }
  }
  NTPClockStop(a1, v3, v4, v5, v6, v7, v8, v9);
  return v10;
}

uint64_t _NTPClockClientSendRequest(uint64_t a1)
{
  uint64_t v2 = mach_absolute_time();
  unint64_t v3 = *(void *)(a1 + 96);
  uint64_t v4 = *(_DWORD *)(a1 + 16) + (v2 / v3);
  unint64_t v5 = ((unint64_t)(v2 % v3) << 32) / v3;
  uint64_t v6 = *(_DWORD **)(a1 + 296);
  **(_DWORD **)(a1 + 288) = bswap32(v4);
  _DWORD *v6 = bswap32(v5);
  if (send(*(_DWORD *)(a1 + 228), (const void *)(a1 + 240), *(void *)(a1 + 304), 0) == *(void *)(a1 + 304))
  {
LABEL_4:
    int v12 = *(_DWORD *)(a1 + 376);
    *(_DWORD *)(a1 + 376) = v12 + 1;
    uint64_t v13 = a1 + 4 * (v12 & 7);
    *(_DWORD *)(v13 + 312) = v4;
    *(_DWORD *)(v13 + 344) = v5;
    uint64_t v14 = *(int **)(a1 + 56);
    if (*v14 <= 10)
    {
      if (*v14 == -1)
      {
        if (!_LogCategory_Initialize((uint64_t)v14, 0xAu)) {
          return 0;
        }
        uint64_t v14 = *(int **)(a1 + 56);
      }
      LogPrintF((uint64_t)v14, (uint64_t)"OSStatus _NTPClockClientSendRequest(NTPClockRef)", 0xAu, (uint64_t)"NTP client request: 0x%08X%08X\n", v7, v8, v9, v10, v4);
    }
    return 0;
  }
  if (*__error())
  {
    uint64_t v11 = *__error();
    if (!v11) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v11 = 4294960596;
  }
  ++*(_DWORD *)(a1 + 3792);
  unint64_t v15 = *(int **)(a1 + 56);
  if (*v15 <= 50)
  {
    if (*v15 == -1)
    {
      if (!_LogCategory_Initialize((uint64_t)v15, 0x32u)) {
        return v11;
      }
      unint64_t v15 = *(int **)(a1 + 56);
    }
    LogPrintF((uint64_t)v15, (uint64_t)"OSStatus _NTPClockClientSendRequest(NTPClockRef)", 0x32u, (uint64_t)"### NTP client send to %##a failed (%u total): %#m\n", v7, v8, v9, v10, a1 + 20);
  }
  return v11;
}

uint64_t _NTPClockClientProcessResponse(uint64_t a1)
{
  long long v118 = 0u;
  long long v119 = 0u;
  long long v117 = 0u;
  uint64_t v115 = 0;
  ssize_t v116 = 0;
  uint64_t v2 = SocketRecvFrom(*(_DWORD *)(a1 + 228), (uint64_t)&v117, 48, &v116, 0, 0, 0, &v115, 0, 0);
  if (v2)
  {
    uint64_t v7 = v2;
  }
  else
  {
    if (v116 == 32)
    {
      uint64_t v8 = bswap32(DWORD2(v117));
      unsigned int v9 = bswap32(HIDWORD(v117));
      uint64_t v10 = bswap32(v118) + *(_DWORD *)(a1 + 16);
      unsigned int v11 = bswap32(DWORD1(v118));
      uint64_t v12 = bswap32(DWORD2(v118));
      uint64_t v13 = (unsigned int *)&v118 + 3;
      goto LABEL_19;
    }
    if (v116 == 48)
    {
      if (!BYTE1(v117) && HIDWORD(v117) == 1313294680) {
        return 4294960539;
      }
      uint64_t v8 = bswap32(DWORD2(v118));
      unsigned int v9 = bswap32(HIDWORD(v118));
      uint64_t v10 = bswap32(v119) + *(_DWORD *)(a1 + 16);
      unsigned int v11 = bswap32(DWORD1(v119));
      uint64_t v12 = bswap32(DWORD2(v119));
      uint64_t v13 = (unsigned int *)&v119 + 3;
LABEL_19:
      unsigned int v18 = *v13;
      unint64_t v19 = v9 | (unint64_t)(v8 << 32);
      unint64_t v20 = UpTicksToNTP(v115);
      if (v8 | v9)
      {
        LODWORD(v25) = *(_DWORD *)(a1 + 376);
        uint64_t v25 = v25 >= 8 ? 8 : v25;
        if (v25)
        {
          uint64_t v26 = bswap32(v18);
          unint64_t v27 = v11 | (unint64_t)(v10 << 32);
          uint64_t v28 = v26 | (v12 << 32);
          uint64_t v29 = (_DWORD *)(a1 + 344);
          while (*(v29 - 8) != v8 || *v29 != v9)
          {
            ++v29;
            if (!--v25) {
              goto LABEL_28;
            }
          }
          *(v29 - 8) = 0;
          _DWORD *v29 = 0;
          unint64_t v32 = *(void *)(a1 + 1024);
          unint64_t v33 = v32 + 1;
          *(void *)(a1 + 1024) = v32 + 1;
          unint64_t v34 = v32 & 0xF;
          uint64_t v35 = a1 + 40 * v34;
          *(void *)(v35 + 384) = v19;
          *(void *)(v35 + 392) = v27;
          *(void *)(v35 + 400) = v28;
          *(void *)(v35 + 408) = v20;
          double v36 = (double)(uint64_t)(v28 - v27) * -2.32830644e-10;
          double v37 = v36 + (double)(uint64_t)(v20 - v19) * 2.32830644e-10;
          *(double *)(v35 + 416) = v37;
          uint64_t v38 = v32 - 12;
          if (v32 <= 0xF) {
            uint64_t v38 = 4;
          }
          if (v32 <= 0x1B) {
            unint64_t v39 = v38;
          }
          else {
            unint64_t v39 = 16;
          }
          unint64_t v40 = v33 - v39;
          if (v32 < v39) {
            unint64_t v40 = 0;
          }
          char v41 = 1;
          if (v40 < v32)
          {
            double v42 = v36 + (double)(uint64_t)(v20 - v19) * 2.32830644e-10;
            do
            {
              if (*(double *)(a1 + 40 * (v40 & 0xF) + 416) < v42)
              {
                double v42 = *(double *)(a1 + 40 * (v40 & 0xF) + 416);
                unint64_t v34 = v40 & 0xF;
                char v41 = 0;
              }
              ++v40;
            }
            while (v32 != v40);
          }
          if (v32)
          {
            double v43 = *(double *)(a1 + 3656);
            *(double *)(a1 + 3680) = vabdd_f64(v37, v43) * 0.125 + *(double *)(a1 + 3680) * 0.875;
            *(double *)(a1 + 3656) = v37 * 0.125 + v43 * 0.875;
          }
          else
          {
            *(double *)(a1 + 3656) = v37;
          }
          if (v37 < *(double *)(a1 + 3664)) {
            *(double *)(a1 + 3664) = v37;
          }
          if (v37 > *(double *)(a1 + 3672)) {
            *(double *)(a1 + 3672) = v37;
          }
          long long v44 = &unk_1E91CE000;
          if (v33 < 4)
          {
            if (!v32)
            {
              if (gLogCategory_NTPClockRaw > 40) {
                goto LABEL_112;
              }
              if (gLogCategory_NTPClockRaw != -1
                || (BOOL v111 = _LogCategory_Initialize((uint64_t)&gLogCategory_NTPClockRaw, 0x28u),
                    long long v44 = (_DWORD *)&unk_1E91CE000,
                    v111))
              {
                LogPrintF((uint64_t)&gLogCategory_NTPClockRaw, (uint64_t)"OSStatus _NTPClockClientProcessResponse(NTPClockRef)", 0x28u, (uint64_t)"NTP Raw: #\tT1\tT2\tT3\tT4\tOffset ms\tOffsetAvg\tOffsetMin\tOffsetMax\tOffsetJitter\tRTT ms\tRTTavg\tRTTmin\tRTTmax\tRTTjitter\n", v21, v22, v23, v24, v114);
                long long v44 = (_DWORD *)&unk_1E91CE000;
              }
            }
          }
          else if (v41 || !*(_DWORD *)(a1 + 3600))
          {
            uint64_t v45 = a1 + 40 * v34;
            unint64_t v46 = *(void *)(v45 + 384);
            uint64_t v47 = *(void *)(a1 + 3608);
            uint64_t v48 = *(void *)(v45 + 408);
            if (*(unsigned char *)(a1 + 3616)) {
              uint64_t v47 = -v47;
            }
            unint64_t v49 = v46 + v47;
            uint64_t v50 = v48 + v47;
            uint64_t v51 = *(void *)(a1 + 3728);
            uint64_t v52 = *(void *)(a1 + 3768);
            if (v51 > v52)
            {
              unint64_t v53 = *(void *)(a1 + 3736);
              unint64_t v54 = *(void *)(a1 + 3776);
LABEL_68:
              BOOL v55 = v53 >= v54;
              unint64_t v56 = v53 - v54;
              int v57 = !v55;
              *((void *)&v59 + 1) = (v51 - v52 - v57);
              *(void *)&long long v59 = v56;
              uint64_t v58 = v59 >> 32;
              unint64_t v60 = v49 - v58;
              uint64_t v61 = v50 - v58;
              goto LABEL_78;
            }
            if (v51 == v52)
            {
              unint64_t v53 = *(void *)(a1 + 3736);
              unint64_t v54 = *(void *)(a1 + 3776);
              if (v53 > v54) {
                goto LABEL_68;
              }
            }
            else
            {
              unint64_t v54 = *(void *)(a1 + 3776);
              unint64_t v53 = *(void *)(a1 + 3736);
            }
            BOOL v55 = v54 >= v53;
            unint64_t v62 = v54 - v53;
            int v63 = !v55;
            *((void *)&v65 + 1) = (v52 - v51 - v63);
            *(void *)&long long v65 = v62;
            uint64_t v64 = v65 >> 32;
            unint64_t v60 = v64 + v49;
            uint64_t v61 = v64 + v50;
LABEL_78:
            unint64_t v66 = *(void *)(a1 + 40 * v34 + 392);
            uint64_t v67 = v66 - v60;
            BOOL v55 = v60 >= v66;
            unint64_t v68 = v60 - v66;
            if (!v55) {
              unint64_t v68 = v67;
            }
            if (v68 <= 0x100000000)
            {
              uint64_t v79 = *(void *)(a1 + 40 * v34 + 400);
LABEL_101:
              double v81 = ((double)(v79 - v61) * 2.32830644e-10 + (double)v67 * 2.32830644e-10) * 0.5;
              int v82 = *(_DWORD *)(a1 + 3600);
              *(_DWORD *)(a1 + 3600) = v82 + 1;
              if (v82)
              {
                double v83 = *(double *)(a1 + 3624);
                *(double *)(a1 + 3648) = vabdd_f64(v81, v83) * 0.125 + *(double *)(a1 + 3648) * 0.875;
                *(double *)(a1 + 3624) = v81 * 0.125 + v83 * 0.875;
              }
              else
              {
                *(void *)(a1 + 3624) = 0;
              }
              if (v81 < *(double *)(a1 + 3632)) {
                *(double *)(a1 + 3632) = v81;
              }
              if (v81 > *(double *)(a1 + 3640)) {
                *(double *)(a1 + 3640) = v81;
              }
              goto LABEL_108;
            }
            unint64_t v69 = v66 - v46;
            BOOL v70 = v46 > v66;
            unint64_t v71 = v46 - v66;
            char v72 = v70;
            *(unsigned char *)(a1 + 3616) = v72;
            if (v70) {
              unint64_t v69 = v71;
            }
            *(void *)(a1 + 3608) = v69;
            int v73 = *(_DWORD *)(a1 + 3604);
            if (v73) {
              int v74 = 50;
            }
            else {
              int v74 = 40;
            }
            uint64_t v75 = *(int **)(a1 + 56);
            if (v74 < *v75)
            {
LABEL_100:
              uint64_t v67 = 0;
              *(_DWORD *)(a1 + 3604) = v73 + 1;
              uint64_t v79 = *(void *)(a1 + 40 * v34 + 400);
              uint64_t v61 = v79;
              goto LABEL_101;
            }
            if (*v75 == -1)
            {
              BOOL v80 = _LogCategory_Initialize((uint64_t)v75, v74);
              int v73 = *(_DWORD *)(a1 + 3604);
              if (!v80)
              {
LABEL_99:
                long long v44 = &unk_1E91CE000;
                goto LABEL_100;
              }
              uint64_t v75 = *(int **)(a1 + 56);
            }
            BOOL v76 = v73 == 0;
            if (v73) {
              unsigned int v77 = 50;
            }
            else {
              unsigned int v77 = 40;
            }
            SecCertificateRef v78 = "### ";
            if (v76) {
              SecCertificateRef v78 = "";
            }
            LogPrintF((uint64_t)v75, (uint64_t)"OSStatus _NTPClockClientProcessResponse(NTPClockRef)", v77, (uint64_t)"%sNTP client clock reset: %s%{dur}\n", v21, v22, v23, v24, (uint64_t)v78);
            int v73 = *(_DWORD *)(a1 + 3604);
            goto LABEL_99;
          }
LABEL_108:
          int v84 = v44[456];
          if (v84 <= 40 && (v84 != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_NTPClockRaw, 0x28u))) {
            LogPrintF((uint64_t)&gLogCategory_NTPClockRaw, (uint64_t)"OSStatus _NTPClockClientProcessResponse(NTPClockRef)", 0x28u, (uint64_t)"NTP Raw: %zu\t%llu\t%llu\t%llu\t%llu\t%.9f\t%.9f\t%.9f\t%.9f\t%.9f\t%.3f\t%.3f\t%.3f\t%.3f\t%.3f\t%s\n", v21, v22, v23, v24, v32 + 1);
          }
LABEL_112:
          if (v33 % v39) {
            goto LABEL_141;
          }
          uint64_t v85 = *(void *)(a1 + 3592);
          unint64_t v86 = v85 + 1;
          uint64_t v87 = a1 + 1032 + 40 * (v85 & 0x3F);
          uint64_t v88 = a1 + 40 * v34;
          long long v89 = *(_OWORD *)(v88 + 384);
          long long v90 = *(_OWORD *)(v88 + 400);
          *(void *)(v87 + 32) = *(void *)(v88 + 416);
          *(_OWORD *)uint64_t v87 = v89;
          *(_OWORD *)(v87 + 16) = v90;
          *(void *)(a1 + 3592) = v85 + 1;
          unint64_t v91 = (unint64_t)(v85 + 1) < 0x40 ? v85 + 1 : 64;
          unint64_t v92 = v86 % v91;
          unint64_t v93 = *(void *)(v88 + 384);
          unint64_t v94 = *(void *)(a1 + 1032 + 40 * v92);
          BOOL v55 = v93 >= v94;
          uint64_t v95 = v93 - v94;
          if (v95 == 0 || !v55) {
            goto LABEL_141;
          }
          unint64_t v96 = *(void *)(a1 + 40 * v34 + 392);
          unint64_t v97 = *(void *)(a1 + 40 * v92 + 1040);
          BOOL v55 = v96 >= v97;
          uint64_t v98 = v96 - v97;
          if (v98 == 0 || !v55) {
            goto LABEL_141;
          }
          unint64_t v99 = *(void *)(a1 + 40 * v34 + 400);
          unint64_t v100 = *(void *)(a1 + 40 * v92 + 1048);
          BOOL v55 = v99 >= v100;
          uint64_t v101 = v99 - v100;
          if (v101 == 0
            || !v55
            || (unint64_t v102 = *(void *)(a1 + 40 * v34 + 408),
                unint64_t v103 = *(void *)(a1 + 40 * v92 + 1056),
                BOOL v55 = v102 >= v103,
                uint64_t v104 = v102 - v103,
                v104 == 0 || !v55))
          {
LABEL_141:
            if (v32 == 31)
            {
              *(void *)(a1 + 68) = 0x834000007D0;
            }
            else if (v32)
            {
              return 0;
            }
            uint64_t v113 = *(int **)(a1 + 56);
            if (*v113 <= 20)
            {
              if (*v113 == -1)
              {
                if (!_LogCategory_Initialize((uint64_t)v113, 0x14u)) {
                  return 0;
                }
                uint64_t v113 = *(int **)(a1 + 56);
              }
              LogPrintF((uint64_t)v113, (uint64_t)"OSStatus _NTPClockClientProcessResponse(NTPClockRef)", 0x14u, (uint64_t)"NTP client poll updated: %u-%u ms\n", v21, v22, v23, v24, *(unsigned int *)(a1 + 68));
            }
            return 0;
          }
          double v105 = ((double)v98 / (double)v95 + (double)v101 / (double)v104) * 0.5;
          double v106 = *(double *)(a1 + 3696);
          *(double *)(a1 + 3720) = vabdd_f64(v105, v106) * 0.125 + *(double *)(a1 + 3720) * 0.875;
          double v107 = v105 * 0.25 + v106 * 0.75;
          *(double *)(a1 + 3696) = v107;
          double v108 = *(double *)(a1 + 3704);
          if (v105 < v108) {
            *(double *)(a1 + 3704) = v105;
          }
          if (v105 > *(double *)(a1 + 3712)) {
            *(double *)(a1 + 3712) = v105;
          }
          double v109 = v107 * (double)*(unint64_t *)(a1 + 96);
          *(void *)(a1 + 3760) = (unint64_t)v109;
          *(void *)(a1 + 3752) = 0xFFFFFFFFFFFFFFFFLL / (unint64_t)v109;
          if (!*(_DWORD *)(a1 + 3688))
          {
            uint64_t v110 = *(int **)(a1 + 56);
            if (*v110 <= 20)
            {
              if (*v110 != -1)
              {
LABEL_131:
                LogPrintF((uint64_t)v110, (uint64_t)"OSStatus _NTPClockClientProcessResponse(NTPClockRef)", 0x14u, (uint64_t)"NTP client update: #\tRTT ms\tRTT ! \tRateNew    \tRateAvg    \tRateHz    \tJitHz\tOffset ms\tOffset Avg\tFlags\n", v21, v22, v23, v24, v114);
                goto LABEL_136;
              }
              if (_LogCategory_Initialize((uint64_t)v110, 0x14u))
              {
                uint64_t v110 = *(int **)(a1 + 56);
                goto LABEL_131;
              }
            }
          }
LABEL_136:
          uint64_t v112 = *(int **)(a1 + 56);
          if (*v112 <= 20)
          {
            if (*v112 == -1)
            {
              if (!_LogCategory_Initialize((uint64_t)v112, 0x14u)) {
                goto LABEL_140;
              }
              uint64_t v112 = *(int **)(a1 + 56);
            }
            LogPrintF((uint64_t)v112, (uint64_t)"OSStatus _NTPClockClientProcessResponse(NTPClockRef)", 0x14u, (uint64_t)"NTP client update: %zu\t%.3f\t%.3f\t%.9f\t%.9f\t%llu\t%llu\t%+.9f\t%+.9f%s%s%s%s\n", v21, v22, v23, v24, v32 + 1);
          }
LABEL_140:
          ++*(_DWORD *)(a1 + 3688);
          goto LABEL_141;
        }
      }
LABEL_28:
      ++*(_DWORD *)(a1 + 3804);
      uint64_t v30 = *(int **)(a1 + 56);
      if (*v30 <= 50)
      {
        if (*v30 == -1)
        {
          if (!_LogCategory_Initialize((uint64_t)v30, 0x32u)) {
            return 4294960560;
          }
          uint64_t v30 = *(int **)(a1 + 56);
        }
        LogPrintF((uint64_t)v30, (uint64_t)"OSStatus _NTPClockClientProcessResponse(NTPClockRef)", 0x32u, (uint64_t)"### NTP client received unexpected response: originated 0x%016llX, received 0x%016llX (%u total)\n", v21, v22, v23, v24, v9 | (unint64_t)(v8 << 32));
      }
      return 4294960560;
    }
    uint64_t v7 = 4294960553;
  }
  ++*(_DWORD *)(a1 + 3796);
  uint64_t v14 = *(void *)(a1 + 216);
  if (v14) {
    int v15 = 40;
  }
  else {
    int v15 = 50;
  }
  int v16 = *(int **)(a1 + 56);
  if (v15 >= *v16)
  {
    if (*v16 == -1)
    {
      if (!_LogCategory_Initialize((uint64_t)v16, v15)) {
        return v7;
      }
      int v16 = *(int **)(a1 + 56);
      uint64_t v14 = *(void *)(a1 + 216);
    }
    if (v14) {
      unsigned int v17 = 40;
    }
    else {
      unsigned int v17 = 50;
    }
    LogPrintF((uint64_t)v16, (uint64_t)"OSStatus _NTPClockClientProcessResponse(NTPClockRef)", v17, (uint64_t)"### NTP client received bad response from %##a (%u total): %#m\n", v3, v4, v5, v6, a1 + 20);
  }
  return v7;
}

uint64_t _NTPClockClientThread(uint64_t a1)
{
  unint64_t v2 = *(int *)(a1 + 224);
  unint64_t v3 = *(int *)(a1 + 228);
  unint64_t v4 = *(void *)(a1 + 96) / 0xAuLL;
  v45.time_t tv_sec = 0;
  *(void *)&v45.tv_useCC_SHA1_CTX c = 0;
  if (*(void *)(a1 + 80)) {
    uint64_t v5 = *(const char **)(a1 + 80);
  }
  else {
    uint64_t v5 = "NTPClockClient";
  }
  pthread_setname_np(v5);
  if (*(unsigned char *)(a1 + 92)) {
    SetCurrentThreadPriority(*(_DWORD *)(a1 + 88));
  }
  if ((int)v2 <= (int)v3) {
    int v6 = v3;
  }
  else {
    int v6 = v2;
  }
  memset(&v46.fds_bits[24], 0, 32);
  if (v6 < 0) {
    int v6 = -1;
  }
  int v7 = v6 + 1;
  memset(&v46, 0, 96);
  uint64_t v8 = mach_absolute_time();
  int v9 = *(_DWORD *)(a1 + 68);
  uint32_t v10 = arc4random();
  unint64_t v11 = MillisecondsToUpTicks(v10 % (*(_DWORD *)(a1 + 72) - *(_DWORD *)(a1 + 68) + 1) + v9) + v8;
  unint64_t v39 = v4;
  uint64_t v12 = v8 + v4;
  int v13 = 1 << v2;
  unint64_t v14 = v2 >> 5;
  int v15 = 1 << v3;
  unint64_t v16 = v3 >> 5;
LABEL_12:
  uint64_t v40 = v11;
LABEL_13:
  uint64_t v42 = v12;
  if (v12 >= v11) {
    uint64_t v17 = v11;
  }
  else {
    uint64_t v17 = v12;
  }
  do
  {
    while (1)
    {
      if (__darwin_check_fd_set_overflow(v2, &v46, 0)) {
        v46.fds_bits[v14] |= v13;
      }
      if (__darwin_check_fd_set_overflow(v3, &v46, 0)) {
        v46.fds_bits[v16] |= v15;
      }
      if (v17 == -1)
      {
        uint64_t v22 = 0;
      }
      else
      {
        uint64_t v18 = mach_absolute_time();
        BOOL v19 = v17 >= v18;
        unint64_t v20 = v17 - v18;
        if (v20 != 0 && v19)
        {
          unint64_t v21 = UpTicksToMicroseconds(v20);
          __darwin_time_t v23 = (int)(v21 / 0xF4240);
          __darwin_suseconds_t v24 = v21 % 0xF4240;
        }
        else
        {
          __darwin_time_t v23 = 0;
          __darwin_suseconds_t v24 = 0;
        }
        v45.time_t tv_sec = v23;
        v45.tv_useCC_SHA1_CTX c = v24;
        uint64_t v22 = &v45;
      }
      int v25 = select(v7, &v46, 0, 0, v22);
      if (v25 > 0) {
        break;
      }
      if (!v25) {
        goto LABEL_39;
      }
      if (*__error())
      {
        int v26 = *__error();
        if (!v26) {
          break;
        }
        if (v26 != 4)
        {
          if (v26 == -6722)
          {
LABEL_39:
            uint64_t v27 = mach_absolute_time();
            uint64_t v12 = v42;
            if (v27 >= v42)
            {
              uint64_t v43 = mach_absolute_time();
              pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 200));
              uint64_t v28 = (v43 - *(_DWORD *)(a1 + 3744));
              uint64_t v29 = v28 * *(void *)(a1 + 3752);
              uint64_t v30 = *(void *)(a1 + 3736);
              BOOL v19 = __CFADD__(v29, v30);
              *(void *)(a1 + 3736) = v29 + v30;
              uint64_t v31 = *(void *)(a1 + 3728);
              if (v19) {
                ++v31;
              }
              *(void *)(a1 + 3728) = v31;
              uint64_t v32 = *(void *)(a1 + 3784) * v28;
              uint64_t v33 = *(void *)(a1 + 3776);
              BOOL v19 = __CFADD__(v33, v32);
              *(void *)(a1 + 3776) = v33 + v32;
              uint64_t v34 = *(void *)(a1 + 3768);
              if (v19) {
                ++v34;
              }
              *(void *)(a1 + 3768) = v34;
              *(void *)(a1 + 3744) = v43;
              pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 200));
              uint64_t v12 = v27 + v39;
            }
            unint64_t v11 = v40;
            if (v27 >= v40)
            {
              uint64_t v44 = v12;
              _NTPClockClientSendRequest(a1);
              uint64_t v41 = v27;
              int v35 = *(_DWORD *)(a1 + 68);
              uint32_t v36 = arc4random();
              unint64_t v37 = MillisecondsToUpTicks(v36 % (*(_DWORD *)(a1 + 72) - *(_DWORD *)(a1 + 68) + 1) + v35);
              uint64_t v12 = v44;
              unint64_t v11 = v37 + v41;
              goto LABEL_12;
            }
            goto LABEL_13;
          }
          goto LABEL_38;
        }
      }
      else
      {
LABEL_38:
        usleep(0x186A0u);
      }
    }
    if (__darwin_check_fd_set_overflow(v3, &v46, 0) && (v46.fds_bits[v16] & v15) != 0) {
      _NTPClockClientProcessResponse(a1);
    }
  }
  while (!__darwin_check_fd_set_overflow(v2, &v46, 0) || (v46.fds_bits[v14] & v13) == 0);
  return 0;
}

uint64_t NTPClockGetSynchronizedNTPTime(uint64_t a1)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 200));
  uint64_t v2 = (mach_absolute_time() - *(void *)(a1 + 3744)) * *(void *)(a1 + 3752);
  uint64_t v3 = *(void *)(a1 + 3736);
  BOOL v4 = __CFADD__(v3, v2);
  uint64_t v5 = v3 + v2;
  unsigned int v6 = *(_DWORD *)(a1 + 3728);
  if (v4) {
    uint64_t v7 = v6 + 1;
  }
  else {
    uint64_t v7 = v6;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 200));
  *((void *)&v9 + 1) = v7;
  *(void *)&long long v9 = v5;
  return v9 >> 32;
}

uint64_t NTPClockGetSynchronizedNTPTimeNearUpTicks(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = mach_absolute_time();
  uint64_t v5 = v4;
  if (v4 >= a2) {
    uint64_t v6 = v4 - a2;
  }
  else {
    uint64_t v6 = a2 - v4;
  }
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 200));
  uint64_t v7 = *(void *)(a1 + 3752);
  unint64_t v8 = *(void *)(a1 + 3760);
  uint64_t v9 = (v5 - *(void *)(a1 + 3744)) * v7;
  uint64_t v10 = *(void *)(a1 + 3736);
  uint64_t v11 = v9 + v10;
  if (__CFADD__(v9, v10)) {
    uint64_t v12 = *(void *)(a1 + 3728) + 1;
  }
  else {
    uint64_t v12 = *(void *)(a1 + 3728);
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 200));
  uint64_t v13 = v6 / v8;
  uint64_t v14 = v6 % v8 * v7;
  if (v5 >= a2)
  {
    BOOL v15 = v11 >= v14;
    uint64_t v16 = v11 - v14;
    uint64_t v18 = !v15;
    uint64_t v17 = v12 - v13 - v18;
  }
  else
  {
    BOOL v15 = __CFADD__(v14, v11);
    uint64_t v16 = v14 + v11;
    uint64_t v17 = v13 + v15 + v12;
  }
  *((void *)&v20 + 1) = v17;
  *(void *)&long long v20 = v16;
  return v20 >> 32;
}

unint64_t NTPClockGetUpTicksNearSynchronizedNTPTime(uint64_t a1, unint64_t a2)
{
  unint64_t SynchronizedNTPTime = NTPClockGetSynchronizedNTPTime(a1);
  uint64_t v4 = mach_absolute_time();
  if (SynchronizedNTPTime >= a2) {
    return v4 - NTPtoUpTicks(SynchronizedNTPTime - a2);
  }
  else {
    return NTPtoUpTicks(a2 - SynchronizedNTPTime) + v4;
  }
}

uint64_t NTPClockStartServer(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(void))(a1 + 120);
  if (v2)
  {
    uint64_t v3 = v2(*(void *)(a1 + 128));
  }
  else
  {
    if (UpTicksPerSecond_sOnce != -1) {
      dispatch_once_f(&UpTicksPerSecond_sOnce, &UpTicksPerSecond_sTicksPerSecond, (dispatch_function_t)_UpTicksPerSecondInit);
    }
    uint64_t v3 = UpTicksPerSecond_sTicksPerSecond;
  }
  uint64_t v17 = 0;
  *(void *)(a1 + 96) = v3;
  uint64_t v11 = ServerSocketPairOpen(2, 17, *(_DWORD *)(a1 + 48), (int *)(a1 + 52), -1, (int *)&v17 + 1, (int *)&v17);
  if (!v11)
  {
    int v12 = v17;
    int v13 = HIDWORD(v17);
    *(_DWORD *)(a1 + 232) = HIDWORD(v17);
    *(_DWORD *)(a1 + 236) = v12;
    if ((v13 & 0x80000000) == 0)
    {
      if (*(unsigned char *)(a1 + 64)) {
        SocketSetP2P(v13, 1);
      }
      if (!*(unsigned char *)(a1 + 77)) {
        SocketSetQoS(v13, 20);
      }
      SocketSetPacketReceiveInfo(v13);
      SocketSetPacketTimestamps(v13, 1);
    }
    if ((v12 & 0x80000000) == 0)
    {
      if (*(unsigned char *)(a1 + 64)) {
        SocketSetP2P(v12, 1);
      }
      if (!*(unsigned char *)(a1 + 77)) {
        SocketSetQoS(v12, 20);
      }
      SocketSetPacketReceiveInfo(v12);
      SocketSetPacketTimestamps(v12, 1);
    }
    uint64_t v11 = OpenSelfConnectedLoopbackSocket((int *)(a1 + 224));
    if (!v11)
    {
      uint64_t v11 = pthread_create((pthread_t *)(a1 + 208), 0, (void *(__cdecl *)(void *))_NTPClockServerThread, (void *)a1);
      if (!v11)
      {
        *(void *)(a1 + 216) = a1 + 208;
        uint64_t v16 = *(int **)(a1 + 56);
        if (*v16 <= 30)
        {
          if (*v16 == -1)
          {
            if (!_LogCategory_Initialize((uint64_t)v16, 0x1Eu)) {
              return 0;
            }
            uint64_t v16 = *(int **)(a1 + 56);
          }
          LogPrintF((uint64_t)v16, (uint64_t)"OSStatus NTPClockStartServer(NTPClockRef)", 0x1Eu, (uint64_t)"NTP server started on port %d\n", v7, v8, v9, v10, *(unsigned int *)(a1 + 52));
        }
        return 0;
      }
    }
  }
  uint64_t v14 = *(int **)(a1 + 56);
  if (*v14 <= 60)
  {
    if (*v14 == -1)
    {
      if (!_LogCategory_Initialize((uint64_t)v14, 0x3Cu)) {
        goto LABEL_25;
      }
      uint64_t v14 = *(int **)(a1 + 56);
    }
    LogPrintF((uint64_t)v14, (uint64_t)"OSStatus NTPClockStartServer(NTPClockRef)", 0x3Cu, (uint64_t)"### NTP server start failed: %#m\n", v7, v8, v9, v10, v11);
  }
LABEL_25:
  NTPClockStop(a1, v4, v5, v6, v7, v8, v9, v10);
  return v11;
}

uint64_t SocketSetPacketReceiveInfo(int a1)
{
  unsigned int v16 = 1;
  uint64_t result = SocketGetFamily(a1);
  if (result == 30)
  {
    uint64_t result = setsockopt(a1, 41, 61, &v16, 4u);
    if (result)
    {
      uint64_t result = (uint64_t)__error();
      if (*(_DWORD *)result) {
        uint64_t result = (uint64_t)__error();
      }
    }
    if (gLogCategory_NTPClockCore <= 30)
    {
      if (gLogCategory_NTPClockCore != -1) {
        return LogPrintF((uint64_t)&gLogCategory_NTPClockCore, (uint64_t)"OSStatus SocketSetPacketReceiveInfo(SocketRef, int)", 0x1Eu, (uint64_t)"Set IPV6_RECVPKTINFO: enable %d, %#m", v12, v13, v14, v15, v16);
      }
      uint64_t result = _LogCategory_Initialize((uint64_t)&gLogCategory_NTPClockCore, 0x1Eu);
      if (result) {
        return LogPrintF((uint64_t)&gLogCategory_NTPClockCore, (uint64_t)"OSStatus SocketSetPacketReceiveInfo(SocketRef, int)", 0x1Eu, (uint64_t)"Set IPV6_RECVPKTINFO: enable %d, %#m", v12, v13, v14, v15, v16);
      }
    }
  }
  else
  {
    uint64_t v7 = result;
    if (result == 2)
    {
      uint64_t result = setsockopt(a1, 0, 26, &v16, 4u);
      if (result)
      {
        uint64_t result = (uint64_t)__error();
        if (*(_DWORD *)result) {
          uint64_t result = (uint64_t)__error();
        }
      }
      if (gLogCategory_NTPClockCore <= 30)
      {
        if (gLogCategory_NTPClockCore != -1) {
          return LogPrintF((uint64_t)&gLogCategory_NTPClockCore, (uint64_t)"OSStatus SocketSetPacketReceiveInfo(SocketRef, int)", 0x1Eu, (uint64_t)"Set IP_PKTINFO: enable %d, %#m", v8, v9, v10, v11, v16);
        }
        uint64_t result = _LogCategory_Initialize((uint64_t)&gLogCategory_NTPClockCore, 0x1Eu);
        if (result) {
          return LogPrintF((uint64_t)&gLogCategory_NTPClockCore, (uint64_t)"OSStatus SocketSetPacketReceiveInfo(SocketRef, int)", 0x1Eu, (uint64_t)"Set IP_PKTINFO: enable %d, %#m", v8, v9, v10, v11, v16);
        }
      }
    }
    else if (gLogCategory_NTPClockCore <= 90)
    {
      if (gLogCategory_NTPClockCore != -1) {
        return LogPrintF((uint64_t)&gLogCategory_NTPClockCore, (uint64_t)"OSStatus SocketSetPacketReceiveInfo(SocketRef, int)", 0x5Au, (uint64_t)"### IP_PKTINFO/IPV6_RECVPKTINFO not supported for this socket family: %d", v3, v4, v5, v6, v7);
      }
      uint64_t result = _LogCategory_Initialize((uint64_t)&gLogCategory_NTPClockCore, 0x5Au);
      if (result) {
        return LogPrintF((uint64_t)&gLogCategory_NTPClockCore, (uint64_t)"OSStatus SocketSetPacketReceiveInfo(SocketRef, int)", 0x5Au, (uint64_t)"### IP_PKTINFO/IPV6_RECVPKTINFO not supported for this socket family: %d", v3, v4, v5, v6, v7);
      }
    }
  }
  return result;
}

uint64_t _NTPClockServerThread(uint64_t a1)
{
  unint64_t v2 = *(int *)(a1 + 224);
  unint64_t v3 = *(unsigned int *)(a1 + 232);
  unint64_t v4 = *(unsigned int *)(a1 + 236);
  if (*(void *)(a1 + 80)) {
    uint64_t v5 = *(const char **)(a1 + 80);
  }
  else {
    uint64_t v5 = "NTPClockServer";
  }
  pthread_setname_np(v5);
  if (*(unsigned char *)(a1 + 92)) {
    SetCurrentThreadPriority(*(_DWORD *)(a1 + 88));
  }
  uint64_t v16 = a1;
  memset(&v18, 0, sizeof(v18));
  if ((int)v2 <= (int)v3) {
    int v6 = v3;
  }
  else {
    int v6 = v2;
  }
  if (v6 <= (int)v4) {
    int v6 = v4;
  }
  int v7 = 1 << v2;
  unint64_t v8 = v2 >> 5;
  int v17 = 1 << v3;
  unint64_t v9 = v3 >> 5;
  if (v6 < 0) {
    int v6 = -1;
  }
  int v10 = v6 + 1;
  int v11 = 1 << v4;
  unint64_t v12 = v4 >> 5;
  do
  {
    while (1)
    {
      if (__darwin_check_fd_set_overflow(v2, &v18, 0)) {
        v18.fds_bits[v8] |= v7;
      }
      if ((v3 & 0x80000000) == 0 && __darwin_check_fd_set_overflow(v3, &v18, 0)) {
        v18.fds_bits[v9] |= v17;
      }
      if ((v4 & 0x80000000) == 0 && __darwin_check_fd_set_overflow(v4, &v18, 0)) {
        v18.fds_bits[v12] |= v11;
      }
      int v13 = select(v10, &v18, 0, 0, 0);
      if (v13 > 0) {
        break;
      }
      if (v13 && *__error())
      {
        int v14 = *__error();
        if (!v14) {
          break;
        }
        if (v14 == 4) {
          continue;
        }
      }
      usleep(0x186A0u);
    }
    if ((v3 & 0x80000000) == 0 && __darwin_check_fd_set_overflow(v3, &v18, 0) && (v18.fds_bits[v9] & v17) != 0) {
      _NTPClockServerProcessPacket(v16, v3);
    }
    if ((v4 & 0x80000000) == 0 && __darwin_check_fd_set_overflow(v4, &v18, 0) && (v18.fds_bits[v12] & v11) != 0) {
      _NTPClockServerProcessPacket(v16, v4);
    }
  }
  while (!__darwin_check_fd_set_overflow(v2, &v18, 0) || (v18.fds_bits[v8] & v7) == 0);
  return 0;
}

uint64_t _NTPClockServerProcessPacket(uint64_t a1, int a2)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *(void *)(a1 + 96);
  long long v44 = 0u;
  memset(v43, 0, sizeof(v43));
  *(void *)&v40.sa_len = 0;
  *(void *)&v40.sa_data[6] = 0;
  int v42 = 0;
  uint64_t v41 = 0;
  *(&v45.msg_iovlen + 1) = 0;
  fd_set v46 = v43;
  uint64_t v47 = 48;
  v45.msg_name = &v40;
  *(&v45.msg_namelen + 1) = 0;
  v45.socklen_t msg_namelen = 28;
  v45.msg_iov = (iovec *)&v46;
  v45.msg_iovlen = 1;
  v45.msg_control = &v48;
  *(void *)&v45.msg_controllen = 256;
  do
  {
    ssize_t v5 = recvmsg(a2, &v45, 0);
    if ((v5 & 0x8000000000000000) == 0) {
      goto LABEL_6;
    }
    if (!*__error()) {
      goto LABEL_17;
    }
    int v10 = *__error();
  }
  while (v10 == 4);
  if (v10)
  {
LABEL_17:
    int v15 = 0;
LABEL_49:
    uint64_t result = *(void *)(a1 + 56);
    if (*(int *)result > 50) {
      return result;
    }
    if (*(_DWORD *)result == -1)
    {
      uint64_t result = _LogCategory_Initialize(result, 0x32u);
      if (!result) {
        return result;
      }
      uint64_t result = *(void *)(a1 + 56);
    }
    uint64_t v29 = " RTCP";
    if (!v15) {
      uint64_t v29 = "";
    }
    return LogPrintF(result, (uint64_t)"void _NTPClockServerProcessPacket(NTPClockRef, SocketRef)", 0x32u, (uint64_t)"### NTP server send%s to %##a failed: %#m\n", v6, v7, v8, v9, (uint64_t)v29);
  }
LABEL_6:
  socklen_t msg_namelen = v45.msg_namelen;
  uint64_t PacketUpTicks = SocketGetPacketUpTicks((unsigned int *)v45.msg_control, v45.msg_controllen);
  if (v45.msg_controllen >= 0xC)
  {
    msg_control = (unsigned int *)v45.msg_control;
    if (v45.msg_control)
    {
      do
      {
        unsigned int v14 = msg_control[1];
        if (v14 == 41)
        {
          if (msg_control[2] == 46)
          {
            int v39 = 0;
            unsigned int v30 = msg_control[3];
            unsigned int v31 = msg_control[4];
            unsigned int v33 = msg_control[5];
            int v32 = 30;
            uint64_t v38 = *((void *)msg_control + 3);
            goto LABEL_20;
          }
        }
        else if (!v14 && msg_control[2] == 26)
        {
          uint64_t v38 = 0;
          unsigned int v30 = msg_control[3];
          unsigned int v31 = msg_control[4];
          int v32 = 2;
          int v39 = 1;
          unsigned int v33 = msg_control[5];
          goto LABEL_20;
        }
        msg_control = (unsigned int *)((char *)msg_control + ((*msg_control + 3) & 0x1FFFFFFFCLL));
      }
      while ((char *)(msg_control + 3) <= (char *)v45.msg_control + v45.msg_controllen);
    }
  }
  if (gLogCategory_NTPClockCore <= 90
    && (gLogCategory_NTPClockCore != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_NTPClockCore, 0x5Au)))
  {
    LogPrintF((uint64_t)&gLogCategory_NTPClockCore, (uint64_t)"OSStatus SocketGetPacketReceiveInfo(struct msghdr *, CUIPPacketInfo *)", 0x5Au, (uint64_t)"### Receive address not found. Did you enable it with setsockopt?", v6, v7, v8, v9, v34);
  }
  int v39 = 0;
  int v32 = 0;
  unsigned int v30 = 0;
  unsigned int v31 = 0;
  unsigned int v33 = 0;
  uint64_t v38 = 0;
LABEL_20:
  uint64_t v16 = *(uint64_t (**)(uint64_t, void))(a1 + 104);
  if (v16) {
    uint64_t PacketUpTicks = v16(PacketUpTicks, *(void *)(a1 + 112));
  }
  if (v5 == 48)
  {
    unsigned int v35 = v33;
    unsigned int v36 = v31;
    unsigned int v37 = v30;
    int v15 = 0;
    LOBYTE(v43[0]) = v43[0] & 0x38 | 4;
    BYTE1(v43[0]) = 1;
    BYTE3(v43[0]) = *(unsigned char *)(a1 + 76);
    *(_OWORD *)((char *)v43 + 4) = xmmword_18E416F40;
    DWORD1(v43[1]) = 0;
    int v17 = (char *)&v44 + 8;
    fd_set v18 = (char *)&v44 + 12;
    *((void *)&v43[1] + 1) = *((void *)&v44 + 1);
    BOOL v19 = &v44;
    long long v20 = (char *)&v44 + 4;
    goto LABEL_28;
  }
  if (v5 != 32)
  {
    int v15 = 0;
    goto LABEL_49;
  }
  if ((v43[0] & 0xC0) != 0x80 || (unsigned int v35 = v33, v36 = v31, v37 = v30, BYTE1(v43[0]) != 210))
  {
    int v15 = 1;
    goto LABEL_49;
  }
  *(void *)&v43[0] = 117494656;
  int v17 = (char *)&v43[1] + 8;
  fd_set v18 = (char *)&v43[1] + 12;
  *((void *)&v43[0] + 1) = *((void *)&v43[1] + 1);
  BOOL v19 = &v43[1];
  long long v20 = (char *)&v43[1] + 4;
  int v15 = 1;
LABEL_28:
  *(_DWORD *)BOOL v19 = bswap32(*(_DWORD *)(a1 + 16) + PacketUpTicks / v4);
  *(_DWORD *)long long v20 = bswap32(((unint64_t)(PacketUpTicks % v4) << 32) / v4);
  unint64_t v21 = *(uint64_t (**)(uint64_t, void))(a1 + 104);
  uint64_t v22 = mach_absolute_time();
  if (v21) {
    uint64_t v22 = v21(v22, *(void *)(a1 + 112));
  }
  *(_DWORD *)int v17 = bswap32(*(_DWORD *)(a1 + 16) + v22 / v4);
  *(_DWORD *)fd_set v18 = bswap32(((unint64_t)(v22 % v4) << 32) / v4);
  if (v32 == 30 || v32 == 2)
  {
    fd_set v46 = v43;
    uint64_t v47 = v5;
    v45.msg_name = &v40;
    *(&v45.msg_namelen + 1) = 0;
    v45.socklen_t msg_namelen = msg_namelen;
    v45.msg_iov = (iovec *)&v46;
    *(&v45.msg_iovlen + 1) = 0;
    v45.msg_iovlen = 1;
    v45.msg_control = &v48;
    v45.msg_SCNetworkReachabilityFlags flags = 0;
    if (v39)
    {
      unsigned int v24 = v36;
      unsigned int v23 = v37;
      if (v36 || (unsigned int v24 = v35) != 0) {
        unsigned int v23 = 0;
      }
      uint64_t v48 = 24;
      int v49 = 26;
      unsigned int v50 = v23;
      unsigned int v51 = v24;
      unsigned int v52 = v35;
      socklen_t v25 = 24;
    }
    else
    {
      uint64_t v48 = 0x2900000020;
      int v49 = 46;
      unsigned int v50 = v37;
      unsigned int v51 = v36;
      unsigned int v52 = v35;
      uint64_t v53 = v38;
      socklen_t v25 = 32;
    }
    v45.msg_controllen = v25;
    ssize_t v26 = sendmsg(a2, &v45, 0);
  }
  else
  {
    ssize_t v26 = sendto(a2, v43, v5, 0, &v40, msg_namelen);
  }
  if (v26 != v5 && (!*__error() || *__error())) {
    goto LABEL_49;
  }
  uint64_t result = *(void *)(a1 + 56);
  if (*(int *)result > 10) {
    return result;
  }
  if (*(_DWORD *)result == -1)
  {
    uint64_t result = _LogCategory_Initialize(result, 0xAu);
    if (!result) {
      return result;
    }
    uint64_t result = *(void *)(a1 + 56);
  }
  uint64_t v28 = "RTCP ";
  if (v5 == 48) {
    uint64_t v28 = "";
  }
  return LogPrintF(result, (uint64_t)"void _NTPClockServerProcessPacket(NTPClockRef, SocketRef)", 0xAu, (uint64_t)"NTP server sent %sresponse to %##a, RAF %d", v6, v7, v8, v9, (uint64_t)v28);
}

CFDataRef _OPACKDecodeData(uint64_t a1, UInt8 *bytes, uint64_t a3, int a4, const UInt8 **a5, int *a6)
{
  uint64_t v8 = bytes;
  switch(a4)
  {
    case 145:
      if (a3 - (uint64_t)bytes < 1) {
        goto LABEL_24;
      }
      uint64_t v8 = bytes + 1;
      unint64_t v10 = *bytes;
      goto LABEL_12;
    case 146:
      if (a3 - (uint64_t)bytes < 2) {
        goto LABEL_24;
      }
      uint64_t v8 = bytes + 2;
      unint64_t v10 = *(unsigned __int16 *)bytes;
      goto LABEL_12;
    case 147:
      if (a3 - (uint64_t)bytes < 4) {
        goto LABEL_24;
      }
      uint64_t v8 = bytes + 4;
      unint64_t v10 = *(unsigned int *)bytes;
      goto LABEL_12;
    case 148:
      if (a3 - (uint64_t)bytes < 8) {
        goto LABEL_24;
      }
      uint64_t v8 = bytes + 8;
      unint64_t v10 = *(void *)bytes;
      if ((*(void *)bytes & 0x8000000000000000) != 0)
      {
        CFDataRef v11 = 0;
        int v12 = -6743;
      }
      else
      {
LABEL_12:
        if (a3 - (uint64_t)v8 < v10)
        {
LABEL_24:
          CFDataRef v11 = 0;
          int v12 = -6750;
          goto LABEL_20;
        }
        int v18 = 0;
        uint64_t v13 = *(void *)a1;
        if (*(void *)a1 && (*(unsigned char *)(a1 + 8) & 4) != 0)
        {
          int v17 = CFDataCreateSubdataWithRangeNoCopy(v13, (uint64_t)&v8[-*(void *)(a1 + 16)], v10, &v18);
          CFDataRef v11 = (CFDataRef)v17;
          int v12 = v18;
          if (v18) {
            goto LABEL_20;
          }
          if (!v17)
          {
LABEL_5:
            int v12 = -6762;
            goto LABEL_20;
          }
        }
        else
        {
          CFDataRef v11 = CFDataCreate(0, v8, v10);
          if (!v11)
          {
            int v12 = -6728;
            goto LABEL_20;
          }
        }
        v8 += v10;
        if (v10 >= 2)
        {
          unsigned int v14 = *(__CFDictionary **)(a1 + 24);
          if (v14)
          {
            int v15 = *(char **)(a1 + 32);
            *(void *)(a1 + 32) = v15 + 1;
            CFDictionaryAddValue(v14, v15, v11);
          }
        }
        int v12 = 0;
      }
LABEL_20:
      *a5 = v8;
      *a6 = v12;
      return v11;
    default:
      CFDataRef v11 = 0;
      goto LABEL_5;
  }
}

CFDataRef _OPACKDecodeDataChunks(uint64_t a1, char *a2, uint64_t a3, char **a4, int *a5)
{
  if (a3 - (uint64_t)a2 < 1)
  {
    CFDataRef v17 = 0;
    int v21 = -6750;
  }
  else
  {
    unint64_t v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      int v12 = a2 + 1;
      int v11 = *a2;
      if ((v11 - 112) > 0x20) {
        break;
      }
      size_t v13 = (v11 - 112);
LABEL_5:
      if (v13)
      {
        if (a3 - (uint64_t)v12 < v13)
        {
LABEL_39:
          int v21 = -6750;
          goto LABEL_28;
        }
        if (__CFADD__(v13, v9))
        {
          int v21 = -6710;
          goto LABEL_28;
        }
        unsigned int v14 = (char *)malloc_type_realloc(v10, v13 + v9, 0x9D998339uLL);
        if (!v14)
        {
LABEL_40:
          int v21 = -6728;
          goto LABEL_28;
        }
        int v15 = v14;
        memcpy(&v14[v9], v12, v13);
        a2 = &v12[v13];
        unint64_t v10 = v15;
        v9 += v13;
      }
      else
      {
        a2 = v12;
      }
      if (a3 - (uint64_t)a2 < 1)
      {
        int v21 = -6750;
        int v12 = a2;
LABEL_28:
        if (v10) {
          free(v10);
        }
        CFDataRef v17 = 0;
        goto LABEL_37;
      }
    }
    switch(*a2)
    {
      case -111:
        if (a3 - (uint64_t)v12 < 1) {
          goto LABEL_39;
        }
        int v12 = a2 + 2;
        size_t v13 = a2[1];
        goto LABEL_5;
      case -110:
        if (a3 - (uint64_t)v12 < 2) {
          goto LABEL_39;
        }
        size_t v13 = *(unsigned __int16 *)(a2 + 1);
        int v12 = a2 + 3;
        goto LABEL_5;
      case -109:
        if (a3 - (uint64_t)v12 < 4) {
          goto LABEL_39;
        }
        size_t v13 = *(unsigned int *)(a2 + 1);
        int v12 = a2 + 5;
        goto LABEL_5;
      case -108:
        if (a3 - (uint64_t)v12 < 8) {
          goto LABEL_39;
        }
        size_t v13 = *(void *)(a2 + 1);
        int v12 = a2 + 9;
        if ((v13 & 0x8000000000000000) == 0) {
          goto LABEL_5;
        }
        goto LABEL_22;
      default:
        if (v11 != 3)
        {
          int v21 = -6742;
          goto LABEL_28;
        }
        if ((v9 & 0x8000000000000000) != 0)
        {
LABEL_22:
          int v21 = -6743;
          goto LABEL_28;
        }
        if (v10) {
          CFDataRef v16 = CFDataCreateWithBytesNoCopy(0, (const UInt8 *)v10, v9, (CFAllocatorRef)*MEMORY[0x1E4F1CF90]);
        }
        else {
          CFDataRef v16 = CFDataCreate(0, (const UInt8 *)"", 0);
        }
        CFDataRef v17 = v16;
        if (!v16) {
          goto LABEL_40;
        }
        if (v9 >= 2)
        {
          int v18 = *(__CFDictionary **)(a1 + 24);
          if (v18)
          {
            BOOL v19 = *(char **)(a1 + 32);
            *(void *)(a1 + 32) = v19 + 1;
            CFDictionaryAddValue(v18, v19, v17);
          }
        }
        int v21 = 0;
        break;
    }
LABEL_37:
    a2 = v12;
  }
  *a4 = a2;
  *a5 = v21;
  return v17;
}

uint64_t _OPACKEncodeData(uint64_t a1, CFDataRef theData)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t Length = CFDataGetLength(theData);
  if (Length <= 1) {
    goto LABEL_6;
  }
  if (*(void *)(a1 + 16))
  {
    char v9 = 0;
    uint64_t result = _OPACKEncodeUID(a1, theData, &v9);
    if (result || v9) {
      return result;
    }
  }
  if (Length > 0x20)
  {
    if (Length > 0xFF)
    {
      if (Length >> 16)
      {
        if (HIDWORD(Length))
        {
          char v9 = -108;
          unint64_t v10 = Length;
          uint64_t v6 = 9;
        }
        else
        {
          char v9 = -109;
          LOWORD(v10) = Length;
          BYTE2(v10) = BYTE2(Length);
          uint64_t v6 = 5;
          BYTE3(v10) = BYTE3(Length);
        }
      }
      else
      {
        char v9 = -110;
        LOWORD(v10) = Length;
        uint64_t v6 = 3;
      }
    }
    else
    {
      char v9 = -111;
      LOBYTE(v10) = Length;
      uint64_t v6 = 2;
    }
  }
  else
  {
LABEL_6:
    char v9 = Length + 112;
    uint64_t v6 = 1;
  }
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, void, void))a1)(&v9, v6, 0, *(void *)(a1 + 8));
  if (Length)
  {
    if (!result)
    {
      uint64_t v7 = *(uint64_t (**)(const UInt8 *, unint64_t, void, void))a1;
      BytePtr = CFDataGetBytePtr(theData);
      return v7(BytePtr, Length, 0, *(void *)(a1 + 8));
    }
  }
  return result;
}

uint64_t _OPACKEncodeUUID(uint64_t a1, CFUUIDRef uuid, int a3)
{
  *(void *)&v9.byte0 = 0;
  *(void *)&v9.byte8 = 0;
  if (!*(void *)(a1 + 16)) {
    goto LABEL_5;
  }
  char v7 = 0;
  uint64_t result = _OPACKEncodeUID(a1, uuid, &v7);
  if (result) {
    return result;
  }
  if (v7) {
    return 0;
  }
LABEL_5:
  char v8 = 5;
  if (a3) {
    [(__CFUUID *)uuid getUUIDBytes:&v9];
  }
  else {
    CFUUIDBytes v9 = CFUUIDGetUUIDBytes(uuid);
  }
  return (*(uint64_t (**)(char *, uint64_t, void, void))a1)(&v8, 17, 0, *(void *)(a1 + 8));
}

uint64_t _OPACKEncodeDate(uint64_t a1, const void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(a1 + 16) || (char v5 = 0, result = _OPACKEncodeUID(a1, a2, &v5), !result) && !v5)
  {
    char v5 = 6;
    double v6 = MEMORY[0x192FA8D70](a2);
    return (*(uint64_t (**)(char *, uint64_t, void, void))a1)(&v5, 9, 0, *(void *)(a1 + 8));
  }
  return result;
}

uint64_t OPACKEstimateEncodedSize(const __CFString *a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v6 = 0;
  int v4 = OPACKEncodeObject(a1, a2, (uint64_t)_OPACKEncoderEstimateCallback, (uint64_t)&v6);
  if (a3) {
    *a3 = v4;
  }
  return v6;
}

uint64_t _OPACKEncoderEstimateCallback(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  *a4 += a2;
  return 0;
}

__CFString *OPACKDecodeBytes(UInt8 *a1, uint64_t a2, unsigned int a3, _DWORD *a4)
{
  return _OPACKDecodeBytes(0, a1, a2, a3, a4);
}

uint64_t _PairingSessionGetTypeID()
{
  uint64_t result = _CFRuntimeRegisterClass();
  gPairingSessionCFTypeID TypeID = result;
  return result;
}

uint64_t _PairingSessionFinalize(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 413))
  {
    unint64_t v2 = *(void (**)(void))(a1 + 40);
    if (v2) {
      v2(*(void *)(a1 + 24));
    }
    *(unsigned char *)(a1 + 413) = 0;
  }
  _PairingSessionReset(a1);
  unint64_t v3 = *(const void **)(a1 + 176);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 176) = 0;
  }
  int v4 = *(const void **)(a1 + 264);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 264) = 0;
  }
  char v5 = *(const void **)(a1 + 272);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 272) = 0;
  }
  uint64_t v6 = *(const void **)(a1 + 280);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 280) = 0;
  }
  uint64_t v7 = *(void **)(a1 + 216);
  if (v7)
  {
    free(v7);
    *(void *)(a1 + 216) = 0;
  }
  *(void *)(a1 + 224) = 0;
  char v8 = *(void **)(a1 + 232);
  if (v8)
  {
    free(v8);
    *(void *)(a1 + 232) = 0;
  }
  *(void *)(a1 + 240) = 0;
  CFUUIDBytes v9 = *(void **)(a1 + 248);
  if (v9)
  {
    free(v9);
    *(void *)(a1 + 248) = 0;
  }
  *(void *)(a1 + 256) = 0;
  unint64_t v10 = *(void **)(a1 + 296);
  if (v10)
  {
    free(v10);
    *(void *)(a1 + 296) = 0;
  }
  *(void *)(a1 + 304) = 0;
  uint64_t v11 = *(const void **)(a1 + 312);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(a1 + 312) = 0;
  }
  int v12 = *(const void **)(a1 + 320);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(a1 + 320) = 0;
  }
  size_t v13 = *(const void **)(a1 + 328);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(a1 + 328) = 0;
  }
  unsigned int v14 = *(const void **)(a1 + 336);
  if (v14)
  {
    CFRelease(v14);
    *(void *)(a1 + 336) = 0;
  }
  int v15 = *(void **)(a1 + 384);
  if (v15)
  {
    free(v15);
    *(void *)(a1 + 384) = 0;
  }
  *(void *)(a1 + 392) = 0;
  CFDataRef v16 = *(void **)(a1 + 352);
  if (v16)
  {
    free(v16);
    *(void *)(a1 + 352) = 0;
  }
  *(void *)(a1 + 360) = 0;
  CFDataRef v17 = *(const void **)(a1 + 672);
  if (v17)
  {
    CFRelease(v17);
    *(void *)(a1 + 672) = 0;
  }
  int v18 = *(const void **)(a1 + 344);
  if (v18)
  {
    CFRelease(v18);
    *(void *)(a1 + 344) = 0;
  }
  BOOL v19 = *(const void **)(a1 + 752);
  if (v19)
  {
    CFRelease(v19);
    *(void *)(a1 + 752) = 0;
  }
  long long v20 = *(const void **)(a1 + 760);
  if (v20)
  {
    CFRelease(v20);
    *(void *)(a1 + 760) = 0;
  }
  int v21 = *(const void **)(a1 + 776);
  if (v21)
  {
    CFRelease(v21);
    *(void *)(a1 + 776) = 0;
  }
  uint64_t v22 = *(const void **)(a1 + 784);
  if (v22)
  {
    CFRelease(v22);
    *(void *)(a1 + 784) = 0;
  }
  unsigned int v23 = *(const void **)(a1 + 800);
  if (v23)
  {
    CFRelease(v23);
    *(void *)(a1 + 800) = 0;
  }
  unsigned int v24 = *(const void **)(a1 + 816);
  if (v24)
  {
    CFRelease(v24);
    *(void *)(a1 + 816) = 0;
  }
  socklen_t v25 = *(const void **)(a1 + 824);
  if (v25)
  {
    CFRelease(v25);
    *(void *)(a1 + 824) = 0;
  }
  ssize_t v26 = *(const void **)(a1 + 832);
  if (v26)
  {
    CFRelease(v26);
    *(void *)(a1 + 832) = 0;
  }
  uint64_t v27 = *(const void **)(a1 + 840);
  if (v27)
  {
    CFRelease(v27);
    *(void *)(a1 + 840) = 0;
  }
  uint64_t v28 = *(const void **)(a1 + 848);
  if (v28)
  {
    CFRelease(v28);
    *(void *)(a1 + 848) = 0;
  }
  uint64_t v29 = *(const void **)(a1 + 856);
  if (v29)
  {
    CFRelease(v29);
    *(void *)(a1 + 856) = 0;
  }
  unsigned int v30 = *(const void **)(a1 + 944);
  if (v30)
  {
    CFRelease(v30);
    *(void *)(a1 + 944) = 0;
  }
  unsigned int v31 = *(const void **)(a1 + 952);
  if (v31)
  {
    CFRelease(v31);
    *(void *)(a1 + 952) = 0;
  }
  int v32 = *(const void **)(a1 + 960);
  if (v32)
  {
    CFRelease(v32);
    *(void *)(a1 + 960) = 0;
  }
  unsigned int v33 = *(const void **)(a1 + 968);
  if (v33)
  {
    CFRelease(v33);
    *(void *)(a1 + 968) = 0;
  }
  uint64_t v34 = *(const void **)(a1 + 976);
  if (v34)
  {
    CFRelease(v34);
    *(void *)(a1 + 976) = 0;
  }
  return memset_s((void *)(a1 + 16), 0x3C8uLL, 0, 0x3C8uLL);
}