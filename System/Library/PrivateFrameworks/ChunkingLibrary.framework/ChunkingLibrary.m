void _CKFileDigestResultsCFFinalize(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t vars8;

  v2 = *(int *)(a1 + 16);
  if (v2) {
    _requestCallbacks_3[4 * v2 + 3](a1);
  }
  v3 = *(void **)(a1 + 32);
  free(v3);
}

uint64_t CKFileDigestArgumentsFileSchemeByte(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if (v1) {
    return _requestCallbacks_4[6 * v1 + 1]();
  }
  else {
    return 0;
  }
}

uint64_t CKFileSignatureGeneratorV1Update(uint64_t a1, const void *a2, uint64_t a3)
{
  v3 = *(CC_SHA1_CTX **)(a1 + 48);
  *(void *)(a1 + 40) += a3;
  CC_SHA1_Update(v3, a2, a3);
  return 1;
}

uint64_t CKFileDigestArgumentsGetClass(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t CKFileDigestArgumentsV1WithFileCreate(CFTypeRef *a1, char a2, CFTypeRef *a3)
{
  return _CKFileDigestArgumentsV1Create(a1, 1, a2, a3);
}

uint64_t CKFileSignatureGeneratorV1Init(uint64_t a1)
{
  *(void *)(a1 + 40) = 0;
  return 1;
}

uint64_t CKFileSchemeAndSignatureSize(unsigned char *a1)
{
  uint64_t v1 = CKFileSignatureSize(a1);
  if (v1) {
    return v1 + 1;
  }
  else {
    return 0;
  }
}

uint64_t CKFileSignatureGeneratorV1Finish(uint64_t a1, uint64_t a2, void *a3, CFErrorRef *a4)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (a4) {
    *a4 = 0;
  }
  *(void *)md = 0;
  uint64_t v22 = 0;
  int v23 = 0;
  v8 = (CFTypeRef *)(a1 + 32);
  if (*(void *)(a1 + 32))
  {
    v9 = 0;
    goto LABEL_5;
  }
  CC_SHA1_Final(md, *(CC_SHA1_CTX **)(a1 + 48));
  char v20 = CKFileDigestArgumentsFileSchemeByte(*(void *)(a1 + 24));
  v9 = (unsigned char *)CKFileSchemeAndSignatureSize(&v20);
  uint64_t v12 = CKFileSignatureSize(&v20);
  if (!v9) {
    goto LABEL_22;
  }
  size_t v13 = v12;
  v14 = malloc_type_calloc(1uLL, (size_t)v9, 0x1C42D82EuLL);
  v9 = v14;
  if (!v14) {
    goto LABEL_22;
  }
  unsigned char *v14 = v20;
  memcpy(v14 + 1, md, v13);
  CKFileDigestResultsCreate((void *)(a1 + 32), v9, *(void *)(a1 + 40), 0);
  uint64_t v15 = *(void *)(a1 + 32);
  if (!v15) {
    goto LABEL_22;
  }
  if (!a2)
  {
LABEL_5:
    uint64_t v10 = 1;
    if (!a3) {
      goto LABEL_23;
    }
    goto LABEL_6;
  }
  uint64_t v16 = CKFileDigestResultsEqual(a2, v15);
  if (!v16)
  {
    CFErrorRef v17 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], @"com.apple.chunkinglibrary", 3, 0);
    CFErrorRef v18 = v17;
    if (a4 && v17)
    {
      CFRetain(v17);
      *a4 = v18;
LABEL_21:
      CFRelease(v18);
      goto LABEL_22;
    }
    if (v17) {
      goto LABEL_21;
    }
LABEL_22:
    uint64_t v10 = 0;
    goto LABEL_23;
  }
  uint64_t v10 = v16;
  if (!a3) {
    goto LABEL_23;
  }
LABEL_6:
  if (*v8)
  {
    CFRetain(*v8);
    CFTypeRef v11 = *v8;
  }
  else
  {
    CFTypeRef v11 = 0;
  }
  *a3 = v11;
LABEL_23:
  free(v9);
  return v10;
}

uint64_t CKFileDigestArgumentsV1FileSchemeByte(uint64_t a1)
{
  return **(unsigned __int8 **)(a1 + 24) | ((*(unsigned char *)(a1 + 20) == 0) << 7);
}

uint64_t CKFileSignatureGeneratorCreate(void *a1, const void *a2)
{
  if (a1) {
    *a1 = 0;
  }
  int Class = CKFileDigestArgumentsGetClass((uint64_t)a2);
  if (Class == 1)
  {
    CFTypeRef cf = 0;
    uint64_t v5 = 96;
  }
  else
  {
    if (Class != 2) {
      return 0;
    }
    CFTypeRef cf = 0;
    uint64_t v5 = 8;
  }
  CFTypeRef v11 = 0;
  *a1 = 0;
  int v6 = CKFileSignatureGeneratorAllocate((uint64_t *)&v11, Class, v5);
  uint64_t v7 = 0;
  v8 = (int *)v11;
  if (v6 && v11)
  {
    CFTypeRef cf = 0;
    CKBaseRetain(a2);
    *((void *)v8 + 3) = a2;
    v9 = _requestCallbacks_2[4 * v8[4]];
    if (v9 && ((unsigned int (*)(int *, const void *, CFTypeRef *))v9)(v8, a2, &cf))
    {
      CFRetain(v8);
      *a1 = v8;
      uint64_t v7 = 1;
    }
    else
    {
      uint64_t v7 = 0;
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v8) {
    CFRelease(v8);
  }
  return v7;
}

uint64_t CKFileSignatureSize(unsigned char *a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1 & 0x7F;
  if (v1 - 1) < 0xB && ((0x48Bu >> (v1 - 1))) {
    return 20;
  }
  if (CK_DEFAULT_LOG_BLOCK_3 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_3, &__block_literal_global_3);
  }
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_3, OS_LOG_TYPE_ERROR))
  {
    CFStringRef v2 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Unknown file signature scheme: 0x%x\n", v1);
    if (CK_DEFAULT_LOG_BLOCK_3 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_3, &__block_literal_global_6_1);
    }
    v3 = CK_DEFAULT_LOG_INTERNAL_3;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      CFStringRef v6 = v2;
      _os_log_impl(&dword_215163000, v3, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v2) {
      CFRelease(v2);
    }
  }
  return 0;
}

uint64_t CKFileSignatureGeneratorUpdate(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 16);
  if (v1) {
    return _requestCallbacks_2[4 * v1 + 1]();
  }
  else {
    return 0;
  }
}

void _CKFileSignatureGeneratorCFFinalize(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 16);
  if (v2) {
    ((void (*)(uint64_t))_requestCallbacks_2[4 * v2 + 3])(a1);
  }
  v3 = *(const void **)(a1 + 24);
  if (v3) {
    CKBaseRelease(v3);
  }
  *(void *)(a1 + 24) = 0;
  v4 = *(const void **)(a1 + 32);
  if (v4) {
    CKBaseRelease(v4);
  }
  *(void *)(a1 + 32) = 0;
}

uint64_t CKFileDigestResultsCreate(void *a1, unsigned char *a2, uint64_t a3, const void *a4)
{
  if (!a2) {
    return 0;
  }
  int v4 = *a2 & 0x7F;
  if (v4 == 8 || v4 == 4) {
    return CKFileDigestResultsV2Create(a1, a2, a3, a4);
  }
  else {
    return CKFileDigestResultsV1Create(a1, a2, a3);
  }
}

uint64_t CKTypeRegister(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    pthread_mutex_lock(&CKTypeRegister_lock);
    if (!*a1) {
      *a1 = _CFRuntimeRegisterClass();
    }
    pthread_mutex_unlock(&CKTypeRegister_lock);
    return *a1;
  }
  return result;
}

uint64_t CKFileSignatureGeneratorFinish(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 16);
  if (v1) {
    return _requestCallbacks_2[4 * v1 + 2]();
  }
  else {
    return 0;
  }
}

void *CKFileSignatureCopy(unsigned char *a1)
{
  uint64_t v2 = CKFileSignatureSize(a1);
  if (!v2) {
    return 0;
  }
  size_t v3 = v2 + 1;
  int v4 = malloc_type_malloc(v2 + 1, 0xDD5359uLL);
  uint64_t v5 = v4;
  if (v4) {
    memcpy(v4, a1, v3);
  }
  return v5;
}

uint64_t CKFileSignatureGeneratorAllocate(uint64_t *a1, int a2, uint64_t a3)
{
  *a1 = 0;
  size_t v5 = a3 + 56;
  uint64_t v6 = CKTypeRegister(&CKFileSignatureGeneratorGetTypeID_typeID);
  uint64_t result = CKTypeCreateInstance_(0, v6, v5);
  if (result)
  {
    *(_DWORD *)(result + 16) = a2;
    *(void *)(result + 48) = result + 56;
    *a1 = result;
    return 1;
  }
  return result;
}

uint64_t _CKFileDigestArgumentsV1Create(CFTypeRef *a1, int a2, char a3, CFTypeRef *a4)
{
  CFTypeRef cf = 0;
  CFTypeRef v15 = 0;
  *a1 = 0;
  int v8 = CKFileDigestArgumentsAllocate((uint64_t *)&cf, 1, 4);
  uint64_t v9 = 0;
  CFTypeRef v10 = cf;
  if (v8 && cf)
  {
    if (_CKChunkDigestArgumentsInit((uint64_t)cf, a3, &v15))
    {
      CFTypeRef v11 = cf;
      **((_DWORD **)cf + 3) = a2;
      CFRetain(v11);
      CFTypeRef v12 = v15;
      *a1 = cf;
      uint64_t v9 = 1;
    }
    else
    {
      uint64_t v9 = 0;
      CFTypeRef v12 = v15;
      if (a4 && v15)
      {
        CFRetain(v15);
        uint64_t v9 = 0;
        CFTypeRef v12 = v15;
        *a4 = v15;
      }
    }
    if (v12) {
      CFRelease(v12);
    }
    CFTypeRef v10 = cf;
  }
  if (v10) {
    CFRelease(v10);
  }
  return v9;
}

uint64_t CKFileDigestArgumentsAllocate(uint64_t *a1, int a2, uint64_t a3)
{
  *a1 = 0;
  size_t v5 = a3 + 32;
  uint64_t v6 = CKTypeRegister(&CKFileDigestArgumentsGetTypeID_typeID);
  uint64_t result = CKTypeCreateInstance_(0, v6, v5);
  if (result)
  {
    *(_DWORD *)(result + 16) = a2;
    *(void *)(result + 24) = result + 32;
    *a1 = result;
    return 1;
  }
  return result;
}

uint64_t CKFileDigestResultsV1Create(void *a1, unsigned char *a2, uint64_t a3)
{
  CFTypeRef cf = 0;
  uint64_t v12 = 0;
  *a1 = 0;
  int v6 = CKFileDigestResultsAllocate((uint64_t *)&cf, 1, 0);
  uint64_t v7 = 0;
  CFTypeRef v8 = cf;
  if (v6 && cf)
  {
    int v9 = _CKFileDigestResultsInit((uint64_t)cf, a2, a3, &v12);
    CFTypeRef v8 = cf;
    if (!v9)
    {
      uint64_t v7 = 0;
      if (!cf) {
        return v7;
      }
      goto LABEL_8;
    }
    if (cf)
    {
      CFRetain(cf);
      CFTypeRef v8 = cf;
    }
    *a1 = v8;
    uint64_t v7 = 1;
  }
  if (v8) {
LABEL_8:
  }
    CFRelease(v8);
  return v7;
}

uint64_t CKTypeCreateInstance_(uint64_t a1, uint64_t a2, size_t a3)
{
  if (HIDWORD(a3)) {
    return 0;
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v3 = Instance;
  if (Instance) {
    bzero((void *)(Instance + 16), a3);
  }
  return v3;
}

uint64_t CKFileDigestResultsAllocate(uint64_t *a1, int a2, uint64_t a3)
{
  *a1 = 0;
  size_t v5 = a3 + 48;
  uint64_t v6 = CKTypeRegister(&CKFileDigestResultsGetTypeID_typeID);
  uint64_t result = CKTypeCreateInstance_(0, v6, v5);
  if (result)
  {
    *(_DWORD *)(result + 16) = a2;
    *(void *)(result + 40) = result + 48;
    *a1 = result;
    return 1;
  }
  return result;
}

uint64_t make_fd_uncached(int a1)
{
  return fcntl(a1, 48, 1);
}

uint64_t open_dir_for_fd(const char *a1)
{
  return open(a1, 0x200000);
}

uint64_t get_path_for_fd(int a1, char *a2)
{
  memset(&v8, 0, sizeof(v8));
  int v4 = -5;
  fsid_t v7 = 0;
  while (1)
  {
    if (fstat(a1, &v8) < 0) {
      return 0xFFFFFFFFLL;
    }
    v7.val[1] = 0;
    v7.val[0] = v8.st_dev;
    if ((fsgetpath(a2, 0x400uLL, &v7, v8.st_ino) & 0x8000000000000000) == 0) {
      break;
    }
    if (*__error() != 35 || v4++ == 0) {
      return 0xFFFFFFFFLL;
    }
  }
  return 0;
}

uint64_t mkdir_recursive(uint64_t a1, mode_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  bzero(path, 0x400uLL);
  if ((unint64_t)__strlcpy_chk() <= 0x3FF)
  {
    uint64_t result = mkpath_np(path, a2);
    int v3 = result;
    if (!result) {
      return result;
    }
  }
  else
  {
    int v3 = 63;
  }
  *__error() = v3;
  return 0xFFFFFFFFLL;
}

const void **CKChunkCryptorV2Finalize(uint64_t a1)
{
  uint64_t result = **(const void ****)(a1 + 40);
  if (result) {
    return (const void **)CSContext_Destroy(result, 0);
  }
  return result;
}

uint64_t CKChunkCryptorV2Init(uint64_t a1, int a2, uint64_t a3, int a4)
{
  LODWORD(v4) = a4;
  CFErrorRef v22 = 0;
  uint64_t v8 = CKChunkDigestResultsChunkKey(a3);
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFTypeRef v10 = (const UInt8 *)(v8 + 1);
  CFIndex v11 = CKEncryptionKeySize();
  CFDataRef v12 = CFDataCreate(v9, v10, v11);
  size_t v13 = (unsigned char *)CKChunkDigestResultsChunkSignature(a3);
  v14 = v13 + 1;
  CFIndex v15 = CKChunkSignatureSize(v13);
  CFDataRef v16 = CFDataCreate(v9, v14, v15);
  unsigned int v17 = CKChunkDigestResultsChunkLength(a3);
  unint64_t v18 = v17;
  if (v4) {
    unint64_t v4 = v4;
  }
  else {
    unint64_t v4 = v17;
  }
  if (v4 < v17) {
    CKChunkCryptorV2Init_cold_1();
  }
  if (!CSContext_Initialize(*(void **)(a1 + 40), &v22)) {
    goto LABEL_11;
  }
  uint64_t v19 = **(void **)(a1 + 40);
  if (a2)
  {
    if (CSChunkCryptor_InitializeEncryptor(v19, v12, v16, v18, v4, &v22)) {
      goto LABEL_8;
    }
LABEL_11:
    uint64_t v20 = 0;
    if (!v12) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (!CSChunkCryptor_InitializeDecryptor(v19, v12, v16, v18, v4, &v22)) {
    goto LABEL_11;
  }
LABEL_8:
  uint64_t v20 = 1;
  if (v12) {
LABEL_12:
  }
    CFRelease(v12);
LABEL_13:
  if (v16) {
    CFRelease(v16);
  }
  return v20;
}

uint64_t CKChunkCryptorV2Update(uint64_t a1, uint64_t a2, unsigned int a3)
{
  CFTypeRef cf = 0;
  uint64_t v3 = CSChunkCryptor_Update(**(void **)(a1 + 40), a2, a3, (CFErrorRef *)&cf);
  if (cf) {
    CFRelease(cf);
  }
  return v3;
}

uint64_t CKChunkCryptorV2Finish(uint64_t a1, CFErrorRef *a2)
{
  unint64_t v4 = (unsigned char *)CKChunkDigestResultsChunkSignature(*(void *)(a1 + 24));
  uint64_t v5 = **(void **)(a1 + 40);
  uint64_t v6 = (uint64_t)(v4 + 1);
  uint64_t v7 = CKChunkSignatureSize(v4);
  return CSChunkCryptor_Finalize(v5, v6, v7, a2);
}

uint64_t CKChunkSignatureGeneratorAllocate(uint64_t *a1, int a2, uint64_t a3)
{
  *a1 = 0;
  size_t v5 = a3 + 56;
  uint64_t v6 = CKTypeRegister(&CKChunkSignatureGeneratorGetTypeID_typeID);
  uint64_t result = CKTypeCreateInstance_(0, v6, v5);
  if (result)
  {
    *(_DWORD *)(result + 16) = a2;
    *(void *)(result + 48) = result + 56;
    *a1 = result;
    return 1;
  }
  return result;
}

uint64_t CKChunkSignatureGeneratorCreate(void *a1, const void *a2)
{
  if (!a1) {
    return 0;
  }
  *a1 = 0;
  int Class = CKChunkDigestArgumentsGetClass((uint64_t)a2);
  if (Class != 1)
  {
    if (Class == 2)
    {
      CFTypeRef cf = 0;
      uint64_t v5 = 8;
      goto LABEL_7;
    }
    return 0;
  }
  CFTypeRef cf = 0;
  uint64_t v5 = 104;
LABEL_7:
  CFTypeRef v11 = 0;
  *a1 = 0;
  int v7 = CKChunkSignatureGeneratorAllocate((uint64_t *)&v11, Class, v5);
  uint64_t v6 = 0;
  uint64_t v8 = (int *)v11;
  if (v7 && v11)
  {
    CFTypeRef cf = 0;
    CKBaseRetain(a2);
    *((void *)v8 + 3) = a2;
    CFAllocatorRef v9 = _requestCallbacks[4 * v8[4]];
    if (v9 && ((unsigned int (*)(int *, const void *, CFTypeRef *))v9)(v8, a2, &cf))
    {
      CFRetain(v8);
      *a1 = v8;
      uint64_t v6 = 1;
    }
    else
    {
      uint64_t v6 = 0;
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v8) {
    CFRelease(v8);
  }
  return v6;
}

uint64_t CKChunkSignatureGeneratorUpdate(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 16);
  if (v1) {
    return _requestCallbacks[4 * v1 + 1]();
  }
  else {
    return 0;
  }
}

uint64_t CKChunkSignatureGeneratorFinish(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 16);
  if (v1) {
    return _requestCallbacks[4 * v1 + 2]();
  }
  else {
    return 0;
  }
}

void _CKChunkSignatureGeneratorCFFinalize(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 16);
  if (v2) {
    ((void (*)(uint64_t))_requestCallbacks[4 * v2 + 3])(a1);
  }
  uint64_t v3 = *(const void **)(a1 + 24);
  if (v3) {
    CKBaseRelease(v3);
  }
  *(void *)(a1 + 24) = 0;
  unint64_t v4 = *(const void **)(a1 + 32);
  if (v4) {
    CKBaseRelease(v4);
  }
  *(void *)(a1 + 32) = 0;
}

BOOL _CKChunkSignatureGeneratorCFEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t _CKChunkSignatureGeneratorCFCopyFormatDescription()
{
  return 0;
}

uint64_t _CKChunkSignatureGeneratorCFCopyDebugDescription()
{
  return 0;
}

uint64_t CSCopier_Destroy(uint64_t a1, CFErrorRef *a2)
{
  if (a1 && (uint64_t v4 = *(void *)(a1 + 64)) != 0)
  {
    if (*(void *)v4)
    {
      CFRelease(*(CFTypeRef *)v4);
      *(void *)uint64_t v4 = 0;
    }
    uint64_t v5 = *(const void **)(v4 + 8);
    if (v5)
    {
      CFRelease(v5);
      *(void *)(v4 + 8) = 0;
    }
    uint64_t v6 = *(const void **)(v4 + 16);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(v4 + 16) = 0;
    }
    int v7 = *(const void **)(v4 + 24);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(v4 + 24) = 0;
    }
    uint64_t v8 = *(const void **)(v4 + 32);
    if (v8)
    {
      CFRelease(v8);
      *(void *)(v4 + 32) = 0;
    }
    CFAllocatorRef v9 = *(const void **)(v4 + 40);
    if (v9) {
      CFRelease(v9);
    }
    free((void *)v4);
    *(void *)(a1 + 64) = 0;
    return 1;
  }
  else
  {
    CFErrorRef v11 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (CFErrorDomain)*MEMORY[0x263EFFC60], 6, 0);
    uint64_t result = 0;
    *a2 = v11;
  }
  return result;
}

uint64_t CSCopier_Initialize(uint64_t a1, const __CFData *a2, const __CFData *a3, const __CFData *a4, CFErrorRef *a5)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (!*(void *)(a1 + 32))
  {
    CFAllocatorRef v16 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFStringRef v17 = (const __CFString *)*MEMORY[0x263EFFC60];
    CFIndex v18 = 6;
LABEL_8:
    CFErrorRef v19 = CFErrorCreate(v16, v17, v18, 0);
    uint64_t result = 0;
    *a5 = v19;
    return result;
  }
  CFTypeRef v10 = (const __CFData **)malloc_type_malloc(0x30uLL, 0x60040620FCCB7uLL);
  if (!v10)
  {
    CFAllocatorRef v16 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFStringRef v17 = (const __CFString *)*MEMORY[0x263EFFC60];
    CFIndex v18 = 1;
    goto LABEL_8;
  }
  CFErrorRef v11 = v10;
  CFErrorRef v22 = a5;
  uint64_t v12 = ccsha256_di();
  *(_OWORD *)bytes = 0u;
  long long v24 = 0u;
  CFDataGetLength(*(CFDataRef *)(a1 + 32));
  CFDataGetBytePtr(*(CFDataRef *)(a1 + 32));
  CFDataGetLength(a3);
  CFDataGetBytePtr(a3);
  CFDataGetLength(a2);
  CFDataGetBytePtr(a2);
  int v13 = cchkdf();
  CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  if (v13) {
    goto LABEL_10;
  }
  CFDataRef v15 = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], bytes, 32);
  *CFErrorRef v11 = v15;
  *(_OWORD *)bytes = 0u;
  long long v24 = 0u;
  if (a4)
  {
    CFDataGetLength(a4);
    CFDataGetBytePtr(a4);
    CFDataRef v15 = *v11;
  }
  CFDataGetLength(v15);
  CFDataGetBytePtr(*v11);
  if (cchkdf())
  {
LABEL_10:
    CFErrorRef v21 = CFErrorCreate(v14, (CFErrorDomain)*MEMORY[0x263EFFC60], 2, 0);
    uint64_t result = 0;
    *CFErrorRef v22 = v21;
  }
  else
  {
    v11[1] = CFDataCreate(v14, bytes, 32);
    cc_clear();
    *(void *)(a1 + 64) = v11;
    return _CSCopier_DeriveKeysFromCopyKey(a1, v12, v22);
  }
  return result;
}

uint64_t _CSCopier_DeriveKeysFromCopyKey(uint64_t a1, uint64_t a2, CFErrorRef *a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 64);
  if (v4)
  {
    uint64_t v17 = 0;
    *(_OWORD *)bytes = 0u;
    long long v16 = 0u;
    CFDataGetLength(*(CFDataRef *)(v4 + 8));
    CFDataGetBytePtr(*(CFDataRef *)(v4 + 8));
    int v5 = cchkdf();
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    if (!v5)
    {
      *(void *)(v4 + 16) = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], bytes, 8);
      *(void *)(v4 + 24) = CFDataCreate(v6, &bytes[8], 32);
      uint64_t v14 = 0;
      *(_OWORD *)uint64_t v12 = 0u;
      long long v13 = 0u;
      CFDataGetLength(*(CFDataRef *)(v4 + 8));
      CFDataGetBytePtr(*(CFDataRef *)(v4 + 8));
      if (!cchkdf())
      {
        *(void *)(v4 + 32) = CFDataCreate(v6, v12, 8);
        *(void *)(v4 + 40) = CFDataCreate(v6, &v12[8], 32);
        cc_clear();
        cc_clear();
        return 1;
      }
    }
    CFStringRef v7 = (const __CFString *)*MEMORY[0x263EFFC60];
    CFAllocatorRef v8 = v6;
    CFIndex v9 = 2;
  }
  else
  {
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFStringRef v7 = (const __CFString *)*MEMORY[0x263EFFC60];
    CFIndex v9 = 6;
  }
  CFErrorRef v10 = CFErrorCreate(v8, v7, v9, 0);
  uint64_t result = 0;
  *a3 = v10;
  return result;
}

uint64_t CSCopier_InitializeFromKey(uint64_t a1, const __CFData *a2, CFErrorRef *a3)
{
  CFAllocatorRef v6 = malloc_type_malloc(0x30uLL, 0x60040620FCCB7uLL);
  if (v6)
  {
    CFStringRef v7 = v6;
    *(void *)(a1 + 64) = v6;
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFIndex Length = CFDataGetLength(a2);
    v7[1] = CFDataCreateMutableCopy(v8, Length, a2);
    uint64_t v10 = ccsha256_di();
    uint64_t result = _CSCopier_DeriveKeysFromCopyKey(a1, v10, a3);
    if (result)
    {
      *(void *)(a1 + 64) = v7;
      return 1;
    }
  }
  else
  {
    CFErrorRef v12 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (CFErrorDomain)*MEMORY[0x263EFFC60], 1, 0);
    uint64_t result = 0;
    *a3 = v12;
  }
  return result;
}

uint64_t CSCopier_ExportCopyKey(uint64_t a1, CFMutableDataRef *a2, CFErrorRef *a3)
{
  uint64_t v4 = *(void *)(a1 + 64);
  if (v4)
  {
    CFDataRef v5 = *(const __CFData **)(v4 + 8);
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    if (v5)
    {
      CFIndex Length = CFDataGetLength(v5);
      *a2 = CFDataCreateMutableCopy(v6, Length, *(CFDataRef *)(v4 + 8));
      return 1;
    }
    CFStringRef v11 = (const __CFString *)*MEMORY[0x263EFFC60];
    CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  }
  else
  {
    CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFStringRef v11 = (const __CFString *)*MEMORY[0x263EFFC60];
  }
  CFErrorRef v12 = CFErrorCreate(v10, v11, 6, 0);
  uint64_t result = 0;
  *a3 = v12;
  return result;
}

uint64_t CSCopier_ExportCopyCredentials(uint64_t a1, CFMutableDataRef *a2, CFMutableDataRef *a3, CFErrorRef *a4)
{
  uint64_t v5 = *(void *)(a1 + 64);
  if (v5 && (CFDataRef v6 = *(const __CFData **)(v5 + 16)) != 0 && *(void *)(v5 + 24))
  {
    CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFIndex Length = CFDataGetLength(v6);
    *a2 = CFDataCreateMutableCopy(v9, Length, *(CFDataRef *)(v5 + 16));
    CFIndex v11 = CFDataGetLength(*(CFDataRef *)(v5 + 24));
    *a3 = CFDataCreateMutableCopy(v9, v11, *(CFDataRef *)(v5 + 24));
    return 1;
  }
  else
  {
    CFErrorRef v13 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (CFErrorDomain)*MEMORY[0x263EFFC60], 6, 0);
    uint64_t result = 0;
    *a4 = v13;
  }
  return result;
}

uint64_t CSCopier_CreateChunkSignature(uint64_t a1, uint64_t a2, const __CFData *a3, CFErrorRef *a4)
{
  uint64_t v5 = *(void *)(a1 + 64);
  if (!v5)
  {
    CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFStringRef v10 = (const __CFString *)*MEMORY[0x263EFFC60];
    CFIndex v11 = 6;
LABEL_8:
    *a4 = CFErrorCreate(v9, v10, v11, 0);
    return 0;
  }
  if (!a2)
  {
    CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFStringRef v10 = (const __CFString *)*MEMORY[0x263EFFC60];
    CFIndex v11 = 11;
    goto LABEL_8;
  }
  CFDataRef v7 = *(const __CFData **)(v5 + 40);
  return _CSCopier_PermuteChunkSignature(a1, a2, v7, a3, a4);
}

uint64_t _CSCopier_PermuteChunkSignature(uint64_t a1, uint64_t a2, const __CFData *a3, const __CFData *a4, CFErrorRef *a5)
{
  v14[2] = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 64);
  if (v6 && (CFDataRef v7 = *(const __CFData **)(v6 + 32)) != 0)
  {
    v14[0] = a2;
    v14[1] = 0;
    if (CFDataGetLength(v7) >= 1)
    {
      CFIndex v10 = 0;
      do
      {
        char v11 = *((unsigned char *)v14 + v10);
        *((unsigned char *)v14 + v10) = CFDataGetBytePtr(*(CFDataRef *)(v6 + 32))[v10] ^ v11;
        ++v10;
      }
      while (CFDataGetLength(*(CFDataRef *)(v6 + 32)) > v10);
    }
    if (_CSCopier_EncryptBlob((uint64_t)v14, a3, a4, a5))
    {
      return 1;
    }
    else
    {
      cc_clear();
      return 0;
    }
  }
  else
  {
    CFErrorRef v13 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (CFErrorDomain)*MEMORY[0x263EFFC60], 6, 0);
    uint64_t result = 0;
    *a5 = v13;
  }
  return result;
}

uint64_t CSCopier_CreateFORD(uint64_t a1, const __CFData *a2, CFErrorRef *a3)
{
  uint64_t v4 = *(void *)(a1 + 64);
  if (v4)
  {
    CFDataRef v6 = *(const __CFData **)(v4 + 24);
    return _CSCopier_PermuteFORD(a1, v6, a2, a3);
  }
  else
  {
    *a3 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (CFErrorDomain)*MEMORY[0x263EFFC60], 6, 0);
    return 0;
  }
}

uint64_t _CSCopier_PermuteFORD(uint64_t a1, const __CFData *a2, const __CFData *a3, CFErrorRef *a4)
{
  v13[2] = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a1 + 64);
  if (v5 && (CFDataRef v6 = *(const __CFData **)(v5 + 16)) != 0)
  {
    v13[0] = 0;
    v13[1] = 0;
    CFDataGetLength(v6);
    __memset_chk();
    if (CFDataGetLength(*(CFDataRef *)(v5 + 16)) >= 1)
    {
      CFIndex v9 = 0;
      do
      {
        char v10 = *((unsigned char *)v13 + v9);
        *((unsigned char *)v13 + v9) = CFDataGetBytePtr(*(CFDataRef *)(v5 + 16))[v9] ^ v10;
        ++v9;
      }
      while (CFDataGetLength(*(CFDataRef *)(v5 + 16)) > v9);
    }
    if (_CSCopier_EncryptBlob((uint64_t)v13, a2, a3, a4))
    {
      return 1;
    }
    else
    {
      cc_clear();
      return 0;
    }
  }
  else
  {
    CFErrorRef v12 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (CFErrorDomain)*MEMORY[0x263EFFC60], 6, 0);
    uint64_t result = 0;
    *a4 = v12;
  }
  return result;
}

uint64_t _CSCopier_PermuteFileSignature(uint64_t a1, const __CFData *a2, CFErrorRef *a3)
{
  v11[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 64);
  if (v4 && (CFDataRef v5 = *(const __CFData **)(v4 + 32)) != 0)
  {
    v11[0] = 0;
    v11[1] = 0;
    CFDataGetLength(v5);
    __memset_chk();
    if (CFDataGetLength(*(CFDataRef *)(v4 + 32)) >= 1)
    {
      CFIndex v7 = 0;
      do
      {
        char v8 = *((unsigned char *)v11 + v7);
        *((unsigned char *)v11 + v7) = CFDataGetBytePtr(*(CFDataRef *)(v4 + 32))[v7] ^ v8;
        ++v7;
      }
      while (CFDataGetLength(*(CFDataRef *)(v4 + 32)) > v7);
    }
    if (_CSCopier_EncryptBlob((uint64_t)v11, *(const __CFData **)(v4 + 40), a2, a3))
    {
      return 1;
    }
    else
    {
      cc_clear();
      return 0;
    }
  }
  else
  {
    CFErrorRef v10 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (CFErrorDomain)*MEMORY[0x263EFFC60], 6, 0);
    uint64_t result = 0;
    *a3 = v10;
  }
  return result;
}

uint64_t _CSCopier_EncryptBlob(uint64_t a1, const __CFData *a2, const __CFData *a3, CFErrorRef *a4)
{
  ccaes_ctr_crypt_mode();
  CFDataGetLength(a2);
  CFDataGetBytePtr(a2);
  CFDataGetLength(a3);
  CFDataGetBytePtr(a3);
  CFDataGetBytePtr(a3);
  if (!ccctr_one_shot()) {
    return 1;
  }
  CFErrorRef v7 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (CFErrorDomain)*MEMORY[0x263EFFC60], 10, 0);
  uint64_t result = 0;
  *a4 = v7;
  return result;
}

uint64_t CKStreamKeyDerivation(CFDataRef theData, const __CFData *a2, const __CFData *a3, CFDataRef *a4, CFDataRef *a5)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  *(_OWORD *)bytes = 0u;
  long long v22 = 0u;
  if (a4) {
    *a4 = 0;
  }
  if (a5) {
    *a5 = 0;
  }
  if (!theData || CFDataGetLength(theData) != 16)
  {
    CFStringRef v10 = @"Bad assetKey";
    goto LABEL_14;
  }
  if (!a3 || CFDataGetLength(a3) != 16)
  {
    CFStringRef v10 = @"Bad salt";
    goto LABEL_14;
  }
  if (!a2 || CFDataGetLength(a2) <= 15)
  {
    CFStringRef v10 = @"Bad concatenatedChunkKeys";
LABEL_14:
    CFErrorRef v11 = CKErrorCreateWithFormat(6, v10);
    goto LABEL_15;
  }
  CFDataGetBytePtr(theData);
  CFDataGetLength(theData);
  CFDataGetBytePtr(a2);
  CFIndex Length = CFDataGetLength(a2);
  BytePtr = CFDataGetBytePtr(a3);
  CFIndex v20 = CFDataGetLength(a3);
  uint64_t v17 = CCKeyDerivationHMac();
  if (v17)
  {
    CFErrorRef v11 = CKErrorCreateWithFormat(5, @"CCKeyDerivationHMac %d", v17, 0, 0, BytePtr, v20, bytes, 32);
  }
  else
  {
    if (!a4) {
      return 1;
    }
    CFAllocatorRef v18 = (const __CFAllocator *)SecCFAllocatorZeroize();
    CFDataRef v19 = CFDataCreate(v18, bytes, 32);
    if (v19)
    {
      CFDataRef v12 = v19;
      CFRetain(v19);
      *a4 = v12;
      uint64_t v13 = 1;
      goto LABEL_19;
    }
    CFErrorRef v11 = CKErrorCreateWithFormat(2, @"CKStreamKeyDerivation", Length, 0, 0, BytePtr, v20, bytes, 32);
  }
LABEL_15:
  CFDataRef v12 = v11;
  if (a5 && v11)
  {
    CFRetain(v11);
    uint64_t v13 = 0;
    *a5 = v12;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t result = 0;
    if (!v12) {
      return result;
    }
  }
LABEL_19:
  CFRelease(v12);
  return v13;
}

uint64_t CKChunkCryptorAllocate(uint64_t *a1, int a2, uint64_t a3)
{
  *a1 = 0;
  size_t v5 = a3 + 48;
  uint64_t v6 = CKTypeRegister(&CKChunkCryptorGetTypeID_typeID);
  uint64_t result = CKTypeCreateInstance_(0, v6, v5);
  if (result)
  {
    *(_DWORD *)(result + 16) = a2;
    *(void *)(result + 40) = result + 48;
    *a1 = result;
    return 1;
  }
  return result;
}

uint64_t CKChunkCryptorCreate(void *a1, uint64_t a2, const void *a3, uint64_t a4)
{
  if (!a1) {
    return 0;
  }
  *a1 = 0;
  int Class = CKChunkDigestResultsGetClass((uint64_t)a3);
  if (Class != 1)
  {
    if (Class == 2)
    {
      CFTypeRef cf = 0;
      uint64_t v9 = 8;
      goto LABEL_7;
    }
    return 0;
  }
  CFTypeRef cf = 0;
  uint64_t v9 = 16;
LABEL_7:
  CFTypeRef v15 = 0;
  *a1 = 0;
  int v11 = CKChunkCryptorAllocate((uint64_t *)&v15, Class, v9);
  uint64_t v10 = 0;
  CFDataRef v12 = (int *)v15;
  if (v11 && v15)
  {
    CFTypeRef cf = 0;
    CKBaseRetain(a3);
    *((void *)v12 + 3) = a3;
    uint64_t v13 = _requestCallbacks_0[4 * v12[4]];
    if (v13
      && ((unsigned int (*)(int *, uint64_t, const void *, uint64_t, CFTypeRef *))v13)(v12, a2, a3, a4, &cf))
    {
      CFRetain(v12);
      *a1 = v12;
      uint64_t v10 = 1;
    }
    else
    {
      uint64_t v10 = 0;
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v12) {
    CFRelease(v12);
  }
  return v10;
}

uint64_t CKChunkCryptorUpdate(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 16);
  if (v1) {
    return _requestCallbacks_0[4 * v1 + 1]();
  }
  else {
    return 0;
  }
}

uint64_t CKChunkCryptorFinish(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 16);
  if (v1) {
    return _requestCallbacks_0[4 * v1 + 2]();
  }
  else {
    return 0;
  }
}

void _CKChunkCryptorCFFinalize(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 16);
  if (v2) {
    ((void (*)(uint64_t))_requestCallbacks_0[4 * v2 + 3])(a1);
  }
  uint64_t v3 = *(const void **)(a1 + 24);
  if (v3) {
    CKBaseRelease(v3);
  }
  *(void *)(a1 + 24) = 0;
}

BOOL _CKChunkCryptorCFEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t _CKChunkCryptorCFCopyFormatDescription()
{
  return 0;
}

uint64_t _CKChunkCryptorCFCopyDebugDescription()
{
  return 0;
}

uint64_t CKChunkDigestResultsV1Alloc(void *a1)
{
  *a1 = 0;
  uint64_t v3 = 0;
  uint64_t result = CKChunkDigestResultsAllocate(&v3, 1, 0);
  if (result) {
    *a1 = v3;
  }
  return result;
}

uint64_t CKChunkDigestResultsV1Create(void *a1, unsigned char *a2, unsigned __int8 *a3, int a4)
{
  CFTypeRef v12 = 0;
  if (!a1) {
    return 0;
  }
  *a1 = 0;
  CFTypeRef cf = 0;
  uint64_t v8 = 0;
  if (CKChunkDigestResultsAllocate((uint64_t *)&cf, 1, 0) && cf)
  {
    if (_CKChunkDigestResultsInit((uint64_t)cf, a2, a3, a4, &v12))
    {
      if (cf)
      {
        CFRetain(cf);
        CFTypeRef v9 = cf;
      }
      else
      {
        CFTypeRef v9 = 0;
      }
      *a1 = v9;
      uint64_t v8 = 1;
    }
    else
    {
      uint64_t v8 = 0;
    }
  }
  if (v12) {
    CFRelease(v12);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v8;
}

BOOL CKChunkDigestResultsV1SignatureAndKeyEqual(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if (a1 && a2)
  {
    if (a1 == a2) {
      return 1;
    }
    if (*(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16))
    {
      BOOL result = CKChunkSignaturesEqual(*(unsigned char **)(a1 + 24), *(unsigned char **)(a2 + 24));
      if (!result) {
        return result;
      }
      size_t v5 = *(unsigned __int8 **)(a1 + 32);
      uint64_t v6 = *(unsigned __int8 **)(a2 + 32);
      if (!((unint64_t)v5 | (unint64_t)v6)) {
        return 1;
      }
      return CKChunkKeysEqual(v5, v6);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CKChunkDigestArgumentsAllocate(uint64_t *a1, int a2, uint64_t a3)
{
  *a1 = 0;
  size_t v5 = a3 + 32;
  uint64_t v6 = CKTypeRegister(&CKChunkDigestArgumentsGetTypeID_typeID);
  uint64_t result = CKTypeCreateInstance_(0, v6, v5);
  if (result)
  {
    *(_DWORD *)(result + 16) = a2;
    *(void *)(result + 24) = result + 32;
    *a1 = result;
    return 1;
  }
  return result;
}

uint64_t _CKChunkDigestArgumentsInit(uint64_t a1, char a2, void *a3)
{
  if (a3) {
    *a3 = 0;
  }
  *(unsigned char *)(a1 + 20) = a2;
  return 1;
}

uint64_t CKChunkDigestArgumentsChunkScheme(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(void))_requestCallbacks_1[6 * *(int *)(a1 + 16)];
  if (v1) {
    return v1();
  }
  else {
    return 0;
  }
}

uint64_t CKChunkDigestArgumentsChunkSchemeByte(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if (v1) {
    return ((uint64_t (*)(void))_requestCallbacks_1[6 * v1 + 1])();
  }
  else {
    return 0;
  }
}

uint64_t CKChunkDigestArgumentsChunkEncryptionKeyScheme(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if (v1) {
    return ((uint64_t (*)(void))_requestCallbacks_1[6 * v1 + 2])();
  }
  else {
    return 0;
  }
}

uint64_t CKChunkDigestArgumentsChunkEncryptionKeySchemeByte(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if (v1) {
    LOBYTE(result) = ((uint64_t (*)(void))_requestCallbacks_1[6 * v1 + 2])();
  }
  else {
    LOBYTE(result) = 0;
  }
  return result;
}

uint64_t CKChunkDigestArgumentsChunkEncrypted(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 20);
}

uint64_t CKChunkDigestArgumentsBoundaryKey(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 16);
  if (v1 >= 2) {
    return ((uint64_t (*)(void))_requestCallbacks_1[6 * (int)v1 + 3])();
  }
  else {
    return 0;
  }
}

uint64_t CKChunkDigestArgumentsGetClass(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t _CKChunkDigestArgumentsCFFinalize(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 16);
  if (v1) {
    return ((uint64_t (*)(void))_requestCallbacks_1[6 * v1 + 5])();
  }
  return result;
}

BOOL _CKChunkDigestArgumentsCFEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t _CKChunkDigestArgumentsCFCopyFormatDescription(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if (v1) {
    return ((uint64_t (*)(void))_requestCallbacks_1[6 * v1 + 4])();
  }
  else {
    return 0;
  }
}

uint64_t _CKChunkDigestArgumentsCFCopyDebugDescription(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if (v1) {
    return ((uint64_t (*)(void))_requestCallbacks_1[6 * v1 + 4])();
  }
  else {
    return 0;
  }
}

uint64_t CKFileDigestArgumentsV2Alloc(void *a1)
{
  *a1 = 0;
  uint64_t v3 = 0;
  uint64_t result = CKFileDigestArgumentsAllocate(&v3, 1, 24);
  if (result) {
    *a1 = v3;
  }
  return result;
}

uint64_t CKFileDigestArgumentsV2FileScheme(uint64_t a1)
{
  return **(unsigned int **)(a1 + 24);
}

uint64_t CKFileDigestArgumentsV2FileSchemeByte(uint64_t a1)
{
  return **(unsigned __int8 **)(a1 + 24) | ((*(unsigned char *)(a1 + 20) == 0) << 7);
}

void CKFileDigestArgumentsV2Finalize(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(const void **)(v2 + 8);
  if (v3)
  {
    CFRelease(v3);
    uint64_t v2 = *(void *)(a1 + 24);
  }
  *(void *)(v2 + 8) = 0;
  uint64_t v4 = *(void *)(a1 + 24);
  size_t v5 = *(const void **)(v4 + 16);
  if (v5)
  {
    CFRelease(v5);
    uint64_t v4 = *(void *)(a1 + 24);
  }
  *(void *)(v4 + 16) = 0;
}

uint64_t CKFileDigestArgumentsV2WithBoundaryKeyCreate(CFTypeRef *a1, const void *a2, CFTypeRef *a3)
{
  return _CKFileDigestArgumentsV2Create(a1, 4, a2, 0, a3);
}

uint64_t _CKFileDigestArgumentsV2Create(CFTypeRef *a1, int a2, const void *a3, const void *a4, CFTypeRef *a5)
{
  CFTypeRef cf = 0;
  CFTypeRef v17 = 0;
  *a1 = 0;
  if ((a3 != 0) == (a4 != 0)) {
    return 0;
  }
  int v10 = CKFileDigestArgumentsAllocate((uint64_t *)&cf, 2, 24);
  uint64_t v11 = 0;
  CFTypeRef v12 = cf;
  if (v10 && cf)
  {
    if (_CKChunkDigestArgumentsInit((uint64_t)cf, 1, &v17))
    {
      CFTypeRef v13 = cf;
      **((_DWORD **)cf + 3) = a2;
      if (a3)
      {
        CFRetain(a3);
        CFTypeRef v13 = cf;
        *(void *)(*((void *)cf + 3) + 8) = a3;
      }
      if (a4)
      {
        CFRetain(a4);
        CFTypeRef v13 = cf;
        *(void *)(*((void *)cf + 3) + 16) = a4;
      }
      CFRetain(v13);
      CFTypeRef v14 = v17;
      *a1 = cf;
      uint64_t v11 = 1;
    }
    else
    {
      uint64_t v11 = 0;
      CFTypeRef v14 = v17;
      if (a5 && v17)
      {
        CFRetain(v17);
        uint64_t v11 = 0;
        CFTypeRef v14 = v17;
        *a5 = v17;
      }
    }
    if (v14) {
      CFRelease(v14);
    }
    CFTypeRef v12 = cf;
  }
  if (v12) {
    CFRelease(v12);
  }
  return v11;
}

uint64_t CKFileDigestArgumentsV2WithFileKeyCreate(CFTypeRef *a1, const void *a2, CFTypeRef *a3)
{
  return _CKFileDigestArgumentsV2Create(a1, 4, 0, a2, a3);
}

uint64_t CKFileDigestArgumentsV2ForPackageWithBoundaryKeyCreate(CFTypeRef *a1, const void *a2, CFTypeRef *a3)
{
  return _CKFileDigestArgumentsV2Create(a1, 8, a2, 0, a3);
}

uint64_t CKFileDigestArgumentsV2ForPackageWithVerificationKeyCreate(CFTypeRef *a1, const void *a2, CFTypeRef *a3)
{
  return _CKFileDigestArgumentsV2Create(a1, 8, 0, a2, a3);
}

uint64_t CKFileDigestArgumentsV2BoundaryKey(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 24) + 8);
}

uint64_t CKFileDigestArgumentsV2FileKey(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 24) + 16);
}

CFStringRef CKFileDigestArgumentsV2CopyDescription(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  CFDataRef v3 = *(const __CFData **)(v2 + 8);
  if (v3)
  {
    uint64_t v4 = @"boundaryKey";
  }
  else
  {
    CFDataRef v3 = *(const __CFData **)(v2 + 16);
    if (!v3) {
      goto LABEL_10;
    }
    uint64_t v4 = @"fileKey";
  }
  CFStringRef hex_with_data = ck_cfstring_create_hex_with_data(v3);
  if (hex_with_data)
  {
    CFStringRef v6 = hex_with_data;
    if (*(unsigned char *)(a1 + 20)) {
      CFErrorRef v7 = (const char *)&unk_2151AE79A;
    }
    else {
      CFErrorRef v7 = "un";
    }
    CFStringRef v8 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"v2 %sencrypted %@ %@", v7, v4, hex_with_data);
    CFRelease(v6);
    return v8;
  }
LABEL_10:
  if (*(unsigned char *)(a1 + 20)) {
    int v10 = (const char *)&unk_2151AE79A;
  }
  else {
    int v10 = "un";
  }
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"v2 %sencrypted (null keys)", v10);
}

BOOL _CKFileSignatureGeneratorCFEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t _CKFileSignatureGeneratorCFCopyFormatDescription()
{
  return 0;
}

uint64_t _CKFileSignatureGeneratorCFCopyDebugDescription()
{
  return 0;
}

uint64_t CSsql_doV(sqlite3 *a1, char *a2, va_list a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v4 = sqlite3_vmprintf(a2, a3);
  if (!v4) {
    return 1;
  }
  size_t v5 = v4;
  if (!a1)
  {
    if (CK_DEFAULT_LOG_BLOCK != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v7 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"SQL DB not open: '%s'\n", v5);
      if (CK_DEFAULT_LOG_BLOCK != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_6);
      }
      CFStringRef v8 = CK_DEFAULT_LOG_INTERNAL;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        CFStringRef v15 = v7;
        _os_log_impl(&dword_215163000, v8, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v7) {
        CFRelease(v7);
      }
    }
    sqlite3_free(v5);
    return 1;
  }
  sqlite3_busy_timeout(a1, 5000);
  errmsg = 0;
  if (CSSQLiteCorruptionTestingEnabled()) {
    uint64_t v6 = CS_corruption_causing_sqlite3_exec(a1, v5, 0, 0, &errmsg);
  }
  else {
    uint64_t v6 = sqlite3_exec(a1, v5, 0, 0, &errmsg);
  }
  uint64_t v9 = v6;
  if (v6)
  {
    if (CK_DEFAULT_LOG_BLOCK != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_10);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v10 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"SQL error: '%s', (%d) %s\n", v5, v9, errmsg);
      if (CK_DEFAULT_LOG_BLOCK != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_17);
      }
      uint64_t v11 = CK_DEFAULT_LOG_INTERNAL;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        CFStringRef v15 = v10;
        _os_log_impl(&dword_215163000, v11, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v10) {
        CFRelease(v10);
      }
    }
  }
  sqlite3_free(v5);
  sqlite3_free(errmsg);
  return v9;
}

uint64_t CSsql_do(sqlite3 *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return CSsql_doV(a1, a2, &a9);
}

const void *CSsql_get64(uint64_t a1, char a2, char *a3, ...)
{
  va_start(va, a3);
  uint64_t v24 = *MEMORY[0x263EF8340];
  ppStmt[0] = 0;
  va_copy((va_list)&ppStmt[1], va);
  uint64_t v6 = sqlite3_vmprintf(a3, va);
  if ((a2 & 1) != 0 || !CKReadLockChunkStore(a1))
  {
    DB = (sqlite3 *)CSChunkStoreGetDB(a1);
    if (!DB)
    {
      if (CK_DEFAULT_LOG_BLOCK != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_20);
      }
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR)) {
        goto LABEL_23;
      }
      CFStringRef v7 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"%s SQL DB not open: '%s'", "CSsql_get64", a3);
      if (CK_DEFAULT_LOG_BLOCK != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_26);
      }
      CFTypeRef v14 = CK_DEFAULT_LOG_INTERNAL;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR)) {
        goto LABEL_21;
      }
      *(_DWORD *)buf = 138543362;
      uint64_t v23 = v7;
      goto LABEL_20;
    }
    uint64_t v9 = DB;
    uint64_t v10 = sqlite3_prepare_v2(DB, v6, -1, ppStmt, 0);
    if (v10)
    {
      uint64_t v11 = v10;
      if (CK_DEFAULT_LOG_BLOCK != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_30);
      }
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR)) {
        goto LABEL_23;
      }
      CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      CFTypeRef v13 = sqlite3_errmsg(v9);
      CFStringRef v7 = CFStringCreateWithFormat(v12, 0, @"sqlite3_prepare_v2 failed: %d %s", v11, v13);
      if (CK_DEFAULT_LOG_BLOCK != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_37);
      }
      CFTypeRef v14 = CK_DEFAULT_LOG_INTERNAL;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      {
LABEL_21:
        if (!v7) {
          goto LABEL_24;
        }
        CFRelease(v7);
LABEL_23:
        CFStringRef v7 = 0;
LABEL_24:
        if (a2) {
          goto LABEL_26;
        }
LABEL_25:
        CKUnlockChunkStore(a1);
        goto LABEL_26;
      }
      *(_DWORD *)buf = 138543362;
      uint64_t v23 = v7;
LABEL_20:
      _os_log_impl(&dword_215163000, v14, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      goto LABEL_21;
    }
    uint64_t v16 = sqlite3_step(ppStmt[0]);
    if (v16 != 101)
    {
      uint64_t v17 = v16;
      if (v16 == 100)
      {
        CFStringRef v7 = (const void *)sqlite3_column_int64(ppStmt[0], 0);
        goto LABEL_40;
      }
      if (CK_DEFAULT_LOG_BLOCK != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_41);
      }
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      {
        CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFDataRef v19 = sqlite3_errmsg(v9);
        CFStringRef v7 = CFStringCreateWithFormat(v18, 0, @"sqlite3_step failed: %d %s", v17, v19);
        if (CK_DEFAULT_LOG_BLOCK != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_48);
        }
        CFIndex v20 = CK_DEFAULT_LOG_INTERNAL;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          uint64_t v23 = v7;
          _os_log_impl(&dword_215163000, v20, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
        }
        if (!v7)
        {
LABEL_40:
          sqlite3_finalize(ppStmt[0]);
          if (a2) {
            goto LABEL_26;
          }
          goto LABEL_25;
        }
        CFRelease(v7);
      }
    }
    CFStringRef v7 = 0;
    goto LABEL_40;
  }
  CFStringRef v7 = 0;
LABEL_26:
  sqlite3_free(v6);
  return v7;
}

CFStringRef CSsql_get64_safe(uint64_t a1, char a2, sqlite3_int64 *a3, char *a4, ...)
{
  va_start(va, a4);
  uint64_t v30 = *MEMORY[0x263EF8340];
  ppStmt = 0;
  va_list v27 = 0;
  if (a3)
  {
    va_copy(v27, va);
    CFStringRef v8 = sqlite3_vmprintf(a4, va);
    if ((a2 & 1) == 0 && CKReadLockChunkStore(a1))
    {
      CFStringRef v9 = 0;
LABEL_37:
      sqlite3_free(v8);
      return v9;
    }
    DB = (sqlite3 *)CSChunkStoreGetDB(a1);
    if (DB)
    {
      uint64_t v11 = DB;
      uint64_t v12 = sqlite3_prepare_v2(DB, v8, -1, &ppStmt, 0);
      if (!v12)
      {
        uint64_t v20 = sqlite3_step(ppStmt);
        CFStringRef v9 = (CFStringRef)(v20 == 100);
        if (v20 == 100)
        {
          *a3 = sqlite3_column_int64(ppStmt, 0);
        }
        else
        {
          uint64_t v21 = v20;
          if (v20 != 101)
          {
            if (CK_DEFAULT_LOG_BLOCK != -1) {
              dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_77);
            }
            if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
            {
              CFAllocatorRef v22 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
              uint64_t v23 = sqlite3_errmsg(v11);
              CFStringRef v24 = CFStringCreateWithFormat(v22, 0, @"sqlite3_step failed: %d %s", v21, v23);
              if (CK_DEFAULT_LOG_BLOCK != -1) {
                dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_81);
              }
              uint64_t v25 = CK_DEFAULT_LOG_INTERNAL;
              if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138543362;
                CFStringRef v29 = v24;
                _os_log_impl(&dword_215163000, v25, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
              }
              if (v24) {
                CFRelease(v24);
              }
            }
          }
        }
        sqlite3_finalize(ppStmt);
        if (a2) {
          goto LABEL_37;
        }
        goto LABEL_36;
      }
      uint64_t v13 = v12;
      if (CK_DEFAULT_LOG_BLOCK != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_69);
      }
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR)) {
        goto LABEL_34;
      }
      CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      CFStringRef v15 = sqlite3_errmsg(v11);
      CFStringRef v9 = CFStringCreateWithFormat(v14, 0, @"sqlite3_prepare_v2 failed: %d %s", v13, v15);
      if (CK_DEFAULT_LOG_BLOCK != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_73);
      }
      uint64_t v16 = CK_DEFAULT_LOG_INTERNAL;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR)) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 138543362;
      CFStringRef v29 = v9;
    }
    else
    {
      if (CK_DEFAULT_LOG_BLOCK != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_61);
      }
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR)) {
        goto LABEL_34;
      }
      CFStringRef v9 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"%s SQL DB not open: '%s'", "CSsql_get64_safe", a4);
      if (CK_DEFAULT_LOG_BLOCK != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_65);
      }
      uint64_t v16 = CK_DEFAULT_LOG_INTERNAL;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      {
LABEL_32:
        if (!v9) {
          goto LABEL_35;
        }
        CFRelease(v9);
LABEL_34:
        CFStringRef v9 = 0;
LABEL_35:
        if (a2) {
          goto LABEL_37;
        }
LABEL_36:
        CKUnlockChunkStore(a1);
        goto LABEL_37;
      }
      *(_DWORD *)buf = 138543362;
      CFStringRef v29 = v9;
    }
    _os_log_impl(&dword_215163000, v16, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    goto LABEL_32;
  }
  if (CK_DEFAULT_LOG_BLOCK != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_51);
  }
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
  {
    CFStringRef v17 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"out64 parameter is NULL!");
    if (CK_DEFAULT_LOG_BLOCK != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_57);
    }
    CFAllocatorRef v18 = CK_DEFAULT_LOG_INTERNAL;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      CFStringRef v29 = v17;
      _os_log_impl(&dword_215163000, v18, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v17) {
      CFRelease(v17);
    }
  }
  return 0;
}

uint64_t CSopenDB(const char *a1, sqlite3 **a2, int a3)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  *a2 = 0;
  pDb = 0;
  v54 = 0;
  pStmt = 0;
  int v6 = CS_corruption_checking_sqlite3_open_v2(a1, a3, &pDb, 65570);
  if (!v6)
  {
LABEL_9:
    sqlite3_busy_timeout(pDb, 5000);
    if (CS_corruption_checking_sqlite3_exec(a1, a3, pDb, "PRAGMA locking_mode = EXCLUSIVE;",
                         (char **)&v54))
    {
      if (CK_DEFAULT_LOG_BLOCK != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_93);
      }
      uint64_t v10 = CK_DEFAULT_LOG_INTERNAL;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315138;
        *(void *)v56 = v54;
        _os_log_impl(&dword_215163000, v10, OS_LOG_TYPE_ERROR, "failed to set locking_mode on db (%s)", buf, 0xCu);
      }
      sqlite3_free(v54);
      v54 = 0;
    }
    if (CS_corruption_checking_sqlite3_exec(a1, a3, pDb, "PRAGMA page_size = 4096;", (char **)&v54))
    {
      if (CK_DEFAULT_LOG_BLOCK != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_98);
      }
      uint64_t v11 = CK_DEFAULT_LOG_INTERNAL;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315138;
        *(void *)v56 = v54;
        _os_log_impl(&dword_215163000, v11, OS_LOG_TYPE_ERROR, "failed to set page_size pragma on db (%s)", buf, 0xCu);
      }
      sqlite3_free(v54);
      v54 = 0;
    }
    if (CS_corruption_checking_sqlite3_exec(a1, a3, pDb, "PRAGMA journal_mode = WAL;", (char **)&v54))
    {
      if (CK_DEFAULT_LOG_BLOCK != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_103);
      }
      uint64_t v12 = CK_DEFAULT_LOG_INTERNAL;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315138;
        *(void *)v56 = v54;
        _os_log_impl(&dword_215163000, v12, OS_LOG_TYPE_ERROR, "failed to set journal mode (%s)", buf, 0xCu);
      }
      sqlite3_free(v54);
      v54 = 0;
    }
    if (CS_corruption_checking_sqlite3_exec(a1, a3, pDb, "PRAGMA wal_autocheckpoint = 2000;",
                         (char **)&v54))
    {
      if (CK_DEFAULT_LOG_BLOCK != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_108);
      }
      uint64_t v13 = CK_DEFAULT_LOG_INTERNAL;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315138;
        *(void *)v56 = v54;
        _os_log_impl(&dword_215163000, v13, OS_LOG_TYPE_ERROR, "failed to set wal_autocheckpoint (%s)", buf, 0xCu);
      }
      sqlite3_free(v54);
      v54 = 0;
    }
    CSsql_corruption_checking_do(a1, a3, pDb, "PRAGMA temp_store = MEMORY");
    int v7 = CSsql_corruption_checking_do(a1, a3, pDb, "BEGIN EXCLUSIVE");
    if (v7) {
      goto LABEL_42;
    }
    int v7 = CSsql_corruption_checking_do(a1, a3, pDb, "CREATE TABLE IF NOT EXISTS CSDatabaseVersion (version INTEGER)");
    if (v7) {
      goto LABEL_42;
    }
    CFAllocatorRef v14 = pDb;
    if (CSSQLiteCorruptionTestingEnabled()) {
      uint64_t v15 = CS_corruption_causing_sqlite3_prepare_v2(v14, "SELECT version FROM CSDatabaseVersion", -1, &pStmt, 0);
    }
    else {
      uint64_t v15 = sqlite3_prepare_v2(v14, "SELECT version FROM CSDatabaseVersion", -1, &pStmt, 0);
    }
    uint64_t v29 = v15;
    _CSHandleDatabaseIOError(v15);
    if (v29)
    {
      if (v29 == 26 || v29 == 11)
      {
        if (CK_DEFAULT_LOG_BLOCK != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_724);
        }
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
        {
          CFStringRef v30 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"chunk store database corruption: detected error %d in sqlite3_prepare_v2", v29);
          if (CK_DEFAULT_LOG_BLOCK != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_730);
          }
          v31 = CK_DEFAULT_LOG_INTERNAL;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138543362;
            *(void *)v56 = v30;
            _os_log_impl(&dword_215163000, v31, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
          }
          if (v30) {
            CFRelease(v30);
          }
        }
        _CSBruteForceDatabaseCorruptionRecovery(a1, v14, a3);
      }
      goto LABEL_48;
    }
    v33 = pStmt;
    v32 = pDb;
    if (CSSQLiteCorruptionTestingEnabled()) {
      uint64_t v34 = CS_corruption_causing_sqlite3_step(v33);
    }
    else {
      uint64_t v34 = sqlite3_step(v33);
    }
    uint64_t v35 = v34;
    _CSHandleDatabaseIOError(v34);
    switch(v35)
    {
      case 0xB:
        goto LABEL_76;
      case 0x64:
        unint64_t v38 = sqlite3_column_int64(pStmt, 0);
LABEL_88:
        sqlite3_reset(pStmt);
        sqlite3_finalize(pStmt);
        pStmt = 0;
        if (a3)
        {
          if (CK_DEFAULT_LOG_BLOCK != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_122);
          }
          v39 = CK_DEFAULT_LOG_INTERNAL;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_DEFAULT))
          {
            if (v38) {
              uint64_t v40 = v38;
            }
            else {
              uint64_t v40 = 10;
            }
            *(_DWORD *)buf = 134218498;
            *(void *)v56 = v40;
            v41 = "Y";
            if (v38) {
              v41 = "N";
            }
            *(_WORD *)&v56[8] = 2048;
            *(void *)&v56[10] = 10;
            *(_WORD *)&v56[18] = 2082;
            *(void *)&v56[20] = v41;
            _os_log_impl(&dword_215163000, v39, OS_LOG_TYPE_DEFAULT, "ChunkRegistry ver=%llu/%llu isNew=%{public}s", buf, 0x20u);
          }
          int v7 = CSsql_corruption_checking_do(a1, 1, pDb, "CREATE TABLE IF NOT EXISTS CSRegisteredFileTable (crt_rowid INTEGER PRIMARY KEY,crt_id\tBLOB,crt_iid BIGINT,crt_filekey BLOB,crt_filesize BIGINT,crt_profileType INTEGER,crt_profileTypeIsDefault INTEGER,crt_profileConfigurationVersion TEXT,crt_profileResolvedFileExtension TEXT)");
          if (v7) {
            goto LABEL_42;
          }
          int v7 = CSsql_corruption_checking_do(a1, 1, pDb, "CREATE INDEX IF NOT EXISTS CSRegisteredFileTable_crt_id_inx ON CSRegisteredFileTable(crt_id)");
          if (v7) {
            goto LABEL_42;
          }
          int v7 = CSsql_corruption_checking_do(a1, 1, pDb, "CREATE UNIQUE INDEX IF NOT EXISTS CSRegisteredFileTable_crt_iid_inx ON CSRegisteredFileTable(crt_iid)");
          if (v7) {
            goto LABEL_42;
          }
          if (v38)
          {
            if (v38 > 6)
            {
              if (v38 != 7) {
                goto LABEL_117;
              }
            }
            else
            {
              int v7 = CSsql_corruption_checking_do(a1, 1, pDb, "ALTER TABLE CSRegisteredFileTable ADD COLUMN crt_filekey BLOB");
              if (v7) {
                goto LABEL_42;
              }
              int v7 = CSsql_corruption_checking_do(a1, 1, pDb, "ALTER TABLE CSRegisteredFileTable ADD COLUMN crt_filesize BIGINT");
              if (v7) {
                goto LABEL_42;
              }
            }
            int v7 = CSsql_corruption_checking_do(a1, 1, pDb, "ALTER TABLE CSRegisteredFileTable ADD COLUMN crt_profileType INTEGER");
            if (v7) {
              goto LABEL_42;
            }
            int v7 = CSsql_corruption_checking_do(a1, 1, pDb, "ALTER TABLE CSRegisteredFileTable ADD COLUMN crt_profileTypeIsDefault INTEGER");
            if (v7) {
              goto LABEL_42;
            }
            int v7 = CSsql_corruption_checking_do(a1, 1, pDb, "ALTER TABLE CSRegisteredFileTable ADD COLUMN crt_profileConfigurationVersion TEXT");
            if (v7) {
              goto LABEL_42;
            }
            int v7 = CSsql_corruption_checking_do(a1, 1, pDb, "ALTER TABLE CSRegisteredFileTable ADD COLUMN crt_profileResolvedFileExtension TEXT");
            if (v7) {
              goto LABEL_42;
            }
          }
        }
        else
        {
          if (CK_DEFAULT_LOG_BLOCK != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_116);
          }
          v42 = CK_DEFAULT_LOG_INTERNAL;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_DEFAULT))
          {
            if (v38) {
              uint64_t v43 = v38;
            }
            else {
              uint64_t v43 = 8;
            }
            *(_DWORD *)buf = 134218498;
            *(void *)v56 = v43;
            v44 = "Y";
            if (v38) {
              v44 = "N";
            }
            *(_WORD *)&v56[8] = 2048;
            *(void *)&v56[10] = 8;
            *(_WORD *)&v56[18] = 2082;
            *(void *)&v56[20] = v44;
            _os_log_impl(&dword_215163000, v42, OS_LOG_TYPE_DEFAULT, "ChunkStore ver=%llu/%llu isNew=%{public}s", buf, 0x20u);
          }
          if (v38)
          {
            uint64_t v21 = _CSMigrateChunkStore(a1, pDb, v38);
            if (v21) {
              goto LABEL_49;
            }
          }
        }
LABEL_117:
        int v7 = CSsql_corruption_checking_do(a1, a3, pDb, "CREATE TABLE IF NOT EXISTS CSChunkTable (ct_rowid INTEGER PRIMARY KEY,cid BLOB,ct_iid BIGINT,ft_rowid BIGINT,offset BIGINT,dataLen INTEGER,refCount INTEGER,timeStamp BIGINT,location INTEGER,key BLOB,subchunksBlob BLOB)");
        if (v7) {
          goto LABEL_42;
        }
        unint64_t v45 = v38 - 1;
        if (a3)
        {
          if (v45 <= 5)
          {
            int v7 = CSsql_corruption_checking_do(a1, 1, pDb, "DROP TABLE IF EXISTS CSStorageFileTable");
            if (v7) {
              goto LABEL_42;
            }
            int v7 = CSsql_corruption_checking_do(a1, 1, pDb, "DROP TABLE IF EXISTS CSStorageChunkListTable");
            if (v7) {
              goto LABEL_42;
            }
            int v7 = CSsql_corruption_checking_do(a1, 1, pDb, "DROP TABLE IF EXISTS CSStoragePendingChunksTable");
            if (v7) {
              goto LABEL_42;
            }
            int v7 = CSsql_corruption_checking_do(a1, 1, pDb, "DROP TABLE IF EXISTS CSStoragePendingFileChunklistTable");
            if (v7) {
              goto LABEL_42;
            }
          }
        }
        if (a3)
        {
          if (v45 <= 8)
          {
            int v7 = CSsql_corruption_checking_do(a1, 1, pDb, "ALTER TABLE CSChunkTable ADD COLUMN subchunksBlob BLOB");
            if (v7) {
              goto LABEL_42;
            }
          }
        }
        int v7 = CSsql_corruption_checking_do(a1, a3, pDb, "CREATE INDEX IF NOT EXISTS CSChunkTable_cid_inx ON CSChunkTable(cid)");
        if (v7) {
          goto LABEL_42;
        }
        int v7 = CSsql_corruption_checking_do(a1, a3, pDb, "CREATE INDEX IF NOT EXISTS CSChunkTable_iid_inx ON CSChunkTable(ct_iid)");
        if (v7) {
          goto LABEL_42;
        }
        int v7 = CSsql_corruption_checking_do(a1, a3, pDb, "CREATE INDEX IF NOT EXISTS CSChunkTable_ftrowid_inx ON CSChunkTable(ft_rowid)");
        if (v7) {
          goto LABEL_42;
        }
        int v7 = CSsql_corruption_checking_do(a1, a3, pDb, "DROP INDEX IF EXISTS CSChunkTable_refCount_inx");
        if (v7) {
          goto LABEL_42;
        }
        int v7 = CSsql_corruption_checking_do(a1, a3, pDb, "DROP INDEX IF EXISTS CSChunkTable_loc_inx");
        if (v7) {
          goto LABEL_42;
        }
        int v7 = CSsql_corruption_checking_do(a1, a3, pDb, "DROP INDEX IF EXISTS CSChunkTable_iidloc_inx");
        if (v7) {
          goto LABEL_42;
        }
        int v7 = CSsql_corruption_checking_do(a1, a3, pDb, "DROP INDEX IF EXISTS CSChunkTable_rowidloc_inx");
        if (v7) {
          goto LABEL_42;
        }
        int v7 = CSsql_corruption_checking_do(a1, a3, pDb, "DROP INDEX IF EXISTS CSChunkTable_rowidrefcnt_inx");
        if (v7) {
          goto LABEL_42;
        }
        int v7 = CSsql_corruption_checking_do(a1, a3, pDb, "DROP INDEX IF EXISTS CSChunkTable_cidloc_inx");
        if (v7) {
          goto LABEL_42;
        }
        if (a3)
        {
          if (v38)
          {
            if (v38 >= 0xB)
            {
              if (CK_DEFAULT_LOG_BLOCK != -1) {
                dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_166);
              }
              uint64_t v46 = CK_DEFAULT_LOG_INTERNAL;
              if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR)) {
                goto LABEL_48;
              }
              *(_DWORD *)buf = 134217984;
              *(void *)v56 = v38;
              CFStringRef v24 = "odd database version %llu";
              uint64_t v25 = v46;
              uint32_t v26 = 12;
              goto LABEL_47;
            }
            if (v38 == 10) {
              goto LABEL_177;
            }
            uint64_t v47 = 10;
            goto LABEL_172;
          }
          uint64_t v48 = 10;
        }
        else
        {
          int v7 = CSsql_corruption_checking_do(a1, 0, pDb, "CREATE TABLE IF NOT EXISTS CSStorageFileTable (ft_rowid INTEGER PRIMARY KEY,ft_inode BIGINT,ft_space INTEGER,ft_pspace INTEGER,vt_rowid BIGINT,ft_status INTEGER)");
          if (v7) {
            goto LABEL_42;
          }
          int v7 = CSsql_corruption_checking_do(a1, 0, pDb, "CREATE INDEX IF NOT EXISTS CSStorageFileTable_ft_rowid_inx ON CSStorageFileTable(ft_rowid)");
          if (v7) {
            goto LABEL_42;
          }
          int v7 = CSsql_corruption_checking_do(a1, 0, pDb, "CREATE INDEX IF NOT EXISTS CSStorageFileTable_ft_inode_inx ON CSStorageFileTable(ft_inode)");
          if (v7) {
            goto LABEL_42;
          }
          int v7 = CSsql_corruption_checking_do(a1, 0, pDb, "CREATE INDEX IF NOT EXISTS CSStorageFileTable_ft_space_inx ON CSStorageFileTable(ft_space)");
          if (v7) {
            goto LABEL_42;
          }
          int v7 = CSsql_corruption_checking_do(a1, 0, pDb, "CREATE INDEX IF NOT EXISTS CSStorageFileTable_ft_pspace_inx ON CSStorageFileTable(ft_pspace)");
          if (v7) {
            goto LABEL_42;
          }
          int v7 = CSsql_corruption_checking_do(a1, 0, pDb, "CREATE INDEX IF NOT EXISTS CSStorageFileTable_vt_rowid_inx ON CSStorageFileTable(vt_rowid)");
          if (v7) {
            goto LABEL_42;
          }
          int v7 = CSsql_corruption_checking_do(a1, 0, pDb, "CREATE INDEX IF NOT EXISTS CSStorageFileTable_ft_status_inx ON CSStorageFileTable(ft_status)");
          if (v7) {
            goto LABEL_42;
          }
          int v7 = CSsql_corruption_checking_do(a1, 0, pDb, "CREATE TABLE IF NOT EXISTS CSStorageChunkListTable (clt_rowid INTEGER PRIMARY KEY AUTOINCREMENT,clt_inode BIGINT,clt_count BIGINT,clt_chunkRowIDs BLOB)");
          if (v7) {
            goto LABEL_42;
          }
          int v7 = CSsql_corruption_checking_do(a1, 0, pDb, "CREATE INDEX IF NOT EXISTS CSStorageChunkListTable_clt_rowid_inx ON CSStorageChunkListTable(clt_rowid)");
          if (v7) {
            goto LABEL_42;
          }
          int v7 = CSsql_corruption_checking_do(a1, 0, pDb, "CREATE INDEX IF NOT EXISTS CSStorageChunkListTable_clt_inode_inx ON CSStorageChunkListTable(clt_inode)");
          if (v7) {
            goto LABEL_42;
          }
          int v7 = CSsql_corruption_checking_do(a1, 0, pDb, "CREATE TABLE IF NOT EXISTS CSStoragePendingChunksTable (pct_rowid INTEGER PRIMARY KEY,pct_inode BIGINT,pct_count BIGINT,pct_chunkRowIDs BLOB)");
          if (v7) {
            goto LABEL_42;
          }
          int v7 = CSsql_corruption_checking_do(a1, 0, pDb, "CREATE INDEX IF NOT EXISTS CSStoragePendingChunksTable_pct_inode_inx ON CSStoragePendingChunksTable(pct_inode)");
          if (v7) {
            goto LABEL_42;
          }
          int v7 = CSsql_corruption_checking_do(a1, 0, pDb, "CREATE TABLE IF NOT EXISTS CSStoragePendingFileChunklistTable (pft_rowid INTEGER PRIMARY KEY,pft_token BIGINT,pft_inode BIGINT)");
          if (v7) {
            goto LABEL_42;
          }
          int v7 = CSsql_corruption_checking_do(a1, 0, pDb, "CREATE INDEX IF NOT EXISTS CSStoragePendingFileChunklistTable_pft_token_inx ON CSStoragePendingFileChunklistTable(pft_token)");
          if (v7) {
            goto LABEL_42;
          }
          int v7 = CSsql_corruption_checking_do(a1, 0, pDb, "CREATE INDEX IF NOT EXISTS CSStoragePendingFileChunklistTable_pft_inode_inx ON CSStoragePendingFileChunklistTable(pft_inode)");
          if (v7) {
            goto LABEL_42;
          }
          if (v38)
          {
            if (v38 == 8) {
              goto LABEL_177;
            }
            uint64_t v47 = 8;
LABEL_172:
            int v49 = CSsql_corruption_checking_do(a1, a3, pDb, "UPDATE CSDatabaseVersion SET version = %lld", v47);
            if (v49)
            {
              int v7 = v49;
              if (CK_DEFAULT_LOG_BLOCK != -1) {
                dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_171);
              }
              uint64_t v50 = CK_DEFAULT_LOG_INTERNAL;
              if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
              {
                v51 = sqlite3_errmsg(pDb);
                *(_DWORD *)buf = 136315138;
                *(void *)v56 = v51;
                CFAllocatorRef v18 = "UPDATE CSDatabaseVersion SET version failed: %s";
                CFDataRef v19 = v50;
                uint32_t v20 = 12;
                goto LABEL_41;
              }
              goto LABEL_42;
            }
LABEL_177:
            int v7 = CSsql_corruption_checking_do(a1, a3, pDb, "COMMIT");
            if (!v7)
            {
              uint64_t v21 = 0;
              *a2 = pDb;
              return v21;
            }
            goto LABEL_42;
          }
          uint64_t v48 = 8;
        }
        int v7 = CSsql_corruption_checking_do(a1, a3, pDb, "INSERT INTO CSDatabaseVersion (version) VALUES (%llu)", v48);
        if (v7) {
          goto LABEL_42;
        }
        goto LABEL_177;
      case 0x1A:
LABEL_76:
        if (CK_DEFAULT_LOG_BLOCK != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_706);
        }
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
        {
          CFStringRef v36 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"chunk store database corruption: detected error %d in sqlite3_step", v35);
          if (CK_DEFAULT_LOG_BLOCK != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_712);
          }
          v37 = CK_DEFAULT_LOG_INTERNAL;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138543362;
            *(void *)v56 = v36;
            _os_log_impl(&dword_215163000, v37, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
          }
          if (v36) {
            CFRelease(v36);
          }
        }
        _CSBruteForceDatabaseCorruptionRecovery(a1, v32, a3);
        break;
    }
    unint64_t v38 = 0;
    goto LABEL_88;
  }
  int v7 = v6;
  if (v6 == 14)
  {
    sqlite3_close(pDb);
    pDb = 0;
    if (CS_corruption_checking_sqlite3_open_v2(a1, a3, &pDb, 65574))
    {
      if (CK_DEFAULT_LOG_BLOCK != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_88);
      }
      CFStringRef v8 = CK_DEFAULT_LOG_INTERNAL;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      {
        CFStringRef v9 = sqlite3_errmsg(pDb);
        *(_DWORD *)buf = 136315394;
        *(void *)v56 = a1;
        *(_WORD *)&v56[8] = 2080;
        *(void *)&v56[10] = v9;
        _os_log_impl(&dword_215163000, v8, OS_LOG_TYPE_ERROR, "sqlite3_open_v2 failed, dbname:\"%s\": %s", buf, 0x16u);
      }
      sqlite3_close(pDb);
      pDb = 0;
      int v7 = 14;
      goto LABEL_43;
    }
    goto LABEL_9;
  }
  if (CK_DEFAULT_LOG_BLOCK != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_84);
  }
  uint64_t v16 = CK_DEFAULT_LOG_INTERNAL;
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
  {
    CFStringRef v17 = sqlite3_errmsg(pDb);
    *(_DWORD *)buf = 136315650;
    *(void *)v56 = a1;
    *(_WORD *)&v56[8] = 1024;
    *(_DWORD *)&v56[10] = v7;
    *(_WORD *)&v56[14] = 2080;
    *(void *)&v56[16] = v17;
    CFAllocatorRef v18 = "sqlite3_open_v2 failed, dbname:\"%s\": %d %s";
    CFDataRef v19 = v16;
    uint32_t v20 = 28;
LABEL_41:
    _os_log_impl(&dword_215163000, v19, OS_LOG_TYPE_ERROR, v18, buf, v20);
  }
LABEL_42:
  uint64_t v21 = 0xFFFFFFFFLL;
  if (v7 != 101)
  {
LABEL_43:
    if (CK_DEFAULT_LOG_BLOCK != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_176);
    }
    uint64_t v22 = CK_DEFAULT_LOG_INTERNAL;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR)) {
      goto LABEL_48;
    }
    uint64_t v23 = sqlite3_errmsg(pDb);
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)v56 = v7;
    *(_WORD *)&v56[4] = 2080;
    *(void *)&v56[6] = v23;
    CFStringRef v24 = "sqlite3 error: %d %s";
    uint64_t v25 = v22;
    uint32_t v26 = 18;
LABEL_47:
    _os_log_impl(&dword_215163000, v25, OS_LOG_TYPE_ERROR, v24, buf, v26);
LABEL_48:
    uint64_t v21 = 0xFFFFFFFFLL;
  }
LABEL_49:
  if (pStmt) {
    sqlite3_finalize(pStmt);
  }
  CScloseDB(pDb);
  if (CK_DEFAULT_LOG_BLOCK != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_182);
  }
  va_list v27 = CK_DEFAULT_LOG_INTERNAL;
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)v56 = v21;
    _os_log_impl(&dword_215163000, v27, OS_LOG_TYPE_ERROR, "rc:%d", buf, 8u);
  }
  return v21;
}

uint64_t CS_corruption_checking_sqlite3_open_v2(const char *a1, char a2, sqlite3 **a3, int a4)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (CSSQLiteCorruptionTestingEnabled()) {
    uint64_t v8 = CS_corruption_causing_sqlite3_open_v2(a1, a3, a4, 0);
  }
  else {
    uint64_t v8 = sqlite3_open_v2(a1, a3, a4, 0);
  }
  uint64_t v9 = v8;
  _CSHandleDatabaseIOError(v8);
  if (v9 == 26 || v9 == 11)
  {
    if (CK_DEFAULT_LOG_BLOCK != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_688);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v10 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"chunk store database corruption: detected error %d in sqlite3_open_v2", v9);
      if (CK_DEFAULT_LOG_BLOCK != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_694);
      }
      uint64_t v11 = CK_DEFAULT_LOG_INTERNAL;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        CFStringRef v14 = v10;
        _os_log_impl(&dword_215163000, v11, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v10) {
        CFRelease(v10);
      }
    }
    _CSBruteForceDatabaseCorruptionRecovery(a1, 0, a2);
  }
  return v9;
}

os_log_t __CSopenDB_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __CSopenDB_block_invoke_85()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

uint64_t CS_corruption_checking_sqlite3_exec(const char *a1, char a2, sqlite3 *a3, const char *a4, char **a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (CSSQLiteCorruptionTestingEnabled()) {
    uint64_t v10 = CS_corruption_causing_sqlite3_exec(a3, a4, 0, 0, a5);
  }
  else {
    uint64_t v10 = sqlite3_exec(a3, a4, 0, 0, a5);
  }
  uint64_t v11 = v10;
  _CSHandleDatabaseIOError(v10);
  if (v11 == 26 || v11 == 11)
  {
    if (CK_DEFAULT_LOG_BLOCK != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_715);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v12 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"chunk store database corruption: detected error %d in sqlite3_exec", v11);
      if (CK_DEFAULT_LOG_BLOCK != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_721);
      }
      uint64_t v13 = CK_DEFAULT_LOG_INTERNAL;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        CFStringRef v16 = v12;
        _os_log_impl(&dword_215163000, v13, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v12) {
        CFRelease(v12);
      }
    }
    _CSBruteForceDatabaseCorruptionRecovery(a1, a3, a2);
  }
  return v11;
}

os_log_t __CSopenDB_block_invoke_90()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __CSopenDB_block_invoke_95()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __CSopenDB_block_invoke_100()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __CSopenDB_block_invoke_105()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

uint64_t CSsql_corruption_checking_do(const char *a1, char a2, sqlite3 *a3, char *a4, ...)
{
  va_start(va, a4);
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v7 = CSsql_doV(a3, a4, va);
  _CSHandleDatabaseIOError(v7);
  if (v7 == 26 || v7 == 11)
  {
    if (CK_DEFAULT_LOG_BLOCK != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_733);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v9 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"chunk store database corruption: detected error %d in CSsql_do", v7, va);
      if (CK_DEFAULT_LOG_BLOCK != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_739);
      }
      uint64_t v10 = CK_DEFAULT_LOG_INTERNAL;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        CFStringRef v13 = v9;
        _os_log_impl(&dword_215163000, v10, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v9) {
        CFRelease(v9);
      }
    }
    _CSBruteForceDatabaseCorruptionRecovery(a1, a3, a2);
  }
  return v7;
}

os_log_t __CSopenDB_block_invoke_113()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

uint64_t _CSMigrateChunkStore(const char *a1, sqlite3 *a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (a3 == 8) {
    return 0;
  }
  if (CK_DEFAULT_LOG_BLOCK != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_513);
  }
  uint64_t v7 = CK_DEFAULT_LOG_INTERNAL;
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = 134218240;
    *(void *)CFStringRef v13 = a3;
    *(_WORD *)&v13[8] = 2048;
    *(void *)&v13[10] = 8;
    _os_log_impl(&dword_215163000, v7, OS_LOG_TYPE_DEFAULT, "migrating chunk store from version %llu to version %llu", (uint8_t *)&v12, 0x16u);
  }
  if ((unint64_t)(a3 - 5) < 2)
  {
LABEL_13:
    int v8 = CSsql_corruption_checking_do(a1, 0, a2, "ALTER TABLE CSStorageFileTable ADD COLUMN ft_status INTEGER");
    if (!v8)
    {
      int v8 = CSsql_corruption_checking_do(a1, 0, a2, "DROP INDEX IF EXISTS CSRegisteredFileTable_crt_id_inx");
      if (!v8)
      {
        int v8 = CSsql_corruption_checking_do(a1, 0, a2, "DROP INDEX IF EXISTS CSRegisteredFileTable_crt_iid_inx");
        if (!v8)
        {
          int v8 = CSsql_corruption_checking_do(a1, 0, a2, "DROP TABLE IF EXISTS CSRegisteredFileTable");
          if (!v8)
          {
LABEL_17:
            uint64_t result = CSsql_corruption_checking_do(a1, 0, a2, "ALTER TABLE CSChunkTable ADD COLUMN subchunksBlob BLOB");
            int v8 = result;
            if (!result) {
              return result;
            }
          }
        }
      }
    }
LABEL_18:
    if (CK_DEFAULT_LOG_BLOCK != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_528);
    }
    CFStringRef v9 = CK_DEFAULT_LOG_INTERNAL;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = sqlite3_errmsg(a2);
      int v12 = 67109378;
      *(_DWORD *)CFStringRef v13 = v8;
      *(_WORD *)&v13[4] = 2080;
      *(void *)&v13[6] = v10;
      _os_log_impl(&dword_215163000, v9, OS_LOG_TYPE_ERROR, "sqlite3 error on migration: %d %s", (uint8_t *)&v12, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
  if (a3 == 7) {
    goto LABEL_17;
  }
  if (a3 == 4)
  {
    int v8 = CSsql_corruption_checking_do(a1, 0, a2, "DROP INDEX IF EXISTS CSStorageFileTable_ft_rowid_inx");
    if (v8) {
      goto LABEL_18;
    }
    int v8 = CSsql_corruption_checking_do(a1, 0, a2, "DROP INDEX IF EXISTS CSStorageFileTable_ft_inode_inx");
    if (v8) {
      goto LABEL_18;
    }
    int v8 = CSsql_corruption_checking_do(a1, 0, a2, "DROP TABLE IF EXISTS CSStorageVolumeTable");
    if (v8) {
      goto LABEL_18;
    }
    goto LABEL_13;
  }
  if (CK_DEFAULT_LOG_BLOCK != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_524);
  }
  uint64_t v11 = CK_DEFAULT_LOG_INTERNAL;
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
  {
    int v12 = 134218240;
    *(void *)CFStringRef v13 = a3;
    *(_WORD *)&v13[8] = 2048;
    *(void *)&v13[10] = 8;
    _os_log_impl(&dword_215163000, v11, OS_LOG_TYPE_ERROR, "attempting to migrate chunk store from version %llu to version %llu, which is not supported", (uint8_t *)&v12, 0x16u);
  }
  return 5;
}

os_log_t __CSopenDB_block_invoke_119()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __CSopenDB_block_invoke_163()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __CSopenDB_block_invoke_168()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __CSopenDB_block_invoke_173()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

void CScloseDB(sqlite3 *pDb)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (pDb)
  {
    while (1)
    {
      stmt = sqlite3_next_stmt(pDb, 0);
      if (!stmt) {
        break;
      }
      sqlite3_finalize(stmt);
    }
    if (sqlite3_close(pDb))
    {
      if (CK_DEFAULT_LOG_BLOCK != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_185);
      }
      CFDataRef v3 = CK_DEFAULT_LOG_INTERNAL;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      {
        int v4 = 136315138;
        size_t v5 = sqlite3_errmsg(pDb);
        _os_log_impl(&dword_215163000, v3, OS_LOG_TYPE_ERROR, "sqlite3_close failed: %s", (uint8_t *)&v4, 0xCu);
      }
    }
  }
}

os_log_t __CSopenDB_block_invoke_179()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __CScloseDB_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

void _CSRetainChunk(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  sqlite3_int64 v4 = _CSTokenForChunkSignature(a1, a2, 115);
  if ((_CSRetainChunkForRowID(a1, v4) & 1) == 0)
  {
    memset(v7, 0, 57);
    DWORD1(v7[3]) = 101;
    if (!_CSAddChunk(a1, a2, (uint64_t)v7))
    {
      if (CK_DEFAULT_LOG_BLOCK != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_531);
      }
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      {
        CFStringRef v5 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"failed to create entry for chunk:\n");
        if (CK_DEFAULT_LOG_BLOCK != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_537);
        }
        uint64_t v6 = CK_DEFAULT_LOG_INTERNAL;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          CFStringRef v9 = v5;
          _os_log_impl(&dword_215163000, v6, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
        }
        if (v5) {
          CFRelease(v5);
        }
      }
      printStoredChunk((unsigned int *)v7);
    }
  }
}

uint64_t CSReadChunkData(uint64_t a1, int *a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  int v3 = *a2;
  uint64_t v4 = *(void *)(a2 + 1);
  if (CK_DEFAULT_LOG_BLOCK != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_540);
  }
  CFStringRef v5 = CK_DEFAULT_LOG_INTERNAL;
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)uint64_t v15 = v3;
    *(_WORD *)&v15[4] = 2048;
    *(void *)&v15[6] = v4;
    __int16 v16 = 2048;
    uint64_t v17 = 0;
    _os_log_impl(&dword_215163000, v5, OS_LOG_TYPE_ERROR, "fsopen(%d,%llu,0x%0llx): unimplemented; returning -1\n",
      buf,
      0x1Cu);
    if (CK_DEFAULT_LOG_BLOCK != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_188);
    }
  }
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
  {
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    uint64_t v7 = *a2;
    uint64_t v8 = *(void *)(a2 + 1);
    CFStringRef v9 = __error();
    uint64_t v10 = strerror(*v9);
    CFStringRef v11 = CFStringCreateWithFormat(v6, 0, @"%s unable to open storage file %lld,%lld:%s\n", "CSReadChunkData", v7, v8, v10);
    if (CK_DEFAULT_LOG_BLOCK != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_194);
    }
    int v12 = CK_DEFAULT_LOG_INTERNAL;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      *(void *)uint64_t v15 = v11;
      _os_log_impl(&dword_215163000, v12, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v11) {
      CFRelease(v11);
    }
  }
  return 0;
}

os_log_t __CSReadChunkData_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __CSReadChunkData_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

uint64_t CKLockChunks(uint64_t a1, unsigned __int8 **a2, uint64_t a3)
{
  uint64_t result = CKLockChunkStore(a1);
  if (!result)
  {
    for (; a3; --a3)
    {
      uint64_t v7 = *a2++;
      _CSRetainChunk(a1, v7);
    }
    return CKUnlockChunkStore(a1);
  }
  return result;
}

uint64_t CKUnlockChunks(uint64_t a1, unsigned char **a2, uint64_t a3)
{
  uint64_t result = CKLockChunkStore(a1);
  if (!result)
  {
    for (; a3; --a3)
    {
      uint64_t v7 = *a2++;
      _CSReleaseChunkForSignature(a1, v7);
    }
    return CKUnlockChunkStore(a1);
  }
  return result;
}

const char *CKCreateChunkIDsFromFile(const void *a1, const __CFURL *a2, uint64_t a3, uint64_t a4)
{
  if (CKChunkStoreIsRegistry((uint64_t)a1)) {
    CKCreateChunkIDsFromFile_cold_1();
  }
  uint64_t result = (const char *)createPathFromUrl(a2);
  if (result)
  {
    CFStringRef v9 = (char *)result;
    uint64_t v10 = CSChunkFile(a1, result, a3, a4, 0);
    free(v9);
    return (const char *)v10;
  }
  return result;
}

uint64_t CSChunkFile(const void *a1, const char *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v23 = 0;
  uint64_t v20 = 0;
  uint64_t v10 = 0;
  if ((CKChunkStoreIsReadOnly((uint64_t)a1) & 1) == 0)
  {
    int v11 = open(a2, 0);
    if (v11 == -1)
    {
      if (CK_DEFAULT_LOG_BLOCK != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_498);
      }
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      {
        CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        uint64_t v14 = __error();
        uint64_t v15 = strerror(*v14);
        CFStringRef v16 = CFStringCreateWithFormat(v13, 0, @"open failed for \"%s\": %s", a2, v15);
        if (CK_DEFAULT_LOG_BLOCK != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_504);
        }
        uint64_t v17 = CK_DEFAULT_LOG_INTERNAL;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          CFStringRef v25 = v16;
          _os_log_impl(&dword_215163000, v17, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
        }
        if (v16) {
          CFRelease(v16);
        }
      }
      return 0;
    }
    else
    {
      int v12 = v11;
      CFDataRef v19 = (char *)a2;
      LODWORD(v20) = v11;
      uint64_t v21 = a3;
      uint64_t v22 = a4;
      if (chunkFdForStorage(a1, &v19, a5, &v23)) {
        uint64_t v10 = 0;
      }
      else {
        uint64_t v10 = v23;
      }
      CKCommitDatabaseTransactions((uint64_t)a1);
      close(v12);
    }
  }
  return v10;
}

uint64_t CKCreateChunkIDsFromFD(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (CKChunkStoreIsRegistry((uint64_t)a1)) {
    CKCreateChunkIDsFromFD_cold_1();
  }
  return CSChunkFD(a1, a2, a3, a4);
}

uint64_t CSChunkFD(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v20 = 0;
  uint64_t v17 = 0;
  uint64_t v8 = 0;
  if (CKChunkStoreIsReadOnly((uint64_t)a1)) {
    return v8;
  }
  CFStringRef v9 = (CFStringRef)v23;
  bzero(v23, 0x400uLL);
  if (get_path_for_fd(a2, v23))
  {
    if (CK_DEFAULT_LOG_BLOCK != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_507);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
    {
      CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      uint64_t v11 = *__error();
      int v12 = __error();
      CFAllocatorRef v13 = strerror(*v12);
      CFStringRef v9 = CFStringCreateWithFormat(v10, 0, @"get_path_for_fd failed for fd:%d: %d (%s)\n", a2, v11, v13);
      if (CK_DEFAULT_LOG_BLOCK != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_510);
      }
      uint64_t v14 = CK_DEFAULT_LOG_INTERNAL;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        CFStringRef v22 = v9;
        _os_log_impl(&dword_215163000, v14, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (!v9) {
        goto LABEL_13;
      }
      CFRelease(v9);
    }
    CFStringRef v9 = 0;
  }
LABEL_13:
  CFStringRef v16 = (char *)v9;
  LODWORD(v17) = a2;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  if (chunkFdForStorage(a1, &v16, 0, &v20)) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v20;
  }
  CKCommitDatabaseTransactions((uint64_t)a1);
  return v8;
}

__CFArray *CKChunkListForToken(uint64_t a1, sqlite3_int64 a2)
{
  if (CKChunkStoreIsRegistry(a1)) {
    CKChunkListForToken_cold_1();
  }
  size_t v15 = 0;
  Mutable = 0;
  if (!CKLockChunkStore(a1))
  {
    CFStringRef v5 = _CSChunkRefsForToken(a1, a2, &v15);
    if (v5)
    {
      CFAllocatorRef v6 = v5;
      Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
      if (v15)
      {
        size_t v7 = 0;
        uint64_t v8 = (sqlite3_int64 *)v6;
        do
        {
          uint64_t v14 = 0;
          sqlite3_int64 v9 = *v8;
          v8 += 2;
          if (_CSChunkForToken(a1, &v14, v9))
          {
            CFAllocatorRef v10 = (const UInt8 *)v14;
            uint64_t v11 = CKSignatureSize((char *)v14 + 56);
            CFDataRef v12 = CFDataCreate(0, v10, v11 + 57);
            CFArrayAppendValue(Mutable, v12);
            CFRelease(v12);
            free(v14);
          }
          ++v7;
        }
        while (v7 < v15);
      }
      free(v6);
    }
    else
    {
      Mutable = 0;
    }
    CKUnlockChunkStore(a1);
  }
  return Mutable;
}

unsigned int *CKChunkRefsForToken(uint64_t a1, sqlite3_int64 a2, size_t *a3)
{
  if (CKChunkStoreIsRegistry(a1)) {
    CKChunkRefsForToken_cold_1();
  }
  if (CKLockChunkStore(a1)) {
    return 0;
  }
  size_t v7 = _CSChunkRefsForToken(a1, a2, a3);
  CKUnlockChunkStore(a1);
  return v7;
}

__CFData *CKCopyDataForChunkID(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (CKChunkStoreIsRegistry(a1)) {
    CKCopyDataForChunkID_cold_1();
  }
  CFAllocatorRef v13 = 0;
  Mutable = 0;
  if (!CKLockChunkStore(a1))
  {
    sqlite3_int64 v5 = _CSTokenForChunkSignature(a1, a2, 115);
    if (v5 && _CSChunkForToken(a1, &v13, v5))
    {
      CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], *((unsigned int *)v13 + 10));
      CFDataSetLength(Mutable, *((unsigned int *)v13 + 10));
      BytePtr = CFDataGetBytePtr(Mutable);
      int v8 = *((_DWORD *)v13 + 10);
      CSReadChunkData((uint64_t)BytePtr, (int *)v13);
      if (v8)
      {
        if (CK_DEFAULT_LOG_BLOCK != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_227);
        }
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
        {
          CFStringRef v9 = CFStringCreateWithFormat(v6, 0, @"%s failed short read of StoredChunk for token: %llu\n", "CKCopyDataForChunkID", v5);
          if (CK_DEFAULT_LOG_BLOCK != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_233);
          }
          CFAllocatorRef v10 = CK_DEFAULT_LOG_INTERNAL;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138543362;
            size_t v15 = (void *)v9;
            _os_log_impl(&dword_215163000, v10, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
          }
          if (v9) {
            CFRelease(v9);
          }
        }
      }
      free(v13);
    }
    else
    {
      if (CK_DEFAULT_LOG_BLOCK != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_237);
      }
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      {
        Mutable = (__CFData *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"%s failed to get StoredChunk for token: %llu\n", "CKCopyDataForChunkID", v5);
        if (CK_DEFAULT_LOG_BLOCK != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_244);
        }
        uint64_t v11 = CK_DEFAULT_LOG_INTERNAL;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          size_t v15 = Mutable;
          _os_log_impl(&dword_215163000, v11, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
        }
        if (!Mutable) {
          goto LABEL_26;
        }
        CFRelease(Mutable);
      }
      Mutable = 0;
    }
LABEL_26:
    CKUnlockChunkStore(a1);
  }
  return Mutable;
}

os_log_t __CKCopyDataForChunkID_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __CKCopyDataForChunkID_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __CKCopyDataForChunkID_block_invoke_234()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __CKCopyDataForChunkID_block_invoke_2_241()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

uint64_t _StoreChunk(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  v71.tv_sec = 0;
  *(void *)&v71.tv_usec = 0;
  CFAllocatorRef v6 = _CSGetStorageFile(a1, (uint64_t)a2);
  if (!v6 || (uint64_t v7 = (uint64_t)v6, v8 = v6[2], v8 == -1))
  {
    if (CK_DEFAULT_LOG_BLOCK != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_350);
    }
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    CFAllocatorRef v16 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    uint64_t v17 = __error();
    uint64_t v18 = strerror(*v17);
    CFStringRef v13 = CFStringCreateWithFormat(v16, 0, @"unable to open storage file: %s\n", v18);
    if (CK_DEFAULT_LOG_BLOCK != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_357);
    }
    uint64_t v14 = CK_DEFAULT_LOG_INTERNAL;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR)) {
      goto LABEL_20;
    }
    v74.st_dev = 138543362;
    *(void *)&v74.st_mode = v13;
    size_t v15 = (uint8_t *)&v74;
    goto LABEL_19;
  }
  memset(&v74, 0, sizeof(v74));
  if (fstat(v8, &v74))
  {
    if (CK_DEFAULT_LOG_BLOCK != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_247);
    }
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    uint64_t v10 = *__error();
    uint64_t v11 = __error();
    CFDataRef v12 = strerror(*v11);
    CFStringRef v13 = CFStringCreateWithFormat(v9, 0, @"fstat failed: (%d) %s\n", v10, v12);
    if (CK_DEFAULT_LOG_BLOCK != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_253);
    }
    uint64_t v14 = CK_DEFAULT_LOG_INTERNAL;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
    {
LABEL_20:
      if (v13) {
        CFRelease(v13);
      }
      return 0;
    }
    *(_DWORD *)buf = 138543362;
    CFStringRef v73 = v13;
    goto LABEL_11;
  }
  off_t st_size = v74.st_size;
  if (lseek(*(_DWORD *)(v7 + 8), v74.st_size, 0) == -1)
  {
    if (CK_DEFAULT_LOG_BLOCK != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_257);
    }
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    CFAllocatorRef v27 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    uint64_t v28 = *__error();
    uint64_t v29 = __error();
    CFStringRef v30 = strerror(*v29);
    CFStringRef v13 = CFStringCreateWithFormat(v27, 0, @"lseek failed: (%d) %s\n", v28, v30);
    if (CK_DEFAULT_LOG_BLOCK != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_264);
    }
    uint64_t v14 = CK_DEFAULT_LOG_INTERNAL;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR)) {
      goto LABEL_20;
    }
    *(_DWORD *)buf = 138543362;
    CFStringRef v73 = v13;
    goto LABEL_11;
  }
  if (CK_DEFAULT_LOG_BLOCK != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_268);
  }
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_DEBUG))
  {
    CFStringRef v21 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Writing to SF rowID:%llu at o:0x%llx\n", *(void *)(v7 + 16), v74.st_size);
    if (CK_DEFAULT_LOG_BLOCK != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_275);
    }
    CFStringRef v22 = CK_DEFAULT_LOG_INTERNAL;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138543362;
      CFStringRef v73 = v21;
      _os_log_impl(&dword_215163000, v22, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
    }
    if (v21) {
      CFRelease(v21);
    }
  }
  uint64_t v23 = *((void *)a2 + 1);
  uint64_t v24 = CKSchemeAndSignatureSize((unsigned char *)a2 + 84);
  size_t v25 = v24;
  if (v23)
  {
    unint64_t v26 = v24 + a2[20] + 4;
    unsigned int __buf = bswap32(v26);
    if ((uint64_t)(st_size + v26) >= 20971621)
    {
      if (CK_DEFAULT_LOG_BLOCK != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_309);
      }
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
      CFStringRef v13 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"orig_sz (%lld) + used_sz (%u) is too big: %u < %llu \n", st_size, v26, 20971620, st_size + v26);
      if (CK_DEFAULT_LOG_BLOCK != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_316);
      }
      uint64_t v14 = CK_DEFAULT_LOG_INTERNAL;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR)) {
        goto LABEL_20;
      }
      *(_DWORD *)buf = 138543362;
      CFStringRef v73 = v13;
LABEL_11:
      size_t v15 = buf;
LABEL_19:
      _os_log_impl(&dword_215163000, v14, OS_LOG_TYPE_ERROR, "%{public}@", v15, 0xCu);
      goto LABEL_20;
    }
    if (write(*(_DWORD *)(v7 + 8), &__buf, 4uLL) == 4)
    {
      if (write(*(_DWORD *)(v7 + 8), a2 + 21, v25) == v25)
      {
        ssize_t v35 = write(*(_DWORD *)(v7 + 8), *((const void **)a2 + 1), a2[20]);
        uint64_t v34 = a2[20];
        if (v35 == v34) {
          goto LABEL_57;
        }
        ssize_t v60 = v35;
        if (CK_DEFAULT_LOG_BLOCK != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_339);
        }
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
        {
LABEL_107:
          int v61 = *(_DWORD *)(v7 + 8);
          if (v61 != -1 && ftruncate(v61, st_size))
          {
            if (CK_DEFAULT_LOG_BLOCK != -1) {
              dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_361);
            }
            if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
            {
              CFAllocatorRef v62 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
              uint64_t v63 = *(void *)(v7 + 16);
              uint64_t v64 = *__error();
              v65 = __error();
              v66 = strerror(*v65);
              CFStringRef v67 = CFStringCreateWithFormat(v62, 0, @"ftruncate failed for rowId:%lld: %d (%s)\n", v63, v64, v66);
              if (CK_DEFAULT_LOG_BLOCK != -1) {
                dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_368);
              }
              v68 = CK_DEFAULT_LOG_INTERNAL;
              if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
              {
                v74.st_dev = 138543362;
                *(void *)&v74.st_mode = v67;
                _os_log_impl(&dword_215163000, v68, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v74, 0xCu);
              }
              if (v67) {
                CFRelease(v67);
              }
            }
          }
          _CSCloseStorageFile(a1, (_DWORD *)v7, 0);
          return 0;
        }
        CFStringRef v44 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"write failed: %d != %d\n", v60, a2[20]);
        if (CK_DEFAULT_LOG_BLOCK != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_346);
        }
        unint64_t v45 = CK_DEFAULT_LOG_INTERNAL;
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
        {
LABEL_105:
          if (v44) {
            CFRelease(v44);
          }
          goto LABEL_107;
        }
        *(_DWORD *)buf = 138543362;
        CFStringRef v73 = v44;
      }
      else
      {
        if (CK_DEFAULT_LOG_BLOCK != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_331);
        }
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR)) {
          goto LABEL_107;
        }
        CFAllocatorRef v55 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        uint64_t v56 = *(void *)(v7 + 16);
        uint64_t v57 = *__error();
        v58 = __error();
        v59 = strerror(*v58);
        CFStringRef v44 = CFStringCreateWithFormat(v55, 0, @"write failed for rowID:%llu: %d (%s)\n", v56, v57, v59);
        if (CK_DEFAULT_LOG_BLOCK != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_335);
        }
        unint64_t v45 = CK_DEFAULT_LOG_INTERNAL;
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR)) {
          goto LABEL_105;
        }
        *(_DWORD *)buf = 138543362;
        CFStringRef v73 = v44;
      }
    }
    else
    {
      if (CK_DEFAULT_LOG_BLOCK != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_320);
      }
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR)) {
        goto LABEL_107;
      }
      CFAllocatorRef v46 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      uint64_t v47 = *(void *)(v7 + 16);
      uint64_t v48 = *__error();
      int v49 = __error();
      uint64_t v50 = strerror(*v49);
      CFStringRef v44 = CFStringCreateWithFormat(v46, 0, @"write failed for rowID:%llu: %d (%s)\n", v47, v48, v50);
      if (CK_DEFAULT_LOG_BLOCK != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_327);
      }
      unint64_t v45 = CK_DEFAULT_LOG_INTERNAL;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR)) {
        goto LABEL_105;
      }
      *(_DWORD *)buf = 138543362;
      CFStringRef v73 = v44;
    }
LABEL_104:
    _os_log_impl(&dword_215163000, v45, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    goto LABEL_105;
  }
  unsigned int __buf = bswap32(a2[1]);
  if (write(*(_DWORD *)(v7 + 8), &__buf, 4uLL) != 4)
  {
    if (CK_DEFAULT_LOG_BLOCK != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_279);
    }
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR)) {
      goto LABEL_107;
    }
    CFAllocatorRef v40 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    uint64_t v41 = *(unsigned int *)(v7 + 8);
    v42 = __error();
    uint64_t v43 = strerror(*v42);
    CFStringRef v44 = CFStringCreateWithFormat(v40, 0, @"write of %ld bytes on fd %d failed : %s", 4, v41, v43);
    if (CK_DEFAULT_LOG_BLOCK != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_286);
    }
    unint64_t v45 = CK_DEFAULT_LOG_INTERNAL;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR)) {
      goto LABEL_105;
    }
    *(_DWORD *)buf = 138543362;
    CFStringRef v73 = v44;
    goto LABEL_104;
  }
  if (v25 != write(*(_DWORD *)(v7 + 8), a2 + 21, v25))
  {
    if (CK_DEFAULT_LOG_BLOCK != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_290);
    }
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR)) {
      goto LABEL_107;
    }
    CFAllocatorRef v51 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    uint64_t v52 = *(unsigned int *)(v7 + 8);
    v53 = __error();
    v54 = strerror(*v53);
    CFStringRef v44 = CFStringCreateWithFormat(v51, 0, @"write of %ld bytes on fd %d failed : %s", v25, v52, v54);
    if (CK_DEFAULT_LOG_BLOCK != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_294);
    }
    unint64_t v45 = CK_DEFAULT_LOG_INTERNAL;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR)) {
      goto LABEL_105;
    }
    *(_DWORD *)buf = 138543362;
    CFStringRef v73 = v44;
    goto LABEL_104;
  }
  unsigned int v31 = a2[20];
  uint64_t v32 = CSCopyData(*a2, *(unsigned int *)(v7 + 8), v31, 0x8000);
  uint64_t v33 = v32;
  if (v31 != v32)
  {
    if (CK_DEFAULT_LOG_BLOCK != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_298);
    }
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR)) {
      goto LABEL_107;
    }
    CFStringRef v44 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"CSCopyData failed, copied %d bytes\n", v33);
    if (CK_DEFAULT_LOG_BLOCK != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_305);
    }
    unint64_t v45 = CK_DEFAULT_LOG_INTERNAL;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR)) {
      goto LABEL_105;
    }
    *(_DWORD *)buf = 138543362;
    CFStringRef v73 = v44;
    goto LABEL_104;
  }
  unint64_t v26 = (v25 + v32 + 4);
  LODWORD(v34) = a2[20];
LABEL_57:
  uint64_t v37 = *(void *)(v7 + 16);
  unint64_t v36 = *(void *)(v7 + 24);
  BOOL v38 = v36 >= v26;
  unint64_t v39 = v36 - v26;
  if (!v38) {
    unint64_t v39 = 0;
  }
  *(void *)(v7 + 24) = v39;
  *(_DWORD *)(a3 + 12) = v37;
  *(void *)(a3 + 4) = v74.st_ino;
  *(_DWORD *)a3 = v74.st_dev;
  *(void *)(a3 + 24) = v74.st_size;
  *(_DWORD *)(a3 + 40) = v34;
  *(_DWORD *)(a3 + 52) = 115;
  gettimeofday(&v71, 0);
  *(void *)(a3 + 44) = v71.tv_sec;
  if (*(void *)(v7 + 24) >> 10 > 0xCuLL)
  {
    _CSUpdateStorageFileInfo(a1, v7);
    return 1;
  }
  else
  {
    uint64_t v19 = 1;
    _CSCloseStorageFile(a1, (_DWORD *)v7, 1);
  }
  return v19;
}

uint64_t addSourceChunk(uint64_t a1, unsigned int a2, const void **a3)
{
  if (!a2) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v7 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 12);
  if (v7 == v6)
  {
    if (v7 <= 1) {
      int v8 = 1;
    }
    else {
      int v8 = *(_DWORD *)(a1 + 8);
    }
    int v9 = 2 * v8;
    if (v7 >> 4 >= 0x271) {
      unsigned int v6 = v7 + 100;
    }
    else {
      unsigned int v6 = v9;
    }
    if (v6 >= v7 && ((a2 * (unint64_t)v6) & 0xFFFFFFFF00000000) == 0)
    {
      uint64_t v10 = malloc_type_realloc(*(void **)a1, v6 * a2, 0x15E15CE8uLL);
      if (v10)
      {
        *(void *)a1 = v10;
        *(_DWORD *)(a1 + 12) = v6;
        unsigned int v11 = *(_DWORD *)(a1 + 8);
        goto LABEL_14;
      }
    }
    return 0xFFFFFFFFLL;
  }
  unsigned int v11 = *(_DWORD *)(a1 + 8);
LABEL_14:
  if (v11 >= v6) {
    addSourceChunk_cold_3();
  }
  if (!*(void *)a1) {
    addSourceChunk_cold_1();
  }
  uint64_t v12 = *(void *)a1 + v7 * a2;
  memcpy((void *)v12, a3, a2);
  *(void *)(v12 + 8) = 0;
  CFStringRef v13 = malloc_type_malloc(*(unsigned int *)(v12 + 80), 0x324CAA0CuLL);
  if (!v13) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v14 = v13;
  memcpy(v13, a3[1], *(unsigned int *)(v12 + 80));
  *(void *)(v12 + 8) = v14;
  unsigned int v15 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v15;
  if (v7 >= v15) {
    addSourceChunk_cold_2();
  }
  return 0;
}

uint64_t CSChunkStorageCallback(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 136);
  if (!v2)
  {
    if (!CKLockChunkStore(*(void *)a1))
    {
      uint64_t v8 = _CSFlushChunkBatch(a1);
      CKUnlockChunkStore(*(void *)a1);
      return v8;
    }
    return 0xFFFFFFFFLL;
  }
  if (addSourceChunk(a1 + 264, *(_DWORD *)(a1 + 308), (const void **)v2)) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v3 = *(void *)(a1 + 312) + *(unsigned int *)(v2 + 80);
  *(void *)(a1 + 312) = v3;
  uint64_t v4 = *(void *)(a1 + 424);
  uint64_t v5 = *(void *)(a1 + 80);
  if (v4 != v5 && v3 > 0x500000)
  {
    if (!CKLockChunkStore(*(void *)a1))
    {
      int v6 = _CSFlushChunkBatch(a1);
      CKUnlockChunkStore(*(void *)a1);
      if (!v6) {
        goto LABEL_12;
      }
    }
    return 0xFFFFFFFFLL;
  }
  if (v4 == v5)
  {
    if (!CKLockChunkStore(*(void *)a1))
    {
      int v10 = _CSFlushChunkBatch(a1);
      uint64_t v11 = *(void *)a1;
      if (v10)
      {
        CKUnlockChunkStore(v11);
      }
      else
      {
        sqlite3_int64 v12 = _CSRegisterStorageChunkList(v11, *(const void **)(a1 + 296), *(void *)(a1 + 288), *(void *)(a1 + 56));
        CKUnlockChunkStore(*(void *)a1);
        if (v12)
        {
          *(void *)(a1 + 280) = v12;
          CFStringRef v13 = *(void (**)(uint64_t, void))(a1 + 344);
          if (v13)
          {
            uint64_t v15 = 0;
            memset(v14, 0, sizeof(v14));
            v13(v2, *(void *)(a1 + 352));
            (*(void (**)(_OWORD *, void))(a1 + 344))(v14, *(void *)(a1 + 352));
          }
          return 0;
        }
      }
    }
    return 0xFFFFFFFFLL;
  }
LABEL_12:
  int v9 = *(void (**)(uint64_t, void))(a1 + 344);
  if (v9) {
    v9(v2, *(void *)(a1 + 352));
  }
  return 0;
}

uint64_t _CSFlushChunkBatch(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  unsigned int v1 = *(_DWORD *)(a1 + 272);
  uint64_t v2 = *(unsigned int *)(a1 + 304);
  unint64_t v3 = v1 - v2;
  if (v1 < v2) {
    _CSFlushChunkBatch_cold_1();
  }
  if (v1 == v2) {
    return 0;
  }
  unsigned int v6 = *(_DWORD *)(a1 + 308);
  if (!v6) {
    _CSFlushChunkBatch_cold_2();
  }
  uint64_t v7 = *(void *)(a1 + 264);
  uint64_t v8 = malloc_type_realloc(*(void **)(a1 + 296), 8 * (*(void *)(a1 + 288) + v3), 0x85F2E68FuLL);
  if (!v8) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v9 = v7 + v6 * v2;
  *(void *)(a1 + 296) = v8;
  if ((_CSStoreChunks(*(void *)a1, v9, v3, v6, &v8[*(void *)(a1 + 288)], a1) & 1) == 0)
  {
    if (CK_DEFAULT_LOG_BLOCK != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_545);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v13 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"_CSStoreChunks failed, batchIndex:%u, batchCount:%u\n", v2, v3);
      if (CK_DEFAULT_LOG_BLOCK != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_551);
      }
      uint64_t v14 = CK_DEFAULT_LOG_INTERNAL;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        CFStringRef v16 = v13;
        _os_log_impl(&dword_215163000, v14, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v13) {
        CFRelease(v13);
      }
    }
    return 0xFFFFFFFFLL;
  }
  unsigned int v10 = 0;
  *(void *)(a1 + 288) += v3;
  do
  {
    uint64_t v11 = v9 + v10;
    sqlite3_int64 v12 = *(void **)(v11 + 8);
    if (v12)
    {
      free(v12);
      *(void *)(v11 + 8) = 0;
    }
    if (*(unsigned char *)(v11 + 24))
    {
      if (*(unsigned char *)(a1 + 181))
      {
        *(void *)(a1 + 432) += *(unsigned int *)(v11 + 80);
        ++*(void *)(a1 + 456);
      }
    }
    v10 += v6;
    --v3;
  }
  while (v3);
  uint64_t result = 0;
  *(_DWORD *)(a1 + 304) = *(_DWORD *)(a1 + 272);
  *(void *)(a1 + 312) = 0;
  return result;
}

uint64_t CKRemoveStoredFile(uint64_t a1, sqlite3_int64 a2)
{
  if (CKChunkStoreIsRegistry(a1)) {
    CKRemoveStoredFile_cold_1();
  }
  uint64_t result = CKChunkStoreIsReadOnly(a1);
  if ((result & 1) == 0)
  {
    uint64_t result = CKLockChunkStore(a1);
    if (!result)
    {
      _CSRemoveStoredFile(a1, a2);
      return CKUnlockChunkStore(a1);
    }
  }
  return result;
}

unint64_t CKCompactStorage(uint64_t a1, unint64_t a2)
{
  if (CKChunkStoreIsRegistry(a1)) {
    CKCompactStorage_cold_1();
  }
  if ((CKChunkStoreIsReadOnly(a1) & 1) != 0 || CKLockChunkStoreNoFlag(a1)) {
    return 0;
  }
  unint64_t v5 = _CSCompactStorage(a1, a2);
  CKUnlockChunkStore(a1);
  return v5;
}

uint64_t CKCreateStoredFileWithFlags(const void *a1, const char *a2, char a3)
{
  if (CKChunkStoreIsRegistry((uint64_t)a1)) {
    CKCreateStoredFileWithFlags_cold_1();
  }
  if (CKChunkStoreIsReadOnly((uint64_t)a1)) {
    return 0;
  }
  return CSChunkFile(a1, a2, 0, 0, a3);
}

uint64_t CKCreateStoredFile(const void *a1, const char *a2)
{
  if (CKChunkStoreIsRegistry((uint64_t)a1)) {
    CKCreateStoredFile_cold_1();
  }
  return CKCreateStoredFileWithFlags(a1, a2, 0);
}

uint64_t CKCommitChunkedFile(uint64_t *a1, sqlite3_int64 a2, int a3)
{
  if (CKChunkStoreIsRegistry((uint64_t)a1)) {
    CKCommitChunkedFile_cold_1();
  }
  uint64_t result = CKChunkStoreIsReadOnly((uint64_t)a1);
  if ((result & 1) == 0)
  {
    if (a3)
    {
      return (uint64_t)_CSCommitChunkedFile(a1, a2);
    }
    else
    {
      uint64_t result = CKLockChunkStore((uint64_t)a1);
      if (!result)
      {
        _CSCommitChunkedFile(a1, a2);
        return CKUnlockChunkStore((uint64_t)a1);
      }
    }
  }
  return result;
}

unsigned int *CKCopyChunkListForStoredFileToken(uint64_t a1, sqlite3_int64 a2, size_t *a3, int a4)
{
  if (CKChunkStoreIsRegistry(a1)) {
    CKCopyChunkListForStoredFileToken_cold_1();
  }
  if (a4)
  {
    return _CSChunkRefsForToken(a1, a2, a3);
  }
  else if (CKReadLockChunkStore(a1))
  {
    return 0;
  }
  else
  {
    uint64_t v9 = _CSChunkRefsForToken(a1, a2, a3);
    CKUnlockChunkStore(a1);
    return v9;
  }
}

uint64_t CKGetLocationOfChunkInStorage(uint64_t a1, sqlite3_int64 a2, _DWORD *a3, void *a4, void *a5, int a6)
{
  if (CKChunkStoreIsRegistry(a1)) {
    CKGetLocationOfChunkInStorage_cold_1();
  }
  if (a6 || !CKReadLockChunkStore(a1))
  {
    CFStringRef v16 = 0;
    int v12 = _CSChunkForToken(a1, &v16, a2);
    uint64_t v13 = v12 & (_CSChunkIsInvalid(a1, a2) ^ 1);
    if (a6)
    {
      if (v13)
      {
LABEL_5:
        uint64_t v14 = v16;
        if (a3) {
          *a3 = *(_DWORD *)v16;
        }
        if (a4) {
          *a4 = *(void *)((char *)v14 + 4);
        }
        if (a5) {
          *a5 = v14[3];
        }
        goto LABEL_15;
      }
    }
    else
    {
      CKUnlockChunkStore(a1);
      if (v13) {
        goto LABEL_5;
      }
    }
    uint64_t v14 = v16;
LABEL_15:
    free(v14);
    return v13;
  }
  return 0;
}

sqlite3_int64 CKTokenForStoredChunk(uint64_t a1, unsigned __int8 *a2)
{
  if (CKChunkStoreIsRegistry(a1)) {
    CKTokenForStoredChunk_cold_1();
  }
  if (CKReadLockChunkStore(a1)) {
    return 0;
  }
  sqlite3_int64 v5 = _CSTokenForChunkSignature(a1, a2, 115);
  CKUnlockChunkStore(a1);
  return v5;
}

BOOL CKRegisteredItemCount(uint64_t a1, sqlite3_int64 *a2)
{
  if (!CKChunkStoreIsRegistry(a1)) {
    CKRegisteredItemCount_cold_1();
  }
  int v4 = CKLockChunkStore(a1);
  if (!v4)
  {
    _CSRegisteredItemCount(a1, a2);
    CKUnlockChunkStore(a1);
  }
  return v4 == 0;
}

BOOL CKGetRegisteredItems(uint64_t a1, sqlite3_int64 a2, uint64_t a3, sqlite3_int64 *a4)
{
  if (!CKChunkStoreIsRegistry(a1)) {
    CKGetRegisteredItems_cold_1();
  }
  int v8 = CKLockChunkStore(a1);
  if (!v8)
  {
    _CSGetRegisteredItems(a1, a2, a3, a4);
    CKUnlockChunkStore(a1);
  }
  return v8 == 0;
}

char *CKCreateRegisteredChunk(unsigned char *a1, unsigned __int8 *a2)
{
  return CKCreateRegisteredChunkWithSubchunkBlob(a1, a2, 0, 0);
}

char *CKCreateRegisteredChunkWithSubchunkBlob(unsigned char *a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 *a4)
{
  if (!a1) {
    return 0;
  }
  uint64_t v8 = CKChunkSchemeAndSignatureSize(a1);
  if (!v8) {
    return 0;
  }
  size_t v9 = v8;
  if (a2)
  {
    size_t v10 = CKChunkSchemeAndEncryptionKeySize(a2);
    if (!v10) {
      return 0;
    }
  }
  else
  {
    size_t v10 = 0;
  }
  size_t v13 = 0;
  if (a3 && a4) {
    size_t v13 = CKSubchunkBlobSize(a4, a3);
  }
  uint64_t v14 = (char *)malloc_type_calloc(1uLL, v9 + v10 + v13 + 35, 0xAD9CC552uLL);
  uint64_t v11 = v14;
  if (v14)
  {
    memcpy(v14 + 35, a1, v9);
    if (a2)
    {
      memcpy(&v11[v9 + 35], a2, v10);
      char v15 = 1;
    }
    else
    {
      char v15 = 0;
    }
    v11[30] = v15;
    v11[29] = v13 != 0;
    if (v13) {
      memcpy(&v11[v10 + 35 + v9], a4, v13);
    }
  }
  return v11;
}

const char *CKChunkerProfileTypeDescription()
{
  return "deprecated";
}

const char *CKChunkTypeDescription(unsigned int a1)
{
  if (a1 > 9) {
    return "unknown cs_chunk_type_t";
  }
  else {
    return off_26422FFC8[a1];
  }
}

uint64_t CKRegisterChunksForFileWithHint(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  if (!CKChunkStoreIsRegistry((uint64_t)a1)) {
    CKRegisterChunksForFileWithHint_cold_1();
  }
  memset(v33, 0, sizeof(v33));
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v24 = 0u;
  memset(&v35, 0, sizeof(v35));
  if (fstat(a2, &v35) == -1) {
    goto LABEL_19;
  }
  if ((v35.st_flags & 0x20) == 0) {
    goto LABEL_19;
  }
  unint64_t v10 = fgetxattr(a2, "com.apple.decmpfs", 0, 0, 0, 32);
  if (v10 < 0x10) {
    goto LABEL_19;
  }
  size_t v11 = v10;
  int v12 = malloc_type_malloc(v10, 0x8CB676F4uLL);
  if (fgetxattr(a2, "com.apple.decmpfs", v12, v11, 0, 32) != v11)
  {
    if (!v12) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (*v12 != 1668116582)
  {
LABEL_18:
    free(v12);
    goto LABEL_19;
  }
  int v13 = v12[1];
  free(v12);
  if (v13 == -2147483647)
  {
    if (CK_DEFAULT_LOG_BLOCK != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_407);
    }
    uint64_t result = os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    CFStringRef v15 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"NOT registering chunks for dataless file fd:%d, itemID:%lld\n", a2, a3);
    if (CK_DEFAULT_LOG_BLOCK != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_413);
    }
    CFStringRef v16 = CK_DEFAULT_LOG_INTERNAL;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
    {
      v35.st_dev = 138543362;
      *(void *)&v35.st_mode = v15;
      _os_log_impl(&dword_215163000, v16, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v35, 0xCu);
    }
    uint64_t v17 = 0;
    uint64_t result = 0;
    if (!v15) {
      return result;
    }
LABEL_35:
    CFRelease(v15);
    return v17;
  }
LABEL_19:
  CFStringRef v18 = (CFStringRef)v34;
  bzero(v34, 0x400uLL);
  if (!get_path_for_fd(a2, v34)) {
    goto LABEL_30;
  }
  if (CK_DEFAULT_LOG_BLOCK != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_417);
  }
  if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_29;
  }
  CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  uint64_t v20 = *__error();
  CFStringRef v21 = __error();
  CFStringRef v22 = strerror(*v21);
  CFStringRef v18 = CFStringCreateWithFormat(v19, 0, @"get_path_for_fd failed for fd:%d: %d (%s)\n", a2, v20, v22);
  if (CK_DEFAULT_LOG_BLOCK != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_424);
  }
  uint64_t v23 = CK_DEFAULT_LOG_INTERNAL;
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_DEFAULT))
  {
    v35.st_dev = 138543362;
    *(void *)&v35.st_mode = v18;
    _os_log_impl(&dword_215163000, v23, OS_LOG_TYPE_DEFAULT, "%{public}@", (uint8_t *)&v35, 0xCu);
  }
  if (v18)
  {
    CFRelease(v18);
LABEL_29:
    CFStringRef v18 = 0;
  }
LABEL_30:
  LODWORD(v30) = 1;
  *((void *)&v30 + 1) = a3;
  LODWORD(v31) = 0;
  *((void *)&v31 + 1) = a4;
  *((void *)&v32 + 1) = a5;
  *(void *)&v33[0] = v18;
  DWORD2(v33[0]) = a2;
  LODWORD(v24) = 2;
  *((void *)&v24 + 1) = v33;
  if (v18)
  {
    uint64_t result = (uint64_t)CFStringCreateWithCString(0, (const char *)v18, 0x8000100u);
    CFStringRef v15 = (CFStringRef)result;
    if (!result) {
      return result;
    }
  }
  else
  {
    CFStringRef v15 = 0;
  }
  *((void *)&v25 + 1) = v15;
  *(void *)&long long v27 = openFd;
  *((void *)&v27 + 1) = closeFd;
  *(void *)&long long v28 = statFd;
  *((void *)&v28 + 1) = readFd;
  *(void *)&long long v29 = getCacheBlobFd;
  *((void *)&v29 + 1) = setCacheBlobFd;
  uint64_t result = CKRegisterChunksForItem(a1, &v24, (uint64_t)&v30, 0, 0, 0, 0, 0);
  uint64_t v17 = result;
  if (v15) {
    goto LABEL_35;
  }
  return result;
}

os_log_t __CKRegisterChunksForFileWithHint_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __CKRegisterChunksForFileWithHint_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __CKRegisterChunksForFileWithHint_block_invoke_414()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __CKRegisterChunksForFileWithHint_block_invoke_2_421()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

uint64_t CKRegisterChunksForItem(const void *a1, void *a2, uint64_t a3, void *a4, unint64_t *a5, CFTypeRef *a6, CFTypeRef *a7, void *a8)
{
  if (!CKChunkStoreIsRegistry((uint64_t)a1)) {
    CKRegisterChunksForItem_cold_1();
  }
  return registerChunksForItem(a1, a2, a3, 0, a4, a5, a6, a7, a8);
}

uint64_t registerChunksForItem(const void *a1, void *a2, uint64_t a3, char a4, void *a5, unint64_t *a6, CFTypeRef *a7, CFTypeRef *a8, void *a9)
{
  uint64_t v112 = *MEMORY[0x263EF8340];
  if (!CKChunkStoreIsRegistry((uint64_t)a1)) {
    registerChunksForItem_cold_8();
  }
  CFTypeRef v94 = 0;
  if (a6) {
    *a6 = 0;
  }
  if (a5) {
    *a5 = 0;
  }
  unint64_t v86 = (unint64_t)a5;
  uint64_t v17 = (uint64_t)a9;
  BOOL v84 = a7 != 0;
  if (a7)
  {
    *a7 = 0;
    uint64_t v18 = 1;
    if (!a8) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  uint64_t v18 = 0;
  if (a8) {
LABEL_8:
  }
    *a8 = 0;
LABEL_9:
  v85 = a6;
  if (a9) {
    *a9 = 0;
  }
  v92 = 0;
  CFTypeRef cf = 0;
  sqlite3_int64 valuePtr = 0;
  unint64_t v91 = 0;
  memset(v111, 0, sizeof(v111));
  long long v110 = 0u;
  long long v109 = 0u;
  long long v108 = 0u;
  long long v107 = 0u;
  long long v106 = 0u;
  long long v105 = 0u;
  long long v104 = 0u;
  long long v103 = 0u;
  long long v102 = 0u;
  long long v101 = 0u;
  long long v100 = 0u;
  long long v99 = 0u;
  long long v98 = 0u;
  *(_OWORD *)buffer = 0u;
  bzero(__s, 0x400uLL);
  CFTypeRef v89 = 0;
  int Only = CKChunkStoreIsReadOnly((uint64_t)a1);
  uint64_t v20 = 0;
  BOOL v21 = 0;
  if (!a3 || !a2)
  {
    uint64_t v22 = 0;
    if (a9) {
      goto LABEL_98;
    }
    goto LABEL_94;
  }
  v83 = a8;
  uint64_t v22 = 0;
  if (Only)
  {
LABEL_97:
    if (!v17) {
      goto LABEL_94;
    }
    goto LABEL_98;
  }
  if (*(_DWORD *)a3 != 1)
  {
LABEL_96:
    BOOL v21 = 0;
    uint64_t v20 = 0;
    uint64_t v22 = 0;
    goto LABEL_97;
  }
  if (!a2[6]) {
    registerChunksForItem_cold_1();
  }
  if (!a2[7]) {
    registerChunksForItem_cold_2();
  }
  if (!a2[9]) {
    registerChunksForItem_cold_3();
  }
  if (!a2[8]) {
    registerChunksForItem_cold_4();
  }
  sqlite3_int64 valuePtr = *(void *)(a3 + 8);
  buffer[0] = 0;
  __s[0] = 0;
  CFStringRef v23 = (const __CFString *)a2[2];
  if (v23 && !CFStringGetCString(v23, buffer, 255, 0x8000100u)) {
    buffer[0] = 0;
  }
  CFStringRef v24 = (const __CFString *)a2[3];
  if (v24 && !CFStringGetCString(v24, __s, 1024, 0x8000100u)) {
    __s[0] = 0;
  }
  uint64_t v25 = CKFileDigestArgumentsFileScheme(*(void *)(a3 + 24));
  int v82 = CKFileDigestArgumentsFileSchemeByte(*(void *)(a3 + 24));
  unsigned int v26 = CKFileDigestArgumentsFileEncrypted(*(void *)(a3 + 24));
  if (gVerbose == 2)
  {
    unsigned int v27 = v26;
    if (CK_DEFAULT_LOG_BLOCK != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_559);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_DEBUG)
      && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_DEBUG))
    {
      CFStringRef v28 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"\"%s\", hint:\"%s\", itemID:%lld, encrypt:%u, scheme:0x%x, fixedChunkSize:0x%x, %u", __s, buffer, valuePtr, v27, v25, *(unsigned int *)(a3 + 16), v18);
      if (CK_DEFAULT_LOG_BLOCK != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_568);
      }
      long long v29 = CK_DEFAULT_LOG_INTERNAL;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        *(void *)&uint8_t buf[4] = v28;
        _os_log_impl(&dword_215163000, v29, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      if (v28) {
        CFRelease(v28);
      }
    }
  }
  int v30 = strcmp(buffer, "com.apple.ChunkingLibrary.CustomFixedChunk");
  int v31 = v30;
  if (v30) {
    BOOL v32 = a2[2] == 0;
  }
  else {
    BOOL v32 = 1;
  }
  int v33 = !v32;
  if (!v30 && !*(_DWORD *)(a3 + 16))
  {
    if (CK_DEFAULT_LOG_BLOCK != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_572);
    }
    uint64_t v17 = (uint64_t)a9;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v40 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Invalid custom fixed chunk size:0x%x for itemID:%lld\n", *(unsigned int *)(a3 + 16), valuePtr);
      if (CK_DEFAULT_LOG_BLOCK != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_579);
      }
      uint64_t v41 = CK_DEFAULT_LOG_INTERNAL;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR)) {
        goto LABEL_90;
      }
      *(_DWORD *)buf = 138543362;
      *(void *)&uint8_t buf[4] = v40;
      goto LABEL_89;
    }
    goto LABEL_96;
  }
  if (v25 <= 8 && ((1 << v25) & 0x116) != 0)
  {
    CFAllocatorRef v34 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFNumberRef v35 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt64Type, &valuePtr);
    if (v35)
    {
      for (CFNumberRef i = v35; !CSRegisterOperation((uint64_t)a1, i); CSWaitForOperation((uint64_t)a1, i))
        ;
      if (CKLockChunkStore((uint64_t)a1))
      {
        uint64_t v22 = 0;
        uint64_t v20 = 0;
        uint64_t v37 = 0;
        BOOL v81 = 0;
LABEL_51:
        int v38 = 0;
        int v39 = 0;
LABEL_52:
        uint64_t v17 = (uint64_t)a9;
        goto LABEL_53;
      }
      CFAllocatorRef alloc = v34;
      if (v86 | (unint64_t)a7)
      {
        v42 = (void *)_CSCopyChunkListForItemID((uint64_t)a1, valuePtr, &v91);
        uint64_t v20 = v42;
      }
      else
      {
        v42 = (void *)CSsql_get64((uint64_t)a1, 1, "SELECT ct_rowid FROM CSChunkTable WHERE ct_iid = %lld", valuePtr);
        uint64_t v20 = 0;
      }
      BOOL v48 = v42 != 0;
      CKUnlockChunkStore((uint64_t)a1);
      BOOL v81 = v48;
      int v49 = !v48;
      if (v48 && (a4 & 1) == 0)
      {
        if (!a7) {
          goto LABEL_254;
        }
        uint64_t v17 = (uint64_t)a9;
        if (CKReadLockChunkStore((uint64_t)a1))
        {
LABEL_124:
          uint64_t v22 = 0;
LABEL_161:
          uint64_t v37 = 0;
          int v38 = 0;
          int v39 = 0;
          goto LABEL_53;
        }
        char v55 = _CSGetSignatureForItemID((uint64_t)a1, valuePtr, v82, &v89, (uint64_t *)&v94);
        CKUnlockChunkStore((uint64_t)a1);
        if (v55)
        {
LABEL_254:
          if (CKFileDigestResultsHasFileLength((uint64_t)v89))
          {
            uint64_t v22 = 0;
            uint64_t v37 = 0;
            int v38 = 0;
            int v39 = 1;
            goto LABEL_52;
          }
          if (v91)
          {
            uint64_t v56 = 0;
            unint64_t v57 = 0;
            while (1)
            {
              uint64_t v58 = CKRegisteredChunkAtIndex((uint64_t)v20, v56);
              if (!v58) {
                break;
              }
              if (v57 <= *(void *)(v58 + 16) + (unint64_t)*(unsigned int *)(v58 + 24)) {
                unint64_t v57 = *(void *)(v58 + 16) + *(unsigned int *)(v58 + 24);
              }
              if (++v56 >= v91) {
                goto LABEL_205;
              }
            }
          }
          else
          {
            unint64_t v57 = 0;
LABEL_205:
            *(void *)buf = 0;
            uint64_t v64 = (unsigned char *)CKFileDigestResultsFileSignature((uint64_t)v89);
            v65 = (const void *)CKFileDigestResultsFileVerificationKey((uint64_t)v89);
            if (CKFileDigestResultsCreate(buf, v64, v57, v65))
            {
              uint64_t v17 = (uint64_t)a9;
              if (v89) {
                CFRelease(v89);
              }
              uint64_t v22 = 0;
              uint64_t v37 = 0;
              int v38 = 0;
              CFTypeRef v89 = *(CFTypeRef *)buf;
              int v39 = 1;
LABEL_53:
              CSUnregisterOperation((uint64_t)a1, i);
              CFRelease(i);
              if (v38)
              {
                freeOpCtx(v37);
                if ((v39 & 1) == 0) {
                  goto LABEL_55;
                }
              }
              else if (!v39)
              {
LABEL_55:
                BOOL v21 = v81;
                if (!v17) {
                  goto LABEL_94;
                }
LABEL_98:
                BOOL v43 = v21;
                CFStringRef v44 = (void *)v17;
                uint64_t v17 = 0;
                void *v44 = cf;
                CFTypeRef cf = 0;
                goto LABEL_99;
              }
              if (v85) {
                unint64_t *v85 = v91;
              }
              if (v86)
              {
                *(void *)unint64_t v86 = v20;
                uint64_t v20 = 0;
              }
              if (a7 && v89)
              {
                CKBaseRetain(v89);
                *a7 = v89;
              }
              if (v83)
              {
                CKBaseRetain(v94);
                CFTypeRef *v83 = v94;
              }
              uint64_t v17 = 1;
              BOOL v21 = v81;
              goto LABEL_94;
            }
          }
          uint64_t v22 = 0;
          uint64_t v37 = 0;
          int v38 = 0;
          uint64_t v17 = (uint64_t)a9;
LABEL_210:
          int v39 = v84;
          goto LABEL_53;
        }
        if (CK_DEFAULT_LOG_BLOCK != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_595);
        }
        uint64_t v17 = (uint64_t)a9;
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR)) {
          goto LABEL_124;
        }
        CFStringRef v60 = CFStringCreateWithFormat(alloc, 0, @"failed to get file sig for itemID:%lld\n", valuePtr);
        if (CK_DEFAULT_LOG_BLOCK != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_602);
        }
        int v61 = CK_DEFAULT_LOG_INTERNAL;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          *(void *)&uint8_t buf[4] = v60;
          _os_log_impl(&dword_215163000, v61, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
        }
        if (v60) {
          CFRelease(v60);
        }
        uint64_t v22 = 0;
LABEL_159:
        uint64_t v37 = 0;
        goto LABEL_51;
      }
      if (a4)
      {
        if (v20) {
          free(v20);
        }
      }
      else
      {
        if (v20) {
          int v49 = 0;
        }
        if (v49 != 1) {
          registerChunksForItem_cold_7();
        }
      }
      unint64_t v91 = 0;
      if (CKUnregisterChunksForItem((uint64_t)a1, valuePtr))
      {
        if (((uint64_t (*)(void, char **, CFTypeRef *))a2[6])(a2[1], &v92, &cf))
        {
          uint64_t v50 = (uint64_t (*)(uint64_t, char **, CFErrorRef *))a2[6];
          BOOL v51 = v50 == openFd || v50 == openFdUncached;
          int v38 = !v51;
          if (v51) {
            OpCtx = v92;
          }
          else {
            OpCtx = createOpCtx();
          }
          if (OpCtx)
          {
            *((void *)OpCtx + 1) = v92;
            *((void *)OpCtx + 2) = a2;
            uint64_t v88 = 0;
            memset(v87, 0, sizeof(v87));
            if (((uint64_t (*)(void))a2[8])())
            {
              setOpCtxStatInfo((uint64_t)OpCtx, (uint64_t *)v87);
              setOpCtxFileDigestArguments((uint64_t)OpCtx, *(CFTypeRef *)(a3 + 24));
              if (a7)
              {
                if (!CKFileSignatureGeneratorCreate((void *)OpCtx + 24, *(const void **)(a3 + 24))) {
                  goto LABEL_181;
                }
                v59 = *(const void **)(a3 + 32);
                if (v59)
                {
                  CKBaseRetain(v59);
                  *((void *)OpCtx + 25) = *(void *)(a3 + 32);
                }
              }
              if (!setOpCtxPath((uint64_t)OpCtx, __s))
              {
                if (!setOpCtxChunkScheme((uint64_t)OpCtx, 1, *(CFTypeRef *)(a3 + 40)))
                {
                  if (a1) {
                    CFTypeRef v66 = CFRetain(a1);
                  }
                  else {
                    CFTypeRef v66 = 0;
                  }
                  *(void *)OpCtx = v66;
                  *((void *)OpCtx + 16) = CSRegisterChunksForFileCallback;
                  *((void *)OpCtx + 7) = valuePtr;
                  CFStringRef v67 = buffer;
                  if (!v33) {
                    CFStringRef v67 = 0;
                  }
                  *((void *)OpCtx + 12) = v67;
                  uint64_t v22 = *(void *)&v87[0];
                  *((void *)OpCtx + 10) = *(void *)&v87[0];
                  if (v31) {
                    int v68 = 0;
                  }
                  else {
                    int v68 = *(_DWORD *)(a3 + 16);
                  }
                  OpCtx[160] = 5;
                  *((_DWORD *)OpCtx + 41) = 10000;
                  *((_DWORD *)OpCtx + 54) = v68;
                  *((_DWORD *)OpCtx + 55) = 0;
                  uint64_t v69 = *((void *)OpCtx + 2);
                  if (*(int *)v69 >= 3)
                  {
                    v70 = *(uint64_t (**)(void, __CFString *))(v69 + 96);
                    if (v70)
                    {
                      CFStringRef v71 = (const __CFString *)v70(*((void *)OpCtx + 1), @"kCKItemChunkLength");
                      if (v71)
                      {
                        CFStringRef v72 = v71;
                        *((_DWORD *)OpCtx + 55) = ck_get_int32_from_cftype_using_description(@"kCKItemChunkLength", v71, *((unsigned int *)OpCtx + 55));
                        CFRelease(v72);
                      }
                      CFStringRef v73 = (const __CFString *)(*(uint64_t (**)(void, __CFString *))(*((void *)OpCtx + 2)
                                                                                                + 96))(*((void *)OpCtx + 1), @"kCKItemSubchunkLength");
                      if (v73)
                      {
                        CFStringRef v74 = v73;
                        *((_DWORD *)OpCtx + 57) = ck_get_int32_from_cftype_using_description(@"kCKItemSubchunkLength", v73, *((unsigned int *)OpCtx + 57));
                        CFRelease(v74);
                        int v75 = *((_DWORD *)OpCtx + 57);
                        if ((v75 & 0x3FF) != 0) {
                          *((_DWORD *)OpCtx + 57) = (v75 & 0xFFFFFC00) + 1024;
                        }
                      }
                    }
                  }
                  uint64_t v37 = OpCtx;
                  if (chunkItem(OpCtx, &cf))
                  {
                    BOOL v84 = 0;
                    uint64_t v20 = 0;
                  }
                  else
                  {
                    CFTypeRef v76 = (CFTypeRef)*((void *)OpCtx + 26);
                    if (!v76) {
                      registerChunksForItem_cold_5();
                    }
                    if (v89)
                    {
                      CFRelease(v89);
                      CFTypeRef v76 = (CFTypeRef)*((void *)OpCtx + 26);
                    }
                    CFTypeRef v89 = v76;
                    *((void *)OpCtx + 26) = 0;
                    v77 = (const void *)*((void *)OpCtx + 30);
                    if (v77)
                    {
                      if (v94)
                      {
                        CFRelease(v94);
                        v77 = (const void *)*((void *)OpCtx + 30);
                        CFTypeRef v76 = v89;
                      }
                      CFTypeRef v94 = v77;
                      *((void *)OpCtx + 30) = 0;
                    }
                    if (v76)
                    {
                      uint64_t v78 = *((void *)OpCtx + 25);
                      if (v78)
                      {
                        if (!CKFileDigestResultsEqual((uint64_t)v76, v78)) {
                          registerChunksForItem_cold_6();
                        }
                      }
                    }
                    if (CKLockChunkStore((uint64_t)a1)
                      || (BOOL v79 = _CSRegisterChunkList((uint64_t)a1, (uint64_t)OpCtx), CKUnlockChunkStore((uint64_t)a1), !v79))
                    {
                      BOOL v84 = 0;
                      uint64_t v20 = 0;
                      goto LABEL_182;
                    }
                    uint64_t v37 = OpCtx;
                    unint64_t v91 = *((unsigned int *)OpCtx + 68);
                    uint64_t v20 = (void *)*((void *)OpCtx + 33);
                    *((void *)OpCtx + 33) = 0;
                    clearChunksArray((uint64_t)(OpCtx + 264));
                    BOOL v84 = 1;
                  }
                  uint64_t v17 = (uint64_t)a9;
                  goto LABEL_203;
                }
LABEL_181:
                BOOL v84 = 0;
                uint64_t v20 = 0;
                uint64_t v22 = 0;
LABEL_182:
                uint64_t v37 = OpCtx;
                uint64_t v17 = (uint64_t)a9;
LABEL_203:
                ((void (*)(void, char *, void))a2[7])(a2[1], v92, 0);
                goto LABEL_210;
              }
            }
            else
            {
              if (CK_DEFAULT_LOG_BLOCK != -1) {
                dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_629);
              }
              uint64_t v17 = (uint64_t)a9;
              uint64_t v37 = OpCtx;
              if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
              {
                BOOL v84 = 0;
                uint64_t v20 = 0;
                uint64_t v22 = 0;
                goto LABEL_203;
              }
              CFStringRef v62 = CFStringCreateWithFormat(alloc, 0, @"stat failed on itemID:%lld, path:\"%s\", ino:%llu, error:\"%@\"", valuePtr, __s, *((void *)OpCtx + 5), cf);
              if (CK_DEFAULT_LOG_BLOCK != -1) {
                dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_636);
              }
              uint64_t v63 = CK_DEFAULT_LOG_INTERNAL;
              if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138543362;
                *(void *)&uint8_t buf[4] = v62;
                _os_log_impl(&dword_215163000, v63, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
              }
              if (v62) {
                CFRelease(v62);
              }
            }
          }
          BOOL v84 = 0;
          uint64_t v20 = 0;
          uint64_t v22 = 0;
          uint64_t v17 = (uint64_t)a9;
          uint64_t v37 = OpCtx;
          goto LABEL_203;
        }
        if (CK_DEFAULT_LOG_BLOCK != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_618);
        }
        uint64_t v17 = (uint64_t)a9;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
        {
          CFStringRef v53 = CFStringCreateWithFormat(alloc, 0, @"open failed on itemID:%lld, path:\"%s\", error:\"%@\"", valuePtr, __s, cf);
          if (CK_DEFAULT_LOG_BLOCK != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_625);
          }
          v54 = CK_DEFAULT_LOG_INTERNAL;
          if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR)) {
            goto LABEL_156;
          }
          *(_DWORD *)buf = 138543362;
          *(void *)&uint8_t buf[4] = v53;
LABEL_155:
          _os_log_impl(&dword_215163000, v54, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
LABEL_156:
          if (v53) {
            CFRelease(v53);
          }
          uint64_t v22 = 0;
          uint64_t v20 = 0;
          goto LABEL_159;
        }
      }
      else
      {
        if (CK_DEFAULT_LOG_BLOCK != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_607);
        }
        uint64_t v17 = (uint64_t)a9;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
        {
          CFStringRef v53 = CFStringCreateWithFormat(alloc, 0, @"Failed to unregister chunks for itemID:%llu", valuePtr);
          if (CK_DEFAULT_LOG_BLOCK != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_614);
          }
          v54 = CK_DEFAULT_LOG_INTERNAL;
          if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR)) {
            goto LABEL_156;
          }
          *(_DWORD *)buf = 138543362;
          *(void *)&uint8_t buf[4] = v53;
          goto LABEL_155;
        }
      }
      uint64_t v22 = 0;
      uint64_t v20 = 0;
      goto LABEL_161;
    }
    BOOL v21 = 0;
    uint64_t v20 = 0;
    uint64_t v22 = 0;
LABEL_93:
    uint64_t v17 = (uint64_t)a9;
    if (!a9) {
      goto LABEL_94;
    }
    goto LABEL_98;
  }
  if (CK_DEFAULT_LOG_BLOCK != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_583);
  }
  uint64_t v17 = (uint64_t)a9;
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
  {
    CFStringRef v40 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Invalid file signature scheme:0x%x for itemID:%lld\n", v25, valuePtr);
    if (CK_DEFAULT_LOG_BLOCK != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_590);
    }
    uint64_t v41 = CK_DEFAULT_LOG_INTERNAL;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR)) {
      goto LABEL_90;
    }
    *(_DWORD *)buf = 138543362;
    *(void *)&uint8_t buf[4] = v40;
LABEL_89:
    _os_log_impl(&dword_215163000, v41, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
LABEL_90:
    if (v40) {
      CFRelease(v40);
    }
    BOOL v21 = 0;
    uint64_t v20 = 0;
    uint64_t v22 = 0;
    goto LABEL_93;
  }
  BOOL v21 = 0;
  uint64_t v20 = 0;
  uint64_t v22 = 0;
  if (a9) {
    goto LABEL_98;
  }
LABEL_94:
  BOOL v43 = v21;
  if (cf) {
    CFRelease(cf);
  }
LABEL_99:
  if (v20) {
    free(v20);
  }
  if (v89) {
    CKBaseRelease(v89);
  }
  CFTypeRef v89 = 0;
  if (v94) {
    CKBaseRelease(v94);
  }
  CFTypeRef v94 = 0;
  if (gVerbose == 2)
  {
    if (CK_DEFAULT_LOG_BLOCK != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_642);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_DEBUG)
      && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_DEBUG))
    {
      CFStringRef v45 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"rc:%u, itemID:%lld, size:%llu, chunkCount:%llu, ac:%u", v17, valuePtr, v22, v91, v43);
      if (CK_DEFAULT_LOG_BLOCK != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_653);
      }
      CFAllocatorRef v46 = CK_DEFAULT_LOG_INTERNAL;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        *(void *)&uint8_t buf[4] = v45;
        _os_log_impl(&dword_215163000, v46, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      if (v45) {
        CFRelease(v45);
      }
    }
  }
  return v17;
}

uint64_t CKRegisterItemAndChunks(const void *a1, void *a2, uint64_t a3, void *a4, unint64_t *a5, void *a6, void *a7, void *a8)
{
  if (!CKChunkStoreIsRegistry((uint64_t)a1)) {
    CKRegisterItemAndChunks_cold_2();
  }
  CFTypeRef v23 = 0;
  CFTypeRef cf = 0;
  if (a6) {
    *a6 = 0;
  }
  if ((CKChunkStoreIsReadOnly((uint64_t)a1) & 1) != 0
    || !registerChunksForItem(a1, a2, a3, 1, a4, a5, &cf, &v23, a8))
  {
    goto LABEL_18;
  }
  if (!cf) {
    CKRegisterItemAndChunks_cold_1();
  }
  sqlite3_int64 valuePtr = *(void *)(a3 + 8);
  for (CFNumberRef i = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt64Type, &valuePtr);
        !CSRegisterOperation((uint64_t)a1, i);
  if (!CKLockChunkStore((uint64_t)a1))
  {
    CFStringRef v17 = registerItem((uint64_t)a1, (uint64_t)cf, valuePtr, (uint64_t)v23, 0);
    CKUnlockChunkStore((uint64_t)a1);
    if (i)
    {
      CSUnregisterOperation((uint64_t)a1, i);
      CFRelease(i);
    }
    if (v17) {
      goto LABEL_15;
    }
LABEL_18:
    uint64_t v19 = 0;
    goto LABEL_27;
  }
  if (i)
  {
    CSUnregisterOperation((uint64_t)a1, i);
    CFRelease(i);
  }
LABEL_15:
  if (a6)
  {
    if (cf)
    {
      CFRetain(cf);
      CFTypeRef v18 = cf;
    }
    else
    {
      CFTypeRef v18 = 0;
    }
    *a6 = v18;
  }
  if (a7)
  {
    if (v23)
    {
      CFRetain(v23);
      CFTypeRef v20 = v23;
    }
    else
    {
      CFTypeRef v20 = 0;
    }
    *a7 = v20;
  }
  uint64_t v19 = 1;
LABEL_27:
  if (cf) {
    CKBaseRelease(cf);
  }
  CFTypeRef cf = 0;
  if (v23) {
    CKBaseRelease(v23);
  }
  return v19;
}

uint64_t CKUnregisterFile(uint64_t a1, sqlite3_int64 a2)
{
  if (!CKChunkStoreIsRegistry(a1)) {
    CKUnregisterFile_cold_1();
  }
  uint64_t result = CKChunkStoreIsReadOnly(a1);
  if ((result & 1) == 0)
  {
    uint64_t result = CKLockChunkStore(a1);
    if (!result)
    {
      unregisterItem(a1, a2);
      _CSUnregisterAllChunksForItem(a1, a2);
      return CKUnlockChunkStore(a1);
    }
  }
  return result;
}

BOOL CKGetRegisteredChunksForItemID(uint64_t a1, sqlite3_int64 a2, CFStringRef *a3, void *a4)
{
  if (!CKChunkStoreIsRegistry(a1)) {
    CKGetRegisteredChunksForItemID_cold_1();
  }
  BOOL result = 0;
  if (a3 && a4)
  {
    if (CKReadLockChunkStore(a1))
    {
      return 0;
    }
    else
    {
      *a3 = _CSCopyChunkListForItemID(a1, a2, a4);
      CKUnlockChunkStore(a1);
      return *a3 != 0;
    }
  }
  return result;
}

BOOL CKGetRegisteredChunksForFileSignature(uint64_t a1, unsigned __int8 *a2, CFStringRef *a3, void *a4)
{
  if (!CKChunkStoreIsRegistry(a1)) {
    CKGetRegisteredChunksForFileSignature_cold_1();
  }
  BOOL result = 0;
  if (a3 && a4)
  {
    if (CKReadLockChunkStore(a1))
    {
      return 0;
    }
    else
    {
      *a3 = _CSCopyChunkListForFileSignature(a1, a2, a4);
      CKUnlockChunkStore(a1);
      return *a3 != 0;
    }
  }
  return result;
}

BOOL CKRegisterChunk(uint64_t a1, uint64_t a2)
{
  if (!CKChunkStoreIsRegistry(a1)) {
    CKRegisterChunk_cold_1();
  }
  if ((CKChunkStoreIsReadOnly(a1) & 1) != 0 || CKLockChunkStore(a1)) {
    return 0;
  }
  BOOL v4 = _CSRegisterChunk(a1, a2, *(char *)(a2 + 28)) != 0;
  CKUnlockChunkStore(a1);
  return v4;
}

uint64_t CKGetRegisteredChunk(uint64_t a1, unsigned char *a2, char **a3)
{
  if (!CKChunkStoreIsRegistry(a1)) {
    CKGetRegisteredChunk_cold_1();
  }
  if (CKReadLockChunkStore(a1)) {
    return 0;
  }
  uint64_t v7 = _CSGetRegisteredChunk(a1, a2, a3);
  CKUnlockChunkStore(a1);
  return v7;
}

uint64_t CKGetRegisteredChunks(uint64_t a1, unsigned char *a2, void *a3, int *a4)
{
  if (!CKChunkStoreIsRegistry(a1)) {
    CKGetRegisteredChunks_cold_1();
  }
  if (CKReadLockChunkStore(a1)) {
    return 0;
  }
  uint64_t v9 = _CSGetRegisteredChunks(a1, a2, a3, a4);
  CKUnlockChunkStore(a1);
  return v9;
}

BOOL CKRegisterFile(uint64_t a1, uint64_t a2, sqlite3_int64 a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  sqlite3_int64 valuePtr = a3;
  if (!CKChunkStoreIsRegistry(a1)) {
    CKRegisterFile_cold_1();
  }
  if (CKChunkStoreIsReadOnly(a1))
  {
    if (CK_DEFAULT_LOG_BLOCK != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_443);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"can't register file %lld because the chunkstore is readonly", a3, valuePtr);
      if (CK_DEFAULT_LOG_BLOCK != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_449);
      }
      uint64_t v7 = CK_DEFAULT_LOG_INTERNAL;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        CFStringRef v13 = v6;
        _os_log_impl(&dword_215163000, v7, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v6) {
        CFRelease(v6);
      }
    }
    return 0;
  }
  else
  {
    for (CFNumberRef i = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt64Type, &valuePtr);
          !CSRegisterOperation(a1, i);
    if (CKLockChunkStore(a1))
    {
      BOOL v8 = 0;
    }
    else
    {
      _CSUnregisterTemporaryChunks(a1, valuePtr);
      BOOL v8 = registerItem(a1, a2, valuePtr, 0, 1) != 0;
      CKUnlockChunkStore(a1);
    }
    CSUnregisterOperation(a1, i);
    CFRelease(i);
  }
  return v8;
}

os_log_t __CKRegisterFile_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __CKRegisterFile_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

uint64_t CKGetRegisteredFileSignature(uint64_t a1, CFTypeRef *a2, sqlite3_int64 a3)
{
  if (!CKChunkStoreIsRegistry(a1)) {
    CKGetRegisteredFileSignature_cold_1();
  }
  return CKGetRegisteredFileMetadata(a1, a3, a2, 0);
}

uint64_t CKGetRegisteredFileMetadata(uint64_t a1, sqlite3_int64 a2, CFTypeRef *a3, void *a4)
{
  if (!CKChunkStoreIsRegistry(a1)) {
    CKGetRegisteredFileMetadata_cold_1();
  }
  if (CKReadLockChunkStore(a1)) {
    return 0;
  }
  CFTypeRef v12 = 0;
  CFTypeRef cf = 0;
  uint64_t v8 = _CSGetSignatureForItemID(a1, a2, 0, &cf, (uint64_t *)&v12);
  CKUnlockChunkStore(a1);
  CFTypeRef v9 = cf;
  if (v8)
  {
    if (a3 && cf)
    {
      CFRetain(cf);
      CFTypeRef v9 = cf;
      *a3 = cf;
    }
    if (a4)
    {
      CFTypeRef v10 = v12;
      if (v12)
      {
        CFRetain(v12);
        CFTypeRef v10 = v12;
        CFTypeRef v9 = cf;
      }
      *a4 = v10;
    }
  }
  if (v9) {
    CKBaseRelease(v9);
  }
  CFTypeRef cf = 0;
  if (v12) {
    CKBaseRelease(v12);
  }
  return v8;
}

uint64_t CKGetRegisteredFileItemID(uint64_t a1, unsigned __int8 *a2)
{
  if (!CKChunkStoreIsRegistry(a1)) {
    CKGetRegisteredFileItemID_cold_1();
  }
  if (CKReadLockChunkStore(a1)) {
    return 0;
  }
  uint64_t v5 = _CSGetItemIdForFileSignature(a1, a2);
  CKUnlockChunkStore(a1);
  return v5;
}

uint64_t CKUnregisterAllTemporaryChunks(uint64_t a1)
{
  if (!CKChunkStoreIsRegistry(a1)) {
    CKUnregisterAllTemporaryChunks_cold_1();
  }
  if ((CKChunkStoreIsReadOnly(a1) & 1) != 0 || CKLockChunkStore(a1)) {
    return 0;
  }
  uint64_t v3 = _CSUnregisterAllTemporaryChunks(a1);
  CKUnlockChunkStore(a1);
  return v3;
}

uint64_t CKUnregisterTemporaryChunks(uint64_t a1, sqlite3_int64 a2)
{
  if (!CKChunkStoreIsRegistry(a1)) {
    CKUnregisterTemporaryChunks_cold_1();
  }
  if ((CKChunkStoreIsReadOnly(a1) & 1) != 0 || CKLockChunkStore(a1)) {
    return 0;
  }
  uint64_t v5 = _CSUnregisterTemporaryChunks(a1, a2);
  CKUnlockChunkStore(a1);
  return v5;
}

unint64_t CKRegisterTemporaryChunk(uint64_t a1, void *a2)
{
  if (!CKChunkStoreIsRegistry(a1)) {
    CKRegisterTemporaryChunk_cold_1();
  }
  if ((CKChunkStoreIsReadOnly(a1) & 1) != 0 || CKLockChunkStore(a1)) {
    return 0;
  }
  *a2 = 0;
  unint64_t v5 = _CSRelocateRegisteredChunk(a1, (uint64_t)a2, 110, 116);
  CKUnlockChunkStore(a1);
  return v5;
}

BOOL CKRegisterTemporaryChunks(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (!CKChunkStoreIsRegistry(a1)) {
    CKRegisterTemporaryChunks_cold_1();
  }
  if ((CKChunkStoreIsReadOnly(a1) & 1) != 0 || CKLockChunkStore(a1)) {
    return 0;
  }
  unsigned int v8 = CKRegisteredChunkSize(a2);
  if (a3)
  {
    unsigned int v9 = v8;
    if (_CSRegisterTemporaryChunk(a1, a2))
    {
      uint64_t v10 = a2 + v9;
      uint64_t v11 = 1;
      do
      {
        unint64_t v12 = v11;
        if (a3 == v11) {
          break;
        }
        BOOL v13 = _CSRegisterTemporaryChunk(a1, v10);
        v10 += v9;
        uint64_t v11 = v12 + 1;
      }
      while (v13);
      BOOL v6 = v12 >= a3;
    }
    else
    {
      BOOL v6 = 0;
    }
  }
  else
  {
    BOOL v6 = 1;
  }
  CKUnlockChunkStore(a1);
  return v6;
}

uint64_t CKUnregisterTemporaryChunk(uint64_t a1, uint64_t a2)
{
  if (!CKChunkStoreIsRegistry(a1)) {
    CKUnregisterTemporaryChunk_cold_1();
  }
  if ((CKChunkStoreIsReadOnly(a1) & 1) != 0 || CKLockChunkStore(a1)) {
    return 0;
  }
  uint64_t v5 = _CSUnregisterChunk(a1, a2, 110);
  CKUnlockChunkStore(a1);
  return v5;
}

uint64_t CKUnregisterTemporaryNChunk(uint64_t a1, uint64_t a2)
{
  if (!CKChunkStoreIsRegistry(a1)) {
    CKUnregisterTemporaryNChunk_cold_1();
  }
  if ((CKChunkStoreIsReadOnly(a1) & 1) != 0 || CKLockChunkStore(a1)) {
    return 0;
  }
  uint64_t v5 = _CSUnregisterChunk(a1, a2, 110);
  CKUnlockChunkStore(a1);
  return v5;
}

uint64_t CKUnregisterTemporaryTChunk(uint64_t a1, uint64_t a2)
{
  if (!CKChunkStoreIsRegistry(a1)) {
    CKUnregisterTemporaryTChunk_cold_1();
  }
  if ((CKChunkStoreIsReadOnly(a1) & 1) != 0 || CKLockChunkStore(a1)) {
    return 0;
  }
  uint64_t v5 = _CSUnregisterChunk(a1, a2, 116);
  CKUnlockChunkStore(a1);
  return v5;
}

unint64_t CKRelocateTemporaryChunk(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (!CKChunkStoreIsRegistry(a1)) {
    CKRelocateTemporaryChunk_cold_1();
  }
  if (CKChunkStoreIsReadOnly(a1)) {
    return 0;
  }
  if (!*(void *)a2)
  {
    if (CK_DEFAULT_LOG_BLOCK != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_468);
    }
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_DEBUG)) {
      return 0;
    }
    CFStringRef v10 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Invalid chunk rowID, itemID:%lld, o:0x%llx, sz:0x%x\n", *(void *)(a2 + 8), *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
    if (CK_DEFAULT_LOG_BLOCK != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_474);
    }
    uint64_t v11 = CK_DEFAULT_LOG_INTERNAL;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_26;
    }
    *(_DWORD *)buf = 138543362;
    CFStringRef v13 = v10;
LABEL_25:
    _os_log_impl(&dword_215163000, v11, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
LABEL_26:
    if (v10) {
      CFRelease(v10);
    }
    return 0;
  }
  if (a3 != 116 && a3 != 110 || a4 != 110 && a4 != 116)
  {
    if (CK_DEFAULT_LOG_BLOCK != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_478);
    }
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_DEBUG)) {
      return 0;
    }
    CFStringRef v10 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Invalid chunk relocation ('%c'/'%c') for itemID:%lld, o:0x%llx, sz:0x%x, rowID:%llu\n", a3, a4, *(void *)(a2 + 8), *(void *)(a2 + 16), *(unsigned int *)(a2 + 24), *(void *)a2);
    if (CK_DEFAULT_LOG_BLOCK != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_485);
    }
    uint64_t v11 = CK_DEFAULT_LOG_INTERNAL;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_26;
    }
    *(_DWORD *)buf = 138543362;
    CFStringRef v13 = v10;
    goto LABEL_25;
  }
  if (CKLockChunkStore(a1)) {
    return 0;
  }
  unint64_t v9 = _CSRelocateRegisteredChunk(a1, a2, a3, a4);
  CKUnlockChunkStore(a1);
  return v9;
}

os_log_t __CKRelocateTemporaryChunk_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __CKRelocateTemporaryChunk_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __CKRelocateTemporaryChunk_block_invoke_475()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __CKRelocateTemporaryChunk_block_invoke_2_482()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

uint64_t CKConvertTemporaryChunks(uint64_t a1, sqlite3_int64 a2)
{
  if (!CKChunkStoreIsRegistry(a1)) {
    CKConvertTemporaryChunks_cold_1();
  }
  if ((CKChunkStoreIsReadOnly(a1) & 1) != 0 || CKLockChunkStore(a1)) {
    return 0;
  }
  uint64_t v5 = _CSConvertTemporaryChunks(a1, a2);
  CKUnlockChunkStore(a1);
  return v5;
}

uint64_t CKKeyForRegisteredChunk(uint64_t a1, unsigned char *a2, void *a3)
{
  if (!CKChunkStoreIsRegistry(a1)) {
    CKKeyForRegisteredChunk_cold_1();
  }
  if (CKReadLockChunkStore(a1)) {
    return 0;
  }
  uint64_t v7 = _CSKeyForRegisteredChunk(a1, a2, a3);
  CKUnlockChunkStore(a1);
  return v7;
}

BOOL CKRegisterNeededChunk(uint64_t a1, uint64_t a2)
{
  if (!CKChunkStoreIsRegistry(a1)) {
    CKRegisterNeededChunk_cold_1();
  }
  if ((CKChunkStoreIsReadOnly(a1) & 1) != 0 || CKLockChunkStore(a1)) {
    return 0;
  }
  BOOL v4 = _CSRegisterChunk(a1, a2, 110) != 0;
  CKUnlockChunkStore(a1);
  return v4;
}

uint64_t CKUnregisterChunksForItem(uint64_t a1, sqlite3_int64 a2)
{
  if (!CKChunkStoreIsRegistry(a1)) {
    CKUnregisterChunksForItem_cold_1();
  }
  if ((CKChunkStoreIsReadOnly(a1) & 1) != 0 || CKLockChunkStore(a1)) {
    return 0;
  }
  uint64_t v5 = _CSUnregisterAllChunksForItem(a1, a2);
  CKUnlockChunkStore(a1);
  return v5;
}

sqlite3_int64 CKTokenForRegisteredChunk(uint64_t a1, unsigned __int8 *a2)
{
  if (!CKChunkStoreIsRegistry(a1)) {
    CKTokenForRegisteredChunk_cold_1();
  }
  if (CKReadLockChunkStore(a1)) {
    return 0;
  }
  sqlite3_int64 v5 = _CSTokenForChunkSignature(a1, a2, 114);
  CKUnlockChunkStore(a1);
  return v5;
}

os_log_t __CSChunkFile_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __CSChunkFile_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

uint64_t chunkFdForStorage(const void *a1, char **a2, char a3, void *a4)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  if (CKChunkStoreIsRegistry((uint64_t)a1)) {
    chunkFdForStorage_cold_1();
  }
  if (!a2) {
    chunkFdForStorage_cold_2();
  }
  CFErrorRef v37 = 0;
  uint64_t valuePtr = 0;
  CFTypeRef v35 = 0;
  uint64_t v36 = 0;
  *a4 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  uint64_t v25 = 2;
  unsigned int v26 = a2;
  unsigned int v8 = *a2;
  if (*a2)
  {
    unint64_t v9 = strrchr(*a2, 47);
    if (v9) {
      CFStringRef v10 = v9 + 1;
    }
    else {
      CFStringRef v10 = v8;
    }
    uint64_t v11 = strrchr(v10, 46);
    if (v11) {
      unint64_t v12 = v11 + 1;
    }
    else {
      unint64_t v12 = 0;
    }
  }
  else
  {
    unint64_t v12 = 0;
  }
  long long v29 = openFd;
  int v30 = closeFd;
  int v31 = statFd;
  BOOL v32 = readFd;
  int v33 = getCacheBlobFd;
  CFAllocatorRef v34 = setCacheBlobFd;
  int v13 = openFd((uint64_t)a2, &v36, &v37);
  unsigned int v26 = 0;
  if ((v13 & 1) == 0)
  {
    if (CK_DEFAULT_LOG_BLOCK != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_668);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v15 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"stat failed on path:\"%s\", error:\"%@\"\n", v8, v37);
      if (CK_DEFAULT_LOG_BLOCK != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_674);
      }
      CFStringRef v17 = CK_DEFAULT_LOG_INTERNAL;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        CFStringRef v40 = v15;
        _os_log_impl(&dword_215163000, v17, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (!v15) {
        goto LABEL_31;
      }
      CFRelease(v15);
    }
    goto LABEL_30;
  }
  uint64_t v14 = v36;
  *((void *)v36 + 1) = v36;
  *((void *)v14 + 2) = &v25;
  if (!CKChunkDigestArgumentsV1Create(&v35, 0, 0)
    || setOpCtxPath((uint64_t)v14, v8)
    || setOpCtxChunkScheme((uint64_t)v14, 0, v35))
  {
LABEL_30:
    CFStringRef v15 = 0;
    goto LABEL_31;
  }
  uint64_t valuePtr = *((void *)v14 + 5);
  CFStringRef v15 = (const __CFString *)CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
  if (!v15)
  {
LABEL_31:
    uint64_t v18 = 0xFFFFFFFFLL;
    goto LABEL_32;
  }
  while (!CSRegisterOperation((uint64_t)a1, v15))
    CSWaitForOperation((uint64_t)a1, v15);
  uint64_t v24 = 0;
  memset(v23, 0, sizeof(v23));
  if ((v31((uint64_t)v36, (uint64_t)v23, 0) & 1) == 0)
  {
    if (CK_DEFAULT_LOG_BLOCK != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_678);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v20 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"stat failed on itemID:%lld, path:\"%s\", ino:%llu, error:%@\n", valuePtr, v8, *((void *)v14 + 5), v37);
      if (CK_DEFAULT_LOG_BLOCK != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_685);
      }
      BOOL v21 = CK_DEFAULT_LOG_INTERNAL;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        CFStringRef v40 = v20;
        _os_log_impl(&dword_215163000, v21, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v20) {
        CFRelease(v20);
      }
    }
    goto LABEL_31;
  }
  setOpCtxStatInfo((uint64_t)v14, (uint64_t *)v23);
  if (a1) {
    CFTypeRef v16 = CFRetain(a1);
  }
  else {
    CFTypeRef v16 = 0;
  }
  *(void *)uint64_t v14 = v16;
  *((void *)v14 + 2) = &v25;
  *((void *)v14 + 16) = CSChunkStorageCallback;
  *((void *)v14 + 7) = valuePtr;
  *((void *)v14 + 12) = v12;
  v14[176] = a3 & 1;
  v14[160] = 3;
  *((_DWORD *)v14 + 55) = 0;
  *((_DWORD *)v14 + 41) = 20000;
  uint64_t v18 = chunkItem(v14, 0);
  uint64_t v22 = 0;
  if (!v18) {
    uint64_t v22 = *((void *)v14 + 35);
  }
  *a4 = v22;
LABEL_32:
  if (v35) {
    CKBaseRelease(v35);
  }
  CFTypeRef v35 = 0;
  if (v15)
  {
    CSUnregisterOperation((uint64_t)a1, v15);
    CFRelease(v15);
  }
  if (v13) {
    v30((int)v26, (void **)v36, 0);
  }
  if (v37) {
    CFRelease(v37);
  }
  return v18;
}

os_log_t __CSChunkFD_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __CSChunkFD_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __fsopen_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __registerChunksForItem_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __registerChunksForItem_block_invoke_3()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __registerChunksForItem_block_invoke_569()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __registerChunksForItem_block_invoke_2_576()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __registerChunksForItem_block_invoke_580()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __registerChunksForItem_block_invoke_2_587()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __registerChunksForItem_block_invoke_592()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __registerChunksForItem_block_invoke_2_599()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __registerChunksForItem_block_invoke_604()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __registerChunksForItem_block_invoke_2_611()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __registerChunksForItem_block_invoke_615()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __registerChunksForItem_block_invoke_2_622()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __registerChunksForItem_block_invoke_626()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __registerChunksForItem_block_invoke_2_633()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

uint64_t CSRegisterChunksForFileCallback(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  unsigned int v1 = *(void **)(a1 + 136);
  if (!v1) {
    return 0;
  }
  if (*((char *)v1 + 84) < 0) {
    uint64_t v3 = (unsigned __int8 *)v1 + CKChunkSchemeAndSignatureSize((unsigned char *)v1 + 84) + 84;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v5 = *(void *)(a1 + 256);
  if (v5) {
    LODWORD(v5) = *(_DWORD *)(v5 + 56 * *(unsigned int *)(a1 + 252) + 32);
  }
  uint64_t result = addRegisteredChunk(a1 + 264, 0, *v1, v1[9], *((_DWORD *)v1 + 20), 114, (unsigned char *)v1[7], (unsigned char *)v1 + 84, v3, v5);
  if (result)
  {
    if (CK_DEFAULT_LOG_BLOCK != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_656);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"addRegisteredChunk failed, itemID:%lld, offset:0x%llx, size:0x%x\n", *v1, v1[9], *((unsigned int *)v1 + 20));
      if (CK_DEFAULT_LOG_BLOCK != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_662);
      }
      uint64_t v7 = CK_DEFAULT_LOG_INTERNAL;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        CFStringRef v9 = v6;
        _os_log_impl(&dword_215163000, v7, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v6) {
        CFRelease(v6);
      }
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

os_log_t __registerChunksForItem_block_invoke_639()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __registerChunksForItem_block_invoke_3_650()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __CSRegisterChunksForFileCallback_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __CSRegisterChunksForFileCallback_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __chunkFdForStorage_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __chunkFdForStorage_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __chunkFdForStorage_block_invoke_675()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __chunkFdForStorage_block_invoke_2_682()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

uint64_t _CSHandleDatabaseIOError(uint64_t result)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (result == 10)
  {
    if (CK_DEFAULT_LOG_BLOCK != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_697);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v1 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Chunk store database I/O error. Forcing process exit.");
      if (CK_DEFAULT_LOG_BLOCK != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_703);
      }
      uint64_t v2 = CK_DEFAULT_LOG_INTERNAL;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      {
        int v3 = 138543362;
        CFStringRef v4 = v1;
        _os_log_impl(&dword_215163000, v2, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v3, 0xCu);
      }
      if (v1) {
        CFRelease(v1);
      }
    }
    exit(1);
  }
  return result;
}

uint64_t _CKFileDigestResultsInit(uint64_t a1, unsigned char *a2, uint64_t a3, void *a4)
{
  if (a4) {
    *a4 = 0;
  }
  *(void *)(a1 + 24) = a3;
  *(void *)(a1 + 32) = CKFileSignatureCopy(a2);
  return 1;
}

uint64_t CKFileDigestResultsFileLength(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

BOOL CKFileDigestResultsHasFileLength(uint64_t a1)
{
  return *(void *)(a1 + 24) != -1;
}

uint64_t CKFileDigestResultsFileSignature(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t CKFileDigestResultsEqual(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  uint64_t result = 0;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = 0;
      int v4 = *(_DWORD *)(a1 + 16);
      if (v4)
      {
        if (v4 == *(_DWORD *)(a2 + 16)) {
          return _requestCallbacks_3[4 * v4 + 2](a1);
        }
      }
    }
  }
  return result;
}

uint64_t CKFileDigestResultsFileVerificationKey(uint64_t a1)
{
  CFStringRef v1 = (uint64_t (*)(void))_requestCallbacks_3[4 * *(int *)(a1 + 16)];
  if (v1) {
    return v1();
  }
  else {
    return 0;
  }
}

BOOL _CKFileDigestResultsCFEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t _CKFileDigestResultsCFCopyFormatDescription(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 16);
  if (v1) {
    return ((uint64_t (*)(void))_requestCallbacks_3[4 * v1 + 1])();
  }
  else {
    return 0;
  }
}

uint64_t _CKFileDigestResultsCFCopyDebugDescription(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 16);
  if (v1) {
    return ((uint64_t (*)(void))_requestCallbacks_3[4 * v1 + 1])();
  }
  else {
    return 0;
  }
}

uint64_t doEncrypt(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4)
{
  CFTypeRef v6 = 0;
  CFTypeRef v7 = 0;
  if (!CKChunkCryptorCreate(&v6, 1, a3, a4)) {
    return 0;
  }
  if (CKChunkCryptorUpdate((uint64_t)v6)) {
    uint64_t v4 = CKChunkCryptorFinish((uint64_t)v6);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v6) {
    CKBaseRelease(v6);
  }
  CFTypeRef v6 = 0;
  if (v7) {
    CKBaseRelease(v7);
  }
  return v4;
}

uint64_t doDecrypt(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4)
{
  CFTypeRef v6 = 0;
  CFTypeRef v7 = 0;
  if (!CKChunkCryptorCreate(&v6, 0, a3, a4)) {
    return 0;
  }
  if (CKChunkCryptorUpdate((uint64_t)v6)) {
    uint64_t v4 = CKChunkCryptorFinish((uint64_t)v6);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v6) {
    CKBaseRelease(v6);
  }
  CFTypeRef v6 = 0;
  if (v7) {
    CKBaseRelease(v7);
  }
  return v4;
}

uint64_t getChunkListCacheBlob(uint64_t a1, CFMutableDataRef *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  *a2 = 0;
  CFMutableDataRef theData = 0;
  uint64_t v4 = *(void *)(a1 + 104);
  uint64_t CacheBlob = getCacheBlob((void *)a1, (uint64_t)"com.apple.cscache", &theData);
  if (!CacheBlob)
  {
    MutableBytePtr = CFDataGetMutableBytePtr(theData);
    CFIndex Length = CFDataGetLength(theData);
    if ((Length & 0xFFFFFFFE) >= 0x3AuLL
      && ((int v8 = MutableBytePtr[20], v8 != 3) ? (v9 = v8 == 5) : (v9 = 1), v9))
    {
      if (*(unsigned __int8 *)(a1 + 160) == v8)
      {
        uint64_t CacheBlob = 0;
        *a2 = theData;
        return CacheBlob;
      }
      if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_11);
      }
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_27;
      }
      CFStringRef v10 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Different type chunk list cache found for \"%s\", size:%u, type:%u expected %u\n", v4, Length, MutableBytePtr[20], *(unsigned __int8 *)(a1 + 160));
      if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_18);
      }
      uint64_t v11 = CK_DEFAULT_LOG_INTERNAL_0;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_25;
      }
      *(_DWORD *)buf = 138543362;
      CFStringRef v15 = v10;
    }
    else
    {
      if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_0);
      }
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_27;
      }
      CFStringRef v10 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Invalid chunk list cache for \"%s\", size:%u, type:%u\n", v4, Length, MutableBytePtr[20]);
      if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_7);
      }
      uint64_t v11 = CK_DEFAULT_LOG_INTERNAL_0;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
      {
LABEL_25:
        if (v10) {
          CFRelease(v10);
        }
LABEL_27:
        uint64_t CacheBlob = 22;
        goto LABEL_28;
      }
      *(_DWORD *)buf = 138543362;
      CFStringRef v15 = v10;
    }
    _os_log_impl(&dword_215163000, v11, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
    goto LABEL_25;
  }
LABEL_28:
  if (theData) {
    CFRelease(theData);
  }
  return CacheBlob;
}

os_log_t __getChunkListCacheBlob_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __getChunkListCacheBlob_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __getChunkListCacheBlob_block_invoke_8()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __getChunkListCacheBlob_block_invoke_2_15()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

uint64_t setChunkListCacheBlob(uint64_t a1, CFMutableDataRef theData)
{
  uint64_t v2 = a1;
  if (theData)
  {
    MutableBytePtr = CFDataGetMutableBytePtr(theData);
    if ((CFDataGetLength(theData) & 0xFFFFFFFEuLL) <= 0x39) {
      setChunkListCacheBlob_cold_1();
    }
    int v5 = *(unsigned __int8 *)(v2 + 160);
    if (v5 != 3 && v5 != 5) {
      setChunkListCacheBlob_cold_2();
    }
    MutableBytePtr[20] = v5;
    a1 = v2;
    CFDataRef v7 = theData;
  }
  else
  {
    CFDataRef v7 = 0;
  }
  return setCacheBlob(a1, (uint64_t)"com.apple.cscache", v7);
}

uint64_t chunkItem(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t)a1;
  uint64_t v310 = *MEMORY[0x263EF8340];
  if (a2) {
    *a2 = 0;
  }
  uint64_t v3 = a1[2];
  uint64_t v4 = *(void *)(v3 + 8);
  CFTypeRef cf = 0;
  if (*(int *)v3 < 2)
  {
    int v5 = 0;
    uint64_t v6 = 0xFFFFFFFFLL;
    if (!a2) {
      goto LABEL_382;
    }
LABEL_381:
    *a2 = cf;
    goto LABEL_384;
  }
  v297 = a2;
  size_t v7 = a1[13];
  uint64_t v8 = a1[7];
  unsigned __int8 v9 = CKChunkDigestArgumentsChunkScheme(a1[19]);
  if (gVerbose == 2)
  {
    unsigned __int8 v10 = v9;
    if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_24);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG)
      && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
    {
      CFStringRef v11 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"\"%s\", hint:\"%s\", scheme:0x%x, size:%llu, fileID:0x%016llx(%llu), itemID:%lld", v7, *(void *)(v2 + 96), v10, *(void *)(v2 + 80), *(void *)(v2 + 40), *(void *)(v2 + 40), v8);
      if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_33);
      }
      unint64_t v12 = CK_DEFAULT_LOG_INTERNAL_0;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        *(void *)&uint8_t buf[4] = v11;
        _os_log_impl(&dword_215163000, v12, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      if (v11) {
        CFRelease(v11);
      }
    }
  }
  uint64_t v277 = v8;
  size_t __n = v7;
  uint64_t v300 = v3;
  int v13 = *(void (**)(uint64_t))(v3 + 32);
  if (v13) {
    v13(v4);
  }
  *(void *)v309 = 0;
  uint64_t v14 = *(void *)(v2 + 104);
  uint64_t v15 = *(unsigned int *)(v2 + 24);
  uint64_t v16 = *(void *)(v2 + 40);
  uint64_t v18 = *(void *)(v2 + 80);
  uint64_t v17 = *(void *)(v2 + 88);
  uint64_t v19 = 0;
  if (getenv("CS_DISABLE_CL_CACHE")) {
    goto LABEL_20;
  }
  uint64_t v19 = (const void **)malloc_type_calloc(1uLL, 0x20uLL, 0x10700401F352568uLL);
  if (!v19 || getChunkListCacheBlob(v2, (CFMutableDataRef *)v309)) {
    goto LABEL_20;
  }
  uint64_t v288 = v4;
  CFDataRef v86 = *(const __CFData **)v309;
  MutableBytePtr = CFDataGetMutableBytePtr(*(CFMutableDataRef *)v309);
  CFIndex v294 = CFDataGetLength(v86);
  if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_242);
  }
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
  {
    CFStringRef v88 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"generation:%u, mtime:%llu, ino:%llu, sz:%llu, fileSignatureSize:%u, chunkInfoSize:%u, chunkInfoCount:%u\n", *(unsigned int *)(MutableBytePtr + 21), *(void *)(MutableBytePtr + 25), *(void *)(MutableBytePtr + 33), *(void *)(MutableBytePtr + 41), *(unsigned __int16 *)(MutableBytePtr + 49), *(unsigned __int16 *)(MutableBytePtr + 51), *(unsigned int *)(MutableBytePtr + 53));
    CFTypeRef v89 = v19;
    if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_248);
    }
    v90 = CK_DEFAULT_LOG_INTERNAL_0;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138543362;
      *(void *)&uint8_t buf[4] = v88;
      _os_log_impl(&dword_215163000, v90, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
    }
    uint64_t v19 = v89;
    if (v88) {
      CFRelease(v88);
    }
  }
  if (v15 != *(_DWORD *)(MutableBytePtr + 21)
    || v17 != *(void *)(MutableBytePtr + 25)
    || v16 != *(void *)(MutableBytePtr + 33)
    || v18 != *(void *)(MutableBytePtr + 41))
  {
    if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_252);
    }
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v4 = v288;
      goto LABEL_20;
    }
    CFStringRef v95 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Invalid chunk cache for \"%s\", type:%u, mtime:%llu/%llu, ino:%llu/%llu, generation:%u/%u, sz:%llu/%llu, chunkInfoCount:%u\n", v14, MutableBytePtr[20], *(void *)(MutableBytePtr + 25), v17, *(void *)(MutableBytePtr + 33), v16, *(unsigned int *)(MutableBytePtr + 21), v15, *(void *)(MutableBytePtr + 41), v18, *(unsigned int *)(MutableBytePtr + 53));
    if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_259);
    }
    uint64_t v100 = CK_DEFAULT_LOG_INTERNAL_0;
    uint64_t v4 = v288;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138543362;
      *(void *)&uint8_t buf[4] = v95;
      long long v101 = v100;
      os_log_type_t v102 = OS_LOG_TYPE_DEBUG;
LABEL_234:
      _os_log_impl(&dword_215163000, v101, v102, "%{public}@", buf, 0xCu);
      goto LABEL_235;
    }
    goto LABEL_235;
  }
  v299 = v19;
  int v91 = CKFileDigestArgumentsFileScheme(*(void *)(v2 + 144));
  LOBYTE(v305) = 0;
  LOBYTE(v305) = CKFileDigestArgumentsFileSchemeByte(*(void *)(v2 + 144));
  unint64_t v92 = *(unsigned __int16 *)(MutableBytePtr + 49);
  if (*(_WORD *)(MutableBytePtr + 49))
  {
    if (CKFileSignatureSize(&v305) > v92 || (unsigned int v93 = v92 + 57, (int)v92 + 57 > v294))
    {
      if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_263);
      }
      uint64_t v4 = v288;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR)) {
        goto LABEL_547;
      }
      CFStringRef v95 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Invalid file signature size for \"%s\", %u/%u\n", v14, v92, v294);
      if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_270);
      }
      uint64_t v96 = CK_DEFAULT_LOG_INTERNAL_0;
      uint64_t v19 = v299;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        *(void *)&uint8_t buf[4] = v95;
        goto LABEL_317;
      }
LABEL_235:
      if (v95) {
        CFRelease(v95);
      }
      goto LABEL_20;
    }
    CFTypeRef v94 = MutableBytePtr + 57;
    if (v91 != (MutableBytePtr[57] & 0x7F))
    {
      if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_274);
      }
      uint64_t v4 = v288;
      uint64_t v19 = v299;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR)) {
        goto LABEL_20;
      }
      CFStringRef v95 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Invalid file signature scheme for \"%s\": 0x%x\n", v14, *v94);
      if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_281);
      }
      uint64_t v96 = CK_DEFAULT_LOG_INTERNAL_0;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR)) {
        goto LABEL_235;
      }
      *(_DWORD *)buf = 138543362;
      *(void *)&uint8_t buf[4] = v95;
      goto LABEL_317;
    }
  }
  else
  {
    CFTypeRef v94 = 0;
    unsigned int v93 = 57;
  }
  uint64_t v112 = *(unsigned __int16 *)(MutableBytePtr + 51);
  uint64_t v113 = *(unsigned int *)(MutableBytePtr + 53);
  if (v112 < 5
    || !v113
    || ((v113 * (unint64_t)*(unsigned __int16 *)(MutableBytePtr + 51)) & 0xFFFFFFFF00000000) != 0
    || __CFADD__(v113 * v112, v93)
    || v113 * v112 + v93 > v294)
  {
    if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_285);
    }
    uint64_t v4 = v288;
    uint64_t v19 = v299;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR)) {
      goto LABEL_20;
    }
    CFStringRef v95 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Invalid chunk info size/count for \"%s\", %u/%u/%u\n", v14, v113, v112, v294);
    if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_292);
    }
    uint64_t v96 = CK_DEFAULT_LOG_INTERNAL_0;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      *(void *)&uint8_t buf[4] = v95;
LABEL_317:
      long long v101 = v96;
      os_log_type_t v102 = OS_LOG_TYPE_ERROR;
      goto LABEL_234;
    }
    goto LABEL_235;
  }
  uint64_t v291 = *(unsigned int *)(MutableBytePtr + 53);
  CFAllocatorRef alloca = (CFAllocatorRef)v94;
  int v163 = 0;
  uint64_t v265 = 0;
  uint64_t v164 = 0;
  __dsta = &MutableBytePtr[v93];
  v165 = &MutableBytePtr[v92];
  unint64_t v166 = (v112 - 4);
  v167 = (char *)(v165 + 61);
  v283 = (char *)(v166 + 4);
  CFIndex lengthb = v166;
  do
  {
    uint64_t v168 = CKChunkSchemeAndSignatureSize(v167);
    if (v168 - 1 >= v166)
    {
LABEL_546:
      uint64_t v4 = v288;
LABEL_547:
      uint64_t v19 = v299;
      goto LABEL_20;
    }
    if (*v167 < 0)
    {
      if (v166 == v168) {
        goto LABEL_546;
      }
      v169 = &v167[v168];
      int v170 = v167[v168];
      BOOL v171 = v170 == 4 || v170 == 1;
      if (!v171 || lengthb - v168 != CKChunkSchemeAndEncryptionKeySize((unsigned __int8 *)&v167[v168])) {
        goto LABEL_546;
      }
      if (v163)
      {
        if (v164 != *v167) {
          goto LABEL_546;
        }
        int v172 = *v169;
        unint64_t v166 = lengthb;
        if (v265 != v172) {
          goto LABEL_546;
        }
      }
      else
      {
        uint64_t v265 = *v169;
        uint64_t v164 = *v167;
        unint64_t v166 = lengthb;
      }
    }
    else if (v163)
    {
      if (v164 != *v167) {
        goto LABEL_546;
      }
    }
    else
    {
      uint64_t v164 = *v167;
    }
    ++v163;
    v167 = &v283[(void)v167];
  }
  while (v291 != v163);
  if ((v164 & 0x7F) == 1 || (v164 & 0x7F) == 4)
  {
    if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_308);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
    {
      CFStringRef v174 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Found chunk list cache \"%s\" for \"%s\", blobSize:%u, chunkInfoCount:%u, sz:%llu, ino:%llu, mtime:%llu, generation:%u\n", "com.apple.cscache", v14, v294, v291, v18, v16, *(void *)(MutableBytePtr + 25), *(unsigned int *)(MutableBytePtr + 21));
      if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_315);
      }
      v175 = CK_DEFAULT_LOG_INTERNAL_0;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        *(void *)&uint8_t buf[4] = v174;
        _os_log_impl(&dword_215163000, v175, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      if (v174) {
        CFRelease(v174);
      }
    }
    v299[1] = alloca;
    v299[2] = __dsta;
    *((unsigned char *)v299 + 24) = v164;
    *((unsigned char *)v299 + 25) = v265;
    *v299 = *(const void **)v309;
    freeChunkListCacheInfo(0);
    *(void *)v309 = 0;
    CFTypeRef v305 = 0;
    if (!*v299) {
      chunkItem_cold_5();
    }
    unsigned int v284 = *(_DWORD *)(v2 + 36);
    uint64_t v292 = *(void *)(v2 + 104);
    uint64_t v296 = *(unsigned __int8 *)(v2 + 179);
    uint64_t v176 = *(void *)(v2 + 136);
    BytePtr = CFDataGetBytePtr((CFDataRef)*v299);
    if (*(void *)(v176 + 8)) {
      chunkItem_cold_9();
    }
    if (*(void *)(v2 + 440)) {
      chunkItem_cold_8();
    }
    if (*(void *)(v2 + 424)) {
      chunkItem_cold_7();
    }
    v178 = BytePtr;
    unsigned int v179 = CKChunkDigestArgumentsChunkSchemeByte(*(void *)(v2 + 152));
    unsigned __int8 v304 = v179;
    unsigned __int8 v303 = CKChunkDigestArgumentsChunkEncryptionKeyScheme(*(void *)(v2 + 152));
    if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_322);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
    {
      CFStringRef v180 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Using cache \"%s\" for \"%s\", ino:%llu, (0x%x/%u/%u)\n", "com.apple.cscache", v292, *(void *)(v2 + 40), v179, v296, *(void *)(v2 + 192) != 0);
      if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_328);
      }
      v181 = CK_DEFAULT_LOG_INTERNAL_0;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        *(void *)&uint8_t buf[4] = v180;
        _os_log_impl(&dword_215163000, v181, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      if (v180) {
        CFRelease(v180);
      }
    }
    if (((v304 ^ *((unsigned char *)v299 + 24)) & 0x7F) != 0 || ((_BYTE)v299[3] & 0x80) == 0 && (char)v304 < 0)
    {
      if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_332);
      }
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_509;
      }
      CFStringRef v182 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Signature scheme mismatch: 0x%x/0x%x\n", *((unsigned __int8 *)v299 + 24), v304);
      if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_339_0);
      }
      v183 = CK_DEFAULT_LOG_INTERNAL_0;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_507;
      }
      *(_DWORD *)buf = 138543362;
      *(void *)&uint8_t buf[4] = v182;
      goto LABEL_506;
    }
    if ((v304 & (_BYTE)v299[3] & 0x80) != 0 && *((unsigned __int8 *)v299 + 25) != v303)
    {
      if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_343);
      }
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_509;
      }
      CFStringRef v182 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Key scheme mismatch: 0x%x/0x%x\n", *((unsigned __int8 *)v299 + 25), v303);
      if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_350_0);
      }
      v183 = CK_DEFAULT_LOG_INTERNAL_0;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_507;
      }
      *(_DWORD *)buf = 138543362;
      *(void *)&uint8_t buf[4] = v182;
LABEL_506:
      _os_log_impl(&dword_215163000, v183, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
LABEL_507:
      if (v182) {
        CFRelease(v182);
      }
      goto LABEL_509;
    }
    uint64_t v206 = *(void *)(v2 + 144);
    if (v206)
    {
      v207 = (unsigned __int8 *)v299[1];
      if (v207)
      {
        int v208 = *v207;
        if (v208 != CKFileDigestArgumentsFileSchemeByte(v206))
        {
          if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_354);
          }
          if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_509;
          }
          CFAllocatorRef v210 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
          uint64_t v211 = *(unsigned __int8 *)v299[1];
          unsigned int v212 = CKFileDigestArgumentsFileSchemeByte(*(void *)(v2 + 144));
          CFStringRef v182 = CFStringCreateWithFormat(v210, 0, @"File signature mismatch: 0x%x/0x%x\n", v211, v212);
          if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_361_0);
          }
          v183 = CK_DEFAULT_LOG_INTERNAL_0;
          if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_507;
          }
          *(_DWORD *)buf = 138543362;
          *(void *)&uint8_t buf[4] = v182;
          goto LABEL_506;
        }
      }
    }
    v209 = v299[1];
    if (v296)
    {
      if (!v209 || *(_DWORD *)(v2 + 216))
      {
LABEL_509:
        uint64_t v6 = 0xFFFFFFFFLL;
        goto LABEL_510;
      }
    }
    else if (!v209)
    {
      BOOL v254 = *(void *)(v2 + 192) != 0;
LABEL_608:
      unint64_t v213 = *(unsigned __int16 *)(v178 + 51);
      if (v213 <= 4) {
        chunkItem_cold_6();
      }
      uint64_t v267 = *(unsigned int *)(v178 + 53);
      if (v267)
      {
        ptrc = 0;
        CFIndex lengthd = 0;
        size_t v251 = 0;
        uint64_t v214 = 0;
        uint64_t v215 = (v213 - 4);
        int v216 = v254;
        if (!v296) {
          int v216 = 1;
        }
        int allocc = v216;
        CFAllocatorRef v250 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        uint64_t v217 = (uint64_t)v299[2] + 6;
        uint64_t v256 = v215 + 4;
        while (1)
        {
          unint64_t v218 = *(unsigned int *)(v217 - 6);
          if (!allocc) {
            goto LABEL_637;
          }
          if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_366);
          }
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
          {
            CFStringRef v219 = CFStringCreateWithFormat(v250, 0, @"Reading chunk, o:0x%llx, size:0x%x\n", v214, v218);
            if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_373);
            }
            v220 = CK_DEFAULT_LOG_INTERNAL_0;
            if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 138543362;
              *(void *)&uint8_t buf[4] = v219;
              _os_log_impl(&dword_215163000, v220, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
            }
            if (v219) {
              CFRelease(v219);
            }
          }
          if (v218 && v251 < v218)
          {
            if (v218 <= 0x8000) {
              size_t v221 = 0x8000;
            }
            else {
              size_t v221 = v218;
            }
            size_t v251 = v221;
            v222 = malloc_type_realloc(ptrc, v221, 0xBDAFF736uLL);
            if (!v222)
            {
              uint64_t v6 = 0xFFFFFFFFLL;
LABEL_666:
              v222 = ptrc;
              goto LABEL_667;
            }
          }
          else
          {
            v222 = ptrc;
          }
          uint64_t v302 = 0;
          if (!readOpCtx((void *)v2, v214, (uint64_t)v222, v218, (uint64_t)&v302)) {
            goto LABEL_645;
          }
          if (v218 != v302)
          {
            if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_377);
            }
            if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
            {
              CFStringRef v229 = CFStringCreateWithFormat(v250, 0, @"Failed to read chunk bytes: %u != %u\n", v218, v302);
              if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
                dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_384);
              }
              v230 = CK_DEFAULT_LOG_INTERNAL_0;
              if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138543362;
                *(void *)&uint8_t buf[4] = v229;
                _os_log_impl(&dword_215163000, v230, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
              }
              if (v229) {
                CFRelease(v229);
              }
            }
            goto LABEL_645;
          }
          if (v254) {
            CKFileSignatureGeneratorUpdate(*(void *)(v2 + 192));
          }
          if (v296) {
            break;
          }
          *(unsigned char *)(v176 + 25) = 1;
          ptrc = v222;
          *(void *)uint64_t v176 = v284;
LABEL_638:
          uint64_t v223 = *(void *)(v2 + 440);
          *(void *)(v2 + 440) = v223 + 1;
          *(void *)(v176 + 8) = v222;
          *(void *)(v176 + 16) = v223;
          *(_DWORD *)(v176 + 80) = v218;
          *(void *)(v176 + 72) = v214;
          *(unsigned char *)(v176 + 84) = v304;
          size_t v224 = CKChunkSignatureSize(&v304);
          memcpy((void *)(v176 + 85), (const void *)(v217 - 1), v224);
          if ((char)v304 < 0)
          {
            *(unsigned char *)(v176 + v224 + 85) = v303;
            size_t v225 = CKChunkEncryptionKeySize(&v303);
            memcpy((void *)(v176 + v224 + 86), (const void *)(v217 + v224), v225);
          }
          *(void *)(v2 + 424) += v218;
          uint64_t v226 = (*(uint64_t (**)(void))(v2 + 128))();
          if (v226)
          {
            uint64_t v6 = v226;
            if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_388);
            }
            if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
            {
              CFStringRef v227 = CFStringCreateWithFormat(v250, 0, @"callback failed for chunk %u: %d\n", lengthd, v6);
              if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
                dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_395);
              }
              v228 = CK_DEFAULT_LOG_INTERNAL_0;
              if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138543362;
                *(void *)&uint8_t buf[4] = v227;
                _os_log_impl(&dword_215163000, v228, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
              }
              if (v227) {
                CFRelease(v227);
              }
            }
            goto LABEL_666;
          }
          v214 += v218;
          v217 += v256;
          CFIndex lengthd = (lengthd + 1);
          if (v267 == lengthd)
          {
            uint64_t v6 = 0xFFFFFFFFLL;
            goto LABEL_668;
          }
        }
        ptrc = v222;
LABEL_637:
        v222 = 0;
        *(void *)uint64_t v176 = *(void *)(v2 + 56);
        goto LABEL_638;
      }
      uint64_t v214 = 0;
      LODWORD(lengthd) = 0;
      v222 = 0;
LABEL_645:
      uint64_t v6 = 0xFFFFFFFFLL;
LABEL_667:
      ptrc = v222;
      if (lengthd == v267)
      {
LABEL_668:
        uint64_t v231 = *(void *)(v2 + 192);
        if (v254)
        {
          int v232 = CKFileSignatureGeneratorFinish(v231);
          v233 = *(const void **)(v2 + 192);
          if (v233) {
            CFRelease(v233);
          }
          *(void *)(v2 + 192) = 0;
          if (!v232) {
            goto LABEL_690;
          }
          goto LABEL_676;
        }
        if (!v231) {
          goto LABEL_676;
        }
        v234 = v299[1];
        if ((*v234 & 0x7F) != 1)
        {
          if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_399);
          }
          if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_690;
          }
          CFStringRef v240 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"cache file signature not supported\n");
          if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_406);
          }
          v241 = CK_DEFAULT_LOG_INTERNAL_0;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 138543362;
            *(void *)&uint8_t buf[4] = v240;
            _os_log_impl(&dword_215163000, v241, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
          }
          if (!v240) {
            goto LABEL_690;
          }
          CFStringRef v242 = v240;
LABEL_717:
          CFRelease(v242);
          goto LABEL_690;
        }
        if (CKFileDigestResultsCreate(&v305, v234, v214, 0))
        {
LABEL_676:
          if (!v296
            || !v305
            || (uint64_t v235 = *(void *)(v2 + 200)) == 0
            || CKFileDigestResultsEqual((uint64_t)v305, v235))
          {
            if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_424_0);
            }
            if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
            {
              CFStringRef v236 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Found %u chunks for \"%s\", ino:%llu\n", v267, v292, *(void *)(v2 + 40));
              if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
                dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_431);
              }
              v237 = CK_DEFAULT_LOG_INTERNAL_0;
              if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 138543362;
                *(void *)&uint8_t buf[4] = v236;
                _os_log_impl(&dword_215163000, v237, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
              }
              if (v236) {
                CFRelease(v236);
              }
            }
            v238 = *(uint64_t (**)(uint64_t))(v2 + 128);
            uint64_t v239 = *(void *)(v2 + 136);
            *(void *)(v2 + 136) = 0;
            uint64_t v6 = v238(v2);
            *(void *)(v2 + 136) = v239;
            goto LABEL_690;
          }
          CFStringRef v243 = CFCopyDescription(v305);
          CFStringRef v244 = CFCopyDescription(*(CFTypeRef *)(v2 + 200));
          if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_410);
          }
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
          {
            CFStringRef v245 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"file signature mismatch for %lld item has %@ != %@ for the chunk store", *(void *)(v2 + 56), v243, v244);
            if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_417_0);
            }
            v246 = CK_DEFAULT_LOG_INTERNAL_0;
            if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138543362;
              *(void *)&uint8_t buf[4] = v245;
              _os_log_impl(&dword_215163000, v246, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
            }
            if (v245) {
              CFRelease(v245);
            }
          }
          *(void *)v309 = CKErrorCreateWithFormat(3, @"The file signature changed: from %@ on the item to %@ registered in the chunk store for item %lld. Perhaps the item should be unregistered.", v243, v244, *(void *)(v2 + 56));
          if (v243) {
            CFRelease(v243);
          }
          if (!v244) {
            goto LABEL_690;
          }
          CFStringRef v242 = v244;
          goto LABEL_717;
        }
      }
LABEL_690:
      if (ptrc) {
        free(ptrc);
      }
      CFTypeRef v184 = v305;
      if (v6 || !v305) {
        goto LABEL_511;
      }
      setOpCtxFileDigestResults(v2, v305);
      uint64_t v6 = 0;
LABEL_510:
      CFTypeRef v184 = v305;
LABEL_511:
      if (v184) {
        CFRelease(v184);
      }
      CFTypeRef v305 = 0;
      *(void *)(v176 + 8) = 0;
      if (*(void *)v309) {
        CFRelease(*(CFTypeRef *)v309);
      }
      if (!v6)
      {
        uint64_t v4 = v288;
        uint64_t v3 = v300;
        goto LABEL_378;
      }
      uint64_t v4 = v288;
      uint64_t v3 = v300;
      goto LABEL_23;
    }
    BOOL v254 = 0;
    goto LABEL_608;
  }
  if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_297);
  }
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
  {
    CFStringRef v95 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Invalid chunk signature/key scheme for \"%s\": 0x%x/0x%x\n", v14, v164, v265);
    if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_304);
    }
    v205 = CK_DEFAULT_LOG_INTERNAL_0;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      *(void *)&uint8_t buf[4] = v95;
      _os_log_impl(&dword_215163000, v205, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    uint64_t v4 = v288;
    uint64_t v19 = v299;
    goto LABEL_235;
  }
  uint64_t v4 = v288;
  uint64_t v19 = v299;
LABEL_20:
  if (*(void *)v309) {
    CFRelease(*(CFTypeRef *)v309);
  }
  freeChunkListCacheInfo(v19);
  v299 = 0;
  uint64_t v6 = 0xFFFFFFFFLL;
  uint64_t v3 = v300;
LABEL_23:
  if (gVerbose == 2)
  {
    if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_37_0);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG)
      && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
    {
      CFStringRef v20 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Chunking \"%s\"", __n);
      if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_48_0);
      }
      BOOL v21 = CK_DEFAULT_LOG_INTERNAL_0;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        *(void *)&uint8_t buf[4] = v20;
        _os_log_impl(&dword_215163000, v21, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      if (v20) {
        CFRelease(v20);
      }
    }
  }
  int ChunkProfile = createChunkProfile(v2, (uint64_t **)(v2 + 256), (uint64_t *)(v2 + 240));
  *(_DWORD *)(v2 + 248) = ChunkProfile;
  if (!ChunkProfile)
  {
    if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_52);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v97 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Not chunking \"%s\" - no chunking profile!\n", __n);
      if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_59);
      }
      long long v98 = CK_DEFAULT_LOG_INTERNAL_0;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        *(void *)&uint8_t buf[4] = v97;
        _os_log_impl(&dword_215163000, v98, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v97) {
        CFRelease(v97);
      }
    }
    goto LABEL_380;
  }
  CFTypeRef cf = 0;
  clearChunksArray(v2 + 264);
  clearChunksArray(v2 + 264);
  *(void *)(v2 + 440) = 0;
  *(void *)(v2 + 472) = 0;
  *(void *)(v2 + 64) = 0;
  clearOpCtxError(v2);
  CFTypeRef v23 = getenv("CHUNK_BUFFER_LENGTH");
  if (!v23) {
    goto LABEL_46;
  }
  uint64_t v24 = v23;
  int64_t v25 = strtoll(v23, 0, 0);
  if (v25 < 0x8000)
  {
    if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_538);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEFAULT))
    {
      CFStringRef v26 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Unable to use env value %s for CHUNK_BUFFER_LENGTH. Parsed %lld and the minimum is %d. Using default value %lu\n", v24, v25, 0x8000, 0x8000);
      if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_544);
      }
      long long v27 = CK_DEFAULT_LOG_INTERNAL_0;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138543362;
        *(void *)&uint8_t buf[4] = v26;
        _os_log_impl(&dword_215163000, v27, OS_LOG_TYPE_DEFAULT, "%{public}@", buf, 0xCu);
      }
      if (v26) {
        CFRelease(v26);
      }
    }
LABEL_46:
    int64_t v25 = 0x8000;
  }
  long long v28 = (char *)malloc_type_malloc(v25, 0xFCE68BDDuLL);
  uint64_t v287 = v4;
  if (!v28)
  {
    int v99 = 0;
    int v30 = 0;
LABEL_330:
    uint64_t v6 = 0xFFFFFFFFLL;
    goto LABEL_331;
  }
  long long v29 = CSrabin_init();
  int v30 = v29;
  if (!v29)
  {
LABEL_298:
    int v99 = 0;
    goto LABEL_330;
  }
  *(_DWORD *)(v2 + 252) = 0;
  if (!*(_DWORD *)(v2 + 248))
  {
    LOBYTE(v31) = 0;
LABEL_226:
    uint64_t v6 = 0;
    int v99 = v31 & 1;
    goto LABEL_332;
  }
  uint64_t v31 = 0;
  CFIndex length = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  BOOL v34 = 0;
  CFIndex v35 = 0;
  CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  uint64_t v293 = (uint64_t)v29;
  int64_t v264 = v25;
  while (1)
  {
    if (v34 && v35 <= length)
    {
      int v99 = v31 & 1;
      if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_516);
      }
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
      {
        CFStringRef v107 = CFStringCreateWithFormat(alloc, 0, @"not all sections chunked before eof reached\n");
        if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_523);
        }
        long long v108 = CK_DEFAULT_LOG_INTERNAL_0;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          *(void *)&uint8_t buf[4] = v107;
          _os_log_impl(&dword_215163000, v108, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
        }
        if (v107) {
          CFRelease(v107);
        }
      }
      uint64_t v6 = 0;
      goto LABEL_332;
    }
    if (getOpCtxSectionLengthAtIndex(v2, v33)) {
      break;
    }
    if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_437);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
    {
      BOOL v289 = v34;
      uint64_t v252 = v31;
      CFStringRef v37 = CFStringCreateWithFormat(alloc, 0, @"Skipping zero length section %u.\n", *(unsigned int *)(v2 + 252));
      uint64_t v38 = v32;
      if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_443_0);
      }
      int v39 = CK_DEFAULT_LOG_INTERNAL_0;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        *(void *)&uint8_t buf[4] = v37;
        _os_log_impl(&dword_215163000, v39, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      if (v37) {
        CFRelease(v37);
      }
      uint64_t v32 = v38;
      uint64_t v31 = v252;
LABEL_67:
      BOOL v34 = v289;
    }
    unsigned int v40 = *(_DWORD *)(v2 + 248);
    uint64_t v33 = (*(_DWORD *)(v2 + 252) + 1);
    *(_DWORD *)(v2 + 252) = v33;
    if (v33 >= v40) {
      goto LABEL_226;
    }
  }
  uint64_t v36 = *(void *)(v2 + 256) + 56 * *(unsigned int *)(v2 + 252);
  uint64_t v31 = *(unsigned __int8 *)(v36 + 52);
  BOOL v255 = *(unsigned char *)(v36 + 52) != 0;
  if (*(unsigned char *)(v36 + 52))
  {
    if (!_SetSourceChunk(v2, v32)) {
      goto LABEL_73;
    }
    goto LABEL_255;
  }
  uint64_t v41 = *(unsigned __int8 *)(v36 + 52);
  CFIndex v42 = v35 - length;
  if (v35 > length)
  {
    memmove(v28, &v28[length], v35 - length);
    CFIndex length = 0;
    CFIndex v35 = v42;
  }
  uint64_t v31 = v41;
LABEL_73:
  while (2)
  {
    int64_t v43 = v35;
    while (2)
    {
      int64_t v44 = v43;
      if (v25 < (unint64_t)v43)
      {
        if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_550);
        }
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR)) {
          goto LABEL_323;
        }
        CFStringRef v103 = CFStringCreateWithFormat(alloc, 0, @"overflow; buffer length: %lu producer location %lu\n",
                 v25,
                 v43);
        if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_556);
        }
        long long v104 = CK_DEFAULT_LOG_INTERNAL_0;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          *(void *)&uint8_t buf[4] = v103;
          _os_log_impl(&dword_215163000, v104, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
        }
        if (v103) {
          CFRelease(v103);
        }
LABEL_321:
        if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_447);
        }
LABEL_323:
        uint64_t v3 = v300;
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v6 = 0xFFFFFFFFLL;
          goto LABEL_388;
        }
        CFStringRef v105 = CFStringCreateWithFormat(alloc, 0, @"CSchunklist_streamRead failed\n");
        if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_454);
        }
        v115 = CK_DEFAULT_LOG_INTERNAL_0;
        int v99 = v255;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138543362;
          *(void *)&uint8_t buf[4] = v105;
          _os_log_impl(&dword_215163000, v115, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
        }
LABEL_328:
        if (v105) {
          CFRelease(v105);
        }
        goto LABEL_330;
      }
      BOOL v289 = v25 != v43;
      if (v25 != v43)
      {
        *(void *)buf = 0;
        if ((readOpCtx((void *)v2, *(void *)(v2 + 64), (uint64_t)&v28[v43], v25 - v43, (uint64_t)buf) & 1) == 0) {
          goto LABEL_321;
        }
        uint64_t v45 = *(void *)buf;
        v43 += *(void *)buf;
        *(void *)(v2 + 64) += *(void *)buf;
        if (!v45) {
          goto LABEL_80;
        }
        continue;
      }
      break;
    }
    int64_t v43 = v25;
LABEL_80:
    uint64_t v46 = *(void *)(v2 + 192);
    if (v46) {
      BOOL v47 = v43 <= v35;
    }
    else {
      BOOL v47 = 1;
    }
    if (!v47 && !CKFileSignatureGeneratorUpdate(v46))
    {
      v114 = *(const void **)(v2 + 192);
      if (v114) {
        CFRelease(v114);
      }
      *(void *)(v2 + 192) = 0;
      goto LABEL_321;
    }
    uint64_t v253 = v31;
    __dst = v28;
    if (v31)
    {
      int64_t v48 = v43 - length;
      ptr = (void *)v32;
      uint64_t v49 = v32;
      if (v43 - length < 1
        || (uint64_t v50 = (uint64_t *)(*(void *)(v2 + 256) + 56 * *(unsigned int *)(v2 + 252)),
            uint64_t v51 = *v50,
            uint64_t v49 = v32,
            *v50 <= v32))
      {
LABEL_161:
        if (v49 - (uint64_t)ptr >= 0)
        {
          uint64_t v59 = v49 - (void)ptr + length;
          uint64_t v32 = v49;
          long long v28 = __dst;
          int v30 = (void *)v293;
          int64_t v25 = v264;
          goto LABEL_163;
        }
      }
      else
      {
        uint64_t v49 = v32;
        CFAllocatorRef v249 = (CFAllocatorRef)&__dst[length];
        CFTypeRef v281 = (CFTypeRef)v50[3];
        int64_t v52 = v43 - length;
        uint64_t v247 = *(void *)(v2 + 136);
        uint64_t v248 = v50[1];
        while (1)
        {
          CFStringRef v53 = (char *)v249 + v48 - v52;
          int64_t v54 = v248 - *(unsigned int *)(v247 + 80);
          if (v51 - v49 < v54) {
            break;
          }
          uint64_t v55 = v52 - v54;
          if (v52 < v54)
          {
            if (v281 && CSfixed_subchunk_stream(v2, (uint64_t)v249 + v48 - v52, v52, (unint64_t)v281, 0)) {
              goto LABEL_247;
            }
            goto LABEL_159;
          }
          if (v281 && CSfixed_subchunk_stream(v2, (uint64_t)v249 + v48 - v52, v54, (unint64_t)v281, 1)) {
            goto LABEL_247;
          }
          if (CS_fixed_chunk_stream_accumulate(v2, v53, v54)) {
            goto LABEL_247;
          }
          if (CSchunklist_add_stream(v2)) {
            goto LABEL_247;
          }
          v49 += v54;
          _ClearSourceChunk(v2);
          if (_SetSourceChunk(v2, v49)) {
            goto LABEL_247;
          }
          if (v49 < v51)
          {
            v52 -= v54;
            if (v55 > 0) {
              continue;
            }
          }
          goto LABEL_161;
        }
        if (v52 < v51 - v49)
        {
LABEL_159:
          if (CS_fixed_chunk_stream_accumulate(v2, v53, v52)) {
            goto LABEL_247;
          }
          v49 += v52;
          goto LABEL_161;
        }
        if ((!v281 || !CSfixed_subchunk_stream(v2, (uint64_t)v249 + v48 - v52, v51 - v49, (unint64_t)v281, 1))
          && !CS_fixed_chunk_stream_accumulate(v2, v53, v51 - v49)
          && !CSchunklist_add_stream(v2))
        {
          _ClearSourceChunk(v2);
          uint64_t v49 = v51;
          if (!_SetSourceChunk(v2, v51)) {
            goto LABEL_161;
          }
        }
      }
LABEL_247:
      if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_458);
      }
      uint64_t v3 = v300;
      long long v28 = __dst;
      int v30 = (void *)v293;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
      {
        CFStringRef v105 = CFStringCreateWithFormat(alloc, 0, @"CSfixed_chunk_stream failed\n");
        if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_465);
        }
        long long v106 = CK_DEFAULT_LOG_INTERNAL_0;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          *(void *)&uint8_t buf[4] = v105;
          _os_log_impl(&dword_215163000, v106, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
        }
        int v99 = 1;
        goto LABEL_328;
      }
LABEL_255:
      uint64_t v6 = 0xFFFFFFFFLL;
      int v99 = 1;
      goto LABEL_331;
    }
    uint64_t v56 = *(void *)(v2 + 256);
    uint64_t v57 = *(unsigned int *)(v2 + 252);
    uint64_t v58 = *(unsigned int *)(v56 + 56 * v57 + 16);
    uint64_t v59 = length;
    uint64_t v263 = v2;
    while (2)
    {
      uint64_t v60 = v43 - v59;
      if (v25 == v44 && v60 < v58)
      {
        if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_469);
        }
        uint64_t v3 = v300;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
        {
          CFStringRef v105 = CFStringCreateWithFormat(alloc, 0, @"under-read for rabin chunking; only read %lld bytes and not at EOF\n",
                   v60);
          if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_476);
          }
          long long v109 = CK_DEFAULT_LOG_INTERNAL_0;
          if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR)) {
            goto LABEL_297;
          }
          *(_DWORD *)buf = 138543362;
          *(void *)&uint8_t buf[4] = v105;
          goto LABEL_296;
        }
        goto LABEL_298;
      }
      if (v43 == v59)
      {
        if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_480);
        }
        uint64_t v3 = v300;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
        {
          CFStringRef v105 = CFStringCreateWithFormat(alloc, 0, @"At EOF and zero bytes left. We should be done by now. Chunk profile inconsistent?\n");
          if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_487);
          }
          long long v109 = CK_DEFAULT_LOG_INTERNAL_0;
          if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR)) {
            goto LABEL_297;
          }
          *(_DWORD *)buf = 138543362;
          *(void *)&uint8_t buf[4] = v105;
          goto LABEL_296;
        }
        goto LABEL_298;
      }
      uint64_t v61 = v56 + 56 * v57;
      if (*(void *)v61 < v32)
      {
        if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_638);
        }
        uint64_t v3 = v300;
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
        {
LABEL_291:
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
          {
            CFStringRef v105 = CFStringCreateWithFormat(alloc, 0, @"CSrabin_chunk_stream failed\n");
            if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_498_0);
            }
            long long v109 = CK_DEFAULT_LOG_INTERNAL_0;
            if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR)) {
              goto LABEL_297;
            }
            *(_DWORD *)buf = 138543362;
            *(void *)&uint8_t buf[4] = v105;
LABEL_296:
            _os_log_impl(&dword_215163000, v109, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
LABEL_297:
            int v99 = 0;
            goto LABEL_328;
          }
          goto LABEL_298;
        }
        CFStringRef v110 = CFStringCreateWithFormat(alloc, 0, @"File offset is already great than sectionEnd. Shouldn't we be in a different section?\n");
        if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_644);
        }
        v111 = CK_DEFAULT_LOG_INTERNAL_0;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          *(void *)&uint8_t buf[4] = v110;
          _os_log_impl(&dword_215163000, v111, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
        }
        if (v110) {
          CFRelease(v110);
        }
LABEL_289:
        uint64_t v3 = v300;
        if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_491);
        }
        goto LABEL_291;
      }
      ptra = (char *)v32;
      CFIndex lengtha = v59;
      unint64_t v62 = *(unsigned int *)(v61 + 12);
      uint64_t v63 = (v62 - 48);
      if (*(void *)v61 - v32 >= v60) {
        uint64_t v64 = v43 - v59;
      }
      else {
        uint64_t v64 = *(void *)v61 - v32;
      }
      if (v64 <= v63)
      {
        CSchunklist_add(v2, *(void *)(v2 + 440), v32, (uint64_t)&v28[v59], v64);
        int v30 = (void *)v293;
        if (!v73)
        {
          ++*(void *)(v2 + 440);
          uint64_t v71 = v64;
          goto LABEL_144;
        }
        goto LABEL_289;
      }
      v282 = &v28[v59];
      unint64_t v65 = *(unsigned int *)(v61 + 16);
      if (*(unsigned char *)(v2 + 183)) {
        *(void *)(v2 + 464) = mach_absolute_time();
      }
      uint64_t v66 = 0;
      uint64_t v67 = (v62 - 47);
      BOOL v68 = 1;
      while (1)
      {
        __int16 v69 = CSrabin_slide8(v293, v282[v63]);
        uint64_t v70 = v63 + 1;
        if (v63 + 1 >= v62) {
          break;
        }
LABEL_116:
        BOOL v68 = v70 < v64;
        uint64_t v67 = (v67 + 1);
        ++v63;
        if (v64 == v70)
        {
          uint64_t v71 = 0;
          long long v28 = __dst;
          int v30 = (void *)v293;
          uint64_t v72 = (uint64_t)v282;
          uint64_t v2 = v263;
          goto LABEL_137;
        }
      }
      if ((~v69 & 0x7FF) == 0)
      {
        uint64_t v2 = v263;
        if (*(unsigned char *)(v263 + 183)) {
          *(void *)(v263 + 472) += mach_absolute_time() - *(void *)(v263 + 464);
        }
        CSchunklist_add(v263, *(void *)(v263 + 440), (uint64_t)ptra, (uint64_t)v282, v67);
        long long v28 = __dst;
        int v30 = (void *)v293;
        if (v74) {
          goto LABEL_289;
        }
        goto LABEL_134;
      }
      if ((~v69 & 0x3FF) == 0) {
        uint64_t v66 = v63;
      }
      if (v70 < v65) {
        goto LABEL_116;
      }
      long long v28 = __dst;
      int v30 = (void *)v293;
      if (v66 < 1)
      {
        uint64_t v2 = v263;
        if (*(unsigned char *)(v263 + 183)) {
          *(void *)(v263 + 472) += mach_absolute_time() - *(void *)(v263 + 464);
        }
        if (*(unsigned char *)(v263 + 181)) {
          ++*(void *)(v263 + 448);
        }
        CSchunklist_add(v263, *(void *)(v263 + 440), (uint64_t)ptra, (uint64_t)v282, v67);
        if (v76) {
          goto LABEL_289;
        }
LABEL_134:
        uint64_t v71 = v63 + 1;
        ++*(void *)(v2 + 440);
        goto LABEL_135;
      }
      uint64_t v2 = v263;
      if (*(unsigned char *)(v263 + 183)) {
        *(void *)(v263 + 472) += mach_absolute_time() - *(void *)(v263 + 464);
      }
      CSchunklist_add(v263, *(void *)(v263 + 440), (uint64_t)ptra, (uint64_t)v282, (v66 + 1));
      if (v75) {
        goto LABEL_289;
      }
      ++*(void *)(v263 + 440);
      uint64_t v71 = v66 + 1;
LABEL_135:
      if (!*(unsigned char *)(v2 + 183))
      {
        uint64_t v72 = (uint64_t)v282;
        goto LABEL_140;
      }
      *(void *)(v2 + 464) = mach_absolute_time();
      uint64_t v72 = (uint64_t)v282;
LABEL_137:
      if (*(unsigned char *)(v2 + 183)) {
        *(void *)(v2 + 472) += mach_absolute_time() - *(void *)(v2 + 464);
      }
LABEL_140:
      if (!v68)
      {
        uint64_t v2 = v263;
        if (&ptra[v64] == *(char **)(*(void *)(v263 + 256) + 56 * *(unsigned int *)(v263 + 252)))
        {
          CSchunklist_add(v263, *(void *)(v263 + 440), (uint64_t)ptra, v72, v64);
          if (v77) {
            goto LABEL_289;
          }
          ++*(void *)(v263 + 440);
          v71 += v64;
        }
      }
LABEL_144:
      uint64_t v2 = v263;
      if (v71 < 0) {
        goto LABEL_289;
      }
      uint64_t v59 = v71 + lengtha;
      uint64_t v32 = (uint64_t)&ptra[v71];
      uint64_t v56 = *(void *)(v263 + 256);
      uint64_t v57 = *(unsigned int *)(v263 + 252);
      int64_t v25 = v264;
      if (*(char **)(v56 + 56 * v57) != &ptra[v71])
      {
        uint64_t v58 = *(unsigned int *)(v56 + 56 * v57 + 16);
        if (v264 != v44 || v43 - v59 >= v58) {
          continue;
        }
      }
      break;
    }
    int64_t v78 = v43 - v59;
    if (v43 > v59)
    {
      memmove(v28, &v28[v59], v43 - v59);
      uint64_t v59 = 0;
      int64_t v43 = v78;
    }
LABEL_163:
    if (v59 == v43) {
      CFIndex v35 = 0;
    }
    else {
      CFIndex v35 = v43;
    }
    if (v59 == v43) {
      uint64_t v59 = 0;
    }
    CFIndex length = v59;
    uint64_t v31 = v253;
    if (*(void *)(*(void *)(v2 + 256) + 56 * *(unsigned int *)(v2 + 252)) != v32)
    {
      if (v25 != v44 && v59 >= v35)
      {
        BOOL v289 = 1;
        uint64_t v3 = v300;
        goto LABEL_186;
      }
      continue;
    }
    break;
  }
  uint64_t v3 = v300;
  if (gVerbose == 2)
  {
    if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_502);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG)
      && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v79 = v32;
      uint64_t v80 = *(void *)(v2 + 256) + 56 * *(unsigned int *)(v2 + 252);
      CFStringRef v81 = CFStringCreateWithFormat(alloc, 0, @"section %u done (%u, eo:0x%llx, %u)", *(unsigned int *)(v2 + 252), v253, *(void *)v80, *(unsigned int *)(v80 + 48));
      if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_512);
      }
      int v82 = CK_DEFAULT_LOG_INTERNAL_0;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        *(void *)&uint8_t buf[4] = v81;
        _os_log_impl(&dword_215163000, v82, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      uint64_t v3 = v300;
      int v30 = (void *)v293;
      uint64_t v32 = v79;
      if (v81) {
        CFRelease(v81);
      }
    }
  }
  if (*(unsigned char *)(v2 + 180))
  {
    uint64_t v31 = v253;
    goto LABEL_186;
  }
  v83 = *(uint64_t (**)(uint64_t))(v2 + 128);
  uint64_t v84 = *(void *)(v2 + 136);
  *(void *)(v2 + 136) = 0;
  uint64_t v85 = v83(v2);
  *(void *)(v2 + 136) = v84;
  uint64_t v31 = v253;
  if (!v85)
  {
LABEL_186:
    if (v31) {
      _ClearSourceChunk(v2);
    }
    int64_t v25 = v264;
    goto LABEL_67;
  }
  uint64_t v6 = v85;
LABEL_388:
  int v99 = v255;
LABEL_331:
  CFTypeRef cf = *(CFTypeRef *)(v2 + 336);
  *(void *)(v2 + 336) = 0;
LABEL_332:
  if (v30) {
    CSrabin_free(v30);
  }
  if (v28) {
    free(v28);
  }
  if (v99) {
    _ClearSourceChunk(v2);
  }
  if (*(unsigned char *)(v2 + 181))
  {
    uint64_t v116 = *(void *)(v2 + 256);
    int v118 = *(_DWORD *)(v116 + 12);
    int v117 = *(_DWORD *)(v116 + 16);
    uint64_t v119 = *(void *)(v2 + 448);
    uint64_t v120 = *(void *)(v2 + 456);
    uint64_t v121 = *(void *)(v2 + 432);
    uint64_t v122 = *(void *)(v2 + 440);
    pthread_mutex_lock((pthread_mutex_t *)(v2 + 360));
    v123 = getenv("CK_CHUNK_COUNT");
    if (v123) {
      uint64_t v124 = strtoll(v123, 0, 0);
    }
    else {
      uint64_t v124 = 0;
    }
    bzero(buf, 0x400uLL);
    __sprintf_chk((char *)buf, 0, 0x400uLL, "%llu", v124 + v122);
    setenv("CK_CHUNK_COUNT", (const char *)buf, 1);
    v125 = getenv("CK_STORED_CHUNK_COUNT");
    if (v125) {
      v125 = (const char *)strtoll(v125, 0, 0);
    }
    __sprintf_chk((char *)buf, 0, 0x400uLL, "%llu", &v125[v120]);
    setenv("CK_STORED_CHUNK_COUNT", (const char *)buf, 1);
    v126 = getenv("CK_STORED_SIZE");
    if (v126) {
      v126 = (const char *)strtoll(v126, 0, 0);
    }
    uint64_t v3 = v300;
    __sprintf_chk((char *)buf, 0, 0x400uLL, "%llu", &v126[v121]);
    setenv("CK_STORED_SIZE", (const char *)buf, 1);
    v127 = getenv("CK_HARD_BREAK_COUNT");
    if (v127) {
      v127 = (const char *)strtoll(v127, 0, 0);
    }
    __sprintf_chk((char *)buf, 0, 0x400uLL, "%llu", &v127[v119]);
    setenv("CK_HARD_BREAK_COUNT", (const char *)buf, 1);
    __sprintf_chk((char *)buf, 0, 0x400uLL, "%d", v118);
    setenv("CK_CHUNK_TMIN", (const char *)buf, 1);
    __sprintf_chk((char *)buf, 0, 0x400uLL, "%d", v117);
    setenv("CK_CHUNK_TMAX", (const char *)buf, 1);
    pthread_mutex_unlock((pthread_mutex_t *)(v2 + 360));
  }
  uint64_t v4 = v287;
  if (*(void *)(v2 + 544))
  {
    if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_527);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
    {
      CFStringRef v128 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"\nBegin stats for \"%s\"\n\n%s\nEnd stats for \"%s\"\n", *(void *)(v2 + 104), *(void *)(v2 + 544), *(void *)(v2 + 104));
      if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_534);
      }
      v129 = CK_DEFAULT_LOG_INTERNAL_0;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        *(void *)&uint8_t buf[4] = v128;
        _os_log_impl(&dword_215163000, v129, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      if (v128) {
        CFRelease(v128);
      }
    }
  }
  uint64_t v130 = *(void *)(v2 + 192);
  if (v130)
  {
    int v131 = CKFileSignatureGeneratorFinish(v130);
    v132 = *(const void **)(v2 + 192);
    if (v132) {
      CFRelease(v132);
    }
    *(void *)(v2 + 192) = 0;
    if (!v131)
    {
      uint64_t v6 = 0xFFFFFFFFLL;
      goto LABEL_380;
    }
  }
  if (gVerbose == 2)
  {
    if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_63);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG)
      && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
    {
      CFStringRef v133 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Done chunking \"%s\", rc:%d, chunkCount:%llu, itemID:%lld", __n, v6, *(void *)(v2 + 440), v277);
      if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_74);
      }
      v134 = CK_DEFAULT_LOG_INTERNAL_0;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        *(void *)&uint8_t buf[4] = v133;
        _os_log_impl(&dword_215163000, v134, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      if (v133) {
        CFRelease(v133);
      }
    }
  }
  if (v6)
  {
LABEL_380:
    a2 = v297;
    int v5 = v299;
    if (!v297) {
      goto LABEL_382;
    }
    goto LABEL_381;
  }
  uint64_t v135 = *(void *)(v2 + 8);
  uint64_t v136 = *(void *)(v2 + 16);
  unsigned __int8 v137 = CKChunkDigestArgumentsChunkEncryptionKeyScheme(*(void *)(v2 + 152));
  if (*(unsigned char *)(v2 + 176)) {
    goto LABEL_377;
  }
  unsigned __int8 v138 = v137;
  uint64_t v139 = *(void *)(v2 + 104);
  uint64_t v140 = *(unsigned int *)(v2 + 24);
  uint64_t v141 = *(void *)(v2 + 40);
  uint64_t v142 = *(void *)(v2 + 80);
  uint64_t v143 = *(void *)(v2 + 88);
  if (getenv("CS_DISABLE_CL_CACHE")) {
    goto LABEL_377;
  }
  uint64_t v308 = 0;
  *(_OWORD *)buf = 0u;
  long long v307 = 0u;
  if (((*(uint64_t (**)(uint64_t, uint8_t *, void))(v136 + 64))(v135, buf, 0) & 1) == 0)
  {
    if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_711);
    }
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR)) {
      goto LABEL_377;
    }
    CFStringRef v146 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"stat failed for \"%s\", ino:%llu\n", v139, v141);
    if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_717);
    }
    uint64_t v150 = CK_DEFAULT_LOG_INTERNAL_0;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v309 = 138543362;
      *(void *)&v309[4] = v146;
LABEL_406:
      v148 = v150;
      os_log_type_t v149 = OS_LOG_TYPE_ERROR;
      goto LABEL_407;
    }
LABEL_408:
    if (v146) {
      CFRelease(v146);
    }
    goto LABEL_377;
  }
  if (*(void *)buf <= 0x10000uLL) {
    goto LABEL_391;
  }
  if (!BYTE8(v307)) {
    goto LABEL_377;
  }
  if (v142 != *(void *)buf || v143 != (void)v307 || v140 != HIDWORD(v307))
  {
    if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_721_0);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
    {
      CFStringRef v160 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"\"%s\" changed, mtime:%llu/%llu, sz:%llu/%llu, generation:%u/%u\n", v139, v143, (void)v307, v142, *(void *)buf, v140, HIDWORD(v307));
      if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_728);
      }
      v161 = CK_DEFAULT_LOG_INTERNAL_0;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v309 = 138543362;
        *(void *)&v309[4] = v160;
        _os_log_impl(&dword_215163000, v161, OS_LOG_TYPE_DEBUG, "%{public}@", v309, 0xCu);
      }
      if (v160) {
        CFRelease(v160);
      }
    }
LABEL_391:
    if (setCacheBlob(v2, (uint64_t)"com.apple.cscache", 0)) {
      goto LABEL_377;
    }
    if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_798);
    }
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_377;
    }
    CFStringRef v146 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Removed chunk list cache for \"%s\", sz:%llu ino:%llu, mtime:%llu, generation:%u\n", v139, v142, v141, v143, v140);
    if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_805);
    }
    uint64_t v147 = CK_DEFAULT_LOG_INTERNAL_0;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v309 = 138543362;
      *(void *)&v309[4] = v146;
      v148 = v147;
      os_log_type_t v149 = OS_LOG_TYPE_DEBUG;
LABEL_407:
      _os_log_impl(&dword_215163000, v148, v149, "%{public}@", v309, 0xCu);
      goto LABEL_408;
    }
    goto LABEL_408;
  }
  uint64_t v151 = *(unsigned int *)(v2 + 272);
  if (!*(void *)(v2 + 264) || !v151)
  {
    uint64_t v162 = *(void *)(v2 + 264);
    if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_732);
    }
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR)) {
      goto LABEL_377;
    }
    CFStringRef v146 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Invalid chunk array, chunkArray:%p, chunkCount:%llu\n", v162, v151);
    if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_739_0);
    }
    uint64_t v150 = CK_DEFAULT_LOG_INTERNAL_0;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v309 = 138543362;
      *(void *)&v309[4] = v146;
      goto LABEL_406;
    }
    goto LABEL_408;
  }
  uint64_t v290 = *(unsigned int *)(v2 + 272);
  uint64_t v295 = *(void *)(v2 + 264);
  uint64_t v298 = *(unsigned __int8 *)(v2 + 179);
  if (gVerbose == 2)
  {
    if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_743);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG)
      && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
    {
      CFStringRef v152 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Storing cache \"%s\" for \"%s\", scheme:0x%x, ino:%llu, chunkCount:%llu, mtime:%llu, generation:%u, registering:%u\n", "com.apple.cscache", v139, v138, v141, v290, v143, v140, v298);
      if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_753);
      }
      v153 = CK_DEFAULT_LOG_INTERNAL_0;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v309 = 138543362;
        *(void *)&v309[4] = v152;
        _os_log_impl(&dword_215163000, v153, OS_LOG_TYPE_DEBUG, "%{public}@", v309, 0xCu);
      }
      uint64_t v3 = v300;
      if (v152) {
        CFRelease(v152);
      }
    }
  }
  uint64_t v154 = *(void *)(v2 + 208);
  if (v154)
  {
    v155 = (unsigned char *)CKFileDigestResultsFileSignature(v154);
    CFAllocatorRef v156 = (const __CFAllocator *)CKFileSignatureCopy(v155);
    int v157 = v298;
    if (!v156) {
      chunkItem_cold_3();
    }
    CFAllocatorRef v158 = v156;
    uint64_t v159 = CKFileSchemeAndSignatureSize(v156);
    if (v159 >= 0x10000) {
      chunkItem_cold_4();
    }
  }
  else
  {
    CFAllocatorRef v158 = 0;
    uint64_t v159 = 0;
    int v157 = v298;
  }
  if (v157) {
    v185 = (unsigned char *)(v295 + 35);
  }
  else {
    v185 = (unsigned char *)(v295 + 84);
  }
  unsigned int v186 = CKChunkSchemeSignatureAndKeySize(v185);
  unsigned int __na = v186;
  unsigned int v187 = v186 + 4;
  if (v186 + 4 >= 0x10000) {
    chunkItem_cold_1();
  }
  uint64_t v278 = v186 + 4;
  if (gVerbose == 2)
  {
    if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_760);
    }
    BOOL v188 = os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG);
    unsigned int v187 = v278;
    if (v188)
    {
      BOOL v189 = os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG);
      unsigned int v187 = v278;
      if (v189)
      {
        CFStringRef v285 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"fileSignatureSize:%u, chunkInfoSize:%u, chunkInfoCount:%u", v159, v278, v290);
        if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_771);
        }
        v190 = CK_DEFAULT_LOG_INTERNAL_0;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)v309 = 138543362;
          *(void *)&v309[4] = v285;
          _os_log_impl(&dword_215163000, v190, OS_LOG_TYPE_DEBUG, "%{public}@", v309, 0xCu);
        }
        uint64_t v3 = v300;
        unsigned int v187 = v278;
        if (v285)
        {
          CFRelease(v285);
          unsigned int v187 = v278;
        }
      }
    }
  }
  uint64_t v191 = (v159 + 57);
  if (v187 < 5
    || ((v187 * (unint64_t)v290) & 0xFFFFFFFF00000000) != 0
    || __CFADD__(v187 * v290, v191))
  {
    if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_775);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v192 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Invalid size/count: 0x%x/0x%x/0x%x\n", v191, v278, v290);
      if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_782);
      }
      v193 = CK_DEFAULT_LOG_INTERNAL_0;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v309 = 138543362;
        *(void *)&v309[4] = v192;
        _os_log_impl(&dword_215163000, v193, OS_LOG_TYPE_ERROR, "%{public}@", v309, 0xCu);
      }
      if (v192) {
LABEL_568:
      }
        CFRelease(v192);
    }
  }
  else
  {
    CFIndex lengthc = v187 * v290 + v191;
    Mutable = CFDataCreateMutable(0, lengthc);
    if (Mutable)
    {
      v195 = Mutable;
      CFAllocatorRef allocb = v158;
      CFDataSetLength(Mutable, lengthc);
      ptrb = v195;
      v196 = CFDataGetMutableBytePtr(v195);
      *((_OWORD *)v196 + 1) = 0u;
      *((_OWORD *)v196 + 2) = 0u;
      *(_OWORD *)(v196 + 42) = 0u;
      *(_OWORD *)v196 = 0u;
      *(_DWORD *)(v196 + 21) = v140;
      *(void *)(v196 + 25) = v143;
      *(void *)(v196 + 33) = v141;
      *(void *)(v196 + 41) = v142;
      *(_WORD *)(v196 + 49) = v159;
      *(_WORD *)(v196 + 51) = v278;
      v266 = v196;
      *(_DWORD *)(v196 + 53) = v290;
      if (v159) {
        memcpy(v196 + 57, v158, v159);
      }
      unsigned int v197 = 0;
      int v286 = *(_DWORD *)(v2 + 308);
      uint64_t v198 = v290;
      uint64_t v199 = v159;
      do
      {
        uint64_t v200 = v295 + v197;
        uint64_t v201 = 24;
        if (v298)
        {
          v202 = (const void *)(v200 + 35);
        }
        else
        {
          uint64_t v201 = 80;
          v202 = (const void *)(v200 + 84);
        }
        *(_DWORD *)&v266[v199 + 57] = *(_DWORD *)(v200 + v201);
        memcpy(&v266[v199 + 61], v202, __na);
        v197 += v286;
        v199 += v278;
        --v198;
      }
      while (v198);
      if (lengthc - 57 != v199) {
        chunkItem_cold_2();
      }
      if (!setChunkListCacheBlob(v2, ptrb))
      {
        if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_787);
        }
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
        {
          CFStringRef v203 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Stored chunk list cache for \"%s\", chunkCount:%llu, blobSize:%u, sz:%llu, ino:%llu, mtime:%llu, generation:%u\n", v139, v290, lengthc, v142, v141, v143, v140);
          if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_794);
          }
          v204 = CK_DEFAULT_LOG_INTERNAL_0;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)v309 = 138543362;
            *(void *)&v309[4] = v203;
            _os_log_impl(&dword_215163000, v204, OS_LOG_TYPE_DEBUG, "%{public}@", v309, 0xCu);
          }
          if (v203) {
            CFRelease(v203);
          }
        }
      }
      uint64_t v3 = v300;
      CFAllocatorRef v158 = allocb;
      CFStringRef v192 = (CFStringRef)ptrb;
      goto LABEL_568;
    }
  }
  if (v158) {
    free(v158);
  }
LABEL_377:
  uint64_t v6 = 0;
  uint64_t v4 = v287;
LABEL_378:
  int v5 = v299;
LABEL_382:
  if (cf) {
    CFRelease(cf);
  }
LABEL_384:
  freeChunkListCacheInfo(v5);
  v144 = *(void (**)(uint64_t))(v3 + 40);
  if (v144) {
    v144(v4);
  }
  return v6;
}

os_log_t __chunkItem_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkItem_block_invoke_3()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkItem_block_invoke_34()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkItem_block_invoke_3_45()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkItem_block_invoke_49()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkItem_block_invoke_2_56()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkItem_block_invoke_60()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkItem_block_invoke_3_71()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

void freeChunkListCacheInfo(const void **a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (v2) {
      CFRelease(v2);
    }
    free(a1);
  }
}

uint64_t CSchunklist_for_file(char *a1, CFStringRef *a2)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  CFStringRef v26 = 0;
  uint64_t valuePtr = 0;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v21 = 0u;
  memset(v20, 0, sizeof(v20));
  CFTypeRef cf = 0;
  int v4 = open(a1, 0);
  if (v4 == -1)
  {
    if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_77_0);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
    {
      CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      int v13 = __error();
      uint64_t v14 = strerror(*v13);
      CFStringRef v6 = CFStringCreateWithFormat(v12, 0, @"open failed on \"%s\": %s\n", a1, v14);
      if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_83);
      }
      uint64_t v15 = CK_DEFAULT_LOG_INTERNAL_0;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        CFStringRef v29 = v6;
        _os_log_impl(&dword_215163000, v15, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (!v6) {
        goto LABEL_25;
      }
      CFRelease(v6);
    }
    goto LABEL_24;
  }
  if (!gOperations)
  {
    gOperations = (uint64_t)CFSetCreateMutable(0, 0, MEMORY[0x263EFFFA0]);
    if (!gOperations)
    {
LABEL_24:
      CFStringRef v6 = 0;
LABEL_25:
      CFNumberRef v10 = 0;
      int v8 = 0;
      goto LABEL_26;
    }
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  CFStringRef v6 = (CFStringRef)Mutable;
  if (!Mutable) {
    goto LABEL_25;
  }
  DWORD2(v24) = v4;
  *(void *)&long long v25 = 0;
  *((void *)&v25 + 1) = Mutable;
  LODWORD(v20[0]) = 2;
  *(void *)&long long v21 = openFd;
  *((void *)&v21 + 1) = closeFd;
  *(void *)&long long v22 = statFd;
  *((void *)&v22 + 1) = readFd;
  *(void *)&long long v23 = getCacheBlobFd;
  *((void *)&v23 + 1) = setCacheBlobFd;
  *(void *)&long long v24 = a1;
  *((void *)&v20[0] + 1) = 0;
  if (!openFd((uint64_t)&v24, &v26, 0)) {
    goto LABEL_25;
  }
  size_t v7 = v26;
  *((void *)v26 + 1) = v26;
  *((void *)v7 + 2) = v20;
  int v8 = 1;
  if (!CKChunkDigestArgumentsV1Create(&cf, 1, 0)
    || setOpCtxPath((uint64_t)v7, a1)
    || setOpCtxChunkScheme((uint64_t)v7, 1, cf)
    || (uint64_t v18 = 0,
        memset(v17, 0, sizeof(v17)),
        !((unsigned int (*)(char *, _OWORD *, void))v22)(v7, v17, 0)))
  {
    CFNumberRef v10 = 0;
    goto LABEL_26;
  }
  setOpCtxStatInfo((uint64_t)v7, (uint64_t *)v17);
  uint64_t valuePtr = *((void *)v7 + 5);
  uint64_t v9 = valuePtr;
  *((void *)v7 + 2) = v20;
  *((void *)v7 + 16) = CSchunklist_for_file_callback;
  *((void *)v7 + 7) = v9;
  v7[160] = 5;
  CFNumberRef v10 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
  if (!v10)
  {
LABEL_26:
    uint64_t v11 = 0;
    goto LABEL_27;
  }
  while (!registerOperation(&gOperationsLock, (const __CFSet *)gOperations, v10))
    waitForOperation(&gOperationsLock, &gOperationsCondition, (const __CFSet *)gOperations, v10);
  if (chunkItem(v7, 0))
  {
    uint64_t v11 = 0;
    int v8 = 1;
  }
  else
  {
    *a2 = v6;
    int v8 = 1;
    uint64_t v11 = 1;
    CFStringRef v6 = 0;
  }
LABEL_27:
  if (cf) {
    CKBaseRelease(cf);
  }
  CFTypeRef cf = 0;
  if (v8) {
    (*((void (**)(void, char *, void))&v21 + 1))(*((void *)&v20[0] + 1), v26, 0);
  }
  if (v10)
  {
    unregisterOperation(&gOperationsLock, &gOperationsCondition, (__CFSet *)gOperations, v10);
    CFRelease(v10);
  }
  if (v6) {
    CFRelease(v6);
  }
  if (v4 != -1) {
    close(v4);
  }
  return v11;
}

uint64_t openFd(uint64_t a1, char **a2, CFErrorRef *a3)
{
  *a2 = 0;
  if (a3) {
    *a3 = 0;
  }
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  if (v6 == -1) {
    goto LABEL_6;
  }
  size_t v7 = *(char **)a1;
  memset(&v20, 0, sizeof(v20));
  if (fstat(v6, &v20) == -1)
  {
    int v9 = *__error();
    uint64_t v10 = *__error();
    uint64_t v11 = __error();
    CFAllocatorRef v12 = strerror(*v11);
    CFErrorRef v8 = CKPOSIXErrorCreateWithFormat(v9, @"fstat failed for fd:%d, path:\"%s\": (%d) %s", v6, v7, v10, v12);
    goto LABEL_8;
  }
  if ((v20.st_mode & 0xF000) == 0x4000)
  {
LABEL_6:
    CFErrorRef v8 = 0;
LABEL_8:
    int v13 = 0;
    goto LABEL_9;
  }
  OpCtx = createOpCtx();
  int v13 = OpCtx;
  if (!OpCtx || setOpCtxPath((uint64_t)OpCtx, v7))
  {
    CFErrorRef v8 = 0;
LABEL_9:
    freeOpCtx(v13);
    if (a3)
    {
      uint64_t result = 0;
      *a3 = v8;
    }
    else
    {
      if (v8) {
        CFRelease(v8);
      }
      return 0;
    }
    return result;
  }
  *((_DWORD *)v13 + 9) = v6;
  __darwin_time_t tv_sec = v20.st_mtimespec.tv_sec;
  *((void *)v13 + 5) = v20.st_ino;
  *((_DWORD *)v13 + 12) = v20.st_dev;
  mode_t st_mode = v20.st_mode;
  *((_WORD *)v13 + 16) = v20.st_mode;
  *((_DWORD *)v13 + 7) = v20.st_nlink;
  *((void *)v13 + 10) = v20.st_size;
  *((void *)v13 + 11) = tv_sec;
  *(_OWORD *)(v13 + 344) = *(_OWORD *)(a1 + 16);
  int v18 = st_mode & 0xF000;
  int v19 = 0;
  if (!getFileWriteGeneration((uint64_t)v7, v6, &v19))
  {
    v13[34] = 1;
    *((_DWORD *)v13 + 6) = v19;
    v13[178] = v18 == 40960;
    v13[177] = v18 == 40960;
  }
  if (v18 != 40960) {
    *((void *)v13 + 15) = getMaxXattrSize((uint64_t)v7, v6);
  }
  *a2 = v13;
  freeOpCtx(0);
  return 1;
}

uint64_t closeFd(int a1, void **a2, void *a3)
{
  if (a3) {
    *a3 = 0;
  }
  if (a2[1] != a2) {
    closeFd_cold_1();
  }
  freeOpCtx((char *)a2);
  return 1;
}

uint64_t statFd(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3) {
    *a3 = 0;
  }
  if (*(void *)(a1 + 8) != a1) {
    statFd_cold_1();
  }
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 88);
  *(void *)a2 = *(void *)(a1 + 80);
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v4;
  *(unsigned char *)(a2 + 24) = *(unsigned char *)(a1 + 34);
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 24);
  return 1;
}

uint64_t readFd(uint64_t a1, unint64_t a2, void *__buf, size_t __nbyte, unint64_t *a5, CFErrorRef *a6)
{
  unint64_t v8 = __nbyte;
  uint64_t v36 = *MEMORY[0x263EF8340];
  if (a6) {
    *a6 = 0;
  }
  if (*(void *)(a1 + 8) != a1) {
    readFd_cold_1();
  }
  uint64_t v12 = *(unsigned int *)(a1 + 36);
  if (v12 == -1)
  {
    if (a6)
    {
      CFErrorRef v18 = 0;
LABEL_19:
      uint64_t result = 0;
      *a6 = v18;
      return result;
    }
    return 0;
  }
  int v13 = *(const char **)(a1 + 104);
  if ((*(_WORD *)(a1 + 32) & 0xF000) == 0xA000)
  {
    uint64_t v14 = *(char **)(a1 + 320);
    if (v14)
    {
      unint64_t v15 = *(void *)(a1 + 328);
LABEL_8:
      BOOL v16 = v15 > a2;
      unint64_t v17 = v15 - a2;
      if (v16)
      {
        if (v17 < v8) {
          unint64_t v8 = v17;
        }
        memcpy(__buf, &v14[a2], v8);
      }
      else
      {
        unint64_t v8 = 0;
      }
      goto LABEL_26;
    }
    bzero(v35, 0x400uLL);
    if (v13 || (int v13 = v35, !get_path_for_fd(v12, v35)))
    {
      long long v24 = (char *)malloc_type_malloc(0x400uLL, 0x1AC911BCuLL);
      if (v24)
      {
        uint64_t v14 = v24;
        unint64_t v25 = readlink(v13, v24, 0x400uLL);
        if ((v25 & 0x8000000000000000) == 0)
        {
          unint64_t v15 = 1024;
          if (v25 < 0x400) {
            unint64_t v15 = v25;
          }
          *(void *)(a1 + 320) = v14;
          *(void *)(a1 + 328) = v15;
          goto LABEL_8;
        }
        int v29 = *__error();
        uint64_t v30 = *__error();
        uint64_t v31 = __error();
        uint64_t v32 = strerror(*v31);
        CFErrorRef v18 = CKPOSIXErrorCreateWithFormat(v29, @"readlink failed for fd:%d, path:\"%s\": (%d) %s", v12, v13, v30, v32);
        free(v14);
      }
      else
      {
        CFErrorRef v18 = 0;
      }
      goto LABEL_18;
    }
    int v26 = *__error();
    uint64_t v27 = *__error();
    long long v28 = __error();
    uint64_t v33 = strerror(*v28);
    CFErrorRef v22 = CKPOSIXErrorCreateWithFormat(v26, @"get path failed for fd:%d: %d (%s)", v12, v27, v33);
LABEL_17:
    CFErrorRef v18 = v22;
LABEL_18:
    if (a6) {
      goto LABEL_19;
    }
    if (v18) {
      CFRelease(v18);
    }
    return 0;
  }
  unint64_t v8 = pread(*(_DWORD *)(a1 + 36), __buf, __nbyte, a2);
  if ((v8 & 0x8000000000000000) != 0)
  {
    int v19 = *__error();
    uint64_t v20 = *__error();
    long long v21 = __error();
    BOOL v34 = strerror(*v21);
    CFErrorRef v22 = CKPOSIXErrorCreateWithFormat(v19, @"pread failed on fd:%d, path:\"%s\", offset:0x%llx: (%d) %s", v12, v13, a2, v20, v34);
    goto LABEL_17;
  }
LABEL_26:
  if (a5) {
    *a5 = v8;
  }
  return 1;
}

uint64_t getCacheBlobFd(uint64_t a1, char *name, __CFData **a3, CFErrorRef *a4)
{
  if (*(void *)(a1 + 8) != a1) {
    getCacheBlobFd_cold_1();
  }
  uint64_t v7 = *(unsigned int *)(a1 + 36);
  uint64_t v8 = *(void *)(a1 + 104);
  return CKGetCacheBlobFd(v8, v7, name, a3, a4);
}

uint64_t setCacheBlobFd(uint64_t a1, char *name, CFDataRef theData, CFErrorRef *a4)
{
  if (*(void *)(a1 + 8) != a1) {
    setCacheBlobFd_cold_1();
  }
  uint64_t v7 = *(unsigned int *)(a1 + 36);
  uint64_t v8 = *(void *)(a1 + 104);
  return CKSetCacheBlobFd(v8, v7, name, theData, a4);
}

uint64_t CSchunklist_for_file_callback(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 136);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(__CFArray **)(a1 + 352);
  uint64_t v3 = (const UInt8 *)(v1 + 72);
  uint64_t v4 = CKSchemeSignatureAndKeySize(v1 + 84);
  CFDataRef v5 = CFDataCreate(0, v3, v4 + 16);
  if (v5)
  {
    CFDataRef v6 = v5;
    CFArrayAppendValue(v2, v5);
    CFRelease(v6);
    return 0;
  }
  return 0xFFFFFFFFLL;
}

BOOL CKCopyChunkCache(char *a1, char *a2)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  int64_t v54 = 0;
  uint64_t v55 = 0;
  CFMutableDataRef theData = 0;
  unint64_t v46 = 0;
  if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_86);
  }
  memset(v53, 0, sizeof(v53));
  memset(v52, 0, sizeof(v52));
  long long v49 = 0u;
  long long v50 = 0u;
  uint64_t v51 = 0;
  memset(v47, 0, sizeof(v47));
  uint64_t v48 = 0;
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
  {
    CFStringRef v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"srcPath:\"%s\", dstPath:\"%s\"\n", a1, a2);
    if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_92);
    }
    CFDataRef v5 = CK_DEFAULT_LOG_INTERNAL_0;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138543362;
      CFStringRef v57 = v4;
      _os_log_impl(&dword_215163000, v5, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
    }
    if (v4) {
      CFRelease(v4);
    }
  }
  BOOL v6 = 0;
  uint64_t v7 = 0;
  int v8 = -1;
  int v9 = -1;
  BOOL v10 = 0;
  if (!a1) {
    goto LABEL_19;
  }
  BOOL v11 = 0;
  if (!a2) {
    goto LABEL_92;
  }
  unsigned int v12 = open(a1, 0);
  if (v12 == -1)
  {
    if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_96);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
    {
      CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      uint64_t v16 = *__error();
      unint64_t v17 = __error();
      CFErrorRef v18 = strerror(*v17);
      CFStringRef v19 = CFStringCreateWithFormat(v15, 0, @"open failed on \"%s\": %d (%s)\n", a1, v16, v18);
      if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_103_0);
      }
      uint64_t v20 = CK_DEFAULT_LOG_INTERNAL_0;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        CFStringRef v57 = v19;
        _os_log_impl(&dword_215163000, v20, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v19) {
        CFRelease(v19);
      }
      uint64_t v7 = 0;
      BOOL v6 = 0;
      BOOL v10 = 0;
      BOOL v11 = 0;
      int v8 = -1;
      int v9 = -1;
      goto LABEL_92;
    }
    uint64_t v7 = 0;
    BOOL v6 = 0;
    BOOL v10 = 0;
    BOOL v11 = 0;
LABEL_31:
    int v8 = -1;
    goto LABEL_92;
  }
  int v9 = v12;
  int v13 = openFdWithReadContext(a1, v12, &v55, (uint64_t)v53, (uint64_t)&v49);
  BOOL v6 = 0;
  uint64_t v7 = 0;
  BOOL v10 = v13 == 0;
  if (v13 || !BYTE8(v50))
  {
LABEL_19:
    BOOL v11 = 0;
    goto LABEL_92;
  }
  if (getChunkListCacheBlob((uint64_t)v55, (CFMutableDataRef *)&v46)) {
    unint64_t v46 = 0;
  }
  if (getFileSignatureCacheBlob(v55, &theData))
  {
    CFMutableDataRef v14 = 0;
    CFMutableDataRef theData = 0;
  }
  else
  {
    CFMutableDataRef v14 = theData;
  }
  uint64_t v7 = (__CFData *)v46;
  if (!(v46 | (unint64_t)v14))
  {
    BOOL v11 = 1;
    goto LABEL_100;
  }
  unsigned int v21 = open(a2, 0);
  if (v21 == -1)
  {
    if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_107);
    }
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
    {
      BOOL v6 = 0;
      BOOL v11 = 0;
LABEL_91:
      BOOL v10 = 1;
      goto LABEL_92;
    }
    CFAllocatorRef v25 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    uint64_t v26 = *__error();
    uint64_t v27 = __error();
    long long v28 = strerror(*v27);
    CFStringRef v29 = CFStringCreateWithFormat(v25, 0, @"open failed on \"%s\": %d (%s)\n", a2, v26, v28);
    if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_111);
    }
    uint64_t v30 = CK_DEFAULT_LOG_INTERNAL_0;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      CFStringRef v57 = v29;
      _os_log_impl(&dword_215163000, v30, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v29) {
      CFRelease(v29);
    }
    BOOL v6 = 0;
    BOOL v11 = 0;
    BOOL v10 = 1;
    goto LABEL_31;
  }
  int v8 = v21;
  int v22 = openFdWithReadContext(a2, v21, &v54, (uint64_t)v52, (uint64_t)v47);
  BOOL v11 = 0;
  BOOL v6 = v22 == 0;
  BOOL v10 = 1;
  if (!v22 && v47[1].i8[8])
  {
    if (!v7)
    {
      uint64_t v36 = theData;
      if (theData)
      {
        int v35 = 0;
LABEL_68:
        MutableBytePtr = CFDataGetMutableBytePtr(v36);
        uint64_t v38 = MutableBytePtr;
        if (HIDWORD(v50) == *(_DWORD *)(MutableBytePtr + 21)
          && (void)v50 == *(void *)(MutableBytePtr + 25)
          && v49 == __PAIR128__(*(void *)(MutableBytePtr + 33), *(void *)(MutableBytePtr + 41)))
        {
          *(_DWORD *)(MutableBytePtr + 21) = v47[1].i32[3];
          *(int8x16_t *)(MutableBytePtr + 25) = vextq_s8(*(int8x16_t *)((char *)v47 + 8), *(int8x16_t *)((char *)v47 + 8), 8uLL);
          *(void *)(MutableBytePtr + 41) = v47[0].i64[0];
          if (!setFileSignatureCacheBlob((uint64_t)v54, theData))
          {
            if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_148);
            }
            if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
            {
              CFStringRef v39 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Copied file signature cache from \"%s\" to \"%s\" (%llu/%llu)\n", a1, a2, *((void *)&v49 + 1), v47[0].i64[1]);
              if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
                dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_155);
              }
              unsigned int v40 = CK_DEFAULT_LOG_INTERNAL_0;
              if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 138543362;
                CFStringRef v57 = v39;
                _os_log_impl(&dword_215163000, v40, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
              }
              int v35 = 1;
LABEL_87:
              if (v39) {
                CFRelease(v39);
              }
              goto LABEL_89;
            }
            int v35 = 1;
          }
LABEL_89:
          BOOL v11 = v35 != 0;
          goto LABEL_90;
        }
        if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_137);
        }
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_89;
        }
        CFStringRef v39 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Invalid file signature cache for \"%s\", type:%u, mtime:%llu/%llu, ino:%llu/%llu, generation:%u/%u, sz:%llu/%llu\n", a1, v38[20], *(void *)(v38 + 25), (void)v50, *(void *)(v38 + 33), *((void *)&v49 + 1), *(unsigned int *)(v38 + 21), HIDWORD(v50), *(void *)(v38 + 41), (void)v49);
        if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_144);
        }
        uint64_t v41 = CK_DEFAULT_LOG_INTERNAL_0;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138543362;
          CFStringRef v57 = v39;
          _os_log_impl(&dword_215163000, v41, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
        }
        goto LABEL_87;
      }
      BOOL v11 = 0;
LABEL_108:
      closeFdWithReadContext((uint64_t)v54, (uint64_t)v52);
      goto LABEL_100;
    }
    long long v23 = CFDataGetMutableBytePtr(v7);
    long long v24 = v23;
    if (HIDWORD(v50) == *(_DWORD *)(v23 + 21)
      && (void)v50 == *(void *)(v23 + 25)
      && v49 == __PAIR128__(*(void *)(v23 + 33), *(void *)(v23 + 41)))
    {
      *(_DWORD *)(v23 + 21) = v47[1].i32[3];
      *(int8x16_t *)(v23 + 25) = vextq_s8(*(int8x16_t *)((char *)v47 + 8), *(int8x16_t *)((char *)v47 + 8), 8uLL);
      *(void *)(v23 + 41) = v47[0].i64[0];
      if (setChunkListCacheBlob((uint64_t)v54, v7))
      {
        BOOL v11 = 0;
LABEL_90:
        BOOL v6 = 1;
        goto LABEL_91;
      }
      if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_126);
      }
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
      {
        BOOL v11 = 1;
        int v35 = 1;
        goto LABEL_67;
      }
      CFStringRef v43 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Copied chunk list cache from \"%s\" to \"%s\" (%llu/%llu)\n", a1, a2, *((void *)&v49 + 1), v47[0].i64[1]);
      if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_133);
      }
      int64_t v44 = CK_DEFAULT_LOG_INTERNAL_0;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        CFStringRef v57 = v43;
        _os_log_impl(&dword_215163000, v44, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      uint64_t v33 = 1;
      BOOL v11 = 1;
      CFStringRef v34 = v43;
      int v35 = 1;
      if (!v34) {
        goto LABEL_67;
      }
    }
    else
    {
      if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_115);
      }
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
      {
        BOOL v11 = 0;
        int v35 = 0;
        goto LABEL_67;
      }
      CFStringRef v31 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Invalid chunk list cache for \"%s\", type:%u, mtime:%llu/%llu, ino:%llu/%llu, generation:%u/%u, sz:%llu/%llu\n", a1, v24[20], *(void *)(v24 + 25), (void)v50, *(void *)(v24 + 33), *((void *)&v49 + 1), *(unsigned int *)(v24 + 21), HIDWORD(v50), *(void *)(v24 + 41), (void)v49);
      if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_122_0);
      }
      uint64_t v32 = CK_DEFAULT_LOG_INTERNAL_0;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        CFStringRef v57 = v31;
        _os_log_impl(&dword_215163000, v32, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      uint64_t v33 = 0;
      BOOL v11 = 0;
      CFStringRef v34 = v31;
      int v35 = 0;
      if (!v34) {
        goto LABEL_67;
      }
    }
    CFRelease(v34);
    BOOL v11 = v33;
    int v35 = v33;
LABEL_67:
    uint64_t v36 = theData;
    if (theData) {
      goto LABEL_68;
    }
    CFRelease(v7);
    goto LABEL_108;
  }
LABEL_92:
  if (theData) {
    CFRelease(theData);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (!v6)
  {
    if (!v10) {
      goto LABEL_101;
    }
    goto LABEL_100;
  }
  closeFdWithReadContext((uint64_t)v54, (uint64_t)v52);
  if (v10) {
LABEL_100:
  }
    closeFdWithReadContext((uint64_t)v55, (uint64_t)v53);
LABEL_101:
  if (v9 != -1) {
    close(v9);
  }
  if (v8 != -1) {
    close(v8);
  }
  return v11;
}

os_log_t __CKCopyChunkCache_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __CKCopyChunkCache_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __CKCopyChunkCache_block_invoke_93()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __CKCopyChunkCache_block_invoke_2_100()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __CKCopyChunkCache_block_invoke_104()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __CKCopyChunkCache_block_invoke_2_108()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __CKCopyChunkCache_block_invoke_112()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __CKCopyChunkCache_block_invoke_2_119()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __CKCopyChunkCache_block_invoke_123()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __CKCopyChunkCache_block_invoke_2_130()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __CKCopyChunkCache_block_invoke_134()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __CKCopyChunkCache_block_invoke_2_141()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __CKCopyChunkCache_block_invoke_145()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __CKCopyChunkCache_block_invoke_2_152()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

BOOL CKFixupChunkCacheAfterExchangeData(char *a1, char *a2)
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  uint64_t v67 = 0;
  BOOL v68 = 0;
  CFMutableDataRef theData = 0;
  unint64_t v58 = 0;
  if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_158);
  }
  memset(v66, 0, sizeof(v66));
  memset(v65, 0, sizeof(v65));
  long long v62 = 0u;
  long long v63 = 0u;
  uint64_t v64 = 0;
  long long v59 = 0u;
  long long v60 = 0u;
  uint64_t v61 = 0;
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
  {
    CFStringRef v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"srcPath:\"%s\", dstPath:\"%s\"\n", a1, a2);
    if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_161);
    }
    CFDataRef v5 = CK_DEFAULT_LOG_INTERNAL_0;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138543362;
      CFStringRef v70 = v4;
      _os_log_impl(&dword_215163000, v5, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
    }
    if (v4) {
      CFRelease(v4);
    }
  }
  BOOL v6 = 0;
  uint64_t v7 = 0;
  int v8 = -1;
  int v9 = -1;
  int v10 = 0;
  BOOL v11 = 0;
  BOOL v12 = 0;
  BOOL v13 = 0;
  if (a1 && a2)
  {
    unsigned int v14 = open(a2, 0);
    if (v14 == -1)
    {
      if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_165);
      }
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
      {
        CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        uint64_t v19 = *__error();
        uint64_t v20 = __error();
        unsigned int v21 = strerror(*v20);
        CFStringRef v22 = CFStringCreateWithFormat(v18, 0, @"open failed on \"%s\": %d (%s)\n", a2, v19, v21);
        if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_169);
        }
        long long v23 = CK_DEFAULT_LOG_INTERNAL_0;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          CFStringRef v70 = v22;
          _os_log_impl(&dword_215163000, v23, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
        }
        if (v22) {
          CFRelease(v22);
        }
        uint64_t v7 = 0;
        BOOL v6 = 0;
        int v10 = 0;
        BOOL v11 = 0;
        BOOL v12 = 0;
        BOOL v13 = 0;
        int v8 = -1;
      }
      else
      {
        uint64_t v7 = 0;
        BOOL v6 = 0;
        int v10 = 0;
        BOOL v11 = 0;
        BOOL v12 = 0;
        BOOL v13 = 0;
      }
    }
    else
    {
      int v8 = v14;
      int v15 = openFdWithReadContext(a2, v14, &v67, (uint64_t)v65, (uint64_t)&v59);
      int v10 = 0;
      uint64_t v7 = 0;
      BOOL v6 = v15 == 0;
      if (v15 || !BYTE8(v60))
      {
        BOOL v11 = 0;
        BOOL v12 = 0;
        BOOL v13 = 0;
        goto LABEL_94;
      }
      ChunkListuint64_t CacheBlob = getChunkListCacheBlob((uint64_t)v67, (CFMutableDataRef *)&v58);
      if (ChunkListCacheBlob)
      {
        BOOL v17 = ChunkListCacheBlob == 22;
        unint64_t v58 = 0;
      }
      else
      {
        BOOL v17 = 0;
      }
      FileSignatureuint64_t CacheBlob = getFileSignatureCacheBlob(v67, &theData);
      if (FileSignatureCacheBlob)
      {
        CFMutableDataRef v25 = 0;
        BOOL v26 = FileSignatureCacheBlob == 22;
        CFMutableDataRef theData = 0;
      }
      else
      {
        BOOL v26 = 0;
        CFMutableDataRef v25 = theData;
      }
      uint64_t v7 = (__CFData *)v58;
      if (!(v58 | (unint64_t)v25))
      {
        uint64_t v7 = 0;
        int v10 = 0;
        BOOL v11 = v26;
        BOOL v12 = v17;
        BOOL v6 = 1;
        BOOL v13 = 1;
        goto LABEL_94;
      }
      unsigned int v27 = open(a1, 0);
      if (v27 != -1)
      {
        int v9 = v27;
        int v28 = openFdWithReadContext(a1, v27, &v68, (uint64_t)v66, (uint64_t)&v62);
        BOOL v11 = v26;
        BOOL v29 = v17;
        BOOL v12 = v17;
        if (!v28)
        {
          int v56 = v29;
          if (!BYTE8(v63))
          {
LABEL_43:
            BOOL v13 = 0;
LABEL_93:
            BOOL v6 = 1;
            int v10 = 1;
            goto LABEL_94;
          }
          --HIDWORD(v63);
          BOOL v55 = v26;
          if (v7)
          {
            MutableBytePtr = CFDataGetMutableBytePtr(v7);
            CFStringRef v31 = MutableBytePtr;
            if (HIDWORD(v63) != *(_DWORD *)(MutableBytePtr + 21)
              || (uint64_t v32 = v60, __PAIR128__(*((unint64_t *)&v62 + 1), v60) != *(_OWORD *)(MutableBytePtr + 25))
              || (uint64_t v33 = v59, (void)v59 != *(void *)(MutableBytePtr + 41)))
            {
              if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
                dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_181);
              }
              if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
              {
                BOOL v13 = 0;
                int v43 = 0;
                int v44 = 1;
                goto LABEL_68;
              }
              CFStringRef v40 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Invalid chunk list cache for \"%s\", type:%u, mtime:%llu/%llu, ino:%llu/%llu, generation:%u/%u, sz:%llu/%llu\n", a2, v31[20], *(void *)(v31 + 25), (void)v60, *(void *)(v31 + 33), *((void *)&v62 + 1), *(unsigned int *)(v31 + 21), HIDWORD(v63), *(void *)(v31 + 41), (void)v59);
              if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
                dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_185_0);
              }
              uint64_t v41 = CK_DEFAULT_LOG_INTERNAL_0;
              if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 138543362;
                CFStringRef v70 = v40;
                _os_log_impl(&dword_215163000, v41, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
              }
              uint64_t v42 = 0;
              BOOL v13 = 0;
              int v43 = 0;
              int v44 = 1;
              if (!v40)
              {
LABEL_68:
                BOOL v12 = v44 != 0;
                if (!theData) {
                  goto LABEL_93;
                }
                uint64_t v45 = CFDataGetMutableBytePtr(theData);
                unint64_t v46 = v45;
                if (HIDWORD(v63) == *(_DWORD *)(v45 + 21))
                {
                  uint64_t v47 = v60;
                  if (__PAIR128__(*((unint64_t *)&v62 + 1), v60) == *(_OWORD *)(v45 + 25))
                  {
                    uint64_t v48 = v59;
                    if ((void)v59 == *(void *)(v45 + 41))
                    {
                      *(_DWORD *)(v45 + 21) = HIDWORD(v60);
                      *(void *)(v45 + 25) = v47;
                      *(void *)(v45 + 33) = *((void *)&v59 + 1);
                      *(void *)(v45 + 41) = v48;
                      if (!setFileSignatureCacheBlob((uint64_t)v67, theData))
                      {
                        if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
                          dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_208);
                        }
                        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
                        {
                          CFStringRef v49 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Fixed up file signature cache for \"%s\" (%llu)\n", a2, *((void *)&v59 + 1));
                          if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
                            dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_215);
                          }
                          long long v50 = CK_DEFAULT_LOG_INTERNAL_0;
                          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
                          {
                            *(_DWORD *)buf = 138543362;
                            CFStringRef v70 = v49;
                            _os_log_impl(&dword_215163000, v50, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
                          }
                          int v43 = 1;
                          int v51 = v55;
                          if (!v49) {
                            goto LABEL_92;
                          }
                          goto LABEL_90;
                        }
                        int v43 = 1;
                      }
                      int v51 = v55;
                      goto LABEL_92;
                    }
                  }
                }
                if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
                  dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_200);
                }
                if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
                {
                  int v51 = 1;
                  goto LABEL_92;
                }
                CFStringRef v49 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Invalid file signature cache for \"%s\", type:%u, mtime:%llu/%llu, ino:%llu/%llu, generation:%u/%u, sz:%llu/%llu\n", a2, v46[20], *(void *)(v46 + 25), (void)v60, *(void *)(v46 + 33), *((void *)&v62 + 1), *(unsigned int *)(v46 + 21), HIDWORD(v63), *(void *)(v46 + 41), (void)v59);
                if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
                  dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_204);
                }
                int64_t v52 = CK_DEFAULT_LOG_INTERNAL_0;
                if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 138543362;
                  CFStringRef v70 = v49;
                  _os_log_impl(&dword_215163000, v52, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
                }
                int v51 = 1;
                if (!v49) {
                  goto LABEL_92;
                }
LABEL_90:
                CFRelease(v49);
LABEL_92:
                BOOL v11 = v51 != 0;
                BOOL v13 = v43 != 0;
                goto LABEL_93;
              }
LABEL_64:
              CFRelease(v40);
              BOOL v13 = v42;
              int v43 = v42;
              goto LABEL_68;
            }
            *(_DWORD *)(MutableBytePtr + 21) = HIDWORD(v60);
            *(void *)(MutableBytePtr + 25) = v32;
            *(void *)(MutableBytePtr + 33) = *((void *)&v59 + 1);
            *(void *)(MutableBytePtr + 41) = v33;
            if (setChunkListCacheBlob((uint64_t)v67, v7)) {
              goto LABEL_43;
            }
            if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_189);
            }
            if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
            {
              CFStringRef v40 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Fixed up chunk list cache for \"%s\" (%llu)\n", a2, *((void *)&v59 + 1));
              if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
                dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_196);
              }
              int64_t v54 = CK_DEFAULT_LOG_INTERNAL_0;
              if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 138543362;
                CFStringRef v70 = v40;
                _os_log_impl(&dword_215163000, v54, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
              }
              uint64_t v42 = 1;
              BOOL v13 = 1;
              int v43 = 1;
              int v44 = v56;
              if (!v40) {
                goto LABEL_68;
              }
              goto LABEL_64;
            }
            BOOL v13 = 1;
            int v43 = 1;
          }
          else
          {
            BOOL v13 = 0;
            int v43 = 0;
          }
          int v44 = v56;
          goto LABEL_68;
        }
LABEL_55:
        int v10 = 0;
        BOOL v13 = 0;
        BOOL v6 = 1;
        goto LABEL_94;
      }
      if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_173);
      }
      BOOL v11 = v26;
      BOOL v12 = v17;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR)) {
        goto LABEL_55;
      }
      CFAllocatorRef v34 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      uint64_t v35 = *__error();
      uint64_t v36 = __error();
      CFStringRef v37 = strerror(*v36);
      CFStringRef v38 = CFStringCreateWithFormat(v34, 0, @"open failed on \"%s\": %d (%s)\n", a1, v35, v37);
      if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_177);
      }
      CFStringRef v39 = CK_DEFAULT_LOG_INTERNAL_0;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        CFStringRef v70 = v38;
        _os_log_impl(&dword_215163000, v39, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v38) {
        CFRelease(v38);
      }
      int v10 = 0;
      BOOL v13 = 0;
      BOOL v6 = 1;
    }
    int v9 = -1;
  }
LABEL_94:
  if (theData) {
    CFRelease(theData);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (v6 && v12) {
    setCacheBlob((uint64_t)v67, (uint64_t)"com.apple.cscache", 0);
  }
  if (v6 && v11)
  {
    setFileSignatureCacheBlob((uint64_t)v67, 0);
    if (!v10) {
      goto LABEL_102;
    }
  }
  else if (!v10)
  {
LABEL_102:
    if (!v6) {
      goto LABEL_104;
    }
    goto LABEL_103;
  }
  closeFdWithReadContext((uint64_t)v68, (uint64_t)v66);
  if (v6) {
LABEL_103:
  }
    closeFdWithReadContext((uint64_t)v67, (uint64_t)v65);
LABEL_104:
  if (v9 != -1) {
    close(v9);
  }
  if (v8 != -1) {
    close(v8);
  }
  return v13;
}

os_log_t __CKFixupChunkCacheAfterExchangeData_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __CKFixupChunkCacheAfterExchangeData_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __CKFixupChunkCacheAfterExchangeData_block_invoke_162()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __CKFixupChunkCacheAfterExchangeData_block_invoke_2_166()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __CKFixupChunkCacheAfterExchangeData_block_invoke_170()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __CKFixupChunkCacheAfterExchangeData_block_invoke_2_174()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __CKFixupChunkCacheAfterExchangeData_block_invoke_178()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __CKFixupChunkCacheAfterExchangeData_block_invoke_2_182()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __CKFixupChunkCacheAfterExchangeData_block_invoke_186()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __CKFixupChunkCacheAfterExchangeData_block_invoke_2_193()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __CKFixupChunkCacheAfterExchangeData_block_invoke_197()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __CKFixupChunkCacheAfterExchangeData_block_invoke_2_201()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __CKFixupChunkCacheAfterExchangeData_block_invoke_205()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __CKFixupChunkCacheAfterExchangeData_block_invoke_2_212()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

uint64_t openFdUncached(uint64_t a1, char **a2, CFErrorRef *a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v4 = openFd(a1, a2, a3);
  if (v4)
  {
    CFDataRef v5 = *a2;
    if ((*((_WORD *)*a2 + 16) & 0xF000) != 0xA000)
    {
      uint64_t v6 = *((void *)v5 + 13);
      uint64_t v7 = *((unsigned int *)v5 + 9);
      if (make_fd_uncached(*((_DWORD *)v5 + 9)))
      {
        if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_221);
        }
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEFAULT))
        {
          CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
          uint64_t v9 = *((void *)v5 + 5);
          uint64_t v10 = *__error();
          BOOL v11 = __error();
          BOOL v12 = strerror(*v11);
          CFStringRef v13 = CFStringCreateWithFormat(v8, 0, @"make_fd_uncached failed for fd:%d, path:\"%s\", ino:%llu: %d (%s)\n", v7, v6, v9, v10, v12);
          if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_227_0);
          }
          unsigned int v14 = CK_DEFAULT_LOG_INTERNAL_0;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138543362;
            CFStringRef v17 = v13;
            _os_log_impl(&dword_215163000, v14, OS_LOG_TYPE_DEFAULT, "%{public}@", buf, 0xCu);
          }
          if (v13) {
            CFRelease(v13);
          }
        }
      }
    }
  }
  return v4;
}

os_log_t __openFdUncached_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __openFdUncached_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __getChunkListCache_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __getChunkListCache_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __getChunkListCache_block_invoke_249()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __getChunkListCache_block_invoke_2_256()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __getChunkListCache_block_invoke_260()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __getChunkListCache_block_invoke_2_267()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __getChunkListCache_block_invoke_271()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __getChunkListCache_block_invoke_2_278()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __getChunkListCache_block_invoke_282()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __getChunkListCache_block_invoke_2_289()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __getChunkListCache_block_invoke_294()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __getChunkListCache_block_invoke_2_301()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __getChunkListCache_block_invoke_305()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __getChunkListCache_block_invoke_2_312()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkUsingChunkCache_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkUsingChunkCache_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkUsingChunkCache_block_invoke_329()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkUsingChunkCache_block_invoke_2_336()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkUsingChunkCache_block_invoke_340()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkUsingChunkCache_block_invoke_2_347()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkUsingChunkCache_block_invoke_351()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkUsingChunkCache_block_invoke_2_358()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkUsingChunkCache_block_invoke_363()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkUsingChunkCache_block_invoke_2_370()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkUsingChunkCache_block_invoke_374()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkUsingChunkCache_block_invoke_2_381()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkUsingChunkCache_block_invoke_385()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkUsingChunkCache_block_invoke_2_392()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkUsingChunkCache_block_invoke_396()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkUsingChunkCache_block_invoke_2_403()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkUsingChunkCache_block_invoke_407()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkUsingChunkCache_block_invoke_2_414()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkUsingChunkCache_block_invoke_421()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkUsingChunkCache_block_invoke_2_428()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

uint64_t _SetSourceChunk(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 136);
  if (*(void *)(v2 + 8)) {
    _SetSourceChunk_cold_4();
  }
  if (*(void *)(v2 + 64)) {
    _SetSourceChunk_cold_3();
  }
  CFDataRef v5 = malloc_type_malloc(4uLL, 0x100004052888210uLL);
  *(void *)(v2 + 8) = v5;
  if (!v5) {
    return 0xFFFFFFFFLL;
  }
  *(_DWORD *)(v2 + 80) = 0;
  *(void *)(v2 + 72) = a2;
  if (!CKChunkSignatureGeneratorCreate((void *)(v2 + 64), *(const void **)(a1 + 152))
    || !*(void *)(v2 + 64))
  {
    return 0xFFFFFFFFLL;
  }
  if (*(void *)(v2 + 32)) {
    _SetSourceChunk_cold_2();
  }
  if (*(void *)(v2 + 56)) {
    _SetSourceChunk_cold_1();
  }
  uint64_t result = 0;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 48) = 0;
  *(void *)(v2 + 56) = 0;
  return result;
}

void _ClearSourceChunk(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 136);
  uint64_t v2 = *(void **)(v1 + 8);
  if (v2)
  {
    free(v2);
    *(void *)(v1 + 8) = 0;
  }
  int v3 = *(_DWORD *)(v1 + 48);
  *(void *)(v1 + 40) = 0;
  uint64_t v4 = *(void **)(v1 + 56);
  if (v3)
  {
    if (!v4) {
      _ClearSourceChunk_cold_2();
    }
    free(v4);
    *(void *)(v1 + 48) = 0;
    *(void *)(v1 + 56) = 0;
  }
  else if (v4)
  {
    _ClearSourceChunk_cold_1();
  }
  CFDataRef v5 = *(const void **)(v1 + 64);
  if (v5) {
    CKBaseRelease(v5);
  }
  *(void *)(v1 + 64) = 0;
  uint64_t v6 = *(const void **)(v1 + 32);
  if (v6) {
    CKBaseRelease(v6);
  }
  *(void *)(v1 + 32) = 0;
}

os_log_t __chunkerFileReadBufferSize_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkerFileReadBufferSize_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

uint64_t CSfixed_subchunk_stream(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, char a5)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a1 + 136);
  CFTypeRef v34 = 0;
  if (!a3) {
    CSfixed_subchunk_stream_cold_1();
  }
  unint64_t v8 = a3;
  uint64_t v10 = (uint64_t *)(v5 + 32);
  float v11 = (float)a4;
  while (1)
  {
    uint64_t v12 = *v10;
    if (!*v10)
    {
      CKChunkDigestArgumentsV1Create(&v34, 0, 0);
      if (!CKChunkSignatureGeneratorCreate((void *)(v5 + 32), v34)) {
        break;
      }
      uint64_t v12 = *v10;
      if (!*v10) {
        break;
      }
    }
    unint64_t v13 = *(void *)(v5 + 40) % a4;
    if (v13 + v8 < a4 && (a5 & 1) == 0)
    {
      CKChunkSignatureGeneratorUpdate(v12);
      uint64_t v30 = 0;
      *(void *)(v5 + 40) += v8;
      goto LABEL_43;
    }
    unint64_t v14 = a4 - v13;
    if (v14 >= v8) {
      unint64_t v15 = v8;
    }
    else {
      unint64_t v15 = v14;
    }
    CKChunkSignatureGeneratorUpdate(v12);
    if (!CKChunkSignatureGeneratorFinish(*v10))
    {
      if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_583_0);
      }
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
      {
        CFStringRef v31 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"CKChunkSignatureGeneratorFinish failed\n");
        if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_589);
        }
        uint64_t v32 = CK_DEFAULT_LOG_INTERNAL_0;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          CFStringRef v36 = v31;
          _os_log_impl(&dword_215163000, v32, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
        }
        if (v31) {
          CFRelease(v31);
        }
      }
      *(void *)(v5 + 64) = 0;
      break;
    }
    uint64_t v16 = (unsigned char *)CKChunkDigestResultsChunkSignature(0);
    size_t v17 = CKSchemeAndSignatureSize(v16);
    unsigned int v19 = *(_DWORD *)(v5 + 48);
    unsigned int v18 = *(_DWORD *)(v5 + 52);
    if (v19 <= v18)
    {
      float v20 = (float)(2 * v19);
      float v21 = ceilf((float)v8 / v11);
      if (v21 >= v20) {
        float v20 = v21;
      }
      uint64_t v22 = v20;
      *(_DWORD *)(v5 + 48) = v22;
      long long v23 = *(void **)(v5 + 56);
      size_t v24 = v17 * v22 + 1;
      if (v23) {
        CFMutableDataRef v25 = malloc_type_realloc(v23, v24, 0x674AC3AAuLL);
      }
      else {
        CFMutableDataRef v25 = malloc_type_calloc(1uLL, v24, 0x22A8B203uLL);
      }
      *(void *)(v5 + 56) = v25;
      unsigned int v18 = *(_DWORD *)(v5 + 52);
    }
    if (v18)
    {
      BOOL v26 = (void *)(*(void *)(v5 + 56) + v17 * v18 + 1);
      if (!v16) {
        goto LABEL_48;
      }
    }
    else
    {
      if (a4 >= 0x40000) {
        CSfixed_subchunk_stream_cold_2();
      }
      unsigned int v27 = *(unsigned char **)(v5 + 56);
      *unsigned int v27 = a4 >> 10;
      BOOL v26 = v27 + 1;
      if (!v16) {
LABEL_48:
      }
        CSfixed_subchunk_stream_cold_3();
    }
    memcpy(v26, v16, v17);
    unsigned int v28 = *(_DWORD *)(v5 + 52);
    if (v28 >= 0x50) {
      CSfixed_subchunk_stream_cold_4();
    }
    *(_DWORD *)(v5 + 52) = v28 + 1;
    if (v34) {
      CFRelease(v34);
    }
    CFTypeRef v34 = 0;
    if (*v10) {
      CFRelease((CFTypeRef)*v10);
    }
    unint64_t v29 = *(void *)(v5 + 40) + v15;
    *(void *)(v5 + 32) = 0;
    *(void *)(v5 + 40) = v29;
    a2 += v15;
    v8 -= v15;
    if (!v8)
    {
      uint64_t v30 = 0;
      goto LABEL_43;
    }
  }
  uint64_t v30 = -1;
LABEL_43:
  if (v34) {
    CFRelease(v34);
  }
  CFTypeRef v34 = 0;
  if (*v10) {
    CFRelease((CFTypeRef)*v10);
  }
  *uint64_t v10 = 0;
  return v30;
}

uint64_t CS_fixed_chunk_stream_accumulate(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v6 = *(void *)(a1 + 136);
  CKChunkSignatureGeneratorUpdate(*(void *)(v6 + 64));
  if (*(unsigned char *)(a1 + 179)) {
    goto LABEL_7;
  }
  uint64_t v7 = *(void **)(v6 + 8);
  uint64_t v8 = *(unsigned int *)(v6 + 80);
  if (!v7)
  {
    if (v8) {
      CS_fixed_chunk_stream_accumulate_cold_1();
    }
    uint64_t v8 = 0;
  }
  uint64_t v9 = (char *)malloc_type_realloc(v7, v8 + a3, 0x31267478uLL);
  if (v9)
  {
    *(void *)(v6 + 8) = v9;
    memcpy(&v9[*(unsigned int *)(v6 + 80)], a2, a3);
LABEL_7:
    uint64_t result = 0;
    *(_DWORD *)(v6 + 80) += a3;
    return result;
  }
  free(*(void **)(v6 + 8));
  *(void *)(v6 + 8) = 0;
  return 0xFFFFFFFFLL;
}

uint64_t CSchunklist_add_stream(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 136);
  if (CKChunkSignatureGeneratorFinish(*(void *)(v2 + 64)))
  {
    int v3 = *(const void **)(v2 + 64);
    if (v3) {
      CKBaseRelease(v3);
    }
    *(void *)(v2 + 64) = 0;
    if (*(_DWORD *)(v2 + 80))
    {
      CopyChunkSignatureAndKeyFromChunkDigestResults(v2 + 72, 0);
      if (*(unsigned char *)(a1 + 179))
      {
        *(void *)uint64_t v2 = *(void *)(a1 + 56);
      }
      else
      {
        *(unsigned char *)(v2 + 25) = 1;
        *(void *)uint64_t v2 = *(unsigned int *)(a1 + 36);
      }
      *(void *)uint64_t v2 = *(void *)(a1 + 56);
      uint64_t v9 = *(void *)(a1 + 440);
      *(void *)(a1 + 440) = v9 + 1;
      *(void *)(v2 + 16) = v9;
      uint64_t v10 = *(unsigned int *)(v2 + 80);
      uint64_t v11 = *(void *)(a1 + 256) + 56 * *(unsigned int *)(a1 + 252);
      *(void *)(v11 + 40) += v10;
      ++*(_DWORD *)(v11 + 48);
      *(void *)(a1 + 424) += v10;
      if (!*(unsigned char *)(a1 + 184)) {
        goto LABEL_49;
      }
      memset(v18, 0, 43);
      CShex_to_string((char *)(v2 + 84), 21, (uint64_t)v18);
      uint64_t v12 = *(const char **)(a1 + 112);
      if (*(void *)(a1 + 544))
      {
        bzero(buf, 0x400uLL);
        snprintf((char *)buf, 0x400uLL, "\"%s\": %llu, %llu, o:0x%llx, sz:0x%x(%u), s:%s\n", v12, *(void *)(a1 + 56), *(void *)(v2 + 16), *(void *)(v2 + 72), *(_DWORD *)(v2 + 80), *(_DWORD *)(v2 + 80), (const char *)v18);
        strcat(*(char **)(a1 + 544), (const char *)buf);
        if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_615);
        }
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_49;
        }
        CFStringRef v13 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"\"%s\": %llu, %lld, o:0x%llx, sz:0x%x(%u), s:%s\n", v12, *(void *)(a1 + 56), *(void *)(v2 + 16), *(void *)(v2 + 72), *(unsigned int *)(v2 + 80), *(unsigned int *)(v2 + 80), v18, 0);
        if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_622);
        }
        unint64_t v14 = CK_DEFAULT_LOG_INTERNAL_0;
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_47;
        }
        *(_DWORD *)buf = 138543362;
        CFStringRef v17 = v13;
      }
      else
      {
        if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_626);
        }
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_49;
        }
        unint64_t v15 = "E";
        if (*(char *)(v2 + 84) >= 0) {
          unint64_t v15 = "-";
        }
        CFStringRef v13 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"\"%s\": %s, %lld, o:0x%llx, sz:0x%x(%u), s:%s\n", v12, v15, *(void *)(v2 + 16), *(void *)(v2 + 72), *(unsigned int *)(v2 + 80), *(unsigned int *)(v2 + 80), v18, 0);
        if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_635);
        }
        unint64_t v14 = CK_DEFAULT_LOG_INTERNAL_0;
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_47;
        }
        *(_DWORD *)buf = 138543362;
        CFStringRef v17 = v13;
      }
      _os_log_impl(&dword_215163000, v14, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
LABEL_47:
      if (v13) {
        CFRelease(v13);
      }
LABEL_49:
      if (*(unsigned char *)(a1 + 180)) {
        return 0;
      }
      else {
        return (*(uint64_t (**)(uint64_t))(a1 + 128))(a1);
      }
    }
    if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_603);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
    {
      CFStringRef v7 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Ignoring attempt to add 0 length chunk\n");
      if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_610);
      }
      uint64_t v8 = CK_DEFAULT_LOG_INTERNAL_0;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        CFStringRef v17 = v7;
        _os_log_impl(&dword_215163000, v8, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      if (v7) {
        CFRelease(v7);
      }
    }
    return 0;
  }
  else
  {
    if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_596);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"CKChunkSignatureGeneratorFinish failed\n");
      if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_599);
      }
      uint64_t v5 = CK_DEFAULT_LOG_INTERNAL_0;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        CFStringRef v17 = v4;
        _os_log_impl(&dword_215163000, v5, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v4) {
        CFRelease(v4);
      }
    }
    *(void *)(v2 + 64) = 0;
    return 0xFFFFFFFFLL;
  }
}

unsigned char *CopyChunkSignatureAndKeyFromChunkDigestResults(uint64_t a1, uint64_t a2)
{
  CFStringRef v4 = (unsigned char *)CKChunkDigestResultsChunkSignature(a2);
  uint64_t v5 = (unsigned __int8 *)CKChunkDigestResultsChunkKey(a2);
  if (v4)
  {
    size_t v6 = CKChunkSchemeAndSignatureSize(v4);
    memcpy((void *)(a1 + 12), v4, v6);
  }
  uint64_t result = (unsigned char *)(a1 + 12);
  if (*(char *)(a1 + 12) < 0 && v5)
  {
    uint64_t v8 = (void *)(a1 + CKChunkSchemeAndSignatureSize(result) + 12);
    size_t v9 = CKChunkSchemeAndEncryptionKeySize(v5);
    return memcpy(v8, v5, v9);
  }
  return result;
}

double CSchunklist_add(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)&v38[1002] = *MEMORY[0x263EF8340];
  uint64_t v10 = *(void *)(a1 + 136);
  char v11 = CKChunkDigestArgumentsChunkScheme(*(void *)(a1 + 152));
  if (!a4)
  {
    CFStringRef v13 = *(char **)(a1 + 544);
    if (v13)
    {
      bzero(v38, 0x3E2uLL);
      strcpy((char *)__s2, "  === segment end marker ===\n");
      strcat(v13, (const char *)__s2);
    }
    *(void *)(v10 + 8) = 0;
    goto LABEL_66;
  }
  if ((int)a5 <= 0)
  {
    if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_648);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
    {
      CFStringRef v14 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Ignoring attempt to add a chunk with invalid length %d.\n", a5);
      if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_654);
      }
      unint64_t v15 = CK_DEFAULT_LOG_INTERNAL_0;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__s2 = 138543362;
        *(void *)&__s2[4] = v14;
        _os_log_impl(&dword_215163000, v15, OS_LOG_TYPE_DEBUG, "%{public}@", __s2, 0xCu);
      }
      if (v14) {
        CFRelease(v14);
      }
    }
  }
  else
  {
    char v12 = v11;
    if (*(unsigned char *)(a1 + 179))
    {
      *(void *)uint64_t v10 = *(void *)(a1 + 56);
    }
    else
    {
      *(unsigned char *)(v10 + 25) = 1;
      *(void *)uint64_t v10 = *(unsigned int *)(a1 + 36);
    }
    *(void *)(v10 + 72) = a3;
    *(_DWORD *)(v10 + 80) = a5;
    *(void *)(v10 + 8) = a4;
    *(void *)(v10 + 16) = a2;
    uint64_t v16 = *(void *)(a1 + 256) + 56 * *(unsigned int *)(a1 + 252);
    *(void *)(v16 + 40) += a5;
    ++*(_DWORD *)(v16 + 48);
    if (*(unsigned char *)(a1 + 183)) {
      *(void *)(a1 + 480) = mach_absolute_time();
    }
    CFTypeRef v33 = 0;
    int v17 = CKCalculateChunkSignatureAndEncryptionKey(*(void *)(v10 + 8), *(unsigned int *)(v10 + 80), *(const void **)(a1 + 152), &v33);
    if ((v12 & 0x80) == 0)
    {
      if (!v17) {
        goto LABEL_78;
      }
      CopyChunkSignatureAndKeyFromChunkDigestResults(v10 + 72, (uint64_t)v33);
      if (v33) {
        CKBaseRelease(v33);
      }
      CFTypeRef v33 = 0;
LABEL_39:
      if (*(unsigned char *)(a1 + 183)) {
        *(void *)(a1 + 488) += mach_absolute_time() - *(void *)(a1 + 480);
      }
      if (!*(unsigned char *)(a1 + 184)) {
        goto LABEL_65;
      }
      size_t v24 = *(const char **)(a1 + 112);
      char v36 = 0;
      memset(v35, 0, sizeof(v35));
      memset(v34, 0, 43);
      unsigned int v25 = *(_DWORD *)(v10 + 80);
      if (v25 >= 0x50) {
        uint64_t v26 = 80;
      }
      else {
        uint64_t v26 = v25;
      }
      CShex_to_string((char *)(v10 + 84), 21, (uint64_t)v34);
      CShex_to_string((char *)(*(void *)(v10 + 8) + (*(_DWORD *)(v10 + 80) - v26)), v26, (uint64_t)v35);
      if (*(void *)(a1 + 544))
      {
        bzero(__s2, 0x400uLL);
        snprintf((char *)__s2, 0x400uLL, "\"%s\": %llu, %lld, o:0x%llx, sz:0x%x(%u), s:%s, (%u, %s)\n", v24, *(void *)(a1 + 56), a2, a3, a5, a5, (const char *)v34, v26, (const char *)v35);
        strcat(*(char **)(a1 + 544), (const char *)__s2);
        if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_681);
        }
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_65;
        }
        CFStringRef v27 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"\"%s\": %llu, %lld, o:0x%llx, sz:0x%x(%u), s:%s, (%u, %s)\n", v24, *(void *)(a1 + 56), a2, a3, a5, a5, v34, v26, v35);
        if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_688_0);
        }
        unsigned int v28 = CK_DEFAULT_LOG_INTERNAL_0;
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
        {
LABEL_63:
          if (v27) {
            CFRelease(v27);
          }
LABEL_65:
          *(void *)(a1 + 424) += *(unsigned int *)(v10 + 80);
LABEL_66:
          if (!*(unsigned char *)(a1 + 180)) {
            (*(void (**)(uint64_t))(a1 + 128))(a1);
          }
          goto LABEL_78;
        }
        *(_DWORD *)__s2 = 138543362;
        *(void *)&__s2[4] = v27;
      }
      else
      {
        if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_692);
        }
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_65;
        }
        unint64_t v29 = "E";
        if ((v12 & 0x80) == 0) {
          unint64_t v29 = "-";
        }
        CFStringRef v27 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"\"%s\": %s, %llu, o:0x%llx, sz:0x%x(%u), s:%s", v24, v29, a2, a3, a5, a5, v34);
        if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_699);
        }
        unsigned int v28 = CK_DEFAULT_LOG_INTERNAL_0;
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_63;
        }
        *(_DWORD *)__s2 = 138543362;
        *(void *)&__s2[4] = v27;
      }
      _os_log_impl(&dword_215163000, v28, OS_LOG_TYPE_DEBUG, "%{public}@", __s2, 0xCu);
      goto LABEL_63;
    }
    if (!v17) {
      goto LABEL_78;
    }
    CopyChunkSignatureAndKeyFromChunkDigestResults(v10 + 72, (uint64_t)v33);
    if (v33) {
      CKBaseRelease(v33);
    }
    CFTypeRef v33 = 0;
    if (*(unsigned char *)(a1 + 179)) {
      goto LABEL_39;
    }
    if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_658);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
    {
      CFStringRef v18 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"encrypting\n");
      if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_665);
      }
      uint64_t v19 = CK_DEFAULT_LOG_INTERNAL_0;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__s2 = 138543362;
        *(void *)&__s2[4] = v18;
        _os_log_impl(&dword_215163000, v19, OS_LOG_TYPE_DEBUG, "%{public}@", __s2, 0xCu);
      }
      if (v18) {
        CFRelease(v18);
      }
    }
    uint64_t v20 = *(void *)(v10 + 8);
    uint64_t v21 = *(unsigned int *)(v10 + 80);
    CFTypeRef v22 = v33;
    uint64_t v23 = CKChunkDigestResultsChunkLength((uint64_t)v33);
    if (doEncrypt(v20, v21, v22, v23)) {
      goto LABEL_39;
    }
    if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_669);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v30 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"doEncrypt failed\n");
      if (CK_DEFAULT_LOG_BLOCK_0 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_676);
      }
      CFStringRef v31 = CK_DEFAULT_LOG_INTERNAL_0;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__s2 = 138543362;
        *(void *)&__s2[4] = v30;
        _os_log_impl(&dword_215163000, v31, OS_LOG_TYPE_ERROR, "%{public}@", __s2, 0xCu);
      }
      if (v30) {
        CFRelease(v30);
      }
    }
  }
LABEL_78:
  *(void *)(v10 + 80) = 0;
  double result = 0.0;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)uint64_t v10 = 0u;
  return result;
}

os_log_t __setChunkListCache_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __setChunkListCache_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __setChunkListCache_block_invoke_718()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __setChunkListCache_block_invoke_2_725()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __setChunkListCache_block_invoke_729()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __setChunkListCache_block_invoke_2_736()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __setChunkListCache_block_invoke_740()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __setChunkListCache_block_invoke_3()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __setChunkListCache_block_invoke_757()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __setChunkListCache_block_invoke_3_768()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __setChunkListCache_block_invoke_772()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __setChunkListCache_block_invoke_2_779()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __setChunkListCache_block_invoke_784()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __setChunkListCache_block_invoke_2_791()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __setChunkListCache_block_invoke_795()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __setChunkListCache_block_invoke_2_802()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

void CSParametersFinalize(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void *CSParameters_Create()
{
  return malloc_type_calloc(1uLL, 8uLL, 0x80040B8603338uLL);
}

uint64_t CSChunkCryptor_Destroy(uint64_t a1, CFErrorRef *a2)
{
  if (a1 && (CFStringRef v4 = *(void **)(a1 + 56)) != 0)
  {
    uint64_t v5 = (void *)v4[1];
    if (v5)
    {
      free(v5);
      v4[1] = 0;
    }
    size_t v6 = (const void *)v4[7];
    if (v6)
    {
      CFRelease(v6);
      v4[7] = 0;
    }
    CFStringRef v7 = (const void *)v4[8];
    if (v7)
    {
      CFRelease(v7);
      v4[8] = 0;
    }
    uint64_t v8 = (const void *)v4[9];
    if (v8)
    {
      CFRelease(v8);
      v4[9] = 0;
    }
    size_t v9 = (void *)v4[11];
    if (v9) {
      free(v9);
    }
    free(v4);
    *(void *)(a1 + 56) = 0;
    return 1;
  }
  else
  {
    CFErrorRef v11 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (CFErrorDomain)*MEMORY[0x263EFFC60], 6, 0);
    uint64_t result = 0;
    *a2 = v11;
  }
  return result;
}

uint64_t CSChunkCryptor_InitializeEncryptor(uint64_t a1, const __CFData *a2, const __CFData *a3, unint64_t a4, unint64_t a5, CFErrorRef *a6)
{
  if (a5 >= a4)
  {
    if (_CSChunkCryptor_Initialize(a1, a2, a3, a4, a5, a6))
    {
      uint64_t result = 1;
      *(unsigned char *)(*(void *)(a1 + 56) + 48) = 1;
      return result;
    }
  }
  else
  {
    *a6 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (CFErrorDomain)*MEMORY[0x263EFFC60], 0, 0);
  }
  uint64_t result = 0;
  *(void *)(a1 + 56) = 0;
  return result;
}

uint64_t _CSChunkCryptor_Initialize(uint64_t a1, CFDataRef theData, const __CFData *a3, uint64_t a4, uint64_t a5, CFErrorRef *a6)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (CFDataGetLength(theData) != 32)
  {
    CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFStringRef v15 = (const __CFString *)*MEMORY[0x263EFFC60];
    CFIndex v16 = 5;
    goto LABEL_7;
  }
  char v12 = (char *)malloc_type_malloc(0x60uLL, 0x1060040A3E8CD77uLL);
  if (!v12)
  {
    CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFStringRef v15 = (const __CFString *)*MEMORY[0x263EFFC60];
    CFIndex v16 = 1;
    goto LABEL_7;
  }
  CFStringRef v13 = (uint64_t *)v12;
  *((void *)v12 + 2) = a4;
  *((void *)v12 + 3) = a5;
  *(_WORD *)(v12 + 49) = 256;
  *((void *)v12 + 4) = 0;
  *((void *)v12 + 5) = 0;
  ccsha256_di();
  memset(v25, 0, sizeof(v25));
  memset(v24, 0, sizeof(v24));
  *(_OWORD *)bytes = 0u;
  long long v23 = 0u;
  CFDataGetLength(theData);
  CFDataGetBytePtr(theData);
  if (cchkdf())
  {
    free(v13);
    cc_clear();
    CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFStringRef v15 = (const __CFString *)*MEMORY[0x263EFFC60];
    CFIndex v16 = 2;
LABEL_7:
    CFErrorRef v17 = CFErrorCreate(v14, v15, v16, 0);
    uint64_t result = 0;
    *a6 = v17;
    return result;
  }
  CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  v13[7] = (uint64_t)CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], bytes, 32);
  v13[8] = (uint64_t)CFDataCreate(v19, (const UInt8 *)v24, 32);
  v13[9] = (uint64_t)CFDataCreate(v19, (const UInt8 *)v25, 32);
  cc_clear();
  uint64_t v20 = ccsha256_di();
  *CFStringRef v13 = v20;
  v13[1] = (uint64_t)malloc_type_malloc(*(void *)(v20 + 8) + *(void *)(v20 + 16) + 12, 0x9A780352uLL);
  ccdigest_init();
  CFDataGetBytePtr(a3);
  if (CFDataGetLength(a3) <= 31) {
    CFDataGetLength(a3);
  }
  __memcpy_chk();
  ccsha256_di();
  CFDataGetLength((CFDataRef)v13[8]);
  CFDataGetBytePtr((CFDataRef)v13[8]);
  cchmac();
  uint64_t v21 = (size_t *)ccaes_ctr_crypt_mode();
  v13[10] = (uint64_t)v21;
  v13[11] = (uint64_t)malloc_type_malloc(*v21, 0x723D0EC1uLL);
  CFDataGetLength((CFDataRef)v13[9]);
  CFDataGetBytePtr((CFDataRef)v13[9]);
  ccctr_init();
  *(void *)(a1 + 56) = v13;
  cc_clear();
  cc_clear();
  return 1;
}

uint64_t CSChunkCryptor_InitializeDecryptor(uint64_t a1, const __CFData *a2, const __CFData *a3, unint64_t a4, unint64_t a5, CFErrorRef *a6)
{
  if (a5 >= a4)
  {
    if (_CSChunkCryptor_Initialize(a1, a2, a3, a4, a5, a6))
    {
      *(unsigned char *)(*(void *)(a1 + 56) + 48) = 0;
      return 1;
    }
  }
  else
  {
    *a6 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (CFErrorDomain)*MEMORY[0x263EFFC60], 0, 0);
  }
  uint64_t result = 0;
  *(void *)(a1 + 56) = 0;
  return result;
}

uint64_t CSChunkCryptor_Update(uint64_t a1, uint64_t a2, unsigned int a3, CFErrorRef *a4)
{
  uint64_t v4 = *(void *)(a1 + 56);
  if (!v4)
  {
    CFErrorRef v9 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (CFErrorDomain)*MEMORY[0x263EFFC60], 7, 0);
    uint64_t result = 0;
    *a4 = v9;
    return result;
  }
  if (*(unsigned char *)(v4 + 49))
  {
    unint64_t v6 = 0;
    unint64_t v7 = a3;
  }
  else
  {
    uint64_t v11 = *(void *)(v4 + 32);
    unint64_t v7 = a3;
    unint64_t v12 = v11 + a3;
    unint64_t v13 = *(void *)(v4 + 16);
    unint64_t v14 = v13 - v11;
    if (v12 <= v13) {
      unint64_t v6 = a3;
    }
    else {
      unint64_t v6 = v14;
    }
  }
  if (v7 > v6) {
    *(unsigned char *)(v4 + 49) = 1;
  }
  if (v6 && *(unsigned char *)(v4 + 48)) {
    ccdigest_update();
  }
  ccctr_update();
  *(void *)(v4 + 32) += v7;
  int v15 = *(unsigned __int8 *)(v4 + 48);
  if (v6 && !*(unsigned char *)(v4 + 48))
  {
    ccdigest_update();
    int v15 = *(unsigned __int8 *)(v4 + 48);
  }
  if (v15) {
    return 1;
  }
  uint64_t result = 1;
  if (*(unsigned char *)(v4 + 49))
  {
    unint64_t v16 = v7 - v6;
    if (v7 > v6)
    {
      char v17 = *(unsigned char *)(v4 + 50);
      CFStringRef v18 = (unsigned __int8 *)(a2 + v6);
      do
      {
        int v19 = *v18++;
        v17 &= v19 == 0;
        *(unsigned char *)(v4 + 50) = v17;
        --v16;
      }
      while (v16);
      return 1;
    }
  }
  return result;
}

uint64_t CSChunkCryptor_Finalize(uint64_t a1, uint64_t a2, uint64_t a3, CFErrorRef *a4)
{
  uint64_t v5 = *(void *)(a1 + 56);
  if (!v5)
  {
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFStringRef v8 = (const __CFString *)*MEMORY[0x263EFFC60];
    CFIndex v9 = 7;
    goto LABEL_17;
  }
  cc_clear();
  free(*(void **)(v5 + 88));
  *(void *)(v5 + 88) = 0;
  (*(void (**)(void))(*(void *)v5 + 56))();
  cc_clear();
  if (!*(void *)(a1 + 24)) {
    goto LABEL_10;
  }
  ccsha256_di();
  CFDataGetLength(*(CFDataRef *)(a1 + 24));
  CFDataGetBytePtr(*(CFDataRef *)(a1 + 24));
  if (!cchkdf())
  {
    if (cchkdf())
    {
      CFIndex v9 = 2;
LABEL_16:
      CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      CFStringRef v8 = (const __CFString *)*MEMORY[0x263EFFC60];
      goto LABEL_17;
    }
    CFDataGetBytePtr(*(CFDataRef *)(v5 + 56));
    int v10 = cc_cmp_safe();
    cc_clear();
    cc_clear();
    cc_clear();
    if (v10)
    {
      CFIndex v9 = 4;
      goto LABEL_16;
    }
LABEL_10:
    if (*(unsigned char *)(v5 + 48)
      || (ccsha256_di(),
          CFDataGetLength(*(CFDataRef *)(v5 + 56)),
          CFDataGetBytePtr(*(CFDataRef *)(v5 + 56)),
          cchmac(),
          !cc_cmp_safe()))
    {
      if (*(unsigned char *)(v5 + 50)) {
        return 1;
      }
      CFIndex v9 = 8;
    }
    else
    {
      CFIndex v9 = 0;
    }
    goto LABEL_16;
  }
  cc_clear();
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFStringRef v8 = (const __CFString *)*MEMORY[0x263EFFC60];
  CFIndex v9 = 2;
LABEL_17:
  CFErrorRef v12 = CFErrorCreate(v7, v8, v9, 0);
  uint64_t result = 0;
  *a4 = v12;
  return result;
}

uint64_t _CreateCFInstanceZeroed(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, size_t a5)
{
  os_unfair_lock_lock((os_unfair_lock_t)&registered_classes_lock);
  CFDictionaryRef Mutable = (const __CFDictionary *)registered_classes;
  if (!registered_classes)
  {
    CFDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], 0);
    registered_classes = (uint64_t)Mutable;
  }
  if (!CFDictionaryGetValue(Mutable, a2))
  {
    int v10 = (char *)malloc_type_calloc(1uLL, 0x68uLL, 0x10D0040D425F453uLL);
    *(void *)int v10 = 0;
    *((void *)v10 + 1) = a3;
    *((void *)v10 + 2) = 0;
    *((void *)v10 + 3) = 0;
    *((void *)v10 + 4) = a4;
    *(_OWORD *)(v10 + 40) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    *((void *)v10 + 12) = _CFRuntimeRegisterClass();
    CFDictionarySetValue((CFMutableDictionaryRef)registered_classes, a2, v10);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&registered_classes_lock);
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v12 = Instance;
  if (Instance) {
    bzero((void *)(Instance + 16), a5);
  }
  return v12;
}

uint64_t cs_rwlock_init(uint64_t a1)
{
  uint64_t result = pthread_rwlock_init((pthread_rwlock_t *)a1, 0);
  if (!result) {
    uint64_t result = pthread_mutex_init((pthread_mutex_t *)(a1 + 200), 0);
  }
  *(void *)(a1 + 264) = 0;
  return result;
}

uint64_t cs_rwlock_destroy(uint64_t a1)
{
  uint64_t result = pthread_rwlock_destroy((pthread_rwlock_t *)a1);
  if (!result) {
    uint64_t result = pthread_mutex_destroy((pthread_mutex_t *)(a1 + 200));
  }
  *(void *)(a1 + 264) = 0;
  return result;
}

uint64_t cs_unlock(uint64_t a1)
{
  uint64_t v2 = *(_opaque_pthread_t **)(a1 + 264);
  int v3 = pthread_self();
  if (pthread_equal(v2, v3))
  {
    *(void *)(a1 + 264) = 0;
    uint64_t result = pthread_rwlock_unlock((pthread_rwlock_t *)a1);
    if (!result)
    {
      return pthread_mutex_unlock((pthread_mutex_t *)(a1 + 200));
    }
  }
  else
  {
    return pthread_rwlock_unlock((pthread_rwlock_t *)a1);
  }
  return result;
}

uint64_t cs_longrdlock(uint64_t a1)
{
  uint64_t v2 = (pthread_mutex_t *)(a1 + 200);
  uint64_t v3 = pthread_mutex_lock((pthread_mutex_t *)(a1 + 200));
  if (!v3)
  {
    uint64_t v3 = pthread_rwlock_rdlock((pthread_rwlock_t *)a1);
    if (v3) {
      pthread_mutex_unlock(v2);
    }
    *(void *)(a1 + 264) = 0;
  }
  return v3;
}

uint64_t cs_longrdunlock(uint64_t a1)
{
  if (*(void *)(a1 + 264)) {
    cs_longrdunlock_cold_1();
  }
  uint64_t result = pthread_rwlock_unlock((pthread_rwlock_t *)a1);
  if (!result)
  {
    return pthread_mutex_unlock((pthread_mutex_t *)(a1 + 200));
  }
  return result;
}

uint64_t cs_wrlock(uint64_t a1)
{
  uint64_t v2 = (pthread_mutex_t *)(a1 + 200);
  uint64_t v3 = pthread_mutex_lock((pthread_mutex_t *)(a1 + 200));
  if (!v3)
  {
    uint64_t v3 = pthread_rwlock_wrlock((pthread_rwlock_t *)a1);
    if (v3) {
      pthread_mutex_unlock(v2);
    }
    else {
      *(void *)(a1 + 264) = pthread_self();
    }
  }
  return v3;
}

CFStringRef CKChunkStoreCreate(uint64_t a1, const __CFURL *a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1);
    }
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    CFStringRef v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"ERROR: NULL location parameter");
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_8);
    }
    uint64_t v5 = CK_DEFAULT_LOG_INTERNAL_1;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
      goto LABEL_19;
    }
    *(_DWORD *)buffer = 138543362;
    CFStringRef v13 = v4;
    unint64_t v6 = buffer;
    goto LABEL_18;
  }
  bzero(buffer, 0x400uLL);
  if (CFURLGetFileSystemRepresentation(a2, 1u, buffer, 1024)) {
    return _CSChunkStoreCreate();
  }
  if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_12);
  }
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
  {
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFStringRef v8 = __error();
    CFIndex v9 = strerror(*v8);
    CFStringRef v4 = CFStringCreateWithFormat(v7, 0, @"CFURLGetFileSystemRepresentation(%s) error: %s\n", buffer, v9);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_19);
    }
    uint64_t v5 = CK_DEFAULT_LOG_INTERNAL_1;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
      goto LABEL_19;
    }
    *(_DWORD *)buf = 138543362;
    CFStringRef v11 = v4;
    unint64_t v6 = buf;
LABEL_18:
    _os_log_impl(&dword_215163000, v5, OS_LOG_TYPE_ERROR, "%{public}@", v6, 0xCu);
LABEL_19:
    if (v4) {
      CFRelease(v4);
    }
  }
  return 0;
}

os_log_t __CKChunkStoreCreate_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __CKChunkStoreCreate_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __CKChunkStoreCreate_block_invoke_9()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __CKChunkStoreCreate_block_invoke_2_16()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

CFStringRef _CSChunkStoreCreate()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  char v2 = v1;
  int v4 = v3;
  int v6 = v5;
  CFStringRef v8 = v7;
  int v10 = v9;
  uint64_t v11 = v0;
  uint64_t v86 = *MEMORY[0x263EF8340];
  bzero(__str, 0x400uLL);
  bzero(__s1, 0x400uLL);
  uint64_t v12 = &new_ringing[131];
  memset(&v77, 0, sizeof(v77));
  if (!v8 && v4)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1490);
    }
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    CFStringRef v13 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"read only location and no tmp path makes ChunkStore unhappy!");
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1496);
    }
    uint64_t v14 = CK_DEFAULT_LOG_INTERNAL_1;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v85[0].__pn_.__r_.__value_.__l.__data_) = 138543362;
      *(std::string::size_type *)((char *)v85[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
LABEL_43:
      _os_log_impl(&dword_215163000, v14, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)v85, 0xCu);
      goto LABEL_44;
    }
    goto LABEL_44;
  }
  char alloc = v2;
  int v75 = v6;
  if (!gVerbose)
  {
    if (getenv("CK_CHUNKSTORE_VERBOSE")) {
      int v15 = 2;
    }
    else {
      int v15 = 1;
    }
    gVerbose = v15;
  }
  unint64_t v16 = getenv("CS_LOG_PATH");
  CKPointerHash(v16);
  char v17 = getenv("CHUNK_STORE_UNIT_TESTS");
  CFStringRef v18 = getenv("CS_LOG_VERBOSE");
  if (getenv("CS_LOG_STDOUT"))
  {
    CKPointerHash(1);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1505);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
    {
      CFStringRef v19 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"logging to stdout\n");
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1512);
      }
      uint64_t v20 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(v85[0].__pn_.__r_.__value_.__l.__data_) = 138543362;
        *(std::string::size_type *)((char *)v85[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v19;
        _os_log_impl(&dword_215163000, v20, OS_LOG_TYPE_DEBUG, "%{public}@", (uint8_t *)v85, 0xCu);
      }
      uint64_t v12 = &new_ringing[131];
      if (v19) {
        CFRelease(v19);
      }
    }
  }
  if ((unint64_t)v17 | (unint64_t)v18)
  {
    CKPointerHash(7);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1516);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
    {
      CFStringRef v21 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"log debug enabled\n");
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1523);
      }
      CFTypeRef v22 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(v85[0].__pn_.__r_.__value_.__l.__data_) = 138543362;
        *(std::string::size_type *)((char *)v85[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v21;
        _os_log_impl(&dword_215163000, v22, OS_LOG_TYPE_DEBUG, "%{public}@", (uint8_t *)v85, 0xCu);
      }
      if (v21) {
        CFRelease(v21);
      }
    }
  }
  if (!stat(v10, &v77))
  {
    if (snprintf(__str, 0x400uLL, "%s/%s", v10, ".cs") > 0x3FF) {
      return 0;
    }
    if ((v4 & 1) == 0 && mkdir(__str, 0x1C0u) && *__error() != 17)
    {
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1540);
      }
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
      CFAllocatorRef v30 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      uint64_t v31 = *__error();
      uint64_t v32 = __error();
      CFTypeRef v33 = strerror(*v32);
      CFStringRef v13 = CFStringCreateWithFormat(v30, 0, @"unable to create directory: %s : %d:%s", __str, v31, v33);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1547);
      }
      uint64_t v14 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v85[0].__pn_.__r_.__value_.__l.__data_) = 138543362;
        *(std::string::size_type *)((char *)v85[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
        goto LABEL_43;
      }
      goto LABEL_44;
    }
    if (gVerbose == 2)
    {
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1551);
      }
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG)
        && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
      {
        CFStringRef v26 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"path:%s", __str);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1561);
        }
        CFStringRef v27 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(v85[0].__pn_.__r_.__value_.__l.__data_) = 138543362;
          *(std::string::size_type *)((char *)v85[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v26;
          _os_log_impl(&dword_215163000, v27, OS_LOG_TYPE_DEBUG, "%{public}@", (uint8_t *)v85, 0xCu);
        }
        if (v26) {
          CFRelease(v26);
        }
      }
    }
    uint64_t CFInstanceZeroed = _CreateCFInstanceZeroed(v11, @"struct __CSChunkStore", (uint64_t)"struct __CSChunkStore", (uint64_t)_CSChunkStoreCSChunkStoreFinalize, 0x218uLL);
    if (!CFInstanceZeroed)
    {
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1569);
      }
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
      CFStringRef v13 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"unable to create chunk store object for %s", v10);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1576);
      }
      uint64_t v14 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v85[0].__pn_.__r_.__value_.__l.__data_) = 138543362;
        *(std::string::size_type *)((char *)v85[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
        goto LABEL_43;
      }
      goto LABEL_44;
    }
    CFStringRef v13 = (CFStringRef)CFInstanceZeroed;
    *(unsigned char *)(CFInstanceZeroed + 17) = v4;
    *(unsigned char *)(CFInstanceZeroed + 16) = alloc;
    *(void *)(CFInstanceZeroed + 112) = strdup(__str);
    LODWORD(v13[4].isa) = v77.st_dev;
    LODWORD(v13[3].info) = v75;
    LODWORD(v13[17].isa) = 0;
    if (!v8 || !v4)
    {
LABEL_67:
      cs_rwlock_init((uint64_t)&v13[8].data);
      pthread_mutex_init((pthread_mutex_t *)&v13[4].data, 0);
      pthread_cond_init((pthread_cond_t *)&v13[6].data, 0);
      pthread_mutex_init((pthread_mutex_t *)&v13[1], 0);
      v13[4].info = (uint64_t)CFSetCreateMutable(0, 0, MEMORY[0x263EFFFA0]);
      cs_wrlock((uint64_t)&v13[8].data);
      p_CFIndex length = &v13->length;
      if (v13->length) {
        goto LABEL_68;
      }
      bzero(v80, 0x400uLL);
      if (!BYTE1(v13->data))
      {
        int v76 = v10;
        size_t v41 = strlen(v13[3].data);
        if (snprintf(v80, 0x400uLL, "%s/%s", v13[3].data, "ChunkStoreDatabase") < 0x400)
        {
          uint64_t v37 = &v80[v41 + 1];
          char v72 = *v37;
          goto LABEL_112;
        }
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1642);
        }
        uint64_t v12 = &new_ringing[131];
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
          goto LABEL_185;
        }
        CFStringRef v51 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"safe_snprintf truncated %s", v80);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1646);
        }
        int64_t v54 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v85[0].__pn_.__r_.__value_.__l.__data_) = 138543362;
          *(std::string::size_type *)((char *)v85[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v51;
          _os_log_impl(&dword_215163000, v54, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)v85, 0xCu);
        }
        int v10 = v76;
        if (!v51) {
          goto LABEL_185;
        }
        goto LABEL_165;
      }
      if (CKChunkStoreRelocateDB((uint64_t)v13))
      {
        if (snprintf(v80, 0x400uLL, "%s/%s/%s", (const char *)v13[3].length, ".cs", "ChunkStoreDatabase") < 0x400)
        {
          int v76 = v10;
          uint64_t v37 = 0;
          char v72 = 0;
LABEL_112:
          CFAllocatorRef alloca = (const __CFAllocator *)*MEMORY[0x263EFFB08];
          while (2)
          {
            int v42 = CSopenDB(v80, (sqlite3 **)&v13->length, LODWORD(v13[3].info) != 0);
            if (v42 != 5)
            {
              if (!v42)
              {
                uint64_t v64 = *p_length;
                *p_CFIndex length = *p_length;
                uint64_t v12 = new_ringing + 1048;
                int v10 = v76;
                if (v64)
                {
LABEL_68:
                  if (!LODWORD(v13[3].info)) {
                    v13[8].info = (uint64_t)malloc_type_calloc(5uLL, 8uLL, 0x2004093837F09uLL);
                  }
                  cs_unlock((uint64_t)&v13[8].data);
                  CKCheckChunkStoreDB((uint64_t)v13);
                  if (LODWORD(v13[3].info) && _CSBeginTransactionSqlRc((uint64_t)v13)) {
                    goto LABEL_45;
                  }
                  return v13;
                }
LABEL_186:
                if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                  dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1603);
                }
                if (os_log_type_enabled((os_log_t)v12[398], OS_LOG_TYPE_ERROR))
                {
                  uint64_t v61 = v12;
                  CFStringRef v62 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"unable open chunk store database for %s", v10);
                  if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1610);
                  }
                  long long v63 = v61[398];
                  if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
                  {
                    LODWORD(v85[0].__pn_.__r_.__value_.__l.__data_) = 138543362;
                    *(std::string::size_type *)((char *)v85[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v62;
                    _os_log_impl(&dword_215163000, v63, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)v85, 0xCu);
                  }
                  if (v62) {
                    CFRelease(v62);
                  }
                }
                cs_unlock((uint64_t)&v13[8].data);
                goto LABEL_45;
              }
              break;
            }
            if (!BYTE1(v13->data))
            {
              char *v37 = 0;
              bzero(v85, 0x400uLL);
              bzero(&__to, 0x400uLL);
              if ((unint64_t)__strlcpy_chk() <= 0x3FF)
              {
                size_t v43 = strlen((const char *)v85);
                if (v43)
                {
                  for (CFNumberRef i = (std::__fs::filesystem::path *)(&v84 + v43);
                        v85 <= i;
                        CFNumberRef i = (std::__fs::filesystem::path *)((char *)i - 1))
                  {
                    int v45 = i->__pn_.__r_.__value_.__s.__data_[0];
                    if (v45 != 47 && v45 != 92) {
                      break;
                    }
                    i->__pn_.__r_.__value_.__s.__data_[0] = 0;
                  }
                  if (v85[0].__pn_.__r_.__value_.__s.__data_[0])
                  {
                    int v46 = 1;
                    while (1)
                    {
                      if (snprintf((char *)&__to, 0x400uLL, "%s_old_%u", (const char *)v85, v46) > 0x3FF) {
                        goto LABEL_175;
                      }
                      if (access((const char *)&__to, 0)) {
                        break;
                      }
                      if (++v46 == 0x40000)
                      {
                        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1672);
                        }
                        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
                          goto LABEL_177;
                        }
                        CFStringRef v55 = CFStringCreateWithFormat(alloca, 0, @"can't rename \"%s\", too many old files (%u)\n", v85, 0x40000);
                        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1678);
                        }
                        int v56 = CK_DEFAULT_LOG_INTERNAL_1;
                        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)buf = 138543362;
                          CFStringRef v82 = v55;
                          _os_log_impl(&dword_215163000, v56, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
                        }
                        if (v55)
                        {
LABEL_174:
                          CFRelease(v55);
                          goto LABEL_175;
                        }
                        goto LABEL_175;
                      }
                    }
                    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1682);
                    }
                    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
                    {
                      CFStringRef v48 = CFStringCreateWithFormat(alloca, 0, @"renaming \"%s\" to \"%s\"\n", v85, &__to);
                      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1689);
                      }
                      CFStringRef v49 = CK_DEFAULT_LOG_INTERNAL_1;
                      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)buf = 138543362;
                        CFStringRef v82 = v48;
                        _os_log_impl(&dword_215163000, v49, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
                      }
                      if (v48) {
                        CFRelease(v48);
                      }
                    }
                    rename(v85, &__to, v47);
                    if (!v50)
                    {
                      if (!mkdir(v80, 0x1C0u))
                      {
                        char *v37 = v72;
                        continue;
                      }
                      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1661);
                      }
                      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                      {
                        __int16 v69 = __error();
                        CFStringRef v70 = strerror(*v69);
                        CFStringRef v59 = CFStringCreateWithFormat(alloca, 0, @"unable to create directory %s : %s", v80, v70);
                        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1668);
                        }
                        uint64_t v71 = CK_DEFAULT_LOG_INTERNAL_1;
                        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                        {
                          LODWORD(v85[0].__pn_.__r_.__value_.__l.__data_) = 138543362;
                          *(std::string::size_type *)((char *)v85[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v59;
                          _os_log_impl(&dword_215163000, v71, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)v85, 0xCu);
                        }
                        if (v59) {
                          goto LABEL_183;
                        }
                      }
                      break;
                    }
                    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1693);
                    }
                    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
                      goto LABEL_177;
                    }
                    uint64_t v65 = *__error();
                    uint64_t v66 = __error();
                    uint64_t v67 = strerror(*v66);
                    CFStringRef v55 = CFStringCreateWithFormat(alloca, 0, @"unable to rename \"%s\": %d (%s)\n", v85, v65, v67);
                    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1700);
                    }
                    BOOL v68 = CK_DEFAULT_LOG_INTERNAL_1;
                    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 138543362;
                      CFStringRef v82 = v55;
                      _os_log_impl(&dword_215163000, v68, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
                    }
                    if (v55) {
                      goto LABEL_174;
                    }
                  }
                }
              }
LABEL_175:
              if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1650);
              }
LABEL_177:
              if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
              {
                CFStringRef v57 = __error();
                unint64_t v58 = strerror(*v57);
                CFStringRef v59 = CFStringCreateWithFormat(alloca, 0, @"unable to rename old chunk store at %s: %s\n", v80, v58);
                if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                  dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1657);
                }
                long long v60 = CK_DEFAULT_LOG_INTERNAL_1;
                if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                {
                  LODWORD(v85[0].__pn_.__r_.__value_.__l.__data_) = 138543362;
                  *(std::string::size_type *)((char *)v85[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v59;
                  _os_log_impl(&dword_215163000, v60, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)v85, 0xCu);
                }
                if (v59) {
LABEL_183:
                }
                  CFRelease(v59);
              }
            }
            break;
          }
          uint64_t v12 = &new_ringing[131];
          int v10 = v76;
          goto LABEL_185;
        }
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1634);
        }
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
          goto LABEL_185;
        }
        CFStringRef v51 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"safe_snprintf truncated %s", v80);
        int64_t v52 = v10;
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1638);
        }
        CFStringRef v53 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v85[0].__pn_.__r_.__value_.__l.__data_) = 138543362;
          *(std::string::size_type *)((char *)v85[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v51;
          goto LABEL_163;
        }
      }
      else
      {
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1622);
        }
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
          goto LABEL_185;
        }
        CFStringRef v51 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"CKChunkStoreRelocateDB failed to copy database to temp location!");
        int64_t v52 = v10;
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1628);
        }
        CFStringRef v53 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v85[0].__pn_.__r_.__value_.__l.__data_) = 138543362;
          *(std::string::size_type *)((char *)v85[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v51;
LABEL_163:
          _os_log_impl(&dword_215163000, v53, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)v85, 0xCu);
        }
      }
      int v10 = v52;
      if (!v51)
      {
LABEL_185:
        *p_CFIndex length = 0;
        goto LABEL_186;
      }
LABEL_165:
      CFRelease(v51);
      goto LABEL_185;
    }
    if (snprintf(__s1, 0x400uLL, "%s/chunk_store_XXXXXX", v8) >= 0x400)
    {
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1581);
      }
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
        goto LABEL_45;
      }
      CFStringRef v35 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"safe_snprintf truncated %s", __s1);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1588);
      }
      char v36 = CK_DEFAULT_LOG_INTERNAL_1;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
        goto LABEL_108;
      }
      LODWORD(v85[0].__pn_.__r_.__value_.__l.__data_) = 138543362;
      *(std::string::size_type *)((char *)v85[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v35;
    }
    else
    {
      if (mkdtemp(__s1))
      {
        v13[3].CFIndex length = (uint64_t)strdup(__s1);
        goto LABEL_67;
      }
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1592);
      }
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
        goto LABEL_45;
      }
      CFAllocatorRef v38 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      CFStringRef v39 = __error();
      CFStringRef v40 = strerror(*v39);
      CFStringRef v35 = CFStringCreateWithFormat(v38, 0, @"mkdtemp failed to create %s : %s", __s1, v40);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1599);
      }
      char v36 = CK_DEFAULT_LOG_INTERNAL_1;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
LABEL_108:
        if (v35) {
          CFRelease(v35);
        }
        goto LABEL_45;
      }
      LODWORD(v85[0].__pn_.__r_.__value_.__l.__data_) = 138543362;
      *(std::string::size_type *)((char *)v85[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v35;
    }
    _os_log_impl(&dword_215163000, v36, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)v85, 0xCu);
    goto LABEL_108;
  }
  if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1527);
  }
  if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
    return 0;
  }
  CFAllocatorRef v23 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  size_t v24 = __error();
  unsigned int v25 = strerror(*v24);
  CFStringRef v13 = CFStringCreateWithFormat(v23, 0, @"stat failed for %s: %s", v10, v25);
  if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1534);
  }
  uint64_t v14 = CK_DEFAULT_LOG_INTERNAL_1;
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
  {
    LODWORD(v85[0].__pn_.__r_.__value_.__l.__data_) = 138543362;
    *(std::string::size_type *)((char *)v85[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
    goto LABEL_43;
  }
LABEL_44:
  if (v13)
  {
LABEL_45:
    CFRelease(v13);
    return 0;
  }
  return v13;
}

void CKChunkStoreRelease(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

CFStringRef CKChunkStoreCreateAtFilesystemPath()
{
  return _CSChunkStoreCreate();
}

CFStringRef CKChunkStoreCreateAtFilesystemPathWithTmpDir()
{
  return _CSChunkStoreCreate();
}

uint64_t CKChunkStoreIsReadOnly(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 17);
}

BOOL CKChunkStoreIsRegistry(uint64_t a1)
{
  return *(_DWORD *)(a1 + 104) != 0;
}

uint64_t CKChunkStoreInvalidate(uint64_t a1)
{
  uint64_t result = CKLockChunkStore(a1);
  if (!result)
  {
    _CSChunkStoreClose(a1);
    return cs_unlock(a1 + 272);
  }
  return result;
}

uint64_t CKLockChunkStore(uint64_t a1)
{
  char v2 = (atomic_uint *)(a1 + 256);
  atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 256), 1u, memory_order_relaxed);
  uint64_t v3 = a1 + 272;
  uint64_t result = cs_wrlock(a1 + 272);
  atomic_fetch_add_explicit(v2, 0xFFFFFFFF, memory_order_relaxed);
  if (!result)
  {
    if (*(void *)(a1 + 24))
    {
      return 0;
    }
    else
    {
      cs_unlock(v3);
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

void _CSChunkStoreClose(uint64_t a1)
{
  if (*(void *)(a1 + 264))
  {
    for (uint64_t i = 0; i != 40; i += 8)
      _CSCloseStorageFile(a1, *(_DWORD **)(*(void *)(a1 + 264) + i), 0);
  }
  if (*(void *)(a1 + 24))
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 32));
    CFDictionaryRef v3 = *(const __CFDictionary **)(a1 + 96);
    if (v3)
    {
      CFDictionaryApplyFunction(v3, (CFDictionaryApplierFunction)_CSFinalizeDBStmts, (void *)a1);
      CFRelease(*(CFTypeRef *)(a1 + 96));
      *(void *)(a1 + 96) = 0;
    }
    if (*(_DWORD *)(a1 + 104)) {
      _CSEndTransactionSqlRc(a1);
    }
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 32));
    if (!*(unsigned char *)(a1 + 16)) {
      CScloseDB(*(sqlite3 **)(a1 + 24));
    }
    *(void *)(a1 + 24) = 0;
  }
}

uint64_t CKUnlockChunkStore(uint64_t a1)
{
  return cs_unlock(a1 + 272);
}

uint64_t CKCheckChunkStoreDB(uint64_t result)
{
  if (!*(_DWORD *)(result + 104))
  {
    char v1 = (uint64_t *)result;
    uint64_t result = CKLockChunkStore(result);
    if (!result)
    {
      _CSCheckChunkStoreDB(v1, 0);
      return cs_unlock((uint64_t)(v1 + 34));
    }
  }
  return result;
}

uint64_t *_CSCheckChunkStoreDB(uint64_t *result, sqlite3_int64 a2)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)result + 17)) {
    return result;
  }
  uint64_t v3 = (uint64_t)result;
  uint64_t result = _CSRemovePendingBatchesForInode((uint64_t)result, a2);
  if (*(unsigned char *)(v3 + 17)) {
    return result;
  }
  if (a2)
  {
    uint64_t result = (uint64_t *)_CSPrepareStatement(v3, @"SELECT pft_rowid, pft_token FROM CSStoragePendingFileChunklistTable where pft_inode = ?", "SELECT pft_rowid, pft_token FROM CSStoragePendingFileChunklistTable where pft_inode = ?");
    if (!result) {
      return result;
    }
    int v4 = result;
    uint64_t v5 = sqlite3_bind_int64((sqlite3_stmt *)result[2], 1, a2);
    if (v5)
    {
      uint64_t v6 = v5;
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1734);
      }
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFStringRef v8 = sqlite3_errmsg(*(sqlite3 **)(v3 + 24));
        CFStringRef v9 = CFStringCreateWithFormat(v7, 0, @"sqlite3_bind_int64 for inode: %lld returned: %d (%s)\n", a2, v6, v8);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1740);
        }
        int v10 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          CFStringRef v41 = v9;
          _os_log_impl(&dword_215163000, v10, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
        }
        uint64_t v11 = 0;
        goto LABEL_14;
      }
      uint64_t v11 = 0;
      goto LABEL_64;
    }
  }
  else
  {
    uint64_t result = (uint64_t *)_CSPrepareStatement(v3, @"SELECT pft_rowid, pft_token FROM CSStoragePendingFileChunklistTable", "SELECT pft_rowid, pft_token FROM CSStoragePendingFileChunklistTable");
    int v4 = result;
    if (!result) {
      return result;
    }
  }
  uint64_t v11 = _CSPrepareStatement(v3, @"SELECT clt_count, clt_chunkRowIDs FROM CSStorageChunkListTable WHERE clt_rowid = ?", "SELECT clt_count, clt_chunkRowIDs FROM CSStorageChunkListTable WHERE clt_rowid = ?");
  if (!v11) {
    goto LABEL_64;
  }
  CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  while (1)
  {
    uint64_t v12 = CS_sqlite3_step(v4);
    if (v12 != 100) {
      break;
    }
    sqlite3_int64 v13 = sqlite3_column_int64((sqlite3_stmt *)v4[2], 0);
    sqlite3_int64 v14 = sqlite3_column_int64((sqlite3_stmt *)v4[2], 1);
    if (!a2) {
      goto LABEL_39;
    }
    memset(&v37, 0, sizeof(v37));
    bzero(buf, 0x400uLL);
    if (CKChunkStoreGetLocation(v3, buf, 0x400uLL))
    {
      if (stat((const char *)buf, &v37))
      {
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1763);
        }
        uint64_t v15 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)CFAllocatorRef v38 = 136315138;
          *(void *)CFStringRef v39 = buf;
          unint64_t v16 = v15;
          char v17 = "stat failed for \"%s\"";
          uint32_t v18 = 12;
LABEL_38:
          _os_log_impl(&dword_215163000, v16, OS_LOG_TYPE_ERROR, v17, v38, v18);
        }
      }
      else
      {
        dev_t st_dev = v37.st_dev;
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1782);
        }
        CFStringRef v21 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)CFAllocatorRef v38 = 67109632;
          *(_DWORD *)CFStringRef v39 = st_dev;
          *(_WORD *)&v39[4] = 2048;
          *(void *)&v39[6] = a2;
          *(_WORD *)&v39[14] = 2048;
          *(void *)&v39[16] = 0x8000;
          _os_log_impl(&dword_215163000, v21, OS_LOG_TYPE_ERROR, "fsopen(%d,%llu,0x%0llx): unimplemented; returning -1\n",
            v38,
            0x1Cu);
          if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1771);
          }
        }
        uint64_t v22 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          uint64_t v23 = v37.st_dev;
          size_t v24 = __error();
          unsigned int v25 = strerror(*v24);
          *(_DWORD *)CFAllocatorRef v38 = 134218498;
          *(void *)CFStringRef v39 = v23;
          *(_WORD *)&v39[8] = 2048;
          *(void *)&v39[10] = a2;
          *(_WORD *)&v39[18] = 2080;
          *(void *)&v39[20] = v25;
          unint64_t v16 = v22;
          char v17 = "open (%lld,%lld) failed: %s";
          uint32_t v18 = 32;
          goto LABEL_38;
        }
      }
    }
    else
    {
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1767);
      }
      uint64_t v19 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)CFAllocatorRef v38 = 0;
        unint64_t v16 = v19;
        char v17 = "CKChunkStoreGetLocation failed\n";
        uint32_t v18 = 2;
        goto LABEL_38;
      }
    }
LABEL_39:
    sqlite3_bind_int64(v11[2], 1, v14);
    uint64_t v26 = CS_sqlite3_step((uint64_t *)v11);
    if (v26 == 100)
    {
      sqlite3_int64 v27 = sqlite3_column_int64(v11[2], 0);
      unsigned int v28 = (sqlite3_int64 *)sqlite3_column_blob(v11[2], 1);
      if (_CSBeginTransactionSqlRc(v3)) {
        goto LABEL_64;
      }
      _CSReleaseOrphanedChunks(v3, v28, v27);
      if (_CSEndTransactionSqlRc(v3)) {
        _CSRollbackTransactionSqlRc(v3);
      }
    }
    else
    {
      uint64_t v29 = v26;
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1744);
      }
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        CFAllocatorRef v30 = sqlite3_errmsg(*(sqlite3 **)(v3 + 24));
        CFStringRef v31 = CFStringCreateWithFormat(alloc, 0, @"sqlite3_step returned: %d (%s), listToken: %llu\n", v29, v30, v14);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1751);
        }
        uint64_t v32 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          CFStringRef v41 = v31;
          _os_log_impl(&dword_215163000, v32, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
        }
        if (v31) {
          CFRelease(v31);
        }
      }
    }
    if (sqlite3_reset(v11[2]) || sqlite3_clear_bindings(v11[2])) {
      goto LABEL_64;
    }
    CSsql_corruption_checking_do_0(v3, *(sqlite3 **)(v3 + 24), "DELETE FROM CSStoragePendingFileChunklistTable WHERE pft_rowid = %lld", v13);
  }
  uint64_t v33 = v12;
  if (v12 != 101)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1756);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      CFTypeRef v34 = sqlite3_errmsg(*(sqlite3 **)(v3 + 24));
      CFStringRef v9 = CFStringCreateWithFormat(alloc, 0, @"sqlite3_step returned: %d (%s)\n", v33, v34);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1760);
      }
      CFStringRef v35 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        CFStringRef v41 = v9;
        _os_log_impl(&dword_215163000, v35, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
LABEL_14:
      if (v9) {
        CFRelease(v9);
      }
    }
  }
LABEL_64:
  _CSFinishPreparedStatement((uint64_t *)v11);
  return _CSFinishPreparedStatement(v4);
}

uint64_t CKCleanChunkStoreDBForInode(uint64_t *a1, sqlite3_int64 a2)
{
  uint64_t result = CKLockChunkStore((uint64_t)a1);
  if (!result)
  {
    _CSCheckChunkStoreDB(a1, a2);
    return cs_unlock((uint64_t)(a1 + 34));
  }
  return result;
}

BOOL CKChunkStoreGetLocation(uint64_t a1, void *a2, size_t a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(const char **)(a1 + 112);
  size_t v6 = strlen(v5) + 1;
  if (v6 > a3)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_22);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v7 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"bufLen is too small: %lu", a3);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_28);
      }
      CFStringRef v8 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        CFStringRef v11 = v7;
        _os_log_impl(&dword_215163000, v8, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v7) {
        CFRelease(v7);
      }
    }
  }
  else
  {
    memcpy(a2, v5, v6);
  }
  return v6 <= a3;
}

os_log_t __CKChunkStoreGetLocation_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __CKChunkStoreGetLocation_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

BOOL copyfile_callback(int a1, int a2, int a3, char *__s1)
{
  return strstr(__s1, "ChunkStorage") || strstr(__s1, "ChunkStoreNoCopy") != 0;
}

uint64_t CKChunkStoreRelocateDB(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  char v2 = copyfile_state_alloc();
  if (v2)
  {
    uint64_t v3 = v2;
    if (copyfile_state_set(v2, 6u, copyfile_callback))
    {
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_43);
      }
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_31;
      }
      uint64_t v4 = (uint64_t)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"copyfile_state_set failed");
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_50);
      }
      uint64_t v5 = CK_DEFAULT_LOG_INTERNAL_1;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
      {
LABEL_29:
        if (!v4)
        {
LABEL_32:
          copyfile_state_free(v3);
          return v4;
        }
        CFRelease((CFTypeRef)v4);
LABEL_31:
        uint64_t v4 = 0;
        goto LABEL_32;
      }
      *(_DWORD *)buf = 138543362;
      uint64_t v13 = v4;
    }
    else
    {
      if (!copyfile(*(const char **)(a1 + 112), *(const char **)(a1 + 120), v3, 0x800Fu))
      {
        uint64_t v4 = 1;
        goto LABEL_32;
      }
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_54);
      }
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_31;
      }
      CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      CFStringRef v9 = __error();
      int v10 = strerror(*v9);
      uint64_t v4 = (uint64_t)CFStringCreateWithFormat(v8, 0, @"copyfile failed: %s", v10);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_61_0);
      }
      uint64_t v5 = CK_DEFAULT_LOG_INTERNAL_1;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_29;
      }
      *(_DWORD *)buf = 138543362;
      uint64_t v13 = v4;
    }
    _os_log_impl(&dword_215163000, v5, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
    goto LABEL_29;
  }
  if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_33_0);
  }
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
  {
    CFStringRef v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"copyfile_state_alloc failed");
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_39);
    }
    CFStringRef v7 = CK_DEFAULT_LOG_INTERNAL_1;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138543362;
      uint64_t v13 = (uint64_t)v6;
      _os_log_impl(&dword_215163000, v7, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
    }
    if (v6) {
      CFRelease(v6);
    }
  }
  return 0;
}

os_log_t __CKChunkStoreRelocateDB_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __CKChunkStoreRelocateDB_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __CKChunkStoreRelocateDB_block_invoke_40()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __CKChunkStoreRelocateDB_block_invoke_2_47()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __CKChunkStoreRelocateDB_block_invoke_51()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __CKChunkStoreRelocateDB_block_invoke_2_58()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

BOOL CSRegisterOperation(uint64_t a1, const void *a2)
{
  return registerOperation((pthread_mutex_t *)(a1 + 144), *(const __CFSet **)(a1 + 136), a2);
}

uint64_t CSUnregisterOperation(uint64_t a1, const void *a2)
{
  return unregisterOperation((pthread_mutex_t *)(a1 + 144), (pthread_cond_t *)(a1 + 208), *(__CFSet **)(a1 + 136), a2);
}

uint64_t CSWaitForOperation(uint64_t a1, const void *a2)
{
  return waitForOperation((pthread_mutex_t *)(a1 + 144), (pthread_cond_t *)(a1 + 208), *(const __CFSet **)(a1 + 136), a2);
}

uint64_t CKLockChunkStoreNoFlag(uint64_t a1)
{
  uint64_t v2 = a1 + 272;
  uint64_t result = cs_wrlock(a1 + 272);
  if (!result)
  {
    if (*(void *)(a1 + 24))
    {
      return 0;
    }
    else
    {
      cs_unlock(v2);
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t CKLongReadLockChunkStore(uint64_t a1)
{
  uint64_t v2 = (atomic_uint *)(a1 + 256);
  atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 256), 1u, memory_order_relaxed);
  uint64_t v3 = a1 + 272;
  uint64_t result = cs_longrdlock(a1 + 272);
  atomic_fetch_add_explicit(v2, 0xFFFFFFFF, memory_order_relaxed);
  if (!result)
  {
    if (*(void *)(a1 + 24))
    {
      return 0;
    }
    else
    {
      cs_unlock(v3);
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t CKLongReadUnlockChunkStore(uint64_t a1)
{
  return cs_longrdunlock(a1 + 272);
}

uint64_t CKReadLockChunkStore(uint64_t a1)
{
  uint64_t v2 = (atomic_uint *)(a1 + 256);
  atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 256), 1u, memory_order_relaxed);
  uint64_t v3 = a1 + 272;
  uint64_t result = pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 272));
  atomic_fetch_add_explicit(v2, 0xFFFFFFFF, memory_order_relaxed);
  if (!result)
  {
    if (*(void *)(a1 + 24))
    {
      return 0;
    }
    else
    {
      cs_unlock(v3);
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t CSChunkStoreGetDB(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t CKChunkStoreDefaultProfilerType()
{
  return 0;
}

uint64_t CKChunkStoreSetTestFlags(uint64_t a1, unsigned int a2)
{
  *(_DWORD *)(a1 + 544) = a2;
  CSSetSQLiteCorruptionTestingEnabled(a2 & 1);
  CSSetContinueOnCorruptDB((a2 >> 1) & 1);
  return CSSetExitOnCorruptDB((a2 >> 3) & 1);
}

uint64_t CKChunkStoreResetTestFlags(uint64_t a1)
{
  *(_DWORD *)(a1 + 544) = 0;
  CSSetSQLiteCorruptionTestingEnabled(0);
  CSSetContinueOnCorruptDB(0);
  return CSSetExitOnCorruptDB(0);
}

uint64_t CKChunkStoreTestFlags(uint64_t a1)
{
  return *(unsigned int *)(a1 + 544);
}

uint64_t _CSBeginTransactionSqlRc(uint64_t a1)
{
  int v2 = 0;
  uint64_t v12 = *MEMORY[0x263EF8340];
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 260), (unsigned int *)&v2, 1u, memory_order_relaxed, memory_order_relaxed);
  if (v2)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_64);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v3 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"NESTED TRANSACTION!\n");
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_70);
      }
      uint64_t v4 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        CFStringRef v11 = v3;
        _os_log_impl(&dword_215163000, v4, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v3) {
        CFRelease(v3);
      }
    }
  }
  CFStringRef v9 = 0;
  uint64_t v5 = CS_corruption_checking_sqlite3_exec_0(a1, *(sqlite3 **)(a1 + 24), "BEGIN TRANSACTION", (char **)&v9);
  if (v5)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_75);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Unable to begin transaction: %d (%s)\n", v5, v9);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_82);
      }
      CFStringRef v7 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        CFStringRef v11 = v6;
        _os_log_impl(&dword_215163000, v7, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v6) {
        CFRelease(v6);
      }
    }
    sqlite3_free(v9);
  }
  return v5;
}

uint64_t CS_corruption_checking_sqlite3_exec_0(uint64_t a1, sqlite3 *a2, const char *a3, char **a4)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (CSSQLiteCorruptionTestingEnabled()) {
    uint64_t v8 = CS_corruption_causing_sqlite3_exec(a2, a3, 0, 0, a4);
  }
  else {
    uint64_t v8 = sqlite3_exec(a2, a3, 0, 0, a4);
  }
  uint64_t v9 = v8;
  _CSHandleDatabaseIOError_0(v8);
  if (v9 == 26 || v9 == 11)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2552);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v10 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"chunk store database corruption: detected error %d in sqlite3_exec", v9);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2558);
      }
      CFStringRef v11 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        CFStringRef v14 = v10;
        _os_log_impl(&dword_215163000, v11, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v10) {
        CFRelease(v10);
      }
    }
    _CSHandleCorruptDatabase(a1);
  }
  return v9;
}

uint64_t _CSBeginTransaction(uint64_t a1)
{
  if (_CSBeginTransactionSqlRc(a1)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

uint64_t _CSEndTransactionSqlRc(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v9 = 0;
  uint64_t v2 = CS_corruption_checking_sqlite3_exec_0(a1, *(sqlite3 **)(a1 + 24), "END TRANSACTION", (char **)&v9);
  if (v2)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_86_0);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v3 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Unable to commit transaction: %d (%s)\n", v2, v9);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_92_0);
      }
      uint64_t v4 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        CFStringRef v11 = v3;
        _os_log_impl(&dword_215163000, v4, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v3) {
        CFRelease(v3);
      }
    }
    sqlite3_free(v9);
  }
  int v5 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 260), (unsigned int *)&v5, 0, memory_order_relaxed, memory_order_relaxed);
  if (v5 != 1)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_96_0);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"TRANSACTION COUNT ALREADY ZERO!\n");
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_103_1);
      }
      CFStringRef v7 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        CFStringRef v11 = v6;
        _os_log_impl(&dword_215163000, v7, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v6) {
        CFRelease(v6);
      }
    }
  }
  return v2;
}

uint64_t _CSEndTransaction(uint64_t a1)
{
  if (_CSEndTransactionSqlRc(a1)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

uint64_t _CSRollbackTransactionSqlRc(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  int v5 = 0;
  uint64_t v1 = CS_corruption_checking_sqlite3_exec_0(a1, *(sqlite3 **)(a1 + 24), "ROLLBACK TRANSACTION", (char **)&v5);
  if (v1)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_107_0);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v2 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Unable to rollback transaction: %d (%s)\n", v1, v5);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_113);
      }
      CFStringRef v3 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        CFStringRef v7 = v2;
        _os_log_impl(&dword_215163000, v3, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v2) {
        CFRelease(v2);
      }
    }
    sqlite3_free(v5);
  }
  return v1;
}

uint64_t _CSRollbackTransaction(uint64_t a1)
{
  if (_CSRollbackTransactionSqlRc(a1)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

uint64_t _CSCommitDatabaseTransactions(uint64_t result, char a2)
{
  if (*(_DWORD *)(result + 104))
  {
    uint64_t v2 = result;
    if (a2)
    {
      _CSEndTransactionSqlRc(result);
      return _CSBeginTransactionSqlRc(v2);
    }
    else
    {
      uint64_t result = CKLockChunkStore(result);
      if (!result)
      {
        _CSEndTransactionSqlRc(v2);
        _CSBeginTransactionSqlRc(v2);
        return cs_unlock(v2 + 272);
      }
    }
  }
  return result;
}

uint64_t CKCommitDatabaseTransactions(uint64_t a1)
{
  return _CSCommitDatabaseTransactions(a1, 0);
}

uint64_t __sqlite3_step(uint64_t a1, sqlite3_stmt *a2, const char *a3, uint64_t a4)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  uint64_t v7 = a1 + 272;
  uint64_t v8 = pthread_rwlock_tryrdlock((pthread_rwlock_t *)(a1 + 272));
  if (v8 == 16) {
    return sqlite3_step(a2);
  }
  uint64_t v9 = v8;
  if (v8)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_128);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      CFAllocatorRef v16 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      uint64_t v17 = *__error();
      uint32_t v18 = __error();
      uint64_t v19 = strerror(*v18);
      CFStringRef v20 = CFStringCreateWithFormat(v16, 0, @"pthread_mutex_trylock error: %d:%s res: %d in function %s : %d", v17, v19, v9, a3, a4);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_135);
      }
      CFStringRef v21 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__str = 138543362;
        *(void *)&__str[4] = v20;
        _os_log_impl(&dword_215163000, v21, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)__str, 0xCu);
      }
      if (v20) {
        CFRelease(v20);
      }
    }
    return sqlite3_step(a2);
  }
  long long v55 = 0u;
  long long v56 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  *(_OWORD *)__str = 0u;
  long long v26 = 0u;
  snprintf(__str, 0x200uLL, "*** WARNING: _sqlite3_step called without chunkstore_lock in function %s : %d", a3, a4);
  int v10 = open("/tmp/cs_log.log", 522, 484);
  if (v10 != -1)
  {
    int v11 = v10;
    size_t v12 = strlen(__str);
    write(v11, __str, v12);
    close(v11);
  }
  if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_118);
  }
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
  {
    CFStringRef v13 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"*** WARNING: _sqlite3_step called without chunkstore_lock in function %s : %d", a3, a4);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_124);
    }
    CFStringRef v14 = CK_DEFAULT_LOG_INTERNAL_1;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      CFStringRef v24 = v13;
      _os_log_impl(&dword_215163000, v14, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v13) {
      CFRelease(v13);
    }
  }
  uint64_t v15 = sqlite3_step(a2);
  cs_unlock(v7);
  return v15;
}

os_log_t ____sqlite3_step_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t ____sqlite3_step_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t ____sqlite3_step_block_invoke_125()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t ____sqlite3_step_block_invoke_2_132()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

uint64_t __sqlite3_reset(uint64_t a1, sqlite3_stmt *a2, const char *a3, uint64_t a4)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  uint64_t v7 = a1 + 272;
  uint64_t v8 = pthread_rwlock_tryrdlock((pthread_rwlock_t *)(a1 + 272));
  if (v8 == 16) {
    return sqlite3_reset(a2);
  }
  uint64_t v9 = v8;
  if (v8)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_149);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      CFAllocatorRef v16 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      uint64_t v17 = *__error();
      uint32_t v18 = __error();
      uint64_t v19 = strerror(*v18);
      CFStringRef v20 = CFStringCreateWithFormat(v16, 0, @"pthread_mutex_trylock error: %d:%s res: %d in function %s : %d", v17, v19, v9, a3, a4);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_153);
      }
      CFStringRef v21 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__str = 138543362;
        *(void *)&__str[4] = v20;
        _os_log_impl(&dword_215163000, v21, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)__str, 0xCu);
      }
      if (v20) {
        CFRelease(v20);
      }
    }
    return sqlite3_reset(a2);
  }
  long long v55 = 0u;
  long long v56 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  *(_OWORD *)__str = 0u;
  long long v26 = 0u;
  snprintf(__str, 0x200uLL, "*** WARNING: _sqlite3_reset called without chunkstore_lock in function %s : %d", a3, a4);
  int v10 = open("/tmp/cs_log.log", 522, 484);
  if (v10 != -1)
  {
    int v11 = v10;
    size_t v12 = strlen(__str);
    write(v11, __str, v12);
    close(v11);
  }
  if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_139);
  }
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
  {
    CFStringRef v13 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"*** WARNING: _sqlite3_reset called without chunkstore_lock in function %s : %d", a3, a4);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_145);
    }
    CFStringRef v14 = CK_DEFAULT_LOG_INTERNAL_1;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      CFStringRef v24 = v13;
      _os_log_impl(&dword_215163000, v14, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v13) {
      CFRelease(v13);
    }
  }
  uint64_t v15 = sqlite3_reset(a2);
  cs_unlock(v7);
  return v15;
}

os_log_t ____sqlite3_reset_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t ____sqlite3_reset_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t ____sqlite3_reset_block_invoke_146()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t ____sqlite3_reset_block_invoke_2_150()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

uint64_t __sqlite3_clear_bindings(uint64_t a1, sqlite3_stmt *a2, const char *a3, uint64_t a4)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  uint64_t v7 = a1 + 272;
  uint64_t v8 = pthread_rwlock_tryrdlock((pthread_rwlock_t *)(a1 + 272));
  if (v8 == 16) {
    return sqlite3_clear_bindings(a2);
  }
  uint64_t v9 = v8;
  if (v8)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_167);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      CFAllocatorRef v16 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      uint64_t v17 = *__error();
      uint32_t v18 = __error();
      uint64_t v19 = strerror(*v18);
      CFStringRef v20 = CFStringCreateWithFormat(v16, 0, @"pthread_mutex_trylock error: %d:%s res: %d in function %s : %d", v17, v19, v9, a3, a4);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_171_0);
      }
      CFStringRef v21 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__str = 138543362;
        *(void *)&__str[4] = v20;
        _os_log_impl(&dword_215163000, v21, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)__str, 0xCu);
      }
      if (v20) {
        CFRelease(v20);
      }
    }
    return sqlite3_clear_bindings(a2);
  }
  long long v55 = 0u;
  long long v56 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  *(_OWORD *)__str = 0u;
  long long v26 = 0u;
  snprintf(__str, 0x200uLL, "*** WARNING: _sqlite3_clear_bindings called without chunkstore_lock in function %s : %d", a3, a4);
  int v10 = open("/tmp/cs_log.log", 522, 484);
  if (v10 != -1)
  {
    int v11 = v10;
    size_t v12 = strlen(__str);
    write(v11, __str, v12);
    close(v11);
  }
  if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_157);
  }
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
  {
    CFStringRef v13 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"*** WARNING: _sqlite3_clear_bindings called without chunkstore_lock in function %s : %d", a3, a4);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_163);
    }
    CFStringRef v14 = CK_DEFAULT_LOG_INTERNAL_1;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      CFStringRef v24 = v13;
      _os_log_impl(&dword_215163000, v14, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v13) {
      CFRelease(v13);
    }
  }
  uint64_t v15 = sqlite3_clear_bindings(a2);
  cs_unlock(v7);
  return v15;
}

os_log_t ____sqlite3_clear_bindings_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t ____sqlite3_clear_bindings_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t ____sqlite3_clear_bindings_block_invoke_164()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t ____sqlite3_clear_bindings_block_invoke_2_168()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

uint64_t __sqlite3_finalize(uint64_t a1, sqlite3_stmt *a2, const char *a3, uint64_t a4)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  uint64_t v7 = a1 + 272;
  uint64_t v8 = pthread_rwlock_tryrdlock((pthread_rwlock_t *)(a1 + 272));
  if (v8 == 16) {
    return sqlite3_finalize(a2);
  }
  uint64_t v9 = v8;
  if (v8)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_185_1);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      CFAllocatorRef v16 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      uint64_t v17 = *__error();
      uint32_t v18 = __error();
      uint64_t v19 = strerror(*v18);
      CFStringRef v20 = CFStringCreateWithFormat(v16, 0, @"pthread_mutex_trylock error: %d:%s res: %d in function %s : %d", v17, v19, v9, a3, a4);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_189_0);
      }
      CFStringRef v21 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__str = 138543362;
        *(void *)&__str[4] = v20;
        _os_log_impl(&dword_215163000, v21, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)__str, 0xCu);
      }
      if (v20) {
        CFRelease(v20);
      }
    }
    return sqlite3_finalize(a2);
  }
  long long v55 = 0u;
  long long v56 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  *(_OWORD *)__str = 0u;
  long long v26 = 0u;
  snprintf(__str, 0x200uLL, "*** WARNING: _sqlite3_finalize called without chunkstore_lock in function %s : %d", a3, a4);
  int v10 = open("/tmp/cs_log.log", 522, 484);
  if (v10 != -1)
  {
    int v11 = v10;
    size_t v12 = strlen(__str);
    write(v11, __str, v12);
    close(v11);
  }
  if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_175);
  }
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
  {
    CFStringRef v13 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"*** WARNING: _sqlite3_finalize called without chunkstore_lock in function %s : %d", a3, a4);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_181_0);
    }
    CFStringRef v14 = CK_DEFAULT_LOG_INTERNAL_1;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      CFStringRef v24 = v13;
      _os_log_impl(&dword_215163000, v14, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v13) {
      CFRelease(v13);
    }
  }
  uint64_t v15 = sqlite3_finalize(a2);
  cs_unlock(v7);
  return v15;
}

os_log_t ____sqlite3_finalize_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t ____sqlite3_finalize_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t ____sqlite3_finalize_block_invoke_182()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t ____sqlite3_finalize_block_invoke_2_186()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

uint64_t CS_sqlite3_step(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  uint64_t v2 = (sqlite3_stmt *)a1[2];
  if (CSSQLiteCorruptionTestingEnabled()) {
    uint64_t v3 = CS_corruption_causing_sqlite3_step(v2);
  }
  else {
    uint64_t v3 = sqlite3_step(v2);
  }
  uint64_t v4 = v3;
  _CSHandleDatabaseIOError_0(v3);
  if (v4 == 26 || v4 == 11)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2528);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"chunk store database corruption: detected error %d in sqlite3_step", v4);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2534);
      }
      uint64_t v7 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        CFStringRef v10 = v6;
        _os_log_impl(&dword_215163000, v7, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v6) {
        CFRelease(v6);
      }
    }
    _CSHandleCorruptDatabase(v1);
  }
  return v4;
}

uint64_t CS_sqlite3_reset(uint64_t a1)
{
  return sqlite3_reset(*(sqlite3_stmt **)(a1 + 16));
}

uint64_t CS_sqlite3_clear_bindings(uint64_t a1)
{
  return sqlite3_clear_bindings(*(sqlite3_stmt **)(a1 + 16));
}

uint64_t CS_sqlite3_finalize(uint64_t a1)
{
  return sqlite3_finalize(*(sqlite3_stmt **)(a1 + 16));
}

const void *CS_sqlite3_column_blob(uint64_t a1, int a2)
{
  return sqlite3_column_blob(*(sqlite3_stmt **)(a1 + 16), a2);
}

uint64_t CS_sqlite3_column_bytes(uint64_t a1, int a2)
{
  return sqlite3_column_bytes(*(sqlite3_stmt **)(a1 + 16), a2);
}

uint64_t CS_sqlite3_column_bytes16(uint64_t a1, int a2)
{
  return sqlite3_column_bytes16(*(sqlite3_stmt **)(a1 + 16), a2);
}

double CS_sqlite3_column_double(uint64_t a1, int a2)
{
  return sqlite3_column_double(*(sqlite3_stmt **)(a1 + 16), a2);
}

uint64_t CS_sqlite3_column_int(uint64_t a1, int a2)
{
  return sqlite3_column_int(*(sqlite3_stmt **)(a1 + 16), a2);
}

sqlite3_int64 CS_sqlite3_column_int64(uint64_t a1, int a2)
{
  return sqlite3_column_int64(*(sqlite3_stmt **)(a1 + 16), a2);
}

const unsigned __int8 *CS_sqlite3_column_text(uint64_t a1, int a2)
{
  return sqlite3_column_text(*(sqlite3_stmt **)(a1 + 16), a2);
}

const void *CS_sqlite3_column_text16(uint64_t a1, int a2)
{
  return sqlite3_column_text16(*(sqlite3_stmt **)(a1 + 16), a2);
}

uint64_t CS_sqlite3_column_type(uint64_t a1, int a2)
{
  return sqlite3_column_type(*(sqlite3_stmt **)(a1 + 16), a2);
}

sqlite3_value *CS_sqlite3_column_value(uint64_t a1, int a2)
{
  return sqlite3_column_value(*(sqlite3_stmt **)(a1 + 16), a2);
}

uint64_t CS_sqlite3_bind_blob(uint64_t a1, int a2, const void *a3, int a4, void (__cdecl *a5)(void *))
{
  return sqlite3_bind_blob(*(sqlite3_stmt **)(a1 + 16), a2, a3, a4, a5);
}

uint64_t CS_sqlite3_bind_double(uint64_t a1, int a2, double a3)
{
  return sqlite3_bind_double(*(sqlite3_stmt **)(a1 + 16), a2, a3);
}

uint64_t CS_sqlite3_bind_int(uint64_t a1, int a2, int a3)
{
  return sqlite3_bind_int(*(sqlite3_stmt **)(a1 + 16), a2, a3);
}

uint64_t CS_sqlite3_bind_int64(uint64_t a1, int a2, sqlite3_int64 a3)
{
  return sqlite3_bind_int64(*(sqlite3_stmt **)(a1 + 16), a2, a3);
}

uint64_t CS_sqlite3_bind_null(uint64_t a1, int a2)
{
  return sqlite3_bind_null(*(sqlite3_stmt **)(a1 + 16), a2);
}

uint64_t CS_sqlite3_bind_text(uint64_t a1, int a2, const char *a3, int a4, void (__cdecl *a5)(void *))
{
  return sqlite3_bind_text(*(sqlite3_stmt **)(a1 + 16), a2, a3, a4, a5);
}

uint64_t CS_sqlite3_bind_text16(uint64_t a1, int a2, const void *a3, int a4, void (__cdecl *a5)(void *))
{
  return sqlite3_bind_text16(*(sqlite3_stmt **)(a1 + 16), a2, a3, a4, a5);
}

uint64_t CS_sqlite3_bind_value(uint64_t a1, int a2, const sqlite3_value *a3)
{
  return sqlite3_bind_value(*(sqlite3_stmt **)(a1 + 16), a2, a3);
}

uint64_t CS_sqlite3_bind_zeroblob(uint64_t a1, int a2, int a3)
{
  return sqlite3_bind_zeroblob(*(sqlite3_stmt **)(a1 + 16), a2, a3);
}

sqlite3_stmt **_CSPrepareStatement(uint64_t a1, const void *a2, const char *a3)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (!*(void *)(a1 + 24)) {
    _CSPrepareStatement_cold_1();
  }
  CFStringRef v6 = (pthread_mutex_t *)(a1 + 32);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 32));
  CFDictionaryRef v7 = *(const __CFDictionary **)(a1 + 96);
  if (v7)
  {
    Value = (sqlite3_stmt **)CFDictionaryGetValue(v7, a2);
    if (Value)
    {
      uint64_t v9 = Value;
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 96), a2);
      sqlite3_reset(v9[2]);
      sqlite3_clear_bindings(v9[2]);
      goto LABEL_32;
    }
  }
  else
  {
    *(void *)(a1 + 96) = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], 0);
  }
  uint64_t v9 = (sqlite3_stmt **)malloc_type_malloc(0x18uLL, 0x60040AA6EF139uLL);
  void *v9 = (sqlite3_stmt *)a1;
  v9[1] = (sqlite3_stmt *)a2;
  CFStringRef v10 = *(sqlite3 **)(a1 + 24);
  uint64_t v11 = v9 + 2;
  if (CSSQLiteCorruptionTestingEnabled()) {
    uint64_t v12 = CS_corruption_causing_sqlite3_prepare_v2(v10, a3, -1, v11, 0);
  }
  else {
    uint64_t v12 = sqlite3_prepare_v2(v10, a3, -1, v11, 0);
  }
  uint64_t v13 = v12;
  _CSHandleDatabaseIOError_0(v12);
  if (v13)
  {
    if (v13 == 26 || v13 == 11)
    {
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2561);
      }
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        CFStringRef v14 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"chunk store database corruption: detected error %d in sqlite3_prepare_v2", v13);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2567);
        }
        uint64_t v15 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          CFStringRef v22 = v14;
          _os_log_impl(&dword_215163000, v15, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
        }
        if (v14) {
          CFRelease(v14);
        }
      }
      _CSHandleCorruptDatabase(a1);
    }
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_193);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      CFAllocatorRef v16 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      uint64_t v17 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
      CFStringRef v18 = CFStringCreateWithFormat(v16, 0, @"sqlite3_prepare_v2 returned: %d %s for query \"%s\"\n", v13, v17, a3);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_199);
      }
      uint64_t v19 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        CFStringRef v22 = v18;
        _os_log_impl(&dword_215163000, v19, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v18) {
        CFRelease(v18);
      }
    }
    free(v9);
    uint64_t v9 = 0;
  }
LABEL_32:
  pthread_mutex_unlock(v6);
  return v9;
}

uint64_t *_CSFinishPreparedStatement(uint64_t *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *result;
    sqlite3_reset((sqlite3_stmt *)result[2]);
    sqlite3_clear_bindings((sqlite3_stmt *)v1[2]);
    pthread_mutex_lock((pthread_mutex_t *)(v2 + 32));
    if (CFDictionaryContainsKey(*(CFDictionaryRef *)(v2 + 96), (const void *)v1[1]))
    {
      sqlite3_finalize((sqlite3_stmt *)v1[2]);
      free(v1);
    }
    else
    {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(v2 + 96), (const void *)v1[1], v1);
    }
    return (uint64_t *)pthread_mutex_unlock((pthread_mutex_t *)(v2 + 32));
  }
  return result;
}

BOOL _CSCreateStoragePath(uint64_t a1, int a2, char *a3, size_t a4)
{
  return __CSCreateStoragePath(a1, a2, 0, a3, a4);
}

BOOL __CSCreateStoragePath(uint64_t a1, int a2, int a3, char *a4, size_t a5)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  bzero(v15, 0x400uLL);
  if (CKChunkStoreGetLocation(a1, v15, 0x400uLL))
  {
    if (a3)
    {
      if (snprintf(a4, a5, "%s/%s/%d/%d/%d", v15, "ChunkStorage", HIBYTE(a2), BYTE2(a2), BYTE1(a2)) >= a5)
      {
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1805);
        }
        BOOL result = os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR);
        if (result)
        {
          CFStringRef v11 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"outPath too small\n");
          if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1812);
          }
          uint64_t v12 = CK_DEFAULT_LOG_INTERNAL_1;
          if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
            goto LABEL_28;
          }
          *(_DWORD *)buf = 138543362;
          CFStringRef v14 = v11;
LABEL_27:
          _os_log_impl(&dword_215163000, v12, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
LABEL_28:
          if (v11) {
            CFRelease(v11);
          }
          return 0;
        }
        return result;
      }
    }
    else if (snprintf(a4, a5, "%s/%s/%d/%d/%d/%d", v15, "ChunkStorage", HIBYTE(a2), BYTE2(a2), BYTE1(a2), a2) >= a5)
    {
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1817);
      }
      BOOL result = os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR);
      if (result)
      {
        CFStringRef v11 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"outPath too small\n");
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1821);
        }
        uint64_t v12 = CK_DEFAULT_LOG_INTERNAL_1;
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
          goto LABEL_28;
        }
        *(_DWORD *)buf = 138543362;
        CFStringRef v14 = v11;
        goto LABEL_27;
      }
      return result;
    }
    return 1;
  }
  if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1794);
  }
  BOOL result = os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR);
  if (result)
  {
    CFStringRef v11 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"failed to get chunk store location!\n");
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1800);
    }
    uint64_t v12 = CK_DEFAULT_LOG_INTERNAL_1;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
      goto LABEL_28;
    }
    *(_DWORD *)buf = 138543362;
    CFStringRef v14 = v11;
    goto LABEL_27;
  }
  return result;
}

BOOL _CSCreateStorageDirectoryPath(uint64_t a1, int a2, char *a3, size_t a4)
{
  return __CSCreateStoragePath(a1, a2, 1, a3, a4);
}

uint64_t _CSCreateStorageFile(uint64_t a1, void *a2)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  *a2 = 0;
  sqlite3_int64 v43 = 0;
  bzero(v44, 0x400uLL);
  if (!CKChunkStoreGetLocation(a1, v44, 0x400uLL))
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_202);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v10 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"CKChunkStoreGetLocation failed");
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_208_0);
      }
      CFStringRef v11 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        buf[0].dev_t st_dev = 138543362;
        *(void *)&buf[0].mode_t st_mode = v10;
        _os_log_impl(&dword_215163000, v11, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)buf, 0xCu);
      }
      if (v10) {
        CFRelease(v10);
      }
    }
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = malloc_type_calloc(1uLL, 0x20uLL, 0x100004017768742uLL);
  if (!v4) {
    return 0xFFFFFFFFLL;
  }
  int v5 = v4;
  int v6 = _CSAddStorageFileToDb(a1, 0, &v43);
  if (v6)
  {
LABEL_4:
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_212);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v7 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"failed to add SF entry to database!\n");
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_219);
      }
      uint64_t v8 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        buf[0].dev_t st_dev = 138543362;
        *(void *)&buf[0].mode_t st_mode = v7;
LABEL_11:
        _os_log_impl(&dword_215163000, v8, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)buf, 0xCu);
      }
      goto LABEL_12;
    }
    goto LABEL_14;
  }
  CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  while (1)
  {
    sqlite3_int64 v13 = v43;
    bzero(buf, 0x400uLL);
    bzero(__str, 0x400uLL);
    if (!CKChunkStoreGetLocation(a1, buf, 0x400uLL))
    {
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1824);
      }
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        CFStringRef v18 = CFStringCreateWithFormat(alloc, 0, @"failed to get chunk store location!");
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1830);
        }
        uint64_t v19 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long v45 = 138543362;
          CFStringRef v46 = v18;
          goto LABEL_91;
        }
        goto LABEL_92;
      }
      goto LABEL_96;
    }
    if (snprintf(__str, 0x400uLL, "%s/%s/%d/%d/%d/", (const char *)buf, "ChunkStorage", BYTE3(v13), BYTE2(v13), BYTE1(v13)) >= 0x400)
    {
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1835);
      }
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        CFStringRef v18 = CFStringCreateWithFormat(alloc, 0, @"path exceeds %d characters!", 1024);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1842);
        }
        uint64_t v19 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long v45 = 138543362;
          CFStringRef v46 = v18;
          goto LABEL_91;
        }
LABEL_92:
        if (v18) {
          CFRelease(v18);
        }
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_223);
        }
      }
LABEL_96:
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        CFStringRef v20 = CFStringCreateWithFormat(alloc, 0, @"unable to create storage directory\n");
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_230);
        }
        CFStringRef v21 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          buf[0].dev_t st_dev = 138543362;
          *(void *)&buf[0].mode_t st_mode = v20;
LABEL_101:
          _os_log_impl(&dword_215163000, v21, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)buf, 0xCu);
        }
LABEL_102:
        if (v20) {
          CFRelease(v20);
        }
      }
LABEL_104:
      LODWORD(v9) = 0;
      goto LABEL_134;
    }
    if (mkdir_recursive((uint64_t)__str, 0x1C0u) && *__error() != 17)
    {
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1846);
      }
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        long long v29 = __error();
        long long v30 = strerror(*v29);
        CFStringRef v18 = CFStringCreateWithFormat(alloc, 0, @"failed to create directory: %s, %s\n", __str, v30);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1853);
        }
        uint64_t v19 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long v45 = 138543362;
          CFStringRef v46 = v18;
LABEL_91:
          _os_log_impl(&dword_215163000, v19, OS_LOG_TYPE_ERROR, "%{public}@", v45, 0xCu);
        }
        goto LABEL_92;
      }
      goto LABEL_96;
    }
    if (!__CSCreateStoragePath(a1, v13, 0, v44, 0x400uLL))
    {
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_234);
      }
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        CFStringRef v20 = CFStringCreateWithFormat(alloc, 0, @"unable to create storage path\n");
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_241);
        }
        CFStringRef v21 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          buf[0].dev_t st_dev = 138543362;
          *(void *)&buf[0].mode_t st_mode = v20;
          goto LABEL_101;
        }
        goto LABEL_102;
      }
      goto LABEL_104;
    }
    int v14 = open(v44, 2562, 384);
    if (v14 != -1)
    {
      int v22 = v14;
      memset(&v42, 0, sizeof(v42));
      if (fstat(v14, &v42))
      {
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_270_0);
        }
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          uint64_t v23 = __error();
          CFStringRef v24 = strerror(*v23);
          CFStringRef v25 = CFStringCreateWithFormat(alloc, 0, @"fstat failed: %s", v24);
          if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_277);
          }
          long long v26 = CK_DEFAULT_LOG_INTERNAL_1;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          {
            buf[0].dev_t st_dev = 138543362;
            *(void *)&buf[0].mode_t st_mode = v25;
            _os_log_impl(&dword_215163000, v26, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)buf, 0xCu);
          }
          LODWORD(v9) = 0;
          goto LABEL_131;
        }
        LODWORD(v9) = 0;
LABEL_133:
        close(v22);
        unlink(v44);
LABEL_134:
        int v6 = -1;
        goto LABEL_135;
      }
      uint64_t v31 = CSsql_corruption_checking_do_0(a1, *(sqlite3 **)(a1 + 24), "UPDATE CSStorageFileTable SET ft_inode = %lld WHERE ft_rowid = %lld", v42.st_ino, v13);
      if (v31)
      {
        uint64_t v9 = v31;
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_282);
        }
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
          goto LABEL_133;
        }
        long long v32 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
        CFStringRef v25 = CFStringCreateWithFormat(alloc, 0, @"failed to set inode for file: %s: %d %s\n", v44, v9, v32);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_289);
        }
        long long v33 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          buf[0].dev_t st_dev = 138543362;
          *(void *)&buf[0].mode_t st_mode = v25;
LABEL_130:
          _os_log_impl(&dword_215163000, v33, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)buf, 0xCu);
        }
      }
      else
      {
        uint64_t v34 = CSsql_corruption_checking_do_0(a1, *(sqlite3 **)(a1 + 24), "UPDATE CSStorageFileTable SET ft_space = %d WHERE ft_rowid = %lld", 20971620, v13);
        if (v34)
        {
          uint64_t v9 = v34;
          if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_294_0);
          }
          if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
            goto LABEL_133;
          }
          long long v35 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
          CFStringRef v25 = CFStringCreateWithFormat(alloc, 0, @"failed to set space for file: %s: %d %s\n", v44, v9, v35);
          if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_301);
          }
          long long v33 = CK_DEFAULT_LOG_INTERNAL_1;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          {
            buf[0].dev_t st_dev = 138543362;
            *(void *)&buf[0].mode_t st_mode = v25;
            goto LABEL_130;
          }
        }
        else
        {
          uint64_t v36 = CSsql_corruption_checking_do_0(a1, *(sqlite3 **)(a1 + 24), "UPDATE CSStorageFileTable SET ft_pspace = %d WHERE ft_rowid = %lld", 0, v13);
          if (!v36)
          {
            if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_317);
            }
            if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
            {
              CFStringRef v39 = CFStringCreateWithFormat(alloc, 0, @"Created a new SF, ino:%llu, rowID:%llu\n", v42.st_ino, v13);
              if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_324);
              }
              long long v40 = CK_DEFAULT_LOG_INTERNAL_1;
              if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
              {
                buf[0].dev_t st_dev = 138543362;
                *(void *)&buf[0].mode_t st_mode = v39;
                _os_log_impl(&dword_215163000, v40, OS_LOG_TYPE_DEBUG, "%{public}@", (uint8_t *)buf, 0xCu);
              }
              if (v39) {
                CFRelease(v39);
              }
            }
            uint64_t result = 0;
            v5[2] = v22;
            *(void *)int v5 = v42.st_ino;
            *((void *)v5 + 2) = v13;
            *((void *)v5 + 3) = 20971620;
            *a2 = v5;
            return result;
          }
          uint64_t v9 = v36;
          if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_306);
          }
          if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
            goto LABEL_133;
          }
          long long v37 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
          CFStringRef v25 = CFStringCreateWithFormat(alloc, 0, @"failed to set purgeable space for file: %s: %d %s\n", v44, v9, v37);
          if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_313);
          }
          long long v33 = CK_DEFAULT_LOG_INTERNAL_1;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          {
            buf[0].dev_t st_dev = 138543362;
            *(void *)&buf[0].mode_t st_mode = v25;
            goto LABEL_130;
          }
        }
      }
LABEL_131:
      if (v25) {
        CFRelease(v25);
      }
      goto LABEL_133;
    }
    if (*__error() != 17) {
      break;
    }
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_245);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
    {
      memset(buf, 0, 144);
      stat(v44, buf);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_249);
      }
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
      {
        CFStringRef v15 = CFStringCreateWithFormat(alloc, 0, @"file %s already exists (size: %lld), trying again.", v44, buf[0].st_size);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_255);
        }
        uint64_t v16 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__str = 138543362;
          CFStringRef v48 = v15;
          _os_log_impl(&dword_215163000, v16, OS_LOG_TYPE_DEBUG, "%{public}@", (uint8_t *)__str, 0xCu);
        }
        if (v15) {
          CFRelease(v15);
        }
      }
    }
    int v17 = _CSAddStorageFileToDb(a1, 0, &v43);
    if (v17)
    {
      int v6 = v17;
      goto LABEL_4;
    }
  }
  int v6 = *__error();
  if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_259_0);
  }
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
  {
    long long v27 = __error();
    long long v28 = strerror(*v27);
    CFStringRef v7 = CFStringCreateWithFormat(alloc, 0, @"open(%s) failed: %s", v44, v28);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_266);
    }
    uint64_t v8 = CK_DEFAULT_LOG_INTERNAL_1;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      buf[0].dev_t st_dev = 138543362;
      *(void *)&buf[0].mode_t st_mode = v7;
      goto LABEL_11;
    }
LABEL_12:
    if (v7) {
      CFRelease(v7);
    }
  }
LABEL_14:
  LODWORD(v9) = 0;
LABEL_135:
  free(v5);
  _CSRemoveStorageFileFromDb((uint64_t *)a1, v43);
  if (v6 < 0 && v9 == 13) {
    return 28;
  }
  else {
    return v6;
  }
}

uint64_t _CSAddStorageFileToDb(uint64_t a1, sqlite3_int64 a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  *a3 = 0;
  int v6 = _CSPrepareStatement(a1, @"INSERT INTO CSStorageFileTable (ft_inode, vt_rowID) VALUES (?, ?)", "INSERT INTO CSStorageFileTable (ft_inode, vt_rowID) VALUES (?, ?)");
  CFStringRef v7 = v6;
  if (!v6)
  {
    insert_rowid = 0;
    LODWORD(v10) = 0;
    goto LABEL_6;
  }
  char v8 = 1;
  int v9 = sqlite3_bind_int64(v6[2], 1, a2);
  if (v9 || (int v9 = sqlite3_bind_int64(v7[2], 2, 0)) != 0)
  {
    LODWORD(v10) = v9;
    insert_rowid = 0;
    unsigned int v12 = -1;
    goto LABEL_7;
  }
  uint64_t v14 = CS_sqlite3_step((uint64_t *)v7);
  if (v14 != 101)
  {
    uint64_t v10 = v14;
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1057);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      uint64_t v16 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
      insert_rowid = CFStringCreateWithFormat(v15, 0, @"sqlite3_step returned: %d %s\n", v10, v16);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1060);
      }
      int v17 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        uint64_t v19 = insert_rowid;
        _os_log_impl(&dword_215163000, v17, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (!insert_rowid) {
        goto LABEL_6;
      }
      CFRelease(insert_rowid);
    }
    insert_rowid = 0;
LABEL_6:
    unsigned int v12 = -1;
    char v8 = 1;
    goto LABEL_7;
  }
  insert_rowid = (const void *)sqlite3_last_insert_rowid(*(sqlite3 **)(a1 + 24));
  char v8 = 0;
  unsigned int v12 = 0;
  LODWORD(v10) = 101;
LABEL_7:
  _CSFinishPreparedStatement((uint64_t *)v7);
  if ((v8 & (v10 == 13)) != 0) {
    uint64_t result = 28;
  }
  else {
    uint64_t result = v12;
  }
  if (!result) {
    *a3 = insert_rowid;
  }
  return result;
}

uint64_t CSsql_corruption_checking_do_0(uint64_t a1, sqlite3 *a2, char *a3, ...)
{
  va_start(va, a3);
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v4 = CSsql_doV(a2, a3, va);
  _CSHandleDatabaseIOError_0(v4);
  if (v4 == 26 || v4 == 11)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2570);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"chunk store database corruption: detected error %d in CSsql_do", v4, va);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2576);
      }
      CFStringRef v7 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        CFStringRef v10 = v6;
        _os_log_impl(&dword_215163000, v7, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v6) {
        CFRelease(v6);
      }
    }
    _CSHandleCorruptDatabase(a1);
  }
  return v4;
}

uint64_t *_CSRemoveStorageFileFromDb(uint64_t *result, sqlite3_int64 a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v3 = result;
    uint64_t result = (uint64_t *)_CSPrepareStatement((uint64_t)result, @"DELETE FROM CSStorageFileTable WHERE ft_rowid = ?", "DELETE FROM CSStorageFileTable WHERE ft_rowid = ?");
    if (result)
    {
      uint64_t v4 = result;
      if (!sqlite3_bind_int64((sqlite3_stmt *)result[2], 1, a2))
      {
        uint64_t v5 = CS_sqlite3_step(v4);
        if (v5 != 101)
        {
          uint64_t v6 = v5;
          if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1067);
          }
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          {
            CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
            char v8 = sqlite3_errmsg((sqlite3 *)v3[3]);
            CFStringRef v9 = CFStringCreateWithFormat(v7, 0, @"sqlite3_step returned: %d %s\n", v6, v8);
            if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1070);
            }
            CFStringRef v10 = CK_DEFAULT_LOG_INTERNAL_1;
            if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138543362;
              CFStringRef v12 = v9;
              _os_log_impl(&dword_215163000, v10, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
            }
            if (v9) {
              CFRelease(v9);
            }
          }
        }
      }
      return _CSFinishPreparedStatement(v4);
    }
  }
  return result;
}

uint64_t _CSUpdateStorageFileInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v4 = CSsql_get64(a1, 1, "SELECT ft_space FROM CSStorageFileTable WHERE ft_rowid = %lld", *(void *)(a2 + 16));
  if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_328_0);
  }
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
  {
    CFStringRef v5 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Updating SF space for ftRowId:%llu curspace:%llu, space:%llu\n", *(void *)(a2 + 16), v4, *(void *)(a2 + 24));
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_334);
    }
    uint64_t v6 = CK_DEFAULT_LOG_INTERNAL_1;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138543362;
      CFStringRef v26 = v5;
      _os_log_impl(&dword_215163000, v6, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
    }
    if (v5) {
      CFRelease(v5);
    }
  }
  if (v4 != *(const void **)(a2 + 24))
  {
    CFStringRef v9 = _CSPrepareStatement(a1, @"UPDATE CSStorageFileTable SET ft_space = ? WHERE ft_rowid = ?", "UPDATE CSStorageFileTable SET ft_space = ? WHERE ft_rowid = ?");
    char v8 = v9;
    if (v9)
    {
      uint64_t v10 = sqlite3_bind_int64(v9[2], 1, *(void *)(a2 + 24));
      if (v10)
      {
        uint64_t v11 = v10;
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_342);
        }
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
          goto LABEL_41;
        }
        CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        uint64_t v13 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
        CFStringRef v14 = CFStringCreateWithFormat(v12, 0, @"sqlite3_bind_int returned: %d %s\n", v11, v13);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_349);
        }
        CFAllocatorRef v15 = CK_DEFAULT_LOG_INTERNAL_1;
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
          goto LABEL_39;
        }
        *(_DWORD *)buf = 138543362;
        CFStringRef v26 = v14;
        goto LABEL_38;
      }
      uint64_t v16 = sqlite3_bind_int64(v8[2], 2, *(void *)(a2 + 16));
      if (v16)
      {
        uint64_t v17 = v16;
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_353);
        }
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
          goto LABEL_41;
        }
        CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        uint64_t v19 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
        CFStringRef v14 = CFStringCreateWithFormat(v18, 0, @"sqlite3_bind_int64 returned: %d %s\n", v17, v19);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_360);
        }
        CFAllocatorRef v15 = CK_DEFAULT_LOG_INTERNAL_1;
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
          goto LABEL_39;
        }
        *(_DWORD *)buf = 138543362;
        CFStringRef v26 = v14;
        goto LABEL_38;
      }
      uint64_t v20 = CS_sqlite3_step((uint64_t *)v8);
      if (v20 == 101)
      {
        uint64_t v7 = 0;
        goto LABEL_42;
      }
      uint64_t v21 = v20;
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_364);
      }
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        CFAllocatorRef v22 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        uint64_t v23 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
        CFStringRef v14 = CFStringCreateWithFormat(v22, 0, @"sqlite3_step returned: %d %s\n", v21, v23);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_371);
        }
        CFAllocatorRef v15 = CK_DEFAULT_LOG_INTERNAL_1;
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
          goto LABEL_39;
        }
        *(_DWORD *)buf = 138543362;
        CFStringRef v26 = v14;
LABEL_38:
        _os_log_impl(&dword_215163000, v15, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
LABEL_39:
        if (v14) {
          CFRelease(v14);
        }
      }
    }
LABEL_41:
    uint64_t v7 = 0xFFFFFFFFLL;
    goto LABEL_42;
  }
  uint64_t v7 = 0;
  char v8 = 0;
LABEL_42:
  _CSFinishPreparedStatement((uint64_t *)v8);
  return v7;
}

void _CSCacheStorageFile(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0x7FFFFFFFLL;
  uint64_t v7 = *(void *)(a1 + 264);
  while (*(void *)v7)
  {
    if (*(void *)(*(void *)v7 + 24) < v6)
    {
      uint64_t v6 = *(void *)(*(void *)v7 + 24);
      uint64_t v5 = v4;
    }
    ++v4;
    v7 += 8;
    if (v4 == 5)
    {
      _CSCloseStorageFile(a1, *(_DWORD **)(*(void *)(a1 + 264) + 8 * v5), 0);
      uint64_t v7 = *(void *)(a1 + 264) + 8 * v5;
      break;
    }
  }
  *(void *)uint64_t v7 = a2;
}

void _CSCloseStorageFile(uint64_t a1, _DWORD *a2, int a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (a2)
  {
    int v6 = a2[2];
    if (v6 != -1)
    {
      if (close(v6) == -1)
      {
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_410_0);
        }
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          CFStringRef v7 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"close failed for SF rowID:%llu\n", *((void *)a2 + 2));
          if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_416);
          }
          char v8 = CK_DEFAULT_LOG_INTERNAL_1;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138543362;
            CFStringRef v16 = v7;
            _os_log_impl(&dword_215163000, v8, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
          }
          if (v7) {
            CFRelease(v7);
          }
        }
      }
      a2[2] = -1;
    }
    if (a3) {
      _CSUpdateStorageFileInfo(a1, (uint64_t)a2);
    }
    uint64_t v9 = 0;
    char v10 = 0;
    do
    {
      uint64_t v11 = *(void *)(a1 + 264);
      uint64_t v12 = v9;
      while (1)
      {
        uint64_t v13 = *(_DWORD **)(v11 + 8 * v12);
        if (v13 && v13 == a2) {
          break;
        }
        if (++v12 == 5)
        {
          if ((v10 & 1) == 0) {
            free(a2);
          }
          return;
        }
      }
      if ((v10 & 1) == 0)
      {
        free(a2);
        uint64_t v11 = *(void *)(a1 + 264);
      }
      *(void *)(v11 + 8 * v12) = 0;
      uint64_t v9 = v12 + 1;
      char v10 = 1;
    }
    while (v12 != 4);
  }
}

uint64_t _CSSyncStorageFile(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_374);
    }
    uint64_t v15 = CK_DEFAULT_LOG_INTERNAL_1;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    *(_DWORD *)buf = 136315138;
    stat v42 = "_CSSyncStorageFile";
    uint64_t v12 = "could not fsync null storage file in %s";
    uint64_t v13 = v15;
    uint32_t v14 = 12;
    goto LABEL_16;
  }
  int v6 = *(_DWORD *)(a2 + 8);
  if (v6 < 0)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_378);
    }
    uint64_t v16 = CK_DEFAULT_LOG_INTERNAL_1;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    uint64_t v17 = *(const char **)(a2 + 16);
    *(_DWORD *)buf = 134218242;
    stat v42 = v17;
    __int16 v43 = 2080;
    long long v44 = "_CSSyncStorageFile";
    uint64_t v12 = "could not fsync closed storage file %llu in %s";
    uint64_t v13 = v16;
    uint32_t v14 = 22;
    goto LABEL_16;
  }
  if (fsync(v6))
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_382);
    }
    uint64_t v7 = CK_DEFAULT_LOG_INTERNAL_1;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    char v8 = *(const char **)(a2 + 16);
    uint64_t v9 = __error();
    char v10 = strerror(*v9);
    int v11 = *__error();
    *(_DWORD *)buf = 134218754;
    stat v42 = v8;
    __int16 v43 = 2080;
    long long v44 = "_CSSyncStorageFile";
    __int16 v45 = 2080;
    CFStringRef v46 = v10;
    __int16 v47 = 1024;
    int v48 = v11;
    uint64_t v12 = "fsync for storage file %llu in %s failed: %s (%d)";
    uint64_t v13 = v7;
    uint32_t v14 = 38;
LABEL_16:
    _os_log_impl(&dword_215163000, v13, OS_LOG_TYPE_ERROR, v12, buf, v14);
    return 0;
  }
  if ((a3 & 1) == 0) {
    return 1;
  }
  bzero(buf, 0x400uLL);
  if (!__CSCreateStoragePath(a1, *(void *)(a2 + 16), 1, (char *)buf, 0x400uLL))
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_386);
    }
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    CFStringRef v18 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"could not create storage file path for storage file %llu in %s", *(void *)(a2 + 16), "_CSSyncStorageFile");
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_392);
    }
    long long v28 = CK_DEFAULT_LOG_INTERNAL_1;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long v33 = 138543362;
      CFStringRef v34 = v18;
LABEL_43:
      _os_log_impl(&dword_215163000, v28, OS_LOG_TYPE_ERROR, "%{public}@", v33, 0xCu);
    }
LABEL_44:
    if (!v18) {
      return (uint64_t)v18;
    }
    CFRelease(v18);
    return 0;
  }
  int v20 = open((const char *)buf, 0);
  if (v20 < 0)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_396);
    }
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    CFAllocatorRef v29 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    long long v30 = __error();
    uint64_t v31 = strerror(*v30);
    long long v32 = __error();
    CFStringRef v18 = CFStringCreateWithFormat(v29, 0, @"could not open storage file directory %s in %s: %s (%d)", buf, "_CSSyncStorageFile", v31, *v32);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_403);
    }
    long long v28 = CK_DEFAULT_LOG_INTERNAL_1;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long v33 = 138543362;
      CFStringRef v34 = v18;
      goto LABEL_43;
    }
    goto LABEL_44;
  }
  int v21 = v20;
  int v22 = fsync(v20);
  CFStringRef v18 = (CFStringRef)(v22 == 0);
  if (v22)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_407_0);
    }
    uint64_t v23 = CK_DEFAULT_LOG_INTERNAL_1;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v24 = *(const __CFString **)(a2 + 16);
      CFStringRef v25 = __error();
      CFStringRef v26 = strerror(*v25);
      int v27 = *__error();
      *(_DWORD *)long long v33 = 134218754;
      CFStringRef v34 = v24;
      __int16 v35 = 2080;
      uint64_t v36 = "_CSSyncStorageFile";
      __int16 v37 = 2080;
      long long v38 = v26;
      __int16 v39 = 1024;
      int v40 = v27;
      _os_log_impl(&dword_215163000, v23, OS_LOG_TYPE_ERROR, "fsync for storage file %llu parent directory in %s failed: %s (%d)", v33, 0x26u);
    }
  }
  close(v21);
  return (uint64_t)v18;
}

void _CSCloseCachedStorageFile(uint64_t a1, uint64_t a2, int a3)
{
  if (a2)
  {
    uint64_t v3 = 0;
    while (1)
    {
      uint64_t v4 = *(void *)(a1 + 264);
      uint64_t v5 = *(void *)(v4 + v3);
      if (v5)
      {
        if (*(void *)(v5 + 16) == a2) {
          break;
        }
      }
      v3 += 8;
      if (v3 == 40) {
        return;
      }
    }
    _CSCloseStorageFile(a1, *(_DWORD **)(v4 + v3), a3);
  }
}

void *_CSGetStorageFile(uint64_t a1, uint64_t a2)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  __int16 v45 = 0;
  uint64_t v3 = *(unsigned int *)(a2 + 80);
  unint64_t v4 = v3 + CKSchemeAndSignatureSize((unsigned char *)(a2 + 84)) + 4;
  if (v4 >> 31) {
    _CSGetStorageFile_cold_1();
  }
  for (uint64_t i = 0; i != 5; ++i)
  {
    int v6 = *(void **)(*(void *)(a1 + 264) + 8 * i);
    if (v6 && *((void *)v6 + 3) >= (int64_t)v4)
    {
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_420);
      }
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
      {
        CFStringRef v18 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Found cached SF %u at rowID:%llu, space:%llu, needSize:%llu\n", i, *((void *)v6 + 2), *((void *)v6 + 3), v4);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_426);
        }
        uint64_t v19 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138543362;
          CFStringRef v50 = v18;
          _os_log_impl(&dword_215163000, v19, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
        }
        if (v18) {
          CFRelease(v18);
        }
      }
      return v6;
    }
  }
  uint64_t v7 = _CSPrepareStatement(a1, @"SELECT ft_rowid, ft_space FROM CSStorageFileTable WHERE (ft_space >= ? AND ft_status IS NULL)", "SELECT ft_rowid, ft_space FROM CSStorageFileTable WHERE (ft_space >= ? AND ft_status IS NULL)");
  if (v7)
  {
    char v8 = v7;
    sqlite3_bind_int(v7[2], 1, v4);
    if (CS_sqlite3_step((uint64_t *)v8) != 100)
    {
      _CSFinishPreparedStatement((uint64_t *)v8);
      goto LABEL_112;
    }
    uint64_t v43 = a1;
    sqlite3_int64 v9 = 0;
    unint64_t v10 = 0;
    CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    do
    {
      int v11 = sqlite3_column_int(v8[2], 0);
      if (v11)
      {
        int v12 = v11;
        int v13 = sqlite3_column_int(v8[2], 1);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_445);
        }
        sqlite3_int64 v14 = v12;
        unint64_t v15 = v13;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
        {
          CFStringRef v16 = CFStringCreateWithFormat(alloc, 0, @"Checking free space for SF at rowID:%llu, %llu/%llu\n", v12, v13, v4);
          if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_452);
          }
          uint64_t v17 = CK_DEFAULT_LOG_INTERNAL_1;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 138543362;
            CFStringRef v50 = v16;
            _os_log_impl(&dword_215163000, v17, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
          }
          if (v16) {
            CFRelease(v16);
          }
        }
        if (v4 <= v15 && v10 < v15)
        {
          unint64_t v10 = v15;
          sqlite3_int64 v9 = v14;
        }
      }
    }
    while (CS_sqlite3_step((uint64_t *)v8) == 100);
    _CSFinishPreparedStatement((uint64_t *)v8);
    a1 = v43;
    if (!v9)
    {
LABEL_112:
      _CSCreateStorageFile(a1, &v45);
      int v6 = v45;
      if (!v45) {
        return v6;
      }
      goto LABEL_113;
    }
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_456);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
    {
      CFStringRef v22 = CFStringCreateWithFormat(alloc, 0, @"Found a candidate SF at rowID:%llu\n", v9);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_463);
      }
      uint64_t v23 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        CFStringRef v50 = v22;
        _os_log_impl(&dword_215163000, v23, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      if (v22) {
        CFRelease(v22);
      }
    }
    int v6 = malloc_type_calloc(1uLL, 0x20uLL, 0x100004017768742uLL);
    __int16 v45 = v6;
    if (v6)
    {
      bzero(buf, 0x400uLL);
      if (__CSCreateStoragePath(v43, v9, 0, (char *)buf, 0x400uLL))
      {
        memset(&v48, 0, sizeof(v48));
        int v24 = open((const char *)buf, 2, 384);
        *((_DWORD *)v6 + 2) = v24;
        if (v24 == -1)
        {
          if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_467);
          }
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          {
            CFStringRef v34 = __error();
            __int16 v35 = strerror(*v34);
            CFStringRef v36 = CFStringCreateWithFormat(alloc, 0, @"Attempting first aid in %s after open failed for \"%s\": %s\n", "_CSGetStorageFile", buf, v35);
            if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_474_0);
            }
            __int16 v37 = CK_DEFAULT_LOG_INTERNAL_1;
            if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)CFStringRef v46 = 138543362;
              CFStringRef v47 = v36;
              _os_log_impl(&dword_215163000, v37, OS_LOG_TYPE_ERROR, "%{public}@", v46, 0xCu);
            }
            if (v36) {
              CFRelease(v36);
            }
          }
          CSAttemptAutomaticFirstAidForStorageFile(v43, v9);
        }
        else
        {
          if (fstat(v24, &v48) != -1)
          {
            if (v10 <= 0x1400064) {
              unint64_t v25 = 20971620 - v10;
            }
            else {
              unint64_t v25 = 0;
            }
            if (v10 <= 0x1400063 && v25 < v48.st_size)
            {
              if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_489);
              }
              if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
              {
                CFStringRef v26 = CFStringCreateWithFormat(alloc, 0, @"The size on disk is different from the size in db for \"%s\": usedSpace:%llu, size:%llu - truncating\n", buf, v25, v48.st_size);
                if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                  dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_496);
                }
                int v27 = CK_DEFAULT_LOG_INTERNAL_1;
                if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)CFStringRef v46 = 138543362;
                  CFStringRef v47 = v26;
                  _os_log_impl(&dword_215163000, v27, OS_LOG_TYPE_ERROR, "%{public}@", v46, 0xCu);
                }
                if (v26) {
                  CFRelease(v26);
                }
              }
              if (ftruncate(*((_DWORD *)v6 + 2), v25))
              {
                if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                  dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_500);
                }
                if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                {
                  long long v28 = __error();
                  CFAllocatorRef v29 = strerror(*v28);
                  CFStringRef v30 = CFStringCreateWithFormat(alloc, 0, @"ftruncate failed for \"%s\": %s\n", buf, v29);
                  if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_507_0);
                  }
                  uint64_t v31 = CK_DEFAULT_LOG_INTERNAL_1;
                  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)CFStringRef v46 = 138543362;
                    CFStringRef v47 = v30;
                    _os_log_impl(&dword_215163000, v31, OS_LOG_TYPE_ERROR, "%{public}@", v46, 0xCu);
                  }
                  if (v30) {
                    CFRelease(v30);
                  }
                }
              }
            }
            *((void *)v6 + 2) = v9;
            *((void *)v6 + 3) = v10;
LABEL_113:
            _CSCacheStorageFile(a1, (uint64_t)v6);
            return v6;
          }
          if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_478_0);
          }
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          {
            long long v38 = __error();
            __int16 v39 = strerror(*v38);
            CFStringRef v40 = CFStringCreateWithFormat(alloc, 0, @"fstat failed for \"%s\": %s\n", buf, v39);
            if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_485_0);
            }
            long long v41 = CK_DEFAULT_LOG_INTERNAL_1;
            if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)CFStringRef v46 = 138543362;
              CFStringRef v47 = v40;
              _os_log_impl(&dword_215163000, v41, OS_LOG_TYPE_ERROR, "%{public}@", v46, 0xCu);
            }
            if (v40) {
              CFRelease(v40);
            }
          }
          close(*((_DWORD *)v6 + 2));
        }
      }
      else
      {
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_511);
        }
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          CFStringRef v32 = CFStringCreateWithFormat(alloc, 0, @"_CSCreateStoragePath failed for rowID: %lld\n", v9);
          if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_518);
          }
          long long v33 = CK_DEFAULT_LOG_INTERNAL_1;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          {
            v48.dev_t st_dev = 138543362;
            *(void *)&v48.mode_t st_mode = v32;
            _os_log_impl(&dword_215163000, v33, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v48, 0xCu);
          }
          if (v32) {
            CFRelease(v32);
          }
        }
      }
      free(v6);
      __int16 v45 = 0;
      goto LABEL_112;
    }
  }
  else
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_434);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v20 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"NULL stmt");
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_441);
      }
      int v21 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        CFStringRef v50 = v20;
        _os_log_impl(&dword_215163000, v21, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v20) {
        CFRelease(v20);
      }
    }
    return 0;
  }
  return v6;
}

unint64_t _CSCompactStorage(uint64_t a1, unint64_t a2)
{
  uint64_t v251 = *MEMORY[0x263EF8340];
  unint64_t v4 = &new_ringing[131];
  if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_521);
  }
  uint64_t v5 = &new_ringing[131];
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
  {
    CFStringRef v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"spaceNeeded:%llu\n", a2);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_527_0);
    }
    uint64_t v7 = CK_DEFAULT_LOG_INTERNAL_1;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138543362;
      *(void *)&uint8_t buf[4] = v6;
      _os_log_impl(&dword_215163000, v7, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
    }
    if (v6) {
      CFRelease(v6);
    }
  }
  if (!a2 || *(_DWORD *)(a1 + 256))
  {
    unint64_t v8 = 0;
    goto LABEL_13;
  }
  if (*(unsigned char *)(a1 + 17)) {
    _CSCompactStorage_cold_6();
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  if (!Mutable)
  {
    unint64_t v8 = 0;
    uint64_t v23 = 0xFFFFFFFFLL;
    goto LABEL_191;
  }
  uint64_t v17 = Mutable;
  CFStringRef v18 = _CSPrepareStatement(a1, @"SELECT ft_rowid FROM CSStorageFileTable WHERE ft_pspace > 0 ORDER BY ft_pspace DESC", "SELECT ft_rowid FROM CSStorageFileTable WHERE ft_pspace > 0 ORDER BY ft_pspace DESC");
  if (!v18)
  {
    unint64_t v8 = 0;
    uint64_t v23 = 0xFFFFFFFFLL;
    goto LABEL_190;
  }
  uint64_t v19 = v18;
  while (1)
  {
    uint64_t v20 = CS_sqlite3_step((uint64_t *)v19);
    if (v20 != 100) {
      break;
    }
    if (*(_DWORD *)(a1 + 256))
    {
      unint64_t v234 = 0;
      goto LABEL_188;
    }
    *(void *)buf = 0;
    *(void *)buf = sqlite3_column_int64(v19[2], 0);
    CFNumberRef v21 = CFNumberCreate(0, kCFNumberLongLongType, buf);
    if (!v21)
    {
      unint64_t v234 = 0;
      uint64_t v23 = 0xFFFFFFFFLL;
      goto LABEL_189;
    }
    CFNumberRef v22 = v21;
    CFArrayAppendValue(v17, v21);
    CFRelease(v22);
  }
  uint64_t v24 = v20;
  if (v20 != 101)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1861);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      CFAllocatorRef v25 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      CFStringRef v26 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
      CFStringRef v27 = CFStringCreateWithFormat(v25, 0, @"sqlite3_step returned: %d %s\n", v24, v26);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1864);
      }
      long long v28 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        *(void *)&uint8_t buf[4] = v27;
        _os_log_impl(&dword_215163000, v28, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v27) {
        CFRelease(v27);
      }
    }
  }
  _CSFinishPreparedStatement((uint64_t *)v19);
  CFIndex Count = CFArrayGetCount(v17);
  if (Count < 1)
  {
    unint64_t v234 = 0;
LABEL_187:
    uint64_t v19 = 0;
LABEL_188:
    uint64_t v23 = 0;
    goto LABEL_189;
  }
  CFIndex v29 = 0;
  unint64_t v234 = 0;
  CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  unint64_t v30 = a2;
  do
  {
    if (*(_DWORD *)(a1 + 256)) {
      goto LABEL_187;
    }
    CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v17, v29);
    *(void *)&valuePtr.dev_t st_dev = 0;
    if (!CFNumberGetValue(ValueAtIndex, kCFNumberLongLongType, &valuePtr)) {
      goto LABEL_96;
    }
    if (*(unsigned char *)(a1 + 17)) {
      _CSCompactStorage_cold_5();
    }
    sqlite3_int64 v32 = *(void *)&valuePtr.st_dev;
    long long v33 = &new_ringing[131];
    if (CSAttemptAutomaticFirstAidForStorageFile(a1, *(sqlite3_int64 *)&valuePtr.st_dev)) {
      goto LABEL_63;
    }
    if (v4[387] != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1867);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v34 = CFStringCreateWithFormat(alloc, 0, @"Failed first aid check in %s", "removeUnreferencedChunksAtEof");
      sqlite3_int64 v35 = v32;
      if (v4[387] != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1870);
      }
      CFStringRef v36 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        *(void *)&uint8_t buf[4] = v34;
        _os_log_impl(&dword_215163000, v36, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      sqlite3_int64 v32 = v35;
      if (v34) {
        CFRelease(v34);
      }
LABEL_63:
      if (v4[387] != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1874);
      }
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
    {
      CFStringRef v37 = CFStringCreateWithFormat(alloc, 0, @"ftRowId:%llu, spaceNeeded:%llu\n", v32, v30);
      sqlite3_int64 v38 = v32;
      if (v4[387] != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1881);
      }
      __int16 v39 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        *(void *)&uint8_t buf[4] = v37;
        _os_log_impl(&dword_215163000, v39, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      sqlite3_int64 v32 = v38;
      if (v37) {
        CFRelease(v37);
      }
    }
    CFMutableArrayRef v40 = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
    if (!v40)
    {
      unint64_t v44 = 0;
      uint64_t v45 = 0xFFFFFFFFLL;
      goto LABEL_79;
    }
    CFArrayRef v41 = v40;
    stat v42 = _CSPrepareStatement(a1, @"SELECT ct_rowid, dataLen, offset, refCount FROM CSChunkTable WHERE ft_rowid = ? AND location = ? ORDER BY offset DESC", "SELECT ct_rowid, dataLen, offset, refCount FROM CSChunkTable WHERE ft_rowid = ? AND location = ? ORDER BY offset DESC");
    uint64_t v43 = v42;
    if (!v42 || sqlite3_bind_int64(v42[2], 1, v32) || sqlite3_bind_int(v43[2], 2, 115)) {
      goto LABEL_76;
    }
    uint64_t v50 = CS_sqlite3_step((uint64_t *)v43);
    BOOL v51 = v50 == 100;
    off_t __offseta = v32;
    theArray = v41;
    if (v50 != 100)
    {
      uint64_t v61 = v50;
      unint64_t v62 = 0;
      unint64_t v63 = 0;
      goto LABEL_117;
    }
    unint64_t v62 = 0;
    uint64_t v52 = -1;
    do
    {
      if (*(_DWORD *)(a1 + 256)) {
        goto LABEL_140;
      }
      unint64_t v226 = v52;
      *(void *)uint64_t v239 = 0;
      *(void *)uint64_t v239 = sqlite3_column_int64(v43[2], 0);
      int v53 = sqlite3_column_int(v43[2], 1);
      unint64_t v227 = sqlite3_column_int64(v43[2], 2);
      sqlite3_int64 v54 = sqlite3_column_int64(v43[2], 3);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1889);
      }
      uint64_t v55 = v53;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
      {
        CFStringRef v56 = CFStringCreateWithFormat(alloc, 0, @"ctRowId:%llu, refCount:%llu, offset:0x%llx, size:0x%llx\n", *(void *)v239, v54, v227, v53);
        *(void *)__fd = v62;
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1896);
        }
        uint64_t v57 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138543362;
          *(void *)&uint8_t buf[4] = v56;
          _os_log_impl(&dword_215163000, v57, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
        }
        unint64_t v62 = *(void *)__fd;
        if (v56) {
          CFRelease(v56);
        }
      }
      if (v54)
      {
        BOOL v51 = 1;
        CFArrayRef v41 = theArray;
        goto LABEL_126;
      }
      if (v226 <= v227)
      {
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1900);
        }
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          CFStringRef v65 = CFStringCreateWithFormat(alloc, 0, @"Invalid chunk, ftRowId:%llu, ctRowId:%llu, chunkOffset:0x%llx, truncateOffset:0x%llx\n", __offseta, *(void *)v239, v227, v226);
          if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1907);
          }
          uint64_t v66 = CK_DEFAULT_LOG_INTERNAL_1;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          {
LABEL_158:
            *(_DWORD *)buf = 138543362;
            *(void *)&uint8_t buf[4] = v65;
            _os_log_impl(&dword_215163000, v66, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
          }
LABEL_159:
          if (v65) {
            CFRelease(v65);
          }
        }
LABEL_161:
        unint64_t v44 = 0;
        uint64_t v45 = 0xFFFFFFFFLL;
LABEL_162:
        sqlite3_int64 v32 = __offseta;
        goto LABEL_163;
      }
      CFNumberRef v58 = CFNumberCreate(0, kCFNumberLongLongType, v239);
      if (!v58) {
        goto LABEL_161;
      }
      CFNumberRef v59 = v58;
      CFArrayAppendValue(theArray, v58);
      CFRelease(v59);
      v62 += v55;
      uint64_t v60 = CS_sqlite3_step((uint64_t *)v43);
      unint64_t v63 = v227;
      uint64_t v52 = v227;
    }
    while (v60 == 100);
    uint64_t v61 = v60;
    sqlite3_int64 v32 = __offseta;
    CFArrayRef v41 = theArray;
    BOOL v51 = 1;
LABEL_117:
    unint64_t v226 = v63;
    if ((v61 - 102) <= 0xFFFFFFFD)
    {
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1911);
      }
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        uint64_t v64 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
        CFStringRef v65 = CFStringCreateWithFormat(alloc, 0, @"sqlite3_step returned: %d %s\n", v61, v64);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1915);
        }
        uint64_t v66 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
          goto LABEL_158;
        }
        goto LABEL_159;
      }
LABEL_76:
      unint64_t v44 = 0;
      uint64_t v45 = 0xFFFFFFFFLL;
      goto LABEL_77;
    }
LABEL_126:
    BOOL v67 = v51;
    unint64_t __fda = v62;
    _CSFinishPreparedStatement((uint64_t *)v43);
    CFIndex v68 = CFArrayGetCount(v41);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1919);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
    {
      CFStringRef v69 = CFStringCreateWithFormat(alloc, 0, @"chunkCount:%u, truncateOffset:0x%llx, freeSpace:%llu\n", v68, v226, v62);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1926);
      }
      CFStringRef v70 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        *(void *)&uint8_t buf[4] = v69;
        _os_log_impl(&dword_215163000, v70, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      if (v69) {
        CFRelease(v69);
      }
    }
    if (v68) {
      BOOL v71 = 0;
    }
    else {
      BOOL v71 = v67;
    }
    if (v71)
    {
      uint64_t v43 = 0;
LABEL_140:
      uint64_t v45 = 0;
      unint64_t v44 = 0;
      goto LABEL_162;
    }
    uint64_t v228 = v68;
    uint64_t v43 = _CSPrepareStatement(a1, @"DELETE FROM CSChunkTable WHERE ct_rowid = ?", "DELETE FROM CSChunkTable WHERE ct_rowid = ?");
    sqlite3_int64 v32 = __offseta;
    CFArrayRef v41 = theArray;
    if (!v43 || _CSBeginTransactionSqlRc(a1)) {
      goto LABEL_76;
    }
    if (v228 < 1)
    {
      CFIndex v72 = 0;
      goto LABEL_175;
    }
    CFIndex v72 = 0;
    while (1)
    {
      CFNumberRef v73 = (const __CFNumber *)CFArrayGetValueAtIndex(theArray, v72);
      *(void *)uint64_t v239 = 0;
      if (!CFNumberGetValue(v73, kCFNumberLongLongType, v239)) {
        goto LABEL_150;
      }
      if (sqlite3_bind_int64(v43[2], 1, *(sqlite3_int64 *)v239)) {
        goto LABEL_174;
      }
      uint64_t v74 = CS_sqlite3_step((uint64_t *)v43);
      if (v74 != 101) {
        break;
      }
      if (sqlite3_reset(v43[2])) {
        goto LABEL_174;
      }
      if (sqlite3_clear_bindings(v43[2])) {
        goto LABEL_175;
      }
LABEL_150:
      if (v228 == ++v72)
      {
        _CSFinishPreparedStatement((uint64_t *)v43);
        goto LABEL_176;
      }
    }
    uint64_t v75 = v74;
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1934);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      int v76 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
      CFStringRef v77 = CFStringCreateWithFormat(alloc, 0, @"sqlite3_step error: %d, %s", v75, v76);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1941);
      }
      int64_t v78 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        *(void *)&uint8_t buf[4] = v77;
        _os_log_impl(&dword_215163000, v78, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v77) {
        CFRelease(v77);
      }
    }
LABEL_174:
    sqlite3_int64 v32 = __offseta;
LABEL_175:
    _CSFinishPreparedStatement((uint64_t *)v43);
    if (v72 == v228)
    {
LABEL_176:
      if (_CSEndTransactionSqlRc(a1)) {
        goto LABEL_177;
      }
      int v79 = truncateStorageFile(a1, v32, v226, __fda, __fda);
      uint64_t v43 = 0;
      if (v79) {
        unint64_t v44 = 0;
      }
      else {
        unint64_t v44 = __fda;
      }
      if (v79) {
        uint64_t v45 = 0xFFFFFFFFLL;
      }
      else {
        uint64_t v45 = 0;
      }
    }
    else
    {
LABEL_177:
      _CSRollbackTransactionSqlRc(a1);
      uint64_t v43 = 0;
      unint64_t v44 = 0;
      uint64_t v45 = 0xFFFFFFFFLL;
    }
LABEL_163:
    CFArrayRef v41 = theArray;
LABEL_77:
    _CSFinishPreparedStatement((uint64_t *)v43);
    CFRelease(v41);
    long long v33 = new_ringing + 1048;
LABEL_79:
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1945);
    }
    if (os_log_type_enabled((os_log_t)v33[398], OS_LOG_TYPE_DEBUG))
    {
      CFStringRef v46 = CFStringCreateWithFormat(alloc, 0, @"ftRowId:%llu, totalFreeSpace:%llu, rc:%d\n", v32, v44, v45);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1952);
      }
      CFStringRef v47 = v33[398];
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        *(void *)&uint8_t buf[4] = v46;
        _os_log_impl(&dword_215163000, v47, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      if (v46) {
        CFRelease(v46);
      }
    }
    unint64_t v48 = v30 - v44;
    if (v30 < v44) {
      unint64_t v48 = 0;
    }
    if (v45) {
      unint64_t v49 = 0;
    }
    else {
      unint64_t v49 = v44;
    }
    v234 += v49;
    if (!v45) {
      unint64_t v30 = v48;
    }
    unint64_t v4 = new_ringing + 1048;
LABEL_96:
    uint64_t v23 = 0;
    uint64_t v19 = 0;
    ++v29;
  }
  while (v29 < Count && v30);
LABEL_189:
  _CSFinishPreparedStatement((uint64_t *)v19);
  uint64_t v5 = &new_ringing[131];
  unint64_t v8 = v234;
LABEL_190:
  CFRelease(v17);
LABEL_191:
  if (a2 >= v8) {
    unint64_t v80 = a2 - v8;
  }
  else {
    unint64_t v80 = 0;
  }
  if (v4[387] != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_531_0);
  }
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
  {
    CFStringRef v81 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"removeUnreferencedChunks freed %llu bytes, totalFreeSpace:%llu, spaceNeeded:%llu, rc:%d\n", v8, v8, v80, v23);
    if (v4[387] != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_538_0);
    }
    CFStringRef v82 = CK_DEFAULT_LOG_INTERNAL_1;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138543362;
      *(void *)&uint8_t buf[4] = v81;
      _os_log_impl(&dword_215163000, v82, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
    }
    if (v81) {
      CFRelease(v81);
    }
  }
  if (v8 >= a2 || *(_DWORD *)(a1 + 256))
  {
LABEL_13:
    if (v4[387] != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_553);
    }
    goto LABEL_15;
  }
  if (*(unsigned char *)(a1 + 17)) {
    _CSCompactStorage_cold_4();
  }
  CFMutableArrayRef v83 = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  if (!v83)
  {
    unint64_t v90 = 0;
    uint64_t v91 = 0xFFFFFFFFLL;
    goto LABEL_522;
  }
  CFArrayRef v84 = v83;
  unint64_t v235 = v8;
  uint64_t v85 = _CSPrepareStatement(a1, @"SELECT ft_rowid FROM CSStorageFileTable WHERE (ft_pspace > 0 AND ft_status IS NULL) ORDER BY ft_pspace DESC", "SELECT ft_rowid FROM CSStorageFileTable WHERE (ft_pspace > 0 AND ft_status IS NULL) ORDER BY ft_pspace DESC");
  if (!v85)
  {
    unint64_t v90 = 0;
    uint64_t v91 = 0xFFFFFFFFLL;
    goto LABEL_521;
  }
  uint64_t v86 = v85;
  while (2)
  {
    uint64_t v87 = CS_sqlite3_step((uint64_t *)v86);
    if (v87 != 100)
    {
      uint64_t v92 = v87;
      if (v87 != 101)
      {
        if (v4[387] != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2122);
        }
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          CFAllocatorRef v93 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
          CFTypeRef v94 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
          CFStringRef v95 = CFStringCreateWithFormat(v93, 0, @"sqlite3_step returned: %d %s\n", v92, v94);
          if (v4[387] != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2125);
          }
          uint64_t v96 = CK_DEFAULT_LOG_INTERNAL_1;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138543362;
            *(void *)&uint8_t buf[4] = v95;
            _os_log_impl(&dword_215163000, v96, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
          }
          if (v95) {
            CFRelease(v95);
          }
        }
      }
      _CSFinishPreparedStatement((uint64_t *)v86);
      CFIndex alloca = CFArrayGetCount(v84);
      if (alloca < 1)
      {
        unint64_t v90 = 0;
LABEL_518:
        uint64_t v86 = 0;
        goto LABEL_519;
      }
      CFIndex v97 = 0;
      unint64_t v90 = 0;
      CFAllocatorRef v229 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      unint64_t v233 = v80;
      while (1)
      {
        if (*(_DWORD *)(a1 + 256)) {
          goto LABEL_518;
        }
        CFNumberRef v98 = (const __CFNumber *)CFArrayGetValueAtIndex(v84, v97);
        sqlite3_int64 v236 = 0;
        if (CFNumberGetValue(v98, kCFNumberLongLongType, &v236)) {
          break;
        }
LABEL_483:
        uint64_t v91 = 0;
        uint64_t v86 = 0;
        if (++v97 >= alloca || !v233) {
          goto LABEL_520;
        }
      }
      sqlite3_int64 v99 = v236;
      v238 = 0;
      if (*(unsigned char *)(a1 + 17)) {
        _CSCompactStorage_cold_3();
      }
      if (CSAttemptAutomaticFirstAidForStorageFile(a1, v236))
      {
        _CSCloseCachedStorageFile(a1, v99, 0);
        bzero(buf, 0x400uLL);
        if (!__CSCreateStoragePath(a1, v99, 0, buf, 0x400uLL))
        {
LABEL_247:
          LODWORD(v106) = 0;
LABEL_248:
          LODWORD(v109) = -1;
LABEL_249:
          if (v238)
          {
            sqlite3_int64 v110 = *((void *)v238 + 2);
            _CSCloseStorageFile(a1, v238, 0);
            if (v110)
            {
              bzero(v239, 0x400uLL);
              if (__CSCreateStoragePath(a1, v110, 0, v239, 0x400uLL)) {
                unlink(v239);
              }
              _CSRemoveStorageFileFromDb((uint64_t *)a1, v110);
            }
          }
          if (v106 == 13 && (int)v109 < 0) {
            unint64_t v112 = 28;
          }
          else {
            unint64_t v112 = v109;
          }
          if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2352);
          }
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          {
            CFStringRef v113 = CFStringCreateWithFormat(v229, 0, @"There was a problem compacting SF ft_rowid:%lld, rc:%d\n", v99, v112);
            if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2359);
            }
            v114 = CK_DEFAULT_LOG_INTERNAL_1;
            if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)uint64_t v239 = 138543362;
              *(void *)&v239[4] = v113;
              _os_log_impl(&dword_215163000, v114, OS_LOG_TYPE_ERROR, "%{public}@", v239, 0xCu);
            }
            if (v113) {
              CFRelease(v113);
            }
          }
          if (v112)
          {
            if (v112 == 28)
            {
              uint64_t v86 = 0;
              uint64_t v91 = 28;
              unint64_t v4 = new_ringing + 1048;
              uint64_t v5 = new_ringing + 1048;
              goto LABEL_520;
            }
            goto LABEL_482;
          }
LABEL_479:
          v90 += v112;
          unint64_t v201 = v233 - v112;
          if (v233 < v112) {
            unint64_t v201 = 0;
          }
          unint64_t v233 = v201;
LABEL_482:
          unint64_t v4 = new_ringing + 1048;
          uint64_t v5 = new_ringing + 1048;
          goto LABEL_483;
        }
        uint64_t v100 = open(buf, 2, 384);
        if (v100 != -1)
        {
          uint64_t v101 = v100;
          memset(&valuePtr, 0, sizeof(valuePtr));
          if (fstat(v100, &valuePtr) == -1)
          {
            if (v4[387] != -1) {
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2160);
            }
            if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
            {
              int __fdb = v101;
              int v117 = __error();
              int v118 = strerror(*v117);
              CFStringRef v119 = CFStringCreateWithFormat(v229, 0, @"fstat failed for \"%s\": %s", buf, v118);
              if (v4[387] != -1) {
                dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2164);
              }
              uint64_t v120 = CK_DEFAULT_LOG_INTERNAL_1;
              if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)uint64_t v239 = 138543362;
                *(void *)&v239[4] = v119;
                _os_log_impl(&dword_215163000, v120, OS_LOG_TYPE_ERROR, "%{public}@", v239, 0xCu);
              }
              if (v119) {
                CFRelease(v119);
              }
              long long v104 = 0;
              LODWORD(v106) = 0;
              LODWORD(v101) = __fdb;
              goto LABEL_299;
            }
            long long v104 = 0;
          }
          else
          {
            off_t st_size = valuePtr.st_size;
            CFStringRef v103 = _CSPrepareStatement(a1, @"SELECT CSChunkTable.ct_rowid, CSChunkTable.dataLen, CSChunkTable.offset FROM CSStorageFileTable INNER JOIN CSChunkTable on CSChunkTable.ft_rowid = CSStorageFileTable.ft_rowid WHERE CSChunkTable.ft_rowid = ? AND CSChunkTable.refCount > 0 AND CSChunkTable.location = ? AND CSStorageFileTable.ft_status IS NULL ORDER BY CSChunkTable.refCount DESC", "SELECT CSChunkTable.ct_rowid, CSChunkTable.dataLen, CSChunkTable.offset FROM CSStorageFileTable INNER JOIN CSChunkTable on CSChunkTable.ft_rowid = CSStorageFileTable.ft_rowid WHERE CSChunkTable.ft_rowid = ? AND CSChunkTable.refCount > 0 AND CSChunkTable.location = ? AND CSStorageFileTable.ft_status IS NULL ORDER BY CSChunkTable.refCount DESC");
            long long v104 = v103;
            if (v103)
            {
              unint64_t v213 = st_size;
              int v105 = sqlite3_bind_int64(v103[2], 1, v99);
              if (v105 || (int v105 = sqlite3_bind_int(v104[2], 2, 115)) != 0)
              {
                LODWORD(v106) = v105;
LABEL_299:
                _CSFinishPreparedStatement((uint64_t *)v104);
                close(v101);
                goto LABEL_248;
              }
              uint64_t v211 = v104;
              off_t __offsetb = 0;
              *(void *)__fdc = v101;
              uint64_t v209 = 0;
              v123 = 0;
              uint64_t v214 = 0;
              unint64_t v124 = 0;
              while (1)
              {
                CFTypeRef cf = v123;
                v125 = (uint64_t *)v211;
                uint64_t v126 = CS_sqlite3_step((uint64_t *)v211);
                if (v126 != 100) {
                  break;
                }
                sqlite3_int64 v127 = sqlite3_column_int64(v211[2], 0);
                int v128 = sqlite3_column_int(v211[2], 1);
                unint64_t v129 = sqlite3_column_int64(v211[2], 2);
                off_t v130 = v129;
                if (!v128)
                {
                  if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2172);
                  }
                  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                  {
                    CFStringRef v151 = CFStringCreateWithFormat(v229, 0, @"Bad chunk in \"%s\", ctRowId:%llu, chunkOffset:0x%llx, chunkSize:0x%llx\n", buf, v127, v130, 0);
                    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2179);
                    }
                    CFStringRef v152 = CK_DEFAULT_LOG_INTERNAL_1;
                    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)uint64_t v239 = 138543362;
                      *(void *)&v239[4] = v151;
                      _os_log_impl(&dword_215163000, v152, OS_LOG_TYPE_ERROR, "%{public}@", v239, 0xCu);
                    }
                    if (v151) {
                      CFRelease(v151);
                    }
                  }
                  goto LABEL_379;
                }
                uint64_t v131 = v128;
                size_t __nbyte = v128;
                sqlite3_int64 v210 = v127;
                if (v129 > 0x1400064)
                {
                  v153 = "offset_bounded_by_storage_file_length";
                  goto LABEL_358;
                }
                int v132 = __fdc[0];
                if (v131 > 0x500019)
                {
                  v153 = "length_bounded_by_slot_size";
LABEL_358:
                  xpc_object_t v154 = xpc_string_create("compact_source_invalid");
                  off_t __offsetc = (off_t)v153;
                  xpc_object_t v155 = xpc_string_create(v153);
                  long long keys = xmmword_264234940;
                  xpc_object_t values = v154;
                  CFAllocatorRef v156 = v154;
                  xpc_object_t v246 = v155;
                  xpc_object_t v157 = xpc_dictionary_create((const char *const *)&keys, &values, 2uLL);
                  analytics_send_event();
                  xpc_release(v156);
                  xpc_release(v155);
                  xpc_release(v157);
                  if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2187);
                  }
                  uint64_t v158 = CK_DEFAULT_LOG_INTERNAL_1;
                  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_FAULT))
                  {
                    *(_DWORD *)uint64_t v239 = 136316162;
                    *(void *)&v239[4] = buf;
                    *(_WORD *)&v239[12] = 2048;
                    *(void *)&v239[14] = v210;
                    *(_WORD *)&v239[22] = 2048;
                    size_t v240 = v130;
                    __int16 v241 = 2048;
                    CFStringRef v242 = (const char *)__nbyte;
                    __int16 v243 = 2080;
                    off_t v244 = __offsetc;
                    uint64_t v159 = v158;
                    CFStringRef v160 = "Bad chunk offset/size in \"%s\", ctRowId:%llu, chunkOffset:0x%llx, chunkSize:0x%llx (%s violated)";
                    uint32_t v161 = 52;
LABEL_366:
                    _os_log_impl(&dword_215163000, v159, OS_LOG_TYPE_FAULT, v160, v239, v161);
                  }
LABEL_379:
                  LODWORD(v109) = -1;
                  goto LABEL_380;
                }
                if (v129 + v131 > 0x1400064)
                {
                  v153 = "chunk_contained_in_storage_file";
                  goto LABEL_358;
                }
                off_t v133 = __offsetb + v131;
                if ((unint64_t)(__offsetb + v131) > 0x1400064)
                {
                  xpc_object_t v162 = xpc_string_create("compact_destination_invalid");
                  xpc_object_t v163 = xpc_string_create("chunk_contained_in_storage_file");
                  long long keys = xmmword_264234940;
                  xpc_object_t values = v162;
                  xpc_object_t v246 = v163;
                  xpc_object_t v164 = xpc_dictionary_create((const char *const *)&keys, &values, 2uLL);
                  analytics_send_event();
                  xpc_release(v162);
                  xpc_release(v163);
                  xpc_release(v164);
                  if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2193);
                  }
                  uint64_t v165 = CK_DEFAULT_LOG_INTERNAL_1;
                  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_FAULT))
                  {
                    *(_DWORD *)uint64_t v239 = 134218754;
                    *(void *)&v239[4] = v210;
                    *(_WORD *)&v239[12] = 2048;
                    *(void *)&v239[14] = __offsetb;
                    *(_WORD *)&v239[22] = 2048;
                    size_t v240 = __nbyte;
                    __int16 v241 = 2080;
                    CFStringRef v242 = "chunk_contained_in_storage_file";
                    uint64_t v159 = v165;
                    CFStringRef v160 = "Bad chunk offset/size, ctRowId:%llu, dstOffset:0x%llx, chunkSize:0x%llx (%s violated)";
                    uint32_t v161 = 42;
                    goto LABEL_366;
                  }
                  goto LABEL_379;
                }
                v134 = v214;
                if (!v214)
                {
                  v134 = malloc_type_malloc(0x500019uLL, 0xB2A00BD5uLL);
                  if (!v134)
                  {
                    uint64_t v214 = 0;
                    LODWORD(v109) = -1;
                    LODWORD(v106) = 100;
                    goto LABEL_382;
                  }
                }
                uint64_t v214 = v134;
                ssize_t v135 = pread(__fdc[0], v134, __nbyte, v130);
                if (v135 != __nbyte)
                {
                  ssize_t v166 = v135;
                  if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2198);
                  }
                  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                  {
                    v167 = "Read size doesn't match request";
                    if (v166 < 0)
                    {
                      uint64_t v168 = __error();
                      v167 = strerror(*v168);
                    }
                    CFStringRef v169 = CFStringCreateWithFormat(v229, 0, @"pread(%d, 0x%llx, 0x%llx) failed: %s, read %lld bytes, file is 0x%llx(%lld) bytes long\n", *(void *)__fdc, __nbyte, v130, v167, v166, v213, v213);
                    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2206);
                    }
                    int v170 = CK_DEFAULT_LOG_INTERNAL_1;
                    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)uint64_t v239 = 138543362;
                      *(void *)&v239[4] = v169;
                      _os_log_impl(&dword_215163000, v170, OS_LOG_TYPE_ERROR, "%{public}@", v239, 0xCu);
                    }
                    if (v169) {
                      CFRelease(v169);
                    }
                  }
                  CSsql_corruption_checking_do_0(a1, *(sqlite3 **)(a1 + 24), "DELETE FROM CSChunkTable WHERE ct_rowid = %lld", v210);
                  goto LABEL_379;
                }
                uint64_t v136 = v238;
                if (!v238)
                {
                  uint64_t v137 = _CSCreateStorageFile(a1, &v238);
                  if (v137)
                  {
                    uint64_t v109 = v137;
                    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2211);
                    }
                    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                    {
                      CFStringRef v174 = CFStringCreateWithFormat(v229, 0, @"_CSCreateStorageFile failed, rc:%d\n", v109);
                      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2218);
                      }
                      v175 = CK_DEFAULT_LOG_INTERNAL_1;
                      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                      {
LABEL_456:
                        *(_DWORD *)uint64_t v239 = 138543362;
                        *(void *)&v239[4] = v174;
                        _os_log_impl(&dword_215163000, v175, OS_LOG_TYPE_ERROR, "%{public}@", v239, 0xCu);
                      }
LABEL_457:
                      if (v174) {
                        CFRelease(v174);
                      }
                    }
LABEL_380:
                    LODWORD(v106) = 100;
LABEL_381:
                    int v132 = __fdc[0];
LABEL_382:
                    _CSFinishPreparedStatement((uint64_t *)v211);
                    close(v132);
                    if (v214) {
                      free(v214);
                    }
                    if (cf) {
                      CFRelease(cf);
                    }
                    goto LABEL_249;
                  }
                  uint64_t v136 = v238;
                  uint64_t v209 = *((void *)v238 + 2);
                }
                ssize_t v138 = pwrite(v136[2], v214, __nbyte, __offsetb);
                if (v138 < 0)
                {
                  LODWORD(v109) = *__error();
                  if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2222);
                  }
                  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                  {
                    uint64_t v171 = *__error();
                    int v172 = __error();
                    v173 = strerror(*v172);
                    CFStringRef v174 = CFStringCreateWithFormat(v229, 0, @"pwrite(%d, sz:0x%llx, o:0x%llx) failed: %d, %s\n", *(void *)__fdc, __nbyte, __offsetb, v171, v173);
                    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2229);
                    }
                    v175 = CK_DEFAULT_LOG_INTERNAL_1;
                    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
                      goto LABEL_456;
                    }
                    goto LABEL_457;
                  }
                  goto LABEL_380;
                }
                ssize_t v139 = v138;
                v123 = cf;
                if (v138 != __nbyte)
                {
                  if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2233);
                  }
                  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                  {
                    CFStringRef v176 = CFStringCreateWithFormat(v229, 0, @"pwrite(%d, sz:0x%llx, o:0x%llx) failed: wrote %lld bytes\n", *(void *)__fdc, __nbyte, __offsetb, v139);
                    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2240);
                    }
                    v177 = CK_DEFAULT_LOG_INTERNAL_1;
                    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)uint64_t v239 = 138543362;
                      *(void *)&v239[4] = v176;
                      _os_log_impl(&dword_215163000, v177, OS_LOG_TYPE_ERROR, "%{public}@", v239, 0xCu);
                    }
                    if (v176) {
                      CFRelease(v176);
                    }
                  }
                  LODWORD(v109) = 28;
                  goto LABEL_380;
                }
                if (!cf)
                {
                  v123 = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
                  if (!v123)
                  {
                    CFTypeRef cf = 0;
LABEL_487:
                    LODWORD(v109) = -1;
                    LODWORD(v106) = 100;
                    goto LABEL_381;
                  }
                }
                if (!v209) {
                  _CSCompactStorage_cold_2();
                }
                *(void *)uint64_t v239 = v209;
                *(void *)&v239[8] = v210;
                *(void *)&v239[16] = __offsetb;
                CFDataRef v140 = CFDataCreate(0, v239, 24);
                if (!v140)
                {
                  CFTypeRef cf = v123;
                  goto LABEL_487;
                }
                CFDataRef v141 = v140;
                CFArrayAppendValue(v123, v140);
                CFRelease(v141);
                v124 += __nbyte;
                off_t __offsetb = v133;
              }
              uint64_t v106 = v126;
              if (v126 != 101)
              {
                if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                  dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2245);
                }
                v125 = (uint64_t *)v211;
                if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                {
                  uint64_t v142 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
                  CFStringRef v143 = CFStringCreateWithFormat(v229, 0, @"sqlite3_step error: %d, %s", v106, v142);
                  if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2249);
                  }
                  v144 = CK_DEFAULT_LOG_INTERNAL_1;
                  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)uint64_t v239 = 138543362;
                    *(void *)&v239[4] = v143;
                    _os_log_impl(&dword_215163000, v144, OS_LOG_TYPE_ERROR, "%{public}@", v239, 0xCu);
                  }
                  v125 = (uint64_t *)v211;
                  if (v143) {
                    CFRelease(v143);
                  }
                }
              }
              _CSFinishPreparedStatement(v125);
              if (v214) {
                free(v214);
              }
              if (cf)
              {
                if (v124)
                {
                  unint64_t v145 = *((void *)v238 + 3);
                  BOOL v146 = v145 >= v124;
                  uint64_t v147 = v145 - v124;
                  if (!v146) {
                    uint64_t v147 = 0;
                  }
                  uint64_t v106 = CSsql_corruption_checking_do_0(a1, *(sqlite3 **)(a1 + 24), "UPDATE CSStorageFileTable SET ft_space = %lld, ft_pspace = 0 WHERE ft_rowid = %lld", v147, *((void *)v238 + 2));
                  if (v106)
                  {
                    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2265);
                    }
                    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                    {
                      v148 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
                      CFStringRef v149 = CFStringCreateWithFormat(v229, 0, @"CSsql_do error: %d, %s", v106, v148);
                      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2269);
                      }
                      uint64_t v150 = CK_DEFAULT_LOG_INTERNAL_1;
                      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)uint64_t v239 = 138543362;
                        *(void *)&v239[4] = v149;
                        _os_log_impl(&dword_215163000, v150, OS_LOG_TYPE_ERROR, "%{public}@", v239, 0xCu);
                      }
                      if (v149) {
                        CFRelease(v149);
                      }
                    }
LABEL_513:
                    uint64_t v211 = 0;
LABEL_514:
                    uint64_t v214 = 0;
                    LODWORD(v109) = -1;
                    goto LABEL_381;
                  }
                }
                uint64_t v211 = _CSPrepareStatement(a1, @"UPDATE CSChunkTable SET offset = ?, ft_rowid = ? WHERE ct_rowid = ?", "UPDATE CSChunkTable SET offset = ?, ft_rowid = ? WHERE ct_rowid = ?");
                if (!v211) {
                  goto LABEL_513;
                }
                if (_CSBeginTransactionSqlRc(a1)) {
                  goto LABEL_514;
                }
                off_t __offsetd = CFArrayGetCount(cf);
                if (__offsetd < 1)
                {
                  CFIndex v191 = 0;
                }
                else
                {
                  CFIndex v191 = 0;
                  while (1)
                  {
                    CFDataRef v192 = (const __CFData *)CFArrayGetValueAtIndex(cf, v191);
                    BytePtr = (sqlite3_int64 *)CFDataGetBytePtr(v192);
                    sqlite3_bind_int64(v211[2], 1, BytePtr[2]);
                    sqlite3_bind_int64(v211[2], 2, *BytePtr);
                    sqlite3_bind_int64(v211[2], 3, BytePtr[1]);
                    uint64_t v194 = CS_sqlite3_step((uint64_t *)v211);
                    if (v194 != 101) {
                      break;
                    }
                    int v195 = sqlite3_reset(v211[2]);
                    if (v195 || (int v195 = sqlite3_clear_bindings(v211[2])) != 0)
                    {
                      LODWORD(v106) = v195;
                      goto LABEL_499;
                    }
                    if (__offsetd == ++v191)
                    {
                      LODWORD(v106) = 0;
                      CFIndex v191 = __offsetd;
                      goto LABEL_499;
                    }
                  }
                  uint64_t v106 = v194;
                  if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2277);
                  }
                  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                  {
                    v202 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
                    CFStringRef __nbytea = CFStringCreateWithFormat(v229, 0, @"sqlite3_step error: %d, %s", v106, v202);
                    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2281);
                    }
                    CFStringRef v203 = CK_DEFAULT_LOG_INTERNAL_1;
                    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)uint64_t v239 = 138543362;
                      *(void *)&v239[4] = __nbytea;
                      _os_log_impl(&dword_215163000, v203, OS_LOG_TYPE_ERROR, "%{public}@", v239, 0xCu);
                    }
                    if (__nbytea) {
                      CFRelease(__nbytea);
                    }
                  }
                }
LABEL_499:
                _CSFinishPreparedStatement((uint64_t *)v211);
                if ((_CSSyncStorageFile(a1, (uint64_t)v238, 1) & 1) == 0)
                {
                  if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2285);
                  }
                  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                  {
                    CFStringRef v204 = CFStringCreateWithFormat(v229, 0, @"failed to sync storage file while relocating chunks in %s", "_CSRelocateStorageFileChunks");
                    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2292);
                    }
                    v205 = CK_DEFAULT_LOG_INTERNAL_1;
                    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)uint64_t v239 = 138543362;
                      *(void *)&v239[4] = v204;
                      _os_log_impl(&dword_215163000, v205, OS_LOG_TYPE_ERROR, "%{public}@", v239, 0xCu);
                    }
                    if (v204) {
                      CFRelease(v204);
                    }
                  }
LABEL_512:
                  _CSRollbackTransactionSqlRc(a1);
                  goto LABEL_513;
                }
                if (v191 != __offsetd) {
                  goto LABEL_512;
                }
                LODWORD(v106) = _CSEndTransactionSqlRc(a1);
                if (v106) {
                  goto LABEL_512;
                }
                CFRelease(cf);
                _CSCloseStorageFile(a1, v238, 0);
                v238 = 0;
              }
              else
              {
                if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                  dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2253);
                }
                if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
                {
LABEL_414:
                  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
                  {
                    CFStringRef v180 = CFStringCreateWithFormat(v229, 0, @"Removing SF \"%s\"\n", buf);
                    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2303);
                    }
                    v181 = CK_DEFAULT_LOG_INTERNAL_1;
                    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)uint64_t v239 = 138543362;
                      *(void *)&v239[4] = v180;
                      _os_log_impl(&dword_215163000, v181, OS_LOG_TYPE_DEBUG, "%{public}@", v239, 0xCu);
                    }
                    if (v180) {
                      CFRelease(v180);
                    }
                  }
                  if (unlink(buf))
                  {
                    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2307);
                    }
                    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                    {
                      CFStringRef v182 = __error();
                      v183 = strerror(*v182);
                      CFStringRef v184 = CFStringCreateWithFormat(v229, 0, @"unlink failed for \"%s\": %s\n", buf, v183);
                      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2314);
                      }
                      v185 = CK_DEFAULT_LOG_INTERNAL_1;
                      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)uint64_t v239 = 138543362;
                        *(void *)&v239[4] = v184;
                        _os_log_impl(&dword_215163000, v185, OS_LOG_TYPE_ERROR, "%{public}@", v239, 0xCu);
                      }
                      if (v184) {
                        CFRelease(v184);
                      }
                    }
                  }
                  close(__fdc[0]);
                  uint64_t v186 = CSsql_corruption_checking_do_0(a1, *(sqlite3 **)(a1 + 24), "DELETE FROM CSChunkTable WHERE ft_rowid = %lld", v99);
                  if (v186)
                  {
                    uint64_t v187 = v186;
                    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2318);
                    }
                    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
                      goto LABEL_469;
                    }
                    BOOL v188 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
                    CFStringRef v189 = CFStringCreateWithFormat(v229, 0, @"sqlite3_step error: %d (%s)", v187, v188);
                    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2325);
                    }
                    v190 = CK_DEFAULT_LOG_INTERNAL_1;
                    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                    {
LABEL_467:
                      if (v189) {
                        CFRelease(v189);
                      }
LABEL_469:
                      unint64_t v112 = v213 - v124;
                      if (v213 < v124) {
                        _CSCompactStorage_cold_1();
                      }
                      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2341);
                      }
                      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
                      {
                        CFStringRef v199 = CFStringCreateWithFormat(v229, 0, @"fileSize:%llu, totalMoved:%llu\n", v213, v124);
                        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2348);
                        }
                        uint64_t v200 = CK_DEFAULT_LOG_INTERNAL_1;
                        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
                        {
                          *(_DWORD *)uint64_t v239 = 138543362;
                          *(void *)&v239[4] = v199;
                          _os_log_impl(&dword_215163000, v200, OS_LOG_TYPE_DEBUG, "%{public}@", v239, 0xCu);
                        }
                        if (v199) {
                          CFRelease(v199);
                        }
                      }
                      goto LABEL_479;
                    }
                  }
                  else
                  {
                    uint64_t v196 = CSsql_corruption_checking_do_0(a1, *(sqlite3 **)(a1 + 24), "DELETE FROM CSStorageFileTable WHERE ft_rowid = %lld", v99);
                    if (!v196) {
                      goto LABEL_469;
                    }
                    uint64_t v197 = v196;
                    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2329);
                    }
                    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
                      goto LABEL_469;
                    }
                    uint64_t v198 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
                    CFStringRef v189 = CFStringCreateWithFormat(v229, 0, @"CSsql_do error: %d (%s)", v197, v198);
                    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2336);
                    }
                    v190 = CK_DEFAULT_LOG_INTERNAL_1;
                    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
                      goto LABEL_467;
                    }
                  }
                  *(_DWORD *)uint64_t v239 = 138543362;
                  *(void *)&v239[4] = v189;
                  _os_log_impl(&dword_215163000, v190, OS_LOG_TYPE_ERROR, "%{public}@", v239, 0xCu);
                  goto LABEL_467;
                }
                CFStringRef v178 = CFStringCreateWithFormat(v229, 0, @"Nothing was moved from SF ft_rowid:%lld\n", v99);
                if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                  dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2260);
                }
                unsigned int v179 = CK_DEFAULT_LOG_INTERNAL_1;
                if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)uint64_t v239 = 138543362;
                  *(void *)&v239[4] = v178;
                  _os_log_impl(&dword_215163000, v179, OS_LOG_TYPE_DEBUG, "%{public}@", v239, 0xCu);
                }
                if (v178) {
                  CFRelease(v178);
                }
              }
              if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2296);
              }
              goto LABEL_414;
            }
          }
          LODWORD(v106) = 0;
          goto LABEL_299;
        }
        v115 = __error();
        uint64_t v116 = v4[387];
        if (*v115 == 2)
        {
          if (v116 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2149);
          }
          if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
            goto LABEL_247;
          }
          CFStringRef v107 = CFStringCreateWithFormat(v229, 0, @"\"%s\" does not exist, ft_rowid:%llu\n", buf, v99);
          if (v4[387] != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2156);
          }
          long long v108 = CK_DEFAULT_LOG_INTERNAL_1;
          if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
            goto LABEL_245;
          }
        }
        else
        {
          if (v116 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2138);
          }
          if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
            goto LABEL_247;
          }
          uint64_t v121 = __error();
          uint64_t v122 = strerror(*v121);
          CFStringRef v107 = CFStringCreateWithFormat(v229, 0, @"open failed for \"%s\", ft_rowid=%lld: %s", buf, v99, v122);
          if (v4[387] != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2145);
          }
          long long v108 = CK_DEFAULT_LOG_INTERNAL_1;
          if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
            goto LABEL_245;
          }
        }
      }
      else
      {
        if (v4[387] != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2128);
        }
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
          goto LABEL_247;
        }
        CFStringRef v107 = CFStringCreateWithFormat(v229, 0, @"Failed first aid check in %s, skipping chunk copying", "_CSRelocateStorageFileChunks");
        if (v4[387] != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2134);
        }
        long long v108 = CK_DEFAULT_LOG_INTERNAL_1;
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
          goto LABEL_245;
        }
      }
      *(_DWORD *)uint64_t v239 = 138543362;
      *(void *)&v239[4] = v107;
      _os_log_impl(&dword_215163000, v108, OS_LOG_TYPE_ERROR, "%{public}@", v239, 0xCu);
LABEL_245:
      if (v107) {
        CFRelease(v107);
      }
      goto LABEL_247;
    }
    if (!*(_DWORD *)(a1 + 256))
    {
      *(void *)buf = 0;
      *(void *)buf = sqlite3_column_int64(v86[2], 0);
      CFNumberRef v88 = CFNumberCreate(0, kCFNumberLongLongType, buf);
      if (!v88)
      {
        unint64_t v90 = 0;
        uint64_t v91 = 0xFFFFFFFFLL;
        goto LABEL_520;
      }
      CFNumberRef v89 = v88;
      CFArrayAppendValue(v84, v88);
      CFRelease(v89);
      continue;
    }
    break;
  }
  unint64_t v90 = 0;
LABEL_519:
  uint64_t v91 = 0;
LABEL_520:
  _CSFinishPreparedStatement((uint64_t *)v86);
LABEL_521:
  CFRelease(v84);
  unint64_t v8 = v235;
LABEL_522:
  if (v4[387] != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_542);
  }
  v8 += v90;
  if (os_log_type_enabled((os_log_t)v5[398], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v206 = v80 - v90;
    if (v80 < v90) {
      uint64_t v206 = 0;
    }
    CFStringRef v207 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"copyReferencedChunks freed %llu bytes, totalFreeSpace:%llu, spaceNeeded:%llu, rc:%d\n", v90, v8, v206, v91);
    if (v4[387] != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_549);
    }
    int v208 = v5[398];
    if (os_log_type_enabled(v208, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138543362;
      *(void *)&uint8_t buf[4] = v207;
      _os_log_impl(&dword_215163000, v208, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
    }
    if (v207) {
      CFRelease(v207);
    }
    goto LABEL_13;
  }
LABEL_15:
  if (os_log_type_enabled((os_log_t)v5[398], OS_LOG_TYPE_DEBUG))
  {
    CFStringRef v9 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"freeSpace:%llu\n", v8);
    if (v4[387] != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_560);
    }
    unint64_t v10 = v5[398];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138543362;
      *(void *)&uint8_t buf[4] = v9;
      _os_log_impl(&dword_215163000, v10, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
    }
    if (v9) {
      CFRelease(v9);
    }
  }
  int v11 = sqlite3_wal_checkpoint_v2(*(sqlite3 **)(a1 + 24), 0, 1, 0, 0);
  if (v11)
  {
    int v12 = v11;
    if (v4[387] != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_564);
    }
    int v13 = v5[398];
    if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
    {
      sqlite3_int64 v14 = sqlite3_errstr(v12);
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "_CSCompactStorage";
      __int16 v249 = 2080;
      CFAllocatorRef v250 = v14;
      _os_log_impl(&dword_215163000, v13, OS_LOG_TYPE_FAULT, "failed to checkpoint WAL in %s: %s", buf, 0x16u);
    }
  }
  return v8;
}

uint64_t _CSStoreChunks(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int a4, void *a5, uint64_t a6)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  CFMutableSetRef Mutable = CFSetCreateMutable(0, 0, MEMORY[0x263EFFFA0]);
  if (Mutable)
  {
    unint64_t v10 = Mutable;
    if (a3)
    {
      int v11 = (unsigned __int8 *)(a2 + 84);
      unint64_t v12 = a3;
      do
      {
        *(void *)&long long valuePtr = 0;
        if (_CSStorageFileForChunkSignature(a1, v11, 115, (sqlite3_int64 *)&valuePtr))
        {
          CFNumberRef v13 = CFNumberCreate(0, kCFNumberLongLongType, &valuePtr);
          if (v13)
          {
            CFNumberRef v14 = v13;
            CFSetAddValue(v10, v13);
            CFRelease(v14);
          }
        }
        v11 += a4;
        --v12;
      }
      while (v12);
    }
    CFIndex Count = CFSetGetCount(v10);
    CFStringRef v16 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
    CFSetGetValues(v10, v16);
    int v17 = 1;
    if (Count >= 1)
    {
      CFStringRef v18 = (CFNumberRef *)v16;
      do
      {
        *(void *)&long long valuePtr = 0;
        if (CFNumberGetValue(*v18, kCFNumberLongLongType, &valuePtr)) {
          v17 &= CSAttemptAutomaticFirstAidForStorageFile(a1, valuePtr);
        }
        ++v18;
        --Count;
      }
      while (Count);
    }
    free(v16);
    CFRelease(v10);
    if ((v17 & 1) == 0)
    {
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_567);
      }
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        CFStringRef v19 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Failed first aid check in %s", "_CSStoreChunks");
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_573);
        }
        uint64_t v20 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          LODWORD(valuePtr) = 138543362;
          *(void *)((char *)&valuePtr + 4) = v19;
          _os_log_impl(&dword_215163000, v20, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&valuePtr, 0xCu);
        }
        if (v19) {
          CFRelease(v19);
        }
      }
    }
  }
  if (_CSBeginTransactionSqlRc(a1))
  {
    unint64_t v21 = 0;
    CFNumberRef v22 = a5;
    goto LABEL_201;
  }
  _CSSetDirtyState(a1, 1);
  if (!a3)
  {
    CFNumberRef v22 = a5;
    if (_CSEndTransactionSqlRc(a1))
    {
      unint64_t v21 = 0;
      goto LABEL_200;
    }
    goto LABEL_205;
  }
  unint64_t v21 = 0;
  uint64_t v71 = a4;
  CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  uint64_t v23 = &new_ringing[131];
  CFNumberRef v22 = a5;
  uint64_t v24 = a2;
  while (1)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2389);
    }
    uint64_t v25 = v24 + v21 * v71;
    if (os_log_type_enabled((os_log_t)v23[398], OS_LOG_TYPE_DEBUG))
    {
      CFStringRef v26 = CFStringCreateWithFormat(alloc, 0, @"o:0x%llx, sz:0x%x, (0x%x/%u/%llu)\n", *(void *)(v25 + 72), *(unsigned int *)(v25 + 80), *(unsigned __int8 *)(v25 + 84), *(unsigned __int8 *)(v25 + 25), *(void *)(v25 + 16));
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2395);
      }
      CFStringRef v27 = v23[398];
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(valuePtr) = 138543362;
        *(void *)((char *)&valuePtr + 4) = v26;
        _os_log_impl(&dword_215163000, v27, OS_LOG_TYPE_DEBUG, "%{public}@", (uint8_t *)&valuePtr, 0xCu);
      }
      uint64_t v23 = &new_ringing[131];
      if (v26) {
        CFRelease(v26);
      }
    }
    if (!*(_DWORD *)(v25 + 80))
    {
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2399);
      }
      if (os_log_type_enabled((os_log_t)v23[398], OS_LOG_TYPE_DEFAULT))
      {
        if (a6) {
          uint64_t v28 = *(void *)(a6 + 104);
        }
        else {
          uint64_t v28 = 0;
        }
        CFStringRef v29 = CFStringCreateWithFormat(alloc, 0, @"zero length chunk for file \"%s\"\n", v28);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2406);
        }
        unint64_t v30 = v23[398];
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(valuePtr) = 138543362;
          *(void *)((char *)&valuePtr + 4) = v29;
          _os_log_impl(&dword_215163000, v30, OS_LOG_TYPE_DEFAULT, "%{public}@", (uint8_t *)&valuePtr, 0xCu);
        }
        uint64_t v23 = &new_ringing[131];
        if (v29) {
          CFRelease(v29);
        }
      }
    }
    if (*(unsigned char *)(a1 + 17))
    {
      uint64_t v31 = 0;
      sqlite3_int64 insert_rowid = 0;
      goto LABEL_180;
    }
    if (a6 && *(unsigned char *)(a6 + 183)) {
      *(void *)(a6 + 528) = mach_absolute_time();
    }
    sqlite3_int64 insert_rowid = _CSTokenForChunkSignature(a1, (unsigned __int8 *)(v25 + 84), 115);
    if (insert_rowid)
    {
      unsigned int v33 = _CSChunkIsInvalid(a1, insert_rowid);
      char v34 = v33;
      unsigned int v35 = v33;
      if (!a6) {
        goto LABEL_60;
      }
    }
    else
    {
      unsigned int v35 = 0;
      char v34 = 1;
      if (!a6) {
        goto LABEL_60;
      }
    }
    if (*(unsigned char *)(a6 + 183)) {
      *(void *)(a6 + 536) += mach_absolute_time() - *(void *)(a6 + 528);
    }
    if (v35)
    {
      CFStringRef v36 = @"UPDATE CSChunkTable SET cid = ?, ft_rowid = ?, offset = ?, dataLen = ?, refCount = ?, timestamp = ?, location = ? WHERE ct_rowid = ?";
      CFStringRef v37 = "UPDATE CSChunkTable SET cid = ?, ft_rowid = ?, offset = ?, dataLen = ?, refCount = ?, timestamp = ?, locatio"
            "n = ? WHERE ct_rowid = ?";
    }
    else
    {
      CFStringRef v36 = @"INSERT INTO CSChunkTable (cid, ft_rowid, offset, dataLen, refCount, timestamp, location) VALUES (?, ?, ?, ?, ?, ?, ?)";
      CFStringRef v37 = "INSERT INTO CSChunkTable (cid, ft_rowid, offset, dataLen, refCount, timestamp, location) VALUES (?, ?, ?, ?, ?, ?, ?)";
    }
    uint64_t v31 = _CSPrepareStatement(a1, v36, v37);
    if (!v31) {
      goto LABEL_99;
    }
LABEL_60:
    if (a6 && *(unsigned char *)(a6 + 183)) {
      *(void *)(a6 + 528) = mach_absolute_time();
    }
    if (v34)
    {
      if (v35)
      {
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2425);
        }
        if (os_log_type_enabled((os_log_t)v23[398], OS_LOG_TYPE_DEBUG))
        {
          CFStringRef v38 = CFStringCreateWithFormat(alloc, 0, @"Fixing corruption in chunk %llu by storing chunk: o:0x%llx, sz:0x%x\n", insert_rowid, *(void *)(v25 + 72), *(unsigned int *)(v25 + 80));
          if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2432);
          }
          __int16 v39 = v23[398];
          if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
          {
            LODWORD(valuePtr) = 138543362;
            *(void *)((char *)&valuePtr + 4) = v38;
            _os_log_impl(&dword_215163000, v39, OS_LOG_TYPE_DEBUG, "%{public}@", (uint8_t *)&valuePtr, 0xCu);
          }
          uint64_t v23 = &new_ringing[131];
          if (v38) {
            CFRelease(v38);
          }
        }
        sqlite3_int64 v40 = _CSRefCountForChunkWithRowID(a1, insert_rowid);
        if ((v40 & 0x8000000000000000) == 0)
        {
          CFStringRef v41 = (CFStringRef)v40;
          if (v40)
          {
            sqlite3_int64 v42 = v40;
            do
            {
              _CSReleaseChunkForSignature(a1, (unsigned char *)(v25 + 84));
              --v42;
            }
            while (v42);
          }
          goto LABEL_124;
        }
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2447);
        }
        if (!os_log_type_enabled((os_log_t)v23[398], OS_LOG_TYPE_ERROR))
        {
LABEL_123:
          CFStringRef v41 = 0;
          goto LABEL_124;
        }
        CFStringRef v41 = CFStringCreateWithFormat(alloc, 0, @"Could not retrieve retain count for chunk with ct_rowid %llu", insert_rowid);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2454);
        }
        CFStringRef v47 = v23[398];
        if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
        {
          LODWORD(valuePtr) = 138543362;
          *(void *)((char *)&valuePtr + 4) = v41;
          _os_log_impl(&dword_215163000, v47, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&valuePtr, 0xCu);
        }
        if (v41)
        {
          CFRelease(v41);
          goto LABEL_123;
        }
LABEL_124:
        if (a6)
        {
LABEL_125:
          if (*(unsigned char *)(a6 + 183))
          {
            *(void *)(a6 + 536) += mach_absolute_time() - *(void *)(a6 + 528);
            if (*(unsigned char *)(a6 + 183)) {
              *(void *)(a6 + 512) = mach_absolute_time();
            }
          }
          long long v82 = 0u;
          memset(v83, 0, 25);
          long long valuePtr = 0u;
          int v48 = _StoreChunk(a1, (unsigned int *)v25, (uint64_t)&valuePtr);
          if (*(unsigned char *)(a6 + 183))
          {
            *(void *)(a6 + 520) += mach_absolute_time() - *(void *)(a6 + 512);
            if (*(unsigned char *)(a6 + 183))
            {
              *(void *)(a6 + 528) = mach_absolute_time();
              goto LABEL_131;
            }
            if (v48)
            {
LABEL_137:
              unint64_t v49 = "offset_bounded_by_storage_file_length";
              if (*((void *)&v82 + 1) > 0x1400064uLL
                || (unint64_t v49 = "length_bounded_by_slot_size", v83[2] > 0x500019u)
                || (unint64_t v49 = "chunk_contained_in_storage_file", *((void *)&v82 + 1) + (unint64_t)v83[2] > 0x1400064))
              {
                xpc_object_t v50 = xpc_string_create("chunk_insert_invalid");
                xpc_object_t v51 = xpc_string_create(v49);
                *(_OWORD *)long long keys = xmmword_264234940;
                values[0] = v50;
                values[1] = v51;
                xpc_object_t v52 = xpc_dictionary_create((const char *const *)keys, values, 2uLL);
                analytics_send_event();
                xpc_release(v50);
                xpc_release(v51);
                xpc_release(v52);
                if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                  dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2459);
                }
                uint64_t v24 = a2;
                int v53 = CK_DEFAULT_LOG_INTERNAL_1;
                if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_FAULT))
                {
                  *(_DWORD *)buf = 134218498;
                  CFStringRef v74 = (CFStringRef)*((void *)&v82 + 1);
                  __int16 v75 = 1024;
                  int v76 = v83[2];
                  __int16 v77 = 2080;
                  int64_t v78 = v49;
                  _os_log_impl(&dword_215163000, v53, OS_LOG_TYPE_FAULT, "Bad chunk value(s): o:0x%llx, sz:0x%x (%s violated)", buf, 0x1Cu);
                }
                goto LABEL_178;
              }
              int v67 = CKSchemeAndSignatureSize((unsigned char *)(v25 + 84));
              uint64_t v54 = sqlite3_bind_blob(v31[2], 1, (const void *)(v25 + 84), v67, 0);
              uint64_t v24 = a2;
              if (v54) {
                goto LABEL_156;
              }
              uint64_t v54 = sqlite3_bind_int(v31[2], 2, SHIDWORD(valuePtr));
              if (v54) {
                goto LABEL_156;
              }
              uint64_t v54 = sqlite3_bind_int64(v31[2], 3, *((sqlite3_int64 *)&v82 + 1));
              if (v54) {
                goto LABEL_156;
              }
              uint64_t v54 = sqlite3_bind_int(v31[2], 4, v67 + v83[2] + 4);
              if (v54) {
                goto LABEL_156;
              }
              uint64_t v54 = sqlite3_bind_int64(v31[2], 5, (sqlite3_int64)v41 + *(unsigned __int8 *)(v25 + 25));
              if (v54) {
                goto LABEL_156;
              }
              uint64_t v54 = sqlite3_bind_int64(v31[2], 6, *(sqlite3_int64 *)&v83[3]);
              if (v54) {
                goto LABEL_156;
              }
              uint64_t v54 = sqlite3_bind_int(v31[2], 7, 115);
              if (v54) {
                unsigned int v55 = 0;
              }
              else {
                unsigned int v55 = v35;
              }
              if (v55 == 1) {
                uint64_t v54 = sqlite3_bind_int64(v31[2], 8, insert_rowid);
              }
              if (v54)
              {
LABEL_156:
                if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                  dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2463);
                }
                if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                {
                  CFStringRef v56 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
                  CFStringRef v57 = CFStringCreateWithFormat(alloc, 0, @"sqlite3_bind failed: %s (%d)\n", v56, v54);
                  if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2467);
                  }
                  CFNumberRef v58 = CK_DEFAULT_LOG_INTERNAL_1;
                  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 138543362;
                    CFStringRef v74 = v57;
                    _os_log_impl(&dword_215163000, v58, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
                  }
                  if (v57) {
                    CFRelease(v57);
                  }
                }
LABEL_178:
                uint64_t v23 = &new_ringing[131];
LABEL_179:
                CFNumberRef v22 = a5;
                goto LABEL_180;
              }
              uint64_t v59 = CS_sqlite3_step((uint64_t *)v31);
              if (v59 == 101)
              {
                *(unsigned char *)(v25 + 24) = 1;
                uint64_t v24 = a2;
                uint64_t v23 = new_ringing + 1048;
                if ((v35 & 1) == 0) {
                  sqlite3_int64 insert_rowid = sqlite3_last_insert_rowid(*(sqlite3 **)(a1 + 24));
                }
                goto LABEL_179;
              }
              uint64_t v60 = v59;
              if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2471);
              }
              if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
              {
                uint64_t v61 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
                CFStringRef v62 = CFStringCreateWithFormat(alloc, 0, @"sqlite3_step failed: %s (%d)\n", v61, v60);
                if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                  dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2475);
                }
                unint64_t v63 = CK_DEFAULT_LOG_INTERNAL_1;
                if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 138543362;
                  CFStringRef v74 = v62;
                  _os_log_impl(&dword_215163000, v63, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
                }
                if (v62) {
                  CFRelease(v62);
                }
              }
            }
          }
          else
          {
LABEL_131:
            if (v48) {
              goto LABEL_137;
            }
          }
LABEL_177:
          uint64_t v24 = a2;
          goto LABEL_178;
        }
      }
      else
      {
        if (a6)
        {
          if (*(unsigned char *)(a6 + 184))
          {
            if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2436);
            }
            if (os_log_type_enabled((os_log_t)v23[398], OS_LOG_TYPE_DEBUG))
            {
              CFStringRef v45 = CFStringCreateWithFormat(alloc, 0, @"Storing chunk: o:0x%llx, sz:0x%x\n", *(void *)(v25 + 72), *(unsigned int *)(v25 + 80));
              if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2443);
              }
              CFStringRef v46 = v23[398];
              if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
              {
                LODWORD(valuePtr) = 138543362;
                *(void *)((char *)&valuePtr + 4) = v45;
                _os_log_impl(&dword_215163000, v46, OS_LOG_TYPE_DEBUG, "%{public}@", (uint8_t *)&valuePtr, 0xCu);
              }
              if (v45) {
                CFRelease(v45);
              }
            }
            printSignature((unsigned __int8 *)(v25 + 84));
          }
          CFStringRef v41 = 0;
          goto LABEL_125;
        }
        CFStringRef v41 = 0;
      }
      long long v82 = 0u;
      memset(v83, 0, 25);
      long long valuePtr = 0u;
      if (_StoreChunk(a1, (unsigned int *)v25, (uint64_t)&valuePtr)) {
        goto LABEL_137;
      }
      goto LABEL_177;
    }
    if (*(unsigned char *)(v25 + 25))
    {
      CFNumberRef v22 = a5;
      if (a6 && *(unsigned char *)(a6 + 184))
      {
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2414);
        }
        if (os_log_type_enabled((os_log_t)v23[398], OS_LOG_TYPE_DEBUG))
        {
          CFStringRef v43 = CFStringCreateWithFormat(alloc, 0, @"Retaining chunk: o:0x%llx, sz:0x%x\n", *(void *)(v25 + 72), *(unsigned int *)(v25 + 80));
          if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2421);
          }
          unint64_t v44 = v23[398];
          if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
          {
            LODWORD(valuePtr) = 138543362;
            *(void *)((char *)&valuePtr + 4) = v43;
            _os_log_impl(&dword_215163000, v44, OS_LOG_TYPE_DEBUG, "%{public}@", (uint8_t *)&valuePtr, 0xCu);
          }
          uint64_t v23 = new_ringing + 1048;
          if (v43) {
            CFRelease(v43);
          }
        }
        printSignature((unsigned __int8 *)(v25 + 84));
      }
      if (!_CSRetainChunkForRowID(a1, insert_rowid)) {
        sqlite3_int64 insert_rowid = 0;
      }
    }
    else
    {
LABEL_99:
      CFNumberRef v22 = a5;
    }
    uint64_t v24 = a2;
LABEL_180:
    _CSFinishPreparedStatement((uint64_t *)v31);
    if (a6 && *(unsigned char *)(a6 + 183)) {
      *(void *)(a6 + 536) += mach_absolute_time() - *(void *)(a6 + 528);
    }
    v22[v21] = insert_rowid;
    if (!insert_rowid) {
      break;
    }
    if (++v21 == a3)
    {
      unint64_t v21 = a3;
      goto LABEL_197;
    }
  }
  if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_577);
  }
  if (os_log_type_enabled((os_log_t)v23[398], OS_LOG_TYPE_ERROR))
  {
    CFStringRef v64 = CFStringCreateWithFormat(alloc, 0, @"_CSInsertChunk failed, i:%llu, count:%llu\n", v21, a3);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_584);
    }
    CFStringRef v65 = v23[398];
    if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
    {
      LODWORD(valuePtr) = 138543362;
      *(void *)((char *)&valuePtr + 4) = v64;
      _os_log_impl(&dword_215163000, v65, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&valuePtr, 0xCu);
    }
    if (v64) {
      CFRelease(v64);
    }
  }
LABEL_197:
  if (v21 && !_CSRecordPendingChunks(a1, v22, v21, *(void *)(a6 + 40)) || _CSEndTransactionSqlRc(a1))
  {
LABEL_200:
    _CSRollbackTransactionSqlRc(a1);
    goto LABEL_201;
  }
  if (v21 == a3)
  {
LABEL_205:
    _CSSetDirtyState(a1, 0);
    return 1;
  }
  else
  {
LABEL_201:
    if (a3 > v21) {
      bzero(&v22[v21], 8 * (a3 - v21));
    }
    return 0;
  }
}

uint64_t _CSStorageFileForChunkSignature(uint64_t a1, unsigned __int8 *a2, int a3, sqlite3_int64 *a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  unint64_t v8 = _CSPrepareStatement(a1, @"SELECT ft_rowid FROM CSChunkTable WHERE cid = ? AND location = ?", "SELECT ft_rowid FROM CSChunkTable WHERE cid = ? AND location = ?");
  if (v8)
  {
    int v9 = CKSchemeAndSignatureSize(a2);
    if (!sqlite3_bind_blob(v8[2], 1, a2, v9, 0) && !sqlite3_bind_int(v8[2], 2, a3))
    {
      uint64_t v10 = CS_sqlite3_step((uint64_t *)v8);
      uint64_t v11 = v10;
      if ((v10 - 102) > 0xFFFFFFFD)
      {
        if (v10 == 100)
        {
          sqlite3_int64 v16 = sqlite3_column_int64(v8[2], 0);
          uint64_t v17 = 1;
          goto LABEL_18;
        }
      }
      else
      {
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_731);
        }
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
          CFNumberRef v13 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
          CFStringRef v14 = CFStringCreateWithFormat(v12, 0, @"sqlite3_step returned: %s (%d), for signature:", v13, v11);
          if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_737);
          }
          unint64_t v15 = CK_DEFAULT_LOG_INTERNAL_1;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138543362;
            CFStringRef v20 = v14;
            _os_log_impl(&dword_215163000, v15, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
          }
          if (v14) {
            CFRelease(v14);
          }
        }
        printSignature(a2);
      }
    }
  }
  sqlite3_int64 v16 = 0;
  uint64_t v17 = 0;
LABEL_18:
  _CSFinishPreparedStatement((uint64_t *)v8);
  if (a4) {
    *a4 = v16;
  }
  return v17;
}

void _CSSetDirtyState(uint64_t a1, int a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  bzero(__s, 0x400uLL);
  if (CKChunkStoreGetLocation(a1, __s, 0x400uLL))
  {
    size_t v4 = strlen(__s);
    snprintf(&__s[v4], 1024 - v4, "/%s", "ChunkStoreDirty");
    if (a2)
    {
      int v5 = open(__s, 512, 384);
      if (v5 != -1)
      {
        close(v5);
        return;
      }
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2369);
      }
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        uint64_t v13 = *__error();
        CFStringRef v14 = __error();
        unint64_t v15 = strerror(*v14);
        CFStringRef v10 = CFStringCreateWithFormat(v12, 0, @"open failed on \"%s\": %d (%s)\n", __s, v13, v15);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2375);
        }
        uint64_t v11 = CK_DEFAULT_LOG_INTERNAL_1;
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
          goto LABEL_21;
        }
        *(_DWORD *)buf = 138543362;
        CFStringRef v17 = v10;
LABEL_20:
        _os_log_impl(&dword_215163000, v11, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
LABEL_21:
        if (v10) {
          CFRelease(v10);
        }
      }
    }
    else if (unlink(__s))
    {
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2379);
      }
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        uint64_t v7 = *__error();
        unint64_t v8 = __error();
        int v9 = strerror(*v8);
        CFStringRef v10 = CFStringCreateWithFormat(v6, 0, @"unlink failed \"%s\": %d (%s)\n", __s, v7, v9);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2386);
        }
        uint64_t v11 = CK_DEFAULT_LOG_INTERNAL_1;
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
          goto LABEL_21;
        }
        *(_DWORD *)buf = 138543362;
        CFStringRef v17 = v10;
        goto LABEL_20;
      }
    }
  }
}

sqlite3_int64 _CSRecordPendingChunks(uint64_t a1, const void *a2, sqlite3_int64 a3, sqlite3_int64 a4)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 17))
  {
    size_t v4 = 0;
  }
  else
  {
    uint64_t v11 = _CSPrepareStatement(a1, @"INSERT INTO CSStoragePendingChunksTable (pct_inode, pct_count, pct_chunkRowIDs) VALUES (?, ?, ?)", "INSERT INTO CSStoragePendingChunksTable (pct_inode, pct_count, pct_chunkRowIDs) VALUES (?, ?, ?)");
    size_t v4 = v11;
    if (v11
      && !sqlite3_bind_int64(v11[2], 1, a4)
      && !sqlite3_bind_int64(v4[2], 2, a3)
      && !sqlite3_bind_blob(v4[2], 3, a2, 8 * a3, 0))
    {
      uint64_t v12 = CS_sqlite3_step((uint64_t *)v4);
      if (v12 == 101)
      {
        sqlite3_int64 insert_rowid = sqlite3_last_insert_rowid(*(sqlite3 **)(a1 + 24));
        goto LABEL_4;
      }
      uint64_t v13 = v12;
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_591);
      }
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        unint64_t v15 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
        CFStringRef v16 = CFStringCreateWithFormat(v14, 0, @"sqlite3_step returned: %d (%s)\n", v13, v15);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_597);
        }
        CFStringRef v17 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          CFStringRef v19 = v16;
          _os_log_impl(&dword_215163000, v17, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
        }
        if (v16) {
          CFRelease(v16);
        }
      }
    }
  }
  sqlite3_int64 insert_rowid = 0;
LABEL_4:
  _CSFinishPreparedStatement((uint64_t *)v4);
  return insert_rowid;
}

uint64_t *_CSCommitChunkedFile(uint64_t *result, sqlite3_int64 a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v2 = (uint64_t)result;
    if (!*((unsigned char *)result + 17))
    {
      size_t v4 = _CSPrepareStatement((uint64_t)result, @"SELECT pft_inode FROM CSStoragePendingFileChunklistTable WHERE pft_token = ?", "SELECT pft_inode FROM CSStoragePendingFileChunklistTable WHERE pft_token = ?");
      int v5 = v4;
      if (v4 && !sqlite3_bind_int64(v4[2], 1, a2))
      {
        while (1)
        {
          uint64_t v7 = CS_sqlite3_step((uint64_t *)v5);
          if (v7 != 100) {
            break;
          }
          sqlite3_int64 v6 = sqlite3_column_int64(v5[2], 0);
          _CSRemovePendingBatchesForInode(v2, v6);
        }
        uint64_t v8 = v7;
        if (v7 != 101)
        {
          if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_604);
          }
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          {
            CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
            CFStringRef v10 = sqlite3_errmsg(*(sqlite3 **)(v2 + 24));
            CFStringRef v11 = CFStringCreateWithFormat(v9, 0, @"sqlite3_step returned: %d %s\n", v8, v10);
            if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_607_0);
            }
            uint64_t v12 = CK_DEFAULT_LOG_INTERNAL_1;
            if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138543362;
              CFStringRef v14 = v11;
              _os_log_impl(&dword_215163000, v12, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
            }
            if (v11) {
              CFRelease(v11);
            }
          }
        }
        CSsql_corruption_checking_do_0(v2, *(sqlite3 **)(v2 + 24), "DELETE FROM CSStoragePendingFileChunklistTable WHERE pft_token = %llu", a2);
      }
      return _CSFinishPreparedStatement((uint64_t *)v5);
    }
  }
  return result;
}

uint64_t *_CSRemovePendingBatchesForInode(uint64_t a1, sqlite3_int64 a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 17)) {
    _CSRemovePendingBatchesForInode_cold_1();
  }
  if (a2)
  {
    size_t v4 = _CSPrepareStatement(a1, @"SELECT * FROM CSStoragePendingChunksTable WHERE pct_inode = ?", "SELECT * FROM CSStoragePendingChunksTable WHERE pct_inode = ?");
    int v5 = v4;
    if (!v4) {
      return _CSFinishPreparedStatement((uint64_t *)v5);
    }
    uint64_t v6 = sqlite3_bind_int64(v4[2], 1, a2);
    if (v6)
    {
      uint64_t v7 = v6;
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2486);
      }
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFAllocatorRef v9 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
        CFStringRef v10 = CFStringCreateWithFormat(v8, 0, @"sqlite3_bind_int64 for inode:%lld returned: %d (%s)\n", a2, v7, v9);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2492);
        }
        CFStringRef v11 = CK_DEFAULT_LOG_INTERNAL_1;
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
          goto LABEL_34;
        }
        *(_DWORD *)buf = 138543362;
        CFStringRef v23 = v10;
LABEL_33:
        _os_log_impl(&dword_215163000, v11, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
LABEL_34:
        if (v10) {
          CFRelease(v10);
        }
        return _CSFinishPreparedStatement((uint64_t *)v5);
      }
      return _CSFinishPreparedStatement((uint64_t *)v5);
    }
  }
  else
  {
    int v5 = _CSPrepareStatement(a1, @"SELECT * FROM CSStoragePendingChunksTable", "SELECT * FROM CSStoragePendingChunksTable");
    if (!v5) {
      return _CSFinishPreparedStatement((uint64_t *)v5);
    }
  }
  CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  while (1)
  {
    uint64_t v12 = CS_sqlite3_step((uint64_t *)v5);
    if (v12 != 100) {
      break;
    }
    sqlite3_int64 v13 = sqlite3_column_int64(v5[2], 0);
    sqlite3_int64 v14 = sqlite3_column_int64(v5[2], 2);
    uint64_t v15 = (sqlite3_int64 *)sqlite3_column_blob(v5[2], 3);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2496);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
    {
      CFStringRef v16 = CFStringCreateWithFormat(alloc, 0, @"Removing pending batch for inode:%llu, rowId:%llu, count:0x%llu\n", a2, v13, v14);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2503);
      }
      CFStringRef v17 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        CFStringRef v23 = v16;
        _os_log_impl(&dword_215163000, v17, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      if (v16) {
        CFRelease(v16);
      }
    }
    _CSReleaseOrphanedChunks(a1, v15, v14);
    CSsql_corruption_checking_do_0(a1, *(sqlite3 **)(a1 + 24), "DELETE FROM CSStoragePendingChunksTable WHERE pct_rowid = %lld", v13);
  }
  uint64_t v18 = v12;
  if (v12 != 101)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2508);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v19 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
      CFStringRef v10 = CFStringCreateWithFormat(alloc, 0, @"sqlite3_step returned: %d %s\n", v18, v19);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2512);
      }
      CFStringRef v11 = CK_DEFAULT_LOG_INTERNAL_1;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 138543362;
      CFStringRef v23 = v10;
      goto LABEL_33;
    }
  }
  return _CSFinishPreparedStatement((uint64_t *)v5);
}

sqlite3_int64 _CSRegisterStorageChunkList(uint64_t a1, const void *a2, sqlite3_int64 a3, sqlite3_int64 a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (_CSBeginTransactionSqlRc(a1)) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 17))
  {
    CFAllocatorRef v8 = 0;
  }
  else
  {
    CFStringRef v11 = _CSPrepareStatement(a1, @"INSERT INTO CSStorageChunkListTable (clt_count, clt_chunkRowIDs, clt_inode) VALUES (?, ?, ?)", "INSERT INTO CSStorageChunkListTable (clt_count, clt_chunkRowIDs, clt_inode) VALUES (?, ?, ?)");
    CFAllocatorRef v8 = v11;
    if (v11
      && !sqlite3_bind_int64(v11[2], 1, a3)
      && !sqlite3_bind_blob(v8[2], 2, a2, 8 * a3, 0)
      && !sqlite3_bind_int64(v8[2], 3, a4))
    {
      uint64_t v12 = CS_sqlite3_step((uint64_t *)v8);
      if (v12 == 101)
      {
        sqlite3_int64 insert_rowid = sqlite3_last_insert_rowid(*(sqlite3 **)(a1 + 24));
        if (insert_rowid)
        {
          sqlite3_int64 v9 = insert_rowid;
          if (!CSsql_corruption_checking_do_0(a1, *(sqlite3 **)(a1 + 24), "DELETE FROM CSStoragePendingChunksTable WHERE pct_inode = %llu", a4)&& !CSsql_corruption_checking_do_0(a1, *(sqlite3 **)(a1 + 24), "INSERT INTO CSStoragePendingFileChunklistTable (pft_token, pft_inode) VALUES (%llu, %llu)", v9, a4))
          {
            _CSFinishPreparedStatement((uint64_t *)v8);
            if (!_CSEndTransactionSqlRc(a1)) {
              return v9;
            }
            goto LABEL_5;
          }
        }
      }
      else
      {
        uint64_t v14 = v12;
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2519);
        }
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
          CFStringRef v16 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
          CFStringRef v17 = CFStringCreateWithFormat(v15, 0, @"sqlite3_step returned: %d (%s)\n", v14, v16);
          if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2522);
          }
          uint64_t v18 = CK_DEFAULT_LOG_INTERNAL_1;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138543362;
            CFStringRef v20 = v17;
            _os_log_impl(&dword_215163000, v18, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
          }
          if (v17) {
            CFRelease(v17);
          }
        }
      }
    }
  }
  _CSFinishPreparedStatement((uint64_t *)v8);
LABEL_5:
  _CSRollbackTransactionSqlRc(a1);
  return 0;
}

uint64_t _CSRemoveStoredFile(uint64_t a1, sqlite3_int64 a2)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 17)) {
    _CSRemoveStoredFile_cold_1();
  }
  if (!a2)
  {
LABEL_17:
    uint64_t v10 = 0;
    uint64_t v13 = 0;
    goto LABEL_66;
  }
  size_t v28 = 0;
  size_t v4 = _CSChunkRefsForToken(a1, a2, &v28);
  if (!v4)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_612);
    }
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = 0;
      uint64_t v10 = 0;
      goto LABEL_68;
    }
    CFStringRef v11 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"_CSChunkRefsForToken failed\n");
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_618_0);
    }
    uint64_t v12 = CK_DEFAULT_LOG_INTERNAL_1;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      uint64_t v30 = (uint64_t)v11;
      _os_log_impl(&dword_215163000, v12, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v11) {
      CFRelease(v11);
    }
    goto LABEL_17;
  }
  int v5 = v4;
  unsigned int v6 = _CSChunkSignatureForToken(a1, *(void *)v4, 0);
  if (v6)
  {
    uint64_t v7 = malloc_type_malloc(v6, 0xFEC8C1E6uLL);
    if (v7)
    {
      CFAllocatorRef v8 = v7;
      uint64_t v9 = _CSBeginTransactionSqlRc(a1);
      if (v9)
      {
        uint64_t v10 = v9;
        goto LABEL_63;
      }
      size_t v15 = v28;
      if (!v28)
      {
LABEL_50:
        uint64_t v19 = CSsql_corruption_checking_do_0(a1, *(sqlite3 **)(a1 + 24), "DELETE FROM CSStorageChunkListTable WHERE clt_rowid = %llu", a2);
        if (v19)
        {
          uint64_t v10 = v19;
          if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_656_0);
          }
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          {
            CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
            uint64_t v21 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
            CFStringRef v22 = CFStringCreateWithFormat(v20, 0, @"CSsql_do returned: %d (%s)\n", v10, v21);
            if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_663);
            }
            CFStringRef v23 = CK_DEFAULT_LOG_INTERNAL_1;
            if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138543362;
              uint64_t v30 = (uint64_t)v22;
              _os_log_impl(&dword_215163000, v23, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
            }
            if (v22) {
              CFRelease(v22);
            }
          }
        }
        else
        {
          uint64_t v10 = _CSEndTransactionSqlRc(a1);
          if (!v10)
          {
            uint64_t v13 = 1;
            goto LABEL_64;
          }
        }
        _CSRollbackTransactionSqlRc(a1);
LABEL_63:
        uint64_t v13 = 0;
LABEL_64:
        free(v8);
        goto LABEL_65;
      }
      CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      CFStringRef v16 = (sqlite3_int64 *)v5;
      while (_CSChunkSignatureForToken(a1, *v16, v8))
      {
        if (_CSReleaseChunkForSignature(a1, v8)) {
          goto LABEL_49;
        }
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_644_0);
        }
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
          goto LABEL_49;
        }
        CFStringRef v17 = CFStringCreateWithFormat(alloc, 0, @"_CSReleaseChunkForSignature failed for chunk token %lld\n", *v16);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_651);
        }
        uint64_t v18 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
          goto LABEL_46;
        }
LABEL_47:
        if (v17) {
          CFRelease(v17);
        }
LABEL_49:
        v16 += 2;
        if (!--v15) {
          goto LABEL_50;
        }
      }
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_633);
      }
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
        goto LABEL_49;
      }
      CFStringRef v17 = CFStringCreateWithFormat(alloc, 0, @"_CSChunkSignatureForToken failed for chunk token %lld\n", *v16);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_640);
      }
      uint64_t v18 = CK_DEFAULT_LOG_INTERNAL_1;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
        goto LABEL_47;
      }
LABEL_46:
      *(_DWORD *)buf = 138543362;
      uint64_t v30 = (uint64_t)v17;
      _os_log_impl(&dword_215163000, v18, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      goto LABEL_47;
    }
  }
  else
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_622_0);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = (uint64_t)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Invalid signature size, sigSize:%u\n", 0);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_629_0);
      }
      uint64_t v14 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        uint64_t v30 = v13;
        _os_log_impl(&dword_215163000, v14, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (!v13)
      {
        uint64_t v10 = 0;
        goto LABEL_65;
      }
      CFRelease((CFTypeRef)v13);
    }
  }
  uint64_t v10 = 0;
  uint64_t v13 = 0;
LABEL_65:
  free(v5);
LABEL_66:
  if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_667);
  }
LABEL_68:
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
  {
    CFStringRef v24 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"token:%llu, result:%d, sqlRc:%d\n", a2, v13, v10);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_674_0);
    }
    uint64_t v25 = CK_DEFAULT_LOG_INTERNAL_1;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138543362;
      uint64_t v30 = (uint64_t)v24;
      _os_log_impl(&dword_215163000, v25, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
    }
    if (v24) {
      CFRelease(v24);
    }
  }
  return v13;
}

unsigned int *_CSChunkRefsForToken(uint64_t a1, sqlite3_int64 a2, size_t *a3)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  *a3 = 0;
  unsigned int v6 = _CSPrepareStatement(a1, @"SELECT clt_count, clt_chunkRowIDs FROM CSStorageChunkListTable WHERE clt_rowid = ?", "SELECT clt_count, clt_chunkRowIDs FROM CSStorageChunkListTable WHERE clt_rowid = ?");
  uint64_t v7 = v6;
  if (!v6 || sqlite3_bind_int64(v6[2], 1, a2)) {
    goto LABEL_3;
  }
  uint64_t v10 = CS_sqlite3_step((uint64_t *)v7);
  if (v10 != 100)
  {
    uint64_t v20 = v10;
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_707);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      CFAllocatorRef v21 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      CFStringRef v22 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
      CFStringRef v23 = CFStringCreateWithFormat(v21, 0, @"sqlite3_step returned: %d %s, for listToken:%llu\n", v20, v22, a2);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_713);
      }
      CFStringRef v24 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        CFStringRef v28 = v23;
        _os_log_impl(&dword_215163000, v24, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v23) {
        CFRelease(v23);
      }
    }
    goto LABEL_3;
  }
  sqlite3_int64 v11 = sqlite3_column_int64(v7[2], 0);
  if (!v11 || (size_t v12 = v11, (v13 = malloc_type_calloc(v11, 8uLL, 0x100004000313F17uLL)) == 0))
  {
LABEL_3:
    _CSFinishPreparedStatement((uint64_t *)v7);
    return 0;
  }
  uint64_t v14 = v13;
  size_t v15 = sqlite3_column_blob(v7[2], 1);
  memcpy(v14, v15, 8 * v12);
  CFStringRef v16 = (unsigned int *)malloc_type_calloc(v12, 0x10uLL, 0x1000040D9A13B51uLL);
  CFAllocatorRef v8 = v16;
  if (v16)
  {
    uint64_t v17 = 0;
    uint64_t v18 = v16 + 2;
    while (1)
    {
      unsigned int v19 = _CSChunkSizeForToken(a1, *((void *)v14 + v17));
      if (!v19) {
        break;
      }
      *uint64_t v18 = v19;
      *((void *)v18 - 1) = *((void *)v14 + v17++);
      v18 += 4;
      if (v12 == v17)
      {
        *a3 = v12;
        goto LABEL_13;
      }
    }
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_717_0);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v25 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"_CSChunkSizeForToken failed for file token %llu, chunk token:%llu (count:%llu)\n", a2, *((void *)v14 + v17), v12);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_724_0);
      }
      CFStringRef v26 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        CFStringRef v28 = v25;
        _os_log_impl(&dword_215163000, v26, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v25) {
        CFRelease(v25);
      }
    }
    _CSFinishPreparedStatement((uint64_t *)v7);
    free(v8);
    CFAllocatorRef v8 = 0;
  }
  else
  {
LABEL_13:
    _CSFinishPreparedStatement((uint64_t *)v7);
  }
  free(v14);
  return v8;
}

CFStringRef _CSChunkSignatureForToken(uint64_t a1, sqlite3_int64 a2, void *a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  int v5 = _CSPrepareStatement(a1, @"SELECT cid FROM CSChunkTable WHERE ct_rowid = ?", "SELECT cid FROM CSChunkTable WHERE ct_rowid = ?");
  unsigned int v6 = v5;
  if (!v5 || sqlite3_bind_int64(v5[2], 1, a2)) {
    goto LABEL_3;
  }
  if (CS_sqlite3_step((uint64_t *)v6) == 100)
  {
    uint64_t v9 = sqlite3_column_blob(v6[2], 0);
    uint64_t v10 = CKSchemeAndSignatureSize(v9);
    CFStringRef v7 = (CFStringRef)v10;
    if (a3) {
      memcpy(a3, v9, v10);
    }
  }
  else
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_757);
    }
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
      goto LABEL_3;
    }
    CFStringRef v7 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"no signature for token %llu\n", a2);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_763);
    }
    sqlite3_int64 v11 = CK_DEFAULT_LOG_INTERNAL_1;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      CFStringRef v13 = v7;
      _os_log_impl(&dword_215163000, v11, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v7)
    {
      CFRelease(v7);
LABEL_3:
      CFStringRef v7 = 0;
    }
  }
  _CSFinishPreparedStatement((uint64_t *)v6);
  return v7;
}

unint64_t _CSReleaseChunkForSignature(uint64_t a1, unsigned char *a2)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  size_t v4 = _CSPrepareStatement(a1, @"SELECT refCount, dataLen, ft_rowid, ct_rowid FROM CSChunkTable WHERE cid = ? AND location = ?", "SELECT refCount, dataLen, ft_rowid, ct_rowid FROM CSChunkTable WHERE cid = ? AND location = ?");
  if (!v4)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_979);
    }
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
      goto LABEL_24;
    }
    unint64_t v11 = (unint64_t)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"null sqlite3_stmt (sel_stmt)\n");
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_986);
    }
    size_t v12 = CK_DEFAULT_LOG_INTERNAL_1;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
      goto LABEL_22;
    }
    *(_DWORD *)buf = 138543362;
    CFStringRef v48 = (CFStringRef)v11;
    goto LABEL_21;
  }
  int v5 = CKSchemeAndSignatureSize(a2);
  uint64_t v6 = sqlite3_bind_blob(v4[2], 1, a2, v5, 0);
  if (v6 || (uint64_t v6 = sqlite3_bind_int(v4[2], 2, 115), v6))
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_895);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      CFAllocatorRef v8 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
      CFStringRef v9 = CFStringCreateWithFormat(v7, 0, @"sqlite3_bind failed: %s (%d)\n", v8, v6);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_901);
      }
      uint64_t v10 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        CFStringRef v48 = v9;
        _os_log_impl(&dword_215163000, v10, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v9) {
        CFRelease(v9);
      }
    }
    goto LABEL_13;
  }
  uint64_t v14 = CS_sqlite3_step((uint64_t *)v4);
  if (v14 == 100)
  {
    sqlite3_int64 v18 = sqlite3_column_int64(v4[2], 0);
    unsigned int v19 = sqlite3_column_int(v4[2], 1);
    sqlite3_int64 v20 = sqlite3_column_int64(v4[2], 2);
    sqlite3_int64 v21 = sqlite3_column_int64(v4[2], 3);
    if (v18)
    {
      if (v18 != 1)
      {
        CFStringRef v22 = _CSPrepareStatement(a1, @"UPDATE CSChunkTable SET refCount = ? WHERE ct_rowid = ?", "UPDATE CSChunkTable SET refCount = ? WHERE ct_rowid = ?");
        if (v22)
        {
          CFStringRef v23 = v22;
          sqlite3_bind_int64(v22[2], 1, v18 - 1);
          sqlite3_bind_int64(v23[2], 2, v21);
          uint64_t v24 = CS_sqlite3_step((uint64_t *)v23);
          if (v24 != 101)
          {
            uint64_t v25 = v24;
            if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_927);
            }
            if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
            {
              CFAllocatorRef v26 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
              CFStringRef v27 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
              CFStringRef v28 = CFStringCreateWithFormat(v26, 0, @"sqlite3_step returned: %d %s\n", v25, v27);
              if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_931);
              }
              uint64_t v29 = CK_DEFAULT_LOG_INTERNAL_1;
              if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138543362;
                CFStringRef v48 = v28;
                _os_log_impl(&dword_215163000, v29, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
              }
              if (v28) {
                CFRelease(v28);
              }
            }
          }
          _CSFinishPreparedStatement((uint64_t *)v23);
          goto LABEL_13;
        }
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_935);
        }
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
LABEL_24:
          unint64_t v11 = 0;
          goto LABEL_25;
        }
        unint64_t v11 = (unint64_t)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"null sqlite3_stmt (stmt)\n");
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_942);
        }
        size_t v12 = CK_DEFAULT_LOG_INTERNAL_1;
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
LABEL_22:
          if (!v11) {
            goto LABEL_25;
          }
          CFRelease((CFTypeRef)v11);
          goto LABEL_24;
        }
        *(_DWORD *)buf = 138543362;
        CFStringRef v48 = (CFStringRef)v11;
LABEL_21:
        _os_log_impl(&dword_215163000, v12, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
        goto LABEL_22;
      }
    }
    else
    {
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_916);
      }
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        CFStringRef v30 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"refCount already zero for:");
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_923);
        }
        uint64_t v31 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          CFStringRef v48 = v30;
          _os_log_impl(&dword_215163000, v31, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
        }
        if (v30) {
          CFRelease(v30);
        }
      }
      printSignature(a2);
    }
    uint64_t v32 = CSsql_corruption_checking_do_0(a1, *(sqlite3 **)(a1 + 24), "UPDATE CSChunkTable SET refCount = 0 WHERE ct_rowid = %lld", v21);
    if (!v32)
    {
      LODWORD(v36) = 1;
      goto LABEL_71;
    }
    uint64_t v33 = v32;
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_947);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      CFAllocatorRef v34 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      unsigned int v35 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
      CFStringRef v36 = CFStringCreateWithFormat(v34, 0, @"CSsql_do returned: %d %s\n", v33, v35);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_954);
      }
      CFStringRef v37 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        CFStringRef v48 = v36;
        _os_log_impl(&dword_215163000, v37, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (!v36)
      {
LABEL_71:
        sqlite3_int64 v46 = 0;
        if (CSsql_get64_safe(a1, 1, &v46, "SELECT ft_pspace FROM CSStorageFileTable WHERE ft_rowid = %lld", v20))
        {
          sqlite3_int64 v38 = v46 + v19;
          if (!__CFADD__(v46, v19))
          {
            v46 += v19;
            uint64_t v41 = CSsql_corruption_checking_do_0(a1, *(sqlite3 **)(a1 + 24), "UPDATE CSStorageFileTable SET ft_pspace = %lld WHERE ft_rowid = %lld", v38, v20);
            if (v41)
            {
              uint64_t v42 = v41;
              if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_960);
              }
              if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
              {
                CFAllocatorRef v43 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
                unint64_t v44 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
                CFStringRef v39 = CFStringCreateWithFormat(v43, 0, @"CSsql_do returned: %d %s\n", v42, v44);
                if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                  dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_964);
                }
                CFStringRef v45 = CK_DEFAULT_LOG_INTERNAL_1;
                if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 138543362;
                  CFStringRef v48 = v39;
                  _os_log_impl(&dword_215163000, v45, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
                }
                LODWORD(v36) = 0;
LABEL_90:
                if (v39) {
                  CFRelease(v39);
                }
                goto LABEL_100;
              }
              LODWORD(v36) = 0;
            }
LABEL_100:
            unint64_t v11 = v36 != 0;
            goto LABEL_25;
          }
        }
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_968);
        }
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
          goto LABEL_100;
        }
        CFStringRef v39 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"unable to update purgable space for SF rowID:%llu\n", v20);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_975);
        }
        sqlite3_int64 v40 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          CFStringRef v48 = v39;
          _os_log_impl(&dword_215163000, v40, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
        }
        goto LABEL_90;
      }
      CFRelease(v36);
    }
    LODWORD(v36) = 0;
    goto LABEL_71;
  }
  uint64_t v15 = v14;
  if (v14 != 101)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_905);
    }
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
      goto LABEL_24;
    }
    CFAllocatorRef v16 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    uint64_t v17 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
    unint64_t v11 = (unint64_t)CFStringCreateWithFormat(v16, 0, @"sqlite3_step failed: %s (%d)\n", v17, v15);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_912);
    }
    size_t v12 = CK_DEFAULT_LOG_INTERNAL_1;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
      goto LABEL_22;
    }
    *(_DWORD *)buf = 138543362;
    CFStringRef v48 = (CFStringRef)v11;
    goto LABEL_21;
  }
LABEL_13:
  unint64_t v11 = 1;
LABEL_25:
  _CSFinishPreparedStatement((uint64_t *)v4);
  return v11;
}

CFStringRef _CSChunkSizeForToken(uint64_t a1, sqlite3_int64 a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  size_t v4 = _CSPrepareStatement(a1, @"SELECT cid, dataLen FROM CSChunkTable WHERE ct_rowid = ? AND location = ?", "SELECT cid, dataLen FROM CSChunkTable WHERE ct_rowid = ? AND location = ?");
  int v5 = v4;
  if (!v4) {
    goto LABEL_4;
  }
  if (sqlite3_bind_int64(v4[2], 1, a2)) {
    goto LABEL_4;
  }
  if (sqlite3_bind_int(v5[2], 2, 115)) {
    goto LABEL_4;
  }
  uint64_t v8 = CS_sqlite3_step((uint64_t *)v5);
  if (v8 == 101) {
    goto LABEL_4;
  }
  uint64_t v9 = v8;
  if (v8 == 100)
  {
    uint64_t v10 = sqlite3_column_blob(v5[2], 0);
    unint64_t v11 = CKSchemeAndSignatureSize(v10);
    unint64_t v12 = sqlite3_column_int64(v5[2], 1);
    if (v12 - v11 >= 4) {
      unsigned int v13 = v12 - v11 - 4;
    }
    else {
      unsigned int v13 = 0;
    }
    if (v12 >= v11) {
      CFStringRef v6 = (CFStringRef)v13;
    }
    else {
      CFStringRef v6 = 0;
    }
    goto LABEL_5;
  }
  if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_681_0);
  }
  if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
  {
LABEL_4:
    CFStringRef v6 = 0;
    goto LABEL_5;
  }
  CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  uint64_t v15 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
  CFStringRef v6 = CFStringCreateWithFormat(v14, 0, @"sqlite3_step returned: %d %s, for _CSChunkSizeForToken\n", v9, v15);
  if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_687);
  }
  CFAllocatorRef v16 = CK_DEFAULT_LOG_INTERNAL_1;
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138543362;
    CFStringRef v18 = v6;
    _os_log_impl(&dword_215163000, v16, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
  }
  if (v6)
  {
    CFRelease(v6);
    goto LABEL_4;
  }
LABEL_5:
  _CSFinishPreparedStatement((uint64_t *)v5);
  return v6;
}

CFStringRef _CSChunkIsInvalid(uint64_t a1, sqlite3_int64 a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  size_t v4 = _CSPrepareStatement(a1, @"SELECT CSChunkTable.ct_rowid, CSStorageFileTable.ft_rowid, CSStorageFileTable.ft_status FROM CSStorageFileTable INNER JOIN CSChunkTable on CSChunkTable.ft_rowid = CSStorageFileTable.ft_rowid WHERE CSChunkTable.ct_rowid = ? ", "SELECT CSChunkTable.ct_rowid, CSStorageFileTable.ft_rowid, CSStorageFileTable.ft_status FROM CSStorageFileTable INNER JOIN CSChunkTable on CSChunkTable.ft_rowid = CSStorageFileTable.ft_rowid WHERE CSChunkTable.ct_rowid = ? ");
  int v5 = v4;
  if (!v4) {
    goto LABEL_3;
  }
  if (sqlite3_bind_int64(v4[2], 1, a2)) {
    goto LABEL_3;
  }
  uint64_t v8 = CS_sqlite3_step((uint64_t *)v5);
  if (v8 == 101) {
    goto LABEL_3;
  }
  uint64_t v9 = v8;
  if (v8 == 100)
  {
    CFStringRef v6 = (CFStringRef)(sqlite3_column_int(v5[2], 2) == 109);
    goto LABEL_4;
  }
  if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_694_0);
  }
  if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
    goto LABEL_3;
  }
  CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  unint64_t v11 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
  CFStringRef v6 = CFStringCreateWithFormat(v10, 0, @"sqlite3_step returned in %s: %s (%d)", "_CSChunkIsInvalid", v11, v9);
  if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_700);
  }
  unint64_t v12 = CK_DEFAULT_LOG_INTERNAL_1;
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138543362;
    CFStringRef v14 = v6;
    _os_log_impl(&dword_215163000, v12, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
  }
  if (v6)
  {
    CFRelease(v6);
LABEL_3:
    CFStringRef v6 = 0;
  }
LABEL_4:
  _CSFinishPreparedStatement((uint64_t *)v5);
  return v6;
}

sqlite3_int64 _CSTokenForChunkSignature(uint64_t a1, unsigned __int8 *a2, int a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  CFStringRef v6 = _CSPrepareStatement(a1, @"SELECT ct_rowid FROM CSChunkTable WHERE cid = ? AND location = ?", "SELECT ct_rowid FROM CSChunkTable WHERE cid = ? AND location = ?");
  if (!v6) {
    goto LABEL_17;
  }
  int v7 = CKSchemeAndSignatureSize(a2);
  sqlite3_int64 v8 = 0;
  if (!sqlite3_bind_blob(v6[2], 1, a2, v7, 0))
  {
    if (!sqlite3_bind_int(v6[2], 2, a3))
    {
      uint64_t v9 = CS_sqlite3_step((uint64_t *)v6);
      uint64_t v10 = v9;
      if ((v9 - 102) <= 0xFFFFFFFD)
      {
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_744);
        }
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
          unint64_t v12 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
          CFStringRef v13 = CFStringCreateWithFormat(v11, 0, @"sqlite3_step returned: %d %s, for signature:", v10, v12);
          if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_750);
          }
          CFStringRef v14 = CK_DEFAULT_LOG_INTERNAL_1;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138543362;
            CFStringRef v17 = v13;
            _os_log_impl(&dword_215163000, v14, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
          }
          if (v13) {
            CFRelease(v13);
          }
        }
        printSignature(a2);
        goto LABEL_17;
      }
      if (v9 == 100)
      {
        sqlite3_int64 v8 = sqlite3_column_int64(v6[2], 0);
        goto LABEL_18;
      }
    }
LABEL_17:
    sqlite3_int64 v8 = 0;
  }
LABEL_18:
  _CSFinishPreparedStatement((uint64_t *)v6);
  return v8;
}

sqlite3_int64 _CSAddChunk(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(a1 + 17))
  {
    sqlite3_int64 insert_rowid = _CSTokenForChunkSignature(a1, a2, 115);
    if (insert_rowid) {
      return insert_rowid;
    }
    int v7 = _CSPrepareStatement(a1, @"INSERT INTO CSChunkTable (cid, ft_rowid, offset, dataLen, refCount, timestamp, location) VALUES (?, ?, ?, ?, ?, ?, ?)", "INSERT INTO CSChunkTable (cid, ft_rowid, offset, dataLen, refCount, timestamp, location) VALUES (?, ?, ?, ?, ?, ?, ?)");
    if (!v7)
    {
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_777);
      }
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
        goto LABEL_28;
      }
      CFStringRef v12 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"null sqlite3_stmt\n");
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_784);
      }
      CFStringRef v13 = CK_DEFAULT_LOG_INTERNAL_1;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
        goto LABEL_26;
      }
      *(_DWORD *)buf = 138543362;
      CFStringRef v19 = v12;
      goto LABEL_25;
    }
    int v8 = CKSchemeAndSignatureSize(a2);
    int v9 = 1;
    sqlite3_bind_blob(v7[2], 1, a2, v8, 0);
    sqlite3_bind_int64(v7[2], 2, *(unsigned int *)(a3 + 12));
    sqlite3_bind_int64(v7[2], 3, *(void *)(a3 + 24));
    sqlite3_bind_int(v7[2], 5, *(_DWORD *)(a3 + 40));
    int v10 = *(_DWORD *)(a3 + 52);
    if (v10 != 115)
    {
      if (v10 != 101)
      {
LABEL_9:
        sqlite3_bind_int64(v7[2], 7, *(void *)(a3 + 44));
        sqlite3_bind_int(v7[2], 8, *(_DWORD *)(a3 + 52));
        uint64_t v11 = CS_sqlite3_step((uint64_t *)v7);
        if (v11 == 101)
        {
          sqlite3_int64 insert_rowid = sqlite3_last_insert_rowid(*(sqlite3 **)(a1 + 24));
LABEL_29:
          _CSFinishPreparedStatement((uint64_t *)v7);
          return insert_rowid;
        }
        uint64_t v14 = v11;
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_770);
        }
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
LABEL_28:
          sqlite3_int64 insert_rowid = 0;
          goto LABEL_29;
        }
        CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFAllocatorRef v16 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
        CFStringRef v12 = CFStringCreateWithFormat(v15, 0, @"sqlite3_step returned: %d %s\n", v14, v16);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_773);
        }
        CFStringRef v13 = CK_DEFAULT_LOG_INTERNAL_1;
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
LABEL_26:
          if (v12) {
            CFRelease(v12);
          }
          goto LABEL_28;
        }
        *(_DWORD *)buf = 138543362;
        CFStringRef v19 = v12;
LABEL_25:
        _os_log_impl(&dword_215163000, v13, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
        goto LABEL_26;
      }
      int v9 = 0;
    }
    sqlite3_bind_int(v7[2], 6, v9);
    goto LABEL_9;
  }
  return 0;
}

uint64_t _CSChunkForToken(uint64_t a1, void *a2, sqlite3_int64 a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  CFStringRef v6 = _CSPrepareStatement(a1, @"SELECT * FROM CSChunkTable WHERE ct_rowid = ?", "SELECT * FROM CSChunkTable WHERE ct_rowid = ?");
  int v7 = v6;
  if (!v6)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_801);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = (uint64_t)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"null sqlite3_stmt\n");
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_805_0);
      }
      CFStringRef v13 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        int v17 = 138543362;
        uint64_t v18 = v12;
        _os_log_impl(&dword_215163000, v13, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v17, 0xCu);
      }
      if (!v12)
      {
        int v9 = 0;
        goto LABEL_28;
      }
      CFRelease((CFTypeRef)v12);
    }
    goto LABEL_15;
  }
  sqlite3_bind_int64(v6[2], 1, a3);
  if (CS_sqlite3_step((uint64_t *)v7) != 100)
  {
LABEL_15:
    int v9 = 0;
    goto LABEL_16;
  }
  int v8 = (char *)sqlite3_column_blob(v7[2], 1);
  int v9 = CSCreateStoredChunk(*v8);
  if (!v9)
  {
LABEL_16:
    uint64_t v12 = 0;
    goto LABEL_28;
  }
  size_t v10 = CKSchemeAndSignatureSize(v8);
  v9[2] = a3;
  memcpy(v9 + 7, v8, v10);
  sqlite3_int64 v11 = sqlite3_column_int64(v7[2], 3);
  v9[4] = sqlite3_column_int64(v7[2], 4);
  *((_DWORD *)v9 + 10) = sqlite3_column_int(v7[2], 5);
  *((_DWORD *)v9 + 13) = sqlite3_column_int(v7[2], 8);
  *(void *)((char *)v9 + 44) = sqlite3_column_int64(v7[2], 7);
  if (*((_DWORD *)v9 + 13) == 115)
  {
    v9[3] = v10 + v9[4] + 4;
  }
  else
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_791);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v14 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"not a stored chunk");
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_797);
      }
      CFAllocatorRef v15 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        int v17 = 138543362;
        uint64_t v18 = (uint64_t)v14;
        _os_log_impl(&dword_215163000, v15, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v17, 0xCu);
      }
      if (v14) {
        CFRelease(v14);
      }
    }
  }
  *((_DWORD *)v9 + 3) = v11;
  *(void *)((char *)v9 + 4) = _CSStorageFileInode(a1, v11, 0);
  *(_DWORD *)int v9 = *(_DWORD *)(a1 + 128);
  uint64_t v12 = 1;
LABEL_28:
  _CSFinishPreparedStatement((uint64_t *)v7);
  *a2 = v9;
  return v12;
}

__darwin_ino64_t _CSStorageFileInode(uint64_t a1, sqlite3_int64 a2, char a3)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  memset(&v26, 0, sizeof(v26));
  bzero(v29, 0x400uLL);
  if (__CSCreateStoragePath(a1, a2, 0, v29, 0x400uLL))
  {
    if (!stat(v29, &v26)) {
      return v26.st_ino;
    }
    if ((a3 & 1) == 0)
    {
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1023);
      }
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        int v7 = __error();
        int v8 = strerror(*v7);
        CFStringRef v9 = CFStringCreateWithFormat(v6, 0, @"Attempting first aid in %s after stat failed for \"%s\": %s\n", "_CSStorageFileInode", v29, v8);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1030);
        }
        size_t v10 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          CFStringRef v28 = v9;
          _os_log_impl(&dword_215163000, v10, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
        }
        if (v9) {
          CFRelease(v9);
        }
      }
      CSAttemptAutomaticFirstAidForStorageFile(a1, a2);
    }
  }
  else
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1013);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      uint64_t v12 = __error();
      CFStringRef v13 = strerror(*v12);
      CFStringRef v14 = CFStringCreateWithFormat(v11, 0, @"stat failed for path: %s : %s", v29, v13);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1019);
      }
      CFAllocatorRef v15 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        CFStringRef v28 = v14;
        _os_log_impl(&dword_215163000, v15, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v14) {
        CFRelease(v14);
      }
    }
  }
  CFAllocatorRef v16 = _CSPrepareStatement(a1, @"SELECT ft_inode FROM CSStorageFileTable WHERE ft_rowid = ?", "SELECT ft_inode FROM CSStorageFileTable WHERE ft_rowid = ?");
  if (v16)
  {
    int v17 = v16;
    sqlite3_bind_int64(v16[2], 1, a2);
    uint64_t v18 = CS_sqlite3_step((uint64_t *)v17);
    if (v18 != 101)
    {
      uint64_t v19 = v18;
      if (v18 == 100)
      {
        CFStringRef v20 = (const __CFString *)sqlite3_column_int64(v17[2], 0);
LABEL_48:
        _CSFinishPreparedStatement((uint64_t *)v17);
        return (__darwin_ino64_t)v20;
      }
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1038);
      }
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        CFAllocatorRef v22 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFStringRef v23 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
        CFStringRef v20 = CFStringCreateWithFormat(v22, 0, @"sqlite3_step returned: %d %s\n", v19, v23);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1042);
        }
        uint64_t v24 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          CFStringRef v28 = v20;
          _os_log_impl(&dword_215163000, v24, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
        }
        if (!v20) {
          goto LABEL_48;
        }
        CFRelease(v20);
      }
    }
    CFStringRef v20 = 0;
    goto LABEL_48;
  }
  if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1046);
  }
  if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
    return 0;
  }
  CFStringRef v20 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"null sqlite3_stmt\n");
  if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1050);
  }
  sqlite3_int64 v21 = CK_DEFAULT_LOG_INTERNAL_1;
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138543362;
    CFStringRef v28 = v20;
    _os_log_impl(&dword_215163000, v21, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
  }
  if (v20)
  {
    CFRelease(v20);
    return 0;
  }
  return (__darwin_ino64_t)v20;
}

uint64_t _CSRetainChunkForRowID(uint64_t a1, sqlite3_int64 a2)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  size_t v4 = _CSPrepareStatement(a1, @"SELECT refCount, dataLen, ft_rowid FROM CSChunkTable WHERE ct_rowid = ?", "SELECT refCount, dataLen, ft_rowid FROM CSChunkTable WHERE ct_rowid = ?");
  int v5 = v4;
  if (!v4) {
    goto LABEL_13;
  }
  uint64_t v6 = sqlite3_bind_int64(v4[2], 1, a2);
  if (v6)
  {
    uint64_t v7 = v6;
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_812);
    }
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
      goto LABEL_13;
    }
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFStringRef v9 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
    uint64_t v10 = (uint64_t)CFStringCreateWithFormat(v8, 0, @"sqlite3_bind_int64 failed for row id %lld: %d %s", a2, v7, v9);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_818);
    }
    CFAllocatorRef v11 = CK_DEFAULT_LOG_INTERNAL_1;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      uint64_t v34 = v10;
LABEL_10:
      _os_log_impl(&dword_215163000, v11, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
  }
  else
  {
    uint64_t v13 = CS_sqlite3_step((uint64_t *)v5);
    if (v13 == 101)
    {
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_833);
      }
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
        goto LABEL_13;
      }
      uint64_t v10 = (uint64_t)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Attempted to retain row ID %llu that did not exist\n", a2);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_840);
      }
      CFAllocatorRef v11 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        uint64_t v34 = v10;
        goto LABEL_10;
      }
    }
    else
    {
      uint64_t v14 = v13;
      if (v13 == 100)
      {
        sqlite3_int64 v15 = sqlite3_column_int64(v5[2], 0);
        if (v15
          || (sqlite3_int64 v16 = sqlite3_column_int64(v5[2], 1),
              int v17 = sqlite3_column_int(v5[2], 2),
              uint64_t v18 = (char *)CSsql_get64(a1, 1, "SELECT ft_pspace FROM CSStorageFileTable WHERE ft_rowid = %lld", v16),
              (unint64_t)v18 < v17)
          || !CSsql_corruption_checking_do_0(a1, *(sqlite3 **)(a1 + 24), "UPDATE CSStorageFileTable SET ft_pspace = %lld WHERE ft_rowid = %lld", &v18[-v17], v16))
        {
          _CSFinishPreparedStatement((uint64_t *)v5);
          uint64_t v19 = _CSPrepareStatement(a1, @"UPDATE CSChunkTable SET refCount = ? WHERE ct_rowid = ?", "UPDATE CSChunkTable SET refCount = ? WHERE ct_rowid = ?");
          int v5 = v19;
          if (!v19) {
            goto LABEL_13;
          }
          sqlite3_int64 v20 = v15 + 1;
          uint64_t v21 = sqlite3_bind_int64(v19[2], 1, v15 + 1);
          if (v21)
          {
            uint64_t v22 = v21;
            if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_859);
            }
            if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
              goto LABEL_13;
            }
            CFAllocatorRef v23 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
            uint64_t v24 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
            uint64_t v10 = (uint64_t)CFStringCreateWithFormat(v23, 0, @"sqlite3_bind_int64 failed for refCount %lld: %d %s", v20, v22, v24);
            if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_866);
            }
            CFAllocatorRef v11 = CK_DEFAULT_LOG_INTERNAL_1;
            if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138543362;
              uint64_t v34 = v10;
              goto LABEL_10;
            }
          }
          else
          {
            uint64_t v25 = sqlite3_bind_int64(v5[2], 2, a2);
            if (v25)
            {
              uint64_t v26 = v25;
              if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_870);
              }
              if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
                goto LABEL_13;
              }
              CFAllocatorRef v27 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
              CFStringRef v28 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
              uint64_t v10 = (uint64_t)CFStringCreateWithFormat(v27, 0, @"sqlite3_bind_int64 failed for rowId %lld: %d %s", a2, v26, v28);
              if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_877);
              }
              CFAllocatorRef v11 = CK_DEFAULT_LOG_INTERNAL_1;
              if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138543362;
                uint64_t v34 = v10;
                goto LABEL_10;
              }
            }
            else
            {
              uint64_t v29 = CS_sqlite3_step((uint64_t *)v5);
              if (v29 == 101)
              {
                uint64_t v10 = 1;
                goto LABEL_14;
              }
              uint64_t v30 = v29;
              if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_881);
              }
              if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
                goto LABEL_13;
              }
              CFAllocatorRef v31 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
              uint64_t v32 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
              uint64_t v10 = (uint64_t)CFStringCreateWithFormat(v31, 0, @"sqlite3_step failed: %d %s", v30, v32);
              if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_888);
              }
              CFAllocatorRef v11 = CK_DEFAULT_LOG_INTERNAL_1;
              if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138543362;
                uint64_t v34 = v10;
                goto LABEL_10;
              }
            }
          }
        }
        else
        {
          if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_822);
          }
          if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
            goto LABEL_13;
          }
          uint64_t v10 = (uint64_t)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"setFT_pSpace failed for ftRowId:%llu, rowId:%llu\n", v16, a2);
          if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_829);
          }
          CFAllocatorRef v11 = CK_DEFAULT_LOG_INTERNAL_1;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138543362;
            uint64_t v34 = v10;
            goto LABEL_10;
          }
        }
      }
      else
      {
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_844);
        }
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
          goto LABEL_13;
        }
        uint64_t v10 = (uint64_t)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Failed to get row ID %llu from database (%d)\n", a2, v14);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_851);
        }
        CFAllocatorRef v11 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          uint64_t v34 = v10;
          goto LABEL_10;
        }
      }
    }
  }
  if (v10)
  {
    CFRelease((CFTypeRef)v10);
LABEL_13:
    uint64_t v10 = 0;
  }
LABEL_14:
  _CSFinishPreparedStatement((uint64_t *)v5);
  return v10;
}

sqlite3_int64 _CSRefCountForChunkWithRowID(uint64_t a1, sqlite3_int64 a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  size_t v4 = _CSPrepareStatement(a1, @"SELECT refCount FROM CSChunkTable WHERE ct_rowid = ? AND location = ?", "SELECT refCount FROM CSChunkTable WHERE ct_rowid = ? AND location = ?");
  if (!v4) {
    return -1;
  }
  int v5 = v4;
  uint64_t v6 = sqlite3_bind_int64(v4[2], 1, a2);
  if (v6 || (uint64_t v6 = sqlite3_bind_int(v5[2], 2, 115), v6))
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_993);
    }
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
      return -1;
    }
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFAllocatorRef v8 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
    CFStringRef v9 = CFStringCreateWithFormat(v7, 0, @"sqlite3_bind returned: %s (%d)", v8, v6);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_999);
    }
    uint64_t v10 = CK_DEFAULT_LOG_INTERNAL_1;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
      goto LABEL_12;
    }
    *(_DWORD *)buf = 138543362;
    CFStringRef v18 = v9;
    goto LABEL_11;
  }
  uint64_t v12 = CS_sqlite3_step((uint64_t *)v5);
  if (v12 != 100)
  {
    uint64_t v13 = v12;
    if (v12 == 101) {
      return -1;
    }
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1003);
    }
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
      return -1;
    }
    CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    sqlite3_int64 v15 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
    CFStringRef v9 = CFStringCreateWithFormat(v14, 0, @"sqlite3_step returned: %s (%d)", v15, v13);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1010);
    }
    uint64_t v10 = CK_DEFAULT_LOG_INTERNAL_1;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
      goto LABEL_12;
    }
    *(_DWORD *)buf = 138543362;
    CFStringRef v18 = v9;
LABEL_11:
    _os_log_impl(&dword_215163000, v10, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
LABEL_12:
    if (v9) {
      CFRelease(v9);
    }
    return -1;
  }
  sqlite3_int64 v16 = v5[2];
  return sqlite3_column_int64(v16, 0);
}

uint64_t addRegisteredChunk(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, char a6, unsigned char *a7, unsigned char *a8, unsigned __int8 *a9, int a10)
{
  uint64_t v15 = CKSignatureSize(a8);
  uint64_t v16 = CKSchemeAndSignatureSize(a8);
  if (a9) {
    size_t v17 = CKSchemeAndEncryptionKeySize(a9);
  }
  else {
    size_t v17 = 0;
  }
  size_t __n = v16;
  unsigned int v38 = a5;
  if (a7)
  {
    uint64_t v18 = CKSchemeAndSignatureSize(a7 + 1);
    unint64_t v19 = CKSubchunkMaxLength(a7);
    if (v19) {
      unint64_t v20 = vcvtps_u32_f32((float)a5 / (float)v19);
    }
    else {
      unint64_t v20 = 0;
    }
    size_t v22 = v20 * v18 + 1;
    char v21 = a6;
    if (*(void *)a1) {
      uint64_t v23 = CKRegisteredChunkSubchunkBlobSize(*(void *)a1);
    }
    else {
      uint64_t v23 = v22;
    }
  }
  else
  {
    char v21 = a6;
    size_t v22 = 0;
    uint64_t v23 = 0;
  }
  size_t v24 = v15 + v17 + v23;
  size_t v25 = v24 + 36;
  uint64_t v26 = *(unsigned int *)(a1 + 8);
  LODWORD(v27) = *(_DWORD *)(a1 + 12);
  if (v26 != v27)
  {
    unsigned int v31 = *(_DWORD *)(a1 + 8);
LABEL_23:
    if (v31 >= v27) {
      addRegisteredChunk_cold_4();
    }
    if (!*(void *)a1) {
      addRegisteredChunk_cold_2();
    }
    size_t v32 = *(void *)a1 + v25 * v26;
    *(_OWORD *)size_t v32 = 0u;
    *(_OWORD *)(v32 + 16) = 0u;
    *(_DWORD *)(v32 + 32) = 0;
    *(void *)size_t v32 = a2;
    *(void *)(v32 + 8) = a3;
    *(void *)(v32 + 16) = a4;
    *(_DWORD *)(v32 + 24) = v38;
    *(unsigned char *)(v32 + 28) = v21;
    *(_DWORD *)(v32 + 31) = a10;
    memcpy((void *)(v32 + 35), a8, __n);
    if (a9)
    {
      memcpy((void *)(v32 + __n + 35), a9, v17);
      *(unsigned char *)(v32 + 30) = 1;
    }
    *(unsigned char *)(v32 + 29) = v22 != 0;
    memcpy((void *)(v32 + v17 + __n + 35), a7, v22);
    unsigned int v33 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v33;
    if (v26 >= v33) {
      addRegisteredChunk_cold_3();
    }
    return 0;
  }
  if (v24 == -36) {
    addRegisteredChunk_cold_1();
  }
  if (v26 <= 1) {
    int v28 = 1;
  }
  else {
    int v28 = *(_DWORD *)(a1 + 8);
  }
  unsigned int v29 = 2 * v28;
  if (v26 >= 0x10000) {
    uint64_t v27 = (v26 + 1000);
  }
  else {
    uint64_t v27 = v29;
  }
  if (v27 < v26) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0xFFFFFFFFLL;
  if (0xFFFFFFFF / v25 >= v27)
  {
    uint64_t v34 = malloc_type_realloc(*(void **)a1, v25 * v27, 0xE3524EE1uLL);
    if (!v34) {
      return 0xFFFFFFFFLL;
    }
    *(void *)a1 = v34;
    *(_DWORD *)(a1 + 12) = v27;
    unsigned int v31 = *(_DWORD *)(a1 + 8);
    goto LABEL_23;
  }
  return result;
}

uint64_t addStoredChunk(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, char a9, unsigned char *a10)
{
  uint64_t v15 = CKSignatureSize(a10);
  size_t v16 = CKSchemeAndSignatureSize(a10);
  unint64_t v17 = v15 + 57;
  uint64_t v18 = *(unsigned int *)(a1 + 8);
  LODWORD(v19) = *(_DWORD *)(a1 + 12);
  if (v18 != v19)
  {
    unsigned int v23 = *(_DWORD *)(a1 + 8);
LABEL_12:
    if (v23 >= v19) {
      addStoredChunk_cold_4();
    }
    if (!*(void *)a1) {
      addStoredChunk_cold_2();
    }
    unint64_t v24 = *(void *)a1 + v17 * v18;
    *(_OWORD *)unint64_t v24 = 0u;
    *(_OWORD *)(v24 + 16) = 0u;
    *(_OWORD *)(v24 + 32) = 0u;
    *(_OWORD *)(v24 + 41) = 0u;
    *(_DWORD *)unint64_t v24 = a2;
    *(void *)(v24 + 4) = a3;
    *(_DWORD *)(v24 + 12) = a5;
    *(void *)(v24 + 16) = a4;
    *(void *)(v24 + 24) = a6 + v16 + 4;
    *(void *)(v24 + 32) = a6;
    *(_DWORD *)(v24 + 40) = a7;
    *(void *)(v24 + 44) = a8;
    *(_DWORD *)(v24 + 52) = a9;
    memcpy((void *)(v24 + 56), a10, v16);
    unsigned int v25 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v25;
    if (v18 >= v25) {
      addStoredChunk_cold_3();
    }
    return 0;
  }
  if (!v17) {
    addStoredChunk_cold_1();
  }
  if (v18 <= 1) {
    int v20 = 1;
  }
  else {
    int v20 = *(_DWORD *)(a1 + 8);
  }
  unsigned int v21 = 2 * v20;
  if (v18 >= 0x10000) {
    uint64_t v19 = (v18 + 1000);
  }
  else {
    uint64_t v19 = v21;
  }
  if (v19 < v18) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0xFFFFFFFFLL;
  if (0xFFFFFFFF / v17 >= v19)
  {
    uint64_t v26 = malloc_type_realloc(*(void **)a1, v17 * v19, 0x5BE5CF1CuLL);
    if (!v26) {
      return 0xFFFFFFFFLL;
    }
    *(void *)a1 = v26;
    *(_DWORD *)(a1 + 12) = v19;
    unsigned int v23 = *(_DWORD *)(a1 + 8);
    goto LABEL_12;
  }
  return result;
}

BOOL _CSRegisterChunkList(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a2 + 264);
  uint64_t v5 = *(unsigned int *)(a2 + 308);
  unsigned int v6 = *(_DWORD *)(a2 + 272);
  if (*(unsigned char *)(a2 + 183)) {
    *(void *)(a2 + 528) = mach_absolute_time();
  }
  if (!v6)
  {
LABEL_9:
    BOOL v9 = 1;
    goto LABEL_20;
  }
  if (_CSRegisterChunk(a1, v4, *(char *)(v4 + 28)))
  {
    unsigned int v7 = 0;
    while (1)
    {
      uint64_t v8 = CKRegisteredChunkSubchunkBlobSize(v4);
      if (v6 - 1 == v7) {
        goto LABEL_9;
      }
      v4 += v8 + v5;
      ++v7;
      if (!_CSRegisterChunk(a1, v4, *(char *)(v4 + 28)))
      {
        BOOL v9 = v7 >= v6;
        goto LABEL_11;
      }
    }
  }
  BOOL v9 = 0;
LABEL_11:
  if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1078);
  }
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
  {
    CFStringRef v10 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"_CSRegisterChunk failed\n");
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1084);
    }
    CFAllocatorRef v11 = CK_DEFAULT_LOG_INTERNAL_1;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      int v13 = 138543362;
      CFStringRef v14 = v10;
      _os_log_impl(&dword_215163000, v11, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v13, 0xCu);
    }
    if (v10) {
      CFRelease(v10);
    }
  }
LABEL_20:
  if (*(unsigned char *)(a2 + 183)) {
    *(void *)(a2 + 536) += mach_absolute_time() - *(void *)(a2 + 528);
  }
  return v9;
}

sqlite3_int64 _CSRegisterChunk(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 17)) {
    _CSRegisterChunk_cold_3();
  }
  unsigned int v6 = (unsigned char *)(a2 + 35);
  uint64_t v7 = CKChunkSchemeSignatureAndKeySize((unsigned char *)(a2 + 35));
  if (v7)
  {
    uint64_t v8 = v7;
    if (*(unsigned char *)(a2 + 29)
      && *(unsigned char *)(a2 + v7 + 35)
      && (unint64_t v9 = vcvtps_u32_f32((float)*(unsigned int *)(a2 + 24) / (float)((unint64_t)*(unsigned __int8 *)(a2 + v7 + 35) << 10))) != 0)
    {
      int v10 = CKChunkSchemeAndSignatureSize(&v6[v7 + 1]) * v9 + 1;
    }
    else
    {
      int v10 = 0;
    }
    CFAllocatorRef v11 = _CSPrepareStatement(a1, @"INSERT INTO CSChunkTable (cid, ct_iid, offset, dataLen, location, subchunksBlob, key) VALUES (?, ?, ?, ?, ?, ?, ?)", "INSERT INTO CSChunkTable (cid, ct_iid, offset, dataLen, location, subchunksBlob, key) VALUES (?, ?, ?, ?, ?, ?, ?)");
    if (v11)
    {
      int v12 = CKChunkSchemeAndSignatureSize(v6);
      sqlite3_bind_blob(v11[2], 1, v6, v12, 0);
      sqlite3_bind_int64(v11[2], 2, *(void *)(a2 + 8));
      sqlite3_bind_int64(v11[2], 3, *(void *)(a2 + 16));
      sqlite3_bind_int(v11[2], 4, *(_DWORD *)(a2 + 24));
      sqlite3_bind_int(v11[2], 5, a3);
      sqlite3_bind_blob(v11[2], 6, (const void *)(a2 + 35 + v8), v10, 0);
      if (*(char *)(a2 + 35) < 0)
      {
        if (!*(unsigned char *)(a2 + 30)) {
          _CSRegisterChunk_cold_2();
        }
        CFStringRef v14 = (unsigned __int8 *)(a2 + CKChunkSchemeAndSignatureSize(v6) + 35);
        int v15 = CKChunkSchemeAndEncryptionKeySize(v14);
        sqlite3_bind_blob(v11[2], 7, v14, v15, 0);
      }
      else if (*(unsigned char *)(a2 + 30))
      {
        _CSRegisterChunk_cold_1();
      }
      uint64_t v16 = CS_sqlite3_step((uint64_t *)v11);
      if (v16 == 101)
      {
        sqlite3_int64 insert_rowid = sqlite3_last_insert_rowid(*(sqlite3 **)(a1 + 24));
        *(void *)a2 = insert_rowid;
        *(unsigned char *)(a2 + 28) = a3;
LABEL_28:
        _CSFinishPreparedStatement((uint64_t *)v11);
        return insert_rowid;
      }
      uint64_t v17 = v16;
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1095);
      }
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        uint64_t v19 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
        CFStringRef v20 = CFStringCreateWithFormat(v18, 0, @"sqlite3_step returned: %d %s, for chunk:\n", v17, v19);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1101);
        }
        unsigned int v21 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          CFStringRef v24 = v20;
          _os_log_impl(&dword_215163000, v21, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
        }
        if (v20) {
          CFRelease(v20);
        }
      }
      printRegisteredChunk(a2);
    }
    sqlite3_int64 insert_rowid = 0;
    goto LABEL_28;
  }
  return 0;
}

uint64_t _CSGetRegisteredChunk(uint64_t a1, unsigned char *a2, char **a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  *a3 = 0;
  int v6 = CKChunkSchemeAndSignatureSize(a2);
  uint64_t v7 = _CSPrepareStatement(a1, @"SELECT * FROM CSChunkTable WHERE cid = ?", "SELECT * FROM CSChunkTable WHERE cid = ?");
  uint64_t v8 = v7;
  if (v7)
  {
    sqlite3_bind_blob(v7[2], 1, a2, v6, 0);
    do
    {
      uint64_t v9 = CS_sqlite3_step((uint64_t *)v8);
      if (v9 != 100)
      {
        uint64_t v14 = v9;
        if ((v9 - 102) > 0xFFFFFFFD) {
          goto LABEL_22;
        }
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1108);
        }
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
          uint64_t v16 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
          CFStringRef v17 = CFStringCreateWithFormat(v15, 0, @"sqlite3_step returned: %d %s, for signature:\n", v14, v16);
          if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1114);
          }
          CFAllocatorRef v18 = CK_DEFAULT_LOG_INTERNAL_1;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138543362;
            CFStringRef v26 = v17;
            _os_log_impl(&dword_215163000, v18, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
          }
          if (v17) {
            CFRelease(v17);
          }
        }
        printSignature(a2);
        _CSFinishPreparedStatement((uint64_t *)v8);
        return 0;
      }
      int v10 = sqlite3_column_int(v8[2], 8);
      char v11 = v10;
    }
    while (v10 != 116 && v10 != 114);
    int v12 = sqlite3_column_blob(v8[2], 1);
    if ((char)*v12 < 0) {
      int v13 = (unsigned __int8 *)sqlite3_column_blob(v8[2], 9);
    }
    else {
      int v13 = 0;
    }
    unsigned int v20 = sqlite3_column_int(v8[2], 5);
    unsigned int v21 = (unsigned __int8 *)sqlite3_column_blob(v8[2], 10);
    size_t v22 = CKCreateRegisteredChunkWithSubchunkBlob(v12, v13, v20, v21);
    if (v22)
    {
      unsigned int v23 = v22;
      *((void *)v22 + 1) = sqlite3_column_int64(v8[2], 2);
      *(void *)unsigned int v23 = sqlite3_column_int64(v8[2], 0);
      *((void *)v23 + 2) = sqlite3_column_int64(v8[2], 4);
      *((_DWORD *)v23 + 6) = v20;
      v23[28] = v11;
      *a3 = v23;
      uint64_t v19 = 1;
      goto LABEL_23;
    }
  }
LABEL_22:
  uint64_t v19 = 0;
LABEL_23:
  _CSFinishPreparedStatement((uint64_t *)v8);
  return v19;
}

uint64_t _CSGetRegisteredChunks(uint64_t a1, unsigned char *a2, void *a3, int *a4)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  *a3 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  int v8 = CKChunkSchemeAndSignatureSize(a2);
  uint64_t v9 = _CSPrepareStatement(a1, @"SELECT * FROM CSChunkTable WHERE cid = ?", "SELECT * FROM CSChunkTable WHERE cid = ?");
  int v10 = v9;
  if (!v9)
  {
LABEL_32:
    uint64_t v24 = 0;
    goto LABEL_33;
  }
  uint64_t v30 = a1;
  sqlite3_bind_blob(v9[2], 1, a2, v8, 0);
  int v11 = *a4;
  if (*a4 < 1)
  {
    int v12 = 0;
    uint64_t v22 = 0;
  }
  else
  {
    int v12 = 0;
    while (1)
    {
      uint64_t v13 = CS_sqlite3_step((uint64_t *)v10);
      if (v13 != 100) {
        break;
      }
      int v14 = sqlite3_column_int(v10[2], 8);
      char v15 = v14;
      if (v14 == 116 || v14 == 114)
      {
        if (*(char *)sqlite3_column_blob(v10[2], 1) < 0) {
          uint64_t v16 = (unsigned __int8 *)sqlite3_column_blob(v10[2], 9);
        }
        else {
          uint64_t v16 = 0;
        }
        sqlite3_int64 v17 = sqlite3_column_int64(v10[2], 2);
        sqlite3_int64 v18 = sqlite3_column_int64(v10[2], 0);
        sqlite3_int64 v19 = sqlite3_column_int64(v10[2], 4);
        unsigned int v20 = sqlite3_column_int(v10[2], 5);
        unsigned int v21 = sqlite3_column_blob(v10[2], 10);
        if (addRegisteredChunk((uint64_t)&v31, v18, v17, v19, v20, v15, v21, a2, v16, 0)) {
          goto LABEL_32;
        }
        int v12 = v32;
      }
      if (v12 >= *a4) {
        goto LABEL_21;
      }
    }
    uint64_t v22 = v13;
    int v11 = *a4;
  }
  if (v11) {
    BOOL v23 = (v22 - 102) > 0xFFFFFFFD;
  }
  else {
    BOOL v23 = 1;
  }
  if (!v23)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1117);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      CFAllocatorRef v25 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      CFStringRef v26 = sqlite3_errmsg(*(sqlite3 **)(v30 + 24));
      CFStringRef v27 = CFStringCreateWithFormat(v25, 0, @"sqlite3_step returned: %d %s, for signature:\n", v22, v26);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1120);
      }
      int v28 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        CFStringRef v34 = v27;
        _os_log_impl(&dword_215163000, v28, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v27) {
        CFRelease(v27);
      }
    }
    printSignature(a2);
    goto LABEL_32;
  }
LABEL_21:
  *a3 = v31;
  *a4 = v12;
  uint64_t v31 = 0;
  uint64_t v24 = 1;
LABEL_33:
  _CSFinishPreparedStatement((uint64_t *)v10);
  clearChunksArray((uint64_t)&v31);
  return v24;
}

CFStringRef registerItem(uint64_t a1, uint64_t a2, sqlite3_int64 a3, uint64_t a4, int a5)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 17)) {
    registerItem_cold_1();
  }
  int v10 = (unsigned __int8 *)CKFileDigestResultsFileSignature(a2);
  if (((*v10 & 0x7F) - 3) <= 0xFDu)
  {
    unsigned int v11 = *v10;
    if (v11 > 0xB || ((1 << v11) & 0x910) == 0)
    {
      unsigned int v13 = v11 - 132;
      BOOL v14 = v13 > 7;
      int v15 = (1 << v13) & 0x91;
      if (v14 || v15 == 0)
      {
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1123);
        }
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          CFStringRef insert_rowid = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Invalid file signature scheme:0x%x for itemID:%lld\n", *v10, a3);
          if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1129);
          }
          CFStringRef v37 = CK_DEFAULT_LOG_INTERNAL_1;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138543362;
            CFStringRef v42 = insert_rowid;
            _os_log_impl(&dword_215163000, v37, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
          }
          if (!insert_rowid)
          {
            sqlite3_int64 v19 = 0;
            goto LABEL_65;
          }
          CFRelease(insert_rowid);
        }
        sqlite3_int64 v19 = 0;
        goto LABEL_64;
      }
    }
  }
  unregisterItem(a1, a3);
  if (a5) {
    _CSUnregisterChunksForItem(a1, a3);
  }
  if (gVerbose == 2)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1133);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG)
      && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
    {
      CFStringRef v17 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Registering itemID:%lld", a3);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1143);
      }
      sqlite3_int64 v18 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        CFStringRef v42 = v17;
        _os_log_impl(&dword_215163000, v18, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      if (v17) {
        CFRelease(v17);
      }
    }
  }
  sqlite3_int64 v19 = _CSPrepareStatement(a1, @"INSERT INTO CSRegisteredFileTable (crt_id, crt_iid, crt_filekey, crt_filesize, crt_profileType, crt_profileTypeIsDefault, crt_profileConfigurationVersion, crt_profileResolvedFileExtension) VALUES (?, ?, ?, ?, ?, ?, ?, ?)", "INSERT INTO CSRegisteredFileTable (crt_id, crt_iid, crt_filekey, crt_filesize, crt_profileType, crt_profileTypeIsDefault, crt_profileConfigurationVersion, crt_profileResolvedFileExtension) VALUES (?, ?, ?, ?, ?, ?, ?, ?)");
  if (!v19) {
    goto LABEL_64;
  }
  int v20 = CKFileSchemeAndSignatureSize(v10);
  sqlite3_bind_blob(v19[2], 1, v10, v20, 0);
  sqlite3_bind_int64(v19[2], 2, a3);
  CFDataRef v21 = (const __CFData *)CKFileDigestResultsFileVerificationKey(a2);
  if (v21)
  {
    CFDataRef v22 = v21;
    BytePtr = CFDataGetBytePtr(v21);
    int Length = CFDataGetLength(v22);
    sqlite3_bind_blob(v19[2], 3, BytePtr, Length, 0);
  }
  else
  {
    sqlite3_bind_null(v19[2], 3);
  }
  if (CKFileDigestResultsHasFileLength(a2))
  {
    sqlite3_int64 v25 = CKFileDigestResultsFileLength(a2);
    sqlite3_bind_int64(v19[2], 4, v25);
  }
  else
  {
    sqlite3_bind_null(v19[2], 4);
  }
  int v26 = CKProfileResultsType(a4);
  sqlite3_bind_int(v19[2], 5, v26);
  CFBooleanRef IsDefault = (const __CFBoolean *)CKProfileResultsIsDefault(a4);
  if (IsDefault)
  {
    BOOL v28 = CFBooleanGetValue(IsDefault) != 0;
    sqlite3_bind_int(v19[2], 6, v28);
  }
  else
  {
    sqlite3_bind_null(v19[2], 6);
  }
  CFStringRef v29 = (const __CFString *)CKProfileResultsConfigurationVersion(a4);
  bzero(buffer, 0x400uLL);
  if (v29 && CFStringGetCString(v29, buffer, 1024, 0x8000100u)) {
    sqlite3_bind_text(v19[2], 7, buffer, 1024, 0);
  }
  else {
    sqlite3_bind_null(v19[2], 7);
  }
  CFStringRef v30 = (const __CFString *)CKProfileResultsResolvedFileExtension(a4);
  bzero(v39, 0x400uLL);
  if (v30 && CFStringGetCString(v30, v39, 1024, 0x8000100u)) {
    sqlite3_bind_text(v19[2], 8, v39, 1024, 0);
  }
  else {
    sqlite3_bind_null(v19[2], 8);
  }
  uint64_t v31 = CS_sqlite3_step((uint64_t *)v19);
  if (v31 == 101)
  {
    CFStringRef insert_rowid = (const __CFString *)sqlite3_last_insert_rowid(*(sqlite3 **)(a1 + 24));
    goto LABEL_65;
  }
  uint64_t v33 = v31;
  if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1151);
  }
  if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
  {
LABEL_64:
    CFStringRef insert_rowid = 0;
    goto LABEL_65;
  }
  CFAllocatorRef v34 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  uint64_t v35 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
  CFStringRef insert_rowid = CFStringCreateWithFormat(v34, 0, @"sqlite3_step returned: %d %s\n", v33, v35);
  if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1155);
  }
  CFStringRef v36 = CK_DEFAULT_LOG_INTERNAL_1;
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138543362;
    CFStringRef v42 = insert_rowid;
    _os_log_impl(&dword_215163000, v36, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
  }
  if (insert_rowid)
  {
    CFRelease(insert_rowid);
    goto LABEL_64;
  }
LABEL_65:
  _CSFinishPreparedStatement((uint64_t *)v19);
  return insert_rowid;
}

os_log_t __registerItem_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __registerItem_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

uint64_t unregisterItem(uint64_t a1, sqlite3_int64 a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 17)) {
    unregisterItem_cold_1();
  }
  if (gVerbose == 2)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1158);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG)
      && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
    {
      CFStringRef v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Unregistering itemID:%lld", a2);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1167);
      }
      uint64_t v5 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        CFStringRef v17 = v4;
        _os_log_impl(&dword_215163000, v5, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      if (v4) {
        CFRelease(v4);
      }
    }
  }
  int v6 = _CSPrepareStatement(a1, @"DELETE FROM CSRegisteredFileTable WHERE crt_iid = ?", "DELETE FROM CSRegisteredFileTable WHERE crt_iid = ?");
  uint64_t v7 = (uint64_t *)v6;
  if (!v6) {
    goto LABEL_24;
  }
  uint64_t v8 = 1;
  sqlite3_bind_int64(v6[2], 1, a2);
  uint64_t v9 = CS_sqlite3_step(v7);
  if (v9 != 101)
  {
    uint64_t v10 = v9;
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1175);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      int v12 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
      CFStringRef v13 = CFStringCreateWithFormat(v11, 0, @"sqlite3_step returned: %d %s, for itemID:%lld\n", v10, v12, a2);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1182);
      }
      BOOL v14 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        CFStringRef v17 = v13;
        _os_log_impl(&dword_215163000, v14, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v13) {
        CFRelease(v13);
      }
    }
LABEL_24:
    uint64_t v8 = 0;
  }
  _CSFinishPreparedStatement(v7);
  return v8;
}

uint64_t _CSUnregisterChunksForItem(uint64_t a1, sqlite3_int64 a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (gVerbose == 2)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1253);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG)
      && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
    {
      CFStringRef v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Unregistering chunks for itemID:%lld", a2);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1262);
      }
      uint64_t v5 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        CFStringRef v19 = v4;
        _os_log_impl(&dword_215163000, v5, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      if (v4) {
        CFRelease(v4);
      }
    }
  }
  if (*(unsigned char *)(a1 + 17)) {
    return 0;
  }
  uint64_t v7 = _CSPrepareStatement(a1, @"DELETE FROM CSChunkTable WHERE ct_iid = ? AND location = 114", "DELETE FROM CSChunkTable WHERE ct_iid = ? AND location = 114");
  if (v7)
  {
    uint64_t v8 = (uint64_t *)v7;
    sqlite3_bind_int64(v7[2], 1, a2);
    uint64_t v9 = CS_sqlite3_step(v8);
    BOOL v6 = v9 == 101;
    if (v9 != 101)
    {
      uint64_t v10 = v9;
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1270);
      }
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        int v12 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
        CFStringRef v13 = CFStringCreateWithFormat(v11, 0, @"sqlite3_step returned: %d %s, for itemID:%lld\n", v10, v12, a2);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1274);
        }
        BOOL v14 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          CFStringRef v19 = v13;
          _os_log_impl(&dword_215163000, v14, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
        }
        if (v13) {
          CFRelease(v13);
        }
      }
    }
    _CSFinishPreparedStatement(v8);
  }
  else
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1278);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v15 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"null sqlite3_stmt\n");
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1282);
      }
      uint64_t v16 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        CFStringRef v19 = v15;
        _os_log_impl(&dword_215163000, v16, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v15) {
        CFRelease(v15);
      }
    }
    return 1;
  }
  return v6;
}

os_log_t __registerItem_block_invoke_1130()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __registerItem_block_invoke_3()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __registerItem_block_invoke_1148()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __registerItem_block_invoke_2_1152()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __unregisterItem_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __unregisterItem_block_invoke_3()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __unregisterItem_block_invoke_1172()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __unregisterItem_block_invoke_2_1179()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

CFStringRef _CSCopyChunkListForItemID(uint64_t a1, sqlite3_int64 a2, void *a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  CFStringRef v22 = 0;
  uint64_t v23 = 0;
  *a3 = 0;
  BOOL v6 = _CSPrepareStatement(a1, @"SELECT ct_rowid, cid, offset, dataLen, location, subchunksBlob, key FROM CSChunkTable WHERE ct_iid = ? ORDER BY offset", "SELECT ct_rowid, cid, offset, dataLen, location, subchunksBlob, key FROM CSChunkTable WHERE ct_iid = ? ORDER BY offset");
  uint64_t v7 = v6;
  if (!v6) {
    goto LABEL_20;
  }
  sqlite3_bind_int64(v6[2], 1, a2);
  while (1)
  {
    uint64_t v8 = CS_sqlite3_step((uint64_t *)v7);
    if (v8 != 100) {
      break;
    }
    sqlite3_int64 v9 = sqlite3_column_int64(v7[2], 0);
    uint64_t v10 = sqlite3_column_blob(v7[2], 1);
    if ((char)*v10 < 0) {
      CFAllocatorRef v11 = (unsigned __int8 *)sqlite3_column_blob(v7[2], 6);
    }
    else {
      CFAllocatorRef v11 = 0;
    }
    sqlite3_int64 v12 = sqlite3_column_int64(v7[2], 2);
    unsigned int v13 = sqlite3_column_int(v7[2], 3);
    char v14 = sqlite3_column_int(v7[2], 4);
    CFStringRef v15 = sqlite3_column_blob(v7[2], 5);
    if (addRegisteredChunk((uint64_t)&v22, v9, a2, v12, v13, v14, v15, v10, v11, 0)) {
      goto LABEL_20;
    }
  }
  uint64_t v16 = v8;
  if (v8 == 101)
  {
    CFStringRef v17 = v22;
    CFStringRef v22 = 0;
    *a3 = v23;
    goto LABEL_21;
  }
  if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1189);
  }
  if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
  {
LABEL_20:
    CFStringRef v17 = 0;
    goto LABEL_21;
  }
  CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFStringRef v19 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
  CFStringRef v17 = CFStringCreateWithFormat(v18, 0, @"sqlite3_step returned: %d %s, for itemID:%lld\n", v16, v19, a2);
  if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1192);
  }
  uint64_t v20 = CK_DEFAULT_LOG_INTERNAL_1;
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138543362;
    CFStringRef v25 = v17;
    _os_log_impl(&dword_215163000, v20, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
  }
  if (v17)
  {
    CFRelease(v17);
    goto LABEL_20;
  }
LABEL_21:
  _CSFinishPreparedStatement((uint64_t *)v7);
  clearChunksArray((uint64_t)&v22);
  return v17;
}

void _CSGetItemIdsForFileSignature(uint64_t a1, unsigned char *a2, unsigned int (*a3)(sqlite3_int64, uint64_t), uint64_t a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v8 = _CSPrepareStatement(a1, @"SELECT crt_iid FROM CSRegisteredFileTable WHERE crt_id = ?", "SELECT crt_iid FROM CSRegisteredFileTable WHERE crt_id = ?");
  if (v8)
  {
    sqlite3_int64 v9 = v8;
    int v10 = CKFileSchemeAndSignatureSize(a2);
    sqlite3_bind_blob(v9[2], 1, a2, v10, 0);
    while (1)
    {
      uint64_t v11 = CS_sqlite3_step((uint64_t *)v9);
      if (v11 != 100) {
        break;
      }
      sqlite3_int64 v12 = sqlite3_column_int64(v9[2], 0);
      if (a3(v12, a4)) {
        goto LABEL_16;
      }
    }
    uint64_t v13 = v11;
    if (v11 != 101)
    {
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1199);
      }
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFStringRef v15 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
        CFStringRef v16 = CFStringCreateWithFormat(v14, 0, @"sqlite3_step returned: %d %s\n", v13, v15);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1202);
        }
        CFStringRef v17 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          CFStringRef v21 = v16;
          _os_log_impl(&dword_215163000, v17, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
        }
        if (v16) {
          CFRelease(v16);
        }
      }
    }
LABEL_16:
    _CSFinishPreparedStatement((uint64_t *)v9);
  }
  else
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1206);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v18 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"null sqlite3_stmt\n");
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1210);
      }
      CFStringRef v19 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        CFStringRef v21 = v18;
        _os_log_impl(&dword_215163000, v19, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v18) {
        CFRelease(v18);
      }
    }
  }
}

uint64_t _CSGetItemIdForFileSignature(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v9 = 0;
  if (((*a2 & 0x7F) - 3) <= 0xFDu)
  {
    unsigned int v2 = *a2;
    if (v2 > 0xB || ((1 << v2) & 0x910) == 0)
    {
      unsigned int v4 = v2 - 132;
      BOOL v5 = v4 > 7;
      int v6 = (1 << v4) & 0x91;
      if (v5 || v6 == 0) {
        return 0;
      }
    }
  }
  _CSGetItemIdsForFileSignature(a1, a2, (unsigned int (*)(sqlite3_int64, uint64_t))_CSFetchOneItemCB, (uint64_t)&v9);
  return v9;
}

uint64_t _CSFetchOneItemCB(uint64_t a1, void *a2)
{
  *a2 = a1;
  return 1;
}

uint64_t _CSGetSignatureForItemID(uint64_t a1, sqlite3_int64 a2, int a3, CFTypeRef *a4, uint64_t *a5)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  char v54 = a3;
  CFTypeRef cf = 0;
  if (a4) {
    *a4 = 0;
  }
  if (a5) {
    *a5 = 0;
  }
  uint64_t v9 = _CSPrepareStatement(a1, @"SELECT crt_id, crt_filekey, crt_filesize, crt_profileType, crt_profileTypeIsDefault, crt_profileConfigurationVersion, crt_profileResolvedFileExtension FROM CSRegisteredFileTable WHERE crt_iid = ?", "SELECT crt_id, crt_filekey, crt_filesize, crt_profileType, crt_profileTypeIsDefault, crt_profileConfigurationVersion, crt_profileResolvedFileExtension FROM CSRegisteredFileTable WHERE crt_iid = ?");
  if (!v9)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1217);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v12 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"null sqlite3_stmt\n");
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1220);
      }
      uint64_t v13 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        CFStringRef v56 = v12;
        _os_log_impl(&dword_215163000, v13, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v12) {
        CFRelease(v12);
      }
    }
    return 0;
  }
  int v10 = v9;
  CFStringRef v45 = a5;
  sqlite3_bind_int64(v9[2], 1, a2);
  unint64_t v44 = a4;
  if (a3) {
    uint64_t v11 = CKFileSchemeAndSignatureSize(&v54);
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v46 = a1;
  CFStringRef v49 = 0;
  CFStringRef v50 = 0;
  uint64_t v51 = 0;
  int v15 = 0;
  CFAllocatorRef v16 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  uint64_t v47 = *MEMORY[0x263EFFB38];
  uint64_t v48 = *MEMORY[0x263EFFB40];
  while (1)
  {
    uint64_t v17 = CS_sqlite3_step((uint64_t *)v10);
    if (v17 != 100) {
      break;
    }
    CFStringRef v18 = (const UInt8 *)sqlite3_column_blob(v10[2], 1);
    int v19 = sqlite3_column_bytes(v10[2], 1);
    if (v18) {
      BOOL v20 = v19 < 1;
    }
    else {
      BOOL v20 = 1;
    }
    if (v20) {
      CFDataRef v21 = 0;
    }
    else {
      CFDataRef v21 = CFDataCreate(v16, v18, v19);
    }
    if (sqlite3_column_type(v10[2], 2) == 5) {
      sqlite3_int64 v22 = -1;
    }
    else {
      sqlite3_int64 v22 = sqlite3_column_int64(v10[2], 2);
    }
    if (sqlite3_column_type(v10[2], 3) != 5)
    {
      int v23 = sqlite3_column_int(v10[2], 3);
      if ((v23 - 1) < 9) {
        int v15 = v23;
      }
    }
    if (sqlite3_column_type(v10[2], 4) != 5)
    {
      int v24 = sqlite3_column_int(v10[2], 4);
      if (v24 == 1)
      {
        uint64_t v25 = v48;
        goto LABEL_38;
      }
      if (!v24)
      {
        uint64_t v25 = v47;
LABEL_38:
        uint64_t v51 = v25;
      }
    }
    if (sqlite3_column_type(v10[2], 5) != 5)
    {
      uint64_t v26 = sqlite3_column_text(v10[2], 5);
      int v27 = sqlite3_column_bytes(v10[2], 5);
      size_t v28 = strnlen((const char *)v26, v27);
      if (v28 < v27)
      {
        if (v28) {
          CFStringRef v49 = CFStringCreateWithCString(v16, (const char *)v26, 0x8000100u);
        }
      }
    }
    if (sqlite3_column_type(v10[2], 6) != 5)
    {
      CFStringRef v29 = sqlite3_column_text(v10[2], 6);
      int v30 = sqlite3_column_bytes(v10[2], 6);
      size_t v31 = strnlen((const char *)v29, v30);
      if (v31 < v30)
      {
        if (v31) {
          CFStringRef v50 = CFStringCreateWithCString(v16, (const char *)v29, 0x8000100u);
        }
      }
    }
    uint64_t v32 = sqlite3_column_blob(v10[2], 0);
    uint64_t v33 = sqlite3_column_bytes(v10[2], 0);
    uint64_t v34 = v33;
    if (v32 && (!v54 || (int)v33 >= (int)v11))
    {
      if (CKFileSchemeAndSignatureSize(v32))
      {
        if ((!v54 || v54 == *v32) && CKFileDigestResultsCreate(&cf, v32, v22, v21))
        {
          if (v21) {
            CFRelease(v21);
          }
          _CSFinishPreparedStatement((uint64_t *)v10);
          CFStringRef v42 = v49;
          CFStringRef v41 = v50;
          if (v44 && cf)
          {
            CFRetain(cf);
            CFTypeRef *v44 = cf;
          }
          if (v45) {
            CKProfileResultsCreate(v45, v15, v49, v50, v51, 0);
          }
          uint64_t v14 = 1;
          goto LABEL_84;
        }
      }
      else
      {
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1235);
        }
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          CFStringRef v35 = CFStringCreateWithFormat(v16, 0, @"signature size is 0, itemID:%lld\n", a2);
          if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1242);
          }
          CFStringRef v36 = CK_DEFAULT_LOG_INTERNAL_1;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          {
LABEL_56:
            *(_DWORD *)buf = 138543362;
            CFStringRef v56 = v35;
            _os_log_impl(&dword_215163000, v36, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
          }
LABEL_57:
          if (v35) {
            CFRelease(v35);
          }
        }
      }
    }
    else
    {
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1224);
      }
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        CFStringRef v35 = CFStringCreateWithFormat(v16, 0, @"sqlite3_column_blob returned bad data for itemID:%lld, blobSize:%d, expectedSize:%u\n", a2, v34, v11);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1231);
        }
        CFStringRef v36 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
          goto LABEL_56;
        }
        goto LABEL_57;
      }
    }
    if (v21) {
      CFRelease(v21);
    }
  }
  uint64_t v37 = v17;
  if (v17 != 101)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1246);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      unsigned int v38 = sqlite3_errmsg(*(sqlite3 **)(v46 + 24));
      CFStringRef v39 = CFStringCreateWithFormat(v16, 0, @"sqlite3_step returned: %d %s, for itemID:%lld\n", v37, v38, a2);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1250);
      }
      sqlite3_int64 v40 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        CFStringRef v56 = v39;
        _os_log_impl(&dword_215163000, v40, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v39) {
        CFRelease(v39);
      }
    }
  }
  _CSFinishPreparedStatement((uint64_t *)v10);
  uint64_t v14 = 0;
  CFStringRef v42 = v49;
  CFStringRef v41 = v50;
LABEL_84:
  if (cf) {
    CKBaseRelease(cf);
  }
  CFTypeRef cf = 0;
  if (v42) {
    CKBaseRelease(v42);
  }
  if (v41) {
    CKBaseRelease(v41);
  }
  return v14;
}

CFStringRef _CSCopyChunkListForFileSignature(uint64_t a1, unsigned __int8 *a2, void *a3)
{
  sqlite3_int64 v5 = _CSGetItemIdForFileSignature(a1, a2);
  return _CSCopyChunkListForItemID(a1, v5, a3);
}

uint64_t _CSUnregisterAllTemporaryChunks(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 17)) {
    _CSUnregisterAllTemporaryChunks_cold_1();
  }
  unsigned int v2 = _CSPrepareStatement(a1, @"DELETE FROM CSChunkTable WHERE location = ?", "DELETE FROM CSChunkTable WHERE location = ?");
  uint64_t v3 = (uint64_t *)v2;
  if (!v2) {
    goto LABEL_13;
  }
  uint64_t v4 = 1;
  sqlite3_bind_int(v2[2], 1, 116);
  uint64_t v5 = CS_sqlite3_step(v3);
  if (v5 != 101)
  {
    uint64_t v6 = v5;
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1289);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      uint64_t v8 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
      CFStringRef v9 = CFStringCreateWithFormat(v7, 0, @"sqlite3_step returned: %d %s\n", v6, v8);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1292);
      }
      int v10 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        CFStringRef v13 = v9;
        _os_log_impl(&dword_215163000, v10, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v9) {
        CFRelease(v9);
      }
    }
LABEL_13:
    uint64_t v4 = 0;
  }
  _CSFinishPreparedStatement(v3);
  return v4;
}

BOOL _CSRegisterTemporaryChunk(uint64_t a1, uint64_t a2)
{
  return _CSRegisterChunk(a1, a2, 116) != 0;
}

uint64_t _CSUnregisterTemporaryChunks(uint64_t a1, sqlite3_int64 a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 17)) {
    _CSUnregisterTemporaryChunks_cold_1();
  }
  uint64_t v4 = _CSPrepareStatement(a1, @"DELETE FROM CSChunkTable WHERE location = ? AND ct_iid = ?", "DELETE FROM CSChunkTable WHERE location = ? AND ct_iid = ?");
  uint64_t v5 = v4;
  if (!v4) {
    goto LABEL_23;
  }
  sqlite3_bind_int(v4[2], 1, 116);
  sqlite3_bind_int64(v5[2], 2, a2);
  uint64_t v6 = CS_sqlite3_step((uint64_t *)v5);
  if (v6 != 101)
  {
    uint64_t v15 = v6;
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1299);
    }
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
      goto LABEL_23;
    }
    CFAllocatorRef v16 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    uint64_t v17 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
    CFStringRef v13 = CFStringCreateWithFormat(v16, 0, @"sqlite3_step returned: %d %s for itemID:%lld\n", v15, v17, a2);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1305);
    }
    uint64_t v14 = CK_DEFAULT_LOG_INTERNAL_1;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
      goto LABEL_21;
    }
    *(_DWORD *)buf = 138543362;
    CFStringRef v20 = v13;
LABEL_20:
    _os_log_impl(&dword_215163000, v14, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
LABEL_21:
    if (v13) {
      CFRelease(v13);
    }
    goto LABEL_23;
  }
  _CSFinishPreparedStatement((uint64_t *)v5);
  CFAllocatorRef v7 = _CSPrepareStatement(a1, @"DELETE FROM CSChunkTable WHERE location = ? AND ct_iid = ?", "DELETE FROM CSChunkTable WHERE location = ? AND ct_iid = ?");
  uint64_t v5 = v7;
  if (!v7)
  {
LABEL_23:
    uint64_t v8 = 0;
    goto LABEL_24;
  }
  uint64_t v8 = 1;
  sqlite3_bind_int(v7[2], 1, 110);
  sqlite3_bind_int64(v5[2], 2, a2);
  uint64_t v9 = CS_sqlite3_step((uint64_t *)v5);
  if (v9 != 101)
  {
    uint64_t v10 = v9;
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1309);
    }
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
      goto LABEL_23;
    }
    CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFStringRef v12 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
    CFStringRef v13 = CFStringCreateWithFormat(v11, 0, @"sqlite3_step returned: %d %s for itemID:%lld\n", v10, v12, a2);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1313);
    }
    uint64_t v14 = CK_DEFAULT_LOG_INTERNAL_1;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
      goto LABEL_21;
    }
    *(_DWORD *)buf = 138543362;
    CFStringRef v20 = v13;
    goto LABEL_20;
  }
LABEL_24:
  _CSFinishPreparedStatement((uint64_t *)v5);
  return v8;
}

unint64_t _CSRelocateRegisteredChunk(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 17)) {
    _CSRelocateRegisteredChunk_cold_1();
  }
  uint64_t v8 = (const void *)(a2 + 35);
  int v9 = CKChunkSchemeAndSignatureSize((unsigned char *)(a2 + 35));
  sqlite3_int64 v10 = *(void *)a2;
  if (*(void *)a2)
  {
    CFAllocatorRef v11 = _CSPrepareStatement(a1, @"UPDATE CSChunkTable SET location = ? WHERE rowid = ? AND location = ? AND ct_iid = ? AND cid = ? AND offset = ? AND dataLen = ?", "UPDATE CSChunkTable SET location = ? WHERE rowid = ? AND location = ? AND ct_iid = ? AND cid = ? AND offset = ? AND dataLen = ?");
    CFStringRef v12 = (__CFString *)v11;
    if (!v11) {
      goto LABEL_49;
    }
    sqlite3_bind_int(v11[2], 1, a4);
    sqlite3_bind_int64((sqlite3_stmt *)v12->data, 2, v10);
    sqlite3_bind_int((sqlite3_stmt *)v12->data, 3, a3);
    sqlite3_bind_int64((sqlite3_stmt *)v12->data, 4, *(void *)(a2 + 8));
    sqlite3_bind_blob((sqlite3_stmt *)v12->data, 5, v8, v9, 0);
    sqlite3_bind_int64((sqlite3_stmt *)v12->data, 6, *(void *)(a2 + 16));
    sqlite3_bind_int((sqlite3_stmt *)v12->data, 7, *(_DWORD *)(a2 + 24));
    uint64_t v13 = CS_sqlite3_step((uint64_t *)v12);
    if (v13 == 101)
    {
      int v14 = sqlite3_changes(*(sqlite3 **)(a1 + 24));
      _CSFinishPreparedStatement((uint64_t *)v12);
      if (!v14)
      {
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1328);
        }
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          CFStringRef v12 = (__CFString *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Couldn't update chunk ('%c'/'%c') for itemID:%lld, o:0x%llx, sz:0x%x, rowID:%llu\n", a3, a4, *(void *)(a2 + 8), *(void *)(a2 + 16), *(unsigned int *)(a2 + 24), v10);
          if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1335);
          }
          uint64_t v15 = CK_DEFAULT_LOG_INTERNAL_1;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138543362;
            int v30 = v12;
            _os_log_impl(&dword_215163000, v15, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
          }
          if (!v12) {
            goto LABEL_49;
          }
          CFRelease(v12);
        }
        CFStringRef v12 = 0;
LABEL_49:
        unint64_t v20 = 0;
        goto LABEL_50;
      }
LABEL_19:
      *(unsigned char *)(a2 + 28) = a4;
      if (gVerbose == 2)
      {
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1351);
        }
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG)
          && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
        {
          CFStringRef v12 = (__CFString *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Moved registered chunk ('%c'/'%c') for itemID:%lld, o:0x%llx, sz:0x%x, rowID:%llu\n", a3, a4, *(void *)(a2 + 8), *(void *)(a2 + 16), *(unsigned int *)(a2 + 24), v10);
          if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1361);
          }
          int v19 = CK_DEFAULT_LOG_INTERNAL_1;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 138543362;
            int v30 = v12;
            _os_log_impl(&dword_215163000, v19, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
          }
          if (!v12) {
            goto LABEL_31;
          }
          CFRelease(v12);
        }
      }
      CFStringRef v12 = 0;
LABEL_31:
      unint64_t v20 = 1;
      goto LABEL_50;
    }
    uint64_t v21 = v13;
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1321);
    }
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
      goto LABEL_49;
    }
    CFAllocatorRef v22 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    int v23 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
    unint64_t v20 = (unint64_t)CFStringCreateWithFormat(v22, 0, @"sqlite3_step returned: %d %s\n", v21, v23);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1324);
    }
    int v24 = CK_DEFAULT_LOG_INTERNAL_1;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      int v30 = (__CFString *)v20;
LABEL_46:
      _os_log_impl(&dword_215163000, v24, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
  }
  else
  {
    CFAllocatorRef v16 = _CSPrepareStatement(a1, @"UPDATE CSChunkTable INDEXED BY CSChunkTable_cid_inx SET location = ? WHERE location = ? AND ct_iid = ? AND cid = ? AND offset = ? AND dataLen = ?", "UPDATE CSChunkTable INDEXED BY CSChunkTable_cid_inx SET location = ? WHERE location = ? AND ct_iid = ? AND cid = ? AND offset = ? AND dataLen = ?");
    CFStringRef v12 = (__CFString *)v16;
    if (!v16) {
      goto LABEL_49;
    }
    sqlite3_bind_int(v16[2], 1, a4);
    sqlite3_bind_int((sqlite3_stmt *)v12->data, 2, a3);
    sqlite3_bind_int64((sqlite3_stmt *)v12->data, 3, *(void *)(a2 + 8));
    sqlite3_bind_blob((sqlite3_stmt *)v12->data, 4, v8, v9, 0);
    sqlite3_bind_int64((sqlite3_stmt *)v12->data, 5, *(void *)(a2 + 16));
    sqlite3_bind_int((sqlite3_stmt *)v12->data, 6, *(_DWORD *)(a2 + 24));
    uint64_t v17 = CS_sqlite3_step((uint64_t *)v12);
    if (v17 == 101)
    {
      int v18 = sqlite3_changes(*(sqlite3 **)(a1 + 24));
      _CSFinishPreparedStatement((uint64_t *)v12);
      if (!v18)
      {
        CFStringRef v12 = 0;
        unint64_t v20 = _CSRegisterChunk(a1, a2, a4) != 0;
        goto LABEL_50;
      }
      goto LABEL_19;
    }
    uint64_t v25 = v17;
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1343);
    }
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
      goto LABEL_49;
    }
    CFAllocatorRef v26 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    int v27 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
    unint64_t v20 = (unint64_t)CFStringCreateWithFormat(v26, 0, @"sqlite3_step returned: %d %s\n", v25, v27);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1347);
    }
    int v24 = CK_DEFAULT_LOG_INTERNAL_1;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      int v30 = (__CFString *)v20;
      goto LABEL_46;
    }
  }
  if (v20)
  {
    CFRelease((CFTypeRef)v20);
    goto LABEL_49;
  }
LABEL_50:
  _CSFinishPreparedStatement((uint64_t *)v12);
  return v20;
}

uint64_t _CSUnregisterChunk(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 17)) {
    _CSUnregisterChunk_cold_1();
  }
  uint64_t v6 = _CSPrepareStatement(a1, @"DELETE FROM CSChunkTable INDEXED BY CSChunkTable_cid_inx WHERE location = ? AND ct_iid = ? AND cid = ? AND offset = ? AND dataLen = ?", "DELETE FROM CSChunkTable INDEXED BY CSChunkTable_cid_inx WHERE location = ? AND ct_iid = ? AND cid = ? AND offset = ? AND dataLen = ?");
  CFAllocatorRef v7 = v6;
  if (!v6) {
    goto LABEL_14;
  }
  uint64_t v8 = (unsigned __int8 *)(a2 + 35);
  uint64_t v9 = 1;
  sqlite3_bind_int(v6[2], 1, a3);
  sqlite3_bind_int64(v7[2], 2, *(void *)(a2 + 8));
  int v10 = CKChunkSchemeAndSignatureSize((unsigned char *)(a2 + 35));
  sqlite3_bind_blob(v7[2], 3, (const void *)(a2 + 35), v10, 0);
  sqlite3_bind_int64(v7[2], 4, *(void *)(a2 + 16));
  sqlite3_bind_int(v7[2], 5, *(_DWORD *)(a2 + 24));
  uint64_t v11 = CS_sqlite3_step((uint64_t *)v7);
  if (v11 != 101)
  {
    uint64_t v12 = v11;
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1368);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      int v14 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
      CFStringRef v15 = CFStringCreateWithFormat(v13, 0, @"sqlite3_step returned: %d %s, for signature\n", v12, v14);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1374);
      }
      CFAllocatorRef v16 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        CFStringRef v19 = v15;
        _os_log_impl(&dword_215163000, v16, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v15) {
        CFRelease(v15);
      }
    }
    printSignature(v8);
LABEL_14:
    uint64_t v9 = 0;
  }
  _CSFinishPreparedStatement((uint64_t *)v7);
  return v9;
}

uint64_t _CSConvertTemporaryChunks(uint64_t a1, sqlite3_int64 a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 17)) {
    _CSConvertTemporaryChunks_cold_1();
  }
  CSsql_corruption_checking_do_0(a1, *(sqlite3 **)(a1 + 24), "DELETE FROM CSChunkTable WHERE location = 114 AND ct_iid = %llu;",
    a2);
  uint64_t v4 = _CSPrepareStatement(a1, @"UPDATE CSChunkTable SET location = 114 WHERE ct_iid = ? AND location = 116", "UPDATE CSChunkTable SET location = 114 WHERE ct_iid = ? AND location = 116");
  uint64_t v5 = (uint64_t *)v4;
  if (!v4) {
    goto LABEL_13;
  }
  uint64_t v6 = 1;
  sqlite3_bind_int64(v4[2], 1, a2);
  uint64_t v7 = CS_sqlite3_step(v5);
  if (v7 != 101)
  {
    uint64_t v8 = v7;
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1382);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      int v10 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
      CFStringRef v11 = CFStringCreateWithFormat(v9, 0, @"sqlite3_step returned: %d %s, for itemID:%lld\n", v8, v10, a2);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1385);
      }
      uint64_t v12 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        CFStringRef v15 = v11;
        _os_log_impl(&dword_215163000, v12, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v11) {
        CFRelease(v11);
      }
    }
LABEL_13:
    uint64_t v6 = 0;
  }
  _CSFinishPreparedStatement(v5);
  return v6;
}

uint64_t _CSKeyForRegisteredChunk(uint64_t a1, unsigned char *a2, void *a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (!a3)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1388);
    }
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    CFStringRef v17 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"key param is NULL, failing.");
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1394);
    }
    int v18 = CK_DEFAULT_LOG_INTERNAL_1;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
      goto LABEL_23;
    }
    *(_DWORD *)buf = 138543362;
    uint64_t v26 = (uint64_t)v17;
    goto LABEL_22;
  }
  uint64_t v6 = _CSPrepareStatement(a1, @"SELECT key FROM CSChunkTable WHERE cid = ?", "SELECT key FROM CSChunkTable WHERE cid = ?");
  if (v6)
  {
    uint64_t v7 = v6;
    int v8 = CKSchemeAndSignatureSize(a2);
    sqlite3_bind_blob(v7[2], 1, a2, v8, 0);
    uint64_t v9 = CS_sqlite3_step((uint64_t *)v7);
    if (v9 != 101)
    {
      uint64_t v10 = v9;
      if (v9 == 100)
      {
        CFStringRef v11 = (unsigned __int8 *)sqlite3_column_blob(v7[2], 0);
        if (v11)
        {
          uint64_t v12 = v11;
          size_t v13 = CKSchemeAndEncryptionKeySize(v11);
          if (v13)
          {
            size_t v14 = v13;
            CFStringRef v15 = malloc_type_malloc(v13, 0x8BDA5470uLL);
            *a3 = v15;
            memcpy(v15, v12, v14);
            uint64_t v16 = 1;
LABEL_37:
            _CSFinishPreparedStatement((uint64_t *)v7);
            return v16;
          }
          if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1402);
          }
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          {
            uint64_t v16 = (uint64_t)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Bad size for key...");
            if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1409);
            }
            int v24 = CK_DEFAULT_LOG_INTERNAL_1;
            if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
              goto LABEL_54;
            }
            *(_DWORD *)buf = 138543362;
            uint64_t v26 = v16;
LABEL_53:
            _os_log_impl(&dword_215163000, v24, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
LABEL_54:
            if (!v16) {
              goto LABEL_37;
            }
            CFRelease((CFTypeRef)v16);
          }
        }
        else
        {
          if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1413);
          }
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          {
            uint64_t v16 = (uint64_t)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"sqlite3_column_blob returned NULL.");
            if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1420);
            }
            int v24 = CK_DEFAULT_LOG_INTERNAL_1;
            if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
              goto LABEL_54;
            }
            *(_DWORD *)buf = 138543362;
            uint64_t v26 = v16;
            goto LABEL_53;
          }
        }
      }
      else
      {
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1424);
        }
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
          uint64_t v20 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
          CFStringRef v21 = CFStringCreateWithFormat(v19, 0, @"sqlite3_step returned: %d %s, for signature: ", v10, v20);
          if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1431);
          }
          CFAllocatorRef v22 = CK_DEFAULT_LOG_INTERNAL_1;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138543362;
            uint64_t v26 = (uint64_t)v21;
            _os_log_impl(&dword_215163000, v22, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
          }
          if (v21) {
            CFRelease(v21);
          }
        }
        printSignature(a2);
      }
    }
    uint64_t v16 = 0;
    goto LABEL_37;
  }
  if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1435);
  }
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
  {
    CFStringRef v17 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"null sqlite3_stmt\n");
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1439);
    }
    int v18 = CK_DEFAULT_LOG_INTERNAL_1;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
      goto LABEL_23;
    }
    *(_DWORD *)buf = 138543362;
    uint64_t v26 = (uint64_t)v17;
LABEL_22:
    _os_log_impl(&dword_215163000, v18, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
LABEL_23:
    if (v17) {
      CFRelease(v17);
    }
  }
  return 0;
}

uint64_t _CSUnregisterAllChunksForItem(uint64_t a1, sqlite3_int64 a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 17)) {
    _CSUnregisterAllChunksForItem_cold_1();
  }
  if (gVerbose == 2)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1442);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG)
      && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
    {
      CFStringRef v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Unregistering all chunks for itemID:%lld", a2);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1451);
      }
      uint64_t v5 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        CFStringRef v17 = v4;
        _os_log_impl(&dword_215163000, v5, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      if (v4) {
        CFRelease(v4);
      }
    }
  }
  uint64_t v6 = _CSPrepareStatement(a1, @"DELETE FROM CSChunkTable WHERE ct_iid = ?", "DELETE FROM CSChunkTable WHERE ct_iid = ?");
  uint64_t v7 = (uint64_t *)v6;
  if (!v6) {
    goto LABEL_24;
  }
  uint64_t v8 = 1;
  sqlite3_bind_int64(v6[2], 1, a2);
  uint64_t v9 = CS_sqlite3_step(v7);
  if (v9 != 101)
  {
    uint64_t v10 = v9;
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1459);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      uint64_t v12 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
      CFStringRef v13 = CFStringCreateWithFormat(v11, 0, @"sqlite3_step returned: %d %s\n", v10, v12);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1463);
      }
      size_t v14 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        CFStringRef v17 = v13;
        _os_log_impl(&dword_215163000, v14, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v13) {
        CFRelease(v13);
      }
    }
LABEL_24:
    uint64_t v8 = 0;
  }
  _CSFinishPreparedStatement(v7);
  return v8;
}

uint64_t _CSRegisteredItemCount(uint64_t a1, sqlite3_int64 *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (a2) {
    *a2 = 0;
  }
  CFStringRef v4 = (uint64_t *)_CSPrepareStatement(a1, @"SELECT count(*) FROM CSRegisteredFileTable", "SELECT count(*) FROM CSRegisteredFileTable");
  uint64_t v5 = v4;
  if (!v4) {
    goto LABEL_17;
  }
  uint64_t v6 = CS_sqlite3_step(v4);
  if (v6 == 100)
  {
    sqlite3_int64 v7 = sqlite3_column_int64((sqlite3_stmt *)v5[2], 0);
    if (a2) {
      *a2 = v7;
    }
    uint64_t v8 = 1;
    goto LABEL_18;
  }
  uint64_t v9 = v6;
  if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1470);
  }
  if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
  {
LABEL_17:
    uint64_t v8 = 0;
    goto LABEL_18;
  }
  CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFAllocatorRef v11 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
  uint64_t v8 = (uint64_t)CFStringCreateWithFormat(v10, 0, @"sqlite3_step returned: %d %s\n", v9, v11);
  if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1473);
  }
  uint64_t v12 = CK_DEFAULT_LOG_INTERNAL_1;
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138543362;
    uint64_t v15 = v8;
    _os_log_impl(&dword_215163000, v12, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
  }
  if (v8)
  {
    CFRelease((CFTypeRef)v8);
    goto LABEL_17;
  }
LABEL_18:
  _CSFinishPreparedStatement(v5);
  return v8;
}

uint64_t _CSGetRegisteredItems(uint64_t a1, sqlite3_int64 a2, uint64_t a3, sqlite3_int64 *a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (!a4) {
    _CSGetRegisteredItems_cold_1();
  }
  sqlite3_int64 v5 = *a4;
  if (!*a4) {
    _CSGetRegisteredItems_cold_2();
  }
  *a4 = 0;
  uint64_t v9 = _CSPrepareStatement(a1, @"SELECT crt_iid FROM CSRegisteredFileTable WHERE crt_iid > ? ORDER BY crt_iid ASC LIMIT ?", "SELECT crt_iid FROM CSRegisteredFileTable WHERE crt_iid > ? ORDER BY crt_iid ASC LIMIT ?");
  CFAllocatorRef v10 = v9;
  if (!v9)
  {
    sqlite3_int64 i = 0;
    goto LABEL_21;
  }
  sqlite3_bind_int64(v9[2], 1, a2);
  sqlite3_bind_int64(v10[2], 2, v5);
  for (sqlite3_int64 i = 0; ; ++i)
  {
    uint64_t v12 = CS_sqlite3_step((uint64_t *)v10);
    if (v12 != 100) {
      break;
    }
    sqlite3_int64 v13 = sqlite3_column_int64(v10[2], 0);
    if (a3) {
      *(void *)(a3 + 8 * i) = v13;
    }
  }
  uint64_t v14 = v12;
  if (v12 == 101)
  {
    uint64_t v15 = 1;
    goto LABEL_22;
  }
  if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1484);
  }
  if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
  {
LABEL_21:
    uint64_t v15 = 0;
    goto LABEL_22;
  }
  CFAllocatorRef v16 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFStringRef v17 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
  uint64_t v15 = (uint64_t)CFStringCreateWithFormat(v16, 0, @"sqlite3_step returned: %d %s\n", v14, v17);
  if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1487);
  }
  uint64_t v18 = CK_DEFAULT_LOG_INTERNAL_1;
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138543362;
    uint64_t v21 = v15;
    _os_log_impl(&dword_215163000, v18, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
  }
  if (v15)
  {
    CFRelease((CFTypeRef)v15);
    goto LABEL_21;
  }
LABEL_22:
  _CSFinishPreparedStatement((uint64_t *)v10);
  *a4 = i;
  return v15;
}

void _CSChunkStoreCSChunkStoreFinalize(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1613);
  }
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
  {
    CFStringRef v2 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"path:%s\n", *(void *)(a1 + 112));
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1619);
    }
    uint64_t v3 = CK_DEFAULT_LOG_INTERNAL_1;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138543362;
      CFStringRef v10 = v2;
      _os_log_impl(&dword_215163000, v3, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
    }
    if (v2) {
      CFRelease(v2);
    }
  }
  cs_wrlock(a1 + 272);
  CFStringRef v4 = *(const char **)(a1 + 120);
  if (v4)
  {
    removefile(v4, 0, 1u);
    free(*(void **)(a1 + 120));
    *(void *)(a1 + 120) = 0;
  }
  _CSChunkStoreClose(a1);
  sqlite3_int64 v5 = *(void **)(a1 + 264);
  if (v5)
  {
    free(v5);
    *(void *)(a1 + 264) = 0;
  }
  uint64_t v6 = *(void **)(a1 + 112);
  if (v6)
  {
    free(v6);
    *(void *)(a1 + 112) = 0;
  }
  sqlite3_int64 v7 = *(const void **)(a1 + 136);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(a1 + 136) = 0;
  }
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 32));
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 144));
  pthread_cond_destroy((pthread_cond_t *)(a1 + 208));
  cs_unlock(a1 + 272);
  uint64_t v8 = cs_rwlock_destroy(a1 + 272);
  CKPointerHash(v8);
  *(_DWORD *)buf = -559038737;
  memset_pattern4((void *)(a1 + 16), buf, 0x218uLL);
}

os_log_t __CSChunkStoreOpenDB_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __CSChunkStoreOpenDB_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __CSChunkStoreOpenDB_block_invoke_1631()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __CSChunkStoreOpenDB_block_invoke_2_1635()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __CSChunkStoreOpenDB_block_invoke_1639()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __CSChunkStoreOpenDB_block_invoke_2_1643()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __CSChunkStoreOpenDB_block_invoke_1647()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __CSChunkStoreOpenDB_block_invoke_2_1654()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __CSChunkStoreOpenDB_block_invoke_1658()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __CSChunkStoreOpenDB_block_invoke_2_1665()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __CSRename_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __CSRename_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __CSRename_block_invoke_1679()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __CSRename_block_invoke_2_1686()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __CSRename_block_invoke_1690()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __CSRename_block_invoke_2_1697()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

void _CSFinalizeDBStmts(const __CFString *a1, sqlite3_stmt **a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1703);
  }
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
  {
    bzero(buffer, 0x400uLL);
    if (CFStringGetCString(a1, buffer, 1024, 0x8000100u))
    {
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1706);
      }
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
      {
        CFStringRef v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"finalizing \"%s\"\n", buffer);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1712);
        }
        sqlite3_int64 v7 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138543362;
          CFStringRef v14 = v6;
          _os_log_impl(&dword_215163000, v7, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
        }
        if (v6) {
          CFRelease(v6);
        }
      }
    }
  }
  uint64_t v8 = sqlite3_finalize(a2[2]);
  free(a2);
  if (v8)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1716);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      CFStringRef v10 = sqlite3_errmsg(*(sqlite3 **)(a3 + 24));
      CFStringRef v11 = CFStringCreateWithFormat(v9, 0, @"sqlite3_finalize returned %d: %s", v8, v10);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1723);
      }
      uint64_t v12 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buffer = 138543362;
        CFStringRef v16 = v11;
        _os_log_impl(&dword_215163000, v12, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)buffer, 0xCu);
      }
      if (v11) {
        CFRelease(v11);
      }
    }
  }
}

void _CSReleaseOrphanedChunks(uint64_t a1, sqlite3_int64 *a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (a2)
  {
    if (a3)
    {
      unsigned int v6 = _CSChunkSignatureForToken(a1, *a2, 0);
      if (v6)
      {
        sqlite3_int64 v7 = malloc_type_malloc(v6, 0x25491983uLL);
        if (v7)
        {
          uint64_t v8 = v7;
          uint64_t v9 = 0;
          CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
          do
          {
            if (_CSChunkSignatureForToken(a1, a2[v9], v8)
              && (_CSReleaseChunkForSignature(a1, v8) & 1) == 0)
            {
              if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1785);
              }
              if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
              {
                CFStringRef v11 = CFStringCreateWithFormat(v10, 0, @"Unable to release chunk at token %lld (%llu)\n", a2[v9], v9);
                if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
                  dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1791);
                }
                uint64_t v12 = CK_DEFAULT_LOG_INTERNAL_1;
                if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 138543362;
                  CFStringRef v14 = v11;
                  _os_log_impl(&dword_215163000, v12, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
                }
                if (v11) {
                  CFRelease(v11);
                }
              }
            }
            ++v9;
          }
          while (a3 != v9);
          free(v8);
        }
      }
    }
  }
}

os_log_t __fsopen_block_invoke_0()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __removeUnreferencedChunks_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __removeUnreferencedChunks_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __removeUnreferencedChunksAtEof_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __removeUnreferencedChunksAtEof_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __removeUnreferencedChunksAtEof_block_invoke_1871()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __removeUnreferencedChunksAtEof_block_invoke_2_1878()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __removeUnreferencedChunksAtEof_block_invoke_1886()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __removeUnreferencedChunksAtEof_block_invoke_2_1893()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __removeUnreferencedChunksAtEof_block_invoke_1897()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __removeUnreferencedChunksAtEof_block_invoke_2_1904()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __removeUnreferencedChunksAtEof_block_invoke_1908()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __removeUnreferencedChunksAtEof_block_invoke_2_1912()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __removeUnreferencedChunksAtEof_block_invoke_1916()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __removeUnreferencedChunksAtEof_block_invoke_2_1923()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __removeUnreferencedChunksAtEof_block_invoke_1931()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __removeUnreferencedChunksAtEof_block_invoke_2_1938()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

uint64_t truncateStorageFile(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1955);
  }
  BOOL v10 = os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG);
  CFStringRef v11 = (CFAllocatorRef *)MEMORY[0x263EFFB08];
  if (v10)
  {
    CFStringRef v12 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"ftRowId:%llu, offset:0x%llx, spaceDelta:%llu\n", a2, a3, a4);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1961);
    }
    sqlite3_int64 v13 = CK_DEFAULT_LOG_INTERNAL_1;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138543362;
      CFStringRef v64 = v12;
      _os_log_impl(&dword_215163000, v13, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
    }
    if (v12) {
      CFRelease(v12);
    }
  }
  _CSCloseCachedStorageFile(a1, a2, 0);
  bzero(buf, 0x400uLL);
  if (!__CSCreateStoragePath(a1, a2, 0, (char *)buf, 0x400uLL)) {
    goto LABEL_50;
  }
  int v14 = open((const char *)buf, 2, 384);
  int v15 = v14;
  if (v14 == -1)
  {
    if (!a3 && *__error() == 2)
    {
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1965);
      }
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        CFStringRef v20 = CFStringCreateWithFormat(*v11, 0, @"open failed for \"%s\" with ENOENT, but we can clear the storage file reference anyway", buf);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1972);
        }
        uint64_t v21 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          v62.dev_t st_dev = 138543362;
          *(void *)&v62.mode_t st_mode = v20;
          _os_log_impl(&dword_215163000, v21, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v62, 0xCu);
        }
        if (v20) {
          CFRelease(v20);
        }
      }
LABEL_33:
      uint64_t v22 = CSsql_corruption_checking_do_0(a1, *(sqlite3 **)(a1 + 24), "DELETE FROM CSChunkTable WHERE ft_rowid = %lld", a2);
      if (v22)
      {
        uint64_t v23 = v22;
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1988);
        }
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
          goto LABEL_142;
        }
        CFAllocatorRef v24 = *v11;
        uint64_t v25 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
        CFStringRef v26 = CFStringCreateWithFormat(v24, 0, @"sqlite3_step error: %d, %s", v23, v25);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1992);
        }
        uint64_t v27 = CK_DEFAULT_LOG_INTERNAL_1;
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
          goto LABEL_140;
        }
        v62.dev_t st_dev = 138543362;
        *(void *)&v62.mode_t st_mode = v26;
      }
      else
      {
        uint64_t v42 = CSsql_corruption_checking_do_0(a1, *(sqlite3 **)(a1 + 24), "DELETE FROM CSStorageFileTable WHERE ft_rowid = %lld", a2);
        if (v42)
        {
          uint64_t v43 = v42;
          if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1997);
          }
          if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
            goto LABEL_142;
          }
          CFAllocatorRef v44 = *v11;
          CFStringRef v45 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
          CFStringRef v26 = CFStringCreateWithFormat(v44, 0, @"CSsql_do error: %d, %s", v43, v45);
          if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2004);
          }
          uint64_t v27 = CK_DEFAULT_LOG_INTERNAL_1;
          if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
            goto LABEL_140;
          }
          v62.dev_t st_dev = 138543362;
          *(void *)&v62.mode_t st_mode = v26;
        }
        else
        {
          if (!unlink((const char *)buf))
          {
            uint64_t v33 = 0;
LABEL_143:
            if (v15 == -1) {
              goto LABEL_145;
            }
            goto LABEL_144;
          }
          if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2008);
          }
          if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          {
LABEL_142:
            uint64_t v33 = 0xFFFFFFFFLL;
            goto LABEL_143;
          }
          CFAllocatorRef v53 = *v11;
          char v54 = __error();
          unsigned int v55 = strerror(*v54);
          CFStringRef v26 = CFStringCreateWithFormat(v53, 0, @"unlink failed for ftRowId:%llu, path:\"%s\": %s\n", a2, buf, v55);
          if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2015);
          }
          uint64_t v27 = CK_DEFAULT_LOG_INTERNAL_1;
          if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          {
LABEL_140:
            if (v26) {
              CFRelease(v26);
            }
            goto LABEL_142;
          }
          v62.dev_t st_dev = 138543362;
          *(void *)&v62.mode_t st_mode = v26;
        }
      }
      _os_log_impl(&dword_215163000, v27, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v62, 0xCu);
      goto LABEL_140;
    }
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1976);
    }
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      uint64_t v33 = 0xFFFFFFFFLL;
      goto LABEL_147;
    }
    CFAllocatorRef v28 = *v11;
    CFStringRef v29 = __error();
    int v30 = strerror(*v29);
    CFStringRef v31 = CFStringCreateWithFormat(v28, 0, @"open failed for \"%s\": %s", buf, v30);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1983);
    }
    uint64_t v32 = CK_DEFAULT_LOG_INTERNAL_1;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      v62.dev_t st_dev = 138543362;
      *(void *)&v62.mode_t st_mode = v31;
      _os_log_impl(&dword_215163000, v32, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v62, 0xCu);
    }
    if (v31) {
      CFRelease(v31);
    }
LABEL_50:
    uint64_t v33 = 0xFFFFFFFFLL;
    goto LABEL_145;
  }
  if (!a3) {
    goto LABEL_33;
  }
  memset(&v62, 0, sizeof(v62));
  if (fstat(v14, &v62) == -1)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2019);
    }
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
      goto LABEL_130;
    }
    CFAllocatorRef v34 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFStringRef v35 = __error();
    CFStringRef v36 = strerror(*v35);
    CFStringRef v18 = CFStringCreateWithFormat(v34, 0, @"fstat failed for \"%s\": %s", buf, v36);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2026);
    }
    CFAllocatorRef v19 = CK_DEFAULT_LOG_INTERNAL_1;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
      goto LABEL_128;
    }
    *(_DWORD *)uint64_t v60 = 138543362;
    CFStringRef v61 = v18;
    goto LABEL_127;
  }
  off_t st_size = v62.st_size;
  off_t v17 = v62.st_size - a3;
  if (v62.st_size < a3)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2030);
    }
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
      goto LABEL_130;
    }
    CFStringRef v18 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Invalid file size/offset for \"%s\": fileSize:0x%llx, offset:0x%llx\n", buf, st_size, a3);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2037);
    }
    CFAllocatorRef v19 = CK_DEFAULT_LOG_INTERNAL_1;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
      goto LABEL_128;
    }
    *(_DWORD *)uint64_t v60 = 138543362;
    CFStringRef v61 = v18;
    goto LABEL_127;
  }
  CFStringRef v11 = (CFAllocatorRef *)MEMORY[0x263EFFB08];
  if (v17 != a4)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2041);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEFAULT))
    {
      CFStringRef v37 = CFStringCreateWithFormat(*v11, 0, @"Invalid free space for \"%s\": diffSize:%llu, spaceDelta:%llu\n", buf, v17, a4);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2048);
      }
      unsigned int v38 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t v60 = 138543362;
        CFStringRef v61 = v37;
        _os_log_impl(&dword_215163000, v38, OS_LOG_TYPE_DEFAULT, "%{public}@", v60, 0xCu);
      }
      CFStringRef v11 = (CFAllocatorRef *)MEMORY[0x263EFFB08];
      if (v37) {
        CFRelease(v37);
      }
    }
  }
  if (a4)
  {
    CFStringRef v39 = (char *)CSsql_get64(a1, 1, "SELECT ft_space FROM CSStorageFileTable WHERE ft_rowid = %lld", a2);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2052);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
    {
      CFStringRef cf = CFStringCreateWithFormat(*v11, 0, @"Updating free space for ftRowId:%llu, spaceDelta:%llu, space:%llu\n", a2, a4, v39);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2059);
      }
      sqlite3_int64 v40 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t v60 = 138543362;
        CFStringRef v61 = cf;
        _os_log_impl(&dword_215163000, v40, OS_LOG_TYPE_DEBUG, "%{public}@", v60, 0xCu);
      }
      CFStringRef v11 = (CFAllocatorRef *)MEMORY[0x263EFFB08];
      if (cf) {
        CFRelease(cf);
      }
    }
    uint64_t v41 = (unint64_t)&v39[a4] >= 0x1400064 ? 20971620 : (uint64_t)&v39[a4];
    if (CSsql_corruption_checking_do_0(a1, *(sqlite3 **)(a1 + 24), "UPDATE CSStorageFileTable SET ft_space = %lld WHERE ft_rowid = %lld", v41, a2))
    {
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2063);
      }
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
        goto LABEL_130;
      }
      CFStringRef v18 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"failed to set the free space for ftRowId:%llu, path:\"%s\", space:0x%llx\n", a2, buf, v41);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2070);
      }
      CFAllocatorRef v19 = CK_DEFAULT_LOG_INTERNAL_1;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
        goto LABEL_128;
      }
      *(_DWORD *)uint64_t v60 = 138543362;
      CFStringRef v61 = v18;
      goto LABEL_127;
    }
  }
  if (a5)
  {
    uint64_t v46 = (char *)CSsql_get64(a1, 1, "SELECT ft_pspace FROM CSStorageFileTable WHERE ft_rowid = %lld", a2);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2074);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
    {
      CFStringRef v47 = CFStringCreateWithFormat(*v11, 0, @"Updating free pspace for ftRowId:%llu, pspaceDelta:%llu, pspace:%llu\n", a2, a5, v46);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2081);
      }
      uint64_t v48 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t v60 = 138543362;
        CFStringRef v61 = v47;
        _os_log_impl(&dword_215163000, v48, OS_LOG_TYPE_DEBUG, "%{public}@", v60, 0xCu);
      }
      CFStringRef v11 = (CFAllocatorRef *)MEMORY[0x263EFFB08];
      if (v47) {
        CFRelease(v47);
      }
    }
    CFStringRef v49 = (unint64_t)v46 >= a5 ? &v46[-a5] : 0;
    if (CSsql_corruption_checking_do_0(a1, *(sqlite3 **)(a1 + 24), "UPDATE CSStorageFileTable SET ft_pspace = %lld WHERE ft_rowid = %lld", v49, a2))
    {
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2085);
      }
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
        goto LABEL_130;
      }
      CFStringRef v18 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"failed to set the free pspace for ftRowId:%llu, path:\"%s\", pspace:0x%llx\n", a2, buf, v49);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2092);
      }
      CFAllocatorRef v19 = CK_DEFAULT_LOG_INTERNAL_1;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
        goto LABEL_128;
      }
      *(_DWORD *)uint64_t v60 = 138543362;
      CFStringRef v61 = v18;
      goto LABEL_127;
    }
  }
  if (!ftruncate(v15, a3))
  {
    uint64_t v33 = 0;
    goto LABEL_144;
  }
  if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2096);
  }
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
  {
    CFAllocatorRef v50 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    uint64_t v51 = __error();
    xpc_object_t v52 = strerror(*v51);
    CFStringRef v18 = CFStringCreateWithFormat(v50, 0, @"ftruncate failed for ftRowId:%llu, path:\"%s\", offset:0x%llx: %s\n", a2, buf, a3, v52);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2103);
    }
    CFAllocatorRef v19 = CK_DEFAULT_LOG_INTERNAL_1;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR)) {
      goto LABEL_128;
    }
    *(_DWORD *)uint64_t v60 = 138543362;
    CFStringRef v61 = v18;
LABEL_127:
    _os_log_impl(&dword_215163000, v19, OS_LOG_TYPE_ERROR, "%{public}@", v60, 0xCu);
LABEL_128:
    if (v18) {
      CFRelease(v18);
    }
  }
LABEL_130:
  uint64_t v33 = 0xFFFFFFFFLL;
  CFStringRef v11 = (CFAllocatorRef *)MEMORY[0x263EFFB08];
LABEL_144:
  close(v15);
LABEL_145:
  if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2107);
  }
LABEL_147:
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
  {
    CFStringRef v56 = CFStringCreateWithFormat(*v11, 0, @"ftRowId:%llu, rc:%d\n", a2, v33);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2114);
    }
    uint64_t v57 = CK_DEFAULT_LOG_INTERNAL_1;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
    {
      v62.dev_t st_dev = 138543362;
      *(void *)&v62.mode_t st_mode = v56;
      _os_log_impl(&dword_215163000, v57, OS_LOG_TYPE_DEBUG, "%{public}@", (uint8_t *)&v62, 0xCu);
    }
    if (v56) {
      CFRelease(v56);
    }
  }
  return v33;
}

os_log_t __removeUnreferencedChunksAtEof_block_invoke_1942()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __removeUnreferencedChunksAtEof_block_invoke_2_1949()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_1962()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_2_1969()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_1973()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_2_1980()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_1985()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_2_1989()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_1994()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_2_2001()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_2005()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_2_2012()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_2016()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_2_2023()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_2027()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_2_2034()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_2038()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_2_2045()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_2049()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_2_2056()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_2060()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_2_2067()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_2071()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_2_2078()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_2082()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_2_2089()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_2093()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_2_2100()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_2104()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_2_2111()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __copyReferencedChunks_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __copyReferencedChunks_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

uint64_t _CSHandleDatabaseIOError_0(uint64_t result)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (result == 10)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2537);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v1 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Chunk store database I/O error. Forcing process exit.");
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2543);
      }
      CFStringRef v2 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        int v3 = 138543362;
        CFStringRef v4 = v1;
        _os_log_impl(&dword_215163000, v2, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v3, 0xCu);
      }
      if (v1) {
        CFRelease(v1);
      }
    }
    exit(1);
  }
  return result;
}

void _CSHandleCorruptDatabase(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  bzero(__s, 0x400uLL);
  if (CKChunkStoreGetLocation(a1, __s, 0x400uLL)
    && (size_t v2 = strlen(__s), 1024 - v2 <= snprintf(&__s[v2], 1024 - v2, "/%s", "ChunkStoreDatabase")))
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2546);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v3 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"safe_snprintf truncated %s", __s);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_2549);
      }
      CFStringRef v4 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        CFStringRef v6 = v3;
        _os_log_impl(&dword_215163000, v4, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v3) {
        CFRelease(v3);
      }
    }
  }
  else
  {
    _CSBruteForceDatabaseCorruptionRecovery(__s, *(sqlite3 **)(a1 + 24), *(_DWORD *)(a1 + 104) != 0);
  }
}

uint64_t CSChunkCopier_Destroy(uint64_t a1, CFErrorRef *a2)
{
  if (a1 && (CFStringRef v4 = *(void **)(a1 + 72)) != 0)
  {
    uint64_t v5 = (void *)v4[1];
    if (v5) {
      free(v5);
    }
    free(v4);
    *(void *)(a1 + 72) = 0;
    return 1;
  }
  else
  {
    CFErrorRef v7 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (CFErrorDomain)*MEMORY[0x263EFFC60], 6, 0);
    uint64_t result = 0;
    *a2 = v7;
  }
  return result;
}

uint64_t CSChunkCopier_Initialize(uint64_t a1, int a2, CFErrorRef *a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  CFDataRef v13 = 0;
  CFDataRef theData = 0;
  if (CSCopier_ExportCopyCredentials(a1, &theData, &v13, a3))
  {
    CFStringRef v6 = (size_t **)malloc_type_malloc(0x10uLL, 0x600405C6656D0uLL);
    if (v6)
    {
      CFErrorRef v7 = v6;
      uint64_t v8 = 0;
      int v17 = 0;
      uint64_t v16 = 0;
      int v15 = a2;
      do
      {
        char v9 = *((unsigned char *)&v15 + v8);
        *((unsigned char *)&v15 + v8) = CFDataGetBytePtr(theData)[v8] ^ v9;
        ++v8;
      }
      while (v8 != 8);
      BOOL v10 = (size_t *)ccaes_ctr_crypt_mode();
      *CFErrorRef v7 = v10;
      v7[1] = (size_t *)malloc_type_malloc(*v10, 0x601E3398uLL);
      CFDataGetLength(v13);
      CFDataGetBytePtr(v13);
      ccctr_init();
      cc_clear();
      *(void *)(a1 + 72) = v7;
      uint64_t v11 = 1;
    }
    else
    {
      uint64_t v11 = 0;
      *a3 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (CFErrorDomain)*MEMORY[0x263EFFC60], 1, 0);
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  if (theData)
  {
    CFRelease(theData);
    CFDataRef theData = 0;
  }
  if (v13) {
    CFRelease(v13);
  }
  return v11;
}

uint64_t CSChunkCopier_Update(uint64_t a1, uint64_t a2, uint64_t a3, CFErrorRef *a4)
{
  if (*(void *)(a1 + 72))
  {
    ccctr_update();
    return 1;
  }
  else
  {
    CFErrorRef v6 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (CFErrorDomain)*MEMORY[0x263EFFC60], 7, 0);
    uint64_t result = 0;
    *a4 = v6;
  }
  return result;
}

uint64_t CSContext_Initialize(void *a1, CFErrorRef *a2)
{
  CFStringRef v4 = malloc_type_calloc(1uLL, 0x50uLL, 0x600401D44175AuLL);
  if (v4)
  {
    v4[3] = 0u;
    v4[4] = 0u;
    v4[1] = 0u;
    v4[2] = 0u;
    _OWORD *v4 = 0u;
    *a1 = v4;
    return 1;
  }
  else
  {
    *a1 = 0;
    CFErrorRef v6 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (CFErrorDomain)*MEMORY[0x263EFFC60], 1, 0);
    uint64_t result = 0;
    *a2 = v6;
  }
  return result;
}

uint64_t CSContext_InititializeFromBoundaryKey(const __CFData *a1, uint64_t a2, CFMutableDataRef **a3, CFErrorRef *a4)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v8 = (CFMutableDataRef *)malloc_type_calloc(1uLL, 0x50uLL, 0x600401D44175AuLL);
  if (v8)
  {
    char v9 = v8;
    *((_OWORD *)v8 + 3) = 0u;
    *((_OWORD *)v8 + 4) = 0u;
    *((_OWORD *)v8 + 1) = 0u;
    *((_OWORD *)v8 + 2) = 0u;
    *(_OWORD *)uint64_t v8 = 0u;
    CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFIndex Length = CFDataGetLength(a1);
    CFMutableDataRef *v9 = CFDataCreateMutableCopy(v10, Length, a1);
    if (a2)
    {
LABEL_3:
      *a3 = v9;
      return 1;
    }
    ccsha256_di();
    CFDataGetBytePtr(a1);
    CFDataGetLength(a1);
    *(_OWORD *)bytes = 0u;
    long long v18 = 0u;
    if (!cchkdf())
    {
      v9[3] = CFDataCreate(v10, bytes, 32);
      *(_OWORD *)bytes = 0u;
      long long v18 = 0u;
      if (!cchkdf())
      {
        v9[2] = CFDataCreate(v10, bytes, 32);
        *(_OWORD *)bytes = 0u;
        long long v18 = 0u;
        if (!cchkdf())
        {
          v9[4] = CFDataCreate(v10, bytes, 32);
          goto LABEL_3;
        }
      }
    }
    free(v9);
    *a3 = 0;
    CFStringRef v14 = (const __CFString *)*MEMORY[0x263EFFC60];
    CFAllocatorRef v13 = v10;
    CFIndex v15 = 2;
  }
  else
  {
    *a3 = 0;
    CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFStringRef v14 = (const __CFString *)*MEMORY[0x263EFFC60];
    CFIndex v15 = 1;
  }
  CFErrorRef v16 = CFErrorCreate(v13, v14, v15, 0);
  uint64_t result = 0;
  *a4 = v16;
  return result;
}

uint64_t CSContext_InitializeFromChunkKey(const __CFData *a1, uint64_t a2, void *a3, CFErrorRef *a4)
{
  CFErrorRef v7 = malloc_type_calloc(1uLL, 0x50uLL, 0x600401D44175AuLL);
  if (v7)
  {
    uint64_t v8 = v7;
    v7[3] = 0u;
    _OWORD v7[4] = 0u;
    v7[1] = 0u;
    v7[2] = 0u;
    *CFErrorRef v7 = 0u;
    if (a1)
    {
      CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      CFIndex Length = CFDataGetLength(a1);
      *((void *)v8 + 3) = CFDataCreateMutableCopy(v9, Length, a1);
      *a3 = v8;
      return 1;
    }
    free(v7);
    *a3 = 0;
    CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFStringRef v13 = (const __CFString *)*MEMORY[0x263EFFC60];
    CFIndex v14 = 2;
  }
  else
  {
    *a3 = 0;
    CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFStringRef v13 = (const __CFString *)*MEMORY[0x263EFFC60];
    CFIndex v14 = 1;
  }
  CFErrorRef v15 = CFErrorCreate(v12, v13, v14, 0);
  uint64_t result = 0;
  *a4 = v15;
  return result;
}

uint64_t CSContext_InitializeFromFileKey(const __CFData *a1, uint64_t a2, void *a3, CFErrorRef *a4)
{
  CFErrorRef v7 = malloc_type_calloc(1uLL, 0x50uLL, 0x600401D44175AuLL);
  if (v7)
  {
    uint64_t v8 = v7;
    v7[3] = 0u;
    _OWORD v7[4] = 0u;
    v7[1] = 0u;
    v7[2] = 0u;
    *CFErrorRef v7 = 0u;
    if (a1)
    {
      CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      CFIndex Length = CFDataGetLength(a1);
      *((void *)v8 + 2) = CFDataCreateMutableCopy(v9, Length, a1);
      *a3 = v8;
      return 1;
    }
    free(v7);
    *a3 = 0;
    CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFStringRef v13 = (const __CFString *)*MEMORY[0x263EFFC60];
    CFIndex v14 = 2;
  }
  else
  {
    *a3 = 0;
    CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFStringRef v13 = (const __CFString *)*MEMORY[0x263EFFC60];
    CFIndex v14 = 1;
  }
  CFErrorRef v15 = CFErrorCreate(v12, v13, v14, 0);
  uint64_t result = 0;
  *a4 = v15;
  return result;
}

uint64_t CSContext_Destroy(const void **a1, CFErrorRef *a2)
{
  if (a1)
  {
    CFStringRef v4 = *a1;
    if (v4)
    {
      CFRelease(v4);
      *a1 = 0;
    }
    uint64_t v5 = a1[1];
    if (v5)
    {
      CFRelease(v5);
      a1[1] = 0;
    }
    CFErrorRef v6 = a1[2];
    if (v6)
    {
      CFRelease(v6);
      a1[2] = 0;
    }
    CFErrorRef v7 = a1[3];
    if (v7)
    {
      CFRelease(v7);
      a1[3] = 0;
    }
    uint64_t v8 = a1[4];
    if (v8)
    {
      CFRelease(v8);
      a1[4] = 0;
    }
    if (a1[5])
    {
      uint64_t v9 = CSFileDigester_Destroy((uint64_t)a1, a2) | 1;
      a1[5] = 0;
    }
    else
    {
      uint64_t v9 = 1;
    }
    if (a1[6])
    {
      uint64_t v9 = CSChunkDigester_Destroy((uint64_t)a1, a2) | v9;
      a1[6] = 0;
    }
    if (a1[7])
    {
      uint64_t v9 = CSChunkCryptor_Destroy((uint64_t)a1, a2) | v9;
      a1[7] = 0;
    }
    if (a1[8])
    {
      uint64_t v9 = CSCopier_Destroy((uint64_t)a1, a2) | v9;
      a1[8] = 0;
    }
    if (a1[9]) {
      uint64_t v9 = CSChunkCopier_Destroy((uint64_t)a1, a2) | v9;
    }
    free(a1);
  }
  else
  {
    uint64_t v9 = 0;
    *a2 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (CFErrorDomain)*MEMORY[0x263EFFC60], 6, 0);
  }
  return v9;
}

void CKChunkCryptorV1Finalize(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(void *)(v2 + 8))
  {
    off_26C5D5808();
    free(*(void **)(*(void *)(a1 + 40) + 8));
    *(void *)(*(void *)(a1 + 40) + 8) = 0;
    uint64_t v2 = *(void *)(a1 + 40);
  }
  uint64_t v3 = CCCryptorRelease(*(CCCryptorRef *)v2);
  if (v3)
  {
    uint64_t v4 = v3;
    if (CK_DEFAULT_LOG_BLOCK_2 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_2, &__block_literal_global_2);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_2, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v5 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"CCCryptorRelease() => %d\n", v4);
      if (CK_DEFAULT_LOG_BLOCK_2 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_2, &__block_literal_global_6_0);
      }
      CFErrorRef v6 = CK_DEFAULT_LOG_INTERNAL_2;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_2, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        CFStringRef v8 = v5;
        _os_log_impl(&dword_215163000, v6, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v5) {
        CFRelease(v5);
      }
    }
  }
  **(void **)(a1 + 40) = 0;
}

os_log_t __CKChunkCryptorV1Finalize_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_2 = (uint64_t)result;
  return result;
}

os_log_t __CKChunkCryptorV1Finalize_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_2 = (uint64_t)result;
  return result;
}

BOOL CKChunkCryptorV1Init(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  CFStringRef v5 = (unsigned __int8 *)CKChunkDigestResultsChunkKey(a3);
  CFErrorRef v6 = v5 + 1;
  size_t v7 = CKChunkEncryptionKeySize(v5);
  if (v7 != 16)
  {
    if (CK_DEFAULT_LOG_BLOCK_2 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_2, &__block_literal_global_9);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_2, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v8 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"expected key size 16; got %u\n",
             v7);
      if (CK_DEFAULT_LOG_BLOCK_2 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_2, &__block_literal_global_15);
      }
      uint64_t v9 = CK_DEFAULT_LOG_INTERNAL_2;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_2, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        *(void *)&uint8_t buf[4] = v8;
        _os_log_impl(&dword_215163000, v9, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v8) {
        CFRelease(v8);
      }
    }
  }
  *(unsigned char *)(a1 + 32) = a2;
  long long v20 = 0u;
  long long v21 = 0u;
  *(_OWORD *)buf = 0u;
  long long v19 = 0u;
  uint64_t v10 = CCCryptorCreate(0, 0, 2u, v6, v7, buf, *(CCCryptorRef **)(a1 + 40));
  *(void *)(*(void *)(a1 + 40) + 8) = malloc_type_malloc(modeCFB_desc, 0x283B7D5BuLL);
  uint64_t v11 = *(void *)(a1 + 40);
  CFAllocatorRef v12 = *(void **)(v11 + 8);
  if (!v12) {
    return 0;
  }
  ((void (*)(_CCCryptor *, _OWORD *, void *))off_26C5D57F0)(*(_CCCryptor **)v11, 0, v12);
  if (!v10) {
    return 1;
  }
  if (CK_DEFAULT_LOG_BLOCK_2 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_2, &__block_literal_global_19_0);
  }
  BOOL result = os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_2, OS_LOG_TYPE_ERROR);
  if (result)
  {
    CFStringRef v14 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"CCCryptorCreate() => %d\n", v10);
    if (CK_DEFAULT_LOG_BLOCK_2 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_2, &__block_literal_global_26_0);
    }
    CFErrorRef v15 = CK_DEFAULT_LOG_INTERNAL_2;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_2, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)CFErrorRef v16 = 138543362;
      CFStringRef v17 = v14;
      _os_log_impl(&dword_215163000, v15, OS_LOG_TYPE_ERROR, "%{public}@", v16, 0xCu);
    }
    if (v14) {
      CFRelease(v14);
    }
    return 0;
  }
  return result;
}

os_log_t __CKChunkCryptorV1Init_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_2 = (uint64_t)result;
  return result;
}

os_log_t __CKChunkCryptorV1Init_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_2 = (uint64_t)result;
  return result;
}

os_log_t __CKChunkCryptorV1Init_block_invoke_16()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_2 = (uint64_t)result;
  return result;
}

os_log_t __CKChunkCryptorV1Init_block_invoke_2_23()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_2 = (uint64_t)result;
  return result;
}

BOOL CKChunkCryptorV1Update(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  int v3 = *(unsigned __int8 *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  CFStringRef v5 = *(_CCCryptor **)v4;
  CFErrorRef v6 = *(void **)(v4 + 8);
  if (v3) {
    int v7 = ((uint64_t (*)(_CCCryptor *, char *, unsigned char *, uint64_t, void *))off_26C5D57F8[0])(v5, a2, a2, a3, v6);
  }
  else {
    int v7 = ((uint64_t (*)(_CCCryptor *, char *, unsigned char *, uint64_t, void *))off_26C5D5800)(v5, a2, a2, a3, v6);
  }
  if (!v7) {
    return 1;
  }
  if (CK_DEFAULT_LOG_BLOCK_2 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_2, &__block_literal_global_29);
  }
  BOOL result = os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_2, OS_LOG_TYPE_ERROR);
  if (result)
  {
    CFStringRef v9 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"crypting:CCCryptorUpdate() => %d\n", 4294962996);
    if (CK_DEFAULT_LOG_BLOCK_2 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_2, &__block_literal_global_35);
    }
    uint64_t v10 = CK_DEFAULT_LOG_INTERNAL_2;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_2, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      CFStringRef v12 = v9;
      _os_log_impl(&dword_215163000, v10, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v9) {
      CFRelease(v9);
    }
    return 0;
  }
  return result;
}

os_log_t __CKChunkCryptorV1Update_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_2 = (uint64_t)result;
  return result;
}

os_log_t __CKChunkCryptorV1Update_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_2 = (uint64_t)result;
  return result;
}

uint64_t CKChunkCryptorV1Finish()
{
  return 1;
}

uint64_t CKChunkDigestArgumentsV2Alloc(void *a1)
{
  *a1 = 0;
  uint64_t v3 = 0;
  uint64_t result = CKChunkDigestArgumentsAllocate(&v3, 2, 16);
  if (result) {
    *a1 = v3;
  }
  return result;
}

uint64_t CKChunkDigestArgumentsV2ChunkScheme()
{
  return 4;
}

uint64_t CKChunkDigestArgumentsV2ChunkKeyScheme(uint64_t a1)
{
  return 4 * (*(unsigned char *)(a1 + 20) != 0);
}

uint64_t CKChunkDigestArgumentsV2BoundaryKey(uint64_t a1)
{
  return **(void **)(a1 + 24);
}

uint64_t CKChunkDigestArgumentsV2ChunkKey(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 24) + 8);
}

uint64_t CKChunkDigestArgumentsV2ChunkSchemeByte(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 20)) {
    return 132;
  }
  else {
    return 4;
  }
}

void CKChunkDigestArgumentsV2Finalize(uint64_t a1)
{
  uint64_t v2 = *(CFTypeRef **)(a1 + 24);
  if (*v2)
  {
    CKBaseRelease(*v2);
    uint64_t v2 = *(CFTypeRef **)(a1 + 24);
  }
  *uint64_t v2 = 0;
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(const void **)(v3 + 8);
  if (v4)
  {
    CKBaseRelease(v4);
    uint64_t v3 = *(void *)(a1 + 24);
  }
  *(void *)(v3 + 8) = 0;
}

__CFString *CKChunkDigestArgumentsV2CopyDescription(uint64_t a1)
{
  CFStringRef v1 = *(void **)(a1 + 24);
  if (*v1) {
    return (__CFString *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"v2 boundaryKey");
  }
  if (v1[1]) {
    return (__CFString *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"v2 chunkKey");
  }
  return @"v2 invalid";
}

uint64_t CKChunkDigestArgumentsV2WithBoundaryKeyCreate(void *a1, const void *a2, CFTypeRef *a3)
{
  return _CKChunkDigestArgumentsV2Create(a1, a2, 0, a3);
}

uint64_t _CKChunkDigestArgumentsV2Create(void *a1, const void *a2, const void *a3, CFTypeRef *a4)
{
  CFTypeRef v15 = 0;
  CFTypeRef cf = 0;
  *a1 = 0;
  int v8 = CKChunkDigestArgumentsAllocate((uint64_t *)&v15, 2, 16);
  uint64_t v9 = 0;
  CFTypeRef v10 = v15;
  if (!v8 || !v15) {
    goto LABEL_17;
  }
  if (!_CKChunkDigestArgumentsInit((uint64_t)v15, 1, &cf))
  {
    uint64_t v9 = 0;
    CFTypeRef v12 = cf;
    if (a4 && cf)
    {
      CFRetain(cf);
      uint64_t v9 = 0;
      CFTypeRef v12 = cf;
      *a4 = cf;
    }
    goto LABEL_14;
  }
  if (a2)
  {
    CFRetain(a2);
    **((void **)v15 + 3) = a2;
  }
  if (a3)
  {
    CFRetain(a3);
    CFTypeRef v11 = v15;
    *(void *)(*((void *)v15 + 3) + 8) = a3;
  }
  else
  {
    CFTypeRef v11 = v15;
    if (!v15)
    {
      CFTypeRef v13 = 0;
      goto LABEL_13;
    }
  }
  CFRetain(v11);
  CFTypeRef v13 = v15;
LABEL_13:
  *a1 = v13;
  uint64_t v9 = 1;
  CFTypeRef v12 = cf;
LABEL_14:
  if (v12) {
    CFRelease(v12);
  }
  CFTypeRef v10 = v15;
LABEL_17:
  if (v10) {
    CFRelease(v10);
  }
  return v9;
}

uint64_t CKChunkDigestArgumentsV2WithChunkKeyCreate(void *a1, const void *a2, CFTypeRef *a3)
{
  return _CKChunkDigestArgumentsV2Create(a1, 0, a2, a3);
}

os_log_t __CKFileSignatureSize_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_3 = (uint64_t)result;
  return result;
}

os_log_t __CKFileSignatureSize_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_3 = (uint64_t)result;
  return result;
}

void *CKFileSchemeAndSignatureCopyCString(char *a1)
{
  uint64_t v2 = CKFileSignatureSize(a1);
  if (v2) {
    uint64_t v3 = v2 + 1;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = malloc_type_malloc((2 * v3) | 1, 0xC4114965uLL);
  CShex_to_string(a1, v3, (uint64_t)v4);
  return v4;
}

BOOL CKFileSignatureIsValidN(unsigned char *a1, uint64_t a2)
{
  BOOL result = 0;
  if (a1 && a2)
  {
    uint64_t v5 = CKFileSignatureSize(a1);
    if (v5) {
      uint64_t v6 = v5 + 1;
    }
    else {
      uint64_t v6 = 0;
    }
    return v6 == a2 && v5 != 0;
  }
  return result;
}

void *CKFileSignatureCreateWithHexString(char *a1)
{
  uint64_t v7 = 0;
  int v8 = 0;
  if (ck_buffer_create_with_hex_string(a1, &v8, &v7))
  {
    uint64_t v2 = v7;
    BOOL result = v8;
    if (v8) {
      BOOL v3 = v7 == 0;
    }
    else {
      BOOL v3 = 1;
    }
    if (v3) {
      goto LABEL_14;
    }
    uint64_t v4 = CKFileSignatureSize(v8);
    if (v4) {
      uint64_t v5 = v4 + 1;
    }
    else {
      uint64_t v5 = 0;
    }
    if (v4) {
      BOOL v6 = v5 == v2;
    }
    else {
      BOOL v6 = 0;
    }
    if (v6) {
      return v8;
    }
  }
  BOOL result = v8;
LABEL_14:
  if (result)
  {
    free(result);
    return 0;
  }
  return result;
}

BOOL CKFileSignaturesEqual(unsigned char *a1, unsigned char *a2)
{
  if (a1 == a2) {
    return 1;
  }
  BOOL result = 0;
  if (a1 && a2)
  {
    uint64_t v5 = CKFileSignatureSize(a1);
    BOOL v6 = v5 == 0;
    if (v5) {
      size_t v7 = v5 + 1;
    }
    else {
      size_t v7 = 0;
    }
    uint64_t v8 = CKFileSignatureSize(a2);
    BOOL v9 = v8 + 1 == v7;
    if (!v8) {
      BOOL v9 = v6;
    }
    return v9 && memcmp(a1, a2, v7) == 0;
  }
  return result;
}

uint64_t CKFileDigestResultsV2Alloc(void *a1)
{
  *a1 = 0;
  uint64_t v3 = 0;
  uint64_t result = CKFileDigestResultsAllocate(&v3, 2, 8);
  if (result) {
    *a1 = v3;
  }
  return result;
}

uint64_t CKFileDigestResultsV2Create(void *a1, unsigned char *a2, uint64_t a3, const void *a4)
{
  CFTypeRef cf = 0;
  uint64_t v13 = 0;
  *a1 = 0;
  int v8 = CKFileDigestResultsAllocate((uint64_t *)&cf, 2, 8);
  uint64_t v9 = 0;
  CFTypeRef v10 = cf;
  if (v8 && cf)
  {
    if (!_CKFileDigestResultsInit((uint64_t)cf, a2, a3, &v13))
    {
      uint64_t v9 = 0;
      CFTypeRef v10 = cf;
      if (!cf) {
        return v9;
      }
      goto LABEL_10;
    }
    if (a4)
    {
      CFRetain(a4);
      **((void **)cf + 5) = a4;
    }
    CFTypeRef v10 = cf;
    if (cf)
    {
      CFRetain(cf);
      CFTypeRef v10 = cf;
    }
    *a1 = v10;
    uint64_t v9 = 1;
  }
  if (v10) {
LABEL_10:
  }
    CFRelease(v10);
  return v9;
}

void CKFileDigestResultsV2Finalize(uint64_t a1)
{
  uint64_t v2 = **(const void ***)(a1 + 40);
  if (v2)
  {
    CFRelease(v2);
    **(void **)(a1 + 40) = 0;
  }
}

BOOL CKFileDigestResultsV2IsEqual(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24) != *(void *)(a2 + 24)) {
    return 0;
  }
  uint64_t v2 = *(unsigned char **)(a1 + 32);
  uint64_t v3 = *(unsigned char **)(a2 + 32);
  if (v2 != v3)
  {
    if (v2) {
      BOOL v4 = v3 == 0;
    }
    else {
      BOOL v4 = 1;
    }
    if (!v4) {
      return CKFileSignaturesEqual(v2, v3);
    }
    return 0;
  }
  return 1;
}

uint64_t CKFileDigestResultsV2FileVerificationKey(uint64_t a1)
{
  return **(void **)(a1 + 40);
}

CFStringRef CKFileDigestResultsV2CopyDescription(uint64_t a1)
{
  uint64_t v2 = CKFileSchemeAndSignatureCopyCString(*(char **)(a1 + 32));
  if (**(void **)(a1 + 40)) {
    uint64_t v3 = "present";
  }
  else {
    uint64_t v3 = "not-present";
  }
  CFStringRef v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"sig %s len %llu fileVerificationKey %s", v2, *(void *)(a1 + 24), v3);
  free(v2);
  return v4;
}

void _CSBruteForceDatabaseCorruptionRecovery(const char *a1, sqlite3 *pDb, char a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (a3)
  {
    CScloseDB(pDb);
    if (!a1)
    {
      if (_MergedGlobals != -1) {
        dispatch_once(&_MergedGlobals, &__block_literal_global_10_0);
      }
      if (os_log_type_enabled((os_log_t)qword_267865070, OS_LOG_TYPE_ERROR))
      {
        CFStringRef v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"chunk store database corruption: could not unlink files, dbname null");
        if (_MergedGlobals != -1) {
          dispatch_once(&_MergedGlobals, &__block_literal_global_17_0);
        }
        uint64_t v5 = qword_267865070;
        if (!os_log_type_enabled((os_log_t)qword_267865070, OS_LOG_TYPE_ERROR)) {
          goto LABEL_18;
        }
        int v8 = 138543362;
        CFStringRef v9 = v4;
LABEL_17:
        _os_log_impl(&dword_215163000, v5, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v8, 0xCu);
LABEL_18:
        if (v4) {
          CFRelease(v4);
        }
        return;
      }
      return;
    }
    _CSRemoveDatabaseFilesAtPath(a1);
    if (CSContinueOnCorruptDB())
    {
      if ((_CSBruteForceDatabaseCorruptionRecovery_cold_1() & 1) == 0) {
LABEL_27:
      }
        _CSBruteForceDatabaseCorruptionRecovery_cold_3();
LABEL_26:
      _CSBruteForceDatabaseCorruptionRecovery_cold_2();
      goto LABEL_27;
    }
    if (os_variant_has_internal_content())
    {
      if (!CSExitOnCorruptDB()) {
        goto LABEL_26;
      }
      if (_MergedGlobals != -1) {
        dispatch_once(&_MergedGlobals, &__block_literal_global_44);
      }
      if (os_log_type_enabled((os_log_t)qword_267865070, OS_LOG_TYPE_ERROR))
      {
        CFStringRef v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"chunk store database corruption: would normally abort here.  Exiting instead");
        if (_MergedGlobals != -1) {
          dispatch_once(&_MergedGlobals, &__block_literal_global_51_0);
        }
        size_t v7 = qword_267865070;
        if (!os_log_type_enabled((os_log_t)qword_267865070, OS_LOG_TYPE_ERROR)) {
          goto LABEL_43;
        }
        int v8 = 138543362;
        CFStringRef v9 = v6;
LABEL_42:
        _os_log_impl(&dword_215163000, v7, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v8, 0xCu);
LABEL_43:
        if (v6) {
          CFRelease(v6);
        }
      }
    }
    else
    {
      if (_MergedGlobals != -1) {
        dispatch_once(&_MergedGlobals, &__block_literal_global_33_1);
      }
      if (os_log_type_enabled((os_log_t)qword_267865070, OS_LOG_TYPE_ERROR))
      {
        CFStringRef v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"exiting due to chunk store database corruption");
        if (_MergedGlobals != -1) {
          dispatch_once(&_MergedGlobals, &__block_literal_global_40);
        }
        size_t v7 = qword_267865070;
        if (!os_log_type_enabled((os_log_t)qword_267865070, OS_LOG_TYPE_ERROR)) {
          goto LABEL_43;
        }
        int v8 = 138543362;
        CFStringRef v9 = v6;
        goto LABEL_42;
      }
    }
    exit(1);
  }
  if (_MergedGlobals != -1) {
    dispatch_once(&_MergedGlobals, &__block_literal_global_4);
  }
  if (os_log_type_enabled((os_log_t)qword_267865070, OS_LOG_TYPE_ERROR))
  {
    CFStringRef v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"chunk store database corruption: retaining contents, isRegistry false");
    if (_MergedGlobals != -1) {
      dispatch_once(&_MergedGlobals, &__block_literal_global_6_2);
    }
    uint64_t v5 = qword_267865070;
    if (!os_log_type_enabled((os_log_t)qword_267865070, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    int v8 = 138543362;
    CFStringRef v9 = v4;
    goto LABEL_17;
  }
}

void _CSRemoveDatabaseFilesAtPath(const char *a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  bzero(__str, 0x400uLL);
  _CSUnlinkAndLog(a1, (uint64_t)"database");
  if (snprintf(__str, 0x400uLL, "%s-journal", a1) <= 0x3FF) {
    _CSUnlinkAndLog(__str, (uint64_t)"journal");
  }
  if (snprintf(__str, 0x400uLL, "%s-wal", a1) <= 0x3FF) {
    _CSUnlinkAndLog(__str, (uint64_t)"wal");
  }
  if (snprintf(__str, 0x400uLL, "%s-shm", a1) <= 0x3FF) {
    _CSUnlinkAndLog(__str, (uint64_t)"shm");
  }
  if (_MergedGlobals != -1) {
    dispatch_once(&_MergedGlobals, &__block_literal_global_72);
  }
  if (os_log_type_enabled((os_log_t)qword_267865070, OS_LOG_TYPE_ERROR))
  {
    CFStringRef v2 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"chunk store database corruption: unlinked database files");
    if (_MergedGlobals != -1) {
      dispatch_once(&_MergedGlobals, &__block_literal_global_78);
    }
    uint64_t v3 = qword_267865070;
    if (os_log_type_enabled((os_log_t)qword_267865070, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      CFStringRef v5 = v2;
      _os_log_impl(&dword_215163000, v3, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v2) {
      CFRelease(v2);
    }
  }
}

void _CSUnlinkAndLog(const char *a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (unlink(a1))
  {
    if (*__error() != 2)
    {
      if (_MergedGlobals != -1) {
        dispatch_once(&_MergedGlobals, &__block_literal_global_81_0);
      }
      uint64_t v4 = qword_267865070;
      if (os_log_type_enabled((os_log_t)qword_267865070, OS_LOG_TYPE_ERROR))
      {
        CFStringRef v5 = __error();
        CFStringRef v6 = strerror(*v5);
        int v7 = *__error();
        int v12 = 136446978;
        uint64_t v13 = a2;
        __int16 v14 = 2080;
        CFTypeRef v15 = a1;
        __int16 v16 = 2082;
        CFStringRef v17 = v6;
        __int16 v18 = 1024;
        int v19 = v7;
        int v8 = "chunk store database corruption: unable to unlink %{public}s (%s): %{public}s (%d)";
        CFStringRef v9 = v4;
        uint32_t v10 = 38;
LABEL_11:
        _os_log_impl(&dword_215163000, v9, OS_LOG_TYPE_ERROR, v8, (uint8_t *)&v12, v10);
      }
    }
  }
  else
  {
    if (_MergedGlobals != -1) {
      dispatch_once(&_MergedGlobals, &__block_literal_global_85);
    }
    uint64_t v11 = qword_267865070;
    if (os_log_type_enabled((os_log_t)qword_267865070, OS_LOG_TYPE_ERROR))
    {
      int v12 = 136446466;
      uint64_t v13 = a2;
      __int16 v14 = 2080;
      CFTypeRef v15 = a1;
      int v8 = "chunk store database corruption: unlinked %{public}s (%s)";
      CFStringRef v9 = v11;
      uint32_t v10 = 22;
      goto LABEL_11;
    }
  }
}

void OUTLINED_FUNCTION_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

uint64_t CKFileDigestArgumentsFileScheme(uint64_t a1)
{
  CFStringRef v1 = _requestCallbacks_4[6 * *(int *)(a1 + 16)];
  if (v1) {
    return v1();
  }
  else {
    return 0;
  }
}

uint64_t CKFileDigestArgumentsFileEncrypted(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 20);
}

uint64_t CKFileDigestArgumentsBoundaryKey(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 16);
  if (v1 >= 2) {
    return _requestCallbacks_4[6 * (int)v1 + 2]();
  }
  else {
    return 0;
  }
}

uint64_t CKFileDigestArgumentsFileKey(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 16);
  if (v1 >= 2) {
    return _requestCallbacks_4[6 * (int)v1 + 3]();
  }
  else {
    return 0;
  }
}

uint64_t _CKFileDigestArgumentsCFFinalize(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 16);
  if (v1) {
    return _requestCallbacks_4[6 * v1 + 5]();
  }
  return result;
}

BOOL _CKFileDigestArgumentsCFEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t _CKFileDigestArgumentsCFCopyFormatDescription(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if (v1) {
    return _requestCallbacks_4[6 * v1 + 4]();
  }
  else {
    return 0;
  }
}

uint64_t _CKFileDigestArgumentsCFCopyDebugDescription(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if (v1) {
    return _requestCallbacks_4[6 * v1 + 4]();
  }
  else {
    return 0;
  }
}

uint64_t CKChunkSignatureSize(unsigned char *a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1 & 0x7F;
  if (v1 == 1 || v1 == 4) {
    return 20;
  }
  if (CK_DEFAULT_LOG_BLOCK_4 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_4, &__block_literal_global_5);
  }
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_4, OS_LOG_TYPE_ERROR))
  {
    CFStringRef v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Unknown chunk signature scheme: 0x%x\n", v1);
    if (CK_DEFAULT_LOG_BLOCK_4 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_4, &__block_literal_global_6_3);
    }
    CFStringRef v5 = CK_DEFAULT_LOG_INTERNAL_4;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      CFStringRef v7 = v4;
      _os_log_impl(&dword_215163000, v5, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v4) {
      CFRelease(v4);
    }
  }
  return 0;
}

os_log_t __CKChunkSignatureSize_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_4 = (uint64_t)result;
  return result;
}

os_log_t __CKChunkSignatureSize_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_4 = (uint64_t)result;
  return result;
}

uint64_t CKChunkSchemeAndSignatureSize(unsigned char *a1)
{
  uint64_t v1 = CKChunkSignatureSize(a1);
  if (v1) {
    return v1 + 1;
  }
  else {
    return 0;
  }
}

uint64_t CKSchemeAndSignatureSize(unsigned char *a1)
{
  uint64_t v1 = CKChunkSignatureSize(a1);
  if (v1) {
    return v1 + 1;
  }
  else {
    return 0;
  }
}

uint64_t CKChunkSignatureAndKeySize(unsigned char *a1)
{
  int v2 = (char)*a1;
  uint64_t v3 = CKChunkSignatureSize(a1);
  if (v2 < 0)
  {
    uint64_t v4 = CKChunkSignatureSize(a1);
    if (v4) {
      uint64_t v5 = v4 + 1;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v6 = CKChunkEncryptionKeySize(&a1[v5]);
    if (v6) {
      uint64_t v7 = v6 + 1;
    }
    else {
      uint64_t v7 = 0;
    }
    v3 += v7;
  }
  return v3;
}

uint64_t CKChunkSchemeAndEncryptionKeySize(unsigned __int8 *a1)
{
  uint64_t v1 = CKChunkEncryptionKeySize(a1);
  if (v1) {
    return v1 + 1;
  }
  else {
    return 0;
  }
}

uint64_t CKChunkSchemeSignatureAndKeySize(unsigned char *a1)
{
  int v2 = (char)*a1;
  uint64_t v3 = CKChunkSignatureSize(a1);
  if (v3) {
    uint64_t v4 = v3 + 1;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v2 < 0)
  {
    uint64_t v5 = CKChunkEncryptionKeySize(&a1[v4]);
    if (v5) {
      v4 += v5 + 1;
    }
    else {
      return 0;
    }
  }
  return v4;
}

uint64_t CKSchemeAndEncryptionKeySize(unsigned __int8 *a1)
{
  uint64_t v1 = CKChunkEncryptionKeySize(a1);
  if (v1) {
    return v1 + 1;
  }
  else {
    return 0;
  }
}

uint64_t CKChunkEncryptionKeySize(unsigned __int8 *a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if ((char)*a1 < 0) {
    CKChunkEncryptionKeySize_cold_1();
  }
  uint64_t v1 = *a1;
  if (v1 == 1) {
    return 16;
  }
  if (v1 == 4) {
    return 32;
  }
  if (CK_DEFAULT_LOG_BLOCK_4 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_4, &__block_literal_global_12_0);
  }
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_4, OS_LOG_TYPE_ERROR))
  {
    CFStringRef v3 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Unknown key scheme: 0x%x\n", v1);
    if (CK_DEFAULT_LOG_BLOCK_4 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_4, &__block_literal_global_18_0);
    }
    uint64_t v4 = CK_DEFAULT_LOG_INTERNAL_4;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      CFStringRef v6 = v3;
      _os_log_impl(&dword_215163000, v4, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v3) {
      CFRelease(v3);
    }
  }
  return 0;
}

os_log_t __CKChunkEncryptionKeySize_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_4 = (uint64_t)result;
  return result;
}

os_log_t __CKChunkEncryptionKeySize_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_4 = (uint64_t)result;
  return result;
}

uint64_t CKSubchunkBlobSize(unsigned __int8 *a1, uint64_t a2)
{
  if (!*a1) {
    return 0;
  }
  unint64_t v2 = (a2 + ((unint64_t)*a1 << 10) - 1) / ((unint64_t)*a1 << 10);
  uint64_t v3 = CKChunkSignatureSize(a1 + 1);
  if (v3) {
    uint64_t v4 = v3 + 1;
  }
  else {
    uint64_t v4 = 0;
  }
  return v4 * v2 + 1;
}

uint64_t CKRegisteredChunkSubchunkBlobSize(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 29)) {
    return 0;
  }
  uint64_t v1 = *(unsigned int *)(a1 + 24);
  unint64_t v2 = (unsigned __int8 *)(a1 + 35 + CKChunkSchemeSignatureAndKeySize((unsigned char *)(a1 + 35)));
  return CKSubchunkBlobSize(v2, v1);
}

unint64_t CKSubchunkMaxLength(unsigned char *a1)
{
  if (!a1 || !*a1) {
    CKSubchunkMaxLength_cold_1();
  }
  return (unint64_t)*a1 << 10;
}

void *CKChunkEncryptionKeyCopy(unsigned __int8 *a1)
{
  uint64_t v2 = CKChunkEncryptionKeySize(a1);
  if (!v2) {
    return 0;
  }
  size_t v3 = v2 + 1;
  uint64_t v4 = malloc_type_malloc(v2 + 1, 0xB3691D78uLL);
  uint64_t v5 = v4;
  if (v4) {
    memcpy(v4, a1, v3);
  }
  return v5;
}

void *CKChunkSignatureCopy(unsigned char *a1)
{
  uint64_t v2 = CKChunkSignatureSize(a1);
  if (!v2) {
    return 0;
  }
  size_t v3 = v2 + 1;
  uint64_t v4 = malloc_type_malloc(v2 + 1, 0x67690609uLL);
  uint64_t v5 = v4;
  if (v4) {
    memcpy(v4, a1, v3);
  }
  return v5;
}

BOOL CKChunkSignaturesEqual(unsigned char *a1, unsigned char *a2)
{
  if (a1 == a2) {
    return 1;
  }
  BOOL result = 0;
  if (a1 && a2)
  {
    uint64_t v5 = CKChunkSignatureSize(a1);
    BOOL v6 = v5 == 0;
    if (v5) {
      size_t v7 = v5 + 1;
    }
    else {
      size_t v7 = 0;
    }
    uint64_t v8 = CKChunkSignatureSize(a2);
    BOOL v9 = v8 + 1 == v7;
    if (!v8) {
      BOOL v9 = v6;
    }
    return v9 && memcmp(a1, a2, v7) == 0;
  }
  return result;
}

BOOL CKChunkKeysEqual(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 == a2) {
    return 1;
  }
  BOOL result = 0;
  if (a1 && a2)
  {
    uint64_t v5 = CKChunkEncryptionKeySize(a1);
    BOOL v6 = v5 == 0;
    if (v5) {
      size_t v7 = v5 + 1;
    }
    else {
      size_t v7 = 0;
    }
    uint64_t v8 = CKChunkEncryptionKeySize(a2);
    BOOL v9 = v8 + 1 == v7;
    if (!v8) {
      BOOL v9 = v6;
    }
    return v9 && memcmp(a1, a2, v7) == 0;
  }
  return result;
}

void *CKChunkSchemeAndSignatureCopyCString(char *a1)
{
  uint64_t v2 = CKChunkSignatureSize(a1);
  if (v2) {
    uint64_t v3 = v2 + 1;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = malloc_type_malloc((2 * v3) | 1, 0x59E232CEuLL);
  CShex_to_string(a1, v3, (uint64_t)v4);
  return v4;
}

void *CKChunkKeySchemeAndSignatureCopyCString(unsigned __int8 *a1)
{
  uint64_t v2 = CKChunkEncryptionKeySize(a1);
  if (v2) {
    uint64_t v3 = v2 + 1;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = malloc_type_malloc((2 * v3) | 1, 0xB2CF8059uLL);
  CShex_to_string((char *)a1, v3, (uint64_t)v4);
  return v4;
}

BOOL CKChunkSignatureIsValidN(unsigned char *a1, uint64_t a2)
{
  BOOL result = 0;
  if (a1 && a2)
  {
    uint64_t v5 = CKChunkSignatureSize(a1);
    if (v5) {
      uint64_t v6 = v5 + 1;
    }
    else {
      uint64_t v6 = 0;
    }
    return v6 == a2 && v5 != 0;
  }
  return result;
}

BOOL CKChunkKeyIsValidN(unsigned __int8 *a1, uint64_t a2)
{
  BOOL result = 0;
  if (a1 && a2)
  {
    uint64_t v5 = CKChunkEncryptionKeySize(a1);
    if (v5) {
      uint64_t v6 = v5 + 1;
    }
    else {
      uint64_t v6 = 0;
    }
    return v6 == a2 && v5 != 0;
  }
  return result;
}

void *CKChunkSignatureCreateWithHexString(char *a1)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  if (ck_buffer_create_with_hex_string(a1, &v8, &v7))
  {
    uint64_t v2 = v7;
    BOOL result = v8;
    if (v8) {
      BOOL v3 = v7 == 0;
    }
    else {
      BOOL v3 = 1;
    }
    if (v3) {
      goto LABEL_14;
    }
    uint64_t v4 = CKChunkSignatureSize(v8);
    if (v4) {
      uint64_t v5 = v4 + 1;
    }
    else {
      uint64_t v5 = 0;
    }
    if (v4) {
      BOOL v6 = v5 == v2;
    }
    else {
      BOOL v6 = 0;
    }
    if (v6) {
      return v8;
    }
  }
  BOOL result = v8;
LABEL_14:
  if (result)
  {
    free(result);
    return 0;
  }
  return result;
}

void *CKChunkKeyCreateWithHexString(char *a1)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  if (ck_buffer_create_with_hex_string(a1, &v8, &v7))
  {
    uint64_t v2 = v7;
    BOOL result = v8;
    if (v8) {
      BOOL v3 = v7 == 0;
    }
    else {
      BOOL v3 = 1;
    }
    if (v3) {
      goto LABEL_14;
    }
    uint64_t v4 = CKChunkEncryptionKeySize((unsigned __int8 *)v8);
    if (v4) {
      uint64_t v5 = v4 + 1;
    }
    else {
      uint64_t v5 = 0;
    }
    if (v4) {
      BOOL v6 = v5 == v2;
    }
    else {
      BOOL v6 = 0;
    }
    if (v6) {
      return v8;
    }
  }
  BOOL result = v8;
LABEL_14:
  if (result)
  {
    free(result);
    return 0;
  }
  return result;
}

void *_CSCopyStoredChunkListForStorageFileID(uint64_t a1, sqlite3_int64 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = (void *)a4;
  BOOL v9 = (void *)a3;
  CFStringRef v35 = 0;
  uint64_t v36 = 0;
  if (*(_DWORD *)(a1 + 104))
  {
    CFErrorRef v10 = CKCreateInternalWrongStoreError((char)"_CSCopyStoredChunkListForStorageFileID", 1, a3, a4, a5, a6, a7, a8);
    uint64_t v11 = 0;
LABEL_9:
    long long v21 = 0;
    goto LABEL_10;
  }
  int v14 = *(_DWORD *)(a1 + 128);
  __darwin_ino64_t v15 = _CSStorageFileInode(a1, a2, 1);
  __int16 v16 = _CSPrepareStatement(a1, @"SELECT ct_rowid, cid, offset, dataLen, timestamp, location FROM CSChunkTable WHERE ft_rowid = ? ORDER BY offset", "SELECT ct_rowid, cid, offset, dataLen, timestamp, location FROM CSChunkTable WHERE ft_rowid = ? ORDER BY offset");
  uint64_t v11 = (uint64_t *)v16;
  if (!v16)
  {
    CFStringRef v19 = @"Could not create prepared sqlite3 statement in %s";
    int v20 = 1;
    goto LABEL_8;
  }
  uint64_t v17 = CS_sqlite3_bind_int64((uint64_t)v16, 1, a2);
  if (v17)
  {
    __int16 v18 = (const char *)v17;
    int v30 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
    CFStringRef v31 = v18;
    CFStringRef v19 = @"sqlite3_bind failed in %s: %s (%d)";
LABEL_6:
    int v20 = (int)v18;
LABEL_8:
    CFErrorRef v10 = CKSQLiteErrorCreateWithFormat(v20, v19, "_CSCopyStoredChunkListForStorageFileID", v30, v31, v32);
    goto LABEL_9;
  }
  uint64_t v33 = v9;
  CFAllocatorRef v34 = v8;
  while (1)
  {
    uint64_t v23 = CS_sqlite3_step(v11);
    if (v23 != 100) {
      break;
    }
    sqlite3_int64 v24 = CS_sqlite3_column_int64((uint64_t)v11, 0);
    uint64_t v25 = CS_sqlite3_column_blob((uint64_t)v11, 1);
    sqlite3_int64 v26 = CS_sqlite3_column_int64((uint64_t)v11, 2);
    int v27 = CS_sqlite3_column_int((uint64_t)v11, 3);
    sqlite3_int64 v28 = CS_sqlite3_column_int64((uint64_t)v11, 4);
    char v29 = CS_sqlite3_column_int((uint64_t)v11, 5);
    if (addStoredChunk((uint64_t)&v35, v14, v15, v24, a2, v26, v27, v28, v29, v25))
    {
      long long v21 = 0;
      CFErrorRef v10 = 0;
      BOOL v9 = v33;
      uint64_t v8 = v34;
      goto LABEL_10;
    }
  }
  __int16 v18 = (const char *)v23;
  BOOL v9 = v33;
  uint64_t v8 = v34;
  if (v23 != 101)
  {
    CFStringRef v31 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
    uint64_t v32 = v18;
    int v30 = (const char *)a2;
    CFStringRef v19 = @"sqlite3_step in %s failed for ft_rowid %lld: %s (%d)";
    goto LABEL_6;
  }
  CFErrorRef v10 = 0;
  long long v21 = v35;
  CFStringRef v35 = 0;
LABEL_10:
  _CSFinishPreparedStatement(v11);
  free(v35);
  if (v9) {
    void *v9 = v36;
  }
  if (v8)
  {
    void *v8 = v10;
  }
  else if (v10)
  {
    CFRelease(v10);
  }
  return v21;
}

uint64_t CSAttemptFirstAidForStorageFile(uint64_t a1, sqlite3_int64 a2, CFErrorRef *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v82 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 104))
  {
    CFErrorRef v9 = CKCreateInternalWrongStoreError((char)"CSAttemptFirstAidForStorageFile", 1, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_3:
    CFErrorRef v10 = 0;
LABEL_4:
    free(v10);
    if (a3)
    {
      uint64_t result = 0;
LABEL_6:
      *a3 = v9;
      return result;
    }
    if (v9) {
      CFRelease(v9);
    }
    return 0;
  }
  if (CK_DEFAULT_LOG_BLOCK_5 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_5, &__block_literal_global_33_2);
  }
  int v14 = CK_DEFAULT_LOG_INTERNAL_5;
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_5, OS_LOG_TYPE_DEBUG))
  {
    buf.dev_t st_dev = 134217984;
    *(void *)&buf.mode_t st_mode = a2;
    _os_log_impl(&dword_215163000, v14, OS_LOG_TYPE_DEBUG, "Validating storage file with ft_rowid %llu", (uint8_t *)&buf, 0xCu);
  }
  bzero(v79, 0x400uLL);
  if (!_CSCreateStoragePath(a1, a2, v79, 0x400uLL))
  {
    uint64_t v25 = CKInternalErrorCreateWithFormat(4u, 0, @"Could not construct path for storage file with ft_rowid %llu", v15, v16, v17, v18, v19, a2);
    goto LABEL_20;
  }
  memset(&buf, 0, sizeof(buf));
  if (stat(v79, &buf))
  {
    if (*__error() == 2)
    {
      uint64_t v25 = CKInternalErrorCreateWithFormat(5u, 0, @"Storage file with ft_rowid %lld is missing", v20, v21, v22, v23, v24, a2);
    }
    else
    {
      int v33 = *__error();
      CFAllocatorRef v34 = __error();
      CFStringRef v35 = strerror(*v34);
      uint64_t v36 = __error();
      uint64_t v25 = CKPOSIXErrorCreateWithFormat(v33, @"stat failed in %s for path \"%s\": %s (%d)", "_CSValidateStorageFile", v79, v35, *v36);
    }
LABEL_20:
    CFErrorRef v9 = v25;
    CFErrorDomain Domain = CFErrorGetDomain(v25);
    if (!CFEqual(Domain, @"com.apple.chunkinglibrary.internal") || CFErrorGetCode(v9) != 5) {
      goto LABEL_3;
    }
    if (v9) {
      CFRelease(v9);
    }
    *(void *)int v79 = 0;
    *(void *)&buf.dev_t st_dev = 0;
    CFStringRef v31 = _CSCopyStoredChunkListForStorageFileID(a1, a2, (uint64_t)v79, (uint64_t)&buf, v27, v28, v29, v30);
    uint64_t v32 = v31;
    if (*(void *)&buf.st_dev)
    {
      free(v31);
      CFErrorRef v10 = 0;
      CFErrorRef v9 = *(CFErrorRef *)&buf.st_dev;
      goto LABEL_4;
    }
    CFErrorRef v10 = malloc_type_malloc(8 * *(void *)v79, 0x100004000313F17uLL);
    char v37 = v79[0];
    if (*(void *)v79)
    {
      unint64_t v38 = 0;
      do
      {
        *((void *)v10 + v38) = *(void *)(CKStoredChunkAtIndex((uint64_t)v32, v38) + 16);
        ++v38;
      }
      while (v38 < *(void *)v79);
    }
    free(v32);
    if (*(unsigned char *)(a1 + 17))
    {
      CFErrorRef v45 = CKInternalErrorCreateWithFormat(6u, 0, @"First aid found %llu inconsistent chunks in storage file with ft_rowid %llu, but chunk store is read-only", v40, v41, v42, v43, v44, a2);
LABEL_34:
      CFErrorRef v9 = v45;
      goto LABEL_4;
    }
    if (*(_DWORD *)(a1 + 104))
    {
      CFErrorRef v46 = CKCreateInternalWrongStoreError((char)"_CSPurgeInvalidStorageFileID", 1, v39, v40, v41, v42, v43, v44);
      CFStringRef v47 = 0;
      goto LABEL_61;
    }
    if (CK_DEFAULT_LOG_BLOCK_5 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_5, &__block_literal_global_45);
    }
    uint64_t v48 = CK_DEFAULT_LOG_INTERNAL_5;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int v79 = 134217984;
      *(void *)&v79[4] = a2;
      _os_log_impl(&dword_215163000, v48, OS_LOG_TYPE_ERROR, "Purging invalid storage file with ft_rowid %llu", v79, 0xCu);
    }
    uint64_t v49 = 0;
    while (1)
    {
      uint64_t v50 = *(void *)(*(void *)(a1 + 264) + v49);
      if (v50)
      {
        if (*(void *)(v50 + 16) == a2) {
          break;
        }
      }
      v49 += 8;
      if (v49 == 40) {
        goto LABEL_47;
      }
    }
    _CSCloseStorageFile(a1, (_DWORD *)v50, 0);
LABEL_47:
    uint64_t v51 = _CSPrepareStatement(a1, @"UPDATE CSStorageFileTable SET ft_status = ? WHERE ft_rowid = ?", "UPDATE CSStorageFileTable SET ft_status = ? WHERE ft_rowid = ?");
    CFStringRef v47 = (uint64_t *)v51;
    if (v51)
    {
      uint64_t v52 = CS_sqlite3_bind_int((uint64_t)v51, 1, 109);
      if (v52 || (uint64_t v52 = CS_sqlite3_bind_int64((uint64_t)v47, 2, a2), v52))
      {
        int v76 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
        uint64_t v77 = v52;
        CFStringRef v53 = @"sqlite3_bind failed in %s: %s (%d)";
LABEL_51:
        int v54 = v52;
LABEL_59:
        CFErrorRef v65 = CKSQLiteErrorCreateWithFormat(v54, v53, "_CSPurgeInvalidStorageFileID", v76, v77);
        goto LABEL_60;
      }
      uint64_t v55 = CS_sqlite3_step(v47);
      if (v55 != 101)
      {
        uint64_t v52 = v55;
        int v76 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
        uint64_t v77 = v52;
        CFStringRef v53 = @"sqlite3_step failed in %s: %s (%d)";
        goto LABEL_51;
      }
      _CSFinishPreparedStatement(v47);
      CFStringRef v56 = (uint64_t *)_CSPrepareStatement(a1, @"SELECT changes()", "SELECT changes()");
      CFStringRef v47 = v56;
      if (v56)
      {
        uint64_t v57 = CS_sqlite3_step(v56);
        if (v57 == 100)
        {
          sqlite3_int64 v58 = CS_sqlite3_column_int64((uint64_t)v47, 0);
          if (v58 != 1)
          {
            sqlite3_int64 v64 = v58;
            if (!v58)
            {
              CFErrorRef v65 = CKInternalErrorCreateWithFormat(3u, 0, @"Storage file with ft_rowid %llu does not exist in database", v59, v60, v61, v62, v63, a2);
LABEL_60:
              CFErrorRef v46 = v65;
LABEL_61:
              _CSFinishPreparedStatement(v47);
              CFErrorRef v9 = CKInternalWrappingErrorCreateWithFormat(8u, v46, 0, @"First aid found %llu inconsistent chunks in storage file with ft_rowid %llu, but could not invalidate storage file", v66, v67, v68, v69, v37);
              if (v46) {
                CFRelease(v46);
              }
              goto LABEL_4;
            }
            if (CK_DEFAULT_LOG_BLOCK_5 != -1) {
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_5, &__block_literal_global_66);
            }
            CFStringRef v70 = CK_DEFAULT_LOG_INTERNAL_5;
            if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_5, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)int v79 = 134218240;
              *(void *)&v79[4] = v64;
              __int16 v80 = 2048;
              sqlite3_int64 v81 = a2;
              _os_log_impl(&dword_215163000, v70, OS_LOG_TYPE_FAULT, "Update appeared to change %lld rows when marking storage file with ft_rowid %llu as missing", v79, 0x16u);
            }
          }
          _CSFinishPreparedStatement(v47);
          _CSFinishPreparedStatement(0);
          CFErrorRef v45 = CKInternalErrorCreateWithFormat(7u, 0, @"First aid found %llu inconsistent chunks in storage file with ft_rowid %llu, and returned database to consistent state", v71, v72, v73, v74, v75, v37);
          goto LABEL_34;
        }
        uint64_t v52 = v57;
        int v76 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
        uint64_t v77 = v52;
        CFStringRef v53 = @"sqlite3_step failed for changes() in %s: %s (%d)";
        goto LABEL_51;
      }
    }
    CFStringRef v53 = @"Could not create prepared sqlite3 statement in %s";
    int v54 = 1;
    goto LABEL_59;
  }
  uint64_t result = 1;
  if (a3)
  {
    CFErrorRef v9 = 0;
    goto LABEL_6;
  }
  return result;
}

uint64_t CSAttemptAutomaticFirstAidForStorageFile(uint64_t a1, sqlite3_int64 a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if ((CKChunkStoreTestFlags(a1) & 4) != 0) {
    return 1;
  }
  CFErrorRef err = 0;
  uint64_t v9 = CSAttemptFirstAidForStorageFile(a1, a2, &err, v4, v5, v6, v7, v8);
  if (v9) {
    goto LABEL_20;
  }
  if (!err) {
    return v9;
  }
  CFErrorDomain Domain = CFErrorGetDomain(err);
  if (CFEqual(Domain, @"com.apple.chunkinglibrary.internal"))
  {
    if (CFErrorGetCode(err) == 7)
    {
      if (CK_DEFAULT_LOG_BLOCK_5 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_5, &__block_literal_global_6);
      }
      uint64_t v11 = CK_DEFAULT_LOG_INTERNAL_5;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_5, OS_LOG_TYPE_ERROR)) {
        goto LABEL_20;
      }
      *(_DWORD *)stat buf = 138412290;
      CFErrorRef v16 = err;
      int v12 = "Automatic first aid found some missing chunks and made the database consistent again: %@";
    }
    else
    {
      if (CK_DEFAULT_LOG_BLOCK_5 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_5, &__block_literal_global_26_1);
      }
      uint64_t v11 = CK_DEFAULT_LOG_INTERNAL_5;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_5, OS_LOG_TYPE_ERROR)) {
        goto LABEL_20;
      }
      *(_DWORD *)stat buf = 138412290;
      CFErrorRef v16 = err;
      int v12 = "Automatic first aid failed: %@";
    }
  }
  else
  {
    if (CK_DEFAULT_LOG_BLOCK_5 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_5, &__block_literal_global_30_0);
    }
    uint64_t v11 = CK_DEFAULT_LOG_INTERNAL_5;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_5, OS_LOG_TYPE_ERROR)) {
      goto LABEL_20;
    }
    *(_DWORD *)stat buf = 138412290;
    CFErrorRef v16 = err;
    int v12 = "Automatic first aid failed: %@";
  }
  _os_log_impl(&dword_215163000, v11, OS_LOG_TYPE_ERROR, v12, buf, 0xCu);
LABEL_20:
  if (err) {
    CFRelease(err);
  }
  return v9;
}

os_log_t __CSAttemptAutomaticFirstAidForStorageFile_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_5 = (uint64_t)result;
  return result;
}

os_log_t __CSAttemptAutomaticFirstAidForStorageFile_block_invoke_23()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_5 = (uint64_t)result;
  return result;
}

os_log_t __CSAttemptAutomaticFirstAidForStorageFile_block_invoke_27()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_5 = (uint64_t)result;
  return result;
}

uint64_t CKStreamCoderCreate(CCCryptorRef **a1, int a2, CFDataRef theData, const __CFData *a4, CFErrorRef *a5)
{
  if (a5) {
    *a5 = 0;
  }
  if (!theData || CFDataGetLength(theData) != 12)
  {
    CFErrorRef v18 = CKErrorCreateWithFormat(6, @"Bad iv");
    goto LABEL_13;
  }
  if (!a4 || CFDataGetLength(a4) != 32)
  {
    CFErrorRef v18 = CKErrorCreateWithFormat(6, @"Bad key");
    goto LABEL_13;
  }
  if ((a2 - 1) >= 2)
  {
    CFErrorRef v18 = CKErrorCreateWithFormat(6, @"Bad mode");
LABEL_13:
    CFErrorRef v19 = v18;
    int v12 = 0;
    if (!a5) {
      goto LABEL_20;
    }
LABEL_14:
    if (v19)
    {
      CFRetain(v19);
      *a5 = v19;
LABEL_21:
      CKBaseRelease(v19);
LABEL_22:
      uint64_t v21 = 0;
      uint64_t result = 0;
      if (!v12) {
        return result;
      }
      goto LABEL_23;
    }
LABEL_20:
    if (!v19) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  uint64_t v10 = CKTypeRegister(&CKStreamCoderGetTypeID_typeID);
  uint64_t result = CKTypeCreateInstance_(0, v10, 0x28uLL);
  if (!result) {
    return result;
  }
  int v12 = (CCCryptorRef *)result;
  CCOperation v13 = a2 != 1;
  *(_DWORD *)(result + 16) = a2;
  *(void *)(result + 32) = 0;
  BytePtr = CFDataGetBytePtr(a4);
  size_t Length = CFDataGetLength(a4);
  uint64_t v16 = CCCryptorCreateWithMode(v13, 0xBu, 0, 0, 0, BytePtr, Length, 0, 0, 0, 0, v12 + 3);
  if (v16)
  {
    CFErrorRef v17 = CKErrorCreateWithFormat(2, @"CCCryptorCreateWithMode %d", v16);
    goto LABEL_19;
  }
  CFDataGetBytePtr(theData);
  CFDataGetLength(theData);
  uint64_t v20 = CCCryptorGCMSetIV();
  if (v20)
  {
    CFErrorRef v17 = CKErrorCreateWithFormat(2, @"CCCryptorGCMSetIV %d", v20);
LABEL_19:
    CFErrorRef v19 = v17;
    if (!a5) {
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  if (a1)
  {
    CFRetain(v12);
    *a1 = v12;
  }
  uint64_t v21 = 1;
LABEL_23:
  CKBaseRelease(v12);
  return v21;
}

uint64_t CKStreamCoderUpdate(uint64_t a1, uint64_t a2, uint64_t a3, CFErrorRef *a4)
{
  if (a4) {
    *a4 = 0;
  }
  int v7 = *(_DWORD *)(a1 + 16);
  if (v7 == 2)
  {
    uint64_t v8 = MEMORY[0x2166B3430](*(void *)(a1 + 24), a2, a3, a2);
    if (v8) {
      goto LABEL_6;
    }
LABEL_10:
    *(void *)(a1 + 32) += a3;
    return 1;
  }
  if (v7 != 1) {
    CKStreamCoderUpdate_cold_1();
  }
  uint64_t v8 = MEMORY[0x2166B3440](*(void *)(a1 + 24), a2, a3, a2);
  if (!v8) {
    goto LABEL_10;
  }
LABEL_6:
  CFErrorRef v9 = CKErrorCreateWithFormat(5, @"CCCryptorGCMDecrypt %d", v8);
  CFErrorRef v10 = v9;
  if (a4 && v9)
  {
    CFRetain(v9);
    *a4 = v10;
LABEL_12:
    CFRelease(v10);
    return 0;
  }
  if (v9) {
    goto LABEL_12;
  }
  return 0;
}

uint64_t CKStreamCoderFinish(uint64_t a1, const __CFData **a2, uint64_t *a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (!a2) {
    CKStreamCoderFinish_cold_1();
  }
  if (!a3) {
    CKStreamCoderFinish_cold_2();
  }
  int v5 = *(_DWORD *)(a1 + 16);
  if (v5 != 2)
  {
    if (v5 != 1) {
      CKStreamCoderFinish_cold_3();
    }
    *a3 = 0;
    *a2 = 0;
    *(void *)bytes = 0;
    uint64_t v16 = 0;
    uint64_t v6 = CCCryptorGCMFinalize();
    if (v6)
    {
      CFErrorRef v7 = CKErrorCreateWithFormat(5, @"CCCryptorGCMFinalize %d", v6, *(void *)bytes, v16, v17);
    }
    else
    {
      CFDataRef v12 = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], bytes, 16);
      if (v12)
      {
        CFDataRef v8 = v12;
        CFRetain(v12);
        *a2 = v8;
        uint64_t v9 = 1;
        goto LABEL_16;
      }
      CFErrorRef v7 = CKErrorCreateWithFormat(2, @"_CKStreamCoderFinishEncrypt", v14, *(void *)bytes, v16, v17);
    }
    CFDataRef v8 = v7;
    if (v7)
    {
      CFRetain(v7);
      uint64_t v9 = 0;
      *a3 = (uint64_t)v8;
LABEL_16:
      CFRelease(v8);
      return v9;
    }
    return 0;
  }
  CFDataRef v10 = *a2;
  if (!*a2) {
    CKStreamCoderFinish_cold_4();
  }
  *a3 = 0;
  CFDataGetBytePtr(v10);
  CFDataGetLength(v10);
  if (!CCCryptorGCMFinalize()) {
    return 1;
  }
  CFErrorRef v11 = CKErrorCreateWithFormat(5, @"Tag failure on decrypt");
  uint64_t v9 = (uint64_t)v11;
  if (v11)
  {
    CFRetain(v11);
    *a3 = v9;
    CFRelease((CFTypeRef)v9);
    return 0;
  }
  return v9;
}

_CCCryptor *_CKStreamCoderCFFinalize(uint64_t a1)
{
  uint64_t result = *(_CCCryptor **)(a1 + 24);
  if (result)
  {
    uint64_t result = (_CCCryptor *)CCCryptorRelease(result);
    *(void *)(a1 + 24) = 0;
  }
  return result;
}

BOOL _CKStreamCoderCFEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

CFStringRef _CKStreamCoderCFCopyFormatDescription(uint64_t a1)
{
  uint64_t v1 = "unknown";
  int v2 = *(_DWORD *)(a1 + 16);
  if (v2 == 2) {
    uint64_t v1 = "decrypt";
  }
  if (v2 == 1) {
    uint64_t v1 = "encrypt";
  }
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"stream %s coder", v1);
}

CFStringRef _CKStreamCoderCFCopyDebugDescription(uint64_t a1)
{
  uint64_t v1 = "unknown";
  int v2 = *(_DWORD *)(a1 + 16);
  if (v2 == 2) {
    uint64_t v1 = "decrypt";
  }
  if (v2 == 1) {
    uint64_t v1 = "encrypt";
  }
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"stream %s coder", v1);
}

void *CSrabin_init()
{
  pthread_once(&CSrabin_init_once, compute_ringing);
  uint64_t v0 = malloc_type_malloc(0x1028uLL, 0x1010040AF70EBD3uLL);
  uint64_t v1 = v0;
  if (v0)
  {
    v0[1026] = 48;
    int v2 = malloc_type_malloc(0x30uLL, 0x9ED84CB6uLL);
    v1[515] = v2;
    if (v2)
    {
      BOOL v3 = v2;
      v1[516] = 0xB15E234BD3792F63;
      memcpy(v1, old_ringing, 0x800uLL);
      memcpy(v1 + 256, new_ringing, 0x800uLL);
      v1[512] = 0;
      v1[514] = v3;
      if (*((int *)v1 + 1026) >= 1)
      {
        uint64_t v4 = 0;
        do
          *(unsigned char *)(v1[515] + v4++) = 0;
        while (v4 < *((int *)v1 + 1026));
      }
    }
    else
    {
      free(v1);
      return 0;
    }
  }
  return v1;
}

uint64_t CSrabin_reset(uint64_t result)
{
  *(void *)(result + 4096) = 0;
  *(void *)(result + 4112) = *(void *)(result + 4120);
  if (*(int *)(result + 4104) >= 1)
  {
    uint64_t v1 = 0;
    do
      *(unsigned char *)(*(void *)(result + 4120) + v1++) = 0;
    while (v1 < *(int *)(result + 4104));
  }
  return result;
}

uint64_t CSrabin_slide8(uint64_t a1, unsigned int a2)
{
  int v2 = *(unsigned char **)(a1 + 4112);
  uint64_t v3 = *v2;
  *int v2 = a2;
  unint64_t v4 = *(void *)(a1 + 4112) - 1;
  *(void *)(a1 + 4112) = v4;
  if (v4 < *(void *)(a1 + 4120)) {
    *(void *)(a1 + 4112) = v4 + *(int *)(a1 + 4104);
  }
  uint64_t v5 = (*(void *)(a1 + 8 * (*(void *)(a1 + 4096) >> 55) + 2048) ^ (a2 | (*(void *)(a1 + 4096) << 8)) ^ *(void *)(a1 + 8 * v3)) & 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 4096) = v5;
  return v5;
}

void CSrabin_free(void *a1)
{
  if (a1)
  {
    int v2 = (void *)a1[515];
    if (v2) {
      free(v2);
    }
    free(a1);
  }
}

void compute_ringing()
{
  for (unint64_t i = 0; i != 256; ++i)
  {
    int v1 = 384;
    unint64_t v2 = i;
    do
    {
      uint64_t v3 = 2 * v2;
      unint64_t v2 = (2 * v2) ^ 0xB15E234BD3792F63;
      if (v3 >= 0) {
        unint64_t v2 = v3;
      }
      --v1;
    }
    while (v1);
    old_ringing[i] = v2;
  }
  for (uint64_t j = 0; j != 256; ++j)
  {
    unint64_t v5 = j << 55;
    int v6 = 8;
    do
    {
      uint64_t v7 = 2 * v5;
      unint64_t v5 = (2 * v5) ^ 0xB15E234BD3792F63;
      if (v7 >= 0) {
        unint64_t v5 = v7;
      }
      --v6;
    }
    while (v6);
    new_ringing[j] = v5;
  }
}

BOOL CKChunkCoderCreate(uint64_t *a1, int a2, const void *a3, unsigned char *a4, unsigned __int8 *a5, unsigned int a6, uint64_t a7)
{
  uint64_t v14 = CKTypeRegister(&CKChunkCoderGetTypeID_typeID);
  uint64_t Instance = CKTypeCreateInstance_(0, v14, 0x48uLL);
  if (Instance)
  {
    uint64_t v16 = Instance;
    *(_DWORD *)(Instance + 16) = a2;
    *(void *)(Instance + 48) = 0;
    *(void *)(Instance + 56) = a6;
    *(void *)(Instance + 64) = a7;
    if (CKChunkDigestResultsCreate((void *)(Instance + 40), a4, a5, a6))
    {
      int v17 = *(_DWORD *)(v16 + 16);
      if (v17 == 3)
      {
        if (a6 != a7) {
          goto LABEL_5;
        }
      }
      else if (!CKChunkCryptorCreate((void *)(v16 + 24), v17 == 1, *(const void **)(v16 + 40), a7))
      {
        goto LABEL_5;
      }
      int v19 = CKChunkSignatureGeneratorCreate((void *)(v16 + 32), a3);
      BOOL v18 = v19 != 0;
      if (a1 && v19)
      {
        CFRetain((CFTypeRef)v16);
        *a1 = v16;
        BOOL v18 = 1;
      }
      goto LABEL_11;
    }
LABEL_5:
    BOOL v18 = 0;
LABEL_11:
    CKBaseRelease((CFTypeRef)v16);
    return v18;
  }
  return 0;
}

uint64_t CKChunkCoderUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(a1 + 16);
  if (v5 == 3)
  {
LABEL_10:
    uint64_t result = CKChunkSignatureGeneratorUpdate(*(void *)(a1 + 32));
    if (!result) {
      return result;
    }
    goto LABEL_11;
  }
  if (v5 == 2)
  {
    uint64_t v8 = *(void *)(a1 + 24);
    if (v8)
    {
      uint64_t result = CKChunkCryptorUpdate(v8);
      if (!result) {
        return result;
      }
    }
    goto LABEL_10;
  }
  if (v5 != 1) {
    CKChunkCoderUpdate_cold_1();
  }
  uint64_t result = CKChunkSignatureGeneratorUpdate(*(void *)(a1 + 32));
  if (result)
  {
    uint64_t v7 = *(void *)(a1 + 24);
    if (!v7 || (uint64_t result = CKChunkCryptorUpdate(v7), result))
    {
LABEL_11:
      *(void *)(a1 + 48) += a3;
      return 1;
    }
  }
  return result;
}

uint64_t CKChunkCoderFinish(void *a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  int v2 = CKChunkSignatureGeneratorFinish(a1[4]);
  uint64_t v3 = (const void *)a1[4];
  if (v3) {
    CKBaseRelease(v3);
  }
  a1[4] = 0;
  if (!v2) {
    return 0;
  }
  if (!CKChunkDigestResultsSignatureAndKeyEqual(a1[5], 0))
  {
    if (CK_DEFAULT_LOG_BLOCK_6 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_6, &__block_literal_global_7);
    }
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_6, OS_LOG_TYPE_DEBUG)) {
      return 0;
    }
    CFStringRef v5 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Chunk digest results differ\n");
    if (CK_DEFAULT_LOG_BLOCK_6 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_6, &__block_literal_global_8_0);
    }
    int v6 = CK_DEFAULT_LOG_INTERNAL_6;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_6, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_24;
    }
    *(_DWORD *)stat buf = 138543362;
    CFStringRef v9 = v5;
LABEL_23:
    _os_log_impl(&dword_215163000, v6, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
LABEL_24:
    if (!v5) {
      return (uint64_t)v5;
    }
    CFRelease(v5);
    return 0;
  }
  uint64_t v4 = a1[3];
  if (v4 && !CKChunkCryptorFinish(v4)) {
    return 0;
  }
  if (a1[6] != a1[8])
  {
    if (CK_DEFAULT_LOG_BLOCK_6 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_6, &__block_literal_global_12_1);
    }
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_6, OS_LOG_TYPE_DEBUG)) {
      return 0;
    }
    CFStringRef v5 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Not enough bytes tranversed coder\n");
    if (CK_DEFAULT_LOG_BLOCK_6 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_6, &__block_literal_global_19_1);
    }
    int v6 = CK_DEFAULT_LOG_INTERNAL_6;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_6, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_24;
    }
    *(_DWORD *)stat buf = 138543362;
    CFStringRef v9 = v5;
    goto LABEL_23;
  }
  return 1;
}

os_log_t __CKChunkCoderFinish_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_6 = (uint64_t)result;
  return result;
}

os_log_t __CKChunkCoderFinish_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_6 = (uint64_t)result;
  return result;
}

os_log_t __CKChunkCoderFinish_block_invoke_9()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_6 = (uint64_t)result;
  return result;
}

os_log_t __CKChunkCoderFinish_block_invoke_2_16()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_6 = (uint64_t)result;
  return result;
}

void _CKChunkCoderCFFinalize(void *a1)
{
  int v2 = (const void *)a1[3];
  if (v2) {
    CKBaseRelease(v2);
  }
  a1[3] = 0;
  uint64_t v3 = (const void *)a1[4];
  if (v3) {
    CKBaseRelease(v3);
  }
  a1[4] = 0;
  uint64_t v4 = (const void *)a1[5];
  if (v4) {
    CKBaseRelease(v4);
  }
  a1[5] = 0;
}

BOOL _CKChunkCoderCFEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

CFStringRef _CKChunkCoderCFCopyFormatDescription(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 16) - 1;
  if (v1 > 2) {
    int v2 = "unknown";
  }
  else {
    int v2 = off_264235170[v1];
  }
  CFStringRef v3 = CFCopyDescription(*(CFTypeRef *)(a1 + 40));
  CFStringRef v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"chunk %s coder expected %@ ", v2, v3);
  if (v3) {
    CFRelease(v3);
  }
  return v4;
}

uint64_t CSCopyData(uint64_t a1, uint64_t a2, uint64_t a3, int64_t a4)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (a3 >= a4) {
    int64_t v7 = a4;
  }
  else {
    int64_t v7 = a3;
  }
  uint64_t v8 = malloc_type_malloc(v7, 0x6D3E1D69uLL);
  if (!v8) {
    return -1;
  }
  CFStringRef v9 = v8;
  if (a3 < 1)
  {
    uint64_t v10 = 0;
    goto LABEL_41;
  }
  uint64_t v10 = 0;
  while (1)
  {
    ssize_t v11 = read(a1, v9, v7);
    if (v7 != v11)
    {
      ssize_t v14 = v11;
      if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_8);
      }
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
      {
        CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        uint64_t v16 = *__error();
        int v17 = __error();
        BOOL v18 = strerror(*v17);
        CFStringRef v19 = CFStringCreateWithFormat(v15, 0, @"read failed (read %ld bytes of requested %lld bytes) for fd:%d : %d (%s)\n", v14, v7, a1, v16, v18);
        if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_6_4);
        }
        uint64_t v20 = CK_DEFAULT_LOG_INTERNAL_7;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)stat buf = 138543362;
          CFStringRef v27 = v19;
          goto LABEL_38;
        }
        goto LABEL_39;
      }
      goto LABEL_41;
    }
    if (a2 == -1) {
      goto LABEL_11;
    }
    ssize_t v12 = write(a2, v9, v7);
    if (v12 < 0) {
      break;
    }
    ssize_t v13 = v12;
    if (v7 != v12)
    {
      if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_21_0);
      }
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
      {
        CFStringRef v19 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"write failed for fd:%d, %lld != %lld", a2, v13, v7);
        if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_28_1);
        }
        uint64_t v20 = CK_DEFAULT_LOG_INTERNAL_7;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)stat buf = 138543362;
          CFStringRef v27 = v19;
LABEL_38:
          _os_log_impl(&dword_215163000, v20, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
        }
        goto LABEL_39;
      }
      goto LABEL_41;
    }
LABEL_11:
    v10 += v7;
    if (a3 - v10 < v7) {
      int64_t v7 = a3 - v10;
    }
    if (a3 <= v10) {
      goto LABEL_41;
    }
  }
  if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_10_1);
  }
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
  {
    CFAllocatorRef v21 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    uint64_t v22 = *__error();
    uint64_t v23 = __error();
    uint64_t v24 = strerror(*v23);
    CFStringRef v19 = CFStringCreateWithFormat(v21, 0, @"write failed for fd:%d, %d (%s)", a2, v22, v24);
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_17_1);
    }
    uint64_t v20 = CK_DEFAULT_LOG_INTERNAL_7;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 138543362;
      CFStringRef v27 = v19;
      goto LABEL_38;
    }
LABEL_39:
    if (v19) {
      CFRelease(v19);
    }
  }
LABEL_41:
  free(v9);
  return v10;
}

os_log_t __CSCopyData_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __CSCopyData_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __CSCopyData_block_invoke_7()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __CSCopyData_block_invoke_2_14()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __CSCopyData_block_invoke_18()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __CSCopyData_block_invoke_2_25()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

uint64_t idIsNull(unsigned char *a1)
{
  if ((int)CKSchemeAndSignatureSize(a1) < 2) {
    return 1;
  }
  uint64_t v3 = 1;
  do
  {
    BOOL v2 = a1[v3] == 0;
    if (a1[v3]) {
      break;
    }
    ++v3;
  }
  while (v3 < (int)CKSchemeAndSignatureSize(a1));
  return v2;
}

uint64_t CShex_to_string(char *a1, uint64_t a2, uint64_t a3)
{
  if (!a1) {
    return 0;
  }
  for (uint64_t i = 0; a2; --a2)
  {
    CFStringRef v4 = (unsigned char *)(a3 + i);
    unsigned char *v4 = CShex_to_string_hex[(unint64_t)*a1 >> 4];
    char v5 = *a1++;
    i += 2;
    v4[1] = CShex_to_string_hex[v5 & 0xF];
  }
  *(unsigned char *)(a3 + i) = 0;
  return a3;
}

uint64_t ck_buffer_create_with_hex_string(char *__s, void *a2, void *a3)
{
  if (a2) {
    *a2 = 0;
  }
  if (a3) {
    *a3 = 0;
  }
  if (!__s) {
    return 0;
  }
  size_t v6 = strlen(__s);
  uint64_t result = 0;
  if (v6)
  {
    if ((v6 & 1) == 0)
    {
      uint64_t result = (uint64_t)malloc_type_malloc(v6 >> 1, 0x494CFE4AuLL);
      if (result)
      {
        int v8 = *__s;
        if (*__s)
        {
          int v9 = 0;
          uint64_t v10 = __s + 2;
          ssize_t v11 = (unsigned char *)result;
          do
          {
            int v12 = v8 - 48;
            unsigned int v13 = (v8 - 48);
            unsigned int v14 = (v8 - 97);
            if ((v8 - 65) < 6u) {
              int v9 = v8 - 55;
            }
            int v15 = v8 - 87;
            if (v14 <= 5) {
              int v9 = v15;
            }
            if (v13 < 0xA) {
              int v9 = v12;
            }
            int v16 = 16 * v9;
            int v17 = *(v10 - 1);
            unsigned int v18 = v17 - 48;
            unsigned int v19 = v17 - 97;
            if ((v17 - 65) <= 5) {
              int v20 = (v17 - 55) | v16;
            }
            else {
              int v20 = v16;
            }
            int v21 = (v17 - 87) | v16;
            if (v19 > 5) {
              int v21 = v20;
            }
            int v9 = v18 | v16;
            if (v18 > 9) {
              int v9 = v21;
            }
            *v11++ = v9;
            int v22 = *v10;
            v10 += 2;
            int v8 = v22;
          }
          while (v22);
        }
        if (a2) {
          *a2 = result;
        }
        if (a3) {
          *a3 = (v6 >> 1);
        }
        return 1;
      }
    }
  }
  return result;
}

CFDataRef ck_cfdata_create_with_hexstring(char *a1)
{
  CFIndex v4 = 0;
  char v5 = 0;
  int v1 = ck_buffer_create_with_hex_string(a1, &v5, &v4);
  CFDataRef result = 0;
  if (v1)
  {
    if (v5) {
      BOOL v3 = v4 == 0;
    }
    else {
      BOOL v3 = 1;
    }
    if (!v3) {
      return CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], v5, v4, (CFAllocatorRef)*MEMORY[0x263EFFB18]);
    }
  }
  return result;
}

CFStringRef ck_cfstring_create_hex_with_data(const __CFData *a1)
{
  CFIndex Length = CFDataGetLength(a1);
  CFStringRef result = (CFStringRef)malloc_type_malloc((2 * Length) | 1, 0xBE1BFCEuLL);
  if (result)
  {
    CFIndex v4 = (const char *)result;
    BytePtr = (char *)CFDataGetBytePtr(a1);
    CShex_to_string(BytePtr, Length, (uint64_t)v4);
    size_t v6 = strlen(v4);
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB18];
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    return CFStringCreateWithBytesNoCopy(v8, (const UInt8 *)v4, v6, 0x600u, 0, v7);
  }
  return result;
}

void *createPathFromUrl(const __CFURL *a1)
{
  if (!a1) {
    return 0;
  }
  BOOL v2 = malloc_type_malloc(0x400uLL, 0xFDBA7550uLL);
  if (v2 && !CFURLGetFileSystemRepresentation(a1, 1u, (UInt8 *)v2, 1024))
  {
    free(v2);
    return 0;
  }
  return v2;
}

void printUUID(uint64_t a1)
{
  uint64_t v1 = a1;
  printNbytes((uint64_t)&v1, 16);
}

void printNbytes(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  bzero(v10, 0x401uLL);
  if (a2)
  {
    uint64_t v4 = 0;
    char v5 = v10;
    do
    {
      if (v4 == 512) {
        break;
      }
      sprintf(v5, "%02x", *(unsigned __int8 *)(a1 + v4++));
      v5 += 2;
    }
    while (a2 != v4);
  }
  if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_32);
  }
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
  {
    CFStringRef v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"%s\n", v10);
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_38);
    }
    CFAllocatorRef v7 = CK_DEFAULT_LOG_INTERNAL_7;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)stat buf = 138543362;
      CFStringRef v9 = v6;
      _os_log_impl(&dword_215163000, v7, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
    }
    if (v6) {
      CFRelease(v6);
    }
  }
}

os_log_t __printNbytes_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printNbytes_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

void printSignature(unsigned __int8 *a1)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v2 = CKSchemeAndSignatureSize(a1);
  size_t v3 = (2 * v2) | 1;
  uint64_t v4 = (char *)malloc_type_malloc(v3, 0xB73937BFuLL);
  if (v4)
  {
    char v5 = v4;
    int v6 = (char)*a1;
    uint64_t v7 = 0;
    if (v2)
    {
      CFAllocatorRef v8 = (char *)a1;
      uint64_t v9 = v2;
      do
      {
        uint64_t v10 = &v4[v7];
        *uint64_t v10 = CShex_to_string_hex[(unint64_t)*v8 >> 4];
        char v11 = *v8++;
        v7 += 2;
        v10[1] = CShex_to_string_hex[v11 & 0xF];
        --v9;
      }
      while (v9);
    }
    v4[v7] = 0;
    if (v6 < 0)
    {
      int v15 = &a1[v2];
      uint64_t v16 = CKSchemeAndEncryptionKeySize(v15);
      int v17 = malloc_type_malloc(v3, 0x5DE3CB9AuLL);
      if (!v17) {
        return;
      }
      unsigned int v14 = v17;
      unsigned int v18 = v17;
      if (v16)
      {
        unsigned int v18 = v17;
        do
        {
          *unsigned int v18 = CShex_to_string_hex[(unint64_t)*v15 >> 4];
          char v19 = *v15++;
          v18[1] = CShex_to_string_hex[v19 & 0xF];
          v18 += 2;
          --v16;
        }
        while (v16);
      }
      *unsigned int v18 = 0;
      if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_41_0);
      }
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
      {
        CFStringRef v20 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"signature:%s, key:%s\n", v5, v14);
        if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_47);
        }
        int v21 = CK_DEFAULT_LOG_INTERNAL_7;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)stat buf = 138543362;
          CFStringRef v23 = v20;
          _os_log_impl(&dword_215163000, v21, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
        }
        if (v20) {
          CFRelease(v20);
        }
      }
      free(v5);
    }
    else
    {
      if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_51_1);
      }
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
      {
        CFStringRef v12 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"signature:%s\n", v5);
        if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_58);
        }
        unsigned int v13 = CK_DEFAULT_LOG_INTERNAL_7;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)stat buf = 138543362;
          CFStringRef v23 = v12;
          _os_log_impl(&dword_215163000, v13, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
        }
        if (v12) {
          CFRelease(v12);
        }
      }
      unsigned int v14 = v5;
    }
    free(v14);
  }
}

os_log_t __printSignature_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printSignature_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printSignature_block_invoke_48()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printSignature_block_invoke_2_55()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

void printChunk(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  bzero(__str, 0x800uLL);
  unint64_t v11 = CKSchemeAndSignatureSize((unsigned char *)(a1 + 12));
  if (v11 <= 1) {
    uint64_t v12 = 1;
  }
  else {
    uint64_t v12 = v11;
  }
  unsigned int v13 = malloc_type_calloc((2 * v12) | 1, 1uLL, 0x79B5AE2BuLL);
  uint64_t v14 = 0;
  int v15 = v13;
  do
  {
    *int v15 = CShex_to_string_hex[(unint64_t)*(unsigned __int8 *)(a1 + v14 + 12) >> 4];
    v15[1] = CShex_to_string_hex[*(unsigned char *)(a1 + v14++ + 12) & 0xF];
    v15 += 2;
  }
  while (v12 != v14);
  *int v15 = 0;
  if (a2) {
    vsnprintf(__str, 0x800uLL, a2, &a9);
  }
  if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_61_1);
  }
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
  {
    uint64_t v16 = __str;
    if (!a2) {
      uint64_t v16 = (char *)&unk_2151AE79A;
    }
    CFStringRef v17 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"%soffset: %llu, length: %u, signature: %s\n", v16, *(void *)a1, *(unsigned int *)(a1 + 8), v13);
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_68);
    }
    unsigned int v18 = CK_DEFAULT_LOG_INTERNAL_7;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 138543362;
      CFStringRef v20 = v17;
      _os_log_impl(&dword_215163000, v18, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v17) {
      CFRelease(v17);
    }
  }
  free(v13);
}

os_log_t __printChunk_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printChunk_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

void printChunkReference(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_71);
  }
  BOOL v2 = os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR);
  size_t v3 = (CFAllocatorRef *)MEMORY[0x263EFFB08];
  if (v2)
  {
    CFStringRef v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"\tChunkReference at %p:\n", a1);
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_77_1);
    }
    char v5 = CK_DEFAULT_LOG_INTERNAL_7;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 138543362;
      CFStringRef v11 = v4;
      _os_log_impl(&dword_215163000, v5, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v4) {
      CFRelease(v4);
    }
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_81_1);
    }
  }
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
  {
    CFStringRef v6 = CFStringCreateWithFormat(*v3, 0, @"\tChunkReference token %llu:\n", *(void *)a1);
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_88_0);
    }
    uint64_t v7 = CK_DEFAULT_LOG_INTERNAL_7;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 138543362;
      CFStringRef v11 = v6;
      _os_log_impl(&dword_215163000, v7, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v6) {
      CFRelease(v6);
    }
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_92_1);
    }
  }
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
  {
    CFStringRef v8 = CFStringCreateWithFormat(*v3, 0, @"\tChunkReference length %u:\n", *(unsigned int *)(a1 + 8));
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_99);
    }
    uint64_t v9 = CK_DEFAULT_LOG_INTERNAL_7;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 138543362;
      CFStringRef v11 = v8;
      _os_log_impl(&dword_215163000, v9, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v8) {
      CFRelease(v8);
    }
  }
}

os_log_t __printChunkReference_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printChunkReference_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printChunkReference_block_invoke_78()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printChunkReference_block_invoke_2_85()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printChunkReference_block_invoke_89()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printChunkReference_block_invoke_2_96()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

void printStoredChunk(unsigned int *a1)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_102);
  }
  BOOL v2 = os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR);
  size_t v3 = (CFAllocatorRef *)MEMORY[0x263EFFB08];
  if (v2)
  {
    CFStringRef v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"\tStoredChunk at %p:\n\tStoredChunk ", a1);
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_108_0);
    }
    char v5 = CK_DEFAULT_LOG_INTERNAL_7;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 138543362;
      CFStringRef v25 = v4;
      _os_log_impl(&dword_215163000, v5, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v4) {
      CFRelease(v4);
    }
  }
  printSignature((unsigned __int8 *)a1 + 56);
  if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_112);
  }
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
  {
    CFStringRef v6 = CFStringCreateWithFormat(*v3, 0, @"\tStoredChunk volume info: ");
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_119);
    }
    uint64_t v7 = CK_DEFAULT_LOG_INTERNAL_7;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 138543362;
      CFStringRef v25 = v6;
      _os_log_impl(&dword_215163000, v7, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v6) {
      CFRelease(v6);
    }
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_123);
    }
  }
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
  {
    CFStringRef v8 = CFStringCreateWithFormat(*v3, 0, @"\tStoredChunk device: %d\n", *a1);
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_130);
    }
    uint64_t v9 = CK_DEFAULT_LOG_INTERNAL_7;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 138543362;
      CFStringRef v25 = v8;
      _os_log_impl(&dword_215163000, v9, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v8) {
      CFRelease(v8);
    }
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_134);
    }
  }
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
  {
    CFStringRef v10 = CFStringCreateWithFormat(*v3, 0, @"\tStoredChunk inode: %lld\n", *(void *)(a1 + 1));
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_141);
    }
    CFStringRef v11 = CK_DEFAULT_LOG_INTERNAL_7;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 138543362;
      CFStringRef v25 = v10;
      _os_log_impl(&dword_215163000, v11, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v10) {
      CFRelease(v10);
    }
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_145_0);
    }
  }
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
  {
    CFStringRef v12 = CFStringCreateWithFormat(*v3, 0, @"\tStoredChunk stgPath: 0x%08x\n", a1[3]);
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_152);
    }
    unsigned int v13 = CK_DEFAULT_LOG_INTERNAL_7;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 138543362;
      CFStringRef v25 = v12;
      _os_log_impl(&dword_215163000, v13, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v12) {
      CFRelease(v12);
    }
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_156);
    }
  }
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
  {
    CFStringRef v14 = CFStringCreateWithFormat(*v3, 0, @"\tStoredChunk token: %lld\n", *((void *)a1 + 2));
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_163_0);
    }
    int v15 = CK_DEFAULT_LOG_INTERNAL_7;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 138543362;
      CFStringRef v25 = v14;
      _os_log_impl(&dword_215163000, v15, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v14) {
      CFRelease(v14);
    }
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_167_0);
    }
  }
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
  {
    CFStringRef v16 = CFStringCreateWithFormat(*v3, 0, @"\tStoredChunk offset: %lld\n", *((void *)a1 + 3));
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_174);
    }
    CFStringRef v17 = CK_DEFAULT_LOG_INTERNAL_7;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 138543362;
      CFStringRef v25 = v16;
      _os_log_impl(&dword_215163000, v17, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v16) {
      CFRelease(v16);
    }
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_178);
    }
  }
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
  {
    CFStringRef v18 = CFStringCreateWithFormat(*v3, 0, @"\tStoredChunk length: %d\n", a1[10]);
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_185_2);
    }
    char v19 = CK_DEFAULT_LOG_INTERNAL_7;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 138543362;
      CFStringRef v25 = v18;
      _os_log_impl(&dword_215163000, v19, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v18) {
      CFRelease(v18);
    }
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_189_1);
    }
  }
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
  {
    CFStringRef v20 = CFStringCreateWithFormat(*v3, 0, @"\tStoredChunk location: %c\n", *((char *)a1 + 52));
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_196_0);
    }
    int v21 = CK_DEFAULT_LOG_INTERNAL_7;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 138543362;
      CFStringRef v25 = v20;
      _os_log_impl(&dword_215163000, v21, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v20) {
      CFRelease(v20);
    }
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_200_0);
    }
  }
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
  {
    CFStringRef v22 = CFStringCreateWithFormat(*v3, 0, @"\tStoredChunk data: ");
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_207);
    }
    CFStringRef v23 = CK_DEFAULT_LOG_INTERNAL_7;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 138543362;
      CFStringRef v25 = v22;
      _os_log_impl(&dword_215163000, v23, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v22) {
      CFRelease(v22);
    }
  }
}

os_log_t __printStoredChunk_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printStoredChunk_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printStoredChunk_block_invoke_109()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printStoredChunk_block_invoke_2_116()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printStoredChunk_block_invoke_120()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printStoredChunk_block_invoke_2_127()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printStoredChunk_block_invoke_131()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printStoredChunk_block_invoke_2_138()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printStoredChunk_block_invoke_142()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printStoredChunk_block_invoke_2_149()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printStoredChunk_block_invoke_153()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printStoredChunk_block_invoke_2_160()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printStoredChunk_block_invoke_164()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printStoredChunk_block_invoke_2_171()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printStoredChunk_block_invoke_175()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printStoredChunk_block_invoke_2_182()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printStoredChunk_block_invoke_186()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printStoredChunk_block_invoke_2_193()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printStoredChunk_block_invoke_197()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printStoredChunk_block_invoke_2_204()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

void printSourceChunk(unsigned int *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  printSignature((unsigned __int8 *)a1 + 84);
  if (*((void *)a1 + 1))
  {
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_220);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
    {
      CFStringRef v2 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"itemID:%lld\n", *(void *)a1);
      if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_227_1);
      }
      size_t v3 = CK_DEFAULT_LOG_INTERNAL_7;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_17;
      }
      *(_DWORD *)stat buf = 138543362;
      CFStringRef v10 = v2;
LABEL_16:
      _os_log_impl(&dword_215163000, v3, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
LABEL_17:
      if (v2) {
        CFRelease(v2);
      }
      if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_231);
      }
    }
  }
  else
  {
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_210);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
    {
      CFStringRef v2 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"fd:%d, slot_sz:%u\n", *a1, a1[1]);
      if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_216);
      }
      size_t v3 = CK_DEFAULT_LOG_INTERNAL_7;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_17;
      }
      *(_DWORD *)stat buf = 138543362;
      CFStringRef v10 = v2;
      goto LABEL_16;
    }
  }
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
  {
    CFStringRef v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"offset:0x%llx, size:0x%x(%u), sequence:%llu, stored:%u, retain:%u\n", *((void *)a1 + 9), a1[20], a1[20], *((void *)a1 + 2), *((unsigned __int8 *)a1 + 24), *((unsigned __int8 *)a1 + 25));
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_238);
    }
    char v5 = CK_DEFAULT_LOG_INTERNAL_7;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)stat buf = 138543362;
      CFStringRef v10 = v4;
      _os_log_impl(&dword_215163000, v5, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
    }
    if (v4) {
      CFRelease(v4);
    }
  }
  uint64_t v6 = *((void *)a1 + 1);
  if (v6)
  {
    unsigned int v7 = a1[20];
    if (v7 >= 0x14) {
      uint64_t v8 = 20;
    }
    else {
      uint64_t v8 = v7;
    }
    printNbytes(v6, v8);
  }
}

os_log_t __printSourceChunk_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printSourceChunk_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printSourceChunk_block_invoke_217()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printSourceChunk_block_invoke_2_224()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printSourceChunk_block_invoke_228()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printSourceChunk_block_invoke_2_235()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

void printRegisteredChunk(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_241_0);
  }
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
  {
    CFStringRef v2 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"RegisteredChunk: itemID:%lld, offset:0x%llx, size:0x%x(%u), location:%c\n", *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned int *)(a1 + 24), *(unsigned int *)(a1 + 24), *(char *)(a1 + 28));
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_247_0);
    }
    size_t v3 = CK_DEFAULT_LOG_INTERNAL_7;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)stat buf = 138543362;
      CFStringRef v5 = v2;
      _os_log_impl(&dword_215163000, v3, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
    }
    if (v2) {
      CFRelease(v2);
    }
  }
  printSignature((unsigned __int8 *)(a1 + 35));
}

os_log_t __printRegisteredChunk_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printRegisteredChunk_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

void printRegisteredChunkList(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  unsigned int v4 = CKRegisteredChunkSize(a1);
  if (a2)
  {
    uint64_t v5 = v4;
    do
    {
      printRegisteredChunk(v3);
      printNbytes(v3, v5);
      v3 += v5;
      --a2;
    }
    while (a2);
  }
}

uint64_t CKRegisteredChunkSize(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    CFStringRef v2 = (unsigned char *)(result + 35);
    int v3 = CKSignatureAndKeySize(result + 35);
    if (v3) {
      int v4 = v3 + 36;
    }
    else {
      int v4 = 0;
    }
    LODWORD(v5) = *(unsigned __int8 *)(v1 + 29);
    if (*(unsigned char *)(v1 + 29))
    {
      uint64_t v5 = *(unsigned __int8 *)(v1 + (v3 + 1) + 35);
      if (*(unsigned char *)(v1 + (v3 + 1) + 35))
      {
        unint64_t v6 = vcvtps_u32_f32((float)*(unsigned int *)(v1 + 24) / (float)(unint64_t)(v5 << 10));
        if (v6 && (uint64_t v7 = CKChunkSchemeSignatureAndKeySize(v2)) != 0) {
          LODWORD(v5) = CKChunkSchemeAndSignatureSize(&v2[v7 + 1]) * v6 + 1;
        }
        else {
          LODWORD(v5) = 0;
        }
      }
    }
    return (v5 + v4);
  }
  return result;
}

CFNumberRef ck_copy_cfnumber_from_cftype_using_description(uint64_t a1, const __CFString *a2, CFTypeRef cf)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (!a2) {
    goto LABEL_31;
  }
  CFTypeID TypeID = CFNumberGetTypeID();
  if (TypeID == CFGetTypeID(a2))
  {
    CFRetain(a2);
    return (CFNumberRef)a2;
  }
  CFTypeID v8 = CFBooleanGetTypeID();
  if (v8 == CFGetTypeID(a2))
  {
    *(void *)long long valuePtr = CFBooleanGetValue((CFBooleanRef)a2);
    return CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberCFIndexType, valuePtr);
  }
  CFTypeID v9 = CFStringGetTypeID();
  if (v9 != CFGetTypeID(a2))
  {
    CFTypeID v17 = CFGetTypeID(a2);
    CFStringRef v18 = CFCopyTypeIDDescription(v17);
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_263_0);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v19 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Unable to recognized type id '%@' for BOOLean decoding for key '%@'.", v18, a1);
      if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_270_1);
      }
      CFStringRef v20 = CK_DEFAULT_LOG_INTERNAL_7;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long valuePtr = 138543362;
        *(void *)&valuePtr[4] = v19;
        _os_log_impl(&dword_215163000, v20, OS_LOG_TYPE_ERROR, "%{public}@", valuePtr, 0xCu);
      }
      if (v19) {
        CFRelease(v19);
      }
    }
    if (!v18) {
      goto LABEL_31;
    }
    CFStringRef v16 = v18;
LABEL_30:
    CFRelease(v16);
LABEL_31:
    if (!cf) {
      return 0;
    }
    CFRetain(cf);
    return (CFNumberRef)cf;
  }
  CFLocaleRef v10 = CFLocaleCreate(0, @"en_US");
  if (!v10
    || (CFLocaleRef v11 = v10,
        CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x263EFFB08],
        unsigned int v13 = CFNumberFormatterCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], v10, kCFNumberFormatterNoStyle),
        CFRelease(v11),
        !v13)
    || (CFNumberRef NumberFromString = CFNumberFormatterCreateNumberFromString(v12, v13, a2, 0, 1uLL),
        CFRelease(v13),
        !NumberFromString))
  {
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_253_0);
    }
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR)) {
      goto LABEL_31;
    }
    CFStringRef v14 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Option %@ had CFStringRef \"%@\" but couldn't parse as a number.", a1, a2);
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_259_1);
    }
    int v15 = CK_DEFAULT_LOG_INTERNAL_7;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long valuePtr = 138543362;
      *(void *)&valuePtr[4] = v14;
      _os_log_impl(&dword_215163000, v15, OS_LOG_TYPE_ERROR, "%{public}@", valuePtr, 0xCu);
    }
    if (!v14) {
      goto LABEL_31;
    }
    CFStringRef v16 = v14;
    goto LABEL_30;
  }
  return NumberFromString;
}

os_log_t __ck_copy_cfnumber_from_cftype_using_description_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __ck_copy_cfnumber_from_cftype_using_description_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __ck_copy_cfnumber_from_cftype_using_description_block_invoke_260()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __ck_copy_cfnumber_from_cftype_using_description_block_invoke_2_267()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

uint64_t ck_get_int32_from_cftype_using_description(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  CFNumberRef v4 = ck_copy_cfnumber_from_cftype_using_description(a1, a2, 0);
  if (v4)
  {
    CFNumberRef v5 = v4;
    unsigned int valuePtr = 0;
    if (!CFNumberGetValue(v4, kCFNumberSInt32Type, &valuePtr)) {
      unsigned int valuePtr = a3;
    }
    CFRelease(v5);
    return valuePtr;
  }
  return a3;
}

uint64_t CKEncryptData(const void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = 0;
  CFTypeRef cf = 0;
  if (!a4 || !a1 || !a2 || !a3) {
    return v4;
  }
  int v8 = CKCalculateChunkSignatureAndEncryptionKey(a2, a3, a1, &cf);
  CFTypeRef v9 = cf;
  if (!v8 || (int v10 = doEncrypt(a2, a3, cf, a3), v9 = cf, !v10))
  {
    uint64_t v4 = 0;
    if (!v9) {
      return v4;
    }
LABEL_12:
    CFRelease(v9);
    return v4;
  }
  if (cf)
  {
    CFRetain(cf);
    CFTypeRef v9 = cf;
  }
  *a4 = v9;
  uint64_t v4 = 1;
  if (v9) {
    goto LABEL_12;
  }
  return v4;
}

uint64_t CKCalculateChunkSignatureAndEncryptionKey(uint64_t a1, uint64_t a2, const void *a3, void *a4)
{
  CFTypeRef v7 = 0;
  if (a4) {
    *a4 = 0;
  }
  if (CKChunkSignatureGeneratorCreate(&v7, a3)
    && (CKChunkSignatureGeneratorUpdate((uint64_t)v7), CKChunkSignatureGeneratorFinish((uint64_t)v7)))
  {
    if (v7) {
      CKBaseRelease(v7);
    }
    CFTypeRef v7 = 0;
    if (!a4) {
      return 1;
    }
    CKBaseRetain(0);
    *a4 = 0;
    uint64_t v5 = 1;
  }
  else
  {
    uint64_t v5 = 0;
  }
  if (v7) {
    CKBaseRelease(v7);
  }
  return v5;
}

BOOL CKDecryptData(uint64_t a1, uint64_t a2, const void *a3)
{
  BOOL result = 0;
  if (a1 && a2)
  {
    if (a3) {
      return doDecrypt(a1, a2, a3, a2) != 0;
    }
  }
  return result;
}

uint64_t getFileSignatureCacheBlob(void *a1, const __CFData **a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  *a2 = 0;
  CFMutableDataRef theData = 0;
  uint64_t v3 = a1[13];
  uint64_t CacheBlob = getCacheBlob(a1, (uint64_t)"com.apple.cscachefs", &theData);
  CFDataRef v5 = theData;
  if (CacheBlob)
  {
    if (!theData) {
      return CacheBlob;
    }
    goto LABEL_17;
  }
  MutableBytePtr = CFDataGetMutableBytePtr(theData);
  CFIndex Length = CFDataGetLength(v5);
  if ((Length & 0xFFFFFFFE) >= 0x32uLL && MutableBytePtr[20] == 4)
  {
    uint64_t CacheBlob = 0;
    *a2 = v5;
  }
  else
  {
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_274_0);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
    {
      CFStringRef v8 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Invalid file signature cache for \"%s\", size:%u, type:%u\n", v3, Length, MutableBytePtr[20]);
      if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_280);
      }
      CFTypeRef v9 = CK_DEFAULT_LOG_INTERNAL_7;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)stat buf = 138543362;
        CFStringRef v13 = v8;
        _os_log_impl(&dword_215163000, v9, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      if (v8) {
        CFRelease(v8);
      }
    }
    uint64_t CacheBlob = 22;
    if (v5) {
LABEL_17:
    }
      CFRelease(v5);
  }
  return CacheBlob;
}

uint64_t getCacheBlob(void *a1, uint64_t a2, CFDataRef *a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  *a3 = 0;
  CFDataRef theData = 0;
  uint64_t v3 = *(unsigned int (**)(void, uint64_t, CFDataRef *, void))(a1[2] + 80);
  if (!v3 || (uint64_t v6 = a1[13], !v3(a1[1], a2, &theData, 0)))
  {
    uint64_t v11 = 0xFFFFFFFFLL;
    goto LABEL_30;
  }
  BytePtr = CFDataGetBytePtr(theData);
  CFIndex Length = CFDataGetLength(theData);
  if ((unint64_t)(Length - 0x100000000) > 0xFFFFFFFF00000014)
  {
    *(void *)md = 0;
    uint64_t v18 = 0;
    int v19 = 0;
    memset(&c, 0, sizeof(c));
    CC_SHA1_Init(&c);
    CC_SHA1_Update(&c, BytePtr + 20, Length - 20);
    CC_SHA1_Final(md, &c);
    if (*(void *)md == *(void *)BytePtr
      && v18 == *((void *)BytePtr + 1)
      && v19 == (unint64_t)*((unsigned int *)BytePtr + 4))
    {
      uint64_t v11 = 0;
      *a3 = theData;
      return v11;
    }
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_554);
    }
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR)) {
      goto LABEL_29;
    }
    CFStringRef v9 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Invalid cache hash for \"%s\", blobName:%s\n", v6, a2);
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_561);
    }
    int v10 = CK_DEFAULT_LOG_INTERNAL_7;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR)) {
      goto LABEL_27;
    }
    *(_DWORD *)stat buf = 138543362;
    CFStringRef v21 = v9;
    goto LABEL_26;
  }
  if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_544_0);
  }
  if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR)) {
    goto LABEL_29;
  }
  CFStringRef v9 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Invalid cache size for \"%s\", blobName:%s, size:%u\n", v6, a2, Length);
  if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_550_0);
  }
  int v10 = CK_DEFAULT_LOG_INTERNAL_7;
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)stat buf = 138543362;
    CFStringRef v21 = v9;
LABEL_26:
    _os_log_impl(&dword_215163000, v10, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
  }
LABEL_27:
  if (v9) {
    CFRelease(v9);
  }
LABEL_29:
  uint64_t v11 = 22;
LABEL_30:
  if (theData) {
    CFRelease(theData);
  }
  return v11;
}

os_log_t __getFileSignatureCacheBlob_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __getFileSignatureCacheBlob_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

uint64_t getFileSignatureCache()
{
  return 0;
}

uint64_t get2FileSignatureCache(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  CFTypeRef cf = 0;
  CFDataRef theData = 0;
  uint64_t v6 = *(void *)(a1 + 104);
  uint64_t v7 = *(unsigned int *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 80);
  uint64_t v10 = *(void *)(a1 + 88);
  if ((CKFileDigestArgumentsFileScheme(a2) & 0xFFFFFF7F) == 4 || *(unsigned char *)(a1 + 177) || getenv("CS_DISABLE_FS_CACHE"))
  {
    uint64_t v11 = 0xFFFFFFFFLL;
LABEL_5:
    CFTypeRef v12 = cf;
    goto LABEL_6;
  }
  FileSignatureuint64_t CacheBlob = getFileSignatureCacheBlob((void *)a1, &theData);
  CFDataRef v15 = theData;
  if (FileSignatureCacheBlob) {
    goto LABEL_39;
  }
  BytePtr = CFDataGetBytePtr(theData);
  CFIndex Length = CFDataGetLength(v15);
  if (v7 != *(_DWORD *)(BytePtr + 21)
    || v10 != *(void *)(BytePtr + 25)
    || v8 != *(void *)(BytePtr + 33)
    || v9 != *(void *)(BytePtr + 41)
    || (v24 = BytePtr[49], CFIndex v23 = Length, v24 != CKFileDigestArgumentsFileSchemeByte(a2)))
  {
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_284);
    }
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_39;
    }
    CFStringRef v21 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Invalid file signature cache for \"%s\", ino:%llu, sz:%llu, type:%u, scheme:0x%x, generation:%u\n", v6, v8, v9, BytePtr[20], BytePtr[49], v7);
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_290_0);
    }
    uint64_t v22 = CK_DEFAULT_LOG_INTERNAL_7;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_37;
    }
    *(_DWORD *)stat buf = 138543362;
    CFStringRef v28 = v21;
    goto LABEL_36;
  }
  if (CKFileSchemeAndSignatureSize((unsigned char *)BytePtr + 49) != 21 || v23 != 70)
  {
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_294_1);
    }
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_39;
    }
    CFStringRef v21 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Invalid file signature cache for \"%s\", ino:%llu, sz:%llu, type:%u, scheme:0x%x, generation:%u\n", v6, v8, v9, BytePtr[20], BytePtr[49], v7);
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_298_0);
    }
    uint64_t v22 = CK_DEFAULT_LOG_INTERNAL_7;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
    {
LABEL_37:
      if (!v21) {
        goto LABEL_40;
      }
      CFRelease(v21);
LABEL_39:
      LODWORD(v21) = 0;
LABEL_40:
      uint64_t v11 = 0xFFFFFFFFLL;
      if (!v15) {
        goto LABEL_54;
      }
      goto LABEL_41;
    }
    *(_DWORD *)stat buf = 138543362;
    CFStringRef v28 = v21;
LABEL_36:
    _os_log_impl(&dword_215163000, v22, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
    goto LABEL_37;
  }
  CKFileDigestResultsCreate(&cf, (unsigned char *)BytePtr + 49, v9, 0);
  if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_302);
  }
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
  {
    CFStringRef v18 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Found cached file signature for \"%s\", blobSize:%u, sz:%llu, ino:%llu, time:%llu, generation:%u\n", v6, v23, *(void *)(a1 + 80), v8, *(void *)(BytePtr + 25), *(unsigned int *)(BytePtr + 21));
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_309_0);
    }
    int v19 = CK_DEFAULT_LOG_INTERNAL_7;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)stat buf = 138543362;
      CFStringRef v28 = v18;
      _os_log_impl(&dword_215163000, v19, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
    }
    if (v18) {
      CFRelease(v18);
    }
  }
  if (a3)
  {
    if (cf)
    {
      CFRetain(cf);
      CFTypeRef v20 = cf;
    }
    else
    {
      CFTypeRef v20 = 0;
    }
    uint64_t v11 = 0;
    *a3 = v20;
  }
  else
  {
    uint64_t v11 = 0;
  }
  LODWORD(v21) = 1;
  if (!v15)
  {
LABEL_54:
    CFTypeRef v12 = cf;
    if (v21) {
      goto LABEL_55;
    }
    goto LABEL_6;
  }
LABEL_41:
  CFRelease(v15);
  CFTypeRef v12 = cf;
  if (v21)
  {
LABEL_55:
    if (!CKFileDigestResultsFileSignature((uint64_t)v12)) {
      get2FileSignatureCache_cold_1();
    }
    goto LABEL_5;
  }
LABEL_6:
  if (v12) {
    CFRelease(v12);
  }
  return v11;
}

os_log_t __get2FileSignatureCache_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __get2FileSignatureCache_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __get2FileSignatureCache_block_invoke_291()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __get2FileSignatureCache_block_invoke_2_295()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __get2FileSignatureCache_block_invoke_299()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __get2FileSignatureCache_block_invoke_2_306()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

uint64_t setFileSignatureCacheBlob(uint64_t a1, CFMutableDataRef theData)
{
  if (theData)
  {
    MutableBytePtr = CFDataGetMutableBytePtr(theData);
    if ((CFDataGetLength(theData) & 0xFFFFFFFEuLL) <= 0x31) {
      setFileSignatureCacheBlob_cold_1();
    }
    MutableBytePtr[20] = 4;
    return setCacheBlob(a1, (uint64_t)"com.apple.cscachefs", theData);
  }
  else
  {
    uint64_t v6 = *(unsigned int (**)(void, const char *, void, void))(*(void *)(a1 + 16) + 88);
    if (v6 && !*(unsigned char *)(a1 + 176)) {
      return v6(*(void *)(a1 + 8), "com.apple.cscachefs", 0, 0) - 1;
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }
}

uint64_t setCacheBlob(uint64_t a1, uint64_t a2, CFDataRef theData)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(unsigned int (**)(uint64_t, uint64_t, CFDataRef, void))(v3 + 88);
  if (!v4 || *(unsigned char *)(a1 + 176)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v8 = *(void *)(a1 + 8);
  if (!theData) {
    return v4(v8, a2, theData, 0) - 1;
  }
  unint64_t v9 = *(void *)(a1 + 120);
  unsigned int Length = CFDataGetLength(theData);
  if (!v9 || v9 >= Length)
  {
    MutableBytePtr = CFDataGetMutableBytePtr(theData);
    if (Length <= 0x14uLL) {
      setCacheBlob_cold_1();
    }
    CFTypeRef v12 = MutableBytePtr;
    CFStringRef v13 = MutableBytePtr + 20;
    memset(&v14, 0, sizeof(v14));
    CC_SHA1_Init(&v14);
    CC_SHA1_Update(&v14, v13, Length - 20);
    CC_SHA1_Final(v12, &v14);
    uint64_t v4 = *(unsigned int (**)(uint64_t, uint64_t, CFDataRef, void))(v3 + 88);
    return v4(v8, a2, theData, 0) - 1;
  }
  return 0xFFFFFFFFLL;
}

uint64_t setFileSignatureCache(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (!a2 || a3 != 21) {
    setFileSignatureCache_cold_1();
  }
  if (*(unsigned char *)(a1 + 178)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 104);
  uint64_t v8 = *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 80);
  uint64_t v10 = *(void *)(a1 + 88);
  if (getenv("CS_DISABLE_FS_CACHE") || (*(unsigned char *)a2 & 0x7F) == 4) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v28 = 0;
  long long v26 = 0u;
  long long v27 = 0u;
  if ((*(uint64_t (**)(uint64_t, long long *, void))(v6 + 64))(v5, &v26, 0))
  {
    if ((unint64_t)v26 > 0x8000)
    {
      if (!BYTE8(v27)) {
        return 0xFFFFFFFFLL;
      }
      if (v11 == (void)v26 && v10 == (void)v27 && v8 == HIDWORD(v27))
      {
        CFMutableSetRef Mutable = CFDataCreateMutable(0, 70);
        if (Mutable)
        {
          CFDataRef v15 = Mutable;
          CFDataSetLength(Mutable, 70);
          MutableBytePtr = CFDataGetMutableBytePtr(v15);
          *((_OWORD *)MutableBytePtr + 1) = 0u;
          *((_OWORD *)MutableBytePtr + 2) = 0u;
          *((_WORD *)MutableBytePtr + 24) = 0;
          *(_OWORD *)MutableBytePtr = 0u;
          *(_DWORD *)(MutableBytePtr + 21) = v8;
          *(void *)(MutableBytePtr + 25) = v10;
          *(void *)(MutableBytePtr + 33) = v9;
          *(void *)(MutableBytePtr + 41) = v11;
          long long v22 = *a2;
          *(void *)(MutableBytePtr + 62) = *(void *)((char *)a2 + 13);
          *(_OWORD *)(MutableBytePtr + 49) = v22;
          if (setFileSignatureCacheBlob(a1, v15))
          {
            uint64_t v12 = 0xFFFFFFFFLL;
          }
          else
          {
            if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_337);
            }
            if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v12 = (uint64_t)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Stored file signature cache for \"%s\", blobSize:%u, sz:%llu, ino:%llu, mtim:%llu, generation:%u\n", v7, 70, *(void *)(a1 + 80), v9, v10, v8);
              if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
                dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_344);
              }
              CFStringRef v25 = CK_DEFAULT_LOG_INTERNAL_7;
              if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)stat buf = 138543362;
                uint64_t v30 = v12;
                _os_log_impl(&dword_215163000, v25, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
              }
              if (!v12) {
                goto LABEL_29;
              }
              CFRelease((CFTypeRef)v12);
            }
            uint64_t v12 = 0;
          }
LABEL_29:
          CFRelease(v15);
          return v12;
        }
        return 0xFFFFFFFFLL;
      }
      if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_326);
      }
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
      {
        CFStringRef v23 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"\"%s\"changed, ino:%llu, mtime:%llu/%llu, sz:%llu/%llu, generation:%u/%u\n", v7, v9, v10, (void)v27, v11, (void)v26, v8, HIDWORD(v27));
        if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_333);
        }
        int v24 = CK_DEFAULT_LOG_INTERNAL_7;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)stat buf = 138543362;
          uint64_t v30 = (uint64_t)v23;
          _os_log_impl(&dword_215163000, v24, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
        }
        if (v23) {
          CFRelease(v23);
        }
      }
    }
    CC_SHA1_CTX v14 = *(unsigned int (**)(void, const char *, void, void))(*(void *)(a1 + 16) + 88);
    if (v14 && !*(unsigned char *)(a1 + 176) && v14(*(void *)(a1 + 8), "com.apple.cscachefs", 0, 0))
    {
      if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_348);
      }
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
      {
        CFDataRef v15 = (__CFData *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Removed file signature cache for \"%s\", blobSize:%u, sz:%llu, ino:%llu, mtime:%llu, generation:%u\n", v7, 70, *(void *)(a1 + 80), v9, v10, v8);
        if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_355);
        }
        uint64_t v16 = CK_DEFAULT_LOG_INTERNAL_7;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)stat buf = 138543362;
          uint64_t v30 = (uint64_t)v15;
          CFTypeID v17 = v16;
          os_log_type_t v18 = OS_LOG_TYPE_DEBUG;
LABEL_27:
          _os_log_impl(&dword_215163000, v17, v18, "%{public}@", buf, 0xCu);
          goto LABEL_28;
        }
        goto LABEL_28;
      }
    }
  }
  else
  {
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_316_0);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
    {
      CFDataRef v15 = (__CFData *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"stat failed for \"%s\", ino:%llu\n", v7, v9);
      if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_322_0);
      }
      uint64_t v19 = CK_DEFAULT_LOG_INTERNAL_7;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)stat buf = 138543362;
        uint64_t v30 = (uint64_t)v15;
        CFTypeID v17 = v19;
        os_log_type_t v18 = OS_LOG_TYPE_ERROR;
        goto LABEL_27;
      }
LABEL_28:
      uint64_t v12 = 0xFFFFFFFFLL;
      if (!v15) {
        return v12;
      }
      goto LABEL_29;
    }
  }
  return 0xFFFFFFFFLL;
}

os_log_t __setFileSignatureCache_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __setFileSignatureCache_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __setFileSignatureCache_block_invoke_323()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __setFileSignatureCache_block_invoke_2_330()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __setFileSignatureCache_block_invoke_334()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __setFileSignatureCache_block_invoke_2_341()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __setFileSignatureCache_block_invoke_345()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __setFileSignatureCache_block_invoke_2_352()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

BOOL wgcChanged(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 104);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v11 = 0;
  long long v9 = 0u;
  long long v10 = 0u;
  if ((*(uint64_t (**)(uint64_t, long long *, void))(v3 + 64))(v2, &v9, 0))
  {
    if (BYTE8(v10)) {
      return HIDWORD(v10) != *(_DWORD *)(a1 + 24);
    }
    return 0;
  }
  if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_358);
  }
  BOOL result = os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR);
  if (result)
  {
    CFStringRef v7 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"stat failed for \"%s\", ino:%llu\n", v4, v5);
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_361_1);
    }
    uint64_t v8 = CK_DEFAULT_LOG_INTERNAL_7;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 138543362;
      CFStringRef v13 = v7;
      _os_log_impl(&dword_215163000, v8, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v7) {
      CFRelease(v7);
    }
    return 0;
  }
  return result;
}

os_log_t __wgcChanged_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __wgcChanged_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

uint64_t CK2CalculateItemSignatureWithFlags(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, void *a5, CFErrorRef *a6)
{
  uint64_t v66 = *MEMORY[0x263EF8340];
  CFTypeRef v62 = 0;
  uint64_t v63 = 0;
  CFTypeRef v60 = 0;
  CFErrorRef v61 = 0;
  if (a6) {
    *a6 = 0;
  }
  uint64_t v11 = &new_ringing[131];
  uint64_t v12 = &new_ringing[131];
  if (!a1)
  {
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_364_0);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
    {
      OpCtx = (uint64_t *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"NULL read context\n");
      if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_370);
      }
      uint64_t v30 = CK_DEFAULT_LOG_INTERNAL_7;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)stat buf = 138543362;
        uint64_t v65 = (uint64_t)OpCtx;
        _os_log_impl(&dword_215163000, v30, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (!OpCtx)
      {
        int v23 = 0;
        int v29 = 0;
        uint64_t v55 = 0;
        unint64_t v56 = 0;
        unint64_t v22 = 0;
        CFStringRef v21 = 0;
        goto LABEL_50;
      }
      CFRelease(OpCtx);
    }
    int v23 = 0;
    int v29 = 0;
    uint64_t v55 = 0;
    unint64_t v56 = 0;
    unint64_t v22 = 0;
    CFStringRef v21 = 0;
    OpCtx = 0;
LABEL_50:
    uint64_t v31 = 0;
    goto LABEL_77;
  }
  uint64_t v54 = *(void *)(a1 + 24);
  if (((*(uint64_t (**)(void, uint64_t **, CFErrorRef *))(a1 + 48))(*(void *)(a1 + 8), &v63, &v61) & 1) == 0)
  {
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_374_0);
    }
    uint64_t v31 = v54;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
    {
      OpCtx = (uint64_t *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"open failed on path:\"%@\", error:\"%@\"\n", v54, v61);
      if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_381);
      }
      uint64_t v32 = CK_DEFAULT_LOG_INTERNAL_7;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)stat buf = 138543362;
        uint64_t v65 = (uint64_t)OpCtx;
        _os_log_impl(&dword_215163000, v32, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (!OpCtx)
      {
        int v23 = 0;
        int v29 = 0;
        uint64_t v55 = 0;
        unint64_t v56 = 0;
        unint64_t v22 = 0;
        CFStringRef v21 = 0;
        goto LABEL_77;
      }
      CFRelease(OpCtx);
    }
    int v23 = 0;
    int v29 = 0;
    uint64_t v55 = 0;
    unint64_t v56 = 0;
    unint64_t v22 = 0;
    CFStringRef v21 = 0;
    OpCtx = 0;
    goto LABEL_77;
  }
  CFStringRef v13 = *(uint64_t (**)(uint64_t, char **, CFErrorRef *))(a1 + 48);
  BOOL v14 = v13 == openFd || v13 == openFdUncached;
  int v15 = !v14;
  int v53 = v15;
  if (!v14)
  {
    OpCtx = (uint64_t *)createOpCtx();
    if (OpCtx) {
      goto LABEL_13;
    }
LABEL_62:
    uint64_t v55 = 0;
    unint64_t v56 = 0;
    unint64_t v22 = 0;
    CFStringRef v21 = 0;
LABEL_63:
    int v29 = 1;
    int v23 = v53;
    uint64_t v31 = v54;
    goto LABEL_77;
  }
  OpCtx = v63;
  if (!v63) {
    goto LABEL_62;
  }
LABEL_13:
  uint64_t v17 = (uint64_t)v63;
  *((unsigned char *)OpCtx + 160) = 5;
  OpCtx[1] = v17;
  OpCtx[2] = a1;
  uint64_t v18 = OpCtx[5];
  long long v58 = 0u;
  memset(v59, 0, 24);
  uint64_t v55 = v18;
  if (((*(uint64_t (**)(void))(a1 + 64))() & 1) == 0)
  {
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_385);
    }
    int v23 = v53;
    uint64_t v31 = v54;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v21 = (void *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"stat failed on path:\"%@\", ino:%llu, error:\"%@\"\n", v54, v18, v61);
      if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_392_0);
      }
      int v33 = CK_DEFAULT_LOG_INTERNAL_7;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)stat buf = 138543362;
        uint64_t v65 = (uint64_t)v21;
        _os_log_impl(&dword_215163000, v33, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (!v21)
      {
        unint64_t v56 = 0;
        unint64_t v22 = 0;
        goto LABEL_74;
      }
      CFRelease(v21);
    }
    unint64_t v56 = 0;
    unint64_t v22 = 0;
    CFStringRef v21 = 0;
LABEL_74:
    int v29 = 1;
    goto LABEL_77;
  }
  unint64_t v19 = v58;
  OpCtx[5] = *((void *)&v58 + 1);
  uint64_t v20 = *(void *)&v59[0];
  unint64_t v56 = v19;
  OpCtx[10] = v19;
  OpCtx[11] = v20;
  *((unsigned char *)OpCtx + 34) = BYTE8(v59[0]);
  OpCtx[3] = *(void *)((char *)v59 + 12);
  uint64_t v52 = a4;
  if ((a4 & 2) != 0)
  {
    CFStringRef v21 = 0;
    if (*((unsigned char *)OpCtx + 178))
    {
LABEL_21:
      unint64_t v22 = v56;
LABEL_22:
      if (!a5)
      {
LABEL_24:
        int v23 = v53;
        if (v11[393] != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_436);
        }
        if (os_log_type_enabled((os_log_t)v12[404], OS_LOG_TYPE_DEBUG))
        {
          int v24 = (char *)CKFileDigestResultsFileSignature((uint64_t)v60);
          CFStringRef v25 = CKFileSchemeAndSignatureCopyCString(v24);
          if (gVerbose == 2)
          {
            if (v11[393] != -1) {
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_440);
            }
            if (os_log_type_enabled((os_log_t)v12[404], OS_LOG_TYPE_DEBUG)
              && os_log_type_enabled((os_log_t)v12[404], OS_LOG_TYPE_DEBUG))
            {
              CFStringRef v26 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"path:\"%@\", flags:0x%llx, ino:%llu, sz:%llu, o:%llu, ck:%s", v54, v52, v55, v56, v22, v25);
              if (v11[393] != -1) {
                dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_449_0);
              }
              long long v27 = v12[404];
              if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)stat buf = 138543362;
                uint64_t v65 = (uint64_t)v26;
                _os_log_impl(&dword_215163000, v27, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
              }
              if (v26) {
                CFRelease(v26);
              }
            }
          }
          free(v25);
        }
        uint64_t v28 = 1;
        int v29 = 1;
        goto LABEL_87;
      }
LABEL_23:
      CKBaseRetain(v60);
      *a5 = v60;
      goto LABEL_24;
    }
    unint64_t v22 = v19;
    if (v19 <= 0x8000) {
      goto LABEL_22;
    }
  }
  if (!get2FileSignatureCache((uint64_t)OpCtx, (uint64_t)a2, &v60)
    && v60
    && CKFileDigestResultsFileSignature((uint64_t)v60))
  {
    CFStringRef v21 = 0;
    goto LABEL_21;
  }
  if (v56)
  {
    uint64_t v37 = 0x8000;
    CFStringRef v21 = malloc_type_malloc(0x8000uLL, 0xD8EFBB03uLL);
    if (!v21)
    {
LABEL_112:
      unint64_t v22 = 0;
      goto LABEL_63;
    }
  }
  else
  {
    CFStringRef v21 = 0;
    uint64_t v37 = 0;
  }
  if (!CKFileSignatureGeneratorCreate(&v62, a2)) {
    goto LABEL_112;
  }
  BOOL v38 = (v52 & 1) != 0 && *((unsigned char *)OpCtx + 178) == 0;
  if (v56)
  {
    uint64_t v39 = v37;
    unint64_t v22 = 0;
    unint64_t v40 = 0;
    char v51 = !v38;
    uint64_t v50 = v39;
    unint64_t v41 = v39;
    while (1)
    {
      unint64_t v57 = 0;
      if (((*(uint64_t (**)(uint64_t *, unint64_t, void *, unint64_t, unint64_t *, CFErrorRef *))(a1 + 72))(v63, v22, v21, v41, &v57, &v61) & 1) == 0)break; {
      if (v57)
      }
      {
        if (!CKFileSignatureGeneratorUpdate((uint64_t)v62))
        {
          if (v11[393] != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_408);
          }
          uint64_t v12 = &new_ringing[131];
          int v23 = v53;
          uint64_t v31 = v54;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
          {
            CFStringRef v48 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"CKFileSignatureGeneratorUpdate failed\n");
            if (v11[393] != -1) {
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_415);
            }
            uint64_t v49 = CK_DEFAULT_LOG_INTERNAL_7;
            if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)stat buf = 138543362;
              uint64_t v65 = (uint64_t)v48;
LABEL_155:
              _os_log_impl(&dword_215163000, v49, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
            }
            goto LABEL_156;
          }
          goto LABEL_74;
        }
        unint64_t v42 = v57;
        v22 += v57;
        v40 += v57;
        char v43 = v51;
        if (!v57) {
          char v43 = 1;
        }
        if ((v43 & 1) == 0)
        {
          if (v40 >= 0x18000)
          {
            if (wgcChanged((uint64_t)OpCtx))
            {
              CFErrorRef v61 = CKPOSIXErrorCreateWithFormat(16, @"ino:%llu changed", v55);
              uint64_t v12 = new_ringing + 1048;
              uint64_t v11 = new_ringing + 1048;
              int v23 = v53;
              uint64_t v31 = v54;
              goto LABEL_74;
            }
            unint64_t v42 = v57;
            v40 -= 98304;
          }
          uint64_t v11 = new_ringing + 1048;
        }
      }
      else
      {
        unint64_t v42 = 0;
      }
      if (v42 < v41 || v22 >= v56) {
        goto LABEL_132;
      }
    }
    if (v11[393] != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_397);
    }
    uint64_t v12 = &new_ringing[131];
    int v23 = v53;
    uint64_t v31 = v54;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v48 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"read failed on path:\"%@\", ino:%llu, offset:0x%llx, size:%u, error:\"%@\"\n", v54, v55, v22, v50, v61);
      if (v11[393] != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_404);
      }
      uint64_t v49 = CK_DEFAULT_LOG_INTERNAL_7;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)stat buf = 138543362;
        uint64_t v65 = (uint64_t)v48;
        goto LABEL_155;
      }
LABEL_156:
      if (v48) {
        CFRelease(v48);
      }
      uint64_t v12 = new_ringing + 1048;
      goto LABEL_74;
    }
    goto LABEL_74;
  }
  unint64_t v22 = 0;
LABEL_132:
  uint64_t v31 = v54;
  if (v60) {
    CK2CalculateItemSignatureWithFlags_cold_3();
  }
  int v44 = CKFileSignatureGeneratorFinish((uint64_t)v62);
  uint64_t v12 = new_ringing + 1048;
  if (v62) {
    CFRelease(v62);
  }
  CFTypeRef v62 = 0;
  if (v44)
  {
    if (!v60) {
      CK2CalculateItemSignatureWithFlags_cold_1();
    }
    CFErrorRef v45 = (long long *)CKFileDigestResultsFileSignature((uint64_t)v60);
    if (!v45) {
      CK2CalculateItemSignatureWithFlags_cold_2();
    }
    CFErrorRef v46 = v45;
    uint64_t v47 = CKFileSchemeAndSignatureSize(v45);
    setFileSignatureCache((uint64_t)OpCtx, v46, v47);
    if (!a5) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  int v29 = 1;
  int v23 = v53;
LABEL_77:
  if (v11[393] != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_425);
  }
  if (!os_log_type_enabled((os_log_t)v12[404], OS_LOG_TYPE_DEBUG)) {
    goto LABEL_86;
  }
  uint64_t v28 = (uint64_t)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"error:\"%@\", path:\"%@\", ino:%llu, sz:%llu, o:%llu\n", v61, v31, v55, v56, v22);
  if (v11[393] != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_432);
  }
  CFAllocatorRef v34 = v12[404];
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)stat buf = 138543362;
    uint64_t v65 = v28;
    _os_log_impl(&dword_215163000, v34, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
  }
  if (v28)
  {
    CFRelease((CFTypeRef)v28);
LABEL_86:
    uint64_t v28 = 0;
  }
LABEL_87:
  if (v62)
  {
    CFRelease(v62);
    CFTypeRef v62 = 0;
  }
  if (v21) {
    free(v21);
  }
  if (v23) {
    freeOpCtx((char *)OpCtx);
  }
  if (v29) {
    (*(void (**)(void, uint64_t *, void))(a1 + 56))(*(void *)(a1 + 8), v63, 0);
  }
  if (a6) {
    char v35 = v28;
  }
  else {
    char v35 = 1;
  }
  if (v35)
  {
    if (v61) {
      CFRelease(v61);
    }
  }
  else
  {
    *a6 = v61;
    CFErrorRef v61 = 0;
  }
  if (v60) {
    CKBaseRelease(v60);
  }
  return v28;
}

os_log_t __CK2CalculateItemSignatureWithFlags_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __CK2CalculateItemSignatureWithFlags_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __CK2CalculateItemSignatureWithFlags_block_invoke_371()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __CK2CalculateItemSignatureWithFlags_block_invoke_2_378()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

char *createOpCtx()
{
  uint64_t v0 = (char *)malloc_type_calloc(1uLL, 0x228uLL, 0x10F0040A7EBA4E8uLL);
  uint64_t v1 = v0;
  if (!v0
    || (*((_DWORD *)v0 + 9) = -1,
        *((void *)v0 + 30) = 0,
        v0[183] = getenv("CK_TIME_CHUNKING") != 0,
        uint64_t v2 = getenv("CK_SIZE_STATS"),
        v1[181] = v2 != 0,
        v2)
    && pthread_mutex_init((pthread_mutex_t *)(v1 + 360), 0))
  {
    freeOpCtx(v1);
    return 0;
  }
  else
  {
    v1[182] = 1;
    BOOL v3 = gVerbose == 2;
    v1[184] = gVerbose == 2;
    if (v3 && getenv("CK_CHUNKSTORE_VERBOSE_FOR_TEST_TOOL")) {
      *((void *)v1 + 68) = malloc_type_calloc(0x100000uLL, 0x14uLL, 0x788C06uLL);
    }
    v1[180] = getenv("CK_NO_RESULTS") != 0;
  }
  return v1;
}

os_log_t __CK2CalculateItemSignatureWithFlags_block_invoke_382()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __CK2CalculateItemSignatureWithFlags_block_invoke_2_389()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

double setOpCtxStatInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)(a1 + 40) = a2[1];
  uint64_t v3 = a2[2];
  *(void *)(a1 + 80) = v2;
  *(void *)(a1 + 88) = v3;
  *(unsigned char *)(a1 + 34) = *((unsigned char *)a2 + 24);
  double result = *(double *)((char *)a2 + 28);
  *(double *)(a1 + 24) = result;
  return result;
}

os_log_t __CK2CalculateItemSignatureWithFlags_block_invoke_394()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __CK2CalculateItemSignatureWithFlags_block_invoke_2_401()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __CK2CalculateItemSignatureWithFlags_block_invoke_405()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __CK2CalculateItemSignatureWithFlags_block_invoke_2_412()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __CK2CalculateItemSignatureWithFlags_block_invoke_422()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __CK2CalculateItemSignatureWithFlags_block_invoke_2_429()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __CK2CalculateItemSignatureWithFlags_block_invoke_433()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __CK2CalculateItemSignatureWithFlags_block_invoke_2_437()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __CK2CalculateItemSignatureWithFlags_block_invoke_4()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

void freeOpCtx(char *a1)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (!a1) {
    return;
  }
  if (a1[183])
  {
    bzero(__str, 0x400uLL);
    double v2 = (double)*((unint64_t *)a1 + 59) / 1000000000.0;
    double v3 = (double)*((unint64_t *)a1 + 61) / 1000000000.0;
    double v4 = (double)*((unint64_t *)a1 + 63) / 1000000000.0;
    double v5 = (double)*((unint64_t *)a1 + 65) / 1000000000.0;
    double v6 = (double)*((unint64_t *)a1 + 67) / 1000000000.0;
    double v7 = v2 + v3 + v4 + v5 + v6;
    double v8 = (double)*((unint64_t *)a1 + 53);
    printf("\n Summary for item %lld (%s):", *((void *)a1 + 7), *((const char **)a1 + 13));
    printf("\n\tprofiler created %d sections", *((_DWORD *)a1 + 62));
    printf("\n\t%32s\tThroughput\n", "Elapsed Time");
    printf("\t%10s %13.7f %7s", "chunking", v2, "seconds");
    printf("\t%12.4f MB/sec\n", (double)*((unint64_t *)a1 + 53) / v2 * 0.000000953674316);
    printf("\t%10s %13.7f %-10s", "hashing", v3, "seconds");
    printf("\t%12.4f MB/sec\n", (double)*((unint64_t *)a1 + 53) / v3 * 0.000000953674316);
    printf("\t%10s %13.7f %-10s", "file read", v4, "seconds");
    printf("\t%12.4f MB/sec\n", (double)*((unint64_t *)a1 + 53) / v4 * 0.000000953674316);
    if (*((void *)a1 + 57))
    {
      printf("\t%10s %13.7f %-10s", "file write", v5, "seconds");
      printf("\t%12.4f MB/sec\n", (double)*((unint64_t *)a1 + 54) / v5 * 0.000000953674316);
    }
    double v9 = v8 / v7;
    if (!a1[180])
    {
      printf("\t%10s %13.7f %-10s", "DB access", v6, "seconds");
      printf("\t%12.4f MB/sec\n", (double)*((unint64_t *)a1 + 53) / v6 * 0.000000953674316);
    }
    if ((CKFileDigestArgumentsFileSchemeByte(*((void *)a1 + 18)) & 0x80u) != 0) {
      long long v10 = ", hashed, encrypted and hashed again";
    }
    else {
      long long v10 = " and hashed";
    }
    snprintf(__str, 0x400uLL, "Chunked%s", v10);
    printf("\n\t%s %llu bytes into %lld chunks, stored %lld chunks (%lld bytes) in %6.4f seconds (%8.4f MB/sec)\n\n", __str, *((void *)a1 + 53), *((void *)a1 + 55), *((void *)a1 + 57), *((void *)a1 + 54), v7, v9 * 0.000000953674316);
    unint64_t v11 = *((void *)a1 + 55);
    if (v11) {
      printf("\tAverage chunk size: %llu.%llu\n", *((void *)a1 + 53) / v11, *((void *)a1 + 53) % v11);
    }
    else {
      puts("\tAverage chunk size: 0 (0 chunks)");
    }
    putchar(10);
  }
  uint64_t v12 = (void *)*((void *)a1 + 68);
  if (v12) {
    free(v12);
  }
  if (a1[182]) {
    pthread_mutex_destroy((pthread_mutex_t *)(a1 + 360));
  }
  CFStringRef v13 = (CFTypeRef *)*((void *)a1 + 17);
  if (v13)
  {
    if (v13[8])
    {
      CKBaseRelease(v13[8]);
      CFStringRef v13 = (CFTypeRef *)*((void *)a1 + 17);
    }
    free(v13);
  }
  BOOL v14 = (const void *)*((void *)a1 + 24);
  if (v14)
  {
    CKBaseRelease(v14);
    *((void *)a1 + 24) = 0;
  }
  int v15 = (const void *)*((void *)a1 + 25);
  if (v15) {
    CKBaseRelease(v15);
  }
  *((void *)a1 + 25) = 0;
  uint64_t v16 = (const void *)*((void *)a1 + 26);
  if (v16) {
    CKBaseRelease(v16);
  }
  *((void *)a1 + 26) = 0;
  uint64_t v17 = (const void *)*((void *)a1 + 18);
  if (v17) {
    CKBaseRelease(v17);
  }
  *((void *)a1 + 18) = 0;
  uint64_t v18 = (const void *)*((void *)a1 + 30);
  if (v18) {
    CKBaseRelease(v18);
  }
  *((void *)a1 + 30) = 0;
  unint64_t v19 = (void *)*((void *)a1 + 40);
  if (v19)
  {
    free(v19);
    *((void *)a1 + 40) = 0;
  }
  uint64_t v20 = (const void *)*((void *)a1 + 42);
  if (v20) {
    CFRelease(v20);
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  CFStringRef v21 = (void *)*((void *)a1 + 32);
  if (v21) {
    free(v21);
  }
  unint64_t v22 = (void *)*((void *)a1 + 37);
  if (v22) {
    free(v22);
  }
  if (!a1[179])
  {
    int v25 = *((_DWORD *)a1 + 77);
    uint64_t v26 = *((unsigned int *)a1 + 68);
    if (!v25 && v26) {
      freeOpCtx_cold_1();
    }
    int v23 = (char *)*((void *)a1 + 33);
    if (v26)
    {
      int v27 = 0;
      uint64_t v28 = v23 + 8;
      do
      {
        int v29 = *(void **)&v28[v27];
        if (v29) {
          free(v29);
        }
        v27 += v25;
        --v26;
      }
      while (v26);
      int v23 = (char *)*((void *)a1 + 33);
    }
    if (!v23) {
      goto LABEL_45;
    }
    goto LABEL_44;
  }
  int v23 = (char *)*((void *)a1 + 33);
  if (v23)
  {
LABEL_44:
    free(v23);
    *((void *)a1 + 33) = 0;
  }
LABEL_45:
  *((void *)a1 + 34) = 0;
  int v24 = (const void *)*((void *)a1 + 19);
  if (v24) {
    CKBaseRelease(v24);
  }
  free(a1);
}

uint64_t CK2CalculateFileSignatureWithFlags(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, void *a5, CFTypeRef *a6)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  CFTypeRef cf = 0;
  if (a5) {
    *a5 = 0;
  }
  if (a6) {
    *a6 = 0;
  }
  bzero(cStr, 0x400uLL);
  if (get_path_for_fd(a1, cStr))
  {
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_452_0);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEFAULT))
    {
      CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      uint64_t v13 = *__error();
      BOOL v14 = __error();
      int v15 = strerror(*v14);
      CFStringRef v16 = CFStringCreateWithFormat(v12, 0, @"get_path_for_fd failed for fd:%d: %d (%s)\n", a1, v13, v15);
      if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_458_0);
      }
      uint64_t v17 = CK_DEFAULT_LOG_INTERNAL_7;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)stat buf = 138543362;
        *(void *)&uint8_t buf[4] = v16;
        _os_log_impl(&dword_215163000, v17, OS_LOG_TYPE_DEFAULT, "%{public}@", buf, 0xCu);
      }
      if (!v16)
      {
        uint64_t v18 = 0;
        goto LABEL_18;
      }
      CFRelease(v16);
    }
    uint64_t v18 = 0;
    CFStringRef v16 = 0;
  }
  else
  {
    uint64_t v18 = cStr;
    CFStringRef v16 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  }
LABEL_18:
  v22[2] = 0;
  v22[3] = 0;
  v22[0] = v18;
  v22[1] = a1;
  *(_DWORD *)&uint8_t buf[4] = 0;
  uint64_t v25 = 0;
  long long v27 = 0u;
  *(_DWORD *)stat buf = 2;
  *(void *)&buf[8] = v22;
  uint64_t v28 = openFdUncached;
  int v29 = closeFd;
  uint64_t v30 = statFd;
  uint64_t v31 = readFd;
  uint64_t v32 = getCacheBlobFd;
  int v33 = setCacheBlobFd;
  CFStringRef v26 = v16;
  uint64_t v19 = CK2CalculateItemSignatureWithFlags((uint64_t)buf, a2, a3, a4, a5, (CFErrorRef *)&cf);
  CFTypeRef v20 = cf;
  if (a6 && !v19 && cf)
  {
    CFRetain(cf);
    CFTypeRef v20 = cf;
    *a6 = cf;
  }
  if (v20) {
    CFRelease(v20);
  }
  if (v16) {
    CFRelease(v16);
  }
  return v19;
}

os_log_t __CK2CalculateFileSignatureWithFlags_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __CK2CalculateFileSignatureWithFlags_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

BOOL CKCalculateFileSignature(uint64_t a1, int a2, void *a3, uint64_t *a4)
{
  if (a2 != 1) {
    CKCalculateFileSignature_cold_2();
  }
  CFTypeRef cf = 0;
  CKFileDigestArgumentsV1WithFileCreate(&cf, 1, 0);
  CFTypeRef v11 = 0;
  CFTypeRef v12 = 0;
  int v7 = CK2CalculateFileSignatureWithFlags(a1, cf, 0, 0, &v12, &v11);
  double v8 = (unsigned char *)CKFileDigestResultsFileSignature((uint64_t)v12);
  size_t v9 = CKFileSchemeAndSignatureSize(v8);
  if (v7)
  {
    if (v8 && v9 != 21) {
      CKCalculateFileSignature_cold_1();
    }
    if (a3 && v8) {
      memcpy(a3, v8, v9);
    }
    if (a4) {
      *a4 = CKFileDigestResultsFileLength((uint64_t)v12);
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  CFTypeRef cf = 0;
  if (v12) {
    CFRelease(v12);
  }
  CFTypeRef v12 = 0;
  if (v11) {
    CFRelease(v11);
  }
  return v7 != 0;
}

unint64_t CKValidateSignature(unsigned char *a1, const void *a2, uint64_t a3, int a4)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v8 = CKChunkSchemeAndSignatureSize(a1);
  if (v8)
  {
    size_t v9 = v8;
    if ((char)*a1 < 0 && !a4)
    {
      long long v10 = malloc_type_malloc(a3, 0x3A166DA0uLL);
      if (v10)
      {
        CFTypeRef v11 = v10;
        *(void *)stat buf = 0;
        if (CKChunkDigestArgumentsV1Create(buf, 1, 0))
        {
          CFTypeRef v17 = 0;
          memcpy(v11, a2, a3);
          if (CKEncryptData(*(const void **)buf, (uint64_t)v11, a3, &v17))
          {
            CFTypeRef v12 = (const void *)CKChunkDigestResultsChunkSignature((uint64_t)v17);
            unint64_t v13 = memcmp(a1, v12, v9) == 0;
            if (*(void *)buf) {
              CKBaseRelease(*(CFTypeRef *)buf);
            }
            *(void *)stat buf = 0;
            if (v17) {
              CKBaseRelease(v17);
            }
            free(v11);
            return v13;
          }
          free(v11);
        }
      }
      return 0;
    }
    *(void *)stat buf = 0;
    if (!CKChunkDigestArgumentsV1Create(buf, 1, 0)) {
      return 0;
    }
    CFTypeRef v17 = 0;
    if (!CKCalculateChunkSignatureAndEncryptionKey((uint64_t)a2, a3, *(const void **)buf, &v17)) {
      return 0;
    }
    int v15 = (const void *)CKChunkDigestResultsChunkSignature((uint64_t)v17);
    unint64_t v13 = memcmp(a1, v15, v9) == 0;
    if (*(void *)buf) {
      CKBaseRelease(*(CFTypeRef *)buf);
    }
    *(void *)stat buf = 0;
    if (v17) {
      CKBaseRelease(v17);
    }
  }
  else
  {
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_464);
    }
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    unint64_t v13 = (unint64_t)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"signature size is 0\n");
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_470);
    }
    BOOL v14 = CK_DEFAULT_LOG_INTERNAL_7;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 138543362;
      *(void *)&uint8_t buf[4] = v13;
      _os_log_impl(&dword_215163000, v14, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v13)
    {
      CFRelease((CFTypeRef)v13);
      return 0;
    }
  }
  return v13;
}

os_log_t __CKValidateSignature_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __CKValidateSignature_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

uint64_t CKRegisteredChunkKey(uint64_t a1)
{
  int v3 = *(char *)(a1 + 35);
  double v2 = (unsigned char *)(a1 + 35);
  if (v3 < 0) {
    return a1 + CKSchemeAndSignatureSize(v2) + 35;
  }
  else {
    return 0;
  }
}

uint64_t CKRegisteredSubchunkDigest(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 29)) {
      result += 35 + CKChunkSchemeSignatureAndKeySize((unsigned char *)(result + 35));
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t CKRegisteredChunkAtIndex(uint64_t result, unsigned int a2)
{
  if (result)
  {
    uint64_t v3 = result;
    unsigned int v4 = CKRegisteredChunkSize(result);
    if (v4) {
      return v3 + v4 * (unint64_t)a2;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t CKStoredChunkAtIndex(uint64_t result, unsigned int a2)
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = CKSignatureSize(result + 56);
    unsigned int v5 = v4 + 57;
    if (!v4) {
      unsigned int v5 = 0;
    }
    if (v5) {
      return v3 + v5 * (unint64_t)a2;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t CKRegisteredChunkRowID(uint64_t a1)
{
  return *(void *)a1;
}

void *CKRegisteredChunkSetRowID(void *result, uint64_t a2)
{
  *os_log_t result = a2;
  return result;
}

uint64_t CKRegisteredChunkItemID(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t CKRegisteredChunkSetItemID(uint64_t result, uint64_t a2)
{
  *(void *)(result + 8) = a2;
  return result;
}

uint64_t CKRegisteredChunkOffset(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t CKRegisteredChunkSuccessorOffset(uint64_t a1)
{
  return *(void *)(a1 + 16) + *(unsigned int *)(a1 + 24);
}

uint64_t CKRegisteredChunkSetOffset(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16) = a2;
  return result;
}

uint64_t CKRegisteredChunkLength(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t CKRegisteredChunkSetLength(uint64_t result, int a2)
{
  *(_DWORD *)(result + 24) = a2;
  return result;
}

uint64_t CKRegisteredChunkLocation(uint64_t a1)
{
  return *(char *)(a1 + 28);
}

uint64_t CKRegisteredChunkSetLocation(uint64_t result, char a2)
{
  *(unsigned char *)(result + 28) = a2;
  return result;
}

uint64_t CKRegisteredChunkSignature(uint64_t a1)
{
  return a1 + 35;
}

uint64_t CKRegisteredChunkType(uint64_t a1)
{
  return *(unsigned int *)(a1 + 31);
}

unsigned char *CKRegisteredChunkSignatureCopyCString(uint64_t a1)
{
  uint64_t v1 = (char *)(a1 + 35);
  uint64_t v2 = CKSchemeAndSignatureSize((unsigned char *)(a1 + 35));
  os_log_t result = malloc_type_malloc((2 * v2) | 1, 0x4D85F13uLL);
  for (uint64_t i = 0; v2; --v2)
  {
    unsigned int v5 = &result[i];
    *unsigned int v5 = CShex_to_string_hex[(unint64_t)*v1 >> 4];
    char v6 = *v1++;
    i += 2;
    v5[1] = CShex_to_string_hex[v6 & 0xF];
  }
  result[i] = 0;
  return result;
}

uint64_t CKRegisteredChunkKeyCopyCString(uint64_t a1)
{
  int v3 = *(char *)(a1 + 35);
  uint64_t v2 = (unsigned char *)(a1 + 35);
  if ((v3 & 0x80000000) == 0) {
    return 0;
  }
  unsigned int v5 = (unsigned __int8 *)(a1 + CKSchemeAndSignatureSize(v2) + 35);
  uint64_t result = CKSchemeAndEncryptionKeySize(v5);
  if (result)
  {
    uint64_t v6 = result;
    uint64_t result = (uint64_t)malloc_type_malloc((2 * result) | 1, 0x337E6EBDuLL);
    int v7 = (unsigned char *)result;
    do
    {
      *int v7 = CShex_to_string_hex[(unint64_t)*v5 >> 4];
      char v8 = *v5++;
      v7[1] = CShex_to_string_hex[v8 & 0xF];
      v7 += 2;
      --v6;
    }
    while (v6);
    *int v7 = 0;
  }
  return result;
}

uint64_t CKRegisteredChunkIsEncrypted(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 35) >> 7;
}

void *CSCreateSourceChunk(char a1, unsigned __int8 a2)
{
  char v7 = a1;
  unsigned __int8 v6 = a2;
  uint64_t v3 = CKChunkSignatureSize(&v7);
  if (a1 < 0) {
    uint64_t v4 = CKChunkSchemeAndEncryptionKeySize(&v6);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v4 + v3) {
    return malloc_type_calloc(1uLL, v4 + v3 + 88, 0xA4C4D9E0uLL);
  }
  else {
    return 0;
  }
}

void *CSCreateStoredChunk(char a1)
{
  char v2 = a1;
  uint64_t result = (void *)CKChunkSignatureSize(&v2);
  if (result) {
    return malloc_type_calloc((size_t)result + 57, 1uLL, 0x90A54C42uLL);
  }
  return result;
}

void clearChunksArray(uint64_t a1)
{
  char v2 = *(void **)a1;
  if (v2)
  {
    free(v2);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + 8) = 0;
}

CFTypeRef setOpCtxFileDigestArguments(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef result = *(CFTypeRef *)(a1 + 144);
  if (result != cf)
  {
    if (result) {
      CKBaseRelease(result);
    }
    *(void *)(a1 + 144) = 0;
    CFTypeRef result = CKBaseRetain(cf);
    *(void *)(a1 + 144) = cf;
  }
  return result;
}

uint64_t setOpCtxPath(uint64_t a1, char *__s)
{
  *(void *)(a1 + 104) = __s;
  if (__s) {
    uint64_t v3 = strrchr(__s, 47);
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3) {
    uint64_t v4 = v3 + 1;
  }
  else {
    uint64_t v4 = 0;
  }
  *(void *)(a1 + 112) = v4;
  return 0;
}

uint64_t setOpCtxChunkScheme(uint64_t a1, int a2, CFTypeRef cf)
{
  *(unsigned char *)(a1 + 179) = a2;
  if (cf) {
    CFRetain(cf);
  }
  *(void *)(a1 + 152) = cf;
  char v11 = CKChunkDigestArgumentsChunkSchemeByte((uint64_t)cf);
  unsigned __int8 v6 = CKChunkDigestArgumentsChunkEncryptionKeyScheme((uint64_t)cf);
  unsigned __int8 v10 = v6;
  int v7 = CKChunkSignatureSize(&v11);
  if (a2)
  {
    *(_DWORD *)(a1 + 308) = v7 + 36;
    if (v11 < 0)
    {
      *(_DWORD *)(a1 + 308) += CKChunkSchemeAndEncryptionKeySize(&v10);
      unsigned __int8 v6 = v10;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 308) = v7 + 88;
  }
  char v8 = CSCreateSourceChunk(v11, v6);
  *(void *)(a1 + 136) = v8;
  if (v8) {
    return 0;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

void clearOpCtxError(uint64_t a1)
{
  char v2 = *(const void **)(a1 + 336);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 336) = 0;
  }
}

uint64_t readOpCtx(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v10 = a1[1];
  uint64_t v11 = a1[2];
  CFTypeRef cf = 0;
  CFTypeRef v12 = (const void *)a1[42];
  if (v12)
  {
    CFRelease(v12);
    a1[42] = 0;
  }
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, CFTypeRef *))(v11 + 72))(v10, a2, a3, a4, a5, &cf);
  if (v13)
  {
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_478_1);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v14 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"read failed on itemID:%lld, path:\"%s\", ino:%llu, offset:0x%llx, size:%u, error:\"%@\"\n", a1[7], a1[13], a1[5], a2, a4, cf);
      if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_484);
      }
      int v15 = CK_DEFAULT_LOG_INTERNAL_7;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)stat buf = 138543362;
        CFStringRef v19 = v14;
        _os_log_impl(&dword_215163000, v15, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v14) {
        CFRelease(v14);
      }
    }
    a1[42] = cf;
  }
  return v13;
}

os_log_t __readOpCtx_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __readOpCtx_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

void setOpCtxFileDigestResults(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef v3 = *(CFTypeRef *)(a1 + 208);
  if (v3 != cf)
  {
    if (v3) {
      CFRelease(v3);
    }
    *(void *)(a1 + 208) = 0;
    if (cf) {
      CFRetain(cf);
    }
    *(void *)(a1 + 208) = cf;
  }
}

uint64_t getOpCtxSectionLengthAtIndex(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 248) <= a2)
  {
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_487_0);
    }
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    CFStringRef v9 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"sectionIndex %u out of range (numSections = %u)\n", a2, *(unsigned int *)(a1 + 248));
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_493);
    }
    uint64_t v10 = CK_DEFAULT_LOG_INTERNAL_7;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
    {
LABEL_19:
      if (v9) {
        CFRelease(v9);
      }
      return 0;
    }
    *(_DWORD *)stat buf = 138543362;
    CFStringRef v12 = v9;
LABEL_18:
    _os_log_impl(&dword_215163000, v10, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    goto LABEL_19;
  }
  uint64_t v4 = *(void *)(a1 + 256);
  if (a2)
  {
    uint64_t v5 = *(void *)(v4 + 56 * a2);
    unsigned int v6 = a2 - 1;
    uint64_t v7 = *(void *)(v4 + 56 * (a2 - 1));
    uint64_t result = v5 - v7;
    if (v5 >= v7) {
      return result;
    }
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_497);
    }
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    CFStringRef v9 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"section %u/0x%llx is before section %u/0x%llx\n", a2, *(void *)(*(void *)(a1 + 256) + 56 * a2), (a2 - 1), *(void *)(*(void *)(a1 + 256) + 56 * v6));
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_504_0);
    }
    uint64_t v10 = CK_DEFAULT_LOG_INTERNAL_7;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR)) {
      goto LABEL_19;
    }
    *(_DWORD *)stat buf = 138543362;
    CFStringRef v12 = v9;
    goto LABEL_18;
  }
  return *(void *)v4;
}

os_log_t __getOpCtxSectionLengthAtIndex_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __getOpCtxSectionLengthAtIndex_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __getOpCtxSectionLengthAtIndex_block_invoke_494()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __getOpCtxSectionLengthAtIndex_block_invoke_2_501()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

BOOL registerOperation(pthread_mutex_t *a1, const __CFSet *a2, const void *a3)
{
  pthread_mutex_lock(a1);
  int v6 = CFSetContainsValue(a2, a3);
  if (!v6) {
    CFSetAddValue(a2, a3);
  }
  pthread_mutex_unlock(a1);
  return v6 == 0;
}

uint64_t unregisterOperation(pthread_mutex_t *a1, pthread_cond_t *a2, __CFSet *a3, const void *a4)
{
  pthread_mutex_lock(a1);
  CFSetRemoveValue(a3, a4);
  pthread_cond_signal(a2);
  return pthread_mutex_unlock(a1);
}

uint64_t waitForOperation(pthread_mutex_t *a1, pthread_cond_t *a2, const __CFSet *a3, const void *a4)
{
  pthread_mutex_lock(a1);
  while (CFSetContainsValue(a3, a4))
    pthread_cond_wait(a2, a1);
  return pthread_mutex_unlock(a1);
}

uint64_t changeFileFlags(int a1, int a2, int a3)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  memset(&v36, 0, sizeof(v36));
  *__error() = 0;
  int v6 = fstat(a1, &v36);
  if (!v6)
  {
    __uint32_t st_flags = v36.st_flags;
    int v16 = ~a3;
    int v17 = -1;
    while (1)
    {
      *(_DWORD *)stat buf = st_flags;
      int v29 = (const char *)((st_flags | a2) & v16);
      *__error() = 0;
      if (ffsctl(a1, 0xC00C4114uLL, buf, 0) == -1)
      {
        if (*__error() == 25 || *__error() == 45)
        {
          *__error() = 0;
          uint64_t result = fchflags(a1, (st_flags | a2) & v16);
          if (result)
          {
            int v20 = result;
            if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_523_0);
            }
            CFStringRef v21 = CK_DEFAULT_LOG_INTERNAL_7;
            uint64_t result = os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR);
            if (result)
            {
              unint64_t v22 = __error();
              int v23 = strerror(*v22);
              int v24 = *__error();
              v36.dev_t st_dev = 136315906;
              *(void *)&v36.mode_t st_mode = "changeFileFlags";
              WORD2(v36.st_ino) = 1024;
              *(_DWORD *)((char *)&v36.st_ino + 6) = v20;
              HIWORD(v36.st_uid) = 2080;
              *(void *)&v36.st_gid = v23;
              *((_WORD *)&v36.st_rdev + 2) = 1024;
              *(dev_t *)((char *)&v36.st_rdev + 6) = v24;
              _os_log_impl(&dword_215163000, v21, OS_LOG_TYPE_ERROR, "fchflags in %s failed with rc %d: %s (%d)", (uint8_t *)&v36, 0x22u);
              return 0;
            }
          }
          return result;
        }
        if (*__error() != 35)
        {
          if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_515);
          }
          char v8 = CK_DEFAULT_LOG_INTERNAL_7;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
          {
            uint64_t v25 = __error();
            CFStringRef v26 = strerror(*v25);
            int v27 = *__error();
            v36.dev_t st_dev = 136315906;
            *(void *)&v36.mode_t st_mode = "changeFileFlags";
            WORD2(v36.st_ino) = 1024;
            *(_DWORD *)((char *)&v36.st_ino + 6) = -1;
            HIWORD(v36.st_uid) = 2080;
            *(void *)&v36.st_gid = v26;
            *((_WORD *)&v36.st_rdev + 2) = 1024;
            *(dev_t *)((char *)&v36.st_rdev + 6) = v27;
            CFStringRef v12 = "ffsctl in %s failed with rc %d: %s (%d)";
            uint64_t v13 = (uint8_t *)&v36;
            goto LABEL_6;
          }
          return 0xFFFFFFFFLL;
        }
        if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_511_0);
        }
        CFStringRef v19 = CK_DEFAULT_LOG_INTERNAL_7;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
        {
          v36.dev_t st_dev = 136315394;
          *(void *)&v36.mode_t st_mode = "changeFileFlags";
          WORD2(v36.st_ino) = 1024;
          *(_DWORD *)((char *)&v36.st_ino + 6) = v17 + 1;
          _os_log_impl(&dword_215163000, v19, OS_LOG_TYPE_ERROR, "ffsctl in %s failed with EAGAIN (attempt %d)", (uint8_t *)&v36, 0x12u);
        }
      }
      else
      {
        if (*(_DWORD *)buf == HIDWORD(v29)) {
          return 0;
        }
        if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_519);
        }
        uint64_t v18 = CK_DEFAULT_LOG_INTERNAL_7;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
        {
          v36.dev_t st_dev = 136315394;
          *(void *)&v36.mode_t st_mode = "changeFileFlags";
          WORD2(v36.st_ino) = 1024;
          *(_DWORD *)((char *)&v36.st_ino + 6) = v17 + 1;
          _os_log_impl(&dword_215163000, v18, OS_LOG_TYPE_ERROR, "ffsctl in %s failed with lost race (attempt %d)", (uint8_t *)&v36, 0x12u);
        }
        __uint32_t st_flags = HIDWORD(v29);
      }
      if (++v17 >= 9) {
        return 0xFFFFFFFFLL;
      }
    }
  }
  int v7 = v6;
  if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_507_1);
  }
  char v8 = CK_DEFAULT_LOG_INTERNAL_7;
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
  {
    CFStringRef v9 = __error();
    uint64_t v10 = strerror(*v9);
    int v11 = *__error();
    *(_DWORD *)stat buf = 136315906;
    int v29 = "changeFileFlags";
    __int16 v30 = 1024;
    int v31 = v7;
    __int16 v32 = 2080;
    int v33 = v10;
    __int16 v34 = 1024;
    int v35 = v11;
    CFStringRef v12 = "fstat in %s failed with rc %d: %s (%d)";
    uint64_t v13 = buf;
LABEL_6:
    _os_log_impl(&dword_215163000, v8, OS_LOG_TYPE_ERROR, v12, v13, 0x22u);
  }
  return 0xFFFFFFFFLL;
}

os_log_t __changeFileFlags_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __changeFileFlags_block_invoke_508()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __changeFileFlags_block_invoke_512()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __changeFileFlags_block_invoke_516()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __changeFileFlags_block_invoke_520()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

uint64_t getMaxXattrSize(uint64_t a1, int a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v3 = fpathconf(a2, 26);
  if (v3 < 0)
  {
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_526);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
    {
      CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      int v6 = __error();
      int v7 = strerror(*v6);
      CFStringRef v8 = CFStringCreateWithFormat(v5, 0, @"fpathconf failed on \"%s\": %s\n", a1, v7);
      if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_532);
      }
      CFStringRef v9 = CK_DEFAULT_LOG_INTERNAL_7;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)stat buf = 138543362;
        CFStringRef v11 = v8;
        _os_log_impl(&dword_215163000, v9, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v8) {
        CFRelease(v8);
      }
    }
    return 0;
  }
  else if ((unint64_t)(v3 - 64) >= 0xFFFFFFFFFFFFFFC1)
  {
    return 1 << (v3 - 1);
  }
  else
  {
    return 0;
  }
}

os_log_t __getMaxXattrSize_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __getMaxXattrSize_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

uint64_t getFileWriteGeneration(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  long long v14 = xmmword_2151AD560;
  uint64_t v15 = 0;
  uint64_t v13 = 0;
  if (fgetattrlist(a2, &v14, &v13, 8uLL, 0x20u) < 0)
  {
    if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_535);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
    {
      CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      uint64_t v8 = *__error();
      CFStringRef v9 = __error();
      uint64_t v10 = strerror(*v9);
      CFStringRef v11 = CFStringCreateWithFormat(v7, 0, @"fgetattrlist(ATTR_CMN_GEN_COUNT) failed on \"%s\", fd:%d: %d (%s)\n", a1, a2, v8, v10);
      if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_541);
      }
      uint64_t v12 = CK_DEFAULT_LOG_INTERNAL_7;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)stat buf = 138543362;
        CFStringRef v17 = v11;
        _os_log_impl(&dword_215163000, v12, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      if (v11) {
        CFRelease(v11);
      }
    }
  }
  else
  {
    if (HIDWORD(v13))
    {
      uint64_t result = 0;
      *a3 = HIDWORD(v13);
      return result;
    }
    *__error() = 16;
  }
  return 0xFFFFFFFFLL;
}

os_log_t __getFileWriteGeneration_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __getFileWriteGeneration_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __getCacheBlob_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __getCacheBlob_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __getCacheBlob_block_invoke_551()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __getCacheBlob_block_invoke_2_558()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

BOOL canSetXattrOnFile()
{
  return sandbox_check() == 0;
}

uint64_t CKGetCacheBlobFd(uint64_t a1, uint64_t fd, char *name, __CFData **a4, CFErrorRef *a5)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (a4) {
    *a4 = 0;
  }
  if (a5) {
    *a5 = 0;
  }
  if (fd == -1) {
    goto LABEL_26;
  }
  ssize_t v10 = fgetxattr(fd, name, 0, 0, 0, 0);
  if (!v10) {
    goto LABEL_26;
  }
  size_t v11 = v10;
  if (v10 == -1)
  {
    uint64_t v12 = *__error();
    if (v12 != 2 && v12 != 93)
    {
      if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_566);
      }
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
      {
        CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        long long v14 = strerror(v12);
        CFStringRef v15 = CFStringCreateWithFormat(v13, 0, @"fgetxattr failed on \"%s\", fd:%d, xattrName:%s: %d (%s)\n", a1, fd, name, v12, v14);
        if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_572_0);
        }
        int v16 = CK_DEFAULT_LOG_INTERNAL_7;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)stat buf = 138543362;
          CFStringRef v28 = v15;
          _os_log_impl(&dword_215163000, v16, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
        }
        if (v15) {
          CFRelease(v15);
        }
      }
    }
    if (a5)
    {
      CFErrorRef v17 = CKPOSIXErrorCreateWithFormat(v12, @"fgetxattr failed on \"%s\", fd:%d, xattrName:%s", a1, fd, name);
      uint64_t result = 0;
      *a5 = v17;
      return result;
    }
    return 0;
  }
  CFMutableSetRef Mutable = CFDataCreateMutable(0, v10);
  if (!Mutable)
  {
LABEL_26:
    if (a5)
    {
      uint64_t result = 0;
      *a5 = 0;
      return result;
    }
    return 0;
  }
  int v20 = Mutable;
  CFDataSetLength(Mutable, v11);
  MutableBytePtr = CFDataGetMutableBytePtr(v20);
  if (fgetxattr(fd, name, MutableBytePtr, v11, 0, 0) < 0)
  {
    uint64_t v22 = *__error();
    if (v22 != 2 && v22 != 93)
    {
      if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_579_0);
      }
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
      {
        CFAllocatorRef v23 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        int v24 = strerror(v22);
        CFStringRef v25 = CFStringCreateWithFormat(v23, 0, @"fgetxattr failed on \"%s\", fd:%d, xattrName:%s: %d (%s)\n", a1, fd, name, v22, v24);
        if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_583_1);
        }
        CFStringRef v26 = CK_DEFAULT_LOG_INTERNAL_7;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)stat buf = 138543362;
          CFStringRef v28 = v25;
          _os_log_impl(&dword_215163000, v26, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
        }
        if (v25) {
          CFRelease(v25);
        }
      }
    }
    if (a5) {
      *a5 = CKPOSIXErrorCreateWithFormat(v22, @"fgetxattr failled on \"%s\", fd:%d, xattrName:%s", a1, fd, name);
    }
    CFRelease(v20);
    return 0;
  }
  if (a4) {
    *a4 = v20;
  }
  return 1;
}

os_log_t __CKGetCacheBlobFd_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __CKGetCacheBlobFd_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __CKGetCacheBlobFd_block_invoke_576()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __CKGetCacheBlobFd_block_invoke_2_580()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

uint64_t CKSetCacheBlobFd(uint64_t a1, uint64_t fd, char *name, CFDataRef theData, CFErrorRef *a5)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (a5) {
    *a5 = 0;
  }
  if (fd != -1)
  {
    if (!a1 || (getpid(), !sandbox_check()))
    {
      if (theData)
      {
        BytePtr = CFDataGetBytePtr(theData);
        size_t Length = CFDataGetLength(theData);
        if (fsetxattr(fd, name, BytePtr, Length, 0, 0))
        {
          uint64_t v13 = *__error();
          if (v13 == 13)
          {
            if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_599_0);
            }
            if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
            {
              CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
              CFStringRef v15 = strerror(13);
              CFStringRef v16 = CFStringCreateWithFormat(v14, 0, @"fsetxattr failed for \"%s\", fd:%d, xattrName:%s: %d (%s)\n", a1, fd, name, 13, v15);
              if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
                dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_606);
              }
              uint64_t v17 = CK_DEFAULT_LOG_INTERNAL_7;
              if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG)) {
                goto LABEL_41;
              }
              *(_DWORD *)stat buf = 138543362;
              CFStringRef v29 = v16;
              uint64_t v18 = v17;
              os_log_type_t v19 = OS_LOG_TYPE_DEBUG;
LABEL_40:
              _os_log_impl(&dword_215163000, v18, v19, "%{public}@", buf, 0xCu);
LABEL_41:
              if (v16) {
                CFRelease(v16);
              }
            }
          }
          else
          {
            if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_610_0);
            }
            if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
            {
              CFAllocatorRef v25 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
              CFStringRef v26 = strerror(v13);
              CFStringRef v16 = CFStringCreateWithFormat(v25, 0, @"fsetxattr failed for \"%s\", fd:%d, xattrName:%s: %d (%s)\n", a1, fd, name, v13, v26);
              if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
                dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_614_0);
              }
              uint64_t v27 = CK_DEFAULT_LOG_INTERNAL_7;
              if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR)) {
                goto LABEL_41;
              }
              *(_DWORD *)stat buf = 138543362;
              CFStringRef v29 = v16;
              uint64_t v18 = v27;
              os_log_type_t v19 = OS_LOG_TYPE_ERROR;
              goto LABEL_40;
            }
          }
          if (!a5) {
            return 0;
          }
LABEL_44:
          CFErrorRef v10 = CKPOSIXErrorCreateWithFormat(v13, @"fgetxattr failled on \"%s\", fd:%d, xattrName:%s", a1, fd, name);
          goto LABEL_45;
        }
      }
      else if (fremovexattr(fd, name, 0))
      {
        uint64_t v13 = *__error();
        if (v13 != 2 && v13 != 93)
        {
          if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_589_0);
          }
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
          {
            CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
            CFStringRef v21 = strerror(v13);
            CFStringRef v22 = CFStringCreateWithFormat(v20, 0, @"fremovexattr failed on \"%s\", xattrName:%s: %d (%s)\n", a1, name, v13, v21);
            if (CK_DEFAULT_LOG_BLOCK_7 != -1) {
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_595_0);
            }
            CFAllocatorRef v23 = CK_DEFAULT_LOG_INTERNAL_7;
            if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)stat buf = 138543362;
              CFStringRef v29 = v22;
              _os_log_impl(&dword_215163000, v23, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
            }
            if (v22) {
              CFRelease(v22);
            }
          }
        }
        if (!a5) {
          return 0;
        }
        goto LABEL_44;
      }
      return 1;
    }
  }
  if (!a5) {
    return 0;
  }
  CFErrorRef v10 = 0;
LABEL_45:
  uint64_t result = 0;
  *a5 = v10;
  return result;
}

os_log_t __CKSetCacheBlobFd_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __CKSetCacheBlobFd_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __CKSetCacheBlobFd_block_invoke_596()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __CKSetCacheBlobFd_block_invoke_2_603()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __CKSetCacheBlobFd_block_invoke_607()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __CKSetCacheBlobFd_block_invoke_2_611()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

uint64_t openFdWithReadContext(char *a1, unsigned int a2, char **a3, uint64_t a4, uint64_t a5)
{
  *a3 = 0;
  v15[2] = 0;
  v15[3] = 0;
  v15[0] = a1;
  v15[1] = a2;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_DWORD *)a4 = 2;
  *(void *)(a4 + 8) = v15;
  *(void *)(a4 + 48) = openFd;
  *(void *)(a4 + 56) = closeFd;
  *(void *)(a4 + 64) = statFd;
  *(void *)(a4 + 72) = readFd;
  *(void *)(a4 + 80) = getCacheBlobFd;
  *(void *)(a4 + 88) = setCacheBlobFd;
  CFAllocatorRef v14 = 0;
  int v9 = openFd((uint64_t)v15, &v14, 0);
  *(void *)(a4 + 8) = 0;
  if (v9)
  {
    CFErrorRef v10 = v14;
    *((void *)v14 + 1) = v14;
    *((void *)v10 + 2) = a4;
    v10[160] = 3;
    *((void *)v10 + 13) = a1;
    if (a1) {
      size_t v11 = strrchr(a1, 47);
    }
    else {
      size_t v11 = 0;
    }
    if (v11) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = 0;
    }
    *((void *)v10 + 14) = v12;
    if (!a5) {
      goto LABEL_11;
    }
    if ((*(unsigned int (**)(char *, uint64_t, void))(a4 + 64))(v10, a5, 0))
    {
      *((void *)v10 + 10) = *(void *)a5;
      *((void *)v10 + 5) = *(void *)(a5 + 8);
      *((void *)v10 + 11) = *(void *)(a5 + 16);
      v10[34] = *(unsigned char *)(a5 + 24);
      *((void *)v10 + 3) = *(void *)(a5 + 28);
LABEL_11:
      uint64_t result = 0;
      *a3 = v10;
      return result;
    }
    (*(void (**)(void, void, void))(a4 + 56))(*(void *)(a4 + 8), *((void *)v10 + 1), 0);
  }
  return 0xFFFFFFFFLL;
}

uint64_t closeFdWithReadContext(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, void))(a2 + 56))(*(void *)(a2 + 8), *(void *)(a1 + 8), 0);
}

uint64_t CSFileDigester_Destroy(uint64_t a1, CFErrorRef *a2)
{
  if (a1 && (uint64_t v4 = *(void **)(a1 + 40)) != 0)
  {
    CFAllocatorRef v5 = (void *)v4[4];
    if (v5)
    {
      free(v5);
      v4[4] = 0;
    }
    int v6 = (const void *)v4[1];
    if (v6)
    {
      CFRelease(v6);
      v4[1] = 0;
    }
    CFAllocatorRef v7 = (const void *)v4[2];
    if (v7) {
      CFRelease(v7);
    }
    free(v4);
    *(void *)(a1 + 40) = 0;
    return 1;
  }
  else
  {
    CFErrorRef v9 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (CFErrorDomain)*MEMORY[0x263EFFC60], 6, 0);
    uint64_t result = 0;
    *a2 = v9;
  }
  return result;
}

uint64_t _CSFileDigester_InitializeEmpty(uint64_t a1, CFErrorRef *a2)
{
  uint64_t v4 = malloc_type_malloc(0x28uLL, 0x10600402FD52D6EuLL);
  if (v4)
  {
    CFAllocatorRef v5 = v4;
    *(unsigned char *)uint64_t v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
    uint64_t v6 = ccsha256_di();
    v5[3] = v6;
    v5[4] = malloc_type_malloc(*(void *)(v6 + 8) + *(void *)(v6 + 16) + 12, 0xFB71DBC2uLL);
    ccdigest_init();
    *(void *)(a1 + 40) = v5;
    return 1;
  }
  else
  {
    CFErrorRef v8 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (CFErrorDomain)*MEMORY[0x263EFFC60], 1, 0);
    uint64_t result = 0;
    *a2 = v8;
  }
  return result;
}

uint64_t CSFileDigester_InitializeFromKey(uint64_t a1, const __CFData *a2, CFErrorRef *a3)
{
  uint64_t result = _CSFileDigester_InitializeEmpty(a1, a3);
  if (result)
  {
    uint64_t v7 = *(void *)(a1 + 40);
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFIndex Length = CFDataGetLength(a2);
    CFMutableDataRef MutableCopy = CFDataCreateMutableCopy(v8, Length, a2);
    *(void *)(v7 + 8) = MutableCopy;
    if (MutableCopy)
    {
      return 1;
    }
    else
    {
      CSFileDigester_Destroy(a1, a3);
      CFErrorRef v11 = CFErrorCreate(v8, (CFErrorDomain)*MEMORY[0x263EFFC60], 1, 0);
      uint64_t result = 0;
      *a3 = v11;
    }
  }
  return result;
}

void CSFileDigester_SetKey(uint64_t a1, CFDataRef theData)
{
  uint64_t v2 = *(void *)(a1 + 40);
  CFDataRef v3 = *(CFDataRef *)(v2 + 8);
  if (v3 != theData)
  {
    if (v3)
    {
      CFRelease(v3);
      *(void *)(v2 + 8) = 0;
    }
    if (theData)
    {
      CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      CFIndex Length = CFDataGetLength(theData);
      *(void *)(v2 + 8) = CFDataCreateMutableCopy(v5, Length, theData);
    }
  }
}

uint64_t CSFileDigester_Update(uint64_t a1, uint64_t a2, uint64_t a3, CFErrorRef *a4)
{
  CFAllocatorRef v5 = *(unsigned char **)(a1 + 40);
  if (!v5)
  {
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFStringRef v7 = (const __CFString *)*MEMORY[0x263EFFC60];
    CFIndex v8 = 7;
    goto LABEL_5;
  }
  if (*v5)
  {
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFStringRef v7 = (const __CFString *)*MEMORY[0x263EFFC60];
    CFIndex v8 = 6;
LABEL_5:
    CFErrorRef v9 = CFErrorCreate(v6, v7, v8, 0);
    uint64_t result = 0;
    *a4 = v9;
    return result;
  }
  ccdigest_update();
  return 1;
}

uint64_t CSFileDigester_Finalize(uint64_t a1, void *a2, unsigned int a3, CFErrorRef *a4)
{
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5)
  {
    if (*(unsigned char *)v5 || (uint64_t result = _CSFileDigester_FinalizeDigest(a1, a4), result))
    {
      BytePtr = CFDataGetBytePtr(*(CFDataRef *)(v5 + 16));
      if (CFDataGetLength(*(CFDataRef *)(v5 + 16)) <= a3) {
        size_t Length = CFDataGetLength(*(CFDataRef *)(v5 + 16));
      }
      else {
        size_t Length = a3;
      }
      memcpy(a2, BytePtr, Length);
      return 1;
    }
  }
  else
  {
    CFErrorRef v11 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (CFErrorDomain)*MEMORY[0x263EFFC60], 7, 0);
    uint64_t result = 0;
    *a4 = v11;
  }
  return result;
}

uint64_t _CSFileDigester_FinalizeDigest(uint64_t a1, CFErrorRef *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 40);
  if (*(void *)(v4 + 8) || *(void *)(a1 + 16))
  {
    long long v14 = 0u;
    long long v15 = 0u;
    (*(void (**)(void))(*(void *)(v4 + 24) + 56))();
    cc_clear();
    if (*(void *)(v4 + 8))
    {
      CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
LABEL_5:
      *(_OWORD *)bytes = 0u;
      long long v13 = 0u;
      ccsha256_di();
      CFDataGetLength(*(CFDataRef *)(v4 + 8));
      CFDataGetBytePtr(*(CFDataRef *)(v4 + 8));
      cchmac();
      *(void *)(v4 + 16) = CFDataCreate(v5, bytes, 32);
      uint64_t result = 1;
      *(unsigned char *)uint64_t v4 = 1;
      return result;
    }
    *(_OWORD *)bytes = 0u;
    long long v13 = 0u;
    ccsha256_di();
    CFDataGetLength(*(CFDataRef *)(a1 + 16));
    CFDataGetBytePtr(*(CFDataRef *)(a1 + 16));
    int v7 = cchkdf();
    CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    if (!v7)
    {
      *(void *)(v4 + 8) = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], bytes, 32);
      cc_clear();
      goto LABEL_5;
    }
    CFStringRef v8 = (const __CFString *)*MEMORY[0x263EFFC60];
    CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFIndex v10 = 2;
  }
  else
  {
    CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFStringRef v8 = (const __CFString *)*MEMORY[0x263EFFC60];
    CFIndex v10 = 6;
  }
  CFErrorRef v11 = CFErrorCreate(v9, v8, v10, 0);
  uint64_t result = 0;
  *a2 = v11;
  return result;
}

uint64_t CSFileDigester_Verify(uint64_t a1, uint64_t a2, uint64_t a3, CFErrorRef *a4)
{
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5)
  {
    if (*(unsigned char *)v5 || (uint64_t result = _CSFileDigester_FinalizeDigest(a1, a4), result))
    {
      CFDataGetBytePtr(*(CFDataRef *)(v5 + 16));
      return cc_cmp_safe() == 0;
    }
  }
  else
  {
    CFErrorRef v7 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (CFErrorDomain)*MEMORY[0x263EFFC60], 7, 0);
    uint64_t result = 0;
    *a4 = v7;
  }
  return result;
}

uint64_t CSFileDigester_ExportCredential(uint64_t a1, CFMutableDataRef *a2, CFErrorRef *a3)
{
  if (!a2) {
    return 0;
  }
  *a2 = 0;
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5)
  {
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    if (*(unsigned char *)v5)
    {
      CFIndex Length = CFDataGetLength(*(CFDataRef *)(v5 + 8));
      *a2 = CFDataCreateMutableCopy(v6, Length, *(CFDataRef *)(v5 + 8));
      return 1;
    }
    CFStringRef v10 = (const __CFString *)*MEMORY[0x263EFFC60];
    CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFIndex v11 = 3;
  }
  else
  {
    CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFStringRef v10 = (const __CFString *)*MEMORY[0x263EFFC60];
    CFIndex v11 = 7;
  }
  CFErrorRef v12 = CFErrorCreate(v9, v10, v11, 0);
  uint64_t result = 0;
  *a3 = v12;
  return result;
}

uint64_t CSSetSQLiteCorruptionTestingEnabled(uint64_t result)
{
  if (enabled != result)
  {
    callNumber = 0;
    corruptionHappened = 0;
  }
  enabled = result;
  return result;
}

uint64_t CSSQLiteCorruptionTestingEnabled()
{
  return enabled;
}

uint64_t CSSetContinueOnCorruptDB(uint64_t result)
{
  continueOnCorruptDB = result;
  return result;
}

uint64_t CSContinueOnCorruptDB()
{
  return continueOnCorruptDB;
}

uint64_t CSSetExitOnCorruptDB(uint64_t result)
{
  exitOnCorruptDB = result;
  return result;
}

uint64_t CSExitOnCorruptDB()
{
  return exitOnCorruptDB;
}

uint64_t CS_corruption_causing_sqlite3_open_v2(const char *a1, sqlite3 **a2, int a3, const char *a4)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (CSSQLiteCorruptionTestingShouldCorrupt())
  {
    if (CK_DEFAULT_LOG_BLOCK_8 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_8, &__block_literal_global_9);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_8, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v8 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"chunk store database corruption: simulating corruption in sqlite3_open_v2");
      if (CK_DEFAULT_LOG_BLOCK_8 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_8, &__block_literal_global_6_5);
      }
      CFAllocatorRef v9 = CK_DEFAULT_LOG_INTERNAL_8;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_8, OS_LOG_TYPE_ERROR))
      {
        int v11 = 138543362;
        CFStringRef v12 = v8;
        _os_log_impl(&dword_215163000, v9, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v11, 0xCu);
      }
      if (v8) {
        CFRelease(v8);
      }
    }
    return 11;
  }
  else
  {
    return sqlite3_open_v2(a1, a2, a3, a4);
  }
}

uint64_t CS_corruption_causing_sqlite3_step(sqlite3_stmt *a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (CSSQLiteCorruptionTestingShouldCorrupt())
  {
    if (CK_DEFAULT_LOG_BLOCK_8 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_8, &__block_literal_global_9_0);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_8, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v2 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"chunk store database corruption: simulating corruption in sqlite3_step");
      if (CK_DEFAULT_LOG_BLOCK_8 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_8, &__block_literal_global_15_0);
      }
      CFDataRef v3 = CK_DEFAULT_LOG_INTERNAL_8;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_8, OS_LOG_TYPE_ERROR))
      {
        int v5 = 138543362;
        CFStringRef v6 = v2;
        _os_log_impl(&dword_215163000, v3, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v5, 0xCu);
      }
      if (v2) {
        CFRelease(v2);
      }
    }
    return 11;
  }
  else
  {
    return sqlite3_step(a1);
  }
}

uint64_t CS_corruption_causing_sqlite3_prepare_v2(sqlite3 *a1, const char *a2, int a3, sqlite3_stmt **a4, const char **a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (CSSQLiteCorruptionTestingShouldCorrupt())
  {
    if (CK_DEFAULT_LOG_BLOCK_8 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_8, &__block_literal_global_18_1);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_8, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v10 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"chunk store database corruption: simulating corruption in sqlite3_prepare_v2");
      if (CK_DEFAULT_LOG_BLOCK_8 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_8, &__block_literal_global_24_0);
      }
      int v11 = CK_DEFAULT_LOG_INTERNAL_8;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_8, OS_LOG_TYPE_ERROR))
      {
        int v13 = 138543362;
        CFStringRef v14 = v10;
        _os_log_impl(&dword_215163000, v11, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v13, 0xCu);
      }
      if (v10) {
        CFRelease(v10);
      }
    }
    return 11;
  }
  else
  {
    return sqlite3_prepare_v2(a1, a2, a3, a4, a5);
  }
}

uint64_t CS_corruption_causing_sqlite3_exec(sqlite3 *a1, const char *a2, int (__cdecl *a3)(void *, int, char **, char **), void *a4, char **a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (CSSQLiteCorruptionTestingShouldCorrupt())
  {
    if (CK_DEFAULT_LOG_BLOCK_8 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_8, &__block_literal_global_27);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_8, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v10 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"chunk store database corruption: simulating corruption in sqlite3_exec");
      if (CK_DEFAULT_LOG_BLOCK_8 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_8, &__block_literal_global_33_3);
      }
      int v11 = CK_DEFAULT_LOG_INTERNAL_8;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_8, OS_LOG_TYPE_ERROR))
      {
        int v13 = 138543362;
        CFStringRef v14 = v10;
        _os_log_impl(&dword_215163000, v11, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v13, 0xCu);
      }
      if (v10) {
        CFRelease(v10);
      }
    }
    return 11;
  }
  else
  {
    return sqlite3_exec(a1, a2, a3, a4, a5);
  }
}

uint64_t CSSQLiteCorruptionTestingShouldCorrupt()
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (!enabled) {
    return 0;
  }
  if ((CSSQLiteCorruptionTestingShouldCorrupt_initLogged & 1) == 0)
  {
    if (CK_DEFAULT_LOG_BLOCK_8 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_8, &__block_literal_global_36);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_8, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v0 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"chunk store database corruption: initializing with probability %d", 60);
      if (CK_DEFAULT_LOG_BLOCK_8 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_8, &__block_literal_global_42);
      }
      uint64_t v1 = CK_DEFAULT_LOG_INTERNAL_8;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)stat buf = 138543362;
        CFStringRef v7 = v0;
        _os_log_impl(&dword_215163000, v1, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v0) {
        CFRelease(v0);
      }
    }
    CSSQLiteCorruptionTestingShouldCorrupt_initLogged = 1;
  }
  if (corruptionHappened) {
    return 1;
  }
  if ((CSSQLiteCorruptionTestingShouldCorrupt_randSeeded & 1) == 0)
  {
    unsigned int v3 = time(0);
    srand(v3);
    CSSQLiteCorruptionTestingShouldCorrupt_randSeeded = 1;
  }
  if (callNumber < 0)
  {
    uint64_t result = 0;
    ++callNumber;
  }
  else
  {
    int v4 = rand();
    ++callNumber;
    HIDWORD(v5) = -286331153 * v4 + 143165576;
    LODWORD(v5) = HIDWORD(v5);
    if ((v5 >> 2) > 0x4444444) {
      return 0;
    }
    uint64_t result = 1;
    corruptionHappened = 1;
  }
  return result;
}

os_log_t __CSSQLiteCorruptionTestingShouldCorrupt_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_8 = (uint64_t)result;
  return result;
}

os_log_t __CSSQLiteCorruptionTestingShouldCorrupt_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_8 = (uint64_t)result;
  return result;
}

const void **CKChunkSignatureGeneratorV2Finalize(uint64_t a1)
{
  os_log_t result = **(const void ****)(a1 + 48);
  if (result)
  {
    os_log_t result = (const void **)CSContext_Destroy(result, 0);
    **(void **)(a1 + 48) = 0;
  }
  return result;
}

uint64_t CKChunkSignatureGeneratorV2Init(uint64_t a1, uint64_t a2, CFErrorRef *a3)
{
  if (CKChunkDigestArgumentsGetClass(a2) != 2) {
    return 0;
  }
  if (CKChunkDigestArgumentsBoundaryKey(a2))
  {
    CFDataRef v6 = (const __CFData *)CKChunkDigestArgumentsBoundaryKey(a2);
    uint64_t v7 = CSContext_InititializeFromBoundaryKey(v6, 0, *(CFMutableDataRef ***)(a1 + 48), a3);
  }
  else
  {
    uint64_t v7 = CSContext_Initialize(*(void **)(a1 + 48), a3);
  }
  uint64_t v8 = v7;
  if (v7 && CSChunkDigester_Initialize(**(void **)(a1 + 48), a3))
  {
    *(_DWORD *)(a1 + 40) = 0;
    return 1;
  }
  return v8;
}

uint64_t CKChunkSignatureGeneratorV2Update(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 40) += a3;
  CSChunkDigester_Update(**(void **)(a1 + 48), a2, a3, 0);
  return 1;
}

uint64_t CKChunkSignatureGeneratorV2Finish(uint64_t a1, uint64_t a2, void *a3, CFTypeRef *a4)
{
  unint64_t v5 = 0;
  CFDataRef v6 = 0;
  CFTypeRef v34 = 0;
  CFTypeRef cf = 0;
  uint64_t v7 = (CFTypeRef *)(a1 + 32);
  if (*(void *)(a1 + 32)) {
    goto LABEL_2;
  }
  uint64_t v12 = CKChunkDigestArgumentsV2ChunkKey(*(void *)(a1 + 24));
  if (v12)
  {
    CFDataRef v13 = (const __CFData *)v12;
    CFStringRef v14 = (unsigned char *)CKChunkDigestResultsChunkSignature(a2);
    uint64_t v15 = CKChunkSignatureSize(v14);
    CFTypeRef v33 = 0;
    BytePtr = (UInt8 *)CFDataGetBytePtr(v13);
    CFAllocatorRef v17 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFIndex v18 = CKChunkEncryptionKeySize(BytePtr);
    CFDataRef v19 = CFDataCreate(v17, BytePtr + 1, v18);
    CSChunkDigester_SetKey(**(void **)(a1 + 48), v19);
    CFRelease(v19);
    if (CSChunkDigester_Verify(**(void **)(a1 + 48), (uint64_t)(v14 + 1), v15, (CFErrorRef *)&v33)
      && (CKChunkDigestResultsV2Create(v7, v14, BytePtr, *(_DWORD *)(a1 + 40)), (uint64_t v20 = *(void *)(a1 + 32)) != 0))
    {
      if (!a2 || CKChunkDigestResultsEqual(v20, a2))
      {
        unint64_t v5 = 0;
        CFDataRef v6 = 0;
LABEL_2:
        if (a3)
        {
          if (*v7)
          {
            CFRetain(*v7);
            CFTypeRef v8 = *v7;
          }
          else
          {
            CFTypeRef v8 = 0;
          }
          *a3 = v8;
        }
        uint64_t v21 = 1;
        CFTypeRef v22 = cf;
        goto LABEL_14;
      }
      CFErrorRef v24 = CKErrorCreateWithFormat(4, @"CSChunkDigester_Verify succeeded by chunk digest and expected chunk digest not equal");
    }
    else
    {
      if (v33) {
        CFRelease(v33);
      }
      CFTypeRef v33 = 0;
      CFErrorRef v24 = CFErrorCreate(v17, @"com.apple.chunkinglibrary", 4, 0);
    }
    CFTypeRef cf = v24;
    unint64_t v5 = 0;
    goto LABEL_32;
  }
  LOBYTE(v33) = CKChunkDigestArgumentsChunkSchemeByte(*(void *)(a1 + 24));
  unint64_t v5 = (unsigned char *)CKChunkSchemeAndSignatureSize(&v33);
  unsigned int v25 = CKChunkSignatureSize(&v33);
  if (!v5) {
    goto LABEL_32;
  }
  unsigned int v26 = v25;
  uint64_t v27 = malloc_type_calloc(1uLL, (size_t)v5, 0x315EF7FuLL);
  unint64_t v5 = v27;
  if (!v27) {
    goto LABEL_32;
  }
  *uint64_t v27 = (_BYTE)v33;
  if (!CSChunkDigester_Finalize(**(void **)(a1 + 48), v27 + 1, v26, (CFErrorRef *)&cf)) {
    goto LABEL_32;
  }
  unsigned __int8 v32 = CKChunkDigestArgumentsChunkEncryptionKeySchemeByte(*(void *)(a1 + 24));
  size_t v28 = CKChunkSchemeAndEncryptionKeySize(&v32);
  size_t v29 = CKChunkEncryptionKeySize(&v32);
  CFDataRef v6 = 0;
  if (!CSChunkDigester_ExportCredential(**(void **)(a1 + 48), (CFMutableDataRef *)&v34, (CFErrorRef *)&cf)|| !v34)
  {
    goto LABEL_33;
  }
  if (v29 != CFDataGetLength((CFDataRef)v34))
  {
LABEL_32:
    CFDataRef v6 = 0;
    goto LABEL_33;
  }
  uint64_t v30 = (unsigned __int8 *)malloc_type_calloc(1uLL, v28, 0x50F10F6uLL);
  CFDataRef v6 = v30;
  if (v30)
  {
    *uint64_t v30 = v32;
    int v31 = CFDataGetBytePtr((CFDataRef)v34);
    memcpy(v6 + 1, v31, v29);
    CKChunkDigestResultsV2Create(v7, v5, v6, *(_DWORD *)(a1 + 40));
    if (*(void *)(a1 + 32)) {
      goto LABEL_2;
    }
  }
LABEL_33:
  uint64_t v21 = 0;
  CFTypeRef v22 = cf;
  if (a4 && cf)
  {
    CFRetain(cf);
    uint64_t v21 = 0;
    CFTypeRef v22 = cf;
    *a4 = cf;
  }
LABEL_14:
  if (v22) {
    CFRelease(v22);
  }
  CFTypeRef cf = 0;
  if (v34) {
    CFRelease(v34);
  }
  CFTypeRef v34 = 0;
  free(v5);
  free(v6);
  return v21;
}

uint64_t CSChunkDigester_Destroy(uint64_t a1, CFErrorRef *a2)
{
  if (a1 && (uint64_t v4 = *(void *)(a1 + 48)) != 0)
  {
    unint64_t v5 = *(void **)(v4 + 24);
    if (v5)
    {
      free(v5);
      *(void *)(v4 + 24) = 0;
    }
    CFDataRef v6 = *(const void **)(v4 + 32);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(v4 + 32) = 0;
    }
    if (*(void *)v4) {
      CFRelease(*(CFTypeRef *)v4);
    }
    free((void *)v4);
    *(void *)(a1 + 48) = 0;
    return 1;
  }
  else
  {
    CFErrorRef v8 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (CFErrorDomain)*MEMORY[0x263EFFC60], 6, 0);
    uint64_t result = 0;
    *a2 = v8;
  }
  return result;
}

uint64_t _CSChunkDigester_InitializeEmpty(uint64_t a1, CFErrorRef *a2)
{
  uint64_t v4 = malloc_type_malloc(0x28uLL, 0x10600406D85BF17uLL);
  if (v4)
  {
    unint64_t v5 = v4;
    uint64_t v6 = ccsha256_di();
    v5[2] = v6;
    v5[3] = malloc_type_malloc(*(void *)(v6 + 8) + *(void *)(v6 + 16) + 12, 0xCB1A37D6uLL);
    ccdigest_init();
    *((unsigned char *)v5 + 8) = 0;
    *unint64_t v5 = 0;
    v5[4] = 0;
    uint64_t result = 1;
    *(void *)(a1 + 48) = v5;
  }
  else
  {
    CFErrorRef v8 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (CFErrorDomain)*MEMORY[0x263EFFC60], 1, 0);
    uint64_t result = 0;
    *a2 = v8;
  }
  return result;
}

uint64_t CSChunkDigester_InitializeFromKey(uint64_t a1, const __CFData *a2, CFErrorRef *a3)
{
  uint64_t result = _CSChunkDigester_InitializeEmpty(a1, a3);
  if (result)
  {
    uint64_t v7 = *(void *)(a1 + 48);
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFIndex Length = CFDataGetLength(a2);
    CFMutableDataRef MutableCopy = CFDataCreateMutableCopy(v8, Length, a2);
    *(void *)(v7 + 32) = MutableCopy;
    if (MutableCopy)
    {
      return 1;
    }
    else
    {
      CSChunkDigester_Destroy(a1, a3);
      CFErrorRef v11 = CFErrorCreate(v8, (CFErrorDomain)*MEMORY[0x263EFFC60], 1, 0);
      uint64_t result = 0;
      *a3 = v11;
    }
  }
  return result;
}

uint64_t CSChunkDigester_Update(uint64_t a1, uint64_t a2, uint64_t a3, CFErrorRef *a4)
{
  if (*(void *)(a1 + 48))
  {
    ccdigest_update();
    return 1;
  }
  else
  {
    CFErrorRef v6 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (CFErrorDomain)*MEMORY[0x263EFFC60], 7, 0);
    uint64_t result = 0;
    *a4 = v6;
  }
  return result;
}

uint64_t CSChunkDigester_Finalize(uint64_t a1, void *a2, unsigned int a3, CFErrorRef *a4)
{
  uint64_t v5 = *(void *)(a1 + 48);
  if (v5)
  {
    if (*(unsigned char *)(v5 + 8) || (uint64_t result = _CSChunkDigester_FinalizeDigest(a1, a4), result))
    {
      BytePtr = CFDataGetBytePtr(*(CFDataRef *)v5);
      if (CFDataGetLength(*(CFDataRef *)v5) <= a3) {
        size_t Length = CFDataGetLength(*(CFDataRef *)v5);
      }
      else {
        size_t Length = a3;
      }
      memcpy(a2, BytePtr, Length);
      return 1;
    }
  }
  else
  {
    CFErrorRef v11 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (CFErrorDomain)*MEMORY[0x263EFFC60], 7, 0);
    uint64_t result = 0;
    *a4 = v11;
  }
  return result;
}

uint64_t _CSChunkDigester_FinalizeDigest(uint64_t a1, CFErrorRef *a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 48);
  if (!*(void *)(v4 + 32) && !*(void *)(a1 + 24))
  {
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFStringRef v8 = (const __CFString *)*MEMORY[0x263EFFC60];
    CFIndex v9 = 6;
    goto LABEL_8;
  }
  ccsha256_di();
  long long v20 = 0u;
  long long v21 = 0u;
  (*(void (**)(void))(*(void *)(v4 + 16) + 56))();
  cc_clear();
  CFDataRef v5 = *(const __CFData **)(v4 + 32);
  if (!v5)
  {
    *(_OWORD *)CFStringRef v14 = 0u;
    long long v15 = 0u;
    CFDataGetLength(*(CFDataRef *)(a1 + 24));
    CFDataGetBytePtr(*(CFDataRef *)(a1 + 24));
    int v7 = cchkdf();
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    if (v7) {
      goto LABEL_7;
    }
    *(void *)(v4 + 32) = CFDataCreate(v6, v14, 32);
    cc_clear();
    CFDataRef v5 = *(const __CFData **)(v4 + 32);
  }
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  *(_OWORD *)CFStringRef v14 = 0u;
  long long v15 = 0u;
  CFDataGetLength(v5);
  CFDataGetBytePtr(*(CFDataRef *)(v4 + 32));
  if (cchkdf())
  {
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
LABEL_7:
    CFStringRef v8 = (const __CFString *)*MEMORY[0x263EFFC60];
    CFIndex v9 = 2;
LABEL_8:
    CFErrorRef v10 = CFErrorCreate(v6, v8, v9, 0);
    uint64_t result = 0;
    *a2 = v10;
    return result;
  }
  *(_OWORD *)bytes = 0u;
  long long v13 = 0u;
  ccsha256_di();
  cchmac();
  *(void *)uint64_t v4 = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], bytes, 32);
  uint64_t result = 1;
  *(unsigned char *)(v4 + 8) = 1;
  return result;
}

void CSChunkDigester_SetKey(uint64_t a1, CFDataRef theData)
{
  uint64_t v2 = *(void *)(a1 + 48);
  CFDataRef v3 = *(CFDataRef *)(v2 + 32);
  if (v3 != theData)
  {
    if (v3)
    {
      CFRelease(v3);
      *(void *)(v2 + 32) = 0;
    }
    if (theData)
    {
      CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      CFIndex Length = CFDataGetLength(theData);
      *(void *)(v2 + 32) = CFDataCreateMutableCopy(v5, Length, theData);
    }
  }
}

uint64_t CSChunkDigester_Verify(uint64_t a1, uint64_t a2, uint64_t a3, CFErrorRef *a4)
{
  uint64_t v5 = *(void *)(a1 + 48);
  if (v5)
  {
    if (*(unsigned char *)(v5 + 8) || (uint64_t result = _CSChunkDigester_FinalizeDigest(a1, a4), result))
    {
      CFDataGetBytePtr(*(CFDataRef *)v5);
      return cc_cmp_safe() == 0;
    }
  }
  else
  {
    CFErrorRef v7 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (CFErrorDomain)*MEMORY[0x263EFFC60], 7, 0);
    uint64_t result = 0;
    *a4 = v7;
  }
  return result;
}

uint64_t CSChunkDigester_ExportCredential(uint64_t a1, CFMutableDataRef *a2, CFErrorRef *a3)
{
  uint64_t v4 = *(void *)(a1 + 48);
  if (v4)
  {
    CFDataRef v5 = *(const __CFData **)(v4 + 32);
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    if (v5)
    {
      CFIndex Length = CFDataGetLength(v5);
      *a2 = CFDataCreateMutableCopy(v6, Length, *(CFDataRef *)(v4 + 32));
      return 1;
    }
    CFStringRef v11 = (const __CFString *)*MEMORY[0x263EFFC60];
    CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFIndex v12 = 3;
  }
  else
  {
    CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFStringRef v11 = (const __CFString *)*MEMORY[0x263EFFC60];
    CFIndex v12 = 7;
  }
  CFErrorRef v13 = CFErrorCreate(v10, v11, v12, 0);
  uint64_t result = 0;
  *a3 = v13;
  return result;
}

uint64_t CKFileSignatureGeneratorV2Finalize(uint64_t a1)
{
  return CSContext_Destroy(**(const void ****)(a1 + 48), 0);
}

uint64_t CKFileSignatureGeneratorV2Init(uint64_t a1, uint64_t a2, CFErrorRef *a3)
{
  if (CKFileDigestArgumentsGetClass(a2) != 2) {
    return 0;
  }
  if (CKFileDigestArgumentsBoundaryKey(a2))
  {
    CFDataRef v6 = (const __CFData *)CKFileDigestArgumentsBoundaryKey(a2);
    uint64_t result = CSContext_InititializeFromBoundaryKey(v6, 0, *(CFMutableDataRef ***)(a1 + 48), a3);
    if (!result) {
      return result;
    }
  }
  else
  {
    uint64_t result = CKFileDigestArgumentsFileKey(a2);
    if (!result) {
      return result;
    }
    CFDataRef v8 = (const __CFData *)CKFileDigestArgumentsFileKey(a2);
    uint64_t result = CSContext_InitializeFromFileKey(v8, 0, *(void **)(a1 + 48), a3);
    if (!result) {
      return result;
    }
  }
  if (CKFileDigestArgumentsBoundaryKey(a2))
  {
    uint64_t result = CSFileDigester_Initialize(**(void **)(a1 + 48), a3);
    if (!result) {
      return result;
    }
LABEL_13:
    *(void *)(a1 + 40) = 0;
    CSFileDigester_Update(**(void **)(a1 + 48), (uint64_t)"com.apple.DataObjectSaltV2", 26, 0);
    return 1;
  }
  uint64_t result = CKFileDigestArgumentsFileKey(a2);
  if (result)
  {
    uint64_t v9 = **(void **)(a1 + 48);
    CFDataRef v10 = (const __CFData *)CKFileDigestArgumentsFileKey(a2);
    uint64_t result = CSFileDigester_InitializeFromKey(v9, v10, a3);
    if (result) {
      goto LABEL_13;
    }
  }
  return result;
}

uint64_t CKFileSignatureGeneratorV2Update(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFDataRef v3 = *(uint64_t **)(a1 + 48);
  *(void *)(a1 + 40) += a3;
  CSFileDigester_Update(*v3, a2, a3, 0);
  return 1;
}

uint64_t CKFileSignatureGeneratorV2Finish(uint64_t a1, uint64_t a2, void *a3, CFTypeRef *a4)
{
  CFTypeRef cf = 0;
  CFErrorRef v7 = (void *)(a1 + 32);
  CFTypeRef v6 = *(CFTypeRef *)(a1 + 32);
  if (v6) {
    goto LABEL_2;
  }
  if (a2)
  {
    CFErrorRef v13 = (unsigned char *)CKFileDigestResultsFileSignature(a2);
    uint64_t v14 = CKFileSignatureSize(v13);
    CFTypeRef v23 = 0;
    if (!CKFileDigestResultsFileVerificationKey(a2)) {
      CKFileSignatureGeneratorV2Finish_cold_1();
    }
    uint64_t v15 = **(void **)(a1 + 48);
    CFDataRef v16 = (const __CFData *)CKFileDigestResultsFileVerificationKey(a2);
    CSFileDigester_SetKey(v15, v16);
    if (CSFileDigester_Verify(**(void **)(a1 + 48), (uint64_t)(v13 + 1), v14, (CFErrorRef *)&v23))
    {
      uint64_t v17 = *(void *)(a1 + 40);
      long long v18 = (const void *)CKFileDigestResultsFileVerificationKey(a2);
      CKFileDigestResultsCreate(v7, v13, v17, v18);
      CFTypeRef v6 = *(CFTypeRef *)(a1 + 32);
      if (v6)
      {
LABEL_2:
        CFDataRef v8 = 0;
LABEL_3:
        if (a3)
        {
          CFRetain(v6);
          *a3 = *v7;
        }
        uint64_t v9 = 1;
        CFTypeRef v6 = cf;
        goto LABEL_6;
      }
    }
    else
    {
      if (v23) {
        CFRelease(v23);
      }
      CFTypeRef v23 = 0;
      CFTypeRef v6 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], @"com.apple.chunkinglibrary", 3, 0);
      CFTypeRef cf = v6;
    }
    CFDataRef v8 = 0;
  }
  else
  {
    char v22 = CKFileDigestArgumentsFileSchemeByte(*(void *)(a1 + 24));
    CFDataRef v8 = (unsigned char *)CKFileSchemeAndSignatureSize(&v22);
    unsigned int v19 = CKFileSignatureSize(&v22);
    CFTypeRef v23 = 0;
    if (v8)
    {
      unsigned int v20 = v19;
      long long v21 = malloc_type_calloc(1uLL, (size_t)v8, 0x8E7FFDE2uLL);
      CFDataRef v8 = v21;
      if (v21)
      {
        *long long v21 = v22;
        if (CSFileDigester_Finalize(**(void **)(a1 + 48), v21 + 1, v20, (CFErrorRef *)&cf))
        {
          if (CSFileDigester_ExportCredential(**(void **)(a1 + 48), (CFMutableDataRef *)&v23, (CFErrorRef *)&cf)&& v23)
          {
            CKFileDigestResultsV2Create(v7, v8, *(void *)(a1 + 40), v23);
            if (v23) {
              CFRelease(v23);
            }
            CFTypeRef v6 = (CFTypeRef)*v7;
            if (*v7) {
              goto LABEL_3;
            }
          }
        }
      }
    }
    CFTypeRef v6 = cf;
  }
  uint64_t v9 = 0;
  if (a4 && v6)
  {
    CFRetain(v6);
    uint64_t v9 = 0;
    CFTypeRef v6 = cf;
    *a4 = cf;
  }
LABEL_6:
  if (v6) {
    CFRelease(v6);
  }
  CFTypeRef cf = 0;
  free(v8);
  return v9;
}

uint64_t cfb_start(_CCCryptor *a1, _OWORD *a2, void *a3)
{
  if (a3)
  {
    *a3 = 16;
    uint64_t v4 = a3 + 2;
    if (a2)
    {
      _OWORD *v4 = *a2;
    }
    else
    {
      *(void *)uint64_t v4 = 0;
      a3[3] = 0;
    }
    a3[1] = 0;
    uint64_t v5 = ecb_encrypt(a1, v4, a3 + 2, 16);
    if (v5) {
      fwrite("Failed to encrypt the IV\n", 0x19uLL, 1uLL, (FILE *)*MEMORY[0x263EF8348]);
    }
  }
  else
  {
    fwrite("Parameter validation failed!\n", 0x1DuLL, 1uLL, (FILE *)*MEMORY[0x263EF8348]);
    return 4294962996;
  }
  return v5;
}

uint64_t ecb_encrypt(_CCCryptor *a1, void *dataOut, void *dataIn, int a4)
{
  size_t dataOutMoved = 0;
  uint64_t v5 = CCCryptorUpdate(a1, dataIn, a4, dataOut, a4, &dataOutMoved);
  if (v5 || dataOutMoved != a4) {
    fprintf((FILE *)*MEMORY[0x263EF8348], "Error occurred while encrypting block during chaining mode. status = %d\n", v5);
  }
  return v5;
}

uint64_t cfb_encrypt(_CCCryptor *a1, char *a2, unsigned char *a3, uint64_t a4, void *a5)
{
  if (!a2 || (uint64_t v5 = a3) == 0 || !a5)
  {
    fwrite("Parameter validation failed!\n", 0x1DuLL, 1uLL, (FILE *)*MEMORY[0x263EF8348]);
    return 4294962996;
  }
  if (*a5 > 0x80uLL) {
    return 4294962996;
  }
  unint64_t v8 = a5[1];
  if (v8 > 0x7F) {
    return 4294962996;
  }
  if (a4)
  {
    uint64_t v9 = a2;
    do
    {
      if (v8 == *a5)
      {
        uint64_t v11 = ecb_encrypt(a1, a5 + 2, a5 + 18, v8);
        if (v11)
        {
          uint64_t v14 = v11;
          fwrite("Encryption failed!\n", 0x13uLL, 1uLL, (FILE *)*MEMORY[0x263EF8348]);
          return v14;
        }
        unint64_t v8 = 0;
        a5[1] = 0;
      }
      char v12 = *v9++;
      char v13 = *((unsigned char *)a5 + v8 + 16) ^ v12;
      *v5++ = v13;
      *((unsigned char *)a5 + a5[1] + 144) = v13;
      unint64_t v8 = a5[1] + 1;
      a5[1] = v8;
      --a4;
    }
    while (a4);
  }
  return 0;
}

uint64_t cfb_decrypt(_CCCryptor *a1, char *a2, unsigned char *a3, uint64_t a4, void *a5)
{
  if (!a2 || (uint64_t v5 = a3) == 0 || !a5)
  {
    fwrite("Parameter validation failed!\n", 0x1DuLL, 1uLL, (FILE *)*MEMORY[0x263EF8348]);
    return 4294962996;
  }
  if (*a5 > 0x80uLL) {
    return 4294962996;
  }
  unint64_t v8 = a5[1];
  if (v8 > 0x7F) {
    return 4294962996;
  }
  if (a4)
  {
    uint64_t v9 = a2;
    do
    {
      if (v8 == *a5)
      {
        uint64_t v11 = ecb_encrypt(a1, a5 + 2, a5 + 18, v8);
        if (v11)
        {
          uint64_t v13 = v11;
          fwrite("Decryption failed!\n", 0x13uLL, 1uLL, (FILE *)*MEMORY[0x263EF8348]);
          return v13;
        }
        unint64_t v8 = 0;
        a5[1] = 0;
      }
      *((unsigned char *)a5 + v8 + 144) = *v9;
      char v12 = *v9++;
      *v5++ = *((unsigned char *)a5 + a5[1] + 16) ^ v12;
      unint64_t v8 = a5[1] + 1;
      a5[1] = v8;
      --a4;
    }
    while (a4);
  }
  return 0;
}

uint64_t done_unimp()
{
  return 0;
}

uint64_t CKFileDigestArgumentsV1Alloc(void *a1)
{
  *a1 = 0;
  uint64_t v3 = 0;
  uint64_t result = CKFileDigestArgumentsAllocate(&v3, 1, 4);
  if (result) {
    *a1 = v3;
  }
  return result;
}

uint64_t CKFileDigestArgumentsV1FileScheme(uint64_t a1)
{
  return **(unsigned int **)(a1 + 24);
}

uint64_t CKFileDigestArgumentsV1WithPackageCreate(CFTypeRef *a1, char a2, CFTypeRef *a3)
{
  return _CKFileDigestArgumentsV1Create(a1, 2, a2, a3);
}

CFStringRef CKFileDigestArgumentsV1CopyDescription(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 20)) {
    uint64_t v1 = (const char *)&unk_2151AE79A;
  }
  else {
    uint64_t v1 = "un";
  }
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"v1 %sencrypted", v1);
}

uint64_t CKChunkDigestResultsGetClass(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t CKChunkDigestResultsAllocate(uint64_t *a1, int a2, uint64_t a3)
{
  *a1 = 0;
  size_t v5 = a3 + 56;
  uint64_t v6 = CKTypeRegister(&CKChunkDigestResultsGetTypeID_typeID);
  uint64_t result = CKTypeCreateInstance_(0, v6, v5);
  if (result)
  {
    *(_DWORD *)(result + 16) = a2;
    *(void *)(result + 48) = result + 56;
    *a1 = result;
    return 1;
  }
  return result;
}

uint64_t _CKChunkDigestResultsInit(uint64_t a1, unsigned char *a2, unsigned __int8 *a3, int a4, void *a5)
{
  if (a5) {
    *a5 = 0;
  }
  *(void *)(a1 + 24) = CKChunkSignatureCopy(a2);
  if (a3) {
    *(void *)(a1 + 32) = CKChunkEncryptionKeyCopy(a3);
  }
  *(_DWORD *)(a1 + 40) = a4;
  return 1;
}

uint64_t CKChunkDigestResultsSignatureAndKeyEqual(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  uint64_t v2 = 0;
  if (a1 && a2)
  {
    uint64_t v3 = *(int *)(a1 + 16);
    if (v3 == *(_DWORD *)(a2 + 16))
    {
      uint64_t v4 = (uint64_t (*)(void))_requestCallbacks_5[2 * v3];
      if (v4) {
        return v4();
      }
    }
    return 0;
  }
  return v2;
}

uint64_t CKChunkDigestResultsChunkKey(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t CKChunkDigestResultsChunkSignature(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t CKChunkDigestResultsChunkLength(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t CKChunkDigestResultsCreate(void *a1, unsigned char *a2, unsigned __int8 *a3, int a4)
{
  if (!a1) {
    return 0;
  }
  *a1 = 0;
  int v4 = *a2 & 0x7F;
  if (v4 != 4)
  {
    if (v4 == 1) {
      return CKChunkDigestResultsV1Create(a1, a2, a3, a4);
    }
    return 0;
  }
  return CKChunkDigestResultsV2Create(a1, a2, a3, a4);
}

uint64_t CKChunkDigestResultsEqual(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
    return 0;
  }
  uint64_t result = CKChunkSignaturesEqual(*(unsigned char **)(a1 + 24), *(unsigned char **)(a2 + 24));
  if (result)
  {
    uint64_t result = CKChunkKeysEqual(*(unsigned __int8 **)(a1 + 32), *(unsigned __int8 **)(a2 + 32));
    if (result) {
      return *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40);
    }
  }
  return result;
}

void _CKChunkDigestResultsCFFinalize(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 16);
  if (v2) {
    ((void (*)(uint64_t))_requestCallbacks_5[2 * v2 + 1])(a1);
  }
  free(*(void **)(a1 + 24));
  uint64_t v3 = *(void **)(a1 + 32);
  free(v3);
}

BOOL _CKChunkDigestResultsCFEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

CFStringRef _CKChunkDigestResultsCFCopyFormatDescription(uint64_t a1)
{
  uint64_t v2 = CKChunkSchemeAndSignatureCopyCString(*(char **)(a1 + 24));
  uint64_t v3 = "present";
  if (!*(void *)(a1 + 32)) {
    uint64_t v3 = "not-present";
  }
  CFStringRef v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"sig %s key %s len %lu", v2, v3, *(unsigned int *)(a1 + 40));
  free(v2);
  return v4;
}

CFTypeRef CKBaseRetain(CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  return cf;
}

void CKBaseRelease(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

CFTypeRef CKBaseRetainCallBack(int a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  return cf;
}

void CKBaseReleaseCallBack(int a1, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

BOOL CKPointerEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t CKChunkDigestResultsV2Alloc(void *a1)
{
  *a1 = 0;
  uint64_t v3 = 0;
  uint64_t result = CKChunkDigestResultsAllocate(&v3, 2, 0);
  if (result) {
    *a1 = v3;
  }
  return result;
}

uint64_t CKChunkDigestResultsV2Create(void *a1, unsigned char *a2, unsigned __int8 *a3, int a4)
{
  CFTypeRef cf = 0;
  CFTypeRef v12 = 0;
  *a1 = 0;
  uint64_t v8 = 0;
  if (CKChunkDigestResultsAllocate((uint64_t *)&cf, 2, 0) && cf)
  {
    if (_CKChunkDigestResultsInit((uint64_t)cf, a2, a3, a4, &v12))
    {
      if (cf)
      {
        CFRetain(cf);
        CFTypeRef v9 = cf;
      }
      else
      {
        CFTypeRef v9 = 0;
      }
      *a1 = v9;
      uint64_t v8 = 1;
    }
    else
    {
      uint64_t v8 = 0;
    }
  }
  if (v12) {
    CFRelease(v12);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v8;
}

BOOL CKChunkDigestResultsV2SignatureAndKeyEqual(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if (a1 && a2)
  {
    if (a1 == a2) {
      return 1;
    }
    if (*(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16))
    {
      BOOL result = CKChunkSignaturesEqual(*(unsigned char **)(a1 + 24), *(unsigned char **)(a2 + 24));
      if (!result) {
        return result;
      }
      size_t v5 = *(unsigned __int8 **)(a1 + 32);
      uint64_t v6 = *(unsigned __int8 **)(a2 + 32);
      if (!((unint64_t)v5 | (unint64_t)v6)) {
        return 1;
      }
      return CKChunkKeysEqual(v5, v6);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

CFErrorRef _CKNoMemoryErrorInit(CFDictionaryRef userInfo)
{
  CFErrorRef result = CFErrorCreate(0, @"com.apple.chunkinglibrary", 2, userInfo);
  sNoMemoryError = (uint64_t)result;
  return result;
}

uint64_t CKLibraryInit()
{
  return pthread_once(&sOnceForLibrary, _CKInitOnceForLibrary);
}

uint64_t CKNoMemoryErrorCreate()
{
  if (!sNoMemoryError) {
    abort();
  }
  CFRetain((CFTypeRef)sNoMemoryError);
  return sNoMemoryError;
}

void CKUserInfoAddDescription(__CFDictionary *a1, void *value)
{
  if (value)
  {
    CFDictionarySetValue(a1, (const void *)*MEMORY[0x263EFFC48], value);
    CFStringRef v4 = (const void *)*MEMORY[0x263EFFC70];
    CFDictionarySetValue(a1, v4, value);
  }
}

CFErrorRef CKErrorCreateWithUserInfo(const __CFString *a1, CFIndex a2, const __CFDictionary *a3)
{
  pthread_once(&sOnceForLibrary, _CKInitOnceForLibrary);
  if (a3)
  {
    if (CFDictionaryGetCount(a3)) {
      CFDictionaryRef v6 = a3;
    }
    else {
      CFDictionaryRef v6 = 0;
    }
  }
  else
  {
    CFDictionaryRef v6 = 0;
  }
  CFErrorRef result = CFErrorCreate(0, a1, a2, v6);
  if (!result)
  {
    return (CFErrorRef)CKNoMemoryErrorCreate();
  }
  return result;
}

CFErrorRef CKErrorCreate(const __CFString *a1, CFIndex a2, const __CFDictionary *a3, void *a4)
{
  CFMutableSetRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CKUserInfoAddDescription(Mutable, a4);
  if (a3)
  {
    CFIndex Count = CFDictionaryGetCount(a3);
    CFDataRef v10 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
    uint64_t v11 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
    CFDictionaryGetKeysAndValues(a3, v10, v11);
    if (Count >= 1)
    {
      CFTypeRef v12 = v10;
      uint64_t v13 = v11;
      do
      {
        uint64_t v15 = *v12++;
        uint64_t v14 = v15;
        CFDataRef v16 = *v13++;
        CFDictionarySetValue(Mutable, v14, v16);
        --Count;
      }
      while (Count);
    }
    free(v10);
    free(v11);
  }
  CFErrorRef v17 = CKErrorCreateWithUserInfo(a1, a2, Mutable);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v17;
}

CFErrorRef CKInternalErrorCreateWithFormat(unsigned int a1, const __CFDictionary *a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v11 = (__CFString *)CFStringCreateWithFormatAndArguments(0, 0, a3, &a9);
  CFErrorRef v12 = CKErrorCreate(@"com.apple.chunkinglibrary.internal", a1, a2, v11);
  if (v11) {
    CFRelease(v11);
  }
  return v12;
}

CFErrorRef CKErrorCreateWithFormat(CFIndex a1, CFStringRef format, ...)
{
  va_start(va, format);
  uint64_t v3 = (__CFString *)CFStringCreateWithFormatAndArguments(0, 0, format, va);
  CFErrorRef v4 = CKErrorCreate(@"com.apple.chunkinglibrary", a1, 0, v3);
  if (v3) {
    CFRelease(v3);
  }
  return v4;
}

CFErrorRef CKInternalWrappingErrorCreateWithFormat(unsigned int a1, const void *a2, const __CFDictionary *a3, const __CFString *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  CFMutableSetRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  uint64_t v14 = Mutable;
  if (a2) {
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x263EFFC88], a2);
  }
  if (a3)
  {
    CFIndex Count = CFDictionaryGetCount(a3);
    CFDataRef v16 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
    CFErrorRef v17 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
    CFDictionaryGetKeysAndValues(a3, v16, v17);
    if (Count >= 1)
    {
      long long v18 = v16;
      unsigned int v19 = v17;
      do
      {
        long long v21 = *v18++;
        unsigned int v20 = v21;
        char v22 = *v19++;
        CFDictionarySetValue(v14, v20, v22);
        --Count;
      }
      while (Count);
    }
    free(v16);
    free(v17);
  }
  CFTypeRef v23 = (__CFString *)CFStringCreateWithFormatAndArguments(0, 0, a4, &a9);
  CFErrorRef v24 = CKErrorCreate(@"com.apple.chunkinglibrary.internal", a1, v14, v23);
  if (v14) {
    CFRelease(v14);
  }
  if (v23) {
    CFRelease(v23);
  }
  return v24;
}

CFErrorRef CKSQLiteErrorCreateWithFormat(int a1, CFStringRef format, ...)
{
  va_start(va, format);
  uint64_t v3 = (__CFString *)CFStringCreateWithFormatAndArguments(0, 0, format, va);
  CFErrorRef v4 = CKErrorCreate(@"com.apple.chunkinglibrary.sqlite", a1, 0, v3);
  if (v3) {
    CFRelease(v3);
  }
  return v4;
}

CFErrorRef CKPOSIXErrorCreateWithFormat(int a1, CFStringRef format, ...)
{
  va_start(va, format);
  uint64_t v3 = (__CFString *)CFStringCreateWithFormatAndArguments(0, 0, format, va);
  CFErrorRef v4 = CKErrorCreate((const __CFString *)*MEMORY[0x263EFFC60], a1, 0, v3);
  if (v3) {
    CFRelease(v3);
  }
  return v4;
}

CFErrorRef CKCreateInternalReadOnlyError(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return CKInternalErrorCreateWithFormat(1u, 0, @"Attempted to call %s, but chunk store is read-only", a4, a5, a6, a7, a8, a1);
}

CFErrorRef CKCreateInternalWrongStoreError(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return CKInternalErrorCreateWithFormat(2u, 0, @"Attempted to call %s, but chunk store is %s", a4, a5, a6, a7, a8, a1);
}

void _CKInitOnceForLibrary()
{
  CFMutableSetRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFB78], MEMORY[0x263EFFF90]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263EFFC48], @"Memory could not be allocated for the intended error");
  sNoMemoryError = (uint64_t)CFErrorCreate(0, @"com.apple.chunkinglibrary", 2, Mutable);
  if (Mutable)
  {
    CFRelease(Mutable);
  }
}

uint64_t CKChunkDigestArgumentsV1Alloc(void *a1)
{
  *a1 = 0;
  uint64_t v3 = 0;
  uint64_t result = CKChunkDigestArgumentsAllocate(&v3, 1, 0);
  if (result) {
    *a1 = v3;
  }
  return result;
}

uint64_t CKChunkDigestArgumentsV1ChunkScheme()
{
  return 1;
}

BOOL CKChunkDigestArgumentsV1ChunkKeyScheme(uint64_t a1)
{
  return *(unsigned char *)(a1 + 20) != 0;
}

uint64_t CKChunkDigestArgumentsV1ChunkSchemeByte(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 20)) {
    return 129;
  }
  else {
    return 1;
  }
}

CFStringRef CKChunkDigestArgumentsV1CopyDescription(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 20)) {
    uint64_t v1 = "encrypted";
  }
  else {
    uint64_t v1 = "unencrypted";
  }
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"v1 %s", v1);
}

uint64_t CKChunkDigestArgumentsV1Create(void *a1, char a2, CFTypeRef *a3)
{
  CFTypeRef cf = 0;
  CFTypeRef v13 = 0;
  *a1 = 0;
  int v6 = CKChunkDigestArgumentsAllocate((uint64_t *)&cf, 1, 0);
  uint64_t v7 = 0;
  CFTypeRef v8 = cf;
  if (v6 && cf)
  {
    if (_CKChunkDigestArgumentsInit((uint64_t)cf, a2, &v13))
    {
      if (cf)
      {
        CFRetain(cf);
        CFTypeRef v9 = cf;
      }
      else
      {
        CFTypeRef v9 = 0;
      }
      *a1 = v9;
      uint64_t v7 = 1;
      CFTypeRef v10 = v13;
    }
    else
    {
      uint64_t v7 = 0;
      CFTypeRef v10 = v13;
      if (a3 && v13)
      {
        CFRetain(v13);
        uint64_t v7 = 0;
        CFTypeRef v10 = v13;
        *a3 = v13;
      }
    }
    if (v10) {
      CFRelease(v10);
    }
    CFTypeRef v8 = cf;
  }
  if (v8) {
    CFRelease(v8);
  }
  return v7;
}

void adaptive_chunk_size(unsigned int a1, unint64_t a2, unsigned int a3, unsigned int *a4, _DWORD *a5, unsigned int *a6, int *a7)
{
  double v13 = (double)a2;
  double v14 = (double)a3;
  double v15 = log2(ceil((double)a2 / (double)a3 / (double)a1));
  unsigned int v16 = vcvtpd_u64_f64(exp2(ceil(v15)));
  unsigned int v17 = vcvtpd_u64_f64(v13 / (v14 * (double)v16));
  if (v16 < 2)
  {
    unsigned int v19 = 0;
    int v20 = 0;
  }
  else
  {
    double v18 = v14 * (double)(v16 >> 1);
    unsigned int v17 = 2 * v17 - a1 - (vcvtpd_u64_f64(v13 / v18) & 1);
    unsigned int v19 = vcvtpd_u64_f64((v13 + -((double)v17 * (double)v16) * v14) / v18);
    int v20 = (v16 >> 1) * a3;
  }
  *a4 = v17;
  *a5 = v16 * a3;
  *a6 = v19;
  *a7 = v20;
  if (!a3) {
    adaptive_chunk_size_cold_1();
  }
}

size_t create_sqlite3_db_s_profile(void *a1, uint64_t **a2, _DWORD *a3, unsigned char *a4)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (a3) {
    *a3 = 9;
  }
  if (a4) {
    *a4 = 0;
  }
  uint64_t v6 = a1[29];
  unint64_t v7 = a1[10] - v6;
  if (v7 > 0x1000)
  {
    *(_DWORD *)stat buf = 0;
    uint64_t v23 = 0;
    unsigned int v22 = 0;
    adaptive_chunk_size(0x270Fu, v7 - 4096, 0x1000u, (unsigned int *)buf, (_DWORD *)&v23 + 1, (unsigned int *)&v23, (int *)&v22);
    unsigned int v8 = v23;
    if (v23) {
      size_t v9 = 3;
    }
    else {
      size_t v9 = 2;
    }
    CFTypeRef v10 = (uint64_t *)malloc_type_calloc(v9, 0x38uLL, 0x1000040C4DFEAEFuLL);
    if (v10)
    {
      uint64_t v11 = v10;
      if ((unint64_t)(v6 + 4096) >= a1[10]) {
        uint64_t v12 = a1[10];
      }
      else {
        uint64_t v12 = v6 + 4096;
      }
      *((unsigned char *)v10 + 52) = 1;
      *CFTypeRef v10 = v12 - 1;
      v10[1] = 4096;
      *((_DWORD *)v10 + 8) = 4;
      v10[3] = 0;
      uint64_t v13 = HIDWORD(v23);
      unint64_t v14 = v12 + HIDWORD(v23) * (unint64_t)*(unsigned int *)buf;
      if (v14 >= a1[10]) {
        unint64_t v14 = a1[10];
      }
      *((unsigned char *)v10 + 108) = 1;
      v10[7] = v14 - 1;
      v10[8] = v13;
      *((_DWORD *)v10 + 22) = 4;
      v10[10] = 0;
      if (v8)
      {
        uint64_t v15 = v22;
        unint64_t v16 = v14 + v22 * (unint64_t)v8;
        if (v16 >= a1[10]) {
          unint64_t v16 = a1[10];
        }
        *((unsigned char *)v10 + 164) = 1;
        v10[14] = v16 - 1;
        v10[15] = v15;
        *((_DWORD *)v10 + 36) = 4;
        v10[17] = 0;
      }
      goto LABEL_21;
    }
    return 0;
  }
  size_t v9 = 1;
  unsigned int v17 = (uint64_t *)malloc_type_calloc(1uLL, 0x38uLL, 0x1000040C4DFEAEFuLL);
  if (!v17) {
    return 0;
  }
  uint64_t v11 = v17;
  uint64_t v18 = a1[10] - 1;
  *((unsigned char *)v17 + 52) = 1;
  *unsigned int v17 = v18;
  v17[1] = 4096;
  *((_DWORD *)v17 + 8) = 4;
  v17[3] = 0;
LABEL_21:
  *a2 = v11;
  if (gVerbose == 2)
  {
    if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_10);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
      && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
    {
      CFStringRef v19 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"returning %u sections for \"%s\"\n", v9, a1[13]);
      if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_27_0);
      }
      int v20 = CK_DEFAULT_LOG_INTERNAL_9;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)stat buf = 138543362;
        CFStringRef v25 = v19;
        _os_log_impl(&dword_215163000, v20, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      if (v19) {
        CFRelease(v19);
      }
    }
    print_sections(v11, v9);
  }
  return v9;
}

os_log_t __create_sqlite3_db_s_profile_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_sqlite3_db_s_profile_block_invoke_3()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

void print_sections(uint64_t *a1, unsigned int a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = a2;
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    do
    {
      uint64_t v7 = *a1;
      if (gVerbose == 2)
      {
        if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_121);
        }
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
          && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
        {
          unsigned int v8 = "F";
          if (!*((unsigned char *)a1 + 52)) {
            unsigned int v8 = "R";
          }
          CFStringRef v9 = CFStringCreateWithFormat(v6, 0, @"section[%u/%u]: [%s] sz:%lld(0x%llx) [0x%llx-0x%llx, ap:0x%llx, cc:%u\n"), v3, v5, v8, v7 - v4, v7 - v4, v4, *a1, a1[5], *((unsigned int *)a1 + 12));
          if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_131);
          }
          CFTypeRef v10 = CK_DEFAULT_LOG_INTERNAL_9;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)stat buf = 138543362;
            CFStringRef v13 = v9;
            _os_log_impl(&dword_215163000, v10, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
          }
          if (v9) {
            CFRelease(v9);
          }
        }
      }
      uint64_t v11 = *a1;
      a1 += 7;
      uint64_t v4 = v11;
      ++v3;
    }
    while (v5 != v3);
  }
}

uint64_t createChunkProfile(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t v93 = *MEMORY[0x263EF8340];
  *a2 = 0;
  uint64_t v6 = *(void *)(a1 + 104);
  __s = *(char **)(a1 + 96);
  uint64_t v7 = copy_lowercase_suffix_for_type_hint(__s);
  int v8 = *(_DWORD *)(a1 + 216);
  uint64_t v9 = *(void *)(a1 + 16);
  int v76 = a3;
  uint64_t v74 = v6;
  if (*(int *)v9 < 3) {
    goto LABEL_13;
  }
  CFTypeRef v10 = (const void *)(*(uint64_t (**)(void, __CFString *))(v9 + 96))(*(void *)(a1 + 8), @"kCKItemChunkProfileConfigurationVersion");
  uint64_t v11 = v10;
  if (!v10)
  {
    BOOL v18 = 0;
    uint64_t v19 = 0;
    int v20 = 0;
    goto LABEL_14;
  }
  CFTypeID v12 = CFGetTypeID(v10);
  if (v12 != CFStringGetTypeID())
  {
    CFRelease(v11);
LABEL_13:
    BOOL v18 = 0;
    uint64_t v19 = 0;
    int v20 = 0;
    uint64_t v11 = 0;
    goto LABEL_14;
  }
  CFRetain(v11);
  CFRelease(v11);
  CFNumberRef v13 = (const __CFNumber *)(*(uint64_t (**)(void, __CFString *))(*(void *)(a1 + 16) + 96))(*(void *)(a1 + 8), @"kCKItemChunkProfileConfigurationDefaultProfilePolicy");
  if (v13)
  {
    CFNumberRef v14 = v13;
    CFTypeID v15 = CFGetTypeID(v13);
    if (v15 == CFNumberGetTypeID())
    {
      LODWORD(valuePtr[0]) = 0;
      int Value = CFNumberGetValue(v14, kCFNumberSInt32Type, valuePtr);
      int v17 = valuePtr[0];
      if (LODWORD(valuePtr[0]) >= 2) {
        int v17 = 0;
      }
      if (Value) {
        BOOL v18 = v17;
      }
      else {
        BOOL v18 = 0;
      }
    }
    else
    {
      CFTypeID v48 = CFGetTypeID(v14);
      BOOL v18 = v48 == CFStringGetTypeID() && CKDefaultProfilePolicyTypeFromString(v14);
    }
    CFRelease(v14);
  }
  else
  {
    BOOL v18 = 0;
  }
  CFTypeRef v60 = (const void *)(*(uint64_t (**)(void, __CFString *))(*(void *)(a1 + 16) + 96))(*(void *)(a1 + 8), @"kCKItemChunkProfileConfigurationFileExtensionToProfileMap");
  if (v60)
  {
    CFErrorRef v61 = v60;
    CFTypeID v62 = CFGetTypeID(v60);
    if (v62 == CFDictionaryGetTypeID())
    {
      CFRetain(v61);
      CFDictionaryRef v63 = (const __CFDictionary *)v61;
    }
    else
    {
      CFDictionaryRef v63 = 0;
    }
    CFRelease(v61);
    if (v7 && v63)
    {
      sqlite3_int64 v64 = CFDictionaryGetValue(v63, v7);
      if (!v64)
      {
        uint64_t v19 = 0;
        int v20 = @"Unknown";
LABEL_181:
        CFRetain(v11);
        CFRetain(v20);
        CFRelease(v11);
        CFRelease(v20);
        goto LABEL_182;
      }
      uint64_t v65 = v64;
      CFRetain(v7);
      CFTypeID v66 = CFGetTypeID(v65);
      if (v66 == CFNumberGetTypeID())
      {
        LODWORD(valuePtr[0]) = 0;
        int v67 = CFNumberGetValue((CFNumberRef)v65, kCFNumberSInt32Type, valuePtr);
        if (LODWORD(valuePtr[0]) >= 0xA) {
          unsigned int v68 = 0;
        }
        else {
          unsigned int v68 = valuePtr[0];
        }
        uint64_t v6 = v74;
        if (!v67) {
          goto LABEL_164;
        }
      }
      else
      {
        CFTypeID v69 = CFGetTypeID(v65);
        if (v69 != CFStringGetTypeID())
        {
          uint64_t v19 = 0;
          int v20 = (__CFString *)v7;
          uint64_t v6 = v74;
          goto LABEL_181;
        }
        unsigned int v68 = CKProfileTypeFromString(v65);
        uint64_t v6 = v74;
      }
      if (v68 <= 5 && ((0x2Fu >> v68) & 1) != 0)
      {
        uint64_t v19 = dword_2151AE668[v68];
        goto LABEL_165;
      }
LABEL_164:
      uint64_t v19 = 0;
LABEL_165:
      int v20 = (__CFString *)v7;
      goto LABEL_181;
    }
  }
  else
  {
    CFDictionaryRef v63 = 0;
  }
  CFRetain(v11);
  CFRelease(v11);
  int v20 = 0;
  uint64_t v19 = 0;
  if (v63) {
LABEL_182:
  }
    CFRelease(v63);
LABEL_14:
  if (v8)
  {
    LODWORD(v21) = 0;
    uint64_t v22 = 6;
    goto LABEL_37;
  }
  if (getenv("CK_CHUNK_DEFAULT"))
  {
    if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_31);
    }
    uint64_t v22 = 2;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_36;
    }
    CFStringRef v21 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Using Rabin chunking on \"%s\" (CK_CHUNK_DEFAULT)\n", v6);
    if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_37_1);
    }
    uint64_t v23 = CK_DEFAULT_LOG_INTERNAL_9;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(valuePtr[0]) = 138543362;
      *(void *)((char *)valuePtr + 4) = v21;
      _os_log_impl(&dword_215163000, v23, OS_LOG_TYPE_DEBUG, "%{public}@", (uint8_t *)valuePtr, 0xCu);
    }
    uint64_t v22 = 2;
    if (!v21) {
      goto LABEL_37;
    }
LABEL_35:
    CFRelease(v21);
LABEL_36:
    LODWORD(v21) = 0;
    goto LABEL_37;
  }
  if (!getenv("CK_FIXED_CHUNK"))
  {
    uint64_t v22 = 0;
    LODWORD(v21) = 1;
    goto LABEL_37;
  }
  if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_42_0);
  }
  if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(v21) = 0;
    uint64_t v22 = 1;
    goto LABEL_37;
  }
  CFStringRef v21 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Using fixed size chunking on \"%s\" (CK_FIXED_CHUNK)\n", v6);
  if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_49);
  }
  CFErrorRef v24 = CK_DEFAULT_LOG_INTERNAL_9;
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(valuePtr[0]) = 138543362;
    *(void *)((char *)valuePtr + 4) = v21;
    _os_log_impl(&dword_215163000, v24, OS_LOG_TYPE_DEBUG, "%{public}@", (uint8_t *)valuePtr, 0xCu);
  }
  uint64_t v22 = 1;
  if (v21) {
    goto LABEL_35;
  }
LABEL_37:
  CFStringRef v25 = create_default_fixed_profile;
  if (!v18)
  {
    uint64_t v26 = *(void *)(a1 + 144);
    if (!v26) {
      goto LABEL_44;
    }
    if (CKFileDigestArgumentsFileScheme(v26) == 2) {
      createChunkProfile_cold_4();
    }
    uint64_t v27 = *(void *)(a1 + 144);
    if (!v27) {
      goto LABEL_44;
    }
    if (CKFileDigestArgumentsFileScheme(v27) == 8) {
      createChunkProfile_cold_5();
    }
    uint64_t v28 = *(void *)(a1 + 144);
    if (!v28 || (v29 = CKFileDigestArgumentsFileScheme(v28), CFStringRef v25 = create_default_fixed_profile, v29 != 4)) {
LABEL_44:
    }
      CFStringRef v25 = create_safe_rabin_profile;
  }
  *(void *)(a1 + 168) = v25;
  if (!v21) {
    goto LABEL_59;
  }
  if (*(_DWORD *)(a1 + 220))
  {
    if (gVerbose == 2)
    {
      if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_55_0);
      }
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
        && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
      {
        CFStringRef v30 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"fixed size chunking requested with %llu bytes per chunk", *(unsigned int *)(a1 + 220));
        if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_65_0);
        }
        int v31 = CK_DEFAULT_LOG_INTERNAL_9;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(valuePtr[0]) = 138543362;
          *(void *)((char *)valuePtr + 4) = v30;
          _os_log_impl(&dword_215163000, v31, OS_LOG_TYPE_DEBUG, "%{public}@", (uint8_t *)valuePtr, 0xCu);
        }
        if (v30) {
          CFRelease(v30);
        }
      }
    }
    uint64_t v22 = 1;
LABEL_59:
    if (v20)
    {
      CFRelease(v20);
      int v20 = 0;
    }
    goto LABEL_61;
  }
  if (v19)
  {
    uint64_t v22 = v19;
    goto LABEL_61;
  }
  int v45 = *(unsigned __int8 *)(a1 + 160);
  if (v45 == 3)
  {
    CFErrorRef v46 = "dflt";
    uint64_t v47 = 80;
  }
  else
  {
    if (v45 != 5) {
      createChunkProfile_cold_1();
    }
    CFErrorRef v46 = "dflt";
    uint64_t v47 = 99;
  }
  uint64_t v73 = v7;
  uint64_t v49 = copy_lowercase_suffix_for_type_hint(__s);
  if (v49)
  {
    uint64_t v50 = v49;
    long long v91 = 0u;
    long long v92 = 0u;
    long long v89 = 0u;
    long long v90 = 0u;
    long long v87 = 0u;
    long long v88 = 0u;
    long long v85 = 0u;
    long long v86 = 0u;
    long long v83 = 0u;
    long long v84 = 0u;
    long long v81 = 0u;
    long long v82 = 0u;
    memset(v80, 0, sizeof(v80));
    memset(valuePtr, 0, sizeof(valuePtr));
    if (CFStringGetCString((CFStringRef)v49, (char *)valuePtr, 256, 0x8000100u))
    {
      size_t v51 = strlen((const char *)valuePtr);
      uint64_t v52 = 0xFFFFFFFFLL;
      while (v51 != strlen(v46) || strncasecmp((const char *)valuePtr, v46, v51))
      {
        --v52;
        v46 += 24;
        if (!--v47) {
          goto LABEL_119;
        }
      }
      CFRelease(v50);
      if (v52)
      {
        uint64_t v70 = *((unsigned int *)v46 + 5);
        if (gVerbose == 2)
        {
          if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_70_0);
          }
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
            && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
          {
            CFStringRef v71 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"suffix_index_for_type_hint(typeHint:\"%s\", \"%s\") returned type:%d\n", __s, v74, v70);
            if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_81_2);
            }
            uint64_t v72 = CK_DEFAULT_LOG_INTERNAL_9;
            if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
            {
              LODWORD(valuePtr[0]) = 138543362;
              *(void *)((char *)valuePtr + 4) = v71;
              _os_log_impl(&dword_215163000, v72, OS_LOG_TYPE_DEBUG, "%{public}@", (uint8_t *)valuePtr, 0xCu);
            }
            if (v71) {
              CFRelease(v71);
            }
          }
        }
        if (v70)
        {
          uint64_t v22 = v70;
          goto LABEL_140;
        }
      }
    }
    else
    {
LABEL_119:
      CFRelease(v50);
    }
  }
  uint64_t v53 = *(void *)(a1 + 16);
  if (!v53) {
    createChunkProfile_cold_2();
  }
  uint64_t v54 = *(void *)(a1 + 8);
  uint64_t v55 = *(void *)(a1 + 232);
  unint64_t v56 = *(void *)(a1 + 80);
  bzero((char *)&valuePtr[1] + 8, 0x208uLL);
  *(void *)&valuePtr[0] = v53;
  *((void *)&valuePtr[0] + 1) = v56;
  *(void *)&valuePtr[1] = v55;
  if (v56 >= 0x200) {
    uint64_t v57 = 512;
  }
  else {
    uint64_t v57 = v56;
  }
  uint64_t v78 = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t *, void))(v53 + 72))(v54, v55, v80, v57, &v78, 0))
  {
    uint64_t v22 = 0;
LABEL_140:
    uint64_t v7 = v73;
    goto LABEL_61;
  }
  *((void *)&valuePtr[1] + 1) = v78;
  unsigned int v77 = 0;
  if (detect_magics((uint64_t)valuePtr, (int *)&v77)) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = v77;
  }
  uint64_t v7 = v73;
  if (gVerbose == 2)
  {
    if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_85_0);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
      && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
    {
      CFStringRef v58 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"profile_type_for_content(\"%s\") returned type:%d\n", v74, v22);
      if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_96_1);
      }
      uint64_t v59 = CK_DEFAULT_LOG_INTERNAL_9;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(valuePtr[0]) = 138543362;
        *(void *)((char *)valuePtr + 4) = v58;
        _os_log_impl(&dword_215163000, v59, OS_LOG_TYPE_DEBUG, "%{public}@", (uint8_t *)valuePtr, 0xCu);
      }
      if (v58) {
        CFRelease(v58);
      }
    }
  }
LABEL_61:
  if (gVerbose == 2)
  {
    if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_100);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
      && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
    {
      CFStringRef v32 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"type:%d, typeHint:\"%s\"", v22, __s);
      if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_111_0);
      }
      CFTypeRef v33 = CK_DEFAULT_LOG_INTERNAL_9;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(valuePtr[0]) = 138543362;
        *(void *)((char *)valuePtr + 4) = v32;
        _os_log_impl(&dword_215163000, v33, OS_LOG_TYPE_DEBUG, "%{public}@", (uint8_t *)valuePtr, 0xCu);
      }
      if (v32) {
        CFRelease(v32);
      }
    }
  }
  CFTypeRef v34 = (uint64_t (*)(uint64_t, uint64_t **, uint64_t *, unsigned int *))create_default_fixed_profile;
  int v35 = 0;
  stat v36 = v76;
  switch((int)v22)
  {
    case 1:
    case 5:
      break;
    case 2:
      int v35 = 0;
      uint64_t v37 = (uint64_t (*)(uint64_t, uint64_t **, uint64_t *, unsigned int *))create_safe_rabin_profile;
      goto LABEL_82;
    case 3:
      int v35 = 0;
      uint64_t v37 = (uint64_t (*)(uint64_t, uint64_t **, uint64_t *, unsigned int *))create_zip_profile;
      goto LABEL_82;
    case 4:
      int v35 = 0;
      uint64_t v37 = (uint64_t (*)(uint64_t, uint64_t **, uint64_t *, unsigned int *))create_mp3_profile;
      goto LABEL_82;
    case 6:
      int v35 = 0;
      uint64_t v37 = (uint64_t (*)(uint64_t, uint64_t **, uint64_t *, unsigned int *))create_custom_fixed_profile;
      goto LABEL_82;
    case 7:
      int v35 = 0;
      uint64_t v37 = (uint64_t (*)(uint64_t, uint64_t **, uint64_t *, unsigned int *))create_sqlite3_db_wal_profile;
      goto LABEL_82;
    case 8:
      int v35 = 0;
      uint64_t v37 = (uint64_t (*)(uint64_t, uint64_t **, uint64_t *, unsigned int *))create_sqlite3_db_profile;
      goto LABEL_82;
    case 9:
      int v35 = 0;
      uint64_t v37 = (uint64_t (*)(uint64_t, uint64_t **, uint64_t *, unsigned int *))create_sqlite3_db_s_profile;
LABEL_82:
      CFTypeRef v34 = v37;
      break;
    default:
      CFTypeRef v34 = *(uint64_t (**)(uint64_t, uint64_t **, uint64_t *, unsigned int *))(a1 + 168);
      if (!v34) {
        createChunkProfile_cold_3();
      }
      int v35 = 1;
      stat v36 = v76;
      break;
  }
  LODWORD(v78) = 0;
  LOBYTE(v77) = 0;
  uint64_t v38 = v34(a1, a2, &v78, &v77);
  if ((_BYTE)v77) {
    int v35 = 1;
  }
  if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_116_0);
  }
  uint64_t v39 = CK_DEFAULT_LOG_INTERNAL_9;
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v40 = CKProfileTypeDescription(v22);
    unint64_t v41 = CKProfileTypeDescription(v78);
    LODWORD(valuePtr[0]) = 136447746;
    *(void *)((char *)valuePtr + 4) = __s;
    unint64_t v42 = "F";
    WORD6(valuePtr[0]) = 2082;
    *(void *)((char *)valuePtr + 14) = v40;
    if (v35) {
      unint64_t v42 = "T";
    }
    WORD3(valuePtr[1]) = 2082;
    *((void *)&valuePtr[1] + 1) = v41;
    LOWORD(v80[0]) = 2048;
    *(void *)((char *)v80 + 2) = v38;
    WORD5(v80[0]) = 2082;
    *(void *)((char *)v80 + 12) = v42;
    WORD2(v80[1]) = 2114;
    *(void *)((char *)&v80[1] + 6) = v20;
    HIWORD(v80[1]) = 2114;
    *(void *)&long long v81 = v11;
    _os_log_impl(&dword_215163000, v39, OS_LOG_TYPE_DEFAULT, "typeHint:%{public}s typeRequested:%{public}s typeUsed:%{public}s sectionCount:%llu default:%{public}s resolvedType:%{public}@ serverConfig:%{public}@", (uint8_t *)valuePtr, 0x48u);
  }
  if (v36)
  {
    char v43 = (uint64_t *)MEMORY[0x263EFFB40];
    if (!v35) {
      char v43 = (uint64_t *)MEMORY[0x263EFFB38];
    }
    CKProfileResultsCreate(v36, v78, v11, v20, *v43, 0);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (v20) {
    CFRelease(v20);
  }
  if (v7) {
    CFRelease(v7);
  }
  return v38;
}

char *copy_lowercase_suffix_for_type_hint(char *__s)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  if (!__s) {
    return __s;
  }
  uint64_t v1 = __s;
  if (!*__s) {
    return 0;
  }
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  *(_OWORD *)buffer = 0u;
  long long v20 = 0u;
  uint64_t v2 = strchr(__s, 46);
  CFStringRef v3 = CFStringCreateWithCString(0, v1, 0x8000100u);
  CFStringRef v4 = v3;
  if (!v2)
  {
    if (v3)
    {
      CFStringRef v9 = (const __CFString *)*MEMORY[0x263F01910];
      CFStringRef PreferredIdentifierForTag = UTTypeCreatePreferredIdentifierForTag((CFStringRef)*MEMORY[0x263F01910], v3, 0);
      CFStringRef v11 = PreferredIdentifierForTag;
      if (PreferredIdentifierForTag)
      {
        CFStringRef v12 = UTTypeCopyPreferredTagWithClass(PreferredIdentifierForTag, v9);
        char v13 = 0;
        goto LABEL_25;
      }
    }
    else
    {
      CFStringRef v11 = 0;
    }
    CFStringRef v12 = 0;
    char v13 = 1;
LABEL_25:
    if (gVerbose == 2)
    {
      if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_143);
      }
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
        && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
      {
        CFStringRef v14 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"class:%@, tag:%@", v11, v12, *(void *)buffer, *(void *)&buffer[8], v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31,
                v32,
                v33,
                v34);
        if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_152_0);
        }
        CFTypeID v15 = CK_DEFAULT_LOG_INTERNAL_9;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)stat buf = 138543362;
          CFStringRef v36 = v14;
          _os_log_impl(&dword_215163000, v15, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
        }
        if (v14) {
          CFRelease(v14);
        }
      }
    }
    if (v12)
    {
      if (CFStringGetCString(v12, buffer, 256, 0x8000100u)) {
        int v8 = buffer;
      }
      else {
        int v8 = 0;
      }
      CFRelease(v12);
      if ((v13 & 1) == 0) {
LABEL_41:
      }
        CFRelease(v11);
    }
    else
    {
      if ((unint64_t)__strlcpy_chk() <= 0xFF) {
        int v8 = buffer;
      }
      else {
        int v8 = 0;
      }
      if ((v13 & 1) == 0) {
        goto LABEL_41;
      }
    }
    if (!v4) {
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  if (!v3) {
    return 0;
  }
  CFStringRef v5 = UTTypeCopyPreferredTagWithClass(v3, (CFStringRef)*MEMORY[0x263F01910]);
  if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_134_0);
  }
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
  {
    CFStringRef v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"uti:%@, tag:%@", v4, v5, *(void *)buffer, *(void *)&buffer[8], v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31,
           v32,
           v33,
           v34);
    if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_140);
    }
    uint64_t v7 = CK_DEFAULT_LOG_INTERNAL_9;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)stat buf = 138543362;
      CFStringRef v36 = v6;
      _os_log_impl(&dword_215163000, v7, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
    }
    if (v6) {
      CFRelease(v6);
    }
  }
  if (v5)
  {
    if (CFStringGetCString(v5, buffer, 256, 0x8000100u)) {
      int v8 = buffer;
    }
    else {
      int v8 = 0;
    }
    CFRelease(v5);
  }
  else
  {
    int v8 = 0;
  }
LABEL_43:
  CFRelease(v4);
LABEL_44:
  if (!v8) {
    return 0;
  }
  size_t v16 = strlen(v8);
  if (v16)
  {
    int v17 = v8;
    do
    {
      int v18 = *v17;
      if ((v18 - 65) <= 0x19) {
        *int v17 = v18 + 32;
      }
      ++v17;
      --v16;
    }
    while (v16);
  }
  return (char *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], v8, 0x8000100u);
}

os_log_t __createChunkProfile_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __createChunkProfile_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __createChunkProfile_block_invoke_39()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __createChunkProfile_block_invoke_2_46()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

uint64_t create_default_fixed_profile(uint64_t a1, uint64_t **a2, _DWORD *a3, unsigned char *a4)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (a3) {
    *a3 = 1;
  }
  if (a4) {
    *a4 = 0;
  }
  uint64_t v6 = *(void *)(a1 + 232);
  unint64_t v7 = *(void *)(a1 + 80);
  uint64_t v8 = *(unsigned int *)(a1 + 220);
  if (v8)
  {
    if (v8 < 0x1400001)
    {
      if (v8 > 0xFFF)
      {
        unint64_t v11 = *(unsigned int *)(a1 + 164) * (unint64_t)v8;
        if (v7 <= v11)
        {
          if (gVerbose == 2)
          {
            if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_190);
            }
            if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
              && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
            {
              CFStringRef v24 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"fixedChunkSize set to %llu bytes", v8);
              if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
                dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_200_1);
              }
              long long v25 = CK_DEFAULT_LOG_INTERNAL_9;
              if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)stat buf = 138543362;
                CFStringRef v27 = v24;
                _os_log_impl(&dword_215163000, v25, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
              }
              if (v24) {
                CFRelease(v24);
              }
            }
          }
          goto LABEL_42;
        }
        if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_179);
        }
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEFAULT))
        {
          CFStringRef v9 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"requestedFixedChunkSize/%llu not large enough to accomodate file size %llu", *(unsigned int *)(a1 + 220), v11);
          if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_186);
          }
          CFTypeRef v10 = CK_DEFAULT_LOG_INTERNAL_9;
          if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_31;
          }
          *(_DWORD *)stat buf = 138543362;
          CFStringRef v27 = v9;
          goto LABEL_30;
        }
      }
      else
      {
        if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_168);
        }
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEFAULT))
        {
          CFStringRef v9 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"requestedFixedChunkSize/%llu below MIN_FIXED_LENGTH_CHUNK_SIZE/%llu", *(unsigned int *)(a1 + 220), 4096);
          if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_175_0);
          }
          CFTypeRef v10 = CK_DEFAULT_LOG_INTERNAL_9;
          if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_31;
          }
          *(_DWORD *)stat buf = 138543362;
          CFStringRef v27 = v9;
          goto LABEL_30;
        }
      }
    }
    else
    {
      if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_158_0);
      }
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEFAULT))
      {
        CFStringRef v9 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"requestedFixedChunkSize/%llu exceeds MAX_FIXED_LENGTH_CHUNK_SIZE/%llu", *(unsigned int *)(a1 + 220), 20971520);
        if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_164);
        }
        CFTypeRef v10 = CK_DEFAULT_LOG_INTERNAL_9;
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_31;
        }
        *(_DWORD *)stat buf = 138543362;
        CFStringRef v27 = v9;
LABEL_30:
        _os_log_impl(&dword_215163000, v10, OS_LOG_TYPE_DEFAULT, "%{public}@", buf, 0xCu);
LABEL_31:
        if (v9) {
          CFRelease(v9);
        }
      }
    }
  }
  if (*(unsigned char *)(a1 + 160) == 5)
  {
    unsigned int v12 = 5242880;
    while (v7 > *(unsigned int *)(a1 + 164) * (unint64_t)v12)
    {
      LODWORD(v8) = 2 * v12;
      BOOL v13 = v12 > 0xA00000;
      v12 *= 2;
      if (v13) {
        goto LABEL_41;
      }
    }
    LODWORD(v8) = v12;
LABEL_41:
    if (v8 > 0x1400000) {
      return 0;
    }
  }
  else
  {
    LODWORD(v8) = 5242880;
  }
LABEL_42:
  uint64_t v14 = *(unsigned int *)(a1 + 228);
  if (!v14) {
    goto LABEL_63;
  }
  if (v14 <= v8)
  {
    if (gVerbose == 2)
    {
      if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_215_0);
      }
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
        && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
      {
        CFStringRef v15 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"fixedSubchunkSize set to %u bytes", v14);
        if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_226);
        }
        int v17 = CK_DEFAULT_LOG_INTERNAL_9;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)stat buf = 138543362;
          CFStringRef v27 = v15;
          _os_log_impl(&dword_215163000, v17, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
        }
        goto LABEL_52;
      }
    }
  }
  else
  {
    if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_204_0);
    }
    LODWORD(v14) = 0;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEFAULT))
    {
      CFStringRef v15 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"requestedFixedSubchunkSize/%llu exceeds fixedChunkSize/%llu", *(unsigned int *)(a1 + 228), v8);
      if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_211);
      }
      size_t v16 = CK_DEFAULT_LOG_INTERNAL_9;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)stat buf = 138543362;
        CFStringRef v27 = v15;
        _os_log_impl(&dword_215163000, v16, OS_LOG_TYPE_DEFAULT, "%{public}@", buf, 0xCu);
      }
      LODWORD(v14) = 0;
LABEL_52:
      if (v15) {
        CFRelease(v15);
      }
    }
  }
LABEL_63:
  uint64_t v18 = 1;
  uint64_t v19 = (uint64_t *)malloc_type_calloc(1uLL, 0x38uLL, 0x1000040C4DFEAEFuLL);
  if (!v19) {
    return 0;
  }
  long long v20 = v19;
  *((unsigned char *)v19 + 52) = 1;
  *uint64_t v19 = v7 + v6;
  v19[1] = v8;
  *((_DWORD *)v19 + 8) = 2;
  v19[3] = v14;
  *a2 = v19;
  if (gVerbose == 2)
  {
    if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_230_0);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
      && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
    {
      CFStringRef v21 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"returning %u sections for \"%s\"\n", 1, *(void *)(a1 + 104));
      if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_238_0);
      }
      long long v22 = CK_DEFAULT_LOG_INTERNAL_9;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)stat buf = 138543362;
        CFStringRef v27 = v21;
        _os_log_impl(&dword_215163000, v22, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      if (v21) {
        CFRelease(v21);
      }
    }
    uint64_t v18 = 1;
    print_sections(v20, 1u);
  }
  return v18;
}

uint64_t create_safe_rabin_profile(uint64_t a1, uint64_t **a2, _DWORD *a3, unsigned char *a4)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  unint64_t v8 = *(void *)(a1 + 80);
  uint64_t v9 = *(void *)(a1 + 104);
  if (v8 <= 13312 * (unint64_t)*(unsigned int *)(a1 + 164))
  {
    if (gVerbose == 2)
    {
      if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_254);
      }
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
        && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
      {
        CFStringRef v13 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"\"%s\" is just right to be Rabin chunked (%lld bytes)\n", v9, v8);
        if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_265);
        }
        uint64_t v14 = CK_DEFAULT_LOG_INTERNAL_9;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)stat buf = 138543362;
          CFStringRef v23 = v13;
          _os_log_impl(&dword_215163000, v14, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
        }
        if (v13) {
          CFRelease(v13);
        }
      }
    }
    if (a3) {
      *a3 = 2;
    }
    if (a4) {
      *a4 = 0;
    }
    uint64_t v15 = *(void *)(a1 + 232);
    uint64_t v16 = *(void *)(a1 + 80);
    uint64_t v12 = 1;
    int v17 = (uint64_t *)malloc_type_calloc(1uLL, 0x38uLL, 0x1000040C4DFEAEFuLL);
    if (v17)
    {
      uint64_t v18 = v17;
      *int v17 = v16 + v15;
      v17[1] = 0x340000000030;
      *((_DWORD *)v17 + 4) = 0x8000;
      *((_DWORD *)v17 + 8) = 1;
      v17[3] = 0;
      *a2 = v17;
      if (gVerbose == 2)
      {
        if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_268_0);
        }
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
          && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
        {
          CFStringRef v19 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"returning %u sections for \"%s\"\n", 1, *(void *)(a1 + 104));
          if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_274_1);
          }
          long long v20 = CK_DEFAULT_LOG_INTERNAL_9;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)stat buf = 138543362;
            CFStringRef v23 = v19;
            _os_log_impl(&dword_215163000, v20, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
          }
          if (v19) {
            CFRelease(v19);
          }
        }
        uint64_t v12 = 1;
        print_sections(v18, 1u);
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (gVerbose == 2)
    {
      if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_241_1);
      }
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
        && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
      {
        CFStringRef v10 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"\"%s\" is a big file (%lld bytes!), using fixed chunker\n", v9, v8);
        if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_250);
        }
        unint64_t v11 = CK_DEFAULT_LOG_INTERNAL_9;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)stat buf = 138543362;
          CFStringRef v23 = v10;
          _os_log_impl(&dword_215163000, v11, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
        }
        if (v10) {
          CFRelease(v10);
        }
      }
    }
    return create_default_fixed_profile(a1, a2, a3, a4);
  }
  return v12;
}

os_log_t __createChunkProfile_block_invoke_52()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __createChunkProfile_block_invoke_3()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __createChunkProfile_block_invoke_67()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __createChunkProfile_block_invoke_3_78()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __createChunkProfile_block_invoke_82()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __createChunkProfile_block_invoke_3_93()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __createChunkProfile_block_invoke_97()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __createChunkProfile_block_invoke_3_108()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

uint64_t create_custom_fixed_profile(uint64_t a1, uint64_t **a2, _DWORD *a3, unsigned char *a4)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (a3) {
    *a3 = 6;
  }
  if (a4) {
    *a4 = 0;
  }
  uint64_t v6 = *(unsigned int *)(a1 + 216);
  if (!v6) {
    create_custom_fixed_profile_cold_1();
  }
  uint64_t v7 = *(void *)(a1 + 232);
  uint64_t v8 = *(void *)(a1 + 80);
  uint64_t v9 = *(unsigned int *)(a1 + 224);
  uint64_t v10 = 1;
  unint64_t v11 = (uint64_t *)malloc_type_calloc(1uLL, 0x38uLL, 0x1000040C4DFEAEFuLL);
  if (!v11) {
    return 0;
  }
  uint64_t v12 = v11;
  *((unsigned char *)v11 + 52) = 1;
  *unint64_t v11 = v8 + v7;
  v11[1] = v6;
  *((_DWORD *)v11 + 8) = 2;
  void v11[3] = v9;
  *a2 = v11;
  if (gVerbose == 2)
  {
    if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_301_0);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
      && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
    {
      CFStringRef v13 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"returning %u sections for \"%s\"\n", 1, *(void *)(a1 + 104));
      if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_307);
      }
      uint64_t v14 = CK_DEFAULT_LOG_INTERNAL_9;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)stat buf = 138543362;
        CFStringRef v17 = v13;
        _os_log_impl(&dword_215163000, v14, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      if (v13) {
        CFRelease(v13);
      }
    }
    uint64_t v10 = 1;
    print_sections(v12, 1u);
  }
  return v10;
}

uint64_t create_zip_profile(uint64_t a1, void *a2, _DWORD *a3, unsigned char *a4)
{
  CFStringRef v4 = a3;
  CFStringRef v5 = a2;
  uint64_t v6 = a1;
  uint64_t v150 = *MEMORY[0x263EF8340];
  if (a3) {
    *a3 = 3;
  }
  if (a4) {
    *a4 = 0;
  }
  unint64_t v7 = *(void *)(a1 + 80);
  unint64_t v8 = v7 - *(void *)(a1 + 232);
  if (v8 < 0x17) {
    goto LABEL_6;
  }
  char v11 = 0;
  uint64_t v12 = *(void *)(a1 + 8);
  uint64_t v140 = *(void *)(a1 + 16);
  __base = *(void **)(a1 + 104);
  *(void *)uint64_t v142 = 0;
  *(void *)&v142[8] = 0;
  *(void *)&v142[14] = 0;
  long long v148 = 0uLL;
  if (v8 >= 0x10029) {
    unint64_t v13 = 65577;
  }
  else {
    unint64_t v13 = v8;
  }
  int v149 = 0;
  unint64_t v14 = v7 - 22;
  char v15 = 1;
  *(_OWORD *)unint64_t v145 = 0uLL;
  memset(v146, 0, sizeof(v146));
  uint64_t v16 = &new_ringing[131];
  unint64_t v147 = 0;
  CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  while (1)
  {
    if ((v15 & 1) == 0 && (v11 & 1) == 0) {
      create_zip_profile_cold_1();
    }
    if ((v15 & 1) == 0) {
      break;
    }
    uint64_t v141 = 0;
    if (((*(uint64_t (**)(uint64_t, unint64_t, uint8_t *, uint64_t, uint64_t *, void))(v140 + 72))(v12, v14, v142, 22, &v141, 0) & 1) == 0)
    {
      if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_522);
      }
      uint64_t v6 = a1;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_ERROR)) {
        goto LABEL_125;
      }
      CFStringRef v65 = CFStringCreateWithFormat(alloc, 0, @"failed to read zip-end-of-central-dir at 0x%llx\n", v14);
      if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_528_0);
      }
      CFTypeID v66 = CK_DEFAULT_LOG_INTERNAL_9;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)stat buf = 138543362;
        *(void *)&uint8_t buf[4] = v65;
        goto LABEL_122;
      }
LABEL_123:
      if (v65) {
        CFRelease(v65);
      }
      goto LABEL_125;
    }
    if (v141 != 22)
    {
      if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_532_0);
      }
      uint64_t v6 = a1;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_ERROR)) {
        goto LABEL_125;
      }
      CFStringRef v65 = CFStringCreateWithFormat(alloc, 0, @"failed to read zip-end-of-central-dir at 0x%llx\n", v14);
      if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_536);
      }
      CFTypeID v66 = CK_DEFAULT_LOG_INTERNAL_9;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)stat buf = 138543362;
        *(void *)&uint8_t buf[4] = v65;
LABEL_122:
        _os_log_impl(&dword_215163000, v66, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      goto LABEL_123;
    }
    if (*(_DWORD *)v142 == 101010256)
    {
      if (gVerbose == 2)
      {
        if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_540_0);
        }
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
          && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
        {
          CFStringRef v17 = CFStringCreateWithFormat(alloc, 0, @"zip-end-of-central-dir, offset:0x%x, size:0x%x, recs:%u/%u\n", *(unsigned int *)&v142[16], *(unsigned int *)&v142[12], *(unsigned __int16 *)&v142[8], *(unsigned __int16 *)&v142[10]);
          if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_550_1);
          }
          uint64_t v18 = CK_DEFAULT_LOG_INTERNAL_9;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)stat buf = 138543362;
            *(void *)&uint8_t buf[4] = v17;
            _os_log_impl(&dword_215163000, v18, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
          }
          uint64_t v16 = &new_ringing[131];
          if (v17) {
            CFRelease(v17);
          }
        }
      }
      unint64_t v19 = *(unsigned int *)&v142[16];
      if (*(_DWORD *)&v142[16] != -1)
      {
        CFStringRef v4 = a3;
        uint64_t v6 = a1;
        if ((v11 & 1) == 0)
        {
          uint64_t v20 = *(unsigned __int16 *)&v142[8];
          goto LABEL_153;
        }
LABEL_273:
        CFStringRef v5 = a2;
        if (gVerbose != 2) {
          goto LABEL_6;
        }
        if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_637);
        }
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
          || !os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
        {
          goto LABEL_6;
        }
        CFStringRef v67 = CFStringCreateWithFormat(alloc, 0, @"didn't find the zip64-central-dir-end for \"%s\"\n", __base);
        if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_648_0);
        }
        unsigned int v68 = CK_DEFAULT_LOG_INTERNAL_9;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)stat buf = 138543362;
          *(void *)&uint8_t buf[4] = v67;
LABEL_282:
          CFStringRef v71 = buf;
LABEL_283:
          _os_log_impl(&dword_215163000, v68, OS_LOG_TYPE_DEBUG, "%{public}@", v71, 0xCu);
        }
        goto LABEL_284;
      }
      if (v14 <= 0x13)
      {
        CFStringRef v4 = a3;
        uint64_t v6 = a1;
        goto LABEL_273;
      }
      char v15 = 0;
      v14 -= 20;
      char v11 = 1;
      goto LABEL_42;
    }
LABEL_40:
    if (!v14) {
      goto LABEL_43;
    }
    --v14;
LABEL_42:
    if (v7 - v14 > v13)
    {
LABEL_43:
      uint64_t v6 = a1;
      if ((v15 & 1) == 0)
      {
        CFStringRef v4 = a3;
        if (v11) {
          goto LABEL_273;
        }
        LODWORD(v20) = 0;
        CFStringRef v5 = a2;
        goto LABEL_46;
      }
LABEL_125:
      CFStringRef v5 = a2;
      CFStringRef v4 = a3;
      if (gVerbose != 2) {
        goto LABEL_6;
      }
      if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_622_1);
      }
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
        || !os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
      {
        goto LABEL_6;
      }
      CFStringRef v67 = CFStringCreateWithFormat(alloc, 0, @"didn't find the zip-central-dir-end for \"%s\"\n", __base);
      if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_633_0);
      }
      unsigned int v68 = CK_DEFAULT_LOG_INTERNAL_9;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)stat buf = 138543362;
        *(void *)&uint8_t buf[4] = v67;
        goto LABEL_282;
      }
      goto LABEL_284;
    }
  }
  if ((v11 & 1) == 0)
  {
    char v11 = 0;
    goto LABEL_40;
  }
  uint64_t v141 = 0;
  if (((*(uint64_t (**)(uint64_t, unint64_t, long long *, uint64_t, uint64_t *, void))(v140 + 72))(v12, v14, &v148, 20, &v141, 0) & 1) == 0)
  {
    if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_554_0);
    }
    uint64_t v6 = a1;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v69 = CFStringCreateWithFormat(alloc, 0, @"failed to read zip64-end-of-central-dir-locator at 0x%llx\n", v14);
      if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_561_0);
      }
      uint64_t v70 = CK_DEFAULT_LOG_INTERNAL_9;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)stat buf = 138543362;
        *(void *)&uint8_t buf[4] = v69;
        goto LABEL_148;
      }
LABEL_149:
      if (v69) {
        CFRelease(v69);
      }
    }
LABEL_272:
    CFStringRef v4 = a3;
    goto LABEL_273;
  }
  if (v141 != 20)
  {
    uint64_t v6 = a1;
    if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_565);
    }
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_ERROR)) {
      goto LABEL_272;
    }
    CFStringRef v69 = CFStringCreateWithFormat(alloc, 0, @"failed to read zip64-end-of-central-dir-locator at 0x%llx\n", v14);
    if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_569);
    }
    uint64_t v70 = CK_DEFAULT_LOG_INTERNAL_9;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_ERROR)) {
      goto LABEL_149;
    }
    *(_DWORD *)stat buf = 138543362;
    *(void *)&uint8_t buf[4] = v69;
    goto LABEL_148;
  }
  if (v148 != 117853008)
  {
    char v11 = 1;
    goto LABEL_40;
  }
  unint64_t v72 = *((void *)&v148 + 1);
  uint64_t v6 = a1;
  if (gVerbose == 2)
  {
    if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_573_0);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
      && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
    {
      CFStringRef v73 = CFStringCreateWithFormat(alloc, 0, @"zip64-end-of-central-dir-locator, zip64-end-of-central-dir-offset:0x%llx\n", v72);
      if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_584_0);
      }
      uint64_t v74 = CK_DEFAULT_LOG_INTERNAL_9;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)stat buf = 138543362;
        *(void *)&uint8_t buf[4] = v73;
        _os_log_impl(&dword_215163000, v74, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      if (v73) {
        CFRelease(v73);
      }
    }
  }
  if (v14 <= v72 || v14 - v72 < 0x38) {
    goto LABEL_272;
  }
  if (((*(uint64_t (**)(uint64_t, unint64_t, uint8_t *, uint64_t, uint64_t *, void))(v140 + 72))(v12, v72, v145, 56, &v141, 0) & 1) == 0)
  {
    if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_588);
    }
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_ERROR)) {
      goto LABEL_272;
    }
    CFStringRef v69 = CFStringCreateWithFormat(alloc, 0, @"failed to read zip64-end-of-central-dir at 0x%llx\n", v72);
    if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_595_1);
    }
    uint64_t v70 = CK_DEFAULT_LOG_INTERNAL_9;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_ERROR)) {
      goto LABEL_149;
    }
    *(_DWORD *)stat buf = 138543362;
    *(void *)&uint8_t buf[4] = v69;
    goto LABEL_148;
  }
  if (v141 != 56)
  {
    if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_599_1);
    }
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_ERROR)) {
      goto LABEL_272;
    }
    CFStringRef v69 = CFStringCreateWithFormat(alloc, 0, @"failed to read zip64-end-of-central-dir at 0x%llx\n", v72);
    if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_603_0);
    }
    uint64_t v70 = CK_DEFAULT_LOG_INTERNAL_9;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_ERROR)) {
      goto LABEL_149;
    }
    *(_DWORD *)stat buf = 138543362;
    *(void *)&uint8_t buf[4] = v69;
LABEL_148:
    _os_log_impl(&dword_215163000, v70, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    goto LABEL_149;
  }
  if (*(_DWORD *)v145 != 101075792) {
    goto LABEL_272;
  }
  uint64_t v75 = *((void *)&v146[1] + 1);
  unint64_t v19 = v147;
  uint64_t v20 = *((void *)&v146[0] + 1);
  if (gVerbose == 2)
  {
    if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_607_1);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
      && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
    {
      CFStringRef v76 = CFStringCreateWithFormat(alloc, 0, @"zip64-end-of-central-dir, central-dir-offset:0x%llx, central-dir-size:0x%llx, num-central-dir-recs:%llu/%llu\n", v19, v75, v20, *(void *)&v146[1]);
      if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_618_1);
      }
      unsigned int v77 = CK_DEFAULT_LOG_INTERNAL_9;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)stat buf = 138543362;
        *(void *)&uint8_t buf[4] = v76;
        _os_log_impl(&dword_215163000, v77, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      if (v76) {
        CFRelease(v76);
      }
    }
  }
  if (v75 + v19 < v19 || v72 < v75 + v19 || v72 <= v19 || v72 - v19 < 46 * v20) {
    goto LABEL_272;
  }
  CFStringRef v4 = a3;
  uint64_t v16 = new_ringing + 1048;
LABEL_153:
  CFStringRef v5 = a2;
  if (v20 > 0x15555)
  {
    if (gVerbose != 2) {
      goto LABEL_6;
    }
    if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_310);
    }
    if (!os_log_type_enabled((os_log_t)v16[406], OS_LOG_TYPE_DEBUG)
      || !os_log_type_enabled((os_log_t)v16[406], OS_LOG_TYPE_DEBUG))
    {
      goto LABEL_6;
    }
    CFStringRef v67 = CFStringCreateWithFormat(alloc, 0, @"too many records, num_recs:0x%x, max_recs:0x%x\n", v20, 87381);
    if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_319);
    }
    unsigned int v68 = CK_DEFAULT_LOG_INTERNAL_9;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)unint64_t v145 = 138543362;
      *(void *)&v145[4] = v67;
      CFStringRef v71 = v145;
      goto LABEL_283;
    }
LABEL_284:
    if (v67) {
      CFRelease(v67);
    }
    goto LABEL_6;
  }
  if (!v20)
  {
LABEL_46:
    qsort(0, v20, 0x18uLL, (int (__cdecl *)(const void *, const void *))cmp_dir_rec_data);
    int v21 = 0;
    __basea = 0;
    goto LABEL_47;
  }
  long long v84 = malloc_type_calloc(v20, 0x18uLL, 0x100004020B92A0BuLL);
  if (!v84) {
    goto LABEL_6;
  }
  uint64_t v85 = 0;
  __n128 v86 = 0uLL;
  __basea = v84;
  while (2)
  {
    uint64_t v132 = v85;
    *(__n128 *)((char *)v146 + 14) = v86;
    *(__n128 *)unint64_t v145 = v86;
    v146[0] = v86;
    *(void *)stat buf = 0;
    if (((*(uint64_t (**)(uint64_t, unint64_t, uint8_t *, uint64_t, uint8_t *, void))(v140 + 72))(v12, v19, v145, 46, buf, 0) & 1) == 0)
    {
      if (gVerbose != 2) {
        goto LABEL_369;
      }
      if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_323);
      }
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
        || !os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
      {
        goto LABEL_369;
      }
      CFStringRef v115 = CFStringCreateWithFormat(alloc, 0, @"failed to read zip-dir-rec at %u/%u\n", v132, v20);
      if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_334_0);
      }
      uint64_t v116 = CK_DEFAULT_LOG_INTERNAL_9;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_398;
      }
      *(_DWORD *)uint64_t v142 = 138543362;
      *(void *)&v142[4] = v115;
      goto LABEL_397;
    }
    uint64_t v87 = v132;
    if (*(void *)buf != 46)
    {
      if (gVerbose != 2) {
        goto LABEL_369;
      }
      if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_338);
      }
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
        || !os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
      {
        goto LABEL_369;
      }
      CFStringRef v115 = CFStringCreateWithFormat(alloc, 0, @"failed to read zip-dir-rec at %u/%u\n", v132, v20);
      if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_346_0);
      }
      uint64_t v116 = CK_DEFAULT_LOG_INTERNAL_9;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_398;
      }
      *(_DWORD *)uint64_t v142 = 138543362;
      *(void *)&v142[4] = v115;
      goto LABEL_397;
    }
    if (*(_DWORD *)v145 != 33639248)
    {
      if (gVerbose != 2) {
        goto LABEL_369;
      }
      if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_350_1);
      }
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
        || !os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
      {
        goto LABEL_369;
      }
      CFStringRef v115 = CFStringCreateWithFormat(alloc, 0, @"bogus looking zip-dir-rec at %u (0x%08x != 0x%08x)", v132, *(unsigned int *)v145, 33639248);
      if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_361_2);
      }
      uint64_t v116 = CK_DEFAULT_LOG_INTERNAL_9;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_398;
      }
      *(_DWORD *)uint64_t v142 = 138543362;
      *(void *)&v142[4] = v115;
      goto LABEL_397;
    }
    __int16 v88 = WORD6(v146[0]);
    unsigned int v89 = HIWORD(v146[0]);
    __int16 v90 = v146[1];
    unint64_t v91 = v19 + WORD6(v146[0]) + 46;
    unint64_t v92 = v91 + HIWORD(v146[0]) + (unint64_t)LOWORD(v146[1]);
    if (v92 < v19) {
      goto LABEL_369;
    }
    uint64_t v93 = __basea;
    CFTypeRef v94 = &__basea[3 * v132];
    int v95 = DWORD1(v146[0]);
    v94[1] = DWORD1(v146[0]);
    uint64_t v96 = v94 + 1;
    CFIndex v97 = &__basea[3 * v132];
    *((_WORD *)v96 + 4) = v88;
    *((_WORD *)v96 + 5) = v89;
    *((_WORD *)v96 + 6) = v90;
    unint64_t v98 = *(unsigned int *)((char *)&v146[1] + 10);
    *CFIndex v97 = *(unsigned int *)((char *)&v146[1] + 10);
    if (v15)
    {
      uint64_t v16 = new_ringing + 1048;
      __n128 v86 = 0uLL;
      goto LABEL_228;
    }
    uint64_t v16 = new_ringing + 1048;
    __n128 v86 = 0uLL;
    if (v95 != -1 && DWORD2(v146[0]) != -1 && *(_DWORD *)((char *)&v146[1] + 10) != -1) {
      goto LABEL_228;
    }
    if (v91 >= v7) {
      goto LABEL_369;
    }
    unint64_t v125 = v92;
    if (v89 < 4) {
      goto LABEL_368;
    }
    uint64_t v101 = *(void *)(a1 + 8);
    uint64_t v102 = *(void *)(a1 + 16);
    LODWORD(v141) = 0;
    while (2)
    {
      *(void *)&long long v148 = 0;
      if (((*(uint64_t (**)(uint64_t, unint64_t, uint64_t *, uint64_t, long long *, void, __n128))(v102 + 72))(v101, v91, &v141, 4, &v148, 0, v86) & 1) == 0)
      {
        if (gVerbose != 2) {
          goto LABEL_368;
        }
        if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_651_0);
        }
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
          || !os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
        {
          goto LABEL_368;
        }
        CFStringRef v112 = CFStringCreateWithFormat(alloc, 0, @"failed to read extra-field-hdr at 0x%llx\n", v91);
        if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_660);
        }
        CFStringRef v113 = CK_DEFAULT_LOG_INTERNAL_9;
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_366;
        }
        *(_DWORD *)uint64_t v142 = 138543362;
        *(void *)&v142[4] = v112;
        goto LABEL_364;
      }
      if ((void)v148 != 4)
      {
        if (gVerbose != 2) {
          goto LABEL_368;
        }
        if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_664);
        }
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
          || !os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
        {
          goto LABEL_368;
        }
        CFStringRef v112 = CFStringCreateWithFormat(alloc, 0, @"failed to read extra-field-hdr at 0x%llx\n", v91);
        if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_672);
        }
        CFStringRef v113 = CK_DEFAULT_LOG_INTERNAL_9;
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_366;
        }
        *(_DWORD *)uint64_t v142 = 138543362;
        *(void *)&v142[4] = v112;
LABEL_364:
        int v117 = v142;
LABEL_365:
        _os_log_impl(&dword_215163000, v113, OS_LOG_TYPE_DEBUG, "%{public}@", v117, 0xCu);
        goto LABEL_366;
      }
      uint64_t v103 = WORD1(v141) + 4;
      BOOL v100 = v89 >= v103;
      v89 -= v103;
      if (!v100) {
        goto LABEL_368;
      }
      if ((unsigned __int16)v141 != 1)
      {
        v91 += v103;
        if (v89 <= 3) {
          goto LABEL_368;
        }
        continue;
      }
      break;
    }
    if (DWORD2(v146[0]) == -1 || DWORD1(v146[0]) == -1) {
      int v105 = 20;
    }
    else {
      int v105 = 4;
    }
    uint64_t v106 = v105 | (8 * (*(_DWORD *)((char *)&v146[1] + 10) == -1));
    if (v103 < v106)
    {
      CFStringRef v4 = a3;
      if (gVerbose != 2) {
        goto LABEL_369;
      }
      if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_365);
      }
      CFStringRef v4 = a3;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
        || !os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
      {
        goto LABEL_369;
      }
      CFStringRef v115 = CFStringCreateWithFormat(alloc, 0, @"bogus field_len 0x%x at 0x%llx, expected_len: 0x%x\n", v103, v91, v106);
      if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_376);
      }
      uint64_t v116 = CK_DEFAULT_LOG_INTERNAL_9;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_398;
      }
      *(_DWORD *)uint64_t v142 = 138543362;
      *(void *)&v142[4] = v115;
LABEL_397:
      _os_log_impl(&dword_215163000, v116, OS_LOG_TYPE_DEBUG, "%{public}@", v142, 0xCu);
      goto LABEL_398;
    }
    memset(v142, 0, sizeof(v142));
    int v143 = 0;
    CFStringRef v4 = a3;
    if (((*(uint64_t (**)(uint64_t, unint64_t, uint8_t *, uint64_t, uint8_t *, void))(v140 + 72))(v12, v91, v142, v106, buf, 0) & 1) == 0)
    {
      if (gVerbose != 2) {
        goto LABEL_368;
      }
      if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_381_0);
      }
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
        || !os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
      {
        goto LABEL_368;
      }
      CFStringRef v112 = CFStringCreateWithFormat(alloc, 0, @"failed to read zip64-extra-field at 0x%llx\n", v91);
      if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_392_1);
      }
      CFStringRef v113 = CK_DEFAULT_LOG_INTERNAL_9;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_366;
      }
      LODWORD(v148) = 138543362;
      *(void *)((char *)&v148 + 4) = v112;
LABEL_441:
      int v117 = (uint8_t *)&v148;
      goto LABEL_365;
    }
    uint64_t v87 = v132;
    __n128 v86 = 0uLL;
    unint64_t v92 = v125;
    CFIndex v97 = &__basea[3 * v132];
    if (*(void *)buf != v106)
    {
      if (gVerbose != 2) {
        goto LABEL_368;
      }
      if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_396_0);
      }
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
        || !os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
      {
        goto LABEL_368;
      }
      CFStringRef v112 = CFStringCreateWithFormat(alloc, 0, @"failed to read zip64-extra-field at 0x%llx\n", v91);
      if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_404_0);
      }
      CFStringRef v113 = CK_DEFAULT_LOG_INTERNAL_9;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
      {
LABEL_366:
        if (v112) {
          CFRelease(v112);
        }
LABEL_368:
        CFStringRef v4 = a3;
        goto LABEL_369;
      }
      LODWORD(v148) = 138543362;
      *(void *)((char *)&v148 + 4) = v112;
      goto LABEL_441;
    }
    uint64_t v16 = new_ringing + 1048;
    uint64_t v93 = __basea;
    if (DWORD1(v146[0]) == -1 || (CFStringRef v107 = &v142[4], DWORD2(v146[0]) == -1))
    {
      *uint64_t v96 = *(void *)&v142[12];
      CFStringRef v107 = &v142[20];
    }
    unint64_t v98 = *(void *)v107;
    __basea[3 * v132] = v98;
LABEL_228:
    uint64_t v6 = a1;
    CFStringRef v5 = a2;
    if (v98 >= v7 || ((unint64_t v99 = *v96 + v98, v99 >= v98) ? (v100 = v99 >= v7) : (v100 = 1), v100))
    {
      if (gVerbose == 2)
      {
        v114 = v97;
        if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_408_0);
        }
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
          && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
        {
          CFStringRef v115 = CFStringCreateWithFormat(alloc, 0, @"bogus looking zip_foffset/zip_size on zip-dir-rec at %u (foffset:0x%llx size:0x%llx dataSize:0x%llx)\n", v132, *v114, *v96, v7);
          if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_419);
          }
          uint64_t v116 = CK_DEFAULT_LOG_INTERNAL_9;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)uint64_t v142 = 138543362;
            *(void *)&v142[4] = v115;
            goto LABEL_397;
          }
LABEL_398:
          CFStringRef v4 = a3;
          if (v115) {
            CFRelease(v115);
          }
        }
      }
LABEL_369:
      uint64_t v6 = a1;
      CFStringRef v5 = a2;
      goto LABEL_335;
    }
    uint64_t v85 = v87 + 1;
    unint64_t v19 = v92;
    if (v85 != v20) {
      continue;
    }
    break;
  }
  int v118 = v93;
  qsort(v93, v20, 0x18uLL, (int (__cdecl *)(const void *, const void *))cmp_dir_rec_data);
  if (*v118)
  {
    if (gVerbose == 2)
    {
      if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_423);
      }
      uint64_t v6 = a1;
      CFStringRef v5 = a2;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
        && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
      {
        CFStringRef v119 = CFStringCreateWithFormat(alloc, 0, @"first entry must begin at location zero!\n");
        if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_434_0);
        }
        uint64_t v120 = CK_DEFAULT_LOG_INTERNAL_9;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)unint64_t v145 = 138543362;
          *(void *)&v145[4] = v119;
          _os_log_impl(&dword_215163000, v120, OS_LOG_TYPE_DEBUG, "%{public}@", v145, 0xCu);
        }
        uint64_t v6 = a1;
        CFStringRef v5 = a2;
        if (v119) {
          CFRelease(v119);
        }
      }
    }
    void *__basea = 0;
    uint64_t v16 = new_ringing + 1048;
  }
  int v21 = v20;
LABEL_47:
  long long v22 = add_sections(0, 0, (2 * v20) | 1);
  if (!v22)
  {
    CFStringRef v4 = a3;
    goto LABEL_335;
  }
  CFStringRef v23 = v22;
  size_t __nel = (size_t)v22;
  if (v21 < 1)
  {
    LODWORD(v25) = 0;
    int v110 = 0;
    long long v32 = 0;
    unsigned int v111 = 0;
    uint64_t v9 = 1;
    CFStringRef v27 = (char *)__basea;
LABEL_198:
    uint64_t v78 = &v23[112 * v110];
    v78[52] = 1;
    *(void *)uint64_t v78 = v7;
    *((void *)v78 + 1) = 5242880;
    *((_DWORD *)v78 + 8) = 2;
    *((void *)v78 + 3) = 0;
    if (v111 + ((int)v7 - (int)v25 + 5242879) / 5242880 > *(_DWORD *)(v6 + 164))
    {
      CFStringRef v4 = a3;
      goto LABEL_332;
    }
    if (v32)
    {
      free(v32);
      CFStringRef v23 = (char *)__nel;
      CFStringRef v27 = (char *)__basea;
    }
    if (v27)
    {
      free(v27);
      CFStringRef v23 = (char *)__nel;
    }
    *CFStringRef v5 = v23;
    if (gVerbose == 2)
    {
      if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_510_0);
      }
      BOOL v79 = os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG);
      __int16 v80 = (uint64_t *)__nel;
      if (v79)
      {
        BOOL v81 = os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG);
        __int16 v80 = (uint64_t *)__nel;
        if (v81)
        {
          CFStringRef v82 = CFStringCreateWithFormat(alloc, 0, @"returning %u sections for \"%s\"\n", v9, *(void *)(v6 + 104));
          if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_518_0);
          }
          long long v83 = CK_DEFAULT_LOG_INTERNAL_9;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)unint64_t v145 = 138543362;
            *(void *)&v145[4] = v82;
            _os_log_impl(&dword_215163000, v83, OS_LOG_TYPE_DEBUG, "%{public}@", v145, 0xCu);
          }
          __int16 v80 = (uint64_t *)__nel;
          if (v82)
          {
            CFRelease(v82);
            __int16 v80 = (uint64_t *)__nel;
          }
        }
      }
      print_sections(v80, v9);
    }
    return v9;
  }
  uint64_t v24 = 0;
  unsigned int v128 = 0;
  unint64_t v122 = 0;
  ptr = 0;
  unint64_t v25 = 0;
  unint64_t v124 = 0;
  uint64_t v126 = 0xFFFFFFFFLL;
  long long v26 = v22;
  CFStringRef v27 = (char *)__basea;
  uint64_t v121 = v12;
  while (2)
  {
    uint64_t v131 = v24;
    uint64_t v28 = &v27[24 * v24];
    unint64_t v29 = *(void *)v28;
    memset(v145, 0, sizeof(v145));
    *(void *)((char *)v146 + 7) = 0;
    *(void *)&v146[0] = 0;
    *(void *)&long long v148 = 0;
    unint64_t v127 = v29;
    if (((*(uint64_t (**)(uint64_t))(v140 + 72))(v12) & 1) == 0)
    {
      if (gVerbose == 2)
      {
        CFStringRef v4 = a3;
        uint64_t v6 = a1;
        CFStringRef v5 = a2;
        long long v32 = ptr;
        if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_438);
        }
        if (!os_log_type_enabled((os_log_t)v16[406], OS_LOG_TYPE_DEBUG)
          || !os_log_type_enabled((os_log_t)v16[406], OS_LOG_TYPE_DEBUG))
        {
          goto LABEL_331;
        }
        CFStringRef v108 = CFStringCreateWithFormat(alloc, 0, @"failed to read the zip-local-header at %u/0x%llx\n", v131, v127);
        if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_449_1);
        }
        uint64_t v109 = CK_DEFAULT_LOG_INTERNAL_9;
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_324;
        }
        *(_DWORD *)uint64_t v142 = 138543362;
        *(void *)&v142[4] = v108;
        goto LABEL_323;
      }
      CFStringRef v4 = a3;
      uint64_t v6 = a1;
      CFStringRef v5 = a2;
      goto LABEL_328;
    }
    if ((void)v148 != 30)
    {
      CFStringRef v23 = (char *)__nel;
      if (gVerbose == 2)
      {
        CFStringRef v4 = a3;
        uint64_t v6 = a1;
        CFStringRef v5 = a2;
        long long v32 = ptr;
        if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_453);
        }
        if (!os_log_type_enabled((os_log_t)v16[406], OS_LOG_TYPE_DEBUG)
          || !os_log_type_enabled((os_log_t)v16[406], OS_LOG_TYPE_DEBUG))
        {
          goto LABEL_331;
        }
        CFStringRef v108 = CFStringCreateWithFormat(alloc, 0, @"failed to read the zip-local-header at %u/0x%llx\n", v131, v127);
        if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_461);
        }
        uint64_t v109 = CK_DEFAULT_LOG_INTERNAL_9;
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_324;
        }
        *(_DWORD *)uint64_t v142 = 138543362;
        *(void *)&v142[4] = v108;
        goto LABEL_323;
      }
      goto LABEL_326;
    }
    uint64_t v30 = v131;
    CFStringRef v27 = (char *)__basea;
    CFStringRef v23 = (char *)__nel;
    if (*(_DWORD *)v145 != 67324752)
    {
      if (gVerbose == 2)
      {
        CFStringRef v4 = a3;
        uint64_t v6 = a1;
        CFStringRef v5 = a2;
        long long v32 = ptr;
        if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_465_0);
        }
        if (!os_log_type_enabled((os_log_t)v16[406], OS_LOG_TYPE_DEBUG)
          || !os_log_type_enabled((os_log_t)v16[406], OS_LOG_TYPE_DEBUG))
        {
          goto LABEL_331;
        }
        CFStringRef v108 = CFStringCreateWithFormat(alloc, 0, @"zip-local-header %u @ 0x%llx looks corrupt (0x%08x != 0x%08x)", v131, v127, *(unsigned int *)v145, 67324752);
        if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_476_0);
        }
        uint64_t v109 = CK_DEFAULT_LOG_INTERNAL_9;
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_324;
        }
        *(_DWORD *)uint64_t v142 = 138543362;
        *(void *)&v142[4] = v108;
        goto LABEL_323;
      }
      goto LABEL_326;
    }
    if (WORD6(v146[0])) {
      WORD1(__basea[3 * v131 + 2]) = WORD6(v146[0]);
    }
    BOOL v31 = 0;
    if (*(_WORD *)&v145[8] || WORD5(v146[0]) != 21)
    {
LABEL_67:
      if (!v30)
      {
        unint64_t v39 = 0;
        unint64_t v38 = *(void *)v28;
LABEL_73:
        unint64_t v40 = &v27[24 * v30];
        unint64_t v41 = v39 + v38 + *((unsigned __int16 *)v40 + 8) + (unint64_t)*((unsigned __int16 *)v40 + 9) + 30;
        unint64_t v42 = &v23[112 * v30];
        v42[52] = 1;
        *(void *)unint64_t v42 = v41;
        *((void *)v42 + 1) = 5242880;
        *((_DWORD *)v42 + 8) = 8;
        *((void *)v42 + 3) = 0;
        unint64_t v43 = *((void *)v40 + 1) + v41;
        uint64_t v44 = (2 * v30) | 1;
        int v45 = (unint64_t *)&v23[56 * v44];
        *int v45 = v43;
        CFErrorRef v46 = v45 + 3;
        uint64_t v47 = v45 + 4;
        if (v31)
        {
          CFTypeID v48 = &v23[56 * v44];
          *((void *)v48 + 1) = 0x340000000030;
          *((_DWORD *)v48 + 4) = 0x8000;
          *uint64_t v47 = 1;
          *CFErrorRef v46 = 0;
          unint64_t v124 = v41;
          uint64_t v126 = (2 * v30) | 1;
        }
        else
        {
          uint64_t v49 = &v23[56 * v44];
          v49[52] = 1;
          *((void *)v49 + 1) = 5242880;
          *uint64_t v47 = 2;
          *CFErrorRef v46 = 0;
        }
        uint64_t v50 = 0;
        int v51 = 0;
        do
        {
          unint64_t v52 = *(void *)&v26[v50];
          if (v26[v50 + 52]) {
            uint64_t v53 = 5242879;
          }
          else {
            uint64_t v53 = 13311;
          }
          if (v26[v50 + 52]) {
            uint64_t v54 = 5242880;
          }
          else {
            uint64_t v54 = 13312;
          }
          v51 += (uint64_t)(v52 - v25 + v53) / v54;
          v50 += 56;
          unint64_t v25 = v52;
        }
        while (v50 != 112);
        uint64_t v55 = v51 + v128;
        if (v55 >= *(_DWORD *)(a1 + 164))
        {
          if (v126 == -1) {
            goto LABEL_326;
          }
          if (gVerbose == 2)
          {
            if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_495);
            }
            BOOL v56 = os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG);
            CFStringRef v23 = (char *)__nel;
            uint64_t v30 = v131;
            if (v56)
            {
              BOOL v57 = os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG);
              CFStringRef v23 = (char *)__nel;
              uint64_t v30 = v131;
              if (v57)
              {
                CFStringRef v58 = CFStringCreateWithFormat(alloc, 0, @"%u >= %u, last_rabin:%d, last_rabin_base:0x%llx\n", v55, *(unsigned int *)(a1 + 164), v126, v124);
                int v129 = v55;
                if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
                  dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_506);
                }
                uint64_t v59 = CK_DEFAULT_LOG_INTERNAL_9;
                if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)uint64_t v142 = 138543362;
                  *(void *)&v142[4] = v58;
                  _os_log_impl(&dword_215163000, v59, OS_LOG_TYPE_DEBUG, "%{public}@", v142, 0xCu);
                }
                CFStringRef v23 = (char *)__nel;
                uint64_t v30 = v131;
                LODWORD(v55) = v129;
                if (v58)
                {
                  CFRelease(v58);
                  CFStringRef v23 = (char *)__nel;
                  uint64_t v30 = v131;
                }
              }
            }
          }
          CFTypeRef v60 = &v23[56 * (int)v126];
          unint64_t v61 = *(void *)v60 - v124;
          uint64_t v62 = v60[52] ? 5242879 : 13311;
          uint64_t v63 = v60[52] ? 5242880 : 13312;
          v60[52] = 1;
          *((void *)v60 + 1) = 5242880;
          *((_DWORD *)v60 + 8) = 2;
          *((void *)v60 + 3) = 0;
          unsigned int v64 = v55 - (uint64_t)(v61 + v62) / v63 + ((int)v61 + 5242879) / 5242880;
          if (v64 >= *(_DWORD *)(a1 + 164)) {
            goto LABEL_326;
          }
          unsigned int v128 = v64;
          unint64_t v124 = 0;
          uint64_t v126 = 0xFFFFFFFFLL;
          uint64_t v16 = new_ringing + 1048;
          CFStringRef v27 = (char *)__basea;
        }
        else
        {
          v128 += v51;
        }
        unint64_t v25 = *v45;
        uint64_t v24 = v30 + 1;
        v26 += 112;
        if (v24 == v21)
        {
          uint64_t v9 = (2 * v21) | 1u;
          uint64_t v6 = a1;
          CFStringRef v5 = a2;
          int v110 = v21;
          long long v32 = ptr;
          unsigned int v111 = v128;
          goto LABEL_198;
        }
        continue;
      }
      uint64_t v36 = v30 - 1;
      unint64_t v37 = *(void *)&v27[24 * v30 - 24]
          + *(void *)&v27[24 * v30 - 16]
          + *(unsigned __int16 *)&v27[24 * v30 - 8]
          + (unint64_t)*(unsigned __int16 *)&v27[24 * v30 - 6]
          + 30;
      if (v127 >= v37)
      {
        unint64_t v38 = *(void *)v28;
        unint64_t v39 = v127 - v37;
        if (v39)
        {
          v38 -= v39;
          *(void *)uint64_t v28 = v38;
        }
        uint64_t v16 = new_ringing + 1048;
        goto LABEL_73;
      }
      if (gVerbose == 2)
      {
        CFStringRef v4 = a3;
        uint64_t v6 = a1;
        CFStringRef v5 = a2;
        if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_480_0);
        }
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
          && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
        {
          CFStringRef v108 = CFStringCreateWithFormat(alloc, 0, @"entries %u and %u overlap\n", v131, v36);
          long long v32 = ptr;
          if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_491_0);
          }
          uint64_t v109 = CK_DEFAULT_LOG_INTERNAL_9;
          if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_324;
          }
          *(_DWORD *)uint64_t v142 = 138543362;
          *(void *)&v142[4] = v108;
LABEL_323:
          _os_log_impl(&dword_215163000, v109, OS_LOG_TYPE_DEBUG, "%{public}@", v142, 0xCu);
LABEL_324:
          CFStringRef v23 = (char *)__nel;
          if (!v108) {
            goto LABEL_332;
          }
          CFRelease(v108);
          goto LABEL_331;
        }
LABEL_328:
        CFStringRef v23 = (char *)__nel;
        goto LABEL_329;
      }
LABEL_326:
      CFStringRef v4 = a3;
      uint64_t v6 = a1;
      CFStringRef v5 = a2;
LABEL_329:
      long long v32 = ptr;
      goto LABEL_332;
    }
    break;
  }
  if (v122 > 0x15)
  {
    long long v33 = ptr;
    unint64_t v34 = v127;
  }
  else
  {
    long long v32 = ptr;
    long long v33 = (char *)malloc_type_realloc(ptr, 0x16uLL, 0xA6E2D660uLL);
    unint64_t v34 = v127;
    if (!v33) {
      goto LABEL_330;
    }
  }
  uint64_t v12 = v121;
  if ((*(unsigned int (**)(uint64_t, unint64_t, char *, uint64_t, long long *, void))(v140 + 72))(v121, v34 + 30, v33, 21, &v148, 0))
  {
    BOOL v35 = (void)v148 == 21;
  }
  else
  {
    BOOL v35 = 0;
  }
  if (v35)
  {
    v33[21] = 0;
    BOOL v31 = strcmp(v33, "QuickLook/Preview.pdf") == 0;
    unint64_t v122 = 22;
    ptr = v33;
    uint64_t v16 = new_ringing + 1048;
    uint64_t v30 = v131;
    CFStringRef v27 = (char *)__basea;
    CFStringRef v23 = (char *)__nel;
    goto LABEL_67;
  }
  long long v32 = v33;
LABEL_330:
  CFStringRef v4 = a3;
  uint64_t v6 = a1;
  CFStringRef v5 = a2;
LABEL_331:
  CFStringRef v23 = (char *)__nel;
LABEL_332:
  if (v32)
  {
    free(v32);
    CFStringRef v23 = (char *)__nel;
  }
  free(v23);
LABEL_335:
  if (__basea) {
    free(__basea);
  }
LABEL_6:
  if (a4) {
    *a4 = 1;
  }
  return (*(uint64_t (**)(uint64_t, void *, _DWORD *, void))(v6 + 168))(v6, v5, v4, 0);
}

uint64_t create_mp3_profile(uint64_t a1, char **a2, _DWORD *a3, unsigned char *a4)
{
  uint64_t v72 = *MEMORY[0x263EF8340];
  if (a3) {
    *a3 = 4;
  }
  if (a4) {
    *a4 = 0;
  }
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 232);
  unint64_t v10 = *(void *)(a1 + 80);
  uint64_t v60 = 0;
  memset(v61, 0, 10);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void *, uint64_t, uint64_t *, void))(v7 + 72))(v8, v9, v61, 10, &v60, 0))
  {
    BOOL v11 = v60 == 10;
  }
  else
  {
    BOOL v11 = 0;
  }
  if (!v11) {
    goto LABEL_9;
  }
  uint64_t v12 = is_ID3v2_tag((uint64_t)v61, 0xAuLL);
  if (!v12)
  {
    if (v10 >= 0x81)
    {
      unint64_t v19 = 0;
      unsigned int cfa = 0;
      CFStringRef v23 = 0;
      goto LABEL_46;
    }
LABEL_9:
    if (a4) {
      *a4 = 1;
    }
    return (*(uint64_t (**)(uint64_t, char **, _DWORD *, void))(a1 + 168))(a1, a2, a3, 0);
  }
  unsigned int v14 = 0;
  unsigned int v15 = bswap32(*(unsigned int *)((char *)v61 + 6));
  unsigned int v16 = 2130706432;
  uint64_t v17 = 4;
  do
  {
    unsigned int v14 = v16 & v15 | (v14 >> 1);
    v16 >>= 8;
    --v17;
  }
  while (v17);
  if (v14 >> 28) {
    create_mp3_profile_cold_1();
  }
  if ((v61[0] & 0x100000000000) != 0) {
    int v18 = 20;
  }
  else {
    int v18 = 10;
  }
  unint64_t v19 = v18 + v14;
  if (gVerbose == 2)
  {
    if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_675);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
      && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
    {
      CFStringRef cf = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"ID3v2 tag present at 0x%llx, v2_tag_size:0x%x\n", v9, v19);
      if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_684);
      }
      uint64_t v20 = CK_DEFAULT_LOG_INTERNAL_9;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)stat buf = 138543362;
        *(void *)&uint8_t buf[4] = cf;
        _os_log_impl(&dword_215163000, v20, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      if (cf) {
        CFRelease(cf);
      }
    }
  }
  if (v10 < v19)
  {
    if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_688_1);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v21 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"ID3v2 tag larger than the file, v2_tag_size:0x%x, dataSize:0x%llx\n", v19, v10);
      if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_695);
      }
      long long v22 = CK_DEFAULT_LOG_INTERNAL_9;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)stat buf = 138543362;
        *(void *)&uint8_t buf[4] = v21;
        _os_log_impl(&dword_215163000, v22, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v21) {
        CFRelease(v21);
      }
    }
    goto LABEL_9;
  }
  uint64_t v24 = add_sections(0, 0, 1);
  if (!v24) {
    goto LABEL_9;
  }
  unint64_t v25 = v24;
  unsigned int cfa = 1;
  v24[52] = 1;
  *(void *)uint64_t v24 = v9 + v19;
  *((void *)v24 + 1) = 5242880;
  *((_DWORD *)v24 + 8) = 9;
  *((void *)v24 + 3) = 0;
  if (v10 - v19 <= 0x80)
  {
    LODWORD(v31) = 1;
    uint64_t v12 = 1;
    if (v10 > v19) {
      goto LABEL_79;
    }
    goto LABEL_87;
  }
  CFStringRef v23 = v24;
LABEL_46:
  long long v70 = 0u;
  long long v71 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  *(_OWORD *)stat buf = 0u;
  long long v65 = 0u;
  uint64_t v56 = v10 + v9 - 128;
  if (!(*(unsigned int (**)(uint64_t))(v7 + 72))(v8) || v60 != 128) {
    goto LABEL_75;
  }
  BOOL v27 = *(unsigned __int16 *)buf != 16724 || buf[2] != 71;
  if (gVerbose == 2)
  {
    if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_700_0);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
      && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v28 = "missing";
      if (!v27) {
        uint64_t v28 = "present";
      }
      CFStringRef v55 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"ID3v1 tag %s at 0x%llx\n", v28, v56);
      if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_713_0);
      }
      unint64_t v29 = CK_DEFAULT_LOG_INTERNAL_9;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t v62 = 138543362;
        CFStringRef v63 = v55;
        _os_log_impl(&dword_215163000, v29, OS_LOG_TYPE_DEBUG, "%{public}@", v62, 0xCu);
      }
      if (v55) {
        CFRelease(v55);
      }
    }
  }
  int v30 = v27 ? v12 : 1;
  if (v30 != 1)
  {
LABEL_75:
    unint64_t v25 = v23;
    goto LABEL_76;
  }
  if (v27)
  {
    LODWORD(v31) = cfa;
    unint64_t v25 = v23;
    if (v10 > v19)
    {
      if ((v12 & 1) == 0) {
        create_mp3_profile_cold_2();
      }
LABEL_79:
      long long v32 = v25;
      long long v33 = add_sections(v25, v31, 1);
      unint64_t v25 = v32;
      if (v33)
      {
        v33[108] = 1;
        *((void *)v33 + 7) = v10 + v9;
        *((void *)v33 + 8) = 5242880;
        *((_DWORD *)v33 + 22) = 9;
        uint64_t v31 = (v31 + 1);
        uint64_t v12 = v31;
        unint64_t v25 = v33;
        *((void *)v33 + 10) = 0;
        goto LABEL_87;
      }
LABEL_76:
      if (!v25) {
        goto LABEL_9;
      }
      goto LABEL_96;
    }
    if (!v12) {
      goto LABEL_97;
    }
    uint64_t v12 = 1;
  }
  else
  {
    unint64_t v34 = add_sections(v23, cfa, 2);
    unint64_t v25 = v23;
    if (!v34) {
      goto LABEL_76;
    }
    uint64_t v35 = 56;
    uint64_t v36 = &v34[56 * v12];
    v36[52] = 1;
    *(void *)uint64_t v36 = v56;
    *((void *)v36 + 1) = 5242880;
    *((_DWORD *)v36 + 8) = 9;
    *((void *)v36 + 3) = 0;
    if (v12) {
      uint64_t v35 = 112;
    }
    unint64_t v37 = &v34[v35];
    v37[52] = 1;
    *(void *)unint64_t v37 = v10 + v9;
    *((void *)v37 + 1) = 5242880;
    *((_DWORD *)v37 + 8) = 9;
    *((void *)v37 + 3) = 0;
    LODWORD(v31) = cfa | 2;
    uint64_t v12 = cfa | 2;
    unint64_t v25 = v34;
  }
LABEL_87:
  unsigned int v38 = 0;
  unint64_t v39 = v25;
  uint64_t v40 = v31;
  do
  {
    int v41 = v39[52];
    uint64_t v43 = *(void *)v39;
    v39 += 56;
    uint64_t v42 = v43;
    uint64_t v44 = v43 - v9;
    BOOL v45 = v41 == 0;
    if (v41) {
      uint64_t v46 = 5242879;
    }
    else {
      uint64_t v46 = 13311;
    }
    if (v45) {
      uint64_t v47 = 13312;
    }
    else {
      uint64_t v47 = 5242880;
    }
    v38 += (v44 + v46) / v47;
    uint64_t v9 = v42;
    --v40;
  }
  while (v40);
  if (*(_DWORD *)(a1 + 164) < v38)
  {
LABEL_96:
    free(v25);
    goto LABEL_9;
  }
LABEL_97:
  if (gVerbose == 2)
  {
    CFTypeID v48 = (uint64_t *)v25;
    if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_718);
    }
    BOOL v49 = os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG);
    uint64_t v50 = v48;
    if (v49)
    {
      BOOL v51 = os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG);
      uint64_t v50 = v48;
      if (v51)
      {
        CFStringRef v52 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"returning %u sections for \"%s\"\n", v12, *(void *)(a1 + 104));
        if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_726);
        }
        uint64_t v53 = CK_DEFAULT_LOG_INTERNAL_9;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)stat buf = 138543362;
          *(void *)&uint8_t buf[4] = v52;
          _os_log_impl(&dword_215163000, v53, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
        }
        uint64_t v50 = v48;
        if (v52)
        {
          CFRelease(v52);
          uint64_t v50 = v48;
        }
      }
    }
    uint64_t v54 = v50;
    print_sections(v50, v12);
    unint64_t v25 = (char *)v54;
  }
  *a2 = v25;
  return v12;
}

uint64_t create_sqlite3_db_wal_profile(uint64_t a1, char **a2, _DWORD *a3, unsigned char *a4)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  if (a3) {
    *a3 = 7;
  }
  if (a4) {
    *a4 = 0;
  }
  uint64_t v8 = *(void *)(a1 + 232);
  unint64_t v9 = *(void *)(a1 + 80);
  int8x16_t v43 = 0u;
  int8x16_t v44 = 0u;
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  *(void *)stat buf = 0;
  if ((*(unsigned int (**)(uint64_t, void, int8x16_t *, uint64_t, uint8_t *, void))(v11 + 72))(v10, 0, &v43, 32, buf, 0))
  {
    BOOL v12 = *(void *)buf > 0x1FuLL;
  }
  else
  {
    BOOL v12 = 0;
  }
  if (!v12 || (v43 = vrev32q_s8(v43), v44 = vrev32q_s8(v44), uint64_t v13 = 1, (v14 = add_sections(0, 0, 1)) == 0))
  {
LABEL_33:
    if (a4) {
      *a4 = 1;
    }
    return (*(uint64_t (**)(uint64_t, char **, _DWORD *, void))(a1 + 168))(a1, a2, a3, 0);
  }
  unsigned int v15 = v14;
  uint64_t v42 = a2;
  unint64_t v16 = v8 + 32;
  v14[52] = 1;
  *(void *)unsigned int v14 = v8 + 32;
  *((void *)v14 + 1) = 5242880;
  *((_DWORD *)v14 + 8) = 5;
  *((void *)v14 + 3) = 0;
  if (v8 + 32 >= v9)
  {
    uint64_t v17 = 1;
LABEL_23:
    uint64_t v25 = 0;
    unsigned int v26 = 0;
    BOOL v27 = v15;
    do
    {
      int v28 = v27[52];
      uint64_t v30 = *(void *)v27;
      v27 += 56;
      uint64_t v29 = v30;
      uint64_t v31 = v30 - v25;
      BOOL v32 = v28 == 0;
      if (v28) {
        uint64_t v33 = 5242879;
      }
      else {
        uint64_t v33 = 13311;
      }
      if (v32) {
        uint64_t v34 = 13312;
      }
      else {
        uint64_t v34 = 5242880;
      }
      v26 += (v31 + v33) / v34;
      uint64_t v25 = v29;
      --v13;
    }
    while (v13);
    if (*(_DWORD *)(a1 + 164) >= v26) {
      goto LABEL_43;
    }
LABEL_32:
    free(v15);
    a2 = v42;
    goto LABEL_33;
  }
  LODWORD(v17) = 1;
  do
  {
    v16 += 24;
    int v18 = v17;
    unint64_t v19 = add_sections(v15, v17, 1);
    uint64_t v20 = v19;
    if (v16 > v9)
    {
      if (!v19) {
        goto LABEL_32;
      }
      uint64_t v36 = &v19[56 * v17];
      int v37 = 1;
      v36[52] = 1;
      *(void *)uint64_t v36 = v9;
      *((void *)v36 + 1) = 5242880;
      *((_DWORD *)v36 + 8) = 6;
      unsigned int v38 = v36 + 24;
LABEL_41:
      *unsigned int v38 = 0;
      uint64_t v17 = (v18 + v37);
      if (v17) {
        goto LABEL_21;
      }
      goto LABEL_42;
    }
    if (!v19) {
      goto LABEL_32;
    }
    CFStringRef v21 = &v19[56 * v17];
    v21[52] = 1;
    *(void *)CFStringRef v21 = v16;
    *((void *)v21 + 1) = 5242880;
    *((_DWORD *)v21 + 8) = 6;
    *((void *)v21 + 3) = 0;
    uint64_t v17 = (v17 + 1);
    if (v16 >= v9) {
      goto LABEL_19;
    }
    unint64_t v22 = v16 + v43.u32[2];
    unint64_t v19 = add_sections(v19, (v18 + 1), 1);
    if (v22 > v9)
    {
      unsigned int v15 = v20;
      if (!v19) {
        goto LABEL_32;
      }
      unint64_t v39 = &v19[56 * v17];
      v39[52] = 1;
      *(void *)unint64_t v39 = v9;
      *((void *)v39 + 1) = 5242880;
      *((_DWORD *)v39 + 8) = 7;
      unsigned int v38 = v39 + 24;
      int v37 = 2;
      goto LABEL_41;
    }
    unsigned int v15 = v20;
    if (!v19) {
      goto LABEL_32;
    }
    unint64_t v23 = v16 + v43.u32[2];
    uint64_t v24 = &v19[56 * v17];
    v24[52] = 1;
    *(void *)uint64_t v24 = v23;
    *((void *)v24 + 1) = 5242880;
    *((_DWORD *)v24 + 8) = 7;
    *((void *)v24 + 3) = 0;
    v16 += v43.u32[2];
    uint64_t v17 = (v18 + 2);
LABEL_19:
    unsigned int v15 = v19;
  }
  while (v16 < v9);
  if (v17)
  {
LABEL_21:
    uint64_t v13 = v17;
    unsigned int v15 = v19;
    goto LABEL_23;
  }
LABEL_42:
  unsigned int v15 = v19;
LABEL_43:
  char *v42 = v15;
  if (gVerbose == 2)
  {
    if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_730_0);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
      && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
    {
      CFStringRef v40 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"returning %u sections for \"%s\"\n", v17, *(void *)(a1 + 104));
      if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_736);
      }
      int v41 = CK_DEFAULT_LOG_INTERNAL_9;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)stat buf = 138543362;
        *(void *)&uint8_t buf[4] = v40;
        _os_log_impl(&dword_215163000, v41, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      if (v40) {
        CFRelease(v40);
      }
    }
    print_sections((uint64_t *)v15, v17);
  }
  return v17;
}

uint64_t create_sqlite3_db_profile(uint64_t a1, char **a2, _DWORD *a3, unsigned char *a4)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (a3) {
    *a3 = 8;
  }
  if (a4) {
    *a4 = 0;
  }
  uint64_t v8 = *(void *)(a1 + 80);
  int v27 = 0;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  *(void *)stat buf = 0;
  if (!(*(unsigned int (**)(uint64_t, void, long long *, uint64_t, uint8_t *, void))(v10 + 72))(v9, 0, &v21, 100, buf, 0))goto LABEL_12; {
  if (*(void *)buf <= 0x63uLL)
  }
    goto LABEL_12;
  int v11 = (unsigned __int16)v22;
  uint64_t v12 = __rev16((unsigned __int16)v22);
  LOWORD(v22) = v12;
  uint64_t v13 = add_sections(0, 0, 1);
  if (!v13) {
    goto LABEL_12;
  }
  unsigned int v14 = (uint64_t *)v13;
  v13[52] = 1;
  uint64_t v15 = 0x10000;
  if (v11 != 256) {
    uint64_t v15 = v12;
  }
  *(void *)uint64_t v13 = v8;
  *((void *)v13 + 1) = v15;
  *((_DWORD *)v13 + 8) = 4;
  *((void *)v13 + 3) = 0;
  if (*(_DWORD *)(a1 + 164) < (((int)v8 + 5242879) / 5242880))
  {
    free(v13);
LABEL_12:
    if (a4) {
      *a4 = 1;
    }
    return (*(uint64_t (**)(uint64_t, char **, _DWORD *, void))(a1 + 168))(a1, a2, a3, 0);
  }
  *a2 = v13;
  if (gVerbose != 2) {
    return 1;
  }
  if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_739_1);
  }
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
    && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
  {
    CFStringRef v18 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"returning %u sections for \"%s\"\n", 1, *(void *)(a1 + 104));
    if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_745);
    }
    unint64_t v19 = CK_DEFAULT_LOG_INTERNAL_9;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)stat buf = 138543362;
      *(void *)&uint8_t buf[4] = v18;
      _os_log_impl(&dword_215163000, v19, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
    }
    if (v18) {
      CFRelease(v18);
    }
  }
  uint64_t v16 = 1;
  print_sections(v14, 1u);
  return v16;
}

os_log_t __createChunkProfile_block_invoke_113()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __print_sections_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __print_sections_block_invoke_3()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __extension_from_uti_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __extension_from_uti_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __canonize_extension_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __canonize_extension_block_invoke_3()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_default_fixed_profile_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_default_fixed_profile_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_default_fixed_profile_block_invoke_165()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_default_fixed_profile_block_invoke_2_172()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_default_fixed_profile_block_invoke_176()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_default_fixed_profile_block_invoke_2_183()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_default_fixed_profile_block_invoke_187()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_default_fixed_profile_block_invoke_3()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_default_fixed_profile_block_invoke_201()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_default_fixed_profile_block_invoke_2_208()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_default_fixed_profile_block_invoke_212()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_default_fixed_profile_block_invoke_3_223()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_default_fixed_profile_block_invoke_227()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_default_fixed_profile_block_invoke_3_235()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_safe_rabin_profile_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_safe_rabin_profile_block_invoke_3()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_safe_rabin_profile_block_invoke_251()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_safe_rabin_profile_block_invoke_3_262()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_default_rabin_profile_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_default_rabin_profile_block_invoke_3()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

uint64_t detect_magics(uint64_t a1, int *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  *a2 = 0;
  CFStringRef v4 = (_DWORD *)(a1 + 32);
  unint64_t v5 = *(void *)(a1 + 24);
  if (v5 >= 4 && (*v4 == 67324752 || *v4 == 101010256))
  {
    int v6 = 3;
    goto LABEL_27;
  }
  if (is_ID3v2_tag(a1 + 32, v5))
  {
    int v6 = 4;
LABEL_27:
    *a2 = v6;
    return 0;
  }
  if (v5 >= 0xC)
  {
    int v7 = *(_DWORD *)(a1 + 36);
    BOOL v8 = v7 != 1887007846;
    if (v7 == 1887007846 || *(_DWORD *)(a1 + 36) == 1987014509 || *(_DWORD *)(a1 + 36) == 1952539757)
    {
      uint64_t v9 = 0;
      LODWORD(v10) = 0;
      do
        uint64_t v10 = *((unsigned __int8 *)v4 + v9++) | (v10 << 8);
      while (v9 != 4);
      if (gVerbose == 2)
      {
        if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_284_0);
        }
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
          && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
        {
          CFStringRef v11 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"qt sz:0x%x, has_type:%d, \"%c%c%c%c\"\n", v10, !v8, *(unsigned __int8 *)(a1 + 40), *(unsigned __int8 *)(a1 + 41), *(unsigned __int8 *)(a1 + 42), *(unsigned __int8 *)(a1 + 43));
          if (CK_DEFAULT_LOG_BLOCK_9 != -1) {
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_293);
          }
          uint64_t v12 = CK_DEFAULT_LOG_INTERNAL_9;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)stat buf = 138543362;
            CFStringRef v16 = v11;
            _os_log_impl(&dword_215163000, v12, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
          }
          if (v11) {
            CFRelease(v11);
          }
        }
      }
      if (v8)
      {
        if (v10 >= 8)
        {
LABEL_25:
          int v6 = 5;
          goto LABEL_27;
        }
      }
      else if (v10 >= 0xC)
      {
        BOOL v14 = *(_WORD *)(a1 + 40) == 28781 && *(unsigned char *)(a1 + 42) == 52;
        if (v14
          || *(_DWORD *)(a1 + 40) == 538997873
          || *(_DWORD *)(a1 + 40) == 542520397
          || *(_DWORD *)(a1 + 40) == 541144141)
        {
          goto LABEL_25;
        }
      }
    }
  }
  return 0;
}

BOOL is_ID3v2_tag(uint64_t a1, unint64_t a2)
{
  if (a2 < 0xA) {
    return 0;
  }
  BOOL v2 = *(_WORD *)a1 == 17481 && *(unsigned char *)(a1 + 2) == 51;
  return v2
      && *(unsigned __int8 *)(a1 + 3) != 255
      && *(unsigned __int8 *)(a1 + 4) != 255
      && *(unsigned __int8 *)(a1 + 6) <= 0x80u
      && *(unsigned __int8 *)(a1 + 7) <= 0x80u
      && *(unsigned __int8 *)(a1 + 8) <= 0x80u
      && *(unsigned __int8 *)(a1 + 9) < 0x81u;
}

os_log_t __is_qt_header_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __is_qt_header_block_invoke_3()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_custom_fixed_profile_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_custom_fixed_profile_block_invoke_3()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke_3()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke_320()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke_3_331()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke_335()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke_3_343()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke_347()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke_3_358()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke_362()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke_3_373()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke_378()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke_3_389()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke_393()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke_3_401()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke_405()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke_3_416()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

uint64_t cmp_dir_rec_data(void *a1, void *a2)
{
  if (*a1 < *a2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *a2 < *a1;
  }
}

os_log_t __create_zip_profile_block_invoke_420()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke_3_431()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

char *add_sections(void *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (char *)malloc_type_realloc(a1, 56 * (a3 + a2), 0x1000040C4DFEAEFuLL);
  int v6 = v5;
  if (v5) {
    bzero(&v5[56 * a2], 56 * a3);
  }
  return v6;
}

os_log_t __create_zip_profile_block_invoke_435()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke_3_446()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke_450()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke_3_458()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke_462()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke_3_473()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke_477()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke_3_488()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke_492()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke_3_503()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke_507()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke_3_515()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __locate_central_dir_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __locate_central_dir_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __locate_central_dir_block_invoke_529()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __locate_central_dir_block_invoke_2_533()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __locate_central_dir_block_invoke_537()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __locate_central_dir_block_invoke_3()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __locate_central_dir_block_invoke_551()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __locate_central_dir_block_invoke_2_558()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __locate_central_dir_block_invoke_562()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __locate_central_dir_block_invoke_2_566()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __locate_central_dir_block_invoke_570()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __locate_central_dir_block_invoke_3_581()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __locate_central_dir_block_invoke_585()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __locate_central_dir_block_invoke_2_592()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __locate_central_dir_block_invoke_596()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __locate_central_dir_block_invoke_2_600()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __locate_central_dir_block_invoke_604()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __locate_central_dir_block_invoke_3_615()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __locate_central_dir_block_invoke_619()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __locate_central_dir_block_invoke_3_630()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __locate_central_dir_block_invoke_634()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __locate_central_dir_block_invoke_3_645()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __locate_zip64_extra_field_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __locate_zip64_extra_field_block_invoke_3()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __locate_zip64_extra_field_block_invoke_661()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __locate_zip64_extra_field_block_invoke_3_669()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_mp3_profile_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_mp3_profile_block_invoke_3()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_mp3_profile_block_invoke_685()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_mp3_profile_block_invoke_2_692()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_mp3_profile_block_invoke_697()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_mp3_profile_block_invoke_3_710()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_mp3_profile_block_invoke_715()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_mp3_profile_block_invoke_3_723()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_sqlite3_db_wal_profile_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_sqlite3_db_wal_profile_block_invoke_3()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_sqlite3_db_profile_block_invoke()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_sqlite3_db_profile_block_invoke_3()
{
  os_log_t result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

uint64_t CKProfileResultsCreate(uint64_t *a1, int a2, const void *a3, const void *a4, uint64_t a5, void *a6)
{
  if (!a1) {
    CKProfileResultsCreate_cold_1();
  }
  if (a6) {
    *a6 = 0;
  }
  *a1 = 0;
  uint64_t v11 = CKTypeRegister(&CKProfileResultsGetTypeID_typeID);
  uint64_t result = CKTypeCreateInstance_(0, v11, 0x30uLL);
  if (result)
  {
    uint64_t v13 = result;
    *(_DWORD *)(result + 16) = a2;
    *(void *)(result + 24) = a3;
    if (a3) {
      CFRetain(a3);
    }
    *(void *)(v13 + 32) = a4;
    if (a4) {
      CFRetain(a4);
    }
    *(void *)(v13 + 40) = a5;
    *a1 = v13;
    return 1;
  }
  return result;
}

uint64_t CKProfileResultsType(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 16);
  }
  return result;
}

uint64_t CKProfileResultsConfigurationVersion(uint64_t result)
{
  if (result) {
    return *(void *)(result + 24);
  }
  return result;
}

uint64_t CKProfileResultsResolvedFileExtension(uint64_t result)
{
  if (result) {
    return *(void *)(result + 32);
  }
  return result;
}

uint64_t CKProfileResultsIsDefault(uint64_t result)
{
  if (result) {
    return *(void *)(result + 40);
  }
  return result;
}

const char *CKProfileTypeDescription(unsigned int a1)
{
  if (a1 > 9) {
    return "kCKProfileTypeUnknown";
  }
  else {
    return (&off_264236FF0)[a1];
  }
}

uint64_t CKProfileTypeFromString(const void *a1)
{
  if (CFEqual(a1, @"kCKProfileTypeNone")) {
    return 0;
  }
  if (CFEqual(a1, @"kCKProfileTypeFixed")) {
    return 1;
  }
  if (CFEqual(a1, @"kCKProfileTypeRabin")) {
    return 2;
  }
  if (CFEqual(a1, @"kCKProfileTypeZip")) {
    return 3;
  }
  if (CFEqual(a1, @"kCKProfileTypeMP3")) {
    return 4;
  }
  if (CFEqual(a1, @"kCKProfileTypeQuicktime")) {
    return 5;
  }
  if (CFEqual(a1, @"kCKProfileTypeCustomFixed")) {
    return 6;
  }
  if (CFEqual(a1, @"kCKProfileTypeSQLiteDatabaseWAL")) {
    return 7;
  }
  if (CFEqual(a1, @"kCKProfileTypeSQLiteDatabase")) {
    return 8;
  }
  if (CFEqual(a1, @"kCKProfileTypeSQLiteDatabaseS")) {
    return 9;
  }
  return 0;
}

const char *CKDefaultProfilePolicyTypeDescription(int a1)
{
  uint64_t v1 = "kCKDefaultProfilePolicyTypeUnknown";
  if (a1 == 1) {
    uint64_t v1 = "kCKDefaultProfilePolicyTypeFixedLength";
  }
  if (a1) {
    return v1;
  }
  else {
    return "kCKDefaultProfilePolicyTypeInferred";
  }
}

BOOL CKDefaultProfilePolicyTypeFromString(const void *a1)
{
  return !CFEqual(a1, @"kCKDefaultProfilePolicyTypeInferred")
      && CFEqual(a1, @"kCKDefaultProfilePolicyTypeFixedLength") != 0;
}

void _CKProfileResultsCFFinalize(uint64_t a1)
{
  BOOL v2 = *(const void **)(a1 + 24);
  if (v2) {
    CFRelease(v2);
  }
  *(void *)(a1 + 24) = 0;
  CFStringRef v3 = *(const void **)(a1 + 32);
  if (v3) {
    CFRelease(v3);
  }
  *(void *)(a1 + 32) = 0;
}

BOOL _CKProfileResultsCFEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

CFStringRef _CKProfileResultsCFCopyFormatDescription(uint64_t a1)
{
  CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  uint64_t v2 = *(int *)(a1 + 16);
  if (v2 > 9) {
    CFStringRef v3 = "kCKProfileTypeUnknown";
  }
  else {
    CFStringRef v3 = (&off_264236FF0)[v2];
  }
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  if (*(void *)(a1 + 40))
  {
    int v6 = "(null)";
  }
  else
  {
    int Value = CFBooleanGetValue(0);
    int v6 = "T";
    if (!Value) {
      int v6 = "F";
    }
  }
  return CFStringCreateWithFormat(v1, 0, @"type:%s configVersion:%@ ext:%@ isDefault:%s", v3, v4, v5, v6);
}

uint64_t CKChunkSignatureGeneratorV1Init(uint64_t a1)
{
  *(_DWORD *)(a1 + 40) = 0;
  return 1;
}

uint64_t CKChunkSignatureGeneratorV1Update(uint64_t a1, const void *a2, CC_LONG a3)
{
  *(_DWORD *)(a1 + 40) += a3;
  CC_SHA256_Update(*(CC_SHA256_CTX **)(a1 + 48), a2, a3);
  return 1;
}

uint64_t CKChunkSignatureGeneratorV1Finish(uint64_t a1, uint64_t a2, uint64_t *a3, CFErrorRef *a4)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (a4) {
    *a4 = 0;
  }
  *(_OWORD *)md = 0u;
  long long v26 = 0u;
  uint64_t v9 = (uint64_t *)(a1 + 32);
  BOOL v8 = *(const void **)(a1 + 32);
  if (!v8)
  {
    CC_SHA256_Final(md, *(CC_SHA256_CTX **)(a1 + 48));
    char v24 = CKChunkDigestArgumentsChunkSchemeByte(*(void *)(a1 + 24));
    int v13 = CKChunkDigestArgumentsChunkEncryptionKeySchemeByte(*(void *)(a1 + 24));
    unsigned __int8 v23 = v13;
    if (v13)
    {
      size_t v14 = CKSchemeAndEncryptionKeySize(&v23);
      uint64_t v15 = (unsigned __int8 *)malloc_type_malloc(v14, 0xB6CAFB40uLL);
      uint64_t v10 = v15;
      if (!v15)
      {
        uint64_t v11 = 0;
        goto LABEL_21;
      }
      *uint64_t v15 = v23;
      size_t v16 = CKChunkEncryptionKeySize(v15);
      bzero(v10 + 1, v16);
      for (uint64_t i = 0; i != 16; ++i)
        v10[i + 1] = md[i + 16] ^ md[i];
    }
    else
    {
      uint64_t v10 = 0;
    }
    size_t v18 = CKChunkSchemeAndSignatureSize(&v24);
    uint64_t v11 = (char *)malloc_type_malloc(v18, 0xFD3E9162uLL);
    if (!v11) {
      goto LABEL_21;
    }
    CC_SHA256(md, 0x20u, md);
    *uint64_t v11 = v24;
    long long v19 = *(_OWORD *)md;
    *(_DWORD *)(v11 + 17) = v26;
    *(_OWORD *)(v11 + 1) = v19;
    if (!CKChunkDigestResultsCreate((void *)(a1 + 32), v11, v10, *(_DWORD *)(a1 + 40))) {
      goto LABEL_21;
    }
    if (a2)
    {
      uint64_t v12 = CKChunkDigestResultsSignatureAndKeyEqual(a2, *v9);
      if (!v12)
      {
        CFErrorRef v20 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], @"com.apple.chunkinglibrary", 4, 0);
        CFErrorRef v21 = v20;
        if (a4 && v20)
        {
          CFRetain(v20);
          *a4 = v21;
LABEL_27:
          CFRelease(v21);
          goto LABEL_21;
        }
        if (v20) {
          goto LABEL_27;
        }
LABEL_21:
        uint64_t v12 = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v12 = 1;
    }
    BOOL v8 = (const void *)*v9;
    if (!*v9) {
      CKChunkSignatureGeneratorV1Finish_cold_1();
    }
    goto LABEL_5;
  }
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 1;
LABEL_5:
  if (a3)
  {
    CFRetain(v8);
    *a3 = *v9;
  }
LABEL_22:
  free(v10);
  free(v11);
  return v12;
}

uint64_t CKFileDigestResultsV1Alloc(void *a1)
{
  *a1 = 0;
  uint64_t v3 = 0;
  uint64_t result = CKFileDigestResultsAllocate(&v3, 1, 0);
  if (result) {
    *a1 = v3;
  }
  return result;
}

BOOL CKFileDigestResultsV1IsEqual(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned char **)(a1 + 32);
  uint64_t v3 = *(unsigned char **)(a2 + 32);
  if (v2 == v3) {
    return 1;
  }
  if (v2) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  return !v4 && CKFileSignaturesEqual(v2, v3);
}

CFStringRef CKFileDigestResultsV1CopyDescription(uint64_t a1)
{
  uint64_t v2 = CKFileSchemeAndSignatureCopyCString(*(char **)(a1 + 32));
  CFStringRef v3 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"sig %s len %llu", v2, *(void *)(a1 + 24));
  free(v2);
  return v3;
}

void CKChunkCryptorV2Init_cold_1()
{
  __assert_rtn("CKChunkCryptorV2Init", "CKChunkCryptorV2.c", 42, "paddedLength >= dataLength");
}

void CKCreateChunkIDsFromFile_cold_1()
{
}

void CKCreateChunkIDsFromFD_cold_1()
{
}

void CKChunkListForToken_cold_1()
{
}

void CKChunkRefsForToken_cold_1()
{
}

void CKCopyDataForChunkID_cold_1()
{
}

void addSourceChunk_cold_1()
{
}

void addSourceChunk_cold_2()
{
}

void addSourceChunk_cold_3()
{
}

void _CSFlushChunkBatch_cold_1()
{
  __assert_rtn("_CSFlushChunkBatch", "ChunkStore.c", 977, "batchIndex <= chunkCount");
}

void _CSFlushChunkBatch_cold_2()
{
}

void CKRemoveStoredFile_cold_1()
{
}

void CKCompactStorage_cold_1()
{
}

void CKCreateStoredFileWithFlags_cold_1()
{
}

void CKCreateStoredFile_cold_1()
{
}

void CKCommitChunkedFile_cold_1()
{
}

void CKCopyChunkListForStoredFileToken_cold_1()
{
}

void CKGetLocationOfChunkInStorage_cold_1()
{
}

void CKTokenForStoredChunk_cold_1()
{
}

void CKRegisteredItemCount_cold_1()
{
}

void CKGetRegisteredItems_cold_1()
{
}

void CKRegisterChunksForFileWithHint_cold_1()
{
}

void CKRegisterChunksForItem_cold_1()
{
}

void registerChunksForItem_cold_1()
{
}

void registerChunksForItem_cold_2()
{
}

void registerChunksForItem_cold_3()
{
}

void registerChunksForItem_cold_4()
{
}

void registerChunksForItem_cold_5()
{
}

void registerChunksForItem_cold_6()
{
}

void registerChunksForItem_cold_7()
{
}

void registerChunksForItem_cold_8()
{
}

void CKRegisterItemAndChunks_cold_1()
{
}

void CKRegisterItemAndChunks_cold_2()
{
}

void CKUnregisterFile_cold_1()
{
}

void CKGetRegisteredChunksForItemID_cold_1()
{
}

void CKGetRegisteredChunksForFileSignature_cold_1()
{
}

void CKRegisterChunk_cold_1()
{
}

void CKGetRegisteredChunk_cold_1()
{
}

void CKGetRegisteredChunks_cold_1()
{
}

void CKRegisterFile_cold_1()
{
}

void CKGetRegisteredFileSignature_cold_1()
{
}

void CKGetRegisteredFileMetadata_cold_1()
{
}

void CKGetRegisteredFileItemID_cold_1()
{
}

void CKUnregisterAllTemporaryChunks_cold_1()
{
}

void CKUnregisterTemporaryChunks_cold_1()
{
}

void CKRegisterTemporaryChunk_cold_1()
{
}

void CKRegisterTemporaryChunks_cold_1()
{
}

void CKUnregisterTemporaryChunk_cold_1()
{
}

void CKUnregisterTemporaryNChunk_cold_1()
{
}

void CKUnregisterTemporaryTChunk_cold_1()
{
}

void CKRelocateTemporaryChunk_cold_1()
{
}

void CKConvertTemporaryChunks_cold_1()
{
}

void CKKeyForRegisteredChunk_cold_1()
{
}

void CKRegisterNeededChunk_cold_1()
{
}

void CKUnregisterChunksForItem_cold_1()
{
}

void CKTokenForRegisteredChunk_cold_1()
{
}

void chunkFdForStorage_cold_1()
{
}

void chunkFdForStorage_cold_2()
{
}

void setChunkListCacheBlob_cold_1()
{
  __assert_rtn("setChunkListCacheBlob", "CSchunk.c", 1214, "sizeof(*blob) <= (uint32_t)CFDataGetLength(data)");
}

void setChunkListCacheBlob_cold_2()
{
  __assert_rtn("setChunkListCacheBlob", "CSchunk.c", 1216, "kCKChunkListCacheType == opCtx->chunkListCacheType || kCKChunkListCacheCloudType == opCtx->chunkListCacheType");
}

void chunkItem_cold_1()
{
  __assert_rtn("setChunkListCache", "CSchunk.c", 1297, "chunkInfoSize <= UINT16_MAX");
}

void chunkItem_cold_2()
{
  __assert_rtn("setChunkListCache", "CSchunk.c", 1348, "p == (u_char*)blob + blobSize");
}

void chunkItem_cold_3()
{
}

void chunkItem_cold_4()
{
  __assert_rtn("setChunkListCache", "CSchunk.c", 1284, "fileSignatureSize <= UINT16_MAX");
}

void chunkItem_cold_5()
{
}

void chunkItem_cold_6()
{
}

void chunkItem_cold_7()
{
}

void chunkItem_cold_8()
{
}

void chunkItem_cold_9()
{
}

void closeFd_cold_1()
{
  __assert_rtn("closeFd", "CSchunk.c", 2275, "opCtx->openInfo == openInfo");
}

void statFd_cold_1()
{
  __assert_rtn("statFd", "CSchunk.c", 2287, "opCtx->openInfo == openInfo");
}

void readFd_cold_1()
{
  __assert_rtn("readFd", "CSchunk.c", 2307, "opCtx->openInfo == openInfo");
}

void getCacheBlobFd_cold_1()
{
  __assert_rtn("getCacheBlobFd", "CSchunk.c", 2378, "opCtx->openInfo == openInfo");
}

void setCacheBlobFd_cold_1()
{
  __assert_rtn("setCacheBlobFd", "CSchunk.c", 2388, "opCtx->openInfo == openInfo");
}

void _SetSourceChunk_cold_1()
{
}

void _SetSourceChunk_cold_2()
{
}

void _SetSourceChunk_cold_3()
{
}

void _SetSourceChunk_cold_4()
{
}

void _ClearSourceChunk_cold_1()
{
}

void _ClearSourceChunk_cold_2()
{
}

void CSfixed_subchunk_stream_cold_1()
{
}

void CSfixed_subchunk_stream_cold_2()
{
}

void CSfixed_subchunk_stream_cold_3()
{
}

void CSfixed_subchunk_stream_cold_4()
{
}

void CS_fixed_chunk_stream_accumulate_cold_1()
{
}

void cs_longrdunlock_cold_1()
{
  __assert_rtn("cs_longrdunlock", "CSChunkStore.c", 186, "lock->mutexHolder == 0");
}

void _CSPrepareStatement_cold_1()
{
}

void _CSGetStorageFile_cold_1()
{
  __assert_rtn("_CSGetStorageFile", "CSChunkStore.c", 1908, "neededSize <= INT_MAX");
}

void _CSCompactStorage_cold_1()
{
  __assert_rtn("_CSRelocateStorageFileChunks", "CSChunkStore.c", 2321, "totalMoved <= origFileSize");
}

void _CSCompactStorage_cold_2()
{
  __assert_rtn("_CSRelocateStorageFileChunks", "CSChunkStore.c", 2205, "newRowID != CK_INVALID_TOKEN");
}

void _CSCompactStorage_cold_3()
{
}

void _CSCompactStorage_cold_4()
{
}

void _CSCompactStorage_cold_5()
{
}

void _CSCompactStorage_cold_6()
{
}

void _CSRemovePendingBatchesForInode_cold_1()
{
}

void _CSRemoveStoredFile_cold_1()
{
}

void addRegisteredChunk_cold_1()
{
}

void addRegisteredChunk_cold_2()
{
}

void addRegisteredChunk_cold_3()
{
}

void addRegisteredChunk_cold_4()
{
}

void addStoredChunk_cold_1()
{
}

void addStoredChunk_cold_2()
{
}

void addStoredChunk_cold_3()
{
}

void addStoredChunk_cold_4()
{
}

void _CSRegisterChunk_cold_1()
{
}

void _CSRegisterChunk_cold_2()
{
}

void _CSRegisterChunk_cold_3()
{
}

void registerItem_cold_1()
{
}

void unregisterItem_cold_1()
{
}

void _CSUnregisterAllTemporaryChunks_cold_1()
{
}

void _CSUnregisterTemporaryChunks_cold_1()
{
}

void _CSRelocateRegisteredChunk_cold_1()
{
}

void _CSUnregisterChunk_cold_1()
{
}

void _CSConvertTemporaryChunks_cold_1()
{
}

void _CSUnregisterAllChunksForItem_cold_1()
{
}

void _CSGetRegisteredItems_cold_1()
{
}

void _CSGetRegisteredItems_cold_2()
{
  __assert_rtn("_CSGetRegisteredItems", "CSChunkStore.c", 4872, "*itemCount > 0 && \"item count = 0\"");
}

uint64_t _CSBruteForceDatabaseCorruptionRecovery_cold_1()
{
  if (_MergedGlobals != -1) {
    dispatch_once(&_MergedGlobals, &__block_literal_global_21);
  }
  if (!os_log_type_enabled((os_log_t)qword_267865070, OS_LOG_TYPE_ERROR)) {
    return 0;
  }
  CFStringRef v0 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"chunk store database corruption: would normally abort here");
  if (_MergedGlobals != -1) {
    dispatch_once(&_MergedGlobals, &__block_literal_global_28_0);
  }
  if (os_log_type_enabled((os_log_t)qword_267865070, OS_LOG_TYPE_ERROR)) {
    OUTLINED_FUNCTION_0(&dword_215163000, v1, v2, "%{public}@", v3, v4, v5, v6, 2u);
  }
  if (v0) {
    CFRelease(v0);
  }
  return 1;
}

uint64_t _CSBruteForceDatabaseCorruptionRecovery_cold_2()
{
  if (_MergedGlobals == -1) {
    return 1;
  }
  dispatch_once(&_MergedGlobals, &__block_literal_global_55);
  return 0;
}

void _CSBruteForceDatabaseCorruptionRecovery_cold_3()
{
  if (os_log_type_enabled((os_log_t)qword_267865070, OS_LOG_TYPE_ERROR))
  {
    CFStringRef v0 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"chunk store database corruption: aborting");
    if (_MergedGlobals != -1) {
      dispatch_once(&_MergedGlobals, &__block_literal_global_62);
    }
    if (os_log_type_enabled((os_log_t)qword_267865070, OS_LOG_TYPE_ERROR)) {
      OUTLINED_FUNCTION_0(&dword_215163000, v1, v2, "%{public}@", v3, v4, v5, v6, 2u);
    }
    if (v0) {
      CFRelease(v0);
    }
  }
  abort();
}

void CKChunkEncryptionKeySize_cold_1()
{
}

void CKSubchunkMaxLength_cold_1()
{
}

void CKStreamCoderUpdate_cold_1()
{
}

void CKStreamCoderFinish_cold_1()
{
}

void CKStreamCoderFinish_cold_2()
{
}

void CKStreamCoderFinish_cold_3()
{
}

void CKStreamCoderFinish_cold_4()
{
}

void CKChunkCoderUpdate_cold_1()
{
}

void get2FileSignatureCache_cold_1()
{
  __assert_rtn("get2FileSignatureCache", "CSutils.c", 631, "rc || CKFileDigestResultsFileSignature(fileDigestResults) != NULL");
}

void setFileSignatureCacheBlob_cold_1()
{
  __assert_rtn("setFileSignatureCacheBlob", "CSutils.c", 644, "sizeof(*blob) <= (uint32_t)CFDataGetLength(data)");
}

void setCacheBlob_cold_1()
{
  __assert_rtn("setCacheBlob", "CSutils.c", 1835, "sizeof(*header) <= bufferSize");
}

void setFileSignatureCache_cold_1()
{
  __assert_rtn("setFileSignatureCache", "CSutils.c", 660, "signature && signatureSize == CKSHA_SCHEME_AND_SIGNATURE_SIZE");
}

void CK2CalculateItemSignatureWithFlags_cold_1()
{
}

void CK2CalculateItemSignatureWithFlags_cold_2()
{
}

void CK2CalculateItemSignatureWithFlags_cold_3()
{
}

void freeOpCtx_cold_1()
{
}

void CKCalculateFileSignature_cold_1()
{
  __assert_rtn("CKCalculateFileSignature", "CSutils.c", 1001, "!sig || sigSize == CKSHA_SCHEME_AND_SIGNATURE_SIZE");
}

void CKCalculateFileSignature_cold_2()
{
  __assert_rtn("CKCalculateFileSignature", "CSutils.c", 992, "scheme == kCKFileSignatureSha1 && \"bad scheme\"");
}

void CKFileSignatureGeneratorV2Finish_cold_1()
{
  __assert_rtn("CKFileSignatureGeneratorV2Finish", "CKFileSignatureGeneratorV2.c", 87, "NULL != CKFileDigestResultsFileVerificationKey(expectedFileDigestResults)");
}

void adaptive_chunk_size_cold_1()
{
}

void createChunkProfile_cold_1()
{
}

void createChunkProfile_cold_2()
{
}

void createChunkProfile_cold_3()
{
}

void createChunkProfile_cold_4()
{
  __assert_rtn("createChunkProfile", "CSprofile.c", 1966, "!opCtx->fileDigestArguments || kCKPackageSignature != CKFileDigestArgumentsFileScheme(opCtx->fileDigestArguments)");
}

void createChunkProfile_cold_5()
{
  __assert_rtn("createChunkProfile", "CSprofile.c", 1967, "!opCtx->fileDigestArguments || kCKPackageSignatureSha2HMAC != CKFileDigestArgumentsFileScheme(opCtx->fileDigestArguments)");
}

void create_custom_fixed_profile_cold_1()
{
}

void create_zip_profile_cold_1()
{
}

void create_mp3_profile_cold_1()
{
  __assert_rtn("decode_synchsize", "CSprofile.c", 880, "result <= 0xfffffff");
}

void create_mp3_profile_cold_2()
{
}

void CKProfileResultsCreate_cold_1()
{
}

void CKChunkSignatureGeneratorV1Finish_cold_1()
{
}

CCCryptorStatus CCCryptorCreate(CCOperation op, CCAlgorithm alg, CCOptions options, const void *key, size_t keyLength, const void *iv, CCCryptorRef *cryptorRef)
{
  return MEMORY[0x270ED78C8](*(void *)&op, *(void *)&alg, *(void *)&options, key, keyLength, iv, cryptorRef);
}

CCCryptorStatus CCCryptorCreateWithMode(CCOperation op, CCMode mode, CCAlgorithm alg, CCPadding padding, const void *iv, const void *key, size_t keyLength, const void *tweak, size_t tweakLength, int numRounds, CCModeOptions options, CCCryptorRef *cryptorRef)
{
  return MEMORY[0x270ED78D0](*(void *)&op, *(void *)&mode, *(void *)&alg, *(void *)&padding, iv, key, keyLength, tweak);
}

uint64_t CCCryptorGCMDecrypt()
{
  return MEMORY[0x270ED78F8]();
}

uint64_t CCCryptorGCMEncrypt()
{
  return MEMORY[0x270ED7900]();
}

uint64_t CCCryptorGCMFinalize()
{
  return MEMORY[0x270ED7908]();
}

uint64_t CCCryptorGCMSetIV()
{
  return MEMORY[0x270ED7928]();
}

CCCryptorStatus CCCryptorRelease(CCCryptorRef cryptorRef)
{
  return MEMORY[0x270ED7940](cryptorRef);
}

CCCryptorStatus CCCryptorUpdate(CCCryptorRef cryptorRef, const void *dataIn, size_t dataInLength, void *dataOut, size_t dataOutAvailable, size_t *dataOutMoved)
{
  return MEMORY[0x270ED7950](cryptorRef, dataIn, dataInLength, dataOut, dataOutAvailable, dataOutMoved);
}

uint64_t CCKeyDerivationHMac()
{
  return MEMORY[0x270ED7A30]();
}

int CC_SHA1_Final(unsigned __int8 *md, CC_SHA1_CTX *c)
{
  return MEMORY[0x270ED7AF8](md, c);
}

int CC_SHA1_Init(CC_SHA1_CTX *c)
{
  return MEMORY[0x270ED7B00](c);
}

int CC_SHA1_Update(CC_SHA1_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x270ED7B08](c, data, *(void *)&len);
}

unsigned __int8 *__cdecl CC_SHA256(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x270ED7B28](data, *(void *)&len, md);
}

int CC_SHA256_Final(unsigned __int8 *md, CC_SHA256_CTX *c)
{
  return MEMORY[0x270ED7B30](md, c);
}

int CC_SHA256_Init(CC_SHA256_CTX *c)
{
  return MEMORY[0x270ED7B38](c);
}

int CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x270ED7B40](c, data, *(void *)&len);
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x270EE4300](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x270EE4320](theArray);
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x270EE4360](theArray, idx);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x270EE4528]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x270EE4530](BOOLean);
}

CFStringRef CFCopyDescription(CFTypeRef cf)
{
  return (CFStringRef)MEMORY[0x270EE4788](cf);
}

CFStringRef CFCopyTypeIDDescription(CFTypeID type_id)
{
  return (CFStringRef)MEMORY[0x270EE47B0](type_id);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x270EE47C8](allocator, bytes, length);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x270EE47E0](allocator, capacity);
}

CFMutableDataRef CFDataCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDataRef theData)
{
  return (CFMutableDataRef)MEMORY[0x270EE47E8](allocator, capacity, theData);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x270EE47F0](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x270EE4808](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x270EE4820](theData);
}

UInt8 *__cdecl CFDataGetMutableBytePtr(CFMutableDataRef theData)
{
  return (UInt8 *)MEMORY[0x270EE4830](theData);
}

void CFDataSetLength(CFMutableDataRef theData, CFIndex length)
{
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x270EE48F0](theDict, key);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x270EE4920](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x270EE4930](theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x270EE4948]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x270EE4958](theDict, key);
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x270EE4998](cf1, cf2);
}

CFErrorRef CFErrorCreate(CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, CFDictionaryRef userInfo)
{
  return (CFErrorRef)MEMORY[0x270EE49C0](allocator, domain, code, userInfo);
}

CFIndex CFErrorGetCode(CFErrorRef err)
{
  return MEMORY[0x270EE49D0](err);
}

CFErrorDomain CFErrorGetDomain(CFErrorRef err)
{
  return (CFErrorDomain)MEMORY[0x270EE49D8](err);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x270EE4A30](cf);
}

CFHashCode CFHash(CFTypeRef cf)
{
  return MEMORY[0x270EE4A48](cf);
}

CFLocaleRef CFLocaleCreate(CFAllocatorRef allocator, CFLocaleIdentifier localeIdentifier)
{
  return (CFLocaleRef)MEMORY[0x270EE4A80](allocator, localeIdentifier);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x270EE4BE8](allocator, theType, valuePtr);
}

CFNumberFormatterRef CFNumberFormatterCreate(CFAllocatorRef allocator, CFLocaleRef locale, CFNumberFormatterStyle style)
{
  return (CFNumberFormatterRef)MEMORY[0x270EE4BF8](allocator, locale, style);
}

CFNumberRef CFNumberFormatterCreateNumberFromString(CFAllocatorRef allocator, CFNumberFormatterRef formatter, CFStringRef string, CFRange *rangep, CFOptionFlags options)
{
  return (CFNumberRef)MEMORY[0x270EE4C00](allocator, formatter, string, rangep, options);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x270EE4C58]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x270EE4C70](number, theType, valuePtr);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x270EE4E10](cf);
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
}

Boolean CFSetContainsValue(CFSetRef theSet, const void *value)
{
  return MEMORY[0x270EE4F48](theSet, value);
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return (CFMutableSetRef)MEMORY[0x270EE4F60](allocator, capacity, callBacks);
}

CFIndex CFSetGetCount(CFSetRef theSet)
{
  return MEMORY[0x270EE4F70](theSet);
}

void CFSetGetValues(CFSetRef theSet, const void **values)
{
}

void CFSetRemoveValue(CFMutableSetRef theSet, const void *value)
{
}

CFStringRef CFStringCreateWithBytesNoCopy(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x270EE50D8](alloc, bytes, numBytes, *(void *)&encoding, isExternalRepresentation, contentsDeallocator);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x270EE50E0](alloc, cStr, *(void *)&encoding);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x270EE5110](alloc, formatOptions, format);
}

CFStringRef CFStringCreateWithFormatAndArguments(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, va_list arguments)
{
  return (CFStringRef)MEMORY[0x270EE5118](alloc, formatOptions, format, arguments);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x270EE5178](theString, buffer, bufferSize, *(void *)&encoding);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x270EE5218]();
}

Boolean CFURLGetFileSystemRepresentation(CFURLRef url, Boolean resolveAgainstBase, UInt8 *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x270EE5430](url, resolveAgainstBase, buffer, maxBufLen);
}

uint64_t SecCFAllocatorZeroize()
{
  return MEMORY[0x270EFD6B8]();
}

CFStringRef UTTypeCopyPreferredTagWithClass(CFStringRef inUTI, CFStringRef inTagClass)
{
  return (CFStringRef)MEMORY[0x270EE8570](inUTI, inTagClass);
}

CFStringRef UTTypeCreatePreferredIdentifierForTag(CFStringRef inTagClass, CFStringRef inTag, CFStringRef inConformingToUTI)
{
  return (CFStringRef)MEMORY[0x270EE8580](inTagClass, inTag, inConformingToUTI);
}

uint64_t _CFRuntimeCreateInstance()
{
  return MEMORY[0x270EE56F0]();
}

uint64_t _CFRuntimeRegisterClass()
{
  return MEMORY[0x270EE5700]();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

int *__error(void)
{
  return (int *)MEMORY[0x270ED7DC0]();
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x270ED7E38]();
}

uint64_t __memset_chk()
{
  return MEMORY[0x270ED7E48]();
}

int __sprintf_chk(char *a1, int a2, size_t a3, const char *a4, ...)
{
  return MEMORY[0x270ED7EB0](a1, *(void *)&a2, a3, a4);
}

uint64_t __strlcpy_chk()
{
  return MEMORY[0x270ED7EE0]();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void abort(void)
{
}

int access(const char *a1, int a2)
{
  return MEMORY[0x270ED8480](a1, *(void *)&a2);
}

uint64_t analytics_send_event()
{
  return MEMORY[0x270F18A68]();
}

int bcmp(const void *a1, const void *a2, size_t a3)
{
  return MEMORY[0x270ED8750](a1, a2, a3);
}

void bzero(void *a1, size_t a2)
{
}

uint64_t cc_clear()
{
  return MEMORY[0x270ED87D0]();
}

uint64_t cc_cmp_safe()
{
  return MEMORY[0x270ED87D8]();
}

uint64_t ccaes_ctr_crypt_mode()
{
  return MEMORY[0x270ED87F0]();
}

uint64_t ccctr_init()
{
  return MEMORY[0x270ED8850]();
}

uint64_t ccctr_one_shot()
{
  return MEMORY[0x270ED8858]();
}

uint64_t ccctr_update()
{
  return MEMORY[0x270ED8860]();
}

uint64_t ccdigest_init()
{
  return MEMORY[0x270ED8A48]();
}

uint64_t ccdigest_update()
{
  return MEMORY[0x270ED8A50]();
}

uint64_t cchkdf()
{
  return MEMORY[0x270ED8BA8]();
}

uint64_t cchmac()
{
  return MEMORY[0x270ED8BC0]();
}

uint64_t ccsha256_di()
{
  return MEMORY[0x270ED8D70]();
}

int close(int a1)
{
  return MEMORY[0x270ED8F18](*(void *)&a1);
}

int copyfile(const char *from, const char *to, copyfile_state_t state, copyfile_flags_t flags)
{
  return MEMORY[0x270ED9100](from, to, state, *(void *)&flags);
}

copyfile_state_t copyfile_state_alloc(void)
{
  return (copyfile_state_t)MEMORY[0x270ED9108]();
}

int copyfile_state_free(copyfile_state_t a1)
{
  return MEMORY[0x270ED9110](a1);
}

int copyfile_state_set(copyfile_state_t s, uint32_t flag, const void *src)
{
  return MEMORY[0x270ED9120](s, *(void *)&flag, src);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

void exit(int a1)
{
}

long double exp2(long double __x)
{
  MEMORY[0x270ED9860](__x);
  return result;
}

int fchflags(int a1, __uint32_t a2)
{
  return MEMORY[0x270ED9898](*(void *)&a1, *(void *)&a2);
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x270ED98D0](*(void *)&a1, *(void *)&a2);
}

int ffsctl(int a1, unint64_t a2, void *a3, unsigned int a4)
{
  return MEMORY[0x270ED9940](*(void *)&a1, a2, a3, *(void *)&a4);
}

int fgetattrlist(int a1, void *a2, void *a3, size_t a4, unsigned int a5)
{
  return MEMORY[0x270ED9948](*(void *)&a1, a2, a3, a4, *(void *)&a5);
}

ssize_t fgetxattr(int fd, const char *name, void *value, size_t size, u_int32_t position, int options)
{
  return MEMORY[0x270ED9970](*(void *)&fd, name, value, size, *(void *)&position, *(void *)&options);
}

uint64_t fpathconf(int a1, int a2)
{
  return MEMORY[0x270ED9A00](*(void *)&a1, *(void *)&a2);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x270ED9A08](a1, a2);
}

void free(void *a1)
{
}

int fremovexattr(int fd, const char *name, int options)
{
  return MEMORY[0x270ED9A60](*(void *)&fd, name, *(void *)&options);
}

int fsetxattr(int fd, const char *name, const void *value, size_t size, u_int32_t position, int options)
{
  return MEMORY[0x270ED9AE0](*(void *)&fd, name, value, size, *(void *)&position, *(void *)&options);
}

ssize_t fsgetpath(char *a1, size_t a2, fsid_t *a3, uint64_t a4)
{
  return MEMORY[0x270ED9AE8](a1, a2, a3, a4);
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x270ED9AF0](*(void *)&a1, a2);
}

int fsync(int a1)
{
  return MEMORY[0x270ED9B10](*(void *)&a1);
}

int ftruncate(int a1, off_t a2)
{
  return MEMORY[0x270ED9B30](*(void *)&a1, a2);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x270ED9B88](__ptr, __size, __nitems, __stream);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x270ED9BE8](a1);
}

pid_t getpid(void)
{
  return MEMORY[0x270ED9CE0]();
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x270ED9D98](a1, a2);
}

long double log2(long double __x)
{
  MEMORY[0x270EDA0D8](__x);
  return result;
}

off_t lseek(int a1, off_t a2, int a3)
{
  return MEMORY[0x270EDA118](*(void *)&a1, a2, *(void *)&a3);
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x270EDA138]();
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA388](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA390](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA3A0](ptr, size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

void memset_pattern4(void *__b, const void *__pattern4, size_t __len)
{
}

int mkdir(const char *a1, mode_t a2)
{
  return MEMORY[0x270EDA518](a1, a2);
}

char *__cdecl mkdtemp(char *a1)
{
  return (char *)MEMORY[0x270EDA528](a1);
}

int mkpath_np(const char *path, mode_t omode)
{
  return MEMORY[0x270EDA550](path, omode);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x270EDA828](a1, *(void *)&a2);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x270EDA9A0](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_variant_has_internal_content()
{
  return MEMORY[0x270EDAB30]();
}

ssize_t pread(int __fd, void *__buf, size_t __nbyte, off_t a4)
{
  return MEMORY[0x270EDAD10](*(void *)&__fd, __buf, __nbyte, a4);
}

int printf(const char *a1, ...)
{
  return MEMORY[0x270EDAD20](a1);
}

int pthread_cond_destroy(pthread_cond_t *a1)
{
  return MEMORY[0x270EDAE58](a1);
}

int pthread_cond_init(pthread_cond_t *a1, const pthread_condattr_t *a2)
{
  return MEMORY[0x270EDAE60](a1, a2);
}

int pthread_cond_signal(pthread_cond_t *a1)
{
  return MEMORY[0x270EDAE68](a1);
}

int pthread_cond_wait(pthread_cond_t *a1, pthread_mutex_t *a2)
{
  return MEMORY[0x270EDAE88](a1, a2);
}

int pthread_equal(pthread_t a1, pthread_t a2)
{
  return MEMORY[0x270EDAEB0](a1, a2);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF50](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x270EDAF58](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF60](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF70](a1);
}

int pthread_once(pthread_once_t *a1, void (*a2)(void))
{
  return MEMORY[0x270EDAFA0](a1, a2);
}

int pthread_rwlock_destroy(pthread_rwlock_t *a1)
{
  return MEMORY[0x270EDAFC8](a1);
}

int pthread_rwlock_init(pthread_rwlock_t *a1, const pthread_rwlockattr_t *a2)
{
  return MEMORY[0x270EDAFD0](a1, a2);
}

int pthread_rwlock_rdlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x270EDAFD8](a1);
}

int pthread_rwlock_tryrdlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x270EDAFE0](a1);
}

int pthread_rwlock_unlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x270EDAFF0](a1);
}

int pthread_rwlock_wrlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x270EDAFF8](a1);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x270EDB010]();
}

int putchar(int a1)
{
  return MEMORY[0x270EDB090](*(void *)&a1);
}

int puts(const char *a1)
{
  return MEMORY[0x270EDB098](a1);
}

ssize_t pwrite(int __fd, const void *__buf, size_t __nbyte, off_t a4)
{
  return MEMORY[0x270EDB0A0](*(void *)&__fd, __buf, __nbyte, a4);
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
}

int rand(void)
{
  return MEMORY[0x270EDB0D8]();
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x270EDB120](*(void *)&a1, a2, a3);
}

ssize_t readlink(const char *a1, char *a2, size_t a3)
{
  return MEMORY[0x270EDB138](a1, a2, a3);
}

int removefile(const char *path, removefile_state_t state, removefile_flags_t flags)
{
  return MEMORY[0x270EDB1F0](path, state, *(void *)&flags);
}

void rename(const std::__fs::filesystem::path *__from, const std::__fs::filesystem::path *__to, std::error_code *__ec)
{
}

uint64_t sandbox_check()
{
  return MEMORY[0x270EDB290]();
}

int setenv(const char *__name, const char *__value, int __overwrite)
{
  return MEMORY[0x270EDB3D8](__name, __value, *(void *)&__overwrite);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x270EDB510](__str, __size, __format);
}

int sprintf(char *a1, const char *a2, ...)
{
  return MEMORY[0x270EDB530](a1, a2);
}

int sqlite3_bind_blob(sqlite3_stmt *a1, int a2, const void *a3, int n, void (__cdecl *a5)(void *))
{
  return MEMORY[0x270F9B490](a1, *(void *)&a2, a3, *(void *)&n, a5);
}

int sqlite3_bind_double(sqlite3_stmt *a1, int a2, double a3)
{
  return MEMORY[0x270F9B4A0](a1, *(void *)&a2, a3);
}

int sqlite3_bind_int(sqlite3_stmt *a1, int a2, int a3)
{
  return MEMORY[0x270F9B4A8](a1, *(void *)&a2, *(void *)&a3);
}

int sqlite3_bind_int64(sqlite3_stmt *a1, int a2, sqlite3_int64 a3)
{
  return MEMORY[0x270F9B4B0](a1, *(void *)&a2, a3);
}

int sqlite3_bind_null(sqlite3_stmt *a1, int a2)
{
  return MEMORY[0x270F9B4B8](a1, *(void *)&a2);
}

int sqlite3_bind_text(sqlite3_stmt *a1, int a2, const char *a3, int a4, void (__cdecl *a5)(void *))
{
  return MEMORY[0x270F9B4E0](a1, *(void *)&a2, a3, *(void *)&a4, a5);
}

int sqlite3_bind_text16(sqlite3_stmt *a1, int a2, const void *a3, int a4, void (__cdecl *a5)(void *))
{
  return MEMORY[0x270F9B4E8](a1, *(void *)&a2, a3, *(void *)&a4, a5);
}

int sqlite3_bind_value(sqlite3_stmt *a1, int a2, const sqlite3_value *a3)
{
  return MEMORY[0x270F9B4F8](a1, *(void *)&a2, a3);
}

int sqlite3_bind_zeroblob(sqlite3_stmt *a1, int a2, int n)
{
  return MEMORY[0x270F9B500](a1, *(void *)&a2, *(void *)&n);
}

int sqlite3_busy_timeout(sqlite3 *a1, int ms)
{
  return MEMORY[0x270F9B538](a1, *(void *)&ms);
}

int sqlite3_changes(sqlite3 *a1)
{
  return MEMORY[0x270F9B540](a1);
}

int sqlite3_clear_bindings(sqlite3_stmt *a1)
{
  return MEMORY[0x270F9B550](a1);
}

int sqlite3_close(sqlite3 *a1)
{
  return MEMORY[0x270F9B558](a1);
}

const void *__cdecl sqlite3_column_blob(sqlite3_stmt *a1, int iCol)
{
  return (const void *)MEMORY[0x270F9B568](a1, *(void *)&iCol);
}

int sqlite3_column_bytes(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x270F9B570](a1, *(void *)&iCol);
}

int sqlite3_column_bytes16(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x270F9B578](a1, *(void *)&iCol);
}

double sqlite3_column_double(sqlite3_stmt *a1, int iCol)
{
  MEMORY[0x270F9B590](a1, *(void *)&iCol);
  return result;
}

int sqlite3_column_int(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x270F9B598](a1, *(void *)&iCol);
}

sqlite3_int64 sqlite3_column_int64(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x270F9B5A0](a1, *(void *)&iCol);
}

const unsigned __int8 *__cdecl sqlite3_column_text(sqlite3_stmt *a1, int iCol)
{
  return (const unsigned __int8 *)MEMORY[0x270F9B5C0](a1, *(void *)&iCol);
}

const void *__cdecl sqlite3_column_text16(sqlite3_stmt *a1, int iCol)
{
  return (const void *)MEMORY[0x270F9B5C8](a1, *(void *)&iCol);
}

int sqlite3_column_type(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x270F9B5D0](a1, *(void *)&iCol);
}

sqlite3_value *__cdecl sqlite3_column_value(sqlite3_stmt *a1, int iCol)
{
  return (sqlite3_value *)MEMORY[0x270F9B5D8](a1, *(void *)&iCol);
}

const char *__cdecl sqlite3_errmsg(sqlite3 *a1)
{
  return (const char *)MEMORY[0x270F9B658](a1);
}

const char *__cdecl sqlite3_errstr(int a1)
{
  return (const char *)MEMORY[0x270F9B660](*(void *)&a1);
}

int sqlite3_exec(sqlite3 *a1, const char *sql, int (__cdecl *callback)(void *, int, char **, char **), void *a4, char **errmsg)
{
  return MEMORY[0x270F9B668](a1, sql, callback, a4, errmsg);
}

int sqlite3_finalize(sqlite3_stmt *pStmt)
{
  return MEMORY[0x270F9B690](pStmt);
}

void sqlite3_free(void *a1)
{
}

sqlite3_int64 sqlite3_last_insert_rowid(sqlite3 *a1)
{
  return MEMORY[0x270F9B6D0](a1);
}

sqlite3_stmt *__cdecl sqlite3_next_stmt(sqlite3 *pDb, sqlite3_stmt *pStmt)
{
  return (sqlite3_stmt *)MEMORY[0x270F9B700](pDb, pStmt);
}

int sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const char *zVfs)
{
  return MEMORY[0x270F9B710](filename, ppDb, *(void *)&flags, zVfs);
}

int sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return MEMORY[0x270F9B720](db, zSql, *(void *)&nByte, ppStmt, pzTail);
}

int sqlite3_reset(sqlite3_stmt *pStmt)
{
  return MEMORY[0x270F9B730](pStmt);
}

int sqlite3_step(sqlite3_stmt *a1)
{
  return MEMORY[0x270F9B800](a1);
}

char *__cdecl sqlite3_vmprintf(const char *a1, va_list a2)
{
  return (char *)MEMORY[0x270F9B8E8](a1, a2);
}

int sqlite3_wal_checkpoint_v2(sqlite3 *db, const char *zDb, int eMode, int *pnLog, int *pnCkpt)
{
  return MEMORY[0x270F9B900](db, zDb, *(void *)&eMode, pnLog, pnCkpt);
}

void srand(unsigned int a1)
{
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x270EDB568](a1, a2);
}

char *__cdecl strcat(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x270EDB5A0](__s1, __s2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x270EDB5A8](__s, *(void *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x270EDB5B0](__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x270EDB5D0](__s1);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x270EDB5D8](*(void *)&__errnum);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x270EDB610](__s);
}

int strncasecmp(const char *a1, const char *a2, size_t a3)
{
  return MEMORY[0x270EDB620](a1, a2, a3);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x270EDB658](__s1, __n);
}

char *__cdecl strrchr(char *__s, int __c)
{
  return (char *)MEMORY[0x270EDB680](__s, *(void *)&__c);
}

char *__cdecl strstr(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x270EDB6A0](__s1, __s2);
}

uint64_t strtoll(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x270EDB6E8](__str, __endptr, *(void *)&__base);
}

time_t time(time_t *a1)
{
  return MEMORY[0x270EDB930](a1);
}

int unlink(const char *a1)
{
  return MEMORY[0x270EDB9A8](a1);
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x270EDBB18](__str, __size, __format, a4);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x270EDBC30](*(void *)&__fd, __buf, __nbyte);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x270EDC008](keys, values, count);
}

void xpc_release(xpc_object_t object)
{
}